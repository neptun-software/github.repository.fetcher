{
  "metadata": {
    "timestamp": 1736568861343,
    "page": 56,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nginx-proxy/acme-companion",
      "stars": 7455,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0419921875,
          "content": "+.*\n+docs\n+go\n+test\n+README.md\n+schema.png\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2822265625,
          "content": ".docker\n.vscode\ncerts/\nconf.d/\ndata/\nvhost.d/\n\n# tests\ngo/\nnginx.tmpl\npebble.minica.pem\ntest/local_test_env.sh\ntest/tests/docker_api/expected-std-out.txt\ntest/tests/container_restart/docker_event_out.txt\ntest/tests/certs_standalone/letsencrypt_user_data\ntest/tests/location_config/le2.wtf\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.021484375,
          "content": "external-sources=true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.9697265625,
          "content": "FROM docker.io/nginxproxy/docker-gen:0.14.4 AS docker-gen\n\nFROM docker.io/library/alpine:3.21.2\n\nARG GIT_DESCRIBE=\"unknown\"\nARG ACMESH_VERSION=3.1.0\n\nENV ACMESH_VERSION=${ACMESH_VERSION} \\\n    COMPANION_VERSION=${GIT_DESCRIBE} \\\n    DOCKER_HOST=unix:///var/run/docker.sock \\\n    PATH=${PATH}:/app\n\n# Install packages required by the image\nRUN apk add --no-cache --virtual .bin-deps \\\n    bash \\\n    bind-tools \\\n    coreutils \\\n    curl \\\n    jq \\\n    libidn \\\n    oath-toolkit-oathtool \\\n    openssh-client \\\n    openssl \\\n    sed \\\n    socat \\\n    tar \\\n    tzdata\n\n# Install docker-gen from the nginxproxy/docker-gen image\nCOPY --from=docker-gen /usr/local/bin/docker-gen /usr/local/bin/\n\n# Install acme.sh\nCOPY /install_acme.sh /app/install_acme.sh\nRUN chmod +rx /app/install_acme.sh \\\n    && sync \\\n    && /app/install_acme.sh \\\n    && rm -f /app/install_acme.sh\n\nCOPY app LICENSE /app/\n\nWORKDIR /app\n\nENTRYPOINT [ \"/bin/bash\", \"/app/entrypoint.sh\" ]\nCMD [ \"/bin/bash\", \"/app/start.sh\" ]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.09765625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2017 Yves Blusseau\nCopyright (c) 2017-2022 Nicolas Duchon\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.2080078125,
          "content": "[![Tests](https://github.com/nginx-proxy/acme-companion/actions/workflows/test.yml/badge.svg)](https://github.com/nginx-proxy/acme-companion/actions/workflows/test.yml)\r\n[![GitHub release](https://img.shields.io/github/release/nginx-proxy/acme-companion.svg)](https://github.com/nginx-proxy/acme-companion/releases)\r\n[![Docker Image Size](https://img.shields.io/docker/image-size/nginxproxy/acme-companion?sort=semver)](https://hub.docker.com/r/nginxproxy/acme-companion \"Click to view the image on Docker Hub\")\r\n[![Docker stars](https://img.shields.io/docker/stars/nginxproxy/acme-companion.svg)](https://hub.docker.com/r/nginxproxy/acme-companion \"Click to view the image on Docker Hub\")\r\n[![Docker pulls](https://img.shields.io/docker/pulls/nginxproxy/acme-companion.svg)](https://hub.docker.com/r/nginxproxy/acme-companion \"Click to view the image on Docker Hub\")\r\n\r\n**acme-companion** is a lightweight companion container for [**nginx-proxy**](https://github.com/nginx-proxy/nginx-proxy).\r\n\r\nIt handles the automated creation, renewal and use of SSL certificates for proxied Docker containers through the ACME protocol.\r\n\r\n### Features:\r\n* Automated creation/renewal of Let's Encrypt (or other ACME CAs) certificates using [**acme.sh**](https://github.com/acmesh-official/acme.sh).\r\n* Let's Encrypt / ACME domain validation through `HTTP-01` (by default) or [`DNS-01`](https://github.com/nginx-proxy/acme-companion/blob/main/docs/Let's-Encrypt-and-ACME.md#dns-01-acme-challenge) challenge.\r\n* Automated update and reload of nginx config on certificate creation/renewal.\r\n* Support creation of [Multi-Domain (SAN) Certificates](https://github.com/nginx-proxy/acme-companion/blob/main/docs/Let's-Encrypt-and-ACME.md#multi-domains-certificates).\r\n* Support creation of [Wildcard Certificates](https://community.letsencrypt.org/t/acme-v2-production-environment-wildcards/55578) (with `DNS-01` challenge only).\r\n* Creation of a strong [RFC7919 Diffie-Hellman Group](https://datatracker.ietf.org/doc/html/rfc7919#appendix-A) at startup.\r\n* Work with all versions of docker.\r\n\r\n### HTTP-01 challenge requirements:\r\n* Your host **must** be publicly reachable on **both** port [`80`](https://letsencrypt.org/docs/allow-port-80/) and [`443`](https://github.com/nginx-proxy/acme-companion/discussions/873#discussioncomment-1410225).\r\n* Check your firewall rules and [**do not attempt to block port `80`**](https://letsencrypt.org/docs/allow-port-80/) as that will prevent `HTTP-01` challenges from completing.\r\n* For the same reason, you can't use nginx-proxy's [`HTTPS_METHOD=nohttp`](https://github.com/nginx-proxy/nginx-proxy#how-ssl-support-works).\r\n* The (sub)domains you want to issue certificates for must correctly resolve to the host.\r\n* If your (sub)domains have AAAA records set, the host must be publicly reachable over IPv6 on port `80` and `443`.\r\n\r\nIf you can't meet these requirements, you can use the `DNS-01` challenge instead. Please refer to the [documentation](https://github.com/nginx-proxy/acme-companion/blob/main/docs/Let's-Encrypt-and-ACME.md#dns-01-acme-challenge) for more information.\r\n\r\nIn addition to the above, please ensure that your DNS provider answers correctly to CAA record requests. [If your DNS provider answer with an error, Let's Encrypt won't issue a certificate for your domain](https://letsencrypt.org/docs/caa/). Let's Encrypt do not require that you set a CAA record on your domain, just that your DNS provider answers correctly.\r\n\r\n![schema](https://github.com/nginx-proxy/acme-companion/blob/main/schema.png)\r\n\r\n## Basic usage (with the nginx-proxy container)\r\n\r\nTwo writable volumes must be declared on the **nginx-proxy** container so that they can be shared with the **acme-companion** container:\r\n\r\n* `/etc/nginx/certs` to store certificates and private keys (readonly for the **nginx-proxy** container).\r\n* `/usr/share/nginx/html` to write `http-01` challenge files.\r\n\r\nAdditionally, a third volume must be declared on the **acme-companion** container to store `acme.sh` configuration and state: `/etc/acme.sh`.\r\n\r\nPlease also read the doc about [data persistence](./docs/Persistent-data.md).\r\n\r\nExample of use:\r\n\r\n### Step 1 - nginx-proxy\r\n\r\nStart **nginx-proxy** with the two additional volumes declared:\r\n\r\n```shell\r\n$ docker run --detach \\\r\n    --name nginx-proxy \\\r\n    --publish 80:80 \\\r\n    --publish 443:443 \\\r\n    --volume certs:/etc/nginx/certs \\\r\n    --volume html:/usr/share/nginx/html \\\r\n    --volume /var/run/docker.sock:/tmp/docker.sock:ro \\\r\n    nginxproxy/nginx-proxy\r\n```\r\n\r\nBinding the host docker socket (`/var/run/docker.sock`) inside the container to `/tmp/docker.sock` is a requirement of **nginx-proxy**.\r\n\r\n### Step 2 - acme-companion\r\n\r\nStart the **acme-companion** container, getting the volumes from **nginx-proxy** with `--volumes-from`:\r\n\r\n```shell\r\n$ docker run --detach \\\r\n    --name nginx-proxy-acme \\\r\n    --volumes-from nginx-proxy \\\r\n    --volume /var/run/docker.sock:/var/run/docker.sock:ro \\\r\n    --volume acme:/etc/acme.sh \\\r\n    --env \"DEFAULT_EMAIL=mail@yourdomain.tld\" \\\r\n    nginxproxy/acme-companion\r\n```\r\n\r\nThe host docker socket has to be bound inside this container too, this time to `/var/run/docker.sock`.\r\n\r\nAlbeit **optional**, it is **recommended** to provide a valid default email address through the `DEFAULT_EMAIL` environment variable, so that Let's Encrypt can warn you about expiring certificates and allow you to recover your account.\r\n\r\n### Step 3 - proxied container(s)\r\n\r\nOnce both **nginx-proxy** and **acme-companion** containers are up and running, start any container you want proxied with environment variables `VIRTUAL_HOST` and `LETSENCRYPT_HOST` both set to the domain(s) your proxied container is going to use.\r\n\r\n[`VIRTUAL_HOST`](https://github.com/nginx-proxy/nginx-proxy#usage) control proxying by **nginx-proxy** and `LETSENCRYPT_HOST` control certificate creation and SSL enabling by **acme-companion**.\r\n\r\nCertificates will only be issued for containers that have both `VIRTUAL_HOST` and `LETSENCRYPT_HOST` variables set to domain(s) that correctly resolve to the host, provided the host is publicly reachable.\r\n\r\n```shell\r\n$ docker run --detach \\\r\n    --name your-proxied-app \\\r\n    --env \"VIRTUAL_HOST=subdomain.yourdomain.tld\" \\\r\n    --env \"LETSENCRYPT_HOST=subdomain.yourdomain.tld\" \\\r\n    nginx\r\n```\r\n\r\nThe containers being proxied must expose the port to be proxied, either by using the `EXPOSE` directive in their Dockerfile or by using the `--expose` flag to `docker run` or `docker create`.\r\n\r\nIf the proxied container listen on and expose another port than the default `80`, you can force **nginx-proxy** to use this port with the [`VIRTUAL_PORT`](https://github.com/nginx-proxy/nginx-proxy#multiple-ports) environment variable.\r\n\r\nExample using [Grafana](https://hub.docker.com/r/grafana/grafana/) (expose and listen on port 3000):\r\n\r\n```shell\r\n$ docker run --detach \\\r\n    --name grafana \\\r\n    --env \"VIRTUAL_HOST=othersubdomain.yourdomain.tld\" \\\r\n    --env \"VIRTUAL_PORT=3000\" \\\r\n    --env \"LETSENCRYPT_HOST=othersubdomain.yourdomain.tld\" \\\r\n    --env \"LETSENCRYPT_EMAIL=mail@yourdomain.tld\" \\\r\n    grafana/grafana\r\n```\r\n\r\nRepeat [Step 3](#step-3---proxied-containers) for any other container you want to proxy.\r\n\r\n## Additional documentation\r\n\r\nPlease check the [docs section](https://github.com/nginx-proxy/acme-companion/tree/main/docs).\r\n"
        },
        {
          "name": "app",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "install_acme.sh",
          "type": "blob",
          "size": 0.529296875,
          "content": "#!/bin/bash\n\nset -e\n\n# Install git (required to fetch acme.sh)\napk --no-cache --virtual .acmesh-deps add git\n\n# Get acme.sh ACME client source\nmkdir /src\ngit -C /src clone https://github.com/acmesh-official/acme.sh.git\ncd /src/acme.sh\nif [[ \"$ACMESH_VERSION\" != \"master\" ]]; then\n  git -c advice.detachedHead=false checkout \"$ACMESH_VERSION\"\nfi\n\n# Install acme.sh in /app\n./acme.sh --install \\\n  --nocron \\\n  --auto-upgrade 0 \\\n  --home /app \\\n  --config-home /etc/acme.sh/default\n\n# Make house cleaning\ncd /\nrm -rf /src\napk del .acmesh-deps\n"
        },
        {
          "name": "schema.png",
          "type": "blob",
          "size": 39.5732421875,
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}