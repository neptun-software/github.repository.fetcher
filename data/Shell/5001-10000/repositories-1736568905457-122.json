{
  "metadata": {
    "timestamp": 1736568905457,
    "page": 122,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "petervanderdoes/gitflow-avh",
      "stars": 5424,
      "defaultBranch": "develop",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3359375,
          "content": "# This is the top-most .editorconfig file; do not search in parent directories.\nroot = true\n\n[*]\nend_of_line = LF\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[Changes.mdown]\nindent_style = space\nindent_size = 2\n\n[*.mdown]\ntrim_trailing_whitespace = false\n\n[{Makefile, makefile, GNUmakefile}]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.068359375,
          "content": "* text=auto\n\n*.awk  text eol=lf\n*.sed  text eol=lf\n*.sh   text eol=lf\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.41015625,
          "content": "#\n# This list is used by git-shortlog to fix a few botched names in the\n# git-flow repo, either because the author's full name was messed up and/or\n# not always written the same way, making contributions from the same person\n# appearing not to be so.\n#\n\nEric Holmes <eric@ejholmes.net>\nEric J. Holmes <eric@ejholmes.net>\nStefan Näwe <stefan.naewe@atlas-elektronik.com>\nStefan Näwe <stefan.naewe+github@googlemail.com>\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 1.408203125,
          "content": "git-flow AVH Authors\n\nThis software consists of voluntary contributions made by many\nindividuals. For exact contribution history, see the revision history\nand logs, available at\nhttp://github.com/petervanderdoes/gitflow.\n\n\nPeter van der Does\nVincent Driessen\nDaniel Dehennin\nBenedikt Böhm\nLeonid Komarovsky\nFelipe Talavera\nRandy Merrill\nKevin Woo\nDaniel Truemper\nEric J. Holmes\nFred Condo\nAlexandre Dutra\nAndreas Heiduk\nBen Loveridge\nFlorian Gamböck\nGergely Nagy\nJP Toto\nKiall Mac Innes\nLorin Hochstein\nOlivier Mengué\nOppodelldog\nStefan Näwe\nAdam Gibbins\nAlexander Groß\nAlexander Norström\nAlexander Zeitler\nBrian St. Pierre\nCararus Eugeniu\nChad Walker\nCraig Fowler\nEmre Berge Ergenekon\nGregor A. Cieslak\nGruen Christian-Rolf (Kiki)\nGuillaume-Jean Herbiet\nJames Moran\nJannis Leidel\nJason L. Shiffer\nJean Jordaan\nJelte Fennema\nJoe Ebmeier\nJohn Sivak\nJon Bernard\nJoseph A. Levin\nJoshua P. Tilles\nJuan Rial\nJustin Penney\nKonstantin Tjuterev\nKridsada Thanabulpong\nLeonardo Giordani\nLuis Fernando Gomes @luiscoms\nMark Borcherding\nMark Derricutt\nMateusz Kaczmarek\nMatias Hernan Lauriti\nMayerber Carvalho Neto\nNowell Strite\nOpher Vishnia\nPeter Schröder\nPokey Rule\nStefan Schüßler\nSteffen Jaeckel\nSteve Mao\nSteve Streeting\nTacit Sawk\nVedang Manerikar\nZheeeng\neddie cianci\ngmallard\ngpongelli\nraybec\n\n\nPortions of the project are derived from other open source works are clearly\nmarked.\n\nThis file is auto generated, any changes will be lost.\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 22.24609375,
          "content": "[petervanderdoes]: https://github.com/petervanderdoes \"Peter van der Does on github\"\n[adamrodger]: https://github.com/adamrodger\n[adutra]: https://github.com/adutra\n[aleno]: https://github.com/aleno\n[algernon]: https://github.com/algernon\n[asheiduk]: https://github.com/asheiduk\n[baby-gnu]: https://github.com/baby-gnu\n[bloomonkey]: https://github.com/bloomonkey\n[bloveridge]:  https://github.com/bloveridge \"Ben Loveridge on github\"\n[craigfowler]: https://github.com/craigfowler\n[cyberbob]: https://github.com/cyberbob\n[floga]: https://github.com/FloGa\n[gene-pavlovsky]: https://github.com/gene-pavlovsky\n[gpongelli]: https://github.com/gpongelli\n[gvangool]: https://github.com/gvangool\n[havvg]: https://github.com/havvg\n[jebmeier]: https://github.com/jebmeier\n[jeromebaum]: https://github.com/jeromebaum\n[jpenney78]: https://github.com/jpenney78\n[jsivak]: https://github.com/jsivak\n[kperi]: https://github.com/kperi\n[lrkwz]: https://github.com/lrkwz\n[mallamanis]: https://github.com/mallamanis\n[mayerc-MSFT]: https://github.com/mayerc-MSFT\n[memleak]: https://github.com/memleak/\n[merelyapseudonym]: https://github.com/MerelyAPseudonym\n[mykehsd]: https://github.com/mykehsd\n[OpherV]: https://github.com/OpherV\n[Oppodelldog]: https://github.com/Oppodelldog\n[pokey]: https://github.com/pokey\n[pcragone]: https://github.com/pcragone\n[Shoozza]: https://github.com/Shoozza\n[shpoont]: https://github.com/shpoont\n[silasfn]: https://github.com/silasfn\n[sinbad]: https://github.com/sinbad\n[sirn]: https://github.com/sirn\n[stevemao]: https://github.com/stevemao\n[Tiscs]: https://github.com/Tiscs\n[zheeeng]: https://github.com/zheeeng\n\n# Changelog\n\n#### 1.12.4-dev0\n* Preparation for next release\n\n#### 1.12.3\n* Explicitly get the default values from the system and global config.\n\n#### 1.12.2\n* Missing parentheses (Thanks [Tiscs Sun][Tiscs] )\n\n#### 1.12.1\n[Peter van der Does][petervanderdoes]\n* When using the `-d` flag during `init` the defaults are empty. Identified by [Adam Rodger][adamrodger]\n\n#### 1.12.0\n[Peter van der Does][petervanderdoes]\n* Bugfix: Remove inconsistency when pre_hook fails (Thanks [Gabriele Pongelli][gpongelli])\n* Fix indentation in README.md (Thanks [Shoozza][Shoozza])\n\n\n[Andreas Heiduk][asheiduk]\n* Bugfix: Unexpected operator.\n\n[zheeeng][zheeeng]\n* Enhancement: Review your commits more easier on figuring out what this feature/bugfix added exactly.\n\n[Oppodelldog][Oppodelldog]\n* Enhancement: Allows to install a specific version of git-flow when using the `gitflow-installer.sh` script\n\n[mayerc][mayerc-MSFT]\n* Enhancement: Add option that will not allow the a merge back into the develop branch.\n\n[Steve Mao][stevemao]\n* Fix: Standarize the README markdown.\n\n[Gabriele Pongelli][gpongelli]\n* Enhancement: Also use core.hooksPath for suggestion for the hook path during initialization.\n\n[Gene Pavlovsky][gene-pavlovsky]\n* Enhancement: Add .gitattributes to enforce Unix line endings for certain files.\n\n[Luca Orlandi][lrkwz]\n* Reflect shared hotfix usage in readme.\n\n[Tiscs Sun][Tiscs]\n* Enhancement: Add parameters to set names for the branches during the init command.\n\n[Silas Palmer][silasfn]\n* Fix: Comparability change for git for windows\n\n[Pokey Rule][pokey]\n* Perform git push before deleting branch\n\n#### 1.11.0\n[Peter van der Does][petervanderdoes]\n* Bugfix: Problems when using fetch.prune\n* Bugfix: Errors when initializing git flow and useconfigonly is set but the name and/or email has not been set.\n* Bugfix: Report summary on finish is incorrect.\n* Missing push on bugfix finish\n* Allow a dirty tree when starting a hotfix/support/release branch if set to do so.  \nIf the config `gitflow.allowdirty` is set to `true`, allow starting from a dirty tree.\n* Bugfix: Error when trying to delete a non-existent remote branch\n* Feature: Add rename command to bugfix/hotfix/feature\n\n[Andreas Heiduk][asheiduk]\n* git flow * rebase now supports rebase.autoStash flag  \n  git rebase can automatically cleanup the working tree. Therefore skip the test when and where appropriate.\n\n#### 1.10.2\n[Peter van der Does][petervanderdoes]\n* Bugfix: Error finishing a release.\n\n#### 1.10.1\n[Peter van der Does][petervanderdoes]\n* Bugfix: flag short name (p) already defined\n\n#### 1.10.0\n[Peter van der Does][petervanderdoes]\n* Update github links.\n* Add explanation of AVH.\n* Add ability when finishing a release to push or not push the branches and/or tag involved.\n* The finishing of a release branch based on a branch other than develop fails with errors.\n* Add --push flag for feature finish. This gives the ability to push the base branch after the finish.\n* When finishing a release have the ability to fast-forward the master branch, if possible.\n  This is controlled by the flag --ff-master.\n* Add new flag -T, --tagname to override the tag name when finishing a release or hotfix.\n* Allow multiple hotfix branches by setting the config allowmultihotfix to true.  \n  The command to set it is  \n\n[Kridsada Thanabulpong][sirn]\n* Fix infinite loop during Darwin link resolving.\n\n[Justin Penney][jpenney78]\n* Add detection for BusyBox getopt.\n\n#### 1.9.1\n[Peter van der Does][petervanderdoes]\n* Bugfix: git-flow directories are not set correctly\n\n#### 1.9.0\n[Peter van der Does][petervanderdoes]\n* Add bugfix command.\n* Repositories with spaces in path cause the pre * post hook to fail.\n* Error using git flow log.\n* Using defaults with init fails with existing repository.\n* Allow multiple hotfix branches.\n  By setting the config gitflow.multi-hotfix to true, you can have multiple\n  hotfix branches. Example: git config --set gitflow.multi-hotfix true\n * Can't delete branch if the base branch is not the develop branch.\n * Add squash and squash-info flag to hotfix finish.\n * Problem when the repository directory has multiple spaces.\n\n[Gergely Nagy][algernon]\n* Remove bash code.\n\n[Joe Ebmeier][jebmeier]\n* Fix issue in case CDPATH is being used.\n  In the case of CDPATH being used, it is possible DOT_GIT_DIR variable\n  is incorrect.\n\n[Alexander Norström][aleno]\n* Fix issue when a prefix is chosen that doesn't end in a slash\n\n#### 1.8.0\n[Peter van der Does][petervanderdoes]\n* Add rebase action to release, hotfix and support.\n* Shortcut for rebase commands.  \n  Introduce the following new command:  \n  * git flow rebase\n\n  This command will perform the action on the branch that's currently active.\n* Use the base branch when doing a git flow feature diff.  \n  When doing a diff on the feature branch use the base branch which this\n  feature originated from. It will show the committed changes.\n* Problem when certain variables are set before executing git-flow.\n  When certain variables are set in the shell environment it causes problems.\n* Warning for commands to be deprecated.\n  The command \"feature checkout/co\" will be deprecated per version 2.0.0\n  The command \"feature pull\" will be deprecated per version 2.0.0\n* Using fetch flag fails sometimes.\n* Hooks and filters are not executed when you are in a subdirectory of the\n  repository and the hooks directory is set to the suggested value during\n  initialization.\n\n[Craig Fowler][craigfowler]\n* 'export' fails in 'gitflow_load_settings()'\n\n[Toni Uebernickel][havvg]\n* Add log command\n\n#### 1.7.0\n[Peter van der Does][petervanderdoes]\n* Refactor the gitflow override flag functions.\n* Shortcut for finish, delete, and publish commands.  \n  Introduce the following new commands:  \n  * git flow finish\n  * git flow delete\n  * git flow publish\n\n  These commands will perform the action on the branch that's currently active.\n* No branch is needed for the following function:  \n  * git flow feature publish/finish/delete\n  * git flow release publish/finish/delete\n  * git flow hotfix publish/finish/delete\n\n* Remove base configuration when deleting a feature/hotfix/release branch.\n* Help text for certain commands is wrong.\n* Bugfix: Invalid function call.\n* Bugfix: No make installer fails\n* Support branches are no longer marked as experimental.\n\n[John Sivak][jsivak]\n* Fix sanity check for release track command.\n\n[Opher Vishnia][OpherV]\n* Fix feature pull.  \n  The pull request fails when there's no local branch with the same name as the\n  remote branch.\n\n[Leonid Komarovsky][shpoont]\n* Option for global hooks and filters directory.  \n  This is only for hooks and filters related to git-flow, not the standard git\n  hooks.\n\n#### 1.6.1\n[Peter van der Does][petervanderdoes]\n* Migration of gitflow_config fails for posix sh.\n* Error messages when .gitflow_export doesn't exists.\n\n#### 1.6.0\n[Peter van der Does][petervanderdoes]\n* Add ability to short-circuit the version filters.  \n  An exit of 127 will short-circuit the process.\n* Output when finishing a branch is wrong.\n\n[Mateusz Kaczmarek][cyberbob]\n* Fix sanity check for feature track command.\n\n[Leonid Komarovsky][shpoont]\n* Move configuration from ~/.gitflow_export to default git config.\n* Move base configuration from it's own configuration file to the default local git config file.\n* Improve formatting of the help.\n\n#### 1.5.3\n[Peter van der Does][petervanderdoes]\n* Bugfix: Error about deleting branch when using squash option.  \n  When using the squash option for release/feature finish, the release/feature\n  branch is not deleted.\n\n#### 1.5.2\n[Peter van der Does][petervanderdoes]\n* Add filter for tag message  .\n  If a tag message is given, the message can be modified using the filters:\n  - filter-flow-hotfix-finish-tag-message\n  - filter-flow-release-finish-tag-message\n  - filter-flow-release-branch-tag-message\n* Bugfix: Typo in documentation.\n\n[Florian Gamböck][floga]\n* Bugfix: Fix variable name in hotfix\n\n[Leonid Komarovsky][shpoont]\n* git flow rebase will rebase against its base branch instead of develop.\n* Add flag --preserve-merges for feature rebase or feature finish.\n\n#### 1.5.1\n[Peter van der Does][petervanderdoes]\n* Fix some of the flag override environment variable names.\n\n[Joshua P. Tilles][merelyapseudonym]\n* Add default flag for flag showcommands.\n\n[Florian Gamböck][floga]\n* Bugfix: Fix variable non-zero test  \n  Due to missing quotation marks, the -n test won't work properly, leading to\n  always returning true and overriding variables with nothing.\n\n\n#### 1.5.0\n[Peter van der Does][petervanderdoes]\n* Add the ability to set defaults for flag.  \n  You can now set defaults for flags by setting environment variables.\n* Add flag no-ff to feature finish.  \n  This gives the ability to never fast-forward a merge, even when it's only\n  one commit.\n* Bugfix: Error in a long flag name for release finish\n* Function in gitflow-shFlags refactored to make it faster.\n* Add flag --squash-info to release/feature finish.  \n  When you use the flag --squash while finishing a release or feature branch,\n  the logs don't make it clear which branch you merged. The new flag will add\n  an extra comment to the commit message, stating which branch was used for the\n  merge.\n* Bugfix: The contrib gitflow-installer.sh shows wrong installation instructions.\n\n#### 1.4.2\n* Bugfix: Update from upstream for shFlags\n\n#### 1.4.1\n* Bugfix: Missed quotation mark\n\n#### 1.4.0\n[Peter van der Does][petervanderdoes]\n* Remember the base.  \n  With the commands feature/hotfix/release start you can give a base from which\n  the new branch will be created. Upon finishing this branch it will\n  automatically merge the branch back into the base as given during the start.  \n  If no base is given the normal functionality will be followed.  \n  With the hotfix and release, if a base is given and it's not the\n  DEVELOP_BRANCH, the branch will *NOT* be merged back into the $DEVELOP_BRANCH\n  upon finishing this branch.\n* New config command.  \n  git flow config base. This can be used to set and get the base for\n  feature/hotfix/release branches so it can be used when finishing these\n  branches.\n* Get the correct working directory when the git-flow file is a symbolic link.\n* Don't check/compare hotfix and base branch when branch is merged already.\n* Remove export POSIXLY_CORRECT.  \n  Setting this environment variable can mess things up when git-flow is used in\n  combination with other shell scripts.\n* Update gitflow-shFlags from upstream.  \n  Besides other improvements this update eliminates the use of external system\n  calls on a majority of systems which in theory leads to a speed increase of\n  about 20%.\n* Use GNU getopt on BSD systems.  \n  BSD getopt doesn't support long options in commands but the GNU getopt does.\n\n[Alexandre Dutra][adutra]\n* Git refuses to delete local branch with \"-d\" if it is tracking a remote one.\n* Can't always delete current release/hotfix local branch on finish  \n  Situation can occur you are on the local branch the script wants to delete, if\n  you are you can't delete that branch. We'll switch to the base branch when\n  you are deleting the branch you currently are on.\n\n#### 1.3.1\n* Bugix: git flow config list results in error.\n\n#### 1.3.0\n[Peter van der Does][petervanderdoes]\n* Make name in feature publish optional.  \n  Instead of always having to add the branch when doing a git flow feature\n  publish, the name should be optional.  \n  When a name isn't given, the current branch, if it's a feature branch,\n  will be published.\n* Add option to select configuration file usage  \n  As with the regular git config, git flow init now has the\n  option --file, --global, --system and --local. --local is default.\n* Add a new command.  \n  New command git flow config is added.  \n  With this command you can see your current git flow configuration and you\n  can also set the options.\n* Environment settings for git-flow only.  \n  With git you can set environment variables to change behavior, like\n  GIT_MERGE_AUTOEDIT for example.  \n  You can add these exports to the file ~/.gitflow_export if you only want\n  to set the environment variable for git-flow.  \n* Bugfix: Missing command hotfix track.  \n  The command git flow hotfix track is not implemented.\n\n#### 1.2.1\n[Peter van der Does][petervanderdoes]\n* Bugfix: The --showcommands was on by default. It should be off by default.\n\n#### 1.2.0\n[Peter van der Does][petervanderdoes]\n* Improve the help output of the commands.\n* Fix problem with init function on BSD systems.\n* Add initialize function to git flow version.\n* Add parameter --showcommands to all commands.  \n  This will show the git commands performed while executing the command. Thanks\n  to [Jerome Baum][jeromebaum] for the original implementation.\n\n[Daniel Dehennin][baby-gnu]\n* Display where user is on finish.  \n  Some commands did not display the branch you are on after the command\n  finished.\n* When finishing a hotfix/release and it's to be tagged, the tag must not exist.\n\n#### 1.1.0\n[Peter van der Does][petervanderdoes]\n* Bugfix: feature finish does double merge when using squash option.\n\n* Add the ability to keep/delete local/remote branches on finish.  \n  When finishing a release/hotfix/feature you now can keep/delete the\n  local/remote release/hotfix/feature branch.\n\n* New command: git flow release branch  \n  With this command you can directly release a given branch. There is no need\n  to start a new release and finish it. You can not use this command on the\n  git-flow branches feature/hotfix/release/support.\n\n* Do not display object fetch summary if flag was not set.  \n  Thanks to [Daniel Dehennin][baby-gnu].\n\n* Bugfix: Checking if branch exists will fail for remote branches.\n\n* Make die output consistent for each die case.\n\n* Bugfix: When running git flow init an error message pops up.\n\n* Show correct help for subactions.  \n  When requesting help with -h for the subactions, the help would show the\n  incorrect command line.\n\n* Support reading the tag message from a file in release/hotfix finish.  \n  Add the option -f,--messagefile to release and hotfix finish. Thanks to\n  [Steve Streeting][sinbad] for the original coding.\n\n* Bugfix: git_current_branch fails for git prior 1.7.10.  \n  git symbolic-ref does not have the --short option prior to version 1.7.10.\n  Bug found by [Daniel Dehennin][baby-gnu].\n\n* Clean up code.  \n  Remove all porcelain commands.  \n  Refactor code.\n\n* Improve the back-merge functionality.  \n  Adds an command line option (-b), which the user can utilize if the user\n  doesn't want to back-merge but rather merge the release branch into\n  develop.\n\n* Add the sub-action delete to sub-commands feature, release and hotfix.  \n  The sub-commands feature, release and hotfix now have a new sub-action,\n  delete. With that action you can delete the branches, locally and remote.\n  The action has two options, -f and -r. With -f you can force the deletion,\n  even when the to be deleted branch was not merged yet. With -r the remote\n  branch will also be deleted.\n\n[Daniel Dehennin][baby-gnu]\n* Bugfix: release/feature/hotfix start -F fails.  \n  Usage of positional parameters requires to eval ${FLAGS_ARGV}. The \"eval set\"\n  in function call does not propagate to the caller.\n\n* Accept tags as base for hotfix/release/support start.  \n  Commit pointed by tags are reachable with ^0\\[1\\].\n\n* Check for parameter existence for branch and tag existence helpers.\n\n* Do not finish hotfixes if they have no commits.  \n  A hotfix branch must have some commits and be ahead of master.\n\n* Bugfix: When running git flow version an error message pops up.\n\n* Reorder fetch and sanity checks.  \n  When a user requests a fetch for git flow {feature|hotfix|support} start, do\n  this before some sanity checks to avoid any conflict in branch names\n  and/or version.\n\n* Fix flag test in cmd_delete().\n\n[Myke Hines][mykehsd]\n* Feature and Release squashing options.  \n  This allows a -S option to both feature and releasing finishing actions so\n  that developers can squash commits into one large one.\n\n[Peter Ragone][pcragone]\n* Add init to git-flow-{feature,release,hotfix,support}.  \n  Fixes the relatively minor issue where 'git flow subcommand help'\n  gives \"Not a gitflow-enabled repo yet\".\n\n* Special thanks to the following individual:  \n  [Gert Van Gool][gvangool]\n\n#### 1.0-avh\n[Peter van der Does][petervanderdoes]\n\n* Remove trailing whitespace.\n\n* Updated from latest develop branch from nvie.  \n  Some features were still missing.\n\n* Remove the submodule shFlags.  \n  Instead of the submodule we'll just use the file.\n\n* When finishing a release or hotfix, use tag for back-merging if available.  \n  When a release or hotfix branch is tagged, the tag is never merged into the\n  develop branch, it is preferable to have the tag in the develop branch as\n  well, for use with git describe for example.\n\n* Update license info.\n\n* Bugfix: Typo when pulling existing feature from remote.Thanks to [John Harrison][bloomonkey],  [Miltos][mallamanis], [Kostas][kperi] and [memleak][memleak].\n\n* Wrong variable names in the bare-bones.  \n  The wrong variable name is set, this can lead to confusing on what's\n  passed to the script,\n\n[Steve Streeting][sinbad]\n* Fixes the suggested name for the integration branch.  \n  When git init -d is executed on a repo with multiple branches, the\n  suggested name for the integration branch could possibly be the same name\n  that was already selected for the production release branch.  \n  If no suggested name is determined the suggested name remains empty which\n  leads to all sorts of other problems.\n\n#### 0.4.2-avh1\n[Peter van der Does][petervanderdoes]\n\n* Start of the git flow AVH release.\n\n* Adds support for the version filter in the commands `git flow release start`\nand `git flow hotfix start`\n\n* Adds support for hooks in various commands.\n\n[Ben Loveridge][bloveridge]\n\n* Fix usage of shFlags on FreeBSD\n\n#### 0.4.2\nRelease date: not yet\n\n* `git flow init` now detects situations where origin already has gitflow\n  branches set up, and behaves accordingly (thanks Emre Berge Ergenekon).\n\n* `git flow feature finish` can now be called without a feature branch\n  name(prefix) argument and will finish the current branch, if on any.\n\n* `git flow feature pull` now has a `-r` flag, to support `pull --rebase`\n  semantics (thanks Vedang Manerikar).\n\n* Various minor bug fixes related to internal argument passing.\n\n* Improved some documentation.\n\n* Better support for Windows and BSD users.\n\n* Add package installer for the Windows platform.\n\n#### 0.4.1\nRelease date: **2011/02/04**\n\n* New option `-d` added to `git flow init`, to initialize with defaults without\n  asking for input interactively.  Ideal for creating git-flow enabled repos in\n  custom scripts.\n\n* The parsing issues related to git-flow feature's flags are now dealt with on\n  all known platforms.  (Fixed #54, #62, #86, #97)\n\n* Escape queries for detecting branch/tag names.  (Fixed #91)\n\n\n#### 0.4\nRelease date: **2010/10/18**\n\n* The flag parsing issues of git-flow subcommands are solved for most\n  platforms.\n\n* `git flow {feature,hotfix,release} finish` now takes a `-k` flag, to keep the\n  branch around after finishing.\n\n* `git flow release finish` takes a `-n` flag, to skip tagging.\n\n* For consistency, `git flow {release,hotfix}` now, too, have a `publish` and\n  `track` subcommand, just like `feature`.\n\n* Various minor fixes.\n\n\n#### 0.3\nRelease date: **2010/07/22**\n\n* New subcommands for `git flow feature`:\n  - **checkout**:\n    For easily checking out features by their short name.  Even allows\n    unique prefixes as arguments (see below).\n\n  - **pull**:\n    This subcommand allows you to painlessly work on a feature branch\n    together with another peer.  This is especially valuable for doing\n    peer reviews of other people's code.  For more detailed info, see the\n    [commit log][1].\n\n* Easier addressing of branch names by using name prefixes.\n  For example, when using:\n\n    git flow feature finish fo\n\n  this automatically finishes the feature branch `foobar` if that's the only\n  feature branch name starting with `fo`.\n\n* No force flag anymore for new feature branches\n  `git flow feature start` lost its `-f` (force) flag.  You now don't\n  have to be in a clean repo anymore to start a new feature branch. This\n  avoids the manual `git stash`, `git flow feature start`, `git stash\n  pop` cycle.\n\n* You can use `git-flow` in stand-alone repo's now.\n  This means it does not assume you have an `origin` repository.\n  (Thanks [Mark][2].)\n\n* No commands fetch from `origin` by default anymore.\n  There were some issues related to disabling this flag on some platforms.\n\n* Init guesses branch names you may want to use for `develop` and `master`.\n\n* Added super-easy installation script. (Thanks [Rick][3].)\n\n* Added BSD license.\n\n[1]: http://github.com/nvie/gitflow/commit/f68d405cc3a11e9df3671f567658a6ab6ed8e0a1\n[2]: http://github.com/talios\n[3]: http://github.com/rickosborne\n\n#####Older versions\nNo change history is recorded for pre-0.3 releases.\n\n#### Glossary\n* RFC: Request For Change. This indicates a new or improved function requested\nby one or more users.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 29.0302734375,
          "content": "This software is forked of the original git-flow, see License #2.\nLicense #1 is added to reflect the changes made.\n\ngitflow-shFlags is released under LGPL, see License #3\n\n************************************************************\n\nLICENSE #1:\nCopyright (c) 2012-2019 Peter van der Does\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this\n   list of conditions and the following disclaimer.\n2. Redistributions in binary form must reproduce the above copyright notice,\n   this list of conditions and the following disclaimer in the documentation\n   and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\nON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n************************************************************\n\nLICENSE #2:\nCopyright 2010 Vincent Driessen. All rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n   1. Redistributions of source code must retain the above copyright notice,\n      this list of conditions and the following disclaimer.\n\n   2. Redistributions in binary form must reproduce the above copyright notice,\n      this list of conditions and the following disclaimer in the documentation\n      and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY VINCENT DRIESSEN ``AS IS'' AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT\nSHALL VINCENT DRIESSEN OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,\nINCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\nPROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\nLIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\nOR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF\nADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nThe views and conclusions contained in the software and documentation are those\nof the authors and should not be interpreted as representing official policies,\neither expressed or implied, of Vincent Driessen.\n\n************************************************************\n\nLICENSE #3:\n                  GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 2.1, February 1999\n\n Copyright (C) 1991, 1999 Free Software Foundation, Inc.\n 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n[This is the first released version of the Lesser GPL.  It also counts\n as the successor of the GNU Library Public License, version 2, hence\n the version number 2.1.]\n\n                            Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicenses are intended to guarantee your freedom to share and change\nfree software--to make sure the software is free for all its users.\n\n  This license, the Lesser General Public License, applies to some\nspecially designated software packages--typically libraries--of the\nFree Software Foundation and other authors who decide to use it.  You\ncan use it too, but we suggest you first think carefully about whether\nthis license or the ordinary General Public License is the better\nstrategy to use in any particular case, based on the explanations below.\n\n  When we speak of free software, we are referring to freedom of use,\nnot price.  Our General Public Licenses are designed to make sure that\nyou have the freedom to distribute copies of free software (and charge\nfor this service if you wish); that you receive source code or can get\nit if you want it; that you can change the software and use pieces of\nit in new free programs; and that you are informed that you can do\nthese things.\n\n  To protect your rights, we need to make restrictions that forbid\ndistributors to deny you these rights or to ask you to surrender these\nrights.  These restrictions translate to certain responsibilities for\nyou if you distribute copies of the library or if you modify it.\n\n  For example, if you distribute copies of the library, whether gratis\nor for a fee, you must give the recipients all the rights that we gave\nyou.  You must make sure that they, too, receive or can get the source\ncode.  If you link other code with the library, you must provide\ncomplete object files to the recipients, so that they can relink them\nwith the library after making changes to the library and recompiling\nit.  And you must show them these terms so they know their rights.\n\n  We protect your rights with a two-step method: (1) we copyright the\nlibrary, and (2) we offer you this license, which gives you legal\npermission to copy, distribute and/or modify the library.\n\n  To protect each distributor, we want to make it very clear that\nthere is no warranty for the free library.  Also, if the library is\nmodified by someone else and passed on, the recipients should know\nthat what they have is not the original version, so that the original\nauthor's reputation will not be affected by problems that might be\nintroduced by others.\n\n  Finally, software patents pose a constant threat to the existence of\nany free program.  We wish to make sure that a company cannot\neffectively restrict the users of a free program by obtaining a\nrestrictive license from a patent holder.  Therefore, we insist that\nany patent license obtained for a version of the library must be\nconsistent with the full freedom of use specified in this license.\n\n  Most GNU software, including some libraries, is covered by the\nordinary GNU General Public License.  This license, the GNU Lesser\nGeneral Public License, applies to certain designated libraries, and\nis quite different from the ordinary General Public License.  We use\nthis license for certain libraries in order to permit linking those\nlibraries into non-free programs.\n\n  When a program is linked with a library, whether statically or using\na shared library, the combination of the two is legally speaking a\ncombined work, a derivative of the original library.  The ordinary\nGeneral Public License therefore permits such linking only if the\nentire combination fits its criteria of freedom.  The Lesser General\nPublic License permits more lax criteria for linking other code with\nthe library.\n\n  We call this license the \"Lesser\" General Public License because it\ndoes Less to protect the user's freedom than the ordinary General\nPublic License.  It also provides other free software developers Less\nof an advantage over competing non-free programs.  These disadvantages\nare the reason we use the ordinary General Public License for many\nlibraries.  However, the Lesser license provides advantages in certain\nspecial circumstances.\n\n  For example, on rare occasions, there may be a special need to\nencourage the widest possible use of a certain library, so that it becomes\na de-facto standard.  To achieve this, non-free programs must be\nallowed to use the library.  A more frequent case is that a free\nlibrary does the same job as widely used non-free libraries.  In this\ncase, there is little to gain by limiting the free library to free\nsoftware only, so we use the Lesser General Public License.\n\n  In other cases, permission to use a particular library in non-free\nprograms enables a greater number of people to use a large body of\nfree software.  For example, permission to use the GNU C Library in\nnon-free programs enables many more people to use the whole GNU\noperating system, as well as its variant, the GNU/Linux operating\nsystem.\n\n  Although the Lesser General Public License is Less protective of the\nusers' freedom, it does ensure that the user of a program that is\nlinked with the Library has the freedom and the wherewithal to run\nthat program using a modified version of the Library.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.  Pay close attention to the difference between a\n\"work based on the library\" and a \"work that uses the library\".  The\nformer contains code derived from the library, whereas the latter must\nbe combined with the library in order to run.\n\n                  GNU LESSER GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License Agreement applies to any software library or other\nprogram which contains a notice placed by the copyright holder or\nother authorized party saying it may be distributed under the terms of\nthis Lesser General Public License (also called \"this License\").\nEach licensee is addressed as \"you\".\n\n  A \"library\" means a collection of software functions and/or data\nprepared so as to be conveniently linked with application programs\n(which use some of those functions and data) to form executables.\n\n  The \"Library\", below, refers to any such software library or work\nwhich has been distributed under these terms.  A \"work based on the\nLibrary\" means either the Library or any derivative work under\ncopyright law: that is to say, a work containing the Library or a\nportion of it, either verbatim or with modifications and/or translated\nstraightforwardly into another language.  (Hereinafter, translation is\nincluded without limitation in the term \"modification\".)\n\n  \"Source code\" for a work means the preferred form of the work for\nmaking modifications to it.  For a library, complete source code means\nall the source code for all modules it contains, plus any associated\ninterface definition files, plus the scripts used to control compilation\nand installation of the library.\n\n  Activities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning a program using the Library is not restricted, and output from\nsuch a program is covered only if its contents constitute a work based\non the Library (independent of the use of the Library in a tool for\nwriting it).  Whether that is true depends on what the Library does\nand what the program that uses the Library does.\n\n  1. You may copy and distribute verbatim copies of the Library's\ncomplete source code as you receive it, in any medium, provided that\nyou conspicuously and appropriately publish on each copy an\nappropriate copyright notice and disclaimer of warranty; keep intact\nall the notices that refer to this License and to the absence of any\nwarranty; and distribute a copy of this License along with the\nLibrary.\n\n  You may charge a fee for the physical act of transferring a copy,\nand you may at your option offer warranty protection in exchange for a\nfee.\n\n  2. You may modify your copy or copies of the Library or any portion\nof it, thus forming a work based on the Library, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) The modified work must itself be a software library.\n\n    b) You must cause the files modified to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    c) You must cause the whole of the work to be licensed at no\n    charge to all third parties under the terms of this License.\n\n    d) If a facility in the modified Library refers to a function or a\n    table of data to be supplied by an application program that uses\n    the facility, other than as an argument passed when the facility\n    is invoked, then you must make a good faith effort to ensure that,\n    in the event an application does not supply such function or\n    table, the facility still operates, and performs whatever part of\n    its purpose remains meaningful.\n\n    (For example, a function in a library to compute square roots has\n    a purpose that is entirely well-defined independent of the\n    application.  Therefore, Subsection 2d requires that any\n    application-supplied function or table used by this function must\n    be optional: if the application does not supply it, the square\n    root function must still compute square roots.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Library,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Library, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote\nit.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Library.\n\nIn addition, mere aggregation of another work not based on the Library\nwith the Library (or with a work based on the Library) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may opt to apply the terms of the ordinary GNU General Public\nLicense instead of this License to a given copy of the Library.  To do\nthis, you must alter all the notices that refer to this License, so\nthat they refer to the ordinary GNU General Public License, version 2,\ninstead of to this License.  (If a newer version than version 2 of the\nordinary GNU General Public License has appeared, then you can specify\nthat version instead if you wish.)  Do not make any other change in\nthese notices.\n\n  Once this change is made in a given copy, it is irreversible for\nthat copy, so the ordinary GNU General Public License applies to all\nsubsequent copies and derivative works made from that copy.\n\n  This option is useful when you wish to copy part of the code of\nthe Library into a program that is not a library.\n\n  4. You may copy and distribute the Library (or a portion or\nderivative of it, under Section 2) in object code or executable form\nunder the terms of Sections 1 and 2 above provided that you accompany\nit with the complete corresponding machine-readable source code, which\nmust be distributed under the terms of Sections 1 and 2 above on a\nmedium customarily used for software interchange.\n\n  If distribution of object code is made by offering access to copy\nfrom a designated place, then offering equivalent access to copy the\nsource code from the same place satisfies the requirement to\ndistribute the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  5. A program that contains no derivative of any portion of the\nLibrary, but is designed to work with the Library by being compiled or\nlinked with it, is called a \"work that uses the Library\".  Such a\nwork, in isolation, is not a derivative work of the Library, and\ntherefore falls outside the scope of this License.\n\n  However, linking a \"work that uses the Library\" with the Library\ncreates an executable that is a derivative of the Library (because it\ncontains portions of the Library), rather than a \"work that uses the\nlibrary\".  The executable is therefore covered by this License.\nSection 6 states terms for distribution of such executables.\n\n  When a \"work that uses the Library\" uses material from a header file\nthat is part of the Library, the object code for the work may be a\nderivative work of the Library even though the source code is not.\nWhether this is true is especially significant if the work can be\nlinked without the Library, or if the work is itself a library.  The\nthreshold for this to be true is not precisely defined by law.\n\n  If such an object file uses only numerical parameters, data\nstructure layouts and accessors, and small macros and small inline\nfunctions (ten lines or less in length), then the use of the object\nfile is unrestricted, regardless of whether it is legally a derivative\nwork.  (Executables containing this object code plus portions of the\nLibrary will still fall under Section 6.)\n\n  Otherwise, if the work is a derivative of the Library, you may\ndistribute the object code for the work under the terms of Section 6.\nAny executables containing that work also fall under Section 6,\nwhether or not they are linked directly with the Library itself.\n\n  6. As an exception to the Sections above, you may also combine or\nlink a \"work that uses the Library\" with the Library to produce a\nwork containing portions of the Library, and distribute that work\nunder terms of your choice, provided that the terms permit\nmodification of the work for the customer's own use and reverse\nengineering for debugging such modifications.\n\n  You must give prominent notice with each copy of the work that the\nLibrary is used in it and that the Library and its use are covered by\nthis License.  You must supply a copy of this License.  If the work\nduring execution displays copyright notices, you must include the\ncopyright notice for the Library among them, as well as a reference\ndirecting the user to the copy of this License.  Also, you must do one\nof these things:\n\n    a) Accompany the work with the complete corresponding\n    machine-readable source code for the Library including whatever\n    changes were used in the work (which must be distributed under\n    Sections 1 and 2 above); and, if the work is an executable linked\n    with the Library, with the complete machine-readable \"work that\n    uses the Library\", as object code and/or source code, so that the\n    user can modify the Library and then relink to produce a modified\n    executable containing the modified Library.  (It is understood\n    that the user who changes the contents of definitions files in the\n    Library will not necessarily be able to recompile the application\n    to use the modified definitions.)\n\n    b) Use a suitable shared library mechanism for linking with the\n    Library.  A suitable mechanism is one that (1) uses at run time a\n    copy of the library already present on the user's computer system,\n    rather than copying library functions into the executable, and (2)\n    will operate properly with a modified version of the library, if\n    the user installs one, as long as the modified version is\n    interface-compatible with the version that the work was made with.\n\n    c) Accompany the work with a written offer, valid for at\n    least three years, to give the same user the materials\n    specified in Subsection 6a, above, for a charge no more\n    than the cost of performing this distribution.\n\n    d) If distribution of the work is made by offering access to copy\n    from a designated place, offer equivalent access to copy the above\n    specified materials from the same place.\n\n    e) Verify that the user has already received a copy of these\n    materials or that you have already sent this user a copy.\n\n  For an executable, the required form of the \"work that uses the\nLibrary\" must include any data and utility programs needed for\nreproducing the executable from it.  However, as a special exception,\nthe materials to be distributed need not include anything that is\nnormally distributed (in either source or binary form) with the major\ncomponents (compiler, kernel, and so on) of the operating system on\nwhich the executable runs, unless that component itself accompanies\nthe executable.\n\n  It may happen that this requirement contradicts the license\nrestrictions of other proprietary libraries that do not normally\naccompany the operating system.  Such a contradiction means you cannot\nuse both them and the Library together in an executable that you\ndistribute.\n\n  7. You may place library facilities that are a work based on the\nLibrary side-by-side in a single library together with other library\nfacilities not covered by this License, and distribute such a combined\nlibrary, provided that the separate distribution of the work based on\nthe Library and of the other library facilities is otherwise\npermitted, and provided that you do these two things:\n\n    a) Accompany the combined library with a copy of the same work\n    based on the Library, uncombined with any other library\n    facilities.  This must be distributed under the terms of the\n    Sections above.\n\n    b) Give prominent notice with the combined library of the fact\n    that part of it is a work based on the Library, and explaining\n    where to find the accompanying uncombined form of the same work.\n\n  8. You may not copy, modify, sublicense, link with, or distribute\nthe Library except as expressly provided under this License.  Any\nattempt otherwise to copy, modify, sublicense, link with, or\ndistribute the Library is void, and will automatically terminate your\nrights under this License.  However, parties who have received copies,\nor rights, from you under this License will not have their licenses\nterminated so long as such parties remain in full compliance.\n\n  9. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Library or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Library (or any work based on the\nLibrary), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Library or works based on it.\n\n  10. Each time you redistribute the Library (or any work based on the\nLibrary), the recipient automatically receives a license from the\noriginal licensor to copy, distribute, link with or modify the Library\nsubject to these terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties with\nthis License.\n\n  11. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Library at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Library by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Library.\n\nIf any portion of this section is held invalid or unenforceable under any\nparticular circumstance, the balance of the section is intended to apply,\nand the section as a whole is intended to apply in other circumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  12. If the distribution and/or use of the Library is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Library under this License may add\nan explicit geographical distribution limitation excluding those countries,\nso that distribution is permitted only in or among countries not thus\nexcluded.  In such case, this License incorporates the limitation as if\nwritten in the body of this License.\n\n  13. The Free Software Foundation may publish revised and/or new\nversions of the Lesser General Public License from time to time.\nSuch new versions will be similar in spirit to the present version,\nbut may differ in detail to address new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Library\nspecifies a version number of this License which applies to it and\n\"any later version\", you have the option of following the terms and\nconditions either of that version or of any later version published by\nthe Free Software Foundation.  If the Library does not specify a\nlicense version number, you may choose any version ever published by\nthe Free Software Foundation.\n\n  14. If you wish to incorporate parts of the Library into other free\nprograms whose distribution conditions are incompatible with these,\nwrite to the author to ask for permission.  For software which is\ncopyrighted by the Free Software Foundation, write to the Free\nSoftware Foundation; we sometimes make exceptions for this.  Our\ndecision will be guided by the two goals of preserving the free status\nof all derivatives of our free software and of promoting the sharing\nand reuse of software generally.\n\n                            NO WARRANTY\n\n  15. BECAUSE THE LIBRARY IS LICENSED FREE OF CHARGE, THERE IS NO\nWARRANTY FOR THE LIBRARY, TO THE EXTENT PERMITTED BY APPLICABLE LAW.\nEXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR\nOTHER PARTIES PROVIDE THE LIBRARY \"AS IS\" WITHOUT WARRANTY OF ANY\nKIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE\nLIBRARY IS WITH YOU.  SHOULD THE LIBRARY PROVE DEFECTIVE, YOU ASSUME\nTHE COST OF ALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN\nWRITING WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY\nAND/OR REDISTRIBUTE THE LIBRARY AS PERMITTED ABOVE, BE LIABLE TO YOU\nFOR DAMAGES, INCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR\nCONSEQUENTIAL DAMAGES ARISING OUT OF THE USE OR INABILITY TO USE THE\nLIBRARY (INCLUDING BUT NOT LIMITED TO LOSS OF DATA OR DATA BEING\nRENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD PARTIES OR A\nFAILURE OF THE LIBRARY TO OPERATE WITH ANY OTHER SOFTWARE), EVEN IF\nSUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH\nDAMAGES.\n\n                     END OF TERMS AND CONDITIONS\n\n           How to Apply These Terms to Your New Libraries\n\n  If you develop a new library, and you want it to be of the greatest\npossible use to the public, we recommend making it free software that\neveryone can redistribute and change.  You can do so by permitting\nredistribution under these terms (or, alternatively, under the terms of the\nordinary General Public License).\n\n  To apply these terms, attach the following notices to the library.  It is\nsafest to attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least the\n\"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the library's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This library is free software; you can redistribute it and/or\n    modify it under the terms of the GNU Lesser General Public\n    License as published by the Free Software Foundation; either\n    version 2.1 of the License, or (at your option) any later version.\n\n    This library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n    Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public\n    License along with this library; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301  USA\n\nAlso add information on how to contact you by electronic and paper mail.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the library, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the\n  library `Frob' (a library for tweaking knobs) written by James Random Hacker.\n\n  <signature of Ty Coon>, 1 April 1990\n  Ty Coon, President of Vice\n\nThat's all there is to it!\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.3369140625,
          "content": "#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\nprefix=/usr/local\n\ndatarootdir=$(prefix)/share\ndocdir=$(datarootdir)/doc/gitflow\n# files that need mode 755\nEXEC_FILES=git-flow\n\n# files that need mode 644\nSCRIPT_FILES =git-flow-init\nSCRIPT_FILES+=git-flow-feature\nSCRIPT_FILES+=git-flow-bugfix\nSCRIPT_FILES+=git-flow-hotfix\nSCRIPT_FILES+=git-flow-release\nSCRIPT_FILES+=git-flow-support\nSCRIPT_FILES+=git-flow-version\nSCRIPT_FILES+=git-flow-log\nSCRIPT_FILES+=git-flow-config\nSCRIPT_FILES+=gitflow-common\nSCRIPT_FILES+=gitflow-shFlags\n\n# Hook files\nHOOK_FILES=$(wildcard hooks/*)\n\nall:\n\t@echo \"usage: make install\"\n\t@echo \"       make uninstall\"\n\ninstall:\n\tinstall -d -m 0755 $(prefix)/bin\n\tinstall -d -m 0755 $(docdir)/hooks\n\tinstall -m 0755 $(EXEC_FILES) $(prefix)/bin\n\tinstall -m 0644 $(SCRIPT_FILES) $(prefix)/bin\n\tinstall -m 0644 $(HOOK_FILES) $(docdir)/hooks\n\nuninstall:\n\ttest -d $(prefix)/bin && \\\n\tcd $(prefix)/bin && \\\n\trm -f $(EXEC_FILES) $(SCRIPT_FILES)\n\ttest -d $(docdir) && \\\n\trm -rf $(docdir)\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.4892578125,
          "content": "# git-flow (AVH Edition)\n\nA collection of Git extensions to provide high-level repository operations\nfor Vincent Driessen's [branching model](http://nvie.com/git-model \"original\nblog post\"). This fork adds functionality not added to the original branch.\n\n\n## Getting started\n\nFor the best introduction to get started with `git flow`, please read Jeff\nKreeftmeijer's blog post:\n\n[http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/](http://jeffkreeftmeijer.com/2010/why-arent-you-using-git-flow/)\n\nOr have a look at one of these screen casts:\n\n* [How to use a scalable Git branching model called git-flow](http://buildamodule.com/video/change-management-and-version-control-deploying-releases-features-and-fixes-with-git-how-to-use-a-scalable-git-branching-model-called-gitflow) (by Build a Module)\n* [A short introduction to git-flow](http://vimeo.com/16018419) (by Mark Derricutt)\n* [On the path with git-flow](https://vimeo.com/codesherpas/on-the-path-gitflow) (by Dave Bock)\n\nA quick cheatsheet was made by Daniel Kummer:\n\n[http://danielkummer.github.io/git-flow-cheatsheet/](http://danielkummer.github.io/git-flow-cheatsheet/)\n\n## Installing git-flow\n\nSee the Wiki for up-to-date [Installation Instructions](https://github.com/petervanderdoes/gitflow-avh/wiki/Installation).\n\n\n## Integration with your shell\n\nFor those who use the [Bash](http://www.gnu.org/software/bash/) or [ZSH](http://www.zsh.org)\nshell, you can use my [fork of git-flow-completion](https://github.com/petervanderdoes/git-flow-completion)\nwhich includes several additions for git-flow (AVH Edition), or you can use the\noriginal [git-flow-completion](http://github.com/bobthecow/git-flow-completion)\nproject by [bobthecow](http://github.com/bobthecow). Both offer tab-completion\nfor git-flow subcommands and branch names with my fork including tab-completion\nfor the commands not found in the original git-flow.\n\n\n## FAQ\n\n* See the [FAQ](http://github.com/petervanderdoes/gitflow-avh/wiki/FAQ) section\nof the project Wiki.\n* Version Numbering Scheme.  \nStarting with version 1.0, the project uses the following scheme:\n\\<MAJOR\\>.\\<MINOR\\>.\\<REVISION\\>\\\n* AVH is the acronym of \"A VirtualHome\"\n\n## Please help out\n\nThis project is under constant development. Feedback and suggestions are very\nwelcome and I encourage you to use the [Issues\nlist](http://github.com/petervanderdoes/gitflow-avh/issues) on Github to provide that\nfeedback.\n\nFeel free to fork this repository and to commit your additions. For a list of\nall contributors, please see the [AUTHORS](AUTHORS) file.\n\nAny questions, tips, or general discussion can be posted to the Google group:\n[http://groups.google.com/group/gitflow-users](http://groups.google.com/group/gitflow-users)\nThis is the original group set up to support the nvie branch, but I am monitoring\nthe list as well for any questions related to my version.\nWhen you do post a question on the list please indicate which version you are,\nusing the complete version number.\n\n## Contributing\n\nFork the repository.  Then, run:\n\n```shell\ngit clone -b master git@github.com:<username>/gitflow-avh.git\ncd gitflow-avh\n```\n\nThe `-b master` switch has to be added since the fork operation automatically\nclones the `develop` branch of the official gitflow repository and cloning it\nresults in a local repository with just a `develop` branch.\n\nIf you do not have gitflow installed yet install it by running `make && make install`.\n\nAfter that initialize the local gitflow repository with gitflow itself:\n\n```shell\ngit flow init -d\ngit flow feature start <your feature>\n```\n\nThen, do work and commit your changes.\n\n```shell\ngit flow feature publish <your feature>\n```\n\nWhen done, open a pull request to your feature branch.\n\n## License terms\n\ngit-flow is published under the FreeBSD License, see the\n[LICENSE](LICENSE) file. Although the FreeBSD License does not require you to\nshare any modifications you make to the source code, you are very much\nencouraged and invited to contribute back your modifications to the community,\npreferably in a Github fork, of course.\n\n\n## git flow usage\n\n### Initialization\n\nTo initialize a new repo with the basic branch structure, use:\n\n    git flow init [-d]\n\nThis will then interactively prompt you with some questions on which branches\nyou would like to use as development and production branches, and how you\nwould like your prefixes be named. You may simply press Return on any of\nthose questions to accept the (sane) default suggestions.\n\nThe ``-d`` flag will accept all defaults.\n\n![Screencast git flow init](http://i.imgur.com/lFQbY5V.gif)\n\n### Creating feature/release/hotfix/support branches\n\n* To list/start/finish/delete feature branches, use:\n\n```shell\ngit flow feature\ngit flow feature start <name> [<base>]\ngit flow feature finish <name>\ngit flow feature delete <name>\n```\n\n  For feature branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.\n\n* To push/pull a feature branch to the remote repository, use:\n\n```shell\ngit flow feature publish <name>\ngit flow feature track <name>\n```\n\n* To list/start/finish/delete release branches, use:\n\n```shell\ngit flow release\ngit flow release start <release> [<base>]\ngit flow release finish <release>\ngit flow release delete <release>\n```\n\n  For release branches, the `<base>` arg must be a branch, when omitted it defaults to the develop branch.\n\n* To list/start/finish/delete hotfix branches, use:\n\n```shell\ngit flow hotfix\ngit flow hotfix start <release> [<base>]\ngit flow hotfix finish <release>\ngit flow hotfix delete <release>\n```\n\n  For hotfix branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.\n\n* To list/start support branches, use:\n\n```shell\ngit flow support\ngit flow support start <release> <base>\n```\n\n  For support branches, the `<base>` arg must be a branch, when omitted it defaults to the production branch.\n\n### Share features with others\n\nYou can easily publish a feature you are working on. The reason can be to allow other programmers to work on it or to access it from another machine. The publish/track feature of gitflow simplify the creation of a remote branch and its tracking.\n\nWhen you want to publish a feature just use:\n```shell\ngit flow feature publish <name>\n```\n\nor, if you already are into the `feature/<name>` branch, just issue:\n```shell\ngit flow feature publish\n```\n\nNow if you execute `git branch -avv` you will see that your branch `feature/<name>` tracks `[origin/feature/<name>]`. To track the same remote branch in another clone of the same repository use:\n```shell\ngit flow feature track <name>\n```\n\nThis will create a local feature `feature/<name>` that tracks the same remote branch as the original one, that is `origin/feature/<name>`.\n\nWhen one developer (depending on your work flow) finishes working on the feature he or she can issue `git flow feature finish <name>` and this will automatically delete the remote branch. All other developers shall then run:\n```shell\n    git flow feature delete <name>\n```\n\nto get rid of the local feature that tracks a remote branch that no more exist.\n\n### Share hotfixes with others\n\nYou can publish an hotfix you are working on. The reason can be to allow other programmers to work on it or validate it or to access it from another machine.\n\nWhen you want to publish an hotfix just use (as you did for features):\n```shell\ngit flow hotfix publish <name>\n```\n\nor, if you already are into the `hotfix/<name>` branch, just issue:\n```shell\ngit flow hotfix publish\n```\n\nOther developers can now update their repositories and checkout the hotfix:\n```shell\ngit pull\ngit checkout hotfix/<name>\n```\nand eventually finish it:\n```shell\ngit flow hotfix finish\n```\n\n\n### Using Hooks and Filters\n\nFor a wide variety of commands hooks or filters can be called before and after\nthe command.  \nThe files should be placed in .git/hooks  \nIn the directory hooks you can find examples of all the hooks available.\n\n## Showing your appreciation\n\nOf course, the best way to show your appreciation for the git-flow tool itself\nremains contributing to the community.  If you'd like to show your appreciation\nin another way, however, consider donating through PayPal:\n\n[![PayPal][2]][1]\n\n[1]: https://www.paypal.com/cgi-bin/webscr?cmd=_donations&business=S85FXJ9EBHAF2&lc=US&item_name=gitflow&item_number=gitflow&no_note=0&cn=Add%20special%20instructions%20to%20the%20seller&no_shipping=1&rm=1&return=https%3a%2f%2fgithub%2ecom%2fpetervanderdoes%2fgitflow&cancel_return=https%3a%2f%2fgithub%2ecom%2fpetervanderdoes%2fgitflow&currency_code=USD&bn=PP%2dDonationsBF%3abtn_donate_SM%2egif%3aNonHosted\n\n[2]: https://www.paypalobjects.com/en_US/i/btn/btn_donate_SM.gif\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "git-flow",
          "type": "blob",
          "size": 6.7744140625,
          "content": "#!/bin/sh\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n#\n# enable debug mode\nif [ \"$DEBUG\" = \"yes\" ]; then\n\tset -x\nfi\n\n# Setup the GITFLOW_DIR for different operating systems.\n# This is mostly to make sure that we get the correct directory when the\n# git-flow file is a symbolic link\ncase $(uname -s) in\nLinux)\n\texport GITFLOW_DIR=$(dirname \"$(readlink -e \"$0\")\")\n\t;;\nFreeBSD|OpenBSD|NetBSD)\n\texport FLAGS_GETOPT_CMD='/usr/local/bin/getopt'\n\texport GITFLOW_DIR=$(dirname \"$(realpath \"$0\")\")\n\t;;\nDarwin)\n\tPRG=\"$0\"\n\twhile [ -h \"$PRG\" ]; do\n\t\tlink=$(readlink \"$PRG\")\n\t\tif expr \"$link\" : '/.*' > /dev/null; then\n\t\t\tPRG=\"$link\"\n\t\telse\n\t\t\tPRG=\"$(dirname \"$PRG\")/$link\"\n\t\tfi\n\tdone\n\texport GITFLOW_DIR=$(dirname \"$PRG\")\n\t;;\n*MINGW*)\n\texport GITFLOW_DIR=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n\tpwd () {\n\t\tbuiltin pwd -W\n\t}\n\t;;\n*)\n\t# The sed expression here replaces all backslashes by forward slashes.\n\t# This helps our Windows users, while not bothering our Unix users.)\n\texport GITFLOW_DIR=$(dirname \"$(echo \"$0\" | sed -e 's,\\\\,/,g')\")\n\t;;\nesac\n\n# Extra environment settings\nif [ -f ~/.gitflow_export ]; then\n\tif grep -E 'GITFLOW_FLAG_(SHOWCOMMANDS|INIT|FEATURE|HOTFIX|RELEASE|SUPPORT)' ~/.gitflow_export > /dev/null; then\n\t\techo \"Using environment variables for \\\"showcommands\\\", \\\"init\\\", \\\"feature\\\", \\\"hotfix\\\", \\\"release\\\" and \\\"support\\\" in ~/.gitflow_export has deprecated, use git config instead.\"\n\t\techo \"\"\n\t\texit 1;\n\telse\n\t\t. ~/.gitflow_export\n\tfi\nfi\n\nusage() {\n\techo \"usage: git flow <subcommand>\"\n\techo\n\techo \"Available subcommands are:\"\n\techo \"   init      Initialize a new git repo with support for the branching model.\"\n\techo \"   feature   Manage your feature branches.\"\n\techo \"   bugfix    Manage your bugfix branches.\"\n\techo \"   release   Manage your release branches.\"\n\techo \"   hotfix    Manage your hotfix branches.\"\n\techo \"   support   Manage your support branches.\"\n\techo \"   version   Shows version information.\"\n\techo \"   config    Manage your git-flow configuration.\"\n\techo \"   log       Show log deviating from base branch.\"\n\techo\n\techo \"Try 'git flow <subcommand> help' for details.\"\n}\n\nmain() {\n\tif [ $# -lt 1 ]; then\n\t\tusage\n\t\texit 1\n\tfi\n\n\t# Use the shFlags project to parse the command line arguments\n\t. \"$GITFLOW_DIR/gitflow-shFlags\"\n\tFLAGS_PARENT=\"git flow\"\n\n\t# Load common functionality\n\t. \"$GITFLOW_DIR/gitflow-common\"\n\n\t# allow user to request git action logging\n\tDEFINE_boolean 'showcommands' false 'Show actions taken (git commands)'\n\t# but if the user prefers that the logging is always on,\n\t# use the environmental variables.\n\tgitflow_override_flag_boolean 'showcommands' 'showcommands'\n\n\t# Sanity checks\n\tSUBCOMMAND=\"$1\"; shift\n\tif [ \"${SUBCOMMAND}\" = \"finish\" ] || [ \"${SUBCOMMAND}\" = \"delete\" ] || [ \"${SUBCOMMAND}\" = \"publish\" ] || [ \"${SUBCOMMAND}\" = \"rebase\" ]; then\n\t\t_current_branch=$(git_current_branch)\n\t\tif gitflow_is_prefixed_branch \"${_current_branch}\"; then\n\t\t\tif startswith \"${_current_branch}\" $(git config --get gitflow.prefix.feature); then\n\t\t\t\tSUBACTION=\"${SUBCOMMAND}\"\n\t\t\t\tSUBCOMMAND=\"feature\"\n\t\t\t\t_prefix=$(git config --get gitflow.prefix.feature)\n\t\t\t\t_short_branch_name=$(echo ${_current_branch#*${_prefix}})\n\t\t\telse\n\t\t\t\tif startswith \"${_current_branch}\" $(git config --get gitflow.prefix.bugfix); then\n\t\t\t\t\tSUBACTION=\"${SUBCOMMAND}\"\n\t\t\t\t\tSUBCOMMAND=\"bugfix\"\n\t\t\t\t\t_prefix=$(git config --get gitflow.prefix.bugfix)\n\t\t\t\t\t_short_branch_name=$(echo ${_current_branch#*${_prefix}})\n\t\t\t\telse\n\t\t\t\t\tif startswith \"${_current_branch}\" $(git config --get gitflow.prefix.hotfix); then\n\t\t\t\t\t\tSUBACTION=\"${SUBCOMMAND}\"\n\t\t\t\t\t\tSUBCOMMAND=\"hotfix\"\n\t\t\t\t\t\t_prefix=$(git config --get gitflow.prefix.hotfix)\n\t\t\t\t\t\t_short_branch_name=$(echo ${_current_branch#*${_prefix}})\n\t\t\t\t\telse\n\t\t\t\t\t\tif startswith \"${_current_branch}\" $(git config --get gitflow.prefix.release); then\n\t\t\t\t\t\t\tSUBACTION=\"${SUBCOMMAND}\"\n\t\t\t\t\t\t\tSUBCOMMAND=\"release\"\n\t\t\t\t\t\t\t_prefix=$(git config --get gitflow.prefix.release)\n\t\t\t\t\t\t\t_short_branch_name=$(echo ${_current_branch#*${_prefix}})\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\n\t\tif [ ! -e \"$GITFLOW_DIR/git-flow-$SUBCOMMAND\" ]; then\n\t\tusage\n\t\texit 1\n\tfi\n\n\t# Run command\n\t. \"$GITFLOW_DIR/git-flow-$SUBCOMMAND\"\n\tFLAGS_PARENT=\"git flow $SUBCOMMAND\"\n\n\tif [ -z \"${SUBACTION}\" ]; then\n\t\t# If the first argument is a flag, it starts with '-', we interpret this\n\t\t# argument as a flag for the default command.\n\t\tif startswith \"$1\" \"-\"; then\n\t\t\tSUBACTION=\"default\"\n\t\telif [ -z \"$1\" ]; then\n\t\t\tSUBACTION=\"default\"\n\t\telse\n\t\t\tSUBACTION=\"$1\"\n\t\t\tshift\n\t\t\t# Do not allow direct calls to subactions with an underscore.\n\t\t\tif $(contains \"$SUBACTION\" \"_\"); then\n\t\t\t\twarn \"Unknown subcommand: '$SUBACTION'\"\n\t\t\t\tusage\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t# Replace the dash with an underscore as bash doesn't allow a dash\n\t\t\t# in the function name.\n\t\t\tSUBACTION=$(echo \"$SUBACTION\" |tr '-' '_')\n\t\tfi\n\tfi\n\n\tif ! type \"cmd_$SUBACTION\" >/dev/null 2>&1; then\n\t\twarn \"Unknown subcommand: '$SUBACTION'\"\n\t\tusage\n\t\texit 1\n\tfi\n\n\t# Run the specified action\n\tif [ $SUBACTION != \"help\" ] && [ $SUBCOMMAND != \"init\" ]; then\n\t\tinitialize\n\tfi\n\tif [ $SUBACTION != 'default' ]; then\n\t\tFLAGS_PARENT=\"git flow $SUBCOMMAND $SUBACTION\"\n\tfi\n\n\tcmd_$SUBACTION \"$@\" \"${_short_branch_name}\"\n}\nmain \"$@\"\n"
        },
        {
          "name": "git-flow-bugfix",
          "type": "blob",
          "size": 24.0283203125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgit config --get gitflow.prefix.bugfix >/dev/null 2>&1 || die \"Bugfix prefix not set. Please run 'git flow init'.\"\n\tgitflow_load_settings\n\tPREFIX=$(git config --get gitflow.prefix.bugfix)\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix [list]\ngit flow bugfix start\ngit flow bugfix finish\ngit flow bugfix publish\ngit flow bugfix track\ngit flow bugfix diff\ngit flow bugfix rebase\ngit flow bugfix checkout\ngit flow bugfix pull\ngit flow bugfix delete\n\nManage your bugfix branches.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix [list] [-h] [-v]\n\nLists all the existing bugfix branches in the local repository.\n--\nh,help!     Show this help\nv,verbose   Verbose (more) output\n\"\n\tlocal bugfix_branches current_branch width branch len\n\tlocal base develop_sha branch_sha\n\n\t# Define flags\n\tDEFINE_boolean 'verbose' false 'verbose (more) output' v\n\n\t# Parse argun=ments\n\tparse_args \"$@\"\n\n\tbugfix_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tif [ -z \"$bugfix_branches\" ]; then\n\t\twarn \"No bugfix branches exist.\"\n\t\twarn \"\"\n\t\twarn \"You can start a new bugfix branch:\"\n\t\twarn \"\"\n\t\twarn \"    git flow bugfix start <name> [<base>]\"\n\t\twarn \"\"\n\t\texit 0\n\tfi\n\tcurrent_branch=$(git_current_branch)\n\n\t# Determine column width first\n\twidth=0\n\tfor branch in $bugfix_branches; do\n\t\tlen=${#branch}\n\t\twidth=$(max $width $len)\n\tdone\n\twidth=$(($width+3-${#PREFIX}))\n\n\tfor branch in $bugfix_branches; do\n\t\tbase=$(git merge-base \"$branch\" \"$DEVELOP_BRANCH\")\n\t\tdevelop_sha=$(git rev-parse \"$DEVELOP_BRANCH\")\n\t\tbranch_sha=$(git rev-parse \"$branch\")\n\t\tif [ \"$branch\" = \"$current_branch\" ]; then\n\t\t\tprintf \"* \"\n\t\telse\n\t\t\tprintf \"  \"\n\t\tfi\n\t\tif flag verbose; then\n\t\t\tprintf \"%-${width}s\" \"${branch#$PREFIX}\"\n\t\t\tif [ \"$branch_sha\" = \"$develop_sha\" ]; then\n\t\t\t\tprintf \"(no commits yet)\"\n\t\t\telif [ \"$base\" = \"$branch_sha\" ]; then\n\t\t\t\tprintf \"(is behind develop, may ff)\"\n\t\t\telif [ \"$base\" = \"$develop_sha\" ]; then\n\t\t\t\tprintf \"(based on latest develop)\"\n\t\t\telse\n\t\t\t\tprintf \"(may be rebased)\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"%s\" \"${branch#$PREFIX}\"\n\t\tfi\n\t\techo\n\tdone\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tNAME=''\n\telse\n\t\tNAME=$1\n\tfi\n\tBRANCH=$PREFIX$NAME\n}\n\nparse_remote_name() {\n\t# Parse arguments\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tREMOTE=''\n\telse\n\t\tREMOTE=$1\n\tfi\n\n\tif [ -z $2 ]; then\n\t\tNAME=''\n\telse\n\t\tNAME=$2\n\tfi\n\tBRANCH=$PREFIX$NAME\n}\n\ncmd_start() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix start [-h] [-F] <name> [<base>]\n\nStart new bugfix <name>, optionally basing it on <base> instead of <develop>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\nF,[no]fetch      Fetch from origin before performing local operation\n\"\n\tlocal base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false 'fetch from origin before performing local operation' F\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"bugfix.start.fetch\"   \"fetch\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\teval set -- \"${FLAGS_ARGV}\"\n\tbase=${2:-$DEVELOP_BRANCH}\n\n\trequire_base_is_local_branch \"$base\"\n\tgitflow_require_name_arg\n\n\t# Update the local repo with remote changes, if asked\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$base\"\n\tfi\n\n\t# Sanity checks\n\trequire_branch_absent \"$BRANCH\"\n\n\t# If the origin branch counterpart exists, assert that the local branch\n\t# isn't behind it (to avoid unnecessary rebasing)\n\tif git_remote_branch_exists \"$ORIGIN/$base\"; then\n\t\trequire_branches_equal \"$base\" \"$ORIGIN/$base\"\n\tfi\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\tgitflow_config_set_base_branch $base $BRANCH\n\n\t# create branch\n\tgit_do checkout -b \"$BRANCH\" \"$base\" || die \"Could not create bugfix branch '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new branch '$BRANCH' was created, based on '$base'\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo \"\"\n\techo \"Now, start committing on your bugfix. When done, use:\"\n\techo \"\"\n\techo \"     git flow bugfix finish $NAME\"\n\techo\n}\n\ncmd_finish() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix finish [-h] [-F] [-r] [-p] [-k] [-D] [-S] [--no-ff] <name|nameprefix>\n\nFinish bugfix <name>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\nF,[no]fetch            Fetch from origin before performing finish\nr,[no]rebase           Rebase before merging\np,[no]preserve-merges  Preserve merges while rebasing\n[no]push               Push to origin after performing finish\nk,[no]keep             Keep branch after performing finish\nkeepremote!        \t   Keep the remote branch\nkeeplocal!             Keep the local branch\nD,[no]force_delete     Force delete bugfix branch after finish\nS,[no]squash           Squash bugfix during merge\nno-ff!                 Never fast-forward during the merge\n\"\n\tlocal finish_base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\tDEFINE_boolean 'rebase' false \"rebase before merging\" r\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges while rebasing' p\n\tDEFINE_boolean 'push' false \"push to $ORIGIN after performing finish\"\n\tDEFINE_boolean 'keep' false \"keep branch after performing finish\" k\n\tDEFINE_boolean 'keepremote' false \"keep the remote branch\"\n\tDEFINE_boolean 'keeplocal' false \"keep the local branch\"\n\tDEFINE_boolean 'force_delete' false \"force delete bugfix branch after finish\" D\n\tDEFINE_boolean 'squash' false \"squash bugfix during merge\" S\n\tDEFINE_boolean 'squash-info' false \"add branch info during squash\"\n\tDEFINE_boolean 'no-ff!' false \"Don't fast-forward ever during merge \"\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"bugfix.finish.fetch\"             \"fetch\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.rebase\"            \"rebase\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.preserve-merges\"   \"preserve_merges\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.push\"              \"push\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.keep\"              \"keep\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.keepremote\"        \"keepremote\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.keeplocal\"         \"keeplocal\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.force-delete\"      \"force_delete\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.squash\"            \"squash\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.squash-info\"       \"squash_info\"\n\tgitflow_override_flag_boolean   \"bugfix.finish.no-ff\"             \"no_ff\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\t# Keeping both branches implies the --keep flag to be true.\n\tif flag keepremote && flag keeplocal; then\n\t\tFLAGS_keep=$FLAGS_TRUE\n\tfi\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't finish the bugfix branch '$BRANCH'.\"\n\n\t# Detect if we're restoring from a merge conflict\n\tif [ -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\" ]; then\n\t\t#\n\t\t# TODO: detect that we're working on the correct branch here!\n\t\t# The user need not necessarily have given the same $NAME twice here\n\t\t# (although he/she should).\n\t\t#\n\n\t\t# TODO: git_is_clean_working_tree() should provide an alternative\n\t\t# exit code for \"unmerged changes in working tree\", which we should\n\t\t# actually be testing for here\n\t\tif git_is_clean_working_tree; then\n\t\t\tfinish_base=$(cat \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\")\n\n\t\t\t# Since the working tree is now clean, either the user did a\n\t\t\t# successful merge manually, or the merge was cancelled.\n\t\t\t# We detect this using git_is_branch_merged_into()\n\t\t\tif git_is_branch_merged_into \"$BRANCH\" \"$finish_base\"; then\n\t\t\t\trm -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\t\t\thelper_finish_cleanup\n\t\t\t\texit 0\n\t\t\telse\n\t\t\t\t# If the user cancelled the merge and decided to wait until\n\t\t\t\t# later,that's fine. But we have to acknowledge this by\n\t\t\t\t# removing the MERGE_BASE file and continuing normal execution\n\t\t\t\t# of the finish\n\t\t\t\trm -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\t\tfi\n\t\telse\n\t\t\techo\n\t\t\techo \"Merge conflicts not resolved yet, use:\"\n\t\t\techo \"    git mergetool\"\n\t\t\techo \"    git commit\"\n\t\t\techo\n\t\t\techo \"You can then complete the finish by running it again:\"\n\t\t\techo \"    git flow bugfix finish $NAME\"\n\t\t\techo\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\n\t# We always fetch the Branch from Origin\n\t# This is done to avoid possible commits on the remote that are not\n\t# merged into the local branch\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BRANCH\"\n\tfi\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BASE_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$BASE_BRANCH\"; then\n\t\trequire_branches_equal \"$BASE_BRANCH\" \"$ORIGIN/$BASE_BRANCH\"\n\tfi\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# If the user wants to rebase, do that first\n\tif flag rebase; then\n\t\tlocal _rebase_opts=\"\"\n\t\tif flag preserve_merges; then\n\t\t\t_rebase_opts=\"$_rebase_opts -p\"\n\t\tfi\n\t\tif flag showcommands; then\n\t\t\t_rebase_opts=\"$_rebase_opts --showcommands\"\n\t\tfi\n\t\tif ! git flow bugfix rebase $_rebase_opts \"$NAME\"; then\n\t\t\twarn \"Finish was aborted due to conflicts during rebase.\"\n\t\t\twarn \"Please finish the rebase manually now.\"\n\t\t\twarn \"When finished, re-run:\"\n\t\t\twarn \"    git flow bugfix finish '$NAME' '$BASE_BRANCH'\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Merge into BASE\n\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\n\tif noflag squash; then\n\t\tif flag no_ff; then\n\t\t\tgit_do merge --no-ff \"$BRANCH\"\n\t\telse\n\t\t\tif [ \"$(git rev-list -n2 \"$BASE_BRANCH..$BRANCH\" | wc -l)\" -eq 1 ]; then\n\t\t\t\tgit_do merge --ff \"$BRANCH\"\n\t\t\telse\n\t\t\t\tgit_do merge --no-ff \"$BRANCH\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tgit_do merge --squash \"$BRANCH\"\n\t\tflag squash_info && gitflow_create_squash_message \"Merged bugfix branch '$BRANCH'\" \"$BASE_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\tgit_do commit\n\tfi\n\n\tif [ $? -ne 0 ]; then\n\t\t# Oops.. we have a merge conflict!\n\t\t# Write the given $BASE_BRANCH to a temporary file as we will\n\t\t# be needing it later.\n\t\tmkdir -p \"$DOT_GIT_DIR/.gitflow\"\n\t\techo \"$BASE_BRANCH\" > \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\techo\n\t\techo \"There were merge conflicts. To resolve the merge conflict manually, use:\"\n\t\techo \"    git mergetool\"\n\t\techo \"    git commit\"\n\t\techo\n\t\techo \"You can then complete the finish by running it again:\"\n\t\techo \"    git flow bugfix finish $NAME\"\n\t\techo\n\t\texit 1\n\tfi\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# When no merge conflict is detected, just clean up the bugfix branch\n\tgitflow_config_remove_base_branch \"$BRANCH\"\n\thelper_finish_cleanup\n}\n\nhelper_finish_cleanup() {\n\tlocal keepmsg remotebranchdeleted localbranchdeleted\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\trequire_clean_working_tree\n\n\tremotebranchdeleted=$FLAGS_FALSE\n\tlocalbranchdeleted=$FLAGS_FALSE\n\n\tif flag push; then\n\t\tgit_do push \"$ORIGIN\" \"$BASE_BRANCH\" || die \"Could not push branch '$BASE_BRANCH' to remote '$ORIGIN'.\"\n\tfi\n\n\tif noflag keep; then\n\n\t\t# Always delete remote first\n\t\tif noflag keepremote;then\n\t\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\" && remotebranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# Delete local after remote to avoid warnings\n\t\tif noflag keeplocal; then\n\t\t\tif [ \"$BRANCH\" = \"$(git_current_branch)\" ]; then\n\t\t\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\t\tfi\n\t\t\tif flag force_delete; then\n\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\telse\n\t\t\t\tif noflag squash; then\n\t\t\t\t\tgit_do branch -d \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\telse\n\t\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\t\t# no more branches: we can safely remove config section\n\t\tif ! git_remote_branch_exists \"$ORIGIN/$BRANCH\" -a ! git_local_branch_exists \"$BRANCH\"; then\n\t\t\tgitflow_config_remove_base_section \"$BRANCH\"\n\t\tfi\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The bugfix branch '$BRANCH' was merged into '$BASE_BRANCH'\"\n\t#echo \"- Merge conflicts were resolved\"\t\t# TODO: Add this line when it's supported\n\tif noflag keep; then\n\t\tif [ $localbranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=\"has been locally deleted\"\n\t\telse\n\t\t\tkeepmsg=\"is still locally available\"\n\t\tfi\n\t\tif [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=$keepmsg\"; it has been remotely deleted from '$ORIGIN'\"\n\t\telif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\telse\n\t\tkeepmsg=\"is still locally available\"\n\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- bugfix branch '$BRANCH' \"$keepmsg\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_publish() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix publish [-h] [<name>]\n\nPublish bugfix branch <name> on $ORIGIN.\nWhen <name> is omitted the current branch is used, but only if it's a bugfix branch.\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_branch \"$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\trequire_branch_absent \"$ORIGIN/$BRANCH\"\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Create remote branch with remote tracking\n\tgit_do push -u \"$ORIGIN\" \"$BRANCH:$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" \"$BRANCH\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_do checkout \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The remote branch '$BRANCH' was created or updated\"\n\techo \"- The local branch '$BRANCH' was configured to track the remote branch\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_track() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix track [-h] <name>\n\nStart tracking bugfix <name> that is shared on $ORIGIN\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_name_arg\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_local_branch_absent \"$BRANCH\"\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_remote_branch_exists \"$ORIGIN/$BRANCH\"\n\n\t# Create tracking branch\n\tgit_do checkout -b \"$BRANCH\" \"$ORIGIN/$BRANCH\" || die \"Could not create '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new remote tracking branch '$BRANCH' was created\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_diff() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix diff [-h] [<name|nameprefix>]\n\nShow all changes in <name> that are not in the base\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tlocal base\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\tbase=$(gitflow_config_get_base_branch $BRANCH)\n\tbase=${base:-$DEVELOP_BRANCH}\n\n\tgit_do diff \"$base...$BRANCH\"\n}\n\ncmd_checkout() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix checkout [-h] [<name|nameprefix>]\n\nSwitch to bugfix branch <name>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tNAME=$(gitflow_resolve_nameprefix \"$NAME\" \"$PREFIX\")\n\tif [ $? -eq 0 ]; then\n\t\tBRANCH=$PREFIX$NAME\n\t\tgit_do checkout \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tfi\n}\n\ncmd_co() {\n\t# Alias for checkout\n\tcmd_checkout \"$@\"\n}\n\ncmd_rebase() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix rebase [-h] [-i] [-p] [<name|nameprefix>]\n\nRebase <name> on <base_branch>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\ni,[no]interactive      Do an interactive rebase\np,[no]preserve-merges  Preserve merges\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'interactive' false 'do an interactive rebase' i\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges' p\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"bugfix.rebase.interactive\"       \"interactive\"\n\tgitflow_override_flag_boolean   \"bugfix.rebase.preserve-merges\"   \"preserve_merges\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\twarn \"Will try to rebase '$NAME' which is based on '$BASE_BRANCH'...\"\n\tif ! git_config_bool_exists \"rebase.autostash\"; then\n\t\trequire_clean_working_tree\n\tfi\n\trequire_branch \"$BRANCH\"\n\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the bugfix branch '$BRANCH'.\"\n\n\tgit_do checkout -q \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tif flag interactive; then\n\t\topts=\"$opts -i\"\n\tfi\n\tif flag preserve_merges; then\n\t\topts=\"$opts -p\"\n\tfi\n\tgit_do rebase $opts \"$BASE_BRANCH\"\n}\n\navoid_accidental_cross_branch_action() {\n\tlocal current_branch\n\n\tcurrent_branch=$(git_current_branch)\n\tif [ \"$BRANCH\" != \"$current_branch\" ]; then\n\t\twarn \"Trying to pull from '$BRANCH' while currently on branch '$current_branch'.\"\n\t\twarn \"To avoid unintended merges, git-flow aborted.\"\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\ncmd_pull() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix pull [-h] <remote> [<name>]\n\nPull bugfix <name> from <remote>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'rebase' false \"pull with rebase\" r\n\n\twarn \"The command 'git flow bugfix pull' will be deprecated per version 2.0.0. Use 'git flow bugfix track' instead.\"\n\n\t# Parse arguments\n\tparse_remote_name \"$@\"\n\n\tif [ -z \"$REMOTE\" ]; then\n\t\tdie \"Name a remote explicitly.\"\n\tfi\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\t# To avoid accidentally merging different bugfix branches into each other,\n\t# die if the current bugfix branch differs from the requested $NAME\n\t# argument.\n\tcurrent_branch=$(git_current_branch)\n\tif startswith \"$current_branch\" \"$PREFIX\"; then\n\t\t# We are on a local bugfix branch already, so $BRANCH must be equal to\n\t\t# the current branch\n\t\tavoid_accidental_cross_branch_action || die\n\tfi\n\n\trequire_clean_working_tree\n\n\trun_pre_hook \"$NAME\" \"$REMOTE\" \"$BRANCH\"\n\n\tif git_local_branch_exists \"$BRANCH\"; then\n\t\t# Again, avoid accidental merges\n\t\tavoid_accidental_cross_branch_action || die\n\n\t\t# We already have a local branch called like this, so simply pull the\n\t\t# remote changes in\n\t\tif flag rebase; then\n\t\t\tif ! git_do pull --rebase -q \"$REMOTE\" \"$BRANCH\"; then\n\t\t\t\twarn \"Pull was aborted. There might be conflicts during rebase or '$REMOTE' might be inaccessible.\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\telse\n\t\t\tgit_do pull -q \"$REMOTE\" \"$BRANCH\" || die \"Failed to pull from remote '$REMOTE'.\"\n\t\tfi\n\n\t\techo \"Pulled $REMOTE's changes into $BRANCH.\"\n\telse\n\t\t# Setup the local branch clone for the first time\n\t\tgit_do fetch -q \"$REMOTE\" \"$BRANCH\" ||  die \"Could not fetch branch '$BRANCH' from remote '$REMOTE'.\"     # Stores in FETCH_HEAD\n\t\tgit_do branch --no-track \"$BRANCH\" FETCH_HEAD || die \"Branch failed.\"\n\t\tgit_do checkout -q \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\t\techo \"Created local branch $BRANCH based on $REMOTE's $BRANCH.\"\n\tfi\n\n\trun_post_hook \"$NAME\" \"$REMOTE\" \"$BRANCH\"\n}\n\ncmd_delete() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix delete [-h] [-f] [-r] <name>\n\nDelete a given bugfix branch\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\nf,[no]force      Force deletion\nr,[no]remote     Delete remote branch\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'force' false \"force deletion\" f\n\tDEFINE_boolean 'remote' false \"delete remote branch\" r\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"bugfix.delete.force\"    \"force\"\n\tgitflow_override_flag_boolean   \"bugfix.delete.remote\"   \"remote\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_name_arg\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tcurrent_branch=$(git_current_branch)\n\t# We can't delete a branch we are on, switch to the develop branch.\n\tif [ \"$BRANCH\" = \"$current_branch\" ]; then\n\t\trequire_clean_working_tree\n\t\tif git_local_branch_exists \"$BASE_BRANCH\"; then\n\t\t\tgit_do checkout \"$BASE_BRANCH\"\n\t\telse\n\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\t\tfi\n\tfi\n\n\tif git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\"; then\n\t\tgit_do branch -d \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\tif flag remote; then\n\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\tfi\n\telse\n\t\tif flag force; then\n\t\t\tgit_do branch -D \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\t\tif flag remote; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\t\tfi\n\t\telse\n\t\t\tdie \"bugfix branch '$BRANCH' has been not been merged yet. Use -f to force the deletion.\"\n\t\tfi\n\tfi\n\n\tgitflow_config_remove_base_section \"$BRANCH\"\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- bugfix branch '$BRANCH' has been deleted.\"\n\tflag remote && echo \"- bugfix branch '$BRANCH' in '$ORIGIN' has been deleted.\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rename() {\n\tOPTIONS_SPEC=\"\\\ngit flow bugfix rename <new_name> [<new_name>]\n\nRename a given bugfix branch\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tgitflow_rename_branch \"$@\"\n}\n"
        },
        {
          "name": "git-flow-config",
          "type": "blob",
          "size": 8.4169921875,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgitflow_load_settings\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow config [list]\ngit flow config set\ngit flow config base\n\nManage the git-flow configuration.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\nparse_args() {\n\t# Parse options\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\tOPTION=$(echo $1|tr '[:upper:]' '[:lower:]')\n\n\tif [ \"$FLAGS_file\" != \"\" ]; then\n\t\tgitflow_config_option=\"--file '$FLAGS_file'\"\n\telif flag local; then\n\t\tgitflow_config_option=\"--local\"\n\telif flag global; then\n\t\tgitflow_config_option=\"--global\"\n\telif flag system; then\n\t\tgitflow_config_option=\"--system\"\n\telse\n\t\tgitflow_config_option=\"\"\n\tfi\n\n}\n\n# Default entry when no SUBACTION is given\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow config [list]\n\nShow the git-flow configurations\n--\nh,help!           Show this help\n\nUse config file location\nlocal!    Use repository config file\nglobal!   Use global config file\nsystem!   Use system config file\nfile=     Use given config file\n\"\n\tlocal output\n\n\t# Define flags\n\tDEFINE_boolean 'local' false 'use repository config file'\n\tDEFINE_boolean 'global' false 'use global config file'\n\tDEFINE_boolean 'system' false 'use system config file'\n\tDEFINE_string 'file' \"\" 'use given config file'\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.branch.master)\n\techo \"Branch name for production releases: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.branch.develop)\n\techo \"Branch name for \\\"next release\\\" development: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.feature)\n\techo \"Feature branch prefix: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.bugfix)\n\techo \"Bugfix branch prefix: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.release)\n\techo \"Release branch prefix: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.hotfix)\n\techo \"Hotfix branch prefix: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.support)\n\techo \"Support branch prefix: $output \"\n\n\toutput=$(git config $gitflow_config_option --get gitflow.prefix.versiontag)\n\techo \"Version tag prefix: $output \"\n}\n\ncmd_set() {\n\tOPTIONS_SPEC=\"\\\ngit flow config set <option> <value>\n\nSet the git-flow configuration option to the given value\n--\nh,help!           Show this help\nlocal!    Use repository config file\nglobal!   Use global config file\nsystem!   Use system config file\nfile=     Use given config file\n\"\n\tlocal value cfg_option txt\n\n\t# Define flags\n\tDEFINE_boolean 'local' false 'use repository config file'\n\tDEFINE_boolean 'global' false 'use global config file'\n\tDEFINE_boolean 'system' false 'use system config file'\n\tDEFINE_string 'file' \"\" 'use given config file'\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\teval set -- \"${FLAGS_ARGV}\"\n\tvalue=$2\n\n\tcase $OPTION in\n\tmaster)\n\t\tcfg_option=\"gitflow.branch.master\"\n\t\ttxt=\"Branch name for production releases\"\n\t\t;;\n\tdevelop)\n\t\tcfg_option=\"gitflow.branch.develop\"\n\t\ttxt=\"Branch name for \\\"next release\\\" development\"\n\t\t;;\n\tfeature)\n\t\tcfg_option=\"gitflow.prefix.feature\"\n\t\ttxt=\"Feature branch prefix\"\n\t\t;;\n\tbugfix)\n\t\tcfg_option=\"gitflow.prefix.bugfix\"\n\t\ttxt=\"Bugfix branch prefix\"\n\t\t;;\n\thotfix)\n\t\tcfg_option=\"gitflow.prefix.hotfix\"\n\t\ttxt=\"Hotfix branch prefix\"\n\t\t;;\n\trelease)\n\t\tcfg_option=\"gitflow.prefix.release\"\n\t\ttxt=\"Release branch prefix\"\n\t\t;;\n\tsupport)\n\t\tcfg_option=\"gitflow.prefix.support\"\n\t\ttxt=\"Support branch prefix\"\n\t\t;;\n\tversiontagprefix)\n\t\tcfg_option=\"gitflow.prefix.versiontag\"\n\t\ttxt=\"Version tag prefix\"\n\t\t;;\n\tallowmultihotfix)\n\t\tcfg_option=\"gitflow.multi-hotfix\"\n\t\ttxt=\"Allow multiple hotfix branches\"\n\t\t;;\n\t*)\n\t\tdie_help \"Invalid option given.\"\n\t\t;;\n\tesac\n\n\t[ -n \"$value\" ] || die_help \"No value given\"\n\n\tif [ $OPTION = \"master\" ]; then\n\t\tdevelop_branch=$(git config --get gitflow.branch.develop)\n\t\tif [ \"$value\" = $develop_branch ]; then\n\t\t\tdie \"Production and \\\"next release\\\" branch should differ.\"\n\t\tfi\n\n\t\tif ! git_local_branch_exists \"$value\" && git_remote_branch_exists \"origin/$value\"; then\n\t\t\tgit_do branch \"$value\" \"origin/$value\" >/dev/null 2>&1\n\t\telif ! git_local_branch_exists \"$value\"; then\n\t\t\tdie \"Local branch '$value' does not exist.\"\n\t\tfi\n\tfi\n\n\tif [ $OPTION = \"develop\" ]; then\n\t\tmaster_branch=$(git config --get gitflow.branch.master)\n\t\tif [ \"$value\" = $master_branch ]; then\n\t\t\tdie \"Production and \\\"next release\\\" branch should differ.\"\n\t\tfi\n\n\t\tif ! git_local_branch_exists \"$value\" && git_remote_branch_exists \"origin/$value\"; then\n\t\t\tgit_do branch \"$value\" \"origin/$value\" >/dev/null 2>&1\n\t\telif ! git_local_branch_exists \"$value\"; then\n\t\t\tdie \"Local branch '$value' does not exist.\"\n\t\tfi\n\tfi\n\n\tif [ $OPTION = \"allowmultihotfix\" ]; then\n\t\tcheck_boolean \"${value}\"\n\t\tcase $? in\n\t\t${FLAGS_ERROR})\n\t\t\tdie \"Invalid value for option 'allowmultihotfix'. Valid values are 'true' or 'false'\"\n\t\t\t;;\n\t\t*)\n\t\t\t;;\n\t\tesac\n\tfi\n\n\tgit_do config $gitflow_config_option $cfg_option \"$value\"\n\n\tcase $? in\n\t0)\n\t\t;;\n\t3)\n\t\tdie \"The config file is invalid.\"\n\t\t;;\n\t4)\n\t\tdie \"Can not write to the config file.\"\n\t\t;;\n\t*)\n\t\tdie \"Unknown return code [$?]. Please file an issue about this error.\"\n\t\t;;\n\tesac\n\n\techo\n\techo \"Summary of actions:\"\n\tif [ \"$FLAGS_file\" != \"\" ]; then\n\t\techo \"- Using configuration file '$FLAGS_file'\"\n\telif flag local; then\n\t\techo \"- Using repository specific configuration file.\"\n\telif flag global; then\n\t\techo \"- Using user-specific configuration file.\"\n\telif flag system; then\n\t\techo \"- Using system-wide configuration file.\"\n\telse\n\t\techo \"- Using repository specific configuration file.\"\n\tfi\n\techo \"- $txt set to $value\"\n\techo\n}\n\ncmd_base () {\n\t\tOPTIONS_SPEC=\"\\\ngit flow config base [<options>] <branch> [<base>]\n\nSet the given <base> for the given <branch>\n--\nh,help!           Show this help\nget               Get the base for the given branch (default behavior).\nset               Set the given base for the given branch.\n\"\n\n\tDEFINE_boolean 'get' true 'Get the base for the given branch (default behavior).'\n\tDEFINE_boolean 'set' false 'Set the given base for the given branch.'\n\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\tif flag 'set'; then\n\t\t[ -z \"$1\" ] && die_help 'No branch given'\n\t\t[ -z \"$2\" ] && die_help 'No base given'\n\t\t__set_base \"$@\"\n\telse\n\t\t[ -z \"$1\" ] && die_help 'No branch given'\n\t\t__get_base \"$@\"\n\tfi\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Private functions\n__set_base () {\n\n\trequire_branch \"$1\"\n\tgit_branch_exists \"$2\" || die_help \"Given base doesn't exists or is not a branch.\"\n\n\tgitflow_config_set_base_branch \"$2\" \"$1\"\n}\n\n__get_base () {\n\tlocal base\n\n\tbase=$(gitflow_config_get_base_branch \"$1\")\n\techo\n\tif [ -z \"$base\" ]; then\n\t\techo \"Base branch not set for branch '\"$1\"'\"\n\telse\n\t\techo \"Base branch for branch '\"$1\"' set to '\"$base\"'\"\n\tfi\n}\n"
        },
        {
          "name": "git-flow-feature",
          "type": "blob",
          "size": 24.111328125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgit config --get gitflow.prefix.feature >/dev/null 2>&1 || die \"Feature prefix not set. Please run 'git flow init'.\"\n\tgitflow_load_settings\n\tPREFIX=$(git config --get gitflow.prefix.feature)\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature [list]\ngit flow feature start\ngit flow feature finish\ngit flow feature publish\ngit flow feature track\ngit flow feature diff\ngit flow feature rebase\ngit flow feature checkout\ngit flow feature pull\ngit flow feature delete\n\nManage your feature branches.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature [list] [-h] [-v]\n\nLists all the existing feature branches in the local repository.\n--\nh,help!     Show this help\nv,verbose   Verbose (more) output\n\"\n\tlocal feature_branches current_branch width branch len\n\tlocal base develop_sha branch_sha\n\n\t# Define flags\n\tDEFINE_boolean 'verbose' false 'verbose (more) output' v\n\n\t# Parse argun=ments\n\tparse_args \"$@\"\n\n\tfeature_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tif [ -z \"$feature_branches\" ]; then\n\t\twarn \"No feature branches exist.\"\n\t\twarn \"\"\n\t\twarn \"You can start a new feature branch:\"\n\t\twarn \"\"\n\t\twarn \"    git flow feature start <name> [<base>]\"\n\t\twarn \"\"\n\t\texit 0\n\tfi\n\tcurrent_branch=$(git_current_branch)\n\n\t# Determine column width first\n\twidth=0\n\tfor branch in $feature_branches; do\n\t\tlen=${#branch}\n\t\twidth=$(max $width $len)\n\tdone\n\twidth=$(($width+3-${#PREFIX}))\n\n\tfor branch in $feature_branches; do\n\t\tbase=$(git merge-base \"$branch\" \"$DEVELOP_BRANCH\")\n\t\tdevelop_sha=$(git rev-parse \"$DEVELOP_BRANCH\")\n\t\tbranch_sha=$(git rev-parse \"$branch\")\n\t\tif [ \"$branch\" = \"$current_branch\" ]; then\n\t\t\tprintf \"* \"\n\t\telse\n\t\t\tprintf \"  \"\n\t\tfi\n\t\tif flag verbose; then\n\t\t\tprintf \"%-${width}s\" \"${branch#$PREFIX}\"\n\t\t\tif [ \"$branch_sha\" = \"$develop_sha\" ]; then\n\t\t\t\tprintf \"(no commits yet)\"\n\t\t\telif [ \"$base\" = \"$branch_sha\" ]; then\n\t\t\t\tprintf \"(is behind develop, may ff)\"\n\t\t\telif [ \"$base\" = \"$develop_sha\" ]; then\n\t\t\t\tprintf \"(based on latest develop)\"\n\t\t\telse\n\t\t\t\tprintf \"(may be rebased)\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"%s\" \"${branch#$PREFIX}\"\n\t\tfi\n\t\techo\n\tdone\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tNAME=''\n\telse\n\t\tNAME=$1\n\tfi\n\tBRANCH=$PREFIX$NAME\n}\n\nparse_remote_name() {\n\t# Parse arguments\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tREMOTE=''\n\telse\n\t\tREMOTE=$1\n\tfi\n\n\tif [ -z $2 ]; then\n\t\tNAME=''\n\telse\n\t\tNAME=$2\n\tfi\n\tBRANCH=$PREFIX$NAME\n}\n\ncmd_start() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature start [-h] [-F] <name> [<base>]\n\nStart new feature <name>, optionally basing it on <base> instead of <develop>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\nF,[no]fetch      Fetch from origin before performing local operation\n\"\n\tlocal base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false 'fetch from origin before performing local operation' F\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"feature.start.fetch\"   \"fetch\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\teval set -- \"${FLAGS_ARGV}\"\n\tbase=${2:-$DEVELOP_BRANCH}\n\n\trequire_base_is_local_branch \"$base\"\n\tgitflow_require_name_arg\n\n\t# Update the local repo with remote changes, if asked\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$base\"\n\tfi\n\n\t# Sanity checks\n\trequire_branch_absent \"$BRANCH\"\n\n\t# If the origin branch counterpart exists, assert that the local branch\n\t# isn't behind it (to avoid unnecessary rebasing)\n\tif git_remote_branch_exists \"$ORIGIN/$base\"; then\n\t\trequire_branches_equal \"$base\" \"$ORIGIN/$base\"\n\tfi\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\tgitflow_config_set_base_branch $base $BRANCH\n\n\t# create branch\n\tgit_do checkout -b \"$BRANCH\" \"$base\" || die \"Could not create feature branch '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new branch '$BRANCH' was created, based on '$base'\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo \"\"\n\techo \"Now, start committing on your feature. When done, use:\"\n\techo \"\"\n\techo \"     git flow feature finish $NAME\"\n\techo\n}\n\ncmd_finish() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature finish [-h] [-F] [-r] [-p] [-k] [-D] [-S] [--no-ff] <name|nameprefix>\n\nFinish feature <name>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\nF,[no]fetch            Fetch from origin before performing finish\nr,[no]rebase           Rebase before merging\np,[no]preserve-merges  Preserve merges while rebasing\n[no]push               Push to origin after performing finish\nk,[no]keep             Keep branch after performing finish\nkeepremote!        \t   Keep the remote branch\nkeeplocal!             Keep the local branch\nD,[no]force_delete     Force delete feature branch after finish\nS,[no]squash           Squash feature during merge\nno-ff!                 Never fast-forward during the merge\n\"\n\tlocal finish_base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\tDEFINE_boolean 'rebase' false \"rebase before merging\" r\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges while rebasing' p\n\tDEFINE_boolean 'push' false \"push to $ORIGIN after performing finish\"\n\tDEFINE_boolean 'keep' false \"keep branch after performing finish\" k\n\tDEFINE_boolean 'keepremote' false \"keep the remote branch\"\n\tDEFINE_boolean 'keeplocal' false \"keep the local branch\"\n\tDEFINE_boolean 'force_delete' false \"force delete feature branch after finish\" D\n\tDEFINE_boolean 'squash' false \"squash feature during merge\" S\n\tDEFINE_boolean 'squash-info' false \"add branch info during squash\"\n\tDEFINE_boolean 'no-ff!' false \"Don't fast-forward ever during merge \"\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"feature.finish.fetch\"             \"fetch\"\n\tgitflow_override_flag_boolean   \"feature.finish.rebase\"            \"rebase\"\n\tgitflow_override_flag_boolean   \"feature.finish.preserve-merges\"   \"preserve_merges\"\n\tgitflow_override_flag_boolean   \"feature.finish.push\"              \"push\"\n\tgitflow_override_flag_boolean   \"feature.finish.keep\"              \"keep\"\n\tgitflow_override_flag_boolean   \"feature.finish.keepremote\"        \"keepremote\"\n\tgitflow_override_flag_boolean   \"feature.finish.keeplocal\"         \"keeplocal\"\n\tgitflow_override_flag_boolean   \"feature.finish.force-delete\"      \"force_delete\"\n\tgitflow_override_flag_boolean   \"feature.finish.squash\"            \"squash\"\n\tgitflow_override_flag_boolean   \"feature.finish.squash-info\"       \"squash_info\"\n\tgitflow_override_flag_boolean   \"feature.finish.no-ff\"             \"no_ff\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\t# Keeping both branches implies the --keep flag to be true.\n\tif flag keepremote && flag keeplocal; then\n\t\tFLAGS_keep=$FLAGS_TRUE\n\tfi\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't finish the feature branch '$BRANCH'.\"\n\n\t# Detect if we're restoring from a merge conflict\n\tif [ -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\" ]; then\n\t\t#\n\t\t# TODO: detect that we're working on the correct branch here!\n\t\t# The user need not necessarily have given the same $NAME twice here\n\t\t# (although he/she should).\n\t\t#\n\n\t\t# TODO: git_is_clean_working_tree() should provide an alternative\n\t\t# exit code for \"unmerged changes in working tree\", which we should\n\t\t# actually be testing for here\n\t\tif git_is_clean_working_tree; then\n\t\t\tfinish_base=$(cat \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\")\n\n\t\t\t# Since the working tree is now clean, either the user did a\n\t\t\t# successful merge manually, or the merge was cancelled.\n\t\t\t# We detect this using git_is_branch_merged_into()\n\t\t\tif git_is_branch_merged_into \"$BRANCH\" \"$finish_base\"; then\n\t\t\t\trm -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\t\t\thelper_finish_cleanup\n\t\t\t\texit 0\n\t\t\telse\n\t\t\t\t# If the user cancelled the merge and decided to wait until\n\t\t\t\t# later,that's fine. But we have to acknowledge this by\n\t\t\t\t# removing the MERGE_BASE file and continuing normal execution\n\t\t\t\t# of the finish\n\t\t\t\trm -f \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\t\tfi\n\t\telse\n\t\t\techo\n\t\t\techo \"Merge conflicts not resolved yet, use:\"\n\t\t\techo \"    git mergetool\"\n\t\t\techo \"    git commit\"\n\t\t\techo\n\t\t\techo \"You can then complete the finish by running it again:\"\n\t\t\techo \"    git flow feature finish $NAME\"\n\t\t\techo\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\n\t# We always fetch the Branch from Origin\n\t# This is done to avoid possible commits on the remote that are not\n\t# merged into the local branch\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BRANCH\"\n\tfi\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BASE_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$BASE_BRANCH\"; then\n\t\trequire_branches_equal \"$BASE_BRANCH\" \"$ORIGIN/$BASE_BRANCH\"\n\tfi\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# If the user wants to rebase, do that first\n\tif flag rebase; then\n\t\tlocal _rebase_opts=\"\"\n\t\tif flag preserve_merges; then\n\t\t\t_rebase_opts=\"$_rebase_opts -p\"\n\t\tfi\n\t\tif flag showcommands; then\n\t\t\t_rebase_opts=\"$_rebase_opts --showcommands\"\n\t\tfi\n\t\tif ! git flow feature rebase $_rebase_opts \"$NAME\"; then\n\t\t\twarn \"Finish was aborted due to conflicts during rebase.\"\n\t\t\twarn \"Please finish the rebase manually now.\"\n\t\t\twarn \"When finished, re-run:\"\n\t\t\twarn \"    git flow feature finish '$NAME' '$BASE_BRANCH'\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# Merge into BASE\n\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\n\tif noflag squash; then\n\t\tif flag no_ff; then\n\t\t\tgit_do merge --no-ff \"$BRANCH\"\n\t\telse\n\t\t\tif [ \"$(git rev-list -n2 \"$BASE_BRANCH..$BRANCH\" | wc -l)\" -eq 1 ]; then\n\t\t\t\tgit_do merge --ff \"$BRANCH\"\n\t\t\telse\n\t\t\t\tgit_do merge --no-ff \"$BRANCH\"\n\t\t\tfi\n\t\tfi\n\telse\n\t\tgit_do merge --squash \"$BRANCH\"\n\t\tflag squash_info && gitflow_create_squash_message \"Merged feature branch '$BRANCH'\" \"$BASE_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\tgit_do commit\n\tfi\n\n\tif [ $? -ne 0 ]; then\n\t\t# Oops.. we have a merge conflict!\n\t\t# Write the given $BASE_BRANCH to a temporary file as we will\n\t\t# be needing it later.\n\t\tmkdir -p \"$DOT_GIT_DIR/.gitflow\"\n\t\techo \"$BASE_BRANCH\" > \"$DOT_GIT_DIR/.gitflow/MERGE_BASE\"\n\t\techo\n\t\techo \"There were merge conflicts. To resolve the merge conflict manually, use:\"\n\t\techo \"    git mergetool\"\n\t\techo \"    git commit\"\n\t\techo\n\t\techo \"You can then complete the finish by running it again:\"\n\t\techo \"    git flow feature finish $NAME\"\n\t\techo\n\t\texit 1\n\tfi\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# When no merge conflict is detected, just clean up the feature branch\n\tgitflow_config_remove_base_branch \"$BRANCH\"\n\thelper_finish_cleanup\n}\n\nhelper_finish_cleanup() {\n\tlocal keepmsg remotebranchdeleted localbranchdeleted\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\trequire_clean_working_tree\n\n\tremotebranchdeleted=$FLAGS_FALSE\n\tlocalbranchdeleted=$FLAGS_FALSE\n\n\tif flag push; then\n\t\tgit_do push \"$ORIGIN\" \"$BASE_BRANCH\" || die \"Could not push branch '$BASE_BRANCH' to remote '$ORIGIN'.\"\n\tfi\n\n\tif noflag keep; then\n\n\t\t# Always delete remote first\n\t\tif noflag keepremote;then\n\t\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\" && remotebranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# Delete local after remote to avoid warnings\n\t\tif noflag keeplocal; then\n\t\t\tif [ \"$BRANCH\" = \"$(git_current_branch)\" ]; then\n\t\t\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\t\tfi\n\t\t\tif flag force_delete; then\n\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\telse\n\t\t\t\tif noflag squash; then\n\t\t\t\t\tgit_do branch -d \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\telse\n\t\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\t\t# no more branches: we can safely remove config section\n\t\tif ! git_remote_branch_exists \"$ORIGIN/$BRANCH\" -a ! git_local_branch_exists \"$BRANCH\"; then\n\t\t\tgitflow_config_remove_base_section \"$BRANCH\"\n\t\tfi\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The feature branch '$BRANCH' was merged into '$BASE_BRANCH'\"\n\t#echo \"- Merge conflicts were resolved\"\t\t# TODO: Add this line when it's supported\n\tif noflag keep; then\n\t\tif [ $localbranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=\"has been locally deleted\"\n\t\telse\n\t\t\tkeepmsg=\"is still locally available\"\n\t\tfi\n\t\tif [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=$keepmsg\"; it has been remotely deleted from '$ORIGIN'\"\n\t\telif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\telse\n\t\tkeepmsg=\"is still locally available\"\n\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- Feature branch '$BRANCH' \"$keepmsg\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_publish() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature publish [-h] [<name>]\n\nPublish feature branch <name> on $ORIGIN.\nWhen <name> is omitted the current branch is used, but only if it's a feature branch.\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_branch \"$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\trequire_branch_absent \"$ORIGIN/$BRANCH\"\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Create remote branch with remote tracking\n\tgit_do push -u \"$ORIGIN\" \"$BRANCH:$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" \"$BRANCH\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_do checkout \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The remote branch '$BRANCH' was created or updated\"\n\techo \"- The local branch '$BRANCH' was configured to track the remote branch\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_track() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature track [-h] <name>\n\nStart tracking feature <name> that is shared on $ORIGIN\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_name_arg\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_local_branch_absent \"$BRANCH\"\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_remote_branch_exists \"$ORIGIN/$BRANCH\"\n\n\t# Create tracking branch\n\tgit_do checkout -b \"$BRANCH\" \"$ORIGIN/$BRANCH\" || die \"Could not create '$BRANCH'.\"\n\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new remote tracking branch '$BRANCH' was created\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_diff() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature diff [-h] [<name|nameprefix>]\n\nShow all changes in <name> that are not in the base\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tlocal base\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\tbase=$(gitflow_config_get_base_branch $BRANCH)\n\tbase=${base:-$DEVELOP_BRANCH}\n\n\tgit_do diff \"$base...$BRANCH\"\n}\n\ncmd_checkout() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature checkout [-h] [<name|nameprefix>]\n\nSwitch to feature branch <name>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tNAME=$(gitflow_resolve_nameprefix \"$NAME\" \"$PREFIX\")\n\tif [ $? -eq 0 ]; then\n\t\tBRANCH=$PREFIX$NAME\n\t\tgit_do checkout \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tfi\n}\n\ncmd_co() {\n\t# Alias for checkout\n\tcmd_checkout \"$@\"\n}\n\ncmd_rebase() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature rebase [-h] [-i] [-p] [<name|nameprefix>]\n\nRebase <name> on <base_branch>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\ni,[no]interactive      Do an interactive rebase\np,[no]preserve-merges  Preserve merges\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'interactive' false 'do an interactive rebase' i\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges' p\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"feature.rebase.interactive\"       \"interactive\"\n\tgitflow_override_flag_boolean   \"feature.rebase.preserve-merges\"   \"preserve_merges\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\twarn \"Will try to rebase '$NAME' which is based on '$BASE_BRANCH'...\"\n\tif ! git_config_bool_exists \"rebase.autostash\"; then\n\t\trequire_clean_working_tree\n\tfi\n\n\trequire_branch \"$BRANCH\"\n\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the feature branch '$BRANCH'.\"\n\n\tgit_do checkout -q \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tif flag interactive; then\n\t\topts=\"$opts -i\"\n\tfi\n\tif flag preserve_merges; then\n\t\topts=\"$opts -p\"\n\tfi\n\tgit_do rebase $opts \"$BASE_BRANCH\"\n}\n\navoid_accidental_cross_branch_action() {\n\tlocal current_branch\n\n\tcurrent_branch=$(git_current_branch)\n\tif [ \"$BRANCH\" != \"$current_branch\" ]; then\n\t\twarn \"Trying to pull from '$BRANCH' while currently on branch '$current_branch'.\"\n\t\twarn \"To avoid unintended merges, git-flow aborted.\"\n\t\treturn 1\n\tfi\n\treturn 0\n}\n\ncmd_pull() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature pull [-h] <remote> [<name>]\n\nPull feature <name> from <remote>\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'rebase' false \"pull with rebase\" r\n\n\twarn \"The command 'git flow feature pull' will be deprecated per version 2.0.0. Use 'git flow feature track' instead.\"\n\n\t# Parse arguments\n\tparse_remote_name \"$@\"\n\n\tif [ -z \"$REMOTE\" ]; then\n\t\tdie \"Name a remote explicitly.\"\n\tfi\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\t# To avoid accidentally merging different feature branches into each other,\n\t# die if the current feature branch differs from the requested $NAME\n\t# argument.\n\tcurrent_branch=$(git_current_branch)\n\tif startswith \"$current_branch\" \"$PREFIX\"; then\n\t\t# We are on a local feature branch already, so $BRANCH must be equal to\n\t\t# the current branch\n\t\tavoid_accidental_cross_branch_action || die\n\tfi\n\n\trequire_clean_working_tree\n\n\trun_pre_hook \"$NAME\" \"$REMOTE\" \"$BRANCH\"\n\n\tif git_local_branch_exists \"$BRANCH\"; then\n\t\t# Again, avoid accidental merges\n\t\tavoid_accidental_cross_branch_action || die\n\n\t\t# We already have a local branch called like this, so simply pull the\n\t\t# remote changes in\n\t\tif flag rebase; then\n\t\t\tif ! git_do pull --rebase -q \"$REMOTE\" \"$BRANCH\"; then\n\t\t\t\twarn \"Pull was aborted. There might be conflicts during rebase or '$REMOTE' might be inaccessible.\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\telse\n\t\t\tgit_do pull -q \"$REMOTE\" \"$BRANCH\" || die \"Failed to pull from remote '$REMOTE'.\"\n\t\tfi\n\n\t\techo \"Pulled $REMOTE's changes into $BRANCH.\"\n\telse\n\t\t# Setup the local branch clone for the first time\n\t\tgit_do fetch -q \"$REMOTE\" \"$BRANCH\" ||  die \"Could not fetch branch '$BRANCH' from remote '$REMOTE'.\"     # Stores in FETCH_HEAD\n\t\tgit_do branch --no-track \"$BRANCH\" FETCH_HEAD || die \"Branch failed.\"\n\t\tgit_do checkout -q \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\t\techo \"Created local branch $BRANCH based on $REMOTE's $BRANCH.\"\n\tfi\n\n\trun_post_hook \"$NAME\" \"$REMOTE\" \"$BRANCH\"\n}\n\ncmd_delete() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature delete [-h] [-f] [-r] <name>\n\nDelete a given feature branch\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\nf,[no]force      Force deletion\nr,[no]remote     Delete remote branch\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'force' false \"force deletion\" f\n\tDEFINE_boolean 'remote' false \"delete remote branch\" r\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"feature.delete.force\"    \"force\"\n\tgitflow_override_flag_boolean   \"feature.delete.remote\"   \"remote\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_name_arg\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tcurrent_branch=$(git_current_branch)\n\t# We can't delete a branch we are on, switch to the develop branch.\n\tif [ \"$BRANCH\" = \"$current_branch\" ]; then\n\t\trequire_clean_working_tree\n\t\tif git_local_branch_exists \"$BASE_BRANCH\"; then\n\t\t\tgit_do checkout \"$BASE_BRANCH\"\n\t\telse\n\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\t\tfi\n\tfi\n\n\tif git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\"; then\n\t\tgit_do branch -d \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\tif flag remote; then\n\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\tfi\n\telse\n\t\tif flag force; then\n\t\t\tgit_do branch -D \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\t\tif flag remote; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\t\tfi\n\t\telse\n\t\t\tdie \"Feature branch '$BRANCH' has been not been merged yet. Use -f to force the deletion.\"\n\t\tfi\n\tfi\n\n\tgitflow_config_remove_base_section \"$BRANCH\"\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- Feature branch '$BRANCH' has been deleted.\"\n\tflag remote && echo \"- Feature branch '$BRANCH' in '$ORIGIN' has been deleted.\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rename() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature rename <new_name> [<new_name>]\n\nRename a given feature branch\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tgitflow_rename_branch \"$@\"\n}\n"
        },
        {
          "name": "git-flow-hotfix",
          "type": "blob",
          "size": 23.701171875,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgit config --get gitflow.prefix.hotfix >/dev/null 2>&1 || die \"Hotfix prefix not set. Please run 'git flow init'.\"\n\tgitflow_load_settings\n\tVERSION_PREFIX=$(git config --get gitflow.prefix.versiontag)\n\tPREFIX=$(git config --get gitflow.prefix.hotfix)\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix [list]\ngit flow hotfix start\ngit flow hotfix finish\ngit flow hotfix publish\ngit flow hotfix delete\n\nManage your hotfix branches.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix [list] [-h] [-v]\n\nLists all local hotfix branches\n--\nh,help!           Show this help\nv,verbose!        Verbose (more) output\n\"\n\tlocal hotfix_branches current_branch width branch len\n\tlocal base master_sha branch_sha\n\n\t# Define flags\n\tDEFINE_boolean 'verbose' false 'verbose (more) output' v\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\thotfix_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tif [ -z \"$hotfix_branches\" ]; then\n\t\twarn \"No hotfix branches exist.\"\n\t\twarn \"\"\n\t\twarn \"You can start a new hotfix branch:\"\n\t\twarn \"\"\n\t\twarn \"    git flow hotfix start <version> [<base>]\"\n\t\twarn \"\"\n\t\texit 0\n\tfi\n\tcurrent_branch=$(git_current_branch)\n\n\t# Determine column width first\n\twidth=0\n\tfor branch in $hotfix_branches; do\n\t\tlen=${#branch}\n\t\twidth=$(max $width $len)\n\tdone\n\twidth=$(($width+3-${#PREFIX}))\n\n\tfor branch in $hotfix_branches; do\n\t\tbase=$(git merge-base \"$branch\" \"$MASTER_BRANCH\")\n\t\tmaster_sha=$(git rev-parse \"$MASTER_BRANCH\")\n\t\tbranch_sha=$(git rev-parse \"$branch\")\n\t\tif [ \"$branch\" = \"$current_branch\" ]; then\n\t\t\tprintf \"* \"\n\t\telse\n\t\t\tprintf \"  \"\n\t\tfi\n\t\tif flag verbose; then\n\t\t\tprintf \"%-${width}s\" \"${branch#$PREFIX}\"\n\t\t\tif [ \"$branch_sha\" = \"$master_sha\" ]; then\n\t\t\t\tprintf \"(no commits yet)\"\n\t\t\telse\n\t\t\t\tlocal tagname=$(git name-rev --tags --no-undefined --name-only \"$base\")\n\t\t\t\tlocal nicename\n\t\t\t\tif [ \"$tagname\" != \"\" ]; then\n\t\t\t\t\tnicename=$tagname\n\t\t\t\telse\n\t\t\t\t\tnicename=$(git rev-parse --short \"$base\")\n\t\t\t\tfi\n\t\t\t\tprintf \"(based on $nicename)\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"%s\" \"${branch#$PREFIX}\"\n\t\tfi\n\t\techo\n\tdone\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# Read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tVERSION=''\n\telse\n\t\tVERSION=$1\n\tfi\n\tBRANCH=$PREFIX$VERSION\n}\n\nrequire_no_existing_hotfix_branches() {\n\tlocal hotfix_branches first_branch\n\n\thotfix_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tfirst_branch=$(echo ${hotfix_branches} | head -n1)\n\n\tfirst_branch=${first_branch#$PREFIX}\n\t[ -z \"$hotfix_branches\" ] || die \"There is an existing hotfix branch '$first_branch'. Finish that one first.\"\n}\n\ncmd_start() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix start [-h] [-F] <version> [<base>]\n\nStart new hotfix branch named <version>, optionally base it on <base> instead of the <master> branch\n--\nh,help!           Show this help\nshowcommands!     Show git commands while executing them\nF,[no]fetch       Fetch from origin before performing local operation\n\"\n\tlocal base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"hotfix.start.fetch\"   \"fetch\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\teval set -- \"${FLAGS_ARGV}\"\n\tbase=${2:-$MASTER_BRANCH}\n\n\t# No need to continue if not clean\n\trequire_base_is_local_branch \"$base\"\n\tgit_config_bool_exists \"gitflow.allowdirty\" || require_clean_working_tree\n\n\t# Update the local repo with remote changes, if asked\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$base\"\n\tfi\n\n\t# Run filter on the version\n\tVERSION=$(run_filter_hook hotfix-start-version $VERSION)\n\tif [ $? -eq 127 ]; then\n\t\tdie $VERSION\n\tfi\n\n\t# As VERSION might have changed reset BRANCH with new VERSION\n\tBRANCH=$PREFIX$VERSION\n\n\tgitflow_require_version_arg\n\tif ! $(git config --bool --get gitflow.multi-hotfix 2>&1); then\n\t\trequire_no_existing_hotfix_branches\n\tfi\n\n\t# Sanity checks\n\trequire_branch_absent \"$BRANCH\"\n\trequire_tag_absent \"$VERSION_PREFIX$VERSION\"\n\tif git_remote_branch_exists \"$ORIGIN/$base\"; then\n\t\trequire_branches_equal \"$base\" \"$ORIGIN/$base\"\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\tgitflow_config_set_base_branch $base $BRANCH\n\n\t# Create branch\n\tgit_do checkout -b \"$BRANCH\" \"$base\"  || die \"Could not create hotfix branch '$BRANCH'.\"\n\n\trun_post_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new branch '$BRANCH' was created, based on '$base'\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n\techo \"Follow-up actions:\"\n\techo \"- Start committing your hot fixes\"\n\techo \"- Bump the version number now!\"\n\techo \"- When done, run:\"\n\techo\n\techo \"     git flow hotfix finish '$VERSION'\"\n\techo\n}\n\ncmd_publish() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix publish [-h] <version>\n\nStart sharing hotfix <name> on $ORIGIN\n--\nh,help!           Show this help\nshowcommands!     Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_branch \"$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\trequire_branch_absent \"$ORIGIN/$BRANCH\"\n\n\trun_pre_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Create remote branch with remote tracking\n\tgit_do push -u \"$ORIGIN\" \"$BRANCH:$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" \"$BRANCH\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_do checkout \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\n\trun_post_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The remote branch '$BRANCH' was created or updated\"\n\techo \"- The local branch '$BRANCH' was configured to track the remote branch\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rebase() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix rebase [-h] [-i] [-p] [<name|nameprefix>]\n\nRebase <name> on <base_branch>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\ni,[no]interactive      Do an interactive rebase\np,[no]preserve-merges  Preserve merges\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'interactive' false 'do an interactive rebase' i\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges' p\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"hotfix.rebase.interactive\"       \"interactive\"\n\tgitflow_override_flag_boolean   \"hotfix.rebase.preserve-merges\"   \"preserve_merges\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\twarn \"Will try to rebase '$NAME' which is based on '$BASE_BRANCH'...\"\n\tif ! git_config_bool_exists \"rebase.autostash\"; then\n\t\trequire_clean_working_tree\n\tfi\n\trequire_branch \"$BRANCH\"\n\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the hotfixe branch '$BRANCH'.\"\n\n\tgit_do checkout -q \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tif flag interactive; then\n\t\topts=\"$opts -i\"\n\tfi\n\tif flag preserve_merges; then\n\t\topts=\"$opts -p\"\n\tfi\n\tgit_do rebase $opts \"$BASE_BRANCH\"\n}\n\ncmd_track() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix track [-h] <version>\n\nCreate a tracking hotfix branch from $ORIGIN\n--\nh,help!           Show this help\nshowcommands!     Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_version_arg\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_branch_absent \"$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\"\n\trequire_branch \"$ORIGIN/$BRANCH\"\n\n\t# Create tracking branch\n\tgit_do checkout -b \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new remote tracking branch '$BRANCH' was created\"\n\techo \"- You are now on branch '$BRANCH'\"\n\techo\n}\n\ncmd_finish() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix finish [-h] [-F] [-s] [-u] [-m | -f ] [-p] [-k] [-n] [-b] [-S] <version>\n\nFinish hotfix branch <version>\n--\nh,help!               Show this help\nshowcommands!         Show git commands while executing them\nF,[no]fetch           Fetch from origin before performing finish\ns,[no]sign            Sign the release tag cryptographically\nu,[no]signingkey      Use the given GPG-key for the digital signature (implies -s)\nm,[no]message         Use the given tag message\nf,[no]messagefile=    Use the contents of the given file as tag message\np,[no]push            Push to origin after performing finish\nk,[no]keep            Keep branch after performing finish\n[no]keepremote        Keep the remote branch\n[no]keeplocal         Keep the local branch\nD,[no]force_delete    Force delete hotfix branch after finish\nn,[no]notag           Don't tag this hotfix\nb,[no]nobackmerge     Don't back-merge master, or tag if applicable, in develop\nS,[no]squash          Squash hotfix during merge\nT,tagname!            Use given tag name\n\"\n\tlocal opts commit keepmsg remotebranchdeleted localbranchdeleted\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\tDEFINE_boolean 'sign' false \"sign the release tag cryptographically\" s\n\tDEFINE_string  'signingkey' \"\" \"use the given GPG-key for the digital signature (implies -s)\" u\n\tDEFINE_string  'message' \"\" \"use the given tag message\" m\n\tDEFINE_string  'messagefile' \"\" \"use the contents of the given file as tag message\" f\n\tDEFINE_boolean 'push' false \"push to $ORIGIN after performing finish\" p\n\tDEFINE_boolean 'keep' false \"keep branch after performing finish\" k\n\tDEFINE_boolean 'keepremote' false \"keep the remote branch\"\n\tDEFINE_boolean 'keeplocal' false \"keep the local branch\"\n\tDEFINE_boolean 'force_delete' false \"force delete hotfix branch after finish\" D\n\tDEFINE_boolean 'notag' false \"don't tag this hotfix\" n\n\tDEFINE_boolean 'nobackmerge' false \"don't back-merge $MASTER_BRANCH, or tag if applicable, in $DEVELOP_BRANCH \" b\n\tDEFINE_boolean 'squash' false \"squash release during merge\" S\n\tDEFINE_boolean 'squash-info' false \"add branch info during squash\"\n\tDEFINE_string  'tagname' \"\" \"use the given tag name\" T\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"hotfix.finish.fetch\"          \"fetch\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.sign\"           \"sign\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.push\"           \"push\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.keep\"           \"keep\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.keepremote\"     \"keepremote\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.keeplocal\"      \"keeplocal\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.force-delete\"   \"force_delete\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.notag\"          \"notag\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.nobackmerge\"    \"nobackmerge\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.squash\"         \"squash\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.squash-info\"    \"squash_info\"\n\tgitflow_override_flag_string    \"hotfix.finish.signingkey\"     \"signingkey\"\n\tgitflow_override_flag_string    \"hotfix.finish.message\"        \"message\"\n\tgitflow_override_flag_string    \"hotfix.finish.messagefile\"    \"messagefile\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\t# Use branch name if no tag name is given\n\tif [ \"$FLAGS_tagname\" != \"\" ]; then\n\t\tTAGNAME=$FLAGS_tagname\n\telse\n\t\tTAGNAME=$VERSION\n\tfi\n\n\tremotebranchdeleted=$FLAGS_FALSE\n\tlocalbranchdeleted=$FLAGS_FALSE\n\n\t# Handle flags that imply other flags\n\tif [ \"$FLAGS_signingkey\" != \"\" ]; then\n\t\tFLAGS_sign=$FLAGS_TRUE\n\tfi\n\n\t# Keeping both branches implies the --keep flag to be true.\n\tif flag keepremote && flag keeplocal; then\n\t\tFLAGS_keep=$FLAGS_TRUE\n\tfi\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\trequire_clean_working_tree\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$MASTER_BRANCH}\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't finish the hotfix branch '$BRANCH'.\"\n\n\t# We always fetch the Branch from Origin\n\t# This is done to avoid possible commits on the remote that are not\n\t# merged into the local branch\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BRANCH\"\n\tfi\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BASE_BRANCH\"\n\t\t[ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ] && git_fetch_branch \"$ORIGIN\" \"$DEVELOP_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$BASE_BRANCH\"; then\n\t\trequire_branches_equal \"$BASE_BRANCH\" \"$ORIGIN/$BASE_BRANCH\"\n\tfi\n\tif [ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\tif git_remote_branch_exists \"$ORIGIN/$DEVELOP_BRANCH\"; then\n\t\t\trequire_branches_equal \"$DEVELOP_BRANCH\" \"$ORIGIN/$DEVELOP_BRANCH\"\n\t\tfi\n\tfi\n\n\t# If the branch is already merged there is no need to check the hotfix branch\n\t# This can happen when the merge in develop fails and we rerun the finish.\n\tif ! git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\"; then\n\t\t# Check if the hotfix branch:\n\t\t# - has commits: No reason to finish a hotfix without commits\n\t\t# - Is ahead of the BASE: If it's not a good idea to merge\n\t\t# - Can be merged: If there's no common ancestor we can't merge the hotfix\n\t\tgit_compare_refs \"$BRANCH\" \"$BASE_BRANCH\"\n\t\tcase $? in\n\t\t0)\n\t\t\tdie \"You need some commits in the hotfix branch '$BRANCH'\"\n\t\t\t;;\n\t\t1)\n\t\t\tdie \"The hotfix branch '$BRANCH' is not ahead of branch '$BASE_BRANCH'\"\n\t\t\t;;\n\t\t4)\n\t\t\tdie \"The hotfix branch '$BRANCH' has no common ancestor with branch '$BASE_BRANCH'\"\n\t\t\t;;\n\t\t*)\n\t\t\t;;\n\t\tesac\n\tfi\n\n\tif noflag notag; then\n\t\t# We ask for a tag, be sure it does not exists or\n\t\t# points to the latest hotfix commit\n\t\tif git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tgit_compare_refs  \"$BRANCH\" \"$VERSION_PREFIX$TAGNAME\"^2 2>/dev/null\n\t\t\t[ $? -eq 0 ] || die \"Tag already exists and does not point to hotfix branch '$BRANCH'\"\n\t\tfi\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Try to merge into BASE.\n\t# In case a previous attempt to finish this release branch has failed,\n\t# but the merge into BASE was successful, we skip it now\n\tif ! git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\"; then\n\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\tif noflag squash; then\n\t\t\tgit_do merge --no-ff \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\telse\n\t\t\tgit_do merge --squash \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\tflag squash_info && gitflow_create_squash_message \"Merged hotfix branch '$BRANCH'\" \"$BASE_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\t\tgit_do commit\n\t\tfi\n\tfi\n\n\tif noflag notag; then\n\t\t# Try to tag the release.\n\t\t# In case a previous attempt to finish this release branch has failed,\n\t\t# but the tag was set successful, we skip it now\n\t\tif ! git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tif [ \"$FLAGS_message\" != \"\" ] && [ \"$FLAGS_messagefile\" != \"\" ]; then\n\t\t\t\tdie \"Use either -m,--message or -f,--messagefile. Can not use both options at the same time\"\n\t\t\tfi\n\t\t\topts=\"-a\"\n\t\t\tflag sign && opts=\"$opts -s\"\n\t\t\t[ \"$FLAGS_signingkey\" != \"\" ] && opts=\"$opts -u '$FLAGS_signingkey'\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ]; then\n\t\t\t\t# Run filter on the tag message\n\t\t\t\tFLAGS_message=$(run_filter_hook hotfix-finish-tag-message \"${FLAGS_message}\" \"$VERSION_PREFIX$TAGNAME\")\n\t\t\t\topts=\"$opts -m '$FLAGS_message'\"\n\t\t\tfi\n\t\t\t[ \"$FLAGS_messagefile\" != \"\" ] && opts=\"$opts -F '$FLAGS_messagefile'\"\n\t\t\teval git_do tag $opts \"$VERSION_PREFIX$TAGNAME\" || die \"Tagging failed. Please run finish again to retry.\"\n\t\tfi\n\tfi\n\n\tif [ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\t# By default we back-merge the $MASTER_BRANCH unless the user explicitly\n\t\t# stated not to do a back-merge, in that case we use the $BRANCH.\n\t\tif noflag nobackmerge; then\n\t\t\tMERGE_BRANCH=\"$BASE_BRANCH\"\n\t\telse\n\t\t\tMERGE_BRANCH=\"$BRANCH\"\n\t\tfi\n\n\t\t# Try to merge into develop.\n\t\t# In case a previous attempt to finish this release branch has failed,\n\t\t# but the merge into develop was successful, we skip it now\n\t\tif ! git_is_branch_merged_into \"$MERGE_BRANCH\" \"$DEVELOP_BRANCH\"; then\n\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\n\t\t\tif noflag nobackmerge; then\n\t\t\t\t# Accounting for 'git describe', if a release is tagged\n\t\t\t\t# we use the tag commit instead of the branch.\n\t\t\t\tif noflag notag; then\n\t\t\t\t\tcommit=\"$VERSION_PREFIX$TAGNAME\"\n\t\t\t\telse\n\t\t\t\t\tcommit=\"$BASE_BRANCH\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\tcommit=\"$BRANCH\"\n\t\t\tfi\n\n\t\t\tgit_do merge --no-ff \"$commit\" || die \"There were merge conflicts.\"\n\t\t\t# TODO: What do we do now?\n\t\tfi\n\tfi\n\n\trun_post_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tif flag push; then\n\t\tif [ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\t\tgit_do push \"$ORIGIN\" \"$DEVELOP_BRANCH\" || die \"Could not push branch '$DEVELOP_BRANCH' to remote '$ORIGIN'.\"\n\t\tfi\n\t\tgit_do push \"$ORIGIN\" \"$BASE_BRANCH\" || die \"Could not push branch '$BASE_BRANCH' to remote '$ORIGIN'.\"\n\t\tif noflag notag; then\n\t\t\tgit_do push --tags \"$ORIGIN\" || die \"Could not push tags to remote '$ORIGIN'.\"\n\t\tfi\n\tfi\n\n\t# Delete branch\n\tif noflag keep; then\n\n\t\t# Always delete remote first\n\t\tif noflag keepremote;then\n\t\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\" && remotebranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# Delete local after remote to avoid warnings\n\t\tif noflag keeplocal; then\n\t\t\tif [ \"$BRANCH\" = \"$(git_current_branch)\" ]; then\n\t\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\t\t\tfi\n\t\t\tif flag force_delete; then\n\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\telse\n\t\t\t\tgit_do branch -d \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# no more branches: we can safely remove config section\n\t\tif ! git_remote_branch_exists \"$ORIGIN/$BRANCH\" -a ! git_local_branch_exists \"$BRANCH\"; then\n\t\t\tgitflow_config_remove_base_section \"$BRANCH\"\n\t\tfi\n\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\tif flag fetch; then\n\t\techo \"- Latest objects have been fetched from '$ORIGIN'\"\n\tfi\n\techo \"- Hotfix branch '$BRANCH' has been merged into '$BASE_BRANCH'\"\n\tif noflag notag; then\n\t\techo \"- The hotfix was tagged '$VERSION_PREFIX$TAGNAME'\"\n\tfi\n\tif [ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\t[ \"$commit\" = \"$BASE_BRANCH\" ] && echo \"- Master branch '$BASE_BRANCH' has been back-merged into '$DEVELOP_BRANCH'\"\n\t\t[ \"$commit\" = \"$VERSION_PREFIX$TAGNAME\" ] && echo \"- Hotfix tag '$VERSION_PREFIX$TAGNAME' has been back-merged into '$DEVELOP_BRANCH'\"\n\t\t[ \"$commit\" = \"$BRANCH\" ] && echo \"- Hotfix branch '$BRANCH' has been merged into '$DEVELOP_BRANCH'\"\n\tfi\n\tif noflag keep; then\n\t\tif [ $localbranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=\"has been locally deleted\"\n\t\telse\n\t\t\tkeepmsg=\"is still locally available\"\n\t\tfi\n\t\tif [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=$keepmsg\"; it has been remotely deleted from '$ORIGIN'\"\n\t\telif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\telse\n\t\tkeepmsg=\"is still locally available\"\n\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- Hotfix branch '$BRANCH' \"$keepmsg\n\tif flag push; then\n\t\tif [ \"$BASE_BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\t\techo \"- '$DEVELOP_BRANCH', '$BASE_BRANCH' and tags have been pushed to '$ORIGIN'\"\n\t\telse\n\t\t\techo \"- '$BASE_BRANCH' and tags have been pushed to '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n\n}\n\ncmd_delete() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix delete [-h] [-f] [-r] <name>\n\nDelete the given hotfix branch\n--\nh,help!               Show this help\nshowcommands!         Show git commands while executing them\nf,[no]force           Force deletion\nr,[no]remote          Delete remote branch\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'force' false \"force deletion\" f\n\tDEFINE_boolean 'remote' false \"delete remote branch\" r\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"hotfix.delete.force\"    \"force\"\n\tgitflow_override_flag_boolean   \"hotfix.finish.remote\"   \"remote\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_version_arg\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\trun_pre_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\tcurrent_branch=$(git_current_branch)\n\t# We can't delete a branch we are on, switch to the master branch.\n\tif [ \"$BRANCH\" = \"$current_branch\" ]; then\n\t\trequire_clean_working_tree\n\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\tfi\n\n\tif ( git_is_branch_merged_into \"$BRANCH\" \"$MASTER_BRANCH\" && git_is_branch_merged_into \"$BRANCH\" \"$DEVELOP_BRANCH\" ); then\n\t\tgit_do branch -d \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\tif flag remote; then\n\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\tfi\n\telse\n\t\tif flag force; then\n\t\t\tgit_do branch -D \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\t\tif flag remote; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\t\tfi\n\t\telse\n\t\t\tdie \"Hotfix branch '$BRANCH' has been not been merged in branch '$MASTER_BRANCH' and/or branch '$DEVELOP_BRANCH'. Use -f to force the deletion.\"\n\t\tfi\n\tfi\n\n\tgitflow_config_remove_base_section \"$BRANCH\"\n\trun_post_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- Hotfix branch '$BRANCH' has been deleted.\"\n\tflag remote && echo \"- Hotfix branch '$BRANCH' in '$ORIGIN' has been deleted.\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rename() {\n\tOPTIONS_SPEC=\"\\\ngit flow hotfix rename <new_name> [<new_name>]\n\nRename a given hotfix branch\n--\nh,help!          Show this help\nshowcommands!    Show git commands while executing them\n\"\n\tgitflow_rename_branch \"$@\"\n}\n"
        },
        {
          "name": "git-flow-init",
          "type": "blob",
          "size": 15.1328125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow init\n\nInitialize a new git repo with support for the branching model.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n}\n\n# Default entry when no SUBACTION is given\ncmd_default() {\n\tOPTIONS_SPEC=\"\\\ngit flow init [-h] [-d] [-f]\n\nSetup a git repository for git flow usage. Can also be used to start a git repository.\n--\nh,help!             Show this help\nshowcommands!       Show git commands while executing them\nd,[no]defaults      Use default branch naming conventions\nf,[no]force         Force setting of gitflow branches, even if already configured\n\np,feature!          Feature branches\nb,bugfix!           Bugfix branches\nr,release!          Release branches\nx,hotfix!           Hotfix branches\ns,support!          Support branches\nt,tag!              Version tag prefix\n\nUse config file location\nlocal!   use repository config file\nglobal!  use global config file\nsystem!  use system config file\nfile=    use given config file\n\"\n\tlocal gitflow_config_option should_check_existence branchcount guess\n\tlocal master_branch develop_branch default_suggestion answer prefix\n\n\t# Define flags\n\tDEFINE_boolean 'force' false 'force setting of gitflow branches, even if already configured' f\n\tDEFINE_boolean 'defaults' false 'use default branch naming conventions' d\n\tDEFINE_boolean 'local' false 'use repository config file'\n\tDEFINE_boolean 'global' false 'use global config file'\n\tDEFINE_boolean 'system' false 'use system config file'\n\tDEFINE_string 'file' \"\" 'use given config file'\n\tDEFINE_string 'feature' \"\" 'feature branches' p\n\tDEFINE_string 'bugfix' \"\" 'bugfix branches' b\n\tDEFINE_string 'release' \"\" 'release branches' r\n\tDEFINE_string 'hotfix' \"\" 'hotfix branches' x\n\tDEFINE_string 'support' \"\" 'support branches' s\n\tDEFINE_string 'tag' \"\" 'version tag prefix' t\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"init.defaults\"   \"defaults\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tif [ \"$FLAGS_file\" != \"\" ]; then\n\t\tgitflow_config_option=\"--file $FLAGS_file\"\n\telif flag local; then\n\t\tgitflow_config_option=\"--local\"\n\telif flag global; then\n\t\tgitflow_config_option=\"--global\"\n\telif flag system; then\n\t\tgitflow_config_option=\"--system\"\n\telse\n\t\tgitflow_config_option=\"\"\n\tfi\n\n\tif git_config_bool_exists \"user.useconfigonly\"; then\n\t\tuser_email=$(git config --get user.email)\n\t\tuser_name=$(git config --get user.name)\n\t\tif [ -z \"${user_email}\" ] || [ -z \"${user_name}\" ]; then\n\t\t\tdie \"Configuration useconfigonly is set but no name and/or email was set\"\n\t\tfi\n\tfi\n\n\tif ! git rev-parse --git-dir >/dev/null 2>&1; then\n\t\tgit_do init\n\telse\n\t\t# Assure that we are not working in a repo with local changes\n\t\tgit_repo_is_headless || require_clean_working_tree\n\tfi\n\n\t# Running git flow init on an already initialized repo is fine\n\tif gitflow_is_initialized && ! flag force; then\n\t\twarn \"Already initialized for gitflow.\"\n\t\twarn \"To force reinitialization, use: git flow init -f\"\n\t\texit 0\n\tfi\n\n\tif flag defaults; then\n\t\twarn \"Using default branch names.\"\n\tfi\n\n\t# Add a master branch if no such branch exists yet\n\n\tif gitflow_has_master_configured && ! flag force; then\n\t\tmaster_branch=$(git config --get gitflow.branch.master)\n\telse\n\t\t# Two cases are distinguished:\n\t\t# 1. A fresh git repo (without any branches)\n\t\t#    We will create a new master/develop branch for the user\n\t\t# 2. Some branches do already exist\n\t\t#    We will disallow creation of new master/develop branches and\n\t\t#    rather allow to use existing branches for git-flow.\n\t\tbranch_count=$(git_local_branches | wc -l)\n\t\tif [ \"$branch_count\" -eq 0 ]; then\n\t\t\techo \"No branches exist yet. Base branches must be created now.\"\n\t\t\tshould_check_existence=NO\n\t\t\tdefault_suggestion=$(git config --get gitflow.branch.master || echo master)\n\t\telse\n\t\t\techo\n\t\t\techo \"Which branch should be used for bringing forth production releases?\"\n\t\t\tgit_local_branches | sed 's/^.*$/   - &/g'\n\n\t\t\tshould_check_existence=YES\n\t\t\tdefault_suggestion=\n\t\t\tfor guess in $(git config --get gitflow.branch.master) 'production' 'main' 'master'; do\n\t\t\t\tif git_local_branch_exists \"$guess\"; then\n\t\t\t\t\tdefault_suggestion=\"$guess\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\n\t\tfi\n\n\t\tif [ -z $default_suggestion ] && flag defaults; then\n\t\t\t\tshould_check_existence=YES\n\t\t\t\tdefault_suggestion=$(git config --get gitflow.branch.master || echo master)\n\t\tfi\n\n\t\tprintf \"Branch name for production releases: [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\tmaster_branch=${answer:-$default_suggestion}\n\n\t\t# Check existence in case of an already existing repo\n\t\tif [ \"$should_check_existence\" = \"YES\" ]; then\n\t\t\t# If no local branch exists and a remote branch of the same\n\t\t\t# name exists, checkout that branch and use it for master\n\t\t\tif ! git_local_branch_exists \"$master_branch\" && git_remote_branch_exists \"origin/$master_branch\"; then\n\t\t\t\tgit_do branch \"$master_branch\" \"origin/$master_branch\" >/dev/null 2>&1\n\t\t\telif ! git_local_branch_exists \"$master_branch\"; then\n\t\t\t\tdie \"Local branch '$master_branch' does not exist.\"\n\t\t\tfi\n\t\tfi\n\n\t\t# Store the name of the master branch\n\t\tgit_do config $gitflow_config_option gitflow.branch.master \"$master_branch\"\n\tfi\n\n\t# Add a develop branch if no such branch exists yet\n\tif gitflow_has_develop_configured && ! flag force; then\n\t\tdevelop_branch=$(git config --get gitflow.branch.develop)\n\telse\n\t\t# Again, the same two cases as with the master selection are\n\t\t# considered (fresh repo or repo that contains branches)\n\t\tbranch_count=$(git_local_branches | grep -v \"^${master_branch}\\$\" | wc -l)\n\t\tif [ \"$branch_count\" -eq 0 ]; then\n\t\t\tshould_check_existence=NO\n\t\t\tdefault_suggestion=$(git config --get gitflow.branch.develop || echo develop)\n\t\telse\n\t\t\techo\n\t\t\techo \"Which branch should be used for integration of the \\\"next release\\\"?\"\n\t\t\tgit_local_branches | grep -v \"^${master_branch}\\$\" | sed 's/^.*$/   - &/g'\n\n\t\t\tshould_check_existence=YES\n\t\t\tdefault_suggestion=\n\t\t\tfor guess in $(git config --get gitflow.branch.develop) 'develop' 'int' 'integration' 'master'; do\n\t\t\t\tif git_local_branch_exists \"$guess\" && [ \"$guess\" != \"$master_branch\" ]; then\n\t\t\t\t\tdefault_suggestion=\"$guess\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\n\t\tif [ -z $default_suggestion ] && flag defaults; then\n\t\t\tshould_check_existence=YES\n\t\t\tdefault_suggestion=$(git config --get gitflow.branch.develop || echo develop)\n\t\tfi\n\n\t\tprintf \"Branch name for \\\"next release\\\" development: [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\tdevelop_branch=${answer:-$default_suggestion}\n\n\t\tif [ \"$master_branch\" = \"$develop_branch\" ]; then\n\t\t\tdie \"Production and integration branches should differ.\"\n\t\tfi\n\n\t\t# Check existence in case of an already existing repo\n\t\tif [ \"$should_check_existence\" = \"YES\" ]; then\n\t\t\tgit_local_branch_exists \"$develop_branch\" || die \"Local branch '$develop_branch' does not exist.\"\n\t\tfi\n\n\t\t# Store the name of the develop branch\n\t\tgit_do config $gitflow_config_option gitflow.branch.develop \"$develop_branch\"\n\tfi\n\n\t# Creation of HEAD\n\t# ----------------\n\t# We create a HEAD now, if it does not exist yet (in a fresh repo). We need\n\t# it to be able to create new branches.\n\tlocal created_gitflow_branch=0\n\tif ! git rev-parse --quiet --verify HEAD >/dev/null 2>&1; then\n\t\tgit_do symbolic-ref HEAD \"refs/heads/$master_branch\"\n\t\tgit_do commit --allow-empty --quiet -m \"Initial commit\"\n\t\tcreated_gitflow_branch=1\n\tfi\n\n\t# Creation of master\n\t# ------------------\n\t# At this point, there always is a master branch: either it existed already\n\t# (and was picked interactively as the production branch) or it has just\n\t# been created in a fresh repo\n\n\t# Creation of develop\n\t# -------------------\n\t# The develop branch possibly does not exist yet.  This is the case when,\n\t# in a git init'ed repo with one or more commits, master was picked as the\n\t# default production branch and develop was \"created\".  We should create\n\t# the develop branch now in that case (we base it on master, of course)\n\tif ! git_local_branch_exists \"$develop_branch\"; then\n\t\tif git_remote_branch_exists \"origin/$develop_branch\"; then\n\t\t\tgit_do branch \"$develop_branch\" \"origin/$develop_branch\" >/dev/null 2>&1\n\t\telse\n\t\t\tgit_do branch --no-track \"$develop_branch\" \"$master_branch\"\n\t\tfi\n\t\tcreated_gitflow_branch=1\n\tfi\n\n\t# Assert the git-flow repo has been correctly initialized\n\tgitflow_is_initialized\n\n\t# Switch to develop branch if its newly created\n\tif [ $created_gitflow_branch -eq 1 ]; then\n\t\tgit_do checkout -q \"$develop_branch\" || die \"Could not check out branch '$develop_branch'.\"\n\tfi\n\n\t# Ask the user for naming conventions (branch and tag prefixes )\n\tif flag force || \\\n\t\t! git config --get gitflow.prefix.feature >/dev/null 2>&1 ||\n\t\t! git config --get gitflow.prefix.bugfix >/dev/null 2>&1 ||\n\t\t! git config --get gitflow.prefix.release >/dev/null 2>&1 ||\n\t\t! git config --get gitflow.prefix.hotfix >/dev/null 2>&1 ||\n\t\t! git config --get gitflow.prefix.support >/dev/null 2>&1 ||\n\t\t! git config --get gitflow.prefix.versiontag >/dev/null 2>&1; then\n\t\techo\n\t\techo \"How to name your supporting branch prefixes?\"\n\tfi\n\n\t# Feature branches\n\tif ! git config --get gitflow.prefix.feature >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_feature\" != \"\" ]; then\n\t        default_suggestion=$(echo $FLAGS_feature)\n        else\n\t    \tdefault_suggestion=$(git config --get --system gitflow.prefix.feature || git config --get --global gitflow.prefix.feature || echo feature/)\n        fi\n\t\tprintf \"Feature branches? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.feature \"$prefix\"\n\tfi\n\n\t# Bugfix branches\n\tif ! git config --get gitflow.prefix.bugfix >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_bugfix\" != \"\" ]; then\n\t        default_suggestion=$(echo $FLAGS_bugfix)\n        else\n\t\t    default_suggestion=$(git config --get --system gitflow.prefix.bugfix || git config --get --global gitflow.prefix.bugfix || echo bugfix/)\n        fi\n\t\tprintf \"Bugfix branches? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.bugfix \"$prefix\"\n\tfi\n\n\t# Release branches\n\tif ! git config --get gitflow.prefix.release >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_release\" != \"\" ]; then\n\t        default_suggestion=$(echo $FLAGS_release)\n        else\n\t\t    default_suggestion=$(git config --get --system gitflow.prefix.release || git config --get --global gitflow.prefix.release || echo release/)\n        fi\n\t\tprintf \"Release branches? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.release \"$prefix\"\n\tfi\n\n\t# Hotfix branches\n\tif ! git config --get gitflow.prefix.hotfix >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_hotfix\" != \"\" ]; then\n\t        default_suggestion=$(echo $FLAGS_hotfix)\n        else\n\t\t    default_suggestion=$(git config --get --system gitflow.prefix.hotfix || git config --get --global gitflow.prefix.hotfix || echo hotfix/)\n        fi\n\t\tprintf \"Hotfix branches? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.hotfix \"$prefix\"\n\tfi\n\n\t# Support branches\n\tif ! git config --get gitflow.prefix.support >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_support\" != \"\" ]; then\n\t        default_suggestion=$(echo $FLAGS_support)\n        else\n\t\t    default_suggestion=$(git config --get --system gitflow.prefix.support || git config --get --global gitflow.prefix.support || echo support/)\n        fi\n\t\tprintf \"Support branches? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.support \"$prefix\"\n\tfi\n\t\n\t# Version tag prefix\n\tif ! git config --get gitflow.prefix.versiontag >/dev/null 2>&1 || flag force; then\n\t    if [ \"$FLAGS_tag\" != \"\" ]; then\n\t\t    default_suggestion=$(echo $FLAGS_tag)\n        else\n            default_suggestion=$(git config --get --system gitflow.prefix.versiontag || git config --get --global gitflow.prefix.versiontag || echo \"\")\n        fi\n\t\tprintf \"Version tag prefix? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && prefix= || prefix=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.prefix.versiontag \"$prefix\"\n\tfi\n\n\t# Paths\n\tif ! git config --get gitflow.path.hooks >/dev/null 2>&1 || flag force; then\n\t\tDOT_GIT_DIR=$(git rev-parse --git-dir)\n\t\tDOT_GIT_DIR=$(cd \"$DOT_GIT_DIR\" >/dev/null 2>&1 && pwd)\n\t\tdefault_suggestion=$(git config --get gitflow.path.hooks || git config --get core.hooksPath || echo \"$DOT_GIT_DIR\"/hooks)\n\t\tprintf \"Hooks and filters directory? [$default_suggestion] \"\n\t\tif noflag defaults; then\n\t\t\tread answer\n\t\telse\n\t\t\tprintf \"\\n\"\n\t\tfi\n\t\t[ \"$answer\" = \"-\" ] && hooks_dir= || hooks_dir=${answer:-$default_suggestion}\n\t\tgit_do config $gitflow_config_option gitflow.path.hooks \"$hooks_dir\"\n\tfi\n\n\t# TODO: what to do with origin?\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n"
        },
        {
          "name": "git-flow-log",
          "type": "blob",
          "size": 2.7314453125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgitflow_load_settings\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow log\n\nshows current branch log compared to develop\n'git help log' for arguments\n--\n\"\n\tflags_help\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow feature log [<options>]\n\nShow log on <feature> branch since the fork of <develop> branch\nOptions come from git log\n--\nh,help!         Show this help\nshowcommands!   Show git commands while executing them\n\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# get base branch from current branch\n\tlocal base=$(gitflow_config_get_base_branch $(git_current_branch))\n\n\t# no base branch found, comparing against $master\n\tif [ -z $base ]; then\n\t\tbase=$MASTER_BRANCH\n\tfi\n\n\t# Get the log\n\techo \"Comparing against \\\"$base\\\" branch\\n\"\n\tgit_do log \"$@\"\"$base..\"\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n"
        },
        {
          "name": "git-flow-release",
          "type": "blob",
          "size": 37.787109375,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\n#\n# Function used by finish command to actually finish the release branch\n# Called when the base of the release is the $DEVELOP_BRANCH\n#\n_finish_from_develop() {\n\tlocal opts merge_branch commit keepmsg remotebranchdeleted localbranchdeleted compare_refs_result merge_result\n\n\tremotebranchdeleted=$FLAGS_FALSE\n\tlocalbranchdeleted=$FLAGS_FALSE\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$MASTER_BRANCH\"\n\t\tgit_fetch_branch \"$ORIGIN\" \"$DEVELOP_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$MASTER_BRANCH\"; then\n\t\tif flag ff_master; then\n\t\t\tgit_compare_refs \"$MASTER_BRANCH\" \"$ORIGIN/$MASTER_BRANCH\"\n\t\t\tcompare_refs_result=$?\n\n\t\t\tif [ $compare_refs_result -gt 0 ]; then\n\t\t\t\twarn \"Branches '\"$MASTER_BRANCH\"' and '\"$ORIGIN/$MASTER_BRANCH\"' have diverged.\"\n\t\t\t\tif [ $compare_refs_result -eq 1 ]; then\n\t\t\t\t\twarn \"Fast forwarding '\"$MASTER_BRANCH\"'.\"\n\t\t\t\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\t\t\t\t\tgit_do merge  --ff-only \"$ORIGIN/$MASTER_BRANCH\" >/dev/null 2>&1\n\t\t\t\t\tmerge_result=$?\n\t\t\t\t\tgit_do checkout \"$BRANCH\"\n\t\t\t\t\tif [ $merge_result -gt 0 ]; then\n\t\t\t\t\t\tdie \"'\"$MASTER_BRANCH\"' can not be fast forwarded.\"\n\t\t\t\t\tfi\n\t\t\t\telif [ $compare_refs_result -eq 2 ]; then\n\t\t\t\t\t# Warn here, since there is no harm in being ahead\n\t\t\t\t\twarn \"And local branch '$1' is ahead of '$2'.\"\n\t\t\t\telse\n\t\t\t\t\tdie \"Branches need merging first.\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\trequire_branches_equal \"$MASTER_BRANCH\" \"$ORIGIN/$MASTER_BRANCH\"\n\t\tfi\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$DEVELOP_BRANCH\"; then\n\t\trequire_branches_equal \"$DEVELOP_BRANCH\" \"$ORIGIN/$DEVELOP_BRANCH\"\n\tfi\n\n\tif noflag notag; then\n\t\t# We ask for a tag, be sure it does not exists or\n\t\t# points to the latest hotfix commit\n\t\tif git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tgit_compare_refs  \"$BRANCH\" \"$VERSION_PREFIX$TAGNAME\"^2 2>/dev/null\n\t\t\t[ $? -eq 0 ] || die \"Tag already exists and does not point to release branch '$BRANCH'\"\n\t\tfi\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Try to merge into master.\n\t# In case a previous attempt to finish this release branch has failed,\n\t# but the merge into master was successful, we skip it now\n\tif ! git_is_branch_merged_into \"$BRANCH\" \"$MASTER_BRANCH\"; then\n\t\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\n\t\t\topts=\"\"\n\t\t\tnoflag edit && opts=\"$opts --no-edit\"\n\t\t\tif noflag squash; then\n\t\t\t\tgit_do merge --no-ff $opts \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\telse\n\t\t\t\tgit_do merge --squash $opts \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\t\tflag squash_info && gitflow_create_squash_message \"Merged release branch '$BRANCH'\" \"$MASTER_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\t\t\tgit_do commit $opts\n\t\t\tfi\n\tfi\n\n\tif noflag notag; then\n\t\t# Try to tag the release.\n\t\t# In case a previous attempt to finish this release branch has failed,\n\t\t# but the tag was set successful, we skip it now\n\t\tif ! git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ] && [ \"$FLAGS_messagefile\" != \"\" ]; then\n\t\t\t\tdie \"Use either -m,--message or -f,--messagefile. Can not use both options at the same time\"\n\t\t\tfi\n\t\t\topts=\"-a\"\n\t\t\tflag sign && opts=\"$opts -s\"\n\t\t\t[ \"$FLAGS_signingkey\" != \"\" ] && opts=\"$opts -u '$FLAGS_signingkey'\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ]; then\n\t\t\t\t# Run filter on the tag message\n\t\t\t\tFLAGS_message=$(run_filter_hook release-finish-tag-message \"${FLAGS_message}\" \"$VERSION_PREFIX$TAGNAME\")\n\t\t\t\topts=\"$opts -m '$FLAGS_message'\"\n\t\t\tfi\n\t\t\t[ \"$FLAGS_messagefile\" != \"\" ] && opts=\"$opts -F '$FLAGS_messagefile'\"\n\t\t\tif noflag edit; then\n\t\t\t\tif [ \"$FLAGS_message\" = \"\" ] && [ \"$FLAGS_messagefile\" = \"\" ]; then\n\t\t\t\t\t# in order to fix annotated tag without message\n\t\t\t\t\topts=\"$opts -m $VERSION_PREFIX$TAGNAME\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\teval git_do tag $opts \"$VERSION_PREFIX$TAGNAME\" || die \"Tagging failed. Please run finish again to retry.\"\n\t\tfi\n\tfi\n\n\t# By default we backmerge the $MASTER_BRANCH unless the user explicitly\n\t# stated not to do a back merge, in that case we use the $BRANCH.\n\tif noflag nobackmerge; then\n\t\tmerge_branch=\"$MASTER_BRANCH\"\n\telse\n\t\tmerge_branch=\"$BRANCH\"\n\tfi\n\n\t# Try to merge into develop unless 'nodevelopmerge' has been specified.\n\t# In case a previous attempt to finish this release branch has failed,\n\t# but the merge into develop was successful, we skip it now\n\tif noflag nodevelopmerge; then\n\t\tif ! git_is_branch_merged_into \"$merge_branch\" \"$DEVELOP_BRANCH\"; then\n\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\n\t\t\topts=\"\"\n\t\t\tnoflag edit && opts=\"$opts --no-edit\"\n\t\t\tif noflag nobackmerge; then\n\t\t\t\t# Accounting for 'git describe', if a release is tagged\n\t\t\t\t# we use the tag commit instead of the branch.\n\t\t\t\tif noflag notag; then\n\t\t\t\t\tcommit=\"$VERSION_PREFIX$TAGNAME\"\n\t\t\t\telse\n\t\t\t\t\tcommit=\"$MASTER_BRANCH\"\n\t\t\t\tfi\n\t\t\t\tgit_do merge --no-ff $opts \"$commit\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\telse\n\t\t\t\tcommit=\"$BRANCH\"\n\t\t\t\tif noflag squash; then\n\t\t\t\t\tgit_do merge --no-ff $opts \"$commit\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\t\telse\n\t\t\t\t\tgit_do merge --squash $opts \"$commit\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\t\t\tflag squash_info && gitflow_create_squash_message \"Merged release branch '$BRANCH'\" \"$DEVELOP_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\t\t\t\tgit_do commit $opts\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\n\trun_post_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\tif flag push; then\n\t\tif flag pushdevelop; then\n\t\t\tgit_do push \"$ORIGIN\" \"$DEVELOP_BRANCH\" || die \"Could not push branch '$DEVELOP_BRANCH' to remote '$ORIGIN'.\"\n\t\tfi\n\t\tif flag pushproduction; then\n\t\t\tgit_do push \"$ORIGIN\" \"$MASTER_BRANCH\" || die \"Could not push branch '$MASTER_BRANCH' to remote '$ORIGIN'.\"\n\t\tfi\n\t\tif noflag notag && flag pushtag; then\n\t\t\tgit_do push --tags \"$ORIGIN\" || die \"Could not push tags to remote '$ORIGIN'.\"\n\t\tfi\n\tfi\n\n\t# Delete branch\n\tif noflag keep; then\n\n\t\tif [ \"$BRANCH\" = \"$(git_current_branch)\" ]; then\n\t\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\t\tfi\n\n\t\t# Always delete remote first\n\t\tif noflag keepremote;then\n\t\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\" && remotebranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# Delete local after remote to avoid warnings\n\t\tif noflag keeplocal; then\n\t\t\tif flag force_delete; then\n\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\telse\n\t\t\t\tif noflag squash; then\n\t\t\t\t\tgit_do branch -d \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\telse\n\t\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\t\t# no more branches: we can safely remove config section\n\t\tif ! git_remote_branch_exists \"$ORIGIN/$BRANCH\" -a ! git_local_branch_exists \"$BRANCH\"; then\n\t\t\tgitflow_config_remove_base_section \"$BRANCH\"\n\t\tfi\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\tif flag fetch; then\n\t\techo \"- Latest objects have been fetched from '$ORIGIN'\"\n\tfi\n\techo \"- Release branch '$BRANCH' has been merged into '$MASTER_BRANCH'\"\n\tif noflag notag; then\n\t\techo \"- The release was tagged '$VERSION_PREFIX$TAGNAME'\"\n\tfi\n\t[ \"$commit\" = \"$MASTER_BRANCH\" ] && echo \"- Master branch '$MASTER_BRANCH' has been back-merged into '$DEVELOP_BRANCH'\"\n\t[ \"$commit\" = \"$VERSION_PREFIX$TAGNAME\" ] && echo \"- Release tag '$VERSION_PREFIX$TAGNAME' has been back-merged into '$DEVELOP_BRANCH'\"\n\t[ \"$commit\" = \"$BRANCH\" ] && echo \"- Release branch '$BRANCH' has been merged into '$DEVELOP_BRANCH'\"\n\n\tif noflag keep; then\n\t\tif [ $localbranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=\"has been locally deleted\"\n\t\telse\n\t\t\tkeepmsg=\"is still locally available\"\n\t\tfi\n\t\tif [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=$keepmsg\"; it has been remotely deleted from '$ORIGIN'\"\n\t\telif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\telse\n\t\tkeepmsg=\"is still locally available\"\n\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- Release branch '$BRANCH' \"$keepmsg\n\n\tif flag push; then\n\t\techo \"- '$DEVELOP_BRANCH', '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'\"\n\tfi\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\n#\n# Function used by finish command to actually finish the release branch\n# Called when the base of the release is NOT the $DEVELOP_BRANCH\n#\n\n_finish_base() {\n\tlocal opts merge_branch commit keepmsg localbranchdeleted remotebranchdeleted\n\n\tremotebranchdeleted=$FLAGS_FALSE\n\tlocalbranchdeleted=$FLAGS_FALSE\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BASE_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$BASE_BRANCH\"; then\n\t\trequire_branches_equal \"$BASE_BRANCH\" \"$ORIGIN/$BASE_BRANCH\"\n\tfi\n\n\tif noflag notag; then\n\t\t# We ask for a tag, be sure it does not exists or\n\t\t# points to the latest hotfix commit\n\t\tif git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tgit_compare_refs  \"$BRANCH\" \"$VERSION_PREFIX$TAGNAME\"^2 2>/dev/null\n\t\t\t[ $? -eq 0 ] || die \"Tag already exists and does not point to release branch '$BRANCH'\"\n\t\tfi\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Try to merge into base branch.\n\t# In case a previous attempt to finish this release branch has failed,\n\t# but the merge into develop was successful, we skip it now\n\tif ! git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\"; then\n\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\tif noflag squash; then\n\t\t\tgit_do merge --no-ff \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\telse\n\t\t\tgit_do merge --squash \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\tflag squash_info && gitflow_create_squash_message \"Merged release branch '$BRANCH'\" \"$BASE_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\t\tgit_do commit\n\t\tfi\n\tfi\n\n\tif noflag notag; then\n\t\t# Try to tag the release.\n\t\t# In case a previous attempt to finish this release branch has failed,\n\t\t# but the tag was set successful, we skip it now\n\t\tif ! git_tag_exists \"$VERSION_PREFIX$TAGNAME\"; then\n\t\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ] && [ \"$FLAGS_messagefile\" != \"\" ]; then\n\t\t\t\tdie \"Use either -m,--message or -f,--messagefile. Can not use both options at the same time\"\n\t\t\tfi\n\t\t\topts=\"-a\"\n\t\t\tflag sign && opts=\"$opts -s\"\n\t\t\t[ \"$FLAGS_signingkey\" != \"\" ] && opts=\"$opts -u '$FLAGS_signingkey'\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ]; then\n\t\t\t\t# Run filter on the tag message\n\t\t\t\tFLAGS_message=$(run_filter_hook release-finish-tag-message \"${FLAGS_message}\" \"$VERSION_PREFIX$TAGNAME\")\n\t\t\t\topts=\"$opts -m '$FLAGS_message'\"\n\t\t\tfi\n\t\t\t[ \"$FLAGS_messagefile\" != \"\" ] && opts=\"$opts -F '$FLAGS_messagefile'\"\n\t\t\tif noflag edit; then\n\t\t\t\tif [ \"$FLAGS_message\" = \"\" ] && [ \"$FLAGS_messagefile\" = \"\" ]; then\n\t\t\t\t\t# in order to fix annotated tag without message\n\t\t\t\t\topts=\"$opts -m $VERSION_PREFIX$TAGNAME\"\n\t\t\t\tfi\n\t\t\tfi\n\t\t\teval git_do tag $opts \"$VERSION_PREFIX$TAGNAME\" || die \"Tagging failed. Please run finish again to retry.\"\n\t\tfi\n\tfi\n\n\trun_post_hook \"$VERSION_PREFIX$TAGNAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Delete branch\n\tif noflag keep; then\n\n\t\t# Always delete remote first\n\t\tif noflag keepremote;then\n\t\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\" && remotebranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# Delete local after remote to avoid warnings\n\t\tif noflag keeplocal; then\n\t\t\tif [ \"$BRANCH\" = \"$(git_current_branch)\" ]; then\n\t\t\t\tgit_do checkout \"$BASE_BRANCH\" || die \"Could not check out branch '$BASE_BRANCH'.\"\n\t\t\tfi\n\t\t\tif flag force_delete; then\n\t\t\t\tgit_do branch -D \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\telse\n\t\t\t\tgit_do branch -d \"$BRANCH\" && localbranchdeleted=$FLAGS_TRUE\n\t\t\tfi\n\t\tfi\n\n\t\t# no more branches: we can safely remove config section\n\t\tif ! git_remote_branch_exists \"$ORIGIN/$BRANCH\" -a ! git_local_branch_exists \"$BRANCH\"; then\n\t\t\tgitflow_config_remove_base_section \"$BRANCH\"\n\t\tfi\n\tfi\n\n\tif flag push; then\n\t\tif flag pushdevelop; then\n\t\t\tgit_do push \"$ORIGIN\" \"$BASE_BRANCH\" || die \"Could not push branch '$BASE_BRANCH' to remote '$ORIGIN'.\"\n\t\tfi\n\t\tif noflag notag && flag pushtag; then\n\t\t\tgit_do push --tags \"$ORIGIN\" || die \"Could not push tags to remote '$ORIGIN'.\"\n\t\tfi\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\tif flag fetch; then\n\t\techo \"- Latest objects have been fetched from '$ORIGIN'\"\n\tfi\n\tif noflag notag; then\n\t\techo \"- The release was tagged '$VERSION_PREFIX$TAGNAME'\"\n\tfi\n\t[ \"$commit\" = \"$VERSION_PREFIX$TAGNAME\" ] && echo \"- Release tag '$VERSION_PREFIX$TAGNAME' has been merged into '$BASE_BRANCH'\"\n\t[ \"$commit\" = \"$BRANCH\" ] && echo \"- Release branch '$BRANCH' has been merged into '$BASE_BRANCH'\"\n\tif noflag keep; then\n\t\tif [ $localbranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=\"has been locally deleted\"\n\t\telse\n\t\t\tkeepmsg=\"is still locally available\"\n\t\tfi\n\t\tif [ $remotebranchdeleted -eq $FLAGS_TRUE ]; then\n\t\t\tkeepmsg=$keepmsg\"; it has been remotely deleted from '$ORIGIN'\"\n\t\telif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\telse\n\t\tkeepmsg=\"is still locally available\"\n\t\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tkeepmsg=$keepmsg\"; it is still remotely available on '$ORIGIN'\"\n\t\tfi\n\tfi\n\techo \"- Release branch '$BRANCH' \"$keepmsg\n\n\tif flag push; then\n\t\techo \"- '$BASE_BRANCH' and tags have been pushed to '$ORIGIN'\"\n\tfi\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgit config --get gitflow.prefix.release >/dev/null 2>&1 || die \"Release prefix not set. Please run 'git flow init'.\"\n\tgitflow_load_settings\n\tVERSION_PREFIX=$(git config --get gitflow.prefix.versiontag)\n\tPREFIX=$(git config --get gitflow.prefix.release)\n}\n\nusage() {\n\t\tOPTIONS_SPEC=\"\\\ngit flow release [list]\ngit flow release start\ngit flow release finish\ngit flow release publish\ngit flow release track\ngit flow release delete\n\nManage your release branches.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\t\tOPTIONS_SPEC=\"\\\ngit flow release [list] [-h] [-v]\n\nList existing release branches\n--\nh,help!           Show this help\nv,verbose!        verbose (more) output\n\"\n\tlocal release_branches current_branch\n\tlocal width branch len\n\tlocal base develop_sha branch_sha nicename\n\n\t# cmd_default may already define flags\n\t# at this stage we can not use parse_args\n\tif [ -z \"${FLAGS_verbose}\" ]; then\n\t\tDEFINE_boolean 'verbose' false 'verbose (more) output' v\n\tfi\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\trelease_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tif [ -z \"$release_branches\" ]; then\n\t\twarn \"No release branches exist.\"\n\t\twarn \"\"\n\t\twarn \"You can start a new release branch:\"\n\t\twarn \"\"\n\t\twarn \"    git flow release start <name> [<base>]\"\n\t\twarn \"\"\n\t\texit 0\n\tfi\n\n\tcurrent_branch=$(git_current_branch)\n\n\t# Determine column width first\n\twidth=0\n\tfor branch in $release_branches; do\n\t\tlen=${#branch}\n\t\twidth=$(max $width $len)\n\tdone\n\twidth=$(($width+3-${#PREFIX}))\n\n\tfor branch in $release_branches; do\n\t\tbase=$(git merge-base \"$branch\" \"$DEVELOP_BRANCH\")\n\t\tdevelop_sha=$(git rev-parse \"$DEVELOP_BRANCH\")\n\t\tbranch_sha=$(git rev-parse \"$branch\")\n\t\tif [ \"$branch\" = \"$current_branch\" ]; then\n\t\t\tprintf \"* \"\n\t\telse\n\t\t\tprintf \"  \"\n\t\tfi\n\t\tif flag verbose; then\n\t\t\tprintf \"%-${width}s\" \"${branch#$PREFIX}\"\n\t\t\tif [ \"$branch_sha\" = \"$develop_sha\" ]; then\n\t\t\t\tprintf \"(no commits yet)\"\n\t\t\telse\n\t\t\t\tnicename=$(git rev-parse --short \"$base\")\n\t\t\t\tprintf \"(based on $nicename)\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"%s\" \"${branch#$PREFIX}\"\n\t\tfi\n\t\techo\n\tdone\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# Read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tVERSION=''\n\telse\n\t\tVERSION=$1\n\tfi\n\tBRANCH=$PREFIX$VERSION\n}\n\nrequire_no_existing_release_branches() {\n\tlocal release_branches first_branch\n\n\trelease_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tfirst_branch=$(echo ${release_branches} | head -n1)\n\n\tfirst_branch=${first_branch#$PREFIX}\n\t[ -z \"$release_branches\" ] || die \"There is an existing release branch '$first_branch'. Finish that one first.\"\n}\n\ncmd_start() {\n\tOPTIONS_SPEC=\"\\\ngit flow release start [options] <version> [<base>]\n\nStart a new release branch\n--\nh,help!              Show this help\nshowcommands!        Show git commands while executing them\nF,[no]fetch          Fetch from $ORIGIN before performing finish\nv,verbose!           Verbose (more) output\n\"\n\tlocal base\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"release.start.fetch\"   \"fetch\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\teval set -- \"${FLAGS_ARGV}\"\n\tbase=${2:-$DEVELOP_BRANCH}\n\n\t# Run filter on the version\n\tVERSION=$(run_filter_hook release-start-version $VERSION)\n\tif [ $? -eq 127 ]; then\n\t\tdie $VERSION\n\tfi\n\n\t# As VERSION might have changed reset BRANCH with new VERSION\n\tBRANCH=$PREFIX$VERSION\n\n\trequire_base_is_local_branch \"$base\"\n\tgitflow_require_version_arg\n\n\trequire_no_existing_release_branches\n\n\t# Sanity checks\n\tgit_config_bool_exists \"gitflow.allowdirty\" || require_clean_working_tree\n\trequire_branch_absent \"$BRANCH\"\n\trequire_tag_absent \"$VERSION_PREFIX$VERSION\"\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$base\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$base\"; then\n\t\trequire_branches_equal \"$base\" \"$ORIGIN/$base\"\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\tgitflow_config_set_base_branch $base $BRANCH\n\n\t# Create branch\n\tgit_do checkout -b \"$BRANCH\" \"$base\" || die \"Could not create release branch '$BRANCH'.\"\n\n\trun_post_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\" \"$base\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new branch '$BRANCH' was created, based on '$base'\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n\techo \"Follow-up actions:\"\n\techo \"- Bump the version number now!\"\n\techo \"- Start committing last-minute fixes in preparing your release\"\n\techo \"- When done, run:\"\n\techo\n\techo \"     git flow release finish '$VERSION'\"\n\techo\n}\n\ncmd_finish() {\n\tOPTIONS_SPEC=\"\\\ngit flow release finish [-h] [-F] [-s] [-u] [-m | -f] [-p] [-k] [-n] [-b] [-S] [-e] <version>\n\n\nFinish a release branch\n--\nh,help              Show this help\nshowcommands!       Show git commands while executing them\nF,[no]fetch         Fetch from origin before performing finish\ns,sign!             Sign the release tag cryptographically\nu,signingkey!       Use the given GPG-key for the digital signature (implies -s)\nm,message!          Use the given tag message\nf,[no]messagefile=  Use the contents of the given file as a tag message\np,[no]push          Push to origin after performing finish\n[no]pushproduction  Push the production branch\n[no]pushdevelop     Push the develop branch\n[no]pushtag         Push the tag\nk,[no]keep          Keep branch after performing finish\n[no]keepremote      Keep the remote branch\n[no]keeplocal       Keep the local branch\nD,[no]force_delete  Force delete release branch after finish\nn,[no]tag           Don't tag this release\nb,[no]nobackmerge   Don't back-merge master, or tag if applicable, in develop\nS,[no]squash        Squash release during merge\n[no]ff-master       Fast forward master branch if possible\ne,[no]edit          The --noedit option can be used to accept the auto-generated message on merging\nT,tagname!          Use given tag name\nnodevelopmerge!  Don't back-merge develop branch\n\"\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\tDEFINE_boolean 'sign' false \"sign the release tag cryptographically\" s\n\tDEFINE_string  'signingkey' \"\" \"use the given GPG-key for the digital signature (implies -s)\" u\n\tDEFINE_string  'message' \"\" \"use the given tag message\" m\n\tDEFINE_string  'messagefile' \"\" \"use the contents of the given file as a tag message\" f\n\tDEFINE_boolean 'push' false \"push to $ORIGIN after performing finish\" p\n\tDEFINE_boolean 'pushproduction' false \"push the production branch\"\n\tDEFINE_boolean 'pushdevelop' false \"push the develop branch\"\n\tDEFINE_boolean 'pushtag' false \"push the tag\"\n\tDEFINE_boolean 'keep' false \"keep branch after performing finish\" k\n\tDEFINE_boolean 'keepremote' false \"keep the remote branch\"\n\tDEFINE_boolean 'keeplocal' false \"keep the local branch\"\n\tDEFINE_boolean 'force_delete' false \"force delete release branch after finish\" D\n\tDEFINE_boolean 'notag' false \"don't tag this release\" n\n\tDEFINE_boolean 'nobackmerge' false \"don't back-merge $MASTER_BRANCH, or tag if applicable, in $DEVELOP_BRANCH \" b\n\tDEFINE_boolean 'squash' false \"squash release during merge\" S\n\tDEFINE_boolean 'squash-info' false \"add branch info during squash\"\n\tDEFINE_boolean 'ff-master' false \"fast forward master branch if possible\"\n\tDEFINE_boolean 'edit' true \"accept the auto-generated message on merging\" e\n\tDEFINE_string  'tagname' \"\" \"use the given tag name\" T\n\tDEFINE_boolean 'nodevelopmerge' false \"don't merge $BRANCH into $DEVELOP_BRANCH \"\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"release.finish.fetch\"          \"fetch\"\n\tgitflow_override_flag_boolean   \"release.finish.sign\"           \"sign\"\n\tgitflow_override_flag_boolean   \"release.finish.push\"           \"push\"\n\tgitflow_override_flag_boolean   \"release.finish.pushproduction\" \"pushproduction\"\n\tgitflow_override_flag_boolean   \"release.finish.pushdevelop\"    \"pushdevelop\"\n\tgitflow_override_flag_boolean   \"release.finish.pushtag\"        \"pushtag\"\n\tgitflow_override_flag_boolean   \"release.finish.keep\"           \"keep\"\n\tgitflow_override_flag_boolean   \"release.finish.keepremote\"     \"keepremote\"\n\tgitflow_override_flag_boolean   \"release.finish.keeplocal\"      \"keeplocal\"\n\tgitflow_override_flag_boolean   \"release.finish.force-delete\"   \"force_delete\"\n\tgitflow_override_flag_boolean   \"release.finish.notag\"          \"notag\"\n\tgitflow_override_flag_boolean   \"release.finish.nobackmerge\"    \"nobackmerge\"\n\tgitflow_override_flag_boolean   \"release.finish.squash\"         \"squash\"\n\tgitflow_override_flag_boolean   \"release.finish.squash-info\"    \"squash_info\"\n\tgitflow_override_flag_boolean   \"release.finish.ff-master\"      \"ff-master\"\n\tgitflow_override_flag_string    \"release.finish.signingkey\"     \"signingkey\"\n\tgitflow_override_flag_string    \"release.finish.message\"        \"message\"\n\tgitflow_override_flag_string    \"release.finish.messagefile\"    \"messagefile\"\n\tgitflow_override_flag_boolean   \"release.finish.nodevelopmerge\" \"nodevelopmerge\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\n\t# Run filter on the version\n\tVERSION=$(run_filter_hook release-finish-version $VERSION)\n\tif [ $? -eq 127 ]; then\n\t\tdie $VERSION\n\tfi\n\n\t# Use branch name if no tag name is given\n\tif [ \"$FLAGS_tagname\" != \"\" ]; then\n\t\tTAGNAME=$FLAGS_tagname\n\telse\n\t\tTAGNAME=$VERSION\n\tfi\n\n\t# As VERSION might have changed reset BRANCH with new VERSION\n\tBRANCH=$PREFIX$VERSION\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't finish the release branch '$BRANCH'.\"\n\n\t# Handle flags that imply other flags\n\tif [ \"$FLAGS_signingkey\" != \"\" ]; then\n\t\tFLAGS_sign=$FLAGS_TRUE\n\tfi\n\n\t# Keeping both branches implies the --keep flag to be true.\n\tif flag keepremote && flag keeplocal; then\n\t\tFLAGS_keep=$FLAGS_TRUE\n\tfi\n\n\t# Pushing implies we push all.\n\tif flag push; then\n\t\tFLAGS_pushproduction=$FLAGS_TRUE\n\t\tFLAGS_pushdevelop=$FLAGS_TRUE\n\t\tFLAGS_pushtag=$FLAGS_TRUE\n\tfi\n\t# If we push either of these it means we need to do a push\n\tif flag pushproduction || flag pushdevelop || flag pushtag; then\n\t\tFLAGS_push=$FLAGS_TRUE\n\tfi\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\trequire_clean_working_tree\n\n\t# We always fetch the Branch from Origin\n\t# This is done to avoid possible commits on the remote that are not\n\t# merged into the local branch\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tgit_fetch_branch \"$ORIGIN\" \"$BRANCH\"\n\tfi\n\n\tif [ \"$BASE_BRANCH\" = \"$DEVELOP_BRANCH\" ]; then\n\t\t_finish_from_develop\n\telse\n\t\t_finish_base\n\tfi\n}\n\ncmd_branch() {\n\tOPTIONS_SPEC=\"\\\ngit flow release branch [-h] [-F] [-s] [-u] [-m] [-f] [-p] [-n] [-S] <version> [<name>]\n\n\nRelease a branch [<name>], if a name is not given it defaults to the develop branch, and use the given version <version>\n--\nh,help              Show this help\nshowcommands!       Show git commands while executing them\nF,[no]fetch \t\tFetch from origin before performing finish\ns,sign!             Sign the release tag cryptographically\nu,signingkey!    \tUse the given GPG-key for the digital signature (implies -s)\nm,message! \t    \tUse the given tag message\nf,[no]messagefile= \tUse the contents of the given file as a tag message\np,[no]push \t\t\tPush to origin after performing finish\nn,[no]tag \t\t\tDon't tag this release\nS,[no]squash \t\tSquash release during merge\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\tDEFINE_boolean 'sign' false \"sign the release tag cryptographically\" s\n\tDEFINE_string 'signingkey' \"\" \"use the given GPG-key for the digital signature (implies -s)\" u\n\tDEFINE_string 'message' \"\" \"use the given tag message\" m\n\tDEFINE_string 'messagefile' \"\" \"use the contents of the given file as a tag message\" f\n\tDEFINE_boolean 'push' false \"push to $ORIGIN after performing finish\" p\n\tDEFINE_boolean 'notag' false \"don't tag this release\" n\n\tDEFINE_boolean 'squash' false \"squash release during merge\" S\n\tDEFINE_boolean 'squash-info' false \"add branch info during squash\"\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"release.branch.fetch\"         \"fetch\"\n\tgitflow_override_flag_boolean   \"release.branch.sign\"          \"sign\"\n\tgitflow_override_flag_boolean   \"release.branch.push\"          \"push\"\n\tgitflow_override_flag_boolean   \"release.branch.notag\"         \"notag\"\n\tgitflow_override_flag_boolean   \"release.branch.squash\"        \"squash\"\n\tgitflow_override_flag_boolean   \"release.branch.squash-info\"   \"squash_info\"\n\tgitflow_override_flag_string    \"release.branch.signingkey\"    \"signingkey\"\n\tgitflow_override_flag_string    \"release.branch.message\"       \"message\"\n\tgitflow_override_flag_string    \"release.branch.messagefile\"   \"messagefile\"\n\n\t# Parse arguments\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# Read arguments into global variables\n\tVERSION=$1\n\tBRANCH=${2:-$DEVELOP_BRANCH}\n\n\t# Run filter on the version\n\tVERSION=$(run_filter_hook branch-finish-version $VERSION)\n\tif [ $? -eq 127 ]; then\n\t\tdie $VERSION\n\tfi\n\n\tgitflow_require_version_arg\n\n\t# Handle flags that imply other flags\n\tif [ \"$FLAGS_signingkey\" != \"\" ]; then\n\t\tFLAGS_sign=$FLAGS_TRUE\n\tfi\n\n\t# Sanity checks\n\tif gitflow_is_prefixed_branch \"$BRANCH\"; then\n\t\tdie \"Branch '$BRANCH' seems to be a git-flow branch. It's not allowed to release this directly.\"\n\tfi\n\n\tif [ \"$BRANCH\" = \"$MASTER_BRANCH\" ]; then\n\t\tdie \"Can not release from the the master branch\"\n\tfi\n\n\trequire_branch \"$BRANCH\"\n\trequire_clean_working_tree\n\n\t# We always fetch the Branch from Origin\n\t# This is done to avoid possible commits on the remote that are not\n\t# merged into the local branch\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\t\tgit_fetch_branch \"$ORIGIN\" \"$BRANCH\"\n\tfi\n\n\t# Update local branches with remote branches\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$MASTER_BRANCH\"\n\tfi\n\n\t# Check if the local branches have all the commits from the remote branches\n\tif git_remote_branch_exists \"$ORIGIN/$BRANCH\"; then\n\t\trequire_branches_equal \"$BRANCH\" \"$ORIGIN/$BRANCH\"\n\tfi\n\tif git_remote_branch_exists \"$ORIGIN/$MASTER_BRANCH\"; then\n\t\trequire_branches_equal \"$MASTER_BRANCH\" \"$ORIGIN/$MASTER_BRANCH\"\n\tfi\n\n\trun_pre_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Try to merge into master.\n\t# In case a previous attempt to finish this release branch has failed,\n\t# but the merge into master was successful, we skip it now\n\tif ! git_is_branch_merged_into \"$BRANCH\" \"$MASTER_BRANCH\"; then\n\t\t\tgit_do checkout \"$MASTER_BRANCH\" || die \"Could not check out branch '$MASTER_BRANCH'.\"\n\t\t\tif noflag squash; then\n\t\t\t\tgit_do merge --no-ff \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\telse\n\t\t\t\tgit_do merge --squash \"$BRANCH\" || die \"There were merge conflicts.\" # TODO: What do we do now?\n\t\t\t\tflag squash_info && gitflow_create_squash_message \"Merged release branch '$BRANCH'\" \"$MASTER_BRANCH\" \"$BRANCH\" > \"$DOT_GIT_DIR/SQUASH_MSG\"\n\t\t\t\tgit_do commit\n\t\t\tfi\n\tfi\n\n\tif noflag notag; then\n\t\t# Try to tag the release.\n\t\t# In case a previous attempt to finish this release branch has failed,\n\t\t# but the tag was set successful, we skip it now\n\t\tif ! git_tag_exists \"$VERSION_PREFIX$VERSION\"; then\n\t\t\tif [ \"$FLAGS_message\" != \"\" ] && [ \"$FLAGS_messagefile\" != \"\" ]; then\n\t\t\t\tdie \"Use either -m,--message or -f,--messagefile. Can not use both options at the same time\"\n\t\t\tfi\n\t\t\topts=\"-a\"\n\t\t\tflag sign && opts=\"$opts -s\"\n\t\t\t[ \"$FLAGS_signingkey\" != \"\" ] && opts=\"$opts -u '$FLAGS_signingkey'\"\n\t\t\tif [ \"$FLAGS_message\" != \"\" ]; then\n\t\t\t\t# Run filter on the tag message\n\t\t\t\tFLAGS_message=$(run_filter_hook release-branch-tag-message \"${FLAGS_message}\" \"$VERSION_PREFIX$VERSION\")\n\t\t\t\topts=\"$opts -m '$FLAGS_message'\"\n\t\t\tfi\n\t\t\t[ \"$FLAGS_messagefile\" != \"\" ] && opts=\"$opts -F '$FLAGS_messagefile'\"\n\t\t\teval git_do tag $opts \"$VERSION_PREFIX$VERSION\" || die \"Tagging failed. Please run finish again to retry.\"\n\t\tfi\n\tfi\n\n\trun_post_hook \"$VERSION_PREFIX$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\tif flag push; then\n\t\tgit_do push \"$ORIGIN\" \"$MASTER_BRANCH\" || die \"Could not push branch '$MASTER_BRANCH' to remote '$ORIGIN'.\"\n\t\tif noflag notag; then\n\t\t\tgit_do push --tags \"$ORIGIN\" || die \"Could not push tags to remote '$ORIGIN'.\"\n\t\tfi\n\tfi\n\n\techo\n\techo \"Summary of actions:\"\n\tif flag fetch; then\n\t\techo \"- Latest objects have been fetched from '$ORIGIN'\"\n\tfi\n\techo \"- Branch '$BRANCH' has been merged into '$MASTER_BRANCH'\"\n\tif noflag notag; then\n\t\techo \"- The release was tagged '$VERSION_PREFIX$VERSION'\"\n\tfi\n\n\tif flag push; then\n\t\techo \"- '$MASTER_BRANCH' and tags have been pushed to '$ORIGIN'\"\n\tfi\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_publish() {\n\tOPTIONS_SPEC=\"\\\ngit flow release publish [-h] <name>\n\nPublish the release branch <name> on $ORIGIN\n--\nh,help           Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_branch \"$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\trequire_branch_absent \"$ORIGIN/$BRANCH\"\n\n\trun_pre_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\t# Create remote branch with remote tracking\n\tgit_do push -u \"$ORIGIN\" \"$BRANCH:$BRANCH\"\n\tgit_do fetch -q \"$ORIGIN\" \"$BRANCH\" || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_do checkout \"$BRANCH\" || die \"Could not check out branch '$BRANCH'.\"\n\n\trun_post_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- The remote branch '$BRANCH' was created or updated\"\n\techo \"- The local branch '$BRANCH' was configured to track the remote branch\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_track() {\n\tOPTIONS_SPEC=\"\\\ngit flow release track [-h] <name>\n\nStart tracking release <name> that is shared on $ORIGIN\n--\nh,help           Show this help\nshowcommands!    Show git commands while executing them\n\"\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_version_arg\n\n\t# Sanity checks\n\trequire_clean_working_tree\n\trequire_local_branch_absent \"$BRANCH\"\n\n\trun_pre_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\tgit_do fetch -q \"$ORIGIN\"  || die \"Could not fetch branch '$BRANCH' from remote '$ORIGIN'.\"\n\tgit_remote_branch_exists \"$ORIGIN/$BRANCH\"\n\n\t# Create tracking branch\n\tgit_do checkout -b \"$BRANCH\" \"$ORIGIN/$BRANCH\" || die \"Could not create branch '$BRANCH'.\"\n\n\trun_post_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new remote tracking branch '$BRANCH' was created\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rebase() {\n\tOPTIONS_SPEC=\"\\\ngit flow release rebase [-h] [-i] [-p] [<name|nameprefix>]\n\nRebase <name> on <base_branch>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\ni,[no]interactive      Do an interactive rebase\np,[no]preserve-merges  Preserve merges\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'interactive' false 'do an interactive rebase' i\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges' p\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"release.rebase.interactive\"       \"interactive\"\n\tgitflow_override_flag_boolean   \"release.rebase.preserve-merges\"   \"preserve_merges\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\twarn \"Will try to rebase '$NAME' which is based on '$BASE_BRANCH'...\"\n\tif ! git_config_bool_exists \"rebase.autostash\"; then\n\t\trequire_clean_working_tree\n\tfi\n\trequire_branch \"$BRANCH\"\n\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the release branch '$BRANCH'.\"\n\n\tgit_do checkout -q \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tif flag interactive; then\n\t\topts=\"$opts -i\"\n\tfi\n\tif flag preserve_merges; then\n\t\topts=\"$opts -p\"\n\tfi\n\tgit_do rebase $opts \"$BASE_BRANCH\"\n}\n\ncmd_delete() {\n\tOPTIONS_SPEC=\"\\\ngit flow release delete [-h] [-f] [-r] <name>\n\nDelete the given release branch\n--\nh,help           Show this help\nshowcommands!    Show git commands while executing them\nf,[no]force      Force deletion\nr,[no]remote     Delete remote branch\n\"\n\tlocal current_branch\n\n\t# Define flags\n\tDEFINE_boolean 'force' false \"force deletion\" f\n\tDEFINE_boolean 'remote' false \"delete remote branch\" r\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"release.delete.fetch\"    \"fetch\"\n\tgitflow_override_flag_boolean   \"release.delete.remote\"   \"remote\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_version_arg\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\trun_pre_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\tcurrent_branch=$(git_current_branch)\n\t# We can't delete a branch we are on, switch to the develop branch.\n\tif [ \"$BRANCH\" = \"$current_branch\" ]; then\n\t\trequire_clean_working_tree\n\t\tif git_local_branch_exists \"$BASE_BRANCH\"; then\n\t\t\tgit_do checkout \"$BASE_BRANCH\"\n\t\telse\n\t\t\tgit_do checkout \"$DEVELOP_BRANCH\" || die \"Could not check out branch '$DEVELOP_BRANCH'.\"\n\t\tfi\n\tfi\n\n\tif ( git_is_branch_merged_into \"$BRANCH\" \"$MASTER_BRANCH\" && git_is_branch_merged_into \"$BRANCH\" \"$BASE_BRANCH\" ); then\n\t\tgit_do branch -d \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\tif flag remote; then\n\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\tfi\n\telse\n\t\tif flag force; then\n\t\t\tgit_do branch -D \"$BRANCH\" || die \"Could not delete the $BRANCH.\"\n\t\t\tif flag remote; then\n\t\t\t\tgit_remote_branch_delete \"$BRANCH\"\n\t\t\tfi\n\t\telse\n\t\t\tdie \"Release branch '$BRANCH' has been not been merged in branch '$MASTER_BRANCH' and/or branch '$BASE_BRANCH'. Use -f to force the deletion.\"\n\t\tfi\n\tfi\n\n\tgitflow_config_remove_base_section \"$BRANCH\"\n\trun_post_hook \"$VERSION\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- Release branch '$BRANCH' has been deleted.\"\n\tflag remote && echo \"- Release branch '$BRANCH' in '$ORIGIN' has been deleted.\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n"
        },
        {
          "name": "git-flow-support",
          "type": "blob",
          "size": 6.7890625,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\ninitialize() {\n\trequire_git_repo\n\trequire_gitflow_initialized\n\tgit config --get gitflow.prefix.support >/dev/null 2>&1 || die \"Support prefix not set. Please run 'git flow init'.\"\n\tgitflow_load_settings\n\tVERSION_PREFIX=$(git config --get gitflow.prefix.versiontag)\n\tPREFIX=$(git config --get gitflow.prefix.support)\n}\n\nusage() {\n\t\tOPTIONS_SPEC=\"\\\ngit flow support [list]\ngit flow support start\n\nManage your support branches.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\tcmd_list \"$@\"\n}\n\ncmd_list() {\n\tOPTIONS_SPEC=\"\\\ngit flow support [list] [-h] [-v]\n\nList all local support branches\n--\nh,help!           Show this help\nv,verbose         Verbose (more) output\n\"\n\tlocal support_branches current_branch width branch len\n\tlocal base master_sha branch_sha\n\tlocal tagname nicename\n\n\t# Define flags\n\tDEFINE_boolean 'verbose' false 'verbose (more) output' v\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tsupport_branches=$(git_local_branches_prefixed \"$PREFIX\")\n\tif [ -z \"$support_branches\" ]; then\n\t\twarn \"No support branches exist.\"\n\t\twarn \"\"\n\t\twarn \"You can start a new support branch:\"\n\t\twarn \"\"\n\t\twarn \"    git flow support start <name> <base>\"\n\t\twarn \"\"\n\t\texit 0\n\tfi\n\tcurrent_branch=$(git_current_branch)\n\n\t# Determine column width first\n\twidth=0\n\tfor branch in $support_branches; do\n\t\tlen=${#branch}\n\t\twidth=$(max $width $len)\n\tdone\n\twidth=$(($width+3-${#PREFIX}))\n\n\tfor branch in $support_branches; do\n\t\tbase=$(git merge-base \"$branch\" \"$MASTER_BRANCH\")\n\t\tmaster_sha=$(git rev-parse \"$MASTER_BRANCH\")\n\t\tbranch_sha=$(git rev-parse \"$branch\")\n\t\tif [ \"$branch\" = \"$current_branch\" ]; then\n\t\t\tprintf \"* \"\n\t\telse\n\t\t\tprintf \"  \"\n\t\tfi\n\t\tif flag verbose; then\n\t\t\tprintf \"%-${width}s\" \"${branch#$PREFIX}\"\n\t\t\tif [ \"$branch_sha\" = \"$master_sha\" ]; then\n\t\t\t\tprintf \"(no commits yet)\"\n\t\t\telse\n\t\t\t\ttagname=$(git name-rev --tags --no-undefined --name-only \"$base\")\n\t\t\t\tif [ \"$tagname\" != \"\" ]; then\n\t\t\t\t\tnicename=$tagname\n\t\t\t\telse\n\t\t\t\t\tnicename=$(git rev-parse --short \"$base\")\n\t\t\t\tfi\n\t\t\t\tprintf \"(based on $nicename)\"\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"%s\" \"${branch#$PREFIX}\"\n\t\tfi\n\t\techo\n\tdone\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n\n# Parse arguments and set common variables\nparse_args() {\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# Read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tVERSION=''\n\telse\n\t\tVERSION=$1\n\tfi\n\n\tif [ -z $2 ]; then\n\t\tBASE=''\n\telse\n\t\tBASE=$2\n\tfi\n\tBRANCH=$PREFIX$VERSION\n}\n\ncmd_start() {\n\tOPTIONS_SPEC=\"\\\ngit flow support start [-h] [-F] <version> <base>\n\nStart a new support branch name <version> based on <base>\n--\nh,help!           Show this help\nshowcommands!     Show git commands while executing them\nF,[no]fetch       Fetch from origin before performing finish\n\"\n\t# Define flags\n\tDEFINE_boolean 'fetch' false \"fetch from $ORIGIN before performing finish\" F\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"support.start.fetch\"   \"fetch\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\tgitflow_require_version_arg\n\tgitflow_require_base_arg\n\n\t# Sanity checks\n\tgit_config_bool_exists \"gitflow.allowdirty\" || require_clean_working_tree\n\n\t# Fetch remote changes\n\tif flag fetch; then\n\t\tgit_fetch_branch \"$ORIGIN\" \"$BASE\"\n\tfi\n\n\tgit_is_ancestor \"$BASE\" \"$MASTER_BRANCH\" || die \"Given base '$BASE' is not a valid commit on '$MASTER_BRANCH'.\"\n\n\trequire_branch_absent \"$BRANCH\"\n\n\t# Create branch\n\tgit_do checkout -b \"$BRANCH\" \"$BASE\" || die \"Could not create support branch '$BRANCH'.\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- A new branch '$BRANCH' was created, based on '$BASE'\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n\ncmd_rebase() {\n\tOPTIONS_SPEC=\"\\\ngit flow support rebase [-h] [-i] [-p] [<name|nameprefix>]\n\nRebase <name> on <base_branch>\n--\nh,help!                Show this help\nshowcommands!          Show git commands while executing them\ni,[no]interactive      Do an interactive rebase\np,[no]preserve-merges  Preserve merges\n\"\n\tlocal opts\n\n\t# Define flags\n\tDEFINE_boolean 'interactive' false 'do an interactive rebase' i\n\tDEFINE_boolean 'preserve-merges' false 'try to recreate merges' p\n\n\t# Override defaults with values from config\n\tgitflow_override_flag_boolean   \"support.rebase.interactive\"       \"interactive\"\n\tgitflow_override_flag_boolean   \"support.rebase.preserve-merges\"   \"preserve_merges\"\n\n\t# Parse arguments\n\tparse_args \"$@\"\n\n\t# Use current branch if no version is given\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tgitflow_use_current_branch_version\n\tfi\n\n\tBASE_BRANCH=$(gitflow_config_get_base_branch $BRANCH)\n\tBASE_BRANCH=${BASE_BRANCH:-$DEVELOP_BRANCH}\n\n\twarn \"Will try to rebase '$NAME' which is based on '$BASE_BRANCH'...\"\n\tif ! git_config_bool_exists \"rebase.autostash\"; then\n\t\trequire_clean_working_tree\n\tfi\n\trequire_branch \"$BRANCH\"\n\n\tgit_local_branch_exists \"$BASE_BRANCH\" || die \"The base '$BASE_BRANCH' doesn't exists locally or is not a branch. Can't rebase the support branch '$BRANCH'.\"\n\n\tgit_do checkout -q \"$BRANCH\"  || die \"Could not check out branch '$BRANCH'.\"\n\tif flag interactive; then\n\t\topts=\"$opts -i\"\n\tfi\n\tif flag preserve_merges; then\n\t\topts=\"$opts -p\"\n\tfi\n\tgit_do rebase $opts \"$BASE_BRANCH\"\n}\n"
        },
        {
          "name": "git-flow-version",
          "type": "blob",
          "size": 2.1220703125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\nGITFLOW_VERSION=1.12.4-dev0\n\ninitialize() {\n\t# A function can not be empty. Comments count as empty.\n\tlocal FOO=''\n}\n\nusage() {\n\tOPTIONS_SPEC=\"\\\ngit flow version\n\nShows version information.\n\nFor more specific help type the command followed by --help\n--\n\"\n\tflags_help\n}\n\ncmd_default() {\n\techo \"$GITFLOW_VERSION (AVH Edition)\"\n}\n\ncmd_help() {\n\tusage\n\texit 0\n}\n"
        },
        {
          "name": "gitflow-common",
          "type": "blob",
          "size": 19.373046875,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# git-flow -- A collection of Git extensions to provide high-level\n# repository operations for Vincent Driessen's branching model.\n#\n# A blog post presenting this model is found at:\n#    http://blog.avirtualhome.com/development-workflow-using-git/\n#\n# Feel free to contribute to this project at:\n#    http://github.com/petervanderdoes/gitflow\n#\n# Authors:\n# Copyright 2012-2019 Peter van der Does. All rights reserved.\n#\n# Original Author:\n# Copyright 2010 Vincent Driessen. All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without\n# modification, are permitted provided that the following conditions are met:\n#\n# 1. Redistributions of source code must retain the above copyright notice, this\n#    list of conditions and the following disclaimer.\n# 2. Redistributions in binary form must reproduce the above copyright notice,\n#    this list of conditions and the following disclaimer in the documentation\n#    and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\n# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR\n# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\n# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\n# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\n# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n#\n\n#\n# Common functionality\n#\n\n# Shell output\nwarn() { echo \"$@\" >&2; }\ndie() { warn \"Fatal: $@\"; exit 1; }\ndie_help() { warn $@; flags_help; exit 1; }\n\nescape() {\n\techo \"$1\" | sed 's/\\([\\.\\$\\*]\\)/\\\\\\1/g'\n}\n\n#\n# String contains function\n# $1 haystack\n# $2 Needle\n#\ncontains() {\n\tlocal return\n\n\tcase $1 in\n\t\t*$2*)\n\t\t\treturn=$FLAGS_TRUE\n\t\t\t;;\n\t\t*)\n\t\t\treturn=$FLAGS_FALSE\n\t\t\t;;\n\tesac\n\treturn $return\n}\n\n# Basic math\nmin() { [ \"$1\" -le \"$2\" ] && echo \"$1\" || echo \"$2\"; }\nmax() { [ \"$1\" -ge \"$2\" ] && echo \"$1\" || echo \"$2\"; }\n\n# Basic string matching\nstartswith() { [ \"$1\" != \"${1#$2}\" ]; }\nendswith() { [ \"$1\" != \"${1%$2}\" ]; }\n\n# Convenience functions for checking shFlags flags\nflag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -eq $FLAGS_TRUE ]; }\nnoflag() { local FLAG; eval FLAG='$FLAGS_'$1; [ $FLAG -ne $FLAGS_TRUE ]; }\n\n# check_boolean\n# Check if given value can be interpreted as a boolean\n#\n# This function determines if the passed parameter is a valid boolean value.\n#\n# Param $1: string Value to check if it's a valid boolean\n#\n# Return: string FLAGS_TRUE|FLAGS_FALSE|FLAGS_ERROR\n#\tFLAGS_TRUE if the parameter is a boolean TRUE\n#\tFLAGS_FALSE if the parameter is a boolean FALSE\n#\tFLAGS_ERROR if the parameter is not a boolean\n#\ncheck_boolean() {\n\tlocal _return _value\n\t_value=\"${1}\"\n\tcase \"${_value}\" in\n\t${FLAGS_TRUE} | [yY] | [yY][eE][sS] | [tT] | [tT][rR][uU][eE])\n\t\t_return=${FLAGS_TRUE}\n\t\t;;\n\t${FLAGS_FALSE} | [nN] | [nN][oO] | [fF] | [fF][aA][lL][sS][eE])\n\t\t_return=${FLAGS_FALSE}\n\t\t;;\n\n\t*)\n\t\t_return=${FLAGS_ERROR}\n\t\t;;\n\tesac\n\tunset _value\n\treturn ${_return}\n}\n\n#\n# Git specific common functionality\n#\n\ngit_local_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/heads; }\ngit_remote_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/remotes; }\ngit_all_branches() { git for-each-ref --sort refname --format='%(refname:short)' refs/remotes refs/heads; }\ngit_all_tags() { git for-each-ref --format='%(refname:short)' refs/tags; }\n\ngit_local_branches_prefixed() {\n\t[ -z $1 ] && die \"Prefix parameter missing.\" # This should never happen.\n\tgit for-each-ref --format='%(refname:short)' refs/heads/$1\\* ;\n}\n\ngit_current_branch() {\n\tlocal branch_name\n\n\tbranch_name=\"$(git symbolic-ref --quiet HEAD)\"\n\t[ -z $branch_name ] && branch_name=\"(unnamed branch)\" || branch_name=\"$(git for-each-ref --format='%(refname:short)' $branch_name)\"\n\techo \"$branch_name\"\n}\n\ngit_is_clean_working_tree() {\n\tgit rev-parse --verify HEAD >/dev/null || exit 1\n\tgit update-index -q --ignore-submodules --refresh\n\n\t# Check for unstaged changes\n\tgit diff-files --quiet --ignore-submodules || return 1\n\n\t# Check for Uncommited changes\n\tgit diff-index --cached --quiet --ignore-submodules HEAD -- || return 2\n\n\treturn 0\n}\n\ngit_repo_is_headless() {\n\t! git rev-parse --quiet --verify HEAD >/dev/null 2>&1\n}\n\ngit_local_branch_exists() {\n\t[ -n \"$1\" ] || die \"Missing branch name\"\n\t[ -n \"$(git for-each-ref --format='%(refname:short)' refs/heads/$1)\" ]\n}\n\ngit_remote_branch_exists() {\n\t[ -n \"$1\" ] || die \"Missing branch name\"\n\t[ -n \"$(git for-each-ref --format='%(refname:short)' refs/remotes/$1)\" ]\n}\n\ngit_remote_branch_delete() {\n\t[ -n \"$1\" ] || die \"Missing branch name\"\n\tif git_remote_branch_exists \"$ORIGIN/$1\"; then\n\t\tgit_do push \"$ORIGIN\" :\"$1\" || die \"Could not delete the remote $1 in $ORIGIN.\"\n\t\treturn 0\n\telse\n\t\twarn \"Trying to delete the remote branch $1, but it does not exists in $ORIGIN\"\n\t\treturn 1\n\tfi\n}\n\ngit_branch_exists() {\n\t[ -n \"$1\" ] || die \"Missing branch name\"\n\tgit_local_branch_exists \"$1\" || git_remote_branch_exists \"$ORIGIN/$1\"\n}\n\ngit_tag_exists() {\n\t[ -n \"$1\" ] || die \"Missing tag name\"\n\t[ -n \"$(git for-each-ref --format='%(refname:short)' refs/tags/$1)\" ]\n}\n\ngit_config_bool_exists() {\n\tlocal value\n\n\t[ -n \"$1\" ] || die \"Missing config option\"\n\tvalue=$(git config --get --bool $1)\n\t[ \"$value\" = \"true\" ]\n}\n#\n# git_compare_refs()\n#\n# Tests whether two references have diverged and need merging\n# first. It returns error codes to provide more detail, like so:\n#\n# 0    References point to the same commit\n# 1    First given reference needs fast-forwarding\n# 2    Second given reference needs fast-forwarding\n# 3    References need a real merge\n# 4    There is no merge base, i.e. the references have no common ancestors\n#\ngit_compare_refs() {\n\tlocal commit1 commit2 base\n\n\tcommit1=$(git rev-parse \"$1\"^{})\n\tcommit2=$(git rev-parse \"$2\"^{})\n\tif [ \"$commit1\" != \"$commit2\" ]; then\n\t\tbase=$(git merge-base \"$commit1\" \"$commit2\")\n\t\tif [ $? -ne 0 ]; then\n\t\t\treturn 4\n\t\telif [ \"$commit1\" = \"$base\" ]; then\n\t\t\treturn 1\n\t\telif [ \"$commit2\" = \"$base\" ]; then\n\t\t\treturn 2\n\t\telse\n\t\t\treturn 3\n\t\tfi\n\telse\n\t\treturn 0\n\tfi\n}\n\n#\n# git_is_branch_merged_into()\n#\n# Checks whether branch $1 is successfully merged into $2\n#\ngit_is_branch_merged_into() {\n\tlocal merge_hash base_hash\n\n\tmerge_hash=$(git merge-base \"$1\"^{} \"$2\"^{})\n\tbase_hash=$(git rev-parse \"$1\"^{})\n\n\t# If the hashes are equal, the branches are merged.\n\t[ \"$merge_hash\" = \"$base_hash\" ]\n}\n\n#\n# git_is_ancestor()\n#\n# This is the same function as git_is_branch_merged_into but\n# for readability given a different name.\n#\ngit_is_ancestor() {\n\tgit_is_branch_merged_into \"$1\" \"$2\"\n}\n\n#\n# git_fetch_branch()\n#\n# $1 Origin - Where to fetch from\n# $2 Branch - Which branch to fetch\n#\n# This fetches the given branch from the given origin.\n# Instead of storing it in FETCH_HEAD it will be stored in\n# refs/remotes/<origin>/<branch>\n#\ngit_fetch_branch() {\n\tlocal origin branch\n\n\t[ -n \"$1\" ] || die \"Missing origin\"\n\t[ -n \"$2\" ] || die \"Missing branch name\"\n\torigin=\"$1\"\n\tbranch=\"$2\"\n\tif git_remote_branch_exists \"$origin/$branch\"; then\n\t\tgit_do fetch -q \"$origin\" \"$branch\" || die \"Could not fetch $branch from $origin.\"\n\telse\n\t\twarn \"Trying to fetch branch '$origin/$branch' but it does not exist.\"\n\tfi\n}\n\n#\n# gitflow specific common functionality\n#\n\n# Function used to check if the repository is git-flow enabled.\ngitflow_has_master_configured() {\n\tlocal master\n\n\tmaster=$(git config --get gitflow.branch.master)\n\t[ \"$master\" != \"\" ] && git_local_branch_exists \"$master\"\n}\n\ngitflow_has_develop_configured() {\n\tlocal develop\n\n\tdevelop=$(git config --get gitflow.branch.develop)\n\t[ \"$develop\" != \"\" ] && git_local_branch_exists \"$develop\"\n}\n\ngitflow_is_initialized() {\n\tgitflow_has_master_configured                    && \\\n\tgitflow_has_develop_configured                   && \\\n\t[ \"$(git config --get gitflow.branch.master)\" != \"$(git config --get gitflow.branch.develop)\" ] && \\\n\tgit config --get-regexp gitflow.prefix >/dev/null 2>&1\n}\n\n# Loading settings that can be overridden using git config\ngitflow_load_settings() {\n\texport GIT_CURRENT_REPO_DIR=\"$(git rev-parse --show-toplevel 2>/dev/null)\"\n\tDOT_GIT_DIR=$(git rev-parse --git-dir)\n\texport DOT_GIT_DIR=\"$(cd ${DOT_GIT_DIR} >/dev/null 2>&1 && pwd)\"\n\texport HOOKS_DIR=\"$(git config --get gitflow.path.hooks || echo ${DOT_GIT_DIR}/hooks)\" # the second option is used to support previous versions of git-flow\n\texport MASTER_BRANCH=$(git config --get gitflow.branch.master)\n\texport DEVELOP_BRANCH=$(git config --get gitflow.branch.develop)\n\texport ORIGIN=$(git config --get gitflow.origin || echo origin)\n\n\tGITFLOW_CONFIG=\"$DOT_GIT_DIR/gitflow_config\"\n\tif [ -f \"$GITFLOW_CONFIG\" ]; then # move all settings from old .git/gitflow_config to the local conf.\n\t\twarn \"Migrating old \\\"$GITFLOW_CONFIG\\\" to the \\\"--local\\\" repo config.\"\n\t\t_config_lines=`git config --list --file=\"$GITFLOW_CONFIG\"`;\n\t\tfor _config_line in ${_config_lines}; do\n\t\t\t_key=${_config_line%=*}\n\t\t\t_value=${_config_line#=*}\n\t\t\tgit_do config --local gitflow.${_key} ${_value}\n\t\tdone;\n\t\tmv \"$GITFLOW_CONFIG\" \"$GITFLOW_CONFIG\".backup 2>/dev/null\n\tfi\n}\n\n#\n# gitflow_resolve_nameprefix\n#\n# Inputs:\n# $1 = name prefix to resolve\n# $2 = branch prefix to use\n#\n# Searches branch names from git_local_branches() to look for a unique\n# branch name whose name starts with the given name prefix.\n#\n# There are multiple exit codes possible:\n# 0: The unambiguous full name of the branch is written to stdout\n#    (success)\n# 1: No match is found.\n# 2: Multiple matches found. These matches are written to stderr\n#\ngitflow_resolve_nameprefix() {\n\tlocal name prefix\n\tlocal match matches num_matches\n\n\tname=$1\n\tprefix=$2\n\n\t# first, check if there is a perfect match\n\tif git_local_branch_exists \"$prefix$name\"; then\n\t\techo \"$name\"\n\t\treturn 0\n\tfi\n\n\tmatches=$(echo \"$(git_local_branches)\" | grep \"^$(escape \"$prefix$name\")\")\n\tnum_matches=$(echo \"$matches\" | wc -l)\n\tif [ -z \"$matches\" ]; then\n\t\t# no prefix match, so take it literally\n\t\twarn \"No branches match '$prefix$name*'\"\n\t\treturn 1\n\telse\n\t\tif [ $num_matches -eq 1 ]; then\n\t\t\techo \"${matches#$prefix}\"\n\t\t\treturn 0\n\t\telse\n\t\t\t# multiple matches, cannot decide\n\t\t\twarn \"Multiple branches match prefix '$name':\"\n\t\t\tfor match in $matches; do\n\t\t\t\twarn \"- $match\"\n\t\t\tdone\n\t\t\treturn 2\n\t\tfi\n\tfi\n}\n\n#\n# Check if the given branch is a git-flow branch\n#\ngitflow_is_prefixed_branch() {\n\tlocal branch return\n\n\tbranch=$1\n\tcase $branch in\n\t$(git config --get gitflow.prefix.feature)* | \\\n\t$(git config --get gitflow.prefix.bugfix)* | \\\n\t$(git config --get gitflow.prefix.release)* | \\\n\t$(git config --get gitflow.prefix.hotfix)*  | \\\n\t$(git config --get gitflow.prefix.support)* )\n\t\treturn=0\n\t\t;;\n\t*)\n\t\treturn=1\n\t\t;;\n\tesac\n\treturn $return\n}\n#\n# Update the config with the base of a new git-flow branch.\n#\n# @param $1 Base of the new branch\n# @param $2 Name of the branch\n#\ngitflow_config_set_base_branch() {\n\tlocal base branch\n\n\tbase=$1\n\tbranch=$2\n\t$(git_do config --local \"gitflow.branch.$branch.base\" $base)\n}\n\n#\n# Get the base of a branch as set by gitflow_set_branch\n#\n# @param $1 Name of the branch\n# @return string|empty String when a base is found otherwise empty\n#\ngitflow_config_get_base_branch() {\n\tlocal branch\n\n\tbranch=$1\n\techo $(git config --local --get \"gitflow.branch.$branch.base\")\n}\n\n#\n# Remove the section that contains the base of a branch as set by gitflow_set_branch\n#\n# @param $1 Name of the branch\n#\ngitflow_config_remove_base_section() {\n\tlocal branch\n\n\tbranch=$1\n\t$(git_do config --local --remove-section \"gitflow.branch.$branch\" 2>/dev/null)\n}\n\n#\n# Remove the base of the git-flow branch from the.\n# @param $1 Name of the branch\n#\ngitflow_config_remove_base_branch() {\n\tlocal base\n\n\tbase=$1\n\t$(git_do config --local --unset \"gitflow.branch.$branch.base\" 2>/dev/null)\n}\n\n#\n# Remove the base of the git-flow branch from the.\n# @param $1 Name of the branch\n#\ngitflow_config_rename_sections() {\n\tlocal new\n\tlocal old\n\n\told=$1\n\tnew=$2\n\t$(git_do config --local --rename-section \"gitflow.branch.$old\" \"gitflow.branch.$new\" 2>/dev/null)\n}\n\n# gitflow_override_flag_boolean()\n#\n# Override a boolean flag\n#\n# Param $1: string The name of the config variable e.g. \"feature.start.fetch\"\n# Param $2: string The flag name\n#\ngitflow_override_flag_boolean() {\n\tlocal _variable\n\n\t_variable=$(git config --bool --get gitflow.$1 2>&1)\n\tcase $? in\n\t0)\n\t\t[ \"${_variable}\" = \"true\" ] && eval \"FLAGS_${2}=${FLAGS_TRUE}\" || eval \"FLAGS_${2}=${FLAGS_FALSE}\"\n\t\t;;\n\t128)\n\t\tdie \"${_variable}\"\n\t\t;;\n\tesac\n\tunset _variable\n\treturn ${FLAGS_TRUE}\n}\n\n# gitflow_override_flag_string()\n#\n# Override a string flag\n#\n# Param $1: string The name of the config variable e.g. \"feature.start.fetch\"\n# Param $2: string The flag name\n#\ngitflow_override_flag_string() {\n\tlocal _variable\n\n\t_variable=$(git config --get gitflow.$1 2>&1)\n\tcase $? in\n\t0)\n\t\teval \"FLAGS_${2}=\\\"${_variable}\\\"\"\n\t\t;;\n\tesac\n\tunset _variable\n\treturn ${FLAGS_TRUE}\n}\n\n# gitflow_create_squash_message()\n#\n# Create the squash message, overriding the one generated by git itself\n#\n# Param $1: string The line to be added\n# Param $2: string The base of the branch that will me merged\n# Param $3: string The branch that will be merged.\n#\ngitflow_create_squash_message() {\n\techo Squashed commit of the following:\n\techo\n\techo $1\n\techo\n\tgit log --no-merges --pretty=medium ^\"$2\" $3\n}\n\n#\n# Parameter functions\n#\ngitflow_require_name_arg() {\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tdie_help \"Missing argument <name>\"\n\tfi\n}\n\ngitflow_expand_nameprefix_arg() {\n\tlocal expanded_name exitcode\n\n\tgitflow_require_name_arg\n\n\texpanded_name=$(gitflow_resolve_nameprefix \"$NAME\" \"$PREFIX\")\n\texitcode=$?\n\tcase $exitcode in\n\t0)\n\t\tNAME=$expanded_name\n\t\tBRANCH=$PREFIX$NAME\n\t\t;;\n\t*)\n\t\texit 1\n\t\t;;\n\tesac\n}\n\ngitflow_require_version_arg() {\n\tif [ \"$VERSION\" = \"\" ]; then\n\t\tdie_help \"Missing argument <version>\"\n\tfi\n}\n\ngitflow_expand_versionprefix_arg() {\n\tlocal expanded_version exitcode\n\n\tgitflow_require_version_arg\n\n\tversion=$(gitflow_resolve_nameprefix \"$VERSION\" \"$PREFIX\")\n\texitcode=$?\n\tcase $exitcode in\n\t0)\n\t\tVERSION=$version\n\t\tBRANCH=$PREFIX$VERSION\n\t\t;;\n\t*)\n\t\texit 1\n\t\t;;\n\tesac\n}\n\n\ngitflow_require_base_arg() {\n\tif [ \"$BASE\" = \"\" ]; then\n\t\tdie_help \"Missing argument <base>\"\n\tfi\n}\n\ngitflow_use_current_branch_name() {\n\tlocal current_branch\n\n\tcurrent_branch=$(git_current_branch)\n\n\tif startswith \"$current_branch\" \"$PREFIX\"; then\n\t\tBRANCH=$current_branch\n\t\tNAME=${BRANCH#$PREFIX}\n\telse\n\t\twarn \"The current HEAD is no ${SUBCOMMAND} branch.\"\n\t\twarn \"Please specify a <name> argument.\"\n\t\texit 1\n\tfi\n}\n\ngitflow_use_current_branch_version() {\n\tlocal current_branch\n\n\tcurrent_branch=$(git_current_branch)\n\n\tif startswith \"$current_branch\" \"$PREFIX\"; then\n\t\tBRANCH=$current_branch\n\t\tVERSION=${BRANCH#$PREFIX}\n\telse\n\t\twarn \"The current HEAD is no ${SUBCOMMAND} branch.\"\n\t\twarn \"Please specify a <version> argument.\"\n\t\texit 1\n\tfi\n}\n\ngitflow_rename_branch() {\n\t# Parse arguments\n\tFLAGS \"$@\" || exit $?\n\teval set -- \"${FLAGS_ARGV}\"\n\n\t# read arguments into global variables\n\tif [ -z $1 ]; then\n\t\tNEW_NAME=''\n\telse\n\t\tNEW_NAME=$1\n\tfi\n\n\tif [ -z $2 ]; then\n\t\tNAME=''\n\telse\n\t\tNAME=$2\n\tfi\n\tBRANCH=${PREFIX}${NAME}\n\tNEW_BRANCH=${PREFIX}${NEW_NAME}\n\n\tif [ -z \"$NEW_NAME\" ]; then\n\t\tdie \"No new name given.\"\n\tfi\n\n\t# Use current branch if no name is given\n\tif [ \"$NAME\" = \"\" ]; then\n\t\tgitflow_use_current_branch_name\n\tfi\n\n\n\t# Sanity checks\n\trequire_branch \"$BRANCH\"\n\trequire_branch_absent \"$NEW_BRANCH\"\n\n\trun_pre_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\tgit_do branch -m \"$BRANCH\" \"$NEW_BRANCH\" || die \"Error renaming branch '$BRANCH' to '$NEW_BRANCH'\"\n\tgitflow_config_rename_sections \"$BRANCH\" \"$NEW_BRANCH\"\n\trun_post_hook \"$NAME\" \"$ORIGIN\" \"$BRANCH\"\n\n\techo\n\techo \"Summary of actions:\"\n\techo \"- Branch '$BRANCH' has been renamed to '$NEW_BRANCH'.\"\n\techo \"- You are now on branch '$(git_current_branch)'\"\n\techo\n}\n#\n# Assertions for use in git-flow subcommands\n#\n\nrequire_git_repo() {\n\tgit rev-parse 2>/dev/null || die \"Not a git repository\"\n}\n\nrequire_gitflow_initialized() {\n\tgitflow_is_initialized || die \"Not a gitflow-enabled repo yet. Please run 'git flow init' first.\"\n\t$(git config --get gitflow.prefix.versiontag >/dev/null 2>&1) || die \"Version tag not set. Please run 'git flow init'.\"\n}\n\nrequire_clean_working_tree() {\n\tlocal result\n\n\tgit_is_clean_working_tree\n\tresult=$?\n\tif [ $result -eq 1 ]; then\n\t\tdie \"Working tree contains unstaged changes. Aborting.\"\n\tfi\n\tif [ $result -eq 2 ]; then\n\t\tdie \"Index contains uncommited changes. Aborting.\"\n\tfi\n}\n\nrequire_base_is_local_branch() {\n\tgit_local_branch_exists \"$1\" || die \"Base '$1' needs to be a branch. It does not exist and is required.\"\n}\n\nrequire_local_branch() {\n\tgit_local_branch_exists \"$1\" || die \"Local branch '$1' does not exist and is required.\"\n}\n\nrequire_remote_branch() {\n\tgit_remote_branch_exists \"$1\" || die \"Remote branch '$1' does not exist and is required.\"\n}\n\nrequire_branch() {\n\tgit_branch_exists \"$1\" || die \"Branch '$1' does not exist and is required.\"\n}\n\nrequire_branch_absent() {\n\tgit_branch_exists \"$1\" && die \"Branch '$1' already exists. Pick another name.\"\n}\n\nrequire_local_branch_absent() {\n\tgit_local_branch_exists \"$1\" && die \"Branch '$1' already exists. Pick another name.\"\n}\n\nrequire_tag_absent() {\n\tgit_tag_exists \"$1\" && die \"Tag '$1' already exists. Pick another name.\"\n}\n\nrequire_branches_equal() {\n\tlocal compare_refs_result\n\n\trequire_local_branch \"$1\"\n\trequire_remote_branch \"$2\"\n\tgit_compare_refs \"$1\" \"$2\"\n\tcompare_refs_result=$?\n\n\tif [ $compare_refs_result -gt 0 ]; then\n\t\twarn \"Branches '$1' and '$2' have diverged.\"\n\t\tif [ $compare_refs_result -eq 1 ]; then\n\t\t\tdie \"And branch '$1' may be fast-forwarded.\"\n\t\telif [ $compare_refs_result -eq 2 ]; then\n\t\t\t# Warn here, since there is no harm in being ahead\n\t\t\twarn \"And local branch '$1' is ahead of '$2'.\"\n\t\telse\n\t\t\tdie \"Branches need merging first.\"\n\t\tfi\n\tfi\n}\n\n#\n# Show commands if flag is set.\n#\ngit_do() {\n\tif flag showcommands; then\n\t\techo \"git $@\" >&2\n\tfi\n\n\tgit \"$@\"\n}\n\n#\n# run_filter_hook\n#\n# Looks for a Git hook script called as defined by the first variable\n#\n#     filter-flow-command\n#\n# If such a hook script exists and is executable, it is called with the given\n# positional arguments.\n#\nrun_filter_hook() {\n\tlocal command scriptfile return\n\n\tcommand=$1\n\tshift\n\tscriptfile=\"${HOOKS_DIR}/filter-flow-${command}\"\n\tif [ -x \"$scriptfile\" ]; then\n\t\treturn=`$scriptfile \"$@\"`\n\t\tif [ $? -eq 127 ]; then\n\t\t\techo \"$return\"\n\t\t\texit 127\n\t\tfi\n\t\t\techo $return\n\telse\n\t\techo \"$@\"\n\tfi\n}\n\n#\n# run_pre_hook\n#\n# Looks for a Git hook script called\n#\n#     pre-flow-<subcmd>-<subaction>\n#\n# If such a hook script exists and is executable, it is called with the given\n# positional arguments.  If its return code non-zero, the git-flow action is\n# aborted.\n#\nrun_pre_hook() {\n\tlocal scriptfile exitcode\n\n\tscriptfile=\"${HOOKS_DIR}/pre-flow-${SUBCOMMAND}-${SUBACTION}\"\n\texitcode=0\n\tif [ -x \"$scriptfile\" ]; then\n\t\t\"$scriptfile\" \"$@\"\n\t\texitcode=$?\n\n\t\tif [ $exitcode -gt 0 ]; then\n\t\t\tdie \"Hook command $scriptfile ended with exit code $exitcode.\"\n\t\tfi\n\tfi\n}\n\n#\n# run_post_hook\n#\n# Looks for a Git hook script called\n#\n#     post-flow-<subcmd>-<subaction>\n#\n# If such a hook script exists and is executable, it is called with the given\n# positional arguments.  Its return code is ignored.\n#\nrun_post_hook() {\n\tlocal scriptfile\n\n\tscriptfile=\"${HOOKS_DIR}/post-flow-${SUBCOMMAND}-${SUBACTION}\"\n\tif [ -x \"$scriptfile\" ]; then\n\t\t\"$scriptfile\" \"$@\"\n\tfi\n}\n\nflags_help() {\n\teval \"$( echo \"$OPTIONS_SPEC\" | git rev-parse --parseopt -- \"-h\" || echo exit $? )\"\n}\n"
        },
        {
          "name": "gitflow-shFlags",
          "type": "blob",
          "size": 34.8017578125,
          "content": "# $Id$\n# vim:et:ft=sh:sts=2:sw=2\n#\n# Copyright 2008 Kate Ward. All Rights Reserved.\n# Released under the LGPL (GNU Lesser General Public License)\n#\n# shFlags -- Advanced command-line flag library for Unix shell scripts.\n# http://code.google.com/p/shflags/\n#\n# Author: kate.ward@forestent.com (Kate Ward)\n#\n# This module implements something like the google-gflags library available\n# from http://code.google.com/p/google-gflags/.\n#\n# FLAG TYPES: This is a list of the DEFINE_*'s that you can do.  All flags take\n# a name, default value, help-string, and optional 'short' name (one-letter\n# name).  Some flags have other arguments, which are described with the flag.\n#\n# DEFINE_string: takes any input, and intreprets it as a string.\n#\n# DEFINE_boolean: does not take any arguments. Say --myflag to set\n#   FLAGS_myflag to true, or --nomyflag to set FLAGS_myflag to false. For short\n#   flags, passing the flag on the command-line negates the default value, i.e.\n#   if the default is true, passing the flag sets the value to false.\n#\n# DEFINE_float: takes an input and intreprets it as a floating point number. As\n#   shell does not support floats per-se, the input is merely validated as\n#   being a valid floating point value.\n#\n# DEFINE_integer: takes an input and intreprets it as an integer.\n#\n# SPECIAL FLAGS: There are a few flags that have special meaning:\n#   --help (or -?)  prints a list of all the flags in a human-readable fashion\n#   --flagfile=foo  read flags from foo.  (not implemented yet)\n#   --              as in getopt(), terminates flag-processing\n#\n# EXAMPLE USAGE:\n#\n#   -- begin hello.sh --\n#   #! /bin/sh\n#   . ./shflags\n#   DEFINE_string name 'world' \"somebody's name\" n\n#   FLAGS \"$@\" || exit $?\n#   eval set -- \"${FLAGS_ARGV}\"\n#   echo \"Hello, ${FLAGS_name}.\"\n#   -- end hello.sh --\n#\n#   $ ./hello.sh -n Kate\n#   Hello, Kate.\n#\n# CUSTOMIZABLE BEHAVIOR:\n#\n# A script can override the default 'getopt' command by providing the path to\n# an alternate implementation by defining the FLAGS_GETOPT_CMD variable.\n#\n# NOTES:\n#\n# * Not all systems include a getopt version that supports long flags. On these\n#   systems, only short flags are recognized.\n\n#==============================================================================\n# shFlags\n#\n# Shared attributes:\n#   flags_error:  last error message\n#   flags_output: last function output (rarely valid)\n#   flags_return: last return value\n#\n#   __flags_longNames: list of long names for all flags\n#   __flags_shortNames: list of short names for all flags\n#   __flags_boolNames: list of boolean flag names\n#\n#   __flags_opts: options parsed by getopt\n#\n# Per-flag attributes:\n#   FLAGS_<flag_name>: contains value of flag named 'flag_name'\n#   __flags_<flag_name>_default: the default flag value\n#   __flags_<flag_name>_help: the flag help string\n#   __flags_<flag_name>_short: the flag short name\n#   __flags_<flag_name>_type: the flag type\n#\n# Notes:\n# - lists of strings are space separated, and a null value is the '~' char.\n\n# return if FLAGS already loaded\n[ -n \"${FLAGS_VERSION:-}\" ] && return 0\nFLAGS_VERSION='1.0.4pre'\n\n# return values that scripts can use\nFLAGS_TRUE=0\nFLAGS_FALSE=1\nFLAGS_ERROR=2\n\n# determine some reasonable command defaults\n__FLAGS_UNAME_S=`uname -s`\ncase \"${__FLAGS_UNAME_S}\" in\n  BSD) __FLAGS_EXPR_CMD='gexpr' ;;\n  *) __FLAGS_EXPR_CMD='expr' ;;\nesac\n\n# commands a user can override if needed\nFLAGS_EXPR_CMD=${FLAGS_EXPR_CMD:-${__FLAGS_EXPR_CMD}}\nFLAGS_GETOPT_CMD=${FLAGS_GETOPT_CMD:-getopt}\n\n# specific shell checks\nif [ -n \"${ZSH_VERSION:-}\" ]; then\n  setopt |grep \"^shwordsplit$\" >/dev/null\n  if [ $? -ne ${FLAGS_TRUE} ]; then\n\t_flags_fatal 'zsh shwordsplit option is required for proper zsh operation'\n  fi\n  if [ -z \"${FLAGS_PARENT:-}\" ]; then\n\t_flags_fatal \"zsh does not pass \\$0 through properly. please declare' \\\n\\\"FLAGS_PARENT=\\$0\\\" before calling shFlags\"\n  fi\nfi\n\n# can we use built-ins?\n( echo \"${FLAGS_TRUE#0}\"; ) >/dev/null 2>&1\nif [ $? -eq ${FLAGS_TRUE} ]; then\n  __FLAGS_USE_BUILTIN=${FLAGS_TRUE}\nelse\n  __FLAGS_USE_BUILTIN=${FLAGS_FALSE}\nfi\n\n#\n# constants\n#\n\n# reserved flag names\n__FLAGS_RESERVED_LIST=' ARGC ARGV ERROR FALSE GETOPT_CMD HELP PARENT TRUE '\n__FLAGS_RESERVED_LIST=\"${__FLAGS_RESERVED_LIST} VERSION \"\n\n# getopt version\n__FLAGS_GETOPT_VERS_STD=0\n__FLAGS_GETOPT_VERS_ENH=1\n__FLAGS_GETOPT_VERS_BSD=2\n\n${FLAGS_GETOPT_CMD} >/dev/null 2>&1\ncase $? in\n  0) __FLAGS_GETOPT_VERS=${__FLAGS_GETOPT_VERS_STD} ;;  # bsd getopt\n  1)\n    # Probably BusyBox. Getting a return of 4 with -T will confirm\n    ${FLAGS_GETOPT_CMD} -T >/dev/null 2>&1\n    if [ \"$?\" == 4 ] ; then\n      __FLAGS_GETOPT_VERS=${__FLAGS_GETOPT_VERS_ENH}\n    else\n      _flags_fatal 'unable to determine getopt version'\n    fi\n    ;;\n  2)\n\t# TODO(kward): look into '-T' option to test the internal getopt() version\n\tif [ \"`${FLAGS_GETOPT_CMD} --version`\" = '-- ' ]; then\n\t  __FLAGS_GETOPT_VERS=${__FLAGS_GETOPT_VERS_STD}\n\telse\n\t  __FLAGS_GETOPT_VERS=${__FLAGS_GETOPT_VERS_ENH}\n\tfi\n\t;;\n  *) _flags_fatal 'unable to determine getopt version' ;;\nesac\n\n# getopt optstring lengths\n__FLAGS_OPTSTR_SHORT=0\n__FLAGS_OPTSTR_LONG=1\n\n__FLAGS_NULL='~'\n\n# flag info strings\n__FLAGS_INFO_DEFAULT='default'\n__FLAGS_INFO_HELP='help'\n__FLAGS_INFO_SHORT='short'\n__FLAGS_INFO_TYPE='type'\n\n# flag lengths\n__FLAGS_LEN_SHORT=0\n__FLAGS_LEN_LONG=1\n\n# flag types\n__FLAGS_TYPE_NONE=0\n__FLAGS_TYPE_BOOLEAN=1\n__FLAGS_TYPE_FLOAT=2\n__FLAGS_TYPE_INTEGER=3\n__FLAGS_TYPE_STRING=4\n\n# set the constants readonly\n__flags_constants=`set |awk -F= '/^FLAGS_/ || /^__FLAGS_/ {print $1}'`\nfor __flags_const in ${__flags_constants}; do\n  # skip certain flags\n  case ${__flags_const} in\n\tFLAGS_HELP) continue ;;\n\tFLAGS_PARENT) continue ;;\n  esac\n  # set flag readonly\n  if [ -z \"${ZSH_VERSION:-}\" ]; then\n\treadonly ${__flags_const}\n  else  # handle zsh\n\tcase ${ZSH_VERSION} in\n\t  [123].*) readonly ${__flags_const} ;;\n\t  *) readonly -g ${__flags_const} ;;  # declare readonly constants globally\n\tesac\n  fi\ndone\nunset __flags_const __flags_constants\n\n#\n# internal variables\n#\n\n# space separated lists\n__flags_boolNames=' '  # boolean flag names\n__flags_longNames=' '  # long flag names\n__flags_shortNames=' '  # short flag names\n__flags_definedNames=' ' # defined flag names (used for validation)\n__flags_nonegateNames=' '\n\n__flags_columns=''  # screen width in columns\n__flags_opts=''  # temporary storage for parsed getopt flags\n\n#------------------------------------------------------------------------------\n# private functions\n#\n\n# logging functions\n_flags_debug() { echo \"flags:DEBUG $@\" >&2; }\n_flags_warn() { echo \"flags:WARN $@\" >&2; }\n_flags_error() { echo \"flags:ERROR $@\" >&2; }\n_flags_fatal() { echo \"flags:FATAL $@\" >&2; exit ${FLAGS_ERROR}; }\n\n# Define a flag.\n#\n# Calling this function will define the following info variables for the\n# specified flag:\n#   FLAGS_flagname - the name for this flag (based upon the long flag name)\n#   __flags_<flag_name>_default - the default value\n#   __flags_flagname_help - the help string\n#   __flags_flagname_short - the single letter alias\n#   __flags_flagname_type - the type of flag (one of __FLAGS_TYPE_*)\n#\n# Args:\n#   _flags__type: integer: internal type of flag (__FLAGS_TYPE_*)\n#   _flags__name: string: long flag name\n#   _flags__default: default flag value\n#   _flags__help: string: help string\n#   _flags__short: string: (optional) short flag name\n# Returns:\n#   integer: success of operation, or error\n_flags_define()\n{\n  if [ $# -lt 4 ]; then\n\tflags_error='DEFINE error: too few arguments'\n\tflags_return=${FLAGS_ERROR}\n\t_flags_error \"${flags_error}\"\n\treturn ${flags_return}\n  fi\n\n  _flags_type_=$1\n  _flags_name_=$2\n  _flags_default_=$3\n  _flags_help_=$4\n  _flags_short_=${5:-${__FLAGS_NULL}}\n\n  _flags_return_=${FLAGS_TRUE}\n  _flags_usName_=`_flags_removeExclamationName ${_flags_name_}`\n  _flags_usName_=`_flags_underscoreName ${_flags_usName_}`\n\n  # check whether the flag name is reserved\n  _flags_itemInList ${_flags_usName_} \"${__FLAGS_RESERVED_LIST}\"\n  if [ $? -eq ${FLAGS_TRUE} ]; then\n\tflags_error=\"flag name (${_flags_name_}) is reserved\"\n\t_flags_return_=${FLAGS_ERROR}\n  fi\n\n  # require short option for getopt that don't support long options\n  if [ ${_flags_return_} -eq ${FLAGS_TRUE} \\\n\t  -a ${__FLAGS_GETOPT_VERS} -ne ${__FLAGS_GETOPT_VERS_ENH} \\\n\t  -a \"${_flags_short_}\" = \"${__FLAGS_NULL}\" ]\n  then\n\tflags_error=\"short flag required for (${_flags_name_}) on this platform\"\n\t_flags_return_=${FLAGS_ERROR}\n  fi\n\n  # check for existing long name definition\n  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then\n\tif _flags_itemInList ${_flags_usName_} ${__flags_definedNames}; then\n\t  flags_error=\"definition for ([no]${_flags_name_}) already exists\"\n\t  _flags_warn \"${flags_error}\"\n\t  _flags_return_=${FLAGS_FALSE}\n\tfi\n  fi\n\n  # check for existing short name definition\n  if [ ${_flags_return_} -eq ${FLAGS_TRUE} \\\n\t  -a \"${_flags_short_}\" != \"${__FLAGS_NULL}\" ]\n  then\n\tif _flags_itemInList \"${_flags_short_}\" ${__flags_shortNames}; then\n\t  flags_error=\"flag short name (${_flags_short_}) already defined\"\n\t  _flags_warn \"${flags_error}\"\n\t  _flags_return_=${FLAGS_FALSE}\n\tfi\n  fi\n\n  # handle default value. note, on several occasions the 'if' portion of an\n  # if/then/else contains just a ':' which does nothing. a binary reversal via\n  # '!' is not done because it does not work on all shells.\n  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then\n\t_flags_isNegate_=${FLAGS_FALSE}\n\tcase ${_flags_type_} in\n\t  ${__FLAGS_TYPE_BOOLEAN})\n\t\tif _flags_validBool \"${_flags_default_}\"; then\n\t\t  case ${_flags_default_} in\n\t\t\ttrue|t|0) _flags_default_=${FLAGS_TRUE} ;;\n\t\t\tfalse|f|1) _flags_default_=${FLAGS_FALSE} ;;\n\t\t  esac\n\t\t  _flags_isNegate ${_flags_name_}\n\t\t  _flags_isNegate_=$?\n\t\telse\n\t\t  flags_error=\"invalid default flag value '${_flags_default_}'\"\n\t\t  _flags_return_=${FLAGS_ERROR}\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_FLOAT})\n\t\tif _flags_validFloat \"${_flags_default_}\"; then\n\t\t  :\n\t\telse\n\t\t  flags_error=\"invalid default flag value '${_flags_default_}'\"\n\t\t  _flags_return_=${FLAGS_ERROR}\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_INTEGER})\n\t\tif _flags_validInt \"${_flags_default_}\"; then\n\t\t  :\n\t\telse\n\t\t  flags_error=\"invalid default flag value '${_flags_default_}'\"\n\t\t  _flags_return_=${FLAGS_ERROR}\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_STRING}) ;;  # everything in shell is a valid string\n\n\t  *)\n\t\tflags_error=\"unrecognized flag type '${_flags_type_}'\"\n\t\t_flags_return_=${FLAGS_ERROR}\n\t\t;;\n\tesac\n  fi\n\n  if [ ${_flags_return_} -eq ${FLAGS_TRUE} ]; then\n\t# store flag information\n\teval \"FLAGS_${_flags_usName_}='${_flags_default_}'\"\n\teval \"__flags_${_flags_usName_}_${__FLAGS_INFO_TYPE}=${_flags_type_}\"\n\teval \"__flags_${_flags_usName_}_${__FLAGS_INFO_DEFAULT}=\\\n\\\"${_flags_default_}\\\"\"\n\teval \"__flags_${_flags_usName_}_${__FLAGS_INFO_HELP}=\\\"${_flags_help_}\\\"\"\n\teval \"__flags_${_flags_usName_}_${__FLAGS_INFO_SHORT}='${_flags_short_}'\"\n\n\t# append flag names to name lists\n\t__flags_shortNames=\"${__flags_shortNames}${_flags_short_} \"\n\t__flags_longNames=\"${__flags_longNames}`_flags_removeExclamationName ${_flags_name_}` \"\n\tif [ ${_flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} \\\n\t  -a  ${_flags_isNegate_} -eq ${FLAGS_TRUE} ]; then\n\t\t__flags_boolNames=\"${__flags_boolNames}no${_flags_name_} \"\n\tfi\n\n\t# append flag names to defined names for later validation checks\n\t__flags_definedNames=\"${__flags_definedNames}${_flags_usName_} \"\n\tif [ ${_flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} ]; then\n\t  if [ ${_flags_isNegate_} -eq ${FLAGS_TRUE} ]; then\n\t\t__flags_definedNames=\"${__flags_definedNames}no${_flags_usName_} \"\n\t  fi\n\tfi\n\n\t# append flag names to nonegateNames names for later validation checks\n\t__flags_definedNames=\"${__flags_definedNames}${_flags_usName_} \"\n\tif [ ${_flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} ]; then\n\t  if [ ${_flags_isNegate_} -eq ${FLAGS_FALSE} ]; then\n\t\t__flags_nonegateNames=\"${__flags_nonegateNames}`_flags_removeExclamationName ${_flags_name_}` \"\n\t  fi\n\tfi\n\n  fi\n\n  flags_return=${_flags_return_}\n  unset _flags_default_ _flags_help_ _flags_name_ _flags_return_ \\\n\t  _flags_short_ _flags_type_ _flags_usName_ _flags_isNegate_\n  [ ${flags_return} -eq ${FLAGS_ERROR} ] && _flags_error \"${flags_error}\"\n  return ${flags_return}\n}\n\n# Underscore a flag name by replacing dashes with underscores.\n#\n# Args:\n#   unnamed: string: log flag name\n# Output:\n#   string: underscored name\n_flags_underscoreName()\n{\n  echo $1 |tr '-' '_'\n}\n\n# Strip potential exclamation mark\n#\n# Args:\n#   unnamed: string: log flag name\n# Output:\n#   string: exclamation stripped from name\n_flags_removeExclamationName()\n{\n  _flags_opt_=$1\n  if _flags_isNegate \"${_flags_opt_}\"; then\n\techo ${_flags_opt_}\n  else\n\t  if _flags_useBuiltin; then\n\t\techo ${_flags_opt_%!*}\n\t  else\n\t\techo ${_flags_opt_}|sed 's/!$//'\n\t  fi\n  fi\n  unset _flags_opt_\n  return ${FLAGS_TRUE}\n}\n\n# Check if a flag ends in an exclamation mark,\n#  if it does, there will not be a negate option\n# Args:\n#   unnamed: string: flag name\n# return:\n#   boolean\n_flags_isNegate()\n{\n  case $1 in\n\t*!) flags_return=${FLAGS_FALSE} ;;\n\t*) flags_return=${FLAGS_TRUE} ;;\n  esac\n  return ${flags_return}\n}\n\n\n# Return valid getopt options using currently defined list of long options.\n#\n# This function builds a proper getopt option string for short (and long)\n# options, using the current list of long options for reference.\n#\n# Args:\n#   _flags_optStr: integer: option string type (__FLAGS_OPTSTR_*)\n# Output:\n#   string: generated option string for getopt\n# Returns:\n#   boolean: success of operation (always returns True)\n_flags_genOptStr()\n{\n  _flags_optStrType_=$1\n\n  _flags_opts_=''\n\n  for _flags_name_ in ${__flags_longNames}; do\n\t_flags_usName_=`_flags_removeExclamationName ${_flags_name_}`\n\t_flags_usName_=`_flags_underscoreName ${_flags_usName_}`\n\t_flags_type_=`_flags_getFlagInfo ${_flags_usName_} ${__FLAGS_INFO_TYPE}`\n\t[ $? -eq ${FLAGS_TRUE} ] || _flags_fatal 'call to _flags_type_ failed'\n\tcase ${_flags_optStrType_} in\n\t  ${__FLAGS_OPTSTR_SHORT})\n\t\t_flags_shortName_=`_flags_getFlagInfo \\\n\t\t\t${_flags_usName_} ${__FLAGS_INFO_SHORT}`\n\t\tif [ \"${_flags_shortName_}\" != \"${__FLAGS_NULL}\" ]; then\n\t\t  _flags_opts_=\"${_flags_opts_}${_flags_shortName_}\"\n\t\t  # getopt needs a trailing ':' to indicate a required argument\n\t\t  [ ${_flags_type_} -ne ${__FLAGS_TYPE_BOOLEAN} ] && \\\n\t\t\t  _flags_opts_=\"${_flags_opts_}:\"\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_OPTSTR_LONG})\n\t\t_flags_opts_=\"${_flags_opts_:+${_flags_opts_},}`_flags_removeExclamationName ${_flags_name_}`\"\n\t\t# getopt needs a trailing ':' to indicate a required argument\n\t\t[ ${_flags_type_} -ne ${__FLAGS_TYPE_BOOLEAN} ] && \\\n\t\t\t_flags_opts_=\"${_flags_opts_}:\"\n\t\t;;\n\tesac\n  done\n\n  echo \"${_flags_opts_}\"\n  unset _flags_name_ _flags_opts_ _flags_optStrType_ _flags_shortName_ \\\n\t  _flags_type_ _flags_usName_\n  return ${FLAGS_TRUE}\n}\n\n# Returns flag details based on a flag name and flag info.\n#\n# Args:\n#   string: underscored flag name\n#   string: flag info (see the _flags_define function for valid info types)\n# Output:\n#   string: value of dereferenced flag variable\n# Returns:\n#   integer: one of FLAGS_{TRUE|FALSE|ERROR}\n_flags_getFlagInfo()\n{\n  # note: adding gFI to variable names to prevent naming conflicts with calling\n  # functions\n  _flags_gFI_usName_=$1\n  _flags_gFI_info_=$2\n\n  _flags_infoVar_=\"__flags_${_flags_gFI_usName_}_${_flags_gFI_info_}\"\n  _flags_strToEval_=\"_flags_infoValue_=\\\"\\${${_flags_infoVar_}:-}\\\"\"\n  eval \"${_flags_strToEval_}\"\n  if [ -n \"${_flags_infoValue_}\" ]; then\n\tflags_return=${FLAGS_TRUE}\n  else\n\t# see if the _flags_gFI_usName_ variable is a string as strings can be\n\t# empty...\n\t# note: the DRY principle would say to have this function call itself for\n\t# the next three lines, but doing so results in an infinite loop as an\n\t# invalid _flags_name_ will also not have the associated _type variable.\n\t# Because it doesn't (it will evaluate to an empty string) the logic will\n\t# try to find the _type variable of the _type variable, and so on. Not so\n\t# good ;-)\n\t_flags_typeVar_=\"__flags_${_flags_gFI_usName_}_${__FLAGS_INFO_TYPE}\"\n\t_flags_strToEval_=\"_flags_typeValue_=\\\"\\${${_flags_typeVar_}:-}\\\"\"\n\teval \"${_flags_strToEval_}\"\n\tif [ \"${_flags_typeValue_}\" = \"${__FLAGS_TYPE_STRING}\" ]; then\n\t  flags_return=${FLAGS_TRUE}\n\telse\n\t  flags_return=${FLAGS_ERROR}\n\t  flags_error=\"missing flag info variable (${_flags_infoVar_})\"\n\tfi\n  fi\n\n  echo \"${_flags_infoValue_}\"\n  unset _flags_gFI_usName_ _flags_gfI_info_ _flags_infoValue_ _flags_infoVar_ \\\n\t  _flags_strToEval_ _flags_typeValue_ _flags_typeVar_\n  [ ${flags_return} -eq ${FLAGS_ERROR} ] && _flags_error \"${flags_error}\"\n  return ${flags_return}\n}\n\n# Check for presense of item in a list.\n#\n# Passed a string (e.g. 'abc'), this function will determine if the string is\n# present in the list of strings (e.g.  ' foo bar abc ').\n#\n# Args:\n#   _flags_str_: string: string to search for in a list of strings\n#   unnamed: list: list of strings\n# Returns:\n#   boolean: true if item is in the list\n_flags_itemInList() {\n  _flags_str_=$1\n  shift\n  _flags_list_=\" ${*:-} \"\n\n  case ${_flags_list_} in\n\t  *\\ ${_flags_str_}\\ *)\n\t  flags_return=$FLAGS_TRUE\n\t  ;;\n\t*)\n\t  flags_return=$FLAGS_FALSE\n\t  ;;\n  esac\n\n  unset _flags_str_ _flags_list_\n  return ${flags_return}\n}\n\n# Returns the width of the current screen.\n#\n# Output:\n#   integer: width in columns of the current screen.\n_flags_columns()\n{\n  if [ -z \"${__flags_columns}\" ]; then\n\t# determine the value and store it\n\tif eval stty size >/dev/null 2>&1; then\n\t  # stty size worked :-)\n\t  set -- `stty size`\n\t  __flags_columns=$2\n\telif eval tput cols >/dev/null 2>&1; then\n\t  set -- `tput cols`\n\t  __flags_columns=$1\n\telse\n\t  __flags_columns=80  # default terminal width\n\tfi\n  fi\n  echo ${__flags_columns}\n}\n\n# Validate a boolean.\n#\n# Args:\n#   _flags__bool: boolean: value to validate\n# Returns:\n#   bool: true if the value is a valid boolean\n_flags_validBool()\n{\n  _flags_bool_=$1\n\n  flags_return=${FLAGS_TRUE}\n  case \"${_flags_bool_}\" in\n\ttrue|t|0) ;;\n\tfalse|f|1) ;;\n\t*) flags_return=${FLAGS_FALSE} ;;\n  esac\n\n  unset _flags_bool_\n  return ${flags_return}\n}\n\n# Validate a float.\n#\n# Args:\n#   _flags_float_: float: value to validate\n# Returns:\n#   bool: true if the value is a valid integer\n_flags_validFloat()\n{\n  flags_return=${FLAGS_FALSE}\n  [ -n \"$1\" ] || return ${flags_return}\n  _flags_float_=$1\n\n  if _flags_validInt ${_flags_float_}; then\n\tflags_return=${FLAGS_TRUE}\n  elif _flags_useBuiltin; then\n\t_flags_float_whole_=${_flags_float_%.*}\n\t_flags_float_fraction_=${_flags_float_#*.}\n\tif _flags_validInt ${_flags_float_whole_:-0} -a \\\n\t  _flags_validInt ${_flags_float_fraction_}; then\n\t  flags_return=${FLAGS_TRUE}\n\tfi\n\tunset _flags_float_whole_ _flags_float_fraction_\n  else\n\tflags_return=${FLAGS_TRUE}\n\tcase ${_flags_float_} in\n\t  -*)  # negative floats\n\t\t_flags_test_=`${FLAGS_EXPR_CMD} -- \"${_flags_float_}\" :\\\n\t\t\t'\\(-[0-9]*\\.[0-9]*\\)'`\n\t\t;;\n\t  *)  # positive floats\n\t\t_flags_test_=`${FLAGS_EXPR_CMD} -- \"${_flags_float_}\" :\\\n\t\t\t'\\([0-9]*\\.[0-9]*\\)'`\n\t\t;;\n\tesac\n\t[ \"${_flags_test_}\" != \"${_flags_float_}\" ] && flags_return=${FLAGS_FALSE}\n\tunset _flags_test_\n  fi\n\n  unset _flags_float_ _flags_float_whole_ _flags_float_fraction_\n  return ${flags_return}\n}\n\n# Validate an integer.\n#\n# Args:\n#   _flags_int_: integer: value to validate\n# Returns:\n#   bool: true if the value is a valid integer\n_flags_validInt()\n{\n  flags_return=${FLAGS_FALSE}\n  [ -n \"$1\" ] || return ${flags_return}\n  _flags_int_=$1\n\n  case ${_flags_int_} in\n\t-*.*) ;;  # ignore negative floats (we'll invalidate them later)\n\t-*)  # strip possible leading negative sign\n\t  if _flags_useBuiltin; then\n\t\t_flags_int_=${_flags_int_#-}\n\t  else\n\t\t_flags_int_=`${FLAGS_EXPR_CMD} -- \"${_flags_int_}\" : '-\\([0-9][0-9]*\\)'`\n\t  fi\n\t  ;;\n  esac\n\n  case ${_flags_int_} in\n\t*[!0-9]*) flags_return=${FLAGS_FALSE} ;;\n\t*) flags_return=${FLAGS_TRUE} ;;\n  esac\n\n  unset _flags_int_\n  return ${flags_return}\n}\n\n# Parse command-line options using the standard getopt.\n#\n# Note: the flag options are passed around in the global __flags_opts so that\n# the formatting is not lost due to shell parsing and such.\n#\n# Args:\n#   @: varies: command-line options to parse\n# Returns:\n#   integer: a FLAGS success condition\n_flags_getoptStandard()\n{\n  flags_return=${FLAGS_TRUE}\n  _flags_shortOpts_=`_flags_genOptStr ${__FLAGS_OPTSTR_SHORT}`\n\n  # check for spaces in passed options\n  for _flags_opt_ in \"$@\"; do\n\t# note: the silliness with the x's is purely for ksh93 on Ubuntu 6.06\n\t_flags_match_=`echo \"x${_flags_opt_}x\" |sed 's/ //g'`\n\tif [ \"${_flags_match_}\" != \"x${_flags_opt_}x\" ]; then\n\t  flags_error='the available getopt does not support spaces in options'\n\t  flags_return=${FLAGS_ERROR}\n\t  break\n\tfi\n  done\n\n  if [ ${flags_return} -eq ${FLAGS_TRUE} ]; then\n\t__flags_opts=`getopt ${_flags_shortOpts_} $@ 2>&1`\n\t_flags_rtrn_=$?\n\tif [ ${_flags_rtrn_} -ne ${FLAGS_TRUE} ]; then\n\t  _flags_warn \"${__flags_opts}\"\n\t  flags_error='unable to parse provided options with getopt.'\n\t  flags_return=${FLAGS_ERROR}\n\tfi\n  fi\n\n  unset _flags_match_ _flags_opt_ _flags_rtrn_ _flags_shortOpts_\n  return ${flags_return}\n}\n\n# Parse command-line options using the enhanced getopt.\n#\n# Note: the flag options are passed around in the global __flags_opts so that\n# the formatting is not lost due to shell parsing and such.\n#\n# Args:\n#   @: varies: command-line options to parse\n# Returns:\n#   integer: a FLAGS success condition\n_flags_getoptEnhanced()\n{\n  flags_return=${FLAGS_TRUE}\n  _flags_shortOpts_=`_flags_genOptStr ${__FLAGS_OPTSTR_SHORT}`\n  _flags_boolOpts_=`echo \"${__flags_boolNames}\" \\\n\t  |sed 's/^ *//;s/ *$//;s/ /,/g'`\n  _flags_longOpts_=`_flags_genOptStr ${__FLAGS_OPTSTR_LONG}`\n\n  __flags_opts=`${FLAGS_GETOPT_CMD} \\\n\t  -o ${_flags_shortOpts_} \\\n\t  -l \"${_flags_longOpts_},${_flags_boolOpts_}\" \\\n\t  -- \"$@\" 2>&1`\n  _flags_rtrn_=$?\n  if [ ${_flags_rtrn_} -ne ${FLAGS_TRUE} ]; then\n\t_flags_warn \"${__flags_opts}\"\n\tflags_error='unable to parse provided options with getopt.'\n\tflags_return=${FLAGS_ERROR}\n  fi\n\n  unset _flags_boolOpts_ _flags_longOpts_ _flags_rtrn_ _flags_shortOpts_\n  return ${flags_return}\n}\n\n# Dynamically parse a getopt result and set appropriate variables.\n#\n# This function does the actual conversion of getopt output and runs it through\n# the standard case structure for parsing. The case structure is actually quite\n# dynamic to support any number of flags.\n#\n# Args:\n#   argc: int: original command-line argument count\n#   @: varies: output from getopt parsing\n# Returns:\n#   integer: a FLAGS success condition\n_flags_parseGetopt()\n{\n  _flags_argc_=$1\n  shift\n\n  flags_return=${FLAGS_TRUE}\n\n  if [ ${__FLAGS_GETOPT_VERS} -ne ${__FLAGS_GETOPT_VERS_ENH} ]; then\n\tset -- $@\n  else\n\t# note the quotes around the `$@' -- they are essential!\n\teval set -- \"$@\"\n  fi\n\n  # Provide user with the number of arguments to shift by later.\n  # NOTE: the FLAGS_ARGC variable is obsolete as of 1.0.3 because it does not\n  # properly give user access to non-flag arguments mixed in between flag\n  # arguments. Its usage was replaced by FLAGS_ARGV, and it is being kept only\n  # for backwards compatibility reasons.\n  FLAGS_ARGC=`_flags_math \"$# - 1 - ${_flags_argc_}\"`\n\n  # handle options. note options with values must do an additional shift\n  while true; do\n\t_flags_opt_=$1\n\t_flags_arg_=${2:-}\n\t_flags_type_=${__FLAGS_TYPE_NONE}\n\t_flags_name_=''\n\n\t# determine long flag name\n\tcase \"${_flags_opt_}\" in\n\t  --) shift; break ;;  # discontinue option parsing\n\n\t  --*)  # long option\n\t\tif _flags_useBuiltin; then\n\t\t  _flags_opt_=${_flags_opt_#*--}\n\t\telse\n\t\t  _flags_opt_=`${FLAGS_EXPR_CMD} -- \"${_flags_opt_}\" : '--\\(.*\\)'`\n\t\tfi\n\t\t_flags_len_=${__FLAGS_LEN_LONG}\n\t\tif _flags_itemInList \"${_flags_opt_}\" ${__flags_longNames}; then\n\t\t  _flags_name_=${_flags_opt_}\n\t\telse\n\t\t  # check for negated long boolean version\n\t\t  if _flags_itemInList \"${_flags_opt_}\" ${__flags_boolNames}; then\n\t\t\tif _flags_useBuiltin; then\n\t\t\t  _flags_name_=${_flags_opt_#*no}\n\t\t\telse\n\t\t\t  _flags_name_=`${FLAGS_EXPR_CMD} -- \"${_flags_opt_}\" : 'no\\(.*\\)'`\n\t\t\tfi\n\t\t\t_flags_type_=${__FLAGS_TYPE_BOOLEAN}\n\t\t\t_flags_arg_=${__FLAGS_NULL}\n\t\t  fi\n\t\tfi\n\t\t;;\n\n\t  -*)  # short option\n\t\tif _flags_useBuiltin; then\n\t\t  _flags_opt_=${_flags_opt_#*-}\n\t\telse\n\t\t  _flags_opt_=`${FLAGS_EXPR_CMD} -- \"${_flags_opt_}\" : '-\\(.*\\)'`\n\t\tfi\n\t\t_flags_len_=${__FLAGS_LEN_SHORT}\n\t\tif _flags_itemInList \"${_flags_opt_}\" ${__flags_shortNames}; then\n\t\t  # yes. match short name to long name. note purposeful off-by-one\n\t\t  # (too high) with awk calculations.\n\t\t  _flags_pos_=`echo \"${__flags_shortNames}\" \\\n\t\t\t  |awk 'BEGIN{RS=\" \";rn=0}$0==e{rn=NR}END{print rn}' \\\n\t\t\t\t  e=${_flags_opt_}`\n\t\t  _flags_name_=`echo \"${__flags_longNames}\" \\\n\t\t\t  |awk 'BEGIN{RS=\" \"}rn==NR{print $0}' rn=\"${_flags_pos_}\"`\n\t\tfi\n\t\t;;\n\tesac\n\n\t# die if the flag was unrecognized\n\tif [ -z \"${_flags_name_}\" ]; then\n\t  flags_error=\"unrecognized option (${_flags_opt_})\"\n\t  flags_return=${FLAGS_ERROR}\n\t  break\n\tfi\n\n\t# set new flag value\n\t_flags_usName_=`_flags_removeExclamationName ${_flags_name_}`\n\t_flags_usName_=`_flags_underscoreName ${_flags_usName_}`\n\t[ ${_flags_type_} -eq ${__FLAGS_TYPE_NONE} ] && \\\n\t\t_flags_type_=`_flags_getFlagInfo \\\n\t\t\t\"${_flags_usName_}\" ${__FLAGS_INFO_TYPE}`\n\tcase ${_flags_type_} in\n\t  ${__FLAGS_TYPE_BOOLEAN})\n\t\tif [ ${_flags_len_} -eq ${__FLAGS_LEN_LONG} ]; then\n\t\t  if [ \"${_flags_arg_}\" != \"${__FLAGS_NULL}\" ]; then\n\t\t\teval \"FLAGS_${_flags_usName_}=${FLAGS_TRUE}\"\n\t\t  else\n\t\t\teval \"FLAGS_${_flags_usName_}=${FLAGS_FALSE}\"\n\t\t  fi\n\t\telse\n\t\t  _flags_strToEval_=\"_flags_val_=\\\n\\${__flags_${_flags_usName_}_${__FLAGS_INFO_DEFAULT}}\"\n\t\t  eval \"${_flags_strToEval_}\"\n\t\t  if [ ${_flags_val_} -eq ${FLAGS_FALSE} ]; then\n\t\t\teval \"FLAGS_${_flags_usName_}=${FLAGS_TRUE}\"\n\t\t  else\n\t\t\teval \"FLAGS_${_flags_usName_}=${FLAGS_FALSE}\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_FLOAT})\n\t\tif _flags_validFloat \"${_flags_arg_}\"; then\n\t\t  eval \"FLAGS_${_flags_usName_}='${_flags_arg_}'\"\n\t\telse\n\t\t  flags_error=\"invalid float value (${_flags_arg_})\"\n\t\t  flags_return=${FLAGS_ERROR}\n\t\t  break\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_INTEGER})\n\t\tif _flags_validInt \"${_flags_arg_}\"; then\n\t\t  eval \"FLAGS_${_flags_usName_}='${_flags_arg_}'\"\n\t\telse\n\t\t  flags_error=\"invalid integer value (${_flags_arg_})\"\n\t\t  flags_return=${FLAGS_ERROR}\n\t\t  break\n\t\tfi\n\t\t;;\n\n\t  ${__FLAGS_TYPE_STRING})\n\t\teval \"FLAGS_${_flags_usName_}='${_flags_arg_}'\"\n\t\t;;\n\tesac\n\n\t# handle special case help flag\n\tif [ \"${_flags_usName_}\" = 'help' ]; then\n\t  if [ ${FLAGS_help} -eq ${FLAGS_TRUE} ]; then\n\t\tflags_help\n\t\tflags_error='help requested'\n\t\tflags_return=${FLAGS_TRUE}\n\t\tbreak\n\t  fi\n\tfi\n\n\t# shift the option and non-boolean arguements out.\n\tshift\n\t[ ${_flags_type_} != ${__FLAGS_TYPE_BOOLEAN} ] && shift\n  done\n\n  # give user back non-flag arguments\n  FLAGS_ARGV=''\n  while [ $# -gt 0 ]; do\n\tFLAGS_ARGV=\"${FLAGS_ARGV:+${FLAGS_ARGV} }'$1'\"\n\tshift\n  done\n\n  unset _flags_arg_ _flags_len_ _flags_name_ _flags_opt_ _flags_pos_ \\\n\t  _flags_strToEval_ _flags_type_ _flags_usName_ _flags_val_ \\\n\t  _flags_argc_\n  return ${flags_return}\n}\n\n# Perform some path using built-ins.\n#\n# Args:\n#   $@: string: math expression to evaluate\n# Output:\n#   integer: the result\n# Returns:\n#   bool: success of math evaluation\n_flags_math()\n{\n  if [ $# -eq 0 ]; then\n\tflags_return=${FLAGS_FALSE}\n  elif _flags_useBuiltin; then\n\t# Variable assignment is needed as workaround for Solaris Bourne shell,\n\t# which cannot parse a bare $((expression)).\n\t_flags_expr_='$(($@))'\n\teval echo ${_flags_expr_}\n\tflags_return=$?\n\tunset _flags_expr_\n  else\n\teval expr $@\n\tflags_return=$?\n  fi\n\n  return ${flags_return}\n}\n\n# Cross-platform strlen() implementation.\n#\n# Args:\n#   _flags_str: string: to determine length of\n# Output:\n#   integer: length of string\n# Returns:\n#   bool: success of strlen evaluation\n_flags_strlen()\n{\n  _flags_str_=${1:-}\n\n  if [ -z \"${_flags_str_}\" ]; then\n\tflags_output=0\n  elif _flags_useBuiltin; then\n\tflags_output=${#_flags_str_}\n  else\n\tflags_output=`${FLAGS_EXPR_CMD} -- \"${_flags_str_}\" : '.*'`\n  fi\n  flags_return=$?\n\n  unset _flags_str_\n  echo ${flags_output}\n  return ${flags_return}\n}\n\n# Use built-in helper function to enable unit testing.\n#\n# Args:\n#   None\n# Returns:\n#   bool: true if built-ins should be used\n_flags_useBuiltin()\n{\n  return ${__FLAGS_USE_BUILTIN}\n}\n\n#------------------------------------------------------------------------------\n# public functions\n#\n# A basic boolean flag. Boolean flags do not take any arguments, and their\n# value is either 1 (false) or 0 (true). For long flags, the false value is\n# specified on the command line by prepending the word 'no'. With short flags,\n# the presense of the flag toggles the current value between true and false.\n# Specifying a short boolean flag twice on the command results in returning the\n# value back to the default value.\n#\n# A default value is required for boolean flags.\n#\n# For example, lets say a Boolean flag was created whose long name was 'update'\n# and whose short name was 'x', and the default value was 'false'. This flag\n# could be explicitly set to 'true' with '--update' or by '-x', and it could be\n# explicitly set to 'false' with '--noupdate'.\nDEFINE_boolean() { _flags_define ${__FLAGS_TYPE_BOOLEAN} \"$@\"; }\n\n# Other basic flags.\nDEFINE_float()   { _flags_define ${__FLAGS_TYPE_FLOAT} \"$@\"; }\nDEFINE_integer() { _flags_define ${__FLAGS_TYPE_INTEGER} \"$@\"; }\nDEFINE_string()  { _flags_define ${__FLAGS_TYPE_STRING} \"$@\"; }\n\n# Parse the flags.\n#\n# Args:\n#   unnamed: list: command-line flags to parse\n# Returns:\n#   integer: success of operation, or error\nFLAGS()\n{\n  # define a standard 'help' flag if one isn't already defined\n  [ -z \"${__flags_help_type:-}\" ] && \\\n\t  DEFINE_boolean 'help!' false 'show this help' 'h'\n\n  # parse options\n  if [ $# -gt 0 ]; then\n\tif [ ${__FLAGS_GETOPT_VERS} -ne ${__FLAGS_GETOPT_VERS_ENH} ]; then\n\t  _flags_getoptStandard \"$@\"\n\telse\n\t  _flags_getoptEnhanced \"$@\"\n\tfi\n\tflags_return=$?\n  else\n\t# nothing passed; won't bother running getopt\n\t__flags_opts='--'\n\tflags_return=${FLAGS_TRUE}\n  fi\n\n  if [ ${flags_return} -eq ${FLAGS_TRUE} ]; then\n\t_flags_parseGetopt $# \"${__flags_opts}\"\n\tflags_return=$?\n  fi\n\n  [ ${flags_return} -eq ${FLAGS_ERROR} ] && _flags_fatal \"${flags_error}\"\n  return ${flags_return}\n}\n\n# This is a helper function for determining the 'getopt' version for platforms\n# where the detection isn't working. It simply outputs debug information that\n# can be included in a bug report.\n#\n# Args:\n#   none\n# Output:\n#   debug info that can be included in a bug report\n# Returns:\n#   nothing\nflags_getoptInfo()\n{\n  # platform info\n  _flags_debug \"uname -a: `uname -a`\"\n  _flags_debug \"PATH: ${PATH}\"\n\n  # shell info\n  if [ -n \"${BASH_VERSION:-}\" ]; then\n\t_flags_debug 'shell: bash'\n\t_flags_debug \"BASH_VERSION: ${BASH_VERSION}\"\n  elif [ -n \"${ZSH_VERSION:-}\" ]; then\n\t_flags_debug 'shell: zsh'\n\t_flags_debug \"ZSH_VERSION: ${ZSH_VERSION}\"\n  fi\n\n  # getopt info\n  ${FLAGS_GETOPT_CMD} >/dev/null\n  _flags_getoptReturn=$?\n  _flags_debug \"getopt return: ${_flags_getoptReturn}\"\n  _flags_debug \"getopt --version: `${FLAGS_GETOPT_CMD} --version 2>&1`\"\n\n  unset _flags_getoptReturn\n}\n\n# Returns whether the detected getopt version is the enhanced version.\n#\n# Args:\n#   none\n# Output:\n#   none\n# Returns:\n#   bool: true if getopt is the enhanced version\nflags_getoptIsEnh()\n{\n  test ${__FLAGS_GETOPT_VERS} -eq ${__FLAGS_GETOPT_VERS_ENH}\n}\n\n# Returns whether the detected getopt version is the standard version.\n#\n# Args:\n#   none\n# Returns:\n#   bool: true if getopt is the standard version\nflags_getoptIsStd()\n{\n  test ${__FLAGS_GETOPT_VERS} -eq ${__FLAGS_GETOPT_VERS_STD}\n}\n\n# This is effectively a 'usage()' function. It prints usage information and\n# exits the program with ${FLAGS_FALSE} if it is ever found in the command line\n# arguments. Note this function can be overridden so other apps can define\n# their own --help flag, replacing this one, if they want.\n#\n# Args:\n#   none\n# Returns:\n#   integer: success of operation (always returns true)\nflags_help()\n{\n  if [ -n \"${FLAGS_HELP:-}\" ]; then\n\techo \"${FLAGS_HELP}\" >&2\n  else\n\techo \"USAGE: ${FLAGS_PARENT:-$0} [flags] args\" >&2\n  fi\n  if [ -n \"${__flags_longNames}\" ]; then\n\techo 'flags:' >&2\n\tfor flags_name_ in ${__flags_longNames}; do\n\t  flags_flagStr_=''\n\t  flags_boolStr_=''\n\t  flags_usName_=`_flags_underscoreName ${flags_name_}`\n\n\t  flags_default_=`_flags_getFlagInfo \\\n\t\t  \"${flags_usName_}\" ${__FLAGS_INFO_DEFAULT}`\n\t  flags_help_=`_flags_getFlagInfo \\\n\t\t  \"${flags_usName_}\" ${__FLAGS_INFO_HELP}`\n\t  flags_short_=`_flags_getFlagInfo \\\n\t\t  \"${flags_usName_}\" ${__FLAGS_INFO_SHORT}`\n\t  flags_type_=`_flags_getFlagInfo \\\n\t\t  \"${flags_usName_}\" ${__FLAGS_INFO_TYPE}`\n\n\t  [ \"${flags_short_}\" != \"${__FLAGS_NULL}\" ] && \\\n\t\t  flags_flagStr_=\"-${flags_short_}\"\n\n\t  if [ ${__FLAGS_GETOPT_VERS} -eq ${__FLAGS_GETOPT_VERS_ENH} ]; then\n\t\t[ \"${flags_short_}\" != \"${__FLAGS_NULL}\" ] && \\\n\t\t\tflags_flagStr_=\"${flags_flagStr_},\"\n\t\t# add [no] to long boolean flag names, except the 'help' flag\n\t\tif [ ${flags_type_} -eq ${__FLAGS_TYPE_BOOLEAN} ]; then\n\t\t  _flags_itemInList \"${flags_name_}\" ${__flags_nonegateNames}\n\t\t   if [ $? -eq ${FLAGS_FALSE} ]; then\n\t\t\t  flags_boolStr_='[no]'\n\t\t   fi\n\t\tfi\n\t\tflags_flagStr_=\"${flags_flagStr_}--${flags_boolStr_}${flags_name_}:\"\n\t  fi\n\n\t  case ${flags_type_} in\n\t\t${__FLAGS_TYPE_BOOLEAN})\n\t\t  if [ ${flags_default_} -eq ${FLAGS_TRUE} ]; then\n\t\t\tflags_defaultStr_='true'\n\t\t  else\n\t\t\tflags_defaultStr_='false'\n\t\t  fi\n\t\t  ;;\n\t\t${__FLAGS_TYPE_FLOAT}|${__FLAGS_TYPE_INTEGER})\n\t\t  flags_defaultStr_=${flags_default_} ;;\n\t\t${__FLAGS_TYPE_STRING}) flags_defaultStr_=\"'${flags_default_}'\" ;;\n\t  esac\n\t  flags_defaultStr_=\"(default: ${flags_defaultStr_})\"\n\n\t  flags_helpStr_=\"  ${flags_flagStr_}  ${flags_help_} ${flags_defaultStr_}\"\n\t  _flags_strlen \"${flags_helpStr_}\" >/dev/null\n\t  flags_helpStrLen_=${flags_output}\n\t  flags_columns_=`_flags_columns`\n\n\t  if [ ${flags_helpStrLen_} -lt ${flags_columns_} ]; then\n\t\techo \"${flags_helpStr_}\" >&2\n\t  else\n\t\techo \"  ${flags_flagStr_}  ${flags_help_}\" >&2\n\t\t# note: the silliness with the x's is purely for ksh93 on Ubuntu 6.06\n\t\t# because it doesn't like empty strings when used in this manner.\n\t\tflags_emptyStr_=\"`echo \\\"x${flags_flagStr_}x\\\" \\\n\t\t\t|awk '{printf \"%\"length($0)-2\"s\", \"\"}'`\"\n\t\tflags_helpStr_=\"  ${flags_emptyStr_}  ${flags_defaultStr_}\"\n\t\t_flags_strlen \"${flags_helpStr_}\" >/dev/null\n\t\tflags_helpStrLen_=${flags_output}\n\n\t\tif [ ${__FLAGS_GETOPT_VERS} -eq ${__FLAGS_GETOPT_VERS_STD} \\\n\t\t\t-o ${flags_helpStrLen_} -lt ${flags_columns_} ]; then\n\t\t  # indented to match help string\n\t\t  echo \"${flags_helpStr_}\" >&2\n\t\telse\n\t\t  # indented four from left to allow for longer defaults as long flag\n\t\t  # names might be used too, making things too long\n\t\t  echo \"    ${flags_defaultStr_}\" >&2\n\t\tfi\n\t  fi\n\tdone\n  fi\n\n  unset flags_boolStr_ flags_default_ flags_defaultStr_ flags_emptyStr_ \\\n\t  flags_flagStr_ flags_help_ flags_helpStr flags_helpStrLen flags_name_ \\\n\t  flags_columns_ flags_short_ flags_type_ flags_usName_\n  return ${FLAGS_TRUE}\n}\n\n# Reset shflags back to an uninitialized state.\n#\n# Args:\n#   none\n# Returns:\n#   nothing\nflags_reset()\n{\n  for flags_name_ in ${__flags_longNames}; do\n\tflags_usName_=`_flags_removeExclamationName ${flags_name_}`\n\tflags_usName_=`_flags_underscoreName ${flags_usName_}`\n\tflags_strToEval_=\"unset FLAGS_${flags_usName_}\"\n\tfor flags_type_ in \\\n\t\t${__FLAGS_INFO_DEFAULT} \\\n\t\t${__FLAGS_INFO_HELP} \\\n\t\t${__FLAGS_INFO_SHORT} \\\n\t\t${__FLAGS_INFO_TYPE}\n\tdo\n\t  flags_strToEval_=\\\n\"${flags_strToEval_} __flags_${flags_usName_}_${flags_type_}\"\n\tdone\n\teval ${flags_strToEval_}\n  done\n\n  # reset internal variables\n  __flags_boolNames=' '\n  __flags_longNames=' '\n  __flags_shortNames=' '\n  __flags_definedNames=' '\n\n  unset flags_name_ flags_type_ flags_strToEval_ flags_usName_\n}\n"
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}