{
  "metadata": {
    "timestamp": 1736568894820,
    "page": 104,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xiaoyaDev/xiaoya-alist",
      "stars": 5888,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".pylintrc",
          "type": "blob",
          "size": 0.0283203125,
          "content": "[FORMAT]\nmax-line-length=120\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "115_cleaner",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.32421875,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.1904296875,
          "content": "![xiaoya-alist](https://socialify.git.ci/xiaoyaDev/xiaoya-alist/image?description=1&font=KoHo&forks=1&issues=1&logo=https%3A%2F%2Fraw.githubusercontent.com%2FxiaoyaDev%2Fxiaoya-alist%2Fmaster%2Fassets%2Flogo.jpg&name=1&owner=1&pattern=Signal&pulls=1&stargazers=1&theme=Auto)\n\n![](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/image.png)\n\n![](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/image-1.png)\n\n![](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/image-2.png)\n\n![](https://count.getloli.com/get/@DDS-Derek.xiaoya-alist.readme?theme=rule34)\n\n- [main.sh](#mainsh)\n  - [使用](#使用)\n  - [功能列表](#功能列表)\n- [相关地址](#相关地址)\n- [通用兼容性测试报告](#通用兼容性测试报告)\n- [Star History](#star-history)\n- [小雅周边工具集合](#小雅周边工具集合)\n- [感谢](#感谢)\n- [捐赠](#捐赠)\n- [许可证](#许可证)\n  - [附加条款](#附加条款)\n  - [免责声明](#免责声明)\n\n## main.sh\n\n> [!NOTE]\n> 整合安装脚本，内置所有相关软件的安装。\n\n### 使用\n\n```shell\nbash -c \"$(curl --insecure -fsSL https://ddsrem.com/xiaoya_install.sh)\"\n```\n\n**备用地址**\n\n```shell\nbash <(curl --insecure -fsSL https://ddsrem.com/xiaoya/all_in_one.sh)\n```\n\n```shell\nbash <(curl --insecure -fsSL https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/all_in_one.sh)\n```\n\n```shell\nbash <(curl --insecure -fsSL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/all_in_one.sh)\n```\n\n```shell\nbash -c \"$(curl --insecure -fsSL https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/main.sh)\"\n```\n\n```shell\nbash -c \"$(curl --insecure -fsSL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/main.sh)\"\n```\n\n### 功能列表\n\n> [!NOTE]\n> 数字代表先选x，再选x，再选x\n> \n> PS: 2 2 8代表先选2，再选2，最后选8\n\n**普通功能**\n\n```shell\n———————————————————————————————————————安装———————————————————————————————————————\n安装 小雅Alist -> 1 1\n安装 小雅Alist-TVBox -> 5 1\n安装/更新 小雅助手（xiaoyahelper）-> 4 1\n安装 115清理助手 -> 6 1\n安装 Onelist -> 8 3 1\n安装 Portainer -> 8 1 1\n安装 Emby全家桶（一键） -> 2 1\n安装 Jellyfin全家桶（一键） -> 3 1（已弃用）\n安装 Resilio-Sync（单独） -> 2 5 1（已弃用）\n安装 Auto_Symlink -> 8 2 1\n安装 CasaOS -> 8 7 1\n安装 小雅元数据定时爬虫 -> 2 9 1\n安装 Xiaoya Proxy -> 8 4 1\n安装 Xiaoya aliyuntvtoken_connector -> 8 5 1\n——————————————————————————————Emby手动全家桶配置————————————————————————————————————\n单独 下载并解压 全部元数据 -> 2 2 1\n单独 解压 全部元数据 -> 2 2 2\n单独 下载 all.mp4 -> 2 2 3\n单独 解压 all.mp4 -> 2 2 4\n解压 all.mp4 的指定元数据目录【非全部解压】-> 2 2 5\n单独 下载 config.mp4 -> 2 2 6\n单独 解压 config.mp4 -> 2 2 7\n单独 下载 pikpak.mp4 -> 2 2 8\n单独 解压 pikpak.mp4 -> 2 2 9\n单独 下载 115.mp4 -> 2 2 10\n单独 解压 115.mp4 -> 2 2 11\n解压 115.mp4 的指定元数据目录【非全部解压】-> 2 2 12\n单独 下载并解压 config.new.mp4 -> 2 2 101\n选择 下载器【aria2/wget】-> 2 2 13\n单独 安装Emby（可选择版本，支持官方，amilys，lovechen）-> 2 3\n立即 同步小雅Emby的config目录 -> 2 6（已弃用）\n单独 创建/删除 同步定时更新任务 -> 2 7（已弃用）\n图形化编辑 emby_config.txt -> 2 8\n一键升级Emby容器（可选择镜像版本） -> 2 10\n小雅爬虫 立刻爬取指定目录 -> 2 9 4\n小雅爬虫 容器定时爬取目录单独配置 -> 2 9 5\n小雅爬虫 清理爬虫进程锁 -> 2 9 6\n小雅爬虫 重置爬虫数据库 -> 2 9 7\n————————————————————————————Jellyfin手动全家桶配置——————————————————————————————————\n\n注意：目前官方 Jellyfin 安装方案已经长久未维护！（已弃用）\n如果您需要安装 小雅Jellyfin 全家桶，请使用 AI老G 的脚本安装，风险自担。\n脚本命令：bash <(curl -sSLf https://xy.ggbond.org/xy/xy_install.sh)\n\n单独 下载并解压 全部元数据 -> 3 2 1\n单独 解压 全部元数据 -> 3 2 2\n单独 下载 all_jf.mp4 -> 3 2 3\n单独 解压 all_jf.mp4 -> 3 2 4\n解压 all_jf.mp4 的指定元数据目录【非全部解压】-> 3 2 5\n单独 下载 config_jf.mp4 -> 3 2 6\n单独 解压 config_jf.mp4 -> 3 2 7\n单独 下载 PikPak_jf.mp4 -> 3 2 8\n单独 解压 PikPak_jf.mp4 -> 3 2 9\n选择 下载器【aria2/wget】-> 3 2 10\n单独 安装Jellyfin-> 3 3\n———————————————————————————————————————更新———————————————————————————————————————\n更新 小雅Alist-TVBox -> 5 2\n更新 小雅Alist -> 1 2\n更新 Resilio-Sync（单独） -> 2 5 2（已弃用）\n更新 115清理助手 -> 6 2\n更新 Onelist -> 8 3 2\n更新 Portainer -> 8 1 2\n更新 Auto_Symlink -> 8 2 2\n更新 小雅元数据定时爬虫 -> 2 9 2\n更新 Xiaoya Proxy -> 8 4 2\n更新 Xiaoya aliyuntvtoken_connector -> 8 5 1\n———————————————————————————————————————卸载———————————————————————————————————————\n卸载 小雅Alist -> 1 3\n卸载 Emby全家桶 -> 2 11\n卸载 卸载Jellyfin全家桶 -> 3 4（已弃用）\n卸载 Resilio-Sync（单独） -> 2 5 3（已弃用）\n卸载 小雅助手（xiaoyahelper）-> 4 3\n卸载 小雅Alist-TVBox -> 5 3\n卸载 115清理助手 -> 6 3\n卸载 Onelist -> 8 3 3\n卸载 Portainer -> 8 1 3\n卸载 Auto_Symlink -> 8 2 3\n卸载 CasaOS -> 8 7 2\n卸载 小雅元数据定时爬虫 -> 2 9 3\n卸载 Xiaoya Proxy -> 8 4 3\n卸载 Xiaoya aliyuntvtoken_connector -> 8 5 1\n————————————————————————————————Docker Compose—————————————————————————————————————\n安装 小雅及全家桶 -> 7 1\n卸载 小雅及全家桶 -> 7 2\n——————————————————————————————————————系统工具——————————————————————————————————————\n查看系统磁盘挂载 -> 8 6\n———————————————————————————————————————其他———————————————————————————————————————\n一次性运行 小雅助手（xiaoyahelper）-> 4 2\n创建/删除 定时同步更新数据（小雅alist启动时拉取的数据）-> 1 4\nAI老G 安装脚本 -> 8 8\n账号管理 -> 1 5\n```\n\n**高级功能**\n\n```shell\nDocker启动容器名称设置 -> 9 1\n是否开启容器运行额外参数添加 -> 9 2\n重置脚本配置 -> 9 3\n开启/关闭 磁盘容量检测 -> 9 4\n开启/关闭 小雅连通性检测 -> 9 5\nDocker镜像源选择 -> 9 6\n非可选网络模式容器默认网络模式 -> 9 7\n```\n\n## 相关地址\n\n- [https://github.com/xiaoyaDev/xiaoya-alist](https://github.com/xiaoyaDev/xiaoya-alist)\n- [https://hub.docker.com/r/ddsderek/xiaoya-emd](https://hub.docker.com/r/ddsderek/xiaoya-emd)\n- [https://hub.docker.com/r/ddsderek/xiaoya-proxy](https://hub.docker.com/r/ddsderek/xiaoya-proxy)\n- [https://hub.docker.com/r/ddsderek/xiaoya-cron](https://hub.docker.com/r/ddsderek/xiaoya-cron)\n- [https://hub.docker.com/r/ddsderek/xiaoya-glue](https://hub.docker.com/r/ddsderek/xiaoya-glue)\n- [https://hub.docker.com/r/ddsderek/xiaoya-115cleaner](https://hub.docker.com/r/ddsderek/xiaoya-115cleaner)\n- [https://gitee.com/ddsrem/xiaoya-alist-base](https://gitee.com/ddsrem/xiaoya-alist-base)\n- 小雅官方 [Telegram](https://t.me/xiaoyaliu00) 交流群\n\n## 通用兼容性测试报告\n\n> [!NOTE]\n> ✅代表测试通过且兼容；❌代表不兼容；🚧代表未经过充分测试兼容性不确定！\n\n|             软件名称             | x86-64  \\| amd64 | arm64 \\| arm64v8 | armhf \\| armv7 |\n| :------------------------------: | :--------------: | :---------------: | :-------------: |\n|          小雅Alist           |        ✅         |         ✅         |        ✅        |\n|        小雅Emby全家桶        |        ✅         |         ✅         |        ❌        |\n|      小雅Jellyfin全家桶      |        ✅         |         ✅         |        ❌        |\n|   小雅助手（xiaoyahelper）   |        ✅         |         ✅         |        ✅        |\n|       小雅Alist-TVBox        |        ✅         |         ✅         |        ❌        |\n|           Onelist            |        ✅         |         ✅         |        ✅        |\n| 小雅元数据爬虫（xiaoya-emd） |        ✅         |         ✅         |        ✅        |\n| 小雅Cron容器（xiaoya-cron）  |        ✅         |         ✅         |        ✅        |\n| 小雅代理容器（xiaoya-proxy）  |        ✅         |         ✅         |        ✅        |\n| 115清理助手（xiaoya-115cleaner）  |        ✅         |         ✅         |        ✅        |\n| xiaoya-glue（官方 python） |        ✅         |         ✅         |        ❌        |\n| xiaoya-glue（官方 latest） |        ✅         |         ✅         |        ❌        |\n| xiaoya-glue（DDSRem python） |        ✅         |         ✅         |        ❌        |\n| xiaoya-glue（DDSRem aliyuntvtoken_connector） |        ✅         |         ✅         |        ❌        |\n\n|    系统名称     | all_in_one.sh | emby_config_editor.sh | xiaoya_notify.sh（已弃用） |\n| :-------------: | :-----: | :-------------------: | :-------------: |\n|   CentOS 7.9    |    ✅    |           ✅           | ✅ |\n|   CentOS 8.4    |    ✅    |           ✅           | ✅ |\n| CentOS 8 Stream |    ✅    |           ✅           | ✅ |\n| CentOS 9 Stream |    ✅    |           ✅           | ✅ |\n|   Debian 10.3   |    ✅    |           ✅           | ✅ |\n|   Debian 11.3   |    ✅    |           ✅           | ✅ |\n|   Debian 12.0   |    ✅    |           ✅           | ✅ |\n|  Ubuntu 18.04   |    ✅    |           ✅           | ✅ |\n|  Ubuntu 20.04   |    ✅    |           ✅           | ✅ |\n|  Ubuntu 22.04   |    ✅    |           ✅           | ✅ |\n|    Fedora 31    |    ✅    |           ✅           | ✅ |\n|    Fedora 32    |    ✅    |           ✅           | ✅ |\n|   AlmaLinux 9   |    ✅    |           ✅           | ✅ |\n| RockyLinux 8.6  |    ✅    |           ✅           | ✅ |\n|   Arch Linux    |    ✅    |           ✅           | ✅ |\n|  openSUSE 15.4  |    ✅    |           ✅           | ✅ |\n|     FreeBSD     |    ✅    |           ✅           | ✅ |\n|     EulerOS     |    ✅    |           ✅           | ✅ |\n|  Amazon Linux   |    ✅    |           ✅           | ✅ |\n|     Alpine      |    ✅    |           ✅           | ✅ |\n|      MacOS      |    ✅    |           ✅           | 🚧 |\n|     UnRaid      |    ✅    |           ✅           | ✅ |\n| OpenMediaVault  |    ✅    |           ✅           | ✅ |\n|      QNAP（威联通）      |    ✅    |           ✅           | ✅ |\n|     OpenWRT     |    ✅    |           ✅           | ✅ |\n|    Synology（群晖）    |    ✅    |           ✅           | ✅ |\n|  TrueNAS CORE   |    🚧    |           🚧           | 🚧 |\n|  TrueNAS SCALE  |    🚧    |           🚧           | 🚧 |\n|      UGOS（绿联云）      |    ✅    |           ✅           | ✅ |\n|    UGOS Pro（绿联云 Pro）    |    ✅    |           ✅           | ✅ |\n|   LibreELEC     |    ❌    |           ❌           | ❌ |\n|  Windows WSL Docker  |    🚧    |           🚧           | ❌ |\n| ZSpace（极空间） | 🚧 | 🚧 | 🚧 |\n| fnOS (飞牛私有云) | ✅ | ✅ | ✅ |\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=xiaoyaDev/xiaoya-alist&type=Date)](https://star-history.com/#xiaoyaDev/xiaoya-alist)\n\n## 小雅周边工具集合\n\n- [Xiaoya-convert](https://github.com/ypq123456789/xiaoya-convert): 自动批量将阿里云盘分享链接转换为小雅`alishare_list.txt`中的格式\n- [Xiaoyahelper](https://github.com/xiaoyaDev/xiaoyahelper): 一劳永逸的小雅转存清理工具\n- [Alist-TVBox](https://hub.docker.com/r/haroldli/alist-tvbox): 一个基于`AList`和`xiaoya`的`TVBox`管理工具\n- [`strm`文件生成](https://xiaoyaliu.notion.site/strm-2c8d136ceb37445fb6c0222eafb966ce): 小雅官方提供的一键生成`strm`文件脚本\n- [monlor/docker-xiaoya](https://github.com/monlor/docker-xiaoya): Docker Compose 方式一键部署小雅全家桶\n- [xiaoya-sync](https://github.com/xiaoyaDev/xiaoya-sync): Java 编写的小雅元数据爬虫\n- [sjtuross/StrmAssistant](https://github.com/sjtuross/StrmAssistant): Strm Assistant for Emby\n- [suixing8/xiaoya-alist-search](https://github.com/suixing8/xiaoya-alist-search): 不安装Emby的情况下，在iOS Fileball上使用全局搜索和直接观看\n- [AI老G 脚本推荐](https://b23.tv/3Zo0IvD)\n  - 小雅全家桶安装脚本（支持AI老G版小雅Alist安装，Jellyfin安装，快速Emby安装）:\n    ```shell\n    bash <(curl -sSLf https://xy.ggbond.org/xy/xy_install.sh)\n    ```\n  - [玩客云刷casaos小雅emby全家桶](https://b23.tv/KTIHxyT):\n    ```shell\n    bash <(curl -sSLf https://xy.ggbond.org/xy/wky_xy_emby_ailg.sh)\n    ```\n\n## 感谢\n\n- [xiaoyaLiu](http://alist.xiaoya.pro/)\n- [heiheigui](https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh)\n- [alist-tvbox](https://github.com/power721/alist-tvbox)\n- [Auto_Symlink](https://github.com/shenxianmq/Auto_Symlink)\n- [Portainer](https://github.com/portainer/portainer)\n- [AI老G](https://space.bilibili.com/252166818)\n- [monlor](https://link.monlor.com)\n- [Rik](https://github.com/Rik-F5)\n\n<a href=\"https://github.com/xiaoyaDev/xiaoya-alist/graphs/contributors\"><img src=\"https://contrib.rocks/image?repo=xiaoyaDev/xiaoya-alist\"></a>\n\n## 捐赠\n\n- [捐赠项目作者DDSRem](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/appreciate-ddsrem.png)\n- [捐赠小雅](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/appreciate-xiaoya.png)\n- [捐赠AI老G](https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/assets/appreciate-ailaog.png)\n\n## 许可证\n\n此项目根据 GNU General Public License v3.0 许可证进行许可，详见[`LICENSE`](LICENSE) 文件。\n\n### 附加条款\n\n- 请勿将 小雅系列软件 用于商业用途。\n- 请勿将 小雅系列软件 用于任何违反法律法规的行为。\n- 本仓库所有脚本均基于官方脚本制作，使用请自行承担数据损失但不限于此的风险。\n- 本仓库所有脚本仅供学习交流，使用本仓库脚本进行违法操作产生的法律责任由操作者自行承担。\n\n### 免责声明\n\n使用此项目则意味着你接受以上规定和 GNU General Public License v3.0 许可证。\n"
        },
        {
          "name": "aliyuntvtoken_connector",
          "type": "tree",
          "content": null
        },
        {
          "name": "all_in_one.sh",
          "type": "blob",
          "size": 216.9404296875,
          "content": "#!/bin/bash\n# shellcheck shell=bash\n# shellcheck disable=SC2086\n# shellcheck source=/dev/null\nPATH=${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin:/opt/homebrew/bin\nexport PATH\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n# __   ___                                    _ _     _\n# \\ \\ / (_)                             /\\   | (_)   | |\n#  \\ V / _  __ _  ___  _   _  __ _     /  \\  | |_ ___| |_\n#   > < | |/ _` |/ _ \\| | | |/ _` |   / /\\ \\ | | / __| __|\n#  / . \\| | (_| | (_) | |_| | (_| |  / ____ \\| | \\__ \\ |_\n# /_/ \\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/    \\_\\_|_|___/\\__|\n#                       __/ |\n#                      |___/\n#\n# Copyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n#\n# This is free software, licensed under the GNU General Public License v3.0.\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n#\nDATE_VERSION=\"v1.8.2-2025_01_06_14_04\"\n#\n# ——————————————————————————————————————————————————————————————————————————————————\namilys_embyserver_latest_version=4.8.10.0\nemby_embyserver_latest_version=4.8.10.0\namilys_embyserver_beta_version=4.9.0.35\nemby_embyserver_beta_version=4.9.0.35\n# ——————————————————————————————————————————————————————————————————————————————————\n\nSky_Blue=\"\\033[36m\"\nBlue=\"\\033[34m\"\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nYellow='\\033[33m'\nFont=\"\\033[0m\"\nINFO=\"[${Green}INFO${Font}]\"\nERROR=\"[${Red}ERROR${Font}]\"\nWARN=\"[${Yellow}WARN${Font}]\"\nfunction INFO() {\n    echo -e \"${INFO} ${1}\"\n}\nfunction ERROR() {\n    echo -e \"${ERROR} ${1}\"\n}\nfunction WARN() {\n    echo -e \"${WARN} ${1}\"\n}\n\n# shellcheck disable=SC2034\nmirrors=(\n    \"docker.io\"\n    \"hub.rat.dev\"\n    \"nas.dockerimages.us.kg\"\n    \"dockerhub.ggbox.us.kg\"\n    \"registry-docker-hub-latest-9vqc.onrender.com\"\n    \"docker.fxxk.dedyn.io\"\n    \"dockerproxy.com\"\n    \"hub.uuuadc.top\"\n    \"docker.jsdelivr.fyi\"\n    \"docker.registry.cyou\"\n    \"dockerhub.anzu.vip\"\n    \"docker.luyao.dynv6.net\"\n    \"freeno.xyz\"\n    \"docker.1panel.live\"\n    \"dockerpull.com\"\n    \"docker.anyhub.us.kg\"\n    \"dockerhub.icu\"\n    \"docker.nastool.de\"\n)\n\npikpakshare_list_base64=\"6auY5riF55S15b2xL+WQiOmbhjEgICAgICAgICAgVk5SbE5MQVJMbXl5MVZtMjVDSlBwYzBYbzEgICAgVk5SbE1Xd2lMbXl5MVZtMjVDSlBwUnpNbzEK6auY5riF55S15b2xL+WQiOmbhjIgICAgICAgICAgVk5SbFZ3UVlRZ3F2Mzk1a3hHQmhQbURvbzEgICAgVk5SbE9mSjBVVTluakpPUmh1cnpic2RwbzEK6auY5riF55S15b2xL+WQiOmbhjMgICAgICAgICAgVk5SbTN5WnRCR3l3S2ExMTh2enZnQWc2bzEgICAgVk5SbGtETExVVTluakpPUmh1cnpoNEZRbzEK6auY5riF55S15b2xL+WQiOmbhjQgICAgICAgICAgVk5SbVdPbVFCR3l3S2ExMTh2enZsUmlabzEgICAgVk5SbThGcGc3YVdOM0hXSkdWR3A4YXhUbzEgCumrmOa4heeUteW9sS/lkIjpm4Y1ICAgICAgICAgIFZOUm1vRm1vcm9SUk9oRWtob184a1lfMW8xICAgIFZOUm1aTVAxUWdxdjM5NWt4R0JoZC15UW8xCumrmOa4heeUteW9sS/lkIjpm4Y2ICAgICAgICAgIFZOUm42SHFpQkd5d0thMTE4dnp2dXFGcW8xICAgIFZOUm1yZlRBQkd5d0thMTE4dnp2cWJjdG8xCumrmOa4heeUteW9sS/lkIjpm4Y3ICAgICAgICAgIFZOUm5KQVNVcm9SUk9oRWtob184dHBHZm8xICAgIFZOUm5BenZuQkd5d0thMTE4dnp2d0cxV28xCumrmOa4heeUteW9sS/lkIjpm4Y4ICAgICAgICAgIFZOUmxnMHBTN2FXTjNIV0pHVkdwMnBaVG8xICAgIFZOUmxadzRqVVU5bmpKT1JodXJ6ZVYzRW8xCumrmOa4heeUteW9sS/lkIjpm4Y5ICAgICAgICAgIFZOUm5RYk1ON2FXTjNIV0pHVkdwU2t4Rm8xICAgIFZOUm5OYTRweU0yTlFZbEtvNzhRNzBGX28xCumrmOa4heeUteW9sS/lkIjpm4YxMCAgICAgICAgIFZOUm5hZ0JVQ2ZPaXBCRm9XQ1g4RUdTZG8xICAgIFZOUm5ZN3RvZzNiX29yd2tvSDNheGZQQm8xCumrmOa4heeUteW9sS/lkIjpm4YxMSAgICAgICAgIFZOUlIxY2MwTG15eUdEZTIxQW9LNlVsaG8xICAgIFZOUlF6Um5iTG15eUdEZTIxQW9LNWQtOW8xCumrmOa4heWJp+mbhkEv5ZCI6ZuGMSAgICAgICAgIFZOUlQ4V3I4Qkd5dzFrdDFIa2lqS1I0UW8xICAgIFZOUWY2Wm1XRTNwVldHcHVGcmlHcXlQem8xCumrmOa4heWJp+mbhkEv5ZCI6ZuGMiAgICAgICAgIFZOUlQ4V3I4Qkd5dzFrdDFIa2lqS1I0UW8xICAgIFZOUWY2WjQ1b2hnZVpPMXNtb2RLZ3hscW8xCumrmOa4heWJp+mbhkEv5ZCI6ZuGMyAgICAgICAgIFZOUlQ4elpYZzNiX1ZZc24wYkN3bFZoNW8xICAgIFZOUWY3SHY4RTNwVldHcHVGcmlHcjdubm8xCumrmOa4heWJp+mbhkEv5ZCI6ZuGNCAgICAgICAgIFZOUlQ4elpYZzNiX1ZZc24wYkN3bFZoNW8xICAgIFZOUWY3QTBZZUlfNW1ObmlwN0IySXZZcG8xICAK6auY5riF5Ymn6ZuGQS/lkIjpm4Y1ICAgICAgICAgVk5SVDllWWVCR3l3MWt0MUhraWpLbUxfbzEgICAgVk5RZkFuY0lIVl9xMHZlNl9fUzlId1JZbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4Y2ICAgICAgICAgVk5SVDllWWVCR3l3MWt0MUhraWpLbUxfbzEgICAgVk5RZkF3ZE5FM3BWV0dwdUZyaUdzTDVQbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4Y3ICAgICAgICAgVk5SVDllWWVCR3l3MWt0MUhraWpLbUxfbzEgICAgVk5RZkI4QVk5LXNGM3FXY09PSkQ5T0pGbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4Y4ICAgICAgICAgVk5SVEEySE9nM2JfVllzbjBiQ3dsaEt5bzEgICAgVk5RZkJyVXJvaGdldndRNlphVlpFMV8wbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4Y5ICAgICAgICAgVk5SVEEySE9nM2JfVllzbjBiQ3dsaEt5bzEgICAgVk5RZkM1U0dFM3BWV0dwdUZyaUdzZ0FjbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxMCAgICAgICAgVk5SVEEySE9nM2JfVllzbjBiQ3dsaEt5bzEgICAgVk5RZkNBQng5LXNGM3FXY09PSkQ5Z2hybzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxMSAgICAgICAgVk5SVEFNTnZCR3l3MWt0MUhraWpMLW4wbzEgICAgVk5RZkNfRVpPX2UwNXVSSE9WelFEdTgzbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxMiAgICAgICAgVk5SVEFNTnZCR3l3MWt0MUhraWpMLW4wbzEgICAgVk5RZkNxMklUdTVRUzJwdU1PLWgzaUVFbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxMyAgICAgICAgVk5SVEFNTnZCR3l3MWt0MUhraWpMLW4wbzEgICAgVk5RZkN6RjZBZVpqUjMteGJGLUlQQTEybzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxNCAgICAgICAgVk5SVEFoT1pMbXl5WDd5aUNiNnQxalR1bzEgICAgVk5RZkRVb21IVl9xSm9kQjJHQkw4OEdmbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxNSAgICAgICAgVk5SVEFoT1pMbXl5WDd5aUNiNnQxalR1bzEgICAgVk5RZkRjeXJPX2UwNXVSSE9WelFFSm53bzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxNiAgICAgICAgVk5SVEFoT1pMbXl5WDd5aUNiNnQxalR1bzEgICAgVk5RZkVJSzlPX2UwZVZfRl9UTVhOd0E5bzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxNyAgICAgICAgVk5SVEFoT1pMbXl5WDd5aUNiNnQxalR1bzEgICAgVk5RZkVqamFIVl9xSm9kQjJHQkw4ZGVDbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxOCAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkducmlUdTVRY1FTeFVRV25VVlZXbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YxOSAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkd0RDZlSV81Ynl3bWlJMC1Sb3FNbzEK6auY5riF5Ymn6ZuGQS/lkIjpm4YyMCAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkgxZnMxb2dXRmFaaU96ZjRTcV9tbzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyMSAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkgyeWhBZVpqYlVMbkExc2ZmWUFYbzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyMiAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkhEQjVlSV81Ynl3bWlJMC1SdHFkbzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyMyAgICAgICAgVk5SVEJDS1BMbXl5WDd5aUNiNnQxcUVLbzEgICAgVk5RZkhYZklFM3BWeVctaDFpZWloZmlGbzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyNCAgICAgICAgVk5SVENLNExnM2JfVllzbjBiQ3dtZVdYbzEgICAgVk5RZklUcDZPX2Uwc0U5UldwSHZlRTg0bzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyNSAgICAgICAgVk5SVENLNExnM2JfVllzbjBiQ3dtZVdYbzEgICAgVk5RZklYVmpIVl9xM18wTDZ1cGFXTFN0bzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyNiAgICAgICAgVk5SVENLNExnM2JfVllzbjBiQ3dtZVdYbzEgICAgVk5RZklfd1JUdTVRaFF0UDh0YTBKRlVubzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyNyAgICAgICAgVk5SVENLNExnM2JfVllzbjBiQ3dtZVdYbzEgICAgVk5RZkljcnNUdTVRaFF0UDh0YTBKR1g0bzEK6auY5riF5Ymn6ZuGQi/lkIjpm4YyOCAgICAgICAgVk5SVENLNExnM2JfVllzbjBiQ3dtZVdYbzEgICAgVk5RZklmNE1vaGdlQlcteVVodHlNTmZxbzEgCumrmOa4heWJp+mbhkIv5ZCI6ZuGMjkgICAgICAgIFZOUlRDSzRMZzNiX1ZZc24wYkN3bWVXWG8xICAgIFZOUWk2SkIxT19lMGNQd0MwMnJCbERadm8xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzAgICAgICAgIFZOUlRDbWJuQ2ZPaTFabDJGdDI1U2p3OG8xICAgIFZOUWlBaElfRTNwVlVJQlc1NkJlQV9qQ28xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzEgICAgICAgIFZOUlRDbWJuQ2ZPaTFabDJGdDI1U2p3OG8xICAgIFZOUWlELXduRTNwVlVJQlc1NkJlQXpaNm8xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzIgICAgICAgIFZOUlREMmNleU0yTlFZbEtvNzhNRXpZMG8xICAgIFZOUWlGbTh0SFZfcXEyeTBGOHBnTG8wQ28xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzMgICAgICAgIFZOUlREMmNleU0yTlFZbEtvNzhNRXpZMG8xICAgIFZOUWlHSkMyb2hnZU55Rjctb0xyOENfdG8xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzQgICAgICAgIFZOUlRESF9LQkd5dzFrdDFIa2lqTUhHNW8xICAgIFZOUWlJWmV4T19lMGNQd0MwMnJCbm5zTG8xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzUgICAgICAgIFZOUlREaDlmUWdxdl82bFNZNVo3NVo1WW8xICAgIFZOUWlKa0dwRTNwVlVJQlc1NkJlQ0ZOd28xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzYgICAgICAgIFZOUlREaDlmUWdxdl82bFNZNVo3NVo1WW8xICAgIFZOUWlLamVqb2hnZU55Rjctb0xyOTN2b28xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzcgICAgICAgIFZOUlREeXNoUWdxdl82bFNZNVo3NWE0Mm8xICAgIFZOUWlOUDJxRTNwVlVJQlc1NkJlRDB0SG8xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzggICAgICAgIFZOUlREeXNoUWdxdl82bFNZNVo3NWE0Mm8xICAgIFZOUWlNS1lNT19lMGNQd0MwMnJCb1lOY28xCumrmOa4heWJp+mbhkIv5ZCI6ZuGMzkgICAgICAgIFZOUlRFRzExcm9SUk9oRWtob180cUZQWW8xICAgIFZOUWlRcDRib2hnZU55Rjctb0xyQVVtdW8xIArpq5jmuIXliafpm4ZCL+WQiOmbhjQwICAgICAgICBWTlJURUcxMXJvUlJPaEVraG9fNHFGUFlvMSAgICBWTlFpUmZuREhWX3FxMnkwRjhwZ052RGJvMQrpq5jmuIXliafpm4ZCL+WQiOmbhjQxICAgICAgICBWTlJURlZiUEJHeXcxa3QxSGtpak1vQmtvMSAgICBWTlFpVjBuS09fZTBjUHdDMDJyQnE0dmJvMQ==\"\npan115share_list_base64=\"57qq5b2V54mHIHN3NjJmcmczd3A2IDIyODgzMzE1NDExNTM2NjI1NjQgbjlmNQo0S1JlbXV4IHN3NnB3Nzkzd2ZwIDI2Mjg0NzgyMDk3ODcyNjQzMTUgdzgxNgrnlLXlvbExMDgwUCBzdzY4ZnV1M25udyAxOTI2OTY4MTA1NzIyODIzMDMxIHBiNTcK55S16KeG5YmnIHN3NjhlODEzbm53IDI2NTkwNjMxNzgxMTcyNTAzNzQgbjllMArlkIjpm4YxIHN3enlpd3czd245IDI1MjQ4MTE1NTc1MDA4NTIyNzQgdzFlMArlkIjpm4YyIHN3enlpd3Ezd245IDI2Mzc4OTAyNTgzNzg5MjI3NzcgeDcxNgrlkIjpm4YzIHN3enlpd2Izd245IDI2Mzc4OTYzNjAyMjcyMTU3NDkgcWZlOArliqjnlLvnlLXlvbEgc3d6NmdtbDNmd28gMjc4Mzc1MzU5ODE2NzY3ODE3NiA4ODg4Cuasp+e+jueUteW9sSBzdzY4d3o5M25jYiAyNjU2MjMyMDYwNDAwMzY1NzY4IDY2NjYK576O5YmnIHN3NnBsdDIzbmNiIDI2Mjk4MzAxODUzMjk1NTM3OTYgNjY2NgrljYPpg6jmipbpn7Pnn63liaflkIjpm4Ygc3d6cWg2NzNoNHkgMjg0NDM4ODU0NTQ4Nzk2MTIxMSA1Mjk2CuaKlumfs+efreWJp+WQiOmbhjEuNzdUIHN3eng3NmYzd2ZhIDI5NTUyMjA1NzY3MzcwMDk5NTggbjcyNArml6DmjZ/pn7PkuZAgc3c2dTQweDN3cDYgMjc0ODI0ODM2NTg2NjE1NTczNCB0NTQzCuasp+e+juWJpyBzd3pubTM3M3cxcCAyNzc1NTY3MTE2Njk2MjQ1NDEyIHBlMzUK6Z+z5LmQMjLkuIfpppYgc3d6bXFjcjNmczYgIDI3ODMzMDQ0MDM1ODU1OTY1NjYgeGQ2Nwrpn7PkuZAyMuS4h+mmli9ERFMrSGlSZXMgc3c2NTh1cTM2eDIgMjU2NTY3MjQwMzc2NjAwMTQzNSBtZDk4Cumfs+S5kDIy5LiH6aaWL+avjeW4puezu+WIlyBzdzY1OHVxMzZ4MiAyNTY1NDE2NDc5NzA5MTE3ODQzIG1kOTgK6Z+z5LmQMjLkuIfpppYv57Si5bC857K+6YCJIHN3NjU4dXEzNngyIDI1NjU5MTczNzk1MTUwMzkxNzYgbWQ5OArpn7PkuZAyMuS4h+mmli/lkITnsbvpo47moLwgc3c2NTh1cTM2eDIgMjU2NTQ2NjU4Njk1MzQ2NDg1NyBtZDk4Cumfs+S5kDIy5LiH6aaWL+WNjuivrTI3MDAw6aaW5peg5o2fIHN3NjU4dWIzNngyIDI1NjUyNzQwNTU3ODMzOTg3MzQgcTdlMArml6Xpn6nnlLXlvbEgc3d6ZzhkZDN3eWUgMjkzMjI3Mjg1NzEzNDEzNzEwNyBtNWIzCuaXpemfqeWJpyBzd3pqeGNwM3dmYSAyOTUxODcwNjYzMTk4MzUxNjg2IG9mODk=\"\nquarkshare_list_base64=\"55S15b2xL+WQiOmbhi/nvo7lm73nlLXlvbHlrabpmaLnmb7lubTnmb7lrrblvbHniYcgIDQwNWNjNWJjNjIyNSAgMzk5YmU1YTMyNDVhNGQxMWE3ODEzMzk0ZjNmOGRjZmIK57uP5YW45b2x6KeG44CQ57O75YiX5aSn54mH5oC75ZCI6ZuG44CRICBiOTQ1ZGQxZmMxZGYgIGFmZGFmNjE4Y2U4ZDQyODdiNjYzYjJmMGVlYzg5NzlmCuWKqOa8qy/liqjmvKvnlLXlvbHlkIjpm4YgYjk0NWRkMWZjMWRmIGI5YTdjYThiODg3NTQwOTA4ZGI2ZDFlNmNlMTQ2ZDYwCuWKqOa8qy/lm73lhoXlpJbnu4/lhbjliqjnlLvliqjmvKvlpKflhaggNmI3OTUyMTgzNDJkIDIzZDk1MTI3MWQ0NjQ2OTdiZTIzMmRiYjc0NmIyMjdlCuWKqOa8qy/lm73mvKvmm7TmlrDkuK0gMTdlOGU5YTFhNjU3IDYzMDUwM2JhM2RjZjRiYjVhZTQ4NWQ2ZWEzN2RjM2Y4CuWKqOa8qy/lt7Llroznu5Plm73mvKsgNmI3OTUyMTgzNDJkIGY2YWI2ZGMwMjEwYTQyYmVhMmRjMmJmZWEzOGMyYmU0CuWKqOa8qy/lt7Llroznu5Pml6XmvKsgNmI3OTUyMTgzNDJkIGQyNjU5NTZlMjQxZTQ5ZGJiYjdiZjVlNzE2MzBiMTkzCuWKqOa8qy/lt7Llroznu5Pnvo7mvKsgNmI3OTUyMTgzNDJkIGM0ZDQyOWRmYzY0NDQ3Mzc4NmJkYjIyYWE2NzQyMTkwCuWwj+WTgeebuOWjsC8yMDI05b635LqR56S+IGVjZTUyZDYzYjY5OCBkYWUyZjM2ZDM2ZDA0NzNiODlmZjg0ZGFhODFiODMwMwrlsI/lk4Hnm7jlo7Av5bCP5ZOB5aSn5ZCI6ZuGIGU4MjcyNjRlYTQ1MyA2MDljNWViOGIzMjQ0ZGMyOTU4YmMxM2YxNmQ0NTRlZArlsI/lk4Hnm7jlo7Av5bCP5ZOB57qv5Lqr5ZCI6ZuGIGQ4YjRhNTg0ZmQxYSBhNTI5OTM0OWQzNjk0MjA2OGFkYzg4Yjk1MmM3YzQ2MQrnlLXlvbEv5ZCI6ZuGL+S7pUFCQ0TlvIDlpLTlkIjpm4YgYTYzMjk2Nzc2MGNmIDdkYTRmZDJkYzA4ZjRmYTU4NTJmOTk3MjE1NTkyNTE3CueUteW9sS/lkIjpm4Yv5LulRUZHSOW8gOWktOWQiOmbhiAyZjU5YmI1ZDk2YjkgN2I3MTczN2UzY2Q4NDNjNWE5MzdhYzk3YTUzNTQyZGQK55S15b2xL+WQiOmbhi/ku6VJSktM5byA5aS05ZCI6ZuGIDUwODI4YzM2OGRlZiAwOTY5NTBlM2QxMDI0MmIxOTY2Yjc3NzgxMTE1YTA3YQrnlLXlvbEv5ZCI6ZuGL+S7pU1OT1DlvIDlpLTlkIjpm4YgZTA3ZTI2YWVjYzA4IGEyYjMwNTMxNjMxYzQ2ZGNiMzlmMzIwNjk3ODk4Mjk1CueUteW9sS/lkIjpm4Yv5LulUVJTVOW8gOWktOWQiOmbhiAwNTM2YTM4YTM1NmUgMWQxNzVkYjMwZWFhNDU0ZTlkYmM1ZWFhMDllMWU0NTQK55S15b2xL+WQiOmbhi/ku6VVVldY5byA5aS05ZCI6ZuGIGUyNzNlZjY5NzQwMyA2ZGJkYTZlODE3ZWI0MTQ1YmEyZGQ2ODFlNTdhYTY3NQrnlLXlvbEv5ZCI6ZuGL+S7pVla5byA5aS05ZCI6ZuGIGM4YWM2Yzg4ZTVkOCA0OGM0NzllMjRiYWU0ZWMzYTRhOWQ1NmZjYjA2ZmNmNArnlLXlvbEv5ZCI6ZuGL+S7peaVsOWtl+W8gOWktOWQiOmbhiA0OWFiNzVkNTJlMDAgY2VjMDcwMmRiMjZiNDdjNWFiZDQyY2E3OWFiYjY1ZTEK55S15b2xL+WvvOa8lCBlZDA4NDRjN2QwNDYgOTA5OTI1NGIxY2VlNGIzOWFjYzZmYzcxZmZmNzcwMzkK55S15b2xL+WvvOa8lC/ljJfph47mraYgZmFiMWVkYjllNWViIGQ3YmJmZmM0NWVmNjQxMDg4ZmU0YjIwMjkxMDhiY2FjCueUteW9sS/lr7zmvJQv5rSq6YeR5a6dIGJlMjYxYzhhN2ViOCBlMWRiOWQ3ODQ4MjI0MmMyOTczZDFjYzIzMDYwY2MxZQrnlLXlvbEv5oGQ5oCW54mHMTAw6YOoIDZjMDY2NmVkMjhkZSA2NjIxOGU3MzEwMTE0OWRmOTczODczYmRjMWY0NjUwMwrnlLXlvbEv5ryU5ZGYL+WImOW+t+WNjiAxNzY0YzJjODE2MDMgYWJhZTJmN2U2MWY1NDk4MDg1MTY3ZTA3ZWY4ZGVjMzQK55S15b2xL+a8lOWRmC/lkajmmJ/pqbAgNjBkY2E1ODAwOWFmIDdkYTUwMmQyNGY0NzRiNjBhZmNjMzQyZmQ1YWMwZGUzCueUteW9sS/mvJTlkZgv5ZGo5ram5Y+RIGU1ODNmYWM0NTU5MiA4MmMwNDljMTQwNTA0ZDRhYTMxY2JmZTE2NDVjYjlkOArnlLXlvbEv5ryU5ZGYL+W8oOWbveiNoyBkMzAwMGYxNDk0MmUgOGMzNWZjYmI0ZTg1NGU1MGIzODVkZjcwMjYwNGQzODIK55S15b2xL+a8lOWRmC/miJDpvpkgZTViNjRkZmIxYzgzIDYwN2I4NzlkYTI1YzQ0NjQ4M2JjN2Y4OTUwY2Q3MzNmCueUteW9sS/mvJTlkZgv5p2O5Li954+NIDQ3MzM3MGU2NTdjMCBjMzlhNTY2MDA5MmU0YmJhYWM3Y2FkM2NmMDY0ZTIzYwrnlLXlvbEv5ryU5ZGYL+adjuWwj+m+mSBiOTQ1ZGQxZmMxZGYgMTcyN2IxNjQ1MTE0NDMxYjgxYTMyZjRkMDZlNDA4MGIK55S15b2xL+a8lOWRmC/mnY7ov57mnbAgYmZjMGE2MTUwYWZjIDZlZWIwMzZjN2Q3YTQ1ODBhYjk1YzE2NWJiZWU3NGMzCueUteW9sS/mvJTlkZgv5rKI6IW+IGI5NDVkZDFmYzFkZiBiODkyYjY5NTNkMjM0ZDRlYWI4NzczNTE5NzI3NWViMQrnlLXlvbEv5ryU5ZGYL+iIkua3hyA4NGU1M2RkMzc4ZjIgYzU5Yzc4MzU4NGU3NGQ3MDk0Yjk4YTY0OTg0OTI4NzYK55S15b2xL+a8lOWRmC/pgrHmt5HotJ4gYzRiMDQwM2MwZGZhIGE5MjBlMDY1NTVmYjRkNTA5NzU3MGNhMWI0MTBiZDAyCueUteW9sS/nsr7pgInpq5jnlLvotKjpq5jliIbnlLXlvbEgOGYxYjRiN2RjNjllIGQyZTVlOTE2NzRmOTQzNTJiMzMxMGFiODZiOGMyMzhlCueUteW9sS/pgrXmsI/lkIjpm4YgNTYxMmZlMWFkYjRhIGVkNDRkMDMzZTNmYzRjNWVhMmQ4YTVjODk1MWRmMGQ5CueUteW9sS/pn6nlm71S57qnIDU0MzJiZWFlNGYxYSA1MTI0ZjQ3ODlkYWY0NTAwOWJkMTMzYWY1MDk5ODEwMgrnlLXlvbEv6auY5YiG5Y2O6K+t55S15b2xMzAw6YOoIGI5NDVkZDFmYzFkZiAyMTk4ZGFiNDNmYzY0YWRiYWY5YTZkNGI1YjEzZWZhYgrnlLXop4bliacvMjAyNOaXpemfqeWJpyA0NWQzNDEzMDE2MGYgZTczODBkM2M3YmM0NDllNmFhNWZhMjMwNjNiMmNkZjMK55S16KeG5YmnLzIwMjTmrKfnvo7liacgZjlmNTQyMGNhYjBkIGZkNjIyZDEyZjUzOTQ5ZWZiNWZlZGUwMmRlMDhlNjQ5CueUteinhuWJpy9UVkLjgIFBVFbkuprop4YgMDg1MjEyZGYzODVkIDE3MmI3ZWNjYzM4NDRhZTRhMTE0NTFkNmExNDVmZmUwCueUteinhuWJpy/lt7Llroznu5Mv5pWw5a2X5byA5aS0IGNkNGM1YWM3ZTgzMCBkZmEwMWNiMTg5NTg0MDhjYTBkYTcyYjEzOTMxOWFmMwrnlLXop4bliacv5bey5a6M57uTL+ixhueTo+ivhOWIhjkuMOS7peS4iuWbveS6p+WJpyBkMTljNGViZTFmZjcgN2I0Mjk0M2Q0ZjIwNDJhYmI5MDdjOTlkZGJiMzU0MGQK55S16KeG5YmnL+W3suWujOe7ky/pppblrZfmr41BQkNEIGUxYjJiYThiNmQ2YyBjODkyNDY3YjBjYzI0YWFiYWNiZWM3MWEwYjZmNGQzYwrnlLXop4bliacv5bey5a6M57uTL+mmluWtl+avjUVGR0ggMTY2ZmEwYTdjYTZmIGZmNTcwODNkODkyMzRlZDM4OTMyZGMwNjA5N2QxMTVkCueUteinhuWJpy/lt7Llroznu5Mv6aaW5a2X5q+NSUpLTCAzN2E5MmMwYjdmMTAgNTg1OTA3YWJhMGVmNDY0YmEwMGEwZjIwYjQ3ZmExMTYK55S16KeG5YmnL+W3suWujOe7ky/pppblrZfmr41OTU9QIGZiMzM4NmU0MmFmMiAzNmUyZjgxZmY0MTQ0YTljOGMxNDk4OGVkODlhODYwZArnlLXop4bliacv5bey5a6M57uTL+mmluWtl+avjVFSU1QgNDZjZTIxNGY0ZWQ3IDNiNGY5ZTBjNjc1OTQ5Yzk5MjY5NDc2ZTVmOWMwN2E4CueUteinhuWJpy/lt7Llroznu5Mv6aaW5a2X5q+NVVZXWCBmZTQ2ODFkN2ZiNDMgYmNiY2ZkMzhkMjU0NGY1Zjk1MWVjZmU0MzA0ODMyMDMK55S16KeG5YmnL+W3suWujOe7ky/pppblrZfmr41ZWiA4ZDY1ZTg4NWIwNTkgMDM2ZmQ5ODk1YzRiNGE0N2E1OWIxNzA0NjcxNTgxNmYK55S16KeG5YmnL+e7j+WFuOaXpemfqeWJp+WQiOmbhiBmMGRiZjU1MzU4NzQgNzY0MjI0YjQxYWZlNGY2ZmJlYTUwYjg4YTNhNmI1MmMK6Z+z5LmQL+S5pummmemfs+S5kOS4lue6quWFuOiXjyBkMmRmYTMyNjQ3ZjYgMTY3YWU5ZWRkM2ZlNDY2MmEyY2UzNzc1NTllMzVmNTgK6Z+z5LmQL+WPpOWFuOmfs+S5kOeyvumAieWQiOmbhiAyYjQ5NzgyMTNiMjkgNjkwMzhmZjA5MDA1NGExZWI4ODAzMTJiZTQ3NzUzOTIK6Z+z5LmQL+Wkp+iHqueEtumfs+S5kOezu+WIl+WQiOmbhiA2NTFlNWZhOTMwNTcgOWM5ZjMzMzY3ODNlNDhhZjlmNDdjNWVjZDk5OGU5MTQK6Z+z5LmQL+e6r+mfs+S5kOWQiOmbhiAxMjg0ODM4MWRjZTEgYWUyY2FlYjc4NDZkNGY4NTg0NjdkMmI2MjZkNzhjYTMK6Z+z5LmQL+i9pui9veaXoOaNn+eOr+e7lemfs+aViOmfs+S5kOWQiOmbhiA4MDVkNzZhMDgwNjMgNTkzZjk4MTA0ZjE5NDMwMmEyN2FlOTFiYTdjZDE4ZGIK6Z+z5LmQL+mch+aSvOW/g+eBteeahOWPsuivl+mfs+S5kOWQiOmbhiBkMWEwYjcwNDZiMjAgMjk0YTUzYTNjOWU4NGVmMGEwYWNjMDQxOTVjMDI1ZDg=\"\n\nfunction get_default_network() {\n\n    _default_network=$(cat \"${DDSREM_CONFIG_DIR}/default_network.txt\")\n\n    if [ \"${_default_network}\" == \"host\" ]; then\n        echo '--net=host'\n    else\n        case \"${1}\" in\n        qrcode)\n            echo '-p 34256:34256'\n            ;;\n        xiaoya-proxy)\n            echo '-p 9988:9988'\n            ;;\n        xiaoya-aliyuntvtoken_connector)\n            echo '-p 34278:34278'\n            ;;\n        esac\n    fi\n\n}\n\nfunction get_path() {\n\n    case \"${OSNAME}\" in\n    synology)\n        path_lib=/volume1/docker\n        ;;\n    unraid)\n        path_lib=/mnt/user/appdata\n        ;;\n    fnos)\n        if [ -d \"/vol1/1000\" ]; then\n            path_lib=/vol1/1000\n        fi\n        ;;\n    macos)\n        if [ -n \"${RUN_USER}\" ]; then\n            path_lib=\"/Users/${RUN_USER}/Documents\"\n        fi\n        ;;\n    *)\n        if auto_path=\"$(df -h | awk '$2 ~ /G/ && $2+0 > 200 {print $6}' | grep -E -v \"Avail|loop|boot|overlay|tmpfs|proc\" | head -n 1)\" > /dev/null 2>&1; then\n            if check_path \"${auto_path}\"; then\n                path_lib=\"${auto_path}\"\n            fi\n        fi\n        ;;\n    esac\n\n    if [ -z \"${path_lib}\" ]; then\n        case \"${1}\" in\n        xiaoya_alist_config_dir)\n            echo '/etc/xiaoya'\n            ;;\n        xiaoya_alist_media_dir)\n            echo '/opt/media'\n            ;;\n        esac\n    else\n        case \"${1}\" in\n        xiaoya_alist_config_dir)\n            echo \"${path_lib}/xiaoya\"\n            ;;\n        xiaoya_alist_media_dir)\n            echo \"${path_lib}/xiaoya_emby\"\n            ;;\n        esac\n    fi\n\n}\n\nfunction wait_emby_start() {\n\n    start_time=$(date +%s)\n    CONTAINER_NAME=\"$(cat \"${DDSREM_CONFIG_DIR}\"/container_name/xiaoya_emby_name.txt)\"\n    TARGET_LOG_LINE_SUCCESS=\"All entry points have started\"\n    while true; do\n        line=$(docker logs \"$CONTAINER_NAME\" 2>&1 | tail -n 10)\n        echo -e \"$line\"\n        if [[ \"$line\" == *\"$TARGET_LOG_LINE_SUCCESS\"* ]]; then\n            break\n        fi\n        current_time=$(date +%s)\n        elapsed_time=$((current_time - start_time))\n        if [ \"$elapsed_time\" -gt 600 ]; then\n            WARN \"Emby 未正常启动超时 10 分钟！\"\n            break\n        fi\n        sleep 8\n    done\n\n}\n\nfunction wait_xiaoya_start() {\n\n    start_time=$(date +%s)\n    TARGET_LOG_LINE_SUCCESS=\"success load storage: [/©️\"\n    while true; do\n        line=$(docker logs \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" 2>&1 | tail -n 10)\n        echo -e \"$line\"\n        current_time=$(date +%s)\n        elapsed_time=$((current_time - start_time))\n        if [[ \"$line\" == *\"$TARGET_LOG_LINE_SUCCESS\"* ]]; then\n            if [ \"$elapsed_time\" -gt 20 ]; then\n                break\n            fi\n        fi\n        if [ \"$elapsed_time\" -gt 600 ]; then\n            WARN \"小雅alist 未正常启动超时 10 分钟！\"\n            break\n        fi\n        sleep 8\n    done\n\n}\n\nfunction check_quark_cookie() {\n\n    if [[ ! -f \"${1}/quark_cookie.txt\" ]] && [[ ! -s \"${1}/quark_cookie.txt\" ]]; then\n        return 1\n    fi\n    local cookie user_agent url headers response status url2 response2 member member_type vip_88\n    cookie=$(head -n1 \"${1}/quark_cookie.txt\")\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\"\n    url=\"https://drive-pc.quark.cn/1/clouddrive/config?pr=ucpro&fr=pc&uc_param_str=\"\n    headers=\"Cookie: $cookie; User-Agent: $user_agent; Referer: https://pan.quark.cn\"\n    response=$(curl -s -D - -H \"$headers\" \"$url\")\n    status=$(echo \"$response\" | grep -i status | cut -f2 -d: | cut -f1 -d,)\n    if [ \"$status\" == \"401\" ]; then\n        ERROR \"无效夸克 Cookie\"\n        return 1\n    elif [ \"$status\" == \"200\" ]; then\n        url2=\"https://drive-pc.quark.cn/1/clouddrive/member?pr=ucpro&fr=pc&uc_param_str=&fetch_subscribe=true&_ch=home&fetch_identity=true\"\n        response2=$(curl -s -H \"$headers\" \"$url2\")\n        member=$(echo $response2 | grep -o '\"member_type\":\"[^\"]*\"' | sed 's/\"member_type\":\"\\(.*\\)\"/\\1/')\n        if [ $member == 'EXP_SVIP' ] || [ $member == 'SVIP' ]; then\n            vip_88=$(echo $response2 | grep -o '\"vip88_new\":[t|f]' | cut -f2 -d:)\n            if [ $vip_88 == 't' ]; then\n                member_type=\"88VIP会员\"\n            else\n                member_type=\"SVIP会员\"\n            fi\n        elif [ $member == 'NORMAL' ]; then\n            member_type=\"普通用户\"\n        else\n            member_type=\"${member//\\\"/}会员\"\n        fi\n        INFO \"有效 夸克 Cookie，${member_type}\"\n        return 0\n    else\n        ERROR \"请求失败，请检查 Cookie 或网络连接是否正确。\"\n        return 1\n    fi\n\n}\n\nfunction check_uc_cookie() {\n\n    if [[ ! -f \"${1}/uc_cookie.txt\" ]] && [[ ! -s \"${1}/uc_cookie.txt\" ]]; then\n        return 1\n    fi\n    local cookie user_agent url headers response status referer set_cookie\n    cookie=$(head -n1 \"${1}/uc_cookie.txt\")\n    referer=\"https://drive.uc.cn\"\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) quark-cloud-drive/2.5.20 Chrome/100.0.4896.160 Electron/18.3.5.4-b478491100 Safari/537.36 Channel/pckk_other_ch\"\n    url=\"https://pc-api.uc.cn/1/clouddrive/file/sort?pr=UCBrowser&fr=pc&pdir_fid=0&_page=1&_size=50&_fetch_total=1&_fetch_sub_dirs=0&_sort=file_type:asc,updated_at:desc\"\n    headers=\"Cookie: $cookie; User-Agent: $user_agent; Referer: $referer\"\n    response=$(curl -s -D - -H \"$headers\" \"$url\")\n    set_cookie=$(echo \"$response\" | grep -i \"^Set-Cookie:\" | sed 's/Set-Cookie: //')\n    status=$(echo \"$response\" | grep -i status | cut -f2 -d: | cut -f1 -d,)\n    if [ \"$status\" == \"401\" ]; then\n        ERROR \"无效 UC Cookie\"\n        return 1\n    elif [ -n \"${set_cookie}\" ]; then\n        local new_puus new_cookie\n        new_puus=$(echo \"$set_cookie\" | cut -f2 -d: | cut -f1 -d\\;)\n        new_cookie=${cookie//__puus=[^;]*/$new_puus}\n        echo \"$new_cookie\" > ${1}/uc_cookie.txt\n        INFO \"有效 UC Cookie 并更新\"\n        return 0\n    elif [ -z \"${set_cookie}\" ] && [ \"${status}\" == \"200\" ]; then\n        INFO \"有效 UC Cookie\"\n        return 0\n    else\n        ERROR \"请求失败，请检查 Cookie 或网络连接是否正确。\"\n        return 1\n    fi\n\n}\n\nfunction check_115_cookie() {\n\n    if [[ ! -f \"${1}/115_cookie.txt\" ]] && [[ ! -s \"${1}/115_cookie.txt\" ]]; then\n        return 1\n    fi\n    local cookie user_agent url headers response vip\n    cookie=$(head -n1 \"${1}/115_cookie.txt\")\n    user_agent=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/127.0.0.0 Safari/537.36\"\n    url=\"https://my.115.com/?ct=ajax&ac=nav\"\n    headers=\"Cookie: $cookie; User-Agent: $user_agent; Referer: https://115.com/\"\n    response=$(curl -s -D - -H \"$headers\" \"$url\")\n    vip=$(echo -e \"$response\" | grep -o '\"vip\":[^,]*' | sed 's/\"vip\"://')\n    if echo -e \"${response}\" | grep -q \"user_id\"; then\n        if [ $vip == \"0\" ]; then\n            INFO \"有效 115 Cookie，普通用户\"\n        else\n            INFO \"有效 115 Cookie，VIP用户\"\n        fi\n        return 0\n    else\n        ERROR \"请求失败，请检查 Cookie 或网络连接是否正确。\"\n        return 1\n    fi\n\n}\n\nfunction check_aliyunpan_tvtoken() {\n\n    local token url response refresh_token data_dir\n    data_dir=\"${1}\"\n    if [ -n \"${2}\" ]; then\n        token=\"${2}\"\n    else\n        token=$(head -n1 \"${data_dir}/myopentoken.txt\")\n    fi\n    url=$(head -n1 \"${data_dir}/open_tv_token_url.txt\")\n    if ! response=$(curl -s \"${url}\" -X POST -H \"User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.83 Safari/537.36\" -H \"Rererer: https://www.aliyundrive.com/\" -H \"Content-Type: application/json\" -d '{\"refresh_token\":\"'$token'\", \"grant_type\": \"refresh_token\"}'); then\n        WARN \"网络问题，无法检测 阿里云盘 TV Token 有效性\"\n        return 0\n    fi\n    refresh_token=$(echo \"$response\" | sed 's/:\\s*/:/g' | sed -n 's/.*\"refresh_token\":\"\\([^\"]*\\).*/\\1/p')\n    if [ -n \"${refresh_token}\" ]; then\n        echo \"${refresh_token}\" > \"${data_dir}/myopentoken.txt\"\n        INFO \"有效 阿里云盘 TV Token\"\n        return 0\n    else\n        ERROR \"无效 阿里云盘 TV Token\"\n        return 1\n    fi\n\n}\n\nfunction check_aliyunpan_refreshtoken() {\n\n    local token header referer response refresh_token data_dir\n    data_dir=\"${1}\"\n    if [ -n \"${2}\" ]; then\n        token=\"${2}\"\n    else\n        token=$(head -n1 \"${data_dir}/mytoken.txt\")\n    fi\n    header=\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.54 Safari/537.36\"\n    referer=https://www.aliyundrive.com/\n    if ! response=$(curl -s https://auth.aliyundrive.com/v2/account/token -X POST -H \"User-Agent: $header\" -H \"Content-Type:application/json\" -H \"Referer: $referer\" -d '{\"refresh_token\":\"'$token'\", \"grant_type\": \"refresh_token\"}'); then\n        WARN \"网络问题，无法检测 阿里云盘 Refresh Token 有效性\"\n        return 0\n    fi\n    refresh_token=$(echo \"$response\" | sed 's/:\\s*/:/g' | sed -n 's/.*\"refresh_token\":\"\\([^\"]*\\).*/\\1/p')\n    if [ -n \"${refresh_token}\" ]; then\n        echo \"${refresh_token}\" > \"${data_dir}/mytoken.txt\"\n        INFO \"有效 阿里云盘 Refresh Token\"\n        return 0\n    else\n        ERROR \"无效 阿里云盘 Refresh Token\"\n        return 1\n    fi\n\n}\n\nfunction check_aliyunpan_opentoken() {\n\n    function cache_result() {\n\n        local file_path cache_path last_modified current_time difference current_hash\n        file_path=\"${1}\"\n        cache_path=\"${2}\"\n        if command -v md5sum > /dev/null 2>&1; then\n            current_hash=$(md5sum \"$file_path\" | awk '{ print $1 }')\n        else\n            current_hash=$(head -n 1 \"$file_path\")\n        fi\n        if [ -f \"$cache_path\" ] && [ \"$(head -n 1 \"$cache_path\")\" == \"$current_hash\" ]; then\n            last_modified=$(date -r \"$cache_path\" +%s)\n            current_time=$(date +%s)\n            difference=$(((current_time - last_modified) / 60))\n            if [ \"$difference\" -lt 60 ]; then\n                # 文件未更改且操作在60分钟内已执行，跳过此次执行\n                return 1\n            fi\n        fi\n        echo \"$current_hash\" > \"$cache_path\"\n        return 0\n\n    }\n\n    function cache_update() {\n\n        if [ \"${3}\" == true ]; then\n            md5sum \"${1}\" | awk '{ print $1 }' > \"${2}\"\n        else\n            rm -f \"${2}\"\n        fi\n\n    }\n\n    local token code response refresh_token data_dir url_host\n    data_dir=\"${1}\"\n    if [ -n \"${2}\" ]; then\n        token=\"${2}\"\n    else\n        token=$(head -n1 \"${data_dir}/myopentoken.txt\")\n    fi\n    if cache_result \"${data_dir}/myopentoken.txt\" \"${DDSREM_CONFIG_DIR}/cache_data/check_aliyunpan_opentoken.txt\"; then\n        if curl -Is https://api.xhofe.top/alist/ali_open/qr | head -n 1 | grep -q '200'; then\n            url_host=\"api.xhofe.top\"\n        else\n            url_host=\"api-cf.nn.ci\"\n        fi\n        if ! response=$(curl -s \"https://${url_host}/alist/ali_open/token\" -X POST -H \"User-Agent:Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/99.0.4844.83 Safari/537.36\" -H \"Rererer: https://www.aliyundrive.com/\" -H \"Content-Type: application/json\" -d '{\"refresh_token\":\"'$token'\", \"grant_type\": \"refresh_token\"}'); then\n            WARN \"网络问题，无法检测 阿里云盘 Open Token 有效性\"\n            cache_update \"${data_dir}/myopentoken.txt\" \"${DDSREM_CONFIG_DIR}/cache_data/check_aliyunpan_opentoken.txt\" \"false\"\n            return 0\n        fi\n        code=$(echo \"$response\" | sed -n 's/.*\"code\":\"\\([^\"]*\\).*/\\1/p')\n        refresh_token=$(echo \"$response\" | sed 's/:\\s*/:/g' | sed -n 's/.*\"refresh_token\":\"\\([^\"]*\\).*/\\1/p')\n        if [ -n \"${refresh_token}\" ]; then\n            echo \"${refresh_token}\" > \"${data_dir}/myopentoken.txt\"\n            INFO \"有效 阿里云盘 Open Token\"\n            cache_update \"${data_dir}/myopentoken.txt\" \"${DDSREM_CONFIG_DIR}/cache_data/check_aliyunpan_opentoken.txt\" \"true\"\n            return 0\n        elif [ \"${code}\" == \"Too Many Requests\" ]; then\n            WARN \"已被限流，无法检测 阿里云盘 Open Token 有效性\"\n            cache_update \"${data_dir}/myopentoken.txt\" \"${DDSREM_CONFIG_DIR}/cache_data/check_aliyunpan_opentoken.txt\" \"false\"\n            return 0\n        else\n            ERROR \"无效 阿里云盘 Open Token\"\n            cache_update \"${data_dir}/myopentoken.txt\" \"${DDSREM_CONFIG_DIR}/cache_data/check_aliyunpan_opentoken.txt\" \"false\"\n            return 1\n        fi\n    else\n        INFO \"有效 阿里云盘 Open Token（缓存结果）\"\n        return 0\n    fi\n\n}\n\nfunction qrcode_mode_choose() {\n\n    extra_parameters=\n\n    function qrcode_web() {\n\n        if ! check_port \"34256\"; then\n            ERROR \"34256 端口被占用，请关闭占用此端口的程序！\"\n            exit 1\n        fi\n\n        local local_ip\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            local_ip=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n        else\n            local_ip=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n        fi\n        if [ -z \"${local_ip}\" ]; then\n            local_ip=\"小雅服务器IP\"\n        fi\n        INFO \"请浏览器访问 http://${local_ip}:34256 并使用阿里云盘APP扫描二维码！\"\n        # shellcheck disable=SC2046\n        docker run -i --rm \\\n            -v \"${1}:/data\" \\\n            -e LANG=C.UTF-8 \\\n            $(auto_privileged) \\\n            $(get_default_network \"qrcode\") \\\n            ddsderek/xiaoya-glue:python \\\n            \"${2}\" --qrcode_mode=web ${extra_parameters}\n\n    }\n\n    if [ \"${2}\" == \"/115cookie/115cookie.py\" ]; then\n        while true; do\n            qrcode_apps=('alipaymini' 'web' 'ios' 'android' 'windows' 'mac' 'linux' 'wechatmini')\n            find_qrcode_app=false\n            interface=\n            for i in \"${!qrcode_apps[@]}\"; do\n                interface=\"${interface}$((i + 1))、${qrcode_apps[$i]}\\n\"\n            done\n            INFO \"请选择扫码绑定的设备（默认 1）\"\n            echo -e \"${interface}\\c\"\n            read -erp \"QRCODE_APP:\" QRCODE_APP_NUM\n            [[ -z \"${QRCODE_APP_NUM}\" ]] && QRCODE_APP_NUM=\"1\"\n            for i in \"${!qrcode_apps[@]}\"; do\n                if [[ \"$((i + 1))\" == \"${QRCODE_APP_NUM}\" ]]; then\n                    qrcode_app=\"${qrcode_apps[$i]}\"\n                    find_qrcode_app=true\n                    break\n                fi\n            done\n            if [ \"${find_qrcode_app}\" == true ]; then\n                break\n            else\n                ERROR \"输入无效，请重新选择\"\n            fi\n        done\n        extra_parameters=\"--qrcode_app=${qrcode_app}\"\n    fi\n\n    while true; do\n        INFO \"请选择扫码模式 [ 1: 命令行扫码 | 2: 浏览器扫码 ]（默认 2）\"\n        read -erp \"QRCODE_MODE:\" QRCODE_MODE\n        [[ -z \"${QRCODE_MODE}\" ]] && QRCODE_MODE=\"2\"\n        if [[ ${QRCODE_MODE} == [1] ]]; then\n            # shellcheck disable=SC2046\n            docker run -i --rm \\\n                -v \"${1}:/data\" \\\n                -e LANG=C.UTF-8 \\\n                $(auto_privileged) \\\n                ddsderek/xiaoya-glue:python \\\n                \"${2}\" --qrcode_mode=shell ${extra_parameters}\n            return 0\n        elif [[ ${QRCODE_MODE} == [2] ]]; then\n            qrcode_web \"${1}\" \"${2}\"\n            return 0\n        else\n            ERROR \"输入无效，请重新选择\"\n        fi\n    done\n\n}\n\nfunction qrcode_aliyunpan_tvtoken() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"阿里云盘 TV Token 配置\"\n        pull_glue_python_ddsrem\n        qrcode_mode_choose \"${1}\" \"/aliyuntvtoken/alitoken2.py\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前阿里云盘 TV Token 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction qrcode_aliyunpan_refreshtoken() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"阿里云盘 Refresh Token 配置\"\n        local command_file\n        pull_glue_python_ddsrem\n        if curl -Is https://api.xhofe.top/alist/ali/qr | head -n 1 | grep -q '200'; then\n            command_file=\"aliyuntoken.py\"\n            INFO \"使用 api.xhofe.top 地址\"\n        elif curl -Is https://api-cf.nn.ci/alist/ali/qr | head -n 1 | grep -q '200'; then\n            command_file=\"aliyuntoken_nn.ci.py\"\n            INFO \"使用 api-cf.nn.ci 地址\"\n        else\n            command_file=\"aliyuntoken_vercel.py\"\n            INFO \"使用 aliyuntoken.vercel.app 地址\"\n        fi\n        qrcode_mode_choose \"${1}\" \"/aliyuntoken/${command_file}\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前阿里云盘 Refresh Token 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction qrcode_aliyunpan_opentoken() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"阿里云盘 Open Token 配置\"\n        local command_file\n        pull_glue_python_ddsrem\n        if curl -Is https://api.xhofe.top/alist/ali_open/qr | head -n 1 | grep -q '200'; then\n            command_file=\"aliyunopentoken.py\"\n            INFO \"使用 api.xhofe.top 地址\"\n        else\n            command_file=\"aliyunopentoken_nn.ci.py\"\n            INFO \"使用 api-cf.nn.ci 地址\"\n        fi\n        qrcode_mode_choose \"${1}\" \"/aliyunopentoken/${command_file}\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前阿里云盘 Open Token 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction qrcode_115_cookie() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"115 Cookie 扫码获取\"\n        pull_glue_python_ddsrem\n        qrcode_mode_choose \"${1}\" \"/115cookie/115cookie.py\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前 115 Cookie 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction qrcode_quark_cookie() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"夸克 Cookie 扫码获取\"\n        pull_glue_python_ddsrem\n        qrcode_mode_choose \"${1}\" \"/quark_cookie/quark_cookie.py\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前夸克 Cookie 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction qrcode_uc_cookie() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"UC Cookie 扫码获取\"\n        pull_glue_python_ddsrem\n        qrcode_mode_choose \"${1}\" \"/uc_cookie/uc_cookie.py\"\n        INFO \"操作全部完成！\"\n        ;;\n    *)\n        WARN \"目前 UC Cookie 扫码获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction enter_aliyunpan_refreshtoken() {\n\n    while true; do\n        INFO \"是否使用扫码自动获取 阿里云盘 Token [Y/n]（默认 Y）\"\n        read -erp \"Token:\" choose_qrcode_aliyunpan_refreshtoken\n        [[ -z \"${choose_qrcode_aliyunpan_refreshtoken}\" ]] && choose_qrcode_aliyunpan_refreshtoken=\"y\"\n        if [[ ${choose_qrcode_aliyunpan_refreshtoken} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${choose_qrcode_aliyunpan_refreshtoken} == [Yy] ]]; then\n        qrcode_aliyunpan_refreshtoken \"${1}\"\n    fi\n    mytokenfilesize=$(cat \"${1}\"/mytoken.txt)\n    mytokenstringsize=${#mytokenfilesize}\n    if [ \"$mytokenstringsize\" -le 31 ] || ! check_aliyunpan_refreshtoken \"${1}\"; then\n        if [[ ${choose_qrcode_aliyunpan_refreshtoken} == [Yy] ]]; then\n            WARN \"扫码获取 阿里云盘 Token 失败，请手动获取！\"\n        fi\n        while true; do\n            INFO \"输入你的 阿里云盘 Token（32位长）\"\n            read -erp \"TOKEN:\" token\n            token_len=${#token}\n            if [ \"$token_len\" -ne 32 ]; then\n                ERROR \"长度不对,阿里云盘 Token是32位长\"\n                ERROR \"请参考指南配置文件: https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f\"\n            else\n                echo \"$token\" > \"${1}\"/mytoken.txt\n                if check_aliyunpan_refreshtoken \"${1}\"; then\n                    break\n                fi\n            fi\n        done\n    fi\n\n}\n\nfunction settings_aliyunpan_refreshtoken() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_aliyunpan_refreshtoken \"${1}\"\n    else\n        mytokenfilesize=$(cat \"${1}\"/mytoken.txt)\n        mytokenstringsize=${#mytokenfilesize}\n        if [ \"$mytokenstringsize\" -le 31 ] || ! check_aliyunpan_refreshtoken \"${1}\"; then\n            enter_aliyunpan_refreshtoken \"${1}\"\n        fi\n    fi\n\n}\n\nfunction enter_aliyunpan_opentoken() {\n\n    while true; do\n        INFO \"是否使用扫码自动获取 阿里云盘 Open Token [Y/n]（默认 Y）\"\n        read -erp \"Token:\" choose_qrcode_aliyunpan_opentoken\n        [[ -z \"${choose_qrcode_aliyunpan_opentoken}\" ]] && choose_qrcode_aliyunpan_opentoken=\"y\"\n        if [[ ${choose_qrcode_aliyunpan_opentoken} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${choose_qrcode_aliyunpan_opentoken} == [Yy] ]]; then\n        qrcode_aliyunpan_opentoken \"${1}\"\n    fi\n    myopentokenfilesize=$(cat \"${1}\"/myopentoken.txt)\n    myopentokenstringsize=${#myopentokenfilesize}\n    if [ \"$myopentokenstringsize\" -le 279 ] || ! check_aliyunpan_opentoken \"${1}\"; then\n        if [[ ${choose_qrcode_aliyunpan_opentoken} == [Yy] ]]; then\n            WARN \"扫码获取 阿里云盘 Open Token 失败，请手动获取！\"\n        fi\n        while true; do\n            INFO \"输入你的 阿里云盘 Open Token（280位长或者335位长）\"\n            read -erp \"OPENTOKEN:\" opentoken\n            opentoken_len=${#opentoken}\n            if [[ \"$opentoken_len\" -ne 280 ]] && [[ \"$opentoken_len\" -ne 335 ]]; then\n                ERROR \"长度不对,阿里云盘 Open Token是280位长或者335位\"\n                ERROR \"请参考指南配置文件: https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f\"\n            else\n                echo \"$opentoken\" > \"${1}\"/myopentoken.txt\n                if check_aliyunpan_opentoken \"${1}\"; then\n                    break\n                fi\n            fi\n        done\n    fi\n\n}\n\nfunction settings_aliyunpan_opentoken() {\n\n    if [ -f \"${1}/open_tv_token_url.txt\" ]; then\n        mv \"${1}/open_tv_token_url.txt\" \"${1}/open_tv_token_url.txt.bak\"\n    fi\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_aliyunpan_opentoken \"${1}\"\n    else\n        myopentokenfilesize=$(cat \"${1}\"/myopentoken.txt)\n        myopentokenstringsize=${#myopentokenfilesize}\n        if [ \"$myopentokenstringsize\" -le 279 ] || ! check_aliyunpan_opentoken \"${1}\"; then\n            enter_aliyunpan_opentoken \"${1}\"\n        fi\n    fi\n\n}\n\nfunction enter_115_cookie() {\n\n    touch_chmod \"${1}/115_cookie.txt\"\n    while true; do\n        INFO \"是否使用扫码自动获取 115 Cookie [Y/n]（默认 Y）\"\n        read -erp \"Cookie:\" choose_qrcode_115_cookie\n        [[ -z \"${choose_qrcode_115_cookie}\" ]] && choose_qrcode_115_cookie=\"y\"\n        if [[ ${choose_qrcode_115_cookie} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${choose_qrcode_115_cookie} == [Yy] ]]; then\n        qrcode_115_cookie \"${1}\"\n    fi\n    if ! check_115_cookie \"${1}\"; then\n        if [[ ${choose_qrcode_115_cookie} == [Yy] ]]; then\n            WARN \"扫码获取 115 Cookie 失败，请手动获取！\"\n        fi\n        while true; do\n            INFO \"输入你的 115 Cookie\"\n            read -erp \"Cookie:\" set_115_cookie\n            echo -e \"${set_115_cookie}\" > ${1}/115_cookie.txt\n            if check_115_cookie \"${1}\"; then\n                break\n            fi\n        done\n    fi\n\n}\n\nfunction settings_115_cookie() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_115_cookie \"${1}\"\n    else\n        if [ ! -f \"${1}/115_cookie.txt\" ] || ! check_115_cookie \"${1}\"; then\n            while true; do\n                INFO \"是否配置 115 Cookie [Y/n]（默认 n 不配置）\"\n                read -erp \"Cookie:\" choose_115_cookie\n                [[ -z \"${choose_115_cookie}\" ]] && choose_115_cookie=\"n\"\n                if [[ ${choose_115_cookie} == [YyNn] ]]; then\n                    break\n                else\n                    ERROR \"非法输入，请输入 [Y/n]\"\n                fi\n            done\n            if [[ ${choose_115_cookie} == [Yy] ]]; then\n                enter_115_cookie \"${1}\"\n            fi\n        fi\n    fi\n\n}\n\nfunction enter_quark_cookie() {\n\n    touch_chmod \"${1}/quark_cookie.txt\"\n    while true; do\n        INFO \"是否使用扫码自动获取 夸克 Cookie [Y/n]（默认 Y）\"\n        read -erp \"Cookie:\" choose_qrcode_quark_cookie\n        [[ -z \"${choose_qrcode_quark_cookie}\" ]] && choose_qrcode_quark_cookie=\"y\"\n        if [[ ${choose_qrcode_quark_cookie} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${choose_qrcode_quark_cookie} == [Yy] ]]; then\n        qrcode_quark_cookie \"${1}\"\n    fi\n    if ! check_quark_cookie \"${1}\"; then\n        if [[ ${choose_qrcode_quark_cookie} == [Yy] ]]; then\n            WARN \"扫码获取 夸克 Cookie 失败，请手动获取！\"\n        fi\n        while true; do\n            INFO \"输入你的 夸克 Cookie\"\n            read -erp \"Cookie:\" quark_cookie\n            echo -e \"${quark_cookie}\" > ${1}/quark_cookie.txt\n            if check_quark_cookie \"${1}\"; then\n                break\n            fi\n        done\n    fi\n\n}\n\nfunction settings_quark_cookie() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_quark_cookie \"${1}\"\n    else\n        if [ ! -f \"${1}/quark_cookie.txt\" ] || ! check_quark_cookie \"${1}\"; then\n            while true; do\n                INFO \"是否配置 夸克 Cookie [Y/n]（默认 n 不配置）\"\n                read -erp \"Cookie:\" choose_quark_cookie\n                [[ -z \"${choose_quark_cookie}\" ]] && choose_quark_cookie=\"n\"\n                if [[ ${choose_quark_cookie} == [YyNn] ]]; then\n                    break\n                else\n                    ERROR \"非法输入，请输入 [Y/n]\"\n                fi\n            done\n            if [[ ${choose_quark_cookie} == [Yy] ]]; then\n                enter_quark_cookie \"${1}\"\n            fi\n        fi\n    fi\n\n}\n\nfunction enter_uc_cookie() {\n\n    touch_chmod \"${1}/uc_cookie.txt\"\n    while true; do\n        INFO \"是否使用扫码自动获取 UC Cookie [Y/n]（默认 Y）\"\n        read -erp \"Cookie:\" choose_qrcode_uc_cookie\n        [[ -z \"${choose_qrcode_uc_cookie}\" ]] && choose_qrcode_uc_cookie=\"y\"\n        if [[ ${choose_qrcode_uc_cookie} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${choose_qrcode_uc_cookie} == [Yy] ]]; then\n        qrcode_uc_cookie \"${1}\"\n    fi\n    if ! check_uc_cookie \"${1}\"; then\n        if [[ ${choose_qrcode_uc_cookie} == [Yy] ]]; then\n            WARN \"扫码获取 UC Cookie 失败，请手动获取！\"\n        fi\n        while true; do\n            INFO \"输入你的 UC Cookie\"\n            read -erp \"Cookie:\" uc_cookie\n            echo -e \"${uc_cookie}\" > ${1}/uc_cookie.txt\n            if check_uc_cookie \"${1}\"; then\n                break\n            fi\n        done\n    fi\n\n}\n\nfunction settings_uc_cookie() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_uc_cookie \"${1}\"\n    else\n        if [ ! -f \"${1}/uc_cookie.txt\" ] || ! check_uc_cookie \"${1}\"; then\n            while true; do\n                INFO \"是否配置 UC Cookie [Y/n]（默认 n 不配置）\"\n                read -erp \"Cookie:\" choose_uc_cookie\n                [[ -z \"${choose_uc_cookie}\" ]] && choose_uc_cookie=\"n\"\n                if [[ ${choose_uc_cookie} == [YyNn] ]]; then\n                    break\n                else\n                    ERROR \"非法输入，请输入 [Y/n]\"\n                fi\n            done\n            if [[ ${choose_uc_cookie} == [Yy] ]]; then\n                enter_uc_cookie \"${1}\"\n            fi\n        fi\n    fi\n\n}\n\nfunction enter_pikpak_account() {\n\n    touch_chmod \"${1}/pikpak.txt\"\n    INFO \"输入你的 PikPak 账号（手机号或邮箱）\"\n    INFO \"如果手机号，要\\\"+区号\\\"，比如你的手机号\\\"12345678900\\\"那么就填\\\"+8612345678900\\\"\"\n    read -erp \"PikPak_Username:\" PikPak_Username\n    INFO \"输入你的 PikPak 账号密码\"\n    read -erp \"PikPak_Password:\" PikPak_Password\n    INFO \"输入你的 PikPak X-Device-Id\"\n    read -erp \"PikPak_Device_Id:\" PikPak_Device_Id\n    echo -e \"\\\"${PikPak_Username}\\\" \\\"${PikPak_Password}\\\" \\\"web\\\" \\\"${PikPak_Device_Id}\\\"\" > ${1}/pikpak.txt\n\n}\n\nfunction settings_pikpak_account() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_pikpak_account \"${1}\"\n    else\n        if [ ! -f \"${1}/pikpak.txt\" ]; then\n            while true; do\n                INFO \"是否继续配置 PikPak 账号密码 [Y/n]（默认 n 不配置）\"\n                read -erp \"PikPak_Set:\" PikPak_Set\n                [[ -z \"${PikPak_Set}\" ]] && PikPak_Set=\"n\"\n                if [[ ${PikPak_Set} == [YyNn] ]]; then\n                    break\n                else\n                    ERROR \"非法输入，请输入 [Y/n]\"\n                fi\n            done\n            if [[ ${PikPak_Set} == [Yy] ]]; then\n                enter_pikpak_account \"${1}\"\n            fi\n        fi\n    fi\n\n}\n\nfunction enter_ali2115() {\n\n    touch_chmod \"${1}/ali2115.txt\"\n    if [ -f \"${1}/115_cookie.txt\" ] && check_115_cookie \"${1}\"; then\n        INFO \"自动获取 115 Cookie！\"\n        set_115_cookie=\"$(cat ${1}/115_cookie.txt | head -n1)\"\n    else\n        while true; do\n            INFO \"输入你的 115 Cookie\"\n            read -erp \"Cookie:\" set_115_cookie\n            if [ -n \"${set_115_cookie}\" ]; then\n                break\n            fi\n        done\n    fi\n    while true; do\n        INFO \"是否自动删除115转存文件 [Y/n]（默认 Y）\"\n        read -erp \"purge_pan115_temp:\" purge_pan115_temp\n        [[ -z \"${purge_pan115_temp}\" ]] && purge_pan115_temp=\"y\"\n        if [[ ${purge_pan115_temp} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    while true; do\n        INFO \"是否自动删除阿里云盘转存文件 [Y/n]（默认 Y）\"\n        read -erp \"purge_ali_temp:\" purge_ali_temp\n        [[ -z \"${purge_ali_temp}\" ]] && purge_ali_temp=\"y\"\n        if [[ ${purge_ali_temp} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    INFO \"输入你的 115 转存文件夹 id（默认 0）\"\n    read -erp \"dir_id:\" dir_id\n    [[ -z \"${dir_id}\" ]] && dir_id=0\n    if [[ ${purge_pan115_temp} == [Yy] ]]; then\n        purge_pan115_temp=true\n    else\n        purge_pan115_temp=false\n    fi\n    if [[ ${purge_ali_temp} == [Yy] ]]; then\n        purge_ali_temp=true\n    else\n        purge_ali_temp=false\n    fi\n    echo -e \"purge_ali_temp=${purge_ali_temp}\\ncookie=\\\"${set_115_cookie}\\\"\\npurge_pan115_temp=${purge_pan115_temp}\\ndir_id=${dir_id}\" > ${1}/ali2115.txt\n\n}\n\nfunction settings_ali2115() {\n\n    if [ \"${2}\" == \"force\" ]; then\n        enter_ali2115 \"${1}\"\n    else\n        if [ ! -f \"${1}/ali2115.txt\" ]; then\n            while true; do\n                INFO \"是否配置 阿里转存115播放（ali2115.txt） [Y/n]（默认 n 不配置）\"\n                read -erp \"ali2115:\" ali2115_set\n                [[ -z \"${ali2115_set}\" ]] && ali2115_set=\"n\"\n                if [[ ${ali2115_set} == [YyNn] ]]; then\n                    break\n                else\n                    ERROR \"非法输入，请输入 [Y/n]\"\n                fi\n            done\n            if [[ ${ali2115_set} == [Yy] ]]; then\n                enter_ali2115 \"${1}\"\n            fi\n        fi\n    fi\n\n}\n\nfunction get_aliyunpan_folder_id() {\n\n    clear_qrcode_container\n    cpu_arch=$(uname -m)\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"阿里云盘 folder id 自动获取\"\n        pull_glue_python_ddsrem\n        # shellcheck disable=SC2046\n        docker run -it --rm \\\n            -v \"${1}:/data\" \\\n            -e LANG=C.UTF-8 \\\n            $(auto_privileged) \\\n            ddsderek/xiaoya-glue:python \\\n            /get_folder_id/get_folder_id.py --data_path='/data' --drive_mode=r\n        ;;\n    *)\n        WARN \"目前阿里云盘 folder id 自动获取只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        ;;\n    esac\n\n}\n\nfunction settings_aliyunpan_folder_id() {\n\n    folderidfilesize=$(cat \"${1}\"/temp_transfer_folder_id.txt)\n    folderidstringsize=${#folderidfilesize}\n    if [ ! -f \"${1}/temp_transfer_folder_id.txt\" ] || [ \"$folderidstringsize\" -le 39 ]; then\n        while true; do\n            INFO \"是否自动获取 阿里云盘转存目录 folder id [Y/n]（默认 Y）\"\n            read -erp \"Token:\" auto_get_folder_id\n            [[ -z \"${auto_get_folder_id}\" ]] && auto_get_folder_id=\"y\"\n            if [[ ${auto_get_folder_id} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${auto_get_folder_id} == [Yy] ]]; then\n            get_aliyunpan_folder_id \"${1}\"\n        fi\n\n        folderidfilesize=$(cat \"${1}\"/temp_transfer_folder_id.txt)\n        folderidstringsize=${#folderidfilesize}\n        if [ \"$folderidstringsize\" -le 39 ]; then\n            while true; do\n                INFO \"输入你的阿里云盘转存目录 folder id\"\n                read -erp \"FOLDERID:\" folderid\n                folder_id_len=${#folderid}\n                if [ \"$folder_id_len\" -ne 40 ]; then\n                    ERROR \"长度不对，阿里云盘 folder id 是40位长\"\n                    ERROR \"请参考指南配置文件: https://xiaoyaliu.notion.site/xiaoya-docker-69404af849504fa5bcf9f2dd5ecaa75f\"\n                else\n                    echo \"$folderid\" > \"${1}\"/temp_transfer_folder_id.txt\n                    break\n                fi\n            done\n        fi\n    fi\n\n}\n\nfunction get_config_dir() {\n\n    local xiaoya_config_dir DEFAULT_CONFIG_DIR\n\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n        xiaoya_config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/data$\" | awk -F: '{print $1}')\"\n    fi\n\n    while true; do\n        if [ -n \"${xiaoya_config_dir}\" ]; then\n            if [ ! -f \"${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt\" ] || [ -z \"$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\" ]; then\n                echo \"${xiaoya_config_dir}\" > \"${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt\"\n            fi\n            if [ \"${xiaoya_config_dir}\" == \"$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\" ]; then\n                INFO \"小雅容器挂载目录与当前保存的小雅配置目录路径一致\"\n                INFO \"小雅配置目录通过小雅容器获取\"\n            else\n                WARN \"小雅容器挂载目录与当前保存的小雅配置目录路径不一致\"\n                WARN \"默认使用当前保存的小雅配置目录路径\"\n            fi\n            xiaoya_config_dir=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            if [ -z \"${xiaoya_config_dir}\" ]; then\n                WARN \"读取小雅Alist配置文件路径错误，请重新输入你的小雅Alist配置文件路径\"\n            else\n                INFO \"已读取小雅Alist配置文件路径：${xiaoya_config_dir} (默认不更改回车继续，如果需要更改请输入新路径)\"\n            fi\n            read -erp \"CONFIG_DIR:\" CONFIG_DIR\n            [[ -z \"${CONFIG_DIR}\" ]] && CONFIG_DIR=${xiaoya_config_dir}\n        elif [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            if [ -z \"${OLD_CONFIG_DIR}\" ]; then\n                WARN \"读取小雅Alist配置文件路径错误，请重新输入你的小雅Alist配置文件路径\"\n            else\n                INFO \"已读取小雅Alist配置文件路径：${OLD_CONFIG_DIR} (默认不更改回车继续，如果需要更改请输入新路径)\"\n            fi\n            read -erp \"CONFIG_DIR:\" CONFIG_DIR\n            [[ -z \"${CONFIG_DIR}\" ]] && CONFIG_DIR=${OLD_CONFIG_DIR}\n        else\n            DEFAULT_CONFIG_DIR=\"$(get_path \"xiaoya_alist_config_dir\")\"\n            INFO \"请输入配置文件目录（默认 ${DEFAULT_CONFIG_DIR} ）\"\n            read -erp \"CONFIG_DIR:\" CONFIG_DIR\n            [[ -z \"${CONFIG_DIR}\" ]] && CONFIG_DIR=\"${DEFAULT_CONFIG_DIR}\"\n            touch \"${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt\"\n        fi\n        if check_path \"${CONFIG_DIR}\"; then\n            echo \"${CONFIG_DIR}\" > \"${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt\"\n            INFO \"目录合法性检测通过！\"\n            break\n        else\n            ERROR \"非合法目录，请重新输入！\"\n        fi\n    done\n    if [ -d \"${CONFIG_DIR}\" ]; then\n        INFO \"读取配置目录中...\"\n        # 将所有小雅配置文件修正成 linux 格式\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            find ${CONFIG_DIR} -maxdepth 1 -type f -name \"*.txt\" -exec sed -i '' \"s/\\r$//g\" {} \\;\n        else\n            find ${CONFIG_DIR} -maxdepth 1 -type f -name \"*.txt\" -exec sed -i \"s/\\r$//g\" {} \\;\n        fi\n        # 设置权限\n        find ${CONFIG_DIR} -maxdepth 1 -type f -exec chmod 777 {} \\;\n        if [ -n \"${GLOBAL_PUID}\" ] && [ -n \"${GLOBAL_PGID}\" ]; then\n            find ${CONFIG_DIR} -maxdepth 1 -type f -exec chown \"${GLOBAL_PUID}\":\"${GLOBAL_PGID}\" {} \\;\n        fi\n    fi\n\n}\n\nfunction get_media_dir() {\n\n    local media_dir DEFAULT_MEDIA_DIR\n\n    if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n        XIAOYA_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n        if [ -s \"${XIAOYA_CONFIG_DIR}/emby_config.txt\" ]; then\n            # shellcheck disable=SC1091\n            source \"${XIAOYA_CONFIG_DIR}/emby_config.txt\"\n            # shellcheck disable=SC2154\n            echo \"${media_dir}\" > ${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt\n            INFO \"媒体库目录通过 emby_config.txt 获取\"\n        fi\n    fi\n\n    while true; do\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt ]; then\n            OLD_MEDIA_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt)\n            INFO \"已读取媒体库目录：${OLD_MEDIA_DIR} (默认不更改回车继续，如果需要更改请输入新路径)\"\n            read -erp \"MEDIA_DIR:\" MEDIA_DIR\n            [[ -z \"${MEDIA_DIR}\" ]] && MEDIA_DIR=${OLD_MEDIA_DIR}\n        else\n            DEFAULT_MEDIA_DIR=\"$(get_path \"xiaoya_alist_media_dir\")\"\n            INFO \"请输入媒体库目录（默认 ${DEFAULT_MEDIA_DIR} ）\"\n            read -erp \"MEDIA_DIR:\" MEDIA_DIR\n            [[ -z \"${MEDIA_DIR}\" ]] && MEDIA_DIR=\"${DEFAULT_MEDIA_DIR}\"\n            touch \"${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt\"\n        fi\n        if check_path \"${MEDIA_DIR}\"; then\n            echo \"${MEDIA_DIR}\" > \"${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt\"\n            INFO \"目录合法性检测通过！\"\n            break\n        else\n            ERROR \"非合法目录，请重新输入！\"\n        fi\n    done\n\n}\n\nfunction main_account_management() {\n\n    clear\n\n    local config_dir\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n        config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/data$\" | awk -F: '{print $1}')\"\n    fi\n    if [ -z \"${config_dir}\" ]; then\n        get_config_dir\n        config_dir=${CONFIG_DIR}\n    fi\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}账号管理${Font}\\n\"\n    echo -e \"${Sky_Blue}小雅留言，会员购买指南：\n基础版：阿里非会员+115会员+夸克88vip\n升级版：阿里svip+115会员+夸克88vip（用TV token破解阿里svip的高速流量限制）\n豪华版：阿里svip+第三方权益包+115会员+夸克svip\n乞丐版：满足看emby画报但不要播放，播放用tvbox各种免费源${Font}\\n\"\n    echo -ne \"${INFO} 界面加载中...${Font}\\r\"\n    echo -e \"1、115 Cookie                        （当前：$(if CHECK_OUT=$(check_115_cookie \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}错误${Font}\"; fi)）\n2、夸克 Cookie                       （当前：$(if CHECK_OUT=$(check_quark_cookie \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}错误${Font}\"; fi)）\n3、阿里云盘 Refresh Token（mytoken） （当前：$(if CHECK_OUT=$(check_aliyunpan_refreshtoken \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}错误${Font}\"; fi)）\n4、阿里云盘 Open Token（myopentoken）（当前：$(if [ -f \"${config_dir}/myopentoken.txt\" ]; then if [ -f \"${config_dir}/open_tv_token_url.txt\" ]; then if CHECK_OUT=$(check_aliyunpan_tvtoken \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}阿里云盘 TV Token 已失效${Font}\"; fi; elif CHECK_OUT=$(check_aliyunpan_opentoken \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}阿里云盘 Open Token 已失效${Font}\"; fi; else echo -e \"${Red}未配置${Font}\"; fi)）\n5、UC Cookie                         （当前：$(if CHECK_OUT=$(check_uc_cookie \"${config_dir}\"); then echo -e \"${Green}$(echo -e ${CHECK_OUT} | sed 's/\\[.*\\] //')${Font}\"; else echo -e \"${Red}错误${Font}\"; fi)）\n6、PikPak                            （当前：$(if [ -f \"${config_dir}/pikpak.txt\" ]; then echo -e \"${Green}已配置${Font}\"; else echo -e \"${Red}未配置${Font}\"; fi)）\n7、阿里转存115播放（ali2115.txt）    （当前：$(if [ -f \"${config_dir}/ali2115.txt\" ]; then echo -e \"${Green}已配置${Font}\"; else echo -e \"${Red}未配置${Font}\"; fi)）\"\n    echo -e \"8、应用配置（自动重启小雅，并返回上级菜单）\"\n    echo -e \"0、返回上级（从此处退出不会重启小雅，如果更改了上述配置请手动重启）\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-8]:\" num\n    case \"$num\" in\n    1)\n        clear\n        settings_115_cookie \"${config_dir}\" force\n        main_account_management\n        ;;\n    2)\n        clear\n        settings_quark_cookie \"${config_dir}\" force\n        main_account_management\n        ;;\n    3)\n        clear\n        settings_aliyunpan_refreshtoken \"${config_dir}\" force\n        main_account_management\n        ;;\n    4)\n        clear\n        settings_aliyunpan_opentoken \"${config_dir}\" force\n        main_account_management\n        ;;\n    5)\n        clear\n        settings_uc_cookie \"${config_dir}\" force\n        main_account_management\n        ;;\n    6)\n        clear\n        settings_pikpak_account \"${config_dir}\" force\n        main_account_management\n        ;;\n    7)\n        clear\n        settings_ali2115 \"${config_dir}\" force\n        main_account_management\n        ;;\n    8)\n        clear\n        if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n            INFO \"重启小雅容器中...\"\n            docker restart \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n            wait_xiaoya_start\n        else\n            WARN \"您未安装小雅，请先安装小雅容器！\"\n        fi\n        if docker container inspect xiaoya-115cleaner > /dev/null 2>&1; then\n            docker restart xiaoya-115cleaner\n        fi\n        INFO \"配置保存完成，按任意键返回菜单！\"\n        read -rs -n 1 -p \"\"\n        clear\n        main_xiaoya_alist\n        ;;\n    0)\n        clear\n        main_xiaoya_alist\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-8]'\n        main_account_management\n        ;;\n    esac\n\n}\n\nfunction install_xiaoya_alist() {\n\n    if [ ! -d \"${CONFIG_DIR}\" ]; then\n        mkdir -p \"${CONFIG_DIR}\"\n        auto_chown \"${CONFIG_DIR}\"\n    else\n        if [ -d \"${CONFIG_DIR}\"/mytoken.txt ]; then\n            rm -rf \"${CONFIG_DIR}\"/mytoken.txt\n        fi\n    fi\n\n    if [ ! -d \"${CONFIG_DIR}/data\" ]; then\n        mkdir -p \"${CONFIG_DIR}/data\"\n        auto_chown \"${CONFIG_DIR}/data\"\n    fi\n\n    files=(\"mytoken.txt\" \"myopentoken.txt\" \"temp_transfer_folder_id.txt\")\n    for file in \"${files[@]}\"; do\n        if [ ! -f \"${CONFIG_DIR}/${file}\" ]; then\n            touch_chmod \"${CONFIG_DIR}/${file}\"\n        fi\n    done\n\n    settings_aliyunpan_refreshtoken \"${CONFIG_DIR}\"\n\n    if [ -f \"${CONFIG_DIR}/open_tv_token_url.txt\" ]; then\n        check_aliyunpan_tvtoken \"${CONFIG_DIR}\"\n    else\n        settings_aliyunpan_opentoken \"${CONFIG_DIR}\"\n    fi\n\n    settings_aliyunpan_folder_id \"${CONFIG_DIR}\"\n\n    settings_pikpak_account \"${CONFIG_DIR}\"\n\n    if [ -f \"${CONFIG_DIR}/pikpak.txt\" ] && [ ! -f \"${CONFIG_DIR}/pikpakshare_list.txt\" ] && command -v base64 > /dev/null 2>&1; then\n        while true; do\n            INFO \"是否使用小雅官方分享的 pikpakshare_list.txt 文件 [Y/n]（默认 y）\"\n            read -erp \"pikpakshare_list_choose:\" pikpakshare_list_choose\n            [[ -z \"${pikpakshare_list_choose}\" ]] && pikpakshare_list_choose=\"y\"\n            if [[ ${pikpakshare_list_choose} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${pikpakshare_list_choose} == [Yy] ]]; then\n            echo \"${pikpakshare_list_base64}\" | base64 --decode > \"${CONFIG_DIR}/pikpakshare_list.txt\"\n            auto_chown \"${CONFIG_DIR}/pikpakshare_list.txt\"\n        fi\n    fi\n\n    settings_quark_cookie \"${CONFIG_DIR}\"\n\n    if [ -f \"${CONFIG_DIR}/quark_cookie.txt\" ] && [ ! -f \"${CONFIG_DIR}/quarkshare_list.txt\" ] && command -v base64 > /dev/null 2>&1; then\n        while true; do\n            INFO \"是否使用小雅官方分享的 quarkshare_list.txt 文件 [Y/n]（默认 y）\"\n            read -erp \"quarkshare_list_choose:\" quarkshare_list_choose\n            [[ -z \"${quarkshare_list_choose}\" ]] && quarkshare_list_choose=\"y\"\n            if [[ ${quarkshare_list_choose} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${quarkshare_list_choose} == [Yy] ]]; then\n            echo \"${quarkshare_list_base64}\" | base64 --decode > \"${CONFIG_DIR}/quarkshare_list.txt\"\n            auto_chown \"${CONFIG_DIR}/quarkshare_list.txt\"\n        fi\n    fi\n\n    settings_uc_cookie \"${CONFIG_DIR}\"\n\n    settings_115_cookie \"${CONFIG_DIR}\"\n\n    if [ -f \"${CONFIG_DIR}/115_cookie.txt\" ] && [ ! -f \"${CONFIG_DIR}/115share_list.txt\" ] && command -v base64 > /dev/null 2>&1; then\n        while true; do\n            INFO \"是否使用小雅官方分享的 115share_list.txt 文件 [Y/n]（默认 y）\"\n            read -erp \"pan115share_list_choose:\" pan115share_list_choose\n            [[ -z \"${pan115share_list_choose}\" ]] && pan115share_list_choose=\"y\"\n            if [[ ${pan115share_list_choose} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${pan115share_list_choose} == [Yy] ]]; then\n            echo \"${pan115share_list_base64}\" | base64 --decode > \"${CONFIG_DIR}/115share_list.txt\"\n            auto_chown \"${CONFIG_DIR}/115share_list.txt\"\n        fi\n    fi\n\n    settings_ali2115 \"${CONFIG_DIR}\"\n\n    if [[ \"${OSNAME}\" = \"macos\" ]]; then\n        localip=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n    else\n        if command -v ifconfig > /dev/null 2>&1; then\n            localip=$(ifconfig -a | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1)\n        else\n            localip=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n        fi\n    fi\n    INFO \"本地IP：${localip}\"\n\n    ports=(5678 2345 2346 2347)\n    for port in \"${ports[@]}\"; do\n        if ! check_port \"${port}\"; then\n            check_ports_result=false\n        fi\n    done\n    if [ \"${check_ports_result}\" == false ]; then\n        exit 1\n    fi\n\n    if [ \"${SET_NET_MODE}\" == true ]; then\n        while true; do\n            INFO \"是否使用host网络模式 [Y/n]（默认 n 不使用）\"\n            read -erp \"NET_MODE:\" NET_MODE\n            [[ -z \"${NET_MODE}\" ]] && NET_MODE=\"n\"\n            if [[ ${NET_MODE} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n    fi\n    if [ ! -s \"${CONFIG_DIR}\"/docker_address.txt ]; then\n        echo \"http://$localip:5678\" > \"${CONFIG_DIR}\"/docker_address.txt\n        auto_chown \"${CONFIG_DIR}/docker_address.txt\"\n    fi\n    docker_command=(\"docker run\" \"-itd\" \"--privileged\")\n    if [[ ${NET_MODE} == [Yy] ]]; then\n        docker_image=\"xiaoyaliu/alist:hostmode\"\n        docker_command+=(\"--network=host\")\n    else\n        docker_image=\"xiaoyaliu/alist:latest\"\n        docker_command+=(\"-p 5678:80\" \"-p 2345:2345\" \"-p 2346:2346\" \"-p 2347:2347\")\n    fi\n    if [[ -f ${CONFIG_DIR}/proxy.txt ]] && [[ -s ${CONFIG_DIR}/proxy.txt ]]; then\n        proxy_url=$(head -n1 \"${CONFIG_DIR}\"/proxy.txt)\n        docker_command+=(\"--env HTTP_PROXY=$proxy_url\" \"--env HTTPS_PROXY=$proxy_url\" \"--env no_proxy=*.aliyundrive.com\")\n    fi\n    docker_command+=(\"-v ${CONFIG_DIR}:/data\" \"-v ${CONFIG_DIR}/data:/www/data\" \"--restart=always\" \"--name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" \"$docker_image\")\n    docker_pull \"$docker_image\"\n    if eval \"${docker_command[*]}\"; then\n        wait_xiaoya_start\n        INFO \"安装完成！\"\n        INFO \"服务已成功启动，您可以根据使用需求尝试访问以下的地址：\"\n        INFO \"alist: ${Sky_Blue}http://ip:5678${Font}\"\n        INFO \"webdav: ${Sky_Blue}http://ip:5678/dav${Font}, 默认用户密码: ${Sky_Blue}guest/guest_Api789${Font}\"\n        INFO \"tvbox: ${Sky_Blue}http://ip:5678/tvbox/my_ext.json${Font}\"\n    else\n        ERROR \"安装失败！\"\n    fi\n\n}\n\nfunction update_xiaoya_alist() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新小雅Alist${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    cat > \"/tmp/container_update_xiaoya_alist_run.sh\" <<- EOF\n#!/bin/bash\nif ! grep -q '2347' \"/tmp/container_update_$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"; then\n    sed -i '2s/^/-p 2347:2347 /' \"/tmp/container_update_$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\nfi\nif ! grep -q 'privileged' \"/tmp/container_update_$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"; then\n    sed -i '2s/^/--privileged /' \"/tmp/container_update_$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\nfi\nEOF\n    container_update_extra_command=\"bash /tmp/container_update_xiaoya_alist_run.sh\"\n    container_update \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    rm -f /tmp/container_update_xiaoya_alist_run.sh\n\n}\n\nfunction uninstall_xiaoya_alist() {\n\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载小雅Alist${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    IMAGE_NAME=\"$(docker inspect --format='{{.Config.Image}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\")\"\n    VOLUMES=\"$(docker inspect -f '{{range .Mounts}}{{if eq .Type \"volume\"}}{{println .}}{{end}}{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | cut -d' ' -f2 | awk 'NF' | tr '\\n' ' ')\"\n    docker stop \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    docker rm \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    docker rmi \"${IMAGE_NAME}\"\n    docker volume rm ${VOLUMES}\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            for file in \"${OLD_CONFIG_DIR}/mycheckintoken.txt\" \"${OLD_CONFIG_DIR}/mycmd.txt\" \"${OLD_CONFIG_DIR}/myruntime.txt\"; do\n                if [ -f \"$file\" ]; then\n                    mv -f \"$file\" \"/tmp/$(basename \"$file\")\"\n                fi\n            done\n            rm -rf \\\n                ${OLD_CONFIG_DIR}/*.txt* \\\n                ${OLD_CONFIG_DIR}/*.m3u* \\\n                ${OLD_CONFIG_DIR}/*.m3u8*\n            if [ -d \"${OLD_CONFIG_DIR}/xiaoya_backup\" ]; then\n                rm -rf ${OLD_CONFIG_DIR}/xiaoya_backup\n            fi\n            for file in /tmp/mycheckintoken.txt /tmp/mycmd.txt /tmp/myruntime.txt; do\n                if [ -f \"$file\" ]; then\n                    mv -f \"$file\" \"${OLD_CONFIG_DIR}/$(basename \"$file\")\"\n                fi\n            done\n        fi\n    fi\n    INFO \"小雅Alist卸载成功！\"\n}\n\nfunction judgment_xiaoya_alist_sync_data_status() {\n\n    if command -v crontab > /dev/null 2>&1; then\n        if crontab -l | grep 'xiaoya_data_downloader' > /dev/null 2>&1; then\n            echo -e \"${Green}已创建${Font}\"\n        else\n            echo -e \"${Red}未创建${Font}\"\n        fi\n    elif [ -f /etc/synoinfo.conf ]; then\n        if grep 'xiaoya_data_downloader' /etc/crontab > /dev/null 2>&1; then\n            echo -e \"${Green}已创建${Font}\"\n        else\n            echo -e \"${Red}未创建${Font}\"\n        fi\n    else\n        echo -e \"${Red}未知${Font}\"\n    fi\n\n}\n\nfunction uninstall_xiaoya_alist_sync_data() {\n\n    if command -v crontab > /dev/null 2>&1; then\n        crontab -l > /tmp/cronjob.tmp\n        sedsh '/xiaoya_data_downloader/d' /tmp/cronjob.tmp\n        crontab /tmp/cronjob.tmp\n        rm -f /tmp/cronjob.tmp\n    elif [ -f /etc/synoinfo.conf ]; then\n        sedsh '/xiaoya_data_downloader/d' /etc/crontab\n    fi\n\n}\n\nfunction main_xiaoya_alist() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}小雅Alist${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"4、创建/删除 定时同步更新数据（${Red}功能已弃用，只提供删除${Font}）  当前状态：$(judgment_xiaoya_alist_sync_data_status)\"\n    echo -e \"5、账号管理\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-5]:\" num\n    case \"$num\" in\n    1)\n        clear\n        get_config_dir\n        SET_NET_MODE=true\n        install_xiaoya_alist\n        return_menu \"main_xiaoya_alist\"\n        ;;\n    2)\n        clear\n        update_xiaoya_alist\n        return_menu \"main_xiaoya_alist\"\n        ;;\n    3)\n        clear\n        uninstall_xiaoya_alist\n        return_menu \"main_xiaoya_alist\"\n        ;;\n    4)\n        clear\n        if command -v crontab > /dev/null 2>&1; then\n            if crontab -l | grep xiaoya_data_downloader > /dev/null 2>&1; then\n                for i in $(seq -w 3 -1 0); do\n                    echo -en \"即将删除同步定时任务${Blue} $i ${Font}\\r\"\n                    sleep 1\n                done\n                uninstall_xiaoya_alist_sync_data\n                clear\n                INFO \"已删除\"\n            else\n                INFO \"功能已弃用，目前只提供删除！\"\n            fi\n        elif [ -f /etc/synoinfo.conf ]; then\n            if grep 'xiaoya_data_downloader' /etc/crontab > /dev/null 2>&1; then\n                for i in $(seq -w 3 -1 0); do\n                    echo -en \"即将删除同步定时任务${Blue} $i ${Font}\\r\"\n                    sleep 1\n                done\n                uninstall_xiaoya_alist_sync_data\n                clear\n                INFO \"已删除\"\n            else\n                INFO \"功能已弃用，目前只提供删除！\"\n            fi\n        else\n            INFO \"功能已弃用，目前只提供删除！\"\n        fi\n        return_menu \"main_xiaoya_alist\"\n        ;;\n    5)\n        clear\n        main_account_management\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-5]'\n        main_xiaoya_alist\n        ;;\n    esac\n\n}\n\nfunction get_docker0_url() {\n\n    if command -v ifconfig > /dev/null 2>&1; then\n        docker0=$(ifconfig docker0 | awk '/inet / {print $2}' | sed 's/addr://')\n    else\n        docker0=$(ip addr show docker0 | awk '/inet / {print $2}' | cut -d '/' -f 1)\n    fi\n\n    if [ -n \"$docker0\" ]; then\n        INFO \"docker0 的 IP 地址是：$docker0\"\n    else\n        WARN \"无法获取 docker0 的 IP 地址！\"\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            docker0=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n        else\n            docker0=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n        fi\n        INFO \"尝试使用本地IP：${docker0}\"\n    fi\n\n}\n\nfunction test_xiaoya_status() {\n\n    get_docker0_url\n\n    INFO \"测试xiaoya的联通性...\"\n    if curl -siL -m 10 http://127.0.0.1:5678/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\"; then\n        xiaoya_addr=\"http://127.0.0.1:5678\"\n    elif curl -siL -m 10 http://${docker0}:5678/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\"; then\n        xiaoya_addr=\"http://${docker0}:5678\"\n    else\n        if [ -s ${CONFIG_DIR}/docker_address.txt ]; then\n            docker_address=$(head -n1 ${CONFIG_DIR}/docker_address.txt)\n            if curl -siL -m 10 ${docker_address}/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\"; then\n                xiaoya_addr=${docker_address}\n            else\n                __xiaoya_connectivity_detection=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt)\n                if [ \"${__xiaoya_connectivity_detection}\" == \"false\" ]; then\n                    xiaoya_addr=${docker_address}\n                    WARN \"您已设置跳过小雅连通性检测\"\n                else\n                    ERROR \"请检查xiaoya是否正常运行后再试\"\n                    ERROR \"小雅日志如下：\"\n                    docker logs --tail 8 \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n                    exit 1\n                fi\n            fi\n        else\n            ERROR \"请先配置 ${CONFIG_DIR}/docker_address.txt 后重试\"\n            exit 1\n        fi\n    fi\n\n    INFO \"连接小雅地址为 ${xiaoya_addr}\"\n\n}\n\nfunction test_disk_capacity() {\n\n    if [ ! -d \"${MEDIA_DIR}\" ]; then\n        mkdir -p \"${MEDIA_DIR}\"\n        auto_chown \"${MEDIA_DIR}\"\n    fi\n\n    free_size=$(df -P \"${MEDIA_DIR}\" | tail -n1 | awk '{print $4}')\n    free_size=$((free_size))\n    free_size_G=$((free_size / 1024 / 1024))\n\n    __disk_capacity_detection=$(cat ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt)\n    if [ \"${__disk_capacity_detection}\" == \"false\" ]; then\n        WARN \"您已设置跳过磁盘容量检测\"\n        INFO \"磁盘容量：${free_size_G}G\"\n    else\n        if [ \"$free_size\" -le 230686720 ]; then\n            ERROR \"空间剩余容量不够：${free_size_G}G 小于最低要求 220G\"\n            exit 1\n        else\n            INFO \"磁盘容量：${free_size_G}G\"\n        fi\n    fi\n\n}\n\nfunction show_disk_capacity() {\n\n    free_size=$(df -P \"${1}\" | tail -n1 | awk '{print $4}')\n    free_size=$((free_size))\n    free_size_G=$((free_size / 1024 / 1024))\n    INFO \"磁盘容量：${free_size_G}G\"\n\n}\n\nfunction pull_run_glue() {\n\n    if docker inspect xiaoyaliu/glue:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/glue:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/xiaoyaliu/glue/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ \"$local_sha\" != \"$remote_sha\" ]; then\n            docker rmi xiaoyaliu/glue:latest\n            docker_pull \"xiaoyaliu/glue:latest\"\n        fi\n    else\n        docker_pull \"xiaoyaliu/glue:latest\"\n    fi\n\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -it \\\n            --security-opt seccomp=unconfined \\\n            --rm \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            ${extra_parameters} \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            -e TZ=Asia/Shanghai \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\"\n    else\n        # shellcheck disable=SC2046\n        docker run -it \\\n            --security-opt seccomp=unconfined \\\n            --rm \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            -e TZ=Asia/Shanghai \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\"\n    fi\n\n}\n\nfunction pull_run_glue_xh() {\n\n    BUILDER_NAME=\"xiaoya_builder_$(date +%S%N | cut -c 7-11)\"\n\n    if docker inspect xiaoyaliu/glue:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/glue:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/xiaoyaliu/glue/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ \"$local_sha\" != \"$remote_sha\" ]; then\n            docker rmi xiaoyaliu/glue:latest\n            docker_pull \"xiaoyaliu/glue:latest\"\n        fi\n    else\n        docker_pull \"xiaoyaliu/glue:latest\"\n    fi\n\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --security-opt seccomp=unconfined \\\n            --name=${BUILDER_NAME} \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            $(auto_privileged) \\\n            ${extra_parameters} \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\" > /dev/null 2>&1\n    else\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --security-opt seccomp=unconfined \\\n            --name=${BUILDER_NAME} \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\" > /dev/null 2>&1\n    fi\n\n    timeout=20\n    start_time=$(date +%s)\n    end_time=$((start_time + timeout))\n    while [ \"$(date +%s)\" -lt $end_time ]; do\n        status=$(docker inspect -f '{{.State.Status}}' \"${BUILDER_NAME}\")\n        if [ \"$status\" = \"exited\" ]; then\n            break\n        fi\n        sleep 1\n    done\n\n    status=$(docker inspect -f '{{.State.Status}}' \"${BUILDER_NAME}\")\n    if [ \"$status\" != \"exited\" ]; then\n        docker kill ${BUILDER_NAME} > /dev/null 2>&1\n    fi\n    docker rm ${BUILDER_NAME} > /dev/null 2>&1\n\n}\n\nfunction get_emby_version() {\n\n    local emby_name emby_image_name emby_config_dir CURRENT_ULIMIT\n    emby_name=$(cat \"${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt\")\n    if ! docker container inspect \"${emby_name}\" > /dev/null 2>&1; then\n        WARN \"未检测到 Emby 容器，请确保您已安装 Emby！\"\n        return 1\n    fi\n    emby_image_name=\"$(docker container inspect -f '{{.Config.Image}}' \"${emby_name}\")\"\n    if [ -z \"${emby_image_name}\" ]; then\n        WARN \"获取 Emby 镜像标签失败\"\n        return 1\n    fi\n    emby_config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"${emby_name}\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/config$\" | awk -F: '{print $1}')\"\n    if [ -z \"${emby_config_dir}\" ] || ! check_path \"${emby_config_dir}\"; then\n        WARN \"Emby 配置目录获取失败，使用 /tmp 目录替代！\"\n        emby_config_dir=/tmp\n    fi\n    if [ -f \"${emby_config_dir}/EmbyServer.deps.json\" ]; then\n        rm -f \"${emby_config_dir}/EmbyServer.deps.json\"\n    fi\n    CURRENT_ULIMIT=$(ulimit -n)\n    ulimit -n 65535\n    docker run --rm --ulimit nofile=65535:65535 --entrypoint cp -v \"${emby_config_dir}:/data\" \"${emby_image_name}\" /system/EmbyServer.deps.json /data\n    ulimit -n \"${CURRENT_ULIMIT}\"\n    if [ ! -f \"${emby_config_dir}/EmbyServer.deps.json\" ]; then\n        WARN \"Emby 版本数据文件复制失败！\"\n        return 1\n    fi\n    emby_version=$(grep \"EmbyServer\" \"${emby_config_dir}/EmbyServer.deps.json\" | head -n 1 | sed -n 's|.*EmbyServer/\\(.*\\)\":.*|\\1|p')\n    rm -f \"${emby_config_dir}/EmbyServer.deps.json\"\n    if [ -z \"${emby_version}\" ]; then\n        WARN \"当前 Emby 版本获取失败！\"\n        return 1\n    fi\n    return 0\n\n}\n\nfunction set_emby_server_infuse_api_key() {\n\n    get_docker0_url\n\n    echo \"http://$docker0:6908\" > \"${CONFIG_DIR}\"/emby_server.txt\n    auto_chown \"${CONFIG_DIR}/emby_server.txt\"\n\n    if [ ! -f \"${CONFIG_DIR}\"/infuse_api_key.txt ]; then\n        echo \"e825ed6f7f8f44ffa0563cddaddce14d\" > \"${CONFIG_DIR}\"/infuse_api_key.txt\n        auto_chown \"${CONFIG_DIR}/infuse_api_key.txt\"\n    fi\n\n}\n\nfunction check_metadata_size() {\n\n    local file_size file_size_b remote_metadata_size _ua check_result\n\n    if [ -z \"${xiaoya_addr}\" ]; then\n        test_xiaoya_status\n    fi\n    _ua=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n    pull_run_glue_xh xh --headers --follow --timeout=10 -o /media/headers.log \"${xiaoya_addr}/d/元数据/${1}\" \"User-Agent: ${_ua}\"\n    remote_metadata_size=$(grep 'Content-Length' \"${MEDIA_DIR}/headers.log\" | awk '{print $2}')\n    rm -f ${MEDIA_DIR}/headers.log\n\n    file_size=$(du -k \"${MEDIA_DIR}/temp/${1}\" | cut -f1)\n\n    if [ -n \"${remote_metadata_size}\" ] &&\n        awk -v remote=\"${remote_metadata_size}\" -v threshold=\"2147483648\" 'BEGIN { if (remote > threshold) print \"1\"; else print \"0\"; }' | grep -q \"1\"; then\n        INFO \"精准校验文件大小模式\"\n\n        file_size_b=$(du -b \"${MEDIA_DIR}/temp/${1}\" | awk '{print $1}')\n\n        INFO \"${1} REMOTE_METADATA_SIZE: ${remote_metadata_size}\"\n        INFO \"${1} LOCAL_METADATA_SIZE: ${file_size_b}\"\n\n        if [ \"${remote_metadata_size}\" != \"${file_size_b}\" ]; then\n            check_result=false\n        fi\n    else\n        case \"${1}\" in\n        config.mp4)\n            if [[ \"$file_size\" -le 3200000 ]]; then\n                check_result=false\n            fi\n            ;;\n        all.mp4)\n            if [[ \"$file_size\" -le 30000000 ]]; then\n                check_result=false\n            fi\n            ;;\n        pikpak.mp4)\n            if [[ \"$file_size\" -le 14000000 ]]; then\n                check_result=false\n            fi\n            ;;\n        115.mp4)\n            if [[ \"$file_size\" -le 16000000 ]]; then\n                check_result=false\n            fi\n            ;;\n        config.new.mp4)\n            if [[ \"$file_size\" -le 3200000 ]]; then\n                check_result=false\n            fi\n            ;;\n        esac\n    fi\n\n    if [ \"${check_result}\" == false ]; then\n        ERROR \"${1} 下载不完整，文件大小(in KB):$file_size 小于预期\"\n        return 1\n    fi\n    INFO \"${1} 文件大小验证正常，文件大小(in KB):$file_size\"\n    return 0\n\n}\n\nfunction __unzip_metadata() {\n\n    function metadata_unziper() {\n\n        if ! check_metadata_size \"${1}\"; then\n            exit 1\n        fi\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            INFO \"使用宿主机 7z 命令解压\"\n            if [ \"${1}\" == \"config.mp4\" ] || [ \"${1}\" == \"config.new.mp4\" ]; then\n                if [ ! -d \"${MEDIA_DIR}\" ]; then\n                    mkdir -p \"${MEDIA_DIR}\"\n                    auto_chown \"${MEDIA_DIR}\"\n                    chmod 777 \"${MEDIA_DIR}\"\n                fi\n                cd \"${MEDIA_DIR}\" || return 1\n            else\n                if [ ! -d \"${MEDIA_DIR}/xiaoya\" ]; then\n                    mkdir -p \"${MEDIA_DIR}/xiaoya\"\n                    auto_chown \"${MEDIA_DIR}/xiaoya\"\n                    chmod 777 \"${MEDIA_DIR}/xiaoya\"\n                fi\n                cd \"${MEDIA_DIR}/xiaoya\" || return 1\n            fi\n            INFO \"当前解压工作目录：$(pwd)\"\n            if ! 7z x -aoa -mmt=16 \"${MEDIA_DIR}/temp/${1}\"; then\n                ERROR \"解压元数据失败！\"\n                exit 1\n            fi\n        else\n            if [ \"${1}\" == \"config.mp4\" ] || [ \"${1}\" == \"config.new.mp4\" ]; then\n                extra_parameters=\"--workdir=/media\"\n            else\n                extra_parameters=\"--workdir=/media/xiaoya\"\n            fi\n            if ! pull_run_glue 7z x -aoa -mmt=16 \"/media/temp/${1}\"; then\n                ERROR \"解压元数据失败！\"\n                exit 1\n            fi\n        fi\n\n    }\n\n    start_time1=$(date +%s)\n\n    if [ \"${1}\" == \"all_metadata\" ]; then\n        local files=(\"all.mp4\" \"config.mp4\" \"115.mp4\" \"pikpak.mp4\")\n        for file in \"${files[@]}\"; do\n            metadata_unziper \"${file}\"\n        done\n        INFO \"设置目录权限...\"\n        INFO \"这可能需要一定时间，请耐心等待！\"\n        chmod -R 777 \"${MEDIA_DIR}\"\n    elif [ \"${1}\" == \"config.mp4\" ] || [ \"${1}\" == \"config.new.mp4\" ]; then\n        metadata_unziper \"${1}\"\n        INFO \"设置目录权限...\"\n        INFO \"这可能需要一定时间，请耐心等待！\"\n        chmod -R 777 \"${MEDIA_DIR}\"/config\n    else\n        metadata_unziper \"${1}\"\n        INFO \"设置目录权限...\"\n        chmod 777 \"${MEDIA_DIR}\"/xiaoya\n    fi\n\n    end_time1=$(date +%s)\n    total_time1=$((end_time1 - start_time1))\n    total_time1=$((total_time1 / 60))\n    INFO \"解压执行时间：$total_time1 分钟\"\n\n}\n\nfunction __download_metadata() {\n\n    function metadata_downloader() {\n\n        local __data_downloader _ua\n\n        INFO \"开始下载 ${1} ...\"\n        INFO \"下载路径：${MEDIA_DIR}/temp/${1}\"\n\n        __data_downloader=$(cat \"${DDSREM_CONFIG_DIR}/data_downloader.txt\")\n\n        INFO \"使用下载器：${__data_downloader}\"\n\n        extra_parameters=\"--workdir=/media/temp\"\n\n        _ua=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n        if [ \"${__data_downloader}\" == \"wget\" ]; then\n            if ! pull_run_glue wget -c --show-progress \"${xiaoya_addr}/d/元数据/${1}\" -U \"${_ua}\"; then\n                ERROR \"${1} 下载失败！\"\n                exit 1\n            fi\n        else\n            if pull_run_glue aria2c -o \"${1}\" --header=\"User-Agent: ${_ua}\" --allow-overwrite=true --auto-file-renaming=false --enable-color=false -c -x6 \"${xiaoya_addr}/d/元数据/${1}\"; then\n                if [ -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n                    ERROR \"存在 ${MEDIA_DIR}/temp/${1}.aria2 文件，下载不完整！\"\n                    exit 1\n                else\n                    INFO \"${1} 下载成功！\"\n                fi\n            else\n                ERROR \"${1} 下载失败！\"\n                exit 1\n            fi\n        fi\n\n    }\n\n    if [ \"${1}\" == \"all_metadata\" ]; then\n        local files=(\"all.mp4\" \"config.mp4\" \"115.mp4\" \"pikpak.mp4\")\n        for file in \"${files[@]}\"; do\n            metadata_downloader \"${file}\"\n        done\n\n        INFO \"设置目录权限...\"\n        chmod -R 777 \"${MEDIA_DIR}\"/temp\n        auto_chown \"${MEDIA_DIR}/temp\" \"-R\"\n    else\n        metadata_downloader \"${1}\"\n\n        INFO \"设置目录权限...\"\n        chmod 777 \"${MEDIA_DIR}\"/temp/\"${1}\"\n        auto_chown \"${MEDIA_DIR}/temp/${1}\"\n    fi\n\n}\n\nfunction unzip_xiaoya_all_emby() {\n\n    get_config_dir\n\n    get_media_dir\n\n    test_xiaoya_status\n\n    mkdir -p \"${MEDIA_DIR}\"/temp\n    rm -rf \"${MEDIA_DIR}\"/config\n\n    test_disk_capacity\n\n    mkdir -p \"${MEDIA_DIR}\"/xiaoya\n    mkdir -p \"${MEDIA_DIR}\"/config\n    chmod 755 \"${MEDIA_DIR}\"\n    auto_chown \"${MEDIA_DIR}\"\n    auto_chown \"${MEDIA_DIR}/xiaoya\"\n    auto_chown \"${MEDIA_DIR}/config\"\n    auto_chown \"${MEDIA_DIR}/temp\"\n\n    INFO \"开始解压...\"\n\n    __unzip_metadata \"all_metadata\"\n\n    set_emby_server_infuse_api_key\n\n    INFO \"解压完成！\"\n\n}\n\nfunction unzip_xiaoya_emby() {\n\n    get_config_dir\n\n    get_media_dir\n\n    show_disk_capacity \"${MEDIA_DIR}\"\n\n    chmod 777 \"${MEDIA_DIR}\"\n    auto_chown \"${MEDIA_DIR}\"\n\n    INFO \"开始解压 ${MEDIA_DIR}/temp/${1} ...\"\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n        ERROR \"存在 ${MEDIA_DIR}/temp/${1}.aria2 文件，文件不完整！\"\n        exit 1\n    fi\n\n    if [ \"${1}\" == \"config.mp4\" ]; then\n        if [ -d \"${MEDIA_DIR}/config\" ]; then\n            INFO \"清理旧配置文件中...\"\n            INFO \"这可能需要一定时间，请耐心等待！\"\n            rm -rf ${MEDIA_DIR}/config\n        fi\n        mkdir -p \"${MEDIA_DIR}\"/config\n        auto_chown \"${MEDIA_DIR}/config\"\n        chmod -R 777 \"${MEDIA_DIR}\"/config\n        __unzip_metadata \"${1}\"\n    else\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya\n        auto_chown \"${MEDIA_DIR}/xiaoya\"\n        __unzip_metadata \"${1}\"\n    fi\n\n    INFO \"解压完成！\"\n\n}\n\nfunction unzip_appoint_xiaoya_emby_jellyfin() {\n\n    function metadata_unziper() {\n\n        if ! check_metadata_size \"${1}\"; then\n            exit 1\n        fi\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            INFO \"使用宿主机 7z 命令解压\"\n            if [ ! -d \"${MEDIA_DIR}/xiaoya\" ]; then\n                mkdir -p \"${MEDIA_DIR}/xiaoya\"\n                auto_chown \"${MEDIA_DIR}/xiaoya\"\n                chmod 777 \"${MEDIA_DIR}/xiaoya\"\n            fi\n            cd \"${MEDIA_DIR}/xiaoya\" || return 1\n            INFO \"当前解压工作目录：$(pwd)\"\n            if ! 7z x -aoa -mmt=16 \"${MEDIA_DIR}/temp/${1}\" \"${2}/*\" -o\"${MEDIA_DIR}/xiaoya\"; then\n                ERROR \"解压元数据失败！\"\n                exit 1\n            fi\n        else\n            extra_parameters=\"--workdir=/media/xiaoya\"\n            if ! pull_run_glue 7z x -aoa -mmt=16 \"/media/temp/${1}\" \"${2}/*\" -o/media/xiaoya; then\n                ERROR \"解压元数据失败！\"\n                exit 1\n            fi\n        fi\n\n    }\n\n    get_config_dir\n\n    get_media_dir\n\n    if [ \"${1}\" == \"all.mp4\" ] || [ \"${1}\" == \"all_jf.mp4\" ]; then\n        INFO \"请选择要解压的压缩包目录 [ 1:动漫 | 2:每日更新 | 3:电影 | 4:电视剧 | 5:纪录片 | 6:纪录片（已刮削）| 7:综艺 ]\"\n        valid_choice=false\n        while [ \"$valid_choice\" = false ]; do\n            read -erp \"请输入数字 [1-7]:\" choice\n            for i in {1..7}; do\n                if [ \"$choice\" = \"$i\" ]; then\n                    valid_choice=true\n                    break\n                fi\n            done\n            if [ \"$valid_choice\" = false ]; then\n                ERROR \"请输入正确数字 [1-7]\"\n            fi\n        done\n        case $choice in\n        1)\n            UNZIP_FOLD=动漫\n            ;;\n        2)\n            UNZIP_FOLD=每日更新\n            ;;\n        3)\n            UNZIP_FOLD=电影\n            ;;\n        4)\n            UNZIP_FOLD=电视剧\n            ;;\n        5)\n            UNZIP_FOLD=纪录片\n            ;;\n        6)\n            UNZIP_FOLD=纪录片（已刮削）\n            ;;\n        7)\n            UNZIP_FOLD=综艺\n            ;;\n        esac\n    elif [ \"${1}\" == \"115.mp4\" ]; then\n        INFO \"请选择要解压的压缩包目录 [ 1:电视剧 | 2:电影 | 3:动漫 ]\"\n        valid_choice=false\n        while [ \"$valid_choice\" = false ]; do\n            read -erp \"请输入数字 [1-3]:\" choice\n            for i in {1..3}; do\n                if [ \"$choice\" = \"$i\" ]; then\n                    valid_choice=true\n                    break\n                fi\n            done\n            if [ \"$valid_choice\" = false ]; then\n                ERROR \"请输入正确数字 [1-3]\"\n            fi\n        done\n        case $choice in\n        1)\n            UNZIP_FOLD=电视剧\n            ;;\n        2)\n            UNZIP_FOLD=电影\n            ;;\n        3)\n            UNZIP_FOLD=动漫\n            ;;\n        esac\n    else\n        ERROR \"此文件暂时不支持解压指定元数据！\"\n    fi\n\n    show_disk_capacity \"${MEDIA_DIR}\"\n\n    chmod 777 \"${MEDIA_DIR}\"\n    auto_chown \"${MEDIA_DIR}\"\n\n    INFO \"开始解压 ${MEDIA_DIR}/temp/${1} ${UNZIP_FOLD} ...\"\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n        ERROR \"存在 ${MEDIA_DIR}/temp/${1}.aria2 文件，文件不完整！\"\n        exit 1\n    fi\n\n    start_time1=$(date +%s)\n\n    if [ \"${1}\" == \"all.mp4\" ] || [ \"${1}\" == \"all_jf.mp4\" ]; then\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya\n        auto_chown \"${MEDIA_DIR}/xiaoya\"\n        metadata_unziper \"${1}\" \"${UNZIP_FOLD}\"\n    elif [ \"${1}\" == \"115.mp4\" ]; then\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya/115\n        auto_chown \"${MEDIA_DIR}/xiaoya/115\"\n        metadata_unziper \"${1}\" \"115/${UNZIP_FOLD}\"\n    else\n        ERROR \"此文件暂时不支持解压指定元数据！\"\n        exit 1\n    fi\n\n    INFO \"设置目录权限...\"\n    chmod 777 \"${MEDIA_DIR}\"/xiaoya\n\n    end_time1=$(date +%s)\n    total_time1=$((end_time1 - start_time1))\n    total_time1=$((total_time1 / 60))\n    INFO \"解压执行时间：$total_time1 分钟\"\n\n    INFO \"解压完成！\"\n\n}\n\nfunction download_xiaoya_emby() {\n\n    get_config_dir\n\n    get_media_dir\n\n    test_xiaoya_status\n\n    mkdir -p \"${MEDIA_DIR}\"/temp\n    auto_chown \"${MEDIA_DIR}/temp\"\n    chmod 777 \"${MEDIA_DIR}\"/temp\n\n    show_disk_capacity \"${MEDIA_DIR}\"\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}\" ]; then\n        INFO \"清理旧 ${1} 中...\"\n        rm -f \"${MEDIA_DIR}/temp/${1}\"\n        if [ -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n            rm -rf \"${MEDIA_DIR}/temp/${1}.aria2\"\n        fi\n    fi\n\n    __download_metadata \"${1}\"\n\n    INFO \"下载完成！\"\n\n}\n\nfunction download_unzip_xiaoya_all_emby() {\n\n    get_config_dir\n\n    get_media_dir\n\n    test_xiaoya_status\n\n    rm -rf \"${MEDIA_DIR}/config\"\n\n    test_disk_capacity\n\n    mkdir -p \"${MEDIA_DIR}/xiaoya\"\n    mkdir -p \"${MEDIA_DIR}/config\"\n    mkdir -p \"${MEDIA_DIR}/temp\"\n    auto_chown \"${MEDIA_DIR}\"\n    auto_chown \"${MEDIA_DIR}/xiaoya\"\n    auto_chown \"${MEDIA_DIR}/config\"\n    auto_chown \"${MEDIA_DIR}/temp\"\n    chmod 777 \"${MEDIA_DIR}\"\n\n    local files=(\"all.mp4\" \"config.mp4\" \"115.mp4\" \"pikpak.mp4\")\n    for file in \"${files[@]}\"; do\n        if [ -f \"${MEDIA_DIR}/temp/${file}.aria2\" ]; then\n            rm -rf \"${MEDIA_DIR}/temp/${file}.aria2\"\n        fi\n    done\n\n    INFO \"开始下载解压...\"\n\n    __download_metadata \"all_metadata\"\n\n    __unzip_metadata \"all_metadata\"\n\n    set_emby_server_infuse_api_key\n\n    INFO \"刮削数据已经下载解压完成！\"\n\n}\n\nfunction download_unzip_xiaoya_emby_new_config() {\n\n    function compare_metadata_size() {\n\n        local REMOTE_METADATA_SIZE LOCAL_METADATA_SIZE _ua\n\n        _ua=\"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n        pull_run_glue_xh xh --headers --follow --timeout=10 -o /media/headers.log \"${xiaoya_addr}/d/元数据/${1}\" \"User-Agent: ${_ua}\"\n        REMOTE_METADATA_SIZE=$(cat ${MEDIA_DIR}/headers.log | grep 'Content-Length' | awk '{print $2}')\n        rm -f ${MEDIA_DIR}/headers.log\n\n        if [ -f \"${MEDIA_DIR}/temp/${1}\" ] && [ ! -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n            LOCAL_METADATA_SIZE=$(du -b \"${MEDIA_DIR}/temp/${1}\" | awk '{print $1}')\n        else\n            LOCAL_METADATA_SIZE=0\n        fi\n\n        INFO \"${1} REMOTE_METADATA_SIZE: ${REMOTE_METADATA_SIZE}\"\n        INFO \"${1} LOCAL_METADATA_SIZE: ${LOCAL_METADATA_SIZE}\"\n\n        if\n            [ \"${REMOTE_METADATA_SIZE}\" != \"${LOCAL_METADATA_SIZE}\" ] &&\n                [ -n \"${REMOTE_METADATA_SIZE}\" ] &&\n                awk -v remote=\"${REMOTE_METADATA_SIZE}\" -v threshold=\"2147483648\" 'BEGIN { if (remote > threshold) print \"1\"; else print \"0\"; }' | grep -q \"1\"\n        then\n            return 1\n        else\n            return 0\n        fi\n\n    }\n\n    get_config_dir\n\n    get_media_dir\n\n    if [ -f \"${MEDIA_DIR}/config/config/system.xml\" ]; then\n        INFO \"检测到非第一次安装全家桶...\"\n        WARN \"警告：本次元数据升级会丢失当前 Emby 所有用户配置信息！\"\n        local OPERATE\n        while true; do\n            INFO \"是否继续操作 [Y/n]（默认 Y）\"\n            read -erp \"OPERATE:\" OPERATE\n            [[ -z \"${OPERATE}\" ]] && OPERATE=\"y\"\n            if [[ ${OPERATE} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ \"${OPERATE}\" == [Nn] ]]; then\n            exit 0\n        fi\n        if get_emby_version; then\n            INFO \"当前 Emby 版本：${emby_version}\"\n        else\n            ERROR \"当前 Emby 版本获取失败！\"\n            exit 1\n        fi\n        if version_lt \"${emby_version}\" \"4.9.0.31\"; then\n            INFO \"您的 Emby 版本过低，开始进入升级流程，请升级到 4.9.0.31 或更高版本！\"\n            oneclick_upgrade_emby\n        fi\n\n        INFO \"关闭 Emby 容器中...\"\n        if ! docker stop \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\"; then\n            if ! docker kill \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\"; then\n                ERROR \"关闭 Emby 容器失败！\"\n                exit 1\n            fi\n        fi\n    fi\n\n    test_xiaoya_status\n\n    INFO \"清理旧配置文件中...\"\n    INFO \"这可能需要一定时间，请耐心等待！\"\n    rm -rf \"${MEDIA_DIR}/config\"\n\n    mkdir -p \"${MEDIA_DIR}/config\"\n    auto_chown \"${MEDIA_DIR}/config\"\n    chmod -R 777 \"${MEDIA_DIR}/config\"\n\n    if [ -f \"${MEDIA_DIR}/temp/config.new.mp4.aria2\" ]; then\n        rm -rf \"${MEDIA_DIR}/temp/config.new.mp4.aria2\"\n        if [ -f \"${MEDIA_DIR}/temp/config.new.mp4\" ]; then\n            INFO \"清理不完整 config.new.mp4 中...\"\n            rm -rf \"${MEDIA_DIR}/temp/config.new.mp4\"\n        fi\n    fi\n    if [ -f \"${MEDIA_DIR}/temp/config.new.mp4\" ]; then\n        if compare_metadata_size \"config.new.mp4\"; then\n            INFO \"当前 config.new.mp4 已是最新，无需重新下载！\"\n        else\n            INFO \"清理旧 config.new.mp4 中...\"\n            rm -rf \"${MEDIA_DIR}/temp/config.new.mp4\"\n        fi\n    fi\n\n    show_disk_capacity \"${MEDIA_DIR}\"\n\n    INFO \"开始下载解压...\"\n\n    if [ ! -f \"${MEDIA_DIR}/temp/config.new.mp4\" ]; then\n        __download_metadata \"config.new.mp4\"\n    fi\n\n    __unzip_metadata \"config.new.mp4\"\n\n    docker start \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\"\n    sleep 5\n    wait_emby_start\n\n    INFO \"操作完成！\"\n\n}\n\nfunction main_download_unzip_xiaoya_emby() {\n\n    __data_downloader=$(cat ${DDSREM_CONFIG_DIR}/data_downloader.txt)\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}下载/解压 元数据${Font}\\n\"\n    echo -e \"1、下载并解压 全部元数据\"\n    echo -e \"2、解压 全部元数据\"\n    echo -e \"3、下载 all.mp4\"\n    echo -e \"4、解压 all.mp4\"\n    echo -e \"5、解压 all.mp4 的指定元数据目录【非全部解压】\"\n    echo -e \"6、下载 config.mp4（4.8.9.0）\"\n    echo -e \"7、解压 config.mp4（4.8.9.0）\"\n    echo -e \"8、下载 pikpak.mp4\"\n    echo -e \"9、解压 pikpak.mp4\"\n    echo -e \"10、下载 115.mp4\"\n    echo -e \"11、解压 115.mp4\"\n    echo -e \"12、解压 115.mp4 的指定元数据目录【非全部解压】\"\n    echo -e \"13、当前下载器【aria2/wget】                  当前状态：${Green}${__data_downloader}${Font}\"\n    echo -e \"101、下载并解压 config.new.mp4（4.9.0.31）\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字（支持输入多个数字，空格分离，按输入顺序执行）[0-13]:\" -a nums\n    for num in \"${nums[@]}\"; do\n        if [ $num -ge 1 ] && [ $num -le 12 ]; then\n            case \"$num\" in\n            1)\n                clear\n                download_unzip_xiaoya_all_emby\n                ;;\n            2)\n                clear\n                unzip_xiaoya_all_emby\n                ;;\n            3)\n                clear\n                download_xiaoya_emby \"all.mp4\"\n                ;;\n            4)\n                clear\n                unzip_xiaoya_emby \"all.mp4\"\n                ;;\n            5)\n                clear\n                unzip_appoint_xiaoya_emby_jellyfin \"all.mp4\"\n                ;;\n            6)\n                clear\n                download_xiaoya_emby \"config.mp4\"\n                ;;\n            7)\n                clear\n                unzip_xiaoya_emby \"config.mp4\"\n                ;;\n            8)\n                clear\n                download_xiaoya_emby \"pikpak.mp4\"\n                ;;\n            9)\n                clear\n                unzip_xiaoya_emby \"pikpak.mp4\"\n                ;;\n            10)\n                clear\n                download_xiaoya_emby \"115.mp4\"\n                ;;\n            11)\n                clear\n                unzip_xiaoya_emby \"115.mp4\"\n                ;;\n            12)\n                clear\n                unzip_appoint_xiaoya_emby_jellyfin \"115.mp4\"\n                ;;\n            esac\n            __next_operate=return_menu\n        elif [ $num == 101 ]; then\n            clear\n            download_unzip_xiaoya_emby_new_config\n            __next_operate=return_menu\n        elif [ $num == 13 ]; then\n            if [ \"${__data_downloader}\" == \"wget\" ]; then\n                echo 'aria2' > ${DDSREM_CONFIG_DIR}/data_downloader.txt\n            elif [ \"${__data_downloader}\" == \"aria2\" ]; then\n                echo 'wget' > ${DDSREM_CONFIG_DIR}/data_downloader.txt\n            else\n                echo 'aria2' > ${DDSREM_CONFIG_DIR}/data_downloader.txt\n            fi\n            clear\n            __next_operate=main_download_unzip_xiaoya_emby\n            break\n        elif [ $num == 0 ]; then\n            clear\n            __next_operate=main_xiaoya_all_emby\n            break\n        else\n            clear\n            ERROR '请输入正确数字 [0-13]'\n            __next_operate=main_download_unzip_xiaoya_emby\n            break\n        fi\n    done\n    if [ \"${__next_operate}\" == \"return_menu\" ]; then\n        return_menu \"main_download_unzip_xiaoya_emby\"\n    elif [ \"${__next_operate}\" == \"main_download_unzip_xiaoya_emby\" ]; then\n        main_download_unzip_xiaoya_emby\n    elif [ \"${__next_operate}\" == \"main_xiaoya_all_emby\" ]; then\n        main_xiaoya_all_emby\n    fi\n\n}\n\nfunction install_emby_embyserver() {\n\n    cpu_arch=$(uname -m)\n    INFO \"开始安装Emby容器.....\"\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"*)\n        image_name=\"emby/embyserver\"\n        ;;\n    \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        image_name=\"emby/embyserver_arm64v8\"\n        ;;\n    *)\n        ERROR \"目前只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        exit 1\n        ;;\n    esac\n    docker_pull \"${image_name}:${IMAGE_VERSION}\"\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            $(auto_privileged) \\\n            ${extra_parameters} \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            \"${image_name}:${IMAGE_VERSION}\"\n    else\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            $(auto_privileged) \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            \"${image_name}:${IMAGE_VERSION}\"\n    fi\n\n}\n\nfunction install_amilys_embyserver() {\n\n    cpu_arch=$(uname -m)\n    INFO \"开始安装Emby容器.....\"\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"*)\n        image_name=\"amilys/embyserver\"\n        ;;\n    \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        image_name=\"amilys/embyserver_arm64v8\"\n        ;;\n    *)\n        ERROR \"目前只支持amd64和arm64架构，你的架构是：$cpu_arch\"\n        exit 1\n        ;;\n    esac\n    docker_pull \"${image_name}:${IMAGE_VERSION}\"\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            ${extra_parameters} \\\n            $(auto_privileged) \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            \"${image_name}:${IMAGE_VERSION}\"\n    else\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            $(auto_privileged) \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            \"${image_name}:${IMAGE_VERSION}\"\n    fi\n\n}\n\nfunction install_lovechen_embyserver() {\n\n    INFO \"开始安装Emby容器.....\"\n\n    INFO \"开始转换数据库...\"\n\n    mv ${MEDIA_DIR}/config/data/library.db ${MEDIA_DIR}/config/data/library.org.db\n    if [ -f \"${MEDIA_DIR}/config/data/library.db-wal\" ]; then\n        rm -rf ${MEDIA_DIR}/config/data/library.db-wal\n    fi\n    if [ -f \"${MEDIA_DIR}/config/data/library.db-shm\" ]; then\n        rm -rf ${MEDIA_DIR}/config/data/library.db-shm\n    fi\n    chmod 777 ${MEDIA_DIR}/config/data/library.org.db\n    curl -o ${MEDIA_DIR}/config/data/library.db https://cdn.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/emby_lovechen/library.db\n    curl -o ${MEDIA_DIR}/temp.sql https://cdn.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/emby_lovechen/temp.sql\n    pull_run_glue sqlite3 /media/config/data/library.db \".read /media/temp.sql\"\n\n    INFO \"数据库转换成功！\"\n    rm -rf ${MEDIA_DIR}/temp.sql\n\n    docker_pull \"lovechen/embyserver:${IMAGE_VERSION}\"\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            ${extra_parameters} \\\n            $(auto_privileged) \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            lovechen/embyserver:${IMAGE_VERSION}\n    else\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --name \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\" \\\n            -v \"${MEDIA_DIR}/config:/config\" \\\n            -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n            -v ${NSSWITCH}:/etc/nsswitch.conf \\\n            --add-host=\"xiaoya.host:$xiaoya_host\" \\\n            ${NET_MODE} \\\n            $(auto_privileged) \\\n            -e UID=0 \\\n            -e GID=0 \\\n            -e TZ=Asia/Shanghai \\\n            --restart=always \\\n            lovechen/embyserver:${IMAGE_VERSION}\n    fi\n\n}\n\nfunction choose_network_mode() {\n\n    INFO \"请选择使用的网络模式 [ 1:host | 2:bridge ]（默认 1）\"\n    read -erp \"Net:\" MODE\n    [[ -z \"${MODE}\" ]] && MODE=\"1\"\n    if [[ ${MODE} == [1] ]]; then\n        MODE=host\n    elif [[ ${MODE} == [2] ]]; then\n        MODE=bridge\n    else\n        ERROR \"输入无效，请重新选择\"\n        choose_network_mode\n    fi\n\n    if [ \"$MODE\" == \"host\" ]; then\n        NET_MODE=\"--net=host\"\n    elif [ \"$MODE\" == \"bridge\" ]; then\n        NET_MODE=\"-p 6908:6908\"\n    fi\n\n}\n\nfunction choose_emby_image() {\n\n    cpu_arch=$(uname -m)\n    INFO \"您的架构是：$cpu_arch\"\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"*)\n        INFO \"请选择使用的Emby镜像 [ 1:amilys/embyserver | 2:emby/embyserver | 3:lovechen/embyserver(不推荐！目前不能直接同步config数据，且还存在一些已知问题未修复) ]（默认 2）\"\n        read -erp \"IMAGE:\" IMAGE\n        [[ -z \"${IMAGE}\" ]] && IMAGE=\"2\"\n        if [[ ${IMAGE} == [1] ]]; then\n            CHOOSE_EMBY=amilys_embyserver\n        elif [[ ${IMAGE} == [2] ]]; then\n            CHOOSE_EMBY=emby_embyserver\n        elif [[ ${IMAGE} == [3] ]]; then\n            CHOOSE_EMBY=lovechen_embyserver\n        else\n            ERROR \"输入无效，请重新选择\"\n            choose_emby_image\n        fi\n        ;;\n    \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        INFO \"请选择使用的Emby镜像 [ 1:amilys/embyserver | 2:emby/embyserver | 3:lovechen/embyserver(不推荐！目前不能直接同步config数据，且还存在一些已知问题未修复) ]（默认 2）\"\n        read -erp \"IMAGE:\" IMAGE\n        [[ -z \"${IMAGE}\" ]] && IMAGE=\"2\"\n        if [[ ${IMAGE} == [1] ]]; then\n            CHOOSE_EMBY=amilys_embyserver\n        elif [[ ${IMAGE} == [2] ]]; then\n            CHOOSE_EMBY=emby_embyserver\n        elif [[ ${IMAGE} == [3] ]]; then\n            CHOOSE_EMBY=lovechen_embyserver\n        else\n            ERROR \"输入无效，请重新选择\"\n            choose_emby_image\n        fi\n        ;;\n    *)\n        ERROR \"全家桶 Emby 目前只支持 amd64 和 arm64 架构，你的架构是：$cpu_arch\"\n        exit 1\n        ;;\n    esac\n\n}\n\nfunction get_nsswitch_conf_path() {\n\n    if [ -f /etc/nsswitch.conf ]; then\n        NSSWITCH=\"/etc/nsswitch.conf\"\n    else\n        CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n        if [ -d \"${CONFIG_DIR}/nsswitch.conf\" ]; then\n            rm -rf ${CONFIG_DIR}/nsswitch.conf\n        fi\n        echo -e \"hosts:\\tfiles dns\" > ${CONFIG_DIR}/nsswitch.conf\n        echo -e \"networks:\\tfiles\" >> ${CONFIG_DIR}/nsswitch.conf\n        NSSWITCH=\"${CONFIG_DIR}/nsswitch.conf\"\n    fi\n    INFO \"nsswitch.conf 配置文件路径：${NSSWITCH}\"\n\n}\n\nfunction get_xiaoya_hosts() { # 调用这个函数必须设置 $MODE 此变量\n\n    if ! grep -q xiaoya.host ${HOSTS_FILE_PATH}; then\n        if [ \"$MODE\" == \"host\" ]; then\n            echo -e \"127.0.0.1\\txiaoya.host\\n\" >> ${HOSTS_FILE_PATH}\n            xiaoya_host=\"127.0.0.1\"\n        elif [ \"$MODE\" == \"bridge\" ]; then\n            echo -e \"$docker0\\txiaoya.host\\n\" >> ${HOSTS_FILE_PATH}\n            xiaoya_host=\"$docker0\"\n        fi\n    else\n        if [ \"$MODE\" == \"host\" ]; then\n            if grep -q \"^${docker0}.*xiaoya\\.host\" ${HOSTS_FILE_PATH}; then\n                sedsh '/xiaoya.host/d' ${HOSTS_FILE_PATH}\n                echo -e \"127.0.0.1\\txiaoya.host\\n\" >> ${HOSTS_FILE_PATH}\n            fi\n        elif [ \"$MODE\" == \"bridge\" ]; then\n            if grep -q \"^127\\.0\\.0\\.1.*xiaoya\\.host\" ${HOSTS_FILE_PATH}; then\n                sedsh '/xiaoya.host/d' ${HOSTS_FILE_PATH}\n                echo -e \"$docker0\\txiaoya.host\\n\" >> ${HOSTS_FILE_PATH}\n            fi\n        fi\n        xiaoya_host=$(grep xiaoya.host ${HOSTS_FILE_PATH} | awk '{print $1}' | head -n1)\n    fi\n\n    XIAOYA_HOSTS_SHOW=$(grep xiaoya.host ${HOSTS_FILE_PATH})\n    # if echo \"${XIAOYA_HOSTS_SHOW}\" | awk '\n    # {\n    #     split($1, ip, \".\");\n    #     if(length(ip) == 4 && ip[1] >= 0 && ip[1] <= 255 && ip[2] >= 0 && ip[2] <= 255 && ip[3] >= 0 && ip[3] <= 255 && ip[4] >= 0 && ip[4] <= 255 && index($2, \"\\t\") == 0)\n    #         exit 0;\n    #     else\n    #         exit 1;\n    # }'; then\n    #     INFO \"hosts 文件设置正确！\"\n    # else\n    #     WARN \"hosts 文件设置错误！\"\n    #     INFO \"是否使用脚本自动纠错（只支持单机部署自动纠错，如果小雅和全家桶不在同一台机器上，请手动修改）[Y/n]（默认 Y）\"\n    #     read -erp \"自动纠错:\" FIX_HOST_ERROR\n    #     [[ -z \"${FIX_HOST_ERROR}\" ]] && FIX_HOST_ERROR=\"y\"\n    #     if [[ ${FIX_HOST_ERROR} == [Yy] ]]; then\n    #         INFO \"开始自动纠错...\"\n    #         sedsh '/xiaoya\\.host/d' /etc/hosts\n    #         get_xiaoya_hosts\n    #     else\n    #         exit 1\n    #     fi\n    # fi\n    if echo \"${XIAOYA_HOSTS_SHOW}\" | awk '{ if($1 ~ /^[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+$/ && $2 ~ /^[^\\t]+$/) exit 0; else exit 1 }'; then\n        INFO \"hosts 文件格式设置正确！\"\n    else\n        WARN \"hosts 文件格式设置错误！\"\n        while true; do\n            INFO \"是否使用脚本自动纠错（只支持单机部署自动纠错，如果小雅和全家桶不在同一台机器上，请手动修改）[Y/n]（默认 Y）\"\n            read -erp \"自动纠错:\" FIX_HOST_ERROR\n            [[ -z \"${FIX_HOST_ERROR}\" ]] && FIX_HOST_ERROR=\"y\"\n            if [[ ${FIX_HOST_ERROR} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${FIX_HOST_ERROR} == [Yy] ]]; then\n            INFO \"开始自动纠错...\"\n            sedsh '/xiaoya\\.host/d' /etc/hosts\n            get_xiaoya_hosts\n        else\n            exit 1\n        fi\n    fi\n\n    INFO \"${XIAOYA_HOSTS_SHOW}\"\n\n    response=\"$(curl -s -o /dev/null -w '%{http_code}' http://${xiaoya_host}:5678)\"\n    if [[ \"$response\" == \"302\" || \"$response\" == \"200\" ]]; then\n        INFO \"hosts 文件设置正确，本机可以正常访问小雅容器！\"\n    else\n        response=\"$(curl -s -o /dev/null -w '%{http_code}' http://${xiaoya_host}:5678)\"\n        if [[ \"$response\" == \"302\" || \"$response\" == \"200\" ]]; then\n            INFO \"hosts 文件设置正确，本机可以正常访问小雅容器！\"\n        else\n            if [[ \"${OSNAME}\" = \"macos\" ]]; then\n                localip=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n            else\n                if command -v ifconfig > /dev/null 2>&1; then\n                    localip=$(ifconfig -a | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1)\n                else\n                    localip=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n                fi\n            fi\n            INFO \"尝试使用本机IP：${localip}\"\n            response=\"$(curl -s -o /dev/null -w '%{http_code}' http://${localip}:5678)\"\n            if [[ \"$response\" == \"302\" || \"$response\" == \"200\" ]]; then\n                sedsh '/xiaoya.host/d' ${HOSTS_FILE_PATH}\n                echo -e \"$localip\\txiaoya.host\\n\" >> ${HOSTS_FILE_PATH}\n                INFO \"hosts 文件设置成功，本机可以正常访问小雅容器！\"\n            else\n                ERROR \"hosts 文件设置错误，本机无法正常访问小雅容器！\"\n                exit 1\n            fi\n        fi\n    fi\n\n}\n\nfunction install_emby_xiaoya_all_emby() {\n\n    get_docker0_url\n\n    if [ -f \"${MEDIA_DIR}/config/config/system.xml\" ]; then\n        if ! grep -q 6908 ${MEDIA_DIR}/config/config/system.xml; then\n            ERROR \"Emby config 出错，请重新下载解压！\"\n            exit 1\n        fi\n    else\n        if [ ! -f \"${MEDIA_DIR}/temp/config.mp4\" ]; then\n            ERROR \"config.mp4 不存在，请下载此文件并解压！\"\n        else\n            ERROR \"Emby config 出错，请重新下载解压！\"\n        fi\n        exit 1\n    fi\n\n    if [ -f \"${MEDIA_DIR}/config/data/device.txt\" ]; then\n        INFO \"检测到存在 device.txt 文件！\"\n        if grep -q \"1999bfd1661041cd85ff5e260bc04c06\" ${MEDIA_DIR}/config/data/device.txt; then\n            INFO \"删除 device.txt 文件中...\"\n            rm -f ${MEDIA_DIR}/config/data/device.txt\n        fi\n    fi\n\n    XIAOYA_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n    if [ -s \"${XIAOYA_CONFIG_DIR}/emby_config.txt\" ]; then\n        # shellcheck disable=SC1091\n        source \"${XIAOYA_CONFIG_DIR}/emby_config.txt\"\n\n        if ! check_port \"6908\"; then\n            ERROR \"6908 端口被占用，请关闭占用此端口的程序！\"\n            exit 1\n        fi\n\n        # shellcheck disable=SC2154\n        if [ \"${mode}\" == \"bridge\" ]; then\n            MODE=bridge\n            NET_MODE=\"-p 6908:6908\"\n        elif [ \"${mode}\" == \"host\" ]; then\n            MODE=host\n            NET_MODE=\"--net=host\"\n        else\n            choose_network_mode\n        fi\n\n        get_xiaoya_hosts\n\n        # shellcheck disable=SC2154\n        if [ \"${dev_dri}\" == \"yes\" ]; then\n            extra_parameters=\"--device /dev/dri:/dev/dri --privileged -e GIDLIST=0,0 -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=all\"\n        fi\n\n        get_nsswitch_conf_path\n\n        if [ -n \"${version}\" ]; then\n            IMAGE_VERSION=\"${version}\"\n        else\n            IMAGE_VERSION=4.8.9.0\n        fi\n\n        # shellcheck disable=SC2154\n        if [ \"${image}\" == \"emby\" ]; then\n            install_emby_embyserver\n        else\n            cpu_arch=$(uname -m)\n            case $cpu_arch in\n            \"x86_64\" | *\"amd64\"* | \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n                install_amilys_embyserver\n                ;;\n            *)\n                ERROR \"全家桶 Emby 目前只支持 amd64 和 arm64 架构，你的架构是：$cpu_arch\"\n                exit 1\n                ;;\n            esac\n        fi\n\n    else\n        choose_emby_image\n\n        if ! check_port \"6908\"; then\n            ERROR \"6908 端口被占用，请关闭占用此端口的程序！\"\n            exit 1\n        fi\n\n        choose_network_mode\n\n        get_xiaoya_hosts\n\n        INFO \"如果需要开启Emby硬件转码请先返回主菜单开启容器运行额外参数添加 -> 72\"\n        container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n        if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n            local RETURN_DATA\n            RETURN_DATA=\"$(data_crep \"r\" \"install_xiaoya_emby\")\"\n            if [ \"${RETURN_DATA}\" == \"None\" ]; then\n                INFO \"请输入其他参数（默认 --device /dev/dri:/dev/dri --privileged -e GIDLIST=0,0 -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=all ）\"\n                read -erp \"Extra parameters:\" extra_parameters\n                [[ -z \"${extra_parameters}\" ]] && extra_parameters=\"--device /dev/dri:/dev/dri --privileged -e GIDLIST=0,0 -e NVIDIA_VISIBLE_DEVICES=all -e NVIDIA_DRIVER_CAPABILITIES=all\"\n            else\n                INFO \"已读取您上次设置的参数：${RETURN_DATA} (默认不更改回车继续，如果需要更改请输入新参数)\"\n                read -erp \"Extra parameters:\" extra_parameters\n                [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA}\n            fi\n            extra_parameters=$(data_crep \"write\" \"install_xiaoya_emby\")\n        fi\n\n        get_nsswitch_conf_path\n\n        while true; do\n            case ${CHOOSE_EMBY} in\n            \"amilys_embyserver\")\n                cpu_arch=$(uname -m)\n                if [[ $cpu_arch == \"aarch64\" || $cpu_arch == *\"arm64\"* || $cpu_arch == *\"armv8\"* || $cpu_arch == *\"arm/v8\"* ]]; then\n                    WARN \"amilys/embyserver_arm64v8 镜像无法指定版本号，默认拉取 latest 镜像！\"\n                    IMAGE_VERSION=latest\n                    break\n                else\n                    INFO \"请选择 Emby 镜像版本 [ 1；4.8.0.56 | 2；4.8.8.0 | 3；4.8.9.0 | 4；latest（${amilys_embyserver_latest_version}） ]（默认 3）\"\n                    read -erp \"CHOOSE_IMAGE_VERSION:\" CHOOSE_IMAGE_VERSION\n                    [[ -z \"${CHOOSE_IMAGE_VERSION}\" ]] && CHOOSE_IMAGE_VERSION=\"3\"\n                    case ${CHOOSE_IMAGE_VERSION} in\n                    1)\n                        IMAGE_VERSION=4.8.0.56\n                        break\n                        ;;\n                    2)\n                        IMAGE_VERSION=4.8.8.0\n                        break\n                        ;;\n                    3)\n                        IMAGE_VERSION=4.8.9.0\n                        break\n                        ;;\n                    4)\n                        IMAGE_VERSION=latest\n                        break\n                        ;;\n                    *)\n                        ERROR \"输入无效，请重新选择\"\n                        ;;\n                    esac\n                fi\n                ;;\n            \"install_lovechen_embyserver\")\n                WARN \"lovechen/embyserver 镜像无法指定版本号，默认拉取 4.7.14.0 镜像！\"\n                IMAGE_VERSION=4.7.14.0\n                break\n                ;;\n            \"emby_embyserver\")\n                INFO \"请选择 Emby 镜像版本 [ 1；4.8.0.56 | 2；4.8.8.0 | 3；4.8.9.0 | 3；latest（${emby_embyserver_latest_version}） ]（默认 3）\"\n                read -erp \"CHOOSE_IMAGE_VERSION:\" CHOOSE_IMAGE_VERSION\n                [[ -z \"${CHOOSE_IMAGE_VERSION}\" ]] && CHOOSE_IMAGE_VERSION=\"3\"\n                case ${CHOOSE_IMAGE_VERSION} in\n                1)\n                    IMAGE_VERSION=4.8.0.56\n                    break\n                    ;;\n                2)\n                    IMAGE_VERSION=4.8.8.0\n                    break\n                    ;;\n                3)\n                    IMAGE_VERSION=4.8.9.0\n                    break\n                    ;;\n                4)\n                    IMAGE_VERSION=latest\n                    break\n                    ;;\n                *)\n                    ERROR \"输入无效，请重新选择\"\n                    ;;\n                esac\n                ;;\n            esac\n        done\n\n        case ${CHOOSE_EMBY} in\n        emby_embyserver)\n            install_emby_embyserver\n            ;;\n        lovechen_embyserver)\n            install_lovechen_embyserver\n            ;;\n        amilys_embyserver)\n            install_amilys_embyserver\n            ;;\n        esac\n\n    fi\n\n    set_emby_server_infuse_api_key\n\n    wait_emby_start\n\n    sleep 2\n\n    if ! curl -I -s http://$docker0:2345/ | grep -q \"302\"; then\n        INFO \"重启小雅容器中...\"\n        docker restart \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n        wait_xiaoya_start\n    fi\n\n    INFO \"Emby安装完成！\"\n\n}\n\nfunction oneclick_upgrade_emby() {\n\n    local emby_name\n    emby_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\n    if docker inspect ddsderek/runlike:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' ddsderek/runlike:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/ddsderek/runlike/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ \"$local_sha\" != \"$remote_sha\" ]; then\n            docker rmi ddsderek/runlike:latest\n            docker_pull \"ddsderek/runlike:latest\"\n        fi\n    else\n        docker_pull \"ddsderek/runlike:latest\"\n    fi\n    INFO \"获取 ${emby_name} 容器信息中...\"\n    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp ddsderek/runlike \"${emby_name}\" > \"/tmp/container_update_${emby_name}\"\n    old_image=$(docker container inspect -f '{{.Config.Image}}' \"${emby_name}\")\n    old_image_name=\"$(echo \"${old_image}\" | cut -d':' -f1)\"\n    INFO \"获取 Emby 版本中...\"\n    if get_emby_version; then\n        INFO \"当前 Emby 版本：${emby_version}\"\n        check_emby_version_status=true\n    else\n        check_emby_version_status=false\n    fi\n    while true; do\n        if [ \"${old_image_name}\" == \"amilys/embyserver\" ] || [ \"${old_image_name}\" == \"amilys/embyserver_arm64v8\" ]; then\n            cpu_arch=$(uname -m)\n            if [[ $cpu_arch == \"aarch64\" || $cpu_arch == *\"arm64\"* || $cpu_arch == *\"armv8\"* || $cpu_arch == *\"arm/v8\"* ]]; then\n                WARN \"amilys/embyserver_arm64v8 镜像无法指定版本号，默认重新拉取 latest 镜像更新容器！\"\n                IMAGE_VERSION=latest\n                break\n            else\n                INFO \"请选择 Emby 镜像版本 [ 1；4.8.8.0 | 2；4.8.9.0 | 3；4.9.0.31 | 4；latest（${amilys_embyserver_latest_version}）| 5；beta（${amilys_embyserver_beta_version}）（此版本请勿轻易尝试）]（默认 2）\"\n                read -erp \"CHOOSE_IMAGE_VERSION:\" CHOOSE_IMAGE_VERSION\n                [[ -z \"${CHOOSE_IMAGE_VERSION}\" ]] && CHOOSE_IMAGE_VERSION=\"2\"\n                case ${CHOOSE_IMAGE_VERSION} in\n                1)\n                    IMAGE_VERSION=4.8.8.0\n                    choose_emby_version=\"${IMAGE_VERSION}\"\n                    ;;\n                2)\n                    IMAGE_VERSION=4.8.9.0\n                    choose_emby_version=\"${IMAGE_VERSION}\"\n                    ;;\n                3)\n                    IMAGE_VERSION=4.9.0.31\n                    choose_emby_version=\"${IMAGE_VERSION}\"\n                    ;;\n                4)\n                    IMAGE_VERSION=latest\n                    choose_emby_version=\"${amilys_embyserver_latest_version}\"\n                    ;;\n                5)\n                    IMAGE_VERSION=beta\n                    choose_emby_version=\"${amilys_embyserver_beta_version}\"\n                    ;;\n                *)\n                    ERROR \"输入无效，请重新选择\"\n                    ;;\n                esac\n                if [ \"${check_emby_version_status}\" == true ] && [ -n \"${choose_emby_version}\" ]; then\n                    if version_lt \"${choose_emby_version}\" \"${emby_version}\"; then\n                        ERROR \"您选择升级的 Emby 版本低于当前安装 Emby 版本，Emby 版本无法降级，请重新选择\"\n                    else\n                        break\n                    fi\n                elif [ \"${check_emby_version_status}\" == false ] && [ -n \"${choose_emby_version}\" ]; then\n                    break\n                fi\n            fi\n        elif [ \"${old_image_name}\" == \"lovechen/embyserver\" ]; then\n            WARN \"lovechen/embyserver 镜像无法更新！\"\n            exit 0\n        elif [ \"${old_image_name}\" == \"emby/embyserver\" ] || [ \"${old_image_name}\" == \"emby/embyserver_arm64v8\" ]; then\n            INFO \"请选择 Emby 镜像版本 [ 1；4.8.8.0 | 2；4.8.9.0 | 3；4.9.0.31 | 4；latest（${emby_embyserver_latest_version}） | 5；beta（${emby_embyserver_beta_version}）（此版本请勿轻易尝试） ]（默认 2）\"\n            read -erp \"CHOOSE_IMAGE_VERSION:\" CHOOSE_IMAGE_VERSION\n            [[ -z \"${CHOOSE_IMAGE_VERSION}\" ]] && CHOOSE_IMAGE_VERSION=\"2\"\n            case ${CHOOSE_IMAGE_VERSION} in\n            1)\n                IMAGE_VERSION=4.8.8.0\n                choose_emby_version=\"${IMAGE_VERSION}\"\n                ;;\n            2)\n                IMAGE_VERSION=4.8.9.0\n                choose_emby_version=\"${IMAGE_VERSION}\"\n                ;;\n            3)\n                IMAGE_VERSION=4.9.0.31\n                choose_emby_version=\"${IMAGE_VERSION}\"\n                ;;\n            4)\n                IMAGE_VERSION=latest\n                choose_emby_version=\"${emby_embyserver_latest_version}\"\n                ;;\n            5)\n                IMAGE_VERSION=beta\n                choose_emby_version=\"${emby_embyserver_beta_version}\"\n                ;;\n            *)\n                ERROR \"输入无效，请重新选择\"\n                ;;\n            esac\n            if [ \"${check_emby_version_status}\" == true ] && [ -n \"${choose_emby_version}\" ]; then\n                if version_lt \"${choose_emby_version}\" \"${emby_version}\"; then\n                    ERROR \"您选择升级的 Emby 版本低于当前安装 Emby 版本，Emby 版本无法降级，请重新选择\"\n                else\n                    break\n                fi\n            elif [ \"${check_emby_version_status}\" == false ] && [ -n \"${choose_emby_version}\" ]; then\n                break\n            fi\n        fi\n    done\n    run_image=\"$(echo \"${old_image}\" | cut -d':' -f1):${IMAGE_VERSION}\"\n    remove_image=$(docker images -q ${old_image})\n    sedsh \"s|${old_image}|${run_image}|g\" \"/tmp/container_update_${emby_name}\"\n    INFO \"${old_image} ${old_image_name} ${run_image} ${remove_image}\"\n    local retries=0\n    local max_retries=3\n    IMAGE_MIRROR=$(cat \"${DDSREM_CONFIG_DIR}/image_mirror.txt\")\n    while [ $retries -lt $max_retries ]; do\n        if docker pull \"${IMAGE_MIRROR}/${run_image}\"; then\n            INFO \"${emby_name} 镜像拉取成功！\"\n            break\n        else\n            WARN \"${emby_name} 镜像拉取失败，正在进行第 $((retries + 1)) 次重试...\"\n            retries=$((retries + 1))\n        fi\n    done\n    if [ $retries -eq $max_retries ]; then\n        ERROR \"镜像拉取失败，已达到最大重试次数！\"\n        exit 1\n    else\n        if [ \"${IMAGE_MIRROR}\" != \"docker.io\" ]; then\n            pull_image=$(docker images -q \"${IMAGE_MIRROR}/${run_image}\")\n        else\n            pull_image=$(docker images -q \"${run_image}\")\n        fi\n        if ! docker stop \"${emby_name}\" > /dev/null 2>&1; then\n            if ! docker kill \"${emby_name}\" > /dev/null 2>&1; then\n                docker rmi \"${IMAGE_MIRROR}/${run_image}\"\n                ERROR \"更新失败，停止 ${emby_name} 容器失败！\"\n                exit 1\n            fi\n        fi\n        INFO \"停止 ${emby_name} 容器成功！\"\n        if ! docker rm --force \"${emby_name}\" > /dev/null 2>&1; then\n            ERROR \"更新失败，删除 ${emby_name} 容器失败！\"\n            exit 1\n        fi\n        INFO \"删除 ${emby_name} 容器成功！\"\n        if [ \"${pull_image}\" != \"${remove_image}\" ]; then\n            INFO \"删除 ${remove_image} 镜像中...\"\n            docker rmi \"${remove_image}\" > /dev/null 2>&1\n        fi\n        if [ \"${IMAGE_MIRROR}\" != \"docker.io\" ]; then\n            docker tag \"${IMAGE_MIRROR}/${run_image}\" \"${run_image}\" > /dev/null 2>&1\n            docker rmi \"${IMAGE_MIRROR}/${run_image}\" > /dev/null 2>&1\n        fi\n        if bash \"/tmp/container_update_${emby_name}\"; then\n            rm -f \"/tmp/container_update_${emby_name}\"\n            wait_emby_start\n            INFO \"${emby_name} 更新成功\"\n            return 0\n        else\n            ERROR \"更新失败，创建 ${emby_name} 容器失败！\"\n            exit 1\n        fi\n    fi\n\n}\n\nfunction xiaoya_emd_updated_tips() {\n\n    if ! docker exec -i xiaoya-emd grep -q 'main_solid' /entrypoint.sh > /dev/null 2>&1; then\n        ERROR \"当前版本小雅元数据定时爬虫不支持执行此操作，请手动卸载重新安装！\"\n        exit 1\n    fi\n\n    if [ \"${1}\" != \"None\" ]; then\n        if version_lt \"$(docker exec -i xiaoya-emd awk -F '=' '/IMAGE_VERSION/ {print $2}' /entrypoint.sh | head -n 1)\" \"${1}\"; then\n            ERROR \"当前版本小雅元数据定时爬虫不支持执行此操作，请手动卸载重新安装！\"\n            exit 1\n        fi\n    fi\n\n}\n\nfunction xiaoya_emd_pathlib() {\n\n    if [ \"${1}\" == \"install\" ]; then\n        PATHLIB_DIR=\"${2}/pathlib.txt\"\n        if [ ! -f \"${PATHLIB_DIR}\" ]; then\n            echo -e \"115/\\n每日更新/\\n纪录片（已刮削）/\\n综艺/\\n音乐/\\n\" > \"${PATHLIB_DIR}\"\n        fi\n    elif [ \"${1}\" == \"once\" ]; then\n        PATHLIB_DIR=\"${2}/once_pathlib.txt\"\n        touch_chmod \"${2}/once_pathlib.txt\"\n    fi\n    sedsh '/^[[:space:]]*$/d' \"${PATHLIB_DIR}\"\n    while true; do\n        clear\n        emd_all_paths=('115/' 'PikPak/' '动漫/' '每日更新/' '电影/' '电视剧/' '纪录片/' '纪录片（已刮削）/' '综艺/' '音乐/' '📺画质演示测试（4K，8K，HDR，Dolby）/')\n        interface=\n        file_array=()\n        while IFS= read -r line; do\n            file_array+=(\"$line\")\n        done < \"${PATHLIB_DIR}\"\n        for i in \"${file_array[@]}\"; do\n            skip=false\n            for j in \"${emd_all_paths[@]}\"; do\n                if [ \"$i\" == \"$j\" ]; then\n                    skip=true\n                    break\n                fi\n            done\n            if [[ \"$skip\" = false ]]; then\n                emd_all_paths+=(\"$i\")\n            fi\n        done\n        for i in \"${!emd_all_paths[@]}\"; do\n            local CONTENT\n            if grep -q \"^${emd_all_paths[$i]}$\" \"${PATHLIB_DIR}\"; then\n                CONTENT=\"${Green}已选中${Font}\"\n            else\n                CONTENT=\"${Red}未选中${Font}\"\n            fi\n            if ((i + 1 <= 11)); then\n                interface+=\"$((i + 1))、${emd_all_paths[$i]}（${CONTENT}）\\n\"\n            else\n                interface+=\"$((i + 1))、${emd_all_paths[$i]}（${Sky_Blue}用户自定义${Font}）（${CONTENT}）\\n\"\n            fi\n        done\n        echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n        echo -e \"${Blue}爬取目录选择${Font}\\n\"\n        echo -e \"${Sky_Blue}红色代表未选中，绿色代表已选中，输入对应选项数字可勾选或取消勾选\"\n        echo -e \"支持输入多个数字，支持自定义爬取路径和现有选项一起输入，自定义爬取路径需要用''包裹\"\n        echo -e \"示例：1 5 8 9 10 '电影/豆瓣 top 1000部/' '每日更新/动漫/'${Font}\\n\"\n        echo -e \"${interface}\\c\"\n        if [ \"${1}\" == \"install\" ]; then\n            echo -e \"101、重置配置\"\n        fi\n        echo -e \"0、保存退出\"\n        echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n        read -erp \"请输入数字或路径:\" user_paths\n        if [ -n \"${user_paths}\" ]; then\n            if [ \"${user_paths}\" == 0 ]; then\n                clear\n                break\n            fi\n            if [ \"${user_paths}\" == 101 ] && [ \"${1}\" == \"install\" ]; then\n                echo -e \"115/\\n每日更新/\\n纪录片（已刮削）/\\n综艺/\\n音乐/\\n\" > \"${PATHLIB_DIR}\"\n                clear\n            fi\n            eval \"user_path_array=($user_paths)\"\n            # shellcheck disable=SC2154\n            for j in \"${!user_path_array[@]}\"; do\n                if [[ \"${user_path_array[$j]}\" -eq \"${user_path_array[$j]}\" ]] 2> /dev/null; then\n                    for i in \"${!emd_all_paths[@]}\"; do\n                        if [[ \"$((i + 1))\" == \"${user_path_array[$j]}\" ]]; then\n                            if grep -q \"^${emd_all_paths[$i]}$\" \"${PATHLIB_DIR}\"; then\n                                sedsh \"\\#${emd_all_paths[$i]}#d\" \"${PATHLIB_DIR}\"\n                            else\n                                echo \"${emd_all_paths[$i]}\" >> \"${PATHLIB_DIR}\"\n                            fi\n                            break\n                        fi\n                    done\n                else\n                    if grep -q \"^${user_path_array[$j]}$\" \"${PATHLIB_DIR}\"; then\n                        sedsh \"\\#${user_path_array[$j]}#d\" \"${PATHLIB_DIR}\"\n                    else\n                        echo \"${user_path_array[$j]}\" >> \"${PATHLIB_DIR}\"\n                    fi\n                fi\n            done\n            sedsh '/^[[:space:]]*$/d' \"${PATHLIB_DIR}\"\n        fi\n    done\n\n}\n\nfunction install_xiaoya_emd() {\n\n    get_media_dir\n\n    while true; do\n        INFO \"请输入您希望的爬虫同步间隔\"\n        WARN \"循环时间必须大于12h，为了减轻服务器压力，请用户理解！\"\n        read -erp \"请输入以小时为单位的正整数同步间隔时间（默认：12）：\" sync_interval\n        [[ -z \"${sync_interval}\" ]] && sync_interval=\"12\"\n        if [[ \"$sync_interval\" -ge 12 ]]; then\n            break\n        else\n            ERROR \"输入错误，请重新输入。同步间隔时间必须为12以上的正整数。\"\n        fi\n    done\n    cycle=$((sync_interval * 60 * 60))\n\n    xiaoya_emd_pathlib \"install\" \"${MEDIA_DIR}/xiaoya\"\n\n    while true; do\n        INFO \"是否开启重启容器自动更新到最新程序 [Y/n]（默认 n 不开启）\"\n        WARN \"需要拥有良好的上网环境才可以更新成功，要能访问 Github 和 Python PIP 库！\"\n        read -erp \"RESTART_AUTO_UPDATE:\" RESTART_AUTO_UPDATE\n        [[ -z \"${RESTART_AUTO_UPDATE}\" ]] && RESTART_AUTO_UPDATE=\"n\"\n        if [[ ${RESTART_AUTO_UPDATE} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${RESTART_AUTO_UPDATE} == [Yy] ]]; then\n        RESTART_AUTO_UPDATE=true\n    else\n        RESTART_AUTO_UPDATE=false\n    fi\n\n    while true; do\n        INFO \"请选择镜像版本 [ 1；latest | 2；beta ]（默认 1）\"\n        read -erp \"CHOOSE_IMAGE_VERSION:\" CHOOSE_IMAGE_VERSION\n        [[ -z \"${CHOOSE_IMAGE_VERSION}\" ]] && CHOOSE_IMAGE_VERSION=\"1\"\n        case ${CHOOSE_IMAGE_VERSION} in\n        1)\n            IMAGE_VERSION=latest\n            break\n            ;;\n        2)\n            IMAGE_VERSION=beta\n            break\n            ;;\n        *)\n            ERROR \"输入无效，请重新选择\"\n            ;;\n        esac\n    done\n\n    extra_parameters=\n    container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n        local RETURN_DATA\n        RETURN_DATA=\"$(data_crep \"r\" \"install_xiaoya_emd\")\"\n        # 兼容新版本参数\n        if [ \"${RETURN_DATA}\" == \"--media /media\" ]; then\n            RETURN_DATA=\"--media /media --paths /media/pathlib.txt\"\n        fi\n        if [ \"${RETURN_DATA}\" == \"None\" ]; then\n            INFO \"请输入运行参数（默认 --media /media --paths /media/pathlib.txt ）\"\n            WARN \"如果需要更改此设置请注意容器目录映射，默认媒体库路径映射到容器内的 /media 文件夹下！\"\n            WARN \"警告！！！ 默认请勿修改 /media 路径！！！\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=\"--media /media --paths /media/pathlib.txt\"\n        else\n            INFO \"已读取您上次设置的运行参数：${RETURN_DATA} (默认不更改回车继续，如果需要更改请输入新参数)\"\n            WARN \"如果需要更改此设置请注意容器目录映射，默认媒体库路径映射到容器内的 /media 文件夹下！\"\n            WARN \"警告！！！ 默认请勿修改 /media 路径！！！\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA}\n        fi\n    else\n        extra_parameters=\"--media /media --paths /media/pathlib.txt\"\n    fi\n    script_extra_parameters=\"$(data_crep \"write\" \"install_xiaoya_emd\")\"\n\n    extra_parameters=\n    container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n        local RETURN_DATA_2\n        RETURN_DATA_2=\"$(data_crep \"r\" \"install_xiaoya_emd_2\")\"\n        if [ \"${RETURN_DATA_2}\" == \"None\" ]; then\n            INFO \"请输入运行容器额外参数（默认 无 ）\"\n            read -erp \"Extra parameters:\" extra_parameters\n        else\n            INFO \"已读取您上次设置的运行容器额外参数：${RETURN_DATA_2} (默认不更改回车继续，如果需要更改请输入新参数)\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA_2}\n        fi\n        run_extra_parameters=$(data_crep \"w\" \"install_xiaoya_emd_2\")\n    fi\n\n    docker_pull \"ddsderek/xiaoya-emd:${IMAGE_VERSION}\"\n\n    # shellcheck disable=SC2046\n    docker run -d \\\n        --name=xiaoya-emd \\\n        --restart=always \\\n        --net=host \\\n        -v \"${MEDIA_DIR}/xiaoya:/media\" \\\n        -e \"CYCLE=${cycle}\" \\\n        -e \"RESTART_AUTO_UPDATE=${RESTART_AUTO_UPDATE}\" \\\n        -e TZ=Asia/Shanghai \\\n        ${run_extra_parameters} \\\n        $(auto_privileged) \\\n        ddsderek/xiaoya-emd:${IMAGE_VERSION} \\\n        ${script_extra_parameters}\n\n    INFO \"安装完成！\"\n\n}\n\nfunction update_xiaoya_emd() {\n\n    xiaoya_emd_updated_tips \"None\"\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新小雅元数据定时爬虫${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n    if [ -n \"${xiaoya_emd_dir}\" ]; then\n        if [ -f \"${xiaoya_emd_dir}/solid.lock\" ]; then\n            INFO \"检测到存在进程锁，清理中...\"\n            rm -f \"${xiaoya_emd_dir}/solid.lock\"\n        fi\n    fi\n    container_update xiaoya-emd\n\n}\n\nfunction unisntall_xiaoya_emd() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载小雅元数据定时爬虫${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n\n    xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n\n    docker stop xiaoya-emd\n    docker rm xiaoya-emd\n    docker rmi ddsderek/xiaoya-emd:latest\n\n    if [ -n \"${xiaoya_emd_dir}\" ]; then\n        for file in \"solid.lock\" \"once_pathlib.txt\" \"pathlib.txt\" \".tempfiles.db\" \".localfiles.db\"; do\n            if [ -f \"${xiaoya_emd_dir}/${file}\" ]; then\n                INFO \"清理 ${file} 文件\"\n                rm -f \"${xiaoya_emd_dir}/${file}\"\n            fi\n        done\n    fi\n\n    INFO \"小雅元数据定时爬虫卸载成功！\"\n\n}\n\nfunction once_xiaoya_emd() {\n\n    xiaoya_emd_updated_tips \"v1.0.0\"\n    xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n    if [ -z \"${xiaoya_emd_dir}\" ]; then\n        get_media_dir\n        xiaoya_emd_dir=\"${MEDIA_DIR}/xiaoya\"\n    fi\n    INFO \"小雅媒体库路径：${xiaoya_emd_dir}\"\n    sleep 2\n    xiaoya_emd_pathlib \"once\" \"${xiaoya_emd_dir}\"\n    cat << EOF > \"${xiaoya_emd_dir}/once_run.sh\"\ncd /app || exit 1\nif [ -d /tmp/db ]; then\n    rm -rf /tmp/db\nfi\nmkdir -p /tmp/db\nif [ -f /media/solid.lock ] && grep -q 'python3 solid.py'; then\n    echo -e \"${ERROR} 当前已有爬虫进程在运行，请稍后再试！\"\n    exit 1\nelse\n    touch /media/solid.lock\n    echo -e \"${INFO} 开始下载同步！\"\n    echo -e \"${INFO} python3 solid.py --media /media --paths /media/once_pathlib.txt --location /tmp/db\"\n    python3 solid.py --media /media --paths /media/once_pathlib.txt --location /tmp/db\n    echo -e \"${INFO} 运行完成！\"\n    rm -f /media/solid.lock\n    exit 0\nfi\nEOF\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始爬取指定元数据${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    docker exec -it xiaoya-emd bash /media/once_run.sh\n    docker exec -it xiaoya-emd rm -f /media/once_run.sh\n    docker exec -it xiaoya-emd rm -f /media/once_pathlib.txt\n\n}\n\nfunction main_xiaoya_emd() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}小雅元数据定时爬虫${Font}\\n\"\n    echo -e \"${Sky_Blue}小雅元数据定时爬虫由 https://github.com/Rik-F5 更新维护，在此表示感谢！\"\n    echo -e \"具体详细配置参数请看项目README：https://github.com/xiaoyaDev/xiaoya_db${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"4、立刻爬取指定目录\"\n    echo -e \"5、容器定时爬取目录单独配置\"\n    echo -e \"6、清理爬虫进程锁\"\n    echo -e \"7、重置爬虫数据库\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-7]:\" num\n    case \"$num\" in\n    1)\n        clear\n        install_xiaoya_emd\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    2)\n        clear\n        update_xiaoya_emd\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    3)\n        clear\n        unisntall_xiaoya_emd\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    4)\n        clear\n        once_xiaoya_emd\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    5)\n        clear\n        xiaoya_emd_updated_tips \"v1.0.0\"\n        xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n        if [ -z \"${xiaoya_emd_dir}\" ]; then\n            get_media_dir\n            xiaoya_emd_dir=\"${MEDIA_DIR}/xiaoya\"\n        fi\n        INFO \"小雅媒体库路径：${xiaoya_emd_dir}\"\n        sleep 2\n        xiaoya_emd_pathlib \"install\" \"${xiaoya_emd_dir}\"\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    6)\n        clear\n        xiaoya_emd_updated_tips \"v1.0.0\"\n        if [ \"$(docker inspect --format='{{.State.Status}}' xiaoya-emd)\" == \"running\" ]; then\n            if docker exec -it xiaoya-emd ps -ef | grep -q 'python3 solid.py'; then\n                ERROR \"当前有爬虫进程正在运行，无法清理进程锁！\"\n                exit 1\n            else\n                if docker exec -it xiaoya-emd ls -al /media/solid.lock > /dev/null 2>&1; then\n                    INFO \"检测到存在进程锁，清理中...\"\n                    docker exec -it xiaoya-emd rm -f /media/solid.lock\n                fi\n            fi\n        else\n            xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n            if [ -n \"${xiaoya_emd_dir}\" ]; then\n                if [ -f \"${xiaoya_emd_dir}/solid.lock\" ]; then\n                    INFO \"检测到存在进程锁，清理中...\"\n                    rm -f \"${xiaoya_emd_dir}/solid.lock\"\n                fi\n            fi\n        fi\n        INFO \"进程锁清理完成！\"\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    7)\n        clear\n        xiaoya_emd_updated_tips \"v1.0.0\"\n        if [ \"$(docker inspect --format='{{.State.Status}}' xiaoya-emd)\" == \"running\" ]; then\n            if docker exec -it xiaoya-emd ps -ef | grep -q 'python3 solid.py'; then\n                ERROR \"当前有爬虫进程正在运行，无法重置数据库！\"\n                exit 1\n            fi\n        fi\n        xiaoya_emd_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' xiaoya-emd | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/media$\" | awk -F: '{print $1}')\"\n        if [ -n \"${xiaoya_emd_dir}\" ]; then\n            for file in \".tempfiles.db\" \".localfiles.db\"; do\n                if [ -f \"${xiaoya_emd_dir}/${file}\" ]; then\n                    INFO \"清理 ${file} 文件\"\n                    rm -f \"${xiaoya_emd_dir}/${file}\"\n                fi\n            done\n            INFO \"数据库重置完成！\"\n        else\n            ERROR \"数据库重置失败，无法读取媒体库路径，请手动删除媒体库路径下面的 db 后缀文件！\"\n            exit 1\n        fi\n        return_menu \"main_xiaoya_emd\"\n        ;;\n    0)\n        clear\n        main_xiaoya_all_emby\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-7]'\n        main_xiaoya_emd\n        ;;\n    esac\n\n}\n\nfunction uninstall_xiaoya_all_emby() {\n\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载小雅Emby全家桶${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    IMAGE_NAME=\"$(docker inspect --format='{{.Config.Image}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\")\"\n    docker stop \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\"\n    docker rm \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\"\n    docker rmi \"${IMAGE_NAME}\"\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt ]; then\n            OLD_MEDIA_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_media_dir.txt)\n            rm -rf \"${OLD_MEDIA_DIR}\"\n        fi\n    fi\n\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_resilio_name.txt)\" > /dev/null 2>&1; then\n        unisntall_resilio\n    fi\n    if docker container inspect xiaoya-emd > /dev/null 2>&1; then\n        unisntall_xiaoya_emd\n    fi\n\n    INFO \"全家桶卸载成功！\"\n\n}\n\nfunction main_xiaoya_all_emby() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}小雅Emby全家桶${Font}\\n\"\n    echo -e \"${Red}注意：当前 Emby 全家桶要求 Emby 容器版本不低于 4.8.9.0${Font}\"\n    echo -e \"${Red}如果您的版本低于 4.8.9.0 请使用 菜单2-10 一键升级版本${Font}\"\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n        local container_status\n        container_status=$(docker inspect --format='{{.State.Status}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\")\n        case \"${container_status}\" in\n        \"running\")\n            echo\n            ;;\n        *)\n            echo -e \"\\n${Red}警告：您的小雅容器未正常启动，请先检查小雅容器后再安装全家桶${Font}\\n\"\n            ;;\n        esac\n    else\n        echo -e \"${Red}\\n警告：您未安装小雅容器，请先安装小雅容器后再安装全家桶${Font}\\n\"\n    fi\n    echo -ne \"${INFO} 界面加载中...${Font}\\r\"\n    echo -e \"1、一键安装Emby全家桶\n2、下载/解压 元数据\n3、安装Emby（可选择版本）\n4、替换DOCKER_ADDRESS（${Red}已弃用${Font}）\n5、安装/更新/卸载 Resilio-Sync（${Red}已弃用${Font}）      当前状态：$(judgment_container \"${xiaoya_resilio_name}\")\n6、立即同步小雅Emby config目录（${Red}已弃用${Font}）\n7、创建/删除 同步定时更新任务（${Red}已弃用${Font}）       当前状态：$(judgment_xiaoya_notify_status)\n8、图形化编辑 emby_config.txt\n9、安装/更新/卸载 小雅元数据定时爬虫          当前状态：$(judgment_container xiaoya-emd)\n10、一键升级Emby容器（可选择镜像版本）\n11、卸载Emby全家桶\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-11]:\" num\n    case \"$num\" in\n    1)\n        clear\n        download_unzip_xiaoya_all_emby\n        install_emby_xiaoya_all_emby\n        XIAOYA_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n        if [ -s \"${XIAOYA_CONFIG_DIR}/emby_config.txt\" ]; then\n            # shellcheck disable=SC1091\n            source \"${XIAOYA_CONFIG_DIR}/emby_config.txt\"\n            if [ -n \"${resilio}\" ]; then\n                WARN \"Resilio-Sync 已弃用，默认使用 小雅元数据定时爬虫\"\n            fi\n        fi\n        while true; do\n            INFO \"是否安装 小雅元数据定时爬虫 [Y/n]（默认 Y）\"\n            read -erp \"INSTALL:\" xiaoya_emd_install\n            [[ -z \"${xiaoya_emd_install}\" ]] && xiaoya_emd_install=\"y\"\n            if [[ ${xiaoya_emd_install} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${xiaoya_emd_install} == [Yy] ]]; then\n            install_xiaoya_emd\n        fi\n        INFO \"Emby 全家桶安装完成！ \"\n        INFO \"浏览器访问 Emby 服务：${Sky_Blue}http://ip:2345${Font}, 默认用户密码: ${Sky_Blue}xiaoya/1234${Font}\"\n        return_menu \"main_xiaoya_all_emby\"\n        ;;\n    2)\n        clear\n        main_download_unzip_xiaoya_emby\n        ;;\n    3)\n        clear\n        get_config_dir\n        get_media_dir\n        install_emby_xiaoya_all_emby\n        return_menu \"main_xiaoya_all_emby\"\n        ;;\n    4)\n        clear\n        WARN \"此功能已弃用！\"\n        return_menu \"main_xiaoya_all_emby\"\n        ;;\n    5)\n        clear\n        main_resilio\n        ;;\n    6)\n        clear\n        once_sync_emby_config\n        ;;\n    7)\n        clear\n        if command -v crontab > /dev/null 2>&1; then\n            if crontab -l | grep xiaoya_notify > /dev/null 2>&1; then\n                for i in $(seq -w 3 -1 0); do\n                    echo -en \"即将删除Emby config同步定时任务${Blue} $i ${Font}\\r\"\n                    sleep 1\n                done\n                uninstall_xiaoya_notify_cron\n                clear\n                INFO \"已删除\"\n            else\n                install_xiaoya_notify_cron\n            fi\n        elif [ -f /etc/synoinfo.conf ]; then\n            if grep 'xiaoya_notify' /etc/crontab > /dev/null 2>&1; then\n                for i in $(seq -w 3 -1 0); do\n                    echo -en \"即将删除Emby config同步定时任务${Blue} $i ${Font}\\r\"\n                    sleep 1\n                done\n                uninstall_xiaoya_notify_cron\n                clear\n                INFO \"已删除\"\n            else\n                install_xiaoya_notify_cron\n            fi\n        else\n            if docker container inspect xiaoya-cron > /dev/null 2>&1; then\n                for i in $(seq -w 3 -1 0); do\n                    echo -en \"即将删除Emby config同步定时任务${Blue} $i ${Font}\\r\"\n                    sleep 1\n                done\n                uninstall_xiaoya_notify_cron\n                clear\n                INFO \"已删除\"\n            else\n                install_xiaoya_notify_cron\n            fi\n        fi\n        return_menu \"main_xiaoya_all_emby\"\n        ;;\n    8)\n        clear\n        get_config_dir\n        bash -c \"$(curl -sLk https://ddsrem.com/xiaoya/emby_config_editor.sh)\" -s ${CONFIG_DIR}\n        main_xiaoya_all_emby\n        ;;\n    9)\n        clear\n        main_xiaoya_emd\n        ;;\n    10)\n        clear\n        oneclick_upgrade_emby\n        return_menu \"main_xiaoya_all_emby\"\n        ;;\n    11)\n        clear\n        uninstall_xiaoya_all_emby\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-11]'\n        main_xiaoya_all_emby\n        ;;\n    esac\n\n}\n\nfunction xiaoyahelper_install_check() {\n    local URL=\"$1\"\n    if bash -c \"$(curl --insecure -fsSL ${URL} | tail -n +2)\" -s \"${MODE}\" ${TG_CHOOSE}; then\n        if docker container inspect xiaoyakeeper > /dev/null 2>&1; then\n            INFO \"安装完成！\"\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\nfunction install_xiaoyahelper() {\n\n    INFO \"选择模式：[3/5]（默认 3）\"\n    INFO \"模式3: 定时运行小雅转存清理并升级小雅镜像\"\n    INFO \"模式5: 只要产生了播放缓存一分钟内立即清理。签到和定时升级同模式3\"\n    read -erp \"MODE:\" MODE\n    [[ -z \"${MODE}\" ]] && MODE=\"3\"\n\n    while true; do\n        INFO \"是否使用Telegram通知 [Y/n]（默认 n 不使用）\"\n        read -erp \"TG:\" TG\n        [[ -z \"${TG}\" ]] && TG=\"n\"\n        if [[ ${TG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${TG} == [Yy] ]]; then\n        TG_CHOOSE=\"-tg\"\n    fi\n\n    docker_pull \"ddsderek/xiaoyakeeper:latest\"\n\n    XIAOYAHELPER_URL=\"https://xiaoyahelper.ddsrem.com/aliyun_clear.sh\"\n    if xiaoyahelper_install_check \"${XIAOYAHELPER_URL}\"; then\n        return 0\n    fi\n    XIAOYAHELPER_URL=\"https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh\"\n    if xiaoyahelper_install_check \"${XIAOYAHELPER_URL}\"; then\n        return 0\n    fi\n    ERROR \"安装失败！\"\n    return 1\n\n}\n\nfunction once_xiaoyahelper() {\n\n    while true; do\n        INFO \"是否使用Telegram通知 [Y/n]（默认 n 不使用）\"\n        read -erp \"TG:\" TG\n        [[ -z \"${TG}\" ]] && TG=\"n\"\n        if [[ ${TG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n    if [[ ${TG} == [Yy] ]]; then\n        TG_CHOOSE=\"-tg\"\n    fi\n\n    XIAOYAHELPER_URL=\"https://xiaoyahelper.ddsrem.com/aliyun_clear.sh\"\n    if bash -c \"$(curl --insecure -fsSL ${XIAOYAHELPER_URL} | tail -n +2)\" -s 1 ${TG_CHOOSE}; then\n        INFO \"运行完成！\"\n    else\n        XIAOYAHELPER_URL=\"https://xiaoyahelper.zengge99.eu.org/aliyun_clear.sh\"\n        if bash -c \"$(curl --insecure -fsSL ${XIAOYAHELPER_URL} | tail -n +2)\" -s 1 ${TG_CHOOSE}; then\n            INFO \"运行完成！\"\n        else\n            ERROR \"运行失败！\"\n            exit 1\n        fi\n    fi\n}\n\nfunction uninstall_xiaoyahelper() {\n\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载小雅助手（xiaoyahelper）${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    docker stop xiaoyakeeper\n    docker rm xiaoyakeeper\n    docker rmi dockerproxy.com/library/alpine:3.18.2 > /dev/null 2>&1\n    docker rmi alpine:3.18.2 > /dev/null 2>&1\n    docker rmi ddsderek/xiaoyakeeper:latest\n\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            for file in \"${OLD_CONFIG_DIR}/mycheckintoken.txt\" \"${OLD_CONFIG_DIR}/mycmd.txt\" \"${OLD_CONFIG_DIR}/myruntime.txt\"; do\n                if [ -f \"$file\" ]; then\n                    rm -f \"$file\"\n                fi\n            done\n        fi\n        rm -f ${OLD_CONFIG_DIR}/*json\n    fi\n\n    INFO \"小雅助手（xiaoyahelper）卸载成功！\"\n\n}\n\nfunction main_xiaoyahelper() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}小雅助手（xiaoyahelper）${Font}\\n\"\n    echo -e \"1、安装/更新\"\n    echo -e \"2、一次性运行\"\n    echo -e \"3、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-3]:\" num\n    case \"$num\" in\n    1)\n        clear\n        install_xiaoyahelper\n        return_menu \"main_xiaoyahelper\"\n        ;;\n    2)\n        clear\n        once_xiaoyahelper\n        ;;\n    3)\n        clear\n        uninstall_xiaoyahelper\n        return_menu \"main_xiaoyahelper\"\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-3]'\n        main_xiaoyahelper\n        ;;\n    esac\n\n}\n\nfunction install_xiaoya_alist_tvbox() {\n\n    local DEFAULT_CONFIG_DIR\n    while true; do\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt)\n            INFO \"已读取小雅Alist-TVBox配置文件路径：${OLD_CONFIG_DIR} (默认不更改回车继续，如果需要更改请输入新路径)\"\n            read -erp \"CONFIG_DIR:\" CONFIG_DIR\n            [[ -z \"${CONFIG_DIR}\" ]] && CONFIG_DIR=${OLD_CONFIG_DIR}\n        else\n            DEFAULT_CONFIG_DIR=\"$(get_path \"xiaoya_alist_config_dir\")\"\n            INFO \"请输入配置文件目录（默认 ${DEFAULT_CONFIG_DIR} ）\"\n            read -erp \"CONFIG_DIR:\" CONFIG_DIR\n            [[ -z \"${CONFIG_DIR}\" ]] && CONFIG_DIR=\"${DEFAULT_CONFIG_DIR}\"\n            touch ${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt\n        fi\n        if check_path \"${CONFIG_DIR}\"; then\n            echo \"${CONFIG_DIR}\" > \"${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt\"\n            INFO \"目录合法性检测通过！\"\n            break\n        else\n            ERROR \"非合法目录，请重新输入！\"\n        fi\n    done\n\n    while true; do\n        INFO \"请输入Alist端口（默认 5344 ）\"\n        read -erp \"ALIST_PORT:\" ALIST_PORT\n        [[ -z \"${ALIST_PORT}\" ]] && ALIST_PORT=\"5344\"\n        if check_port \"${ALIST_PORT}\"; then\n            break\n        else\n            ERROR \"${ALIST_PORT} 此端口被占用，请输入其他端口！\"\n        fi\n    done\n\n    while true; do\n        INFO \"请输入后台管理端口（默认 4567 ）\"\n        read -erp \"HT_PORT:\" HT_PORT\n        [[ -z \"${HT_PORT}\" ]] && HT_PORT=\"4567\"\n        if check_port \"${HT_PORT}\"; then\n            break\n        else\n            ERROR \"${HT_PORT} 此端口被占用，请输入其他端口！\"\n        fi\n    done\n\n    INFO \"请输入内存限制（默认 -Xmx512M ）\"\n    read -erp \"MEM_OPT:\" MEM_OPT\n    [[ -z \"${MEM_OPT}\" ]] && MEM_OPT=\"-Xmx512M\"\n\n    cpu_arch=$(uname -m)\n    INFO \"您的CPU架构：${cpu_arch}\"\n    case $cpu_arch in\n    \"x86_64\" | *\"amd64\"*)\n        while true; do\n            INFO \"是否使用内存优化版镜像 [Y/n]（默认 n 不使用）\"\n            read -erp \"Native:\" choose_native\n            [[ -z \"${choose_native}\" ]] && choose_native=\"n\"\n            if [[ ${choose_native} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${choose_native} == [Yy] ]]; then\n            __choose_native=\"native\"\n        else\n            __choose_native=\"latest\"\n        fi\n        ;;\n    \"aarch64\" | *\"arm64\"* | *\"armv8\"* | *\"arm/v8\"*)\n        __choose_native=\"latest\"\n        ;;\n    *)\n        ERROR \"Xiaoya-TVBox 目前只支持 amd64 和 arm64 架构，你的架构是：$cpu_arch\"\n        exit 1\n        ;;\n    esac\n\n    container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n        local RETURN_DATA\n        RETURN_DATA=\"$(data_crep \"r\" \"install_xiaoya_alist_tvbox\")\"\n        if [ \"${RETURN_DATA}\" == \"None\" ]; then\n            INFO \"请输入其他参数（默认 无 ）\"\n            read -erp \"Extra parameters:\" extra_parameters\n        else\n            INFO \"已读取您上次设置的参数：${RETURN_DATA} (默认不更改回车继续，如果需要更改请输入新参数)\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA}\n        fi\n        extra_parameters=$(data_crep \"w\" \"install_xiaoya_alist_tvbox\")\n    fi\n\n    if ls ${CONFIG_DIR}/*.txt 1> /dev/null 2>&1; then\n        INFO \"备份小雅配置数据中...\"\n        mkdir -p ${CONFIG_DIR}/xiaoya_backup\n        cp -rf ${CONFIG_DIR}/*.txt ${CONFIG_DIR}/xiaoya_backup\n        INFO \"完成备份小雅配置数据！\"\n        INFO \"备份数据路径：${CONFIG_DIR}/xiaoya_backup\"\n    fi\n\n    if ! grep \"access.mypikpak.com\" ${HOSTS_FILE_PATH}; then\n        echo -e \"127.0.0.1\\taccess.mypikpak.com\" >> ${HOSTS_FILE_PATH}\n    fi\n\n    docker_pull \"haroldli/xiaoya-tvbox:${__choose_native}\"\n\n    if [ -n \"${extra_parameters}\" ]; then\n        docker run -itd \\\n            -p \"${HT_PORT}\":4567 \\\n            -p \"${ALIST_PORT}\":80 \\\n            -e ALIST_PORT=\"${ALIST_PORT}\" \\\n            -e MEM_OPT=\"${MEM_OPT}\" \\\n            -e TZ=Asia/Shanghai \\\n            -v \"${CONFIG_DIR}:/data\" \\\n            ${extra_parameters} \\\n            --restart=always \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\" \\\n            haroldli/xiaoya-tvbox:${__choose_native}\n    else\n        docker run -itd \\\n            -p \"${HT_PORT}\":4567 \\\n            -p \"${ALIST_PORT}\":80 \\\n            -e ALIST_PORT=\"${ALIST_PORT}\" \\\n            -e MEM_OPT=\"${MEM_OPT}\" \\\n            -e TZ=Asia/Shanghai \\\n            -v \"${CONFIG_DIR}:/data\" \\\n            --restart=always \\\n            --name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\" \\\n            haroldli/xiaoya-tvbox:${__choose_native}\n    fi\n\n    INFO \"安装完成！\"\n    INFO \"浏览器访问 小雅Alist-TVBox 服务：${Sky_Blue}http://ip:${HT_PORT}${Font}, 默认用户密码: ${Sky_Blue}admin/admin${Font}\"\n\n}\n\nfunction update_xiaoya_alist_tvbox() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新小雅Alist-TVBox${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    VOLUMES=\"$(docker inspect -f '{{range .Mounts}}{{if eq .Type \"volume\"}}{{println .}}{{end}}{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\" | cut -d' ' -f2 | awk 'NF' | tr '\\n' ' ')\"\n    # shellcheck disable=SC2034\n    container_update_extra_command=\"sedsh '/\\/opt\\/atv\\/data/d; \\/opt\\/alist\\/data/d' \"/tmp/container_update_$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\"\"\n    container_update \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\"\n    docker volume rm ${VOLUMES}\n\n}\n\nfunction uninstall_xiaoya_alist_tvbox() {\n\n    local CLEAN_CONFIG IMAGE_NAME VOLUMES\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载小雅Alist-TVBox${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    IMAGE_NAME=\"$(docker inspect --format='{{.Config.Image}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\")\"\n    VOLUMES=\"$(docker inspect -f '{{range .Mounts}}{{if eq .Type \"volume\"}}{{println .}}{{end}}{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\" | cut -d' ' -f2 | awk 'NF' | tr '\\n' ' ')\"\n    docker stop \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\"\n    docker rm \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\"\n    docker rmi \"${IMAGE_NAME}\"\n    docker volume rm ${VOLUMES}\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_tvbox_config_dir.txt)\n            for dir in \"${OLD_CONFIG_DIR}\"/*/; do\n                rm -rf \"$dir\"\n            done\n            rm -rf ${OLD_CONFIG_DIR}/*.db\n        fi\n    fi\n    INFO \"小雅Alist-TVBox卸载成功！\"\n\n}\n\nfunction main_xiaoya_alist_tvbox() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}小雅Alist-TVBox${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-3]:\" num\n    case \"$num\" in\n    1)\n        clear\n        install_xiaoya_alist_tvbox\n        return_menu \"main_xiaoya_alist_tvbox\"\n        ;;\n    2)\n        clear\n        update_xiaoya_alist_tvbox\n        return_menu \"main_xiaoya_alist_tvbox\"\n        ;;\n    3)\n        clear\n        uninstall_xiaoya_alist_tvbox\n        return_menu \"main_xiaoya_alist_tvbox\"\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-3]'\n        main_xiaoya_alist_tvbox\n        ;;\n    esac\n\n}\n\nfunction install_xiaoya_115_cleaner() {\n\n    local config_dir\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n        config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/data$\" | awk -F: '{print $1}')\"\n    fi\n    if [ -z \"${config_dir}\" ]; then\n        get_config_dir\n        config_dir=${CONFIG_DIR}\n    fi\n\n    settings_115_cookie \"${config_dir}\"\n\n    if [ ! -f \"${config_dir}/115_key.txt\" ]; then\n        touch ${config_dir}/115_key.txt\n        INFO \"输入你的 115 回收站密码\"\n        INFO \"注意：此选项为必填项，如果您关闭了回收站密码请手动开启并输入！\"\n        read -erp \"Key:\" password_key\n        echo -e \"${password_key}\" > ${config_dir}/115_key.txt\n    fi\n\n    while true; do\n        INFO \"请选择 115 Cleaner 清理模式（默认 1）\"\n        INFO \"1：标准模式，清空 /我的接收 下面的文件并同时清理回收站的对应文件\"\n        INFO \"2：只清空 115云盘 回收站文件，不会清理其他地方的文件\"\n        INFO \"3：清空 /我的接收 下面的文件并同时清空回收站\"\n        read -erp \"CHOOSE_RUN_MODE:\" CHOOSE_RUN_MODE\n        [[ -z \"${CHOOSE_RUN_MODE}\" ]] && CHOOSE_RUN_MODE=\"1\"\n        if [ -f \"${config_dir}/115_cleaner_all_recyclebin.txt\" ]; then\n            rm -rf \"${config_dir}/115_cleaner_all_recyclebin.txt\"\n        fi\n        if [ -f \"${config_dir}/115_cleaner_only_recyclebin.txt\" ]; then\n            rm -rf \"${config_dir}/115_cleaner_only_recyclebin.txt\"\n        fi\n        case ${CHOOSE_RUN_MODE} in\n        1)\n            break\n            ;;\n        2)\n            touch \"${config_dir}/115_cleaner_only_recyclebin.txt\"\n            break\n            ;;\n        3)\n            touch \"${config_dir}/115_cleaner_all_recyclebin.txt\"\n            break\n            ;;\n        *)\n            ERROR \"输入无效，请重新选择\"\n            ;;\n        esac\n    done\n\n    if [ -f \"${config_dir}/ali2115.txt\" ]; then\n        while true; do\n            INFO \"是否将 ali2115 转存文件交由 115 Cleaner 清理 [Y/n]（默认 y）\"\n            read -erp \"ali2115:\" choose_ali2115\n            [[ -z \"${choose_ali2115}\" ]] && choose_ali2115=\"y\"\n            if [[ ${choose_ali2115} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n    fi\n    if [[ ${choose_ali2115} == [Yy] ]]; then\n        touch \"${config_dir}/115_cleaner_auto_set_ali2115.txt\"\n    fi\n\n    container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n        local RETURN_DATA\n        RETURN_DATA=\"$(data_crep \"r\" \"install_xiaoya_115_cleaner\")\"\n        if [ \"${RETURN_DATA}\" == \"None\" ]; then\n            INFO \"请输入其他参数（默认 无 ）\"\n            read -erp \"Extra parameters:\" extra_parameters\n        else\n            INFO \"已读取您上次设置的参数：${RETURN_DATA} (默认不更改回车继续，如果需要更改请输入新参数)\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA}\n        fi\n        extra_parameters=$(data_crep \"w\" \"install_xiaoya_115_cleaner\")\n    fi\n\n    docker_pull \"ddsderek/xiaoya-115cleaner:latest\"\n\n    docker run -d \\\n        --name=xiaoya-115cleaner \\\n        -v \"${config_dir}:/data\" \\\n        --net=host \\\n        -e TZ=Asia/Shanghai \\\n        ${extra_parameters} \\\n        --restart=always \\\n        ddsderek/xiaoya-115cleaner:latest\n\n    INFO \"安装完成！\"\n\n}\n\nfunction update_xiaoya_115_cleaner() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新115清理助手${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    container_update xiaoya-115cleaner\n\n}\n\nfunction uninstall_xiaoya_115_cleaner() {\n\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载115清理助手${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    docker stop xiaoya-115cleaner\n    docker rm xiaoya-115cleaner\n    docker rmi ddsderek/xiaoya-115cleaner:latest\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            for file in \"${OLD_CONFIG_DIR}/115_cleaner_only_recyclebin.txt\" \"${OLD_CONFIG_DIR}/115_cleaner_all_recyclebin.txt\" \"${OLD_CONFIG_DIR}/115_key.txt\"; do\n                if [ -f \"$file\" ]; then\n                    rm -f \"$file\"\n                fi\n            done\n        fi\n    fi\n    INFO \"115清理助手卸载成功！\"\n\n}\n\nfunction main_xiaoya_115_cleaner() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}115 清理助手${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-3]:\" num\n    case \"$num\" in\n    1)\n        clear\n        install_xiaoya_115_cleaner\n        return_menu \"main_xiaoya_115_cleaner\"\n        ;;\n    2)\n        clear\n        update_xiaoya_115_cleaner\n        return_menu \"main_xiaoya_115_cleaner\"\n        ;;\n    3)\n        clear\n        uninstall_xiaoya_115_cleaner\n        return_menu \"main_xiaoya_115_cleaner\"\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-3]'\n        main_xiaoya_115_cleaner\n        ;;\n    esac\n\n}\n\nfunction install_xiaoya_proxy() {\n\n    local config_dir\n    if docker container inspect \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" > /dev/null 2>&1; then\n        config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/data$\" | awk -F: '{print $1}')\"\n    else\n        ERROR \"请先安装小雅容器后再使用 Xiaoya Proxy！\"\n        exit 1\n    fi\n    if [ -z \"${config_dir}\" ]; then\n        get_config_dir\n        config_dir=${CONFIG_DIR}\n    fi\n    INFO \"小雅配置文件目录：${config_dir}\"\n    container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${container_run_extra_parameters}\" == \"true\" ]; then\n        local RETURN_DATA\n        RETURN_DATA=\"$(data_crep \"r\" \"install_xiaoya_proxy\")\"\n        if [ \"${RETURN_DATA}\" == \"None\" ]; then\n            INFO \"请输入其他参数（默认 无 ）\"\n            read -erp \"Extra parameters:\" extra_parameters\n        else\n            INFO \"已读取您上次设置的参数：${RETURN_DATA} (默认不更改回车继续，如果需要更改请输入新参数)\"\n            read -erp \"Extra parameters:\" extra_parameters\n            [[ -z \"${extra_parameters}\" ]] && extra_parameters=${RETURN_DATA}\n        fi\n        extra_parameters=$(data_crep \"w\" \"install_xiaoya_proxy\")\n    fi\n    if ! check_port \"9988\"; then\n        ERROR \"9988 端口被占用，请关闭占用此端口的程序！\"\n        exit 1\n    fi\n    docker_pull \"ddsderek/xiaoya-proxy:latest\"\n    # shellcheck disable=SC2046\n    docker run -d \\\n        --name=xiaoya-proxy \\\n        --restart=always \\\n        $(get_default_network \"xiaoya-proxy\") \\\n        ${extra_parameters} \\\n        -e TZ=Asia/Shanghai \\\n        ddsderek/xiaoya-proxy:latest\n    if [[ \"${OSNAME}\" = \"macos\" ]]; then\n        local_ip=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n    else\n        local_ip=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n    fi\n    if [ -z \"${local_ip}\" ]; then\n        WARN \"请手动配置 ${config_dir}/xiaoya_proxy.txt 文件，内容为 http://小雅服务器IP:9988\"\n    else\n        INFO \"本机IP：${local_ip}\"\n        echo \"http://${local_ip}:9988\" > ${config_dir}/xiaoya_proxy.txt\n        INFO \"xiaoya_proxy.txt 配置完成！\"\n    fi\n    docker restart \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    wait_xiaoya_start\n    INFO \"安装完成！\"\n\n}\n\nfunction update_xiaoya_proxy() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新 Xiaoya Proxy${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    container_update xiaoya-proxy\n\n}\n\nfunction uninstall_xiaoya_proxy() {\n\n    while true; do\n        INFO \"是否${Red}删除配置文件${Font} [Y/n]（默认 Y 删除）\"\n        read -erp \"Clean config:\" CLEAN_CONFIG\n        [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n        if [[ ${CLEAN_CONFIG} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载 Xiaoya Proxy${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    docker stop xiaoya-proxy\n    docker rm xiaoya-proxy\n    docker rmi ddsderek/xiaoya-proxy:latest\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        INFO \"清理配置文件...\"\n        if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt ]; then\n            OLD_CONFIG_DIR=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\n            if [ -f \"${OLD_CONFIG_DIR}/xiaoya_proxy.txt\" ]; then\n                rm -f \"${OLD_CONFIG_DIR}/xiaoya_proxy.txt\"\n            fi\n        fi\n    fi\n    INFO \"Xiaoya Proxy 卸载成功！\"\n\n}\n\nfunction main_xiaoya_proxy() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}Xiaoya Proxy${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-3]:\" num\n    case \"$num\" in\n    1)\n        clear\n        install_xiaoya_proxy\n        return_menu \"main_xiaoya_proxy\"\n        ;;\n    2)\n        clear\n        update_xiaoya_proxy\n        return_menu \"main_xiaoya_proxy\"\n        ;;\n    3)\n        clear\n        uninstall_xiaoya_proxy\n        return_menu \"main_xiaoya_proxy\"\n        ;;\n    0)\n        clear\n        main_other_tools\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-3]'\n        main_xiaoya_proxy\n        ;;\n    esac\n\n}\n\nfunction install_xiaoya_aliyuntvtoken_connector() {\n\n    CONFIG_DIR=$1\n\n    if [ ! -f \"${CONFIG_DIR}/open_tv_token_url.txt\" ]; then\n        INFO \"当前未配置 阿里云盘 TV Token，开始进入 TV Token 配置流程...\"\n        qrcode_aliyunpan_tvtoken \"${CONFIG_DIR}\"\n    else\n        INFO \"阿里云盘 TV Token 当前已配置！\"\n    fi\n\n    if ! check_port \"34278\"; then\n        ERROR \"34278 端口被占用，请关闭占用此端口的程序！\"\n        exit 1\n    fi\n\n    docker_pull \"ddsderek/xiaoya-glue:aliyuntvtoken_connector\"\n\n    # shellcheck disable=SC2046\n    docker run -d \\\n        $(get_default_network \"xiaoya-aliyuntvtoken_connector\") \\\n        --name=xiaoya-aliyuntvtoken_connector \\\n        --restart=always \\\n        ddsderek/xiaoya-glue:aliyuntvtoken_connector\n\n    sleep 2\n\n    get_docker0_url\n    local xiaoya_name aliyuntvtoken_connector_addr local_ip xiaoya_running\n    xiaoya_name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    xiaoya_running=false\n    if docker container inspect \"${xiaoya_name}\" > /dev/null 2>&1; then\n        case \"$(docker inspect --format='{{.State.Status}}' \"${xiaoya_name}\")\" in\n        \"running\")\n            xiaoya_running=true\n            ;;\n        esac\n    fi\n    function set_local_ip() {\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            local_ip=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n        else\n            local_ip=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n        fi\n        if [ -z \"${local_ip}\" ]; then\n            WARN \"请手动配置 ${CONFIG_DIR}/open_tv_token_url.txt 文件，内容为 http://小雅服务器IP:34278/oauth/alipan/token\"\n        else\n            INFO \"本机IP：${local_ip}\"\n            aliyuntvtoken_connector_addr=\"http://${local_ip}:34278/oauth/alipan/token\"\n        fi\n    }\n    if [ \"${xiaoya_running}\" == \"true\" ]; then\n        if docker exec -it \"${xiaoya_name}\" curl -siL -m 10 http://127.0.0.1:34278/oauth/alipan/token | grep 405; then\n            aliyuntvtoken_connector_addr=\"http://127.0.0.1:34278/oauth/alipan/token\"\n        elif docker exec -it \"${xiaoya_name}\" curl -siL -m 10 http://${docker0}:34278/oauth/alipan/token | grep 405; then\n            aliyuntvtoken_connector_addr=\"http://${docker0}:34278/oauth/alipan/token\"\n        else\n            set_local_ip\n        fi\n    else\n        set_local_ip\n    fi\n    if [ -n \"${aliyuntvtoken_connector_addr}\" ]; then\n        INFO \"本地阿里云盘 TV Token 鉴权接口地址：${aliyuntvtoken_connector_addr}\"\n        echo \"${aliyuntvtoken_connector_addr}\" > \"${CONFIG_DIR}/open_tv_token_url.txt\"\n    fi\n\n    if docker container inspect \"${xiaoya_name}\" > /dev/null 2>&1; then\n        docker restart \"${xiaoya_name}\"\n        sleep 5\n        wait_xiaoya_start\n    fi\n\n    INFO \"安装完成！\"\n\n}\n\nfunction update_xiaoya_aliyuntvtoken_connector() {\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始更新 xiaoya-aliyuntvtoken_connector${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    container_update xiaoya-aliyuntvtoken_connector\n\n}\n\nfunction uninstall_xiaoya_aliyuntvtoken_connector() {\n\n    while true; do\n        INFO \"是否停止使用 阿里云盘 TV Token 配置 [Y/n]（默认 n）\"\n        read -erp \"Use_TV_Token:\" USE_TV_TOKEN\n        [[ -z \"${USE_TV_TOKEN}\" ]] && USE_TV_TOKEN=\"n\"\n        if [[ ${USE_TV_TOKEN} == [YyNn] ]]; then\n            break\n        else\n            ERROR \"非法输入，请输入 [Y/n]\"\n        fi\n    done\n\n    for i in $(seq -w 3 -1 0); do\n        echo -en \"即将开始卸载 xiaoya-aliyuntvtoken_connector${Blue} $i ${Font}\\r\"\n        sleep 1\n    done\n    docker stop xiaoya-aliyuntvtoken_connector\n    docker rm xiaoya-aliyuntvtoken_connector\n    docker rmi ddsderek/xiaoya-glue:aliyuntvtoken_connector\n\n    local xiaoya_name config_dir\n    xiaoya_name=\"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n    if docker container inspect \"${xiaoya_name}\" > /dev/null 2>&1; then\n        config_dir=\"$(docker inspect -f '{{ range .Mounts }}{{ if eq .Destination \"/data\" }}{{ .Source }}{{ end }}{{ end }}' \"${xiaoya_name}\")\"\n    elif [ -f \"${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt\" ]; then\n        config_dir=\"$(cat ${DDSREM_CONFIG_DIR}/xiaoya_alist_config_dir.txt)\"\n    else\n        get_config_dir\n        config_dir=\"${CONFIG_DIR}\"\n    fi\n    INFO \"小雅容器配置目录：${config_dir}\"\n\n    if [[ ${USE_TV_TOKEN} == [Yy] ]]; then\n        rm -f \"${config_dir}/open_tv_token_url.txt\"\n        rm -f \"${config_dir}/myopentoken.txt\"\n        while true; do\n            INFO \"是否配置阿里云盘 Open Token（myopentoken文件） [Y/n]（默认 y）\"\n            read -erp \"Set_Open_Token:\" SET_OPEN_TOKEN\n            [[ -z \"${SET_OPEN_TOKEN}\" ]] && SET_OPEN_TOKEN=\"y\"\n            if [[ ${SET_OPEN_TOKEN} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${SET_OPEN_TOKEN} == [Yy] ]]; then\n            settings_aliyunpan_opentoken \"${config_dir}\" force\n        fi\n    else\n        INFO \"切换使用公共鉴权接口：https://www.voicehub.top/api/v1/oauth/alipan/token\"\n        echo \"https://www.voicehub.top/api/v1/oauth/alipan/token\" > \"${config_dir}/open_tv_token_url.txt\"\n    fi\n\n    if docker container inspect \"${xiaoya_name}\" > /dev/null 2>&1; then\n        docker restart \"${xiaoya_name}\"\n        sleep 5\n        wait_xiaoya_start\n    fi\n\n    INFO \"xiaoya-aliyuntvtoken_connector 卸载成功！\"\n\n}\n\nfunction main_xiaoya_aliyuntvtoken_connector() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}阿里云盘 TV Token 令牌刷新接口（xiaoya-aliyuntvtoken_connector）${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、更新\"\n    echo -e \"3、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-3]:\" num\n    case \"$num\" in\n    1)\n        clear\n        get_config_dir\n        install_xiaoya_aliyuntvtoken_connector \"${CONFIG_DIR}\"\n        return_menu \"main_xiaoya_aliyuntvtoken_connector\"\n        ;;\n    2)\n        clear\n        update_xiaoya_aliyuntvtoken_connector\n        return_menu \"main_xiaoya_aliyuntvtoken_connector\"\n        ;;\n    3)\n        clear\n        uninstall_xiaoya_aliyuntvtoken_connector\n        return_menu \"main_xiaoya_aliyuntvtoken_connector\"\n        ;;\n    0)\n        clear\n        main_other_tools\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-3]'\n        main_xiaoya_aliyuntvtoken_connector\n        ;;\n    esac\n\n}\n\nfunction main_docker_compose() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}Docker Compose 小雅及全家桶${Font}\\n\"\n    echo -e \"${Sky_Blue}Docker Compose 安装方式由 https://link.monlor.com/ 更新维护，在此表示感谢！\"\n    echo -e \"具体详细介绍请看项目README：https://github.com/monlor/docker-xiaoya${Font}\\n\"\n    echo -e \"1、安装\"\n    echo -e \"2、卸载\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-2]:\" num\n    case \"$num\" in\n    1)\n        clear\n        while true; do\n            INFO \"是否使用加速源 [Y/n]（默认 N）\"\n            read -erp \"USE_PROXY:\" USE_PROXY\n            [[ -z \"${USE_PROXY}\" ]] && USE_PROXY=\"n\"\n            if [[ ${USE_PROXY} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${USE_PROXY} == [Yy] ]]; then\n            export GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com\n        fi\n        bash -c \"$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/main/install.sh)\"\n        return_menu \"main_docker_compose\"\n        ;;\n    2)\n        clear\n        while true; do\n            INFO \"是否使用加速源 [Y/n]（默认 N）\"\n            read -erp \"USE_PROXY:\" USE_PROXY\n            [[ -z \"${USE_PROXY}\" ]] && USE_PROXY=\"n\"\n            if [[ ${USE_PROXY} == [YyNn] ]]; then\n                break\n            else\n                ERROR \"非法输入，请输入 [Y/n]\"\n            fi\n        done\n        if [[ ${USE_PROXY} == [Yy] ]]; then\n            export GH_PROXY=https://gh.monlor.com/ IMAGE_PROXY=ghcr.monlor.com\n        fi\n        bash -c \"$(curl -fsSL ${GH_PROXY}https://raw.githubusercontent.com/monlor/docker-xiaoya/main/uninstall.sh)\"\n        return_menu \"main_docker_compose\"\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-2]'\n        main_docker_compose\n        ;;\n    esac\n\n}\n\nfunction init_container_name() {\n\n    if [ ! -d ${DDSREM_CONFIG_DIR}/container_name ]; then\n        mkdir -p ${DDSREM_CONFIG_DIR}/container_name\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt ]; then\n        xiaoya_alist_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\n    else\n        echo 'xiaoya' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt\n        xiaoya_alist_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt ]; then\n        xiaoya_emby_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\n    else\n        echo 'emby' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt\n        xiaoya_emby_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_emby_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_jellyfin_name.txt ]; then\n        xiaoya_jellyfin_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_jellyfin_name.txt)\n    else\n        echo 'jellyfin' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_jellyfin_name.txt\n        xiaoya_jellyfin_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_jellyfin_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_resilio_name.txt ]; then\n        xiaoya_resilio_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_resilio_name.txt)\n    else\n        echo 'resilio' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_resilio_name.txt\n        xiaoya_resilio_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_resilio_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt ]; then\n        xiaoya_tvbox_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\n    else\n        echo 'xiaoya-tvbox' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt\n        xiaoya_tvbox_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_tvbox_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/xiaoya_onelist_name.txt ]; then\n        xiaoya_onelist_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_onelist_name.txt)\n    else\n        echo 'onelist' > ${DDSREM_CONFIG_DIR}/container_name/xiaoya_onelist_name.txt\n        xiaoya_onelist_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_onelist_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/portainer_name.txt ]; then\n        portainer_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/portainer_name.txt)\n    else\n        echo 'portainer' > ${DDSREM_CONFIG_DIR}/container_name/portainer_name.txt\n        portainer_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/portainer_name.txt)\n    fi\n\n    if [ -f ${DDSREM_CONFIG_DIR}/container_name/auto_symlink_name.txt ]; then\n        auto_symlink_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/auto_symlink_name.txt)\n    else\n        echo 'auto_symlink' > ${DDSREM_CONFIG_DIR}/container_name/auto_symlink_name.txt\n        auto_symlink_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/auto_symlink_name.txt)\n    fi\n\n}\n\nfunction change_container_name() {\n\n    INFO \"请输入新的容器名称\"\n    read -erp \"Container name:\" container_name\n    [[ -z \"${container_name}\" ]] && container_name=$(cat ${DDSREM_CONFIG_DIR}/container_name/\"${1}\".txt)\n    echo \"${container_name}\" > ${DDSREM_CONFIG_DIR}/container_name/\"${1}\".txt\n    clear\n    container_name_settings\n\n}\n\nfunction container_name_settings() {\n\n    init_container_name\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}容器名称设置${Font}\\n\"\n    echo -e \"1、更改 小雅 容器名                 （当前：${Green}${xiaoya_alist_name}${Font}）\"\n    echo -e \"2、更改 小雅Emby 容器名             （当前：${Green}${xiaoya_emby_name}${Font}）\"\n    echo -e \"3、更改 Resilio 容器名              （当前：${Green}${xiaoya_resilio_name}${Font}）\"\n    echo -e \"4、更改 小雅Alist-TVBox 容器名      （当前：${Green}${xiaoya_tvbox_name}${Font}）\"\n    echo -e \"5、更改 Onelist 容器名              （当前：${Green}${xiaoya_onelist_name}${Font}）\"\n    echo -e \"6、更改 Portainer 容器名            （当前：${Green}${portainer_name}${Font}）\"\n    echo -e \"7、更改 Auto_Symlink 容器名         （当前：${Green}${auto_symlink_name}${Font}）\"\n    echo -e \"8、更改 Jellyfin 容器名             （当前：${Green}${xiaoya_jellyfin_name}${Font}）\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-8]:\" num\n    case \"$num\" in\n    1)\n        change_container_name \"xiaoya_alist_name\"\n        ;;\n    2)\n        change_container_name \"xiaoya_emby_name\"\n        ;;\n    3)\n        change_container_name \"xiaoya_resilio_name\"\n        ;;\n    4)\n        change_container_name \"xiaoya_tvbox_name\"\n        ;;\n    5)\n        change_container_name \"xiaoya_onelist_name\"\n        ;;\n    6)\n        change_container_name \"portainer_name\"\n        ;;\n    7)\n        change_container_name \"auto_symlink_name\"\n        ;;\n    8)\n        change_container_name \"xiaoya_jellyfin_name\"\n        ;;\n    0)\n        clear\n        main_advanced_configuration\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-8]'\n        container_name_settings\n        ;;\n    esac\n\n}\n\nfunction reset_script_configuration() {\n\n    INFO \"是否${Red}删除所有脚本配置文件${Font} [Y/n]（默认 Y 删除）\"\n    read -erp \"Clean config:\" CLEAN_CONFIG\n    [[ -z \"${CLEAN_CONFIG}\" ]] && CLEAN_CONFIG=\"y\"\n\n    if [[ ${CLEAN_CONFIG} == [Yy] ]]; then\n        for i in $(seq -w 3 -1 0); do\n            echo -en \"即将开始清理配置文件${Blue} $i ${Font}\\r\"\n            sleep 1\n        done\n        FILES_TO_REMOVE=(\n            \"xiaoya_alist_tvbox_config_dir.txt\"\n            \"xiaoya_alist_media_dir.txt\"\n            \"xiaoya_alist_config_dir.txt\"\n            \"resilio_config_dir.txt\"\n            \"portainer_config_dir.txt\"\n            \"onelist_config_dir.txt\"\n            \"container_run_extra_parameters.txt\"\n            \"auto_symlink_config_dir.txt\"\n            \"data_downloader.txt\"\n            \"disk_capacity_detection.txt\"\n            \"xiaoya_connectivity_detection.txt\"\n            \"image_mirror.txt\"\n            \"image_mirror_user.txt\"\n            \"default_network.txt\"\n        )\n        for file in \"${FILES_TO_REMOVE[@]}\"; do\n            rm -f ${DDSREM_CONFIG_DIR}/$file\n        done\n        rm -rf \\\n            ${DDSREM_CONFIG_DIR}/container_name \\\n            ${DDSREM_CONFIG_DIR}/data_crep\n        INFO \"清理完成！\"\n\n        for i in $(seq -w 3 -1 0); do\n            echo -en \"即将返回主界面并重新生成默认配置${Blue} $i ${Font}\\r\"\n            sleep 1\n        done\n\n        first_init\n        clear\n        main_return\n    else\n        return 0\n    fi\n\n}\n\nfunction main_advanced_configuration() {\n\n    __container_run_extra_parameters=$(cat ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt)\n    if [ \"${__container_run_extra_parameters}\" == \"true\" ]; then\n        _container_run_extra_parameters=\"${Green}开启${Font}\"\n    elif [ \"${__container_run_extra_parameters}\" == \"false\" ]; then\n        _container_run_extra_parameters=\"${Red}关闭${Font}\"\n    else\n        _container_run_extra_parameters=\"${Red}错误${Font}\"\n    fi\n\n    __disk_capacity_detection=$(cat ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt)\n    if [ \"${__disk_capacity_detection}\" == \"true\" ]; then\n        _disk_capacity_detection=\"${Green}开启${Font}\"\n    elif [ \"${__disk_capacity_detection}\" == \"false\" ]; then\n        _disk_capacity_detection=\"${Red}关闭${Font}\"\n    else\n        _disk_capacity_detection=\"${Red}错误${Font}\"\n    fi\n\n    __xiaoya_connectivity_detection=$(cat ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt)\n    if [ \"${__xiaoya_connectivity_detection}\" == \"true\" ]; then\n        _xiaoya_connectivity_detection=\"${Green}开启${Font}\"\n    elif [ \"${__xiaoya_connectivity_detection}\" == \"false\" ]; then\n        _xiaoya_connectivity_detection=\"${Red}关闭${Font}\"\n    else\n        _xiaoya_connectivity_detection=\"${Red}错误${Font}\"\n    fi\n\n    _default_network=$(cat \"${DDSREM_CONFIG_DIR}/default_network.txt\")\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}高级配置${Font}\\n\"\n    echo -e \"1、容器名称设置\"\n    echo -e \"2、开启/关闭 容器运行额外参数添加             当前状态：${_container_run_extra_parameters}\"\n    echo -e \"3、重置脚本配置\"\n    echo -e \"4、开启/关闭 磁盘容量检测                     当前状态：${_disk_capacity_detection}\"\n    echo -e \"5、开启/关闭 小雅连通性检测                   当前状态：${_xiaoya_connectivity_detection}\"\n    echo -e \"6、Docker镜像源选择\"\n    echo -e \"7、非可选网络模式容器默认网络模式             当前状态：${Blue}${_default_network}${Font}\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-7]:\" num\n    case \"$num\" in\n    1)\n        clear\n        container_name_settings\n        ;;\n    2)\n        if [ \"${__container_run_extra_parameters}\" == \"false\" ]; then\n            echo 'true' > ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt\n        else\n            echo 'false' > ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt\n        fi\n        clear\n        main_advanced_configuration\n        ;;\n    3)\n        clear\n        reset_script_configuration\n        return_menu \"main_advanced_configuration\"\n        ;;\n    4)\n        if [ \"${__disk_capacity_detection}\" == \"true\" ]; then\n            echo 'false' > ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt\n        elif [ \"${__disk_capacity_detection}\" == \"false\" ]; then\n            echo 'true' > ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt\n        else\n            echo 'true' > ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt\n        fi\n        clear\n        main_advanced_configuration\n        ;;\n    5)\n        if [ \"${__xiaoya_connectivity_detection}\" == \"true\" ]; then\n            echo 'false' > ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt\n        elif [ \"${__xiaoya_connectivity_detection}\" == \"false\" ]; then\n            echo 'true' > ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt\n        else\n            echo 'true' > ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt\n        fi\n        clear\n        main_advanced_configuration\n        ;;\n    6)\n        clear\n        choose_image_mirror \"main_advanced_configuration\"\n        ;;\n    7)\n        if [ \"${_default_network}\" == \"host\" ]; then\n            echo 'bridge' > ${DDSREM_CONFIG_DIR}/default_network.txt\n        elif [ \"${_default_network}\" == \"bridge\" ]; then\n            echo 'host' > ${DDSREM_CONFIG_DIR}/default_network.txt\n        else\n            echo 'host' > ${DDSREM_CONFIG_DIR}/default_network.txt\n        fi\n        clear\n        main_advanced_configuration\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-7]'\n        main_advanced_configuration\n        ;;\n    esac\n\n}\n\nfunction main_other_tools() {\n\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    echo -e \"${Blue}其他工具${Font}\\n\"\n    echo -ne \"${INFO} 界面加载中...${Font}\\r\"\n    echo -e \"1、安装/更新/卸载 Portainer                       当前状态：$(judgment_container \"${portainer_name}\")\n2、安装/更新/卸载 Auto_Symlink                    当前状态：$(judgment_container \"${auto_symlink_name}\")\n3、安装/更新/卸载 Onelist                         当前状态：$(judgment_container \"${xiaoya_onelist_name}\")\n4、安装/更新/卸载 Xiaoya Proxy                    当前状态：$(judgment_container xiaoya-proxy)\n5、安装/更新/卸载 Xiaoya aliyuntvtoken_connector  当前状态：$(judgment_container xiaoya-aliyuntvtoken_connector)\"\n    echo -e \"6、查看系统磁盘挂载\"\n    echo -e \"7、安装/卸载 CasaOS\"\n    echo -e \"8、AI老G 安装脚本\"\n    echo -e \"0、返回上级\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-8]:\" num\n    case \"$num\" in\n    1)\n        clear\n        main_portainer\n        ;;\n    2)\n        clear\n        main_auto_symlink\n        ;;\n    3)\n        clear\n        main_onelist\n        ;;\n    4)\n        clear\n        main_xiaoya_proxy\n        ;;\n    5)\n        clear\n        main_xiaoya_aliyuntvtoken_connector\n        ;;\n    6)\n        clear\n        INFO \"系统磁盘挂载情况:\"\n        show_disk_mount\n        INFO \"按任意键返回菜单\"\n        read -rs -n 1 -p \"\"\n        clear\n        main_other_tools\n        ;;\n    7)\n        clear\n        main_casaos\n        ;;\n    8)\n        clear\n        bash <(curl -sSLf https://xy.ggbond.org/xy/xy_install.sh)\n        ;;\n    0)\n        clear\n        main_return\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-8]'\n        main_other_tools\n        ;;\n    esac\n\n}\n\nfunction main_return() {\n\n    local out_tips\n    cat /tmp/xiaoya_alist\n    echo -ne \"${INFO} 主界面加载中...${Font}\\r\"\n    if ! curl -s -o /dev/null -m 4 -w '%{time_total}' --head --request GET \"$(cat \"${DDSREM_CONFIG_DIR}/image_mirror.txt\")\" &> /dev/null; then\n        if auto_choose_image_mirror; then\n            out_tips=\"${Green}提示：已为您自动配置Docker镜像源地址为: $(cat \"${DDSREM_CONFIG_DIR}/image_mirror.txt\")${Font}\\n\"\n        else\n            out_tips=\"${Red}警告：当前环境无法访问Docker镜像仓库，请输入96进入Docker镜像源设置更改镜像源${Font}\\n\"\n        fi\n    fi\n    # shellcheck disable=SC2154\n    echo -e \"${out_tips}1、安装/更新/卸载 小雅Alist & 账号管理        当前状态：$(judgment_container \"${xiaoya_alist_name}\")\n2、安装/更新/卸载 小雅Emby全家桶              当前状态：$(judgment_container \"${xiaoya_emby_name}\")\n3、安装/卸载 小雅Jellyfin全家桶（已弃用）     当前状态：$(judgment_container \"${xiaoya_jellyfin_name}\")\n4、安装/更新/卸载 小雅助手（xiaoyahelper）    当前状态：$(judgment_container xiaoyakeeper)\n5、安装/更新/卸载 小雅Alist-TVBox（非原版）   当前状态：$(judgment_container \"${xiaoya_tvbox_name}\")\n6、安装/更新/卸载 115清理助手                 当前状态：$(judgment_container xiaoya-115cleaner)\n7、Docker Compose 安装/卸载 小雅及全家桶（实验性功能）\n8、其他工具 | Script info: ${DATE_VERSION} OS: ${_os},${OSNAME},${is64bit}\n9、高级配置 | Docker version: ${Blue}${DOCKER_VERSION}${Font} ${IP_CITY}\n0、退出脚本 | Thanks: ${Sky_Blue}heiheigui,xiaoyaLiu,Harold,AI老G,monlor,Rik${Font}\n——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-9]:\" num\n    case \"$num\" in\n    1)\n        clear\n        main_xiaoya_alist\n        ;;\n    2)\n        clear\n        main_xiaoya_all_emby\n        ;;\n    3)\n        clear\n        main_xiaoya_all_jellyfin\n        ;;\n    4)\n        clear\n        main_xiaoyahelper\n        ;;\n    5)\n        clear\n        main_xiaoya_alist_tvbox\n        ;;\n    6)\n        clear\n        main_xiaoya_115_cleaner\n        ;;\n    7)\n        clear\n        main_docker_compose\n        ;;\n    8)\n        clear\n        main_other_tools\n        ;;\n    9)\n        clear\n        main_advanced_configuration\n        ;;\n    96)\n        clear\n        choose_image_mirror \"main_return\"\n        ;;\n    fuckaliyun)\n        clear\n        INFO \"AliyunPan ありがとう、あなたのせいで世界は爆発する\"\n        config_dir=\"$(docker inspect --format='{{range $v,$conf := .Mounts}}{{$conf.Source}}:{{$conf.Destination}}{{$conf.Type}}~{{end}}' \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\" | tr '~' '\\n' | grep bind | sed 's/bind//g' | grep \":/data$\" | awk -F: '{print $1}')\"\n        if [ -n \"${config_dir}\" ]; then\n            qrcode_aliyunpan_tvtoken \"${config_dir}\"\n            if ! docker container inspect xiaoya-aliyuntvtoken_connector > /dev/null 2>&1; then\n                while true; do\n                    INFO \"是否自建阿里云盘 TV Token 令牌刷新接口 [Y/n]（默认 Y）\"\n                    read -erp \"INSTALL_TVTOKEN:\" INSTALL_TVTOKEN\n                    [[ -z \"${INSTALL_TVTOKEN}\" ]] && INSTALL_TVTOKEN=\"Y\"\n                    if [[ ${INSTALL_TVTOKEN} == [YyNn] ]]; then\n                        break\n                    else\n                        ERROR \"非法输入，请输入 [Y/n]\"\n                    fi\n                done\n                if [[ ${INSTALL_TVTOKEN} == [Yy] ]]; then\n                    install_xiaoya_aliyuntvtoken_connector \"${config_dir}\"\n                else\n                    WARN \"请手动配置 ${CONFIG_DIR}/open_tv_token_url.txt 文件，内容为 TV Token 令牌刷新接口地址\"\n                    WARN \"配置完成请手动重启小雅容器！\"\n                fi\n            else\n                INFO \"开始更新小雅容器...\"\n                container_update \"$(cat ${DDSREM_CONFIG_DIR}/container_name/xiaoya_alist_name.txt)\"\n            fi\n        else\n            ERROR \"小雅配置文件目录获取失败咯！请检查小雅容器是否已创建！\"\n            exit 1\n        fi\n        return_menu \"main_return\"\n        ;;\n    0)\n        clear\n        exit 0\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-9]'\n        main_return\n        ;;\n    esac\n}\n\nfunction first_init() {\n\n    INFO \"获取系统信息中...\"\n    get_os\n\n    if [ -f /tmp/run_xiaoya_install_user.txt ]; then\n        INFO \"运行脚本的用户：$(head -n 1 /tmp/run_xiaoya_install_user.txt)\"\n        RUN_USER=\"$(head -n 1 /tmp/run_xiaoya_install_user.txt)\"\n        GLOBAL_PUID=\"$(id -u \"${RUN_USER}\")\"\n        GLOBAL_PGID=\"$(id -g \"${RUN_USER}\")\"\n    fi\n\n    INFO \"获取 IP 地址中...\"\n    CITY=\"$(curl -fsSL -m 10 -s http://ipinfo.io/json | sed -n 's/.*\"city\": *\"\\([^\"]*\\)\".*/\\1/p')\"\n    if [ -n \"${CITY}\" ]; then\n        IP_CITY=\"IP City: ${Yellow}${CITY}${Font}\"\n        INFO \"获取 IP 地址成功！\"\n    fi\n\n    INFO \"检查 Docker 版本\"\n    DOCKER_VERSION=\"$(docker -v | sed \"s/Docker version //g\" | cut -d',' -f1)\"\n\n    if [ ! -d ${DDSREM_CONFIG_DIR} ]; then\n        mkdir -p ${DDSREM_CONFIG_DIR}\n    fi\n    # Fix https://github.com/xiaoyaDev/xiaoya-alist/commit/a246bc582393b618b564e3beca2b9e1d40800a5d 中media目录保存错误\n    if [ -f /xiaoya_alist_media_dir.txt ]; then\n        mv /xiaoya_alist_media_dir.txt ${DDSREM_CONFIG_DIR}\n    fi\n    INFO \"初始化容器名称中...\"\n    init_container_name\n\n    if [ ! -f ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt ]; then\n        echo 'false' > ${DDSREM_CONFIG_DIR}/container_run_extra_parameters.txt\n    fi\n\n    if [ ! -d \"${DDSREM_CONFIG_DIR}/data_crep\" ]; then\n        mkdir -p \"${DDSREM_CONFIG_DIR}/data_crep\"\n    fi\n\n    if [ ! -d \"${DDSREM_CONFIG_DIR}/cache_data\" ]; then\n        mkdir -p \"${DDSREM_CONFIG_DIR}/cache_data\"\n    fi\n\n    if [ ! -f ${DDSREM_CONFIG_DIR}/data_downloader.txt ]; then\n        if [ \"$OSNAME\" = \"ugos\" ] || [ \"$OSNAME\" = \"ugos pro\" ]; then\n            echo 'wget' > ${DDSREM_CONFIG_DIR}/data_downloader.txt\n        else\n            echo 'aria2' > ${DDSREM_CONFIG_DIR}/data_downloader.txt\n        fi\n    fi\n\n    if [ ! -f ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt ]; then\n        echo 'true' > ${DDSREM_CONFIG_DIR}/disk_capacity_detection.txt\n    fi\n\n    if [ ! -f ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt ]; then\n        echo 'true' > ${DDSREM_CONFIG_DIR}/xiaoya_connectivity_detection.txt\n    fi\n\n    if [ ! -f \"${DDSREM_CONFIG_DIR}/default_network.txt\" ]; then\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            echo 'bridge' > \"${DDSREM_CONFIG_DIR}/default_network.txt\"\n        else\n            echo 'host' > \"${DDSREM_CONFIG_DIR}/default_network.txt\"\n        fi\n    fi\n\n    INFO \"设置 Docker 镜像源中...\"\n    if [ ! -f \"${DDSREM_CONFIG_DIR}/image_mirror.txt\" ]; then\n        if ! auto_choose_image_mirror; then\n            echo 'docker.io' > ${DDSREM_CONFIG_DIR}/image_mirror.txt\n        fi\n    fi\n    if [ ! -f \"${DDSREM_CONFIG_DIR}/image_mirror_user.txt\" ]; then\n        touch ${DDSREM_CONFIG_DIR}/image_mirror_user.txt\n    fi\n\n    INFO \"清理旧配置文件中...\"\n    if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_emby_url.txt ]; then\n        rm -rf ${DDSREM_CONFIG_DIR}/xiaoya_emby_url.txt\n    fi\n    if [ -f ${DDSREM_CONFIG_DIR}/xiaoya_emby_api.txt ]; then\n        rm -rf ${DDSREM_CONFIG_DIR}/xiaoya_emby_api.txt\n    fi\n\n    if [ ! -f \"${DDSREM_CONFIG_DIR}/勿删_小雅周边脚本配置目录\" ]; then\n        touch \"${DDSREM_CONFIG_DIR}/勿删_小雅周边脚本配置目录\"\n    fi\n\n    if [ -f /tmp/xiaoya_alist ]; then\n        rm -rf /tmp/xiaoya_alist\n    fi\n    if ! curl -sL https://ddsrem.com/xiaoya/xiaoya_alist -o /tmp/xiaoya_alist; then\n        if ! curl -sL https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/xiaoya_alist -o /tmp/xiaoya_alist; then\n            curl -sL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/xiaoya_alist -o /tmp/xiaoya_alist\n            if ! grep -q 'alias xiaoya' /etc/profile; then\n                echo -e \"alias xiaoya='bash -c \\\"\\$(curl -sLk https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/xiaoya_alist)\\\"'\" >> /etc/profile\n            fi\n        else\n            if ! grep -q 'alias xiaoya' /etc/profile; then\n                echo -e \"alias xiaoya='bash -c \\\"\\$(curl -sLk https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/xiaoya_alist)\\\"'\" >> /etc/profile\n            fi\n        fi\n    else\n        if ! grep -q 'alias xiaoya' /etc/profile; then\n            echo -e \"alias xiaoya='bash -c \\\"\\$(curl -sLk https://ddsrem.com/xiaoya_install.sh)\\\"'\" >> /etc/profile\n        fi\n    fi\n    # 兼容仓库迁移\n    if grep -q 'DDS-Derek/xiaoya-alist' /etc/profile; then\n        sedsh 's/DDS-Derek\\/xiaoya-alist/xiaoyaDev\\/xiaoya-alist/g' /etc/profile\n    fi\n    INFO \"初始化完成！\"\n    sleep 1\n\n}\n\nfunction root_need() {\n    if [[ $EUID -ne 0 ]] && [ \"$(uname -s)\" != \"Darwin\" ]; then\n        ERROR '此脚本必须以 root 身份运行！'\n        exit 1\n    fi\n    if [ $EUID == 0 ] && [ \"$(uname -s)\" == \"Darwin\" ]; then\n        ERROR 'MacOS 运行脚本必须使用非 root 身份运行，脚本会自动提权！'\n        exit 1\n    fi\n}\n\nclear\nINFO \"初始化中，请稍等....\"\nroot_need\nif [ \"$(uname -s)\" == \"Darwin\" ]; then\n    if ! command -v brew; then\n        WARN \"brew 未安装，脚本尝试自动安装...\"\n        if /bin/zsh -c \"$(curl -fsSL https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh)\"; then\n            INFO \"brew 安装成功！\"\n        else\n            ERROR \"brew 安装失败，请手动安装！\"\n            exit 1\n        fi\n    fi\n    if ! command -v 7z; then\n        WARN \"p7zip 未安装，脚本尝试自动安装...\"\n        if brew install p7zip; then\n            INFO \"p7zip 安装成功！\"\n        else\n            ERROR \"p7zip 安装失败，请手动安装！\"\n            exit 1\n        fi\n    fi\n    if ! command -v docker; then\n        ERROR \"docker 未安装，请手动安装！\"\n        exit 1\n    fi\n    if [[ $EUID -ne 0 ]]; then\n        if [ -f /tmp/xiaoya_install.sh ]; then\n            rm -rf /tmp/xiaoya_install.sh\n        fi\n        if [ -f /tmp/run_xiaoya_install_user.txt ]; then\n            rm -rf /tmp/run_xiaoya_install_user.txt\n        fi\n        if ! curl -sL https://ddsrem.com/xiaoya/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n            if ! curl -sL https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n                if ! curl -sL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n                    ERROR \"脚本获取失败！\"\n                    exit 1\n                fi\n            fi\n        fi\n        INFO \"脚本获取成功！\"\n        sed -i '' '/^root_need$/d' /tmp/xiaoya_install.sh\n        who | sed -n \"2,1p\" | awk '{print $1}' > /tmp/run_xiaoya_install_user.txt\n        # shellcheck disable=SC2068\n        if ! sudo bash /tmp/xiaoya_install.sh $@; then\n            exit 1\n        fi\n        exit 0\n    fi\nfi\nif [ ! -d \"/tmp/xiaoya_alist_tmp\" ]; then\n    mkdir -p /tmp/xiaoya_alist_tmp\nfi\nfor file in \"base\" \"image_mirror\" \"auto_symlink\" \"jellyfin\" \"portainer\" \"onelist\" \"casaos\" \"deprecation\"; do\n    if ! curl -sSLf \"https://gitee.com/ddsrem/xiaoya-alist-base/raw/master/${file}.sh\" -o \"/tmp/xiaoya_alist_tmp/${file}.sh\"; then\n        ERROR \"${file} 基础库获取失败！\"\n        ERROR \"请检查是否能访问 gitee.com！\"\n        exit 1\n    else\n        source \"/tmp/xiaoya_alist_tmp/${file}.sh\"\n        rm -f \"/tmp/xiaoya_alist_tmp/${file}.sh\"\n        INFO \"${file} 基础库加载成功！\"\n    fi\ndone\nrm -rf /tmp/xiaoya_alist_tmp\nfirst_init\nclear\nif [ ! \"$*\" ]; then\n    main_return\nelse\n    \"$@\"\nfi\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "cron",
          "type": "tree",
          "content": null
        },
        {
          "name": "emby_config_editor.sh",
          "type": "blob",
          "size": 7.701171875,
          "content": "#!/bin/bash\n# shellcheck shell=bash\nPATH=${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin:/opt/homebrew/bin\nexport PATH\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n# __   ___                                    _ _     _\n# \\ \\ / (_)                             /\\   | (_)   | |\n#  \\ V / _  __ _  ___  _   _  __ _     /  \\  | |_ ___| |_\n#   > < | |/ _` |/ _ \\| | | |/ _` |   / /\\ \\ | | / __| __|\n#  / . \\| | (_| | (_) | |_| | (_| |  / ____ \\| | \\__ \\ |_\n# /_/ \\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/    \\_\\_|_|___/\\__|\n#                       __/ |\n#                      |___/\n#\n# Copyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n#\n# This is free software, licensed under the GNU General Public License v3.0.\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n#\nDATE_VERSION=\"v1.0.2-2024_04_13_20_37\"\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n\nSky_Blue=\"\\e[36m\"\nBlue=\"\\033[34m\"\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nYellow='\\033[33m'\nFont=\"\\033[0m\"\nINFO=\"[${Green}INFO${Font}]\"\nERROR=\"[${Red}ERROR${Font}]\"\nWARN=\"[${Yellow}WARN${Font}]\"\nfunction INFO() {\n    echo -e \"${INFO} ${1}\"\n}\nfunction ERROR() {\n    echo -e \"${ERROR} ${1}\"\n}\nfunction WARN() {\n    echo -e \"${WARN} ${1}\"\n}\n\nfunction sedsh() {\n\n    if [[ \"$(uname -s)\" = \"Darwin\" ]]; then\n        sed -i '' \"$@\"\n    else\n        sed -i \"$@\"\n    fi\n\n}\n\nfunction get_dev_dri() {\n\n    if [ \"${dev_dri}\" == \"no\" ]; then\n        echo -e \"${Red}关闭${Font}\"\n    elif [ \"${dev_dri}\" == \"yes\" ]; then\n        echo -e \"${Green}开启${Font}\"\n    else\n        echo -e \"${Red}错误${Font}\"\n    fi\n\n}\n\nfunction set_dev_dri() {\n\n    if [ \"${dev_dri}\" == \"no\" ]; then\n        new_dev_dri=yes\n    elif [ \"${dev_dri}\" == \"yes\" ]; then\n        new_dev_dri=no\n    else\n        new_dev_dri=no\n    fi\n\n    sedsh \"s/dev_dri=.*/dev_dri=${new_dev_dri}/\" \"${config_dir}/emby_config.txt\"\n\n}\n\nfunction set_mode() {\n\n    if [ \"${mode}\" == \"bridge\" ]; then\n        new_mode=host\n    elif [ \"${mode}\" == \"host\" ]; then\n        new_mode=bridge\n    else\n        new_mode=host\n    fi\n\n    sedsh \"s/mode=.*/mode=${new_mode}/\" \"${config_dir}/emby_config.txt\"\n\n}\n\nfunction set_image() {\n\n    if [ \"${image}\" == \"emby\" ]; then\n        new_image=amilys\n    elif [ \"${image}\" == \"amilys\" ]; then\n        new_image=emby\n    else\n        new_image=emby\n    fi\n\n    sedsh \"s/image=.*/image=${new_image}/\" \"${config_dir}/emby_config.txt\"\n\n}\n\nfunction set_version() {\n\n    if [ \"${version}\" == \"4.8.9.0\" ]; then\n        new_version=latest\n    elif [ \"${version}\" == \"latest\" ]; then\n        new_version=4.8.9.0\n    else\n        new_version=4.8.9.0\n    fi\n\n    sedsh \"s/version=.*/version=${new_version}/\" \"${config_dir}/emby_config.txt\"\n\n}\n\nfunction get_media_dir() {\n\n    if [ \"$media_dir\" != \"\" ]; then\n        OLD_MEDIA_DIR=${media_dir}\n        INFO \"已读取媒体库目录：${OLD_MEDIA_DIR} (默认不更改回车继续，如果需要更改请输入新路径)\"\n        read -erp \"MEDIA_DIR:\" MEDIA_DIR\n        [[ -z \"${MEDIA_DIR}\" ]] && MEDIA_DIR=${OLD_MEDIA_DIR}\n        sedsh \"s#media_dir=.*#media_dir=${MEDIA_DIR}#\" \"${config_dir}/emby_config.txt\"\n    else\n        INFO \"请输入媒体库目录（默认 /media ）\"\n        read -erp \"MEDIA_DIR:\" MEDIA_DIR\n        [[ -z \"${MEDIA_DIR}\" ]] && MEDIA_DIR=\"/media\"\n        sedsh \"s#media_dir=.*#media_dir=${MEDIA_DIR}#\" \"${config_dir}/emby_config.txt\"\n    fi\n\n}\n\nfunction get_resilio() {\n\n    if [ \"${resilio}\" == \"no\" ]; then\n        echo -e \"${Red}否${Font}\"\n    elif [ \"${resilio}\" == \"yes\" ]; then\n        echo -e \"${Green}是${Font}\"\n    else\n        echo -e \"${Red}错误${Font}\"\n    fi\n\n}\n\nfunction set_resilio() {\n\n    if [ \"${resilio}\" == \"no\" ]; then\n        new_resilio=yes\n    elif [ \"${resilio}\" == \"yes\" ]; then\n        new_resilio=no\n    else\n        new_resilio=no\n    fi\n\n    sedsh \"s/resilio=.*/resilio=${new_resilio}/\" \"${config_dir}/emby_config.txt\"\n\n}\n\nfunction main_return() {\n\n    # shellcheck disable=SC1091\n    source \"${config_dir}/emby_config.txt\"\n\n    cat /tmp/xiaoya_alist\n\n    echo -e \"1、开启/关闭硬解GPU映射    当前配置：$(get_dev_dri)\"\n    echo -e \"2、Emby容器网络模式        当前配置：${Sky_Blue}${mode}模式${Font}\"\n    echo -e \"3、Emby镜像                当前配置：${Sky_Blue}${image}${Font}\"\n    echo -e \"4、Emby镜像版              当前配置：${Sky_Blue}${version}${Font}\"\n    echo -e \"5、媒体库路径              当前配置：${Sky_Blue}${media_dir}${Font}\"\n    echo -e \"6、是否安装Resilio         当前配置：$(get_resilio)\"\n    echo -e \"0、退出脚本 | Script info: ${DATE_VERSION} Thanks: ${Blue}xiaoyaLiu${Font}\"\n    echo -e \"——————————————————————————————————————————————————————————————————————————————————\"\n    read -erp \"请输入数字 [0-6]:\" num\n    case \"$num\" in\n    1)\n        set_dev_dri\n        clear\n        main_return\n        ;;\n    2)\n        set_mode\n        clear\n        main_return\n        ;;\n    3)\n        set_image\n        clear\n        main_return\n        ;;\n    4)\n        set_version\n        clear\n        main_return\n        ;;\n    5)\n        clear\n        get_media_dir\n        clear\n        main_return\n        ;;\n    6)\n        set_resilio\n        clear\n        main_return\n        ;;\n    0)\n        clear\n        exit 0\n        ;;\n    *)\n        clear\n        ERROR '请输入正确数字 [0-6]'\n        main_return\n        ;;\n    esac\n}\n\nclear\n\nif [[ $EUID -ne 0 ]]; then\n    ERROR '此脚本必须以 root 身份运行！'\n    exit 1\nfi\n\nif [[ \"$(uname -s)\" = \"Darwin\" ]]; then\n    stty -icanon\nfi\n\nif [ ! \"$1\" ]; then\n    ERROR \"未设置xiaoya配置目录\"\n    exit 1\nfi\n\nconfig_dir=${1}\n\nif [ ! -d \"${config_dir}\" ]; then\n    mkdir -p \"${config_dir}\"\nfi\n\nfind \"${config_dir}\" -type f -name \"*.txt\" -exec sed -i \"s/\\r$//g\" {} \\;\n\nif [ ! -s \"${config_dir}/emby_config.txt\" ]; then\n    {\n        echo \"dev_dri=no\"\n        echo \"mode=host\"\n        echo \"image=emby\"\n        echo \"media_dir=\"\n        echo \"resilio=no\"\n        echo \"version=4.8.9.0\"\n    } >> \"${config_dir}/emby_config.txt\"\nelse\n    # shellcheck disable=SC1091\n    source \"${config_dir}/emby_config.txt\"\n    if [ -z \"${dev_dri}\" ]; then\n        echo \"dev_dri=no\" >> \"${config_dir}/emby_config.txt\"\n    fi\n    if [ -z \"${mode}\" ]; then\n        echo \"mode=host\" >> \"${config_dir}/emby_config.txt\"\n    fi\n    if [ -z \"${image}\" ]; then\n        echo \"image=emby\" >> \"${config_dir}/emby_config.txt\"\n    fi\n    if [ -z \"${media_dir}\" ]; then\n        echo \"media_dir=\" >> \"${config_dir}/emby_config.txt\"\n    fi\n    if [ -z \"${resilio}\" ]; then\n        echo \"resilio=no\" >> \"${config_dir}/emby_config.txt\"\n    fi\n    if [ -z \"${version}\" ]; then\n        echo \"version=4.8.9.0\" >> \"${config_dir}/emby_config.txt\"\n    fi\nfi\n\nif [ -f /tmp/xiaoya_alist ]; then\n    rm -rf /tmp/xiaoya_alist\nfi\nif ! curl -sL https://ddsrem.com/xiaoya/xiaoya_alist -o /tmp/xiaoya_alist; then\n    if ! curl -sL https://cdn.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/xiaoya_alist -o /tmp/xiaoya_alist; then\n        curl -sL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/xiaoya_alist -o /tmp/xiaoya_alist\n    fi\nfi\n\nmain_return\n"
        },
        {
          "name": "emby_lovechen",
          "type": "tree",
          "content": null
        },
        {
          "name": "glue_python",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.sh",
          "type": "blob",
          "size": 2.806640625,
          "content": "#!/bin/bash\n# shellcheck shell=bash\nPATH=${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin:/opt/homebrew/bin\nexport PATH\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n# __   ___                                    _ _     _\n# \\ \\ / (_)                             /\\   | (_)   | |\n#  \\ V / _  __ _  ___  _   _  __ _     /  \\  | |_ ___| |_\n#   > < | |/ _` |/ _ \\| | | |/ _` |   / /\\ \\ | | / __| __|\n#  / . \\| | (_| | (_) | |_| | (_| |  / ____ \\| | \\__ \\ |_\n# /_/ \\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/    \\_\\_|_|___/\\__|\n#                       __/ |\n#                      |___/\n#\n# Copyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n#\n# This is free software, licensed under the GNU General Public License v3.0.\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nYellow='\\033[33m'\nFont=\"\\033[0m\"\nINFO=\"[${Green}INFO${Font}]\"\nERROR=\"[${Red}ERROR${Font}]\"\nWARN=\"[${Yellow}WARN${Font}]\"\nfunction INFO() {\n    echo -e \"${INFO} ${1}\"\n}\nfunction ERROR() {\n    echo -e \"${ERROR} ${1}\"\n}\nfunction WARN() {\n    echo -e \"${WARN} ${1}\"\n}\nif [[ $EUID -ne 0 ]] && [ \"$(uname -s)\" != \"Darwin\" ]; then\n    ERROR '此脚本必须以 root 身份运行！'\n    exit 1\nfi\nif [ $EUID == 0 ] && [ \"$(uname -s)\" == \"Darwin\" ]; then\n    ERROR 'MacOS 运行脚本必须使用非 root 身份运行，脚本会自动提权！'\n    exit 1\nfi\nif [ -f /tmp/xiaoya_install.sh ]; then\n    rm -rf /tmp/xiaoya_install.sh\nfi\nif [ -n \"${XIAOYA_BRANCH}\" ]; then\n    if ! curl -sL \"https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@${XIAOYA_BRANCH}/all_in_one.sh\" -o /tmp/xiaoya_install.sh; then\n        if ! curl -sL \"https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/${XIAOYA_BRANCH}/all_in_one.sh\" -o /tmp/xiaoya_install.sh; then\n            ERROR \"脚本获取失败！\"\n            exit 1\n        fi\n    fi\nelse\n    if ! curl -sL https://ddsrem.com/xiaoya/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n        if ! curl -sL https://fastly.jsdelivr.net/gh/xiaoyaDev/xiaoya-alist@latest/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n            if ! curl -sL https://raw.githubusercontent.com/xiaoyaDev/xiaoya-alist/master/all_in_one.sh -o /tmp/xiaoya_install.sh; then\n                ERROR \"脚本获取失败！\"\n                exit 1\n            fi\n        fi\n    fi\nfi\nINFO \"脚本获取成功！\"\n# shellcheck disable=SC2068\nbash /tmp/xiaoya_install.sh $@\nif [ -f /tmp/xiaoya_install.sh ]; then\n    rm -rf /tmp/xiaoya_install.sh\nfi\n"
        },
        {
          "name": "renovate.json",
          "type": "blob",
          "size": 0.111328125,
          "content": "{\n  \"$schema\": \"https://docs.renovatebot.com/renovate-schema.json\",\n  \"extends\": [\n    \"config:recommended\"\n  ]\n}\n"
        },
        {
          "name": "ruff.toml",
          "type": "blob",
          "size": 0.509765625,
          "content": "exclude = [\n    \".bzr\",\n    \".direnv\",\n    \".eggs\",\n    \".git\",\n    \".git-rewrite\",\n    \".hg\",\n    \".ipynb_checkpoints\",\n    \".mypy_cache\",\n    \".nox\",\n    \".pants.d\",\n    \".pyenv\",\n    \".pytest_cache\",\n    \".pytype\",\n    \".ruff_cache\",\n    \".svn\",\n    \".tox\",\n    \".venv\",\n    \".vscode\",\n    \"__pypackages__\",\n    \"_build\",\n    \"buck-out\",\n    \"build\",\n    \"dist\",\n    \"node_modules\",\n    \"site-packages\",\n    \"venv\",\n]\nline-length = 120\ntarget-version = \"py312\"\n\n[lint]\nselect = [\n    \"F\",\n    \"E\",\n    \"W\",\n    \"UP\",\n]\n"
        },
        {
          "name": "xiaoya_alist",
          "type": "blob",
          "size": 0.9306640625,
          "content": "——————————————————————————————————————————————————————————————————————————————————\n__  ___                              _    _ _     _   \n\\ \\/ (_) __ _  ___  _   _  __ _     / \\  | (_)___| |_ \n \\  /| |/ _` |/ _ \\| | | |/ _` |   / _ \\ | | / __| __|\n /  \\| | (_| | (_) | |_| | (_| |  / ___ \\| | \\__ \\ |_ \n/_/\\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/   \\_\\_|_|___/\\__|\n                    |___/                             \n\nCopyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n\nThis is free software, licensed under the GNU General Public License v3.0.\n——————————————————————————————————————————————————————————————————————————————————\n"
        },
        {
          "name": "xiaoya_data_downloader.sh",
          "type": "blob",
          "size": 4.2138671875,
          "content": "#!/bin/bash\n# shellcheck shell=bash\nPATH=${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin:/opt/homebrew/bin\nexport PATH\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n# __   ___                                    _ _     _\n# \\ \\ / (_)                             /\\   | (_)   | |\n#  \\ V / _  __ _  ___  _   _  __ _     /  \\  | |_ ___| |_\n#   > < | |/ _` |/ _ \\| | | |/ _` |   / /\\ \\ | | / __| __|\n#  / . \\| | (_| | (_) | |_| | (_| |  / ____ \\| | \\__ \\ |_\n# /_/ \\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/    \\_\\_|_|___/\\__|\n#                       __/ |\n#                      |___/\n#\n# Copyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n#\n# This is free software, licensed under the GNU General Public License v3.0.\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nFont=\"\\033[0m\"\nINFO=\"[${Green}INFO${Font}]\"\nERROR=\"[${Red}ERROR${Font}]\"\nTime=$(date +\"%Y-%m-%d %T\")\nfunction INFO() {\n    echo -e \"${Time} ${INFO} ${1}\"\n}\nfunction ERROR() {\n    echo -e \"${Time} ${ERROR} ${1}\"\n}\n\n# 弃用此脚本\nif [ -n \"$(date)\" ]; then\n    ERROR \"此脚本已弃用！\"\n    exit 0\nfi\n\nfiles=(tvbox.zip update.zip index.zip)\nbase_urls=(\n    \"https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://cdn.wygg.shop/https://raw.githubusercontent.com/xiaoyaliu00/data/main\"\n    \"https://fastly.jsdelivr.net/gh/xiaoyaliu00/data@latest/\"\n    \"https://521github.com/extdomains/github.com/xiaoyaliu00/data/raw/main/\"\n    \"https://cors.zme.ink/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://git.jasonml.xyz/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://cdn.wygg.shop/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh.ddlc.top/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://git.886.be/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh.idayer.com/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://slink.ltd/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://raw.yzuu.cf/xiaoyaliu00/data/main/\"\n    \"https://raw.nuaa.cf/xiaoyaliu00/data/main/\"\n    \"https://raw.kkgithub.com/xiaoyaliu00/data/main/\"\n    \"https://ghp.ci/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gitdl.cn/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh.con.sh/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://ghproxy.net/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://github.moeyy.xyz/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh-proxy.com/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://ghproxy.cc/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh.llkk.cc/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n    \"https://gh-proxy.llyke.com/https://raw.githubusercontent.com/xiaoyaliu00/data/main/\"\n)\n\nif [ -z \"${1}\" ]; then\n    ERROR \"请配置小雅Alist配置文件目录后重试！\"\n    exit 1\nelse\n    data_dir=\"${1}/data\"\nfi\n\nif [ -f \"${data_dir}/version.txt\" ]; then\n    OLD_VERSION=$(cat \"${data_dir}\"/version.txt)\n    INFO \"本地数据版本：${OLD_VERSION}\"\nelse\n    OLD_VERSION=none\nfi\n\nfor base_url in \"${base_urls[@]}\"; do\n    if curl --insecure -fsSL -o \"${data_dir}/version.txt\" \"${base_url}version.txt\"; then\n        available_url=${base_url}\n        NEW_VERSION=$(cat \"${data_dir}\"/version.txt)\n        INFO \"远端数据版本：${NEW_VERSION}\"\n        break\n    fi\ndone\n\nif [ \"${OLD_VERSION}\" != \"${NEW_VERSION}\" ]; then\n    for file in \"${files[@]}\"; do\n        if curl --insecure -fsSL -o \"${data_dir}/${file}\" \"${available_url}${file}\"; then\n            INFO \"$available_url$file 更新成功！\"\n        else\n            ERROR \"$available_url$file 更新失败！\"\n        fi\n    done\nelse\n    INFO \"无需更新，跳过下载！\"\nfi\n"
        },
        {
          "name": "xiaoya_notify.sh",
          "type": "blob",
          "size": 34.7138671875,
          "content": "#!/bin/bash\n# shellcheck shell=bash\n# shellcheck disable=SC2086\nPATH=${PATH}:/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin:/opt/homebrew/bin\nexport PATH\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n# __   ___                                    _ _     _\n# \\ \\ / (_)                             /\\   | (_)   | |\n#  \\ V / _  __ _  ___  _   _  __ _     /  \\  | |_ ___| |_\n#   > < | |/ _` |/ _ \\| | | |/ _` |   / /\\ \\ | | / __| __|\n#  / . \\| | (_| | (_) | |_| | (_| |  / ____ \\| | \\__ \\ |_\n# /_/ \\_\\_|\\__,_|\\___/ \\__, |\\__,_| /_/    \\_\\_|_|___/\\__|\n#                       __/ |\n#                      |___/\n#\n# Copyright (c) 2024 DDSRem <https://blog.ddsrem.com>\n#\n# This is free software, licensed under the GNU General Public License v3.0.\n#\n# ——————————————————————————————————————————————————————————————————————————————————\n\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\nYellow='\\033[33m'\nFont=\"\\033[0m\"\nINFO=\"[${Green}INFO${Font}]\"\nERROR=\"[${Red}ERROR${Font}]\"\nWARN=\"[${Yellow}WARN${Font}]\"\nTime=$(date +\"%Y-%m-%d %T\")\nfunction INFO() {\n    echo -e \"${Time} ${INFO} ${1}\"\n}\nfunction ERROR() {\n    echo -e \"${Time} ${ERROR} ${1}\"\n}\nfunction WARN() {\n    echo -e \"${Time} ${WARN} ${1}\"\n}\n\nfunction auto_privileged() {\n\n    if [[ \"${OSNAME}\" = \"macos\" ]]; then\n        echo \"--privileged=true\"\n    fi\n\n}\n\nfunction container_update() {\n\n    local run_image remove_image IMAGE_MIRROR pull_image\n    if docker inspect ddsderek/runlike:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' ddsderek/runlike:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/ddsderek/runlike/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ \"$local_sha\" != \"$remote_sha\" ]; then\n            docker rmi ddsderek/runlike:latest\n            docker pull \"ddsderek/runlike:latest\"\n        fi\n    else\n        docker pull \"ddsderek/runlike:latest\"\n    fi\n    INFO \"获取 ${1} 容器信息中...\"\n    docker run --rm -v /var/run/docker.sock:/var/run/docker.sock -v /tmp:/tmp ddsderek/runlike \"${@}\" > \"/tmp/container_update_${*}\"\n    run_image=$(docker container inspect -f '{{.Config.Image}}' \"${@}\")\n    remove_image=$(docker images -q ${run_image})\n    local retries=0\n    local max_retries=3\n    IMAGE_MIRROR=$(cat \"${DDSREM_CONFIG_DIR}/image_mirror.txt\")\n    while [ $retries -lt $max_retries ]; do\n        if docker pull \"${IMAGE_MIRROR}/${run_image}\"; then\n            INFO \"${1} 镜像拉取成功！\"\n            break\n        else\n            WARN \"${1} 镜像拉取失败，正在进行第 $((retries + 1)) 次重试...\"\n            retries=$((retries + 1))\n        fi\n    done\n    if [ $retries -eq $max_retries ]; then\n        ERROR \"镜像拉取失败，已达到最大重试次数！\"\n        return 1\n    else\n        if [ \"${IMAGE_MIRROR}\" != \"docker.io\" ]; then\n            pull_image=$(docker images -q \"${IMAGE_MIRROR}/${run_image}\")\n        else\n            pull_image=$(docker images -q \"${run_image}\")\n        fi\n        if ! docker stop \"${@}\" > /dev/null 2>&1; then\n            if ! docker kill \"${@}\" > /dev/null 2>&1; then\n                docker rmi \"${IMAGE_MIRROR}/${run_image}\"\n                ERROR \"更新失败，停止 ${*} 容器失败！\"\n                return 1\n            fi\n        fi\n        INFO \"停止 ${*} 容器成功！\"\n        if ! docker rm --force \"${@}\" > /dev/null 2>&1; then\n            ERROR \"更新失败，删除 ${*} 容器失败！\"\n            return 1\n        fi\n        INFO \"删除 ${*} 容器成功！\"\n        if [ \"${pull_image}\" != \"${remove_image}\" ]; then\n            INFO \"删除 ${remove_image} 镜像中...\"\n            docker rmi \"${remove_image}\" > /dev/null 2>&1\n        fi\n        if [ \"${IMAGE_MIRROR}\" != \"docker.io\" ]; then\n            docker tag \"${IMAGE_MIRROR}/${1}\" \"${1}\" > /dev/null 2>&1\n            docker rmi \"${IMAGE_MIRROR}/${1}\" > /dev/null 2>&1\n        fi\n        if bash \"/tmp/container_update_${*}\"; then\n            rm -f \"/tmp/container_update_${*}\"\n            INFO \"${*} 更新成功\"\n            return 0\n        else\n            ERROR \"更新失败，创建 ${*} 容器失败！\"\n            return 1\n        fi\n    fi\n\n}\n\nfunction pull_run_glue() {\n\n    if docker inspect xiaoyaliu/glue:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/glue:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/xiaoyaliu/glue/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ ! \"$local_sha\" == \"$remote_sha\" ]; then\n            docker rmi xiaoyaliu/glue:latest\n            if docker pull xiaoyaliu/glue:latest; then\n                INFO \"镜像拉取成功！\"\n            else\n                ERROR \"镜像拉取失败！\"\n                exit 1\n            fi\n        fi\n    else\n        if docker pull xiaoyaliu/glue:latest; then\n            INFO \"镜像拉取成功！\"\n        else\n            ERROR \"镜像拉取失败！\"\n            exit 1\n        fi\n    fi\n\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -i \\\n            --security-opt seccomp=unconfined \\\n            --rm \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            ${extra_parameters} \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\"\n    else\n        # shellcheck disable=SC2046\n        docker run -i \\\n            --security-opt seccomp=unconfined \\\n            --rm \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\"\n    fi\n\n}\n\nfunction pull_run_glue_xh() {\n\n    BUILDER_NAME=\"xiaoya_builder_$(date +%S%N | cut -c 7-11)\"\n\n    if docker inspect xiaoyaliu/glue:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/glue:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/xiaoyaliu/glue/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ ! \"$local_sha\" == \"$remote_sha\" ]; then\n            docker rmi xiaoyaliu/glue:latest\n            if docker pull xiaoyaliu/glue:latest; then\n                INFO \"镜像拉取成功！\"\n            else\n                ERROR \"镜像拉取失败！\"\n                exit 1\n            fi\n        fi\n    else\n        if docker pull xiaoyaliu/glue:latest; then\n            INFO \"镜像拉取成功！\"\n        else\n            ERROR \"镜像拉取失败！\"\n            exit 1\n        fi\n    fi\n\n    if [ -n \"${extra_parameters}\" ]; then\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --security-opt seccomp=unconfined \\\n            --name=${BUILDER_NAME} \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            ${extra_parameters} \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\" > /dev/null 2>&1\n    else\n        # shellcheck disable=SC2046\n        docker run -itd \\\n            --security-opt seccomp=unconfined \\\n            --name=${BUILDER_NAME} \\\n            --net=host \\\n            -v \"${MEDIA_DIR}:/media\" \\\n            -v \"${CONFIG_DIR}:/etc/xiaoya\" \\\n            $(auto_privileged) \\\n            -e LANG=C.UTF-8 \\\n            xiaoyaliu/glue:latest \\\n            \"${@}\" > /dev/null 2>&1\n    fi\n\n    timeout=20\n    start_time=$(date +%s)\n    end_time=$((start_time + timeout))\n    while [ \"$(date +%s)\" -lt $end_time ]; do\n        status=$(docker inspect -f '{{.State.Status}}' \"${BUILDER_NAME}\")\n        if [ \"$status\" = \"exited\" ]; then\n            break\n        fi\n        sleep 1\n    done\n\n    status=$(docker inspect -f '{{.State.Status}}' \"${BUILDER_NAME}\")\n    if [ \"$status\" != \"exited\" ]; then\n        docker kill ${BUILDER_NAME} > /dev/null 2>&1\n    fi\n    docker rm ${BUILDER_NAME} > /dev/null 2>&1\n\n}\n\nfunction get_docker0_url() {\n\n    if command -v ifconfig > /dev/null 2>&1; then\n        docker0=$(ifconfig docker0 | awk '/inet / {print $2}' | sed 's/addr://')\n    else\n        docker0=$(ip addr show docker0 | awk '/inet / {print $2}' | cut -d '/' -f 1)\n    fi\n\n    if [ -n \"$docker0\" ]; then\n        INFO \"docker0 的 IP 地址是：$docker0\"\n    else\n        WARN \"无法获取 docker0 的 IP 地址！\"\n        if [[ \"${OSNAME}\" = \"macos\" ]]; then\n            docker0=$(ifconfig \"$(route -n get default | grep interface | awk -F ':' '{print$2}' | awk '{$1=$1};1')\" | grep 'inet ' | awk '{print$2}')\n        else\n            docker0=$(ip address | grep inet | grep -v 172.17 | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | sed 's/addr://' | head -n1 | cut -f1 -d\"/\")\n        fi\n        INFO \"尝试使用本地IP：${docker0}\"\n    fi\n\n}\n\nfunction test_xiaoya_status() {\n\n    get_docker0_url\n\n    INFO \"测试xiaoya的联通性...\"\n    if curl -siL -m 10 http://127.0.0.1:5678/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\" > /dev/null 2>&1; then\n        xiaoya_addr=\"http://127.0.0.1:5678\"\n    elif curl -siL -m 10 http://${docker0}:5678/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\" > /dev/null 2>&1; then\n        xiaoya_addr=\"http://${docker0}:5678\"\n    else\n        if [ -s ${CONFIG_DIR}/docker_address.txt ]; then\n            docker_address=$(head -n1 ${CONFIG_DIR}/docker_address.txt)\n            if curl -siL -m 10 ${docker_address}/d/README.md | grep -v 302 | grep -e \"x-oss-\" -e \"x-115-request-id\" > /dev/null 2>&1; then\n                xiaoya_addr=${docker_address}\n            else\n                ERROR \"请检查xiaoya是否正常运行后再试\"\n                docker logs --tail 8 ${XIAOYA_NAME}\n                exit 1\n            fi\n        else\n            ERROR \"请先配置 ${CONFIG_DIR}/docker_address.txt 后重试\"\n            exit 1\n        fi\n    fi\n\n    INFO \"连接小雅地址为 ${xiaoya_addr}\"\n\n}\n\nfunction wait_emby_start() {\n\n    start_time=$(date +%s)\n    CONTAINER_NAME=${EMBY_NAME}\n    TARGET_LOG_LINE_SUCCESS=\"All entry points have started\"\n    while true; do\n        line=$(docker logs \"$CONTAINER_NAME\" 2>&1 | tail -n 10)\n        echo \"$line\"\n        if [[ \"$line\" == *\"$TARGET_LOG_LINE_SUCCESS\"* ]]; then\n            break\n        fi\n        current_time=$(date +%s)\n        elapsed_time=$((current_time - start_time))\n        if [ \"$elapsed_time\" -gt 600 ]; then\n            WARN \"Emby 未正常启动超时 10 分钟，终止脚本！\"\n            return 1\n        fi\n        sleep 3\n    done\n\n}\n\nfunction update_media() {\n\n    INFO \"开始更新 ${1}\"\n\n    chown 0:0 \"${MEDIA_DIR}\"/temp\n    chmod 777 \"${MEDIA_DIR}\"/temp\n    free_size=$(df -P \"${MEDIA_DIR}\" | tail -n1 | awk '{print $4}')\n    free_size=$((free_size))\n    free_size_G=$((free_size / 1024 / 1024))\n    INFO \"磁盘容量：${free_size_G}G\"\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}\" ]; then\n        INFO \"清理旧 ${1} 中...\"\n        rm -f ${MEDIA_DIR}/temp/${1}\n    fi\n\n    INFO \"开始下载 ${1} ...\"\n\n    extra_parameters=\"--workdir=/media/temp\"\n\n    if [ \"$OSNAME\" = \"ugos\" ] || [ \"$OSNAME\" = \"ugos pro\" ]; then\n        INFO \"wget 下载模式\"\n        pull_run_glue wget -c --show-progress \"${xiaoya_addr}/d/元数据/${1}\"\n    else\n        INFO \"aria2c 下载模式\"\n        pull_run_glue aria2c -o \"${1}\" --allow-overwrite=true --auto-file-renaming=false --enable-color=false -c -x6 \"${xiaoya_addr}/d/元数据/${1}\"\n    fi\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n        ERROR \"存在 ${MEDIA_DIR}/temp/${1}.aria2 文件，下载不完整！\"\n        return 1\n    fi\n\n    INFO \"设置目录权限...\"\n    chmod 777 \"${MEDIA_DIR}\"/temp/\"${1}\"\n    chown 0:0 \"${MEDIA_DIR}\"/temp/\"${1}\"\n\n    INFO \"${1} 下载完成！\"\n\n    if docker container inspect \"${RESILIO_NAME}\" > /dev/null 2>&1; then\n        INFO \"Resilio 关闭中...\"\n        docker stop ${RESILIO_NAME}\n    fi\n\n    INFO \"开始解压 ${1} ...\"\n\n    if [ \"${1}\" == \"all.mp4\" ]; then\n        extra_parameters=\"--workdir=/media/xiaoya\"\n\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya\n\n        all_size=$(du -k ${MEDIA_DIR}/temp/all.mp4 | cut -f1)\n        if [[ \"$all_size\" -le 30000000 ]]; then\n            ERROR \"all.mp4 下载不完整，文件大小(in KB):$all_size 小于预期\"\n            return 1\n        else\n            INFO \"all.mp4 文件大小验证正常\"\n            pull_run_glue 7z x -aoa -mmt=16 /media/temp/all.mp4\n        fi\n\n        INFO \"设置目录权限...\"\n        chmod -R 777 \"${MEDIA_DIR}\"/xiaoya\n    elif [ \"${1}\" == \"pikpak.mp4\" ]; then\n        extra_parameters=\"--workdir=/media/xiaoya\"\n\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya\n\n        pikpak_size=$(du -k ${MEDIA_DIR}/temp/pikpak.mp4 | cut -f1)\n        if [[ \"$pikpak_size\" -le 14000000 ]]; then\n            ERROR \"pikpak.mp4 下载不完整，文件大小(in KB):$pikpak_size 小于预期\"\n            return 1\n        else\n            INFO \"pikpak.mp4 文件大小验证正常\"\n            pull_run_glue 7z x -aoa -mmt=16 /media/temp/pikpak.mp4\n        fi\n\n        INFO \"设置目录权限...\"\n        chmod -R 777 \"${MEDIA_DIR}\"/xiaoya\n    elif [ \"${1}\" == \"115.mp4\" ]; then\n        extra_parameters=\"--workdir=/media/xiaoya\"\n\n        mkdir -p \"${MEDIA_DIR}\"/xiaoya\n\n        __115_size=$(du -k ${MEDIA_DIR}/temp/115.mp4 | cut -f1)\n        if [[ \"$__115_size\" -le 16000000 ]]; then\n            ERROR \"115.mp4 下载不完整，文件大小(in KB):$__115_size 小于预期\"\n            return 1\n        else\n            INFO \"115.mp4 文件大小验证正常\"\n            pull_run_glue 7z x -aoa -mmt=16 /media/temp/115.mp4\n        fi\n\n        INFO \"设置目录权限...\"\n        chmod -R 777 \"${MEDIA_DIR}\"/xiaoya\n    fi\n\n    if docker container inspect \"${RESILIO_NAME}\" > /dev/null 2>&1; then\n        docker start ${RESILIO_NAME}\n    fi\n\n    INFO \"${1} 更新完成\"\n\n}\n\nfunction sync_emby_config() {\n\n    MEDIA_DIR=$1\n    if [ \"$2\" ]; then\n        EMBY_URL=$(cat $2/emby_server.txt)\n        CONFIG_DIR=$2\n    else\n        EMBY_URL=$(cat /etc/xiaoya/emby_server.txt)\n        CONFIG_DIR=/etc/xiaoya\n    fi\n    if [ \"$3\" ]; then\n        EMBY_NAME=$3\n    else\n        EMBY_NAME=emby\n    fi\n    if [ \"$4\" ]; then\n        RESILIO_NAME=$4\n    else\n        RESILIO_NAME=resilio\n    fi\n    if [ \"$5\" ]; then\n        EMBY_APIKEY=$5\n    else\n        EMBY_APIKEY=e825ed6f7f8f44ffa0563cddaddce14d\n    fi\n\n    SQLITE_COMMAND=\"docker run -i \\\n        --security-opt seccomp=unconfined \\\n        --rm \\\n        --net=host \\\n        $(auto_privileged) \\\n        -v $MEDIA_DIR/config/data:/emby/config/data \\\n        -e LANG=C.UTF-8 \\\n        xiaoyaliu/glue:latest\"\n    SQLITE_COMMAND_2=\"docker run -i \\\n        --security-opt seccomp=unconfined \\\n        --rm \\\n        --net=host \\\n        $(auto_privileged) \\\n        -v $MEDIA_DIR/config/data:/emby/config/data \\\n        -v /tmp/emby_user.sql:/tmp/emby_user.sql \\\n        -v /tmp/emby_library_mediaconfig.sql:/tmp/emby_library_mediaconfig.sql \\\n        -e LANG=C.UTF-8 \\\n        xiaoyaliu/glue:latest\"\n    SQLITE_COMMAND_3=\"docker run -i \\\n        --security-opt seccomp=unconfined \\\n        --rm \\\n        --net=host \\\n        $(auto_privileged) \\\n        -v $MEDIA_DIR/temp/config/data:/emby/config/data \\\n        -e LANG=C.UTF-8 \\\n        xiaoyaliu/glue:latest\"\n    EMBY_COMMAND=\"docker run -i \\\n        --security-opt seccomp=unconfined \\\n        --rm \\\n        --net=host \\\n        $(auto_privileged) \\\n        -v /tmp/emby.response:/tmp/emby.response \\\n        -e LANG=C.UTF-8 \\\n        xiaoyaliu/glue:latest\"\n\n    if docker inspect xiaoyaliu/glue:latest > /dev/null 2>&1; then\n        local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/glue:latest 2> /dev/null | cut -f2 -d:)\n        remote_sha=$(curl -s -m 10 \"https://hub.docker.com/v2/repositories/xiaoyaliu/glue/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n        if [ ! \"$local_sha\" == \"$remote_sha\" ]; then\n            docker rmi xiaoyaliu/glue:latest\n            if docker pull xiaoyaliu/glue:latest; then\n                INFO \"镜像拉取成功！\"\n            else\n                ERROR \"镜像拉取失败！\"\n                return 1\n            fi\n        fi\n    else\n        if docker pull xiaoyaliu/glue:latest; then\n            INFO \"镜像拉取成功！\"\n        else\n            ERROR \"镜像拉取失败！\"\n            return 1\n        fi\n    fi\n\n    INFO \"保留用户 Policy 中...\"\n    status=$(docker inspect -f '{{.State.Status}}' \"${EMBY_NAME}\")\n    if [ \"$status\" == \"exited\" ]; then\n        docker start \"${EMBY_NAME}\"\n        if ! wait_emby_start; then\n            return 1\n        fi\n    fi\n    curl -s \"${EMBY_URL}/Users?api_key=${EMBY_APIKEY}\" > /tmp/emby.response\n\n    INFO \"Emby 关闭中...\"\n    docker stop \"${EMBY_NAME}\"\n\n    sleep 4\n\n    INFO \"导出数据库中...\"\n    ${SQLITE_COMMAND} sqlite3 /emby/config/data/library.db \".dump UserDatas\" > /tmp/emby_user.sql\n    ${SQLITE_COMMAND} sqlite3 /emby/config/data/library.db \".dump ItemExtradata\" > /tmp/emby_library_mediaconfig.sql\n\n    INFO \"备份数据中...\"\n    files=(\n        \"library.db\"\n        \"library.db-shm\"\n        \"library.db-wal\"\n    )\n    for file in \"${files[@]}\"; do\n        src_file=\"$MEDIA_DIR/config/data/$file\"\n        dest_file=\"$src_file.backup\"\n        if [ -f \"$src_file\" ]; then\n            if [ -f \"$dest_file\" ]; then\n                rm -f \"$dest_file\"\n            fi\n            mv -f \"$src_file\" \"$dest_file\"\n        fi\n    done\n\n    INFO \"清理旧数据...\"\n    rm -f $MEDIA_DIR/temp/config.mp4\n\n    test_xiaoya_status\n\n    extra_parameters=\"--workdir=/media/temp\"\n    if [ \"$OSNAME\" = \"ugos\" ] || [ \"$OSNAME\" = \"ugos pro\" ]; then\n        INFO \"绿联NAS使用 wget 下载\"\n        pull_run_glue wget -c --show-progress \"${xiaoya_addr}/d/元数据/config.mp4\"\n    else\n        INFO \"使用 aria2 下载\"\n        pull_run_glue aria2c -o config.mp4 --continue=true -x6 --conditional-get=true --allow-overwrite=true \"${xiaoya_addr}/d/元数据/config.mp4\"\n    fi\n    if [ -f \"${MEDIA_DIR}/temp/config.mp4.aria2\" ]; then\n        ERROR \"存在 ${MEDIA_DIR}/temp/config.mp4.aria2 文件，下载不完整！\"\n        return 1\n    fi\n    # 在temp下面解压，最终新config文件路径为temp/config\n    if pull_run_glue 7z x -aoa -mmt=16 config.mp4; then\n        INFO \"下载解压元数据完成\"\n    else\n        ERROR \"解压元数据失败\"\n        return 1\n    fi\n\n    if ${SQLITE_COMMAND_3} sqlite3 /emby/config/data/library.db \".tables\" | grep Chapters3 > /dev/null; then\n        cp -f $MEDIA_DIR/temp/config/data/library.db* $MEDIA_DIR/config/data/\n        ${SQLITE_COMMAND} sqlite3 /emby/config/data/library.db \"DROP TABLE IF EXISTS UserDatas;\"\n        ${SQLITE_COMMAND_2} sqlite3 /emby/config/data/library.db \".read /tmp/emby_user.sql\"\n        ${SQLITE_COMMAND} sqlite3 /emby/config/data/library.db \"DROP TABLE IF EXISTS ItemExtradata;\"\n        ${SQLITE_COMMAND_2} sqlite3 /emby/config/data/library.db \".read /tmp/emby_library_mediaconfig.sql\"\n        INFO \"保存用户信息完成\"\n        INFO \"文件复制中...\"\n        mkdir -p $MEDIA_DIR/config/cache\n        mkdir -p $MEDIA_DIR/config/metadata\n        cp -rf $MEDIA_DIR/temp/config/cache/* $MEDIA_DIR/config/cache/\n        cp -rf $MEDIA_DIR/temp/config/metadata/* $MEDIA_DIR/config/metadata/\n        rm -rf $MEDIA_DIR/temp/config/*\n        INFO \"文件复制完成\"\n        chmod -R 777 \\\n            $MEDIA_DIR/config/data \\\n            $MEDIA_DIR/config/cache \\\n            $MEDIA_DIR/config/metadata\n        INFO \"Emby 重启中...\"\n        docker start ${EMBY_NAME}\n        sleep 30\n    else\n        ERROR \"解压数据库不完整，跳过复制...\"\n        INFO \"恢复旧数据中...\"\n        for file in \"${files[@]}\"; do\n            src_file=\"$MEDIA_DIR/config/data/$file\"\n            dest_file=\"$src_file.backup\"\n            if [ -f \"$dest_file\" ]; then\n                mv -f \"$dest_file\" \"$src_file\"\n            fi\n        done\n        return 1\n    fi\n\n    if ! wait_emby_start; then\n        return 1\n    fi\n\n    USER_COUNT=$(${EMBY_COMMAND} jq '.[].Name' /tmp/emby.response | wc -l)\n    for ((i = 0; i < USER_COUNT; i++)); do\n        if [[ \"$USER_COUNT\" -gt 50 ]]; then\n            WARN \"用户超过 50 位，跳过更新用户 Policy！\"\n            return 1\n        fi\n        id=$(${EMBY_COMMAND} jq -r \".[$i].Id\" /tmp/emby.response)\n        name=$(${EMBY_COMMAND} jq -r \".[$i].Name\" /tmp/emby.response)\n        policy=$(${EMBY_COMMAND} jq -r \".[$i].Policy | to_entries | from_entries | tojson\" /tmp/emby.response)\n        USER_URL_2=\"${EMBY_URL}/Users/$id/Policy?api_key=${EMBY_APIKEY}\"\n        status_code=$(curl -s -w \"%{http_code}\" -H \"Content-Type: application/json\" -X POST -d \"$policy\" \"$USER_URL_2\")\n        if [ \"$status_code\" == \"204\" ]; then\n            INFO \"成功更新 $name 用户Policy\"\n        else\n            ERROR \"返回错误代码 $status_code\"\n            return 1\n        fi\n    done\n\n}\n\nfunction compare_metadata_size() {\n\n    pull_run_glue_xh xh --headers --follow --timeout=10 -o /media/headers.log \"${xiaoya_addr}/d/元数据/${1}\"\n    REMOTE_METADATA_SIZE=$(cat ${MEDIA_DIR}/headers.log | grep 'Content-Length' | awk '{print $2}')\n    rm -f ${MEDIA_DIR}/headers.log\n\n    if [ -f \"${MEDIA_DIR}/temp/${1}\" ] && [ ! -f \"${MEDIA_DIR}/temp/${1}.aria2\" ]; then\n        LOCAL_METADATA_SIZE=$(du -b \"${MEDIA_DIR}/temp/${1}\" | awk '{print $1}')\n    else\n        LOCAL_METADATA_SIZE=0\n    fi\n\n    INFO \"${1} REMOTE_METADATA_SIZE: ${REMOTE_METADATA_SIZE}\"\n    INFO \"${1} LOCAL_METADATA_SIZE: ${LOCAL_METADATA_SIZE}\"\n\n    if\n        [ \"${REMOTE_METADATA_SIZE}\" != \"${LOCAL_METADATA_SIZE}\" ] &&\n            [ -n \"${REMOTE_METADATA_SIZE}\" ] &&\n            awk -v remote=\"${REMOTE_METADATA_SIZE}\" -v threshold=\"2147483648\" 'BEGIN { if (remote > threshold) print \"1\"; else print \"0\"; }' | grep -q \"1\"\n    then\n        __COMPARE_METADATA_SIZE=2\n    else\n        __COMPARE_METADATA_SIZE=1\n    fi\n\n}\n\nfunction detection_all_pikpak_update() {\n\n    compare_metadata_size \"all.mp4\"\n    if [ \"${__COMPARE_METADATA_SIZE}\" == \"1\" ]; then\n        INFO \"跳过 all.mp4 更新\"\n    else\n        if ! update_media \"all.mp4\"; then\n            ERROR \"all.mp4 元数据更新失败！\"\n        fi\n    fi\n\n    compare_metadata_size \"pikpak.mp4\"\n    if [ \"${__COMPARE_METADATA_SIZE}\" == \"1\" ]; then\n        INFO \"跳过 pikpak.mp4 更新\"\n    else\n        if ! update_media \"pikpak.mp4\"; then\n            ERROR \"pikpak.mp4 元数据更新失败！\"\n        fi\n    fi\n\n    compare_metadata_size \"115.mp4\"\n    if [ \"${__COMPARE_METADATA_SIZE}\" == \"1\" ]; then\n        INFO \"跳过 115.mp4 更新\"\n    else\n        if ! update_media \"115.mp4\"; then\n            ERROR \"115.mp4 元数据更新失败！\"\n        fi\n    fi\n\n    INFO \"全部媒体元数据更新完成！\"\n\n}\n\nfunction detection_config_update() {\n\n    if [ \"${FORCE_UPDATE_CONFIG}\" == \"yes\" ]; then\n        sync_emby_config ${MEDIA_DIR} ${CONFIG_DIR} ${EMBY_NAME} ${RESILIO_NAME} ${EMBY_APIKEY}\n    else\n        compare_metadata_size \"config.mp4\"\n        if [ \"${__COMPARE_METADATA_SIZE}\" == \"1\" ]; then\n            INFO \"跳过 config.mp4 更新\"\n        else\n            sync_emby_config ${MEDIA_DIR} ${CONFIG_DIR} ${EMBY_NAME} ${RESILIO_NAME} ${EMBY_APIKEY}\n        fi\n    fi\n\n}\n\nfunction detection_xiaoya_version_update() {\n\n    REMOTE_XIAOYA_VERSION=$(curl -skL https://docker.xiaoya.pro/version.txt | head -n 1 | sed \"s/\\r$//g\")\n\n    if ! echo \"${REMOTE_XIAOYA_VERSION}\" | awk -F '[^0-9.]' '{print NF-1}' | grep -q '^0$'; then\n        REMOTE_XIAOYA_VERSION=error\n    fi\n\n    docker cp ${XIAOYA_NAME}:/version.txt ${MEDIA_DIR}\n    if [ -f \"${MEDIA_DIR}/version.txt\" ]; then\n        LOCAL_XIAOYA_VERSION=$(cat ${MEDIA_DIR}/version.txt | head -n 1 | sed \"s/\\r$//g\")\n        rm -f cat ${MEDIA_DIR}/version.txt\n    else\n        LOCAL_XIAOYA_VERSION=\"error\"\n    fi\n\n    INFO \"REMOTE_XIAOYA_VERSION: ${REMOTE_XIAOYA_VERSION}\"\n    INFO \"LOCAL_XIAOYA_VERSION: ${LOCAL_XIAOYA_VERSION}\"\n\n    if [ \"${REMOTE_XIAOYA_VERSION}\" == \"${LOCAL_XIAOYA_VERSION}\" ] ||\n        [ \"${REMOTE_XIAOYA_VERSION}\" == \"\" ] ||\n        [ \"${LOCAL_XIAOYA_VERSION}\" == \"error\" ] ||\n        [ \"${REMOTE_XIAOYA_VERSION}\" == \"error\" ] ||\n        [ -z \"${REMOTE_XIAOYA_VERSION}\" ]; then\n        INFO \"跳过小雅容器重启\"\n    else\n        docker restart ${XIAOYA_NAME}\n    fi\n\n}\n\nfunction detection_xiaoya_image_update() {\n\n    if docker inspect xiaoyaliu/alist:latest > /dev/null 2>&1; then\n        if docker inspect xiaoyaliu/alist:latest > /dev/null 2>&1; then\n            local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/alist:latest | cut -f2 -d:)\n            remote_sha=$(curl -s \"https://hub.docker.com/v2/repositories/xiaoyaliu/alist/tags/latest\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n            INFO \"remote_sha: ${remote_sha}\"\n            INFO \"local_sha: ${local_sha}\"\n            if [ ! \"${local_sha}\" == \"${remote_sha}\" ] && [ -n \"${remote_sha}\" ] && [ -n \"${local_sha}\" ]; then\n                if ! container_update \"${XIAOYA_NAME}\"; then\n                    ERROR \"小雅容器更新失败！\"\n                fi\n            else\n                INFO \"跳过小雅容器更新\"\n            fi\n        fi\n    elif docker inspect xiaoyaliu/alist:hostmode > /dev/null 2>&1; then\n        if docker inspect xiaoyaliu/alist:hostmode > /dev/null 2>&1; then\n            local_sha=$(docker inspect --format='{{index .RepoDigests 0}}' xiaoyaliu/alist:hostmode | cut -f2 -d:)\n            remote_sha=$(curl -s \"https://hub.docker.com/v2/repositories/xiaoyaliu/alist/tags/hostmode\" | grep -o '\"digest\":\"[^\"]*' | grep -o '[^\"]*$' | tail -n1 | cut -f2 -d:)\n            INFO \"remote_sha: ${remote_sha}\"\n            INFO \"local_sha: ${local_sha}\"\n            if [ ! \"${local_sha}\" == \"${remote_sha}\" ] && [ -n \"${remote_sha}\" ] && [ -n \"${local_sha}\" ]; then\n                if ! container_update \"${XIAOYA_NAME}\"; then\n                    ERROR \"小雅容器更新失败！\"\n                fi\n            else\n                INFO \"跳过小雅容器更新\"\n            fi\n        fi\n    fi\n\n}\n\nfunction main() {\n\n    cat << EOF\n可添加参数解释：\n1. --auto_update_all_pikpak：是否开启all,pikpak,115自动下载更新（yes开启，no关闭）（可选，默认开启）\n2. --auto_update_config：是否开启config自动同步（yes开启，no关闭）（可选，默认开启）\n3. --force_update_config：强制同步config（yes开启，no关闭）（可选，默认关闭）\n4. --media_dir：媒体库路径\n5. --config_dir：小雅配置文件路径（可选，默认/etc/xiaoya）\n6. --xiaoya_name：小雅容器名（可选，默认xiaoya）\n7. --resilio_name：resilio容器名（可选，默认resilio）\n8. --emby_name：emby容器名（可选，默认emby）\n9. --emby_apikey: emby api key（可选）\n\nEOF\n\n    INFO \"小雅配置目录：${CONFIG_DIR}\"\n    INFO \"媒体库目录：${MEDIA_DIR}\"\n    INFO \"Emby 容器名称：${EMBY_NAME}\"\n    INFO \"Resilio 容器名称：${RESILIO_NAME}\"\n    INFO \"小雅容器名称：${XIAOYA_NAME}\"\n\n    _os=$(uname -s)\n    _os_all=$(uname -a)\n    if [ \"${_os}\" == \"Darwin\" ]; then\n        OSNAME='macos'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n        stty -icanon\n    # 必须先判断的系统\n    # 绿联旧版UGOS 基于 OpenWRT\n    elif [ -f /etc/openwrt_version ] && echo -e \"${_os_all}\" | grep -Eqi \"UGREEN\"; then\n        OSNAME='ugos'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    # 绿联UGOS Pro 基于 Debian\n    elif grep -Eqi \"Debian\" /etc/os-release && grep -Eqi \"UGOSPRO\" /etc/issue; then\n        OSNAME='ugos pro'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    # fnOS 基于 Debian\n    elif grep -Eqi \"Debian\" /etc/os-release && grep -Eqi \"fnOS\" /etc/issue; then\n        OSNAME='fnos'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    # OpenMediaVault 基于 Debian\n    elif grep -Eqi \"openmediavault\" /etc/issue || grep -Eqi \"openmediavault\" /etc/os-release; then\n        OSNAME='openmediavault'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    # FreeNAS（TrueNAS CORE）基于 FreeBSD\n    elif echo -e \"${_os_all}\" | grep -Eqi \"FreeBSD\" | grep -Eqi \"TRUENAS\"; then\n        OSNAME='truenas core'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    # TrueNAS SCALE 基于 Debian\n    elif grep -Eqi \"Debian\" /etc/issue && [ -f /etc/version ]; then\n        OSNAME='truenas scale'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif [ -f /etc/synoinfo.conf ]; then\n        OSNAME='synology'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif [ -f /etc/openwrt_release ]; then\n        OSNAME='openwrt'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"QNAP\" /etc/issue; then\n        OSNAME='qnap'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif [ -f /etc/unraid-version ]; then\n        OSNAME='unraid'\n        DDSREM_CONFIG_DIR=/mnt/user/appdata/DDSRem\n        # 目录迁移\n        if [ ! -d \"${DDSREM_CONFIG_DIR}\" ]; then\n            mkdir -p \"${DDSREM_CONFIG_DIR}\"\n        fi\n        local FILES_LIST PATHS_LIST\n        FILES_LIST=(\n            \"xiaoya_alist_tvbox_config_dir.txt\"\n            \"xiaoya_alist_media_dir.txt\"\n            \"xiaoya_alist_config_dir.txt\"\n            \"resilio_config_dir.txt\"\n            \"portainer_config_dir.txt\"\n            \"onelist_config_dir.txt\"\n            \"container_run_extra_parameters.txt\"\n            \"auto_symlink_config_dir.txt\"\n            \"data_downloader.txt\"\n            \"disk_capacity_detection.txt\"\n            \"xiaoya_connectivity_detection.txt\"\n            \"image_mirror.txt\"\n            \"image_mirror_user.txt\"\n            \"default_network.txt\"\n        )\n        PATHS_LIST=(\n            \"container_name\"\n            \"data_crep\"\n        )\n        for __file in \"${FILES_LIST[@]}\"; do\n            if [ -f \"/etc/DDSRem/${__file}\" ]; then\n                INFO \"迁移文件 ${__file} 中...\"\n                mv \"/etc/DDSRem/${__file}\" \"${DDSREM_CONFIG_DIR}/${__file}\"\n            fi\n        done\n        for __path in \"${PATHS_LIST[@]}\"; do\n            if [ -d \"/etc/DDSRem/${__path}\" ]; then\n                INFO \"迁移文件夹 ${__path} 中...\"\n                if [ -d \"${DDSREM_CONFIG_DIR}/${__path}\" ]; then\n                    # 默认保留 /etc/DDSRem 的配置项\n                    # shellcheck disable=SC2115\n                    rm -rf \"${DDSREM_CONFIG_DIR}/${__path}\"\n                fi\n                mv \"/etc/DDSRem/${__path}\" \"${DDSREM_CONFIG_DIR}/${__path}\"\n            fi\n        done\n    elif grep -Eqi \"LibreELEC\" /etc/issue || grep -Eqi \"LibreELEC\" /etc/*-release; then\n        OSNAME='libreelec'\n        DDSREM_CONFIG_DIR=/storage/DDSRem\n        ERROR \"LibreELEC 系统目前不支持！\"\n        exit 1\n    elif grep -Eqi \"openSUSE\" /etc/*-release; then\n        OSNAME='opensuse'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"FreeBSD\" /etc/*-release; then\n        OSNAME='freebsd'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"EulerOS\" /etc/*-release || grep -Eqi \"openEuler\" /etc/*-release; then\n        OSNAME='euler'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"CentOS\" /etc/issue || grep -Eqi \"CentOS\" /etc/*-release; then\n        OSNAME='centos'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Fedora\" /etc/issue || grep -Eqi \"Fedora\" /etc/*-release; then\n        OSNAME='fedora'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Rocky\" /etc/issue || grep -Eqi \"Rocky\" /etc/*-release; then\n        OSNAME='rocky'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"AlmaLinux\" /etc/issue || grep -Eqi \"AlmaLinux\" /etc/*-release; then\n        OSNAME='almalinux'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Arch Linux\" /etc/issue || grep -Eqi \"Arch Linux\" /etc/*-release; then\n        OSNAME='archlinux'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Amazon Linux\" /etc/issue || grep -Eqi \"Amazon Linux\" /etc/*-release; then\n        OSNAME='amazon'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Debian\" /etc/issue || grep -Eqi \"Debian\" /etc/os-release; then\n        OSNAME='debian'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Ubuntu\" /etc/issue || grep -Eqi \"Ubuntu\" /etc/os-release; then\n        OSNAME='ubuntu'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    elif grep -Eqi \"Alpine\" /etc/issue || grep -Eq \"Alpine\" /etc/*-release; then\n        OSNAME='alpine'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    else\n        OSNAME='unknow'\n        DDSREM_CONFIG_DIR=/etc/DDSRem\n    fi\n\n    INFO \"OS: ${_os},${OSNAME}\"\n    INFO \"脚本配置文件路径：${DDSREM_CONFIG_DIR}\"\n    if [ ! -f \"${DDSREM_CONFIG_DIR}/image_mirror.txt\" ]; then\n        echo 'docker.io' > ${DDSREM_CONFIG_DIR}/image_mirror.txt\n    fi\n\n    test_xiaoya_status\n\n    # all.mp4 和 pikpak.mp4 和 115.mp4\n    if [ \"${AUTO_UPDATE_ALL_PIKPAK}\" == \"yes\" ]; then\n        detection_all_pikpak_update\n    else\n        INFO \"all.mp4 pikpak.mp4 115.mp4 更新已关闭\"\n    fi\n    # config.mp4\n    if [ \"${AUTO_UPDATE_CONFIG}\" == \"yes\" ]; then\n        if ! detection_config_update; then\n            ERROR \"Emby config sync 运行失败！\"\n        else\n            INFO \"Emby config sync 运行成功！\"\n        fi\n    else\n        INFO \"Emby config sync 已关闭\"\n    fi\n    # xiaoya image\n    detection_xiaoya_image_update\n    sleep 20\n    # xiaoya version\n    detection_xiaoya_version_update\n\n}\n\nif [ -n \"$(date)\" ]; then\n    ERROR \"此脚本已弃用！\"\n    exit 0\nfi\n\nwhile [[ $# -gt 0 ]]; do\n    case \"$1\" in\n    --config_dir=*)\n        CONFIG_DIR=\"${1#*=}\"\n        shift\n        ;;\n    --media_dir=*)\n        MEDIA_DIR=\"${1#*=}\"\n        shift\n        ;;\n    --emby_name=*)\n        EMBY_NAME=\"${1#*=}\"\n        shift\n        ;;\n    --emby_apikey=*)\n        EMBY_APIKEY=\"${1#*=}\"\n        shift\n        ;;\n    --resilio_name=*)\n        RESILIO_NAME=\"${1#*=}\"\n        shift\n        ;;\n    --xiaoya_name=*)\n        XIAOYA_NAME=\"${1#*=}\"\n        shift\n        ;;\n    --auto_update_config=*)\n        AUTO_UPDATE_CONFIG=\"${1#*=}\"\n        shift\n        ;;\n    --force_update_config=*)\n        FORCE_UPDATE_CONFIG=\"${1#*=}\"\n        shift\n        ;;\n    --auto_update_all_pikpak=*)\n        AUTO_UPDATE_ALL_PIKPAK=\"${1#*=}\"\n        shift\n        ;;\n    *)\n        shift\n        ;;\n    esac\ndone\n\nif [ -z ${MEDIA_DIR} ]; then\n    ERROR \"请配置媒体目录后重试！\"\n    exit 1\nfi\n\nif [ -z ${CONFIG_DIR} ]; then\n    CONFIG_DIR=/etc/xiaoya\nfi\n\nif [ -z ${EMBY_NAME} ]; then\n    EMBY_NAME=emby\nfi\n\nif [ -z ${EMBY_APIKEY} ]; then\n    EMBY_APIKEY=e825ed6f7f8f44ffa0563cddaddce14d\nfi\n\nif [ -z ${RESILIO_NAME} ]; then\n    RESILIO_NAME=resilio\nfi\n\nif [ -z ${XIAOYA_NAME} ]; then\n    XIAOYA_NAME=xiaoya\nfi\n\nif [ -z ${AUTO_UPDATE_CONFIG} ]; then\n    AUTO_UPDATE_CONFIG=yes\nfi\n\nif [ -z ${FORCE_UPDATE_CONFIG} ]; then\n    FORCE_UPDATE_CONFIG=no\nfi\n\nif [ -z ${AUTO_UPDATE_ALL_PIKPAK} ]; then\n    AUTO_UPDATE_ALL_PIKPAK=yes\nfi\n\nmain\n"
        }
      ]
    }
  ]
}