{
  "metadata": {
    "timestamp": 1736568903678,
    "page": 120,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "marlonrichert/zsh-autocomplete",
      "stars": 5486,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0146484375,
          "content": "._zinit/\n*.zwc\n"
        },
        {
          "name": ".img",
          "type": "tree",
          "content": null
        },
        {
          "name": "Completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "Functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2020 Marlon Richert\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.8427734375,
          "content": "# Autocomplete for Zsh\nThis plugin for Zsh adds real-time type-ahead autocompletion to your command line, similar to what\nyou find desktop apps. While you type on the command line, available completions are listed\nautomatically; no need to press any keyboard shortcuts. Press <kbd>Tab</kbd> to insert the top\ncompletion or <kbd>‚Üì</kbd> to select a different one.\n\nAdditional features:\n* Out-of-the-box configuration of Zsh's completion system\n* Multi-line history search\n* Completion of recent directories\n* Useful [keyboard shortcuts](#keyboard-shortcuts)\n* Easy to [configure](#configuration)\n\n> Enjoy using this software? [Become a sponsor!](https://github.com/sponsors/marlonrichert) üíù\n\n## Requirements\nRecommended:\n* Tested to work with [Zsh](http://zsh.sourceforge.net) 5.8 and newer.\n\nMinimum:\n* Should theoretically work with Zsh 5.4, but I'm unable to test that.\n\n## Installation & setup\n> Note: In this manual, `%` represents the command line prompt. If you see it in front of a command,\n> it means you should run it on the command line, not put it in a script.\n\nFirst, install Autocomplete itself. Here are some way to do so:\n  * To use only releases (instead of the `main` branch), install `zsh-autocomplete` with a package\n    manager. As of this writing, this package is available through Homebrew, Nix, `pacman`, Plumage,\n    and (as `app-shells/zsh-autocomplete`) Portage.\n  * To always use the latest commit on the `main` branch, do one of the following:\n    * Use `pacman` to install `zsh-autocomplete-git`.\n    * Use a Zsh plugin manager to install `marlonrichert/zsh-autocomplete`. (If you don't have a\n      plugin manager yet, I recommend using [Znap](https://github.com/marlonrichert/zsh-snap).)\n    * Clone the repo directly:\n      ```sh\n      % git clone --depth 1 -- https://github.com/marlonrichert/zsh-autocomplete.git\n      ```\n\nAfter installing, make the following modifications to your shell config:\n* In your `.zshrc` file:\n  * Remove any calls to `compinit`.\n  * Add near the top, _before_ any calls to `compdef`:\n     ```sh\n     source /path/to/zsh-autocomplete/zsh-autocomplete.plugin.zsh\n     ```\n* When using **Ubuntu,** add to your `.zshenv` file:\n  ```sh\n  skip_global_compinit=1\n  ```\n* When using **Nix,** add to your `home.nix` file:\n  ```\n  programs.zsh.enableCompletion = false;\n  ```\n\nFinally, restart your shell. Here's two ways to do so:\n* Open a new tab or window in your terminal.\n* Replace the current shell with a new one:\n  ```sh\n  % exec zsh\n  ```\n\n### Updating\nIf you installed manually, run:\n```sh\n% git -C ~autocomplete pull\n```\nOtherwise, simply use your package manager or plugin manager's update mechanisms.\n\n### Uninstalling\n 1. Revert the actions you took to [install](#installation).\n 1. Restart your shell.\n\n## Keyboard shortcuts\n| `main` | `emacs` | `vicmd` | On the command line | In the menus\n| ---: | ---: | ---: | :--- | :---\n| <kbd>Enter</kbd><br><kbd>Return</kbd> | | | | Exit menu text search or exit  menu\n| <kbd>Tab</kbd> | | | Insert first listed menu item | Exit menu text search or exit menu\n| <kbd>Shift</kbd><kbd>Tab</kbd> | | | Insert substring occurring in all listed completions | Exit menu text search or exit menu\n| <kbd>‚Üì</kbd> | <kbd>Ctrl</kbd><kbd>N</kbd> | <kbd>J</kbd> | Cursor down or enter completion menu | Change selection\n| <kbd>‚Üë</kbd> | <kbd>Ctrl</kbd><kbd>P</kbd> | <kbd>K</kbd> | Cursor up or enter [history menu](#history-menu) | Change selection\n| <kbd>Alt</kbd><kbd>‚Üì</kbd> | <kbd>Alt</kbd><kbd>N</kbd> | <kbd>Ctrl</kbd><kbd>N</kbd> | Enter completion menu | Next section\n| <kbd>Alt</kbd><kbd>‚Üë</kbd> | <kbd>Alt</kbd><kbd>P</kbd> | <kbd>Ctrl</kbd><kbd>P</kbd> | Enter history menu | Previous section\n| <kbd>PgDn</kbd> | | | | Page down\n| <kbd>PgUp</kbd> | | | | Page up\n| | <kbd>Ctrl</kbd><kbd>X</kbd> <kbd>/</kbd> | | Toggle recent path search |\n| | <kbd>Ctrl</kbd><kbd>R</kbd> | <kbd>/</kbd> | Toggle history search | Start menu text search or go to previous match\n| | <kbd>Ctrl</kbd><kbd>S</kbd> | <kbd>?</kbd> | Start menu text search | Start menu text search or go to next match\n| | <kbd>Ctrl</kbd><kbd>Space</kbd> | <kbd>V</kbd> | Toggle selection mode | Add another item\n| | <kbd>Ctrl</kbd><kbd>-</kbd><br><kbd>Ctrl</kbd><kbd>/</kbd> | <kbd>U</kbd> | | Undo last item\n| | <kbd>Ctrl</kbd><kbd>G</kbd> | | | Undo all added items\n\n### Caveats\n* `main` is whichever keymap was aliased to `main` when Autocomplete was sourced.\n  * By default, this is `emacs`.\n  * If you run `bindkey -v` _before_ sourcing Autocomplete, then `main` will be `viins` when\n     Autocomplete installs keybindings.\n* Plugins or other scripts that you load _after_ loading Autocomplete may override these bindings.\n  If you find that some shortcuts don't work as expected, then you can fix them by\n  * changing the order in which you source your plugins or by\n  * running [`bindkey` commands](#reassign-keys) in your dotfiles _after_ you source your plugins.\n* Depending on your terminal, not all keybindings might be available to you.\n* Instead of <kbd>Alt</kbd>, your terminal might require you to press <kbd>Escape</kbd>,\n  <kbd>Option</kbd> or <kbd>Meta</kbd>.\n* In the menus, the bindings listed under `vicmd` require you to press <kbd>Alt</kbd> for each,\n  instead of just once.\n* The bindings listed under `emacs` and `vicmd` are always both active in the menus, no matter which\n  keymap you actually use. This is a limitation of Zsh.\n* What any other keys do while you're in a menu depends on the keymap from which you opened the\n  menu. See the Zsh manual section on [menu\n  selection](https://zsh.sourceforge.io/Doc/Release/Zsh-Modules.html#Menu-selection) for more info.\n\n## Configuration\nThe following are the most commonly requested ways to configure Autocomplete's behavior. To use any\nof these, add the code shown to your `.zshrc` file and modify it there, then restart you shell.\n\n### Reassign keys\nYou can use [Zsh's `bindkey`\ncommand](https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Zle-Builtins), _after_ loading\nAutocomplete, to customize your keybindings. Below are some examples of what you can do with this.\n\n#### Make <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd> cycle completions on the command line\nThis makes <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd>, when pressed on the command line,\ncycle through listed completions, without changing what's listed in the menu:\n```sh\nbindkey              '^I'         menu-complete\nbindkey \"$terminfo[kcbt]\" reverse-menu-complete\n```\n\n#### Make <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd> go to the menu\nThis makes <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd>, when pressed on the command line,\nenter the menu instead of inserting a completion:\n```sh\nbindkey              '^I' menu-select\nbindkey \"$terminfo[kcbt]\" menu-select\n```\n\n#### Make <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd> change the selection in the menu\nThis makes <kbd>Tab</kbd> and <kbd>Shift</kbd><kbd>Tab</kbd> move the selection in the menu right\nand left, respectively, instead of exiting the menu:\n```sh\nbindkey -M menuselect              '^I'         menu-complete\nbindkey -M menuselect \"$terminfo[kcbt]\" reverse-menu-complete\n```\n\n#### Make <kbd>‚Üê</kbd> and <kbd>‚Üí</kbd> always move the cursor on the command line\nThis makes <kbd>‚Üê</kbd> and <kbd>‚Üí</kbd> always move the cursor on the command line, even when you\nare in the menu:\n```sh\nbindkey -M menuselect  '^[[D' .backward-char  '^[OD' .backward-char\nbindkey -M menuselect  '^[[C'  .forward-char  '^[OC'  .forward-char\n```\n\n#### Make <kbd>Enter</kbd> always submit the command line\nThis makes <kbd>Enter</kbd> always submit the command line, even when you are in the menu:\n```sh\nbindkey -M menuselect '^M' .accept-line\n```\n\n#### Restore Zsh-default functionality\nAutocomplete overrides the behavior of some of Zsh's built-in keyboard widgets. To use the original\nwidget instead, prefix it with a `.`:\n```sh\nbindkey '^R' .history-incremental-search-backward\nbindkey '^S' .history-incremental-search-forward\n```\n\n### Pass arguments to `compinit`\nIf necessary, you can let Autocomplete pass arguments to `compinit` as follows:\n```sh\nzstyle '*:compinit' arguments -D -i -u -C -w\n```\n\n### First insert the common substring\nYou can make any completion widget first insert the longest sequence of characters\nthat will complete to all completions shown, if any, before inserting actual completions:\n```zsh\n# all Tab widgets\nzstyle ':autocomplete:*complete*:*' insert-unambiguous yes\n\n# all history widgets\nzstyle ':autocomplete:*history*:*' insert-unambiguous yes\n\n# ^S\nzstyle ':autocomplete:menu-search:*' insert-unambiguous yes\n```\n\n#### Insert prefix instead of substring\nWhen using the above, if you want each widget to first try to insert only the longest _prefix_ that\nwill complete to all completions shown, if any, then add the following:\n```zsh\nzstyle ':completion:*:*' matcher-list 'm:{[:lower:]-}={[:upper:]_}' '+r:|[.]=**'\n```\nNote, though, that this will also slightly change what completions are listed initially. This is a\nlimitation of the underlying implementation in Zsh.\n\n### Make <kbd>Enter</kbd> submit the command line straight from the menu\nBy default, pressing <kbd>Enter</kbd> in the menu search exits the search and\npressing it otherwise in the menu exits the menu.  If you instead want to make\n<kbd>Enter</kbd> _always_ submit the command line, use the following:\n```zsh\nbindkey -M menuselect '\\r' .accept-line\n```\n\n### Add or don't add a space after certain completions\nWhen inserting a completion, a space is added after certain types of\ncompletions.  The default list is as follows:\n```zsh\nzstyle ':autocomplete:*' add-space \\\n    executables aliases functions builtins reserved-words commands\n```\nModifying this list will change when a space is inserted.  If you change the\nlist to `'*'`, a space is always inserted.  If you put no elements in the list,\nthen a space is never inserted.\n\n### Start each command line in history search mode\nThis will make Autocomplete behave as if you pressed <kbd>Ctrl</kbd><kbd>R</kbd> at the start of each new command line:\n```zsh\nzstyle ':autocomplete:*' default-context history-incremental-search-backward\n```\n\n### Wait for a minimum amount of input\nTo suppress autocompletion until a minimum number of characters have been typed:\n```zsh\nzstyle ':autocomplete:*' min-input 3\n```\n\n### Wait with autocompletion until typing stops for a certain amount of seconds\nNormally, Autocomplete fetches completions after you stop typing for about 0.05 seconds. You can\nchange this as follows:\n```zsh\nzstyle ':autocomplete:*' delay 0.1  # seconds (float)\n```\n\n### Don't show completions if the current word matches a pattern\nFor example, this will stop completions from showing whenever the current word consists of two or more dots:\n```zsh\nzstyle ':autocomplete:*' ignored-input '..##'\n```\n\n## Change the max number of lines shown\nBy default, Autocomplete lets the history menu fill half of the screen, and limits all real-time\nlistings to a maximum of 16 lines. You can change these limits as follows:\n\n```zsh\n# Note: -e lets you specify a dynamically generated value.\n\n# Override default for all listings\n# $LINES is the number of lines that fit on screen.\nzstyle -e ':autocomplete:*:*' list-lines 'reply=( $(( LINES / 3 )) )'\n\n# Override for recent path search only\nzstyle ':autocomplete:recent-paths:*' list-lines 10\n\n# Override for history search only\nzstyle ':autocomplete:history-incremental-search-backward:*' list-lines 8\n\n# Override for history menu only\nzstyle ':autocomplete:history-search-backward:*' list-lines 2000\n```\n\nNote that for all real-time listings, the maximum number of lines is additionally capped to the\nnumber of lines that fit on screen. However, there is no such limit for the history menu. If that\ngenerates more lines than fit on screen, you can simply use <kbd>PgUp</kbd> and <kbd>PgDn</kbd> to\nscroll through the excess lines. (Note: On some terminals, you have to additionally hold\n<kbd>Shift</kbd> or, otherwise, it will scroll the terminal buffer instead.)\n\n### Use a custom backend for recent directories\nAutocomplete comes with its own backend for keeping track of and listing recent directories (which\nuses part of\n[`cdr`](https://zsh.sourceforge.io/Doc/Release/User-Contributions.html#Recent-Directories) under the\nhood). However, you can override this and supply Autocomplete with recent directories from any\nsource that you like. To do so, define a function like this:\n\n```sh\n+autocomplete:recent-directories() {\n  <code>\n  typeset -ga reply=( <any number of absolute paths> )\n}\n```\n\n#### Add a backend for recent files\nOut of the box, Autocomplete doesn't track or offer recent files. However, it will do so if you add\na backend for it:\n\n```sh\n+autocomplete:recent-files() {\n  <code>\n  typeset -ga reply=( <any number of absolute paths> )\n}\n```\n\n## Troubleshooting\nTry the steps in the\n[bug report template](.github/ISSUE_TEMPLATE/bug-report.md).\n\n## Author\n¬© 2020-2023 [Marlon Richert](https://github.com/marlonrichert)\n\n## License\nThis project is licensed under the MIT License.  See the [LICENSE](LICENSE) file\nfor details.\n"
        },
        {
          "name": "Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "run-tests.zsh",
          "type": "blob",
          "size": 0.28125,
          "content": "#!/bin/zsh -f\ncd $( git rev-parse --show-toplevel )\n\ngit --version\ntypeset -p1 PWD VENDOR OSTYPE =zsh ZSH_VERSION ZSH_PATCHLEVEL\nenv -i HOME=$( mktemp -d ) PATH=$PATH FPATH=$FPATH zsh -f -- \\\n    =clitest --list-run --progress dot --prompt '%' --color always \\\n        -- $PWD/Tests/*.md\n"
        },
        {
          "name": "zsh-autocomplete.plugin.zsh",
          "type": "blob",
          "size": 0.55859375,
          "content": "#!/bin/zsh\nunsetopt listbeep\n\n() {\n  zmodload -F zsh/parameter p:funcfiletrace\n  zmodload zsh/param/private\n\n  typeset -ga _autocomplete__func_opts=(\n    localoptions extendedglob clobber\n    NO_aliases localloops pipefail NO_shortloops NO_unset warncreateglobal\n  )\n  setopt $_autocomplete__func_opts[@]\n\n  typeset -ga _autocomplete__funcfiletrace=( $funcfiletrace )\n\n  local basedir=${${(%):-%x}:P:h}\n  hash -d autocomplete=$basedir zsh-autocomplete=$basedir\n\n  builtin autoload +X -Uz ~autocomplete/Functions/**/.autocomplete__*~*.zwc(D-:)\n  .autocomplete__main \"$@\"\n}\n"
        }
      ]
    }
  ]
}