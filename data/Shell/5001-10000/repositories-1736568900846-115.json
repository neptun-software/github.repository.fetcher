{
  "metadata": {
    "timestamp": 1736568900846,
    "page": 115,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nicolashery/mac-dev-setup",
      "stars": 5645,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".aliases",
          "type": "blob",
          "size": 1.0390625,
          "content": "#!/usr/bin/env bash\n\n# Detect which `ls` flavor is in use\nif ls --color > /dev/null 2>&1; then # GNU `ls`\n  colorflag=\"--color\"\nelse # macOS `ls`\n  colorflag=\"-G\"\nfi\n\n# List all files colorized in long format\nalias ll=\"ls -lF ${colorflag}\"\n\n# List all files colorized in long format, including dot files\nalias la=\"ls -laF ${colorflag}\"\n\n# List only directories\nalias lsd=\"ls -lF ${colorflag} | grep --color=never '^d'\"\n\n# Always use color output for `ls`\nalias ls=\"command ls ${colorflag}\"\nexport LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'\n"
        },
        {
          "name": ".bash_profile",
          "type": "blob",
          "size": 0.3515625,
          "content": "# Add `~/bin` to the `$PATH`\nexport PATH=\"$HOME/bin:$PATH\";\n\n# Load the shell dotfiles, and then some:\n# * ~/.path can be used to extend `$PATH`.\n# * ~/.extra can be used for other settings you don’t want to commit.\nfor file in ~/.{path,bash_prompt,exports,aliases,functions,extra}; do\n  [ -r \"$file\" ] && [ -f \"$file\" ] && source \"$file\";\ndone;\nunset file;\n"
        },
        {
          "name": ".bash_prompt",
          "type": "blob",
          "size": 1.2958984375,
          "content": "# @gf3’s Sexy Bash Prompt, inspired by “Extravagant Zsh Prompt”\n# Shamelessly copied from https://github.com/gf3/dotfiles\n\nif [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then\n  export TERM='gnome-256color';\nelif infocmp xterm-256color >/dev/null 2>&1; then\n  export TERM='xterm-256color';\nfi;\n\nif tput setaf 1 &> /dev/null; then\n  tput sgr0; # reset colors\n  bold=$(tput bold);\n  reset=$(tput sgr0);\n  # Oceanic Next colors\n  black=$(tput setaf 16);\n  blue=$(tput setaf 68);\n  cyan=$(tput setaf 73);\n  green=$(tput setaf 114);\n  orange=$(tput setaf 209);\n  magenta=$(tput setaf 176);\n  red=$(tput setaf 203);\n  white=$(tput setaf 66);\n  yellow=$(tput setaf 221);\nelse\n  bold='';\n  reset=\"\\e[0m\";\n  black=\"\\e[1;30m\";\n  blue=\"\\e[1;34m\";\n  cyan=\"\\e[1;36m\";\n  green=\"\\e[1;32m\";\n  orange=\"\\e[1;33m\";\n  magenta=\"\\e[1;35m\";\n  red=\"\\e[1;31m\";\n  white=\"\\e[1;37m\";\n  yellow=\"\\e[1;33m\";\nfi;\n\nfunction parse_git_dirty() {\n  [[ $(git status 2> /dev/null | tail -n1) != *\"nothing to commit\"* ]] && echo \"*\"\n}\n\nfunction parse_git_branch() {\n  git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e \"s/* \\(.*\\)/\\1$(parse_git_dirty)/\"\n}\n\nPS1=\"\\[${bold}\\]\\[$green\\]\\w\\[$white\\]\\$([[ -n \\$(git branch 2> /dev/null) ]] && echo \\\" on \\\")\\[$magenta\\]\\$(parse_git_branch)\\[$white\\]\\n\\$ \\[$reset\\]\"\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 0.6796875,
          "content": "[alias]\n  # Show verbose output about tags, branches or remotes\n  tags = tag -l\n  branches = branch -a\n  remotes = remote -v\n  # Pretty log output\n  hist = log --graph --pretty=format:'%Cred%h%Creset %s%C(yellow)%d%Creset %Cgreen(%cr)%Creset [%an]' --abbrev-commit --date=relative\n\n[color]\n  # Use colors in Git commands that are capable of colored output when\n  # outputting to the terminal. (This is the default setting in Git ≥ 1.8.4.)\n  ui = auto\n[color \"branch\"]\n  current = yellow reverse\n  local = yellow\n  remote = green\n[color \"diff\"]\n  meta = yellow bold\n  frag = magenta bold\n  old = red bold\n  new = green bold\n[color \"status\"]\n  added = yellow\n  changed = green\n  untracked = cyan\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1611328125,
          "content": "# Folder view configuration files\n.DS_Store\nDesktop.ini\n\n# Thumbnail cache files\n._*\nThumbs.db\n\n# Files that might appear on external disks\n.Spotlight-V100\n.Trashes\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 29.244140625,
          "content": "# macOS Dev Setup\n\nThis document describes how I set up my developer environment on a new MacBook or iMac. We will set up popular programming languages (for example [Node](http://nodejs.org/) (JavaScript), [Python](http://www.python.org/), and [Ruby](http://www.ruby-lang.org/)). You may not need all of them for your projects, although I recommend having them set up as they always come in handy.\n\nThe document assumes you are new to Mac, but can also be useful if you are reinstalling a system and need some reminder. The steps below were tested on **macOS High Sierra** (10.13), but should work for more recent versions as well.\n\n**Contributing**: If you find any mistakes in the steps described below, or if any of the commands are outdated, do let me know! For any other suggestions, please understand if I don't include everything. This guide was originally written for some friends getting started with programming on a Mac, and as a personal reference for myself. I'm trying to keep it simple!\n\n- [System update](#system-update)\n- [System preferences](#system-preferences)\n- [Security](#security)\n- [iTerm2](#iterm2)\n- [Homebrew](#homebrew)\n- [Git](#git)\n- [Visual Studio Code](#visual-studio-code)\n- [Vim](#vim)\n- [Python](#python)\n- [Node.js](#nodejs)\n- [Ruby](#ruby)\n- [Heroku](#heroku)\n- [PostgreSQL](#postgresql)\n- [Redis](#redis)\n- [Elasticsearch](#elasticsearch)\n- [Projects folder](#projects-folder)\n- [Apps](#apps)\n\n## System update\n\nFirst thing you need to do, on any OS actually, is update the system! For that: **Apple Icon > About This Mac** then **Software Update...**.\n\n## System preferences\n\nIf this is a new computer, there are a couple of tweaks I like to make to the System Preferences. Feel free to follow these, or to ignore them, depending on your personal preferences.\n\nIn **Apple Icon > System Preferences**:\n\n- Trackpad > Tap to click\n- Keyboard > Key Repeat > Fast (all the way to the right)\n- Keyboard > Delay Until Repeat > Short (all the way to the right)\n- Dock > Automatically hide and show the Dock\n\n## Security\n\nI recommend checking that basic security settings are enabled. You will be happy to have done so if ever your Mac is lost or stolen.\n\nIn **Apple Icon > System Preferences**:\n\n- Users & Groups: If you haven't already set a password for your user during the initial set up, you should do so now\n- Security & Privacy > General: Require password immediately after sleep or screen saver begins (you can keep a grace period of a couple minutes if you prefer, but I like to know that my computer locks as soon as I close it)\n- Security & Privacy > FileVault: Make sure FileVault disk encryption is enabled\n- iCloud: If you haven't already done so during set up, enable Find My Mac\n\n## iTerm2\n\n### Install\n\nSince we're going to be spending a lot of time in the command-line, let's install a better terminal than the default one. Download and install [iTerm2](http://www.iterm2.com/).\n\nIn **Finder**, drag and drop the **iTerm** Application file into the **Applications** folder.\n\nYou can now launch iTerm, through the **Launchpad** for instance.\n\nLet's just quickly change some preferences. In **iTerm2 > Preferences...**, under the tab **General**, uncheck **Confirm closing multiple sessions** and **Confirm \"Quit iTerm2 (Cmd+Q)\" command** under the section **Closing**.\n\nIn the tab **Profiles**, create a new one with the \"+\" icon, and rename it to your first name for example. Then, select **Other Actions... > Set as Default**. Under the section **General** set **Working Directory** to be **Reuse previous session's directory**. Finally, under the section **Window**, change the size to something better, like **Columns: 125** and **Rows: 35**.\n\nWhen done, hit the red \"X\" in the upper left (saving is automatic in macOS preference panes). Close the window and open a new one to see the size change.\n\n### Beautiful terminal\n\nSince we spend so much time in the terminal, we should try to make it a more pleasant and colorful place. What follows might seem like a lot of work, but trust me, it'll make the development experience so much better.\n\nFirst let's add some color. There are many great color schemes out there, but if you don't know where to start you can try [Atom One Dark](https://github.com/nathanbuchar/atom-one-dark-terminal). Download the iTerm presets for the theme by running:\n\n```\ncd ~/Downloads\ncurl -o \"Atom One Dark.itermcolors\" https://raw.githubusercontent.com/nathanbuchar/atom-one-dark-terminal/master/scheme/iterm/One%20Dark.itermcolors\ncurl -o \"Atom One Light.itermcolors\" https://raw.githubusercontent.com/nathanbuchar/atom-one-dark-terminal/master/scheme/iterm/One%20Light.itermcolors\n```\n\nThen, in **iTerm2 Preferences**, under **Profiles** and **Colors**, go to **Color Presets... > Import...**, find and open the **Atom One Dark.itermcolors** file we just downloaded. Repeat these steps for **Atom One Light.itermcolors**.  Now open **Color Presets...** again and select **Atom One Dark** to activate the dark theme (or choose the light them if that's your preference).\n\nNot a lot of colors yet. We need to tweak a little bit our Unix user's profile for that. This is done (on macOS and Linux), in the `~/.bash_profile` text file (`~` stands for the user's home directory).\n\nWe'll come back to the details of that later, but for now, just download the files [.bash_profile](https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_profile), [.bash_prompt](https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_prompt), [.aliases](https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.aliases) attached to this document into your home directory (`.bash_profile` is the one that gets loaded, I've set it up to call the others):\n\n```\ncd ~\ncurl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_profile\ncurl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.bash_prompt\ncurl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.aliases\n```\n\nWith that, open a new terminal tab (**Cmd+T**) and see the change! Try the list commands: `ls`, `ls -lh` (aliased to `ll`), `ls -lha` (aliased to `la`).\n\nNow we have a terminal we can work with!\n\n(Thanks to Mathias Bynens for his awesome [dotfiles](https://github.com/mathiasbynens/dotfiles).)\n\n## Homebrew\n\nPackage managers make it so much easier to install and update applications (for Operating Systems) or libraries (for programming languages). The most popular one for macOS is [Homebrew](http://brew.sh/).\n\n### Install\n\nAn important dependency before Homebrew can work is the **Command Line Developer Tools** for **Xcode**. These include compilers that will allow you to build things from source. You can install them directly from the terminal with:\n\n```\nxcode-select --install\n```\n\nOnce that is done, we can install Homebrew by copy-pasting the installation command from the [Homebrew homepage](http://brew.sh/) inside the terminal:\n\n```\n/usr/bin/ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n```\n\nFollow the steps on the screen. You will be prompted for your user password so Homebrew can set up the appropriate permissions.\n\nOnce installation is complete, you can run the following command to make sure everything works:\n\n```\nbrew doctor\n```\n\n### Usage\n\nTo install a package (or **Formula** in Homebrew vocabulary) simply type:\n\n```\nbrew install <formula>\n```\n\nTo see if any of your packages need to be updated:\n\n```\nbrew outdated\n```\n\nTo update a package:\n\n```\nbrew upgrade <formula>\n```\n\nHomebrew keeps older versions of packages installed, in case you want to rollback. That rarely is necessary, so you can do some cleanup to get rid of those old versions:\n\n```\nbrew cleanup\n```\n\nTo see what you have installed (with their version numbers):\n\n```\nbrew list --versions\n```\n\n### Homebrew Services\n\nA nice extension to Homebrew is [Homebrew Services](https://github.com/Homebrew/homebrew-services). It will automatically launch things like databases when your computer starts, so you don't have to do it manually every time.\n\nHomebrew Services will automatically install itself the first time you run it, so there is nothing special to do.\n\nAfter installing a service (for example a database), it should automatically add itself to Homebrew Services. If not, you can add it manually with:\n\n```\nbrew services <formula>\n```\n\nStart a service with:\n\n```\nbrew services start <formula>\n```\n\nAt anytime you can view which services are running with:\n\n```\nbrew services list\n```\n\n## Git\n\nmacOS comes with a pre-installed version of [Git](http://git-scm.com/), but we'll install our own through Homebrew to allow easy upgrades and not interfere with the system version. To do so, simply run:\n\n```\nbrew install git\n```\n\nWhen done, to test that it installed fine you can run:\n\n```\nwhich git\n```\n\nThe output should be `/usr/local/bin/git`.\n\nLet's set up some basic configuration. Download the [.gitconfig](https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitconfig) file to your home directory:\n\n```\ncd ~\ncurl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitconfig\n```\n\nIt will add some color to the `status`, `branch`, and `diff` Git commands, as well as a couple aliases. Feel free to take a look at the contents of the file, and add to it to your liking.\n\nNext, we'll define your Git user (should be the same name and email you use for [GitHub](https://github.com/) and [Heroku](http://www.heroku.com/)):\n\n```\ngit config --global user.name \"Your Name Here\"\ngit config --global user.email \"your_email@youremail.com\"\n```\n\nThey will get added to your `.gitconfig` file.\n\nOn a Mac, it is important to remember to add `.DS_Store` (a hidden macOS system file that's put in folders) to your project `.gitignore` files. You also set up a global `.gitignore` file, located for instance in your home directory (but you'll want to make sure any collaborators also do it):\n\n```\ncd ~\ncurl -O https://raw.githubusercontent.com/nicolashery/mac-dev-setup/master/.gitignore\ngit config --global core.excludesfile ~/.gitignore\n```\n\n## Visual Studio Code\n\nWith the terminal, the text editor is a developer's most important tool. Everyone has their preferences, but if you're just getting started and looking for something simple that works, [Visual Studio Code](https://code.visualstudio.com/) is a pretty good option.\n\nGo ahead and [download](https://code.visualstudio.com/Download) it. Open the **.dmg** file, drag-and-drop in the **Applications** folder, you know the drill now. Launch the application.\n\n**Note**: At this point I'm going to create a shortcut on the macOS Dock for both for Visual Studio Code and iTerm. To do so, right-click on the running application and select **Options > Keep in Dock**.\n\nJust like the terminal, let's configure our editor a little. Go to **Code > Preferences > Settings**. In the very top-right of the interface you should see an icon with brackets that appeared **{ }** (on hover, it should say \"Open Settings (JSON)\"). Click on it, and paste the following:\n\n```json\n{\n  \"editor.tabSize\": 2,\n  \"editor.rulers\": [80],\n  \"files.insertFinalNewline\": true,\n  \"files.trimTrailingWhitespace\": true,\n  \"workbench.editor.enablePreview\": false\n}\n```\n\nFeel free to tweak these to your preference. When done, save the file and close it.\n\nPasting the above JSON snippet was handy to quickly customize things, but for further setting changes feel free to search in the \"Settings\" panel that opened first (shortcut **Cmd+,**). When you're happy with your setup, you can save the JSON to quickly restore it on a new machine.\n\nIf you remember only one keyboard shortcut in VS Code, it should be **Cmd+Shift+P**. This opens the **Command Palette**, from which you can run pretty much anything.\n\nLet's open the command palette now, and search for `Shell Command: Install 'code' command in PATH`. Hit enter when it shows up. This will install the command-line tool `code` to quickly open VS Code from the terminal. When in a projects directory, you'll be able to run:\n\n```\ncd myproject/\ncode .\n```\n\nVS Code is very extensible. To customize it further, open the **Extensions** tab on the left.\n\nLet's do that now to customize the color of our editor. Search for the [Atom One Dark Theme](https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onedark) extension, select it and click **Install**. Repeat this for the [Atom One Light Theme](https://marketplace.visualstudio.com/items?itemName=akamud.vscode-theme-onelight).\n\nFinally, activate the theme by going to **Code > Preferences > Color Theme** and selecting **Atom One Dark** (or **Atom One Light** if that is your preference).\n\n## Vim\n\nAlthough VS Code will be our main editor, it is a good idea to learn some very basic usage of [Vim](http://www.vim.org/). It is a very popular text editor inside the terminal, and is usually pre-installed on any Unix system.\n\nFor example, when you run a Git commit, it will open Vim to allow you to type the commit message.\n\nI suggest you read a tutorial on Vim. Grasping the concept of the two \"modes\" of the editor, **Insert** (by pressing `i`) and **Normal** (by pressing `Esc` to exit Insert mode), will be the part that feels most unnatural. Also, it is good to know that typing `:x` when in Normal mode will save and exit. After that, it's just remembering a few important keys.\n\nVim's default settings aren't great, and you could spend a lot of time tweaking your configuration (the `.vimrc` file). But if you only use Vim occasionally, you'll be happy to know that [Tim Pope](https://github.com/tpope) has put together some sensible defaults to quickly get started.\n\nUsing Vim's built-in package support, install these settings by running:\n\n```\nmkdir -p ~/.vim/pack/tpope/start\ncd ~/.vim/pack/tpope/start\ngit clone https://tpope.io/vim/sensible.git\n```\n\nWith that, Vim will look a lot better next time you open it!\n\n## Python\n\nmacOS, like Linux, ships with [Python](http://python.org/) already installed. But you don't want to mess with the system Python (some system tools rely on it, etc.), so we'll install our own version using [pyenv](https://github.com/yyuu/pyenv). This will also allow us to manage multiple versions of Python (ex: 2.7 and 3) should we need to.\n\nInstall `pyenv` via Homebrew by running:\n\n```\nbrew install pyenv\n```\n\nWhen finished, you should see instructions to add something to your profile. Open your `.bash_profile` in the home directory (you can use `code ~/.bash_profile`), and add the following line:\n\n```bash\nif command -v pyenv 1>/dev/null 2>&1; then eval \"$(pyenv init -)\"; fi\n```\n\nSave the file and reload it with:\n\n```\nsource ~/.bash_profile\n```\n\nBefore installing a new Python version, the [pyenv wiki](https://github.com/pyenv/pyenv/wiki) recommends having a few dependencies available:\n\n```\nbrew install openssl readline sqlite3 xz zlib\n```\n\nWe can now list all available Python versions by running:\n\n```\npyenv install --list\n```\n\nLook for the latest 3.x version (or 2.7.x), and install it (replace the `.x.x` with actual numbers):\n\n```\npyenv install 3.x.x\n```\n\nList the Python versions you have locally with:\n\n```\npyenv versions\n```\n\nThe star (`*`) should indicate we are still using the `system` version, which is the default. I recommend leaving it as the default as some [Node.js](https://nodejs.org/en/) packages will use it in their installation process.\n\nYou can switch your current terminal to another Python version with:\n\n```\npyenv shell 3.x.x\n```\n\nYou should now see that version when running:\n\n```\npython --version\n```\n\nIn a project directory, you can use:\n\n```\npyenv local 3.x.x\n```\n\nThis will save that project's Python version to a `.python-version` file. Next time you enter the project's directory from a terminal, `pyenv` will automatically load that version for you.\n\nFor more information, see the [pyenv commands](https://github.com/yyuu/pyenv/blob/master/COMMANDS.md) documentation.\n\n### pip\n\n[pip](https://pip.pypa.io) was also installed by `pyenv`. It is the package manager for Python.\n\nHere are a couple Pip commands to get you started. To install a Python package:\n\n```\npip install <package>\n```\n\nTo upgrade a package:\n\n```\npip install --upgrade <package>\n```\n\nTo see what's installed:\n\n```\npip freeze\n```\n\nTo uninstall a package:\n\n```\npip uninstall <package>\n```\n\n### virtualenv\n\n[virtualenv](https://virtualenv.pypa.io) is a tool that creates an isolated Python environment for each of your projects.\n\nFor a particular project, instead of installing required packages globally, it is best to install them in an isolated folder, that will be managed by `virtualenv`. The advantage is that different projects might require different versions of packages, and it would be hard to manage that if you install packages globally.\n\nInstead of installing and using `virtualenv` directly, we'll use the dedicated `pyenv` plugin [pyenv-virtualenv](https://github.com/yyuu/pyenv-virtualenv) which will make things a bit easier for us. Install it via Homebrew:\n\n```\nbrew install pyenv-virtualenv\n```\n\nAfter installation, add the following line to your `.bash_profile`:\n\n```bash\nif which pyenv-virtualenv-init > /dev/null; then eval \"$(pyenv virtualenv-init -)\"; fi\n```\n\nAnd reload it with:\n\n```\nsource ~/.bash_profile\n```\n\nNow, let's say you have a project called `myproject`. You can set up a virtualenv for that project and the Python version it uses (replace `3.x.x` with the version you want):\n\n```\npyenv virtualenv 3.x.x myproject\n```\n\nSee the list of virtualenvs you created with:\n\n```\npyenv virtualenvs\n```\n\nTo use your project's virtualenv, you need to **activate** it first (in every terminal where you are working on your project):\n\n```\npyenv activate myproject\n```\n\nIf you run `pyenv virtualenvs` again, you should see a star (`*`) next to the active virtualenv.\n\nNow when you install something:\n\n```\npip install <package>\n```\n\nIt will get installed in that virtualenv's folder, and not conflict with other projects.\n\nYou can also set your project's `.python-version` to point to a virtualenv you created:\n\n```\npyenv local myproject\n```\n\nNext time you enter that project's directory, `pyenv` will automatically load the virtualenv for you.\n\n### Anaconda and Miniconda\n\nThe Anaconda/Miniconda distributions of Python come with many useful tools for scientific computing.\n\nYou can install them using `pyenv`, for example (replace `x.x.x` with an actual version number):\n\n```\npyenv install miniconda3-x.x.x\n```\n\nAfter loading an Anaconda or Miniconda Python distribution into your shell, you can create [conda](https://docs.conda.io/) environments (which are similar to virtualenvs):\n\n```\npyenv shell miniconda3-x.x.x\nconda create --name  mycondaproject\nconda activate mycondaproject\n```\n\nInstall packages, for example the [Jupyter Notebook](https://jupyter.org/), using:\n\n```\nconda install jupyter\n```\n\nYou should now be able to run the notebook:\n\n```\njupyter notebook\n```\n\nDeactivate the environment, and return to the default Python version with:\n\n```\nconda deactivate\npyenv shell --unset\n```\n\n### Known issue: `gettext` not found by `git` after installing Anaconda/Miniconda\n\nIf you installed an Anaconda/Miniconda distribution, you may start seeing an error message when using certain `git` commands, similar to this one:\n\n```\npyenv: gettext.sh: command not found\n\nThe `gettext.sh' command exists in these Python versions:\n  miniconda3-latest\n```\n\nIf that is the case, you can use the following [workaround](https://github.com/pyenv/pyenv/issues/688#issuecomment-428675578):\n\n```\nbrew install gettext\n```\n\nThen add this line to your `.bash_profile`:\n\n```bash\n# Workaround for: https://github.com/pyenv/pyenv/issues/688#issuecomment-428675578\nexport PATH=\"/usr/local/opt/gettext/bin:$PATH\"\n```\n\n## Node.js\n\nThe recommended way to install [Node.js](http://nodejs.org/) is to use [nvm](https://github.com/creationix/nvm) (Node Version Manager) which allows you to manage multiple versions of Node.js on the same machine.\n\nInstall `nvm` by copy-pasting the [install script command](https://github.com/creationix/nvm#install--update-script) into your terminal.\n\nOnce that is done, open a new terminal and verify that it was installed correctly by running:\n\n```\ncommand -v nvm\n```\n\nView the all available stable versions of Node with:\n\n```\nnvm ls-remote --lts\n```\n\nInstall the latest stable version with:\n\n```\nnvm install node\n```\n\nIt will also set the first version installed as your default version. You can install another specific version, for example Node 10, with:\n\n```\nnvm install 10\n```\n\nAnd switch between versions by using:\n\n```\nnvm use 10\nnvm use default\n```\n\nSee which versions you have install with:\n\n```\nnvm ls\n```\n\nChange the default version with:\n\n```\nnvm alias default 10\n```\n\nIn a project's directory you can create a `.nvmrc` file containing the Node.js version the project uses, for example:\n\n```\necho \"10\" > .nvmrc\n```\n\nNext time you enter the project's directory from a terminal, you can load the correct version of Node.js by running:\n\n```\nnvm use\n```\n\n### npm\n\nInstalling Node also installs the [npm](https://npmjs.org/) package manager.\n\nTo install a package:\n\n```\nnpm install <package> # Install locally\nnpm install -g <package> # Install globally\n```\n\nTo install a package and save it in your project's `package.json` file:\n\n```\nnpm install --save <package>\n```\n\nTo see what's installed:\n\n```\nnpm list --depth 1 # Local packages\nnpm list -g --depth 1 # Global packages\n```\n\nTo find outdated packages (locally or globally):\n\n```\nnpm outdated [-g]\n```\n\nTo upgrade all or a particular package:\n\n```\nnpm update [<package>]\n```\n\nTo uninstall a package:\n\n```\nnpm uninstall --save <package>\n```\n\n## Ruby\n\nLike Python, [Ruby](http://www.ruby-lang.org/) is already installed on Unix systems. But we don't want to mess around with that installation. More importantly, we want to be able to use the latest version of Ruby.\n\n### Install\n\nThe recommended way to install Ruby is to use [rbenv](https://github.com/rbenv/rbenv), which allows you to manage multiple versions of Ruby on the same machine. You can install `rbenv` with Homebrew:\n\n```\nbrew install rbenv\n```\n\nAfter installation, add the following line to your `.bash_profile`:\n\n```bash\neval \"$(rbenv init -)\"\n```\n\nAnd reload it with:\n\n```\nsource ~/.bash_profile\n```\n\n### Usage\n\nThe following command will show you which versions of Ruby are available to install:\n\n```\nrbenv install --list\n```\n\nYou can find the latest version in that list and install it with (replace `.x.x` with actual version numbers):\n\n```\nrbenv install 2.x.x\n```\n\nRun the following to see which versions you have installed:\n\n```\nrbenv versions\n```\n\nThe start (`*`) will show you that we are currently using the default `system` version. You can switch your terminal to use the one you just installed:\n\n```\nrbenv shell 2.x.x\n```\n\nYou can also set it as the default version if you want:\n\n```\nrbenv global 2.x.x\n```\n\nIn a specific project's directory, you can ask `rbenv` to create a `.ruby-version` file. Next time you enter that project's directory from the terminal, it will automatically load the correct Ruby version:\n\n```\nrbenv local 2.x.x\n```\n\nCheck anytime which version you are using with:\n\n```\nrbenv version\n```\n\nSee [rbenv's command reference](https://github.com/rbenv/rbenv#command-reference) for more information.\n\n### RubyGems & Bundler\n\n[RubyGems](http://rubygems.org/), the Ruby package manager, was also installed:\n\n```\nwhich gem\n```\n\nThe first thing you want to do after installing a new Ruby version is to install [Bundler](https://bundler.io/). This tool will allow you to set up separate environments for your different Ruby projects, so their required gem versions won't conflict with each other. Install Bundler with:\n\n```\ngem install bundler\n```\n\nIn a new Ruby project directory, create a new `Gemfile` with:\n\n```\nbundle init\n```\n\nAdd a dependency to the `Gemfile`, for example the [Jekyll]() static site generator:\n\n```ruby\nsource \"https://rubygems.org\"\n\ngem \"jekyll\"\n```\n\nThen install the project's dependencies with:\n\n```\nbundle install\n```\n\nMake sure you check in both the `Gemfile` and `Gemfile.lock` into your Git repository.\n\nUpdate a specific dependency with:\n\n```\nbundle update <gem>\n```\n\nFor more information, see the [Bundler documentation](https://bundler.io/docs.html).\n\n## Heroku\n\n[Heroku](http://www.heroku.com/) is a [Platform-as-a-Service](http://en.wikipedia.org/wiki/Platform_as_a_service) (PaaS) that makes it really easy to deploy your apps. There are other similar solutions out there, but Heroku is among the most popular. Not only does it make a developer's life easier, but I find that having Heroku deployment in mind when building an app forces you to follow modern app development [best practices](http://www.12factor.net/).\n\nAssuming that you have an account (sign up if you don't), let's install the [Heroku CLI](https://devcenter.heroku.com/articles/heroku-cli):\n\n```\nbrew tap heroku/brew\nbrew install heroku\n```\n\nLogin to your Heroku account using:\n\n```\nheroku login\n```\n\n(This will prompt you to open a page in your web browser and log in to your Heroku account.)\n\nOnce logged-in, you're ready to deploy apps! Heroku has great [Getting Started](https://devcenter.heroku.com/start) guides for different languages, so I'll let you refer to that. Heroku uses Git to push code for deployment, so make sure your app is under Git version control. A quick cheat sheet (if you've used Heroku before):\n\n```\ncd myapp/\nheroku create myapp\ngit push heroku master\nheroku ps\nheroku logs -t\n```\n\nThe [Heroku Dev Center](https://devcenter.heroku.com/) is full of great resources, so be sure to check it out!\n\n## PostgreSQL\n\n[PostgreSQL](https://www.postgresql.org/) is a popular relational database, and Heroku has first-class support for it.\n\nInstall PostgreSQL using Homebrew:\n\n```\nbrew install postgresql\n```\n\nIt will automatically add itself to Homebrew Services. Start it with:\n\n```\nbrew services start postgresql\n```\n\nIf you reboot your machine, PostgreSQL will be restarted at login.\n\n### GUI\n\nYou can interact with your SQL database by running `psql` in the terminal.\n\nIf you prefer a GUI (Graphical User Interface), [Postico](https://eggerapps.at/postico/) has a simple free version that let's you explore tables and run SQL queries.\n\n## Redis\n\n[Redis](http://redis.io/) is a fast, in-memory, key-value store, that uses the disk for persistence. It complements nicely a database such as PostgreSQL. There are a lot of [interesting things](http://oldblog.antirez.com/post/take-advantage-of-redis-adding-it-to-your-stack.html) that you can do with it. For example, it's often used for session management or caching by web apps, but it has many other uses.\n\nTo install Redis, use Homebrew:\n\n```\nbrew install redis\n```\n\nStart it through Homebrew Services with:\n\n```\nbrew services start redis\n```\n\nI'll let you refer to Redis' [documentation](http://redis.io/documentation) or other tutorials for more information.\n\n## Elasticsearch\n\n[Elasticsearch](https://www.elastic.co/products/elasticsearch) is a distributed search and analytics engine. It uses an HTTP REST API, making it easy to work with from any programming language.\n\nYou can use elasticsearch for things such as real-time search results, autocomplete, recommendations, machine learning, and more.\n\n### Install\n\nElasticsearch runs on Java, so check if you have it installed by running:\n\n```bash\njava -version\n```\n\nIf Java isn't installed yet, dismiss the window that just appeared by clicking \"Ok\", and install Java via Homebrew:\n\n```\nbrew cask install homebrew/cask-versions/java8\n```\n\nNext, install Elasticsearch with:\n\n```bash\nbrew install elasticsearch\n```\n\n### Usage\n\nStart the Elasticsearch server with:\n\n```bash\nbrew services start elasticsearch\n```\n\nTest that the server is working correctly by running:\n\n```bash\ncurl -XGET 'http://localhost:9200/'\n```\n\n(You may need to wait a little bit for it to boot up if you just started the service.)\n\nElasticsearch's [documentation](https://www.elastic.co/guide/en/elasticsearch/reference/current/index.html) is more of a reference. To get started, you can also take a look at [Elasticsearch: The Definitive Guide](https://www.elastic.co/guide/en/elasticsearch/guide/master/index.html).\n\n### GUI\n\nYou can interact with the Elasticsearch server using `curl`, or anything that can send an HTTP request.\n\nHowever, if you prefer a graphical interface, you can take a look at [Dejavu](https://opensource.appbase.io/dejavu/). You can easily install it via the [Dejavu Chrome Extension](https://chrome.google.com/webstore/detail/dejavu-elasticsearch-web/jopjeaiilkcibeohjdmejhoifenbnmlh).\n\n## Projects folder\n\nThis really depends on how you want to organize your files, but I like to put all my version-controlled projects in `~/Projects`. Other documents I may have, or things not yet under version control, I like to put in `~/Dropbox` (if you have [Dropbox](https://www.dropbox.com/) installed), or `~/Documents` if you prefer to use [iCloud Drive](https://support.apple.com/en-ca/HT206985).\n\n## Apps\n\nHere is a quick list of some apps I use, and that you might find useful as well:\n\n- [1Password](https://1password.com/): Securely store your login and passwords, and access them from all your devices. **($3/month)**\n- [Dropbox](https://www.dropbox.com/): File syncing to the cloud. It is cross-platform, but if all your devices are Apple you may prefer [iCloud Drive](https://support.apple.com/en-ca/HT206985). **(Free for 2GB)**\n- [Postman](https://www.getpostman.com/): Easily make HTTP requests. Useful to test your REST APIs. **(Free for basic features)**\n- [GitHub Desktop](https://desktop.github.com/): I do everything through the `git` command-line tool, but I like to use GitHub Desktop just to review the diff of my changes. **(Free)**\n- [Spectacle](https://www.spectacleapp.com/): Move and resize windows with keyboard shortcuts. **(Free)**\n"
        }
      ]
    }
  ]
}