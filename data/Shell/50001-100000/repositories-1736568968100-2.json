{
  "metadata": {
    "timestamp": 1736568968100,
    "page": 2,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjQ=",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nvm-sh/nvm",
      "stars": 81564,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.1513671875,
          "content": "HEAD\n.cache\nv*\nalias\n\n# For testing\ntest/bak\n.urchin.log\n.urchin_stdout\ntest/**/test_output\ntest/**/.nvmrc\n\nnode_modules/\nnpm-debug.log\n\n.DS_Store\ncurrent\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.642578125,
          "content": "root = true\n\n[*]\ntab_width = 2\nindent_size = 2\ncharset = utf-8\nend_of_line = lf\nindent_style = space\ninsert_final_newline = true\ntrim_trailing_whitespace = true\n\n[*.txt]\nindent_size = false\n\n[test/fast/Listing versions/Running 'nvm ls' calls into nvm_alias]\nindent_size = false\n\n[test/fast/Listing versions/Running 'nvm ls --no-alias' does not call into nvm_alias]\nindent_size = false\n\n[test/fast/Unit tests/mocks/**]\ninsert_final_newline = off\n\n[test/**/.urchin*]\ninsert_final_newline = off\n\n[Makefile]\nindent_style = tab\n\n[test/fixtures/nvmrc/**]\nindent_style = off\ninsert_final_newline = off\n\n[test/fixtures/actual/alias/empty]\ninsert_final_newline = off\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0185546875,
          "content": "* text=auto eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2705078125,
          "content": "# gitignore\nHEAD\n.cache\nv*\nalias\n\n# For testing\ntest/bak\n.urchin.log\n.urchin_stdout\ntest/**/test_output\ntest/**/.nvmrc\n\nnode_modules/\nnpm-debug.log\n\n.DS_Store\ncurrent\n/default-packages\n\n# Only apps should have lockfiles\nnpm-shrinkwrap.json\npackage-lock.json\nyarn.lock\n\ntarget/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1005859375,
          "content": "[submodule \"test/fixtures/nvmrc\"]\n  path = test/fixtures/nvmrc\n  url = git@github.com:nvm-sh/nvmrc.git\n"
        },
        {
          "name": ".mailmap",
          "type": "blob",
          "size": 0.0498046875,
          "content": "Michał Gołębiowski-Owczarek <m.goleb@gmail.com>\n"
        },
        {
          "name": ".npmrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "package-lock=false\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.58984375,
          "content": "language: generic\ndist: focal\naddons:\n  apt:\n    packages:\n      - zsh\n    #  - ksh\n    #  - gcc-4.8\n    #  - g++-4.8\n\n# https://gist.github.com/iedemam/9830045\ngit:\n  submodules: false\n\ncache:\n  ccache: true\n  directories:\n    - $TRAVIS_BUILD_DIR/.cache\n    - $TRAVIS_BUILD_DIR/node_modules\nbefore_install:\n  - sudo sed -i 's/mozilla\\/DST_Root_CA_X3.crt/!mozilla\\/DST_Root_CA_X3.crt/g' /etc/ca-certificates.conf\n  - sudo update-ca-certificates -f\n\n  # https://gist.github.com/iedemam/9830045\n  - sed -i 's/git@github.com:/https:\\/\\/github.com\\//' .gitmodules\n  - git submodule update --init --recursive\n\n  - $SHELL --version 2> /dev/null || dpkg -s $SHELL 2> /dev/null || which $SHELL\n  - curl --version\n  - wget --version\n  - bash --version | head\n  - zsh  --version\n  - dpkg -s dash | grep ^Version | awk '{print $2}'\n  # install python\n  - pyenv local 2.7.18 || pyenv install 2.7.18\n  - pyenv local 2.7.18 || echo 'pyenv failed'\n  - python -V\ninstall:\n  - if [ -z \"${SHELLCHECK-}\" ]; then nvm install 16 && nvm unalias default && npm install && npm prune && npm ls urchin doctoc eclint dockerfile_lint; fi\n  - '[ -z \"$WITHOUT_CURL\" ] || sudo apt-get remove curl -y'\nscript:\n  - if [ -n \"${SHELL-}\" ] && [ -n \"${TEST_SUITE}\" ]; then if [ \"${TEST_SUITE}\" = 'installation_iojs' ] || [ \"${TEST_SUITE}\" = 'xenial' ]; then travis_retry make TEST_SUITE=$TEST_SUITE URCHIN=\"$(npm bin)/urchin\" test-$SHELL ; else make TEST_SUITE=$TEST_SUITE URCHIN=\"$(npm bin)/urchin\" test-$SHELL; fi; fi\nbefore_cache:\n  - if [ -n \"$WITHOUT_CURL\" ]; then sudo apt-get install curl -y ; fi\njobs:\n  include:\n    - env: SHELL=bash TEST_SUITE=installation_node\n      dist: xenial\n    - env: SHELL=bash TEST_SUITE=installation_node WITHOUT_CURL=1\n      dist: xenial\n    - env: SHELL=sh TEST_SUITE=installation_node\n      dist: xenial\n    - env: SHELL=sh TEST_SUITE=installation_node WITHOUT_CURL=1\n      dist: xenial\n    - env: SHELL=dash TEST_SUITE=installation_node\n      dist: xenial\n    - env: SHELL=dash TEST_SUITE=installation_node WITHOUT_CURL=1\n      dist: xenial\n    - env: SHELL=zsh TEST_SUITE=installation_node\n      dist: xenial\n    - env: SHELL=zsh TEST_SUITE=installation_node WITHOUT_CURL=1\n      dist: xenial\n    #- env: SHELL=ksh TEST_SUITE=installation_node\n    #  dist: xenial\n    #- env: SHELL=ksh TEST_SUITE=installation_node WITHOUT_CURL=1\n    #  dist: xenial\n    - env: SHELL=bash TEST_SUITE=xenial\n      dist: xenial\n    - env: SHELL=sh TEST_SUITE=xenial\n      dist: xenial\n    - env: SHELL=dash TEST_SUITE=xenial\n      dist: xenial\n    - env: SHELL=zsh TEST_SUITE=xenial\n      dist: xenial\n    #- env: SHELL=ksh TEST_SUITE=xenial\n    #  dist: xenial\nenv:\n  global:\n    - CXX=g++\n    - CC=gcc\n    - PATH=\"$(echo $PATH | sed 's/::/:/')\"\n    - PATH=\"/usr/lib/ccache/:$PATH\"\n    - NVM_DIR=\"${TRAVIS_BUILD_DIR}\"\n  matrix:\n    - SHELL=sh TEST_SUITE=fast\n    - SHELL=dash TEST_SUITE=fast\n    - SHELL=bash TEST_SUITE=fast\n    - SHELL=zsh TEST_SUITE=fast\n    #  - SHELL=ksh TEST_SUITE=fast\n    - SHELL=sh TEST_SUITE=slow\n    - SHELL=dash TEST_SUITE=slow\n    - SHELL=bash TEST_SUITE=slow\n    - SHELL=zsh TEST_SUITE=slow\n    #  - SHELL=ksh TEST_SUITE=slow\n    - SHELL=sh TEST_SUITE=installation_iojs\n    - SHELL=sh TEST_SUITE=installation_iojs WITHOUT_CURL=1\n    - SHELL=dash TEST_SUITE=installation_iojs\n    - SHELL=dash TEST_SUITE=installation_iojs WITHOUT_CURL=1\n    - SHELL=bash TEST_SUITE=installation_iojs\n    - SHELL=bash TEST_SUITE=installation_iojs WITHOUT_CURL=1\n    - SHELL=zsh TEST_SUITE=installation_iojs\n    - SHELL=zsh TEST_SUITE=installation_iojs WITHOUT_CURL=1\n    #  - SHELL=ksh TEST_SUITE=installation_iojs\n    #  - SHELL=ksh TEST_SUITE=installation_iojs WITHOUT_CURL=1\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 7.3828125,
          "content": "# Code of Conduct\n\n`nvm`, as a member project of the OpenJS Foundation, uses [Contributor Covenant v2.1](https://www.contributor-covenant.org/version/2/1/code_of_conduct/) as their code of conduct. The full text is included [below](#contributor-covenant-code-of-conduct) in English, and translations are available from the Contributor Covenant organisation:\n\n- [contributor-covenant.org/translations](https://www.contributor-covenant.org/translations)\n- [github.com/ContributorCovenant](https://github.com/ContributorCovenant/contributor_covenant/tree/release/content/version/2/1)\n\nRefer to the sections on reporting and escalation in this document for the specific emails that can be used to report and escalate issues.\n\n## Reporting\n\n### Project Spaces\n\nFor reporting issues in spaces related to `nvm` please use the email `ljharb@gmail.com`. `nvm` handles CoC issues related to the spaces that it maintains. Projects maintainers commit to:\n\n- maintain the confidentiality with regard to the reporter of an incident\n- to participate in the path for escalation as outlined in the section on Escalation when required.\n\n### Foundation Spaces\n\nFor reporting issues in spaces managed by the OpenJS Foundation, for example, repositories within the OpenJS organization, use the email `report@lists.openjsf.org`.\nThe Cross Project Council (CPC) is responsible for managing these reports and commits to:\n\n- maintain the confidentiality with regard to the reporter of an incident\n- to participate in the path for escalation as outlined in the section on Escalation when required.\n\n## Escalation\n\nThe OpenJS Foundation maintains a Code of Conduct Panel (CoCP).\nThis is a foundation-wide team established to manage escalation when a reporter believes that a report to a member project or the CPC has not been properly handled.\nIn order to escalate to the CoCP send an email to `coc-escalation@lists.openjsf.org`.\n\nFor more information, refer to the full [Code of Conduct governance document](https://github.com/openjs-foundation/cross-project-council/blob/HEAD/CODE_OF_CONDUCT.md).\n\n---\n\n# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our community a harassment-free experience for everyone, regardless of age, body size, visible or invisible disability, ethnicity, sex characteristics, gender identity and expression, level of experience, education, socio-economic status, nationality, personal appearance, race, caste, color, religion, or sexual identity and orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming, diverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our community include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes, and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of acceptable behavior and will take appropriate and fair corrective action in response to any behavior that they deem inappropriate, threatening, offensive, or harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, and will communicate reasons for moderation decisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when an individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported to the community leaders responsible for enforcement at [@ljharb](ljharb@gmail.com).\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the reporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining the consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behavior deemed unprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing clarity around the nature of the violation and an explanation of why the behavior was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series of actions.\n\n**Consequence**: A warning with consequences for continued behavior. No interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, for a specified period of time. This includes avoiding interactions in community spaces as well as external channels like social media. Violating these terms may lead to a temporary or permanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including sustained inappropriate behavior.\n\n**Consequence**: A temporary ban from any sort of interaction or public communication with the community for a specified period of time. No public or private interaction with the people involved, including unsolicited interaction with those enforcing the Code of Conduct, is allowed during this period. Violating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community standards, including sustained inappropriate behavior, harassment of an individual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within the community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 2.1, available at\n[https://www.contributor-covenant.org/version/2/1/code_of_conduct.html][v2.1].\n\nCommunity Impact Guidelines were inspired by\n[Mozilla's code of conduct enforcement ladder][Mozilla CoC].\n\nFor answers to common questions about this code of conduct, see the FAQ at\n[https://www.contributor-covenant.org/faq][FAQ]. Translations are available at\n[https://www.contributor-covenant.org/translations][translations].\n\n[homepage]: https://www.contributor-covenant.org\n[v2.1]: https://www.contributor-covenant.org/version/2/1/code_of_conduct.html\n[Mozilla CoC]: https://github.com/mozilla/diversity\n[FAQ]: https://www.contributor-covenant.org/faq\n[translations]: https://www.contributor-covenant.org/translations\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 5.6806640625,
          "content": "# Contributing\n\n:+1::tada: First off, thanks for taking the time to contribute to `nvm`! :tada::+1:\n\nWe love pull requests and issues, they're our favorite.\n\nThe following is a set of guidelines for contributing to `nvm` managed by [@LJHarb](https://github.com/ljharb), which is hosted on GitHub. These are mostly guidelines, not rules. Use your best judgment, and feel free to propose changes to this document in a pull request.\n\nHowever, before submitting, please review the following:\n\n# How Can I Contribute?\n\nThere are lots of ways to get involved. Here are some suggestions of things we'd love some help with.\n\n## Resolving existing issues\n\nYou can consider helping out with issues already requiring attention - look for a \"help wanted\" label.\n\n### How Do I Submit a (Good) Bug Report? :bug:\n\nExplain the problem and include additional details to help maintainers reproduce the problem:\n\n* **Use a clear and descriptive title** for the issue to identify the problem.\n\n* **Describe the exact steps which reproduce the problem** in as many details as possible. For example, start by explaining which command exactly you used in the terminal. When listing steps, **don't just say what you did, but explain how you did it**. For example, if you moved the cursor to the end of a line, explain if you used the mouse, or a keyboard shortcut or a command, and if so which one?\n* **Provide specific examples to demonstrate the steps**. Include links to files or Github projects, or copy/pasteable snippets, which you use in those examples. If you're providing snippets in the issue, use [Markdown code blocks](https://help.github.com/articles/markdown-basics/#multiple-lines).\n* **Describe the behavior you observed after following the steps** and point out what exactly is the problem with that behavior.\n* **Explain which behavior you expected to see instead and why.**\n* **Provide as much context as possible** in order to help others verify and ultimately fix the issue. This includes giving us as much details as possible about your environment, so we can more easily confirm the problem.\n\n## Documentation\n\nWe are happy to welcome contributions from anyone willing to improve documentation by adding missing information or making it more consistent and coherent.\n\n# Dev Environment\n\nPlease refer to the [README](README.md) for complete instructions how to install, update, as well as troubleshoot `nvm` in your environment depending on your Operating System.\n\n# Style Guide / Coding conventions\n\n### Pull requests\n\n#### Before creating a pull request\n\n  - Please include tests. Changes with tests will be merged very quickly.\n  - Please manually confirm that your changes work in `bash`, `sh`/`dash`, `ksh`, and `zsh`. Fast tests do run in these shells, but it's nice to manually verify also.\n  - Please maintain consistent whitespace - 2-space indentation, trailing newlines in all files, etc.\n  - Any time you make a change to your PR, please rebase freshly on top of the default branch. Nobody likes merge commits.\n\nEven if you don't have all of these items covered, please still feel free to submit a PR/issue! Someone else may be inspired and volunteer to complete it for you.\n\n#### How to create a pull request\n\nCreate a new branch\n\n```\ngit checkout -b issue1234\n```\n\nCommit the changes to your branch, including a coherent commit message that follows our [standards](#commit-messages)\n\n```\ngit commit -a\n```\n\nBefore sending the pull request, make sure your code is running on the latest available code by rebasing onto the upstream source\n\n```\ngit fetch upstream\ngit rebase upstream/main\n```\n\nVerify your changes\n\n```\nnpm test\n```\n\nPush your changes\n\n```\ngit push origin issue1234\n```\n\nSend the [pull request](https://docs.github.com/en/pull-requests), make requested changes, and get merged.\n\n### Commit Messages\n\n* Limit the first line of the commit message (message summary) to 72 characters or less.\n* Use the present tense (\"Add feature\" not \"Added feature\") and imperative mood (\"Move cursor to...\" not \"Moves cursor to...\") when providing a description of what you did.\n* If your PR addresses an issue, reference it in the body of the commit message.\n* See the rest of the conventions [here](https://gist.github.com/ljharb/772b0334387a4bee89af24183114b3c7)\n\n#### Commit message example\n\n```\n[Tag]: Short description of what you did\n\nLonger description here if necessary\n\nFixes #1234\n```\n\n> **Note:**  Add co-authors to your commit message for commits with multiple authors\n\n```\nCo-authored-by: Name Here <email@here>\n```\n\n\n# Code of Conduct\n[Code of Conduct](https://github.com/nvm-sh/nvm/blob/HEAD/CODE_OF_CONDUCT.md)\n\n# Where can I ask for help?\nIf you have any questions, please contact [@LJHarb](mailto:ljharb@gmail.com).\n\n# Developer's Certificate of Origin 1.1\n\nBy making a contribution to this project, I certify that:\n  - The contribution was created in whole or in part by me and I have the right to submit it under the open source license indicated in the file; or\n  - The contribution is based upon previous work that, to the best of my knowledge, is covered under an appropriate open source license and I have the right under that license to submit that work with modifications, whether created in whole or in part by me, under the same open source license (unless I am permitted to submit under a different license), as indicated in the file; or\n  - The contribution was provided directly to me by some other person who certified (a), (b) or (c) and I have not modified it.\n  - I understand and agree that this project and the contribution are public and that a record of the contribution (including all personal information I submit with it, including my sign-off) is maintained indefinitely and may be redistributed consistent with this project or the open source license(s) involved.\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 3.515625,
          "content": "# Dockerized nvm development environment\n#\n# This Dockerfile is for building nvm development environment only,\n# not for any distribution/production usage.\n#\n# Please note that it'll use about 1.2 GB disk space and about 15 minutes to\n# build this image, it depends on your hardware.\n\nFROM ubuntu:22.04\nLABEL maintainer=\"Peter Dave Hello <hsu@peterdavehello.org>\"\nLABEL name=\"nvm-dev-env\"\nLABEL version=\"latest\"\n\n# Set the SHELL to bash with pipefail option\nSHELL [\"/bin/bash\", \"-o\", \"pipefail\", \"-c\"]\n\n# Prevent dialog during apt install\nENV DEBIAN_FRONTEND noninteractive\n\n# ShellCheck version\nENV SHELLCHECK_VERSION=0.7.0\n\n# Pick a Ubuntu apt mirror site for better speed\n# ref: https://launchpad.net/ubuntu/+archivemirrors\nENV UBUNTU_APT_SITE ubuntu.cs.utah.edu\n\n# Replace origin apt package site with the mirror site\nRUN sed -E -i \"s/([a-z]+.)?archive.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\nRUN sed -i \"s/security.ubuntu.com/$UBUNTU_APT_SITE/g\" /etc/apt/sources.list\n\n# Install apt packages\nRUN apt update         && \\\n    apt upgrade -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\"  && \\\n    apt install -y -o Dpkg::Options::=\"--force-confdef\" -o Dpkg::Options::=\"--force-confold\"     \\\n        coreutils             \\\n        util-linux            \\\n        bsdutils              \\\n        file                  \\\n        openssl               \\\n        libssl-dev            \\\n        locales               \\\n        ca-certificates       \\\n        ssh                   \\\n        wget                  \\\n        patch                 \\\n        sudo                  \\\n        htop                  \\\n        dstat                 \\\n        vim                   \\\n        tmux                  \\\n        curl                  \\\n        git                   \\\n        jq                    \\\n        zsh                   \\\n        ksh                   \\\n        gcc                   \\\n        g++                   \\\n        xz-utils              \\\n        build-essential       \\\n        bash-completion       && \\\n    apt-get clean\n\nRUN wget https://github.com/koalaman/shellcheck/releases/download/v$SHELLCHECK_VERSION/shellcheck-v$SHELLCHECK_VERSION.linux.x86_64.tar.xz -O- | \\\n    tar xJvf - shellcheck-v$SHELLCHECK_VERSION/shellcheck          && \\\n    mv shellcheck-v$SHELLCHECK_VERSION/shellcheck /bin             && \\\n    rmdir shellcheck-v$SHELLCHECK_VERSION\nRUN shellcheck -V\n\n# Set locale\nRUN locale-gen en_US.UTF-8\n\n# Print tool versions\nRUN bash --version | head -n 1\nRUN zsh --version\nRUN ksh --version || true\nRUN dpkg -s dash | grep ^Version | awk '{print $2}'\nRUN git --version\nRUN curl --version\nRUN wget --version\n\n# Add user \"nvm\" as non-root user\nRUN useradd -ms /bin/bash nvm\n\n# Copy and set permission for nvm directory\nCOPY . /home/nvm/.nvm/\nRUN chown nvm:nvm -R \"/home/nvm/.nvm\"\n\n# Set sudoer for \"nvm\"\nRUN echo 'nvm ALL=(ALL) NOPASSWD: ALL' >> /etc/sudoers\n\n# Switch to user \"nvm\" from now\nUSER nvm\n\n# nvm\nRUN echo 'export NVM_DIR=\"$HOME/.nvm\"'                                       >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/nvm.sh\" ] && . \"$NVM_DIR/nvm.sh\"  # This loads nvm' >> \"$HOME/.bashrc\"\nRUN echo '[ -s \"$NVM_DIR/bash_completion\" ] && . \"$NVM_DIR/bash_completion\" # This loads nvm bash_completion' >> \"$HOME/.bashrc\"\n\n# nodejs and tools\nRUN bash -c 'source $HOME/.nvm/nvm.sh   && \\\n    nvm install node                    && \\\n    npm install -g doctoc urchin eclint dockerfile_lint && \\\n    npm install --prefix \"$HOME/.nvm/\"'\n\n# Set WORKDIR to nvm directory\nWORKDIR /home/nvm/.nvm\n\nENTRYPOINT [\"/bin/bash\"]\n"
        },
        {
          "name": "GOVERNANCE.md",
          "type": "blob",
          "size": 0.4560546875,
          "content": "# `nvm` Project Governance\n\n## Maintainers\n  - [@ljharb](https://github.com/ljharb)\n\nMaintainers are responsible for issue/PR triage, feature additions, maintenance, bugfixes, security fixes, releases, promoting existing contributors to maintainers, managing repo and CI configuration, etc.\n\n## Contributors\n\nAnyone who contributes code or content or time, via issues or pull requests or otherwise. Contributors do not have any additional permissions on the project.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0869140625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2010 Tim Caswell\n\nCopyright (c) 2014 Jordan Harband\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 5.3125,
          "content": "\t# Since we rely on paths relative to the makefile location, abort if make isn't being run from there.\n$(if $(findstring /,$(MAKEFILE_LIST)),$(error Please only invoke this makefile from the directory it resides in))\n\t# Note: With Travis CI:\n\t#  - the path to urchin is passed via the command line.\n\t#  - the other utilities are NOT needed, so we skip the test for their existence.\nURCHIN := urchin\nifeq ($(findstring /,$(URCHIN)),) # urchin path was NOT passed in.\n\t\t# Add the local npm packages' bin folder to the PATH, so that `make` can find them, when invoked directly.\n\t\t# Note that rather than using `$(npm bin)` the 'node_modules/.bin' path component is hard-coded, so that invocation works even from an environment\n\t\t# where npm is (temporarily) unavailable due to having deactivated an nvm instance loaded into the calling shell in order to avoid interference with tests.\n\texport PATH := $(shell printf '%s' \"$$PWD/node_modules/.bin:$$PATH\")\n\t\t# The list of all supporting utilities, installed with `npm install`.\n\tUTILS := $(URCHIN) replace semver\n\t\t# Make sure that all required utilities can be located.\n\tUTIL_CHECK := $(or $(shell PATH=\"$(PATH)\" which $(UTILS) >/dev/null && echo 'ok'),$(error Did you forget to run `npm install` after cloning the repo? At least one of the required supporting utilities not found: $(UTILS)))\nendif\n\t# The files that need updating when incrementing the version number.\nVERSIONED_FILES := nvm.sh install.sh README.md package.json\n\t# Define all shells to test with. Can be overridden with `make SHELLS=... <target>`.\nSHELLS := sh bash dash zsh # ksh (#574)\n\t# Generate 'test-<shell>' target names from specified shells.\n\t# The embedded shell names are extracted on demand inside the recipes.\nSHELL_TARGETS := $(addprefix test-,$(SHELLS))\n\t# Define the default test suite(s). This can be overridden with `make TEST_SUITE=<...>  <target>`.\n\t# Test suites are the names of subfolders of './test'.\nTEST_SUITE := $(shell find ./test/* -type d -prune -exec basename {} \\;)\n\n\n# Default target (by virtue of being the first non '.'-prefixed in the file).\n.PHONY: _no-target-specified\n_no-target-specified:\n\t$(error Please specify the target to make - `make list` shows targets. Alternatively, use `npm test` to run the default tests; `npm run` shows all tests)\n\n# Lists all targets defined in this makefile.\n.PHONY: list\nlist:\n\t@$(MAKE) -pRrn : -f $(MAKEFILE_LIST) 2>/dev/null | awk -v RS= -F: '/^# File/,/^# Finished Make data base/ {if ($$1 !~ \"^[#.]\") {print $$1}}' | egrep -v -e '^[^[:alnum:]]' -e '^$@$$' | sort\n\n# Set of test-<shell> targets; each runs the specified test suites for a single shell.\n# Note that preexisting NVM_* variables are unset to avoid interfering with tests, except when running the Travis tests (where NVM_DIR must be passed in and the env. is assumed to be pristine).\n.PHONY: $(SHELL_TARGETS)\n$(SHELL_TARGETS):\n\t@shell='$@'; shell=$${shell##*-}; \\\n\twhich \"$$shell\" >/dev/null || { printf '\\033[0;31m%s\\033[0m\\n' \"WARNING: Cannot test with shell '$$shell': not found.\" >&2; exit 0; } && \\\n\tprintf '\\n\\033[0;34m%s\\033[0m\\n' \"Running tests in $$shell\"; \\\n\t[ -z \"$$TRAVIS_BUILD_DIR\" ] && [ -z \"$$GITHUB_ACTIONS\" ] && for v in $$(set | awk -F'=' '$$1 ~ \"^NVM_\" { print $$1 }'); do unset $$v; done && unset v; \\\n\tfor suite in $(TEST_SUITE); do \\\n\t\techo \"Running test suite: $$suite\"; \\\n\t\t$(URCHIN) -f -s $$shell test/$$suite || exit; \\\n\tdone\n\n# All-tests target: invokes the specified test suites for ALL shells defined in $(SHELLS).\n.PHONY: test\ntest: $(SHELL_TARGETS)\n\n.PHONY: _ensure-tag\n_ensure-tag:\nifndef TAG\n\t$(error Please invoke with `make TAG=<new-version> release`, where <new-version> is either an increment specifier (patch, minor, major, prepatch, preminor, premajor, prerelease), or an explicit major.minor.patch version number)\nendif\n\n# Ensures there are version tags in repository\n.PHONY: _ensure-current-version\n\n_ensure-current-version:\nifeq ($(shell git tag),$(printf ''))\n\t@git fetch --tags\nendif\n\n# Ensures that the git workspace is clean.\n.PHONY: _ensure-clean\n_ensure-clean:\n\t@[ -z \"$$(git status --porcelain --untracked-files=no || echo err)\" ] || { echo \"Workspace is not clean; please commit changes first.\" >&2; exit 2; }\n\n# Makes a release; invoke with `make TAG=<versionOrIncrementSpec> release`.\n.PHONY: release\nrelease: _ensure-tag _ensure-clean _ensure-current-version\n\t@old_ver=`git describe --abbrev=0 --tags --match 'v[0-9]*.[0-9]*.[0-9]*'` || { echo \"Failed to determine current version.\" >&2; exit 1; }; old_ver=$${old_ver#v}; \\\n\tnew_ver=`echo \"$(TAG)\" | sed 's/^v//'`; new_ver=$${new_ver:-patch}; \\\n\tif printf \"$$new_ver\" | grep -q '^[0-9]'; then \\\n\t\tsemver \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be major.minor.patch' >&2; exit 2; }; \\\n\t\tsemver -r \"> $$old_ver\" \"$$new_ver\" >/dev/null || { echo 'Invalid version number specified: $(TAG) - must be HIGHER than current one.' >&2; exit 2; } \\\n\telse \\\n\t\tnew_ver=`semver -i \"$$new_ver\" \"$$old_ver\"` || { echo 'Invalid version-increment specifier: $(TAG)' >&2; exit 2; } \\\n\tfi; \\\n\tprintf \"=== Bumping version **$$old_ver** to **$$new_ver** before committing and tagging:\\n=== TYPE 'proceed' TO PROCEED, anything else to abort: \" && read response && [ \"$$response\" = 'proceed' ] || { echo 'Aborted.' >&2; exit 2; }; \\\n\treplace \"$$old_ver\" \"$$new_ver\" $(VERSIONED_FILES) && \\\n\tgit commit -m \"v$$new_ver\" $(VERSIONED_FILES) && \\\n\tgit tag -a \"v$$new_ver\"\n"
        },
        {
          "name": "PROJECT_CHARTER.md",
          "type": "blob",
          "size": 2.8662109375,
          "content": "# `nvm` Charter\n\nnvm is a version manager for Node.js, designed to be installed per-user, and invoked per-shell. nvm works on any POSIX-compliant shell (sh, dash, ksh, zsh, bash), in particular on these platforms: unix, macOS, and Windows WSL.\n\n## Section 0: Guiding Principles\n\nThe `nvm` project is part of the [OpenJS Foundation][openjs foundation], which operates transparently, openly, collaboratively, and ethically. Project proposals, timelines, and status must not merely be open, but also easily visible to outsiders.\n\n## Section 1: Scope\n\n`nvm` is a node version manager, focused on making it easy to install and manage multiple Node.js versions. Any features related to managing the installation and removal of Node.js on any node-supported platform are potentially in scope.\n\n## Section 2: Relationship with OpenJS Foundation CPC.\n\nTechnical leadership for the projects within the [OpenJS Foundation][openjs foundation] is delegated to the projects through their project charters by the [OpenJS Foundation Cross-Project Council](https://openjsf.org/about/governance/) (CPC). In the case of the `nvm` project, it is delegated to the [`nvm` Maintainers](README.md#maintainers) (the “Maintainers”). The OpenJS Foundation's business leadership is the Board of Directors (the “Board”).\n\nThis `nvm` Charter reflects a carefully constructed balanced role for the Maintainers and the CPC in the governance of the OpenJS Foundation. The charter amendment process is for the Maintainers to propose changes using simple majority of the full Maintainers, the proposed changes being subject to review and approval by the CPC. The CPC may additionally make amendments to the project charter at any time, though the CPC will not interfere with day-to-day discussions, votes or meetings of the Maintainers.\n\n### 2.1 Other Formal Project Relationships\n\nSection Intentionally Left Blank\n\n## Section 3: `nvm`'s Maintainers Governing Body\n\n`nvm` is governed by its [maintainers](README.md#maintainers).\n\n## Section 4: Roles & Responsibilities\n\nThe roles and responsibilities of `nvm`'s Maintainers are described in [GOVERNANCE.md](./GOVERNANCE.md).\n\n### Section 4.1 Project Operations & Management\n\nSection Intentionally Left Blank\n\n### Section 4.2: Decision-making, Voting, and/or Elections\n\nSection Intentionally Left Blank\n\n### Section 4.3: Other Project Roles\n\nSection Intentionally Left Blank\n\n## Section 5: Definitions\n\n  - *Contributors*: contribute code or other artifacts, but do not have the right to commit to the codebase. Contributors work with the project’s maintainers to have code committed to the code base. A Contributor may be promoted to a Maintainer by the Maintainers. Contributors should rarely be encumbered by the Maintainers and never by the CPC or OpenJS Foundation Board.\n\n  - *Maintainers*: Contributors with any kind of decision-making authority in the project.\n\n[openjs foundation]: https://openjsf.org\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 47.072265625,
          "content": "<a href=\"https://github.com/nvm-sh/logos\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://raw.githubusercontent.com/nvm-sh/logos/HEAD/nvm-logo-white.svg\" />\n    <img src=\"https://raw.githubusercontent.com/nvm-sh/logos/HEAD/nvm-logo-color.svg\" height=\"50\" alt=\"nvm project logo\" />\n  </picture>\n</a>\n\n\n# Node Version Manager [![Build Status](https://app.travis-ci.com/nvm-sh/nvm.svg?branch=master)][3] [![nvm version](https://img.shields.io/badge/version-v0.40.1-yellow.svg)][4] [![CII Best Practices](https://bestpractices.dev/projects/684/badge)](https://bestpractices.dev/projects/684)\n\n<!-- To update this table of contents, ensure you have run `npm install` then `npm run doctoc` -->\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [Intro](#intro)\n- [About](#about)\n- [Installing and Updating](#installing-and-updating)\n  - [Install & Update Script](#install--update-script)\n    - [Additional Notes](#additional-notes)\n    - [Troubleshooting on Linux](#troubleshooting-on-linux)\n    - [Troubleshooting on macOS](#troubleshooting-on-macos)\n    - [Ansible](#ansible)\n  - [Verify Installation](#verify-installation)\n  - [Important Notes](#important-notes)\n  - [Git Install](#git-install)\n  - [Manual Install](#manual-install)\n  - [Manual Upgrade](#manual-upgrade)\n- [Usage](#usage)\n  - [Long-term Support](#long-term-support)\n  - [Migrating Global Packages While Installing](#migrating-global-packages-while-installing)\n  - [Default Global Packages From File While Installing](#default-global-packages-from-file-while-installing)\n  - [io.js](#iojs)\n  - [System Version of Node](#system-version-of-node)\n  - [Listing Versions](#listing-versions)\n  - [Setting Custom Colors](#setting-custom-colors)\n    - [Persisting custom colors](#persisting-custom-colors)\n    - [Suppressing colorized output](#suppressing-colorized-output)\n  - [Restoring PATH](#restoring-path)\n  - [Set default node version](#set-default-node-version)\n  - [Use a mirror of node binaries](#use-a-mirror-of-node-binaries)\n    - [Pass Authorization header to mirror](#pass-authorization-header-to-mirror)\n  - [.nvmrc](#nvmrc)\n  - [Deeper Shell Integration](#deeper-shell-integration)\n    - [Calling `nvm use` automatically in a directory with a `.nvmrc` file](#calling-nvm-use-automatically-in-a-directory-with-a-nvmrc-file)\n      - [bash](#bash)\n      - [zsh](#zsh)\n      - [fish](#fish)\n- [Running Tests](#running-tests)\n- [Environment variables](#environment-variables)\n- [Bash Completion](#bash-completion)\n  - [Usage](#usage-1)\n- [Compatibility Issues](#compatibility-issues)\n- [Installing nvm on Alpine Linux](#installing-nvm-on-alpine-linux)\n  - [Alpine Linux 3.13+](#alpine-linux-313)\n  - [Alpine Linux 3.5 - 3.12](#alpine-linux-35---312)\n- [Uninstalling / Removal](#uninstalling--removal)\n  - [Manual Uninstall](#manual-uninstall)\n- [Docker For Development Environment](#docker-for-development-environment)\n- [Problems](#problems)\n- [macOS Troubleshooting](#macos-troubleshooting)\n- [WSL Troubleshooting](#wsl-troubleshooting)\n- [Maintainers](#maintainers)\n- [Project Support](#project-support)\n- [Enterprise Support](#enterprise-support)\n- [License](#license)\n- [Copyright notice](#copyright-notice)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Intro\n\n`nvm` allows you to quickly install and use different versions of node via the command line.\n\n**Example:**\n```sh\n$ nvm use 16\nNow using node v16.9.1 (npm v7.21.1)\n$ node -v\nv16.9.1\n$ nvm use 14\nNow using node v14.18.0 (npm v6.14.15)\n$ node -v\nv14.18.0\n$ nvm install 12\nNow using node v12.22.6 (npm v6.14.5)\n$ node -v\nv12.22.6\n```\n\nSimple as that!\n\n\n## About\nnvm is a version manager for [node.js](https://nodejs.org/en/), designed to be installed per-user, and invoked per-shell. `nvm` works on any POSIX-compliant shell (sh, dash, ksh, zsh, bash), in particular on these platforms: unix, macOS, and [windows WSL](https://github.com/nvm-sh/nvm#important-notes).\n\n<a id=\"installation-and-update\"></a>\n<a id=\"install-script\"></a>\n## Installing and Updating\n\n### Install & Update Script\n\nTo **install** or **update** nvm, you should run the [install script][2]. To do that, you may either download and run the script manually, or use the following cURL or Wget command:\n```sh\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n```sh\nwget -qO- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n\nRunning either of the above commands downloads a script and runs it. The script clones the nvm repository to `~/.nvm`, and attempts to add the source lines from the snippet below to the correct profile file (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`).\n\n<a id=\"profile_snippet\"></a>\n```sh\nexport NVM_DIR=\"$([ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\")\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n```\n\n#### Additional Notes\n\n- If the environment variable `$XDG_CONFIG_HOME` is present, it will place the `nvm` files there.</sub>\n\n- You can add `--no-use` to the end of the above script (...`nvm.sh --no-use`) to postpone using `nvm` until you manually [`use`](#usage) it.\n\n- You can customize the install source, directory, profile, and version using the `NVM_SOURCE`, `NVM_DIR`, `PROFILE`, and `NODE_VERSION` variables.\nEg: `curl ... | NVM_DIR=\"path/to/nvm\"`. Ensure that the `NVM_DIR` does not contain a trailing slash.\n\n- The installer can use `git`, `curl`, or `wget` to download `nvm`, whichever is available.\n\n- You can instruct the installer to not edit your shell config (for example if you already get completions via a [zsh nvm plugin](https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/nvm)) by setting `PROFILE=/dev/null` before running the `install.sh` script. Here's an example one-line command to do that: `PROFILE=/dev/null bash -c 'curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash'`\n\n#### Troubleshooting on Linux\n\nOn Linux, after running the install script, if you get `nvm: command not found` or see no feedback from your terminal after you type `command -v nvm`, simply close your current terminal, open a new terminal, and try verifying again.\nAlternatively, you can run the following commands for the different shells on the command line:\n\n*bash*: `source ~/.bashrc`\n\n*zsh*: `source ~/.zshrc`\n\n*ksh*: `. ~/.profile`\n\nThese should pick up the `nvm` command.\n\n#### Troubleshooting on macOS\n\nSince OS X 10.9, `/usr/bin/git` has been preset by Xcode command line tools, which means we can't properly detect if Git is installed or not. You need to manually install the Xcode command line tools before running the install script, otherwise, it'll fail. (see [#1782](https://github.com/nvm-sh/nvm/issues/1782))\n\nIf you get `nvm: command not found` after running the install script, one of the following might be the reason:\n\n  - Since macOS 10.15, the default shell is `zsh` and nvm will look for `.zshrc` to update, none is installed by default. Create one with `touch ~/.zshrc` and run the install script again.\n\n  - If you use bash, the previous default shell, your system may not have `.bash_profile` or `.bashrc` files where the command is set up. Create one of them with `touch ~/.bash_profile` or `touch ~/.bashrc` and run the install script again. Then, run `. ~/.bash_profile` or `. ~/.bashrc` to pick up the `nvm` command.\n\n  - You have previously used `bash`, but you have `zsh` installed. You need to manually add [these lines](#manual-install) to `~/.zshrc` and run `. ~/.zshrc`.\n\n  - You might need to restart your terminal instance or run `. ~/.nvm/nvm.sh`. Restarting your terminal/opening a new tab/window, or running the source command will load the command and the new configuration.\n\n  - If the above didn't help, you might need to restart your terminal instance. Try opening a new tab/window in your terminal and retry.\n\nIf the above doesn't fix the problem, you may try the following:\n\n  - If you use bash, it may be that your `.bash_profile` (or `~/.profile`) does not source your `~/.bashrc` properly. You could fix this by adding `source ~/<your_profile_file>` to it or following the next step below.\n\n  - Try adding [the snippet from the install section](#profile_snippet), that finds the correct nvm directory and loads nvm, to your usual profile (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`).\n\n  - For more information about this issue and possible workarounds, please [refer here](https://github.com/nvm-sh/nvm/issues/576)\n\n**Note** For Macs with the Apple Silicon chip, node started offering **arm64** arch Darwin packages since v16.0.0 and experimental **arm64** support when compiling from source since v14.17.0. If you are facing issues installing node using `nvm`, you may want to update to one of those versions or later.\n\n#### Ansible\n\nYou can use a task:\n\n```yaml\n- name: Install nvm\n  ansible.builtin.shell: >\n    curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n  args:\n    creates: \"{{ ansible_env.HOME }}/.nvm/nvm.sh\"\n```\n\n### Verify Installation\n\nTo verify that nvm has been installed, do:\n\n```sh\ncommand -v nvm\n```\n\nwhich should output `nvm` if the installation was successful. Please note that `which nvm` will not work, since `nvm` is a sourced shell function, not an executable binary.\n\n**Note:** On Linux, after running the install script, if you get `nvm: command not found` or see no feedback from your terminal after you type `command -v nvm`, simply close your current terminal, open a new terminal, and try verifying again.\n\n### Important Notes\n\nIf you're running a system without prepackaged binary available, which means you're going to install node or io.js from its source code, you need to make sure your system has a C++ compiler. For OS X, Xcode will work, for Debian/Ubuntu based GNU/Linux, the `build-essential` and `libssl-dev` packages work.\n\n**Note:** `nvm` also supports Windows in some cases. It should work through WSL (Windows Subsystem for Linux) depending on the version of WSL. It should also work with [GitBash](https://gitforwindows.org/) (MSYS) or [Cygwin](https://cygwin.com). Otherwise, for Windows, a few alternatives exist, which are neither supported nor developed by us:\n\n  - [nvm-windows](https://github.com/coreybutler/nvm-windows)\n  - [nodist](https://github.com/marcelklehr/nodist)\n  - [nvs](https://github.com/jasongin/nvs)\n\n**Note:** `nvm` does not support [Fish] either (see [#303](https://github.com/nvm-sh/nvm/issues/303)). Alternatives exist, which are neither supported nor developed by us:\n\n  - [bass](https://github.com/edc/bass) allows you to use utilities written for Bash in fish shell\n  - [fast-nvm-fish](https://github.com/brigand/fast-nvm-fish) only works with version numbers (not aliases) but doesn't significantly slow your shell startup\n  - [plugin-nvm](https://github.com/derekstavis/plugin-nvm) plugin for [Oh My Fish](https://github.com/oh-my-fish/oh-my-fish), which makes nvm and its completions available in fish shell\n  - [fnm](https://github.com/fisherman/fnm) - [fisherman](https://github.com/fisherman/fisherman)-based version manager for fish\n  - [fish-nvm](https://github.com/FabioAntunes/fish-nvm) - Wrapper around nvm for fish, delays sourcing nvm until it's actually used.\n\n**Note:** We still have some problems with FreeBSD, because there is no official pre-built binary for FreeBSD, and building from source may need [patches](https://www.freshports.org/www/node/files/patch-deps_v8_src_base_platform_platform-posix.cc); see the issue ticket:\n\n  - [[#900] [Bug] node on FreeBSD may need to be patched](https://github.com/nvm-sh/nvm/issues/900)\n  - [nodejs/node#3716](https://github.com/nodejs/node/issues/3716)\n\n**Note:** On OS X, if you do not have Xcode installed and you do not wish to download the ~4.3GB file, you can install the `Command Line Tools`. You can check out this blog post on how to just that:\n\n  - [How to Install Command Line Tools in OS X Mavericks & Yosemite (Without Xcode)](https://osxdaily.com/2014/02/12/install-command-line-tools-mac-os-x/)\n\n**Note:** On OS X, if you have/had a \"system\" node installed and want to install modules globally, keep in mind that:\n\n  - When using `nvm` you do not need `sudo` to globally install a module with `npm -g`, so instead of doing `sudo npm install -g grunt`, do instead `npm install -g grunt`\n  - If you have an `~/.npmrc` file, make sure it does not contain any `prefix` settings (which is not compatible with `nvm`)\n  - You can (but should not?) keep your previous \"system\" node install, but `nvm` will only be available to your user account (the one used to install nvm). This might cause version mismatches, as other users will be using `/usr/local/lib/node_modules/*` VS your user account using `~/.nvm/versions/node/vX.X.X/lib/node_modules/*`\n\nHomebrew installation is not supported. If you have issues with homebrew-installed `nvm`, please `brew uninstall` it, and install it using the instructions below, before filing an issue.\n\n**Note:** If you're using `zsh` you can easily install `nvm` as a zsh plugin. Install [`zsh-nvm`](https://github.com/lukechilds/zsh-nvm) and run `nvm upgrade` to upgrade.\n\n**Note:** Git versions before v1.7 may face a problem of cloning `nvm` source from GitHub via https protocol, and there is also different behavior of git before v1.6, and git prior to [v1.17.10](https://github.com/git/git/commit/5a7d5b683f869d3e3884a89775241afa515da9e7) can not clone tags, so the minimum required git version is v1.7.10. If you are interested in the problem we mentioned here, please refer to GitHub's [HTTPS cloning errors](https://help.github.com/articles/https-cloning-errors/) article.\n\n### Git Install\n\nIf you have `git` installed (requires git v1.7.10+):\n\n1. clone this repo in the root of your user profile\n    - `cd ~/` from anywhere then `git clone https://github.com/nvm-sh/nvm.git .nvm`\n1. `cd ~/.nvm` and check out the latest version with `git checkout v0.40.1`\n1. activate `nvm` by sourcing it from your shell: `. ./nvm.sh`\n\nNow add these lines to your `~/.bashrc`, `~/.profile`, or `~/.zshrc` file to have it automatically sourced upon login:\n(you may have to add to more than one of the above files)\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\"  # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n### Manual Install\n\nFor a fully manual install, execute the following lines to first clone the `nvm` repository into `$HOME/.nvm`, and then load `nvm`:\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\" && (\n  git clone https://github.com/nvm-sh/nvm.git \"$NVM_DIR\"\n  cd \"$NVM_DIR\"\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)`\n) && \\. \"$NVM_DIR/nvm.sh\"\n```\n\nNow add these lines to your `~/.bashrc`, `~/.profile`, or `~/.zshrc` file to have it automatically sourced upon login:\n(you may have to add to more than one of the above files)\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\n```\n\n### Manual Upgrade\n\nFor manual upgrade with `git` (requires git v1.7.10+):\n\n1. change to the `$NVM_DIR`\n1. pull down the latest changes\n1. check out the latest version\n1. activate the new version\n\n```sh\n(\n  cd \"$NVM_DIR\"\n  git fetch --tags origin\n  git checkout `git describe --abbrev=0 --tags --match \"v[0-9]*\" $(git rev-list --tags --max-count=1)`\n) && \\. \"$NVM_DIR/nvm.sh\"\n```\n\n## Usage\n\nTo download, compile, and install the latest release of node, do this:\n\n```sh\nnvm install node # \"node\" is an alias for the latest version\n```\n\nTo install a specific version of node:\n\n```sh\nnvm install 14.7.0 # or 16.3.0, 12.22.1, etc\n```\n\nTo set an alias:\n\n```sh\nnvm alias my_alias v14.4.0\n```\nMake sure that your alias does not contain any spaces or slashes.\n\nThe first version installed becomes the default. New shells will start with the default version of node (e.g., `nvm alias default`).\n\nYou can list available versions using `ls-remote`:\n\n```sh\nnvm ls-remote\n```\n\nAnd then in any new shell just use the installed version:\n\n```sh\nnvm use node\n```\n\nOr you can just run it:\n\n```sh\nnvm run node --version\n```\n\nOr, you can run any arbitrary command in a subshell with the desired version of node:\n\n```sh\nnvm exec 4.2 node --version\n```\n\nYou can also get the path to the executable to where it was installed:\n\n```sh\nnvm which 12.22\n```\n\nIn place of a version pointer like \"14.7\" or \"16.3\" or \"12.22.1\", you can use the following special default aliases with `nvm install`, `nvm use`, `nvm run`, `nvm exec`, `nvm which`, etc:\n\n  - `node`: this installs the latest version of [`node`](https://nodejs.org/en/)\n  - `iojs`: this installs the latest version of [`io.js`](https://iojs.org/en/)\n  - `stable`: this alias is deprecated, and only truly applies to `node` `v0.12` and earlier. Currently, this is an alias for `node`.\n  - `unstable`: this alias points to `node` `v0.11` - the last \"unstable\" node release, since post-1.0, all node versions are stable. (in SemVer, versions communicate breakage, not stability).\n\n### Long-term Support\n\nNode has a [schedule](https://github.com/nodejs/Release#release-schedule) for long-term support (LTS) You can reference LTS versions in aliases and `.nvmrc` files with the notation `lts/*` for the latest LTS, and `lts/argon` for LTS releases from the \"argon\" line, for example. In addition, the following commands support LTS arguments:\n\n  - `nvm install --lts` / `nvm install --lts=argon` / `nvm install 'lts/*'` / `nvm install lts/argon`\n  - `nvm uninstall --lts` / `nvm uninstall --lts=argon` / `nvm uninstall 'lts/*'` / `nvm uninstall lts/argon`\n  - `nvm use --lts` / `nvm use --lts=argon` / `nvm use 'lts/*'` / `nvm use lts/argon`\n  - `nvm exec --lts` / `nvm exec --lts=argon` / `nvm exec 'lts/*'` / `nvm exec lts/argon`\n  - `nvm run --lts` / `nvm run --lts=argon` / `nvm run 'lts/*'` / `nvm run lts/argon`\n  - `nvm ls-remote --lts` / `nvm ls-remote --lts=argon` `nvm ls-remote 'lts/*'` / `nvm ls-remote lts/argon`\n  - `nvm version-remote --lts` / `nvm version-remote --lts=argon` / `nvm version-remote 'lts/*'` / `nvm version-remote lts/argon`\n\nAny time your local copy of `nvm` connects to https://nodejs.org, it will re-create the appropriate local aliases for all available LTS lines. These aliases (stored under `$NVM_DIR/alias/lts`), are managed by `nvm`, and you should not modify, remove, or create these files - expect your changes to be undone, and expect meddling with these files to cause bugs that will likely not be supported.\n\nTo get the latest LTS version of node and migrate your existing installed packages, use\n\n```sh\nnvm install --reinstall-packages-from=current 'lts/*'\n```\n\n### Migrating Global Packages While Installing\n\nIf you want to install a new version of Node.js and migrate npm packages from a previous version:\n\n```sh\nnvm install --reinstall-packages-from=node node\n```\n\nThis will first use \"nvm version node\" to identify the current version you're migrating packages from. Then it resolves the new version to install from the remote server and installs it. Lastly, it runs \"nvm reinstall-packages\" to reinstall the npm packages from your prior version of Node to the new one.\n\nYou can also install and migrate npm packages from specific versions of Node like this:\n\n```sh\nnvm install --reinstall-packages-from=5 6\nnvm install --reinstall-packages-from=iojs v4.2\n```\n\nNote that reinstalling packages _explicitly does not update the npm version_ — this is to ensure that npm isn't accidentally upgraded to a broken version for the new node version.\n\nTo update npm at the same time add the `--latest-npm` flag, like this:\n\n```sh\nnvm install --reinstall-packages-from=default --latest-npm 'lts/*'\n```\n\nor, you can at any time run the following command to get the latest supported npm version on the current node version:\n```sh\nnvm install-latest-npm\n```\n\nIf you've already gotten an error to the effect of \"npm does not support Node.js\", you'll need to (1) revert to a previous node version (`nvm ls` & `nvm use <your latest _working_ version from the ls>`), (2) delete the newly created node version (`nvm uninstall <your _broken_ version of node from the ls>`), then (3) rerun your `nvm install` with the `--latest-npm` flag.\n\n\n### Default Global Packages From File While Installing\n\nIf you have a list of default packages you want installed every time you install a new version, we support that too -- just add the package names, one per line, to the file `$NVM_DIR/default-packages`. You can add anything npm would accept as a package argument on the command line.\n\n```sh\n# $NVM_DIR/default-packages\n\nrimraf\nobject-inspect@1.0.2\nstevemao/left-pad\n```\n\n### io.js\n\nIf you want to install [io.js](https://github.com/iojs/io.js/):\n\n```sh\nnvm install iojs\n```\n\nIf you want to install a new version of io.js and migrate npm packages from a previous version:\n\n```sh\nnvm install --reinstall-packages-from=iojs iojs\n```\n\nThe same guidelines mentioned for migrating npm packages in node are applicable to io.js.\n\n### System Version of Node\n\nIf you want to use the system-installed version of node, you can use the special default alias \"system\":\n\n```sh\nnvm use system\nnvm run system --version\n```\n\n### Listing Versions\n\nIf you want to see what versions are installed:\n\n```sh\nnvm ls\n```\n\nIf you want to see what versions are available to install:\n\n```sh\nnvm ls-remote\n```\n\n### Setting Custom Colors\n\nYou can set five colors that will be used to display version and alias information. These colors replace the default colors.\n  Initial colors are: g b y r e\n\n  Color codes:\n\n    r/R = red / bold red\n\n    g/G = green / bold green\n\n    b/B = blue / bold blue\n\n    c/C = cyan / bold cyan\n\n    m/M = magenta / bold magenta\n\n    y/Y = yellow / bold yellow\n\n    k/K = black / bold black\n\n    e/W = light grey / white\n\n```sh\nnvm set-colors rgBcm\n```\n\n#### Persisting custom colors\n\nIf you want the custom colors to persist after terminating the shell, export the `NVM_COLORS` variable in your shell profile. For example, if you want to use cyan, magenta, green, bold red and bold yellow, add the following line:\n\n```sh\nexport NVM_COLORS='cmgRY'\n```\n\n#### Suppressing colorized output\n\n`nvm help (or -h or --help)`, `nvm ls`, `nvm ls-remote` and `nvm alias` usually produce colorized output. You can disable colors with the `--no-colors` option (or by setting the environment variable `TERM=dumb`):\n\n```sh\nnvm ls --no-colors\nnvm help --no-colors\nTERM=dumb nvm ls\n```\n\n### Restoring PATH\nTo restore your PATH, you can deactivate it:\n\n```sh\nnvm deactivate\n```\n\n### Set default node version\nTo set a default Node version to be used in any new shell, use the alias 'default':\n\n```sh\nnvm alias default node # this refers to the latest installed version of node\nnvm alias default 18 # this refers to the latest installed v18.x version of node\nnvm alias default 18.12  # this refers to the latest installed v18.12.x version of node\n```\n\n### Use a mirror of node binaries\nTo use a mirror of the node binaries, set `$NVM_NODEJS_ORG_MIRROR`:\n\n```sh\nexport NVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist\nnvm install node\n\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/dist nvm install 4.2\n```\n\nTo use a mirror of the io.js binaries, set `$NVM_IOJS_ORG_MIRROR`:\n\n```sh\nexport NVM_IOJS_ORG_MIRROR=https://iojs.org/dist\nnvm install iojs-v1.0.3\n\nNVM_IOJS_ORG_MIRROR=https://iojs.org/dist nvm install iojs-v1.0.3\n```\n\n`nvm use` will not, by default, create a \"current\" symlink. Set `$NVM_SYMLINK_CURRENT` to \"true\" to enable this behavior, which is sometimes useful for IDEs. Note that using `nvm` in multiple shell tabs with this environment variable enabled can cause race conditions.\n\n#### Pass Authorization header to mirror\nTo pass an Authorization header through to the mirror url, set `$NVM_AUTH_HEADER`\n\n```sh\nNVM_AUTH_HEADER=\"Bearer secret-token\" nvm install node\n```\n\n### .nvmrc\n\nYou can create a `.nvmrc` file containing a node version number (or any other string that `nvm` understands; see `nvm --help` for details) in the project root directory (or any parent directory).\nAfterwards, `nvm use`, `nvm install`, `nvm exec`, `nvm run`, and `nvm which` will use the version specified in the `.nvmrc` file if no version is supplied on the command line.\n\nFor example, to make nvm default to the latest 5.9 release, the latest LTS version, or the latest node version for the current directory:\n\n```sh\n$ echo \"5.9\" > .nvmrc\n\n$ echo \"lts/*\" > .nvmrc # to default to the latest LTS version\n\n$ echo \"node\" > .nvmrc # to default to the latest version\n```\n\n[NB these examples assume a POSIX-compliant shell version of `echo`. If you use a Windows `cmd` development environment, eg the `.nvmrc` file is used to configure a remote Linux deployment, then keep in mind the `\"`s will be copied leading to an invalid file. Remove them.]\n\nThen when you run nvm use:\n\n```sh\n$ nvm use\nFound '/path/to/project/.nvmrc' with version <5.9>\nNow using node v5.9.1 (npm v3.7.3)\n```\n\nRunning nvm install will also switch over to the correct version, but if the correct node version isn't already installed, it will install it for you.\n\n```sh\n$ nvm install\nFound '/path/to/project/.nvmrc' with version <5.9>\nDownloading and installing node v5.9.1...\nDownloading https://nodejs.org/dist/v5.9.1/node-v5.9.1-linux-x64.tar.xz...\n#################################################################################### 100.0%\nComputing checksum with sha256sum\nChecksums matched!\nNow using node v5.9.1 (npm v3.7.3)\n```\n\n`nvm use` et. al. will traverse directory structure upwards from the current directory looking for the `.nvmrc` file. In other words, running `nvm use` et. al. in any subdirectory of a directory with an `.nvmrc` will result in that `.nvmrc` being utilized.\n\nThe contents of a `.nvmrc` file **must** contain precisely one `<version>` (as described by `nvm --help`) followed by a newline. `.nvmrc` files may also have comments. The comment delimiter is `#`, and it and any text after it, as well as blank lines, and leading and trailing white space, will be ignored when parsing.\n\nKey/value pairs using `=` are also allowed and ignored, but are reserved for future use, and may cause validation errors in the future.\n\nRun [`npx nvmrc`](https://npmjs.com/nvmrc) to validate an `.nvmrc` file. If that tool’s results do not agree with nvm, one or the other has a bug - please file an issue.\n\n### Deeper Shell Integration\n\nYou can use [`avn`](https://github.com/wbyoung/avn) to deeply integrate into your shell and automatically invoke `nvm` when changing directories. `avn` is **not** supported by the `nvm` maintainers. Please [report issues to the `avn` team](https://github.com/wbyoung/avn/issues/new).\n\nYou can also use [`nvshim`](https://github.com/iamogbz/nvshim) to shim the `node`, `npm`, and `npx` bins to automatically use the `nvm` config in the current directory. `nvshim` is **not** supported by the `nvm` maintainers. Please [report issues to the `nvshim` team](https://github.com/iamogbz/nvshim/issues/new).\n\nIf you prefer a lighter-weight solution, the recipes below have been contributed by `nvm` users. They are **not** supported by the `nvm` maintainers. We are, however, accepting pull requests for more examples.\n\n#### Calling `nvm use` automatically in a directory with a `.nvmrc` file\n\nIn your profile (`~/.bash_profile`, `~/.zshrc`, `~/.profile`, or `~/.bashrc`), add the following to `nvm use` whenever you enter a new directory:\n\n##### bash\n\nPut the following at the end of your `$HOME/.bashrc`:\n\n```bash\ncdnvm() {\n    command cd \"$@\" || return $?\n    nvm_path=\"$(nvm_find_up .nvmrc | command tr -d '\\n')\"\n\n    # If there are no .nvmrc file, use the default nvm version\n    if [[ ! $nvm_path = *[^[:space:]]* ]]; then\n\n        declare default_version\n        default_version=\"$(nvm version default)\"\n\n        # If there is no default version, set it to `node`\n        # This will use the latest version on your machine\n        if [ $default_version = 'N/A' ]; then\n            nvm alias default node\n            default_version=$(nvm version default)\n        fi\n\n        # If the current version is not the default version, set it to use the default version\n        if [ \"$(nvm current)\" != \"${default_version}\" ]; then\n            nvm use default\n        fi\n    elif [[ -s \"${nvm_path}/.nvmrc\" && -r \"${nvm_path}/.nvmrc\" ]]; then\n        declare nvm_version\n        nvm_version=$(<\"${nvm_path}\"/.nvmrc)\n\n        declare locally_resolved_nvm_version\n        # `nvm ls` will check all locally-available versions\n        # If there are multiple matching versions, take the latest one\n        # Remove the `->` and `*` characters and spaces\n        # `locally_resolved_nvm_version` will be `N/A` if no local versions are found\n        locally_resolved_nvm_version=$(nvm ls --no-colors \"${nvm_version}\" | command tail -1 | command tr -d '\\->*' | command tr -d '[:space:]')\n\n        # If it is not already installed, install it\n        # `nvm install` will implicitly use the newly-installed version\n        if [ \"${locally_resolved_nvm_version}\" = 'N/A' ]; then\n            nvm install \"${nvm_version}\";\n        elif [ \"$(nvm current)\" != \"${locally_resolved_nvm_version}\" ]; then\n            nvm use \"${nvm_version}\";\n        fi\n    fi\n}\n\nalias cd='cdnvm'\ncdnvm \"$PWD\" || exit\n```\n\nThis alias would search 'up' from your current directory in order to detect a `.nvmrc` file. If it finds it, it will switch to that version; if not, it will use the default version.\n\n##### zsh\n\nThis shell function will install (if needed) and `nvm use` the specified Node version when an `.nvmrc` is found, and `nvm use default` otherwise.\n\nPut this into your `$HOME/.zshrc` to call `nvm use` automatically whenever you enter a directory that contains an\n`.nvmrc` file with a string telling nvm which node to `use`:\n\n```zsh\n# place this after nvm initialization!\nautoload -U add-zsh-hook\n\nload-nvmrc() {\n  local nvmrc_path\n  nvmrc_path=\"$(nvm_find_nvmrc)\"\n\n  if [ -n \"$nvmrc_path\" ]; then\n    local nvmrc_node_version\n    nvmrc_node_version=$(nvm version \"$(cat \"${nvmrc_path}\")\")\n\n    if [ \"$nvmrc_node_version\" = \"N/A\" ]; then\n      nvm install\n    elif [ \"$nvmrc_node_version\" != \"$(nvm version)\" ]; then\n      nvm use\n    fi\n  elif [ -n \"$(PWD=$OLDPWD nvm_find_nvmrc)\" ] && [ \"$(nvm version)\" != \"$(nvm version default)\" ]; then\n    echo \"Reverting to nvm default version\"\n    nvm use default\n  fi\n}\n\nadd-zsh-hook chpwd load-nvmrc\nload-nvmrc\n```\n\n##### fish\n\nThis requires that you have [bass](https://github.com/edc/bass) installed.\n```fish\n# ~/.config/fish/functions/nvm.fish\nfunction nvm\n  bass source ~/.nvm/nvm.sh --no-use ';' nvm $argv\nend\n\n# ~/.config/fish/functions/nvm_find_nvmrc.fish\nfunction nvm_find_nvmrc\n  bass source ~/.nvm/nvm.sh --no-use ';' nvm_find_nvmrc\nend\n\n# ~/.config/fish/functions/load_nvm.fish\nfunction load_nvm --on-variable=\"PWD\"\n  set -l default_node_version (nvm version default)\n  set -l node_version (nvm version)\n  set -l nvmrc_path (nvm_find_nvmrc)\n  if test -n \"$nvmrc_path\"\n    set -l nvmrc_node_version (nvm version (cat $nvmrc_path))\n    if test \"$nvmrc_node_version\" = \"N/A\"\n      nvm install (cat $nvmrc_path)\n    else if test \"$nvmrc_node_version\" != \"$node_version\"\n      nvm use $nvmrc_node_version\n    end\n  else if test \"$node_version\" != \"$default_node_version\"\n    echo \"Reverting to default Node version\"\n    nvm use default\n  end\nend\n\n# ~/.config/fish/config.fish\n# You must call it on initialization or listening to directory switching won't work\nload_nvm > /dev/stderr\n```\n\n## Running Tests\n\nTests are written in [Urchin]. Install Urchin (and other dependencies) like so:\n\n    npm install\n\nThere are slow tests and fast tests. The slow tests do things like install node\nand check that the right versions are used. The fast tests fake this to test\nthings like aliases and uninstalling. From the root of the nvm git repository,\nrun the fast tests like this:\n\n    npm run test/fast\n\nRun the slow tests like this:\n\n    npm run test/slow\n\nRun all of the tests like this:\n\n    npm test\n\nNota bene: Avoid running nvm while the tests are running.\n\n## Environment variables\n\nnvm exposes the following environment variables:\n\n- `NVM_DIR` - nvm's installation directory.\n- `NVM_BIN` - where node, npm, and global packages for the active version of node are installed.\n- `NVM_INC` - node's include file directory (useful for building C/C++ addons for node).\n- `NVM_CD_FLAGS` - used to maintain compatibility with zsh.\n- `NVM_RC_VERSION` - version from .nvmrc file if being used.\n\nAdditionally, nvm modifies `PATH`, and, if present, `MANPATH` and `NODE_PATH` when changing versions.\n\n\n## Bash Completion\n\nTo activate, you need to source `bash_completion`:\n\n```sh\n[[ -r $NVM_DIR/bash_completion ]] && \\. $NVM_DIR/bash_completion\n```\n\nPut the above sourcing line just below the sourcing line for nvm in your profile (`.bashrc`, `.bash_profile`).\n\n### Usage\n\nnvm:\n\n> `$ nvm` <kbd>Tab</kbd>\n```sh\nalias               deactivate          install             list-remote         reinstall-packages  uninstall           version\ncache               exec                install-latest-npm  ls                  run                 unload              version-remote\ncurrent             help                list                ls-remote           unalias             use                 which\n```\n\nnvm alias:\n\n> `$ nvm alias` <kbd>Tab</kbd>\n```sh\ndefault      iojs         lts/*        lts/argon    lts/boron    lts/carbon   lts/dubnium  lts/erbium   node         stable       unstable\n```\n\n\n> `$ nvm alias my_alias` <kbd>Tab</kbd>\n```sh\nv10.22.0       v12.18.3      v14.8.0\n```\n\nnvm use:\n> `$ nvm use` <kbd>Tab</kbd>\n\n```\nmy_alias        default        v10.22.0       v12.18.3      v14.8.0\n```\n\nnvm uninstall:\n> `$ nvm uninstall` <kbd>Tab</kbd>\n\n```\nmy_alias        default        v10.22.0       v12.18.3      v14.8.0\n```\n\n## Compatibility Issues\n\n`nvm` will encounter some issues if you have some non-default settings set. (see [#606](https://github.com/creationix/nvm/issues/606))\nThe following are known to cause issues:\n\nInside `~/.npmrc`:\n\n```sh\nprefix='some/path'\n```\n\nEnvironment Variables:\n\n```sh\n$NPM_CONFIG_PREFIX\n$PREFIX\n```\n\nShell settings:\n\n```sh\nset -e\n```\n\n## Installing nvm on Alpine Linux\n\nIn order to provide the best performance (and other optimizations), nvm will download and install pre-compiled binaries for Node (and npm) when you run `nvm install X`. The Node project compiles, tests and hosts/provides these pre-compiled binaries which are built for mainstream/traditional Linux distributions (such as Debian, Ubuntu, CentOS, RedHat et al).\n\nAlpine Linux, unlike mainstream/traditional Linux distributions, is based on [BusyBox](https://www.busybox.net/), a very compact (~5MB) Linux distribution. BusyBox (and thus Alpine Linux) uses a different C/C++ stack to most mainstream/traditional Linux distributions - [musl](https://www.musl-libc.org/). This makes binary programs built for such mainstream/traditional incompatible with Alpine Linux, thus we cannot simply `nvm install X` on Alpine Linux and expect the downloaded binary to run correctly - you'll likely see \"...does not exist\" errors if you try that.\n\nThere is a `-s` flag for `nvm install` which requests nvm download Node source and compile it locally.\n\nIf installing nvm on Alpine Linux *is* still what you want or need to do, you should be able to achieve this by running the following from you Alpine Linux shell, depending on which version you are using:\n\n### Alpine Linux 3.13+\n```sh\napk add -U curl bash ca-certificates openssl ncurses coreutils python3 make gcc g++ libgcc linux-headers grep util-linux binutils findutils\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n\n### Alpine Linux 3.5 - 3.12\n```sh\napk add -U curl bash ca-certificates openssl ncurses coreutils python2 make gcc g++ libgcc linux-headers grep util-linux binutils findutils\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n```\n\n_Note: Alpine 3.5 can only install NodeJS versions up to v6.9.5, Alpine 3.6 can only install versions up to v6.10.3, Alpine 3.7 installs versions up to v8.9.3, Alpine 3.8 installs versions up to v8.14.0, Alpine 3.9 installs versions up to v10.19.0, Alpine 3.10 installs versions up to v10.24.1, Alpine 3.11 installs versions up to v12.22.6, Alpine 3.12 installs versions up to v12.22.12, Alpine 3.13 & 3.14 install versions up to v14.20.0, Alpine 3.15 & 3.16 install versions up to v16.16.0 (**These are all versions on the main branch**). Alpine 3.5 - 3.12 required the package `python2` to build NodeJS, as they are older versions to build. Alpine 3.13+ requires `python3` to successfully build newer NodeJS versions, but you can use `python2` with Alpine 3.13+ if you need to build versions of node supported in Alpine 3.5 - 3.15, you just need to specify what version of NodeJS you need to install in the package install script._\n\nThe Node project has some desire but no concrete plans (due to the overheads of building, testing and support) to offer Alpine-compatible binaries.\n\nAs a potential alternative, @mhart (a Node contributor) has some [Docker images for Alpine Linux with Node and optionally, npm, pre-installed](https://github.com/mhart/alpine-node).\n\n<a id=\"removal\"></a>\n## Uninstalling / Removal\n\n### Manual Uninstall\n\nTo remove `nvm` manually, execute the following:\n\nFirst, use `nvm unload` to remove the nvm command from your terminal session and delete the installation directory:\n\n```sh\n$ nvm_dir=\"${NVM_DIR:-~/.nvm}\"\n$ nvm unload\n$ rm -rf \"$nvm_dir\"\n```\n\nEdit `~/.bashrc` (or other shell resource config) and remove the lines below:\n\n```sh\nexport NVM_DIR=\"$HOME/.nvm\"\n[ -s \"$NVM_DIR/nvm.sh\" ] && \\. \"$NVM_DIR/nvm.sh\" # This loads nvm\n[[ -r $NVM_DIR/bash_completion ]] && \\. $NVM_DIR/bash_completion\n```\n\n## Docker For Development Environment\n\nTo make the development and testing work easier, we have a Dockerfile for development usage, which is based on Ubuntu 18.04 base image, prepared with essential and useful tools for `nvm` development, to build the docker image of the environment, run the docker command at the root of `nvm` repository:\n\n```sh\n$ docker build -t nvm-dev .\n```\n\nThis will package your current nvm repository with our pre-defined development environment into a docker image named `nvm-dev`, once it's built with success, validate your image via `docker images`:\n\n```sh\n$ docker images\n\nREPOSITORY         TAG                 IMAGE ID            CREATED             SIZE\nnvm-dev            latest              9ca4c57a97d8        7 days ago          650 MB\n```\n\nIf you got no error message, now you can easily involve in:\n\n```sh\n$ docker run -h nvm-dev -it nvm-dev\n\nnvm@nvm-dev:~/.nvm$\n```\n\nPlease note that it'll take about 8 minutes to build the image and the image size would be about 650MB, so it's not suitable for production usage.\n\nFor more information and documentation about docker, please refer to its official website:\n\n  - https://www.docker.com/\n  - https://docs.docker.com/\n\n## Problems\n\n  - If you try to install a node version and the installation fails, be sure to run `nvm cache clear` to delete cached node downloads, or you might get an error like the following:\n\n    curl: (33) HTTP server doesn't seem to support byte ranges. Cannot resume.\n\n  - Where's my `sudo node`? Check out [#43](https://github.com/nvm-sh/nvm/issues/43)\n\n  - After the v0.8.6 release of node, nvm tries to install from binary packages. But in some systems, the official binary packages don't work due to incompatibility of shared libs. In such cases, use `-s` option to force install from source:\n\n```sh\nnvm install -s 0.8.6\n```\n\n  - If setting the `default` alias does not establish the node version in new shells (i.e. `nvm current` yields `system`), ensure that the system's node `PATH` is set before the `nvm.sh` source line in your shell profile (see [#658](https://github.com/nvm-sh/nvm/issues/658))\n\n## macOS Troubleshooting\n\n**nvm node version not found in vim shell**\n\nIf you set node version to a version other than your system node version `nvm use 6.2.1` and open vim and run `:!node -v` you should see `v6.2.1` if you see your system version `v0.12.7`. You need to run:\n\n```shell\nsudo chmod ugo-x /usr/libexec/path_helper\n```\n\nMore on this issue in [dotphiles/dotzsh](https://github.com/dotphiles/dotzsh#mac-os-x).\n\n**nvm is not compatible with the npm config \"prefix\" option**\n\nSome solutions for this issue can be found [here](https://github.com/nvm-sh/nvm/issues/1245)\n\nThere is one more edge case causing this issue, and that's a **mismatch between the `$HOME` path and the user's home directory's actual name**.\n\nYou have to make sure that the user directory name in `$HOME` and the user directory name you'd see from running `ls /Users/` **are capitalized the same way** ([See this issue](https://github.com/nvm-sh/nvm/issues/2261)).\n\nTo change the user directory and/or account name follow the instructions [here](https://support.apple.com/en-us/HT201548)\n\n[1]: https://github.com/nvm-sh/nvm.git\n[2]: https://github.com/nvm-sh/nvm/blob/v0.40.1/install.sh\n[3]: https://app.travis-ci.com/nvm-sh/nvm\n[4]: https://github.com/nvm-sh/nvm/releases/tag/v0.40.1\n[Urchin]: https://git.sdf.org/tlevine/urchin\n[Fish]: https://fishshell.com\n\n**Homebrew makes zsh directories unsecure**\n\n```shell\nzsh compinit: insecure directories, run compaudit for list.\nIgnore insecure directories and continue [y] or abort compinit [n]? y\n```\n\nHomebrew causes insecure directories like `/usr/local/share/zsh/site-functions` and `/usr/local/share/zsh`. This is **not** an `nvm` problem - it is a homebrew problem. Refer [here](https://github.com/zsh-users/zsh-completions/issues/680) for some solutions related to the issue.\n\n**Macs with Apple Silicon chips**\n\nExperimental support for the Apple Silicon chip architecture was added in node.js v15.3 and full support was added in v16.0.\nBecause of this, if you try to install older versions of node as usual, you will probably experience either compilation errors when installing node or out-of-memory errors while running your code.\n\nSo, if you want to run a version prior to v16.0 on an Apple Silicon Mac, it may be best to compile node targeting the `x86_64` Intel architecture so that Rosetta 2 can translate the `x86_64` processor instructions to ARM-based Apple Silicon instructions.\nHere's what you will need to do:\n\n- Install Rosetta, if you haven't already done so\n\n  ```sh\n  $ softwareupdate --install-rosetta\n  ```\n\n  You might wonder, \"how will my Apple Silicon Mac know to use Rosetta for a version of node compiled for an Intel chip?\".\n  If an executable contains only Intel instructions, macOS will automatically use Rosetta to translate the instructions.\n\n- Open a shell that's running using Rosetta\n\n  ```sh\n  $ arch -x86_64 zsh\n  ```\n\n  Note: This same thing can also be accomplished by finding the Terminal or iTerm App in Finder, right clicking, selecting \"Get Info\", and then checking the box labeled \"Open using Rosetta\".\n\n  Note: This terminal session is now running in `zsh`.\n  If `zsh` is not the shell you typically use, `nvm` may not be `source`'d automatically like it probably is for your usual shell through your dotfiles.\n  If that's the case, make sure to source `nvm`.\n\n  ```sh\n  $ source \"${NVM_DIR}/nvm.sh\"\n  ```\n\n- Install whatever older version of node you are interested in. Let's use 12.22.1 as an example.\n  This will fetch the node source code and compile it, which will take several minutes.\n\n  ```sh\n  $ nvm install v12.22.1 --shared-zlib\n  ```\n\n  Note: You're probably curious why `--shared-zlib` is included.\n  There's a bug in recent versions of Apple's system `clang` compiler.\n  If one of these broken versions is installed on your system, the above step will likely still succeed even if you didn't include the `--shared-zlib` flag.\n  However, later, when you attempt to `npm install` something using your old version of node.js, you will see `incorrect data check` errors.\n  If you want to avoid the possible hassle of dealing with this, include that flag.\n  For more details, see [this issue](https://github.com/nodejs/node/issues/39313) and [this comment](https://github.com/nodejs/node/issues/39313#issuecomment-90.40.176)\n\n- Exit back to your native shell.\n\n  ```sh\n  $ exit\n  $ arch\n  arm64\n  ```\n\n  Note: If you selected the box labeled \"Open using Rosetta\" rather than running the CLI command in the second step, you will see `i386` here.\n  Unless you have another reason to have that box selected, you can deselect it now.\n\n- Check to make sure the architecture is correct. `x64` is the abbreviation for `x86_64`, which is what you want to see.\n\n  ```sh\n  $ node -p process.arch\n  x64\n  ```\n\nNow you should be able to use node as usual.\n\n## WSL Troubleshooting\n\nIf you've encountered this error on WSL-2:\n\n  ```sh\n  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.40.1/install.sh | bash\n  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current\n                                  Dload  Upload  Total   Spent    Left  Speed\n  0     0    0     0    0     0      0      0 --:--:--  0:00:09 --:--:--     0curl: (6) Could not resolve host: raw.githubusercontent.com\n  ```\n\nIt may be due to your antivirus, VPN, or other reasons.\n\nWhere you can `ping 8.8.8.8` while you can't `ping google.com`\n\n\nThis could simply be solved by running this in your root directory:\n\n  ```sh\n  sudo rm /etc/resolv.conf\n  sudo bash -c 'echo \"nameserver 8.8.8.8\" > /etc/resolv.conf'\n  sudo bash -c 'echo \"[network]\" > /etc/wsl.conf'\n  sudo bash -c 'echo \"generateResolvConf = false\" >> /etc/wsl.conf'\n  sudo chattr +i /etc/resolv.conf\n  ```\n\nThis deletes your `resolv.conf` file that is automatically generated when you run WSL, creates a new file and puts `nameserver 8.8.8.8`, then creates a `wsl.conf` file and adds `[network]` and `generateResolveConf = false` to prevent auto-generation of that file.\n\nYou can check the contents of the file by running:\n\n  ```sh\n  cat /etc/resolv.conf\n  ```\n\n## Maintainers\n\nCurrently, the sole maintainer is [@ljharb](https://github.com/ljharb) - more maintainers are quite welcome, and we hope to add folks to the team over time. [Governance](./GOVERNANCE.md) will be re-evaluated as the project evolves.\n\n## Project Support\n\nOnly the latest version (v0.40.1 at this time) is supported.\n\n## Enterprise Support\n\nIf you are unable to update to the latest version of `nvm`, our [partners](https://openjsf.org/ecosystem-sustainability-program) provide commercial security fixes for all unsupported versions:\n\n  - [HeroDevs Never-Ending Support](https://www.herodevs.com/support?utm_source=OpenJS&utm_medium=Link&utm_campaign=nvm_openjs)\n\n## License\n\nSee [LICENSE.md](./LICENSE.md).\n\n## Copyright notice\n\nCopyright [OpenJS Foundation](https://openjsf.org) and `nvm` contributors. All rights reserved. The [OpenJS Foundation](https://openjsf.org) has registered trademarks and uses trademarks.  For a list of trademarks of the [OpenJS Foundation](https://openjsf.org), please see our [Trademark Policy](https://trademark-policy.openjsf.org/) and [Trademark List](https://trademark-list.openjsf.org/).  Node.js is a trademark of Joyent, Inc. and is used with its permission.  Trademarks and logos not indicated on the [list of OpenJS Foundation trademarks](https://trademark-list.openjsf.org) are trademarks™ or registered® trademarks of their respective holders. Use of them does not imply any affiliation with or endorsement by them.\n\n[The OpenJS Foundation](https://openjsf.org/) | [Terms of Use](https://terms-of-use.openjsf.org/) | [Privacy Policy](https://privacy-policy.openjsf.org/) | [OpenJS Foundation Bylaws](https://bylaws.openjsf.org/) | [Trademark Policy](https://trademark-policy.openjsf.org/) | [Trademark List](https://trademark-list.openjsf.org/) | [Cookie Policy](https://www.linuxfoundation.org/cookies/)\n"
        },
        {
          "name": "ROADMAP.md",
          "type": "blob",
          "size": 0.861328125,
          "content": "# nvm Road Map\n\nThis is a list of the primary features planned for `nvm`:\n\n- [x] Rewriting installation code paths to support installing `io.js` and `node` `v4+` [from source](https://github.com/nvm-sh/nvm/issues/1188).\n  - This will include [reusing previously downloaded tarballs](https://github.com/nvm-sh/nvm/issues/1193) that match checksums, which is a nice performance and bandwidth bonus.\n- [ ] Adding opt-in environment variable support to list, download, and install `node` [release candidates](https://github.com/nvm-sh/nvm/issues/779), and [nightly builds](https://github.com/nvm-sh/nvm/issues/1053).\n- [ ] [`nvm update`](https://github.com/nvm-sh/nvm/issues/400): the ability to autoupdate `nvm` itself\n- [ ] [v1.0.0](https://github.com/nvm-sh/nvm/milestone/1), including updating the [nvm on npm](https://github.com/nvm-sh/nvm/issues/304) to auto-install nvm properly\n"
        },
        {
          "name": "bash_completion",
          "type": "blob",
          "size": 2.2451171875,
          "content": "#!/usr/bin/env bash\n\n# bash completion for Node Version Manager (NVM)\n\nif ! command -v nvm &> /dev/null; then\n  return\nfi\n\n__nvm_generate_completion() {\n  declare current_word\n  current_word=\"${COMP_WORDS[COMP_CWORD]}\"\n  # shellcheck disable=SC2207\n  COMPREPLY=($(compgen -W \"$1\" -- \"${current_word}\"))\n  return 0\n}\n\n__nvm_commands() {\n  declare current_word\n  declare command\n\n  current_word=\"${COMP_WORDS[COMP_CWORD]}\"\n\n  COMMANDS='\n    help install uninstall use run exec\n    alias unalias reinstall-packages\n    current list ls list-remote ls-remote\n    install-latest-npm\n    cache deactivate unload\n    version version-remote which'\n\n  if [ ${#COMP_WORDS[@]} == 4 ]; then\n\n    command=\"${COMP_WORDS[COMP_CWORD - 2]}\"\n    case \"${command}\" in\n      alias) __nvm_installed_nodes ;;\n    esac\n\n  else\n\n    case \"${current_word}\" in\n      -*) __nvm_options ;;\n      *) __nvm_generate_completion \"${COMMANDS}\" ;;\n    esac\n\n  fi\n}\n\n__nvm_options() {\n  OPTIONS=''\n  __nvm_generate_completion \"${OPTIONS}\"\n}\n\n__nvm_installed_nodes() {\n  __nvm_generate_completion \"$(nvm_ls) $(__nvm_aliases)\"\n}\n\n__nvm_aliases() {\n  declare aliases\n  aliases=\"\"\n  if [ -d \"${NVM_DIR}/alias\" ]; then\n    aliases=\"$(command cd \"${NVM_DIR}/alias\" && command find \"${PWD}\" -type f | command sed \"s:${PWD}/::\")\"\n  fi\n  echo \"${aliases} node stable unstable iojs\"\n}\n\n__nvm_alias() {\n  __nvm_generate_completion \"$(__nvm_aliases)\"\n}\n\n__nvm() {\n  declare previous_word\n  previous_word=\"${COMP_WORDS[COMP_CWORD - 1]}\"\n\n  case \"${previous_word}\" in\n    use | run | exec | ls | list | uninstall) __nvm_installed_nodes ;;\n    alias | unalias) __nvm_alias ;;\n    *) __nvm_commands ;;\n  esac\n\n  return 0\n}\n\n# complete is a bash builtin, but recent versions of ZSH come with a function\n# called bashcompinit that will create a complete in ZSH. If the user is in\n# ZSH, load and run bashcompinit before calling the complete function.\nif [[ -n ${ZSH_VERSION-} ]]; then\n  # First calling compinit (only if not called yet!)\n  # and then bashcompinit as mentioned by zsh man page.\n  if ! command -v compinit > /dev/null; then\n    autoload -U +X compinit && if [[ ${ZSH_DISABLE_COMPFIX-} = true ]]; then\n      compinit -u\n    else\n      compinit\n    fi\n  fi\n  autoload -U +X bashcompinit && bashcompinit\nfi\n\ncomplete -o default -F __nvm nvm\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 16.2412109375,
          "content": "#!/usr/bin/env bash\n\n{ # this ensures the entire script is downloaded #\n\nnvm_has() {\n  type \"$1\" > /dev/null 2>&1\n}\n\nnvm_echo() {\n  command printf %s\\\\n \"$*\" 2>/dev/null\n}\n\nif [ -z \"${BASH_VERSION}\" ] || [ -n \"${ZSH_VERSION}\" ]; then\n  # shellcheck disable=SC2016\n  nvm_echo >&2 'Error: the install instructions explicitly say to pipe the install script to `bash`; please follow them'\n  exit 1\nfi\n\nnvm_grep() {\n  GREP_OPTIONS='' command grep \"$@\"\n}\n\nnvm_default_install_dir() {\n  [ -z \"${XDG_CONFIG_HOME-}\" ] && printf %s \"${HOME}/.nvm\" || printf %s \"${XDG_CONFIG_HOME}/nvm\"\n}\n\nnvm_install_dir() {\n  if [ -n \"$NVM_DIR\" ]; then\n    printf %s \"${NVM_DIR}\"\n  else\n    nvm_default_install_dir\n  fi\n}\n\nnvm_latest_version() {\n  nvm_echo \"v0.40.1\"\n}\n\nnvm_profile_is_bash_or_zsh() {\n  local TEST_PROFILE\n  TEST_PROFILE=\"${1-}\"\n  case \"${TEST_PROFILE-}\" in\n    *\"/.bashrc\" | *\"/.bash_profile\" | *\"/.zshrc\" | *\"/.zprofile\")\n      return\n    ;;\n    *)\n      return 1\n    ;;\n  esac\n}\n\n#\n# Outputs the location to NVM depending on:\n# * The availability of $NVM_SOURCE\n# * The presence of $NVM_INSTALL_GITHUB_REPO\n# * The method used (\"script\" or \"git\" in the script, defaults to \"git\")\n# NVM_SOURCE always takes precedence unless the method is \"script-nvm-exec\"\n#\nnvm_source() {\n  local NVM_GITHUB_REPO\n  NVM_GITHUB_REPO=\"${NVM_INSTALL_GITHUB_REPO:-nvm-sh/nvm}\"\n  if [ \"${NVM_GITHUB_REPO}\" != 'nvm-sh/nvm' ]; then\n    { nvm_echo >&2 \"$(cat)\" ; } << EOF\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\n@    WARNING: REMOTE REPO IDENTIFICATION HAS CHANGED!     @\n@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@\nIT IS POSSIBLE THAT SOMEONE IS DOING SOMETHING NASTY!\n\nThe default repository for this install is \\`nvm-sh/nvm\\`,\nbut the environment variables \\`\\$NVM_INSTALL_GITHUB_REPO\\` is\ncurrently set to \\`${NVM_GITHUB_REPO}\\`.\n\nIf this is not intentional, interrupt this installation and\nverify your environment variables.\nEOF\n  fi\n  local NVM_VERSION\n  NVM_VERSION=\"${NVM_INSTALL_VERSION:-$(nvm_latest_version)}\"\n  local NVM_METHOD\n  NVM_METHOD=\"$1\"\n  local NVM_SOURCE_URL\n  NVM_SOURCE_URL=\"$NVM_SOURCE\"\n  if [ \"_$NVM_METHOD\" = \"_script-nvm-exec\" ]; then\n    NVM_SOURCE_URL=\"https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/nvm-exec\"\n  elif [ \"_$NVM_METHOD\" = \"_script-nvm-bash-completion\" ]; then\n    NVM_SOURCE_URL=\"https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/bash_completion\"\n  elif [ -z \"$NVM_SOURCE_URL\" ]; then\n    if [ \"_$NVM_METHOD\" = \"_script\" ]; then\n      NVM_SOURCE_URL=\"https://raw.githubusercontent.com/${NVM_GITHUB_REPO}/${NVM_VERSION}/nvm.sh\"\n    elif [ \"_$NVM_METHOD\" = \"_git\" ] || [ -z \"$NVM_METHOD\" ]; then\n      NVM_SOURCE_URL=\"https://github.com/${NVM_GITHUB_REPO}.git\"\n    else\n      nvm_echo >&2 \"Unexpected value \\\"$NVM_METHOD\\\" for \\$NVM_METHOD\"\n      return 1\n    fi\n  fi\n  nvm_echo \"$NVM_SOURCE_URL\"\n}\n\n#\n# Node.js version to install\n#\nnvm_node_version() {\n  nvm_echo \"$NODE_VERSION\"\n}\n\nnvm_download() {\n  if nvm_has \"curl\"; then\n    curl --fail --compressed -q \"$@\"\n  elif nvm_has \"wget\"; then\n    # Emulate curl with wget\n    ARGS=$(nvm_echo \"$@\" | command sed -e 's/--progress-bar /--progress=bar /' \\\n                            -e 's/--compressed //' \\\n                            -e 's/--fail //' \\\n                            -e 's/-L //' \\\n                            -e 's/-I /--server-response /' \\\n                            -e 's/-s /-q /' \\\n                            -e 's/-sS /-nv /' \\\n                            -e 's/-o /-O /' \\\n                            -e 's/-C - /-c /')\n    # shellcheck disable=SC2086\n    eval wget $ARGS\n  fi\n}\n\ninstall_nvm_from_git() {\n  local INSTALL_DIR\n  INSTALL_DIR=\"$(nvm_install_dir)\"\n  local NVM_VERSION\n  NVM_VERSION=\"${NVM_INSTALL_VERSION:-$(nvm_latest_version)}\"\n  if [ -n \"${NVM_INSTALL_VERSION:-}\" ]; then\n    # Check if version is an existing ref\n    if command git ls-remote \"$(nvm_source \"git\")\" \"$NVM_VERSION\" | nvm_grep -q \"$NVM_VERSION\" ; then\n      :\n    # Check if version is an existing changeset\n    elif ! nvm_download -o /dev/null \"$(nvm_source \"script-nvm-exec\")\"; then\n      nvm_echo >&2 \"Failed to find '$NVM_VERSION' version.\"\n      exit 1\n    fi\n  fi\n\n  local fetch_error\n  if [ -d \"$INSTALL_DIR/.git\" ]; then\n    # Updating repo\n    nvm_echo \"=> nvm is already installed in $INSTALL_DIR, trying to update using git\"\n    command printf '\\r=> '\n    fetch_error=\"Failed to update nvm with $NVM_VERSION, run 'git fetch' in $INSTALL_DIR yourself.\"\n  else\n    fetch_error=\"Failed to fetch origin with $NVM_VERSION. Please report this!\"\n    nvm_echo \"=> Downloading nvm from git to '$INSTALL_DIR'\"\n    command printf '\\r=> '\n    mkdir -p \"${INSTALL_DIR}\"\n    if [ \"$(ls -A \"${INSTALL_DIR}\")\" ]; then\n      # Initializing repo\n      command git init \"${INSTALL_DIR}\" || {\n        nvm_echo >&2 'Failed to initialize nvm repo. Please report this!'\n        exit 2\n      }\n      command git --git-dir=\"${INSTALL_DIR}/.git\" remote add origin \"$(nvm_source)\" 2> /dev/null \\\n        || command git --git-dir=\"${INSTALL_DIR}/.git\" remote set-url origin \"$(nvm_source)\" || {\n        nvm_echo >&2 'Failed to add remote \"origin\" (or set the URL). Please report this!'\n        exit 2\n      }\n    else\n      # Cloning repo\n      command git clone \"$(nvm_source)\" --depth=1 \"${INSTALL_DIR}\" || {\n        nvm_echo >&2 'Failed to clone nvm repo. Please report this!'\n        exit 2\n      }\n    fi\n  fi\n  # Try to fetch tag\n  if command git --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" fetch origin tag \"$NVM_VERSION\" --depth=1 2>/dev/null; then\n    :\n  # Fetch given version\n  elif ! command git --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" fetch origin \"$NVM_VERSION\" --depth=1; then\n    nvm_echo >&2 \"$fetch_error\"\n    exit 1\n  fi\n  command git -c advice.detachedHead=false --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" checkout -f --quiet FETCH_HEAD || {\n    nvm_echo >&2 \"Failed to checkout the given version $NVM_VERSION. Please report this!\"\n    exit 2\n  }\n  if [ -n \"$(command git --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" show-ref refs/heads/master)\" ]; then\n    if command git --no-pager --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" branch --quiet 2>/dev/null; then\n      command git --no-pager --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" branch --quiet -D master >/dev/null 2>&1\n    else\n      nvm_echo >&2 \"Your version of git is out of date. Please update it!\"\n      command git --no-pager --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" branch -D master >/dev/null 2>&1\n    fi\n  fi\n\n  nvm_echo \"=> Compressing and cleaning up git repository\"\n  if ! command git --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" reflog expire --expire=now --all; then\n    nvm_echo >&2 \"Your version of git is out of date. Please update it!\"\n  fi\n  if ! command git --git-dir=\"$INSTALL_DIR\"/.git --work-tree=\"$INSTALL_DIR\" gc --auto --aggressive --prune=now ; then\n    nvm_echo >&2 \"Your version of git is out of date. Please update it!\"\n  fi\n  return\n}\n\n#\n# Automatically install Node.js\n#\nnvm_install_node() {\n  local NODE_VERSION_LOCAL\n  NODE_VERSION_LOCAL=\"$(nvm_node_version)\"\n\n  if [ -z \"$NODE_VERSION_LOCAL\" ]; then\n    return 0\n  fi\n\n  nvm_echo \"=> Installing Node.js version $NODE_VERSION_LOCAL\"\n  nvm install \"$NODE_VERSION_LOCAL\"\n  local CURRENT_NVM_NODE\n\n  CURRENT_NVM_NODE=\"$(nvm_version current)\"\n  if [ \"$(nvm_version \"$NODE_VERSION_LOCAL\")\" == \"$CURRENT_NVM_NODE\" ]; then\n    nvm_echo \"=> Node.js version $NODE_VERSION_LOCAL has been successfully installed\"\n  else\n    nvm_echo >&2 \"Failed to install Node.js $NODE_VERSION_LOCAL\"\n  fi\n}\n\ninstall_nvm_as_script() {\n  local INSTALL_DIR\n  INSTALL_DIR=\"$(nvm_install_dir)\"\n  local NVM_SOURCE_LOCAL\n  NVM_SOURCE_LOCAL=\"$(nvm_source script)\"\n  local NVM_EXEC_SOURCE\n  NVM_EXEC_SOURCE=\"$(nvm_source script-nvm-exec)\"\n  local NVM_BASH_COMPLETION_SOURCE\n  NVM_BASH_COMPLETION_SOURCE=\"$(nvm_source script-nvm-bash-completion)\"\n\n  # Downloading to $INSTALL_DIR\n  mkdir -p \"$INSTALL_DIR\"\n  if [ -f \"$INSTALL_DIR/nvm.sh\" ]; then\n    nvm_echo \"=> nvm is already installed in $INSTALL_DIR, trying to update the script\"\n  else\n    nvm_echo \"=> Downloading nvm as script to '$INSTALL_DIR'\"\n  fi\n  nvm_download -s \"$NVM_SOURCE_LOCAL\" -o \"$INSTALL_DIR/nvm.sh\" || {\n    nvm_echo >&2 \"Failed to download '$NVM_SOURCE_LOCAL'\"\n    return 1\n  } &\n  nvm_download -s \"$NVM_EXEC_SOURCE\" -o \"$INSTALL_DIR/nvm-exec\" || {\n    nvm_echo >&2 \"Failed to download '$NVM_EXEC_SOURCE'\"\n    return 2\n  } &\n  nvm_download -s \"$NVM_BASH_COMPLETION_SOURCE\" -o \"$INSTALL_DIR/bash_completion\" || {\n    nvm_echo >&2 \"Failed to download '$NVM_BASH_COMPLETION_SOURCE'\"\n    return 2\n  } &\n  for job in $(jobs -p | command sort)\n  do\n    wait \"$job\" || return $?\n  done\n  chmod a+x \"$INSTALL_DIR/nvm-exec\" || {\n    nvm_echo >&2 \"Failed to mark '$INSTALL_DIR/nvm-exec' as executable\"\n    return 3\n  }\n}\n\nnvm_try_profile() {\n  if [ -z \"${1-}\" ] || [ ! -f \"${1}\" ]; then\n    return 1\n  fi\n  nvm_echo \"${1}\"\n}\n\n#\n# Detect profile file if not specified as environment variable\n# (eg: PROFILE=~/.myprofile)\n# The echo'ed path is guaranteed to be an existing file\n# Otherwise, an empty string is returned\n#\nnvm_detect_profile() {\n  if [ \"${PROFILE-}\" = '/dev/null' ]; then\n    # the user has specifically requested NOT to have nvm touch their profile\n    return\n  fi\n\n  if [ -n \"${PROFILE}\" ] && [ -f \"${PROFILE}\" ]; then\n    nvm_echo \"${PROFILE}\"\n    return\n  fi\n\n  local DETECTED_PROFILE\n  DETECTED_PROFILE=''\n\n  if [ \"${SHELL#*bash}\" != \"$SHELL\" ]; then\n    if [ -f \"$HOME/.bashrc\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bashrc\"\n    elif [ -f \"$HOME/.bash_profile\" ]; then\n      DETECTED_PROFILE=\"$HOME/.bash_profile\"\n    fi\n  elif [ \"${SHELL#*zsh}\" != \"$SHELL\" ]; then\n    if [ -f \"${ZDOTDIR:-${HOME}}/.zshrc\" ]; then\n      DETECTED_PROFILE=\"${ZDOTDIR:-${HOME}}/.zshrc\"\n    elif [ -f \"${ZDOTDIR:-${HOME}}/.zprofile\" ]; then\n      DETECTED_PROFILE=\"${ZDOTDIR:-${HOME}}/.zprofile\"\n    fi\n  fi\n\n  if [ -z \"$DETECTED_PROFILE\" ]; then\n    for EACH_PROFILE in \".profile\" \".bashrc\" \".bash_profile\" \".zprofile\" \".zshrc\"\n    do\n      if DETECTED_PROFILE=\"$(nvm_try_profile \"${ZDOTDIR:-${HOME}}/${EACH_PROFILE}\")\"; then\n        break\n      fi\n    done\n  fi\n\n  if [ -n \"$DETECTED_PROFILE\" ]; then\n    nvm_echo \"$DETECTED_PROFILE\"\n  fi\n}\n\n#\n# Check whether the user has any globally-installed npm modules in their system\n# Node, and warn them if so.\n#\nnvm_check_global_modules() {\n  local NPM_COMMAND\n  NPM_COMMAND=\"$(command -v npm 2>/dev/null)\" || return 0\n  [ -n \"${NVM_DIR}\" ] && [ -z \"${NPM_COMMAND%%\"$NVM_DIR\"/*}\" ] && return 0\n\n  local NPM_VERSION\n  NPM_VERSION=\"$(npm --version)\"\n  NPM_VERSION=\"${NPM_VERSION:--1}\"\n  [ \"${NPM_VERSION%%[!-0-9]*}\" -gt 0 ] || return 0\n\n  local NPM_GLOBAL_MODULES\n  NPM_GLOBAL_MODULES=\"$(\n    npm list -g --depth=0 |\n    command sed -e '/ npm@/d' -e '/ (empty)$/d'\n  )\"\n\n  local MODULE_COUNT\n  MODULE_COUNT=\"$(\n    command printf %s\\\\n \"$NPM_GLOBAL_MODULES\" |\n    command sed -ne '1!p' |                     # Remove the first line\n    wc -l | command tr -d ' '                   # Count entries\n  )\"\n\n  if [ \"${MODULE_COUNT}\" != '0' ]; then\n    # shellcheck disable=SC2016\n    nvm_echo '=> You currently have modules installed globally with `npm`. These will no'\n    # shellcheck disable=SC2016\n    nvm_echo '=> longer be linked to the active version of Node when you install a new node'\n    # shellcheck disable=SC2016\n    nvm_echo '=> with `nvm`; and they may (depending on how you construct your `$PATH`)'\n    # shellcheck disable=SC2016\n    nvm_echo '=> override the binaries of modules installed with `nvm`:'\n    nvm_echo\n\n    command printf %s\\\\n \"$NPM_GLOBAL_MODULES\"\n    nvm_echo '=> If you wish to uninstall them at a later point (or re-install them under your'\n    # shellcheck disable=SC2016\n    nvm_echo '=> `nvm` node installs), you can remove them from the system Node as follows:'\n    nvm_echo\n    nvm_echo '     $ nvm use system'\n    nvm_echo '     $ npm uninstall -g a_module'\n    nvm_echo\n  fi\n}\n\nnvm_do_install() {\n  if [ -n \"${NVM_DIR-}\" ] && ! [ -d \"${NVM_DIR}\" ]; then\n    if [ -e \"${NVM_DIR}\" ]; then\n      nvm_echo >&2 \"File \\\"${NVM_DIR}\\\" has the same name as installation directory.\"\n      exit 1\n    fi\n\n    if [ \"${NVM_DIR}\" = \"$(nvm_default_install_dir)\" ]; then\n      mkdir \"${NVM_DIR}\"\n    else\n      nvm_echo >&2 \"You have \\$NVM_DIR set to \\\"${NVM_DIR}\\\", but that directory does not exist. Check your profile files and environment.\"\n      exit 1\n    fi\n  fi\n  # Disable the optional which check, https://www.shellcheck.net/wiki/SC2230\n  # shellcheck disable=SC2230\n  if nvm_has xcode-select && [ \"$(xcode-select -p >/dev/null 2>/dev/null ; echo $?)\" = '2' ] && [ \"$(which git)\" = '/usr/bin/git' ] && [ \"$(which curl)\" = '/usr/bin/curl' ]; then\n    nvm_echo >&2 'You may be on a Mac, and need to install the Xcode Command Line Developer Tools.'\n    # shellcheck disable=SC2016\n    nvm_echo >&2 'If so, run `xcode-select --install` and try again. If not, please report this!'\n    exit 1\n  fi\n  if [ -z \"${METHOD}\" ]; then\n    # Autodetect install method\n    if nvm_has git; then\n      install_nvm_from_git\n    elif nvm_has curl || nvm_has wget; then\n      install_nvm_as_script\n    else\n      nvm_echo >&2 'You need git, curl, or wget to install nvm'\n      exit 1\n    fi\n  elif [ \"${METHOD}\" = 'git' ]; then\n    if ! nvm_has git; then\n      nvm_echo >&2 \"You need git to install nvm\"\n      exit 1\n    fi\n    install_nvm_from_git\n  elif [ \"${METHOD}\" = 'script' ]; then\n    if ! nvm_has curl && ! nvm_has wget; then\n      nvm_echo >&2 \"You need curl or wget to install nvm\"\n      exit 1\n    fi\n    install_nvm_as_script\n  else\n    nvm_echo >&2 \"The environment variable \\$METHOD is set to \\\"${METHOD}\\\", which is not recognized as a valid installation method.\"\n    exit 1\n  fi\n\n  nvm_echo\n\n  local NVM_PROFILE\n  NVM_PROFILE=\"$(nvm_detect_profile)\"\n  local PROFILE_INSTALL_DIR\n  PROFILE_INSTALL_DIR=\"$(nvm_install_dir | command sed \"s:^$HOME:\\$HOME:\")\"\n\n  SOURCE_STR=\"\\\\nexport NVM_DIR=\\\"${PROFILE_INSTALL_DIR}\\\"\\\\n[ -s \\\"\\$NVM_DIR/nvm.sh\\\" ] && \\\\. \\\"\\$NVM_DIR/nvm.sh\\\"  # This loads nvm\\\\n\"\n\n  # shellcheck disable=SC2016\n  COMPLETION_STR='[ -s \"$NVM_DIR/bash_completion\" ] && \\. \"$NVM_DIR/bash_completion\"  # This loads nvm bash_completion\\n'\n  BASH_OR_ZSH=false\n\n  if [ -z \"${NVM_PROFILE-}\" ] ; then\n    local TRIED_PROFILE\n    if [ -n \"${PROFILE}\" ]; then\n      TRIED_PROFILE=\"${NVM_PROFILE} (as defined in \\$PROFILE), \"\n    fi\n    nvm_echo \"=> Profile not found. Tried ${TRIED_PROFILE-}~/.bashrc, ~/.bash_profile, ~/.zprofile, ~/.zshrc, and ~/.profile.\"\n    nvm_echo \"=> Create one of them and run this script again\"\n    nvm_echo \"   OR\"\n    nvm_echo \"=> Append the following lines to the correct file yourself:\"\n    command printf \"${SOURCE_STR}\"\n    nvm_echo\n  else\n    if nvm_profile_is_bash_or_zsh \"${NVM_PROFILE-}\"; then\n      BASH_OR_ZSH=true\n    fi\n    if ! command grep -qc '/nvm.sh' \"$NVM_PROFILE\"; then\n      nvm_echo \"=> Appending nvm source string to $NVM_PROFILE\"\n      command printf \"${SOURCE_STR}\" >> \"$NVM_PROFILE\"\n    else\n      nvm_echo \"=> nvm source string already in ${NVM_PROFILE}\"\n    fi\n    # shellcheck disable=SC2016\n    if ${BASH_OR_ZSH} && ! command grep -qc '$NVM_DIR/bash_completion' \"$NVM_PROFILE\"; then\n      nvm_echo \"=> Appending bash_completion source string to $NVM_PROFILE\"\n      command printf \"$COMPLETION_STR\" >> \"$NVM_PROFILE\"\n    else\n      nvm_echo \"=> bash_completion source string already in ${NVM_PROFILE}\"\n    fi\n  fi\n  if ${BASH_OR_ZSH} && [ -z \"${NVM_PROFILE-}\" ] ; then\n    nvm_echo \"=> Please also append the following lines to the if you are using bash/zsh shell:\"\n    command printf \"${COMPLETION_STR}\"\n  fi\n\n  # Source nvm\n  # shellcheck source=/dev/null\n  \\. \"$(nvm_install_dir)/nvm.sh\"\n\n  nvm_check_global_modules\n\n  nvm_install_node\n\n  nvm_reset\n\n  nvm_echo \"=> Close and reopen your terminal to start using nvm or run the following to use it now:\"\n  command printf \"${SOURCE_STR}\"\n  if ${BASH_OR_ZSH} ; then\n    command printf \"${COMPLETION_STR}\"\n  fi\n}\n\n#\n# Unsets the various functions defined\n# during the execution of the install script\n#\nnvm_reset() {\n  unset -f nvm_has nvm_install_dir nvm_latest_version nvm_profile_is_bash_or_zsh \\\n    nvm_source nvm_node_version nvm_download install_nvm_from_git nvm_install_node \\\n    install_nvm_as_script nvm_try_profile nvm_detect_profile nvm_check_global_modules \\\n    nvm_do_install nvm_reset nvm_default_install_dir nvm_grep\n}\n\n[ \"_$NVM_ENV\" = \"_testing\" ] || nvm_do_install\n\n} # this ensures the entire script is downloaded #\n"
        },
        {
          "name": "nvm-exec",
          "type": "blob",
          "size": 0.3623046875,
          "content": "#!/usr/bin/env bash\n\nDIR=\"$(command cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n\nunset NVM_CD_FLAGS\n\n# shellcheck disable=SC1090,SC1091\n\\. \"$DIR/nvm.sh\" --no-use\n\nif [ -n \"$NODE_VERSION\" ]; then\n  nvm use \"$NODE_VERSION\" > /dev/null || exit 127\nelif ! nvm use >/dev/null 2>&1; then\n  echo \"No NODE_VERSION provided; no .nvmrc file found\" >&2\n  exit 127\nfi\n\nexec \"$@\"\n"
        },
        {
          "name": "nvm.sh",
          "type": "blob",
          "size": 145.9755859375,
          "content": "# Node Version Manager\n# Implemented as a POSIX-compliant function\n# Should work on sh, dash, bash, ksh, zsh\n# To use source this file from your bash profile\n#\n# Implemented by Tim Caswell <tim@creationix.com>\n# with much bash help from Matthew Ranney\n\n# \"local\" warning, quote expansion warning, sed warning, `local` warning\n# shellcheck disable=SC2039,SC2016,SC2001,SC3043\n{ # this ensures the entire script is downloaded #\n\n# shellcheck disable=SC3028\nNVM_SCRIPT_SOURCE=\"$_\"\n\nnvm_is_zsh() {\n  [ -n \"${ZSH_VERSION-}\" ]\n}\n\nnvm_stdout_is_terminal() {\n  [ -t 1 ]\n}\n\nnvm_echo() {\n  command printf %s\\\\n \"$*\" 2>/dev/null\n}\n\nnvm_echo_with_colors() {\n  command printf %b\\\\n \"$*\" 2>/dev/null\n}\n\nnvm_cd() {\n  \\cd \"$@\"\n}\n\nnvm_err() {\n  >&2 nvm_echo \"$@\"\n}\n\nnvm_err_with_colors() {\n  >&2 nvm_echo_with_colors \"$@\"\n}\n\nnvm_grep() {\n  GREP_OPTIONS='' command grep \"$@\"\n}\n\nnvm_has() {\n  type \"${1-}\" >/dev/null 2>&1\n}\n\nnvm_has_non_aliased() {\n  nvm_has \"${1-}\" && ! nvm_is_alias \"${1-}\"\n}\n\nnvm_is_alias() {\n  # this is intentionally not \"command alias\" so it works in zsh.\n  \\alias \"${1-}\" >/dev/null 2>&1\n}\n\nnvm_command_info() {\n  local COMMAND\n  local INFO\n  COMMAND=\"${1}\"\n  if type \"${COMMAND}\" | nvm_grep -q hashed; then\n    INFO=\"$(type \"${COMMAND}\" | command sed -E 's/\\(|\\)//g' | command awk '{print $4}')\"\n  elif type \"${COMMAND}\" | nvm_grep -q aliased; then\n    # shellcheck disable=SC2230\n    INFO=\"$(which \"${COMMAND}\") ($(type \"${COMMAND}\" | command awk '{ $1=$2=$3=$4=\"\" ;print }' | command sed -e 's/^\\ *//g' -Ee \"s/\\`|'//g\"))\"\n  elif type \"${COMMAND}\" | nvm_grep -q \"^${COMMAND} is an alias for\"; then\n    # shellcheck disable=SC2230\n    INFO=\"$(which \"${COMMAND}\") ($(type \"${COMMAND}\" | command awk '{ $1=$2=$3=$4=$5=\"\" ;print }' | command sed 's/^\\ *//g'))\"\n  elif type \"${COMMAND}\" | nvm_grep -q \"^${COMMAND} is /\"; then\n    INFO=\"$(type \"${COMMAND}\" | command awk '{print $3}')\"\n  else\n    INFO=\"$(type \"${COMMAND}\")\"\n  fi\n  nvm_echo \"${INFO}\"\n}\n\nnvm_has_colors() {\n  local NVM_NUM_COLORS\n  if nvm_has tput; then\n    NVM_NUM_COLORS=\"$(command tput -T \"${TERM:-vt100}\" colors)\"\n  fi\n  [ \"${NVM_NUM_COLORS:--1}\" -ge 8 ] && [ \"${NVM_NO_COLORS-}\" != '--no-colors' ]\n}\n\nnvm_curl_libz_support() {\n  curl -V 2>/dev/null | nvm_grep \"^Features:\" | nvm_grep -q \"libz\"\n}\n\nnvm_curl_use_compression() {\n  nvm_curl_libz_support && nvm_version_greater_than_or_equal_to \"$(nvm_curl_version)\" 7.21.0\n}\n\nnvm_get_latest() {\n  local NVM_LATEST_URL\n  local CURL_COMPRESSED_FLAG\n  if nvm_has \"curl\"; then\n    if nvm_curl_use_compression; then\n      CURL_COMPRESSED_FLAG=\"--compressed\"\n    fi\n    NVM_LATEST_URL=\"$(curl ${CURL_COMPRESSED_FLAG:-} -q -w \"%{url_effective}\\\\n\" -L -s -S https://latest.nvm.sh -o /dev/null)\"\n  elif nvm_has \"wget\"; then\n    NVM_LATEST_URL=\"$(wget -q https://latest.nvm.sh --server-response -O /dev/null 2>&1 | command awk '/^  Location: /{DEST=$2} END{ print DEST }')\"\n  else\n    nvm_err 'nvm needs curl or wget to proceed.'\n    return 1\n  fi\n  if [ -z \"${NVM_LATEST_URL}\" ]; then\n    nvm_err \"https://latest.nvm.sh did not redirect to the latest release on GitHub\"\n    return 2\n  fi\n  nvm_echo \"${NVM_LATEST_URL##*/}\"\n}\n\nnvm_download() {\n  if nvm_has \"curl\"; then\n    local CURL_COMPRESSED_FLAG=\"\"\n    local CURL_HEADER_FLAG=\"\"\n\n    if [ -n \"${NVM_AUTH_HEADER:-}\" ]; then\n      sanitized_header=$(nvm_sanitize_auth_header \"${NVM_AUTH_HEADER}\")\n      CURL_HEADER_FLAG=\"--header \\\"Authorization: ${sanitized_header}\\\"\"\n    fi\n\n    if nvm_curl_use_compression; then\n      CURL_COMPRESSED_FLAG=\"--compressed\"\n    fi\n    local NVM_DOWNLOAD_ARGS\n    NVM_DOWNLOAD_ARGS=''\n    for arg in \"$@\"; do\n      NVM_DOWNLOAD_ARGS=\"${NVM_DOWNLOAD_ARGS} \\\"$arg\\\"\"\n    done\n    eval \"curl -q --fail ${CURL_COMPRESSED_FLAG:-} ${CURL_HEADER_FLAG:-} ${NVM_DOWNLOAD_ARGS}\"\n  elif nvm_has \"wget\"; then\n    # Emulate curl with wget\n    ARGS=$(nvm_echo \"$@\" | command sed -e 's/--progress-bar /--progress=bar /' \\\n                            -e 's/--compressed //' \\\n                            -e 's/--fail //' \\\n                            -e 's/-L //' \\\n                            -e 's/-I /--server-response /' \\\n                            -e 's/-s /-q /' \\\n                            -e 's/-sS /-nv /' \\\n                            -e 's/-o /-O /' \\\n                            -e 's/-C - /-c /')\n\n    if [ -n \"${NVM_AUTH_HEADER:-}\" ]; then\n      ARGS=\"${ARGS} --header \\\"${NVM_AUTH_HEADER}\\\"\"\n    fi\n    # shellcheck disable=SC2086\n    eval wget $ARGS\n  fi\n}\n\nnvm_sanitize_auth_header() {\n    # Remove potentially dangerous characters\n    nvm_echo \"$1\" | command sed 's/[^a-zA-Z0-9:;_. -]//g'\n}\n\nnvm_has_system_node() {\n  [ \"$(nvm deactivate >/dev/null 2>&1 && command -v node)\" != '' ]\n}\n\nnvm_has_system_iojs() {\n  [ \"$(nvm deactivate >/dev/null 2>&1 && command -v iojs)\" != '' ]\n}\n\nnvm_is_version_installed() {\n  if [ -z \"${1-}\" ]; then\n    return 1\n  fi\n  local NVM_NODE_BINARY\n  NVM_NODE_BINARY='node'\n  if [ \"_$(nvm_get_os)\" = '_win' ]; then\n    NVM_NODE_BINARY='node.exe'\n  fi\n  if [ -x \"$(nvm_version_path \"$1\" 2>/dev/null)/bin/${NVM_NODE_BINARY}\" ]; then\n    return 0\n  fi\n  return 1\n}\n\nnvm_print_npm_version() {\n  if nvm_has \"npm\"; then\n    local NPM_VERSION\n    NPM_VERSION=\"$(npm --version 2>/dev/null)\"\n    if [ -n \"${NPM_VERSION}\" ]; then\n      command printf \" (npm v${NPM_VERSION})\"\n    fi\n  fi\n}\n\nnvm_install_latest_npm() {\n  nvm_echo 'Attempting to upgrade to the latest working version of npm...'\n  local NODE_VERSION\n  NODE_VERSION=\"$(nvm_strip_iojs_prefix \"$(nvm_ls_current)\")\"\n  local NPM_VERSION\n  NPM_VERSION=\"$(npm --version 2>/dev/null)\"\n\n  if [ \"${NODE_VERSION}\" = 'system' ]; then\n    NODE_VERSION=\"$(node --version)\"\n  elif [ \"${NODE_VERSION}\" = 'none' ]; then\n    nvm_echo \"Detected node version ${NODE_VERSION}, npm version v${NPM_VERSION}\"\n    NODE_VERSION=''\n  fi\n  if [ -z \"${NODE_VERSION}\" ]; then\n    nvm_err 'Unable to obtain node version.'\n    return 1\n  fi\n  if [ -z \"${NPM_VERSION}\" ]; then\n    nvm_err 'Unable to obtain npm version.'\n    return 2\n  fi\n\n  local NVM_NPM_CMD\n  NVM_NPM_CMD='npm'\n  if [ \"${NVM_DEBUG-}\" = 1 ]; then\n    nvm_echo \"Detected node version ${NODE_VERSION}, npm version v${NPM_VERSION}\"\n    NVM_NPM_CMD='nvm_echo npm'\n  fi\n\n  local NVM_IS_0_6\n  NVM_IS_0_6=0\n  if nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 0.6.0 && nvm_version_greater 0.7.0 \"${NODE_VERSION}\"; then\n    NVM_IS_0_6=1\n  fi\n  local NVM_IS_0_9\n  NVM_IS_0_9=0\n  if nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 0.9.0 && nvm_version_greater 0.10.0 \"${NODE_VERSION}\"; then\n    NVM_IS_0_9=1\n  fi\n\n  if [ $NVM_IS_0_6 -eq 1 ]; then\n    nvm_echo '* `node` v0.6.x can only upgrade to `npm` v1.3.x'\n    $NVM_NPM_CMD install -g npm@1.3\n  elif [ $NVM_IS_0_9 -eq 0 ]; then\n    # node 0.9 breaks here, for some reason\n    if nvm_version_greater_than_or_equal_to \"${NPM_VERSION}\" 1.0.0 && nvm_version_greater 2.0.0 \"${NPM_VERSION}\"; then\n      nvm_echo '* `npm` v1.x needs to first jump to `npm` v1.4.28 to be able to upgrade further'\n      $NVM_NPM_CMD install -g npm@1.4.28\n    elif nvm_version_greater_than_or_equal_to \"${NPM_VERSION}\" 2.0.0 && nvm_version_greater 3.0.0 \"${NPM_VERSION}\"; then\n      nvm_echo '* `npm` v2.x needs to first jump to the latest v2 to be able to upgrade further'\n      $NVM_NPM_CMD install -g npm@2\n    fi\n  fi\n\n  if [ $NVM_IS_0_9 -eq 1 ] || [ $NVM_IS_0_6 -eq 1 ]; then\n    nvm_echo '* node v0.6 and v0.9 are unable to upgrade further'\n  elif nvm_version_greater 1.1.0 \"${NODE_VERSION}\"; then\n    nvm_echo '* `npm` v4.5.x is the last version that works on `node` versions < v1.1.0'\n    $NVM_NPM_CMD install -g npm@4.5\n  elif nvm_version_greater 4.0.0 \"${NODE_VERSION}\"; then\n    nvm_echo '* `npm` v5 and higher do not work on `node` versions below v4.0.0'\n    $NVM_NPM_CMD install -g npm@4\n  elif [ $NVM_IS_0_9 -eq 0 ] && [ $NVM_IS_0_6 -eq 0 ]; then\n    local NVM_IS_4_4_OR_BELOW\n    NVM_IS_4_4_OR_BELOW=0\n    if nvm_version_greater 4.5.0 \"${NODE_VERSION}\"; then\n      NVM_IS_4_4_OR_BELOW=1\n    fi\n\n    local NVM_IS_5_OR_ABOVE\n    NVM_IS_5_OR_ABOVE=0\n    if [ $NVM_IS_4_4_OR_BELOW -eq 0 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 5.0.0; then\n      NVM_IS_5_OR_ABOVE=1\n    fi\n\n    local NVM_IS_6_OR_ABOVE\n    NVM_IS_6_OR_ABOVE=0\n    local NVM_IS_6_2_OR_ABOVE\n    NVM_IS_6_2_OR_ABOVE=0\n    if [ $NVM_IS_5_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 6.0.0; then\n      NVM_IS_6_OR_ABOVE=1\n      if nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 6.2.0; then\n        NVM_IS_6_2_OR_ABOVE=1\n      fi\n    fi\n\n    local NVM_IS_9_OR_ABOVE\n    NVM_IS_9_OR_ABOVE=0\n    local NVM_IS_9_3_OR_ABOVE\n    NVM_IS_9_3_OR_ABOVE=0\n    if [ $NVM_IS_6_2_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 9.0.0; then\n      NVM_IS_9_OR_ABOVE=1\n      if nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 9.3.0; then\n        NVM_IS_9_3_OR_ABOVE=1\n      fi\n    fi\n\n    local NVM_IS_10_OR_ABOVE\n    NVM_IS_10_OR_ABOVE=0\n    if [ $NVM_IS_9_3_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 10.0.0; then\n      NVM_IS_10_OR_ABOVE=1\n    fi\n    local NVM_IS_12_LTS_OR_ABOVE\n    NVM_IS_12_LTS_OR_ABOVE=0\n    if [ $NVM_IS_10_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 12.13.0; then\n      NVM_IS_12_LTS_OR_ABOVE=1\n    fi\n    local NVM_IS_13_OR_ABOVE\n    NVM_IS_13_OR_ABOVE=0\n    if [ $NVM_IS_12_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 13.0.0; then\n      NVM_IS_13_OR_ABOVE=1\n    fi\n    local NVM_IS_14_LTS_OR_ABOVE\n    NVM_IS_14_LTS_OR_ABOVE=0\n    if [ $NVM_IS_13_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 14.15.0; then\n      NVM_IS_14_LTS_OR_ABOVE=1\n    fi\n    local NVM_IS_14_17_OR_ABOVE\n    NVM_IS_14_17_OR_ABOVE=0\n    if [ $NVM_IS_14_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 14.17.0; then\n      NVM_IS_14_17_OR_ABOVE=1\n    fi\n    local NVM_IS_15_OR_ABOVE\n    NVM_IS_15_OR_ABOVE=0\n    if [ $NVM_IS_14_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 15.0.0; then\n      NVM_IS_15_OR_ABOVE=1\n    fi\n    local NVM_IS_16_OR_ABOVE\n    NVM_IS_16_OR_ABOVE=0\n    if [ $NVM_IS_15_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 16.0.0; then\n      NVM_IS_16_OR_ABOVE=1\n    fi\n    local NVM_IS_16_LTS_OR_ABOVE\n    NVM_IS_16_LTS_OR_ABOVE=0\n    if [ $NVM_IS_16_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 16.13.0; then\n      NVM_IS_16_LTS_OR_ABOVE=1\n    fi\n    local NVM_IS_17_OR_ABOVE\n    NVM_IS_17_OR_ABOVE=0\n    if [ $NVM_IS_16_LTS_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 17.0.0; then\n      NVM_IS_17_OR_ABOVE=1\n    fi\n    local NVM_IS_18_OR_ABOVE\n    NVM_IS_18_OR_ABOVE=0\n    if [ $NVM_IS_17_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 18.0.0; then\n      NVM_IS_18_OR_ABOVE=1\n    fi\n    local NVM_IS_18_17_OR_ABOVE\n    NVM_IS_18_17_OR_ABOVE=0\n    if [ $NVM_IS_18_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 18.17.0; then\n      NVM_IS_18_17_OR_ABOVE=1\n    fi\n    local NVM_IS_19_OR_ABOVE\n    NVM_IS_19_OR_ABOVE=0\n    if [ $NVM_IS_18_17_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 19.0.0; then\n      NVM_IS_19_OR_ABOVE=1\n    fi\n    local NVM_IS_20_5_OR_ABOVE\n    NVM_IS_20_5_OR_ABOVE=0\n    if [ $NVM_IS_19_OR_ABOVE -eq 1 ] && nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" 20.5.0; then\n      NVM_IS_20_5_OR_ABOVE=1\n    fi\n\n    if [ $NVM_IS_4_4_OR_BELOW -eq 1 ] || {\n      [ $NVM_IS_5_OR_ABOVE -eq 1 ] && nvm_version_greater 5.10.0 \"${NODE_VERSION}\"; \\\n    }; then\n      nvm_echo '* `npm` `v5.3.x` is the last version that works on `node` 4.x versions below v4.4, or 5.x versions below v5.10, due to `Buffer.alloc`'\n      $NVM_NPM_CMD install -g npm@5.3\n    elif [ $NVM_IS_4_4_OR_BELOW -eq 0 ] && nvm_version_greater 4.7.0 \"${NODE_VERSION}\"; then\n      nvm_echo '* `npm` `v5.4.1` is the last version that works on `node` `v4.5` and `v4.6`'\n      $NVM_NPM_CMD install -g npm@5.4.1\n    elif [ $NVM_IS_6_OR_ABOVE -eq 0 ]; then\n      nvm_echo '* `npm` `v5.x` is the last version that works on `node` below `v6.0.0`'\n      $NVM_NPM_CMD install -g npm@5\n    elif \\\n      { [ $NVM_IS_6_OR_ABOVE -eq 1 ] && [ $NVM_IS_6_2_OR_ABOVE -eq 0 ]; } \\\n      || { [ $NVM_IS_9_OR_ABOVE -eq 1 ] && [ $NVM_IS_9_3_OR_ABOVE -eq 0 ]; } \\\n    ; then\n      nvm_echo '* `npm` `v6.9` is the last version that works on `node` `v6.0.x`, `v6.1.x`, `v9.0.x`, `v9.1.x`, or `v9.2.x`'\n      $NVM_NPM_CMD install -g npm@6.9\n    elif [ $NVM_IS_10_OR_ABOVE -eq 0 ]; then\n      if nvm_version_greater 4.4.4 \"${NPM_VERSION}\"; then\n        nvm_echo '* `npm` `v4.4.4` or later is required to install npm v6.14.18'\n        $NVM_NPM_CMD install -g npm@4\n      fi\n      nvm_echo '* `npm` `v6.x` is the last version that works on `node` below `v10.0.0`'\n      $NVM_NPM_CMD install -g npm@6\n    elif \\\n      [ $NVM_IS_12_LTS_OR_ABOVE -eq 0 ] \\\n      || { [ $NVM_IS_13_OR_ABOVE -eq 1 ] && [ $NVM_IS_14_LTS_OR_ABOVE -eq 0 ]; } \\\n      || { [ $NVM_IS_15_OR_ABOVE -eq 1 ] && [ $NVM_IS_16_OR_ABOVE -eq 0 ]; } \\\n    ; then\n      nvm_echo '* `npm` `v7.x` is the last version that works on `node` `v13`, `v15`, below `v12.13`, or `v14.0` - `v14.15`'\n      $NVM_NPM_CMD install -g npm@7\n    elif \\\n      { [ $NVM_IS_12_LTS_OR_ABOVE -eq 1 ] && [ $NVM_IS_13_OR_ABOVE -eq 0 ]; } \\\n      || { [ $NVM_IS_14_LTS_OR_ABOVE -eq 1 ] && [ $NVM_IS_14_17_OR_ABOVE -eq 0 ]; } \\\n      || { [ $NVM_IS_16_OR_ABOVE -eq 1 ] && [ $NVM_IS_16_LTS_OR_ABOVE -eq 0 ]; } \\\n      || { [ $NVM_IS_17_OR_ABOVE -eq 1 ] && [ $NVM_IS_18_OR_ABOVE -eq 0 ]; } \\\n    ; then\n      nvm_echo '* `npm` `v8.6` is the last version that works on `node` `v12`, `v14.13` - `v14.16`, or `v16.0` - `v16.12`'\n      # ^8.7 breaks `npm ls` on file: deps\n      $NVM_NPM_CMD install -g npm@8.6\n    elif \\\n      [ $NVM_IS_18_17_OR_ABOVE -eq 0 ] \\\n      || { [ $NVM_IS_19_OR_ABOVE -eq 1 ] && [ $NVM_IS_20_5_OR_ABOVE -eq 0 ]; } \\\n    ; then\n      nvm_echo '* `npm` `v9.x` is the last version that works on `node` `< v18.17`, `v19`, or `v20.0` - `v20.4`'\n      $NVM_NPM_CMD install -g npm@9\n    else\n      nvm_echo '* Installing latest `npm`; if this does not work on your node version, please report a bug!'\n      $NVM_NPM_CMD install -g npm\n    fi\n  fi\n  nvm_echo \"* npm upgraded to: v$(npm --version 2>/dev/null)\"\n}\n\n# Make zsh glob matching behave same as bash\n# This fixes the \"zsh: no matches found\" errors\nif [ -z \"${NVM_CD_FLAGS-}\" ]; then\n  export NVM_CD_FLAGS=''\nfi\nif nvm_is_zsh; then\n  NVM_CD_FLAGS=\"-q\"\nfi\n\n# Auto detect the NVM_DIR when not set\nif [ -z \"${NVM_DIR-}\" ]; then\n  # shellcheck disable=SC2128\n  if [ -n \"${BASH_SOURCE-}\" ]; then\n    # shellcheck disable=SC2169,SC3054\n    NVM_SCRIPT_SOURCE=\"${BASH_SOURCE[0]}\"\n  fi\n  # shellcheck disable=SC2086\n  NVM_DIR=\"$(nvm_cd ${NVM_CD_FLAGS} \"$(dirname \"${NVM_SCRIPT_SOURCE:-$0}\")\" >/dev/null && \\pwd)\"\n  export NVM_DIR\nelse\n  # https://unix.stackexchange.com/a/198289\n  case $NVM_DIR in\n    *[!/]*/)\n      NVM_DIR=\"${NVM_DIR%\"${NVM_DIR##*[!/]}\"}\"\n      export NVM_DIR\n      nvm_err \"Warning: \\$NVM_DIR should not have trailing slashes\"\n    ;;\n  esac\nfi\nunset NVM_SCRIPT_SOURCE 2>/dev/null\n\nnvm_tree_contains_path() {\n  local tree\n  tree=\"${1-}\"\n  local node_path\n  node_path=\"${2-}\"\n\n  if [ \"@${tree}@\" = \"@@\" ] || [ \"@${node_path}@\" = \"@@\" ]; then\n    nvm_err \"both the tree and the node path are required\"\n    return 2\n  fi\n\n  local previous_pathdir\n  previous_pathdir=\"${node_path}\"\n  local pathdir\n  pathdir=$(dirname \"${previous_pathdir}\")\n  while [ \"${pathdir}\" != '' ] && [ \"${pathdir}\" != '.' ] && [ \"${pathdir}\" != '/' ] &&\n      [ \"${pathdir}\" != \"${tree}\" ] && [ \"${pathdir}\" != \"${previous_pathdir}\" ]; do\n    previous_pathdir=\"${pathdir}\"\n    pathdir=$(dirname \"${previous_pathdir}\")\n  done\n  [ \"${pathdir}\" = \"${tree}\" ]\n}\n\nnvm_find_project_dir() {\n  local path_\n  path_=\"${PWD}\"\n  while [ \"${path_}\" != \"\" ] && [ \"${path_}\" != '.' ] && [ ! -f \"${path_}/package.json\" ] && [ ! -d \"${path_}/node_modules\" ]; do\n    path_=${path_%/*}\n  done\n  nvm_echo \"${path_}\"\n}\n\n# Traverse up in directory tree to find containing folder\nnvm_find_up() {\n  local path_\n  path_=\"${PWD}\"\n  while [ \"${path_}\" != \"\" ] && [ \"${path_}\" != '.' ] && [ ! -f \"${path_}/${1-}\" ]; do\n    path_=${path_%/*}\n  done\n  nvm_echo \"${path_}\"\n}\n\nnvm_find_nvmrc() {\n  local dir\n  dir=\"$(nvm_find_up '.nvmrc')\"\n  if [ -e \"${dir}/.nvmrc\" ]; then\n    nvm_echo \"${dir}/.nvmrc\"\n  fi\n}\n\nnvm_nvmrc_invalid_msg() {\n  local error_text\n  error_text=\"invalid .nvmrc!\nall non-commented content (anything after # is a comment) must be either:\n  - a single bare nvm-recognized version-ish\n  - or, multiple distinct key-value pairs, each key/value separated by a single equals sign (=)\n\nadditionally, a single bare nvm-recognized version-ish must be present (after stripping comments).\"\n\n  local warn_text\n  warn_text=\"non-commented content parsed:\n${1}\"\n\n  nvm_err \"$(nvm_wrap_with_color_code 'r' \"${error_text}\")\n\n$(nvm_wrap_with_color_code 'y' \"${warn_text}\")\"\n}\n\nnvm_process_nvmrc() {\n  local NVMRC_PATH\n  NVMRC_PATH=\"$1\"\n  local lines\n\n  lines=$(command sed 's/#.*//' \"$NVMRC_PATH\" | command sed 's/^[[:space:]]*//;s/[[:space:]]*$//' | nvm_grep -v '^$')\n\n  if [ -z \"$lines\" ]; then\n    nvm_nvmrc_invalid_msg \"${lines}\"\n    return 1\n  fi\n\n  # Initialize key-value storage\n  local keys\n  keys=''\n  local values\n  values=''\n  local unpaired_line\n  unpaired_line=''\n\n  while IFS= read -r line; do\n    if [ -z \"${line}\" ]; then\n      continue\n    elif [ -z \"${line%%=*}\" ]; then\n      if [ -n \"${unpaired_line}\" ]; then\n        nvm_nvmrc_invalid_msg \"${lines}\"\n        return 1\n      fi\n      unpaired_line=\"${line}\"\n    elif case \"$line\" in *'='*) true;; *) false;; esac; then\n      key=\"${line%%=*}\"\n      value=\"${line#*=}\"\n\n      # Trim whitespace around key and value\n      key=$(nvm_echo \"${key}\" | command sed 's/^[[:space:]]*//;s/[[:space:]]*$//')\n      value=$(nvm_echo \"${value}\" | command sed 's/^[[:space:]]*//;s/[[:space:]]*$//')\n\n      # Check for invalid key \"node\"\n      if [ \"${key}\" = 'node' ]; then\n        nvm_nvmrc_invalid_msg \"${lines}\"\n        return 1\n      fi\n\n      # Check for duplicate keys\n      if nvm_echo \"${keys}\" | nvm_grep -q -E \"(^| )${key}( |$)\"; then\n        nvm_nvmrc_invalid_msg \"${lines}\"\n        return 1\n      fi\n      keys=\"${keys} ${key}\"\n      values=\"${values} ${value}\"\n    else\n      if [ -n \"${unpaired_line}\" ]; then\n        nvm_nvmrc_invalid_msg \"${lines}\"\n        return 1\n      fi\n      unpaired_line=\"${line}\"\n    fi\n  done <<EOF\n$lines\nEOF\n\n  if [ -z \"${unpaired_line}\" ]; then\n    nvm_nvmrc_invalid_msg \"${lines}\"\n    return 1\n  fi\n\n  nvm_echo \"${unpaired_line}\"\n}\n\nnvm_rc_version() {\n  export NVM_RC_VERSION=''\n  local NVMRC_PATH\n  NVMRC_PATH=\"$(nvm_find_nvmrc)\"\n  if [ ! -e \"${NVMRC_PATH}\" ]; then\n    if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n      nvm_err \"No .nvmrc file found\"\n    fi\n    return 1\n  fi\n\n\n  if ! NVM_RC_VERSION=\"$(nvm_process_nvmrc \"${NVMRC_PATH}\")\"; then\n    return 1\n  fi\n\n  if [ -z \"${NVM_RC_VERSION}\" ]; then\n    if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n      nvm_err \"Warning: empty .nvmrc file found at \\\"${NVMRC_PATH}\\\"\"\n    fi\n    return 2\n  fi\n  if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n    nvm_echo \"Found '${NVMRC_PATH}' with version <${NVM_RC_VERSION}>\"\n  fi\n}\n\nnvm_clang_version() {\n  clang --version | command awk '{ if ($2 == \"version\") print $3; else if ($3 == \"version\") print $4 }' | command sed 's/-.*$//g'\n}\n\nnvm_curl_version() {\n  curl -V | command awk '{ if ($1 == \"curl\") print $2 }' | command sed 's/-.*$//g'\n}\n\nnvm_version_greater() {\n  command awk 'BEGIN {\n    if (ARGV[1] == \"\" || ARGV[2] == \"\") exit(1)\n    split(ARGV[1], a, /\\./);\n    split(ARGV[2], b, /\\./);\n    for (i=1; i<=3; i++) {\n      if (a[i] && a[i] !~ /^[0-9]+$/) exit(2);\n      if (b[i] && b[i] !~ /^[0-9]+$/) { exit(0); }\n      if (a[i] < b[i]) exit(3);\n      else if (a[i] > b[i]) exit(0);\n    }\n    exit(4)\n  }' \"${1#v}\" \"${2#v}\"\n}\n\nnvm_version_greater_than_or_equal_to() {\n  command awk 'BEGIN {\n    if (ARGV[1] == \"\" || ARGV[2] == \"\") exit(1)\n    split(ARGV[1], a, /\\./);\n    split(ARGV[2], b, /\\./);\n    for (i=1; i<=3; i++) {\n      if (a[i] && a[i] !~ /^[0-9]+$/) exit(2);\n      if (a[i] < b[i]) exit(3);\n      else if (a[i] > b[i]) exit(0);\n    }\n    exit(0)\n  }' \"${1#v}\" \"${2#v}\"\n}\n\nnvm_version_dir() {\n  local NVM_WHICH_DIR\n  NVM_WHICH_DIR=\"${1-}\"\n  if [ -z \"${NVM_WHICH_DIR}\" ] || [ \"${NVM_WHICH_DIR}\" = \"new\" ]; then\n    nvm_echo \"${NVM_DIR}/versions/node\"\n  elif [ \"_${NVM_WHICH_DIR}\" = \"_iojs\" ]; then\n    nvm_echo \"${NVM_DIR}/versions/io.js\"\n  elif [ \"_${NVM_WHICH_DIR}\" = \"_old\" ]; then\n    nvm_echo \"${NVM_DIR}\"\n  else\n    nvm_err 'unknown version dir'\n    return 3\n  fi\n}\n\nnvm_alias_path() {\n  nvm_echo \"$(nvm_version_dir old)/alias\"\n}\n\nnvm_version_path() {\n  local VERSION\n  VERSION=\"${1-}\"\n  if [ -z \"${VERSION}\" ]; then\n    nvm_err 'version is required'\n    return 3\n  elif nvm_is_iojs_version \"${VERSION}\"; then\n    nvm_echo \"$(nvm_version_dir iojs)/$(nvm_strip_iojs_prefix \"${VERSION}\")\"\n  elif nvm_version_greater 0.12.0 \"${VERSION}\"; then\n    nvm_echo \"$(nvm_version_dir old)/${VERSION}\"\n  else\n    nvm_echo \"$(nvm_version_dir new)/${VERSION}\"\n  fi\n}\n\nnvm_ensure_version_installed() {\n  local PROVIDED_VERSION\n  PROVIDED_VERSION=\"${1-}\"\n  local IS_VERSION_FROM_NVMRC\n  IS_VERSION_FROM_NVMRC=\"${2-}\"\n  if [ \"${PROVIDED_VERSION}\" = 'system' ]; then\n    if nvm_has_system_iojs || nvm_has_system_node; then\n      return 0\n    fi\n    nvm_err \"N/A: no system version of node/io.js is installed.\"\n    return 1\n  fi\n  local LOCAL_VERSION\n  local EXIT_CODE\n  LOCAL_VERSION=\"$(nvm_version \"${PROVIDED_VERSION}\")\"\n  EXIT_CODE=\"$?\"\n  local NVM_VERSION_DIR\n  if [ \"${EXIT_CODE}\" != \"0\" ] || ! nvm_is_version_installed \"${LOCAL_VERSION}\"; then\n    if VERSION=\"$(nvm_resolve_alias \"${PROVIDED_VERSION}\")\"; then\n      nvm_err \"N/A: version \\\"${PROVIDED_VERSION} -> ${VERSION}\\\" is not yet installed.\"\n    else\n      local PREFIXED_VERSION\n      PREFIXED_VERSION=\"$(nvm_ensure_version_prefix \"${PROVIDED_VERSION}\")\"\n      nvm_err \"N/A: version \\\"${PREFIXED_VERSION:-$PROVIDED_VERSION}\\\" is not yet installed.\"\n    fi\n    nvm_err \"\"\n    if [ \"${PROVIDED_VERSION}\" = 'lts' ]; then\n      nvm_err '`lts` is not an alias - you may need to run `nvm install --lts` to install and `nvm use --lts` to use it.'\n    elif [ \"${IS_VERSION_FROM_NVMRC}\" != '1' ]; then\n      nvm_err \"You need to run \\`nvm install ${PROVIDED_VERSION}\\` to install and use it.\"\n    else\n      nvm_err 'You need to run `nvm install` to install and use the node version specified in `.nvmrc`.'\n    fi\n    return 1\n  fi\n}\n\n# Expand a version using the version cache\nnvm_version() {\n  local PATTERN\n  PATTERN=\"${1-}\"\n  local VERSION\n  # The default version is the current one\n  if [ -z \"${PATTERN}\" ]; then\n    PATTERN='current'\n  fi\n\n  if [ \"${PATTERN}\" = \"current\" ]; then\n    nvm_ls_current\n    return $?\n  fi\n\n  local NVM_NODE_PREFIX\n  NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n  case \"_${PATTERN}\" in\n    \"_${NVM_NODE_PREFIX}\" | \"_${NVM_NODE_PREFIX}-\")\n      PATTERN=\"stable\"\n    ;;\n  esac\n  VERSION=\"$(nvm_ls \"${PATTERN}\" | command tail -1)\"\n  if [ -z \"${VERSION}\" ] || [ \"_${VERSION}\" = \"_N/A\" ]; then\n    nvm_echo \"N/A\"\n    return 3\n  fi\n  nvm_echo \"${VERSION}\"\n}\n\nnvm_remote_version() {\n  local PATTERN\n  PATTERN=\"${1-}\"\n  local VERSION\n  if nvm_validate_implicit_alias \"${PATTERN}\" 2>/dev/null; then\n    case \"${PATTERN}\" in\n      \"$(nvm_iojs_prefix)\")\n        VERSION=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote_iojs | command tail -1)\" &&:\n      ;;\n      *)\n        VERSION=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote \"${PATTERN}\")\" &&:\n      ;;\n    esac\n  else\n    VERSION=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_remote_versions \"${PATTERN}\" | command tail -1)\"\n  fi\n  if [ -n \"${NVM_VERSION_ONLY-}\" ]; then\n    command awk 'BEGIN {\n      n = split(ARGV[1], a);\n      print a[1]\n    }' \"${VERSION}\"\n  else\n    nvm_echo \"${VERSION}\"\n  fi\n  if [ \"${VERSION}\" = 'N/A' ]; then\n    return 3\n  fi\n}\n\nnvm_remote_versions() {\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  local NVM_NODE_PREFIX\n  NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n\n  local PATTERN\n  PATTERN=\"${1-}\"\n\n  local NVM_FLAVOR\n  if [ -n \"${NVM_LTS-}\" ]; then\n    NVM_FLAVOR=\"${NVM_NODE_PREFIX}\"\n  fi\n\n  case \"${PATTERN}\" in\n    \"${NVM_IOJS_PREFIX}\" | \"io.js\")\n      NVM_FLAVOR=\"${NVM_IOJS_PREFIX}\"\n      unset PATTERN\n    ;;\n    \"${NVM_NODE_PREFIX}\")\n      NVM_FLAVOR=\"${NVM_NODE_PREFIX}\"\n      unset PATTERN\n    ;;\n  esac\n\n  if nvm_validate_implicit_alias \"${PATTERN-}\" 2>/dev/null; then\n    nvm_err 'Implicit aliases are not supported in nvm_remote_versions.'\n    return 1\n  fi\n\n  local NVM_LS_REMOTE_EXIT_CODE\n  NVM_LS_REMOTE_EXIT_CODE=0\n  local NVM_LS_REMOTE_PRE_MERGED_OUTPUT\n  NVM_LS_REMOTE_PRE_MERGED_OUTPUT=''\n  local NVM_LS_REMOTE_POST_MERGED_OUTPUT\n  NVM_LS_REMOTE_POST_MERGED_OUTPUT=''\n  if [ -z \"${NVM_FLAVOR-}\" ] || [ \"${NVM_FLAVOR-}\" = \"${NVM_NODE_PREFIX}\" ]; then\n    local NVM_LS_REMOTE_OUTPUT\n    # extra space is needed here to avoid weird behavior when `nvm_ls_remote` ends in a `*`\n    NVM_LS_REMOTE_OUTPUT=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote \"${PATTERN-}\") \" &&:\n    NVM_LS_REMOTE_EXIT_CODE=$?\n    # split output into two\n    NVM_LS_REMOTE_PRE_MERGED_OUTPUT=\"${NVM_LS_REMOTE_OUTPUT%%v4\\.0\\.0*}\"\n    NVM_LS_REMOTE_POST_MERGED_OUTPUT=\"${NVM_LS_REMOTE_OUTPUT#\"$NVM_LS_REMOTE_PRE_MERGED_OUTPUT\"}\"\n  fi\n\n  local NVM_LS_REMOTE_IOJS_EXIT_CODE\n  NVM_LS_REMOTE_IOJS_EXIT_CODE=0\n  local NVM_LS_REMOTE_IOJS_OUTPUT\n  NVM_LS_REMOTE_IOJS_OUTPUT=''\n  if [ -z \"${NVM_LTS-}\" ] && {\n    [ -z \"${NVM_FLAVOR-}\" ] || [ \"${NVM_FLAVOR-}\" = \"${NVM_IOJS_PREFIX}\" ];\n  }; then\n    NVM_LS_REMOTE_IOJS_OUTPUT=$(nvm_ls_remote_iojs \"${PATTERN-}\") &&:\n    NVM_LS_REMOTE_IOJS_EXIT_CODE=$?\n  fi\n\n  # the `sed` removes both blank lines, and only-whitespace lines (see \"weird behavior\" ~19 lines up)\n  VERSIONS=\"$(nvm_echo \"${NVM_LS_REMOTE_PRE_MERGED_OUTPUT}\n${NVM_LS_REMOTE_IOJS_OUTPUT}\n${NVM_LS_REMOTE_POST_MERGED_OUTPUT}\" | nvm_grep -v \"N/A\" | command sed '/^ *$/d')\"\n\n  if [ -z \"${VERSIONS}\" ]; then\n    nvm_echo 'N/A'\n    return 3\n  fi\n  # the `sed` is to remove trailing whitespaces (see \"weird behavior\" ~25 lines up)\n  nvm_echo \"${VERSIONS}\" | command sed 's/ *$//g'\n  # shellcheck disable=SC2317\n  return $NVM_LS_REMOTE_EXIT_CODE || $NVM_LS_REMOTE_IOJS_EXIT_CODE\n}\n\nnvm_is_valid_version() {\n  if nvm_validate_implicit_alias \"${1-}\" 2>/dev/null; then\n    return 0\n  fi\n  case \"${1-}\" in\n    \"$(nvm_iojs_prefix)\" | \\\n    \"$(nvm_node_prefix)\")\n      return 0\n    ;;\n    *)\n      local VERSION\n      VERSION=\"$(nvm_strip_iojs_prefix \"${1-}\")\"\n      nvm_version_greater_than_or_equal_to \"${VERSION}\" 0\n    ;;\n  esac\n}\n\nnvm_normalize_version() {\n  command awk 'BEGIN {\n    split(ARGV[1], a, /\\./);\n    printf \"%d%06d%06d\\n\", a[1], a[2], a[3];\n    exit;\n  }' \"${1#v}\"\n}\n\nnvm_normalize_lts() {\n  local LTS\n  LTS=\"${1-}\"\n\n  case \"${LTS}\" in\n    lts/-[123456789] | lts/-[123456789][0123456789]*)\n      local N\n      N=\"$(echo \"${LTS}\" | cut -d '-' -f 2)\"\n      N=$((N+1))\n      # shellcheck disable=SC2181\n      if [ $? -ne 0 ]; then\n        nvm_echo \"${LTS}\"\n        return 0\n      fi\n      local NVM_ALIAS_DIR\n      NVM_ALIAS_DIR=\"$(nvm_alias_path)\"\n      local RESULT\n      RESULT=\"$(command ls \"${NVM_ALIAS_DIR}/lts\" | command tail -n \"${N}\" | command head -n 1)\"\n      if [ \"${RESULT}\" != '*' ]; then\n        nvm_echo \"lts/${RESULT}\"\n      else\n        nvm_err 'That many LTS releases do not exist yet.'\n        return 2\n      fi\n    ;;\n    *)\n      if [ \"${LTS}\" != \"$(echo \"${LTS}\" | command tr '[:upper:]' '[:lower:]')\" ]; then\n        nvm_err 'LTS names must be lowercase'\n        return 3\n      fi\n      nvm_echo \"${LTS}\"\n    ;;\n  esac\n}\n\nnvm_ensure_version_prefix() {\n  local NVM_VERSION\n  NVM_VERSION=\"$(nvm_strip_iojs_prefix \"${1-}\" | command sed -e 's/^\\([0-9]\\)/v\\1/g')\"\n  if nvm_is_iojs_version \"${1-}\"; then\n    nvm_add_iojs_prefix \"${NVM_VERSION}\"\n  else\n    nvm_echo \"${NVM_VERSION}\"\n  fi\n}\n\nnvm_format_version() {\n  local VERSION\n  VERSION=\"$(nvm_ensure_version_prefix \"${1-}\")\"\n  local NUM_GROUPS\n  NUM_GROUPS=\"$(nvm_num_version_groups \"${VERSION}\")\"\n  if [ \"${NUM_GROUPS}\" -lt 3 ]; then\n    nvm_format_version \"${VERSION%.}.0\"\n  else\n    nvm_echo \"${VERSION}\" | command cut -f1-3 -d.\n  fi\n}\n\nnvm_num_version_groups() {\n  local VERSION\n  VERSION=\"${1-}\"\n  VERSION=\"${VERSION#v}\"\n  VERSION=\"${VERSION%.}\"\n  if [ -z \"${VERSION}\" ]; then\n    nvm_echo \"0\"\n    return\n  fi\n  local NVM_NUM_DOTS\n  NVM_NUM_DOTS=$(nvm_echo \"${VERSION}\" | command sed -e 's/[^\\.]//g')\n  local NVM_NUM_GROUPS\n  NVM_NUM_GROUPS=\".${NVM_NUM_DOTS}\" # add extra dot, since it's (n - 1) dots at this point\n  nvm_echo \"${#NVM_NUM_GROUPS}\"\n}\n\nnvm_strip_path() {\n  if [ -z \"${NVM_DIR-}\" ]; then\n    nvm_err '${NVM_DIR} not set!'\n    return 1\n  fi\n  command printf %s \"${1-}\" | command awk -v NVM_DIR=\"${NVM_DIR}\" -v RS=: '\n  index($0, NVM_DIR) == 1 {\n    path = substr($0, length(NVM_DIR) + 1)\n    if (path ~ \"^(/versions/[^/]*)?/[^/]*'\"${2-}\"'.*$\") { next }\n  }\n  # The final RT will contain a colon if the input has a trailing colon, or a null string otherwise\n  { printf \"%s%s\", sep, $0; sep=RS } END { printf \"%s\", RT }'\n}\n\nnvm_change_path() {\n  # if there’s no initial path, just return the supplementary path\n  if [ -z \"${1-}\" ]; then\n    nvm_echo \"${3-}${2-}\"\n  # if the initial path doesn’t contain an nvm path, prepend the supplementary\n  # path\n  elif ! nvm_echo \"${1-}\" | nvm_grep -q \"${NVM_DIR}/[^/]*${2-}\" \\\n    && ! nvm_echo \"${1-}\" | nvm_grep -q \"${NVM_DIR}/versions/[^/]*/[^/]*${2-}\"; then\n    nvm_echo \"${3-}${2-}:${1-}\"\n  # if the initial path contains BOTH an nvm path (checked for above) and\n  # that nvm path is preceded by a system binary path, just prepend the\n  # supplementary path instead of replacing it.\n  # https://github.com/nvm-sh/nvm/issues/1652#issuecomment-342571223\n  elif nvm_echo \"${1-}\" | nvm_grep -Eq \"(^|:)(/usr(/local)?)?${2-}:.*${NVM_DIR}/[^/]*${2-}\" \\\n    || nvm_echo \"${1-}\" | nvm_grep -Eq \"(^|:)(/usr(/local)?)?${2-}:.*${NVM_DIR}/versions/[^/]*/[^/]*${2-}\"; then\n    nvm_echo \"${3-}${2-}:${1-}\"\n  # use sed to replace the existing nvm path with the supplementary path. This\n  # preserves the order of the path.\n  else\n    nvm_echo \"${1-}\" | command sed \\\n      -e \"s#${NVM_DIR}/[^/]*${2-}[^:]*#${3-}${2-}#\" \\\n      -e \"s#${NVM_DIR}/versions/[^/]*/[^/]*${2-}[^:]*#${3-}${2-}#\"\n  fi\n}\n\nnvm_binary_available() {\n  # binaries started with node 0.8.6\n  nvm_version_greater_than_or_equal_to \"$(nvm_strip_iojs_prefix \"${1-}\")\" v0.8.6\n}\n\nnvm_set_colors() {\n  if [ \"${#1}\" -eq 5 ] && nvm_echo \"$1\" | nvm_grep -E \"^[rRgGbBcCyYmMkKeW]{1,}$\" 1>/dev/null; then\n    local INSTALLED_COLOR\n    local LTS_AND_SYSTEM_COLOR\n    local CURRENT_COLOR\n    local NOT_INSTALLED_COLOR\n    local DEFAULT_COLOR\n\n    INSTALLED_COLOR=\"$(echo \"$1\" | awk '{ print substr($0, 1, 1); }')\"\n    LTS_AND_SYSTEM_COLOR=\"$(echo \"$1\" | awk '{ print substr($0, 2, 1); }')\"\n    CURRENT_COLOR=\"$(echo \"$1\" | awk '{ print substr($0, 3, 1); }')\"\n    NOT_INSTALLED_COLOR=\"$(echo \"$1\" | awk '{ print substr($0, 4, 1); }')\"\n    DEFAULT_COLOR=\"$(echo \"$1\" | awk '{ print substr($0, 5, 1); }')\"\n    if ! nvm_has_colors; then\n      nvm_echo \"Setting colors to: ${INSTALLED_COLOR} ${LTS_AND_SYSTEM_COLOR} ${CURRENT_COLOR} ${NOT_INSTALLED_COLOR} ${DEFAULT_COLOR}\"\n      nvm_echo \"WARNING: Colors may not display because they are not supported in this shell.\"\n    else\n      nvm_echo_with_colors \"Setting colors to: $(nvm_wrap_with_color_code \"${INSTALLED_COLOR}\" \"${INSTALLED_COLOR}\")$(nvm_wrap_with_color_code \"${LTS_AND_SYSTEM_COLOR}\" \"${LTS_AND_SYSTEM_COLOR}\")$(nvm_wrap_with_color_code \"${CURRENT_COLOR}\" \"${CURRENT_COLOR}\")$(nvm_wrap_with_color_code \"${NOT_INSTALLED_COLOR}\" \"${NOT_INSTALLED_COLOR}\")$(nvm_wrap_with_color_code \"${DEFAULT_COLOR}\" \"${DEFAULT_COLOR}\")\"\n    fi\n    export NVM_COLORS=\"$1\"\n  else\n    return 17\n  fi\n}\n\nnvm_get_colors() {\n  local COLOR\n  local SYS_COLOR\n  local COLORS\n  COLORS=\"${NVM_COLORS:-bygre}\"\n  case $1 in\n    1) COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 1, 1); }')\");;\n    2) COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 2, 1); }')\");;\n    3) COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 3, 1); }')\");;\n    4) COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 4, 1); }')\");;\n    5) COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 5, 1); }')\");;\n    6)\n      SYS_COLOR=$(nvm_print_color_code \"$(echo \"$COLORS\" | awk '{ print substr($0, 2, 1); }')\")\n      COLOR=$(nvm_echo \"$SYS_COLOR\" | command tr '0;' '1;')\n      ;;\n    *)\n      nvm_err \"Invalid color index, ${1-}\"\n      return 1\n    ;;\n  esac\n\n  nvm_echo \"$COLOR\"\n}\n\nnvm_wrap_with_color_code() {\n  local CODE\n  CODE=\"$(nvm_print_color_code \"${1}\" 2>/dev/null ||:)\"\n  local TEXT\n  TEXT=\"${2-}\"\n  if nvm_has_colors && [ -n \"${CODE}\" ]; then\n    nvm_echo_with_colors \"\\033[${CODE}${TEXT}\\033[0m\"\n  else\n    nvm_echo \"${TEXT}\"\n  fi\n}\n\nnvm_print_color_code() {\n  case \"${1-}\" in\n    '0') return 0 ;;\n    'r') nvm_echo '0;31m' ;;\n    'R') nvm_echo '1;31m' ;;\n    'g') nvm_echo '0;32m' ;;\n    'G') nvm_echo '1;32m' ;;\n    'b') nvm_echo '0;34m' ;;\n    'B') nvm_echo '1;34m' ;;\n    'c') nvm_echo '0;36m' ;;\n    'C') nvm_echo '1;36m' ;;\n    'm') nvm_echo '0;35m' ;;\n    'M') nvm_echo '1;35m' ;;\n    'y') nvm_echo '0;33m' ;;\n    'Y') nvm_echo '1;33m' ;;\n    'k') nvm_echo '0;30m' ;;\n    'K') nvm_echo '1;30m' ;;\n    'e') nvm_echo '0;37m' ;;\n    'W') nvm_echo '1;37m' ;;\n    *)\n      nvm_err \"Invalid color code: ${1-}\";\n      return 1\n    ;;\n  esac\n}\n\nnvm_print_formatted_alias() {\n  local ALIAS\n  ALIAS=\"${1-}\"\n  local DEST\n  DEST=\"${2-}\"\n  local VERSION\n  VERSION=\"${3-}\"\n  if [ -z \"${VERSION}\" ]; then\n    VERSION=\"$(nvm_version \"${DEST}\")\" ||:\n  fi\n  local VERSION_FORMAT\n  local ALIAS_FORMAT\n  local DEST_FORMAT\n\n  local INSTALLED_COLOR\n  local SYSTEM_COLOR\n  local CURRENT_COLOR\n  local NOT_INSTALLED_COLOR\n  local DEFAULT_COLOR\n  local LTS_COLOR\n\n  INSTALLED_COLOR=$(nvm_get_colors 1)\n  SYSTEM_COLOR=$(nvm_get_colors 2)\n  CURRENT_COLOR=$(nvm_get_colors 3)\n  NOT_INSTALLED_COLOR=$(nvm_get_colors 4)\n  DEFAULT_COLOR=$(nvm_get_colors 5)\n  LTS_COLOR=$(nvm_get_colors 6)\n\n  ALIAS_FORMAT='%s'\n  DEST_FORMAT='%s'\n  VERSION_FORMAT='%s'\n  local NEWLINE\n  NEWLINE='\\n'\n  if [ \"_${DEFAULT}\" = '_true' ]; then\n    NEWLINE=' (default)\\n'\n  fi\n  local ARROW\n  ARROW='->'\n  if nvm_has_colors; then\n    ARROW='\\033[0;90m->\\033[0m'\n    if [ \"_${DEFAULT}\" = '_true' ]; then\n      NEWLINE=\" \\033[${DEFAULT_COLOR}(default)\\033[0m\\n\"\n    fi\n    if [ \"_${VERSION}\" = \"_${NVM_CURRENT-}\" ]; then\n      ALIAS_FORMAT=\"\\033[${CURRENT_COLOR}%s\\033[0m\"\n      DEST_FORMAT=\"\\033[${CURRENT_COLOR}%s\\033[0m\"\n      VERSION_FORMAT=\"\\033[${CURRENT_COLOR}%s\\033[0m\"\n    elif nvm_is_version_installed \"${VERSION}\"; then\n      ALIAS_FORMAT=\"\\033[${INSTALLED_COLOR}%s\\033[0m\"\n      DEST_FORMAT=\"\\033[${INSTALLED_COLOR}%s\\033[0m\"\n      VERSION_FORMAT=\"\\033[${INSTALLED_COLOR}%s\\033[0m\"\n    elif [ \"${VERSION}\" = '∞' ] || [ \"${VERSION}\" = 'N/A' ]; then\n      ALIAS_FORMAT=\"\\033[${NOT_INSTALLED_COLOR}%s\\033[0m\"\n      DEST_FORMAT=\"\\033[${NOT_INSTALLED_COLOR}%s\\033[0m\"\n      VERSION_FORMAT=\"\\033[${NOT_INSTALLED_COLOR}%s\\033[0m\"\n    fi\n    if [ \"_${NVM_LTS-}\" = '_true' ]; then\n      ALIAS_FORMAT=\"\\033[${LTS_COLOR}%s\\033[0m\"\n    fi\n    if [ \"_${DEST%/*}\" = \"_lts\" ]; then\n      DEST_FORMAT=\"\\033[${LTS_COLOR}%s\\033[0m\"\n    fi\n  elif [ \"_${VERSION}\" != '_∞' ] && [ \"_${VERSION}\" != '_N/A' ]; then\n    VERSION_FORMAT='%s *'\n  fi\n  if [ \"${DEST}\" = \"${VERSION}\" ]; then\n    command printf -- \"${ALIAS_FORMAT} ${ARROW} ${VERSION_FORMAT}${NEWLINE}\" \"${ALIAS}\" \"${DEST}\"\n  else\n    command printf -- \"${ALIAS_FORMAT} ${ARROW} ${DEST_FORMAT} (${ARROW} ${VERSION_FORMAT})${NEWLINE}\" \"${ALIAS}\" \"${DEST}\" \"${VERSION}\"\n  fi\n}\n\nnvm_print_alias_path() {\n  local NVM_ALIAS_DIR\n  NVM_ALIAS_DIR=\"${1-}\"\n  if [ -z \"${NVM_ALIAS_DIR}\" ]; then\n    nvm_err 'An alias dir is required.'\n    return 1\n  fi\n  local ALIAS_PATH\n  ALIAS_PATH=\"${2-}\"\n  if [ -z \"${ALIAS_PATH}\" ]; then\n    nvm_err 'An alias path is required.'\n    return 2\n  fi\n  local ALIAS\n  ALIAS=\"${ALIAS_PATH##\"${NVM_ALIAS_DIR}\"\\/}\"\n  local DEST\n  DEST=\"$(nvm_alias \"${ALIAS}\" 2>/dev/null)\" ||:\n  if [ -n \"${DEST}\" ]; then\n    NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" NVM_LTS=\"${NVM_LTS-}\" DEFAULT=false nvm_print_formatted_alias \"${ALIAS}\" \"${DEST}\"\n  fi\n}\n\nnvm_print_default_alias() {\n  local ALIAS\n  ALIAS=\"${1-}\"\n  if [ -z \"${ALIAS}\" ]; then\n    nvm_err 'A default alias is required.'\n    return 1\n  fi\n  local DEST\n  DEST=\"$(nvm_print_implicit_alias local \"${ALIAS}\")\"\n  if [ -n \"${DEST}\" ]; then\n    NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" DEFAULT=true nvm_print_formatted_alias \"${ALIAS}\" \"${DEST}\"\n  fi\n}\n\nnvm_make_alias() {\n  local ALIAS\n  ALIAS=\"${1-}\"\n  if [ -z \"${ALIAS}\" ]; then\n    nvm_err \"an alias name is required\"\n    return 1\n  fi\n  local VERSION\n  VERSION=\"${2-}\"\n  if [ -z \"${VERSION}\" ]; then\n    nvm_err \"an alias target version is required\"\n    return 2\n  fi\n  nvm_echo \"${VERSION}\" | tee \"$(nvm_alias_path)/${ALIAS}\" >/dev/null\n}\n\nnvm_list_aliases() {\n  local ALIAS\n  ALIAS=\"${1-}\"\n\n  local NVM_CURRENT\n  NVM_CURRENT=\"$(nvm_ls_current)\"\n  local NVM_ALIAS_DIR\n  NVM_ALIAS_DIR=\"$(nvm_alias_path)\"\n  command mkdir -p \"${NVM_ALIAS_DIR}/lts\"\n\n  if [ \"${ALIAS}\" != \"${ALIAS#lts/}\" ]; then\n    nvm_alias \"${ALIAS}\"\n    return $?\n  fi\n\n  nvm_is_zsh && unsetopt local_options nomatch\n  (\n    local ALIAS_PATH\n    for ALIAS_PATH in \"${NVM_ALIAS_DIR}/${ALIAS}\"*; do\n      NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" NVM_CURRENT=\"${NVM_CURRENT}\" nvm_print_alias_path \"${NVM_ALIAS_DIR}\" \"${ALIAS_PATH}\" &\n    done\n    wait\n  ) | command sort\n\n  (\n    local ALIAS_NAME\n    for ALIAS_NAME in \"$(nvm_node_prefix)\" \"stable\" \"unstable\" \"$(nvm_iojs_prefix)\"; do\n      {\n        # shellcheck disable=SC2030,SC2031 # (https://github.com/koalaman/shellcheck/issues/2217)\n        if [ ! -f \"${NVM_ALIAS_DIR}/${ALIAS_NAME}\" ] && { [ -z \"${ALIAS}\" ] || [ \"${ALIAS_NAME}\" = \"${ALIAS}\" ]; }; then\n          NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" NVM_CURRENT=\"${NVM_CURRENT}\" nvm_print_default_alias \"${ALIAS_NAME}\"\n        fi\n      } &\n    done\n    wait\n  ) | command sort\n\n  (\n    local LTS_ALIAS\n    # shellcheck disable=SC2030,SC2031 # (https://github.com/koalaman/shellcheck/issues/2217)\n    for ALIAS_PATH in \"${NVM_ALIAS_DIR}/lts/${ALIAS}\"*; do\n      {\n        LTS_ALIAS=\"$(NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" NVM_LTS=true nvm_print_alias_path \"${NVM_ALIAS_DIR}\" \"${ALIAS_PATH}\")\"\n        if [ -n \"${LTS_ALIAS}\" ]; then\n          nvm_echo \"${LTS_ALIAS}\"\n        fi\n      } &\n    done\n    wait\n  ) | command sort\n  return\n}\n\nnvm_alias() {\n  local ALIAS\n  ALIAS=\"${1-}\"\n  if [ -z \"${ALIAS}\" ]; then\n    nvm_err 'An alias is required.'\n    return 1\n  fi\n  if ! ALIAS=\"$(nvm_normalize_lts \"${ALIAS}\")\"; then\n    return $?\n  fi\n\n  if [ -z \"${ALIAS}\" ]; then\n    return 2\n  fi\n\n  local NVM_ALIAS_PATH\n  NVM_ALIAS_PATH=\"$(nvm_alias_path)/${ALIAS}\"\n  if [ ! -f \"${NVM_ALIAS_PATH}\" ]; then\n    nvm_err 'Alias does not exist.'\n    return 2\n  fi\n\n  command awk 'NF' \"${NVM_ALIAS_PATH}\"\n}\n\nnvm_ls_current() {\n  local NVM_LS_CURRENT_NODE_PATH\n  if ! NVM_LS_CURRENT_NODE_PATH=\"$(command which node 2>/dev/null)\"; then\n    nvm_echo 'none'\n  elif nvm_tree_contains_path \"$(nvm_version_dir iojs)\" \"${NVM_LS_CURRENT_NODE_PATH}\"; then\n    nvm_add_iojs_prefix \"$(iojs --version 2>/dev/null)\"\n  elif nvm_tree_contains_path \"${NVM_DIR}\" \"${NVM_LS_CURRENT_NODE_PATH}\"; then\n    local VERSION\n    VERSION=\"$(node --version 2>/dev/null)\"\n    if [ \"${VERSION}\" = \"v0.6.21-pre\" ]; then\n      nvm_echo 'v0.6.21'\n    else\n      nvm_echo \"${VERSION:-none}\"\n    fi\n  else\n    nvm_echo 'system'\n  fi\n}\n\nnvm_resolve_alias() {\n  if [ -z \"${1-}\" ]; then\n    return 1\n  fi\n\n  local PATTERN\n  PATTERN=\"${1-}\"\n\n  local ALIAS\n  ALIAS=\"${PATTERN}\"\n  local ALIAS_TEMP\n\n  local SEEN_ALIASES\n  SEEN_ALIASES=\"${ALIAS}\"\n  local NVM_ALIAS_INDEX\n  NVM_ALIAS_INDEX=1\n  while true; do\n    ALIAS_TEMP=\"$( (nvm_alias \"${ALIAS}\" 2>/dev/null | command head -n \"${NVM_ALIAS_INDEX}\" | command tail -n 1) || nvm_echo)\"\n\n    if [ -z \"${ALIAS_TEMP}\" ]; then\n      break\n    fi\n\n    if command printf \"${SEEN_ALIASES}\" | nvm_grep -q -e \"^${ALIAS_TEMP}$\"; then\n      ALIAS=\"∞\"\n      break\n    fi\n\n    SEEN_ALIASES=\"${SEEN_ALIASES}\\\\n${ALIAS_TEMP}\"\n    ALIAS=\"${ALIAS_TEMP}\"\n  done\n\n  if [ -n \"${ALIAS}\" ] && [ \"_${ALIAS}\" != \"_${PATTERN}\" ]; then\n    local NVM_IOJS_PREFIX\n    NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n    local NVM_NODE_PREFIX\n    NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n    case \"${ALIAS}\" in\n      '∞' | \\\n      \"${NVM_IOJS_PREFIX}\" | \"${NVM_IOJS_PREFIX}-\" | \\\n      \"${NVM_NODE_PREFIX}\")\n        nvm_echo \"${ALIAS}\"\n      ;;\n      *)\n        nvm_ensure_version_prefix \"${ALIAS}\"\n      ;;\n    esac\n    return 0\n  fi\n\n  if nvm_validate_implicit_alias \"${PATTERN}\" 2>/dev/null; then\n    local IMPLICIT\n    IMPLICIT=\"$(nvm_print_implicit_alias local \"${PATTERN}\" 2>/dev/null)\"\n    if [ -n \"${IMPLICIT}\" ]; then\n      nvm_ensure_version_prefix \"${IMPLICIT}\"\n    fi\n  fi\n\n  return 2\n}\n\nnvm_resolve_local_alias() {\n  if [ -z \"${1-}\" ]; then\n    return 1\n  fi\n\n  local VERSION\n  local EXIT_CODE\n  VERSION=\"$(nvm_resolve_alias \"${1-}\")\"\n  EXIT_CODE=$?\n  if [ -z \"${VERSION}\" ]; then\n    return $EXIT_CODE\n  fi\n  if [ \"_${VERSION}\" != '_∞' ]; then\n    nvm_version \"${VERSION}\"\n  else\n    nvm_echo \"${VERSION}\"\n  fi\n}\n\nnvm_iojs_prefix() {\n  nvm_echo 'iojs'\n}\nnvm_node_prefix() {\n  nvm_echo 'node'\n}\n\nnvm_is_iojs_version() {\n  case \"${1-}\" in iojs-*) return 0 ;; esac\n  return 1\n}\n\nnvm_add_iojs_prefix() {\n  nvm_echo \"$(nvm_iojs_prefix)-$(nvm_ensure_version_prefix \"$(nvm_strip_iojs_prefix \"${1-}\")\")\"\n}\n\nnvm_strip_iojs_prefix() {\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  if [ \"${1-}\" = \"${NVM_IOJS_PREFIX}\" ]; then\n    nvm_echo\n  else\n    nvm_echo \"${1#\"${NVM_IOJS_PREFIX}\"-}\"\n  fi\n}\n\nnvm_ls() {\n  local PATTERN\n  PATTERN=\"${1-}\"\n  local VERSIONS\n  VERSIONS=''\n  if [ \"${PATTERN}\" = 'current' ]; then\n    nvm_ls_current\n    return\n  fi\n\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  local NVM_NODE_PREFIX\n  NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n  local NVM_VERSION_DIR_IOJS\n  NVM_VERSION_DIR_IOJS=\"$(nvm_version_dir \"${NVM_IOJS_PREFIX}\")\"\n  local NVM_VERSION_DIR_NEW\n  NVM_VERSION_DIR_NEW=\"$(nvm_version_dir new)\"\n  local NVM_VERSION_DIR_OLD\n  NVM_VERSION_DIR_OLD=\"$(nvm_version_dir old)\"\n\n  case \"${PATTERN}\" in\n    \"${NVM_IOJS_PREFIX}\" | \"${NVM_NODE_PREFIX}\")\n      PATTERN=\"${PATTERN}-\"\n    ;;\n    *)\n      if nvm_resolve_local_alias \"${PATTERN}\"; then\n        return\n      fi\n      PATTERN=\"$(nvm_ensure_version_prefix \"${PATTERN}\")\"\n    ;;\n  esac\n  if [ \"${PATTERN}\" = 'N/A' ]; then\n    return\n  fi\n  # If it looks like an explicit version, don't do anything funny\n  local NVM_PATTERN_STARTS_WITH_V\n  case $PATTERN in\n    v*) NVM_PATTERN_STARTS_WITH_V=true ;;\n    *) NVM_PATTERN_STARTS_WITH_V=false ;;\n  esac\n  if [ $NVM_PATTERN_STARTS_WITH_V = true ] && [ \"_$(nvm_num_version_groups \"${PATTERN}\")\" = \"_3\" ]; then\n    if nvm_is_version_installed \"${PATTERN}\"; then\n      VERSIONS=\"${PATTERN}\"\n    elif nvm_is_version_installed \"$(nvm_add_iojs_prefix \"${PATTERN}\")\"; then\n      VERSIONS=\"$(nvm_add_iojs_prefix \"${PATTERN}\")\"\n    fi\n  else\n    case \"${PATTERN}\" in\n      \"${NVM_IOJS_PREFIX}-\" | \"${NVM_NODE_PREFIX}-\" | \"system\") ;;\n      *)\n        local NUM_VERSION_GROUPS\n        NUM_VERSION_GROUPS=\"$(nvm_num_version_groups \"${PATTERN}\")\"\n        if [ \"${NUM_VERSION_GROUPS}\" = \"2\" ] || [ \"${NUM_VERSION_GROUPS}\" = \"1\" ]; then\n          PATTERN=\"${PATTERN%.}.\"\n        fi\n      ;;\n    esac\n\n    nvm_is_zsh && setopt local_options shwordsplit\n    nvm_is_zsh && unsetopt local_options markdirs\n\n    local NVM_DIRS_TO_SEARCH1\n    NVM_DIRS_TO_SEARCH1=''\n    local NVM_DIRS_TO_SEARCH2\n    NVM_DIRS_TO_SEARCH2=''\n    local NVM_DIRS_TO_SEARCH3\n    NVM_DIRS_TO_SEARCH3=''\n    local NVM_ADD_SYSTEM\n    NVM_ADD_SYSTEM=false\n    if nvm_is_iojs_version \"${PATTERN}\"; then\n      NVM_DIRS_TO_SEARCH1=\"${NVM_VERSION_DIR_IOJS}\"\n      PATTERN=\"$(nvm_strip_iojs_prefix \"${PATTERN}\")\"\n      if nvm_has_system_iojs; then\n        NVM_ADD_SYSTEM=true\n      fi\n    elif [ \"${PATTERN}\" = \"${NVM_NODE_PREFIX}-\" ]; then\n      NVM_DIRS_TO_SEARCH1=\"${NVM_VERSION_DIR_OLD}\"\n      NVM_DIRS_TO_SEARCH2=\"${NVM_VERSION_DIR_NEW}\"\n      PATTERN=''\n      if nvm_has_system_node; then\n        NVM_ADD_SYSTEM=true\n      fi\n    else\n      NVM_DIRS_TO_SEARCH1=\"${NVM_VERSION_DIR_OLD}\"\n      NVM_DIRS_TO_SEARCH2=\"${NVM_VERSION_DIR_NEW}\"\n      NVM_DIRS_TO_SEARCH3=\"${NVM_VERSION_DIR_IOJS}\"\n      if nvm_has_system_iojs || nvm_has_system_node; then\n        NVM_ADD_SYSTEM=true\n      fi\n    fi\n\n    if ! [ -d \"${NVM_DIRS_TO_SEARCH1}\" ] || ! (command ls -1qA \"${NVM_DIRS_TO_SEARCH1}\" | nvm_grep -q .); then\n      NVM_DIRS_TO_SEARCH1=''\n    fi\n    if ! [ -d \"${NVM_DIRS_TO_SEARCH2}\" ] || ! (command ls -1qA \"${NVM_DIRS_TO_SEARCH2}\" | nvm_grep -q .); then\n      NVM_DIRS_TO_SEARCH2=\"${NVM_DIRS_TO_SEARCH1}\"\n    fi\n    if ! [ -d \"${NVM_DIRS_TO_SEARCH3}\" ] || ! (command ls -1qA \"${NVM_DIRS_TO_SEARCH3}\" | nvm_grep -q .); then\n      NVM_DIRS_TO_SEARCH3=\"${NVM_DIRS_TO_SEARCH2}\"\n    fi\n\n    local SEARCH_PATTERN\n    if [ -z \"${PATTERN}\" ]; then\n      PATTERN='v'\n      SEARCH_PATTERN='.*'\n    else\n      SEARCH_PATTERN=\"$(nvm_echo \"${PATTERN}\" | command sed 's#\\.#\\\\\\.#g;')\"\n    fi\n    if [ -n \"${NVM_DIRS_TO_SEARCH1}${NVM_DIRS_TO_SEARCH2}${NVM_DIRS_TO_SEARCH3}\" ]; then\n      VERSIONS=\"$(command find \"${NVM_DIRS_TO_SEARCH1}\"/* \"${NVM_DIRS_TO_SEARCH2}\"/* \"${NVM_DIRS_TO_SEARCH3}\"/* -name . -o -type d -prune -o -path \"${PATTERN}*\" \\\n        | command sed -e \"\n            s#${NVM_VERSION_DIR_IOJS}/#versions/${NVM_IOJS_PREFIX}/#;\n            s#^${NVM_DIR}/##;\n            \\\\#^[^v]# d;\n            \\\\#^versions\\$# d;\n            s#^versions/##;\n            s#^v#${NVM_NODE_PREFIX}/v#;\n            \\\\#${SEARCH_PATTERN}# !d;\n          \" \\\n          -e 's#^\\([^/]\\{1,\\}\\)/\\(.*\\)$#\\2.\\1#;' \\\n        | command sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n \\\n        | command sed -e 's#\\(.*\\)\\.\\([^\\.]\\{1,\\}\\)$#\\2-\\1#;' \\\n                      -e \"s#^${NVM_NODE_PREFIX}-##;\" \\\n      )\"\n    fi\n  fi\n\n  if [ \"${NVM_ADD_SYSTEM-}\" = true ]; then\n    if [ -z \"${PATTERN}\" ] || [ \"${PATTERN}\" = 'v' ]; then\n      VERSIONS=\"${VERSIONS}\nsystem\"\n    elif [ \"${PATTERN}\" = 'system' ]; then\n      VERSIONS=\"system\"\n    fi\n  fi\n\n  if [ -z \"${VERSIONS}\" ]; then\n    nvm_echo 'N/A'\n    return 3\n  fi\n\n  nvm_echo \"${VERSIONS}\"\n}\n\nnvm_ls_remote() {\n  local PATTERN\n  PATTERN=\"${1-}\"\n  if nvm_validate_implicit_alias \"${PATTERN}\" 2>/dev/null ; then\n    local IMPLICIT\n    IMPLICIT=\"$(nvm_print_implicit_alias remote \"${PATTERN}\")\"\n    if [ -z \"${IMPLICIT-}\" ] || [ \"${IMPLICIT}\" = 'N/A' ]; then\n      nvm_echo \"N/A\"\n      return 3\n    fi\n    PATTERN=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote \"${IMPLICIT}\" | command tail -1 | command awk '{ print $1 }')\"\n  elif [ -n \"${PATTERN}\" ]; then\n    PATTERN=\"$(nvm_ensure_version_prefix \"${PATTERN}\")\"\n  else\n    PATTERN=\".*\"\n  fi\n  NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote_index_tab node std \"${PATTERN}\"\n}\n\nnvm_ls_remote_iojs() {\n  NVM_LTS=\"${NVM_LTS-}\" nvm_ls_remote_index_tab iojs std \"${1-}\"\n}\n\n# args flavor, type, version\nnvm_ls_remote_index_tab() {\n  local LTS\n  LTS=\"${NVM_LTS-}\"\n  if [ \"$#\" -lt 3 ]; then\n    nvm_err 'not enough arguments'\n    return 5\n  fi\n\n  local FLAVOR\n  FLAVOR=\"${1-}\"\n\n  local TYPE\n  TYPE=\"${2-}\"\n\n  local MIRROR\n  MIRROR=\"$(nvm_get_mirror \"${FLAVOR}\" \"${TYPE}\")\"\n  if [ -z \"${MIRROR}\" ]; then\n    return 3\n  fi\n\n  local PREFIX\n  PREFIX=''\n  case \"${FLAVOR}-${TYPE}\" in\n    iojs-std) PREFIX=\"$(nvm_iojs_prefix)-\" ;;\n    node-std) PREFIX='' ;;\n    iojs-*)\n      nvm_err 'unknown type of io.js release'\n      return 4\n    ;;\n    *)\n      nvm_err 'unknown type of node.js release'\n      return 4\n    ;;\n  esac\n  local SORT_COMMAND\n  SORT_COMMAND='command sort'\n  case \"${FLAVOR}\" in\n    node) SORT_COMMAND='command sort -t. -u -k 1.2,1n -k 2,2n -k 3,3n' ;;\n  esac\n\n  local PATTERN\n  PATTERN=\"${3-}\"\n\n  if [ \"${PATTERN#\"${PATTERN%?}\"}\" = '.' ]; then\n    PATTERN=\"${PATTERN%.}\"\n  fi\n\n  local VERSIONS\n  if [ -n \"${PATTERN}\" ] && [ \"${PATTERN}\" != '*' ]; then\n    if [ \"${FLAVOR}\" = 'iojs' ]; then\n      PATTERN=\"$(nvm_ensure_version_prefix \"$(nvm_strip_iojs_prefix \"${PATTERN}\")\")\"\n    else\n      PATTERN=\"$(nvm_ensure_version_prefix \"${PATTERN}\")\"\n    fi\n  else\n    unset PATTERN\n  fi\n\n  nvm_is_zsh && setopt local_options shwordsplit\n  local VERSION_LIST\n  VERSION_LIST=\"$(nvm_download -L -s \"${MIRROR}/index.tab\" -o - \\\n    | command sed \"\n        1d;\n        s/^/${PREFIX}/;\n      \" \\\n  )\"\n  local LTS_ALIAS\n  local LTS_VERSION\n  command mkdir -p \"$(nvm_alias_path)/lts\"\n  { command awk '{\n        if ($10 ~ /^\\-?$/) { next }\n        if ($10 && !a[tolower($10)]++) {\n          if (alias) { print alias, version }\n          alias_name = \"lts/\" tolower($10)\n          if (!alias) { print \"lts/*\", alias_name }\n          alias = alias_name\n          version = $1\n        }\n      }\n      END {\n        if (alias) {\n          print alias, version\n        }\n      }' \\\n    | while read -r LTS_ALIAS_LINE; do\n      LTS_ALIAS=\"${LTS_ALIAS_LINE%% *}\"\n      LTS_VERSION=\"${LTS_ALIAS_LINE#* }\"\n      nvm_make_alias \"${LTS_ALIAS}\" \"${LTS_VERSION}\" >/dev/null 2>&1\n    done; } << EOF\n$VERSION_LIST\nEOF\n\n  if [ -n \"${LTS-}\" ]; then\n    if ! LTS=\"$(nvm_normalize_lts \"lts/${LTS}\")\"; then\n      return $?\n    fi\n    LTS=\"${LTS#lts/}\"\n  fi\n\n  VERSIONS=\"$({ command awk -v lts=\"${LTS-}\" '{\n        if (!$1) { next }\n        if (lts && $10 ~ /^\\-?$/) { next }\n        if (lts && lts != \"*\" && tolower($10) !~ tolower(lts)) { next }\n        if ($10 !~ /^\\-?$/) {\n          if ($10 && $10 != prev) {\n            print $1, $10, \"*\"\n          } else {\n            print $1, $10\n          }\n        } else {\n          print $1\n        }\n        prev=$10;\n      }' \\\n    | nvm_grep -w \"${PATTERN:-.*}\" \\\n    | $SORT_COMMAND; } << EOF\n$VERSION_LIST\nEOF\n)\"\n  if [ -z \"${VERSIONS}\" ]; then\n    nvm_echo 'N/A'\n    return 3\n  fi\n  nvm_echo \"${VERSIONS}\"\n}\n\nnvm_get_checksum_binary() {\n  if nvm_has_non_aliased 'sha256sum'; then\n    nvm_echo 'sha256sum'\n  elif nvm_has_non_aliased 'shasum'; then\n    nvm_echo 'shasum'\n  elif nvm_has_non_aliased 'sha256'; then\n    nvm_echo 'sha256'\n  elif nvm_has_non_aliased 'gsha256sum'; then\n    nvm_echo 'gsha256sum'\n  elif nvm_has_non_aliased 'openssl'; then\n    nvm_echo 'openssl'\n  elif nvm_has_non_aliased 'bssl'; then\n    nvm_echo 'bssl'\n  elif nvm_has_non_aliased 'sha1sum'; then\n    nvm_echo 'sha1sum'\n  elif nvm_has_non_aliased 'sha1'; then\n    nvm_echo 'sha1'\n  else\n    nvm_err 'Unaliased sha256sum, shasum, sha256, gsha256sum, openssl, or bssl not found.'\n    nvm_err 'Unaliased sha1sum or sha1 not found.'\n    return 1\n  fi\n}\n\nnvm_get_checksum_alg() {\n  local NVM_CHECKSUM_BIN\n  NVM_CHECKSUM_BIN=\"$(nvm_get_checksum_binary 2>/dev/null)\"\n  case \"${NVM_CHECKSUM_BIN-}\" in\n    sha256sum | shasum | sha256 | gsha256sum | openssl | bssl)\n      nvm_echo 'sha-256'\n    ;;\n    sha1sum | sha1)\n      nvm_echo 'sha-1'\n    ;;\n    *)\n      nvm_get_checksum_binary\n      return $?\n    ;;\n  esac\n}\n\nnvm_compute_checksum() {\n  local FILE\n  FILE=\"${1-}\"\n  if [ -z \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum is empty.'\n    return 2\n  elif ! [ -f \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum does not exist.'\n    return 1\n  fi\n\n  if nvm_has_non_aliased \"sha256sum\"; then\n    nvm_err 'Computing checksum with sha256sum'\n    command sha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"shasum\"; then\n    nvm_err 'Computing checksum with shasum -a 256'\n    command shasum -a 256 \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha256\"; then\n    nvm_err 'Computing checksum with sha256 -q'\n    command sha256 -q \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"gsha256sum\"; then\n    nvm_err 'Computing checksum with gsha256sum'\n    command gsha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"openssl\"; then\n    nvm_err 'Computing checksum with openssl dgst -sha256'\n    command openssl dgst -sha256 \"${FILE}\" | command awk '{print $NF}'\n  elif nvm_has_non_aliased \"bssl\"; then\n    nvm_err 'Computing checksum with bssl sha256sum'\n    command bssl sha256sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha1sum\"; then\n    nvm_err 'Computing checksum with sha1sum'\n    command sha1sum \"${FILE}\" | command awk '{print $1}'\n  elif nvm_has_non_aliased \"sha1\"; then\n    nvm_err 'Computing checksum with sha1 -q'\n    command sha1 -q \"${FILE}\"\n  fi\n}\n\nnvm_compare_checksum() {\n  local FILE\n  FILE=\"${1-}\"\n  if [ -z \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum is empty.'\n    return 4\n  elif ! [ -f \"${FILE}\" ]; then\n    nvm_err 'Provided file to checksum does not exist.'\n    return 3\n  fi\n\n  local COMPUTED_SUM\n  COMPUTED_SUM=\"$(nvm_compute_checksum \"${FILE}\")\"\n\n  local CHECKSUM\n  CHECKSUM=\"${2-}\"\n  if [ -z \"${CHECKSUM}\" ]; then\n    nvm_err 'Provided checksum to compare to is empty.'\n    return 2\n  fi\n\n  if [ -z \"${COMPUTED_SUM}\" ]; then\n    nvm_err \"Computed checksum of '${FILE}' is empty.\" # missing in raspberry pi binary\n    nvm_err 'WARNING: Continuing *without checksum verification*'\n    return\n  elif [ \"${COMPUTED_SUM}\" != \"${CHECKSUM}\" ] && [ \"${COMPUTED_SUM}\" != \"\\\\${CHECKSUM}\" ]; then\n    nvm_err \"Checksums do not match: '${COMPUTED_SUM}' found, '${CHECKSUM}' expected.\"\n    return 1\n  fi\n  nvm_err 'Checksums matched!'\n}\n\n# args: flavor, type, version, slug, compression\nnvm_get_checksum() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 2\n    ;;\n  esac\n\n  local MIRROR\n  MIRROR=\"$(nvm_get_mirror \"${FLAVOR}\" \"${2-}\")\"\n  if [ -z \"${MIRROR}\" ]; then\n    return 1\n  fi\n\n  local SHASUMS_URL\n  if [ \"$(nvm_get_checksum_alg)\" = 'sha-256' ]; then\n    SHASUMS_URL=\"${MIRROR}/${3}/SHASUMS256.txt\"\n  else\n    SHASUMS_URL=\"${MIRROR}/${3}/SHASUMS.txt\"\n  fi\n\n  nvm_download -L -s \"${SHASUMS_URL}\" -o - | command awk \"{ if (\\\"${4}.${5}\\\" == \\$2) print \\$1}\"\n}\n\nnvm_print_versions() {\n  local NVM_CURRENT\n  NVM_CURRENT=$(nvm_ls_current)\n\n  local INSTALLED_COLOR\n  local SYSTEM_COLOR\n  local CURRENT_COLOR\n  local NOT_INSTALLED_COLOR\n  local DEFAULT_COLOR\n  local LTS_COLOR\n  local NVM_HAS_COLORS\n  NVM_HAS_COLORS=0\n\n  INSTALLED_COLOR=$(nvm_get_colors 1)\n  SYSTEM_COLOR=$(nvm_get_colors 2)\n  CURRENT_COLOR=$(nvm_get_colors 3)\n  NOT_INSTALLED_COLOR=$(nvm_get_colors 4)\n  DEFAULT_COLOR=$(nvm_get_colors 5)\n  LTS_COLOR=$(nvm_get_colors 6)\n\n  if nvm_has_colors; then\n    NVM_HAS_COLORS=1\n  fi\n\n  command awk \\\n    -v remote_versions=\"$(printf '%s' \"${1-}\" | tr '\\n' '|')\" \\\n    -v installed_versions=\"$(nvm_ls | tr '\\n' '|')\" -v current=\"$NVM_CURRENT\" \\\n    -v installed_color=\"$INSTALLED_COLOR\" -v system_color=\"$SYSTEM_COLOR\" \\\n    -v current_color=\"$CURRENT_COLOR\" -v default_color=\"$DEFAULT_COLOR\" \\\n    -v old_lts_color=\"$DEFAULT_COLOR\" -v has_colors=\"$NVM_HAS_COLORS\" '\nfunction alen(arr, i, len) { len=0; for(i in arr) len++; return len; }\nBEGIN {\n  fmt_installed = has_colors ? (installed_color ? \"\\033[\" installed_color \"%15s\\033[0m\" : \"%15s\") : \"%15s *\";\n  fmt_system = has_colors ? (system_color ? \"\\033[\" system_color \"%15s\\033[0m\" : \"%15s\") : \"%15s *\";\n  fmt_current = has_colors ? (current_color ? \"\\033[\" current_color \"->%13s\\033[0m\" : \"%15s\") : \"->%13s *\";\n\n  latest_lts_color = current_color;\n  sub(/0;/, \"1;\", latest_lts_color);\n\n  fmt_latest_lts = has_colors && latest_lts_color ? (\"\\033[\" latest_lts_color \" (Latest LTS: %s)\\033[0m\") : \" (Latest LTS: %s)\";\n  fmt_old_lts = has_colors && old_lts_color ? (\"\\033[\" old_lts_color \" (LTS: %s)\\033[0m\") : \" (LTS: %s)\";\n\n  split(remote_versions, lines, \"|\");\n  split(installed_versions, installed, \"|\");\n  rows = alen(lines);\n\n  for (n = 1; n <= rows; n++) {\n    split(lines[n], fields, \"[[:blank:]]+\");\n    cols = alen(fields);\n    version = fields[1];\n    is_installed = 0;\n\n    for (i in installed) {\n      if (version == installed[i]) {\n        is_installed = 1;\n        break;\n      }\n    }\n\n    fmt_version = \"%15s\";\n    if (version == current) {\n      fmt_version = fmt_current;\n    } else if (version == \"system\") {\n      fmt_version = fmt_system;\n    } else if (is_installed) {\n      fmt_version = fmt_installed;\n    }\n\n    padding = (!has_colors && is_installed) ? \"\" : \"  \";\n\n    if (cols == 1) {\n      formatted = sprintf(fmt_version, version);\n    } else if (cols == 2) {\n      formatted = sprintf((fmt_version padding fmt_old_lts), version, fields[2]);\n    } else if (cols == 3 && fields[3] == \"*\") {\n      formatted = sprintf((fmt_version padding fmt_latest_lts), version, fields[2]);\n    }\n\n    output[n] = formatted;\n  }\n\n  for (n = 1; n <= rows; n++) {\n    print output[n]\n  }\n\n  exit\n}'\n}\n\nnvm_validate_implicit_alias() {\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  local NVM_NODE_PREFIX\n  NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n\n  case \"$1\" in\n    \"stable\" | \"unstable\" | \"${NVM_IOJS_PREFIX}\" | \"${NVM_NODE_PREFIX}\")\n      return\n    ;;\n    *)\n      nvm_err \"Only implicit aliases 'stable', 'unstable', '${NVM_IOJS_PREFIX}', and '${NVM_NODE_PREFIX}' are supported.\"\n      return 1\n    ;;\n  esac\n}\n\nnvm_print_implicit_alias() {\n  if [ \"_$1\" != \"_local\" ] && [ \"_$1\" != \"_remote\" ]; then\n    nvm_err \"nvm_print_implicit_alias must be specified with local or remote as the first argument.\"\n    return 1\n  fi\n\n  local NVM_IMPLICIT\n  NVM_IMPLICIT=\"$2\"\n  if ! nvm_validate_implicit_alias \"${NVM_IMPLICIT}\"; then\n    return 2\n  fi\n\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  local NVM_NODE_PREFIX\n  NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n  local NVM_COMMAND\n  local NVM_ADD_PREFIX_COMMAND\n  local LAST_TWO\n  case \"${NVM_IMPLICIT}\" in\n    \"${NVM_IOJS_PREFIX}\")\n      NVM_COMMAND=\"nvm_ls_remote_iojs\"\n      NVM_ADD_PREFIX_COMMAND=\"nvm_add_iojs_prefix\"\n      if [ \"_$1\" = \"_local\" ]; then\n        NVM_COMMAND=\"nvm_ls ${NVM_IMPLICIT}\"\n      fi\n\n      nvm_is_zsh && setopt local_options shwordsplit\n\n      local NVM_IOJS_VERSION\n      local EXIT_CODE\n      NVM_IOJS_VERSION=\"$(${NVM_COMMAND})\" &&:\n      EXIT_CODE=\"$?\"\n      if [ \"_${EXIT_CODE}\" = \"_0\" ]; then\n        NVM_IOJS_VERSION=\"$(nvm_echo \"${NVM_IOJS_VERSION}\" | command sed \"s/^${NVM_IMPLICIT}-//\" | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2 | uniq | command tail -1)\"\n      fi\n\n      if [ \"_$NVM_IOJS_VERSION\" = \"_N/A\" ]; then\n        nvm_echo 'N/A'\n      else\n        ${NVM_ADD_PREFIX_COMMAND} \"${NVM_IOJS_VERSION}\"\n      fi\n      return $EXIT_CODE\n    ;;\n    \"${NVM_NODE_PREFIX}\")\n      nvm_echo 'stable'\n      return\n    ;;\n    *)\n      NVM_COMMAND=\"nvm_ls_remote\"\n      if [ \"_$1\" = \"_local\" ]; then\n        NVM_COMMAND=\"nvm_ls node\"\n      fi\n\n      nvm_is_zsh && setopt local_options shwordsplit\n\n      LAST_TWO=$($NVM_COMMAND | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2 | uniq)\n    ;;\n  esac\n  local MINOR\n  local STABLE\n  local UNSTABLE\n  local MOD\n  local NORMALIZED_VERSION\n\n  nvm_is_zsh && setopt local_options shwordsplit\n  for MINOR in $LAST_TWO; do\n    NORMALIZED_VERSION=\"$(nvm_normalize_version \"$MINOR\")\"\n    if [ \"_0${NORMALIZED_VERSION#?}\" != \"_$NORMALIZED_VERSION\" ]; then\n      STABLE=\"$MINOR\"\n    else\n      MOD=\"$(awk 'BEGIN { print int(ARGV[1] / 1000000) % 2 ; exit(0) }' \"${NORMALIZED_VERSION}\")\"\n      if [ \"${MOD}\" -eq 0 ]; then\n        STABLE=\"${MINOR}\"\n      elif [ \"${MOD}\" -eq 1 ]; then\n        UNSTABLE=\"${MINOR}\"\n      fi\n    fi\n  done\n\n  if [ \"_$2\" = '_stable' ]; then\n    nvm_echo \"${STABLE}\"\n  elif [ \"_$2\" = '_unstable' ]; then\n    nvm_echo \"${UNSTABLE:-\"N/A\"}\"\n  fi\n}\n\nnvm_get_os() {\n  local NVM_UNAME\n  NVM_UNAME=\"$(command uname -a)\"\n  local NVM_OS\n  case \"${NVM_UNAME}\" in\n    Linux\\ *) NVM_OS=linux ;;\n    Darwin\\ *) NVM_OS=darwin ;;\n    SunOS\\ *) NVM_OS=sunos ;;\n    FreeBSD\\ *) NVM_OS=freebsd ;;\n    OpenBSD\\ *) NVM_OS=openbsd ;;\n    AIX\\ *) NVM_OS=aix ;;\n    CYGWIN* | MSYS* | MINGW*) NVM_OS=win ;;\n  esac\n  nvm_echo \"${NVM_OS-}\"\n}\n\nnvm_get_arch() {\n  local HOST_ARCH\n  local NVM_OS\n  local EXIT_CODE\n  local LONG_BIT\n\n  NVM_OS=\"$(nvm_get_os)\"\n  # If the OS is SunOS, first try to use pkgsrc to guess\n  # the most appropriate arch. If it's not available, use\n  # isainfo to get the instruction set supported by the\n  # kernel.\n  if [ \"_${NVM_OS}\" = \"_sunos\" ]; then\n    if HOST_ARCH=$(pkg_info -Q MACHINE_ARCH pkg_install); then\n      HOST_ARCH=$(nvm_echo \"${HOST_ARCH}\" | command tail -1)\n    else\n      HOST_ARCH=$(isainfo -n)\n    fi\n  elif [ \"_${NVM_OS}\" = \"_aix\" ]; then\n    HOST_ARCH=ppc64\n  else\n    HOST_ARCH=\"$(command uname -m)\"\n    LONG_BIT=\"$(getconf LONG_BIT 2>/dev/null)\"\n  fi\n\n  local NVM_ARCH\n  case \"${HOST_ARCH}\" in\n    x86_64 | amd64) NVM_ARCH=\"x64\" ;;\n    i*86) NVM_ARCH=\"x86\" ;;\n    aarch64 | armv8l) NVM_ARCH=\"arm64\" ;;\n    *) NVM_ARCH=\"${HOST_ARCH}\" ;;\n  esac\n\n  # If running inside a 32Bit docker container the kernel still is 64bit\n  # change ARCH to 32bit if LONG_BIT is 32\n  if [ \"_${LONG_BIT}\" = \"_32\" ] && [ \"${NVM_ARCH}\" = \"x64\" ]; then\n    NVM_ARCH=\"x86\"\n  fi\n\n  # If running a 64bit ARM kernel but a 32bit ARM userland,\n  # change ARCH to 32bit ARM (armv7l) if /sbin/init is 32bit executable\n  if [ \"$(uname)\" = \"Linux\" ] \\\n    && [ \"${NVM_ARCH}\" = arm64 ] \\\n    && [ \"$(command od -An -t x1 -j 4 -N 1 \"/sbin/init\" 2>/dev/null)\" = ' 01' ]\\\n  ; then\n    NVM_ARCH=armv7l\n    HOST_ARCH=armv7l\n  fi\n\n  if [ -f \"/etc/alpine-release\" ]; then\n    NVM_ARCH=x64-musl\n  fi\n\n  nvm_echo \"${NVM_ARCH}\"\n}\n\nnvm_get_minor_version() {\n  local VERSION\n  VERSION=\"$1\"\n\n  if [ -z \"${VERSION}\" ]; then\n    nvm_err 'a version is required'\n    return 1\n  fi\n\n  case \"${VERSION}\" in\n    v | .* | *..* | v*[!.0123456789]* | [!v]*[!.0123456789]* | [!v0123456789]* | v[!0123456789]*)\n      nvm_err 'invalid version number'\n      return 2\n    ;;\n  esac\n\n  local PREFIXED_VERSION\n  PREFIXED_VERSION=\"$(nvm_format_version \"${VERSION}\")\"\n\n  local MINOR\n  MINOR=\"$(nvm_echo \"${PREFIXED_VERSION}\" | nvm_grep -e '^v' | command cut -c2- | command cut -d . -f 1,2)\"\n  if [ -z \"${MINOR}\" ]; then\n    nvm_err 'invalid version number! (please report this)'\n    return 3\n  fi\n  nvm_echo \"${MINOR}\"\n}\n\nnvm_ensure_default_set() {\n  local VERSION\n  VERSION=\"$1\"\n  if [ -z \"${VERSION}\" ]; then\n    nvm_err 'nvm_ensure_default_set: a version is required'\n    return 1\n  elif nvm_alias default >/dev/null 2>&1; then\n    # default already set\n    return 0\n  fi\n  local OUTPUT\n  OUTPUT=\"$(nvm alias default \"${VERSION}\")\"\n  local EXIT_CODE\n  EXIT_CODE=\"$?\"\n  nvm_echo \"Creating default alias: ${OUTPUT}\"\n  return $EXIT_CODE\n}\n\nnvm_is_merged_node_version() {\n  nvm_version_greater_than_or_equal_to \"$1\" v4.0.0\n}\n\nnvm_get_mirror() {\n  local NVM_MIRROR\n  NVM_MIRROR=''\n  case \"${1}-${2}\" in\n    node-std) NVM_MIRROR=\"${NVM_NODEJS_ORG_MIRROR:-https://nodejs.org/dist}\" ;;\n    iojs-std) NVM_MIRROR=\"${NVM_IOJS_ORG_MIRROR:-https://iojs.org/dist}\" ;;\n    *)\n      nvm_err 'unknown type of node.js or io.js release'\n      return 1\n    ;;\n  esac\n\n  case \"${NVM_MIRROR}\" in\n    *\\`* | *\\\\* | *\\'* | *\\(* | *' '* )\n      nvm_err '$NVM_NODEJS_ORG_MIRROR and $NVM_IOJS_ORG_MIRROR may only contain a URL'\n      return 2\n    ;;\n  esac\n\n\n  if ! nvm_echo \"${NVM_MIRROR}\" | command awk '{ $0 ~ \"^https?://[a-zA-Z0-9./_-]+$\" }'; then\n      nvm_err '$NVM_NODEJS_ORG_MIRROR and $NVM_IOJS_ORG_MIRROR may only contain a URL'\n      return 2\n  fi\n\n  nvm_echo \"${NVM_MIRROR}\"\n}\n\n# args: os, prefixed version, version, tarball, extract directory\nnvm_install_binary_extract() {\n  if [ \"$#\" -ne 5 ]; then\n    nvm_err 'nvm_install_binary_extract needs 5 parameters'\n    return 1\n  fi\n\n  local NVM_OS\n  local PREFIXED_VERSION\n  local VERSION\n  local TARBALL\n  local TMPDIR\n  NVM_OS=\"${1}\"\n  PREFIXED_VERSION=\"${2}\"\n  VERSION=\"${3}\"\n  TARBALL=\"${4}\"\n  TMPDIR=\"${5}\"\n\n  local VERSION_PATH\n\n  [ -n \"${TMPDIR-}\" ] && \\\n  command mkdir -p \"${TMPDIR}\" && \\\n  VERSION_PATH=\"$(nvm_version_path \"${PREFIXED_VERSION}\")\" || return 1\n\n  # For Windows system (GitBash with MSYS, Cygwin)\n  if [ \"${NVM_OS}\" = 'win' ]; then\n    VERSION_PATH=\"${VERSION_PATH}/bin\"\n    command unzip -q \"${TARBALL}\" -d \"${TMPDIR}\" || return 1\n  # For non Windows system (including WSL running on Windows)\n  else\n    nvm_extract_tarball \"${NVM_OS}\" \"${VERSION}\" \"${TARBALL}\" \"${TMPDIR}\"\n  fi\n\n  command mkdir -p \"${VERSION_PATH}\" || return 1\n\n  if [ \"${NVM_OS}\" = 'win' ]; then\n    command mv \"${TMPDIR}/\"*/* \"${VERSION_PATH}/\" || return 1\n    command chmod +x \"${VERSION_PATH}\"/node.exe || return 1\n    command chmod +x \"${VERSION_PATH}\"/npm || return 1\n    command chmod +x \"${VERSION_PATH}\"/npx 2>/dev/null\n  else\n    command mv \"${TMPDIR}/\"* \"${VERSION_PATH}\" || return 1\n  fi\n\n  command rm -rf \"${TMPDIR}\"\n\n  return 0\n}\n\n# args: flavor, type, version, reinstall\nnvm_install_binary() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 4\n    ;;\n  esac\n\n  local TYPE\n  TYPE=\"${2-}\"\n\n  local PREFIXED_VERSION\n  PREFIXED_VERSION=\"${3-}\"\n  if [ -z \"${PREFIXED_VERSION}\" ]; then\n    nvm_err 'A version number is required.'\n    return 3\n  fi\n\n  local nosource\n  nosource=\"${4-}\"\n\n  local VERSION\n  VERSION=\"$(nvm_strip_iojs_prefix \"${PREFIXED_VERSION}\")\"\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n\n  if [ -z \"${NVM_OS}\" ]; then\n    return 2\n  fi\n\n  local TARBALL\n  local TMPDIR\n\n  local PROGRESS_BAR\n  local NODE_OR_IOJS\n  if [ \"${FLAVOR}\" = 'node' ]; then\n    NODE_OR_IOJS=\"${FLAVOR}\"\n  elif [ \"${FLAVOR}\" = 'iojs' ]; then\n    NODE_OR_IOJS=\"io.js\"\n  fi\n  if [ \"${NVM_NO_PROGRESS-}\" = \"1\" ]; then\n    # --silent, --show-error, use short option as @samrocketman mentions the compatibility issue.\n    PROGRESS_BAR=\"-sS\"\n  else\n    PROGRESS_BAR=\"--progress-bar\"\n  fi\n  nvm_echo \"Downloading and installing ${NODE_OR_IOJS-} ${VERSION}...\"\n  TARBALL=\"$(PROGRESS_BAR=\"${PROGRESS_BAR}\" nvm_download_artifact \"${FLAVOR}\" binary \"${TYPE-}\" \"${VERSION}\" | command tail -1)\"\n  if [ -f \"${TARBALL}\" ]; then\n    TMPDIR=\"$(dirname \"${TARBALL}\")/files\"\n  fi\n\n  if nvm_install_binary_extract \"${NVM_OS}\" \"${PREFIXED_VERSION}\" \"${VERSION}\" \"${TARBALL}\" \"${TMPDIR}\"; then\n    if [ -n \"${ALIAS-}\" ]; then\n      nvm alias \"${ALIAS}\" \"${provided_version}\"\n    fi\n    return 0\n  fi\n\n\n  # Read nosource from arguments\n  if [ \"${nosource-}\" = '1' ]; then\n    nvm_err 'Binary download failed. Download from source aborted.'\n    return 0\n  fi\n\n  nvm_err 'Binary download failed, trying source.'\n  if [ -n \"${TMPDIR-}\" ]; then\n    command rm -rf \"${TMPDIR}\"\n  fi\n  return 1\n}\n\n# args: flavor, kind, version\nnvm_get_download_slug() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 1\n    ;;\n  esac\n\n  local KIND\n  case \"${2-}\" in\n    binary | source) KIND=\"${2}\" ;;\n    *)\n      nvm_err 'supported kinds: binary, source'\n      return 2\n    ;;\n  esac\n\n  local VERSION\n  VERSION=\"${3-}\"\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n\n  local NVM_ARCH\n  NVM_ARCH=\"$(nvm_get_arch)\"\n  if ! nvm_is_merged_node_version \"${VERSION}\"; then\n    if [ \"${NVM_ARCH}\" = 'armv6l' ] || [ \"${NVM_ARCH}\" = 'armv7l' ]; then\n      NVM_ARCH=\"arm-pi\"\n    fi\n  fi\n\n  # If running MAC M1 :: Node v14.17.0 was the first version to offer official experimental support:\n  # https://github.com/nodejs/node/issues/40126 (although binary distributions aren't available until v16)\n  if \\\n    nvm_version_greater '14.17.0' \"${VERSION}\" \\\n    || (nvm_version_greater_than_or_equal_to \"${VERSION}\" '15.0.0' && nvm_version_greater '16.0.0' \"${VERSION}\") \\\n  ; then\n    if [ \"_${NVM_OS}\" = '_darwin' ] && [ \"${NVM_ARCH}\" = 'arm64' ]; then\n      NVM_ARCH=x64\n    fi\n  fi\n\n  if [ \"${KIND}\" = 'binary' ]; then\n    nvm_echo \"${FLAVOR}-${VERSION}-${NVM_OS}-${NVM_ARCH}\"\n  elif [ \"${KIND}\" = 'source' ]; then\n    nvm_echo \"${FLAVOR}-${VERSION}\"\n  fi\n}\n\nnvm_get_artifact_compression() {\n  local VERSION\n  VERSION=\"${1-}\"\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n\n  local COMPRESSION\n  COMPRESSION='tar.gz'\n  if [ \"_${NVM_OS}\" = '_win' ]; then\n    COMPRESSION='zip'\n  elif nvm_supports_xz \"${VERSION}\"; then\n    COMPRESSION='tar.xz'\n  fi\n\n  nvm_echo \"${COMPRESSION}\"\n}\n\n# args: flavor, kind, type, version\nnvm_download_artifact() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 1\n    ;;\n  esac\n\n  local KIND\n  case \"${2-}\" in\n    binary | source) KIND=\"${2}\" ;;\n    *)\n      nvm_err 'supported kinds: binary, source'\n      return 1\n    ;;\n  esac\n\n  local TYPE\n  TYPE=\"${3-}\"\n\n  local MIRROR\n  MIRROR=\"$(nvm_get_mirror \"${FLAVOR}\" \"${TYPE}\")\"\n  if [ -z \"${MIRROR}\" ]; then\n    return 2\n  fi\n\n  local VERSION\n  VERSION=\"${4}\"\n\n  if [ -z \"${VERSION}\" ]; then\n    nvm_err 'A version number is required.'\n    return 3\n  fi\n\n  if [ \"${KIND}\" = 'binary' ] && ! nvm_binary_available \"${VERSION}\"; then\n    nvm_err \"No precompiled binary available for ${VERSION}.\"\n    return\n  fi\n\n  local SLUG\n  SLUG=\"$(nvm_get_download_slug \"${FLAVOR}\" \"${KIND}\" \"${VERSION}\")\"\n\n  local COMPRESSION\n  COMPRESSION=\"$(nvm_get_artifact_compression \"${VERSION}\")\"\n\n  local CHECKSUM\n  CHECKSUM=\"$(nvm_get_checksum \"${FLAVOR}\" \"${TYPE}\" \"${VERSION}\" \"${SLUG}\" \"${COMPRESSION}\")\"\n\n  local tmpdir\n  if [ \"${KIND}\" = 'binary' ]; then\n    tmpdir=\"$(nvm_cache_dir)/bin/${SLUG}\"\n  else\n    tmpdir=\"$(nvm_cache_dir)/src/${SLUG}\"\n  fi\n  command mkdir -p \"${tmpdir}/files\" || (\n    nvm_err \"creating directory ${tmpdir}/files failed\"\n    return 3\n  )\n\n  local TARBALL\n  TARBALL=\"${tmpdir}/${SLUG}.${COMPRESSION}\"\n  local TARBALL_URL\n  if nvm_version_greater_than_or_equal_to \"${VERSION}\" 0.1.14; then\n    TARBALL_URL=\"${MIRROR}/${VERSION}/${SLUG}.${COMPRESSION}\"\n  else\n    # node <= 0.1.13 does not have a directory\n    TARBALL_URL=\"${MIRROR}/${SLUG}.${COMPRESSION}\"\n  fi\n\n  if [ -r \"${TARBALL}\" ]; then\n    nvm_err \"Local cache found: $(nvm_sanitize_path \"${TARBALL}\")\"\n    if nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\" >/dev/null 2>&1; then\n      nvm_err \"Checksums match! Using existing downloaded archive $(nvm_sanitize_path \"${TARBALL}\")\"\n      nvm_echo \"${TARBALL}\"\n      return 0\n    fi\n    nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\"\n    nvm_err \"Checksum check failed!\"\n    nvm_err \"Removing the broken local cache...\"\n    command rm -rf \"${TARBALL}\"\n  fi\n  nvm_err \"Downloading ${TARBALL_URL}...\"\n  nvm_download -L -C - \"${PROGRESS_BAR}\" \"${TARBALL_URL}\" -o \"${TARBALL}\" || (\n    command rm -rf \"${TARBALL}\" \"${tmpdir}\"\n    nvm_err \"download from ${TARBALL_URL} failed\"\n    return 4\n  )\n\n  if nvm_grep '404 Not Found' \"${TARBALL}\" >/dev/null; then\n    command rm -rf \"${TARBALL}\" \"${tmpdir}\"\n    nvm_err \"HTTP 404 at URL ${TARBALL_URL}\"\n    return 5\n  fi\n\n  nvm_compare_checksum \"${TARBALL}\" \"${CHECKSUM}\" || (\n    command rm -rf \"${tmpdir}/files\"\n    return 6\n  )\n\n  nvm_echo \"${TARBALL}\"\n}\n\n# args: nvm_os, version, tarball, tmpdir\nnvm_extract_tarball() {\n  if [ \"$#\" -ne 4 ]; then\n    nvm_err 'nvm_extract_tarball requires exactly 4 arguments'\n    return 5\n  fi\n\n  local NVM_OS\n  NVM_OS=\"${1-}\"\n\n  local VERSION\n  VERSION=\"${2-}\"\n\n  local TARBALL\n  TARBALL=\"${3-}\"\n\n  local TMPDIR\n  TMPDIR=\"${4-}\"\n\n  local tar_compression_flag\n  tar_compression_flag='z'\n  if nvm_supports_xz \"${VERSION}\"; then\n    tar_compression_flag='J'\n  fi\n\n  local tar\n  tar='tar'\n  if [ \"${NVM_OS}\" = 'aix' ]; then\n    tar='gtar'\n  fi\n\n  if [ \"${NVM_OS}\" = 'openbsd' ]; then\n    if [ \"${tar_compression_flag}\" = 'J' ]; then\n      command xzcat \"${TARBALL}\" | \"${tar}\" -xf - -C \"${TMPDIR}\" -s '/[^\\/]*\\///' || return 1\n    else\n      command \"${tar}\" -x${tar_compression_flag}f \"${TARBALL}\" -C \"${TMPDIR}\" -s '/[^\\/]*\\///' || return 1\n    fi\n  else\n    command \"${tar}\" -x${tar_compression_flag}f \"${TARBALL}\" -C \"${TMPDIR}\" --strip-components 1 || return 1\n  fi\n}\n\nnvm_get_make_jobs() {\n  if nvm_is_natural_num \"${1-}\"; then\n    NVM_MAKE_JOBS=\"$1\"\n    nvm_echo \"number of \\`make\\` jobs: ${NVM_MAKE_JOBS}\"\n    return\n  elif [ -n \"${1-}\" ]; then\n    unset NVM_MAKE_JOBS\n    nvm_err \"$1 is invalid for number of \\`make\\` jobs, must be a natural number\"\n  fi\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n  local NVM_CPU_CORES\n  case \"_${NVM_OS}\" in\n    \"_linux\")\n      NVM_CPU_CORES=\"$(nvm_grep -c -E '^processor.+: [0-9]+' /proc/cpuinfo)\"\n    ;;\n    \"_freebsd\" | \"_darwin\" | \"_openbsd\")\n      NVM_CPU_CORES=\"$(sysctl -n hw.ncpu)\"\n    ;;\n    \"_sunos\")\n      NVM_CPU_CORES=\"$(psrinfo | wc -l)\"\n    ;;\n    \"_aix\")\n      NVM_CPU_CORES=\"$(pmcycles -m | wc -l)\"\n    ;;\n  esac\n  if ! nvm_is_natural_num \"${NVM_CPU_CORES}\"; then\n    nvm_err 'Can not determine how many core(s) are available, running in single-threaded mode.'\n    nvm_err 'Please report an issue on GitHub to help us make nvm run faster on your computer!'\n    NVM_MAKE_JOBS=1\n  else\n    nvm_echo \"Detected that you have ${NVM_CPU_CORES} CPU core(s)\"\n    if [ \"${NVM_CPU_CORES}\" -gt 2 ]; then\n      NVM_MAKE_JOBS=$((NVM_CPU_CORES - 1))\n      nvm_echo \"Running with ${NVM_MAKE_JOBS} threads to speed up the build\"\n    else\n      NVM_MAKE_JOBS=1\n      nvm_echo 'Number of CPU core(s) less than or equal to 2, running in single-threaded mode'\n    fi\n  fi\n}\n\n# args: flavor, type, version, make jobs, additional\nnvm_install_source() {\n  local FLAVOR\n  case \"${1-}\" in\n    node | iojs) FLAVOR=\"${1}\" ;;\n    *)\n      nvm_err 'supported flavors: node, iojs'\n      return 4\n    ;;\n  esac\n\n  local TYPE\n  TYPE=\"${2-}\"\n\n  local PREFIXED_VERSION\n  PREFIXED_VERSION=\"${3-}\"\n  if [ -z \"${PREFIXED_VERSION}\" ]; then\n    nvm_err 'A version number is required.'\n    return 3\n  fi\n\n  local VERSION\n  VERSION=\"$(nvm_strip_iojs_prefix \"${PREFIXED_VERSION}\")\"\n\n  local NVM_MAKE_JOBS\n  NVM_MAKE_JOBS=\"${4-}\"\n\n  local ADDITIONAL_PARAMETERS\n  ADDITIONAL_PARAMETERS=\"${5-}\"\n\n  local NVM_ARCH\n  NVM_ARCH=\"$(nvm_get_arch)\"\n  if [ \"${NVM_ARCH}\" = 'armv6l' ] || [ \"${NVM_ARCH}\" = 'armv7l' ]; then\n    if [ -n \"${ADDITIONAL_PARAMETERS}\" ]; then\n      ADDITIONAL_PARAMETERS=\"--without-snapshot ${ADDITIONAL_PARAMETERS}\"\n    else\n      ADDITIONAL_PARAMETERS='--without-snapshot'\n    fi\n  fi\n\n  if [ -n \"${ADDITIONAL_PARAMETERS}\" ]; then\n    nvm_echo \"Additional options while compiling: ${ADDITIONAL_PARAMETERS}\"\n  fi\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n\n  local make\n  make='make'\n  local MAKE_CXX\n  case \"${NVM_OS}\" in\n    'freebsd' | 'openbsd')\n      make='gmake'\n      MAKE_CXX=\"CC=${CC:-cc} CXX=${CXX:-c++}\"\n    ;;\n    'darwin')\n      MAKE_CXX=\"CC=${CC:-cc} CXX=${CXX:-c++}\"\n    ;;\n    'aix')\n      make='gmake'\n    ;;\n  esac\n  if nvm_has \"clang++\" && nvm_has \"clang\" && nvm_version_greater_than_or_equal_to \"$(nvm_clang_version)\" 3.5; then\n    if [ -z \"${CC-}\" ] || [ -z \"${CXX-}\" ]; then\n      nvm_echo \"Clang v3.5+ detected! CC or CXX not specified, will use Clang as C/C++ compiler!\"\n      MAKE_CXX=\"CC=${CC:-cc} CXX=${CXX:-c++}\"\n    fi\n  fi\n\n  local TARBALL\n  local TMPDIR\n  local VERSION_PATH\n\n  if [ \"${NVM_NO_PROGRESS-}\" = \"1\" ]; then\n    # --silent, --show-error, use short option as @samrocketman mentions the compatibility issue.\n    PROGRESS_BAR=\"-sS\"\n  else\n    PROGRESS_BAR=\"--progress-bar\"\n  fi\n\n  nvm_is_zsh && setopt local_options shwordsplit\n\n  TARBALL=\"$(PROGRESS_BAR=\"${PROGRESS_BAR}\" nvm_download_artifact \"${FLAVOR}\" source \"${TYPE}\" \"${VERSION}\" | command tail -1)\" && \\\n  [ -f \"${TARBALL}\" ] && \\\n  TMPDIR=\"$(dirname \"${TARBALL}\")/files\" && \\\n  if ! (\n    # shellcheck disable=SC2086\n    command mkdir -p \"${TMPDIR}\" && \\\n    nvm_extract_tarball \"${NVM_OS}\" \"${VERSION}\" \"${TARBALL}\" \"${TMPDIR}\" && \\\n    VERSION_PATH=\"$(nvm_version_path \"${PREFIXED_VERSION}\")\" && \\\n    nvm_cd \"${TMPDIR}\" && \\\n    nvm_echo '$>'./configure --prefix=\"${VERSION_PATH}\" $ADDITIONAL_PARAMETERS'<' && \\\n    ./configure --prefix=\"${VERSION_PATH}\" $ADDITIONAL_PARAMETERS && \\\n    $make -j \"${NVM_MAKE_JOBS}\" ${MAKE_CXX-} && \\\n    command rm -f \"${VERSION_PATH}\" 2>/dev/null && \\\n    $make -j \"${NVM_MAKE_JOBS}\" ${MAKE_CXX-} install\n  ); then\n    nvm_err \"nvm: install ${VERSION} failed!\"\n    command rm -rf \"${TMPDIR-}\"\n    return 1\n  fi\n}\n\nnvm_use_if_needed() {\n  if [ \"_${1-}\" = \"_$(nvm_ls_current)\" ]; then\n    return\n  fi\n  nvm use \"$@\"\n}\n\nnvm_install_npm_if_needed() {\n  local VERSION\n  VERSION=\"$(nvm_ls_current)\"\n  if ! nvm_has \"npm\"; then\n    nvm_echo 'Installing npm...'\n    if nvm_version_greater 0.2.0 \"${VERSION}\"; then\n      nvm_err 'npm requires node v0.2.3 or higher'\n    elif nvm_version_greater_than_or_equal_to \"${VERSION}\" 0.2.0; then\n      if nvm_version_greater 0.2.3 \"${VERSION}\"; then\n        nvm_err 'npm requires node v0.2.3 or higher'\n      else\n        nvm_download -L https://npmjs.org/install.sh -o - | clean=yes npm_install=0.2.19 sh\n      fi\n    else\n      nvm_download -L https://npmjs.org/install.sh -o - | clean=yes sh\n    fi\n  fi\n  return $?\n}\n\nnvm_match_version() {\n  local NVM_IOJS_PREFIX\n  NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n  local PROVIDED_VERSION\n  PROVIDED_VERSION=\"$1\"\n  case \"_${PROVIDED_VERSION}\" in\n    \"_${NVM_IOJS_PREFIX}\" | '_io.js')\n      nvm_version \"${NVM_IOJS_PREFIX}\"\n    ;;\n    '_system')\n      nvm_echo 'system'\n    ;;\n    *)\n      nvm_version \"${PROVIDED_VERSION}\"\n    ;;\n  esac\n}\n\nnvm_npm_global_modules() {\n  local NPMLIST\n  local VERSION\n  VERSION=\"$1\"\n  NPMLIST=$(nvm use \"${VERSION}\" >/dev/null && npm list -g --depth=0 2>/dev/null | command sed 1,1d | nvm_grep -v 'UNMET PEER DEPENDENCY')\n\n  local INSTALLS\n  INSTALLS=$(nvm_echo \"${NPMLIST}\" | command sed -e '/ -> / d' -e '/\\(empty\\)/ d' -e 's/^.* \\(.*@[^ ]*\\).*/\\1/' -e '/^npm@[^ ]*.*$/ d' | command xargs)\n\n  local LINKS\n  LINKS=\"$(nvm_echo \"${NPMLIST}\" | command sed -n 's/.* -> \\(.*\\)/\\1/ p')\"\n\n  nvm_echo \"${INSTALLS} //// ${LINKS}\"\n}\n\nnvm_npmrc_bad_news_bears() {\n  local NVM_NPMRC\n  NVM_NPMRC=\"${1-}\"\n  if [ -n \"${NVM_NPMRC}\" ] && [ -f \"${NVM_NPMRC}\" ] && nvm_grep -Ee '^(prefix|globalconfig) *=' <\"${NVM_NPMRC}\" >/dev/null; then\n    return 0\n  fi\n  return 1\n}\n\nnvm_die_on_prefix() {\n  local NVM_DELETE_PREFIX\n  NVM_DELETE_PREFIX=\"${1-}\"\n  case \"${NVM_DELETE_PREFIX}\" in\n    0 | 1) ;;\n    *)\n      nvm_err 'First argument \"delete the prefix\" must be zero or one'\n      return 1\n    ;;\n  esac\n  local NVM_COMMAND\n  NVM_COMMAND=\"${2-}\"\n  local NVM_VERSION_DIR\n  NVM_VERSION_DIR=\"${3-}\"\n  if [ -z \"${NVM_COMMAND}\" ] || [ -z \"${NVM_VERSION_DIR}\" ]; then\n    nvm_err 'Second argument \"nvm command\", and third argument \"nvm version dir\", must both be nonempty'\n    return 2\n  fi\n\n  # npm first looks at $PREFIX (case-sensitive)\n  # we do not bother to test the value here; if this env var is set, unset it to continue.\n  # however, `npm exec` in npm v7.2+ sets $PREFIX; if set, inherit it\n  if [ -n \"${PREFIX-}\" ] && [ \"$(nvm_version_path \"$(node -v)\")\" != \"${PREFIX}\" ]; then\n    nvm deactivate >/dev/null 2>&1\n    nvm_err \"nvm is not compatible with the \\\"PREFIX\\\" environment variable: currently set to \\\"${PREFIX}\\\"\"\n    nvm_err 'Run `unset PREFIX` to unset it.'\n    return 3\n  fi\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n\n  # npm normalizes NPM_CONFIG_-prefixed env vars\n  # https://github.com/npm/npmconf/blob/22827e4038d6eebaafeb5c13ed2b92cf97b8fb82/npmconf.js#L331-L348\n  # https://github.com/npm/npm/blob/5e426a78ca02d0044f8dd26e0c5f881217081cbd/lib/config/core.js#L343-L359\n  #\n  # here, we avoid trying to replicate \"which one wins\" or testing the value; if any are defined, it errors\n  # until none are left.\n  local NVM_NPM_CONFIG_x_PREFIX_ENV\n  NVM_NPM_CONFIG_x_PREFIX_ENV=\"$(command awk 'BEGIN { for (name in ENVIRON) if (toupper(name) == \"NPM_CONFIG_PREFIX\") { print name; break } }')\"\n  if [ -n \"${NVM_NPM_CONFIG_x_PREFIX_ENV-}\" ]; then\n    local NVM_CONFIG_VALUE\n    eval \"NVM_CONFIG_VALUE=\\\"\\$${NVM_NPM_CONFIG_x_PREFIX_ENV}\\\"\"\n    if [ -n \"${NVM_CONFIG_VALUE-}\" ] && [ \"_${NVM_OS}\" = \"_win\" ]; then\n      NVM_CONFIG_VALUE=\"$(cd \"$NVM_CONFIG_VALUE\" 2>/dev/null && pwd)\"\n    fi\n    if [ -n \"${NVM_CONFIG_VALUE-}\" ] && ! nvm_tree_contains_path \"${NVM_DIR}\" \"${NVM_CONFIG_VALUE}\"; then\n      nvm deactivate >/dev/null 2>&1\n      nvm_err \"nvm is not compatible with the \\\"${NVM_NPM_CONFIG_x_PREFIX_ENV}\\\" environment variable: currently set to \\\"${NVM_CONFIG_VALUE}\\\"\"\n      nvm_err \"Run \\`unset ${NVM_NPM_CONFIG_x_PREFIX_ENV}\\` to unset it.\"\n      return 4\n    fi\n  fi\n\n  # here, npm config checks npmrc files.\n  # the stack is: cli, env, project, user, global, builtin, defaults\n  # cli does not apply; env is covered above, defaults don't exist for prefix\n  # there are 4 npmrc locations to check: project, global, user, and builtin\n  # project: find the closest node_modules or package.json-containing dir, `.npmrc`\n  # global: default prefix + `/etc/npmrc`\n  # user: $HOME/.npmrc\n  # builtin: npm install location, `npmrc`\n  #\n  # if any of them have a `prefix`, fail.\n  # if any have `globalconfig`, fail also, just in case, to avoid spidering configs.\n\n  local NVM_NPM_BUILTIN_NPMRC\n  NVM_NPM_BUILTIN_NPMRC=\"${NVM_VERSION_DIR}/lib/node_modules/npm/npmrc\"\n  if nvm_npmrc_bad_news_bears \"${NVM_NPM_BUILTIN_NPMRC}\"; then\n    if [ \"_${NVM_DELETE_PREFIX}\" = \"_1\" ]; then\n      npm config --loglevel=warn delete prefix --userconfig=\"${NVM_NPM_BUILTIN_NPMRC}\"\n      npm config --loglevel=warn delete globalconfig --userconfig=\"${NVM_NPM_BUILTIN_NPMRC}\"\n    else\n      nvm_err \"Your builtin npmrc file ($(nvm_sanitize_path \"${NVM_NPM_BUILTIN_NPMRC}\"))\"\n      nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.'\n      nvm_err \"Run \\`${NVM_COMMAND}\\` to unset it.\"\n      return 10\n    fi\n  fi\n\n  local NVM_NPM_GLOBAL_NPMRC\n  NVM_NPM_GLOBAL_NPMRC=\"${NVM_VERSION_DIR}/etc/npmrc\"\n  if nvm_npmrc_bad_news_bears \"${NVM_NPM_GLOBAL_NPMRC}\"; then\n    if [ \"_${NVM_DELETE_PREFIX}\" = \"_1\" ]; then\n      npm config --global --loglevel=warn delete prefix\n      npm config --global --loglevel=warn delete globalconfig\n    else\n      nvm_err \"Your global npmrc file ($(nvm_sanitize_path \"${NVM_NPM_GLOBAL_NPMRC}\"))\"\n      nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.'\n      nvm_err \"Run \\`${NVM_COMMAND}\\` to unset it.\"\n      return 10\n    fi\n  fi\n\n  local NVM_NPM_USER_NPMRC\n  NVM_NPM_USER_NPMRC=\"${HOME}/.npmrc\"\n  if nvm_npmrc_bad_news_bears \"${NVM_NPM_USER_NPMRC}\"; then\n    if [ \"_${NVM_DELETE_PREFIX}\" = \"_1\" ]; then\n      npm config --loglevel=warn delete prefix --userconfig=\"${NVM_NPM_USER_NPMRC}\"\n      npm config --loglevel=warn delete globalconfig --userconfig=\"${NVM_NPM_USER_NPMRC}\"\n    else\n      nvm_err \"Your user’s .npmrc file ($(nvm_sanitize_path \"${NVM_NPM_USER_NPMRC}\"))\"\n      nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.'\n      nvm_err \"Run \\`${NVM_COMMAND}\\` to unset it.\"\n      return 10\n    fi\n  fi\n\n  local NVM_NPM_PROJECT_NPMRC\n  NVM_NPM_PROJECT_NPMRC=\"$(nvm_find_project_dir)/.npmrc\"\n  if nvm_npmrc_bad_news_bears \"${NVM_NPM_PROJECT_NPMRC}\"; then\n    if [ \"_${NVM_DELETE_PREFIX}\" = \"_1\" ]; then\n      npm config --loglevel=warn delete prefix\n      npm config --loglevel=warn delete globalconfig\n    else\n      nvm_err \"Your project npmrc file ($(nvm_sanitize_path \"${NVM_NPM_PROJECT_NPMRC}\"))\"\n      nvm_err 'has a `globalconfig` and/or a `prefix` setting, which are incompatible with nvm.'\n      nvm_err \"Run \\`${NVM_COMMAND}\\` to unset it.\"\n      return 10\n    fi\n  fi\n}\n\n# Succeeds if $IOJS_VERSION represents an io.js version that has a\n# Solaris binary, fails otherwise.\n# Currently, only io.js 3.3.1 has a Solaris binary available, and it's the\n# latest io.js version available. The expectation is that any potential io.js\n# version later than v3.3.1 will also have Solaris binaries.\nnvm_iojs_version_has_solaris_binary() {\n  local IOJS_VERSION\n  IOJS_VERSION=\"$1\"\n  local STRIPPED_IOJS_VERSION\n  STRIPPED_IOJS_VERSION=\"$(nvm_strip_iojs_prefix \"${IOJS_VERSION}\")\"\n  if [ \"_${STRIPPED_IOJS_VERSION}\" = \"${IOJS_VERSION}\" ]; then\n    return 1\n  fi\n\n  # io.js started shipping Solaris binaries with io.js v3.3.1\n  nvm_version_greater_than_or_equal_to \"${STRIPPED_IOJS_VERSION}\" v3.3.1\n}\n\n# Succeeds if $NODE_VERSION represents a node version that has a\n# Solaris binary, fails otherwise.\n# Currently, node versions starting from v0.8.6 have a Solaris binary\n# available.\nnvm_node_version_has_solaris_binary() {\n  local NODE_VERSION\n  NODE_VERSION=\"$1\"\n  # Error out if $NODE_VERSION is actually an io.js version\n  local STRIPPED_IOJS_VERSION\n  STRIPPED_IOJS_VERSION=\"$(nvm_strip_iojs_prefix \"${NODE_VERSION}\")\"\n  if [ \"_${STRIPPED_IOJS_VERSION}\" != \"_${NODE_VERSION}\" ]; then\n    return 1\n  fi\n\n  # node (unmerged) started shipping Solaris binaries with v0.8.6 and\n  # node versions v1.0.0 or greater are not considered valid \"unmerged\" node\n  # versions.\n  nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" v0.8.6 \\\n  && ! nvm_version_greater_than_or_equal_to \"${NODE_VERSION}\" v1.0.0\n}\n\n# Succeeds if $VERSION represents a version (node, io.js or merged) that has a\n# Solaris binary, fails otherwise.\nnvm_has_solaris_binary() {\n  local VERSION=\"${1-}\"\n  if nvm_is_merged_node_version \"${VERSION}\"; then\n    return 0 # All merged node versions have a Solaris binary\n  elif nvm_is_iojs_version \"${VERSION}\"; then\n    nvm_iojs_version_has_solaris_binary \"${VERSION}\"\n  else\n    nvm_node_version_has_solaris_binary \"${VERSION}\"\n  fi\n}\n\nnvm_sanitize_path() {\n  local SANITIZED_PATH\n  SANITIZED_PATH=\"${1-}\"\n  if [ \"_${SANITIZED_PATH}\" != \"_${NVM_DIR}\" ]; then\n    SANITIZED_PATH=\"$(nvm_echo \"${SANITIZED_PATH}\" | command sed -e \"s#${NVM_DIR}#\\${NVM_DIR}#g\")\"\n  fi\n  if [ \"_${SANITIZED_PATH}\" != \"_${HOME}\" ]; then\n    SANITIZED_PATH=\"$(nvm_echo \"${SANITIZED_PATH}\" | command sed -e \"s#${HOME}#\\${HOME}#g\")\"\n  fi\n  nvm_echo \"${SANITIZED_PATH}\"\n}\n\nnvm_is_natural_num() {\n  if [ -z \"$1\" ]; then\n    return 4\n  fi\n  case \"$1\" in\n    0) return 1 ;;\n    -*) return 3 ;; # some BSDs return false positives for double-negated args\n    *)\n      [ \"$1\" -eq \"$1\" ] 2>/dev/null # returns 2 if it doesn't match\n    ;;\n  esac\n}\n\nnvm_write_nvmrc() {\n  local VERSION_STRING\n  VERSION_STRING=$(nvm_version \"${1-}\")\n  if [ \"${VERSION_STRING}\" = '∞' ] || [ \"${VERSION_STRING}\" = 'N/A' ]; then\n    return 1\n  fi\n  echo \"${VERSION_STRING}\" | tee \"$PWD\"/.nvmrc > /dev/null || {\n    if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n      nvm_err \"Warning: Unable to write version number ($VERSION_STRING) to .nvmrc\"\n    fi\n    return 3\n  }\n  if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n    nvm_echo \"Wrote version number ($VERSION_STRING) to .nvmrc\"\n  fi\n}\n\n# Check version dir permissions\nnvm_check_file_permissions() {\n  nvm_is_zsh && setopt local_options nonomatch\n  for FILE in \"$1\"/* \"$1\"/.[!.]* \"$1\"/..?* ; do\n    if [ -d \"$FILE\" ]; then\n      if [ -n \"${NVM_DEBUG-}\" ]; then\n        nvm_err \"${FILE}\"\n      fi\n      if [ ! -L \"${FILE}\" ] && ! nvm_check_file_permissions \"${FILE}\"; then\n        return 2\n      fi\n    elif [ -e \"$FILE\" ] && [ ! -w \"$FILE\" ] && [ ! -O \"$FILE\" ]; then\n      nvm_err \"file is not writable or self-owned: $(nvm_sanitize_path \"$FILE\")\"\n      return 1\n    fi\n  done\n  return 0\n}\n\nnvm_cache_dir() {\n  nvm_echo \"${NVM_DIR}/.cache\"\n}\n\nnvm() {\n  if [ \"$#\" -lt 1 ]; then\n    nvm --help\n    return\n  fi\n\n  local DEFAULT_IFS\n  DEFAULT_IFS=\" $(nvm_echo t | command tr t \\\\t)\n\"\n  if [ \"${-#*e}\" != \"$-\" ]; then\n    set +e\n    local EXIT_CODE\n    IFS=\"${DEFAULT_IFS}\" nvm \"$@\"\n    EXIT_CODE=\"$?\"\n    set -e\n    return \"$EXIT_CODE\"\n  elif [ \"${-#*a}\" != \"$-\" ]; then\n    set +a\n    local EXIT_CODE\n    IFS=\"${DEFAULT_IFS}\" nvm \"$@\"\n    EXIT_CODE=\"$?\"\n    set -a\n    return \"$EXIT_CODE\"\n  elif [ -n \"${BASH-}\" ] && [ \"${-#*E}\" != \"$-\" ]; then\n    # shellcheck disable=SC3041\n    set +E\n    local EXIT_CODE\n    IFS=\"${DEFAULT_IFS}\" nvm \"$@\"\n    EXIT_CODE=\"$?\"\n    # shellcheck disable=SC3041\n    set -E\n    return \"$EXIT_CODE\"\n  elif [ \"${IFS}\" != \"${DEFAULT_IFS}\" ]; then\n    IFS=\"${DEFAULT_IFS}\" nvm \"$@\"\n    return \"$?\"\n  fi\n\n  local i\n  for i in \"$@\"\n  do\n    case $i in\n      --) break ;;\n      '-h'|'help'|'--help')\n        NVM_NO_COLORS=\"\"\n        for j in \"$@\"; do\n          if [ \"${j}\" = '--no-colors' ]; then\n            NVM_NO_COLORS=\"${j}\"\n            break\n          fi\n        done\n\n        local NVM_IOJS_PREFIX\n        NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n        local NVM_NODE_PREFIX\n        NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n        NVM_VERSION=\"$(nvm --version)\"\n        nvm_echo\n        nvm_echo \"Node Version Manager (v${NVM_VERSION})\"\n        nvm_echo\n        nvm_echo 'Note: <version> refers to any version-like string nvm understands. This includes:'\n        nvm_echo '  - full or partial version numbers, starting with an optional \"v\" (0.10, v0.1.2, v1)'\n        nvm_echo \"  - default (built-in) aliases: ${NVM_NODE_PREFIX}, stable, unstable, ${NVM_IOJS_PREFIX}, system\"\n        nvm_echo '  - custom aliases you define with `nvm alias foo`'\n        nvm_echo\n        nvm_echo ' Any options that produce colorized output should respect the `--no-colors` option.'\n        nvm_echo\n        nvm_echo 'Usage:'\n        nvm_echo '  nvm --help                                  Show this message'\n        nvm_echo '    --no-colors                               Suppress colored output'\n        nvm_echo '  nvm --version                               Print out the installed version of nvm'\n        nvm_echo '  nvm install [<version>]                     Download and install a <version>. Uses .nvmrc if available and version is omitted.'\n        nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm install`:'\n        nvm_echo '    -s                                        Skip binary download, install from source only.'\n        nvm_echo '    -b                                        Skip source download, install from binary only.'\n        nvm_echo '    --reinstall-packages-from=<version>       When installing, reinstall packages installed in <node|iojs|node version number>'\n        nvm_echo '    --lts                                     When installing, only select from LTS (long-term support) versions'\n        nvm_echo '    --lts=<LTS name>                          When installing, only select from versions for a specific LTS line'\n        nvm_echo '    --skip-default-packages                   When installing, skip the default-packages file if it exists'\n        nvm_echo '    --latest-npm                              After installing, attempt to upgrade to the latest working npm on the given node version'\n        nvm_echo '    --no-progress                             Disable the progress bar on any downloads'\n        nvm_echo '    --alias=<name>                            After installing, set the alias specified to the version specified. (same as: nvm alias <name> <version>)'\n        nvm_echo '    --default                                 After installing, set default alias to the version specified. (same as: nvm alias default <version>)'\n        nvm_echo '    --save                                    After installing, write the specified version to .nvmrc'\n        nvm_echo '  nvm uninstall <version>                     Uninstall a version'\n        nvm_echo '  nvm uninstall --lts                         Uninstall using automatic LTS (long-term support) alias `lts/*`, if available.'\n        nvm_echo '  nvm uninstall --lts=<LTS name>              Uninstall using automatic alias for provided LTS line, if available.'\n        nvm_echo '  nvm use [<version>]                         Modify PATH to use <version>. Uses .nvmrc if available and version is omitted.'\n        nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm use`:'\n        nvm_echo '    --silent                                  Silences stdout/stderr output'\n        nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.'\n        nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.'\n        nvm_echo '    --save                                    Writes the specified version to .nvmrc.'\n        nvm_echo '  nvm exec [<version>] [<command>]            Run <command> on <version>. Uses .nvmrc if available and version is omitted.'\n        nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm exec`:'\n        nvm_echo '    --silent                                  Silences stdout/stderr output'\n        nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.'\n        nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.'\n        nvm_echo '  nvm run [<version>] [<args>]                Run `node` on <version> with <args> as arguments. Uses .nvmrc if available and version is omitted.'\n        nvm_echo '   The following optional arguments, if provided, must appear directly after `nvm run`:'\n        nvm_echo '    --silent                                  Silences stdout/stderr output'\n        nvm_echo '    --lts                                     Uses automatic LTS (long-term support) alias `lts/*`, if available.'\n        nvm_echo '    --lts=<LTS name>                          Uses automatic alias for provided LTS line, if available.'\n        nvm_echo '  nvm current                                 Display currently activated version of Node'\n        nvm_echo '  nvm ls [<version>]                          List installed versions, matching a given <version> if provided'\n        nvm_echo '    --no-colors                               Suppress colored output'\n        nvm_echo '    --no-alias                                Suppress `nvm alias` output'\n        nvm_echo '  nvm ls-remote [<version>]                   List remote versions available for install, matching a given <version> if provided'\n        nvm_echo '    --lts                                     When listing, only show LTS (long-term support) versions'\n        nvm_echo '    --lts=<LTS name>                          When listing, only show versions for a specific LTS line'\n        nvm_echo '    --no-colors                               Suppress colored output'\n        nvm_echo '  nvm version <version>                       Resolve the given description to a single local version'\n        nvm_echo '  nvm version-remote <version>                Resolve the given description to a single remote version'\n        nvm_echo '    --lts                                     When listing, only select from LTS (long-term support) versions'\n        nvm_echo '    --lts=<LTS name>                          When listing, only select from versions for a specific LTS line'\n        nvm_echo '  nvm deactivate                              Undo effects of `nvm` on current shell'\n        nvm_echo '    --silent                                  Silences stdout/stderr output'\n        nvm_echo '  nvm alias [<pattern>]                       Show all aliases beginning with <pattern>'\n        nvm_echo '    --no-colors                               Suppress colored output'\n        nvm_echo '  nvm alias <name> <version>                  Set an alias named <name> pointing to <version>'\n        nvm_echo '  nvm unalias <name>                          Deletes the alias named <name>'\n        nvm_echo '  nvm install-latest-npm                      Attempt to upgrade to the latest working `npm` on the current node version'\n        nvm_echo '  nvm reinstall-packages <version>            Reinstall global `npm` packages contained in <version> to current version'\n        nvm_echo '  nvm unload                                  Unload `nvm` from shell'\n        nvm_echo '  nvm which [current | <version>]             Display path to installed node version. Uses .nvmrc if available and version is omitted.'\n        nvm_echo '    --silent                                  Silences stdout/stderr output when a version is omitted'\n        nvm_echo '  nvm cache dir                               Display path to the cache directory for nvm'\n        nvm_echo '  nvm cache clear                             Empty cache directory for nvm'\n        nvm_echo '  nvm set-colors [<color codes>]              Set five text colors using format \"yMeBg\". Available when supported.'\n        nvm_echo '                                               Initial colors are:'\n        nvm_echo_with_colors \"                                                  $(nvm_wrap_with_color_code 'b' 'b')$(nvm_wrap_with_color_code 'y' 'y')$(nvm_wrap_with_color_code 'g' 'g')$(nvm_wrap_with_color_code 'r' 'r')$(nvm_wrap_with_color_code 'e' 'e')\"\n        nvm_echo '                                               Color codes:'\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'r' 'r')/$(nvm_wrap_with_color_code 'R' 'R') = $(nvm_wrap_with_color_code 'r' 'red') / $(nvm_wrap_with_color_code 'R' 'bold red')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'g' 'g')/$(nvm_wrap_with_color_code 'G' 'G') = $(nvm_wrap_with_color_code 'g' 'green') / $(nvm_wrap_with_color_code 'G' 'bold green')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'b' 'b')/$(nvm_wrap_with_color_code 'B' 'B') = $(nvm_wrap_with_color_code 'b' 'blue') / $(nvm_wrap_with_color_code 'B' 'bold blue')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'c' 'c')/$(nvm_wrap_with_color_code 'C' 'C') = $(nvm_wrap_with_color_code 'c' 'cyan') / $(nvm_wrap_with_color_code 'C' 'bold cyan')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'm' 'm')/$(nvm_wrap_with_color_code 'M' 'M') = $(nvm_wrap_with_color_code 'm' 'magenta') / $(nvm_wrap_with_color_code 'M' 'bold magenta')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'y' 'y')/$(nvm_wrap_with_color_code 'Y' 'Y') = $(nvm_wrap_with_color_code 'y' 'yellow') / $(nvm_wrap_with_color_code 'Y' 'bold yellow')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'k' 'k')/$(nvm_wrap_with_color_code 'K' 'K') = $(nvm_wrap_with_color_code 'k' 'black') / $(nvm_wrap_with_color_code 'K' 'bold black')\"\n        nvm_echo_with_colors \"                                                $(nvm_wrap_with_color_code 'e' 'e')/$(nvm_wrap_with_color_code 'W' 'W') = $(nvm_wrap_with_color_code 'e' 'light grey') / $(nvm_wrap_with_color_code 'W' 'white')\"\n        nvm_echo 'Example:'\n        nvm_echo '  nvm install 8.0.0                     Install a specific version number'\n        nvm_echo '  nvm use 8.0                           Use the latest available 8.0.x release'\n        nvm_echo '  nvm run 6.10.3 app.js                 Run app.js using node 6.10.3'\n        nvm_echo '  nvm exec 4.8.3 node app.js            Run `node app.js` with the PATH pointing to node 4.8.3'\n        nvm_echo '  nvm alias default 8.1.0               Set default node version on a shell'\n        nvm_echo '  nvm alias default node                Always default to the latest available node version on a shell'\n        nvm_echo\n        nvm_echo '  nvm install node                      Install the latest available version'\n        nvm_echo '  nvm use node                          Use the latest version'\n        nvm_echo '  nvm install --lts                     Install the latest LTS version'\n        nvm_echo '  nvm use --lts                         Use the latest LTS version'\n        nvm_echo\n        nvm_echo '  nvm set-colors cgYmW                  Set text colors to cyan, green, bold yellow, magenta, and white'\n        nvm_echo\n        nvm_echo 'Note:'\n        nvm_echo '  to remove, delete, or uninstall nvm - just remove the `$NVM_DIR` folder (usually `~/.nvm`)'\n        nvm_echo\n        return 0;\n      ;;\n    esac\n  done\n\n  local COMMAND\n  COMMAND=\"${1-}\"\n  shift\n\n  # initialize local variables\n  local VERSION\n  local ADDITIONAL_PARAMETERS\n\n  case $COMMAND in\n    \"cache\")\n      case \"${1-}\" in\n        dir) nvm_cache_dir ;;\n        clear)\n          local DIR\n          DIR=\"$(nvm_cache_dir)\"\n          if command rm -rf \"${DIR}\" && command mkdir -p \"${DIR}\"; then\n            nvm_echo 'nvm cache cleared.'\n          else\n            nvm_err \"Unable to clear nvm cache: ${DIR}\"\n            return 1\n          fi\n        ;;\n        *)\n          >&2 nvm --help\n          return 127\n        ;;\n      esac\n    ;;\n\n    \"debug\")\n      local OS_VERSION\n      nvm_is_zsh && setopt local_options shwordsplit\n      nvm_err \"nvm --version: v$(nvm --version)\"\n      if [ -n \"${TERM_PROGRAM-}\" ]; then\n        nvm_err \"\\$TERM_PROGRAM: ${TERM_PROGRAM}\"\n      fi\n      nvm_err \"\\$SHELL: ${SHELL}\"\n      # shellcheck disable=SC2169,SC3028\n      nvm_err \"\\$SHLVL: ${SHLVL-}\"\n      nvm_err \"whoami: '$(whoami)'\"\n      nvm_err \"\\${HOME}: ${HOME}\"\n      nvm_err \"\\${NVM_DIR}: '$(nvm_sanitize_path \"${NVM_DIR}\")'\"\n      nvm_err \"\\${PATH}: $(nvm_sanitize_path \"${PATH}\")\"\n      nvm_err \"\\$PREFIX: '$(nvm_sanitize_path \"${PREFIX}\")'\"\n      nvm_err \"\\${NPM_CONFIG_PREFIX}: '$(nvm_sanitize_path \"${NPM_CONFIG_PREFIX}\")'\"\n      nvm_err \"\\$NVM_NODEJS_ORG_MIRROR: '${NVM_NODEJS_ORG_MIRROR}'\"\n      nvm_err \"\\$NVM_IOJS_ORG_MIRROR: '${NVM_IOJS_ORG_MIRROR}'\"\n      nvm_err \"shell version: '$(${SHELL} --version | command head -n 1)'\"\n      nvm_err \"uname -a: '$(command uname -a | command awk '{$2=\"\"; print}' | command xargs)'\"\n      nvm_err \"checksum binary: '$(nvm_get_checksum_binary 2>/dev/null)'\"\n      if [ \"$(nvm_get_os)\" = \"darwin\" ] && nvm_has sw_vers; then\n        OS_VERSION=\"$(sw_vers | command awk '{print $2}' | command xargs)\"\n      elif [ -r \"/etc/issue\" ]; then\n        OS_VERSION=\"$(command head -n 1 /etc/issue | command sed 's/\\\\.//g')\"\n        if [ -z \"${OS_VERSION}\" ] && [ -r \"/etc/os-release\" ]; then\n          # shellcheck disable=SC1091\n          OS_VERSION=\"$(. /etc/os-release && echo \"${NAME}\" \"${VERSION}\")\"\n        fi\n      fi\n      if [ -n \"${OS_VERSION}\" ]; then\n        nvm_err \"OS version: ${OS_VERSION}\"\n      fi\n      if nvm_has \"awk\"; then\n        nvm_err \"awk: $(nvm_command_info awk), $({ command awk --version 2>/dev/null || command awk -W version; } \\\n          | command head -n 1)\"\n      else\n        nvm_err \"awk: not found\"\n      fi\n      if nvm_has \"curl\"; then\n        nvm_err \"curl: $(nvm_command_info curl), $(command curl -V | command head -n 1)\"\n      else\n        nvm_err \"curl: not found\"\n      fi\n      if nvm_has \"wget\"; then\n        nvm_err \"wget: $(nvm_command_info wget), $(command wget -V | command head -n 1)\"\n      else\n        nvm_err \"wget: not found\"\n      fi\n\n      local TEST_TOOLS ADD_TEST_TOOLS\n      TEST_TOOLS=\"git grep\"\n      ADD_TEST_TOOLS=\"sed cut basename rm mkdir xargs\"\n      if [ \"darwin\" != \"$(nvm_get_os)\" ] && [ \"freebsd\" != \"$(nvm_get_os)\" ]; then\n        TEST_TOOLS=\"${TEST_TOOLS} ${ADD_TEST_TOOLS}\"\n      else\n        for tool in ${ADD_TEST_TOOLS} ; do\n          if nvm_has \"${tool}\"; then\n            nvm_err \"${tool}: $(nvm_command_info \"${tool}\")\"\n          else\n            nvm_err \"${tool}: not found\"\n          fi\n        done\n      fi\n      for tool in ${TEST_TOOLS} ; do\n        local NVM_TOOL_VERSION\n        if nvm_has \"${tool}\"; then\n          if command ls -l \"$(nvm_command_info \"${tool}\" | command awk '{print $1}')\" | command grep -q busybox; then\n            NVM_TOOL_VERSION=\"$(command \"${tool}\" --help 2>&1 | command head -n 1)\"\n          else\n            NVM_TOOL_VERSION=\"$(command \"${tool}\" --version 2>&1 | command head -n 1)\"\n          fi\n          nvm_err \"${tool}: $(nvm_command_info \"${tool}\"), ${NVM_TOOL_VERSION}\"\n        else\n          nvm_err \"${tool}: not found\"\n        fi\n        unset NVM_TOOL_VERSION\n      done\n      unset TEST_TOOLS ADD_TEST_TOOLS\n\n      local NVM_DEBUG_OUTPUT\n      for NVM_DEBUG_COMMAND in 'nvm current' 'which node' 'which iojs' 'which npm' 'npm config get prefix' 'npm root -g'; do\n        NVM_DEBUG_OUTPUT=\"$(${NVM_DEBUG_COMMAND} 2>&1)\"\n        nvm_err \"${NVM_DEBUG_COMMAND}: $(nvm_sanitize_path \"${NVM_DEBUG_OUTPUT}\")\"\n      done\n      return 42\n    ;;\n\n    \"install\" | \"i\")\n      local version_not_provided\n      version_not_provided=0\n      local NVM_OS\n      NVM_OS=\"$(nvm_get_os)\"\n\n      if ! nvm_has \"curl\" && ! nvm_has \"wget\"; then\n        nvm_err 'nvm needs curl or wget to proceed.'\n        return 1\n      fi\n\n      if [ $# -lt 1 ]; then\n        version_not_provided=1\n      fi\n\n      local nobinary\n      local nosource\n      local noprogress\n      nobinary=0\n      noprogress=0\n      nosource=0\n      local LTS\n      local ALIAS\n      local NVM_UPGRADE_NPM\n      NVM_UPGRADE_NPM=0\n      local NVM_WRITE_TO_NVMRC\n      NVM_WRITE_TO_NVMRC=0\n\n      local PROVIDED_REINSTALL_PACKAGES_FROM\n      local REINSTALL_PACKAGES_FROM\n      local SKIP_DEFAULT_PACKAGES\n\n      while [ $# -ne 0 ]; do\n        case \"$1\" in\n          ---*)\n            nvm_err 'arguments with `---` are not supported - this is likely a typo'\n            return 55;\n          ;;\n          -s)\n            shift # consume \"-s\"\n            nobinary=1\n            if [ $nosource -eq 1 ]; then\n                nvm err '-s and -b cannot be set together since they would skip install from both binary and source'\n                return 6\n            fi\n          ;;\n          -b)\n            shift # consume \"-b\"\n            nosource=1\n            if [ $nobinary -eq 1 ]; then\n                nvm err '-s and -b cannot be set together since they would skip install from both binary and source'\n                return 6\n            fi\n          ;;\n          -j)\n            shift # consume \"-j\"\n            nvm_get_make_jobs \"$1\"\n            shift # consume job count\n          ;;\n          --no-progress)\n            noprogress=1\n            shift\n          ;;\n          --lts)\n            LTS='*'\n            shift\n          ;;\n          --lts=*)\n            LTS=\"${1##--lts=}\"\n            shift\n          ;;\n          --latest-npm)\n            NVM_UPGRADE_NPM=1\n            shift\n          ;;\n          --default)\n            if [ -n \"${ALIAS-}\" ]; then\n              nvm_err '--default and --alias are mutually exclusive, and may not be provided more than once'\n              return 6\n            fi\n            ALIAS='default'\n            shift\n          ;;\n          --alias=*)\n            if [ -n \"${ALIAS-}\" ]; then\n              nvm_err '--default and --alias are mutually exclusive, and may not be provided more than once'\n              return 6\n            fi\n            ALIAS=\"${1##--alias=}\"\n            shift\n          ;;\n          --reinstall-packages-from=*)\n            if [ -n \"${PROVIDED_REINSTALL_PACKAGES_FROM-}\" ]; then\n              nvm_err '--reinstall-packages-from may not be provided more than once'\n              return 6\n            fi\n            PROVIDED_REINSTALL_PACKAGES_FROM=\"$(nvm_echo \"$1\" | command cut -c 27-)\"\n            if [ -z \"${PROVIDED_REINSTALL_PACKAGES_FROM}\" ]; then\n              nvm_err 'If --reinstall-packages-from is provided, it must point to an installed version of node.'\n              return 6\n            fi\n            REINSTALL_PACKAGES_FROM=\"$(nvm_version \"${PROVIDED_REINSTALL_PACKAGES_FROM}\")\" ||:\n            shift\n          ;;\n          --copy-packages-from=*)\n            if [ -n \"${PROVIDED_REINSTALL_PACKAGES_FROM-}\" ]; then\n              nvm_err '--reinstall-packages-from may not be provided more than once, or combined with `--copy-packages-from`'\n              return 6\n            fi\n            PROVIDED_REINSTALL_PACKAGES_FROM=\"$(nvm_echo \"$1\" | command cut -c 22-)\"\n            if [ -z \"${PROVIDED_REINSTALL_PACKAGES_FROM}\" ]; then\n              nvm_err 'If --copy-packages-from is provided, it must point to an installed version of node.'\n              return 6\n            fi\n            REINSTALL_PACKAGES_FROM=\"$(nvm_version \"${PROVIDED_REINSTALL_PACKAGES_FROM}\")\" ||:\n            shift\n          ;;\n          --reinstall-packages-from | --copy-packages-from)\n            nvm_err \"If ${1} is provided, it must point to an installed version of node using \\`=\\`.\"\n            return 6\n          ;;\n          --skip-default-packages)\n            SKIP_DEFAULT_PACKAGES=true\n            shift\n          ;;\n          --save | -w)\n            if [ $NVM_WRITE_TO_NVMRC -eq 1 ]; then\n              nvm_err '--save and -w may only be provided once'\n              return 6\n            fi\n            NVM_WRITE_TO_NVMRC=1\n            shift\n          ;;\n          *)\n            break # stop parsing args\n          ;;\n        esac\n      done\n\n      local provided_version\n      provided_version=\"${1-}\"\n\n      if [ -z \"${provided_version}\" ]; then\n        if [ \"_${LTS-}\" = '_*' ]; then\n          nvm_echo 'Installing latest LTS version.'\n          if [ $# -gt 0 ]; then\n            shift\n          fi\n        elif [ \"_${LTS-}\" != '_' ]; then\n          nvm_echo \"Installing with latest version of LTS line: ${LTS}\"\n          if [ $# -gt 0 ]; then\n            shift\n          fi\n        else\n          nvm_rc_version\n          if [ $version_not_provided -eq 1 ] && [ -z \"${NVM_RC_VERSION}\" ]; then\n            unset NVM_RC_VERSION\n            >&2 nvm --help\n            return 127\n          fi\n          provided_version=\"${NVM_RC_VERSION}\"\n          unset NVM_RC_VERSION\n        fi\n      elif [ $# -gt 0 ]; then\n        shift\n      fi\n\n      case \"${provided_version}\" in\n        'lts/*')\n          LTS='*'\n          provided_version=''\n        ;;\n        lts/*)\n          LTS=\"${provided_version##lts/}\"\n          provided_version=''\n        ;;\n      esac\n\n      local EXIT_CODE\n      VERSION=\"$(NVM_VERSION_ONLY=true NVM_LTS=\"${LTS-}\" nvm_remote_version \"${provided_version}\")\"\n      EXIT_CODE=\"$?\"\n\n      if [ \"${VERSION}\" = 'N/A' ] || [ $EXIT_CODE -ne 0 ]; then\n        local LTS_MSG\n        local REMOTE_CMD\n        if [ \"${LTS-}\" = '*' ]; then\n          LTS_MSG='(with LTS filter) '\n          REMOTE_CMD='nvm ls-remote --lts'\n        elif [ -n \"${LTS-}\" ]; then\n          LTS_MSG=\"(with LTS filter '${LTS}') \"\n          REMOTE_CMD=\"nvm ls-remote --lts=${LTS}\"\n          if [ -z \"${provided_version}\" ]; then\n            nvm_err \"Version with LTS filter '${LTS}' not found - try \\`${REMOTE_CMD}\\` to browse available versions.\"\n            return 3\n          fi\n        else\n          REMOTE_CMD='nvm ls-remote'\n        fi\n        nvm_err \"Version '${provided_version}' ${LTS_MSG-}not found - try \\`${REMOTE_CMD}\\` to browse available versions.\"\n        return 3\n      fi\n\n      ADDITIONAL_PARAMETERS=''\n\n      while [ $# -ne 0 ]; do\n        case \"$1\" in\n          --reinstall-packages-from=*)\n            if [ -n \"${PROVIDED_REINSTALL_PACKAGES_FROM-}\" ]; then\n              nvm_err '--reinstall-packages-from may not be provided more than once'\n              return 6\n            fi\n            PROVIDED_REINSTALL_PACKAGES_FROM=\"$(nvm_echo \"$1\" | command cut -c 27-)\"\n            if [ -z \"${PROVIDED_REINSTALL_PACKAGES_FROM}\" ]; then\n              nvm_err 'If --reinstall-packages-from is provided, it must point to an installed version of node.'\n              return 6\n            fi\n            REINSTALL_PACKAGES_FROM=\"$(nvm_version \"${PROVIDED_REINSTALL_PACKAGES_FROM}\")\" ||:\n          ;;\n          --copy-packages-from=*)\n            if [ -n \"${PROVIDED_REINSTALL_PACKAGES_FROM-}\" ]; then\n              nvm_err '--reinstall-packages-from may not be provided more than once, or combined with `--copy-packages-from`'\n              return 6\n            fi\n            PROVIDED_REINSTALL_PACKAGES_FROM=\"$(nvm_echo \"$1\" | command cut -c 22-)\"\n            if [ -z \"${PROVIDED_REINSTALL_PACKAGES_FROM}\" ]; then\n              nvm_err 'If --copy-packages-from is provided, it must point to an installed version of node.'\n              return 6\n            fi\n            REINSTALL_PACKAGES_FROM=\"$(nvm_version \"${PROVIDED_REINSTALL_PACKAGES_FROM}\")\" ||:\n          ;;\n          --reinstall-packages-from | --copy-packages-from)\n            nvm_err \"If ${1} is provided, it must point to an installed version of node using \\`=\\`.\"\n            return 6\n          ;;\n          --skip-default-packages)\n            SKIP_DEFAULT_PACKAGES=true\n          ;;\n          *)\n            ADDITIONAL_PARAMETERS=\"${ADDITIONAL_PARAMETERS} $1\"\n          ;;\n        esac\n        shift\n      done\n\n      if [ -n \"${PROVIDED_REINSTALL_PACKAGES_FROM-}\" ] && [ \"$(nvm_ensure_version_prefix \"${PROVIDED_REINSTALL_PACKAGES_FROM}\")\" = \"${VERSION}\" ]; then\n        nvm_err \"You can't reinstall global packages from the same version of node you're installing.\"\n        return 4\n      elif [ \"${REINSTALL_PACKAGES_FROM-}\" = 'N/A' ]; then\n        nvm_err \"If --reinstall-packages-from is provided, it must point to an installed version of node.\"\n        return 5\n      fi\n\n      local FLAVOR\n      if nvm_is_iojs_version \"${VERSION}\"; then\n        FLAVOR=\"$(nvm_iojs_prefix)\"\n      else\n        FLAVOR=\"$(nvm_node_prefix)\"\n      fi\n\n      EXIT_CODE=0\n\n      if nvm_is_version_installed \"${VERSION}\"; then\n        nvm_err \"${VERSION} is already installed.\"\n        nvm use \"${VERSION}\"\n        EXIT_CODE=$?\n        if [ $EXIT_CODE -eq 0 ]; then\n          if [ \"${NVM_UPGRADE_NPM}\" = 1 ]; then\n            nvm install-latest-npm\n            EXIT_CODE=$?\n          fi\n          if [ $EXIT_CODE -ne 0 ] && [ -z \"${SKIP_DEFAULT_PACKAGES-}\" ]; then\n            nvm_install_default_packages\n          fi\n          if [ $EXIT_CODE -ne 0 ] && [ -n \"${REINSTALL_PACKAGES_FROM-}\" ] && [ \"_${REINSTALL_PACKAGES_FROM}\" != \"_N/A\" ]; then\n            nvm reinstall-packages \"${REINSTALL_PACKAGES_FROM}\"\n            EXIT_CODE=$?\n          fi\n        fi\n\n        if [ -n \"${LTS-}\" ]; then\n          LTS=\"$(echo \"${LTS}\" | tr '[:upper:]' '[:lower:]')\"\n          nvm_ensure_default_set \"lts/${LTS}\"\n        else\n          nvm_ensure_default_set \"${provided_version}\"\n        fi\n\n        if [ $NVM_WRITE_TO_NVMRC -eq 1 ]; then\n          nvm_write_nvmrc \"${VERSION}\"\n          EXIT_CODE=$?\n        fi\n\n        if [ $EXIT_CODE -ne 0 ] && [ -n \"${ALIAS-}\" ]; then\n          nvm alias \"${ALIAS}\" \"${provided_version}\"\n          EXIT_CODE=$?\n        fi\n\n        return $EXIT_CODE\n      fi\n\n      if [ -n \"${NVM_INSTALL_THIRD_PARTY_HOOK-}\" ]; then\n        nvm_err '** $NVM_INSTALL_THIRD_PARTY_HOOK env var set; dispatching to third-party installation method **'\n        local NVM_METHOD_PREFERENCE\n        NVM_METHOD_PREFERENCE='binary'\n        if [ $nobinary -eq 1 ]; then\n          NVM_METHOD_PREFERENCE='source'\n        fi\n        local VERSION_PATH\n        VERSION_PATH=\"$(nvm_version_path \"${VERSION}\")\"\n        \"${NVM_INSTALL_THIRD_PARTY_HOOK}\" \"${VERSION}\" \"${FLAVOR}\" std \"${NVM_METHOD_PREFERENCE}\" \"${VERSION_PATH}\" || {\n          EXIT_CODE=$?\n          nvm_err '*** Third-party $NVM_INSTALL_THIRD_PARTY_HOOK env var failed to install! ***'\n          return $EXIT_CODE\n        }\n        if ! nvm_is_version_installed \"${VERSION}\"; then\n          nvm_err '*** Third-party $NVM_INSTALL_THIRD_PARTY_HOOK env var claimed to succeed, but failed to install! ***'\n          return 33\n        fi\n        EXIT_CODE=0\n      else\n\n        if [ \"_${NVM_OS}\" = \"_freebsd\" ]; then\n          # node.js and io.js do not have a FreeBSD binary\n          nobinary=1\n          nvm_err \"Currently, there is no binary for FreeBSD\"\n        elif [ \"_$NVM_OS\" = \"_openbsd\" ]; then\n          # node.js and io.js do not have a OpenBSD binary\n          nobinary=1\n          nvm_err \"Currently, there is no binary for OpenBSD\"\n        elif [ \"_${NVM_OS}\" = \"_sunos\" ]; then\n          # Not all node/io.js versions have a Solaris binary\n          if ! nvm_has_solaris_binary \"${VERSION}\"; then\n            nobinary=1\n            nvm_err \"Currently, there is no binary of version ${VERSION} for SunOS\"\n          fi\n        fi\n\n        # skip binary install if \"nobinary\" option specified.\n        if [ $nobinary -ne 1 ] && nvm_binary_available \"${VERSION}\"; then\n          NVM_NO_PROGRESS=\"${NVM_NO_PROGRESS:-${noprogress}}\" nvm_install_binary \"${FLAVOR}\" std \"${VERSION}\" \"${nosource}\"\n          EXIT_CODE=$?\n        else\n          EXIT_CODE=-1\n          if [ $nosource -eq 1 ]; then\n            nvm_err \"Binary download is not available for ${VERSION}\"\n            EXIT_CODE=3\n          fi\n        fi\n\n        if [ $EXIT_CODE -ne 0 ] && [ $nosource -ne 1 ]; then\n          if [ -z \"${NVM_MAKE_JOBS-}\" ]; then\n            nvm_get_make_jobs\n          fi\n\n          if [ \"_${NVM_OS}\" = \"_win\" ]; then\n            nvm_err 'Installing from source on non-WSL Windows is not supported'\n            EXIT_CODE=87\n          else\n            NVM_NO_PROGRESS=\"${NVM_NO_PROGRESS:-${noprogress}}\" nvm_install_source \"${FLAVOR}\" std \"${VERSION}\" \"${NVM_MAKE_JOBS}\" \"${ADDITIONAL_PARAMETERS}\"\n            EXIT_CODE=$?\n          fi\n        fi\n      fi\n\n      if [ $EXIT_CODE -eq 0 ]; then\n        if nvm_use_if_needed \"${VERSION}\" && nvm_install_npm_if_needed \"${VERSION}\"; then\n          if [ -n \"${LTS-}\" ]; then\n            nvm_ensure_default_set \"lts/${LTS}\"\n          else\n            nvm_ensure_default_set \"${provided_version}\"\n          fi\n          if [ \"${NVM_UPGRADE_NPM}\" = 1 ]; then\n            nvm install-latest-npm\n            EXIT_CODE=$?\n          fi\n          if [ $EXIT_CODE -eq 0 ] && [ -z \"${SKIP_DEFAULT_PACKAGES-}\" ]; then\n            nvm_install_default_packages\n          fi\n          if [ $EXIT_CODE -eq 0 ] && [ -n \"${REINSTALL_PACKAGES_FROM-}\" ] && [ \"_${REINSTALL_PACKAGES_FROM}\" != \"_N/A\" ]; then\n            nvm reinstall-packages \"${REINSTALL_PACKAGES_FROM}\"\n            EXIT_CODE=$?\n          fi\n        else\n          EXIT_CODE=$?\n        fi\n      fi\n\n      return $EXIT_CODE\n    ;;\n    \"uninstall\")\n      if [ $# -ne 1 ]; then\n        >&2 nvm --help\n        return 127\n      fi\n\n      local PATTERN\n      PATTERN=\"${1-}\"\n      case \"${PATTERN-}\" in\n        --) ;;\n        --lts | 'lts/*')\n          VERSION=\"$(nvm_match_version \"lts/*\")\"\n        ;;\n        lts/*)\n          VERSION=\"$(nvm_match_version \"lts/${PATTERN##lts/}\")\"\n        ;;\n        --lts=*)\n          VERSION=\"$(nvm_match_version \"lts/${PATTERN##--lts=}\")\"\n        ;;\n        *)\n          VERSION=\"$(nvm_version \"${PATTERN}\")\"\n        ;;\n      esac\n\n      if [ \"_${VERSION}\" = \"_$(nvm_ls_current)\" ]; then\n        if nvm_is_iojs_version \"${VERSION}\"; then\n          nvm_err \"nvm: Cannot uninstall currently-active io.js version, ${VERSION} (inferred from ${PATTERN}).\"\n        else\n          nvm_err \"nvm: Cannot uninstall currently-active node version, ${VERSION} (inferred from ${PATTERN}).\"\n        fi\n        return 1\n      fi\n\n      if ! nvm_is_version_installed \"${VERSION}\"; then\n        nvm_err \"${VERSION} version is not installed...\"\n        return\n      fi\n\n      local SLUG_BINARY\n      local SLUG_SOURCE\n      if nvm_is_iojs_version \"${VERSION}\"; then\n        SLUG_BINARY=\"$(nvm_get_download_slug iojs binary std \"${VERSION}\")\"\n        SLUG_SOURCE=\"$(nvm_get_download_slug iojs source std \"${VERSION}\")\"\n      else\n        SLUG_BINARY=\"$(nvm_get_download_slug node binary std \"${VERSION}\")\"\n        SLUG_SOURCE=\"$(nvm_get_download_slug node source std \"${VERSION}\")\"\n      fi\n\n      local NVM_SUCCESS_MSG\n      if nvm_is_iojs_version \"${VERSION}\"; then\n        NVM_SUCCESS_MSG=\"Uninstalled io.js $(nvm_strip_iojs_prefix \"${VERSION}\")\"\n      else\n        NVM_SUCCESS_MSG=\"Uninstalled node ${VERSION}\"\n      fi\n\n      local VERSION_PATH\n      VERSION_PATH=\"$(nvm_version_path \"${VERSION}\")\"\n      if ! nvm_check_file_permissions \"${VERSION_PATH}\"; then\n        nvm_err 'Cannot uninstall, incorrect permissions on installation folder.'\n        nvm_err 'This is usually caused by running `npm install -g` as root. Run the following commands as root to fix the permissions and then try again.'\n        nvm_err\n        nvm_err \"  chown -R $(whoami) \\\"$(nvm_sanitize_path \"${VERSION_PATH}\")\\\"\"\n        nvm_err \"  chmod -R u+w \\\"$(nvm_sanitize_path \"${VERSION_PATH}\")\\\"\"\n        return 1\n      fi\n\n      # Delete all files related to target version.\n      local CACHE_DIR\n      CACHE_DIR=\"$(nvm_cache_dir)\"\n      command rm -rf \\\n        \"${CACHE_DIR}/bin/${SLUG_BINARY}/files\" \\\n        \"${CACHE_DIR}/src/${SLUG_SOURCE}/files\" \\\n        \"${VERSION_PATH}\" 2>/dev/null\n      nvm_echo \"${NVM_SUCCESS_MSG}\"\n\n      # rm any aliases that point to uninstalled version.\n      for ALIAS in $(nvm_grep -l \"${VERSION}\" \"$(nvm_alias_path)/*\" 2>/dev/null); do\n        nvm unalias \"$(command basename \"${ALIAS}\")\"\n      done\n    ;;\n    \"deactivate\")\n      local NVM_SILENT\n      while [ $# -ne 0 ]; do\n        case \"${1}\" in\n          --silent) NVM_SILENT=1 ;;\n          --) ;;\n        esac\n        shift\n      done\n      local NEWPATH\n      NEWPATH=\"$(nvm_strip_path \"${PATH}\" \"/bin\")\"\n      if [ \"_${PATH}\" = \"_${NEWPATH}\" ]; then\n        if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n          nvm_err \"Could not find ${NVM_DIR}/*/bin in \\${PATH}\"\n        fi\n      else\n        export PATH=\"${NEWPATH}\"\n        \\hash -r\n        if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n          nvm_echo \"${NVM_DIR}/*/bin removed from \\${PATH}\"\n        fi\n      fi\n\n      if [ -n \"${MANPATH-}\" ]; then\n        NEWPATH=\"$(nvm_strip_path \"${MANPATH}\" \"/share/man\")\"\n        if [ \"_${MANPATH}\" = \"_${NEWPATH}\" ]; then\n          if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n            nvm_err \"Could not find ${NVM_DIR}/*/share/man in \\${MANPATH}\"\n          fi\n        else\n          export MANPATH=\"${NEWPATH}\"\n          if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n            nvm_echo \"${NVM_DIR}/*/share/man removed from \\${MANPATH}\"\n          fi\n        fi\n      fi\n\n      if [ -n \"${NODE_PATH-}\" ]; then\n        NEWPATH=\"$(nvm_strip_path \"${NODE_PATH}\" \"/lib/node_modules\")\"\n        if [ \"_${NODE_PATH}\" != \"_${NEWPATH}\" ]; then\n          export NODE_PATH=\"${NEWPATH}\"\n          if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n            nvm_echo \"${NVM_DIR}/*/lib/node_modules removed from \\${NODE_PATH}\"\n          fi\n        fi\n      fi\n      unset NVM_BIN\n      unset NVM_INC\n    ;;\n    \"use\")\n      local PROVIDED_VERSION\n      local NVM_SILENT\n      local NVM_SILENT_ARG\n      local NVM_DELETE_PREFIX\n      NVM_DELETE_PREFIX=0\n      local NVM_LTS\n      local IS_VERSION_FROM_NVMRC\n      IS_VERSION_FROM_NVMRC=0\n      local NVM_WRITE_TO_NVMRC\n      NVM_WRITE_TO_NVMRC=0\n\n      while [ $# -ne 0 ]; do\n        case \"$1\" in\n          --silent)\n            NVM_SILENT=1\n            NVM_SILENT_ARG='--silent'\n          ;;\n          --delete-prefix) NVM_DELETE_PREFIX=1 ;;\n          --) ;;\n          --lts) NVM_LTS='*' ;;\n          --lts=*) NVM_LTS=\"${1##--lts=}\" ;;\n          --save | -w)\n            if [ $NVM_WRITE_TO_NVMRC -eq 1 ]; then\n              nvm_err '--save and -w may only be provided once'\n              return 6\n            fi\n            NVM_WRITE_TO_NVMRC=1\n          ;;\n          --*) ;;\n          *)\n            if [ -n \"${1-}\" ]; then\n              PROVIDED_VERSION=\"$1\"\n            fi\n          ;;\n        esac\n        shift\n      done\n\n      if [ -n \"${NVM_LTS-}\" ]; then\n        VERSION=\"$(nvm_match_version \"lts/${NVM_LTS:-*}\")\"\n      elif [ -z \"${PROVIDED_VERSION-}\" ]; then\n        NVM_SILENT=\"${NVM_SILENT:-0}\" nvm_rc_version\n        if [ -n \"${NVM_RC_VERSION-}\" ]; then\n          PROVIDED_VERSION=\"${NVM_RC_VERSION}\"\n          IS_VERSION_FROM_NVMRC=1\n          VERSION=\"$(nvm_version \"${PROVIDED_VERSION}\")\"\n        fi\n        unset NVM_RC_VERSION\n        if [ -z \"${VERSION}\" ]; then\n          nvm_err 'Please see `nvm --help` or https://github.com/nvm-sh/nvm#nvmrc for more information.'\n          return 127\n        fi\n      else\n        VERSION=\"$(nvm_match_version \"${PROVIDED_VERSION}\")\"\n      fi\n\n      if [ -z \"${VERSION}\" ]; then\n        >&2 nvm --help\n        return 127\n      fi\n\n      if [ $NVM_WRITE_TO_NVMRC -eq 1 ]; then\n        nvm_write_nvmrc \"${VERSION}\"\n      fi\n\n      if [ \"_${VERSION}\" = '_system' ]; then\n        if nvm_has_system_node && nvm deactivate \"${NVM_SILENT_ARG-}\" >/dev/null 2>&1; then\n          if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n            nvm_echo \"Now using system version of node: $(node -v 2>/dev/null)$(nvm_print_npm_version)\"\n          fi\n          return\n        elif nvm_has_system_iojs && nvm deactivate \"${NVM_SILENT_ARG-}\" >/dev/null 2>&1; then\n          if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n            nvm_echo \"Now using system version of io.js: $(iojs --version 2>/dev/null)$(nvm_print_npm_version)\"\n          fi\n          return\n        elif [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n          nvm_err 'System version of node not found.'\n        fi\n        return 127\n      elif [ \"_${VERSION}\" = '_∞' ]; then\n        if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n          nvm_err \"The alias \\\"${PROVIDED_VERSION}\\\" leads to an infinite loop. Aborting.\"\n        fi\n        return 8\n      fi\n      if [ \"${VERSION}\" = 'N/A' ]; then\n        if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n          nvm_ensure_version_installed \"${PROVIDED_VERSION}\" \"${IS_VERSION_FROM_NVMRC}\"\n        fi\n        return 3\n      # This nvm_ensure_version_installed call can be a performance bottleneck\n      # on shell startup. Perhaps we can optimize it away or make it faster.\n      elif ! nvm_ensure_version_installed \"${VERSION}\" \"${IS_VERSION_FROM_NVMRC}\"; then\n        return $?\n      fi\n\n      local NVM_VERSION_DIR\n      NVM_VERSION_DIR=\"$(nvm_version_path \"${VERSION}\")\"\n\n      # Change current version\n      PATH=\"$(nvm_change_path \"${PATH}\" \"/bin\" \"${NVM_VERSION_DIR}\")\"\n      if nvm_has manpath; then\n        if [ -z \"${MANPATH-}\" ]; then\n          local MANPATH\n          MANPATH=$(manpath)\n        fi\n        # Change current version\n        MANPATH=\"$(nvm_change_path \"${MANPATH}\" \"/share/man\" \"${NVM_VERSION_DIR}\")\"\n        export MANPATH\n      fi\n      export PATH\n      \\hash -r\n      export NVM_BIN=\"${NVM_VERSION_DIR}/bin\"\n      export NVM_INC=\"${NVM_VERSION_DIR}/include/node\"\n      if [ \"${NVM_SYMLINK_CURRENT-}\" = true ]; then\n        command rm -f \"${NVM_DIR}/current\" && ln -s \"${NVM_VERSION_DIR}\" \"${NVM_DIR}/current\"\n      fi\n      local NVM_USE_OUTPUT\n      NVM_USE_OUTPUT=''\n      if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n        if nvm_is_iojs_version \"${VERSION}\"; then\n          NVM_USE_OUTPUT=\"Now using io.js $(nvm_strip_iojs_prefix \"${VERSION}\")$(nvm_print_npm_version)\"\n        else\n          NVM_USE_OUTPUT=\"Now using node ${VERSION}$(nvm_print_npm_version)\"\n        fi\n      fi\n      if [ \"_${VERSION}\" != \"_system\" ]; then\n        local NVM_USE_CMD\n        NVM_USE_CMD=\"nvm use --delete-prefix\"\n        if [ -n \"${PROVIDED_VERSION}\" ]; then\n          NVM_USE_CMD=\"${NVM_USE_CMD} ${VERSION}\"\n        fi\n        if [ \"${NVM_SILENT:-0}\" -eq 1 ]; then\n          NVM_USE_CMD=\"${NVM_USE_CMD} --silent\"\n        fi\n        if ! nvm_die_on_prefix \"${NVM_DELETE_PREFIX}\" \"${NVM_USE_CMD}\" \"${NVM_VERSION_DIR}\"; then\n          return 11\n        fi\n      fi\n      if [ -n \"${NVM_USE_OUTPUT-}\" ] && [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n        nvm_echo \"${NVM_USE_OUTPUT}\"\n      fi\n    ;;\n    \"run\")\n      local provided_version\n      local has_checked_nvmrc\n      has_checked_nvmrc=0\n      local IS_VERSION_FROM_NVMRC\n      IS_VERSION_FROM_NVMRC=0\n      # run given version of node\n\n      local NVM_SILENT\n      local NVM_SILENT_ARG\n      local NVM_LTS\n      while [ $# -gt 0 ]; do\n        case \"$1\" in\n          --silent)\n            NVM_SILENT=1\n            NVM_SILENT_ARG='--silent'\n            shift\n          ;;\n          --lts) NVM_LTS='*' ; shift ;;\n          --lts=*) NVM_LTS=\"${1##--lts=}\" ; shift ;;\n          *)\n            if [ -n \"$1\" ]; then\n              break\n            else\n              shift\n            fi\n          ;; # stop processing arguments\n        esac\n      done\n\n      if [ $# -lt 1 ] && [ -z \"${NVM_LTS-}\" ]; then\n        NVM_SILENT=\"${NVM_SILENT:-0}\" nvm_rc_version && has_checked_nvmrc=1\n        if [ -n \"${NVM_RC_VERSION-}\" ]; then\n          VERSION=\"$(nvm_version \"${NVM_RC_VERSION-}\")\" ||:\n        fi\n        unset NVM_RC_VERSION\n        if [ \"${VERSION:-N/A}\" = 'N/A' ]; then\n          >&2 nvm --help\n          return 127\n        fi\n      fi\n\n      if [ -z \"${NVM_LTS-}\" ]; then\n        provided_version=\"$1\"\n        if [ -n \"${provided_version}\" ]; then\n          VERSION=\"$(nvm_version \"${provided_version}\")\" ||:\n          if [ \"_${VERSION:-N/A}\" = '_N/A' ] && ! nvm_is_valid_version \"${provided_version}\"; then\n            provided_version=''\n            if [ $has_checked_nvmrc -ne 1 ]; then\n              NVM_SILENT=\"${NVM_SILENT:-0}\" nvm_rc_version && has_checked_nvmrc=1\n            fi\n            provided_version=\"${NVM_RC_VERSION}\"\n            IS_VERSION_FROM_NVMRC=1\n            VERSION=\"$(nvm_version \"${NVM_RC_VERSION}\")\" ||:\n            unset NVM_RC_VERSION\n          else\n            shift\n          fi\n        fi\n      fi\n\n      local NVM_IOJS\n      if nvm_is_iojs_version \"${VERSION}\"; then\n        NVM_IOJS=true\n      fi\n\n      local EXIT_CODE\n\n      nvm_is_zsh && setopt local_options shwordsplit\n      local LTS_ARG\n      if [ -n \"${NVM_LTS-}\" ]; then\n        LTS_ARG=\"--lts=${NVM_LTS-}\"\n        VERSION=''\n      fi\n      if [ \"_${VERSION}\" = \"_N/A\" ]; then\n        nvm_ensure_version_installed \"${provided_version}\" \"${IS_VERSION_FROM_NVMRC}\"\n      elif [ \"${NVM_IOJS}\" = true ]; then\n        nvm exec \"${NVM_SILENT_ARG-}\" \"${LTS_ARG-}\" \"${VERSION}\" iojs \"$@\"\n      else\n        nvm exec \"${NVM_SILENT_ARG-}\" \"${LTS_ARG-}\" \"${VERSION}\" node \"$@\"\n      fi\n      EXIT_CODE=\"$?\"\n      return $EXIT_CODE\n    ;;\n    \"exec\")\n      local NVM_SILENT\n      local NVM_LTS\n      while [ $# -gt 0 ]; do\n        case \"$1\" in\n          --silent) NVM_SILENT=1 ; shift ;;\n          --lts) NVM_LTS='*' ; shift ;;\n          --lts=*) NVM_LTS=\"${1##--lts=}\" ; shift ;;\n          --) break ;;\n          --*)\n            nvm_err \"Unsupported option \\\"$1\\\".\"\n            return 55\n          ;;\n          *)\n            if [ -n \"$1\" ]; then\n              break\n            else\n              shift\n            fi\n          ;; # stop processing arguments\n        esac\n      done\n\n      local provided_version\n      provided_version=\"$1\"\n      if [ \"${NVM_LTS-}\" != '' ]; then\n        provided_version=\"lts/${NVM_LTS:-*}\"\n        VERSION=\"${provided_version}\"\n      elif [ -n \"${provided_version}\" ]; then\n        VERSION=\"$(nvm_version \"${provided_version}\")\" ||:\n        if [ \"_${VERSION}\" = '_N/A' ] && ! nvm_is_valid_version \"${provided_version}\"; then\n          NVM_SILENT=\"${NVM_SILENT:-0}\" nvm_rc_version && has_checked_nvmrc=1\n          provided_version=\"${NVM_RC_VERSION}\"\n          unset NVM_RC_VERSION\n          VERSION=\"$(nvm_version \"${provided_version}\")\" ||:\n        else\n          shift\n        fi\n      fi\n\n      nvm_ensure_version_installed \"${provided_version}\"\n      EXIT_CODE=$?\n      if [ \"${EXIT_CODE}\" != \"0\" ]; then\n        # shellcheck disable=SC2086\n        return $EXIT_CODE\n      fi\n\n      if [ \"${NVM_SILENT:-0}\" -ne 1 ]; then\n        if [ \"${NVM_LTS-}\" = '*' ]; then\n          nvm_echo \"Running node latest LTS -> $(nvm_version \"${VERSION}\")$(nvm use --silent \"${VERSION}\" && nvm_print_npm_version)\"\n        elif [ -n \"${NVM_LTS-}\" ]; then\n          nvm_echo \"Running node LTS \\\"${NVM_LTS-}\\\" -> $(nvm_version \"${VERSION}\")$(nvm use --silent \"${VERSION}\" && nvm_print_npm_version)\"\n        elif nvm_is_iojs_version \"${VERSION}\"; then\n          nvm_echo \"Running io.js $(nvm_strip_iojs_prefix \"${VERSION}\")$(nvm use --silent \"${VERSION}\" && nvm_print_npm_version)\"\n        else\n          nvm_echo \"Running node ${VERSION}$(nvm use --silent \"${VERSION}\" && nvm_print_npm_version)\"\n        fi\n      fi\n      NODE_VERSION=\"${VERSION}\" \"${NVM_DIR}/nvm-exec\" \"$@\"\n    ;;\n    \"ls\" | \"list\")\n      local PATTERN\n      local NVM_NO_COLORS\n      local NVM_NO_ALIAS\n\n      while [ $# -gt 0 ]; do\n        case \"${1}\" in\n          --) ;;\n          --no-colors) NVM_NO_COLORS=\"${1}\" ;;\n          --no-alias) NVM_NO_ALIAS=\"${1}\" ;;\n          --*)\n            nvm_err \"Unsupported option \\\"${1}\\\".\"\n            return 55\n          ;;\n          *)\n            PATTERN=\"${PATTERN:-$1}\"\n          ;;\n        esac\n        shift\n      done\n      if [ -n \"${PATTERN-}\" ] && [ -n \"${NVM_NO_ALIAS-}\" ]; then\n        nvm_err '`--no-alias` is not supported when a pattern is provided.'\n        return 55\n      fi\n      local NVM_LS_OUTPUT\n      local NVM_LS_EXIT_CODE\n      NVM_LS_OUTPUT=$(nvm_ls \"${PATTERN-}\")\n      NVM_LS_EXIT_CODE=$?\n      NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" nvm_print_versions \"${NVM_LS_OUTPUT}\"\n      if [ -z \"${NVM_NO_ALIAS-}\" ] && [ -z \"${PATTERN-}\" ]; then\n        if [ -n \"${NVM_NO_COLORS-}\" ]; then\n          nvm alias --no-colors\n        else\n          nvm alias\n        fi\n      fi\n      return $NVM_LS_EXIT_CODE\n    ;;\n    \"ls-remote\" | \"list-remote\")\n      local NVM_LTS\n      local PATTERN\n      local NVM_NO_COLORS\n\n      while [ $# -gt 0 ]; do\n        case \"${1-}\" in\n          --) ;;\n          --lts)\n            NVM_LTS='*'\n          ;;\n          --lts=*)\n            NVM_LTS=\"${1##--lts=}\"\n          ;;\n          --no-colors) NVM_NO_COLORS=\"${1}\" ;;\n          --*)\n            nvm_err \"Unsupported option \\\"${1}\\\".\"\n            return 55\n          ;;\n          *)\n            if [ -z \"${PATTERN-}\" ]; then\n              PATTERN=\"${1-}\"\n              if [ -z \"${NVM_LTS-}\" ]; then\n                case \"${PATTERN}\" in\n                  'lts/*')\n                    NVM_LTS='*'\n                    PATTERN=''\n                  ;;\n                  lts/*)\n                    NVM_LTS=\"${PATTERN##lts/}\"\n                    PATTERN=''\n                  ;;\n                esac\n              fi\n            fi\n          ;;\n        esac\n        shift\n      done\n\n      local NVM_OUTPUT\n      local EXIT_CODE\n      NVM_OUTPUT=\"$(NVM_LTS=\"${NVM_LTS-}\" nvm_remote_versions \"${PATTERN}\" &&:)\"\n      EXIT_CODE=$?\n      if [ -n \"${NVM_OUTPUT}\" ]; then\n        NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" nvm_print_versions \"${NVM_OUTPUT}\"\n        return $EXIT_CODE\n      fi\n      NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" nvm_print_versions \"N/A\"\n      return 3\n    ;;\n    \"current\")\n      nvm_version current\n    ;;\n    \"which\")\n      local NVM_SILENT\n      local provided_version\n      while [ $# -ne 0 ]; do\n        case \"${1}\" in\n          --silent) NVM_SILENT=1 ;;\n          --) ;;\n          *) provided_version=\"${1-}\" ;;\n        esac\n        shift\n      done\n      if [ -z \"${provided_version-}\" ]; then\n        NVM_SILENT=\"${NVM_SILENT:-0}\" nvm_rc_version\n        if [ -n \"${NVM_RC_VERSION}\" ]; then\n          provided_version=\"${NVM_RC_VERSION}\"\n          VERSION=$(nvm_version \"${NVM_RC_VERSION}\") ||:\n        fi\n        unset NVM_RC_VERSION\n      elif [ \"${provided_version}\" != 'system' ]; then\n        VERSION=\"$(nvm_version \"${provided_version}\")\" ||:\n      else\n        VERSION=\"${provided_version-}\"\n      fi\n      if [ -z \"${VERSION}\" ]; then\n        >&2 nvm --help\n        return 127\n      fi\n\n      if [ \"_${VERSION}\" = '_system' ]; then\n        if nvm_has_system_iojs >/dev/null 2>&1 || nvm_has_system_node >/dev/null 2>&1; then\n          local NVM_BIN\n          NVM_BIN=\"$(nvm use system >/dev/null 2>&1 && command which node)\"\n          if [ -n \"${NVM_BIN}\" ]; then\n            nvm_echo \"${NVM_BIN}\"\n            return\n          fi\n          return 1\n        fi\n        nvm_err 'System version of node not found.'\n        return 127\n      elif [ \"${VERSION}\" = '∞' ]; then\n        nvm_err \"The alias \\\"${2}\\\" leads to an infinite loop. Aborting.\"\n        return 8\n      fi\n\n      nvm_ensure_version_installed \"${provided_version}\"\n      EXIT_CODE=$?\n      if [ \"${EXIT_CODE}\" != \"0\" ]; then\n        # shellcheck disable=SC2086\n        return $EXIT_CODE\n      fi\n      local NVM_VERSION_DIR\n      NVM_VERSION_DIR=\"$(nvm_version_path \"${VERSION}\")\"\n      nvm_echo \"${NVM_VERSION_DIR}/bin/node\"\n    ;;\n    \"alias\")\n      local NVM_ALIAS_DIR\n      NVM_ALIAS_DIR=\"$(nvm_alias_path)\"\n      local NVM_CURRENT\n      NVM_CURRENT=\"$(nvm_ls_current)\"\n\n      command mkdir -p \"${NVM_ALIAS_DIR}/lts\"\n\n      local ALIAS\n      local TARGET\n      local NVM_NO_COLORS\n      ALIAS='--'\n      TARGET='--'\n\n      while [ $# -gt 0 ]; do\n        case \"${1-}\" in\n          --) ;;\n          --no-colors) NVM_NO_COLORS=\"${1}\" ;;\n          --*)\n            nvm_err \"Unsupported option \\\"${1}\\\".\"\n            return 55\n          ;;\n          *)\n            if [ \"${ALIAS}\" = '--' ]; then\n              ALIAS=\"${1-}\"\n            elif [ \"${TARGET}\" = '--' ]; then\n              TARGET=\"${1-}\"\n            fi\n          ;;\n        esac\n        shift\n      done\n\n      if [ -z \"${TARGET}\" ]; then\n        # for some reason the empty string was explicitly passed as the target\n        # so, unalias it.\n        nvm unalias \"${ALIAS}\"\n        return $?\n      elif echo \"${ALIAS}\" | grep -q \"#\"; then\n        nvm_err 'Aliases with a comment delimiter (#) are not supported.'\n        return 1\n      elif [ \"${TARGET}\" != '--' ]; then\n        # a target was passed: create an alias\n        if [ \"${ALIAS#*\\/}\" != \"${ALIAS}\" ]; then\n          nvm_err 'Aliases in subdirectories are not supported.'\n          return 1\n        fi\n        VERSION=\"$(nvm_version \"${TARGET}\")\" ||:\n        if [ \"${VERSION}\" = 'N/A' ]; then\n          nvm_err \"! WARNING: Version '${TARGET}' does not exist.\"\n        fi\n        nvm_make_alias \"${ALIAS}\" \"${TARGET}\"\n        NVM_NO_COLORS=\"${NVM_NO_COLORS-}\" NVM_CURRENT=\"${NVM_CURRENT-}\" DEFAULT=false nvm_print_formatted_alias \"${ALIAS}\" \"${TARGET}\" \"${VERSION}\"\n      else\n        if [ \"${ALIAS-}\" = '--' ]; then\n          unset ALIAS\n        fi\n\n        nvm_list_aliases \"${ALIAS-}\"\n      fi\n    ;;\n    \"unalias\")\n      local NVM_ALIAS_DIR\n      NVM_ALIAS_DIR=\"$(nvm_alias_path)\"\n      command mkdir -p \"${NVM_ALIAS_DIR}\"\n      if [ $# -ne 1 ]; then\n        >&2 nvm --help\n        return 127\n      fi\n      if [ \"${1#*\\/}\" != \"${1-}\" ]; then\n        nvm_err 'Aliases in subdirectories are not supported.'\n        return 1\n      fi\n\n      local NVM_IOJS_PREFIX\n      local NVM_NODE_PREFIX\n      NVM_IOJS_PREFIX=\"$(nvm_iojs_prefix)\"\n      NVM_NODE_PREFIX=\"$(nvm_node_prefix)\"\n      local NVM_ALIAS_EXISTS\n      NVM_ALIAS_EXISTS=0\n      if [ -f \"${NVM_ALIAS_DIR}/${1-}\" ]; then\n        NVM_ALIAS_EXISTS=1\n      fi\n\n      if [ $NVM_ALIAS_EXISTS -eq 0 ]; then\n        case \"$1\" in\n          \"stable\" | \"unstable\" | \"${NVM_IOJS_PREFIX}\" | \"${NVM_NODE_PREFIX}\" | \"system\")\n            nvm_err \"${1-} is a default (built-in) alias and cannot be deleted.\"\n            return 1\n          ;;\n        esac\n\n        nvm_err \"Alias ${1-} doesn't exist!\"\n        return\n      fi\n\n      local NVM_ALIAS_ORIGINAL\n      NVM_ALIAS_ORIGINAL=\"$(nvm_alias \"${1}\")\"\n      command rm -f \"${NVM_ALIAS_DIR}/${1}\"\n      nvm_echo \"Deleted alias ${1} - restore it with \\`nvm alias \\\"${1}\\\" \\\"${NVM_ALIAS_ORIGINAL}\\\"\\`\"\n    ;;\n    \"install-latest-npm\")\n      if [ $# -ne 0 ]; then\n        >&2 nvm --help\n        return 127\n      fi\n\n      nvm_install_latest_npm\n    ;;\n    \"reinstall-packages\" | \"copy-packages\")\n      if [ $# -ne 1 ]; then\n        >&2 nvm --help\n        return 127\n      fi\n\n      local PROVIDED_VERSION\n      PROVIDED_VERSION=\"${1-}\"\n\n      if [ \"${PROVIDED_VERSION}\" = \"$(nvm_ls_current)\" ] || [ \"$(nvm_version \"${PROVIDED_VERSION}\" ||:)\" = \"$(nvm_ls_current)\" ]; then\n        nvm_err 'Can not reinstall packages from the current version of node.'\n        return 2\n      fi\n\n      local VERSION\n      if [ \"_${PROVIDED_VERSION}\" = \"_system\" ]; then\n        if ! nvm_has_system_node && ! nvm_has_system_iojs; then\n          nvm_err 'No system version of node or io.js detected.'\n          return 3\n        fi\n        VERSION=\"system\"\n      else\n        VERSION=\"$(nvm_version \"${PROVIDED_VERSION}\")\" ||:\n      fi\n\n      local NPMLIST\n      NPMLIST=\"$(nvm_npm_global_modules \"${VERSION}\")\"\n      local INSTALLS\n      local LINKS\n      INSTALLS=\"${NPMLIST%% //// *}\"\n      LINKS=\"${NPMLIST##* //// }\"\n\n      nvm_echo \"Reinstalling global packages from ${VERSION}...\"\n      if [ -n \"${INSTALLS}\" ]; then\n        nvm_echo \"${INSTALLS}\" | command xargs npm install -g --quiet\n      else\n        nvm_echo \"No installed global packages found...\"\n      fi\n\n      nvm_echo \"Linking global packages from ${VERSION}...\"\n      if [ -n \"${LINKS}\" ]; then\n        (\n          set -f; IFS='\n' # necessary to turn off variable expansion except for newlines\n          for LINK in ${LINKS}; do\n            set +f; unset IFS # restore variable expansion\n            if [ -n \"${LINK}\" ]; then\n              case \"${LINK}\" in\n                '/'*) (nvm_cd \"${LINK}\" && npm link) ;;\n                *) (nvm_cd \"$(npm root -g)/../${LINK}\" && npm link)\n              esac\n            fi\n          done\n        )\n      else\n        nvm_echo \"No linked global packages found...\"\n      fi\n    ;;\n    \"clear-cache\")\n      command rm -f \"${NVM_DIR}/v*\" \"$(nvm_version_dir)\" 2>/dev/null\n      nvm_echo 'nvm cache cleared.'\n    ;;\n    \"version\")\n      nvm_version \"${1}\"\n    ;;\n    \"version-remote\")\n      local NVM_LTS\n      local PATTERN\n      while [ $# -gt 0 ]; do\n        case \"${1-}\" in\n          --) ;;\n          --lts)\n            NVM_LTS='*'\n          ;;\n          --lts=*)\n            NVM_LTS=\"${1##--lts=}\"\n          ;;\n          --*)\n            nvm_err \"Unsupported option \\\"${1}\\\".\"\n            return 55\n          ;;\n          *)\n            PATTERN=\"${PATTERN:-${1}}\"\n          ;;\n        esac\n        shift\n      done\n      case \"${PATTERN-}\" in\n        'lts/*')\n          NVM_LTS='*'\n          unset PATTERN\n        ;;\n        lts/*)\n          NVM_LTS=\"${PATTERN##lts/}\"\n          unset PATTERN\n        ;;\n      esac\n      NVM_VERSION_ONLY=true NVM_LTS=\"${NVM_LTS-}\" nvm_remote_version \"${PATTERN:-node}\"\n    ;;\n    \"--version\" | \"-v\")\n      nvm_echo '0.40.1'\n    ;;\n    \"unload\")\n      nvm deactivate >/dev/null 2>&1\n      unset -f nvm \\\n        nvm_iojs_prefix nvm_node_prefix \\\n        nvm_add_iojs_prefix nvm_strip_iojs_prefix \\\n        nvm_is_iojs_version nvm_is_alias nvm_has_non_aliased \\\n        nvm_ls_remote nvm_ls_remote_iojs nvm_ls_remote_index_tab \\\n        nvm_ls nvm_remote_version nvm_remote_versions \\\n        nvm_install_binary nvm_install_source nvm_clang_version \\\n        nvm_get_mirror nvm_get_download_slug nvm_download_artifact \\\n        nvm_install_npm_if_needed nvm_use_if_needed nvm_check_file_permissions \\\n        nvm_print_versions nvm_compute_checksum \\\n        nvm_get_checksum_binary \\\n        nvm_get_checksum_alg nvm_get_checksum nvm_compare_checksum \\\n        nvm_version nvm_rc_version nvm_match_version \\\n        nvm_ensure_default_set nvm_get_arch nvm_get_os \\\n        nvm_print_implicit_alias nvm_validate_implicit_alias \\\n        nvm_resolve_alias nvm_ls_current nvm_alias \\\n        nvm_binary_available nvm_change_path nvm_strip_path \\\n        nvm_num_version_groups nvm_format_version nvm_ensure_version_prefix \\\n        nvm_normalize_version nvm_is_valid_version nvm_normalize_lts \\\n        nvm_ensure_version_installed nvm_cache_dir \\\n        nvm_version_path nvm_alias_path nvm_version_dir \\\n        nvm_find_nvmrc nvm_find_up nvm_find_project_dir nvm_tree_contains_path \\\n        nvm_version_greater nvm_version_greater_than_or_equal_to \\\n        nvm_print_npm_version nvm_install_latest_npm nvm_npm_global_modules \\\n        nvm_has_system_node nvm_has_system_iojs \\\n        nvm_download nvm_get_latest nvm_has nvm_install_default_packages nvm_get_default_packages \\\n        nvm_curl_use_compression nvm_curl_version \\\n        nvm_auto nvm_supports_xz \\\n        nvm_echo nvm_err nvm_grep nvm_cd \\\n        nvm_die_on_prefix nvm_get_make_jobs nvm_get_minor_version \\\n        nvm_has_solaris_binary nvm_is_merged_node_version \\\n        nvm_is_natural_num nvm_is_version_installed \\\n        nvm_list_aliases nvm_make_alias nvm_print_alias_path \\\n        nvm_print_default_alias nvm_print_formatted_alias nvm_resolve_local_alias \\\n        nvm_sanitize_path nvm_has_colors nvm_process_parameters \\\n        nvm_node_version_has_solaris_binary nvm_iojs_version_has_solaris_binary \\\n        nvm_curl_libz_support nvm_command_info nvm_is_zsh nvm_stdout_is_terminal \\\n        nvm_npmrc_bad_news_bears nvm_sanitize_auth_header \\\n        nvm_get_colors nvm_set_colors nvm_print_color_code nvm_wrap_with_color_code nvm_format_help_message_colors \\\n        nvm_echo_with_colors nvm_err_with_colors \\\n        nvm_get_artifact_compression nvm_install_binary_extract nvm_extract_tarball \\\n        nvm_process_nvmrc nvm_nvmrc_invalid_msg \\\n        nvm_write_nvmrc \\\n        >/dev/null 2>&1\n      unset NVM_RC_VERSION NVM_NODEJS_ORG_MIRROR NVM_IOJS_ORG_MIRROR NVM_DIR \\\n        NVM_CD_FLAGS NVM_BIN NVM_INC NVM_MAKE_JOBS \\\n        NVM_COLORS INSTALLED_COLOR SYSTEM_COLOR \\\n        CURRENT_COLOR NOT_INSTALLED_COLOR DEFAULT_COLOR LTS_COLOR \\\n        >/dev/null 2>&1\n    ;;\n    \"set-colors\")\n      local EXIT_CODE\n      nvm_set_colors \"${1-}\"\n      EXIT_CODE=$?\n      if [ \"$EXIT_CODE\" -eq 17 ]; then\n        >&2 nvm --help\n        nvm_echo\n        nvm_err_with_colors \"\\033[1;37mPlease pass in five \\033[1;31mvalid color codes\\033[1;37m. Choose from: rRgGbBcCyYmMkKeW\\033[0m\"\n      fi\n    ;;\n    *)\n      >&2 nvm --help\n      return 127\n    ;;\n  esac\n}\n\nnvm_get_default_packages() {\n  local NVM_DEFAULT_PACKAGE_FILE\n  NVM_DEFAULT_PACKAGE_FILE=\"${NVM_DIR}/default-packages\"\n  if [ -f \"${NVM_DEFAULT_PACKAGE_FILE}\" ]; then\n    command awk -v filename=\"${NVM_DEFAULT_PACKAGE_FILE}\" '\n      /^[[:space:]]*#/ { next }                     # Skip lines that begin with #\n      /^[[:space:]]*$/ { next }                     # Skip empty lines\n      /[[:space:]]/ && !/^[[:space:]]*#/ {\n        print \"Only one package per line is allowed in `\" filename \"`. Please remove any lines with multiple space-separated values.\" > \"/dev/stderr\"\n        err = 1\n        exit 1\n      }\n      {\n        if (NR > 1 && !prev_space) printf \" \"\n        printf \"%s\", $0\n        prev_space = 0\n      }\n    ' \"${NVM_DEFAULT_PACKAGE_FILE}\"\n  fi\n}\n\nnvm_install_default_packages() {\n  local DEFAULT_PACKAGES\n  DEFAULT_PACKAGES=\"$(nvm_get_default_packages)\"\n  EXIT_CODE=$?\n  if [ $EXIT_CODE -ne 0 ] || [ -z \"${DEFAULT_PACKAGES}\" ]; then\n    return $EXIT_CODE\n  fi\n  nvm_echo \"Installing default global packages from ${NVM_DIR}/default-packages...\"\n  nvm_echo \"npm install -g --quiet ${DEFAULT_PACKAGES}\"\n\n  if ! nvm_echo \"${DEFAULT_PACKAGES}\" | command xargs npm install -g --quiet; then\n    nvm_err \"Failed installing default packages. Please check if your default-packages file or a package in it has problems!\"\n    return 1\n  fi\n}\n\nnvm_supports_xz() {\n  if [ -z \"${1-}\" ]; then\n    return 1\n  fi\n\n  local NVM_OS\n  NVM_OS=\"$(nvm_get_os)\"\n  if [ \"_${NVM_OS}\" = '_darwin' ]; then\n    local MACOS_VERSION\n    MACOS_VERSION=\"$(sw_vers -productVersion)\"\n    if nvm_version_greater \"10.9.0\" \"${MACOS_VERSION}\"; then\n      # macOS 10.8 and earlier doesn't support extracting xz-compressed tarballs with tar\n      return 1\n    fi\n  elif [ \"_${NVM_OS}\" = '_freebsd' ]; then\n    if ! [ -e '/usr/lib/liblzma.so' ]; then\n      # FreeBSD without /usr/lib/liblzma.so doesn't support extracting xz-compressed tarballs with tar\n      return 1\n    fi\n  else\n    if ! command which xz >/dev/null 2>&1; then\n      # Most OSes without xz on the PATH don't support extracting xz-compressed tarballs with tar\n      # (Should correctly handle Linux, SmartOS, maybe more)\n      return 1\n    fi\n  fi\n\n  # all node versions v4.0.0 and later have xz\n  if nvm_is_merged_node_version \"${1}\"; then\n    return 0\n  fi\n\n  # 0.12x: node v0.12.10 and later have xz\n  if nvm_version_greater_than_or_equal_to \"${1}\" \"0.12.10\" && nvm_version_greater \"0.13.0\" \"${1}\"; then\n    return 0\n  fi\n\n  # 0.10x: node v0.10.42 and later have xz\n  if nvm_version_greater_than_or_equal_to \"${1}\" \"0.10.42\" && nvm_version_greater \"0.11.0\" \"${1}\"; then\n    return 0\n  fi\n\n  case \"${NVM_OS}\" in\n    darwin)\n      # darwin only has xz for io.js v2.3.2 and later\n      nvm_version_greater_than_or_equal_to \"${1}\" \"2.3.2\"\n    ;;\n    *)\n      nvm_version_greater_than_or_equal_to \"${1}\" \"1.0.0\"\n    ;;\n  esac\n  return $?\n}\n\nnvm_auto() {\n  local NVM_MODE\n  NVM_MODE=\"${1-}\"\n\n  case \"${NVM_MODE}\" in\n    none) return 0 ;;\n    use)\n      local VERSION\n      local NVM_CURRENT\n      NVM_CURRENT=\"$(nvm_ls_current)\"\n      if [ \"_${NVM_CURRENT}\" = '_none' ] || [ \"_${NVM_CURRENT}\" = '_system' ]; then\n        VERSION=\"$(nvm_resolve_local_alias default 2>/dev/null || nvm_echo)\"\n        if [ -n \"${VERSION}\" ]; then\n          if [ \"_${VERSION}\" != '_N/A' ] && nvm_is_valid_version \"${VERSION}\"; then\n            nvm use --silent \"${VERSION}\" >/dev/null\n          else\n            return 0\n          fi\n        elif nvm_rc_version >/dev/null 2>&1; then\n          nvm use --silent >/dev/null\n        fi\n      else\n        nvm use --silent \"${NVM_CURRENT}\" >/dev/null\n      fi\n    ;;\n    install)\n      local VERSION\n      VERSION=\"$(nvm_alias default 2>/dev/null || nvm_echo)\"\n      if [ -n \"${VERSION}\" ] && [ \"_${VERSION}\" != '_N/A' ] && nvm_is_valid_version \"${VERSION}\"; then\n        nvm install \"${VERSION}\" >/dev/null\n      elif nvm_rc_version >/dev/null 2>&1; then\n        nvm install >/dev/null\n      else\n        return 0\n      fi\n    ;;\n    *)\n      nvm_err 'Invalid auto mode supplied.'\n      return 1\n    ;;\n  esac\n}\n\nnvm_process_parameters() {\n  local NVM_AUTO_MODE\n  NVM_AUTO_MODE='use'\n  while [ \"$#\" -ne 0 ]; do\n    case \"$1\" in\n      --install) NVM_AUTO_MODE='install' ;;\n      --no-use) NVM_AUTO_MODE='none' ;;\n    esac\n    shift\n  done\n  nvm_auto \"${NVM_AUTO_MODE}\"\n}\n\nnvm_process_parameters \"$@\"\n\n} # this ensures the entire script is downloaded #\n"
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 2.8564453125,
          "content": "{\n  \"name\": \"nvm\",\n  \"version\": \"0.40.1\",\n  \"description\": \"Node Version Manager - Simple bash script to manage multiple active node.js versions\",\n  \"directories\": {\n    \"test\": \"test\"\n  },\n  \"scripts\": {\n    \"test\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make test-$shell\",\n    \"test/fast\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); env -i TERM=\\\"$TERM\\\" bash -lc \\\"make TEST_SUITE=fast test-$shell\\\"\",\n    \"test/slow\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make TEST_SUITE=slow test-$shell\",\n    \"test/install_script\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make TEST_SUITE=install_script test-$shell\",\n    \"test/installation\": \"npm run --silent test/installation/node && npm run --silent test/installation/iojs\",\n    \"test/installation/node\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make TEST_SUITE=installation_node test-$shell\",\n    \"test/installation/iojs\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make TEST_SUITE=installation_iojs test-$shell\",\n    \"test/sourcing\": \"shell=$(basename -- $(ps -o comm= $(ps -o ppid= -p $PPID)) | sed 's/^-//'); make TEST_SUITE=sourcing test-$shell\",\n    \"test:check-exec\": \"(IFS=$'\\\\n'; for file in $(git ls-files test); do if [ ! -x \\\"$file\\\" ] && [[ \\\"$file\\\" != *.* ]] && [[ \\\"$file\\\" != test/fixtures/* ]]; then echo \\\"$file\\\"; fi; done) | tee /dev/stderr | awk 'END {if (NR > 0) exit 1}'\",\n    \"test:check-nonexec\": \"(IFS=$'\\\\n'; for file in $(git ls-files test); do if [ -x \\\"$file\\\" ] && [ ! -d \\\"$file\\\" ] && { [[ \\\"$file\\\" =~ '\\\\.(json|txt|sh|js|log)$' ]] || [[ \\\"$file\\\" =~ '^test/(mocks|fixtures)/.*' ]]; }; then echo \\\"$file\\\"; fi; done) | tee /dev/stderr | awk 'END {if (NR > 0) exit 1}'\",\n    \"doctoc\": \"doctoc --title='## Table of Contents' --github README.md\",\n    \"predoctoc:check\": \"cp README.md v-README.md.orig && npm run doctoc\",\n    \"doctoc:check\": \"diff -q README.md v-README.md.orig\",\n    \"postdoctoc:check\": \"mv v-README.md.orig README.md\",\n    \"eclint\": \"eclint check $(git ls-tree --name-only HEAD | xargs)\",\n    \"dockerfile_lint\": \"dockerfile_lint\",\n    \"markdown-link-check\": \"git ls-files | command grep -E '\\\\.md$' | xargs -n 1 markdown-link-check -p\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/nvm-sh/nvm.git\"\n  },\n  \"keywords\": [\n    \"nvm\",\n    \"node\",\n    \"iojs\",\n    \"version\",\n    \"manager\"\n  ],\n  \"author\": \"Tim Caswell <tim@creationix.com>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/nvm-sh/nvm/issues\"\n  },\n  \"homepage\": \"https://github.com/nvm-sh/nvm\",\n  \"devDependencies\": {\n    \"dockerfile_lint\": \"^0.3.4\",\n    \"doctoc\": \"^2.2.1\",\n    \"eclint\": \"^2.8.1\",\n    \"markdown-link-check\": \"^3.12.2\",\n    \"replace\": \"^1.2.2\",\n    \"semver\": \"^7.6.3\",\n    \"urchin\": \"^0.0.5\"\n  }\n}\n"
        },
        {
          "name": "rename_test.sh",
          "type": "blob",
          "size": 1.2060546875,
          "content": "#! /usr/bin/env bash\n\nfind_name(){\n  find test -name \"*[\\\\/:\\*\\?\\\"<>\\|]*\" -o -name \"*.\"\n}\n\ncheck_name() {\n  if [ \"$(find_name | wc -l)\" != \"0\" ]; then\n    printf '%s\\n\\n' \"The following filenames contain unwanted characters:\"\n    find_name\n    printf '\\n%s\\n%s\\n' \"Please run ./rename_test.sh\" \"If the problem persist, please open an issue.\"\n    exit 1\n  else\n    echo \"Ok\"\n  fi\n}\n\nrename_test() {\n  local filename\n  local new_filename\n  while read -r filename; do\n    # Even though it looks < and > are replaced by the same < and >, the latters are not ASCII code\n    # If you check with 'cat -v rename_test.sh' you would see 's/</M-KM-^B/g' and 's/>/M-KM-^C/g'\n    # M-KM-^B -> U+02C2\n    # M-KM-^C -> U+02C3\n    new_filename=$(echo \"$filename\" | sed -r \\\n      -e \"s/\\\"/'/g\" \\\n      -e 's/</˂/g' \\\n      -e 's/>/˃/g' \\\n      -e 's/^(.*)\\.$/\\1/'\n      )\n    printf '%s\\n%s\\n\\n' \"$filename\" \"$new_filename\"\n    [ \"$filename\" != \"$new_filename\" ] && git mv \"$filename\" \"$new_filename\"\n  done < <(find_name)\n\n  if [ \"$(find_name | wc -l)\" != \"0\" ]; then\n    echo \"Still some files to treat:\"\n    find_name\n  else\n    echo \"Done\"\n  fi\n}\n\nmain() {\n  if [ \"$1\" = \"--check\" ]; then\n    check_name\n  else\n    rename_test\n  fi\n}\n\nmain \"$@\"\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "update_test_mocks.sh",
          "type": "blob",
          "size": 2.419921875,
          "content": "#!/usr/bin/env bash\n\nset -e\n\necho 'Updating test mocks...'\n\nMOCKS_DIR=\"$PWD/test/fast/Unit tests/mocks\"\n\necho \"creating $MOCKS_DIR\"\nmkdir -p \"$MOCKS_DIR\"\n\n\\. \"$NVM_DIR/nvm.sh\" --no-use\nnvm deactivate 2> /dev/null\nnvm_is_version_installed() {\n  return 1\n}\n\nnvm_make_alias() {\n  # prevent local alias creation\n  return 0\n}\n\nnvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote.txt\"\nnvm_ls_remote_iojs > \"$MOCKS_DIR/nvm_ls_remote_iojs.txt\"\nNVM_LTS=* nvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote LTS.txt\"\nNVM_LTS=argon nvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote LTS argon.txt\"\nnvm_download -L -s \"https://nodejs.org/download/nightly/index.tab\" -o - > \"$MOCKS_DIR/nodejs.org-download-nightly-index.tab\"\nnvm_download -L -s \"$(nvm_get_mirror iojs std)/index.tab\" -o - > \"$MOCKS_DIR/iojs.org-dist-index.tab\"\nNVM_COLORS=0ygre nvm ls-remote > \"$MOCKS_DIR/nvm ls-remote.txt\"\nNVM_COLORS=0ygre nvm ls-remote --lts > \"$MOCKS_DIR/nvm ls-remote lts.txt\"\nNVM_COLORS=0ygre nvm ls-remote node > \"$MOCKS_DIR/nvm ls-remote node.txt\"\nNVM_COLORS=0ygre nvm ls-remote iojs > \"$MOCKS_DIR/nvm ls-remote iojs.txt\"\nnvm_print_implicit_alias remote stable > \"$MOCKS_DIR/nvm_print_implicit_alias remote stable.txt\"\nnvm_ls_remote stable > \"$MOCKS_DIR/nvm_ls_remote stable.txt\"\nnvm alias \"lts/*\" > \"$MOCKS_DIR/lts-star.txt\"\n\nset +e\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ nvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote nightly.txt\"\nnvm_download -L -s \"$(nvm_get_mirror node std)/index.tab\" -o - > \"$MOCKS_DIR/nodejs.org-dist-index.tab\"\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ nvm_print_implicit_alias remote stable > \"$MOCKS_DIR/nvm_print_implicit_alias remote stable nightly.txt\"\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ nvm_ls_remote stable > \"$MOCKS_DIR/nvm_ls_remote stable nightly.txt\"\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ NVM_LTS=* nvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote LTS nightly.txt\"\nNVM_NODEJS_ORG_MIRROR=https://nodejs.org/download/nightly/ NVM_LTS=argon nvm_ls_remote > \"$MOCKS_DIR/nvm_ls_remote LTS nightly argon.txt\"\nset -e\n\nALIAS_PATH=\"$MOCKS_DIR/nvm_make_alias LTS alias calls.txt\"\n: > \"$ALIAS_PATH\"\nLTS_NAMES_PATH=\"$MOCKS_DIR/LTS_names.txt\"\n: > \"$LTS_NAMES_PATH\"\nnvm_make_alias() {\n  # prevent local alias creation, and store arguments\n  echo \"${1}|${2}\" >> \"$ALIAS_PATH\"\n  if [ \"${1}\" != 'lts/*' ]; then\n    echo \"${1#lts/}\" >> \"$LTS_NAMES_PATH\"\n  fi\n}\nnvm ls-remote --lts > /dev/null\n\necho \"done! Don't forget to git commit them.\"\n"
        }
      ]
    }
  ]
}