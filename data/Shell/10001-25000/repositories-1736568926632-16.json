{
  "metadata": {
    "timestamp": 1736568926632,
    "page": 16,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rbenv/rbenv",
      "stars": 16192,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0458984375,
          "content": "/share/man/man[1-8]/*.[1-8] linguist-generated\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0947265625,
          "content": "/plugins\n/shims\n/version\n/versions\n/sources\n/cache\n/libexec/*.dylib\n/src/Makefile\n/src/*.o\n/gems\n"
        },
        {
          "name": ".vimrc",
          "type": "blob",
          "size": 0.0341796875,
          "content": "set wildignore+=versions/*,cache/*\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.310546875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting one of the project maintainers listed below. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Project Maintainers\n\n* Sam Stephenson <<sstephenson@gmail.com>>\n* Mislav Marohnić <<mislav.marohnic@gmail.com>>\n* Erik Michaels-Ober <<sferik@gmail.com>>\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.033203125,
          "content": "Copyright (c) 2013 Sam Stephenson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.205078125,
          "content": "release_version := $(shell GIT_CEILING_DIRECTORIES=$(PWD) bin/rbenv --version | cut -d' ' -f2)\n\nshare/man/man1/rbenv.1: share/man/man1/rbenv.1.adoc\n\tasciidoctor -b manpage -a version=$(release_version:v%=%) $<\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 13.458984375,
          "content": "# Seamlessly manage your app’s Ruby environment with rbenv.\n\nrbenv is a version manager tool for the Ruby programming language on Unix-like systems. It is useful for switching between multiple Ruby versions on the same machine and for ensuring that each project you are working on always runs on the correct Ruby version.\n\n## How It Works\n\nAfter rbenv injects itself into your PATH at installation time, any invocation of `ruby`, `gem`, `bundler`, or other Ruby-related executable will first activate rbenv. Then, rbenv scans the current project directory for a file named `.ruby-version`. If found, that file determines the version of Ruby that should be used within that directory. Finally, rbenv looks up that Ruby version among those installed under `~/.rbenv/versions/`.\n\nYou can choose the Ruby version for your project with, for example:\n```sh\ncd myproject\n# choose Ruby version 3.1.2:\nrbenv local 3.1.2\n```\n\nDoing so will create or update the `.ruby-version` file in the current directory with the version that you've chosen. A different project of yours that is another directory might be using a different version of Ruby altogether—rbenv will seamlessly transition from one Ruby version to another when you switch projects.\n\nFinally, almost every aspect of rbenv's mechanism is [customizable via plugins][plugins] written in bash.\n\nThe simplicity of rbenv has its benefits, but also some downsides. See the [comparison of version managers][alternatives] for more details and some alternatives.\n\n## Installation\n\nOn systems with Homebrew package manager, the “Using Package Managers” method is recommended. On other systems, “Basic Git Checkout” might be the easiest way of ensuring that you are always installing the latest version of rbenv.\n\n### Using Package Managers\n\n1. Install rbenv using one of the following approaches.\n\n   #### Homebrew\n   \n   On macOS or Linux, we recommend installing rbenv with [Homebrew](https://brew.sh).\n   \n   ```sh\n   brew install rbenv\n   ```\n   \n   #### Debian, Ubuntu, and their derivatives\n       \n   > [!CAUTION]   \n   > The version of rbenv that is packaged and maintained in official\n   Debian and Ubuntu repositories is _out of date_. To install the latest\n   version, it is recommended to [install rbenv using git](#basic-git-checkout).\n   \n   ```sh\n   sudo apt install rbenv\n   ```\n   \n   #### Arch Linux and its derivatives\n   \n   Archlinux has an [AUR Package](https://aur.archlinux.org/packages/rbenv/) for\n   rbenv and you can install it from the AUR using the instructions from this\n   [wiki page](https://wiki.archlinux.org/index.php/Arch_User_Repository#Installing_and_upgrading_packages).\n\n   #### Fedora\n\n   Fedora has an [official package](https://packages.fedoraproject.org/pkgs/rbenv/rbenv/) which you can install:\n\n   ```sh\n   sudo dnf install rbenv\n   ```\n\n2. Set up your shell to load rbenv.\n\n    ```sh\n    rbenv init\n    ```\n\n3. Close your Terminal window and open a new one so your changes take effect.\n\nThat's it! You are now ready to [install some Ruby versions](#installing-ruby-versions).\n\n### Basic Git Checkout\n\n> [!NOTE]   \n> For a more automated install, you can use [rbenv-installer](https://github.com/rbenv/rbenv-installer#rbenv-installer). If you do not want to execute scripts downloaded from a web URL or simply prefer a manual approach, follow the steps below.\n\nThis will get you going with the latest version of rbenv without needing a system-wide install.\n\n1. Clone rbenv into `~/.rbenv`.\n\n    ```sh\n    git clone https://github.com/rbenv/rbenv.git ~/.rbenv\n    ```\n\n2. Set up your shell to load rbenv.\n\n    ```sh\n    ~/.rbenv/bin/rbenv init\n    ```\n\n   If you are curious, see here to [understand what `init` does](#how-rbenv-hooks-into-your-shell).\n\n3. Restart your shell so that these changes take effect. (Opening a new terminal tab will usually do it.)\n\n#### Shell completions\n\nWhen _manually_ installing rbenv, it might be useful to note how completion scripts for various shells work. Completion scripts help with typing rbenv commands by expanding partially entered rbenv command names and option flags; typically this is invoked by pressing <kbd>Tab</kbd> key in an interactive shell.\n\n- The **bash** completion script for rbenv ships with the project and gets [loaded by the `rbenv init` mechanism](#how-rbenv-hooks-into-your-shell).\n\n- The **zsh** completion script ships with the project, but needs to be added to FPATH in zsh before it can be discovered by the shell. One way to do this would be to edit `~/.zshrc`:\n\n  ```sh\n  # assuming that rbenv was installed to `~/.rbenv`\n  FPATH=~/.rbenv/completions:\"$FPATH\"\n\n  autoload -U compinit\n  compinit\n  ```\n\n- The **fish** completion script for rbenv ships with the fish shell itself and is not maintained by the rbenv project.\n\n### Installing Ruby versions\n\nThe `rbenv install` command does not ship with rbenv out-of-the-box, but is provided by the [ruby-build][] plugin.\n\nBefore attempting to install Ruby, **check that [your build environment](https://github.com/rbenv/ruby-build/wiki#suggested-build-environment) has the necessary tools and libraries**. Then:\n\n```sh\n# list latest stable versions:\nrbenv install -l\n\n# list all local versions:\nrbenv install -L\n\n# install a Ruby version:\nrbenv install 3.1.2\n```\n\nFor troubleshooting `BUILD FAILED` scenarios, check the [ruby-build Discussions section](https://github.com/rbenv/ruby-build/discussions/categories/build-failures).\n\n> [!NOTE]  \n> If the `rbenv install` command wasn't found, you can install ruby-build as a plugin:\n> ```sh\n> git clone https://github.com/rbenv/ruby-build.git \"$(rbenv root)\"/plugins/ruby-build\n> ```\n\nSet a Ruby version to finish installation and start using Ruby:\n```sh\nrbenv global 3.1.2   # set the default Ruby version for this machine\n# or:\nrbenv local 3.1.2    # set the Ruby version for this directory\n```\n\nAlternatively to the `rbenv install` command, you can download and compile Ruby manually as a subdirectory of `~/.rbenv/versions`. An entry in that directory can also be a symlink to a Ruby version installed elsewhere on the filesystem.\n\n#### Installing Ruby gems\n\nSelect a Ruby version for your project using `rbenv local 3.1.2`, for example. Then, proceed to install gems as you normally would:\n\n```sh\ngem install bundler\n```\n\n> [!NOTE]  \n> You _should not use sudo_ to install gems. Typically, the Ruby versions will be installed under your home directory and thus writeable by your user. If you get the “you don't have write permissions” error when installing gems, it's likely that your \"system\" Ruby version is still a global default. Change that with `rbenv global <version>` and try again.\n\nCheck the location where gems are being installed with `gem env`:\n\n```sh\ngem env home\n# => ~/.rbenv/versions/<version>/lib/ruby/gems/...\n```\n\n#### Uninstalling Ruby versions\n\nAs time goes on, Ruby versions you install will accumulate in your\n`~/.rbenv/versions` directory.\n\nTo remove old Ruby versions, simply `rm -rf` the directory of the\nversion you want to remove. You can find the directory of a particular\nRuby version with the `rbenv prefix` command, e.g. `rbenv prefix\n2.7.0`.\n\nThe [ruby-build][] plugin provides an `rbenv uninstall` command to\nautomate the removal process.\n\n## Command Reference\n\nThe main rbenv commands you need to know are:\n\n### rbenv versions\n\nLists all Ruby versions known to rbenv, and shows an asterisk next to\nthe currently active version.\n\n    $ rbenv versions\n      1.8.7-p352\n      1.9.2-p290\n    * 1.9.3-p327 (set by /Users/sam/.rbenv/version)\n      jruby-1.7.1\n      rbx-1.2.4\n      ree-1.8.7-2011.03\n\n### rbenv version\n\nDisplays the currently active Ruby version, along with information on\nhow it was set.\n\n    $ rbenv version\n    1.9.3-p327 (set by /Users/sam/.rbenv/version)\n\n### rbenv local\n\nSets a local application-specific Ruby version by writing the version\nname to a `.ruby-version` file in the current directory. This version\noverrides the global version, and can be overridden itself by setting\nthe `RBENV_VERSION` environment variable or with the `rbenv shell`\ncommand.\n\n    rbenv local 3.1.2\n\nWhen run without a version number, `rbenv local` reports the currently\nconfigured local version. You can also unset the local version:\n\n    rbenv local --unset\n\n### rbenv global\n\nSets the global version of Ruby to be used in all shells by writing\nthe version name to the `~/.rbenv/version` file. This version can be\noverridden by an application-specific `.ruby-version` file, or by\nsetting the `RBENV_VERSION` environment variable.\n\n    rbenv global 3.1.2\n\nThe special version name `system` tells rbenv to use the system Ruby\n(detected by searching your `$PATH`).\n\nWhen run without a version number, `rbenv global` reports the\ncurrently configured global version.\n\n### rbenv shell\n\nSets a shell-specific Ruby version by setting the `RBENV_VERSION`\nenvironment variable in your shell. This version overrides\napplication-specific versions and the global version.\n\n    rbenv shell jruby-1.7.1\n\nWhen run without a version number, `rbenv shell` reports the current\nvalue of `RBENV_VERSION`. You can also unset the shell version:\n\n    rbenv shell --unset\n\nNote that you'll need rbenv's shell integration enabled (step 3 of\nthe installation instructions) in order to use this command. If you\nprefer not to use shell integration, you may simply set the\n`RBENV_VERSION` variable yourself:\n\n    export RBENV_VERSION=jruby-1.7.1\n\n### rbenv rehash\n\nInstalls shims for all Ruby executables known to rbenv (`~/.rbenv/versions/*/bin/*`). Typically you do not need to run this command, as it will run automatically after installing gems.\n\n    rbenv rehash\n\n### rbenv which\n\nDisplays the full path to the executable that rbenv will invoke when\nyou run the given command.\n\n    $ rbenv which irb\n    /Users/sam/.rbenv/versions/1.9.3-p327/bin/irb\n\n### rbenv whence\n\nLists all Ruby versions that contain the specified executable name.\n\n    $ rbenv whence rackup\n    1.9.3-p327\n    jruby-1.7.1\n    ree-1.8.7-2011.03\n\n## Environment variables\n\nYou can affect how rbenv operates with the following settings:\n\nname | default | description\n-----|---------|------------\n`RBENV_VERSION` | | Specifies the Ruby version to be used.<br>Also see [`rbenv shell`](#rbenv-shell)\n`RBENV_ROOT` | `~/.rbenv` | Defines the directory under which Ruby versions and shims reside.<br>Also see `rbenv root`\n`RBENV_DEBUG` | | Outputs debug information.<br>Also as: `rbenv --debug <subcommand>`\n`RBENV_HOOK_PATH` | [_see wiki_][hooks] | Colon-separated list of paths searched for rbenv hooks.\n`RBENV_DIR` | `$PWD` | Directory to start searching for `.ruby-version` files.\n\n### How rbenv hooks into your shell\n\n`rbenv init` is a helper command to hook rbenv into a shell. This helper is part of the recommended installation instructions, but optional, as an experienced user can set up the following tasks manually. The `rbenv init` command has two modes of operation:\n\n1. `rbenv init`: made for humans, this command edits your shell initialization files on disk to add rbenv to shell startup. (Prior to rbenv 1.3.0, this mode only printed user instructions to the terminal, but did nothing else.)\n\n2. `rbenv init -`: made for machines, this command outputs a shell script suitable to be eval'd by the user's shell.\n\nWhen `rbenv init` is invoked from a bash shell, for example, it will add the following to the user's `~/.bashrc` or `~/.bash_profile`:\n\n```sh\n# Added by `rbenv init` on <DATE>\neval \"$(rbenv init - --no-rehash bash)\"\n```\n\nYou may add this line to your shell initialization files manually if you want to avoid running `rbenv init` as part of the setup process. Here is what the eval'd script does:\n\n0. Adds `rbenv` executable to PATH if necessary.\n\n1. Prepends `~/.rbenv/shims` directory to PATH. This is basically the only requirement for rbenv to function properly.\n\n2. Installs bash shell completion for rbenv commands.\n\n3. Regenerates rbenv shims. If this step slows down your shell startup, you can invoke `rbenv init -` with the `--no-rehash` flag.\n\n4. Installs the \"sh\" dispatcher. This bit is also optional, but allows rbenv and plugins to change variables in your current shell, making commands like `rbenv shell` possible.\n\n\n### Uninstalling rbenv\n\nThe simplicity of rbenv makes it easy to temporarily disable it, or\nuninstall from the system.\n\n1. To **disable** rbenv managing your Ruby versions, simply comment or remove the `rbenv init` line from your shell startup configuration. This will remove rbenv shims directory from PATH, and future invocations like `ruby` will execute the system Ruby version, bypassing rbenv completely.\n\n   While disabled, `rbenv` will still be accessible on the command line, but your Ruby apps won't be affected by version switching.\n\n2. To completely **uninstall** rbenv, perform step (1) and then remove the rbenv root directory. This will **delete all Ruby versions** that were installed under `` `rbenv root`/versions/ ``:\n\n       rm -rf \"$(rbenv root)\"\n\n   If you've installed rbenv using a package manager, as a final step\n   perform the rbenv package removal:\n   - Homebrew: `brew uninstall rbenv`\n   - Debian, Ubuntu, and their derivatives: `sudo apt purge rbenv`\n   - Archlinux and its derivatives: `sudo pacman -R rbenv`\n\n## Development\n\nTests are executed using [Bats](https://github.com/bats-core/bats-core):\n\n    $ bats test\n    $ bats test/<file>.bats\n\nPlease feel free to submit pull requests and file bugs on the [issue\ntracker](https://github.com/rbenv/rbenv/issues).\n\n\n  [ruby-build]: https://github.com/rbenv/ruby-build#readme\n  [hooks]: https://github.com/rbenv/rbenv/wiki/Authoring-plugins#rbenv-hooks\n  [alternatives]: https://github.com/rbenv/rbenv/wiki/Comparison-of-version-managers\n  [plugins]: https://github.com/rbenv/rbenv/wiki/Plugins\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "rbenv.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "share",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}