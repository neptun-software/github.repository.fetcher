{
  "metadata": {
    "timestamp": 1736568924174,
    "page": 11,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "deviantony/docker-elk",
      "stars": 17489,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env",
          "type": "blob",
          "size": 1.466796875,
          "content": "ELASTIC_VERSION=8.17.0\n\n## Passwords for stack users\n#\n\n# User 'elastic' (built-in)\n#\n# Superuser role, full access to cluster management and data indices.\n# https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html\nELASTIC_PASSWORD='changeme'\n\n# User 'logstash_internal' (custom)\n#\n# The user Logstash uses to connect and send data to Elasticsearch.\n# https://www.elastic.co/guide/en/logstash/current/ls-security.html\nLOGSTASH_INTERNAL_PASSWORD='changeme'\n\n# User 'kibana_system' (built-in)\n#\n# The user Kibana uses to connect and communicate with Elasticsearch.\n# https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html\nKIBANA_SYSTEM_PASSWORD='changeme'\n\n# Users 'metricbeat_internal', 'filebeat_internal' and 'heartbeat_internal' (custom)\n#\n# The users Beats use to connect and send data to Elasticsearch.\n# https://www.elastic.co/guide/en/beats/metricbeat/current/feature-roles.html\nMETRICBEAT_INTERNAL_PASSWORD=''\nFILEBEAT_INTERNAL_PASSWORD=''\nHEARTBEAT_INTERNAL_PASSWORD=''\n\n# User 'monitoring_internal' (custom)\n#\n# The user Metricbeat uses to collect monitoring data from stack components.\n# https://www.elastic.co/guide/en/elasticsearch/reference/current/how-monitoring-works.html\nMONITORING_INTERNAL_PASSWORD=''\n\n# User 'beats_system' (built-in)\n#\n# The user the Beats use when storing monitoring information in Elasticsearch.\n# https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html\nBEATS_SYSTEM_PASSWORD=''\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0810546875,
          "content": "# Declare files that will always have LF line endings on checkout.\n*.sh text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Anthony Lapenna\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 20.7080078125,
          "content": "# Elastic stack (ELK) on Docker\n\n[![Elastic Stack version](https://img.shields.io/badge/Elastic%20Stack-8.17.0-00bfb3?style=flat&logo=elastic-stack)](https://www.elastic.co/blog/category/releases)\n[![Build Status](https://github.com/deviantony/docker-elk/workflows/CI/badge.svg?branch=main)](https://github.com/deviantony/docker-elk/actions?query=workflow%3ACI+branch%3Amain)\n[![Join the chat](https://badges.gitter.im/Join%20Chat.svg)](https://app.gitter.im/#/room/#deviantony_docker-elk:gitter.im)\n\nRun the latest version of the [Elastic stack][elk-stack] with Docker and Docker Compose.\n\nIt gives you the ability to analyze any data set by using the searching/aggregation capabilities of Elasticsearch and\nthe visualization power of Kibana.\n\nBased on the [official Docker images][elastic-docker] from Elastic:\n\n* [Elasticsearch](https://github.com/elastic/elasticsearch/tree/main/distribution/docker)\n* [Logstash](https://github.com/elastic/logstash/tree/main/docker)\n* [Kibana](https://github.com/elastic/kibana/tree/main/src/dev/build/tasks/os_packages/docker_generator)\n\nOther available stack variants:\n\n* [`tls`](https://github.com/deviantony/docker-elk/tree/tls): TLS encryption enabled in Elasticsearch, Kibana (opt in),\n  and Fleet\n\n> [!IMPORTANT]\n> [Platinum][subscriptions] features are enabled by default for a [trial][license-mngmt] duration of **30 days**. After\n> this evaluation period, you will retain access to all the free features included in the Open Basic license seamlessly,\n> without manual intervention required, and without losing any data. Refer to the [How to disable paid\n> features](#how-to-disable-paid-features) section to opt out of this behaviour.\n\n---\n\n## tl;dr\n\n```sh\ndocker compose up setup\n```\n\n```sh\ndocker compose up\n```\n\n<picture>\n  <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/user-attachments/assets/6f67cbc0-ddee-44bf-8f4d-7fd2d70f5217\">\n  <img alt=\"Animated demo\" src=\"https://github.com/user-attachments/assets/501a340a-e6df-4934-90a2-6152b462c14a\">\n</picture>\n\n---\n\n## Philosophy\n\nWe aim at providing the simplest possible entry into the Elastic stack for anybody who feels like experimenting with\nthis powerful combo of technologies. This project's default configuration is purposely minimal and unopinionated. It\ndoes not rely on any external dependency, and uses as little custom automation as necessary to get things up and\nrunning.\n\nInstead, we believe in good documentation so that you can use this repository as a template, tweak it, and make it _your\nown_. [sherifabdlnaby/elastdocker][elastdocker] is one example among others of project that builds upon this idea.\n\n---\n\n## Contents\n\n1. [Requirements](#requirements)\n   * [Host setup](#host-setup)\n   * [Docker Desktop](#docker-desktop)\n     * [Windows](#windows)\n     * [macOS](#macos)\n1. [Usage](#usage)\n   * [Bringing up the stack](#bringing-up-the-stack)\n   * [Initial setup](#initial-setup)\n     * [Setting up user authentication](#setting-up-user-authentication)\n     * [Injecting data](#injecting-data)\n   * [Cleanup](#cleanup)\n   * [Version selection](#version-selection)\n1. [Configuration](#configuration)\n   * [How to configure Elasticsearch](#how-to-configure-elasticsearch)\n   * [How to configure Kibana](#how-to-configure-kibana)\n   * [How to configure Logstash](#how-to-configure-logstash)\n   * [How to disable paid features](#how-to-disable-paid-features)\n   * [How to scale out the Elasticsearch cluster](#how-to-scale-out-the-elasticsearch-cluster)\n   * [How to re-execute the setup](#how-to-re-execute-the-setup)\n   * [How to reset a password programmatically](#how-to-reset-a-password-programmatically)\n1. [Extensibility](#extensibility)\n   * [How to add plugins](#how-to-add-plugins)\n   * [How to enable the provided extensions](#how-to-enable-the-provided-extensions)\n1. [JVM tuning](#jvm-tuning)\n   * [How to specify the amount of memory used by a service](#how-to-specify-the-amount-of-memory-used-by-a-service)\n   * [How to enable a remote JMX connection to a service](#how-to-enable-a-remote-jmx-connection-to-a-service)\n1. [Going further](#going-further)\n   * [Plugins and integrations](#plugins-and-integrations)\n\n## Requirements\n\n### Host setup\n\n* [Docker Engine][docker-install] version **18.06.0** or newer\n* [Docker Compose][compose-install] version **2.0.0** or newer\n* 1.5 GB of RAM\n\n> [!NOTE]\n> Especially on Linux, make sure your user has the [required permissions][linux-postinstall] to interact with the Docker\n> daemon.\n\nBy default, the stack exposes the following ports:\n\n* 5044: Logstash Beats input\n* 50000: Logstash TCP input\n* 9600: Logstash monitoring API\n* 9200: Elasticsearch HTTP\n* 9300: Elasticsearch TCP transport\n* 5601: Kibana\n\n> [!WARNING]\n> Elasticsearch's [bootstrap checks][bootstrap-checks] were purposely disabled to facilitate the setup of the Elastic\n> stack in development environments. For production setups, we recommend users to set up their host according to the\n> instructions from the Elasticsearch documentation: [Important System Configuration][es-sys-config].\n\n### Docker Desktop\n\n#### Windows\n\nIf you are using the legacy Hyper-V mode of _Docker Desktop for Windows_, ensure [File Sharing][win-filesharing] is\nenabled for the `C:` drive.\n\n#### macOS\n\nThe default configuration of _Docker Desktop for Mac_ allows mounting files from `/Users/`, `/Volume/`, `/private/`,\n`/tmp` and `/var/folders` exclusively. Make sure the repository is cloned in one of those locations or follow the\ninstructions from the [documentation][mac-filesharing] to add more locations.\n\n## Usage\n\n> [!WARNING]\n> You must rebuild the stack images with `docker compose build` whenever you switch branch or update the\n> [version](#version-selection) of an already existing stack.\n\n### Bringing up the stack\n\nClone this repository onto the Docker host that will run the stack with the command below:\n\n```sh\ngit clone https://github.com/deviantony/docker-elk.git\n```\n\nThen, initialize the Elasticsearch users and groups required by docker-elk by executing the command:\n\n```sh\ndocker compose up setup\n```\n\nIf everything went well and the setup completed without error, start the other stack components:\n\n```sh\ndocker compose up\n```\n\n> [!NOTE]\n> You can also run all services in the background (detached mode) by appending the `-d` flag to the above command.\n\nGive Kibana about a minute to initialize, then access the Kibana web UI by opening <http://localhost:5601> in a web\nbrowser and use the following (default) credentials to log in:\n\n* user: *elastic*\n* password: *changeme*\n\n> [!NOTE]\n> Upon the initial startup, the `elastic`, `logstash_internal` and `kibana_system` Elasticsearch users are initialized\n> with the values of the passwords defined in the [`.env`](.env) file (_\"changeme\"_ by default). The first one is the\n> [built-in superuser][builtin-users], the other two are used by Kibana and Logstash respectively to communicate with\n> Elasticsearch. This task is only performed during the _initial_ startup of the stack. To change users' passwords\n> _after_ they have been initialized, please refer to the instructions in the next section.\n\n### Initial setup\n\n#### Setting up user authentication\n\n> [!NOTE]\n> Refer to [Security settings in Elasticsearch][es-security] to disable authentication.\n\n> [!WARNING]\n> Starting with Elastic v8.0.0, it is no longer possible to run Kibana using the bootstrapped privileged `elastic` user.\n\nThe _\"changeme\"_ password set by default for all aforementioned users is **unsecure**. For increased security, we will\nreset the passwords of all aforementioned Elasticsearch users to random secrets.\n\n1. Reset passwords for default users\n\n    The commands below reset the passwords of the `elastic`, `logstash_internal` and `kibana_system` users. Take note\n    of them.\n\n    ```sh\n    docker compose exec elasticsearch bin/elasticsearch-reset-password --batch --user elastic\n    ```\n\n    ```sh\n    docker compose exec elasticsearch bin/elasticsearch-reset-password --batch --user logstash_internal\n    ```\n\n    ```sh\n    docker compose exec elasticsearch bin/elasticsearch-reset-password --batch --user kibana_system\n    ```\n\n    If the need for it arises (e.g. if you want to [collect monitoring information][ls-monitoring] through Beats and\n    other components), feel free to repeat this operation at any time for the rest of the [built-in\n    users][builtin-users].\n\n1. Replace usernames and passwords in configuration files\n\n    Replace the password of the `elastic` user inside the `.env` file with the password generated in the previous step.\n    Its value isn't used by any core component, but [extensions](#how-to-enable-the-provided-extensions) use it to\n    connect to Elasticsearch.\n\n    > [!NOTE]\n    > In case you don't plan on using any of the provided [extensions](#how-to-enable-the-provided-extensions), or\n    > prefer to create your own roles and users to authenticate these services, it is safe to remove the\n    > `ELASTIC_PASSWORD` entry from the `.env` file altogether after the stack has been initialized.\n\n    Replace the password of the `logstash_internal` user inside the `.env` file with the password generated in the\n    previous step. Its value is referenced inside the Logstash pipeline file (`logstash/pipeline/logstash.conf`).\n\n    Replace the password of the `kibana_system` user inside the `.env` file with the password generated in the previous\n    step. Its value is referenced inside the Kibana configuration file (`kibana/config/kibana.yml`).\n\n    See the [Configuration](#configuration) section below for more information about these configuration files.\n\n1. Restart Logstash and Kibana to re-connect to Elasticsearch using the new passwords\n\n    ```sh\n    docker compose up -d logstash kibana\n    ```\n\n> [!NOTE]\n> Learn more about the security of the Elastic stack at [Secure the Elastic Stack][sec-cluster].\n\n#### Injecting data\n\nLaunch the Kibana web UI by opening <http://localhost:5601> in a web browser, and use the following credentials to log\nin:\n\n* user: *elastic*\n* password: *\\<your generated elastic password>*\n\nNow that the stack is fully configured, you can go ahead and inject some log entries.\n\nThe shipped Logstash configuration allows you to send data over the TCP port 50000. For example, you can use one of the\nfollowing commands — depending on your installed version of `nc` (Netcat) — to ingest the content of the log file\n`/path/to/logfile.log` in Elasticsearch, via Logstash:\n\n```sh\n# Execute `nc -h` to determine your `nc` version\n\ncat /path/to/logfile.log | nc -q0 localhost 50000          # BSD\ncat /path/to/logfile.log | nc -c localhost 50000           # GNU\ncat /path/to/logfile.log | nc --send-only localhost 50000  # nmap\n```\n\nYou can also load the sample data provided by your Kibana installation.\n\n### Cleanup\n\nElasticsearch data is persisted inside a volume by default.\n\nIn order to entirely shutdown the stack and remove all persisted data, use the following Docker Compose command:\n\n```sh\ndocker compose down -v\n```\n\n### Version selection\n\nThis repository stays aligned with the latest version of the Elastic stack. The `main` branch tracks the current major\nversion (8.x).\n\nTo use a different version of the core Elastic components, simply change the version number inside the [`.env`](.env)\nfile. If you are upgrading an existing stack, remember to rebuild all container images using the `docker compose build`\ncommand.\n\n> [!IMPORTANT]\n> Always pay attention to the [official upgrade instructions][upgrade] for each individual component before performing a\n> stack upgrade.\n\nOlder major versions are also supported on separate branches:\n\n* [`release-7.x`](https://github.com/deviantony/docker-elk/tree/release-7.x): 7.x series\n* [`release-6.x`](https://github.com/deviantony/docker-elk/tree/release-6.x): 6.x series (End-of-life)\n* [`release-5.x`](https://github.com/deviantony/docker-elk/tree/release-5.x): 5.x series (End-of-life)\n\n## Configuration\n\n> [!IMPORTANT]\n> Configuration is not dynamically reloaded, you will need to restart individual components after any configuration\n> change.\n\n### How to configure Elasticsearch\n\nThe Elasticsearch configuration is stored in [`elasticsearch/config/elasticsearch.yml`][config-es].\n\nYou can also specify the options you want to override by setting environment variables inside the Compose file:\n\n```yml\nelasticsearch:\n\n  environment:\n    network.host: _non_loopback_\n    cluster.name: my-cluster\n```\n\nPlease refer to the following documentation page for more details about how to configure Elasticsearch inside Docker\ncontainers: [Install Elasticsearch with Docker][es-docker].\n\n### How to configure Kibana\n\nThe Kibana default configuration is stored in [`kibana/config/kibana.yml`][config-kbn].\n\nYou can also specify the options you want to override by setting environment variables inside the Compose file:\n\n```yml\nkibana:\n\n  environment:\n    SERVER_NAME: kibana.example.org\n```\n\nPlease refer to the following documentation page for more details about how to configure Kibana inside Docker\ncontainers: [Install Kibana with Docker][kbn-docker].\n\n### How to configure Logstash\n\nThe Logstash configuration is stored in [`logstash/config/logstash.yml`][config-ls].\n\nYou can also specify the options you want to override by setting environment variables inside the Compose file:\n\n```yml\nlogstash:\n\n  environment:\n    LOG_LEVEL: debug\n```\n\nPlease refer to the following documentation page for more details about how to configure Logstash inside Docker\ncontainers: [Configuring Logstash for Docker][ls-docker].\n\n### How to disable paid features\n\nYou can cancel an ongoing trial before its expiry date — and thus revert to a basic license — either from the [License\nManagement][license-mngmt] panel of Kibana, or using Elasticsearch's `start_basic` [Licensing API][license-apis]. Please\nnote that the second option is the only way to recover access to Kibana if the license isn't either switched to `basic`\nor upgraded before the trial's expiry date.\n\nChanging the license type by switching the value of Elasticsearch's `xpack.license.self_generated.type` setting from\n`trial` to `basic` (see [License settings][license-settings]) will only work **if done prior to the initial setup.**\nAfter a trial has been started, the loss of features from `trial` to `basic` _must_ be acknowledged using one of the two\nmethods described in the first paragraph.\n\n### How to scale out the Elasticsearch cluster\n\nFollow the instructions from the Wiki: [Scaling out Elasticsearch](https://github.com/deviantony/docker-elk/wiki/Elasticsearch-cluster)\n\n### How to re-execute the setup\n\nTo run the setup container again and re-initialize all users for which a password was defined inside the `.env` file,\nsimply \"up\" the `setup` Compose service again:\n\n```console\n$ docker compose up setup\n ⠿ Container docker-elk-elasticsearch-1  Running\n ⠿ Container docker-elk-setup-1          Created\nAttaching to docker-elk-setup-1\n...\ndocker-elk-setup-1  | [+] User 'monitoring_internal'\ndocker-elk-setup-1  |    ⠿ User does not exist, creating\ndocker-elk-setup-1  | [+] User 'beats_system'\ndocker-elk-setup-1  |    ⠿ User exists, setting password\ndocker-elk-setup-1 exited with code 0\n```\n\n### How to reset a password programmatically\n\nIf for any reason your are unable to use Kibana to change the password of your users (including [built-in\nusers][builtin-users]), you can use the Elasticsearch API instead and achieve the same result.\n\nIn the example below, we reset the password of the `elastic` user (notice \"/user/elastic\" in the URL):\n\n```sh\ncurl -XPOST -D- 'http://localhost:9200/_security/user/elastic/_password' \\\n    -H 'Content-Type: application/json' \\\n    -u elastic:<your current elastic password> \\\n    -d '{\"password\" : \"<your new password>\"}'\n```\n\n## Extensibility\n\n### How to add plugins\n\nTo add plugins to any ELK component you have to:\n\n1. Add a `RUN` statement to the corresponding `Dockerfile` (eg. `RUN logstash-plugin install logstash-filter-json`)\n1. Add the associated plugin code configuration to the service configuration (eg. Logstash input/output)\n1. Rebuild the images using the `docker compose build` command\n\n### How to enable the provided extensions\n\nA few extensions are available inside the [`extensions`](extensions) directory. These extensions provide features which\nare not part of the standard Elastic stack, but can be used to enrich it with extra integrations.\n\nThe documentation for these extensions is provided inside each individual subdirectory, on a per-extension basis. Some\nof them require manual changes to the default ELK configuration.\n\n## JVM tuning\n\n### How to specify the amount of memory used by a service\n\nThe startup scripts for Elasticsearch and Logstash can append extra JVM options from the value of an environment\nvariable, allowing the user to adjust the amount of memory that can be used by each component:\n\n| Service       | Environment variable |\n|---------------|----------------------|\n| Elasticsearch | ES_JAVA_OPTS         |\n| Logstash      | LS_JAVA_OPTS         |\n\nTo accommodate environments where memory is scarce (Docker Desktop for Mac has only 2 GB available by default), the Heap\nSize allocation is capped by default in the `docker-compose.yml` file to 512 MB for Elasticsearch and 256 MB for\nLogstash. If you want to override the default JVM configuration, edit the matching environment variable(s) in the\n`docker-compose.yml` file.\n\nFor example, to increase the maximum JVM Heap Size for Logstash:\n\n```yml\nlogstash:\n\n  environment:\n    LS_JAVA_OPTS: -Xms1g -Xmx1g\n```\n\nWhen these options are not set:\n\n* Elasticsearch starts with a JVM Heap Size that is [determined automatically][es-heap].\n* Logstash starts with a fixed JVM Heap Size of 1 GB.\n\n### How to enable a remote JMX connection to a service\n\nAs for the Java Heap memory (see above), you can specify JVM options to enable JMX and map the JMX port on the Docker\nhost.\n\nUpdate the `{ES,LS}_JAVA_OPTS` environment variable with the following content (I've mapped the JMX service on the port\n18080, you can change that). Do not forget to update the `-Djava.rmi.server.hostname` option with the IP address of your\nDocker host (replace **DOCKER_HOST_IP**):\n\n```yml\nlogstash:\n\n  environment:\n    LS_JAVA_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.ssl=false -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.port=18080 -Dcom.sun.management.jmxremote.rmi.port=18080 -Djava.rmi.server.hostname=DOCKER_HOST_IP -Dcom.sun.management.jmxremote.local.only=false\n```\n\n## Going further\n\n### Plugins and integrations\n\nSee the following Wiki pages:\n\n* [External applications](https://github.com/deviantony/docker-elk/wiki/External-applications)\n* [Popular integrations](https://github.com/deviantony/docker-elk/wiki/Popular-integrations)\n\n[elk-stack]: https://www.elastic.co/what-is/elk-stack\n[elastic-docker]: https://www.docker.elastic.co/\n[subscriptions]: https://www.elastic.co/subscriptions\n[es-security]: https://www.elastic.co/guide/en/elasticsearch/reference/current/security-settings.html\n[license-settings]: https://www.elastic.co/guide/en/elasticsearch/reference/current/license-settings.html\n[license-mngmt]: https://www.elastic.co/guide/en/kibana/current/managing-licenses.html\n[license-apis]: https://www.elastic.co/guide/en/elasticsearch/reference/current/licensing-apis.html\n\n[elastdocker]: https://github.com/sherifabdlnaby/elastdocker\n\n[docker-install]: https://docs.docker.com/get-docker/\n[compose-install]: https://docs.docker.com/compose/install/\n[linux-postinstall]: https://docs.docker.com/engine/install/linux-postinstall/\n\n[bootstrap-checks]: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html\n[es-sys-config]: https://www.elastic.co/guide/en/elasticsearch/reference/current/system-config.html\n[es-heap]: https://www.elastic.co/guide/en/elasticsearch/reference/current/important-settings.html#heap-size-settings\n\n[win-filesharing]: https://docs.docker.com/desktop/settings/windows/#file-sharing\n[mac-filesharing]: https://docs.docker.com/desktop/settings/mac/#file-sharing\n\n[builtin-users]: https://www.elastic.co/guide/en/elasticsearch/reference/current/built-in-users.html\n[ls-monitoring]: https://www.elastic.co/guide/en/logstash/current/monitoring-with-metricbeat.html\n[sec-cluster]: https://www.elastic.co/guide/en/elasticsearch/reference/current/secure-cluster.html\n\n[connect-kibana]: https://www.elastic.co/guide/en/kibana/current/connect-to-elasticsearch.html\n[index-pattern]: https://www.elastic.co/guide/en/kibana/current/index-patterns.html\n\n[config-es]: ./elasticsearch/config/elasticsearch.yml\n[config-kbn]: ./kibana/config/kibana.yml\n[config-ls]: ./logstash/config/logstash.yml\n\n[es-docker]: https://www.elastic.co/guide/en/elasticsearch/reference/current/docker.html\n[kbn-docker]: https://www.elastic.co/guide/en/kibana/current/docker.html\n[ls-docker]: https://www.elastic.co/guide/en/logstash/current/docker-config.html\n\n[upgrade]: https://www.elastic.co/guide/en/elasticsearch/reference/current/setup-upgrade.html\n\n<!-- markdownlint-configure-file\n{\n  \"MD033\": {\n    \"allowed_elements\": [ \"picture\", \"source\", \"img\" ]\n  }\n}\n-->\n"
        },
        {
          "name": "demo.tape",
          "type": "blob",
          "size": 0.8232421875,
          "content": "# VHS - terminal recorder\n# https://github.com/charmbracelet/vhs\n\nOutput demo.gif\n\nRequire docker\n\nSet Shell bash\nSet FontSize 24\nSet Width 1500\nSet Height 1200\nSet WindowBar Rings\nSet TypingSpeed 75ms\nSet Theme \"iTerm2 Light Background\"\n#Set Theme \"iTerm2 Dark Background\"\n\nHide\n\n# BEGIN - Reset to clean state\nType \"docker compose down setup\"\nEnter\nSleep 2s\nType \"docker compose down -v\"\nEnter\nSleep 6s\nType \"docker compose up elasticsearch -d\"\nEnter\nSleep 20s\nType \"docker compose down\"\nEnter\nSleep 6s\nCtrl+L\n# END - Reset to clean state\n\nShow\n\nType \"docker compose up setup\"\nSleep 3s\nEnter\nSleep 20s\n\nEnter 2\nType \"docker compose up -d\"\nSleep 3s\nEnter\nSleep 6s\n\nEnter 2\nType \"curl -s http://localhost:9200 -u elastic:changeme\"\nSleep 3s\nEnter\nSleep 12s\n\nEnter 2\nType \"👉 Open your web browser at http://localhost:5601 🚀📈\"\nSleep 15s\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 3.53125,
          "content": "services:\n\n  # The 'setup' service runs a one-off script which initializes users inside\n  # Elasticsearch — such as 'logstash_internal' and 'kibana_system' — with the\n  # values of the passwords defined in the '.env' file. It also creates the\n  # roles required by some of these users.\n  #\n  # This task only needs to be performed once, during the *initial* startup of\n  # the stack. Any subsequent run will reset the passwords of existing users to\n  # the values defined inside the '.env' file, and the built-in roles to their\n  # default permissions.\n  #\n  # By default, it is excluded from the services started by 'docker compose up'\n  # due to the non-default profile it belongs to. To run it, either provide the\n  # '--profile=setup' CLI flag to Compose commands, or \"up\" the service by name\n  # such as 'docker compose up setup'.\n  setup:\n    profiles:\n      - setup\n    build:\n      context: setup/\n      args:\n        ELASTIC_VERSION: ${ELASTIC_VERSION}\n    init: true\n    volumes:\n      - ./setup/entrypoint.sh:/entrypoint.sh:ro,Z\n      - ./setup/lib.sh:/lib.sh:ro,Z\n      - ./setup/roles:/roles:ro,Z\n    environment:\n      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}\n      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}\n      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}\n      METRICBEAT_INTERNAL_PASSWORD: ${METRICBEAT_INTERNAL_PASSWORD:-}\n      FILEBEAT_INTERNAL_PASSWORD: ${FILEBEAT_INTERNAL_PASSWORD:-}\n      HEARTBEAT_INTERNAL_PASSWORD: ${HEARTBEAT_INTERNAL_PASSWORD:-}\n      MONITORING_INTERNAL_PASSWORD: ${MONITORING_INTERNAL_PASSWORD:-}\n      BEATS_SYSTEM_PASSWORD: ${BEATS_SYSTEM_PASSWORD:-}\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n\n  elasticsearch:\n    build:\n      context: elasticsearch/\n      args:\n        ELASTIC_VERSION: ${ELASTIC_VERSION}\n    volumes:\n      - ./elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,Z\n      - elasticsearch:/usr/share/elasticsearch/data:Z\n    ports:\n      - 9200:9200\n      - 9300:9300\n    environment:\n      node.name: elasticsearch\n      ES_JAVA_OPTS: -Xms512m -Xmx512m\n      # Bootstrap password.\n      # Used to initialize the keystore during the initial startup of\n      # Elasticsearch. Ignored on subsequent runs.\n      ELASTIC_PASSWORD: ${ELASTIC_PASSWORD:-}\n      # Use single node discovery in order to disable production mode and avoid bootstrap checks.\n      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html\n      discovery.type: single-node\n    networks:\n      - elk\n    restart: unless-stopped\n\n  logstash:\n    build:\n      context: logstash/\n      args:\n        ELASTIC_VERSION: ${ELASTIC_VERSION}\n    volumes:\n      - ./logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z\n      - ./logstash/pipeline:/usr/share/logstash/pipeline:ro,Z\n    ports:\n      - 5044:5044\n      - 50000:50000/tcp\n      - 50000:50000/udp\n      - 9600:9600\n    environment:\n      LS_JAVA_OPTS: -Xms256m -Xmx256m\n      LOGSTASH_INTERNAL_PASSWORD: ${LOGSTASH_INTERNAL_PASSWORD:-}\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n    restart: unless-stopped\n\n  kibana:\n    build:\n      context: kibana/\n      args:\n        ELASTIC_VERSION: ${ELASTIC_VERSION}\n    volumes:\n      - ./kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z\n    ports:\n      - 5601:5601\n    environment:\n      KIBANA_SYSTEM_PASSWORD: ${KIBANA_SYSTEM_PASSWORD:-}\n    networks:\n      - elk\n    depends_on:\n      - elasticsearch\n    restart: unless-stopped\n\nnetworks:\n  elk:\n    driver: bridge\n\nvolumes:\n  elasticsearch:\n"
        },
        {
          "name": "elasticsearch",
          "type": "tree",
          "content": null
        },
        {
          "name": "extensions",
          "type": "tree",
          "content": null
        },
        {
          "name": "kibana",
          "type": "tree",
          "content": null
        },
        {
          "name": "logstash",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}