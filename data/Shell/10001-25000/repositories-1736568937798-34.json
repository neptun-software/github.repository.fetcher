{
  "metadata": {
    "timestamp": 1736568937798,
    "page": 34,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "termux/termux-packages",
      "stars": 13556,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.529296875,
          "content": "[*]\ntrim_trailing_whitespace = true\n\n[*.{patch,.diff,.patch.*}]\ntrim_trailing_whitespace = false\n\n[*.sh]\nindent_style = tab\n\n[*.py]\nindent_style = space\nindent_size = 4\n\n[repo.json]\nindent_style = space\nindent_size = 2\n\n[Dockerfile]\nindent_style = tab\n\n[scripts/profile.json]\nindent_style = space\nindent_size = 4\n\n[*.md]\ntrim_trailing_whitespace = false\nindent_style = space\nindent_size = 4\n\n[*.{yml,yaml}]\nindent_style = space\nindent_size = 2\n\n[ndk-patches/*.h]\nindent_style = tab\n\n[scripts/utils/**.sh]\nindent_style = space\nindent_size = 4\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.39453125,
          "content": "# Default.\n*           text eol=lf\n\n# Treat patch files as binaries but let diff'ing them\n# as normal text.\n*.diff      binary diff\n*.patch     binary diff\n*.patch32   binary diff\n*.patch64   binary diff\n*.patch.*   binary diff\n\n# Powershell scripts.\n*.ps1       text eol=crlf\n\n# Binaries.\n*.gpg       binary\n*.gz        binary\n*.jpg       binary\n*.png       binary\n*.tar       binary\n*.tar.*     binary\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.505859375,
          "content": "# Vim\n[._]*.s[a-w][a-z]\n[._]s[a-w][a-z]\n*.un~\nSession.vim\n.netrwhist\n*~\n\n# Vagrant\nscripts/.vagrant/\n\n# Logs\nscripts/*.log\n/*.log\n\n# Misc archives\n/*\\.deb\n/*\\.zip\n/*\\.tar\n/*\\.tar\\.*\n\n# Source files.\n/sources/\n\n# GitHub Actions build artifacts\ndebs*\nchecksum*\n\n# Built *.deb files.\n/debs/\n/output/\n\n# Preinstalled build tools.\n/build-tools/\n\n# Predownloaded packages sources.\n/packages/*/cache\n/root-packages/*/cache\n/x11-packages/*/cache\n\n# Temp .git directories for packages built from local sources \"file://\"\n/*.git\n"
        },
        {
          "name": "CODEOWNERS",
          "type": "blob",
          "size": 7.3681640625,
          "content": "# Default assignment: frequent contributors from @termux.\n* @Grimler91 @TomJo2000\n\n# Build system.\n/build-all.sh @Grimler91\n/build-package.sh @Grimler91\n/clean.sh @Grimler91\n/scripts/ @Grimler91\n\n# GN setup script\n/scripts/build/setup/termux_setup_gn.sh @thunder-coding\n\n# GIR (GObject Introspection Repository) setup script and other stuff\n/packages/gobject-introspection/gi-cross-launcher-on-device.in @xtkoba\n/packages/gobject-introspection/gi-cross-launcher.sh @xtkoba\n/packages/ldd/ @xtkoba\n/scripts/build/setup/termux_setup_gir.sh @xtkoba\n\n# Pre-generated XML dumps for GIR\n/packages/*/gir/ @xtkoba\n/x11-packages/*/gir/ @xtkoba\n\n# Packages owned by @finagolfin\n/packages/libdispatch/ @finagolfin\n/packages/libllvm/ @finagolfin\n/packages/llbuild/ @finagolfin\n/packages/swift/ @finagolfin\n\n# Packages owned by @DLC01\n/packages/exhale/ @DLC01\n/packages/fdkaac/ @DLC01\n/packages/libfdk-aac/ @DLC01\n\n# Packages owned by @Grimler91\n/packages/chezmoi/ @Grimler91\n/packages/docopt/ @Grimler91\n/packages/game-repo/ @Grimler91\n/packages/libprotobuf-c/ @Grimler91\n/packages/libqrencode/ @Grimler91\n/packages/mpdscribble/ @Grimler91\n/packages/pass-otp/ @Grimler91\n/packages/root-repo/ @Grimler91\n/packages/runit/ @Grimler91\n/packages/science-repo/ @Grimler91\n/packages/smalltalk/ @Grimler91\n/packages/teckit/ @Grimler91\n/packages/termux-services/ @Grimler91\n/packages/texlive-bin/ @Grimler91\n\n# Packages owned by @ian4hu\n/packages/php-apcu/ @ian4hu\n/packages/php-imagick/ @ian4hu\n/packages/php-psr/ @ian4hu\n/packages/php-zephir-parser/ @ian4hu\n/packages/re2c/ @ian4hu\n\n# Packages owned by @kcubeterm\n/packages/brook/ @kcubeterm\n/packages/delve/ @kcubeterm\n/packages/duf/ @kcubeterm\n/packages/fzy/ @kcubeterm\n/packages/gh/ @kcubeterm\n/packages/gping/ @kcubeterm\n/packages/hors/ @kcubeterm\n/packages/k9s/ @kcubeterm\n/packages/lazygit/ @kcubeterm\n/packages/libtorrent/ @kcubeterm\n/packages/lsd/ @kcubeterm\n/packages/pup/ @kcubeterm\n/packages/ripgrep-all/ @kcubeterm\n/packages/rush/ @kcubeterm\n/packages/rustscan/ @kcubeterm\n/packages/shc/ @kcubeterm\n/packages/shell2http/ @kcubeterm\n/packages/shiori/ @kcubeterm\n/packages/youtubedr/ @kcubeterm\n\n# Packages owned by @librehat\n/packages/flatbuffers/ @librehat\n/packages/mimetic/ @librehat\n\n# Packages owned by @s00se\n/packages/dns2tcp/ @s00se\n/packages/proxmark3/ @s00se\n/packages/recode/ @s00se\n\n# Packages owned by @michalbednarski\n/packages/proot/ @michalbednarski\n/packages/termux-am/ @michalbednarski\n\n# Packages owned by @MrAdityaAlok\n/packages/haskell-base-compat-batteries/ @MrAdityaAlok\n/packages/haskell-cabal-syntax/ @MrAdityaAlok\n/packages/ghc-libs/ @MrAdityaAlok\n/packages/haskell-these/ @MrAdityaAlok\n/packages/haskell-hashable/ @MrAdityaAlok\n/packages/haskell-edit-distance/ @MrAdityaAlok\n/packages/haskell-hackage-security/ @MrAdityaAlok\n/packages/haskell-ed25519/ @MrAdityaAlok\n/packages/haskell-indexed-traversable/ @MrAdityaAlok\n/packages/haskell-transformers-compat/ @MrAdityaAlok\n/packages/haskell-witherable/ @MrAdityaAlok\n/packages/haskell-text-short/ @MrAdityaAlok\n/packages/haskell-bifunctors/ @MrAdityaAlok\n/packages/haskell-http/ @MrAdityaAlok\n/packages/haskell-integer-logarithms/ @MrAdityaAlok\n/packages/haskell-statevar/ @MrAdityaAlok\n/packages/haskell-attoparsec/ @MrAdityaAlok\n/packages/haskell-diff/ @MrAdityaAlok\n/packages/haskell-regex-tdfa/ @MrAdityaAlok\n/packages/haskell-lukko/ @MrAdityaAlok\n/packages/haskell-zlib/ @MrAdityaAlok\n/packages/haskell-semialign/ @MrAdityaAlok\n/packages/haskell-network-uri/ @MrAdityaAlok\n/packages/haskell-contravariant/ @MrAdityaAlok\n/packages/haskell-scientific/ @MrAdityaAlok\n/packages/haskell-strict/ @MrAdityaAlok\n/packages/haskell-network/ @MrAdityaAlok\n/packages/haskell-quickcheck/ @MrAdityaAlok\n/packages/haskell-base-orphans/ @MrAdityaAlok\n/packages/haskell-time-compat/ @MrAdityaAlok\n/packages/haskell-tar/ @MrAdityaAlok\n/packages/haskell-uuid-types/ @MrAdityaAlok\n/packages/haskell-semigroupoids/ @MrAdityaAlok\n/packages/haskell-th-abstraction/ @MrAdityaAlok\n/packages/haskell-regex-base/ @MrAdityaAlok\n/packages/haskell-cabal/ @MrAdityaAlok\n/packages/haskell-data-fix/ @MrAdityaAlok\n/packages/haskell-regex-posix/ @MrAdityaAlok\n/packages/haskell-resolv/ @MrAdityaAlok\n/packages/haskell-base-compat/ @MrAdityaAlok\n/packages/haskell-cryptohash-sha256/ @MrAdityaAlok\n/packages/cabal-install/ @MrAdityaAlok\n/packages/haskell-th-compat/ @MrAdityaAlok\n/packages/haskell-unordered-containers/ @MrAdityaAlok\n/packages/haskell-aeson/ @MrAdityaAlok\n/packages/haskell-echo/ @MrAdityaAlok\n/packages/haskell-base16-bytestring/ @MrAdityaAlok\n/packages/haskell-async/ @MrAdityaAlok\n/packages/haskell-primitive/ @MrAdityaAlok\n/packages/haskell-tagged/ @MrAdityaAlok\n/packages/haskell-onetuple/ @MrAdityaAlok\n/packages/haskell-vector/ @MrAdityaAlok\n/packages/haskell-splitmix/ @MrAdityaAlok\n/packages/haskell-distributive/ @MrAdityaAlok\n/packages/haskell-dlist/ @MrAdityaAlok\n/packages/haskell-comonad/ @MrAdityaAlok\n/packages/haskell-indexed-traversable-instances/ @MrAdityaAlok\n/packages/haskell-assoc/ @MrAdityaAlok\n/packages/haskell-random/ @MrAdityaAlok\n/packages/haskell-base64-bytestring/ @MrAdityaAlok\n/packages/libdvbcsa/ @MrAdityaAlok\n/packages/tvheadend/ @MrAdityaAlok\n\n# Packages owned by @Neo-Oli\n/packages/cava/ @Neo-Oli\n/packages/colordiff/ @Neo-Oli\n/packages/ed/ @Neo-Oli\n/packages/libmesode/ @Neo-Oli\n/packages/libotr/ @Neo-Oli\n/packages/libsignal-protocol-c/ @Neo-Oli\n/packages/nyancat/ @Neo-Oli\n/packages/par2/ @Neo-Oli\n/packages/profanity/ @Neo-Oli\n/packages/tsocks/ @Neo-Oli\n/packages/tty-clock/ @Neo-Oli\n\n# Packages owned by @suhan-paradkar\n/packages/libsecret/ @suhan-paradkar\n/packages/mailutils/ @suhan-paradkar\n\n# Packages owned by @thunder-coding\n/packages/flyctl/ @thunder-coding\n/packages/git-sizer/ @thunder-coding\n/packages/gn/ @thunder-coding\n/packages/lychee/ @thunder-coding\n/packages/nodejs/ @thunder-coding\n/packages/nodejs-lts/ @thunder-coding\n/packages/silicon/ @thunder-coding\n/packages/slides/ @thunder-coding\n\n# Packages owned by @TomJo2000\n/packages/bash-completion/ @TomJo2000\n/packages/bash/ @TomJo2000\n/packages/borgbackup/ @TomJo2000\n/packages/eza/ @TomJo2000\n/packages/git-delta/ @TomJo2000\n/packages/gopass/ @TomJo2000\n/packages/less/ @TomJo2000\n/packages/lua-language-server/ @TomJo2000\n/packages/lua-lpeg/ @TomJo2000\n/packages/moreutils/ @TomJo2000\n/packages/mpv/ @TomJo2000\n/packages/ncdu/ @TomJo2000\n/packages/ncdu2/ @TomJo2000\n/packages/neovim/ @TomJo2000\n/packages/nerdfix/ @TomJo2000\n/packages/openssh/ @TomJo2000\n/packages/rip2/ @TomJo2000\n/packages/rsgain/ @TomJo2000\n/packages/shellcheck/ @TomJo2000\n/packages/starship/ @TomJo2000\n/packages/taplo/ @TomJo2000\n/packages/tmux/ @TomJo2000\n/packages/tree-sitter* @TomJo2000\n/packages/typst-lsp/ @TomJo2000\n/packages/typstfmt/ @TomJo2000\n/packages/zls/ @TomJo2000\n/packages/zrok/ @TomJo2000\n/packages/zsh/ @TomJo2000\n/x11-packages/alacritty/ @TomJo2000\n/x11-packages/jwm/ @TomJo2000\n/x11-packages/mpv-x/ @TomJo2000\n/x11-packages/qbittorrent/ @TomJo2000\n\n# Packages owned by @PeroSar\n/packages/gitui/ @PeroSar\n/packages/rxfetch/ @PeroSar\n\n# Packages owned by @2096779623\n/packages/alist/ @2096779623\n/packages/frp/ @2096779623\n\n# Packages owned by @twaik\n/x11-packages/termux-x11-nightly/ @twaik\n\n# Packages owned by @Maxython\n/packages/pacman/ @Maxython\n/packages/glibc-repo/ @Maxython\n\n# Misc\n/packages/blogc/ @rafaelmartins\n/packages/cfengine/ @craigcomstock\n/packages/composer/ @PuneetGopinath\n/packages/dart/ @samujjal-gogoi\n/packages/germanium/ @ravener\n/packages/gotop/ @medzikuser\n/packages/rust/ @kcotugno\n/packages/xmake/ @waruqi\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 24.673828125,
          "content": "# Contributing\n\nTermux is an open source application and it is built on users' contributions.\nHowever, most of work is done by Termux maintainers on their spare time and\ntherefore only priority tasks are being completed.\n\nDeveloper's wiki is available at https://github.com/termux/termux-packages/wiki.\n\n## How you can contribute to Termux project\n\n- **Reporting issues**\n\n  If you have found issue, let the community know about it.\n\n  Please be prepared that issue may not be resolved immediately. We will ignore\n  statements like \"solve it quickly\", \"urgently need solution\" and so on. Be\n  patient.\n\n  Avoid digging and commenting in old, already closed issues. Read them carefully\n  \\- likely they already give solution. If it didn't worked, only then open a new\n  one. Note that we will lock down issues that are really outdated.\n\n  You may report only issues happening within our official packages. Do not\n  submit issues happening in third-party software - we will ignore them.\n\n  Bugs reports for legacy Termux installations (Android 5.x / 6.x) are not\n  accepted. We already dropped support for these Android OS versions.\n\n- **Examining existing packages for potential issues**\n\n  There could be undiscovered bugs in packages. For example: unspecified\n  dependencies, unprefixed hardcoded FHS paths, crashes, etc.\n\n  If you can't submit a pull request with patches fixing the problem, you can\n  open new [issue](https://github.com/termux/termux-packages/issues/new/choose).\n\n- **Fixing known bugs**\n\n  Take a look at https://github.com/termux/termux-packages/issues. There many\n  issue tickets having tag `bug report` or `help wanted`. They all are waiting\n  to be resolved.\n\n- **Submitting new packages**\n\n  There are lots of unresolved [package requests](https://github.com/termux/termux-packages/issues?q=is%3Aissue+is%3Aopen+label%3A%22package+request%22).\n  Pay attention to tickets having tag `help wanted`.\n\n- **Keeping existing packages up-to-date**\n\n  Packages do not update themselves on their own. Someone needs to update build\n  script and patches. Usually they are handled by maintainers but things are\n  often outdated.\n\n  See [Updating packages](#updating-packages) for details.\n\n- **Hosting a package repository mirror**\n\n  Termux generates lots of traffic. Mirrors help to reduce load on primary\n  server, provide better download speeds and eliminate single point of failure.\n\n- **Donate**\n\n  See https://github.com/termux/termux-packages/wiki/Donate for details.\n\n## Requesting new package\n\nIf you are looking for specific package and didn't find it included in our\nrepositories, you can request it.\n\nOpen a new [issue](https://github.com/termux/termux-packages/issues/new/choose)\nfilling the `package request` template. You will need to provide at least\npackage description and its home page and URL to source repository. Remember\nthat your request will not be processed immediately.\n\nRequested package must comply with our [packaging policy](#packaging-policy).\n\n## Packaging policy\n\nThere are already more than 1000 packages added to Termux repositories. All\nof them needs to be maintained, kept up-to-date. Unlike the major distributions,\nour developers team is small and we also limited on server disk space.\n\nIn order to provide service at reasonable quality, requested packages should\nmet these conditions:\n\n- **Packages must be active, well-known projects**\n\n  Software available in major Linux distributions has more chances to be\n  included into Termux repositories. We will not accept outdated, dead projects\n  as well as projects which do not have active community.\n\n- **Packages must be licensed under widely recognized open source license**\n\n  Software should be licensed under Apache, BSD, GNU GPL, MIT or other well\n  known open-source licenses. Software for which the source is available but\n  distributed under non-free conditions is processed on an individual basis.\n\n  Software which is either closed-source, contain binary-only components or\n  is distributed under End User License Agreement is not accepted.\n\n- **Not installable through cpan, gem, npm, pip or cargo**\n\n  These packages should be installed through `cpan`, `gem`, `npm`, `pip`, `cargo` and\n  so on.\n\n  Packaging modules for Perl, Ruby, Node.js, is problematic, especially\n  when it comes to cross-compiling native extensions.\n\n- **Not taking too much disk space**\n\n  The size of resulting package should be less than 100 MiB.\n\n  Since software is being compiled for 4 CPU architectures (aarch64, arm,\n  i686, x86_64), effective disk usage is 4 times bigger than size of single\n  .deb file. We are limited on disk space and prefer many small packages\n  over one big.\n\n  Exceptions are made on individual basis and only for packages providing\n  important functionality.\n\n- **Not serving duplicated functionality**\n\n  Please avoid submitting packages which duplicate functionality of already\n  present ones.\n\n  The more useless packages in repositories, the less overall packaging and\n  service quality - _remembering that our resources are limited?_\n\n- **Not serving hacking, phishing, spamming, spying, ddos functionality**\n\n  We do not accept packages which serve solely destructive or privacy violation\n  purposes, including but not limited to pentesting, phishing, bruteforce,\n  sms/call bombing, DDoS attaks, OSINT.\n\n**Important**: standalone library packages are of interest mostly for developers\nand we will not package them unless required as dependency for another package.\nThis is not a strong rule, but needed to ensure that repository is clean and\nprovides content useful for average Termux user.\n\nPackages that require root permission to get working or rely on features that\nare available only with SELinux permissive mode or require custom firmware\nare handled in a dedicated\n[apt repository](https://packages-cf.termux.dev/apt/termux-root/) whose build\nrecipes you can find in [root-packages directory](/root-packages).\nRemember that Termux is designed primarily for non-root use and we may\nremove functionality requiring root from packages if it interfere with\nnon-root usage or cause build time issues.\n\nPackages that do not comply with this policy may be requested in User Repository:\nhttps://github.com/termux-user-repository/tur\n\n## Submitting pull requests\n\nContributors take the all responsibility for their submissions. Maintainers may\nprovide some help with fixing your pull request or give some recommendations,\nbut that DOES NOT mean they will do all work instead of you.\n\n**Minimal requirements:**\n\n- Experience with Linux distribution like Debian (preferred), Arch, Fedora, etc.\n- Experience with compiling software from source.\n- Good shell scripting skills.\n- You have read https://github.com/termux/termux-packages/wiki.\n\nIf you never used Linux distribution or Termux was your first experience with\nLinux environment, we strongly recommending to NOT send pull requests since\nwe will reject low quality work.\n\nDo not forget about [packaging policy](#packaging-policy) when submitting a\nnew package, as your pull request will be closed without merge.\n\nDo not send disruptive changes, like without reason reverting commits or\ndeleting files, creating spam content, etc. Authors of such pull requests may\nbe blocked from contributing to [Termux](https://github.com/termux) project.\n\n### Submitting new packages: checklist\n\nBesides violation of [packaging policy](#packaging-policy), there is a\nnumber of typical mistakes that could be made when submittung a pull\nrequest with new package. Pay attention to things listed below.\n\n1. **Versioning: format**\n\n   Package versions must begin with a number and should not contain special\n   characters except `.` (dot), `-` (minus), `+` (plus). Under certain cases\n   the colon symbol (`:`) is allowed - for specifying epoch.\n\n   Examples of valid version specification: `1.0`, `20201001`, `10a`.\n\n   Example of version with epoch: `1:2.6.0`\n\n2. **Versioning: if using specific Git commit**\n\n   `TERMUX_PKG_VERSION` must contain a commit date in case if you are using\n   specific Git commit. Date format should be `YYYY.MM.DD` or `YYYYMMDD`.\n\n   Never use Git hash, branch name or something else that can break version\n   tracking in package manager!\n\n3. **Source URL**\n\n   Source URL must be deterministic and guarantee that it always pointing\n   on content matching version specified in `TERMUX_PKG_VERSION` and\n   checksum in `TERMUX_PKG_SHA256`. In very rare cases we could make\n   exception, but don't expect that it will apply to your pull request.\n\n   Don't hardcode version in source code URL. Reference it through variable\n   `${TERMUX_PKG_VERSION}` and remember that Bash supports slicing and\n   other ways to manipulate content referenced through variables.\n\n   Examples:\n\n   ```\n   TERMUX_PKG_VERSION=1.0\n   TERMUX_PKG_SRCURL=https://example.com/archive/package-${TERMUX_PKG_VERSION}.tar.gz\n   ```\n\n   ```\n   TERMUX_PKG_VERSION=5:4.11.3\n   TERMUX_PKG_SRCURL=https://example.com/archive/package-${TERMUX_PKG_VERSION:2}.tar.gz\n   ```\n\n4. **Dependencies: build tools**\n\n   Don't specify common build tools in package dependencies. This includes\n   packages like `autoconf`, `automake`, `bison`, `clang`, `ndk-sysroot`\n   and many others.\n\n5. **Dependencies: build & run time**\n\n   `TERMUX_PKG_DEPENDS` should contain only dependencies required during\n   package run time.\n\n   All dependencies that are used only during build time, for example\n   static libraries, should be specified in `TERMUX_PKG_BUILD_DEPENDS`.\n\n6. **Patches: format**\n\n   Patches are standard diff output generated by GNU diff or Git. Please\n   avoid editing patches by hand, especially if you don't understand\n   format internals.\n\n   Patch is usually created by\n\n   ```\n   diff -uNr sourcedir sourcedir.mod > filename.patch\n   ```\n\n7. **Patches: hardcoded path references**\n\n   Software often relies on paths defined by Filesystem Hierarchy Standard:\n\n   - `/bin`\n   - `/etc`\n   - `/home`\n   - `/run`\n   - `/sbin`\n   - `/tmp`\n   - `/usr`\n   - `/var`\n\n   These paths do not exist in Termux and have been replaced by prefixed\n   equivalents. Termux installation prefix is\n\n   ```\n   /data/data/com.termux/files/usr\n   ```\n\n   and can be considered as virtual rootfs.\n\n   Home directory is stored outside of prefix:\n\n   ```\n   /data/data/com.termux/files/home\n   ```\n\n   Don't hardcode home and prefix, use shortcuts `@TERMUX_HOME@` and\n   `@TERMUX_PREFIX@` respectively. Patch files are preprocessed before\n   being applied.\n\n   Directories `/run` and `/sbin` should be replaced by\n   `@TERMUX_PREFIX@/var/run` and `@TERMUX_PREFIX@/bin` respectively.\n\n8. **Build configuration: compiler flags**\n\n   You should not touch `CFLAGS`, `CXXFLAGS`, `CPPFLAGS` or `LDFLAGS`\n   variables unless this is necessary to make build working.\n\n9. **Build configuration: autotools**\n\n   The `build-package.sh` does pretty much work to properly configure\n   package builds using GNU Autotools. Therefore you do not need to\n   specify flags like\n\n   - `--prefix`\n   - `--host`\n   - `--build`\n   - `--disable-nls`\n   - `--disable-rpath`\n\n   and some others.\n\n   Additional options to `./configure` can be passed through variable\n   `TERMUX_PKG_EXTRA_CONFIGURE_ARGS`.\n\n---\n\n# Working with packages\n\nAll software available in Termux repositories aims to be compatible with Android\nOS and is built by Android NDK. This often introduces compatibility issues as\nAndroid (specifically Termux) is not a standard platform. Do not expect there\nare exist package recipes available out-of-box.\n\n## Commit guidelines\n\nCommit messages should describe the changes done, so that maintainers can understand what was done, and to what package or scope, without having to look at the code changes. One good (but not mandatory) way to make sure the commit message fulfills these requirements is to write it on the format:\n\n```\n<commitType>(<repo>/<package>): (Summary of change(s) made/Short description of the change)\n\n[An optional but **highly recommended** commit message describing the changes made in the commit]\n\n[Fixes (termux/repo)#<issue number>]\n[Closes (termux/repo)#<pr number>]\n```\n\nWhere:\n\n- `<repo>` may be one of `main`, `root` or `x11`. It is the repository in which the package resides.\n  Other definition for this property can be done as the name property of the package directory as defined in `repo.json` file after removing the 'termux-' prefix (if any).\n- `<package>` is the actual name of the package.\n\nAny line in the commit **should not exceed 80 characters**. In case it does, consider using different wordings or language style which better summarizes the changes done.\n\n- `<commitType>` describes the type of commit. Types of commits:\n  - `addpkg(<repo>/<package>)`: A new package was added.\n    Commit summary should include a short description of the package. Optional extended commit message may include usage instructions for the package and/or reasons for inclusion.\n  - `bump(<repo>/<package>)`: One or more package(s) was/were updated.\n    Commit summary should include the newer version/tag to which the package was updated to. Optional extended commit message may include new list of features in the new version, and detailed list of changes in build scripts and/or patches\n  - `fix(<repo>/<package>)`: Fix a Termux specific bug in a package\n    Commit summary should contain a summary of old incorrect behaviour of the package. Extended commit message may contain a deeper analysis of the bug.\n  - `dwnpkg(<repo>/<package>)`: One or more package(s) was/were downgraded due to build issues or potential bugs\n    Commit summary should justify the downgrading of the package(s). If the summary can't completely describe the reason for downgrade, extended commit message should contain full reason for downgrade.\n  - `disable(<repo>/<package>)`: A package was disabled. The short description should contain the reason for disabling of the package.\n    If the reason doesn't fit well in the sunmary, extended commit message should contain the complete reason for disabling.\n  - `enhance(<repo>/<package>)`: Enable a feature in a package that was earlier not enabled.\n    Optional (but highly recommended) extended commit message may contain detailed summary of the enabled feature(s) and a basic use case\n  - `chore`: Any housekeeping change or a change which does not affect the user in any way.\n  - `rebuild`: Rebuild a package to link against newer version of shared library\n    Special cases:\n    - When mass rebuilding packages depending on a major package (e.g. openssl), consider using this format:\n      ```\n      rebuild(deps:main/openssl): link against OpenSSL 3.0\n      ```\n  - `scripts(path/to/script)`: Any change affecting our build scripts or other scripts which are not a part of build recipies including toolchain setup scripts.\n  - `ci(action_file_without_extension)`: Any change that affects GitHub Actions yaml file(s) and/or scripts used exclusively by it.\n\nExamples of good commit messages:\n\n1. ```\n   bump(main/nodejs): v18.2.0\n   ```\n\n2. ```\n   dwnpkg(main/htop): v2.2.0\n\n   v3.x needs access to /proc/stat which is now restricted by Android\n   ```\n\n3. ```\n   enhance,bump(main/nodejs): v18.2.0 and use shared libuv\n\n   # Describe the technical reasons of how using shared libuv is beneficial\n   ```\n\n4. ```\n   disable(main/nodejs): use LTS version instead\n\n   PS: This won't ever happen. Just an example :P\n   ```\n\n5. ```\n   ci(package_updates): panic on invalid versions\n   ```\n\n6. ```\n   chore,scripts(bin/revbump): support passing path to build.sh\n\n   Earlier only package directories defined in `repo.json` could be revbumped.\n   Now you can pass the path to build.sh\n   ```\n\n7. ```\n   fix(main/nodejs{,-lts}): test failures for `process.report`\n\n   This shows an example when scope can be minimised if they belong to the\n   same repository, and have same initials as well as are very similar in\n   nature.\n\n   The same can also be used for liblua as main/liblua{51,52,53,54}\n   ```\n\n8. ```\n   fix(main/vim{,-python},x11/vim-gtk): cursor flickering under certain rare conditions\n\n   Although the above commit message is quite long and also exceeds the\n   recommended length of a line in commit message. Such commits may be accepted\n   in cases where the changes are very similar for all three packages.\n   ```\n\n### Special notes for newbies who're just getting started with Open Source\n\nIn order to encourage new contributors and help them contribute to open source, the above mentioned commit requirements should be optionally relaxed. In cases where commit messages need to be changed, the PR may be **Squashed and Merged** or may be merged manually from the command line.\n\n#### Notes for merging PRs from command line\n\n1. It is recommended to use the [GitHub CLI (`gh`)](https://cli.github.com) in order to fetch the contributor's branch.\n\n   ```sh\n   gh pr checkout <PR Number>\n   ```\n\n2. After checking out the branch, amend the commit message and optionally rebase against the master branch (if necessary).\n\n   When merging manually make sure that you give proper credits for the original patch to it's author by adding a `Co-authored-by: ` line. See https://docs.github.com/en/pull-requests/committing-changes-to-your-project/creating-and-editing-commits/creating-a-commit-with-multiple-authors for more details. Also add a `Closes #<PR number>`.\n\n   **Note** that the `Closes` and `Co-authored-by` lines are needed only when the PR author has disabled ability for maintainers to push to their branches. If possible, it is recommended to force-push to user's branch and then push the change to master branch since GitHub UI then will detect a merge.\n\n   ```sh\n   git fetch\n   git rebase origin/master\n\n   git commit --amend # Will open up your editor to amend the commit message\n\n   # If possible push to PR author's branch\n   # Note: no need to configure remote branch if you checked\n   # out using GitHub CLI.\n   # git push -f\n   ```\n\n3. Note down the branch name\n\n   ```sh\n   git branch\n   ```\n\n4. Merge the branch manually\n\n   ```sh\n   git switch master\n\n   # Note depending upon your git configuration, the default\n   # merge strategy may vary. It is recommended to pass the\n   # merge strategy as a flag to git.\n   git merge <branch name>\n   ```\n\n5. Congratulate the user on sending their (probably) first OSS contribution!\n\n6. Note that sometimes GitHub UI may fail to detect the merge, in such cases make sure that you tell the contributor that their PR was merged manually and they'll recieve their due credits in the repository contribution graph.\n\n## Basics\n\nEach package is a defined through the `build.sh` script placed into directory\n`./packages/<name>/` where `<name>` is the actual name of package in lower case.\nFile `build.sh` is a shell (Bash) script that defines some properties like\ndependencies, description, home page through environment variables. Sometimes\nit also used to override default packaging steps defined in our build system.\n\nHere is example of `build.sh`:\n\n```.sh\nTERMUX_PKG_HOMEPAGE=https://example.com\nTERMUX_PKG_DESCRIPTION=\"Termux package\"\nTERMUX_PKG_LICENSE=\"GPL-3.0\"\nTERMUX_PKG_MAINTAINER=\"@github\"\nTERMUX_PKG_VERSION=1.0\nTERMUX_PKG_SRCURL=https://example.com/sources-${TERMUX_PKG_VERSION}.tar.gz\nTERMUX_PKG_SHA256=0000000000000000000000000000000000000000000000000000000000000000\nTERMUX_PKG_DEPENDS=\"libiconv, ncurses\"\n```\n\nIt can contain some additional variables:\n\n- `TERMUX_PKG_BUILD_IN_SRC=true`\n\n  Use this variable if package supports in-tree builds only, for example if\n  package uses raw Makefile instead of build system like CMake.\n\n- `TERMUX_PKG_PLATFORM_INDEPENDENT=true`\n\n  This variable specifies that package is platform-independent and can run\n  on any device regardless of CPU architecture.\n\n`TERMUX_PKG_LICENSE` should specify the license using SPDX license identifier\nor can contain values \"custom\" or \"non-free\". Multiple licenses should be\nseparated by commas.\n\n`TERMUX_PKG_SRCURL` should contain URL only for the official source bundle.\nUse of forks is allowed only under a good reason.\n\nMore about `build.sh` variables you can read on [developer's wiki](https://github.com/termux/termux-packages/wiki/Creating-new-package#table-of-available-package-control-fields).\n\n### Creating patch files\n\nMany packages will require changes that can't be done through configuring\nbuild system. In this cases you need to directly modify the source code\nand obtain files that describe your changes in machine readable format.\n\nWe use patches made in [Unified Format](https://www.gnu.org/software/diffutils/manual/html_node/Detailed-Unified.html)\ngenerated by either GNU `diff`, `git` or other compatible utility.\n\nSee below on how to make a patch with GNU `diff`:\n\n1. Get source code, for example with this command:\n\n   ```\n   cd ./packages/your-package\n   (source build.sh 2>/dev/null; curl -LO \"$TERMUX_PKG_SRCURL\")\n   ```\n\n2. Extract tarball and make a copy of source code tree:\n\n   ```\n   tar xf package-1.0.tar.gz\n   cp -a package-1.0 package-1.0.mod\n   ```\n\n3. Change current directory to source code tree:\n\n   ```\n   cd package-1.0.mod\n   ```\n\n4. Make changes:\n\n   ```\n   vim sourcefile.c\n   ```\n\n5. Generate difference between original and modified sources:\n\n   ```\n   cd ..\n   diff -uNr package-1.0 package-1.0.mod > very-nice-improvement.patch\n   ```\n\nPatch file names should be self descriptive, so it will be easier for other\npeople to understand what your patch does. Also it is preferred that every\nmodification is stored in a separate patch file.\n\n## Updating packages\n\n[![asciicast](https://asciinema.org/a/gVwMqf1bGbqrXmuILvxozy3IG.svg)](https://asciinema.org/a/gVwMqf1bGbqrXmuILvxozy3IG?autoplay=1&speed=2.0)\n\nYou can check which packages are out-of-date by visiting Termux page on\n[Repology](https://repology.org/projects/?inrepo=termux&outdated=1).\n\n### General package update procedure\n\nUsually to update packages you need to just modify few variables and commit\nthe changes.\n\n1. Assign the new version value to `TERMUX_PKG_VERSION`. Be careful to not\n   remove the epoch (numbered prefix, e.g `1:`, `2:`) accidentally.\n2. If there is `TERMUX_PKG_REVISION` variable set, remove it. Revision\n   should be set only for subsequent package builds within the same version.\n3. Download the source code archive and compute SHA-256 checksum:\n   ```\n   cd ./packages/${YOUR_PACKAGE}\n   (source build.sh 2>/dev/null; curl -LO \"$TERMUX_PKG_SRCURL\")\n   ```\n4. Assign the new checksum value to `TERMUX_PKG_SHA256`.\n\n### Dealing with patch errors\n\nMajor changes introduced to packages often make current patches incompatible\nwith newer package version. Unfortunately, there no universal guide about\nfixing patch issues as workaround is always based on changes introduced to\nthe new source code version.\n\nHere are few things you may to try:\n\n1. If patch fixing particular known upstream issue, check the project's VCS\n   for commits fixing the issue. There is a chance that patch is no longer\n   needed.\n\n2. Inspecting the failed patch file and manually applying changes to source\n   code. Do so only if you understand the source code and changes introduced\n   by patch.\n\n   Regenerate patch file, e.g. with:\n\n   ```\n   diff -uNr package-1.0 package-1.0.mod > previously-failed-patch-file.patch\n   ```\n\nAlways check the CI (Github Actions) status for your pull request. If it fails,\nthen either fix or close it. Maintainers can fix it on their own, if issues are\nminor. But they won't rewrite whole your submission.\n\n## Rebuilding package with no version change\n\nChanges to patch files and build configuration options will imply package\nrebuild. In order to make package recognized as update, a build number should\nbe set. This is done through defining variable `TERMUX_PKG_REVISION` or\nincrementing its value if already set.\n\n`TERMUX_PKG_REVISION` should be set exactly below `TERMUX_PKG_VERSION`:\n\n```.sh\nTERMUX_PKG_VERSION=1.0\nTERMUX_PKG_REVISION=4\n```\n\nIf package version has been updated, `TERMUX_PKG_REVISION` should be removed.\n\n## Downgrading the package or changing versioning scheme\n\nIf package needs to be downgraded or for versioning scheme needs to be changed,\nyou need to set or increment package epoch. This is needed to tell package\nmanager force recognize new version as package update.\n\nEpoch should be specified in same variable as version (`TERMUX_PKG_VERSION`),\nbut its value will take different format (`{EPOCH}:{VERSION}`):\n\n```.sh\nTERMUX_PKG_VERSION=1:5.0.0\n```\n\nNote that if you are not @termux collaborator, pull request must contain a\n_description_ why you are submitting a package downgrade. All pull requests\nwhich submit package downgrading without any serious reason will be rejected.\n\n## Common build issues\n\n```\nNo files in package. Maybe you need to run autoreconf -fi before configuring?\n```\n\nMeans that build system cannot find the Makefile. Depending on project, there\nare some tips for trying:\n\n- Set `TERMUX_PKG_BUILD_IN_SRC=true` - applicable to Makefile-only projects.\n- Run `./autogen.sh` or `autoreconf -fi` in `termux_step_pre_configure`. This\n  is applicable to projects that use Autotools.\n\n```\nNo LICENSE file was installed for ...\n```\n\nThis error happens when build system cannot find license file and it should be\nspecified manually through `TERMUX_PKG_LICENSE_FILE`.\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 0.4912109375,
          "content": "# License for package patches\n\nThe scripts and patches to build each package is licensed under the same\nlicense as the actual package (so the patches and scripts to build bash are\nlicensed under the same license as bash, while the patches and scripts to build\npython are licensed under the same license as python).\n\n# License for the build infrastructure\n\nFor build infrastructure outside the `packages/` folder the license is\n[Apache License, Version 2.0](https://www.apache.org/licenses/LICENSE-2.0).\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.828125,
          "content": "# Termux packages\n\n![GitHub repo size](https://img.shields.io/github/repo-size/termux/termux-packages)\n[![Packages last build status](https://github.com/termux/termux-packages/workflows/Packages/badge.svg)](https://github.com/termux/termux-packages/actions)\n[![Docker image status](https://github.com/termux/termux-packages/workflows/Docker%20image/badge.svg)](https://hub.docker.com/r/termux/package-builder)\n[![Repology metadata](https://github.com/termux/repology-metadata/workflows/Repology%20metadata/badge.svg)](https://repology.org/repository/termux)\n[![Join the chat at https://gitter.im/termux/termux](https://badges.gitter.im/termux/termux.svg)](https://gitter.im/termux/termux)\n[![Join the Termux discord server](https://img.shields.io/discord/641256914684084234.svg?label=&logo=discord&logoColor=ffffff&color=5865F2)](https://discord.gg/HXpF69X)\n\n[![Repository status](https://repology.org/badge/repository-big/termux.svg)](https://repology.org/repository/termux)\n\n<img src=\".github/static/hosted-by-hetzner.png\" alt=\"Hosted by Hetzner\" width=\"128px\"></img>\n\nThis project contains scripts and patches to build packages for the [Termux](https://github.com/termux/termux-app)\nAndroid application.\n\nQuick how-to about Termux package management is available at [Package Management](https://github.com/termux/termux-packages/wiki/Package-Management). It also has info on how to fix **`repository is under maintenance or down`** errors when running `apt` or `pkg` commands.\n\n## Contributing\n\nRead [CONTRIBUTING.md](/CONTRIBUTING.md) and [Developer's Wiki](https://github.com/termux/termux-packages/wiki) for more details.\n\n## Contacts\n\nGeneral mailing list: https://groups.io/g/termux\n\nDeveloper mailing list: https://groups.io/g/termux-dev\n\nGeneral chat: https://gitter.im/termux/termux or #termux on IRC/libera.chat.\n\nDeveloper chat: https://gitter.im/termux/dev.\n"
        },
        {
          "name": "build-all.sh",
          "type": "blob",
          "size": 2.814453125,
          "content": "#!/bin/bash\n# build-all.sh - script to build all packages with a build order specified by buildorder.py\n\nset -e -u -o pipefail\n\nTERMUX_SCRIPTDIR=$(cd \"$(realpath \"$(dirname \"$0\")\")\"; pwd)\n\n# Store pid of current process in a file for docker__run_docker_exec_trap\nsource \"$TERMUX_SCRIPTDIR/scripts/utils/docker/docker.sh\"; docker__create_docker_exec_pid_file\n\n\nif [ \"$(uname -o)\" = \"Android\" ] || [ -e \"/system/bin/app_process\" ]; then\n\techo \"On-device execution of this script is not supported.\"\n\texit 1\nfi\n\n# Read settings from .termuxrc if existing\ntest -f \"$HOME\"/.termuxrc && . \"$HOME\"/.termuxrc\n: ${TERMUX_TOPDIR:=\"$HOME/.termux-build\"}\n: ${TERMUX_ARCH:=\"aarch64\"}\n: ${TERMUX_DEBUG_BUILD:=\"\"}\n: ${TERMUX_INSTALL_DEPS:=\"-s\"}\n# Set TERMUX_INSTALL_DEPS to -s unless set to -i\n\n_show_usage() {\n\techo \"Usage: ./build-all.sh [-a ARCH] [-d] [-i] [-o DIR]\"\n\techo \"Build all packages.\"\n\techo \"  -a The architecture to build for: aarch64(default), arm, i686, x86_64 or all.\"\n\techo \"  -d Build with debug symbols.\"\n\techo \"  -i Build dependencies.\"\n\techo \"  -o Specify deb directory. Default: debs/.\"\n\texit 1\n}\n\nwhile getopts :a:hdio: option; do\ncase \"$option\" in\n\ta) TERMUX_ARCH=\"$OPTARG\";;\n\td) TERMUX_DEBUG_BUILD='-d';;\n\ti) TERMUX_INSTALL_DEPS='-i';;\n\to) TERMUX_OUTPUT_DIR=\"$(realpath -m \"$OPTARG\")\";;\n\th) _show_usage;;\n\t*) _show_usage >&2 ;;\nesac\ndone\nshift $((OPTIND-1))\nif [ \"$#\" -ne 0 ]; then _show_usage; fi\n\nif [[ ! \"$TERMUX_ARCH\" =~ ^(all|aarch64|arm|i686|x86_64)$ ]]; then\n\techo \"ERROR: Invalid arch '$TERMUX_ARCH'\" 1>&2\n\texit 1\nfi\n\nBUILDSCRIPT=$(dirname \"$0\")/build-package.sh\nBUILDALL_DIR=$TERMUX_TOPDIR/_buildall-$TERMUX_ARCH\nBUILDORDER_FILE=$BUILDALL_DIR/buildorder.txt\nBUILDSTATUS_FILE=$BUILDALL_DIR/buildstatus.txt\n\nif [ -e \"$BUILDORDER_FILE\" ]; then\n\techo \"Using existing buildorder file: $BUILDORDER_FILE\"\nelse\n\tmkdir -p \"$BUILDALL_DIR\"\n\t\"$TERMUX_SCRIPTDIR/scripts/buildorder.py\" > \"$BUILDORDER_FILE\"\nfi\nif [ -e \"$BUILDSTATUS_FILE\" ]; then\n\techo \"Continuing build-all from: $BUILDSTATUS_FILE\"\nfi\n\nexec >\t>(tee -a \"$BUILDALL_DIR\"/ALL.out)\nexec 2> >(tee -a \"$BUILDALL_DIR\"/ALL.err >&2)\ntrap 'echo ERROR: See $BUILDALL_DIR/${PKG}.err' ERR\n\nwhile read -r PKG PKG_DIR; do\n\t# Check build status (grepping is a bit crude, but it works)\n\tif [ -e \"$BUILDSTATUS_FILE\" ] && grep \"^$PKG\\$\" \"$BUILDSTATUS_FILE\" >/dev/null; then\n\t\techo \"Skipping $PKG\"\n\t\tcontinue\n\tfi\n\n\techo -n \"Building $PKG... \"\n\tBUILD_START=$(date \"+%s\")\n\tbash -x \"$BUILDSCRIPT\" -a \"$TERMUX_ARCH\" $TERMUX_DEBUG_BUILD \\\n\t\t${TERMUX_OUTPUT_DIR+-o $TERMUX_OUTPUT_DIR} $TERMUX_INSTALL_DEPS \"$PKG_DIR\" \\\n\t\t> \"$BUILDALL_DIR\"/\"${PKG}\".out 2> \"$BUILDALL_DIR\"/\"${PKG}\".err\n\tBUILD_END=$(date \"+%s\")\n\tBUILD_SECONDS=$(( BUILD_END - BUILD_START ))\n\techo \"done in $BUILD_SECONDS\"\n\n\t# Update build status\n\techo \"$PKG\" >> \"$BUILDSTATUS_FILE\"\ndone<\"${BUILDORDER_FILE}\"\n\n# Update build status\nrm -f \"$BUILDSTATUS_FILE\"\necho \"Finished\"\n"
        },
        {
          "name": "build-package.sh",
          "type": "blob",
          "size": 29.5615234375,
          "content": "#!/bin/bash\n# shellcheck disable=SC1117\n\n# Setting the TMPDIR variable\n: \"${TMPDIR:=/tmp}\"\nexport TMPDIR\n\n# Set the build-package.sh call depth\n# If its the root call, then create a file to store the list of packages and their dependencies\n# that have been compiled at any instant by recursive calls to build-package.sh\nif [[ ! \"$TERMUX_BUILD_PACKAGE_CALL_DEPTH\" =~ ^[0-9]+$ ]]; then\n\texport TERMUX_BUILD_PACKAGE_CALL_DEPTH=0\n\texport TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH=\"${TMPDIR}/build-package-call-built-packages-list-$(date +\"%Y-%m-%d-%H.%M.%S.\")$((RANDOM%1000))\"\n\texport TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH=\"${TMPDIR}/build-package-call-building-packages-list-$(date +\"%Y-%m-%d-%H.%M.%S.\")$((RANDOM%1000))\"\n\techo -n \" \" > \"$TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH\"\n\ttouch \"$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\"\nelse\n\texport TERMUX_BUILD_PACKAGE_CALL_DEPTH=$((TERMUX_BUILD_PACKAGE_CALL_DEPTH+1))\nfi\n\nset -e -o pipefail -u\n\ncd \"$(realpath \"$(dirname \"$0\")\")\"\nTERMUX_SCRIPTDIR=$(pwd)\nexport TERMUX_SCRIPTDIR\n\n# Store pid of current process in a file for docker__run_docker_exec_trap\nsource \"$TERMUX_SCRIPTDIR/scripts/utils/docker/docker.sh\"; docker__create_docker_exec_pid_file\n\n# Source the `termux_package` library.\nsource \"$TERMUX_SCRIPTDIR/scripts/utils/termux/package/termux_package.sh\"\n\nexport SOURCE_DATE_EPOCH=${SOURCE_DATE_EPOCH:-$(git -c log.showSignature=false log -1 --pretty=%ct 2>/dev/null || date \"+%s\")}\n\nif [ \"$(uname -o)\" = \"Android\" ] || [ -e \"/system/bin/app_process\" ]; then\n\tif [ \"$(id -u)\" = \"0\" ]; then\n\t\techo \"On-device execution of this script as root is disabled.\"\n\t\texit 1\n\tfi\n\n\t# This variable tells all parts of build system that build\n\t# is performed on device.\n\texport TERMUX_ON_DEVICE_BUILD=true\nelse\n\texport TERMUX_ON_DEVICE_BUILD=false\nfi\n\n# Automatically enable offline set of sources and build tools.\n# Offline termux-packages bundle can be created by executing\n# script ./scripts/setup-offline-bundle.sh.\nif [ -f \"${TERMUX_SCRIPTDIR}/build-tools/.installed\" ]; then\n\texport TERMUX_PACKAGES_OFFLINE=true\nfi\n\n# Lock file to prevent parallel running in the same environment.\nTERMUX_BUILD_LOCK_FILE=\"${TMPDIR}/.termux-build.lck\"\nif [ ! -e \"$TERMUX_BUILD_LOCK_FILE\" ]; then\n\ttouch \"$TERMUX_BUILD_LOCK_FILE\"\nfi\n\nexport TERMUX_REPO_PKG_FORMAT=$(jq --raw-output '.pkg_format // \"debian\"' ${TERMUX_SCRIPTDIR}/repo.json)\n\n# Special variable for internal use. It forces script to ignore\n# lock file.\n: \"${TERMUX_BUILD_IGNORE_LOCK:=false}\"\n\n# Utility function to log an error message and exit with an error code.\n# shellcheck source=scripts/build/termux_error_exit.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_error_exit.sh\"\n\n# Utility function to download a resource with an expected checksum.\n# shellcheck source=scripts/build/termux_download.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_download.sh\"\n\n# Installing packages if necessary for the full operation of CGCT.\n# shellcheck source=scripts/build/termux_step_setup_cgct_environment.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_setup_cgct_environment.sh\"\n\n# Utility function for setting up Cargo C-ABI helpers.\n# shellcheck source=scripts/build/setup/termux_setup_cargo_c.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_cargo_c.sh\"\n\n# Utility function for setting up pkg-config wrapper.\n# shellcheck source=scripts/build/setup/termux_setup_pkg_config_wrapper.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_pkg_config_wrapper.sh\"\n\n# Utility function for setting up Crystal toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_crystal.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_crystal.sh\"\n\n# Utility function for setting up Flang toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_flang.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_flang.sh\"\n\n# Utility function for setting up GHC toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_ghc.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_ghc.sh\"\n\n# Utility function to setup a GHC cross-compiler toolchain targeting Android.\n# shellcheck source=scripts/build/setup/termux_setup_ghc_cross_compiler.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_ghc_cross_compiler.sh\"\n\n# Utility function to setup cabal-install (may be used by ghc toolchain).\n# shellcheck source=scripts/build/setup/termux_setup_cabal.sh.\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_cabal.sh\"\n\n# Utility function to setup jailbreak-cabal. It is used to remove version constraints\n# from Cabal packages.\n# shellcheck source=scripts/build/setup/termux_setup_jailbreak_cabal.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_jailbreak_cabal.sh\"\n\n# Utility function for setting up GObject Introspection cross environment.\n# shellcheck source=scripts/build/setup/termux_setup_gir.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_gir.sh\"\n\n# Utility function for setting up GN toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_gn.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_gn.sh\"\n\n# Utility function for golang-using packages to setup a go toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_golang.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_golang.sh\"\n\n# Utility function for setting up no-integrated (GNU Binutils) as.\n# shellcheck source=scripts/build/setup/termux_setup_no_integrated_as.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_no_integrated_as.sh\"\n\n# Utility function for python packages to setup a python.\n# shellcheck source=scripts/build/setup/termux_setup_python_pip.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_python_pip.sh\"\n\n# Utility function for rust-using packages to setup a rust toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_rust.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_rust.sh\"\n\n# Utility function for swift-using packages to setup a swift toolchain\n# shellcheck source=scripts/build/setup/termux_setup_swift.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_swift.sh\"\n\n# Utility function to setup a current xmake build system.\n# shellcheck source=scripts/build/setup/termux_setup_xmake.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_xmake.sh\"\n\n# Utility function for zig-using packages to setup a zig toolchain.\n# shellcheck source=scripts/build/setup/termux_setup_zig.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_zig.sh\"\n\n# Utility function to setup a current ninja build system.\n# shellcheck source=scripts/build/setup/termux_setup_ninja.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_ninja.sh\"\n\n# Utility function to setup Node.js JavaScript Runtime\n# shellcheck source=scripts/build/setup/termux_setup_nodejs.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_nodejs.sh\"\n\n# Utility function to setup a current meson build system.\n# shellcheck source=scripts/build/setup/termux_setup_meson.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_meson.sh\"\n\n# Utility function to setup a current cmake build system\n# shellcheck source=scripts/build/setup/termux_setup_cmake.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_cmake.sh\"\n\n# Utility function to setup protobuf:\n# shellcheck source=scripts/build/setup/termux_setup_protobuf.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/setup/termux_setup_protobuf.sh\"\n\n# Setup variables used by the build. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_setup_variables.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_setup_variables.sh\"\n\n# Save away and restore build setups which may change between builds.\n# shellcheck source=scripts/build/termux_step_handle_buildarch.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_handle_buildarch.sh\"\n\n# Function to get TERMUX_PKG_VERSION from build.sh\n# shellcheck source=scripts/build/termux_extract_dep_info.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_extract_dep_info.sh\"\n\n# Function that downloads a .deb (using the termux_download function)\n# shellcheck source=scripts/build/termux_download_deb_pac.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_download_deb_pac.sh\"\n\n# Script to download InRelease, verify it's signature and then download Packages.xz by hash\n# shellcheck source=scripts/build/termux_get_repo_files.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_get_repo_files.sh\"\n\n# Download or build dependencies. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_get_dependencies.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_get_dependencies.sh\"\n\n# Download python dependency modules for compilation.\n# shellcheck source=scripts/build/termux_step_get_dependencies_python.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_get_dependencies_python.sh\"\n\n# Handle config scripts that needs to be run during build. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_override_config_scripts.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_override_config_scripts.sh\"\n\n# Remove old src and build folders and create new ones\n# shellcheck source=scripts/build/termux_step_setup_build_folders.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_setup_build_folders.sh\"\n\n# Source the package build script and start building. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_start_build.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_start_build.sh\"\n\n# Download or build dependencies. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_create_timestamp_file.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_create_timestamp_file.sh\"\n\n# Run just after sourcing $TERMUX_PKG_BUILDER_SCRIPT. Can be overridden by packages.\n# shellcheck source=scripts/build/get_source/termux_step_get_source.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/get_source/termux_step_get_source.sh\"\n\n# Run from termux_step_get_source if TERMUX_PKG_SRCURL begins with \"git+\".\n# shellcheck source=scripts/build/get_source/termux_step_get_source.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/get_source/termux_git_clone_src.sh\"\n\n# Run from termux_step_get_source if TERMUX_PKG_SRCURL does not begin with \"git+\".\n# shellcheck source=scripts/build/get_source/termux_download_src_archive.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/get_source/termux_download_src_archive.sh\"\n\n# Run from termux_step_get_source after termux_download_src_archive.\n# shellcheck source=scripts/build/get_source/termux_unpack_src_archive.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/get_source/termux_unpack_src_archive.sh\"\n\n# Hook for packages to act just after the package sources have been obtained.\n# Invoked from $TERMUX_PKG_SRCDIR.\ntermux_step_post_get_source() {\n\treturn\n}\n\n# Optional host build. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_handle_host_build.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_handle_host_build.sh\"\n\n# Perform a host build. Will be called in $TERMUX_PKG_HOSTBUILD_DIR.\n# After termux_step_post_get_source() and before termux_step_patch_package()\n# shellcheck source=scripts/build/termux_step_host_build.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_host_build.sh\"\n\n# Setup a standalone Android NDK toolchain. Called from termux_step_setup_toolchain.\n# shellcheck source=scripts/build/toolchain/termux_setup_toolchain_27c.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/toolchain/termux_setup_toolchain_27c.sh\"\n\n# Setup a standalone Android NDK 23c toolchain. Called from termux_step_setup_toolchain.\n# shellcheck source=scripts/build/toolchain/termux_setup_toolchain_23c.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/toolchain/termux_setup_toolchain_23c.sh\"\n\n# Setup a standalone Glibc GNU toolchain. Called from termux_step_setup_toolchain.\n# shellcheck source=scripts/build/toolchain/termux_setup_toolchain_gnu.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/toolchain/termux_setup_toolchain_gnu.sh\"\n\n# Runs termux_step_setup_toolchain_${TERMUX_NDK_VERSION}. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_setup_toolchain.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_setup_toolchain.sh\"\n\n# Apply all *.patch files for the package. Not to be overridden by packages.\n# shellcheck source=scripts/build/termux_step_patch_package.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_patch_package.sh\"\n\n# Replace autotools build-aux/config.{sub,guess} with ours to add android targets.\n# shellcheck source=scripts/build/termux_step_replace_guess_scripts.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_replace_guess_scripts.sh\"\n\n# For package scripts to override. Called in $TERMUX_PKG_BUILDDIR.\ntermux_step_pre_configure() {\n\treturn\n}\n\n# Setup configure args and run $TERMUX_PKG_SRCDIR/configure. This function is called from termux_step_configure\n# shellcheck source=scripts/build/configure/termux_step_configure_autotools.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/configure/termux_step_configure_autotools.sh\"\n\n# Setup configure args and run cmake. This function is called from termux_step_configure\n# shellcheck source=scripts/build/configure/termux_step_configure_cmake.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/configure/termux_step_configure_cmake.sh\"\n\n# Setup configure args and run meson. This function is called from termux_step_configure\n# shellcheck source=scripts/build/configure/termux_step_configure_meson.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/configure/termux_step_configure_meson.sh\"\n\n# Setup configure args and run haskell build system. This function is called from termux_step_configure.\n# shellcheck source=scripts/build/configure/termux_step_configure_haskell_build.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/configure/termux_step_configure_haskell_build.sh\"\n\n# Configure the package\n# shellcheck source=scripts/build/configure/termux_step_configure.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/configure/termux_step_configure.sh\"\n\n# Hook for packages after configure step\ntermux_step_post_configure() {\n\treturn\n}\n\n# Make package, either with ninja or make\n# shellcheck source=scripts/build/termux_step_make.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_make.sh\"\n\n# Make install, either with ninja, make of cargo\n# shellcheck source=scripts/build/termux_step_make_install.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_make_install.sh\"\n\n# Hook function for package scripts to override.\ntermux_step_post_make_install() {\n\treturn\n}\n\n# Add service scripts from array TERMUX_PKG_SERVICE_SCRIPT, if it is set\n# shellcheck source=scripts/build/termux_step_install_service_scripts.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_install_service_scripts.sh\"\n\n# Link/copy the LICENSE for the package to $TERMUX_PREFIX/share/$TERMUX_PKG_NAME/\n# shellcheck source=scripts/build/termux_step_install_license.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_install_license.sh\"\n\n# Function to cp (through tar) installed files to massage dir\n# shellcheck source=scripts/build/termux_step_extract_into_massagedir.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_extract_into_massagedir.sh\"\n\n# Hook function to create {pre,post}install, {pre,post}rm-scripts for subpkgs\n# shellcheck source=scripts/build/termux_step_create_subpkg_debscripts.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_create_subpkg_debscripts.sh\"\n\n# Create all subpackages. Run from termux_step_massage\n# shellcheck source=scripts/build/termux_create_debian_subpackages.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_create_debian_subpackages.sh\"\n\n# Create all subpackages. Run from termux_step_massage\n# shellcheck source=scripts/build/termux_create_pacman_subpackages.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_create_pacman_subpackages.sh\"\n\n# Function to run various cleanup/fixes\n# shellcheck source=scripts/build/termux_step_massage.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_massage.sh\"\n\n# Hook for packages after massage step\ntermux_step_post_massage() {\n\treturn\n}\n\n# Hook function to create {pre,post}install, {pre,post}rm-scripts and similar\ntermux_step_create_debscripts() {\n\treturn\n}\n\n# Convert Debian maintainer scripts into pacman-compatible installation hooks.\n# This is used only when creating pacman packages.\n# shellcheck source=scripts/build/termux_step_create_pacman_install_hook.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_create_pacman_install_hook.sh\"\n\n# Create the build deb file. Not to be overridden by package scripts.\n# shellcheck source=scripts/build/termux_step_create_debian_package.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_create_debian_package.sh\"\n\n# Create the build .pkg.tar.xz file. Not to be overridden by package scripts.\n# shellcheck source=scripts/build/termux_step_create_pacman_package.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_create_pacman_package.sh\"\n\n# Finish the build. Not to be overridden by package scripts.\n# shellcheck source=scripts/build/termux_step_finish_build.sh\nsource \"$TERMUX_SCRIPTDIR/scripts/build/termux_step_finish_build.sh\"\n\n################################################################################\n\n# shellcheck source=scripts/properties.sh\n. \"$TERMUX_SCRIPTDIR/scripts/properties.sh\"\n\nif [ \"$TERMUX_ON_DEVICE_BUILD\" = \"true\" ]; then\n\t# Setup TERMUX_APP_PACKAGE_MANAGER\n\tsource \"$TERMUX_PREFIX/bin/termux-setup-package-manager\"\n\n\t# For on device builds cross compiling is not supported.\n\t# Target architecture must be same as for environment used currently.\n\tcase \"$TERMUX_APP_PACKAGE_MANAGER\" in\n\t\t\"apt\") TERMUX_ARCH=$(dpkg --print-architecture);;\n\t\t\"pacman\") TERMUX_ARCH=$(pacman-conf Architecture);;\n\tesac\n\texport TERMUX_ARCH\nfi\n\n# Check if the package is in the compiled list\ntermux_check_package_in_built_packages_list() {\n\t[ ! -f \"$TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH\" ] && termux_error_exit \"ERROR: file '$TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH' not found.\"\n\tcat \"$TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH\" | grep -q \" $1 \"\n\treturn $?\n}\n\n# Adds a package to the list of built packages if it is not in the list\ntermux_add_package_to_built_packages_list() {\n\tif ! termux_check_package_in_built_packages_list \"$1\"; then\n\t\techo -n \"$1 \" >> $TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH\n\tfi\n}\n\n# Check if the package is in the compiling list\ntermux_check_package_in_building_packages_list() {\n\t[ ! -f \"$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\" ] && termux_error_exit \"ERROR: file '$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH' not found.\"\n\tgrep -q \"^${1}$\" \"$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\"\n\treturn $?\n}\n\n# Special hook to prevent use of \"sudo\" inside package build scripts.\n# build-package.sh shouldn't perform any privileged operations.\nsudo() {\n\ttermux_error_exit \"Do not use 'sudo' inside build scripts. Build environment should be configured through ./scripts/setup-ubuntu.sh.\"\n}\n\n_show_usage() {\n\techo \"Usage: ./build-package.sh [options] PACKAGE_1 PACKAGE_2 ...\"\n\techo\n\techo \"Build a package by creating a .deb file in the debs/ folder.\"\n\techo\n\techo \"Available options:\"\n\t[ \"$TERMUX_ON_DEVICE_BUILD\" = \"false\" ] && echo \"  -a The architecture to build for: aarch64(default), arm, i686, x86_64 or all.\"\n\techo \"  -d Build with debug symbols.\"\n\techo \"  -D Build a disabled package in disabled-packages/.\"\n\techo \"  -f Force build even if package has already been built.\"\n\techo \"  -F Force build even if package and its dependencies have already been built.\"\n\t[ \"$TERMUX_ON_DEVICE_BUILD\" = \"false\" ] && echo \"  -i Download and extract dependencies instead of building them.\"\n\techo \"  -I Download and extract dependencies instead of building them, keep existing $TERMUX_BASE_DIR files.\"\n\techo \"  -L The package and its dependencies will be based on the same library.\"\n\techo \"  -q Quiet build.\"\n\techo \"  -w Install dependencies without version binding.\"\n\techo \"  -s Skip dependency check.\"\n\techo \"  -o Specify directory where to put built packages. Default: output/.\"\n\techo \"  --format Specify package output format (debian, pacman).\"\n\techo \"  --library Specify library of package (bionic, glibc).\"\n\texit 1\n}\n\ndeclare -a PACKAGE_LIST=()\n\nif [ \"$#\" -lt 1 ]; then _show_usage; fi\nwhile (($# >= 1)); do\n\tcase \"$1\" in\n\t\t--) shift 1; break;;\n\t\t-h|--help) _show_usage;;\n\t\t--format)\n\t\t\tif [ $# -ge 2 ]; then\n\t\t\t\tshift 1\n\t\t\t\tif [ -z \"$1\" ]; then\n\t\t\t\t\ttermux_error_exit \"./build-package.sh: argument to '--format' should not be empty\"\n\t\t\t\tfi\n\t\t\t\texport TERMUX_PACKAGE_FORMAT=\"$1\"\n\t\t\telse\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '--format' requires an argument\"\n\t\t\tfi\n\t\t\t;;\n\t\t--library)\n\t\t\tif [ $# -ge 2 ]; then\n\t\t\t\tshift\n\t\t\t\tif [ -z \"$1\" ]; then\n\t\t\t\t\ttermux_error_exit \"./build-package.sh: argument to '--library' should not be empty\"\n\t\t\t\tfi\n\t\t\t\texport TERMUX_PACKAGE_LIBRARY=\"$1\"\n\t\t\telse\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '--library' requires an argument\"\n\t\t\tfi\n\t\t\t;;\n\t\t-a)\n\t\t\tif [ $# -ge 2 ]; then\n\t\t\t\tshift 1\n\t\t\t\tif [ -z \"$1\" ]; then\n\t\t\t\t\ttermux_error_exit \"Argument to '-a' should not be empty.\"\n\t\t\t\tfi\n\t\t\t\tif [ \"$TERMUX_ON_DEVICE_BUILD\" = \"true\" ]; then\n\t\t\t\t\ttermux_error_exit \"./build-package.sh: option '-a' is not available for on-device builds\"\n\t\t\t\telse\n\t\t\t\t\texport TERMUX_ARCH=\"$1\"\n\t\t\t\tfi\n\t\t\telse\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '-a' requires an argument\"\n\t\t\tfi\n\t\t\t;;\n\t\t-d) export TERMUX_DEBUG_BUILD=true;;\n\t\t-D) TERMUX_IS_DISABLED=true;;\n\t\t-f) TERMUX_FORCE_BUILD=true;;\n\t\t-F) TERMUX_FORCE_BUILD_DEPENDENCIES=true && TERMUX_FORCE_BUILD=true;;\n\t\t-i)\n\t\t\tif [ \"$TERMUX_ON_DEVICE_BUILD\" = \"true\" ]; then\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '-i' is not available for on-device builds\"\n\t\t\telif [ \"$TERMUX_PREFIX\" != \"/data/data/com.termux/files/usr\" ]; then\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '-i' is available only when TERMUX_APP_PACKAGE is 'com.termux'\"\n\t\t\telse\n\t\t\t\texport TERMUX_INSTALL_DEPS=true\n\t\t\tfi\n\t\t\t;;\n\t\t-I)\n\t\t\tif [ \"$TERMUX_PREFIX\" != \"/data/data/com.termux/files/usr\" ]; then\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '-I' is available only when TERMUX_APP_PACKAGE is 'com.termux'\"\n\t\t\telse\n\t\t\t\texport TERMUX_INSTALL_DEPS=true\n\t\t\t\texport TERMUX_NO_CLEAN=true\n\t\t\tfi\n\t\t\t;;\n\t\t-L) export TERMUX_GLOBAL_LIBRARY=true;;\n\t\t-q) export TERMUX_QUIET_BUILD=true;;\n\t\t-w) export TERMUX_WITHOUT_DEPVERSION_BINDING=true;;\n\t\t-s) export TERMUX_SKIP_DEPCHECK=true;;\n\t\t-o)\n\t\t\tif [ $# -ge 2 ]; then\n\t\t\t\tshift 1\n\t\t\t\tif [ -z \"$1\" ]; then\n\t\t\t\t\ttermux_error_exit \"./build-package.sh: argument to '-o' should not be empty\"\n\t\t\t\tfi\n\t\t\t\tTERMUX_OUTPUT_DIR=$(realpath -m \"$1\")\n\t\t\telse\n\t\t\t\ttermux_error_exit \"./build-package.sh: option '-o' requires an argument\"\n\t\t\tfi\n\t\t\t;;\n\t\t-c) TERMUX_CONTINUE_BUILD=true;;\n\t\t-*) termux_error_exit \"./build-package.sh: illegal option '$1'\";;\n\t\t*) PACKAGE_LIST+=(\"$1\");;\n\tesac\n\tshift 1\ndone\nunset -f _show_usage\n\n# Dependencies should be used from repo only if they are built for\n# same package name.\nif [ \"$TERMUX_REPO_PACKAGE\" != \"$TERMUX_APP_PACKAGE\" ]; then\n\techo \"Ignoring -i option to download dependencies since repo package name ($TERMUX_REPO_PACKAGE) does not equal app package name ($TERMUX_APP_PACKAGE)\"\n\tTERMUX_INSTALL_DEPS=false\nfi\n\nif [ \"$TERMUX_REPO_PKG_FORMAT\" != \"debian\" ] && [ \"$TERMUX_REPO_PKG_FORMAT\" != \"pacman\" ]; then\n\ttermux_error_exit \"'pkg_format' is incorrectly specified in repo.json file. Only 'debian' and 'pacman' formats are supported\"\nfi\n\nif [ -n \"${TERMUX_PACKAGE_FORMAT-}\" ]; then\n\tcase \"${TERMUX_PACKAGE_FORMAT-}\" in\n\t\tdebian|pacman) :;;\n\t\t*) termux_error_exit \"Unsupported package format \\\"${TERMUX_PACKAGE_FORMAT-}\\\". Only 'debian' and 'pacman' formats are supported\";;\n\tesac\nfi\n\nif [ -n \"${TERMUX_PACKAGE_LIBRARY-}\" ]; then\n\tcase \"${TERMUX_PACKAGE_LIBRARY-}\" in\n\t\tbionic|glibc) :;;\n\t\t*) termux_error_exit \"Unsupported library \\\"${TERMUX_PACKAGE_LIBRARY-}\\\". Only 'bionic' and 'glibc' library are supported\";;\n\tesac\nfi\n\nif [ \"${TERMUX_INSTALL_DEPS-false}\" = \"true\" ] || [ \"${TERMUX_PACKAGE_LIBRARY-bionic}\" = \"glibc\" ]; then\n\t# Setup PGP keys for verifying integrity of dependencies.\n\t# Keys are obtained from our keyring package.\n\tgpg --list-keys 2C7F29AE97891F6419A9E2CDB0076E490B71616B > /dev/null 2>&1 || {\n\t\tgpg --import \"$TERMUX_SCRIPTDIR/packages/termux-keyring/grimler.gpg\"\n\t\tgpg --no-tty --command-file <(echo -e \"trust\\n5\\ny\")  --edit-key 2C7F29AE97891F6419A9E2CDB0076E490B71616B\n\t}\n\tgpg --list-keys CC72CF8BA7DBFA0182877D045A897D96E57CF20C > /dev/null 2>&1 || {\n\t\tgpg --import \"$TERMUX_SCRIPTDIR/packages/termux-keyring/termux-autobuilds.gpg\"\n\t\tgpg --no-tty --command-file <(echo -e \"trust\\n5\\ny\")  --edit-key CC72CF8BA7DBFA0182877D045A897D96E57CF20C\n\t}\n\tgpg --list-keys 998DE27318E867EA976BA877389CEED64573DFCA > /dev/null 2>&1 || {\n\t\tgpg --import \"$TERMUX_SCRIPTDIR/packages/termux-keyring/termux-pacman.gpg\"\n\t\tgpg --no-tty --command-file <(echo -e \"trust\\n5\\ny\")  --edit-key 998DE27318E867EA976BA877389CEED64573DFCA\n\t}\nfi\n\nfor ((i=0; i<${#PACKAGE_LIST[@]}; i++)); do\n\t# Following commands must be executed under lock to prevent running\n\t# multiple instances of \"./build-package.sh\".\n\t#\n\t# To provide sane environment for each package, builds are done\n\t# in subshell.\n\t(\n\t\tif ! $TERMUX_BUILD_IGNORE_LOCK; then\n\t\t\tflock -n 5 || termux_error_exit \"Another build is already running within same environment.\"\n\t\tfi\n\n\t\t# Handle 'all' arch:\n\t\tif [ \"$TERMUX_ON_DEVICE_BUILD\" = \"false\" ] && [ -n \"${TERMUX_ARCH+x}\" ] && [ \"${TERMUX_ARCH}\" = 'all' ]; then\n\t\t\tfor arch in 'aarch64' 'arm' 'i686' 'x86_64'; do\n\t\t\t\tenv TERMUX_ARCH=\"$arch\" TERMUX_BUILD_IGNORE_LOCK=true ./build-package.sh \\\n\t\t\t\t\t${TERMUX_FORCE_BUILD+-f} ${TERMUX_INSTALL_DEPS+-i} ${TERMUX_IS_DISABLED+-D} \\\n\t\t\t\t\t${TERMUX_DEBUG_BUILD+-d} ${TERMUX_OUTPUT_DIR+-o $TERMUX_OUTPUT_DIR} \\\n\t\t\t\t\t${TERMUX_FORCE_BUILD_DEPENDENCIES+-F} ${TERMUX_GLOBAL_LIBRARY+-L} \\\n\t\t\t\t\t${TERMUX_WITHOUT_DEPVERSION_BINDING+-w} \\\n\t\t\t\t\t--format ${TERMUX_PACKAGE_FORMAT:=debian} \\\n\t\t\t\t\t--library ${TERMUX_PACKAGE_LIBRARY:=bionic} \"${PACKAGE_LIST[i]}\"\n\t\t\tdone\n\t\t\texit\n\t\tfi\n\n\t\t# Check the package to build:\n\t\tTERMUX_PKG_NAME=$(basename \"${PACKAGE_LIST[i]}\")\n\t\texport TERMUX_PKG_BUILDER_DIR=\n\t\tif [[ ${PACKAGE_LIST[i]} == *\"/\"* ]]; then\n\t\t\t# Path to directory which may be outside this repo:\n\t\t\tif [ ! -d \"${PACKAGE_LIST[i]}\" ]; then termux_error_exit \"'${PACKAGE_LIST[i]}' seems to be a path but is not a directory\"; fi\n\t\t\texport TERMUX_PKG_BUILDER_DIR=$(realpath \"${PACKAGE_LIST[i]}\")\n\t\telse\n\t\t\t# Package name:\n\t\t\tfor package_directory in $TERMUX_PACKAGES_DIRECTORIES; do\n\t\t\t\tif [ -d \"${TERMUX_SCRIPTDIR}/${package_directory}/${TERMUX_PKG_NAME}\" ]; then\n\t\t\t\t\texport TERMUX_PKG_BUILDER_DIR=${TERMUX_SCRIPTDIR}/$package_directory/$TERMUX_PKG_NAME\n\t\t\t\t\tbreak\n\t\t\t\telif [ -n \"${TERMUX_IS_DISABLED=\"\"}\" ] && [ -d \"${TERMUX_SCRIPTDIR}/disabled-packages/${TERMUX_PKG_NAME}\" ]; then\n\t\t\t\t\texport TERMUX_PKG_BUILDER_DIR=$TERMUX_SCRIPTDIR/disabled-packages/$TERMUX_PKG_NAME\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\t\t\tif [ -z \"${TERMUX_PKG_BUILDER_DIR}\" ]; then\n\t\t\t\ttermux_error_exit \"No package $TERMUX_PKG_NAME found in any of the enabled repositories. Are you trying to set up a custom repository?\"\n\t\t\tfi\n\t\tfi\n\t\tTERMUX_PKG_BUILDER_SCRIPT=$TERMUX_PKG_BUILDER_DIR/build.sh\n\t\tif test ! -f \"$TERMUX_PKG_BUILDER_SCRIPT\"; then\n\t\t\ttermux_error_exit \"No build.sh script at package dir $TERMUX_PKG_BUILDER_DIR!\"\n\t\tfi\n\n\t\ttermux_step_setup_variables\n\t\ttermux_step_handle_buildarch\n\n\t\tif [ \"$TERMUX_CONTINUE_BUILD\" == \"false\" ]; then\n\t\t\ttermux_step_setup_build_folders\n\t\tfi\n\n\t\ttermux_step_start_build\n\n\t\tif ! termux_check_package_in_building_packages_list \"${TERMUX_PKG_BUILDER_DIR#${TERMUX_SCRIPTDIR}/}\"; then\n\t\t\techo \"${TERMUX_PKG_BUILDER_DIR#${TERMUX_SCRIPTDIR}/}\" >> $TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\n\t\tfi\n\n\t\tif [ \"$TERMUX_CONTINUE_BUILD\" == \"false\" ]; then\n\t\t\ttermux_step_get_dependencies\n\t\t\tif [ \"$TERMUX_PACKAGE_LIBRARY\" = \"glibc\" ]; then\n\t\t\t\ttermux_step_setup_cgct_environment\n\t\t\tfi\n\t\t\ttermux_step_override_config_scripts\n\t\tfi\n\n\t\ttermux_step_create_timestamp_file\n\n\t\tif [ \"$TERMUX_CONTINUE_BUILD\" == \"false\" ]; then\n\t\t\tcd \"$TERMUX_PKG_CACHEDIR\"\n\t\t\ttermux_step_get_source\n\t\t\tcd \"$TERMUX_PKG_SRCDIR\"\n\t\t\ttermux_step_post_get_source\n\t\t\ttermux_step_handle_host_build\n\t\tfi\n\n\t\ttermux_step_setup_toolchain\n\n\t\tif [ \"$TERMUX_CONTINUE_BUILD\" == \"false\" ]; then\n\t\t\ttermux_step_get_dependencies_python\n\t\t\ttermux_step_patch_package\n\t\t\ttermux_step_replace_guess_scripts\n\t\t\tcd \"$TERMUX_PKG_SRCDIR\"\n\t\t\ttermux_step_pre_configure\n\t\tfi\n\n\t\t# Even on continued build we might need to setup paths\n\t\t# to tools so need to run part of configure step\n\t\tcd \"$TERMUX_PKG_BUILDDIR\"\n\t\ttermux_step_configure\n\n\t\tif [ \"$TERMUX_CONTINUE_BUILD\" == \"false\" ]; then\n\t\t\tcd \"$TERMUX_PKG_BUILDDIR\"\n\t\t\ttermux_step_post_configure\n\t\tfi\n\t\tcd \"$TERMUX_PKG_BUILDDIR\"\n\t\ttermux_step_make\n\t\tcd \"$TERMUX_PKG_BUILDDIR\"\n\t\ttermux_step_make_install\n\t\tcd \"$TERMUX_PKG_BUILDDIR\"\n\t\ttermux_step_post_make_install\n\t\ttermux_step_install_service_scripts\n\t\ttermux_step_install_license\n\t\tcd \"$TERMUX_PKG_MASSAGEDIR\"\n\t\ttermux_step_extract_into_massagedir\n\t\ttermux_step_massage\n\t\tcd \"$TERMUX_PKG_MASSAGEDIR/$TERMUX_PREFIX_CLASSICAL\"\n\t\ttermux_step_post_massage\n\t\tcd \"$TERMUX_PKG_MASSAGEDIR\"\n\t\tif [ \"$TERMUX_PACKAGE_FORMAT\" = \"debian\" ]; then\n\t\t\ttermux_step_create_debian_package\n\t\telif [ \"$TERMUX_PACKAGE_FORMAT\" = \"pacman\" ]; then\n\t\t\ttermux_step_create_pacman_package\n\t\telse\n\t\t\ttermux_error_exit \"Unknown packaging format '$TERMUX_PACKAGE_FORMAT'.\"\n\t\tfi\n\t\t# Saving a list of compiled packages for further work with it\n\t\tif termux_check_package_in_building_packages_list \"${TERMUX_PKG_BUILDER_DIR#${TERMUX_SCRIPTDIR}/}\"; then\n\t\t\tsed -i \"\\|^${TERMUX_PKG_BUILDER_DIR#${TERMUX_SCRIPTDIR}/}$|d\" \"$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\"\n\t\tfi\n\t\ttermux_add_package_to_built_packages_list \"$TERMUX_PKG_NAME\"\n\t\ttermux_step_finish_build\n\t) 5< \"$TERMUX_BUILD_LOCK_FILE\"\ndone\n\n# Removing a file to store a list of compiled packages\nif [ \"$TERMUX_BUILD_PACKAGE_CALL_DEPTH\" = \"0\" ]; then\n\trm \"$TERMUX_BUILD_PACKAGE_CALL_BUILT_PACKAGES_LIST_FILE_PATH\"\n\trm \"$TERMUX_BUILD_PACKAGE_CALL_BUILDING_PACKAGES_LIST_FILE_PATH\"\nfi\n"
        },
        {
          "name": "clean.sh",
          "type": "blob",
          "size": 2.375,
          "content": "#!/bin/bash\n# clean.sh - clean everything.\nset -e -u\n\nTERMUX_SCRIPTDIR=$(cd \"$(realpath \"$(dirname \"$0\")\")\"; pwd)\n\n# Store pid of current process in a file for docker__run_docker_exec_trap\n. \"$TERMUX_SCRIPTDIR/scripts/utils/docker/docker.sh\"; docker__create_docker_exec_pid_file\n\n# Get variable CGCT_DIR\n. \"$TERMUX_SCRIPTDIR/scripts/properties.sh\"\n\n# Checking if script is running on Android with 2 different methods.\n# Needed for safety to prevent execution of potentially dangerous\n# operations such as 'rm -rf /data/*' on Android device.\nif [ \"$(uname -o)\" = \"Android\" ] || [ -e \"/system/bin/app_process\" ]; then\n\tTERMUX_ON_DEVICE_BUILD=true\nelse\n\tTERMUX_ON_DEVICE_BUILD=false\nfi\n\nif [ \"$(id -u)\" = \"0\" ] && [[ \"$TERMUX_ON_DEVICE_BUILD\" == \"true\" ]]; then\n\techo \"On-device execution of this script as root is disabled.\"\n\texit 1\nfi\n\n# Read settings from .termuxrc if existing\ntest -f \"$HOME/.termuxrc\" && . \"$HOME/.termuxrc\"\n: \"${TERMUX_TOPDIR:=\"$HOME/.termux-build\"}\"\n: \"${TMPDIR:=/tmp}\"\nexport TMPDIR\n\n# Lock file. Same as used in build-package.sh.\nTERMUX_BUILD_LOCK_FILE=\"${TMPDIR}/.termux-build.lck\"\nif [ ! -e \"$TERMUX_BUILD_LOCK_FILE\" ]; then\n\ttouch \"$TERMUX_BUILD_LOCK_FILE\"\nfi\n\n{\n\tif ! flock -n 5; then\n\t\techo \"Not cleaning build directory since you have unfinished build running.\"\n\t\texit 1\n\tfi\n\n\tif [ -d \"$TERMUX_TOPDIR\" ]; then\n\t\tchmod +w -R \"$TERMUX_TOPDIR\" || true\n\tfi\n\n\t# For on-device build cleanup /data shouldn't be erased.\n\tif [[ \"$TERMUX_ON_DEVICE_BUILD\" == \"false\" ]]; then\n\t\tif [[ ! \"$TERMUX_BASE_DIR\" =~ ^(/[^/]+)+$ ]]; then\n\t\t\techo \"TERMUX_BASE_DIR '$TERMUX_BASE_DIR' is not an absolute path under rootfs '/'.\" 1>&2\n\t\t\texit 1\n\t\tfi\n\t\tif [[ \"$TERMUX_BASE_DIR\" =~ ^/[^/]+$ ]]; then\n\t\t\t# Use `/rootfs` as is.\n\t\t\trootfs_top_level_dir=\"$TERMUX_BASE_DIR\"\n\t\telse\n\t\t\t# Get `/path/` from `/path/to/rootfs`.\n\t\t\trootfs_top_level_dir=\"${TERMUX_BASE_DIR%\"${TERMUX_BASE_DIR#/*/}\"}\"\n\t\tfi\n\n\t\tif [[ ! \"$CGCT_DIR\" =~ ^(/[^/]+)+$ ]] || [[ \"$CGCT_DIR\" == \"$TERMUX_BASE_DIR\" ]]; then\n\t\t\techo \"CGCT_DIR '$CGCT_DIR' is not an absolute path under rootfs '/' or equals TERMUX_BASE_DIR.\" 1>&2\n\t\t\texit 1\n\t\tfi\n\n\t\t# Escape '\\$[](){}|^.?+*' with backslashes\n\t\tcgct_dir_escaped=\"$(printf \"%s\" \"$CGCT_DIR\" | sed -zE -e 's/[][\\.|$(){}?+*^]/\\\\&/g')\"\n\t\tfind \"$rootfs_top_level_dir\" -mindepth 1 -regextype posix-extended ! -regex \"^$cgct_dir_escaped(/.*)?\" -delete 2>/dev/null || true\n\tfi\n\n\trm -Rf \"$TERMUX_TOPDIR\"\n} 5< \"$TERMUX_BUILD_LOCK_FILE\"\n"
        },
        {
          "name": "disabled-packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "ndk-patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "repo.json",
          "type": "blob",
          "size": 0.509765625,
          "content": "{\n  \"pkg_format\": \"debian\",\n  \"packages\": {\n    \"name\": \"termux-main\",\n    \"distribution\": \"stable\",\n    \"component\": \"main\",\n    \"url\": \"https://packages-cf.termux.dev/apt/termux-main\"\n  },\n  \"root-packages\": {\n    \"name\": \"termux-root\",\n    \"distribution\": \"root\",\n    \"component\": \"stable\",\n    \"url\": \"https://packages-cf.termux.dev/apt/termux-root\"\n  },\n  \"x11-packages\": {\n    \"name\": \"termux-x11\",\n    \"distribution\": \"x11\",\n    \"component\": \"main\",\n    \"url\": \"https://packages-cf.termux.dev/apt/termux-x11\"\n  }\n}\n"
        },
        {
          "name": "root-packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "sample",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "x11-packages",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}