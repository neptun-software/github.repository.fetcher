{
  "metadata": {
    "timestamp": 1736568938684,
    "page": 36,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Powerlevel9k/powerlevel9k",
      "stars": 13463,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.02734375,
          "content": "test-vm/.vagrant\n*.swp\n.idea"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.080078125,
          "content": "[submodule \"shunit2\"]\n\tpath = shunit2\n\turl = https://github.com/kward/shunit2.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.6787109375,
          "content": "language: sh\n\nos:\n  - linux\n  - osx\n\nosx_image: xcode9.4\n\naddons:\n  apt:\n    packages:\n      - build-essential\n      - git\n      - mercurial\n      - subversion\n      - jq\n      - node\n      - golang\n      - ruby\n      - python\n      - python-virtualenv\n\nbefore_install:\n  - if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then brew update            ; fi\n\nenv:\n  global:\n    - ZSH_DIST=$HOME/.zshdist\n  matrix:\n    # Use _ZSH_VERSION since if ZSH_VERSION is present, travis cacher thinks it\n    # is running in zsh and tries to use zsh specific functions.\n    - _ZSH_VERSION=5.5.1\n    - _ZSH_VERSION=5.5\n    - _ZSH_VERSION=5.4.2\n    - _ZSH_VERSION=5.4.1\n    - _ZSH_VERSION=5.3.1\n    - _ZSH_VERSION=5.3\n    - _ZSH_VERSION=5.2\n    - _ZSH_VERSION=5.1.1\n\ncache:\n  directories:\n    - $ZSH_DIST\n\nbefore_script:\n  - >\n    setup_zsh() {\n      dest=\"$ZSH_DIST/$1\"\n      if [[ ! -d $dest/bin ]]; then\n        coreutils_mktemp=\"mktemp\"\n        if [[ \"$TRAVIS_OS_NAME\" == \"osx\" ]]; then\n          coreutils_mktemp=\"gmktemp\"\n        fi\n        tmp=\"$(${coreutils_mktemp} --directory --tmpdir=\"${TMPDIR:/tmp}\" zshbuild.XXXXXX)\"\n        (\n          cd \"$tmp\" &&\n          curl -L http://downloads.sourceforge.net/zsh/zsh-${1}.tar.gz | tar zx &&\n          cd zsh-$1 &&\n          ./configure --prefix=\"$dest\" &&\n          make &&\n          mkdir -p \"$dest\" &&\n          make install ||\n          echo \"Failed to build zsh-${1}!\"\n        )\n      fi\n      export PATH=\"$dest/bin:$PATH\"\n    }\n  - setup_zsh $_ZSH_VERSION\n  # Show the git version being used to test.\n  - \"git --version\"\n  # Show the mercurial version being used to test.\n  - \"hg --version\"\n  # Show the zsh version being used to test.\n  - \"zsh --version\"\n\nscript:\n  - test/suite.spec\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 15.7802734375,
          "content": "## v0.6.7\n\n- PR #1175 - Fix home dir shortening when using package_name truncation strategy\n- PR #1158 - [Bugfix] dir: Fix package name path truncation inside home dir\n- PR #1157 - Hide stderr from git ls-files\n- PR #1154 - Fix issues with debug/fonts script in Konsole\n- PR #1151 - [Bugfix] Only abbreviate $HOME at the beginning of cwd\n- PR #1148 - Remove checking for NODEENV_DISABLE_PROMPT\n- PR #1147 - Fix newlines in ZSH 5.7\n- PR #1149 - Fix RVM\n- PR #1128 - [Bugfix] virtualenv prompt displaying\n- PR #981 - [Bugfix] Fix for #974\n- PR #1126 - Use ip command for VPN segment\n- PR #1079 - [Bugfix] Update VIRTUAL_ENV_DISABLE_PROMPT value\n- PR #1080 - [Bugfix] Port #1071 to `master` (Fix fatal errors emitted by untracked file check in vcs.zsh)\n- PR #1074 - Add vcs vulnerability tests master\n- PR #1070 - [Docs] Uniformly apply inline code formatting in README\n- PR #1065 - Protect locale\n- PR #1048 - Speedup Improvements in `vcs` segment\n- PR #1037 - Fix vpn_ip segment\n- PR #1036 - Make truncate with package name work without setting shorten length\n- PR #1020 - Fix context spec\n- PR #990 - [Docs] Add forgotten backtick\n- PR #981 - Avoid error if `/etc/os-release` does not exist\n- PR #966 - [Bugfix] Fix icons cut off in RPROMPT segments\n\n## v0.6.6\n\n- The `rbenv` segment is no longer a default segment in the LPROMPT.\n- PR #959 - Fixing issue in v0.6.5 where we changed some color codes.\n- PR #934 - Add Tests\n- PR #884 - test-in-docker: fix with newer ZSH versions\n- PR #928 - [Docs] Add etc state description in dir docs\n- PR #937 - Use SUDO_COMMAND to check for sudo\n- PR #925 - [Bugfix] Resolve #918 Transparent background\n- PR #923 - Fix font issue debugging script\n- PR #921 - Add missing colors to fix color comparison\n- PR #951 - Add fallback icon for missing linux distro icons\n- PR #956 - Fix broken link in readme\n- Fixed #936 - fallback icons for Linux distros\n- Fixed #926 - `etc` state for `dir` segment in docs\n- Fixed #852 - `sudo` detection got crazy, there. sorry, everyone.\n- Fixed #927 - more default color issues.\n\n## v0.6.5\n\n- Multiple PRs: General fixes to README, improved documentation.\n- Multiple PRs: Improvements to icons / glyphs.\n- PR #777: now possible to always show the Ruby env segment.\n- PR #773: Fixed issue with home abbreviation in directory segment.\n- PR #789: Now properly working around some odd ZSH status return codes.\n- PR #716: Now possible to configure the colors of the VCS segment in rebase mode.\n- PR #722: Removed dependency on `bc` for `load` segment.\n- PR #686: Fixed issue where whitespaces in path occasionally broke `dir` segment.\n- PR #685: No longer accidentally invoking user `grep` aliases.\n- PR #680: Using env variable for `PYENV` properly, now.\n- PR #676, #611: Fixes for Kubernetes segment.\n- PR #667: Supporting multiple AWS profiles.\n- PR #660: Fixing directory parsing issue with PYTHONPATH.\n- PR #663: Fixed silly issues causing ZSH warnings.\n- PR #647: Fixing `public_ip` segment for macOS.\n- PR #643: Fixing `vpn_ip` segment naming.\n- PR #636: `context` segment now grabs user with command rather than env.\n- PR #618: Fix issue where `su -` didn't change context segment.\n- PR #608: Load average selection in `load` segment.\n\n### New Segment: `laravel_version`\n\nDisplays the current laravel version.\n\n## v0.6.4\n\n- `load` segment now has configurable averages.\n- Update to `dir` segment to add `dir_writable` feature.\n- `status` segment can now display POSIX signal name of exit code.\n- Added `teardown` command to turn off P9k prompt.\n- Fixes for P9k in Cygwin and 32-bit systems.\n- Better colors in virtualization segments.\n- Added 'Gopher' icon to the `go_version` segment.\n- Improved detection in `nvm`\n- Added option to support command status reading from piped command sequences.\n- Fixed issue with visual artifacts with quick consecutive commands.\n- Updated 'ananconda' segment for more uniform styling.\n- `rvm` segment can now support usernames with dashes.\n- Fixed Python icon reference in some font configurations.\n- Vi mode indicator fixed.\n- Fixes for Docker segment.\n- Added new Docker-based testing system.\n- Significant enhancements to the `battery` segment. Check out the README to\n  read more!\n- New truncation strategy that truncates until the path becomes unique.\n\n### New Segments: `host` and `user`\n\nProvides two separate segments for `host` and `user` in case you don't wont both\nin one (per the `context` segment).\n\n### New Segment: `newline`\n\nAllows you to split segments across multiple lines.\n\n### New Segment: `kubecontext`\n\nShows the current context of your `kubectl` configuration.\n\n### New Segment: `vpn`\n\nShows current `vpn` interface.\n\n## v0.6.3\n\n- Fixed susceptibility to [pw3nage exploit](https://github.com/njhartwell/pw3nage).\n- Added support for Android\n- The abbreviation for $HOME is now configurable (doesn't have to be `~`).\n- Fixed colorization of VCS segment in Subversion repos.\n- Improved handling of symlinks in installation paths.\n\n## v0.6.2\n\n- Fixed some issues with the new `nerdfont-fontconfig` option.\n- Fixed typo in README.\n- The `get_icon_names` function can now print sorted output, and show which\n  icons users have overridden.\n- Added a FreeBSD VM for testing.\n\n### Add debug script for iTerm2 issues\n\nA new script `debug/iterm.zsh` was added for easier spotting problems with your iTerm2 configuration.\n\n### Add debug script for font issues\n\nA new script `debug/font-issues.zsh` was added, so that problems with your font could be spotted easier.\n\n### `ram` changes\n\nThe `ram` segment now shows the available ram instead of free.\n\n### Add new segments `host` and `user`\n\nThe user and host segments allow you to have different icons and colors for both the user and host segments\ndepending on their state.\n\n## v0.6.0\n\n- Fixed a bug where the tag display was broken on detached HEADs.\n- Fixed a bug where SVN detection sometimes failed.\n- Fixed the `load` and `ram` segments for BSD.\n- Fixed code-points that changed in Awesome fonts.\n- Fixed display of \"OK_ICON\" in `status` segment in non-verbose mode.\n- Fixed an issue where dir name truncation that was very short sometimes failed.\n- Speed & accuracy improvements to the battery segment.\n- Added Github syntax highlighting to README.\n- Various documentation cleanup.\n\n### New Font Option: nerd-fonts\n\nThere is now an option to use [nerd-fonts](https://github.com/ryanoasis/nerd-fonts) with P9k. Simply configure the `nerdfont-fontconfig`, and you'll be set!\n\n### `vcs` changes\n\nThe VCS segment can now display icons for remote repo hosting services, including Github, Gitlab, and 'other'.\n\n### `dir` changes\n\nAdded an option to configure the path separator. If you want something\nelse than an ordinary slash, you could set\n`POWERLEVEL9K_DIR_PATH_SEPARATOR` to whatever you want.\n\n#### `truncate_with_package_name` now searches for `composer.json` as well\n\nNow `composer.json` files are searched as well. By default `package.json` still takes\nprecedence. If you want to change that, set `POWERLEVEL9K_DIR_PACKAGE_FILES=(composer.json package.json)`.\n\n### New segment `command_execution_time` added\n\nShows the duration a command needed to run. By default only durations over 3 seconds\nare shown (can be adjusted by setting POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD).\n\n### New segment `dir_writable` added\n\nThis segment displays a lock icon if your user has no write permissions in the current folder.\n\n### New segment `disk_usage` added\n\nThis segment will show the usage level of your current partition.\n\n### New segment `public_ip` added\n\nFetches your Public IP (using ident.me) and displays it in your prompt.\n\n### New segment `swift_version` added\n\nThis segment displays the version of Swift that is installed / in your path.\n\n### New segment `detect_virt` added\n\nDetects and reports if you are in a virtualized session using `systemd`.\n\n## v0.5.0\n\n### `load` and `ram` changes\n\nThese two segments now support BSD.\n\n### `vcs` changes\n\n- We implemented a huge speed improvement for this segment.\n- Now this segment supports Subversion repositories.\n- Add ability to hide tags by setting `POWERLEVEL9K_VCS_HIDE_TAGS` to true.\n\n## `anaconda` changes\n\nSpeed improvements for `anaconda` segment.\n\n## v0.4.0\n\n### Development changes\n\nFrom now on, development makes use of a CI system \"travis\".\n\n### `vcs` changes\n\nThe default state was renamed to `clean`. If you overrode foreground\nor background color in the past, you need to rename your variables to:\n\n```zsh\nPOWERLEVEL9K_VCS_CLEAN_FOREGROUND='cyan'\nPOWERLEVEL9K_VCS_CLEAN_BACKGROUND='white'\n```\n\nAdditionaly the vcs segment now has an `untracked` state which\nindicates that you have untracked files in your repository.\n\nThe foreground color of actionformat is now configurable via:\n```zsh\nPOWERLEVEL9K_VCS_ACTIONFORMAT_FOREGROUND='green'\n```\n\nAlso, the vcs segment uses the foreground color it was configured to.\nThat said, the variables `POWERLEVEL9K_VCS_FOREGROUND` and\n`POWERLEVEL9K_VCS_DARK_FOREGROUND` are no longer used. Instead use\nthe proper variable `POWERLEVEL9K_VCS_<STATE>_FOREGROUND` to change\nforeground color.\n\n### `dir` Shortening Strategies\n\nThere is now a path shortening strategy that will use the `package.json` file to\nshorten your directory path. See the documentation for the `dir` segment for more\ndetails.\n\nAlso, the shorten delimiter was changed to an unicode ellipsis. It is configurable\nvia `POWERLEVEL9K_SHORTEN_DELIMITER`.\n\n### `rbenv` changes\n\nThe `rbenv` segment now makes use of the full rbenv command, so the correct\nruby version is now shown if it differs from the globally one.\n\n### `node`, `nvm` Segments\n\nImprovements to speed / reliability.\n\n### `ram` changes\n\nThe `ram` segment was split up into `ram` and `swap`. The\n`POWERLEVEL9K_RAM_ELEMENTS` variable is obsolete.\n\n### New segment `swap` added\n\nDue to the split up of the ram segment, this one was created. It\nshows the currently used swap size.\n\n### New segment `nodeenv` added\n\nAdded new `nodeenv` segment that shows the currently used node environment.\n\n### New segment `aws_eb_env` added\n\nThis segment displays the current Elastic Beanstalk environment.\n\n### New segment `chruby` added\n\nAdded new `chruby` segment to support this version manager.\n\n### New segment `docker_machine` added\n\nAdded new `docker_machine` segment that will show your Docker machine.\n\n### New segment `anaconda` added\n\nA new segment `anaconda` was added that shows the current used\nanaconda environment.\n\n## New segment `pyenv` added\n\nThis segment shows your active python version as reported by `pyenv`.\n\n\n## v0.3.2\n\n### `vcs` changes\n\nA new state `UNTRACKED` was added to the `vcs` segment. So we now\nhave 3 states for repositories: `UNTRACKED`, `MODIFIED`, and the\ndefault state. The `UNTRACKED` state is active when there are files\nin the repository directory which have not been added to the repo\n(the same as when the `+` icon appears). The default color for the\n`UNTRACKED` state is now yellow, and the default color for the\n`MODIFIED` state is now read, but those colors can be changed by\nsetting these variables, for example:\n\n```zsh\nPOWERLEVEL9K_VCS_MODIFIED_FOREGROUND='black'\nPOWERLEVEL9K_VCS_MODIFIED_BACKGROUND='white'\nPOWERLEVEL9K_VCS_UNTRACKED_FOREGROUND='green'\nPOWERLEVEL9K_VCS_UNTRACKED_BACKGROUND='blue'\n```\n\n## v0.3.1\n\n### `dir` changes\n\nA new state `HOME_SUBFOLDER` was added. So if you want to overwrite\ncolors for this segment, also set this variables:\n```zsh\nPOWERLEVEL9K_DIR_HOME_SUBFOLDER_BACKGROUND='black'\nPOWERLEVEL9K_DIR_HOME_SUBFOLDER_FOREGROUND='white'\n```\n\n### `background_jobs` changes\nNow displays the number of background jobs if there's more than 1.\nYou can disable it by setting :\n```zsh\nPOWERLEVEL9K_BACKGROUND_JOBS_VERBOSE=false\n```\n\n## v0.3.0\n\n### Introduced \"visual identifiers\" to the segments\n\nNow almost every segment can have a visual identifier, which is an\nicon whose color could be adjusted by users.\n\n### Added ability for \"joined\" segments\n\nYou can now merge segments together by suffixing the segment name with \"_joined\".\nFor Developers: Be aware that the order of parameters in left/right_prompt_segment\nhas changed. Now a boolean parameter must be set as second parameter (true if joined).\n\n### `dir` changes\n\nThis segment now has \"state\", which means you now can change the colors seperatly\ndepending if you are in your homefolder or not.\nYour variables for that should now look like:\n```zsh\nPOWERLEVEL9K_DIR_HOME_BACKGROUND='green'\nPOWERLEVEL9K_DIR_HOME_FOREGROUND='cyan'\nPOWERLEVEL9K_DIR_DEFAULT_BACKGROUND='red'\nPOWERLEVEL9K_DIR_DEFAULT_FOREGROUND='yellow'\n```\n\n### `status` changes\n\nThe `status` segment was split up into three segments. `background_jobs` prints\nan icon if there are background jobs. `root_indicator` prints an icon if the user\nis root. The `status` segment focuses now on the status only.\nThe `status` segment also now has \"state\". If you want to overwrite the colors,\nyou have to add the state to your variables:\n```zsh\nPOWERLEVEL9K_STATUS_ERROR_BACKGROUND='green'\nPOWERLEVEL9K_STATUS_ERROR_FOREGROUND='cyan'\nPOWERLEVEL9K_STATUS_OK_BACKGROUND='red'\nPOWERLEVEL9K_STATUS_OK_FOREGROUND='yellow'\n```\n\n### New segment `custom_command` added\n\nA new segment that allows users to define a custom command was added.\n\n### `virtualenv` changes\n\nThis segment now respects `VIRTUAL_ENV_DISABLE_PROMPT`. If this variable is set\nto `true`, the segments does not get rendered.\n\n### `load` changes\n\nThe `load` segement was split and a new segment `ram` was extracted. This new\nsegment is able to show the free ram and used swap.\n\n### `vcs` changes\n\nThis prompt uses the `VCS_INFO` subsystem by ZSH. From now on this subsystem\nis only invoked if a `vcs` segment was configured.\n\n### `rvm` changes\n\nThis segment now does not invoke RVM directly anymore. Instead, is relys on the\ncircumstance that RVM was invoked beforehand and just reads the environment\nvariables '$GEM_HOME' and '$MY_RUBY_HOME'. It also now displays the used gemset.\n\n### New segment `battery` added\n\nA new segment that shows the battery status of your laptop was added.\n\n### New segment `go_version` added\n\nThis segment shows the GO version.\n\n### New segment `nvm` added\n\nThis segment shows your NodeJS version by using NVM (and if it is not 'default').\n\n### New segment `todo` added\n\nThis segment shows your ToDos from [todo.sh](http://todotxt.com/).\n\n### New segment `rust_version` added\n\nThis segment shows your local rust version.\n\n## v0.2.0\n\n### `longstatus` is now `status`\n\nThe segments got merged together. To show the segment only if an error occurred,\nset `POWERLEVEL9K_STATUS_VERBOSE=false` (this is the same behavior as the old\n`status` segment.\n\n### Icon overriding mechanism added\n\nAll icons can now be overridden by setting a variable named by the internal icon\nname. You can get a full list of icon name by calling `get_icon_names`.\n\n### Same color segements get visual separator\n\nThis separator can be controlled by setting `POWERLEVEL9K_LEFT_SUBSEGMENT_SEPARATOR`\nor `POWERLEVEL9K_RIGHT_SUBSEGMENT_SEPARATOR`. By default this separator is\nprinted in the foreground color.\n\n### `dir` segment has different strategies for truncation\n\nNow you can choose between `truncate_middle` or `truncate_from_right` by setting\n`POWERLEVEL9K_SHORTEN_STRATEGY`. Default behavior is unchanged (truncate whole\ndirectories). `POWERLEVEL9K_SHORTEN_DIR_LENGTH` can be used to influence how\nmuch will be truncated (either direcories or chars).\n\n### New segment `ip` added\n\nThis segment shows your internal IP address. You can define which interfaces IP\nwill be shown by specifying it via `POWERLEVEL9K_IP_INTERFACE`.\n\n### New segment `load` added\n\nThis segment shows your computers 5min load average.\n\n### New segment `os_icon` added\n\nThis segment shows a little indicator which OS you are running.\n\n### New segment `php_version` added\n\nThis segment shows your PHP version.\n\n### New segment `vi_mode` added\n\nThis segment gives you a hint in which VI-mode you currently are. This\nsegment requires a proper configured VI-mode.\n\n### Added the ability to have empty left or right prompts\n\nBy setting the according variable to an empty array, the left or right\nprompt will be empty.\n\n## v0.1.0\n\nThis is the first release\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.9521484375,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address, posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at bhilburn@gmail.com. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.068359375,
          "content": "Copyright (c) 2014-2017 Ben Hilburn <bhilburn@gmail.com>\n\nMIT LICENSE\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 42.708984375,
          "content": "## Powerlevel9k is deprecated and now unmaintained. Please use [Powerlevel10k](https://github.com/romkatv/powerlevel10k)!\n---\n![](https://raw.githubusercontent.com/bhilburn/powerlevel9k-logo/master/logo-banner.png)\n---\n[![Build Status](https://travis-ci.org/bhilburn/powerlevel9k.svg?branch=master)](https://travis-ci.org/bhilburn/powerlevel9k)\n[![Join the chat at https://gitter.im/bhilburn/powerlevel9k](https://badges.gitter.im/bhilburn/powerlevel9k.svg)](https://gitter.im/bhilburn/powerlevel9k?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nPowerlevel9k is a theme for ZSH which uses [Powerline\nFonts](https://github.com/powerline/fonts). It can be used with vanilla ZSH or\nZSH frameworks such as [Oh-My-Zsh](https://github.com/robbyrussell/oh-my-zsh),\n[Prezto](https://github.com/sorin-ionescu/prezto),\n[Antigen](https://github.com/zsh-users/antigen), and [many\nothers](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions).\n\nGet more out of your terminal. Be a badass. Impress everyone in 'Screenshot Your\nDesktop' threads. Use powerlevel9k.\n\n![](http://bhilburn.org/content/images/2015/01/pl9k-improved.png)\n\nYou can check out some other users' configurations in our wiki: [Show Off Your\nConfig](https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config).\n\nThere are a number of Powerline ZSH themes available, now. The developers of\nthis theme focus on four primary goals:\n\n1. Give users a great out-of-the-box configuration with no additional\n   configuration required.\n2. Make customization easy for users who do want to tweak their prompt.\n3. Provide useful segments that you can enable to make your prompt even more\n   effective and helpful. We have prompt segments for everything from unit test\n   coverage to your AWS instance.\n4. Optimize the code for execution speed as much as possible. A snappy terminal\n   is a happy terminal.\n\nPowerlevel9k can be used to create both very useful and beautiful terminal environments:\n\n![](https://camo.githubusercontent.com/b5d7eb49a30bfe6bdb5706fa3c9be95fe8e5956e/687474703a2f2f67696679752e636f6d2f696d616765732f70396b6e65772e676966)\n\n### Table of Contents\n\n1. [Installation](#installation)\n2. [Customization](#prompt-customization)\n    1. [Stylizing Your Prompt](https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt)\n    2. [Customizing Prompt Segments](#customizing-prompt-segments)\n    3. [Available Prompt Segments](#available-prompt-segments)\n3. [Troubleshooting](https://github.com/bhilburn/powerlevel9k/wiki/Troubleshooting)\n\nBe sure to also [check out the Wiki](https://github.com/bhilburn/powerlevel9k/wiki)!\n\n### Installation\nThere are two installation steps to go from a vanilla terminal to a PL9k\nterminal. Once you are done, you can optionally customize your prompt.\n\n[Installation Instructions](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions)\n\n1. [Install the Powerlevel9k Theme](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-1-install-powerlevel9k)\n2. [Install Powerline Fonts](https://github.com/bhilburn/powerlevel9k/wiki/Install-Instructions#step-2-install-a-powerline-font)\n\nNo configuration is necessary post-installation if you like the default\nsettings, but there are plenty of segment customization options available if you\nare interested.\n\n### Prompt Customization\n\nBe sure to check out the wiki page on the additional prompt customization\noptions, including color and icon settings: [Stylizing Your Prompt](https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt)\n\n#### Customizing Prompt Segments\nCustomizing your prompt is easy! Select the segments you want to have displayed,\nand then assign them to either the left or right prompt by adding the following\nvariables to your `~/.zshrc`.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_LEFT_PROMPT_ELEMENTS`|`(context dir vcs)`|Segment list for left prompt|\n|`POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS`|`(status root_indicator background_jobs history time)`|Segment list for right prompt|\n\n\nThe table above shows the default values, so if you wanted to set these\nvariables manually, you would put the following in\nyour `~/.zshrc`:\n```zsh\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs)\nPOWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)\n```\n#### Available Prompt Segments\nThe segments that are currently available are:\n\n**System Status Segments:**\n* [`background_jobs`](#background_jobs) - Indicator for background jobs.\n* [`battery`](#battery) - Current battery status.\n* [`context`](#context) - Your username and host, conditionalized based on $USER and SSH status.\n* [`date`](#date) - System date.\n* [`dir`](#dir) - Your current working directory.\n* `dir_writable` - Displays a lock icon, if you do not have write permissions on the current folder.\n* [`disk_usage`](#disk_usage) - Disk usage of your current partition.\n* `history` - The command number for the current line.\n* [`host`](#host) - Your current host name\n* [`ip`](#ip) - Shows the current IP address.\n* [`vpn_ip`](#vpn_ip) - Shows the current VPN IP address.\n* [`public_ip`](#public_ip) - Shows your public IP address.\n* [`load`](#load) - Your machine's load averages.\n* `os_icon` - Display a nice little icon, depending on your operating system.\n* `ram` - Show free RAM.\n* `root_indicator` - An indicator if the user has superuser status.\n* [`status`](#status) - The return code of the previous command.\n* `swap` - Prints the current swap size.\n* [`time`](#time) - System time.\n* [`user`](#user) - Your current username\n* [`vi_mode`](#vi_mode)- Your prompt's Vi editing mode (NORMAL|INSERT).\n* `ssh` - Indicates whether or not you are in an SSH session.\n\n**Development Environment Segments:**\n* [`vcs`](#vcs) - Information about this `git` or `hg` repository (if you are in one).\n\n**Language Segments:**\n* **GoLang Segments:**\n    * `go_version` - Show the current GO version.\n* **Javascript / Node.js Segments:**\n    * `node_version` - Show the version number of the installed Node.js.\n    * [`nodeenv`](#nodeenv) - [nodeenv](https://github.com/ekalinin/nodeenv) prompt for displaying node version and environment name.\n    * `nvm` - Show the version of Node that is currently active, if it differs from the version used by NVM\n* **PHP Segments:**\n    * `php_version` - Show the current PHP version.\n    * `laravel_version` - Show the current Laravel version.\n    * [`symfony2_tests`](#symfony2_tests) - Show a ratio of test classes vs code classes for Symfony2.\n    * `symfony2_version` - Show the current Symfony2 version, if you are in a Symfony2-Project dir.\n* **Python Segments:**\n    * [`virtualenv`](#virtualenv) - Your Python [VirtualEnv](https://virtualenv.pypa.io/en/latest/).\n    * [`anaconda`](#anaconda) - Your active [Anaconda](https://www.continuum.io/why-anaconda) environment.\n    * `pyenv` - Your active python version as reported by the first word of [`pyenv version`](https://github.com/yyuu/pyenv). Note that the segment is not displayed if that word is _system_ i.e. the segment is inactive if you are using system python.\n* **Ruby Segments:**\n    * [`chruby`](#chruby) - Ruby environment information using `chruby` (if one is active).\n    * [`rbenv`](#rbenv) - Ruby environment information using `rbenv` (if one is active).\n    * [`rspec_stats`](#rspec_stats) - Show a ratio of test classes vs code classes for RSpec.\n    * `rvm` - Ruby environment information using `$GEM_HOME` and `$MY_RUBY_HOME` (if one is active).\n* **Rust Segments:**\n    * `rust_version` - Display the current rust version and [logo](https://www.rust-lang.org/logos/rust-logo-blk.svg).\n* **Swift Segments:**\n    * `swift_version` - Show the version number of the installed Swift.\n* **Java Segments:**\n    * `java_version` - Show the current Java version.\n\n**Cloud Segments:**\n* **AWS Segments:**\n    * [`aws`](#aws) - The current AWS profile, if active.\n    * `aws_eb_env` - The current Elastic Beanstalk Environment.\n* `docker_machine` - The current Docker Machine.\n* `kubecontext` - The current context of your `kubectl` configuration.\n* `dropbox` - Indicates Dropbox directory and syncing status using `dropbox-cli`\n\n**Other:**\n* [`custom_command`](#custom_command) - Create a custom segment to display the\n  output of an arbitrary command.\n* [`command_execution_time`](#command_execution_time) - Display the time the current command took to execute.\n* [`todo`](http://todotxt.com/) - Shows the number of tasks in your todo.txt tasks file.\n* `detect_virt` - Virtualization detection with systemd\n* `newline` - Continues the prompt on a new line.\n* `openfoam` - Shows the currently sourced [OpenFOAM](https://openfoam.org/) environment.\n\n---------------------------------------------------------------------------------\n\n\n##### anaconda\n\nThis segment shows your active anaconda environment. It relies on either the\n`CONDA_ENV_PATH` or the `CONDA_PREFIX` (depending on the `conda` version)\nenvironment variable to be set which happens when you properly `source\nactivate` an environment.\n\nSpecial configuration variables:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_ANACONDA_LEFT_DELIMITER`|\"(\"|The left delimiter just before the environment name.|\n|`POWERLEVEL9K_ANACONDA_RIGHT_DELIMITER`|\")\"|The right delimiter just after the environment name.|\n\nAdditionally the following segment specific parameters can be used to customize\nit: `POWERLEVEL9K_PYTHON_ICON`, `POWERLEVEL9K_ANACONDA_BACKGROUND`, and\n`POWERLEVEL9K_ANACONDA_FOREGROUND`.\n\n##### aws\n\nIf you would like to display the [current AWS\nprofile](http://docs.aws.amazon.com/cli/latest/userguide/installing.html), add\nthe `aws` segment to one of the prompts, and define `AWS_DEFAULT_PROFILE` in\nyour `~/.zshrc`:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`AWS_DEFAULT_PROFILE`|None|Your AWS profile name|\n\n##### background_jobs\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE`|`true`|If there is more than one background job, this segment will show the number of jobs. Set this to `false` to turn this feature off.|\n`POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE_ALWAYS`|`false`|Always show the jobs count (even if it's zero).|\n\n##### battery\n\nThe default settings for this segment will display your current battery status (fails gracefully on\nsystems without a battery). It is supported on both OSX and Linux (note that it requires `acpi` on Linux).\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_BATTERY_CHARGING`|`\"yellow\"`|Color to indicate a charging battery.|\n|`POWERLEVEL9K_BATTERY_CHARGED`|`\"green\"`|Color to indicate a charged battery.|\n|`POWERLEVEL9K_BATTERY_DISCONNECTED`|`$DEFAULT_COLOR`|Color to indicate absence of battery.|\n|`POWERLEVEL9K_BATTERY_LOW_THRESHOLD`|`10`|Threshold to consider battery level critical.|\n|`POWERLEVEL9K_BATTERY_LOW_COLOR`|`\"red\"`|Color to indicate critically low charge level.|\n|`POWERLEVEL9K_BATTERY_VERBOSE`|`true`|Display time remaining next to battery level.|\n|`POWERLEVEL9K_BATTERY_HIDE_ABOVE_THRESHOLD`|`unset`|Threshold from which the battery segment should not be displayed.|\n\nNote that you can [modify the `_FOREGROUND`\ncolor](https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt#segment-color-customization)\nwithout affecting the icon color.\n\nYou can also change the battery icon automatically depending on the battery\nlevel. This will override the default battery icon. In order to do this, you\nneed to define the `POWERLEVEL9k_BATTERY_STAGES` variable.\n\n\n| Variable                      | Default Value | Description                                                   |\n|-------------------------------|---------------|---------------------------------------------------------------|\n| `POWERLEVEL9K_BATTERY_STAGES` | Unset         | A string or array, which each index indicates a charge level. |\n\nPowerlevel9k will use each index of the string or array as a stage to indicate battery\ncharge level, progressing from left to right. You can provide any number of\nstages. The setting below, for example, provides 8 stages for Powerlevel9k to use.\n```zsh\nPOWERLEVEL9K_BATTERY_STAGES=\"▁▂▃▄▅▆▇█\"\n```\n\nIf you require extra spacing after the icon, you will have to set it as an array,\nsince spaces in the string will be used as one of the stages and you will get a\nmissing icon. To do this, declare the variable as follows:\n```zsh\nPOWERLEVEL9K_BATTERY_STAGES=($'\\u2581 ' $'\\u2582 ' $'\\u2583 ' $'\\u2584 ' $'\\u2585 ' $'\\u2586 ' $'\\u2587 ' $'\\u2588 ')\n```\n\nUsing the array syntax, you can create stages comprised of multiple characters.\nThe below setting provides 40 battery stages.\n```zsh\nPOWERLEVEL9K_BATTERY_STAGES=(\n   $'▏    ▏' $'▎    ▏' $'▍    ▏' $'▌    ▏' $'▋    ▏' $'▊    ▏' $'▉    ▏' $'█    ▏'\n   $'█▏   ▏' $'█▎   ▏' $'█▍   ▏' $'█▌   ▏' $'█▋   ▏' $'█▊   ▏' $'█▉   ▏' $'██   ▏'\n   $'██   ▏' $'██▎  ▏' $'██▍  ▏' $'██▌  ▏' $'██▋  ▏' $'██▊  ▏' $'██▉  ▏' $'███  ▏'\n   $'███  ▏' $'███▎ ▏' $'███▍ ▏' $'███▌ ▏' $'███▋ ▏' $'███▊ ▏' $'███▉ ▏' $'████ ▏'\n   $'████ ▏' $'████▎▏' $'████▍▏' $'████▌▏' $'████▋▏' $'████▊▏' $'████▉▏' $'█████▏' )\n```\n\nYou can also change the background of the segment automatically depending on the\nbattery level. This will override the following variables:\n`POWERLEVEL9K_BATTERY_CHARGING`, `POWERLEVEL9K_BATTERY_CHARGED`,\n`POWERLEVEL9K_BATTERY_DISCONNECTED`, and `POWERLEVEL9K_BATTERY_LOW_COLOR`. In\norder to do this, define a color array, from low to high, as shown below:\n```zsh\nPOWERLEVEL9K_BATTERY_LEVEL_BACKGROUND=(red1 orangered1 darkorange orange1 gold1 yellow1 yellow2 greenyellow chartreuse1 chartreuse2 green1)\n```\n\nAs with the battery stages, you can use any number of colors and Powerlevel9k\nwill automatically use all of them appropriately.\n\nSome example settings:\n\n| Brightness     | Possible Array                                                                                                |\n|----------------|---------------------------------------------------------------------------------------------------------------|\n| Bright Colors  | `(red1 orangered1 darkorange orange1 gold1 yellow1 yellow2 greenyellow chartreuse1 chartreuse2 green1)`       |\n| Normal Colors  | `(red3 darkorange3 darkgoldenrod gold3 yellow3 chartreuse2 mediumspringgreen green3 green3 green4 darkgreen)` |\n| Subdued Colors | `(darkred orange4 yellow4 yellow4 chartreuse3 green3 green4 darkgreen)`                                       |\n\n##### chruby\n\nThis segment shows the version of Ruby being used when using `chruby` to change your current Ruby stack.\n\nIt uses `$RUBY_ENGINE` and `$RUBY_VERSION` as set by `chruby`.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_CHRUBY_SHOW_ENGINE`|true|Show the currently selected Ruby engine (e.g. `ruby`, `jruby`, `rbx`, etc)\n|`POWERLEVEL9K_CHRUBY_SHOW_VERSION`|true|Shows the currently selected engine's version (e.g. `2.5.1`)\n\n##### command_execution_time\n\nDisplay the time the previous command took to execute if the time is above\n`POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD`. The time is formatted to be\n\"human readable\", and so scales the units based on the length of execution time.\nIf you want more precision, just set the\n`POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION` field.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD`|3|Threshold above which to print this segment. Can be set to `0` to always print.|\n|`POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION`|2|Number of digits to use in the fractional part of the time value.|\n\n##### custom_command\n\nThe `custom_...` segment allows you to turn the output of a custom command into\na prompt segment. As an example, if you wanted to create a custom segment to\ndisplay your WiFi signal strength, you might define a custom segment called\n`custom_wifi_signal` like this:\n```zsh\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context time battery dir vcs virtualenv custom_wifi_signal)\nPOWERLEVEL9K_CUSTOM_WIFI_SIGNAL=\"echo signal: \\$(nmcli device wifi | grep yes | awk '{print \\$8}')\"\nPOWERLEVEL9K_CUSTOM_WIFI_SIGNAL_BACKGROUND=\"blue\"\nPOWERLEVEL9K_CUSTOM_WIFI_SIGNAL_FOREGROUND=\"yellow\"\n```\nIf you prefer, you can also define the function in your `.zshrc` rather than\nputting it in-line with the variable export, as shown above. Just don't forget\nto invoke your function from your segment! Example code that achieves the same\nresult as the above:\n```zsh\nzsh_wifi_signal(){\n    local signal=$(nmcli device wifi | grep yes | awk '{print $8}')\n    local color='%F{yellow}'\n    [[ $signal -gt 75 ]] && color='%F{green}'\n    [[ $signal -lt 50 ]] && color='%F{red}'\n    echo -n \"%{$color%}\\uf230  $signal%{%f%}\" # \\uf230 is \n}\n\nPOWERLEVEL9K_CUSTOM_WIFI_SIGNAL=\"zsh_wifi_signal\"\nPOWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context time battery dir vcs virtualenv custom_wifi_signal)\n```\nThe command, above, gives you the wireless signal segment shown below:\n\n![signal](http://i.imgur.com/hviMATC.png)\n\nYou can define as many custom segments as you wish. If you think you have\na segment that others would find useful, please consider upstreaming it to the\nmain theme distribution so that everyone can use it!\n\n##### context\n\nThe `context` segment (user@host string) is conditional. By default, it will\nonly print if you are not your 'normal' user (including if you are root), or if\nyou are SSH'd to a remote host. `SUDO` and `REMOTE_SUDO` states are also available to show whether the current user or remote user has superuser privileges.\n\nTo use this feature, make sure the `context` segment is enabled in your prompt\nelements (it is by default), and define a `DEFAULT_USER` in your `~/.zshrc`.\n\nYou can customize the `context` segment. For example, you can make it to print the\nfull hostname by setting\n\n```\nPOWERLEVEL9K_CONTEXT_TEMPLATE=\"%n@`hostname -f`\"\n```\n\nYou can set the `POWERLEVEL9K_CONTEXT_HOST_DEPTH` variable to change how the\nhostname is displayed. See [ZSH Manual](http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Login-information)\nfor details. The default is set to %m which will show the hostname up to the first ‘.’\nYou can set it to %{N}m where N is an integer to show that many segments of system\nhostname. Setting N to a negative integer will show that many segments from the\nend of the hostname.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`DEFAULT_USER`|None|Username to consider a \"default context\" (you can also set `$USER`).|\n|`POWERLEVEL9K_ALWAYS_SHOW_CONTEXT`|false|Always show this segment, including $USER and hostname.|\n|`POWERLEVEL9K_ALWAYS_SHOW_USER`|false|Always show the username, but conditionalize the hostname.|\n|`POWERLEVEL9K_CONTEXT_TEMPLATE`|%n@%m|Default context prompt (username@machine). Refer to the [ZSH Documentation](http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html) for all possible expansions, including deeper host depths.|\n\nThis segment can have different states. They might help you to visualize your\ndifferent privileges. Read more about styling with states [here](https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt#special-segment-colors).\n\n| State         | Meaning                                                  |\n|---------------|----------------------------------------------------------|\n| `DEFAULT`     | You are a normal user                                    |\n| `ROOT`        | You are the root user                                    |\n| `SUDO`        | You are using elevated rights                            |\n| `REMOTE_SUDO` | You are SSH'ed into the machine and have elevated rights |\n| `REMOTE`      | You are SSH'ed into the machine                          |\n\n##### date\n\nThe `date` segment shows the current system date.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_DATE_FORMAT`|`%D{%d.%m.%y}`|[ZSH time format](http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Date-and-time) to use in this segment.|\n\n##### dir\n\nThe `dir` segment shows the current working directory. When using the \"Awesome\nPowerline\" fonts, there are additional glyphs, as well:\n\n| `Compatible` | `Powerline` | `Awesome Powerline` | Situation\n|------------|-----------|-------------------|----------------------------\n| None       | None      | ![](https://cloud.githubusercontent.com/assets/1544760/12183451/40ec4016-b58f-11e5-9b9e-74e2b2f0b8b3.png) | At the root of your home folder |\n| None       | None      | ![](https://cloud.githubusercontent.com/assets/1544760/12369315/8a5d762c-bbf5-11e5-8a20-ca1179f48d6c.png) | Within a subfolder of your home directory |\n| None       | None      | ![](https://cloud.githubusercontent.com/assets/1544760/12183452/40f79286-b58f-11e5-9b8c-ed1343a07b08.png) | Outside of your home folder |\n| None       | None      | ⚙ | Within the `/etc` directory |\n\nTo turn off these icons you could set these variables to an empty string.\n```zsh\nPOWERLEVEL9K_HOME_ICON=''\nPOWERLEVEL9K_HOME_SUB_ICON=''\nPOWERLEVEL9K_FOLDER_ICON=''\nPOWERLEVEL9K_ETC_ICON=''\n```\nYou can limit the output to a certain length by truncating long paths.\nCustomizations available are:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_DIR_PATH_ABSOLUTE`|None|If set to `true`, will use absolute paths instead of home folder abbreviation `~`|\n|`POWERLEVEL9K_SHORTEN_DIR_LENGTH`|`2`|If your shorten strategy, below, is entire directories, this field determines how many directories to leave at the end. If your shorten strategy is by character count, this field determines how many characters to allow per directory string.|\n|`POWERLEVEL9K_SHORTEN_STRATEGY`|None|How the directory strings should be truncated. See the table below for more informations.|\n|`POWERLEVEL9K_SHORTEN_DELIMITER`|`..`|Delimiter to use in truncated strings. This can be any string you choose, including an empty string if you wish to have no delimiter.|\n\n| Strategy Name | Description |\n|---------------|-------------|\n|Default|Truncate whole directories from left. How many is defined by `POWERLEVEL9K_SHORTEN_DIR_LENGTH`|\n|`truncate_absolute_chars`|Truncates an absolute number of characters from the left such that the number of characters that your path displays (with or without `POWERLEVEL9K_SHORTEN_DELIMITER`) is no more than `POWERLEVEL9K_SHORTEN_DIR_LENGTH` + the length of `POWERLEVEL9K_SHORTEN_DELIMITER` |\n|`truncate_middle`|Truncates the middle part of a folder. E.g. you are in a folder named `~/MySuperProjects/AwesomeFiles/BoringOffice`, then it will truncated to `~/MyS..cts/Awe..les/BoringOffice`, if `POWERLEVEL9K_SHORTEN_DIR_LENGTH=3` is also set (controls the amount of characters to be left).|\n|`truncate_from_right`|Just leaves the beginning of a folder name untouched. E.g. your folders will be truncated like so: `/ro../Pr../office`. How many characters will be untouched is controlled by `POWERLEVEL9K_SHORTEN_DIR_LENGTH`.|\n|`truncate_absolute`|Truncates everything exept the last few characters in the path. E.g. if you are in a folder named `~/Projects/powerlevel9k` and you have set `POWERLEVEL9K_SHORTEN_DIR_LENGTH=3`, you will get `..l9k`.|\n|`truncate_to_last`|Truncates everything before the last folder in the path.|\n|`truncate_to_first_and_last`|Truncate middle directories from the path. How many directories will be untouched is controlled by `POWERLEVEL9K_SHORTEN_DIR_LENGTH`. E.g. if you are in a folder named `~/Projects/powerlevel9k` and you have set `POWERLEVEL9K_SHORTEN_DIR_LENGTH=1`, you will get `~/../powerlevel9k`.||\n|`truncate_to_unique`|Parse all parent path components and truncate them to the shortest unique length. If you copy & paste the result to a shell, after hitting `TAB` it should expand to the original path unambiguously.|\n|`truncate_with_package_name`|Search for a `package.json` or `composer.json` and prints the `name` field to abbreviate the directory path. The precedence and/or files could be set by `POWERLEVEL9K_DIR_PACKAGE_FILES=(package.json composer.json)`. If you have [jq](https://stedolan.github.io/jq/) installed, it will dramatically improve the speed of this strategy.|\n|`truncate_with_folder_marker`|Search for a file that is specified by `POWERLEVEL9K_SHORTEN_FOLDER_MARKER` and truncate everything before that (if found, otherwise stop on $HOME and ROOT).|\n\nFor example, if you wanted the truncation behavior of the `fish` shell, which\ntruncates `/usr/share/plasma` to `/u/s/plasma`, you would use the following:\n```zsh\nPOWERLEVEL9K_SHORTEN_DIR_LENGTH=1\nPOWERLEVEL9K_SHORTEN_DELIMITER=\"\"\nPOWERLEVEL9K_SHORTEN_STRATEGY=\"truncate_from_right\"\n```\nIn each case you have to specify the length you want to shorten the directory\nto. So in some cases `POWERLEVEL9K_SHORTEN_DIR_LENGTH` means characters, in\nothers whole directories.\n\nThe `truncate_with_package_name` strategy gives your directory path relative to the root of your project.  For example, if you have a project inside `$HOME/projects/my-project` with a `package.json` that looks like:\n\n```json\n{\n  \"name\": \"my-cool-project\"\n}\n```\n\nThe path shown would be `my-cool-project`.  If you navigate to `$HOME/projects/my-project/src`, then the path shown would be `my-cool-project/src`.  Please note that this currently looks for `.git` directory to determine the root of the project.\n\nIf you want to customize the directory separator, you could set:\n```zsh\n# Double quotes are important here!\nPOWERLEVEL9K_DIR_PATH_SEPARATOR=\"%F{red} $(print_icon 'LEFT_SUBSEGMENT_SEPARATOR') %F{black}\"\n```\nTo omit the first character (usually a slash that gets replaced if you set `POWERLEVEL9K_DIR_PATH_SEPARATOR`),\nyou could set `POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER=true`.\n\nYou can also customize the leading tilde character when you are in `$HOME` using:\n```zsh\n# Double quotes are important here!\nPOWERLEVEL9K_HOME_FOLDER_ABBREVIATION=\"%F{red} $(print_icon 'HOME_ICON') %F{black}\"\n```\nYou can also configure the `dir` segment to show when you are in a directory without write permissions, using the variable below.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_DIR_SHOW_WRITABLE`|`false`|If set to `true` and you are in a directory that you do not have write permissions for, this segment will display a lock icon and enter the `NOT_WRITABLE` state (which can be customized per [our usual process](https://github.com/bhilburn/powerlevel9k/wiki/Stylizing-Your-Prompt#segment-color-customization)). Note that this functionality is also available in a separate segment, `dir_writable`.|\n\nIf you want to customize the last directory of the path, you can now set `POWERLEVEL9K_DIR_PATH_HIGHLIGHT_FOREGROUND` to a custom color and/or `POWERLEVEL9K_DIR_PATH_HIGHLIGHT_BOLD=true` to display that part in bold.\n\nYou can also color the separator separately by setting the color using `POWERLEVEL9K_DIR_PATH_SEPARATOR_FOREGROUND`.\n\n##### disk_usage\n\nThe `disk_usage` segment will show the usage level of the partition that your current working directory resides in. It can be configured with the following variables.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_DISK_USAGE_ONLY_WARNING`|false|Hide the segment except when usage levels have hit warning or critical levels.|\n|`POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL`|90|The usage level that triggers a warning state.|\n|`POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL`|95|The usage level that triggers a critical state.|\n\n##### host\n\nThe `host` segment will print the hostname.\n\nYou can set the `POWERLEVEL9K_HOST_TEMPLATE` variable to change how the hostname\nis displayed. See (ZSH Manual)[http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html#Login-information]\nfor details. The default is set to `%m` which will show the hostname up to the\nfirst `.`. You can set it to `%{N}m` where N is an integer to show that many\nsegments of system hostname. Setting `N` to a negative integer will show that many\nsegments from the end of the hostname.\n\n```\nPOWERLEVEL9K_HOST_TEMPLATE=\"%2m\"\n```\n\nBy default, LOCAL hosts will show the host icon and remote hosts will show the SSH icon. You can override them by setting\n```\nPOWERLEVEL9K_HOST_ICON=\"\\uF109 \"\nPOWERLEVEL9K_SSH_ICON=\"\\uF489 \"\n```\n\n\n##### ip\n\nThis segment tries to examine all currently used network interfaces and prints\nthe first address it finds.  In the case that this is not the right NIC, you can\nspecify the correct network interface by setting:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_IP_INTERFACE`|None|The NIC for which you wish to display the IP address. Example: `eth0`.|\n\n##### vpn_ip\n\nThis segment tries to extract the VPN related IP addresses from nmcli, based on the NIC type:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_VPN_IP_INTERFACE`|`tun`|The VPN interface.|\n\n##### public_ip\n\nThis segment will display your public IP address. There are several methods of obtaining this\ninformation and by default it will try all of them starting with the most efficient. You can\nalso specify which method you would like it to use. The methods available are dig using opendns,\ncurl, or wget. The host used for wget and curl is http://ident.me by default but can be set to\nanother host if you prefer.\n\nIf you activate a VPN, the icon for this segment will change to the defined VPN icon.\n\nThe public_ip segment will attempt to update your public IP address every 5 minutes by default(also\nconfigurable by the user). If you lose connection your cached IP address will be displayed until\nyour timeout expires at which point every time your prompt is generated a new attempt will be made.\nUntil an IP is successfully pulled the value of $POWERLEVEL9K_PUBLIC_IP_NONE will be displayed for\nthis segment. If this value is empty(the default)and $POWERLEVEL9K_PUBLIC_IP_FILE is empty the\nsegment will not be displayed.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_PUBLIC_IP_FILE`|'/tmp/p9k_public_ip'|This is the file your public IP is cached in.|\n|`POWERLEVEL9K_PUBLIC_IP_HOST`|'http://ident.me'|This is the default host to get your public IP.|\n|`POWERLEVEL9K_PUBLIC_IP_TIMEOUT`|300|The amount of time in seconds between refreshing your cached IP.|\n|`POWERLEVEL9K_PUBLIC_IP_METHODS`|(dig curl wget)| These methods in that order are used to refresh your IP.|\n|`POWERLEVEL9K_PUBLIC_IP_NONE`|None|The string displayed when an IP was not obtained|\n\n##### load\n\nDisplays one of your load averages with appropriate state coloring. The thresholds are:\n- `0.7 * NUM_CORES <`: critical\n- `0.5 * NUM_CORES <`: warning\n- `less`: normal\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_LOAD_WHICH`|5|Which average to show. Possible values: 1, 5 or 15|\n\n##### newline\n\nPuts a newline in your prompt so you can continue using segments on the next\nline. This allows you to use segments on both lines, unlike\n`POWERLEVEL9K_PROMPT_ON_NEWLINE`, which simply separates segments from the\nprompt itself.\n\nThis only works on the left side.  On the right side it does nothing.\n\n##### nodeenv\n\nShows the currently used [nodeenv](https://github.com/ekalinin/nodeenv). To avoid\nNodeenvs activate command from interfering with Powerlevel9k, you should set\n`NODE_VIRTUAL_ENV_DISABLE_PROMPT=1` in your `~/.zshrc`.\n\n##### rbenv\n\nThis segment shows the version of Ruby being used when using `rbenv` to change your current Ruby stack.\n\nIt figures out the version being used by taking the output of the `rbenv version-name` command.\n\n* If `rbenv` is not in $PATH, nothing will be shown.\n* By default, if the current local Ruby version is the same as the global Ruby version, nothing will be shown. See the configuration variable, below, to modify this behavior.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW`|`false`|Set to true if you wish to show the rbenv segment even if the current Ruby version is the same as the global Ruby version|\n\n##### pyenv\n\nThis segment shows the version of Python being used when using `pyenv` to change your current Python stack.\n\nThe `PYENV_VERSION` environment variable will be used if specified. Otherwise it figures out the version being used by taking the output of the `pyenv version-name` command.\n\n* If `pyenv` is not in $PATH, nothing will be shown.\n* If the current Python version is the same as the global Python version, nothing will be shown.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW`|`false`|Set to true if you wish to show the pyenv segment even if the current Python version is the same as the global Python version|\n\n##### rspec_stats\n\nSee [Unit Test Ratios](#unit-test-ratios), below.\n\n##### status\n\nThis segment shows the return code of the last command.\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_STATUS_CROSS`|`false`|Set to true if you wish not to show the error code when the last command returned an error and optionally hide this segment when the last command completed successfully by setting `POWERLEVEL9K_STATUS_OK` to false.|\n|`POWERLEVEL9K_STATUS_OK`|`true`|Set to true if you wish to show this segment when the last command completed successfully, false to hide it.|\n|`POWERLEVEL9K_STATUS_SHOW_PIPESTATUS`|`true`|Set to true if you wish to show the exit status for all piped commands.|\n|`POWERLEVEL9K_STATUS_HIDE_SIGNAME`|`false`|Set to true return the raw exit code (`1-255`).  When set to false, values over 128 are shown as `SIGNAME(-n)` (e.g. `KILL(-9)`)|\n\n##### ram\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_RAM_ELEMENTS`|Both|Specify `ram_free` or `swap_used` to only show one or the other rather than both.|\n\n##### symfony2_tests\n\nSee [Unit Test Ratios](#unit-test-ratios), below.\n\n##### time\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_TIME_FORMAT`|`'H:M:S'`|ZSH time format to use in this segment.|\n\nAs an example, if you wanted a reversed time format, you would use this:\n```zsh\n# Reversed time format\nPOWERLEVEL9K_TIME_FORMAT='%D{%S:%M:%H}'\n```\nIf you are using an \"Awesome Powerline Font\", you can add a time symbol to this\nsegment, as well:\n```zsh\n# Output time, date, and a symbol from the \"Awesome Powerline Font\" set\nPOWERLEVEL9K_TIME_FORMAT=\"%D{%H:%M:%S \\uE868  %d.%m.%y}\"\n```\n##### user\n\nThe `user` segment will print the username.\n\nYou can also override the icons by setting:\n\n```\nPOWERLEVEL9K_USER_ICON=\"\\uF415\" # \nPOWERLEVEL9K_ROOT_ICON=\"#\"\nPOWERLEVEL9K_SUDO_ICON=$'\\uF09C' # \n```\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`DEFAULT_USER`|None|Username to consider a \"default context\".|\n|`POWERLEVEL9K_ALWAYS_SHOW_USER`|`false`|Always print this segment.|\n|`POWERLEVEL9K_USER_TEMPLATE`|`%n`|Default username prompt. Refer to the [ZSH Documentation](http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html) for all possible expansions|\n\n##### vcs\n\nBy default, the `vcs` segment will provide quite a bit of information. Further\ncustomization is provided via:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_HIDE_BRANCH_ICON`|`false`|Set to `true` to hide the branch icon from the segment.|\n|`POWERLEVEL9K_SHOW_CHANGESET`|`false`|Set to `true` to display the hash / changeset in the segment.|\n|`POWERLEVEL9K_CHANGESET_HASH_LENGTH`|`12`|How many characters of the hash / changeset to display in the segment.|\n|`POWERLEVEL9K_VCS_SHOW_SUBMODULE_DIRTY`|`true`|Set to `false` to not reflect submodule status in the top-level repository prompt.|\n|`POWERLEVEL9K_VCS_HIDE_TAGS`|`false`|Set to `true` to stop tags being displayed in the segment.|\n|`POWERLEVEL9K_VCS_GIT_HOOKS`|`(vcs-detect-changes git-untracked git-aheadbehind git-stash git-remotebranch git-tagname)`|Layout of the segment for git repositories.|\n|`POWERLEVEL9K_VCS_HG_HOOKS`|`(vcs-detect-changes)`|Layout of the segment for Mercurial repositories.|\n|`POWERLEVEL9K_VCS_SVN_HOOKS`|`(vcs-detect-changes svn-detect-changes)`|Layout of the segment for SVN repositories.|\n|`POWERLEVEL9K_VCS_ACTIONFORMAT_FOREGROUND`|`red`|The color of the foreground font during actions (e.g., `REBASE`).|\n\n\n##### vcs symbols\n\nThe `vcs` segment uses various symbols to tell you the state of your repository.\nThese symbols depend on your installed font and selected `POWERLEVEL9K_MODE`\nfrom the [Installation](#Installation) section above.\n\n| `Compatible` | `Powerline` | `Awesome Powerline` | Explanation\n|--------------|---------------------|-------------------|--------------------------\n| `↑4`         | `↑4`                | ![icon_outgoing](https://cloud.githubusercontent.com/assets/1544760/7976089/b5904d6e-0a76-11e5-8147-5e873ac52d79.gif)4  | Number of commits your repository is ahead of your remote branch\n| `↓5`         | `↓5`                | ![icon_incoming](https://cloud.githubusercontent.com/assets/1544760/7976091/b5909c9c-0a76-11e5-9cad-9bf0a28a897c.gif)5  | Number of commits your repository is behind of your remote branch\n| `⍟3`         | `⍟3`                | ![icon_stash](https://cloud.githubusercontent.com/assets/1544760/7976094/b5ae9346-0a76-11e5-8cc7-e98b81824118.gif)3 | Number of stashes, here 3.\n| `●`          | `●`                 | ![icon_unstaged](https://cloud.githubusercontent.com/assets/1544760/7976096/b5aefa98-0a76-11e5-9408-985440471215.gif) | There are unstaged changes in your working copy\n| `✚`          | `✚`                 | ![icon_staged](https://cloud.githubusercontent.com/assets/1544760/7976095/b5aecc8a-0a76-11e5-8988-221afc6e8982.gif) | There are staged changes in your working copy\n| `?`          | `?`                 | ![icon_untracked](https://cloud.githubusercontent.com/assets/1544760/7976098/b5c7a2e6-0a76-11e5-8c5b-315b595b2bc4.gif)  | There are files in your working copy, that are unknown to your repository\n| `→`          | `→`                 | ![icon_remote_tracking_branch](https://cloud.githubusercontent.com/assets/1544760/7976093/b5ad2c0e-0a76-11e5-9cd3-62a077b1b0c7.gif) | The name of your branch differs from its tracking branch.\n| `☿`          | `☿`                 | ![icon_bookmark](https://cloud.githubusercontent.com/assets/1544760/7976197/546cfac6-0a78-11e5-88a6-ce3a1e0a174e.gif) | A mercurial bookmark is active.\n| `@`         | ![icon_branch_powerline](https://cloud.githubusercontent.com/assets/1544760/8000852/e7e8d8a0-0b5f-11e5-9834-de9b25c92284.gif) | ![](https://cloud.githubusercontent.com/assets/1544760/7976087/b58bbe3e-0a76-11e5-8d0d-7a5c1bc7f730.gif) | Branch Icon\n| None         |  None               | ![icon_commit](https://cloud.githubusercontent.com/assets/1544760/7976088/b58f4e50-0a76-11e5-9e70-86450d937030.gif)2c3705 | The current commit hash. Here \"2c3705\"\n| None         |  None               | ![icon_git](https://cloud.githubusercontent.com/assets/1544760/7976092/b5909f80-0a76-11e5-9950-1438b9d72465.gif) | Repository is a git repository\n| None         |  None               | ![icon_mercurial](https://cloud.githubusercontent.com/assets/1544760/7976090/b5908da6-0a76-11e5-8c91-452b6e73f631.gif) | Repository is a Mercurial repository\n\n##### vcs truncation\n\nYou can limit the branch name to a certain length by truncating long names.\nCustomizations available are:\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_VCS_SHORTEN_LENGTH`|None|This field determines how many characters to show.|\n|`POWERLEVEL9K_VCS_SHORTEN_MIN_LENGTH`|None|This field determines minimum branch length. Branch name will be truncated if its length greater than this field.|\n|`POWERLEVEL9K_VCS_SHORTEN_STRATEGY`|None|This field determines how branch name should be truncated. See the table below for more information.|\n|`POWERLEVEL9K_SHORTEN_DELIMITER`|`...`|Delimiter to use in truncated strings. This can be any string you choose, including an empty string if you wish to have no delimiter.|\n\n| Strategy Name | Description |\n|---------------|-------------|\n|`truncate_middle`|Truncates the middle part of a branch. E.g. branch name is `1234-super_super_long_branch_name`, then it will truncated to `1234-..._name`, if `POWERLEVEL9K_VCS_SHORTEN_LENGTH=5` is also set (controls the amount of characters to be left).|\n|`truncate_from_right`|Just leaves the beginning of a branch name untouched. E.g. branch name will be truncated like so: `1234-...`. How many characters will be untouched is controlled by `POWERLEVEL9K_VCS_SHORTEN_LENGTH`.|\n\nFor example, if you want to truncate `1234-super_super_long_branch_name` to `1234-..` and don't do it with `development`:\n```zsh\nPOWERLEVEL9K_VCS_SHORTEN_LENGTH=4\nPOWERLEVEL9K_VCS_SHORTEN_MIN_LENGTH=11\nPOWERLEVEL9K_VCS_SHORTEN_STRATEGY=\"truncate_from_right\"\nPOWERLEVEL9K_VCS_SHORTEN_DELIMITER=\"..\"\n```\n\n##### vi_mode\n\nThis segment shows ZSH's current input mode. Note that this is only useful if\nyou are using the [ZSH Line Editor](http://zsh.sourceforge.net/Doc/Release/Zsh-Line-Editor.html)\n(VI mode).  You can enable this either by `.zshrc` configuration or using a plugin, like\n[Oh-My-Zsh's vi-mode plugin](https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/vi-mode/vi-mode.plugin.zsh).\n\n| Variable | Default Value | Description |\n|----------|---------------|-------------|\n|`POWERLEVEL9K_VI_INSERT_MODE_STRING`|`\"INSERT\"`|String to display while in 'Insert' mode.|\n|`POWERLEVEL9K_VI_COMMAND_MODE_STRING`|`\"NORMAL\"`|String to display while in 'Command' mode.|\n\nTo hide the segment entirely when in `INSERT` mode, set `POWERLEVEL9K_VI_INSERT_MODE_STRING=''`\n\n##### virtualenv\n\nThis segment shows your Python [VirtualEnv](https://virtualenv.pypa.io/en/latest/). To avoid\nVirtualEnvs activate command from interfering with Powerlevel9k, you should set\n`VIRTUAL_ENV_DISABLE_PROMPT=1` in your `~/.zshrc`.\n\n#### Unit Test Ratios\n\nThe `symfony2_tests` and `rspec_stats` segments both show a ratio of \"real\"\nclasses vs test classes in your source code. This is just a very simple ratio,\nand does not show your code coverage or any sophisticated stats. All this does\nis count your source files and test files, and calculate the ratio between them.\nJust enough to give you a quick overview about the test situation of the project\nyou are dealing with.\n\n### Disabling / Enabling Powerlevel9k\n\nYou can disable P9k and return to a very basic prompt at any time simply by\ncalling:\n\n```zsh\n$ prompt_powerlevel9k_teardown\n```\n\nYou can then re-enable it by calling:\n\n```zsh\n$ prompt_powerlevel9k_setup\n```\n\n### tl; dr\n\nWant to just get a quick start? Check out the [Show Off Your\nConfig](https://github.com/bhilburn/powerlevel9k/wiki/Show-Off-Your-Config)\nportion of the wiki to get going.\n\n[The Wiki also has a ton of other useful\ninformation!](https://github.com/bhilburn/powerlevel9k/wiki)\n\n### License\n\nProject: MIT\n\nLogo: CC-BY-SA. Source repository: https://github.com/bhilburn/powerlevel9k-logo\n"
        },
        {
          "name": "TESTS.md",
          "type": "blob",
          "size": 2.2158203125,
          "content": "# Tests\n\n## Automated Tests\n\nThe Unit-Tests do not follow exactly the file structure of Powerlevel9k itself,\nbut we try to reflect the structure as much as possible. All tests are located\nunder `test/`. Segment specific tests under `test/segments/` (one file per\nsegment).\n\n### Installation\n\nIn order to execute the tests you need to install `shunit2`, which is a\nsubmodule. To install the submodule, you can execute \n`git submodule init && git submodule update`.\n\n### Executing tests\n\nThe tests are shell scripts on their own. So you can execute them right away.\nTo execute all tests you could just execute `./test/suite.spec`.\n\n### General Test Structure\n\nThe tests usually have a `setUp()` function which is executed before every\ntest function. Speaking of, test functions must be prefixed with `test`. In\nthe tests, you can do [different Assertions](https://github.com/kward/shunit2#-asserts).\nIt is always a good idea to mock the program you want to test (just have a\nlook at other tests), so that the testrunner does not have to have all\nprograms installed.\n\n### Travis\n\nWe use [Travis](https://travis-ci.org/) for Continuous Integration. This\nservice executes our tests after every push. For now, we need to tell travis\nwhere to find the tests, which is what happens in the `.travis.yml` file.\n\n## Manual Testing\n\nIf unit tests are not sufficient (e.g. you have an issue with your prompt that\noccurs only in a specific ZSH framework) then you can use either Docker or\nor our Vagrant.\n\n### Docker\n\nThis is the easiest to use _if_ you have Docker already installed and running.\n\nThe command `./test-in-docker` should make it fairly easy to get into a running\ncontainer with the framework of your choice.\n\nExamples:\n\n``` zsh\n# Test Antigen with the oldest version of ZSH\n$ ./test-in-docker antigen\n```\n\n``` zsh\n# Test Prezto with ZSH version 5.2\n$ ./test-in-docker --zsh 5.2 prezto\n```\n\nYou can get Docker at <https://www.docker.com/community-edition>.\n\n**Note:** Not all frameworks work with all versions of ZSH (or the underlying OS).\n\n### Vagrant\n\nCurrently there are two test VMs. `test-vm` is an Ubuntu machine with several\npre-installed ZSH frameworks. And there is `test-bsd-vm` which is a FreeBSD!\nFor how to run the machines see [here](test-vm/README.md).\n"
        },
        {
          "name": "debug",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "functions",
          "type": "tree",
          "content": null
        },
        {
          "name": "powerlevel9k.zsh-theme",
          "type": "blob",
          "size": 72.3896484375,
          "content": "# vim:ft=zsh ts=2 sw=2 sts=2 et fenc=utf-8\n################################################################\n# powerlevel9k Theme\n# https://github.com/bhilburn/powerlevel9k\n#\n# This theme was inspired by agnoster's Theme:\n# https://gist.github.com/3712874\n################################################################\n\n################################################################\n# For basic documentation, please refer to the README.md in the top-level\n# directory. For more detailed documentation, refer to the project wiki, hosted\n# on Github: https://github.com/bhilburn/powerlevel9k/wiki\n#\n# There are a lot of easy ways you can customize your prompt segments and\n# theming with simple variables defined in your `~/.zshrc`.\n################################################################\n\n## Turn on for Debugging\n#PS4='%s%f%b%k%F{blue}%{λ%}%L %F{240}%N:%i%(?.. %F{red}%?) %1(_.%F{yellow}%-1_ .)%s%f%b%k '\n#zstyle ':vcs_info:*+*:*' debug true\n#set -o xtrace\n\n# Try to set the installation path\nif [[ -n \"$POWERLEVEL9K_INSTALLATION_DIR\" ]]; then\n  p9k_directory=${POWERLEVEL9K_INSTALLATION_DIR:A}\nelse\n  if [[ \"${(%):-%N}\" == '(eval)' ]]; then\n    if [[ \"$0\" == '-antigen-load' ]] && [[ -r \"${PWD}/powerlevel9k.zsh-theme\" ]]; then\n      # Antigen uses eval to load things so it can change the plugin (!!)\n      # https://github.com/zsh-users/antigen/issues/581\n      p9k_directory=$PWD\n    else\n      print -P \"%F{red}You must set POWERLEVEL9K_INSTALLATION_DIR work from within an (eval).%f\"\n      return 1\n    fi\n  else\n    # Get the path to file this code is executing in; then\n    # get the absolute path and strip the filename.\n    # See https://stackoverflow.com/a/28336473/108857\n    p9k_directory=${${(%):-%x}:A:h}\n  fi\nfi\n\n################################################################\n# Source icon functions\n################################################################\n\nsource \"${p9k_directory}/functions/icons.zsh\"\n\n################################################################\n# Source utility functions\n################################################################\n\nsource \"${p9k_directory}/functions/utilities.zsh\"\n\n################################################################\n# Source color functions\n################################################################\n\nsource \"${p9k_directory}/functions/colors.zsh\"\n\n################################################################\n# Source VCS_INFO hooks / helper functions\n################################################################\n\nsource \"${p9k_directory}/functions/vcs.zsh\"\n\n# cleanup temporary variables.\nunset p9k_directory\n\n################################################################\n# Color Scheme\n################################################################\n\nif [[ \"$POWERLEVEL9K_COLOR_SCHEME\" == \"light\" ]]; then\n  DEFAULT_COLOR=white\n  DEFAULT_COLOR_INVERTED=black\nelse\n  DEFAULT_COLOR=black\n  DEFAULT_COLOR_INVERTED=white\nfi\n\n################################################################\n# Prompt Segment Constructors\n#\n# Methodology behind user-defined variables overwriting colors:\n#     The first parameter to the segment constructors is the calling function's\n#     name. From this function name, we strip the \"prompt_\"-prefix and\n#     uppercase it. This is then prefixed with \"POWERLEVEL9K_\" and suffixed\n#     with either \"_BACKGROUND\" or \"_FOREGROUND\", thus giving us the variable\n#     name. So each new segment is user-overwritten by a variable following\n#     this naming convention.\n################################################################\n\n# The `CURRENT_BG` variable is used to remember what the last BG color used was\n# when building the left-hand prompt. Because the RPROMPT is created from\n# right-left but reads the opposite, this isn't necessary for the other side.\nCURRENT_BG='NONE'\n\n# Begin a left prompt segment\n# Takes four arguments:\n#   * $1: Name of the function that was originally invoked (mandatory).\n#         Necessary, to make the dynamic color-overwrite mechanism work.\n#   * $2: The array index of the current segment\n#   * $3: Background color\n#   * $4: Foreground color\n#   * $5: The segment content\n#   * $6: An identifying icon (must be a key of the icons array)\n# The latter three can be omitted,\nset_default last_left_element_index 1\nset_default POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS \" \"\nleft_prompt_segment() {\n  local segment_name=\"${1}\"\n  local current_index=$2\n  # Check if the segment should be joined with the previous one\n  local joined\n  segmentShouldBeJoined $current_index $last_left_element_index \"$POWERLEVEL9K_LEFT_PROMPT_ELEMENTS\" && joined=true || joined=false\n\n  # Colors\n  local backgroundColor=\"${3}\"\n  local foregroundColor=\"${4}\"\n\n  # Overwrite given background-color by user defined variable for this segment.\n  local BACKGROUND_USER_VARIABLE=POWERLEVEL9K_${(U)${segment_name}#prompt_}_BACKGROUND\n  local BG_COLOR_MODIFIER=${(P)BACKGROUND_USER_VARIABLE}\n  [[ -n $BG_COLOR_MODIFIER ]] && backgroundColor=\"$BG_COLOR_MODIFIER\"\n\n  # Overwrite given foreground-color by user defined variable for this segment.\n  local FOREGROUND_USER_VARIABLE=POWERLEVEL9K_${(U)${segment_name}#prompt_}_FOREGROUND\n  local FG_COLOR_MODIFIER=${(P)FOREGROUND_USER_VARIABLE}\n  [[ -n $FG_COLOR_MODIFIER ]] && foregroundColor=\"$FG_COLOR_MODIFIER\"\n\n  # Get color codes here to save some calls later on\n  backgroundColor=\"$(getColorCode ${backgroundColor})\"\n  foregroundColor=\"$(getColorCode ${foregroundColor})\"\n\n  local background foreground\n  [[ -n \"${backgroundColor}\" ]] && background=\"$(backgroundColor ${backgroundColor})\" || background=\"%k\"\n  [[ -n \"${foregroundColor}\" ]] && foreground=\"$(foregroundColor ${foregroundColor})\" || foreground=\"%f\"\n\n  if [[ $CURRENT_BG != 'NONE' ]] && ! isSameColor \"${backgroundColor}\" \"$CURRENT_BG\"; then\n    echo -n \"${background}%F{$CURRENT_BG}\"\n    if [[ $joined == false ]]; then\n      # Middle segment\n      echo -n \"$(print_icon 'LEFT_SEGMENT_SEPARATOR')$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS\"\n    fi\n  elif isSameColor \"$CURRENT_BG\" \"${backgroundColor}\"; then\n    # Middle segment with same color as previous segment\n    # We take the current foreground color as color for our\n    # subsegment (or the default color). This should have\n    # enough contrast.\n    local complement\n    [[ -n \"${foregroundColor}\" ]] && complement=\"${foreground}\" || complement=\"$(foregroundColor $DEFAULT_COLOR)\"\n    echo -n \"${background}${complement}\"\n    if [[ $joined == false ]]; then\n      echo -n \"$(print_icon 'LEFT_SUBSEGMENT_SEPARATOR')$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS\"\n    fi\n  else\n    # First segment\n    echo -n \"${background}$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS\"\n  fi\n\n  local visual_identifier\n  if [[ -n $6 ]]; then\n    visual_identifier=\"$(print_icon $6)\"\n    if [[ -n \"$visual_identifier\" ]]; then\n      # Add an whitespace if we print more than just the visual identifier.\n      # To avoid cutting off the visual identifier in some terminal emulators (e.g., Konsole, st),\n      # we need to color both the visual identifier and the whitespace.\n      [[ -n \"$5\" ]] && visual_identifier=\"$visual_identifier \"\n      # Allow users to overwrite the color for the visual identifier only.\n      local visual_identifier_color_variable=POWERLEVEL9K_${(U)${segment_name}#prompt_}_VISUAL_IDENTIFIER_COLOR\n      set_default $visual_identifier_color_variable \"${foregroundColor}\"\n      visual_identifier=\"$(foregroundColor ${(P)visual_identifier_color_variable})${visual_identifier}\"\n    fi\n  fi\n\n  # Print the visual identifier\n  echo -n \"${visual_identifier}\"\n  # Print the content of the segment, if there is any\n  [[ -n \"$5\" ]] && echo -n \"${foreground}${5}\"\n  echo -n \"${POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS}\"\n\n  CURRENT_BG=\"${backgroundColor}\"\n  last_left_element_index=$current_index\n}\n\n# End the left prompt, closes the final segment.\nleft_prompt_end() {\n  if [[ -n $CURRENT_BG ]]; then\n    echo -n \"%k$(foregroundColor ${CURRENT_BG})$(print_icon 'LEFT_SEGMENT_SEPARATOR')\"\n  else\n    echo -n \"%k\"\n  fi\n  echo -n \"%f$(print_icon 'LEFT_SEGMENT_END_SEPARATOR')\"\n  CURRENT_BG=''\n}\n\nCURRENT_RIGHT_BG='NONE'\n\n# Begin a right prompt segment\n# Takes four arguments:\n#   * $1: Name of the function that was originally invoked (mandatory).\n#         Necessary, to make the dynamic color-overwrite mechanism work.\n#   * $2: The array index of the current segment\n#   * $3: Background color\n#   * $4: Foreground color\n#   * $5: The segment content\n#   * $6: An identifying icon (must be a key of the icons array)\n# No ending for the right prompt segment is needed (unlike the left prompt, above).\nset_default last_right_element_index 1\nset_default POWERLEVEL9K_WHITESPACE_BETWEEN_RIGHT_SEGMENTS \" \"\nright_prompt_segment() {\n  local segment_name=\"${1}\"\n  local current_index=$2\n\n  # Check if the segment should be joined with the previous one\n  local joined\n  segmentShouldBeJoined $current_index $last_right_element_index \"$POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS\" && joined=true || joined=false\n\n  # Colors\n  local backgroundColor=\"${3}\"\n  local foregroundColor=\"${4}\"\n\n  # Overwrite given background-color by user defined variable for this segment.\n  local BACKGROUND_USER_VARIABLE=POWERLEVEL9K_${(U)${segment_name}#prompt_}_BACKGROUND\n  local BG_COLOR_MODIFIER=${(P)BACKGROUND_USER_VARIABLE}\n  [[ -n $BG_COLOR_MODIFIER ]] && backgroundColor=\"$BG_COLOR_MODIFIER\"\n\n  # Overwrite given foreground-color by user defined variable for this segment.\n  local FOREGROUND_USER_VARIABLE=POWERLEVEL9K_${(U)${segment_name}#prompt_}_FOREGROUND\n  local FG_COLOR_MODIFIER=${(P)FOREGROUND_USER_VARIABLE}\n  [[ -n $FG_COLOR_MODIFIER ]] && foregroundColor=\"$FG_COLOR_MODIFIER\"\n\n  # Get color codes here to save some calls later on\n  backgroundColor=\"$(getColorCode ${backgroundColor})\"\n  foregroundColor=\"$(getColorCode ${foregroundColor})\"\n\n  local background foreground\n  [[ -n \"${backgroundColor}\" ]] && background=\"$(backgroundColor ${backgroundColor})\" || background=\"%k\"\n  [[ -n \"${foregroundColor}\" ]] && foreground=\"$(foregroundColor ${foregroundColor})\" || foreground=\"%f\"\n\n  # If CURRENT_RIGHT_BG is \"NONE\", we are the first right segment.\n\n  if [[ \"$CURRENT_RIGHT_BG\" != \"NONE\" ]]; then\n    # This is the closing whitespace for the previous segment\n    echo -n \"${POWERLEVEL9K_WHITESPACE_BETWEEN_RIGHT_SEGMENTS}%f\"\n  fi\n\n  if [[ $joined == false ]] || [[ \"$CURRENT_RIGHT_BG\" == \"NONE\" ]]; then\n    if isSameColor \"$CURRENT_RIGHT_BG\" \"${backgroundColor}\"; then\n      # Middle segment with same color as previous segment\n      # We take the current foreground color as color for our\n      # subsegment (or the default color). This should have\n      # enough contrast.\n      local complement\n      [[ -n \"${foregroundColor}\" ]] && complement=\"${foreground}\" || complement=\"$(foregroundColor $DEFAULT_COLOR)\"\n      echo -n \"$complement$(print_icon 'RIGHT_SUBSEGMENT_SEPARATOR')%f\"\n    else\n      # Use the new Background Color as the foreground of the segment separator\n      echo -n \"$(foregroundColor ${backgroundColor})$(print_icon 'RIGHT_SEGMENT_SEPARATOR')%f\"\n    fi\n  fi\n\n  local visual_identifier\n  if [[ -n \"$6\" ]]; then\n    visual_identifier=\"$(print_icon $6)\"\n    if [[ -n \"$visual_identifier\" ]]; then\n      # Add an whitespace if we print more than just the visual identifier.\n      # To avoid cutting off the visual identifier in some terminal emulators (e.g., Konsole, st),\n      # we need to color both the visual identifier and the whitespace.\n      [[ -n \"$5\" ]] && visual_identifier=\" $visual_identifier\"\n      # Allow users to overwrite the color for the visual identifier only.\n      local visual_identifier_color_variable=POWERLEVEL9K_${(U)${segment_name}#prompt_}_VISUAL_IDENTIFIER_COLOR\n      set_default $visual_identifier_color_variable \"${foregroundColor}\"\n      visual_identifier=\"$(foregroundColor ${(P)visual_identifier_color_variable})${visual_identifier}\"\n    fi\n  fi\n\n  echo -n \"${background}${foreground}\"\n\n  # Print whitespace only if segment is not joined or first right segment\n  [[ $joined == false ]] || [[ \"$CURRENT_RIGHT_BG\" == \"NONE\" ]] && echo -n \"${POWERLEVEL9K_WHITESPACE_BETWEEN_RIGHT_SEGMENTS}\"\n\n  # Print segment content if there is any\n  [[ -n \"$5\" ]] && echo -n \"${5}\"\n  # Print the visual identifier\n  echo -n \"${visual_identifier}\"\n\n  CURRENT_RIGHT_BG=\"${backgroundColor}\"\n  last_right_element_index=$current_index\n}\n\n################################################################\n# Prompt Segment Definitions\n################################################################\n\n################################################################\n# Anaconda Environment\nprompt_anaconda() {\n  # Depending on the conda version, either might be set. This\n  # variant works even if both are set.\n  local _path=$CONDA_ENV_PATH$CONDA_PREFIX\n  if ! [ -z \"$_path\" ]; then\n    # config - can be overwritten in users' zshrc file.\n    set_default POWERLEVEL9K_ANACONDA_LEFT_DELIMITER \"(\"\n    set_default POWERLEVEL9K_ANACONDA_RIGHT_DELIMITER \")\"\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"blue\" \"$DEFAULT_COLOR\" \"$POWERLEVEL9K_ANACONDA_LEFT_DELIMITER$(basename $_path)$POWERLEVEL9K_ANACONDA_RIGHT_DELIMITER\" 'PYTHON_ICON'\n  fi\n}\n\n################################################################\n# AWS Profile\nprompt_aws() {\n  local aws_profile=\"${AWS_PROFILE:-$AWS_DEFAULT_PROFILE}\"\n\n  if [[ -n \"$aws_profile\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" red white \"$aws_profile\" 'AWS_ICON'\n  fi\n}\n\n################################################################\n# Current Elastic Beanstalk environment\nprompt_aws_eb_env() {\n  local eb_env=$(grep environment .elasticbeanstalk/config.yml 2> /dev/null | awk '{print $2}')\n\n  if [[ -n \"$eb_env\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" black green \"$eb_env\" 'AWS_EB_ICON'\n  fi\n}\n\n################################################################\n# Segment to indicate background jobs with an icon.\nset_default POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE true\nset_default POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE_ALWAYS false\nprompt_background_jobs() {\n  local background_jobs_number=${$(jobs -l | wc -l)// /}\n  local wrong_lines=`jobs -l | awk '/pwd now/{ count++ } END {print count}'`\n  if [[ wrong_lines -gt 0 ]]; then\n     background_jobs_number=$(( $background_jobs_number - $wrong_lines ))\n  fi\n  if [[ background_jobs_number -gt 0 ]]; then\n    local background_jobs_number_print=\"\"\n    if [[ \"$POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE\" == \"true\" ]] && ([[ \"$background_jobs_number\" -gt 1 ]] || [[ \"$POWERLEVEL9K_BACKGROUND_JOBS_VERBOSE_ALWAYS\" == \"true\" ]]); then\n      background_jobs_number_print=\"$background_jobs_number\"\n    fi\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR\" \"cyan\" \"$background_jobs_number_print\" 'BACKGROUND_JOBS_ICON'\n  fi\n}\n\n################################################################\n# A newline in your prompt, so you can segments on multiple lines.\nprompt_newline() {\n  local lws newline\n  [[ \"$1\" == \"right\" ]] && return\n  newline=$'\\n'\n  lws=$POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS\n  if [[ \"$POWERLEVEL9K_PROMPT_ON_NEWLINE\" == true ]]; then\n    newline=\"${newline}$(print_icon 'MULTILINE_NEWLINE_PROMPT_PREFIX')\"\n  fi\n  POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS=\n  \"$1_prompt_segment\" \\\n    \"$0\" \\\n    \"$2\" \\\n    \"\" \"\" \"${newline}\"\n  CURRENT_BG='NONE'\n  POWERLEVEL9K_WHITESPACE_BETWEEN_LEFT_SEGMENTS=$lws\n}\n\n################################################################\n# Segment that indicates usage level of current partition.\nset_default POWERLEVEL9K_DISK_USAGE_ONLY_WARNING false\nset_default POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL 90\nset_default POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL 95\nprompt_disk_usage() {\n  local current_state=\"unknown\"\n  typeset -AH hdd_usage_forecolors\n  hdd_usage_forecolors=(\n    'normal'        'yellow'\n    'warning'       \"$DEFAULT_COLOR\"\n    'critical'      'white'\n  )\n  typeset -AH hdd_usage_backcolors\n  hdd_usage_backcolors=(\n    'normal'        $DEFAULT_COLOR\n    'warning'       'yellow'\n    'critical'      'red'\n  )\n\n  local disk_usage=\"${$(\\df -P . | sed -n '2p' | awk '{ print $5 }')%%\\%}\"\n\n  if [ \"$disk_usage\" -ge \"$POWERLEVEL9K_DISK_USAGE_WARNING_LEVEL\" ]; then\n    current_state='warning'\n    if [ \"$disk_usage\" -ge \"$POWERLEVEL9K_DISK_USAGE_CRITICAL_LEVEL\" ]; then\n        current_state='critical'\n    fi\n  else\n    if [[ \"$POWERLEVEL9K_DISK_USAGE_ONLY_WARNING\" == true ]]; then\n        current_state=''\n        return\n    fi\n    current_state='normal'\n  fi\n\n  local message=\"${disk_usage}%%\"\n\n  # Draw the prompt_segment\n  if [[ -n $disk_usage ]]; then\n    \"$1_prompt_segment\" \"${0}_${current_state}\" \"$2\" \"${hdd_usage_backcolors[$current_state]}\" \"${hdd_usage_forecolors[$current_state]}\" \"$message\" 'DISK_ICON'\n  fi\n}\n\n################################################################\n# Segment that displays the battery status in levels and colors\nprompt_battery() {\n  # The battery can have four different states - default to 'unknown'.\n  local current_state='unknown'\n  typeset -AH battery_states\n  battery_states=(\n    'low'           'red'\n    'charging'      'yellow'\n    'charged'       'green'\n    'disconnected'  \"$DEFAULT_COLOR_INVERTED\"\n  )\n  local ROOT_PREFIX=\"${4}\"\n  # Set default values if the user did not configure them\n  set_default POWERLEVEL9K_BATTERY_LOW_THRESHOLD  10\n\n  if [[ $OS =~ OSX && -f \"${ROOT_PREFIX}\"/usr/bin/pmset && -x \"${ROOT_PREFIX}\"/usr/bin/pmset ]]; then\n    # obtain battery information from system\n    local raw_data=\"$(${ROOT_PREFIX}/usr/bin/pmset -g batt | awk 'FNR==2{print}')\"\n    # return if there is no battery on system\n    [[ -z $(echo $raw_data | grep \"InternalBattery\") ]] && return\n\n    # Time remaining on battery operation (charging/discharging)\n    local tstring=$(echo $raw_data | awk -F ';' '{print $3}' | awk '{print $1}')\n    # If time has not been calculated by system yet\n    [[ $tstring =~ '(\\(no|not)' ]] && tstring=\"...\"\n\n    # percent of battery charged\n    typeset -i 10 bat_percent\n    bat_percent=$(echo $raw_data | grep -o '[0-9]*%' | sed 's/%//')\n\n    local remain=\"\"\n    # Logic for string output\n    case $(echo $raw_data | awk -F ';' '{print $2}' | awk '{$1=$1};1') in\n      # for a short time after attaching power, status will be 'AC attached;'\n      'charging'|'finishing charge'|'AC attached')\n        current_state=\"charging\"\n        remain=\" ($tstring)\"\n        ;;\n      'discharging')\n        [[ $bat_percent -lt $POWERLEVEL9K_BATTERY_LOW_THRESHOLD ]] && current_state=\"low\" || current_state=\"disconnected\"\n        remain=\" ($tstring)\"\n        ;;\n      *)\n        current_state=\"charged\"\n        ;;\n    esac\n  fi\n\n  if [[ \"$OS\" == 'Linux' ]] || [[ \"$OS\" == 'Android' ]]; then\n    local sysp=\"${ROOT_PREFIX}/sys/class/power_supply\"\n\n    # Reported BAT0 or BAT1 depending on kernel version\n    [[ -a $sysp/BAT0 ]] && local bat=$sysp/BAT0\n    [[ -a $sysp/BAT1 ]] && local bat=$sysp/BAT1\n\n    # Android-related\n    # Tested on: Moto G falcon (CM 13.0)\n    [[ -a $sysp/battery ]] && local bat=$sysp/battery\n\n    # Return if no battery found\n    [[ -z $bat ]] && return\n    local capacity=$(cat $bat/capacity)\n    local battery_status=$(cat $bat/status)\n    [[ $capacity -gt 100 ]] && local bat_percent=100 || local bat_percent=$capacity\n    [[ $battery_status =~ Charging || $battery_status =~ Full ]] && local connected=true\n    if [[ -z  $connected ]]; then\n      [[ $bat_percent -lt $POWERLEVEL9K_BATTERY_LOW_THRESHOLD ]] && current_state=\"low\" || current_state=\"disconnected\"\n    else\n      [[ $bat_percent =~ 100 ]] && current_state=\"charged\"\n      [[ $bat_percent -lt 100 ]] && current_state=\"charging\"\n    fi\n    if [[ -f ${ROOT_PREFIX}/usr/bin/acpi ]]; then\n      local time_remaining=$(${ROOT_PREFIX}/usr/bin/acpi | awk '{ print $5 }')\n      if [[ $time_remaining =~ rate ]]; then\n        local tstring=\"...\"\n      elif [[ $time_remaining =~ \"[[:digit:]]+\" ]]; then\n        local tstring=${(f)$(date -u -d \"$(echo $time_remaining)\" +%k:%M 2> /dev/null)}\n      fi\n    fi\n    [[ -n $tstring ]] && local remain=\" ($tstring)\"\n  fi\n\n  local message\n  # Default behavior: Be verbose!\n  set_default POWERLEVEL9K_BATTERY_VERBOSE true\n  if [[ \"$POWERLEVEL9K_BATTERY_VERBOSE\" == true ]]; then\n    message=\"$bat_percent%%$remain\"\n  else\n    message=\"$bat_percent%%\"\n  fi\n\n  # override default icon if we are using battery stages\n  if [[ -n \"$POWERLEVEL9K_BATTERY_STAGES\" ]]; then\n    local segment=$(( 100.0 / (${#POWERLEVEL9K_BATTERY_STAGES} - 1 ) ))\n    if [[ $segment > 1 ]]; then\n      local offset=$(( ($bat_percent / $segment) + 1 ))\n      # check if the stages are in an array or a string\n      [[ \"${(t)POWERLEVEL9K_BATTERY_STAGES}\" =~ \"array\" ]] && POWERLEVEL9K_BATTERY_ICON=\"$POWERLEVEL9K_BATTERY_STAGES[$offset]\" || POWERLEVEL9K_BATTERY_ICON=${POWERLEVEL9K_BATTERY_STAGES:$offset:1}\n    fi\n  fi\n  # return if POWERLEVEL9K_BATTERY_HIDE_ABOVE_THRESHOLD is set and the battery percentage is greater or equal\n  if defined POWERLEVEL9K_BATTERY_HIDE_ABOVE_THRESHOLD && [[ \"${bat_percent}\" -ge $POWERLEVEL9K_BATTERY_HIDE_ABOVE_THRESHOLD ]]; then\n    return\n  fi\n\n    # override the default color if we are using a color level array\n    if [[ -n \"$POWERLEVEL9K_BATTERY_LEVEL_BACKGROUND\" ]] && [[ \"${(t)POWERLEVEL9K_BATTERY_LEVEL_BACKGROUND}\" =~ \"array\" ]]; then\n      local segment=$(( 100.0 / (${#POWERLEVEL9K_BATTERY_LEVEL_BACKGROUND} - 1 ) ))\n      local offset=$(( ($bat_percent / $segment) + 1 ))\n      \"$1_prompt_segment\" \"$0_${current_state}\" \"$2\" \"${POWERLEVEL9K_BATTERY_LEVEL_BACKGROUND[$offset]}\" \"${battery_states[$current_state]}\" \"${message}\" \"BATTERY_ICON\"\n    else\n      # Draw the prompt_segment\n      \"$1_prompt_segment\" \"$0_${current_state}\" \"$2\" \"${DEFAULT_COLOR}\" \"${battery_states[$current_state]}\" \"${message}\" \"BATTERY_ICON\"\n    fi\n}\n\n################################################################\n# Public IP segment\n# Parameters:\n#   * $1 Alignment: string - left|right\n#   * $2 Index: integer\n#   * $3 Joined: bool - If the segment should be joined\n#   * $4 Root Prefix: string - Root prefix for testing purposes\nprompt_public_ip() {\n  local ROOT_PREFIX=\"${4}\"\n  # set default values for segment\n  set_default POWERLEVEL9K_PUBLIC_IP_TIMEOUT \"300\"\n  set_default POWERLEVEL9K_PUBLIC_IP_NONE \"\"\n  set_default POWERLEVEL9K_PUBLIC_IP_FILE \"/tmp/p9k_public_ip\"\n  set_default POWERLEVEL9K_PUBLIC_IP_HOST \"http://ident.me\"\n  defined POWERLEVEL9K_PUBLIC_IP_METHODS || POWERLEVEL9K_PUBLIC_IP_METHODS=(dig curl wget)\n\n  # Do we need a fresh IP?\n  local refresh_ip=false\n  if [[ -f $POWERLEVEL9K_PUBLIC_IP_FILE ]]; then\n    typeset -i timediff\n    # if saved IP is more than\n    if [[ \"$OS\" == \"OSX\" ]]; then\n      timediff=$(($(date +%s) - $(stat -f \"%m\" $POWERLEVEL9K_PUBLIC_IP_FILE)))\n    else\n      timediff=$(($(date +%s) - $(date -r $POWERLEVEL9K_PUBLIC_IP_FILE +%s)))\n    fi\n    [[ $timediff -gt $POWERLEVEL9K_PUBLIC_IP_TIMEOUT ]] && refresh_ip=true\n    # If tmp file is empty get a fresh IP\n    [[ -z $(cat $POWERLEVEL9K_PUBLIC_IP_FILE) ]] && refresh_ip=true\n    [[ -n $POWERLEVEL9K_PUBLIC_IP_NONE ]] && [[ $(cat $POWERLEVEL9K_PUBLIC_IP_FILE) =~ \"$POWERLEVEL9K_PUBLIC_IP_NONE\" ]] && refresh_ip=true\n  else\n    touch $POWERLEVEL9K_PUBLIC_IP_FILE && refresh_ip=true\n  fi\n\n  # grab a fresh IP if needed\n  local fresh_ip\n  if [[ $refresh_ip == true && -w $POWERLEVEL9K_PUBLIC_IP_FILE ]]; then\n    for method in \"${POWERLEVEL9K_PUBLIC_IP_METHODS[@]}\"; do\n      case $method in\n        'dig')\n            fresh_ip=\"$(dig +time=1 +tries=1 +short myip.opendns.com @resolver1.opendns.com 2> /dev/null)\"\n            [[ \"$fresh_ip\" =~ ^\\; ]] && unset fresh_ip\n          ;;\n        'curl')\n            fresh_ip=\"$(curl --max-time 10 -w '\\n' \"$POWERLEVEL9K_PUBLIC_IP_HOST\" 2> /dev/null)\"\n          ;;\n        'wget')\n            fresh_ip=\"$(wget -T 10 -qO- \"$POWERLEVEL9K_PUBLIC_IP_HOST\" 2> /dev/null)\"\n          ;;\n      esac\n      # If we found a fresh IP, break loop.\n      if [[ -n \"${fresh_ip}\" ]]; then\n        break;\n      fi\n    done\n\n    # write IP to tmp file or clear tmp file if an IP was not retrieved\n    # Redirection with `>!`. From the manpage: Same as >, except that the file\n    #   is truncated to zero length if it exists, even if CLOBBER is unset.\n    # If the file already exists, and a simple `>` redirection and CLOBBER\n    # unset, ZSH will produce an error.\n    [[ -n \"${fresh_ip}\" ]] && echo $fresh_ip >! $POWERLEVEL9K_PUBLIC_IP_FILE || echo $POWERLEVEL9K_PUBLIC_IP_NONE >! $POWERLEVEL9K_PUBLIC_IP_FILE\n  fi\n\n  # read public IP saved to tmp file\n  local public_ip=\"$(cat $POWERLEVEL9K_PUBLIC_IP_FILE)\"\n\n  # Draw the prompt segment\n  if [[ -n $public_ip ]]; then\n    icon='PUBLIC_IP_ICON'\n    # Check VPN is on if VPN interface is set\n    if [[ -n $POWERLEVEL9K_PUBLIC_IP_VPN_INTERFACE ]]; then\n      local vpnIp=\"$(p9k::parseIp \"${POWERLEVEL9K_PUBLIC_IP_VPN_INTERFACE}\" \"${ROOT_PREFIX}\")\"\n      if [[ -n \"$vpnIp\" ]]; then\n        icon='VPN_ICON'\n      fi\n    fi\n    $1_prompt_segment \"$0\" \"$2\" \"$DEFAULT_COLOR\" \"$DEFAULT_COLOR_INVERTED\" \"${public_ip}\" \"$icon\"\n  fi\n}\n\n################################################################\n# Context: user@hostname (who am I and where am I)\n# Note that if $DEFAULT_USER is not set, this prompt segment will always print\nset_default POWERLEVEL9K_ALWAYS_SHOW_CONTEXT false\nset_default POWERLEVEL9K_ALWAYS_SHOW_USER false\nset_default POWERLEVEL9K_CONTEXT_TEMPLATE \"%n@%m\"\nprompt_context() {\n  local current_state=\"DEFAULT\"\n  typeset -AH context_states\n  context_states=(\n    \"ROOT\"        \"yellow\"\n    \"SUDO\"        \"yellow\"\n    \"DEFAULT\"     \"yellow\"\n    \"REMOTE\"      \"yellow\"\n    \"REMOTE_SUDO\" \"yellow\"\n  )\n\n  local content=\"\"\n\n  if [[ \"$POWERLEVEL9K_ALWAYS_SHOW_CONTEXT\" == true ]] || [[ \"$(whoami)\" != \"$DEFAULT_USER\" ]] || [[ -n \"$SSH_CLIENT\" || -n \"$SSH_TTY\" ]]; then\n      content=\"${POWERLEVEL9K_CONTEXT_TEMPLATE}\"\n  elif [[ \"$POWERLEVEL9K_ALWAYS_SHOW_USER\" == true ]]; then\n      content=\"$(whoami)\"\n  else\n      return\n  fi\n\n  if [[ $(print -P \"%#\") == '#' ]]; then\n    current_state=\"ROOT\"\n  elif [[ -n \"$SSH_CLIENT\" || -n \"$SSH_TTY\" ]]; then\n    if [[ -n \"$SUDO_COMMAND\" ]]; then\n      current_state=\"REMOTE_SUDO\"\n    else\n      current_state=\"REMOTE\"\n    fi\n  elif [[ -n \"$SUDO_COMMAND\" ]]; then\n    current_state=\"SUDO\"\n  fi\n\n  \"$1_prompt_segment\" \"${0}_${current_state}\" \"$2\" \"$DEFAULT_COLOR\" \"${context_states[$current_state]}\" \"${content}\"\n}\n\n################################################################\n# User: user (who am I)\n# Note that if $DEFAULT_USER is not set, this prompt segment will always print\nset_default POWERLEVEL9K_USER_TEMPLATE \"%n\"\nprompt_user() {\n  local current_state=\"DEFAULT\"\n  typeset -AH user_state\n  if [[ \"$POWERLEVEL9K_ALWAYS_SHOW_USER\" == true ]] || [[ \"$(whoami)\" != \"$DEFAULT_USER\" ]]; then\n    if [[ $(print -P \"%#\") == '#' ]]; then\n      user_state=(\n        \"STATE\"               \"ROOT\"\n        \"CONTENT\"             \"${POWERLEVEL9K_USER_TEMPLATE}\"\n        \"BACKGROUND_COLOR\"    \"${DEFAULT_COLOR}\"\n        \"FOREGROUND_COLOR\"    \"yellow\"\n        \"VISUAL_IDENTIFIER\"   \"ROOT_ICON\"\n      )\n    elif [[ -n \"$SUDO_COMMAND\" ]]; then\n      user_state=(\n        \"STATE\"               \"SUDO\"\n        \"CONTENT\"             \"${POWERLEVEL9K_USER_TEMPLATE}\"\n        \"BACKGROUND_COLOR\"    \"${DEFAULT_COLOR}\"\n        \"FOREGROUND_COLOR\"    \"yellow\"\n        \"VISUAL_IDENTIFIER\"   \"SUDO_ICON\"\n      )\n    else\n      user_state=(\n        \"STATE\"               \"DEFAULT\"\n        \"CONTENT\"             \"$(whoami)\"\n        \"BACKGROUND_COLOR\"    \"${DEFAULT_COLOR}\"\n        \"FOREGROUND_COLOR\"    \"yellow\"\n        \"VISUAL_IDENTIFIER\"   \"USER_ICON\"\n      )\n    fi\n    \"$1_prompt_segment\" \"${0}_${user_state[STATE]}\" \"$2\" \"${user_state[BACKGROUND_COLOR]}\" \"${user_state[FOREGROUND_COLOR]}\" \"${user_state[CONTENT]}\" \"${user_state[VISUAL_IDENTIFIER]}\"\n  fi\n}\n\n################################################################\n# Host: machine (where am I)\nset_default POWERLEVEL9K_HOST_TEMPLATE \"%m\"\nprompt_host() {\n  local current_state=\"LOCAL\"\n  typeset -AH host_state\n  if [[ -n \"$SSH_CLIENT\" ]] || [[ -n \"$SSH_TTY\" ]]; then\n    host_state=(\n      \"STATE\"               \"REMOTE\"\n      \"CONTENT\"             \"${POWERLEVEL9K_HOST_TEMPLATE}\"\n      \"BACKGROUND_COLOR\"    \"${DEFAULT_COLOR}\"\n      \"FOREGROUND_COLOR\"    \"yellow\"\n      \"VISUAL_IDENTIFIER\"   \"SSH_ICON\"\n    )\n  else\n    host_state=(\n      \"STATE\"               \"LOCAL\"\n      \"CONTENT\"             \"${POWERLEVEL9K_HOST_TEMPLATE}\"\n      \"BACKGROUND_COLOR\"    \"${DEFAULT_COLOR}\"\n      \"FOREGROUND_COLOR\"    \"yellow\"\n      \"VISUAL_IDENTIFIER\"   \"HOST_ICON\"\n    )\n  fi\n  \"$1_prompt_segment\" \"$0_${host_state[STATE]}\" \"$2\" \"${host_state[BACKGROUND_COLOR]}\" \"${host_state[FOREGROUND_COLOR]}\" \"${host_state[CONTENT]}\" \"${host_state[VISUAL_IDENTIFIER]}\"\n}\n\n################################################################\n# The 'custom` prompt provides a way for users to invoke commands and display\n# the output in a segment.\nprompt_custom() {\n  local segment_name=\"${3:u}\"\n  # Get content of custom segment\n  local command=\"POWERLEVEL9K_CUSTOM_${segment_name}\"\n  local segment_content=\"$(eval ${(P)command})\"\n\n  if [[ -n $segment_content ]]; then\n    \"$1_prompt_segment\" \"${0}_${3:u}\" \"$2\" $DEFAULT_COLOR_INVERTED $DEFAULT_COLOR \"$segment_content\" \"CUSTOM_${segment_name}_ICON\"\n  fi\n}\n\n################################################################\n# Display the duration the command needed to run.\nprompt_command_execution_time() {\n  set_default POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD 3\n  set_default POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION 2\n\n  # Print time in human readable format\n  # For that use `strftime` and convert\n  # the duration (float) to an seconds\n  # (integer).\n  # See http://unix.stackexchange.com/a/89748\n  local humanReadableDuration\n  if (( _P9K_COMMAND_DURATION > 3600 )); then\n    humanReadableDuration=$(TZ=GMT; strftime '%H:%M:%S' $(( int(rint(_P9K_COMMAND_DURATION)) )))\n  elif (( _P9K_COMMAND_DURATION > 60 )); then\n    humanReadableDuration=$(TZ=GMT; strftime '%M:%S' $(( int(rint(_P9K_COMMAND_DURATION)) )))\n  else\n    # If the command executed in seconds, print as float.\n    # Convert to float\n    if [[ \"${POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION}\" == \"0\" ]]; then\n      # If user does not want microseconds, then we need to convert\n      # the duration to an integer.\n      typeset -i humanReadableDuration\n    else\n      typeset -F ${POWERLEVEL9K_COMMAND_EXECUTION_TIME_PRECISION} humanReadableDuration\n    fi\n    humanReadableDuration=$_P9K_COMMAND_DURATION\n  fi\n\n  if (( _P9K_COMMAND_DURATION >= POWERLEVEL9K_COMMAND_EXECUTION_TIME_THRESHOLD )); then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"red\" \"yellow1\" \"${humanReadableDuration}\" 'EXECUTION_TIME_ICON'\n  fi\n}\n\n################################################################\n# Determine the unique path - this is needed for the\n# truncate_to_unique strategy.\n#\nfunction getUniqueFolder() {\n  local trunc_path directory test_dir test_dir_length\n  local -a matching\n  local -a paths\n  local cur_path='/'\n  paths=(${(s:/:)1})\n  for directory in ${paths[@]}; do\n    test_dir=''\n    for (( i=0; i < ${#directory}; i++ )); do\n      test_dir+=\"${directory:$i:1}\"\n      matching=(\"$cur_path\"/\"$test_dir\"*/)\n      if [[ ${#matching[@]} -eq 1 ]]; then\n        break\n      fi\n    done\n    trunc_path+=\"$test_dir/\"\n    cur_path+=\"$directory/\"\n  done\n  echo \"${trunc_path: : -1}\"\n}\n\n################################################################\n# Dir: current working directory\n# Parameters:\n#   * $1 Alignment: string - left|right\n#   * $2 Index: integer\nset_default POWERLEVEL9K_DIR_PATH_SEPARATOR \"/\"\nset_default POWERLEVEL9K_HOME_FOLDER_ABBREVIATION \"~\"\nset_default POWERLEVEL9K_DIR_PATH_HIGHLIGHT_BOLD false\nprompt_dir() {\n  # using $PWD instead of \"$(print -P '%~')\" to allow use of POWERLEVEL9K_DIR_PATH_ABSOLUTE\n  local current_path=$PWD # WAS: local current_path=\"$(print -P '%~')\"\n  # check if the user wants to use absolute paths or \"~\" paths\n  [[ ${(L)POWERLEVEL9K_DIR_PATH_ABSOLUTE} != \"true\" ]] && current_path=${current_path/#$HOME/\"~\"}\n  # declare all local variables\n  local paths directory test_dir test_dir_length trunc_path threshhold\n  # if we are not in \"~\" or \"/\", split the paths into an array and exclude \"~\"\n  (( ${#current_path} > 1 )) && paths=(${(s:/:)${current_path//\"~\\/\"/}}) || paths=()\n  # only run the code if SHORTEN_DIR_LENGTH is set, or we are using the two strategies that don't rely on it.\n  if [[ -n \"$POWERLEVEL9K_SHORTEN_DIR_LENGTH\" || \"$POWERLEVEL9K_SHORTEN_STRATEGY\" == \"truncate_with_folder_marker\" || \"$POWERLEVEL9K_SHORTEN_STRATEGY\" == \"truncate_to_last\" || \"$POWERLEVEL9K_SHORTEN_STRATEGY\" == \"truncate_with_package_name\" ]]; then\n    set_default POWERLEVEL9K_SHORTEN_DELIMITER \"\\u2026\"\n    # convert delimiter from unicode to literal character, so that we can get the correct length later\n    local delim=$(echo -n $POWERLEVEL9K_SHORTEN_DELIMITER)\n\n    case \"$POWERLEVEL9K_SHORTEN_STRATEGY\" in\n      truncate_absolute_chars)\n        if [ ${#current_path} -gt $(( $POWERLEVEL9K_SHORTEN_DIR_LENGTH + ${#POWERLEVEL9K_SHORTEN_DELIMITER} )) ]; then\n          current_path=$POWERLEVEL9K_SHORTEN_DELIMITER${current_path:(-POWERLEVEL9K_SHORTEN_DIR_LENGTH)}\n        fi\n      ;;\n      truncate_middle)\n        # truncate characters from the middle of the path\n        current_path=$(truncatePath $current_path $POWERLEVEL9K_SHORTEN_DIR_LENGTH $POWERLEVEL9K_SHORTEN_DELIMITER \"middle\")\n      ;;\n      truncate_from_right)\n        # truncate characters from the right of the path\n        current_path=$(truncatePath \"$current_path\" $POWERLEVEL9K_SHORTEN_DIR_LENGTH $POWERLEVEL9K_SHORTEN_DELIMITER)\n      ;;\n      truncate_absolute)\n        # truncate all characters except the last POWERLEVEL9K_SHORTEN_DIR_LENGTH characters\n        if [ ${#current_path} -gt $(( $POWERLEVEL9K_SHORTEN_DIR_LENGTH + ${#POWERLEVEL9K_SHORTEN_DELIMITER} )) ]; then\n          current_path=$POWERLEVEL9K_SHORTEN_DELIMITER${current_path:(-POWERLEVEL9K_SHORTEN_DIR_LENGTH)}\n        fi\n      ;;\n      truncate_to_last)\n        # truncate all characters before the current directory\n        current_path=${current_path##*/}\n      ;;\n      truncate_to_first_and_last)\n        if (( ${#current_path} > 1 )) && (( ${POWERLEVEL9K_SHORTEN_DIR_LENGTH} > 0 )); then\n          threshhold=$(( ${POWERLEVEL9K_SHORTEN_DIR_LENGTH} * 2))\n          # if we are in \"~\", add it back into the paths array\n          [[ $current_path == '~'* ]] && paths=(\"~\" \"${paths[@]}\")\n          if (( ${#paths} > $threshhold )); then\n            local num=$(( ${#paths} - ${POWERLEVEL9K_SHORTEN_DIR_LENGTH} ))\n            # repace the middle elements\n            for (( i=$POWERLEVEL9K_SHORTEN_DIR_LENGTH; i<$num; i++ )); do\n              paths[$i+1]=$POWERLEVEL9K_SHORTEN_DELIMITER\n            done\n            [[ $current_path != '~'* ]] && current_path=\"/\" || current_path=\"\"\n            current_path+=\"${(j:/:)paths}\"\n          fi\n        fi\n      ;;\n      truncate_to_unique)\n        # for each parent path component find the shortest unique beginning\n        # characters sequence. Source: https://stackoverflow.com/a/45336078\n        if (( ${#current_path} > 1 )); then # root and home are exceptions and won't have paths\n          # cheating here to retain ~ as home folder\n          local home_path=\"$(getUniqueFolder $HOME)\"\n          trunc_path=\"$(getUniqueFolder $PWD)\"\n          [[ $current_path == \"~\"* ]] && current_path=\"~${trunc_path//${home_path}/}\" || current_path=\"/${trunc_path}\"\n        fi\n      ;;\n      truncate_with_folder_marker)\n        if (( ${#paths} > 0 )); then # root and home are exceptions and won't have paths, so skip this\n          local last_marked_folder marked_folder\n          set_default POWERLEVEL9K_SHORTEN_FOLDER_MARKER \".shorten_folder_marker\"\n\n          # Search for the folder marker in the parent directories and\n          # buildup a pattern that is removed from the current path\n          # later on.\n          for marked_folder in $(upsearch $POWERLEVEL9K_SHORTEN_FOLDER_MARKER); do\n            if [[ \"$marked_folder\" == \"/\" ]]; then\n              # If we reached root folder, stop upsearch.\n              trunc_path=\"/\"\n            elif [[ \"$marked_folder\" == \"$HOME\" ]]; then\n              # If we reached home folder, stop upsearch.\n              trunc_path=\"~\"\n            elif [[ \"${marked_folder%/*}\" == $last_marked_folder ]]; then\n              trunc_path=\"${trunc_path%/}/${marked_folder##*/}\"\n            else\n              trunc_path=\"${trunc_path%/}/$POWERLEVEL9K_SHORTEN_DELIMITER/${marked_folder##*/}\"\n            fi\n            last_marked_folder=$marked_folder\n          done\n\n          # Replace the shortest possible match of the marked folder from\n          # the current path.\n          current_path=$trunc_path${current_path#${last_marked_folder}*}\n        fi\n      ;;\n      truncate_with_package_name)\n        local name repo_path package_path current_dir zero\n\n        # Get the path of the Git repo, which should have the package.json file\n        if [[ $(git rev-parse --is-inside-work-tree 2> /dev/null) == \"true\" ]]; then\n          # Get path from the root of the git repository to the current dir\n          local gitPath=$(git rev-parse --show-prefix)\n          # Remove trailing slash from git path, so that we can\n          # remove that git path from the pwd.\n          gitPath=${gitPath%/}\n          package_path=${$(pwd)%%$gitPath}\n          # Remove trailing slash\n          package_path=${package_path%/}\n        elif [[ $(git rev-parse --is-inside-git-dir 2> /dev/null) == \"true\" ]]; then\n          package_path=${$(pwd)%%/.git*}\n        fi\n\n        [[ ${(L)POWERLEVEL9K_DIR_PATH_ABSOLUTE} != \"true\" ]] && package_path=${package_path/$HOME/\"~\"}\n\n        # Replace the shortest possible match of the marked folder from\n        # the current path. Remove the amount of characters up to the\n        # folder marker from the left. Count only the visible characters\n        # in the path (this is done by the \"zero\" pattern; see\n        # http://stackoverflow.com/a/40855342/5586433).\n        local zero='%([BSUbfksu]|([FB]|){*})'\n        trunc_path=$(pwd)\n        # Then, find the length of the package_path string, and save the\n        # subdirectory path as a substring of the current directory's path from 0\n        # to the length of the package path's string\n        subdirectory_path=$(truncatePath \"${trunc_path:${#${(S%%)package_path//$~zero/}}}\" $POWERLEVEL9K_SHORTEN_DIR_LENGTH $POWERLEVEL9K_SHORTEN_DELIMITER)\n        # Parse the 'name' from the package.json; if there are any problems, just\n        # print the file path\n        defined POWERLEVEL9K_DIR_PACKAGE_FILES || POWERLEVEL9K_DIR_PACKAGE_FILES=(package.json composer.json)\n\n        local pkgFile=\"unknown\"\n        for file in \"${POWERLEVEL9K_DIR_PACKAGE_FILES[@]}\"; do\n          if [[ -f \"${package_path}/${file}\" ]]; then\n            pkgFile=\"${package_path}/${file}\"\n            break;\n          fi\n        done\n\n        local packageName=$(jq '.name' ${pkgFile} 2> /dev/null \\\n          || node -e 'console.log(require(process.argv[1]).name);' ${pkgFile} 2>/dev/null \\\n          || cat \"${pkgFile}\" 2> /dev/null | grep -m 1 \"\\\"name\\\"\" | awk -F ':' '{print $2}' | awk -F '\"' '{print $2}' 2>/dev/null \\\n          )\n        if [[ -n \"${packageName}\" ]]; then\n          # Instead of printing out the full path, print out the name of the package\n          # from the package.json and append the current subdirectory\n          current_path=\"`echo $packageName | tr -d '\"'`$subdirectory_path\"\n        fi\n      ;;\n      *)\n        if [[ $current_path != \"~\" ]]; then\n          current_path=\"$(print -P \"%$((POWERLEVEL9K_SHORTEN_DIR_LENGTH+1))(c:$POWERLEVEL9K_SHORTEN_DELIMITER/:)%${POWERLEVEL9K_SHORTEN_DIR_LENGTH}c\")\"\n        fi\n      ;;\n    esac\n  fi\n\n  # save state of path for highlighting and bold options\n  local path_opt=$current_path\n\n  typeset -AH dir_states\n  dir_states=(\n    \"DEFAULT\"         \"FOLDER_ICON\"\n    \"HOME\"            \"HOME_ICON\"\n    \"HOME_SUBFOLDER\"  \"HOME_SUB_ICON\"\n    \"NOT_WRITABLE\"    \"LOCK_ICON\"\n    \"ETC\"             \"ETC_ICON\"\n  )\n  local state_path=\"$(print -P '%~')\"\n  local current_state=\"DEFAULT\"\n  if [[ $state_path == '/etc'* ]]; then\n    current_state='ETC'\n  elif [[ \"${POWERLEVEL9K_DIR_SHOW_WRITABLE}\" == true && ! -w \"$PWD\" ]]; then\n    current_state=\"NOT_WRITABLE\"\n  elif [[ $state_path == '~' ]]; then\n    current_state=\"HOME\"\n  elif [[ $state_path == '~'* ]]; then\n    current_state=\"HOME_SUBFOLDER\"\n  fi\n\n  # declare variables used for bold and state colors\n  local bld_on bld_off dir_state_foreground dir_state_user_foreground\n  # test if user wants the last directory printed in bold\n  if [[ \"${(L)POWERLEVEL9K_DIR_PATH_HIGHLIGHT_BOLD}\" == \"true\" ]]; then\n    bld_on=\"%B\"\n    bld_off=\"%b\"\n  else\n    bld_on=\"\"\n    bld_off=\"\"\n  fi\n  # determine is the user has set a last directory color\n  local dir_state_user_foreground=POWERLEVEL9K_DIR_${current_state}_FOREGROUND\n  local dir_state_foreground=${(P)dir_state_user_foreground}\n  [[ -z ${dir_state_foreground} ]] && dir_state_foreground=\"${DEFAULT_COLOR}\"\n\n  local dir_name base_name\n  # use ZSH substitution to get the dirname and basename instead of calling external functions\n  dir_name=${path_opt%/*}\n  base_name=${path_opt##*/}\n\n  # if the user wants the last directory colored...\n  if [[ -n ${POWERLEVEL9K_DIR_PATH_HIGHLIGHT_FOREGROUND} ]]; then\n    # it the path is \"/\" or \"~\"\n    if [[ $path_opt == \"/\" || $path_opt == \"~\" ]]; then\n      current_path=\"${bld_on}%F{$POWERLEVEL9K_DIR_PATH_HIGHLIGHT_FOREGROUND}${current_path}${bld_off}\"\n    else # has a subfolder\n      # test if dirname != basename - they are equal if we use truncate_to_last or truncate_absolute\n      if [[ $dir_name != $base_name ]]; then\n        current_path=\"${dir_name}/${bld_on}%F{$POWERLEVEL9K_DIR_PATH_HIGHLIGHT_FOREGROUND}${base_name}${bld_off}\"\n      else\n        current_path=\"${bld_on}%F{$POWERLEVEL9K_DIR_PATH_HIGHLIGHT_FOREGROUND}${base_name}${bld_off}\"\n      fi\n    fi\n  else # no coloring\n    # it the path is \"/\" or \"~\"\n    if [[ $path_opt == \"/\" || $path_opt == \"~\" ]]; then\n      current_path=\"${bld_on}${current_path}${bld_off}\"\n    else # has a subfolder\n      # test if dirname != basename - they are equal if we use truncate_to_last or truncate_absolute\n      if [[ $dir_name != $base_name ]]; then\n        current_path=\"${dir_name}/${bld_on}${base_name}${bld_off}\"\n      else\n        current_path=\"${bld_on}${base_name}${bld_off}\"\n      fi\n    fi\n  fi\n\n  # check if we need to omit the first character and only do it if we are not in \"~\" or \"/\"\n  if [[ \"${POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER}\" == \"true\" && $path_opt != \"/\" && $path_opt != \"~\" ]]; then\n    current_path=\"${current_path[2,-1]}\"\n  fi\n\n  # check if the user wants the separator colored.\n  if [[ -n ${POWERLEVEL9K_DIR_PATH_SEPARATOR_FOREGROUND} && $path_opt != \"/\" ]]; then\n    # because this contains color changing codes, it is easier to set a variable for what should be replaced\n    local repl=\"%F{$POWERLEVEL9K_DIR_PATH_SEPARATOR_FOREGROUND}/%F{$dir_state_foreground}\"\n    # escape the / with a \\\n    current_path=${current_path//\\//$repl}\n  fi\n\n  if [[ \"${POWERLEVEL9K_DIR_PATH_SEPARATOR}\" != \"/\" && $path_opt != \"/\" ]]; then\n    current_path=${current_path//\\//$POWERLEVEL9K_DIR_PATH_SEPARATOR}\n  fi\n\n  if [[ \"${POWERLEVEL9K_HOME_FOLDER_ABBREVIATION}\" != \"~\" && ! \"${(L)POWERLEVEL9K_DIR_OMIT_FIRST_CHARACTER}\" == \"true\" ]]; then\n    # use :s to only replace the first occurance\n    current_path=${current_path:s/~/$POWERLEVEL9K_HOME_FOLDER_ABBREVIATION}\n  fi\n\n  \"$1_prompt_segment\" \"$0_${current_state}\" \"$2\" \"blue\" \"$DEFAULT_COLOR\" \"${current_path}\" \"${dir_states[$current_state]}\"\n}\n\n################################################################\n# Docker machine\nprompt_docker_machine() {\n  local docker_machine=\"$DOCKER_MACHINE_NAME\"\n\n  if [[ -n \"$docker_machine\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"magenta\" \"$DEFAULT_COLOR\" \"$docker_machine\" 'SERVER_ICON'\n  fi\n}\n\n################################################################\n# GO prompt\nprompt_go_version() {\n  local go_version\n  local go_path\n  go_version=$(go version 2>/dev/null | sed -E \"s/.*(go[0-9.]*).*/\\1/\")\n  go_path=$(go env GOPATH 2>/dev/null)\n\n  if [[ -n \"$go_version\" && \"${PWD##$go_path}\" != \"$PWD\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"green\" \"grey93\" \"$go_version\" \"GO_ICON\"\n  fi\n}\n\n################################################################\n# Command number (in local history)\nprompt_history() {\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"grey50\" \"$DEFAULT_COLOR\" '%h'\n}\n\n################################################################\n# Detection for virtualization (systemd based systems only)\nprompt_detect_virt() {\n  local virt=$(systemd-detect-virt 2> /dev/null)\n  if [[ \"$virt\" == \"none\" ]]; then\n    if [[ \"$(ls -di / | grep -o 2)\" != \"2\" ]]; then\n      virt=\"chroot\"\n    fi\n  fi\n\n  if [[ -n \"${virt}\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR\" \"yellow\" \"$virt\"\n  fi\n}\n\n################################################################\n# Test icons\nprompt_icons_test() {\n  for key in ${(@k)icons}; do\n    # The lower color spectrum in ZSH makes big steps. Choosing\n    # the next color has enough contrast to read.\n    local random_color=$((RANDOM % 8))\n    local next_color=$((random_color+1))\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"$random_color\" \"$next_color\" \"$key\" \"$key\"\n  done\n}\n\n################################################################\n# Segment to display the current IP address\nprompt_ip() {\n  local ROOT_PREFIX=\"${4}\"\n  local ip=$(p9k::parseIp \"${POWERLEVEL9K_IP_INTERFACE}\" \"${ROOT_PREFIX}\")\n\n  if [[ -n \"$ip\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"cyan\" \"$DEFAULT_COLOR\" \"$ip\" 'NETWORK_ICON'\n  fi\n}\n\n################################################################\n# Segment to display if VPN is active\nset_default POWERLEVEL9K_VPN_IP_INTERFACE \"tun\"\n# prompt if vpn active\nprompt_vpn_ip() {\n  local ROOT_PREFIX=\"${4}\"\n  local ip=$(p9k::parseIp \"${POWERLEVEL9K_VPN_IP_INTERFACE}\" \"${ROOT_PREFIX}\")\n\n  if [[ -n \"${ip}\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"cyan\" \"$DEFAULT_COLOR\" \"$ip\" 'VPN_ICON'\n  fi\n}\n\n################################################################\n# Segment to display laravel version\nprompt_laravel_version() {\n  local laravel_version=\"$(php artisan --version 2> /dev/null)\"\n  if [[ -n \"${laravel_version}\" && \"${laravel_version}\" =~ \"Laravel Framework\" ]]; then\n    # Strip out everything but the version\n    laravel_version=\"${laravel_version//Laravel Framework /}\"\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"maroon\" \"white\" \"${laravel_version}\" 'LARAVEL_ICON'\n  fi\n}\n\n################################################################\n# Segment to display load\nset_default POWERLEVEL9K_LOAD_WHICH 5\nprompt_load() {\n  local ROOT_PREFIX=\"${4}\"\n  # The load segment can have three different states\n  local current_state=\"unknown\"\n  local load_select=2\n  local load_avg\n  local cores\n\n  typeset -AH load_states\n  load_states=(\n    'critical'      'red'\n    'warning'       'yellow'\n    'normal'        'green'\n  )\n\n  case \"$POWERLEVEL9K_LOAD_WHICH\" in\n    1)\n      load_select=1\n      ;;\n    5)\n      load_select=2\n      ;;\n    15)\n      load_select=3\n      ;;\n  esac\n\n  case \"$OS\" in\n    OSX|BSD)\n      load_avg=$(sysctl vm.loadavg | grep -o -E '[0-9]+(\\.|,)[0-9]+' | sed -n ${load_select}p)\n      if [[ \"$OS\" == \"OSX\" ]]; then\n        cores=$(sysctl -n hw.logicalcpu)\n      else\n        cores=$(sysctl -n hw.ncpu)\n      fi\n      ;;\n    *)\n      load_avg=$(cut -d\" \" -f${load_select} ${ROOT_PREFIX}/proc/loadavg)\n      cores=$(nproc)\n  esac\n\n  # Replace comma\n  load_avg=${load_avg//,/.}\n\n  if [[ \"$load_avg\" -gt $((${cores} * 0.7)) ]]; then\n    current_state=\"critical\"\n  elif [[ \"$load_avg\" -gt $((${cores} * 0.5)) ]]; then\n    current_state=\"warning\"\n  else\n    current_state=\"normal\"\n  fi\n\n  \"$1_prompt_segment\" \"${0}_${current_state}\" \"$2\" \"${load_states[$current_state]}\" \"$DEFAULT_COLOR\" \"$load_avg\" 'LOAD_ICON'\n}\n\n################################################################\n# Segment to diplay Node version\nprompt_node_version() {\n  local node_version=$(node -v 2>/dev/null)\n  [[ -z \"${node_version}\" ]] && return\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"green\" \"white\" \"${node_version:1}\" 'NODE_ICON'\n}\n\n################################################################\n# Segment to display Node version from NVM\n# Only prints the segment if different than the default value\nprompt_nvm() {\n  local node_version nvm_default\n  (( $+functions[nvm_version] )) || return\n\n  node_version=$(nvm_version current)\n  [[ -z \"${node_version}\" || ${node_version} == \"none\" ]] && return\n\n  nvm_default=$(nvm_version default)\n  [[ \"$node_version\" =~ \"$nvm_default\" ]] && return\n\n  $1_prompt_segment \"$0\" \"$2\" \"magenta\" \"black\" \"${node_version:1}\" 'NODE_ICON'\n}\n\n################################################################\n# Segment to display NodeEnv\nprompt_nodeenv() {\n  if [[ -n \"$NODE_VIRTUAL_ENV\" ]]; then\n    local info=\"$(node -v)[${NODE_VIRTUAL_ENV:t}]\"\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"black\" \"green\" \"$info\" 'NODE_ICON'\n  fi\n}\n\n################################################################\n# Segment to print a little OS icon\nprompt_os_icon() {\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"black\" \"white\" \"$OS_ICON\"\n}\n\n################################################################\n# Segment to display PHP version number\nprompt_php_version() {\n  local php_version\n  php_version=$(php -v 2>&1 | grep -oe \"^PHP\\s*[0-9.]*\")\n\n  if [[ -n \"$php_version\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"fuchsia\" \"grey93\" \"$php_version\"\n  fi\n}\n\n################################################################\n# Segment to display free RAM and used Swap\nprompt_ram() {\n  local ROOT_PREFIX=\"${4}\"\n  local base=''\n  local ramfree=0\n  if [[ \"$OS\" == \"OSX\" ]]; then\n    # Available = Free + Inactive\n    # See https://support.apple.com/en-us/HT201538\n    ramfree=$(vm_stat | grep \"Pages free\" | grep -o -E '[0-9]+')\n    ramfree=$((ramfree + $(vm_stat | grep \"Pages inactive\" | grep -o -E '[0-9]+')))\n    # Convert pages into Bytes\n    ramfree=$(( ramfree * 4096 ))\n  else\n    if [[ \"$OS\" == \"BSD\" ]]; then\n      ramfree=$(grep 'avail memory' ${ROOT_PREFIX}/var/run/dmesg.boot | awk '{print $4}')\n    else\n      ramfree=$(grep -o -E \"MemAvailable:\\s+[0-9]+\" ${ROOT_PREFIX}/proc/meminfo | grep -o -E \"[0-9]+\")\n      base='K'\n    fi\n  fi\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"yellow\" \"$DEFAULT_COLOR\" \"$(printSizeHumanReadable \"$ramfree\" $base)\" 'RAM_ICON'\n}\n\n################################################################\n# Segment to display rbenv information\n# https://github.com/rbenv/rbenv#choosing-the-ruby-version\nset_default POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW false\nprompt_rbenv() {\n  if [[ -n \"$RBENV_VERSION\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"red\" \"$DEFAULT_COLOR\" \"$RBENV_VERSION\" 'RUBY_ICON'\n  elif [ $commands[rbenv] ]; then\n    local rbenv_version_name=\"$(rbenv version-name)\"\n    local rbenv_global=\"$(rbenv global)\"\n    if [[ \"${rbenv_version_name}\" != \"${rbenv_global}\" || \"${POWERLEVEL9K_RBENV_PROMPT_ALWAYS_SHOW}\" == \"true\" ]]; then\n      \"$1_prompt_segment\" \"$0\" \"$2\" \"red\" \"$DEFAULT_COLOR\" \"$rbenv_version_name\" 'RUBY_ICON'\n    fi\n  fi\n}\n\n################################################################\n# Segment to display chruby information\n# see https://github.com/postmodern/chruby/issues/245 for chruby_auto issue with ZSH\nprompt_chruby() {\n  # Uses $RUBY_VERSION and $RUBY_ENGINE set by chruby\n  set_default POWERLEVEL9K_CHRUBY_SHOW_VERSION true\n  set_default POWERLEVEL9K_CHRUBY_SHOW_ENGINE true\n  local chruby_label=\"\"\n\n  if [[ \"$POWERLEVEL9K_CHRUBY_SHOW_ENGINE\" == true ]]; then\n    chruby_label+=\"$RUBY_ENGINE \"\n  fi\n  if [[ \"$POWERLEVEL9K_CHRUBY_SHOW_VERSION\" == true ]]; then\n    chruby_label+=\"$RUBY_VERSION\"\n  fi\n\n  # Truncate trailing spaces\n  chruby_label=\"${chruby_label%\"${chruby_label##*[![:space:]]}\"}\"\n\n  # Don't show anything if the chruby did not change the default ruby\n  if [[ \"$RUBY_ENGINE\" != \"\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"red\" \"$DEFAULT_COLOR\" \"${chruby_label}\" 'RUBY_ICON'\n  fi\n}\n\n################################################################\n# Segment to print an icon if user is root.\nprompt_root_indicator() {\n  if [[ \"$UID\" -eq 0 ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR\" \"yellow\" \"\" 'ROOT_ICON'\n  fi\n}\n\n################################################################\n# Segment to display Rust version number\nprompt_rust_version() {\n  local rust_version\n  rust_version=$(command rustc --version 2>/dev/null)\n  # Remove \"rustc \" (including the whitespace) from the beginning\n  # of the version string and remove everything after the next\n  # whitespace. This way we'll end up with only the version.\n  rust_version=${${rust_version/rustc /}%% *}\n\n  if [[ -n \"$rust_version\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"darkorange\" \"$DEFAULT_COLOR\" \"$rust_version\" 'RUST_ICON'\n  fi\n}\n\n# RSpec test ratio\nprompt_rspec_stats() {\n  if [[ (-d app && -d spec) ]]; then\n    local code_amount tests_amount\n    code_amount=$(ls -1 app/**/*.rb | wc -l)\n    tests_amount=$(ls -1 spec/**/*.rb | wc -l)\n\n    build_test_stats \"$1\" \"$0\" \"$2\" \"$code_amount\" \"$tests_amount\" \"RSpec\" 'TEST_ICON'\n  fi\n}\n\n################################################################\n# Segment to display Ruby Version Manager information\nprompt_rvm() {\n  if [ $commands[rvm-prompt] ]; then\n    local version_and_gemset=${$(rvm-prompt v p)/ruby-}\n\n    if [[ -n \"$version_and_gemset\" ]]; then\n      \"$1_prompt_segment\" \"$0\" \"$2\" \"240\" \"$DEFAULT_COLOR\" \"$version_and_gemset\" 'RUBY_ICON'\n    fi\n  fi\n}\n\n################################################################\n# Segment to display SSH icon when connected\nprompt_ssh() {\n  if [[ -n \"$SSH_CLIENT\" ]] || [[ -n \"$SSH_TTY\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR\" \"yellow\" \"\" 'SSH_ICON'\n  fi\n}\n\n################################################################\n# Status: When an error occur, return the error code, or a cross icon if option is set\n# Display an ok icon when no error occur, or hide the segment if option is set to false\n#\nset_default POWERLEVEL9K_STATUS_CROSS false\nset_default POWERLEVEL9K_STATUS_OK true\nset_default POWERLEVEL9K_STATUS_SHOW_PIPESTATUS true\nset_default POWERLEVEL9K_STATUS_HIDE_SIGNAME false\n# old options, retro compatibility\nset_default POWERLEVEL9K_STATUS_VERBOSE true\nset_default POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE false\n\nexit_code_or_status() {\n  local ec=$1\n  if [[ \"$POWERLEVEL9K_STATUS_HIDE_SIGNAME\" = true ]]; then\n    echo \"$ec\"\n  elif (( ec <= 128 )); then\n    echo \"$ec\"\n  else\n    local sig=$(( ec - 128 ))\n    local idx=$(( sig + 1 ))\n    echo \"SIG${signals[$idx]}(${sig})\"\n  fi\n}\n\nprompt_status() {\n  local ec_text\n  local ec_sum\n  local ec\n\n  if [[ $POWERLEVEL9K_STATUS_SHOW_PIPESTATUS == true ]]; then\n    if (( $#RETVALS > 1 )); then\n      ec_text=$(exit_code_or_status \"${RETVALS[1]}\")\n      ec_sum=${RETVALS[1]}\n    else\n      ec_text=$(exit_code_or_status \"${RETVAL}\")\n      ec_sum=${RETVAL}\n    fi\n\n    for ec in \"${(@)RETVALS[2,-1]}\"; do\n      ec_text=\"${ec_text}|$(exit_code_or_status \"$ec\")\"\n      ec_sum=$(( $ec_sum + $ec ))\n    done\n  else\n    # We use RETVAL instead of the right-most RETVALS item because\n    # PIPE_FAIL may be set.\n    ec_text=$(exit_code_or_status \"${RETVAL}\")\n    ec_sum=${RETVAL}\n  fi\n\n  if (( ec_sum > 0 )); then\n    if [[ \"$POWERLEVEL9K_STATUS_CROSS\" == false && \"$POWERLEVEL9K_STATUS_VERBOSE\" == true ]]; then\n      \"$1_prompt_segment\" \"$0_ERROR\" \"$2\" \"red\" \"yellow1\" \"$ec_text\" 'CARRIAGE_RETURN_ICON'\n    else\n      \"$1_prompt_segment\" \"$0_ERROR\" \"$2\" \"$DEFAULT_COLOR\" \"red\" \"\" 'FAIL_ICON'\n    fi\n  elif [[ \"$POWERLEVEL9K_STATUS_OK\" == true ]] && [[ \"$POWERLEVEL9K_STATUS_VERBOSE\" == true || \"$POWERLEVEL9K_STATUS_OK_IN_NON_VERBOSE\" == true ]]; then\n    \"$1_prompt_segment\" \"$0_OK\" \"$2\" \"$DEFAULT_COLOR\" \"green\" \"\" 'OK_ICON'\n  fi\n}\n\n################################################################\n# Segment to display Swap information\nprompt_swap() {\n  local ROOT_PREFIX=\"${4}\"\n  local swap_used=0\n  local base=''\n\n  if [[ \"$OS\" == \"OSX\" ]]; then\n    local raw_swap_used\n    raw_swap_used=$(sysctl vm.swapusage | grep -o \"used\\s*=\\s*[0-9,.A-Z]*\" | grep -o \"[0-9,.A-Z]*$\")\n\n    typeset -F 2 swap_used\n    swap_used=${$(echo $raw_swap_used | grep -o \"[0-9,.]*\")//,/.}\n    # Replace comma\n    swap_used=${swap_used//,/.}\n\n    base=$(echo \"$raw_swap_used\" | grep -o \"[A-Z]*$\")\n  else\n    swap_total=$(grep -o -E \"SwapTotal:\\s+[0-9]+\" ${ROOT_PREFIX}/proc/meminfo | grep -o -E \"[0-9]+\")\n    swap_free=$(grep -o -E \"SwapFree:\\s+[0-9]+\" ${ROOT_PREFIX}/proc/meminfo | grep -o -E \"[0-9]+\")\n    swap_used=$(( swap_total - swap_free ))\n    base='K'\n  fi\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"yellow\" \"$DEFAULT_COLOR\" \"$(printSizeHumanReadable \"$swap_used\" $base)\" 'SWAP_ICON'\n}\n\n################################################################\n# Symfony2-PHPUnit test ratio\nprompt_symfony2_tests() {\n  if [[ (-d src && -d app && -f app/AppKernel.php) ]]; then\n    local code_amount tests_amount\n    code_amount=$(ls -1 src/**/*.php | grep -vc Tests)\n    tests_amount=$(ls -1 src/**/*.php | grep -c Tests)\n\n    build_test_stats \"$1\" \"$0\" \"$2\" \"$code_amount\" \"$tests_amount\" \"SF2\" 'TEST_ICON'\n  fi\n}\n\n################################################################\n# Segment to display Symfony2-Version\nprompt_symfony2_version() {\n  if [[ -f app/bootstrap.php.cache ]]; then\n    local symfony2_version\n    symfony2_version=$(grep \" VERSION \" app/bootstrap.php.cache | sed -e 's/[^.0-9]*//g')\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"grey35\" \"$DEFAULT_COLOR\" \"$symfony2_version\" 'SYMFONY_ICON'\n  fi\n}\n\n################################################################\n# Show a ratio of tests vs code\nbuild_test_stats() {\n  local code_amount=\"$4\"\n  local tests_amount=\"$5\"+0.00001\n  local headline=\"$6\"\n\n  # Set float precision to 2 digits:\n  typeset -F 2 ratio\n  local ratio=$(( (tests_amount/code_amount) * 100 ))\n\n  (( ratio >= 75 )) && \"$1_prompt_segment\" \"${2}_GOOD\" \"$3\" \"cyan\" \"$DEFAULT_COLOR\" \"$headline: $ratio%%\" \"$6\"\n  (( ratio >= 50 && ratio < 75 )) && \"$1_prompt_segment\" \"$2_AVG\" \"$3\" \"yellow\" \"$DEFAULT_COLOR\" \"$headline: $ratio%%\" \"$6\"\n  (( ratio < 50 )) && \"$1_prompt_segment\" \"$2_BAD\" \"$3\" \"red\" \"$DEFAULT_COLOR\" \"$headline: $ratio%%\" \"$6\"\n}\n\n################################################################\n# System time\nprompt_time() {\n  set_default POWERLEVEL9K_TIME_FORMAT \"%D{%H:%M:%S}\"\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR_INVERTED\" \"$DEFAULT_COLOR\" \"$POWERLEVEL9K_TIME_FORMAT\" \"TIME_ICON\"\n}\n\n################################################################\n# System date\nprompt_date() {\n  set_default POWERLEVEL9K_DATE_FORMAT \"%D{%d.%m.%y}\"\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"$DEFAULT_COLOR_INVERTED\" \"$DEFAULT_COLOR\" \"$POWERLEVEL9K_DATE_FORMAT\" \"DATE_ICON\"\n}\n\n################################################################\n# todo.sh: shows the number of tasks in your todo.sh file\nprompt_todo() {\n  if $(hash todo.sh 2>&-); then\n    count=$(todo.sh ls | egrep \"TODO: [0-9]+ of ([0-9]+) tasks shown\" | awk '{ print $4 }')\n    if [[ \"$count\" = <-> ]]; then\n      \"$1_prompt_segment\" \"$0\" \"$2\" \"grey50\" \"$DEFAULT_COLOR\" \"$count\" 'TODO_ICON'\n    fi\n  fi\n}\n\n################################################################\n# VCS segment: shows the state of your repository, if you are in a folder under\n# version control\nset_default POWERLEVEL9K_VCS_ACTIONFORMAT_FOREGROUND \"red\"\n# Default: Just display the first 8 characters of our changeset-ID.\nset_default POWERLEVEL9K_VCS_INTERNAL_HASH_LENGTH \"8\"\npowerlevel9k_vcs_init() {\n  if [[ -n \"$POWERLEVEL9K_CHANGESET_HASH_LENGTH\" ]]; then\n    POWERLEVEL9K_VCS_INTERNAL_HASH_LENGTH=\"$POWERLEVEL9K_CHANGESET_HASH_LENGTH\"\n  fi\n\n  # Load VCS_INFO\n  autoload -Uz vcs_info\n\n  VCS_WORKDIR_DIRTY=false\n  VCS_WORKDIR_HALF_DIRTY=false\n\n  # The vcs segment can have three different states - defaults to 'clean'.\n  typeset -gAH vcs_states\n  vcs_states=(\n    'clean'         'green'\n    'modified'      'yellow'\n    'untracked'     'green'\n  )\n\n  VCS_CHANGESET_PREFIX=''\n  if [[ \"$POWERLEVEL9K_SHOW_CHANGESET\" == true ]]; then\n    VCS_CHANGESET_PREFIX=\"$(print_icon 'VCS_COMMIT_ICON')%0.$POWERLEVEL9K_VCS_INTERNAL_HASH_LENGTH\"\"i \"\n  fi\n\n  zstyle ':vcs_info:*' enable git hg svn\n  zstyle ':vcs_info:*' check-for-changes true\n\n  VCS_DEFAULT_FORMAT=\"$VCS_CHANGESET_PREFIX%b%c%u%m\"\n  zstyle ':vcs_info:*' formats \"$VCS_DEFAULT_FORMAT\"\n\n  zstyle ':vcs_info:*' actionformats \"%b %F{${POWERLEVEL9K_VCS_ACTIONFORMAT_FOREGROUND}}| %a%f\"\n\n  zstyle ':vcs_info:*' stagedstr \" $(print_icon 'VCS_STAGED_ICON')\"\n  zstyle ':vcs_info:*' unstagedstr \" $(print_icon 'VCS_UNSTAGED_ICON')\"\n\n  defined POWERLEVEL9K_VCS_GIT_HOOKS || POWERLEVEL9K_VCS_GIT_HOOKS=(vcs-detect-changes git-untracked git-aheadbehind git-stash git-remotebranch git-tagname)\n  zstyle ':vcs_info:git*+set-message:*' hooks $POWERLEVEL9K_VCS_GIT_HOOKS\n  defined POWERLEVEL9K_VCS_HG_HOOKS || POWERLEVEL9K_VCS_HG_HOOKS=(vcs-detect-changes)\n  zstyle ':vcs_info:hg*+set-message:*' hooks $POWERLEVEL9K_VCS_HG_HOOKS\n  defined POWERLEVEL9K_VCS_SVN_HOOKS || POWERLEVEL9K_VCS_SVN_HOOKS=(vcs-detect-changes svn-detect-changes)\n  zstyle ':vcs_info:svn*+set-message:*' hooks $POWERLEVEL9K_VCS_SVN_HOOKS\n\n  # For Hg, only show the branch name\n  zstyle ':vcs_info:hg*:*' branchformat \"$(print_icon 'VCS_BRANCH_ICON')%b\"\n  # The `get-revision` function must be turned on for dirty-check to work for Hg\n  zstyle ':vcs_info:hg*:*' get-revision true\n  zstyle ':vcs_info:hg*:*' get-bookmarks true\n  zstyle ':vcs_info:hg*+gen-hg-bookmark-string:*' hooks hg-bookmarks\n\n  # For svn, only\n  # TODO fix the %b (branch) format for svn. Using %b breaks\n  # color-encoding of the foreground for the rest of the powerline.\n  zstyle ':vcs_info:svn*:*' formats \"$VCS_CHANGESET_PREFIX%c%u\"\n  zstyle ':vcs_info:svn*:*' actionformats \"$VCS_CHANGESET_PREFIX%c%u %F{${POWERLEVEL9K_VCS_ACTIONFORMAT_FOREGROUND}}| %a%f\"\n\n  if [[ \"$POWERLEVEL9K_SHOW_CHANGESET\" == true ]]; then\n    zstyle ':vcs_info:*' get-revision true\n  fi\n}\n\n################################################################\n# Segment to show VCS information\nprompt_vcs() {\n  VCS_WORKDIR_DIRTY=false\n  VCS_WORKDIR_HALF_DIRTY=false\n  local current_state=\"\"\n\n  # Actually invoke vcs_info manually to gather all information.\n  vcs_info\n  local vcs_prompt=\"${vcs_info_msg_0_}\"\n\n  if [[ -n \"$vcs_prompt\" ]]; then\n    if [[ \"$VCS_WORKDIR_DIRTY\" == true ]]; then\n      # $vcs_visual_identifier gets set in +vi-vcs-detect-changes in functions/vcs.zsh,\n      # as we have there access to vcs_info internal hooks.\n      current_state='modified'\n    else\n      if [[ \"$VCS_WORKDIR_HALF_DIRTY\" == true ]]; then\n        current_state='untracked'\n      else\n        current_state='clean'\n      fi\n    fi\n    \"$1_prompt_segment\" \"${0}_${(U)current_state}\" \"$2\" \"${vcs_states[$current_state]}\" \"$DEFAULT_COLOR\" \"$vcs_prompt\" \"$vcs_visual_identifier\"\n  fi\n}\n\n################################################################\n# Vi Mode: show editing mode (NORMAL|INSERT)\nset_default POWERLEVEL9K_VI_INSERT_MODE_STRING \"INSERT\"\nset_default POWERLEVEL9K_VI_COMMAND_MODE_STRING \"NORMAL\"\nprompt_vi_mode() {\n  case ${KEYMAP} in\n    vicmd)\n      \"$1_prompt_segment\" \"$0_NORMAL\" \"$2\" \"$DEFAULT_COLOR\" \"white\" \"$POWERLEVEL9K_VI_COMMAND_MODE_STRING\"\n    ;;\n    main|viins|*)\n      if [[ -z $POWERLEVEL9K_VI_INSERT_MODE_STRING ]]; then return; fi\n      \"$1_prompt_segment\" \"$0_INSERT\" \"$2\" \"$DEFAULT_COLOR\" \"blue\" \"$POWERLEVEL9K_VI_INSERT_MODE_STRING\"\n    ;;\n  esac\n}\n\n################################################################\n# Virtualenv: current working virtualenv\n# More information on virtualenv (Python):\n# https://virtualenv.pypa.io/en/latest/\nprompt_virtualenv() {\n  local virtualenv_path=\"$VIRTUAL_ENV\"\n\n  # Early exit; $virtualenv_path must always be set.\n  [[ -z \"$virtualenv_path\" ]] && return\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"blue\" \"$DEFAULT_COLOR\" \"${virtualenv_path:t}\" 'PYTHON_ICON'\n}\n\n################################################################\n# Segment to display pyenv information\n# https://github.com/pyenv/pyenv#choosing-the-python-version\nset_default POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW false\nprompt_pyenv() {\n  if [[ -n \"$PYENV_VERSION\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"blue\" \"$DEFAULT_COLOR\" \"$PYENV_VERSION\" 'PYTHON_ICON'\n  elif [ $commands[pyenv] ]; then\n    local pyenv_version_name=\"$(pyenv version-name)\"\n    local pyenv_global=\"system\"\n    local pyenv_root=\"$(pyenv root)\"\n    if [[ -f \"${pyenv_root}/version\" ]]; then\n      pyenv_global=\"$(pyenv version-file-read ${pyenv_root}/version)\"\n    fi\n    if [[ \"${pyenv_version_name}\" != \"${pyenv_global}\" || \"${POWERLEVEL9K_PYENV_PROMPT_ALWAYS_SHOW}\" == \"true\" ]]; then\n      \"$1_prompt_segment\" \"$0\" \"$2\" \"blue\" \"$DEFAULT_COLOR\" \"$pyenv_version_name\" 'PYTHON_ICON'\n    fi\n  fi\n}\n\n################################################################\n# Display openfoam information\nprompt_openfoam() {\n  local wm_project_version=\"$WM_PROJECT_VERSION\"\n  local wm_fork=\"$WM_FORK\"\n  if [[ -n \"$wm_project_version\" ]] &&  [[ -z \"$wm_fork\" ]] ; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"yellow\" \"$DEFAULT_COLOR\" \"OF: $(basename \"$wm_project_version\")\"\n  elif [[ -n \"$wm_project_version\" ]] && [[ -n \"$wm_fork\" ]] ; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"yellow\" \"$DEFAULT_COLOR\" \"F-X: $(basename \"$wm_project_version\")\"\n  fi\n}\n\n################################################################\n# Segment to display Swift version\nprompt_swift_version() {\n  # Get the first number as this is probably the \"main\" version number..\n  local swift_version=$(swift --version 2>/dev/null | grep -o -E \"[0-9.]+\" | head -n 1)\n  [[ -z \"${swift_version}\" ]] && return\n\n  \"$1_prompt_segment\" \"$0\" \"$2\" \"magenta\" \"white\" \"${swift_version}\" 'SWIFT_ICON'\n}\n\n################################################################\n# dir_writable: Display information about the user's permission to write in the current directory\nprompt_dir_writable() {\n  if [[ ! -w \"$PWD\" ]]; then\n    \"$1_prompt_segment\" \"$0_FORBIDDEN\" \"$2\" \"red\" \"yellow1\" \"\" 'LOCK_ICON'\n  fi\n}\n\n################################################################\n# Kubernetes Current Context/Namespace\nprompt_kubecontext() {\n  local kubectl_version=\"$(kubectl version --client 2>/dev/null)\"\n\n  if [[ -n \"$kubectl_version\" ]]; then\n    # Get the current Kuberenetes context\n    local cur_ctx=$(kubectl config view -o=jsonpath='{.current-context}')\n    cur_namespace=\"$(kubectl config view -o=jsonpath=\"{.contexts[?(@.name==\\\"${cur_ctx}\\\")].context.namespace}\")\"\n    # If the namespace comes back empty set it default.\n    if [[ -z \"${cur_namespace}\" ]]; then\n      cur_namespace=\"default\"\n    fi\n\n    local k8s_final_text=\"\"\n\n    if [[ \"$cur_ctx\" == \"$cur_namespace\" ]]; then\n      # No reason to print out the same identificator twice\n      k8s_final_text=\"$cur_ctx\"\n    else\n      k8s_final_text=\"$cur_ctx/$cur_namespace\"\n    fi\n\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"magenta\" \"white\" \"$k8s_final_text\" \"KUBERNETES_ICON\"\n  fi\n}\n\n################################################################\n# Dropbox status\nprompt_dropbox() {\n  # The first column is just the directory, so cut it\n  local dropbox_status=\"$(dropbox-cli filestatus . | cut -d\\  -f2-)\"\n\n  # Only show if the folder is tracked and dropbox is running\n  if [[ \"$dropbox_status\" != 'unwatched' && \"$dropbox_status\" != \"isn't running!\" ]]; then\n    # If \"up to date\", only show the icon\n    if [[ \"$dropbox_status\" =~ 'up to date' ]]; then\n      dropbox_status=\"\"\n    fi\n\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"white\" \"blue\" \"$dropbox_status\" \"DROPBOX_ICON\"\n  fi\n}\n\n# print Java version number\nprompt_java_version() {\n  local java_version\n  # Stupid: Java prints its version on STDERR.\n  # The first version ouput will print nothing, we just\n  # use it to transport whether the command was successful.\n  # If yes, we parse the version string (and need to\n  # redirect the stderr to stdout to make the pipe work).\n  java_version=$(java -version 2>/dev/null && java -fullversion 2>&1 | cut -d '\"' -f 2)\n\n  if [[ -n \"$java_version\" ]]; then\n    \"$1_prompt_segment\" \"$0\" \"$2\" \"red\" \"white\" \"$java_version\" \"JAVA_ICON\"\n  fi\n}\n\n################################################################\n# Prompt processing and drawing\n################################################################\n# Main prompt\nbuild_left_prompt() {\n  local index=1\n  local element\n  for element in \"${POWERLEVEL9K_LEFT_PROMPT_ELEMENTS[@]}\"; do\n    # Remove joined information in direct calls\n    element=${element%_joined}\n\n    # Check if it is a custom command, otherwise interpet it as\n    # a prompt.\n    if [[ $element[0,7] =~ \"custom_\" ]]; then\n      \"prompt_custom\" \"left\" \"$index\" $element[8,-1]\n    else\n      \"prompt_$element\" \"left\" \"$index\"\n    fi\n\n    index=$((index + 1))\n  done\n\n  left_prompt_end\n}\n\n# Right prompt\nbuild_right_prompt() {\n  local index=1\n  local element\n  for element in \"${POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS[@]}\"; do\n    # Remove joined information in direct calls\n    element=${element%_joined}\n\n    # Check if it is a custom command, otherwise interpet it as\n    # a prompt.\n    if [[ $element[0,7] =~ \"custom_\" ]]; then\n      \"prompt_custom\" \"right\" \"$index\" $element[8,-1]\n    else\n      \"prompt_$element\" \"right\" \"$index\"\n    fi\n\n    index=$((index + 1))\n  done\n\n  # Clear to the end of the line\n  echo -n \"%E\"\n}\n\npowerlevel9k_preexec() {\n  _P9K_TIMER_START=$EPOCHREALTIME\n}\n\nset_default POWERLEVEL9K_PROMPT_ADD_NEWLINE false\npowerlevel9k_prepare_prompts() {\n  # Return values. These need to be global, because\n  # they are used in prompt_status. Also, we need\n  # to get the return value of the last command at\n  # very first in this function. Do not move the\n  # lines down, otherwise the last command is not\n  # what you expected it to be.\n  RETVAL=$?\n  RETVALS=( \"$pipestatus[@]\" )\n\n  local RPROMPT_SUFFIX RPROMPT_PREFIX\n  _P9K_COMMAND_DURATION=$((EPOCHREALTIME - _P9K_TIMER_START))\n\n  # Reset start time\n  _P9K_TIMER_START=0x7FFFFFFF\n\n  if [[ \"$POWERLEVEL9K_PROMPT_ON_NEWLINE\" == true ]]; then\n    PROMPT='$(print_icon 'MULTILINE_FIRST_PROMPT_PREFIX')%f%b%k$(build_left_prompt)\n$(print_icon 'MULTILINE_LAST_PROMPT_PREFIX')'\n    if [[ \"$POWERLEVEL9K_RPROMPT_ON_NEWLINE\" != true ]]; then\n      # The right prompt should be on the same line as the first line of the left\n      # prompt. To do so, there is just a quite ugly workaround: Before zsh draws\n      # the RPROMPT, we advise it, to go one line up. At the end of RPROMPT, we\n      # advise it to go one line down. See:\n      # http://superuser.com/questions/357107/zsh-right-justify-in-ps1\n      local LC_ALL=\"\" LC_CTYPE=\"en_US.UTF-8\" # Set the right locale to protect special characters\n      RPROMPT_PREFIX='%{'$'\\e[1A''%}' # one line up\n      RPROMPT_SUFFIX='%{'$'\\e[1B''%}' # one line down\n    else\n      RPROMPT_PREFIX=''\n      RPROMPT_SUFFIX=''\n    fi\n  else\n    PROMPT='%f%b%k$(build_left_prompt)'\n    RPROMPT_PREFIX=''\n    RPROMPT_SUFFIX=''\n  fi\n\n  if [[ \"$POWERLEVEL9K_DISABLE_RPROMPT\" != true ]]; then\n    RPROMPT=\"${RPROMPT_PREFIX}\"'%f%b%k$(build_right_prompt)%{$reset_color%}'\"${RPROMPT_SUFFIX}\"\n  fi\n\nlocal NEWLINE='\n'\n\n  if [[ $POWERLEVEL9K_PROMPT_ADD_NEWLINE == true ]]; then\n    NEWLINES=\"\"\n    repeat ${POWERLEVEL9K_PROMPT_ADD_NEWLINE_COUNT:-1} { NEWLINES+=$NEWLINE }\n    PROMPT=\"$NEWLINES$PROMPT\"\n  fi\n\n  # Allow iTerm integration to work\n  [[ $ITERM_SHELL_INTEGRATION_INSTALLED == \"Yes\" ]] && PROMPT=\"%{$(iterm2_prompt_mark)%}$PROMPT\"\n}\n\nzle-keymap-select () {\n\tzle reset-prompt\n\tzle -R\n}\n\nset_default POWERLEVEL9K_IGNORE_TERM_COLORS false\nset_default POWERLEVEL9K_IGNORE_TERM_LANG false\n\nprompt_powerlevel9k_setup() {\n  # The value below was set to better support 32-bit CPUs.\n  # It's the maximum _signed_ integer value on 32-bit CPUs.\n  # Please don't change it until 19 January of 2038. ;)\n\n  # Disable false display of command execution time\n  _P9K_TIMER_START=0x7FFFFFFF\n\n  # The prompt function will set these prompt_* options after the setup function\n  # returns. We need prompt_subst so we can safely run commands in the prompt\n  # without them being double expanded and we need prompt_percent to expand the\n  # common percent escape sequences.\n  prompt_opts=(cr percent sp subst)\n\n  # Borrowed from promptinit, sets the prompt options in case the theme was\n  # not initialized via promptinit.\n  setopt noprompt{bang,cr,percent,sp,subst} \"prompt${^prompt_opts[@]}\"\n\n  # Display a warning if the terminal does not support 256 colors\n  termColors\n\n  # If the terminal `LANG` is set to `C`, this theme will not work at all.\n  if [[ $POWERLEVEL9K_IGNORE_TERM_LANG == false ]]; then\n      local term_lang\n      term_lang=$(echo $LANG)\n      if [[ $term_lang == 'C' ]]; then\n          print -P \"\\t%F{red}WARNING!%f Your terminal's 'LANG' is set to 'C', which breaks this theme!\"\n          print -P \"\\t%F{red}WARNING!%f Please set your 'LANG' to a UTF-8 language, like 'en_US.UTF-8'\"\n          print -P \"\\t%F{red}WARNING!%f _before_ loading this theme in your \\~\\.zshrc. Putting\"\n          print -P \"\\t%F{red}WARNING!%f %F{blue}export LANG=\\\"en_US.UTF-8\\\"%f at the top of your \\~\\/.zshrc is sufficient.\"\n      fi\n  fi\n\n  defined POWERLEVEL9K_LEFT_PROMPT_ELEMENTS || POWERLEVEL9K_LEFT_PROMPT_ELEMENTS=(context dir vcs)\n  defined POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS || POWERLEVEL9K_RIGHT_PROMPT_ELEMENTS=(status root_indicator background_jobs history time)\n\n  # Display a warning if deprecated segments are in use.\n  typeset -AH deprecated_segments\n  # old => new\n  deprecated_segments=(\n    'longstatus'      'status'\n  )\n  print_deprecation_warning deprecated_segments\n\n  # initialize colors\n  autoload -U colors && colors\n\n  if segment_in_use \"vcs\"; then\n    powerlevel9k_vcs_init\n  fi\n\n  # initialize timing functions\n  zmodload zsh/datetime\n\n  # Initialize math functions\n  zmodload zsh/mathfunc\n\n  # initialize hooks\n  autoload -Uz add-zsh-hook\n\n  # prepare prompts\n  add-zsh-hook precmd powerlevel9k_prepare_prompts\n  add-zsh-hook preexec powerlevel9k_preexec\n\n  zle -N zle-keymap-select\n}\n\nprompt_powerlevel9k_teardown() {\n  add-zsh-hook -D precmd powerlevel9k_\\*\n  add-zsh-hook -D preexec powerlevel9k_\\*\n  PROMPT='%m%# '\n  RPROMPT=\n}\n\nprompt_powerlevel9k_setup \"$@\"\n"
        },
        {
          "name": "prompt_powerlevel9k_setup",
          "type": "blob",
          "size": 0.021484375,
          "content": "powerlevel9k.zsh-theme"
        },
        {
          "name": "shunit2",
          "type": "commit",
          "content": null
        },
        {
          "name": "test-bsd-vm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-in-docker",
          "type": "blob",
          "size": 4.6201171875,
          "content": "#!/usr/bin/env zsh\n\nset -eu\n\n# The default ZSH to use; it can just be the first few characters.\n# This should be the oldest version we support.\ndefault_version='4.'\n\nsetopt extended_glob glob_subst numeric_glob_sort\nsetopt warn_create_global warn_nested_var 2> /dev/null\ncd \"${${(%):-%x}:A:h}\"\n\n# TODO: Crazy Logic to munge TERM to something supported in Ubuntu 14.04\nterm=screen-256color\n\n# Note: If versions and frameworks looks complicated, it isn't that bad...\n# ...see Modifiers in zshexpn(1) for details.\n\n# List of ZSH versions\ntypeset -aU versions\nversions=( docker/base-*/Dockerfile(N.on:h:t:s/base-//) )\ntypeset -r versions\n\n# List of frameworks\ntypeset -aU frameworks\nframeworks=( docker/*/Dockerfile(N.on:h:t) )\nfor i in {$#frameworks..1}; do\n  # Remove all base entries\n  [[ \"${frameworks[$i]}\" == base-* ]] && frameworks[$i]=()\ndone\ntypeset -r frameworks\n\n# Known Issues\ntypeset -A known_issues\nknown_issues[\"4.3.11-antigen\"]=\"Antigen commands that need git won't work; it needs a newer version of git.\"\nknown_issues[\"4.3.11-zim\"]=\"BROKEN: Zim wants ZSH 5.2 or newer.\"\nknown_issues[\"5.0.3-zim\"]=\"DEPRECATED: Zim wants ZSH 5.2 or newer.\"\nknown_issues[\"5.1.1-zim\"]=\"DEPRECATED: Zim wants ZSH 5.2 or newer.\"\nknown_issues[\"4.3.11-zulu\"]=\"Zulu doesn't work; it needs a newer version of git.\"\ntypeset -r known_issues\n\nerr()\n{\n  print -P \"%F{red}Error:%f $*\"\n  exit 2\n}\n\nresolve_framework() {\n  local f=$1 found\n  found=${frameworks[(In:-1:)$f*]}\n  if (( found <= $#frameworks )); then\n    echo \"${frameworks[$found]}\"\n  fi\n}\n\nresolve_version() {\n  local v=$1 found\n  found=${versions[(In:-1:)$v*]}\n  if (( found <= $#versions )); then\n    echo \"${versions[$found]}\"\n  fi\n}\n\ncheck_for_known_issues() {\n  local version=\"$1\"\n  local framework=\"$2\"\n  local name=\"${version}-${framework}\"\n\n  if (( ${+known_issues[\"$name\"]} )); then\n    echo\n    print -P \"%F{red}Known Issue: %F{yellow}${known_issues[\"$name\"]}%f\"\n    echo\n  fi\n}\n\ncmd() {\n  if (( dry_run )); then\n    echo \"${(@q)*}\" 1>&2\n  else\n    \"${(@)*}\"\n  fi\n}\n\nbuild_and_run() {\n  local version=\"$1\"\n  local framework=\"$2\"\n  local name=\"${version}-${framework}\"\n\n  check_for_known_issues \"$version\" \"$framework\"\n\n  print -P \"%F{green}Preparing containers...%f\"\n\n  echo -n \"p9k:base-${version}: \"\n  cmd docker build \\\n    --quiet \\\n    --tag \"p9k:base-${version}\" \\\n    --file \"docker/base-${version}/Dockerfile\" \\\n    .\n\n  echo -n \"p9k:${version}-${framework}: \"\n  cmd docker build \\\n    --quiet \\\n    --build-arg=\"base=base-${version}\" \\\n    --tag \"p9k:${version}-${framework}\" \\\n    --file \"docker/${framework}/Dockerfile\" \\\n    .\n\n  print -P \"%F{green}Starting ${name} container...%f\"\n  cmd docker run \\\n    --rm \\\n    --interactive \\\n    --tty \\\n    --hostname=\"${name//./_}\" \\\n    --env=\"TERM=${term}\" \\\n    \"p9k:${version}-${framework}\"\n}\n\nshow_help() {\n  local f v\n  echo \"Usage: ${(%):-%x} <framework>|--list\"\n  echo\n  echo \"Loads up a docker image with powershell9k configured in <framework>\"\n  echo\n  echo \"  -f --frameworks  Lists all available frameworks, newline separated.\"\n  echo \"  -v --versions    Lists all available ZSH versions, newline separated.\"\n  echo \"  -z --zsh VER     Uses ZSH with version VER.\"\n  echo \"  -n --dry-run     Just prints the docker commands that would be run.\"\n  echo \"  --help        You're soaking in it.\"\n  echo\n  echo \"ZSH versions:\"\n  for v in \"${(@)versions}\"; do\n    echo \"  $v\"\n  done\n  echo\n  echo \"Framework containers:\"\n  for f in \"${(@)frameworks}\"; do\n    echo \"  $f\"\n  done\n}\n\n# No arguments\nif (( $# == 0 )); then\n  show_help\n  exit\nfi\n\n# Parse flags and such.\nasked_for_version=$default_version\nasked_for_framework=\ndry_run=0\nwhile (( $# > 0 )); do\n  case \"$1\" in\n    -f | --frameworks )\n      print -l \"${(@)frameworks}\"\n      exit\n      ;;\n    -v | --versions )\n      print -l \"${(@)versions}\"\n      exit\n      ;;\n    -z | --zsh )\n      shift\n      asked_for_version=$1\n      ;;\n    -n | --dry-run ) dry_run=1 ;;\n    -h | --help )\n      show_help\n      exit\n      ;;;\n    -* )\n      err \"Unknown option ${1}\"\n      show_help\n      exit 1\n      ;;\n    * )\n      if [[ -z \"$asked_for_framework\" ]]; then\n        asked_for_framework=$1\n      else\n        err \"You can only specify one framework at a time; you already specified '${asked_for_framework}'\"\n      fi\n      ;;\n  esac\n  shift\ndone\n\ntypeset -r asked_for_version asked_for_framework\n\ntypeset -r use_version=\"$(resolve_version \"${asked_for_version}\")\"\nif [[ -z \"$use_version\" ]]; then\n  err \"No such ZSH version '${asked_for_version}'\"\nfi\n\ntypeset -r use_framework=\"$(resolve_framework \"${asked_for_framework}\")\"\nif [[ -z \"$use_framework\" ]]; then\n  err \"No such framework '${asked_for_framework}'\"\nfi\n\nbuild_and_run \"$use_version\" \"$use_framework\"\n\n# EOF\n"
        },
        {
          "name": "test-vm-providers",
          "type": "tree",
          "content": null
        },
        {
          "name": "test-vm",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}