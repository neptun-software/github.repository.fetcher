{
  "metadata": {
    "timestamp": 1736568945229,
    "page": 50,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "quickemu-project/quickemu",
      "stars": 11203,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3291015625,
          "content": "root = true\n\n[quickemu]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[quickget]\ncharset = utf-8\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 4\ntrim_trailing_whitespace = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.0087890625,
          "content": "use flake"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1982421875,
          "content": "*.chunklist\n*.conf\n*.dmg\n*.fd\n*.fixed\n*.img\n*.iso\n*.ISO\n*.lock\n!flake.lock\n*.log\n*.markdownlint.jsonc\n*.markdownlint.yaml\n*.msi\n*.part\n*.permall\n*.pid\n*.ports\n*.qcow2\n*.sh\n*.sock\n*.xml\n*.zs-old\n.direnv/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.0947265625,
          "content": "[submodule \"build-docs\"]\n\tpath = build-docs\n\turl = git@github.com:philclifford/quickemu-docs.git\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 5.1171875,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behaviour that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behaviour include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behaviour and will take appropriate and fair corrective action in\nresponse to any behaviour that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behaviour may be\nreported to the community leaders responsible for enforcement at\n#quickemu channel on Discord.\nAll complaints will be reviewed and investigated promptly and fairly.\n\nAll community leaders are obligated to respect the privacy and security of the\nreporter of any incident.\n\n## Enforcement Guidelines\n\nCommunity leaders will follow these Community Impact Guidelines in determining\nthe consequences for any action they deem in violation of this Code of Conduct:\n\n### 1. Correction\n\n**Community Impact**: Use of inappropriate language or other behaviour deemed\nunprofessional or unwelcome in the community.\n\n**Consequence**: A private, written warning from community leaders, providing\nclarity around the nature of the violation and an explanation of why the\nbehaviour was inappropriate. A public apology may be requested.\n\n### 2. Warning\n\n**Community Impact**: A violation through a single incident or series\nof actions.\n\n**Consequence**: A warning with consequences for continued behaviour. No\ninteraction with the people involved, including unsolicited interaction with\nthose enforcing the Code of Conduct, for a specified period of time. This\nincludes avoiding interactions in community spaces as well as external channels\nlike social media. Violating these terms may lead to a temporary or\npermanent ban.\n\n### 3. Temporary Ban\n\n**Community Impact**: A serious violation of community standards, including\nsustained inappropriate behaviour.\n\n**Consequence**: A temporary ban from any sort of interaction or public\ncommunication with the community for a specified period of time. No public or\nprivate interaction with the people involved, including unsolicited interaction\nwith those enforcing the Code of Conduct, is allowed during this period.\nViolating these terms may lead to a permanent ban.\n\n### 4. Permanent Ban\n\n**Community Impact**: Demonstrating a pattern of violation of community\nstandards, including sustained inappropriate behaviour,  harassment of an\nindividual, or aggression toward or disparagement of classes of individuals.\n\n**Consequence**: A permanent ban from any sort of public interaction within\nthe community.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage],\nversion 2.0, available at\nhttps://www.contributor-covenant.org/version/2/0/code_of_conduct.html.\n\nCommunity Impact Guidelines were inspired by [Mozilla's code of conduct\nenforcement ladder](https://github.com/mozilla/diversity).\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see the FAQ at\nhttps://www.contributor-covenant.org/faq. Translations are available at\nhttps://www.contributor-covenant.org/translations.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.9697265625,
          "content": "# Contributing\n\nWe welcome contributions to Quickemu.\n\n- Help other Quickemu users by answering questions in the [Quickemu Discussions](https://github.com/quickemu-project/quickemu/discussions) üõü\n- Improve the documentation in [this README](https://github.com/quickemu-project/quickemu/edit/master/README.md) and the [Quickemu Wiki](https://github.com/quickemu-project/quickemu/wiki) üìñ\n- File bug reports and feature requests in the [Quickemu Issues](https://github.com/quickemu-project/quickemu/issues) üìÅ\n- Submit [Quickemu Pull requests](https://github.com/quickemu-project/quickemu/pulls) to fix bugs üêû or add new features ‚ú®\n  - Follow our [guide to adding a new OS to quickget](https://github.com/quickemu-project/quickemu/wiki/06-Advanced-quickget-features#adding-a-new-os-to-quickget)\n  - Commit messages must [conform to the Conventional Commits specification](https://www.conventionalcommits.org/).\n- [Sponsor the project](https://github.com/sponsors/flexiondotorg) üíñ\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2020 Wimpy's World\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.34765625,
          "content": "<div align=\"center\">\n<img src=\".github/logo.png\" alt=\"Quickemu\" width=\"256\" />\n\n# Quickemu\n\n**Quickly create and run optimised Windows, macOS and Linux virtual machines:**\n\n**Made with üíù for <img src=\".github/tux.png\" align=\"top\" width=\"24\" alt=\"Tux (Linux)\"/> & <img src=\".github/apple.png\" align=\"top\" width=\"24\" alt=\"Apple (macOS)\"/>**\n</div>\n\n<p align=\"center\">\n  &nbsp;<a href=\"https://wimpysworld.io/discord\" target=\"_blank\"><img alt=\"Discord\" src=\"https://img.shields.io/discord/712850672223125565?style=for-the-badge&logo=discord&logoColor=%23ffffff&label=Discord&labelColor=%234253e8&color=%23e4e2e2\"></a>&nbsp;\n  &nbsp;<a href=\"https://fosstodon.org/@wimpy\" target=\"_blank\"><img alt=\"Mastodon\" src=\"https://img.shields.io/badge/Mastodon-6468fa?style=for-the-badge&logo=mastodon&logoColor=%23ffffff\"></a>&nbsp;\n  &nbsp;<a href=\"https://twitter.com/m_wimpress\" target=\"_blank\"><img alt=\"Twitter\" src=\"https://img.shields.io/badge/Twitter-303030?style=for-the-badge&logo=x&logoColor=%23ffffff\"></a>&nbsp;\n  &nbsp;<a href=\"https://linkedin.com/in/martinwimpress\" target=\"_blank\"><img alt=\"LinkedIn\" src=\"https://img.shields.io/badge/LinkedIn-1667be?style=for-the-badge&logo=linkedin&logoColor=%23ffffff\"></a>&nbsp;\n</p>\n\n\n# Introduction\n\n**Quickemu** is a wrapper for the excellent [QEMU](https://www.qemu.org/) that\nautomatically *\"does the right thing\"* when creating virtual machines. No\nrequirement for exhaustive configuration options. You decide what operating\nsystem you want to run and Quickemu takes care of the rest ü§ñ\n\n- `quickget` **automatically downloads the upstream OS** and creates the configuration üìÄ\n- `quickemu` enumerates your hardware and launches the virtual machine with the **optimum configuration best suited to your computer** ‚ö°Ô∏è\n\nThe original objective of the project was to [enable quick testing of Linux\ndistributions](https://github.com/quickemu-project/quickemu/wiki/02-Create-Linux-virtual-machines)\nwhere the virtual machines and their configuration can be stored anywhere (such\nas external USB storage or your home directory) and no elevated permissions are\nrequired to run the virtual machines.\n\n**Today, Quickemu includes comprehensive support for [macOS](https://github.com/quickemu-project/quickemu/wiki/03-Create-macOS-virtual-machines),\n[Windows](https://github.com/quickemu-project/quickemu/wiki/04-Create-Windows-virtual-machines)**, most of the BSDs, novel non-Linux operating systems such as FreeDOS, Haiku, KolibriOS, OpenIndiana, ReactOS, and more.\n\n# Features\n\n- Host support for **Linux and macOS**\n- **macOS** Sonoma, Ventura, Monterey, Big Sur, Catalina & Mojave\n- **Windows** 10 and 11 including TPM 2.0\n- **Windows Server** 2022 2019 2016\n- [Ubuntu](https://ubuntu.com/desktop) and all the **[official Ubuntu\n  flavours](https://ubuntu.com/download/flavours)**\n- **Nearly 1000 operating system editions are supported!**\n- Full SPICE support including host/guest clipboard sharing\n- VirtIO-webdavd file sharing for Linux and Windows guests\n- VirtIO-9p file sharing for Linux and macOS guests\n- [QEMU Guest Agent\n  support](https://wiki.qemu.org/Features/GuestAgent); provides access\n  to a system-level agent via standard QMP commands\n- Samba file sharing for Linux, macOS and Windows guests (*if `smbd`\n  is installed on the host*)\n- VirGL acceleration\n- USB device pass-through\n- Smartcard pass-through\n- Automatic SSH port forwarding to guests\n- Network port forwarding\n- Full duplex audio\n- Braille support\n- EFI (with or without SecureBoot) and Legacy BIOS boot\n\n## As featured on [Linux Matters](https://linuxmatters.sh) podcast!\n\nThe presenters of Linux Matters üêßüéôÔ∏è are the creators of each of the principle Quickemu projects. We discussed Quickemu's 2024 reboot in [Episode 30 - Quickemu Rising From the Bashes](https://linuxmatters.sh/30). <!-- and in [Episode 32 - Quick, quicker, quickest](https://linuxmatters.sh/32) [Martin](https://github.com/flexiondotorg) unveils macOS host support for [**Quickemu**](https://github.com/quickemu-project/quickemu), [Mark](https://github.com/marxjohnson) explains the origins of the [**Quickgui**](https://github.com/quickemu-project/quickgui) desktop app and upcoming improvements, and [Alan](https://github.com/popey) debuts [**Quicktest**](https://github.com/quickemu-project/quicktest); a framework for automatically testing operating systems via Quickemu -->\n\n<div align=\"center\">\n  <a href=\"https://linuxmatters.sh\" target=\"_blank\"><img src=\"https://github.com/wimpysworld/nix-config/raw/main/.github/screenshots/linuxmatters.png\" alt=\"Linux Matters Podcast\"/></a>\n  <br />\n  <em>Linux Matters Podcast</em>\n</div>\n\n# Quick start\n\n[Once Quickemu is installed](https://github.com/quickemu-project/quickemu/wiki/01-Installation), there are two simple steps to create and run a virtual machine:\n\n- `quickget` automatically downloads the ISO image for the operating system you want to run and creates a configuration file for the virtual machine.\n\n``` shell\nquickget nixos unstable minimal\n```\n\n- `quickemu` starts the virtual machine using the configuration file created by `quickget`.\n\n``` shell\nquickemu --vm nixos-unstable-minimal.conf\n```\n\nExecute `quickget` (with no arguments) to see a list of all the supported operating systems.\n\n## Demo\n\n<div align=\"center\">\n\n<a href=\"https://asciinema.org/a/658148?autoplay=1\" target=\"_blank\"><img src=\"https://asciinema.org/a/658148.svg\" /></a>\n\n</div>\n\n# Documentation\n\nThe wiki describes how to get up and running with Quickemu and also covers more advanced configuration and usage.\n\n- [**Installation**](https://github.com/quickemu-project/quickemu/wiki/01-Installation) üíæ\n- [**Create Linux virtual machines**](https://github.com/quickemu-project/quickemu/wiki/02-Create-Linux-virtual-machines) üêß\n- [**Create macOS virtual machines**](https://github.com/quickemu-project/quickemu/wiki/03-Create-macOS-virtual-machines) üçè\n- [**Create Windows virtual machines**](https://github.com/quickemu-project/quickemu/wiki/04-Create-Windows-virtual-machines) ü™ü\n- [**Advanced quickemu configuration**](https://github.com/quickemu-project/quickemu/wiki/05-Advanced-quickemu-configuration) üîß\n- [**Advanced quickget features**](https://github.com/quickemu-project/quickemu/wiki/06-Advanced-quickget-features) ü§ì\n- [**Alternative frontends**](https://github.com/quickemu-project/quickemu/wiki/07-Alternative-frontends) üßë‚Äçüíª\n- [**References**](https://github.com/quickemu-project/quickemu/wiki/08-References) üìöÔ∏è\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.5634765625,
          "content": "# Security Policy\n\n## Supported Versions\n\nHere are the versions of Quickemu currently being supported with security updates.\n\n| Version | Supported          |\n| ------- | ------------------ |\n| 4.9.x   | :white_check_mark: |\n| < 4.8   | :x:                |\n\n## Reporting a Vulnerability\n\nIf you discover a vulnerability in Quickemu then [file an issue](https://github.com/quickemu-project/quickemu/issues/new) and click *Report a vulnerability*.\n\n- Quickemu is a spare-time hobby project.\n- We do not have SLAs for responding to security issues.\n- It is a best-efforts basis.\n"
        },
        {
          "name": "build-docs",
          "type": "commit",
          "content": null
        },
        {
          "name": "chunkcheck",
          "type": "blob",
          "size": 4.21484375,
          "content": "#!/usr/bin/env python3\n\nfrom pathlib import Path\nimport struct\nimport hashlib\nimport argparse\nv1_prod_pubkey = 0xn# v2_prod_pubkey = 0xCB45C5E53217D4499FB80B2D96AA4F964EB551F1DA4EBFA4F5E23F87BFE82FC113590E536757F329D6EAD1F267771EE342F5A5E61514DD3D3383187E663929D577D94648F262EBA1157E152DB5273D10AE3A6A058CB9CD64D01267DAC82ED3B7BC1631D078C911414129CDAAA0FFB0A8E2A7ADD6F32FB09A7E98D259BFF6ED10808D1BDA58CAF7355DFF1A085A18B11657D2617447BF657140D599364E5AC8E626276AC03BC2417831D9E61B25154AFE9F2D8271E9CE22D2783803083A5A7A575774688721097DC5E4B32D118CF6317A7083BA15BA608430A8C8C6B7DA2D932D81F571603A9363AC0197AB670242D9C9180D97A10900F11FE3D9246CF14F0883\n# v2_dev_pubkey  = 0xn\nChunkListHeader = struct.Struct('<4sIBBBxQQQ')\nassert ChunkListHeader.size == 0x24\n\nChunk = struct.Struct('<I32s')\nassert Chunk.size == 0x24\n\ndef parse_chunklist(path):\n    with open(path, 'rb') as f:\n        hash_ctx = hashlib.sha256()\n        data = f.read(ChunkListHeader.size)\n        hash_ctx.update(data)\n        magic, header_size, file_version, chunk_method, signature_method, chunk_count, chunk_offset, signature_offset = ChunkListHeader.unpack(data)\n        assert magic == b'CNKL'\n        assert header_size == ChunkListHeader.size\n        assert file_version == 1\n        assert chunk_method == 1\n        assert signature_method in [1, 2]\n        assert chunk_count > 0\n        assert chunk_offset == 0x24\n        assert signature_offset == chunk_offset + Chunk.size * chunk_count\n        for i in range(chunk_count):\n            data = f.read(Chunk.size)\n            hash_ctx.update(data)\n            chunk_size, chunk_sha256 = Chunk.unpack(data)\n            yield chunk_size, chunk_sha256\n        digest = hash_ctx.digest()\n        if signature_method == 1:\n            data = f.read(256)\n            assert len(data) == 256\n            signature = int.from_bytes(data, 'little')\n            plaintext = 0x1ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff003031300d0609608648016503040201050004200000000000000000000000000000000000000000000000000000000000000000 | int.from_bytes(digest, 'big')\n            assert pow(signature, 0x10001, v1_prod_pubkey) == plaintext\n        elif signature_method == 2:\n            data = f.read(32)\n            assert data == digest\n        else:\n            raise NotImplementedError\n        assert f.read(1) == b''\n\ndef check_chunklist(path, chunklist_path):\n    with open(path, 'rb') as f:\n        for chunk_size, chunk_sha256 in parse_chunklist(chunklist_path):\n            chunk = f.read(chunk_size)\n            assert len(chunk) == chunk_size\n            assert hashlib.sha256(chunk).digest() == chunk_sha256\n        assert f.read(1) == b''\n\ndef main():\n    parser = argparse.ArgumentParser()\n    parser.add_argument('vmdir', type=Path)\n    args = parser.parse_args()\n    vmdir = args.vmdir\n    check_chunklist(vmdir / 'RecoveryImage.dmg', vmdir / 'RecoveryImage.chunklist')\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "devshell.nix",
          "type": "blob",
          "size": 1.111328125,
          "content": "{ lib,\n  mkShell,\n  pkgs,\n  stdenv,\n}:\nmkShell {\n  packages = with pkgs; ([\n    cdrtools\n    curl\n    gawk\n    gnugrep\n    gnused\n    jq\n    pciutils\n    procps\n    python3\n    qemu_full\n    samba\n    socat\n    spice-gtk\n    swtpm\n    unzip\n    util-linux\n    xorg.xrandr\n    zsync\n    OVMF\n    OVMFFull\n  ] ++ lib.optionals stdenv.isLinux [\n    glxinfo\n    usbutils\n    xdg-user-dirs\n  ]);\n\n  inputsFrom = with pkgs; [\n    git\n  ];\n\n  shellHook = ''\n    echo \"**********************************************************************\"\n    echo \"* 'direnv reload' to update '.direnv/bin/quickemu' for testing  *\"\n    echo \"**********************************************************************\"\n    sed \\\n      -e '/OVMF_CODE_4M.secboot.fd/s|ovmfs=(|ovmfs=(\"${pkgs.OVMFFull.firmware}\",\"${pkgs.OVMFFull.variables}\" |' \\\n      -e '/OVMF_CODE_4M.fd/s|ovmfs=(|ovmfs=(\"${pkgs.OVMF.firmware}\",\"${pkgs.OVMF.variables}\" |' \\\n      -e '/cp \"''${VARS_IN}\" \"''${VARS_OUT}\"/a chmod +w \"''${VARS_OUT}\"' \\\n      -e 's,\\$(command -v smbd),${pkgs.samba}/bin/smbd,' \\\n      quickemu > $PWD/.direnv/bin/quickemu\n    chmod +x $PWD/.direnv/bin/quickemu\n  '';\n}\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.lock",
          "type": "blob",
          "size": 1.2705078125,
          "content": "{\n  \"nodes\": {\n    \"flake-schemas\": {\n      \"locked\": {\n        \"lastModified\": 1721999734,\n        \"narHash\": \"sha256-G5CxYeJVm4lcEtaO87LKzOsVnWeTcHGKbKxNamNWgOw=\",\n        \"rev\": \"0a5c42297d870156d9c57d8f99e476b738dcd982\",\n        \"revCount\": 75,\n        \"type\": \"tarball\",\n        \"url\": \"https://api.flakehub.com/f/pinned/DeterminateSystems/flake-schemas/0.1.5/0190ef2f-61e0-794b-ba14-e82f225e55e6/source.tar.gz\"\n      },\n      \"original\": {\n        \"type\": \"tarball\",\n        \"url\": \"https://flakehub.com/f/DeterminateSystems/flake-schemas/%2A.tar.gz\"\n      }\n    },\n    \"nixpkgs\": {\n      \"locked\": {\n        \"lastModified\": 1735264675,\n        \"narHash\": \"sha256-MgdXpeX2GuJbtlBrH9EdsUeWl/yXEubyvxM1G+yO4Ak=\",\n        \"rev\": \"d49da4c08359e3c39c4e27c74ac7ac9b70085966\",\n        \"revCount\": 712007,\n        \"type\": \"tarball\",\n        \"url\": \"https://api.flakehub.com/f/pinned/NixOS/nixpkgs/0.2411.712007%2Brev-d49da4c08359e3c39c4e27c74ac7ac9b70085966/01940ca0-b117-7d0e-b1ef-d579ee6d2f13/source.tar.gz\"\n      },\n      \"original\": {\n        \"type\": \"tarball\",\n        \"url\": \"https://flakehub.com/f/NixOS/nixpkgs/%2A.tar.gz\"\n      }\n    },\n    \"root\": {\n      \"inputs\": {\n        \"flake-schemas\": \"flake-schemas\",\n        \"nixpkgs\": \"nixpkgs\"\n      }\n    }\n  },\n  \"root\": \"root\",\n  \"version\": 7\n}\n"
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 1.294921875,
          "content": "{\n  description = \"Quickemu flake\";\n  inputs = {\n    flake-schemas.url = \"https://flakehub.com/f/DeterminateSystems/flake-schemas/*.tar.gz\";\n    nixpkgs.url = \"https://flakehub.com/f/NixOS/nixpkgs/*.tar.gz\";\n  };\n\n  outputs = {\n    self,\n    flake-schemas,\n    nixpkgs,\n  }: let\n      # Define supported systems and a helper function for generating system-specific outputs\n      supportedSystems = [ \"x86_64-linux\" \"x86_64-darwin\" \"aarch64-darwin\" \"aarch64-linux\" ];\n\n      forEachSupportedSystem = f: nixpkgs.lib.genAttrs supportedSystems (system: f {\n        system = system;\n        pkgs = import nixpkgs { inherit system; };\n      });\n  in {\n    # Define schemas for the flake's outputs\n    schemas = flake-schemas.schemas;\n\n    # Define overlays for each supported system\n    overlays = forEachSupportedSystem ({pkgs, system, ...}: {\n      default = final: prev: {\n        quickemu = final.callPackage ./package.nix { };\n      };\n    });\n\n    # Define packages for each supported system\n    packages = forEachSupportedSystem ({pkgs, system, ...}: rec {\n      quickemu = pkgs.callPackage ./package.nix { };\n      default = quickemu;\n    });\n\n    # Define devShells for each supported system\n    devShells = forEachSupportedSystem ({pkgs, system, ...}: {\n      default = pkgs.callPackage ./devshell.nix { };\n    });\n  };\n}\n"
        },
        {
          "name": "package.nix",
          "type": "blob",
          "size": 2.2939453125,
          "content": "{ lib\n, fetchFromGitHub\n, installShellFiles\n, makeWrapper\n, stdenv\n, testers\n, cdrtools\n, curl\n, gawk\n, glxinfo\n, gnugrep\n, gnused\n, jq\n, pciutils\n, procps\n, python3\n, qemu_full\n, samba\n, socat\n, spice-gtk\n, swtpm\n, unzip\n, usbutils\n, util-linux\n, xdg-user-dirs\n, xrandr\n, zsync\n, OVMF\n, OVMFFull\n, quickemu\n}:\nlet\n  runtimePaths = [\n    cdrtools\n    curl\n    gawk\n    gnugrep\n    gnused\n    jq\n    pciutils\n    procps\n    python3\n    qemu_full\n    samba\n    socat\n    swtpm\n    unzip\n    util-linux\n    xrandr\n    zsync\n    OVMF\n    OVMFFull\n  ] ++ lib.optionals stdenv.isLinux [\n    glxinfo\n    usbutils\n    xdg-user-dirs\n  ];\n  versionMatches =\n    builtins.match ''\n      .*\n      readonly[[:blank:]]VERSION=\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+)\"\n      .*\n    '' (builtins.readFile ./quickemu);\nin\nstdenv.mkDerivation rec {\n  pname = \"quickemu\";\n  version = builtins.concatStringsSep \"\" versionMatches;\n  src = lib.cleanSource ./.;\n\n  postPatch = ''\n    sed -i \\\n      -e '/OVMF_CODE_4M.secboot.fd/s|ovmfs=(|ovmfs=(\"${OVMFFull.firmware}\",\"${OVMFFull.variables}\" |' \\\n      -e '/OVMF_CODE_4M.fd/s|ovmfs=(|ovmfs=(\"${OVMF.firmware}\",\"${OVMF.variables}\" |' \\\n      -e '/cp \"''${VARS_IN}\" \"''${VARS_OUT}\"/a chmod +w \"''${VARS_OUT}\"' \\\n      -e 's,\\$(command -v smbd),${samba}/bin/smbd,' \\\n      quickemu\n  '';\n\n  nativeBuildInputs = [ makeWrapper installShellFiles ];\n\n  installPhase = ''\n    runHook preInstall\n\n    installManPage docs/quickget.1 docs/quickemu.1 docs/quickemu_conf.5\n    install -Dm755 -t \"$out/bin\" chunkcheck quickemu quickget quickreport\n\n    # spice-gtk needs to be put in suffix so that when virtualisation.spiceUSBRedirection\n    # is enabled, the wrapped spice-client-glib-usb-acl-helper is used\n    for f in chunkcheck quickget quickemu quickreport; do\n      wrapProgram $out/bin/$f \\\n        --prefix PATH : \"${lib.makeBinPath runtimePaths}\" \\\n        --suffix PATH : \"${lib.makeBinPath [ spice-gtk ]}\"\n    done\n\n    runHook postInstall\n  '';\n\n  passthru.tests = testers.testVersion { package = quickemu; };\n\n  meta = {\n    description = \"Quickly create and run optimised Windows, macOS and Linux virtual machines\";\n    homepage = \"https://github.com/quickemu-project/quickemu\";\n    mainProgram = \"quickemu\";\n    license = lib.licenses.mit;\n    maintainers = with lib.maintainers; [ fedx-sudo flexiondotorg ];\n  };\n}\n"
        },
        {
          "name": "quickemu",
          "type": "blob",
          "size": 82.6904296875,
          "content": "#!/usr/bin/env bash\nexport LC_ALL=C\n\nif ((BASH_VERSINFO[0] < 4)); then\n    echo \"Sorry, you need bash 4.0 or newer to run this script.\"\n    exit 1\nfi\n\nfunction ignore_msrs_always() {\n    # Make sure the host has /etc/modprobe.d\n    if [ -d /etc/modprobe.d ]; then\n        # Skip if ignore_msrs is already enabled, assumes initramfs has been rebuilt\n        if ! grep -lq 'ignore_msrs=Y' /etc/modprobe.d/kvm-quickemu.conf >/dev/null 2>&1; then\n            echo \"options kvm ignore_msrs=Y\" | sudo tee /etc/modprobe.d/kvm-quickemu.conf\n            sudo update-initramfs -k all -u\n        fi\n    else\n        echo \"ERROR! /etc/modprobe.d was not found, I don't know how to configure this system.\"\n        exit 1\n    fi\n}\n\nfunction ignore_msrs_alert() {\n    local ignore_msrs=\"\"\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        return\n    elif [ -e /sys/module/kvm/parameters/ignore_msrs ]; then\n        ignore_msrs=$(cat /sys/module/kvm/parameters/ignore_msrs)\n        if [ \"${ignore_msrs}\" == \"N\" ]; then\n            echo \" - MSR:      WARNING! Ignoring unhandled Model-Specific Registers is disabled.\"\n            echo\n            echo \"             echo 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs\"\n            echo\n            echo \"             If you are unable to run macOS or Windows VMs then run the above üëÜ\"\n            echo \"             This will enable ignoring of unhandled MSRs until you reboot the host.\"\n            echo \"             You can make this change permanent by running: 'quickemu --ignore-msrs-always'\"\n        fi\n    fi\n}\n\nfunction delete_shortcut() {\n    local SHORTCUT_DIR=\"${HOME}/.local/share/applications\"\n    if [ -e \"${SHORTCUT_DIR}/${VMNAME}.desktop\" ]; then\n        rm \"${SHORTCUT_DIR}/${VMNAME}.desktop\"\n        echo \" - Deleted ${SHORTCUT_DIR}/${VMNAME}.desktop\"\n    fi\n}\n\nfunction delete_disk() {\n    echo \"Deleting ${VMNAME} virtual hard disk\"\n    if [ -e \"${disk_img}\" ]; then\n        rm \"${disk_img}\" >/dev/null 2>&1\n        # Remove any EFI vars, but not for macOS\n        rm \"${VMDIR}\"/OVMF_VARS*.fd >/dev/null 2>&1\n        rm \"${VMDIR}/${VMNAME}-vars.fd\" >/dev/null 2>&1\n        echo \" - Deleted ${disk_img}\"\n        delete_shortcut\n    else\n        echo \" - ${disk_img} not found. Doing nothing.\"\n    fi\n}\n\nfunction delete_vm() {\n    echo \"Deleting ${VMNAME} completely\"\n    if [ -d \"${VMDIR}\" ]; then\n        rm -rf \"${VMDIR}\"\n        rm \"${VM}\"\n        echo \" - Deleted ${VM} and ${VMDIR}/\"\n        delete_shortcut\n    else\n        echo \" - ${VMDIR} not found. Doing nothing.\"\n    fi\n}\n\nfunction kill_vm() {\n    echo \"Killing ${VMNAME}\"\n    if [ -z \"${VM_PID}\" ]; then\n        echo \" - ${VMNAME} is not running.\"\n        rm -f \"${VMDIR}/${VMNAME}.pid\"\n    elif [ -n \"${VM_PID}\" ]; then\n        if kill -9 \"${VM_PID}\" > /dev/null 2>&1; then\n            echo \" - ${VMNAME} (${VM_PID}) killed.\"\n            rm -f \"${VMDIR}/${VMNAME}.pid\"\n        else\n            echo \" - ${VMNAME} (${VM_PID}) was not killed.\"\n        fi\n    elif [ ! -r \"${VMDIR}/${VMNAME}.pid\" ]; then\n        echo \" - ${VMNAME} has no ${VMDIR}/${VMNAME}.pid\"\n    fi\n}\n\nfunction snapshot_apply() {\n    echo \"Snapshot apply to ${disk_img}\"\n    local TAG=\"${1}\"\n    if [ -z \"${TAG}\" ]; then\n        echo \" - ERROR! No snapshot tag provided.\"\n        exit\n    fi\n\n    if [ -e \"${disk_img}\" ]; then\n        if ${QEMU_IMG} snapshot -q -a \"${TAG}\" \"${disk_img}\"; then\n            echo \" - Applied snapshot '${TAG}' to ${disk_img}\"\n        else\n            echo \" - ERROR! Failed to apply snapshot '${TAG}' to ${disk_img}\"\n        fi\n    else\n        echo \" - NOTE! ${disk_img} not found. Doing nothing.\"\n    fi\n}\n\nfunction snapshot_create() {\n    echo \"Snapshotting ${disk_img}\"\n    local TAG=\"${1}\"\n    if [ -z \"${TAG}\" ]; then\n        echo \"- ERROR! No snapshot tag provided.\"\n        exit\n    fi\n\n    if [ -e \"${disk_img}\" ]; then\n        if ${QEMU_IMG} snapshot -q -c \"${TAG}\" \"${disk_img}\"; then\n            echo \" - Created snapshot '${TAG}' for ${disk_img}\"\n        else\n            echo \" - ERROR! Failed to create snapshot '${TAG}' for ${disk_img}\"\n        fi\n    else\n        echo \" - NOTE! ${disk_img} not found. Doing nothing.\"\n    fi\n}\n\nfunction snapshot_delete() {\n    echo \"Snapshot removal ${disk_img}\"\n    local TAG=\"${1}\"\n    if [ -z \"${TAG}\" ]; then\n        echo \" - ERROR! No snapshot tag provided.\"\n        exit\n    fi\n\n    if [ -e \"${disk_img}\" ]; then\n        if ${QEMU_IMG} snapshot -q -d \"${TAG}\" \"${disk_img}\"; then\n            echo \" - Deleted snapshot '${TAG}' from ${disk_img}\"\n        else\n            echo \" - ERROR! Failed to delete snapshot '${TAG}' from ${disk_img}\"\n        fi\n    else\n        echo \" - NOTE! ${disk_img} not found. Doing nothing.\"\n    fi\n}\n\nfunction snapshot_info() {\n    echo\n    if [ -e \"${disk_img}\" ]; then\n        ${QEMU_IMG} info \"${disk_img}\"\n    fi\n}\n\nfunction get_port() {\n    local PORT_START=$1\n    local PORT_RANGE=$((PORT_START+$2))\n    local PORT\n    for ((PORT = PORT_START; PORT <= PORT_RANGE; PORT++)); do\n        # Make sure port scans do not block too long.\n        timeout 0.1s bash -c \"echo >/dev/tcp/127.0.0.1/${PORT}\" >/dev/null 2>&1\n        if [ ${?} -eq 1 ]; then\n            echo \"${PORT}\"\n            break\n        fi\n    done\n}\n\nfunction configure_usb() {\n    local DEVICE=\"\"\n    local USB_BUS=\"\"\n    local USB_DEV=\"\"\n    local USB_NAME=\"\"\n    local VENDOR_ID=\"\"\n    local PRODUCT_ID=\"\"\n    local USB_NOT_READY=0\n\n    # Have any USB devices been requested for pass-through?\n    if (( ${#usb_devices[@]} )); then\n        echo \" - USB:      Host pass-through requested:\"\n        for DEVICE in \"${usb_devices[@]}\"; do\n            VENDOR_ID=$(echo \"${DEVICE}\" | cut -d':' -f1)\n            PRODUCT_ID=$(echo \"${DEVICE}\" | cut -d':' -f2)\n            USB_BUS=$(lsusb -d \"${VENDOR_ID}:${PRODUCT_ID}\" | cut -d' ' -f2)\n            USB_DEV=$(lsusb -d \"${VENDOR_ID}:${PRODUCT_ID}\" | cut -d' ' -f4 | cut -d':' -f1)\n            USB_NAME=$(lsusb -d \"${VENDOR_ID}:${PRODUCT_ID}\" | cut -d' ' -f7-)\n            if [ -z \"${USB_NAME}\" ]; then\n                echo \"             ! USB device ${VENDOR_ID}:${PRODUCT_ID} not found. Check your configuration\"\n                continue\n            elif [ -w \"/dev/bus/usb/${USB_BUS}/${USB_DEV}\" ]; then\n                echo \"             o ${USB_NAME} on bus ${USB_BUS} device ${USB_DEV} is accessible.\"\n            else\n                echo \"             x ${USB_NAME} on bus ${USB_BUS} device ${USB_DEV} needs permission changes:\"\n                echo \"               sudo chown -v root:${USER} /dev/bus/usb/${USB_BUS}/${USB_DEV}\"\n                USB_NOT_READY=1\n            fi\n            USB_PASSTHROUGH=\"${USB_PASSTHROUGH} -device usb-host,bus=hostpass.0,vendorid=0x${VENDOR_ID},productid=0x${PRODUCT_ID}\"\n        done\n\n        if [ \"${USB_NOT_READY}\" -eq 1 ]; then\n            echo \"               ERROR! USB permission changes are required üëÜ\"\n            exit 1\n        fi\n    fi\n}\n\n# get the number of processing units\nfunction get_nproc() {\n    if command -v nproc &>/dev/null; then\n        nproc\n    elif command -v sysctl &>/dev/null; then\n        sysctl -n hw.ncpu\n    else\n        echo \"ERROR! Unable to determine the number of processing units.\"\n        exit 1\n    fi\n}\n\n# macOS and Linux compatible get_cpu_info function\nfunction get_cpu_info() {\n    local INFO_NAME=\"${1}\"\n\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        if [ \"^Model name:\" == \"${INFO_NAME}\" ]; then\n            sysctl -n machdep.cpu.brand_string\n        elif [ \"Socket\" == \"${INFO_NAME}\" ]; then\n            sysctl -n hw.packages\n        elif [ \"Vendor\" == \"${INFO_NAME}\" ]; then\n            if [ \"${ARCH_HOST}\" == \"arm64\" ]; then\n                sysctl -n machdep.cpu.brand_string | cut -d' ' -f1\n            else\n                sysctl -n machdep.cpu.vendor | sed 's/ //g'\n            fi\n        else\n            echo \"ERROR! Could not find macOS translation for ${INFO_NAME}\"\n            exit 1\n        fi\n    else\n        if [ \"^Model name:\" == \"${INFO_NAME}\" ]; then\n            for MODEL_NAME in $(IFS=$'\\n' lscpu | grep \"${INFO_NAME}\" | cut -d':' -f2 | sed -e 's/^[[:space:]]*//'); do\n                echo -n \"${MODEL_NAME} \"\n            done\n        else\n            lscpu | grep -E \"${INFO_NAME}\" | cut -d':' -f2 | sed 's/ //g' | sort -u\n        fi\n    fi\n}\n\n# returns an enabled or disable CPU flag for QEMU, based on the host CPU\n# capabilities, or nothing if the flag is not supported\n# converts the flags appropriately from macOS and Linux to QEMU\nfunction configure_cpu_flag() {\n    local HOST_CPU_FLAG=\"${1}\"\n    # Convert the flag to lowercase for QEMU\n    local QEMU_CPU_FLAG=${HOST_CPU_FLAG,,}\n    if check_cpu_flag \"${HOST_CPU_FLAG}\"; then\n        # Replace _ with - to make it compatible with QEMU\n        QEMU_CPU_FLAG=\"${HOST_CPU_FLAG//_/-}\"\n        QEMU_CPU_FLAG=\"${QEMU_CPU_FLAG//4_/4\\.}\"\n        # macOS uses different flag names\n        if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n            case \"${HOST_CPU_FLAG}\" in\n                avx) QEMU_CPU_FLAG=\"AVX1.0\";;\n            esac\n        fi\n        echo \",+${QEMU_CPU_FLAG}\"\n    else\n        # Fully disable any QEMU flags that are not supported by the host CPU\n        if [ \"${HOST_CPU_VENDOR}\" == \"AuthenticAMD\" ]; then\n            case ${HOST_CPU_FLAG} in\n                pcid) echo \",-${QEMU_CPU_FLAG}\";;\n            esac\n        fi\n    fi\n}\n\n# checks if a CPU flag is supported by the host CPU on Linux and macOS\nfunction check_cpu_flag() {\n    local HOST_CPU_FLAG=\"\"\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        # Make the macOS compatible: uppercase, replace _ with . and replace X2APIC with x2APIC\n        HOST_CPU_FLAG=\"${1^^}\"\n        HOST_CPU_FLAG=\"${HOST_CPU_FLAG//_/.}\"\n        HOST_CPU_FLAG=\"${HOST_CPU_FLAG//X2APIC/x2APIC}\"\n        if [ \"${HOST_CPU_FLAG}\" == \"AVX\" ]; then\n            HOST_CPU_FLAG=\"AVX1.0\"\n        fi\n        if sysctl -n machdep.cpu.features | grep -o \"${HOST_CPU_FLAG}\" > /dev/null; then\n            return 0\n        else\n            return 1\n        fi\n    else\n      HOST_CPU_FLAG=\"${1}\"\n      if lscpu | grep -o \"^Flags\\b.*: .*\\b${HOST_CPU_FLAG}\\b\" > /dev/null; then\n          return 0\n      else\n          return 1\n      fi\n    fi\n}\n\nfunction efi_vars() {\n    local VARS_IN=\"\"\n    local VARS_OUT=\"\"\n    VARS_IN=\"${1}\"\n    VARS_OUT=\"${2}\"\n\n    if [ ! -e \"${VARS_OUT}\" ]; then\n        if [ -e \"${VARS_IN}\" ]; then\n            cp \"${VARS_IN}\" \"${VARS_OUT}\"\n        else\n            echo \"ERROR! ${VARS_IN} was not found. Please install edk2.\"\n            exit 1\n        fi\n    fi\n}\n\nfunction configure_cpu() {\n    HOST_CPU_CORES=$(get_nproc)\n    HOST_CPU_MODEL=$(get_cpu_info '^Model name:')\n    HOST_CPU_SOCKETS=$(get_cpu_info 'Socket')\n    HOST_CPU_VENDOR=$(get_cpu_info 'Vendor')\n\n    if [ \"${HOST_CPU_SOCKETS}\" = \"-\" ]; then\n        HOST_CPU_SOCKETS=1\n    fi\n\n    CPU_MODEL=\"host\"\n    QEMU_ACCEL=\"tcg\"\n    # Configure appropriately for the host platform\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        MANUFACTURER=$(ioreg -l | grep -e Manufacturer | grep -v iMan | cut -d'\"' -f4 | sort -u)\n        CPU_KVM_UNHALT=\"\"\n        QEMU_ACCEL=\"hvf\"\n        # QEMU for macOS from Homebrew does not support SMM\n        SMM=\"off\"\n    else\n        if [ -r /sys/class/dmi/id/sys_vendor ]; then\n            MANUFACTURER=$(head -n 1 /sys/class/dmi/id/sys_vendor)\n        fi\n        CPU_KVM_UNHALT=\",kvm_pv_unhalt\"\n        GUEST_TWEAKS+=\" -global kvm-pit.lost_tick_policy=discard\"\n        QEMU_ACCEL=\"kvm\"\n    fi\n\n    if [ \"${ARCH_VM}\" == \"aarch64\"  ]; then\n        # Support to run aarch64 VMs (best guess; untested)\n        # https://qemu-project.gitlab.io/qemu/system/arm/virt.html\n        case ${ARCH_HOST} in\n            arm64|aarch64) CPU_MODEL=\"max\"\n                           MACHINE_TYPE=\"virt,highmem=off\";;\n        esac\n    elif [ \"${ARCH_VM}\" != \"${ARCH_HOST}\" ]; then\n        # If the architecture of the VM is different from the host, disable acceleration\n        CPU_MODEL=\"qemu64\"\n        CPU_KVM_UNHALT=\"\"\n        QEMU_ACCEL=\"tcg\"\n    fi\n\n    # TODO: More robust detection of running in a VM\n    # - macOS check for CPU flag: vmx\n    # - Linux AMD check for CPU flag: svm\n    # - Linux Intel check for CPU flag: vmx\n    case ${MANUFACTURER,,} in\n        qemu|virtualbox) CPU_MODEL=\"qemu64\"\n                         QEMU_ACCEL=\"tcg\"\n                         HYPERVISOR=\"${MANUFACTURER,,}\";;\n        *) HYPERVISOR=\"\";;\n    esac\n\n    if [ -z \"${HYPERVISOR}\" ]; then\n        # A CPU with Intel VT-x / AMD SVM support is required\n        if [ \"${HOST_CPU_VENDOR}\" == \"GenuineIntel\" ]; then\n            if ! check_cpu_flag vmx; then\n                echo \"ERROR! Intel VT-x support is required.\"\n                exit 1\n            fi\n        elif [ \"${HOST_CPU_VENDOR}\" == \"AuthenticAMD\" ]; then\n            if ! check_cpu_flag svm; then\n                echo \"ERROR! AMD SVM support is required.\"\n                exit 1\n            fi\n        fi\n    fi\n\n    CPU=\"-cpu ${CPU_MODEL}\"\n\n    # Make any OS specific adjustments\n    if [ \"${guest_os}\" == \"freedos\" ] || [ \"${guest_os}\" == \"windows\" ] || [ \"${guest_os}\" == \"windows-server\" ]; then\n        # SMM is not available on QEMU for macOS via Homebrew\n        if [ \"${OS_KERNEL}\" == \"Linux\" ]; then\n            SMM=\"on\"\n        fi\n    fi\n\n    case ${guest_os} in\n        batocera|freedos|haiku|solaris) MACHINE_TYPE=\"pc\";;\n        kolibrios|reactos)\n            CPU=\"-cpu qemu32\"\n            MACHINE_TYPE=\"pc\";;\n        macos)\n            # If the host has an Intel CPU, passes the host CPU model features, model, stepping, exactly to the guest.\n            # Disable huge pages (,-pdpe1gb) on macOS to prevent crashes\n            # - https://stackoverflow.com/questions/60231203/qemu-qcow2-mmu-gva-to-gpa-crash-in-mac-os-x\n            if [ \"${HOST_CPU_VENDOR}\" == \"GenuineIntel\" ] && [ -z \"${HYPERVISOR}\" ]; then\n                CPU_MODEL=\"host\"\n                CPU=\"-cpu ${CPU_MODEL},-pdpe1gb,+hypervisor\"\n            else\n                CPU_MODEL=\"Haswell-v2\"\n                CPU=\"-cpu ${CPU_MODEL},vendor=GenuineIntel,-pdpe1gb,+avx,+sse,+sse2,+ssse3,vmware-cpuid-freq=on\"\n            fi\n            # A CPU with fma is required for Metal support\n            # A CPU with invtsc is required for macOS to boot\n            case ${macos_release} in\n                ventura|sonoma)\n                    # A CPU with AVX2 support is required for >= macOS Ventura\n                    if check_cpu_flag sse4_2 && check_cpu_flag avx2; then\n                        if [ \"${HOST_CPU_VENDOR}\" != \"GenuineIntel\" ] && [ -z \"${HYPERVISOR}\" ]; then\n                            CPU+=\",+avx2,+sse4.2\"\n                        fi\n                    else\n                        echo \"ERROR! macOS ${macos_release} requires a CPU with SSE 4.2 and AVX2 support.\"\n                        echo \"       Try macOS Monterey or Big Sur.\"\n                        exit 1\n                    fi;;\n                catalina|big-sur|monterey)\n                    # A CPU with SSE4.2 support is required for >= macOS Catalina\n                    if check_cpu_flag sse4_2; then\n                        if [ \"${HOST_CPU_VENDOR}\" != \"GenuineIntel\" ] && [ -z \"${HYPERVISOR}\" ]; then\n                            CPU+=\",+sse4.2\"\n                        fi\n                    else\n                        echo \"ERROR! macOS ${macos_release} requires a CPU with SSE 4.2 support.\"\n                        exit 1\n                    fi;;\n                *)\n                    # A CPU with SSE4.1 support is required for >= macOS Sierra\n                    if check_cpu_flag sse4_1; then\n                        if [ \"${HOST_CPU_VENDOR}\" != \"GenuineIntel\" ] && [ -z \"${HYPERVISOR}\" ]; then\n                            CPU+=\",+sse4.1\"\n                        fi\n                    else\n                        echo \"ERROR! macOS ${macos_release} requires a CPU with SSE 4.1 support.\"\n                        exit 1\n                    fi;;\n            esac\n\n            if [ \"${HOST_CPU_VENDOR}\" != \"GenuineIntel\" ] && [ -z \"${HYPERVISOR}\" ]; then\n                for FLAG in abm adx aes amd-ssbd apic arat bmi1 bmi2 clflush cmov cx8 cx16 de \\\n                            eist erms f16c fma fp87 fsgsbase fxsr invpcid invtsc lahf_lm lm \\\n                            mca mce mmx movbe mpx msr mtrr nx pae pat pcid pge pse popcnt pse36 \\\n                            rdrand rdtscp sep smep syscall tsc tsc_adjust vaes vbmi2 vmx vpclmulqdq \\\n                            x2apic xgetbv1 xsave xsaveopt; do\n                    CPU+=$(configure_cpu_flag \"${FLAG}\")\n                done\n            fi\n\n            # Disable S3 support in the VM to prevent macOS suspending during install\n            GUEST_TWEAKS+=\" -global ICH9-LPC.disable_s3=1 -device isa-applesmc,osk=$(echo \"bheuneqjbexolgurfrjbeqfthneqrqcyrnfrqbagfgrny(p)NccyrPbzchgreVap\" | tr 'A-Za-z' 'N-ZA-Mn-za-m')\"\n\n            # Disable High Precision Timer\n            if [ \"${QEMU_VER_SHORT}\" -ge 70 ]; then\n                MACHINE_TYPE+=\",hpet=off\"\n            else\n                GUEST_TWEAKS+=\" -no-hpet\"\n            fi\n            ;;\n        windows|windows-server)\n            if [ \"${QEMU_VER_SHORT}\" -gt 60 ]; then\n                CPU=\"-cpu ${CPU_MODEL},+hypervisor,+invtsc,l3-cache=on,migratable=no,hv_passthrough\"\n            else\n                CPU=\"-cpu ${CPU_MODEL},+hypervisor,+invtsc,l3-cache=on,migratable=no,hv_frequencies${CPU_KVM_UNHALT},hv_reenlightenment,hv_relaxed,hv_spinlocks=8191,hv_stimer,hv_synic,hv_time,hv_vapic,hv_vendor_id=1234567890ab,hv_vpindex\"\n            fi\n            # Disable S3 support in the VM to ensure Windows can boot with SecureBoot enabled\n            #  - https://wiki.archlinux.org/title/QEMU#VM_does_not_boot_when_using_a_Secure_Boot_enabled_OVMF\n            GUEST_TWEAKS+=\" -global ICH9-LPC.disable_s3=1\"\n\n            # Disable High Precision Timer\n            if [ \"${QEMU_VER_SHORT}\" -ge 70 ]; then\n              MACHINE_TYPE+=\",hpet=off\"\n            else\n              GUEST_TWEAKS+=\" -no-hpet\"\n            fi\n            ;;\n    esac\n\n    if [ \"${HOST_CPU_VENDOR}\" == \"AuthenticAMD\" ] && [ \"${guest_os}\" != \"macos\" ]; then\n        CPU+=\",topoext\"\n    fi\n\n    if [ -z \"${cpu_cores}\" ]; then\n        if [ \"${HOST_CPU_CORES}\" -ge 32 ]; then\n            GUEST_CPU_CORES=\"16\"\n        elif [ \"${HOST_CPU_CORES}\" -ge 16 ]; then\n            GUEST_CPU_CORES=\"8\"\n        elif [ \"${HOST_CPU_CORES}\" -ge 8 ]; then\n            GUEST_CPU_CORES=\"4\"\n        elif [ \"${HOST_CPU_CORES}\" -ge 4 ]; then\n            GUEST_CPU_CORES=\"2\"\n        else\n            GUEST_CPU_CORES=\"1\"\n        fi\n    else\n        GUEST_CPU_CORES=\"${cpu_cores}\"\n    fi\n\n    # macOS guests cannot boot with most core counts not powers of 2.\n    # Find the nearest but lowest power of 2 using a predefined table\n    if [ \"${guest_os}\" == \"macos\" ]; then\n        local POWERS=(1 2 4 8 16 32 64 128 256 512 1024)\n        for (( i=${#POWERS[@]}-1; i>=0; i-- )); do\n            if [ \"${POWERS[i]}\" -le \"${GUEST_CPU_CORES}\" ]; then\n                GUEST_CPU_CORES=\"${POWERS[i]}\"\n                break\n            fi\n        done\n    fi\n\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        # Get the number of physical cores\n        physicalcpu=$(sysctl -n hw.physicalcpu)\n        # Get the number of logical processors\n        logicalcpu=$(sysctl -n hw.logicalcpu)\n        # Check if Hyper-Threading is enabled\n        if [ \"${logicalcpu}\" -gt \"${physicalcpu}\" ]; then\n            HOST_CPU_SMT=\"on\"\n        else\n            HOST_CPU_SMT=\"off\"\n        fi\n    elif [ -e /sys/devices/system/cpu/smt/control ]; then\n        HOST_CPU_SMT=$(cat /sys/devices/system/cpu/smt/control)\n    fi\n\n    # Account for Hyperthreading/SMT.\n    if [ \"${GUEST_CPU_CORES}\" -ge 2 ]; then\n        case ${HOST_CPU_SMT} in\n            on) GUEST_CPU_THREADS=2\n                GUEST_CPU_LOGICAL_CORES=$(( GUEST_CPU_CORES / GUEST_CPU_THREADS ));;\n            *)  GUEST_CPU_THREADS=1\n                GUEST_CPU_LOGICAL_CORES=${GUEST_CPU_CORES};;\n        esac\n    else\n        GUEST_CPU_THREADS=1\n        GUEST_CPU_LOGICAL_CORES=${GUEST_CPU_CORES}\n    fi\n\n    SMP=\"-smp cores=${GUEST_CPU_LOGICAL_CORES},threads=${GUEST_CPU_THREADS},sockets=${HOST_CPU_SOCKETS}\"\n    echo \" - CPU:      ${HOST_CPU_MODEL}\"\n    echo \" - CPU VM:   ${CPU_MODEL%%,*}, ${HOST_CPU_SOCKETS} Socket(s), ${GUEST_CPU_LOGICAL_CORES} Core(s), ${GUEST_CPU_THREADS} Thread(s)\"\n\n    if [ \"${guest_os}\" == \"macos\" ] || [ \"${guest_os}\" == \"windows\" ] || [ \"${guest_os}\" == \"windows-server\" ]; then\n        # Display MSRs alert if the guest is macOS or windows\n        ignore_msrs_alert\n    fi\n}\n\nfunction configure_ram() {\n    local OS_PRETTY_NAME=\"\"\n    RAM_VM=\"2G\"\n    if [ -z \"${ram}\" ]; then\n        local RAM_HOST=\"\"\n        if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n            RAM_HOST=$(($(sysctl -n hw.memsize) / (1048576*1024)))\n        else\n            # Determine the number of gigabytes of RAM in the host by extracting the first numerical value from the output.\n            RAM_HOST=$(free --giga | tr ' ' '\\n' | grep -m 1 \"[0-9]\" )\n        fi\n\n        if [ \"${RAM_HOST}\" -ge 128 ]; then\n            RAM_VM=\"32G\"\n        elif [ \"${RAM_HOST}\" -ge 64 ]; then\n            RAM_VM=\"16G\"\n        elif [ \"${RAM_HOST}\" -ge 16 ]; then\n            RAM_VM=\"8G\"\n        elif [ \"${RAM_HOST}\" -ge 8 ]; then\n            RAM_VM=\"4G\"\n        fi\n    else\n        RAM_VM=\"${ram}\"\n    fi\n    echo \" - RAM VM:   ${RAM_VM} RAM\"\n\n    case \"${guest_os}\" in\n        windows|windows-server)\n            OS_PRETTY_NAME=\"Windows\"\n            min_ram=\"4\"\n            ;;\n        macos)\n            OS_PRETTY_NAME=\"macOS\"\n            min_ram=\"8\"\n            ;;\n    esac\n\n    if [ -n \"${min_ram}\" ] && [ \"${RAM_VM//G/}\" -lt \"${min_ram}\" ]; then\n        if [ -z \"${ram}\" ]; then\n            echo \"             ERROR! The guest virtual machine has been allocated insufficient RAM to run ${OS_PRETTY_NAME}.\"\n            echo \"             You can override the guest RAM allocation by adding 'ram=${min_ram}G' to ${VM}\"\n            exit 1\n        else\n            echo \"             WARNING! You have allocated less than the recommended amount of RAM to run ${OS_PRETTY_NAME}.\"\n        fi\n    fi\n}\n\nfunction configure_bios() {\n    # Always Boot macOS using EFI\n    if [ \"${guest_os}\" == \"macos\" ]; then\n        boot=\"efi\"\n        if [ -e \"${VMDIR}/OVMF_CODE.fd\" ] && [ -e \"${VMDIR}/OVMF_VARS-1024x768.fd\" ]; then\n            EFI_CODE=\"${VMDIR}/OVMF_CODE.fd\"\n            EFI_VARS=\"${VMDIR}/OVMF_VARS-1024x768.fd\"\n        elif [ -e \"${VMDIR}/OVMF_CODE.fd\" ] && [ -e \"${VMDIR}/OVMF_VARS-1920x1080.fd\" ]; then\n            EFI_CODE=\"${VMDIR}/OVMF_CODE.fd\"\n            EFI_VARS=\"${VMDIR}/OVMF_VARS-1920x1080.fd\"\n        else\n            MAC_MISSING=\"Firmware\"\n        fi\n\n        if [ -e \"${VMDIR}/OpenCore.qcow2\" ]; then\n            MAC_BOOTLOADER=\"${VMDIR}/OpenCore.qcow2\"\n        elif [ -e \"${VMDIR}/ESP.qcow2\" ]; then\n            # Backwards compatibility for Clover\n            MAC_BOOTLOADER=\"${VMDIR}/ESP.qcow2\"\n        else\n            MAC_MISSING=\"Bootloader\"\n        fi\n\n        if [ -n \"${MAC_MISSING}\" ]; then\n            echo \"ERROR! macOS ${MAC_MISSING} was not found.\"\n            echo \"       Use 'quickget' to download the required files.\"\n            exit 1\n        fi\n        BOOT_STATUS=\"EFI (macOS), OVMF ($(basename \"${EFI_CODE}\")), SecureBoot (${secureboot}).\"\n    elif [[ \"${boot}\" == *\"efi\"* ]]; then\n        EFI_VARS=\"${VMDIR}/OVMF_VARS.fd\"\n\n        # Preserve backward compatibility\n        if [ -e \"${VMDIR}/${VMNAME}-vars.fd\" ]; then\n            mv \"${VMDIR}/${VMNAME}-vars.fd\" \"${EFI_VARS}\"\n        elif [ -e \"${VMDIR}/OVMF_VARS_4M.fd\" ]; then\n            mv \"${VMDIR}/OVMF_VARS_4M.fd\" \"${EFI_VARS}\"\n        fi\n\n        # OVMF_CODE_4M.fd is for booting guests in non-Secure Boot mode.\n        # While this image technically supports Secure Boot, it does so\n        # without requiring SMM support from QEMU\n\n        # OVMF_CODE.secboot.fd is like OVMF_CODE_4M.fd, but will abort if QEMU\n        # does not support SMM.\n\n        local SHARE_PATH=\"/usr/share\"\n        if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n            # Do not assume brew; quickemu could have been installed via Nix\n            if command -v brew &>/dev/null; then\n                SHARE_PATH=\"$(brew --prefix qemu)/share\"\n            fi\n        fi\n\n        # https://bugzilla.redhat.com/show_bug.cgi?id=1929357#c5\n        # TODO: Check if macOS should use 'edk2-i386-vars.fd'\n        if [ -n \"${EFI_CODE}\" ] || [ ! -e \"${EFI_CODE}\" ]; then\n            case ${secureboot} in\n                on) # shellcheck disable=SC2054,SC2140\n                    ovmfs=(\"${SHARE_PATH}/OVMF/OVMF_CODE_4M.secboot.fd\",\"${SHARE_PATH}/OVMF/OVMF_VARS_4M.fd\" \\\n                        \"${SHARE_PATH}/edk2/ovmf/OVMF_CODE.secboot.fd\",\"${SHARE_PATH}/edk2/ovmf/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/OVMF/x64/OVMF_CODE.secboot.fd\",\"${SHARE_PATH}/OVMF/x64/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/edk2-ovmf/OVMF_CODE.secboot.fd\",\"${SHARE_PATH}/edk2-ovmf/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/qemu/ovmf-x86_64-smm-ms-code.bin\",\"${SHARE_PATH}/qemu/ovmf-x86_64-smm-ms-vars.bin\" \\\n                        \"${SHARE_PATH}/qemu/edk2-x86_64-secure-code.fd\",\"${SHARE_PATH}/qemu/edk2-x86_64-code.fd\" \\\n                        \"${SHARE_PATH}/edk2-ovmf/x64/OVMF_CODE.secboot.fd\",\"${SHARE_PATH}/edk2-ovmf/x64/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/edk2/x64/OVMF_CODE.secboot.4m.fd\",\"${SHARE_PATH}/edk2/x64/OVMF_VARS.4m.fd\"\n                    );;\n                *)  # shellcheck disable=SC2054,SC2140\n                    ovmfs=(\"${SHARE_PATH}/OVMF/OVMF_CODE_4M.fd\",\"${SHARE_PATH}/OVMF/OVMF_VARS_4M.fd\" \\\n                        \"${SHARE_PATH}/edk2/ovmf/OVMF_CODE.fd\",\"${SHARE_PATH}/edk2/ovmf/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/OVMF/OVMF_CODE.fd\",\"${SHARE_PATH}/OVMF/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/OVMF/x64/OVMF_CODE.fd\",\"${SHARE_PATH}/OVMF/x64/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/edk2-ovmf/OVMF_CODE.fd\",\"${SHARE_PATH}/edk2-ovmf/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/qemu/ovmf-x86_64-4m-code.bin\",\"${SHARE_PATH}/qemu/ovmf-x86_64-4m-vars.bin\" \\\n                        \"${SHARE_PATH}/qemu/edk2-x86_64-code.fd\",\"${SHARE_PATH}/qemu/edk2-x86_64-code.fd\" \\\n                        \"${SHARE_PATH}/edk2-ovmf/x64/OVMF_CODE.fd\",\"${SHARE_PATH}/edk2-ovmf/x64/OVMF_VARS.fd\" \\\n                        \"${SHARE_PATH}/edk2/x64/OVMF_CODE.4m.fd\",\"${SHARE_PATH}/edk2/x64/OVMF_VARS.4m.fd\"\n                    );;\n            esac\n            # Attempt each EFI_CODE file one by one, selecting the corresponding code and vars\n            # when an existing file is found.\n            _IFS=$IFS\n            IFS=\",\"\n            for f in \"${ovmfs[@]}\"; do\n                # shellcheck disable=SC2086\n                set -- ${f};\n                if [ -e \"${1}\" ]; then\n                    EFI_CODE=\"${1}\"\n                    EFI_EXTRA_VARS=\"${2}\"\n                fi\n            done\n            IFS=$_IFS\n        fi\n        if [ -z \"${EFI_CODE}\" ] || [ ! -e \"${EFI_CODE}\" ]; then\n            if [ \"${secureboot}\" == \"on\" ]; then\n                echo \"ERROR! SecureBoot was requested but no SecureBoot capable firmware was found.\"\n            else\n                echo \"ERROR! EFI boot requested but no EFI firmware found.\"\n            fi\n            echo \"       Please install OVMF firmware.\"\n            exit 1\n        fi\n        if [ -n \"${EFI_EXTRA_VARS}\" ]; then\n            if [ ! -e \"${EFI_EXTRA_VARS}\" ]; then\n                echo \" - EFI:      ERROR! EFI_EXTRA_VARS file ${EFI_EXTRA_VARS} does not exist.\"\n                exit 1\n            fi\n            efi_vars \"${EFI_EXTRA_VARS}\" \"${EFI_VARS}\"\n        fi\n\n        # Make sure EFI_VARS references an actual, writeable, file\n        if [ ! -f \"${EFI_VARS}\" ] || [ ! -w \"${EFI_VARS}\" ]; then\n            echo \" - EFI:      ERROR! ${EFI_VARS} is not a regular file or not writeable.\"\n            echo \"             Deleting ${EFI_VARS}. Please re-run quickemu.\"\n            rm -f \"${EFI_VARS}\"\n            exit 1\n        fi\n\n        # If EFI_CODE references a symlink, resolve it to the real file.\n        if [ -L \"${EFI_CODE}\" ]; then\n            echo \" - EFI:      WARNING! ${EFI_CODE} is a symlink.\"\n            echo -n \"             Resolving to... \"\n            EFI_CODE=$(realpath \"${EFI_CODE}\")\n            echo \"${EFI_CODE}\"\n        fi\n        BOOT_STATUS=\"EFI (${guest_os^}), OVMF (${EFI_CODE}), SecureBoot (${secureboot}).\"\n    else\n        BOOT_STATUS=\"Legacy BIOS (${guest_os^})\"\n        boot=\"legacy\"\n        secureboot=\"off\"\n    fi\n\n    echo \" - BOOT:     ${BOOT_STATUS}\"\n}\n\nfunction configure_os_quirks() {\n\n    if [ \"${guest_os}\" == \"batocera\" ] || [ \"${guest_os}\" == \"freedos\" ] || [ \"${guest_os}\" == \"haiku\" ] || [ \"${guest_os}\" == \"kolibrios\" ]; then\n        NET_DEVICE=\"rtl8139\"\n    fi\n\n    if [ \"${guest_os}\" == \"freebsd\" ] || [ \"${guest_os}\" == \"ghostbsd\" ]; then\n        mouse=\"usb\"\n    fi\n\n    case ${guest_os} in\n        windows-server) NET_DEVICE=\"e1000\";;\n        *bsd|linux*|windows) NET_DEVICE=\"virtio-net\";;\n        freedos) sound_card=\"sb16\";;\n        *solaris) usb_controller=\"xhci\"\n                  sound_card=\"ac97\";;\n        reactos) NET_DEVICE=\"e1000\"\n                 keyboard=\"ps2\";;\n        macos)\n            # Tune QEMU optimisations based on the macOS release, or fallback to lowest\n            # common supported options if none is specified.\n            #   * VirtIO Block Media doesn't work in High Sierra (at all) or the Mojave (Recovery Image)\n            #   * VirtIO Network is supported since Big Sur\n            #   * VirtIO Memory Balloning is supported since Big Sur (https://pmhahn.github.io/virtio-balloon/)\n            #   * VirtIO RNG is supported since Big Sur, but exposed to all guests by default.\n            case ${macos_release} in\n                big-sur|monterey|ventura|sonoma)\n                    BALLOON=\"-device virtio-balloon\"\n                    MAC_DISK_DEV=\"virtio-blk-pci\"\n                    NET_DEVICE=\"virtio-net\"\n                    USB_HOST_PASSTHROUGH_CONTROLLER=\"nec-usb-xhci\"\n                    GUEST_TWEAKS+=\" -global nec-usb-xhci.msi=off\"\n                    sound_card=\"${sound_card:-usb-audio}\"\n                    usb_controller=\"xhci\";;\n                *)\n                    # Backwards compatibility if no macos_release is specified.\n                    # Also safe catch all for High Sierra and Mojave\n                    BALLOON=\"\"\n                    if [ \"${macos_release}\" == \"catalina\" ]; then\n                        MAC_DISK_DEV=\"virtio-blk-pci\"\n                    else\n                        MAC_DISK_DEV=\"ide-hd,bus=ahci.2\"\n                    fi\n                    NET_DEVICE=\"vmxnet3\"\n                    USB_HOST_PASSTHROUGH_CONTROLLER=\"usb-ehci\";;\n            esac\n            ;;\n        *) NET_DEVICE=\"rtl8139\";;\n    esac\n}\n\nfunction configure_storage() {\n    local create_options=\"\"\n    echo \" - Disk:     ${disk_img} (${disk_size})\"\n    if [ ! -f \"${disk_img}\" ]; then\n        # If there is no disk image, create a new image.\n        mkdir -p \"${VMDIR}\" 2>/dev/null\n        case ${preallocation} in\n            off|metadata|falloc|full) true;;\n            *) echo \"ERROR! ${preallocation} is an unsupported disk preallocation option.\"\n               exit 1;;\n        esac\n\n        case ${disk_format} in\n            qcow2) create_options=\"lazy_refcounts=on,preallocation=${preallocation},nocow=on\";;\n            raw) create_options=\"preallocation=${preallocation}\";;\n            *) true;;\n        esac\n\n        # https://blog.programster.org/qcow2-performance\n        if ! ${QEMU_IMG} create -q -f \"${disk_format}\" -o \"${create_options=}\" \"${disk_img}\" \"${disk_size}\"; then\n            echo \"ERROR! Failed to create ${disk_img} using ${disk_format} format.\"\n            exit 1\n        fi\n\n        if [ -z \"${iso}\" ] && [ -z \"${img}\" ]; then\n            echo \"ERROR! You haven't specified a .iso or .img image to boot from.\"\n            exit 1\n        fi\n        echo \"             Just created, booting from ${iso}${img}\"\n        DISK_USED=\"no\"\n    elif [ -e \"${disk_img}\" ]; then\n        # If the VM is not running, check for disk related issues.\n        if [ -z \"${VM_PID}\" ]; then\n            # Check there isn't already a process attached to the disk image.\n            if ! ${QEMU_IMG} info \"${disk_img}\" >/dev/null; then\n                echo \"             Failed to get \\\"write\\\" lock. Is another process using the disk?\"\n                exit 1\n            fi\n        else\n            if ! ${QEMU_IMG} check -q \"${disk_img}\"; then\n                echo \"             Disk integrity check failed. Please run qemu-img check --help.\"\n                echo\n                \"${QEMU_IMG}\" check \"${disk_img}\"\n                exit 1\n            fi\n        fi\n\n        # Only check disk image size if preallocation is off\n        if [ \"${preallocation}\" == \"off\" ]; then\n            DISK_CURR_SIZE=$(${STAT} -c%s \"${disk_img}\")\n            if [ \"${DISK_CURR_SIZE}\" -le \"${DISK_MIN_SIZE}\" ]; then\n                echo \"             Looks unused, booting from ${iso}${img}\"\n                if [ -z \"${iso}\" ] && [ -z \"${img}\" ]; then\n                    echo \"ERROR! You haven't specified a .iso or .img image to boot from.\"\n                    exit 1\n                fi\n            else\n                DISK_USED=\"yes\"\n            fi\n        else\n            DISK_USED=\"yes\"\n        fi\n    fi\n\n    if [ \"${DISK_USED}\" == \"yes\" ] && [ \"${guest_os}\" != \"kolibrios\" ]; then\n        # If there is a disk image that appears to be used do not boot from installation media.\n        iso=\"\"\n        img=\"\"\n    fi\n\n    # Has the status quo been requested?\n    if [ \"${STATUS_QUO}\" == \"-snapshot\" ]; then\n        if [ -z \"${img}\" ] && [ -z \"${iso}\" ]; then\n            echo \"             Existing disk state will be preserved, no writes will be committed.\"\n        fi\n    fi\n\n    if [ -n \"${iso}\" ] && [ -e \"${iso}\" ]; then\n        echo \" - Boot ISO: ${iso}\"\n    elif [ -n \"${img}\" ] && [ -e \"${img}\" ]; then\n        echo \" - Recovery: ${img}\"\n    fi\n\n    if [ -n \"${fixed_iso}\" ] && [ -e \"${fixed_iso}\" ]; then\n        echo \" - CD-ROM:   ${fixed_iso}\"\n    fi\n}\n\nfunction configure_display() {\n    # Determine which audio driver use between Pulseaudio or ALSA\n    local AUDIO_DRIVER=\"pa\"\n    if ! command -v pacmd >/dev/null 2>&1 ; then\n        AUDIO_DRIVER=\"alsa\"\n    fi\n\n    # Setup the appropriate audio device based on the display output\n    # https://www.kraxel.org/blog/2020/01/qemu-sound-audiodev/\n    case ${display} in\n        cocoa) AUDIO_DEV=\"coreaudio,id=audio0\";;\n        none|spice|spice-app) AUDIO_DEV=\"spice,id=audio0\";;\n        *) AUDIO_DEV=\"${AUDIO_DRIVER},id=audio0\";;\n    esac\n\n    # Determine a sane resolution for Linux guests.\n    local X_RES=\"1280\"\n    local Y_RES=\"800\"\n    if [ -n \"${width}\" ] && [ -n \"${height}\" ]; then\n        local X_RES=\"${width}\"\n        local Y_RES=\"${height}\"\n    fi\n\n    # https://www.kraxel.org/blog/2019/09/display-devices-in-qemu/\n    case ${guest_os} in\n        *bsd) DISPLAY_DEVICE=\"VGA\";;\n        linux_old|solaris) DISPLAY_DEVICE=\"vmware-svga\";;\n        linux)\n            case ${display} in\n                none|spice|spice-app) DISPLAY_DEVICE=\"virtio-gpu\";;\n                *) DISPLAY_DEVICE=\"virtio-vga\";;\n            esac;;\n        macos)\n            # qxl-vga and VGA supports seamless mouse and sane resolutions if only\n            # one scanout is used. '-vga none' is added to the QEMU command line\n            # to avoid having two scanouts.\n            DISPLAY_DEVICE=\"VGA\";;\n        windows|windows-server)\n            # virtio-gpu \"works\" with gtk but is limited to 1024x1024 and exhibits other issues\n            # https://kevinlocke.name/bits/2021/12/10/windows-11-guest-virtio-libvirt/#video\n            case ${display} in\n                gtk|none|spice) DISPLAY_DEVICE=\"qxl-vga\";;\n                cocoa|sdl|spice-app)  DISPLAY_DEVICE=\"virtio-vga\";;\n            esac;;\n        *) DISPLAY_DEVICE=\"qxl-vga\";;\n    esac\n\n    # Map Quickemu $display to QEMU -display\n    case ${display} in\n        gtk)        DISPLAY_RENDER=\"${display},grab-on-hover=on,zoom-to-fit=off,gl=${gl}\";;\n        none|spice) DISPLAY_RENDER=\"none\";;\n        sdl)        DISPLAY_RENDER=\"${display},gl=${gl}\";;\n        spice-app)  DISPLAY_RENDER=\"${display},gl=${gl}\";;\n        *)          DISPLAY_RENDER=\"${display}\";;\n    esac\n\n    # https://www.kraxel.org/blog/2021/05/virtio-gpu-qemu-graphics-update/\n    if [ \"${gl}\" == \"on\" ] && [ \"${DISPLAY_DEVICE}\" == \"virtio-vga\" ]; then\n        if [ \"${QEMU_VER_SHORT}\" -ge 61 ]; then\n            DISPLAY_DEVICE=\"${DISPLAY_DEVICE}-gl\"\n        else\n            DISPLAY_DEVICE=\"${DISPLAY_DEVICE},virgl=on\"\n        fi\n        echo -n \" - Display:  ${display^^}, ${DISPLAY_DEVICE}, GL (${gl}), VirGL (on)\"\n    else\n        echo -n \" - Display:  ${display^^}, ${DISPLAY_DEVICE}, GL (${gl}), VirGL (off)\"\n    fi\n\n    # Build the video configuration\n    VIDEO=\"-device ${DISPLAY_DEVICE}\"\n\n    # Try and coerce the display resolution for Linux guests only.\n    if [ \"${DISPLAY_DEVICE}\" != \"vmware-svga\" ]; then\n        VIDEO=\"${VIDEO},xres=${X_RES},yres=${Y_RES}\"\n        echo \" @ (${X_RES} x ${Y_RES})\"\n    else\n        echo \" \"\n    fi\n\n    # Allocate VRAM to VGA devices\n    case ${DISPLAY_DEVICE} in\n        bochs-display) VIDEO=\"${VIDEO},vgamem=67108864\";;\n        qxl|qxl-vga) VIDEO=\"${VIDEO},ram_size=65536,vram_size=65536,vgamem_mb=64\";;\n        ati-vga|cirrus-vga|VGA|vmware-svga) VIDEO=\"${VIDEO},vgamem_mb=256\";;\n    esac\n\n    # Configure multiscreen if max_outputs was provided in the .conf file\n    if [ -n \"${max_outputs}\" ]; then\n        VIDEO=\"${VIDEO},max_outputs=${max_outputs}\"\n    fi\n\n    # Run QEMU with '-vga none' to avoid having two scanouts, one for VGA and\n    # another for virtio-vga-gl. This works around a GTK assertion failure and\n    # allows seamless mouse in macOS when using the qxl-vga device.\n    # https://www.collabora.com/news-and-blog/blog/2021/11/26/venus-on-qemu-enabling-new-virtual-vulkan-driver/\n    # https://github.com/quickemu-project/quickemu/issues/222\n    VGA=\"-vga none\"\n\n    # Add fullscreen options\n    VIDEO=\"${VGA} ${VIDEO} ${FULLSCREEN}\"\n}\n\nfunction configure_audio() {\n    # Build the sound hardware configuration\n    case ${sound_card} in\n        ich9-intel-hda|intel-hda) SOUND=\"-device ${sound_card} -device ${sound_duplex},audiodev=audio0\";;\n        usb-audio) SOUND=\"-device ${sound_card},audiodev=audio0\";;\n        ac97|es1370|sb16) SOUND=\"-device ${sound_card},audiodev=audio0\";;\n        none) SOUND=\"\";;\n    esac\n    echo \" - Sound:    ${sound_card} (${sound_duplex})\"\n}\n\nfunction configure_ports() {\n    echo -n \"\" > \"${VMDIR}/${VMNAME}.ports\"\n\n    if [ -z \"${ssh_port}\" ]; then\n        # Find a free port to expose ssh to the guest\n        ssh_port=$(get_port 22220 9)\n    fi\n\n    if [ -n \"${ssh_port}\" ]; then\n        echo \"ssh,${ssh_port}\" >> \"${VMDIR}/${VMNAME}.ports\"\n        NET=\"${NET},hostfwd=tcp::${ssh_port}-:22\"\n        echo \" - ssh:      On host:  ssh user@localhost -p ${ssh_port}\"\n    else\n        echo \" - ssh:      All ssh ports have been exhausted.\"\n    fi\n\n    # Have any port forwards been requested?\n    if (( ${#port_forwards[@]} )); then\n        echo \" - PORTS:    Port forwards requested:\"\n        for FORWARD in \"${port_forwards[@]}\"; do\n            HOST_PORT=$(echo \"${FORWARD}\" | cut -d':' -f1)\n            GUEST_PORT=$(echo \"${FORWARD}\" | cut -d':' -f2)\n            echo \"              - ${HOST_PORT} => ${GUEST_PORT}\"\n            NET=\"${NET},hostfwd=tcp::${HOST_PORT}-:${GUEST_PORT}\"\n            NET=\"${NET},hostfwd=udp::${HOST_PORT}-:${GUEST_PORT}\"\n        done\n    fi\n\n    if [ \"${display}\" == \"none\" ] || [ \"${display}\" == \"spice\" ] || [ \"${display}\" == \"spice-app\" ]; then\n        SPICE=\"disable-ticketing=on\"\n        # gl=on can be use with 'spice' too, but only over local connections (not tcp ports)\n        if [ \"${display}\" == \"spice-app\" ]; then\n            SPICE+=\",gl=${gl}\"\n        fi\n\n        # TODO: Don't use ports so local-only connections can be used with gl=on\n        if [ -z \"${spice_port}\" ]; then\n            # Find a free port for spice\n            spice_port=$(get_port 5930 9)\n        fi\n\n        # ALLOW REMOTE ACCESS TO SPICE OVER LAN RATHER THAN JUST LOCALHOST\n        if [ -z \"${ACCESS}\" ]; then\n            SPICE_ADDR=\"127.0.0.1\"\n        else\n            if [ \"${ACCESS}\" == \"remote\" ]; then\n                SPICE_ADDR=\"\"\n            elif [ \"${ACCESS}\" == \"local\" ]; then\n                SPICE_ADDR=\"127.0.0.1\"\n            else\n                SPICE_ADDR=\"${ACCESS}\"\n            fi\n        fi\n\n        if [ -z \"${spice_port}\" ]; then\n            echo \" - SPICE:    All SPICE ports have been exhausted.\"\n            if [ \"${display}\" == \"none\" ] || [ \"${display}\" == \"spice\" ] || [ \"${display}\" == \"spice-app\" ]; then\n                echo \"             ERROR! Requested SPICE display, but no SPICE ports are free.\"\n                exit 1\n            fi\n        else\n            if [ \"${display}\" == \"spice-app\" ]; then\n                echo \" - SPICE:    Enabled\"\n            else\n                echo \"spice,${spice_port}\" >> \"${VMDIR}/${VMNAME}.ports\"\n                echo -n \" - SPICE:    On host:  spicy --title \\\"${VMNAME}\\\" --port ${spice_port}\"\n                if [ \"${guest_os}\" != \"macos\" ] && [ -n \"${PUBLIC}\" ]; then\n                    echo -n \" --spice-shared-dir ${PUBLIC}\"\n                fi\n                echo \"${FULLSCREEN}\"\n                SPICE=\"${SPICE},port=${spice_port},addr=${SPICE_ADDR}\"\n            fi\n        fi\n    fi\n}\n\nfunction configure_file_sharing() {\n    if [ -n \"${PUBLIC}\" ]; then\n        # WebDAV\n        case ${guest_os} in\n            macos)\n                if [ \"${display}\" == \"none\" ] || [ \"${display}\" == \"spice\" ] || [ \"${display}\" == \"spice-app\" ]; then\n                    # Reference: https://gitlab.gnome.org/GNOME/phodav/-/issues/5\n                    echo \" - WebDAV:   On guest: build spice-webdavd (https://gitlab.gnome.org/GNOME/phodav/-/merge_requests/24)\"\n                    echo \" - WebDAV:   On guest: Finder -> Connect to Server -> http://localhost:9843/\"\n                fi;;\n            *) echo \" - WebDAV:   On guest: dav://localhost:9843/\";;\n        esac\n\n        # 9P\n        if [ \"${guest_os}\" != \"windows\" ] || [ \"${guest_os}\" == \"windows-server\" ]; then\n            echo -n \" - 9P:       On guest: \"\n            if [ \"${guest_os}\" == \"linux\" ]; then\n                echo \"sudo mount -t 9p -o trans=virtio,version=9p2000.L,msize=104857600 ${PUBLIC_TAG} ~/$(basename \"${PUBLIC}\")\"\n            elif [ \"${guest_os}\" == \"macos\" ]; then\n                # PUBLICSHARE needs to be world writeable for seamless integration with\n                # macOS. Test if it is world writeable, and prompt what to do if not.\n                echo \"sudo mount_9p ${PUBLIC_TAG}\"\n                if [ \"${PUBLIC_PERMS}\" != \"drwxrwxrwx\" ]; then\n                    echo \" - 9P:       On host:  chmod 777 ${PUBLIC}\"\n                    echo \"             Required for macOS integration üëÜ\"\n                fi\n            fi\n        fi\n\n        # SMB\n        # We need to search in NixOS compatible paths as well as the standard location\n        # since /usr/sbin/smbd may not be in the PATH.\n        if [ -x \"$(command -v smbd)\" ] || [ -x \"/usr/sbin/smbd\" ]; then\n            NET+=\",smb=${PUBLIC}\"\n            echo \" - smbd:     On guest: smb://10.0.2.4/qemu\"\n        fi\n    fi\n}\n\nfunction configure_tpm() {\n    # Start TPM\n    if [ \"${tpm}\" == \"on\" ]; then\n        local tpm_args=()\n        # shellcheck disable=SC2054\n        tpm_args+=(socket\n            --ctrl type=unixio,path=\"${VMDIR}/${VMNAME}.swtpm-sock\"\n            --terminate\n            --tpmstate dir=\"${VMDIR}\"\n            --tpm2)\n        echo \"${SWTPM} ${tpm_args[*]} &\" >> \"${VMDIR}/${VMNAME}.sh\"\n        ${SWTPM} \"${tpm_args[@]}\" >> \"${VMDIR}/${VMNAME}.log\" &\n        echo \" - TPM:      ${VMDIR}/${VMNAME}.swtpm-sock (${!})\"\n        sleep 0.25\n    fi\n}\n\nfunction vm_boot() {\n    AUDIO_DEV=\"\"\n    BALLOON=\"-device virtio-balloon\"\n    BOOT_STATUS=\"\"\n    CPU=\"\"\n    DISK_USED=\"\"\n    DISPLAY_DEVICE=\"\"\n    DISPLAY_RENDER=\"\"\n    EFI_CODE=\"\"\n    EFI_VARS=\"\"\n    GUEST_CPU_CORES=\"\"\n    GUEST_CPU_LOGICAL_CORES=\"\"\n    GUEST_CPU_THREADS=\"\"\n    HOST_CPU_CORES=\"\"\n    HOST_CPU_SMT=\"\"\n    HOST_CPU_SOCKETS=\"\"\n    HOST_CPU_VENDOR=\"\"\n    GUEST_TWEAKS=\"\"\n    KERNEL_NAME=\"Unknown\"\n    KERNEL_NODE=\"\"\n    KERNEL_VER=\"?\"\n    OS_RELEASE=\"Unknown OS\"\n    MACHINE_TYPE=\"${MACHINE_TYPE:-q35}\"\n    MAC_BOOTLOADER=\"\"\n    MAC_MISSING=\"\"\n    MAC_DISK_DEV=\"${MAC_DISK_DEV:-ide-hd,bus=ahci.2}\"\n    NET_DEVICE=\"${NET_DEVICE:-virtio-net}\"\n    SOUND=\"\"\n    SPICE=\"\"\n    SMM=\"${SMM:-off}\"\n    local TEMP_PORT=\"\"\n    USB_HOST_PASSTHROUGH_CONTROLLER=\"qemu-xhci\"\n    VGA=\"\"\n    VIDEO=\"\"\n\n    KERNEL_NAME=\"$(uname -s)\"\n    KERNEL_NODE=\"$(uname -n | cut -d'.' -f 1)\"\n    KERNEL_VER=\"$(uname -r)\"\n\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        # Get macOS product name and version using swvers\n        if [ -x \"$(command -v sw_vers)\" ]; then\n            OS_RELEASE=\"$(sw_vers -productName) $(sw_vers -productVersion)\"\n        fi\n    elif [ -e /etc/os-release ]; then\n        OS_RELEASE=$(grep PRETTY_NAME /etc/os-release | cut -d'\"' -f2)\n    fi\n\n    echo \"Quickemu ${VERSION} using ${QEMU} v${QEMU_VER_LONG}\"\n    echo \" - Host:     ${OS_RELEASE} running ${KERNEL_NAME} ${KERNEL_VER} ${KERNEL_NODE}\"\n\n    # Force to lowercase.\n    boot=${boot,,}\n    guest_os=${guest_os,,}\n    args=()\n    # Set the hostname of the VM\n    NET=\"user,hostname=${VMNAME}\"\n\n    configure_cpu\n    configure_ram\n    configure_bios\n    configure_os_quirks\n    configure_storage\n    configure_display\n    configure_audio\n    configure_ports\n    configure_file_sharing\n    configure_usb\n    configure_tpm\n\n    echo \"#!/usr/bin/env bash\" > \"${VMDIR}/${VMNAME}.sh\"\n\n    # Changing process name is not supported on macOS\n    if [ \"${OS_KERNEL}\" == \"Linux\" ]; then\n        # shellcheck disable=SC2054,SC2206,SC2140\n        args+=(-name ${VMNAME},process=${VMNAME})\n    fi\n    # shellcheck disable=SC2054,SC2206,SC2140\n    args+=(-machine ${MACHINE_TYPE},smm=${SMM},vmport=off,accel=${QEMU_ACCEL} ${GUEST_TWEAKS}\n        ${CPU} ${SMP}\n        -m ${RAM_VM} ${BALLOON}\n        -pidfile \"${VMDIR}/${VMNAME}.pid\")\n\n    if [ \"${guest_os}\" == \"windows\" ] || [ \"${guest_os}\" == \"windows-server\" ] || [ \"${guest_os}\" == \"reactos\" ] || [ \"${guest_os}\" == \"freedos\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-rtc base=localtime,clock=host,driftfix=slew)\n    else\n        # shellcheck disable=SC2054\n        args+=(-rtc base=utc,clock=host)\n    fi\n\n    # shellcheck disable=SC2206\n    args+=(${VIDEO} -display ${DISPLAY_RENDER})\n    # Only enable SPICE is using SPICE display\n    if [ \"${display}\" == \"none\" ] || [ \"${display}\" == \"spice\" ] || [ \"${display}\" == \"spice-app\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-spice \"${SPICE}\"\n            -device virtio-serial-pci\n            -chardev socket,id=agent0,path=\"${VMDIR}/${VMNAME}-agent.sock\",server=on,wait=off\n            -device virtserialport,chardev=agent0,name=org.qemu.guest_agent.0\n            -chardev spicevmc,id=vdagent0,name=vdagent\n            -device virtserialport,chardev=vdagent0,name=com.redhat.spice.0\n            -chardev spiceport,id=webdav0,name=org.spice-space.webdav.0\n            -device virtserialport,chardev=webdav0,name=org.spice-space.webdav.0)\n    fi\n\n    # shellcheck disable=SC2054\n    args+=(-device virtio-rng-pci,rng=rng0 -object rng-random,id=rng0,filename=/dev/urandom)\n\n    # macOS doesn't support SPICE\n    if [ \"${OS_KERNEL}\" == \"Linux\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device \"${USB_HOST_PASSTHROUGH_CONTROLLER}\",id=spicepass\n            -chardev spicevmc,id=usbredirchardev1,name=usbredir\n            -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1\n            -chardev spicevmc,id=usbredirchardev2,name=usbredir\n            -device usb-redir,chardev=usbredirchardev2,id=usbredirdev2\n            -chardev spicevmc,id=usbredirchardev3,name=usbredir\n            -device usb-redir,chardev=usbredirchardev3,id=usbredirdev3\n            -device pci-ohci,id=smartpass\n            -device usb-ccid)\n\n        if ${QEMU} -device help | grep -q \"passthrough smartcard\"; then\n            # shellcheck disable=SC2054\n            args+=(-chardev spicevmc,id=ccid,name=smartcard\n                  -device ccid-card-passthru,chardev=ccid)\n        else\n            echo \" - WARNING!  ${QEMU} or SPICE was not compiled with support for smartcard devices\"\n        fi\n    fi\n\n    # setup usb-controller\n    if [ \"${usb_controller}\" == \"ehci\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device usb-ehci,id=input)\n    elif [ \"${usb_controller}\" == \"xhci\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device qemu-xhci,id=input)\n    elif [ \"${usb_controller}\" == \"none\" ]; then\n        # add nothing\n        :\n    else\n        echo \" - WARNING!  Unknown usb-controller value: '${usb_controller}'\"\n    fi\n\n    # setup keyboard\n    # @INFO: must be set after usb-controller\n    if [ \"${keyboard}\" == \"usb\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device usb-kbd,bus=input.0)\n    elif [ \"${keyboard}\" == \"virtio\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device virtio-keyboard)\n    elif [ \"${keyboard}\" == \"ps2\" ]; then\n        # add nothing, default is ps/2 keyboard\n        :\n    else\n        echo \" - WARNING!  Unknown keyboard value: '${keyboard}'; Fallback to ps2\"\n    fi\n\n    # setup keyboard_layout\n    # @INFO: When using the VNC display, you must use the -k parameter to set the keyboard layout if you are not using en-us.\n    if [ -n \"${keyboard_layout}\" ]; then\n        args+=(-k \"${keyboard_layout}\")\n    fi\n\n    # Braille requires SDL, so disable for macOS\n    if [ -n \"${BRAILLE}\" ] && [ \"${OS_KERNEL}\" == \"Linux\" ]; then\n        if ${QEMU} -chardev help | grep -q braille; then\n            # shellcheck disable=SC2054\n            #args+=(-chardev braille,id=brltty\n            #       -device usb-braille,id=usbbrl,chardev=brltty)\n            args+=(-usbdevice braille)\n        else\n            echo \" - WARNING!  ${QEMU} does not support -chardev braille \"\n        fi\n    fi\n\n    # setup mouse\n    # @INFO: must be set after usb-controller\n    if [ \"${mouse}\" == \"usb\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device usb-mouse,bus=input.0)\n    elif [ \"${mouse}\" == \"tablet\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device usb-tablet,bus=input.0)\n    elif [ \"${mouse}\" == \"virtio\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device virtio-mouse)\n    elif [ \"${mouse}\" == \"ps2\" ]; then\n        # add nothing, default is ps/2 mouse\n        :\n    else\n        echo \" - WARNING!  Unknown mouse value: '${mouse}'; Falling back to ps2\"\n    fi\n\n    # setup audio\n    # @INFO: must be set after usb-controller; in case usb-audio is used\n    # shellcheck disable=SC2206\n    args+=(-audiodev ${AUDIO_DEV} ${SOUND})\n\n    # $bridge backwards compatibility for Quickemu <= 4.0\n    if [ -n \"${bridge}\" ]; then\n        network=\"${bridge}\"\n    fi\n\n    if [ \"${network}\" == \"none\" ]; then\n        # Disable all networking\n        echo \" - Network:  Disabled\"\n        args+=(-nic none)\n    elif [ \"${network}\" == \"restrict\" ]; then\n        echo \" - Network:  Restricted (${NET_DEVICE})\"\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ${NET_DEVICE},netdev=nic -netdev ${NET},restrict=y,id=nic)\n    elif [ -n \"${network}\" ]; then\n        # Enable bridge mode networking\n        echo \" - Network:  Bridged (${network})\"\n\n        # If a persistent MAC address is provided, use it.\n        local MAC=\"\"\n        if [ -n \"${macaddr}\" ]; then\n            MAC=\",mac=${macaddr}\"\n        fi\n\n        # shellcheck disable=SC2054,SC2206\n        args+=(-nic bridge,br=${network},model=virtio-net-pci${MAC})\n    else\n        echo \" - Network:  User (${NET_DEVICE})\"\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ${NET_DEVICE},netdev=nic -netdev ${NET},id=nic)\n    fi\n\n    # Add the disks\n    # - https://turlucode.com/qemu-disk-io-performance-comparison-native-or-threads-windows-10-version/\n    if [[ \"${boot}\" == *\"efi\"* ]]; then\n        # shellcheck disable=SC2054\n        args+=(-global driver=cfi.pflash01,property=secure,value=on\n            -drive if=pflash,format=raw,unit=0,file=\"${EFI_CODE}\",readonly=on\n            -drive if=pflash,format=raw,unit=1,file=\"${EFI_VARS}\")\n    fi\n\n    if [ -n \"${iso}\" ] && [ \"${guest_os}\" == \"freedos\" ]; then\n        # FreeDOS reboots after partitioning the disk, and QEMU tries to boot from disk after first restart\n        # This flag sets the boot order to cdrom,disk. It will persist until powering down the VM\n        args+=(-boot order=dc)\n    elif [ -n \"${iso}\" ] && [ \"${guest_os}\" == \"kolibrios\" ]; then\n        # Since there is bug (probably) in KolibriOS: cdrom indexes 0 or 1 make system show an extra unexisting iso, so we use index=2\n        # shellcheck disable=SC2054\n        args+=(-drive media=cdrom,index=2,file=\"${iso}\")\n        iso=\"\"\n    elif [ -n \"${iso}\" ] && [ \"${guest_os}\" == \"reactos\" ]; then\n        # https://reactos.org/wiki/QEMU\n        # shellcheck disable=SC2054\n        args+=(-boot order=d\n            -drive if=ide,index=2,media=cdrom,file=\"${iso}\")\n        iso=\"\"\n    elif [ -n \"${iso}\" ] && [ \"${guest_os}\" == \"windows\" ] && [ -e \"${VMDIR}/unattended.iso\" ]; then\n        # Attach the unattended configuration to Windows guests when booting from ISO\n        # shellcheck disable=SC2054\n        args+=(-drive media=cdrom,index=2,file=\"${VMDIR}/unattended.iso\")\n    fi\n\n    if [ -n \"${floppy}\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-drive if=floppy,format=raw,file=\"${floppy}\")\n    fi\n\n    if [ -n \"${iso}\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-drive media=cdrom,index=0,file=\"${iso}\")\n    fi\n\n    if [ -n \"${fixed_iso}\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-drive media=cdrom,index=1,file=\"${fixed_iso}\")\n    fi\n\n    if [ \"${guest_os}\" == \"macos\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-device ahci,id=ahci\n            -device ide-hd,bus=ahci.0,drive=BootLoader,bootindex=0\n            -drive id=BootLoader,if=none,format=qcow2,file=\"${MAC_BOOTLOADER}\")\n\n        if [ -n \"${img}\" ]; then\n            # shellcheck disable=SC2054\n            args+=(-device ide-hd,bus=ahci.1,drive=RecoveryImage\n                -drive id=RecoveryImage,if=none,format=raw,file=\"${img}\")\n        fi\n\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ${MAC_DISK_DEV},drive=SystemDisk\n            -drive id=SystemDisk,if=none,format=qcow2,file=\"${disk_img}\" ${STATUS_QUO})\n    elif [ \"${guest_os}\" == \"kolibrios\" ]; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ahci,id=ahci\n            -device ide-hd,bus=ahci.0,drive=SystemDisk\n            -drive id=SystemDisk,if=none,format=qcow2,file=\"${disk_img}\" ${STATUS_QUO})\n\n    elif [ \"${guest_os}\" == \"batocera\" ] ; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device virtio-blk-pci,drive=BootDisk\n            -drive id=BootDisk,if=none,format=raw,file=\"${img}\"\n            -device virtio-blk-pci,drive=SystemDisk\n            -drive id=SystemDisk,if=none,format=qcow2,file=\"${disk_img}\" ${STATUS_QUO})\n\n    elif [ \"${guest_os}\" == \"reactos\" ]; then\n        # https://reactos.org/wiki/QEMU\n        # shellcheck disable=SC2054,SC2206\n        args+=(-drive if=ide,index=0,media=disk,file=\"${disk_img}\")\n\n    elif [ \"${guest_os}\" == \"windows-server\" ]; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ide-hd,drive=SystemDisk\n            -drive id=SystemDisk,if=none,format=qcow2,file=\"${disk_img}\" ${STATUS_QUO})\n\n    else\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device virtio-blk-pci,drive=SystemDisk\n            -drive id=SystemDisk,if=none,format=${disk_format},file=\"${disk_img}\" ${STATUS_QUO})\n    fi\n\n    # https://wiki.qemu.org/Documentation/9psetup\n    # https://askubuntu.com/questions/772784/9p-libvirt-qemu-share-modes\n    if [ \"${guest_os}\" != \"windows\" ] || [ \"${guest_os}\" == \"windows-server\" ] && [ -n \"${PUBLIC}\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-fsdev local,id=fsdev0,path=\"${PUBLIC}\",security_model=mapped-xattr\n            -device virtio-9p-pci,fsdev=fsdev0,mount_tag=\"${PUBLIC_TAG}\")\n    fi\n\n    if [ -n \"${USB_PASSTHROUGH}\" ]; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-device ${USB_HOST_PASSTHROUGH_CONTROLLER},id=hostpass\n            ${USB_PASSTHROUGH})\n    fi\n\n    if [ \"${tpm}\" == \"on\" ] && [ -S \"${VMDIR}/${VMNAME}.swtpm-sock\" ]; then\n        # shellcheck disable=SC2054\n        args+=(-chardev socket,id=chrtpm,path=\"${VMDIR}/${VMNAME}.swtpm-sock\"\n            -tpmdev emulator,id=tpm0,chardev=chrtpm\n            -device tpm-tis,tpmdev=tpm0)\n    fi\n\n    if [ \"${monitor}\" == \"none\" ]; then\n        args+=(-monitor none)\n        echo \" - Monitor:  (off)\"\n    elif [ \"${monitor}\" == \"telnet\" ]; then\n        # Find a free port to expose monitor-telnet to the guest\n        TEMP_PORT=\"$(get_port \"${monitor_telnet_port}\" 9)\"\n        if [ -z \"${TEMP_PORT}\" ]; then\n            echo \" - Monitor:  All Monitor-Telnet ports have been exhausted.\"\n        else\n            monitor_telnet_port=\"${TEMP_PORT}\"\n            # shellcheck disable=SC2054\n            args+=(-monitor telnet:\"${monitor_telnet_host}:${monitor_telnet_port}\",server,nowait)\n            echo \" - Monitor:  On host:  telnet ${monitor_telnet_host} ${monitor_telnet_port}\"\n            echo \"monitor-telnet,${monitor_telnet_port},${monitor_telnet_host}\" >> \"${VMDIR}/${VMNAME}.ports\"\n        fi\n    elif [ \"${monitor}\" == \"socket\" ]; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-monitor unix:${SOCKET_MONITOR},server,nowait)\n        if command -v socat &>/dev/null; then\n            echo \" - Monitor:  On host:  socat -,echo=0,icanon=0 unix-connect:${SOCKET_MONITOR}\"\n        elif command -v nc &>/dev/null; then\n            echo \" - Monitor:  On host:  nc -U \\\"${SOCKET_MONITOR}\\\"\"\n        fi\n    else\n        echo \"ERROR! \\\"${monitor}\\\" is an unknown monitor option.\"\n        exit 1\n    fi\n\n    if [ \"${serial}\" == \"none\" ]; then\n        args+=(-serial none)\n        echo \" - Serial:   (off)\"\n    elif [ \"${serial}\" == \"telnet\" ]; then\n        # Find a free port to expose serial-telnet to the guest\n        TEMP_PORT=\"$(get_port \"${serial_telnet_port}\" 9)\"\n        if [ -z \"${TEMP_PORT}\" ]; then\n            echo \" - Serial:   All Serial Telnet ports have been exhausted.\"\n        else\n            serial_telnet_port=\"${TEMP_PORT}\"\n            # shellcheck disable=SC2054,SC2206\n            args+=(-serial telnet:${serial_telnet_host}:${serial_telnet_port},server,nowait)\n            echo \" - Serial:   On host:  telnet ${serial_telnet_host} ${serial_telnet_port}\"\n            echo \"serial-telnet,${serial_telnet_port},${serial_telnet_host}\" >> \"${VMDIR}/${VMNAME}.ports\"\n        fi\n    elif [ \"${serial}\" == \"socket\" ]; then\n        # shellcheck disable=SC2054,SC2206\n        args+=(-serial unix:${SOCKET_SERIAL},server,nowait)\n        if command -v socat &>/dev/null; then\n            echo \" - Serial:   On host:  socat -,echo=0,icanon=0 unix-connect:${SOCKET_SERIAL}\"\n        elif command -v nc &>/dev/null; then\n            echo \" - Serial:   On host:  nc -U \\\"${SOCKET_SERIAL}\\\"\"\n        fi\n    else\n        echo \"ERROR! \\\"${serial}\\\" is an unknown serial option.\"\n        exit 1\n    fi\n\n    if [ -n \"${extra_args}\" ]; then\n        # shellcheck disable=SC2206\n        args+=(${extra_args})\n    fi\n\n    # The OSK parameter contains parenthesis, they need to be escaped in the shell\n    # scripts. The vendor name, Quickemu Project, contains a space. It needs to be\n    # double-quoted.\n    SHELL_ARGS=\"${args[*]}\"\n    SHELL_ARGS=\"${SHELL_ARGS//\\(/\\\\(}\"\n    SHELL_ARGS=\"${SHELL_ARGS//)/\\\\)}\"\n    SHELL_ARGS=\"${SHELL_ARGS//Quickemu Project/\\\"Quickemu Project\\\"}\"\n\n    if [ -z \"${VM_PID}\" ]; then\n        echo \"${QEMU}\" \"${SHELL_ARGS}\" \"2>/dev/null\" >> \"${VMDIR}/${VMNAME}.sh\"\n        sed -i -e 's/ -/ \\\\\\n    -/g' \"${VMDIR}/${VMNAME}.sh\"\n        ${QEMU} \"${args[@]}\" &> \"${VMDIR}/${VMNAME}.log\" &\n        VM_PID=$!\n        sleep 0.25\n        if kill -0 \"${VM_PID}\" 2>/dev/null; then\n            echo \" - Process:  Started ${VM} as ${VMNAME} (${VM_PID})\"\n        else\n            echo \" - Process:  ERROR! Failed to start ${VM} as ${VMNAME}\"\n            rm -f \"${VMDIR}/${VMNAME}.pid\"\n            echo && cat \"${VMDIR}/${VMNAME}.log\"\n            exit 1\n        fi\n    fi\n}\n\nfunction start_viewer {\n    errno=0\n    if [ \"${viewer}\" != \"none\" ]; then\n        # If output is 'none' then SPICE was requested.\n        if [ \"${display}\" == \"spice\" ]; then\n            if [ \"${viewer}\" == \"remote-viewer\" ]; then\n                # show via viewer: remote-viewer\n                if [ -n \"${PUBLIC}\" ]; then\n                    echo \" - Viewer:   ${viewer} --title \\\"${VMNAME}\\\" --spice-shared-dir \\\"${PUBLIC}\\\" ${FULLSCREEN} \\\"spice://localhost:${spice_port}\\\" >/dev/null 2>&1 &\"\n                    ${viewer} --title \"${VMNAME}\" --spice-shared-dir \"${PUBLIC}\" ${FULLSCREEN} \"spice://localhost:${spice_port}\" >/dev/null 2>&1 &\n                    errno=$?\n                else\n                    echo \" - Viewer:   ${viewer} --title \\\"${VMNAME}\\\" ${FULLSCREEN} \\\"spice://localhost:${spice_port}\\\" >/dev/null 2>&1 &\"\n                    ${viewer} --title \"${VMNAME}\" ${FULLSCREEN} \"spice://localhost:${spice_port}\" >/dev/null 2>&1 &\n                    errno=$?\n                fi\n            elif [ \"${viewer}\" == \"spicy\" ]; then\n                # show via viewer: spicy\n                if [ -n \"${PUBLIC}\" ]; then\n                    echo \" - Viewer:   ${viewer} --title \\\"${VMNAME}\\\" --port \\\"${spice_port}\\\" --spice-shared-dir \\\"${PUBLIC}\\\" \\\"${FULLSCREEN}\\\" >/dev/null 2>&1 &\"\n                    ${viewer} --title \"${VMNAME}\" --port \"${spice_port}\" --spice-shared-dir \"${PUBLIC}\" \"${FULLSCREEN}\" >/dev/null 2>&1 &\n                    errno=$?\n                else\n                    echo \" - Viewer:   ${viewer} --title \\\"${VMNAME}\\\" --port \\\"${spice_port}\\\" \\\"${FULLSCREEN}\\\" >/dev/null 2>&1 &\"\n                    ${viewer} --title \"${VMNAME}\" --port \"${spice_port}\" \"${FULLSCREEN}\" >/dev/null 2>&1 &\n                    errno=$?\n                fi\n            fi\n            if [ ${errno} -ne 0 ]; then\n                echo \"WARNING! Could not start viewer (${viewer}) Err: ${errno}\"\n            fi\n        fi\n    fi\n}\n\nfunction shortcut_create {\n    local dirname=\"${HOME}/.local/share/applications\"\n    local filename=\"${HOME}/.local/share/applications/${VMNAME}.desktop\"\n    echo \"Creating ${VMNAME} desktop shortcut file\"\n\n    if [ ! -d \"${dirname}\" ]; then\n        mkdir -p \"${dirname}\"\n    fi\n    cat << EOF > \"${filename}\"\n[Desktop Entry]\nVersion=1.0\nType=Application\nTerminal=false\nExec=$(basename \"${0}\") --vm ${VM} ${SHORTCUT_OPTIONS}\nPath=${VMPATH}\nName=${VMNAME}\nIcon=qemu\nEOF\n    echo \" - ${filename} created.\"\n}\n\nfunction usage() {\n    echo \"             _      _\"\n    echo \"  __ _ _   _(_) ___| | _____ _ __ ___  _   _\"\n    echo \" / _' | | | | |/ __| |/ / _ \\ '_ ' _ \\| | | |\"\n    echo \"| (_| | |_| | | (__|   <  __/ | | | | | |_| |\"\n    echo \" \\__, |\\__,_|_|\\___|_|\\_\\___|_| |_| |_|\\__,_|\"\n    echo \"    |_| v${VERSION}, using qemu ${QEMU_VER_LONG}\"\n    echo \"--------------------------------------------------------------------------------\"\n    echo \" Project - https://github.com/quickemu-project/quickemu\"\n    echo \" Discord - https://wimpysworld.io/discord\"\n    echo \"--------------------------------------------------------------------------------\"\n    echo\n    echo \"Usage\"\n    echo \"  ${LAUNCHER} --vm ubuntu.conf <arguments>\"\n    echo\n    echo \"Arguments\"\n    echo \"  --access                          : Enable remote spice access support. 'local' (default), 'remote', 'clientipaddress'\"\n    echo \"  --braille                         : Enable braille support. Requires SDL.\"\n    echo \"  --delete-disk                     : Delete the disk image and EFI variables\"\n    echo \"  --delete-vm                       : Delete the entire VM and its configuration\"\n    echo \"  --display                         : Select display backend. 'sdl' (default), 'cocoa', 'gtk', 'none', 'spice' or 'spice-app'\"\n    echo \"  --fullscreen                      : Starts VM in full screen mode (Ctl+Alt+f to exit)\"\n    echo \"  --ignore-msrs-always              : Configure KVM to always ignore unhandled machine-specific registers\"\n    echo \"  --kill                            : Kill the VM process if it is running\"\n    echo \"  --offline                         : Override all network settings and start the VM offline\"\n    echo \"  --shortcut                        : Create a desktop shortcut\"\n    echo \"  --snapshot apply <tag>            : Apply/restore a snapshot.\"\n    echo \"  --snapshot create <tag>           : Create a snapshot.\"\n    echo \"  --snapshot delete <tag>           : Delete a snapshot.\"\n    echo \"  --snapshot info                   : Show disk/snapshot info.\"\n    echo \"  --status-quo                      : Do not commit any changes to disk/snapshot.\"\n    echo \"  --viewer <viewer>                 : Choose an alternative viewer. @Options: 'spicy' (default), 'remote-viewer', 'none'\"\n    echo \"  --width <width>                   : Set VM screen width; requires '--height'\"\n    echo \"  --height <height>                 : Set VM screen height; requires '--width'\"\n    echo \"  --ssh-port <port>                 : Set SSH port manually\"\n    echo \"  --spice-port <port>               : Set SPICE port manually\"\n    echo \"  --public-dir <path>               : Expose share directory. @Options: '' (default: xdg-user-dir PUBLICSHARE), '<directory>', 'none'\"\n    echo \"  --monitor <type>                  : Set monitor connection type. @Options: 'socket' (default), 'telnet', 'none'\"\n    echo \"  --monitor-telnet-host <ip/host>   : Set telnet host for monitor. (default: 'localhost')\"\n    echo \"  --monitor-telnet-port <port>      : Set telnet port for monitor. (default: '4440')\"\n    echo \"  --monitor-cmd <cmd>               : Send command to monitor if available. (Example: system_powerdown)\"\n    echo \"  --serial <type>                   : Set serial connection type. @Options: 'socket' (default), 'telnet', 'none'\"\n    echo \"  --serial-telnet-host <ip/host>    : Set telnet host for serial. (default: 'localhost')\"\n    echo \"  --serial-telnet-port <port>       : Set telnet port for serial. (default: '6660')\"\n    echo \"  --keyboard <type>                 : Set keyboard. @Options: 'usb' (default), 'ps2', 'virtio'\"\n    echo \"  --keyboard_layout <layout>        : Set keyboard layout: 'en-us' (default)\"\n    echo \"  --mouse <type>                    : Set mouse. @Options: 'tablet' (default), 'ps2', 'usb', 'virtio'\"\n    echo \"  --usb-controller <type>           : Set usb-controller. @Options: 'ehci' (default), 'xhci', 'none'\"\n    echo \"  --sound-card <type>               : Set sound card. @Options: 'intel-hda' (default), 'ac97', 'es1370', 'sb16', 'usb-audio', 'none'\"\n    echo \"  --sound-duplex <type>             : Set sound card duplex. @Options: 'hda-micro' (default: speaker/mic), 'hda-duplex' (line-in/line-out), 'hda-output' (output-only)\"\n    echo \"  --extra_args <arguments>          : Pass additional arguments to qemu\"\n    echo \"  --version                         : Print version\"\n}\n\nfunction display_param_check() {\n    # Braille support requires SDL. Override $display if braille was requested.\n    if [ -n \"${BRAILLE}\" ]; then\n        display=\"sdl\"\n    fi\n\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        if [ \"${display}\" != \"cocoa\" ] && [ \"${display}\" != \"none\" ]; then\n          echo \"ERROR! Requested output '${display}' but only 'cocoa' and 'none' are avalible on macOS.\"\n          exit 1\n        fi\n    else\n        if [ \"${display}\" != \"gtk\" ] && [ \"${display}\" != \"none\" ] && [ \"${display}\" != \"sdl\" ] && [ \"${display}\" != \"spice\" ] && [ \"${display}\" != \"spice-app\" ]; then\n            echo \"ERROR! Requested output '${display}' is not recognised.\"\n            exit 1\n        fi\n    fi\n\n    # Set the default 3D acceleration.\n    if [ -z \"${gl}\" ]; then\n        if command -v glxinfo &>/dev/null; then\n            GLSL_VER=$(glxinfo | grep \"OpenGL ES GLSL\" | awk '{print $NF}')\n            case ${GLSL_VER} in\n                1*|2*) gl=\"off\";;\n                *) gl=\"on\";;\n            esac\n        else\n            gl=\"on\"\n        fi\n    fi\n\n    # Disable GL for cocoa\n    # Enable grab-on-hover for SDL: https://github.com/quickemu-project/quickemu/issues/541\n    case \"${display}\" in\n        cocoa) gl=\"off\";;\n        sdl) export SDL_MOUSE_FOCUS_CLICKTHROUGH=1;;\n    esac\n}\n\nfunction ports_param_check() {\n    if [ -n \"${ssh_port}\" ] && ! is_numeric \"${ssh_port}\"; then\n        echo \"ERROR: ssh_port must be a number!\"\n        exit 1\n    fi\n\n    if [ -n \"${spice_port}\" ] && ! is_numeric \"${spice_port}\"; then\n        echo \"ERROR: spice_port must be a number!\"\n        exit 1\n    fi\n\n    if [ -n \"${monitor_telnet_port}\" ] && ! is_numeric \"${monitor_telnet_port}\"; then\n        echo \"ERROR: telnet port must be a number!\"\n        exit 1\n    fi\n\n    if [ -n \"${serial_telnet_port}\" ] && ! is_numeric \"${serial_telnet_port}\"; then\n        echo \"ERROR: serial port must be a number!\"\n        exit 1\n    fi\n}\n\nfunction sound_card_param_check() {\n    if [ \"${sound_card}\" != \"ac97\" ] && [ \"${sound_card}\" != \"es1370\" ] && [ \"${sound_card}\" != \"ich9-intel-hda\" ] && [ \"${sound_card}\" != \"intel-hda\" ] && [ \"${sound_card}\" != \"sb16\" ] && [ \"${sound_card}\" != \"usb-audio\" ] && [ \"${sound_card}\" != \"none\" ]; then\n        echo \"ERROR! Requested sound card '${sound_card}' is not recognised.\"\n        exit 1\n    fi\n\n    # USB audio requires xhci controller\n    if [ \"${sound_card}\" == \"usb-audio\" ]; then\n        usb_controller=\"xhci\";\n    fi\n\n    #name \"hda-duplex\", bus HDA, desc \"HDA Audio Codec, duplex (line-out, line-in)\"\n    #name \"hda-micro\", bus HDA, desc \"HDA Audio Codec, duplex (speaker, microphone)\"\n    #name \"hda-output\", bus HDA, desc \"HDA Audio Codec, output-only (line-out)\"\n    if [ \"${sound_duplex}\" != \"hda-duplex\" ] && [ \"${sound_duplex}\" != \"hda-micro\" ] && [ \"${sound_duplex}\" != \"hda-output\" ]; then\n        echo \"ERROR! Requested sound duplex '${sound_duplex}' is not recognised.\"\n        exit 1\n    fi\n}\n\nfunction tpm_param_check() {\n    if [ \"${tpm}\" == \"on\" ]; then\n        SWTPM=$(command -v swtpm)\n        if [ ! -e \"${SWTPM}\" ]; then\n            echo \"ERROR! TPM is enabled, but swtpm was not found.\"\n            exit 1\n        fi\n    fi\n}\n\nfunction viewer_param_check() {\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        return\n    fi\n\n    if [ \"${viewer}\" != \"none\" ] && [ \"${viewer}\" != \"spicy\" ] && [ \"${viewer}\" != \"remote-viewer\" ]; then\n        echo \"ERROR! Requested viewer '${viewer}' is not recognised.\"\n        exit 1\n    fi\n    if [ \"${viewer}\" == \"spicy\" ] && ! command -v spicy &>/dev/null; then\n        echo \"ERROR! Requested 'spicy' as viewer, but 'spicy' is not installed.\"\n        exit 1\n    elif [ \"${viewer}\" == \"remote-viewer\" ] && ! command -v remote-viewer &>/dev/null; then\n        echo \"ERROR! Requested 'remote-viewer' as viewer, but 'remote-viewer' is not installed.\"\n        exit 1\n    fi\n}\n\nfunction fileshare_param_check() {\n    if [ \"${PUBLIC}\" == \"none\" ]; then\n        PUBLIC=\"\"\n    else\n        # PUBLICSHARE is the only directory exposed to guest VMs for file\n        # sharing via 9P, spice-webdavd and Samba. This path is not configurable.\n        if [ -z \"${PUBLIC}\" ]; then\n            if command -v xdg-user-dir &>/dev/null; then\n                PUBLIC=$(xdg-user-dir PUBLICSHARE)\n            elif [ -d \"${HOME}/Public\" ]; then\n                PUBLIC=\"${HOME}/Public\"\n            fi\n        fi\n\n        if [ ! -d \"${PUBLIC}\" ]; then\n            echo \" - WARNING! Public directory: '${PUBLIC}' doesn't exist!\"\n        else\n            PUBLIC_TAG=\"Public-${USER,,}\"\n            PUBLIC_PERMS=$(${STAT}  -c \"%A\" \"${PUBLIC}\")\n        fi\n    fi\n}\n\nfunction parse_ports_from_file {\n    local FILE=\"${VMDIR}/${VMNAME}.ports\"\n    local host_name=\"\"\n    local port_name=\"\"\n    local port_number=\"\"\n\n    # Loop over each line in the file\n    while IFS= read -r CONF || [ -n \"${CONF}\" ]; do\n        # parse ports\n        port_name=$(echo \"${CONF}\" | cut -d',' -f 1)\n        port_number=$(echo \"${CONF}\" | cut -d',' -f 2)\n        host_name=$(echo \"${CONF}\" | awk 'FS=\",\" {print $3,\".\"}')\n\n        if [ \"${port_name}\" == \"ssh\" ]; then\n            ssh_port=\"${port_number}\"\n        elif [ \"${port_name}\" == \"spice\" ]; then\n            spice_port=\"${port_number}\"\n        elif [ \"${port_name}\" == \"monitor-telnet\" ]; then\n            monitor_telnet_port=\"${port_number}\"\n            monitor_telnet_host=\"${host_name}\"\n        elif [ \"${port_name}\" == \"serial-telnet\" ]; then\n            serial_telnet_port=\"${port_number}\"\n            serial_telnet_host=\"${host_name}\"\n        fi\n    done < \"${FILE}\"\n}\n\nfunction is_numeric {\n    [[ \"$1\" =~ ^[0-9]+$ ]]\n}\n\nfunction monitor_send_cmd {\n    local MSG=\"${1}\"\n\n    if [ -z \"${MSG}\" ]; then\n        echo \"WARNING! Send to QEMU-Monitor: Message empty!\"\n        return 1\n    fi\n\n    case \"${monitor}\" in\n        socket)\n            echo -e \" - Sending:  via socket ${MSG}\"\n            echo -e \"${MSG}\" | socat -,shut-down unix-connect:\"${SOCKET_MONITOR}\" > /dev/null 2>&1;;\n        telnet)\n            echo -e \" - Sending:  via telnet ${MSG}\"\n            echo -e \"${MSG}\" | socat - tcp:\"${monitor_telnet_host}\":\"${monitor_telnet_port}\" > /dev/null 2>&1;;\n        *)\n            echo \"WARNING! No qemu-monitor channel available - Couldn't send message to monitor!\"\n            return 1;;\n    esac\n\n    return 0\n}\n\n### MAIN\n\n# Lowercase variables are used in the VM config file only\nboot=\"efi\"\ncpu_cores=\"\"\ndisk_format=\"${disk_format:-qcow2}\"\ndisk_img=\"${disk_img:-}\"\ndisk_size=\"${disk_size:-16G}\"\ndisplay=\"${display:-sdl}\"\nextra_args=\"${extra_args:-}\"\nfixed_iso=\"\"\nfloppy=\"\"\nguest_os=\"linux\"\nimg=\"\"\niso=\"\"\nmacaddr=\"\"\nmacos_release=\"\"\nnetwork=\"\"\nport_forwards=()\npreallocation=\"off\"\nram=\"\"\nsecureboot=\"off\"\ntpm=\"off\"\nusb_devices=()\nviewer=\"${viewer:-spicy}\"\nwidth=\"${width:-}\"\nheight=\"${height:-}\"\nssh_port=\"${ssh_port:-}\"\nspice_port=\"${spice_port:-}\"\nmonitor=\"${monitor:-socket}\"\nmonitor_telnet_port=\"${monitor_telnet_port:-4440}\"\nmonitor_telnet_host=\"${monitor_telnet_host:-localhost}\"\nserial=\"${serial:-socket}\"\nserial_telnet_port=\"${serial_telnet_port:-6660}\"\nserial_telnet_host=\"${serial_telnet_host:-localhost}\"\n# options: ehci (USB2.0), xhci (USB3.0)\nusb_controller=\"${usb_controller:-ehci}\"\nkeyboard=\"${keyboard:-usb}\"\nkeyboard_layout=\"${keyboard_layout:-en-us}\"\nmouse=\"${mouse:-tablet}\"\nsound_card=\"${sound_card:-intel-hda}\"\nsound_duplex=\"${sound_duplex:-hda-micro}\"\n\nACCESS=\"\"\nACTIONS=()\nBRAILLE=\"\"\nFULLSCREEN=\"\"\nMONITOR_CMD=\"\"\nPUBLIC=\"\"\nPUBLIC_PERMS=\"\"\nPUBLIC_TAG=\"\"\nSHORTCUT_OPTIONS=\"\"\nSNAPSHOT_ACTION=\"\"\nSNAPSHOT_TAG=\"\"\nSOCKET_MONITOR=\"\"\nSOCKET_SERIAL=\"\"\nSTATUS_QUO=\"\"\nUSB_PASSTHROUGH=\"\"\nVM=\"\"\nVMDIR=\"\"\nVMNAME=\"\"\nVMPATH=\"\"\n\n# shellcheck disable=SC2155\nreadonly LAUNCHER=$(basename \"${0}\")\nreadonly DISK_MIN_SIZE=$((197632 * 8))\nreadonly VERSION=\"4.9.8\"\n\n# TODO: Make this run the native architecture binary\nARCH_VM=\"x86_64\"\nARCH_HOST=$(uname -m)\nQEMU=$(command -v qemu-system-${ARCH_VM})\nQEMU_IMG=$(command -v qemu-img)\nif [ ! -x \"${QEMU}\" ] || [ ! -x \"${QEMU_IMG}\" ]; then\n    echo \"ERROR! QEMU not found. Please make sure 'qemu-system-${ARCH_VM}' and 'qemu-img' are installed.\"\n    exit 1\nfi\n\n# Check for gnu tools on macOS\nSTAT=\"stat\"\nif command -v gstat &>/dev/null; then\n    STAT=\"gstat\"\nfi\n\nOS_KERNEL=$(uname -s)\nif [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n    display=\"cocoa\"\nfi\n\nQEMU_VER_LONG=$(${QEMU_IMG} --version | head -n 1 | awk '{print $3}')\nQEMU_VER_SHORT=$(echo \"${QEMU_VER_LONG//./}\" | cut -c1-2)\nif [ \"${QEMU_VER_SHORT}\" -lt 60 ]; then\n    echo \"ERROR! QEMU 6.0.0 or newer is required, detected ${QEMU_VER_LONG}.\"\n    exit 1\nfi\n\n# Take command line arguments\nif [ $# -lt 1 ]; then\n    usage\n    exit 1\nelse\n    while [ $# -gt 0 ]; do\n        case \"${1}\" in\n            -access|--access)\n                SHORTCUT_OPTIONS+=\"--access ${2} \"\n                ACCESS=\"${2}\"\n                shift 2;;\n            -braille|--braille)\n                SHORTCUT_OPTIONS+=\"--braille \"\n                BRAILLE=\"on\"\n                shift;;\n            -delete|--delete|-delete-disk|--delete-disk)\n                ACTIONS+=(delete_disk)\n                shift;;\n            -delete-vm|--delete-vm)\n                ACTIONS+=(delete_vm)\n                shift;;\n            -display|--display)\n                SHORTCUT_OPTIONS+=\"--display ${2} \"\n                display=\"${2}\"\n                display_param_check\n                shift 2;;\n            -fullscreen|--fullscreen|-full-screen|--full-screen)\n                SHORTCUT_OPTIONS+=\"--fullscreen \"\n                FULLSCREEN=\"--full-screen\"\n                shift;;\n            -ignore-msrs-always|--ignore-msrs-always)\n                ignore_msrs_always\n                exit;;\n            -kill|--kill)\n                ACTIONS+=(kill_vm)\n                shift;;\n            -offline|--offline)\n                SHORTCUT_OPTIONS+=\"--offline \"\n                network=\"none\"\n                shift;;\n            -snapshot|--snapshot)\n                if [ -z \"${2}\" ]; then\n                    echo \"ERROR! '--snapshot' needs an action to perform.\"\n                    exit 1\n                fi\n                SNAPSHOT_ACTION=\"${2}\"\n                if [ -z \"${3}\" ] && [ \"${SNAPSHOT_ACTION}\" != \"info\" ]; then\n                    echo \"ERROR! '--snapshot ${SNAPSHOT_ACTION}' needs a tag.\"\n                    exit 1\n                fi\n                SNAPSHOT_TAG=\"${3}\"\n                if [ \"${SNAPSHOT_ACTION}\" == \"info\" ]; then\n                    shift 2\n                else\n                    shift 3\n                fi;;\n            -status-quo|--status-quo)\n                STATUS_QUO=\"-snapshot\"\n                shift;;\n            -shortcut|--shortcut)\n                ACTIONS+=(shortcut_create)\n                shift;;\n            -vm|--vm)\n                VM=\"${2}\"\n                shift 2;;\n            -viewer|--viewer)\n                SHORTCUT_OPTIONS+=\"--viewer ${2} \"\n                viewer=\"${2}\"\n                shift 2;;\n            -width|--width)\n                SHORTCUT_OPTIONS+=\"--width ${2} \"\n                width=\"${2}\"\n                shift 2;;\n            -height|--height)\n                SHORTCUT_OPTIONS+=\"--height ${2} \"\n                height=\"${2}\"\n                shift 2;;\n            -ssh-port|--ssh-port)\n                SHORTCUT_OPTIONS+=\"--ssh-port ${2} \"\n                ssh_port=\"${2}\"\n                shift 2;;\n            -spice-port|--spice-port)\n                SHORTCUT_OPTIONS+=\"--spice-port ${2} \"\n                spice_port=\"${2}\"\n                shift 2;;\n            -public-dir|--public-dir)\n                SHORTCUT_OPTIONS+=\"--public-dir ${2} \"\n                PUBLIC=\"${2}\"\n                shift 2;;\n            -monitor|--monitor)\n                SHORTCUT_OPTIONS+=\"--monitor ${2} \"\n                monitor=\"${2}\"\n                shift 2;;\n            -monitor-cmd|--monitor-cmd)\n                SHORTCUT_OPTIONS+=\"--monitor-cmd ${2} \"\n                MONITOR_CMD=\"${2}\"\n                shift 2;;\n            -monitor-telnet-host|--monitor-telnet-host)\n                SHORTCUT_OPTIONS+=\"--monitor-telnet-host ${2} \"\n                monitor_telnet_host=\"${2}\"\n                shift 2;;\n            -monitor-telnet-port|--monitor-telnet-port)\n                SHORTCUT_OPTIONS+=\"--monitor-telnet-port ${2} \"\n                monitor_telnet_port=\"${2}\"\n                shift 2;;\n            -serial|--serial)\n                SHORTCUT_OPTIONS+=\"--serial ${2} \"\n                serial=\"${2}\"\n                shift 2;;\n            -serial-telnet-host|--serial-telnet-host)\n                SHORTCUT_OPTIONS+=\"--serial-telnet-host ${2} \"\n                serial_telnet_host=\"${2}\"\n                shift 2;;\n            -serial-telnet-port|--serial-telnet-port)\n                SHORTCUT_OPTIONS+=\"--serial-telnet-port ${2} \"\n                serial_telnet_port=\"${2}\"\n                shift 2;;\n            -keyboard|--keyboard)\n                SHORTCUT_OPTIONS+=\"--keyboard ${2} \"\n                keyboard=\"${2}\"\n                shift 2;;\n            -keyboard_layout|--keyboard_layout)\n                SHORTCUT_OPTIONS+=\"--keyboard_layout ${2} \"\n                keyboard_layout=\"${2}\"\n                shift 2;;\n            -mouse|--mouse)\n                SHORTCUT_OPTIONS+=\"--mouse ${2} \"\n                mouse=\"${2}\"\n                shift 2;;\n            -usb-controller|--usb-controller)\n                SHORTCUT_OPTIONS+=\"--usb-controller ${2} \"\n                usb_controller=\"${2}\"\n                shift 2;;\n            -extra_args|--extra_args)\n                SHORTCUT_OPTIONS+=\"--extra_args ${2} \"\n                extra_args+=\"${2}\"\n                shift 2;;\n            -sound-card|--sound-card)\n                SHORTCUT_OPTIONS+=\"--sound-card ${2} \"\n                sound_card=\"${2}\"\n                shift 2;;\n            -sound-duplex|--sound-duplex)\n                SHORTCUT_OPTIONS+=\"--sound-duplex ${2} \"\n                sound_duplex=\"${2}\"\n                shift 2;;\n            -version|--version)\n                echo \"${VERSION}\"\n                exit;;\n            -h|--h|-help|--help)\n                usage\n                exit 0;;\n              *)\n                echo \"ERROR! \\\"${1}\\\" is not a supported parameter.\"\n                usage\n                exit 1;;\n        esac\n    done\nfi\n\nif [ -n \"${VM}\" ] && [ -e \"${VM}\" ]; then\n    # shellcheck source=/dev/null\n    source \"${VM}\"\n\n    VMDIR=$(dirname \"${disk_img}\")          # directory the VM disk and state files are stored\n    VMNAME=$(basename \"${VM}\" .conf)        # name of the VM\n    VMPATH=$(realpath \"$(dirname \"${VM}\")\") # path to the top-level VM directory\n    SOCKET_MONITOR=\"${VMDIR}/${VMNAME}-monitor.socket\"\n    SOCKET_SERIAL=\"${VMDIR}/${VMNAME}-serial.socket\"\n\n    # if disk_img is not configured, do the right thing.\n    if [ -z \"${disk_img}\" ]; then\n        disk_img=\"${VMDIR}/disk.${disk_format}\"\n    fi\n\n    # Fixes running VMs when PWD is not relative to the VM directory\n    # https://github.com/quickemu-project/quickemu/pull/875\n    if [ ! -f \"${disk_img}\" ]; then\n        pushd \"${VMPATH}\" >/dev/null || exit\n    fi\n\n    # Check if VM is already running\n    VM_PID=\"\"\n    if [ -r \"${VMDIR}/${VMNAME}.pid\" ]; then\n        VM_PID=$(head -n 1 \"${VMDIR}/${VMNAME}.pid\")\n        if ! kill -0 \"${VM_PID}\" > /dev/null 2>&1; then\n            #VM is not running, cleaning up.\n            VM_PID=\"\"\n            rm -f \"${VMDIR}/${VMNAME}.pid\"\n        fi\n    fi\n\n    # Iterate over any actions and exit.\n    if [ ${#ACTIONS[@]} -ge 1 ]; then\n        for ACTION in \"${ACTIONS[@]}\"; do\n            ${ACTION}\n        done\n        exit\n    fi\n\n    if [ -n \"${SNAPSHOT_ACTION}\" ]; then\n        case ${SNAPSHOT_ACTION} in\n            apply)\n                snapshot_apply \"${SNAPSHOT_TAG}\"\n                snapshot_info\n                exit;;\n            create)\n                snapshot_create \"${SNAPSHOT_TAG}\"\n                snapshot_info\n                exit;;\n            delete)\n                snapshot_delete \"${SNAPSHOT_TAG}\"\n                snapshot_info\n                exit;;\n            info)\n                echo \"Snapshot information ${disk_img}\"\n                snapshot_info\n                exit;;\n            *)\n                echo \"ERROR! \\\"${SNAPSHOT_ACTION}\\\" is not a supported snapshot action.\"\n                usage\n                exit 1;;\n        esac\n    fi\nelse\n    echo \"ERROR! Virtual machine configuration not found.\"\n    usage\n    exit 1\nfi\n\ndisplay_param_check\nports_param_check\nsound_card_param_check\ntpm_param_check\nviewer_param_check\nfileshare_param_check\n\nif [ -z \"${VM_PID}\" ]; then\n    vm_boot\n    start_viewer\n    # If the VM being started is an uninstalled Windows VM then auto-skip the press-any key prompt.\n    if [ -n \"${iso}\" ] && [[ \"${guest_os}\" == \"windows\"* ]]; then\n        # shellcheck disable=SC2034\n        for LOOP in {1..5}; do\n          sleep 1\n          monitor_send_cmd \"sendkey ret\"\n        done\n    fi\nelse\n    echo \"${VMNAME}\"\n    echo \" - Process:  Already running ${VM} as ${VMNAME} (${VM_PID})\"\n    parse_ports_from_file\n    start_viewer\nfi\n\nif [ -n \"${MONITOR_CMD}\" ]; then\n    monitor_send_cmd \"${MONITOR_CMD}\"\nfi\n\n# vim:tabstop=4:shiftwidth=4:expandtab\n"
        },
        {
          "name": "quickget",
          "type": "blob",
          "size": 138.298828125,
          "content": "#!/usr/bin/env bash\n# SC2317: Command appears to be unreachable. Check usage (or ignore if invoked indirectly).\n#  - https://www.shellcheck.net/wiki/SC2317\n#  - Disable globally because many functions are called indirectly\n# shellcheck disable=SC2317\nexport LC_ALL=C\n\nfunction cleanup() {\n    if [ -n \"$(jobs -p)\" ]; then\n        kill \"$(jobs -p)\" 2>/dev/null\n    fi\n}\n\nfunction os_info() {\n    local SIMPLE_NAME=\"\"\n    local INFO=\"\"\n    SIMPLE_NAME=\"${1}\"\n    case ${SIMPLE_NAME} in\n        #name)            INFO=\"PrettyName|Credentials|Homepage|Info\";;\n        alma)             INFO=\"AlmaLinux|-|https://almalinux.org/|Community owned and governed, forever-free enterprise Linux distribution, focused on long-term stability, providing a robust production-grade platform. AlmaLinux OS is binary compatible with RHEL¬Æ.\";;\n        alpine)           INFO=\"Alpine Linux|-|https://alpinelinux.org/|Security-oriented, lightweight Linux distribution based on musl libc and busybox.\";;\n        android)          INFO=\"Android x86|-|https://www.android-x86.org/|Port Android Open Source Project to x86 platform.\";;\n        antix)            INFO=\"Antix|-|https://antixlinux.com/|Fast, lightweight and easy to install systemd-free linux live CD distribution based on Debian Stable for Intel-AMD x86 compatible systems.\";;\n        archcraft)        INFO=\"Archcraft|-|https://archcraft.io/|Yet another minimal Linux distribution, based on Arch Linux.\";;\n        archlinux)        INFO=\"Arch Linux|-|https://archlinux.org/|Lightweight and flexible Linux¬Æ distribution that tries to Keep It Simple.\";;\n        arcolinux)        INFO=\"Arco Linux|-|https://arcolinux.com/|Is all about becoming an expert in linux.\";;\n        artixlinux)       INFO=\"Artix Linux|-|https://artixlinux.org/|The Art of Linux. Simple. Fast. Systemd-free.\";;\n        athenaos)         INFO=\"Athena OS|-|https://athenaos.org/|Offer a different experience than the most used pentesting distributions by providing only tools that fit with the user needs and improving the access to hacking resources and learning materials.\";;\n        batocera)         INFO=\"Batocera|-|https://batocera.org/|Retro-gaming distribution with the aim of turning any computer/nano computer into a gaming console during a game or permanently.\";;\n        bazzite)          INFO=\"Bazzite|-|https://github.com/ublue-os/bazzite/|Container native gaming and a ready-to-game SteamOS like.\";;\n        biglinux)         INFO=\"BigLinux|-|https://www.biglinux.com.br/|Is the right choice if you want to have an easy and enriching experience with Linux. It has been perfected over more than 19 years, following our motto: 'In search of the perfect system'.\";;\n        blendos)          INFO=\"BlendOS|-|https://blendos.co/|A seamless blend of all Linux distributions. Allows you to have an immutable, atomic and declarative Arch Linux system, with application support from several Linux distributions & Android.\";;\n        bodhi)            INFO=\"Bodhi|-|https://www.bodhilinux.com/|Lightweight distribution featuring the fast & fully customizable Moksha Desktop.\";;\n        bunsenlabs)       INFO=\"BunsenLabs|-|https://www.bunsenlabs.org/|Light-weight and easily customizable Openbox desktop. The project is a community continuation of CrunchBang Linux.\";;\n        cachyos)          INFO=\"CachyOS|-|https://cachyos.org/|Designed to deliver lightning-fast speeds and stability, ensuring a smooth and enjoyable computing experience every time you use it.\";;\n        centos-stream)    INFO=\"CentOS Stream|-|https://www.centos.org/centos-stream/|Continuously delivered distro that tracks just ahead of Red Hat Enterprise Linux (RHEL) development, positioned as a midstream between Fedora Linux and RHEL.\";;\n        chimeralinux)     INFO=\"Chimera Linux|anon:chimera root:chimera|https://chimera-linux.org/|Modern, general-purpose non-GNU Linux distribution.\";;\n        crunchbang++)     INFO=\"Crunchbangplusplus|-|https://www.crunchbangplusplus.org/|The classic minimal crunchbang feel, now with debian 12 bookworm.\";;\n        debian)           INFO=\"Debian|-|https://www.debian.org/|Complete Free Operating System with perfect level of ease of use and stability.\";;\n        deepin)           INFO=\"Deepin|-|https://www.deepin.org/|Beautiful UI design, intimate human-computer interaction, and friendly community environment make you feel at home.\";;\n        devuan)           INFO=\"Devuan|-|https://www.devuan.org/|Fork of Debian without systemd that allows users to reclaim control over their system by avoiding unnecessary entanglements and ensuring Init Freedom.\";;\n        dragonflybsd)     INFO=\"DragonFlyBSD|-|https://www.dragonflybsd.org/|Provides an opportunity for the BSD base to grow in an entirely different direction from the one taken in the FreeBSD, NetBSD, and OpenBSD series.\";;\n        easyos)           INFO=\"EasyOS|-|https://easyos.org/|Experimental distribution designed from scratch to support containers.\";;\n        edubuntu)         INFO=\"Edubuntu|-|https://www.edubuntu.org/|Stable, secure and privacy concious option for schools.\";;\n        elementary)       INFO=\"elementary OS|-|https://elementary.io/|Thoughtful, capable, and ethical replacement for Windows and macOS.\";;\n        endeavouros)      INFO=\"EndeavourOS|-|https://endeavouros.com/|Provides an Arch experience without the hassle of installing it manually for both x86_64 and ARM systems.\";;\n        endless)          INFO=\"Endless OS|-|https://www.endlessos.org/os|Completely Free, User-Friendly Operating System Packed with Educational Tools, Games, and More.\";;\n        fedora)           INFO=\"Fedora|-|https://www.fedoraproject.org/|Innovative platform for hardware, clouds, and containers, built with love by you.\";;\n        freebsd)          INFO=\"FreeBSD|-|https://www.freebsd.org/|Operating system used to power modern servers, desktops, and embedded platforms.\";;\n        freedos)          INFO=\"FreeDOS|-|https://freedos.org/|DOS-compatible operating system that you can use to play classic DOS games, run legacy business software, or develop embedded systems.\";;\n        garuda)           INFO=\"Garuda Linux|-|https://garudalinux.org/|Feature rich and easy to use Linux distribution.\";;\n        gentoo)           INFO=\"Gentoo|-|https://www.gentoo.org/|Highly flexible, source-based Linux distribution.\";;\n        ghostbsd)         INFO=\"GhostBSD|-|https://www.ghostbsd.org/|Simple, elegant desktop BSD Operating System.\";;\n        gnomeos)          INFO=\"GNOME OS|-|https://os.gnome.org/|Alpha nightly bleeding edge distro of GNOME\";;\n        guix)             INFO=\"Guix|-|https://guix.gnu.org/|Distribution of the GNU operating system developed by the GNU Project‚Äîwhich respects the freedom of computer users.\";;\n        haiku)            INFO=\"Haiku|-|https://www.haiku-os.org/|Specifically targets personal computing. Inspired by the BeOS, Haiku is fast, simple to use, easy to learn and yet very powerful.\";;\n        holoiso)          INFO=\"HoloISO|-|https://github.com/HoloISO/holoiso|Bring the Steam Decks SteamOS Holo redistribution and provide a close-to-official SteamOS experience.\";;\n        kali)             INFO=\"Kali|-|https://www.kali.org/|The most advanced Penetration Testing Distribution.\";;\n        kdeneon)          INFO=\"KDE Neon|-|https://neon.kde.org/|Latest and greatest of KDE community software packaged on a rock-solid base.\";;\n        kolibrios)        INFO=\"KolibriOS|-|https://kolibrios.org/en/|Tiny yet incredibly powerful and fast operating system.\";;\n        kubuntu)          INFO=\"Kubuntu|-|https://kubuntu.org/|Free, complete, and open-source alternative to Microsoft Windows and Mac OS X which contains everything you need to work, play, or share.\";;\n        linuxlite)        INFO=\"Linux Lite|-|https://www.linuxliteos.com/|Your first simple, fast and free stop in the world of Linux.\";;\n        linuxmint)        INFO=\"Linux Mint|-|https://linuxmint.com/|Designed to work out of the box and comes fully equipped with the apps most people need.\";;\n        lmde)             INFO=\"Linux Mint Debian Edition|-|https://www.linuxmint.com/download_lmde.php|Aims to be as similar as possible to Linux Mint, but without using Ubuntu. The package base is provided by Debian instead.\";;\n        lubuntu)          INFO=\"Lubuntu|-|https://lubuntu.me/|Complete Operating System that ships the essential apps and services for daily use: office applications, PDF reader,  image editor, music and video players, etc. Using lightwave lxde/lxqt.\";;\n        maboxlinux)       INFO=\"Mabox Linux|-|https://maboxlinux.org/|Lightweight, functional and easy to customize Openbox desktop\";;\n        mageia)           INFO=\"Mageia|-|https://www.mageia.org/|Stable, secure operating system for desktop & server.\";;\n        manjaro)          INFO=\"Manjaro|-|https://manjaro.org/|Versatile, free, and open-source Linux operating system designed with a strong focus on safeguarding user privacy and offering extensive control over hardware.\";;\n        mxlinux)          INFO=\"MX Linux|-|https://mxlinux.org/|Designed to combine elegant and efficient desktops with high stability and solid performance.\";;\n        netboot)          INFO=\"netboot.xyz|-|https://netboot.xyz/|Your favorite operating systems in one place.\";;\n        netbsd)           INFO=\"NetBSD|-|https://www.netbsd.org/|Free, fast, secure, and highly portable Unix-like Open Source operating system. It is available for a wide range of platforms, from large-scale servers and powerful desktop systems to handheld and embedded devices.\";;\n        nitrux)           INFO=\"Nitrux|-|https://nxos.org/|Powered by Debian, KDE Plasma and Frameworks, and AppImages.\";;\n        nixos)            INFO=\"NixOS|-|https://nixos.org/|Linux distribution based on Nix package manager, tool that takes a unique approach to package management and system configuration.\";;\n        nwg-shell)        INFO=\"nwg-shell|nwg:nwg|https://nwg-piotr.github.io/nwg-shell/|Arch Linux ISO with nwg-shell for sway and Hyprland\";;\n        macos)            INFO=\"macOS|-|https://www.apple.com/macos/|Work and play on your Mac are even more powerful. Elevate your presence on video calls. Access information in all-new ways. Boost gaming performance. And discover even more ways to personalize your Mac.\";;\n        openbsd)          INFO=\"OpenBSD|-|https://www.openbsd.org/|FREE, multi-platform 4.4BSD-based UNIX-like operating system. Our efforts emphasize portability, standardization, correctness, proactive security and integrated cryptography.\";;\n        openindiana)      INFO=\"OpenIndiana|-|https://www.openindiana.org/|Community supported illumos-based operating system.\";;\n        opensuse)         INFO=\"openSUSE|-|https://www.opensuse.org/|The makers choice for sysadmins, developers and desktop users.\";;\n        oraclelinux)      INFO=\"Oracle Linux|-|https://www.oracle.com/linux/|Linux with everything required to deploy, optimize, and manage applications on-premises, in the cloud, and at the edge.\";;\n        parrotsec)        INFO=\"Parrot Security|parrot:parrot|https://www.parrotsec.org/|Provides a huge arsenal of tools, utilities and libraries that IT and security professionals can use to test and assess the security of their assets in a reliable, compliant and reproducible way.\";;\n        peppermint)       INFO=\"PeppermintOS|-|https://peppermintos.com/|Provides a user with the opportunity to build the system that best fits their needs. While at the same time providing a functioning OS with minimum hassle out of the box.\";;\n        popos)            INFO=\"Pop!_OS|-|https://pop.system76.com/|Operating system for STEM and creative professionals who use their computer as a tool to discover and create.\";;\n        porteus)          INFO=\"Porteus|-|http://www.porteus.org/|Complete linux operating system that is optimized to run from CD, USB flash drive, hard drive, or other bootable storage media.\";;\n        primtux)          INFO=\"PrimTux|-|https://primtux.fr/|A complete and customizable GNU/Linux operating system intended for primary school students and suitable even for older hardware.\";;\n        proxmox-ve)       INFO=\"Proxmox VE|-|https://proxmox.com/en/proxmox-virtual-environment/|Proxmox Virtual Environment is a complete, open-source server management platform for enterprise virtualization.\";;\n        pureos)           INFO=\"PureOS|-|https://www.pureos.net/|A fully free/libre and open source GNU/Linux operating system, endorsed by the Free Software Foundation.\";;\n        reactos)          INFO=\"ReactOS|-|https://reactos.org/|Imagine running your favorite Windows applications and drivers in an open-source environment you can trust.\";;\n        rebornos)         INFO=\"RebornOS|-|https://rebornos.org/|Aiming to make Arch Linux as user friendly as possible by providing interface solutions to things you normally have to do in a terminal.\";;\n        rockylinux)       INFO=\"Rocky Linux|-|https://rockylinux.org/|Open-source enterprise operating system designed to be 100% bug-for-bug compatible with Red Hat Enterprise Linux¬Æ.\";;\n        siduction)        INFO=\"Siduction|-|https://siduction.org/|Operating system based on the Linux kernel and the GNU project. In addition, there are applications and libraries from Debian.\";;\n        slackware)        INFO=\"Slackware|-|http://www.slackware.com/|Advanced Linux operating system, designed with the twin goals of ease of use and stability as top priorities.\";;\n        slax)             INFO=\"Slax|-|https://www.slax.org/|Compact, fast, and modern Linux operating system that combines sleek design with modular approach. With the ability to run directly from a USB flash drive without the need for installation, Slax is truly portable and fits easily in your pocket.\";;\n        slint)            INFO=\"Slint|-|https://slint.fr/|Slint is an easy-to-use, versatile, blind-friendly Linux distribution for 64-bit computers. Slint is based on Slackware and borrows tools from Salix. Maintainer: Didier Spaier.\";;\n        slitaz)           INFO=\"SliTaz|-|https://www.slitaz.org/en/|Simple, fast and low resource Linux OS for servers & desktops.\";;\n        solus)            INFO=\"Solus|-|https://getsol.us/|Designed for home computing. Every tweak enables us to deliver a cohesive computing experience.\";;\n        sparkylinux)      INFO=\"SparkyLinux|-|https://sparkylinux.org/|Fast, lightweight and fully customizable operating system which offers several versions for different use cases.\";;\n        spirallinux)      INFO=\"SpiralLinux|-|https://spirallinux.github.io/|Selection of Linux spins built from Debian GNU/Linux, with a focus on simplicity and out-of-the-box usability across all the major desktop environments.\";;\n        tails)            INFO=\"Tails|-|https://tails.net/|Portable operating system that protects against surveillance and censorship.\";;\n        tinycore)         INFO=\"Tiny Core Linux|-|http://www.tinycorelinux.net/|Highly modular based system with community build extensions.\";;\n        trisquel)         INFO=\"Trisquel-|https://trisquel.info/|Fully free operating system for home users, small enterprises and educational centers.\";;\n        truenas-core)     INFO=\"TrueNAS Core|-|https://www.truenas.com/truenas-core/|World‚Äôs most popular storage OS because it gives you the power to build your own professional-grade storage system to use in a variety of data-intensive applications without any software costs.\";;\n        truenas-scale)    INFO=\"TrueNAS Scale|-|https://www.truenas.com/truenas-scale/|Open Source Hyperconverged Infrastructure (HCI) solution. In addition to powerful scale-out storage capabilities, SCALE adds Linux Containers and VMs (KVM) so apps run closer to data.\";;\n        tuxedo-os)        INFO=\"Tuxedo OS|-|https://www.tuxedocomputers.com/en/|KDE Ubuntu LTS designed to go with their Linux hardware.\";;\n        ubuntu)           INFO=\"Ubuntu|-|https://ubuntu.com/|Complete desktop Linux operating system, freely available with both community and professional support.\";;\n        ubuntu-budgie)    INFO=\"Ubuntu Budgie|-|https://ubuntubudgie.org/|Community developed distribution, integrating the Budgie Desktop Environment with Ubuntu at its core.\";;\n        ubuntucinnamon)   INFO=\"Ubuntu Cinnamon|-|https://ubuntucinnamon.org/|Community-driven, featuring Linux Mint‚Äôs Cinnamon Desktop with Ubuntu at the core, packed fast and full of features, here is the most traditionally modern desktop you will ever love.\";;\n        ubuntukylin)      INFO=\"Ubuntu Kylin|-|https://ubuntukylin.com/|Universal desktop operating system for personal computers, laptops, and embedded devices. It is dedicated to bringing a smarter user experience to users all over the world.\";;\n        ubuntu-mate)      INFO=\"Ubuntu MATE|-|https://ubuntu-mate.org/|Stable, easy-to-use operating system with a configurable desktop environment. It is ideal for those who want the most out of their computers and prefer a traditional desktop metaphor. Using Mate desktop.\";;\n        ubuntu-server)    INFO=\"Ubuntu Server|-|https://ubuntu.com/server|Brings economic and technical scalability to your datacentre, public or private. Whether you want to deploy an OpenStack cloud, a Kubernetes cluster or a 50,000-node render farm, Ubuntu Server delivers the best value scale-out performance available.\";;\n        ubuntustudio)     INFO=\"Ubuntu Studio|-|https://ubuntustudio.org/|Comes preinstalled with a selection of the most common free multimedia applications available, and is configured for best performance for various purposes: Audio, Graphics, Video, Photography and Publishing.\";;\n        ubuntu-unity)     INFO=\"Ubuntu Unity|-|https://ubuntuunity.org/|Flavor of Ubuntu featuring the Unity7 desktop environment (the default desktop environment used by Ubuntu from 2010-2017).\";;\n        vanillaos)        INFO=\"Vanilla OS|-|https://vanillaos.org/|Designed to be a reliable and productive operating system for your daily work.\";;\n        void)             INFO=\"Void Linux|anon:voidlinux|https://voidlinux.org/|General purpose operating system. Its package system allows you to quickly install, update and remove software; software is provided in binary packages or can be built directly from sources.\";;\n        vxlinux)          INFO=\"VX Linux|-|https://vxlinux.org/|Pre-configured, secure systemd-free Plasma desktop with focus on convenience, performance and simplicity. Based on the excellent Void Linux.\";;\n        windows)          INFO=\"Windows|-|https://www.microsoft.com/en-us/windows/|Whether you‚Äôre gaming, studying, running a business, or running a household, Windows helps you get it done.\";;\n        windows-server)   INFO=\"Windows Server|-|https://www.microsoft.com/en-us/windows-server/|Platform for building an infrastructure of connected applications, networks, and web services.\";;\n        xubuntu)          INFO=\"Xubuntu|-|https://xubuntu.org/|Elegant and easy to use operating system. Xubuntu comes with Xfce, which is a stable, light and configurable desktop environment.\";;\n        zorin)            INFO=\"Zorin OS|-|https://zorin.com/os/|Alternative to Windows and macOS designed to make your computer faster, more powerful, secure, and privacy-respecting.\";;\n    esac\n    echo \"${INFO}\"\n}\n\nfunction show_os_info() {\n    echo\n    echo -e \"$(os_info \"${1}\" | cut -d'|' -f 1)\"\n    echo -e \" - Credentials:\\t$(os_info \"${1}\" | cut -d'|' -f 2)\"\n    echo -e \" - Website:\\t$(os_info \"${1}\" | cut -d'|' -f 3)\"\n    echo -e \" - Description:\\t$(os_info \"${1}\" | cut -d'|' -f 4)\"\n}\n\nfunction pretty_name() {\n    os_info \"${1}\" | cut -d'|' -f 1\n}\n\n# Just in case quickget want use it\nfunction os_homepage() {\n    os_info \"${1}\" | cut -d'|' -f 3\n}\n\nfunction error_specify_os() {\n    echo \"ERROR! You must specify an operating system.\"\n    echo \"- Supported Operating Systems:\"\n    os_support | fmt -w 80\n    echo -e \"\\nTo see all possible arguments, use:\\n   quickget -h  or  quickget --help\"\n    exit 1\n}\n\nfunction os_supported() {\n    if [[ ! \"$(os_support)\" =~ ${OS} ]]; then\n        echo -e \"ERROR! ${OS} is not a supported OS.\\n\"\n        os_support | fmt -w 80\n        exit 1\n    fi\n}\n\nfunction error_specify_release() {\n    show_os_info \"${OS}\"\n    case ${OS} in\n        *ubuntu-server*)\n            echo -en \" - Releases:\\t\"\n            releases_ubuntu-server\n            ;;\n        *ubuntu*)\n            echo -en \" - Releases:\\t\"\n            releases_ubuntu\n            ;;\n        *windows*)\n            echo -en \" - Releases:\\t\"\n            \"releases_${OS}\"\n            echo -en \" - Languages:\\t\"\n            \"languages_${OS}\"\n            echo \"${I18NS[@]}\"\n            ;;\n        *)\n            echo -en \" - Releases:\\t\"\n            \"releases_${OS}\" | fmt -w 80\n            if [[ $(type -t \"editions_${OS}\") == function ]]; then\n                echo -en \" - Editions:\\t\"\n                \"editions_${OS}\" | fmt -w 80\n            fi\n            ;;\n    esac\n    echo -e \"\\nERROR! You must specify a release.\"\n    exit 1\n}\n\nfunction error_not_supported_release() {\n    if [[ ! \"${RELEASES[*]}\" =~ ${RELEASE} ]]; then\n        echo -e \"ERROR! ${DISPLAY_NAME} ${RELEASE} is not a supported release.\\n\"\n        echo -n ' - Supported releases: '\n        \"releases_${OS}\"\n        exit 1\n    fi\n}\n\nfunction error_not_supported_lang() {\n    echo -e \"ERROR! ${I18N} is not a supported $(pretty_name \"${OS}\") language\\n\"\n    echo -n ' - Editions: '\n    for I18N in \"${I18NS[@]}\"; do\n        echo -n \"${I18N} \"\n    done\n    exit 1\n}\n\nfunction error_not_supported_argument() {\n    echo \"ERROR! Not supported argument\"\n    echo \"To see all possible arguments, use:\"\n    echo \"   quickget -h  or  quickget --help\"\n    exit 1\n}\n\nfunction handle_missing() {\n    # Handle odd missing Fedora combinations\n    case \"${OS}\" in\n        fedora)\n            # First we need to handle the Beta naming kludge\n            if [[ \"${RELEASE}\" == *\"_Beta\" ]]; then\n                NRELEASE=\"${RELEASE/_Beta/}\"\n                else\n                NRELEASE=\"${RELEASE}\"\n            fi\n            if [[ \"${NRELEASE}\" -lt 40 && \"${EDITION}\" == \"Onyx\" ]] || [[ \"${NRELEASE}\" -lt 40 && \"${EDITION}\" == \"Sericea\" ]]; then\n                echo \"ERROR! Unsupported combination\"\n                echo \"       Fedora ${RELEASE} ${EDITION} is not available, please choose another Release or Edition\"\n                exit 1\n            fi;;\n    esac\n}\n\nfunction validate_release() {\n    local DISPLAY_NAME=\"\"\n    local RELEASE_GENERATOR=\"\"\n    local RELEASES=\"\"\n\n    DISPLAY_NAME=\"$(pretty_name \"${OS}\")\"\n    case ${OS} in\n        *ubuntu-server*) RELEASE_GENERATOR=\"releases_ubuntu-server\";;\n        *ubuntu*) RELEASE_GENERATOR=\"releases_ubuntu\";;\n        *) RELEASE_GENERATOR=\"${1}\";;\n    esac\n    RELEASES=$(${RELEASE_GENERATOR})\n    error_not_supported_release\n}\n\nfunction list_json() {\n    # Reference: https://stackoverflow.com/a/67359273\n    list_csv | jq -R 'split(\",\") as $h|reduce inputs as $in ([]; . += [$in|split(\",\")|. as $a|reduce range(0,length) as $i ({};.[$h[$i]]=$a[$i])])'\n    exit 0\n}\n\nfunction list_csv() {\n    CSV_DATA=\"$(csv_data)\"\n\n    echo \"Display Name,OS,Release,Option,Downloader,PNG,SVG\"\n    sort -t',' -k2,2 <<<\"${CSV_DATA}\"\n\n    exit 0\n}\n\nfunction csv_data() {\n    local DISPLAY_NAME\n    local DL=\"\"\n    local DOWNLOADER\n    local FUNC\n    local OPTION\n    local OS\n    local PNG\n    local RELEASE\n    local SVG\n    local HAS_ZSYNC=0\n\n    # Check if zsync is available\n    if command -v zsync &>/dev/null; then\n        HAS_ZSYNC=1\n    fi\n\n    for OS in $(os_support); do\n        local EDITIONS=\"\"\n        DISPLAY_NAME=\"$(pretty_name \"${OS}\")\"\n\n        case ${OS} in\n            *ubuntu-server*) FUNC=\"ubuntu-server\";;\n            *ubuntu*) FUNC=\"ubuntu\";;\n            *) FUNC=\"${OS}\";;\n        esac\n\n        PNG=\"https://quickemu-project.github.io/quickemu-icons/png/${FUNC}/${FUNC}-quickemu-white-pinkbg.png\"\n        SVG=\"https://quickemu-project.github.io/quickemu-icons/svg/${FUNC}/${FUNC}-quickemu-white-pinkbg.svg\"\n\n        if [[ $(type -t \"editions_${OS}\") == function ]]; then\n            EDITIONS=$(editions_\"${OS}\")\n        fi\n\n        for RELEASE in $(\"releases_${FUNC}\"); do\n            if [[ \"${OS}\" == *\"ubuntu\"* ]] && [[ ${RELEASE} == *\"daily\"*  ]] && [ ${HAS_ZSYNC} -eq 1 ]; then\n                DOWNLOADER=\"zsync\"\n            else\n                DOWNLOADER=\"${DL}\"\n            fi\n\n            # If the OS has an editions_() function, use it.\n            if [[ ${EDITIONS} ]]; then\n                for OPTION in ${EDITIONS}; do\n                    echo \"${DISPLAY_NAME},${OS},${RELEASE},${OPTION},${DOWNLOADER},${PNG},${SVG}\"\n                done\n            elif [[ \"${OS}\" == \"windows\"* ]]; then\n                \"languages_${OS}\"\n                for I18N in \"${I18NS[@]}\"; do\n                    echo \"${DISPLAY_NAME},${OS},${RELEASE},${I18N},${DOWNLOADER},${PNG},${SVG}\"\n                done\n            else\n                echo \"${DISPLAY_NAME},${OS},${RELEASE},,${DOWNLOADER},${PNG},${SVG}\"\n            fi\n        done &\n    done\n    wait\n}\n\nfunction list_supported() {\n    list_csv | cut -d ',' -f2,3,4 | tr ',' ' '\n    exit 0\n}\n\nfunction test_result() {\n    local OS=\"${1}\"\n    local RELEASE=\"${2}\"\n    local EDITION=\"${3:-}\"\n    local URL=\"${4:-}\"\n    local RESULT=\"${5:-}\"\n    if [ -n \"${EDITION}\" ]; then\n        OS=\"${OS}-${RELEASE}-${EDITION}\"\n    else\n        OS=\"${OS}-${RELEASE}\"\n    fi\n\n    if [ -n \"${RESULT}\" ]; then\n        # Pad the OS string for consistent output\n        OS=$(printf \"%-35s\" \"${OS}\")\n        echo -e \"${RESULT}: ${OS} ${URL}\"\n    else\n        OS=$(printf \"%-36s\" \"${OS}:\")\n        echo -e \"${OS} ${URL}\"\n    fi\n}\n\nfunction test_all() {\n    OS=\"${1}\"\n    os_supported\n\n    local CHECK=\"\"\n    local FUNC=\"${OS}\"\n    if [[ \"${OS}\" == *ubuntu* && \"${OS}\" != \"ubuntu-server\" ]]; then\n        FUNC=\"ubuntu\"\n    fi\n    local URL=\"\"\n\n    for RELEASE in $(\"releases_${FUNC}\"); do\n        if [[ $(type -t \"editions_${OS}\") == function ]]; then\n            for EDITION in $(editions_\"${OS}\"); do\n                validate_release releases_\"${OS}\"\n                URL=$(get_\"${OS}\" | cut -d' ' -f1 | head -n 1)\n                if [ \"${OPERATION}\" == \"show\" ]; then\n                    test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\"\n                elif [ \"${OPERATION}\" == \"test\" ]; then\n                    CHECK=$(web_check \"${URL}\" && echo \"PASS\" || echo \"FAIL\")\n                    test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\" \"${CHECK}\"\n                fi\n            done\n        elif [[ \"${OS}\" == \"windows\"* ]]; then\n            \"languages_${OS}\"\n            for I18N in \"${I18NS[@]}\"; do\n                validate_release releases_\"${OS}\"\n                if [ \"${OPERATION}\" == \"show\" ]; then\n                    test_result \"${OS}\" \"${RELEASE}\" \"${I18N}\" \"\"\n                elif [ \"${OPERATION}\" == \"test\" ]; then\n                    test_result \"${OS}\" \"${RELEASE}\" \"${I18N}\" \"${URL}\" \"SKIP\"\n                fi\n            done\n        elif [[ \"${OS}\" == \"macos\" ]]; then\n            validate_release releases_macos\n            (get_macos)\n        elif [ \"${OS}\" == \"ubuntu-server\" ]; then\n            validate_release releases_ubuntu-server\n            (get_ubuntu-server)\n        elif [[ \"${OS}\" == *ubuntu* ]]; then\n            validate_release releases_ubuntu\n            (get_ubuntu)\n        else\n            validate_release releases_\"${OS}\"\n            URL=$(get_\"${OS}\" | cut -d' ' -f1 | head -n 1)\n            if [ \"${OPERATION}\" == \"show\" ]; then\n                test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\"\n            elif [ \"${OPERATION}\" == \"test\" ]; then\n                CHECK=$(web_check \"${URL}\" && echo \"PASS\" || echo \"FAIL\")\n                test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\" \"${CHECK}\"\n            fi\n        fi\n    done\n}\n\nfunction os_support() {\n    echo alma \\\n    alpine \\\n    android \\\n    antix \\\n    archcraft \\\n    archlinux \\\n    arcolinux \\\n    artixlinux \\\n    athenaos \\\n    batocera \\\n    bazzite \\\n    biglinux \\\n    blendos \\\n    bodhi \\\n    bunsenlabs \\\n    cachyos \\\n    centos-stream \\\n    chimeralinux \\\n    crunchbang++ \\\n    debian \\\n    deepin \\\n    devuan \\\n    dragonflybsd \\\n    easyos \\\n    edubuntu \\\n    elementary \\\n    endeavouros \\\n    endless \\\n    fedora \\\n    freebsd \\\n    freedos \\\n    garuda \\\n    gentoo \\\n    ghostbsd \\\n    gnomeos \\\n    guix \\\n    haiku \\\n    holoiso \\\n    kali \\\n    kdeneon \\\n    kolibrios \\\n    kubuntu \\\n    linuxlite \\\n    linuxmint \\\n    lmde \\\n    lubuntu \\\n    maboxlinux \\\n    macos \\\n    mageia \\\n    manjaro \\\n    mxlinux \\\n    netboot \\\n    netbsd \\\n    nitrux \\\n    nixos \\\n    nwg-shell \\\n    openbsd \\\n    openindiana \\\n    opensuse \\\n    oraclelinux \\\n    parrotsec \\\n    peppermint \\\n    popos \\\n    porteus \\\n    primtux \\\n    proxmox-ve \\\n    pureos \\\n    reactos \\\n    rebornos \\\n    rockylinux \\\n    siduction \\\n    slackware \\\n    slax \\\n    slint \\\n    slitaz \\\n    solus \\\n    sparkylinux \\\n    spirallinux \\\n    tails \\\n    tinycore \\\n    trisquel \\\n    truenas-core \\\n    truenas-scale \\\n    tuxedo-os \\\n    ubuntu \\\n    ubuntu-budgie \\\n    ubuntu-mate \\\n    ubuntu-server \\\n    ubuntu-unity \\\n    ubuntucinnamon \\\n    ubuntukylin \\\n    ubuntustudio \\\n    vanillaos \\\n    void \\\n    vxlinux \\\n    windows \\\n    windows-server \\\n    xubuntu \\\n    zorin\n}\n\nfunction releases_alma() {\n    echo 9 8\n}\n\nfunction editions_alma() {\n    echo boot minimal dvd\n}\n\nfunction releases_alpine() {\n    local REL=\"\"\n    local RELS=\"\"\n    RELS=$(web_pipe \"https://dl-cdn.alpinelinux.org/alpine/\" | grep '\"v' | cut -d'\"' -f2 | tr -d / | sort -Vr | head -n 10)\n    for REL in ${RELS}; do\n        if web_check \"https://dl-cdn.alpinelinux.org/alpine/${REL}/releases/x86_64/\"; then\n            echo -n \"${REL} \"\n        fi\n    done\n}\n\nfunction releases_android() {\n    echo 9.0 8.1 7.1\n}\n\nfunction editions_android() {\n    echo x86_64 x86\n}\n\nfunction releases_antix() {\n    echo 23.1 23 22 21\n}\n\nfunction editions_antix() {\n    echo net-sysv core-sysv base-sysv full-sysv net-runit core-runit base-runit full-runit\n}\n\nfunction releases_archcraft() {\n    echo latest\n}\n\nfunction releases_archlinux() {\n    echo latest\n}\n\nfunction releases_arcolinux() {\n    #shellcheck disable=SC2046,SC2005\n    # breaking change in v24.05\n    # v24.05.1 is the first release with the new naming scheme and too complex to parse old and new so just show the new\n    echo $(web_pipe \"https://mirror.accum.se/mirror/arcolinux.info/iso/\" | grep -o -E -e \"v24.0[5-9].[[:digit:]]{2}\"  -e \"v24.1[0-2].[[:digit:]]{2}\" | sort -ru | head -n 5)\n}\n\nfunction editions_arcolinux() {\n    echo net plasma pro\n}\n\nfunction releases_artixlinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirror1.artixlinux.org/iso/\" | grep \"artix-\" | cut -d'\"' -f2 | grep -v sig | cut -d'-' -f 4 | sort -ru | tail -n 1)\n}\n\nfunction editions_artixlinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirror1.artixlinux.org/iso/\" | grep \"artix-\" | cut -d'\"' -f2 | grep -v sig | cut -d'-' -f2-3 | sort -u)\n}\n\nfunction releases_athenaos() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://api.github.com/repos/Athena-OS/athena/releases\" | grep 'download_url' | grep rolling | cut -d'/' -f8 | sort -u)\n}\n\nfunction releases_batocera() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirrors.o2switch.fr/batocera/x86_64/stable/\" | grep ^\\<a | cut -d'\"' -f2 | cut -d '/' -f1 | grep -v '\\.' | sort -ru | tail -n +2 | head -n 5)\n}\n\nfunction releases_bazzite() {\n    echo latest\n}\n\nfunction editions_bazzite() {\n    echo gnome kde\n}\n\nfunction releases_biglinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://iso.biglinux.com.br\" | grep -Eo 'biglinux_[0-9]{4}(-[0-9]{2}){2}_k[0-9]{2,3}.iso' | cut -d'_' -f2 | sort -ru | head -n 1)\n}\n\nfunction editions_biglinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://iso.biglinux.com.br\" | grep -Eo \"biglinux_$(releases_biglinux)_k[0-9]{2,3}.iso\" | cut -d'_' -f3 | cut -d'.' -f1 | sort -Vru)\n}\n\nfunction releases_blendos() {\n    # there is now just a single latest iso\n    echo latest\n}\n\nfunction releases_bodhi() {\n    echo 7.0.0\n}\n\nfunction editions_bodhi() {\n    echo standard hwe s76\n}\n\nfunction releases_bunsenlabs() {\n    echo boron\n}\n\nfunction releases_cachyos() {\n    # new cdn setup 10/2024\n    echo latest\n}\n\nfunction editions_cachyos() {\n    # desktop version now installs different desktop environments\n    echo desktop handheld\n}\n\nfunction releases_centos-stream() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://linuxsoft.cern.ch/centos-stream/\" | grep \"\\-stream\" | cut -d'\"' -f 6 | cut -d'-' -f 1)\n}\n\nfunction editions_centos-stream() {\n    echo boot dvd1\n}\n\nfunction releases_chimeralinux() {\n    echo latest\n}\n\nfunction editions_chimeralinux() {\n    echo base gnome\n}\n\nfunction releases_crunchbang++() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://api.github.com/repos/CBPP/cbpp/releases\" | grep 'download_url' | cut -d'-' -f2 | grep '^[0-9]' | sort -gru)\n}\n\nfunction releases_debian() {\n    local ARCHIVE=\"\"\n    local MAJ=\"\"\n    local NEW=\"\"\n    local OLD=\"\"\n    NEW=$(web_pipe \"https://cdimage.debian.org/debian-cd/\" | grep '\\.[0-9]/' | cut -d'>' -f 9 | cut -d'/' -f 1)\n    echo -n \"${NEW}\"\n    MAJ=$(echo \"${NEW}\" | cut -d'.' -f 1)\n    ARCHIVE=\"$(web_pipe \"https://cdimage.debian.org/cdimage/archive/\" | grep folder | grep -v NEVER | cut -d'\"' -f 6)\"\n    for i in {1..2}; do\n        CUR=$((MAJ - i))\n        OLD=$(grep ^\"${CUR}\"  <<< \"${ARCHIVE}\" | tail -n 1 | tr -d '/')\n        echo -n \" ${OLD}\"\n    done\n    echo\n}\n\nfunction editions_debian() {\n    echo standard cinnamon gnome kde lxde lxqt mate xfce netinst\n}\n\nfunction releases_deepin() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirrors.kernel.org/deepin-cd/\" | grep \"href=\" | cut -d'\"' -f2 | grep -v \"\\.\\.\" | grep -v nightly | grep -v preview | sed 's|/||g' | tail -n 10 | sort -r)\n}\n\nfunction releases_devuan() {\n    echo daedalus chimaera beowulf\n}\n\nfunction releases_dragonflybsd() {\n    # If you remove \"\".bz2\" from the end of the searched URL, you will get only the current release - currently 6.4.0\n    # We could add a variable so this behaviour is optional/switchable (maybe from option or env)\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirror-master.dragonflybsd.org/iso-images/\" | grep -E -o '\"dfly-x86_64-.*_REL.iso.bz2\"' | grep -o -E '[[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+')\n}\n\nfunction releases_easyos() {\n    local ALL_RELEASES=\"\"\n    local YEAR=\"\"\n    # get the latest 2 years of releases so that when we hit next year we still have the latest 2 years\n    TWO_YEARS=$(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/ | grep -o -E '[[:digit:]]{4}/' | sort -nr | tr -d /  | head -n 2 )\n    for YEAR in ${TWO_YEARS} ; do\n        ALL_RELEASES=\"${ALL_RELEASES} $(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/ | grep -o -E '[[:digit:]]+(\\.[[:digit:]])+/' | tr -d / | sort -nr)\"\n    done\n    echo ${ALL_RELEASES}\n}\n\n\nfunction releases_elementary() {\n    echo 8.0 7.1 7.0\n}\n\nfunction releases_endeavouros() {\n    local ENDEAVOUR_RELEASES=\"\"\n    ENDEAVOUR_RELEASES=\"$(web_pipe \"https://mirror.alpix.eu/endeavouros/iso/\" | grep -o '<a href=\"[^\"]*.iso\">' | sed 's/^<a href=\"//;s/.iso\">.*//' | grep -v 'x86_64' | LC_ALL=\"en_US.UTF-8\" sort -Mr | cut -c 13- | head -n 5 | tr '\\n' ' ')\"\n    echo \"${ENDEAVOUR_RELEASES,,}\"\n}\n\nfunction releases_endless() {\n    echo 6.0.4\n}\n\nfunction editions_endless() {\n    echo base en fr pt_BR es\n}\n\nfunction releases_fedora() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://getfedora.org/releases.json\" | jq -r 'map(.version) | unique | .[]' | sed 's/ /_/g' | sort -r)\n}\n\nfunction editions_fedora() {\n    #shellcheck disable=SC2046,SC2005\n    if [[ -z ${RELEASE} ]]; then\n          echo $(web_pipe \"https://getfedora.org/releases.json\" | jq -r \"map(select(.arch==\\\"x86_64\\\" and .variant!=\\\"Labs\\\" and .variant!=\\\"IoT\\\" and .variant!=\\\"Container\\\" and .variant!=\\\"Cloud\\\" and .variant!=\\\"Everything\\\"  and .subvariant!=\\\"Security\\\" and .subvariant!=\\\"Server_KVM\\\" and .subvariant!=\\\"SoaS\\\")) | map(.subvariant) | unique | .[]\")\n    else\n        echo $(web_pipe \"https://getfedora.org/releases.json\" | jq -r \"map(select(.arch==\\\"x86_64\\\" and .version==\\\"${RELEASE/_/ }\\\" and .variant!=\\\"Labs\\\" and .variant!=\\\"IoT\\\" and .variant!=\\\"Container\\\" and .variant!=\\\"Cloud\\\" and .variant!=\\\"Everything\\\"  and .subvariant!=\\\"Security\\\" and .subvariant!=\\\"Server_KVM\\\" and .subvariant!=\\\"SoaS\\\")) | map(.subvariant) | unique | .[]\")\n    fi\n}\n\nfunction releases_freebsd() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://download.freebsd.org/ftp/releases/amd64/amd64/\" | grep -Eo \"href=\\\"[0-9\\.]+-RELEASE\" | grep -oE '[0-9\\.]+' | sort -r)\n}\n\nfunction editions_freebsd() {\n    echo disc1 dvd1\n}\n\nfunction releases_freedos() {\n    echo 1.3 1.2\n}\n\nfunction releases_garuda() {\n    echo latest\n}\n\nfunction editions_garuda() {\n    echo cinnamon dr460nized dr460nized-gaming gnome i3 kde-git kde-lite lxqt-kwin mate qtile sway wayfire xfce\n}\n\nfunction releases_gentoo() {\n    echo latest\n}\n\nfunction editions_gentoo() {\n    echo minimal livegui\n}\n\nfunction releases_ghostbsd() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://download.ghostbsd.org/releases/amd64/\" | grep \"href\" | cut -d'\"' -f2 | cut -d'/' -f1 | sort -r | tail -n +3 | head -n 3)\n}\n\nfunction editions_ghostbsd() {\n    echo mate xfce\n}\n\nfunction releases_gnomeos() {\n    #shellcheck disable=SC2046,SC2005\n    echo \"nightly\" $(web_pipe \"https://download.gnome.org/gnomeos/\" | grep \"title=\" | awk -F'\"' '{print $4}' | tr -d '/' | sort -nr)\n}\n\nfunction releases_guix() {\n    echo 1.4.0 1.3.0\n}\n\nfunction releases_haiku() {\n    echo r1beta5 r1beta4 r1beta3\n}\n\nfunction editions_haiku() {\n    echo x86_64 x86_gcc2h\n}\n\nfunction releases_holoiso() {\n    echo \"latest\"\n}\n\nfunction releases_kali() {\n    echo current kali-weekly\n}\n\nfunction releases_kdeneon() {\n    echo user testing unstable developer\n}\n\nfunction releases_kolibrios() {\n    echo latest\n}\n\nfunction editions_kolibrios() {\n    echo en_US  ru_RU  it_IT  es_ES\n}\n\nfunction releases_linuxlite() {\n    echo 6.6 6.4 6.2 6.0\n}\n\nfunction releases_linuxmint() {\n    echo 22 21.3 21.2 21.1 21 20.3 20.2\n}\n\nfunction editions_linuxmint() {\n    echo cinnamon mate xfce\n}\n\nfunction editions_lmde() {\n    echo cinnamon\n}\n\nfunction releases_lmde() {\n    echo 6\n}\n\nfunction releases_maboxlinux() {\n    echo latest\n}\n\nfunction releases_macos() {\n    echo mojave catalina big-sur monterey ventura sonoma\n}\n\nfunction releases_mageia() {\n    echo 9 8\n}\n\nfunction editions_mageia() {\n    echo Plasma GNOME Xfce\n}\n\nfunction editions_manjaro() {\n    echo full minimal\n}\n\nfunction releases_manjaro() {\n    echo xfce gnome plasma cinnamon i3 sway\n}\n\nfunction releases_mxlinux() {\n    # needs header, so not web_pipe:\n    curl -Ils \"https://sourceforge.net/projects/mx-linux/files/latest/download\" | grep -i 'location:' | cut -d? -f1 | cut -d_ -f1 | cut -d- -f3\n}\n\nfunction editions_mxlinux() {\n    echo Xfce KDE Fluxbox\n}\n\nfunction releases_netboot() {\n    echo latest\n}\n\nfunction releases_netbsd() {\n    # V8 is EOL so filter it out\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://cdn.netbsd.org/pub/NetBSD/iso/\" | grep -o -E '\"[[:digit:]]+\\.[[:digit:]]+/\"' | tr -d '\"/' | grep -v ^8 | sort -nr | head -n 4)\n}\n\nfunction releases_nitrux() {\n    echo latest\n}\n\nfunction releases_nixos() {\n    # Lists unstable plus the two most recent releases\n    #shellcheck disable=SC2046\n    echo unstable $(web_pipe \"https://nix-channels.s3.amazonaws.com/?delimiter=/\" | grep -o -E 'nixos-[[:digit:]]+\\.[[:digit:]]+' | cut -d- -f2 | sort -nru | head -n +2)\n}\n\nfunction editions_nixos() {\n    echo minimal plasma gnome\n}\n\nfunction releases_nwg-shell() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://sourceforge.net/projects/nwg-iso/rss?path=/\" | grep 'url=' | grep '64.iso' | cut -d'/' -f12 | cut -d'-' -f3)\n}\n\nfunction releases_openbsd() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirror.leaseweb.com/pub/OpenBSD/\" | grep -e '6\\.[8-9]/' -e '[7-9]\\.' | cut -d\\\" -f4 | tr -d '/' | sort -r)\n}\n\nfunction releases_openindiana() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://dlc.openindiana.org/isos/hipster/\" | grep link | cut -d'/' -f 1 | cut -d '\"' -f4 | sort -r | tail -n +2 | head -n 5)\n}\n\nfunction editions_openindiana() {\n    echo gui text minimal\n}\n\nfunction releases_opensuse() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://download.opensuse.org/distribution/leap/\" | grep 'class=\"name\"' | cut -d '/' -f2 | grep -v 42 | sort -r) aeon microos tumbleweed\n}\n\nfunction releases_oraclelinux() {\n    echo 9.3 9.2 9.1 9.0 8.9 8.8 8.7 8.6 8.5 8.4 7.9 7.8 7.7\n}\n\nfunction releases_parrotsec() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://download.parrot.sh/parrot/iso/\" |  grep -o -E 'href=\"[[:digit:]]\\.[[:digit:]]+' | sort -nr | head -n 3 | cut -d\\\" -f 2 )\n}\n\nfunction editions_parrotsec() {\n    echo home htb security\n}\n\nfunction releases_peppermint() {\n    echo latest\n}\n\nfunction editions_peppermint() {\n    echo devuan-xfce devuan-gnome debian-xfce debian-gnome\n}\n\nfunction releases_popos() {\n    echo 22.04 20.04\n}\n\nfunction editions_popos() {\n    echo intel nvidia\n}\n\nfunction releases_porteus() {\n    echo 5.01\n}\n\nfunction editions_porteus() {\n    echo cinnamon gnome kde lxde lxqt mate openbox xfce\n}\n\nfunction releases_primtux() {\n    echo 7\n}\n\nfunction editions_primtux() {\n    echo 2022-10\n}\n\nfunction releases_proxmox-ve() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe https://enterprise.proxmox.com/iso/ | grep proxmox-ve | grep -E -o '[0-9]+\\.[0-9]+-[0-9]\\.iso' | uniq | sort -ru | cut -d'.' -f 1-2)\n}\n\nfunction releases_pureos() {\n    web_pipe \"https://www.pureos.net/download/\" | grep -m 1 \"downloads.puri\" | cut -d '\"' -f 2 | cut -d '-' -f 4\n}\n\nfunction editions_pureos() {\n    echo gnome plasma\n}\n\nfunction releases_reactos() {\n    echo latest\n}\n\nfunction releases_rebornos() {\n    echo latest\n}\n\nfunction releases_rockylinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"http://dl.rockylinux.org/vault/rocky/\" | grep \"^<a href\" | grep -v full | grep -v RC | grep -v ISO | cut -d'\"' -f2 | tr -d / | sort -ru)\n}\n\nfunction editions_rockylinux() {\n    echo minimal dvd boot\n}\n\nfunction releases_siduction() {\n    echo latest\n}\n\nfunction editions_siduction() {\n    #shellcheck disable=SC2046,SC2005\n    NAME=$(web_pipe \"https://mirror.math.princeton.edu/pub/siduction/iso/\" | grep folder | cut -d'\"' -f8 | tr -d '/')\n    web_pipe \"https://mirror.math.princeton.edu/pub/siduction/iso/${NAME}/\" | grep folder | cut -d'\"' -f8 | tr -d '/' | sort -u\n}\n\nfunction releases_slackware() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://slackware.nl/slackware/slackware-iso/\" | grep \"slackware-\" | cut -d'<' -f7 | cut -d'-' -f2 | sort -ru | head -n 5)\n}\n\nfunction releases_slax() {\n    echo latest\n}\n\nfunction editions_slax() {\n    echo debian slackware\n}\n\nfunction releases_slint() {\n    echo \"15.0-5\"\n}\n\nfunction releases_slitaz() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://mirror.slitaz.org/iso/rolling/\" | grep \"class='iso'\" | cut -d\"'\" -f4 | cut -d'-' -f3- | grep iso | cut -d'.' -f1 | sort -u)\n}\n\nfunction releases_solus() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe_json \"https://downloads.getsol.us/isos/\" | jq -r '.[].name[:-1]' | grep -E \"^[0-9-]+$\" | sort -u)\n}\n\nfunction editions_solus() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe_json \"https://downloads.getsol.us/isos/$(releases_solus | tail -n1)/\" | jq -r '.[].name | sub(\"Solus-(?<e>.*)-Release-.*\"; \"\\(.e)\")' | sort -u)\n}\n\nfunction releases_sparkylinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://sparkylinux.org/download/stable/\" |  grep -E -o \"sparkylinux-.*\\.iso\\\"\" | cut -d'-' -f2 | sort -ru)\n}\n\nfunction editions_sparkylinux() {\n    #shellcheck disable=SC2046,SC2005\n    if [ -z \"${RELEASE}\" ]; then\n        echo $(web_pipe \"https://sparkylinux.org/download/stable/\" | grep -E -o \"sparkylinux-.*\\.iso\\\"\" | cut -d'-' -f4 | cut -d'.' -f1 | sort -u)\n    else\n        echo $(web_pipe \"https://sparkylinux.org/download/stable/\" | grep -E -o \"sparkylinux-${RELEASE}-.*\\.iso\\\"\" | cut -d'-' -f4 | cut -d'.' -f1 | sort -u)\n    fi\n\n}\n\nfunction releases_spirallinux() {\n    echo latest\n}\n\nfunction editions_spirallinux() {\n    echo Plasma XFCE Mate LXQt Gnome Budgie Cinnamon Builder\n}\n\nfunction releases_tails() {\n    echo stable\n}\n\nfunction releases_tinycore() {\n    echo 15 14\n}\n\nfunction editions_tinycore() {\n    echo Core TinyCore CorePlus CorePure64 TinyCorePure64\n}\n\nfunction releases_trisquel() {\n    echo 11.0 10.0.1\n}\n\nfunction editions_trisquel() {\n    echo mate lxde kde sugar\n}\n\nfunction releases_truenas() {\n    if [[ ${OS} == truenas ]] ; then\n        echo \"ERROR! The supported TrueNAS OS values are truenas-core or truenas-scale\"\n        exit 1;\n    fi\n}\n\nfunction releases_truenas-core() {\n    echo 13\n}\n\nfunction releases_truenas-scale() {\n    echo 24\n}\n\nfunction releases_tuxedo-os() {\n    echo current\n}\n\nfunction releases_ubuntu() {\n    local VERSION_DATA=\"\"\n    local SUPPORTED_VERSIONS=()\n    VERSION_DATA=\"$(IFS=$'\\n' web_pipe https://api.launchpad.net/devel/ubuntu/series | jq -r '.entries[]')\"\n    # shellcheck disable=SC2207\n    SUPPORTED_VERSIONS=($(IFS=$'\\n' jq -r 'select(.status==\"Supported\" or .status==\"Current Stable Release\") | .version' <<<\"${VERSION_DATA}\" | sort))\n    case \"${OS}\" in\n        ubuntu)\n            echo \"${SUPPORTED_VERSIONS[@]}\" daily-live;;\n        kubuntu|lubuntu|ubuntukylin|ubuntu-mate|ubuntustudio|xubuntu)\n            # after 16.04\n            echo \"${SUPPORTED_VERSIONS[@]:1}\" daily-live;;\n        ubuntu-budgie)\n            # after 18.04\n            echo \"${SUPPORTED_VERSIONS[@]:2}\" daily-live;;\n        edubuntu|ubuntu-unity|ubuntucinnamon)\n            # after 23.10\n            echo \"${SUPPORTED_VERSIONS[@]:5}\" daily-live;;\n    esac\n}\n\nfunction releases_ubuntu-server() {\n    local ALL_VERSIONS=()\n    # shellcheck disable=SC2207\n    ALL_VERSIONS=($(IFS=$'\\n' web_pipe http://releases.ubuntu.com/streams/v1/com.ubuntu.releases:ubuntu-server.json | jq -r '.products[] | select(.arch==\"amd64\") | .version' | sort -rV))\n    echo daily-live \"${ALL_VERSIONS[@]}\"\n}\n\nfunction releases_vanillaos() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://api.github.com/repos/Vanilla-OS/live-iso/releases\" | grep 'download_url' | cut -d'/' -f8 | sort -ru)\n}\n\nfunction releases_void() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://repo-default.voidlinux.org/live/\" | grep \"^<a href=\\\"2\" | cut -d'\"' -f2 | tr -d '/' | sort -ru | head -n 3)\n}\n\nfunction editions_void() {\n    echo glibc musl xfce-glibc xfce-musl\n}\n\nfunction releases_vxlinux() {\n    #shellcheck disable=SC2046,SC2005\n    echo $(web_pipe \"https://github.com/VX-Linux/main/releases/latest\" | grep -o -e 'releases/tag/[[:digit:]]\\+\\.[[:digit:]]\\+\\.[[:digit:]]' | sort -u | cut -d'/' -f 3)\n}\n\nfunction releases_windows() {\n    echo 11 10\n}\n\nfunction languages_windows() {\n    I18NS=(\"Arabic\" \"Brazilian Portuguese\" \"Bulgarian\" \"Chinese (Simplified)\" \"Chinese (Traditional)\" \"Croatian\" \"Czech\" \"Danish\" \"Dutch\" \\\n    \"English (United States)\" \"English International\" \"Estonian\" \"Finnish\" \"French\" \"French Canadian\" \"German\" \"Greek\" \"Hebrew\" \"Hungarian\" \\\n    \"Italian\" \"Japanese\" \"Korean\" \"Latvian\" \"Lithuanian\" \"Norwegian\" \"Polish\" \"Portuguese\" \"Romanian\" \"Russian\" \"Serbian Latin\" \"Slovak\" \\\n    \"Slovenian\" \"Spanish\" \"Spanish (Mexico)\" \"Swedish\" \"Thai\" \"Turkish\" \"Ukrainian\")\n}\n\nfunction releases_windows-server() {\n    echo 2022 2019 2016\n}\n\nfunction languages_windows-server() {\n    I18NS=(\"English (United States)\" \"Chinese (Simplified)\" \"French\" \"German\" \"Italian\" \"Japanese\" \"Russian\" \"Spanish\")\n}\n\nfunction releases_zorin() {\n    echo 17 16\n}\n\nfunction editions_zorin() {\n    echo core64 lite64 education64\n}\n\nfunction check_hash() {\n    local iso=\"\"\n    local hash=\"\"\n    local hash_algo=\"\"\n    if [ \"${OPERATION}\" == \"download\" ]; then\n        iso=\"${1}\"\n    else\n        iso=\"${VM_PATH}/${1}\"\n    fi\n    hash=\"${2}\"\n    # Guess the hash algorithm by the hash length\n    case ${#hash} in\n        32) hash_algo=md5sum;;\n        40) hash_algo=sha1sum;;\n        64) hash_algo=sha256sum;;\n        128) hash_algo=sha512sum;;\n        *) echo \"WARNING! Can't guess hash algorithm, not checking ${iso} hash.\"\n            return;;\n    esac\n    echo -n \"Checking ${iso} with ${hash_algo}... \"\n    if ! echo \"${hash} ${iso}\" | ${hash_algo} --check --status; then\n        echo \"ERROR!\"\n        echo \"${iso} doesn't match ${hash}. Try running 'quickget' again.\"\n        exit 1\n    else\n        echo \"Good!\"\n    fi\n}\n\n# Download a file from the web and pipe it to stdout\nfunction web_pipe() {\n    curl --silent --location \"${1}\"\n}\n\n# Download a JSON file from the web and pipe it to stdout\nfunction web_pipe_json() {\n     curl --silent --location --header \"Accept: application/json\" \"${1}\"\n}\n\n# Download a file from the web\nfunction web_get() {\n    local CHECK=\"\"\n    local HEADERS=()\n    local URL=\"${1}\"\n    local DIR=\"${2}\"\n    local FILE=\"\"\n    local USER_AGENT=\"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/123.0.0.0 Safari/537.36\"\n\n    if [ -n \"${3}\" ]; then\n        FILE=\"${3}\"\n    else\n        FILE=\"${URL##*/}\"\n    fi\n\n    # Process any URL redirections after the file name has been extracted\n    URL=$(web_redirect \"${URL}\")\n\n    # Process any headers\n    while (( \"$#\" )); do\n        if [ \"${1}\" == \"--header\" ]; then\n            HEADERS+=(\"${1}\" \"${2}\")\n            shift 2\n        else\n            shift\n        fi\n    done\n\n    # Test mode for ISO\n    if [ \"${OPERATION}\" == \"show\" ]; then\n        test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\"\n        exit 0\n    elif [ \"${OPERATION}\" == \"test\" ]; then\n        CHECK=$(web_check \"${URL}\" && echo \"PASS\" || echo \"FAIL\")\n        test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\" \"${CHECK}\"\n        exit 0\n    elif [ \"${OPERATION}\" == \"download\" ]; then\n        DIR=\"$(pwd)\"\n    fi\n\n    if [ \"${DIR}\" != \"$(pwd)\" ] && ! mkdir -p \"${DIR}\" 2>/dev/null; then\n        echo \"ERROR! Unable to create directory ${DIR}\"\n        exit 1\n    fi\n\n    if [[ ${OS} != windows && ${OS} != macos && ${OS} != windows-server ]]; then\n        echo \"Downloading $(pretty_name \"${OS}\") ${RELEASE} ${EDITION}\"\n        echo \"- URL: ${URL}\"\n    fi\n\n    if ! curl --progress-bar --location --output \"${DIR}/${FILE}\" --continue-at - --user-agent \"${USER_AGENT}\" \"${HEADERS[@]}\" -- \"${URL}\"; then\n        echo \"ERROR! Failed to download ${URL} with curl.\"\n        rm -f \"${DIR}/${FILE}\"\n    fi\n}\n\n# checks if a URL needs to be redirected and returns the final URL\nfunction web_redirect() {\n    local REDIRECT_URL=\"\"\n    local URL=\"${1}\"\n    # Check for URL redirections\n    # Output to nonexistent directory so the download fails fast\n    REDIRECT_URL=$(curl --silent --location --fail --write-out '%{url_effective}' --output /var/cache/${RANDOM}/${RANDOM} \"${URL}\" )\n    if [ \"${REDIRECT_URL}\" != \"${URL}\" ]; then\n        echo \"${REDIRECT_URL}\"\n    else\n        echo \"${URL}\"\n    fi\n}\n\n# checks if a URL is reachable\nfunction web_check() {\n    local HEADERS=()\n    local URL=\"${1}\"\n    # Process any headers\n    while (( \"$#\" )); do\n        if [ \"${1}\" == \"--header\" ]; then\n            HEADERS+=(\"${1}\" \"${2}\")\n            shift 2\n        else\n            shift\n        fi\n    done\n    curl --silent --location --head --output /dev/null --fail --connect-timeout 30 --max-time 30 --retry 3 \"${HEADERS[@]}\" \"${URL}\"\n}\n\nfunction zsync_get() {\n    local CHECK=\"\"\n    local DIR=\"${2}\"\n    local FILE=\"${1##*/}\"\n    local OUT=\"\"\n    local URL=\"${1}\"\n    # Test mode for ISO\n    if [ \"${OPERATION}\" == \"show\" ]; then\n        test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\"\n        exit 0\n    elif [ \"${OPERATION}\" == \"test\" ]; then\n        CHECK=$(web_check \"${URL}\" && echo \"PASS\" || echo \"FAIL\")\n        test_result \"${OS}\" \"${RELEASE}\" \"${EDITION}\" \"${URL}\" \"${CHECK}\"\n        exit 0\n    elif command -v zsync &>/dev/null; then\n        if [ -n \"${3}\" ]; then\n            OUT=\"${3}\"\n        else\n            OUT=\"${FILE}\"\n        fi\n\n        if ! mkdir -p \"${DIR}\" 2>/dev/null; then\n            echo \"ERROR! Unable to create directory ${DIR}\"\n            exit 1\n        fi\n        echo \"Downloading $(pretty_name \"${OS}\") ${RELEASE} ${EDITION} from ${URL}\"\n        # Only force http for zsync - not earlier because we might fall through here\n        if ! zsync \"${URL/https/http}.zsync\" -i \"${DIR}/${OUT}\" -o \"${DIR}/${OUT}\" 2>/dev/null; then\n            echo \"ERROR! Failed to download ${URL/https/http}.zsync\"\n            exit 1\n        fi\n\n        if [ -e \"${DIR}/${OUT}.zs-old\" ]; then\n            rm \"${DIR}/${OUT}.zs-old\"\n        fi\n    else\n        echo \"INFO: zsync not found, falling back to curl\"\n        if [ -n \"${3}\" ]; then\n            web_get \"${1}\" \"${2}\" \"${3}\"\n        else\n            web_get \"${1}\" \"${2}\"\n        fi\n    fi\n}\n\nfunction make_vm_config() {\n    local CONF_FILE=\"\"\n    local IMAGE_FILE=\"\"\n    local ISO_FILE=\"\"\n    local IMAGE_TYPE=\"\"\n    local GUEST=\"\"\n    if [ \"${OPERATION}\" == \"download\" ]; then\n        exit 0\n    fi\n    IMAGE_FILE=\"${1}\"\n    ISO_FILE=\"${2}\"\n    case \"${OS}\" in\n        batocera)\n            GUEST=\"batocera\"\n            IMAGE_TYPE=\"img\";;\n        custom)\n            GUEST=\"${CUSTOM_OS}\"\n            IMAGE_TYPE=\"${CUSTOM_IMAGE_TYPE}\";;\n        dragonflybsd)\n            GUEST=\"dragonflybsd\"\n            IMAGE_TYPE=\"iso\";;\n        easyos)\n            GUEST=\"linux\"\n            IMAGE_TYPE=\"img\";;\n        freebsd|ghostbsd)\n            GUEST=\"freebsd\"\n            IMAGE_TYPE=\"iso\";;\n        haiku)\n            GUEST=\"haiku\"\n            IMAGE_TYPE=\"iso\";;\n        freedos)\n            GUEST=\"freedos\"\n            IMAGE_TYPE=\"iso\";;\n        kolibrios)\n            GUEST=\"kolibrios\"\n            IMAGE_TYPE=\"iso\";;\n        macos)\n            GUEST=\"macos\"\n            IMAGE_TYPE=\"img\";;\n        netbsd)\n            GUEST=\"netbsd\"\n            IMAGE_TYPE=\"iso\";;\n        openbsd)\n            GUEST=\"openbsd\"\n            IMAGE_TYPE=\"iso\";;\n        openindiana)\n            GUEST=\"solaris\"\n            IMAGE_TYPE=\"iso\";;\n        reactos)\n            GUEST=\"reactos\"\n            IMAGE_TYPE=\"iso\";;\n        truenas*)\n            GUEST=\"truenas\"\n            IMAGE_TYPE=\"iso\";;\n        ubuntu*)\n            GUEST=\"linux\"\n            IMAGE_TYPE=\"iso\"\n            # If there is a point in the release, check if it is less than 16.04\n            if [[ \"${RELEASE}\" != *\"daily\"* ]]; then\n                if [ \"${RELEASE//./}\" -lt 1604 ]; then\n                    GUEST=\"linux_old\"\n                fi\n            fi\n            ;;\n        windows)\n            GUEST=\"windows\"\n            IMAGE_TYPE=\"iso\";;\n        windows-server)\n            GUEST=\"windows-server\"\n            IMAGE_TYPE=\"iso\";;\n        *)\n            GUEST=\"linux\"\n            IMAGE_TYPE=\"iso\";;\n    esac\n\n    CONF_FILE=\"${VM_PATH}.conf\"\n\n    if [ ! -e \"${CONF_FILE}\" ]; then\n        echo \"Making ${CONF_FILE}\"\n        cat << EOF > \"${CONF_FILE}\"\n#!${QUICKEMU} --vm\nguest_os=\"${GUEST}\"\ndisk_img=\"${VM_PATH}/disk.qcow2\"\n${IMAGE_TYPE}=\"${VM_PATH}/${IMAGE_FILE}\"\nEOF\n        echo \" - Setting ${CONF_FILE} executable\"\n        chmod u+x \"${CONF_FILE}\"\n        if [ -n \"${ISO_FILE}\" ]; then\n            echo \"fixed_iso=\\\"${VM_PATH}/${ISO_FILE}\\\"\" >> \"${CONF_FILE}\"\n        fi\n\n        # OS specific tweaks\n        case ${OS} in\n            alma|athenaos|centos-stream|endless|garuda|gentoo|kali|nixos|oraclelinux|popos|rockylinux)\n                echo \"disk_size=\\\"32G\\\"\" >> \"${CONF_FILE}\";;\n            openindiana)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                echo \"disk_size=\\\"32G\\\"\" >> \"${CONF_FILE}\";;\n            batocera)\n                echo \"disk_size=\\\"8G\\\"\" >> \"${CONF_FILE}\";;\n            bazzite)\n                echo \"disk_size=\\\"64G\\\"\" >> \"${CONF_FILE}\";;\n            dragonflybsd|haiku|openbsd|netbsd|slackware|slax|tails|tinycore)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\";;\n            deepin)\n                echo \"disk_size=\\\"64G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"4G\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            freedos)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                echo \"disk_size=\\\"4G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"256M\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            kolibrios)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                echo \"disk_size=\\\"2G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"128M\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            slint)\n                echo \"disk_size=\\\"50G\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            slitaz)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                echo \"disk_size=\\\"4G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"512M\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            truenas-scale|truenas-core)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                # the rest is non-functional\n                # echo \"bootdrive_size=\\\"5G\\\"\" >> \"${CONF_FILE}\" # boot drive\n                # echo \"1stdrive_size=\\\"20G\\\"\" >> \"${CONF_FILE}\" # for testing\n                # echo \"2nddrive_size=\\\"20G\\\"\" >> \"${CONF_FILE}\" # again, for testing\n                ;;\n            ubuntu-server)\n                # 22.04+ fails on LVM build if disk size is < 10G\n                # 22.04.1 fails on auto-install if TPM is disabled\n                echo \"disk_size=\\\"10G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"4G\\\"\" >> \"${CONF_FILE}\"\n                if [[ \"${RELEASE}\" == *\"22.04\"* ]]; then\n                    echo \"tpm=\\\"on\\\"\" >> \"${CONF_FILE}\"\n                fi\n                ;;\n            vanillaos)\n                ## Minimum is 50G for abroot, but a 64GB is allocated to give some headroom\n                echo \"disk_size=\\\"64G\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            zorin)\n                case ${EDITION} in\n                    education64|edulite64) echo \"disk_size=\\\"32G\\\"\" >> \"${CONF_FILE}\";;\n                esac;;\n            reactos)\n                echo \"boot=\\\"legacy\\\"\" >> \"${CONF_FILE}\"\n                echo \"disk_size=\\\"12G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"2048M\\\"\" >> \"${CONF_FILE}\"\n                ;;\n            macos)\n                echo \"disk_size=\\\"128G\\\"\" >> \"${CONF_FILE}\"\n                echo \"macos_release=\\\"${RELEASE}\\\"\" >> \"${CONF_FILE}\"\n                # https://github.com/quickemu-project/quickemu/issues/438\n                if [ \"${RELEASE}\" == \"monterey\" ]; then\n                    echo \"cpu_cores=2\" >> \"${CONF_FILE}\"\n                fi\n                ;;\n            proxmox-ve)\n                echo \"disk_size=\\\"20G\\\"\" >> \"${CONF_FILE}\"\n                echo \"ram=\\\"4G\\\"\" >> \"${CONF_FILE}\"\n                ;;\n        esac\n\n        if [ \"${OS}\" == \"ubuntu\" ] && [[ ${RELEASE} == *\"daily\"*  ]]; then\n            # Minimum to install lobster testing is 18GB but 32GB are allocated for headroom\n            echo \"disk_size=\\\"32G\\\"\" >> \"${CONF_FILE}\"\n        fi\n\n        if [[ \"${OS}\" == \"windows\"* ]]; then\n            echo \"disk_size=\\\"64G\\\"\" >> \"${CONF_FILE}\"\n        fi\n\n        # Enable TPM for Windows 11 and Windows Server 2022\n        if [[ \"${OS}\" == \"windows\" && \"${RELEASE}\" == \"11\" || \"${OS}\" == \"windows-server\" && \"${RELEASE}\" == \"2022\" ]]; then\n            echo \"tpm=\\\"on\\\"\" >> \"${CONF_FILE}\"\n            echo \"secureboot=\\\"off\\\"\" >> \"${CONF_FILE}\"\n        fi\n    fi\n    echo -e \"\\nTo start your $(pretty_name \"${OS}\") virtual machine run:\"\n    if [ \"${OS}\" == \"slint\" ]; then\n        echo -e \"    quickemu --vm ${CONF_FILE}\\nTo start Slint with braille support run:\\n    quickemu --vm --braille --display sdl ${CONF_FILE}\"\n    else\n        echo \"    quickemu --vm ${CONF_FILE}\"\n    fi\n\n    echo\n    exit 0\n}\n\nfunction get_alma() {\n    local HASH=\"\"\n    local ISO=\"AlmaLinux-${RELEASE}-latest-x86_64-${EDITION}.iso\"\n    local URL=\"https://repo.almalinux.org/almalinux/${RELEASE}/isos/x86_64\"\n    HASH=\"$(web_pipe \"${URL}/CHECKSUM\" | grep \"(${ISO}\" | cut -d' ' -f4)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_alpine() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://dl-cdn.alpinelinux.org/alpine/${RELEASE}/releases/x86_64\"\n    local VERSION=\"\"\n    VERSION=$(web_pipe \"${URL}/latest-releases.yaml\" | awk '/\"Xen\"/{found=0} {if(found) print} /\"Virtual\"/{found=1}' | grep 'version:' | awk '{print $2}')\n    ISO=\"alpine-virt-${VERSION}-x86_64.iso\"\n    HASH=$(web_pipe \"${URL}/latest-releases.yaml\" | awk '/\"Xen\"/{found=0} {if(found) print} /\"Virtual\"/{found=1}' | grep 'sha256:' | awk '{print $2}')\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_android() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local JSON_ALL=\"\"\n    local JSON_REL=\"\"\n    local URL=\"https://mirrors.gigenet.com/OSDN/android-x86\"\n    JSON_ALL=$(web_pipe \"https://www.fosshub.com/Android-x86-old.html\" | grep \"var settings =\" | cut -d'=' -f2-)\n    JSON_REL=$(echo \"${JSON_ALL}\" | jq --arg ver \"${OS}-${EDITION}-${RELEASE}\" 'first(.pool.f[] | select((.n | startswith($ver)) and (.n | endswith(\".iso\"))))')\n    ISO=$(echo \"${JSON_REL}\" | jq -r .n)\n    HASH=$(echo \"${JSON_REL}\" | jq -r .hash.sha256)\n    # Traverse the directories to find the .iso location\n    for DIR in $(web_pipe \"${URL}\" | grep -o -E '[0-9]{5}' | sort -ur); do\n        if web_pipe \"${URL}/${DIR}\" | grep \"${ISO}\" &>/dev/null; then\n            URL=\"${URL}/${DIR}\"\n            break\n        fi\n    done\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_antix() {\n    local HASH=\"\"\n    local ISO=\"antiX-${RELEASE}\"\n    local README=\"README\"\n    local URL=\"https://sourceforge.net/projects/antix-linux/files/Final/antiX-${RELEASE}\"\n\n    # antiX uses a different URL and ISO naming for runit editions\n    if [[ \"${EDITION}\" == *\"runit\"* ]];then\n        ISO+=\"-runit\"\n        README=\"README2\"\n        case ${RELEASE} in\n            21) URL+=\"/runit-bullseye\";;\n            *)  URL+=\"/runit-antiX-${RELEASE}\";;\n        esac\n    fi\n    case ${EDITION} in\n        base-*) ISO+=\"_x64-base.iso\";;\n        core-*) ISO+=\"_x64-core.iso\";;\n        full-*) ISO+=\"_x64-full.iso\";;\n        net-*)  ISO+=\"-net_x64-net.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${README}.txt\" | grep \"${ISO}\" | cut -d' ' -f1 | head -n 1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_archcraft() {\n    local HASH=\"\"\n    local URL=\"\"\n    URL=\"https://sourceforge.net/projects/archcraft/files/${RELEASE}/download\"\n    URL=\"$(web_redirect \"${URL}\" | cut -d? -f1)\"\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_archlinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://mirror.rackspace.com/archlinux\"\n    ISO=$(web_pipe \"https://archlinux.org/releng/releases/json/\" | jq -r '.releases[0].iso_url')\n    HASH=$(web_pipe \"https://archlinux.org/releng/releases/json/\" | jq -r '.releases[0].sha256_sum')\n    echo \"${URL}${ISO} ${HASH}\"\n}\n\nfunction get_arcolinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    URL=\"https://mirror.accum.se/mirror/arcolinux.info/iso/${RELEASE}\"\n    ISO=\"arco${EDITION}-${RELEASE}-x86_64.iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_artixlinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://iso.artixlinux.org/iso\"\n    ISO=\"artix-${EDITION}-${RELEASE}-x86_64.iso\"\n    HASH=$(web_pipe \"${URL}/sha256sums\" | grep \"${ISO}\")\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_athenaos() {\n    local HASH=\"\"\n    local URL=\"https://github.com/Athena-OS/athena/releases/download/${RELEASE}\"\n    local ISO=\"athena-rolling-x86_64.iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_batocera() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://mirrors.o2switch.fr/batocera/x86_64/stable/${RELEASE}\"\n    ISO=\"$(web_pipe \"${URL}/\" | grep -e 'batocera.*img.gz'| cut -d'\"' -f2)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_bazzite() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://download.bazzite.gg\"\n    case ${EDITION} in\n        gnome) ISO=\"bazzite-gnome-stable.iso\";;\n        kde)  ISO=\"bazzite-stable.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}-CHECKSUM\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_biglinux() {\n    local HASH=\"\"\n    local ISO=\"biglinux_${RELEASE}_${EDITION}.iso\"\n    local URL=\"https://iso.biglinux.com.br\"\n    HASH=$(web_pipe \"${URL}/${ISO}.md5\" | grep -Eo '[[:alnum:]]{32}')\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_blendos() {\n    local HASH=\"\"\n    local ISO=\"blendOS.iso\"\n    local URL=\"https://kc1.mirrors.199693.xyz/blend/isos/testing\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_bodhi() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://sourceforge.net/projects/bodhilinux/files/${RELEASE}\"\n    case ${EDITION} in\n        standard) ISO=\"bodhi-${RELEASE}-64.iso\";;\n        *) ISO=\"bodhi-${RELEASE}-64-${EDITION}.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_bunsenlabs() {\n    local HASH=\"\"\n    local ISO=\"boron-1-240123-amd64.hybrid.iso\"\n    local URL=\"https://ddl.bunsenlabs.org/ddl\"\n    HASH=$(web_pipe \"${URL}/release.sha256.txt\" | head -n 1 | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_cachyos() {\n    local HASH=\"\"\n    local URL=\"\"\n    URL=\"$(web_pipe \"https://cachyos.org/download/\" | tr '&' '\\n' | grep \"ISO/${EDITION}\" | grep -v 'iso.sha' | grep -v 'iso.sig' | cut -d';' -f2)\"\n    HASH=$(web_pipe \"${URL}.sha256\" | cut -d' ' -f1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_centos-stream() {\n    local HASH=\"\"\n    local ISO=\"CentOS-Stream-${RELEASE}-latest-x86_64-${EDITION}.iso\"\n    local URL=\"https://linuxsoft.cern.ch/centos-stream/${RELEASE}-stream/BaseOS/x86_64/iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.SHA256SUM\" | grep \"SHA256 (${ISO}\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_chimeralinux() {\n    local DATE=\"\"\n    local HASH=\"\"\n    local URL=\"https://repo.chimera-linux.org/live/${RELEASE}\"\n    DATE=$(web_pipe \"${URL}/sha256sums.txt\" | head -n1 | cut -d'-' -f5)\n    local ISO=\"chimera-linux-x86_64-LIVE-${DATE}-${EDITION}.iso\"\n    HASH=$(web_pipe \"${URL}/sha256sums.txt\" | grep 'x86_64-LIVE' | grep \"${EDITION}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_crunchbang++() {\n    local HASH=\"\"\n    local ISO=\"\"\n    ISO=$(web_pipe \"https://api.github.com/repos/CBPP/cbpp/releases\" | grep 'download_url' | grep amd64 | grep \"${RELEASE}\" | cut -d'\"' -f4)\n    echo \"${ISO} ${HASH}\"\n}\n\nfunction get_debian() {\n    local DEBCURRENT=\"\"\n    local HASH=\"\"\n    local ISO=\"debian-live-${RELEASE}-amd64-${EDITION}.iso\"\n    local URL=\"https://cdimage.debian.org/cdimage/archive/${RELEASE}-live/amd64/iso-hybrid\"\n    DEBCURRENT=$(web_pipe \"https://cdimage.debian.org/debian-cd/\" | grep '\\.[0-9]/' | cut -d'>' -f 9 | cut -d'/' -f 1)\n    case \"${RELEASE}\" in\n        \"${DEBCURRENT}\") URL=\"https://cdimage.debian.org/debian-cd/${RELEASE}-live/amd64/iso-hybrid\";;\n    esac\n    if [ \"${EDITION}\" == \"netinst\" ]; then\n        URL=\"${URL/-live/}\"\n        URL=\"${URL/hybrid/cd}\"\n        ISO=\"${ISO/-live/}\"\n    fi\n    HASH=$(web_pipe \"${URL}/SHA512SUMS\" | grep \"${ISO}\" | cut -d' ' -f1 | head -n 1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_deepin() {\n    local HASH=\"\"\n    local REV=${RELEASE}\n    # deepin-desktop-community-20.3-amd64.iso\n    local URL=\"https://cdimage.deepin.com/releases/\"${RELEASE}\n    # Correct URL for 23-RC onwards which has architecture directories\n    if [ \"${RELEASE}\" != \"20.9\" ]; then\n        URL+=\"/amd64\"\n    fi\n    local ISO=\"deepin-desktop-community-${REV}-amd64.iso\"\n    HASH=$(web_pipe \"${URL}/SHA256SUMS\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_devuan() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://files.devuan.org/devuan_${RELEASE}/desktop-live\"\n    local VER=\"\"\n    case ${RELEASE} in\n        beowulf)  VER=\"3.1.1\";;\n        chimaera) VER=\"4.0.3\";;\n        daedalus) VER=\"5.0.0\";;\n    esac\n    ISO=\"devuan_${RELEASE}_${VER}_amd64_desktop-live.iso\"\n    HASH=$(web_pipe \"${URL}/SHASUMS.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_dragonflybsd() {\n    local HASH=\"\"\n    local ISO=\"dfly-x86_64-${RELEASE}_REL.iso.bz2\"\n    local URL=\"http://mirror-master.dragonflybsd.org/iso-images\"\n    HASH=$(web_pipe \"${URL}/md5.txt\" | grep \"(${ISO})\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_easyos() {\n    local HASH=\"\"\n    local URL=\"\"\n    local ISO=\"\"\n    local YEAR=\"\"\n    ISO=\"easy-${RELEASE}-amd64.img\"\n    TWO_YEARS=$(web_pipe https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/ | grep -o -E '[[:digit:]]{4}/' | sort -nr | tr -d /  | head -n 2 )\n    for YEAR in ${TWO_YEARS} ; do\n        if web_check \"https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/${RELEASE}/\" ; then\n            URL=\"https://distro.ibiblio.org/easyos/amd64/releases/kirkstone/${YEAR}/${RELEASE}\"\n            HASH=$(web_pipe \"${URL}/md5.sum.txt\" | cut -d' ' -f1)\n            break\n        fi\n    done\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_elementary() {\n    local HASH=\"\"\n    case ${RELEASE} in\n        7.0) STAMP=\"20230129rc\";;\n        7.1) STAMP=\"20230926rc\";;\n        8.0) STAMP=\"20241122rc\";;\n    esac\n    local ISO=\"elementaryos-${RELEASE}-stable.${STAMP}.iso\"\n    local URL=\"https://ams3.dl.elementary.io/download\"\n    echo \"${URL}/$(date +%s | base64)/${ISO} ${HASH}\"\n}\n\nfunction get_endeavouros() {\n    local ENDEAVOUR_RELEASES=\"\"\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://mirror.alpix.eu/endeavouros/iso\"\n    # Find EndeavourOS releases from mirror, pick one matching release\n    ENDEAVOUR_RELEASES=\"$(web_pipe \"${URL}/\" | grep -o '<a href=\"[^\"]*.iso\">' | sed 's/^<a href=\"//;s/.iso\">.*//' | grep -v 'x86_64')\"\n    ISO=\"$(echo \"${ENDEAVOUR_RELEASES}\" | grep -i \"${RELEASE}\").iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha512sum\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_endless() {\n    local HASH=\"\" # No hash - there is a signature in .asc signed by\n    #https://d1anzknqnc1kmb.cloudfront.net/eos-image-keyring.gpg\n    # (4096R: CB50 0F7B C923 3FAD 32B4 E720 9E0C 1250 587A 279C)\n    local FILE_TS=\"\"\n    # https://support.endlessos.org/en/installation/direct-download gives the info but computes the URLS in js\n    # so parsing out the useful info is not happening tonight\n    # Endless edition names are \"base\" for the small minimal one or the Language for the large full release\n    # The isos are stamped as they are finished so ....\n    case ${EDITION} in\n        base)  FILE_TS=\"241023-183516\";;\n        en)    FILE_TS=\"241023-200926\";;\n        es)    FILE_TS=\"241023-184649\";;\n        fr)    FILE_TS=\"241023-191212\";;\n        pt_BR) FILE_TS=\"241023-191427\";;\n    esac\n    URL=\"https://images-dl.endlessm.com/release/${RELEASE}/eos-amd64-amd64/${EDITION}\"\n    ISO=\"eos-eos${RELEASE:0:3}-amd64-amd64.${FILE_TS}.${EDITION}.iso\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_fedora() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local JSON=\"\"\n    local URL=\"\"\n    local VARIANT=\"\"\n    case ${EDITION} in\n        Server|Kinoite|Onyx|Silverblue|Sericea|Workstation) VARIANT=\"${EDITION}\";;\n        *) VARIANT=\"Spins\";;\n    esac\n    # The naming of 41 Beta with a space is problematic so we replaced it with an underscore\n    # but we need to convert it back to a space for the URL search in the JSON\n    #shellcheck disable=SC2086\n    # if RELEASE contains an underscore, replace it with a space\n     if [[ \"${RELEASE}\" == *\"_\"* ]]; then\n        RELEASE=\"${RELEASE/_/ }\"\n    fi\n\n\n\n    # shellcheck disable=SC2086\n    JSON=$(web_pipe \"https://getfedora.org/releases.json\" | jq '.[] | select(.variant==\"'${VARIANT}'\" and .subvariant==\"'\"${EDITION}\"'\" and .arch==\"x86_64\" and .version==\"'\"${RELEASE}\"'\" and (.link | endswith(\".iso\")))')\n    URL=$(echo \"${JSON}\" | jq -r '.link' | head -n1)\n    HASH=$(echo \"${JSON}\" | jq -r '.sha256' | head -n1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_freebsd() {\n    local HASH=\"\"\n    local ISO=\"FreeBSD-${RELEASE}-RELEASE-amd64-${EDITION}.iso\"\n    local URL=\"https://download.freebsd.org/ftp/releases/amd64/amd64/ISO-IMAGES/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/CHECKSUM.SHA256-FreeBSD-${RELEASE}-RELEASE-amd64\" | grep \"${ISO}\" | grep -v \".xz\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_freedos() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://www.ibiblio.org/pub/micro/pc-stuff/freedos/files/distributions/${RELEASE}/official\"\n    case ${RELEASE} in\n        1.2) ISO=\"FD12CD.iso\"\n             HASH=$(web_pipe \"${URL}/FD12.sha\" | grep \"${ISO}\" | cut -d' ' -f1);;\n        1.3) ISO=\"FD13-LiveCD.zip\"\n             HASH=$(web_pipe \"${URL}/verify.txt\" | grep -A 8 \"sha256sum\" | grep \"${ISO}\" | cut -d' ' -f1);;\n    esac\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_garuda() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://iso.builds.garudalinux.org/iso/latest/garuda\"\n    ISO=${EDITION}/latest.iso\n    HASH=\"$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_gentoo() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://mirror.bytemark.co.uk/gentoo/releases/amd64/autobuilds\"\n    case ${EDITION} in\n        minimal) ISO=$(web_pipe \"${URL}/${RELEASE}-iso.txt\" | grep install | cut -d' ' -f1);;\n        livegui) ISO=$(web_pipe \"${URL}/${RELEASE}-iso.txt\" | grep livegui | cut -d' ' -f1);;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.DIGESTS\" | grep -A 1 SHA512 | grep iso | grep -v CONTENTS | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_ghostbsd() {\n    local ISO=\"\"\n    local URL=\"https://download.ghostbsd.org/releases/amd64/${RELEASE}\"\n    local HASH=\"\"\n    case ${EDITION} in\n        mate) ISO=\"GhostBSD-${RELEASE}.iso\";;\n        xfce) ISO=\"GhostBSD-${RELEASE}-XFCE.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | grep \"${ISO}\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_gnomeos() {\n    local HASH=\"\"\n    local ISO=\"gnome_os_installer_${RELEASE}.iso\"\n    local URL=\"https://download.gnome.org/gnomeos/${RELEASE}\"\n    case ${RELEASE} in\n        nightly)\n            ISO=\"gnome_os_installer.iso\"\n            URL=\"https://os.gnome.org/download/latest\";;\n        46.0) ISO=\"gnome_os_installer_46.iso\";;\n        3*) ISO=\"gnome_os_installer.iso\";;\n    esac\n    # Process the URL redirections; required for GNOME\n    ISO=$(web_redirect \"${URL}/${ISO}\")\n    echo \"${ISO} ${HASH}\"\n}\n\nfunction get_guix() {\n    local HASH=\"\"\n    local ISO=\"guix-system-install-${RELEASE}.x86_64-linux.iso\"\n    local URL=\"https://ftpmirror.gnu.org/gnu/guix/\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_haiku() {\n    local ISO=\"haiku-${RELEASE}-${EDITION}-anyboot.iso\"\n    local URL=\"http://mirror.rit.edu/haiku/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | grep \"${ISO}\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_holoiso() {\n    local HASH=\"\"\n    local URL=\"\"\n    RELEASE=\"$(web_pipe \"https://github.com/HoloISO/releases/releases\" | grep -o -e 'releases/tag/[[:digit:]]\\+\\(\\.[[:digit:]]\\+\\)*' | head -n 1 | cut -d'/' -f 3)\"\n    URL=$(web_pipe \"https://api.github.com/repos/HoloISO/releases/releases\" | jq -r \".[] | select(.tag_name==\\\"${RELEASE}\\\") | .body\" | sed -n 's/.*\\(https:\\/\\/[^ ]*holoiso\\.ru\\.eu\\.org\\/[^ ]*\\.iso\\).*/\\1/p' | head -n 1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_kali() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://cdimage.kali.org/${RELEASE}\"\n    ISO=$(web_pipe \"${URL}/?C=M;O=D\" | grep -o \">kali-linux-.*-installer-amd64.iso\" | head -n 1 | cut -c 2-)\n    HASH=$(web_pipe \"${URL}/SHA256SUMS\" | grep -v torrent | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_kdeneon() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://files.kde.org/neon/images/${RELEASE}/current\"\n    ISO=$(web_pipe \"${URL}/neon-${RELEASE}-current.sha256sum\" | cut -d' ' -f3-)\n    HASH=$(web_pipe \"${URL}/neon-${RELEASE}-current.sha256sum\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_kolibrios() {\n    local HASH=\"\"\n    local ISO=\"latest-iso.7z\"\n    local URL=\"http://builds.kolibrios.org/${EDITION}\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_linuxlite() {\n    local HASH=\"\"\n    local ISO=\"linux-lite-${RELEASE}-64bit.iso\"\n    local URL=\"https://sourceforge.net/projects/linux-lite/files/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_linuxmint() {\n    local HASH=\"\"\n    local ISO=\"linuxmint-${RELEASE}-${EDITION}-64bit.iso\"\n    local URL=\"https://mirror.bytemark.co.uk/linuxmint/stable/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/sha256sum.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_lmde() {\n    local HASH=\"\"\n    local ISO=\"lmde-${RELEASE}-${EDITION}-64bit.iso\"\n    local URL=\"https://mirror.bytemark.co.uk/linuxmint/debian\"\n    HASH=$(web_pipe \"${URL}/sha256sum.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_maboxlinux() {\n    local HASH=\"\"\n    local URL=\"\"\n    URL=\"https://sourceforge.net/projects/mabox-linux/files/${RELEASE}/download\"\n    URL=\"$(web_redirect \"${URL}\" | cut -d? -f1)\"\n    echo \"${URL} ${HASH}\"\n}\n\nfunction generate_id() {\n    local macRecoveryID=\"\"\n    local TYPE=\"${1}\"\n    local valid_chars=(\"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" \"A\" \"B\" \"C\" \"D\" \"E\" \"F\")\n    for ((i=0; i<TYPE; i++)); do\n        macRecoveryID+=\"${valid_chars[$((RANDOM % 16))]}\"\n    done\n    echo \"${macRecoveryID}\"\n}\n\nfunction get_macos() {\n    local appleSession=\"\"\n    local info=\"\"\n    local downloadLink=\"\"\n    local downloadSession=\"\"\n    local chunkListLink=\"\"\n    local chunkListSession=\"\"\n    local BOARD_ID=\"\"\n    local CWD=\"\"\n    local CHECK=\"\"\n    local CHUNKCHECK=\"\"\n    local MLB=\"00000000000000000\"\n    local OS_TYPE=\"default\"\n\n    case ${RELEASE} in\n        lion|10.7)\n            BOARD_ID=\"Mac-2E6FAB96566FE58C\"\n            MLB=\"00000000000F25Y00\";;\n        mountainlion|10.8)\n            BOARD_ID=\"Mac-7DF2A3B5E5D671ED\"\n            MLB=\"00000000000F65100\";;\n        mavericks|10.9)\n            BOARD_ID=\"Mac-F60DEB81FF30ACF6\"\n            MLB=\"00000000000FNN100\";;\n        yosemite|10.10)\n            BOARD_ID=\"Mac-E43C1C25D4880AD6\"\n            MLB=\"00000000000GDVW00\";;\n        elcapitan|10.11)\n            BOARD_ID=\"Mac-FFE5EF870D7BA81A\"\n            MLB=\"00000000000GQRX00\";;\n        sierra|10.12)\n            BOARD_ID=\"Mac-77F17D7DA9285301\"\n            MLB=\"00000000000J0DX00\";;\n        high-sierra|10.13)\n            BOARD_ID=\"Mac-BE088AF8C5EB4FA2\"\n            MLB=\"00000000000J80300\";;\n        mojave|10.14)\n            BOARD_ID=\"Mac-7BA5B2DFE22DDD8C\"\n            MLB=\"00000000000KXPG00\";;\n        catalina|10.15)\n            BOARD_ID=\"Mac-00BE6ED71E35EB86\";;\n        big-sur|11)\n            BOARD_ID=\"Mac-42FD25EABCABB274\";;\n        monterey|12)\n            BOARD_ID=\"Mac-E43C1C25D4880AD6\";;\n        ventura|13)\n            BOARD_ID=\"Mac-BE088AF8C5EB4FA2\";;\n        sonoma|14)\n            BOARD_ID=\"Mac-53FDB3D8DB8CA971\";;\n        *) echo \"ERROR! Unknown release: ${RELEASE}\"\n           releases_macos\n           exit 1;;\n    esac\n\n    CWD=\"$(dirname \"${0}\")\"\n    if [ -x \"${CWD}/chunkcheck\" ]; then\n        CHUNKCHECK=\"${CWD}/chunkcheck\"\n    elif [ -x \"$(command -v chunkcheck)\" ]; then\n        CHUNKCHECK=\"$(command -v chunkcheck)\"\n    fi\n\n    appleSession=$(curl -v -H \"Host: osrecovery.apple.com\" \\\n                           -H \"Connection: close\" \\\n                           -A \"InternetRecovery/1.0\" https://osrecovery.apple.com/ 2>&1 | tr ';' '\\n' | awk -F'session=|;' '{print $2}' | grep 1)\n    info=$(curl -s -X POST -H \"Host: osrecovery.apple.com\" \\\n                           -H \"Connection: close\" \\\n                           -A \"InternetRecovery/1.0\" \\\n                           -b \"session=\\\"${appleSession}\\\"\" \\\n                           -H \"Content-Type: text/plain\" \\\n                           -d $'cid='\"$(generate_id 16)\"$'\\nsn='${MLB}$'\\nbid='${BOARD_ID}$'\\nk='\"$(generate_id 64)\"$'\\nfg='\"$(generate_id 64)\"$'\\nos='${OS_TYPE} \\\n                           https://osrecovery.apple.com/InstallationPayload/RecoveryImage | tr ' ' '\\n')\n    downloadLink=$(echo \"$info\" | grep 'oscdn' | grep 'dmg')\n    downloadSession=$(echo \"$info\" | grep 'expires' | grep 'dmg')\n    chunkListLink=$(echo \"$info\" | grep 'oscdn' | grep 'chunklist')\n    chunkListSession=$(echo \"$info\" | grep 'expires' | grep 'chunklist')\n\n    if [ \"${OPERATION}\" == \"show\" ]; then\n        test_result \"${OS}\" \"${RELEASE}\" \"\" \"${downloadLink}\"\n        exit 0\n    elif [ \"${OPERATION}\" == \"test\" ]; then\n        CHECK=$(web_check \"${downloadLink}\" --header \"Host: oscdn.apple.com\" --header \"Connection: close\" --header \"User-Agent: InternetRecovery/1.0\" --header \"Cookie: AssetToken=${downloadSession}\" && echo \"PASS\" || echo \"FAIL\")\n        test_result \"${OS}\" \"${RELEASE}\" \"\" \"${downloadLink}\" \"${CHECK}\"\n        exit 0\n    elif [ \"${OPERATION}\" == \"download\" ]; then\n        echo \"Downloading macOS (${RELEASE^}) RecoveryImage\"\n        echo \" - URL: ${downloadLink}\"\n        web_get \"${downloadLink}\" \"${VM_PATH}\" RecoveryImage.dmg --header \"Host: oscdn.apple.com\" --header \"Connection: close\" --header \"User-Agent: InternetRecovery/1.0\" --header \"Cookie: AssetToken=${downloadSession}\"\n        web_get \"${chunkListLink}\" \"${VM_PATH}\" RecoveryImage.chunklist --header \"Host: oscdn.apple.com\" --header \"Connection: close\" --header \"User-Agent: InternetRecovery/1.0\" --header \"Cookie: AssetToken=${chunkListSession}\"\n        VM_PATH=\"$(pwd)\"\n    else\n        if [ ! -e \"${VM_PATH}/RecoveryImage.chunklist\" ]; then\n            echo \"Downloading macOS (${RELEASE^}) RecoveryImage\"\n            echo \" - URL: ${downloadLink}\"\n            web_get \"${downloadLink}\" \"${VM_PATH}\" RecoveryImage.dmg --header \"Host: oscdn.apple.com\" --header \"Connection: close\" --header \"User-Agent: InternetRecovery/1.0\" --header \"Cookie: AssetToken=${downloadSession}\"\n            web_get \"${chunkListLink}\" \"${VM_PATH}\" RecoveryImage.chunklist --header \"Host: oscdn.apple.com\" --header \"Connection: close\" --header \"User-Agent: InternetRecovery/1.0\" --header \"Cookie: AssetToken=${chunkListSession}\"\n            if ! \"${CHUNKCHECK}\" \"${VM_PATH}\" 2> /dev/null; then\n                echo \" - WARNING! Verification failed, continuing anyway\"\n            else\n                echo \" - Verification passed\"\n            fi\n\n            if [ -e \"${VM_PATH}/RecoveryImage.dmg\" ] && [ ! -e \"${VM_PATH}/RecoveryImage.img\" ]; then\n                echo \" - Converting RecoveryImage.dmg\"\n                ${QEMU_IMG} convert \"${VM_PATH}/RecoveryImage.dmg\" -O raw \"${VM_PATH}/RecoveryImage.img\" 2>/dev/null\n            fi\n            rm \"${VM_PATH}/RecoveryImage.dmg\" \"${VM_PATH}/RecoveryImage.chunklist\"\n            echo \" - RecoveryImage.img is ready.\"\n        fi\n        echo \"Downloading OpenCore & UEFI firmware\"\n        web_get \"https://github.com/kholia/OSX-KVM/raw/master/OpenCore/OpenCore.qcow2\" \"${VM_PATH}\"\n        web_get \"https://github.com/kholia/OSX-KVM/raw/master/OVMF_CODE.fd\" \"${VM_PATH}\"\n        if [ ! -e \"${VM_PATH}/OVMF_VARS-1920x1080.fd\" ]; then\n            web_get \"https://github.com/kholia/OSX-KVM/raw/master/OVMF_VARS-1920x1080.fd\" \"${VM_PATH}\"\n        fi\n    fi\n    make_vm_config RecoveryImage.img\n}\n\nfunction get_mageia() {\n    local HASH=\"\"\n    local ISO=\"\"\n    ISO=$(web_pipe https://www.mageia.org/en/downloads/get/?q=\"Mageia-${RELEASE}-Live-${EDITION}-x86_64.iso\" | grep 'click here'| grep -o 'href=.*\\.iso'|cut -d\\\" -f2)\n    HASH=$(web_pipe \"${ISO}.sha512\" | cut -d' ' -f1)\n    echo \"${ISO} ${HASH}\"\n}\n\nfunction get_manjaro() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local MANIFEST=\"\"\n    local URL=\"\"\n    local TYPE=\"official\"\n    MANIFEST=\"$(web_pipe https://gitlab.manjaro.org/web/iso-info/-/raw/master/file-info.json)\"\n    case \"${RELEASE}\" in\n        sway)\n            MANIFEST=\"$(web_pipe https://mirror.manjaro-sway.download/manjaro-sway/release.json)\"\n            TYPE=\"sway\"\n            ;;\n        cinnamon|i3) TYPE=\"community\";;\n    esac\n\n    if [ \"${EDITION}\" == \"minimal\" ] && [ \"${TYPE}\" != \"sway\" ]; then\n        EDITION=\".minimal\"\n    else\n        EDITION=\"\"\n    fi\n\n    if [ \"${RELEASE}\" == \"sway\" ]; then\n        URL=$(echo \"${MANIFEST}\" | jq -r '.[] | select(.name|test(\"^manjaro-sway-.*[.]iso$\")) | .url')\n    else\n        URL=\"$(echo \"${MANIFEST}\" | jq -r .\"${TYPE}.${RELEASE}${EDITION}\".image)\"\n    fi\n    HASH=$(web_pipe \"${URL}.sha512\" | cut -d' ' -f1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_mxlinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://sourceforge.net/projects/mx-linux/files/Final/${EDITION}\"\n    case ${EDITION} in\n        Xfce) ISO=\"MX-${RELEASE}_x64.iso\";;\n        KDE) ISO=\"MX-${RELEASE}_KDE_x64.iso\";;\n        Fluxbox) ISO=\"MX-${RELEASE}_fluxbox_x64.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_netboot() {\n    local HASH=\"\"\n    local ISO=\"netboot.xyz.iso\"\n    local URL=\"https://boot.netboot.xyz/ipxe\"\n    HASH=$(web_pipe \"${URL}/netboot.xyz-sha256-checksums.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_netbsd() {\n    local HASH=\"\"\n    local ISO=\"NetBSD-${RELEASE}-amd64.iso\"\n    local URL=\"https://cdn.netbsd.org/pub/NetBSD/NetBSD-${RELEASE}/images\"\n    HASH=$(web_pipe \"${URL}/MD5\" | grep \"${ISO}\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_nitrux() {\n    local HASH=\"\"\n    local URLBASE=\"\"\n    local URL=\"\"\n    local ISO=\"\"\n    URLBASE=\"https://sourceforge.net/projects/nitruxos/files/Release\"\n    URL=\"${URLBASE}/ISO\"\n    ISO=$(web_pipe 'https://sourceforge.net/projects/nitruxos/rss?path=/Release/ISO' | grep '.iso' | head -n 1 | cut -d']' -f1 | cut -d '/' -f4)\n    HASH=$(web_pipe \"${URLBASE}/MD5/${ISONAME}.md5sum\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_nixos() {\n    local HASH=\"\"\n    # Adapt the plasma edition according to the NixOS release\n    case \"${EDITION}\" in\n        plasma)\n            if [ \"${RELEASE}\" == \"23.11\" ]; then\n                EDITION+=\"5\"\n            else\n                EDITION+=\"6\"\n            fi\n            ;;\n    esac\n    local ISO=\"latest-nixos-${EDITION}-x86_64-linux.iso\"\n    local URL=\"https://channels.nixos.org/nixos-${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_nwg-shell() {\n    local HASH=\"\"\n    local ISO=\"nwg-live-${RELEASE}-x86_64.iso\"\n    local URL=\"https://sourceforge.net/projects/nwg-iso/files\"\n    HASH=\"$(web_pipe \"https://sourceforge.net/projects/nwg-iso/rss?path=/\" | grep \"${ISO}\" | cut -d'>' -f3 | cut -d'<' -f1 | tail -n 1)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_openbsd() {\n    local HASH=\"\"\n    local ISO=\"install${RELEASE//\\./}.iso\"\n    local URL=\"https://mirror.leaseweb.com/pub/OpenBSD/${RELEASE}/amd64\"\n    HASH=$(web_pipe \"${URL}/SHA256\" | grep \"${ISO}\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_openindiana() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    URL=\"https://dlc.openindiana.org/isos/hipster/${RELEASE}\"\n    ISO=\"OI-hipster-${EDITION}-${RELEASE}.iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" |cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_opensuse() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    if [ \"${RELEASE}\" == \"tumbleweed\" ]; then\n        ISO=\"openSUSE-Tumbleweed-DVD-x86_64-Current.iso\"\n        URL=\"https://download.opensuse.org/tumbleweed/iso\"\n    elif [ \"${RELEASE}\" == \"microos\" ]; then\n        ISO=\"openSUSE-MicroOS-DVD-x86_64-Current.iso\"\n        URL=\"https://download.opensuse.org/tumbleweed/iso\"\n    elif [ \"${RELEASE}\" == \"aeon\" ]; then\n        ISO=\"opensuse-aeon.x86_64.iso\"\n        URL=\"https://mirrorcache.opensuse.org/tumbleweed/appliances/iso\"\n    elif [ \"${RELEASE}\" == 15.0 ] || [ \"${RELEASE}\" == 15.1 ]; then\n        ISO=\"openSUSE-Leap-${RELEASE}-DVD-x86_64.iso\"\n        URL=\"https://download.opensuse.org/distribution/leap/${RELEASE}/iso\"\n    else\n        ISO=\"openSUSE-Leap-${RELEASE}-DVD-x86_64-Current.iso\"\n        URL=\"https://download.opensuse.org/distribution/leap/${RELEASE}/iso\"\n    fi\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | awk '{if(NR==4) print $0}' | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_oraclelinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local VER_MAJ=${RELEASE::1}\n    local VER_MIN=${RELEASE:2:1}\n    local URL=\"https://yum.oracle.com/ISOS/OracleLinux/OL${VER_MAJ}/u${VER_MIN}/x86_64\"\n    case ${VER_MAJ} in\n        7) ISO=\"OracleLinux-R${VER_MAJ}-U${VER_MIN}-Server-x86_64-dvd.iso\";;\n        *) ISO=\"OracleLinux-R${VER_MAJ}-U${VER_MIN}-x86_64-dvd.iso\";;\n    esac\n    HASH=$(web_pipe \"https://linux.oracle.com/security/gpg/checksum/OracleLinux-R${VER_MAJ}-U${VER_MIN}-Server-x86_64.checksum\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_parrotsec() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    ISO=\"Parrot-${EDITION}-${RELEASE}_amd64.iso\"\n    URL=\"https://download.parrot.sh/parrot/iso/${RELEASE}\"\n    HASH=\"$(web_pipe \"${URL}/signed-hashes.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_peppermint() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://sourceforge.net/projects/peppermintos/files/isos\"\n    case ${EDITION} in\n        devuan-xfce)\n            ISO=\"PeppermintOS-devuan_64_xfce.iso\"\n            URL=\"${URL}/XFCE\";;\n        debian-xfce)\n            ISO=\"PeppermintOS-Debian-64.iso\"\n            URL=\"${URL}/XFCE\";;\n        devuan-gnome)\n            ISO=\"PeppermintOS-devuan_64_gfb.iso\"\n            URL=\"${URL}/Gnome_FlashBack\";;\n        debian-gnome)\n            ISO=\"PeppermintOS-Debian_64_gfb.iso\"\n            URL=\"${URL}/Gnome_FlashBack\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}-sha512.checksum\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_popos() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    URL=$(web_pipe \"https://api.pop-os.org/builds/${RELEASE}/${EDITION}\" | jq -r .url)\n    HASH=$(web_pipe \"https://api.pop-os.org/builds/${RELEASE}/${EDITION}\" | jq -r .sha_sum)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_porteus() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    edition=\"${EDITION~~}\"\n    ISO=\"Porteus-${edition}-v${RELEASE}-x86_64.iso\"\n    URL=\"https://mirrors.dotsrc.org/porteus/x86_64/Porteus-v${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/sha256sums.txt\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_primtux() {\n    local HASH=\"\"\n    local URL=\"\"\n    local ISO=\"\"\n    ISO=\"PrimTux${RELEASE}-amd64-${EDITION}.iso\"\n    URL=\"https://sourceforge.net/projects/primtux/files/Distribution\"\n    HASH=$(web_pipe \"${URL}/${ISO}.md5\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_proxmox-ve() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    ISO=\"proxmox-ve_${RELEASE}.iso\"\n    URL=\"https://enterprise.proxmox.com/iso\"\n    HASH=$(web_pipe \"${URL}/SHA256SUMS\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n\n}\n\nfunction get_pureos() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    local PureName=\n    PureName=\"$(web_pipe \"https://www.pureos.net/download/\" | grep -m 1 \"downloads.puri\" | cut -d '/' -f 4)\"\n    local PureDate=\n    PureDate=\"$(web_pipe \"https://www.pureos.net/download/\" | grep -m 1 \"downloads.puri\" | cut -d '/' -f 6)\"\n    local PureDateSquashed=\"${PureDate//'-'/}\"\n    edition=\"${EDITION,,}\"\n    URL=\"https://downloads.puri.sm/${PureName}/${edition}/${PureDate}\"\n    ISO=\"pureos-${RELEASE}-${edition}-live-${PureDateSquashed}_amd64.iso\"\n    local IsoTrimmed=\n    IsoTrimmed=\"${ISO%.*}\"\n    HASH=\"$(web_pipe \"${URL}/${IsoTrimmed}.checksums_sha256.txt\" | grep -m 1 '.iso' | cut -d '.' -f 1)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_reactos() {\n    local HASH=\"\"\n    local URL=\"\"\n    URL=\"$(web_redirect \"https://sourceforge.net/projects/reactos/files/latest/download\")\"\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_rebornos() {\n    local HASH=\"\"\n    local ISO=\"\"\n    ISO=$(web_pipe \"https://meta.cdn.soulharsh007.dev/RebornOS-ISO?format=json\" | jq -r \".url\")\n    HASH=$(web_pipe \"https://meta.cdn.soulharsh007.dev/RebornOS-ISO?format=json\" | jq -r \".md5\")\n    echo \"${ISO} ${HASH}\"\n}\n\nfunction get_rockylinux() {\n    if [[ \"${RELEASE}\" =~ ^8. ]] && [[ \"${EDITION}\" == \"dvd\" ]]; then\n        EDITION=\"dvd1\"\n    fi\n    local HASH=\"\"\n    local ISO=\"Rocky-${RELEASE}-x86_64-${EDITION}.iso\"\n    local URL=\"\"\n    URL=\"https://dl.rockylinux.org/vault/rocky/${RELEASE}/isos/x86_64\"\n    HASH=$(web_pipe \"${URL}/CHECKSUM\" | grep \"SHA256\" | grep \"${ISO})\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_siduction() {\n    local HASH=\"\"\n    local DATE=\"\"\n    local ISO=\"\"\n    local NAME=\"\"\n    local URL=\"\"\n    NAME=$(web_pipe \"https://mirror.math.princeton.edu/pub/siduction/iso/\" | grep folder | cut -d'\"' -f8 | tr -d '/')\n    URL=\"https://mirrors.dotsrc.org/siduction/iso/${NAME}/${EDITION}\"\n    DATE=$(web_pipe \"${URL}\"| grep .iso.md5 | cut -d'-' -f6 | cut -d'.' -f1)\n    HASH=$(web_pipe \"${URL}/${ISO}.md5\" | cut -d' ' -f1)\n    VERSION=$(web_pipe \"${URL}\"| grep .iso.md5 | cut -d'-' -f2)\n    ISO=\"siduction-${VERSION}-${NAME}-${EDITION}-amd64-${DATE}.iso\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_slackware() {\n    local HASH=\"\"\n    local ISO=\"slackware64-${RELEASE}-install-dvd.iso\"\n    local URL=\"https://slackware.nl/slackware/slackware-iso/slackware64-${RELEASE}-iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.md5\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_slax() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    case ${EDITION} in\n        debian)\n            URL=\"https://ftp.fi.muni.cz/pub/linux/slax/Slax-12.x\"\n            ISO=$(web_pipe \"${URL}/md5.txt\" | grep '64bit-' | cut -d' ' -f3 | tail -n1);;\n        slackware)\n            URL=\"https://ftp.fi.muni.cz/pub/linux/slax/Slax-15.x\"\n            ISO=$(web_pipe \"${URL}/md5.txt\" | grep '64bit-' | cut -d' ' -f3 | tail -n1);;\n    esac\n    HASH=$(web_pipe \"${URL}/md5.txt\" | grep '64bit-' | cut -d' ' -f1 | tail -n1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_slint() {\n    local HASH=\"\"\n    local MAJ_VER=\"\"\n    local ISO=\"slint64-${RELEASE}.iso\"\n    MAJ_VER=\"$(echo \"${RELEASE}\" | cut -d'-' -f 1)\"\n    local URL=\"https://slackware.uk/slint/x86_64/slint-${MAJ_VER}/iso\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256\" | cut -d' ' -f4)\n    echo \"${URL}/${ISO}\" \"${HASH}\"\n}\n\nfunction get_slitaz() {\n    local HASH=\"\"\n    local ISO=\"slitaz-rolling-${RELEASE}\"\n    local URL=\"http://mirror.slitaz.org/iso/rolling\"\n    HASH=$(web_pipe \"${URL}/${ISO}.md5\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO}.iso ${HASH}\"\n}\n\nfunction get_solus() {\n    local HASH=\"\"\n    local ISO=\"Solus-${EDITION}-Release-${RELEASE}.iso\"\n    local URL=\"https://downloads.getsol.us/isos/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/${ISO}.sha256sum\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_sparkylinux() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    ISO=\"sparkylinux-${RELEASE}-x86_64-${EDITION}.iso\"\n    case ${EDITION} in\n        minimalcli) URL=\"https://sourceforge.net/projects/sparkylinux/files/cli\";;\n        minimalgui) URL=\"https://sourceforge.net/projects/sparkylinux/files/base\";;\n        *) URL=\"https://sourceforge.net/projects/sparkylinux/files/${EDITION}\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.allsums.txt\" | head -n 2 | grep 'iso' | cut -d' ' -f1)\n    echo \"${URL}/${ISO}\" \"${HASH}\"\n}\n\nfunction get_spirallinux() {\n    local HASH=\"\"\n    local ISO=\"SpiralLinux_${EDITION}_12.231005_x86-64.iso\"\n    local URL=\"https://sourceforge.net/projects/spirallinux/files/12.231005\"\n    HASH=$(web_pipe 'https://sourceforge.net/projects/spirallinux/rss?path=/' | grep \"${ISO}\" | grep 'md5' | cut -d'<' -f3 | cut -d'>' -f2)\n    echo \"${URL}/${ISO}\" \"${HASH}\"\n}\n\nfunction get_tails() {\n    local JSON=\"\"\n    local HASH=\"\"\n    local URL=\"\"\n    JSON=\"$(web_pipe \"https://tails.boum.org/install/v2/Tails/amd64/${RELEASE}/latest.json\")\"\n    URL=$(echo \"${JSON}\" | jq -r '.installations[0].\"installation-paths\"[]|select(.type==\"iso\")|.\"target-files\"[0].url')\n    HASH=$(echo \"${JSON}\" | jq -r '.installations[0].\"installation-paths\"[]|select(.type==\"iso\")|.\"target-files\"[0].sha256')\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_tinycore() {\n    local ARCH=\"x86\"\n    local HASH=\"\"\n    local ISO=\"${EDITION}-${RELEASE}.0.iso\"\n    case \"${EDITION}\" in\n        *Pure*) ARCH+=\"_64\";;\n    esac\n    local URL=\"http://www.tinycorelinux.net/${RELEASE}.x/${ARCH}/release\"\n    HASH=$(web_pipe \"${URL}/${ISO}.md5.txt\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_trisquel() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://mirrors.ocf.berkeley.edu/trisquel-images\"\n    case ${EDITION} in\n        mate) ISO=\"trisquel_${RELEASE}_amd64.iso\";;\n        lxde) ISO=\"trisquel-mini_${RELEASE}_amd64.iso\";;\n        kde) ISO=\"triskel_${RELEASE}_amd64.iso\";;\n        sugar) ISO=\"trisquel-sugar_${RELEASE}_amd64.iso\";;\n    esac\n    HASH=$(web_pipe \"${URL}/${ISO}.sha1\" | grep \"${ISO}\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_truenas-scale() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    local DLINFO=\"https://www.truenas.com/download-truenas-scale/\"\n    URL=$(web_pipe \"${DLINFO}\" | grep -o \"\\\"https://.*${RELEASE}.*\\.iso\\\"\" | cut -d'\"' -f 2)\n    HASH=$(web_pipe \"${URL}.sha256\" | cut -d' ' -f1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_truenas-core() {\n    local ISO=\"\"\n    local URL=\"\"\n    local DLINFO=\"https://www.truenas.com/download-truenas-core/\"\n    URL=$(web_pipe \"${DLINFO}\" | grep -o \"\\\"https://.*${RELEASE}.*\\.iso\\\"\" | cut -d'\"' -f 2)\n    HASH=$(web_pipe \"${URL}\".sha256 | cut -d' ' -f1)\n    echo \"${URL} ${HASH}\"\n}\n\nfunction get_tuxedo-os() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://os.tuxedocomputers.com\"\n    ISO=\"$(web_pipe \"https://os.tuxedocomputers.com/\" | grep -m 1 current.iso | cut -d '=' -f 4 | cut -d '\"' -f 2)\"\n    HASH=\"$(web_pipe \"https://os.tuxedocomputers.com/checksums/${ISO}.sha256\" | cut -d ' ' -f 1)\"\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_ubuntu-server() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local NAME=\"live-server\"\n    local URL=\"\"\n\n    if [[ \"${RELEASE}\" == \"daily\"* ]]; then\n        URL=\"https://cdimage.ubuntu.com/${OS}/${RELEASE}/current\"\n    else\n        URL=\"https://releases.ubuntu.com/${RELEASE}\"\n    fi\n\n    case \"${RELEASE}\" in\n        14*|16*) NAME=\"server\";;\n    esac\n\n    if web_check \"${URL}/SHA256SUMS\"; then\n        DATA=$(web_pipe \"${URL}/SHA256SUMS\" | grep \"${NAME}\" | grep amd64 | grep iso)\n        ISO=$(cut -d'*' -f2 <<<\"${DATA}\")\n        HASH=$(cut -d' ' -f1 <<<\"${DATA}\")\n    else\n        DATA=$(web_pipe \"${URL}/MD5SUMS\" | grep \"${NAME}\" | grep amd64 | grep iso)\n        ISO=$(cut -d' ' -f3 <<<\"${DATA}\")\n        HASH=$(cut -d' ' -f1 <<<\"${DATA}\")\n    fi\n    if [[ \"${RELEASE}\" == \"daily\"* ]] || [ \"${RELEASE}\" == \"dvd\" ]; then\n        zsync_get \"${URL}/${ISO}\" \"${VM_PATH}\" \"${OS}-devel.iso\"\n        make_vm_config \"${OS}-devel.iso\"\n    else\n        web_get \"${URL}/${ISO}\" \"${VM_PATH}\"\n        check_hash \"${ISO}\" \"${HASH}\"\n        make_vm_config \"${ISO}\"\n    fi\n}\n\nfunction get_ubuntu() {\n    local ISO=\"\"\n    local HASH=\"\"\n    local URL=\"\"\n    local DATA=\"\"\n\n    if [[ \"${RELEASE}\" == \"daily\"* ]] && [ \"${OS}\" == \"ubuntustudio\" ]; then\n        # Ubuntu Studio daily-live images are in the dvd directory\n        RELEASE=\"dvd\"\n    fi\n    if [[ \"${RELEASE}\" == \"jammy-daily\" ]]; then\n        if [[ \"${OS}\" == \"ubuntustudio\" ]]; then\n            URL=\"https://cdimage.ubuntu.com/${OS}/jammy/dvd/current\"\n        else\n            URL=\"https://cdimage.ubuntu.com/${OS}/jammy/daily-live/current\"\n        fi\n        VM_PATH=\"${OS}-jammy-live\"\n    elif [[ \"${RELEASE}\" == \"daily\"* ]] || [ \"${RELEASE}\" == \"dvd\" ]; then\n        URL=\"https://cdimage.ubuntu.com/${OS}/${RELEASE}/current\"\n        VM_PATH=\"${OS}-${RELEASE}\"\n    elif [ \"${OS}\" == \"ubuntu\" ]; then\n        URL=\"https://releases.ubuntu.com/${RELEASE}\"\n    else\n        URL=\"https://cdimage.ubuntu.com/${OS}/releases/${RELEASE}/release\"\n    fi\n    if web_check \"${URL}/SHA256SUMS\"; then\n        DATA=$(web_pipe \"${URL}/SHA256SUMS\" | grep 'desktop\\|dvd\\|install' | grep amd64 | grep iso | grep -v \"+mac\")\n        ISO=$(cut -d'*' -f2 <<<\"${DATA}\" | sed '1q;d')\n        HASH=$(cut -d' ' -f1 <<<\"${DATA}\" | sed '1q;d')\n    else\n        DATA=$(web_pipe \"${URL}/MD5SUMS\" | grep 'desktop\\|dvd\\|install' | grep amd64 | grep iso | grep -v \"+mac\")\n        ISO=$(cut -d'*' -f2 <<<\"${DATA}\")\n        HASH=$(cut -d' ' -f1 <<<\"${DATA}\")\n    fi\n    if [ -z \"${ISO}\" ] || [ -z \"${HASH}\" ]; then\n        echo \"$(pretty_name \"${OS}\") ${RELEASE} is currently unavailable. Please select other OS/Release combination\"\n        exit 1\n    fi\n    if [[ \"${RELEASE}\" == \"daily\"* ]] || [ \"${RELEASE}\" == \"dvd\" ]; then\n        zsync_get \"${URL}/${ISO}\" \"${VM_PATH}\" \"${OS}-devel.iso\"\n        make_vm_config \"${OS}-devel.iso\"\n    elif [[ \"${RELEASE}\" == \"jammy-daily\" ]]; then\n        zsync_get \"${URL}/${ISO}\" \"${VM_PATH}\" \"${OS}-jammy-live.iso\"\n        make_vm_config \"${OS}-jammy-live.iso\"\n    else\n        web_get \"${URL}/${ISO}\" \"${VM_PATH}\"\n        check_hash \"${ISO}\" \"${HASH}\"\n        make_vm_config \"${ISO}\"\n    fi\n}\n\nfunction get_vanillaos() {\n    local HASH=\"\"\n    local HASH_URL=\"\"\n    local ISO=\"\"\n    ISO=$(web_pipe \"https://api.github.com/repos/Vanilla-OS/live-iso/releases\" | grep 'download_url' | grep \"${RELEASE}\" | head -n 1 | cut -d'\"' -f4)\n    HASH_URL=\"${ISO//.iso/.sha256.txt}\"\n    HASH=$(web_pipe \"${HASH_URL}\" | cut -d' ' -f1)\n    echo \"${ISO} ${HASH}\"\n}\n\nfunction get_void() {\n    local DATE=\"\"\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"https://repo-default.voidlinux.org/live\"\n    case ${EDITION} in\n        glibc) ISO=\"void-live-x86_64-${RELEASE}-base.iso\";;\n        musl) ISO=\"void-live-x86_64-musl-${RELEASE}-base.iso\";;\n        xfce-glibc) ISO=\"void-live-x86_64-${RELEASE}-xfce.iso\";;\n        xfce-musl) ISO=\"void-live-x86_64-musl-${RELEASE}-xfce.iso\";;\n    esac\n    HASH=\"$(web_pipe \"${URL}/sha256sum.txt\" | grep \"${ISO}\" | cut -d' ' -f4)\"\n    echo \"${URL}/${RELEASE}/${ISO} ${HASH}\"\n}\n\nfunction get_vxlinux() {\n    local HASH=\"\"\n    local ISO=\"vx-${RELEASE}.iso\"\n    local URL=\"https://github.com/VX-Linux/main/releases/download/${RELEASE}\"\n    HASH=$(web_pipe \"${URL}/vx-${RELEASE}.md5\" | cut -d' ' -f1)\n    echo \"${URL}/${ISO} ${HASH}\"\n}\n\nfunction get_zorin() {\n    local HASH=\"\"\n    local ISO=\"\"\n    local URL=\"\"\n    # Process the URL redirections; required for Zorin\n    URL=$(web_redirect \"https://zrn.co/${RELEASE}${EDITION}\")\n    echo \"${URL} ${HASH}\"\n}\n\nfunction unattended_windows() {\n    mkdir -p \"${1}/unattended\" 2>/dev/null\n\n    cat << 'EOF' > \"${1}/unattended/autounattend.xml\"\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<unattend xmlns=\"urn:schemas-microsoft-com:unattend\"\n  xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\"\n  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n  <!--\n       For documentation on components:\n       https://docs.microsoft.com/en-us/windows-hardware/customize/desktop/unattend/\n  -->\n  <settings pass=\"offlineServicing\">\n    <component name=\"Microsoft-Windows-LUA-Settings\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <EnableLUA>false</EnableLUA>\n    </component>\n    <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <ComputerName>*</ComputerName>\n    </component>\n  </settings>\n\n  <settings pass=\"generalize\">\n    <component name=\"Microsoft-Windows-PnPSysprep\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\">\n      <PersistAllDeviceInstalls>true</PersistAllDeviceInstalls>\n    </component>\n    <component name=\"Microsoft-Windows-Security-SPP\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <SkipRearm>1</SkipRearm>\n    </component>\n  </settings>\n\n  <settings pass=\"specialize\">\n    <component name=\"Microsoft-Windows-Security-SPP-UX\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <SkipAutoActivation>true</SkipAutoActivation>\n    </component>\n    <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <ComputerName>*</ComputerName>\n      <OEMInformation>\n        <Manufacturer>Quickemu Project</Manufacturer>\n        <Model>Quickemu</Model>\n        <SupportHours>24/7</SupportHours>\n        <SupportPhone></SupportPhone>\n        <SupportProvider>Quickemu Project</SupportProvider>\n        <SupportURL>https://github.com/quickemu-project/quickemu/issues</SupportURL>\n      </OEMInformation>\n      <OEMName>Quickemu Project</OEMName>\n      <ProductKey>W269N-WFGWX-YVC9B-4J6C9-T83GX</ProductKey>\n    </component>\n    <component name=\"Microsoft-Windows-SQMApi\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <CEIPEnabled>0</CEIPEnabled>\n    </component>\n  </settings>\n\n  <settings pass=\"windowsPE\">\n    <component name=\"Microsoft-Windows-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <Diagnostics>\n        <OptIn>false</OptIn>\n      </Diagnostics>\n      <DiskConfiguration>\n        <Disk wcm:action=\"add\">\n          <DiskID>0</DiskID>\n          <WillWipeDisk>true</WillWipeDisk>\n          <CreatePartitions>\n            <!-- Windows RE Tools partition -->\n            <CreatePartition wcm:action=\"add\">\n              <Order>1</Order>\n              <Type>Primary</Type>\n              <Size>256</Size>\n            </CreatePartition>\n            <!-- System partition (ESP) -->\n            <CreatePartition wcm:action=\"add\">\n              <Order>2</Order>\n              <Type>EFI</Type>\n              <Size>128</Size>\n            </CreatePartition>\n            <!-- Microsoft reserved partition (MSR) -->\n            <CreatePartition wcm:action=\"add\">\n              <Order>3</Order>\n              <Type>MSR</Type>\n              <Size>128</Size>\n            </CreatePartition>\n            <!-- Windows partition -->\n            <CreatePartition wcm:action=\"add\">\n              <Order>4</Order>\n              <Type>Primary</Type>\n              <Extend>true</Extend>\n            </CreatePartition>\n          </CreatePartitions>\n          <ModifyPartitions>\n            <!-- Windows RE Tools partition -->\n            <ModifyPartition wcm:action=\"add\">\n              <Order>1</Order>\n              <PartitionID>1</PartitionID>\n              <Label>WINRE</Label>\n              <Format>NTFS</Format>\n              <TypeID>DE94BBA4-06D1-4D40-A16A-BFD50179D6AC</TypeID>\n            </ModifyPartition>\n            <!-- System partition (ESP) -->\n            <ModifyPartition wcm:action=\"add\">\n              <Order>2</Order>\n              <PartitionID>2</PartitionID>\n              <Label>System</Label>\n              <Format>FAT32</Format>\n            </ModifyPartition>\n            <!-- MSR partition does not need to be modified -->\n            <ModifyPartition wcm:action=\"add\">\n              <Order>3</Order>\n              <PartitionID>3</PartitionID>\n            </ModifyPartition>\n            <!-- Windows partition -->\n              <ModifyPartition wcm:action=\"add\">\n              <Order>4</Order>\n              <PartitionID>4</PartitionID>\n              <Label>Windows</Label>\n              <Letter>C</Letter>\n              <Format>NTFS</Format>\n            </ModifyPartition>\n          </ModifyPartitions>\n        </Disk>\n      </DiskConfiguration>\n      <DynamicUpdate>\n        <Enable>true</Enable>\n        <WillShowUI>Never</WillShowUI>\n      </DynamicUpdate>\n      <ImageInstall>\n        <OSImage>\n          <InstallTo>\n            <DiskID>0</DiskID>\n            <PartitionID>4</PartitionID>\n          </InstallTo>\n          <InstallToAvailablePartition>false</InstallToAvailablePartition>\n        </OSImage>\n      </ImageInstall>\n      <RunSynchronous>\n        <RunSynchronousCommand wcm:action=\"add\">\n          <Order>1</Order>\n          <Path>reg add HKLM\\System\\Setup\\LabConfig /v BypassCPUCheck /t REG_DWORD /d 0x00000001 /f</Path>\n        </RunSynchronousCommand>\n        <RunSynchronousCommand wcm:action=\"add\">\n          <Order>2</Order>\n          <Path>reg add HKLM\\System\\Setup\\LabConfig /v BypassRAMCheck /t REG_DWORD /d 0x00000001 /f</Path>\n        </RunSynchronousCommand>\n        <RunSynchronousCommand wcm:action=\"add\">\n          <Order>3</Order>\n          <Path>reg add HKLM\\System\\Setup\\LabConfig /v BypassSecureBootCheck /t REG_DWORD /d 0x00000001 /f</Path>\n        </RunSynchronousCommand>\n        <RunSynchronousCommand wcm:action=\"add\">\n          <Order>4</Order>\n          <Path>reg add HKLM\\System\\Setup\\LabConfig /v BypassTPMCheck /t REG_DWORD /d 0x00000001 /f</Path>\n        </RunSynchronousCommand>\n      </RunSynchronous>\n      <UpgradeData>\n        <Upgrade>false</Upgrade>\n        <WillShowUI>Never</WillShowUI>\n      </UpgradeData>\n      <UserData>\n        <AcceptEula>true</AcceptEula>\n        <FullName>Quickemu</FullName>\n        <Organization>Quickemu Project</Organization>\n        <!-- https://docs.microsoft.com/en-us/windows-server/get-started/kms-client-activation-keys -->\n        <ProductKey>\n          <Key>W269N-WFGWX-YVC9B-4J6C9-T83GX</Key>\n          <WillShowUI>Never</WillShowUI>\n        </ProductKey>\n      </UserData>\n    </component>\n\n    <component name=\"Microsoft-Windows-PnpCustomizationsWinPE\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" processorArchitecture=\"amd64\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <!--\n           This makes the VirtIO drivers available to Windows, assuming that\n           the VirtIO driver disk is available as drive E:\n           https://github.com/virtio-win/virtio-win-pkg-scripts/blob/master/README.md\n      -->\n      <DriverPaths>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"1\">\n          <Path>E:\\qemufwcfg\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"2\">\n          <Path>E:\\vioinput\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"3\">\n          <Path>E:\\vioscsi\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"4\">\n          <Path>E:\\viostor\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"5\">\n          <Path>E:\\vioserial\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"6\">\n          <Path>E:\\qxldod\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"7\">\n          <Path>E:\\amd64\\w10</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"8\">\n          <Path>E:\\viogpudo\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"9\">\n          <Path>E:\\viorng\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"10\">\n          <Path>E:\\NetKVM\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"11\">\n          <Path>E:\\viofs\\w10\\amd64</Path>\n        </PathAndCredentials>\n        <PathAndCredentials wcm:action=\"add\" wcm:keyValue=\"12\">\n          <Path>E:\\Balloon\\w10\\amd64</Path>\n        </PathAndCredentials>\n      </DriverPaths>\n    </component>\n  </settings>\n\n  <settings pass=\"oobeSystem\">\n    <component name=\"Microsoft-Windows-Shell-Setup\" processorArchitecture=\"amd64\" publicKeyToken=\"31bf3856ad364e35\" language=\"neutral\" versionScope=\"nonSxS\" xmlns:wcm=\"http://schemas.microsoft.com/WMIConfig/2002/State\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\">\n      <AutoLogon>\n        <Password>\n          <Value>quickemu</Value>\n          <PlainText>true</PlainText>\n        </Password>\n        <Enabled>true</Enabled>\n        <Username>Quickemu</Username>\n      </AutoLogon>\n      <DisableAutoDaylightTimeSet>false</DisableAutoDaylightTimeSet>\n      <OOBE>\n        <HideEULAPage>true</HideEULAPage>\n        <HideLocalAccountScreen>true</HideLocalAccountScreen>\n        <HideOEMRegistrationScreen>true</HideOEMRegistrationScreen>\n        <HideOnlineAccountScreens>true</HideOnlineAccountScreens>\n        <HideWirelessSetupInOOBE>true</HideWirelessSetupInOOBE>\n        <NetworkLocation>Home</NetworkLocation>\n        <ProtectYourPC>3</ProtectYourPC>\n        <SkipUserOOBE>true</SkipUserOOBE>\n        <SkipMachineOOBE>true</SkipMachineOOBE>\n        <VMModeOptimizations>\n          <SkipWinREInitialization>true</SkipWinREInitialization>\n        </VMModeOptimizations>\n      </OOBE>\n      <UserAccounts>\n        <LocalAccounts>\n          <LocalAccount wcm:action=\"add\">\n            <Password>\n              <Value>quickemu</Value>\n              <PlainText>true</PlainText>\n            </Password>\n            <Description>Quickemu</Description>\n            <DisplayName>Quickemu</DisplayName>\n            <Group>Administrators</Group>\n            <Name>Quickemu</Name>\n          </LocalAccount>\n        </LocalAccounts>\n      </UserAccounts>\n      <RegisteredOrganization>Quickemu Project</RegisteredOrganization>\n      <RegisteredOwner>Quickemu</RegisteredOwner>\n      <FirstLogonCommands>\n        <SynchronousCommand wcm:action=\"add\">\n          <CommandLine>msiexec /i E:\\guest-agent\\qemu-ga-x86_64.msi /quiet /passive /qn</CommandLine>\n          <Description>Install Virtio Guest Agent</Description>\n          <Order>1</Order>\n        </SynchronousCommand>\n        <SynchronousCommand wcm:action=\"add\">\n          <CommandLine>msiexec /i F:\\spice-webdavd-x64-latest.msi /quiet /passive /qn</CommandLine>\n          <Description>Install spice-webdavd file sharing agent</Description>\n          <Order>2</Order>\n        </SynchronousCommand>\n        <SynchronousCommand wcm:action=\"add\">\n          <CommandLine>msiexec /i F:\\UsbDk_1.0.22_x64.msi /quiet /passive /qn</CommandLine>\n          <Description>Install usbdk USB sharing agent</Description>\n          <Order>3</Order>\n        </SynchronousCommand>\n        <SynchronousCommand wcm:action=\"add\">\n          <CommandLine>msiexec /i F:\\spice-vdagent-x64-0.10.0.msi /quiet /passive /qn</CommandLine>\n          <Description>Install spice-vdagent SPICE agent</Description>\n          <Order>4</Order>\n        </SynchronousCommand>\n        <SynchronousCommand wcm:action=\"add\">\n          <CommandLine>Cmd /c POWERCFG -H OFF</CommandLine>\n          <Description>Disable Hibernation</Description>\n          <Order>5</Order>\n        </SynchronousCommand>\n      </FirstLogonCommands>\n    </component>\n  </settings>\n</unattend>\nEOF\n\n\necho \"Downloading Spice drivers...\"\nweb_get https://www.spice-space.org/download/windows/spice-webdavd/spice-webdavd-x64-latest.msi \"${VM_PATH}/unattended\"\nweb_get https://www.spice-space.org/download/windows/vdagent/vdagent-win-0.10.0/spice-vdagent-x64-0.10.0.msi \"${VM_PATH}/unattended\"\nweb_get https://www.spice-space.org/download/windows/usbdk/UsbDk_1.0.22_x64.msi \"${VM_PATH}/unattended\"\n\necho \"Making unattended.iso\"\nmkisofs -quiet -l -o \"${VM_PATH}/unattended.iso\" \"${VM_PATH}/unattended/\"\n}\n\nfunction handle_curl_error() {\n    local error_code=\"$1\"\n    local fatal_error_action=2\n    case \"$error_code\" in\n        6)\n            echo \"Failed to resolve Microsoft servers! Is there an Internet connection? Exiting...\"\n            return \"$fatal_error_action\"\n            ;;\n        7)\n            echo \"Failed to contact Microsoft servers! Is there an Internet connection or is the server down?\"\n            ;;\n        8)\n            echo \"Microsoft servers returned a malformed HTTP response!\"\n            ;;\n        22)\n            echo \"Microsoft servers returned a failing HTTP status code!\"\n            ;;\n        23)\n            echo \"Failed at writing Windows media to disk! Out of disk space or permission error? Exiting...\"\n            return \"$fatal_error_action\"\n            ;;\n        26)\n            echo \"Ran out of memory during download! Exiting...\"\n            return \"$fatal_error_action\"\n            ;;\n        36)\n            echo \"Failed to continue earlier download!\"\n            ;;\n        63)\n            echo \"Microsoft servers returned an unexpectedly large response!\"\n            ;;\n            # POSIX defines exit statuses 1-125 as usable by us\n            # https://pubs.opengroup.org/onlinepubs/9699919799/utilities/V3_chap02.html#tag_18_08_02\n            $((error_code <= 125)))\n            # Must be some other server or network error (possibly with this specific request/file)\n            # This is when accounting for all possible errors in the curl manual assuming a correctly formed curl command and an HTTP(S) request, using only the curl features we're using, and a sane build\n            echo \"Miscellaneous server or network error!\"\n            ;;\n        126 | 127 )\n            echo \"Curl command not found! Please install curl and try again. Exiting...\"\n            return \"$fatal_error_action\"\n            ;;\n        # Exit statuses are undefined by POSIX beyond this point\n        *)\n            case \"$(kill -l \"$error_code\")\" in\n            # Signals defined to exist by POSIX:\n            # https://pubs.opengroup.org/onlinepubs/009695399/basedefs/signal.h.html\n            INT)\n                echo \"Curl was interrupted!\"\n                ;;\n            # There could be other signals but these are most common\n            SEGV | ABRT )\n                echo \"Curl crashed! Failed exploitation attempt? Please report any core dumps to curl developers. Exiting...\"\n                return \"$fatal_error_action\"\n                ;;\n            *)\n                echo \"Curl terminated due to a fatal signal!\"\n                ;;\n            esac\n    esac\n    return 1\n}\n\nfunction download_windows_server() {\n    local iso_download_page_html=\"\"\n    # Copyright (C) 2024 Elliot Killick <contact@elliotkillick.com>\n    # This function is adapted from the Mido project:\n    # https://github.com/ElliotKillick/Mido\n\n    # Download enterprise evaluation Windows versions\n    local windows_version=\"$1\"\n    local enterprise_type=\"$2\"\n    local PRETTY_RELEASE=\"\"\n\n    case \"${RELEASE}\" in\n        *) PRETTY_RELEASE=\"${RELEASE}\";;\n    esac\n\n    echo \"Downloading $(pretty_name \"${OS}\") ${PRETTY_RELEASE} (${I18N})\"\n\n    local url=\"https://www.microsoft.com/en-us/evalcenter/download-$windows_version\"\n\n    echo \" - Parsing download page: ${url}\"\n    iso_download_page_html=\"$(curl --silent --location --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- \"$url\")\" || {\n        handle_curl_error $?\n        return $?\n    }\n\n    if ! [ \"$iso_download_page_html\" ]; then\n        # This should only happen if there's been some change to where this download page is located\n        echo \" - Windows server download page gave us an empty response\"\n        return 1\n    fi\n\n    local CULTURE=\"\"\n    local COUNTRY=\"\"\n    case \"${I18N}\" in\n        \"English (Great Britain)\")\n            CULTURE=\"en-gb\"\n            COUNTRY=\"GB\";;\n        \"Chinese (Simplified)\")\n            CULTURE=\"zh-cn\"\n            COUNTRY=\"CN\";;\n        \"Chinese (Traditional)\")\n            CULTURE=\"zh-tw\"\n            COUNTRY=\"TW\";;\n        \"French\")\n            CULTURE=\"fr-fr\"\n            COUNTRY=\"FR\";;\n        \"German\")\n            CULTURE=\"de-de\"\n            COUNTRY=\"DE\";;\n        \"Italian\")\n            CULTURE=\"it-it\"\n            COUNTRY=\"IT\";;\n        \"Japanese\")\n            CULTURE=\"ja-jp\"\n            COUNTRY=\"JP\";;\n        \"Korean\")\n            CULTURE=\"ko-kr\"\n            COUNTRY=\"KR\";;\n        \"Portuguese (Brazil)\")\n            CULTURE=\"pt-br\"\n            COUNTRY=\"BR\";;\n        \"Spanish\")\n            CULTURE=\"es-es\"\n            COUNTRY=\"ES\";;\n        \"Russian\")\n            CULTURE=\"ru-ru\"\n            COUNTRY=\"RU\";;\n        *)\n            CULTURE=\"en-us\"\n            COUNTRY=\"US\";;\n    esac\n\n    echo \" - Getting download link..\"\n    iso_download_links=\"$(echo \"$iso_download_page_html\" | grep -o \"https://go.microsoft.com/fwlink/p/?LinkID=[0-9]\\+&clcid=0x[0-9a-z]\\+&culture=${CULTURE}&country=${COUNTRY}\")\" || {\n        # This should only happen if there's been some change to the download endpoint web address\n        echo \" - Windows server download page gave us no download link\"\n        return 1\n    }\n\n    # Limit untrusted size for input validation\n    iso_download_links=\"$(echo \"$iso_download_links\" | head -c 1024)\"\n\n    case \"$enterprise_type\" in\n        # Select x64 download link\n        \"enterprise\") iso_download_link=$(echo \"$iso_download_links\" | head -n 2 | tail -n 1) ;;\n        # Select x64 LTSC download link\n        \"ltsc\") iso_download_link=$(echo \"$iso_download_links\" | head -n 4 | tail -n 1) ;;\n        *) iso_download_link=\"$iso_download_links\" ;;\n    esac\n\n    # Follow redirect so proceeding log message is useful\n    # This is a request we make this Fido doesn't\n    # We don't need to set \"--max-filesize\" here because this is a HEAD request and the output is to /dev/null anyway\n    iso_download_link=\"$(curl --silent --location --output /dev/null --silent --write-out \"%{url_effective}\" --head --fail --proto =https --tlsv1.2 --http1.1 -- \"$iso_download_link\")\" || {\n        # This should only happen if the Microsoft servers are down\n        handle_curl_error $?\n        return $?\n    }\n\n    # Limit untrusted size for input validation\n    iso_download_link=\"$(echo \"$iso_download_link\" | head -c 1024)\"\n\n    echo \" - URL: $iso_download_link\"\n\n    # Download ISO\n    FILE_NAME=\"${iso_download_link##*/}\"\n    web_get \"${iso_download_link}\" \"${VM_PATH}\" \"${FILE_NAME}\"\n    OS=\"windows-server\"\n}\n\nfunction download_windows_workstation() {\n    local HASH=\"\"\n    local session_id=\"\"\n    local iso_download_page_html=\"\"\n    local product_edition_id=\"\"\n    local language_skuid_table_json=\"\"\n    local sku_id=\"\"\n    local iso_download_link_json=\"\"\n    local iso_download_link=\"\"\n\n    echo \"Downloading Windows ${RELEASE} (${I18N})\"\n    # This function is adapted from the Mido project:\n    # https://github.com/ElliotKillick/Mido\n    # Download newer consumer Windows versions from behind gated Microsoft API\n\n    # Either 10, or 11\n    local windows_version=\"$1\"\n\n    local url=\"https://www.microsoft.com/en-us/software-download/windows$windows_version\"\n    case \"$windows_version\" in\n        10) url=\"${url}ISO\";;\n    esac\n\n    local user_agent=\"Mozilla/5.0 (X11; Linux x86_64; rv:100.0) Gecko/20100101 Firefox/100.0\"\n    session_id=\"$(uuidgen)\"\n\n    # Get product edition ID for latest release of given Windows version\n    # Product edition ID: This specifies both the Windows release (e.g. 22H2) and edition (\"multi-edition\" is default, either Home/Pro/Edu/etc., we select \"Pro\" in the answer files) in one number\n    # This is the *only* request we make that Fido doesn't. Fido manually maintains a list of all the Windows release/edition product edition IDs in its script (see: $WindowsVersions array). This is helpful for downloading older releases (e.g. Windows 10 1909, 21H1, etc.) but we always want to get the newest release which is why we get this value dynamically\n    # Also, keeping a \"$WindowsVersions\" array like Fido does would be way too much of a maintenance burden\n    # Remove \"Accept\" header that curl sends by default\n    echo \" - Parsing download page: ${url}\"\n    iso_download_page_html=\"$(curl --silent --user-agent \"$user_agent\" --header \"Accept:\" --max-filesize 1M --fail --proto =https --tlsv1.2 --http1.1 -- \"$url\")\" || {\n        handle_curl_error $?\n        return $?\n    }\n\n    echo -n \" - Getting Product edition ID: \"\n    # tr: Filter for only numerics to prevent HTTP parameter injection\n    # head -c was recently added to POSIX: https://austingroupbugs.net/view.php?id=407\n    product_edition_id=\"$(echo \"$iso_download_page_html\" | grep -Eo '<option value=\"[0-9]+\">Windows' | cut -d '\"' -f 2 | head -n 1 | tr -cd '0-9' | head -c 16)\"\n    echo \"$product_edition_id\"\n\n    echo \" - Permit Session ID: $session_id\"\n    # Permit Session ID\n    # \"org_id\" is always the same value\n    curl --silent --output /dev/null --user-agent \"$user_agent\" --header \"Accept:\" --max-filesize 100K --fail --proto =https --tlsv1.2 --http1.1 -- \"https://vlscppe.microsoft.com/tags?org_id=y6jn8c31&session_id=$session_id\" || {\n        # This should only happen if there's been some change to how this API works\n        handle_curl_error $?\n        return $?\n    }\n\n    local profile=\"606624d44113\"\n\n    echo -n \" - Getting language SKU ID: \"\n    # Get language -> skuID association table\n    language_skuid_table_json=\"$(curl -s --fail --max-filesize 100K --proto =https --tlsv1.2 --http1.1 \"https://www.microsoft.com/software-download-connector/api/getskuinformationbyproductedition?profile=${profile}&ProductEditionId=${product_edition_id}&SKU=undefined&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}\")\" || {\n        handle_curl_error $?\n        return $?\n    }\n\n    sku_id=\"$(echo \"${language_skuid_table_json}\" | jq -r '.Skus[] | select(.LocalizedLanguage==\"'\"${I18N}\"'\" or .Language==\"'\"${I18N}\"'\").Id')\"\n    echo \"$sku_id\"\n\n    echo \" - Getting ISO download link...\"\n    # Get ISO download link\n    # If any request is going to be blocked by Microsoft it's always this last one (the previous requests always seem to succeed)\n    # --referer: Required by Microsoft servers to allow request\n    iso_download_link_json=\"$(curl -s --fail --referer \"$url\" \"https://www.microsoft.com/software-download-connector/api/GetProductDownloadLinksBySku?profile=${profile}&productEditionId=undefined&SKU=${sku_id}&friendlyFileName=undefined&Locale=en-US&sessionID=${session_id}\")\"\n\n    local failed=0\n\n    if ! [ \"$iso_download_link_json\" ]; then\n        # This should only happen if there's been some change to how this API works\n        echo \" - Microsoft servers gave us an empty response to our request for an automated download.\"\n        failed=1\n    fi\n\n    if echo \"$iso_download_link_json\" | grep -q \"Sentinel marked this request as rejected.\"; then\n        echo \" - WARNING! Microsoft blocked the automated download request based on your IP address.\"\n        failed=1\n    fi\n\n    if [ ${failed} -eq 1 ]; then\n        echo \"   Manually download the Windows ${windows_version} ISO using a web browser from: ${url}\"\n        echo \"   Save the downloaded ISO to: $(realpath \"${VM_PATH}\")\"\n        echo \"   Update the config file to reference the downloaded ISO: ./${VM_PATH}.conf\"\n        echo \"   Continuing with the VM creation process...\"\n        return 1\n    fi\n\n    # Filter for 64-bit ISO download URL\n    iso_download_link=\"$(echo \"${iso_download_link_json}\" | jq -r '.ProductDownloadOptions[].Uri' | grep x64)\"\n\n    if ! [ \"$iso_download_link\" ]; then\n        # This should only happen if there's been some change to the download endpoint web address\n        echo \" - Microsoft servers gave us no download link to our request for an automated download. Please manually download this ISO in a web browser: $url\"\n        return 1\n    fi\n\n    echo \" - URL: ${iso_download_link%%\\?*}\"\n\n    # Download ISO\n    FILE_NAME=\"$(echo \"$iso_download_link\" | cut -d'?' -f1 | cut -d'/' -f5)\"\n    web_get \"${iso_download_link}\" \"${VM_PATH}\" \"${FILE_NAME}\"\n}\n\nfunction get_windows() {\n    if [ \"${OS}\" == \"windows-server\" ]; then\n        download_windows_server \"windows-server-${RELEASE}\"\n    else\n        download_windows_workstation \"${RELEASE}\"\n    fi\n\n    if [ \"${OPERATION}\" == \"download\" ]; then\n        exit 0\n    fi\n\n    echo \"Downloading VirtIO drivers...\"\n    web_get \"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso\" \"${VM_PATH}\"\n\n    rm -f \"${VM_PATH}/unattended.iso\"\n    case ${RELEASE} in\n        10|11)\n            unattended_windows \"${VM_PATH}\"\n            ;;\n    esac\n\n    if [ -n \"${FILE_NAME}\" ]; then\n        make_vm_config \"${FILE_NAME}\" \"virtio-win.iso\"\n    else\n        make_vm_config \"windows-${RELEASE}.iso\" \"virtio-win.iso\"\n    fi\n}\n\nfunction open_homepage() {\n    local URL=\"\"\n    local XDG_OPEN=\"\"\n    if [ -z \"$(os_info \"${1}\")\" ]; then\n        error_specify_os\n    else\n        URL=\"$(os_info \"${1}\" | cut -d'|' -f 3)\"\n        # shellcheck disable=SC2034\n        XDG_OPEN=$(xdg-open \"${URL}\" || sensible-browser \"${URL}\" || x-www-browser \"${URL}\" || gnome-open \"${URL}\")\n        exit 0\n    fi\n}\n\nfunction create_vm() {\n    # shellcheck disable=SC2206\n    local URL_HASH=(${1// / })\n    local URL=\"${URL_HASH[0]}\"\n    local HASH=\"${URL_HASH[1]}\"\n    local ISO=\"${URL##*/}\"\n    #echo \"${URL}\"\n    #echo \"${ISO}\"\n    #echo \"${HASH}\"\n    web_get \"${URL}\" \"${VM_PATH}\"\n    if [ -n \"${HASH}\" ]; then\n        check_hash \"${ISO}\" \"${HASH}\"\n    fi\n\n    case \"${OS}\" in\n        batocera)\n            if [[ ${ISO} = *\".gz\"* ]]; then\n                gzip -d \"${VM_PATH}/${ISO}\"\n                ISO=\"${ISO/.gz/}\"\n            fi;;\n        dragonflybsd)\n            #  Could be other OS iso files compressed with bzip2 or gzip\n            #  but for now we'll keep this to know cases\n            if [[ ${ISO} = *\".bz2\"* ]]; then\n                bzip2 -d  \"${VM_PATH}/${ISO}\"\n                ISO=\"${ISO/.bz2/}\"\n            fi;;\n        easyos)\n            if [[ ${ISO} = *\".img\"* ]]; then\n                ${QEMU_IMG} convert -f raw -O qcow2 \"${VM_PATH}/${ISO}\" \"${VM_PATH}/disk.qcow2\"\n                ISO=\"${ISO/.img/}\"\n            fi;;\n        freedos)\n            if [[ ${ISO} = *\".zip\"* ]]; then\n                unzip -qo \"${VM_PATH}/${ISO}\" -d \"${VM_PATH}\"\n                rm -f \"${VM_PATH}/${ISO}\"\n                ISO=\"$(ls -1 \"${VM_PATH}/\"*.iso)\"\n                ISO=\"$(basename \"${ISO}\")\"\n            fi;;\n        kolibrios)\n            if [[ ${ISO} = *\".7z\" ]]; then\n                if [ -z \"$(command -v 7z)\" ]; then echo \"ERROR! '7zip' needs installing. Unable to extract file.\"\n                else\n                    7z e \"${VM_PATH}/${ISO}\" -o\"${VM_PATH}\" >/dev/null 2>&1\n                    rm -f \"${VM_PATH}/${ISO}\"\n                    ISO=\"$(ls -1 \"${VM_PATH}/\"*.iso)\"\n                    ISO=\"$(basename \"${ISO}\")\"\n                fi\n            fi;;\n        reactos)\n            if [[ ${ISO} = *\".zip\"* ]]; then\n                unzip -qo \"${VM_PATH}/${ISO}\" -d \"${VM_PATH}\"\n                rm -f \"${VM_PATH}/${ISO}\"\n                ISO=\"$(ls -1 \"${VM_PATH}/\"*.iso)\"\n                ISO=\"$(basename \"${ISO}\")\"\n            fi;;\n    esac\n    make_vm_config \"${ISO}\"\n}\n\nfunction create_config() {\n    local VM_PATH=\"${1}\"\n    local INPUT=\"${2}\"\n    local FIXED_ISO=\"\"\n\n    OS=\"custom\"\n    if ! mkdir \"${VM_PATH}\" 2>/dev/null; then\n        echo \"ERROR! Could not create directory: ${VM_PATH}. Please verify that it does not already exist\"\n        exit 1\n    fi\n    if [[ \"${INPUT}\" == \"http://\"* ]] || [[ \"${INPUT}\" == \"https://\"* ]]; then\n        INPUT=\"$(web_redirect \"${INPUT}\")\"\n        if [[ \"${INPUT}\" == *\".iso\" ]] || [[ \"${INPUT}\" == *\".img\" ]]; then\n            web_get \"${INPUT}\" \"${VM_PATH}\"\n            INPUT=\"${INPUT##*/}\"\n        else\n            echo \"ERROR! Only ISO,IMG and QCOW2 file types are supported for --create-config\"\n            exit 1\n        fi\n    fi\n\n    if [ ! -f \"${INPUT}\" ]; then\n        echo \"ERROR! The input must be a valid URL or path to an ISO, IMG, or QCOW2 file.\"\n        exit 1\n    elif [[ \"${INPUT}\" == *\".iso\" ]]; then\n        echo \"Moving image to VM dir\" && mv \"${INPUT}\" \"${VM_PATH}\"\n        CUSTOM_IMAGE_TYPE=\"iso\"\n    elif [[ \"${INPUT}\" == *\".img\" ]]; then\n        echo \"Moving image to VM dir\" && mv \"${INPUT}\" \"${VM_PATH}\"\n        CUSTOM_IMAGE_TYPE=\"img\"\n    elif [[ \"${INPUT}\" == *\".qcow2\" ]]; then\n        echo \"Moving image to VM dir\" && mv \"${INPUT}\" \"${VM_PATH}/disk.qcow2\"\n        CUSTOM_IMAGE_TYPE=\"qcow2\"\n    else\n        echo \"ERROR! Only ISO,IMG and QCOW2 file types are supported for --create-config\"\n        exit 1\n    fi\n    INPUT=\"$(basename \"${INPUT}\")\"\n\n    echo \"Creating custom VM config for ${INPUT##*/}.\"\n    case \"${INPUT,,}\" in\n        *freebsd*) CUSTOM_OS=\"freebsd\";;\n        *kolibrios*) CUSTOM_OS=\"kolibrios\";;\n        *reactos*) CUSTOM_OS=\"reactos\";;\n        *windows-server*|*eval_oemret_x*|*eval_x*) CUSTOM_OS=\"windows-server\";;\n        *windows*|win*)\n            CUSTOM_OS=\"windows\"\n            # Older windows 10 ISOs use the year followed by the month rather than the year & half). Match any text for language.\n            if [ \"${3}\" != \"--disable-unattended\" ] && ( [ \"${3}\" == \"--unattended\" ] || grep -E -q 'Win(10|11)_([0-9]{2}H(1|2)|[0-9]{4})_[^.]*?(x64|x32)(v[0-9])?.iso' <<< \"${INPUT}\" ); then\n                echo \"Creating unattended Windows installation files. To disable, pass --disable-unattended\"\n                echo\n                echo \"Downloading VirtIO drivers...\"\n                web_get \"https://fedorapeople.org/groups/virt/virtio-win/direct-downloads/stable-virtio/virtio-win.iso\" \"${VM_PATH}\"\n                FIXED_ISO=\"virtio-win.iso\"\n                rm -f \"${VM_PATH}/unattended.iso\"\n                unattended_windows \"${VM_PATH}\"\n            fi\n            ;;\n\n        *) CUSTOM_OS=\"linux\";;\n    esac\n    echo -e \"Selecting OS: ${CUSTOM_OS}. If this is incorrect, please modify the config file to include the correct OS.\\n\"\n    make_vm_config \"${INPUT}\" \"${FIXED_ISO}\"\n}\n\n# Use command -v command to check if quickemu is in the system's PATH and\n# fallback to checking if quickemu is in the current directory.\nfunction resolve_quickemu() {\n    command -v quickemu || \\\n    if [ -x \"./quickemu\" ]; then\n        echo \"$(pwd)/quickemu\"\n    else\n        echo \"quickemu not found\" >&2\n        exit 1\n    fi\n}\n\nfunction help_message() {\n    #shellcheck disable=SC2016\n    printf '\n             _      _              _\n  __ _ _   _(_) ___| | ____ _  ___| |_\n / _` | | | | |/ __| |/ / _` |/ _ \\ __|\n| (_| | |_| | | (__|   < (_| |  __/ |_\n \\__, |\\__,_|_|\\___|_|\\_\\__, |\\___|\\__|\n    |_|                 |___/ v%s, using curl %s\n--------------------------------------------------------------------------------\n Project - https://github.com/quickemu-project/quickemu\n Discord - https://wimpysworld.io/discord\n--------------------------------------------------------------------------------\n\nUsage:\n  quickget <os> <release> [edition]\n  quickget ubuntu 22.04\n\nAdvanced usage:\n  quickget <arg> [path] <os> [release] [edition]\n  quickget --download ubuntu 22.04\n\nArguments:\n  --download      <os> <release> [edition] : Download image; no VM configuration\n  --create-config <os> [path/url] [flags]  : Create VM config for an OS image\n  --open-homepage <os>                     : Open homepage for the OS\n  --show          [os]                     : Show OS information\n  --version                                : Show version\n  --help                                   : Show this help message\n------------------------------------ Flags -------------------------------------\n--create-config:\n  --disable-unattended                     : Force quickget not to set up an unattended installation\n-------------------------- For testing & development ---------------------------\n  --url           [os] [release] [edition] : Show image URL(s)\n  --check         [os] [release] [edition] : Check image URL(s)\n  --list                                   : List all supported systems\n  --list-csv                               : List everything in csv format\n  --list-json                              : List everything in json format\n--------------------------------------------------------------------------------\n\nSupported Operating Systems:\\n\\n' \"$(${QUICKEMU} --version)\" \"${CURL_VERSION}\"\n    os_support | fmt -w 80\n}\n\ntrap cleanup EXIT\n\nif ((BASH_VERSINFO[0] < 4)); then\n    echo \"Sorry, you need bash 4.0 or newer to run this script.\"\n    exit 1\nfi\n\nQUICKEMU=$(resolve_quickemu)\nI18NS=()\nOPERATION=\"\"\nCURL=$(command -v curl)\nif [ ! -x \"${CURL}\" ]; then\n    echo \"ERROR! curl not found. Please install curl\"\n    exit 1\nfi\nCURL_VERSION=$(\"${CURL}\" --version | head -n 1 | cut -d' ' -f2)\n\nQEMU_IMG=$(command -v qemu-img)\nif [ ! -x \"${QEMU_IMG}\" ]; then\n    echo \"ERROR! qemu-img not found. Please make sure qemu-img is installed.\"\n    exit 1\nfi\n\n#TODO: Deprecate `list`, `list_csv`, and `list_json` in favor of `--list`, `--list-csv`, and `--list-json`\ncase \"${1}\" in\n    --download|-download)\n        OPERATION=\"download\"\n        shift\n        ;;\n    --create-config|-create-config)\n        OPERATION=\"config\"\n        shift\n        create_config \"${@}\"\n        ;;\n    --open-homepage|-open-homepage)\n        shift\n        open_homepage \"${1}\"\n        ;;\n    --show|-show)\n        shift\n        if [ -z \"${1}\" ]; then\n            for OS in $(os_support); do\n                show_os_info \"${OS}\"\n            done\n        else\n            show_os_info \"${1}\"\n        fi\n        exit 0;;\n    --version|-version)\n        WHERE=$(dirname \"${BASH_SOURCE[0]}\")\n        \"${WHERE}/quickemu\" --version\n        exit 0;;\n    --help|-help|--h|-h)\n        help_message\n        exit 0;;\n    --url|-url)\n        OPERATION=\"show\"\n        shift\n        if [ -z \"${1}\" ]; then\n            for OS in $(os_support); do\n                (test_all \"${OS}\")\n            done\n            exit 0\n        elif [ -z \"${2}\" ]; then\n            test_all \"${1}\"\n            exit 0\n        fi;;\n    --check|-check)\n        OPERATION=\"test\"\n        shift\n        if [ -z \"${1}\" ]; then\n            for OS in $(os_support); do\n                (test_all \"${OS}\")\n            done\n            exit 0\n        elif [ -z \"${2}\" ]; then\n            test_all \"${1}\"\n            exit 0\n        fi;;\n    --list-csv|-list-csv|list|list_csv) list_csv;;\n    --list-json|-list-json|list_json) list_json;;\n    --list|-list) list_supported;;\n    -*) error_not_supported_argument;;\nesac\n\nif [ -n \"${1}\" ]; then\n    OS=\"${1,,}\"\nelse\n    error_specify_os\nfi\n\nos_supported\n\nif [ -n \"${2}\" ]; then\n    RELEASE=\"${2}\"\n    VM_PATH=\"${OS}-${RELEASE}\"\n    # If the OS has an editions_() function, use it.\n    if [[ $(type -t \"editions_${OS}\") == function ]]; then\n        validate_release \"releases_${OS}\"\n        EDITIONS=(\"$(editions_\"${OS}\")\")\n        if [ -n \"${3}\" ]; then\n            EDITION=\"${3}\"\n            if [[ ! \"${EDITIONS[*]}\" = *\"${EDITION}\"* ]]; then\n                echo -e \"ERROR! ${EDITION} is not a supported $(pretty_name \"${OS}\") edition\\n\"\n                echo -n ' - Supported editions: '\n                for EDITION in \"${EDITIONS[@]}\"; do\n                    echo -n \"${EDITION} \"\n                done\n                echo \"\"\n                exit 1\n            fi\n        else\n            show_os_info \"${OS}\"\n            echo -e \" - Editions:\\t$(\"editions_${OS}\" | fmt -w 80)\"\n            echo -e \"\\nERROR! You must specify an edition.\"\n            exit 1\n        fi\n        handle_missing\n        VM_PATH=\"${OS}-${RELEASE}-${EDITION}\"\n        create_vm \"$(\"get_${OS}\" \"${EDITION}\")\"\n    elif [ \"${OS}\" == \"macos\" ]; then\n        # macOS doesn't use create_vm()\n        validate_release releases_macos\n        get_macos\n    elif [[ \"${OS}\" == *\"ubuntu-server\"* ]]; then\n        # (Comes before regular Ubuntu, or the code tries to download the desktop) #\n        # Ubuntu doesn't use create_vm()\n        validate_release releases_ubuntu-server\n        get_ubuntu-server\n    elif [[ \"${OS}\" == *\"ubuntu\"* ]]; then\n        # Ubuntu doesn't use create_vm()\n        validate_release releases_ubuntu\n        get_ubuntu\n    elif [[ \"${OS}\" == \"windows\"* ]]; then\n        I18N=\"English International\"\n        \"languages_${OS}\"\n        if [ -n \"${3}\" ]; then\n            I18N=\"${3}\"\n            if [[ ! \"${I18NS[*]}\" = *\"${I18N}\"* ]]; then\n                error_not_supported_lang\n            fi\n            VM_PATH=\"$(echo \"${OS}-${RELEASE}-${I18N// /-}\" | tr -d '()')\"\n        fi\n        validate_release \"releases_${OS}\"\n        get_windows\n    else\n        validate_release \"releases_${OS}\"\n        create_vm \"$(\"get_${OS}\")\"\n    fi\nelse\n    error_specify_release\nfi\n\n# vim:tabstop=4:shiftwidth=4:expandtab\n"
        },
        {
          "name": "quickreport",
          "type": "blob",
          "size": 3.5439453125,
          "content": "#!/usr/bin/env bash\n\nquick_report() {\n    local GPUS\n    local OS_KERNEL\n    local PRETTY_NAME\n    local QUICKEMU\n    local VERSION\n    OS_KERNEL=$(uname -s)\n\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        # Get macOS product name and version using swvers\n        if [ -x \"$(command -v sw_vers)\" ]; then\n            PRETTY_NAME=\"$(sw_vers -productName) $(sw_vers -productVersion)\"\n        else\n            PRETTY_NAME=\"macOS\"\n        fi\n    elif [ -e /etc/os-release ]; then\n        PRETTY_NAME=$(grep PRETTY_NAME /etc/os-release | cut -d'\"' -f2)\n    else\n        PRETTY_NAME=\"Unknown OS\"\n    fi\n\n    CWD=\"$(dirname \"${0}\")\"\n    if [ -x \"${CWD}/quickemu\" ]; then\n        QUICKEMU=\"${CWD}/quickemu\"\n    elif [ -x \"$(command -v quickemu)\" ]; then\n        QUICKEMU=\"$(command -v quickemu)\"\n    fi\n\n    if [ -n \"${QUICKEMU}\" ]; then\n        VERSION=$(${QUICKEMU} --version)\n        echo \\\n\"----------------------------------\n        Quickemu ${VERSION}\n----------------------------------\"\n        echo -e \"Distro:\\t${PRETTY_NAME}\"\n        echo -e \"Kernel:\\t$(uname -s -r -m)\"\n\n        if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n            echo -e \"Memory:\\t$(($(sysctl -n hw.memsize) / (1048576*1024)))G\"\n        else\n            # Determine the number of gigabytes of RAM in the host by extracting the first numerical value from the output.\n            echo -e \"Memory:\\t$(free --giga -h | tr ' ' '\\n' | grep -m 1 \"[0-9]\" | cut -d'G' -f 1)G\"\n        fi\n\n        # Break IFS on new line\n        IFS=$'\\n'\n        if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n            # Get GPU information using system_profiler\n            GPUS=$(system_profiler SPDisplaysDataType | grep \"Chipset Model\" | awk -F: '{print $2}' | sed 's/^ *//')\n        else\n            GPUS=$(lspci | grep -i vga | cut -d':' -f3)\n        fi\n\n        if [ \"$(echo \"${GPUS}\" | wc -l)\" -eq 1 ]; then\n            echo \"GPU:\"\n        else\n            echo \"GPUs:\"\n        fi\n        for GPU in ${GPUS}; do\n            echo \" -${GPU}\"\n        done\n    else\n        echo \\\n\"----------------------------------\n        Quickemu missing!\n----------------------------------\"\n        exit 1\n    fi\n\n    if command -v curl &> /dev/null; then\n        VERSION=$(curl --version)\n        echo \\\n\"----------------------------------\n            curl $(echo \"${VERSION}\" | head -n 1 | cut -d' ' -f2)\n----------------------------------\"\n        echo -e \"Libraries:$(echo \"${VERSION}\" | head -n 1 | cut -d')' -f2-)\"\n        echo -e \"Protocols:$(echo \"${VERSION}\" | tail -n +3 | head -n 1 | cut -d':' -f2-)\"\n        echo -e \"Features: $(echo \"${VERSION}\" | tail -n +4 | head -n 1 | cut -d':' -f2-)\"\n    else\n        echo \\\n\"----------------------------------\n            curl missing\n----------------------------------\"\n    fi\n\n    local HOST_ARCH\n    HOST_ARCH=$(uname -m)\n    local QEMU_ARCH=\"${HOST_ARCH}\"\n    if [ \"${HOST_ARCH}\" == \"arm64\" ]; then\n        QEMU_ARCH=\"aarch64\"\n    fi\n\n    if command -v \"qemu-system-${QEMU_ARCH}\" &> /dev/null; then\n        VERSION=$(\"qemu-system-${QEMU_ARCH}\" --version | head -n 1 | cut -d' ' -f4)\n        echo \\\n\"----------------------------------\n            QEMU ${VERSION}\n----------------------------------\"\n        \"qemu-system-${QEMU_ARCH}\" -cpu help\n    else\n        echo \\\n\"----------------------------------\n            QEMU missing\n----------------------------------\"\n    fi\n\n    echo \\\n\"----------------------------------\n               CPU\n----------------------------------\"\n    if [ \"${OS_KERNEL}\" == \"Darwin\" ]; then\n        sysctl -n machdep.cpu.brand_string\n    else\n        lscpu\n    fi\n}\n\nclear\nquick_report | tee quickreport.txt\n"
        }
      ]
    }
  ]
}