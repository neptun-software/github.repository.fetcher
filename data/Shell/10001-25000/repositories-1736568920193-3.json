{
  "metadata": {
    "timestamp": 1736568920193,
    "page": 3,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "gpakosz/.tmux",
      "stars": 22362,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.076171875,
          "content": "* text=auto\n\n# git\n.gitignore text\n\n.tmux.conf eol=lf\n.tmux.conf.local eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": "plugins/**\n"
        },
        {
          "name": ".logo",
          "type": "tree",
          "content": null
        },
        {
          "name": ".tmux.conf",
          "type": "blob",
          "size": 97.373046875,
          "content": "# : << 'EOF'\n# Oh my tmux!\n# 💛🩷💙🖤❤️🤍\n# https://github.com/gpakosz/.tmux\n# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,\n#         without any warranty.\n#         Copyright 2012— Gregory Pakosz (@gpakosz).\n#\n# ------------------------------------------------------------------------------\n# /!\\ DO NOT EDIT THIS FILE\n#     instead, override your .local customization file copy, see README.md   /!\\\n# ------------------------------------------------------------------------------\n\n\n# -- general -------------------------------------------------------------------\n\nset -g default-terminal \"screen-256color\"\n\n%if #{>=:#{version},3.2}\nset -g extended-keys on                   # needed by Control + Shift bindings\n%endif\nset -s escape-time 10                     # faster command sequences\nset -sg repeat-time 600                   # increase repeat timeout\nset -s focus-events on\n\nset -g prefix2 C-a                        # GNU-Screen compatible prefix\nbind C-a send-prefix -2\n\nset -q -g status-utf8 on                  # expect UTF-8 (tmux < 2.2)\nsetw -q -g utf8 on\n\nset -g history-limit 5000                 # boost history\n\n# edit configuration\n%if #{>=:#{version},3.0}\nbind e new-window -n \"#{TMUX_CONF_LOCAL}\" -e EDITOR=\"$EDITOR\" sh -c 'case \"${EDITOR:-vim}\" in *vim*) ${EDITOR:-vim} -c \":set syntax=tmux\" \"$TMUX_CONF_LOCAL\";; *) $EDITOR \"$TMUX_CONF_LOCAL\";; esac && \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} source \"$TMUX_CONF\" \\; display \"$TMUX_CONF_LOCAL sourced\"'\n%else\nset-environment -g EDITOR \"$EDITOR\"\nbind e new-window -n \"#{TMUX_CONF_LOCAL}\" sh -c 'case \"${EDITOR:-vim}\" in *vim*) ${EDITOR:-vim} -c \":set syntax=tmux\" \"$TMUX_CONF_LOCAL\";; *) $EDITOR \"$TMUX_CONF_LOCAL\";; esac && \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} source \"$TMUX_CONF\" \\; display \"$TMUX_CONF_LOCAL sourced\"'\n%endif\n\n# reload configuration\nbind r run \"sh -c '\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} source \\\"\\$TMUX_CONF\\\"'\" \\; display \"#{TMUX_CONF} sourced\"\n\n\n# -- display -------------------------------------------------------------------\n\nset -g base-index 1           # start windows numbering at 1\nsetw -g pane-base-index 1     # make pane numbering consistent with windows\n\nsetw -g automatic-rename on   # rename window to reflect current program\nset -g renumber-windows on    # renumber windows when a window is closed\n\nset -g set-titles on          # set terminal title\n\nset -g display-panes-time 800 # slightly longer pane indicators display time\nset -g display-time 1000      # slightly longer status messages display time\n\nset -g status-interval 10     # redraw status line every 10 seconds\n\n# clear both screen and history\nbind -n C-l send-keys C-l \\; run 'sleep 0.2' \\; clear-history\n\n# activity\nset -g monitor-activity on\nset -g visual-activity off\n\n\n# -- navigation ----------------------------------------------------------------\n\n# create session\nbind C-c new-session\n\n# find session\nbind C-f command-prompt -p find-session 'switch-client -t %%'\n\n# session navigation\nbind BTab switch-client -l  # move to last session\n\n# split current window horizontally\nbind - split-window -v\n# split current window vertically\nbind _ split-window -h\n\n# pane navigation\nbind -r h select-pane -L  # move left\nbind -r j select-pane -D  # move down\nbind -r k select-pane -U  # move up\nbind -r l select-pane -R  # move right\nbind > swap-pane -D       # swap current pane with the next one\nbind < swap-pane -U       # swap current pane with the previous one\n\n# maximize current pane\nbind + run \"cut -c3- '#{TMUX_CONF}' | sh -s _maximize_pane '#{session_name}' '#D'\"\n\n# pane resizing\nbind -r H resize-pane -L 2\nbind -r J resize-pane -D 2\nbind -r K resize-pane -U 2\nbind -r L resize-pane -R 2\n\n# window navigation\nunbind n\nunbind p\nbind -r C-h previous-window                             # select previous window\nbind -r C-l next-window                                 # select next window\nbind -r C-S-H swap-window -t -1 \\; select-window -t -1  # swap current window with the previous one\nbind -r C-S-L swap-window -t +1 \\; select-window -t +1  # swap current window with the next one\nbind Tab last-window                                    # move to last active window\n\n# toggle mouse\nbind m run \"cut -c3- '#{TMUX_CONF}' | sh -s _toggle_mouse\"\n\n\n# -- facebook pathpicker -------------------------------------------------------\n\nbind F run \"cut -c3- '#{TMUX_CONF}' | sh -s _fpp '#{pane_id}' '#{pane_current_path}'\"\n\n\n# -- copy mode -----------------------------------------------------------------\n\nbind Enter copy-mode # enter copy mode\n\nbind -T copy-mode-vi v send -X begin-selection\nbind -T copy-mode-vi C-v send -X rectangle-toggle\nbind -T copy-mode-vi y send -X copy-selection-and-cancel\nbind -T copy-mode-vi Escape send -X cancel\nbind -T copy-mode-vi H send -X start-of-line\nbind -T copy-mode-vi L send -X end-of-line\n\n# copy to X11 clipboard\nif -b 'command -v xsel > /dev/null 2>&1' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - | xsel -i -b\"'\nif -b '! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - | xclip -i -selection clipboard >/dev/null 2>&1\"'\n# copy to Wayland clipboard\nif -b '[ \"$XDG_SESSION_TYPE\" = \"wayland\" ] && command -v wl-copy > /dev/null 2>&1' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - | wl-copy\"'\n# copy to macOS clipboard\nif -b 'command -v pbcopy > /dev/null 2>&1' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - | pbcopy\"'\n# copy to Windows clipboard\nif -b 'command -v clip.exe > /dev/null 2>&1' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - | clip.exe\"'\nif -b '[ -c /dev/clipboard ]' 'bind y run -b \"\\\"\\$TMUX_PROGRAM\\\" \\${TMUX_SOCKET:+-S \\\"\\$TMUX_SOCKET\\\"} save-buffer - > /dev/clipboard\"'\n\n\n# -- buffers -------------------------------------------------------------------\n\nbind b list-buffers     # list paste buffers\nbind p paste-buffer -p  # paste from the top paste buffer\nbind P choose-buffer    # choose which buffer to paste from\n\n\n# -- 8< ------------------------------------------------------------------------\n\n%if #{==:#{TMUX_PROGRAM},}\n  run \"exec sh -c 'TMUX_PROGRAM=\\\"\\$(LSOF=\\$(PATH=\\\"\\$PATH:/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin\\\" command -v lsof); \\$LSOF -b -w -a -d txt -p #{pid} -Fn 2>/dev/null | perl -n -e \\\"if (s/^n((?:.(?!dylib\\$|so\\$))+)\\$/\\\\1/g && s/(?:\\s+\\\\([^\\\\s]+?\\\\))?\\$//g) { print; exit } } exit 1; {\\\" 2>/dev/null || readlink \\\"/proc/#{pid}/exe\\\" 2>/dev/null)\\\"; [ \\\"\\$(\\\"\\$TMUX_PROGRAM\\\" display -p \\\"#{l:#{pid}}\\\" 2>/dev/null)\\\" = \\\"#{pid}\\\" ] || TMUX_PROGRAM=\\\"\\$(command -v tmux || printf tmux)\\\"; \\\"\\$TMUX_PROGRAM\\\" -S #{socket_path} set-environment -g TMUX_PROGRAM \\\"\\$TMUX_PROGRAM\\\"'\"\n%endif\n%if #{==:#{TMUX_SOCKET},}\n  run \"exec sh -c '\\\"\\$TMUX_PROGRAM\\\" -S #{socket_path} set-environment -g TMUX_SOCKET \\\"#{socket_path}\\\"'\"\n%endif\n%if #{==:#{TMUX_CONF},}\n  run \"exec sh -c '\\\"\\$TMUX_PROGRAM\\\" set-environment -g TMUX_CONF \\$(for conf in \\\"\\$HOME/.tmux.conf\\\" \\\"\\$XDG_CONFIG_HOME/tmux/tmux.conf\\\" \\\"\\$HOME/.config/tmux/tmux.conf\\\"; do [ -f \\\"\\$conf\\\" ] && printf \\\"%s\\\" \\\"\\$conf\\\" && break; done)'\"\n%endif\n%if #{==:#{TMUX_CONF_LOCAL},}\n  run \"exec sh -c '\\\"\\$TMUX_PROGRAM\\\" set-environment -g TMUX_CONF_LOCAL \\\"\\$TMUX_CONF.local\\\"'\"\n%endif\n\nrun '\"$TMUX_PROGRAM\" -S #{socket_path} source \"$TMUX_CONF_LOCAL\"'\nrun 'cut -c3- \"$TMUX_CONF\" | sh -s _apply_configuration'\n\n# EOF\n#\n# # exit the script if any statement returns a non-true return value\n# set -e\n#\n# unset SHELL\n#\n# unset GREP_OPTIONS\n# export LC_NUMERIC=C\n# # shellcheck disable=SC3041\n# if (set +H 2>/dev/null); then\n#   set +H\n# fi\n#\n# if ! printf '' | sed -E 's///' 2>/dev/null; then\n#   if printf '' | sed -r 's///' 2>/dev/null; then\n#     sed() {\n#       n=$#; while [ \"$n\" -gt 0 ]; do arg=$1; shift; case $arg in -E*) arg=-r${arg#-E};; esac; set -- \"$@\" \"$arg\"; n=$(( n - 1 )); done\n#       command sed \"$@\"\n#     }\n#   fi\n# fi\n#\n# _uname_s=$(uname -s)\n#\n# [ -z \"$TMUX\" ] && exit 255\n# if [ -z \"$TMUX_SOCKET\" ]; then\n#   TMUX_SOCKET=$(printf '%s' \"$TMUX\" | cut -d, -f1)\n# fi\n# if [ -z \"$TMUX_PROGRAM\" ]; then\n#   TMUX_PID=$(printf '%s' \"$TMUX\" | cut -d, -f2)\n#   TMUX_PROGRAM=$(lsof -b -w -a -d txt -p \"$TMUX_PID\" -Fn 2>/dev/null | perl -n -e \"if (s/^n((?:.(?!dylib$|so$))+)$/\\1/g) { print; exit } } exit 1; {\" 2>/dev/null || readlink \"/proc/$TMUX_PID/exe\" 2>/dev/null)\n#   [ \"$(\"$TMUX_PROGRAM\" -S \"$TMUX_SOCKET\" display -p '#{pid}' 2>/dev/null)\" = \"$TMUX_PID\" ] || TMUX_PROGRAM=$(command -v tmux || printf tmux)\n# fi\n# if [ \"$TMUX_PROGRAM\" = \"tmux\" ]; then\n#   tmux() {\n#     command tmux ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} \"$@\"\n#   }\n# else\n#   tmux() {\n#     \"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} \"$@\"\n#   }\n# fi\n#\n# _tmux_version=$(tmux -V | perl -n -e '($l, $r) = $_ =~ /^[^0-9]+([0-9.]+)([a-z])?(-rc.*)?$/; print $l * 1000 + ($r eq \"\" ? 0 : ord($r) - 96)')\n#\n# _is_true() {\n#   case \"$1\" in\n#     true|yes|1)\n#       return 0\n#       ;;\n#     *)\n#       return 1\n#       ;;\n#   esac\n# }\n#\n# _is_enabled() {\n#   [ \"$1\" = \"enabled\" ]\n# }\n#\n# _is_disabled() {\n#   [ \"$1\" = \"disabled\" ]\n# }\n#\n# _circled() {\n#   circled_digits='⓪ ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ ⑪ ⑫ ⑬ ⑭ ⑮ ⑯ ⑰ ⑱ ⑲ ⑳'\n#   if [ \"$1\" -le 20 ] 2>/dev/null; then\n#     i=$(( $1 + 1 ))\n#     eval set -- \"$circled_digits\"\n#     eval echo \"\\${$i}\"\n#   else\n#     echo \"$1\"\n#   fi\n# }\n#\n# _decode_unicode_escapes() {\n#   printf '%s' \"$*\" | perl -CS -pe 's/(\\\\u([0-9A-Fa-f]{1,4})|\\\\U([0-9A-Fa-f]{1,8}))/chr(hex($2.$3))/eg' 2>/dev/null\n# }\n#\n# _pretty_path() {\n#   max_length=${1:-auto}; shift\n#   if [ \"$max_length\" = \"auto\" ]; then\n#     max_length=$(($(tmux -q display -p '#{client_width}') / 4))\n#   fi\n#   { cd \"$*\" && pwd || printf '%s' \"$*\";  } | perl -s -p -E 's|^$HOME|~|; /^.{0,$max_length}$/ || s|(~?\\/[^/]+)(/[^/]+)(?:/.+)(/[^/]+)$|$1$2/...$3|g' -- -HOME=\"$HOME\" -max_length=\"$max_length\"\n# }\n#\n# if command -v pkill > /dev/null 2>&1; then\n#   _pkillf() {\n#     pkill -f \"$@\" || true\n#   }\n# else\n#   case \"$_uname_s\" in\n#     *CYGWIN*)\n#       _pkillf() {\n#         while IFS= read -r pid; do\n#           kill \"$pid\" || true\n#         done  << EOF\n# $(grep -Eao \"$@\" /proc/*/cmdline | xargs -0 | sed -E -n 's,/proc/([0-9]+)/.+$,\\1,pg')\n# EOF\n#       }\n#       ;;\n#     *)\n#       # shellcheck disable=SC2009\n#       _pkillf() {\n#         while IFS= read -r pid; do\n#           kill \"$pid\" || true\n#         done  << EOF\n# $(ps -x -o pid= -o command= | grep -E \"$@\" | cut -d' ' -f1)\n# EOF\n#       }\n#       ;;\n#   esac\n# fi\n#\n# if perl -MTime::HiRes -e1; then\n#   _timestamp() {\n#     while IFS= read -r line; do\n#       printf '\\t%s\\n' \"$line\" | perl -MPOSIX=strftime -MTime::HiRes=gettimeofday -pe '($s, $us) = gettimeofday(); printf (\"[%s.%03d]\", strftime(\"%Y-%m-%d %H:%M:%S\", localtime $s), $us / 1000)'\n#     done\n#   }\n# else\n#   case \"$_uname_s\" in\n#     Darwin)\n#       _timestamp() {\n#         while IFS= read -r line; do\n#           printf '[%s]\\t%s\\n' \"$(date +\"%Y-%m-%d %H:%M:%S.000\")\" \"$line\"\n#         done\n#       }\n#       ;;\n#     *)\n#       _timestamp() {\n#         while IFS= read -r line; do\n#           printf '[%s]\\t%s\\n' \"$(date +\"%Y-%m-%d %H:%M:%S.%3N\")\" \"$line\"\n#         done\n#       }\n#       ;;\n#   esac\n# fi\n#\n# _bar() {\n#   bar_palette=$(printf '%s' \"$1\" | tr ';' ',')\n#   bar_symbol_empty=$2\n#   bar_symbol_full=$3\n#   bar_length=$4       # \"auto\" or number of columns\n#   bar_value=$5        # value between 0 and 1\n#\n#   if [ \"$bar_length\" = \"auto\" ]; then\n#     columns=${6:-$(tmux -q display -p '#{client_width}' 2> /dev/null || echo 80)}\n#     if [ \"$columns\" -ge 160 ]; then\n#       bar_length=12\n#     elif [ \"$columns\" -ge 130 ]; then\n#       bar_length=10\n#     elif [ \"$columns\" -ge 120 ]; then\n#       bar_length=8\n#     elif [ \"$columns\" -ge 100 ]; then\n#       bar_length=6\n#     else\n#       bar_length=4\n#     fi\n#   fi\n#\n#   if printf '%s' \"$bar_palette\" | grep -q -E '^(heat|gradient|gradient\\((\\s*[#a-zA-Z0-9]{7,9},?)+\\))(\\s*,\\s*[#a-zA-Z0-9]{7,9})?$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=', '; set -- $bar_palette; unset IFS; set +f; }\n#     palette_style=$1\n#     shift\n#\n#     case \"$palette_style\" in\n#       gradient)\n#         palette=\"colour196 colour202 colour208 colour214 colour220 colour226 colour190 colour154 colour118 colour82 colour46\"\n#         ;;\n#       heat)\n#         palette=\"colour243 colour245 colour247 colour144 colour143 colour142 colour184 colour214 colour208 colour202 colour196\"\n#         ;;\n#       gradient*)\n#         palette=${palette_style##gradient(}\n#         while [ $# -gt 0 ]; do\n#           palette=\"$palette${1+ }${1%%)}\"\n#           [ \"$1\" != \"${1%%)}\" ] && break\n#           shift\n#         done\n#         ;;\n#     esac\n#     bg=${2:-none}\n#\n#     palette=$(printf '%s' \"$palette\" | awk -v n=\"$bar_length\" '{ for (i = 0; i < n - 1; ++i) printf \"%s \", $(1 + i * NF / n); printf $NF }')\n#     # shellcheck disable=SC2086\n#     set -- $palette\n#\n#     full=$(awk \"BEGIN { printf \\\"%.0f\\\", ($bar_value) * $bar_length }\")\n#     bar=\"#[bg=$bg]\"\n#     if [ \"$full\" -gt 0 ]; then\n#       # shellcheck disable=SC2046\n#       bar=\"$bar$(printf \"#[fg=%s]$bar_symbol_full\" $(printf '%s' \"$palette\" | cut -d' ' -f1-\"$full\"))\"\n#     fi\n#     empty=$((bar_length - full))\n#     if [ \"$empty\" -gt 0 ]; then\n#       # shellcheck disable=SC2046\n#       bar=\"$bar$(printf \"#[fg=%s]$bar_symbol_empty\" $(printf '%s' \"$palette\" | cut -d' ' -f$((full + 1))-$((full + empty))))\"\n#     fi\n#     eval bar=\"$bar#[fg=\\${$((full == 0 ? 1 : full))}]\"\n#   elif printf '%s' \"$bar_palette\" | grep -q -E '^(([#a-zA-Z0-9]{7,9}|none),?){3}$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=,; set -- $bar_palette; unset IFS; set +f; }\n#     full_fg=$1\n#     empty_fg=$2\n#     bg=${3:-none}\n#\n#     full=$(awk \"BEGIN { printf \\\"%.0f\\\", ($bar_value) * $bar_length }\")\n#     bar=\"#[bg=$bg]\"\n#     if [ \"$full\" -gt 0 ]; then\n#       bar=\"$bar#[fg=$full_fg]$(printf \"%0.s$bar_symbol_full\" $(seq 1 \"$full\"))\"\n#     fi\n#     empty=$((bar_length - full))\n#     if [ \"$empty\" -gt 0 ]; then\n#       bar=\"$bar#[fg=$empty_fg]$(printf \"%0.s$bar_symbol_empty\" $(seq 1 \"$empty\"))#[fg=$empty_fg]\"\n#     fi\n#   fi\n#\n#   printf '%s' \"$bar\"\n# }\n#\n# _hbar() {\n#   hbar_palette=$(printf '%s' \"$1\" | tr ';' ',')\n#   hbar_value=$2\n#\n#   if printf '%s' \"$hbar_palette\" | grep -q -E '^(heat|gradient|gradient\\((\\s*[#a-zA-Z0-9]{7,9},?)+\\))(\\s*,\\s*[#a-zA-Z0-9]{7,9})?$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=', '; set -- $hbar_palette; unset IFS; set +f; }\n#     palette_style=$1\n#     shift\n#\n#     case \"$palette_style\" in\n#       gradient)\n#         palette=\"colour196 colour202 colour208 colour214 colour220 colour226 colour190 colour154 colour118 colour82 colour46\"\n#         ;;\n#       heat)\n#         palette=\"colour243 colour245 colour247 colour144 colour143 colour142 colour184 colour214 colour208 colour202 colour196\"\n#         ;;\n#       gradient*)\n#         palette=${palette_style##gradient(}\n#         while [ $# -gt 0 ]; do\n#           palette=\"$palette${1+ }${1%%)}\"\n#           [ \"$1\" != \"${1%%)}\" ] && break\n#           shift\n#         done\n#         ;;\n#     esac\n#     bg=${2:-none}\n#\n#     palette=$(printf '%s' \"$palette\" | awk -v n=8 '{ for (i = 0; i < n - 1; ++i) printf \"%s \", $(1 + i * NF / n); printf $NF }')\n#     # shellcheck disable=SC2086\n#     set -- $palette\n#\n#     full=$(awk \"BEGIN { printf \\\"%.0f\\\", ($hbar_value) * 8 }\")\n#     eval hbar_fg=\"\\${$((full == 0 ? 1 : full))}\"\n#   elif printf '%s' \"$hbar_palette\" | grep -q -E '^([#a-zA-Z0-9]{7,9},?){3}$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=,; set -- $hbar_palette; unset IFS; set +f; }\n#\n#     # shellcheck disable=SC2046\n#     eval $(awk \"BEGIN { printf \\\"hbar_fg=$%d\\\", (($hbar_value) - 0.001) * $# + 1 }\")\n#   fi\n#\n#   set -- ▏ ▎ ▍ ▌ ▋ ▊ ▉ █\n#   # shellcheck disable=SC2046\n#   eval $(awk \"BEGIN { printf \\\"hbar_symbol=$%d\\\", ($hbar_value) * ($# - 1) + 1 }\")\n#   hbar=\"#[bg=$bg]#[fg=${hbar_fg?}]${hbar_symbol?}\"\n#\n#   printf '%s' \"$hbar\"\n# }\n#\n# _vbar() {\n#   vbar_palette=$(printf '%s' \"$1\" | tr ';' ',')\n#   vbar_value=$2\n#\n#   if printf '%s' \"$vbar_palette\" | grep -q -E '^(heat|gradient|gradient\\((\\s*[#a-zA-Z0-9]{7,9},?)+\\))(\\s*,\\s*[#a-zA-Z0-9]{7,9})?$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=', '; set -- $vbar_palette; unset IFS; set +f; }\n#     palette_style=$1\n#     shift\n#\n#     case \"$palette_style\" in\n#       gradient)\n#         palette=\"colour196 colour202 colour208 colour214 colour220 colour226 colour190 colour154 colour118 colour82 colour46\"\n#         ;;\n#       heat)\n#         palette=\"colour243 colour245 colour247 colour144 colour143 colour142 colour184 colour214 colour208 colour202 colour196\"\n#         ;;\n#       gradient*)\n#         palette=${palette_style##gradient(}\n#         while [ $# -gt 0 ]; do\n#           palette=\"$palette${1+ }${1%%)}\"\n#           [ \"$1\" != \"${1%%)}\" ] && break\n#           shift\n#         done\n#         ;;\n#     esac\n#     bg=${2:-none}\n#\n#     palette=$(printf '%s' \"$palette\" | awk -v n=8 '{ for (i = 0; i < n - 1; ++i) printf \"%s \", $(1 + i * NF / n); printf $NF }')\n#     # shellcheck disable=SC2086\n#     set -- $palette\n#\n#     full=$(awk \"BEGIN { printf \\\"%.0f\\\", ($vbar_value) * 8 }\")\n#     eval vbar_fg=\"\\${$((full == 0 ? 1 : full))}\"\n#   elif printf '%s' \"$vbar_palette\" | grep -q -E '^([#a-zA-Z0-9]{7,9},?){3}$'; then\n#     # shellcheck disable=SC2086\n#     { set -f; IFS=,; set -- $vbar_palette; unset IFS; set +f; }\n#\n#     # shellcheck disable=SC2046\n#     eval $(awk \"BEGIN { printf \\\"vbar_fg=$%d\\\", (($vbar_value) - 0.001) * $# + 1 }\")\n#   fi\n#\n#   set -- ▁ ▂ ▃ ▄ ▅ ▆ ▇ █\n#   # shellcheck disable=SC2046\n#   eval $(awk \"BEGIN { printf \\\"vbar_symbol=$%d\\\", ($vbar_value) * ($# - 1) + 1 }\")\n#   vbar=\"#[bg=$bg]#[fg=${vbar_fg?}]${vbar_symbol?}\"\n#\n#   printf '%s' \"$vbar\"\n# }\n#\n# _maximize_pane() {\n#   current_session=${1:-$(tmux display -p '#{session_name}')}\n#   current_pane=${2:-$(tmux display -p '#{pane_id}')}\n#\n#   dead_panes=$(tmux list-panes -s -t \"$current_session\" -F '#{pane_dead} #{pane_id} #{pane_start_command}' | grep -E -o '^1 %.+maximized.+$' || true)\n#   restore=$(printf \"%s\" \"$dead_panes\" | sed -n -E -e \"s/^1 $current_pane .+maximized.+'(%[0-9]+)'\\\"?$/tmux swap-pane -s \\1 -t $current_pane \\; kill-pane -t $current_pane/p\"\\\n#                                            -e \"s/^1 (%[0-9]+) .+maximized.+'$current_pane'\\\"?$/tmux swap-pane -s \\1 -t $current_pane \\; kill-pane -t \\1/p\")\n#\n#   if [ -z \"$restore\" ]; then\n#     [ \"$(tmux list-panes -t \"$current_session:\" | wc -l | sed 's/^ *//g')\" -eq 1 ] && tmux display \"Can't maximize with only one pane\" && return\n#     info=$(tmux new-window -t \"$current_session:\" -F \"#{session_name}:#{window_index}.#{pane_id}\" -P \"maximized... 2>/dev/null & \\\"$TMUX_PROGRAM\\\" ${TMUX_SOCKET:+-S \\\"$TMUX_SOCKET\\\"} setw -t \\\"$current_session:\\\" remain-on-exit on; printf \\\"\\\\033[\\$(tput lines);0fPane has been maximized, press <prefix>+ to restore\\n\\\" '$current_pane'\")\n#     session_window=${info%.*}\n#     new_pane=${info#*.}\n#\n#     retry=20\n#     while [ \"$(\"$TMUX_PROGRAM\" ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} list-panes -t \"$session_window\" -F '#{session_name}:#{window_index}.#{pane_id} #{pane_dead}' 2>/dev/null)\" != \"$info 1\" ] && [ \"$retry\" -ne 0 ]; do\n#       sleep 0.1\n#       retry=$((retry - 1))\n#     done\n#     if [ \"$retry\" -eq 0 ]; then\n#       tmux display 'Unable to maximize pane'\n#     fi\n#\n#     tmux setw -t \"$session_window\" remain-on-exit off \\; swap-pane -s \"$current_pane\" -t \"$new_pane\"\n#   else\n#     $restore || tmux kill-pane\n#   fi\n# }\n#\n# _toggle_mouse() {\n#   old=$(tmux show -gv mouse)\n#   new=\"\"\n#\n#   if [ \"$old\" = \"on\" ]; then\n#     new=\"off\"\n#   else\n#     new=\"on\"\n#   fi\n#\n#   tmux set -g mouse $new\n# }\n#\n# _battery_info() {\n#   battery_count=0\n#   battery_charge=0\n#   case \"$_uname_s\" in\n#     *Darwin*)\n#       while IFS= read -r line; do\n#         [ -z \"$line\" ] && continue\n#         percentage=$(printf '%s' \"$line\" | grep -E -o '[0-9]+%' || echo \"0%\")\n#         battery_charge=$(awk -v charge=\"$battery_charge\" -v percentage=\"${percentage%%%}\" 'BEGIN { print charge + percentage / 100 }')\n#         battery_count=$((battery_count + 1))\n#       done  << EOF\n# $(pmset -g batt | grep 'InternalBattery')\n# EOF\n#       ;;\n#     *Linux*)\n#       while IFS= read -r batpath; do\n#         [ -z \"$batpath\" ] && continue\n#         grep -i -q device \"$batpath/scope\" 2> /dev/null && continue\n#\n#         bat_capacity=\"$batpath/capacity\"\n#         if [ -r \"$bat_capacity\" ]; then\n#           battery_charge=$(awk -v charge=\"$battery_charge\" -v capacity=\"$(cat \"$bat_capacity\")\" 'BEGIN { print charge + (capacity > 100 ? 100 : capacity) / 100 }')\n#         else\n#           bat_energy_full=\"$batpath/energy_full\"\n#           bat_energy_now=\"$batpath/energy_now\"\n#           if [ -r \"$bat_energy_full\" ] && [ -r \"$bat_energy_now\" ]; then\n#             battery_charge=$(awk -v charge=\"$battery_charge\" -v energy_now=\"$(cat \"$bat_energy_now\")\" -v energy_full=\"$(cat \"$bat_energy_full\")\" 'BEGIN { print charge + energy_now / energy_full }')\n#           fi\n#         fi\n#         battery_count=$((battery_count + 1))\n#       done  << EOF\n# $(find /sys/class/power_supply -maxdepth 1 -iname '*bat*')\n# EOF\n#       ;;\n#     *CYGWIN*|*MSYS*|*MINGW*)\n#       while IFS= read -r line; do\n#         [ -z \"$line\" ] && continue\n#         battery_charge=$(printf '%s' \"$line\" | awk -v charge=\"$battery_charge\" '{ print charge + $2 / 100 }')\n#         battery_count=$((battery_count + 1))\n#       done  << EOF\n# $(wmic path Win32_Battery get BatteryStatus, EstimatedChargeRemaining 2> /dev/null | tr -d '\\r' | tail -n +2 || true)\n# EOF\n#       ;;\n#     *OpenBSD*)\n#       for batid in 0 1 2; do\n#         sysctl -n \"hw.sensors.acpibat$batid.raw0\" 2>&1 | grep -q 'not found' && continue\n#         if sysctl -n \"hw.sensors.acpibat$batid\" | grep -q amphour; then\n#           battery_charge=$(awk -v charge=\"$battery_charge\" -v remaining=\"$(sysctl -n hw.sensors.acpibat$batid.amphour3 | cut -d' ' -f1)\" -v full=\"$(sysctl -n hw.sensors.acpibat$batid.amphour0 | cut -d' ' -f1)\" 'BEGIN { print charge + remaining / full }')\n#         else\n#           battery_charge=$(awk -v charge=\"$battery_charge\" -v remaining=\"$(sysctl -n hw.sensors.acpibat$batid.watthour3 | cut -d' ' -f1)\" -v full=\"$(sysctl -n hw.sensors.acpibat$batid.watthour0 | cut -d' ' -f1)\" 'BEGIN { print charge + remaining / full }')\n#         fi\n#         battery_count=$((battery_count + 1))\n#       done\n#       ;;\n#     *FreeBSD*)\n#       battery_charge=$(awk -v charge=\"$(sysctl -n 'hw.acpi.battery.life')\" 'BEGIN { print charge / 100 }')\n#       battery_count=1\n#       ;;\n#   esac\n#   if [ \"$battery_count\" -ne 0 ]; then\n#     battery_charge=$(awk -v charge=\"$battery_charge\" -v count=\"$battery_count\" 'BEGIN { print charge / count }')\n#   fi\n#\n#   if [ \"$battery_charge\" = 0 ]; then\n#     tmux  set -ug '@battery_percentage' \\;\\\n#           set -ug '@battery_charge'\n#   else\n#     battery_percentage=\"$(awk \"BEGIN { printf \\\"%.0f%%\\\", ($battery_charge) * 100 }\")\"\n#\n#     tmux  set -g '@battery_percentage' \"$battery_percentage\" \\;\\\n#           set -g '@battery_charge' \"$battery_charge\"\n#   fi\n# }\n#\n# _battery_status() {\n#   battery_status_charging=$1\n#   battery_status_discharging=$2\n#\n#   case \"$_uname_s\" in\n#     *Darwin*)\n#       while IFS= read -r line; do\n#         [ -z \"$line\" ] && continue\n#         battery_discharging=$(printf '%s' \"$line\" | grep -qi \"discharging\" && echo \"true\" || echo \"false\")\n#       done  << EOF\n# $(pmset -g batt | grep 'InternalBattery')\n# EOF\n#       ;;\n#     *Linux*)\n#       while IFS= read -r batpath; do\n#         [ -z \"$batpath\" ] && continue\n#         grep -i -q device \"$batpath/scope\" 2> /dev/null && continue\n#\n#         battery_discharging=$(grep -qi \"discharging\" \"$batpath/status\" && echo \"true\" || echo \"false\")\n#       done  << EOF\n# $(find /sys/class/power_supply -maxdepth 1 -iname '*bat*')\n# EOF\n#       ;;\n#     *CYGWIN*|*MSYS*|*MINGW*)\n#       while IFS= read -r line; do\n#         [ -z \"$line\" ] && continue\n#         battery_discharging=$(printf '%s' \"$line\" | awk '{ s = ($1 == 1) ? \"true\" : \"false\"; print s }')\n#       done  << EOF\n# $(wmic path Win32_Battery get BatteryStatus, EstimatedChargeRemaining 2> /dev/null | tr -d '\\r' | tail -n +2 || true)\n# EOF\n#       ;;\n#     *OpenBSD*)\n#       for batid in 0 1 2; do\n#         battery_discharging=$(sysctl -n \"hw.sensors.acpibat$batid.raw0\" | grep -q 1 && echo \"true\" || echo \"false\")\n#       done\n#       ;;\n#     *FreeBSD*)\n#       battery_discharging=$(sysctl -n 'hw.acpi.battery.state' | grep -q 1 && echo \"true\" || echo \"false\")\n#       ;;\n#   esac\n#\n#   if [ -z \"$battery_discharging\" ]; then\n#     tmux set -ug '@battery_status'\n#     return\n#   fi\n#\n#   if [ \"$battery_discharging\" = \"true\" ]; then\n#     battery_status=\"$battery_status_discharging\"\n#   else\n#     battery_status=\"$battery_status_charging\"\n#   fi\n#\n#   tmux set -g '@battery_status' \"$battery_status\" >/dev/null 2>/dev/null\n# }\n#\n# _pane_info() {\n#   pane_pid=\"$1\"\n#   pane_tty=\"${2##/dev/}\"\n#   case \"$_uname_s\" in\n#     *CYGWIN*)\n#       ps -al | tail -n +2 | awk -v pane_pid=\"$pane_pid\" -v tty=\"$pane_tty\" -v ssh=\"$(command -v ssh)\" '\n#         ((/ssh/ && !/-W/ && !/tsh proxy ssh/ && !/sss_ssh_knownhostsproxy/) || !/ssh/) && !/tee/ && $5 == tty {\n#           user[$1] = $6; if (!child[$2]) child[$2] = $1\n#         }\n#         END {\n#           pid = pane_pid\n#           while (child[pid]) {\n#             if (match(command[pid], \"^\" ssh \" |^ssh \")) {\n#               break\n#             }\n#             pid = child[pid]\n#           }\n#\n#           file = \"/proc/\" pid \"/cmdline\"; getline command < file; close(file)\n#           gsub(/\\0/, \" \", command)\n#           \"id -un \" user[pid] | getline username\n#           print pid\":\"username\":\"command\n#         }\n#       '\n#       ;;\n#     *Linux*)\n#       ps -t \"$pane_tty\" --sort=lstart -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid=\"$pane_pid\" -v ssh=\"$(command -v ssh)\" '\n#         ((/ssh/ && !/-W/ && !/tsh proxy ssh/ && !/sss_ssh_knownhostsproxy/) || !/ssh/) && !/tee/ {\n#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = \"\"; command[pid] = substr($0,4)\n#         }\n#         END {\n#           pid = pane_pid\n#           while (child[pid]) {\n#             if (match(command[pid], \"^\" ssh \" |^ssh \")) {\n#               break\n#             }\n#             pid = child[pid]\n#           }\n#\n#           print pid\":\"user[pid]\":\"command[pid]\n#         }\n#       '\n#       ;;\n#     *)\n#       ps -t \"/dev/$pane_tty\" -o user=XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX -o pid= -o ppid= -o command= | awk -v pane_pid=\"$pane_pid\" -v ssh=\"$(command -v ssh)\" '\n#         ((/ssh/ && !/-W/ && !/tsh proxy ssh/ && !/sss_ssh_knownhostsproxy/) || !/ssh/) && !/tee/ {\n#           user[$2] = $1; if (!child[$3]) child[$3] = $2; pid=$2; $1 = $2 = $3 = \"\"; command[pid] = substr($0,4)\n#         }\n#         END {\n#           pid = pane_pid\n#           while (child[pid]) {\n#             if (match(command[pid], \"^\" ssh \" |^ssh \")) {\n#               break\n#             }\n#             pid = child[pid]\n#           }\n#\n#           print pid\":\"user[pid]\":\"command[pid]\n#         }\n#       '\n#       ;;\n#   esac\n# }\n#\n# _ssh_or_mosh_args() {\n#   case \"$1\" in\n#     *ssh*)\n#       args=$(printf '%s' \"$1\" | perl -n -e 'print if s/.*?\\bssh[\\w_-]*\\s*(.*)/\\1/')\n#       ;;\n#     *mosh-client*)\n#       args=$(printf '%s' \"$1\" | sed -E -e 's/.*mosh-client -# (.*)\\|.*$/\\1/' -e 's/-[^ ]*//g' -e 's/\\d:\\d//g')\n#       ;;\n#   esac\n#\n#  printf '%s' \"$args\"\n# }\n#\n# _username() {\n#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}\n#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}\n#   ssh_only=$3\n#\n#   pane_info=$(_pane_info \"$pane_pid\" \"$pane_tty\")\n#   command=${pane_info#*:}\n#   command=${command#*:}\n#\n#   ssh_or_mosh_args=$(_ssh_or_mosh_args \"$command\")\n#   if [ -n \"$ssh_or_mosh_args\" ]; then\n#     # shellcheck disable=SC2086\n#     username=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^user / { print $2; exit }')\n#     # shellcheck disable=SC2086\n#     [ -z \"$username\" ] && username=$(ssh $ssh_or_mosh_args -T -o ControlPath=none -o ProxyCommand=\"sh -c 'echo %%username%% %r >&2'\" 2>&1 | awk '/^%username% / { print $2; exit }')\n#     # shellcheck disable=SC2086\n#     [ -z \"$username\" ] && username=$(ssh $ssh_or_mosh_args -v -T -o ControlPath=none -o ProxyCommand=false -o IdentityFile='%%username%%/%r' 2>&1 | awk '/%username%/ { print substr($4,12); exit }')\n#   else\n#     if ! _is_true \"$ssh_only\"; then\n#       username=${pane_info#*:}\n#       username=${username%%:*}\n#     fi\n#   fi\n#\n#   printf '%s\\n' \"$username\"\n# }\n#\n# _hostname() {\n#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}\n#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}\n#   ssh_only=$3\n#   full=$4\n#   h_or_H=$5\n#\n#   pane_info=$(_pane_info \"$pane_pid\" \"$pane_tty\")\n#   command=${pane_info#*:}\n#   command=${command#*:}\n#\n#   ssh_or_mosh_args=$(_ssh_or_mosh_args \"$command\")\n#   if [ -n \"$ssh_or_mosh_args\" ]; then\n#     # shellcheck disable=SC2086\n#     hostname=$(ssh -G $ssh_or_mosh_args 2>/dev/null | awk '/^hostname / { print $2; exit }')\n#     # shellcheck disable=SC2086\n#     [ -z \"$hostname\" ] && hostname=$(ssh -T -o ControlPath=none -o ProxyCommand=\"sh -c 'echo %%hostname%% %h >&2'\" $ssh_or_mosh_args 2>&1 | awk '/^%hostname% / { print $2; exit }')\n#\n#     if ! _is_true \"$full\"; then\n#       case \"$hostname\" in\n#           *[a-z-].*)\n#               hostname=${hostname%%.*}\n#               ;;\n#           127.0.0.1)\n#               hostname=\"localhost\"\n#               ;;\n#       esac\n#     fi\n#   else\n#     if ! _is_true \"$ssh_only\"; then\n#       hostname=\"$h_or_H\"\n#     fi\n#   fi\n#\n#   printf '%s\\n' \"$hostname\"\n# }\n#\n# _root() {\n#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}\n#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}\n#   root=$3\n#\n#   username=$(_username \"$pane_pid\" \"$pane_tty\" false)\n#\n#   [ \"$username\" = \"root\" ] && echo \"$root\"\n# }\n#\n# _uptime() {\n#   case \"$_uname_s\" in\n#     *Darwin*|*FreeBSD*)\n#       boot=$(sysctl -n kern.boottime 2>/dev/null | awk -F'[ ,:]+' '{ print $4 }')\n#       now=$(date +%s)\n#       ;;\n#     *Linux*|*CYGWIN*|*MSYS*|*MINGW*)\n#       boot=0\n#       now=$(cut -d' ' -f1 < /proc/uptime)\n#       ;;\n#     *OpenBSD*)\n#       boot=$(sysctl -n kern.boottime)\n#       now=$(date +%s)\n#   esac\n#   # shellcheck disable=SC1004\n#   awk -v tmux=\"$TMUX_PROGRAM ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"}\" -v boot=\"$boot\" -v now=\"$now\" '\n#     BEGIN {\n#       uptime = now - boot\n#       y = int(uptime / 31536000)\n#       dy = int(uptime / 86400) % 365\n#       d = int(uptime / 86400)\n#       h = int(uptime / 3600) % 24\n#       m = int(uptime / 60) % 60\n#       s = int(uptime) % 60\n#\n#       system(tmux \" set -g @uptime_y \" y + 0    \" \\\\;\" \\\n#                   \" set -g @uptime_dy \" dy + 0  \" \\\\;\" \\\n#                   \" set -g @uptime_d \" d + 0    \" \\\\;\" \\\n#                   \" set -g @uptime_h \" h + 0    \" \\\\;\" \\\n#                   \" set -g @uptime_m \" m + 0    \" \\\\;\" \\\n#                   \" set -g @uptime_s \" s + 0)\n#     }'\n# }\n#\n# _loadavg() {\n#   case \"$_uname_s\" in\n#     *Darwin*|*FreeBSD*)\n#       tmux set -g @loadavg \"$(sysctl -n vm.loadavg 2>/dev/null | cut -d' ' -f2)\"\n#       ;;\n#     *Linux*|*CYGWIN*)\n#       tmux set -g @loadavg \"$(cut -d' ' -f1 < /proc/loadavg)\"\n#       ;;\n#     *OpenBSD*)\n#       tmux set -g @loadavg \"$(sysctl -n vm.loadavg 2>/dev/null | cut -d' ' -f1)\"\n#       ;;\n#   esac\n# }\n#\n# _new_window_ssh() {\n#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}\n#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}\n#   shift 2\n#\n#   pane_info=$(_pane_info \"$pane_pid\" \"$pane_tty\")\n#   command=${pane_info#*:}\n#   command=${command#*:}\n#\n#   case \"$command\" in\n#     *mosh-client*)\n#       # shellcheck disable=SC2046\n#        tmux new-window \"$@\" mosh $(echo \"$command\" | sed -E -e 's/.*mosh-client -# (.*)\\|.*$/\\1/')\n#      ;;\n#     *ssh*)\n#       # shellcheck disable=SC2046\n#       tmux new-window \"$@\" $(echo \"$command\" | sed -e 's/;/\\\\;/g')\n#       ;;\n#     *)\n#       tmux new-window \"$@\"\n#   esac\n# }\n#\n# _new_window() {\n#   _new_window_ssh \"$@\"\n# }\n#\n# _split_window_ssh() {\n#   pane_pid=${1:-$(tmux display -p '#{pane_pid}')}\n#   pane_tty=${2:-$(tmux display -p '#{b:pane_tty}')}\n#   shift 2\n#\n#   pane_info=$(_pane_info \"$pane_pid\" \"$pane_tty\")\n#   command=${pane_info#*:}\n#   command=${command#*:}\n#\n#   case \"$command\" in\n#     *mosh-client*)\n#       # shellcheck disable=SC2046\n#        tmux split-window \"$@\" mosh $(echo \"$command\" | sed -E -e 's/.*mosh-client -# (.*)\\|.*$/\\1/')\n#      ;;\n#     *ssh*)\n#       # shellcheck disable=SC2046\n#       tmux split-window \"$@\" $(echo \"$command\" | sed -e 's/;/\\\\;/g')\n#       ;;\n#     *)\n#       tmux split-window \"$@\"\n#   esac\n# }\n#\n# _split_window() {\n#   _split_window_ssh \"$@\"\n# }\n#\n# _apply_tmux_256color() {\n#   case \"$(tmux show -gv default-terminal)\" in\n#     tmux-256color|tmux-direct)\n#       return\n#       ;;\n#   esac\n#\n#   # when tmux-256color is available, use it\n#   # on macOS though, make sure to use /usr/bin/infocmp to probe if it's availalbe system wide\n#   case \"$_uname_s\" in\n#     *Darwin*)\n#       if /usr/bin/infocmp -x tmux-256color > /dev/null 2>&1; then\n#         tmux set -g default-terminal 'tmux-256color'\n#       fi\n#       ;;\n#      *)\n#       if command infocmp -x tmux-256color > /dev/null 2>&1; then\n#         tmux set -g default-terminal 'tmux-256color'\n#       fi\n#       ;;\n#   esac\n# }\n#\n# _apply_24b() {\n#   tmux_conf_theme_24b_colour=${tmux_conf_theme_24b_colour:-auto}\n#   tmux_conf_24b_colour=${tmux_conf_24b_colour:-$tmux_conf_theme_24b_colour}\n#   if [ \"$tmux_conf_24b_colour\" = \"auto\" ]; then\n#     case \"$COLORTERM\" in\n#       truecolor|24bit)\n#         apply_24b=true\n#         ;;\n#     esac\n#     if [ \"$apply_24b\" = \"\" ] && [ \"$(tput colors)\" = \"16777216\" ]; then\n#       apply_24b=true\n#     fi\n#   elif _is_true \"$tmux_conf_24b_colour\"; then\n#     apply_24b=true\n#   fi\n#   if [ \"$apply_24b\" = \"true\" ]; then\n#     case \"$TERM\" in\n#       screen-*|tmux-*)\n#         ;;\n#       *)\n#         tmux set-option -ga terminal-overrides \",*256col*:Tc\"\n#         ;;\n#     esac\n#   fi\n# }\n#\n# _apply_bindings() {\n#   cfg=$(mktemp) && trap 'rm -f $cfg*' EXIT\n#\n#   tmux_conf_preserve_stock_bindings=${tmux_conf_preserve_stock_bindings:-false}\n#   tmux list-keys | grep -vF 'TMUX_CONF_LOCAL' | grep -E 'new-window|split(-|_)window|new-session|copy-selection|copy-pipe' > \"$cfg\"\n#   if _is_true \"$tmux_conf_preserve_stock_bindings\"; then\n#     probe_socket=\"$(dirname \"$TMUX_SOCKET\")/tmux-stock-bindings-$$\"\n#     TMUX_SOCKET=\"$probe_socket\" tmux -f /dev/null list-keys >> \"$cfg\"\n#     rm -f \"$probe_socket\"\n#   fi\n#\n#   # tmux 3.0 doesn't include 02254d1e5c881be95fd2fc37b4c4209640b6b266 and the\n#   # output of list-keys can be truncated\n#   perl -p -i -e \"s/'#\\{\\?window_zoomed_flag,Unzoom,Zoom\\}' 'z' \\{resize-pane -$/'#{?window_zoomed_flag,Unzoom,Zoom}' 'z' {resize-pane -Z}\\\"/g\" \"$cfg\"\n#\n#   tmux_conf_new_window_retain_current_path=${tmux_conf_new_window_retain_current_path:-true}\n#   if ! _is_disabled \"$tmux_conf_new_window_retain_current_path\"; then\n#     perl -p -i -e \"\n#       s/\\brun-shell\\b\\s+(\\\"|')cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_new_window\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^\\n\\1]*?)(?:\\s+-c\\s+((?:\\\\\\\\{1,3}\\\")?|\\\"?|'?)#\\{pane_current_path\\}\\4)([^\\n\\1]*?)\\1/run-shell \\1cut -c3- \\2 | sh -s _new_window #\\{pane_pid\\} #\\{b:pane_tty\\}\\3\\5\\1/g\n#       ;\n#       s/\\brun-shell\\b\\s+(\\\"|')cut\\s+-c3-\\s+.+?\\s+\\|\\s+sh\\s+-s\\s+_new_window\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}(\\s+.+?)?\\1/new-window\\2/g\n#       ;\n#       s/\\bnew-window\\b([^;}\\n]*?)(?:\\s+-c\\s+((?:\\\\\\\\\\\")?|\\\"?|'?)#\\{pane_current_path\\}\\2)/new-window\\1/g\" \\\n#       \"$cfg\"\n#   fi\n#\n#   perl -p -i -e \"\n#     s,\\bnew-window\\b((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!\\bssh\\b)[^\\s]+))*)?(?:\\s+(\\bssh\\b))((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!\\bssh\\b)[^\\s]+))*)?,run-shell 'cut -c3- \\\"$TMUX_CONF\\\" | sh -s _new_window_ssh #\\{pane_pid\\} #\\{b:pane_tty\\}\\1',g if /\\bnew-window\\b((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!ssh)[^\\s]+))*)?(?:\\s+(ssh))((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!ssh)[^\\s]+))*)?/\"\\\n#   \"$cfg\"\n#\n#   tmux_conf_new_window_reconnect_ssh=${tmux_conf_new_window_reconnect_ssh:-false}\n#   if ! _is_disabled \"$tmux_conf_new_window_reconnect_ssh\" && _is_true \"$tmux_conf_new_window_reconnect_ssh\"; then\n#     perl -p -i -e \"s,\\bnew-window\\b([^;}\\n\\\"]*),run-shell 'cut -c3- \\\"$TMUX_CONF\\\" | sh -s _new_window #\\{pane_pid\\} #\\{b:pane_tty\\}\\1',g\" \"$cfg\"\n#   fi\n#\n#   tmux_conf_new_window_retain_current_path=${tmux_conf_new_window_retain_current_path:-false}\n#   if ! _is_disabled \"$tmux_conf_new_window_retain_current_path\" && _is_true \"$tmux_conf_new_window_retain_current_path\"; then\n#     perl -p -i -e \"\n#       s/\\bnew-window\\b(?!\\s+(?:-|}))/{$&}/g if /\\bdisplay-menu\\b/\n#       ;\n#       s/\\bnew-window\\b/new-window -c '#{pane_current_path}'/g\n#       ;\n#       s/\\brun-shell\\b\\s+'cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_new_window(_ssh)?\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^}\\n']*)'/run-shell 'cut -c3- \\1 | sh -s _new_window\\2 #\\{pane_pid\\} #\\{b:pane_tty\\} -c \\\\\\\\\\\"#\\{pane_current_path\\}\\\\\\\\\\\"\\3'/g if /\\bdisplay-menu\\b/\n#       ;\n#       s/\\brun-shell\\b\\s+'cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_new_window(_ssh)?\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^}\\n']*)'/run-shell 'cut -c3- \\1 | sh -s _new_window\\2 #\\{pane_pid\\} #\\{b:pane_tty\\} -c \\\"#\\{pane_current_path\\}\\\"\\3'/g\" \\\n#       \"$cfg\"\n#   fi\n#\n#   tmux_conf_new_pane_retain_current_path=${tmux_conf_new_pane_retain_current_path:-true}\n#   if ! _is_disabled \"$tmux_conf_new_pane_retain_current_path\"; then\n#     perl -p -i -e \"\n#       s/\\brun-shell\\b\\s+(\\\"|')cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_split_window\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^\\n\\1]*?)(?:\\s+-c\\s+((?:\\\\\\\\{1,3}\\\")?|\\\"?|'?)#\\{pane_current_path\\}\\4)([^\\n\\1]*?)\\1/run-shell \\1cut -c3- \\2 | sh -s _split_window #\\{pane_pid\\} #\\{b:pane_tty\\}\\3\\5\\1/g\n#       ;\n#       s/\\brun-shell\\b\\s+(\\\"|')cut\\s+-c3-\\s+.+?\\s+\\|\\s+sh\\s+-s\\s+_split_window\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}(\\s+.+?)?\\1/split-window\\2/g\n#       ;\n#       s/\\bsplit-window\\b([^;}\\n]*?)(?:\\s+-c\\s+((?:\\\\\\\\\\\")?|\\\"?|'?)#\\{pane_current_path\\}\\2)/split-window\\1/g\" \\\n#       \"$cfg\"\n#   fi\n#\n#   perl -p -i -e \"\n#     s,\\bsplit-window\\b((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!\\bssh\\b)[^\\s]+))*)?(?:\\s+(\\bssh\\b))((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!\\bssh\\b)[^\\s]+))*)?,run-shell 'cut -c3- \\\"$TMUX_CONF\\\" | sh -s _split_window_ssh #\\{pane_pid\\} #\\{b:pane_tty\\}\\1',g if /\\bsplit-window\\b((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!ssh)[^\\s]+))*)?(?:\\s+(ssh))((?:(?:[ \\t]+-[bdfhIvP])|(?:[ \\t]+-[celtF][ \\t]+(?!ssh)[^\\s]+))*)?/\"\\\n#   \"$cfg\"\n#\n#   tmux_conf_new_pane_reconnect_ssh=${tmux_conf_new_pane_reconnect_ssh:-false}\n#   if ! _is_disabled \"$tmux_conf_new_pane_reconnect_ssh\" && _is_true \"$tmux_conf_new_pane_reconnect_ssh\"; then\n#     perl -p -i -e \"s,\\bsplit-window\\b([^;}\\n\\\"]*),run-shell 'cut -c3- \\\"$TMUX_CONF\\\" | sh -s _split_window #\\{pane_pid\\} #\\{b:pane_tty\\}\\1',g\" \"$cfg\"\n#   fi\n#\n#   if ! _is_disabled \"$tmux_conf_new_pane_retain_current_path\" && _is_true \"$tmux_conf_new_pane_retain_current_path\"; then\n#     perl -p -i -e \"\n#       s/\\bsplit-window\\b(?!\\s+(?:-|}))/{$&}/g if /\\bdisplay-menu\\b/\n#       ;\n#       s/\\bsplit-window\\b/split-window -c '#{pane_current_path}'\\1/g\n#       ;\n#       s/\\brun-shell\\b\\s+'cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_split_window(_ssh)?\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^}\\n']*)'/run-shell 'cut -c3- \\1 | sh -s _split_window\\2 #\\{pane_pid\\} #\\{b:pane_tty\\} -c \\\\\\\\\\\"#\\{pane_current_path\\}\\\\\\\\\\\"\\3'/g if /\\bdisplay-menu\\b/\n#       ;\n#       s/\\brun-shell\\b\\s+'cut\\s+-c3-\\s+(.+?)\\s+\\|\\s+sh\\s+-s\\s+_split_window(_ssh)?\\s+#\\{pane_pid\\}\\s+#\\{b:pane_tty\\}([^}\\n']*)'/run-shell 'cut -c3- \\1 | sh -s _split_window\\2 #\\{pane_pid\\} #\\{b:pane_tty\\} -c \\\"#\\{pane_current_path\\}\\\"\\3'/g\" \\\n#       \"$cfg\"\n#   fi\n#\n#   tmux_conf_new_session_prompt=${tmux_conf_new_session_prompt:-false}\n#   if ! _is_disabled \"$tmux_conf_new_session_prompt\" && _is_true \"$tmux_conf_new_session_prompt\"; then\n#     perl -p -i -e \"\n#       s/(?<!command-prompt -p )\\b(new-session)\\b(?!\\s+(?:-|}))/{$&}/g if /\\bdisplay-menu\\b/\n#       ;\n#       s/(?<!\\bcommand-prompt -p )\\bnew-session\\b(?! -s)/command-prompt -p new-session \\\"new-session -s '%%'\\\"/g\" \\\n#       \"$cfg\"\n#   else\n#     perl -p -i -e \"s/\\bcommand-prompt\\s+-p\\s+new-session\\s+\\\"new-session\\s+-s\\s+'%%'\\\"/new-session/g\" \"$cfg\"\n#   fi\n#\n#   tmux_conf_new_session_retain_current_path=${tmux_conf_new_session_retain_current_path:-false}\n#   if ! _is_disabled \"$tmux_conf_new_session_retain_current_path\" && _is_true \"$tmux_conf_new_session_retain_current_path\"; then\n#     perl -p -i -e \"\n#       s/(?<!\\bcommand-prompt -p )\\bnew-session\\b/new-session -c '#{pane_current_path}'/g\" \\\n#       \"$cfg\"\n#   else\n#     perl -p -i -e \"\n#       s/\\bnew-session\\b([^;}\\n]*?)(?:\\s+-c\\s+((?:\\\\\\\\\\\")?|\\\"?|'?)#\\{pane_current_path\\}\\2)/new-session\\1/g\" \\\n#       \"$cfg\"\n#   fi\n#\n#   tmux_conf_copy_to_os_clipboard=${tmux_conf_copy_to_os_clipboard:-false}\n#   command -v xsel > /dev/null 2>&1 && command='xsel -i -b'\n#   ! command -v xsel > /dev/null 2>&1 && command -v xclip > /dev/null 2>&1 && command='xclip -i -selection clipboard > \\/dev\\/null 2>\\&1'\n#   [ \"$XDG_SESSION_TYPE\" = \"wayland\" ] && command -v wl-copy > /dev/null 2>&1 && command='wl-copy'\n#   command -v pbcopy > /dev/null 2>&1 && command='pbcopy'\n#   command -v clip.exe > /dev/null 2>&1 && command='clip\\.exe'\n#   [ -c /dev/clipboard ] && command='cat > \\/dev\\/clipboard'\n#\n#   if [ -n \"$command\" ]; then\n#     if ! _is_disabled \"$tmux_conf_copy_to_os_clipboard\" && _is_true \"$tmux_conf_copy_to_os_clipboard\"; then\n#       perl -p -i -e \"s/(?!.*?$command)\\bcopy-(?:selection|pipe)(-end-of-line|-and-cancel|-end-of-line-and-cancel|-no-clear)?\\b/copy-pipe\\1 '$command'/g\" \"$cfg\"\n#     else\n#       if [ \"$_tmux_version\" -ge 3200 ]; then\n#         perl -p -i -e \"s/\\bcopy-pipe(-end-of-line|-and-cancel|end-of-line-and-cancel|-no-clear)?\\b\\s+(\\\"|')?$command\\2?/copy-pipe\\1/g\" \"$cfg\"\n#       else\n#         perl -p -i -e \"s/\\bcopy-pipe(-end-of-line|-and-cancel|end-of-line-and-cancel|-no-clear)?\\b\\s+(\\\"|')?$command\\2?/copy-selection\\1/g\" \"$cfg\"\n#       fi\n#     fi\n#   fi\n#\n#   # until tmux >= 3.0, output of tmux list-keys can't be consumed back by tmux source-file without applying some escapings\n#   awk < \"$cfg\" \\\n#     '{i = $2 == \"-T\" ? 4 : 5; gsub(/^[;]$/, \"\\\\\\\\&\", $i); gsub(/^[$\"#~]$/, \"'\"'\"'&'\"'\"'\", $i); gsub(/^['\"'\"']$/, \"\\\"&\\\"\", $i); print}' > \"$cfg.in\"\n#\n#   # ignore bindings with errors\n#   if ! tmux source-file \"$cfg.in\"; then\n#     if tmux source-file -v /dev/null 2> /dev/null; then\n#       verbose_flag='-v'\n#     fi\n#     while ! out=$(tmux source-file \"${verbose_flag:+$verbose_flag}\" \"$cfg.in\"); do\n#       line=$(printf \"%s\" \"$out\" | tail -1 | cut -d':' -f2)\n#       perl -n -i -e \"if ($. != $line) { print }\" \"$cfg.in\"\n#     done\n#   fi\n#\n#   tmux_conf_urlscan_options=${tmux_conf_urlscan_options:---compact --dedupe}\n#   if command -v urlscan > /dev/null 2>&1; then\n#     tmux bind U run \"cut -c3- '#{TMUX_CONF}' | sh -s _urlscan '#{pane_id}' $tmux_conf_urlscan_options\"\n#   elif command -v urlview > /dev/null 2>&1; then\n#     tmux bind U run \"cut -c3- '#{TMUX_CONF}' | sh -s _urlview '#{pane_id}'\"\n#   fi\n# }\n#\n# _apply_theme() {\n#   tmux_conf_theme=${tmux_conf_theme:-enabled}\n#   if ! _is_disabled \"$tmux_conf_theme\"; then\n#\n#     # -- default theme -------------------------------------------------------\n#\n#     tmux_conf_theme_colour_1=${tmux_conf_theme_colour_1:-#080808}     # dark gray\n#     tmux_conf_theme_colour_2=${tmux_conf_theme_colour_2:-#303030}     # gray\n#     tmux_conf_theme_colour_3=${tmux_conf_theme_colour_3:-#8a8a8a}     # light gray\n#     tmux_conf_theme_colour_4=${tmux_conf_theme_colour_4:-#00afff}     # light blue\n#     tmux_conf_theme_colour_5=${tmux_conf_theme_colour_5:-#ffff00}     # yellow\n#     tmux_conf_theme_colour_6=${tmux_conf_theme_colour_6:-#080808}     # dark gray\n#     tmux_conf_theme_colour_7=${tmux_conf_theme_colour_7:-#e4e4e4}     # white\n#     tmux_conf_theme_colour_8=${tmux_conf_theme_colour_8:-#080808}     # dark gray\n#     tmux_conf_theme_colour_9=${tmux_conf_theme_colour_9:-#ffff00}     # yellow\n#     tmux_conf_theme_colour_10=${tmux_conf_theme_colour_10:-#ff00af}   # pink\n#     tmux_conf_theme_colour_11=${tmux_conf_theme_colour_11:-#5fff00}   # green\n#     tmux_conf_theme_colour_12=${tmux_conf_theme_colour_12:-#8a8a8a}   # light gray\n#     tmux_conf_theme_colour_13=${tmux_conf_theme_colour_13:-#e4e4e4}   # white\n#     tmux_conf_theme_colour_14=${tmux_conf_theme_colour_14:-#080808}   # dark gray\n#     tmux_conf_theme_colour_15=${tmux_conf_theme_colour_15:-#080808}   # dark gray\n#     tmux_conf_theme_colour_16=${tmux_conf_theme_colour_16:-#d70000}   # red\n#     tmux_conf_theme_colour_17=${tmux_conf_theme_colour_17:-#e4e4e4}   # white\n#\n#     # -- panes ---------------------------------------------------------------\n#\n#     tmux_conf_theme_window_fg=${tmux_conf_theme_window_fg:-default}\n#     tmux_conf_theme_window_bg=${tmux_conf_theme_window_bg:-default}\n#     tmux_conf_theme_highlight_focused_pane=${tmux_conf_theme_highlight_focused_pane:-false}\n#     tmux_conf_theme_focused_pane_fg=${tmux_conf_theme_focused_pane_fg:-default}\n#     tmux_conf_theme_focused_pane_bg=${tmux_conf_theme_focused_pane_bg:-$tmux_conf_theme_colour_2}\n#\n#     window_style=\"fg=$tmux_conf_theme_window_fg,bg=$tmux_conf_theme_window_bg\"\n#     if _is_true \"$tmux_conf_theme_highlight_focused_pane\"; then\n#       window_active_style=\"fg=$tmux_conf_theme_focused_pane_fg,bg=$tmux_conf_theme_focused_pane_bg\"\n#     else\n#       window_active_style=\"default\"\n#     fi\n#\n#     tmux_conf_theme_pane_border_style=${tmux_conf_theme_pane_border_style:-thin}\n#     tmux_conf_theme_pane_border=${tmux_conf_theme_pane_border:-$tmux_conf_theme_colour_2}\n#     tmux_conf_theme_pane_active_border=${tmux_conf_theme_pane_active_border:-$tmux_conf_theme_colour_4}\n#     tmux_conf_theme_pane_border_fg=${tmux_conf_theme_pane_border_fg:-$tmux_conf_theme_pane_border}\n#     tmux_conf_theme_pane_active_border_fg=${tmux_conf_theme_pane_active_border_fg:-$tmux_conf_theme_pane_active_border}\n#     case \"$tmux_conf_theme_pane_border_style\" in\n#       fat)\n#         tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-$tmux_conf_theme_pane_border_fg}\n#         tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-$tmux_conf_theme_pane_active_border_fg}\n#         ;;\n#       thin|*)\n#         tmux_conf_theme_pane_border_bg=${tmux_conf_theme_pane_border_bg:-default}\n#         tmux_conf_theme_pane_active_border_bg=${tmux_conf_theme_pane_active_border_bg:-default}\n#         ;;\n#     esac\n#\n#     tmux_conf_theme_pane_indicator=${tmux_conf_theme_pane_indicator:-$tmux_conf_theme_colour_4}\n#     tmux_conf_theme_pane_active_indicator=${tmux_conf_theme_pane_active_indicator:-$tmux_conf_theme_colour_4}\n#\n#     # -- status line ---------------------------------------------------------\n#\n#     tmux_conf_theme_left_separator_main=$(_decode_unicode_escapes \"${tmux_conf_theme_left_separator_main-}\")\n#     tmux_conf_theme_left_separator_sub=$(_decode_unicode_escapes \"${tmux_conf_theme_left_separator_sub-|}\")\n#     tmux_conf_theme_right_separator_main=$(_decode_unicode_escapes \"${tmux_conf_theme_right_separator_main-}\")\n#     tmux_conf_theme_right_separator_sub=$(_decode_unicode_escapes \"${tmux_conf_theme_right_separator_sub-|}\")\n#\n#     tmux_conf_theme_message_fg=${tmux_conf_theme_message_fg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_message_bg=${tmux_conf_theme_message_bg:-$tmux_conf_theme_colour_5}\n#     tmux_conf_theme_message_attr=${tmux_conf_theme_message_attr:-bold}\n#\n#     tmux_conf_theme_message_command_fg=${tmux_conf_theme_message_command_fg:-$tmux_conf_theme_colour_5}\n#     tmux_conf_theme_message_command_bg=${tmux_conf_theme_message_command_bg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_message_command_attr=${tmux_conf_theme_message_command_attr:-bold}\n#\n#     tmux_conf_theme_mode_fg=${tmux_conf_theme_mode_fg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_mode_bg=${tmux_conf_theme_mode_bg:-$tmux_conf_theme_colour_5}\n#     tmux_conf_theme_mode_attr=${tmux_conf_theme_mode_attr:-bold}\n#\n#     tmux_conf_theme_status_fg=${tmux_conf_theme_status_fg:-$tmux_conf_theme_colour_3}\n#     tmux_conf_theme_status_bg=${tmux_conf_theme_status_bg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_status_attr=${tmux_conf_theme_status_attr:-none}\n#\n#     tmux_conf_theme_terminal_title=${tmux_conf_theme_terminal_title:-#h ❐ #S ● #I #W}\n#\n#     tmux_conf_theme_window_status_fg=${tmux_conf_theme_window_status_fg:-$tmux_conf_theme_colour_3}\n#     tmux_conf_theme_window_status_bg=${tmux_conf_theme_window_status_bg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_window_status_attr=${tmux_conf_theme_window_status_attr:-none}\n#     tmux_conf_theme_window_status_format=${tmux_conf_theme_window_status_format:-'#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}'}\n#\n#     tmux_conf_theme_window_status_current_fg=${tmux_conf_theme_window_status_current_fg:-$tmux_conf_theme_colour_1}\n#     tmux_conf_theme_window_status_current_bg=${tmux_conf_theme_window_status_current_bg:-$tmux_conf_theme_colour_4}\n#     tmux_conf_theme_window_status_current_attr=${tmux_conf_theme_window_status_current_attr:-bold}\n#     tmux_conf_theme_window_status_current_format=${tmux_conf_theme_window_status_current_format:-'#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}'}\n#\n#     tmux_conf_theme_window_status_activity_fg=${tmux_conf_theme_window_status_activity_fg:-default}\n#     tmux_conf_theme_window_status_activity_bg=${tmux_conf_theme_window_status_activity_bg:-default}\n#     tmux_conf_theme_window_status_activity_attr=${tmux_conf_theme_window_status_activity_attr:-underscore}\n#\n#     tmux_conf_theme_window_status_bell_fg=${tmux_conf_theme_window_status_bell_fg:-$tmux_conf_theme_colour_5}\n#     tmux_conf_theme_window_status_bell_bg=${tmux_conf_theme_window_status_bell_bg:-default}\n#     tmux_conf_theme_window_status_bell_attr=${tmux_conf_theme_window_status_bell_attr:-blink,bold}\n#\n#     tmux_conf_theme_window_status_last_fg=${tmux_conf_theme_window_status_last_fg:-$tmux_conf_theme_colour_4}\n#     tmux_conf_theme_window_status_last_bg=${tmux_conf_theme_window_status_last_bg:-default}\n#     tmux_conf_theme_window_status_last_attr=${tmux_conf_theme_window_status_last_attr:-none}\n#\n#     if [ \"$tmux_conf_theme_window_status_bg\" = \"$tmux_conf_theme_status_bg\" ] || [ \"$tmux_conf_theme_window_status_bg\" = \"default\" ]; then\n#       spacer=''\n#       spacer_current=' '\n#     else\n#       spacer=' '\n#       spacer_current=' '\n#     fi\n#     if [ \"$tmux_conf_theme_window_status_last_bg\" = \"$tmux_conf_theme_status_bg\" ] || [ \"$tmux_conf_theme_window_status_last_bg\" = \"default\" ] ; then\n#       spacer_last=''\n#     else\n#       spacer_last=' '\n#     fi\n#     if [ \"$tmux_conf_theme_window_status_activity_bg\" = \"$tmux_conf_theme_status_bg\" ] || [ \"$tmux_conf_theme_window_status_activity_bg\" = \"default\" ] ; then\n#       spacer_activity=''\n#       spacer_last_activity=\"$spacer_last\"\n#     else\n#       spacer_activity=' '\n#       spacer_last_activity=' '\n#     fi\n#     if [ \"$tmux_conf_theme_window_status_bell_bg\" = \"$tmux_conf_theme_status_bg\" ] || [ \"$tmux_conf_theme_window_status_bell_bg\" = \"default\" ] ; then\n#       spacer_bell=''\n#       spacer_last_bell=\"$spacer_last\"\n#       spacer_activity_bell=\"$spacer_activity\"\n#       spacer_last_activity_bell=\"$spacer_last_activity\"\n#     else\n#       spacer_bell=' '\n#       spacer_last_bell=' '\n#       spacer_activity_bell=' '\n#       spacer_last_activity_bell=' '\n#     fi\n#     spacer=\"#{?window_last_flag,#{?window_activity_flag,#{?window_bell_flag,$spacer_last_activity_bell,$spacer_last_activity},#{?window_bell_flag,$spacer_last_bell,$spacer_last}},#{?window_activity_flag,#{?window_bell_flag,$spacer_activity_bell,$spacer_activity},#{?window_bell_flag,$spacer_bell,$spacer}}}\"\n#     if [ \"$(tmux show -g -v status-justify)\" = \"right\" ]; then\n#       if [ -z \"$tmux_conf_theme_right_separator_main\" ]; then\n#         window_status_separator=' '\n#       else\n#         window_status_separator=''\n#       fi\n#       window_status_format=\"#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg,none]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}$spacer$(printf '%s' \"$tmux_conf_theme_window_status_last_attr\" | perl -n -e 'print \"#{?window_last_flag,#[none],}\" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\\1],}/g; print if !/default/')$(printf '%s' \"$tmux_conf_theme_window_status_activity_attr\" | perl -n -e 'print \"#{?window_activity_flag?,#[none],}\" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\\1],}/g; print if !/default/')$(printf '%s' \"$tmux_conf_theme_window_status_bell_attr\" | perl -n -e 'print \"#{?window_bell_flag,#[none],}\" if !/default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#[none]$tmux_conf_theme_right_separator_main\"\n#       window_status_current_format=\"#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg,none]$tmux_conf_theme_right_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_right_separator_main\"\n#     else\n#       if [ -z \"$tmux_conf_theme_left_separator_main\" ]; then\n#         window_status_separator=' '\n#       else\n#         window_status_separator=''\n#       fi\n#       window_status_format=\"#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_bg,none]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_fg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[bg=$&]/; print if !/default/\"),}$spacer$(printf '%s' \"$tmux_conf_theme_window_status_last_attr\" | perl -n -e 'print \"#{?window_last_flag,#[none],}\" if !/default/ ; s/([a-z]+),?/#{?window_last_flag,#[\\1],}/g; print if !/default/')$(printf '%s' \"$tmux_conf_theme_window_status_activity_attr\" | perl -n -e 'print \"#{?window_activity_flag,#[none],}\" if !/default/ ; s/([a-z]+),?/#{?window_activity_flag,#[\\1],}/g; print if !/default/')$(printf '%s' \"$tmux_conf_theme_window_status_bell_attr\" | perl -n -e 'print \"#{?window_bell_flag,#[none],}\" if /!default/ ; s/([a-z]+),?/#{?window_bell_flag,#[\\1],}/g; print if !/default/')$tmux_conf_theme_window_status_format#[none]$spacer#[fg=$tmux_conf_theme_window_status_bg,bg=$tmux_conf_theme_status_bg]#{?window_last_flag,$(printf '%s' \"$tmux_conf_theme_window_status_last_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_activity_flag,$(printf '%s' \"$tmux_conf_theme_window_status_activity_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}#{?window_bell_flag,$(printf '%s' \"$tmux_conf_theme_window_status_bell_bg\" | perl -n -e \"s/.+/#[fg=$&]/; print if !/default/\"),}$tmux_conf_theme_left_separator_main\"\n#       window_status_current_format=\"#[fg=$tmux_conf_theme_status_bg,bg=$tmux_conf_theme_window_status_current_bg,none]$tmux_conf_theme_left_separator_main#[fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr]$spacer_current$tmux_conf_theme_window_status_current_format$spacer_current#[fg=$tmux_conf_theme_window_status_current_bg,bg=$tmux_conf_theme_status_bg]$tmux_conf_theme_left_separator_main\"\n#     fi\n#\n#     # -- indicators\n#\n#     tmux_conf_theme_pairing=${tmux_conf_theme_pairing:-⚇}                         # U+2687\n#     tmux_conf_theme_pairing_fg=${tmux_conf_theme_pairing_fg:-none}\n#     tmux_conf_theme_pairing_bg=${tmux_conf_theme_pairing_bg:-none}\n#     tmux_conf_theme_pairing_attr=${tmux_conf_theme_pairing_attr:-none}\n#\n#     tmux_conf_theme_prefix=${tmux_conf_theme_prefix:-⌨}                           # U+2328\n#     tmux_conf_theme_prefix_fg=${tmux_conf_theme_prefix_fg:-none}\n#     tmux_conf_theme_prefix_bg=${tmux_conf_theme_prefix_bg:-none}\n#     tmux_conf_theme_prefix_attr=${tmux_conf_theme_prefix_attr:-none}\n#\n#     tmux_conf_theme_mouse=${tmux_conf_theme_mouse:-↗}                             # U+2197\n#     tmux_conf_theme_mouse_fg=${tmux_conf_theme_mouse_fg:-none}\n#     tmux_conf_theme_mouse_bg=${tmux_conf_theme_mouse_bg:-none}\n#     tmux_conf_theme_mouse_attr=${tmux_conf_theme_mouse_attr:-none}\n#\n#     tmux_conf_theme_root=${tmux_conf_theme_root:-!}\n#     tmux_conf_theme_root_fg=${tmux_conf_theme_root_fg:-none}\n#     tmux_conf_theme_root_bg=${tmux_conf_theme_root_bg:-none}\n#     tmux_conf_theme_root_attr=${tmux_conf_theme_root_attr:-bold,blink}\n#\n#     tmux_conf_theme_synchronized=${tmux_conf_theme_synchronized:-⚏}               # U+268F\n#     tmux_conf_theme_synchronized_fg=${tmux_conf_theme_synchronized_fg:-none}\n#     tmux_conf_theme_synchronized_bg=${tmux_conf_theme_synchronized_bg:-none}\n#     tmux_conf_theme_synchronized_attr=${tmux_conf_theme_synchronized_attr:-none}\n#\n#     # -- status-left style\n#\n#     tmux_conf_theme_status_left=${tmux_conf_theme_status_left-' ❐ #S | ↑#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} '}\n#     tmux_conf_theme_status_left_fg=${tmux_conf_theme_status_left_fg:-$tmux_conf_theme_colour_6,$tmux_conf_theme_colour_7,$tmux_conf_theme_colour_8}\n#     tmux_conf_theme_status_left_bg=${tmux_conf_theme_status_left_bg:-$tmux_conf_theme_colour_9,$tmux_conf_theme_colour_10,$tmux_conf_theme_colour_11}\n#     tmux_conf_theme_status_left_attr=${tmux_conf_theme_status_left_attr:-bold,none,none}\n#\n#     if [ -n \"$tmux_conf_theme_status_left\" ]; then\n#       status_left=$(echo \"$tmux_conf_theme_status_left\" | sed \\\n#         -e \"s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{pairing}#[inherit]/g\" \\\n#         -e \"s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{prefix}#[inherit]/g\" \\\n#         -e \"s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{mouse}#[inherit]/g\" \\\n#         -e \"s/#{synchronized}/#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{synchronized}#[inherit]/g\" \\\n#         -e \"s/#{root}/#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{root}#[inherit]/g\")\n#\n#       status_left=$(printf '%s' \"$status_left\" | awk \\\n#                         -v status_bg=\"$tmux_conf_theme_status_bg\" \\\n#                         -v fg_=\"$tmux_conf_theme_status_left_fg\" \\\n#                         -v bg_=\"$tmux_conf_theme_status_left_bg\" \\\n#                         -v attr_=\"$tmux_conf_theme_status_left_attr\" \\\n#                         -v mainsep=\"$tmux_conf_theme_left_separator_main\" \\\n#                         -v subsep=\"$tmux_conf_theme_left_separator_sub\" '\n#         function subsplit(s, l, i, a, r)\n#         {\n#           l = split(s, a, \",\")\n#           for (i = 1; i <= l; ++i)\n#           {\n#             o = split(a[i], _, \"(\") - 1\n#             c = split(a[i], _, \")\") - 1\n#             open += o - c\n#             o_ = split(a[i], _, \"{\") - 1\n#             c_ = split(a[i], _, \"}\") - 1\n#             open_ += o_ - c_\n#             o__ = split(a[i], _, \"[\") - 1\n#             c__ = split(a[i], _, \"]\") - 1\n#             open__ += o__ - c__\n#\n#             if (i == l)\n#               r = sprintf(\"%s%s\", r, a[i])\n#             else if (open || open_ || open__)\n#               r = sprintf(\"%s%s,\", r, a[i])\n#             else\n#               r = sprintf(\"%s%s#[fg=%s,bg=%s,%s]%s\", r, a[i], fg[j], bg[j], attr[j], subsep)\n#           }\n#\n#           gsub(/#\\[inherit\\]/, sprintf(\"#[default]#[fg=%s,bg=%s,%s]\", fg[j], bg[j], attr[j]), r)\n#           return r\n#         }\n#         BEGIN {\n#           FS = \"|\"\n#           l1 = split(fg_, fg, \",\")\n#           l2 = split(bg_, bg, \",\")\n#           l3 = split(attr_, attr, \",\")\n#           l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)\n#         }\n#         {\n#           for (i = j = 1; i <= NF; ++i)\n#           {\n#             if (open || open_ || open__)\n#               printf \"|%s\", subsplit($i)\n#             else\n#             {\n#               if (i > 1)\n#                 printf \"#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s\", bg[j_], bg[j], mainsep, fg[j], bg[j], attr[j], subsplit($i)\n#               else\n#                 printf \"#[fg=%s,bg=%s,%s]%s\", fg[j], bg[j], attr[j], subsplit($i)\n#             }\n#\n#             if (!open && !open_ && !open__)\n#             {\n#               j_ = j\n#               j = j % l + 1\n#             }\n#           }\n#           printf \"#[fg=%s,bg=%s,none]%s\", bg[j_], status_bg, mainsep\n#         }')\n#     fi\n#     status_left=\"$status_left \"\n#\n#     # -- status-right style\n#\n#     tmux_conf_theme_status_right=${tmux_conf_theme_status_right-' #{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_status, #{battery_status},}#{?battery_bar, #{battery_bar},}#{?battery_percentage, #{battery_percentage},} , %R , %d %b | #{username}#{root} | #{hostname} '}\n#     tmux_conf_theme_status_right_fg=${tmux_conf_theme_status_right_fg:-$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14}\n#     tmux_conf_theme_status_right_bg=${tmux_conf_theme_status_right_bg:-$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17}\n#     tmux_conf_theme_status_right_attr=${tmux_conf_theme_status_right_attr:-none,none,bold}\n#\n#     if [ -n \"$tmux_conf_theme_status_right\" ]; then\n#       status_right=$(echo \"$tmux_conf_theme_status_right\" | sed \\\n#         -e \"s/#{pairing}/#[fg=$tmux_conf_theme_pairing_fg]#[bg=$tmux_conf_theme_pairing_bg]#[$tmux_conf_theme_pairing_attr]#{pairing}#[inherit]/g\" \\\n#         -e \"s/#{prefix}/#[fg=$tmux_conf_theme_prefix_fg]#[bg=$tmux_conf_theme_prefix_bg]#[$tmux_conf_theme_prefix_attr]#{prefix}#[inherit]/g\" \\\n#         -e \"s/#{mouse}/#[fg=$tmux_conf_theme_mouse_fg]#[bg=$tmux_conf_theme_mouse_bg]#[$tmux_conf_theme_mouse_attr]#{mouse}#[inherit]/g\" \\\n#         -e \"s/#{synchronized}/#[fg=$tmux_conf_theme_synchronized_fg]#[bg=$tmux_conf_theme_synchronized_bg]#[$tmux_conf_theme_synchronized_attr]#{synchronized}#[inherit]/g\" \\\n#         -e \"s/#{root}/#[fg=$tmux_conf_theme_root_fg]#[bg=$tmux_conf_theme_root_bg]#[$tmux_conf_theme_root_attr]#{root}#[inherit]/g\")\n#\n#       status_right=$(printf '%s' \"$status_right\" | awk \\\n#                         -v status_bg=\"$tmux_conf_theme_status_bg\" \\\n#                         -v fg_=\"$tmux_conf_theme_status_right_fg\" \\\n#                         -v bg_=\"$tmux_conf_theme_status_right_bg\" \\\n#                         -v attr_=\"$tmux_conf_theme_status_right_attr\" \\\n#                         -v mainsep=\"$tmux_conf_theme_right_separator_main\" \\\n#                         -v subsep=\"$tmux_conf_theme_right_separator_sub\" '\n#         function subsplit(s, l, i, a, r)\n#         {\n#           l = split(s, a, \",\")\n#           for (i = 1; i <= l; ++i)\n#           {\n#             o = split(a[i], _, \"(\") - 1\n#             c = split(a[i], _, \")\") - 1\n#             open += o - c\n#             o_ = split(a[i], _, \"{\") - 1\n#             c_ = split(a[i], _, \"}\") - 1\n#             open_ += o_ - c_\n#             o__ = split(a[i], _, \"[\") - 1\n#             c__ = split(a[i], _, \"]\") - 1\n#             open__ += o__ - c__\n#\n#             if (i == l)\n#               r = sprintf(\"%s%s\", r, a[i])\n#             else if (open || open_ || open__)\n#               r = sprintf(\"%s%s,\", r, a[i])\n#             else\n#               r = sprintf(\"%s%s#[fg=%s,bg=%s,%s]%s\", r, a[i], fg[j], bg[j], attr[j], subsep)\n#           }\n#\n#           gsub(/#\\[inherit\\]/, sprintf(\"#[default]#[fg=%s,bg=%s,%s]\", fg[j], bg[j], attr[j]), r)\n#           return r\n#         }\n#         BEGIN {\n#           FS = \"|\"\n#           l1 = split(fg_, fg, \",\")\n#           l2 = split(bg_, bg, \",\")\n#           l3 = split(attr_, attr, \",\")\n#           l = l1 < l2 ? (l1 < l3 ? l1 : l3) : (l2 < l3 ? l2 : l3)\n#         }\n#         {\n#           for (i = j = 1; i <= NF; ++i)\n#           {\n#             if (open_ || open || open__)\n#               printf \"|%s\", subsplit($i)\n#             else\n#               printf \"#[fg=%s,bg=%s,none]%s#[fg=%s,bg=%s,%s]%s\", bg[j], (i == 1) ? status_bg : bg[j_], mainsep, fg[j], bg[j], attr[j], subsplit($i)\n#\n#             if (!open && !open_ && !open__)\n#             {\n#               j_ = j\n#               j = j % l + 1\n#             }\n#           }\n#         }')\n#     fi\n#     status_right=${status_right-}\n#\n#     # -- clock ---------------------------------------------------------------\n#\n#     tmux_conf_theme_clock_colour=${tmux_conf_theme_clock_colour:-$tmux_conf_theme_colour_4}\n#     tmux_conf_theme_clock_style=${tmux_conf_theme_clock_style:-24}\n#\n#     tmux setw -g window-style \"$window_style\" \\; setw -g window-active-style \"$window_active_style\" \\;\\\n#          setw -g pane-border-style \"fg=$tmux_conf_theme_pane_border_fg,bg=$tmux_conf_theme_pane_border_bg\" \\; set -g pane-active-border-style \"fg=$tmux_conf_theme_pane_active_border_fg,bg=$tmux_conf_theme_pane_active_border_bg\" \\;\\\n#          set -g display-panes-colour \"$tmux_conf_theme_pane_indicator\" \\; set -g display-panes-active-colour \"$tmux_conf_theme_pane_active_indicator\" \\;\\\n#          set -g message-style \"fg=$tmux_conf_theme_message_fg,bg=$tmux_conf_theme_message_bg,$tmux_conf_theme_message_attr\" \\;\\\n#          set -g message-command-style \"fg=$tmux_conf_theme_message_command_fg,bg=$tmux_conf_theme_message_command_bg,$tmux_conf_theme_message_command_attr\" \\;\\\n#          setw -g mode-style \"fg=$tmux_conf_theme_mode_fg,bg=$tmux_conf_theme_mode_bg,$tmux_conf_theme_mode_attr\" \\;\\\n#          set -g status-style \"fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr\" \\;\\\n#          set -g status-left-style \"fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr\" \\;\\\n#          set -g status-right-style \"fg=$tmux_conf_theme_status_fg,bg=$tmux_conf_theme_status_bg,$tmux_conf_theme_status_attr\" \\;\\\n#          setw -g window-status-style \"fg=$tmux_conf_theme_window_status_fg,bg=$tmux_conf_theme_window_status_bg,$tmux_conf_theme_window_status_attr\" \\;\\\n#          setw -g window-status-current-style \"fg=$tmux_conf_theme_window_status_current_fg,bg=$tmux_conf_theme_window_status_current_bg,$tmux_conf_theme_window_status_current_attr\" \\;\\\n#          setw -g window-status-activity-style \"fg=$tmux_conf_theme_window_status_activity_fg,bg=$tmux_conf_theme_window_status_activity_bg,$tmux_conf_theme_window_status_activity_attr\" \\;\\\n#          setw -g window-status-bell-style \"fg=$tmux_conf_theme_window_status_bell_fg,bg=$tmux_conf_theme_window_status_bell_bg,$tmux_conf_theme_window_status_bell_attr\" \\;\\\n#          setw -g window-status-last-style \"fg=$tmux_conf_theme_window_status_last_fg,bg=$tmux_conf_theme_window_status_last_bg,$tmux_conf_theme_window_status_last_attr\" \\;\\\n#          setw -g window-status-separator \"$window_status_separator\" \\;\\\n#          setw -g clock-mode-colour \"$tmux_conf_theme_clock_colour\" \\;\\\n#          setw -g clock-mode-style \"$tmux_conf_theme_clock_style\"\n#   fi\n#\n#   # -- variables -------------------------------------------------------------\n#\n#   set_titles_string=$(printf '%s' \"${tmux_conf_theme_terminal_title:-$(tmux show -gv set-titles-string)}\" | sed \\\n#     -e \"s%#{circled_window_index}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#I')%g\" \\\n#     -e \"s%#{circled_session_name}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#S')%g\" \\\n#     -e \"s%#{pretty_pane_current_path}%#(cut -c3- '$TMUX_CONF' | sh -s _pretty_path auto '#{pane_current_path}')%g\" \\\n#     -e \"s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g\" \\\n#     -e \"s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g\" \\\n#     -e \"s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g\" \\\n#     -e \"s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g\")\n#\n#   window_status_format=$(printf '%s' \"${window_status_format:-$(tmux show -gv window-status-format)}\" | sed \\\n#     -e \"s%#{circled_window_index}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#I')%g\" \\\n#     -e \"s%#{circled_session_name}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#S')%g\" \\\n#     -e \"s%#{pretty_pane_current_path}%#(cut -c3- '$TMUX_CONF' | sh -s _pretty_path auto '#{pane_current_path}')%g\" \\\n#     -e \"s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g\" \\\n#     -e \"s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g\" \\\n#     -e \"s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g\" \\\n#     -e \"s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g\")\n#\n#   window_status_current_format=$(printf '%s' \"${window_status_current_format:-$(tmux show -gv window-status-current-format)}\" | sed \\\n#     -e \"s%#{circled_window_index}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#I')%g\" \\\n#     -e \"s%#{circled_session_name}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#S')%g\" \\\n#     -e \"s%#{pretty_pane_current_path}%#(cut -c3- '$TMUX_CONF' | sh -s _pretty_path auto '#{pane_current_path}')%g\" \\\n#     -e \"s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g\" \\\n#     -e \"s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g\" \\\n#     -e \"s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g\" \\\n#     -e \"s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g\" \\\n#     -e \"s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g\")\n#\n#   status_left=$(printf '%s' \"${status_left-$(tmux show -gv status-left)}\" | sed \\\n#     -e \"s/#{pairing}/#{?session_many_attached,$tmux_conf_theme_pairing ,}/g\" \\\n#     -e \"s/#{prefix}/#{?client_prefix,$tmux_conf_theme_prefix ,$(printf '%s' \"$tmux_conf_theme_prefix\" | sed -e 's/./ /g') }/g\" \\\n#     -e \"s/#{mouse}/#{?mouse,$tmux_conf_theme_mouse ,$(printf '%s' \"$tmux_conf_theme_mouse\" | sed -e 's/./ /g') }/g\" \\\n#     -e \"s%#{synchronized}%#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g\" \\\n#     -e \"s%#{circled_session_name}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#S')%g\" \\\n#     -e \"s%#{pretty_pane_current_path}%#(cut -c3- '$TMUX_CONF' | sh -s _pretty_path auto '#{pane_current_path}')%g\" \\\n#     -e \"s%#{root}%#{?#{==:#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' '#D'),root},$tmux_conf_theme_root,}%g\")\n#\n#   status_right=$(printf '%s' \"${status_right-$(tmux show -gv status-right)}\" | sed \\\n#     -e \"s/#{pairing}/#{?session_many_attached,$tmux_conf_theme_pairing ,}/g\" \\\n#     -e \"s/#{prefix}/#{?client_prefix,$tmux_conf_theme_prefix ,$(printf '%s' \"$tmux_conf_theme_prefix\" | sed -e 's/./ /g') }/g\" \\\n#     -e \"s/#{mouse}/#{?mouse,$tmux_conf_theme_mouse ,$(printf '%s' \"$tmux_conf_theme_mouse\" | sed -e 's/./ /g') }/g\" \\\n#     -e \"s%#{synchronized}%#{?pane_synchronized,$tmux_conf_theme_synchronized ,}%g\" \\\n#     -e \"s%#{circled_session_name}%#(cut -c3- '$TMUX_CONF' | sh -s _circled '#S')%g\" \\\n#     -e \"s%#{pretty_pane_current_path}%#(cut -c3- '$TMUX_CONF' | sh -s _pretty_path auto '#{pane_current_path}')%g\" \\\n#     -e \"s%#{root}%#{?#{==:#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' '#D'),root},$tmux_conf_theme_root,}%g\")\n#\n#   tmux_conf_battery_bar_symbol_full=$(_decode_unicode_escapes \"${tmux_conf_battery_bar_symbol_full:-◼}\")\n#   tmux_conf_battery_bar_symbol_empty=$(_decode_unicode_escapes \"${tmux_conf_battery_bar_symbol_empty:-◻}\")\n#   tmux_conf_battery_bar_length=${tmux_conf_battery_bar_length:-auto}\n#   tmux_conf_battery_bar_palette=${tmux_conf_battery_bar_palette:-gradient}\n#   tmux_conf_battery_hbar_palette=${tmux_conf_battery_hbar_palette:-gradient}\n#   tmux_conf_battery_vbar_palette=${tmux_conf_battery_vbar_palette:-gradient}\n#   tmux_conf_battery_status_charging=$(_decode_unicode_escapes \"${tmux_conf_battery_status_charging:-↑}\")        # U+2191\n#   tmux_conf_battery_status_discharging=$(_decode_unicode_escapes \"${tmux_conf_battery_status_discharging:-↓}\")  # U+2193\n#\n#   _pkillf 'sh -s _battery_info'\n#   _battery_info\n#   if [ \"$battery_charge\" != 0 ]; then\n#     case \"$status_left $status_right\" in\n#       *'#{battery_'*|*'#{?battery_'*)\n#         status_left=$(echo \"$status_left\" | sed -E \\\n#           -e 's%#\\{\\?battery_bar%#\\{?@battery_percentage%g' \\\n#           -e 's%#\\{\\?battery_hbar%#\\{?@battery_percentage%g' \\\n#           -e 's%#\\{\\?battery_vbar%#\\{?@battery_percentage%g' \\\n#           -e \"s%#\\{battery_bar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _bar '$(printf '%s' \"$tmux_conf_battery_bar_palette\" | tr ',' ';')' '$tmux_conf_battery_bar_symbol_empty' '$tmux_conf_battery_bar_symbol_full' '$tmux_conf_battery_bar_length' '#{@battery_charge}' '#{client_width}')%g\" \\\n#           -e \"s%#\\{battery_hbar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _hbar '$(printf '%s' \"$tmux_conf_battery_hbar_palette\" | tr ',' ';')' '#{@battery_charge}')%g\" \\\n#           -e \"s%#\\{battery_vbar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _vbar '$(printf '%s' \"$tmux_conf_battery_vbar_palette\" | tr ',' ';')' '#{@battery_charge}')%g\" \\\n#           -e 's%#\\{(\\?)?battery_status%#\\{\\1@battery_status%g' \\\n#           -e 's%#\\{(\\?)?battery_percentage%#\\{\\1@battery_percentage%g')\n#         status_right=$(echo \"$status_right\" | sed -E \\\n#           -e 's%#\\{\\?battery_bar%#\\{?@battery_percentage%g' \\\n#           -e 's%#\\{\\?battery_hbar%#\\{?@battery_percentage%g' \\\n#           -e 's%#\\{\\?battery_vbar%#\\{?@battery_percentage%g' \\\n#           -e \"s%#\\{battery_bar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _bar '$(printf '%s' \"$tmux_conf_battery_bar_palette\" | tr ',' ';')' '$tmux_conf_battery_bar_symbol_empty' '$tmux_conf_battery_bar_symbol_full' '$tmux_conf_battery_bar_length' '#{@battery_charge}' '#{client_width}')%g\" \\\n#           -e \"s%#\\{battery_hbar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _hbar '$(printf '%s' \"$tmux_conf_battery_hbar_palette\" | tr ',' ';')' '#{@battery_charge}')%g\" \\\n#           -e \"s%#\\{battery_vbar\\}%#(nice cut -c3- '$TMUX_CONF' | sh -s _vbar '$(printf '%s' \"$tmux_conf_battery_vbar_palette\" | tr ',' ';')' '#{@battery_charge}')%g\" \\\n#           -e 's%#\\{(\\?)?battery_status%#\\{\\1@battery_status%g' \\\n#           -e 's%#\\{(\\?)?battery_percentage%#\\{\\1@battery_percentage%g')\n#         status_right=\"#(echo; nice cut -c3- '$TMUX_CONF' | sh -s _battery_status '$tmux_conf_battery_status_charging' '$tmux_conf_battery_status_discharging')$status_right\"\n#         interval=60\n#         if [ \"$_tmux_version\" -eq 3500 ]; then\n#           tmux run -b \"exec sh -c 'trap \\\"[ -n \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\" ] && kill -9 \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\"; exit 0\\\" TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S \\\"#{socket_path}\\\" display -p \\\"#{l:#{pid}}\\\")\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- \\\"$TMUX_CONF\\\" | sh -s _battery_info; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done'\"\n#         elif [ \"$_tmux_version\" -ge 3200 ]; then\n#           tmux run -b \"trap '[ -n \\\"\\$sleep_pid\\\" ] && kill -9 \\\"\\$sleep_pid\\\"; exit 0' TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _battery_info; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done\"\n#         elif [ \"$_tmux_version\" -ge 2800 ]; then\n#           status_right=\"#(echo; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _battery_info; sleep $interval; done)$status_right\"\n#         elif [ \"$_tmux_version\" -gt 2400 ]; then\n#           status_right=\"#(echo; while :; do nice cut -c3- '$TMUX_CONF' | sh -s _battery_info; sleep $interval; done)$status_right\"\n#         else\n#           status_right=\"#(nice cut -c3- '$TMUX_CONF' | sh -s _battery_info)$status_right\"\n#         fi\n#         ;;\n#     esac\n#   fi\n#\n#   case \"$status_left $status_right\" in\n#     *'#{username}'*|*'#{hostname}'*|*'#{hostname_full}'*|*'#{username_ssh}'*|*'#{hostname_ssh}'*|*'#{hostname_full_ssh}'*)\n#       status_left=$(echo \"$status_left\" | sed \\\n#         -e \"s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g\" \\\n#         -e \"s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g\" \\\n#         -e \"s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g\" \\\n#         -e \"s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g\" \\\n#         -e \"s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g\" \\\n#         -e \"s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g\")\n#       status_right=$(echo \"$status_right\" | sed \\\n#         -e \"s%#{username}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' false '#D')%g\" \\\n#         -e \"s%#{hostname}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false false '#h' '#D')%g\" \\\n#         -e \"s%#{hostname_full}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' false true '#H' '#D')%g\" \\\n#         -e \"s%#{username_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _username '#{pane_pid}' '#{b:pane_tty}' true '#D')%g\" \\\n#         -e \"s%#{hostname_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true false '#h' '#D')%g\" \\\n#         -e \"s%#{hostname_full_ssh}%#(cut -c3- '$TMUX_CONF' | sh -s _hostname '#{pane_pid}' '#{b:pane_tty}' true true '#H' '#D')%g\")\n#       ;;\n#   esac\n#\n#   _pkillf 'sh -s _uptime'\n#   case \"$status_left $status_right\" in\n#     *'#{uptime_'*|*'#{?uptime_'*)\n#       status_left=$(echo \"$status_left\" | perl -p -e '\n#         ; s/#\\{(\\?)?uptime_y\\b/#\\{\\1\\@uptime_y/g\n#         ; s/#\\{(\\?)?uptime_d\\b/#\\{\\1\\@uptime_d/g\n#         ; s/\\@uptime_d\\b/\\@uptime_dy/g if /\\@uptime_y\\b/\n#         ; s/#\\{(\\?)?uptime_h\\b/#\\{\\1\\@uptime_h/g\n#         ; s/#\\{(\\?)?uptime_m\\b/#\\{\\1\\@uptime_m/g\n#         ; s/#\\{(\\?)?uptime_s\\b/#\\{\\1\\@uptime_s/g')\n#       status_right=$(echo \"$status_right\" | perl -p -e '\n#         ; s/#\\{(\\?)?uptime_y\\b/#\\{\\1\\@uptime_y/g\n#         ; s/#\\{(\\?)?uptime_d\\b/#\\{\\1\\@uptime_d/g\n#         ; s/\\@uptime_d\\b/\\@uptime_dy/g if /\\@uptime_y\\b/\n#         ; s/#\\{(\\?)?uptime_h\\b/#\\{\\1\\@uptime_h/g\n#         ; s/#\\{(\\?)?uptime_m\\b/#\\{\\1\\@uptime_m/g\n#         ; s/#\\{(\\?)?uptime_s\\b/#\\{\\1\\@uptime_s/g')\n#       interval=60\n#       case \"$status_left $status_right\" in\n#         *'#{@uptime_s}'*)\n#           interval=$(tmux show -gv status-interval)\n#           ;;\n#       esac\n#       if [ \"$_tmux_version\" -eq 3500 ]; then\n#         tmux run -b \"exec sh -c 'trap \\\"[ -n \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\" ] && kill -9 \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\"; exit 0\\\" TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S \\\"#{socket_path}\\\" display -p \\\"#{l:#{pid}}\\\")\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- \\\"$TMUX_CONF\\\" | sh -s _uptime; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done'\"\n#       elif [ \"$_tmux_version\" -ge 3200 ]; then\n#           tmux run -b \"trap '[ -n \\\"\\$sleep_pid\\\" ] && kill -9 \\\"\\$sleep_pid\\\"; exit 0' TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done\"\n#       elif [ \"$_tmux_version\" -ge 2800 ]; then\n#         status_right=\"#(echo; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval; done)$status_right\"\n#       elif [ \"$_tmux_version\" -gt 2400 ]; then\n#         status_right=\"#(echo; while :; do nice cut -c3- '$TMUX_CONF' | sh -s _uptime; sleep $interval; done)$status_right\"\n#       else\n#         status_right=\"#(nice cut -c3- '$TMUX_CONF' | sh -s _uptime)$status_right\"\n#       fi\n#       ;;\n#   esac\n#\n#   _pkillf 'sh -s _loadavg'\n#   case \"$status_left $status_right\" in\n#     *'#{loadavg'*|*'#{?loadavg'*)\n#       status_left=$(echo \"$status_left\" | sed -E \\\n#         -e 's/#\\{(\\?)?loadavg/#\\{\\1@loadavg/g')\n#       status_right=$(echo \"$status_right\" | sed -E \\\n#         -e 's/#\\{(\\?)?loadavg/#\\{\\1@loadavg/g')\n#       interval=$(tmux show -gv status-interval)\n#       if [ \"$_tmux_version\" -eq 3500 ]; then\n#         tmux run -b \"exec sh -c 'trap \\\"[ -n \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\" ] && kill -9 \\\\\\\\\\\"\\\\\\\\\\$sleep_pid\\\\\\\\\\\"; exit 0\\\" TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S \\\"#{socket_path}\\\" display -p \\\"#{l:#{pid}}\\\")\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- \\\"$TMUX_CONF\\\" | sh -s _loadavg; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done'\"\n#       elif [ \"$_tmux_version\" -ge 3200 ]; then\n#         tmux run -b \"trap '[ -n \\\"\\$sleep_pid\\\" ] && kill -9 \\\"\\$sleep_pid\\\"; exit 0' TERM; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _loadavg; sleep $interval & sleep_pid=\\$!; wait \\\"\\$sleep_pid\\\"; sleep_pid=; done\"\n#       elif [ \"$_tmux_version\" -ge 2800 ]; then\n#         status_right=\"#(echo; while [ \\\"\\$(\\\"$TMUX_PROGRAM\\\" -S '#{socket_path}' display -p '#{l:#{pid}}')\\\" = \\\"#{pid}\\\" ]; do nice cut -c3- '$TMUX_CONF' | sh -s _loadavg; sleep $interval; done)$status_right\"\n#       elif [ \"$_tmux_version\" -gt 2400 ]; then\n#         status_right=\"#(echo; while :; do nice cut -c3- '$TMUX_CONF' | sh -s _loadavg; sleep $interval; done)$status_right\"\n#       else\n#         status_right=\"#(nice cut -c3- '$TMUX_CONF' | sh -s _loadavg)$status_right\"\n#       fi\n#       ;;\n#   esac\n#\n#   # -- custom variables ------------------------------------------------------\n#\n#   if [ -f \"$TMUX_CONF_LOCAL\" ] && [ \"$(cut -c3- \"$TMUX_CONF_LOCAL\" | sh 2>/dev/null -s printf probe)\" = \"probe\" ]; then\n#     replacements=$(perl -n -e 'print if s!^#\\s+([^_][^()\\s]+)\\s*\\(\\)\\s*{\\s*(?:#.*)?\\n!s%#\\\\\\{\\1((?:\\\\s+(?:[^\\{\\}]+?|#\\\\{(?:[^\\{\\}]+?)\\}))*)\\\\\\}%#(cut -c3- \\\"\\\\\\$TMUX_CONF_LOCAL\\\" | sh -s \\1\\\\1)%g; !p' \"$TMUX_CONF_LOCAL\")\n#     status_left=$(echo \"$status_left\" | perl -p -e \"$replacements\" || echo \"$status_left\")\n#     status_right=$(echo \"$status_right\" | perl -p -e \"$replacements\" || echo \"$status_right\")\n#   fi\n#\n#   # --------------------------------------------------------------------------\n#\n#   tmux set -g set-titles-string \"$(_decode_unicode_escapes \"$set_titles_string\")\" \\;\\\n#        setw -g window-status-format \"$(_decode_unicode_escapes \"$window_status_format\")\" \\;\\\n#        setw -g window-status-current-format \"$(_decode_unicode_escapes \"$window_status_current_format\")\" \\;\\\n#        set -g status-left-length 1000 \\; set -g status-left \"$(_decode_unicode_escapes \"$status_left\")\" \\;\\\n#        set -g status-right-length 1000 \\; set -g status-right \"$(_decode_unicode_escapes \"$status_right\")\"\n# }\n#\n# __apply_plugins() {\n#   TMUX_PLUGIN_MANAGER_PATH=\"$1\"\n#   window_active=\"$2\"\n#   tmux_conf_update_plugins_on_launch=\"$3\"\n#   tmux_conf_update_plugins_on_reload=\"$4\"\n#   tmux_conf_uninstall_plugins_on_reload=\"$5\"\n#\n#   if [ -z \"$TMUX_PLUGIN_MANAGER_PATH\" ]; then\n#     return 255\n#   fi\n#   mkdir -p \"$TMUX_PLUGIN_MANAGER_PATH\"\n#\n#   __discover_plugins() (\n#     probe_socket=\"$(dirname \"$TMUX_SOCKET\")/tmux-discover-plugins-$$\"\n#     TMUX_SOCKET=\"$probe_socket\" tmux -f /dev/null start-server \\; set-option exit-empty off\n#     ___discover_plugins() {\n#       depth=$((${depth:-0} + 1))\n#       IFS=${_IFS:-$IFS}\n#       [ \"$depth\" -le 100 ] || return\n#       for current_file in \"$@\"; do\n#         current_file=\"$(cd \"${current_file%/*}\" 2>/dev/null && pwd)/${current_file##*/}\" || continue\n#         while IFS= read -r line; do\n#           if plugin=$(printf '%s\\n' \"$line\" | perl -s -n -E 'print if s/^set-option\\s+-g\\s+\\@plugin\\s+//g or die' 2>/dev/null); then\n#             discovered_plugins=\"${discovered_plugins}${discovered_plugins:+ }${plugin}\"\n#           elif next_files=$(printf '%s\\n' \"$line\" | perl -s -n -E 's/(?<!\\@)current_file/\\@current_file/g ; print if s/^source(?:-file)?(?:\\s+-[qF]+)*\\s*(.+?)$/\\1/g or die' 2>/dev/null); then\n#             next_files=$(TMUX_SOCKET=\"$probe_socket\" tmux -f /dev/null \\\n#               set -g @current_file \"$current_file\" \\; \\\n#               display -pF \"$next_files\")\n#\n#             _IFS=\"$IFS\"\n#             IFS=$(printf '\\n\\nx')\n#             IFS=${IFS%?}\n#             # we don't want quoting here as we want wildcard expansion\n#             # shellcheck disable=SC2046\n#             ___discover_plugins $(printf '%s\\n' \"$next_files\" | xargs printf '%s\\n\\n')\n#           fi\n#         done << EOF\n# $(TMUX_SOCKET=\"$probe_socket\" tmux -f /dev/null source -nvq \"$current_file\" | perl -s -n -E 'print if s/^$current_file:\\d+:\\s*(set-option\\s+-g\\s+\\@plugin\\s+|source-file)/\\1/g' -- -current_file=\"$current_file\")\n# EOF\n#       done\n#     }\n#     ___discover_plugins \"$@\"\n#     TMUX_SOCKET=\"$probe_socket\" tmux -f /dev/null kill-server\n#     rm -rf \"$probe_socket\"\n#     printf '%s\\n' \"$discovered_plugins\"\n#   )\n#\n#   tpm_plugins=$(tmux show -gvq '@tpm_plugins' 2>/dev/null)\n#   tpm_plugins=$(cat << EOF | tr ' ' '\\n' | awk '/^\\s*$/ {next;}; !seen[$0]++ { gsub(/^[ \\t]+/,\"\",$0); gsub(/[ \\t]+$/,\"\",$0); print $0 }'\n#     $tpm_plugins\n#     $(__discover_plugins \"$TMUX_CONF_LOCAL\")\n# EOF\n#   )\n#   if [ -z \"$tpm_plugins\" ]; then\n#     if _is_true \"$tmux_conf_uninstall_plugins_on_reload\" && [ -d \"$TMUX_PLUGIN_MANAGER_PATH/tpm\" ]; then\n#       tmux display 'Uninstalling tpm and plugins...'\n#       tmux set-environment -gu TMUX_PLUGIN_MANAGER_PATH\n#       rm -rf \"$TMUX_PLUGIN_MANAGER_PATH\"\n#       tmux display 'Done uninstalling tpm and plugins...'\n#     fi\n#   else\n#     if [ \"$(command tmux display -p '#{pid} #{version} #{socket_path}')\" = \"$(\"$TMUX_PROGRAM\" display -p '#{pid} #{version} #{socket_path}')\" ]; then\n#       tmux set-environment -g TMUX_PLUGIN_MANAGER_PATH \"$TMUX_PLUGIN_MANAGER_PATH\"\n#       tmux set -g '@tpm_plugins' \"$tpm_plugins\"\n#\n#       if [ -d \"$TMUX_PLUGIN_MANAGER_PATH/tpm\" ]; then\n#         [ -z \"$(tmux show -gqv '@tpm-install')\" ] && tmux set -g '@tpm-install' 'I'\n#         [ -z \"$(tmux show -gqv '@tpm-update')\" ] && tmux set -g '@tpm-update' 'u'\n#         [ -z \"$(tmux show -gqv '@tpm-clean')\" ] && tmux set -g '@tpm-clean' 'M-u'\n#         \"$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm\" || tmux display \"One or more tpm plugin(s) failed\"\n#       fi\n#\n#       if git ls-remote -hq https://github.com/gpakosz/.tmux.git master > /dev/null; then\n#         if [ ! -d \"$TMUX_PLUGIN_MANAGER_PATH/tpm\" ]; then\n#           install_tpm=true\n#           tmux display 'Installing tpm and plugins...'\n#           git clone --depth 1 https://github.com/tmux-plugins/tpm \"$TMUX_PLUGIN_MANAGER_PATH/tpm\"\n#         elif { [ -z \"$window_active\" ] && _is_true \"$tmux_conf_update_plugins_on_launch\"; } || { [ -n \"$window_active\" ] && _is_true \"$tmux_conf_update_plugins_on_reload\"; }; then\n#           update_tpm=true\n#           tmux display 'Updating tpm and plugins...'\n#           (cd \"$TMUX_PLUGIN_MANAGER_PATH/tpm\" && git fetch -q -p && git checkout -q master && git reset -q --hard origin/master)\n#         fi\n#         if [ \"$install_tpm\" = \"true\" ] || [ \"$update_tpm\" = \"true\" ]; then\n#           perl -0777 -p -i -e 's/git clone(?!\\s+--depth\\s+1)/git clone --depth 1/g\n#                               ;s/(install_plugin(.(?!&))*)\\n(\\s+)done/\\1&\\n\\3done\\n\\3wait/g' \"$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/install_plugins.sh\"\n#           perl -p -i -e 's/git submodule update --init --recursive(?!\\s+--depth\\s+1)/git submodule update --init --recursive --depth 1/g' \"$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/update_plugin.sh\"\n#           perl -p -i -e 's,\\$tmux_file\\s+>/dev/null\\s+2>\\&1,$& || { tmux display \"Plugin \\$(basename \\${plugin_path}) failed\" && false; },' \"$TMUX_PLUGIN_MANAGER_PATH/tpm/scripts/source_plugins.sh\"\n#         fi\n#         if [ \"$update_tpm\" = \"true\" ]; then\n#           {\n#             {\n#               printf 'List of discovered tpm plugins: %s\\n' \"$(printf '%s\\n' \"$tpm_plugins\" | paste -s -d ' ' -)\" | _timestamp\n#               printf '%s\\n' \"Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins\" | _timestamp\n#               \"$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins\" 2>&1 | _timestamp\n#               printf '%s\\n' \"Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins all\" | _timestamp\n#               \"$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/update_plugins\" all 2>&1 | _timestamp\n#               printf '%s\\n' \"Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins all\" | _timestamp\n#               \"$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/clean_plugins\" all 2>&1 | _timestamp\n#               printf 'Done.\\n' | _timestamp\n#               printf '\\n'\n#             } >> \"$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt\"\n#\n#             tmux display 'Done updating tpm and plugins...'\n#           } || tmux display 'Failed updating tpm and plugins...'\n#         elif [ \"$install_tpm\" = \"true\" ]; then\n#           {\n#             {\n#               printf 'List of discovered tpm plugins: %s\\n' \"$(printf '%s\\n' \"$tpm_plugins\" | paste -s -d ' ' -)\" | _timestamp\n#               printf '%s\\n' \"Invoking $TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins\" | _timestamp\n#               \"$TMUX_PLUGIN_MANAGER_PATH/tpm/bin/install_plugins\" 2>&1 | _timestamp\n#               printf 'Done.\\n' | _timestamp\n#               printf '\\n' >> \"$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt\"\n#             } >> \"$TMUX_PLUGIN_MANAGER_PATH/tpm_log.txt\"\n#\n#             tmux display 'Done installing tpm and plugins...'\n#\n#             [ -z \"$(tmux show -gqv '@tpm-install')\" ] && tmux set -g '@tpm-install' 'I'\n#             [ -z \"$(tmux show -gqv '@tpm-update')\" ] && tmux set -g '@tpm-update' 'u'\n#             [ -z \"$(tmux show -gqv '@tpm-clean')\" ] && tmux set -g '@tpm-clean' 'M-u'\n#             \"$TMUX_PLUGIN_MANAGER_PATH/tpm/tpm\" || tmux display \"One or more tpm plugin(s) failed\"\n#           } || tmux display 'Failed installing tpm and plugins...'\n#         fi\n#       else\n#         tmux display \"GitHub doesn't seem to be reachable, skipping installing and/or updating tpm and plugins...\"\n#       fi\n#     else\n#       if [ \"$_tmux_version\" -ge 3200 ]; then\n#         tmux run -b \"exec sh -c 'sleep \\$((#{display-time} / 1000)) && \\\"$TMUX_PROGRAM\\\" display -N -d 3000 \\\"Cannot use tpm which assumes a globally installed tmux\\\"'\"\n#       else\n#         tmux run -b \"exec sh -c 'sleep \\$((#{display-time} / 1000)) && \\\"$TMUX_PROGRAM\\\" set display-time 3000 \\; display \\\"Cannot use tpm which assumes a globally installed tmux\\\" \\; set -u display-time'\"\n#       fi\n#     fi\n#\n#     if [ \"$_tmux_version\" -gt 2600 ]; then\n#       tmux set -gu '@tpm-install' \\; set -gu '@tpm-update' \\; set -gu '@tpm-clean' \\; set -gu '@plugin' \\; set -gu '@tpm_plugins'\n#     else\n#       tmux set -g '@tpm-install' '' \\; set -g '@tpm-update' '' \\; set -g '@tpm-clean' '' \\; set -g '@plugin' '' \\; set-gu '@tpm_plugins' ''\n#     fi\n#   fi\n# }\n#\n# _apply_plugins() {\n#   tmux_conf_update_plugins_on_launch=${tmux_conf_update_plugins_on_launch:-true}\n#   tmux_conf_update_plugins_on_reload=${tmux_conf_update_plugins_on_reload:-true}\n#   tmux_conf_uninstall_plugins_on_reload=${tmux_conf_uninstall_plugins_on_reload:-true}\n#\n#   if [ -z \"$TMUX_PLUGIN_MANAGER_PATH\" ]; then\n#     if [ \"$(dirname \"$TMUX_CONF\")\" = \"$HOME\" ]; then\n#       TMUX_PLUGIN_MANAGER_PATH=\"$HOME/.tmux/plugins\"\n#     else\n#       TMUX_PLUGIN_MANAGER_PATH=\"$(dirname \"$TMUX_CONF\")/plugins\"\n#     fi\n#   fi\n#   tmux run -b \"cut -c3- '$TMUX_CONF' | sh -s __apply_plugins '$TMUX_PLUGIN_MANAGER_PATH' '$window_active' '$tmux_conf_update_plugins_on_launch' '$tmux_conf_update_plugins_on_reload' '$tmux_conf_uninstall_plugins_on_reload'\"\n# }\n#\n# _apply_important() {\n#   cfg=$(mktemp) && trap 'rm -f $cfg*' EXIT\n#\n#   if perl -n -e 'print if /^\\s*(?:set|bind|unbind).+?#!important\\s*$/' \"$TMUX_CONF_LOCAL\" 2>/dev/null > \"$cfg.local\"; then\n#     if ! tmux source-file \"$cfg.local\"; then\n#       if tmux source-file -v /dev/null 2> /dev/null; then\n#         verbose_flag='-v'\n#       fi\n#       while ! out=$(tmux source-file \"${verbose_flag:+$verbose_flag}\" \"$cfg.local\"); do\n#         line=$(printf \"%s\" \"$out\" | tail -1 | cut -d':' -f2)\n#         perl -n -i -e \"if ($. != $line) { print }\" \"$cfg.local\"\n#       done\n#     fi\n#   fi\n# }\n#\n# _apply_configuration() {\n#   window_active=\"$(tmux display -p '#{window_active}' 2>/dev/null || true)\"\n#   if [ -z \"$window_active\" ]; then\n#     if [ \"$_tmux_version\" -lt 2600 ]; then\n#       tmux run -b 'tmux set display-time 3000 \\; display \"This configuration requires tmux 2.6+\" \\; set -u display-time \\; run \"sleep 3\" \\; kill-server'\n#       return\n#     fi\n#     if [ \"$_tmux_version\" -ge 3200 ]; then\n#       for cmd in perl sed awk; do\n#         if ! command -v \"$cmd\" > /dev/null 2>&1; then\n#           tmux run -b \"tmux display -N -d 3000 'This configuration requires $cmd' \\; run 'sleep 3' \\; kill-server\"\n#           return\n#         fi\n#       done\n#     else\n#       for cmd in perl sed awk; do\n#         if ! command -v \"$cmd\" > /dev/null 2>&1; then\n#           tmux run -b \"tmux set display-time 3000 \\; display 'This configuration requires $cmd' \\; set -u display-time \\; run 'sleep 3' \\; kill-server\"\n#           return\n#         fi\n#       done\n#     fi\n#   fi\n#\n#   case \"$_uname_s\" in\n#     *CYGWIN*|*MSYS*)\n#       # prevent Cygwin and MSYS2 from cd-ing into home directory when evaluating /etc/profile\n#       tmux setenv -g CHERE_INVOKING 1\n#       ;;\n#   esac\n#\n#   _apply_tmux_256color\n#   _apply_24b&\n#   _apply_theme&\n#   _apply_bindings&\n#   wait\n#\n#   _apply_plugins\n#   _apply_important\n#\n#   # shellcheck disable=SC2046\n#   tmux setenv -gu tmux_conf_dummy $(printenv | grep -E -o '^tmux_conf_[^=]+' | awk '{printf \"; setenv -gu %s\", $0}')\n# }\n#\n# _urlview() {\n#   pane_id=\"$1\"; shift\n#   tmux capture-pane -J -S - -E - -b \"urlview-$pane_id\" -t \"$pane_id\"\n#   tmux split-window \"'$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} show-buffer -b 'urlview-$pane_id' | urlview || true; '$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} delete-buffer -b 'urlview-$pane_id'\"\n# }\n#\n# _urlscan() {\n#   pane_id=\"$1\"; shift\n#   tmux capture-pane -J -S - -E - -b \"urlscan-$pane_id\" -t \"$pane_id\"\n#   tmux split-window \"'$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} show-buffer -b 'urlscan-$pane_id' | urlscan $* || true; '$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} delete-buffer -b 'urlscan-$pane_id'\"\n# }\n#\n# _fpp() {\n#   tmux capture-pane -J -S - -E - -b \"fpp-$1\" -t \"$1\"\n#   tmux split-window -c \"$2\" \"'$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} show-buffer -b 'fpp-$1' | fpp || true; '$TMUX_PROGRAM' ${TMUX_SOCKET:+-S \"$TMUX_SOCKET\"} delete-buffer -b 'fpp-$1'\"\n# }\n#\n# \"$@\"\n"
        },
        {
          "name": ".tmux.conf.local",
          "type": "blob",
          "size": 18.4111328125,
          "content": "# : << EOF\n# Oh my tmux!\n# 💛🩷💙🖤❤️🤍\n# https://github.com/gpakosz/.tmux\n# (‑●‑●)> dual licensed under the WTFPL v2 license and the MIT license,\n#         without any warranty.\n#         Copyright 2012— Gregory Pakosz (@gpakosz).\n\n\n# -- bindings ------------------------------------------------------------------\n\n# preserve tmux stock bindings,\n# while adding bindings that don't conflict with these stock bindings\n# /!\\ this disables some of Oh my tmux! bindings described in README.md\n#   - true\n#   - false (default)\ntmux_conf_preserve_stock_bindings=false\n\n\n# -- session creation ----------------------------------------------------------\n\n# prompt for session name when creating a new session, possible values are:\n#   - true\n#   - false (default)\n#   - disabled (do not modify new-session bindings)\ntmux_conf_new_session_prompt=false\n\n# new session retains current path, possible values are:\n#   - true\n#   - false (default)\n#   - disabled (do not modify new-session bindings)\ntmux_conf_new_session_retain_current_path=false\n\n\n# -- windows & pane creation ---------------------------------------------------\n\n# new window retains current path, possible values are:\n#   - true\n#   - false (default)\n#   - disabled (do not modify new-window bindings)\ntmux_conf_new_window_retain_current_path=false\n\n# new window tries to reconnect ssh sessions, possible values are:\n#   - true\n#   - false (default)\n#   - disabled (do not modify new-window bindings)\ntmux_conf_new_window_reconnect_ssh=false\n\n# new pane retains current path, possible values are:\n#   - true (default)\n#   - false\n#   - disabled (do not modify split-window bindings)\ntmux_conf_new_pane_retain_current_path=true\n\n# new pane tries to reconnect ssh sessions, possible values are:\n#   - true\n#   - false (default)\n#   - disabled (do not modify split-window bindings)\ntmux_conf_new_pane_reconnect_ssh=false\n\n\n# -- display -------------------------------------------------------------------\n\n# RGB 24-bit colour support, possible values are:\n#   - true\n#   - false\n#   - auto (default)\n#\n# automatic detection relies on the COLORTERM environment variable being defined\n# to 'truecolor' or '24bit' or '$ tput colors' answering '16777216'\n# see https://github.com/termstandard/colors\ntmux_conf_24b_colour=auto\n\n\n# -- theming -------------------------------------------------------------------\n\n# enable or disable theming:\n#   - enabled (default)\n#   - disabled\n# when disabled, all tmux_conf_theme_xxx variables are ignored except:\n#   - tmux_conf_theme_pairing\n#   - tmux_conf_theme_prefix\n#   - tmux_conf_theme_mouse\n#   - tmux_conf_theme_root\n#   - tmux_conf_theme_synchronized\ntmux_conf_theme=enabled\n\n# default theme\ntmux_conf_theme_colour_1=\"#080808\"    # dark gray\ntmux_conf_theme_colour_2=\"#303030\"    # gray\ntmux_conf_theme_colour_3=\"#8a8a8a\"    # light gray\ntmux_conf_theme_colour_4=\"#00afff\"    # light blue\ntmux_conf_theme_colour_5=\"#ffff00\"    # yellow\ntmux_conf_theme_colour_6=\"#080808\"    # dark gray\ntmux_conf_theme_colour_7=\"#e4e4e4\"    # white\ntmux_conf_theme_colour_8=\"#080808\"    # dark gray\ntmux_conf_theme_colour_9=\"#ffff00\"    # yellow\ntmux_conf_theme_colour_10=\"#ff00af\"   # pink\ntmux_conf_theme_colour_11=\"#5fff00\"   # green\ntmux_conf_theme_colour_12=\"#8a8a8a\"   # light gray\ntmux_conf_theme_colour_13=\"#e4e4e4\"   # white\ntmux_conf_theme_colour_14=\"#080808\"   # dark gray\ntmux_conf_theme_colour_15=\"#080808\"   # dark gray\ntmux_conf_theme_colour_16=\"#d70000\"   # red\ntmux_conf_theme_colour_17=\"#e4e4e4\"   # white\n\n# default theme (ansi)\n#tmux_conf_theme_colour_1=\"colour0\"\n#tmux_conf_theme_colour_2=\"colour8\"\n#tmux_conf_theme_colour_3=\"colour8\"\n#tmux_conf_theme_colour_4=\"colour14\"\n#tmux_conf_theme_colour_5=\"colour11\"\n#tmux_conf_theme_colour_6=\"colour0\"\n#tmux_conf_theme_colour_7=\"colour15\"\n#tmux_conf_theme_colour_8=\"colour0\"\n#tmux_conf_theme_colour_9=\"colour11\"\n#tmux_conf_theme_colour_10=\"colour13\"\n#tmux_conf_theme_colour_11=\"colour10\"\n#tmux_conf_theme_colour_12=\"colour8\"\n#tmux_conf_theme_colour_13=\"colour15\"\n#tmux_conf_theme_colour_14=\"colour0\"\n#tmux_conf_theme_colour_15=\"colour0\"\n#tmux_conf_theme_colour_16=\"colour1\"\n#tmux_conf_theme_colour_17=\"colour15\"\n\n# window style\ntmux_conf_theme_window_fg=\"default\"\ntmux_conf_theme_window_bg=\"default\"\n\n# highlight focused pane, possible values are:\n#   - true\n#   - false (default)\ntmux_conf_theme_highlight_focused_pane=false\n\n# focused pane colours:\ntmux_conf_theme_focused_pane_bg=\"$tmux_conf_theme_colour_2\"\n\n# pane border style, possible values are:\n#   - thin (default)\n#   - fat\ntmux_conf_theme_pane_border_style=thin\n\n# pane borders colours:\ntmux_conf_theme_pane_border=\"$tmux_conf_theme_colour_2\"\ntmux_conf_theme_pane_active_border=\"$tmux_conf_theme_colour_4\"\n%if #{>=:#{version},3.2}\ntmux_conf_theme_pane_active_border=\"#{?pane_in_mode,$tmux_conf_theme_colour_9,#{?synchronize-panes,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_4}}\"\n%endif\n\n# pane indicator colours (when you hit <prefix> + q)\ntmux_conf_theme_pane_indicator=\"$tmux_conf_theme_colour_4\"\ntmux_conf_theme_pane_active_indicator=\"$tmux_conf_theme_colour_4\"\n\n# status line style\ntmux_conf_theme_message_fg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_message_bg=\"$tmux_conf_theme_colour_5\"\ntmux_conf_theme_message_attr=\"bold\"\n\n# status line command style (<prefix> : Escape)\ntmux_conf_theme_message_command_fg=\"$tmux_conf_theme_colour_5\"\ntmux_conf_theme_message_command_bg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_message_command_attr=\"bold\"\n\n# window modes style\ntmux_conf_theme_mode_fg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_mode_bg=\"$tmux_conf_theme_colour_5\"\ntmux_conf_theme_mode_attr=\"bold\"\n\n# status line style\ntmux_conf_theme_status_fg=\"$tmux_conf_theme_colour_3\"\ntmux_conf_theme_status_bg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_status_attr=\"none\"\n\n# terminal title\n#   - built-in variables are:\n#     - #{circled_window_index}\n#     - #{circled_session_name}\n#     - #{hostname}\n#     - #{hostname_ssh}\n#     - #{hostname_full}\n#     - #{hostname_full_ssh}\n#     - #{username}\n#     - #{username_ssh}\ntmux_conf_theme_terminal_title=\"#h ❐ #S ● #I #W\"\n\n# window status style\n#   - built-in variables are:\n#     - #{circled_window_index}\n#     - #{circled_session_name}\n#     - #{hostname}\n#     - #{hostname_ssh}\n#     - #{hostname_full}\n#     - #{hostname_full_ssh}\n#     - #{username}\n#     - #{username_ssh}\ntmux_conf_theme_window_status_fg=\"$tmux_conf_theme_colour_3\"\ntmux_conf_theme_window_status_bg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_window_status_attr=\"none\"\ntmux_conf_theme_window_status_format=\"#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}\"\n#tmux_conf_theme_window_status_format=\"#{circled_window_index} #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}\"\n#tmux_conf_theme_window_status_format=\"#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,🔔,}#{?window_zoomed_flag,🔍,}\"\n\n# window current status style\n#   - built-in variables are:\n#     - #{circled_window_index}\n#     - #{circled_session_name}\n#     - #{hostname}\n#     - #{hostname_ssh}\n#     - #{hostname_full}\n#     - #{hostname_full_ssh}\n#     - #{username}\n#     - #{username_ssh}\ntmux_conf_theme_window_status_current_fg=\"$tmux_conf_theme_colour_1\"\ntmux_conf_theme_window_status_current_bg=\"$tmux_conf_theme_colour_4\"\ntmux_conf_theme_window_status_current_attr=\"bold\"\ntmux_conf_theme_window_status_current_format=\"#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}\"\n#tmux_conf_theme_window_status_current_format=\"#{circled_window_index} #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,!,}#{?window_zoomed_flag,Z,}\"\n#tmux_conf_theme_window_status_current_format=\"#I #W#{?#{||:#{window_bell_flag},#{window_zoomed_flag}}, ,}#{?window_bell_flag,🔔,}#{?window_zoomed_flag,🔍,}\"\n\n# window activity status style\ntmux_conf_theme_window_status_activity_fg=\"default\"\ntmux_conf_theme_window_status_activity_bg=\"default\"\ntmux_conf_theme_window_status_activity_attr=\"underscore\"\n\n# window bell status style\ntmux_conf_theme_window_status_bell_fg=\"$tmux_conf_theme_colour_5\"\ntmux_conf_theme_window_status_bell_bg=\"default\"\ntmux_conf_theme_window_status_bell_attr=\"blink,bold\"\n\n# window last status style\ntmux_conf_theme_window_status_last_fg=\"$tmux_conf_theme_colour_4\"\ntmux_conf_theme_window_status_last_bg=\"$tmux_conf_theme_colour_2\"\ntmux_conf_theme_window_status_last_attr=\"none\"\n\n# status left/right sections separators\ntmux_conf_theme_left_separator_main=\"\"\ntmux_conf_theme_left_separator_sub=\"|\"\ntmux_conf_theme_right_separator_main=\"\"\ntmux_conf_theme_right_separator_sub=\"|\"\n#tmux_conf_theme_left_separator_main='\\uE0B0'  # /!\\ you don't need to install Powerline\n#tmux_conf_theme_left_separator_sub='\\uE0B1'   #   you only need fonts patched with\n#tmux_conf_theme_right_separator_main='\\uE0B2' #   Powerline symbols or the standalone\n#tmux_conf_theme_right_separator_sub='\\uE0B3'  #   PowerlineSymbols.otf font, see README.md\n\n# status left/right content:\n#   - separate main sections with \"|\"\n#   - separate subsections with \",\"\n#   - built-in variables are:\n#     - #{battery_bar}\n#     - #{battery_hbar}\n#     - #{battery_percentage}\n#     - #{battery_status}\n#     - #{battery_vbar}\n#     - #{circled_session_name}\n#     - #{hostname_ssh}\n#     - #{hostname}\n#     - #{hostname_full}\n#     - #{hostname_full_ssh}\n#     - #{loadavg}\n#     - #{mouse}\n#     - #{pairing}\n#     - #{prefix}\n#     - #{root}\n#     - #{synchronized}\n#     - #{uptime_y}\n#     - #{uptime_d} (modulo 365 when #{uptime_y} is used)\n#     - #{uptime_h}\n#     - #{uptime_m}\n#     - #{uptime_s}\n#     - #{username}\n#     - #{username_ssh}\ntmux_conf_theme_status_left=\" ❐ #S | ↑#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} \"\n#tmux_conf_theme_status_left=\" ❐ #S | ↑#{?uptime_y, #{uptime_y}y,}#{?uptime_d, #{uptime_d}d,}#{?uptime_h, #{uptime_h}h,}#{?uptime_m, #{uptime_m}m,} | #{pretty_pane_current_path} \"\ntmux_conf_theme_status_right=\" #{prefix}#{mouse}#{pairing}#{synchronized}#{?battery_status,#{battery_status},}#{?battery_bar, #{battery_bar},}#{?battery_percentage, #{battery_percentage},} , %R , %d %b | #{username}#{root} | #{hostname} \"\n\n# status left style\ntmux_conf_theme_status_left_fg=\"$tmux_conf_theme_colour_6,$tmux_conf_theme_colour_7,$tmux_conf_theme_colour_8\"\ntmux_conf_theme_status_left_bg=\"$tmux_conf_theme_colour_9,$tmux_conf_theme_colour_10,$tmux_conf_theme_colour_11\"\ntmux_conf_theme_status_left_attr=\"bold,none,none\"\n\n# status right style\ntmux_conf_theme_status_right_fg=\"$tmux_conf_theme_colour_12,$tmux_conf_theme_colour_13,$tmux_conf_theme_colour_14\"\ntmux_conf_theme_status_right_bg=\"$tmux_conf_theme_colour_15,$tmux_conf_theme_colour_16,$tmux_conf_theme_colour_17\"\ntmux_conf_theme_status_right_attr=\"none,none,bold\"\n\n# pairing indicator\ntmux_conf_theme_pairing=\"⚇\"                 # U+2687\ntmux_conf_theme_pairing_fg=\"none\"\ntmux_conf_theme_pairing_bg=\"none\"\ntmux_conf_theme_pairing_attr=\"none\"\n\n# prefix indicator\ntmux_conf_theme_prefix=\"⌨\"                  # U+2328\ntmux_conf_theme_prefix_fg=\"none\"\ntmux_conf_theme_prefix_bg=\"none\"\ntmux_conf_theme_prefix_attr=\"none\"\n\n# mouse indicator\ntmux_conf_theme_mouse=\"↗\"                   # U+2197\ntmux_conf_theme_mouse_fg=\"none\"\ntmux_conf_theme_mouse_bg=\"none\"\ntmux_conf_theme_mouse_attr=\"none\"\n\n# root indicator\ntmux_conf_theme_root=\"!\"\ntmux_conf_theme_root_fg=\"none\"\ntmux_conf_theme_root_bg=\"none\"\ntmux_conf_theme_root_attr=\"bold,blink\"\n\n# synchronized indicator\ntmux_conf_theme_synchronized=\"⚏\"            # U+268F\ntmux_conf_theme_synchronized_fg=\"none\"\ntmux_conf_theme_synchronized_bg=\"none\"\ntmux_conf_theme_synchronized_attr=\"none\"\n\n# battery bar symbols\ntmux_conf_battery_bar_symbol_full=\"◼\"\ntmux_conf_battery_bar_symbol_empty=\"◻\"\n#tmux_conf_battery_bar_symbol_full=\"♥\"\n#tmux_conf_battery_bar_symbol_empty=\"·\"\n\n# battery bar length (in number of symbols), possible values are:\n#   - auto\n#   - a number, e.g. 5\ntmux_conf_battery_bar_length=\"auto\"\n\n# battery bar palette, possible values are:\n#   - gradient (default)\n#   - heat\n#   - \"colour_full_fg,colour_empty_fg,colour_bg\"\n#   - gradient(colour_fg_1,colour_fg_2,...,colour_fg_n)\ntmux_conf_battery_bar_palette=\"gradient\"\n#tmux_conf_battery_bar_palette=\"#d70000,#e4e4e4,#000000\"   # red, white, black\n#tmux_conf_battery_bar_palette=\"gradient(#00afff,#47a2ff,#7c91ff,#ac7afb,#d65be2,#e163df,#eb6cdd,#f475db,#ec9ff1,#eac3fe,#efe2ff,#ffffff)\"\n\n# battery hbar palette, possible values are:\n#   - gradient (default)\n#   - heat\n#   - \"colour_low,colour_half,colour_full\"\n#   - gradient(colour_fg_1,colour_fg_2,...,colour_fg_n)\ntmux_conf_battery_hbar_palette=\"gradient\"\n#tmux_conf_battery_hbar_palette=\"#d70000,#ff5f00,#5fff00\"  # red, orange, green\n#tmux_conf_battery_hbar_palette=\"gradient(#00afff,#47a2ff,#7c91ff,#ac7afb,#d65be2,#e163df,#eb6cdd,#f475db,#ec9ff1,#eac3fe,#efe2ff,#ffffff)\"\n\n# battery vbar palette, possible values are:\n#   - gradient (default)\n#   - heat\n#   - \"colour_low,colour_half,colour_full\"\n#   - gradient(colour_fg_1,colour_fg_2,...,colour_fg_n)\ntmux_conf_battery_vbar_palette=\"gradient\"\n#tmux_conf_battery_vbar_palette=\"#d70000,#ff5f00,#5fff00\"  # red, orange, green\n#tmux_conf_battery_vbar_palette=\"gradient(#00afff,#47a2ff,#7c91ff,#ac7afb,#d65be2,#e163df,#eb6cdd,#f475db,#ec9ff1,#eac3fe,#efe2ff,#ffffff)\"\n\n# symbols used to indicate whether battery is charging or discharging\ntmux_conf_battery_status_charging=\"↑\"       # U+2191\ntmux_conf_battery_status_discharging=\"↓\"    # U+2193\n#tmux_conf_battery_status_charging=\"🔌\"     # U+1F50C\n#tmux_conf_battery_status_discharging=\"🔋\"  # U+1F50B\n\n# clock style (when you hit <prefix> + t)\n# you may want to use %I:%M %p in place of %R in tmux_conf_theme_status_right\ntmux_conf_theme_clock_colour=\"$tmux_conf_theme_colour_4\"\ntmux_conf_theme_clock_style=\"24\"\n\n\n# -- clipboard -----------------------------------------------------------------\n\n# in copy mode, copying selection also copies to the OS clipboard\n#   - true\n#   - false (default)\n#   - disabled\n# on Linux, this requires xsel, xclip or wl-copy\ntmux_conf_copy_to_os_clipboard=false\n\n\n# -- urlscan -------------------------------------------------------------------\n\n# options passed to urlscan\ntmux_conf_urlscan_options=\"--compact --dedupe\"\n\n\n# -- user customizations -------------------------------------------------------\n\n# this is the place to override or undo settings\n\n# increase history size\n#set -g history-limit 10000\n\n# start with mouse mode enabled\n#set -g mouse on\n\n# force Vi mode\n#   really you should export VISUAL or EDITOR environment variable, see manual\n#set -g status-keys vi\n#set -g mode-keys vi\n\n# replace C-b by C-a instead of using both prefixes\n# set -gu prefix2\n# unbind C-a\n# unbind C-b\n# set -g prefix C-a\n# bind C-a send-prefix\n\n# if you don't want Oh my tmux! to alter a binding or a setting, use #!important\n# bind c new-window -c '#{pane_current_path}' #!important\n\n# move status line to top\n#set -g status-position top\n\n\n# -- tpm -----------------------------------------------------------------------\n\n# while I don't use tpm myself, many people requested official support so here\n# is a seamless integration that automatically installs plugins in parallel\n\n# whenever a plugin introduces a variable to be used in 'status-left' or\n# 'status-right', you can use it in 'tmux_conf_theme_status_left' and\n# 'tmux_conf_theme_status_right' variables.\n\n# by default, launching tmux will update tpm and all plugins\n#   - true (default)\n#   - false\ntmux_conf_update_plugins_on_launch=true\n\n# by default, reloading the configuration will update tpm and all plugins\n#   - true (default)\n#   - false\ntmux_conf_update_plugins_on_reload=true\n\n# by default, reloading the configuration will uninstall tpm and plugins when no\n# plugins are enabled\n#   - true (default)\n#   - false\ntmux_conf_uninstall_plugins_on_reload=true\n\n# /!\\ the tpm bindings differ slightly from upstream:\n#   - installing plugins: <prefix> + I\n#   - uninstalling plugins: <prefix> + Alt + u\n#   - updating plugins: <prefix> + u\n\n# /!\\ do not add set -g @plugin 'tmux-plugins/tpm'\n# /!\\ do not add run '~/.tmux/plugins/tpm/tpm'\n\n# to enable a plugin, use the 'set -g @plugin' syntax:\n# visit https://github.com/tmux-plugins for available plugins\n#set -g @plugin 'tmux-plugins/tmux-copycat'\n#set -g @plugin 'tmux-plugins/tmux-cpu'\n#set -g @plugin 'tmux-plugins/tmux-resurrect'\n#set -g @plugin 'tmux-plugins/tmux-continuum'\n#set -g @continuum-restore 'on'\n\n\n# -- custom variables ----------------------------------------------------------\n\n# to define a custom #{foo} variable, define a POSIX shell function between the\n# '# EOF' and the '# \"$@\"' lines. Please note that the opening brace { character\n# must be on the same line as the function name otherwise the parse won't detect\n# it.\n#\n# then, use #{foo} in e.g. the 'tmux_conf_theme_status_left' or the\n# 'tmux_conf_theme_status_right' variables.\n\n# ------------------------------------------------------------------------------\n\n# # /!\\ do not remove the following line\n# EOF\n#\n# # /!\\ do not \"uncomment\" the functions: the leading \"# \" characters are needed\n#\n# # usage: #{weather}\n# weather() {                                         # see https://github.com/chubin/wttr.in#one-line-output\n#   curl -f -s -m 2 'wttr.in?format=3' || printf '\\n' # /!\\ make sure curl is installed\n#   sleep 900                                         # sleep for 15 minutes, throttle network requests whatever the value of status-interval\n# }\n#\n# # usage: #{online}\n# online() {\n#   ping -c 1 1.1.1.1 >/dev/null 2>&1 && printf '✔' || printf '✘'\n# }\n#\n# # usage: #{wan_ip_v4}\n# wan_ip_v4() {\n#   curl -f -s -m 2 -4 ifconfig.me\n#   sleep 300                                         # sleep for 5 minutes, throttle network requests whatever the value of status-interval\n# }\n#\n# # usage: #{wan_ip_v6}\n# wan_ip_v6() {\n#   curl -f -s -m 2 -6 ifconfig.me\n#   sleep 300                                         # sleep for 5 minutes, throttle network requests whatever the value of status-interval\n# }\n#\n# # usage: #{github_stars}, #{github_stars tmux/tmux}, ...\n# github_stars() {\n#   repository=${1##*https://github.com/}\n#   repository=${repository%% *}\n#   repository=${repository%%.git}\n#   url=\"https://api.github.com/repos/${repository:-gpakosz/.tmux}\"\n#   curl -s \"$url\" | perl -MJSON::PP=decode_json -CO -0777 -E '$response = decode_json(readline *STDIN); say ($response->{stargazers_count})'\n#   sleep 300                                         # sleep for 5 minutes, throttle network requests whatever the value of status-interval\n# }\n#\n# \"$@\"\n# # /!\\ do not remove the previous line\n# #     do not write below this line\n"
        },
        {
          "name": "LICENSE.MIT",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright 2012— Gregory Pakosz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "LICENSE.WTFPLv2",
          "type": "blob",
          "size": 0.4677734375,
          "content": "        DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n                    Version 2, December 2004\n\n Copyright (C) 2004 Sam Hocevar <sam@hocevar.net>\n\n Everyone is permitted to copy and distribute verbatim or modified\n copies of this license document, and changing it is allowed as long\n as the name is changed.\n\n            DO WHAT THE FUCK YOU WANT TO PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. You just DO WHAT THE FUCK YOU WANT TO.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.685546875,
          "content": "<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\".logo/logomark+wordmark.svg\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\".logo/logomark+wordmark.svg\">\n    <img alt=\"Oh my tmux! logo and wordmark\" src=\".logo/logomark+wordmark.svg\">\n  </picture>\n</p>\n\n˗ˏˋ ★ ˎˊ˗ My self-contained, pretty and versatile tmux configuration, made with ❤️ ˗ˏˋ ★ ˎˊ˗\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif\">\n    <img alt=\"Oh my tmux! in action\" src=\"https://cloud.githubusercontent.com/assets/553208/19740585/85596a5a-9bbf-11e6-8aa1-7c8d9829c008.gif\">\n  </picture>\n</p>\n\nInstallation\n------------\n\nRequirements:\n\n  - tmux **`>= 2.6`** running on Linux, macOS, OpenBSD, Windows (WSL or Cygwin)\n  - awk, perl (with Time::HiRes support), grep, and sed\n  - Outside of tmux, the `TERM` environment variable must be set to\n    `xterm-256color`\n\n⚠️ Before installing, you may want to backup your existing configuration.\n\nYou can install Oh my tmux! at any of the following locations:\n- `~`\n- `$XDG_CONFIG_HOME/tmux`\n- `~/.config/tmux`\n\nInstalling in `~`:\n```\n$ cd\n$ git clone --single-branch https://github.com/gpakosz/.tmux.git\n$ ln -s -f .tmux/.tmux.conf\n$ cp .tmux/.tmux.conf.local .\n```\n\nInstalling in `$XDG_CONFIG_HOME/tmux`:\n```\n$ git clone --single-branch https://github.com/gpakosz/.tmux.git \"/path/to/oh-my-tmux\"\n$ mkdir -p \"$XDG_CONFIG_HOME/tmux\"\n$ ln -s \"/path/to/oh-my-tmux/.tmux.conf\" \"$XDG_CONFIG_HOME/tmux/tmux.conf\"\n$ cp \"/path/to/oh-my-tmux/.tmux.conf.local\" \"$XDG_CONFIG_HOME/tmux/tmux.conf.local\"\n```\n\nInstalling in `~/.config/tmux`:\n```\n$ git clone --single-branch https://github.com/gpakosz/.tmux.git \"/path/to/oh-my-tmux\"\n$ mkdir -p \"~/.config/tmux\"\n$ ln -s \"/path/to/oh-my-tmux/.tmux.conf\" \"~/.config/tmux/tmux.conf\"\n$ cp \"/path/to/oh-my-tmux/.tmux.conf.local\" \"~/.config/tmux/tmux.conf.local\"\n```\n⚠️ When installing `$XDG_CONFIG_HOME/tmux` or `~/.config/tmux`, the configuration\nfile names don't have a leading `.` character.\n\n🚨 **You should never alter the main `.tmux.conf` or `tmux.conf` file. If you do,\nyou're on your own. Instead, every customization should happen in your\n`.tmux.conf.local` or `tmux.conf.local` customization file copy.**\n\nIf you're a Vim user, setting the `EDITOR` environment variable to `vim` will\nenable and further customize the `vi-style` key bindings (see tmux manual).\n\nIf you're new to tmux, I recommend you to read the [tmux getting started\nguide][getting-started], as well as the [tmux 3: Productive Mouse-Free\nDevelopment][bhtmux3] book by [@bphogan].\n\nNow proceed to [adjust] your `.local` customization file copy.\n\n[getting-started]: https://github.com/tmux/tmux/wiki/Getting-Started\n[bhtmux3]: https://pragprog.com/titles/bhtmux3/tmux-3/\n[@bphogan]: https://bphogan.com/\n[adjust]: #configuration\n\nTroubleshooting\n---------------\n\n  - **I believe something's not quite right**\n\n    Please, try make sure no tmux client or server process is currently running.\n\n    Then launch tmux with:\n    ```\n    $ tmux -f /dev/null -L test\n    ```\n\n    Which launches a new tmux client/server pair without loading any\n    configuration.\n\n    If the issue is still reproducing, please reach out to the tmux project for\n    support.\n\n    Otherwise, please open an issue describing what doesn't work and I'll do my\n    best to address it.\n\n  - **I tried to used `set`, `bind` and `unbind` in my `.local` customization\n    file, but Oh my tmux! overwrites my preferences**\n\n    When that happens append `#!important` to the line:\n\n    ```\n    bind c new-window -c '#{pane_current_path}' #!important\n    ```\n\n    ```\n    set -g default-terminal \"screen-256color\" #!important\n    ```\n\n  - **Status line is broken and/or gets duplicated at the bottom of the screen**\n\n    This could happen on Linux when the distribution provides a version of glib\n    that received Unicode 9.0 upgrades (glib `>= 2.50.1`) while providing a\n    version of glibc that didn't (glibc `< 2.26`). You may also configure\n    `LC_CTYPE` to use an `UTF-8` locale. Typically VTE based terminal emulators\n    rely on glib's `g_unichar_iswide()` function while tmux relies on glibc's\n    `wcwidth()` function. When these two functions disagree, display gets messed\n    up.\n\n    This can also happen on macOS when using iTerm2 and \"Use Unicode version 9\n    character widths\" is enabled in `Preferences... > Profiles > Text`\n\n    For that reason, the sample `.local` customization file stopped using\n    Unicode characters for which width changed in between Unicode 8.0 and 9.0\n    standards, as well as Emojis.\n\n  - **I installed Powerline and/or (patched) fonts but I can't see the Powerline\n    symbols**\n\n    **🤯 Please realize that you don't need to install [Powerline].**\n\n    You only need fonts patched with Powerline symbols or the standalone\n    `PowerlineSymbols.otf` font.\n\n    Then make sure your `.local` customization file copy uses the [Powerline\n    code points] for the\n    `tmux_conf_theme_left_separator_main`,\n    `tmux_conf_theme_left_separator_sub`,\n    `tmux_conf_theme_right_separator_main`\n    and `tmux_conf_theme_right_separator_sub` variables.\n\n[Powerline]: https://github.com/Lokaltog/powerline\n[Powerline code points]: #enabling-the-powerline-look\n\nFeatures\n--------\n\n  - `C-a` acts as secondary prefix, while keeping default `C-b` prefix\n  - Visual theme inspired by [Powerline][]\n  - [Maximize any pane to a new window with `<prefix> +`][maximize-pane]\n  - Mouse mode toggle with `<prefix> m`\n  - Laptop battery status line information\n  - Uptime status line information\n  - Optional highlight of focused pane\n  - Configurable new sessions, windows and panes behavior (to optionally retain\n    the current path)\n  - SSH/Mosh aware username and hostname status line information\n  - SSH/Mosh aware pane splitting (with automatic reconnection to the remote\n    server)\n  - Copy to OS clipboard (needs `xsel`, `xclip`, or `wl-copy` on Linux)\n  - Support for 4-digit hexadecimal Unicode characters\n  - [PathPicker][] integration, if available\n  - [Urlscan][] (preferred) or [Urlview][] integration, if available\n\n[maximize-pane]: http://pempek.net/articles/2013/04/14/maximizing-tmux-pane-new-window/\n[PathPicker]: https://facebook.github.io/PathPicker/\n[Urlview]: https://packages.debian.org/stable/misc/urlview\n[Urlscan]: https://github.com/firecat53/urlscan\n\nThe \"Maximize any pane to a new window with `<prefix> +`\" feature is different\nfrom the builtin `resize-pane -Z` command, as it allows you to further split a maximized\npane. It's also more flexible by allowing you to maximize a pane to a new\nwindow, then change window, then go back and the pane is still in maximized\nstate in its own window. You can then minimize a pane by using `<prefix> +`\neither from the source window or the maximized window.\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/9890858/ee3c0ca6-5c02-11e5-890e-05d825a46c92.gif\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/9890858/ee3c0ca6-5c02-11e5-890e-05d825a46c92.gif\">\n    <img alt=\"Maximizing a pane\" src=\"https://cloud.githubusercontent.com/assets/553208/9890858/ee3c0ca6-5c02-11e5-890e-05d825a46c92.gif\">\n  </picture>\n</p>\n\nMouse mode allows you to set the active window, set the active pane, resize\npanes and automatically switches to copy-mode to select text.\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/9890797/8dffe542-5c02-11e5-9c06-a25b452e6fcc.gif\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://cloud.githubusercontent.com/assets/553208/9890797/8dffe542-5c02-11e5-9c06-a25b452e6fcc.gif\">\n    <img alt=\"Mouse mode\" src=\"https://cloud.githubusercontent.com/assets/553208/9890797/8dffe542-5c02-11e5-9c06-a25b452e6fcc.gif\">\n  </picture>\n</p>\n\nBindings\n--------\n\ntmux may be controlled from an attached client by using a key combination of a\nprefix key, followed by a command key. This configuration uses `C-a` as a\nsecondary prefix while keeping `C-b` as the default prefix. In the following\nlist of key bindings:\n  - `<prefix>` means you have to either hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd>\n  - `<prefix> c` means you have to hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd> followed by <kbd>c</kbd>\n  - `<prefix> C-c` means you have to hit <kbd>Ctrl</kbd> + <kbd>a</kbd> or <kbd>Ctrl</kbd> + <kbd>b</kbd> followed by <kbd>Ctrl</kbd> + <kbd>c</kbd>\n\nThis configuration uses the following bindings:\n\n  - `<prefix> e` opens the `.local` customization file copy with the editor\n    defined by the `EDITOR` environment variable (defaults to `vim` when empty)\n  - `<prefix> r` reloads the configuration\n  - `C-l` clears both the screen **and** the tmux history\n\n  - `<prefix> C-c` creates a new session\n  - `<prefix> C-f` lets you switch to another session by name\n\n  - `<prefix> C-h` and `<prefix> C-l` let you navigate windows (default\n    `<prefix> n` is unbound and `<prefix> p` is repurposed)\n  - `<prefix> Tab` brings you to the last active window\n\n  - `<prefix> -` splits the current pane vertically\n  - `<prefix> _` splits the current pane horizontally\n  - `<prefix> h`, `<prefix> j`, `<prefix> k` and `<prefix> l` let you navigate\n    panes ala Vim\n  - `<prefix> H`, `<prefix> J`, `<prefix> K`, `<prefix> L` let you resize panes\n  - `<prefix> <` and `<prefix> >` let you swap panes\n  - `<prefix> +` maximizes the current pane to a new window\n\n  - `<prefix> m` toggles mouse mode on or off\n\n  - `<prefix> U` launches Urlscan (preferred) or Urlview, if available\n  - `<prefix> F` launches Facebook PathPicker, if available\n\n  - `<prefix> Enter` enters copy-mode\n  - `<prefix> b` lists the paste-buffers\n  - `<prefix> p` pastes from the top paste-buffer\n  - `<prefix> P` lets you choose the paste-buffer to paste from\n\nAdditionally, `copy-mode-vi` matches [my own Vim configuration]\n\n[my own Vim configuration]: https://github.com/gpakosz/.vim.git\n\nBindings for `copy-mode-vi`:\n\n  - `v` begins selection / visual mode\n  - `C-v` toggles between blockwise visual mode and visual mode\n  - `H` jumps to the start of line\n  - `L` jumps to the end of line\n  - `y` copies the selection to the top paste-buffer\n  - `Escape` cancels the current operation\n\nIt's also possible to preserve the tmux stock bindings by setting the\n`tmux_conf_preserve_stock_bindings` variable to `true` in your `.local`\ncustomization file copy.\n\nConfiguration\n-------------\n\nWhile this configuration tries to bring sane default settings, you may want to\ncustomize it further to your needs.\n\n🚨 Again, you should never alter the main `.tmux.conf` or `tmux.conf` file.\nIf you do, you're on your own.\n\nPlease refer to the sample `.local` customization file to know more about the\nvariables that allow you to alter different behaviors. Upon successful\ninstallation, pressing `<prefix> e` will open your `.local` customization file\ncopy with the editor defined by the `EDITOR` environment variable (defaults to\n`vim` when empty).\n\n### Enabling the Powerline look\n\nPowerline originated as a status-line plugin for Vim. Its popular eye-catching\nlook is based on the use of special symbols:\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/user-attachments/assets/55afd317-150b-42f0-9ef3-fa619be7b160\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/user-attachments/assets/55afd317-150b-42f0-9ef3-fa619be7b160\">\n    <img alt=\"Powerline symbols\" src=\"https://github.com/user-attachments/assets/55afd317-150b-42f0-9ef3-fa619be7b160\">\n  </picture>\n</p>\n\nTo make use of these symbols, there are several options:\n\n  - Use a font that already bundles those: this is the case of the [Source Code\n    Pro][source code pro] font\n  - Use a [pre-patched font][powerline patched fonts]\n  - Use your preferred font along with the standalone [Powerline font][powerline\n    font] (that only contains the Powerline symbols): [this highly depends on\n    your operating system and your terminal emulator][terminal support], for\n    instance here's a screenshot of iTerm2 configured to use\n    `PowerlineSymbols.otf` for non ASCII symbols:\n    <p align=\"center\">\n      <picture>\n        <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/553208/62243890-8232f500-b3de-11e9-9b8c-51a5d38bdaa8.png\">\n        <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/553208/62243890-8232f500-b3de-11e9-9b8c-51a5d38bdaa8.png\">\n        <img alt=\"iTerm2 + Powerline font\" src=\"https://user-images.githubusercontent.com/553208/62243890-8232f500-b3de-11e9-9b8c-51a5d38bdaa8.png\">\n      </picture>\n    </p>\n\n[source code pro]: https://github.com/adobe-fonts/source-code-pro/releases/latest\n[powerline patched fonts]: https://github.com/powerline/fonts\n[powerline font]: https://github.com/powerline/powerline/raw/develop/font/PowerlineSymbols.otf\n[terminal support]: http://powerline.readthedocs.io/en/master/usage.html#usage-terminal-emulators\n\nThen edit your `.local` customization file copy (with `<prefix> e`) and adjust\nthe following variables:\n\n```\ntmux_conf_theme_left_separator_main='\\uE0B0'\ntmux_conf_theme_left_separator_sub='\\uE0B1'\ntmux_conf_theme_right_separator_main='\\uE0B2'\ntmux_conf_theme_right_separator_sub='\\uE0B3'\n```\n\nThe [Powerline manual] contains further details on how to install fonts\ncontaining the Powerline symbols.\n\n[Powerline manual]: http://powerline.readthedocs.org/en/latest/installation.html#fonts-installation\n\n### Configuring the status line\n\nEdit your `.local` customization file copy (`<prefix> e`) and adjust the\n`tmux_conf_theme_status_left` and `tmux_conf_theme_status_right` variables to\nyour liking.\n\nThis configuration supports the following builtin variables:\n\n  - `#{battery_bar}`: horizontal battery charge bar\n  - `#{battery_hbar}`: 1 character wide, horizontal battery charge bar\n  - `#{battery_vbar}`: 1 character wide, vertical battery charge bar\n  - `#{battery_percentage}`: battery percentage\n  - `#{battery_status}`: is battery charging or discharging?\n  - `#{circled_session_name}`: circled session number (from ⓪) to ⑳)\n  - `#{hostname}`: SSH/Mosh aware hostname information\n  - `#{hostname_ssh}`: SSH/Mosh aware hostname information, blank when not\n    connected to a remote server through SSH/Mosh\n  - `#{loadavg}`: load average\n  - `#{pairing}`: is the current session attached to more than one client?\n  - `#{pretty_pane_current_path}`: prettified `#{pane_current_path}` when its\n    length is too long\n  - `#{prefix}`: is prefix being depressed?\n  - `#{root}`: is the current user root?\n  - `#{synchronized}`: are the panes synchronized?\n  - `#{uptime_y}`: uptime years\n  - `#{uptime_d}`: uptime days, modulo 365 when `#{uptime_y}` is used\n  - `#{uptime_h}`: uptime hours\n  - `#{uptime_m}`: uptime minutes\n  - `#{uptime_s}`: uptime seconds\n  - `#{username}`: SSH/Mosh aware username information\n  - `#{username_ssh}`: SSH aware username information, blank when not connected\n    to a remote server through SSH/Mosh\n\nBeside the variables mentioned above, the `tmux_conf_theme_status_left` and\n`tmux_conf_theme_status_right` variables support the usual tmux syntax, e.g.\nusing `#()` to call an external command that inserts weather information\nprovided by [wttr.in]:\n```\ntmux_conf_theme_status_right='#{prefix}#{pairing}#{synchronized} #(curl -m 1 wttr.in?format=3 2>/dev/null; sleep 900) , %R , %d %b | #{username}#{root} | #{hostname} '\n```\nThe `sleep 900` call makes sure the network request is issued at most every 15\nminutes whatever the value of `status-interval`.\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://user-images.githubusercontent.com/553208/52175490-07797c00-27a5-11e9-9fb6-42eec4fe4188.png\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://user-images.githubusercontent.com/553208/52175490-07797c00-27a5-11e9-9fb6-42eec4fe4188.png\">\n    <img alt=\"Weather information from wttr.in\" src=\"https://user-images.githubusercontent.com/553208/52175490-07797c00-27a5-11e9-9fb6-42eec4fe4188.png\">\n  </picture>\n</p>\n\n[wttr.in]: https://github.com/chubin/wttr.in#one-line-output\n\n💡 You can also define your own custom variables by defining your own POSIX\nshell functions, see the sample `.local` customization file for instructions.\n\nFinally, remember that `tmux_conf_theme_status_left` and\n`tmux_conf_theme_status_right` end up being given to tmux as `status-left` and\n`status-right` which means they're passed through `strftime()`. As such, the `%`\ncharacter has a special meaning and needs to be escaped by doubling it, e.g.\n```\ntmux_conf_theme_status_right='#(echo foo %% bar)'\n```\nSee also `man 3 strftime`.\n\n### Using TPM plugins\n\nThis configuration comes with built-in [TPM] support:\n\n  - Use the `set -g @plugin ...` syntax to enable a plugin\n  - Whenever a plugin introduces a variable to be used in `status-left` or\n    `status-right`, you can use it in the `tmux_conf_theme_status_left` and\n    `tmux_conf_theme_status_right` variables, see instructions above 👆\n  - ⚠️ Do not add `set -g @plugin 'tmux-plugins/tpm'` to any configuration file\n  - ⛔️ Do not add `run '~/.tmux/plugins/tpm/tpm'` to any configuration file\n\n⚠️ The TPM bindings differ slightly from upstream:\n  - Installing plugins: `<prefix> + I`\n  - Uninstalling plugins: `<prefix> + Alt + u`\n  - Updating plugins: `<prefix> + u`\n\nSee the sample `.local` customization file for further instructions.\n\n[TPM]: https://github.com/tmux-plugins/tpm\n\n### Using Oh my tmux! on Windows\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://github.com/user-attachments/assets/7f84a687-fb4d-4817-a445-419e63ccfac5\">\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://github.com/user-attachments/assets/7f84a687-fb4d-4817-a445-419e63ccfac5\">\n    <img alt=\"Windows Terminal + WSL\" src=\"https://github.com/user-attachments/assets/7f84a687-fb4d-4817-a445-419e63ccfac5\">\n  </picture>\n</p>\n\n⚠️ I don't recommend running this configuration with [Cygwin] anymore. Forking\nunder Cygwin is extremely slow and this configuration issues a fair amount\n`run-shell` commands under the hood. As such, you will experience high CPU\nusage.\n\nInstead I recommend [Windows Subsystem for Linux][WSL] along with [Windows\nTerminal]. As an alternative, you may also consider using [Mintty as a terminal\nfor WSL][wsltty].\n\n[Cygwin]: https://www.cygwin.com\n[WSL]: https://learn.microsoft.com/en-us/windows/wsl\n[wsltty]: https://github.com/mintty/wsltty\n[Windows Terminal]: https://aka.ms/terminal\n"
        }
      ]
    }
  ]
}