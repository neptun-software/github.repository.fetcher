{
  "metadata": {
    "timestamp": 1736568934065,
    "page": 28,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "angristan/openvpn-install",
      "stars": 14030,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.041015625,
          "content": "[*.sh]\nindent_style = tab\nindent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 5.109375,
          "content": "# FAQ\n\n**Q:** The script has been updated since I installed OpenVPN. How do I update?\n\n**A:** You can't. Managing updates and new features from the script would require way too much work. Your only solution is to uninstall OpenVPN and reinstall with the updated script.\n\nYou can, of course, it's even recommended, update the `openvpn` package with your package manager.\n\n---\n\n**Q:** How do I check for DNS leaks?\n\n**A:** Go to [browserleaks.com](https://browserleaks.com/dns) or [ipleak.net](https://ipleak.net/) (both perform IPv4 and IPv6 check) with your browser. Your IP should not show up (test without and without the VPN). The DNS servers should be the ones you selected during the setup, not your IP address nor your ISP's DNS servers' addresses.\n\n---\n\n**Q:** How do I fix DNS leaks?\n\n**A:** On Windows 10 DNS leaks are blocked by default with the `block-outside-dns` option.\nOn Linux you need to add these lines to your `.ovpn` file based on your Distribution.\n\nDebian 9, 10 and Ubuntu 16.04, 18.04\n\n```\nscript-security 2\nup /etc/openvpn/update-resolv-conf\ndown /etc/openvpn/update-resolv-conf\n```\n\nCentos 6, 7\n\n```\nscript-security 2\nup /usr/share/doc/openvpn-2.4.8/contrib/pull-resolv-conf/client.up\ndown /usr/share/doc/openvpn-2.4.8/contrib/pull-resolv-conf/client.down\n```\n\nCentos 8, Fedora 30, 31\n\n```\nscript-security 2\nup /usr/share/doc/openvpn/contrib/pull-resolv-conf/client.up\ndown /usr/share/doc/openvpn/contrib/pull-resolv-conf/client.down\n```\n\nArch Linux\n\n```\nscript-security 2\nup /usr/share/openvpn/contrib/pull-resolv-conf/client.up\ndown /usr/share/openvpn/contrib/pull-resolv-conf/client.down\n```\n\n---\n\n**Q:** Can I use an OpenVPN 2.3 client?\n\n**A:** Yes. I really recommend using an up-to-date client, but if you really need it, choose the following options:\n\n- No compression or LZ0\n- RSA certificate\n- DH Key\n- AES CBC\n- tls-auth\n\nIf your client is <2.3.3, remove `tls-version-min 1.2` from your `/etc/openvpn/server.conf` and `.ovpn` files.\n\n---\n\n**Q:** IPv6 is not working on my Hetzner VM\n\n**A:** This an issue on their side. See <https://angristan.xyz/fix-ipv6-hetzner-cloud/>\n\n---\n\n**Q:** DNS is not working on my Linux client\n\n**A:** See \"How do I fix DNS leaks?\" question\n\n---\n\n**Q:** What syctl and iptables changes are made by the script?\n\n**A:** Iptables rules are saved at `/etc/iptables/add-openvpn-rules.sh` and `/etc/iptables/rm-openvpn-rules.sh`. They are managed by the service `/etc/systemd/system/iptables-openvpn.service`\n\nSysctl options are at `/etc/sysctl.d/20-openvpn.conf`\n\n---\n\n**Q:** How can I access other clients connected to the same OpenVPN server?\n\n**A:** Add `client-to-client` to your `server.conf`\n\n---\n\n**Q:** My router can't connect\n\n**A:**\n\n- `Options error: No closing quotation (\") in config.ovpn:46` :\n\n  type `yes` when asked to customize encryption settings and choose `tls-auth`\n\n- `Options error: Unrecognized option or missing parameter(s) in config.ovpn:36: tls-version-min (2.3.2)` :\n\n  see question \"Can I use an OpenVPN 2.3 client?\"\n\n---\n\n**Q:** How can I access computers the OpenVPN server's remote LAN?\n\n**A:** Add a route with the subnet of the remote network to `/etc/openvpn/server.conf` and restart openvpn. Example: `push \"route 192.168.1.0 255.255.255.0\"` if the server's LAN is `192.168.1.0/24`\n\n---\n\n**Q:** How can I add multiple users in one go?\n\n**A:** Here is a sample bash script to achieve this:\n\n```sh\nuserlist=(user1 user2 user3)\n\nfor i in ${userlist[@]};do\n   MENU_OPTION=1 CLIENT=$i PASS=1 ./openvpn-install.sh\ndone\n```\n\nFrom a list in a text file:\n\n```sh\nwhile read USER\n    do MENU_OPTION=\"1\" CLIENT=\"$USER\" PASS=\"1\" ./openvpn-install.sh\ndone < users.txt\n```\n\n---\n\n**Q:** How do I change the default `.ovpn` file created for future clients?\n\n**A:** You can edit the template out of which `.ovpn` files are created by editing `/etc/openvpn/client-template.txt`\n\n---\n\n**Q:** For my clients - I want to set my internal network to pass through the VPN and the rest to go through my internet?\n\n**A:** You would need to edit the `.ovpn` file. You can edit the template out of which those files are created by editing `/etc/openvpn/client-template.txt` file and adding\n\n```sh\nroute-nopull\nroute 10.0.0.0 255.0.0.0\n```\n\nSo for example - here it would route all traffic of `10.0.0.0/8` to the vpn. And the rest through the internet.\n\n---\n\n**Q:** I have enabled IPv6 and my VPN client gets an IPv6 address. Why do I reach the websites or other dual-stacked destionations via IPv4 only?\n\n**A:** This is because inside the tunnel you don't get a publicly routable IPv6 address, instead you get an ULA (Unlique Local Lan) address. Operating systems don't prefer this all the time. You can fix this in your operating system policies as it's unrelated to the VPN itself:\n\nWindows (commands needs to run cmd.exe as Administrator):\n\n```\nnetsh interface ipv6 add prefixpolicy fd00::/8 3 1\n```\n\nLinux:\n\nedit `/etc/gai.conf` and uncomment the following line and also change its value to `1`:\n\n```\nlabel fc00::/7      1\n```\n\nThis will not work properly unless you add you your VPN server `server.conf` one or two lines to push at least 1 (one) IPv6 DNS server. Most providers have IPv6 servers as well, add two more lines of `push \"dhcp-option DNS <IPv6>\"`\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0810546875,
          "content": "MIT License\n\nCopyright (c) 2013 Nyr\nCopyright (c) 2016 Stanislas Lange (angristan)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 16.6689453125,
          "content": "# openvpn-install\n\n![Test](https://github.com/angristan/openvpn-install/workflows/Test/badge.svg)\n![Lint](https://github.com/angristan/openvpn-install/workflows/Lint/badge.svg)\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/angristan)\n\nOpenVPN installer for Debian, Ubuntu, Fedora, CentOS, Arch Linux, Oracle Linux, Rocky Linux and AlmaLinux.\n\nThis script will let you setup your own secure VPN server in just a few seconds.\n\nYou can also check out [wireguard-install](https://github.com/angristan/wireguard-install), a simple installer for a simpler, safer, faster and more modern VPN protocol.\n\n## What is this?\n\nThis script is meant to be run on your own server, whether it's a VPS or a dedicated server, or even a computer at home.\n\nOnce set up, you will be able to generate client configuration files for every device you want to connect.\n\nEach client will be able to route its internet traffic through the server, fully encrypted.\n\n```mermaid\ngraph LR\n  A[Phone] --> VPN\n  B[Laptop] --> VPN\n  C[Computer] --> VPN\n\n  VPN[OpenVPN Server]\n\n  VPN -->|Encrypted Traffic| I[Internet]\n```\n\n## Usage\n\nFirst, get the script and make it executable:\n\n```bash\ncurl -O https://raw.githubusercontent.com/angristan/openvpn-install/master/openvpn-install.sh\nchmod +x openvpn-install.sh\n```\n\nThen run it:\n\n```sh\n./openvpn-install.sh\n```\n\nYou need to run the script as root and have the TUN module enabled.\n\nThe first time you run it, you'll have to follow the assistant and answer a few questions to setup your VPN server.\n\nWhen OpenVPN is installed, you can run the script again, and you will get the choice to:\n\n- Add a client\n- Remove a client\n- Uninstall OpenVPN\n\nIn your home directory, you will have `.ovpn` files. These are the client configuration files. Download them from your server and connect using your favorite OpenVPN client.\n\nIf you have any question, head to the [FAQ](#faq) first. And if you need help, you can open a [discussion](https://github.com/angristan/openvpn-install/discussions). Please search existing issues and dicussions first.\n\n### Headless install\n\nIt's also possible to run the script headless, e.g. without waiting for user input, in an automated manner.\n\nExample usage:\n\n```bash\nAUTO_INSTALL=y ./openvpn-install.sh\n\n# or\n\nexport AUTO_INSTALL=y\n./openvpn-install.sh\n```\n\nA default set of variables will then be set, by passing the need for user input.\n\nIf you want to customise your installation, you can export them or specify them on the same line, as shown above.\n\n- `APPROVE_INSTALL=y`\n- `APPROVE_IP=y`\n- `IPV6_SUPPORT=n`\n- `PORT_CHOICE=1`\n- `PROTOCOL_CHOICE=1`\n- `DNS=1`\n- `COMPRESSION_ENABLED=n`\n- `CUSTOMIZE_ENC=n`\n- `CLIENT=clientname`\n- `PASS=1`\n\nIf the server is behind NAT, you can specify its endpoint with the `ENDPOINT` variable. If the endpoint is the public IP address which it is behind, you can use `ENDPOINT=$(curl -4 ifconfig.co)` (the script will default to this). The endpoint can be an IPv4 or a domain.\n\nOther variables can be set depending on your choice (encryption, compression). You can search for them in the `installQuestions()` function of the script.\n\nPassword-protected clients are not supported by the headless installation method since user input is expected by Easy-RSA.\n\nThe headless install is more-or-less idempotent, in that it has been made safe to run multiple times with the same parameters, e.g. by a state provisioner like Ansible/Terraform/Salt/Chef/Puppet. It will only install and regenerate the Easy-RSA PKI if it doesn't already exist, and it will only install OpenVPN and other upstream dependencies if OpenVPN isn't already installed. It will recreate all local config and re-generate the client file on each headless run.\n\n### Headless User Addition\n\nIt's also possible to automate the addition of a new user. Here, the key is to provide the (string) value of the `MENU_OPTION` variable along with the remaining mandatory variables before invoking the script.\n\nThe following Bash script adds a new user `foo` to an existing OpenVPN configuration\n\n```bash\n#!/bin/bash\nexport MENU_OPTION=\"1\"\nexport CLIENT=\"foo\"\nexport PASS=\"1\"\n./openvpn-install.sh\n```\n\n## Features\n\n- Installs and configures a ready-to-use OpenVPN server\n- Iptables rules and forwarding managed in a seamless way\n- If needed, the script can cleanly remove OpenVPN, including configuration and iptables rules\n- Customisable encryption settings, enhanced default settings (see [Security and Encryption](#security-and-encryption) below)\n- OpenVPN 2.4 features, mainly encryption improvements (see [Security and Encryption](#security-and-encryption) below)\n- Variety of DNS resolvers to be pushed to the clients\n- Choice to use a self-hosted resolver with Unbound (supports already existing Unbound installations)\n- Choice between TCP and UDP\n- NATed IPv6 support\n- Compression disabled by default to prevent VORACLE. LZ4 (v1/v2) and LZ0 algorithms available otherwise.\n- Unprivileged mode: run as `nobody`/`nogroup`\n- Block DNS leaks on Windows 10\n- Randomised server certificate name\n- Choice to protect clients with a password (private key encryption)\n- Many other little things!\n\n## Compatibility\n\nThe script supports these Linux distributions:\n\n|                    | Support |\n| ------------------ | ------- |\n| AlmaLinux 8        | ✅       |\n| Amazon Linux 2     | ✅       |\n| Arch Linux         | ✅       |\n| CentOS 7           | ✅       |\n| CentOS Stream >= 8 | ✅ 🤖     |\n| Debian >= 10       | ✅ 🤖     |\n| Fedora >= 35       | ✅ 🤖     |\n| Oracle Linux 8     | ✅       |\n| Rocky Linux 8      | ✅       |\n| Ubuntu >= 18.04    | ✅ 🤖     |\n\nTo be noted:\n\n- The script is regularly tested against the distributions marked with a 🤖 only.\n  - It's only tested on `amd64` architecture.\n- It should work on older versions such as Debian 8+, Ubuntu 16.04+ and previous Fedora releases. But versions not in the table above are not officially supported.\n  - It should also support versions between the LTS versions, but these are not tested.\n- The script requires `systemd`.\n\n## Fork\n\nThis script is based on the great work of [Nyr and its contributors](https://github.com/Nyr/openvpn-install).\n\nSince 2016, the two scripts have diverged and are not alike anymore, especially under the hood. The main goal of the script was enhanced security. But since then, the script has been completely rewritten and a lot a features have been added. The script is only compatible with recent distributions though, so if you need to use a very old server or client, I advise using Nyr's script.\n\n## FAQ\n\nMore Q&A in [FAQ.md](FAQ.md).\n\n**Q:** Which provider do you recommend?\n\n**A:** I recommend these:\n\n- [Vultr](https://www.vultr.com/?ref=8948982-8H): Worldwide locations, IPv6 support, starting at \\$5/month\n- [Hetzner](https://hetzner.cloud/?ref=ywtlvZsjgeDq): Germany, Finland and USA. IPv6, 20 TB of traffic, starting at 4.5€/month\n- [Digital Ocean](https://m.do.co/c/ed0ba143fe53): Worldwide locations, IPv6 support, starting at \\$4/month\n\n---\n\n**Q:** Which OpenVPN client do you recommend?\n\n**A:** If possible, an official OpenVPN 2.4 client.\n\n- Windows: [The official OpenVPN community client](https://openvpn.net/index.php/download/community-downloads.html).\n- Linux: The `openvpn` package from your distribution. There is an [official APT repository](https://community.openvpn.net/openvpn/wiki/OpenvpnSoftwareRepos) for Debian/Ubuntu based distributions.\n- macOS: [Tunnelblick](https://tunnelblick.net/), [Viscosity](https://www.sparklabs.com/viscosity/), [OpenVPN for Mac](https://openvpn.net/client-connect-vpn-for-mac-os/).\n- Android: [OpenVPN for Android](https://play.google.com/store/apps/details?id=de.blinkt.openvpn).\n- iOS: [The official OpenVPN Connect client](https://itunes.apple.com/us/app/openvpn-connect/id590379981).\n\n---\n\n**Q:** Am I safe from the NSA by using your script?\n\n**A:** Please review your threat models. Even if this script has security in mind and uses state-of-the-art encryption, you shouldn't be using a VPN if you want to hide from the NSA.\n\n---\n\n**Q:** Is there an OpenVPN documentation?\n\n**A:** Yes, please head to the [OpenVPN Manual](https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage), which references all the options.\n\n---\n\nMore Q&A in [FAQ.md](FAQ.md).\n\n## One-stop solutions for public cloud\n\nSolutions that provision a ready to use OpenVPN server based on this script in one go are available for:\n\n- AWS using Terraform at [`openvpn-terraform-install`](https://github.com/dumrauf/openvpn-terraform-install)\n- Terraform AWS module [`openvpn-ephemeral`](https://registry.terraform.io/modules/paulmarsicloud/openvpn-ephemeral/aws/latest)\n\n## Contributing\n\n## Discuss changes\n\nPlease open an issue before submitting a PR if you want to discuss a change, especially if it's a big one.\n\n### Code formatting\n\nWe use [shellcheck](https://github.com/koalaman/shellcheck) and [shfmt](https://github.com/mvdan/sh) to enforce bash styling guidelines and good practices. They are executed for each commit / PR with GitHub Actions, so you can check the configuration [here](https://github.com/angristan/openvpn-install/blob/master/.github/workflows/push.yml).\n\n## Security and Encryption\n\n> **Warning**\n> This has not been updated for OpenVPN 2.5 and later.\n\nOpenVPN's default settings are pretty weak regarding encryption. This script aims to improve that.\n\nOpenVPN 2.4 was a great update regarding encryption. It added support for ECDSA, ECDH, AES GCM, NCP and tls-crypt.\n\nIf you want more information about an option mentioned below, head to the [OpenVPN manual](https://community.openvpn.net/openvpn/wiki/Openvpn24ManPage). It is very complete.\n\nMost of OpenVPN's encryption-related stuff is managed by [Easy-RSA](https://github.com/OpenVPN/easy-rsa). Defaults parameters are in the [vars.example](https://github.com/OpenVPN/easy-rsa/blob/v3.0.7/easyrsa3/vars.example) file.\n\n### Compression\n\nBy default, OpenVPN doesn't enable compression. This script provides support for LZ0 and LZ4 (v1/v2) algorithms, the latter being more efficient.\n\nHowever, it is discouraged to use compression since the [VORACLE attack](https://protonvpn.com/blog/voracle-attack/) makes use of it.\n\n### TLS version\n\nOpenVPN accepts TLS 1.0 by default, which is nearly [20 years old](https://en.wikipedia.org/wiki/Transport_Layer_Security#TLS_1.0).\n\nWith `tls-version-min 1.2` we enforce TLS 1.2, which the best protocol available currently for OpenVPN.\n\nTLS 1.2 is supported since OpenVPN 2.3.3.\n\n### Certificate\n\nOpenVPN uses an RSA certificate with a 2048 bits key by default.\n\nOpenVPN 2.4 added support for ECDSA. Elliptic curve cryptography is faster, lighter and more secure.\n\nThis script provides:\n\n- ECDSA: `prime256v1`/`secp384r1`/`secp521r1` curves\n- RSA: `2048`/`3072`/`4096` bits keys\n\nIt defaults to ECDSA with `prime256v1`.\n\nOpenVPN uses `SHA-256` as the signature hash by default, and so does the script. It provides no other choice as of now.\n\n### Data channel\n\nBy default, OpenVPN uses `BF-CBC` as the data channel cipher. Blowfish is an old (1993) and weak algorithm. Even the official OpenVPN documentation admits it.\n\n> The default is BF-CBC, an abbreviation for Blowfish in Cipher Block Chaining mode.\n>\n> Using BF-CBC is no longer recommended, because of its 64-bit block size. This small block size allows attacks based on collisions, as demonstrated by SWEET32. See <https://community.openvpn.net/openvpn/wiki/SWEET32> for details.\n> Security researchers at INRIA published an attack on 64-bit block ciphers, such as 3DES and Blowfish. They show that they are able to recover plaintext when the same data is sent often enough, and show how they can use cross-site scripting vulnerabilities to send data of interest often enough. This works over HTTPS, but also works for HTTP-over-OpenVPN. See <https://sweet32.info/> for a much better and more elaborate explanation.\n>\n> OpenVPN's default cipher, BF-CBC, is affected by this attack.\n\nIndeed, AES is today's standard. It's the fastest and more secure cipher available today. [SEED](https://en.wikipedia.org/wiki/SEED) and [Camellia](<https://en.wikipedia.org/wiki/Camellia_(cipher)>) are not vulnerable to date but are slower than AES and relatively less trusted.\n\n> Of the currently supported ciphers, OpenVPN currently recommends using AES-256-CBC or AES-128-CBC. OpenVPN 2.4 and newer will also support GCM. For 2.4+, we recommend using AES-256-GCM or AES-128-GCM.\n\nAES-256 is 40% slower than AES-128, and there isn't any real reason to use a 256 bits key over a 128 bits key with AES. (Source: [1](http://security.stackexchange.com/questions/14068/why-most-people-use-256-bit-encryption-instead-of-128-bit),[2](http://security.stackexchange.com/questions/6141/amount-of-simple-operations-that-is-safely-out-of-reach-for-all-humanity/6149#6149)). Moreover, AES-256 is more vulnerable to [Timing attacks](https://en.wikipedia.org/wiki/Timing_attack).\n\nAES-GCM is an [AEAD cipher](https://en.wikipedia.org/wiki/Authenticated_encryption) which means it simultaneously provides confidentiality, integrity, and authenticity assurances on the data.\n\nThe script supports the following ciphers:\n\n- `AES-128-GCM`\n- `AES-192-GCM`\n- `AES-256-GCM`\n- `AES-128-CBC`\n- `AES-192-CBC`\n- `AES-256-CBC`\n\nAnd defaults to `AES-128-GCM`.\n\nOpenVPN 2.4 added a feature called \"NCP\": _Negotiable Crypto Parameters_. It means you can provide a cipher suite like with HTTPS. It is set to `AES-256-GCM:AES-128-GCM` by default and overrides the `--cipher` parameter when used with an OpenVPN 2.4 client. For the sake of simplicity, the script set both the `--cipher` and `--ncp-cipher` to the cipher chosen above.\n\n### Control channel\n\nOpenVPN 2.4 will negotiate the best cipher available by default (e.g ECDHE+AES-256-GCM)\n\nThe script proposes the following options, depending on the certificate:\n\n- ECDSA:\n  - `TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256`\n  - `TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384`\n- RSA:\n  - `TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256`\n  - `TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384`\n\nIt defaults to `TLS-ECDHE-*-WITH-AES-128-GCM-SHA256`.\n\n### Diffie-Hellman key exchange\n\nOpenVPN uses a 2048 bits DH key by default.\n\nOpenVPN 2.4 added support for ECDH keys. Elliptic curve cryptography is faster, lighter and more secure.\n\nAlso, generating a classic DH keys can take a long, looong time. ECDH keys are ephemeral: they are generated on-the-fly.\n\nThe script provides the following options:\n\n- ECDH: `prime256v1`/`secp384r1`/`secp521r1` curves\n- DH: `2048`/`3072`/`4096` bits keys\n\nIt defaults to `prime256v1`.\n\n### HMAC digest algorithm\n\nFrom the OpenVPN wiki, about `--auth`:\n\n> Authenticate data channel packets and (if enabled) tls-auth control channel packets with HMAC using message digest algorithm alg. (The default is SHA1 ). HMAC is a commonly used message authentication algorithm (MAC) that uses a data string, a secure hash algorithm, and a key, to produce a digital signature.\n>\n> If an AEAD cipher mode (e.g. GCM) is chosen, the specified --auth algorithm is ignored for the data channel, and the authentication method of the AEAD cipher is used instead. Note that alg still specifies the digest used for tls-auth.\n\nThe script provides the following choices:\n\n- `SHA256`\n- `SHA384`\n- `SHA512`\n\nIt defaults to `SHA256`.\n\n### `tls-auth` and `tls-crypt`\n\nFrom the OpenVPN wiki, about `tls-auth`:\n\n> Add an additional layer of HMAC authentication on top of the TLS control channel to mitigate DoS attacks and attacks on the TLS stack.\n>\n> In a nutshell, --tls-auth enables a kind of \"HMAC firewall\" on OpenVPN's TCP/UDP port, where TLS control channel packets bearing an incorrect HMAC signature can be dropped immediately without response.\n\nAbout `tls-crypt`:\n\n> Encrypt and authenticate all control channel packets with the key from keyfile. (See --tls-auth for more background.)\n>\n> Encrypting (and authenticating) control channel packets:\n>\n> - provides more privacy by hiding the certificate used for the TLS connection,\n> - makes it harder to identify OpenVPN traffic as such,\n> - provides \"poor-man's\" post-quantum security, against attackers who will never know the pre-shared key (i.e. no forward secrecy).\n\nSo both provide an additional layer of security and mitigate DoS attacks. They aren't used by default by OpenVPN.\n\n`tls-crypt` is an OpenVPN 2.4 feature that provides encryption in addition to authentication (unlike `tls-auth`). It is more privacy-friendly.\n\nThe script supports both and uses `tls-crypt` by default.\n\n## Say thanks\n\nYou can [say thanks](https://saythanks.io/to/angristan) if you want!\n\n## Credits & Licence\n\nMany thanks to the [contributors](https://github.com/Angristan/OpenVPN-install/graphs/contributors) and Nyr's original work.\n\nThis project is under the [MIT Licence](https://raw.githubusercontent.com/Angristan/openvpn-install/master/LICENSE)\n\n## Star History\n\n[![Star History Chart](https://api.star-history.com/svg?repos=angristan/openvpn-install&type=Date)](https://star-history.com/#angristan/openvpn-install&Date)\n"
        },
        {
          "name": "openvpn-install.sh",
          "type": "blob",
          "size": 40.8701171875,
          "content": "#!/bin/bash\n# shellcheck disable=SC1091,SC2164,SC2034,SC1072,SC1073,SC1009\n\n# Secure OpenVPN server installer for Debian, Ubuntu, CentOS, Amazon Linux 2, Fedora, Oracle Linux 8, Arch Linux, Rocky Linux and AlmaLinux.\n# https://github.com/angristan/openvpn-install\n\nfunction isRoot() {\n\tif [ \"$EUID\" -ne 0 ]; then\n\t\treturn 1\n\tfi\n}\n\nfunction tunAvailable() {\n\tif [ ! -e /dev/net/tun ]; then\n\t\treturn 1\n\tfi\n}\n\nfunction checkOS() {\n\tif [[ -e /etc/debian_version ]]; then\n\t\tOS=\"debian\"\n\t\tsource /etc/os-release\n\n\t\tif [[ $ID == \"debian\" || $ID == \"raspbian\" ]]; then\n\t\t\tif [[ $VERSION_ID -lt 9 ]]; then\n\t\t\t\techo \"⚠️ Your version of Debian is not supported.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"However, if you're using Debian >= 9 or unstable/testing then you can continue, at your own risk.\"\n\t\t\t\techo \"\"\n\t\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\n\t\t\t\t\tread -rp \"Continue? [y/n]: \" -e CONTINUE\n\t\t\t\tdone\n\t\t\t\tif [[ $CONTINUE == \"n\" ]]; then\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\tfi\n\t\telif [[ $ID == \"ubuntu\" ]]; then\n\t\t\tOS=\"ubuntu\"\n\t\t\tMAJOR_UBUNTU_VERSION=$(echo \"$VERSION_ID\" | cut -d '.' -f1)\n\t\t\tif [[ $MAJOR_UBUNTU_VERSION -lt 16 ]]; then\n\t\t\t\techo \"⚠️ Your version of Ubuntu is not supported.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"However, if you're using Ubuntu >= 16.04 or beta, then you can continue, at your own risk.\"\n\t\t\t\techo \"\"\n\t\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\n\t\t\t\t\tread -rp \"Continue? [y/n]: \" -e CONTINUE\n\t\t\t\tdone\n\t\t\t\tif [[ $CONTINUE == \"n\" ]]; then\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\telif [[ -e /etc/system-release ]]; then\n\t\tsource /etc/os-release\n\t\tif [[ $ID == \"fedora\" || $ID_LIKE == \"fedora\" ]]; then\n\t\t\tOS=\"fedora\"\n\t\tfi\n\t\tif [[ $ID == \"centos\" || $ID == \"rocky\" || $ID == \"almalinux\" ]]; then\n\t\t\tOS=\"centos\"\n\t\t\tif [[ ${VERSION_ID%.*} -lt 7 ]]; then\n\t\t\t\techo \"⚠️ Your version of CentOS is not supported.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"The script only support CentOS 7 and CentOS 8.\"\n\t\t\t\techo \"\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tfi\n\t\tif [[ $ID == \"ol\" ]]; then\n\t\t\tOS=\"oracle\"\n\t\t\tif [[ ! $VERSION_ID =~ (8) ]]; then\n\t\t\t\techo \"Your version of Oracle Linux is not supported.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"The script only support Oracle Linux 8.\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tfi\n\t\tif [[ $ID == \"amzn\" ]]; then\n\t\t\tOS=\"amzn\"\n\t\t\tif [[ $VERSION_ID != \"2\" ]]; then\n\t\t\t\techo \"⚠️ Your version of Amazon Linux is not supported.\"\n\t\t\t\techo \"\"\n\t\t\t\techo \"The script only support Amazon Linux 2.\"\n\t\t\t\techo \"\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tfi\n\telif [[ -e /etc/arch-release ]]; then\n\t\tOS=arch\n\telse\n\t\techo \"Looks like you aren't running this installer on a Debian, Ubuntu, Fedora, CentOS, Amazon Linux 2, Oracle Linux 8 or Arch Linux system\"\n\t\texit 1\n\tfi\n}\n\nfunction initialCheck() {\n\tif ! isRoot; then\n\t\techo \"Sorry, you need to run this as root\"\n\t\texit 1\n\tfi\n\tif ! tunAvailable; then\n\t\techo \"TUN is not available\"\n\t\texit 1\n\tfi\n\tcheckOS\n}\n\nfunction installUnbound() {\n\t# If Unbound isn't installed, install it\n\tif [[ ! -e /etc/unbound/unbound.conf ]]; then\n\n\t\tif [[ $OS =~ (debian|ubuntu) ]]; then\n\t\t\tapt-get install -y unbound\n\n\t\t\t# Configuration\n\t\t\techo 'interface: 10.8.0.1\naccess-control: 10.8.0.1/24 allow\nhide-identity: yes\nhide-version: yes\nuse-caps-for-id: yes\nprefetch: yes' >>/etc/unbound/unbound.conf\n\n\t\telif [[ $OS =~ (centos|amzn|oracle) ]]; then\n\t\t\tyum install -y unbound\n\n\t\t\t# Configuration\n\t\t\tsed -i 's|# interface: 0.0.0.0$|interface: 10.8.0.1|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# access-control: 127.0.0.0/8 allow|access-control: 10.8.0.1/24 allow|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# hide-identity: no|hide-identity: yes|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# hide-version: no|hide-version: yes|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|use-caps-for-id: no|use-caps-for-id: yes|' /etc/unbound/unbound.conf\n\n\t\telif [[ $OS == \"fedora\" ]]; then\n\t\t\tdnf install -y unbound\n\n\t\t\t# Configuration\n\t\t\tsed -i 's|# interface: 0.0.0.0$|interface: 10.8.0.1|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# access-control: 127.0.0.0/8 allow|access-control: 10.8.0.1/24 allow|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# hide-identity: no|hide-identity: yes|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# hide-version: no|hide-version: yes|' /etc/unbound/unbound.conf\n\t\t\tsed -i 's|# use-caps-for-id: no|use-caps-for-id: yes|' /etc/unbound/unbound.conf\n\n\t\telif [[ $OS == \"arch\" ]]; then\n\t\t\tpacman -Syu --noconfirm unbound\n\n\t\t\t# Get root servers list\n\t\t\tcurl -o /etc/unbound/root.hints https://www.internic.net/domain/named.cache\n\n\t\t\tif [[ ! -f /etc/unbound/unbound.conf.old ]]; then\n\t\t\t\tmv /etc/unbound/unbound.conf /etc/unbound/unbound.conf.old\n\t\t\tfi\n\n\t\t\techo 'server:\n\tuse-syslog: yes\n\tdo-daemonize: no\n\tusername: \"unbound\"\n\tdirectory: \"/etc/unbound\"\n\ttrust-anchor-file: trusted-key.key\n\troot-hints: root.hints\n\tinterface: 10.8.0.1\n\taccess-control: 10.8.0.1/24 allow\n\tport: 53\n\tnum-threads: 2\n\tuse-caps-for-id: yes\n\tharden-glue: yes\n\thide-identity: yes\n\thide-version: yes\n\tqname-minimisation: yes\n\tprefetch: yes' >/etc/unbound/unbound.conf\n\t\tfi\n\n\t\t# IPv6 DNS for all OS\n\t\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\t\techo 'interface: fd42:42:42:42::1\naccess-control: fd42:42:42:42::/112 allow' >>/etc/unbound/unbound.conf\n\t\tfi\n\n\t\tif [[ ! $OS =~ (fedora|centos|amzn|oracle) ]]; then\n\t\t\t# DNS Rebinding fix\n\t\t\techo \"private-address: 10.0.0.0/8\nprivate-address: fd42:42:42:42::/112\nprivate-address: 172.16.0.0/12\nprivate-address: 192.168.0.0/16\nprivate-address: 169.254.0.0/16\nprivate-address: fd00::/8\nprivate-address: fe80::/10\nprivate-address: 127.0.0.0/8\nprivate-address: ::ffff:0:0/96\" >>/etc/unbound/unbound.conf\n\t\tfi\n\telse # Unbound is already installed\n\t\techo 'include: /etc/unbound/openvpn.conf' >>/etc/unbound/unbound.conf\n\n\t\t# Add Unbound 'server' for the OpenVPN subnet\n\t\techo 'server:\ninterface: 10.8.0.1\naccess-control: 10.8.0.1/24 allow\nhide-identity: yes\nhide-version: yes\nuse-caps-for-id: yes\nprefetch: yes\nprivate-address: 10.0.0.0/8\nprivate-address: fd42:42:42:42::/112\nprivate-address: 172.16.0.0/12\nprivate-address: 192.168.0.0/16\nprivate-address: 169.254.0.0/16\nprivate-address: fd00::/8\nprivate-address: fe80::/10\nprivate-address: 127.0.0.0/8\nprivate-address: ::ffff:0:0/96' >/etc/unbound/openvpn.conf\n\t\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\t\techo 'interface: fd42:42:42:42::1\naccess-control: fd42:42:42:42::/112 allow' >>/etc/unbound/openvpn.conf\n\t\tfi\n\tfi\n\n\tsystemctl enable unbound\n\tsystemctl restart unbound\n}\n\nfunction resolvePublicIP() {\n\t# IP version flags, we'll use as default the IPv4\n\tCURL_IP_VERSION_FLAG=\"-4\"\n\tDIG_IP_VERSION_FLAG=\"-4\"\n\n\t# Behind NAT, we'll default to the publicly reachable IPv4/IPv6.\n\tif [[ $IPV6_SUPPORT == \"y\" ]]; then\n\t\tCURL_IP_VERSION_FLAG=\"\"\n\t\tDIG_IP_VERSION_FLAG=\"-6\"\n\tfi\n\n\t# If there is no public ip yet, we'll try to solve it using: https://api.seeip.org\n\tif [[ -z $PUBLIC_IP ]]; then\n\t\tPUBLIC_IP=$(curl -f -m 5 -sS --retry 2 --retry-connrefused \"$CURL_IP_VERSION_FLAG\" https://api.seeip.org 2>/dev/null)\n\tfi\n\n\t# If there is no public ip yet, we'll try to solve it using: https://ifconfig.me\n\tif [[ -z $PUBLIC_IP ]]; then\n\t\tPUBLIC_IP=$(curl -f -m 5 -sS --retry 2 --retry-connrefused \"$CURL_IP_VERSION_FLAG\" https://ifconfig.me 2>/dev/null)\n\tfi\n\n\t# If there is no public ip yet, we'll try to solve it using: https://api.ipify.org\n\tif [[ -z $PUBLIC_IP ]]; then\n\t\tPUBLIC_IP=$(curl -f -m 5 -sS --retry 2 --retry-connrefused \"$CURL_IP_VERSION_FLAG\" https://api.ipify.org 2>/dev/null)\n\tfi\n\n\t# If there is no public ip yet, we'll try to solve it using: ns1.google.com\n\tif [[ -z $PUBLIC_IP ]]; then\n\t\tPUBLIC_IP=$(dig $DIG_IP_VERSION_FLAG TXT +short o-o.myaddr.l.google.com @ns1.google.com | tr -d '\"')\n\tfi\n\n\tif [[ -z $PUBLIC_IP ]]; then\n\t\techo >&2 echo \"Couldn't solve the public IP\"\n\t\texit 1\n\tfi\n\n\techo \"$PUBLIC_IP\"\n}\n\nfunction installQuestions() {\n\techo \"Welcome to the OpenVPN installer!\"\n\techo \"The git repository is available at: https://github.com/angristan/openvpn-install\"\n\techo \"\"\n\n\techo \"I need to ask you a few questions before starting the setup.\"\n\techo \"You can leave the default options and just press enter if you are ok with them.\"\n\techo \"\"\n\techo \"I need to know the IPv4 address of the network interface you want OpenVPN listening to.\"\n\techo \"Unless your server is behind NAT, it should be your public IPv4 address.\"\n\n\t# Detect public IPv4 address and pre-fill for the user\n\tIP=$(ip -4 addr | sed -ne 's|^.* inet \\([^/]*\\)/.* scope global.*$|\\1|p' | head -1)\n\n\tif [[ -z $IP ]]; then\n\t\t# Detect public IPv6 address\n\t\tIP=$(ip -6 addr | sed -ne 's|^.* inet6 \\([^/]*\\)/.* scope global.*$|\\1|p' | head -1)\n\tfi\n\tAPPROVE_IP=${APPROVE_IP:-n}\n\tif [[ $APPROVE_IP =~ n ]]; then\n\t\tread -rp \"IP address: \" -e -i \"$IP\" IP\n\tfi\n\t# If $IP is a private IP address, the server must be behind NAT\n\tif echo \"$IP\" | grep -qE '^(10\\.|172\\.1[6789]\\.|172\\.2[0-9]\\.|172\\.3[01]\\.|192\\.168)'; then\n\t\techo \"\"\n\t\techo \"It seems this server is behind NAT. What is its public IPv4 address or hostname?\"\n\t\techo \"We need it for the clients to connect to the server.\"\n\n\t\tif [[ -z $ENDPOINT ]]; then\n\t\t\tDEFAULT_ENDPOINT=$(resolvePublicIP)\n\t\tfi\n\n\t\tuntil [[ $ENDPOINT != \"\" ]]; do\n\t\t\tread -rp \"Public IPv4 address or hostname: \" -e -i \"$DEFAULT_ENDPOINT\" ENDPOINT\n\t\tdone\n\tfi\n\n\techo \"\"\n\techo \"Checking for IPv6 connectivity...\"\n\techo \"\"\n\t# \"ping6\" and \"ping -6\" availability varies depending on the distribution\n\tif type ping6 >/dev/null 2>&1; then\n\t\tPING6=\"ping6 -c3 ipv6.google.com > /dev/null 2>&1\"\n\telse\n\t\tPING6=\"ping -6 -c3 ipv6.google.com > /dev/null 2>&1\"\n\tfi\n\tif eval \"$PING6\"; then\n\t\techo \"Your host appears to have IPv6 connectivity.\"\n\t\tSUGGESTION=\"y\"\n\telse\n\t\techo \"Your host does not appear to have IPv6 connectivity.\"\n\t\tSUGGESTION=\"n\"\n\tfi\n\techo \"\"\n\t# Ask the user if they want to enable IPv6 regardless its availability.\n\tuntil [[ $IPV6_SUPPORT =~ (y|n) ]]; do\n\t\tread -rp \"Do you want to enable IPv6 support (NAT)? [y/n]: \" -e -i $SUGGESTION IPV6_SUPPORT\n\tdone\n\techo \"\"\n\techo \"What port do you want OpenVPN to listen to?\"\n\techo \"   1) Default: 1194\"\n\techo \"   2) Custom\"\n\techo \"   3) Random [49152-65535]\"\n\tuntil [[ $PORT_CHOICE =~ ^[1-3]$ ]]; do\n\t\tread -rp \"Port choice [1-3]: \" -e -i 1 PORT_CHOICE\n\tdone\n\tcase $PORT_CHOICE in\n\t1)\n\t\tPORT=\"1194\"\n\t\t;;\n\t2)\n\t\tuntil [[ $PORT =~ ^[0-9]+$ ]] && [ \"$PORT\" -ge 1 ] && [ \"$PORT\" -le 65535 ]; do\n\t\t\tread -rp \"Custom port [1-65535]: \" -e -i 1194 PORT\n\t\tdone\n\t\t;;\n\t3)\n\t\t# Generate random number within private ports range\n\t\tPORT=$(shuf -i49152-65535 -n1)\n\t\techo \"Random Port: $PORT\"\n\t\t;;\n\tesac\n\techo \"\"\n\techo \"What protocol do you want OpenVPN to use?\"\n\techo \"UDP is faster. Unless it is not available, you shouldn't use TCP.\"\n\techo \"   1) UDP\"\n\techo \"   2) TCP\"\n\tuntil [[ $PROTOCOL_CHOICE =~ ^[1-2]$ ]]; do\n\t\tread -rp \"Protocol [1-2]: \" -e -i 1 PROTOCOL_CHOICE\n\tdone\n\tcase $PROTOCOL_CHOICE in\n\t1)\n\t\tPROTOCOL=\"udp\"\n\t\t;;\n\t2)\n\t\tPROTOCOL=\"tcp\"\n\t\t;;\n\tesac\n\techo \"\"\n\techo \"What DNS resolvers do you want to use with the VPN?\"\n\techo \"   1) Current system resolvers (from /etc/resolv.conf)\"\n\techo \"   2) Self-hosted DNS Resolver (Unbound)\"\n\techo \"   3) Cloudflare (Anycast: worldwide)\"\n\techo \"   4) Quad9 (Anycast: worldwide)\"\n\techo \"   5) Quad9 uncensored (Anycast: worldwide)\"\n\techo \"   6) FDN (France)\"\n\techo \"   7) DNS.WATCH (Germany)\"\n\techo \"   8) OpenDNS (Anycast: worldwide)\"\n\techo \"   9) Google (Anycast: worldwide)\"\n\techo \"   10) Yandex Basic (Russia)\"\n\techo \"   11) AdGuard DNS (Anycast: worldwide)\"\n\techo \"   12) NextDNS (Anycast: worldwide)\"\n\techo \"   13) Custom\"\n\tuntil [[ $DNS =~ ^[0-9]+$ ]] && [ \"$DNS\" -ge 1 ] && [ \"$DNS\" -le 13 ]; do\n\t\tread -rp \"DNS [1-12]: \" -e -i 11 DNS\n\t\tif [[ $DNS == 2 ]] && [[ -e /etc/unbound/unbound.conf ]]; then\n\t\t\techo \"\"\n\t\t\techo \"Unbound is already installed.\"\n\t\t\techo \"You can allow the script to configure it in order to use it from your OpenVPN clients\"\n\t\t\techo \"We will simply add a second server to /etc/unbound/unbound.conf for the OpenVPN subnet.\"\n\t\t\techo \"No changes are made to the current configuration.\"\n\t\t\techo \"\"\n\n\t\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\n\t\t\t\tread -rp \"Apply configuration changes to Unbound? [y/n]: \" -e CONTINUE\n\t\t\tdone\n\t\t\tif [[ $CONTINUE == \"n\" ]]; then\n\t\t\t\t# Break the loop and cleanup\n\t\t\t\tunset DNS\n\t\t\t\tunset CONTINUE\n\t\t\tfi\n\t\telif [[ $DNS == \"13\" ]]; then\n\t\t\tuntil [[ $DNS1 =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; do\n\t\t\t\tread -rp \"Primary DNS: \" -e DNS1\n\t\t\tdone\n\t\t\tuntil [[ $DNS2 =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; do\n\t\t\t\tread -rp \"Secondary DNS (optional): \" -e DNS2\n\t\t\t\tif [[ $DNS2 == \"\" ]]; then\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tdone\n\t\tfi\n\tdone\n\techo \"\"\n\techo \"Do you want to use compression? It is not recommended since the VORACLE attack makes use of it.\"\n\tuntil [[ $COMPRESSION_ENABLED =~ (y|n) ]]; do\n\t\tread -rp\"Enable compression? [y/n]: \" -e -i n COMPRESSION_ENABLED\n\tdone\n\tif [[ $COMPRESSION_ENABLED == \"y\" ]]; then\n\t\techo \"Choose which compression algorithm you want to use: (they are ordered by efficiency)\"\n\t\techo \"   1) LZ4-v2\"\n\t\techo \"   2) LZ4\"\n\t\techo \"   3) LZ0\"\n\t\tuntil [[ $COMPRESSION_CHOICE =~ ^[1-3]$ ]]; do\n\t\t\tread -rp\"Compression algorithm [1-3]: \" -e -i 1 COMPRESSION_CHOICE\n\t\tdone\n\t\tcase $COMPRESSION_CHOICE in\n\t\t1)\n\t\t\tCOMPRESSION_ALG=\"lz4-v2\"\n\t\t\t;;\n\t\t2)\n\t\t\tCOMPRESSION_ALG=\"lz4\"\n\t\t\t;;\n\t\t3)\n\t\t\tCOMPRESSION_ALG=\"lzo\"\n\t\t\t;;\n\t\tesac\n\tfi\n\techo \"\"\n\techo \"Do you want to customize encryption settings?\"\n\techo \"Unless you know what you're doing, you should stick with the default parameters provided by the script.\"\n\techo \"Note that whatever you choose, all the choices presented in the script are safe. (Unlike OpenVPN's defaults)\"\n\techo \"See https://github.com/angristan/openvpn-install#security-and-encryption to learn more.\"\n\techo \"\"\n\tuntil [[ $CUSTOMIZE_ENC =~ (y|n) ]]; do\n\t\tread -rp \"Customize encryption settings? [y/n]: \" -e -i n CUSTOMIZE_ENC\n\tdone\n\tif [[ $CUSTOMIZE_ENC == \"n\" ]]; then\n\t\t# Use default, sane and fast parameters\n\t\tCIPHER=\"AES-128-GCM\"\n\t\tCERT_TYPE=\"1\" # ECDSA\n\t\tCERT_CURVE=\"prime256v1\"\n\t\tCC_CIPHER=\"TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256\"\n\t\tDH_TYPE=\"1\" # ECDH\n\t\tDH_CURVE=\"prime256v1\"\n\t\tHMAC_ALG=\"SHA256\"\n\t\tTLS_SIG=\"1\" # tls-crypt\n\telse\n\t\techo \"\"\n\t\techo \"Choose which cipher you want to use for the data channel:\"\n\t\techo \"   1) AES-128-GCM (recommended)\"\n\t\techo \"   2) AES-192-GCM\"\n\t\techo \"   3) AES-256-GCM\"\n\t\techo \"   4) AES-128-CBC\"\n\t\techo \"   5) AES-192-CBC\"\n\t\techo \"   6) AES-256-CBC\"\n\t\tuntil [[ $CIPHER_CHOICE =~ ^[1-6]$ ]]; do\n\t\t\tread -rp \"Cipher [1-6]: \" -e -i 1 CIPHER_CHOICE\n\t\tdone\n\t\tcase $CIPHER_CHOICE in\n\t\t1)\n\t\t\tCIPHER=\"AES-128-GCM\"\n\t\t\t;;\n\t\t2)\n\t\t\tCIPHER=\"AES-192-GCM\"\n\t\t\t;;\n\t\t3)\n\t\t\tCIPHER=\"AES-256-GCM\"\n\t\t\t;;\n\t\t4)\n\t\t\tCIPHER=\"AES-128-CBC\"\n\t\t\t;;\n\t\t5)\n\t\t\tCIPHER=\"AES-192-CBC\"\n\t\t\t;;\n\t\t6)\n\t\t\tCIPHER=\"AES-256-CBC\"\n\t\t\t;;\n\t\tesac\n\t\techo \"\"\n\t\techo \"Choose what kind of certificate you want to use:\"\n\t\techo \"   1) ECDSA (recommended)\"\n\t\techo \"   2) RSA\"\n\t\tuntil [[ $CERT_TYPE =~ ^[1-2]$ ]]; do\n\t\t\tread -rp\"Certificate key type [1-2]: \" -e -i 1 CERT_TYPE\n\t\tdone\n\t\tcase $CERT_TYPE in\n\t\t1)\n\t\t\techo \"\"\n\t\t\techo \"Choose which curve you want to use for the certificate's key:\"\n\t\t\techo \"   1) prime256v1 (recommended)\"\n\t\t\techo \"   2) secp384r1\"\n\t\t\techo \"   3) secp521r1\"\n\t\t\tuntil [[ $CERT_CURVE_CHOICE =~ ^[1-3]$ ]]; do\n\t\t\t\tread -rp\"Curve [1-3]: \" -e -i 1 CERT_CURVE_CHOICE\n\t\t\tdone\n\t\t\tcase $CERT_CURVE_CHOICE in\n\t\t\t1)\n\t\t\t\tCERT_CURVE=\"prime256v1\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tCERT_CURVE=\"secp384r1\"\n\t\t\t\t;;\n\t\t\t3)\n\t\t\t\tCERT_CURVE=\"secp521r1\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t2)\n\t\t\techo \"\"\n\t\t\techo \"Choose which size you want to use for the certificate's RSA key:\"\n\t\t\techo \"   1) 2048 bits (recommended)\"\n\t\t\techo \"   2) 3072 bits\"\n\t\t\techo \"   3) 4096 bits\"\n\t\t\tuntil [[ $RSA_KEY_SIZE_CHOICE =~ ^[1-3]$ ]]; do\n\t\t\t\tread -rp \"RSA key size [1-3]: \" -e -i 1 RSA_KEY_SIZE_CHOICE\n\t\t\tdone\n\t\t\tcase $RSA_KEY_SIZE_CHOICE in\n\t\t\t1)\n\t\t\t\tRSA_KEY_SIZE=\"2048\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tRSA_KEY_SIZE=\"3072\"\n\t\t\t\t;;\n\t\t\t3)\n\t\t\t\tRSA_KEY_SIZE=\"4096\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\tesac\n\t\techo \"\"\n\t\techo \"Choose which cipher you want to use for the control channel:\"\n\t\tcase $CERT_TYPE in\n\t\t1)\n\t\t\techo \"   1) ECDHE-ECDSA-AES-128-GCM-SHA256 (recommended)\"\n\t\t\techo \"   2) ECDHE-ECDSA-AES-256-GCM-SHA384\"\n\t\t\tuntil [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do\n\t\t\t\tread -rp\"Control channel cipher [1-2]: \" -e -i 1 CC_CIPHER_CHOICE\n\t\t\tdone\n\t\t\tcase $CC_CIPHER_CHOICE in\n\t\t\t1)\n\t\t\t\tCC_CIPHER=\"TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tCC_CIPHER=\"TLS-ECDHE-ECDSA-WITH-AES-256-GCM-SHA384\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t2)\n\t\t\techo \"   1) ECDHE-RSA-AES-128-GCM-SHA256 (recommended)\"\n\t\t\techo \"   2) ECDHE-RSA-AES-256-GCM-SHA384\"\n\t\t\tuntil [[ $CC_CIPHER_CHOICE =~ ^[1-2]$ ]]; do\n\t\t\t\tread -rp\"Control channel cipher [1-2]: \" -e -i 1 CC_CIPHER_CHOICE\n\t\t\tdone\n\t\t\tcase $CC_CIPHER_CHOICE in\n\t\t\t1)\n\t\t\t\tCC_CIPHER=\"TLS-ECDHE-RSA-WITH-AES-128-GCM-SHA256\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tCC_CIPHER=\"TLS-ECDHE-RSA-WITH-AES-256-GCM-SHA384\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\tesac\n\t\techo \"\"\n\t\techo \"Choose what kind of Diffie-Hellman key you want to use:\"\n\t\techo \"   1) ECDH (recommended)\"\n\t\techo \"   2) DH\"\n\t\tuntil [[ $DH_TYPE =~ [1-2] ]]; do\n\t\t\tread -rp\"DH key type [1-2]: \" -e -i 1 DH_TYPE\n\t\tdone\n\t\tcase $DH_TYPE in\n\t\t1)\n\t\t\techo \"\"\n\t\t\techo \"Choose which curve you want to use for the ECDH key:\"\n\t\t\techo \"   1) prime256v1 (recommended)\"\n\t\t\techo \"   2) secp384r1\"\n\t\t\techo \"   3) secp521r1\"\n\t\t\twhile [[ $DH_CURVE_CHOICE != \"1\" && $DH_CURVE_CHOICE != \"2\" && $DH_CURVE_CHOICE != \"3\" ]]; do\n\t\t\t\tread -rp\"Curve [1-3]: \" -e -i 1 DH_CURVE_CHOICE\n\t\t\tdone\n\t\t\tcase $DH_CURVE_CHOICE in\n\t\t\t1)\n\t\t\t\tDH_CURVE=\"prime256v1\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tDH_CURVE=\"secp384r1\"\n\t\t\t\t;;\n\t\t\t3)\n\t\t\t\tDH_CURVE=\"secp521r1\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\t2)\n\t\t\techo \"\"\n\t\t\techo \"Choose what size of Diffie-Hellman key you want to use:\"\n\t\t\techo \"   1) 2048 bits (recommended)\"\n\t\t\techo \"   2) 3072 bits\"\n\t\t\techo \"   3) 4096 bits\"\n\t\t\tuntil [[ $DH_KEY_SIZE_CHOICE =~ ^[1-3]$ ]]; do\n\t\t\t\tread -rp \"DH key size [1-3]: \" -e -i 1 DH_KEY_SIZE_CHOICE\n\t\t\tdone\n\t\t\tcase $DH_KEY_SIZE_CHOICE in\n\t\t\t1)\n\t\t\t\tDH_KEY_SIZE=\"2048\"\n\t\t\t\t;;\n\t\t\t2)\n\t\t\t\tDH_KEY_SIZE=\"3072\"\n\t\t\t\t;;\n\t\t\t3)\n\t\t\t\tDH_KEY_SIZE=\"4096\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\t;;\n\t\tesac\n\t\techo \"\"\n\t\t# The \"auth\" options behaves differently with AEAD ciphers\n\t\tif [[ $CIPHER =~ CBC$ ]]; then\n\t\t\techo \"The digest algorithm authenticates data channel packets and tls-auth packets from the control channel.\"\n\t\telif [[ $CIPHER =~ GCM$ ]]; then\n\t\t\techo \"The digest algorithm authenticates tls-auth packets from the control channel.\"\n\t\tfi\n\t\techo \"Which digest algorithm do you want to use for HMAC?\"\n\t\techo \"   1) SHA-256 (recommended)\"\n\t\techo \"   2) SHA-384\"\n\t\techo \"   3) SHA-512\"\n\t\tuntil [[ $HMAC_ALG_CHOICE =~ ^[1-3]$ ]]; do\n\t\t\tread -rp \"Digest algorithm [1-3]: \" -e -i 1 HMAC_ALG_CHOICE\n\t\tdone\n\t\tcase $HMAC_ALG_CHOICE in\n\t\t1)\n\t\t\tHMAC_ALG=\"SHA256\"\n\t\t\t;;\n\t\t2)\n\t\t\tHMAC_ALG=\"SHA384\"\n\t\t\t;;\n\t\t3)\n\t\t\tHMAC_ALG=\"SHA512\"\n\t\t\t;;\n\t\tesac\n\t\techo \"\"\n\t\techo \"You can add an additional layer of security to the control channel with tls-auth and tls-crypt\"\n\t\techo \"tls-auth authenticates the packets, while tls-crypt authenticate and encrypt them.\"\n\t\techo \"   1) tls-crypt (recommended)\"\n\t\techo \"   2) tls-auth\"\n\t\tuntil [[ $TLS_SIG =~ [1-2] ]]; do\n\t\t\tread -rp \"Control channel additional security mechanism [1-2]: \" -e -i 1 TLS_SIG\n\t\tdone\n\tfi\n\techo \"\"\n\techo \"Okay, that was all I needed. We are ready to setup your OpenVPN server now.\"\n\techo \"You will be able to generate a client at the end of the installation.\"\n\tAPPROVE_INSTALL=${APPROVE_INSTALL:-n}\n\tif [[ $APPROVE_INSTALL =~ n ]]; then\n\t\tread -n1 -r -p \"Press any key to continue...\"\n\tfi\n}\n\nfunction installOpenVPN() {\n\tif [[ $AUTO_INSTALL == \"y\" ]]; then\n\t\t# Set default choices so that no questions will be asked.\n\t\tAPPROVE_INSTALL=${APPROVE_INSTALL:-y}\n\t\tAPPROVE_IP=${APPROVE_IP:-y}\n\t\tIPV6_SUPPORT=${IPV6_SUPPORT:-n}\n\t\tPORT_CHOICE=${PORT_CHOICE:-1}\n\t\tPROTOCOL_CHOICE=${PROTOCOL_CHOICE:-1}\n\t\tDNS=${DNS:-1}\n\t\tCOMPRESSION_ENABLED=${COMPRESSION_ENABLED:-n}\n\t\tCUSTOMIZE_ENC=${CUSTOMIZE_ENC:-n}\n\t\tCLIENT=${CLIENT:-client}\n\t\tPASS=${PASS:-1}\n\t\tCONTINUE=${CONTINUE:-y}\n\n\t\tif [[ -z $ENDPOINT ]]; then\n\t\t\tENDPOINT=$(resolvePublicIP)\n\t\tfi\n\tfi\n\n\t# Run setup questions first, and set other variables if auto-install\n\tinstallQuestions\n\n\t# Get the \"public\" interface from the default route\n\tNIC=$(ip -4 route ls | grep default | grep -Po '(?<=dev )(\\S+)' | head -1)\n\tif [[ -z $NIC ]] && [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\tNIC=$(ip -6 route show default | sed -ne 's/^default .* dev \\([^ ]*\\) .*$/\\1/p')\n\tfi\n\n\t# $NIC can not be empty for script rm-openvpn-rules.sh\n\tif [[ -z $NIC ]]; then\n\t\techo\n\t\techo \"Can not detect public interface.\"\n\t\techo \"This needs for setup MASQUERADE.\"\n\t\tuntil [[ $CONTINUE =~ (y|n) ]]; do\n\t\t\tread -rp \"Continue? [y/n]: \" -e CONTINUE\n\t\tdone\n\t\tif [[ $CONTINUE == \"n\" ]]; then\n\t\t\texit 1\n\t\tfi\n\tfi\n\n\t# If OpenVPN isn't installed yet, install it. This script is more-or-less\n\t# idempotent on multiple runs, but will only install OpenVPN from upstream\n\t# the first time.\n\tif [[ ! -e /etc/openvpn/server.conf ]]; then\n\t\tif [[ $OS =~ (debian|ubuntu) ]]; then\n\t\t\tapt-get update\n\t\t\tapt-get -y install ca-certificates gnupg\n\t\t\t# We add the OpenVPN repo to get the latest version.\n\t\t\tif [[ $VERSION_ID == \"16.04\" ]]; then\n\t\t\t\techo \"deb http://build.openvpn.net/debian/openvpn/stable xenial main\" >/etc/apt/sources.list.d/openvpn.list\n\t\t\t\twget -O - https://swupdate.openvpn.net/repos/repo-public.gpg | apt-key add -\n\t\t\t\tapt-get update\n\t\t\tfi\n\t\t\t# Ubuntu > 16.04 and Debian > 8 have OpenVPN >= 2.4 without the need of a third party repository.\n\t\t\tapt-get install -y openvpn iptables openssl wget ca-certificates curl\n\t\telif [[ $OS == 'centos' ]]; then\n\t\t\tyum install -y epel-release\n\t\t\tyum install -y openvpn iptables openssl wget ca-certificates curl tar 'policycoreutils-python*'\n\t\telif [[ $OS == 'oracle' ]]; then\n\t\t\tyum install -y oracle-epel-release-el8\n\t\t\tyum-config-manager --enable ol8_developer_EPEL\n\t\t\tyum install -y openvpn iptables openssl wget ca-certificates curl tar policycoreutils-python-utils\n\t\telif [[ $OS == 'amzn' ]]; then\n\t\t\tamazon-linux-extras install -y epel\n\t\t\tyum install -y openvpn iptables openssl wget ca-certificates curl\n\t\telif [[ $OS == 'fedora' ]]; then\n\t\t\tdnf install -y openvpn iptables openssl wget ca-certificates curl policycoreutils-python-utils\n\t\telif [[ $OS == 'arch' ]]; then\n\t\t\t# Install required dependencies and upgrade the system\n\t\t\tpacman --needed --noconfirm -Syu openvpn iptables openssl wget ca-certificates curl\n\t\tfi\n\t\t# An old version of easy-rsa was available by default in some openvpn packages\n\t\tif [[ -d /etc/openvpn/easy-rsa/ ]]; then\n\t\t\trm -rf /etc/openvpn/easy-rsa/\n\t\tfi\n\tfi\n\n\t# Find out if the machine uses nogroup or nobody for the permissionless group\n\tif grep -qs \"^nogroup:\" /etc/group; then\n\t\tNOGROUP=nogroup\n\telse\n\t\tNOGROUP=nobody\n\tfi\n\n\t# Install the latest version of easy-rsa from source, if not already installed.\n\tif [[ ! -d /etc/openvpn/easy-rsa/ ]]; then\n\t\tlocal version=\"3.1.2\"\n\t\twget -O ~/easy-rsa.tgz https://github.com/OpenVPN/easy-rsa/releases/download/v${version}/EasyRSA-${version}.tgz\n\t\tmkdir -p /etc/openvpn/easy-rsa\n\t\ttar xzf ~/easy-rsa.tgz --strip-components=1 --no-same-owner --directory /etc/openvpn/easy-rsa\n\t\trm -f ~/easy-rsa.tgz\n\n\t\tcd /etc/openvpn/easy-rsa/ || return\n\t\tcase $CERT_TYPE in\n\t\t1)\n\t\t\techo \"set_var EASYRSA_ALGO ec\" >vars\n\t\t\techo \"set_var EASYRSA_CURVE $CERT_CURVE\" >>vars\n\t\t\t;;\n\t\t2)\n\t\t\techo \"set_var EASYRSA_KEY_SIZE $RSA_KEY_SIZE\" >vars\n\t\t\t;;\n\t\tesac\n\n\t\t# Generate a random, alphanumeric identifier of 16 characters for CN and one for server name\n\t\tSERVER_CN=\"cn_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)\"\n\t\techo \"$SERVER_CN\" >SERVER_CN_GENERATED\n\t\tSERVER_NAME=\"server_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)\"\n\t\techo \"$SERVER_NAME\" >SERVER_NAME_GENERATED\n\n\t\t# Create the PKI, set up the CA, the DH params and the server certificate\n\t\t./easyrsa init-pki\n\t\tEASYRSA_CA_EXPIRE=3650 ./easyrsa --batch --req-cn=\"$SERVER_CN\" build-ca nopass\n\n\t\tif [[ $DH_TYPE == \"2\" ]]; then\n\t\t\t# ECDH keys are generated on-the-fly so we don't need to generate them beforehand\n\t\t\topenssl dhparam -out dh.pem $DH_KEY_SIZE\n\t\tfi\n\n\t\tEASYRSA_CERT_EXPIRE=3650 ./easyrsa --batch build-server-full \"$SERVER_NAME\" nopass\n\t\tEASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl\n\n\t\tcase $TLS_SIG in\n\t\t1)\n\t\t\t# Generate tls-crypt key\n\t\t\topenvpn --genkey --secret /etc/openvpn/tls-crypt.key\n\t\t\t;;\n\t\t2)\n\t\t\t# Generate tls-auth key\n\t\t\topenvpn --genkey --secret /etc/openvpn/tls-auth.key\n\t\t\t;;\n\t\tesac\n\telse\n\t\t# If easy-rsa is already installed, grab the generated SERVER_NAME\n\t\t# for client configs\n\t\tcd /etc/openvpn/easy-rsa/ || return\n\t\tSERVER_NAME=$(cat SERVER_NAME_GENERATED)\n\tfi\n\n\t# Move all the generated files\n\tcp pki/ca.crt pki/private/ca.key \"pki/issued/$SERVER_NAME.crt\" \"pki/private/$SERVER_NAME.key\" /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn\n\tif [[ $DH_TYPE == \"2\" ]]; then\n\t\tcp dh.pem /etc/openvpn\n\tfi\n\n\t# Make cert revocation list readable for non-root\n\tchmod 644 /etc/openvpn/crl.pem\n\n\t# Generate server.conf\n\techo \"port $PORT\" >/etc/openvpn/server.conf\n\tif [[ $IPV6_SUPPORT == 'n' ]]; then\n\t\techo \"proto $PROTOCOL\" >>/etc/openvpn/server.conf\n\telif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\techo \"proto ${PROTOCOL}6\" >>/etc/openvpn/server.conf\n\tfi\n\n\techo \"dev tun\nuser nobody\ngroup $NOGROUP\npersist-key\npersist-tun\nkeepalive 10 120\ntopology subnet\nserver 10.8.0.0 255.255.255.0\nifconfig-pool-persist ipp.txt\" >>/etc/openvpn/server.conf\n\n\t# DNS resolvers\n\tcase $DNS in\n\t1) # Current system resolvers\n\t\t# Locate the proper resolv.conf\n\t\t# Needed for systems running systemd-resolved\n\t\tif grep -q \"127.0.0.53\" \"/etc/resolv.conf\"; then\n\t\t\tRESOLVCONF='/run/systemd/resolve/resolv.conf'\n\t\telse\n\t\t\tRESOLVCONF='/etc/resolv.conf'\n\t\tfi\n\t\t# Obtain the resolvers from resolv.conf and use them for OpenVPN\n\t\tsed -ne 's/^nameserver[[:space:]]\\+\\([^[:space:]]\\+\\).*$/\\1/p' $RESOLVCONF | while read -r line; do\n\t\t\t# Copy, if it's a IPv4 |or| if IPv6 is enabled, IPv4/IPv6 does not matter\n\t\t\tif [[ $line =~ ^[0-9.]*$ ]] || [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\t\t\techo \"push \\\"dhcp-option DNS $line\\\"\" >>/etc/openvpn/server.conf\n\t\t\tfi\n\t\tdone\n\t\t;;\n\t2) # Self-hosted DNS resolver (Unbound)\n\t\techo 'push \"dhcp-option DNS 10.8.0.1\"' >>/etc/openvpn/server.conf\n\t\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\t\techo 'push \"dhcp-option DNS fd42:42:42:42::1\"' >>/etc/openvpn/server.conf\n\t\tfi\n\t\t;;\n\t3) # Cloudflare\n\t\techo 'push \"dhcp-option DNS 1.0.0.1\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 1.1.1.1\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t4) # Quad9\n\t\techo 'push \"dhcp-option DNS 9.9.9.9\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 149.112.112.112\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t5) # Quad9 uncensored\n\t\techo 'push \"dhcp-option DNS 9.9.9.10\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 149.112.112.10\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t6) # FDN\n\t\techo 'push \"dhcp-option DNS 80.67.169.40\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 80.67.169.12\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t7) # DNS.WATCH\n\t\techo 'push \"dhcp-option DNS 84.200.69.80\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 84.200.70.40\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t8) # OpenDNS\n\t\techo 'push \"dhcp-option DNS 208.67.222.222\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 208.67.220.220\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t9) # Google\n\t\techo 'push \"dhcp-option DNS 8.8.8.8\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 8.8.4.4\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t10) # Yandex Basic\n\t\techo 'push \"dhcp-option DNS 77.88.8.8\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 77.88.8.1\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t11) # AdGuard DNS\n\t\techo 'push \"dhcp-option DNS 94.140.14.14\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 94.140.15.15\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t12) # NextDNS\n\t\techo 'push \"dhcp-option DNS 45.90.28.167\"' >>/etc/openvpn/server.conf\n\t\techo 'push \"dhcp-option DNS 45.90.30.167\"' >>/etc/openvpn/server.conf\n\t\t;;\n\t13) # Custom DNS\n\t\techo \"push \\\"dhcp-option DNS $DNS1\\\"\" >>/etc/openvpn/server.conf\n\t\tif [[ $DNS2 != \"\" ]]; then\n\t\t\techo \"push \\\"dhcp-option DNS $DNS2\\\"\" >>/etc/openvpn/server.conf\n\t\tfi\n\t\t;;\n\tesac\n\techo 'push \"redirect-gateway def1 bypass-dhcp\"' >>/etc/openvpn/server.conf\n\n\t# IPv6 network settings if needed\n\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\techo 'server-ipv6 fd42:42:42:42::/112\ntun-ipv6\npush tun-ipv6\npush \"route-ipv6 2000::/3\"\npush \"redirect-gateway ipv6\"' >>/etc/openvpn/server.conf\n\tfi\n\n\tif [[ $COMPRESSION_ENABLED == \"y\" ]]; then\n\t\techo \"compress $COMPRESSION_ALG\" >>/etc/openvpn/server.conf\n\tfi\n\n\tif [[ $DH_TYPE == \"1\" ]]; then\n\t\techo \"dh none\" >>/etc/openvpn/server.conf\n\t\techo \"ecdh-curve $DH_CURVE\" >>/etc/openvpn/server.conf\n\telif [[ $DH_TYPE == \"2\" ]]; then\n\t\techo \"dh dh.pem\" >>/etc/openvpn/server.conf\n\tfi\n\n\tcase $TLS_SIG in\n\t1)\n\t\techo \"tls-crypt tls-crypt.key\" >>/etc/openvpn/server.conf\n\t\t;;\n\t2)\n\t\techo \"tls-auth tls-auth.key 0\" >>/etc/openvpn/server.conf\n\t\t;;\n\tesac\n\n\techo \"crl-verify crl.pem\nca ca.crt\ncert $SERVER_NAME.crt\nkey $SERVER_NAME.key\nauth $HMAC_ALG\ncipher $CIPHER\nncp-ciphers $CIPHER\ntls-server\ntls-version-min 1.2\ntls-cipher $CC_CIPHER\nclient-config-dir /etc/openvpn/ccd\nstatus /var/log/openvpn/status.log\nverb 3\" >>/etc/openvpn/server.conf\n\n\t# Create client-config-dir dir\n\tmkdir -p /etc/openvpn/ccd\n\t# Create log dir\n\tmkdir -p /var/log/openvpn\n\n\t# Enable routing\n\techo 'net.ipv4.ip_forward=1' >/etc/sysctl.d/99-openvpn.conf\n\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\techo 'net.ipv6.conf.all.forwarding=1' >>/etc/sysctl.d/99-openvpn.conf\n\tfi\n\t# Apply sysctl rules\n\tsysctl --system\n\n\t# If SELinux is enabled and a custom port was selected, we need this\n\tif hash sestatus 2>/dev/null; then\n\t\tif sestatus | grep \"Current mode\" | grep -qs \"enforcing\"; then\n\t\t\tif [[ $PORT != '1194' ]]; then\n\t\t\t\tsemanage port -a -t openvpn_port_t -p \"$PROTOCOL\" \"$PORT\"\n\t\t\tfi\n\t\tfi\n\tfi\n\n\t# Finally, restart and enable OpenVPN\n\tif [[ $OS == 'arch' || $OS == 'fedora' || $OS == 'centos' || $OS == 'oracle' ]]; then\n\t\t# Don't modify package-provided service\n\t\tcp /usr/lib/systemd/system/openvpn-server@.service /etc/systemd/system/openvpn-server@.service\n\n\t\t# Workaround to fix OpenVPN service on OpenVZ\n\t\tsed -i 's|LimitNPROC|#LimitNPROC|' /etc/systemd/system/openvpn-server@.service\n\t\t# Another workaround to keep using /etc/openvpn/\n\t\tsed -i 's|/etc/openvpn/server|/etc/openvpn|' /etc/systemd/system/openvpn-server@.service\n\n\t\tsystemctl daemon-reload\n\t\tsystemctl enable openvpn-server@server\n\t\tsystemctl restart openvpn-server@server\n\telif [[ $OS == \"ubuntu\" ]] && [[ $VERSION_ID == \"16.04\" ]]; then\n\t\t# On Ubuntu 16.04, we use the package from the OpenVPN repo\n\t\t# This package uses a sysvinit service\n\t\tsystemctl enable openvpn\n\t\tsystemctl start openvpn\n\telse\n\t\t# Don't modify package-provided service\n\t\tcp /lib/systemd/system/openvpn\\@.service /etc/systemd/system/openvpn\\@.service\n\n\t\t# Workaround to fix OpenVPN service on OpenVZ\n\t\tsed -i 's|LimitNPROC|#LimitNPROC|' /etc/systemd/system/openvpn\\@.service\n\t\t# Another workaround to keep using /etc/openvpn/\n\t\tsed -i 's|/etc/openvpn/server|/etc/openvpn|' /etc/systemd/system/openvpn\\@.service\n\n\t\tsystemctl daemon-reload\n\t\tsystemctl enable openvpn@server\n\t\tsystemctl restart openvpn@server\n\tfi\n\n\tif [[ $DNS == 2 ]]; then\n\t\tinstallUnbound\n\tfi\n\n\t# Add iptables rules in two scripts\n\tmkdir -p /etc/iptables\n\n\t# Script to add rules\n\techo \"#!/bin/sh\niptables -t nat -I POSTROUTING 1 -s 10.8.0.0/24 -o $NIC -j MASQUERADE\niptables -I INPUT 1 -i tun0 -j ACCEPT\niptables -I FORWARD 1 -i $NIC -o tun0 -j ACCEPT\niptables -I FORWARD 1 -i tun0 -o $NIC -j ACCEPT\niptables -I INPUT 1 -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT\" >/etc/iptables/add-openvpn-rules.sh\n\n\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\techo \"ip6tables -t nat -I POSTROUTING 1 -s fd42:42:42:42::/112 -o $NIC -j MASQUERADE\nip6tables -I INPUT 1 -i tun0 -j ACCEPT\nip6tables -I FORWARD 1 -i $NIC -o tun0 -j ACCEPT\nip6tables -I FORWARD 1 -i tun0 -o $NIC -j ACCEPT\nip6tables -I INPUT 1 -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT\" >>/etc/iptables/add-openvpn-rules.sh\n\tfi\n\n\t# Script to remove rules\n\techo \"#!/bin/sh\niptables -t nat -D POSTROUTING -s 10.8.0.0/24 -o $NIC -j MASQUERADE\niptables -D INPUT -i tun0 -j ACCEPT\niptables -D FORWARD -i $NIC -o tun0 -j ACCEPT\niptables -D FORWARD -i tun0 -o $NIC -j ACCEPT\niptables -D INPUT -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT\" >/etc/iptables/rm-openvpn-rules.sh\n\n\tif [[ $IPV6_SUPPORT == 'y' ]]; then\n\t\techo \"ip6tables -t nat -D POSTROUTING -s fd42:42:42:42::/112 -o $NIC -j MASQUERADE\nip6tables -D INPUT -i tun0 -j ACCEPT\nip6tables -D FORWARD -i $NIC -o tun0 -j ACCEPT\nip6tables -D FORWARD -i tun0 -o $NIC -j ACCEPT\nip6tables -D INPUT -i $NIC -p $PROTOCOL --dport $PORT -j ACCEPT\" >>/etc/iptables/rm-openvpn-rules.sh\n\tfi\n\n\tchmod +x /etc/iptables/add-openvpn-rules.sh\n\tchmod +x /etc/iptables/rm-openvpn-rules.sh\n\n\t# Handle the rules via a systemd script\n\techo \"[Unit]\nDescription=iptables rules for OpenVPN\nBefore=network-online.target\nWants=network-online.target\n\n[Service]\nType=oneshot\nExecStart=/etc/iptables/add-openvpn-rules.sh\nExecStop=/etc/iptables/rm-openvpn-rules.sh\nRemainAfterExit=yes\n\n[Install]\nWantedBy=multi-user.target\" >/etc/systemd/system/iptables-openvpn.service\n\n\t# Enable service and apply rules\n\tsystemctl daemon-reload\n\tsystemctl enable iptables-openvpn\n\tsystemctl start iptables-openvpn\n\n\t# If the server is behind a NAT, use the correct IP address for the clients to connect to\n\tif [[ $ENDPOINT != \"\" ]]; then\n\t\tIP=$ENDPOINT\n\tfi\n\n\t# client-template.txt is created so we have a template to add further users later\n\techo \"client\" >/etc/openvpn/client-template.txt\n\tif [[ $PROTOCOL == 'udp' ]]; then\n\t\techo \"proto udp\" >>/etc/openvpn/client-template.txt\n\t\techo \"explicit-exit-notify\" >>/etc/openvpn/client-template.txt\n\telif [[ $PROTOCOL == 'tcp' ]]; then\n\t\techo \"proto tcp-client\" >>/etc/openvpn/client-template.txt\n\tfi\n\techo \"remote $IP $PORT\ndev tun\nresolv-retry infinite\nnobind\npersist-key\npersist-tun\nremote-cert-tls server\nverify-x509-name $SERVER_NAME name\nauth $HMAC_ALG\nauth-nocache\ncipher $CIPHER\ntls-client\ntls-version-min 1.2\ntls-cipher $CC_CIPHER\nignore-unknown-option block-outside-dns\nsetenv opt block-outside-dns # Prevent Windows 10 DNS leak\nverb 3\" >>/etc/openvpn/client-template.txt\n\n\tif [[ $COMPRESSION_ENABLED == \"y\" ]]; then\n\t\techo \"compress $COMPRESSION_ALG\" >>/etc/openvpn/client-template.txt\n\tfi\n\n\t# Generate the custom client.ovpn\n\tnewClient\n\techo \"If you want to add more clients, you simply need to run this script another time!\"\n}\n\nfunction newClient() {\n\techo \"\"\n\techo \"Tell me a name for the client.\"\n\techo \"The name must consist of alphanumeric character. It may also include an underscore or a dash.\"\n\n\tuntil [[ $CLIENT =~ ^[a-zA-Z0-9_-]+$ ]]; do\n\t\tread -rp \"Client name: \" -e CLIENT\n\tdone\n\n\techo \"\"\n\techo \"Do you want to protect the configuration file with a password?\"\n\techo \"(e.g. encrypt the private key with a password)\"\n\techo \"   1) Add a passwordless client\"\n\techo \"   2) Use a password for the client\"\n\n\tuntil [[ $PASS =~ ^[1-2]$ ]]; do\n\t\tread -rp \"Select an option [1-2]: \" -e -i 1 PASS\n\tdone\n\n\tCLIENTEXISTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c -E \"/CN=$CLIENT\\$\")\n\tif [[ $CLIENTEXISTS == '1' ]]; then\n\t\techo \"\"\n\t\techo \"The specified client CN was already found in easy-rsa, please choose another name.\"\n\t\texit\n\telse\n\t\tcd /etc/openvpn/easy-rsa/ || return\n\t\tcase $PASS in\n\t\t1)\n\t\t\tEASYRSA_CERT_EXPIRE=3650 ./easyrsa --batch build-client-full \"$CLIENT\" nopass\n\t\t\t;;\n\t\t2)\n\t\t\techo \"⚠️ You will be asked for the client password below ⚠️\"\n\t\t\tEASYRSA_CERT_EXPIRE=3650 ./easyrsa --batch build-client-full \"$CLIENT\"\n\t\t\t;;\n\t\tesac\n\t\techo \"Client $CLIENT added.\"\n\tfi\n\n\t# Home directory of the user, where the client configuration will be written\n\tif [ -e \"/home/${CLIENT}\" ]; then\n\t\t# if $1 is a user name\n\t\thomeDir=\"/home/${CLIENT}\"\n\telif [ \"${SUDO_USER}\" ]; then\n\t\t# if not, use SUDO_USER\n\t\tif [ \"${SUDO_USER}\" == \"root\" ]; then\n\t\t\t# If running sudo as root\n\t\t\thomeDir=\"/root\"\n\t\telse\n\t\t\thomeDir=\"/home/${SUDO_USER}\"\n\t\tfi\n\telse\n\t\t# if not SUDO_USER, use /root\n\t\thomeDir=\"/root\"\n\tfi\n\n\t# Determine if we use tls-auth or tls-crypt\n\tif grep -qs \"^tls-crypt\" /etc/openvpn/server.conf; then\n\t\tTLS_SIG=\"1\"\n\telif grep -qs \"^tls-auth\" /etc/openvpn/server.conf; then\n\t\tTLS_SIG=\"2\"\n\tfi\n\n\t# Generates the custom client.ovpn\n\tcp /etc/openvpn/client-template.txt \"$homeDir/$CLIENT.ovpn\"\n\t{\n\t\techo \"<ca>\"\n\t\tcat \"/etc/openvpn/easy-rsa/pki/ca.crt\"\n\t\techo \"</ca>\"\n\n\t\techo \"<cert>\"\n\t\tawk '/BEGIN/,/END CERTIFICATE/' \"/etc/openvpn/easy-rsa/pki/issued/$CLIENT.crt\"\n\t\techo \"</cert>\"\n\n\t\techo \"<key>\"\n\t\tcat \"/etc/openvpn/easy-rsa/pki/private/$CLIENT.key\"\n\t\techo \"</key>\"\n\n\t\tcase $TLS_SIG in\n\t\t1)\n\t\t\techo \"<tls-crypt>\"\n\t\t\tcat /etc/openvpn/tls-crypt.key\n\t\t\techo \"</tls-crypt>\"\n\t\t\t;;\n\t\t2)\n\t\t\techo \"key-direction 1\"\n\t\t\techo \"<tls-auth>\"\n\t\t\tcat /etc/openvpn/tls-auth.key\n\t\t\techo \"</tls-auth>\"\n\t\t\t;;\n\t\tesac\n\t} >>\"$homeDir/$CLIENT.ovpn\"\n\n\techo \"\"\n\techo \"The configuration file has been written to $homeDir/$CLIENT.ovpn.\"\n\techo \"Download the .ovpn file and import it in your OpenVPN client.\"\n\n\texit 0\n}\n\nfunction revokeClient() {\n\tNUMBEROFCLIENTS=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep -c \"^V\")\n\tif [[ $NUMBEROFCLIENTS == '0' ]]; then\n\t\techo \"\"\n\t\techo \"You have no existing clients!\"\n\t\texit 1\n\tfi\n\n\techo \"\"\n\techo \"Select the existing client certificate you want to revoke\"\n\ttail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep \"^V\" | cut -d '=' -f 2 | nl -s ') '\n\tuntil [[ $CLIENTNUMBER -ge 1 && $CLIENTNUMBER -le $NUMBEROFCLIENTS ]]; do\n\t\tif [[ $CLIENTNUMBER == '1' ]]; then\n\t\t\tread -rp \"Select one client [1]: \" CLIENTNUMBER\n\t\telse\n\t\t\tread -rp \"Select one client [1-$NUMBEROFCLIENTS]: \" CLIENTNUMBER\n\t\tfi\n\tdone\n\tCLIENT=$(tail -n +2 /etc/openvpn/easy-rsa/pki/index.txt | grep \"^V\" | cut -d '=' -f 2 | sed -n \"$CLIENTNUMBER\"p)\n\tcd /etc/openvpn/easy-rsa/ || return\n\t./easyrsa --batch revoke \"$CLIENT\"\n\tEASYRSA_CRL_DAYS=3650 ./easyrsa gen-crl\n\trm -f /etc/openvpn/crl.pem\n\tcp /etc/openvpn/easy-rsa/pki/crl.pem /etc/openvpn/crl.pem\n\tchmod 644 /etc/openvpn/crl.pem\n\tfind /home/ -maxdepth 2 -name \"$CLIENT.ovpn\" -delete\n\trm -f \"/root/$CLIENT.ovpn\"\n\tsed -i \"/^$CLIENT,.*/d\" /etc/openvpn/ipp.txt\n\tcp /etc/openvpn/easy-rsa/pki/index.txt{,.bk}\n\n\techo \"\"\n\techo \"Certificate for client $CLIENT revoked.\"\n}\n\nfunction removeUnbound() {\n\t# Remove OpenVPN-related config\n\tsed -i '/include: \\/etc\\/unbound\\/openvpn.conf/d' /etc/unbound/unbound.conf\n\trm /etc/unbound/openvpn.conf\n\n\tuntil [[ $REMOVE_UNBOUND =~ (y|n) ]]; do\n\t\techo \"\"\n\t\techo \"If you were already using Unbound before installing OpenVPN, I removed the configuration related to OpenVPN.\"\n\t\tread -rp \"Do you want to completely remove Unbound? [y/n]: \" -e REMOVE_UNBOUND\n\tdone\n\n\tif [[ $REMOVE_UNBOUND == 'y' ]]; then\n\t\t# Stop Unbound\n\t\tsystemctl stop unbound\n\n\t\tif [[ $OS =~ (debian|ubuntu) ]]; then\n\t\t\tapt-get remove --purge -y unbound\n\t\telif [[ $OS == 'arch' ]]; then\n\t\t\tpacman --noconfirm -R unbound\n\t\telif [[ $OS =~ (centos|amzn|oracle) ]]; then\n\t\t\tyum remove -y unbound\n\t\telif [[ $OS == 'fedora' ]]; then\n\t\t\tdnf remove -y unbound\n\t\tfi\n\n\t\trm -rf /etc/unbound/\n\n\t\techo \"\"\n\t\techo \"Unbound removed!\"\n\telse\n\t\tsystemctl restart unbound\n\t\techo \"\"\n\t\techo \"Unbound wasn't removed.\"\n\tfi\n}\n\nfunction removeOpenVPN() {\n\techo \"\"\n\tread -rp \"Do you really want to remove OpenVPN? [y/n]: \" -e -i n REMOVE\n\tif [[ $REMOVE == 'y' ]]; then\n\t\t# Get OpenVPN port from the configuration\n\t\tPORT=$(grep '^port ' /etc/openvpn/server.conf | cut -d \" \" -f 2)\n\t\tPROTOCOL=$(grep '^proto ' /etc/openvpn/server.conf | cut -d \" \" -f 2)\n\n\t\t# Stop OpenVPN\n\t\tif [[ $OS =~ (fedora|arch|centos|oracle) ]]; then\n\t\t\tsystemctl disable openvpn-server@server\n\t\t\tsystemctl stop openvpn-server@server\n\t\t\t# Remove customised service\n\t\t\trm /etc/systemd/system/openvpn-server@.service\n\t\telif [[ $OS == \"ubuntu\" ]] && [[ $VERSION_ID == \"16.04\" ]]; then\n\t\t\tsystemctl disable openvpn\n\t\t\tsystemctl stop openvpn\n\t\telse\n\t\t\tsystemctl disable openvpn@server\n\t\t\tsystemctl stop openvpn@server\n\t\t\t# Remove customised service\n\t\t\trm /etc/systemd/system/openvpn\\@.service\n\t\tfi\n\n\t\t# Remove the iptables rules related to the script\n\t\tsystemctl stop iptables-openvpn\n\t\t# Cleanup\n\t\tsystemctl disable iptables-openvpn\n\t\trm /etc/systemd/system/iptables-openvpn.service\n\t\tsystemctl daemon-reload\n\t\trm /etc/iptables/add-openvpn-rules.sh\n\t\trm /etc/iptables/rm-openvpn-rules.sh\n\n\t\t# SELinux\n\t\tif hash sestatus 2>/dev/null; then\n\t\t\tif sestatus | grep \"Current mode\" | grep -qs \"enforcing\"; then\n\t\t\t\tif [[ $PORT != '1194' ]]; then\n\t\t\t\t\tsemanage port -d -t openvpn_port_t -p \"$PROTOCOL\" \"$PORT\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\t\tif [[ $OS =~ (debian|ubuntu) ]]; then\n\t\t\tapt-get remove --purge -y openvpn\n\t\t\tif [[ -e /etc/apt/sources.list.d/openvpn.list ]]; then\n\t\t\t\trm /etc/apt/sources.list.d/openvpn.list\n\t\t\t\tapt-get update\n\t\t\tfi\n\t\telif [[ $OS == 'arch' ]]; then\n\t\t\tpacman --noconfirm -R openvpn\n\t\telif [[ $OS =~ (centos|amzn|oracle) ]]; then\n\t\t\tyum remove -y openvpn\n\t\telif [[ $OS == 'fedora' ]]; then\n\t\t\tdnf remove -y openvpn\n\t\tfi\n\n\t\t# Cleanup\n\t\tfind /home/ -maxdepth 2 -name \"*.ovpn\" -delete\n\t\tfind /root/ -maxdepth 1 -name \"*.ovpn\" -delete\n\t\trm -rf /etc/openvpn\n\t\trm -rf /usr/share/doc/openvpn*\n\t\trm -f /etc/sysctl.d/99-openvpn.conf\n\t\trm -rf /var/log/openvpn\n\n\t\t# Unbound\n\t\tif [[ -e /etc/unbound/openvpn.conf ]]; then\n\t\t\tremoveUnbound\n\t\tfi\n\t\techo \"\"\n\t\techo \"OpenVPN removed!\"\n\telse\n\t\techo \"\"\n\t\techo \"Removal aborted!\"\n\tfi\n}\n\nfunction manageMenu() {\n\techo \"Welcome to OpenVPN-install!\"\n\techo \"The git repository is available at: https://github.com/angristan/openvpn-install\"\n\techo \"\"\n\techo \"It looks like OpenVPN is already installed.\"\n\techo \"\"\n\techo \"What do you want to do?\"\n\techo \"   1) Add a new user\"\n\techo \"   2) Revoke existing user\"\n\techo \"   3) Remove OpenVPN\"\n\techo \"   4) Exit\"\n\tuntil [[ $MENU_OPTION =~ ^[1-4]$ ]]; do\n\t\tread -rp \"Select an option [1-4]: \" MENU_OPTION\n\tdone\n\n\tcase $MENU_OPTION in\n\t1)\n\t\tnewClient\n\t\t;;\n\t2)\n\t\trevokeClient\n\t\t;;\n\t3)\n\t\tremoveOpenVPN\n\t\t;;\n\t4)\n\t\texit 0\n\t\t;;\n\tesac\n}\n\n# Check for root, TUN, OS...\ninitialCheck\n\n# Check if OpenVPN is already installed\nif [[ -e /etc/openvpn/server.conf && $AUTO_INSTALL != \"y\" ]]; then\n\tmanageMenu\nelse\n\tinstallOpenVPN\nfi\n"
        }
      ]
    }
  ]
}