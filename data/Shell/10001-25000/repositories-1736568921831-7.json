{
  "metadata": {
    "timestamp": 1736568921831,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "inkonchain/node",
      "stars": 20048,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".env.example",
          "type": "blob",
          "size": 1.787109375,
          "content": "###############################################################################\n#                                ↓ REQUIRED ↓                                 #\n###############################################################################\n\n# Network to run the node on (\"ink-mainnet\", \"ink-sepolia\", etc.)\nNETWORK_NAME=ink-mainnet\n\n# Type of node to run (\"full\" or \"archive\"), note that \"archive\" is 10x bigger\nNODE_TYPE=archive\n\n# L1 node that the op-node (Bedrock) will get chain data from\nOP_NODE__RPC_ENDPOINT=\n\n# L1 beacon endpoint, you can setup your own or use Quicknode\nOP_NODE__L1_BEACON=\n\n# Type of RPC that op-node is connected to, see README\nOP_NODE__RPC_TYPE=quicknode\n\n# L2 RPC to compare your local node against (https://rpc-gel-sepolia.inkonchain.com for ink-sepolia or https://rpc-gel.inkonchain.com for ink-mainnet)\nHEALTHCHECK__REFERENCE_RPC_PROVIDER=https://rpc-gel.inkonchain.com\n\n\n###############################################################################\n#                                ↓ OPTIONAL ↓                                 #\n###############################################################################\n\n# Set to \"full\" to force op-geth to use --syncmode=full\nOP_GETH__SYNCMODE=\n\n# Feel free to customize your image tag if you want, uses \"latest\" by default\n# See here for all available images: https://hub.docker.com/u/ethereumoptimism\nIMAGE_TAG__DTL=\nIMAGE_TAG__HEALTCHECK=\nIMAGE_TAG__PROMETHEUS=\nIMAGE_TAG__GRAFANA=\nIMAGE_TAG__INFLUXDB=\nIMAGE_TAG__OP_GETH=\nIMAGE_TAG__OP_NODE=\n\n# Exposed server ports (must be unique)\n# See docker-compose.yml for default values\nPORT__DTL=\nPORT__HEALTHCHECK_METRICS=\nPORT__PROMETHEUS=\nPORT__GRAFANA=\nPORT__INFLUXDB=\nPORT__TORRENT_UI=\nPORT__TORRENT=\nPORT__OP_GETH_HTTP=\nPORT__OP_GETH_WS=\nPORT__OP_GETH_P2P=\nPORT__OP_NODE_P2P=\nPORT__OP_NODE_HTTP=\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0302734375,
          "content": ".env\n.env.sepolia\n.env.mainnet\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.046875,
          "content": "(The MIT License)\n\nCopyright 2020-2022 Optimism\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4072265625,
          "content": "# Ink Node\n\n> Forked and customized from https://github.com/smartcontracts/simple-optimism-node\n\nA simple docker compose script for launching full / archive node for the Ink chain.\n\n## Recommended Hardware\n\n### Mainnet\n\n- 16GB+ RAM\n- 2 TB SSD (NVME Recommended)\n- 100mb/s+ Download\n\n### Testnet\n\n- 16GB+ RAM\n- 500 GB SSD (NVME Recommended)\n- 100mb/s+ Download\n\n## Installation and Configuration\n\n### Install docker and docker compose\n\n> Note: If you're not logged in as root, you'll need to log out and log in again after installation to complete the docker installation.\n\nNote: This command installs docker and docker compose for Ubuntu. For windows and mac desktop or laptop, please use Docker Desktop. For other OS, please find instruction in Google.\n\n```sh\n# Update and upgrade packages\nsudo apt-get update\nsudo apt-get upgrade -y\n\n### Docker and docker compose prerequisites\nsudo apt-get install -y curl\nsudo apt-get install -y gnupg\nsudo apt-get install -y ca-certificates\nsudo apt-get install -y lsb-release\n\n### Download the docker gpg file to Ubuntu\nsudo mkdir -p /etc/apt/keyrings\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg\n\n### Add Docker and docker compose support to the Ubuntu's packages list\necho \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\" | sudo tee /etc/apt/sources.list.d/docker.list > /dev/null\n\nsudo apt-get update\n\n### Install docker and docker compose on Ubuntu\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-compose-plugin\n\nsudo usermod -aG docker $(whoami)\n\n### Verify the Docker and docker compose install on Ubuntu\nsudo docker run hello-world\n```\n\n(For non-root user) After logged out and logged back in, test if docker is working by running.\n\n```sh\ndocker ps\n```\n\nIt should returns an empty container list without having any error. Otherwise, restart your machine if there are errors.\n\n### Clone the Repository\n\n```sh\ngit clone https://github.com/inkonchain/node\ncd node\n```\n\n### Copy .env.example to .env\n\nMake a copy of `.env.example` named `.env`.\n\n```sh\ncp .env.example .env\n```\n\nOpen `.env` with your editor of choice\n\n### Mandatory configurations\n\n- **NETWORK_NAME** - Choose which Optimism network layer you want to operate on:\n  - `ink-sepolia` - Ink Sepolia (Testnet)\n  - `ink-mainnet` - Ink (Mainnet)\n- **NODE_TYPE** - Choose the type of node you want to run:\n  - `full` (Full node) - A Full node contains a few recent blocks without historical states.\n  - `archive` (Archive node) - An Archive node stores the complete history of the blockchain, including historical states.\n- **OP_NODE\\_\\_RPC_ENDPOINT** - Specify the endpoint for the RPC of Layer 1 (e.g., Ethereum mainnet). For instance, you can use the free plan of Quicknode for the Ethereum mainnet.\n- **OP_NODE\\_\\_L1_BEACON** - Specify the beacon endpoint of Layer 1. You can use [QuickNode for the beacon endpoint](https://www.quicknode.com). For example: https://xxx-xxx-xxx.quiknode.pro/db55a3908ba7e4e5756319ffd71ec270b09a7dce\n- **OP_NODE\\_\\_RPC_TYPE** - Specify the service provider for the RPC endpoint you've chosen in the previous step. The available options are:\n  - `alchemy` - Alchemy\n  - `quicknode` - Quicknode (ETH only)\n  - `erigon` - Erigon\n  - `basic` - Other providers\n\n### Optional configurations\n\n- **OP_GETH\\_\\_SYNCMODE** - Specify sync mode for the execution client\n  - Unspecified - Use default snap sync for full node and full sync for archive node\n  - `snap` - Snap Sync (Default)\n  - `full` - Full Sync (For archive node, not recommended for full node)\n- **IMAGE_TAG\\_\\_[...]** - Use custom docker image for specified components.\n- **PORT\\_\\_[...]** - Use custom port for specified components.\n\n## Operating the Node\n\n### Start\n\n```sh\ndocker compose up -d --build\n```\n\nWill start the node in a detatched shell (`-d`), meaning the node will continue to run in the background. We recommended to add `--build` to make sure that latest changes are being applied.\n\n### View logs\n\n```sh\ndocker compose logs -f --tail 10\n```\n\nTo view logs of all containers.\n\n```sh\ndocker compose logs <CONTAINER_NAME> -f --tail 10\n```\n\nTo view logs for a specific container. Most commonly used `<CONTAINER_NAME>` are:\n\n- op-geth\n- op-node\n- bedrock-init\n\n### Stop\n\n```sh\ndocker compose down\n```\n\nWill shut down the node without wiping any volumes.\nYou can safely run this command and then restart the node again.\n\n### Restart\n\n```sh\ndocker compose restart\n```\n\nWill restart the node safely with minimal downtime but without upgrading the node.\n\n### Upgrade\n\nPull the latest updates from GitHub, and Docker Hub and rebuild the container.\n\n```sh\ngit pull\ndocker compose pull\ndocker compose up -d --build\n```\n\nWill upgrade your node with minimal downtime.\n\n### Wipe [DANGER]\n\n```sh\ndocker compose down -v\n```\n\nWill shut down the node and WIPE ALL DATA. Proceed with caution!\n\n## Monitoring\n\n### Estimate remaining sync time\n\nRun progress.sh to estimate remaining sync time and speed.\n\nUses `Cast` command from Foundry tool set. Installation instructions here: https://getfoundry.sh/.\n\n```sh\n./progress.sh\n```\n\nThis will show the sync speed in blocks per minute and the time until sync is completed.\n\n```\nChain ID: 57073\nPlease wait\nBlocks per minute: ...\nHours until sync completed: ...\n```\n\n### Grafana dashboard\n\nGrafana is exposed at [http://localhost:3000](http://localhost:3000) and comes with one pre-loaded dashboard (\"Simple Node Dashboard\").\nSimple Node Dashboard includes basic node information and will tell you if your node ever falls out of sync with the reference L2 node or if a state root fault is detected.\n\nUse the following login details to access the dashboard:\n\n- Username: `admin`\n- Password: `ink`\n\nNavigate over to `Dashboards > Manage > Simple Node Dashboard` to see the dashboard, see the following gif if you need help:\n\n![metrics dashboard gif](https://user-images.githubusercontent.com/14298799/171476634-0cb84efd-adbf-4732-9c1d-d737915e1fa7.gif)\n\n## Troubleshooting\n\n### Walking back L1Block with curr=0x0000...:0 next=0x0000...:0\n\nIf you experience \"walking back L1Block with curr=0x0000...:0 next=0x0000...:0\" for a long time after the Ecotone upgrade, consider these fixes:\n\n1. Wait for a few minutes. This issue usually resolves itself after some time.\n2. Restart docker compose: `docker compose down` and `docker compose up -d --build`\n3. If it's still not working, try setting `OP_GETH__SYNCMODE=full` in .env and restart docker compose\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.9443359375,
          "content": "services:\n  healthcheck:\n    image: ethereumoptimism/replica-healthcheck:${IMAGE_TAG__HEALTHCHECK:-latest}\n    restart: unless-stopped\n    env_file:\n      - ./envs/common/healthcheck.env\n      - .env\n    ports:\n      - ${PORT__HEALTHCHECK_METRICS:-7300}:7300\n\n  op-geth:\n    image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-geth:v1.101411.4\n    restart: unless-stopped\n    stop_grace_period: 5m\n    entrypoint: /scripts/start-op-geth.sh\n    env_file:\n      - ./envs/${NETWORK_NAME}/op-geth.env\n      - .env\n    volumes:\n      - ./envs/${NETWORK_NAME}/config:/chainconfig\n      - ./scripts/:/scripts\n      - shared:/shared\n      - op_geth:/geth\n    ports:\n      - ${PORT__OP_GETH_HTTP:-9993}:8545\n      - ${PORT__OP_GETH_WS:-9994}:8546\n      - ${PORT__OP_GETH_P2P:-39393}:${PORT__OP_GETH_P2P:-39393}/udp\n      - ${PORT__OP_GETH_P2P:-39393}:${PORT__OP_GETH_P2P:-39393}/tcp\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  op-node:\n    image: us-docker.pkg.dev/oplabs-tools-artifacts/images/op-node:v1.10.2\n    restart: unless-stopped\n    stop_grace_period: 5m\n    entrypoint: /scripts/start-op-node.sh\n    env_file:\n      - ./envs/${NETWORK_NAME}/op-node.env\n      - .env\n    volumes:\n      - ./envs/${NETWORK_NAME}/config:/chainconfig\n      - ./scripts/:/scripts\n      - shared:/shared\n    ports:\n      - ${PORT__OP_NODE_P2P:-9003}:9003/udp\n      - ${PORT__OP_NODE_P2P:-9003}:9003/tcp\n      - ${PORT__OP_NODE_HTTP:-9545}:9545\n    extra_hosts:\n      - \"host.docker.internal:host-gateway\"\n\n  bedrock-init:\n    build:\n      context: ./docker/dockerfiles\n      dockerfile: Dockerfile.bedrock-init\n    entrypoint: /scripts/init-bedrock.sh\n    env_file:\n      - ./envs/${NETWORK_NAME}/op-geth.env\n      - .env\n    volumes:\n      - ./scripts/:/scripts\n      - shared:/shared\n      - op_geth:/geth\n      - geth:/legacy-geth\n      - torrent_downloads:/downloads\n\n  prometheus:\n    image: prom/prometheus:${IMAGE_TAG__PROMETHEUS:-latest}\n    restart: unless-stopped\n    env_file:\n      - .env\n    volumes:\n      - ./docker/prometheus:/etc/prometheus\n      - prometheus_data:/prometheus\n    ports:\n      - ${PORT__PROMETHEUS:-9090}:9090\n\n  grafana:\n    image: grafana/grafana:${IMAGE_TAG__GRAFANA:-9.3.0}\n    restart: unless-stopped\n    env_file:\n      - ./envs/common/grafana.env\n    volumes:\n      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/:ro\n      - ./docker/grafana/dashboards/simple_node_dashboard.json:/var/lib/grafana/dashboards/simple_node_dashboard.json\n      - grafana_data:/var/lib/grafana\n    ports:\n      - ${PORT__GRAFANA:-3000}:3000\n\n  influxdb:\n    image: influxdb:${IMAGE_TAG__INFLUXDB:-1.8}\n    restart: unless-stopped\n    env_file:\n      - ./envs/common/influxdb.env\n    volumes:\n      - ./docker/influxdb/influx_init.iql:/docker-entrypoint-initdb.d/influx_init.iql\n      - influxdb_data:/var/lib/influxdb\n    ports:\n      - ${PORT__INFLUXDB:-8086}:8086\n\nvolumes:\n  geth:\n  prometheus_data:\n  grafana_data:\n  influxdb_data:\n  shared:\n  op_geth:\n  torrent_downloads:\n"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "envs",
          "type": "tree",
          "content": null
        },
        {
          "name": "progress.sh",
          "type": "blob",
          "size": 2.3291015625,
          "content": "#!/bin/bash\n\n# Make script exit on error and undefined variables\nset -eu\n\n# Function to handle errors\nerror_exit() {\n    echo \"Error: $1\" >&2\n    exit 1\n}\n\n# Load Environment Variables\nif [ -f .env ]; then\n    export $(cat .env | grep -v '#' | sed 's/\\r$//' | awk '/=/ {print $1}' ) || error_exit \"Failed to load .env file\"\nfi\n\n# Set default RPC URL with error checking\nexport ETH_RPC_URL=${ETH_RPC_URL:-http://localhost:${PORT__OP_GETH_HTTP:-9993}}\n[ -z \"$ETH_RPC_URL\" ] && error_exit \"ETH_RPC_URL is not set\"\n\n# Get chain ID with error handling\nCHAIN_ID=$(cast chain-id 2>/dev/null) || error_exit \"Failed to get chain ID\"\necho \"Chain ID: $CHAIN_ID\"\necho \"Sampling, please wait\"\n\n# Set L2_URL based on chain ID\necho \"Determining L2_URL for chain ID: $CHAIN_ID\"\ncase $CHAIN_ID in\n    763373)\n        echo \"Using Sepolia testnet RPC endpoint\"\n        L2_URL=\"https://rpc-gel-sepolia.inkonchain.com\"\n        ;;\n    57073)\n        echo \"Using mainnet RPC endpoint\"\n        L2_URL=\"https://rpc-gel.inkonchain.com/\"\n        ;;\n    *)\n        error_exit \"Unsupported chain ID: $CHAIN_ID\"\n        ;;\nesac\necho \"L2_URL set to: $L2_URL\"\n\necho \"Getting initial block number...\"\nT0=$(cast block-number --rpc-url \"$ETH_RPC_URL\" 2>/dev/null) || error_exit \"Failed to get initial block number\"\necho \"Initial block: $T0\"\necho \"Waiting 10 seconds...\"\nsleep 10\necho \"Getting final block number...\"\nT1=$(cast block-number --rpc-url \"$ETH_RPC_URL\" 2>/dev/null) || error_exit \"Failed to get final block number\"\necho \"Final block: $T1\"\n\n# Calculate blocks per minute\nPER_MIN=$(($T1 - $T0))\nPER_MIN=$(($PER_MIN * 6))\necho \"Blocks per minute: $PER_MIN\"\n\n[ $PER_MIN -eq 0 ] && error_exit \"Not syncing\"\n\n# Get L2 head block with error handling\nHEAD=$(cast block-number --rpc-url \"$L2_URL\" 2>/dev/null) || error_exit \"Failed to get L2 block number\"\nBEHIND=$((HEAD - T1))\n[ $BEHIND -lt 0 ] && error_exit \"L2 is ahead of local node\"\n\n# Calculate time estimates\necho \"Calculating time estimates...\"\nMINUTES=$((BEHIND / PER_MIN))\nHOURS=$((MINUTES / 60))\n\nif [ $MINUTES -le 60 ] ; then\n   echo \"Sync will complete in minutes\"\n   echo \"Minutes until sync completed: $MINUTES\"\nfi\n\nif [ $MINUTES -gt 60 ] ; then\n   echo \"Sync will take hours\"\n   echo \"Hours until sync completed: $HOURS\"\nfi\n\nif [ $HOURS -gt 24 ] ; then\n   echo \"Sync will take days\"\n   DAYS=$((HOURS / 24))\n   echo \"Days until sync complete: $DAYS\"\nfi\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}