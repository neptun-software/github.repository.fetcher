{
  "metadata": {
    "timestamp": 1736568931208,
    "page": 24,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "kaldi-asr/kaldi",
      "stars": 14429,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.6015625,
          "content": "# On Windows it is important to keep unix-style line endings in all egs/ files.\negs/**             eol=lf\n\n# Windows build files fare better when stored in native Windows CR-LF line\n# ending format.\nmsbuild/*.*proj    eol=crlf\nmsbuild/*.targets  eol=crlf\nmsbuild/*.props    eol=crlf\nmsbuild/*.ps1      eol=crlf\n\n# Windows props\nwindows/*.props    eol=crlf\nwindows/generate_solution.pl  eol=native\nwindows/INSTALL*   eol=native\nwindows/NewGuidCmd.exe.config text eol=crlf\nwindows/NewGuidCmd.exe binary\n\n# Prevent git changing CR-LF to LF when archiving (patch requires CR-LF on Windows).\n**/*.patch            -text\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 1.1474609375,
          "content": "# Compiled extensionless executable files in /src/*/\n# This stanza must precede wildcard patterns below!\n/src/*/*\n!/src/lm/test_data/\n!/src/*/?*.*\n!/src/doc/*\n!/src/*/Makefile\n!/src/*/README\n\n# Object files.\n*.slo\n*.lo\n*.o\n*.obj\n*.pyc\n\n# Profiling files and core dumps.\n*.nvprof\ncore\n\n# Compiled dynamic libraries.\n*.so\n*.dylib\n*.dll\n\n# Compiled static libraries.\n*.lai\n*.la\n*.a\n*.lib\n\n# Test log files.\n*.testlog\n\n# Emacs autosave and backup files.\n[#]*[#]\n.[#]*\n*~\n\n# [ecg]tag files.\nTAGS\ntags\nGTAGS\nGRTAGS\nGPATH\nGSYMS\n\n# Python compiled bytecode files.\n*.pyc\n\n# Python virtual environment\nvenv/\n\n# Make dependencies.\n.depend.mk\n\n# Some weird thing that macOS creates.\n*.dSYM\n.DS_Store\n\n# Windows executable, symbol and some weird files.\n*.exe\n*.pdb\n*.exp\n*.manifest\n/kaldiwin_vs*\n.vscode\n.idea\n\n# /src/\n/src/.short_version\n/src/base/version.h\n/src/doc/table/\n/src/doc/tools.dox\n/src/doc/*.html\n/src/htdocs/\n/src/html.tar.gz\n/src/kaldi.mk\n/src/kaldi.mk.tmp\n/src/kaldi.mk.bak\n\n# /egs/\n/egs/*/*/mfcc\n/egs/*/*/plp\n/egs/*/*/exp\n/egs/*/*/data\n/egs/*/*/wav\n/egs/*/*/enhan\n\n# CMakeLists.txt files are currently autogenerated, must not be committed.\n/src/**/CMakeLists.txt\n/build*\n"
        },
        {
          "name": ".gitpod.Dockerfile",
          "type": "blob",
          "size": 0.7763671875,
          "content": "FROM gitpod/workspace-full\n\n# Install custom tools, runtime, etc. using apt-get\n# For example, the command below would install \"bastet\" - a command line tetris clone:\n#\n# RUN sudo apt-get -q update && \n#     sudo apt-get install -yq bastet && \n#     sudo rm -rf /var/lib/apt/lists/*\n#\n# More information: https://www.gitpod.io/docs/config-docker/\n\nFROM gitpod/workspace-full\n\nRUN sudo apt-get update \\\n && sudo apt-get install -y \\\n    sox gfortran \\\n && sudo rm -rf /var/lib/apt/lists/*\n\nRUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS-2019.PUB | sudo apt-key add - \\\n && sudo sh -c 'echo deb https://apt.repos.intel.com/mkl all main > /etc/apt/sources.list.d/intel-mkl.list' \\\n && sudo apt-get update && sudo apt-get install -y intel-mkl-64bit-2020.4-912\n"
        },
        {
          "name": ".gitpod.yml",
          "type": "blob",
          "size": 0.2138671875,
          "content": "image:\n  file: .gitpod.Dockerfile\n\ntasks:\n  - init: echo \"Replace me with a build script for the project.\"\n    command: echo \"Replace me with something that should run on every start, or just\n      remove me entirely.\"\n"
        },
        {
          "name": ".shellcheck.yaml",
          "type": "blob",
          "size": 0.1494140625,
          "content": "# Reference:\n# #   https://github.com/codefactor-io/shellcheck-config\n# #   https://github.com/koalaman/shellcheck/wiki/Checks\nignored:\n-SC2181\n-SC2145\n\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.435546875,
          "content": "notifications:\n  email: false\n\nlanguage: cpp\n\ncache:\n  directories:\n  - $HOME/.ccache\n\nos:\n  - linux\n\naddons:\n  apt:\n    sources:\n      - ubuntu-toolchain-r-test\n      - llvm-toolchain-precise-3.8\n    packages:\n      - gdb\n      - g++-4.9\n      - gfortran-4.9\n      - liblapack-dev\n      - clang-3.8\n      - sox\n\nbranches:\n  only:\n    - master\n    - pybind11\n\nbefore_install:\n  - cat /proc/sys/kernel/core_pattern\n  - export XROOT=~/xroot\n  - tools/extras/travis_install_bindeps.sh $XROOT\n  - export PATH=$XROOT/usr/bin:$PATH\n\nbefore_script:\n  - which ccache\n  - ccache --version\n  - ccache --show-stats\n  - ccache --zero-stats --max-size=3G\n\nenv:\n  - CI_TARGETS=\"all ext\"        # Job1: Build everything.\n  - CI_TARGETS=\"test\"           # Job2: Test libraries. #### ext_test? adds 5min compile, runs 1 test.\n\nscript:\n  # See http://petereisentraut.blogspot.com/2011/05/ccache-and-clang.html and\n  # http://peter.eisentraut.org/blog/2014/12/01/ccache-and-clang-part-3/\n  # for the explanation why extra switches needed for clang with ccache.\n  - CXX=\"ccache clang++-3.8 -Qunused-arguments -fcolor-diagnostics -Wno-tautological-compare\"\n    CFLAGS=\"\"\n    LDFLAGS=\"-llapack -Wl,-fuse-ld=gold\"\n    INCDIRS=\"$XROOT/usr/include\"\n    LIBDIRS=\"$XROOT/usr/lib\"\n      tools/extras/travis_script.sh\n#   To troubleshoot cache, add to above: CI_TARGETS=util CCACHE_LOGFILE=~/ccache.log\n\nbefore_cache:\n  - ccache --show-stats\n\nafter_failure:\n  - tools/extras/travis_show_failures.sh\n"
        },
        {
          "name": "CMakeLists.txt",
          "type": "blob",
          "size": 11.3818359375,
          "content": "cmake_minimum_required(VERSION 3.18)\nproject(kaldi)\n\nif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\n  set(CMAKE_INSTALL_PREFIX ${CMAKE_CURRENT_SOURCE_DIR}/src CACHE PATH \"Install path prefix.\" FORCE)\nendif(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)\nset(CMAKE_MODULE_PATH \"${CMAKE_CURRENT_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}\")\ninclude(GNUInstallDirs)\ninclude(Utils)\n\nif(CONDA_ROOT)\n    message(STATUS \"Adding ${CONDA_ROOT} directories\")\n    set(CMAKE_INCLUDE_PATH \"${CONDA_ROOT}/include\")\n    set(CMAKE_LIBRARY_PATH \"${CONDA_ROOT}/lib\")\n    link_directories(\"${CONDA_ROOT}/lib\")\n    include_directories(\"${CONDA_ROOT}/include\")\n    if (NOT CUDA_TOOLKIT_ROOT_DIR)\n        set(CUDA_TOOLKIT_ROOT_DIR \"${CONDA_ROOT}\")\n    endif()\n\nendif()\n\noption(BuildForFedora \"Build for Fedora. Means that everything is build with Border tools\" NO)\n\nif(BuildForFedora)\n\n    # You also need to install sudo dnf install lapack-devel openfst-devel\n    set(CMAKE_CXX_STANDARD 17)\n    set(CMAKE_CXX_STANDARD_REQUIRED ON)\n    set(CMAKE_CXX_EXTENSIONS OFF)\n\n    #find_package(PkgConfig REQUIRED)\n\n    #pkg_check_modules(FST REQUIRED fst)\n\nelse()\n    include(third_party/get_third_party)\n\n    include(cmake/third_party/openfst.cmake)\nendif()\n\n\nfind_package(PythonInterp)\nif(NOT PYTHON_EXECUTABLE)\n    message(FATAL_ERROR \"Needs python to auto-generate most CMake files, but not found.\")\nendif()\n\nmessage(STATUS \"Running gen_cmake_skeleton.py\")\noption(BUILD_SHARED_LIBS \"Build shared Kaldi libraries.\" OFF)\nset(IS_LIB_SHARE \"\")\nif(BUILD_SHARED_LIBS)\n    set(IS_LIB_SHARE \"--shared\")\nendif()\nexecute_process(COMMAND ${PYTHON_EXECUTABLE}\n    \"${CMAKE_CURRENT_SOURCE_DIR}/cmake/gen_cmake_skeleton.py\"\n    \"${CMAKE_CURRENT_SOURCE_DIR}/src\"\n    \"--quiet\"\n    ${IS_LIB_SHARE}\n)\nunset(IS_LIB_SHARE)\n\nif(BuildForFedora)\nelse()\n    set(CMAKE_CXX_STANDARD 14)\n    set(CMAKE_CXX_EXTENSIONS OFF)\nendif()\nset(CMAKE_INSTALL_MESSAGE LAZY) # hide \"-- Up-to-date: ...\"\nif(BUILD_SHARED_LIBS)\n    set(CMAKE_POSITION_INDEPENDENT_CODE ON)\n    if(WIN32)\n        set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS ON)\n        message(FATAL_ERROR \"DLL is not supported currently\")\n    elseif(APPLE)\n        set(CMAKE_INSTALL_RPATH \"@loader_path\")\n    else()\n        set(CMAKE_INSTALL_RPATH \"$ORIGIN;$ORIGIN/../lib;$ORIGIN/../../tools/openfst/lib\")\n    endif()\nendif()\n\nif(APPLE)\n    # Use built-in BLAS on MacOS by default.\n    set(MATHLIB \"Accelerate\" CACHE STRING \"OpenBLAS|MKL|Accelerate\")\nelse()\n    set(MATHLIB \"OpenBLAS\" CACHE STRING \"OpenBLAS|MKL|Accelerate\")\nendif()\noption(KALDI_BUILD_EXE \"If disabled, will make add_kaldi_executable a no-op\" ON)\noption(KALDI_BUILD_TEST \"If disabled, will make add_kaldi_test_executable a no-op\" ON)\noption(KALDI_USE_PATCH_NUMBER \"Use MAJOR.MINOR.PATCH format, otherwise MAJOR.MINOR\" OFF)\n\nif (KALDI_BUILD_TEST)\n    include(CTest)\n    enable_testing()\nendif()\n\nlink_libraries(${CMAKE_DL_LIBS})\n\nfind_package(Threads)\nlink_libraries(Threads::Threads)\n\nif(CONDA_ROOT)\n    find_package(BLAS REQUIRED)\n    find_package(LAPACK REQUIRED)\n    link_libraries(BLAS::BLAS)\n    link_libraries(LAPACK::LAPACK)\n    # OPENBLAS is equivalent to LAPACKE; see\n    # https://github.com/kaldi-asr/kaldi/blob/master/src/matrix/kaldi-blas.h#L95-L113\n    add_definitions(-DHAVE_OPENBLAS=1)\n    if(MSVC)\n        link_libraries(cblas lapack)\n        # necessary macros to compile on windows, from here:\n        # https://icl.cs.utk.edu/lapack-for-windows/lapack/\n        add_definitions(-DADD_)\n        add_definitions(-DHAVE_LAPACK_CONFIG_H)\n        add_definitions(-DLAPACK_COMPLEX_STRUCTURE)\n    else()\n        include_directories($ENV{PREFIX}/include)\n    endif()\nelse()\n    if(MATHLIB STREQUAL \"OpenBLAS\")\n        add_definitions(-DHAVE_CLAPACK=1)\n        include_directories(${CMAKE_CURRENT_SOURCE_DIR}/tools/CLAPACK)\n        link_libraries(${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})\n    elseif(MATHLIB STREQUAL \"MKL\")\n        if(NOT DEFINED ENV{MKLROOT} OR \"$ENV{MKLROOT}\" STREQUAL \"\")\n            message(FATAL_ERROR \"Environment variable MKLROOT is not defined\")\n        else()\n            message(STATUS \"Finding MKL from \\\"$ENV{MKLROOT}\\\"\")\n        endif()\n        normalize_env_path(ENV{MKLROOT})\n        set(BLA_VENDOR \"Intel10_64lp_seq\") # use the single threaded MKL by default\n        find_package(LAPACK REQUIRED)\n        add_definitions(-DHAVE_MKL=1)\n        include_directories($ENV{MKLROOT}/include)\n        link_libraries(${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})\n    elseif(MATHLIB STREQUAL \"Accelerate\")\n        execute_process(COMMAND sw_vers -productVersion\n            OUTPUT_VARIABLE MACOS_VERSION)\n        if(MACOS_VERSION VERSION_LESS \"10.12\" AND MACOS_VERSION VERSION_GREATER_EQUAL \"10.11\")\n            message(WARNING\n                \"**BAD WARNING**: You are using OS X El Capitan.  Some versions of this OS\"\n                \" have a bug in the BLAS implementation that affects Kaldi.\"\n                \" After compiling, cd to matrix/ and type 'make test'.  The\"\n                \" test will fail if the problem exists in your version.\"\n                \" Eventually this issue will be fixed by system updates from\"\n                \" Apple.  Unexplained crashes with reports of NaNs will\"\n                \" be caused by this bug, but some recipes will (sometimes) work.\"\n            )\n        endif()\n        set(BLA_VENDOR \"Apple\")\n        find_package(BLAS REQUIRED)\n        find_package(LAPACK REQUIRED)\n        add_definitions(-DHAVE_CLAPACK=1)\n        link_libraries(${BLAS_LIBRARIES} ${LAPACK_LIBRARIES})\n    else()\n        message(FATAL_ERROR \"${MATHLIB} is not tested and supported, you are on your own now.\")\n    endif()\nendif()\n\nif(MSVC)\n    # Added in source, but we actually should do it in build script, whatever...\n    # add_definitions(-DWIN32_LEAN_AND_MEAN=1)\n\n    add_compile_options(/permissive- /FS /wd4819 /EHsc /bigobj)\n\n    # some warnings related with fst\n    add_compile_options(/wd4018 /wd4244 /wd4267 /wd4291 /wd4305)\n\n    set(CompilerFlags\n        CMAKE_CXX_FLAGS\n        CMAKE_CXX_FLAGS_DEBUG\n        CMAKE_CXX_FLAGS_RELEASE\n        CMAKE_C_FLAGS\n        CMAKE_C_FLAGS_DEBUG\n        CMAKE_C_FLAGS_RELEASE\n        )\n    foreach(CompilerFlag ${CompilerFlags})\n      string(REPLACE \"/MD\" \"/MT\" ${CompilerFlag} \"${${CompilerFlag}}\")\n    endforeach()\n    set(CUDA_USE_STATIC_CUDA_RUNTIME OFF CACHE INTERNAL \"\")\n    if(NOT DEFINED ENV{CUDAHOSTCXX})\n        set(ENV{CUDAHOSTCXX} ${CMAKE_CXX_COMPILER})\n    endif()\n    if(NOT DEFINED CUDA_HOST_COMPILER)\n        set(CUDA_HOST_COMPILER ${CMAKE_CXX_COMPILER})\n    endif()\nendif()\n\nfind_package(CUDAToolkit)\nfind_package(CUDA)\nif(CUDA_FOUND)\n    set(CUDA_PROPAGATE_HOST_FLAGS ON)\n    if(MSVC)\n        set(KALDI_CUDA_NVCC_FLAGS \"--default-stream=per-thread\") # Fixes incompatibility with cxx14 and cxx17 for Kaldi vs cuda in VS2019\n        list(APPEND KALDI_CUDA_NVCC_FLAGS \"-Xcompiler /permissive-,/FS,/wd4819,/EHsc,/bigobj\")\n        list(APPEND KALDI_CUDA_NVCC_FLAGS \"-Xcompiler /wd4018,/wd4244,/wd4267,/wd4291,/wd4305\")\n        list(APPEND CUDA_NVCC_FLAGS_RELEASE -Xcompiler /MD) # Kaldi will always be dynamically linked to Cuda\n        list(APPEND CUDA_NVCC_FLAGS_DEBUG -Xcompiler /MDd)\n    else()\n    #     list(APPEND KALDI_CUDA_NVCC_FLAGS \"-Xcompiler -std=c++${CMAKE_CXX_STANDARD}\")\n        list(APPEND KALDI_CUDA_NVCC_FLAGS \"-Xcompiler -fPIC\")\n        set(KALDI_CUDA_NVCC_FLAGS \"--default-stream=per-thread;-std=c++${CMAKE_CXX_STANDARD}\")\n    endif()\n    set(CUDA_NVCC_FLAGS ${KALDI_CUDA_NVCC_FLAGS} ${CUDA_NVCC_FLAGS})\n\n    add_definitions(-DHAVE_CUDA=1)\n    add_definitions(-DCUDA_API_PER_THREAD_DEFAULT_STREAM=1)\n    link_libraries(\n        ${CUDA_LIBRARIES}\n        ${CUDA_CUDA_LIBRARY}\n        ${CUDA_CUBLAS_LIBRARIES}\n        ${CUDA_CUFFT_LIBRARIES}\n        ${CUDA_curand_LIBRARY}\n        ${CUDA_cusolver_LIBRARY}\n        ${CUDA_cusparse_LIBRARY})\n\n    find_package(NvToolExt REQUIRED)\n    include_directories(${NvToolExt_INCLUDE_DIR})\n    link_libraries(${NvToolExt_LIBRARIES})\n\n\n    find_package(CUB REQUIRED)\n    include_directories(${CUB_INCLUDE_DIR})\nendif()\n\nadd_definitions(-DKALDI_NO_PORTAUDIO=1)\n\nif(KALDI_VERSION)\n    message(STATUS \"KALDI_VERSION set to \\\"${KALDI_VERSION}\\\"\")\nelse() # Original functionality\n    message(STATUS \"Setting KALDI_VERSION with get_version...\")\n    include(VersionHelper)\n    get_version() # this will set KALDI_VERSION and KALDI_PATCH_NUMBER\n    if(${KALDI_USE_PATCH_NUMBER})\n        set(KALDI_VERSION \"${KALDI_VERSION}.${KALDI_PATCH_NUMBER}\")\n    endif()\nendif()\n\n# get_third_party(openfst)\n# set(OPENFST_ROOT_DIR ${CMAKE_CURRENT_BINARY_DIR}/openfst)\n# include(third_party/openfst_lib_target)\n#find_library(OpenFST_LIBRARY\n#            NAMES fst\n#            PATHS ${CMAKE_CURRENT_SOURCE_DIR}/tools/openfst/lib\n#            REQUIRED)\n#find_path(OpenFST_INCLUDE_DIR\n#            NAMES \"fst/fst.h\"\n#            PATHS \"${CMAKE_CURRENT_SOURCE_DIR}/tools/openfst/include\"\n#            REQUIRED)\n\nif(BuildForFedora)\n    # Version used used by Fedora 41 is 1.83\n    # TODO: Detect the right version and put it here.\n    add_definitions(-DOPENFST_VER=18300)\n#    link_directories(/usr/lib64)\n#    include_directories(/usr/include/fst)    \nendif()\n\nlink_libraries(fst)\n\n\n\n\n# add all native libraries\nadd_subdirectory(src/base) # NOTE, we need to patch the target with version from outside\nset_property(TARGET kaldi-base PROPERTY COMPILE_DEFINITIONS \"KALDI_VERSION=\\\"${KALDI_VERSION}\\\"\")\nadd_subdirectory(src/matrix)\nadd_subdirectory(src/cudamatrix)\nadd_subdirectory(src/util)\nadd_subdirectory(src/feat)\nadd_subdirectory(src/tree)\nadd_subdirectory(src/gmm)\nadd_subdirectory(src/transform)\nadd_subdirectory(src/fstext)\nadd_subdirectory(src/hmm)\nadd_subdirectory(src/lm)\nadd_subdirectory(src/decoder)\nadd_subdirectory(src/lat)\nadd_subdirectory(src/nnet)\nadd_subdirectory(src/nnet2)\nadd_subdirectory(src/nnet3)\nadd_subdirectory(src/rnnlm)\nadd_subdirectory(src/chain)\nadd_subdirectory(src/ivector)\nif(NOT MSVC)\n    add_subdirectory(src/online)\nendif()\nadd_subdirectory(src/online2)\nadd_subdirectory(src/kws)\n\nadd_subdirectory(src/itf)\n\nif(TENSORFLOW_DIR)\n    add_subdirectory(src/tfrnnlm)\n    add_subdirectory(src/tfrnnlmbin)\nendif()\n\n# add all cuda libraries\nif(CUDA_FOUND)\n    add_subdirectory(src/cudafeat)\n    add_subdirectory(src/cudadecoder)\nendif()\n\n# add all native executables\nadd_subdirectory(src/bin)\nadd_subdirectory(src/gmmbin)\nadd_subdirectory(src/featbin)\nadd_subdirectory(src/fstbin)\nadd_subdirectory(src/lmbin)\nadd_subdirectory(src/latbin)\nadd_subdirectory(src/nnetbin)\nadd_subdirectory(src/nnet2bin)\nadd_subdirectory(src/nnet3bin)\nadd_subdirectory(src/rnnlmbin)\nadd_subdirectory(src/chainbin)\nadd_subdirectory(src/ivectorbin)\nif(NOT MSVC)\n    add_subdirectory(src/onlinebin)\n    add_subdirectory(src/online2bin)\nendif()\nadd_subdirectory(src/kwsbin)\n\n# add all cuda executables\nif(CUDA_FOUND)\n    add_subdirectory(src/cudafeatbin)\n    add_subdirectory(src/cudadecoderbin)\nendif()\n\nif(NOT CONDA_ROOT)\n    include(CMakePackageConfigHelpers)\n    # maybe we should put this into subfolder?\n    configure_package_config_file(\n        ${CMAKE_CURRENT_SOURCE_DIR}/cmake/kaldi-config.cmake.in\n        ${CMAKE_CURRENT_BINARY_DIR}/cmake/kaldi-config.cmake\n        INSTALL_DESTINATION lib/cmake/kaldi\n    )\n    write_basic_package_version_file(\n        ${CMAKE_CURRENT_BINARY_DIR}/cmake/kaldi-config-version.cmake\n        VERSION ${KALDI_VERSION}\n        COMPATIBILITY AnyNewerVersion\n    )\n    install(FILES ${CMAKE_CURRENT_BINARY_DIR}/cmake/kaldi-config.cmake ${CMAKE_CURRENT_BINARY_DIR}/cmake/kaldi-config-version.cmake\n        DESTINATION lib/cmake/kaldi\n    )\n    install(EXPORT kaldi-targets DESTINATION ${CMAKE_INSTALL_PREFIX}/lib/cmake/kaldi)\nendif()\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 16.859375,
          "content": "\n Update to legal notice, made Feb 2012, modified Sep 2013.  We would like to\n clarify that we are using a convention where multiple names in the Apache\n copyright headers, for example\n\n  // Copyright 2009-2012  Yanmin Qian  Arnab Ghoshal\n  //                2013  Vassil Panayotov\n\n does not signify joint ownership of copyright of that file, except in cases\n where all those names were present in the original release made in March 2011--\n you can use the version history to work this out, if this matters to you.\n Instead, we intend that those contributors who later modified the file, agree\n to release their changes under the Apache license.  The conventional way of\n signifying this is to duplicate the Apache headers at the top of each file each\n time a change is made by a different author, but this would quickly become\n impractical.\n\n Where the copyright header says something like:\n\n // Copyright    2013   Johns Hopkins University (author: Daniel Povey)\n\n it is because the individual who wrote the code was at that institution as an\n employee, so the copyright is owned by the university (and we will have checked\n that the contributions were in accordance with the open-source policies of the\n institutions concerned, including getting them vetted individually where\n necessary).  From a legal point of view the copyright ownership is that of the\n institution concerned, and the (author: xxx) in parentheses is just\n informational, to identify the actual person who wrote the code, and is not\n intended to have any legal implications.  In some cases, however, particularly\n early on, we just wrote the name of the university or company concerned,\n without the actual author's name in parentheses.  If you see something like\n\n //  Copyright  2009-2012   Arnab Ghoshal  Microsoft Corporation\n\n it does not imply that Arnab was working for Microsoft, it is because someone\n else contributed to the file while working at Microsoft (this would be Daniel\n Povey, in fact, who was working at Microsoft Research at the outset of the\n project).\n\n The list of authors of each file is in an essentially arbitrary order, but is\n often chronological if they contributed in different years.\n\n The original legal notice is below.  Note: we are continuing to modify it by\n adding the names of new contributors, but at any given time, the list may\n be out of date.\n\n---\n                          Legal Notices\n\nEach of the files comprising Kaldi v1.0 have been separately licensed by\ntheir respective author(s) under the terms of the Apache License v 2.0 (set\nforth below).  The source code headers for each file specifies the individual\nauthors and source material for that file as well the corresponding copyright\nnotice.  For reference purposes only: A cumulative list of all individual\ncontributors and original source material as well as the full text of the Apache\nLicense v 2.0 are set forth below.\n\nIndividual Contributors (in alphabetical order)\n\n      Albert Vernon\n      Alexander Solovets\n      Allen Guo\n      Ariya Rastrow\n      Arnab Ghoshal\n      Cisco Corporation\n      Daniel Galvez\n      Daniel Povey\n      Danijel Korzinek\n      David Snyder\n      Dogan Can\n      Eduardo Silva\n      Ewald Enzinger\n      Gaofeng Cheng\n      Gaurav Kumar\n      Georg Stemmer\n      Gilles Boulianne\n      Go Vivace Inc.\n      Guoguo Chen\n      Haihua Xu\n      Hainan Xu\n      Hendy Irawan\n      Hossein Hadian\n      Ilya Edrenkin\n      Jan \"Yenda\" Trmal\n      Jan Silovsky\n      Joachim Fainberg\n      Johns Hopkins University\n      Karel Vesely\n      Ke Li\n      Kirill Katsnelson\n      Lucas Ondel\n      Lukas Burget\n      Lv Hang\n      Matthew Maciejewski\n      Microsoft Corporation\n      Minhua Wu\n      Mirko Hannemann\n      Mohit Agarwal\n      Navdeep Jaitly\n      Nickolay V. Shmyrev\n      Omid Sadjadi\n      Ondrej Glembek\n      Ondrej Platek\n      Pavel Denisov\n      Pawel Swietojanski\n      Pegah Ghahremani\n      Peter Smit\n      Petr Motlicek\n      Petr Schwarz\n      Phonexia s.r.o.\n      Saarland University\n      Shinji Watanabe\n      Shiyin Kang\n      Tanel Alumae\n      Tom Ko\n      Vassil Panayotov\n      Vijayaditya Peddinti\n      Vimal Manohar\n      Vincent Nguyen\n      Xiaohui Zhang\n      Xingyu Na\n      Yajie Miao\n      Yanmin Qian\n      Yiming Wang\n      Yiwen Shao\n\nOther Source Material\n\n    This project includes a port and modification of materials from JAMA: A Java\n  Matrix Package under the following notice: \"This software is a cooperative\n  product of The MathWorks and the National Institute of Standards and Technology\n  (NIST) which has been released to the public domain.\" This notice and the\n  original code is available at http://math.nist.gov/javanumerics/jama/\n\n   This project includes a modified version of code published in Malvar, H.,\n  \"Signal processing with lapped transforms,\" Artech House, Inc., 1992.  The\n  current copyright holder, Henrique S. Malvar, has given his permission for the\n  release of this modified version under the Apache License 2.0.\n\n  This project includes material from the OpenFST Library v1.2.7 available at\n  http://www.openfst.org and released under the Apache License v. 2.0.\n\n  [OpenFst COPYING file begins here]\n\n    Licensed under the Apache License, Version 2.0 (the \"License\");\n    you may not use these files except in compliance with the License.\n    You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n    Unless required by applicable law or agreed to in writing, software\n    distributed under the License is distributed on an \"AS IS\" BASIS,\n    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n    See the License for the specific language governing permissions and\n    limitations under the License.\n\n    Copyright 2005-2010 Google, Inc.\n\n  [OpenFst COPYING file ends here]\n\n\n -------------------------------------------------------------------------\n\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "INSTALL",
          "type": "blob",
          "size": 0.515625,
          "content": "This is the official Kaldi INSTALL. Look also at INSTALL.md for the git mirror installation.\n[Option 1 in the following does not apply to native Windows install, see windows/INSTALL or following Option 2]\n\nOption 1 (bash + makefile):\n\n  Steps:\n    (1)\n    go to tools/  and follow INSTALL instructions there.\n\n    (2)\n    go to src/ and follow INSTALL instructions there.\n\nOption 2 (cmake):\n\n    Go to cmake/ and follow INSTALL.md instructions there.\n    Note, it may not be well tested and some features are missing currently.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.712890625,
          "content": "[![Build Status](https://travis-ci.com/kaldi-asr/kaldi.svg?branch=master)](https://travis-ci.com/kaldi-asr/kaldi)\n[![Gitpod Ready-to-Code](https://img.shields.io/badge/Gitpod-Ready--to--Code-blue?logo=gitpod)](https://gitpod.io/#https://github.com/kaldi-asr/kaldi) \nKaldi Speech Recognition Toolkit\n================================\n\nTo build the toolkit: see `./INSTALL`.  These instructions are valid for UNIX\nsystems including various flavors of Linux; Darwin; and Cygwin (has not been\ntested on more \"exotic\" varieties of UNIX).  For Windows installation\ninstructions (excluding Cygwin), see `windows/INSTALL`.\n\nTo run the example system builds, see `egs/README.txt`\n\nIf you encounter problems (and you probably will), please do not hesitate to\ncontact the developers (see below). In addition to specific questions, please\nlet us know if there are specific aspects of the project that you feel could be\nimproved, that you find confusing, etc., and which missing features you most\nwish it had.\n\nKaldi information channels\n--------------------------\n\nFor HOT news about Kaldi see [the project site](http://kaldi-asr.org/).\n\n[Documentation of Kaldi](http://kaldi-asr.org/doc/):\n- Info about the project, description of techniques, tutorial for C++ coding.\n- Doxygen reference of the C++ code.\n\n[Kaldi forums and mailing lists](http://kaldi-asr.org/forums.html):\n\nWe have two different lists\n- User list kaldi-help\n- Developer list kaldi-developers:\n\nTo sign up to any of those mailing lists, go to\n[http://kaldi-asr.org/forums.html](http://kaldi-asr.org/forums.html):\n\n\nDevelopment pattern for contributors\n------------------------------------\n\n1. [Create a personal fork](https://help.github.com/articles/fork-a-repo/)\n   of the [main Kaldi repository](https://github.com/kaldi-asr/kaldi) in GitHub.\n2. Make your changes in a named branch different from `master`, e.g. you create\n   a branch `my-awesome-feature`.\n3. [Generate a pull request](https://help.github.com/articles/creating-a-pull-request/)\n   through the Web interface of GitHub.\n4. As a general rule, please follow [Google C++ Style Guide](https://google.github.io/styleguide/cppguide.html).\n   There are a [few exceptions in Kaldi](http://kaldi-asr.org/doc/style.html).\n   You can use the [Google's cpplint.py](https://raw.githubusercontent.com/google/styleguide/gh-pages/cpplint/cpplint.py)\n   to verify that your code is free of basic mistakes.\n\nPlatform specific notes\n-----------------------\n\n### Fedora 41 (and later)\n\nIn order to build it on Fedora 41 using the libraries that are provided by the distro, you need to install the development libraries and dependencies with\n\n```\nsudo dnf install lapack-devel openfst-devel\n```\n\nthen build the package as follows:\n\n```\ncmake -S ./ -Bbuild/Release -DFETCHCONTENT_FULLY_DISCONNECTED=ON -DBuildForFedora=ON\ncmake --build /home/gerhard/workspace/kaldi/build/Release\n```\n\n\n### PowerPC 64bits little-endian (ppc64le)\n\n- Kaldi is expected to work out of the box in RHEL >= 7 and Ubuntu >= 16.04 with\n  OpenBLAS, ATLAS, or CUDA.\n- CUDA drivers for ppc64le can be found at [https://developer.nvidia.com/cuda-downloads](https://developer.nvidia.com/cuda-downloads).\n- An [IBM Redbook](https://www.redbooks.ibm.com/abstracts/redp5169.html) is\n  available as a guide to install and configure CUDA.\n\n### Android\n\n- Kaldi supports cross compiling for Android using Android NDK, clang++ and\n  OpenBLAS.\n- See [this blog post](http://jcsilva.github.io/2017/03/18/compile-kaldi-android/)\n  for details.\n\n### Web Assembly\n\n- Kaldi supports cross compiling for Web Assembly for in-browser execution\n  using [emscripten](https://emscripten.org/) and CLAPACK.\n- See [this post](https://gitlab.inria.fr/kaldi.web/kaldi-wasm/-/wikis/build_details.md)\n  for a step-by-step description of the build process.\n"
        },
        {
          "name": "cmake",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "egs",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "tools",
          "type": "tree",
          "content": null
        },
        {
          "name": "windows",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}