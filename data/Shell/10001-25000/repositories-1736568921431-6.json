{
  "metadata": {
    "timestamp": 1736568921431,
    "page": 6,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zsh-users/zsh-syntax-highlighting",
      "stars": 20498,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.1767578125,
          "content": "# Top-most editorconfig file\n\nroot = true\n\n[*]\nend_of_line = lf\ntab_width   = 2\nindent_size = 2\nindent_style = space\n\n[Makefile]\ntab_width   = 8\nindent_size = 8\nindent_style = tab\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.02734375,
          "content": ".revision-hash export-subst\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0234375,
          "content": "*.zwc*\n.pc/\ndocs/all.md\n"
        },
        {
          "name": ".revision-hash",
          "type": "blob",
          "size": 0.01171875,
          "content": "$Format:%H$\n"
        },
        {
          "name": ".version",
          "type": "blob",
          "size": 0.009765625,
          "content": "0.8.1-dev\n"
        },
        {
          "name": "COPYING.md",
          "type": "blob",
          "size": 1.5078125,
          "content": "Copyright (c) 2010-2020 zsh-syntax-highlighting contributors\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted\nprovided that the following conditions are met:\n\n * Redistributions of source code must retain the above copyright notice, this list of conditions\n   and the following disclaimer.\n * Redistributions in binary form must reproduce the above copyright notice, this list of\n   conditions and the following disclaimer in the documentation and/or other materials provided\n   with the distribution.\n * Neither the name of the zsh-syntax-highlighting contributors nor the names of its contributors\n   may be used to endorse or promote products derived from this software without specific prior\n   written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\nIMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\nFITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\nCONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\nIN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\nOF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "HACKING.md",
          "type": "blob",
          "size": 2.595703125,
          "content": "Hacking on zsh-syntax-highlighting itself\n=========================================\n\nThis document includes information for people working on z-sy-h itself: on the\ncore driver (`zsh-syntax-highlighting.zsh`), on the highlighters in the\ndistribution, and on the test suite.  It does not target third-party\nhighlighter authors (although they may find it an interesting read).\n\nThe `main` highlighter\n----------------------\n\nThe following function `pz` is useful when working on the `main` highlighting:\n\n```zsh\npq() {\n  (( $#argv )) || return 0\n  print -r -l -- ${(qqqq)argv}\n}\npz() {\n  local arg\n  for arg; do\n    pq ${(z)arg}\n  done\n}\n```\n\nIt prints, for each argument, its token breakdown, similar to how the main\nloop of the `main` highlighter sees it.\n\nTesting the `brackets` highlighter\n----------------------------------\n\nSince the test harness empties `ZSH_HIGHLIGHT_STYLES` and the `brackets`\nhighlighter interrogates `ZSH_HIGHLIGHT_STYLES` to determine how to highlight,\ntests must set the `bracket-level-#` keys themselves.  For example:\n\n```zsh\nZSH_HIGHLIGHT_STYLES[bracket-level-1]=\nZSH_HIGHLIGHT_STYLES[bracket-level-2]=\n\nBUFFER='echo ({x})'\n\nexpected_region_highlight=(\n  \"6  6  bracket-level-1\" # (\n  \"7  7  bracket-level-2\" # {\n  \"9  9  bracket-level-2\" # }\n  \"10 10 bracket-level-1\" # )\n)\n```\n\nTesting the `pattern` and `regexp` highlighters\n-----------------------------------------------\n\nBecause the `pattern` and `regexp` highlighters modifies `region_highlight`\ndirectly instead of using `_zsh_highlight_add_highlight`, the test harness\ncannot get the `ZSH_HIGHLIGHT_STYLES` keys.  Therefore, when writing tests, use\nthe style itself as third word (cf. the\n[documentation for `expected_region_highlight`](docs/highlighters.md)).  For example:\n\n```zsh\nZSH_HIGHLIGHT_PATTERNS+=('rm -rf *' 'fg=white,bold,bg=red')\n\nBUFFER='rm -rf /'\n\nexpected_region_highlight=(\n  \"1 8 fg=white,bold,bg=red\" # rm -rf /\n)\n```\n\nMemos and commas\n----------------\n\nWe append to `region_highlight` as follows:\n\n\n```zsh\nregion_highlight+=(\"$start $end $spec, memo=zsh-syntax-highlighting\")\n```\n\nThat comma is required to cause zsh 5.8 and older to ignore the memo without\nignoring the `$spec`.  It's a hack, but given that no further 5.8.x patch\nreleases are planned, it's been deemed acceptable.  See issue #418 and the\ncross-referenced issues.\n\n\nMiscellany\n----------\n\nIf you work on the driver (`zsh-syntax-highlighting.zsh`), you may find the following zstyle useful:\n\n```zsh\nzstyle ':completion:*:*:*:*:globbed-files' ignored-patterns {'*/',}zsh-syntax-highlighting.plugin.zsh\n```\n\nIRC channel\n-----------\n\nWe're on #zsh-syntax-highlighting on Libera.Chat.\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 6.4140625,
          "content": "How to install\n--------------\n\n### Using packages\n\nFirst, install the package:\n\n* Arch Linux: [community/zsh-syntax-highlighting][arch-package] / [AUR/zsh-syntax-highlighting-git][AUR-package]\n* Debian: `zsh-syntax-highlighting` package [in `stretch`][debian-package] (or in [OBS repository][obs-repository])\n* Fedora: [zsh-syntax-highlighting package][fedora-package-alt] in Fedora 24+ (or in [OBS repository][obs-repository])\n* FreeBSD: `pkg install zsh-syntax-highlighting` (port name: [`shells/zsh-syntax-highlighting`][freebsd-port])\n* Gentoo: [app-shells/zsh-syntax-highlighting][gentoo-repository]\n* Mac OS X / Homebrew: `brew install zsh-syntax-highlighting` ([formula][brew-package])\n* NetBSD: `pkg_add zsh-syntax-highlighting` (port name: [`shells/zsh-syntax-highlighting`][netbsd-port])\n* OpenBSD: `pkg_add zsh-syntax-highlighting` (port name: [`shells/zsh-syntax-highlighting`][openbsd-port])\n* openSUSE / SLE: `zsh-syntax-highlighting` package in [OBS repository][obs-repository]\n* RHEL / CentOS / Scientific Linux: `zsh-syntax-highlighting` package in [OBS repository][obs-repository]\n* Ubuntu: `zsh-syntax-highlighting` package [in Xenial][ubuntu-package] (or in [OBS repository][obs-repository])\n* Void Linux: `zsh-syntax-highlighting package` [in XBPS][void-package]\n\n[arch-package]: https://www.archlinux.org/packages/zsh-syntax-highlighting\n[AUR-package]: https://aur.archlinux.org/packages/zsh-syntax-highlighting-git\n[brew-package]: https://github.com/Homebrew/homebrew-core/blob/master/Formula/z/zsh-syntax-highlighting.rb\n[debian-package]: https://packages.debian.org/zsh-syntax-highlighting\n[fedora-package]: https://apps.fedoraproject.org/packages/zsh-syntax-highlighting\n[fedora-package-alt]: https://bodhi.fedoraproject.org/updates/?packages=zsh-syntax-highlighting\n[freebsd-port]: https://www.freshports.org/textproc/zsh-syntax-highlighting/\n[gentoo-repository]: https://packages.gentoo.org/packages/app-shells/zsh-syntax-highlighting\n[netbsd-port]: http://cvsweb.netbsd.org/bsdweb.cgi/pkgsrc/shells/zsh-syntax-highlighting/\n[obs-repository]: https://software.opensuse.org/download.html?project=shells%3Azsh-users%3Azsh-syntax-highlighting&package=zsh-syntax-highlighting\n[openbsd-port]: https://cvsweb.openbsd.org/ports/shells/zsh-syntax-highlighting/\n[ubuntu-package]: https://launchpad.net/ubuntu/+source/zsh-syntax-highlighting\n[void-package]: https://github.com/void-linux/void-packages/tree/master/srcpkgs/zsh-syntax-highlighting\n\nSee also [repology's cross-distro index](https://repology.org/metapackage/zsh-syntax-highlighting/versions)\n\nSecond, enable zsh-syntax-highlighting by sourcing the script. Running this command on the terminal will add the source line to the end of your .zshrc:\n\n* On most Linux distributions (except perhaps NixOS):\n\n    ```zsh\n    echo \"source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n    ```\n\n* NetBSD and OpenBSD:\n\n    ```zsh\n    echo \"source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n    ```\n\n* Mac OS X / Homebrew:\n\n    ```zsh\n    echo \"source $(brew --prefix)/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n    ```\n\nThen restart zsh (such as by opening a new instance of your terminal emulator).\n\n Alternatively, add the `source` command manually **at the end** of your `.zshrc`:\n\n* On most Linux distributions (except perhaps NixOS):\n`source /usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh`\n* NetBSD and OpenBSD:\n`source /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh`\n\nThen restart zsh.\n\n### In your ~/.zshrc\n\nSimply clone this repository and source the script:\n\n```zsh\ngit clone https://github.com/zsh-users/zsh-syntax-highlighting.git\necho \"source ${(q-)PWD}/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\" >> ${ZDOTDIR:-$HOME}/.zshrc\n```\n\n  Then, enable syntax highlighting in the current interactive shell:\n\n```zsh\nsource ./zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n```\n\n  If `git` is not installed, download and extract a snapshot of the latest\n  development tree from:\n\n```\nhttps://github.com/zsh-users/zsh-syntax-highlighting/archive/master.tar.gz\n```\n\n  Note the `source` command must be **at the end** of `~/.zshrc`.\n\n\n### With a plugin manager\n\nNote that `zsh-syntax-highlighting` must be the last plugin sourced.\n\nThe zsh-syntax-highlighting authors recommend manual installation over the use\nof a framework or plugin manager.\n\nThis list is incomplete as there are too many\n[frameworks / plugin managers][framework-list] to list them all here.\n\n[framework-list]: https://github.com/unixorn/awesome-zsh-plugins#frameworks\n\n#### [Antigen](https://github.com/zsh-users/antigen)\n\nAdd `antigen bundle zsh-users/zsh-syntax-highlighting` as the last bundle in\nyour `.zshrc`.\n\n#### [Fig](https://fig.io)\n\nClick the `Install Plugin` button on the [Fig plugin page][fig-plugin].\n\n[fig-plugin]: https://fig.io/plugins/other/zsh-syntax-highlighting\n\n#### [Oh-my-zsh](https://github.com/robbyrussell/oh-my-zsh)\n\n1. Clone this repository in oh-my-zsh's plugins directory:\n\n    ```zsh\n    git clone https://github.com/zsh-users/zsh-syntax-highlighting.git ${ZSH_CUSTOM:-~/.oh-my-zsh/custom}/plugins/zsh-syntax-highlighting\n    ```\n\n2. Activate the plugin in `~/.zshrc`:\n\n    ```zsh\n    plugins=( [plugins...] zsh-syntax-highlighting)\n    ```\n\n3. Restart zsh (such as by opening a new instance of your terminal emulator).\n\n#### [Prezto](https://github.com/sorin-ionescu/prezto)\n\nZsh-syntax-highlighting is included with Prezto. See the\n[Prezto documentation][prezto-docs] to enable and configure highlighters.\n\n[prezto-docs]: https://github.com/sorin-ionescu/prezto/tree/master/modules/syntax-highlighting\n\n#### [zgen](https://github.com/tarjoilija/zgen)\n\nAdd `zgen load zsh-users/zsh-syntax-highlighting` to the end of your `.zshrc`.\n\n#### [zinit](https://github.com/zdharma-continuum/zinit)\n\nAdd `zinit light zsh-users/zsh-syntax-highlighting` to the end of your\n`.zshrc`.\n\n#### [zplug](https://github.com/zplug/zplug)\n\nAdd `zplug \"zsh-users/zsh-syntax-highlighting\", defer:2` to your `.zshrc`.\n\n\n### System-wide installation\n\nAny of the above methods is suitable for a single-user installation,\nwhich requires no special privileges.  If, however, you desire to install\nzsh-syntax-highlighting system-wide, you may do so by running\n\n```zsh\nmake install\n```\n\nand directing your users to add\n\n```zsh\nsource /usr/local/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh\n```\n\nto their `.zshrc`s.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.8955078125,
          "content": "NAME=zsh-syntax-highlighting\n\nINSTALL?=install -c\nPREFIX?=/usr/local\nSHARE_DIR?=$(DESTDIR)$(PREFIX)/share/$(NAME)\nDOC_DIR?=$(DESTDIR)$(PREFIX)/share/doc/$(NAME)\nZSH?=zsh # zsh binary to run tests with\n\nall:\n\tcd docs && \\\n\tcp highlighters.md all.md && \\\n\tprintf '\\n\\nIndividual highlighters documentation\\n=====================================' >> all.md && \\\n\tfor doc in highlighters/*.md; do printf '\\n\\n'; cat \"$$doc\"; done >> all.md\n\ninstall: all\n\t$(INSTALL) -d $(SHARE_DIR)\n\t$(INSTALL) -d $(DOC_DIR)\n\tcp .version zsh-syntax-highlighting.zsh $(SHARE_DIR)\n\tcp COPYING.md README.md changelog.md $(DOC_DIR)\n\tsed -e '1s/ .*//' -e '/^\\[build-status-[a-z]*\\]: /d' < README.md > $(DOC_DIR)/README.md\n\tif [ x\"true\" = x\"`git rev-parse --is-inside-work-tree 2>/dev/null`\" ]; then \\\n\t\tgit rev-parse HEAD; \\\n\telse \\\n\t\tcat .revision-hash; \\\n\tfi > $(SHARE_DIR)/.revision-hash\n\t:\n# The [ -e ] check below is to because sh evaluates this with (the moral\n# equivalent of) NONOMATCH in effect, and highlighters/*.zsh has no matches.\n\tfor dirname in highlighters highlighters/*/ ; do \\\n\t\t$(INSTALL) -d $(SHARE_DIR)/\"$$dirname\"; \\\n\t\tfor fname in \"$$dirname\"/*.zsh ; do [ -e \"$$fname\" ] && cp \"$$fname\" $(SHARE_DIR)\"/$$dirname\"; done; \\\n\tdone\n\tcp -R docs/* $(DOC_DIR)\n\nclean:\n\trm -f docs/all.md\n\ntest:\n\t@$(ZSH) -fc 'echo ZSH_PATCHLEVEL=$$ZSH_PATCHLEVEL'\n\t@result=0; \\\n\tfor test in highlighters/*; do \\\n\t\tif [ -d $$test/test-data ]; then \\\n\t\t\techo \"Running test $${test##*/}\"; \\\n\t\t\tenv -i QUIET=$$QUIET $${TERM:+\"TERM=$$TERM\"} $(ZSH) -f tests/test-highlighting.zsh \"$${test##*/}\"; \\\n\t\t\t: $$(( result |= $$? )); \\\n\t\tfi \\\n\tdone; \\\n\texit $$result\n\nquiet-test:\n\t$(MAKE) test QUIET=y\n\nperf:\n\t@result=0; \\\n\tfor test in highlighters/*; do \\\n\t\tif [ -d $$test/test-data ]; then \\\n\t\t\techo \"Running test $${test##*/}\"; \\\n\t\t\t$(ZSH) -f tests/test-perfs.zsh \"$${test##*/}\"; \\\n\t\t\t: $$(( result |= $$? )); \\\n\t\tfi \\\n\tdone; \\\n\texit $$result\n\n.PHONY: all install clean test perf\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.6904296875,
          "content": "zsh-syntax-highlighting [![Build Status][build-status-image]][build-status]\n=======================\n\n**[Fish shell][fish]-like syntax highlighting for [Zsh][zsh].**\n\n*Requirements: zsh 4.3.11+.*\n\n[fish]: https://fishshell.com/\n[zsh]: https://www.zsh.org/\n\nThis package provides syntax highlighting for the shell zsh.  It enables\nhighlighting of commands whilst they are typed at a zsh prompt into an\ninteractive terminal.  This helps in reviewing commands before running\nthem, particularly in catching syntax errors.\n\nSome examples:\n\nBefore: [![Screenshot #1.1](images/before1-smaller.png)](images/before1.png)\n<br/>\nAfter:&nbsp; [![Screenshot #1.2](images/after1-smaller.png)](images/after1.png)\n\nBefore: [![Screenshot #2.1](images/before2-smaller.png)](images/before2.png)\n<br/>\nAfter:&nbsp; [![Screenshot #2.2](images/after2-smaller.png)](images/after2.png)\n\nBefore: [![Screenshot #3.1](images/before3-smaller.png)](images/before3.png)\n<br/>\nAfter:&nbsp; [![Screenshot #3.2](images/after3-smaller.png)](images/after3.png)\n\nBefore: [![Screenshot #4.1](images/before4-smaller.png)](images/before4-smaller.png)\n<br/>\nAfter:&nbsp; [![Screenshot #4.2](images/after4-smaller.png)](images/after4-smaller.png)\n\n\n\nHow to install\n--------------\n\nSee [INSTALL.md](INSTALL.md).\n\n\nFAQ\n---\n\n### Why must `zsh-syntax-highlighting.zsh` be sourced at the end of the `.zshrc` file?\n\nzsh-syntax-highlighting works by hooking into the Zsh Line Editor (ZLE) and\ncomputing syntax highlighting for the command-line buffer as it stands at the\ntime z-sy-h's hook is invoked.\n\nIn zsh 5.2 and older,\n`zsh-syntax-highlighting.zsh` hooks into ZLE by wrapping ZLE widgets.  It must\nbe sourced after all custom widgets have been created (i.e., after all `zle -N`\ncalls and after running `compinit`) in order to be able to wrap all of them.\nWidgets created after z-sy-h is sourced will work, but will not update the\nsyntax highlighting.\n\nIn zsh newer than 5.8 (not including 5.8 itself),\nzsh-syntax-highlighting uses the `add-zle-hook-widget` facility to install\na `zle-line-pre-redraw` hook.  Hooks are run in order of registration,\ntherefore, z-sy-h must be sourced (and register its hook) after anything else\nthat adds hooks that modify the command-line buffer.\n\n### Does syntax highlighting work during incremental history search?\n\nHighlighting the command line during an incremental history search (by default bound to\nto <kbd>Ctrl+R</kbd> in zsh's emacs keymap) requires zsh 5.4 or newer.\n\nUnder zsh versions older than 5.4, the zsh-default [underlining][zshzle-Character-Highlighting]\nof the matched portion of the buffer remains available, but zsh-syntax-highlighting's\nadditional highlighting is unavailable.  (Those versions of zsh do not provide\nenough information to allow computing the highlighting correctly.)\n\nSee issues [#288][i288] and [#415][i415] for details.\n\n[zshzle-Character-Highlighting]: https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting\n[i288]: https://github.com/zsh-users/zsh-syntax-highlighting/pull/288\n[i415]: https://github.com/zsh-users/zsh-syntax-highlighting/pull/415\n\n### How are new releases announced?\n\nThere is currently no \"push\" announcements channel.  However, the following\nalternatives exist:\n\n- GitHub's RSS feed of releases: https://github.com/zsh-users/zsh-syntax-highlighting/releases.atom\n- An anitya entry: https://release-monitoring.org/project/7552/\n\n\nHow to tweak\n------------\n\nSyntax highlighting is done by pluggable highlighter scripts.  See the\n[documentation on highlighters](docs/highlighters.md) for details and\nconfiguration settings.\n\n[build-status]: https://github.com/zsh-users/zsh-syntax-highlighting/actions\n[build-status-image]: https://github.com/zsh-users/zsh-syntax-highlighting/workflows/Tests/badge.svg\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 23.27734375,
          "content": "# Changes in HEAD\n\n\n- Highlight `&>` `>&|` `>&!` `&>|` and `&>!` as redirection.\n  [#942]\n\n\n# Changes in 0.8.0\n\nThis is a stable bugfix and feature release.  Major new features and changes include:\n\n\n## Changes fixed as part of the switch to zle-line-pre-redraw\n\nThe changes in this section were fixed by switching to a `zle-line-pre-redraw`-based\nimplementation.\n\nNote: The new implementation will only be used on future zsh releases,\nnumbered 5.8.1.1 and newer, due to interoperability issues with other plugins\n(issues #418 and #579).  The underlying zsh feature has been available since\nzsh 5.3.\n\nWhilst under development, the new implementation was known as the\n\"feature/redrawhook\" topic branch.\n\n- Fixed: Highlighting not triggered after popping a buffer from the buffer stack\n  (using the `push-line` widget, default binding: `M-q`)\n  [#40]\n\n- Fixed: Invoking completion when there were no matches removed highlighting\n  [#90, #470]\n\n- Fixed: Two successive deletes followed by a yank only yanked the latest\n  delete, rather than both of them\n  [#150, #151, #160; cf. #183]\n\n- Presumed fixed: Completing `$(xsel)` results in an error message from `xsel`,\n  with pre-2017 versions of `xsel`.  (For 2017 vintage and newer, see the issue\n  for details.)\n  [#154]\n\n- Fixed: When the standard `bracketed-paste-magic` widget is in use, pastes were slow\n  [#295]\n\n- Fixed: No way to prevent a widget from being wrapped\n  [#324]\n\n- Fixed: No highlighting while cycling menu completion\n  [#375]\n\n- Fixed: Does not coexist with the `IGNORE_EOF` option\n  [#377]\n\n- Fixed: The `undefined-key` widget was wrapped\n  [#421]\n\n- Fixed: Does not coexist with the standard `surround` family of widgets\n  [#520]\n\n- Fixed: First completed filename doesn't get `path` highlighting\n  [#632]\n\n\n## Other changes\n\n- Add issue #712 to the previous release's changelog (hereinafter).\n\n- Fix highlighting when using an alias twice inside another alias\n  [#769, #775]\n\n- Remove lint warning for `env` followed by a pipe\n  [#797]\n\n- Recognize `proxychains` as a precommand\n  [#814, #914]\n\n- Honor shwordsplit when expanding parameters\n  [#687, #818]\n\n- Skip highlighting when keys are still pending in more cases\n  [#835]\n\n- Recognize `grc` as a precommand\n\n- Recognize `torsocks` and `torift` as precommands\n  [#898]\n\n- Recognize `cpulimit` as a precommand\n  [#897]\n\n- Recognize `ktrace` as a precommand\n\n\n# Changes in 0.8.0-alpha1-pre-redrawhook\n\n## Notice about an improbable-but-not-impossible forward incompatibility\n\nEveryone can probably skip this section.\n\nThe `master` branch of zsh-syntax-highlighting uses a zsh feature that has not\nyet appeared in a zsh release: the `memo=` feature, added to zsh in commit\nzsh-5.8-172-gdd6e702ee (after zsh 5.8, before zsh 5.9).  In the unlikely event\nthat this zsh feature should change in an incompatible way before the next\nstable zsh release, set `zsh_highlight__memo_feature=0` in your .zshrc files to\ndisable use of the new feature.\n\nz-sy-h dogfoods the new, unreleased zsh feature because that feature was\nadded to zsh at z-sy-h's initiative.  The new feature is used in the fix\nto issue #418.\n\n\n## Incompatible changes:\n\n- An unsuccessful completion (a <kbd>⮀ Tab</kbd> press that doesn't change the\n  command line) no longer causes highlighting to be lost.  Visual feedback can\n  alternatively be achieved by setting the `format` zstyle under the `warnings`\n  tag, for example,\n\n        zstyle ':completion:*:warnings' format '%F{red}No matches%f'\n\n    Refer to the [description of the `format` style in `zshcompsys(1)`]\n    [zshcompsys-Standard-Styles-format].\n\n    (#90, part of #245 (feature/redrawhook))\n\n[zshcompsys-Standard-Styles]: https://zsh.sourceforge.io/Doc/Release/Completion-System.html#Standard-Styles\n[zshcompsys-Standard-Styles-format]: https://zsh.sourceforge.io/Doc/Release/Completion-System.html#index-format_002c-completion-style\n  \n\n\n## Other changes:\n\n- Document `$ZSH_HIGHLIGHT_MAXLENGTH`.\n  [#698]\n\n- Optimize highlighting unquoted words (words that are not in single quotes, double quotes, backticks, or dollar-single-quotes)\n  [#730]\n\n- Redirection operators (e.g., `<` and `>`) are now highlighted by default\n  [#646]\n\n- Propertly terminate `noglob` scope in try/always blocks\n  [#577]\n\n- Don't error out when `KSH_ARRAYS` is set in the calling scope\n  [#622, #689]\n\n- Literal semicolons in array assignments (`foo=( bar ; baz )`) are now\n  highlighted as errors.\n  [3ca93f864fb6]\n\n- Command separators in array assignments (`foo=( bar | baz )`) are now\n  highlighted as errors.\n  [#651, 81267ca3130c]\n\n- Support parameter elision in command position (e.g., `$foo ls` where `$foo` is unset or empty)\n  [#667]\n\n- Don't consider the filename in `sudo -e /path/to/file` to be a command position\n  [#678]\n\n- Don't look up absolute directory names in $cdpath\n  [2cc2583f8f12, part of #669]\n\n- Fix `exec 2>&1;` being highlighted as an error.\n  [#676]\n\n- Fix `: $(<*)` being highlighted as globbing.\n  [#582]\n\n- Fix `cat < *` being highlighting as globbing when the `MULTIOS` option is unset.\n  [#583]\n\n- Fix `echo >&2` highlighting the `2` as a filename if a file by that name happened to exist\n  [#694, part of #645]\n\n- Fix `echo >&-` highlighting the `-` as a filename if a file by that name happened to exist\n  [part of #645]\n\n- Fix `echo >&p` highlighting the `p` as a filename if a file by that name happened to exist\n  [part of #645]\n\n- Fix wrong highlighting of unquoted parameter expansions under zsh 5.2 and older\n  [e165f18c758e]\n\n- Highlight global aliases\n  [#700]\n\n- Highlight `: =nosuchcommand' as an error (when the `EQUALS` option hasn't been unset).\n  [#430]\n\n- Highlight reserved word after assignments as errors (e.g., `foo=bar (ls;)`)\n  [#461]\n\n- Correctly highlight `[[ foo && bar || baz ]]`.\n\n- Highlight non-executable files in command position correctly (e.g., `% /etc/passwd`)\n  [#202, #669]\n\n- Highlight directories in command position correctly, including `AUTO_CD` support\n  [#669]\n\n- Recognize `env` as a precommand (e.g., `env FOO=bar ls`)\n\n- Recognize `ionice` as a precommand\n\n- Recognize `strace` as a precommand\n\n- Fix an error message on stderr before every prompt when the `WARN_NESTED_VAR` zsh option is set:\n  `_zsh_highlight_main__precmd_hook:1: array parameter _zsh_highlight_main__command_type_cache set in enclosing scope in function _zsh_highlight_main__precmd_hook`\n  [#727, #731, #732, #733]\n\n- Fix highlighting of alias whose definitions use a simple command terminator\n  (such as `;`, `|`, `&&`) before a newline\n  [#677; had regressed in 0.7.0]\n\n- Highlight arithmetic expansions (e.g., `$(( 42 ))`)\n  [#607 #649 #704]\n\n- Highlight the parentheses of array assignments as reserved words (`foo=( bar )`).\n  The `assign` style remains supported and has precedence.\n  [#585]\n\n- Fix interoperability issue with other plugins that use highlighting.  The fix\n  requires zsh 5.8.0.3 or newer.  (zsh 5.8.0.2-dev from the `master` branch,\n  revision zsh-5.8-172-gdd6e702ee or newer is also fine.)\n  [#418, https://github.com/okapia/zsh-viexchange/issues/1]\n\n- Improve performance of the `brackets` highlighter.\n\n- Fix highlighting of pre-command redirections (e.g., the `$fn` in `<$fn cat`)\n  [#712]\n\n\n# Changes in version 0.7.1\n\n- Remove out-of-date information from the 0.7.0 changelog.\n\n\n# Changes in version 0.7.0\n\nThis is a stable bugfix and feature release.  Major new features and changes include:\n\n- Add `ZSH_HIGHLIGHT_DIRS_BLACKLIST` to disable \"path\" and \"path prefix\"\n  highlighting for specific directories\n  [#379]\n\n- Add the \"regexp\" highlighter, modelled after the pattern highlighter\n  [4e6f60063f1c]\n\n- When a word uses globbing, only the globbing metacharacters will be highlighted as globbing:\n  in `: foo*bar`, only the `*` will be blue.\n  [e48af357532c]\n\n- Highlight pasted quotes (e.g., `: foo\"bar\"`)\n  [dc1b2f6fa4bb]\n\n- Highlight command substitutions (`` : `ls` ``, `: $(ls)`)\n  [c0e64fe13178 and parents, e86f75a840e7, et al]\n\n- Highlight process substitutions (`: >(nl)`, `: <(pwd)`, `: =(git diff)`)\n  [c0e64fe13178 and parents, e86f75a840e7, et al]\n\n- Highlight command substitutions inside double quotes (``: \"`foo`\"``)\n  [f16e858f0c83]\n\n- Highlight many precommands (e.g., `nice`, `stdbuf`, `eatmydata`;\n  see `$precommand_options` in the source)\n\n- Highlight numeric globs (e.g., `echo /lib<->`)\n\n- Assorted improvements to aliases highlighting\n  (e.g.,\n   `alias sudo_u='sudo -u'; sudo_u jrandom ls`,\n   `alias x=y y=z z=nosuchcommand; x`,\n   `alias ls='ls -l'; \\ls`)\n  [f3410c5862fc, 57386f30aec8, #544, and many others]\n\n- Highlight some more syntax errors\n  [dea05e44e671, 298ef6a2fa30]\n\n- New styles: named file descriptors, `RC_QUOTES`, and unclosed quotes (e.g., `echo \"foo<CURSOR>`)\n  [38c794a978cd, 25ae1c01216c, 967335dfc5fd]\n\n- The 'brackets' highlighting no longer treats quotes specially.\n  [ecdda36ef56f]\n\n\nSelected bugfixes include:\n\n- Highlight `sudo` correctly when it's not installed\n  [26a82113b08b]\n\n- Handle some non-default options being set in zshrc\n  [b07ada1255b7, a2a899b41b8, 972ad197c13d, b3f66fc8748f]\n\n- Fix off-by-one highlighting in vi \"visual\" mode (vicmd keymap)\n  [be3882aeb054]\n\n- The 'yank-pop' widget is not wrapped\n  [#183]\n\n\nKnown issues include:\n\n- A multiline alias that uses a simple command terminator (such as `;`, `|`, `&&`)\n  before a newline will incorrectly be highlighted as an error.  See issue #677\n  for examples and workarounds.\n  [#677]\n  [UPDATE: Fixed in 0.8.0]\n\n\n# Changes in version 0.6.0\n\nThis is a stable release, featuring bugfixes and minor improvements.\n\n\n## Performance improvements:\n\n(none)\n\n\n## Added highlighting of:\n\n- The `isearch` and `suffix` [`$zle_highlight` settings][zshzle-Character-Highlighting].\n  (79e4d3d12405, 15db71abd0cc, b56ee542d619; requires zsh 5.3 for `$ISEARCHMATCH_ACTIVE` / `$SUFFIX_ACTIVE` support)\n\n[zshzle-Character-Highlighting]: https://zsh.sourceforge.io/Doc/Release/Zsh-Line-Editor.html#Character-Highlighting\n\n- Possible history expansions in double-quoted strings.\n  (76ea9e1df316)\n\n- Mismatched `if`/`then`/`elif`/`else`/`fi`.\n  (73cb83270262)\n\n\n## Fixed highlighting of:\n\n- A comment line followed by a non-comment line.\n  (#385, 9396ad5c5f9c)\n\n- An unquoted `$*` (expands to the positional parameters).\n  (237f89ad629f)\n\n- history-incremental-pattern-search-backward under zsh 5.3.1.\n  (#407, #415, 462779629a0c)\n\n\n## API changes (for highlighter authors):\n\n(none)\n\n\n## Developer-visible changes:\n\n- tests: Set the `ALIAS_FUNC_DEF` option for zsh 5.4 compatibility.\n  (9523d6d49cb3)\n\n\n## Other changes:\n\n- docs: Added before/after screenshots.\n  (cd9ec14a65ec..b7e277106b49)\n\n- docs: Link Fedora package.\n  (3d74aa47e4a7, 5feed23962df)\n\n- docs: Link FreeBSD port.\n  (626c034c68d7)\n\n- docs: Link OpenSUSE Build Service packages\n  (#419, dea1fedc7358)\n\n- Prevent user-defined aliases from taking effect in z-sy-h's own code.\n  (#390, 2dce602727d7, 8d5afe47f774; and #392, #395, b8fa1b9dc954)\n\n- docs: Update zplug installation instructions.\n  (#399, 4f49c4a35f17)\n\n- Improve \"unhandled ZLE widget 'foo'\" error message.\n  (#409, be083d7f3710)\n\n- Fix printing of \"failed loading highlighters\" error message.\n  (#426, ad522a091429)\n\n\n# Changes in version 0.5.0\n\n\n## Performance improvements:\n\nWe thank Sebastian Gniazdowski and \"m0viefreak\" for significant contributions\nin this area.\n\n- Optimize string operations in the `main` (default) highlighter.\n  (#372/3cb58fd7d7b9, 02229ebd6328, ef4bfe5bcc14, #372/c6b6513ac0d6, #374/15461e7d21c3)\n\n- Command word highlighting:  Use the `zsh/parameter` module to avoid forks.\n  Memoize (cache) the results.\n  (#298, 3ce01076b521, 2f18ba64e397, 12b879caf7a6; #320, 3b67e656bff5)\n\n- Avoid forks in the driver and in the `root` highlighter.\n  (b9112aec798a, 38c8fbea2dd2)\n\n\n## Added highlighting of:\n\n- `pkexec` (a precommand).\n  (#248, 4f3910cbbaa5)\n\n- Aliases that cannot be defined normally nor invoked normally (highlighted as an error).\n  (#263 (in part), 28932316cca6)\n\n- Path separators (`/`) — the default behaviour remains to highlight path separators\n  and path components the same way.\n  (#136, #260, 6cd39e7c70d3, 9a934d291e7c, f3d3aaa00cc4)\n\n- Assignments to individual positional arguments (`42=foo` to assign to `$42`).\n  (f4036a09cee3)\n\n- Linewise region (the `visual-line-mode` widget, bound to `V` in zsh's `vi` keymap).\n  (#267, a7a7f8b42280, ee07588cfd9b)\n\n- Command-lines recalled by `isearch` mode; requires zsh≥5.3.\n  (#261 (in part); #257; 4ad311ec0a68)\n\n- Command-lines whilst the `IGNORE_BRACES` or `IGNORE_CLOSE_BRACES` option is in effect.\n  (a8a6384356af, 02807f1826a5)\n\n- Mismatched parentheses and braces (in the `main` highlighter).\n  (51b9d79c3bb6, 2fabf7ca64b7, a4196eda5e6f, and others)\n\n- Mismatched `do`/`done` keywords.\n  (b2733a64da93)\n\n- Mismatched `foreach`/`end` keywords.\n  (#96, 2bb8f0703d8f)\n\n- In Bourne-style function definitions, when the `MULTI_FUNC_DEF` option is set\n  (which is the default), highlight the first word in the function body as\n  a command word: `f() { g \"$@\" }`.\n  (6f91850a01e1)\n\n- `always` blocks.\n  (#335, e5782e4ddfb6)\n\n- Command substitutions inside double quotes, `\"$(echo foo)\"`.\n  (#139 (in part), c3913e0d8ead)\n\n- Non-alphabetic parameters inside double quotes (`\"$$\"`, `\"$#\"`, `\"$*\"`, `\"$@\"`, `\"$?\"`, `\"$-\"`).\n  (4afe670f7a1b, 44ef6e38e5a7)\n\n- Command words from future versions of zsh (forward compatibly).\n  This also adds an `arg0` style that all other command word styles fall back to.\n  (b4537a972eed, bccc3dc26943)\n\n- Escaped history expansions inside double quotes: `: \"\\!\"`\n  (28d7056a7a06, et seq)\n\n\n## Fixed highlighting of:\n\n- Command separator tokens in syntactically-invalid positions.\n  (09c4114eb980)\n\n- Redirections with a file descriptor number at command word.\n  (#238 (in part), 73ee7c1f6c4a)\n\n- The `select` prompt, `$PS3`.\n  (#268, 451665cb2a8b)\n\n- Values of variables in `vared`.\n  (e500ca246286)\n\n- `!` as an argument (neither a history expansion nor a reserved word).\n  (4c23a2fd1b90)\n\n- \"division by zero\" error under the `brackets` highlighter when `$ZSH_HIGHLIGHT_STYLES` is empty.\n  (f73f3d53d3a6)\n\n- Process substitutions, `<(pwd)` and `>(wc -l)`.\n  (#302, 6889ff6bd2ad, bfabffbf975c, fc9c892a3f15)\n\n- The non-`SHORT_LOOPS` form of `repeat` loops: `repeat 42; do true; done`.\n  (#290, 4832f18c50a5, ef68f50c048f, 6362c757b6f7)\n\n- Broken symlinks (are now highlighted as files).\n  (#342, 95f7206a9373, 53083da8215e)\n\n- Lines accepted from `isearch` mode.\n  (#284; #257, #259, #288; 5bae6219008b, a8fe22d42251)\n\n- Work around upstream bug that triggered when the command word was a relative\n  path, that when interpreted relative to a $PATH directory denoted a command;\n  the effect of that upstream bug was that the relative path was cached as\n  a \"valid external command name\".\n  (#354, #355, 51614ca2c994, fdaeec45146b, 7d38d07255e4;\n  upstream fix slated to be released in 5.3 (workers/39104))\n\n- After accepting a line with the cursor on a bracket, the matching bracket\n  of the bracket under the cursor no longer remains highlighted (with the\n  `brackets` highlighter).\n  (4c4baede519a)\n\n- The first word on a new line within an array assignment or initialization is no\n  longer considered a command position.\n  (8bf423d16d46)\n\n- Subshells that end at command position, `(A=42)`, `(true;)`.\n  (#231, 7fb6f9979121; #344, 4fc35362ee5a)\n\n- Command word after array assignment, `a=(lorem ipsum) pwd`.\n  (#330, 7fb6f9979121)\n\n\n## API changes (for highlighter authors):\n\n- New interface `_zsh_highlight_add_highlight`.\n  (341a3ae1f015, c346f6eb6fb6)\n\n- tests: Specify the style key, not its value, in test expectations.\n  (a830613467af, fd061b5730bf, eaa4335c3441, among others)\n\n- Module author documentation improvements.\n  (#306 (in part), 217669270418, 0ff354b44b6e, 80148f6c8402, 364f206a547f, and others)\n\n- The driver no longer defines a `_zsh_highlight_${highlighter}_highlighter_cache`\n  variable, which is in the highlighters' namespace.\n  (3e59ab41b6b8, 80148f6c8402, f91a7b885e7d)\n\n- Rename highlighter entry points.  The old names remain supported for\n  backwards compatibility.\n  (a3d5dfcbdae9, c793e0dceab1)\n\n- tests: Add the \"NONE\" expectation.\n  (4da9889d1545, 13018f3dd735, d37c55c788cd)\n\n- tests: consider a test that writes to stderr to have failed.\n  (#291, 1082067f9315)\n\n\n## Developer-visible changes:\n\n- Add `make quiet-test`.\n  (9b64ad750f35)\n\n- test harness: Better quote replaceables in error messages.\n  (30d8f92df225)\n\n- test harness: Fix exit code for XPASS.\n  (bb8d325c0cbd)\n\n- Create [HACKING.md](HACKING.md).\n  (cef49752fd0e)\n\n- tests: Emit a description for PASS test points.\n  (6aa57d60aa64, f0bae44b76dd)\n\n- tests: Create a script that generates a test file.\n  (8013dc3b8db6, et seq; `tests/generate.zsh`)\n\n\n## Other changes:\n\n- Under zsh≤5.2, widgets whose names start with a `_` are no longer excluded\n  from highlighting.\n  (ed33d2cb1388; reverts part of 186d80054a40 which was for #65)\n\n- Under zsh≤5.2, widgets implemented by a function named after the widget are\n  no longer excluded from highlighting.\n  (487b122c480d; reverts part of 776453cb5b69)\n\n- Under zsh≤5.2, shell-unsafe widget names can now be wrapped.\n  (#278, 6a634fac9fb9, et seq)\n\n- Correct some test expectations.\n  (78290e043bc5)\n\n- `zsh-syntax-highlighting.plugin.zsh`: Convert from symlink to plain file\n  for msys2 compatibility.\n  (#292, d4f8edc9f3ad)\n\n- Document installation under some plugin managers.\n  (e635f766bef9, 9cab566f539b)\n\n- Don't leak the `PATH_DIRS` option.\n  (7b82b88a7166)\n\n- Don't require the `FUNCTION_ARGZERO` option to be set.\n  (#338, 750aebc553f2)\n\n- Under zsh≤5.2, support binding incomplete/nonexistent widgets.\n  (9e569bb0fe04, part of #288)\n\n- Make the driver reentrant, fixing possibility of infinite recursion\n  under zsh≤5.2 under interaction with theoretical third-party code.\n  (#305, d711563fe1bf, 295d62ec888d, f3242cbd6aba)\n\n- Fix warnings when `WARN_CREATE_GLOBAL` is set prior to sourcing zsh-syntax-highlighting.\n  (z-sy-h already sets `WARN_CREATE_GLOBAL` internally.)\n  (da60234fb236)\n\n- Warn only once, rather than once per keypress, when a highlighter is unavailable.\n  (0a9b347483ae)\n\n\n# Changes in version 0.4.1\n\n## Fixes:\n\n- Arguments to widgets were not properly dash-escaped.  Only matters for widgets\n  that take arguments (i.e., that are invoked as `zle ${widget} -- ${args}`).\n  (282c7134e8ac, reverts c808d2187a73)\n\n\n# Changes in version 0.4.0\n\n\n## Added highlighting of:\n\n- incomplete sudo commands\n  (a3047a912100, 2f05620b19ae)\n\n    ```zsh\n    sudo;\n    sudo -u;\n    ```\n\n- command words following reserved words\n  (#207, #222, b397b12ac139 et seq, 6fbd2aa9579b et seq, 8b4adbd991b0)\n\n    ```zsh\n    if ls; then ls; else ls; fi\n    repeat 10 do ls; done\n    ```\n\n    (The `ls` are now highlighted as a command.)\n\n- comments (when `INTERACTIVE_COMMENTS` is set)\n  (#163, #167, 693de99a9030)\n\n    ```zsh\n    echo Hello # comment\n    ```\n\n- closing brackets of arithmetic expansion, subshells, and blocks\n  (#226, a59f442d2d34, et seq)\n\n    ```zsh\n    (( foo ))\n    ( foo )\n    { foo }\n    ```\n\n- command names enabled by the `PATH_DIRS` option\n  (#228, 96ee5116b182)\n\n    ```zsh\n    # When ~/bin/foo/bar exists, is executable, ~/bin is in $PATH,\n    # and 'setopt PATH_DIRS' is in effect\n    foo/bar\n    ```\n\n- parameter expansions with braces inside double quotes\n  (#186, 6e3720f39d84)\n\n    ```zsh\n    echo \"${foo}\"\n    ```\n\n- parameter expansions in command word\n  (#101, 4fcfb15913a2)\n\n    ```zsh\n    x=/bin/ls\n    $x -l\n    ```\n\n- the command separators '\\|&', '&!', '&\\|'\n\n    ```zsh\n    view file.pdf &!  ls\n    ```\n\n\n## Fixed highlighting of:\n\n- precommand modifiers at non-command-word position\n  (#209, 2c9f8c8c95fa)\n\n    ```zsh\n    ls command foo\n    ```\n\n- sudo commands with infix redirections\n  (#221, be006aded590, 86e924970911)\n\n    ```zsh\n    sudo -u >/tmp/foo.out user ls\n    ```\n\n- subshells; anonymous functions\n  (#166, #194, 0d1bfbcbfa67, 9e178f9f3948)\n\n    ```zsh\n    (true)\n    () { true }\n    ```\n\n- parameter assignment statements with no command\n  (#205, 01d7eeb3c713)\n\n    ```zsh\n    A=1;\n    ```\n\n    (The semicolon used to be highlighted as a mistake)\n\n- cursor highlighter: Remove the cursor highlighting when accepting a line.\n  (#109, 4f0c293fdef0)\n\n\n## Removed features:\n\n- Removed highlighting of approximate paths (`path_approx`).\n  (#187, 98aee7f8b9a3)\n\n\n## Other changes:\n\n- main highlighter refactored to use states rather than booleans.\n  (2080a441ac49, et seq)\n\n- Fix initialization when sourcing `zsh-syntax-highlighting.zsh` via a symlink\n  (083c47b00707)\n\n- docs: Add screenshot.\n  (57624bb9f64b)\n\n- widgets wrapping: Don't add '--' when invoking widgets.\n  (c808d2187a73) [_reverted in 0.4.1_]\n\n- Refresh highlighting upon `accept-*` widgets (`accept-line` et al).\n  (59fbdda64c21)\n\n- Stop leaking match/mbegin/mend to global scope (thanks to upstream\n  `WARN_CREATE_GLOBAL` improvements).\n  (d3deffbf46a4)\n\n- 'make install': Permit setting `$(SHARE_DIR)` from the environment.\n  (e1078a8b4cf1)\n\n- driver: Tolerate KSH_ARRAYS being set in the calling context.\n  (#162, 8f19af6b319d)\n\n- 'make install': Install documentation fully and properly.\n  (#219, b1619c001390, et seq)\n\n- docs: Improve 'main' highlighter's documentation.\n  (00de155063f5, 7d4252f5f596)\n\n- docs: Moved to a new docs/ tree; assorted minor updates\n  (c575f8f37567, 5b34c23cfad5, et seq)\n\n- docs: Split README.md into INSTALL.md\n  (0b3183f6cb9a)\n\n- driver: Report `$ZSH_HIGHLIGHT_REVISION` when running from git\n  (84734ba95026)\n\n\n## Developer-visible changes:\n\n- Test harness converted to [TAP](https://testanything.org/tap-specification.html) format\n  (d99aa58aaaef, et seq)\n\n- Run each test in a separate subprocess, isolating them from each other\n  (d99aa58aaaef, et seq)\n\n- Fix test failure with nonexisting $HOME\n  (#216, b2ac98b98150)\n\n- Test output is now colorized.\n  (4d3da30f8b72, 6fe07c096109)\n\n- Document `make install`\n  (a18a7427fd2c)\n\n- tests: Allow specifying the zsh binary to use.\n  (557bb7e0c6a0)\n\n- tests: Add 'make perf' target\n  (4513eaea71d7)\n\n- tests: Run each test in a sandbox directory\n  (c01533920245)\n\n\n# Changes in version 0.3.0\n\n\n## Added highlighting of:\n\n- suffix aliases (requires zsh 5.1.1 or newer):\n\n    ```zsh\n    alias -s png=display\n    foo.png\n    ```\n\n- prefix redirections:\n\n    ```zsh\n    <foo.txt cat\n    ```\n\n- redirection operators:\n\n    ```zsh\n    echo > foo.txt\n    ```\n\n- arithmetic evaluations:\n\n    ```zsh\n    (( 42 ))\n    ```\n\n- $'' strings, including \\x/\\octal/\\u/\\U escapes\n\n    ```zsh\n    : $'foo\\u0040bar'\n    ```\n\n- multiline strings:\n\n    ```zsh\n    % echo \"line 1\n    line 2\"\n    ```\n\n- string literals that haven't been finished:\n\n    ```zsh\n    % echo \"Hello, world\n    ```\n- command words that involve tilde expansion:\n\n    ```zsh\n    % ~/bin/foo\n    ```\n\n## Fixed highlighting of:\n\n- quoted command words:\n\n    ```zsh\n    % \\ls\n    ```\n\n- backslash escapes in \"\" strings:\n\n    ```zsh\n    % echo \"\\x41\"\n    ```\n\n- noglob after command separator:\n\n    ```zsh\n    % :; noglob echo *\n    ```\n\n- glob after command separator, when the first command starts with 'noglob':\n\n    ```zsh\n    % noglob true; echo *\n    ```\n\n- the region (vi visual mode / set-mark-command) (issue #165)\n\n- redirection and command separators that would be highlighted as `path_approx`\n\n    ```zsh\n    % echo foo;‸\n    % echo <‸\n    ```\n\n    (where `‸` represents the cursor location)\n\n- escaped globbing (outside quotes)\n\n    ```zsh\n    % echo \\*\n    ```\n\n\n## Other changes:\n\n- implemented compatibility with zsh's paste highlighting (issue #175)\n\n- `$?` propagated correctly to wrapped widgets\n\n- don't leak $REPLY into global scope\n\n\n## Developer-visible changes:\n\n- added makefile with `install` and `test` targets\n\n- set `warn_create_global` internally\n\n- document release process\n\n\n\n\n# Version 0.2.1\n\n(Start of changelog.)\n\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "highlighters",
          "type": "tree",
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "release.md",
          "type": "blob",
          "size": 1.056640625,
          "content": "# Release procedure (for developers):\n\n- Ensure every `is-at-least` invocation passes a stable zsh release's version number as the first argument\n- For minor (A.B.0) releases:\n  - Check whether the release uses any not-yet-released zsh features\n- Check open issues and outstanding pull requests\n- Confirm `make test` passes\n  - check with multiple zsh versions\n    (easiest to check GitHub Actions: https://github.com/zsh-users/zsh-syntax-highlighting/actions)\n- Update changelog.md\n  `tig --abbrev=12  --abbrev-commit 0.4.1..upstream/master`\n- Make sure there are no local commits and that `git status` is clean;\n  Remove `-dev` suffix from `./.version`;\n  Commit that using `git commit -m \"Tag version $(<.version).\" .version`;\n  Tag it using `git tag -s -m \"Tag version $(<.version)\" $(<.version)`;\n  Increment `./.version` and restore the `-dev` suffix;\n  Commit that using `git commit -C b5c30ae52638e81a38fe5329081c5613d7bd6ca5 .version`.\n- Push with `git push && git push --tags`\n- Notify downstreams (OS packages)\n  - anitya should autodetect the tag\n- Update /topic on IRC\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "zsh-syntax-highlighting.plugin.zsh",
          "type": "blob",
          "size": 0.0556640625,
          "content": "0=${(%):-%N}\nsource ${0:A:h}/zsh-syntax-highlighting.zsh\n"
        },
        {
          "name": "zsh-syntax-highlighting.zsh",
          "type": "blob",
          "size": 23.21875,
          "content": "# -------------------------------------------------------------------------------------------------\n# Copyright (c) 2010-2020 zsh-syntax-highlighting contributors\n# All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without modification, are permitted\n# provided that the following conditions are met:\n#\n#  * Redistributions of source code must retain the above copyright notice, this list of conditions\n#    and the following disclaimer.\n#  * Redistributions in binary form must reproduce the above copyright notice, this list of\n#    conditions and the following disclaimer in the documentation and/or other materials provided\n#    with the distribution.\n#  * Neither the name of the zsh-syntax-highlighting contributors nor the names of its contributors\n#    may be used to endorse or promote products derived from this software without specific prior\n#    written permission.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND\n# FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR\n# CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\n# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n# DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER\n# IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT\n# OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n# -------------------------------------------------------------------------------------------------\n# -*- mode: zsh; sh-indentation: 2; indent-tabs-mode: nil; sh-basic-offset: 2; -*-\n# vim: ft=zsh sw=2 ts=2 et\n# -------------------------------------------------------------------------------------------------\n\n# First of all, ensure predictable parsing.\ntypeset zsh_highlight__aliases=\"$(builtin alias -Lm '[^+]*')\"\n# In zsh <= 5.2, aliases that begin with a plus sign ('alias -- +foo=42')\n# are emitted by `alias -L` without a '--' guard, so they don't round trip.\n#\n# Hence, we exclude them from unaliasing:\nbuiltin unalias -m '[^+]*'\n\n# Set $0 to the expected value, regardless of functionargzero.\n0=${(%):-%N}\nif true; then\n  # $0 is reliable\n  typeset -g ZSH_HIGHLIGHT_VERSION=$(<\"${0:A:h}\"/.version)\n  typeset -g ZSH_HIGHLIGHT_REVISION=$(<\"${0:A:h}\"/.revision-hash)\n  if [[ $ZSH_HIGHLIGHT_REVISION == \\$Format:* ]]; then\n    # When running from a source tree without 'make install', $ZSH_HIGHLIGHT_REVISION\n    # would be set to '$Format:%H$' literally.  That's an invalid value, and obtaining\n    # the valid value (via `git rev-parse HEAD`, as Makefile does) might be costly, so:\n    ZSH_HIGHLIGHT_REVISION=HEAD\n  fi\nfi\n\n# This function takes a single argument F and returns True iff F is an autoload stub.\n_zsh_highlight__function_is_autoload_stub_p() {\n  if zmodload -e zsh/parameter; then\n    #(( ${+functions[$1]} )) &&\n    [[ \"$functions[$1]\" == *\"builtin autoload -X\"* ]]\n  else\n    #[[ $(type -wa -- \"$1\") == *'function'* ]] &&\n    [[ \"${${(@f)\"$(which -- \"$1\")\"}[2]}\" == $'\\t'$histchars[3]' undefined' ]]\n  fi\n  # Do nothing here: return the exit code of the if.\n}\n\n# Return True iff the argument denotes a function name.\n_zsh_highlight__is_function_p() {\n  if zmodload -e zsh/parameter; then\n    (( ${+functions[$1]} ))\n  else\n    [[ $(type -wa -- \"$1\") == *'function'* ]]\n  fi\n}\n\n# This function takes a single argument F and returns True iff F denotes the\n# name of a callable function.  A function is callable if it is fully defined\n# or if it is marked for autoloading and autoloading it at the first call to it\n# will succeed.  In particular, if F has been marked for autoloading\n# but is not available in $fpath, then calling this function on F will return False.\n#\n# See users/21671 https://www.zsh.org/cgi-bin/mla/redirect?USERNUMBER=21671\n_zsh_highlight__function_callable_p() {\n  if _zsh_highlight__is_function_p \"$1\" &&\n     ! _zsh_highlight__function_is_autoload_stub_p \"$1\"\n  then\n    # Already fully loaded.\n    return 0 # true\n  else\n    # \"$1\" is either an autoload stub, or not a function at all.\n    #\n    # Use a subshell to avoid affecting the calling shell.\n    #\n    # We expect 'autoload +X' to return non-zero if it fails to fully load\n    # the function.\n    ( autoload -U +X -- \"$1\" 2>/dev/null )\n    return $?\n  fi\n}\n\n# -------------------------------------------------------------------------------------------------\n# Core highlighting update system\n# -------------------------------------------------------------------------------------------------\n\n# Use workaround for bug in ZSH?\n# zsh-users/zsh@48cadf4 https://www.zsh.org/mla/workers/2017/msg00034.html\nautoload -Uz is-at-least\nif is-at-least 5.4; then\n  typeset -g zsh_highlight__pat_static_bug=false\nelse\n  typeset -g zsh_highlight__pat_static_bug=true\nfi\n\n# Array declaring active highlighters names.\ntypeset -ga ZSH_HIGHLIGHT_HIGHLIGHTERS\n\n# Update ZLE buffer syntax highlighting.\n#\n# Invokes each highlighter that needs updating.\n# This function is supposed to be called whenever the ZLE state changes.\n_zsh_highlight()\n{\n  # Store the previous command return code to restore it whatever happens.\n  local ret=$?\n  # Make it read-only.  Can't combine this with the previous line when POSIX_BUILTINS may be set.\n  typeset -r ret\n\n  # $region_highlight should be predefined, either by zle or by the test suite's mock (non-special) array.\n  (( ${+region_highlight[@]} )) || {\n    echo >&2 'zsh-syntax-highlighting: error: $region_highlight is not defined'\n    echo >&2 'zsh-syntax-highlighting: (Check whether zsh-syntax-highlighting was installed according to the instructions.)'\n    return $ret\n  }\n\n  # Probe the memo= feature, once.\n  (( ${+zsh_highlight__memo_feature} )) || {\n    region_highlight+=( \" 0 0 fg=red, memo=zsh-syntax-highlighting\" )\n    case ${region_highlight[-1]} in\n      (\"0 0 fg=red\")\n        # zsh 5.8 or earlier\n        integer -gr zsh_highlight__memo_feature=0\n        ;;\n      (\"0 0 fg=red memo=zsh-syntax-highlighting\")\n        # zsh 5.9 or later\n        integer -gr zsh_highlight__memo_feature=1\n        ;;\n      (\" 0 0 fg=red, memo=zsh-syntax-highlighting\") ;&\n      (*)\n        # We can get here in two ways:\n        #\n        # 1. When not running as a widget.  In that case, $region_highlight is\n        # not a special variable (= one with custom getter/setter functions\n        # written in C) but an ordinary one, so the third case pattern matches\n        # and we fall through to this block.  (The test suite uses this codepath.)\n        #\n        # 2. When running under a future version of zsh that will have changed\n        # the serialization of $region_highlight elements from their underlying\n        # C structs, so that none of the previous case patterns will match.\n        #\n        # In either case, fall back to a version check.\n        if is-at-least 5.9; then\n          integer -gr zsh_highlight__memo_feature=1\n        else\n          integer -gr zsh_highlight__memo_feature=0\n        fi\n        ;;\n    esac\n    region_highlight[-1]=()\n  }\n\n  # Reset region_highlight to build it from scratch\n  if (( zsh_highlight__memo_feature )); then\n    region_highlight=( \"${(@)region_highlight:#*memo=zsh-syntax-highlighting*}\" )\n  else\n    # Legacy codepath.  Not very interoperable with other plugins (issue #418).\n    region_highlight=()\n  fi\n\n  # Remove all highlighting in isearch, so that only the underlining done by zsh itself remains.\n  # For details see FAQ entry 'Why does syntax highlighting not work while searching history?'.\n  # This disables highlighting during isearch (for reasons explained in README.md) unless zsh is new enough\n  # and doesn't have the pattern matching bug\n  if [[ $WIDGET == zle-isearch-update ]] && { $zsh_highlight__pat_static_bug || ! (( $+ISEARCHMATCH_ACTIVE )) }; then\n    return $ret\n  fi\n\n  # Before we 'emulate -L', save the user's options\n  local -A zsyh_user_options\n  if zmodload -e zsh/parameter; then\n    zsyh_user_options=(\"${(kv)options[@]}\")\n  else\n    local canonical_options onoff option raw_options\n    raw_options=(${(f)\"$(emulate -R zsh; set -o)\"})\n    canonical_options=(${${${(M)raw_options:#*off}%% *}#no} ${${(M)raw_options:#*on}%% *})\n    for option in \"${canonical_options[@]}\"; do\n      [[ -o $option ]]\n      case $? in\n        (0) zsyh_user_options+=($option on);;\n        (1) zsyh_user_options+=($option off);;\n        (*) # Can't happen, surely?\n            echo \"zsh-syntax-highlighting: warning: '[[ -o $option ]]' returned $?\"\n            ;;\n      esac\n    done\n  fi\n  typeset -r zsyh_user_options\n\n  emulate -L zsh\n  setopt localoptions warncreateglobal nobashrematch\n  local REPLY # don't leak $REPLY into global scope\n\n  # Do not highlight if there are more than 300 chars in the buffer. It's most\n  # likely a pasted command or a huge list of files in that case..\n  [[ -n ${ZSH_HIGHLIGHT_MAXLENGTH:-} ]] && [[ $#BUFFER -gt $ZSH_HIGHLIGHT_MAXLENGTH ]] && return $ret\n\n  # Do not highlight if there are pending inputs (copy/paste).\n  (( KEYS_QUEUED_COUNT > 0 )) && return $ret\n  (( PENDING > 0 )) && return $ret\n\n  {\n    local cache_place\n    local -a region_highlight_copy\n\n    # Select which highlighters in ZSH_HIGHLIGHT_HIGHLIGHTERS need to be invoked.\n    local highlighter; for highlighter in $ZSH_HIGHLIGHT_HIGHLIGHTERS; do\n\n      # eval cache place for current highlighter and prepare it\n      cache_place=\"_zsh_highlight__highlighter_${highlighter}_cache\"\n      typeset -ga ${cache_place}\n\n      # If highlighter needs to be invoked\n      if ! type \"_zsh_highlight_highlighter_${highlighter}_predicate\" >&/dev/null; then\n        echo \"zsh-syntax-highlighting: warning: disabling the ${(qq)highlighter} highlighter as it has not been loaded\" >&2\n        # TODO: use ${(b)} rather than ${(q)} if supported\n        ZSH_HIGHLIGHT_HIGHLIGHTERS=( ${ZSH_HIGHLIGHT_HIGHLIGHTERS:#${highlighter}} )\n      elif \"_zsh_highlight_highlighter_${highlighter}_predicate\"; then\n\n        # save a copy, and cleanup region_highlight\n        region_highlight_copy=(\"${region_highlight[@]}\")\n        region_highlight=()\n\n        # Execute highlighter and save result\n        {\n          \"_zsh_highlight_highlighter_${highlighter}_paint\"\n        } always {\n          : ${(AP)cache_place::=\"${region_highlight[@]}\"}\n        }\n\n        # Restore saved region_highlight\n        region_highlight=(\"${region_highlight_copy[@]}\")\n\n      fi\n\n      # Use value form cache if any cached\n      region_highlight+=(\"${(@P)cache_place}\")\n\n    done\n\n    # Re-apply zle_highlight settings\n\n    # region\n    () {\n      (( REGION_ACTIVE )) || return\n      integer min max\n      if (( MARK > CURSOR )) ; then\n        min=$CURSOR max=$MARK\n      else\n        min=$MARK max=$CURSOR\n      fi\n      if (( REGION_ACTIVE == 1 )); then\n        [[ $KEYMAP = vicmd ]] && (( max++ ))\n      elif (( REGION_ACTIVE == 2 )); then\n        local needle=$'\\n'\n        # CURSOR and MARK are 0 indexed between letters like region_highlight\n        # Do not include the newline in the highlight\n        (( min = ${BUFFER[(Ib:min:)$needle]} ))\n        (( max = ${BUFFER[(ib:max:)$needle]} - 1 ))\n      fi\n      _zsh_highlight_apply_zle_highlight region standout \"$min\" \"$max\"\n    }\n\n    # yank / paste (zsh-5.1.1 and newer)\n    (( $+YANK_ACTIVE )) && (( YANK_ACTIVE )) && _zsh_highlight_apply_zle_highlight paste standout \"$YANK_START\" \"$YANK_END\"\n\n    # isearch\n    (( $+ISEARCHMATCH_ACTIVE )) && (( ISEARCHMATCH_ACTIVE )) && _zsh_highlight_apply_zle_highlight isearch underline \"$ISEARCHMATCH_START\" \"$ISEARCHMATCH_END\"\n\n    # suffix\n    (( $+SUFFIX_ACTIVE )) && (( SUFFIX_ACTIVE )) && _zsh_highlight_apply_zle_highlight suffix bold \"$SUFFIX_START\" \"$SUFFIX_END\"\n\n\n    return $ret\n\n\n  } always {\n    typeset -g _ZSH_HIGHLIGHT_PRIOR_BUFFER=\"$BUFFER\"\n    typeset -gi _ZSH_HIGHLIGHT_PRIOR_CURSOR=$CURSOR\n  }\n}\n\n# Apply highlighting based on entries in the zle_highlight array.\n# This function takes four arguments:\n# 1. The exact entry (no patterns) in the zle_highlight array:\n#    region, paste, isearch, or suffix\n# 2. The default highlighting that should be applied if the entry is unset\n# 3. and 4. Two integer values describing the beginning and end of the\n#    range. The order does not matter.\n_zsh_highlight_apply_zle_highlight() {\n  local entry=\"$1\" default=\"$2\"\n  integer first=\"$3\" second=\"$4\"\n\n  # read the relevant entry from zle_highlight\n  #\n  # ### In zsh≥5.0.8 we'd use ${(b)entry}, but we support older zsh's, so we don't\n  # ### add (b).  The only effect is on the failure mode for callers that violate\n  # ### the precondition.\n  local region=\"${zle_highlight[(r)${entry}:*]-}\"\n\n  if [[ -z \"$region\" ]]; then\n    # entry not specified at all, use default value\n    region=$default\n  else\n    # strip prefix\n    region=\"${region#${entry}:}\"\n\n    # no highlighting when set to the empty string or to 'none'\n    if [[ -z \"$region\" ]] || [[ \"$region\" == none ]]; then\n      return\n    fi\n  fi\n\n  integer start end\n  if (( first < second )); then\n    start=$first end=$second\n  else\n    start=$second end=$first\n  fi\n  region_highlight+=(\"$start $end $region, memo=zsh-syntax-highlighting\")\n}\n\n\n# -------------------------------------------------------------------------------------------------\n# API/utility functions for highlighters\n# -------------------------------------------------------------------------------------------------\n\n# Array used by highlighters to declare user overridable styles.\ntypeset -gA ZSH_HIGHLIGHT_STYLES\n\n# Whether the command line buffer has been modified or not.\n#\n# Returns 0 if the buffer has changed since _zsh_highlight was last called.\n_zsh_highlight_buffer_modified()\n{\n  [[ \"${_ZSH_HIGHLIGHT_PRIOR_BUFFER:-}\" != \"$BUFFER\" ]]\n}\n\n# Whether the cursor has moved or not.\n#\n# Returns 0 if the cursor has moved since _zsh_highlight was last called.\n_zsh_highlight_cursor_moved()\n{\n  [[ -n $CURSOR ]] && [[ -n ${_ZSH_HIGHLIGHT_PRIOR_CURSOR-} ]] && (($_ZSH_HIGHLIGHT_PRIOR_CURSOR != $CURSOR))\n}\n\n# Add a highlight defined by ZSH_HIGHLIGHT_STYLES.\n#\n# Should be used by all highlighters aside from 'pattern' (cf. ZSH_HIGHLIGHT_PATTERN).\n# Overwritten in tests/test-highlighting.zsh when testing.\n_zsh_highlight_add_highlight()\n{\n  local -i start end\n  local highlight\n  start=$1\n  end=$2\n  shift 2\n  for highlight; do\n    if (( $+ZSH_HIGHLIGHT_STYLES[$highlight] )); then\n      region_highlight+=(\"$start $end $ZSH_HIGHLIGHT_STYLES[$highlight], memo=zsh-syntax-highlighting\")\n      break\n    fi\n  done\n}\n\n# -------------------------------------------------------------------------------------------------\n# Setup functions\n# -------------------------------------------------------------------------------------------------\n\n# Helper for _zsh_highlight_bind_widgets\n# $1 is name of widget to call\n_zsh_highlight_call_widget()\n{\n  builtin zle \"$@\" &&\n  _zsh_highlight\n}\n\n# Decide whether to use the zle-line-pre-redraw codepath (colloquially known as\n# \"feature/redrawhook\", after the topic branch's name) or the legacy \"bind all\n# widgets\" codepath.\n#\n# We use the new codepath under two conditions:\n#\n# 1. If it's available, which we check by testing for add-zle-hook-widget's availability.\n# \n# 2. If zsh has the memo= feature, which is required for interoperability reasons.\n#    See issues #579 and #735, and the issues referenced from them.\n#\n#    We check this with a plain version number check, since a functional check,\n#    as done by _zsh_highlight, can only be done from inside a widget\n#    function — a catch-22.\nif is-at-least 5.9 && _zsh_highlight__function_callable_p add-zle-hook-widget\nthen\n  autoload -U add-zle-hook-widget\n  _zsh_highlight__zle-line-finish() {\n    # Reset $WIDGET since the 'main' highlighter depends on it.\n    #\n    # Since $WIDGET is declared by zle as read-only in this function's scope,\n    # a nested function is required in order to shadow its built-in value;\n    # see \"User-defined widgets\" in zshall.\n    () {\n      local -h -r WIDGET=zle-line-finish\n      _zsh_highlight\n    }\n  }\n  _zsh_highlight__zle-line-pre-redraw() {\n    # Set $? to 0 for _zsh_highlight.  Without this, subsequent\n    # zle-line-pre-redraw hooks won't run, since add-zle-hook-widget happens to\n    # call us with $? == 1 in the common case.\n    true && _zsh_highlight \"$@\"\n  }\n  _zsh_highlight_bind_widgets(){}\n  if [[ -o zle ]]; then\n    add-zle-hook-widget zle-line-pre-redraw _zsh_highlight__zle-line-pre-redraw\n    add-zle-hook-widget zle-line-finish _zsh_highlight__zle-line-finish\n  fi\nelse\n  # Rebind all ZLE widgets to make them invoke _zsh_highlights.\n  _zsh_highlight_bind_widgets()\n  {\n    setopt localoptions noksharrays\n    typeset -F SECONDS\n    local prefix=orig-s$SECONDS-r$RANDOM # unique each time, in case we're sourced more than once\n\n    # Load ZSH module zsh/zleparameter, needed to override user defined widgets.\n    zmodload zsh/zleparameter 2>/dev/null || {\n      print -r -- >&2 'zsh-syntax-highlighting: failed loading zsh/zleparameter.'\n      return 1\n    }\n\n    # Override ZLE widgets to make them invoke _zsh_highlight.\n    local -U widgets_to_bind\n    widgets_to_bind=(${${(k)widgets}:#(.*|run-help|which-command|beep|set-local-history|yank|yank-pop)})\n\n    # Always wrap special zle-line-finish widget. This is needed to decide if the\n    # current line ends and special highlighting logic needs to be applied.\n    # E.g. remove cursor imprint, don't highlight partial paths, ...\n    widgets_to_bind+=(zle-line-finish)\n\n    # Always wrap special zle-isearch-update widget to be notified of updates in isearch.\n    # This is needed because we need to disable highlighting in that case.\n    widgets_to_bind+=(zle-isearch-update)\n\n    local cur_widget\n    for cur_widget in $widgets_to_bind; do\n      case ${widgets[$cur_widget]:-\"\"} in\n\n        # Already rebound event: do nothing.\n        user:_zsh_highlight_widget_*);;\n\n        # The \"eval\"'s are required to make $cur_widget a closure: the value of the parameter at function\n        # definition time is used.\n        #\n        # We can't use ${0/_zsh_highlight_widget_} because these widgets are always invoked with\n        # NO_function_argzero, regardless of the option's setting here.\n\n        # User defined widget: override and rebind old one with prefix \"orig-\".\n        user:*) zle -N $prefix-$cur_widget ${widgets[$cur_widget]#*:}\n                eval \"_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget ${(q)prefix}-${(q)cur_widget} -- \\\"\\$@\\\" }\"\n                zle -N $cur_widget _zsh_highlight_widget_$prefix-$cur_widget;;\n\n        # Completion widget: override and rebind old one with prefix \"orig-\".\n        completion:*) zle -C $prefix-$cur_widget ${${(s.:.)widgets[$cur_widget]}[2,3]}\n                      eval \"_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget ${(q)prefix}-${(q)cur_widget} -- \\\"\\$@\\\" }\"\n                      zle -N $cur_widget _zsh_highlight_widget_$prefix-$cur_widget;;\n\n        # Builtin widget: override and make it call the builtin \".widget\".\n        builtin) eval \"_zsh_highlight_widget_${(q)prefix}-${(q)cur_widget}() { _zsh_highlight_call_widget .${(q)cur_widget} -- \\\"\\$@\\\" }\"\n                 zle -N $cur_widget _zsh_highlight_widget_$prefix-$cur_widget;;\n\n        # Incomplete or nonexistent widget: Bind to z-sy-h directly.\n        *)\n           if [[ $cur_widget == zle-* ]] && (( ! ${+widgets[$cur_widget]} )); then\n             _zsh_highlight_widget_${cur_widget}() { :; _zsh_highlight }\n             zle -N $cur_widget _zsh_highlight_widget_$cur_widget\n           else\n        # Default: unhandled case.\n             print -r -- >&2 \"zsh-syntax-highlighting: unhandled ZLE widget ${(qq)cur_widget}\"\n             print -r -- >&2 \"zsh-syntax-highlighting: (This is sometimes caused by doing \\`bindkey <keys> ${(q-)cur_widget}\\` without creating the ${(qq)cur_widget} widget with \\`zle -N\\` or \\`zle -C\\`.)\"\n           fi\n      esac\n    done\n  }\nfi\n\n# Load highlighters from directory.\n#\n# Arguments:\n#   1) Path to the highlighters directory.\n_zsh_highlight_load_highlighters()\n{\n  setopt localoptions noksharrays bareglobqual\n\n  # Check the directory exists.\n  [[ -d \"$1\" ]] || {\n    print -r -- >&2 \"zsh-syntax-highlighting: highlighters directory ${(qq)1} not found.\"\n    return 1\n  }\n\n  # Load highlighters from highlighters directory and check they define required functions.\n  local highlighter highlighter_dir\n  for highlighter_dir ($1/*/(/)); do\n    highlighter=\"${highlighter_dir:t}\"\n    [[ -f \"$highlighter_dir${highlighter}-highlighter.zsh\" ]] &&\n      . \"$highlighter_dir${highlighter}-highlighter.zsh\"\n    if type \"_zsh_highlight_highlighter_${highlighter}_paint\" &> /dev/null &&\n       type \"_zsh_highlight_highlighter_${highlighter}_predicate\" &> /dev/null;\n    then\n        # New (0.5.0) function names\n    elif type \"_zsh_highlight_${highlighter}_highlighter\" &> /dev/null &&\n         type \"_zsh_highlight_${highlighter}_highlighter_predicate\" &> /dev/null;\n    then\n        # Old (0.4.x) function names\n        if false; then\n            # TODO: only show this warning for plugin authors/maintainers, not for end users\n            print -r -- >&2 \"zsh-syntax-highlighting: warning: ${(qq)highlighter} highlighter uses deprecated entry point names; please ask its maintainer to update it: https://github.com/zsh-users/zsh-syntax-highlighting/issues/329\"\n        fi\n        # Make it work.\n        eval \"_zsh_highlight_highlighter_${(q)highlighter}_paint() { _zsh_highlight_${(q)highlighter}_highlighter \\\"\\$@\\\" }\"\n        eval \"_zsh_highlight_highlighter_${(q)highlighter}_predicate() { _zsh_highlight_${(q)highlighter}_highlighter_predicate \\\"\\$@\\\" }\"\n    else\n        print -r -- >&2 \"zsh-syntax-highlighting: ${(qq)highlighter} highlighter should define both required functions '_zsh_highlight_highlighter_${highlighter}_paint' and '_zsh_highlight_highlighter_${highlighter}_predicate' in ${(qq):-\"$highlighter_dir${highlighter}-highlighter.zsh\"}.\"\n    fi\n  done\n}\n\n\n# -------------------------------------------------------------------------------------------------\n# Setup\n# -------------------------------------------------------------------------------------------------\n\n# Try binding widgets.\n_zsh_highlight_bind_widgets || {\n  print -r -- >&2 'zsh-syntax-highlighting: failed binding ZLE widgets, exiting.'\n  return 1\n}\n\n# Resolve highlighters directory location.\n_zsh_highlight_load_highlighters \"${ZSH_HIGHLIGHT_HIGHLIGHTERS_DIR:-${${0:A}:h}/highlighters}\" || {\n  print -r -- >&2 'zsh-syntax-highlighting: failed loading highlighters, exiting.'\n  return 1\n}\n\n# Reset scratch variables when commandline is done.\n_zsh_highlight_preexec_hook()\n{\n  typeset -g _ZSH_HIGHLIGHT_PRIOR_BUFFER=\n  typeset -gi _ZSH_HIGHLIGHT_PRIOR_CURSOR=\n}\nautoload -Uz add-zsh-hook\nadd-zsh-hook preexec _zsh_highlight_preexec_hook 2>/dev/null || {\n    print -r -- >&2 'zsh-syntax-highlighting: failed loading add-zsh-hook.'\n  }\n\n# Load zsh/parameter module if available\nzmodload zsh/parameter 2>/dev/null || true\n\n# Initialize the array of active highlighters if needed.\n[[ $#ZSH_HIGHLIGHT_HIGHLIGHTERS -eq 0 ]] && ZSH_HIGHLIGHT_HIGHLIGHTERS=(main)\n\nif (( $+X_ZSH_HIGHLIGHT_DIRS_BLACKLIST )); then\n  print >&2 'zsh-syntax-highlighting: X_ZSH_HIGHLIGHT_DIRS_BLACKLIST is deprecated. Please use ZSH_HIGHLIGHT_DIRS_BLACKLIST.'\n  ZSH_HIGHLIGHT_DIRS_BLACKLIST=($X_ZSH_HIGHLIGHT_DIRS_BLACKLIST)\n  unset X_ZSH_HIGHLIGHT_DIRS_BLACKLIST\nfi\n\n# Restore the aliases we unned\neval \"$zsh_highlight__aliases\"\nbuiltin unset zsh_highlight__aliases\n\n# Set $?.\ntrue\n"
        }
      ]
    }
  ]
}