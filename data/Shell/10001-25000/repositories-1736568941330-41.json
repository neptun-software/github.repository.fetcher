{
  "metadata": {
    "timestamp": 1736568941330,
    "page": 41,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tmux-plugins/tpm",
      "stars": 12498,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.234375,
          "content": "# Force text files to have unix eols, so Windows/Cygwin does not break them\n*.* eol=lf\n\n# These files are unfortunately not recognized as text files so\n# explicitly listing them here\ntpm eol=lf\nbin/* eol=lf\nbindings/* eol=lf\ntests/* eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0751953125,
          "content": "**/.vagrant/\nrun_tests\ntests/run_tests_in_isolation\ntests/helpers/helpers.sh\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1005859375,
          "content": "[submodule \"lib/tmux-test\"]\n\tpath = lib/tmux-test\n\turl = https://github.com/tmux-plugins/tmux-test.git\n"
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.677734375,
          "content": "# generic packages and tmux\nbefore_install:\n  - sudo apt-get update\n  - sudo apt-get install -y git-core expect\n  - sudo apt-get install -y python-software-properties software-properties-common\n  - sudo apt-get install -y libevent-dev libncurses-dev\n  - git clone https://github.com/tmux/tmux.git\n  - cd tmux\n  - git checkout 2.0\n  - sh autogen.sh\n  - ./configure && make && sudo make install\n\ninstall:\n  - git fetch --unshallow --recurse-submodules || git fetch --recurse-submodules\n  # manual `git clone` required for testing `tmux-test` plugin itself\n  - git clone https://github.com/tmux-plugins/tmux-test lib/tmux-test; true\n  - lib/tmux-test/setup\n\nscript: ./tests/run_tests_in_isolation\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 3.5322265625,
          "content": "# Changelog\n\n### master\n\n### v3.1.0, 2023-01-03\n- upgrade to new version of `tmux-test`\n- bug: when using `emacs` copy mode, Enter does not quit screen after tpm\n  installation/update. Fix by making `Escape` the key for emacs mode.\n- add a doc with troubleshooting instructions\n- add `.gitattributes` file that forces linefeed characters (classic `\\n`) as\n  line endings - helps with misconfigured git on windows/cygwin\n- readme update: announce Cygwin support\n- un-deprecate old plugin definition syntax: `set -g @tpm_plugins`\n- More stuff, check `git log`.\n\n### v3.0.0, 2015-08-03\n- refactor `shared_set_tpm_path_constant` function\n- move all instructions to `docs/` dir\n- add `bin/install_plugins` cli executable script\n- improved test runner function\n- switch to using [tmux-test](https://github.com/tmux-plugins/tmux-test)\n  framework\n- add `bin/update_plugins` cli executable script\n- refactor test `expect` scripts, make them simpler and ensure they properly\n  assert expectations\n- refactor code that sets 'TMUX_PLUGIN_MANAGER_PATH' global env var\n- stop using global variable for 'tpm path'\n- support defining plugins via `set -g @plugin` in sourced files as well\n\n### v2.0.0, 2015-07-07\n- enable overriding default key bindings\n- start using `C-c` to clear screen\n- add uninstall/clean procedure and keybinding (prefix+alt+u) (@chilicuil)\n- add new `set @plugin 'repo'` plugin definition syntax (@chilicuil)\n- revert back to using `-g` flag in new plugin definition syntax\n- permit leading whitespace with new plugin definition syntax (thanks @chilicuil)\n- make sure `TMUX_PLUGIN_MANAGER_PATH` always has trailng slash\n- ensure old/deprecated plugin syntax `set -g @tpm_plugins` works alongside new\n  `set -g @plugin` syntax\n\n### v1.2.2, 2015-02-08\n- set GIT_TERMINAL_PROMPT=0 when doing `git clone`, `pull` or `submodule update`\n  to ensure git does not prompt for username/password in any case\n\n### v1.2.1, 2014-11-21\n- change the way plugin name is expanded. It now uses the http username\n  and password by default, like this: `https://git::@github.com/`. This prevents\n  username and password prompt (and subsequently tmux install hanging) with old\n  git versions. Fixes #7.\n\n### v1.2.0, 2014-11-20\n- refactor tests so they can be used on travis\n- add travis.yml, add travis badge to the readme\n\n### v1.1.0, 2014-11-19\n- if the plugin is not downloaded do not source it\n- remove `PLUGINS.md`, an obsolete list of plugins\n- update readme with instructions about uninstalling plugins\n- tilde char and `$HOME` in `TMUX_SHARED_MANAGER_PATH` couldn't be used because\n  they are just plain strings. Fixing the problem by manually expanding them.\n- bugfix: fragile `*.tmux` file globbing (@majutsushi)\n\n### v1.0.0, 2014-08-05\n- update readme because of github organization change to\n  [tmux-plugins](https://github.com/tmux-plugins)\n- update tests to pass\n- update README to suggest different first plugin\n- update list of plugins in the README\n- remove README 'about' section\n- move key binding to the main file. Delete `key_binding.sh`.\n- rename `display_message` -> `echo_message`\n- installing plugins installs just new plugins. Already installed plugins aren't\n  updated.\n- add 'update plugin' binding and functionality\n- add test for updating a plugin\n\n### v0.0.2, 2014-07-17\n- run all *.tmux plugin files as executables\n- fix all redirects to /dev/null\n- fix bug: TPM shared path is created before sync (cloning plugins from github\n  is done)\n- add test suite running in Vagrant\n- add Tmux version check. `TPM` won't run if Tmux version is less than 1.9.\n\n### v0.0.1, 2014-05-21\n- get TPM up and running\n"
        },
        {
          "name": "HOW_TO_PLUGIN.md",
          "type": "blob",
          "size": 0.08203125,
          "content": "Instructions moved to\n[docs/how_to_create_plugin.md](docs/how_to_create_plugin.md).\n"
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT license\nCopyright (C) 2014 Bruno Sutic\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the \"Software\"),\nto deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense,\nand/or sell copies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\nDAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE\nOR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6337890625,
          "content": "# Tmux Plugin Manager\n\n[![Build Status](https://travis-ci.org/tmux-plugins/tpm.svg?branch=master)](https://travis-ci.org/tmux-plugins/tpm)\n\nInstalls and loads `tmux` plugins.\n\nTested and working on Linux, OSX, and Cygwin.\n\nSee list of plugins [here](https://github.com/tmux-plugins/list).\n\n### Installation\n\nRequirements: `tmux` version 1.9 (or higher), `git`, `bash`.\n\nClone TPM:\n\n```bash\ngit clone https://github.com/tmux-plugins/tpm ~/.tmux/plugins/tpm\n```\n\nPut this at the bottom of `~/.tmux.conf` (`$XDG_CONFIG_HOME/tmux/tmux.conf`\nworks too):\n\n```bash\n# List of plugins\nset -g @plugin 'tmux-plugins/tpm'\nset -g @plugin 'tmux-plugins/tmux-sensible'\n\n# Other examples:\n# set -g @plugin 'github_username/plugin_name'\n# set -g @plugin 'github_username/plugin_name#branch'\n# set -g @plugin 'git@github.com:user/plugin'\n# set -g @plugin 'git@bitbucket.com:user/plugin'\n\n# Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)\nrun '~/.tmux/plugins/tpm/tpm'\n```\n\nReload TMUX environment so TPM is sourced:\n\n```bash\n# type this in terminal if tmux is already running\ntmux source ~/.tmux.conf\n```\n\nThat's it!\n\n### Installing plugins\n\n1. Add new plugin to `~/.tmux.conf` with `set -g @plugin '...'`\n2. Press `prefix` + <kbd>I</kbd> (capital i, as in **I**nstall) to fetch the plugin.\n\nYou're good to go! The plugin was cloned to `~/.tmux/plugins/` dir and sourced.\n\n### Uninstalling plugins\n\n1. Remove (or comment out) plugin from the list.\n2. Press `prefix` + <kbd>alt</kbd> + <kbd>u</kbd> (lowercase u as in **u**ninstall) to remove the plugin.\n\nAll the plugins are installed to `~/.tmux/plugins/` so alternatively you can\nfind plugin directory there and remove it.\n\n### Key bindings\n\n`prefix` + <kbd>I</kbd>\n- Installs new plugins from GitHub or any other git repository\n- Refreshes TMUX environment\n\n`prefix` + <kbd>U</kbd>\n- updates plugin(s)\n\n`prefix` + <kbd>alt</kbd> + <kbd>u</kbd>\n- remove/uninstall plugins not on the plugin list\n\n### Docs\n\n- [Help, tpm not working](docs/tpm_not_working.md) - problem solutions\n\nMore advanced features and instructions, regular users probably do not need\nthis:\n\n- [How to create a plugin](docs/how_to_create_plugin.md). It's easy.\n- [Managing plugins via the command line](docs/managing_plugins_via_cmd_line.md)\n- [Changing plugins install dir](docs/changing_plugins_install_dir.md)\n- [Automatic TPM installation on a new machine](docs/automatic_tpm_installation.md)\n\n### Tests\n\nTests for this project run on [Travis CI](https://travis-ci.org/tmux-plugins/tpm).\n\nWhen run locally, [vagrant](https://www.vagrantup.com/) is required.\nRun tests with:\n\n```bash\n# within project directory\n./run_tests\n```\n\n### License\n\n[MIT](LICENSE.md)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "bindings",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "tpm",
          "type": "blob",
          "size": 2.3818359375,
          "content": "#!/usr/bin/env bash\n\nCURRENT_DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\nBINDINGS_DIR=\"$CURRENT_DIR/bindings\"\nSCRIPTS_DIR=\"$CURRENT_DIR/scripts\"\n\nsource \"$SCRIPTS_DIR/variables.sh\"\n\nget_tmux_option() {\n\tlocal option=\"$1\"\n\tlocal default_value=\"$2\"\n\tlocal option_value=\"$(tmux show-option -gqv \"$option\")\"\n\tif [ -z \"$option_value\" ]; then\n\t\techo \"$default_value\"\n\telse\n\t\techo \"$option_value\"\n\tfi\n}\n\ntpm_path_set() {\n\ttmux show-environment -g \"$DEFAULT_TPM_ENV_VAR_NAME\" >/dev/null 2>&1\n}\n\n# Check if configuration file exists at an XDG-compatible location, if so use\n# that directory for TMUX_PLUGIN_MANAGER_PATH. Otherwise use $DEFAULT_TPM_PATH.\nset_default_tpm_path() {\n\tlocal xdg_tmux_path=\"${XDG_CONFIG_HOME:-$HOME/.config}/tmux\"\n\tlocal tpm_path=\"$DEFAULT_TPM_PATH\"\n\n\tif [ -f \"$xdg_tmux_path/tmux.conf\" ]; then\n\t\ttpm_path=\"$xdg_tmux_path/plugins/\"\n\tfi\n\n\ttmux set-environment -g \"$DEFAULT_TPM_ENV_VAR_NAME\" \"$tpm_path\"\n}\n\n# Ensures TMUX_PLUGIN_MANAGER_PATH global env variable is set.\n#\n# Put this in `.tmux.conf` to override the default:\n# `set-environment -g TMUX_PLUGIN_MANAGER_PATH \"/some/other/path/\"`\nset_tpm_path() {\n\tif ! tpm_path_set; then\n\t\tset_default_tpm_path\n\tfi\n}\n\n# 1. Fetches plugin names from `@plugin` variables\n# 2. Creates full plugin path\n# 3. Sources all *.tmux files from each of the plugin directories\n#\t - no errors raised if directory does not exist\n# Files are sourced as tmux config files, not as shell scripts!\nsource_plugins() {\n\t\"$SCRIPTS_DIR/source_plugins.sh\" >/dev/null 2>&1\n}\n\n# prefix + I - downloads TPM plugins and reloads TMUX environment\n# prefix + U - updates a plugin (or all of them) and reloads TMUX environment\n# prefix + alt + u - remove unused TPM plugins and reloads TMUX environment\nset_tpm_key_bindings() {\n\tlocal install_key=\"$(get_tmux_option \"$install_key_option\" \"$default_install_key\")\"\n\ttmux bind-key \"$install_key\" run-shell \"$BINDINGS_DIR/install_plugins\"\n\n\tlocal update_key=\"$(get_tmux_option \"$update_key_option\" \"$default_update_key\")\"\n\ttmux bind-key \"$update_key\" run-shell \"$BINDINGS_DIR/update_plugins\"\n\n\tlocal clean_key=\"$(get_tmux_option \"$clean_key_option\" \"$default_clean_key\")\"\n\ttmux bind-key \"$clean_key\" run-shell \"$BINDINGS_DIR/clean_plugins\"\n}\n\nsupported_tmux_version_ok() {\n\t\"$SCRIPTS_DIR/check_tmux_version.sh\" \"$SUPPORTED_TMUX_VERSION\"\n}\n\nmain() {\n\tif supported_tmux_version_ok; then\n\t\tset_tpm_path\n\t\tset_tpm_key_bindings\n\t\tsource_plugins\n\tfi\n}\nmain\n"
        }
      ]
    }
  ]
}