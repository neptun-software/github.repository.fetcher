{
  "metadata": {
    "timestamp": 1736568933692,
    "page": 27,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sorin-ionescu/prezto",
      "stars": 14073,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.17578125,
          "content": "[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = 2\ntrim_trailing_whitespace = true\n\n[{.gitattributes,.gitignore,.gitmodules}]\nindent_style = tab\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.04296875,
          "content": "*.zwc\n*.zwc.old\nmodules/*/cache.zsh\ncontrib\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 1.408203125,
          "content": "[submodule \"modules/autosuggestions/external\"]\n\tpath = modules/autosuggestions/external\n\turl = https://github.com/zsh-users/zsh-autosuggestions.git\n[submodule \"modules/history-substring-search/external\"]\n\tpath = modules/history-substring-search/external\n\turl = https://github.com/zsh-users/zsh-history-substring-search.git\n[submodule \"modules/syntax-highlighting/external\"]\n\tpath = modules/syntax-highlighting/external\n\turl = https://github.com/zsh-users/zsh-syntax-highlighting.git\n[submodule \"modules/completion/external\"]\n\tpath = modules/completion/external\n\turl = https://github.com/zsh-users/zsh-completions.git\n[submodule \"modules/prompt/external/powerline\"]\n\tpath = modules/prompt/external/powerline\n\turl = https://github.com/davidjrice/prezto_powerline.git\n[submodule \"modules/prompt/external/agnoster\"]\n\tpath = modules/prompt/external/agnoster\n\turl = https://github.com/agnoster/agnoster-zsh-theme.git\n[submodule \"modules/prompt/external/pure\"]\n\tpath = modules/prompt/external/pure\n\turl = https://github.com/sindresorhus/pure.git\n[submodule \"modules/fasd/external\"]\n\tpath = modules/fasd/external\n\turl = https://github.com/clvv/fasd.git\n[submodule \"modules/prompt/external/async\"]\n\tpath = modules/prompt/external/async\n\turl = https://github.com/mafredri/zsh-async.git\n[submodule \"modules/prompt/external/powerlevel10k\"]\n\tpath = modules/prompt/external/powerlevel10k\n\turl = https://github.com/romkatv/powerlevel10k.git\n\tshallow = true\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 2.5283203125,
          "content": "# Contributing\n\nThis project would not exist without all of its users and [contributors][1].\n\nIf you have ideas on how to make the configuration easier to maintain or\nimprove its performance, do not hesitate to fork and send pull requests.\n\n## Issue Reporting\n\n- Check that the issue has not already been reported.\n- Check that the issue has not already been fixed in the latest code.\n- Open an issue with a clear title and description in grammatically correct,\n  complete sentences.\n\n## Pull Request\n\n- Read [how to properly contribute to open source projects on GitHub][2].\n- Use a topic branch to easily amend a pull request later, if necessary.\n- Write [good commit messages][3].\n- Squash commits on the topic branch before opening a pull request.\n- Use the same coding style and spacing.\n- Open a [pull request][4] that relates to but one subject with a clear title\n  and description in grammatically correct, complete sentences.\n\n### Code Style\n\nThis project follows the [Google Shell Style Guide][5] when possible. However,\nthere are a number of additional things to keep in mind.\n\n- Local variables should be used whenever possible.\n- Prefer `zstyle` over environment variables for configuration.\n- Prefer (( ... )) over [[ ... ]] for arithmetic expression.\n- Use the function keyword to define functions.\n- The 80 character hard limit can be waived for readability.\n\n### Using an Alternative *zprezto* Directory\n\nTo work on Prezto without affecting your current configuration:\n\n```sh\nmkdir devel-zprezto\ncd devel-zprezto\ngit clone --recursive https://github.com/sorin-ionescu/prezto.git .zprezto\nZDOTDIR=$(pwd)\necho \"Your development ZDOTDIR is $ZDOTDIR\"\nsetopt EXTENDED_GLOB\nfor rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n    ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\ndone\n```\n\nThen to start zsh in this development environment you will run:\n\n```console\nZDOTDIR=/path/to/devel-zprezto zsh\n```\n\n### Modules\n\n- A *README.md* must be present.\n- Large functions must be placed in a *functions* directory.\n- Functions that take arguments must have completion.\n\n### Themes\n\n- A screenshots section must be present in the file header.\n- The pull request description must have [embedded screenshots][6].\n\n[1]: https://github.com/sorin-ionescu/prezto/contributors\n[2]: https://gun.io/blog/how-to-github-fork-branch-and-pull-request\n[3]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n[4]: https://help.github.com/articles/using-pull-requests\n[5]: https://google.github.io/styleguide/shell.xml\n[6]: https://github.github.com/gfm/#images\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1064453125,
          "content": "Copyright (c) 2009-2011 Robby Russell and contributors\nCopyright (c) 2011-2017 Sorin Ionescu and contributors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.9580078125,
          "content": "# Prezto â€” Instantly Awesome Zsh\n\nPrezto is the configuration framework for [Zsh][1]; it enriches the command line\ninterface environment with sane defaults, aliases, functions, auto completion,\nand prompt themes.\n\n## Installation\n\n### Manual\n\nPrezto will work with any recent release of Zsh, but the minimum required\nversion is **4.3.11**.\n\n01. Launch Zsh:\n\n    ```console\n    zsh\n    ```\n\n02. Clone the repository:\n\n    ```console\n    git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-$HOME}/.zprezto\"\n    ```\n\n    <details>\n      <summary><em>Optional: Installing in <code>$XDG_CONFIG_HOME</code></em></summary>\n\n      Optionally, if you already have `$XDG_CONFIG_HOME` configured (usually as\n      _`$HOME/.config`_ by default) and intend to install Prezto under\n      _`$XDG_CONFIG_HOME/zsh`_ instead, you can clone the repository there and\n      configure `$ZDOTDIR` separately if not already configured.\n\n      - Clone the repository:\n\n        ```console\n        git clone --recursive https://github.com/sorin-ionescu/prezto.git \"${ZDOTDIR:-${XDG_CONFIG_HOME:-$HOME/.config}/zsh}/.zprezto\"\n        ```\n\n      - Configure `$XDG_CONFIG_HOME` and `$ZDOTDIR` in _`$HOME/.zshenv`_:\n\n        ```sh\n        export XDG_CONFIG_HOME=\"${XDG_CONFIG_HOME:=$HOME/.config}\"\n        [[ -d $XDG_CONFIG_HOME/zsh ]] && export ZDOTDIR=\"$XDG_CONFIG_HOME/zsh\"\n        source \"$ZDOTDIR/.zshenv\"\n        ```\n\n    </details>\n\n03. Create a new Zsh configuration by copying/linking the Zsh configuration\n    files provided:\n\n    ```console\n    setopt EXTENDED_GLOB\n    for rcfile in \"${ZDOTDIR:-$HOME}\"/.zprezto/runcoms/^README.md(.N); do\n      ln -s \"$rcfile\" \"${ZDOTDIR:-$HOME}/.${rcfile:t}\"\n    done\n    ```\n\n    **Note:** If you already have any of the given configuration files, `ln` in\n    the above operation will cause an error. In simple cases, you can load\n    Prezto by adding the line `source \"${ZDOTDIR:-$HOME}/.zprezto/init.zsh\"` to\n    the bottom of your _`${ZDOTDIR:-$HOME}/.zshrc`_ and keep the rest of your\n    Zsh configuration intact. For more complicated setups, we recommend that you\n    back up your original configs and replace them with the provided Prezto\n    [_`runcoms`_][10].\n\n04. Set Zsh as your default shell:\n\n    ```console\n    chsh -s /bin/zsh\n    ```\n\n05. Open a new Zsh terminal window or tab.\n\n### Troubleshooting\n\nIf you are not able to find certain commands after switching to Prezto, modify\nthe `PATH` variable in _`${ZDOTDIR:-$HOME}/.zprofile`_ then open a new Zsh\nterminal window or tab.\n\n## Updating\n\nRun `zprezto-update` to automatically check if there is an update to Prezto.\nIf there are no file conflicts, Prezto and its submodules will be automatically\nupdated. If there are conflicts you will be instructed to go into the\n`$ZPREZTODIR` directory and resolve them yourself.\n\nTo pull the latest changes and update submodules manually:\n\n```console\ncd $ZPREZTODIR\ngit pull\ngit submodule sync --recursive\ngit submodule update --init --recursive\n```\n\n## Usage\n\nPrezto has many features disabled by default. Read the source code and the\naccompanying README files to learn about what is available.\n\n### Modules\n\n01. Browse [_`modules`_][9] to see what is available.\n02. Load the modules you need in _`${ZDOTDIR:-$HOME}/.zpreztorc`_ and then open\n    a new Zsh terminal window or tab.\n\n### Themes\n\n01. For a list of themes, type `prompt -l`.\n02. To preview a theme, type `prompt -p name`.\n03. Load the theme you like in _`${ZDOTDIR:-$HOME}/.zpreztorc`_ and then\n    open a new Zsh terminal window or tab.\n\n    ![sorin theme][2]\n    Note that the [_`git`_][11] module may be required for special symbols to\n    appear, such as those on the right of the above image. Add `'git'` to the\n    `pmodule` list (under `zstyle ':prezto:load' pmodule \\` in your\n    _`${ZDOTDIR:-$HOME}/.zpreztorc`_) to enable this module.\n\n### External Modules\n\n01. By default modules will be loaded from [_`/modules`_][9] and _`/contrib`_.\n02. Additional module directories can be added to the\n    `:prezto:load:pmodule-dirs` setting in _`${ZDOTDIR:-$HOME}/.zpreztorc`_.\n\n    Note that module names need to be unique or they will cause an error when\n    loading.\n\n    ```sh\n    zstyle ':prezto:load' pmodule-dirs $HOME/.zprezto-contrib\n    ```\n\n## Customization\n\nThe project is managed via [Git][3]. We highly recommend that you fork this\nproject so that you can commit your changes and push them to your fork on\n[GitHub][4] to preserve them. If you do not know how to use Git, follow this\n[tutorial][5] and bookmark this [reference][6].\n\n## Resources\n\nThe [Zsh Reference Card][7] and the [zsh-lovers][8] man page are indispensable.\n\n## License\n\nThis project is licensed under the MIT License.\n\n[1]: https://www.zsh.org\n[2]: https://i.imgur.com/nrGV6pg.png \"sorin theme\"\n[3]: https://git-scm.com\n[4]: https://github.com\n[5]: https://gitimmersion.com\n[6]: https://git.github.io/git-reference/\n[7]: http://www.bash2zsh.com/zsh_refcard/refcard.pdf\n[8]: https://grml.org/zsh/zsh-lovers.html\n[9]: modules#readme\n[10]: runcoms#readme\n[11]: modules/git#readme\n"
        },
        {
          "name": "init.zsh",
          "type": "blob",
          "size": 5.806640625,
          "content": "#\n# Initializes Prezto.\n#\n# Authors:\n#   Sorin Ionescu <sorin.ionescu@gmail.com>\n#\n\n#\n# Version Check\n#\n\n# Check for the minimum supported version.\nmin_zsh_version='4.3.11'\nif ! autoload -Uz is-at-least || ! is-at-least \"$min_zsh_version\"; then\n  printf \"prezto: old shell detected, minimum required: %s\\n\" \"$min_zsh_version\" >&2\n  return 1\nfi\nunset min_zsh_version\n\n# zprezto convenience updater\n# The function is surrounded by ( ) instead of { } so it starts in a subshell\n# and won't affect the environment of the calling shell\nfunction zprezto-update {\n  (\n    function cannot-fast-forward {\n      local STATUS=\"$1\"\n      [[ -n \"${STATUS}\" ]] && printf \"%s\\n\" \"${STATUS}\"\n      printf \"Unable to fast-forward the changes. You can fix this by \"\n      printf \"running\\ncd '%s' and then\\n'git pull' \" \"${ZPREZTODIR}\"\n      printf \"to manually pull and possibly merge in changes\\n\"\n    }\n    cd -q -- \"${ZPREZTODIR}\" || return 7\n    local orig_branch=\"$(git symbolic-ref HEAD 2> /dev/null | cut -d '/' -f 3)\"\n    if [[ \"$orig_branch\" == \"master\" ]]; then\n      git fetch || return \"$?\"\n      local UPSTREAM=$(git rev-parse '@{u}')\n      local LOCAL=$(git rev-parse HEAD)\n      local REMOTE=$(git rev-parse \"$UPSTREAM\")\n      local BASE=$(git merge-base HEAD \"$UPSTREAM\")\n      if [[ $LOCAL == $REMOTE ]]; then\n        printf \"There are no updates.\\n\"\n        return 0\n      elif [[ $LOCAL == $BASE ]]; then\n        printf \"There is an update available. Trying to pull.\\n\\n\"\n        if git pull --ff-only; then\n          printf \"Syncing submodules\\n\"\n          git submodule sync --recursive\n          git submodule update --init --recursive\n          return $?\n        else\n          cannot-fast-forward\n          return 1\n        fi\n      elif [[ $REMOTE == $BASE ]]; then\n        cannot-fast-forward \"Commits in master that aren't in upstream.\"\n        return 1\n      else\n        cannot-fast-forward \"Upstream and local have diverged.\"\n        return 1\n      fi\n    else\n      printf \"zprezto install at '%s' is not on the master branch \" \"${ZPREZTODIR}\"\n      printf \"(you're on '%s')\\nUnable to automatically update.\\n\" \"${orig_branch}\"\n      return 1\n    fi\n    return 1\n  )\n}\n#\n# Module Loader\n#\n\n# Loads Prezto modules.\nfunction pmodload {\n  local -a pmodules\n  local -a pmodule_dirs\n  local -a locations\n  local pmodule\n  local pmodule_location\n  local pfunction_glob='^([_.]*|prompt_*_setup|README*|*~)(-.N:t)'\n\n  # Load in any additional directories and warn if they don't exist\n  zstyle -a ':prezto:load' pmodule-dirs 'user_pmodule_dirs'\n  for user_dir in \"$user_pmodule_dirs[@]\"; do\n    if [[ ! -d \"$user_dir\" ]]; then\n      echo \"$0: Missing user module dir: $user_dir\"\n    fi\n  done\n\n  pmodule_dirs=(\"$ZPREZTODIR/modules\" \"$ZPREZTODIR/contrib\" \"$user_pmodule_dirs[@]\")\n\n  # $argv is overridden in the anonymous function.\n  pmodules=(\"$argv[@]\")\n\n  # Load Prezto modules.\n  for pmodule in \"$pmodules[@]\"; do\n    if zstyle -t \":prezto:module:$pmodule\" loaded 'yes' 'no'; then\n      continue\n    else\n      locations=(${pmodule_dirs:+${^pmodule_dirs}/$pmodule(-/FN)})\n      if (( ${#locations} > 1 )); then\n        if ! zstyle -t ':prezto:load' pmodule-allow-overrides 'yes'; then\n          print \"$0: conflicting module locations: $locations\"\n          continue\n        fi\n      elif (( ${#locations} < 1 )); then\n        print \"$0: no such module: $pmodule\"\n        continue\n      fi\n\n      # Grab the full path to this module\n      pmodule_location=${locations[-1]}\n\n      # Add functions to $fpath.\n      fpath=(${pmodule_location}/functions(-/FN) $fpath)\n\n      function {\n        local pfunction\n\n        # Extended globbing is needed for listing autoloadable function directories.\n        setopt LOCAL_OPTIONS EXTENDED_GLOB\n\n        # Load Prezto functions.\n        for pfunction in ${pmodule_location}/functions/$~pfunction_glob; do\n          autoload -Uz \"$pfunction\"\n        done\n      }\n\n      if [[ -s \"${pmodule_location}/init.zsh\" ]]; then\n        source \"${pmodule_location}/init.zsh\"\n      elif [[ -s \"${pmodule_location}/${pmodule}.plugin.zsh\" ]]; then\n        source \"${pmodule_location}/${pmodule}.plugin.zsh\"\n      fi\n\n      if (( $? == 0 )); then\n        zstyle \":prezto:module:$pmodule\" loaded 'yes'\n      else\n        # Remove the $fpath entry.\n        fpath[(r)${pmodule_location}/functions]=()\n\n        function {\n          local pfunction\n\n          # Extended globbing is needed for listing autoloadable function\n          # directories.\n          setopt LOCAL_OPTIONS EXTENDED_GLOB\n\n          # Unload Prezto functions.\n          for pfunction in ${pmodule_location}/functions/$~pfunction_glob; do\n            unfunction \"$pfunction\"\n          done\n        }\n\n        zstyle \":prezto:module:$pmodule\" loaded 'no'\n      fi\n    fi\n  done\n}\n\n#\n# Prezto Initialization\n#\n\n# This finds the directory prezto is installed to so plugin managers don't need\n# to rely on dirty hacks to force prezto into a directory. Additionally, it\n# needs to be done here because inside the pmodload function ${0:h} evaluates to\n# the current directory of the shell rather than the prezto dir.\nZPREZTODIR=${0:h}\n\n# Source the Prezto configuration file.\nif [[ -s \"${ZDOTDIR:-$HOME}/.zpreztorc\" ]]; then\n  source \"${ZDOTDIR:-$HOME}/.zpreztorc\"\nfi\n\n# Disable color and theme in dumb terminals.\nif [[ $TERM == dumb ]]; then\n  zstyle ':prezto:*:*' color 'no'\n  zstyle ':prezto:module:prompt' theme 'off'\nfi\n\n# Load Zsh modules.\nzstyle -a ':prezto:load' zmodule 'zmodules'\nfor zmodule (\"$zmodules[@]\") zmodload \"zsh/${(z)zmodule}\"\nunset zmodule{s,}\n\n# Load more specific 'run-help' function from $fpath.\n(( $+aliases[run-help] )) && unalias run-help && autoload -Uz run-help\n\n# Autoload Zsh functions.\nzstyle -a ':prezto:load' zfunction 'zfunctions'\nfor zfunction (\"$zfunctions[@]\") autoload -Uz \"$zfunction\"\nunset zfunction{s,}\n\n# Load Prezto modules.\nzstyle -a ':prezto:load' pmodule 'pmodules'\npmodload \"$pmodules[@]\"\nunset pmodules\n"
        },
        {
          "name": "modules",
          "type": "tree",
          "content": null
        },
        {
          "name": "runcoms",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}