{
  "metadata": {
    "timestamp": 1736568932092,
    "page": 25,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Bash-it/bash-it",
      "stars": 14350,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".ackrc",
          "type": "blob",
          "size": 0.021484375,
          "content": "--ignore-dir=enabled/\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.689453125,
          "content": "# EditorConfig is awesome: http://EditorConfig.org\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\n\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[**.{md,rst}]\ntrim_trailing_whitespace = false\n\n[.git*]\nindent_size = tab\nindent_style = tab\n\n[{**.*sh,test/run,**.bats}]\nindent_size = tab\nindent_style = tab\n\nshell_variant      = bash\nbinary_next_line   = true  # like -bn\nswitch_case_indent = true  # like -ci\nspace_redirects    = true  # like -sr\nkeep_padding       = false # like -kp\nend_of_line        = lf\ncharset            = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[**.bats]\nindent_size = tab\nindent_style = tab\nshell_variant\t= bats\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.18359375,
          "content": "*.sh text eol=lf\n*.bash text eol=lf\n*.bats text eol=lf\n\n# Docs allow trailing whitespaces\n*.md whitespace=-blank-at-eol\n*.rst whitespace=-blank-at-eol\n\n# Windows files\n*.bat text eol=crlf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.349609375,
          "content": ".atom-build.json\n*/enabled/*\n.DS_Store\ncustom/*\n!custom/example.bash\n.rvmrc\naliases/custom.aliases.bash\ncompletion/custom.completion.bash\nlib/custom.bash\nplugins/custom.plugins.bash\n*.swp\n.*.un~\nbats\n.idea\n*.sublime-workspace\n*.sublime-project\nenabled/*\n/enabled\ntmp/\n\n# Do not save profiles\nprofiles/*\n# apart from the default one\n!profiles/default.bash_it\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5146484375,
          "content": "[submodule \"test_lib/bats-core\"]\n\tpath = test_lib/bats-core\n\turl = https://github.com/bats-core/bats-core\n\tbranch = tags/v1.2.0\n[submodule \"test_lib/bats-support\"]\n\tpath = test_lib/bats-support\n\turl = https://github.com/bats-core/bats-support\n\tbranch = tags/v0.3.0\n[submodule \"test_lib/bats-assert\"]\n\tpath = test_lib/bats-assert\n\turl = https://github.com/bats-core/bats-assert\n\tbranch = tags/v2.0.0\n[submodule \"test_lib/bats-file\"]\n\tpath = test_lib/bats-file\n\turl = https://github.com/bats-core/bats-file\n\tbranch = tags/v0.3.0\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 1.3740234375,
          "content": "# See https://pre-commit.com for more information\n# See https://pre-commit.com/hooks.html for more hooks\n---\n# fail_fast: true\nminimum_pre_commit_version: 1.18.1\nexclude: \"docs/_build/\"\nrepos:\n  - repo: https://github.com/pre-commit/pre-commit-hooks\n    rev: v2.3.0\n    hooks:\n      - id: trailing-whitespace\n        exclude: \".(md|rst)$\"\n      - id: end-of-file-fixer\n      - id: check-merge-conflict\n      - id: mixed-line-ending\n      - id: check-added-large-files\n  - repo: https://github.com/jumanjihouse/pre-commit-hooks\n    rev: 2.1.5\n    hooks:\n      - id: git-check  # Configure in .gitattributes\n      - id: shellcheck\n      - id: shfmt\n  - repo: https://github.com/Lucas-C/pre-commit-hooks\n    rev: v1.1.7\n    hooks:\n      # - id: forbid-crlf\n      - id: remove-crlf\n        exclude: \".bat$\"\n  - repo: local\n    hooks:\n      - id: dot-sh\n        name: Check .sh files against bash-it requirements\n        entry: ./hooks/dot-sh.sh\n        language: system\n        files: \"\\\\.sh$\"\n        types: [file]\n      - id: dot-bash\n        name: Check .bash files against bash-it requirements\n        entry: ./hooks/dot-bash.sh\n        language: system\n        files: \"\\\\.ba[ts][sh]$\"\n        types: [file]\n      - id: clean-files-txt\n        name: Check that clean_files.txt is sorted alphabetically.\n        entry: ./hooks/check-clean-files-txt.sh\n        language: system\n        files: clean_files.txt\n"
        },
        {
          "name": ".readthedocs.yml",
          "type": "blob",
          "size": 0.142578125,
          "content": "version: 2\n\nsphinx:\n  builder: htmldir\n  configuration: docs/conf.py\n\npython:\n  version: 3.7\n  install:\n    - requirements: docs/requirements.txt\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2020-2021 Bash-it\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "aliases",
          "type": "tree",
          "content": null
        },
        {
          "name": "bash_it.sh",
          "type": "blob",
          "size": 3.9755859375,
          "content": "#!/usr/bin/env bash\n# shellcheck source-path=SCRIPTDIR/lib source-path=SCRIPTDIR/scripts\n# shellcheck disable=SC2034\n#\n# Initialize Bash It\nBASH_IT_LOG_PREFIX=\"core: main: \"\n: \"${BASH_IT:=${BASH_SOURCE%/*}}\"\n: \"${BASH_IT_CUSTOM:=${BASH_IT}/custom}\"\n: \"${CUSTOM_THEME_DIR:=\"${BASH_IT_CUSTOM}/themes\"}\"\n: \"${BASH_IT_BASHRC:=${BASH_SOURCE[${#BASH_SOURCE[@]} - 1]}}\"\n\n# Load composure first, so we support function metadata\n# shellcheck source-path=SCRIPTDIR/vendor/github.com/erichs/composure\nsource \"${BASH_IT}/vendor/github.com/erichs/composure/composure.sh\"\n# support 'plumbing' metadata\ncite _about _param _example _group _author _version\ncite about-alias about-plugin about-completion\n\n# Declare our end-of-main finishing hook, but don't use `declare`/`typeset`\n_bash_it_library_finalize_hook=()\n\n# We need to load logging module early in order to be able to log\nsource \"${BASH_IT}/lib/log.bash\"\n\n# libraries, but skip appearance (themes) for now\n_log_debug \"Loading libraries(except appearance)...\"\nAPPEARANCE_LIB=\"${BASH_IT}/lib/appearance.bash\"\nfor _bash_it_main_file_lib in \"${BASH_IT}/lib\"/*.bash; do\n\t[[ \"$_bash_it_main_file_lib\" == \"$APPEARANCE_LIB\" ]] && continue\n\t_bash-it-log-prefix-by-path \"${_bash_it_main_file_lib}\"\n\t_log_debug \"Loading library file...\"\n\t# shellcheck disable=SC1090\n\tsource \"$_bash_it_main_file_lib\"\n\tBASH_IT_LOG_PREFIX=\"core: main: \"\ndone\n\n# Load the global \"enabled\" directory, then enabled aliases, completion, plugins\n# \"_bash_it_main_file_type\" param is empty so that files get sourced in glob order\nfor _bash_it_main_file_type in \"\" \"aliases\" \"plugins\" \"completion\"; do\n\tBASH_IT_LOG_PREFIX=\"core: reloader: \"\n\t# shellcheck disable=SC2140\n\tsource \"${BASH_IT}/scripts/reloader.bash\" ${_bash_it_main_file_type:+\"skip\" \"$_bash_it_main_file_type\"}\n\tBASH_IT_LOG_PREFIX=\"core: main: \"\ndone\n\n# Load theme, if a theme was set\n# shellcheck source-path=SCRIPTDIR/themes\nif [[ -n \"${BASH_IT_THEME:-}\" ]]; then\n\t_log_debug \"Loading theme '${BASH_IT_THEME}'.\"\n\tBASH_IT_LOG_PREFIX=\"themes: githelpers: \"\n\tsource \"${BASH_IT}/themes/githelpers.theme.bash\"\n\tBASH_IT_LOG_PREFIX=\"themes: p4helpers: \"\n\tsource \"${BASH_IT}/themes/p4helpers.theme.bash\"\n\tBASH_IT_LOG_PREFIX=\"themes: base: \"\n\tsource \"${BASH_IT}/themes/base.theme.bash\"\n\n\tBASH_IT_LOG_PREFIX=\"lib: appearance: \"\n\t# appearance (themes) now, after all dependencies\n\t# shellcheck source=SCRIPTDIR/lib/appearance.bash\n\tsource \"$APPEARANCE_LIB\"\n\tBASH_IT_LOG_PREFIX=\"core: main: \"\nfi\n\n_log_debug \"Loading custom aliases, completion, plugins...\"\nfor _bash_it_main_file_type in \"aliases\" \"completion\" \"plugins\"; do\n\t_bash_it_main_file_custom=\"${BASH_IT}/${_bash_it_main_file_type}/custom.${_bash_it_main_file_type}.bash\"\n\tif [[ -s \"${_bash_it_main_file_custom}\" ]]; then\n\t\t_bash-it-log-prefix-by-path \"${_bash_it_main_file_custom}\"\n\t\t_log_debug \"Loading component...\"\n\t\t# shellcheck disable=SC1090\n\t\tsource \"${_bash_it_main_file_custom}\"\n\tfi\n\tBASH_IT_LOG_PREFIX=\"core: main: \"\ndone\n\n# Custom\n_log_debug \"Loading general custom files...\"\nfor _bash_it_main_file_custom in \"${BASH_IT_CUSTOM}\"/*.bash \"${BASH_IT_CUSTOM}\"/*/*.bash; do\n\tif [[ -s \"${_bash_it_main_file_custom}\" ]]; then\n\t\t_bash-it-log-prefix-by-path \"${_bash_it_main_file_custom}\"\n\t\t_log_debug \"Loading custom file...\"\n\t\t# shellcheck disable=SC1090\n\t\tsource \"$_bash_it_main_file_custom\"\n\tfi\n\tBASH_IT_LOG_PREFIX=\"core: main: \"\ndone\n\nif [[ -n \"${PROMPT:-}\" ]]; then\n\tPS1=\"${PROMPT}\"\nfi\n\n# Adding Support for other OSes\nif _command_exists gloobus-preview; then\n\tPREVIEW=\"gloobus-preview\"\nelif [[ -d /Applications/Preview.app ]]; then\n\tPREVIEW=\"/Applications/Preview.app\"\nelse\n\tPREVIEW=\"less\"\nfi\n\n# BASH_IT_RELOAD_LEGACY is set.\nif [[ -n \"${BASH_IT_RELOAD_LEGACY:-}\" ]] && ! _command_exists reload; then\n\t# shellcheck disable=SC2139\n\talias reload=\"builtin source '${BASH_IT_BASHRC?}'\"\nfi\n\nfor _bash_it_library_finalize_f in \"${_bash_it_library_finalize_hook[@]:-}\"; do\n\teval \"${_bash_it_library_finalize_f?}\" # Use `eval` to achieve the same behavior as `$PROMPT_COMMAND`.\ndone\nunset \"${!_bash_it_library_finalize_@}\" \"${!_bash_it_main_file_@}\"\n"
        },
        {
          "name": "clean_files.txt",
          "type": "blob",
          "size": 5.1123046875,
          "content": "#######################################################################\n# Allow-list of files to be lint-checked by CI\n#\n# Directory Support\n#   Directory references are allowed within the file, ie:\n#\n#       themes/powerline\n#\n#   All files under the referenced directory will be checked\n#\n# Checking Files Locally\n#   You can manually invoke the check via:\n#\n#       lint_clean_files.sh\n#\n\n# root directories\n#\naliases/\ndocs/\nhooks/\nlib/\nscripts/\ntest/\n\n# root files\n#\n.gitattributes\nbash_it.sh\nclean_files.txt\ninstall.sh\nlint_clean_files.sh\n\n# completions\n#\ncompletion/available/aliases.completion.bash\ncompletion/available/apm.completion.bash\ncompletion/available/awless.completion.bash\ncompletion/available/awscli.completion.bash\ncompletion/available/bash-it.completion.bash\ncompletion/available/brew.completion.bash\ncompletion/available/bundler.completion.bash\ncompletion/available/cargo.completion.bash\ncompletion/available/composer.completion.bash\ncompletion/available/conda.completion.bash\ncompletion/available/consul.completion.bash\ncompletion/available/dart.completion.bash\ncompletion/available/django.completion.bash\ncompletion/available/dmidecode.completion.bash\ncompletion/available/docker-machine.completion.bash\ncompletion/available/docker.completion.bash\ncompletion/available/dotnet.completion.bash\ncompletion/available/export.completion.bash\ncompletion/available/flutter.completion.bash\ncompletion/available/gcloud.completion.bash\ncompletion/available/gem.completion.bash\ncompletion/available/git.completion.bash\ncompletion/available/github-cli.completion.bash\ncompletion/available/go.completion.bash\ncompletion/available/helm.completion.bash\ncompletion/available/jboss5.completion.bash\ncompletion/available/jboss7.completion.bash\ncompletion/available/jungle.completion.bash\ncompletion/available/knife.completion.bash\ncompletion/available/kontena.completion.bash\ncompletion/available/kubectl.completion.bash\ncompletion/available/laravel.completion.bash\ncompletion/available/lerna.completion.bash\ncompletion/available/minikube.completion.bash\ncompletion/available/ngrok.completion.bash\ncompletion/available/notify-send.completion.bash\ncompletion/available/npm.completion.bash\ncompletion/available/packer.completion.bash\ncompletion/available/pip.completion.bash\ncompletion/available/pip3.completion.bash\ncompletion/available/pipenv.completion.bash\ncompletion/available/pipx.completion.bash\ncompletion/available/rustup.completion.bash\ncompletion/available/salt.completion.bash\ncompletion/available/sdkman.completion.bash\ncompletion/available/system.completion.bash\ncompletion/available/vault.completion.bash\ncompletion/available/vuejs.completion.bash\ncompletion/available/wpscan.completion.bash\ncompletion/available/yarn.completion.bash\n\n# plugins\n#\nplugins/available/alias-completion.plugin.bash\nplugins/available/autojump.plugin.bash\nplugins/available/base.plugin.bash\nplugins/available/basher.plugin.bash\nplugins/available/battery.plugin.bash\nplugins/available/blesh.plugin.bash\nplugins/available/browser.plugin.bash\nplugins/available/cmd-returned-notify.plugin.bash\nplugins/available/colors.plugin.bash\nplugins/available/direnv.plugin.bash\nplugins/available/dirs.plugin.bash\nplugins/available/docker-compose.plugin.bash\nplugins/available/docker-machine.plugin.bash\nplugins/available/gif.plugin.bash\nplugins/available/git-subrepo.plugin.bash\nplugins/available/git.plugin.bash\nplugins/available/go.plugin.bash\nplugins/available/goenv.plugin.bash\nplugins/available/gradle.plugin.bash\nplugins/available/history-eternal.plugin.bash\nplugins/available/history-search.plugin.bash\nplugins/available/history-substring-search.plugin.bash\nplugins/available/history.plugin.bash\nplugins/available/hub.plugin.bash\nplugins/available/java.plugin.bash\nplugins/available/jekyll.plugin.bash\nplugins/available/jgitflow.plugin.bash\nplugins/available/jump.plugin.bash\nplugins/available/latex.plugin.bash\nplugins/available/less-pretty-cat.plugin.bash\nplugins/available/man.plugin.bash\nplugins/available/nginx.plugin.bash\nplugins/available/node.plugin.bash\nplugins/available/nodenv.plugin.bash\nplugins/available/osx-timemachine.plugin.bash\nplugins/available/osx.plugin.bash\nplugins/available/percol.plugin.bash\nplugins/available/plenv.plugin.bash\nplugins/available/projects.plugin.bash\nplugins/available/proxy.plugin.bash\nplugins/available/pyenv.plugin.bash\nplugins/available/python.plugin.bash\nplugins/available/rbenv.plugin.bash\nplugins/available/ruby.plugin.bash\nplugins/available/textmate.plugin.bash\nplugins/available/todo.plugin.bash\nplugins/available/url.plugin.bash\nplugins/available/xterm.plugin.bash\nplugins/available/zoxide.plugin.bash\n\n# tests\n#\ntest/completion/aliases.completion.bats\ntest/run\ntest/test_helper.bash\n\n# themes\n#\nthemes/90210\nthemes/agnoster\nthemes/atomic\nthemes/axin\nthemes/bakke\nthemes/barbuk\nthemes/base.theme.bash\nthemes/binaryanomaly\nthemes/bira\nthemes/bobby\nthemes/bobby-python\nthemes/brainy\nthemes/brunton\nthemes/candy\nthemes/clean\nthemes/easy\nthemes/elixr\nthemes/essential\nthemes/githelpers.theme.bash\nthemes/inretio\nthemes/lambda\nthemes/modern\nthemes/norbu\nthemes/oh-my-posh\nthemes/p4helpers.theme.bash\nthemes/pete\nthemes/powerline\nthemes/pure\nthemes/purity\n\n\n# vendor init files\n#\nvendor/.gitattributes\n"
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 6.5390625,
          "content": "#!/usr/bin/env bash\n# bash-it installer\n\n# Show how to use this installer\nfunction _bash-it_show_usage() {\n\techo -e \"\\n$0 : Install bash-it\"\n\techo -e \"Usage:\\n$0 [arguments] \\n\"\n\techo \"Arguments:\"\n\techo \"--help (-h): Display this help message\"\n\techo \"--silent (-s): Install default settings without prompting for input\"\n\techo \"--interactive (-i): Interactively choose plugins\"\n\techo \"--no-modify-config (-n): Do not modify existing config file\"\n\techo \"--append-to-config (-a): Keep existing config file and append bash-it templates at the end\"\n\techo \"--overwrite-backup (-f): Overwrite existing backup\"\n}\n\n# enable a thing\nfunction _bash-it_load_one() {\n\tfile_type=$1\n\tfile_to_enable=$2\n\tmkdir -p \"$BASH_IT/${file_type}/enabled\"\n\n\tdest=\"${BASH_IT}/${file_type}/enabled/${file_to_enable}\"\n\tif [ ! -e \"${dest}\" ]; then\n\t\tln -sf \"../available/${file_to_enable}\" \"${dest}\"\n\telse\n\t\techo \"File ${dest} exists, skipping\"\n\tfi\n}\n\n# Interactively enable several things\nfunction _bash-it_load_some() {\n\tfile_type=$1\n\tsingle_type=$(echo \"$file_type\" | sed -e \"s/aliases$/alias/g\" | sed -e \"s/plugins$/plugin/g\")\n\tenable_func=\"_enable-$single_type\"\n\t[ -d \"$BASH_IT/$file_type/enabled\" ] || mkdir \"$BASH_IT/$file_type/enabled\"\n\tfor path in \"$BASH_IT/${file_type}/available/\"[^_]*; do\n\t\tfile_name=$(basename \"$path\")\n\t\twhile true; do\n\t\t\tjust_the_name=\"${file_name%%.*}\"\n\t\t\tread -r -e -n 1 -p \"Would you like to enable the $just_the_name $file_type? [y/N] \" RESP\n\t\t\tcase $RESP in\n\t\t\t\t[yY])\n\t\t\t\t\t$enable_func \"$just_the_name\"\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t[nN] | \"\")\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\techo -e \"\\033[91mPlease choose y or n.\\033[m\"\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\tdone\n}\n\n# Back up existing profile\nfunction _bash-it_backup() {\n\ttest -w \"$HOME/$CONFIG_FILE\" \\\n\t\t&& cp -aL \"$HOME/$CONFIG_FILE\" \"$HOME/$CONFIG_FILE.bak\" \\\n\t\t&& echo -e \"\\033[0;32mYour original $CONFIG_FILE has been backed up to $CONFIG_FILE.bak\\033[0m\"\n}\n\n# Back up existing profile and create new one for bash-it\nfunction _bash-it_backup_new() {\n\t_bash-it_backup\n\tsed \"s|{{BASH_IT}}|$BASH_IT|\" \"$BASH_IT/template/bash_profile.template.bash\" > \"$HOME/$CONFIG_FILE\"\n\techo -e \"\\033[0;32mCopied the template $CONFIG_FILE into ~/$CONFIG_FILE, edit this file to customize bash-it\\033[0m\"\n}\n\n# Back up existing profile and append bash-it templates at the end\nfunction _bash-it_backup_append() {\n\t_bash-it_backup\n\t(sed \"s|{{BASH_IT}}|$BASH_IT|\" \"$BASH_IT/template/bash_profile.template.bash\" | tail -n +2) >> \"$HOME/$CONFIG_FILE\"\n\techo -e \"\\033[0;32mBash-it template has been added to your $CONFIG_FILE\\033[0m\"\n}\n\nfunction _bash-it_check_for_backup() {\n\tif ! [[ -e \"$HOME/$BACKUP_FILE\" ]]; then\n\t\treturn\n\tfi\n\techo -e \"\\033[0;33mBackup file already exists. Make sure to backup your .bashrc before running this installation.\\033[0m\" >&2\n\n\tif [[ -z \"${overwrite_backup}\" ]]; then\n\t\twhile [[ -z \"${silent}\" ]]; do\n\t\t\tread -e -n 1 -r -p \"Would you like to overwrite the existing backup? This will delete your existing backup file ($HOME/$BACKUP_FILE) [y/N] \" RESP\n\t\t\tcase $RESP in\n\t\t\t\t[yY])\n\t\t\t\t\toverwrite_backup=true\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t[nN] | \"\")\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\techo -e \"\\033[91mPlease choose y or n.\\033[m\"\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\tfi\n\tif [[ -z \"${overwrite_backup}\" ]]; then\n\t\techo -e \"\\033[91mInstallation aborted. Please come back soon!\\033[m\"\n\t\tif [[ -n \"${silent}\" ]]; then\n\t\t\techo -e \"\\033[91mUse \\\"-f\\\" flag to force overwrite of backup.\\033[m\"\n\t\tfi\n\t\texit 1\n\telse\n\t\techo -e \"\\033[0;32mOverwriting backup...\\033[m\"\n\tfi\n}\n\nfunction _bash-it_modify_config_files() {\n\t_bash-it_check_for_backup\n\n\tif [[ -z \"${silent}\" ]]; then\n\t\twhile [[ -z \"${append_to_config}\" ]]; do\n\t\t\tread -e -n 1 -r -p \"Would you like to keep your $CONFIG_FILE and append bash-it templates at the end? [y/N] \" choice\n\t\t\tcase $choice in\n\t\t\t\t[yY])\n\t\t\t\t\tappend_to_config=true\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t[nN] | \"\")\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\t*)\n\t\t\t\t\techo -e \"\\033[91mPlease choose y or n.\\033[m\"\n\t\t\t\t\t;;\n\t\t\tesac\n\t\tdone\n\tfi\n\tif [[ -n \"${append_to_config}\" ]]; then\n\t\t# backup/append\n\t\t_bash-it_backup_append\n\telse\n\t\t# backup/new by default\n\t\t_bash-it_backup_new\n\tfi\n}\n\nfor param in \"$@\"; do\n\tshift\n\tcase \"$param\" in\n\t\t\"--help\") set -- \"$@\" \"-h\" ;;\n\t\t\"--silent\") set -- \"$@\" \"-s\" ;;\n\t\t\"--interactive\") set -- \"$@\" \"-i\" ;;\n\t\t\"--no-modify-config\") set -- \"$@\" \"-n\" ;;\n\t\t\"--append-to-config\") set -- \"$@\" \"-a\" ;;\n\t\t\"--overwrite-backup\") set -- \"$@\" \"-f\" ;;\n\t\t*) set -- \"$@\" \"$param\" ;;\n\tesac\ndone\n\nOPTIND=1\nwhile getopts \"hsinaf\" opt; do\n\tcase \"$opt\" in\n\t\t\"h\")\n\t\t\t_bash-it_show_usage\n\t\t\texit 0\n\t\t\t;;\n\t\t\"s\") silent=true ;;\n\t\t\"i\") interactive=true ;;\n\t\t\"n\") no_modify_config=true ;;\n\t\t\"a\") append_to_config=true ;;\n\t\t\"f\") overwrite_backup=true ;;\n\t\t\"?\")\n\t\t\t_bash-it_show_usage >&2\n\t\t\texit 1\n\t\t\t;;\n\tesac\ndone\n\nshift $((OPTIND - 1))\n\nif [[ -n \"${silent}\" && -n \"${interactive}\" ]]; then\n\techo -e \"\\033[91mOptions --silent and --interactive are mutually exclusive. Please choose one or the other.\\033[m\"\n\texit 1\nfi\n\nif [[ -n \"${no_modify_config}\" && -n \"${append_to_config}\" ]]; then\n\techo -e \"\\033[91mOptions --no-modify-config and --append-to-config are mutually exclusive. Please choose one or the other.\\033[m\"\n\texit 1\nfi\n\nBASH_IT=\"$(cd \"${BASH_SOURCE%/*}\" && pwd)\"\n\ncase $OSTYPE in\n\tdarwin*)\n\t\tCONFIG_FILE=.bash_profile\n\t\t;;\n\t*)\n\t\tCONFIG_FILE=.bashrc\n\t\t;;\nesac\n\nBACKUP_FILE=$CONFIG_FILE.bak\necho \"Installing bash-it\"\nif [[ -z \"${no_modify_config}\" ]]; then\n\t_bash-it_modify_config_files\nfi\n\n# Disable auto-reload in case its enabled\nexport BASH_IT_AUTOMATIC_RELOAD_AFTER_CONFIG_CHANGE=''\n# Load dependencies for enabling components\n# shellcheck disable=SC1090\nsource \"${BASH_IT}\"/vendor/github.com/erichs/composure/composure.sh\n# shellcheck source=./lib/utilities.bash\nsource \"$BASH_IT/lib/utilities.bash\"\n# shellcheck source=./lib/log.bash\nsource \"${BASH_IT}/lib/log.bash\"\ncite _about _param _example _group _author _version\n# shellcheck source=./lib/helpers.bash\nsource \"$BASH_IT/lib/helpers.bash\"\n\nif [[ -n $interactive && -z \"${silent}\" ]]; then\n\tfor type in \"aliases\" \"plugins\" \"completion\"; do\n\t\techo -e \"\\033[0;32mEnabling ${type}\\033[0m\"\n\t\t_bash-it_load_some \"$type\"\n\tdone\nelse\n\techo \"\"\n\t_bash-it-profile-load \"default\"\nfi\n\necho \"\"\necho -e \"\\033[0;32mInstallation finished successfully! Enjoy bash-it!\\033[0m\"\n# shellcheck disable=SC2086\necho -e \"\\033[0;32mTo start using it, open a new tab or 'source \"~/$CONFIG_FILE\"'.\\033[0m\"\necho \"\"\necho \"To show the available aliases/completions/plugins, type one of the following:\"\necho \"  bash-it show aliases\"\necho \"  bash-it show completions\"\necho \"  bash-it show plugins\"\necho \"\"\necho \"To avoid issues and to keep your shell lean, please enable only features you really want to use.\"\necho \"Enabling everything can lead to issues.\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "lint_clean_files.sh",
          "type": "blob",
          "size": 0.6826171875,
          "content": "#!/usr/bin/env bash\n\n# Pull list of checkable files from clean_files.txt\n#  - Folder references are allowed\n#  - Empty lines are ignored\n#  - Comment lines (#) are ignored\n#\n# shellcheck disable=SC2002  # Prefer 'cat' for cleaner script\nmapfile -t FILES < <(\n\tcat clean_files.txt \\\n\t\t| grep -E -v '^\\s*$' \\\n\t\t| grep -E -v '^\\s*#' \\\n\t\t| xargs -I{} find \"{}\" -type f\n)\n\n# We clear the BASH_IT variable to help the shellcheck checker\n# identify source includes within our scripts that require a\n# 'source' directive.  For more information, see:\n#\n#    \"Shellcheck SC1090 - Can't follow non-constant source\"\n#     https://www.shellcheck.net/wiki/SC1090\n#\nBASH_IT='' pre-commit run --files \"${FILES[@]}\"\n"
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "profiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "template",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "test_lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "themes",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 0.9365234375,
          "content": "#!/usr/bin/env bash\nif [ -z \"$BASH_IT\" ];\nthen\n  BASH_IT=\"$HOME/.bash_it\"\nfi\n\ncase $OSTYPE in\n  darwin*)\n    CONFIG_FILE=.bash_profile\n    ;;\n  *)\n    CONFIG_FILE=.bashrc\n    ;;\nesac\n\nBACKUP_FILE=$CONFIG_FILE.bak\n\nif [ ! -e \"$HOME/$BACKUP_FILE\" ]; then\n  echo -e \"\\033[0;33mBackup file $HOME/$BACKUP_FILE not found.\\033[0m\" >&2\n\n  test -w \"$HOME/$CONFIG_FILE\" &&\n    mv \"$HOME/$CONFIG_FILE\" \"$HOME/$CONFIG_FILE.uninstall\" &&\n    echo -e \"\\033[0;32mMoved your $HOME/$CONFIG_FILE to $HOME/$CONFIG_FILE.uninstall.\\033[0m\"\nelse\n  test -w \"$HOME/$BACKUP_FILE\" &&\n    cp -a \"$HOME/$BACKUP_FILE\" \"$HOME/$CONFIG_FILE\" &&\n    rm \"$HOME/$BACKUP_FILE\" &&\n    echo -e \"\\033[0;32mYour original $CONFIG_FILE has been restored.\\033[0m\"\nfi\n\necho \"\"\necho -e \"\\033[0;32mUninstallation finished successfully! Sorry to see you go!\\033[0m\"\necho \"\"\necho \"Final steps to complete the uninstallation:\"\necho \"  -> Remove the $BASH_IT folder\"\necho \"  -> Open a new shell/tab/terminal\"\n"
        },
        {
          "name": "vendor",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}