{
  "metadata": {
    "timestamp": 1736568928068,
    "page": 19,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "redox-os/redox",
      "stars": 15251,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.306640625,
          "content": "/build/\n/prefix/\n.config\n**/my_*\n# Local settings folder for Jetbrains products (RustRover, IntelliJ, CLion)\n.idea/\n# Local settings folder for Visual Studio Professional\n.vs/\n# Local settings folder for vscode\n.vscode/\n# Local settings folder for the devcontainer extension that most IDEs support.\n.devcontainer/\n"
        },
        {
          "name": ".gitlab-ci.yml",
          "type": "blob",
          "size": 1.28515625,
          "content": "# The GitLab Continuous Integration configuration\nimage: \"ubuntu:22.04\"\n\nvariables:\n  GIT_STRATEGY: \"clone\"\n  GIT_SUBMODULE_STRATEGY: \"recursive\"\n\nbefore_script:\n # Disable the wget progress bar\n - echo 'show-progress = off' >> ~/.wgetrc\n - |\n    export DEBIAN_FRONTEND=noninteractive\n    apt-get update -qq &&\n    apt-get install -qq \\\n        bison \\\n        build-essential \\\n        curl \\\n        flex \\\n        fuse3 \\\n        git \\\n        libfuse-dev \\\n        nasm \\\n        pkg-config \\\n        texinfo \\\n        wget \\\n        help2man \\\n        autoconf \\\n        automake \\\n        zstd &&\n    curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain none\n\nimg:\n    script:\n     - |\n        source \"$HOME/.cargo/env\" &&\n        curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash &&\n        cargo binstall --no-confirm --version 0.1.1 cargo-config &&\n        cargo binstall --no-confirm --version 1.16.0 just &&\n        cargo binstall --no-confirm --version 0.27.0 cbindgen &&\n        cargo build --manifest-path installer/Cargo.toml --release &&\n        PODMAN_BUILD=0 REPO_BINARY=1 make ci-img IMG_TAG=$CI_COMMIT_REF_NAME\n    artifacts:\n        paths:\n         - build/img/\n        expire_in: 1 week\n"
        },
        {
          "name": ".gitlab",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.5634765625,
          "content": "[submodule \"cookbook\"]\n\tpath = cookbook\n\turl = https://gitlab.redox-os.org/redox-os/cookbook.git\n\tbranch = master\n[submodule \"installer\"]\n\tpath = installer\n\turl = https://gitlab.redox-os.org/redox-os/installer.git\n\tbranch = master\n[submodule \"rust\"]\n\tpath = rust\n\turl = https://gitlab.redox-os.org/redox-os/rust.git\n\tbranch = redox-2024-05-11\n\tupdate = none\n[submodule \"redoxfs\"]\n\tpath = redoxfs\n\turl = https://gitlab.redox-os.org/redox-os/redoxfs.git\n\tbranch = master\n[submodule \"relibc\"]\n\tpath = relibc\n\turl = https://gitlab.redox-os.org/redox-os/relibc.git\n\tbranch = master\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 10.55078125,
          "content": "# Contributing to Redox\n\n**Thank you for your interest in contributing to Redox!**\n\nThis document will outline the basics of where to start if you wish to contribute to the project. There are many ways to help us out and and we appreciate all of them. We look forward to **your contribution!**\n\n**Please read this document until the end**\n\n## Code Of Conduct\n\nWe follow the [Rust Code Of Conduct](https://www.rust-lang.org/policies/code-of-conduct).\n\n## License\n\nIn general, your contributions to Redox are governed by the [MIT License](https://en.wikipedia.org/wiki/MIT_License). Each project repository has a `LICENSE` file that provides the license terms for that project.\n\nPlease review the `LICENSE` file for the project you are contributing to.\n\n[This](https://doc.redox-os.org/book/philosophy.html) page we explain why we use the MIT license.\n\n## Chat\n\nJoin us on [Matrix Chat](https://doc.redox-os.org/book/chat.html) to discuss issues or ask questions.\n\n## Important Places to Contribute\n\nBefore starting to contribute, we recommend reading the [Website FAQ](https://www.redox-os.org/faq/) and the [Redox Book](https://doc.redox-os.org/book/).\n\nYou can contribute to the Redox documentation and code on the following repositories (non-exhaustive, easiest first):\n\n- [Website](https://gitlab.redox-os.org/redox-os/website)\n- [Book](https://gitlab.redox-os.org/redox-os/book) - High-level documentation\n- [Build System Configuration](https://gitlab.redox-os.org/redox-os/redox) - Our main repository\n- [Cookbook](https://gitlab.redox-os.org/redox-os/cookbook) - Software Ports System\n- [Orbital](https://gitlab.redox-os.org/redox-os/orbital) - Display Server and Window Manager\n- [pkgutils](https://gitlab.redox-os.org/redox-os/pkgutils) - Package Manager\n- [resist](https://gitlab.redox-os.org/redox-os/resist) - Redox System Interface Specifications and Tests (also has POSIX tests)\n- [acid](https://gitlab.redox-os.org/redox-os/acid) - Redox Test Suite\n- [relibc](https://gitlab.redox-os.org/redox-os/relibc) - Redox C Library\n- [libredox](https://gitlab.redox-os.org/redox-os/libredox) - Redox System Library\n- [netstack](https://gitlab.redox-os.org/redox-os/netstack) - Network Stack\n- [Bootloader](https://gitlab.redox-os.org/redox-os/bootloader)\n- [Drivers](https://gitlab.redox-os.org/redox-os/drivers) - Device Drivers\n- [Kernel](https://gitlab.redox-os.org/redox-os/kernel)\n\nTo see all Redox repositories open the [redox-os group](https://gitlab.redox-os.org/redox-os).\n\n### Skill Levels\n\nIf you don't know programming:\n\n- Write documentation\n- Use and test Redox, and file issues for bugs or needed features (please check for duplicates first etc.)\n\nIf you don't know how to code in Rust, but know other programming languages:\n\n- Web development on the website (we don't accept JavaScript code)\n- Write unit tests (may require minimal knowledge of Rust)\n- Port C/C++ programs to Redox (read the `TODO`s of the recipes on the [WIP category](https://gitlab.redox-os.org/redox-os/cookbook/-/tree/master/recipes/wip?ref_type=heads))\n- Port programs to Redox\n\nIf you know how to code in Rust, but don't know operating system development:\n\n- Look for issues labeled \"good first issue\", \"easy\", and/or \"help wanted\", e.g. [this GitLab filter](https://gitlab.redox-os.org/groups/redox-os/-/issues/?sort=updated_desc&state=opened&or%5Blabel_name%5D%5B%5D=good%20first%20issue&or%5Blabel_name%5D%5B%5D=Easy&or%5Blabel_name%5D%5B%5D=easy&or%5Blabel_name%5D%5B%5D=help%20wanted&first_page_size=20]). Worth noting the skill level varies between projects, but a large subset of these should be approachable by contributors familiar with regular Rust/Unix application programming.\n- Improve the package manager, or other meta-tools like `redoxer` or `installer`\n- Improve the [Ion](https://gitlab.redox-os.org/redox-os/ion) shell, or other high-level or mid-level projects\n- Port Rust programs to Redox, possibly including dependencies, and C library extensions if necessary (also look for issues with the `port` label)\n- Improve program compatibility in relibc by e.g. implementing missing APIs\n\nIf you know how to code in Rust, and have experience with systems software/OS development:\n\n- Familiarize yourself with the repository layout, code, and build system\n- Update old code to remove warnings\n- Search for `TODO`, `FIXME`, `BUG`, `UNOPTIMIZED`, `REWRITEME`, `DOCME`, and `PRETTYFYME` and fix the code you find\n- Look in general for issues with the following labels: `critical`, `help wanted`, `feature`, `enhancement`, `bug` or `port`\n- Improve internal libraries and abstractions, e.g. `libredox`, `redox-scheme`, `redox-event` etc.\n- Help upstream Redox-specific functionality to the Rust ecosystem\n- Improve Redox's automated testing suite and continuous integration testing processes\n- Improve, profile, and optimize code, especially in the kernel, filesystem, and network stack\n- Improve or write device drivers\n\nFor those who want to contribute to the Redox GUI, our GUI strategy has recently changed.\n\n- We are improving the [Orbital](https://gitlab.redox-os.org/redox-os/orbital) display server and window manager, you can read more about it on [this tracking issue](https://gitlab.redox-os.org/redox-os/redox/-/issues/1430).\n- Redox is in the process of adopting other Rust-written GUI toolkits, such as [Iced](https://iced.rs) and [Slint](https://slint-ui.com/). Please check out those projects if this is your area of interest.\n- OrbTk is in maintenance mode, and its developers have moved to other projects such as the ones below. There is currently no Redox-specific GUI development underway.\n\n## Priorities\n\nYou can use the following GitLab label filters to know our development priorities on the moment:\n\n- [Critical](https://gitlab.redox-os.org/redox-os/redox/-/issues/?sort=created_date&state=opened&label_name%5B%5D=critical&first_page_size=20)\n- [High-priority](https://gitlab.redox-os.org/redox-os/redox/-/issues/?sort=created_date&state=opened&label_name%5B%5D=high-priority&first_page_size=20)\n- [Medium-priority](https://gitlab.redox-os.org/redox-os/redox/-/issues/?sort=created_date&state=opened&label_name%5B%5D=medium-priority&first_page_size=20)\n- [Low-priority](https://gitlab.redox-os.org/redox-os/redox/-/issues/?sort=created_date&state=opened&label_name%5B%5D=low-priority&first_page_size=20)\n\n## RFCs\n\nFor more significant changes that affect Redox's architecture, we use the [Request for Comments](https://gitlab.redox-os.org/redox-os/rfcs) repository.\n\n## Build System\n\nTo download the build system use the following commands:\n\n(You need to have [curl](https://curl.se/) installed on your system)\n\n```sh\ncurl -sf https://gitlab.redox-os.org/redox-os/redox/raw/master/podman_bootstrap.sh -o podman_bootstrap.sh\n```\n\n```sh\ntime bash -e podman_bootstrap.sh\n```\n\nTo start the compilation of the default recipes run the command below:\n\n```sh\nmake all\n```\n\nYou can find the build system organization and commands on the [Build System](https://doc.redox-os.org/book/build-system-reference.html) page.\n\n## Developer FAQ\n\nYou can see the most common questions and problems on the [Developer FAQ](https://doc.redox-os.org/book/developer-faq.html) page.\n\n## Porting Software\n\nYou can read how to use the Cookbook recipe system to port applications on the [Porting Applications using Recipes](https://doc.redox-os.org/book/porting-applications.html) page.\n\n## Libraries and APIs\n\nYou can read the [Libraries and APIs](https://doc.redox-os.org/book/libraries-apis.html) page to learn about the libraries and APIs used in Redox.\n\n## Visual Studio Code (VS Code) Configuration\n\nTo learn how to configure your VS Code to do Redox development please read the information below the [Visual Studio Code Configuration](https://doc.redox-os.org/book/coding-and-building.html#visual-studio-code-configuration) section.\n\n## Development Tips\n\nYou can find important tips on the [Development Tips](https://doc.redox-os.org/book/coding-and-building.html#development-tips) section.\n\n## References\n\nWe maintain a list of wikis, articles and videos to learn Rust, OS development and computer science on the [References](https://doc.redox-os.org/book/references.html) page.\n\nIf you are skilled there's a possibility that they could improve your knowledge in some way.\n\n## Best Practices and Guidelines\n\nYou can read the best practices and guidelines on the [Best practices and guidelines](https://doc.redox-os.org/book/best-practices.html) chapter.\n\n## Style Guidelines\n\n### Rust\n\nSince **Rust** is a relatively small and new language compared to others like C and C++, there's really only one standard. Just follow the official Rust standards for formatting, and maybe run `rustfmt` on your changes, until we setup the CI system to do it automatically.\n\n### Git\n\nPlease follow our [Git style](https://doc.redox-os.org/book/creating-proper-pull-requests.html) for pull requests.\n\n## GitLab\n\n### Identity\n\nOnce your GitLab account is created, you should add your Matrix or Discord username (the name after the `@` symbol) on the \"About\" section of your profile, that way we recognize you properly.\n\n### Issues\n\nTo know how to create issues on the Redox GitLab, read the [Filing Issues](https://doc.redox-os.org/book/filing-issues.html) page.\n\nOnce you create an issue don't forget to post the link on the Dev or Support rooms of the chat, because the GitLab email notifications have distractions (service messages or spam) and most developers don't left their GitLab pages open to receive desktop notifications from the web browser (which require a custom setting to receive issue notifications).\n\nBy doing this you help us to pay attention to your issues and avoid them to be accidentally forgotten.\n\n### Pull Requests\n\nPlease follow [our process](https://doc.redox-os.org/book/creating-proper-pull-requests.html) for creating proper pull requests.\n\n## Other Ways to Contribute\n\nIf you aren't good on coding, but you still want to help keep the project going, you can contribute and support in a variety of ways! We'll try to find a way to use anything you have to offer. \n\n### Design\n\nIf you're a good designer, whether it's 2D graphics, 3D graphics, interfaces, web design, you can help. We need logos, UI design, UI skins, app icons, desktop backgrounds, etc.\n\n- [Redox backgrounds](https://gitlab.redox-os.org/redox-os/backgrounds) - You can send your wallpapers on this repository.\n- [Redox assets](https://gitlab.redox-os.org/redox-os/assets) - You can send your logos, icons and themes on this repository.\n\nIf you have questions about the graphic design, ask us on the [Chat](https://doc.redox-os.org/book/chat.html).\n\n### Donate to Redox\n\nIf you are interested in donating to the Redox OS Nonprofit, you can find instructions on the [Donate](https://www.redox-os.org/donate/) page.\n"
        },
        {
          "name": "HARDWARE.md",
          "type": "blob",
          "size": 6.166015625,
          "content": "# Hardware Compatibility\n\nThis document tracks the current hardware compatibility of Redox.\n\n- [Why hardware reports are needed?](#why-hardware-reports-are-needed)\n- [What if my computer is customized?](#what-if-my-computer-is-customized)\n- [Status](#status)\n- [General](#general)\n- [Template](#template)\n- [Recommended](#recommended)\n- [Booting](#booting)\n- [Broken](#broken)\n\n## Why hardware reports are needed?\n\nEach computer model have different hardware interface/firmware implementations and devices, which can cause the following problems:\n\n- Boot bugs\n- Lack of device support\n- Performance degradation\n\nThese reports helps us to fix the problems above.\n\n## What if my computer is customized?\n\nYou can use the \"Custom\" word on the \"Vendor\" and \"Model\" categories, we also recommend to add your `pciutils` log on [this document link](https://gitlab.redox-os.org/redox-os/drivers/-/blob/master/COMMUNITY-HW.md?ref_type=heads) to help us with probable porting.\n\n## Status\n\n- Broken - The system can't boot.\n- Booting - The system boots with some issues.\n- Recommended - The system start with all features working.\n\n## General\n\nThis section cover things to consider.\n\n- ACPI support is incomplete (some things are hardcoded on the kernel)\n- Only USB input devices are supported\n- Wi-Fi is not supported\n- GPU drivers aren't supported (only VESA and UEFI GOP)\n- Automatic operating system discovery on boot loader is not implemented (remember this before installing Redox)\n\n## Template\n\nYou will use this template to insert your computer on the table.\n\n```\n|  |  |  |  |  |  |  |  |\n```\n\n## Recommended\n\n| **Vendor** | **Model** | **Redox Version** | **Image Date** | **Variant** | **CPU Architecture** | **Motherboard Firmware** | **Report** |\n|------------|-----------|-------------------|----------------|-------------|----------------------|--------------------------|------------|\n| System76 | Galago Pro (galp5) | 0.8.0 | 11-11-2022 | desktop | x86-64 | UEFI | Boots to Orbital |\n| System76 | Lemur Pro (lemp9) | 0.8.0 | 11-11-2022 | desktop | x86-64 | UEFI | Boots to Orbital |\n| Lenovo | IdeaPad Y510P | 0.8.0 | 11-11-2022 | desktop | x86-64 | BIOS, UEFI | Boots to Orbital |\n\n## Booting\n\n| **Vendor** | **Model** | **Redox Version** | **Image Date** | **Variant** | **CPU Architecture** | **Motherboard Firmware** | **Report** |\n|------------|-----------|-------------------|----------------|-------------|----------------------|--------------------------|------------|\n| System76 | Oryx Pro (oryp10) | 0.8.0 | 11-11-2022 | desktop | x86-64 | UEFI | Boots to Orbital, No touchpad support, though it should be working |\n| System76 | Pangolin (pang12) | 0.8.0 | 11-11-2022 | desktop | x86-64 | UEFI | Boots to Orbital, No touchpad support, requires I2C HID |\n| Dell | XPS 13 (9350) | 0.8.0 | 11-11-2022 | desktop | x86-64 | BIOS, UEFI | Boots to Orbital, NVMe driver livelocks |\n| Dell | XPS 13 (9350) | 0.8.0 | 11-11-2022 | desktop | i686 | BIOS | Boots to Orbital, NVMe driver livelocks |\n| HP | Dev One | 0.8.0 | 11-11-2022 | desktop | x86-64 | UEFI | Boots to Orbital, No touchpad support, requires I2C HID |\n| ASUS | X554L | 0.8.0 | 11-11-2022 | desktop | x86-64 | BIOS | Boots to Orbital, No audio, HDA driver cannot find output pins |\n| ASUS | ROG g55vw | 0.8.0 | 11-11-2023 | desktop | x86-64 | BIOS | Boots to Orbital, UEFI panic in SETUP |\n| ASUS | PRIME B350M-E (custom) | 0.9.0 | 20-09-2024 | desktop | x86-64 | UEFI | Partial support for the PS/2 keyboard, PS/2 mouse is broken |\n| ASUS | Eee PC 900 | 0.8.0 | 11-11-2022 | desktop | i686 | BIOS | Boots to Orbital, No ethernet driver, Correct video mode not offered (firmware issue) |\n| Toshiba | Satellite L500 | 0.8.0 | 11-11-2022 | desktop | x86-64 | BIOS | Boots to Orbital, No ethernet driver, Correct video mode not offered (firmware issue) |\n| Raspberry Pi | 3 Model B+ | 0.8.0 | Unknown | server | ARM64 | U-Boot | Boots to UART serial console (pl011) |\n| Lenovo | ThinkPad Yoga 260 Laptop - Type 20FE | 0.9.0 | 07-09-2024 | demo | x86-64 | UEFI | Boots to Orbital, No audio |\n| Lenovo | Yoga S730-13IWL | 0.9.0 | 09-11-2024 | desktop | x86-64 | UEFI | Boots to Orbital, No trackpad or USB mouse input support |\n\n## Broken\n\n| **Vendor** | **Model** | **Redox Version** | **Image Date** | **Variant** | **CPU Architecture** | **Motherboard Firmware** | **Report** |\n|------------|-----------|-------------------|----------------|-------------|----------------------|--------------------------|------------|\n| HP | EliteBook 2570p | 0.8.0 | 23-11-2022 | demo | x86-64 | BIOS (CSM mode?) | Gets to resolution selection, Fails assert in `src/os/bios/mod.rs:77` after selecting resolution |\n| BEELINK | U59 | 0.8.0 | 30-05-2024 | server | x86-64 | Unknown | Aborts after panic in xhcid |\n| ASUS | PN41 | 0.8.0 | 30-05-2024 | server | x86-64 | Unknown | Aborts after panic in xhcid |\n| Lenovo | G570 | 0.8.0 | 11-11-2022 | desktop | x86-64 | BIOS | Bootloader panics in `alloc_zeroed_page_aligned`, Correct video mode not offered (firmware issue) |\n| Lenovo | IdeaPad Y510P | 0.8.0 | 11-11-2022 | desktop | i686 | BIOS | Panics on `phys_to_virt overflow`, probably having invalid mappings for 32-bit |\n| Framework | Laptop 16 (AMD Ryzen 7040 Series) | 0.9.0 | 07-09-2024 | server, demo | x86-64 | UEFI | Black screen and unresponsive after the bootloader and resolution selection |\n| Toshiba | Satellite L500 | 0.8.0 | 11-11-2022 | desktop | i686 | BIOS | Correct video mode not offered (firmware issue), Panics on `phys_to_virt overflow`, probably having invalid mappings for 32-bit |\n| Panasonic | Toughbook CF-18 | 0.8.0 | 11-11-2022 | desktop | i686 | BIOS | Hangs after PIT initialization |\n| XMG (Schenker) | Apex 17 (M21) | 0.9.0 | 30-09-2024 | demo, server | x86-64 | UEFI | After selecting resolution, (release) repeats `...::interrupt::irq::ERROR -- Local apic internal error: ESR=0x40` a few times before it freezes; (daily) really slowly prints statements from `...::rmm::INFO` before it abruptly aborts |\n| HP | Compaq nc6120 | 0.9.0 | 2024-11-08 | desktop, server | i686 | BIOS | Unloads into memory at a rate slower than 1MB/s after selecting resolution. When unloading is complete the logger initializes and crashes after kernel::acpi, some information about APIC is printed. Boot logs do not progress after this point. |\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05078125,
          "content": "Copyright (c) 2016 Redox OS Developers\n\nMIT License\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2.9912109375,
          "content": "# This file contains the build system commands configuration\n# and environment variables\ninclude mk/config.mk\n\n# Build system dependencies\ninclude mk/depends.mk\n\nall: $(BUILD)/harddrive.img\n\nlive:\n\t-$(FUMOUNT) $(BUILD)/filesystem/ || true\n\t-$(FUMOUNT) /tmp/redox_installer/ || true\n\trm -f $(BUILD)/livedisk.iso\n\t$(MAKE) $(BUILD)/livedisk.iso\n\npopsicle: $(BUILD)/livedisk.iso\n\tpopsicle-gtk $(BUILD)/livedisk.iso\n\nimage:\n\t-$(FUMOUNT) $(BUILD)/filesystem/ || true\n\t-$(FUMOUNT) /tmp/redox_installer/ || true\n\trm -f $(BUILD)/harddrive.img $(BUILD)/livedisk.iso\n\t$(MAKE) all\n\nrebuild:\n\t-$(FUMOUNT) $(BUILD)/filesystem/ || true\n\t-$(FUMOUNT) /tmp/redox_installer/ || true\n\trm -rf $(BUILD)/repo.tag $(BUILD)/harddrive.img $(BUILD)/livedisk.iso\n\t$(MAKE) all\n\nclean: $(CONTAINER_TAG)\nifeq ($(PODMAN_BUILD),1)\n\t$(PODMAN_RUN) $(MAKE) $@\nelse\n\tcd cookbook && ./clean.sh\n\t-rm -rf cookbook/repo\n\tcargo clean --manifest-path installer/Cargo.toml\n\tcargo clean --manifest-path redoxfs/Cargo.toml\n\tcargo clean --manifest-path relibc/Cargo.toml\nendif\n\t-$(FUMOUNT) $(BUILD)/filesystem/ || true\n\t-$(FUMOUNT) /tmp/redox_installer/ || true\n\trm -rf $(BUILD)\n\ndistclean: $(CONTAINER_TAG)\nifeq ($(PODMAN_BUILD),1)\n\t$(PODMAN_RUN) $(MAKE) $@\nelse\n\t$(MAKE) clean\n\tcd cookbook && ./unfetch.sh\nendif\n\npull:\n\tgit pull\n\tgit submodule sync --recursive\n\tgit submodule update --recursive --init\n\nfetch: $(BUILD)/fetch.tag\n\nrepo: $(BUILD)/repo.tag\n\n# Podman build recipes and vars\ninclude mk/podman.mk\n\n# Disk Imaging and Cookbook tools\ninclude mk/fstools.mk\n\n# Cross compiler recipes\ninclude mk/prefix.mk\n\n# Repository maintenance\ninclude mk/repo.mk\n\n# Disk images\ninclude mk/disk.mk\n\n# Emulation recipes\ninclude mk/qemu.mk\ninclude mk/virtualbox.mk\n\n# CI\ninclude mk/ci.mk\n\nenv: prefix FORCE $(CONTAINER_TAG)\nifeq ($(PODMAN_BUILD),1)\n\t$(PODMAN_RUN) $(MAKE) $@\nelse\n\texport PATH=\"$(PREFIX_PATH):$$PATH\" && \\\n\tbash\nendif\n\nexport RUST_GDB=gdb-multiarch # Necessary when debugging for another architecture than the host\nGDB_KERNEL_FILE=cookbook/recipes/core/kernel/target/$(TARGET)/build/kernel.sym\ngdb: FORCE\n\trust-gdb $(GDB_KERNEL_FILE) --eval-command=\"target remote :1234\"\n\n# This target allows debugging a userspace application without requiring gdbserver running inside\n# the VM. Because gdb doesn't know when the userspace application is scheduled by the kernel and as\n# it stops the entire VM rather than just the userspace application that the user wants to debug,\n# connecting to a gdbserver running inside the VM is highly encouraged when possible. This target\n# should only be used when the application to debug runs early during boot before the network stack\n# has started or you need to debug the interaction between the application and the kernel.\n# tl;dr: DO NOT USE THIS TARGET UNLESS YOU HAVE TO\ngdb-userspace: FORCE\n\trust-gdb $(GDB_APP_FILE) --eval-command=\"add-symbol-file $(GDB_KERNEL_FILE) 0x$(shell readelf -S $(GDB_KERNEL_FILE) | grep .text | cut -c43-58)\" --eval-command=\"target remote :1234\"\n\n# An empty target\nFORCE:\n\n# Wireshark\nwireshark: FORCE\n\twireshark $(BUILD)/network.pcap\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.6787109375,
          "content": "<p>test<p>\n<p align=\"center\">\n<img alt=\"Redox\" width=\"346\" src=\"https://gitlab.redox-os.org/redox-os/assets/raw/master/logos/redox/logo.png\">\n</p>\n\nThis repository is the **Build System** for Redox OS. Redox is under active development by a vibrant community. Key links:\n\n- [The **main website** for Redox OS](https://www.redox-os.org).\n- [The Redox Book](https://doc.redox-os.org/book/) and [Build Instructions](https://doc.redox-os.org/book/building-redox.html).\n- [Redox Chat and Support](https://matrix.to/#/#redox-join:matrix.org).\n- [Patreon](https://www.patreon.com/redox_os), [Donate](https://redox-os.org/donate/) and [Merch](https://redox-os.creator-spring.com/).\n- Scroll down for a list of key Redox components and their repos.\n\n[Redox](https://www.redox-os.org) is an operating system written in Rust, a language with focus on safety, efficiency and high performance. Redox uses a microkernel architecture, and aims to be reliable, secure, usable, correct, and free. Redox is inspired by previous operating systems, such as seL4, MINIX, Plan 9, Linux and BSD.\n\nRedox _is not_ just a kernel, it's a **full-featured operating system**, providing components (file system, display manager, core utilities, etc.) that together make up a functional and convenient operating system. Redox uses the COSMIC desktop apps, and provides source code compatibility with many Rust, Linux and BSD programs.\n\n[![MIT licensed](https://img.shields.io/badge/license-MIT-blue.svg)](./LICENSE)\n\n## More Links\n\n- [Book](https://doc.redox-os.org/book/)\n- [Contribute](CONTRIBUTING.md)\n- [Hardware Compatibility](https://doc.redox-os.org/book/hardware-support.html)\n- Run Redox in a [Virtual Machine](https://doc.redox-os.org/book/running-vm.html) or on [Real Hardware](https://doc.redox-os.org/book/ch02-02-real-hardware.html)\n- [Trying Out Redox](https://doc.redox-os.org/book/trying-out-redox.html)\n- [Building Redox](https://doc.redox-os.org/book/building-redox.html)\n- [Build System Documentation](https://doc.redox-os.org/book/build-system-reference.html)\n- [Developer FAQ](https://doc.redox-os.org/book/developer-faq.html)\n- [Chat/Discussions/Help](https://doc.redox-os.org/book/chat.html)\n\n## Ecosystem\n\nSome of the key repositories on the Redox GitLab:\n\n| Essential Repos                                                                      | Maintainer\n|--------------------------------------------------------------------------------------|---------------------------\n| [Kernel](https://gitlab.redox-os.org/redox-os/kernel)                                | **@jackpot51**\n| [RedoxFS (default filesystem)](https://gitlab.redox-os.org/redox-os/redoxfs)         | **@jackpot51**\n| [Drivers](https://gitlab.redox-os.org/redox-os/drivers)                              | **@jackpot51**\n| [Orbital (windowing and compositing system)](https://gitlab.redox-os.org/redox-os/orbital) | **@jackpot51**\n| [pkgutils (current package manager)](https://gitlab.redox-os.org/redox-os/pkgutils)  | **@jackpot51**\n| [relibc (C Library in Rust)](https://gitlab.redox-os.org/redox-os/relibc)            | **@jackpot51**\n| [netstack (protocol stack)](https://gitlab.redox-os.org/redox-os/netstack)                            | **@jackpot51**\n| [Ion (shell)](https://gitlab.redox-os.org/redox-os/ion)                              | **@jackpot51**\n| [Termion (terminal library)](https://gitlab.redox-os.org/redox-os/termion)           | **@jackpot51**\n| This repo - the root of the Build System                                             | **@jackpot51**\n| [cookbook (Build System for components)](https://gitlab.redox-os.org/redox-os/cookbook) | **@jackpot51** **@hatred_45**\n| [Redoxer (Build/Test for Redox compatibility verification)](https://gitlab.redox-os.org/redox-os/redoxer) | **@jackpot51**\n| [The Redox Book](https://gitlab.redox-os.org/redox-os/book)                          | **@hatred_45**\n\n## What it looks like\n\nSee [Redox in Action](https://www.redox-os.org/screens/) for photos and videos.\n\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/website/-/raw/master/static/img/screenshot/orbital-visual.png\">\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/website/-/raw/master/static/img/screenshot/cosmic-programs.png\">\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/website/-/raw/master/static/img/screenshot/cosmic-term-screenfetch.png\">\n\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/website/-/raw/master/static/img/screenshot/cosmic-edit-redox.png\">\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/website/-/raw/master/static/img/screenshot/image-viewer.png\">\n<img alt=\"Redox\" height=\"150\" src=\"https://gitlab.redox-os.org/redox-os/assets/raw/master/screenshots/Boot.png\">\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 3.830078125,
          "content": "#!/usr/bin/env bash\n\n# Alternative script for the build system Makefiles\n\n###########################################################################\n#                                                                         #\n# Build the system, with a specified processor type and filesystem config #\n#                                                                         #\n###########################################################################\n\nusage()\n{\n    echo \"build.sh:      Invoke make for a particular architecture and configuration.\"\n    echo \"Usage:\"\n    echo \"./build.sh [-X | -A | -6 | -a ARCH] [-c CONFIG] [-f FILESYSTEM_CONFIG] TARGET...\"\n    echo \"    -X         Equivalent to -a x86_64.\"\n    echo \"    -A         Equivalent to -a aarch64.\"\n    echo \"    -6         Equivalent to -a i686.\"\n    echo \"    -a ARCH:   Processor Architecture. Normally one of x86_64, aarch64 or\"\n    echo \"               i686. ARCH is not checked, so you can add a new architecture.\"\n    echo \"               Defaults to the directory containing the FILESYSTEM_CONFIG file,\"\n    echo \"               or x86_64 if no FILESYSTEM_CONFIG is specified.\"\n    echo \"    -c CONFIG: The name of the config, e.g. desktop, server or demo.\"\n    echo \"               Determines the name of the image, build/ARCH/CONFIG/harddrive.img\"\n    echo \"               e.g. build/x86_64/desktop/harddrive.img\"\n    echo \"               Determines the name of FILESYSTEM_CONFIG if none is specified.\"\n    echo \"               Defaults to the basename of FILESYSTEM_CONFIG, or 'desktop'\"\n    echo \"               if FILESYSTEM_CONFIG is not specified.\"\n    echo \"    -f FILESYSTEM_CONFIG:\"\n    echo \"               The config file to use. It can be in any location.\"\n    echo \"               However, if the file is not in a directory named x86_64, aarch64\"\n    echo \"               or i686, you must specify the architecture.\"\n    echo \"               If -f is not specified, FILESYSTEM_CONFIG is set to\"\n    echo \"               config/ARCH/CONFIG.toml\"\n    echo \"               If you specify both CONFIG and FILESYSTEM_CONFIG, it is not\"\n    echo \"               necessary that they match, but it is recommended.\"\n    echo \"    Examples:  ./build.sh -c demo live - make build/x86_64/demo/livedisk.iso\"\n    echo \"               ./build.sh -6 qemu - make build/i686/desktop/harddrive.img and\"\n    echo \"                                    and run it in qemu\"\n    echo \"    NOTE:      If you do not change ARCH or CONFIG very often, edit mk/config.mk\"\n    echo \"               and set ARCH and FILESYSTEM_CONFIG. You only need to use this\"\n    echo \"               script when you want to override them.\"\n}\n\nif [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n\tusage\n    exit\nfi\n\ndefaultarch=\"x86_64\"\ndefaultname=\"desktop\"\nARCH=\"\"\nCONFIG_NAME=\"\"\nFILESYSTEM_CONFIG=\"\"\n\nwhile getopts \":c:f:a:dhXA6\" opt\ndo\n\tcase \"$opt\" in\n   \t\ta) ARCH=\"$OPTARG\";;\n\t\tc) CONFIG_NAME=\"$OPTARG\";;\n\t\tf) FILESYSTEM_CONFIG=\"$OPTARG\";;\n        X) ARCH=\"x86_64\";;\n        A) ARCH=\"aarch64\";;\n        6) ARCH=\"i686\";;\n\t\th) usage;;\n\t\t\\?) echo \"Unknown option -$OPTARG, try -h for help\"; exit;;\n        :) echo \"-$OPTARG requires a value\"; exit;;\n\tesac\ndone\nshift $((OPTIND -1))\n\nif [ -z \"$ARCH\" ] && [ -n \"$FILESYSTEM_CONFIG\" ]; then\n    dirname=`dirname \"$FILESYSTEM_CONFIG\"`\n    ARCH=`basename $dirname`\n    case \"$ARCH\" in\n        x86_64) : ;;\n        aarch64) : ;;\n        i686) : ;;\n        \\?) ARCH=\"\"; echo \"Unknown Architecture, please specify x86_64, aarch64 or i686\";;\n    esac\nfi\n\nif [ -z \"$config_name\" ] && [ -n \"$FILESYSTEM_CONFIG\" ]; then\n    CONFIG_NAME=`basename \"$FILESYSTEM_CONFIG\" .toml`\nfi\n\nif [ -z \"$ARCH\" ]; then\n    ARCH=\"$defaultarch\"\nfi\n\nif [ -z \"$CONFIG_NAME\" ]; then\n    CONFIG_NAME=\"$defaultname\"\nfi\n\nif [ -z \"$FILESYSTEM_CONFIG\" ]; then\n    FILESYSTEM_CONFIG=\"config/$ARCH/$CONFIG_NAME.toml\"\nfi\n\nexport ARCH CONFIG_NAME FILESYSTEM_CONFIG\nmake $@\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cookbook",
          "type": "commit",
          "content": null
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "installer",
          "type": "commit",
          "content": null
        },
        {
          "name": "mk",
          "type": "tree",
          "content": null
        },
        {
          "name": "native_bootstrap.sh",
          "type": "blob",
          "size": 28.37109375,
          "content": "# This script setup the Redox build system\n# It install Rustup, the recipe dependencies for cross-compilation\n# and download the build system configuration files\n\n#!/usr/bin/env bash\n\nset -e\n\n##########################################################\n# This function is simply a banner to introduce the script\n##########################################################\nbanner()\n{\n\techo \"|------------------------------------------|\"\n\techo \"|----- Welcome to the Redox bootstrap -----|\"\n\techo \"|------------------------------------------|\"\n}\n\n###################################################################################\n# This function takes care of installing a dependency via package manager of choice\n# for building Redox on BSDs (macOS, FreeBSD, etc.).\n# @params:    $1 package manager\n#             $2 package name\n#             $3 binary name (optional)\n###################################################################################\ninstall_bsd_pkg()\n{\n    PKG_MANAGER=$1\n    PKG_NAME=$2\n    BIN_NAME=$3\n    if [ -z \"$BIN_NAME\" ]; then\n        BIN_NAME=$PKG_NAME\n    fi\n\n    BIN_LOCATION=$(which $BIN_NAME || true)\n    if [ -z \"$BIN_LOCATION\" ]; then\n        echo \"$PKG_MANAGER install $PKG_NAME\"\n        $PKG_MANAGER install \"$PKG_NAME\"\n    else\n        echo \"$BIN_NAME already exists at $BIN_LOCATION, no need to install $PKG_NAME...\"\n    fi\n}\n\ninstall_macports_pkg()\n{\n    install_bsd_pkg \"sudo port\" \"$1\" \"$2\"\n}\n\ninstall_brew_pkg()\n{\n    install_bsd_pkg \"brew\" $@\n}\n\ninstall_brew_cask_pkg()\n{\n    install_bsd_pkg \"brew cask\" $@\n}\n\ninstall_freebsd_pkg()\n{\n    install_bsd_pkg \"sudo pkg\" $@\n}\n\n###############################################################################\n# This function checks which of the supported package managers\n# is available on the macOS host.\n# If a supported package manager is found, it delegates the installing work to\n# the relevant function.\n# Otherwise this function will exit this script with an error.\n###############################################################################\nosx()\n{\n    echo \"Detected macOS!\"\n\n    if [ ! -z \"$(which brew)\" ]; then\n        osx_homebrew $@\n    elif [ ! -z \"$(which port)\" ]; then\n        osx_macports $@\n    else\n        echo \"Please install either Homebrew or MacPorts, if you wish to use this script\"\n        echo \"Re-run this script once you installed one of those package managers\"\n        echo \"Will not install, now exiting...\"\n        exit 1\n    fi\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using MacPorts\n# for building Redox on macOS\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nosx_macports()\n{\n    echo \"MacPorts detected! Now updating...\"\n    sudo port -v selfupdate\n\n    echo \"Installing missing packages...\"\n\n    install_macports_pkg \"git\"\n\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_macports_pkg \"qemu\" \"qemu-system-x86_64\"\n\telif [ \"$1\" == \"virtualbox\" ]; then\n        install_macports_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n    install_macports_pkg \"coreutils\"\n    install_macports_pkg \"findutils\"\n    install_macports_pkg \"gcc14\"\n    install_macports_pkg \"nasm\"\n    install_macports_pkg \"pkgconfig\"\n    install_macports_pkg \"osxfuse\"\n    install_macports_pkg \"x86_64-elf-gcc\"\n    install_macports_pkg \"cmake\"\n    install_macports_pkg \"ninja\"\n    install_macports_pkg \"po4a\"\n    install_macports_pkg \"findutils\"\n    install_macports_pkg \"texinfo\"\n\tinstall_macports_pkg \"autoconf\"\n\tinstall_macports_pkg \"openssl3\"\n\tinstall_macports_pkg \"openssl11\"\n\tinstall_macports_pkg \"bison\"\n\tinstall_macports_pkg \"curl\"\n\tinstall_macports_pkg \"wget\"\n\tinstall_macports_pkg \"file\"\n\tinstall_macports_pkg \"flex\"\n\tinstall_macports_pkg \"gperf\"\n\tinstall_macports_pkg \"expat\"\n\tinstall_macports_pkg \"gmp\"\n\tinstall_macports_pkg \"libpng\"\n\tinstall_macports_pkg \"jpeg\"\n\tinstall_macports_pkg \"libsdl12\"\n\tinstall_macports_pkg \"libsdl2_ttf\"\n\tinstall_macports_pkg \"libtool\"\n\tinstall_macports_pkg \"m4\"\n\tinstall_macports_pkg \"ninja\"\n\tinstall_macports_pkg \"meson\"\n\tinstall_macports_pkg \"python311\"\n\tinstall_macports_pkg \"py37-mako\"\n\tinstall_macports_pkg \"xdg-utils\"\n\tinstall_macports_pkg \"zip\"\n\tinstall_macports_pkg \"unzip\"\n\tinstall_macports_pkg \"llvm-18\"\n\tinstall_macports_pkg \"clang-18\"\n\tinstall_macports_pkg \"perl5.24\"\n\tinstall_macports_pkg \"p5-html-parser\"\n\tinstall_macports_pkg \"doxygen\"\n\tinstall_macports_pkg \"gpatch\"\n\tinstall_macports_pkg \"automake\"\n\tinstall_macports_pkg \"scons\"\n\tinstall_macports_pkg \"gmake\"\n\tinstall_macports_pkg \"lua\"\n\tinstall_macports_pkg \"protobuf-c\"\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using Homebrew\n# for building Redox on macOS\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nosx_homebrew()\n{\n    echo \"Homebrew detected! Now updating...\"\n    brew update\n\n    echo \"Installing missing packages...\"\n\n    install_brew_pkg \"git\"\n\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_brew_pkg \"qemu\" \"qemu-system-x86_64\"\n    elif [ \"$1\" == \"virtualbox\" ]; then\n        install_brew_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n    install_brew_pkg \"automake\"\n    install_brew_pkg \"bison\"\n    install_brew_pkg \"gettext\"\n    install_brew_pkg \"libtool\"\n    install_brew_pkg \"make\"\n    install_brew_pkg \"nasm\"\n    install_brew_pkg \"gcc@14\"\n    install_brew_pkg \"pkg-config\"\n    install_brew_pkg \"cmake\"\n    install_brew_pkg \"ninja\"\n    install_brew_pkg \"po4a\"\n    install_brew_pkg \"macfuse\"\n    install_brew_pkg \"findutils\"\n    install_brew_pkg \"texinfo\"\n\tinstall_brew_pkg \"openssl@1.1\"\n\tinstall_brew_pkg \"openssl@3.0\"\n\tinstall_brew_pkg \"autoconf\"\n\tinstall_brew_pkg \"curl\"\n\tinstall_brew_pkg \"wget\"\n\tinstall_brew_pkg \"flex\"\n\tinstall_brew_pkg \"gperf\"\n\tinstall_brew_pkg \"expat\"\n\tinstall_brew_pkg \"gmp\"\n\tinstall_brew_pkg \"libpng\"\n\tinstall_brew_pkg \"jpeg\"\n\tinstall_brew_pkg \"sdl12-compat\"\n\tinstall_brew_pkg \"sdl2_ttf\"\n\tinstall_brew_pkg \"perl\"\n\tinstall_brew_pkg \"libtool\"\n\tinstall_brew_pkg \"m4\"\n\tinstall_brew_pkg \"ninja\"\n\tinstall_brew_pkg \"meson\"\n\tinstall_brew_pkg \"python@3.11\"\n\tinstall_brew_pkg \"zip\"\n\tinstall_brew_pkg \"unzip\"\n\tinstall_brew_pkg \"llvm\"\n\tinstall_brew_pkg \"doxygen\"\n\tinstall_brew_pkg \"gpatch\"\n\tinstall_brew_pkg \"automake\"\n\tinstall_brew_pkg \"scons\"\n\tinstall_brew_pkg \"lua\"\n\tinstall_brew_pkg \"ant\"\n\tinstall_brew_pkg \"protobuf\"\n\n    install_brew_pkg \"redox-os/gcc_cross_compilers/x86_64-elf-gcc\" \"x86_64-elf-gcc\"\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using pkg\n# for building Redox on FreeBSD\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nfreebsd()\n{\n    set -x\n    echo \"FreeBSD detected!\"\n    echo \"Installing missing packages...\"\n\n    install_freebsd_pkg \"git\"\n\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_freebsd_pkg \"qemu\" \"qemu-system-x86_64\"\n    elif [ \"$1\" == \"virtualbox\" ]; then\n        install_freebsd_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n    install_freebsd_pkg \"coreutils\"\n    install_freebsd_pkg \"findutils\"\n    install_freebsd_pkg \"gcc\"\n    install_freebsd_pkg \"nasm\"\n    install_freebsd_pkg \"pkgconf\"\n    install_freebsd_pkg \"fusefs-libs3\"\n    install_freebsd_pkg \"cmake\"\n    install_freebsd_pkg \"gmake\"\n    install_freebsd_pkg \"wget\"\n\tinstall_freebsd_pkg \"openssl\"\n    install_freebsd_pkg \"texinfo\"\n    install_freebsd_pkg \"python\"\n    install_freebsd_pkg \"automake\"\n    install_freebsd_pkg \"gettext\"\n    install_freebsd_pkg \"bison\"\n    install_freebsd_pkg \"gperf\"\n\tinstall_freebsd_pkg \"autoconf\"\n\tinstall_freebsd_pkg \"curl\"\n\tinstall_freebsd_pkg \"file\"\n\tinstall_freebsd_pkg \"flex\"\n\tinstall_freebsd_pkg \"expat2\"\n\tinstall_freebsd_pkg \"gmp\"\n\tinstall_freebsd_pkg \"png\"\n\tinstall_freebsd_pkg \"libjpeg-turbo\"\n\tinstall_freebsd_pkg \"sdl12\"\n\tinstall_freebsd_pkg \"sdl2_ttf\"\n\tinstall_freebsd_pkg \"perl5.36\"\n\tinstall_freebsd_pkg \"p5-HTML-Parser\"\n\tinstall_freebsd_pkg \"libtool\"\n\tinstall_freebsd_pkg \"m4\"\n\tinstall_freebsd_pkg \"po4a\"\n\tinstall_freebsd_pkg \"syslinux\"\n\tinstall_freebsd_pkg \"ninja\"\n\tinstall_freebsd_pkg \"meson\"\n\tinstall_freebsd_pkg \"xdg-utils\"\n\tinstall_freebsd_pkg \"zip\"\n\tinstall_freebsd_pkg \"unzip\"\n\tinstall_freebsd_pkg \"llvm\"\n\tinstall_freebsd_pkg \"doxygen\"\n\tinstall_freebsd_pkg \"patch\"\n\tinstall_freebsd_pkg \"automake\"\n\tinstall_freebsd_pkg \"scons\"\n\tinstall_freebsd_pkg \"lua54\"\n\tinstall_freebsd_pkg \"py-protobuf-compiler\"\n    set +x\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Arch Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n# \t\t$2 install non-interactively, boolean\n###############################################################################\narchLinux()\n{\n\tnoninteractive=$2\n\n\tpacman_install=\"pacman -S --needed\"\n\tif [ \"$noninteractive\" = true ]; then\n\t\tpacman_install+=\"  --noconfirm\"\n\tfi\n\n\techo \"Detected Arch Linux\"\n\tpackages=\"cmake \\\n\tfuse \\\n\tgit \\\n\tgperf \\\n\tperl-html-parser \\\n\tnasm \\\n\twget \\\n\ttexinfo \\\n\tbison \\\n\tflex \\\n\tpo4a \\\n\tautoconf \\\n\tcurl \\\n\tfile \\\n\tpatch \\\n\tautomake \\\n\tscons \\\n\twaf \\\n\texpat \\\n\tgmp \\\n\tlibtool \\\n\tlibpng \\\n\tlibjpeg-turbo \\\n\tsdl12-compat \\\n\tm4 \\\n\tpkgconf \\\n\tpo4a \\\n\tsyslinux \\\n\tmeson \\\n\tpython \\\n\tpython-mako \\\n\tmake \\\n\txdg-utils \\\n\tzip \\\n\tunzip \\\n\tllvm \\\n\tclang \\\n\tperl \\\n\tdoxygen \\\n\tlua \\\n\tant \\\n\tprotobuf \\\n\trsync\"\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tpackages=\"$packages qemu\"\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tpackages=\"$packages virtualbox\"\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\t# Scripts should not cause a system update in order to just install a couple\n\t#   of packages. If pacman -S --needed is going to fail, let it fail and the\n\t#   user will figure out the issues (without updating if required) and rerun\n\t#   the script.\n\t#echo \"Updating system...\"\n\t#sudo pacman -Syu\n\n\techo \"Installing packages $packages...\"\n\tsudo $pacman_install $packages\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Debian-based Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n# \t\t$2 install non-interactively, boolean\n#\t\t$3 the package manager to use\n###############################################################################\nubuntu()\n{\n\tnoninteractive=$2\n\tpackage_manager=$3\n\techo \"Detected Ubuntu/Debian\"\n\techo \"Updating system...\"\n\tsudo $package_manager update\n\n\tif [ $package_manager == \"apt-get\" ]; then\n\t\tif [ \"$noninteractive\" = true ]; then\n\t\t\tinstall_command+=\"DEBIAN_FRONTEND=noninteractive apt-get install --assume-yes --quiet\"\n\t\telse\n\t\t\tinstall_command=\"apt-get install\"\n\t\tfi\n\telse\n\t\tinstall_command=\"$package_manager install\"\n\tfi\n\n\techo \"Installing required packages...\"\n\tpkgs=\"\\\n\t\tant \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tautopoint \\\n\t\tbison \\\n\t\tbuild-essential \\\n\t\tclang \\\n\t\tcmake \\\n\t\tcurl \\\n\t\tdos2unix \\\n\t\tdoxygen \\\n\t\tfile \\\n\t\tflex \\\n\t\tfuse3 \\\n\t\tg++ \\\n\t\tgenisoimage \\\n\t\tgit \\\n\t\tgperf \\\n\t\thelp2man \\\n\t\tintltool \\\n\t\tlibexpat-dev \\\n\t\tlibfuse3-dev \\\n\t\tlibgmp-dev \\\n\t\tlibhtml-parser-perl \\\n\t\tlibjpeg-dev \\\n\t\tlibmpfr-dev \\\n\t\tlibpng-dev \\\n\t\tlibsdl1.2-dev \\\n\t\tlibsdl2-ttf-dev \\\n\t\tlibtool \\\n\t\tllvm \\\n\t\tlua5.4 \\\n\t\tlzip \\\n\t\tm4 \\\n\t\tmake \\\n\t\tmeson \\\n\t\tnasm \\\n\t\tninja-build \\\n\t\tpatch \\\n\t\tperl \\\n\t\tpkg-config \\\n\t\tpo4a \\\n\t\tprotobuf-compiler \\\n\t\tpython3 \\\n\t\tpython3-mako \\\n\t\trsync \\\n\t\tscons \\\n\t\ttexinfo \\\n\t\tunzip \\\n\t\twget \\\n\t\txdg-utils \\\n\t\txxd \\\n\t\tzip \\\n\t\tzstd \\\n\t\t\"\n\t# Not availible for at least ARM hosts\n\tcase \"$host_arch\" in\n\t\tx86*|i?86) pkgs=\"$pkgs libc6-dev-i386 syslinux-utils\";;\n\tesac\n\tsudo $install_command $pkgs\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Installing QEMU...\"\n\t\t\tsudo $install_command qemu-system-x86 qemu-kvm\n\t\t\tsudo $install_command qemu-efi-arm qemu-system-arm\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\n\t\t\tif grep '^ID=debian$' /etc/os-release > /dev/null; then\n\t\t\t\techo \"Virtualbox is not in the official debian packages\"\n\t\t\t\techo \"To install virtualbox on debian, see https://wiki.debian.org/VirtualBox\"\n\t\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\t\telse\n\t\t\t\techo \"Installing VirtualBox...\"\n\t\t\t\tsudo $install_command virtualbox\n\t\t\tfi\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Fedora Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n# \t\t$2 install non-interactively, boolean\n###############################################################################\nfedora()\n{\n\tnoninteractive=$2\n\n\tdnf_install=\"dnf install\"\n\tif [ \"$noninteractive\" = true ]; then\n\t\tdnf_install+=\" --assumeyes --quiet\"\n\tfi\n\n\techo \"Detected Fedora\"\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Installing git...\"\n\t\tsudo $dnf_install git-all\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Installing QEMU...\"\n\t\t\tsudo $dnf_install qemu-system-x86 qemu-kvm\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\t# Use rpm -q <package> to check if it's already installed\n\tPKGS=$(for pkg in @development-tools \\\n\tfile \\\n\tautoconf \\\n\tvim \\\n\tbison \\\n\tflex \\\n\tgenisoimage \\\n\tgperf \\\n\tglibc-devel.i686 \\\n\texpat \\\n\texpat-devel \\\n\tfuse-devel \\\n\tfuse3-devel \\\n\tgmp-devel \\\n\tlibpng-devel \\\n\tperl \\\n\tperl-HTML-Parser \\\n\tlibtool \\\n\tlibjpeg-turbo-devel \\\n\tSDL2_ttf-devel \\\n\tsdl12-compat-devel \\\n\tm4 \\\n\tnasm \\\n\tpo4a \\\n\tsyslinux \\\n\ttexinfo \\\n\tninja-build \\\n\tmeson \\\n\twaf \\\n\tpython3-mako \\\n\tmake \\\n\tgcc \\\n\tgcc-c++ \\\n\topenssl \\\n\tpatch \\\n\tautomake \\\n\tperl-Pod-Html \\\n\tperl-FindBin \\\n\tgperf \\\n\tcurl \\\n\tgettext-devel \\\n\tperl-Pod-Xhtml \\\n\tpkgconf-pkg-config \\\n\tcmake \\\n\tllvm \\\n\tzip \\\n\tunzip \\\n\tlua \\\n\tluajit \\\n\tmake \\\n\tclang \\\n\tdoxygen \\\n\tant \\\n\tprotobuf-compiler \\\n\tzstd \\\n\tlzip ; do rpm -q $pkg > /dev/null || echo $pkg; done)\n\t# If the list of packages is not empty, install missing\n\tCOUNT=$(echo $PKGS | wc -w)\n\tif [ $COUNT -ne 0 ]; then\n\t\t\t\t\techo \"Installing necessary build tools...\"\n\t\t\t\t\tsudo $dnf_install $PKGS\n\tfi\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# *SUSE Linux\n###############################################################################\nsuse()\n{\n\techo \"Detected SUSE Linux\"\n\n\tpackages=(\n\t\t\"gcc\"\n\t\t\"gcc-c++\"\n\t\t\"glibc-devel-32bit\"\n\t\t\"nasm\"\n\t\t\"make\"\n\t\t\"fuse-devel\"\n\t\t\"cmake\"\n\t\t\"openssl\"\n\t\t\"automake\"\n\t\t\"gettext-tools\"\n\t\t\"libtool\"\n\t\t\"po4a\"\n\t\t\"patch\"\n\t\t\"flex\"\n\t\t\"gperf\"\n\t\t\"autoconf\"\n\t\t\"bison\"\n\t\t\"curl\"\n\t\t\"wget\"\n\t\t\"file\"\n\t\t\"libexpat-devel\"\n\t\t\"gmp-devel\"\n\t\t\"libpng16-devel\"\n\t\t\"libjpeg8-devel\"\n\t\t\"perl\"\n\t\t\"perl-HTML-Parser\"\n\t\t\"m4\"\n\t\t\"patch\"\n\t\t\"scons\"\n\t\t\"pkgconf\"\n\t\t\"syslinux-utils\"\n\t\t\"ninja\"\n\t\t\"meson\"\n\t\t\"python-Mako\"\n\t\t\"xdg-utils\"\n\t\t\"zip\"\n\t\t\"unzip\"\n\t\t\"llvm\"\n\t\t\"clang\"\n\t\t\"doxygen\"\n\t\t\"lua54\"\n\t\t\"ant\"\n\t\t\"protobuf\"\n\t)\n\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Will install git ...\"\n\t\tpackages+=(git)\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Will install QEMU...\"\n\t\t\tpackages+=(qemu-x86 qemu-kvm)\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\techo \"Installing necessary build tools...\"\n\n\t# We could install all the packages in a single zypper command with:\n\t#\n\t#        zypper install package1 package2 package3\n\t#\n\t# But there is an issue with this: zypper returns a success code if at\n\t# least one of the packages was correctly installed, but we need it to fail\n\t# if any of the packages is missing.\n\t#\n\t# To confirm that the packages are available, we try to install them one by\n\t# one with --dry-run.\n\t# We still install all the packages in a single zypper command so that the\n\t# user has to confirm only once.\n\tfor p in ${packages[@]}; do\n\t\tif rpm -q \"${p}\" > /dev/null ; then\n\t\t   echo \"${p} is already installed\"\n\t\telse\n\t\t   # Zypper shows a confirmation prompt and the \"y\" answer even with\n\t\t   # --non-interactive and --no-confirm:\n\t\t   #\n\t\t   #   1 new package to install.\n           #   Overall download size: 281.7 KiB. Already cached: 0 B. After the operation, additional 394.6 KiB will be used.\n           #   Continue? [y/n/v/...? shows all options] (y): y\n\t\t   #\n\t\t   # That could make the user think that the package was installed,\n\t\t   # when it was only a dry run.\n\t\t   # To avoid the confusion, we hide the output unless there was an\n\t\t   # error.\n\t\t   if out=\"$(zypper --non-interactive install --no-confirm --dry-run --force-resolution ${p}  2>&1)\"  ; then\n\t\t      echo \"${p} can be installed\"\n\t\t   else\n\t\t   \t  echo \"no\"\n\t\t\t  echo \"\"\n\t\t      echo \"Zypper output:\"\n\t\t\t  echo \"\"\n\t\t\t  echo \"${out}\"\n\t\t\t  echo \"\"\n\t\t      echo \"Could not find how to install '${p}', try running:\"\n\t\t\t  echo \"\"\n\t\t\t  echo \"     zypper install ${p}\"\n\t\t\t  echo \"\"\n\t\t\t  exit 1\n\t\t   fi\n\t\tfi\n\tdone\n\n\tzypper install ${packages[@]}\n\n}\n\n##############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Gentoo Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n##############################################################################\ngentoo()\n{\n\techo \"Detected Gentoo Linux\"\n\tif [ -z \"$(which nasm)\" ]; then\n\t\techo \"Installing nasm...\"\n\t\tsudo emerge dev-lang/nasm\n\tfi\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Installing git...\"\n\t\tsudo emerge dev-vcs/git\n\tfi\n\tif [ -z \"$(which fusermount 2>/dev/null)\" ] && [ -z \"$(which fusermount3 2>/dev/null)\" ]; then\n\t\techo \"Installing fuse...\"\n\t\tsudo emerge sys-fs/fuse\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Please install QEMU and re-run this script\"\n\t\t\techo \"Step1. Add QEMU_SOFTMMU_TARGETS=\\\"x86_64\\\" to /etc/portage/make.conf\"\n\t\t\techo \"Step2. Execute \\\"sudo emerge app-emulation/qemu\\\"\"\n            exit 1\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\tif [ -z \"$(which cmake)\" ]; then\n\t\techo \"Installing cmake...\"\n\t\tsudo emerge dev-util/cmake\n\tfi\n\tif [ -z \"$(ldconfig -p | grep fontconfig)\" ]; then\n\t\tsudo emerge media-libs/fontconfig\n\tfi\n}\n\n##############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Solus\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n##############################################################################\nsolus()\n{\n\techo \"Detected Solus\"\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\tsudo eopkg it qemu\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\techo \"Installing necessary build tools...\"\n\t#if guards are not necessary with eopkg since it does nothing if latest version is already installed\n\tsudo eopkg it fuse-devel \\\n\tgit \\\n\tgcc \\\n\tg++ \\\n\tlibgcc-32bit \\\n\tlibstdc++-32bit \\\n\tnasm \\\n\tmake \\\n\tcmake \\\n\tbinutils-gold \\\n\tglibc-devel \\\n\tpkg-config \\\n\tfuse2-devel \\\n\tlinux-headers \\\n\trsync \\\n\tautomake \\\n\tautoconf \\\n\tm4 \\\n\tlibtool-devel \\\n\tpo4a \\\n\tpatch \\\n\tbison \\\n\tflex \\\n\tgperf \\\n\tlibpng-devel \\\n\tperl-html-parser\n}\n\n######################################################################\n# This function outlines the different options available for bootstrap\n######################################################################\nusage()\n{\n\techo \"------------------------\"\n\techo \"|Redox bootstrap script|\"\n\techo \"------------------------\"\n\techo \"Usage: ./native_bootstrap.sh\"\n\techo \"OPTIONS:\"\n\techo\n\techo \"   -h,--help      Show this prompt\"\n\techo \"   -u [branch]    Update git repo and update rust\"\n\techo \"                  If blank defaults to master\"\n\techo \"   -s             Check the status of the current travis build\"\n\techo \"   -e [emulator]  Install specific emulator, virtualbox or qemu\"\n\techo \"   -p [package    Choose an Ubuntu package manager, apt-fast or\"\n\techo \"       manager]   aptitude\"\n\techo \"   -d             Only install the dependencies, skip boot step\"\n\techo \"   -y             Install non-interactively. Answer \\\"yes\\\" or\"\n\techo \"                  select the default option for rustup and package\"\n\techo \"\t\t\t\t\tmanagers. Only the apt, dnf and pacman\"\n\techo \"                  package managers are supported.\"\n\techo \"EXAMPLES:\"\n\techo\n\techo \"./native_bootstrap.sh -e qemu\"\n\texit\n}\n\n\n#############################################################\n# Looks for and installs a cargo-managed binary or subcommand\n#############################################################\ncargoInstall() {\n\tif [[ \"`cargo +stable install --list`\" != *\"$1 v$2\"* ]]; then\n\t\tcargo +stable install --force --version \"$2\" \"$1\"\n\telse\n\t\techo \"You have $1 version $2 installed already!\"\n\tfi\n}\n\n####################################################################################\n# This function takes care of everything associated to rust, and the version manager\n# That controls it, it can install rustup and uninstall multirust as well as making\n# sure that the correct version of rustc is selected by rustup\n# @params:\t$1 install non-interactively, boolean\n####################################################################################\nrustInstall() {\n\tnoninteractive=$1\n\t# Check to see if multirust is installed, we don't want it messing with rustup\n\t# In the future we can probably remove this but I believe it's good to have for now\n\tif [ -e /usr/local/lib/rustlib/uninstall.sh ] ; then\n\t\techo \"It appears that multirust is installed on your system.\"\n\t\techo \"This tool has been deprecated by the maintainer, and will cause issues.\"\n\t\techo \"This script can remove multirust from your system if you wish.\"\n\t\tprintf \"Uninstall multirust (y/N):\"\n\t\tread multirust\n\t\tif echo \"$multirust\" | grep -iq \"^y\" ;then\n\t\t\tsudo /usr/local/lib/rustlib/uninstall.sh\n\t\telse\n\t\t\techo \"Please manually uninstall multirust and any other versions of rust, then re-run bootstrap.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\t# If rustup is not installed we should offer to install it for them\n\tif [ -z \"$(which rustup)\" ]; then\n        rustup_options=\"--default-toolchain stable\"\n\t\techo \"You do not have rustup installed.\"\n\t\tif [ \"$noninteractive\" = true ]; then\n\t\t   rustup=\"y\"\n\t\t   rustup_options+=\" -y\"\n\t\telse\n\t\t\techo \"We HIGHLY recommend using rustup.\"\n\t\t\techo \"Would you like to install it now?\"\n\t\t\techo \"*WARNING* this involves a 'curl | sh' style command\"\n\t\t\tprintf \"(y/N): \"\n\t\t\tread rustup\n\t\tfi\n\t\tif echo \"$rustup\" | grep -iq \"^y\" ;then\n\t\t\t#install rustup\n\t\t\tcurl https://sh.rustup.rs -sSf | sh -s -- $rustup_options\n\t\t\t# You have to add the rustup variables to the $PATH\n\t\t\techo \"export PATH=\\\"\\$HOME/.cargo/bin:\\$PATH\\\"\" >> ~/.bashrc\n\t\t\t# source the variables so that we can execute rustup commands in the current shell\n\t\t\tsource ~/.cargo/env\n\t\telse\n\t\t\techo \"Rustup will not be installed!\"\n\t\tfi\n\tfi\n\t#\n\tif [ -z \"$(which rustc)\" ]; then\n\t\techo \"Rust is not installed\"\n\t\techo \"Please either run the script again, accepting rustup install\"\n\t\techo \"or install rustc stable manually (not recommended) via:\"\n\t\techo \"\\#curl -sSf https://static.rust-lang.org/rustup.sh | sh -s -- --channel=stable\"\n\t\texit 1\n\telse\n\t\techo \"Your Rust install looks good!\"\n\tfi\n}\n\n####################################################################\n# This function gets the current build status from travis and prints\n# a message to the user\n####################################################################\nstatusCheck() {\n\tfor i in $(echo \"$(curl -sf https://api.travis-ci.org/repositories/redox-os/redox.json)\" | tr \",\" \"\\n\")\n\tdo\n\t\tif echo \"$i\" | grep -iq \"last_build_status\" ;then\n\t\t\tif echo \"$i\" | grep -iq \"0\" ;then\n\t\t\t\techo\n\t\t\t\techo \"********************************************\"\n\t\t\t\techo \"Travis reports that the last build succeeded!\"\n\t\t\t\techo \"Looks like you are good to go!\"\n\t\t\t\techo \"********************************************\"\n\t\t\telif echo \"$i\" | grep -iq \"null\" ;then\n\t\t\t\techo\n\t\t\t\techo \"******************************************************************\"\n\t\t\t\techo \"The Travis build did not finish, this is an error with its config.\"\n\t\t\t\techo \"I cannot reliably determine whether the build is succeeding or not.\"\n\t\t\t\techo \"Consider checking for and maybe opening an issue on gitlab\"\n\t\t\t\techo \"******************************************************************\"\n\t\t\telse\n\t\t\t\techo\n\t\t\t\techo \"**************************************************\"\n\t\t\t\techo \"Travis reports that the last build *FAILED* :(\"\n\t\t\t\techo \"Might want to check out the issues before building\"\n\t\t\t\techo \"**************************************************\"\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\n###########################################################################\n# This function is the main logic for the bootstrap; it clones the git repo\n# then it installs the rust version manager and the latest version of rustc\n###########################################################################\nboot()\n{\n\techo \"Cloning gitlab repo...\"\n\tgit clone https://gitlab.redox-os.org/redox-os/redox.git --origin upstream --recursive\n\techo \"Creating .config with PODMAN_BUILD=0\"\n\techo 'PODMAN_BUILD?=0' > redox/.config\n\techo \"Cleaning up...\"\n\trm native_bootstrap.sh\n\techo\n\techo \"---------------------------------------\"\n\techo \"Well it looks like you are ready to go!\"\n\techo \"---------------------------------------\"\n\tstatusCheck\n\techo\n\techo \"** Be sure to update your path to include Rust - run the following command: **\"\n\techo 'source $HOME/.cargo/env'\n\techo\n\techo \"Run the following commands to build Redox:\"\n\techo \"cd redox\"\n\tMAKE=\"make\"\n\tif [[ \"$(uname)\" == \"FreeBSD\" ]]; then\n    \tMAKE=\"gmake\"\n    \techo \"kldload fuse.ko # This loads the kernel module for FUSE\"\n    fi\n\techo \"$MAKE all\"\n\techo \"$MAKE virtualbox or qemu\"\n\techo\n\techo \"      Good luck!\"\n\n\texit\n}\n\nif [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n\tusage\nelif [ \"$1\" == \"-u\" ]; then\n\tgit pull upstream master\n\tgit submodule update --recursive --init\n\texit\nelif [ \"$1\" == \"-s\" ]; then\n\tstatusCheck\n\texit\nfi\n\nhost_arch=$(uname -m)\nemulator=\"qemu\"\ndefpackman=\"apt-get\"\ndependenciesonly=false\nupdate=false\nnoninteractive=false\n\nwhile getopts \":e:p:udhys\" opt\ndo\n\tcase \"$opt\" in\n\t\te) emulator=\"$OPTARG\";;\n\t\tp) defpackman=\"$OPTARG\";;\n\t\td) dependenciesonly=true;;\n\t\tu) update=true;;\n\t\th) usage;;\n\t\ty) noninteractive=true;;\n\t\ts) statusCheck && exit;;\n\t\t\\?) echo \"I don't know what to do with that option, try -h for help\"; exit 1;;\n\tesac\ndone\n\nbanner\n\nrustInstall \"$noninteractive\"\n\nif [ \"$update\" == \"true\" ]; then\n\tgit pull upstream master\n\tgit submodule update --recursive --init\n\texit\nfi\n\nif [ \"Darwin\" == \"$(uname -s)\" ]; then\n\tosx \"$emulator\"\nelse\n\t# Here we will use package managers to determine which operating system the user is using.\n\n\t# SUSE and derivatives\n\tif hash 2>/dev/null zypper; then\n\t\tsuse \"$emulator\"\n\t# Debian or any derivative of it\n\telif hash 2>/dev/null apt-get; then\n\t\tubuntu \"$emulator\" \"$noninteractive\" \"$defpackman\"\n\t# Fedora\n\telif hash 2>/dev/null dnf; then\n\t\tfedora \"$emulator\" \"$noninteractive\"\n\t# Gentoo\n\telif hash 2>/dev/null emerge; then\n\t\tgentoo \"$emulator\"\n\t# Solus\n\telif hash 2>/dev/null eopkg; then\n\t\tsolus \"$emulator\"\n\t# Arch Linux\n\telif hash 2>/dev/null pacman; then\n\t\tarchLinux \"$emulator\" \"$noninteractive\"\n\t# FreeBSD\n\telif hash 2>/dev/null pkg; then\n\t\tfreebsd \"$emulator\"\n\t# Unsupported platform\n\telse\n    \tprintf \"\\e[31;1mFatal error: \\e[0;31mUnsupported platform, please open an issue\\e[0m\\n\"\n\tfi\nfi\n\ncargoInstall cargo-config 0.1.1\ncargoInstall just 1.16.0\ncargoInstall cbindgen 0.27.0\n\nif [ \"$dependenciesonly\" = false ]; then\n\tboot\nfi\n\necho \"Redox bootstrap complete!\"\n"
        },
        {
          "name": "podman",
          "type": "tree",
          "content": null
        },
        {
          "name": "podman_bootstrap.sh",
          "type": "blob",
          "size": 21.3740234375,
          "content": "# This script setup the Redox build system with Podman\n# It install the Podman dependencies, Rustup, recipes dependencies for cross-compilation\n# and download the build system configuration files\n\n#!/usr/bin/env bash\n\nset -e\n\n##########################################################\n# This function is simply a banner to introduce the script\n##########################################################\nbanner()\n{\n\techo \"|------------------------------------------|\"\n\techo \"|----- Welcome to the redox bootstrap -----|\"\n\techo \"|-------- for building with Podman --------|\"\n\techo \"|------------------------------------------|\"\n}\n\n###################################################################################\n# This function takes care of installing a dependency via package manager of choice\n# for building Redox on BSDs (macOS, FreeBSD, etc.).\n# @params:    $1 package manager\n#             $2 package name\n#             $3 binary name (optional)\n###################################################################################\ninstall_bsd_pkg()\n{\n    PKG_MANAGER=$1\n    PKG_NAME=$2\n    BIN_NAME=$3\n    if [ -z \"$BIN_NAME\" ]; then\n        BIN_NAME=$PKG_NAME\n    fi\n\n    BIN_LOCATION=$(which $BIN_NAME || true)\n    if [ -z \"$BIN_LOCATION\" ]; then\n        echo \"$PKG_MANAGER install $PKG_NAME\"\n        $PKG_MANAGER install \"$PKG_NAME\"\n    else\n        echo \"$BIN_NAME already exists at $BIN_LOCATION, no need to install $PKG_NAME...\"\n    fi\n}\n\ninstall_macports_pkg()\n{\n    install_bsd_pkg \"sudo port\" \"$1\" \"$2\"\n}\n\ninstall_brew_pkg()\n{\n    install_bsd_pkg \"brew\" $@\n}\n\ninstall_brew_cask_pkg()\n{\n    install_bsd_pkg \"brew cask\" $@\n}\n\ninstall_freebsd_pkg()\n{\n    install_bsd_pkg \"sudo pkg\" $@\n}\n\n###############################################################################\n# This function checks which of the supported package managers\n# is available on the macOS host.\n# If a supported package manager is found, it delegates the installing work to\n# the relevant function.\n# Otherwise this function will exit this script with an error.\n###############################################################################\nosx()\n{\n    echo \"Detected macOS!\"\n\n    if [ ! -z \"$(which brew)\" ]; then\n        osx_homebrew $@\n    elif [ ! -z \"$(which port)\" ]; then\n        osx_macports $@\n    else\n        echo \"Please install either Homebrew or MacPorts, if you wish to use this script\"\n        echo \"Re-run this script once you installed one of those package managers\"\n        echo \"Will not install, now exiting...\"\n        exit 1\n    fi\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using MacPorts\n# for building Redox on macOS\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nosx_macports()\n{\n    echo \"MacPorts detected! Now updating...\"\n    sudo port -v selfupdate\n\n    echo \"Installing missing packages...\"\n\n    install_macports_pkg \"git\"\n\tinstall_macports_pkg \"gmake\"\n\tinstall_macports_pkg \"curl\"\n\tinstall_macports_pkg \"osxfuse\"\n\tinstall_macports_pkg \"podman\"\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_macports_pkg \"qemu\" \"qemu-system-x86_64\"\n\telif [ \"$1\" == \"virtualbox\" ]; then\n        install_macports_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using Homebrew\n# for building Redox on macOS\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nosx_homebrew()\n{\n    echo \"Homebrew detected! Now updating...\"\n    brew update\n\n    echo \"Installing missing packages...\"\n\n    install_brew_pkg \"git\"\n\tinstall_brew_pkg \"make\"\n\tinstall_brew_pkg \"curl\"\n\tinstall_brew_pkg \"osxfuse\"\n\tinstall_brew_pkg \"fuse-overlayfs\"\n\tinstall_brew_pkg \"slirp4netns\"\n\tinstall_brew_pkg \"podman\"\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_brew_pkg \"qemu\" \"qemu-system-x86_64\"\n    elif [ \"$1\" == \"virtualbox\" ]; then\n        install_brew_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n}\n\n###############################################################################\n# This function takes care of installing all dependencies using pkg\n# for building Redox on FreeBSD\n# @params:    $1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nfreebsd()\n{\n    set -x\n    echo \"FreeBSD detected!\"\n    echo \"Installing missing packages...\"\n\n    install_freebsd_pkg \"git\"\n    install_freebsd_pkg \"gmake\"\n\tinstall_freebsd_pkg \"curl\"\n\tinstall_freebsd_pkg \"fusefs-libs3\"\n    install_freebsd_pkg \"podman\"\n\n\n\tif [ \"$1\" == \"qemu\" ]; then\n        install_freebsd_pkg \"qemu\" \"qemu-system-x86_64\"\n    elif [ \"$1\" == \"virtualbox\" ]; then\n        install_freebsd_pkg \"virtualbox\"\n    else\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n    set +x\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Arch Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\narchLinux()\n{\n\n\techo \"Detected Arch Linux\"\n\tpackages=\"git make curl fuse3 fuse-overlayfs slirp4netns podman\"\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tpackages=\"$packages qemu\"\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tpackages=\"$packages virtualbox\"\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\t# Scripts should not cause a system update in order to just install a couple\n\t#   of packages. If pacman -S --needed is going to fail, let it fail and the\n\t#   user will figure out the issues (without updating if required) and rerun\n\t#   the script.\n\t#echo \"Updating system...\"\n\t#sudo pacman -Syu\n\n\techo \"Installing packages $packages...\"\n\tsudo pacman -S --needed $packages\n\t\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Debian-based Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n# \t\t$2 the package manager to use\n###############################################################################\nubuntu()\n{\n\techo \"Detected Ubuntu/Debian\"\n\techo \"Updating system...\"\n\tsudo \"$2\" update\n\techo \"Installing required packages...\"\n\tsudo \"$2\" install \\\n\t\tpodman curl git make pkg-config fuse3 libfuse3-dev fuse-overlayfs slirp4netns\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Installing QEMU...\"\n\t\t\tsudo \"$2\" install qemu-system-x86 qemu-kvm\n\t\t\tsudo \"$2\" install qemu-efi-arm qemu-system-arm\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\n\t\t\tif grep '^ID=debian$' /etc/os-release > /dev/null; then\n\t\t\t\techo \"Virtualbox is not in the official debian packages\"\n\t\t\t\techo \"To install virtualbox on debian, see https://wiki.debian.org/VirtualBox\"\n\t\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\t\techo \"or run with -e qemu\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\techo \"Installing VirtualBox...\"\n\t\t\t\tsudo \"$2\" install virtualbox\n\t\t\tfi\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Fedora Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nfedora()\n{\n\techo \"Detected Fedora\"\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Installing git...\"\n\t\tsudo dnf install git-all\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Installing QEMU...\"\n\t\t\tsudo dnf install qemu-system-x86 qemu-kvm\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\t\t\n\t# Use rpm -q <package> to check if it's already installed\n\tPKGS=$(for pkg in podman curl make fuse3 fuse-overlayfs slirp4netns; do rpm -q $pkg > /dev/null || echo $pkg; done)\n\t# If the list of packages is not empty, install missing\n\tCOUNT=$(echo $PKGS | wc -w)\n\tif [ $COUNT -ne 0 ]; then\n\t\t\t\t\techo \"Installing necessary build tools...\"\n\t\t\t\t\tsudo dnf install $PKGS\n\tfi\n}\n\n###############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# *SUSE Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n###############################################################################\nsuse()\n{\n\techo \"Detected SUSE Linux\"\n\n\tpackages=(\n\t\t\"git\"\n\t\t\"curl\"\n\t\t\"make\"\n\t\t\"fuse\"\n\t\t\"fuse-overlayfs\"\n\t\t\"slirp4netns\"\n\t\t\"podman\"\n\t)\n\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Will install git ...\"\n\t\tpackages+=(git)\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Will install QEMU...\"\n\t\t\tpackages+=(qemu-x86 qemu-kvm)\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\t\n\techo \"Installing necessary build tools...\"\n\n\t# We could install all the packages in a single zypper command with:\n\t#\n\t#        zypper install package1 package2 package3\n\t# \n\t# But there is an issue with this: zypper returns a success code if at\n\t# least one of the packages was correctly installed, but we need it to fail\n\t# if any of the packages is missing.\n\t#\n\t# To confirm that the packages are available, we try to install them one by\n\t# one with --dry-run.\n\t# We still install all the packages in a single zypper command so that the\n\t# user has to confirm only once.\n\tfor p in ${packages[@]}; do\n\t\tif rpm -q \"${p}\" > /dev/null ; then\n\t\t   echo \"${p} is already installed\"\n\t\telse\n\t\t   # Zypper shows a confirmation prompt and the \"y\" answer even with \n\t\t   # --non-interactive and --no-confirm:\n\t\t   #\n\t\t   #   1 new package to install.\n           #   Overall download size: 281.7 KiB. Already cached: 0 B. After the operation, additional 394.6 KiB will be used.\n           #   Continue? [y/n/v/...? shows all options] (y): y\n\t\t   #\n\t\t   # That could make the user think that the package was installed, \n\t\t   # when it was only a dry run.\n\t\t   # To avoid the confusion, we hide the output unless there was an\n\t\t   # error.\n\t\t   if out=\"$(zypper --non-interactive install --no-confirm --dry-run --force-resolution ${p}  2>&1)\"  ; then\n\t\t      echo \"${p} can be installed\"\n\t\t   else\n\t\t   \t  echo \"no\"\n\t\t\t  echo \"\"\n\t\t      echo \"Zypper output:\"\n\t\t\t  echo \"\"\n\t\t\t  echo \"${out}\"\n\t\t\t  echo \"\"\n\t\t      echo \"Could not find how to install '${p}', try running:\"\n\t\t\t  echo \"\"\n\t\t\t  echo \"     zypper install ${p}\"\n\t\t\t  echo \"\"\n\t\t\t  exit 1\n\t\t   fi\n\t\tfi\n\tdone\n\n\tzypper install ${packages[@]}\n\n}\n\n##############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Gentoo Linux\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n##############################################################################\ngentoo()\n{\n\techo \"Detected Gentoo Linux\"\n\tif [ -z \"$(which git)\" ]; then\n\t\techo \"Installing git...\"\n\t\tsudo emerge dev-vcs/git\n\tfi\n\tif [ -z \"$(which fusermount 2>/dev/null)\" ] && [ -z \"$(which fusermount3 2>/dev/null)\" ]; then\n\t\techo \"Installing fuse...\"\n\t\tsudo emerge sys-fs/fuse\n\tfi\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\techo \"Please install QEMU and re-run this script\"\n\t\t\techo \"Step1. Add QEMU_SOFTMMU_TARGETS=\\\"x86_64\\\" to /etc/portage/make.conf\"\n\t\t\techo \"Step2. Execute \\\"sudo emerge app-emulation/qemu\\\"\"\n            exit 1\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\tif [ -z \"$(which cmake)\" ]; then\n\t\techo \"Installing cmake...\"\n\t\tsudo emerge dev-util/cmake\n\tfi\n\tif [ -z \"$(which podman)\" ]; then\n\t\techo \"Please install Podman, https://wiki.gentoo.org/wiki/Podman\"\n\t\texit 1\n\tfi\n}\n\n##############################################################################\n# This function takes care of installing all dependencies for building Redox on\n# Solus\n# @params:\t$1 the emulator to install, \"virtualbox\" or \"qemu\"\n##############################################################################\nsolus()\n{\n\techo \"Detected Solus\"\n\n\tif [ \"$1\" == \"qemu\" ]; then\n\t\tif [ -z \"$(which qemu-system-x86_64)\" ]; then\n\t\t\tsudo eopkg it qemu\n\t\telse\n\t\t\techo \"QEMU already installed!\"\n\t\tfi\n\telif [ \"$1\" == \"virtualbox\" ]; then\n\t\tif [ -z \"$(which virtualbox)\" ]; then\n\t\t\techo \"Please install VirtualBox and re-run this script,\"\n\t\t\techo \"or run with -e qemu\"\n\t\t\texit 1\n\t\telse\n\t\t\techo \"VirtualBox already installed!\"\n\t\tfi\n\telse\n\t   echo \"Unknown emulator: $1\"\n\t   exit 1\n\tfi\n\n\techo \"Installing necessary build tools...\"\n\t#if guards are not necessary with eopkg since it does nothing if latest version is already installed\n\tsudo eopkg it fuse-devel git make fuse2-devel rsync\n\tif [ -z \"$(which podman)\" ]; then\n\t\techo \"Please install Podman\"\n\t\texit 1\n\tfi\n}\n\n######################################################################\n# This function outlines the different options available for bootstrap\n######################################################################\nusage()\n{\n\techo \"------------------------\"\n\techo \"|Redox bootstrap script|\"\n\techo \"------------------------\"\n\techo \"Usage: ./podman_bootstrap.sh\"\n\techo \"OPTIONS:\"\n\techo\n\techo \"   -h,--help      Show this prompt\"\n\techo \"   -u [branch]    Update git repo and update rust\"\n\techo \"                  If blank defaults to master\"\n\techo \"   -s             Check the status of the current travis build\"\n\techo \"   -e [emulator]  Install specific emulator, virtualbox or qemu\"\n\techo \"   -p [package    Choose an Ubuntu package manager, apt-fast or\"\n\techo \"       manager]   aptitude\"\n\techo \"   -d             Only install the dependencies, skip boot step\"\n\techo \"EXAMPLES:\"\n\techo\n\techo \"./podman_bootstrap.sh -e qemu\"\n\texit\n}\n\n\n#############################################################\n# Looks for and installs a cargo-managed binary or subcommand\n#############################################################\ncargoInstall() {\n\tif [[ \"`cargo install --list`\" != *\"$1 v$2\"* ]]; then\n\t\tcargo install --force --version \"$2\" \"$1\"\n\telse\n\t\techo \"You have $1 version $2 installed already!\"\n\tfi\n}\n\n\n####################################################################################\n# This function takes care of everything associated to rust, and the version manager\n# That controls it, it can install rustup and uninstall multirust as well as making\n# sure that the correct version of rustc is selected by rustup\n# @params:\t$1 install non-interactively, boolean\n####################################################################################\nrustInstall() {\n\tnoninteractive=$1\n\t# Check to see if multirust is installed, we don't want it messing with rustup\n\t# In the future we can probably remove this but I believe it's good to have for now\n\tif [ -e /usr/local/lib/rustlib/uninstall.sh ] ; then\n\t\techo \"It appears that multirust is installed on your system.\"\n\t\techo \"This tool has been deprecated by the maintainer, and will cause issues.\"\n\t\techo \"This script can remove multirust from your system if you wish.\"\n\t\tprintf \"Uninstall multirust (y/N):\"\n\t\tread multirust\n\t\tif echo \"$multirust\" | grep -iq \"^y\" ;then\n\t\t\tsudo /usr/local/lib/rustlib/uninstall.sh\n\t\telse\n\t\t\techo \"Please manually uninstall multirust and any other versions of rust, then re-run bootstrap.\"\n\t\t\texit 1\n\t\tfi\n\tfi\n\t# If rustup is not installed we should offer to install it for them\n\tif [ -z \"$(which rustup)\" ]; then\n        rustup_options=\"--default-toolchain stable\"\n\t\techo \"You do not have rustup installed.\"\n\t\tif [ \"$noninteractive\" = true ]; then\n\t\t   rustup=\"y\"\n\t\t   rustup_options+=\" -y\"\n\t\telse\n\t\t\techo \"We HIGHLY recommend using rustup.\"\n\t\t\techo \"Would you like to install it now?\"\n\t\t\techo \"*WARNING* this involves a 'curl | sh' style command\"\n\t\t\tprintf \"(y/N): \"\n\t\t\tread rustup\n\t\tfi\n\t\tif echo \"$rustup\" | grep -iq \"^y\" ;then\n\t\t\t#install rustup\n\t\t\tcurl https://sh.rustup.rs -sSf | sh -s -- $rustup_options\n\t\t\t# You have to add the rustup variables to the $PATH\n\t\t\techo \"export PATH=\\\"\\$HOME/.cargo/bin:\\$PATH\\\"\" >> ~/.bashrc\n\t\t\t# source the variables so that we can execute rustup commands in the current shell\n\t\t\tsource ~/.cargo/env\n\t\telse\n\t\t\techo \"Rustup will not be installed!\"\n\t\tfi\n\tfi\n\t#\n\tif [ -z \"$(which rustc)\" ]; then\n\t\techo \"Rust is not installed\"\n\t\techo \"Please either run the script again, accepting rustup install\"\n\t\techo \"or install rustc stable manually (not recommended) via:\"\n\t\techo \"\\#curl -sSf https://static.rust-lang.org/rustup.sh | sh -s -- --channel=stable\"\n\t\texit 1\n\telse\n\t\techo \"Your Rust install looks good!\"\n\tfi\n}\n\n####################################################################\n# This function gets the current build status from travis and prints\n# a message to the user\n####################################################################\nstatusCheck() {\n\tfor i in $(echo \"$(curl -sf https://api.travis-ci.org/repositories/redox-os/redox.json)\" | tr \",\" \"\\n\")\n\tdo\n\t\tif echo \"$i\" | grep -iq \"last_build_status\" ;then\n\t\t\tif echo \"$i\" | grep -iq \"0\" ;then\n\t\t\t\techo\n\t\t\t\techo \"********************************************\"\n\t\t\t\techo \"Travis reports that the last build succeeded!\"\n\t\t\t\techo \"Looks like you are good to go!\"\n\t\t\t\techo \"********************************************\"\n\t\t\telif echo \"$i\" | grep -iq \"null\" ;then\n\t\t\t\techo\n\t\t\t\techo \"******************************************************************\"\n\t\t\t\techo \"The Travis build did not finish, this is an error with its config.\"\n\t\t\t\techo \"I cannot reliably determine whether the build is succeeding or not.\"\n\t\t\t\techo \"Consider checking for and maybe opening an issue on gitlab\"\n\t\t\t\techo \"******************************************************************\"\n\t\t\telse\n\t\t\t\techo\n\t\t\t\techo \"**************************************************\"\n\t\t\t\techo \"Travis reports that the last build *FAILED* :(\"\n\t\t\t\techo \"Might want to check out the issues before building\"\n\t\t\t\techo \"**************************************************\"\n\t\t\tfi\n\t\tfi\n\tdone\n}\n\n###########################################################################\n# This function is the main logic for the bootstrap; it clones the git repo\n# then it installs the dependent packages\n###########################################################################\nboot()\n{\n\techo \"Cloning gitlab repo...\"\n\tgit clone https://gitlab.redox-os.org/redox-os/redox.git --origin upstream --recursive\n\techo \"Creating .config with PODMAN_BUILD=1\"\n\techo 'PODMAN_BUILD?=1' > redox/.config\n\techo \"Cleaning up...\"\n\trm podman_bootstrap.sh\n\techo\n\techo \"---------------------------------------\"\n\techo \"Well it looks like you are ready to go!\"\n\techo \"---------------------------------------\"\n\tstatusCheck\n\techo \"The file redox/.config was created with PODMAN_BUILD=1.\"\n\techo\n\techo \"** Be sure to update your path to include Rust - run the following command: **\"\n\techo 'source $HOME/.cargo/env'\n\techo\n\techo \"Run the following commands to build redox using Podman:\"\n\techo\n\techo \"cd redox\"\n\tMAKE=\"make\"\n\tif [[ \"$(uname)\" == \"FreeBSD\" ]]; then\n    \tMAKE=\"gmake\"\n    \techo \"kldload fuse.ko # This loads the kernel module for FUSE\"\n    fi\n\techo \"$MAKE all\"\n\techo \"$MAKE virtualbox or qemu\"\n\techo\n\techo \"      Good luck!\"\n\n\texit\n}\n\nif [ \"$1\" == \"-h\" ] || [ \"$1\" == \"--help\" ]; then\n\tusage\nelif [ \"$1\" == \"-u\" ]; then\n\tgit pull upstream master\n\tgit submodule update --recursive --init\n\trustup update nightly\n\texit\nelif [ \"$1\" == \"-s\" ]; then\n\tstatusCheck\n\texit\nfi\n\nemulator=\"qemu\"\ndefpackman=\"apt-get\"\ndependenciesonly=false\nupdate=false\nwhile getopts \":e:p:udhs\" opt\ndo\n\tcase \"$opt\" in\n\t\te) emulator=\"$OPTARG\";;\n\t\tp) defpackman=\"$OPTARG\";;\n\t\td) dependenciesonly=true;;\n\t\tu) update=true;;\n\t\th) usage;;\n\t\ts) statusCheck && exit;;\n\t\t\\?) echo \"I don't know what to do with that option, try -h for help\"; exit 1;;\n\tesac\ndone\n\nbanner\n\nrustInstall \"$noninteractive\"\n\nif [ \"$update\" == \"true\" ]; then\n\tgit pull upstream master\n\tgit submodule update --recursive --init\n\texit\nfi\n\nif [ \"Darwin\" == \"$(uname -s)\" ]; then\n\tosx \"$emulator\"\nelse\n\t# Here we will use package managers to determine which operating system the user is using.\n\n\t# SUSE and derivatives\n\tif hash 2>/dev/null zypper; then\n\t\tsuse \"$emulator\"\n\t# Debian or any derivative of it\n\telif hash 2>/dev/null apt-get; then\n\t\tubuntu \"$emulator\" \"$defpackman\"\n\t# Fedora\n\telif hash 2>/dev/null dnf; then\n\t\tfedora \"$emulator\"\n\t# Gentoo\n\telif hash 2>/dev/null emerge; then\n\t\tgentoo \"$emulator\"\n\t# Solus\n\telif hash 2>/dev/null eopkg; then\n\t\tsolus \"$emulator\"\n\t# Arch Linux\n\telif hash 2>/dev/null pacman; then\n\t\tarchLinux \"$emulator\"\n\t# FreeBSD\n\telif hash 2>/dev/null pkg; then\n\t\tfreebsd \"$emulator\"\n\t# Unsupported platform\n\telse\n    \tprintf \"\\e[31;1mFatal error: \\e[0;31mUnsupported platform, please open an issue\\e[0m\\n\"\n\tfi\nfi\n\nif [ \"$dependenciesonly\" = false ]; then\n\tboot\nfi\n\necho \"Redox bootstrap complete!\""
        },
        {
          "name": "redoxfs",
          "type": "commit",
          "content": null
        },
        {
          "name": "relibc",
          "type": "commit",
          "content": null
        },
        {
          "name": "rust",
          "type": "commit",
          "content": null
        },
        {
          "name": "rust-toolchain.toml",
          "type": "blob",
          "size": 0.0673828125,
          "content": "[toolchain]\nchannel = \"nightly-2024-05-11\"\ncomponents = [\"rust-src\"]\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}