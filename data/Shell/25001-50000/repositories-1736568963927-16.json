{
  "metadata": {
    "timestamp": 1736568963927,
    "page": 16,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjE4",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hwdsl2/setup-ipsec-vpn",
      "stars": 25620,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.md",
          "type": "blob",
          "size": 20.3544921875,
          "content": "### Creative Commons Attribution-ShareAlike 3.0 Unported License\nLink to license summary: https://creativecommons.org/licenses/by-sa/3.0/\n\nCopyright (C) 2014-2024 [Lin Song](https://github.com/hwdsl2)   \nBased on [the work of Thomas Sarlandie](https://github.com/sarfata/voodooprivacy) (Copyright 2012)\n\nSee the [aws/](aws/) and [azure/](azure/) subfolders for their respective authors.\n\nThe following four files (only) are licensed under the GPL:   \n[clients.md](docs/clients.md), [clients-zh.md](docs/clients-zh.md), [clients-xauth.md](docs/clients-xauth.md) and [clients-xauth-zh.md](docs/clients-xauth-zh.md)\n\n<p>THE WORK (AS DEFINED BELOW) IS PROVIDED UNDER THE TERMS\nOF THIS CREATIVE COMMONS PUBLIC LICENSE (\"CCPL\" OR\n\"LICENSE\"). THE WORK IS PROTECTED BY COPYRIGHT AND/OR OTHER\nAPPLICABLE LAW. ANY USE OF THE WORK OTHER THAN AS\nAUTHORIZED UNDER THIS LICENSE OR COPYRIGHT LAW IS\nPROHIBITED.</p>\n<p>BY EXERCISING ANY RIGHTS TO THE WORK PROVIDED HERE, YOU\nACCEPT AND AGREE TO BE BOUND BY THE TERMS OF THIS LICENSE.\nTO THE EXTENT THIS LICENSE MAY BE CONSIDERED TO BE A\nCONTRACT, THE LICENSOR GRANTS YOU THE RIGHTS CONTAINED HERE\nIN CONSIDERATION OF YOUR ACCEPTANCE OF SUCH TERMS AND\nCONDITIONS.</p>\n<p><strong>1. Definitions</strong></p>\n<ol type=\"a\">\n<li><strong>\"Adaptation\"</strong> means a work based upon\nthe Work, or upon the Work and other pre-existing works,\nsuch as a translation, adaptation, derivative work,\narrangement of music or other alterations of a literary\nor artistic work, or phonogram or performance and\nincludes cinematographic adaptations or any other form in\nwhich the Work may be recast, transformed, or adapted\nincluding in any form recognizably derived from the\noriginal, except that a work that constitutes a\nCollection will not be considered an Adaptation for the\npurpose of this License. For the avoidance of doubt,\nwhere the Work is a musical work, performance or\nphonogram, the synchronization of the Work in\ntimed-relation with a moving image (\"synching\") will be\nconsidered an Adaptation for the purpose of this\nLicense.</li>\n<li><strong>\"Collection\"</strong> means a collection of\nliterary or artistic works, such as encyclopedias and\nanthologies, or performances, phonograms or broadcasts,\nor other works or subject matter other than works listed\nin Section 1(f) below, which, by reason of the selection\nand arrangement of their contents, constitute\nintellectual creations, in which the Work is included in\nits entirety in unmodified form along with one or more\nother contributions, each constituting separate and\nindependent works in themselves, which together are\nassembled into a collective whole. A work that\nconstitutes a Collection will not be considered an\nAdaptation (as defined below) for the purposes of this\nLicense.</li>\n<li><strong>\"Creative Commons Compatible\nLicense\"</strong> means a license that is listed at\nhttps://creativecommons.org/compatiblelicenses that has\nbeen approved by Creative Commons as being essentially\nequivalent to this License, including, at a minimum,\nbecause that license: (i) contains terms that have the\nsame purpose, meaning and effect as the License Elements\nof this License; and, (ii) explicitly permits the\nrelicensing of adaptations of works made available under\nthat license under this License or a Creative Commons\njurisdiction license with the same License Elements as\nthis License.</li>\n<li><strong>\"Distribute\"</strong> means to make available\nto the public the original and copies of the Work or\nAdaptation, as appropriate, through sale or other\ntransfer of ownership.</li>\n<li><strong>\"License Elements\"</strong> means the\nfollowing high-level license attributes as selected by\nLicensor and indicated in the title of this License:\nAttribution, ShareAlike.</li>\n<li><strong>\"Licensor\"</strong> means the individual,\nindividuals, entity or entities that offer(s) the Work\nunder the terms of this License.</li>\n<li><strong>\"Original Author\"</strong> means, in the case\nof a literary or artistic work, the individual,\nindividuals, entity or entities who created the Work or\nif no individual or entity can be identified, the\npublisher; and in addition (i) in the case of a\nperformance the actors, singers, musicians, dancers, and\nother persons who act, sing, deliver, declaim, play in,\ninterpret or otherwise perform literary or artistic works\nor expressions of folklore; (ii) in the case of a\nphonogram the producer being the person or legal entity\nwho first fixes the sounds of a performance or other\nsounds; and, (iii) in the case of broadcasts, the\norganization that transmits the broadcast.</li>\n<li><strong>\"Work\"</strong> means the literary and/or\nartistic work offered under the terms of this License\nincluding without limitation any production in the\nliterary, scientific and artistic domain, whatever may be\nthe mode or form of its expression including digital\nform, such as a book, pamphlet and other writing; a\nlecture, address, sermon or other work of the same\nnature; a dramatic or dramatico-musical work; a\nchoreographic work or entertainment in dumb show; a\nmusical composition with or without words; a\ncinematographic work to which are assimilated works\nexpressed by a process analogous to cinematography; a\nwork of drawing, painting, architecture, sculpture,\nengraving or lithography; a photographic work to which\nare assimilated works expressed by a process analogous to\nphotography; a work of applied art; an illustration, map,\nplan, sketch or three-dimensional work relative to\ngeography, topography, architecture or science; a\nperformance; a broadcast; a phonogram; a compilation of\ndata to the extent it is protected as a copyrightable\nwork; or a work performed by a variety or circus\nperformer to the extent it is not otherwise considered a\nliterary or artistic work.</li>\n<li><strong>\"You\"</strong> means an individual or entity\nexercising rights under this License who has not\npreviously violated the terms of this License with\nrespect to the Work, or who has received express\npermission from the Licensor to exercise rights under\nthis License despite a previous violation.</li>\n<li><strong>\"Publicly Perform\"</strong> means to perform\npublic recitations of the Work and to communicate to the\npublic those public recitations, by any means or process,\nincluding by wire or wireless means or public digital\nperformances; to make available to the public Works in\nsuch a way that members of the public may access these\nWorks from a place and at a place individually chosen by\nthem; to perform the Work to the public by any means or\nprocess and the communication to the public of the\nperformances of the Work, including by public digital\nperformance; to broadcast and rebroadcast the Work by any\nmeans including signs, sounds or images.</li>\n<li><strong>\"Reproduce\"</strong> means to make copies of\nthe Work by any means including without limitation by\nsound or visual recordings and the right of fixation and\nreproducing fixations of the Work, including storage of a\nprotected performance or phonogram in digital form or\nother electronic medium.</li>\n</ol>\n<p><strong>2. Fair Dealing Rights.</strong> Nothing in this\nLicense is intended to reduce, limit, or restrict any uses\nfree from copyright or rights arising from limitations or\nexceptions that are provided for in connection with the\ncopyright protection under copyright law or other\napplicable laws.</p>\n<p><strong>3. License Grant.</strong> Subject to the terms\nand conditions of this License, Licensor hereby grants You\na worldwide, royalty-free, non-exclusive, perpetual (for\nthe duration of the applicable copyright) license to\nexercise the rights in the Work as stated below:</p>\n<ol type=\"a\">\n<li>to Reproduce the Work, to incorporate the Work into\none or more Collections, and to Reproduce the Work as\nincorporated in the Collections;</li>\n<li>to create and Reproduce Adaptations provided that any\nsuch Adaptation, including any translation in any medium,\ntakes reasonable steps to clearly label, demarcate or\notherwise identify that changes were made to the original\nWork. For example, a translation could be marked \"The\noriginal work was translated from English to Spanish,\" or\na modification could indicate \"The original work has been\nmodified.\";</li>\n<li>to Distribute and Publicly Perform the Work including\nas incorporated in Collections; and,</li>\n<li>to Distribute and Publicly Perform Adaptations.</li>\n<li>\n<p>For the avoidance of doubt:</p>\n<ol type=\"i\">\n<li><strong>Non-waivable Compulsory License\nSchemes</strong>. In those jurisdictions in which the\nright to collect royalties through any statutory or\ncompulsory licensing scheme cannot be waived, the\nLicensor reserves the exclusive right to collect such\nroyalties for any exercise by You of the rights\ngranted under this License;</li>\n<li><strong>Waivable Compulsory License\nSchemes</strong>. In those jurisdictions in which the\nright to collect royalties through any statutory or\ncompulsory licensing scheme can be waived, the\nLicensor waives the exclusive right to collect such\nroyalties for any exercise by You of the rights\ngranted under this License; and,</li>\n<li><strong>Voluntary License Schemes</strong>. The\nLicensor waives the right to collect royalties,\nwhether individually or, in the event that the\nLicensor is a member of a collecting society that\nadministers voluntary licensing schemes, via that\nsociety, from any exercise by You of the rights\ngranted under this License.</li>\n</ol>\n</li>\n</ol>\n<p>The above rights may be exercised in all media and\nformats whether now known or hereafter devised. The above\nrights include the right to make such modifications as are\ntechnically necessary to exercise the rights in other media\nand formats. Subject to Section 8(f), all rights not\nexpressly granted by Licensor are hereby reserved.</p>\n<p><strong>4. Restrictions.</strong> The license granted in\nSection 3 above is expressly made subject to and limited by\nthe following restrictions:</p>\n<ol type=\"a\">\n<li>You may Distribute or Publicly Perform the Work only\nunder the terms of this License. You must include a copy\nof, or the Uniform Resource Identifier (URI) for, this\nLicense with every copy of the Work You Distribute or\nPublicly Perform. You may not offer or impose any terms\non the Work that restrict the terms of this License or\nthe ability of the recipient of the Work to exercise the\nrights granted to that recipient under the terms of the\nLicense. You may not sublicense the Work. You must keep\nintact all notices that refer to this License and to the\ndisclaimer of warranties with every copy of the Work You\nDistribute or Publicly Perform. When You Distribute or\nPublicly Perform the Work, You may not impose any\neffective technological measures on the Work that\nrestrict the ability of a recipient of the Work from You\nto exercise the rights granted to that recipient under\nthe terms of the License. This Section 4(a) applies to\nthe Work as incorporated in a Collection, but this does\nnot require the Collection apart from the Work itself to\nbe made subject to the terms of this License. If You\ncreate a Collection, upon notice from any Licensor You\nmust, to the extent practicable, remove from the\nCollection any credit as required by Section 4(c), as\nrequested. If You create an Adaptation, upon notice from\nany Licensor You must, to the extent practicable, remove\nfrom the Adaptation any credit as required by Section\n4(c), as requested.</li>\n<li>You may Distribute or Publicly Perform an Adaptation\nonly under the terms of: (i) this License; (ii) a later\nversion of this License with the same License Elements as\nthis License; (iii) a Creative Commons jurisdiction\nlicense (either this or a later license version) that\ncontains the same License Elements as this License (e.g.,\nAttribution-ShareAlike 3.0 US)); (iv) a Creative Commons\nCompatible License. If you license the Adaptation under\none of the licenses mentioned in (iv), you must comply\nwith the terms of that license. If you license the\nAdaptation under the terms of any of the licenses\nmentioned in (i), (ii) or (iii) (the \"Applicable\nLicense\"), you must comply with the terms of the\nApplicable License generally and the following\nprovisions: (I) You must include a copy of, or the URI\nfor, the Applicable License with every copy of each\nAdaptation You Distribute or Publicly Perform; (II) You\nmay not offer or impose any terms on the Adaptation that\nrestrict the terms of the Applicable License or the\nability of the recipient of the Adaptation to exercise\nthe rights granted to that recipient under the terms of\nthe Applicable License; (III) You must keep intact all\nnotices that refer to the Applicable License and to the\ndisclaimer of warranties with every copy of the Work as\nincluded in the Adaptation You Distribute or Publicly\nPerform; (IV) when You Distribute or Publicly Perform the\nAdaptation, You may not impose any effective\ntechnological measures on the Adaptation that restrict\nthe ability of a recipient of the Adaptation from You to\nexercise the rights granted to that recipient under the\nterms of the Applicable License. This Section 4(b)\napplies to the Adaptation as incorporated in a\nCollection, but this does not require the Collection\napart from the Adaptation itself to be made subject to\nthe terms of the Applicable License.</li>\n<li>If You Distribute, or Publicly Perform the Work or\nany Adaptations or Collections, You must, unless a\nrequest has been made pursuant to Section 4(a), keep\nintact all copyright notices for the Work and provide,\nreasonable to the medium or means You are utilizing: (i)\nthe name of the Original Author (or pseudonym, if\napplicable) if supplied, and/or if the Original Author\nand/or Licensor designate another party or parties (e.g.,\na sponsor institute, publishing entity, journal) for\nattribution (\"Attribution Parties\") in Licensor's\ncopyright notice, terms of service or by other reasonable\nmeans, the name of such party or parties; (ii) the title\nof the Work if supplied; (iii) to the extent reasonably\npracticable, the URI, if any, that Licensor specifies to\nbe associated with the Work, unless such URI does not\nrefer to the copyright notice or licensing information\nfor the Work; and (iv) , consistent with Ssection 3(b),\nin the case of an Adaptation, a credit identifying the\nuse of the Work in the Adaptation (e.g., \"French\ntranslation of the Work by Original Author,\" or\n\"Screenplay based on original Work by Original Author\").\nThe credit required by this Section 4(c) may be\nimplemented in any reasonable manner; provided, however,\nthat in the case of a Adaptation or Collection, at a\nminimum such credit will appear, if a credit for all\ncontributing authors of the Adaptation or Collection\nappears, then as part of these credits and in a manner at\nleast as prominent as the credits for the other\ncontributing authors. For the avoidance of doubt, You may\nonly use the credit required by this Section for the\npurpose of attribution in the manner set out above and,\nby exercising Your rights under this License, You may not\nimplicitly or explicitly assert or imply any connection\nwith, sponsorship or endorsement by the Original Author,\nLicensor and/or Attribution Parties, as appropriate, of\nYou or Your use of the Work, without the separate,\nexpress prior written permission of the Original Author,\nLicensor and/or Attribution Parties.</li>\n<li>Except as otherwise agreed in writing by the Licensor\nor as may be otherwise permitted by applicable law, if\nYou Reproduce, Distribute or Publicly Perform the Work\neither by itself or as part of any Adaptations or\nCollections, You must not distort, mutilate, modify or\ntake other derogatory action in relation to the Work\nwhich would be prejudicial to the Original Author's honor\nor reputation. Licensor agrees that in those\njurisdictions (e.g. Japan), in which any exercise of the\nright granted in Section 3(b) of this License (the right\nto make Adaptations) would be deemed to be a distortion,\nmutilation, modification or other derogatory action\nprejudicial to the Original Author's honor and\nreputation, the Licensor will waive or not assert, as\nappropriate, this Section, to the fullest extent\npermitted by the applicable national law, to enable You\nto reasonably exercise Your right under Section 3(b) of\nthis License (right to make Adaptations) but not\notherwise.</li>\n</ol>\n<p><strong>5. Representations, Warranties and\nDisclaimer</strong></p>\n<p>UNLESS OTHERWISE MUTUALLY AGREED TO BY THE PARTIES IN\nWRITING, LICENSOR OFFERS THE WORK AS-IS AND MAKES NO\nREPRESENTATIONS OR WARRANTIES OF ANY KIND CONCERNING THE\nWORK, EXPRESS, IMPLIED, STATUTORY OR OTHERWISE, INCLUDING,\nWITHOUT LIMITATION, WARRANTIES OF TITLE, MERCHANTIBILITY,\nFITNESS FOR A PARTICULAR PURPOSE, NONINFRINGEMENT, OR THE\nABSENCE OF LATENT OR OTHER DEFECTS, ACCURACY, OR THE\nPRESENCE OF ABSENCE OF ERRORS, WHETHER OR NOT DISCOVERABLE.\nSOME JURISDICTIONS DO NOT ALLOW THE EXCLUSION OF IMPLIED\nWARRANTIES, SO SUCH EXCLUSION MAY NOT APPLY TO YOU.</p>\n<p><strong>6. Limitation on Liability.</strong> EXCEPT TO\nTHE EXTENT REQUIRED BY APPLICABLE LAW, IN NO EVENT WILL\nLICENSOR BE LIABLE TO YOU ON ANY LEGAL THEORY FOR ANY\nSPECIAL, INCIDENTAL, CONSEQUENTIAL, PUNITIVE OR EXEMPLARY\nDAMAGES ARISING OUT OF THIS LICENSE OR THE USE OF THE WORK,\nEVEN IF LICENSOR HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.</p>\n<p><strong>7. Termination</strong></p>\n<ol type=\"a\">\n<li>This License and the rights granted hereunder will\nterminate automatically upon any breach by You of the\nterms of this License. Individuals or entities who have\nreceived Adaptations or Collections from You under this\nLicense, however, will not have their licenses terminated\nprovided such individuals or entities remain in full\ncompliance with those licenses. Sections 1, 2, 5, 6, 7,\nand 8 will survive any termination of this License.</li>\n<li>Subject to the above terms and conditions, the\nlicense granted here is perpetual (for the duration of\nthe applicable copyright in the Work). Notwithstanding\nthe above, Licensor reserves the right to release the\nWork under different license terms or to stop\ndistributing the Work at any time; provided, however that\nany such election will not serve to withdraw this License\n(or any other license that has been, or is required to\nbe, granted under the terms of this License), and this\nLicense will continue in full force and effect unless\nterminated as stated above.</li>\n</ol>\n<p><strong>8. Miscellaneous</strong></p>\n<ol type=\"a\">\n<li>Each time You Distribute or Publicly Perform the Work\nor a Collection, the Licensor offers to the recipient a\nlicense to the Work on the same terms and conditions as\nthe license granted to You under this License.</li>\n<li>Each time You Distribute or Publicly Perform an\nAdaptation, Licensor offers to the recipient a license to\nthe original Work on the same terms and conditions as the\nlicense granted to You under this License.</li>\n<li>If any provision of this License is invalid or\nunenforceable under applicable law, it shall not affect\nthe validity or enforceability of the remainder of the\nterms of this License, and without further action by the\nparties to this agreement, such provision shall be\nreformed to the minimum extent necessary to make such\nprovision valid and enforceable.</li>\n<li>No term or provision of this License shall be deemed\nwaived and no breach consented to unless such waiver or\nconsent shall be in writing and signed by the party to be\ncharged with such waiver or consent.</li>\n<li>This License constitutes the entire agreement between\nthe parties with respect to the Work licensed here. There\nare no understandings, agreements or representations with\nrespect to the Work not specified here. Licensor shall\nnot be bound by any additional provisions that may appear\nin any communication from You. This License may not be\nmodified without the mutual written agreement of the\nLicensor and You.</li>\n<li>The rights granted under, and the subject matter\nreferenced, in this License were drafted utilizing the\nterminology of the Berne Convention for the Protection of\nLiterary and Artistic Works (as amended on September 28,\n1979), the Rome Convention of 1961, the WIPO Copyright\nTreaty of 1996, the WIPO Performances and Phonograms\nTreaty of 1996 and the Universal Copyright Convention (as\nrevised on July 24, 1971). These rights and subject\nmatter take effect in the relevant jurisdiction in which\nthe License terms are sought to be enforced according to\nthe corresponding provisions of the implementation of\nthose treaty provisions in the applicable national law.\nIf the standard suite of rights granted under applicable\ncopyright law includes additional rights not granted\nunder this License, such additional rights are deemed to\nbe included in the License; this License is not intended\nto restrict the license of any rights under applicable\nlaw.</li>\n</ol>\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 22.01171875,
          "content": "[English](README.md) | [中文](README-zh.md)\n\n# IPsec VPN 服务器一键安装脚本\n\n[![Build Status](https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml/badge.svg)](https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml) [![GitHub Stars](docs/images/badges/github-stars.svg)](https://github.com/hwdsl2/setup-ipsec-vpn/stargazers) [![Docker Stars](docs/images/badges/docker-stars.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md) [![Docker Pulls](docs/images/badges/docker-pulls.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md)\n\n使用 Linux 脚本一键快速搭建自己的 IPsec VPN 服务器。支持 IPsec/L2TP, Cisco IPsec 和 IKEv2 协议。\n\nIPsec VPN 可以加密你的网络流量，以防止在通过因特网传送时，你和 VPN 服务器之间的任何人对你的数据的未经授权的访问。在使用不安全的网络时，这是特别有用的，例如在咖啡厅，机场或旅馆房间。\n\n我们将使用 [Libreswan](https://libreswan.org/) 作为 IPsec 服务器，以及 [xl2tpd](https://github.com/xelerance/xl2tpd) 作为 L2TP 提供者。\n\n**[&raquo; :book: Book: 搭建自己的 VPN 服务器分步指南](https://books2read.com/vpnguidezh)** [[中文](https://books2read.com/vpnguidezh) | [English](https://books2read.com/vpnguide?store=amazon) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## 快速开始\n\n首先，在你的 Linux 服务器\\* 上安装 Ubuntu, Debian 或者 CentOS。\n\n使用以下命令快速搭建 IPsec VPN 服务器：\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh && sudo sh vpn.sh\n```\n\n你的 VPN 登录凭证将会被自动随机生成，并在安装完成后显示。\n\n**可选：** 在同一台服务器上安装 [WireGuard](https://github.com/hwdsl2/wireguard-install/blob/master/README-zh.md) 和/或 [OpenVPN](https://github.com/hwdsl2/openvpn-install/blob/master/README-zh.md)。\n\n<details>\n<summary>\n查看脚本的示例输出（终端记录）。\n</summary>\n\n**注：** 此终端记录仅用于演示目的。该记录中的 VPN 凭据 **无效**。\n\n<p align=\"center\"><img src=\"docs/images/script-demo.svg\"></p>\n</details>\n<details>\n<summary>\n如果无法下载，请点这里。\n</summary>\n\n你也可以使用 `curl` 下载：\n\n```bash\ncurl -fsSL https://get.vpnsetup.net -o vpn.sh && sudo sh vpn.sh\n```\n\n或者，你也可以使用这些链接：\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/vpnsetup.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh\n```\n\n如果无法下载，打开 [vpnsetup.sh](vpnsetup.sh)，然后点击右边的 `Raw` 按钮。按快捷键 `Ctrl/Cmd+A` 全选，`Ctrl/Cmd+C` 复制，然后粘贴到你喜欢的编辑器。\n</details>\n\n另外，你也可以使用预构建的 [Docker 镜像](https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md)。如需了解其它选项以及客户端配置，请继续阅读以下部分。\n\n\\* 一个云服务器，虚拟专用服务器 (VPS) 或者专用服务器。\n\n## 功能特性\n\n- 全自动的 IPsec VPN 服务器配置，无需用户输入\n- 支持具有强大和快速加密算法（例如 AES-GCM）的 IKEv2 模式\n- 生成 VPN 配置文件以自动配置 iOS, macOS 和 Android 设备\n- 支持 Windows, macOS, iOS, Android, Chrome OS 和 Linux 客户端\n- 包括辅助脚本以管理 VPN 用户和证书\n\n## 系统要求\n\n一个云服务器，虚拟专用服务器 (VPS) 或者专用服务器，安装以下操作系统之一：\n\n- Ubuntu 24.04, 22.04 或者 20.04\n- Debian 12 或者 11\n- CentOS Stream 9\n- Rocky Linux 或者 AlmaLinux\n- Oracle Linux\n- Amazon Linux 2\n\n<details>\n<summary>\n其他受支持的 Linux 发行版。\n</summary>\n\n- Raspberry Pi OS (Raspbian)\n- Kali Linux\n- Alpine Linux\n- Red Hat Enterprise Linux (RHEL)\n</details>\n\n这也包括公共云服务中的 Linux 虚拟机，例如 [DigitalOcean](https://blog.ls20.com/digitalocean), [Vultr](https://blog.ls20.com/vultr), [Linode](https://blog.ls20.com/linode), [OVH](https://www.ovhcloud.com/en/vps/) 和 [Microsoft Azure](https://azure.microsoft.com)。公共云用户也可以使用[用户数据](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#vpnsetup)部署。\n\n使用以下按钮快速部署：\n\n[![Deploy to DigitalOcean](docs/images/do-install-button.png)](http://dovpn.carlfriess.com) &nbsp;[![Deploy to Linode](docs/images/linode-deploy-button.png)](https://cloud.linode.com/stackscripts/37239) &nbsp;[![Deploy to AWS](docs/images/aws-deploy-button.png)](aws/README-zh.md) &nbsp;[![Deploy to Azure](docs/images/azure-deploy-button.png)](azure/README-zh.md)\n\n[**&raquo; 我想建立并使用自己的 VPN，但是没有可用的服务器**](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#gettingavps)\n\n对于有外部防火墙的服务器（比如 [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)），请为 VPN 打开 UDP 端口 500 和 4500。\n\n另外，你也可以使用预构建的 [Docker 镜像](https://github.com/hwdsl2/docker-ipsec-vpn-server/blob/master/README-zh.md)。高级用户可以在 [Raspberry Pi](https://www.raspberrypi.com) 上安装。[[1]](https://elasticbyte.net/posts/setting-up-a-native-cisco-ipsec-vpn-server-using-a-raspberry-pi/) [[2]](https://www.stewright.me/2018/07/create-a-raspberry-pi-vpn-server-using-l2tpipsec/)\n\n:warning: **不要** 在你的 PC 或者 Mac 上运行这些脚本！它们只能用在服务器上！\n\n## 安装说明\n\n首先，更新你的服务器：运行 `sudo apt-get update && sudo apt-get dist-upgrade` (Ubuntu/Debian) 或者 `sudo yum update` 并重启。这一步是可选的，但推荐。\n\n要安装 VPN，请从以下选项中选择一个：\n\n**选项 1:** 使用脚本随机生成的 VPN 登录凭证（完成后会显示）。\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh && sudo sh vpn.sh\n```\n\n**选项 2:** 编辑脚本并提供你自己的 VPN 登录凭证。\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh\nnano -w vpn.sh\n[替换为你自己的值： YOUR_IPSEC_PSK, YOUR_USERNAME 和 YOUR_PASSWORD]\nsudo sh vpn.sh\n```\n\n**注：** 一个安全的 IPsec PSK 应该至少包含 20 个随机字符。\n\n**选项 3:** 将你自己的 VPN 登录凭证定义为环境变量。\n\n```bash\n# 所有变量值必须用 '单引号' 括起来\n# *不要* 在值中使用这些字符：  \\ \" '\nwget https://get.vpnsetup.net -O vpn.sh\nsudo VPN_IPSEC_PSK='你的IPsec预共享密钥' \\\nVPN_USER='你的VPN用户名' \\\nVPN_PASSWORD='你的VPN密码' \\\nsh vpn.sh\n```\n\n你可以选择在同一台服务器上安装 [WireGuard](https://github.com/hwdsl2/wireguard-install/blob/master/README-zh.md) 和/或 [OpenVPN](https://github.com/hwdsl2/openvpn-install/blob/master/README-zh.md)。如果你的服务器运行 CentOS Stream, Rocky Linux 或 AlmaLinux，请先安装 OpenVPN/WireGuard，然后安装 IPsec VPN。\n\n<details>\n<summary>\n如果无法下载，请点这里。\n</summary>\n\n你也可以使用 `curl` 下载。例如：\n\n```bash\ncurl -fL https://get.vpnsetup.net -o vpn.sh\nsudo sh vpn.sh\n```\n\n或者，你也可以使用这些链接：\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/vpnsetup.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh\n```\n\n如果无法下载，打开 [vpnsetup.sh](vpnsetup.sh)，然后点击右边的 `Raw` 按钮。按快捷键 `Ctrl/Cmd+A` 全选，`Ctrl/Cmd+C` 复制，然后粘贴到你喜欢的编辑器。\n</details>\n<details>\n<summary>\n我需要安装较旧版本的 Libreswan 版本 4。\n</summary>\n\n一般建议使用最新的 [Libreswan](https://libreswan.org/) 版本 5，它是本项目的默认版本。但是，如果你想要安装较旧版本的 Libreswan 版本 4：\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh\nsudo VPN_SWAN_VER=4.15 sh vpn.sh\n```\n\n**注：** 如果 Libreswan 版本 5 已经安装，你可能需要首先[卸载 VPN](docs/uninstall-zh.md)，然后安装 Libreswan 版本 4。或者，你也可以下载[升级脚本](#升级libreswan)，编辑它并指定 `SWAN_VER=4.15`，然后运行脚本。\n</details>\n\n## 自定义 VPN 选项\n\n### 使用其他的 DNS 服务器\n\n在 VPN 已连接时，客户端默认配置为使用 [Google Public DNS](https://developers.google.com/speed/public-dns/)。在安装 VPN 时，你可以为所有的 VPN 模式指定另外的 DNS 服务器。这是可选的。示例如下：\n\n```bash\nsudo VPN_DNS_SRV1=1.1.1.1 VPN_DNS_SRV2=1.0.0.1 sh vpn.sh\n```\n\n使用 `VPN_DNS_SRV1` 指定主 DNS 服务器，使用 `VPN_DNS_SRV2` 指定辅助 DNS 服务器（可选）。\n\n以下是一些流行的公共 DNS 提供商的列表，供你参考。\n\n| 提供商 | 主 DNS | 辅助 DNS | 注释 |\n| ----- | ------ | ------- | ---- |\n| [Google Public DNS](https://developers.google.com/speed/public-dns) | 8.8.8.8 | 8.8.4.4 | 本项目默认 |\n| [Cloudflare](https://1.1.1.1/dns/) | 1.1.1.1 | 1.0.0.1 | 另见：[Cloudflare for families](https://1.1.1.1/family/) |\n| [Quad9](https://www.quad9.net) | 9.9.9.9 | 149.112.112.112 | 阻止恶意域 |\n| [OpenDNS](https://www.opendns.com/home-internet-security/) | 208.67.222.222 | 208.67.220.220 | 阻止网络钓鱼域，可配置。 |\n| [CleanBrowsing](https://cleanbrowsing.org/filters/) | 185.228.168.9 | 185.228.169.9 | [域过滤器](https://cleanbrowsing.org/filters/)可用 |\n| [NextDNS](https://nextdns.io/?from=bg25bwmp) | 按需选择 | 按需选择 | 广告拦截，免费套餐可用。[了解更多](https://nextdns.io/?from=bg25bwmp)。 |\n| [Control D](https://controld.com/free-dns) | 按需选择 | 按需选择 | 广告拦截，可配置。[了解更多](https://controld.com/free-dns)。 |\n\n如果你需要在安装 VPN 之后更改 DNS 服务器，参见[高级用法](docs/advanced-usage-zh.md)。\n\n**注：** 如果服务器上已经配置了 IKEv2，则以上变量对 IKEv2 模式无效。在这种情况下，如需自定义 IKEv2 选项（例如 DNS 服务器），你可以首先 [移除 IKEv2](docs/ikev2-howto-zh.md#移除-ikev2)，然后运行 `sudo ikev2.sh` 重新配置。\n\n### 自定义 IKEv2 选项\n\n在安装 VPN 时，高级用户可以自定义 IKEv2 选项。这是可选的。\n\n<details open>\n<summary>\n选项 1: 在安装 VPN 时跳过 IKEv2，然后使用自定义选项配置 IKEv2。\n</summary>\n\n在安装 VPN 时，你可以跳过 IKEv2，仅安装 IPsec/L2TP 和 IPsec/XAuth (\"Cisco IPsec\") 模式：\n\n```bash\nsudo VPN_SKIP_IKEV2=yes sh vpn.sh\n```\n\n（可选）如需为 VPN 客户端指定另外的 DNS 服务器，你可以定义 `VPN_DNS_SRV1` 和 `VPN_DNS_SRV2`（可选）。有关详细信息，参见[使用其他的 DNS 服务器](#使用其他的-dns-服务器)。\n\n然后运行 IKEv2 辅助脚本以使用自定义选项以交互方式配置 IKEv2:\n\n```bash\nsudo ikev2.sh\n```\n\n你可以自定义以下选项：VPN 服务器的域名，第一个客户端的名称和证书有效期，VPN 客户端的 DNS 服务器以及是否对客户端配置文件进行密码保护。\n\n**注：** 如果服务器上已经配置了 IKEv2，则 `VPN_SKIP_IKEV2` 变量无效。在这种情况下，如需自定义 IKEv2 选项，你可以首先 [移除 IKEv2](docs/ikev2-howto-zh.md#移除-ikev2)，然后运行 `sudo ikev2.sh` 重新配置。\n</details>\n<details>\n<summary>\n选项 2: 使用环境变量自定义 IKEv2 选项。\n</summary>\n\n在安装 VPN 时，你可以指定一个域名作为 IKEv2 服务器地址。这是可选的。该域名必须是一个全称域名(FQDN)。示例如下：\n\n```bash\nsudo VPN_DNS_NAME='vpn.example.com' sh vpn.sh\n```\n\n类似地，你可以指定第一个 IKEv2 客户端的名称。如果未指定，则使用默认值 `vpnclient`。\n\n```bash\nsudo VPN_CLIENT_NAME='your_client_name' sh vpn.sh\n```\n\n在 VPN 已连接时，客户端默认配置为使用 [Google Public DNS](https://developers.google.com/speed/public-dns/)。你可以为所有的 VPN 模式指定另外的 DNS 服务器。示例如下：\n\n```bash\nsudo VPN_DNS_SRV1=1.1.1.1 VPN_DNS_SRV2=1.0.0.1 sh vpn.sh\n```\n\n默认情况下，导入 IKEv2 客户端配置时不需要密码。你可以选择使用随机密码保护客户端配置文件。\n\n```bash\nsudo VPN_PROTECT_CONFIG=yes sh vpn.sh\n```\n</details>\n<details>\n<summary>\n供参考：IKEv1 和 IKEv2 参数列表。\n</summary>\n\n| IKEv1 参数\\* |默认值 |自定义（环境变量）\\*\\* |\n| ------------ | ---- | ----------------- |\n|服务器地址（DNS域名）| - |不能，但你可以使用 DNS 域名进行连接 |\n|服务器地址（公网IP）|自动检测 | VPN_PUBLIC_IP |\n| IPsec 预共享密钥 |自动生成 | VPN_IPSEC_PSK |\n| VPN 用户名 | vpnuser | VPN_USER |\n| VPN 密码 |自动生成 | VPN_PASSWORD |\n|客户端的 DNS 服务器 |Google Public DNS | VPN_DNS_SRV1, VPN_DNS_SRV2 |\n|跳过 IKEv2 安装 |no | VPN_SKIP_IKEV2=yes |\n\n\\* 这些 IKEv1 参数适用于 IPsec/L2TP 和 IPsec/XAuth (\"Cisco IPsec\") 模式。   \n\\*\\* 在运行 vpn(setup).sh 时将这些定义为环境变量。\n\n| IKEv2 参数\\* |默认值 |自定义（环境变量）\\*\\* |自定义（交互式）\\*\\*\\* |\n| ----------- | ---- | ------------------ | ----------------- |\n|服务器地址（DNS域名）| - | VPN_DNS_NAME | ✅ |\n|服务器地址（公网IP）|自动检测 | VPN_PUBLIC_IP | ✅ |\n|第一个客户端的名称 | vpnclient | VPN_CLIENT_NAME | ✅ |\n|客户端的 DNS 服务器 |Google Public DNS | VPN_DNS_SRV1, VPN_DNS_SRV2 | ✅ |\n|保护客户端配置文件 |no | VPN_PROTECT_CONFIG=yes | ✅ |\n|启用/禁用 MOBIKE |如果系统支持则启用 | ❌ | ✅ |\n|客户端证书有效期 | 10 年（120 个月）| VPN_CLIENT_VALIDITY\\*\\*\\*\\* | ✅ |\n| CA 和服务器证书有效期 | 10 年（120 个月）| ❌ | ❌ |\n| CA 证书名称 | IKEv2 VPN CA | ❌ | ❌ |\n|证书密钥长度 | 3072 bits | ❌ | ❌ |\n\n\\* 这些 IKEv2 参数适用于 IKEv2 模式。   \n\\*\\* 在运行 vpn(setup).sh 时，或者在自动模式下配置 IKEv2 时 (`sudo ikev2.sh --auto`) 将这些定义为环境变量。   \n\\*\\*\\* 可以在交互式配置 IKEv2 期间自定义 (`sudo ikev2.sh`)。参见上面的选项 1。   \n\\*\\*\\*\\* 使用 `VPN_CLIENT_VALIDITY` 定义客户端证书的有效期（单位：月）。它必须是 1 到 120 之间的整数。\n\n除了这些参数，高级用户还可以在安装时 [自定义 VPN 子网](docs/advanced-usage-zh.md#自定义-vpn-子网)。\n</details>\n\n## 下一步\n\n*其他语言版本: [English](README.md#next-steps), [中文](README-zh.md#下一步)。*\n\n配置你的计算机或其它设备使用 VPN。请参见：\n\n**[配置 IKEv2 VPN 客户端（推荐）](docs/ikev2-howto-zh.md)**\n\n**[配置 IPsec/L2TP VPN 客户端](docs/clients-zh.md)**\n\n**[配置 IPsec/XAuth (\"Cisco IPsec\") VPN 客户端](docs/clients-xauth-zh.md)**\n\n**阅读 [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC) 以访问 [额外内容](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC)。**\n\n开始使用自己的专属 VPN! :sparkles::tada::rocket::sparkles:\n\n## 重要提示\n\n**Windows 用户** 对于 IPsec/L2TP 模式，在首次连接之前需要 [修改注册表](docs/clients-zh.md#windows-错误-809)，以解决 VPN 服务器或客户端与 NAT（比如家用路由器）的兼容问题。\n\n同一个 VPN 账户可以在你的多个设备上使用。但是由于 IPsec/L2TP 的局限性，如果需要连接在同一个 NAT（比如家用路由器）后面的多个设备，你必须使用 [IKEv2](docs/ikev2-howto-zh.md) 或者 [IPsec/XAuth](docs/clients-xauth-zh.md) 模式。要查看或更改 VPN 用户账户，请参见 [管理 VPN 用户](docs/manage-users-zh.md)。\n\n对于有外部防火墙的服务器（比如 [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)），请为 VPN 打开 UDP 端口 500 和 4500。阿里云用户请参见 [#433](https://github.com/hwdsl2/setup-ipsec-vpn/issues/433)。\n\n在 VPN 已连接时，客户端配置为使用 [Google Public DNS](https://developers.google.com/speed/public-dns/)。如果偏好其它的域名解析服务，请参见 [高级用法](docs/advanced-usage-zh.md)。\n\n使用内核支持有助于提高 IPsec/L2TP 性能。它在所有 [受支持的系统](#系统要求) 上可用。Ubuntu 系统需要安装 `linux-modules-extra-$(uname -r)` 软件包并运行 `service xl2tpd restart`。\n\n这些脚本在更改现有的配置文件之前会先做备份，使用 `.old-日期-时间` 为文件名后缀。\n\n## 升级Libreswan\n\n使用以下命令更新你的 VPN 服务器上的 [Libreswan](https://libreswan.org)（[更新日志](https://github.com/libreswan/libreswan/blob/main/CHANGES) | [通知列表](https://lists.libreswan.org)）。\n\n```bash\nwget https://get.vpnsetup.net/upg -O vpnup.sh && sudo sh vpnup.sh\n```\n\n<details>\n<summary>\n如果无法下载，请点这里。\n</summary>\n\n你也可以使用 `curl` 下载：\n\n```bash\ncurl -fsSL https://get.vpnsetup.net/upg -o vpnup.sh && sudo sh vpnup.sh\n```\n\n或者，你也可以使用这些链接：\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/extras/vpnupgrade.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras/vpnupgrade.sh\n```\n\n如果无法下载，打开 [vpnupgrade.sh](extras/vpnupgrade.sh)，然后点击右边的 `Raw` 按钮。按快捷键 `Ctrl/Cmd+A` 全选，`Ctrl/Cmd+C` 复制，然后粘贴到你喜欢的编辑器。\n</details>\n\n当前支持的 Libreswan 最新版本是 `5.1`。查看已安装版本：`ipsec --version`。\n\n**注：** `xl2tpd` 可以使用系统的软件包管理器进行更新，例如 Ubuntu/Debian 上的 `apt-get`。\n\n## 管理 VPN 用户\n\n请参见 [管理 VPN 用户](docs/manage-users-zh.md)。\n\n- [使用辅助脚本管理 VPN 用户](docs/manage-users-zh.md#使用辅助脚本管理-vpn-用户)\n- [查看 VPN 用户](docs/manage-users-zh.md#查看-vpn-用户)\n- [查看或更改 IPsec PSK](docs/manage-users-zh.md#查看或更改-ipsec-psk)\n- [手动管理 VPN 用户](docs/manage-users-zh.md#手动管理-vpn-用户)\n\n## 高级用法\n\n请参见 [高级用法](docs/advanced-usage-zh.md)。\n\n- [使用其他的 DNS 服务器](docs/advanced-usage-zh.md#使用其他的-dns-服务器)\n- [域名和更改服务器 IP](docs/advanced-usage-zh.md#域名和更改服务器-ip)\n- [仅限 IKEv2 的 VPN](docs/advanced-usage-zh.md#仅限-ikev2-的-vpn)\n- [VPN 内网 IP 和流量](docs/advanced-usage-zh.md#vpn-内网-ip-和流量)\n- [指定 VPN 服务器的公有 IP](docs/advanced-usage-zh.md#指定-vpn-服务器的公有-ip)\n- [自定义 VPN 子网](docs/advanced-usage-zh.md#自定义-vpn-子网)\n- [转发端口到 VPN 客户端](docs/advanced-usage-zh.md#转发端口到-vpn-客户端)\n- [VPN 分流](docs/advanced-usage-zh.md#vpn-分流)\n- [访问 VPN 服务器的网段](docs/advanced-usage-zh.md#访问-vpn-服务器的网段)\n- [VPN 服务器网段访问 VPN 客户端](docs/advanced-usage-zh.md#vpn-服务器网段访问-vpn-客户端)\n- [更改 IPTables 规则](docs/advanced-usage-zh.md#更改-iptables-规则)\n- [部署 Google BBR 拥塞控制](docs/advanced-usage-zh.md#部署-google-bbr-拥塞控制)\n\n## 卸载 VPN\n\n要卸载 IPsec VPN，运行[辅助脚本](extras/vpnuninstall.sh)：\n\n**警告：** 此辅助脚本将从你的服务器中删除 IPsec VPN。所有的 VPN 配置将被**永久删除**，并且 Libreswan 和 xl2tpd 将被移除。此操作**不可撤销**！\n\n```bash\nwget https://get.vpnsetup.net/unst -O unst.sh && sudo bash unst.sh\n```\n\n<details>\n<summary>\n如果无法下载，请点这里。\n</summary>\n\n你也可以使用 `curl` 下载：\n\n```bash\ncurl -fsSL https://get.vpnsetup.net/unst -o unst.sh && sudo bash unst.sh\n```\n\n或者，你也可以使用这些链接：\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/extras/vpnuninstall.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras/vpnuninstall.sh\n```\n</details>\n\n更多信息请参见 [卸载 VPN](docs/uninstall-zh.md)。\n\n## 问题和反馈\n\n- 如果你有对本项目的建议，请提交一个 [改进建议](https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose)，或者欢迎提交 [Pull request](https://github.com/hwdsl2/setup-ipsec-vpn/pulls)。\n- 如果你发现了一个可重复的程序漏洞，请为 [IPsec VPN](https://github.com/libreswan/libreswan/issues?q=is%3Aissue) 或者 [VPN 脚本](https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose) 提交一个错误报告。\n- 有问题需要提问？请先搜索 [已有的 issues](https://github.com/hwdsl2/setup-ipsec-vpn/issues?q=is%3Aissue) 以及在 [这个 Gist](https://gist.github.com/hwdsl2/9030462#comments) 和 [我的博客](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#disqus_thread) 上已有的留言。\n- VPN 的相关问题可在 [Libreswan](https://lists.libreswan.org/mailman/listinfo/swan) 或 [strongSwan](https://lists.strongswan.org/mailman/listinfo/users) 邮件列表提问，或者参考这些网站：[[1]](https://libreswan.org/wiki/Main_Page) [[2]](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-securing_virtual_private_networks) [[3]](https://wiki.strongswan.org/projects/strongswan/wiki/UserDocumentation) [[4]](https://wiki.gentoo.org/wiki/IPsec_L2TP_VPN_server) [[5]](https://wiki.archlinux.org/index.php/Openswan_L2TP/IPsec_VPN_client_setup)。\n\n## 授权协议\n\n版权所有 (C) 2014-2024 [Lin Song](https://github.com/hwdsl2) [![View my profile on LinkedIn](https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png)](https://www.linkedin.com/in/linsongui)   \n基于 [Thomas Sarlandie 的工作](https://github.com/sarfata/voodooprivacy) (版权所有 2012)\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/3.0/88x31.png)](http://creativecommons.org/licenses/by-sa/3.0/)   \n这个项目是以 [知识共享署名-相同方式共享3.0](http://creativecommons.org/licenses/by-sa/3.0/) 许可协议授权。   \n必须署名： 请包括我的名字在任何衍生产品，并且让我知道你是如何改善它的！\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 22.3876953125,
          "content": "[English](README.md) | [中文](README-zh.md)\n\n# IPsec VPN Server Auto Setup Scripts\n\n[![Build Status](https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml/badge.svg)](https://github.com/hwdsl2/setup-ipsec-vpn/actions/workflows/main.yml) [![GitHub Stars](docs/images/badges/github-stars.svg)](https://github.com/hwdsl2/setup-ipsec-vpn/stargazers) [![Docker Stars](docs/images/badges/docker-stars.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server) [![Docker Pulls](docs/images/badges/docker-pulls.svg)](https://github.com/hwdsl2/docker-ipsec-vpn-server)\n\nSet up your own IPsec VPN server in just a few minutes, with IPsec/L2TP, Cisco IPsec and IKEv2.\n\nAn IPsec VPN encrypts your network traffic, so that nobody between you and the VPN server can eavesdrop on your data as it travels via the Internet. This is especially useful when using unsecured networks, e.g. at coffee shops, airports or hotel rooms.\n\nWe will use [Libreswan](https://libreswan.org/) as the IPsec server, and [xl2tpd](https://github.com/xelerance/xl2tpd) as the L2TP provider.\n\n**[&raquo; :book: Book: Build Your Own VPN Server](https://books2read.com/vpnguide?store=amazon)** [[English](https://books2read.com/vpnguide?store=amazon) | [中文](https://books2read.com/vpnguidezh) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## Quick start\n\nFirst, prepare your Linux server\\* with an install of Ubuntu, Debian or CentOS.\n\nUse this one-liner to set up an IPsec VPN server:\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh && sudo sh vpn.sh\n```\n\nYour VPN login details will be randomly generated, and displayed when finished.\n\n**Optional:** Install [WireGuard](https://github.com/hwdsl2/wireguard-install) and/or [OpenVPN](https://github.com/hwdsl2/openvpn-install) on the same server.\n\n<details>\n<summary>\nSee the script in action (terminal recording).\n</summary>\n\n**Note:** This recording is for demo purposes only. VPN credentials in this recording are **NOT** valid.\n\n<p align=\"center\"><img src=\"docs/images/script-demo.svg\"></p>\n</details>\n<details>\n<summary>\nClick here if you are unable to download.\n</summary>\n\nYou may also use `curl` to download:\n\n```bash\ncurl -fsSL https://get.vpnsetup.net -o vpn.sh && sudo sh vpn.sh\n```\n\nAlternative setup URLs:\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/vpnsetup.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh\n```\n\nIf you are unable to download, open [vpnsetup.sh](vpnsetup.sh), then click the `Raw` button on the right. Press `Ctrl/Cmd+A` to select all, `Ctrl/Cmd+C` to copy, then paste into your favorite editor.\n</details>\n\nA pre-built [Docker image](https://github.com/hwdsl2/docker-ipsec-vpn-server) is also available. For other options and client setup, read the sections below.\n\n\\* A cloud server, virtual private server (VPS) or dedicated server.\n\n## Features\n\n- Fully automated IPsec VPN server setup, no user input needed\n- Supports IKEv2 with strong and fast ciphers (e.g. AES-GCM)\n- Generates VPN profiles to auto-configure iOS, macOS and Android devices\n- Supports Windows, macOS, iOS, Android, Chrome OS and Linux as VPN clients\n- Includes helper scripts to manage VPN users and certificates\n\n## Requirements\n\nA cloud server, virtual private server (VPS) or dedicated server, with an install of:\n\n- Ubuntu 24.04, 22.04 or 20.04\n- Debian 12 or 11\n- CentOS Stream 9\n- Rocky Linux or AlmaLinux\n- Oracle Linux\n- Amazon Linux 2\n\n<details>\n<summary>\nOther supported Linux distributions.\n</summary>\n\n- Raspberry Pi OS (Raspbian)\n- Kali Linux\n- Alpine Linux\n- Red Hat Enterprise Linux (RHEL)\n</details>\n\nThis also includes Linux VMs in public clouds, such as [DigitalOcean](https://blog.ls20.com/digitalocean), [Vultr](https://blog.ls20.com/vultr), [Linode](https://blog.ls20.com/linode), [OVH](https://www.ovhcloud.com/en/vps/) and [Microsoft Azure](https://azure.microsoft.com). Public cloud users can also deploy using [user data](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#vpnsetup).\n\nQuick deploy to:\n\n[![Deploy to DigitalOcean](docs/images/do-install-button.png)](http://dovpn.carlfriess.com) &nbsp;[![Deploy to Linode](docs/images/linode-deploy-button.png)](https://cloud.linode.com/stackscripts/37239) &nbsp;[![Deploy to AWS](docs/images/aws-deploy-button.png)](aws/README.md) &nbsp;[![Deploy to Azure](docs/images/azure-deploy-button.png)](azure/README.md)\n\n[**&raquo; I want to run my own VPN but don't have a server for that**](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#gettingavps)\n\nFor servers with an external firewall (e.g. [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)), open UDP ports 500 and 4500 for the VPN.\n\nA pre-built [Docker image](https://github.com/hwdsl2/docker-ipsec-vpn-server) is also available. Advanced users can install on a [Raspberry Pi](https://www.raspberrypi.com). [[1]](https://elasticbyte.net/posts/setting-up-a-native-cisco-ipsec-vpn-server-using-a-raspberry-pi/) [[2]](https://www.stewright.me/2018/07/create-a-raspberry-pi-vpn-server-using-l2tpipsec/)\n\n:warning: **DO NOT** run these scripts on your PC or Mac! They should only be used on a server!\n\n## Installation\n\nFirst, update your server with `sudo apt-get update && sudo apt-get dist-upgrade` (Ubuntu/Debian) or `sudo yum update` and reboot. This is optional, but recommended.\n\nTo install the VPN, please choose one of the following options:\n\n**Option 1:** Have the script generate random VPN credentials for you (will be displayed when finished).\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh && sudo sh vpn.sh\n```\n\n**Option 2:** Edit the script and provide your own VPN credentials.\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh\nnano -w vpn.sh\n[Replace with your own values: YOUR_IPSEC_PSK, YOUR_USERNAME and YOUR_PASSWORD]\nsudo sh vpn.sh\n```\n\n**Note:** A secure IPsec PSK should consist of at least 20 random characters.\n\n**Option 3:** Define your VPN credentials as environment variables.\n\n```bash\n# All values MUST be placed inside 'single quotes'\n# DO NOT use these special characters within values: \\ \" '\nwget https://get.vpnsetup.net -O vpn.sh\nsudo VPN_IPSEC_PSK='your_ipsec_pre_shared_key' \\\nVPN_USER='your_vpn_username' \\\nVPN_PASSWORD='your_vpn_password' \\\nsh vpn.sh\n```\n\nYou may optionally install [WireGuard](https://github.com/hwdsl2/wireguard-install) and/or [OpenVPN](https://github.com/hwdsl2/openvpn-install) on the same server. If your server runs CentOS Stream, Rocky Linux or AlmaLinux, first install OpenVPN/WireGuard, then install the IPsec VPN.\n\n<details>\n<summary>\nClick here if you are unable to download.\n</summary>\n\nYou may also use `curl` to download. For example:\n\n```bash\ncurl -fL https://get.vpnsetup.net -o vpn.sh\nsudo sh vpn.sh\n```\n\nAlternative setup URLs:\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/vpnsetup.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/vpnsetup.sh\n```\n\nIf you are unable to download, open [vpnsetup.sh](vpnsetup.sh), then click the `Raw` button on the right. Press `Ctrl/Cmd+A` to select all, `Ctrl/Cmd+C` to copy, then paste into your favorite editor.\n</details>\n<details>\n<summary>\nI want to install the older Libreswan version 4.\n</summary>\n\nIt is generally recommended to use the latest [Libreswan](https://libreswan.org/) version 5, which is the default version in this project. However, if you want to install the older Libreswan version 4:\n\n```bash\nwget https://get.vpnsetup.net -O vpn.sh\nsudo VPN_SWAN_VER=4.15 sh vpn.sh\n```\n\n**Note:** If Libreswan version 5 is already installed, you may need to first [Uninstall the VPN](docs/uninstall.md) before installing Libreswan version 4. Alternatively, download the [update script](#upgrade-libreswan), edit it to specify `SWAN_VER=4.15`, then run the script.\n</details>\n\n## Customize VPN options\n\n### Use alternative DNS servers\n\nBy default, clients are set to use [Google Public DNS](https://developers.google.com/speed/public-dns/) when the VPN is active. When installing the VPN, you may optionally specify custom DNS server(s) for all VPN modes. Example:\n\n```bash\nsudo VPN_DNS_SRV1=1.1.1.1 VPN_DNS_SRV2=1.0.0.1 sh vpn.sh\n```\n\nUse `VPN_DNS_SRV1` to specify the primary DNS server, and `VPN_DNS_SRV2` to specify the secondary DNS server (optional).\n\nBelow is a list of some popular public DNS providers for your reference.\n\n| Provider | Primary DNS | Secondary DNS | Notes |\n| -------- | ----------- | ------------- | ----- |\n| [Google Public DNS](https://developers.google.com/speed/public-dns) | 8.8.8.8 | 8.8.4.4 | Default in this project |\n| [Cloudflare](https://1.1.1.1/dns/) | 1.1.1.1 | 1.0.0.1 | See also: [Cloudflare for families](https://1.1.1.1/family/) |\n| [Quad9](https://www.quad9.net) | 9.9.9.9 | 149.112.112.112 | Blocks malicious domains |\n| [OpenDNS](https://www.opendns.com/home-internet-security/) | 208.67.222.222 | 208.67.220.220 | Blocks phishing domains, configurable. |\n| [CleanBrowsing](https://cleanbrowsing.org/filters/) | 185.228.168.9 | 185.228.169.9 | [Domain filters](https://cleanbrowsing.org/filters/) available |\n| [NextDNS](https://nextdns.io/?from=bg25bwmp) | Varies | Varies | Ad blocking, free tier available. [Learn more](https://nextdns.io/?from=bg25bwmp). |\n| [Control D](https://controld.com/free-dns) | Varies | Varies | Ad blocking, configurable. [Learn more](https://controld.com/free-dns). |\n\nIf you need to change DNS servers after VPN setup, see [Advanced usage](docs/advanced-usage.md).\n\n**Note:** If IKEv2 is already set up on the server, the variables above have no effect for IKEv2 mode. In that case, to customize IKEv2 options such as DNS servers, you can first [remove IKEv2](docs/ikev2-howto.md#remove-ikev2), then set it up again using `sudo ikev2.sh`.\n\n### Customize IKEv2 options\n\nWhen installing the VPN, advanced users can optionally customize IKEv2 options.\n\n<details open>\n<summary>\nOption 1: Skip IKEv2 during VPN setup, then set up IKEv2 using custom options.\n</summary>\n\nWhen installing the VPN, you can skip IKEv2 and only install the IPsec/L2TP and IPsec/XAuth (\"Cisco IPsec\") modes:\n\n```bash\nsudo VPN_SKIP_IKEV2=yes sh vpn.sh\n```\n\n(Optional) If you want to specify custom DNS server(s) for VPN clients, define `VPN_DNS_SRV1` and optionally `VPN_DNS_SRV2`. See [Use alternative DNS servers](#use-alternative-dns-servers) for details.\n\nAfter that, run the IKEv2 helper script to set up IKEv2 interactively using custom options:\n\n```bash\nsudo ikev2.sh\n```\n\nYou can customize the following options: VPN server's DNS name, name and validity period of the first client, DNS server for VPN clients and whether to password protect client config files.\n\n**Note:** The `VPN_SKIP_IKEV2` variable has no effect if IKEv2 is already set up on the server. In that case, to customize IKEv2 options, you can first [remove IKEv2](docs/ikev2-howto.md#remove-ikev2), then set it up again using `sudo ikev2.sh`.\n</details>\n<details>\n<summary>\nOption 2: Customize IKEv2 options using environment variables.\n</summary>\n\nWhen installing the VPN, you can optionally specify a DNS name for the IKEv2 server address. The DNS name must be a fully qualified domain name (FQDN). Example:\n\n```bash\nsudo VPN_DNS_NAME='vpn.example.com' sh vpn.sh\n```\n\nSimilarly, you may specify a name for the first IKEv2 client. The default is `vpnclient` if not specified.\n\n```bash\nsudo VPN_CLIENT_NAME='your_client_name' sh vpn.sh\n```\n\nBy default, clients are set to use [Google Public DNS](https://developers.google.com/speed/public-dns/) when the VPN is active. You may specify custom DNS server(s) for all VPN modes. Example:\n\n```bash\nsudo VPN_DNS_SRV1=1.1.1.1 VPN_DNS_SRV2=1.0.0.1 sh vpn.sh\n```\n\nBy default, no password is required when importing IKEv2 client configuration. You can choose to protect client config files using a random password.\n\n```bash\nsudo VPN_PROTECT_CONFIG=yes sh vpn.sh\n```\n</details>\n<details>\n<summary>\nFor reference: List of IKEv1 and IKEv2 parameters.\n</summary>\n\n| IKEv1 parameter\\*           | Default value         | Customize (env variable)\\*\\*             |\n| --------------------------- | --------------------- | ---------------------------------------- |\n| Server address (DNS name)   | -                     | No, but you can connect using a DNS name |\n| Server address (public IP)  | Auto detect           | VPN_PUBLIC_IP                            |\n| IPsec pre-shared key        | Auto generate         | VPN_IPSEC_PSK                            |\n| VPN username                | vpnuser               | VPN_USER                                 |\n| VPN password                | Auto generate         | VPN_PASSWORD                             |\n| DNS servers for clients     | Google Public DNS     | VPN_DNS_SRV1, VPN_DNS_SRV2               |\n| Skip IKEv2 setup            | no                    | VPN_SKIP_IKEV2=yes                       |\n\n\\* These IKEv1 parameters are for IPsec/L2TP and IPsec/XAuth (\"Cisco IPsec\") modes.   \n\\*\\* Define these as environment variables when running vpn(setup).sh.\n\n| IKEv2 parameter\\*           | Default value         | Customize (env variable)\\*\\* | Customize (interactive)\\*\\*\\* |\n| --------------------------- | --------------------- | ---------------------------- | ----------------------------- |\n| Server address (DNS name)   | -                     | VPN_DNS_NAME                 | ✅                            |\n| Server address (public IP)  | Auto detect           | VPN_PUBLIC_IP                | ✅                            |\n| Name of first client        | vpnclient             | VPN_CLIENT_NAME              | ✅                            |\n| DNS servers for clients     | Google Public DNS     | VPN_DNS_SRV1, VPN_DNS_SRV2   | ✅                            |\n| Protect client config files | no                    | VPN_PROTECT_CONFIG=yes       | ✅                            |\n| Enable/Disable MOBIKE       | Enable if supported   | ❌                           | ✅                            |\n| Client cert validity        | 10 years (120 months) | VPN_CLIENT_VALIDITY\\*\\*\\*\\*  | ✅                            |\n| CA & server cert validity   | 10 years (120 months) | ❌                           | ❌                            |\n| CA certificate name         | IKEv2 VPN CA          | ❌                           | ❌                            |\n| Certificate key size        | 3072 bits             | ❌                           | ❌                            |\n\n\\* These IKEv2 parameters are for IKEv2 mode.   \n\\*\\* Define these as environment variables when running vpn(setup).sh, or when setting up IKEv2 in auto mode (`sudo ikev2.sh --auto`).   \n\\*\\*\\* Can be customized during interactive IKEv2 setup (`sudo ikev2.sh`). Refer to option 1 above.   \n\\*\\*\\*\\* Use `VPN_CLIENT_VALIDITY` to specify the client cert validity period in months. Must be an integer between 1 and 120.\n\nIn addition to these parameters, advanced users can also [customize VPN subnets](docs/advanced-usage.md#customize-vpn-subnets) during VPN setup.\n</details>\n\n## Next steps\n\n*Read this in other languages: [English](README.md#next-steps), [中文](README-zh.md#下一步).*\n\nGet your computer or device to use the VPN. Please refer to:\n\n**[Configure IKEv2 VPN Clients (recommended)](docs/ikev2-howto.md)**\n\n**[Configure IPsec/L2TP VPN Clients](docs/clients.md)**\n\n**[Configure IPsec/XAuth (\"Cisco IPsec\") VPN Clients](docs/clients-xauth.md)**\n\n**Read [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J) to access [extra content](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J).**\n\nEnjoy your very own VPN! :sparkles::tada::rocket::sparkles:\n\n## Important notes\n\n**Windows users**: For IPsec/L2TP mode, a [one-time registry change](docs/clients.md#windows-error-809) is required if the VPN server or client is behind NAT (e.g. home router).\n\nThe same VPN account can be used by your multiple devices. However, due to an IPsec/L2TP limitation, if you wish to connect multiple devices from behind the same NAT (e.g. home router), you must use [IKEv2](docs/ikev2-howto.md) or [IPsec/XAuth](docs/clients-xauth.md) mode. To view or update VPN user accounts, see [Manage VPN users](docs/manage-users.md).\n\nFor servers with an external firewall (e.g. [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/vpc/docs/firewalls)), open UDP ports 500 and 4500 for the VPN. Aliyun users, see [#433](https://github.com/hwdsl2/setup-ipsec-vpn/issues/433).\n\nClients are set to use [Google Public DNS](https://developers.google.com/speed/public-dns/) when the VPN is active. If another DNS provider is preferred, see [Advanced usage](docs/advanced-usage.md).\n\nUsing kernel support could improve IPsec/L2TP performance. It is available on [all supported OS](#requirements). Ubuntu users should install the `linux-modules-extra-$(uname -r)` package and run `service xl2tpd restart`.\n\nThe scripts will backup existing config files before making changes, with `.old-date-time` suffix.\n\n## Upgrade Libreswan\n\nUse this one-liner to update [Libreswan](https://libreswan.org) ([changelog](https://github.com/libreswan/libreswan/blob/main/CHANGES) | [announce](https://lists.libreswan.org)) on your VPN server.\n\n```bash\nwget https://get.vpnsetup.net/upg -O vpnup.sh && sudo sh vpnup.sh\n```\n\n<details>\n<summary>\nClick here if you are unable to download.\n</summary>\n\nYou may also use `curl` to download:\n\n```bash\ncurl -fsSL https://get.vpnsetup.net/upg -o vpnup.sh && sudo sh vpnup.sh\n```\n\nAlternative update URLs:\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/extras/vpnupgrade.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras/vpnupgrade.sh\n```\n\nIf you are unable to download, open [vpnupgrade.sh](extras/vpnupgrade.sh), then click the `Raw` button on the right. Press `Ctrl/Cmd+A` to select all, `Ctrl/Cmd+C` to copy, then paste into your favorite editor.\n</details>\n\nThe latest supported Libreswan version is `5.1`. Check installed version: `ipsec --version`.\n\n**Note:** `xl2tpd` can be updated using your system's package manager, such as `apt-get` on Ubuntu/Debian.\n\n## Manage VPN users\n\nSee [Manage VPN users](docs/manage-users.md).\n\n- [Manage VPN users using helper scripts](docs/manage-users.md#manage-vpn-users-using-helper-scripts)\n- [View VPN users](docs/manage-users.md#view-vpn-users)\n- [View or update the IPsec PSK](docs/manage-users.md#view-or-update-the-ipsec-psk)\n- [Manually manage VPN users](docs/manage-users.md#manually-manage-vpn-users)\n\n## Advanced usage\n\nSee [Advanced usage](docs/advanced-usage.md).\n\n- [Use alternative DNS servers](docs/advanced-usage.md#use-alternative-dns-servers)\n- [DNS name and server IP changes](docs/advanced-usage.md#dns-name-and-server-ip-changes)\n- [IKEv2-only VPN](docs/advanced-usage.md#ikev2-only-vpn)\n- [Internal VPN IPs and traffic](docs/advanced-usage.md#internal-vpn-ips-and-traffic)\n- [Specify VPN server's public IP](docs/advanced-usage.md#specify-vpn-servers-public-ip)\n- [Customize VPN subnets](docs/advanced-usage.md#customize-vpn-subnets)\n- [Port forwarding to VPN clients](docs/advanced-usage.md#port-forwarding-to-vpn-clients)\n- [Split tunneling](docs/advanced-usage.md#split-tunneling)\n- [Access VPN server's subnet](docs/advanced-usage.md#access-vpn-servers-subnet)\n- [Access VPN clients from server's subnet](docs/advanced-usage.md#access-vpn-clients-from-servers-subnet)\n- [Modify IPTables rules](docs/advanced-usage.md#modify-iptables-rules)\n- [Deploy Google BBR congestion control](docs/advanced-usage.md#deploy-google-bbr-congestion-control)\n\n## Uninstall the VPN\n\nTo uninstall IPsec VPN, run the [helper script](extras/vpnuninstall.sh):\n\n**Warning:** This helper script will remove IPsec VPN from your server. All VPN configuration will be **permanently deleted**, and Libreswan and xl2tpd will be removed. This **cannot be undone**!\n\n```bash\nwget https://get.vpnsetup.net/unst -O unst.sh && sudo bash unst.sh\n```\n\n<details>\n<summary>\nClick here if you are unable to download.\n</summary>\n\nYou may also use `curl` to download:\n\n```bash\ncurl -fsSL https://get.vpnsetup.net/unst -o unst.sh && sudo bash unst.sh\n```\n\nAlternative script URLs:\n\n```bash\nhttps://github.com/hwdsl2/setup-ipsec-vpn/raw/master/extras/vpnuninstall.sh\nhttps://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras/vpnuninstall.sh\n```\n</details>\n\nFor more information, see [Uninstall the VPN](docs/uninstall.md).\n\n## Feedback & Questions\n\n- Have a suggestion for this project? Open an [Enhancement request](https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose). [Pull requests](https://github.com/hwdsl2/setup-ipsec-vpn/pulls) are also welcome.\n- If you found a reproducible bug, open a bug report for the [IPsec VPN](https://github.com/libreswan/libreswan/issues?q=is%3Aissue) or for the [VPN scripts](https://github.com/hwdsl2/setup-ipsec-vpn/issues/new/choose).\n- Got a question? Please first search [existing issues](https://github.com/hwdsl2/setup-ipsec-vpn/issues?q=is%3Aissue) and comments [in this Gist](https://gist.github.com/hwdsl2/9030462#comments) and [on my blog](https://blog.ls20.com/ipsec-l2tp-vpn-auto-setup-for-ubuntu-12-04-on-amazon-ec2/#disqus_thread).\n- Ask VPN related questions on the [Libreswan](https://lists.libreswan.org/mailman/listinfo/swan) or [strongSwan](https://lists.strongswan.org/mailman/listinfo/users) mailing list, or read these wikis: [[1]](https://libreswan.org/wiki/Main_Page) [[2]](https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/security_guide/sec-securing_virtual_private_networks) [[3]](https://wiki.strongswan.org/projects/strongswan/wiki/UserDocumentation) [[4]](https://wiki.gentoo.org/wiki/IPsec_L2TP_VPN_server) [[5]](https://wiki.archlinux.org/index.php/Openswan_L2TP/IPsec_VPN_client_setup).\n\n## License\n\nCopyright (C) 2014-2024 [Lin Song](https://github.com/hwdsl2) [![View my profile on LinkedIn](https://static.licdn.com/scds/common/u/img/webpromo/btn_viewmy_160x25.png)](https://www.linkedin.com/in/linsongui)   \nBased on [the work of Thomas Sarlandie](https://github.com/sarfata/voodooprivacy) (Copyright 2012)\n\n[![Creative Commons License](https://i.creativecommons.org/l/by-sa/3.0/88x31.png)](http://creativecommons.org/licenses/by-sa/3.0/)   \nThis work is licensed under the [Creative Commons Attribution-ShareAlike 3.0 Unported License](http://creativecommons.org/licenses/by-sa/3.0/)  \nAttribution required: please include my name in any derivative and let me know how you have improved it!\n"
        },
        {
          "name": "aws",
          "type": "tree",
          "content": null
        },
        {
          "name": "azure",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "extras",
          "type": "tree",
          "content": null
        },
        {
          "name": "vpnsetup.sh",
          "type": "blob",
          "size": 10.08984375,
          "content": "#!/bin/sh\n#\n# Script for automatic setup of an IPsec VPN server on Ubuntu, Debian, CentOS/RHEL,\n# Rocky Linux, AlmaLinux, Oracle Linux, Amazon Linux 2 and Alpine Linux\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2021-2024 Lin Song <linsongui@gmail.com>\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK=''\nYOUR_USERNAME=''\nYOUR_PASSWORD=''\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\nexiterr() { echo \"Error: $1\" >&2; exit 1; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n  if [ \"$(id -u)\" != 0 ]; then\n    exiterr \"Script must be run as root. Try 'sudo sh $0'\"\n  fi\n}\n\ncheck_vz() {\n  if [ -f /proc/user_beancounters ]; then\n    exiterr \"OpenVZ VPS is not supported.\"\n  fi\n}\n\ncheck_lxc() {\n  # shellcheck disable=SC2154\n  if [ \"$container\" = \"lxc\" ] && [ ! -e /dev/ppp ]; then\ncat 1>&2 <<'EOF'\nError: /dev/ppp is missing. LXC containers require configuration.\n       See: https://github.com/hwdsl2/setup-ipsec-vpn/issues/1014\nEOF\n  exit 1\n  fi\n}\n\ncheck_os() {\n  rh_file=\"/etc/redhat-release\"\n  if [ -f \"$rh_file\" ]; then\n    os_type=centos\n    if grep -q \"Red Hat\" \"$rh_file\"; then\n      os_type=rhel\n    fi\n    [ -f /etc/oracle-release ] && os_type=ol\n    grep -qi rocky \"$rh_file\" && os_type=rocky\n    grep -qi alma \"$rh_file\" && os_type=alma\n    if grep -q \"release 7\" \"$rh_file\"; then\n      os_ver=7\n    elif grep -q \"release 8\" \"$rh_file\"; then\n      os_ver=8\n      grep -qi stream \"$rh_file\" && os_ver=8s\n    elif grep -q \"release 9\" \"$rh_file\"; then\n      os_ver=9\n      grep -qi stream \"$rh_file\" && os_ver=9s\n    else\n      exiterr \"This script only supports CentOS/RHEL 7-9.\"\n    fi\n    if [ \"$os_type\" = \"centos\" ] \\\n      && { [ \"$os_ver\" = 7 ] || [ \"$os_ver\" = 8 ] || [ \"$os_ver\" = 8s ]; }; then\n      exiterr \"CentOS Linux $os_ver is EOL and not supported.\"\n    fi\n  elif grep -qs \"Amazon Linux release 2 \" /etc/system-release; then\n    os_type=amzn\n    os_ver=2\n  elif grep -qs \"Amazon Linux release 2023\" /etc/system-release; then\n    exiterr \"Amazon Linux 2023 is not supported.\"\n  else\n    os_type=$(lsb_release -si 2>/dev/null)\n    [ -z \"$os_type\" ] && [ -f /etc/os-release ] && os_type=$(. /etc/os-release && printf '%s' \"$ID\")\n    case $os_type in\n      [Uu]buntu)\n        os_type=ubuntu\n        ;;\n      [Dd]ebian|[Kk]ali)\n        os_type=debian\n        ;;\n      [Rr]aspbian)\n        os_type=raspbian\n        ;;\n      [Aa]lpine)\n        os_type=alpine\n        ;;\n      *)\ncat 1>&2 <<'EOF'\nError: This script only supports one of the following OS:\n       Ubuntu, Debian, CentOS/RHEL, Rocky Linux, AlmaLinux,\n       Oracle Linux, Amazon Linux 2 or Alpine Linux\nEOF\n        exit 1\n        ;;\n    esac\n    if [ \"$os_type\" = \"alpine\" ]; then\n      os_ver=$(. /etc/os-release && printf '%s' \"$VERSION_ID\" | cut -d '.' -f 1,2)\n      if [ \"$os_ver\" != \"3.19\" ] && [ \"$os_ver\" != \"3.20\" ]; then\n        exiterr \"This script only supports Alpine Linux 3.19/3.20.\"\n      fi\n    else\n      os_ver=$(sed 's/\\..*//' /etc/debian_version | tr -dc 'A-Za-z0-9')\n      if [ \"$os_ver\" = 8 ] || [ \"$os_ver\" = 9 ] || [ \"$os_ver\" = \"stretchsid\" ] \\\n        || [ \"$os_ver\" = \"bustersid\" ]; then\ncat 1>&2 <<EOF\nError: This script requires Debian >= 10 or Ubuntu >= 20.04.\n       This version of Ubuntu/Debian is too old and not supported.\nEOF\n        exit 1\n      fi\n      if [ \"$os_ver\" = \"trixiesid\" ] && [ -f /etc/os-release ] \\\n        && [ \"$(. /etc/os-release && printf '%s' \"$VERSION_ID\")\" = \"24.10\" ]; then\ncat 1>&2 <<EOF\nError: This script does not support Ubuntu 24.10.\n       You may use e.g. Ubuntu 24.04 LTS instead.\nEOF\n        exit 1\n      fi\n    fi\n  fi\n}\n\ncheck_iface() {\n  def_iface=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n  if [ \"$os_type\" != \"alpine\" ]; then\n    [ -z \"$def_iface\" ] && def_iface=$(ip -4 route list 0/0 2>/dev/null | grep -m 1 -Po '(?<=dev )(\\S+)')\n  fi\n  def_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2>/dev/null)\n  check_wl=0\n  if [ -n \"$def_state\" ] && [ \"$def_state\" != \"down\" ]; then\n    if [ \"$os_type\" = \"ubuntu\" ] || [ \"$os_type\" = \"debian\" ] || [ \"$os_type\" = \"raspbian\" ]; then\n      if ! uname -m | grep -qi -e '^arm' -e '^aarch64'; then\n        check_wl=1\n      fi\n    else\n      check_wl=1\n    fi\n  fi\n  if [ \"$check_wl\" = 1 ]; then\n    case $def_iface in\n      wl*)\n        exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n        ;;\n    esac\n  fi\n}\n\ncheck_creds() {\n  [ -n \"$YOUR_IPSEC_PSK\" ] && VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n  [ -n \"$YOUR_USERNAME\" ] && VPN_USER=\"$YOUR_USERNAME\"\n  [ -n \"$YOUR_PASSWORD\" ] && VPN_PASSWORD=\"$YOUR_PASSWORD\"\n  if [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n    return 0\n  fi\n  if [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n    exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\n  fi\n  if printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n    exiterr \"VPN credentials must not contain non-ASCII characters.\"\n  fi\n  case \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n    *[\\\\\\\"\\']*)\n      exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n      ;;\n  esac\n}\n\ncheck_dns() {\n  if { [ -n \"$VPN_DNS_SRV1\" ] && ! check_ip \"$VPN_DNS_SRV1\"; } \\\n    || { [ -n \"$VPN_DNS_SRV2\" ] && ! check_ip \"$VPN_DNS_SRV2\"; }; then\n    exiterr \"The DNS server specified is invalid.\"\n  fi\n}\n\ncheck_server_dns() {\n  if [ -n \"$VPN_DNS_NAME\" ] && ! check_dns_name \"$VPN_DNS_NAME\"; then\n    exiterr \"Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\"\n  fi\n}\n\ncheck_client_name() {\n  if [ -n \"$VPN_CLIENT_NAME\" ]; then\n    name_len=\"$(printf '%s' \"$VPN_CLIENT_NAME\" | wc -m)\"\n    if [ \"$name_len\" -gt \"64\" ] || printf '%s' \"$VPN_CLIENT_NAME\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n      || case $VPN_CLIENT_NAME in -*) true ;; *) false ;; esac; then\n      exiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n    fi\n  fi\n}\n\nwait_for_apt() {\n  count=0\n  apt_lk=/var/lib/apt/lists/lock\n  pkg_lk=/var/lib/dpkg/lock\n  while fuser \"$apt_lk\" \"$pkg_lk\" >/dev/null 2>&1 \\\n    || lsof \"$apt_lk\" >/dev/null 2>&1 || lsof \"$pkg_lk\" >/dev/null 2>&1; do\n    [ \"$count\" = 0 ] && echo \"## Waiting for apt to be available...\"\n    [ \"$count\" -ge 100 ] && exiterr \"Could not get apt/dpkg lock.\"\n    count=$((count+1))\n    printf '%s' '.'\n    sleep 3\n  done\n}\n\ninstall_pkgs() {\n  if ! command -v wget >/dev/null 2>&1; then\n    if [ \"$os_type\" = \"ubuntu\" ] || [ \"$os_type\" = \"debian\" ] || [ \"$os_type\" = \"raspbian\" ]; then\n      wait_for_apt\n      export DEBIAN_FRONTEND=noninteractive\n      (\n        set -x\n        apt-get -yqq update || apt-get -yqq update\n      ) || exiterr \"'apt-get update' failed.\"\n      (\n        set -x\n        apt-get -yqq install wget >/dev/null || apt-get -yqq install wget >/dev/null\n      ) || exiterr \"'apt-get install wget' failed.\"\n    elif [ \"$os_type\" != \"alpine\" ]; then\n      (\n        set -x\n        yum -y -q install wget >/dev/null || yum -y -q install wget >/dev/null\n      ) || exiterr \"'yum install wget' failed.\"\n    fi\n  fi\n  if [ \"$os_type\" = \"alpine\" ]; then\n    (\n      set -x\n      apk add -U -q bash coreutils grep net-tools sed wget\n    ) || exiterr \"'apk add' failed.\"\n  fi\n}\n\nget_setup_url() {\n  base_url1=\"https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master\"\n  base_url2=\"https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master\"\n  sh_file=\"vpnsetup_ubuntu.sh\"\n  if [ \"$os_type\" = \"centos\" ] || [ \"$os_type\" = \"rhel\" ] || [ \"$os_type\" = \"rocky\" ] \\\n    || [ \"$os_type\" = \"alma\" ] || [ \"$os_type\" = \"ol\" ]; then\n    sh_file=\"vpnsetup_centos.sh\"\n  elif [ \"$os_type\" = \"amzn\" ]; then\n    sh_file=\"vpnsetup_amzn.sh\"\n  elif [ \"$os_type\" = \"alpine\" ]; then\n    sh_file=\"vpnsetup_alpine.sh\"\n  fi\n  setup_url1=\"$base_url1/$sh_file\"\n  setup_url2=\"$base_url2/$sh_file\"\n}\n\nrun_setup() {\n  status=0\n  if tmpdir=$(mktemp --tmpdir -d vpn.XXXXX 2>/dev/null); then\n    if ( set -x; wget -t 3 -T 30 -q -O \"$tmpdir/vpn.sh\" \"$setup_url1\" \\\n      || wget -t 3 -T 30 -q -O \"$tmpdir/vpn.sh\" \"$setup_url2\" \\\n      || curl -m 30 -fsL \"$setup_url1\" -o \"$tmpdir/vpn.sh\" 2>/dev/null ); then\n      VPN_IPSEC_PSK=\"$VPN_IPSEC_PSK\" VPN_USER=\"$VPN_USER\" \\\n      VPN_PASSWORD=\"$VPN_PASSWORD\" \\\n      VPN_PUBLIC_IP=\"$VPN_PUBLIC_IP\" VPN_L2TP_NET=\"$VPN_L2TP_NET\" \\\n      VPN_L2TP_LOCAL=\"$VPN_L2TP_LOCAL\" VPN_L2TP_POOL=\"$VPN_L2TP_POOL\" \\\n      VPN_XAUTH_NET=\"$VPN_XAUTH_NET\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n      VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n      VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" \\\n      VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n      VPN_CLIENT_VALIDITY=\"$VPN_CLIENT_VALIDITY\" \\\n      VPN_SKIP_IKEV2=\"$VPN_SKIP_IKEV2\" VPN_SWAN_VER=\"$VPN_SWAN_VER\" \\\n      /bin/bash \"$tmpdir/vpn.sh\" || status=1\n    else\n      status=1\n      echo \"Error: Could not download VPN setup script.\" >&2\n    fi\n    /bin/rm -f \"$tmpdir/vpn.sh\"\n    /bin/rmdir \"$tmpdir\"\n  else\n    exiterr \"Could not create temporary directory.\"\n  fi\n}\n\nvpnsetup() {\n  check_root\n  check_vz\n  check_lxc\n  check_os\n  check_iface\n  check_creds\n  check_dns\n  check_server_dns\n  check_client_name\n  install_pkgs\n  get_setup_url\n  run_setup\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit \"$status\"\n"
        },
        {
          "name": "vpnsetup_alpine.sh",
          "type": "blob",
          "size": 18.306640625,
          "content": "#!/bin/bash\n#\n# Script for automatic setup of an IPsec VPN server on Alpine Linux\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2021-2024 Lin Song <linsongui@gmail.com>\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK=''\nYOUR_USERNAME=''\nYOUR_PASSWORD=''\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T | tr ':' '_')\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nexiterr2() { exiterr \"'apk add' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2>/dev/null; }\nbigecho() { echo \"## $1\"; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n  if [ \"$(id -u)\" != 0 ]; then\n    exiterr \"Script must be run as root. Try 'sudo bash $0'\"\n  fi\n}\n\ncheck_vz() {\n  if [ -f /proc/user_beancounters ]; then\n    exiterr \"OpenVZ VPS is not supported.\"\n  fi\n}\n\ncheck_os() {\n  os_type=$(lsb_release -si 2>/dev/null)\n  [ -z \"$os_type\" ] && [ -f /etc/os-release ] && os_type=$(. /etc/os-release && printf '%s' \"$ID\")\n  case $os_type in\n    [Aa]lpine)\n      os_type=alpine\n      ;;\n    *)\n      exiterr \"This script only supports Alpine Linux.\"\n      ;;\n  esac\n  os_ver=$(. /etc/os-release && printf '%s' \"$VERSION_ID\" | cut -d '.' -f 1,2)\n  if [ \"$os_ver\" != \"3.19\" ] && [ \"$os_ver\" != \"3.20\" ]; then\n    exiterr \"This script only supports Alpine Linux 3.19/3.20.\"\n  fi\n}\n\ncheck_iface() {\n  def_iface=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n  def_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2>/dev/null)\n  if [ -n \"$def_state\" ] && [ \"$def_state\" != \"down\" ]; then\n    if ! uname -m | grep -qi -e '^arm' -e '^aarch64'; then\n      case $def_iface in\n        wl*)\n          exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n          ;;\n      esac\n    fi\n    NET_IFACE=\"$def_iface\"\n  else\n    eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2>/dev/null)\n    if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n      exiterr \"Could not detect the default network interface.\"\n    fi\n    NET_IFACE=eth0\n  fi\n}\n\ncheck_creds() {\n  [ -n \"$YOUR_IPSEC_PSK\" ] && VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n  [ -n \"$YOUR_USERNAME\" ] && VPN_USER=\"$YOUR_USERNAME\"\n  [ -n \"$YOUR_PASSWORD\" ] && VPN_PASSWORD=\"$YOUR_PASSWORD\"\n  if [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n    bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n    VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 20)\n    VPN_USER=vpnuser\n    VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 16)\n  fi\n  if [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n    exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\n  fi\n  if printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n    exiterr \"VPN credentials must not contain non-ASCII characters.\"\n  fi\n  case \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n    *[\\\\\\\"\\']*)\n      exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n      ;;\n  esac\n}\n\ncheck_dns() {\n  if { [ -n \"$VPN_DNS_SRV1\" ] && ! check_ip \"$VPN_DNS_SRV1\"; } \\\n    || { [ -n \"$VPN_DNS_SRV2\" ] && ! check_ip \"$VPN_DNS_SRV2\"; }; then\n    exiterr \"The DNS server specified is invalid.\"\n  fi\n}\n\ncheck_server_dns() {\n  if [ -n \"$VPN_DNS_NAME\" ] && ! check_dns_name \"$VPN_DNS_NAME\"; then\n    exiterr \"Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\"\n  fi\n}\n\ncheck_client_name() {\n  if [ -n \"$VPN_CLIENT_NAME\" ]; then\n    name_len=\"$(printf '%s' \"$VPN_CLIENT_NAME\" | wc -m)\"\n    if [ \"$name_len\" -gt \"64\" ] || printf '%s' \"$VPN_CLIENT_NAME\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n      || case $VPN_CLIENT_NAME in -*) true ;; *) false ;; esac; then\n      exiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n    fi\n  fi\n}\n\ncheck_subnets() {\n  if [ -s /etc/ipsec.conf ] && grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n    XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n    if ! grep -q \"$L2TP_NET\" /etc/ipsec.conf \\\n      || ! grep -q \"$XAUTH_NET\" /etc/ipsec.conf; then\n      echo \"Error: The custom VPN subnets specified do not match initial install.\" >&2\n      echo \"       See Advanced usage -> Customize VPN subnets for more information.\" >&2\n      exit 1\n    fi\n  fi\n}\n\nstart_setup() {\n  bigecho \"VPN setup in progress... Please be patient.\"\n  mkdir -p /opt/src\n  cd /opt/src || exit 1\n}\n\ninstall_setup_pkgs() {\n  bigecho \"Installing packages required for setup...\"\n  (\n    set -x\n    apk add -U -q bash bind-tools coreutils openssl wget iptables iproute2 sed grep\n  ) || exiterr2\n}\n\nget_default_ip() {\n  def_ip=$(ip -4 route get 1 | sed 's/ uid .*//' | awk '{print $NF;exit}' 2>/dev/null)\n  if check_ip \"$def_ip\" \\\n    && ! printf '%s' \"$def_ip\" | grep -Eq '^(10|127|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168|169\\.254)\\.'; then\n    public_ip=\"$def_ip\"\n  fi\n}\n\ndetect_ip() {\n  public_ip=${VPN_PUBLIC_IP:-''}\n  check_ip \"$public_ip\" || get_default_ip\n  check_ip \"$public_ip\" && return 0\n  bigecho \"Trying to auto discover IP of this server...\"\n  check_ip \"$public_ip\" || public_ip=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ipv4.icanhazip.com)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ip1.dynupdate.no-ip.com)\n  check_ip \"$public_ip\" || exiterr \"Cannot detect this server's public IP. Define it as variable 'VPN_PUBLIC_IP' and re-run this script.\"\n}\n\ninstall_vpn_pkgs() {\n  bigecho \"Installing packages required for the VPN...\"\n  (\n    set -x\n    apk add -U -q libcap-ng libcurl libevent linux-pam musl nspr nss nss-tools \\\n      bison flex gcc make libc-dev bsd-compat-headers linux-pam-dev nss-dev \\\n      libcap-ng-dev libevent-dev curl-dev nspr-dev uuidgen openrc xl2tpd\n  ) || exiterr2\n}\n\ninstall_fail2ban() {\n  bigecho \"Installing Fail2Ban to protect SSH...\"\n  (\n    set -x\n    apk add -U -q fail2ban\n  )\n}\n\nlink_scripts() {\n  cd /opt/src || exit 1\n  /bin/mv -f ikev2setup.sh ikev2.sh\n  /bin/mv -f add_vpn_user.sh addvpnuser.sh\n  /bin/mv -f del_vpn_user.sh delvpnuser.sh\n  echo \"+ ikev2.sh addvpnuser.sh delvpnuser.sh\"\n  for sc in ikev2.sh addvpnuser.sh delvpnuser.sh; do\n    [ -s \"$sc\" ] && chmod +x \"$sc\" && ln -s \"/opt/src/$sc\" /usr/bin 2>/dev/null\n  done\n}\n\nget_helper_scripts() {\n  bigecho \"Downloading helper scripts...\"\n  base1=\"https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras\"\n  base2=\"https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras\"\n  sc1=ikev2setup.sh\n  sc2=add_vpn_user.sh\n  sc3=del_vpn_user.sh\n  cd /opt/src || exit 1\n  /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n  if wget -t 3 -T 30 -q \"$base1/$sc1\" \"$base1/$sc2\" \"$base1/$sc3\"; then\n    link_scripts\n  else\n    /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    if wget -t 3 -T 30 -q \"$base2/$sc1\" \"$base2/$sc2\" \"$base2/$sc3\"; then\n      link_scripts\n    else\n      echo \"Warning: Could not download helper scripts.\" >&2\n      /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    fi\n  fi\n}\n\nget_swan_ver() {\n  SWAN_VER=5.1\n  base_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n  swan_ver_url=\"$base_url/v1-$os_type-$os_ver-swanver\"\n  swan_ver_latest=$(wget -t 2 -T 10 -qO- \"$swan_ver_url\" | head -n 1)\n  [ -z \"$swan_ver_latest\" ] && swan_ver_latest=$(curl -m 10 -fsL \"$swan_ver_url\" 2>/dev/null | head -n 1)\n  if printf '%s' \"$swan_ver_latest\" | grep -Eq '^([3-9]|[1-9][0-9]{1,2})(\\.([0-9]|[1-9][0-9]{1,2})){1,2}$'; then\n    SWAN_VER=\"$swan_ver_latest\"\n  fi\n  if [ -n \"$VPN_SWAN_VER\" ]; then\n    if ! printf '%s\\n%s' \"4.15\" \"$VPN_SWAN_VER\" | sort -C -V \\\n      || ! printf '%s\\n%s' \"$VPN_SWAN_VER\" \"$SWAN_VER\" | sort -C -V; then\ncat 1>&2 <<EOF\nError: Libreswan version '$VPN_SWAN_VER' is not supported.\n       This script can install Libreswan 4.15+ or $SWAN_VER.\nEOF\n      exit 1\n    else\n      SWAN_VER=\"$VPN_SWAN_VER\"\n    fi\n  fi\n}\n\ncheck_libreswan() {\n  check_result=0\n  ipsec_ver=$(/usr/local/sbin/ipsec --version 2>/dev/null)\n  swan_ver_old=$(printf '%s' \"$ipsec_ver\" | sed -e 's/.*Libreswan U\\?//' -e 's/\\( (\\|\\/K\\).*//')\n  ipsec_bin=\"/usr/local/sbin/ipsec\"\n  if [ -n \"$swan_ver_old\" ] && printf '%s' \"$ipsec_ver\" | grep -qi 'libreswan' \\\n    && [ \"$(find \"$ipsec_bin\" -mmin -10080)\" ]; then\n    check_result=1\n    return 0\n  fi\n  get_swan_ver\n  if [ -s \"$ipsec_bin\" ] && [ \"$swan_ver_old\" = \"$SWAN_VER\" ]; then\n    touch \"$ipsec_bin\"\n  fi\n  [ \"$swan_ver_old\" = \"$SWAN_VER\" ] && check_result=1\n}\n\nget_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Downloading Libreswan...\"\n    cd /opt/src || exit 1\n    swan_file=\"libreswan-$SWAN_VER.tar.gz\"\n    swan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\n    swan_url2=\"https://download.libreswan.org/$swan_file\"\n    (\n      set -x\n      wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url2\"\n    ) || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    tar xzf \"$swan_file\" && /bin/rm -f \"$swan_file\"\n  else\n    bigecho \"Libreswan $swan_ver_old is already installed, skipping...\"\n  fi\n}\n\ninstall_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Compiling and installing Libreswan, please wait...\"\n    cd \"libreswan-$SWAN_VER\" || exit 1\ncat > Makefile.inc.local <<'EOF'\nWERROR_CFLAGS=-w -s\nUSE_DNSSEC=false\nUSE_DH2=true\nFINALNSSDIR=/etc/ipsec.d\nNSSDIR=/etc/ipsec.d\nEOF\n    NPROCS=$(grep -c ^processor /proc/cpuinfo)\n    [ -z \"$NPROCS\" ] && NPROCS=1\n    (\n      set -x\n      make \"-j$((NPROCS+1))\" -s base >/dev/null 2>&1 && make -s install-base >/dev/null 2>&1\n    )\n    cd /opt/src || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    if ! /usr/local/sbin/ipsec --version 2>/dev/null | grep -qF \"$SWAN_VER\"; then\n      exiterr \"Libreswan $SWAN_VER failed to build.\"\n    fi\n  fi\n}\n\ncreate_vpn_config() {\n  bigecho \"Creating VPN configuration...\"\n  L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n  L2TP_LOCAL=${VPN_L2TP_LOCAL:-'192.168.42.1'}\n  L2TP_POOL=${VPN_L2TP_POOL:-'192.168.42.10-192.168.42.250'}\n  XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n  XAUTH_POOL=${VPN_XAUTH_POOL:-'192.168.43.10-192.168.43.250'}\n  DNS_SRV1=${VPN_DNS_SRV1:-'8.8.8.8'}\n  DNS_SRV2=${VPN_DNS_SRV2:-'8.8.4.4'}\n  DNS_SRVS=\"\\\"$DNS_SRV1 $DNS_SRV2\\\"\"\n  [ -n \"$VPN_DNS_SRV1\" ] && [ -z \"$VPN_DNS_SRV2\" ] && DNS_SRVS=\"$DNS_SRV1\"\n  # Create IPsec config\n  conf_bk \"/etc/ipsec.conf\"\ncat > /etc/ipsec.conf <<EOF\nversion 2.0\n\nconfig setup\n  ikev1-policy=accept\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$public_ip\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=300\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2;modp2048,aes128-sha2;modp2048,aes256-sha1;modp2048,aes128-sha1;modp2048\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  ikelifetime=24h\n  salifetime=24h\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  cisco-unity=yes\n  also=shared\n\ninclude /etc/ipsec.d/*.conf\nEOF\n  if uname -m | grep -qi '^arm'; then\n    if ! modprobe -q sha512; then\n      sed -i '/phase2alg/s/,aes256-sha2_512//' /etc/ipsec.conf\n    fi\n  fi\n  # Specify IPsec PSK\n  conf_bk \"/etc/ipsec.secrets\"\ncat > /etc/ipsec.secrets <<EOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n  # Create xl2tpd config\n  conf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat > /etc/xl2tpd/xl2tpd.conf <<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n  # Set xl2tpd options\n  conf_bk \"/etc/ppp/options.xl2tpd\"\ncat > /etc/ppp/options.xl2tpd <<EOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n  if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV2\" ]; then\ncat >> /etc/ppp/options.xl2tpd <<EOF\nms-dns $DNS_SRV2\nEOF\n  fi\n  # Create VPN credentials\n  conf_bk \"/etc/ppp/chap-secrets\"\ncat > /etc/ppp/chap-secrets <<EOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n  conf_bk \"/etc/ipsec.d/passwd\"\n  VPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat > /etc/ipsec.d/passwd <<EOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n}\n\nupdate_sysctl() {\n  bigecho \"Updating sysctl settings...\"\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    conf_bk \"/etc/sysctl.conf\"\ncat >> /etc/sysctl.conf <<EOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 16777216\nnet.core.rmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 87380 16777216\nnet.ipv4.tcp_wmem = 4096 87380 16777216\nEOF\n  fi\n}\n\nupdate_iptables() {\n  bigecho \"Updating IPTables rules...\"\n  IPT_FILE=/etc/iptables.rules\n  ipt_flag=0\n  if ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\"; then\n    ipt_flag=1\n  fi\n  ipi='iptables -I INPUT'\n  ipf='iptables -I FORWARD'\n  ipp='iptables -t nat -I POSTROUTING'\n  res='RELATED,ESTABLISHED'\n  if [ \"$ipt_flag\" = 1 ]; then\n    service fail2ban stop >/dev/null 2>&1\n    iptables-save > \"$IPT_FILE.old-$SYS_DT\"\n    $ipi 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n    $ipi 2 -m conntrack --ctstate INVALID -j DROP\n    $ipi 3 -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipi 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n    $ipi 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n    $ipi 6 -p udp --dport 1701 -j DROP\n    $ipf 1 -m conntrack --ctstate INVALID -j DROP\n    $ipf 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 4 -i ppp+ -o ppp+ -j ACCEPT\n    $ipf 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 7 -s \"$XAUTH_NET\" -o ppp+ -j ACCEPT\n    iptables -A FORWARD -j DROP\n    $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n    $ipp -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n    echo \"# Modified by hwdsl2 VPN script\" > \"$IPT_FILE\"\n    iptables-save >> \"$IPT_FILE\"\n  fi\n}\n\nenable_on_boot() {\n  bigecho \"Enabling services on boot...\"\n  mkdir -p /etc/network/if-pre-up.d\ncat > /etc/network/if-pre-up.d/iptablesload <<'EOF'\n#!/bin/sh\niptables-restore < /etc/iptables.rules\nexit 0\nEOF\n  chmod +x /etc/network/if-pre-up.d/iptablesload\n  sed -i '1c\\#!/sbin/openrc-run' /etc/init.d/ipsec\n  for svc in fail2ban ipsec xl2tpd; do\n    rc-update add \"$svc\" default >/dev/null 2>&1\n  done\n}\n\nstart_services() {\n  bigecho \"Starting services...\"\n  sysctl -e -q -p\n  chmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n  mkdir -p /run/pluto\n  service fail2ban restart >/dev/null 2>&1\n  service ipsec restart >/dev/null 2>&1\n  service xl2tpd restart >/dev/null 2>&1\n  mkdir -p /etc/crontabs\n  cron_cmd=\"rc-service -c ipsec zap start\"\n  if ! grep -qs \"$cron_cmd\" /etc/crontabs/root; then\ncat >> /etc/crontabs/root <<EOF\n* * * * * $cron_cmd\n* * * * * sleep 15; $cron_cmd\n* * * * * sleep 30; $cron_cmd\n* * * * * sleep 45; $cron_cmd\nEOF\n    touch /etc/crontabs/cron.update\n  fi\n}\n\nshow_vpn_info() {\ncat <<EOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $public_ip\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nVPN client setup: https://vpnsetup.net/clients\n\n================================================\n\nEOF\n}\n\nset_up_ikev2() {\n  status=0\n  if [ -s /opt/src/ikev2.sh ] && [ ! -f /etc/ipsec.d/ikev2.conf ]; then\n    skip_ikev2=0\n    case $VPN_SKIP_IKEV2 in\n      [yY][eE][sS])\n        skip_ikev2=1\n        ;;\n    esac\n    if [ \"$skip_ikev2\" = 0 ]; then\n      sleep 1\n      VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_PUBLIC_IP=\"$public_ip\" \\\n      VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n      VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n      VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n      VPN_CLIENT_VALIDITY=\"$VPN_CLIENT_VALIDITY\" \\\n      /bin/bash /opt/src/ikev2.sh --auto || status=1\n    fi\n  elif [ -s /opt/src/ikev2.sh ]; then\ncat <<'EOF'\n================================================\n\nIKEv2 is already set up on this server.\n\nNext steps: Configure IKEv2 clients. See:\nhttps://vpnsetup.net/clients\n\nTo manage IKEv2 clients, run: sudo ikev2.sh\n\n================================================\n\nEOF\n  fi\n}\n\nvpnsetup() {\n  check_root\n  check_vz\n  check_os\n  check_iface\n  check_creds\n  check_dns\n  check_server_dns\n  check_client_name\n  check_subnets\n  check_libreswan\n  start_setup\n  install_setup_pkgs\n  detect_ip\n  install_vpn_pkgs\n  install_fail2ban\n  get_helper_scripts\n  get_libreswan\n  install_libreswan\n  create_vpn_config\n  update_sysctl\n  update_iptables\n  enable_on_boot\n  start_services\n  show_vpn_info\n  set_up_ikev2\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit \"$status\"\n"
        },
        {
          "name": "vpnsetup_amzn.sh",
          "type": "blob",
          "size": 18.931640625,
          "content": "#!/bin/bash\n#\n# Script for automatic setup of an IPsec VPN server on Amazon Linux 2\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2020-2024 Lin Song <linsongui@gmail.com>\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK=''\nYOUR_USERNAME=''\nYOUR_PASSWORD=''\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T | tr ':' '_')\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nexiterr2() { exiterr \"'yum install' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2>/dev/null; }\nbigecho() { echo \"## $1\"; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n  if [ \"$(id -u)\" != 0 ]; then\n    exiterr \"Script must be run as root. Try 'sudo bash $0'\"\n  fi\n}\n\ncheck_os() {\n  if ! grep -qs \"Amazon Linux release 2 \" /etc/system-release; then\n    if grep -qs \"Amazon Linux release 2023\" /etc/system-release; then\n      exiterr \"Amazon Linux 2023 is not supported.\"\n    else\n      exiterr \"This script only supports Amazon Linux 2.\"\n    fi\n  fi\n}\n\ncheck_iface() {\n  def_iface=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n  [ -z \"$def_iface\" ] && def_iface=$(ip -4 route list 0/0 2>/dev/null | grep -m 1 -Po '(?<=dev )(\\S+)')\n  def_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2>/dev/null)\n  if [ -n \"$def_state\" ] && [ \"$def_state\" != \"down\" ]; then\n    case $def_iface in\n      wl*)\n        exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n        ;;\n    esac\n    NET_IFACE=\"$def_iface\"\n  else\n    eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2>/dev/null)\n    if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n      exiterr \"Could not detect the default network interface.\"\n    fi\n    NET_IFACE=eth0\n  fi\n}\n\ncheck_creds() {\n  [ -n \"$YOUR_IPSEC_PSK\" ] && VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n  [ -n \"$YOUR_USERNAME\" ] && VPN_USER=\"$YOUR_USERNAME\"\n  [ -n \"$YOUR_PASSWORD\" ] && VPN_PASSWORD=\"$YOUR_PASSWORD\"\n  if [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n    bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n    VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 20)\n    VPN_USER=vpnuser\n    VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 16)\n  fi\n  if [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n    exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\n  fi\n  if printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n    exiterr \"VPN credentials must not contain non-ASCII characters.\"\n  fi\n  case \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n    *[\\\\\\\"\\']*)\n      exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n      ;;\n  esac\n}\n\ncheck_dns() {\n  if { [ -n \"$VPN_DNS_SRV1\" ] && ! check_ip \"$VPN_DNS_SRV1\"; } \\\n    || { [ -n \"$VPN_DNS_SRV2\" ] && ! check_ip \"$VPN_DNS_SRV2\"; }; then\n    exiterr \"The DNS server specified is invalid.\"\n  fi\n}\n\ncheck_server_dns() {\n  if [ -n \"$VPN_DNS_NAME\" ] && ! check_dns_name \"$VPN_DNS_NAME\"; then\n    exiterr \"Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\"\n  fi\n}\n\ncheck_client_name() {\n  if [ -n \"$VPN_CLIENT_NAME\" ]; then\n    name_len=\"$(printf '%s' \"$VPN_CLIENT_NAME\" | wc -m)\"\n    if [ \"$name_len\" -gt \"64\" ] || printf '%s' \"$VPN_CLIENT_NAME\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n      || case $VPN_CLIENT_NAME in -*) true ;; *) false ;; esac; then\n      exiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n    fi\n  fi\n}\n\ncheck_subnets() {\n  if [ -s /etc/ipsec.conf ] && grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n    XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n    if ! grep -q \"$L2TP_NET\" /etc/ipsec.conf \\\n      || ! grep -q \"$XAUTH_NET\" /etc/ipsec.conf; then\n      echo \"Error: The custom VPN subnets specified do not match initial install.\" >&2\n      echo \"       See Advanced usage -> Customize VPN subnets for more information.\" >&2\n      exit 1\n    fi\n  fi\n}\n\nstart_setup() {\n  bigecho \"VPN setup in progress... Please be patient.\"\n  mkdir -p /opt/src\n  cd /opt/src || exit 1\n}\n\ninstall_setup_pkgs() {\n  bigecho \"Installing packages required for setup...\"\n  (\n    set -x\n    yum -y -q install wget bind-utils openssl tar \\\n      iptables iproute gawk grep sed net-tools >/dev/null\n  ) || exiterr2\n}\n\nget_default_ip() {\n  def_ip=$(ip -4 route get 1 | sed 's/ uid .*//' | awk '{print $NF;exit}' 2>/dev/null)\n  if check_ip \"$def_ip\" \\\n    && ! printf '%s' \"$def_ip\" | grep -Eq '^(10|127|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168|169\\.254)\\.'; then\n    public_ip=\"$def_ip\"\n  fi\n}\n\ndetect_ip() {\n  public_ip=${VPN_PUBLIC_IP:-''}\n  check_ip \"$public_ip\" || get_default_ip\n  check_ip \"$public_ip\" && return 0\n  bigecho \"Trying to auto discover IP of this server...\"\n  check_ip \"$public_ip\" || public_ip=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ipv4.icanhazip.com)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ip1.dynupdate.no-ip.com)\n  check_ip \"$public_ip\" || exiterr \"Cannot detect this server's public IP. Define it as variable 'VPN_PUBLIC_IP' and re-run this script.\"\n}\n\nadd_epel_repo() {\n  bigecho \"Adding the EPEL repository...\"\n  (\n    set -x\n    amazon-linux-extras install epel -y >/dev/null\n  ) || exiterr2\n}\n\ninstall_vpn_pkgs_1() {\n  bigecho \"Installing packages required for the VPN...\"\n  (\n    set -x\n    yum -y -q install nss-devel nspr-devel pkgconfig pam-devel \\\n      libcap-ng-devel libselinux-devel curl-devel nss-tools \\\n      flex bison gcc make util-linux ppp \\\n      systemd-devel iptables-services \\\n      libevent-devel fipscheck-devel >/dev/null\n  ) || exiterr2\n}\n\ninstall_vpn_pkgs_2() {\n  (\n    set -x\n    yum --enablerepo=epel -y -q install xl2tpd >/dev/null 2>&1\n  ) || exiterr2\n}\n\ncreate_f2b_config() {\n  F2B_FILE=/etc/fail2ban/jail.local\n  if [ ! -f \"$F2B_FILE\" ]; then\n    bigecho \"Creating basic Fail2Ban rules...\"\ncat > \"$F2B_FILE\" <<'EOF'\n[ssh-iptables]\nenabled = true\nfilter = sshd\nlogpath = /var/log/secure\naction = iptables[name=SSH, port=ssh, protocol=tcp]\nEOF\n  fi\n}\n\ninstall_fail2ban() {\n  bigecho \"Installing Fail2Ban to protect SSH...\"\n  (\n    set -x\n    yum --enablerepo=epel -y -q install fail2ban >/dev/null\n  ) && create_f2b_config\n}\n\nlink_scripts() {\n  cd /opt/src || exit 1\n  /bin/mv -f ikev2setup.sh ikev2.sh\n  /bin/mv -f add_vpn_user.sh addvpnuser.sh\n  /bin/mv -f del_vpn_user.sh delvpnuser.sh\n  echo \"+ ikev2.sh addvpnuser.sh delvpnuser.sh\"\n  for sc in ikev2.sh addvpnuser.sh delvpnuser.sh; do\n    [ -s \"$sc\" ] && chmod +x \"$sc\" && ln -s \"/opt/src/$sc\" /usr/bin 2>/dev/null\n  done\n}\n\nget_helper_scripts() {\n  bigecho \"Downloading helper scripts...\"\n  base1=\"https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras\"\n  base2=\"https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras\"\n  sc1=ikev2setup.sh\n  sc2=add_vpn_user.sh\n  sc3=del_vpn_user.sh\n  cd /opt/src || exit 1\n  /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n  if wget -t 3 -T 30 -q \"$base1/$sc1\" \"$base1/$sc2\" \"$base1/$sc3\"; then\n    link_scripts\n  else\n    /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    if wget -t 3 -T 30 -q \"$base2/$sc1\" \"$base2/$sc2\" \"$base2/$sc3\"; then\n      link_scripts\n    else\n      echo \"Warning: Could not download helper scripts.\" >&2\n      /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    fi\n  fi\n}\n\nget_swan_ver() {\n  SWAN_VER=5.1\n  base_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n  swan_ver_url=\"$base_url/v1-amzn-2-swanver\"\n  swan_ver_latest=$(wget -t 2 -T 10 -qO- \"$swan_ver_url\" | head -n 1)\n  [ -z \"$swan_ver_latest\" ] && swan_ver_latest=$(curl -m 10 -fsL \"$swan_ver_url\" 2>/dev/null | head -n 1)\n  if printf '%s' \"$swan_ver_latest\" | grep -Eq '^([3-9]|[1-9][0-9]{1,2})(\\.([0-9]|[1-9][0-9]{1,2})){1,2}$'; then\n    SWAN_VER=\"$swan_ver_latest\"\n  fi\n  if [ -n \"$VPN_SWAN_VER\" ]; then\n    if ! printf '%s\\n%s' \"4.15\" \"$VPN_SWAN_VER\" | sort -C -V \\\n      || ! printf '%s\\n%s' \"$VPN_SWAN_VER\" \"$SWAN_VER\" | sort -C -V; then\ncat 1>&2 <<EOF\nError: Libreswan version '$VPN_SWAN_VER' is not supported.\n       This script can install Libreswan 4.15+ or $SWAN_VER.\nEOF\n      exit 1\n    else\n      SWAN_VER=\"$VPN_SWAN_VER\"\n    fi\n  fi\n}\n\ncheck_libreswan() {\n  check_result=0\n  ipsec_ver=$(/usr/local/sbin/ipsec --version 2>/dev/null)\n  swan_ver_old=$(printf '%s' \"$ipsec_ver\" | sed -e 's/.*Libreswan U\\?//' -e 's/\\( (\\|\\/K\\).*//')\n  ipsec_bin=\"/usr/local/sbin/ipsec\"\n  if [ -n \"$swan_ver_old\" ] && printf '%s' \"$ipsec_ver\" | grep -qi 'libreswan' \\\n    && [ \"$(find \"$ipsec_bin\" -mmin -10080)\" ]; then\n    check_result=1\n    return 0\n  fi\n  get_swan_ver\n  if [ -s \"$ipsec_bin\" ] && [ \"$swan_ver_old\" = \"$SWAN_VER\" ]; then\n    touch \"$ipsec_bin\"\n  fi\n  [ \"$swan_ver_old\" = \"$SWAN_VER\" ] && check_result=1\n}\n\nget_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Downloading Libreswan...\"\n    cd /opt/src || exit 1\n    swan_file=\"libreswan-$SWAN_VER.tar.gz\"\n    swan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\n    swan_url2=\"https://download.libreswan.org/$swan_file\"\n    (\n      set -x\n      wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url2\"\n    ) || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    tar xzf \"$swan_file\" && /bin/rm -f \"$swan_file\"\n  else\n    bigecho \"Libreswan $swan_ver_old is already installed, skipping...\"\n  fi\n}\n\ninstall_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Compiling and installing Libreswan, please wait...\"\n    cd \"libreswan-$SWAN_VER\" || exit 1\ncat > Makefile.inc.local <<'EOF'\nWERROR_CFLAGS=-w -s\nUSE_DNSSEC=false\nUSE_DH2=true\nUSE_NSS_KDF=false\nUSE_LINUX_AUDIT=false\nUSE_SECCOMP=false\nFINALNSSDIR=/etc/ipsec.d\nNSSDIR=/etc/ipsec.d\nEOF\n    if ! grep -qs IFLA_XFRM_LINK /usr/include/linux/if_link.h; then\n      echo \"USE_XFRM_INTERFACE_IFLA_HEADER=true\" >> Makefile.inc.local\n    fi\n    NPROCS=$(grep -c ^processor /proc/cpuinfo)\n    [ -z \"$NPROCS\" ] && NPROCS=1\n    (\n      set -x\n      make \"-j$((NPROCS+1))\" -s base >/dev/null 2>&1 && make -s install-base >/dev/null 2>&1\n    )\n    cd /opt/src || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    if ! /usr/local/sbin/ipsec --version 2>/dev/null | grep -qF \"$SWAN_VER\"; then\n      exiterr \"Libreswan $SWAN_VER failed to build.\"\n    fi\n  fi\n}\n\ncreate_vpn_config() {\n  bigecho \"Creating VPN configuration...\"\n  L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n  L2TP_LOCAL=${VPN_L2TP_LOCAL:-'192.168.42.1'}\n  L2TP_POOL=${VPN_L2TP_POOL:-'192.168.42.10-192.168.42.250'}\n  XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n  XAUTH_POOL=${VPN_XAUTH_POOL:-'192.168.43.10-192.168.43.250'}\n  DNS_SRV1=${VPN_DNS_SRV1:-'8.8.8.8'}\n  DNS_SRV2=${VPN_DNS_SRV2:-'8.8.4.4'}\n  DNS_SRVS=\"\\\"$DNS_SRV1 $DNS_SRV2\\\"\"\n  [ -n \"$VPN_DNS_SRV1\" ] && [ -z \"$VPN_DNS_SRV2\" ] && DNS_SRVS=\"$DNS_SRV1\"\n  # Create IPsec config\n  conf_bk \"/etc/ipsec.conf\"\ncat > /etc/ipsec.conf <<EOF\nversion 2.0\n\nconfig setup\n  ikev1-policy=accept\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$public_ip\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=300\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2;modp2048,aes128-sha2;modp2048,aes256-sha1;modp2048,aes128-sha1;modp2048\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  ikelifetime=24h\n  salifetime=24h\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  cisco-unity=yes\n  also=shared\n\ninclude /etc/ipsec.d/*.conf\nEOF\n  # Specify IPsec PSK\n  conf_bk \"/etc/ipsec.secrets\"\ncat > /etc/ipsec.secrets <<EOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n  # Create xl2tpd config\n  conf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat > /etc/xl2tpd/xl2tpd.conf <<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n  # Set xl2tpd options\n  conf_bk \"/etc/ppp/options.xl2tpd\"\ncat > /etc/ppp/options.xl2tpd <<EOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n  if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV2\" ]; then\ncat >> /etc/ppp/options.xl2tpd <<EOF\nms-dns $DNS_SRV2\nEOF\n  fi\n  # Create VPN credentials\n  conf_bk \"/etc/ppp/chap-secrets\"\ncat > /etc/ppp/chap-secrets <<EOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n  conf_bk \"/etc/ipsec.d/passwd\"\n  VPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat > /etc/ipsec.d/passwd <<EOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n}\n\nupdate_sysctl() {\n  bigecho \"Updating sysctl settings...\"\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    conf_bk \"/etc/sysctl.conf\"\ncat >> /etc/sysctl.conf <<EOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 16777216\nnet.core.rmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 87380 16777216\nnet.ipv4.tcp_wmem = 4096 87380 16777216\nEOF\n  fi\n}\n\nupdate_iptables() {\n  bigecho \"Updating IPTables rules...\"\n  IPT_FILE=/etc/sysconfig/iptables\n  ipt_flag=0\n  if ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\"; then\n    ipt_flag=1\n  fi\n  ipi='iptables -I INPUT'\n  ipf='iptables -I FORWARD'\n  ipp='iptables -t nat -I POSTROUTING'\n  res='RELATED,ESTABLISHED'\n  if [ \"$ipt_flag\" = 1 ]; then\n    service fail2ban stop >/dev/null 2>&1\n    iptables-save > \"$IPT_FILE.old-$SYS_DT\"\n    $ipi 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n    $ipi 2 -m conntrack --ctstate INVALID -j DROP\n    $ipi 3 -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipi 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n    $ipi 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n    $ipi 6 -p udp --dport 1701 -j DROP\n    $ipf 1 -m conntrack --ctstate INVALID -j DROP\n    $ipf 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 4 -i ppp+ -o ppp+ -j ACCEPT\n    $ipf 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 7 -s \"$XAUTH_NET\" -o ppp+ -j ACCEPT\n    iptables -A FORWARD -j DROP\n    $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n    $ipp -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n    echo \"# Modified by hwdsl2 VPN script\" > \"$IPT_FILE\"\n    iptables-save >> \"$IPT_FILE\"\n  fi\n}\n\nenable_on_boot() {\n  bigecho \"Enabling services on boot...\"\n  systemctl --now mask firewalld 2>/dev/null\n  systemctl enable iptables 2>/dev/null\n  systemctl enable fail2ban 2>/dev/null\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/rc.local; then\n    if [ -f /etc/rc.local ]; then\n      conf_bk \"/etc/rc.local\"\n    else\n      echo '#!/bin/sh' > /etc/rc.local\n    fi\ncat >> /etc/rc.local <<'EOF'\n\n# Added by hwdsl2 VPN script\n(sleep 15\nservice ipsec restart\nservice xl2tpd restart\necho 1 > /proc/sys/net/ipv4/ip_forward)&\nEOF\n  fi\n}\n\nstart_services() {\n  bigecho \"Starting services...\"\n  sysctl -e -q -p\n  chmod +x /etc/rc.local\n  chmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n  restorecon /etc/ipsec.d/*db 2>/dev/null\n  restorecon /usr/local/sbin -Rv 2>/dev/null\n  restorecon /usr/local/libexec/ipsec -Rv 2>/dev/null\n  iptables-restore < \"$IPT_FILE\"\n  # Fix xl2tpd if l2tp_ppp is unavailable\n  if ! modprobe -q l2tp_ppp; then\n    sed -i '/^ExecStartPre=\\//s/=/=-/' /usr/lib/systemd/system/xl2tpd.service\n    systemctl daemon-reload\n  fi\n  mkdir -p /run/pluto\n  service fail2ban restart 2>/dev/null\n  service ipsec restart 2>/dev/null\n  service xl2tpd restart 2>/dev/null\n}\n\nshow_vpn_info() {\ncat <<EOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $public_ip\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nVPN client setup: https://vpnsetup.net/clients\n\n================================================\n\nEOF\n}\n\nset_up_ikev2() {\n  status=0\n  if [ -s /opt/src/ikev2.sh ] && [ ! -f /etc/ipsec.d/ikev2.conf ]; then\n    skip_ikev2=0\n    case $VPN_SKIP_IKEV2 in\n      [yY][eE][sS])\n        skip_ikev2=1\n        ;;\n    esac\n    if [ \"$skip_ikev2\" = 0 ]; then\n      sleep 1\n      VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_PUBLIC_IP=\"$public_ip\" \\\n      VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n      VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n      VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n      VPN_CLIENT_VALIDITY=\"$VPN_CLIENT_VALIDITY\" \\\n      /bin/bash /opt/src/ikev2.sh --auto || status=1\n    fi\n  elif [ -s /opt/src/ikev2.sh ]; then\ncat <<'EOF'\n================================================\n\nIKEv2 is already set up on this server.\n\nNext steps: Configure IKEv2 clients. See:\nhttps://vpnsetup.net/clients\n\nTo manage IKEv2 clients, run: sudo ikev2.sh\n\n================================================\n\nEOF\n  fi\n}\n\nvpnsetup() {\n  check_root\n  check_os\n  check_iface\n  check_creds\n  check_dns\n  check_server_dns\n  check_client_name\n  check_subnets\n  check_libreswan\n  start_setup\n  install_setup_pkgs\n  detect_ip\n  add_epel_repo\n  install_vpn_pkgs_1\n  install_vpn_pkgs_2\n  install_fail2ban\n  get_helper_scripts\n  get_libreswan\n  install_libreswan\n  create_vpn_config\n  update_sysctl\n  update_iptables\n  enable_on_boot\n  start_services\n  show_vpn_info\n  set_up_ikev2\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit \"$status\"\n"
        },
        {
          "name": "vpnsetup_centos.sh",
          "type": "blob",
          "size": 24.091796875,
          "content": "#!/bin/bash\n#\n# Script for automatic setup of an IPsec VPN server on CentOS/RHEL, Rocky Linux,\n# AlmaLinux and Oracle Linux\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2015-2024 Lin Song <linsongui@gmail.com>\n# Based on the work of Thomas Sarlandie (Copyright 2012)\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK=''\nYOUR_USERNAME=''\nYOUR_PASSWORD=''\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T | tr ':' '_')\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nexiterr2() { exiterr \"'yum install' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2>/dev/null; }\nbigecho() { echo \"## $1\"; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n  if [ \"$(id -u)\" != 0 ]; then\n    exiterr \"Script must be run as root. Try 'sudo bash $0'\"\n  fi\n}\n\ncheck_vz() {\n  if [ -f /proc/user_beancounters ]; then\n    exiterr \"OpenVZ VPS is not supported.\"\n  fi\n}\n\ncheck_lxc() {\n  # shellcheck disable=SC2154\n  if [ \"$container\" = \"lxc\" ] && [ ! -e /dev/ppp ]; then\ncat 1>&2 <<'EOF'\nError: /dev/ppp is missing. LXC containers require configuration.\n       See: https://github.com/hwdsl2/setup-ipsec-vpn/issues/1014\nEOF\n  exit 1\n  fi\n}\n\ncheck_os() {\n  rh_file=\"/etc/redhat-release\"\n  if [ -f \"$rh_file\" ]; then\n    os_type=centos\n    if grep -q \"Red Hat\" \"$rh_file\"; then\n      os_type=rhel\n    fi\n    [ -f /etc/oracle-release ] && os_type=ol\n    grep -qi rocky \"$rh_file\" && os_type=rocky\n    grep -qi alma \"$rh_file\" && os_type=alma\n    if grep -q \"release 7\" \"$rh_file\"; then\n      os_ver=7\n    elif grep -q \"release 8\" \"$rh_file\"; then\n      os_ver=8\n      grep -qi stream \"$rh_file\" && os_ver=8s\n    elif grep -q \"release 9\" \"$rh_file\"; then\n      os_ver=9\n      grep -qi stream \"$rh_file\" && os_ver=9s\n    else\n      exiterr \"This script only supports CentOS/RHEL 7-9.\"\n    fi\n    if [ \"$os_type\" = \"centos\" ] \\\n      && { [ \"$os_ver\" = 7 ] || [ \"$os_ver\" = 8 ] || [ \"$os_ver\" = 8s ]; }; then\n      exiterr \"CentOS Linux $os_ver is EOL and not supported.\"\n    fi\n  else\ncat 1>&2 <<'EOF'\nError: This script only supports one of the following OS:\n       CentOS/RHEL, Rocky Linux, AlmaLinux or Oracle Linux\nEOF\n    exit 1\n  fi\n}\n\ncheck_iface() {\n  if ! command -v route >/dev/null 2>&1 && ! command -v ip >/dev/null 2>&1; then\n    (\n      set -x\n      yum -y -q install iproute >/dev/null || yum -y -q install iproute >/dev/null\n    )\n  fi\n  def_iface=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n  [ -z \"$def_iface\" ] && def_iface=$(ip -4 route list 0/0 2>/dev/null | grep -m 1 -Po '(?<=dev )(\\S+)')\n  def_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2>/dev/null)\n  if [ -n \"$def_state\" ] && [ \"$def_state\" != \"down\" ]; then\n    case $def_iface in\n      wl*)\n        exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n        ;;\n    esac\n    NET_IFACE=\"$def_iface\"\n  else\n    eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2>/dev/null)\n    if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n      exiterr \"Could not detect the default network interface.\"\n    fi\n    NET_IFACE=eth0\n  fi\n}\n\ncheck_creds() {\n  [ -n \"$YOUR_IPSEC_PSK\" ] && VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n  [ -n \"$YOUR_USERNAME\" ] && VPN_USER=\"$YOUR_USERNAME\"\n  [ -n \"$YOUR_PASSWORD\" ] && VPN_PASSWORD=\"$YOUR_PASSWORD\"\n  if [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n    bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n    VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 20)\n    VPN_USER=vpnuser\n    VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 16)\n  fi\n  if [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n    exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\n  fi\n  if printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n    exiterr \"VPN credentials must not contain non-ASCII characters.\"\n  fi\n  case \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n    *[\\\\\\\"\\']*)\n      exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n      ;;\n  esac\n}\n\ncheck_dns() {\n  if { [ -n \"$VPN_DNS_SRV1\" ] && ! check_ip \"$VPN_DNS_SRV1\"; } \\\n    || { [ -n \"$VPN_DNS_SRV2\" ] && ! check_ip \"$VPN_DNS_SRV2\"; }; then\n    exiterr \"The DNS server specified is invalid.\"\n  fi\n}\n\ncheck_server_dns() {\n  if [ -n \"$VPN_DNS_NAME\" ] && ! check_dns_name \"$VPN_DNS_NAME\"; then\n    exiterr \"Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\"\n  fi\n}\n\ncheck_client_name() {\n  if [ -n \"$VPN_CLIENT_NAME\" ]; then\n    name_len=\"$(printf '%s' \"$VPN_CLIENT_NAME\" | wc -m)\"\n    if [ \"$name_len\" -gt \"64\" ] || printf '%s' \"$VPN_CLIENT_NAME\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n      || case $VPN_CLIENT_NAME in -*) true ;; *) false ;; esac; then\n      exiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n    fi\n  fi\n}\n\ncheck_subnets() {\n  if [ -s /etc/ipsec.conf ] && grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n    XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n    if ! grep -q \"$L2TP_NET\" /etc/ipsec.conf \\\n      || ! grep -q \"$XAUTH_NET\" /etc/ipsec.conf; then\n      echo \"Error: The custom VPN subnets specified do not match initial install.\" >&2\n      echo \"       See Advanced usage -> Customize VPN subnets for more information.\" >&2\n      exit 1\n    fi\n  fi\n}\n\nstart_setup() {\n  bigecho \"VPN setup in progress... Please be patient.\"\n  mkdir -p /opt/src\n  cd /opt/src || exit 1\n}\n\ninstall_setup_pkgs() {\n  bigecho \"Installing packages required for setup...\"\n  (\n    set -x\n    yum -y -q install wget bind-utils openssl tar \\\n      iptables iproute gawk grep sed net-tools >/dev/null \\\n    || yum -y -q install wget bind-utils openssl tar \\\n      iptables iproute gawk grep sed net-tools >/dev/null\n  ) || exiterr2\n}\n\nget_default_ip() {\n  def_ip=$(ip -4 route get 1 | sed 's/ uid .*//' | awk '{print $NF;exit}' 2>/dev/null)\n  if check_ip \"$def_ip\" \\\n    && ! printf '%s' \"$def_ip\" | grep -Eq '^(10|127|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168|169\\.254)\\.'; then\n    public_ip=\"$def_ip\"\n  fi\n}\n\ndetect_ip() {\n  public_ip=${VPN_PUBLIC_IP:-''}\n  check_ip \"$public_ip\" || get_default_ip\n  check_ip \"$public_ip\" && return 0\n  bigecho \"Trying to auto discover IP of this server...\"\n  check_ip \"$public_ip\" || public_ip=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ipv4.icanhazip.com)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ip1.dynupdate.no-ip.com)\n  check_ip \"$public_ip\" || exiterr \"Cannot detect this server's public IP. Define it as variable 'VPN_PUBLIC_IP' and re-run this script.\"\n}\n\nadd_epel_repo() {\n  bigecho \"Adding the EPEL repository...\"\n  epel_url=\"https://dl.fedoraproject.org/pub/epel/epel-release-latest-$(rpm -E '%{rhel}').noarch.rpm\"\n  (\n    set -x\n    yum -y -q install epel-release >/dev/null 2>&1 || yum -y -q install \"$epel_url\" >/dev/null\n  ) || exiterr2\n}\n\ninstall_vpn_pkgs_1() {\n  bigecho \"Installing packages required for the VPN...\"\n  erp=\"--enablerepo\"\n  rp1=\"$erp=epel\"\n  rp2=\"$erp=*server-*optional*\"\n  rp3=\"$erp=*releases-optional*\"\n  if [ \"$os_type\" = \"ol\" ]; then\n    if [ \"$os_ver\" = 9 ]; then\n      rp1=\"$erp=ol9_developer_EPEL\"\n    elif [ \"$os_ver\" = 8 ]; then\n      rp1=\"$erp=ol8_developer_EPEL\"\n    else\n      rp3=\"$erp=ol7_optional_latest\"\n    fi\n  fi\n  (\n    set -x\n    yum -y -q install nss-devel nspr-devel pkgconfig pam-devel \\\n      libcap-ng-devel libselinux-devel curl-devel nss-tools \\\n      flex bison gcc make util-linux ppp >/dev/null\n  ) || exiterr2\n}\n\ninstall_vpn_pkgs_2() {\n  (\n    set -x\n    yum \"$rp1\" -y -q install xl2tpd >/dev/null 2>&1\n  ) || exiterr2\n}\n\ninstall_vpn_pkgs_3() {\n  use_nft=0\n  p1=systemd-devel\n  p2=libevent-devel\n  p3=fipscheck-devel\n  p4=iptables-services\n  if [ \"$os_ver\" = 7 ]; then\n    (\n      set -x\n      yum \"$rp2\" \"$rp3\" -y -q install $p1 $p2 $p3 $p4 >/dev/null\n    ) || exiterr2\n  else\n    (\n      set -x\n      yum -y -q install $p1 $p2 >/dev/null\n    ) || exiterr2\n    if [ \"$os_ver\" = 9 ] || [ \"$os_ver\" = 9s ] \\\n      || systemctl is-active --quiet firewalld \\\n      || systemctl is-active --quiet nftables \\\n      || grep -qs \"hwdsl2 VPN script\" /etc/sysconfig/nftables.conf; then\n      use_nft=1\n      p4=nftables\n    fi\n    (\n      set -x\n      yum -y -q install $p4 >/dev/null\n    ) || exiterr2\n  fi\n}\n\ncreate_f2b_config() {\n  F2B_FILE=/etc/fail2ban/jail.local\n  if [ ! -f \"$F2B_FILE\" ]; then\n    bigecho \"Creating basic Fail2Ban rules...\"\ncat > \"$F2B_FILE\" <<'EOF'\n[ssh-iptables]\nenabled = true\nfilter = sshd\nlogpath = /var/log/secure\nEOF\n\n    if [ \"$use_nft\" = 1 ]; then\ncat >> \"$F2B_FILE\" <<'EOF'\nport = ssh\nbanaction = nftables-multiport[blocktype=drop]\nEOF\n    else\ncat >> \"$F2B_FILE\" <<'EOF'\naction = iptables[name=SSH, port=ssh, protocol=tcp]\nEOF\n    fi\n  fi\n}\n\ninstall_fail2ban() {\n  bigecho \"Installing Fail2Ban to protect SSH...\"\n  (\n    set -x\n    yum \"$rp1\" -y -q install fail2ban >/dev/null\n  ) && create_f2b_config\n}\n\nlink_scripts() {\n  cd /opt/src || exit 1\n  /bin/mv -f ikev2setup.sh ikev2.sh\n  /bin/mv -f add_vpn_user.sh addvpnuser.sh\n  /bin/mv -f del_vpn_user.sh delvpnuser.sh\n  echo \"+ ikev2.sh addvpnuser.sh delvpnuser.sh\"\n  for sc in ikev2.sh addvpnuser.sh delvpnuser.sh; do\n    [ -s \"$sc\" ] && chmod +x \"$sc\" && ln -s \"/opt/src/$sc\" /usr/bin 2>/dev/null\n  done\n}\n\nget_helper_scripts() {\n  bigecho \"Downloading helper scripts...\"\n  base1=\"https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras\"\n  base2=\"https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras\"\n  sc1=ikev2setup.sh\n  sc2=add_vpn_user.sh\n  sc3=del_vpn_user.sh\n  cd /opt/src || exit 1\n  /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n  if wget -t 3 -T 30 -q \"$base1/$sc1\" \"$base1/$sc2\" \"$base1/$sc3\"; then\n    link_scripts\n  else\n    /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    if wget -t 3 -T 30 -q \"$base2/$sc1\" \"$base2/$sc2\" \"$base2/$sc3\"; then\n      link_scripts\n    else\n      echo \"Warning: Could not download helper scripts.\" >&2\n      /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    fi\n  fi\n}\n\nget_swan_ver() {\n  SWAN_VER=5.1\n  base_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n  swan_ver_url=\"$base_url/v1-$os_type-$os_ver-swanver\"\n  swan_ver_latest=$(wget -t 2 -T 10 -qO- \"$swan_ver_url\" | head -n 1)\n  [ -z \"$swan_ver_latest\" ] && swan_ver_latest=$(curl -m 10 -fsL \"$swan_ver_url\" 2>/dev/null | head -n 1)\n  if printf '%s' \"$swan_ver_latest\" | grep -Eq '^([3-9]|[1-9][0-9]{1,2})(\\.([0-9]|[1-9][0-9]{1,2})){1,2}$'; then\n    SWAN_VER=\"$swan_ver_latest\"\n  fi\n  if [ -n \"$VPN_SWAN_VER\" ]; then\n    if ! printf '%s\\n%s' \"4.15\" \"$VPN_SWAN_VER\" | sort -C -V \\\n      || ! printf '%s\\n%s' \"$VPN_SWAN_VER\" \"$SWAN_VER\" | sort -C -V; then\ncat 1>&2 <<EOF\nError: Libreswan version '$VPN_SWAN_VER' is not supported.\n       This script can install Libreswan 4.15+ or $SWAN_VER.\nEOF\n      exit 1\n    else\n      SWAN_VER=\"$VPN_SWAN_VER\"\n    fi\n  fi\n}\n\ncheck_libreswan() {\n  check_result=0\n  ipsec_ver=$(/usr/local/sbin/ipsec --version 2>/dev/null)\n  swan_ver_old=$(printf '%s' \"$ipsec_ver\" | sed -e 's/.*Libreswan U\\?//' -e 's/\\( (\\|\\/K\\).*//')\n  ipsec_bin=\"/usr/local/sbin/ipsec\"\n  if [ -n \"$swan_ver_old\" ] && printf '%s' \"$ipsec_ver\" | grep -qi 'libreswan' \\\n    && [ \"$(find \"$ipsec_bin\" -mmin -10080)\" ]; then\n    check_result=1\n    return 0\n  fi\n  get_swan_ver\n  if [ -s \"$ipsec_bin\" ] && [ \"$swan_ver_old\" = \"$SWAN_VER\" ]; then\n    touch \"$ipsec_bin\"\n  fi\n  [ \"$swan_ver_old\" = \"$SWAN_VER\" ] && check_result=1\n}\n\nget_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Downloading Libreswan...\"\n    cd /opt/src || exit 1\n    swan_file=\"libreswan-$SWAN_VER.tar.gz\"\n    swan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\n    swan_url2=\"https://download.libreswan.org/$swan_file\"\n    (\n      set -x\n      wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url2\"\n    ) || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    tar xzf \"$swan_file\" && /bin/rm -f \"$swan_file\"\n  else\n    bigecho \"Libreswan $swan_ver_old is already installed, skipping...\"\n  fi\n}\n\ninstall_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Compiling and installing Libreswan, please wait...\"\n    cd \"libreswan-$SWAN_VER\" || exit 1\ncat > Makefile.inc.local <<'EOF'\nWERROR_CFLAGS=-w -s\nUSE_DNSSEC=false\nUSE_DH2=true\nUSE_NSS_KDF=false\nUSE_LINUX_AUDIT=false\nUSE_SECCOMP=false\nFINALNSSDIR=/etc/ipsec.d\nNSSDIR=/etc/ipsec.d\nEOF\n    if ! grep -qs IFLA_XFRM_LINK /usr/include/linux/if_link.h; then\n      echo \"USE_XFRM_INTERFACE_IFLA_HEADER=true\" >> Makefile.inc.local\n    fi\n    NPROCS=$(grep -c ^processor /proc/cpuinfo)\n    [ -z \"$NPROCS\" ] && NPROCS=1\n    (\n      set -x\n      make \"-j$((NPROCS+1))\" -s base >/dev/null 2>&1 && make -s install-base >/dev/null 2>&1\n    )\n    cd /opt/src || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    if ! /usr/local/sbin/ipsec --version 2>/dev/null | grep -qF \"$SWAN_VER\"; then\n      exiterr \"Libreswan $SWAN_VER failed to build.\"\n    fi\n  fi\n}\n\ncreate_vpn_config() {\n  bigecho \"Creating VPN configuration...\"\n  L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n  L2TP_LOCAL=${VPN_L2TP_LOCAL:-'192.168.42.1'}\n  L2TP_POOL=${VPN_L2TP_POOL:-'192.168.42.10-192.168.42.250'}\n  XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n  XAUTH_POOL=${VPN_XAUTH_POOL:-'192.168.43.10-192.168.43.250'}\n  DNS_SRV1=${VPN_DNS_SRV1:-'8.8.8.8'}\n  DNS_SRV2=${VPN_DNS_SRV2:-'8.8.4.4'}\n  DNS_SRVS=\"\\\"$DNS_SRV1 $DNS_SRV2\\\"\"\n  [ -n \"$VPN_DNS_SRV1\" ] && [ -z \"$VPN_DNS_SRV2\" ] && DNS_SRVS=\"$DNS_SRV1\"\n  # Create IPsec config\n  conf_bk \"/etc/ipsec.conf\"\ncat > /etc/ipsec.conf <<EOF\nversion 2.0\n\nconfig setup\n  ikev1-policy=accept\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$public_ip\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=300\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2;modp2048,aes128-sha2;modp2048,aes256-sha1;modp2048,aes128-sha1;modp2048\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  ikelifetime=24h\n  salifetime=24h\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  cisco-unity=yes\n  also=shared\n\ninclude /etc/ipsec.d/*.conf\nEOF\n  # Specify IPsec PSK\n  conf_bk \"/etc/ipsec.secrets\"\ncat > /etc/ipsec.secrets <<EOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n  # Create xl2tpd config\n  conf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat > /etc/xl2tpd/xl2tpd.conf <<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n  # Set xl2tpd options\n  conf_bk \"/etc/ppp/options.xl2tpd\"\ncat > /etc/ppp/options.xl2tpd <<EOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n  if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV2\" ]; then\ncat >> /etc/ppp/options.xl2tpd <<EOF\nms-dns $DNS_SRV2\nEOF\n  fi\n  # Create VPN credentials\n  conf_bk \"/etc/ppp/chap-secrets\"\ncat > /etc/ppp/chap-secrets <<EOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n  conf_bk \"/etc/ipsec.d/passwd\"\n  VPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat > /etc/ipsec.d/passwd <<EOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n}\n\nupdate_sysctl() {\n  bigecho \"Updating sysctl settings...\"\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    conf_bk \"/etc/sysctl.conf\"\ncat >> /etc/sysctl.conf <<EOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 16777216\nnet.core.rmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 87380 16777216\nnet.ipv4.tcp_wmem = 4096 87380 16777216\nEOF\n    if modprobe -q tcp_bbr \\\n      && printf '%s\\n%s' \"4.20\" \"$(uname -r)\" | sort -C -V \\\n      && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]; then\ncat >> /etc/sysctl.conf <<'EOF'\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\nEOF\n    fi\n  fi\n}\n\nupdate_iptables() {\n  bigecho \"Updating IPTables rules...\"\n  IPT_FILE=/etc/sysconfig/iptables\n  [ \"$use_nft\" = 1 ] && IPT_FILE=/etc/sysconfig/nftables.conf\n  ipt_flag=0\n  if ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\"; then\n    ipt_flag=1\n  fi\n  ipi='iptables -I INPUT'\n  ipf='iptables -I FORWARD'\n  ipp='iptables -t nat -I POSTROUTING'\n  res='RELATED,ESTABLISHED'\n  nff='nft insert rule inet firewalld'\n  nfn='nft insert rule inet nftables_svc'\n  if [ \"$ipt_flag\" = 1 ]; then\n    service fail2ban stop >/dev/null 2>&1\n    if [ \"$use_nft\" = 1 ]; then\n      nft list ruleset > \"$IPT_FILE.old-$SYS_DT\"\n      chmod 600 \"$IPT_FILE.old-$SYS_DT\"\n    else\n      iptables-save > \"$IPT_FILE.old-$SYS_DT\"\n    fi\n    $ipi 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n    $ipi 2 -m conntrack --ctstate INVALID -j DROP\n    $ipi 3 -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipi 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n    $ipi 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n    $ipi 6 -p udp --dport 1701 -j DROP\n    $ipf 1 -m conntrack --ctstate INVALID -j DROP\n    $ipf 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 4 -i ppp+ -o ppp+ -j ACCEPT\n    $ipf 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 7 -s \"$XAUTH_NET\" -o ppp+ -j ACCEPT\n    if [ \"$use_nft\" != 1 ]; then\n      iptables -A FORWARD -j DROP\n    fi\n    if [ \"$use_nft\" = 1 ]; then\n      $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" ! -d \"$XAUTH_NET\" -j MASQUERADE\n    else\n      $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n    fi\n    $ipp -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n    echo \"# Modified by hwdsl2 VPN script\" > \"$IPT_FILE\"\n    if [ \"$use_nft\" = 1 ]; then\n      for vport in 500 4500 1701; do\n        $nff filter_INPUT udp dport \"$vport\" accept 2>/dev/null\n        $nfn allow udp dport \"$vport\" accept 2>/dev/null\n      done\n      for vnet in \"$L2TP_NET\" \"$XAUTH_NET\"; do\n        for vdir in saddr daddr; do\n          $nff filter_FORWARD ip \"$vdir\" \"$vnet\" accept 2>/dev/null\n          $nfn FORWARD ip \"$vdir\" \"$vnet\" accept 2>/dev/null\n        done\n      done\n      echo \"flush ruleset\" >> \"$IPT_FILE\"\n      nft list ruleset >> \"$IPT_FILE\"\n    else\n      iptables-save >> \"$IPT_FILE\"\n    fi\n  fi\n}\n\nfix_nss_config() {\n  nss_conf=\"/etc/crypto-policies/back-ends/nss.config\"\n  if [ -s \"$nss_conf\" ]; then\n    if ! grep -q \":SHA1:\" \"$nss_conf\" \\\n      && ! grep -q \" allow=SHA1:\" \"$nss_conf\"; then\n      sed -i \"/ALL allow=/s/ allow=/ allow=SHA1:/\" \"$nss_conf\"\n    fi\n  fi\n}\n\napply_gcp_mtu_fix() {\n  if dmidecode -s system-product-name 2>/dev/null | grep -qi 'Google Compute Engine' \\\n    && ifconfig 2>/dev/null | grep \"$NET_IFACE\" | head -n 1 | grep -qi 'mtu 1460'; then\n    bigecho \"Applying fix for MTU size...\"\n    ifconfig \"$NET_IFACE\" mtu 1500\n    dh_file=\"/etc/dhcp/dhclient.conf\"\n    if grep -qs \"send host-name\" \"$dh_file\" \\\n      && ! grep -qs \"interface-mtu 1500\" \"$dh_file\"; then\n      sed -i\".old-$SYS_DT\" \\\n        \"/send host-name/a \\interface \\\"$NET_IFACE\\\" {\\ndefault interface-mtu 1500;\\nsupersede interface-mtu 1500;\\n}\" \\\n        \"$dh_file\"\n    fi\n  fi\n}\n\nenable_on_boot() {\n  bigecho \"Enabling services on boot...\"\n  systemctl --now mask firewalld 2>/dev/null\n  if [ \"$use_nft\" = 1 ]; then\n    systemctl enable nftables 2>/dev/null\n    systemctl enable fail2ban 2>/dev/null\n  else\n    systemctl enable iptables 2>/dev/null\n    systemctl enable fail2ban 2>/dev/null\n  fi\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/rc.local; then\n    if [ -f /etc/rc.local ]; then\n      conf_bk \"/etc/rc.local\"\n    else\n      echo '#!/bin/sh' > /etc/rc.local\n    fi\ncat >> /etc/rc.local <<'EOF'\n\n# Added by hwdsl2 VPN script\n(sleep 15\nservice ipsec restart\nservice xl2tpd restart\necho 1 > /proc/sys/net/ipv4/ip_forward)&\nEOF\n  fi\n}\n\nstart_services() {\n  bigecho \"Starting services...\"\n  sysctl -e -q -p\n  chmod +x /etc/rc.local\n  chmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n  restorecon /etc/ipsec.d/*db 2>/dev/null\n  restorecon /usr/local/sbin -Rv 2>/dev/null\n  restorecon /usr/local/libexec/ipsec -Rv 2>/dev/null\n  if [ \"$use_nft\" = 1 ]; then\n    if ! nft -c -f \"$IPT_FILE\" >/dev/null 2>&1; then\n      sed -i '/ip6 saddr fddd:\\(2c4\\|1194\\):/s/xt target \"MASQUERADE\"/masquerade/' \"$IPT_FILE\"\n    fi\n    nft -f \"$IPT_FILE\"\n  else\n    iptables-restore < \"$IPT_FILE\"\n  fi\n  # Fix xl2tpd if l2tp_ppp is unavailable\n  if ! modprobe -q l2tp_ppp; then\n    sed -i '/^ExecStartPre=\\//s/=/=-/' /usr/lib/systemd/system/xl2tpd.service\n    systemctl daemon-reload\n  fi\n  mkdir -p /run/pluto\n  service fail2ban restart 2>/dev/null\n  service ipsec restart 2>/dev/null\n  service xl2tpd restart 2>/dev/null\n}\n\nshow_vpn_info() {\ncat <<EOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $public_ip\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nVPN client setup: https://vpnsetup.net/clients\n\n================================================\n\nEOF\n}\n\nset_up_ikev2() {\n  status=0\n  if [ -s /opt/src/ikev2.sh ] && [ ! -f /etc/ipsec.d/ikev2.conf ]; then\n    skip_ikev2=0\n    case $VPN_SKIP_IKEV2 in\n      [yY][eE][sS])\n        skip_ikev2=1\n        ;;\n    esac\n    if [ \"$skip_ikev2\" = 0 ]; then\n      sleep 1\n      VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_PUBLIC_IP=\"$public_ip\" \\\n      VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n      VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n      VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n      VPN_CLIENT_VALIDITY=\"$VPN_CLIENT_VALIDITY\" \\\n      /bin/bash /opt/src/ikev2.sh --auto || status=1\n    fi\n  elif [ -s /opt/src/ikev2.sh ]; then\ncat <<'EOF'\n================================================\n\nIKEv2 is already set up on this server.\n\nNext steps: Configure IKEv2 clients. See:\nhttps://vpnsetup.net/clients\n\nTo manage IKEv2 clients, run: sudo ikev2.sh\n\n================================================\n\nEOF\n  fi\n}\n\nvpnsetup() {\n  check_root\n  check_vz\n  check_lxc\n  check_os\n  check_iface\n  check_creds\n  check_dns\n  check_server_dns\n  check_client_name\n  check_subnets\n  check_libreswan\n  start_setup\n  install_setup_pkgs\n  detect_ip\n  add_epel_repo\n  install_vpn_pkgs_1\n  install_vpn_pkgs_2\n  install_vpn_pkgs_3\n  install_fail2ban\n  get_helper_scripts\n  get_libreswan\n  install_libreswan\n  create_vpn_config\n  update_sysctl\n  update_iptables\n  fix_nss_config\n  apply_gcp_mtu_fix\n  enable_on_boot\n  start_services\n  show_vpn_info\n  set_up_ikev2\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit \"$status\"\n"
        },
        {
          "name": "vpnsetup_ubuntu.sh",
          "type": "blob",
          "size": 23.0390625,
          "content": "#!/bin/bash\n#\n# Script for automatic setup of an IPsec VPN server on Ubuntu and Debian\n#\n# DO NOT RUN THIS SCRIPT ON YOUR PC OR MAC!\n#\n# The latest version of this script is available at:\n# https://github.com/hwdsl2/setup-ipsec-vpn\n#\n# Copyright (C) 2014-2024 Lin Song <linsongui@gmail.com>\n# Based on the work of Thomas Sarlandie (Copyright 2012)\n#\n# This work is licensed under the Creative Commons Attribution-ShareAlike 3.0\n# Unported License: http://creativecommons.org/licenses/by-sa/3.0/\n#\n# Attribution required: please include my name in any derivative and let me\n# know how you have improved it!\n\n# =====================================================\n\n# Define your own values for these variables\n# - IPsec pre-shared key, VPN username and password\n# - All values MUST be placed inside 'single quotes'\n# - DO NOT use these special characters within values: \\ \" '\n\nYOUR_IPSEC_PSK=''\nYOUR_USERNAME=''\nYOUR_PASSWORD=''\n\n# =====================================================\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\nSYS_DT=$(date +%F-%T | tr ':' '_')\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nexiterr2() { exiterr \"'apt-get install' failed.\"; }\nconf_bk() { /bin/cp -f \"$1\" \"$1.old-$SYS_DT\" 2>/dev/null; }\nbigecho() { echo \"## $1\"; }\n\ncheck_ip() {\n  IP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_dns_name() {\n  FQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n  printf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n  if [ \"$(id -u)\" != 0 ]; then\n    exiterr \"Script must be run as root. Try 'sudo bash $0'\"\n  fi\n}\n\ncheck_vz() {\n  if [ -f /proc/user_beancounters ]; then\n    exiterr \"OpenVZ VPS is not supported.\"\n  fi\n}\n\ncheck_lxc() {\n  # shellcheck disable=SC2154\n  if [ \"$container\" = \"lxc\" ] && [ ! -e /dev/ppp ]; then\ncat 1>&2 <<'EOF'\nError: /dev/ppp is missing. LXC containers require configuration.\n       See: https://github.com/hwdsl2/setup-ipsec-vpn/issues/1014\nEOF\n  exit 1\n  fi\n}\n\ncheck_os() {\n  os_type=$(lsb_release -si 2>/dev/null)\n  [ -z \"$os_type\" ] && [ -f /etc/os-release ] && os_type=$(. /etc/os-release && printf '%s' \"$ID\")\n  case $os_type in\n    [Uu]buntu)\n      os_type=ubuntu\n      ;;\n    [Dd]ebian|[Kk]ali)\n      os_type=debian\n      ;;\n    [Rr]aspbian)\n      os_type=raspbian\n      ;;\n    *)\n      exiterr \"This script only supports Ubuntu and Debian.\"\n      ;;\n  esac\n  os_ver=$(sed 's/\\..*//' /etc/debian_version | tr -dc 'A-Za-z0-9')\n  if [ \"$os_ver\" = 8 ] || [ \"$os_ver\" = 9 ] || [ \"$os_ver\" = \"stretchsid\" ] \\\n    || [ \"$os_ver\" = \"bustersid\" ]; then\ncat 1>&2 <<EOF\nError: This script requires Debian >= 10 or Ubuntu >= 20.04.\n       This version of Ubuntu/Debian is too old and not supported.\nEOF\n    exit 1\n  fi\n  if [ \"$os_ver\" = \"trixiesid\" ] && [ -f /etc/os-release ] \\\n    && [ \"$(. /etc/os-release && printf '%s' \"$VERSION_ID\")\" = \"24.10\" ]; then\ncat 1>&2 <<EOF\nError: This script does not support Ubuntu 24.10.\n       You may use e.g. Ubuntu 24.04 LTS instead.\nEOF\n    exit 1\n  fi\n}\n\ncheck_iface() {\n  if ! command -v route >/dev/null 2>&1 && ! command -v ip >/dev/null 2>&1; then\n    wait_for_apt\n    export DEBIAN_FRONTEND=noninteractive\n    (\n      set -x\n      apt-get -yqq update || apt-get -yqq update\n      apt-get -yqq install iproute2 >/dev/null\n    )\n  fi\n  def_iface=$(route 2>/dev/null | grep -m 1 '^default' | grep -o '[^ ]*$')\n  [ -z \"$def_iface\" ] && def_iface=$(ip -4 route list 0/0 2>/dev/null | grep -m 1 -Po '(?<=dev )(\\S+)')\n  def_state=$(cat \"/sys/class/net/$def_iface/operstate\" 2>/dev/null)\n  if [ -n \"$def_state\" ] && [ \"$def_state\" != \"down\" ]; then\n    if ! uname -m | grep -qi -e '^arm' -e '^aarch64'; then\n      case $def_iface in\n        wl*)\n          exiterr \"Wireless interface '$def_iface' detected. DO NOT run this script on your PC or Mac!\"\n          ;;\n      esac\n    fi\n    NET_IFACE=\"$def_iface\"\n  else\n    eth0_state=$(cat \"/sys/class/net/eth0/operstate\" 2>/dev/null)\n    if [ -z \"$eth0_state\" ] || [ \"$eth0_state\" = \"down\" ]; then\n      exiterr \"Could not detect the default network interface.\"\n    fi\n    NET_IFACE=eth0\n  fi\n}\n\ncheck_creds() {\n  [ -n \"$YOUR_IPSEC_PSK\" ] && VPN_IPSEC_PSK=\"$YOUR_IPSEC_PSK\"\n  [ -n \"$YOUR_USERNAME\" ] && VPN_USER=\"$YOUR_USERNAME\"\n  [ -n \"$YOUR_PASSWORD\" ] && VPN_PASSWORD=\"$YOUR_PASSWORD\"\n  if [ -z \"$VPN_IPSEC_PSK\" ] && [ -z \"$VPN_USER\" ] && [ -z \"$VPN_PASSWORD\" ]; then\n    bigecho \"VPN credentials not set by user. Generating random PSK and password...\"\n    VPN_IPSEC_PSK=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 20)\n    VPN_USER=vpnuser\n    VPN_PASSWORD=$(LC_CTYPE=C tr -dc 'A-HJ-NPR-Za-km-z2-9' </dev/urandom 2>/dev/null | head -c 16)\n  fi\n  if [ -z \"$VPN_IPSEC_PSK\" ] || [ -z \"$VPN_USER\" ] || [ -z \"$VPN_PASSWORD\" ]; then\n    exiterr \"All VPN credentials must be specified. Edit the script and re-enter them.\"\n  fi\n  if printf '%s' \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" | LC_ALL=C grep -q '[^ -~]\\+'; then\n    exiterr \"VPN credentials must not contain non-ASCII characters.\"\n  fi\n  case \"$VPN_IPSEC_PSK $VPN_USER $VPN_PASSWORD\" in\n    *[\\\\\\\"\\']*)\n      exiterr \"VPN credentials must not contain these special characters: \\\\ \\\" '\"\n      ;;\n  esac\n}\n\ncheck_dns() {\n  if { [ -n \"$VPN_DNS_SRV1\" ] && ! check_ip \"$VPN_DNS_SRV1\"; } \\\n    || { [ -n \"$VPN_DNS_SRV2\" ] && ! check_ip \"$VPN_DNS_SRV2\"; }; then\n    exiterr \"The DNS server specified is invalid.\"\n  fi\n}\n\ncheck_server_dns() {\n  if [ -n \"$VPN_DNS_NAME\" ] && ! check_dns_name \"$VPN_DNS_NAME\"; then\n    exiterr \"Invalid DNS name. 'VPN_DNS_NAME' must be a fully qualified domain name (FQDN).\"\n  fi\n}\n\ncheck_client_name() {\n  if [ -n \"$VPN_CLIENT_NAME\" ]; then\n    name_len=\"$(printf '%s' \"$VPN_CLIENT_NAME\" | wc -m)\"\n    if [ \"$name_len\" -gt \"64\" ] || printf '%s' \"$VPN_CLIENT_NAME\" | LC_ALL=C grep -q '[^A-Za-z0-9_-]\\+' \\\n      || case $VPN_CLIENT_NAME in -*) true ;; *) false ;; esac; then\n      exiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n    fi\n  fi\n}\n\ncheck_subnets() {\n  if [ -s /etc/ipsec.conf ] && grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n    XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n    if ! grep -q \"$L2TP_NET\" /etc/ipsec.conf \\\n      || ! grep -q \"$XAUTH_NET\" /etc/ipsec.conf; then\n      echo \"Error: The custom VPN subnets specified do not match initial install.\" >&2\n      echo \"       See Advanced usage -> Customize VPN subnets for more information.\" >&2\n      exit 1\n    fi\n  fi\n}\n\ncheck_iptables() {\n  if [ -x /sbin/iptables ] && ! iptables -nL INPUT >/dev/null 2>&1; then\n    exiterr \"IPTables check failed. Reboot and re-run this script.\"\n  fi\n}\n\nstart_setup() {\n  bigecho \"VPN setup in progress... Please be patient.\"\n  mkdir -p /opt/src\n  cd /opt/src || exit 1\n}\n\nwait_for_apt() {\n  count=0\n  apt_lk=/var/lib/apt/lists/lock\n  pkg_lk=/var/lib/dpkg/lock\n  while fuser \"$apt_lk\" \"$pkg_lk\" >/dev/null 2>&1 \\\n    || lsof \"$apt_lk\" >/dev/null 2>&1 || lsof \"$pkg_lk\" >/dev/null 2>&1; do\n    [ \"$count\" = 0 ] && echo \"## Waiting for apt to be available...\"\n    [ \"$count\" -ge 100 ] && exiterr \"Could not get apt/dpkg lock.\"\n    count=$((count+1))\n    printf '%s' '.'\n    sleep 3\n  done\n}\n\nupdate_apt_cache() {\n  bigecho \"Installing packages required for setup...\"\n  export DEBIAN_FRONTEND=noninteractive\n  (\n    set -x\n    apt-get -yqq update || apt-get -yqq update\n  ) || exiterr \"'apt-get update' failed.\"\n}\n\ninstall_setup_pkgs() {\n  (\n    set -x\n    apt-get -yqq install wget dnsutils openssl \\\n      iptables iproute2 gawk grep sed net-tools >/dev/null \\\n    || apt-get -yqq install wget dnsutils openssl \\\n      iptables iproute2 gawk grep sed net-tools >/dev/null\n  ) || exiterr2\n}\n\nget_default_ip() {\n  def_ip=$(ip -4 route get 1 | sed 's/ uid .*//' | awk '{print $NF;exit}' 2>/dev/null)\n  if check_ip \"$def_ip\" \\\n    && ! printf '%s' \"$def_ip\" | grep -Eq '^(10|127|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168|169\\.254)\\.'; then\n    public_ip=\"$def_ip\"\n  fi\n}\n\ndetect_ip() {\n  public_ip=${VPN_PUBLIC_IP:-''}\n  check_ip \"$public_ip\" || get_default_ip\n  check_ip \"$public_ip\" && return 0\n  bigecho \"Trying to auto discover IP of this server...\"\n  check_ip \"$public_ip\" || public_ip=$(dig @resolver1.opendns.com -t A -4 myip.opendns.com +short)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ipv4.icanhazip.com)\n  check_ip \"$public_ip\" || public_ip=$(wget -t 2 -T 10 -qO- http://ip1.dynupdate.no-ip.com)\n  check_ip \"$public_ip\" || exiterr \"Cannot detect this server's public IP. Define it as variable 'VPN_PUBLIC_IP' and re-run this script.\"\n}\n\ninstall_vpn_pkgs() {\n  bigecho \"Installing packages required for the VPN...\"\n  p1=libcurl4-nss-dev\n  [ \"$os_ver\" = \"trixiesid\" ] && p1=libcurl4-gnutls-dev\n  (\n    set -x\n    apt-get -yqq install libnss3-dev libnspr4-dev pkg-config \\\n      libpam0g-dev libcap-ng-dev libcap-ng-utils libselinux1-dev \\\n      $p1 flex bison gcc make libnss3-tools \\\n      libevent-dev libsystemd-dev uuid-runtime ppp xl2tpd >/dev/null\n  ) || exiterr2\n  if [ \"$os_type\" = \"debian\" ] && [ \"$os_ver\" = 12 ]; then\n    (\n      set -x\n      apt-get -yqq install rsyslog >/dev/null\n    ) || exiterr2\n  fi\n}\n\ninstall_fail2ban() {\n  bigecho \"Installing Fail2Ban to protect SSH...\"\n  (\n    set -x\n    apt-get -yqq install fail2ban >/dev/null\n  )\n}\n\nlink_scripts() {\n  cd /opt/src || exit 1\n  /bin/mv -f ikev2setup.sh ikev2.sh\n  /bin/mv -f add_vpn_user.sh addvpnuser.sh\n  /bin/mv -f del_vpn_user.sh delvpnuser.sh\n  echo \"+ ikev2.sh addvpnuser.sh delvpnuser.sh\"\n  for sc in ikev2.sh addvpnuser.sh delvpnuser.sh; do\n    [ -s \"$sc\" ] && chmod +x \"$sc\" && ln -s \"/opt/src/$sc\" /usr/bin 2>/dev/null\n  done\n}\n\nget_helper_scripts() {\n  bigecho \"Downloading helper scripts...\"\n  base1=\"https://raw.githubusercontent.com/hwdsl2/setup-ipsec-vpn/master/extras\"\n  base2=\"https://gitlab.com/hwdsl2/setup-ipsec-vpn/-/raw/master/extras\"\n  sc1=ikev2setup.sh\n  sc2=add_vpn_user.sh\n  sc3=del_vpn_user.sh\n  cd /opt/src || exit 1\n  /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n  if wget -t 3 -T 30 -q \"$base1/$sc1\" \"$base1/$sc2\" \"$base1/$sc3\"; then\n    link_scripts\n  else\n    /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    if wget -t 3 -T 30 -q \"$base2/$sc1\" \"$base2/$sc2\" \"$base2/$sc3\"; then\n      link_scripts\n    else\n      echo \"Warning: Could not download helper scripts.\" >&2\n      /bin/rm -f \"$sc1\" \"$sc2\" \"$sc3\"\n    fi\n  fi\n}\n\nget_swan_ver() {\n  SWAN_VER=5.1\n  base_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n  swan_ver_url=\"$base_url/v1-$os_type-$os_ver-swanver\"\n  swan_ver_latest=$(wget -t 2 -T 10 -qO- \"$swan_ver_url\" | head -n 1)\n  [ -z \"$swan_ver_latest\" ] && swan_ver_latest=$(curl -m 10 -fsL \"$swan_ver_url\" 2>/dev/null | head -n 1)\n  if printf '%s' \"$swan_ver_latest\" | grep -Eq '^([3-9]|[1-9][0-9]{1,2})(\\.([0-9]|[1-9][0-9]{1,2})){1,2}$'; then\n    SWAN_VER=\"$swan_ver_latest\"\n  fi\n  if [ -n \"$VPN_SWAN_VER\" ]; then\n    if ! printf '%s\\n%s' \"4.15\" \"$VPN_SWAN_VER\" | sort -C -V \\\n      || ! printf '%s\\n%s' \"$VPN_SWAN_VER\" \"$SWAN_VER\" | sort -C -V; then\ncat 1>&2 <<EOF\nError: Libreswan version '$VPN_SWAN_VER' is not supported.\n       This script can install Libreswan 4.15+ or $SWAN_VER.\nEOF\n      exit 1\n    else\n      SWAN_VER=\"$VPN_SWAN_VER\"\n    fi\n  fi\n}\n\ncheck_libreswan() {\n  check_result=0\n  ipsec_ver=$(/usr/local/sbin/ipsec --version 2>/dev/null)\n  swan_ver_old=$(printf '%s' \"$ipsec_ver\" | sed -e 's/.*Libreswan U\\?//' -e 's/\\( (\\|\\/K\\).*//')\n  ipsec_bin=\"/usr/local/sbin/ipsec\"\n  if [ -n \"$swan_ver_old\" ] && printf '%s' \"$ipsec_ver\" | grep -qi 'libreswan' \\\n    && [ \"$(find \"$ipsec_bin\" -mmin -10080)\" ]; then\n    check_result=1\n    return 0\n  fi\n  get_swan_ver\n  if [ -s \"$ipsec_bin\" ] && [ \"$swan_ver_old\" = \"$SWAN_VER\" ]; then\n    touch \"$ipsec_bin\"\n  fi\n  [ \"$swan_ver_old\" = \"$SWAN_VER\" ] && check_result=1\n}\n\nget_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Downloading Libreswan...\"\n    cd /opt/src || exit 1\n    swan_file=\"libreswan-$SWAN_VER.tar.gz\"\n    swan_url1=\"https://github.com/libreswan/libreswan/archive/v$SWAN_VER.tar.gz\"\n    swan_url2=\"https://download.libreswan.org/$swan_file\"\n    (\n      set -x\n      wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url1\" || wget -t 3 -T 30 -q -O \"$swan_file\" \"$swan_url2\"\n    ) || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    tar xzf \"$swan_file\" && /bin/rm -f \"$swan_file\"\n  else\n    bigecho \"Libreswan $swan_ver_old is already installed, skipping...\"\n  fi\n}\n\ninstall_libreswan() {\n  if [ \"$check_result\" = 0 ]; then\n    bigecho \"Compiling and installing Libreswan, please wait...\"\n    cd \"libreswan-$SWAN_VER\" || exit 1\ncat > Makefile.inc.local <<'EOF'\nWERROR_CFLAGS=-w -s\nUSE_DNSSEC=false\nUSE_DH2=true\nUSE_NSS_KDF=false\nFINALNSSDIR=/etc/ipsec.d\nNSSDIR=/etc/ipsec.d\nEOF\n    if ! grep -qs IFLA_XFRM_LINK /usr/include/linux/if_link.h; then\n      echo \"USE_XFRM_INTERFACE_IFLA_HEADER=true\" >> Makefile.inc.local\n    fi\n    NPROCS=$(grep -c ^processor /proc/cpuinfo)\n    [ -z \"$NPROCS\" ] && NPROCS=1\n    (\n      set -x\n      make \"-j$((NPROCS+1))\" -s base >/dev/null 2>&1 && make -s install-base >/dev/null 2>&1\n    )\n    cd /opt/src || exit 1\n    /bin/rm -rf \"/opt/src/libreswan-$SWAN_VER\"\n    if ! /usr/local/sbin/ipsec --version 2>/dev/null | grep -qF \"$SWAN_VER\"; then\n      exiterr \"Libreswan $SWAN_VER failed to build.\"\n    fi\n  fi\n}\n\ncreate_vpn_config() {\n  bigecho \"Creating VPN configuration...\"\n  L2TP_NET=${VPN_L2TP_NET:-'192.168.42.0/24'}\n  L2TP_LOCAL=${VPN_L2TP_LOCAL:-'192.168.42.1'}\n  L2TP_POOL=${VPN_L2TP_POOL:-'192.168.42.10-192.168.42.250'}\n  XAUTH_NET=${VPN_XAUTH_NET:-'192.168.43.0/24'}\n  XAUTH_POOL=${VPN_XAUTH_POOL:-'192.168.43.10-192.168.43.250'}\n  DNS_SRV1=${VPN_DNS_SRV1:-'8.8.8.8'}\n  DNS_SRV2=${VPN_DNS_SRV2:-'8.8.4.4'}\n  DNS_SRVS=\"\\\"$DNS_SRV1 $DNS_SRV2\\\"\"\n  [ -n \"$VPN_DNS_SRV1\" ] && [ -z \"$VPN_DNS_SRV2\" ] && DNS_SRVS=\"$DNS_SRV1\"\n  # Create IPsec config\n  conf_bk \"/etc/ipsec.conf\"\ncat > /etc/ipsec.conf <<EOF\nversion 2.0\n\nconfig setup\n  ikev1-policy=accept\n  virtual-private=%v4:10.0.0.0/8,%v4:192.168.0.0/16,%v4:172.16.0.0/12,%v4:!$L2TP_NET,%v4:!$XAUTH_NET\n  uniqueids=no\n\nconn shared\n  left=%defaultroute\n  leftid=$public_ip\n  right=%any\n  encapsulation=yes\n  authby=secret\n  pfs=no\n  rekey=no\n  keyingtries=5\n  dpddelay=30\n  dpdtimeout=300\n  dpdaction=clear\n  ikev2=never\n  ike=aes256-sha2;modp2048,aes128-sha2;modp2048,aes256-sha1;modp2048,aes128-sha1;modp2048\n  phase2alg=aes_gcm-null,aes128-sha1,aes256-sha1,aes256-sha2_512,aes128-sha2,aes256-sha2\n  ikelifetime=24h\n  salifetime=24h\n  sha2-truncbug=no\n\nconn l2tp-psk\n  auto=add\n  leftprotoport=17/1701\n  rightprotoport=17/%any\n  type=transport\n  also=shared\n\nconn xauth-psk\n  auto=add\n  leftsubnet=0.0.0.0/0\n  rightaddresspool=$XAUTH_POOL\n  modecfgdns=$DNS_SRVS\n  leftxauthserver=yes\n  rightxauthclient=yes\n  leftmodecfgserver=yes\n  rightmodecfgclient=yes\n  modecfgpull=yes\n  cisco-unity=yes\n  also=shared\n\ninclude /etc/ipsec.d/*.conf\nEOF\n  if uname -m | grep -qi '^arm'; then\n    if ! modprobe -q sha512; then\n      sed -i '/phase2alg/s/,aes256-sha2_512//' /etc/ipsec.conf\n    fi\n  fi\n  # Specify IPsec PSK\n  conf_bk \"/etc/ipsec.secrets\"\ncat > /etc/ipsec.secrets <<EOF\n%any  %any  : PSK \"$VPN_IPSEC_PSK\"\nEOF\n  # Create xl2tpd config\n  conf_bk \"/etc/xl2tpd/xl2tpd.conf\"\ncat > /etc/xl2tpd/xl2tpd.conf <<EOF\n[global]\nport = 1701\n\n[lns default]\nip range = $L2TP_POOL\nlocal ip = $L2TP_LOCAL\nrequire chap = yes\nrefuse pap = yes\nrequire authentication = yes\nname = l2tpd\npppoptfile = /etc/ppp/options.xl2tpd\nlength bit = yes\nEOF\n  # Set xl2tpd options\n  conf_bk \"/etc/ppp/options.xl2tpd\"\ncat > /etc/ppp/options.xl2tpd <<EOF\n+mschap-v2\nipcp-accept-local\nipcp-accept-remote\nnoccp\nauth\nmtu 1280\nmru 1280\nproxyarp\nlcp-echo-failure 4\nlcp-echo-interval 30\nconnect-delay 5000\nms-dns $DNS_SRV1\nEOF\n  if [ -z \"$VPN_DNS_SRV1\" ] || [ -n \"$VPN_DNS_SRV2\" ]; then\ncat >> /etc/ppp/options.xl2tpd <<EOF\nms-dns $DNS_SRV2\nEOF\n  fi\n  # Create VPN credentials\n  conf_bk \"/etc/ppp/chap-secrets\"\ncat > /etc/ppp/chap-secrets <<EOF\n\"$VPN_USER\" l2tpd \"$VPN_PASSWORD\" *\nEOF\n  conf_bk \"/etc/ipsec.d/passwd\"\n  VPN_PASSWORD_ENC=$(openssl passwd -1 \"$VPN_PASSWORD\")\ncat > /etc/ipsec.d/passwd <<EOF\n$VPN_USER:$VPN_PASSWORD_ENC:xauth-psk\nEOF\n}\n\nupdate_sysctl() {\n  bigecho \"Updating sysctl settings...\"\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/sysctl.conf; then\n    conf_bk \"/etc/sysctl.conf\"\ncat >> /etc/sysctl.conf <<EOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.$NET_IFACE.send_redirects = 0\nnet.ipv4.conf.$NET_IFACE.rp_filter = 0\n\nnet.core.wmem_max = 16777216\nnet.core.rmem_max = 16777216\nnet.ipv4.tcp_rmem = 4096 87380 16777216\nnet.ipv4.tcp_wmem = 4096 87380 16777216\nEOF\n    if modprobe -q tcp_bbr \\\n      && printf '%s\\n%s' \"4.20\" \"$(uname -r)\" | sort -C -V \\\n      && [ -f /proc/sys/net/ipv4/tcp_congestion_control ]; then\ncat >> /etc/sysctl.conf <<'EOF'\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\nEOF\n    fi\n  fi\n}\n\nupdate_iptables() {\n  bigecho \"Updating IPTables rules...\"\n  IPT_FILE=/etc/iptables.rules\n  IPT_FILE2=/etc/iptables/rules.v4\n  ipt_flag=0\n  if ! grep -qs \"hwdsl2 VPN script\" \"$IPT_FILE\"; then\n    ipt_flag=1\n  fi\n  ipi='iptables -I INPUT'\n  ipf='iptables -I FORWARD'\n  ipp='iptables -t nat -I POSTROUTING'\n  res='RELATED,ESTABLISHED'\n  if [ \"$ipt_flag\" = 1 ]; then\n    service fail2ban stop >/dev/null 2>&1\n    iptables-save > \"$IPT_FILE.old-$SYS_DT\"\n    $ipi 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n    $ipi 2 -m conntrack --ctstate INVALID -j DROP\n    $ipi 3 -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipi 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n    $ipi 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n    $ipi 6 -p udp --dport 1701 -j DROP\n    $ipf 1 -m conntrack --ctstate INVALID -j DROP\n    $ipf 2 -i \"$NET_IFACE\" -o ppp+ -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 3 -i ppp+ -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 4 -i ppp+ -o ppp+ -j ACCEPT\n    $ipf 5 -i \"$NET_IFACE\" -d \"$XAUTH_NET\" -m conntrack --ctstate \"$res\" -j ACCEPT\n    $ipf 6 -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -j ACCEPT\n    $ipf 7 -s \"$XAUTH_NET\" -o ppp+ -j ACCEPT\n    iptables -A FORWARD -j DROP\n    $ipp -s \"$XAUTH_NET\" -o \"$NET_IFACE\" -m policy --dir out --pol none -j MASQUERADE\n    $ipp -s \"$L2TP_NET\" -o \"$NET_IFACE\" -j MASQUERADE\n    echo \"# Modified by hwdsl2 VPN script\" > \"$IPT_FILE\"\n    iptables-save >> \"$IPT_FILE\"\n    if [ -f \"$IPT_FILE2\" ]; then\n      conf_bk \"$IPT_FILE2\"\n      /bin/cp -f \"$IPT_FILE\" \"$IPT_FILE2\"\n    fi\n  fi\n}\n\napply_gcp_mtu_fix() {\n  if dmidecode -s system-product-name 2>/dev/null | grep -qi 'Google Compute Engine' \\\n    && ifconfig 2>/dev/null | grep \"$NET_IFACE\" | head -n 1 | grep -qi 'mtu 1460'; then\n    bigecho \"Applying fix for MTU size...\"\n    ifconfig \"$NET_IFACE\" mtu 1500\n    dh_file=\"/etc/dhcp/dhclient.conf\"\n    if grep -qs \"send host-name\" \"$dh_file\" \\\n      && ! grep -qs \"interface-mtu 1500\" \"$dh_file\"; then\n      sed -i\".old-$SYS_DT\" \\\n        \"/send host-name/a \\interface \\\"$NET_IFACE\\\" {\\ndefault interface-mtu 1500;\\nsupersede interface-mtu 1500;\\n}\" \\\n        \"$dh_file\"\n    fi\n  fi\n}\n\nenable_on_boot() {\n  bigecho \"Enabling services on boot...\"\n  IPT_PST=/etc/init.d/iptables-persistent\n  IPT_PST2=/usr/share/netfilter-persistent/plugins.d/15-ip4tables\n  ipt_load=1\n  if [ -f \"$IPT_FILE2\" ] && { [ -f \"$IPT_PST\" ] || [ -f \"$IPT_PST2\" ]; }; then\n    ipt_load=0\n  fi\n  if [ \"$ipt_load\" = 1 ]; then\n    mkdir -p /etc/network/if-pre-up.d\ncat > /etc/network/if-pre-up.d/iptablesload <<'EOF'\n#!/bin/sh\niptables-restore < /etc/iptables.rules\nexit 0\nEOF\n    chmod +x /etc/network/if-pre-up.d/iptablesload\n    if [ -f /usr/sbin/netplan ]; then\n      mkdir -p /etc/systemd/system\ncat > /etc/systemd/system/load-iptables-rules.service <<'EOF'\n[Unit]\nDescription = Load /etc/iptables.rules\nDefaultDependencies=no\n\nBefore=network-pre.target\nWants=network-pre.target\n\nWants=systemd-modules-load.service local-fs.target\nAfter=systemd-modules-load.service local-fs.target\n\n[Service]\nType=oneshot\nExecStart=/etc/network/if-pre-up.d/iptablesload\n\n[Install]\nWantedBy=multi-user.target\nEOF\n      systemctl enable load-iptables-rules 2>/dev/null\n    fi\n  fi\n  for svc in fail2ban ipsec xl2tpd; do\n    update-rc.d \"$svc\" enable >/dev/null 2>&1\n    systemctl enable \"$svc\" 2>/dev/null\n  done\n  if ! grep -qs \"hwdsl2 VPN script\" /etc/rc.local; then\n    if [ -f /etc/rc.local ]; then\n      conf_bk \"/etc/rc.local\"\n      sed --follow-symlinks -i '/^exit 0/d' /etc/rc.local\n    else\n      echo '#!/bin/sh' > /etc/rc.local\n    fi\n    rc_delay=15\n    if uname -m | grep -qi '^arm'; then\n      rc_delay=60\n    fi\ncat >> /etc/rc.local <<EOF\n\n# Added by hwdsl2 VPN script\n(sleep $rc_delay\nservice ipsec restart\nservice xl2tpd restart\necho 1 > /proc/sys/net/ipv4/ip_forward)&\nexit 0\nEOF\n  fi\n}\n\nstart_services() {\n  bigecho \"Starting services...\"\n  sysctl -e -q -p\n  chmod +x /etc/rc.local\n  chmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n  mkdir -p /run/pluto\n  service fail2ban restart 2>/dev/null\n  service ipsec restart 2>/dev/null\n  service xl2tpd restart 2>/dev/null\n}\n\nshow_vpn_info() {\ncat <<EOF\n\n================================================\n\nIPsec VPN server is now ready for use!\n\nConnect to your new VPN with these details:\n\nServer IP: $public_ip\nIPsec PSK: $VPN_IPSEC_PSK\nUsername: $VPN_USER\nPassword: $VPN_PASSWORD\n\nWrite these down. You'll need them to connect!\n\nVPN client setup: https://vpnsetup.net/clients\n\n================================================\n\nEOF\n  if [ ! -e /dev/ppp ]; then\ncat <<'EOF'\nWarning: /dev/ppp is missing, and IPsec/L2TP mode may not work.\n         Please use IKEv2 or IPsec/XAuth mode to connect.\n         Debian 11/10 users, see https://vpnsetup.net/debian10\n\nEOF\n  fi\n}\n\nset_up_ikev2() {\n  status=0\n  if [ -s /opt/src/ikev2.sh ] && [ ! -f /etc/ipsec.d/ikev2.conf ]; then\n    skip_ikev2=0\n    case $VPN_SKIP_IKEV2 in\n      [yY][eE][sS])\n        skip_ikev2=1\n        ;;\n    esac\n    if [ \"$skip_ikev2\" = 0 ]; then\n      sleep 1\n      VPN_DNS_NAME=\"$VPN_DNS_NAME\" VPN_PUBLIC_IP=\"$public_ip\" \\\n      VPN_CLIENT_NAME=\"$VPN_CLIENT_NAME\" VPN_XAUTH_POOL=\"$VPN_XAUTH_POOL\" \\\n      VPN_DNS_SRV1=\"$VPN_DNS_SRV1\" VPN_DNS_SRV2=\"$VPN_DNS_SRV2\" \\\n      VPN_PROTECT_CONFIG=\"$VPN_PROTECT_CONFIG\" \\\n      VPN_CLIENT_VALIDITY=\"$VPN_CLIENT_VALIDITY\" \\\n      /bin/bash /opt/src/ikev2.sh --auto || status=1\n    fi\n  elif [ -s /opt/src/ikev2.sh ]; then\ncat <<'EOF'\n================================================\n\nIKEv2 is already set up on this server.\n\nNext steps: Configure IKEv2 clients. See:\nhttps://vpnsetup.net/clients\n\nTo manage IKEv2 clients, run: sudo ikev2.sh\n\n================================================\n\nEOF\n  fi\n}\n\nvpnsetup() {\n  check_root\n  check_vz\n  check_lxc\n  check_os\n  check_iface\n  check_creds\n  check_dns\n  check_server_dns\n  check_client_name\n  check_subnets\n  check_iptables\n  check_libreswan\n  start_setup\n  wait_for_apt\n  update_apt_cache\n  install_setup_pkgs\n  detect_ip\n  install_vpn_pkgs\n  install_fail2ban\n  get_helper_scripts\n  get_libreswan\n  install_libreswan\n  create_vpn_config\n  update_sysctl\n  update_iptables\n  apply_gcp_mtu_fix\n  enable_on_boot\n  start_services\n  show_vpn_info\n  set_up_ikev2\n}\n\n## Defer setup until we have the complete script\nvpnsetup \"$@\"\n\nexit \"$status\"\n"
        }
      ]
    }
  ]
}