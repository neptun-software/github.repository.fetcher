{
  "metadata": {
    "timestamp": 1736568955157,
    "page": 2,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "sickcodes/Docker-OSX",
      "stars": 49265,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.1220703125,
          "content": "[submodule \"osx-serial-generator\"]\n\tpath = osx-serial-generator\n\turl = https://github.com/sickcodes/osx-serial-generator.git\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.3134765625,
          "content": "|Version|Date|Notes|\n|---|---|---|\n|   |2021-09-09|Add Monterey|\n|   |2021-08-27|Add iPhone passthrough OTA!|\n|6.0|2021-08-25|Added naked-auto. Keep kernel at 5.13, even tho it's just for supermin.|\n|5.0|2021-07-25|Retire glibc patch. Retire file command patch. Add bootmenu=on.|\n|   |2021-07-08|Add CPUID_FLAGS to edit the CPUID flags on the fly.|\n|4.4|2021-05-06|Prepare nakedvnc for hub.docker.com. Add `ENV BOOT_ARGS=` to supply additon boot arguments, for example, `vmx,rdtscp`. Add `ENV CPU=Penryn` to allow changes to the CPU emulation, for example, `Skylake-Client`, or see [more examples here](https://manpages.ubuntu.com/manpages/disco/man7/qemu-cpu-models.7.html).| \n|   |2021-05-04|Disable arbitrary chown warning| \n|   |2021-04-27|Fixed missing sudo| \n|   |2021-04-18|Add LIBGUESTFS debug & trace commands, exit on fail when creating bootdisks. Silence touch errors.| \n|4.3|2021-03-24|Enable interactive QEMU again. Remove envsubst since we are already using bash... Add set -x flag| \n|4.2|2021-03-24|Add all ENV variables to each dockerfile for readability. Add RAM allocation buffer and cache drop bug fix. Add kvm and libvirt groups. Add `IMAGE_FORMAT=qcow2` to allow `IMAGE_FORMAT=raw` too.|\n|   |2021-03-19|Use RAM=3 as the default RAM allocation. Add instructions to clear buff/cache.|\n|   |2021-03-17|Add RAM=max and RAM=half to dynamically select ram at runtime (DEFAULT).|\n|   |2021-03-06|Change envs to require --envs. Automatically enable --envs if --output-env is used. Same for plists, bootdisks. Fix help ugliness and sanity of generate serial scripts. Fix bootdisk not getting written to persistent file when using NOPICKER=true. NOPICKER=true is overridden by a custom plist now anyway. Remove useless case statements. Allow -e HEADLESS=true as human readable alternative to -e DISPLAY=:99.|\n|4.1|2021-03-04|Add `-e MASTER_PLIST_URL` to all images to allow using your own remote plist.|\n|   |2021-03-03|Add `WIDTH` and `HEIGHT` to set the x and y resolutions, use in conjuction with serial numbers.|\n|   |2021-03-02|Add ADDITIONAL_PORTS, for example `-e ADDITIONAL_PORTS='hostfwd=tcp::23-:23,'`|\n|4.0|2021-02-27|Add big-sur support. Use `sickcodes/docker-osx:big-sur` or build using `--build-arg VERSION=11`|\n|   |2021-02-26|Change `-e NOPICKER=true` to simply do `sed -i '/^.*InstallMedia.*/d' Launch.sh` and `export BOOTDISK=/home/arch/OSX-KVM/OpenCore-Catalina/OpenCore-nopicker.qcow2`.|\n|3.2|2021-02-25|Add a script to generate unique machine serial numbers. Add a script to generate a bootdisk from given serial numbers. Add Linux for libguestfs which allows the docker container to make QEMU bootdisks with specific serial numbers.|\n|   |2021-02-21|Add NOPICKER environment variable to ALL images.|\n|3.1|2021-02-21|Remove testing repos. Switch to base-devel. We shouldn't be using testing repos in a Dockerfile for light increase in stability. Add the mandatory glibc patch to every pacman until someone upstream fixes it.|\n|   |2021-02-07|Add NOPICKER environment variable to :naked image for effortless boot toggling.|\n|   |2021-02-07|Add MAC_ADDRESS environment variable.|\n|   |2021-02-03|Employ wget --no-verbose to avoid buffer overload in hub.docker.com.|\n|   |2021-02-03|Reduce build size.|\n|   |2021-01-27|Add OSX_COMMANDS to allow runtime commands on :auto image.|\n|   |2021-01-26|Removed most pointless VOLUME build commands.|\n|3.0|2021-01-23|Add fast mode boot straight to shell. And -v $PWD/disk.img:/image for all Dockerfiles|\n|   |2021-01-22|Add additional helm chart instructions and files.|\n|   |2021-01-15|Fix helm initial disk creation process and add installation instructions.|\n|   |2021-01-14|Add Helm Chart for Kubernetes support.|\n|   |2021-01-08|Use IMAGE_PATH as a variable during envsubst for the full path of mac_hdd_ng.img. In preparation for full auto.|\n|   |2021-01-07|Fix sounds errors and sshd missing on latest build.|\n|2.7|2021-01-05|Add rankmirrors. Remove gibMacOS. Replace iptables with iptables-nft. Remove libguestfs.|\n|   |2020-12-17|Remove unnecessary WORKDIR commands.|\n|   |2020-12-16|Reduce image size by cloning OSX-KVM to only 1 depth level. Simplify mkdir && chown to mkdir -m|\n|   |2020-10-06|Add the ability to skip the boot screen with ./Launch-nopicker.sh|\n|   |2020-10-05|Add vim/vi and nano to the container.|\n|2.6|2020-09-26|Increase version.|\n|   |2020-09-25|Add some WORKDIR fixes.|\n|   |2020-09-24|Clear pacman cache after use to reduce disk size significantly. Add various shell expansions to inline variables. Add set -eu to Launch.sh. Add a shebang to Launch.sh. Add tcg acceleration as a fallback to kvm. Remove need for display **(This change is reverted later)**. Chown /dev/kvm and /dev/snd. Remove --privileged by specifying required passthroughs. Add audio driver arguments to satisfy QEMU **(USB SoundCard recommended)**. Tidy Launch.sh to reduce image by 2.5GB (from 6GB).  |\n|2.5|2020-09-20|Critical changes to TigerVNC due to upstream overhaul in TigerVNC.|\n|   |2020-09-20|Replace ebtables with iptables-nft.|\n|   |2020-08-29|Increase default OSX to 10.15.6 and add SCREEN_SHARE_PORT=5900 ENV variable.|\n|   |2020-08-23|Add OSX Screen Sharing port forwarding.|\n|   |2020-08-23|Clear /tmp/.X99-lock before starting the VNC version.|\n|   |2020-07-02|Refresh the docker-compose file.|\n|   |2020-06-22|Add some mirrors to the container.|\n|   |2020-06-22|Add more force updates to pacman.|\n|   |2020-06-18|Significantly reduce image layer count by concatenating groups of commands.|\n|   |2020-06-18|Use the mainline image as the base image for the VNC version.|\n|2.0|2020-06-15|Change  default OSX version from 10.14.6 to 10.15.5. Add SSH port forwarding inside the container thru to the guest. Increase default arbitrary disk size to 200G. Force update pacman to prevent old mirror links. Add custom Launch.sh script. Add customizable RAM, SMP, CORES, EXTRA and INTERNAL_SSH_PORT|\n|   |2020-06-14|Remove yay|\n|   |2020-06-10|Add an OR for attemping to kill non-existent VNC lock files.|\n|   |2020-06-09|Instruct gibMacOS to download recovery disk only.|\n|   |2020-06-09|Remove VNC lockfile from killed containers preventing a restart.|\n|   |2020-06-08|Add docker-compose.yml|\n|   |2020-06-07|Add VNC version inside the vnc folder.|\n|   |2020-06-05|Remove systemctl enable libvirtd.service/virtlogd.service since Docker doesn't have systemd|\n|   |2020-06-04|Removed svm\\|vmx via /proc/cpuinfo check which fails on hub.docker.com|\n|1.0|2020-06-04|Initial Release|\n\n"
        },
        {
          "name": "CREDITS.md",
          "type": "blob",
          "size": 6.5166015625,
          "content": "# Credits\n\nThe most important part of the project. You.\n\n## Upstream Acknowledgements:\n\nThis project uses OSX-KVM from https://github.com/kholia/OSX-KVM and fully appreciates the work done by [@Kholia](https://github.com/Kholia) and all the contributors who are listed: [https://github.com/kholia/OSX-KVM/blob/master/CREDITS.md](https://github.com/kholia/OSX-KVM/blob/master/CREDITS.md)\n\nThis project also uses KVM-OpenCore from https://github.com/Leoyzen/KVM-Opencore and fully appreciates the work done by [@Leoyzen](https://github.com/Leoyzen).\n\nWe use a special fork by [Nicholas Sherlock](https://www.nicksherlock.com/) of KVM-Opencore https://github.com/thenickdude/KVM-Opencore and thank Nick for his awesome upstream work!\n\nThis project now uses the fantastic OpenCore bootloader from the community OpenCore project: https://github.com/acidanthera/OpenCorePkg. You can join their [Subreddit here](https://www.reddit.com/r/hackintosh/)!\n\n## These credits refer to the legendary contributors to this repository:\n\n[@GreeFine](https://github.com/GreeFine) - Readme Typo #9 \n\n[@parasquid](https://github.com/parasquid) - Docker compose file\n\n[@matusnovak](https://github.com/matusnovak) - Kill badly terminated old vnc session before vnc starts and fix gtk initialization failed #31\n\n[@m1k1o](https://github.com/m1k1o) - Kill badly terminated old vnc session before vnc starts and fix gtk initialization failed #31\n\n[@qcasey](https://github.com/qcasey) - Removed unnecessary yay in Remove yay dependancy #40 \n\n[@tlierdotfr](https://github.com/tlierdotfr) - Reduce number of layers in Dockerfile \n\n[@Julioevm](https://github.com/Julioevm) - Update docker-compose.yml #57\n\n[@jviotti](https://github.com/jviotti) - Auto-boot thru ShowPicker\n\n[@IAmBenMitchell]([https://github.com/MrBenFTW](https://github.com/iambenmitchell)) - Updated macOS version 10.15.5 -> 10.15.6, Enabled screen sharing port forwarding, Removed the need to remove 1gb from the partition.\n\n[@hoantp](https://github.com/hoantp) - Initialized TigerVNC 1.11.0 fix\n\n[@jimdigriz](https://github.com/jimdigriz) - Epic fixes: image size, shellisms, fallback2kvm, unprivileged mode https://github.com/sickcodes/Docker-OSX/pull/82\n\n[@NickZhouNan](https://github.com/NickZhouNan) - Bug fix with changed WORKDIR\n\n[@MrBenFTW](https://github.com/MrBenFTW) - Added IP forwarding hot tips, useful for boosting bridged networking in remote environments.\n\n[@mikob](https://github.com/mikob) - Added important warning for Xcode users to reserve 60GB++ - Made instructions more clear for those needing Xcode #94 \n\n[@AdamMomen](https://github.com/AdamMomen) - Fixed automatic boot vnc-version container instructions for better usablility\n\n[@PeterDaveHello](https://github.com/PeterDaveHello) - Simplify .ssh directory setup process in Dockerfile #111\n\n[@PeterDaveHello](https://github.com/PeterDaveHello) - Reduce image size by setting git clone depth #110\n\n[@PeterDaveHello](https://github.com/PeterDaveHello) - Reduce Dockerfile instructions and Docker image layers #112\n\n[@weskerfoot](https://github.com/weskerfoot) Docs updates: usb passthrough, headless mode, disk space reduction guide #113\n\n[@PeterDaveHello](https://github.com/PeterDaveHello) - Improve Dockerfile #121 \n\n[@cephasara](https://github.com/cephasara) - Add helm chart #124 \n\n[@cephasara](https://github.com/cephasara) - Fix helm initial disk creation process and add installation instructions #125\n\n[@cephasara](https://github.com/cephasara) - Add gpu passthrough support as well as dynamic OpenCore chainloader regeneration #132\n\n[@cephasara](https://github.com/cephasara) - Fix helm installation failure and cleanup values organization #134\n\n[@prometheas](https://github.com/prometheas) - docs: fix broken multi-line docker command #140 \n\n[@MrBenFTW](https://github.com/MrBenFTW) - Tempfix for arch #150\n\n[@edsonboldrini](https://github.com/edsonboldrini) - Update README.md #161\n\n[@TheHackerCoding](https://github.com/TheHackerCoding) - Typo in README.md #194\n\n[@panos](https://github.com/panos) - Improved README #212 \n\n[@ggjulio](https://github.com/ggjulio) - Restarting an \"auto\" container #216\n\n[@panos](https://github.com/panos) - Improved README #212\n\n[@panos](https://github.com/panos) - Made further improvements to the README #219\n\n[@kaoudis](https://github.com/kaoudis) README / troubleshooting docs improvements #235\n\n[@a10kiloham](https://github.com/a10kiloham) - Dockerfile for :naked image with VNC support #245 \n\n[@a10kiloham](https://github.com/a10kiloham) - Adding Bluebubbles as an example use case #250 \n\n[@aronzvi](https://github.com/aronzvi) - Fixed Failed to boot OSX with GENERATE_UNIQUE #244\n\n[@tinjaw](https://github.com/tinjaw) - Fixed Type #258\n\n[@m-zheng](https://github.com/m-zheng) - Update README.md #260 \n\n[@johnjhacking](https://github.com/johnjhacking) - Change call function to Popen #288 \n\n[@allansrc](https://github.com/allansrc) - Update Doc detail for run on WLS #318 \n\n[@mcandre](https://github.com/mcandre) - fix typo #334 \n\n[@cybik](https://github.com/cybik) Spice fix #337\n\n[@Silfalion](https://github.com/Silfalion) - [https://github.com/Silfalion/Iphone_docker_osx_passthrough](https://github.com/Silfalion/Iphone_docker_osx_passthrough)\n\n[@chirag350](https://github.com/chirag350) use LABEL instead of MAINTAINER since MAINTAINER is deprecated #352 \n\n[@Buthrakaur](https://github.com/Buthrakaur) readme - improve instructions for running on windows #361\n\n[@TheHackerCoding](https://github.com/TheHackerCoding) Typo in README #367 \n\n[@cameronsteele](https://github.com/cameronsteele) fix Big Sur build example #378 \n\n[@eggplants](https://github.com/eggplants) Fix command to launch sickcodes/docker-osx:auto #366 \n\n[@martinmullins](https://github.com/martinmullins) Notes for mounting an NFS folder from a linux host #392\n\n[@kimjammer](https://github.com/kimjammer) Readme - Added instructions for using WSLg's built in X11 server #395\n\n[@jk2K](https://github.com/jk2K) fix: support dynamic change of Base image #408\n\n[@MikeCoder96](https://github.com/MikeCoder96) Update README.md with WSL how to #412\n\n[@aslafy-z](https://github.com/aslafy-z) chore(docs): update helm requirements list style #420\n\n[@kimjammer](https://github.com/kimjammer) Update Windows Installation section #422 \n\n[@Mhartig](https://github.com/Mhartig) -  Worked out issue `Enter a number (default=1): error: invalid number: y`\n\n[@felipestt](https://github.com/felipestt)  Use more CPU Cores/SMP' broken #440 \n\n[@routmoute](https://github.com/routmoute) README: add PulseAudio with WSLg #442 \n[@dulatello08](https://github.com/dulatello08) Update README.md #452\n\n[@Anthropohedron](https://github.com/Anthropohedron) Added FAQ.md\n\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 17.5810546875,
          "content": "#!/usr/bin/docker\n#     ____             __             ____  ______  __\n#    / __ \\____  _____/ /_____  _____/ __ \\/ ___/ |/ /\n#   / / / / __ \\/ ___/ //_/ _ \\/ ___/ / / /\\__ \\|   /\n#  / /_/ / /_/ / /__/ ,< /  __/ /  / /_/ /___/ /   |\n# /_____/\\____/\\___/_/|_|\\___/_/   \\____//____/_/|_|\n#\n# Title:            Docker-OSX (Mac on Docker)\n# Author:           Sick.Codes https://twitter.com/sickcodes\n# Version:          6.0\n# License:          GPLv3+\n# Repository:       https://github.com/sickcodes/Docker-OSX\n# Website:          https://sick.codes\n#\n# All credits for OSX-KVM and the rest at @Kholia's repo: https://github.com/kholia/osx-kvm\n# OpenCore support go to https://github.com/Leoyzen/KVM-Opencore\n# and https://github.com/thenickdude/KVM-Opencore/\n#\n# This Dockerfile automates the installation of Docker-OSX\n# It will build a 200GB container. You can change the size using build arguments.\n# This Dockerfile builds on top of the work done by Dhiru Kholia, and many others.\n#\n# Build:\n#\n#       docker build -t docker-osx .\n#       docker build -t docker-osx --build-arg VERSION=10.15.5 --build-arg SIZE=200G .\n#       docker build -t docker-osx-sonoma --build-arg BRANCH=sonoma --build-arg SHORTNAME=sonoma .\n#\n# Basic Run:\n#\n#       docker run --device /dev/kvm --device /dev/snd -v /tmp/.X11-unix:/tmp/.X11-unix -e \"DISPLAY=${DISPLAY:-:0.0}\" sickcodes/docker-osx:latest\n#\n# Run with SSH:\n#\n#       docker run --device /dev/kvm --device /dev/snd -e RAM=6 -p 50922:10022 -v /tmp/.X11-unix:/tmp/.X11-unix -e \"DISPLAY=${DISPLAY:-:0.0}\" sickcodes/docker-osx:latest\n#       # ssh fullname@localhost -p 50922\n#\n# Optargs:\n#\n#       -v $PWD/disk.img:/image\n#       -e SIZE=200G\n#       -e VERSION=10.15.6\n#       -e RAM=5\n#       -e SMP=4\n#       -e CORES=4\n#       -e EXTRA=\n#       -e INTERNAL_SSH_PORT=10022\n#       -e MAC_ADDRESS=\n#\n# Extra QEMU args:\n#\n#       docker run ... -e EXTRA=\"-usb -device usb-host,hostbus=1,hostaddr=8\" ...\n#       # you will also need to pass the device to the container\n\nFROM archlinux:base-devel\nLABEL maintainer='https://twitter.com/sickcodes <https://sick.codes>'\n\nSHELL [\"/bin/bash\", \"-c\"]\n\n# change disk size here or add during build, e.g. --build-arg VERSION=10.14.5 --build-arg SIZE=50G\nARG SIZE=200G\nARG PARALLEL_DOWNLOADS=30\n\n# OPTIONAL: Arch Linux server mirrors for super fast builds\n# set RANKMIRRORS to any value other that nothing, e.g. -e RANKMIRRORS=true\nRUN perl -i -p -e s/^\\#Color/Color$'\\n'ParallelDownloads\\ =\\ ${PARALLEL_DOWNLOADS:=30}/g /etc/pacman.conf \n\nARG RANKMIRRORS\nARG MIRROR_COUNTRY=US\nARG MIRROR_COUNT=10\n\nRUN tee /etc/pacman.d/mirrorlist <<< 'Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch'\n\n# Fixes issue with invalid GPG keys: update the archlinux-keyring package to get the latest keys, then remove and regenerate gnupg keys\nRUN pacman -Sy archlinux-keyring --noconfirm \\\n    && rm -rf /etc/pacman.d/gnupg \\\n    && pacman-key --init \\\n    && pacman-key --populate archlinux\n\nRUN if [[ \"${RANKMIRRORS}\" ]]; then \\\n        { pacman -Sy wget --noconfirm || pacman -Syu wget --noconfirm ; } \\\n        ; wget -O ./rankmirrors \"https://raw.githubusercontent.com/sickcodes/Docker-OSX/${BRANCH:=master}/rankmirrors\" \\\n        ; wget -O- \"https://www.archlinux.org/mirrorlist/?country=${MIRROR_COUNTRY:-US}&protocol=https&use_mirror_status=on\" \\\n        | sed -e 's/^#Server/Server/' -e '/^#/d' \\\n        | head -n \"$((${MIRROR_COUNT:-10}+1))\" \\\n        | bash ./rankmirrors --verbose --max-time 5 - > /etc/pacman.d/mirrorlist \\\n        && cat /etc/pacman.d/mirrorlist \\\n    ; fi\n\nRUN tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://keyserver.ubuntu.com' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://hkps.pool.sks-keyservers.net:443' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://pgp.mit.edu:11371' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.openpgp.org' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.mailvelope.com'\n\n# This fails on hub.docker.com, useful for debugging in cloud\n# RUN [[ $(egrep -c '(svm|vmx)' /proc/cpuinfo) -gt 0 ]] || { echo KVM not possible on this host && exit 1; }\n\n# RUN tee -a /etc/pacman.conf <<< '[community-testing]' \\\n#     && tee -a /etc/pacman.conf <<< 'Include = /etc/pacman.d/mirrorlist'\n\nRUN pacman -Syu git zip vim nano alsa-utils openssh --noconfirm \\\n    && ln -s /bin/vim /bin/vi \\\n    && useradd arch -p arch \\\n    && tee -a /etc/sudoers <<< 'arch ALL=(ALL) NOPASSWD: ALL' \\\n    && mkdir -p /home/arch \\\n    && chown arch:arch /home/arch\n\n# allow ssh to container\nRUN mkdir -p -m 700 /root/.ssh\n\nWORKDIR /root/.ssh\nRUN touch authorized_keys \\\n    && chmod 644 authorized_keys\n\nWORKDIR /etc/ssh\nRUN tee -a sshd_config <<< 'AllowTcpForwarding yes' \\\n    && tee -a sshd_config <<< 'PermitTunnel yes' \\\n    && tee -a sshd_config <<< 'X11Forwarding yes' \\\n    && tee -a sshd_config <<< 'PasswordAuthentication yes' \\\n    && tee -a sshd_config <<< 'PermitRootLogin yes' \\\n    && tee -a sshd_config <<< 'PubkeyAuthentication yes' \\\n    && tee -a sshd_config <<< 'HostKey /etc/ssh/ssh_host_rsa_key' \\\n    && tee -a sshd_config <<< 'HostKey /etc/ssh/ssh_host_ecdsa_key' \\\n    && tee -a sshd_config <<< 'HostKey /etc/ssh/ssh_host_ed25519_key'\n\nUSER arch\n\n# download OSX-KVM for the submodules\nRUN git clone --recurse-submodules --depth 1 https://github.com/kholia/OSX-KVM.git /home/arch/OSX-KVM\n\n# enable ssh\n# docker exec .... ./enable-ssh.sh\nUSER arch\n\nWORKDIR /home/arch/OSX-KVM\n\nRUN touch enable-ssh.sh \\\n    && chmod +x ./enable-ssh.sh \\\n    && tee -a enable-ssh.sh <<< '[[ -f /etc/ssh/ssh_host_rsa_key ]] || \\' \\\n    && tee -a enable-ssh.sh <<< '[[ -f /etc/ssh/ssh_host_ed25519_key ]] || \\' \\\n    && tee -a enable-ssh.sh <<< '[[ -f /etc/ssh/ssh_host_ed25519_key ]] || \\' \\\n    && tee -a enable-ssh.sh <<< 'sudo /usr/bin/ssh-keygen -A' \\\n    && tee -a enable-ssh.sh <<< 'nohup sudo /usr/bin/sshd -D &'\n\n# QEMU CONFIGURATOR\n# set optional ram at runtime -e RAM=16\n# set optional cores at runtime -e SMP=4 -e CORES=2\n# add any additional commands in QEMU cli format -e EXTRA=\"-usb -device usb-host,hostbus=1,hostaddr=8\"\n\n# default env vars, RUNTIME ONLY, not for editing in build time.\n\n# RUN yes | sudo pacman -Syu qemu libvirt dnsmasq virt-manager bridge-utils edk2-ovmf netctl libvirt-dbus --overwrite --noconfirm\n\nRUN yes | sudo pacman -Syu bc qemu-desktop libvirt dnsmasq virt-manager bridge-utils openresolv jack2 ebtables edk2-ovmf netctl libvirt-dbus wget scrot --overwrite --noconfirm \\\n    && yes | sudo pacman -Scc\n\nWORKDIR /home/arch/OSX-KVM\n\n# fix invalid signature on old libguestfs\nARG SIGLEVEL=Never\n\nRUN sudo tee -a /etc/pacman.conf <<< \"SigLevel = ${SIGLEVEL}\" \\\n    && sudo tee -a /etc/pacman.conf <<< 'RemoteFileSigLevel = Optional' \\\n    && sudo sed -i -e 's/^\\#RemoteFileSigLevel/RemoteFileSigLevel/g' /etc/pacman.conf\n\nARG LINUX=true\n\n# required to use libguestfs inside a docker container, to create bootdisks for docker-osx on-the-fly\n# reminder this is what makes :naked image larger than expected\nRUN if [[ \"${LINUX}\" == true ]]; then \\\n        sudo pacman -Syu linux linux-headers archlinux-keyring guestfs-tools mkinitcpio pcre pcre2 --noconfirm \\\n        && libguestfs-test-tool \\\n        && rm -rf /var/tmp/.guestfs-* \\\n        && yes | sudo pacman -Scc \\\n    ; fi\n\n# optional --build-arg to change branches for testing\nARG BRANCH=master\nARG REPO='https://github.com/sickcodes/Docker-OSX.git'\nRUN git clone --recurse-submodules --depth 1 --branch \"${BRANCH:=master}\" \"${REPO:=https://github.com/sickcodes/Docker-OSX.git}\"\n\nRUN touch Launch.sh \\\n    && chmod +x ./Launch.sh \\\n    && tee -a Launch.sh <<< '#!/bin/bash' \\\n    && tee -a Launch.sh <<< 'set -eux' \\\n    && tee -a Launch.sh <<< 'sudo chown    $(id -u):$(id -g) /dev/kvm 2>/dev/null || true' \\\n    && tee -a Launch.sh <<< 'sudo chown -R $(id -u):$(id -g) /dev/snd 2>/dev/null || true' \\\n    && tee -a Launch.sh <<< '[[ \"${RAM}\" = max ]] && export RAM=\"$((\"$(head -n1 /proc/meminfo | tr -dc \"[:digit:]\") / 1000000\"))\"' \\\n    && tee -a Launch.sh <<< '[[ \"${RAM}\" = half ]] && export RAM=\"$((\"$(head -n1 /proc/meminfo | tr -dc \"[:digit:]\") / 2000000\"))\"' \\\n    && tee -a Launch.sh <<< 'sudo chown -R $(id -u):$(id -g) /dev/snd 2>/dev/null || true' \\\n    && tee -a Launch.sh <<< 'exec qemu-system-x86_64 -m ${RAM:-4}000 \\' \\\n    && tee -a Launch.sh <<< '-cpu ${CPU:-Penryn},${CPUID_FLAGS:-vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check,}${BOOT_ARGS} \\' \\\n    && tee -a Launch.sh <<< '-machine q35,${KVM-\"accel=kvm:tcg\"} \\' \\\n    && tee -a Launch.sh <<< '-smp ${CPU_STRING:-${SMP:-4},cores=${CORES:-4}} \\' \\\n    && tee -a Launch.sh <<< '-device qemu-xhci,id=xhci \\' \\\n    && tee -a Launch.sh <<< '-device usb-kbd,bus=xhci.0 -device usb-tablet,bus=xhci.0 \\' \\\n    && tee -a Launch.sh <<< '-device isa-applesmc,osk=ourhardworkbythesewordsguardedpleasedontsteal\\(c\\)AppleComputerInc \\' \\\n    && tee -a Launch.sh <<< '-drive if=pflash,format=raw,readonly=on,file=/home/arch/OSX-KVM/OVMF_CODE.fd \\' \\\n    && tee -a Launch.sh <<< '-drive if=pflash,format=raw,file=/home/arch/OSX-KVM/OVMF_VARS-1024x768.fd \\' \\\n    && tee -a Launch.sh <<< '-smbios type=2 \\' \\\n    && tee -a Launch.sh <<< '-audiodev ${AUDIO_DRIVER:-alsa},id=hda -device ich9-intel-hda -device hda-duplex,audiodev=hda \\' \\\n    && tee -a Launch.sh <<< '-device ich9-ahci,id=sata \\' \\\n    && tee -a Launch.sh <<< '-drive id=OpenCoreBoot,if=none,snapshot=on,format=qcow2,file=${BOOTDISK:-/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2} \\' \\\n    && tee -a Launch.sh <<< '-device ide-hd,bus=sata.2,drive=OpenCoreBoot \\' \\\n    && tee -a Launch.sh <<< '-device ide-hd,bus=sata.3,drive=InstallMedia \\' \\\n    && tee -a Launch.sh <<< '-drive id=InstallMedia,if=none,file=/home/arch/OSX-KVM/BaseSystem.img,format=${BASESYSTEM_FORMAT:-qcow2} \\' \\\n    && tee -a Launch.sh <<< '-drive id=MacHDD,if=none,file=${IMAGE_PATH:-/home/arch/OSX-KVM/mac_hdd_ng.img},format=${IMAGE_FORMAT:-qcow2} \\' \\\n    && tee -a Launch.sh <<< '-device ide-hd,bus=sata.4,drive=MacHDD \\' \\\n    && tee -a Launch.sh <<< '-netdev user,id=net0,hostfwd=tcp::${INTERNAL_SSH_PORT:-10022}-:22,hostfwd=tcp::${SCREEN_SHARE_PORT:-5900}-:5900,${ADDITIONAL_PORTS} \\' \\\n    && tee -a Launch.sh <<< '-device ${NETWORKING:-vmxnet3},netdev=net0,id=net0,mac=${MAC_ADDRESS:-52:54:00:09:49:17} \\' \\\n    && tee -a Launch.sh <<< '-monitor stdio \\' \\\n    && tee -a Launch.sh <<< '-boot menu=on \\' \\\n    && tee -a Launch.sh <<< '-vga vmware \\' \\\n    && tee -a Launch.sh <<< '${EXTRA:-}'\n\n# docker exec containerid mv ./Launch-nopicker.sh ./Launch.sh\n# This is now a legacy command.\n# You can use -e BOOTDISK=/bootdisk with -v ./bootdisk.img:/bootdisk\n\n### LEGACY CODE\nRUN grep -v InstallMedia ./Launch.sh > ./Launch-nopicker.sh \\\n    && chmod +x ./Launch-nopicker.sh \\\n    && sed -i -e s/OpenCore\\.qcow2/OpenCore\\-nopicker\\.qcow2/ ./Launch-nopicker.sh\n###\n\nUSER arch\n\nENV USER=arch\n\n# These are hardcoded serials for non-iMessage related research\n# Overwritten by using GENERATE_UNIQUE=true\n# Upstream removed nopicker, so we are adding it back in, at build time\n# Once again, this is just for the Docker build so there is a default nopicker image there\n\n# libguestfs verbose\nENV LIBGUESTFS_DEBUG=1\nENV LIBGUESTFS_TRACE=1\n\nARG STOCK_DEVICE_MODEL=iMacPro1,1\nARG STOCK_SERIAL=C02TM2ZBHX87\nARG STOCK_BOARD_SERIAL=C02717306J9JG361M\nARG STOCK_UUID=007076A6-F2A2-4461-BBE5-BAD019F8025A\nARG STOCK_MAC_ADDRESS=00:0A:27:00:00:00\nARG STOCK_WIDTH=1920\nARG STOCK_HEIGHT=1080\nARG STOCK_MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist\nARG STOCK_MASTER_PLIST_URL_NOPICKER=https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-nopicker-custom.plist\nARG STOCK_BOOTDISK=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2\nARG STOCK_BOOTDISK_NOPICKER=/home/arch/OSX-KVM/OpenCore/OpenCore-nopicker.qcow2\n\nRUN ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n    --master-plist-url=\"${STOCK_MASTER_PLIST_URL}\" \\\n    --model \"${STOCK_DEVICE_MODEL}\" \\\n    --serial \"${STOCK_SERIAL}\" \\\n    --board-serial \"${STOCK_BOARD_SERIAL}\" \\\n    --uuid \"${STOCK_UUID}\" \\\n    --mac-address \"${STOCK_MAC_ADDRESS}\" \\\n    --width \"${STOCK_WIDTH}\" \\\n    --height \"${STOCK_HEIGHT}\" \\\n    --output-bootdisk \"${STOCK_BOOTDISK}\" || exit 1 \\\n    ; rm -rf /var/tmp/.guestfs-*\n\nRUN ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n    --master-plist-url=\"${STOCK_MASTER_PLIST_URL_NOPICKER}\" \\\n    --model \"${STOCK_DEVICE_MODEL}\" \\\n    --serial \"${STOCK_SERIAL}\" \\\n    --board-serial \"${STOCK_BOARD_SERIAL}\" \\\n    --uuid \"${STOCK_UUID}\" \\\n    --mac-address \"${STOCK_MAC_ADDRESS}\" \\\n    --width \"${STOCK_WIDTH}\" \\\n    --height \"${STOCK_HEIGHT}\" \\\n    --output-bootdisk \"${STOCK_BOOTDISK_NOPICKER}\" || exit 1 \\\n    ; rm -rf /var/tmp/.guestfs-*\n\n### symlink the old directory as upstream has renamed a directory. Symlinking purely for backwards compatability!\nRUN ln -s /home/arch/OSX-KVM/OpenCore /home/arch/OSX-KVM/OpenCore-Catalina || true\n####\n\n#### SPECIAL RUNTIME ARGUMENTS BELOW\n# env -e ADDITIONAL_PORTS with a comma\n# for example, -e ADDITIONAL_PORTS=hostfwd=tcp::23-:23,\nENV ADDITIONAL_PORTS=\n\n# since the Makefile uses raw, and raw uses the full disk amount\n# we want to use a compressed qcow2\n# ENV BASESYSTEM_FORMAT=raw\nENV BASESYSTEM_FORMAT=qcow2\n\n# add additional QEMU boot arguments\nENV BOOT_ARGS=\n\nENV BOOTDISK=\n\n# edit the CPU that is being emulated\nENV CPU=Penryn\nENV CPUID_FLAGS='vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on,+ssse3,+sse4.2,+popcnt,+avx,+aes,+xsave,+xsaveopt,check,'\n\nENV DISPLAY=:0.0\n\n# Deprecated\nENV ENV=/env\n\n# Boolean for generating a bootdisk with new random serials.\nENV GENERATE_UNIQUE=false\n\n# Boolean for generating a bootdisk with specific serials.\nENV GENERATE_SPECIFIC=false\n\nENV IMAGE_PATH=/home/arch/OSX-KVM/mac_hdd_ng.img\nENV IMAGE_FORMAT=qcow2\n\nENV KVM='accel=kvm:tcg'\n\nENV MASTER_PLIST_URL=\"https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist\"\n\n# ENV NETWORKING=e1000-82545em\nENV NETWORKING=vmxnet3\n\n# boolean for skipping the disk selection menu at in the boot process\nENV NOPICKER=false\n\n# dynamic RAM options for runtime\nENV RAM=4\n# ENV RAM=max\n# ENV RAM=half\n\n# The x and y coordinates for resolution.\n# Must be used with either -e GENERATE_UNIQUE=true or -e GENERATE_SPECIFIC=true.\nENV WIDTH=1920\nENV HEIGHT=1080\n\nVOLUME [\"/tmp/.X11-unix\"]\n\n# check if /image is a disk image or a directory. This allows you to optionally use -v disk.img:/image\n# NOPICKER is used to skip the disk selection screen\n# GENERATE_UNIQUE is used to generate serial numbers on boot.\n# /env is a file that you can generate and save using -v source.sh:/env\n# the env file is a file that you can carry to the next container which will supply the serials numbers.\n# GENERATE_SPECIFIC is used to either accept the env serial numbers OR you can supply using:\n    # -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    # -e SERIAL=\"C02TW0WAHX87\" \\\n    # -e BOARD_SERIAL=\"C027251024NJG36UE\" \\\n    # -e UUID=\"5CCB366D-9118-4C61-A00A-E5BAF3BED451\" \\\n    # -e MAC_ADDRESS=\"A8:5C:2C:9A:46:2F\" \\\n\n# the output will be /bootdisk.\n# /bootdisk is a useful persistent place to store the 15Mb serial number bootdisk.\n\n# if you don't set any of the above:\n# the default serial numbers are already contained in ./OpenCore/OpenCore.qcow2\n# And the default serial numbers\n\n# DMCA compliant download process\n# If BaseSystem.img does not exist, download ${SHORTNAME}\n\n# shortname default is catalina, which means :latest is catalina\nENV SHORTNAME=sonoma\n\nENV BASESYSTEM_IMAGE=BaseSystem.img\n\nCMD ! [[ -e \"${BASESYSTEM_IMAGE:-BaseSystem.img}\" ]] \\\n        && printf '%s\\n' \"No BaseSystem.img available, downloading ${SHORTNAME}\" \\\n        && make \\\n        && qemu-img convert BaseSystem.dmg -O qcow2 -p -c ${BASESYSTEM_IMAGE:-BaseSystem.img} \\\n        && rm ./BaseSystem.dmg \\\n    ; sudo touch /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; sudo chown -R $(id -u):$(id -g) /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; [[ \"${NOPICKER}\" == true ]] && { \\\n        sed -i '/^.*InstallMedia.*/d' Launch.sh \\\n        && export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore-nopicker.qcow2}\" \\\n    ; } \\\n    || export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    ; [[ \"${GENERATE_UNIQUE}\" == true ]] && { \\\n        ./Docker-OSX/osx-serial-generator/generate-unique-machine-values.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --count 1 \\\n            --tsv ./serial.tsv \\\n            --bootdisks \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n            --output-env \"${ENV:=/env}\" \\\n    || exit 1 ; } \\\n    ; [[ \"${GENERATE_SPECIFIC}\" == true ]] && { \\\n            source \"${ENV:=/env}\" 2>/dev/null \\\n            ; ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --model \"${DEVICE_MODEL}\" \\\n            --serial \"${SERIAL}\" \\\n            --board-serial \"${BOARD_SERIAL}\" \\\n            --uuid \"${UUID}\" \\\n            --mac-address \"${MAC_ADDRESS}\" \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    || exit 1 ; } \\\n    ; ./enable-ssh.sh && /bin/bash -c ./Launch.sh\n\n# virt-manager mode: eta son\n# CMD virsh define <(envsubst < Docker-OSX.xml) && virt-manager || virt-manager\n# CMD virsh define <(envsubst < macOS-libvirt-Catalina.xml) && virt-manager || virt-manager\n"
        },
        {
          "name": "Dockerfile.auto",
          "type": "blob",
          "size": 11.7138671875,
          "content": "#!/usr/bin/docker\n#     ____             __             ____  ______  __\n#    / __ \\____  _____/ /_____  _____/ __ \\/ ___/ |/ /\n#   / / / / __ \\/ ___/ //_/ _ \\/ ___/ / / /\\__ \\|   / \n#  / /_/ / /_/ / /__/ ,< /  __/ /  / /_/ /___/ /   |  \n# /_____/\\____/\\___/_/|_|\\___/_/   \\____//____/_/|_|  :AUTO\n# \n# Title:            Docker-OSX (Mac on Docker)\n# Author:           Sick.Codes https://twitter.com/sickcodes\n# Version:          6.0\n# License:          GPLv3+\n# Repository:       https://github.com/sickcodes/Docker-OSX\n# Website:          https://sick.codes\n# \n# This Dockerfile is a pre-installed naked installation of Docker-OSX!\n# \n#   Default username: user\n#   Default password: alpine\n# \n# Take screenshots in the Arch container and display in terminal: scrotcat\n# readme: \n# timezone: UTC/GMT\n# \n# Future versions will navigate the installation process, inside the Dockerfile.\n# \n#\n# Build:\n#\n#       docker build -t docker-osx:auto -f Dockerfile.auto .\n# \n# Run:\n# \n#       docker run -it --device /dev/kvm -p 50922:10022 -v ${PWD}/mac_hdd_ng_auto.img:/image     docker-osx-auto:latest\n# \n# SSH:\n#       From inside the container:\n#           ssh -i ~/.ssh/id_docker_osx user@127.0.0.1 -p 10022\n# \n#       From outside the container:\n#           ssh localhost user@127.0.0.1 -p 50922\n#           docker exec -it containerid ssh -i ~/.ssh/id_docker_osx user@127.0.0.1 -p 10022\n\nFROM sickcodes/docker-osx:latest\n\nLABEL maintainer='https://twitter.com/sickcodes <https://sick.codes>'\n\nUSER root\n\nWORKDIR /root\n\n# For taking screenshots of the Xfvb screen, useful during development.\nARG SCROT\n\n# OPTIONAL: Arch Linux server mirrors for super fast builds\n# set RANKMIRRORS to any value other that nothing, e.g. -e RANKMIRRORS=true\nRUN perl -i -p -e s/^\\#Color/Color$'\\n'ParallelDownloads\\ =\\ 30/g /etc/pacman.conf \nARG RANKMIRRORS\nARG MIRROR_COUNTRY=US\nARG MIRROR_COUNT=10\n\nRUN tee /etc/pacman.d/mirrorlist <<< 'Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch'\n\n# Fixes issue with invalid GPG keys: update the archlinux-keyring package to get the latest keys, then remove and regenerate gnupg keys\nRUN pacman -Sy archlinux-keyring --noconfirm \\\n    && rm -rf /etc/pacman.d/gnupg \\\n    && pacman-key --init \\\n    && pacman-key --populate archlinux\n\nRUN if [[ \"${RANKMIRRORS}\" ]]; then \\\n        { pacman -Sy wget --noconfirm || pacman -Syu wget --noconfirm ; } \\\n        ; wget -O ./rankmirrors \"https://raw.githubusercontent.com/sickcodes/Docker-OSX/${BRANCH:=master}/rankmirrors\" \\\n        ; wget -O- \"https://www.archlinux.org/mirrorlist/?country=${MIRROR_COUNTRY:-US}&protocol=https&use_mirror_status=on\" \\\n        | sed -e 's/^#Server/Server/' -e '/^#/d' \\\n        | head -n \"$((${MIRROR_COUNT:-10}+1))\" \\\n        | bash ./rankmirrors --verbose --max-time 5 - > /etc/pacman.d/mirrorlist \\\n\n\n\n        && cat /etc/pacman.d/mirrorlist \\\n    ; fi\n\nRUN tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://keyserver.ubuntu.com' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://hkps.pool.sks-keyservers.net:443' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://pgp.mit.edu:11371' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.openpgp.org' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.mailvelope.com'\n    \nRUN pacman -Syu xorg-server-xvfb wget xterm xorg-xhost xorg-xrandr --noconfirm \\\n    && if [[ \"${SCROT}\" ]]; then \\\n        pacman -Syu scrot base-devel --noconfirm \\\n        && git clone --recurse-submodules --depth 1 https://github.com/stolk/imcat.git \\\n        && cd imcat \\\n        && make \\\n        && sudo cp imcat /usr/bin/imcat \\\n        && touch /usr/bin/scrotcat \\\n        && tee -a /usr/bin/scrotcat <<< '/usr/bin/imcat <(scrot -o /dev/stdout)' \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; else \\\n        touch /usr/bin/scrotcat \\\n        && echo echo >> /usr/bin/scrotcat \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; fi \\\n    ; yes | pacman -Scc\n\nRUN pacman -S sshpass --noconfirm \\\n    && yes | pacman -Scc\n\nUSER arch\n\nENV USER arch\n\nWORKDIR /home/arch/OSX-KVM\n\nRUN mkdir -p ~/.ssh \\\n    && touch ~/.ssh/authorized_keys \\\n    && touch ~/.ssh/config \\\n    && chmod 700 ~/.ssh \\\n    && chmod 600 ~/.ssh/config \\\n    && chmod 600 ~/.ssh/authorized_keys \\\n    && tee -a ~/.ssh/config <<< 'Host *' \\\n    && tee -a ~/.ssh/config <<< '    StrictHostKeyChecking no' \\\n    && tee -a ~/.ssh/config <<< '    UserKnownHostsFile=/dev/null'\n\nARG COMPLETE=true\n\n# use the COMPLETE arg, for a complete image, ready to boot.\n# otherwise use your own image: -v \"$PWD/disk.img\":/image\nARG WGET_OPTIONS=\n# ARG WGET_OPTIONS='--no-verbose'\n\n# Feel free to take a copy of this image and then host it internally\nARG IMAGE_URL='https://images.sick.codes/mac_hdd_ng_auto.img'\n# ARG IMAGE_URL='https://images.sick.codes/mac_hdd_ng_auto_big_sur.img'\n\nRUN if [[ \"${COMPLETE}\" ]]; then \\\n        echo \"Downloading 20GB image... This step might take a while... Press Ctrl+C if you want to abort.\" \\\n        ; rm -f /home/arch/OSX-KVM/mac_hdd_ng.img \\\n        && wget ${WGET_OPTIONS} -O /home/arch/OSX-KVM/mac_hdd_ng.img \"${IMAGE_URL}\" \\\n    ; fi\n\n\n####\n\n# symlink the old directory, for redundancy\nRUN ln -s /home/arch/OSX-KVM/OpenCore /home/arch/OSX-KVM/OpenCore-Catalina || true\n\n####\n\n#### SPECIAL RUNTIME ARGUMENTS BELOW\n\nENV ADDITIONAL_PORTS=\n\n# add additional QEMU boot arguments\nENV BOOT_ARGS=\n\nENV BOOTDISK=\n\n# edit the CPU that is beign emulated\nENV CPU=Penryn\n\nENV DISPLAY=:99\n\nENV HEADLESS=false\n\nENV ENV=/env\n\n# Boolean for generating a bootdisk with new random serials.\nENV GENERATE_UNIQUE=false\n\n# Boolean for generating a bootdisk with specific serials.\nENV GENERATE_SPECIFIC=false\n\nENV IMAGE_PATH=/home/arch/OSX-KVM/mac_hdd_ng.img\nENV IMAGE_FORMAT=qcow2\n\nENV KVM='accel=kvm:tcg'\n\n# ENV MASTER_PLIST_URL=\"https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist\"\n\n# ENV NETWORKING=e1000-82545em\nENV NETWORKING=vmxnet3\n\nENV NOPICKER=true\n\n# set the username and password for automatically logging in\nENV USERNAME=user\nENV PASSWORD=alpine\n\n# dynamic RAM options for runtime\nENV RAM=3\n# ENV RAM=max\n# ENV RAM=half\n\n# The x and y coordinates for resolution.\n# Must be used with either -e GENERATE_UNIQUE=true or -e GENERATE_SPECIFIC=true.\nENV WIDTH=1920\nENV HEIGHT=1080\n\n# libguestfs verbose\nENV LIBGUESTFS_DEBUG=1\nENV LIBGUESTFS_TRACE=1\n\nENV TERMS_OF_USE=i_agree\n\nENV BOILERPLATE=\"By using this Dockerfile, you hereby agree that you are a security reseacher or developer and agree to use this Dockerfile to make the world a safer place. Examples include: making your apps safer, finding your mobile phone, compiling security products, etc. You understand that Docker-OSX is an Open Source project, which is released to the public under the GNU Pulic License version 3 and above. You acknowledge that the Open Source project is absolutely unaffiliated with any third party, in any form whatsoever. Any trademarks or intelectual property which happen to be mentioned anywhere in or around the project are owned by their respective owners. By using this Dockerfile, you agree to agree to the EULA of each piece of upstream or downstream software. The following code is released for the sole purpose of security research, under the GNU Public License version 3. If you are concerned about the licensing, please note that this project is not AGPL. A copy of the license is available online: https://github.com/sickcodes/Docker-OSX/blob/master/LICENSE. In order to use the following Dockerfile you must read and understand the terms. Once you have read the terms, use the -e TERMS_OF_USE=i_agree or -e TERMS_OF_USE=i_disagree\"\n\n# DMCA compliant download process\n# If BaseSystem.img does not exist, download ${SHORTNAME}\n\n# shortname default is catalina, which means :latest is catalina\nENV SHORTNAME=sonoma\n\nENV BASESYSTEM_IMAGE=BaseSystem.img\n\nCMD ! [[ -e \"${BASESYSTEM_IMAGE:-BaseSystem.img}\" ]] \\\n        && printf '%s\\n' \"No BaseSystem.img available, downloading ${SHORTNAME}\" \\\n        && make \\\n        && qemu-img convert BaseSystem.dmg -O qcow2 -p -c ${BASESYSTEM_IMAGE:-BaseSystem.img} \\\n        && rm ./BaseSystem.dmg \\\n    ; echo \"${BOILERPLATE}\" \\\n    ; [[ \"${TERMS_OF_USE}\" = i_agree ]] || exit 1 \\\n    ; echo \"Disk is being copied between layers... Please wait a minute...\" \\\n    ; sudo touch /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; sudo chown -R $(id -u):$(id -g) /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; [[ \"${NOPICKER}\" == true ]] && { \\\n        sed -i '/^.*InstallMedia.*/d' Launch.sh \\\n        && export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore-nopicker.qcow2}\" \\\n    ; } \\\n    || export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    ; [[ \"${GENERATE_UNIQUE}\" == true ]] && { \\\n        ./Docker-OSX/osx-serial-generator/generate-unique-machine-values.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --count 1 \\\n            --tsv ./serial.tsv \\\n            --bootdisks \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n            --output-env \"${ENV:=/env}\" \\\n    || exit 1 ; } \\\n    ; [[ \"${GENERATE_SPECIFIC}\" == true ]] && { \\\n            source \"${ENV:=/env}\" 2>/dev/null \\\n            ; ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --model \"${DEVICE_MODEL}\" \\\n            --serial \"${SERIAL}\" \\\n            --board-serial \"${BOARD_SERIAL}\" \\\n            --uuid \"${UUID}\" \\\n            --mac-address \"${MAC_ADDRESS}\" \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\"  \\\n    || exit 1 ; } \\\n    ; { [[ \"${DISPLAY}\" = ':99' ]] || [[ \"${HEADLESS}\" == true ]] ; } && { \\\n        nohup Xvfb :99 -screen 0 1920x1080x16 \\\n        & until [[ \"$(xrandr --query 2>/dev/null)\" ]]; do sleep 1 ; done \\\n    ; } \\\n    ; stat \"${IMAGE_PATH}\" \\\n    ; echo \"Large image is being copied between layers, please wait a minute...\" \\\n    ; ./enable-ssh.sh \\\n    ; [[ -e ~/.ssh/id_docker_osx ]] || { \\\n        /usr/bin/ssh-keygen -t rsa -f ~/.ssh/id_docker_osx -q -N \"\" \\\n        && chmod 600 ~/.ssh/id_docker_osx \\\n    ; } \\\n    ; /bin/bash -c ./Launch.sh \\\n    & echo \"Booting Docker-OSX in the background. Please wait...\" \\\n    ; until [[ \"$(sshpass -p${PASSWORD:=alpine} ssh-copy-id -f -i ~/.ssh/id_docker_osx.pub -p 10022 ${USERNAME:=user}@127.0.0.1)\" ]]; do \\\n        echo \"Disk is being copied between layers. Repeating until able to copy SSH key into OSX...\" \\\n        ; sleep 1 \\\n    ; done \\\n    ; grep id_docker_osx ~/.ssh/config || { \\\n        tee -a ~/.ssh/config <<< 'Host 127.0.0.1' \\\n        ; tee -a ~/.ssh/config <<< \"    User ${USERNAME:=user}\" \\\n        ; tee -a ~/.ssh/config <<< '    Port 10022' \\\n        ; tee -a ~/.ssh/config <<< '    IdentityFile ~/.ssh/id_docker_osx' \\\n        ; tee -a ~/.ssh/config <<< '    StrictHostKeyChecking no' \\\n        ; tee -a ~/.ssh/config <<< '    UserKnownHostsFile=/dev/null' \\\n    ; } \\\n    && echo 'Default username: user' \\\n    && echo 'Default password: alpine' \\\n    && echo 'Change it immediately using the command: passwd' \\\n    && ssh -i ~/.ssh/id_docker_osx ${USERNAME:=user}@127.0.0.1 -p 10022 \"${OSX_COMMANDS}\"\n\n# username: user\n# password: alpine\n# screenshot: docker exec -it containerid scrotcat\n# readme: https://github.com/sickcodes/Docker-OSX\n# timezone: UTC/GMT\n\n# Future case option when supplying IMAGE_PATH:\n#   Zstandard*) zstd -d /image && export IMAGE_PATH=/image;; \\\n"
        },
        {
          "name": "Dockerfile.naked",
          "type": "blob",
          "size": 7.712890625,
          "content": "#!/usr/bin/docker\n#     ____             __             ____  ______  __\n#    / __ \\____  _____/ /_____  _____/ __ \\/ ___/ |/ /\n#   / / / / __ \\/ ___/ //_/ _ \\/ ___/ / / /\\__ \\|   / \n#  / /_/ / /_/ / /__/ ,< /  __/ /  / /_/ /___/ /   |  \n# /_____/\\____/\\___/_/|_|\\___/_/   \\____//____/_/|_|  :NAKED\n# \n# Title:            Docker-OSX (Mac on Docker)\n# Author:           Sick.Codes https://twitter.com/sickcodes\n# Version:          6.0\n# License:          GPLv3+\n# Repository:       https://github.com/sickcodes/Docker-OSX\n# Website:          https://sick.codes\n# \n# This image won't run unless you supply a disk image using:\n#       -v ${PWD}/mac_hdd_ng.img:/image\n# \n# Take screenshots in the Arch container and display in terminal: scrotcat\n#\n# Build:\n# \n#       docker build -t docker-osx:naked -f Dockerfile.naked .\n# \n# Run headless:\n# \n#       docker run -it --device /dev/kvm -p 50922:10022 -v ${PWD}/mac_hdd_ng.img:/image docker-osx:naked\n# \n# Run with display:\n# \n#       docker run -it --device /dev/kvm -p 50922:10022 -v ${PWD}/mac_hdd_ng.img:/image -e \"DISPLAY=${DISPLAY:-:0.0}\" -v /tmp/.X11-unix:/tmp/.X11-unix docker-osx:naked\n# \n\nFROM sickcodes/docker-osx:latest\n\nLABEL maintainer='https://twitter.com/sickcodes <https://sick.codes>'\n\nUSER root\n\nWORKDIR /root\n\nRUN rm -f /home/arch/OSX-KVM/mac_hdd_ng.img\n\n# OPTIONAL: Arch Linux server mirrors for super fast builds\n# set RANKMIRRORS to any value other that nothing, e.g. -e RANKMIRRORS=true\nRUN perl -i -p -e s/^\\#Color/Color$'\\n'ParallelDownloads\\ =\\ 30/g /etc/pacman.conf \nARG RANKMIRRORS\nARG MIRROR_COUNTRY=US\nARG MIRROR_COUNT=10\n\nRUN tee /etc/pacman.d/mirrorlist <<< 'Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch'\n\n# Fixes issue with invalid GPG keys: update the archlinux-keyring package to get the latest keys, then remove and regenerate gnupg keys\nRUN pacman -Sy archlinux-keyring --noconfirm \\\n    && rm -rf /etc/pacman.d/gnupg \\\n    && pacman-key --init \\\n    && pacman-key --populate archlinux\n\nRUN if [[ \"${RANKMIRRORS}\" ]]; then \\\n        { pacman -Sy wget --noconfirm || pacman -Syu wget --noconfirm ; } \\\n        ; wget -O ./rankmirrors \"https://raw.githubusercontent.com/sickcodes/Docker-OSX/${BRANCH:=master}/rankmirrors\" \\\n        ; wget -O- \"https://www.archlinux.org/mirrorlist/?country=${MIRROR_COUNTRY:-US}&protocol=https&use_mirror_status=on\" \\\n        | sed -e 's/^#Server/Server/' -e '/^#/d' \\\n        | head -n \"$((${MIRROR_COUNT:-10}+1))\" \\\n        | bash ./rankmirrors --verbose --max-time 5 - > /etc/pacman.d/mirrorlist \\\n        && cat /etc/pacman.d/mirrorlist \\\n    ; fi\n\nRUN tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://keyserver.ubuntu.com' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://hkps.pool.sks-keyservers.net:443' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://pgp.mit.edu:11371' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.openpgp.org' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.mailvelope.com'\n\n# For taking screenshots of the Xfvb screen, useful during development.\nARG SCROT\n\nRUN pacman -Syu xorg-server-xvfb wget xterm xorg-xhost xorg-xrandr sshpass --noconfirm \\\n    && if [[ \"${SCROT}\" ]]; then \\\n        pacman -Syu scrot base-devel --noconfirm \\\n        && git clone --recurse-submodules --depth 1 https://github.com/stolk/imcat.git \\\n        && cd imcat \\\n        && make \\\n        && sudo cp imcat /usr/bin/imcat \\\n        && touch /usr/bin/scrotcat \\\n        && tee -a /usr/bin/scrotcat <<< '/usr/bin/imcat <(scrot -o /dev/stdout)' \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; else \\\n        touch /usr/bin/scrotcat \\\n        && echo echo >> /usr/bin/scrotcat \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; fi \\\n    ; yes | pacman -Scc\n\nUSER arch\n\nENV USER arch\n\nWORKDIR /home/arch/OSX-KVM\n\nRUN mkdir -p ~/.ssh \\\n    && touch ~/.ssh/authorized_keys \\\n    && touch ~/.ssh/config \\\n    && chmod 700 ~/.ssh \\\n    && chmod 600 ~/.ssh/config \\\n    && chmod 600 ~/.ssh/authorized_keys \\\n    && tee -a ~/.ssh/config <<< 'Host *' \\\n    && tee -a ~/.ssh/config <<< '    StrictHostKeyChecking no' \\\n    && tee -a ~/.ssh/config <<< '    UserKnownHostsFile=/dev/null'\n\n####\n\n# symlink the old directory, for redundancy\nRUN ln -s /home/arch/OSX-KVM/OpenCore /home/arch/OSX-KVM/OpenCore-Catalina || true\n\n####\n\n#### SPECIAL RUNTIME ARGUMENTS BELOW\n\nENV ADDITIONAL_PORTS=\n\n# add additional QEMU boot arguments\nENV BOOT_ARGS=\n\nENV BOOTDISK=\n\n# edit the CPU that is beign emulated\nENV CPU=Penryn\n\nENV DISPLAY=:99\n\nENV HEADLESS=false\n\nENV ENV=/env\n\n# Boolean for generating a bootdisk with new random serials.\nENV GENERATE_UNIQUE=false\n\n# Boolean for generating a bootdisk with specific serials.\nENV GENERATE_SPECIFIC=false\n\nENV IMAGE_PATH=/image\nENV IMAGE_FORMAT=qcow2\n\nENV KVM='accel=kvm:tcg'\n\n# ENV MASTER_PLIST_URL=\"https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist\"\n\n# ENV NETWORKING=e1000-82545em\nENV NETWORKING=vmxnet3\n\nENV NOPICKER=true\n\n# dynamic RAM options for runtime\nENV RAM=3\n# ENV RAM=max\n# ENV RAM=half\n\n# The x and y coordinates for resolution.\n# Must be used with either -e GENERATE_UNIQUE=true or -e GENERATE_SPECIFIC=true.\nENV WIDTH=1920\nENV HEIGHT=1080\n\n# libguestfs verbose\nENV LIBGUESTFS_DEBUG=1\nENV LIBGUESTFS_TRACE=1\n\n# DMCA compliant download process\n# If BaseSystem.img does not exist, download ${SHORTNAME}\n\n# shortname default is catalina, which means :latest is catalina\nENV SHORTNAME=sonoma\n\nENV BASESYSTEM_IMAGE=BaseSystem.img\n\nCMD ! [[ -e \"${BASESYSTEM_IMAGE:-BaseSystem.img}\" ]] \\\n        && printf '%s\\n' \"No BaseSystem.img available, downloading ${SHORTNAME}\" \\\n        && make \\\n        && qemu-img convert BaseSystem.dmg -O qcow2 -p -c ${BASESYSTEM_IMAGE:-BaseSystem.img} \\\n        && rm ./BaseSystem.dmg \\\n    ; sudo touch /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; sudo chown -R $(id -u):$(id -g) /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; { [[ \"${DISPLAY}\" = ':99' ]] || [[ \"${HEADLESS}\" == true ]] ; } && { \\\n        nohup Xvfb :99 -screen 0 1920x1080x16 \\\n        & until [[ \"$(xrandr --query 2>/dev/null)\" ]]; do sleep 1 ; done \\\n    ; } \\\n    ; [[ \"${NOPICKER}\" == true ]] && { \\\n        sed -i '/^.*InstallMedia.*/d' Launch.sh \\\n        && export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore-nopicker.qcow2}\" \\\n    ; } \\\n    || export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    ; [[ \"${GENERATE_UNIQUE}\" == true ]] && { \\\n        ./Docker-OSX/osx-serial-generator/generate-unique-machine-values.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --count 1 \\\n            --tsv ./serial.tsv \\\n            --bootdisks \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n            --output-env \"${ENV:=/env}\" \\\n    || exit 1 ; } \\\n    ; [[ \"${GENERATE_SPECIFIC}\" == true ]] && { \\\n            source \"${ENV:=/env}\" 2>/dev/null \\\n            ; ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --model \"${DEVICE_MODEL}\" \\\n            --serial \"${SERIAL}\" \\\n            --board-serial \"${BOARD_SERIAL}\" \\\n            --uuid \"${UUID}\" \\\n            --mac-address \"${MAC_ADDRESS}\" \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    || exit 1 ; } \\\n    ; ./enable-ssh.sh && /bin/bash -c ./Launch.sh\n"
        },
        {
          "name": "Dockerfile.naked-auto",
          "type": "blob",
          "size": 10.6904296875,
          "content": "#!/usr/bin/docker\n#     ____             __             ____  ______  __\n#    / __ \\____  _____/ /_____  _____/ __ \\/ ___/ |/ /\n#   / / / / __ \\/ ___/ //_/ _ \\/ ___/ / / /\\__ \\|   / \n#  / /_/ / /_/ / /__/ ,< /  __/ /  / /_/ /___/ /   |  \n# /_____/\\____/\\___/_/|_|\\___/_/   \\____//____/_/|_|  :NAKED-AUTO\n# \n# Title:            Docker-OSX (Mac on Docker)\n# Author:           Sick.Codes https://twitter.com/sickcodes\n# Version:          6.0\n# License:          GPLv3+\n# Repository:       https://github.com/sickcodes/Docker-OSX\n# Website:          https://sick.codes\n# \n# This Dockerfile needs you to supply a pre-installed installation of Docker-OSX!\n# \n# Visit https://github.com/sickcodes/Docker-OSX for info\n\nFROM sickcodes/docker-osx:latest\n\nLABEL maintainer='https://twitter.com/sickcodes <https://sick.codes>'\n\nUSER root\n\nWORKDIR /root\n\nRUN rm -f /home/arch/OSX-KVM/mac_hdd_ng.img\n\n# For taking screenshots of the Xfvb screen, useful during development.\nARG SCROT\n\n# OPTIONAL: Arch Linux server mirrors for super fast builds\n# set RANKMIRRORS to any value other that nothing, e.g. -e RANKMIRRORS=true\nRUN perl -i -p -e s/^\\#Color/Color$'\\n'ParallelDownloads\\ =\\ 30/g /etc/pacman.conf \nARG RANKMIRRORS\nARG MIRROR_COUNTRY=US\nARG MIRROR_COUNT=10\n\nRUN tee /etc/pacman.d/mirrorlist <<< 'Server = https://geo.mirror.pkgbuild.com/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = http://mirror.rackspace.com/archlinux/$repo/os/$arch' \\\n    && tee -a /etc/pacman.d/mirrorlist <<< 'Server = https://mirror.rackspace.com/archlinux/$repo/os/$arch'\n\n# Fixes issue with invalid GPG keys: update the archlinux-keyring package to get the latest keys, then remove and regenerate gnupg keys\nRUN pacman -Sy archlinux-keyring --noconfirm \\\n    && rm -rf /etc/pacman.d/gnupg \\\n    && pacman-key --init \\\n    && pacman-key --populate archlinux\n\nRUN if [[ \"${RANKMIRRORS}\" ]]; then \\\n        { pacman -Sy wget --noconfirm || pacman -Syu wget --noconfirm ; } \\\n        ; wget -O ./rankmirrors \"https://raw.githubusercontent.com/sickcodes/Docker-OSX/${BRANCH:=master}/rankmirrors\" \\\n        ; wget -O- \"https://www.archlinux.org/mirrorlist/?country=${MIRROR_COUNTRY:-US}&protocol=https&use_mirror_status=on\" \\\n        | sed -e 's/^#Server/Server/' -e '/^#/d' \\\n        | head -n \"$((${MIRROR_COUNT:-10}+1))\" \\\n        | bash ./rankmirrors --verbose --max-time 5 - > /etc/pacman.d/mirrorlist \\\n        && cat /etc/pacman.d/mirrorlist \\\n    ; fi\n\nRUN tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://keyserver.ubuntu.com' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://hkps.pool.sks-keyservers.net:443' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkp://pgp.mit.edu:11371' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.openpgp.org' \\\n    && tee -a /etc/pacman.d/gnupg/gpg.conf <<< 'keyserver hkps://keys.mailvelope.com'\n\n# For taking screenshots of the Xfvb screen, useful during development.\nARG SCROT\n\nRUN pacman -Syu xorg-server-xvfb wget xterm xorg-xhost xorg-xrandr --noconfirm \\\n    && if [[ \"${SCROT}\" ]]; then \\\n        pacman -Syu scrot base-devel --noconfirm \\\n        && git clone --recurse-submodules --depth 1 https://github.com/stolk/imcat.git \\\n        && cd imcat \\\n        && make \\\n        && sudo cp imcat /usr/bin/imcat \\\n        && touch /usr/bin/scrotcat \\\n        && tee -a /usr/bin/scrotcat <<< '/usr/bin/imcat <(scrot -o /dev/stdout)' \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; else \\\n        touch /usr/bin/scrotcat \\\n        && echo echo >> /usr/bin/scrotcat \\\n        && chmod +x /usr/bin/scrotcat \\\n    ; fi \\\n    ; yes | pacman -Scc\n\nRUN pacman -S sshpass --noconfirm \\\n    && yes | pacman -Scc\n\nUSER arch\n\nENV USER arch\n\nWORKDIR /home/arch/OSX-KVM\n\nRUN mkdir -p ~/.ssh \\\n    && touch ~/.ssh/authorized_keys \\\n    && touch ~/.ssh/config \\\n    && chmod 700 ~/.ssh \\\n    && chmod 600 ~/.ssh/config \\\n    && chmod 600 ~/.ssh/authorized_keys \\\n    && tee -a ~/.ssh/config <<< 'Host *' \\\n    && tee -a ~/.ssh/config <<< '    StrictHostKeyChecking no' \\\n    && tee -a ~/.ssh/config <<< '    UserKnownHostsFile=/dev/null'\n\nARG COMPLETE=\n\n# use the COMPLETE arg, for a complete image, ready to boot.\n# otherwise use your own image: -v \"$PWD/disk.img\":/image\nARG WGET_OPTIONS=\n# ARG WGET_OPTIONS='--no-verbose'\n\n# Feel free to take a copy of this image and then host it internally\nARG IMAGE_URL=\n# ARG IMAGE_URL='https://images.sick.codes/mac_hdd_ng_auto_big_sur.img'\n\nRUN if [[ \"${COMPLETE}\" ]]; then \\\n        echo \"Downloading your image... This step might take a while... Press Ctrl+C if you want to abort.\" \\\n        ; rm -f /home/arch/OSX-KVM/mac_hdd_ng.img \\\n        && wget ${WGET_OPTIONS} -O /home/arch/OSX-KVM/mac_hdd_ng.img \"${IMAGE_URL}\" \\\n    ; fi\n\n####\n\n# symlink the old directory, for redundancy\nRUN ln -s /home/arch/OSX-KVM/OpenCore /home/arch/OSX-KVM/OpenCore-Catalina || true\n\n####\n\n#### SPECIAL RUNTIME ARGUMENTS BELOW\n\nENV ADDITIONAL_PORTS=\n\n# add additional QEMU boot arguments\nENV BOOT_ARGS=\n\nENV BOOTDISK=\n\n# edit the CPU that is beign emulated\nENV CPU=Penryn\n\nENV DISPLAY=:99\n\nENV HEADLESS=false\n\nENV ENV=/env\n\n# Boolean for generating a bootdisk with new random serials.\nENV GENERATE_UNIQUE=false\n\n# Boolean for generating a bootdisk with specific serials.\nENV GENERATE_SPECIFIC=false\n\nENV IMAGE_PATH=/image\nENV IMAGE_FORMAT=qcow2\n\nENV KVM='accel=kvm:tcg'\n\n# ENV MASTER_PLIST_URL=\"https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist\"\n\n# ENV NETWORKING=e1000-82545em\nENV NETWORKING=vmxnet3\n\nENV NOPICKER=true\n\n# set the username and password for automatically logging in\nENV USERNAME=user\nENV PASSWORD=alpine\n\n# dynamic RAM options for runtime\nENV RAM=3\n# ENV RAM=max\n# ENV RAM=half\n\n# The x and y coordinates for resolution.\n# Must be used with either -e GENERATE_UNIQUE=true or -e GENERATE_SPECIFIC=true.\nENV WIDTH=1920\nENV HEIGHT=1080\n\n# libguestfs verbose\nENV LIBGUESTFS_DEBUG=1\nENV LIBGUESTFS_TRACE=1\n\nENV TERMS_OF_USE=i_agree\n\nENV BOILERPLATE=\"By using this Dockerfile, you hereby agree that you are a security reseacher or developer and agree to use this Dockerfile to make the world a safer place. Examples include: making your apps safer, finding your mobile phone, compiling security products, etc. You understand that Docker-OSX is an Open Source project, which is released to the public under the GNU Pulic License version 3 and above. You acknowledge that the Open Source project is absolutely unaffiliated with any third party, in any form whatsoever. Any trademarks or intelectual property which happen to be mentioned anywhere in or around the project are owned by their respective owners. By using this Dockerfile, you agree to agree to the EULA of each piece of upstream or downstream software. The following code is released for the sole purpose of security research, under the GNU Public License version 3. If you are concerned about the licensing, please note that this project is not AGPL. A copy of the license is available online: https://github.com/sickcodes/Docker-OSX/blob/master/LICENSE. In order to use the following Dockerfile you must read and understand the terms. Once you have read the terms, use the -e TERMS_OF_USE=i_agree or -e TERMS_OF_USE=i_disagree\"\n\n# DMCA compliant download process\n# If BaseSystem.img does not exist, download ${SHORTNAME}\n\n# shortname default is catalina, which means :latest is catalina\nENV SHORTNAME=sonoma\n\nENV BASESYSTEM_IMAGE=BaseSystem.img\n\nCMD ! [[ -e \"${BASESYSTEM_IMAGE:-BaseSystem.img}\" ]] \\\n        && printf '%s\\n' \"No BaseSystem.img available, downloading ${SHORTNAME}\" \\\n        && make \\\n        && qemu-img convert BaseSystem.dmg -O qcow2 -p -c ${BASESYSTEM_IMAGE:-BaseSystem.img} \\\n        && rm ./BaseSystem.dmg \\\n    ; echo \"${BOILERPLATE}\" \\\n    ; [[ \"${TERMS_OF_USE}\" = i_agree ]] || exit 1 \\\n    ; echo \"Disk is being copied between layers... Please wait a minute...\" \\\n    ; sudo touch /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; sudo chown -R $(id -u):$(id -g) /dev/kvm /dev/snd \"${IMAGE_PATH}\" \"${BOOTDISK}\" \"${ENV}\" 2>/dev/null || true \\\n    ; [[ \"${NOPICKER}\" == true ]] && { \\\n        sed -i '/^.*InstallMedia.*/d' Launch.sh \\\n        && export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore-nopicker.qcow2}\" \\\n    ; } \\\n    || export BOOTDISK=\"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    ; [[ \"${GENERATE_UNIQUE}\" == true ]] && { \\\n        ./Docker-OSX/osx-serial-generator/generate-unique-machine-values.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --count 1 \\\n            --tsv ./serial.tsv \\\n            --bootdisks \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n            --output-env \"${ENV:=/env}\" \\\n    || exit 1 ; } \\\n    ; [[ \"${GENERATE_SPECIFIC}\" == true ]] && { \\\n            source \"${ENV:=/env}\" 2>/dev/null \\\n            ; ./Docker-OSX/osx-serial-generator/generate-specific-bootdisk.sh \\\n            --master-plist-url=\"${MASTER_PLIST_URL}\" \\\n            --model \"${DEVICE_MODEL}\" \\\n            --serial \"${SERIAL}\" \\\n            --board-serial \"${BOARD_SERIAL}\" \\\n            --uuid \"${UUID}\" \\\n            --mac-address \"${MAC_ADDRESS}\" \\\n            --width \"${WIDTH:-1920}\" \\\n            --height \"${HEIGHT:-1080}\" \\\n            --output-bootdisk \"${BOOTDISK:=/home/arch/OSX-KVM/OpenCore/OpenCore.qcow2}\" \\\n    || exit 1 ; } \\\n    ; { [[ \"${DISPLAY}\" = ':99' ]] || [[ \"${HEADLESS}\" == true ]] ; } && { \\\n        nohup Xvfb :99 -screen 0 1920x1080x16 \\\n        & until [[ \"$(xrandr --query 2>/dev/null)\" ]]; do sleep 1 ; done \\\n    ; } \\\n    ; stat \"${IMAGE_PATH}\" \\\n    ; echo \"Large image is being copied between layers, please wait a minute...\" \\\n    ; ./enable-ssh.sh \\\n    ; [[ -e ~/.ssh/id_docker_osx ]] || { \\\n        /usr/bin/ssh-keygen -t rsa -f ~/.ssh/id_docker_osx -q -N \"\" \\\n        && chmod 600 ~/.ssh/id_docker_osx \\\n    ; } \\\n    ; /bin/bash -c ./Launch.sh \\\n    & echo \"Booting Docker-OSX in the background. Please wait...\" \\\n    ; until [[ \"$(sshpass -p${PASSWORD:=alpine} ssh-copy-id -f -i ~/.ssh/id_docker_osx.pub -p 10022 ${USERNAME:=user}@127.0.0.1)\" ]]; do \\\n        echo \"Disk is being copied between layers. Repeating until able to copy SSH key into OSX...\" \\\n        ; sleep 1 \\\n    ; done \\\n    ; grep id_docker_osx ~/.ssh/config || { \\\n        tee -a ~/.ssh/config <<< 'Host 127.0.0.1' \\\n        ; tee -a ~/.ssh/config <<< \"    User ${USERNAME:=user}\" \\\n        ; tee -a ~/.ssh/config <<< '    Port 10022' \\\n        ; tee -a ~/.ssh/config <<< '    IdentityFile ~/.ssh/id_docker_osx' \\\n        ; tee -a ~/.ssh/config <<< '    StrictHostKeyChecking no' \\\n        ; tee -a ~/.ssh/config <<< '    UserKnownHostsFile=/dev/null' \\\n    ; } \\\n    && ssh -i ~/.ssh/id_docker_osx ${USERNAME:=user}@127.0.0.1 -p 10022 \"${OSX_COMMANDS}\"\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 12.8271484375,
          "content": "# Frequently Asked Questions\n\nThese questions come up regularly, so here are the answers.\n\n## Basics\n\n### Is this legal?\n\nThe [macOS software license](https://www.apple.com/legal/sla/) allows running (some versions of) macOS in a virtual machine only on Apple hardware. The [Apple Security Bounty terms and conditions](https://security.apple.com/terms-and-conditions/) make an exception to that (and essentially anything in the macOS software license) under some specific circumstances.\n\nTherefore, yes, there is a legal use for Docker-OSX. If your use doesn't fall under the license or the security bounty terms, then you are/will be violating the macOS software license. **Note that this is not provided as legal advice, and you should consult with your own counsel for legal guidance.**\n\nYou may also be interested in this [deeper dive into the subject](https://sick.codes/is-hackintosh-osx-kvm-or-docker-osx-legal/).\n\n### What does Docker-OSX do?\n\nDocker-OSX is an approach to setting up and launching a macOS virtual machine (VM) under [docker](https://en.wikipedia.org/wiki/Docker_(software)). The [Dockerfile](Dockerfile) is essentially a docker image building script that:\n1. validates a few things about the environment\n2. installs VM software (qemu) and creates a virtual disk within the docker container\n3. generates a serial number and firmware to make the VM look (enough) like Mac hardware\n4. downloads a macOS installer disk image\n5. generates a shell script to start the VM\n\nThe default configuration is intended to create an ephemeral but repeatably bootable macOS that can be probed for security research.\n\n### Why docker?\n\nDocker provides a straightforward way to package a flexible turnkey solution to setting up a macOS VM. It is not the only way to do so, nor is it necessarily the best approach to setting up a long-lived, persistent macOS VM. You may prefer to study the [Dockerfile](Dockerfile) and/or [OSX-KVM](https://github.com/kholia/OSX-KVM) to prepare a VM to run under [proxmox](https://en.wikipedia.org/wiki/Proxmox_Virtual_Environment) or [libvirt](https://en.wikipedia.org/wiki/Libvirt).\n\n## Can I...\n\n### ...run BlueBubbles/AirMessage/Beeper on it?\n\nYes. Make sure you [make serial numbers persist across reboots](README.md#making-serial-numbers-persist-across-reboots) after generating a unique serial number for yourself; don't use the default serial number. There is, of course, no guarantee that Apple won't block/disable your account, or inflict other consequences. See also the [legal considerations](#is-this-legal).\n\n### ...develop iPhone apps on it?\n\nYes. You will probably find Xcode's UI frustratingly slow, but yes. Compiling apps (e.g. React Native) from the command line is likely to be less frustrating. There is, of course, no guarantee that Apple won't block/disable your account, remove you from the Apple Developer program, or inflict other consequences. See also the [legal considerations](#is-this-legal).\n\n### ...connect my iPhone or other USB device to it?\n\nYes, at least if your host OS is Linux. See [instructions](README.md#vfio-iphone-usb-passthrough-vfio). It may or may not be possible if your host OS is Windows.\n\n### ...run CI/CD processes with it?\n\nMaybe, but there are several reasons not to:\n1. There are [legal considerations](#is-this-legal).\n2. Nested virtualization is generally unavailable on cloud-hosted CI/CD and therefore Docker-OSX doesn't run.\n3. You are almost always better off using your own macOS runners (on virtual or actual Mac hardware) rather than trying to make the square peg of Docker-OSX fit the round hole of macOS-specific CI/CD.\n\nYou absolutely can install runners on the macOS VM itself (which does not get around the legal considerations mentioned above), but [Docker-OSX may not be the best approach](#why-docker).\n\n### ...run on Linux but with Wayland?\n\nYes, but your Wayland server must support X11 connections (or you can [use VNC instead](README.md#building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only)).\n\n### ...run on Windows?\n\nYes, as long as you have a new enough version of Windows 11 and have WSL2 set up. See [this section of the README](README.md#id-like-to-run-docker-osx-on-windows) for details. No, it will not work under Windows 10. Not even if you have WSL2 set up.\n\n### ...run on macOS?\n\nIf you have a Mac with Apple Silicon you are better served by [UTM](https://apps.apple.com/us/app/utm-virtual-machines/id1538878817?mt=12).\n\nIf you have an Intel Mac you can install and run docker (either [Docker Desktop](https://www.docker.com/products/docker-desktop/) or [colima](https://github.com/abiosoft/colima)). In either case, docker will be running under a Linux VM, which complicates things. You are likely to encounter one or more of the [common errors](#common-errors) below. Consider using qemu directly with HVF acceleration (e.g. with [libvirt](https://libvirt.org/macos.html)) instead.\n\n### ...run on cloud services?\n\nCloud providers typically run their various services within virtual machines running on top of their actual hardware. These VMs typically are not set up to provide nested virtualization, which means KVM is unavailable so Docker-OSX will not work. This is _especially and specifically_ the case on CI/CD runners such as GitHub Actions, Azure DevOps Pipelines, CircleCI, GitLab CI/CD, etc. (however, see [running CI/CD](#run-cicd-processes-with-it)). Some cloud providers offer services that do allow virtualization, such as [Amazon's EC2 Bare Metal Instances](https://aws.amazon.com/about-aws/whats-new/2018/05/announcing-general-availability-of-amazon-ec2-bare-metal-instances/), but often at a significant premium.\n\nIn short, probably not.\n\n## Common Errors\n\n### Docker Errors\n\nIf you get an error like `docker: command not found` then you don't have docker installed and none of this works. Try [Docker Desktop](https://www.docker.com/products/docker-desktop/) on Windows or your distribution's normal package manager on Linux.\n\nIf you get an error like `docker: Got permission denied while trying to connect to the Docker daemon` or `docker: unknown server OS: .` the mostly likely explanation is that your user isn't in the `docker` Unix group. You'll need to add yourself to the `docker` group, log out, and log back in.\n\nIf you get an error like `Cannot connect to the Docker daemon at unix://var/run/docker.sock. Is the docker daemon running?` then `dockerd` isn't running. On most Linux distributions you should be able to start it with `sudo systemctl enable docker --now`.\n\n### GTK Initialization Failed\n\nThis is an X11 error and means that the arguments to qemu are telling it to connect to an X11 display that it either can't connect to at all or doesn't have permission to connect to. In the latter case, this can usually be fixed by running `xhost +` on the host running the X11 server.\n\nIn many cases, however, it is preferable to tell qemu to listen for a VNC connection instead of trying to connect to X11; see [this section of the README](README.md#building-a-headless-container-that-allows-insecure-vnc-on-localhost-for-local-use-only) for instructions.\n\n### KVM Error\n\nIf you get an error like `error gathering device information while adding custom device \"/dev/kvm\": no such file or directory` that means KVM is not available/working on the Linux kernel on which you are running docker. This could be because you are attempting to run somewhere that doesn't support nested virtualization (see [above](#can-i-run-this-on)), or because your BIOS does not have virtualization extensions turned on, or because your CPU is too old to support virtualization extensions, or your Linux kernel does not have KVM support loaded/enabled. Fixing KVM issues is well beyond the scope of this document, but you can [start here](https://www.linux-kvm.org/page/FAQ).\n\n### ALSA Error\n\nYou might get an error like this:\n```\n(qemu) ALSA lib confmisc.c:767:(parse_card) cannot find card '0'\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory\nALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory\nALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory\nALSA lib conf.c:5233:(snd_config_expand) Evaluate error: No such file or directory\nALSA lib pcm.c:2660:(snd_pcm_open_noupdate) Unknown PCM default\nalsa: Could not initialize DAC\nalsa: Failed to open `default':\nalsa: Reason: No such file or directory\nALSA lib confmisc.c:767:(parse_card) cannot find card '0'\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory\nALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory\nALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory\nALSA lib conf.c:5233:(snd_config_expand) Evaluate error: No such file or directory\nALSA lib pcm.c:2660:(snd_pcm_open_noupdate) Unknown PCM default\nalsa: Could not initialize DAC\nalsa: Failed to open `default':\nalsa: Reason: No such file or directory\naudio: Failed to create voice `dac'\nALSA lib confmisc.c:767:(parse_card) cannot find card '0'\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory\nALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory\nALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory\nALSA lib conf.c:5233:(snd_config_expand) Evaluate error: No such file or directory\nALSA lib pcm.c:2660:(snd_pcm_open_noupdate) Unknown PCM default\nalsa: Could not initialize ADC\nalsa: Failed to open `default':\nalsa: Reason: No such file or directory\nALSA lib confmisc.c:767:(parse_card) cannot find card '0'\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_card_driver returned error: No such file or directory\nALSA lib confmisc.c:392:(snd_func_concat) error evaluating strings\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_concat returned error: No such file or directory\nALSA lib confmisc.c:1246:(snd_func_refer) error evaluating name\nALSA lib conf.c:4745:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory\nALSA lib conf.c:5233:(snd_config_expand) Evaluate error: No such file or directory\nALSA lib pcm.c:2660:(snd_pcm_open_noupdate) Unknown PCM default\nalsa: Could not initialize ADC\nalsa: Failed to open `default':\nalsa: Reason: No such file or directory\naudio: Failed to create voice `adc'\n```\n\nDocker-OSX defaults to telling qemu to use ALSA for audio output. Your host system may be using PulseAudio instead (see [PulseAudio](README.md#pulseaudio)), but you may not need audio output at all. You can pass `-e AUDIO_DRIVER=\"id=none,driver=none\"` to disable audio output.\n\n### No Disk to Install On\n\nIf you have launched the installer but don't see a disk to install macOS on, it probably means you skipped the step where you run Disk Utility to format the virtual disk. See the [README](README.md#additional-boot-instructions-for-when-you-are-creating-your-container).\n\n### Slow Installation\n\nThis is not unique to virtual hardware. The macOS installation process gives apparently random and dependably incorrect time estimates, and can often appear to have completely frozen. Just be patient. It could take hours, maybe even more than a day.\n\n### Installer After Completing Install\n\nIf you wind up in the installer again after you've installed macOS it means you booted from the installer disk instead of the disk you installed macOS on. Reboot and make sure you choose the correct disk to boot.\n\n## Next Steps\n\nCongratulations, you got a macOS VM up and running! Now what?\n\n### Slow UI\n\nThe macOS UI expects and relies on GPU acceleration, and there is (currently) no way to provide GPU acceleration in the virtual hardware. See [osx-optimizer](https://github.com/sickcodes/osx-optimizer) for macOS configuration to speed things up.\n\n### Extract the Virtual Disk\n\nWith the container stopped, `sudo find /var/lib/docker -size +10G -name mac_hdd_ng.img` to find the disk image then copy it where you want it.\n\n### Disk Space\n\nIs your host machine's disk, specifically `/var` (because of `/var/lib/docker`), getting full? [Fix it](README.md#increase-disk-space-by-moving-varlibdocker-to-external-drive-block-storage-nfs-or-any-other-location-conceivable).\n\n### Increase RAM or CPUs/cores\n\nThe `RAM`, `SMP`, and `CORES` options are all docker environment variables, which means it uses whatever you provide any time you start a container.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 67.3935546875,
          "content": "# Docker-OSX · [Follow @sickcodes on Twitter](https://twitter.com/sickcodes)\n\n![Running Mac OS X in a Docker container](/running-mac-inside-docker-qemu.png?raw=true \"OSX KVM DOCKER\")\n\nRun Mac OS X in Docker with near-native performance! X11 Forwarding! iMessage security research! iPhone USB working! macOS in a Docker container!\n\nConduct Security Research on macOS using both Linux & Windows!\n\n# Docker-OSX now has a Discord server & Telegram!\n\nThe Discord is active on #docker-osx and anyone is welcome to come and ask questions, ideas, etc.\n\n<p align=\"center\">\n    <a href=\"https://hub.docker.com/r/sickcodes/docker-osx\"><img src=\"https://dockeri.co/image/sickcodes/docker-osx\"/></a><a href=\"https://discord.gg/sickchat\"><a href=\"https://discord.gg/sickchat\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/discord-logo.svg\"></a></a>\n</p>\n\n\n### Click to join the Discord server [https://discord.gg/sickchat](https://discord.gg/sickchat)\n\n### Click to join the Telegram server [https://t.me/sickcodeschat](https://t.me/sickcodeschat)\n\nOr reach out via Linkedin if it's private: [https://www.linkedin.com/in/sickcodes](https://www.linkedin.com/in/sickcodes)\n\nOr via [https://sick.codes/contact/](https://sick.codes/contact/)\n\n## Author\n\nThis project is maintained by [Sick.Codes](https://sick.codes/). [(Twitter)](https://twitter.com/sickcodes)\n\nAdditional credits can be found here: https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md\n\nAdditionally, comprehensive list of all contributors can be found here: https://github.com/sickcodes/Docker-OSX/graphs/contributors\n\nBig thanks to [@kholia](https://twitter.com/kholia) for maintaining the upstream project, which Docker-OSX is built on top of: [OSX-KVM](https://github.com/kholia/OSX-KVM).\n\nAlso special thanks to [@thenickdude](https://github.com/thenickdude) who maintains the valuable fork [KVM-OpenCore](https://github.com/thenickdude/KVM-Opencore), which was started by [@Leoyzen](https://github.com/Leoyzen/)!\n\nExtra special thanks to the OpenCore team over at: https://github.com/acidanthera/OpenCorePkg. Their well-maintained bootloader provides much of the great functionality that Docker-OSX users enjoy :)\n\nIf you like this project, consider contributing here or upstream!\n\n## Quick Start Docker-OSX\n\nVideo setup tutorial is also available here: https://www.youtube.com/watch?v=wLezYl77Ll8\n\n**Windows users:** [click here to see the notes below](#id-like-to-run-docker-osx-on-windows)!\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=wLezYl77Ll8\" target=\"_blank\"><img src=\"https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-Screenshot-Docker-OSX-Setup.png\"></a>\n</p>\n\nFirst time here? try [initial setup](#initial-setup), otherwise try the instructions below to use either Catalina or Big Sur.\n\n## Any questions, ideas, or just want to hang out?\n# [https://discord.gg/sickchat](https://discord.gg/sickchat)\n\nRelease names and their version:\n\n### Catalina (10.15) [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest](https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e SHORTNAME=catalina \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n### Big Sur (11) [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur](https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e SHORTNAME=big-sur \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n### Monterey (12) [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey](https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \\\n    -e SHORTNAME=monterey \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n### Ventura (13) [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura](https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \\\n    -e SHORTNAME=ventura \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n### Sonoma (14) [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma](https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e CPU='Haswell-noTSX' \\\n    -e CPUID_FLAGS='kvm=on,vendor=GenuineIntel,+invtsc,vmware-cpuid-freq=on' \\\n    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom-sonoma.plist' \\\n    -e SHORTNAME=sonoma \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n#### Run Catalina Pre-Installed [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto](https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n# 40GB disk space required: 20GB original image 20GB your container.\ndocker pull sickcodes/docker-osx:auto\n\n# boot directly into a real OS X shell with a visual display [NOT HEADLESS]\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    sickcodes/docker-osx:auto\n\n# username is user\n# password is alpine\n```\n\n### Older Systems\n\n### High Sierra [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra](https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e SHORTNAME=high-sierra \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n### Mojave [![https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave](https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n```bash\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e SHORTNAME=mojave \\\n    sickcodes/docker-osx:latest\n\n# docker build -t docker-osx .\n```\n\n\n\n#### Download the image manually and use it in Docker \n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked](https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n\nThis is a particularly good way for downloading the container, in case Docker's CDN (or your connection) happens to be slow.\n\n```bash\nwget https://images2.sick.codes/mac_hdd_ng_auto.img\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng_auto.img:/image\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \\\n    -e SHORTNAME=catalina \\\n    sickcodes/docker-osx:naked\n```\n\n\n#### Use your own image and manually and automatically log into a shell\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto](https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n\nEnable SSH in network sharing inside the guest first. Change `-e \"USERNAME=user\"` and `-e \"PASSWORD=password\"` to your credentials. The container will add itself to `~/.ssh/authorized_keys`\n\nSince you can't see the screen, use the PLIST with nopicker, for example:\n\n```bash\n# Catalina\n# wget https://images2.sick.codes/mac_hdd_ng_auto.img\n# Monterey\nwget https://images.sick.codes/mac_hdd_ng_auto_monterey.img\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng_auto_monterey.img:/image\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e \"USERNAME=user\" \\\n    -e \"PASSWORD=alpine\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \\\n    -e SHORTNAME=monterey \\\n    sickcodes/docker-osx:naked-auto\n```\n\n# Share directories, sharing files, shared folder, mount folder\nThe easiest and most secure way is `sshfs`\n```bash\n# on Linux/Windows\nmkdir ~/mnt/osx\nsshfs user@localhost:/ -p 50922 ~/mnt/osx\n# wait a few seconds, and ~/mnt/osx will have full rootfs mounted over ssh, and in userspace\n# automated: sshpass -p <password> sshfs user@localhost:/ -p 50922 ~/mnt/osx\n```\n\n\n# (VFIO) iPhone USB passthrough (VFIO)\n\nIf you have a laptop see the next usbfluxd section.\n\nIf you have a desktop PC, you can use [@Silfalion](https://github.com/Silfalion)'s instructions: [https://github.com/Silfalion/Iphone_docker_osx_passthrough](https://github.com/Silfalion/Iphone_docker_osx_passthrough)\n\n# (USBFLUXD) iPhone USB -> Network style passthrough OSX-KVM Docker-OSX\n\nVideo setup tutorial for usbfluxd is also available here: https://www.youtube.com/watch?v=kTk5fGjK_PM\n\n<p align=\"center\">\n  <a href=\"https://www.youtube.com/watch?v=kTk5fGjK_PM\" target=\"_blank\"><img alt=\"iPhone USB passthrough on macOS virtual machine Linux & Windows\" src=\"https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/Youtube-USBFLUXD-Screenshot-Docker-OSX.png\"></a>\n</p>\n\n\nThis method WORKS on laptop, PC, anything!\n\nThank you [@nikias](https://github.com/nikias) for [usbfluxd](https://github.com/corellium/usbfluxd) via [https://github.com/corellium](https://github.com/corellium)!\n\n**This is done inside Linux.**\n\nOpen 3 terminals on Linux\n\nConnecting your device over USB on Linux allows you to expose `usbmuxd` on port `5000` using [https://github.com/corellium/usbfluxd](https://github.com/corellium/usbfluxd) to another system on the same network.\n\nEnsure `usbmuxd`, `socat` and `usbfluxd` are installed.\n\n`sudo pacman -S libusbmuxd usbmuxd avahi socat`\n\nAvailable on the AUR: [https://aur.archlinux.org/packages/usbfluxd/](https://aur.archlinux.org/packages/usbfluxd/)\n\n`yay usbfluxd`\n\nPlug in your iPhone or iPad.\n\nTerminal 1\n```bash\nsudo systemctl start usbmuxd\nsudo avahi-daemon\n```\n\nTerminal 2:\n```bash\n# on host\nsudo systemctl restart usbmuxd\nsudo socat tcp-listen:5000,fork unix-connect:/var/run/usbmuxd\n```\n\nTerminal 3:\n```bash\nsudo usbfluxd -f -n\n```\n\n### Connect to a host running usbfluxd\n\n**This is done inside macOS.**\n\nInstall homebrew.\n\n`172.17.0.1` is usually the Docker bridge IP, which is your PC, but you can use any IP from `ip addr`...\n\nmacOS Terminal:\n```zsh\n# on the guest\nbrew install make automake autoconf libtool pkg-config gcc libimobiledevice usbmuxd\n\ngit clone https://github.com/corellium/usbfluxd.git\ncd usbfluxd\n\n./autogen.sh\nmake\nsudo make install\n```\n\nAccept the USB over TCP connection, and appear as local:\n\n(you may need to change `172.17.0.1` to the IP address of the host. e.g. check `ip addr`)\n\n```bash\n# on the guest\nsudo launchctl start usbmuxd\nexport PATH=/usr/local/sbin:${PATH}\nsudo usbfluxd -f -r 172.17.0.1:5000\n```\n\nClose apps such as Xcode and reopen them and your device should appear!\n\n*If you need to start again on Linux, wipe the current usbfluxd, usbmuxd, and socat:*\n```bash\nsudo killall usbfluxd\nsudo systemctl restart usbmuxd\nsudo killall socat\n```\n\n## Make container FASTER using [https://github.com/sickcodes/osx-optimizer](https://github.com/sickcodes/osx-optimizer)\n\nSEE commands in [https://github.com/sickcodes/osx-optimizer](https://github.com/sickcodes/osx-optimizer)!\n\n- Skip the GUI login screen (at your own risk!)\n- Disable spotlight indexing on macOS to heavily speed up Virtual Instances.\n- Disable heavy login screen wallpaper\n- Disable updates (at your own risk!)\n\n## Increase disk space by moving /var/lib/docker to external drive, block storage, NFS, or any other location conceivable.\n\nMove /var/lib/docker, following the tutorial below\n\n- Cheap large physical disk storage instead using your server's disk, or SSD.\n- Block Storage, NFS, etc.\n\nTutorial here: https://sick.codes/how-to-run-docker-from-block-storage/\n\nOnly follow the above tutorial if you are happy with wiping all your current Docker images/layers.\n\nSafe mode: Disable docker temporarily so you can move the Docker folder temporarily.\n\n- Do NOT do this until you have moved your image out already [https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image](https://github.com/dulatello08/Docker-OSX/#quick-start-your-own-image-naked-container-image)\n\n```bash\nkillall dockerd\nsystemctl disable --now docker\nsystemctl disable --now docker.socket\nsystemctl stop docker\nsystemctl stop docker.socket\n```\nNow, that Docker daemon is off, move /var/lib/docker somewhere\n\nThen, symbolicly link /var/lib/docker somewhere:\n\n```bash\nmv /var/lib/docker /run/media/user/some_drive/docker\nln -s /run/media/user/some_drive/docker /var/lib/docker\n\n# now check if /var/lib/docker is working still\nls /var/lib/docker\n```\nIf you see folders, then it worked. You can restart Docker, or just reboot if you want to be sure.\n\n## Important notices:\n\n**2021-11-14** - Added High Sierra, Mojave\n\nPick one of these while **building**, irrelevant when using docker pull:\n```\n--build-arg SHORTNAME=high-sierra \n--build-arg SHORTNAME=mojave\n--build-arg SHORTNAME=catalina\n--build-arg SHORTNAME=big-sur\n--build-arg SHORTNAME=monterey\n--build-arg SHORTNAME=ventura\n--build-arg SHORTNAME=sonoma\n```\n\n\n## Technical details\n\nThere are currently multiple images, each with different use cases (explained [below](#container-images)):\n\n- High Sierra (10.13)\n- Mojave (10.14)\n- Catalina (10.15)\n- Big Sur (11)\n- Monterey (12)\n- Ventura (13)\n- Sonoma (14)\n- Auto (pre-made Catalina)\n- Naked (use your own .img)\n- Naked-Auto (user your own .img and SSH in)\n\nHigh Sierra:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra](https://img.shields.io/docker/image-size/sickcodes/docker-osx/high-sierra?label=sickcodes%2Fdocker-osx%3Ahigh-sierra)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nMojave:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave](https://img.shields.io/docker/image-size/sickcodes/docker-osx/mojave?label=sickcodes%2Fdocker-osx%3Amojave)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nCatalina:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest](https://img.shields.io/docker/image-size/sickcodes/docker-osx/latest?label=sickcodes%2Fdocker-osx%3Alatest)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nBig-Sur:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur](https://img.shields.io/docker/image-size/sickcodes/docker-osx/big-sur?label=sickcodes%2Fdocker-osx%3Abig-sur)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nMonterey make your own image:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey](https://img.shields.io/docker/image-size/sickcodes/docker-osx/monterey?label=sickcodes%2Fdocker-osx%3Amonterey)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nVentura make your own image:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura](https://img.shields.io/docker/image-size/sickcodes/docker-osx/ventura?label=sickcodes%2Fdocker-osx%3Aventura)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nSonoma make your own image:\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma](https://img.shields.io/docker/image-size/sickcodes/docker-osx/sonoma?label=sickcodes%2Fdocker-osx%3Asonoma)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nPre-made **Catalina** system by [Sick.Codes](https://sick.codes): username: `user`, password: `alpine`\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto](https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nNaked: Bring-your-own-image setup (use any of the above first):\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked](https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nNaked Auto: same as above but with `-e USERNAME` & `-e PASSWORD` and `-e OSX_COMMANDS=\"put your commands here\"`\n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto](https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked-auto?label=sickcodes%2Fdocker-osx%3Anaked-auto)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n## Capabilities\n- use iPhone OSX KVM on Linux using [usbfluxd](https://github.com/corellium/usbfluxd)!\n- macOS Monterey VM on Linux!\n- Folder sharing-\n- USB passthrough (hotplug too)\n- SSH enabled (`localhost:50922`)\n- VNC enabled (`localhost:8888`) if using ./vnc version\n- iMessage security research via [serial number generator!](https://github.com/sickcodes/osx-serial-generator)\n- X11 forwarding is enabled\n- runs on top of QEMU + KVM\n- supports Big Sur, custom images, Xvfb headless mode\n- you can clone your container with `docker commit`\n\n### Requirements\n\n- 20GB+++ disk space for bare minimum installation (50GB if using Xcode)\n- virtualization should be enabled in your BIOS settings\n- a x86_64 kvm-capable host\n- at least 50 GBs for `:auto` (half for the base image, half for your runtime image\n\n### TODO\n\n- documentation for security researchers\n- gpu acceleration\n- support for virt-manager\n\n## Docker\n\nImages built on top of the contents of this repository are also available on **Docker Hub** for convenience: https://hub.docker.com/r/sickcodes/docker-osx\n\nA comprehensive list of the available Docker images and their intended purpose can be found in the [Instructions](#instructions).\n\n## Kubernetes\n\nDocker-OSX supports Kubernetes.\n\nKubernetes Helm Chart & Documentation can be found under the [helm directory](helm/README.md).\n\nThanks [cephasara](https://github.com/cephasara) for contributing this major contribution.\n\n[![Artifact HUB](https://img.shields.io/endpoint?url=https://artifacthub.io/badge/repository/docker-osx)](https://artifacthub.io/packages/search?repo=docker-osx)\n\n## Support\n\n### Small questions & issues\n\nFeel free to open an [issue](https://github.com/sickcodes/Docker-OSX/issues/new/choose), should you come across minor issues with running Docker-OSX or have any questions.\n\n#### Resolved issues\n\nBefore you open an issue, however, please check the [closed issues](https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed) and confirm that you're using the latest version of this repository — your issues may have already been resolved! You might also see your answer in our questions and answers section [below](#more-questions-and-answers).\n\n### Feature requests and updates\n\nFollow [@sickcodes](https://twitter.com/sickcodes)!\n\n### Professional support\n\nFor more sophisticated endeavours, we offer the following support services:\n\n- Enterprise support, business support, or casual support.\n- Custom images, custom scripts, consulting (per hour available!)\n- One-on-one conversations with you or your development team.\n\nIn case you're interested, contact [@sickcodes on Twitter](https://twitter.com/sickcodes) or click [here](https://sick.codes/contact).\n\n## License/Contributing\n\nDocker-OSX is licensed under the [GPL v3+](LICENSE). Contributions are welcomed and immensely appreciated. You are in fact permitted to use Docker-OSX as a tool to create proprietary software.\n\n### Other cool Docker/QEMU based projects\n- [Run Android in a Docker Container with Dock Droid](https://github.com/sickcodes/dock-droid)\n- [Run Android fully native on the host!](https://github.com/sickcodes/droid-native)\n- [Run iOS 12 in a Docker container with Docker-eyeOS](https://github.com/sickcodes/Docker-eyeOS) - [https://github.com/sickcodes/Docker-eyeOS](https://github.com/sickcodes/Docker-eyeOS)\n- [Run iMessage relayer in Docker with Bluebubbles.app](https://bluebubbles.app/) - [Getting started wiki](https://github.com/BlueBubblesApp/BlueBubbles-Server/wiki/Running-via-Docker)\n\n## Disclaimer\n\nIf you are serious about Apple Security, and possibly finding 6-figure bug bounties within the Apple Bug Bounty Program, then you're in the right place! Further notes: [Is Hackintosh, OSX-KVM, or Docker-OSX legal?](https://sick.codes/is-hackintosh-osx-kvm-or-docker-osx-legal/)\n\nProduct names, logos, brands and other trademarks referred to within this project are the property of their respective trademark holders. These trademark holders are not affiliated with our repository in any capacity. They do not sponsor or endorse this project in any way.\n\n# Instructions\n\n## Container images\n\n### Already set up or just looking to make a container quickly? Check out our [quick start](#quick-start-docker-osx) or see a bunch more use cases under our [container creation examples](#container-creation-examples) section.\n\nThere are several different Docker-OSX images available that are suitable for different purposes.\n\n- `sickcodes/docker-osx:latest` - [I just want to try it out.](#quick-start-docker-osx)\n- `sickcodes/docker-osx:latest` - [I want to use Docker-OSX to develop/secure apps in Xcode (sign into Xcode, Transporter)](#quick-start-your-own-image-naked-container-image)\n- `sickcodes/docker-osx:naked` - [I want to use Docker-OSX for CI/CD-related purposes (sign into Xcode, Transporter)](#building-a-headless-container-from-a-custom-image)\n\nCreate your personal image using `:latest` or `big-sur`. Then, pull the image out the image. Afterwards, you will be able to duplicate that image and import it to the `:naked` container, in order to revert the container to a previous state repeatedly.\n\n- `sickcodes/docker-osx:auto` - [I'm only interested in using the command line (useful for compiling software or using Homebrew headlessly).](#prebuilt-image-with-arbitrary-command-line-arguments)\n- `sickcodes/docker-osx:naked` - [I need iMessage/iCloud for security research.](#generating-serial-numbers)\n- `sickcodes/docker-osx:big-sur` - [I want to run Big Sur.](#quick-start-docker-osx)\n- `sickcodes/docker-osx:monterey` - [I want to run Monterey.](#quick-start-docker-osx)\n- `sickcodes/docker-osx:ventura` - [I want to run Ventura.](#quick-start-docker-osx)\n- `sickcodes/docker-osx:sonoma` - [I want to run Sonoma.](#quick-start-docker-osx)\n\n- `sickcodes/docker-osx:high-sierra` - I want to run High Sierra.\n- `sickcodes/docker-osx:mojave` - I want to run Mojave.\n\n## Initial setup\nBefore you do anything else, you will need to turn on hardware virtualization in your BIOS. Precisely how will depend on your particular machine (and BIOS), but it should be straightforward.\n\nThen, you'll need QEMU and some other dependencies on your host:\n\n```bash\n# ARCH\nsudo pacman -S qemu libvirt dnsmasq virt-manager bridge-utils flex bison iptables-nft edk2-ovmf\n\n# UBUNTU DEBIAN\nsudo apt install qemu qemu-kvm libvirt-clients libvirt-daemon-system bridge-utils virt-manager libguestfs-tools\n\n# CENTOS RHEL FEDORA\nsudo yum install libvirt qemu-kvm\n```\n\nThen, enable libvirt and load the KVM kernel module:\n\n```bash\nsudo systemctl enable --now libvirtd\nsudo systemctl enable --now virtlogd\n\necho 1 | sudo tee /sys/module/kvm/parameters/ignore_msrs\n\nsudo modprobe kvm\n```\n\n### I'd like to run Docker-OSX on Windows\n\nRunning Docker-OSX on Windows is possible using WSL2 (Windows 11 + Windows Subsystem for Linux).\n\nYou must have Windows 11 installed with build 22000+ (21H2 or higher).\n\nFirst, install WSL on your computer by running this command in an administrator powershell. For more info, look [here](https://docs.microsoft.com/en-us/windows/wsl/install).\n\nThis will install Ubuntu by default.\n```\nwsl --install\n```\n\n You can confirm WSL2 is enabled using `wsl -l -v` in PowerShell. To see other distributions that are available, use `wsl -l -o`.\n\nIf you have previously installed WSL1, upgrade to WSL 2. Check [this link to upgrade from WSL1 to WSL2](https://docs.microsoft.com/en-us/windows/wsl/install#upgrade-version-from-wsl-1-to-wsl-2).\n\nAfter WSL installation, go to `C:/Users/<Your_Name>/.wslconfig` and add `nestedVirtualization=true` to the end of the file (If the file doesn't exist, create it). For more information about the `.wslconfig` file check [this link](https://docs.microsoft.com/en-us/windows/wsl/wsl-config#wslconfig). Verify that you have selected \"Show Hidden Files\" and \"Show File Extensions\" in File Explorer options.\nThe result should be like this:\n```\n[wsl2]\nnestedVirtualization=true\n```\n\nGo into your WSL distro (Run `wsl` in powershell) and check if KVM is enabled by using the `kvm-ok` command. The output should look like this:\n\n```\nINFO: /dev/kvm exists\nKVM acceleration can be used\n```\n\nUse the command `sudo apt -y install bridge-utils cpu-checker libvirt-clients libvirt-daemon qemu qemu-kvm` to install it if it isn't.\n\nNow download and install [Docker for Windows](https://docs.docker.com/desktop/windows/install/) if it is not already installed.\n\nAfter installation, go into Settings and check these 2 boxes:\n\n```\nGeneral -> \"Use the WSL2 based engine\";\nResources -> WSL Integration -> \"Enable integration with my default WSL distro\", \n```\n\nEnsure `x11-apps` is installed. Use the command `sudo apt install x11-apps -y` to install it if it isn't.\n\nFinally, there are 3 ways to get video output:\n\n- WSLg: This is the simplest and easiest option to use. There may be some issues such as the keyboard not being fully passed through or seeing a second mouse on the desktop - [Issue on WSLg](https://github.com/microsoft/wslg/issues/376) - but this option is recommended.\n\nTo use WSLg's built-in X-11 server, change these two lines in the docker run command to point Docker-OSX to WSLg.\n\n```\n-e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \\\n```\nOr try:\n\n```\n-e \"DISPLAY=${DISPLAY:-:0}\" \\\n-v /mnt/wslg/.X11-unix:/tmp/.X11-unix \\\n```\n\nFor Ubuntu 20.x on Windows, see [https://github.com/sickcodes/Docker-OSX/discussions/458](https://github.com/sickcodes/Docker-OSX/discussions/458)\n\n- VNC: See the [VNC section](#building-a-headless-container-which-allows-insecure-vnc-on-localhost-for-local-use-only) for more information. You could also add -vnc argument to qemu. Connect to your mac VM via a VNC Client. [Here is a how to](https://wiki.archlinux.org/title/QEMU#VNC)\n- Desktop Environment: This will give you a full desktop linux experience but it will use a bit more of the computer's resources. Here is an example guide, but there are other guides that help set up a desktop environment. [DE Example](https://www.makeuseof.com/tag/linux-desktop-windows-subsystem/)\n\n## Additional boot instructions for when you are [creating your container](#container-creation-examples)\n\n- Boot the macOS Base System (Press Enter)\n\n- Click `Disk Utility`\n\n- Erase the BIGGEST disk (around 200gb default), DO NOT MODIFY THE SMALLER DISKS.\n-- if you can't click `erase`, you may need to reduce the disk size by 1kb\n\n- (optional) Create a partition using the unused space to house the OS and your files if you want to limit the capacity. (For Xcode 12 partition at least 60gb.)\n\n- Click `Reinstall macOS`\n\n- The system may require multiple reboots during installation\n\n## Troubleshooting\n\n### Routine checks\n\nThis is a great place to start if you are having trouble getting going, especially if you're not that familiar with Docker just yet.\n\nJust looking to make a container quickly? Check out our [container creation examples](#container-creation-examples) section.\n\nMore specific/advanced troubleshooting questions and answers may be found in [More Questions and Answers](#more-questions-and-answers). You should also check out the [closed issues](https://github.com/sickcodes/Docker-OSX/issues?q=is%3Aissue+is%3Aclosed). Someone else might have gotten a question like yours answered already even if you can't find it in this document!\n\n#### Confirm that your CPU supports virtualization\n\nSee [initial setup](#initial-setup).\n\n\n\n#### Docker Unknown Server OS error\n\n```console\ndocker: unknown server OS: .\nSee 'docker run --help'.\n```\n\nThis means your docker daemon is not running.\n\n`pgrep dockerd` should return nothing\n\nTherefore, you have a few choices.\n\n`sudo dockerd` for foreground Docker usage. I use this.\n\nOr\n\n`sudo systemctl --start dockerd` to start dockerd this now.\n\nOr\n\n`sudo systemctl --enable --now dockerd` for start dockerd on every reboot, and now.\n\n\n#### Use more CPU Cores/SMP\n\nExamples:\n\n`-e EXTRA='-smp 6,sockets=3,cores=2'`\n\n`-e EXTRA='-smp 8,sockets=4,cores=2'`\n\n`-e EXTRA='-smp 16,sockets=8,cores=2'`\n\nNote, unlike memory, CPU usage is shared. so you can allocate all of your CPU's to the container.\n\n### Confirm your user is part of the Docker group, KVM group, libvirt group\n\n#### Add yourself to the Docker group\n\nIf you use `sudo dockerd` or dockerd is controlled by systemd/systemctl, then you must be in the Docker group.\nIf you are not in the Docker group:\n\n```bash\nsudo usermod -aG docker \"${USER}\"\n```\nand also add yourself to the kvm and libvirt groups if needed:\n\n```bash\nsudo usermod -aG libvirt \"${USER}\"\nsudo usermod -aG kvm \"${USER}\"\n```\n\nSee also: [initial setup](#initial-setup).\n\n#### Is the docker daemon enabled?\n\n```bash\n# run ad hoc\nsudo dockerd\n\n# or daemonize it\nsudo nohup dockerd &\n\n# enable it in systemd (it will persist across reboots this way)\nsudo systemctl enable --now docker\n\n# or just start it as your user with systemd instead of enabling it\nsystemctl start docker\n```\n\n## More Questions and Answers\n\nBig thank you to our contributors who have worked out almost every conceivable issue so far!\n\n[https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md](https://github.com/sickcodes/Docker-OSX/blob/master/CREDITS.md)\n\n\n### Start the same container later (persistent disk)\n\nCreated a container with `docker run` and want to reuse the underlying image again later? \n\nNB: see [container creation examples](#container-creation-examples) first for how to get to the point where this is applicable.\n\nThis is for when you want to run the SAME container again later. You may need to use `docker commit` to save your container before you can reuse it. Check if your container is persisted with `docker ps --all`.\n\nIf you don't run this you will have a new image every time. \n\n```bash\n# look at your recent containers and copy the CONTAINER ID\ndocker ps --all\n\n# docker start the container ID\ndocker start -ai abc123xyz567\n\n# if you have many containers, you can try automate it with filters like this\n# docker ps --all --filter \"ancestor=sickcodes/docker-osx\"\n# for locally tagged/built containers\n# docker ps --all --filter \"ancestor=docker-osx\"\n\n```\n\nYou can also pull the `.img` file out of the container, which is stored in `/var/lib/docker`, and supply it as a runtime argument to the `:naked` Docker image. \n\nSee also: [here](https://github.com/sickcodes/Docker-OSX/issues/197).\n\n### I have used Docker-OSX before and want to restart a container that starts automatically\n\nContainers that use `sickcodes/docker-osx:auto` can be stopped while being started.\n\n```bash\n# find last container\ndocker ps -a\n\n# docker start old container with -i for interactive, -a for attach STDIN/STDOUT\ndocker start -ai -i <Replace this with your ID>\n```\n\n### LibGTK errors \"connection refused\"\n\nYou may see one or more libgtk-related errors if you do not have everything set up for hardware virtualisation yet. If you have not yet done so, check out the [initial setup](#initial-setup) section and the [routine checks](#routine-checks) section as you may have missed a setup step or may not have all the needed Docker dependencies ready to go.\n\nSee also: [here](https://github.com/sickcodes/Docker-OSX/issues/174).\n\n#### Permissions denied error\n\nIf you have not yet set up xhost, try the following:\n\n```bash\necho $DISPLAY\n\n# ARCH\nsudo pacman -S xorg-xhost\n\n# UBUNTU DEBIAN\nsudo apt install x11-xserver-utils\n\n# CENTOS RHEL FEDORA\nsudo yum install xorg-x11-server-utils\n\n# then run\nxhost +\n\n```\n\n### RAM over-allocation\nYou cannot allocate more RAM than your machine has. The default is 3 Gigabytes: `-e RAM=3`.\n\nIf you are trying to allocate more RAM to the container than you currently have available, you may see an error like the following: `cannot set up guest memory 'pc.ram': Cannot allocate memory`. See also: [here](https://github.com/sickcodes/Docker-OSX/issues/188), [here](https://github.com/sickcodes/Docker-OSX/pull/189).\n\nFor example (below) the `buff/cache` already contains 20 Gigabytes of allocated RAM:\n\n```console\n[user@hostname ~]$ free -mh\n               total        used        free      shared  buff/cache   available\nMem:            30Gi       3.5Gi       7.0Gi       728Mi        20Gi        26Gi\nSwap:           11Gi          0B        11Gi\n```\n\nClear the buffer and the cache:\n\n```bash\nsudo tee /proc/sys/vm/drop_caches <<< 3\n```\n\nNow check the RAM again:\n\n```console\n[user@hostname ~]$ free -mh\n               total        used        free      shared  buff/cache   available\nMem:            30Gi       3.3Gi        26Gi       697Mi       1.5Gi        26Gi\nSwap:           11Gi          0B        11Gi\n```\n\n### PulseAudio\n\n#### Use PulseAudio for sound\n\nNote: [AppleALC](https://github.com/acidanthera/AppleALC), [`alcid`](https://dortania.github.io/OpenCore-Post-Install/universal/audio.html) and [VoodooHDA-OC](https://github.com/chris1111/VoodooHDA-OC) do not have [codec support](https://osy.gitbook.io/hac-mini-guide/details/hda-fix#hda-codec). However, [IORegistryExplorer](https://github.com/vulgo/IORegistryExplorer) does show the controller component working.\n\n```bash\ndocker run \\\n    --device /dev/kvm \\\n    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \\\n    -v \"/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    sickcodes/docker-osx\n```\n\n#### PulseAudio debugging\n\n```bash\ndocker run \\\n    --device /dev/kvm \\\n    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \\\n    -v \"/run/user/$(id -u)/pulse/native:/tmp/pulseaudio.socket\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e PULSE_SERVER=unix:/tmp/pulseaudio.socket \\\n    sickcodes/docker-osx pactl list\n```\n\n#### PulseAudio with WSLg\n\n```bash\ndocker run \\\n    --device /dev/kvm \\\n    -e AUDIO_DRIVER=pa,server=unix:/tmp/pulseaudio.socket \\\n    -v /mnt/wslg/runtime-dir/pulse/native:/tmp/pulseaudio.socket \\\n    -v /mnt/wslg/.X11-unix:/tmp/.X11-unix \\\n    sickcodes/docker-osx\n```\n\n### Forward additional ports (nginx hosting example)\n\nIt's possible to forward additional ports depending on your needs. In this example, we'll use Mac OSX to host nginx:\n\n```\nhost:10023 <-> 10023:container:10023 <-> 80:guest\n```\n\nOn the host machine, run:\n\n```bash\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,' \\\n    -p 10023:10023 \\\n    sickcodes/docker-osx:auto\n```\n\nIn a Terminal session running the container, run:\n\n```bash\n/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n\nbrew install nginx\nsudo sed -i -e 's/8080/80/' /usr/local/etc/nginx/nginx.confcd\n# sudo nginx -s stop\nsudo nginx\n```\n\n**nginx should now be reachable on port 10023.**\n\nAdditionally, you can string multiple statements together, for example:\n\n```bash\n    -e ADDITIONAL_PORTS='hostfwd=tcp::10023-:80,hostfwd=tcp::10043-:443,'\n    -p 10023:10023 \\\n    -p 10043:10043 \\\n```\n\n### Bridged networking\n\nYou might not need to do anything with the default setup to enable internet connectivity from inside the container. Additionally, `curl` may work even if `ping` doesn't.\n\nSee discussion [here](https://github.com/sickcodes/Docker-OSX/issues/177) and [here](https://github.com/sickcodes/Docker-OSX/issues/72) and [here](https://github.com/sickcodes/Docker-OSX/issues/88).\n\n### Enable IPv4 forwarding for bridged network connections for remote installations\n\nThis is not required for LOCAL installations.\n\nAdditionally note it may [cause the host to leak your IP, even if you're using a VPN in the container](https://sick.codes/cve-2020-15590/).\n\nHowever, if you're trying to connect to an instance of Docker-OSX remotely (e.g. an instance of Docker-OSX hosted in a datacenter), this may improve your performance:\n\n```bash\n# enable for current session\nsudo sysctl -w net.ipv4.ip_forward=1\n\n# OR\n# sudo tee /proc/sys/net/ipv4/ip_forward <<< 1\n\n# enable permanently\nsudo touch /etc/sysctl.conf\nsudo tee -a /etc/sysctl.conf <<EOF\nnet.ipv4.ip_forward = 1\nEOF\n\n# or edit manually with the editor of your choice\nnano /etc/sysctl.conf || vi /etc/sysctl.conf || vim /etc/sysctl.conf\n\n# now reboot\n```\n\n## Share folder with Docker-OSX QEMU macOS\n\nSharing a folder with guest is quite simple.\n\nYour folder, will go to /mnt/hostshare inside the Arch container which is then passed over QEMU.\n\nThen mount using `sudo -S mount_9p hostshare` from inside the mac.\n\nFor example,\n\n```bash\nFOLDER=~/somefolder\n```\n\n```bash\n    -v \"${FOLDER}:/mnt/hostshare\" \\\n    -e EXTRA=\"-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare\" \\\n```\n\nFull example:\n\n```bash\n# stat mac_hdd_ng.img\nSHARE=~/somefolder\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -v \"${PWD}/mac_hdd_ng.img:/home/arch/OSX-KVM/mac_hdd_ng.img\" \\\n    -v \"${SHARE}:/mnt/hostshare\" \\\n    -e EXTRA=\"-virtfs local,path=/mnt/hostshare,mount_tag=hostshare,security_model=passthrough,id=hostshare\" \\\n    sickcodes/docker-osx:latest\n\n# !!! Open Terminal inside macOS and run the following command to mount the virtual file system\n# sudo -S mount_9p hostshare\n\n```\n### Share Linux NFS Drive into macOS\n\nTo share a folder using NFS, setup a folder for on the host machine, for example, `/srv/nfs/share` and then append to `/etc/exports`:\n```bash\n/srv/nfs/share      127.0.0.1/0(insecure,rw,all_squash,anonuid=1000,anongid=985,no_subtree_check)\n```\n\nYou may need to reload exports now, which will begin sharing that directory.\n\n```bash\n# reload shared folders\nsudo exportfs -arv\n```\n\n[Source & Explanation](https://serverfault.com/questions/716350/mount-nfs-volume-on-ubuntu-linux-server-from-macos-client)\n\nGive permissions on the shared folder for the `anonuid` and `anongid`, where `anonuid` and `anongid` matches that of your linux user; `id -u`\n\n`id -u ; id -g` will print `userid:groupid`\n```\nchown 1000:985 /srv/nfs/share\nchmod u+rwx /srv/nfs/share\n```\n\nStart the Docker-OSX container with the additional flag `--network host`\n\nCreate and mount the nfs folder from the mac terminal:\n```\nmkdir -p ~/mnt\nsudo mount_nfs -o locallocks 10.0.2.2:/srv/nfs/share ~/mnt\n```\n\n### Share USB Drive into macOS over QEMU\n\n## Mount USB Drive (Hotplug/Hot Plug USB)\n\nStart your container.\n\nPick a port, for example, `7700`.\n\n`lsusb` to get `vid:pid`\n\nOn Linux:\n`sudo usbredirserver -p 7700 1e3d:2096`\n\nNow, in the Docker window hit Enter to see the `(qemu)` console.\n\nYou can add/remove the disk using commands like this, even once the machine is started:\n\n`chardev-add socket,id=usbredirchardev1,port=7700,host=172.17.0.1`\n\n`device_add usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4`\n\n## Mount USB Drive inside macOS at boot Docker OSX\n\n```bash\nPORT=7700\nIP_ADDRESS=172.17.0.1\n\n-e EXTRA=\"-chardev socket,id=usbredirchardev1,port=${PORT},host=${IP_ADDRESS} -device usb-redir,chardev=usbredirchardev1,id=usbredirdev1,debug=4\" \\`\n```\n\n### Fedora: enable internet connectivity with a bridged network\n\nFedora's default firewall settings may prevent Docker's network interface from reaching the internet. In order to resolve this, you will need to whitelist the interface in your firewall:\n\n```bash\n# Set the docker0 bridge to the trusted zone\nsudo firewall-cmd --permanent --zone=trusted --add-interface=docker0\nsudo firewall-cmd --reload\n```\n\n### Nested Hardware Virtualization\n\nCheck if your machine has hardware virtualization enabled:\n\n```bash\nsudo tee /sys/module/kvm/parameters/ignore_msrs <<< 1\n\negrep -c '(svm|vmx)' /proc/cpuinfo\n```\n\n### Virtual network adapters\n\n#### Fast internet connectivity\n\n`-e NETWORKING=vmxnet3`\n\n#### Slow internet connectivity\n\n`-e NETWORKING=e1000-82545em`\n\n### CI/CD Related Improvements\n\n#### Tips for reducing the size of the image\n\n- Start the container as usual, and remove unnecessary files. A useful way\n  to do this is to use `du -sh *` starting from the `/` directory, and find\n  large directories where files can be removed. E.g. unnecessary cached files,\n  Xcode platforms, etc.\n- Once you are satisfied with the amount of free space, enable trim with `sudo trimforce enable`, and reboot.\n- Zero out the empty space on the disk with `dd if=/dev/zero of=./empty && rm -f empty`\n- Shut down the VM and copy out the qcow image with `docker cp stoppedcontainer:/home/arch/OSX-KVM/mac_hdd_ng.img .`\n- Run `qemu-img check -r all mac_hdd_ng.img` to fix any errors.\n- Run `qemu-img convert -O qcow2 mac_hdd_ng.img deduped.img` and check for errors again\n- **OPTIONAL:** Run `qemu-img convert -c -O qcow2 deduped.img compressed.img` to further compress the image. This may reduce the runtime speed though, but it should reduce the size by roughly 25%.\n- Check for errors again, and build a fresh docker image. E.g. with this Dockerfile\n\n```\nFROM sickcodes/docker-osx\nUSER arch\nCOPY --chown=arch ./deduped.img /home/arch/OSX-KVM/mac_hdd_ng.img\n```\n\n### Run Docker-OSX headlessly with Telnet\n\nFirst make sure [autoboot is enabled](#autoboot-into-osx-after-youve-installed-everything)\n\nNext, you will want to set up SSH to be automatically started.\n\n```bash\nsudo systemsetup -setremotelogin on\n```\n\nMake sure to commit the new docker image and save it, or rebuild as described in the [section on reducing disk space](#how-to-reduce-the-size-of-the-image).\n\nThen run it with these arguments.\n\n```bash\n# Run with the -nographic flag, and enable a telnet interface\n  docker run \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e EXTRA=\"-monitor telnet::45454,server,nowait -nographic -serial null\" \\\n    mycustomimage\n```\n\n### What mirrors are appropriate to use to build Docker-OSX locally?\n\nIf you are building Docker-OSX locally, you'll probably want to use Arch Linux's mirrors.\n\nMirror locations can be found here (uses two-letter country codes): https://archlinux.org/mirrorlist/all/\n\n```bash\ndocker build -t docker-osx:latest \\\n    --build-arg RANKMIRRORS=true \\\n    --build-arg MIRROR_COUNTRY=US \\\n    --build-arg MIRROR_COUNT=10 \\\n    --build-arg SHORTNAME=catalina \\\n    --build-arg SIZE=200G .\n```\n\n### Custom QEMU Arguments (passthrough devices)\n\nPass any devices/directories to the Docker container & the QEMU arguments using the handy runtime argument provider option `-e EXTRA=`.\n\n```bash\n# example customizations\ndocker run \\\n    -e RAM=4 \\\n    -e SMP=4 \\\n    -e CORES=4 \\\n    -e EXTRA='-usb -device usb-host,hostbus=1,hostaddr=8' \\\n    -e INTERNAL_SSH_PORT=23 \\\n    -e MAC_ADDRESS=\"$(xxd -c1 -p -l 6 /dev/urandom | tr '\\n' ':' | cut -c1-17)\" \\\n    -e AUDIO_DRIVER=alsa \\\n    -e IMAGE_PATH=/image \\\n    -e SCREEN_SHARE_PORT=5900 \\\n    -e DISPLAY=:0 \\\n    -e NETWORKING=vmxnet3 \\\n    --device /dev/kvm \\\n    --device /dev/snd \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    docker-osx:latest\n```\n\n### Generating serial numbers\n\nGenerate serial numbers in `./custom` OR make docker generate them at runtime (see below).\n\nAt any time, verify your serial number before logging into iCloud, etc.\n\n```bash\n# this is a quick way to check your serial number via cli inside OSX\nioreg -l | grep IOPlatformSerialNumber\n\n# test some commands\nsshpass -p 'alpine' ssh user@localhost -p 50922 'ping google.com'\n\n# check your serial number\nsshpass -p 'alpine' ssh user@localhost -p 50922 'ioreg -l | grep IOPlatformSerialNumber'\n```\n\n#### Getting started with serial numbers\n\n```bash\n# ARCH\npacman -S libguestfs\n\n# UBUNTU DEBIAN\napt install libguestfs -y\n\n# RHEL FEDORA CENTOS\nyum install libguestfs -y\n```\n\nInside the `./custom` folder you will find `4` scripts.\n\n- `config-nopicker-custom.plist`\n- `opencore-image-ng.sh`\n\nThese two files are from OSX-KVM.\n\nYou don't need to touch these two files.\n\nThe config.plist has 5 values replaced with placeholders. [Click here to see those values for no reason.](https://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L705)\n\n- `generate-unique-machine-values.sh`\nThis script will generate serial numbers, with Mac Addresses, plus output to CSV/TSV, plus make a `bootdisk image`.\n\nYou can create hundreds, `./custom/generate-unique-machine-values.sh --help`\n\n```bash\n./custom/generate-unique-machine-values.sh \\\n    --count 1 \\\n    --tsv ./serial.tsv \\\n    --bootdisks \\\n    --output-bootdisk OpenCore.qcow2 \\\n    --output-env source.env.sh\n```\n\nOr if you have some specific serial numbers...\n\n- `generate-specific-bootdisk.sh`\n```bash\ngenerate-specific-bootdisk.sh \\\n    --model \"${DEVICE_MODEL}\" \\\n    --serial \"${SERIAL}\" \\\n    --board-serial \"${BOARD_SERIAL}\" \\\n    --uuid \"${UUID}\" \\\n    --mac-address \"${MAC_ADDRESS}\" \\\n    --output-bootdisk OpenCore-nopicker.qcow2\n```\n#### This example generates a random set of serial numbers at runtime, headlessly\n\n```bash\n# proof of concept only, generates random serial numbers, headlessly, and quits right after.\ndocker run --rm -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -e NOPICKER=true \\\n    -e GENERATE_UNIQUE=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    sickcodes/docker-osx:auto\n\n# -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \\\n```\n\n#### This example generates a specific set of serial numbers at runtime\n\n```bash\n# run the same as above 17gb auto image, with SSH, with nopicker, and save the bootdisk for later.\n# you don't need to save the bootdisk IF you supply specific serial numbers!\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -e NOPICKER=true \\\n    -e GENERATE_SPECIFIC=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    -e SERIAL=\"C02TW0WAHX87\" \\\n    -e BOARD_SERIAL=\"C027251024NJG36UE\" \\\n    -e UUID=\"5CCB366D-9118-4C61-A00A-E5BAF3BED451\" \\\n    -e MAC_ADDRESS=\"A8:5C:2C:9A:46:2F\" \\\n    -e OSX_COMMANDS='ioreg -l | grep IOPlatformSerialNumber' \\\n    sickcodes/docker-osx:auto\n```\n\n#### This example generates a specific set of serial numbers at runtime, with your existing image, at 1000x1000 display resolution\n\n```bash\n# run an existing image in current directory, with a screen, with SSH, with nopicker.\n\nstat mac_hdd_ng.img # make sure you have an image if you're using :naked\n\ndocker run -it \\\n    -v \"${PWD}/mac_hdd_ng.img:/image\" \\\n    --device /dev/kvm \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -p 50922:10022 \\\n    -e NOPICKER=true \\\n    -e GENERATE_SPECIFIC=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    -e SERIAL=\"C02TW0WAHX87\" \\\n    -e BOARD_SERIAL=\"C027251024NJG36UE\" \\\n    -e UUID=\"5CCB366D-9118-4C61-A00A-E5BAF3BED451\" \\\n    -e MAC_ADDRESS=\"A8:5C:2C:9A:46:2F\" \\\n    -e WIDTH=1000 \\\n    -e HEIGHT=1000 \\\n    sickcodes/docker-osx:naked\n```\n\nIf you want to generate serial numbers, either make them at runtime using\n`    -e GENERATE_UNIQUE=true \\`\n\nOr you can generate them inside the `./custom` folder. And then use:\n```bash\n    -e GENERATE_SPECIFIC=true \\\n    -e SERIAL=\"\" \\\n    -e BOARD_SERIAL=\"\" \\\n    -e UUID=\"\" \\\n    -e MAC_ADDRESS=\"\" \\\n```\n\n#### Making serial numbers persist across reboots\n\n```bash\n\nstat mac_hdd_ng_testing.img\ntouch ./output.env\n\n# generate fresh random serial numbers, with a screen, using your own image, and save env file with your new serial numbers for later.\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -p 50922:10022 \\\n    -e NOPICKER=true \\\n    -e GENERATE_UNIQUE=true \\\n    -e GENERATE_SPECIFIC=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    -v \"${PWD}/output.env:/env\" \\\n    -v \"${PWD}/mac_hdd_ng_testing.img:/image\" \\\n    sickcodes/docker-osx:naked\n```\n\nTo use iMessage or iCloud you need to change `5` values.\n\n- `SERIAL`\n- `BOARD_SERIAL`\n- `UUID`\n- `MAC_ADDRESS`\n\n_`ROM` is just the lowercased mac address, without `:` between each word._\n\nYou can tell the container to generate them for you using `-e GENERATE_UNIQUE=true`\n\nOr tell the container to use specific ones using `-e GENERATE_SPECIFIC=true`\n\n```bash\n    -e GENERATE_SPECIFIC=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    -e SERIAL=\"C02TW0WAHX87\" \\\n    -e BOARD_SERIAL=\"C027251024NJG36UE\" \\\n    -e UUID=\"5CCB366D-9118-4C61-A00A-E5BAF3BED451\" \\\n    -e MAC_ADDRESS=\"A8:5C:2C:9A:46:2F\" \\\n```\n\n### Changing display resolution\n\nThe display resolution is controlled by this line:\n\nhttps://github.com/sickcodes/Docker-OSX/blob/master/custom/config-nopicker-custom.plist#L819\n\nInstead of mounting that disk, Docker-OSX will generate a new `OpenCore.qcow2` by using this one cool trick:\n\n```bash\n-e GENERATE_UNIQUE=true \\\n-e WIDTH=800 \\\n-e HEIGHT=600 \\\n```\n\nTo use `WIDTH`/`HEIGHT`, you must use with either `-e GENERATE_UNIQUE=true` or `-e GENERATE_SPECIFIC=true`.\n\nIt will take around 30 seconds longer to boot because it needs to make a new boot partition using `libguestfs`.\n\n```bash\n-e GENERATE_SPECIFIC=true \\\n-e WIDTH=1920 \\\n-e HEIGHT=1080 \\\n-e SERIAL=\"\" \\\n-e BOARD_SERIAL=\"\" \\\n-e UUID=\"\" \\\n-e MAC_ADDRESS=\"\" \\\n```\n\n#### Change Docker-OSX Resolution Examples\n\n```bash\n# using an image in your current directory\nstat mac_hdd_ng.img\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng.img:/image\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_SPECIFIC=true \\\n    -e DEVICE_MODEL=\"iMacPro1,1\" \\\n    -e SERIAL=\"C02TW0WAHX87\" \\\n    -e BOARD_SERIAL=\"C027251024NJG36UE\" \\\n    -e UUID=\"5CCB366D-9118-4C61-A00A-E5BAF3BED451\" \\\n    -e MAC_ADDRESS=\"A8:5C:2C:9A:46:2F\" \\\n    -e MASTER_PLIST_URL=https://raw.githubusercontent.com/sickcodes/Docker-OSX/master/custom/config-nopicker-custom.plist \\\n    -e WIDTH=1600 \\\n    -e HEIGHT=900 \\\n    sickcodes/docker-osx:naked\n```\n\n```bash\n# generating random serial numbers, using the DIY installer, along with the screen resolution changes.\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e GENERATE_UNIQUE=true \\\n    -e WIDTH=800 \\\n    -e HEIGHT=600 \\\n    sickcodes/docker-osx:latest\n```\n\nHere's a few other resolutions! If your resolution is invalid, it will default to 800x600.\n\n```\n    -e WIDTH=800 \\\n    -e HEIGHT=600 \\\n```\n\n```\n    -e WIDTH=1280 \\\n    -e HEIGHT=768 \\\n```\n\n```\n    -e WIDTH=1600 \\\n    -e HEIGHT=900 \\\n```\n\n```\n    -e WIDTH=1920 \\\n    -e HEIGHT=1080 \\\n```\n\n```\n    -e WIDTH=2560 \\\n    -e HEIGHT=1600 \\\n```\n\n#### This example shows how to change resolution after the container is created.\n\nFirst step is to stop the docker daemon\n```\nsudo systemctl stop docker\n```\nThe second step is to change container config in \n```\n/var/lib/docker/containers/[container-id]/config.v2.json\n```\n(Suppose your original WIDTH is 1024 and HEIGHT is 768, you can search 1024 and replace it with the new value. Same for 768.)\n\nThe last step is to restart the docker daemon\n```\nsudo systemctl restart docker\n```\n\n### Mounting physical disks in Mac OSX\n\nPass the disk into the container as a volume and then pass the disk again into QEMU command line extras with.\n\nUse the `config-custom.plist` because you probably want to see the boot menu, otherwise omit the first line:\n\n```bash\nDISK_TWO=\"${PWD}/mount_me.img\"\n```\n```dockerfile\n-e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \\\n-v \"${DISK_TWO}:/disktwo\" \\\n-e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \\\n```\n\n#### Physical disk mounting example\n\n```bash\nOSX_IMAGE=\"${PWD}/mac_hdd_ng_xcode_bigsur.img\"\nDISK_TWO=\"${PWD}/mount_me.img\"\n\ndocker run -it \\\n    --device /dev/kvm \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e MASTER_PLIST_URL='https://raw.githubusercontent.com/sickcodes/osx-serial-generator/master/config-custom.plist' \\\n    -v \"${OSX_IMAGE}\":/image \\\n    -v \"${DISK_TWO}\":/disktwo \\\n    -e EXTRA='-device ide-hd,bus=sata.5,drive=DISK-TWO -drive id=DISK-TWO,if=none,file=/disktwo,format=qcow2' \\\n    sickcodes/docker-osx:naked\n```\n\nSee also: [here](https://github.com/sickcodes/Docker-OSX/issues/222).\n\n\n#### Extracting the APFS disk on Linux\n\nIn Docker-OSX, we are using `qcow2` images.\n\nThis means the image grows as you use it, but the guest OS thinks you have 200GB available.\n\n\n**READ ONLY**\n\n```bash\n# mount the qemu image like a real disk\nsudo modprobe nbd max_part=8\nsudo qemu-nbd --connect=/dev/nbd0 ./image.img\nsudo fdisk /dev/nbd0 -l\n\nmkdir -p ./mnt\nsudo mount /dev/nbd0p1 ./mnt\n\n# inspect partitions (2 partitions)\nsudo fdisk /dev/nbd0 -l\n\n# mount using apfs-linux-rw OR apfs-fuse\nmkdir -p ./part\n\nsudo mount /dev/nbd0p2 ./part\nsudo apfs-fuse -o allow_other /dev/nbd0p2 ./part\n\n```\n\nWhen you are finishing looking at your disk, you can unmount the partition, the disk, and remove the loopback device:\n\n```bash\nsudo umount ./part\nsudo umount ./mnt\nsudo qemu-nbd --disconnect /dev/nbd0\nsudo rmmod nbd\n```\n\n### USB Passthrough\n\nFirstly, QEMU must be started as root. \n\nIt is also potentially possible to accomplish USB passthrough by changing the permissions of the device in the container.\nSee [here](https://www.linuxquestions.org/questions/slackware-14/qemu-usb-permissions-744557/#post3628691).\n\nFor example, create a new Dockerfile with the following\n\n```bash\nFROM sickcodes/docker-osx\nUSER arch\nRUN sed -i -e s/exec\\ qemu/exec\\ sudo\\ qemu/ ./Launch.sh\nCOPY --chown=arch ./new_image.img /home/arch/OSX-KVM/mac_hdd_ng.img\n```\n\nWhere `new_image.img` is the qcow2 image you extracted. Then rebuild with `docker build .`\n\nNext we need to find out the bus and port numbers of the USB device we want to pass through to the VM:\n\n```bash\nlsusb -t\n/:  Bus 02.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/6p, 5000M\n/:  Bus 01.Port 1: Dev 1, Class=root_hub, Driver=xhci_hcd/12p, 480M\n    |__ Port 2: Dev 5, If 0, Class=Human Interface Device, Driver=usbhid, 12M\n    |__ Port 2: Dev 5, If 1, Class=Chip/SmartCard, Driver=, 12M\n    |__ Port 3: Dev 2, If 0, Class=Wireless, Driver=, 12M\n    |__ Port 3: Dev 2, If 1, Class=Wireless, Driver=, 12M\n    |__ Port 5: Dev 3, If 0, Class=Video, Driver=uvcvideo, 480M\n    |__ Port 5: Dev 3, If 1, Class=Video, Driver=uvcvideo, 480M\n```\n\nIn this example, we want to pass through a smartcard device. The device we want is on bus 1 and port 2.\n\nThere may also be differences if your device is usb 2.0 (ehci) vs usb 3.0 (xhci).\nSee [here](https://unix.stackexchange.com/a/452946/101044) for more details.\n\n\n```bash\n# hostbus and hostport correspond to the numbers from lsusb\n# runs in privileged mode to enable access to the usb devices.\ndocker run \\\n  --privileged \\\n  --device /dev/kvm \\\n  -e RAM=4 \\\n  -p 50922:10022 \\\n  -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n  -e EXTRA=\"-device virtio-serial-pci -device usb-host,hostbus=1,hostport=2\" \\\n  mycustomimage\n```\n\nYou should see the device show up when you do `system_profiler SPUSBDataType` in the MacOS shell.\n\nImportant Note: this will cause the host system to lose access to the USB device while the VM is running!\n\n## Container creation examples\n\n#### Quick Start your own image (naked container image)\n\nThis is my favourite container. You can supply an existing disk image as a Docker command line argument.\n\n- Pull images out using `sudo find /var/lib/docker -name mac_hdd_ng.img -size +10G`\n\n- Supply your own local image with the command argument `-v \"${PWD}/mac_hdd_ng.img:/image\"` and use `sickcodes/docker-osx:naked` when instructing Docker to create your container.\n\n  - Naked image is for booting any existing .img file, e.g in the current working directory (`$PWD`)\n  - By default, this image has a variable called `NOPICKER` which is `\"true\"`. This skips the disk selection menu. Use `-e NOPICKER=false` or any other string than the word `true` to enter the boot menu.\n\n    This lets you use other disks instead of skipping the boot menu, e.g. recovery disk or disk utility.\n\n```bash\ndocker pull sickcodes/docker-osx:naked\n\n# run your own image + SSH\n# change mac_hdd_ng.img\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng.img:/image\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    sickcodes/docker-osx:naked\n\n# run local copy of the auto image + SSH + Boot menu\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng_auto.img:/image\" \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e \"NOPICKER=false\" \\\n    sickcodes/docker-osx:naked\n```\n\n### Building an OSX container with video output\n\nThe Quick Start command should work out of the box, provided that you keep the following lines. Works in `auto` & `naked` machines:\n\n```\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n```\n\n#### Prebuilt image with arbitrary command line arguments \n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto](https://img.shields.io/docker/image-size/sickcodes/docker-osx/auto?label=sickcodes%2Fdocker-osx%3Aauto)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\n`-e OSX_COMMANDS` lets you run any commands inside the container\n\n```bash\ndocker pull sickcodes/docker-osx:auto\n\n# boot to OS X shell + display + specify commands to run inside OS X!\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e \"OSX_COMMANDS=/bin/bash -c \\\"put your commands here\\\"\" \\\n    sickcodes/docker-osx:auto\n\n# Boots in a minute or two!\n```\n\nOR if you have an image already and just want to log in and execute arbitrary commands:\n\n```bash\ndocker pull sickcodes/docker-osx:naked-auto\n\n# boot to OS X shell + display + specify commands to run inside OS X!\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e USERNAME=yourusername \\\n    -e PASSWORD=yourpassword \\\n    -e \"OSX_COMMANDS=/bin/bash -c \\\"put your commands here\\\"\" \\\n    sickcodes/docker-osx:naked-auto\n\n# Boots in a minute or two!\n\n```\n\n### Further examples\n\nThere's a myriad of other potential use cases that can work perfectly with Docker-OSX, some of which you'll see below!\n\n### Building a headless OSX container\n\nFor a headless container, **remove** the following two lines from your `docker run` command:\n\n```\n    # -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    # -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n```\n\n#### Building a headless container from a custom image \n\n[![https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked](https://img.shields.io/docker/image-size/sickcodes/docker-osx/naked?label=sickcodes%2Fdocker-osx%3Anaked)](https://hub.docker.com/r/sickcodes/docker-osx/tags?page=1&ordering=last_updated)\n\nThis is particularly helpful for CI/CD pipelines.\n\n```bash\n# run your own image headless + SSH\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -v \"${PWD}/mac_hdd_ng.img:/image\" \\\n    sickcodes/docker-osx:naked\n```\n\n### Building a headless container that allows insecure VNC on localhost (!for local use only!)\n\n**Must change -it to -i to be able to interact with the QEMU console**\n\n**To exit a container using -i you must `docker kill <containerid>`. For example, to kill everything, `docker ps | xargs docker kill`.**\n\nNative QEMU VNC example\n\n```bash\ndocker run -i \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    -p 5999:5999 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e EXTRA=\"-display none -vnc 0.0.0.0:99,password=on\" \\\n    sickcodes/docker-osx:big-sur\n\n# type `change vnc password myvncusername` into the docker terminal and set a password\n# connect to localhost:5999 using VNC\n# qemu 6 seems to require a username for vnc now\n```\n\n**NOT TLS/HTTPS Encrypted at all!**\n\nOr `ssh -N root@1.1.1.1 -L  5999:127.0.0.1:5999`, where `1.1.1.1` is your remote server IP.\n\n(Note: if you close port 5999 and use the SSH tunnel, this becomes secure.)\n\n### Building a headless container to run remotely with secure VNC\n\nAdd the following line:\n\n`-e EXTRA=\"-display none -vnc 0.0.0.0:99,password=on\"`\n\nIn the Docker terminal, press `enter` until you see `(qemu)`.\n\nType `change vnc password someusername`\n\nEnter a password for your new vnc username^.\n\nYou also need the container IP: `docker inspect <containerid> | jq -r '.[0].NetworkSettings.IPAddress'`\n\nOr `ip n` will usually show the container IP first.\n\nNow VNC connects using the Docker container IP, for example `172.17.0.2:5999`\n\nRemote VNC over SSH: `ssh -N root@1.1.1.1 -L  5999:172.17.0.2:5999`, where `1.1.1.1` is your remote server IP and `172.17.0.2` is your LAN container IP.\n\nNow you can direct connect VNC to any container built with this command!\n\n### I'd like to use SPICE instead of VNC\n\nOptionally, you can enable the SPICE protocol, which allows use of `remote-viewer` to access your OSX container rather than VNC.\n\nNote: `-disable-ticketing` will allow unauthenticated access to the VM. See the [spice manual](https://www.spice-space.org/spice-user-manual.html) for help setting up authenticated access (\"Ticketing\").\n\n```bash\n  docker run \\\n    --device /dev/kvm \\\n    -p 3001:3001 \\\n    -p 50922:10022 \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    -e EXTRA=\"-monitor telnet::45454,server,nowait -nographic -serial null -spice disable-ticketing,port=3001\" \\\n    mycustomimage\n```\n\nThen simply do `remote-viewer spice://localhost:3001` and add `--spice-debug` for debugging.\n\n#### Creating images based on an already configured and set up container\n```bash\n# You can create an image of an already configured and setup container.\n# This allows you to effectively duplicate a system.\n# To do this, run the following commands\n\n# make note of your container id\ndocker ps --all\ndocker commit containerid newImageName\n\n# To run this image do the following\ndocker run \\\n    --device /dev/kvm \\\n    --device /dev/snd \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    newImageName\n```\n\n```bash\ndocker pull sickcodes/docker-osx:auto\n\n# boot directly into a real OS X shell with no display (Xvfb) [HEADLESS]\ndocker run -it \\\n    --device /dev/kvm \\\n    -p 50922:10022 \\\n    sickcodes/docker-osx:auto\n\n# username is user\n# password is alpine\n# Wait 2-3 minutes until you drop into the shell.\n```\n\n#### Run the original version of Docker-OSX\n\n```bash\n\ndocker pull sickcodes/docker-osx:latest\n\ndocker run -it \\\n    --device /dev/kvm \\\n    --device /dev/snd \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    sickcodes/docker-osx:latest\n\n# press CTRL + G if your mouse gets stuck\n# scroll down to troubleshooting if you have problems\n# need more RAM and SSH on localhost -p 50922?\n```\n\n#### Run but enable SSH in OS X (Original Version)!\n\n```bash\ndocker run -it \\\n    --device /dev/kvm \\\n    --device /dev/snd \\\n    -p 50922:10022 \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -e \"DISPLAY=${DISPLAY:-:0.0}\" \\\n    sickcodes/docker-osx:latest\n\n# turn on SSH after you've installed OS X in the \"Sharing\" settings.\nssh user@localhost -p 50922\n```\n\n#### Autoboot into OS X after you've installed everything\n\nAdd the extra option `-e NOPICKER=true`.\n\nOld machines:\n\n```bash\n# find your containerID\ndocker ps\n\n# move the no picker script on top of the Launch script\n# NEW CONTAINERS\ndocker exec containerID mv ./Launch-nopicker.sh ./Launch.sh\n\n# VNC-VERSION-CONTAINER\ndocker exec containerID mv ./Launch-nopicker.sh ./Launch_custom.sh\n\n# LEGACY CONTAINERS\ndocker exec containerID bash -c \"grep -v InstallMedia ./Launch.sh > ./Launch-nopicker.sh\nchmod +x ./Launch-nopicker.sh\nsed -i -e s/OpenCore\\.qcow2/OpenCore\\-nopicker\\.qcow2/ ./Launch-nopicker.sh\n\"\n```\n\n\n\n### The big-sur image starts slowly after installation. Is this expected?\n\nAutomatic updates are still on in the container's settings. You may wish to turn them off. [We have future plans for development around this.](https://github.com/sickcodes/Docker-OSX/issues/227)\n\n### What is `${DISPLAY:-:0.0}`?\n\n`$DISPLAY` is the shell variable that refers to your X11 display server.\n\n`${DISPLAY}` is the same, but allows you to join variables like this:\n\n- e.g. `${DISPLAY}_${DISPLAY}` would print `:0.0_:0.0`\n- e.g. `$DISPLAY_$DISPLAY`     would print `:0.0`\n\n...because `$DISPLAY_` is not `$DISPLAY`\n\n`${variable:-fallback}` allows you to set a \"fallback\" variable to be substituted if `$variable` is not set.\n\nYou can also use `${variable:=fallback}` to set that variable (in your current terminal).\n\nIn Docker-OSX, we assume, `:0.0` is your default `$DISPLAY` variable.\n\nYou can see what yours is\n\n```bash\necho $DISPLAY\n```\n\nThat way, `${DISPLAY:-:0.0}` will use whatever variable your X11 server has set for you, else `:0.0`\n\n### What is `-v /tmp/.X11-unix:/tmp/.X11-unix`?\n\n`-v` is a Docker command-line option that lets you pass a volume to the container.\n\nThe directory that we are letting the Docker container use is a X server display socket.\n\n`/tmp/.X11-unix`\n\nIf we let the Docker container use the same display socket as our own environment, then any applications you run inside the Docker container will show up on your screen too! [https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html](https://www.x.org/archive/X11R6.8.0/doc/RELNOTES5.html)\n\n### ALSA errors on startup or container creation\n\nYou may when initialising or booting into a container see errors from the `(qemu)` console of the following form: \n`ALSA lib blahblahblah: (function name) returned error: no such file or directory`. These are more or less expected. As long as you are able to boot into the container and everything is working, no reason to worry about these.\n\nSee also: [here](https://github.com/sickcodes/Docker-OSX/issues/174).\n"
        },
        {
          "name": "Youtube-Screenshot-Docker-OSX-Setup.png",
          "type": "blob",
          "size": 104.43359375,
          "content": null
        },
        {
          "name": "Youtube-USBFLUXD-Screenshot-Docker-OSX.png",
          "type": "blob",
          "size": 673.4423828125,
          "content": null
        },
        {
          "name": "custom",
          "type": "tree",
          "content": null
        },
        {
          "name": "discord-logo.svg",
          "type": "blob",
          "size": 1.642578125,
          "content": "<!-- animated SVG is from https://github.com/NNTin/discord-logo -->\n<svg width=\"90\" height=\"90\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" class=\"discord-logo-container\" viewBox=\"0 0 48 48\">\n    <defs>\n        <g>\n            <path id=\"discord-logo\" d=\"m40,12c0,0 -4.585,-3.588 -10,-4l-0.488,0.976c4.896,1.198 7.142,2.915 9.488,5.024c-4.045,-2.065 -8.039,-4 -15,-4s-10.955,1.935 -15,4c2.346,-2.109 5.018,-4.015 9.488,-5.024l-0.488,-0.976c-5.681,0.537 -10,4 -10,4s-5.121,7.425 -6,22c5.162,5.953 13,6 13,6l1.639,-2.185c-2.782,-0.967 -5.924,-2.694 -8.639,-5.815c3.238,2.45 8.125,5 16,5s12.762,-2.55 16,-5c-2.715,3.121 -5.857,4.848 -8.639,5.815l1.639,2.185c0,0 7.838,-0.047 13,-6c-0.879,-14.575 -6,-22 -6,-22zm-22.5,18c-1.933,0 -3.5,-1.791 -3.5,-4c0,-2.209 1.567,-4 3.5,-4s3.5,1.791 3.5,4c0,2.209 -1.567,4 -3.5,4zm13,0c-1.933,0 -3.5,-1.791 -3.5,-4c0,-2.209 1.567,-4 3.5,-4s3.5,1.791 3.5,4c0,2.209 -1.567,4 -3.5,4z\" />\n        </g>\n    </defs>\n    <g class=\"discord-logo\">\n        <use class=\"discord-original\" href=\"#discord-logo\">\n        </use>\n        <animateTransform attributeName=\"transform\" type=\"rotate\" values=\"0 24 24;-18 24 24;16.8 24 24;-11.4 24 24;8.7 24 24;-7.5 24 24;6 24 24;-4.8 24 24;3.79 24 24;-3.12 24 24;2.52 24 24;-2.01 24 24;1.56 24 24;-1.2 24 24;0.96 24 24;-0.75 24 24;0.6 24 24;-0.48 24 24;0.384 24 24;0 24 24;0 24 24;0 24 24;0 24 24;0 24 24;0 24 24\" begin=\"0s\" dur=\"2s\" fill=\"freeze\" repeatCount=\"indefinite\" />\n    </g>\n    <animate fill=\"freeze\" dur=\"0000ms\" begin=\"0s\" values=\"#17f018;#000000;#17f018;#000000;#17f018;#000000;#17f018;#000000;#17f018\" calMode=\"linear\" attributeName=\"fill\" repeatCount=\"indefinite\" />\n</svg>"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.4794921875,
          "content": "version: '3.4'\n\nservices:\n  osx:\n    container_name: docker-osx\n    build:\n      context: .\n      args:\n        - SIZE=200G\n        - VERSION=10.15.5\n    image: sickcodes/docker-osx\n    privileged: true\n    environment:\n      - DISPLAY=${DISPLAY:-:0.0}\n    network_mode: \"host\"\n    cap_add:\n      - ALL\n    volumes:\n      - /tmp/.X11-unix:/tmp/.X11-unix\n      - /dev:/dev\n      - /lib/modules:/lib/modules\n      - docker-osx_data:/home\n\nvolumes:\n  docker-osx_data:\n    name: docker-osx_data\n"
        },
        {
          "name": "fetch-macOS.py",
          "type": "blob",
          "size": 17.1806640625,
          "content": "#!/usr/bin/env python3\n# encoding: utf-8\n#\n# https://github.com/munki/macadmin-scripts/blob/master/installinstallmacos.py\n#\n# Copyright 2017 Greg Neagle.\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Thanks to Tim Sutton for ideas, suggestions, and sample code.\n#\n# Updated in May of 2019 by Dhiru Kholia.\n\n'''installinstallmacos.py\nA tool to download the parts for an Install macOS app from Apple's\nsoftwareupdate servers and install a functioning Install macOS app onto an\nempty disk image'''\n\n# https://github.com/foxlet/macOS-Simple-KVM/blob/master/tools/FetchMacOS/fetch-macos.py\n# is pretty similar.\n\n\n# Bad hack\nimport warnings\n\nwarnings.filterwarnings(\"ignore\", category=DeprecationWarning)\n\nimport os\nimport gzip\nimport argparse\nimport plistlib\nimport subprocess\n\nfrom xml.dom import minidom\nfrom xml.parsers.expat import ExpatError\n\n\nimport sys\n\nif sys.version_info[0] < 3:\n    import urlparse as urlstuff\nelse:\n    import urllib.parse as urlstuff\n# Quick fix for python 3.9 and above\nif sys.version_info[0] == 3 and sys.version_info[1] >= 9:\n    from types import MethodType\n\n    def readPlist(self,filepath):\n        with open(filepath, 'rb') as f:\n            p = plistlib._PlistParser(dict)\n            rootObject = p.parse(f)\n        return rootObject\n    # adding the method readPlist() to plistlib\n    plistlib.readPlist = MethodType(readPlist, plistlib)\n\n# https://github.com/foxlet/macOS-Simple-KVM/blob/master/tools/FetchMacOS/fetch-macos.py (unused)\n# https://github.com/munki/macadmin-scripts\ncatalogs = {\n    \"CustomerSeed\": \"https://swscan.apple.com/content/catalogs/others/index-10.16customerseed-10.16-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\",\n    \"DeveloperSeed\": \"https://swscan.apple.com/content/catalogs/others/index-10.16seed-10.16-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\",\n    \"PublicSeed\": \"https://swscan.apple.com/content/catalogs/others/index-10.16beta-10.16-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\",\n    \"PublicRelease\": \"https://swscan.apple.com/content/catalogs/others/index-10.16-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\",\n    \"20\": \"https://swscan.apple.com/content/catalogs/others/index-11-10.15-10.14-10.13-10.12-10.11-10.10-10.9-mountainlion-lion-snowleopard-leopard.merged-1.sucatalog\"\n}\n\n\ndef get_default_catalog():\n    '''Returns the default softwareupdate catalog for the current OS'''\n    return catalogs[\"20\"]\n    # return catalogs[\"PublicRelease\"]\n    # return catalogs[\"DeveloperSeed\"]\n\n\nclass ReplicationError(Exception):\n    '''A custom error when replication fails'''\n    pass\n\n\ndef cmd_exists(cmd):\n    return subprocess.Popen(\"type \" + cmd, shell=True,\n                           stdout=subprocess.PIPE, stderr=subprocess.PIPE)\n\n\ndef replicate_url(full_url,\n                  root_dir='/tmp',\n                  show_progress=False,\n                  ignore_cache=False,\n                  attempt_resume=False, installer=False, product_title=\"\"):\n    '''Downloads a URL and stores it in the same relative path on our\n    filesystem. Returns a path to the replicated file.'''\n\n    # hack\n    print(\"[+] Fetching %s\" % full_url)\n    if installer and \"BaseSystem.dmg\" not in full_url and \"Big Sur\" not in product_title:\n        return\n    if \"Big Sur\" in product_title and \"InstallAssistant.pkg\" not in full_url:\n        return\n    attempt_resume = True\n    # path = urllib.parse.urlsplit(full_url)[2]\n    path = urlstuff.urlsplit(full_url)[2]\n    relative_url = path.lstrip('/')\n    relative_url = os.path.normpath(relative_url)\n    # local_file_path = os.path.join(root_dir, relative_url)\n    local_file_path = relative_url\n    # print(\"Downloading %s...\" % full_url)\n\n    if cmd_exists('wget'):\n        if not installer:\n            download_cmd = ['wget', \"-c\", \"--quiet\", \"-x\", \"-nH\", full_url]\n            # this doesn't work as there are multiple metadata files with the same name!\n            # download_cmd = ['wget', \"-c\", \"--quiet\", full_url]\n        else:\n            download_cmd = ['wget', \"-c\", full_url]\n    else:\n        if not installer:\n            download_cmd = ['curl', \"--silent\", \"--show-error\", \"-o\", local_file_path, \"--create-dirs\", full_url]\n        else:\n            local_file_path = os.path.basename(local_file_path)\n            download_cmd = ['curl', \"-o\", local_file_path, full_url]\n\n    try:\n        subprocess.check_call(download_cmd)\n    except subprocess.CalledProcessError as err:\n        raise ReplicationError(err)\n    return local_file_path\n\n\ndef parse_server_metadata(filename):\n    '''Parses a softwareupdate server metadata file, looking for information\n    of interest.\n    Returns a dictionary containing title, version, and description.'''\n    title = ''\n    vers = ''\n    try:\n        md_plist = plistlib.readPlist(filename)\n    except (OSError, IOError, ExpatError) as err:\n        print('Error reading %s: %s' % (filename, err), file=sys.stderr)\n        return {}\n    vers = md_plist.get('CFBundleShortVersionString', '')\n    localization = md_plist.get('localization', {})\n    preferred_localization = (localization.get('English') or\n                              localization.get('en'))\n    if preferred_localization:\n        title = preferred_localization.get('title', '')\n\n    metadata = {}\n    metadata['title'] = title\n    metadata['version'] = vers\n\n    \"\"\"\n    {'title': 'macOS Mojave', 'version': '10.14.5'}\n    {'title': 'macOS Mojave', 'version': '10.14.6'}\n    \"\"\"\n    return metadata\n\n\ndef get_server_metadata(catalog, product_key, workdir, ignore_cache=False):\n    '''Replicate ServerMetaData'''\n    try:\n        url = catalog['Products'][product_key]['ServerMetadataURL']\n        try:\n            smd_path = replicate_url(\n                url, root_dir=workdir, ignore_cache=ignore_cache)\n            return smd_path\n        except ReplicationError as err:\n            print('Could not replicate %s: %s' % (url, err), file=sys.stderr)\n            return None\n    except KeyError:\n        # print('Malformed catalog.', file=sys.stderr)\n        return None\n\n\ndef parse_dist(filename):\n    '''Parses a softwareupdate dist file, returning a dict of info of\n    interest'''\n    dist_info = {}\n    try:\n        dom = minidom.parse(filename)\n    except ExpatError:\n        print('Invalid XML in %s' % filename, file=sys.stderr)\n        return dist_info\n    except IOError as err:\n        print('Error reading %s: %s' % (filename, err), file=sys.stderr)\n        return dist_info\n\n    titles = dom.getElementsByTagName('title')\n    if titles:\n        dist_info['title_from_dist'] = titles[0].firstChild.wholeText\n\n    auxinfos = dom.getElementsByTagName('auxinfo')\n    if not auxinfos:\n        return dist_info\n    auxinfo = auxinfos[0]\n    key = None\n    value = None\n    children = auxinfo.childNodes\n    # handle the possibility that keys from auxinfo may be nested\n    # within a 'dict' element\n    dict_nodes = [n for n in auxinfo.childNodes\n                  if n.nodeType == n.ELEMENT_NODE and\n                  n.tagName == 'dict']\n    if dict_nodes:\n        children = dict_nodes[0].childNodes\n    for node in children:\n        if node.nodeType == node.ELEMENT_NODE and node.tagName == 'key':\n            key = node.firstChild.wholeText\n        if node.nodeType == node.ELEMENT_NODE and node.tagName == 'string':\n            value = node.firstChild.wholeText\n        if key and value:\n            dist_info[key] = value\n            key = None\n            value = None\n    return dist_info\n\n\ndef download_and_parse_sucatalog(sucatalog, workdir, ignore_cache=False):\n    '''Downloads and returns a parsed softwareupdate catalog'''\n    try:\n        localcatalogpath = replicate_url(\n            sucatalog, root_dir=workdir, ignore_cache=ignore_cache)\n    except ReplicationError as err:\n        print('Could not replicate %s: %s' % (sucatalog, err), file=sys.stderr)\n        exit(-1)\n    if os.path.splitext(localcatalogpath)[1] == '.gz':\n        with gzip.open(localcatalogpath) as the_file:\n            content = the_file.read()\n            try:\n                catalog = plistlib.readPlistFromString(content)\n                return catalog\n            except ExpatError as err:\n                print('Error reading %s: %s' % (localcatalogpath, err), file=sys.stderr)\n                exit(-1)\n    else:\n        try:\n            catalog = plistlib.readPlist(localcatalogpath)\n            return catalog\n        except (OSError, IOError, ExpatError) as err:\n            print('Error reading %s: %s' % (localcatalogpath, err), file=sys.stderr)\n            exit(-1)\n\n\ndef find_mac_os_installers(catalog):\n    '''Return a list of product identifiers for what appear to be macOS\n    installers'''\n    mac_os_installer_products = []\n    if 'Products' in catalog:\n        for product_key in catalog['Products'].keys():\n            product = catalog['Products'][product_key]\n            try:\n                if product['ExtendedMetaInfo'][\n                        'InstallAssistantPackageIdentifiers']:\n                    mac_os_installer_products.append(product_key)\n            except KeyError:\n                continue\n\n    return mac_os_installer_products\n\n\ndef os_installer_product_info(catalog, workdir, ignore_cache=False):\n    '''Returns a dict of info about products that look like macOS installers'''\n    product_info = {}\n    installer_products = find_mac_os_installers(catalog)\n    for product_key in installer_products:\n        product_info[product_key] = {}\n        filename = get_server_metadata(catalog, product_key, workdir)\n        if filename:\n            product_info[product_key] = parse_server_metadata(filename)\n        else:\n            # print('No server metadata for %s' % product_key)\n            product_info[product_key]['title'] = None\n            product_info[product_key]['version'] = None\n\n        product = catalog['Products'][product_key]\n        product_info[product_key]['PostDate'] = product['PostDate']\n        distributions = product['Distributions']\n        dist_url = distributions.get('English') or distributions.get('en')\n        try:\n            dist_path = replicate_url(\n                dist_url, root_dir=workdir, ignore_cache=ignore_cache)\n        except ReplicationError as err:\n            print('Could not replicate %s: %s' % (dist_url, err),\n                  file=sys.stderr)\n        else:\n            dist_info = parse_dist(dist_path)\n            product_info[product_key]['DistributionPath'] = dist_path\n            product_info[product_key].update(dist_info)\n            if not product_info[product_key]['title']:\n                product_info[product_key]['title'] = dist_info.get('title_from_dist')\n            if not product_info[product_key]['version']:\n                product_info[product_key]['version'] = dist_info.get('VERSION')\n\n    return product_info\n\n\ndef replicate_product(catalog, product_id, workdir, ignore_cache=False, product_title=\"\"):\n    '''Downloads all the packages for a product'''\n    product = catalog['Products'][product_id]\n    for package in product.get('Packages', []):\n        # TO-DO: Check 'Size' attribute and make sure\n        # we have enough space on the target\n        # filesystem before attempting to download\n        if 'URL' in package:\n            try:\n                replicate_url(\n                    package['URL'], root_dir=workdir,\n                    show_progress=True, ignore_cache=ignore_cache,\n                    attempt_resume=(not ignore_cache), installer=True, product_title=product_title)\n            except ReplicationError as err:\n                print('Could not replicate %s: %s' % (package['URL'], err), file=sys.stderr)\n                exit(-1)\n        if 'MetadataURL' in package:\n            try:\n                replicate_url(package['MetadataURL'], root_dir=workdir,\n                              ignore_cache=ignore_cache, installer=True)\n            except ReplicationError as err:\n                print('Could not replicate %s: %s' % (package['MetadataURL'], err), file=sys.stderr)\n                exit(-1)\n\n\ndef find_installer_app(mountpoint):\n    '''Returns the path to the Install macOS app on the mountpoint'''\n    applications_dir = os.path.join(mountpoint, 'Applications')\n    for item in os.listdir(applications_dir):\n        if item.endswith('.app'):\n            return os.path.join(applications_dir, item)\n    return None\n\n\ndef determine_version(version, product_info):\n    if version:\n        if version == 'latest':\n            from distutils.version import StrictVersion\n            latest_version = StrictVersion('0.0.0')\n            for index, product_id in enumerate(product_info):\n                d = product_info[product_id]['version']\n                if d > latest_version:\n                    latest_version = d\n\n            if latest_version == StrictVersion(\"0.0.0\"):\n                print(\"Could not find latest version {}\")\n                exit(1)\n\n            version = str(latest_version)\n\n        for index, product_id in enumerate(product_info):\n            v = product_info[product_id]['version']\n            if v == version:\n                return product_id, product_info[product_id]['title']\n\n        print(\"Could not find version {}. Versions available are:\".format(version))\n        for _, pid in enumerate(product_info):\n            print(\"- {}\".format(product_info[pid]['version']))\n\n        exit(1)\n\n    # display a menu of choices (some seed catalogs have multiple installers)\n    print('%2s %12s %10s %11s  %s' % ('#', 'ProductID', 'Version',\n                                           'Post Date', 'Title'))\n    for index, product_id in enumerate(product_info):\n        print('%2s %12s %10s %11s  %s' % (\n            index + 1,\n            product_id,\n            product_info[product_id]['version'],\n            product_info[product_id]['PostDate'].strftime('%Y-%m-%d'),\n            product_info[product_id]['title']\n        ))\n\n    answer = input(\n        '\\nChoose a product to download (1-%s): ' % len(product_info))\n    try:\n        index = int(answer) - 1\n        if index < 0:\n            raise ValueError\n        product_id = list(product_info.keys())[index]\n        return product_id, product_info[product_id]['title']\n    except (ValueError, IndexError):\n        pass\n\n    print('Invalid input provided.')\n    exit(0)\n\n\ndef main():\n    '''Do the main thing here'''\n    \"\"\"\n    if os.getuid() != 0:\n        sys.exit('This command requires root (to install packages), so please '\n                 'run again with sudo or as root.')\n    \"\"\"\n    parser = argparse.ArgumentParser()\n    parser.add_argument('--workdir', metavar='path_to_working_dir',\n                        default='.',\n                        help='Path to working directory on a volume with over '\n                             '10G of available space. Defaults to current working '\n                             'directory.')\n    parser.add_argument('--version', metavar='version',\n                        default=None,\n                        help='The version to download in the format of '\n                             '\"$major.$minor.$patch\", e.g. \"10.15.4\". Can '\n                             'be \"latest\" to download the latest version.')\n    parser.add_argument('--compress', action='store_true',\n                        help='Output a read-only compressed disk image with '\n                             'the Install macOS app at the root. This is now the '\n                             'default. Use --raw to get a read-write sparse image '\n                             'with the app in the Applications directory.')\n    parser.add_argument('--raw', action='store_true',\n                        help='Output a read-write sparse image '\n                             'with the app in the Applications directory. Requires '\n                             'less available disk space and is faster.')\n    parser.add_argument('--ignore-cache', action='store_true',\n                        help='Ignore any previously cached files.')\n    args = parser.parse_args()\n\n    su_catalog_url = get_default_catalog()\n    if not su_catalog_url:\n        print('Could not find a default catalog url for this OS version.', file=sys.stderr)\n        exit(-1)\n\n    # download sucatalog and look for products that are for macOS installers\n    catalog = download_and_parse_sucatalog(\n        su_catalog_url, args.workdir, ignore_cache=args.ignore_cache)\n    product_info = os_installer_product_info(\n        catalog, args.workdir, ignore_cache=args.ignore_cache)\n\n    if not product_info:\n        print('No macOS installer products found in the sucatalog.', file=sys.stderr)\n        exit(-1)\n\n    product_id, product_title = determine_version(args.version, product_info)\n    print(product_id, product_title)\n\n    # download all the packages for the selected product\n    replicate_product(catalog, product_id, args.workdir, ignore_cache=args.ignore_cache, product_title=product_title)\n\n\nif __name__ == '__main__':\n    main()\n"
        },
        {
          "name": "glibc-linux4-2.33-4-x86_64.pkg.tar.zst",
          "type": "blob",
          "size": 10089.0595703125,
          "content": ""
        },
        {
          "name": "helm",
          "type": "tree",
          "content": null
        },
        {
          "name": "osx-serial-generator",
          "type": "commit",
          "content": null
        },
        {
          "name": "rankmirrors",
          "type": "blob",
          "size": 6.544921875,
          "content": "#!/usr/bin/bash\n#\n#   rankmirrors - read a list of mirrors from a file and rank them by speed\n#   Generated from rankmirrors.sh.in; do not edit by hand.\n#\n#   Copyright (c) 2009 Matthew Bruenig <matthewbruenig@gmail.com>\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation; either version 3 of the License, or\n#   (at your option) any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# traps interrupt key to spit out pre-interrupt info\ntrap finaloutput INT\n\ndeclare -r myname='rankmirrors'\ndeclare -r myver='1.4.0'\n\nusage() {\n\techo \"${myname} v${myver}\"\n\techo\n\techo \"Ranks pacman mirrors by their connection and opening speed. Pacman mirror\"\n\techo \"files are located in /etc/pacman.d/. It can also rank one mirror if the URL is\"\n\techo \"provided.\"\n\techo\n\techo \"Usage: ${myname} [options] MIRRORFILE | URL\"\n\techo\n\techo \"Options:\"\n\techo \"  --version           show program's version number and exit\"\n\techo \"  -h, --help          show this help message and exit\"\n\techo \"  -n NUM              number of servers to output, 0 for all\"\n\techo \"  -m, --max-time NUM  specify a ranking operation timeout, can be decimal number\"\n\techo \"  -t, --times         only output mirrors and their response times\"\n\techo \"  -u, --url           test a specific URL\"\n\techo \"  -v, --verbose       be verbose in output\"\n\techo \"  -r, --repo          specify a repository name instead of guessing\"\n\texit 0\n}\n\nversion() {\n\techo \"${myname} (pacman) ${myver}\"\n\techo \"Copyright (c) 2009 Matthew Bruenig <matthewbruenig@gmail.com>.\"\n\techo\n\techo \"This is free software; see the source for copying conditions.\"\n\techo \"There is NO WARRANTY, to the extent permitted by law.\"\n\texit 0\n}\n\nerr() {\n\techo \"$1\" >&2\n\texit 1\n}\n\n# gettime fetchurl (e.g gettime http://foo.com/core/os/i686/core.db.tar.gz)\n# returns the fetching time, or timeout, or unreachable\ngettime() {\n\tIFS=' ' output=( $(curl -s -m $MAX_TIME -w \"%{time_total} %{http_code}\" \"$1\" -o/dev/null) )\n\t(( $? == 28 )) && echo timeout && return\n\t(( ${output[1]} >= 400 || ! ${output[1]} )) && echo unreachable && return\n\techo \"${output[0]}\"\n}\n\n# getfetchurl serverurl (e.g. getturl http://foo.com/core/os/i686)\n# if $repo is in the line, then assumes core\n# if $arch is in the line, then assumes $(uname -m)\n# returns a fetchurl (e.g. http://foo.com/core/os/i686/core.db.tar.gz)\nARCH=\"$(uname -m)\"\ngetfetchurl() {\n\tlocal strippedurl=\"${1%/}\"\n\n\tlocal replacedurl=\"${strippedurl//'$arch'/$ARCH}\"\n\tif [[ ! $TARGETREPO ]]; then\n\t\treplacedurl=\"${replacedurl//'$repo'/core}\"\n\t\tlocal tmp=\"${replacedurl%/*}\"\n\t\ttmp=\"${tmp%/*}\"\n\n\t\tlocal reponame=\"${tmp##*/}\"\n\telse\n\t\treplacedurl=\"${replacedurl//'$repo'/$TARGETREPO}\"\n\t\tlocal reponame=\"$TARGETREPO\"\n\tfi\n\n\tif [[ -z $reponame || $reponame = $replacedurl ]]; then\n\t\techo \"fail\"\n\telse\n\t\tlocal fetchurl=\"${replacedurl}/$reponame.db\"\n\t\techo \"$fetchurl\"\n\tfi\n}\n\n# This exists to remove the need for a separate interrupt function\nfinaloutput() {\n\tIFS=$'\\n' read -r -d '' -a sortedarray < \\\n\t\t<(printf '%s\\n' \"${timesarray[@]}\" | LC_COLLATE=C sort)\n\n\t# Final output for mirrorfile\n\tnumiterator=\"0\"\n\tif [[ $TIMESONLY ]]; then\n\t\techo\n\t\techo \" Servers sorted by time (seconds):\"\n\t\tfor line in \"${sortedarray[@]}\"; do\n\t\t\techo \"${line#* } : ${line% *}\"\n\t\t\t((numiterator++))\n\t\t\t(( NUM && numiterator >= NUM )) && break\n\t\tdone\n\telse\n\t\tfor line in \"${sortedarray[@]}\"; do\n\t\t\techo \"Server = ${line#* }\"\n\t\t\t((numiterator++))\n\t\t\t(( NUM && numiterator >= NUM )) && break\n\t\tdone\n\tfi\n\texit 0\n}\n\n\n# Argument parsing\n[[ $1 ]] || usage\nwhile [[ $1 ]]; do\n\tif [[ ${1:0:2} = -- ]]; then\n\t\tcase \"${1:2}\" in\n\t\t\thelp) usage ;;\n\t\t\tversion) version ;;\n\t\t\tmax-time)\n\t\t\t\t[[ $2 ]] || err \"Must specify number.\";\n\t\t\t\tMAX_TIME=\"$2\"\n\t\t\t\tshift 2;;\n\t\t\ttimes) TIMESONLY=1 ; shift ;;\n\t\t\tverbose) VERBOSE=1 ; shift ;;\n\t\t\turl)\n\t\t\t\tCHECKURL=1;\n\t\t\t\t[[ $2 ]] || err \"Must specify URL.\";\n\t\t\t\tURL=\"$2\";\n\t\t\t\tshift 2;;\n\t\t\trepo)\n\t\t\t\t[[ $2 ]] || err \"Must specify repository name.\";\n\t\t\t\tTARGETREPO=\"$2\";\n\t\t\t\tshift 2;;\n\t\t\t*) err \"'$1' is an invalid argument.\"\n\t\tesac\n\telif [[ ${1:0:1} = - ]]; then\n\n\t\tif [[ ! ${1:1:1} ]]; then\n\t\t\t[[ -t 0 ]] && err \"Stdin is empty.\"\n\t\t\tIFS=$'\\n' linearray=( $(</dev/stdin) )\n\t\t\tSTDIN=1\n\t\t\tshift\n\t\telse\n\t\t\tsnum=1\n\t\t\tfor ((i=1 ; i<${#1}; i++)); do\n\t\t\t\tcase ${1:$i:1} in\n\t\t\t\t\th) usage ;;\n\t\t\t\t\tm)\n\t\t\t\t\t\t[[ $2 ]] || err \"Must specify number.\";\n\t\t\t\t\t\tMAX_TIME=\"$2\"\n\t\t\t\t\t\tsnum=2;;\n\t\t\t\t\tt) TIMESONLY=1 ;;\n\t\t\t\t\tv) VERBOSE=1 ;;\n\t\t\t\t\tu)\n\t\t\t\t\t\tCHECKURL=1;\n\t\t\t\t\t\t[[ $2 ]] || err \"Must specify URL.\";\n\t\t\t\t\t\tURL=\"$2\";\n\t\t\t\t\t\tsnum=2;;\n\t\t\t\t\tr)\n\t\t\t\t\t\t[[ $2 ]] || err \"Must specify repository name.\";\n\t\t\t\t\t\tTARGETREPO=\"$2\";\n\t\t\t\t\t\tsnum=2;;\n\t\t\t\t\tn)\n\t\t\t\t\t\t[[ $2 ]] || err \"Must specify number.\";\n\t\t\t\t\t\tNUM=\"$2\";\n\t\t\t\t\t\tsnum=2;;\n\t\t\t\t\t*) err \"'$1' is an invalid argument.\" ;;\n\t\t\t\tesac\n\t\t\tdone\n\t\t\tshift $snum\n\t\tfi\n\telif [[ -f $1 ]]; then\n\t\tFILE=\"1\"\n\t\tIFS=$'\\n' linearray=( $(<$1) )\n\t\t[[ $linearray ]] || err \"File is empty.\"\n\t\tshift\n\telse\n\t\terr \"'$1' does not exist.\"\n\tfi\ndone\n\n# Some sanity checks\n[[ $NUM ]] || NUM=0\n[[ $MAX_TIME ]] || MAX_TIME=10\n[[ $FILE && $CHECKURL ]] && err \"Cannot specify a URL and mirrorfile.\"\n[[ $FILE || $CHECKURL || $STDIN ]] || err \"Must specify URL, mirrorfile, or stdin.\"\n\n# Single URL handling\nif [[ $CHECKURL ]]; then\n\turl=\"$(getfetchurl \"$URL\")\"\n\t[[ $url = fail ]] && err \"URL '$URL' is malformed.\"\n\t[[ $VERBOSE ]] && echo \"Testing $url...\"\n\ttime=$(gettime \"$url\")\n\techo \"$URL : $time\"\n\texit 0\nfi\n\n# Get URL results from mirrorfile, fill up the array, and so on\nif [[ $TIMESONLY ]]; then\n\techo \"Querying servers. This may take some time...\"\nelif [[ $FILE ]]; then\n\techo \"# Server list generated by rankmirrors on $(date +%Y-%m-%d)\"\nfi\n\ntimesarray=()\nfor line in \"${linearray[@]}\"; do\n\tif [[ $line =~ ^[[:space:]]*# ]]; then\n\t\t[[ $TIMESONLY ]] || echo $line\n\telif [[ $line =~ ^[[:space:]]*Server ]]; then\n\n\t\t# Getting values and times and such\n\t\tserver=\"${line#*= }\"\n\t\tserver=\"${server%%#*}\"\n\t\turl=\"$(getfetchurl \"$server\")\"\n\t\t[[ $url = fail ]] && err \"URL '$URL' is malformed.\"\n\t\ttime=$(gettime \"$url\")\n\t\ttimesarray+=(\"$time $server\")\n\n\t\t# Output\n\t\tif [[ $VERBOSE && $TIMESONLY ]]; then\n\t\t\techo \"$server ... $time\"\n\t\telif [[ $VERBOSE ]]; then\n\t\t\techo \"# $server ... $time\"\n\t\telif [[ $TIMESONLY ]]; then\n\t\t\techo -n \"   *\"\n\t\tfi\n\tfi\ndone\nfinaloutput\n\n# vim: set noet:\n"
        },
        {
          "name": "running-mac-inside-docker-qemu.png",
          "type": "blob",
          "size": 361.8486328125,
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "vnc-version",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}