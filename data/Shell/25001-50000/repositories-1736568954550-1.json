{
  "metadata": {
    "timestamp": 1736568954550,
    "page": 1,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pi-hole/pi-hole",
      "stars": 49840,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codespellignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "doubleclick\nwan\nnwe\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.337890625,
          "content": "# EditorConfig is awesome: https://editorconfig.org/\n\n# top-most EditorConfig file\nroot = true\n\n# Unix-style newlines with a newline ending every file\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_style = space\nindent_size = tab\ntab_width = 4\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[*.yml]\ntab_width = 2\n\n[*.md]\ntab_width = 2\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.671875,
          "content": "# FROM https://github.com/libgit2/libgit2sharp\n# Text files that should be normalized to LF in odb.\n*.cs     text diff=csharp\n*.config text\n\n*.sln     text\n*.csproj  text\n\n*.md       text\n*.sh       text\n*.ps1      text\n*.cmd      text\n*.bat      text\n*.markdown text\n*.msbuild  text\n\nLib/*  binary\nGitHub.Tests.Integration/Resources/*  binary\n\n\n# Binary files that should not be normalized or diffed\n*.png    binary\n*.jpg    binary\n*.gif    binary\n\n*.pfx    binary\n*.snk    binary\n*.dll    binary\n*.exe    binary\n*.lib    binary\n*.exp    binary\n*.pdb    binary\n*.sdf    binary\n*.7z     binary\n\n\n# Catch all for anything we forgot. Add rules if you get CRLF -> LF warnings.\n* text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0966796875,
          "content": ".DS_Store\n*.pyc\n*.swp\n__pycache__\n.cache\n.pytest_cache\n.tox\n.eggs\n*.egg-info\n.idea/\n*.iml\n.vscode/\n"
        },
        {
          "name": ".stickler.yml",
          "type": "blob",
          "size": 0.138671875,
          "content": "---\nlinters:\n  shellcheck:\n    shell: bash\n  phpcs:\n  flake8:\n    max-line-length: 120\n  yamllint:\n    config: ./.yamllint.conf\n  remarklint:\n"
        },
        {
          "name": ".yamllint.conf",
          "type": "blob",
          "size": 0.0546875,
          "content": "rules:\n  line-length: disable\n  document-start: disable\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.2470703125,
          "content": "# Contributors Guide\n\nPlease read and understand the contribution guide before creating an issue or pull request.\n\nThe guide can be found here: [https://docs.pi-hole.net/guides/github/contributing/](https://docs.pi-hole.net/guides/github/contributing/)\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 13.87109375,
          "content": "Copyright (C) 2017 Pi-hole, LLC (https://pi-hole.net)\nPi-hole Core\n\nThis software is licensed under the European Union Public License (EUPL)\nThe license is available in the 22 official languages of the EU. The English version is included here.\nPlease see https://joinup.ec.europa.eu/community/eupl/og_page/eupl for official translations of the other languages.\n\nThis license applies to the whole project EXCEPT:\n\n - any commits made to the master branch prior to the release of version 3.0\n\nThe licenses that existed prior to this change have remained intact.\n\n-------------------------------------------------------------\nEUROPEAN UNION PUBLIC LICENCE v. 1.2\n\nEUPL Â© the European Union 2007, 2016\n\nThis European Union Public Licence (the EUPL) applies to the Work (as defined below) which is provided under the terms of this Licence. Any use of the Work, other than as authorised under this Licence is prohibited (to the extent such use is covered by a right of the copyright holder of the Work).\nThe Work is provided under the terms of this Licence when the Licensor (as defined below) has placed the following notice immediately following the copyright notice for the Work:\nLicensed under the EUPL\nor has expressed by any other means his willingness to license under the EUPL.\n\n1. Definitions\n\nIn this Licence, the following terms have the following meaning:\n\n- The Licence: this Licence.\n- The Original Work: the work or software distributed or communicated by the Licensor under this Licence, available as Source Code and also as Executable Code as the case may be.\n- Derivative Works: the works or software that could be created by the Licensee, based upon the Original Work or modifications thereof. This Licence does not define the extent of modification or dependence on the Original Work required in order to classify a work as a Derivative Work; this extent is determined by copyright law applicable in the country mentioned in Article 15.\n- The Work: the Original Work or its Derivative Works.\n- The Source Code: the human-readable form of the Work which is the most convenient for people to study and modify.\n- The Executable Code: any code which has generally been compiled and which is meant to be interpreted by a computer as a program.\n- The Licensor: the natural or legal person that distributes or communicates the Work under the Licence.\n- Contributor(s): any natural or legal person who modifies the Work under the Licence, or otherwise contributes to the creation of a Derivative Work.\n- The Licensee or You: any natural or legal person who makes any usage of the Work under the terms of the Licence.\n- Distribution or Communication: any act of selling, giving, lending, renting, distributing, communicating, transmitting, or otherwise making available, online or offline, copies of the Work or providing access to its essential functionalities at the disposal of any other natural or legal person.\n\n2. Scope of the rights granted by the Licence\n\nThe Licensor hereby grants You a worldwide, royalty-free, non-exclusive, sublicensable licence to do the following, for the duration of copyright vested in the Original Work:\n- use the Work in any circumstance and for all usage,\n- reproduce the Work,\n- modify the Work, and make Derivative Works based upon the Work,\n- communicate to the public, including the right to make available or display the Work or copies thereof to the public and perform publicly, as the case may be, the Work,\n- distribute the Work or copies thereof,\n- lend and rent the Work or copies thereof,\n- sublicense rights in the Work or copies thereof.\nThose rights can be exercised on any media, supports and formats, whether now known or later invented, as far as the applicable law permits so.\nIn the countries where moral rights apply, the Licensor waives his right to exercise his moral right to the extent allowed by law in order to make effective the licence of the economic rights here above listed.\nThe Licensor grants to the Licensee royalty-free, non-exclusive usage rights to any patents held by the Licensor, to the extent necessary to make use of the rights granted on the Work under this Licence.\n\n3. Communication of the Source Code\n\nThe Licensor may provide the Work either in its Source Code form, or as Executable Code. If the Work is provided as Executable Code, the Licensor provides in addition a machine-readable copy of the Source Code of the Work along with each copy of the Work that the Licensor distributes or indicates, in a notice following the copyright notice attached to the Work, a repository where the Source Code is easily and freely accessible for as long as the Licensor continues to distribute or communicate the Work.\n\n4. Limitations on copyright\n\nNothing in this Licence is intended to deprive the Licensee of the benefits from any exception or limitation to the exclusive rights of the rights owners in the Work, of the exhaustion of those rights or of other applicable limitations thereto.\n\n5. Obligations of the Licensee\n\nThe grant of the rights mentioned above is subject to some restrictions and obligations imposed on the Licensee. Those obligations are the following:\n\nAttribution right: The Licensee shall keep intact all copyright, patent or trademarks notices and all notices that refer to the Licence and to the disclaimer of warranties. The Licensee must include a copy of such notices and a copy of the Licence with every copy of the Work he/she distributes or communicates. The Licensee must cause any Derivative Work to carry prominent notices stating that the Work has been modified and the date of modification.\n\nCopyleft clause: If the Licensee distributes or communicates copies of the Original Works or Derivative Works, this Distribution or Communication will be done under the terms of this Licence or of a later version of this Licence unless the Original Work is expressly distributed only under this version of the Licence - for example by communicating EUPL v. 1.2 only. The Licensee (becoming Licensor) cannot offer or impose any additional terms or conditions on the Work or Derivative Work that alter or restrict the terms of the Licence.\n\nCompatibility clause: If the Licensee Distributes or Communicates Derivative Works or copies thereof based upon both the Work and another work licensed under a Compatible Licence, this Distribution or Communication can be done under the terms of this Compatible Licence. For the sake of this clause, Compatible Licence refers to the licences listed in the appendix attached to this Licence. Should the Licensee's obligations under the Compatible Licence conflict with his/her obligations under this Licence, the obligations of the Compatible Licence shall prevail.\n\nProvision of Source Code: When distributing or communicating copies of the Work, the Licensee will provide a machine-readable copy of the Source Code or indicate a repository where this Source will be easily and freely available for as long as the Licensee continues to distribute or communicate the Work.\n\nLegal Protection: This Licence does not grant permission to use the trade names, trademarks, service marks, or names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the copyright notice.\n\n6. Chain of Authorship\n\nThe original Licensor warrants that the copyright in the Original Work granted hereunder is owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence.\n\nEach Contributor warrants that the copyright in the modifications he/she brings to the Work are owned by him/her or licensed to him/her and that he/she has the power and authority to grant the Licence.\n\nEach time You accept the Licence, the original Licensor and subsequent Contributors grant You a licence to their contributions to the Work, under the terms of this Licence.\n\n7. Disclaimer of Warranty\n\nThe Work is a work in progress, which is continuously improved by numerous Contributors. It is not a finished work and may therefore contain defects or bugs inherent to this type of development.\nFor the above reason, the Work is provided under the Licence on an as is basis and without warranties of any kind concerning the Work, including without limitation merchantability, fitness for a particular purpose, absence of defects or errors, accuracy, non-infringement of intellectual property rights other than copyright as stated in Article 6 of this Licence.\nThis disclaimer of warranty is an essential part of the Licence and a condition for the grant of any rights to the Work.\n\n8. Disclaimer of Liability\n\nExcept in the cases of wilful misconduct or damages directly caused to natural persons, the Licensor will in no event be liable for any direct or indirect, material or moral, damages of any kind, arising out of the Licence or of the use of the Work, including without limitation, damages for loss of goodwill, work stoppage, computer failure or malfunction, loss of data or any commercial damage, even if the Licensor has been advised of the possibility of such damage. However, the Licensor will be liable under statutory product liability laws as far such laws apply to the Work.\n\n9. Additional agreements\n\nWhile distributing the Work, You may choose to conclude an additional agreement, defining obligations or services consistent with this Licence. However, if accepting obligations, You may act only on your own behalf and on your sole responsibility, not on behalf of the original Licensor or any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against such Contributor by the fact You have accepted any warranty or additional liability.\n\n10. Acceptance of the Licence\n\nThe provisions of this Licence can be accepted by clicking on an icon I agree placed under the bottom of a window displaying the text of this Licence or by affirming consent in any other similar way, in accordance with the rules of applicable law. Clicking on that icon indicates your clear and irrevocable acceptance of this Licence and all of its terms and conditions.\nSimilarly, you irrevocably accept this Licence and all of its terms and conditions by exercising any rights granted to You by Article 2 of this Licence, such as the use of the Work, the creation by You of a Derivative Work or the Distribution or Communication by You of the Work or copies thereof.\n\n11. Information to the public\n\nIn case of any Distribution or Communication of the Work by means of electronic communication by You (for example, by offering to download the Work from a remote location) the distribution channel or media (for example, a website) must at least provide to the public the information requested by the applicable law regarding the Licensor, the Licence and the way it may be accessible, concluded, stored and reproduced by the Licensee.\n\n12. Termination of the Licence\n\nThe Licence and the rights granted hereunder will terminate automatically upon any breach by the Licensee of the terms of the Licence.\nSuch a termination will not terminate the licences of any person who has received the Work from the Licensee under the Licence, provided such persons remain in full compliance with the Licence.\n\n13. Miscellaneous\n\nWithout prejudice of Article 9 above, the Licence represents the complete agreement between the Parties as to the Work.\nIf any provision of the Licence is invalid or unenforceable under applicable law, this will not affect the validity or enforceability of the Licence as a whole. Such provision will be construed or reformed so as necessary to make it valid and enforceable.\nThe European Commission may publish other linguistic versions or new versions of this Licence or updated versions of the Appendix, so far this is required and reasonable, without reducing the scope of the rights granted by the Licence. New versions of the Licence will be published with a unique version number.\nAll linguistic versions of this Licence, approved by the European Commission, have identical value. Parties can take advantage of the linguistic version of their choice.\n\n14. Jurisdiction\n\nWithout prejudice to specific agreement between parties,\n- any litigation resulting from the interpretation of this License, arising between the European Union institutions, bodies, offices or agencies, as a Licensor, and any Licensee, will be subject to the jurisdiction of the Court of Justice of the European Union, as laid down in article 272 of the Treaty on the Functioning of the European Union,\n- any litigation arising between other parties and resulting from the interpretation of this License, will be subject to the exclusive jurisdiction of the competent court where the Licensor resides or conducts its primary business.\n\n15. Applicable Law\n\nWithout prejudice to specific agreement between parties,\n- this Licence shall be governed by the law of the European Union Member State where the Licensor has his seat, resides or has his registered office,\n- this licence shall be governed by Belgian law if the Licensor has no seat, residence or registered office inside a European Union Member State.\n\n===\n\nAppendix\n\nCompatible Licences according to Article 5 EUPL are:\n- GNU General Public License (GPL) v. 2, v. 3\n- GNU Affero General Public License (AGPL) v. 3\n- Open Software License (OSL) v. 2.1, v. 3.0\n- Eclipse Public License (EPL) v. 1.0\n- CeCILL v. 2.0, v. 2.1\n- Mozilla Public Licence (MPL) v. 2\n- GNU Lesser General Public Licence (LGPL) v. 2.1, v. 3\n- Creative Commons Attribution-ShareAlike v. 3.0 Unported (CC BY-SA 3.0) for works other than software\n- European Union Public Licence (EUPL) v. 1.1, v. 1.2\n- QuÃ©bec Free and Open-Source Licence - Reciprocity (LiLiQ-R) or Strong Reciprocity (LiLiQ-R+)\n- The European Commission may update this Appendix to later versions of the above licences without producing a new version of the EUPL, as long as they provide the rights granted in Article 2 of this Licence and protect the covered Source Code from exclusive appropriation.\n-  All other changes or additions to this Appendix require the production of a new EUPL version.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.4072265625,
          "content": "<!-- markdownlint-configure-file { \"MD004\": { \"style\": \"consistent\" } } -->\n<!-- markdownlint-disable MD033 -->\n#\n\n<p align=\"center\">\n  <picture>\n    <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://pi-hole.github.io/graphics/Vortex/Vortex_Vertical_wordmark_darkmode.png\">\n    <source media=\"(prefers-color-scheme: light)\" srcset=\"https://pi-hole.github.io/graphics/Vortex/Vortex_Vertical_wordmark_lightmode.png\">\n    <img src=\"https://pi-hole.github.io/graphics/Vortex/Vortex_Vertical_wordmark_lightmode.png\" width=\"168\" height=\"270\" alt=\"Pi-hole website\">\n  </picture>\n    <br>\n    <strong>Network-wide ad blocking via your own Linux hardware</strong>\n</p>\n\n<!-- markdownlint-enable MD033 -->\n\nThe Pi-holeÂ® is a [DNS sinkhole](https://en.wikipedia.org/wiki/DNS_Sinkhole) that protects your devices from unwanted content without installing any client-side software.\n\n- **Easy-to-install**: our dialogs walk you through the simple installation process in less than ten minutes\n- **Resolute**: content is blocked in _non-browser locations_, such as ad-laden mobile apps and smart TVs\n- **Responsive**: seamlessly speeds up the feel of everyday browsing by caching DNS queries\n- **Lightweight**: runs smoothly with [minimal hardware and software requirements](https://docs.pi-hole.net/main/prerequisites/)\n- **Robust**: a command-line interface that is quality assured for interoperability\n- **Insightful**: a beautiful responsive Web Interface dashboard to view and control your Pi-hole\n- **Versatile**: can optionally function as a [DHCP server](https://discourse.pi-hole.net/t/how-do-i-use-pi-holes-built-in-dhcp-server-and-why-would-i-want-to/3026), ensuring _all_ your devices are protected automatically\n- **Scalable**: [capable of handling hundreds of millions of queries](https://pi-hole.net/2017/05/24/how-much-traffic-can-pi-hole-handle/) when installed on server-grade hardware\n- **Modern**: blocks ads over both IPv4 and IPv6\n- **Free**: open source software that helps ensure _you_ are the sole person in control of your privacy\n\n-----\n\n## One-Step Automated Install\n\nThose who want to get started quickly and conveniently may install Pi-hole using the following command:\n\n```bash\ncurl -sSL https://install.pi-hole.net | bash\n```\n\n## Alternative Install Methods\n\nPiping to `bash` is [controversial](https://pi-hole.net/2016/07/25/curling-and-piping-to-bash), as it prevents you from [reading code that is about to run](https://github.com/pi-hole/pi-hole/blob/master/automated%20install/basic-install.sh) on your system. Therefore, we provide these alternative installation methods which allow code review before installation:\n\n### Method 1: Clone our repository and run\n\n```bash\ngit clone --depth 1 https://github.com/pi-hole/pi-hole.git Pi-hole\ncd \"Pi-hole/automated install/\"\nsudo bash basic-install.sh\n```\n\n### Method 2: Manually download the installer and run\n\n```bash\nwget -O basic-install.sh https://install.pi-hole.net\nsudo bash basic-install.sh\n```\n\n### Method 3: Using Docker to deploy Pi-hole\n\nPlease refer to the [Pi-hole docker repo](https://github.com/pi-hole/docker-pi-hole) to use the Official Docker Images.\n\n## [Post-install: Make your network take advantage of Pi-hole](https://docs.pi-hole.net/main/post-install/)\n\nOnce the installer has been run, you will need to [configure your router to have **DHCP clients use Pi-hole as their DNS server**](https://discourse.pi-hole.net/t/how-do-i-configure-my-devices-to-use-pi-hole-as-their-dns-server/245). This router configuration will ensure that all devices connecting to your network will have content blocked without any further intervention.\n\nIf your router does not support setting the DNS server, you can [use Pi-hole's built-in DHCP server](https://discourse.pi-hole.net/t/how-do-i-use-pi-holes-built-in-dhcp-server-and-why-would-i-want-to/3026); be sure to disable DHCP on your router first (if it has that feature available).\n\nAs a last resort, you can manually set each device to use Pi-hole as their DNS server.\n\n-----\n\n## Pi-hole is free but powered by your support\n\nThere are many reoccurring costs involved with maintaining free, open-source, and privacy-respecting software; expenses which [our volunteer developers](https://github.com/orgs/pi-hole/people) pitch in to cover out-of-pocket. This is just one example of how strongly we feel about our software and the importance of keeping it maintained.\n\nMake no mistake: **your support is absolutely vital to help keep us innovating!**\n\n### [Donations](https://pi-hole.net/donate)\n\nDonating using our Sponsor Button is **extremely helpful** in offsetting a portion of our monthly expenses:\n\n### Alternative support\n\nIf you'd rather not donate (_which is okay!_), there are other ways you can help support us:\n\n- [GitHub Sponsors](https://github.com/sponsors/pi-hole/)\n- [Patreon](https://patreon.com/pihole)\n- [Hetzner Cloud](https://hetzner.cloud/?ref=7aceisRX3AzA) _affiliate link_\n- [Digital Ocean](https://www.digitalocean.com/?refcode=344d234950e1) _affiliate link_\n- [Stickermule](https://www.stickermule.com/unlock?ref_id=9127301701&utm_medium=link&utm_source=invite) _earn a $10 credit after your first purchase_\n- [Amazon US](https://www.amazon.com/exec/obidos/redirect-home/pihole09-20) _affiliate link_\n- Spreading the word about our software and how you have benefited from it\n\n### Contributing via GitHub\n\nWe welcome _everyone_ to contribute to issue reports, suggest new features, and create pull requests.\n\nIf you have something to add - anything from a typo through to a whole new feature, we're happy to check it out! Just make sure to fill out our template when submitting your request; the questions it asks will help the volunteers quickly understand what you're aiming to achieve.\n\nYou'll find that the [install script](https://github.com/pi-hole/pi-hole/blob/master/automated%20install/basic-install.sh) and the [debug script](https://github.com/pi-hole/pi-hole/blob/master/advanced/Scripts/piholeDebug.sh) have an abundance of comments, which will help you better understand how Pi-hole works. They're also a valuable resource to those who want to learn how to write scripts or code a program! We encourage anyone who likes to tinker to read through it and submit a pull request for us to review.\n\n-----\n\n## Getting in touch with us\n\nWhile we are primarily reachable on our [Discourse User Forum](https://discourse.pi-hole.net/), we can also be found on various social media outlets.\n\n**Please be sure to check the FAQs** before starting a new discussion, as we do not have the spare time to reply to every request for assistance.\n\n- [Frequently Asked Questions](https://discourse.pi-hole.net/c/faqs)\n- [Feature Requests](https://discourse.pi-hole.net/c/feature-requests?order=votes)\n- [Reddit](https://www.reddit.com/r/pihole/)\n- [Twitter](https://twitter.com/The_Pi_hole)\n\n-----\n\n## Breakdown of Features\n\n### [Faster-than-light Engine](https://github.com/pi-hole/ftl)\n\n[FTLDNS](https://github.com/pi-hole/ftl) is a lightweight, purpose-built daemon used to provide statistics needed for the Web Interface, and its API can be easily integrated into your own projects. As the name implies, FTLDNS does this all _very quickly_!\n\nSome of the statistics you can integrate include:\n\n- Total number of domains being blocked\n- Total number of DNS queries today\n- Total number of ads blocked today\n- Percentage of ads blocked\n- Unique domains\n- Queries forwarded (to your chosen upstream DNS server)\n- Queries cached\n- Unique clients\n\nAccess the API via [`telnet`](https://github.com/pi-hole/FTL), the Web (`admin/api.php`) and Command Line (`pihole -c -j`). You can find out [more details over here](https://discourse.pi-hole.net/t/pi-hole-api/1863).\n\n### The Command-Line Interface\n\nThe [pihole](https://docs.pi-hole.net/core/pihole-command/) command has all the functionality necessary to fully administer the Pi-hole, without the need for the Web Interface. It's fast, user-friendly, and auditable by anyone with an understanding of `bash`.\n\nSome notable features include:\n\n- [Whitelisting, Blacklisting, and Regex](https://docs.pi-hole.net/core/pihole-command/#whitelisting-blacklisting-and-regex)\n- [Debugging utility](https://docs.pi-hole.net/core/pihole-command/#debugger)\n- [Viewing the live log file](https://docs.pi-hole.net/core/pihole-command/#tail)\n- [Updating Ad Lists](https://docs.pi-hole.net/core/pihole-command/#gravity)\n- [Querying Ad Lists for blocked domains](https://docs.pi-hole.net/core/pihole-command/#query)\n- [Enabling and Disabling Pi-hole](https://docs.pi-hole.net/core/pihole-command/#enable-disable)\n- ... and _many_ more!\n\nYou can read our [Core Feature Breakdown](https://docs.pi-hole.net/core/pihole-command/#pi-hole-core) for more information.\n\n### The Web Interface Dashboard\n\nThis [optional dashboard](https://github.com/pi-hole/web) allows you to view stats, change settings, and configure your Pi-hole. It's the power of the Command Line Interface, with none of the learning curve!\n\nSome notable features include:\n\n- Mobile-friendly interface\n- Password protection\n- Detailed graphs and doughnut charts\n- Top lists of domains and clients\n- A filterable and sortable query log\n- Long Term Statistics to view data over user-defined time ranges\n- The ability to easily manage and configure Pi-hole features\n- ... and all the main features of the Command Line Interface!\n\nThere are several ways to [access the dashboard](https://discourse.pi-hole.net/t/how-do-i-access-pi-holes-dashboard-admin-interface/3168):\n\n1. `http://pi.hole/admin/` (when using Pi-hole as your DNS server)\n2. `http://<IP_ADDRESS_OF_YOUR_PI_HOLE>/admin/`\n"
        },
        {
          "name": "advanced",
          "type": "tree",
          "content": null
        },
        {
          "name": "automated install",
          "type": "tree",
          "content": null
        },
        {
          "name": "gravity.sh",
          "type": "blob",
          "size": 34.2578125,
          "content": "#!/usr/bin/env bash\n# shellcheck disable=SC1090\n\n# Pi-hole: A black hole for Internet advertisements\n# (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n# Network-wide ad blocking via your own hardware.\n#\n# Usage: \"pihole -g\"\n# Compiles a list of ad-serving domains by downloading them from multiple sources\n#\n# This file is copyright under the latest version of the EUPL.\n# Please see LICENSE file for your rights under this license.\n\nexport LC_ALL=C\n\ncoltable=\"/opt/pihole/COL_TABLE\"\nsource \"${coltable}\"\n# shellcheck disable=SC1091\nsource \"/etc/.pihole/advanced/Scripts/database_migration/gravity-db.sh\"\n\nbasename=\"pihole\"\nPIHOLE_COMMAND=\"/usr/local/bin/${basename}\"\n\npiholeDir=\"/etc/${basename}\"\n\n# Legacy (pre v5.0) list file locations\nwhitelistFile=\"${piholeDir}/whitelist.txt\"\nblacklistFile=\"${piholeDir}/blacklist.txt\"\nregexFile=\"${piholeDir}/regex.list\"\nadListFile=\"${piholeDir}/adlists.list\"\n\nlocalList=\"${piholeDir}/local.list\"\nVPNList=\"/etc/openvpn/ipp.txt\"\n\npiholeGitDir=\"/etc/.pihole\"\ngravityDBfile_default=\"${piholeDir}/gravity.db\"\n# GRAVITYDB may be overwritten by source pihole-FTL.conf below\nGRAVITYDB=\"${gravityDBfile_default}\"\ngravityDBschema=\"${piholeGitDir}/advanced/Templates/gravity.db.sql\"\ngravityDBcopy=\"${piholeGitDir}/advanced/Templates/gravity_copy.sql\"\n\ndomainsExtension=\"domains\"\ncurl_connect_timeout=10\n\n# Source setupVars from install script\nsetupVars=\"${piholeDir}/setupVars.conf\"\nif [[ -f \"${setupVars}\" ]];then\n  source \"${setupVars}\"\nelse\n  echo -e \"  ${COL_LIGHT_RED}Installation Failure: ${setupVars} does not exist! ${COL_NC}\n  Please run 'pihole -r', and choose the 'reconfigure' option to fix.\"\n  exit 1\nfi\n\n# Set up tmp dir variable in case it's not configured\n: \"${GRAVITY_TMPDIR:=/tmp}\"\n\nif [ ! -d \"${GRAVITY_TMPDIR}\" ] || [ ! -w \"${GRAVITY_TMPDIR}\" ]; then\n  echo -e \"  ${COL_LIGHT_RED}Gravity temporary directory does not exist or is not a writeable directory, falling back to /tmp. ${COL_NC}\"\n  GRAVITY_TMPDIR=\"/tmp\"\nfi\n\n# Source pihole-FTL from install script\npihole_FTL=\"${piholeDir}/pihole-FTL.conf\"\nif [[ -f \"${pihole_FTL}\" ]]; then\n  source \"${pihole_FTL}\"\nfi\n\n# Set this only after sourcing pihole-FTL.conf as the gravity database path may\n# have changed\ngravityDBfile=\"${GRAVITYDB}\"\ngravityTEMPfile=\"${GRAVITYDB}_temp\"\ngravityDIR=\"$(dirname -- \"${gravityDBfile}\")\"\ngravityOLDfile=\"${gravityDIR}/gravity_old.db\"\n\nif [[ -z \"${BLOCKINGMODE}\" ]] ; then\n  BLOCKINGMODE=\"NULL\"\nfi\n\n# Determine if superseded pihole.conf exists\nif [[ -r \"${piholeDir}/pihole.conf\" ]]; then\n  echo -e \"  ${COL_LIGHT_RED}Ignoring overrides specified within pihole.conf! ${COL_NC}\"\nfi\n\n# Generate new SQLite3 file from schema template\ngenerate_gravity_database() {\n  if ! pihole-FTL sqlite3 -ni \"${gravityDBfile}\" < \"${gravityDBschema}\"; then\n    echo -e \"   ${CROSS} Unable to create ${gravityDBfile}\"\n    return 1\n  fi\n  chown pihole:pihole \"${gravityDBfile}\"\n  chmod g+w \"${piholeDir}\" \"${gravityDBfile}\"\n}\n\n# Copy data from old to new database file and swap them\ngravity_swap_databases() {\n  local str copyGravity oldAvail\n  str=\"Building tree\"\n  echo -ne \"  ${INFO} ${str}...\"\n\n  # The index is intentionally not UNIQUE as poor quality adlists may contain domains more than once\n  output=$( { pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\" \"CREATE INDEX idx_gravity ON gravity (domain, adlist_id);\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to build gravity tree in ${gravityTEMPfile}\\\\n  ${output}\"\n    return 1\n  fi\n  echo -e \"${OVER}  ${TICK} ${str}\"\n\n  str=\"Swapping databases\"\n  echo -ne \"  ${INFO} ${str}...\"\n\n  # Swap databases and remove or conditionally rename old database\n  # Number of available blocks on disk\n  availableBlocks=$(stat -f --format \"%a\" \"${gravityDIR}\")\n  # Number of blocks, used by gravity.db\n  gravityBlocks=$(stat --format \"%b\" ${gravityDBfile})\n  # Only keep the old database if available disk space is at least twice the size of the existing gravity.db.\n  # Better be safe than sorry...\n  oldAvail=false\n  if [ \"${availableBlocks}\" -gt \"$((gravityBlocks * 2))\" ] && [ -f \"${gravityDBfile}\" ]; then\n    oldAvail=true\n    mv \"${gravityDBfile}\" \"${gravityOLDfile}\"\n  else\n    rm \"${gravityDBfile}\"\n  fi\n  mv \"${gravityTEMPfile}\" \"${gravityDBfile}\"\n  echo -e \"${OVER}  ${TICK} ${str}\"\n\n  if $oldAvail; then\n    echo -e \"  ${TICK} The old database remains available\"\n  fi\n}\n\n# Update timestamp when the gravity table was last updated successfully\nupdate_gravity_timestamp() {\n  output=$( { printf \".timeout 30000\\\\nINSERT OR REPLACE INTO info (property,value) values ('updated',cast(strftime('%%s', 'now') as int));\" | pihole-FTL sqlite3 -ni \"${gravityDBfile}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to update gravity timestamp in database ${gravityDBfile}\\\\n  ${output}\"\n    return 1\n  fi\n  return 0\n}\n\n# Import domains from file and store them in the specified database table\ndatabase_table_from_file() {\n  # Define locals\n  local table src backup_path backup_file tmpFile list_type\n  table=\"${1}\"\n  src=\"${2}\"\n  backup_path=\"${piholeDir}/migration_backup\"\n  backup_file=\"${backup_path}/$(basename \"${2}\")\"\n  # Create a temporary file. We don't use '--suffix' here because not all\n  # implementations of mktemp support it, e.g. on Alpine\n  tmpFile=\"$(mktemp -p \"${GRAVITY_TMPDIR}\")\"\n  mv \"${tmpFile}\" \"${tmpFile%.*}.gravity\"\n\n  local timestamp\n  timestamp=\"$(date --utc +'%s')\"\n\n  local rowid\n  declare -i rowid\n  rowid=1\n\n  # Special handling for domains to be imported into the common domainlist table\n  if [[ \"${table}\" == \"whitelist\" ]]; then\n    list_type=\"0\"\n    table=\"domainlist\"\n  elif [[ \"${table}\" == \"blacklist\" ]]; then\n    list_type=\"1\"\n    table=\"domainlist\"\n  elif [[ \"${table}\" == \"regex\" ]]; then\n    list_type=\"3\"\n    table=\"domainlist\"\n  fi\n\n  # Get MAX(id) from domainlist when INSERTing into this table\n  if [[ \"${table}\" == \"domainlist\" ]]; then\n    rowid=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"SELECT MAX(id) FROM domainlist;\")\"\n    if [[ -z \"$rowid\" ]]; then\n      rowid=0\n    fi\n    rowid+=1\n  fi\n\n  # Loop over all domains in ${src} file\n  # Read file line by line\n  grep -v '^ *#' < \"${src}\" | while IFS= read -r domain\n  do\n    # Only add non-empty lines\n    if [[ -n \"${domain}\" ]]; then\n      if [[ \"${table}\" == \"domain_audit\" ]]; then\n        # domain_audit table format (no enable or modified fields)\n        echo \"${rowid},\\\"${domain}\\\",${timestamp}\" >> \"${tmpFile}\"\n      elif [[ \"${table}\" == \"adlist\" ]]; then\n        # Adlist table format\n        echo \"${rowid},\\\"${domain}\\\",1,${timestamp},${timestamp},\\\"Migrated from ${src}\\\",,0,0,0\" >> \"${tmpFile}\"\n      else\n        # White-, black-, and regexlist table format\n        echo \"${rowid},${list_type},\\\"${domain}\\\",1,${timestamp},${timestamp},\\\"Migrated from ${src}\\\"\" >> \"${tmpFile}\"\n      fi\n      rowid+=1\n    fi\n  done\n\n  # Store domains in database table specified by ${table}\n  # Use printf as .mode and .import need to be on separate lines\n  # see https://unix.stackexchange.com/a/445615/83260\n  output=$( { printf \".timeout 30000\\\\n.mode csv\\\\n.import \\\"%s\\\" %s\\\\n\" \"${tmpFile}\" \"${table}\" | pihole-FTL sqlite3 -ni \"${gravityDBfile}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to fill table ${table}${list_type} in database ${gravityDBfile}\\\\n  ${output}\"\n    gravity_Cleanup \"error\"\n  fi\n\n  # Move source file to backup directory, create directory if not existing\n  mkdir -p \"${backup_path}\"\n  mv \"${src}\" \"${backup_file}\" 2> /dev/null || \\\n    echo -e \"  ${CROSS} Unable to backup ${src} to ${backup_path}\"\n\n  # Delete tmpFile\n  rm \"${tmpFile}\" > /dev/null 2>&1 || \\\n    echo -e \"  ${CROSS} Unable to remove ${tmpFile}\"\n}\n\n# Check if a column with name ${2} exists in gravity table with name ${1}\ngravity_column_exists() {\n  output=$( { printf \".timeout 30000\\\\nSELECT EXISTS(SELECT * FROM pragma_table_info('%s') WHERE name='%s');\\\\n\" \"${1}\" \"${2}\" | pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\"; } 2>&1 )\n  if [[ \"${output}\" == \"1\" ]]; then\n    return 0 # Bash 0 is success\n  fi\n\n  return 1 # Bash non-0 is failure\n}\n\n# Update number of domain on this list. We store this in the \"old\" database as all values in the new database will later be overwritten\ndatabase_adlist_number() {\n  # Only try to set number of domains when this field exists in the gravity database\n  if ! gravity_column_exists \"adlist\" \"number\"; then\n    return;\n  fi\n\n  output=$( { printf \".timeout 30000\\\\nUPDATE adlist SET number = %i, invalid_domains = %i WHERE id = %i;\\\\n\" \"${2}\" \"${3}\" \"${1}\" | pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to update number of domains in adlist with ID ${1} in database ${gravityTEMPfile}\\\\n  ${output}\"\n    gravity_Cleanup \"error\"\n  fi\n}\n\n# Update status of this list. We store this in the \"old\" database as all values in the new database will later be overwritten\ndatabase_adlist_status() {\n  # Only try to set the status when this field exists in the gravity database\n  if ! gravity_column_exists \"adlist\" \"status\"; then\n    return;\n  fi\n\n  output=$( { printf \".timeout 30000\\\\nUPDATE adlist SET status = %i WHERE id = %i;\\\\n\" \"${2}\" \"${1}\" | pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to update status of adlist with ID ${1} in database ${gravityTEMPfile}\\\\n  ${output}\"\n    gravity_Cleanup \"error\"\n  fi\n}\n\n# Migrate pre-v5.0 list files to database-based Pi-hole versions\nmigrate_to_database() {\n  # Create database file only if not present\n  if [ ! -e \"${gravityDBfile}\" ]; then\n    # Create new database file - note that this will be created in version 1\n    echo -e \"  ${INFO} Creating new gravity database\"\n    if ! generate_gravity_database; then\n      echo -e \"   ${CROSS} Error creating new gravity database. Please contact support.\"\n      return 1\n    fi\n\n    # Check if gravity database needs to be updated\n    upgrade_gravityDB \"${gravityDBfile}\" \"${piholeDir}\"\n\n    # Migrate list files to new database\n    if [ -e \"${adListFile}\" ]; then\n      # Store adlist domains in database\n      echo -e \"  ${INFO} Migrating content of ${adListFile} into new database\"\n      database_table_from_file \"adlist\" \"${adListFile}\"\n    fi\n    if [ -e \"${blacklistFile}\" ]; then\n      # Store blacklisted domains in database\n      echo -e \"  ${INFO} Migrating content of ${blacklistFile} into new database\"\n      database_table_from_file \"blacklist\" \"${blacklistFile}\"\n    fi\n    if [ -e \"${whitelistFile}\" ]; then\n      # Store whitelisted domains in database\n      echo -e \"  ${INFO} Migrating content of ${whitelistFile} into new database\"\n      database_table_from_file \"whitelist\" \"${whitelistFile}\"\n    fi\n    if [ -e \"${regexFile}\" ]; then\n      # Store regex domains in database\n      # Important note: We need to add the domains to the \"regex\" table\n      # as it will only later be renamed to \"regex_blacklist\"!\n      echo -e \"  ${INFO} Migrating content of ${regexFile} into new database\"\n      database_table_from_file \"regex\" \"${regexFile}\"\n    fi\n  fi\n\n  # Check if gravity database needs to be updated\n  upgrade_gravityDB \"${gravityDBfile}\" \"${piholeDir}\"\n}\n\n# Determine if DNS resolution is available before proceeding\ngravity_CheckDNSResolutionAvailable() {\n  local lookupDomain=\"pi.hole\"\n\n  # Determine if $localList does not exist, and ensure it is not empty\n  if [[ ! -e \"${localList}\" ]] || [[ -s \"${localList}\" ]]; then\n    lookupDomain=\"raw.githubusercontent.com\"\n  fi\n\n  # Determine if $lookupDomain is resolvable\n  if timeout 4 getent hosts \"${lookupDomain}\" &> /dev/null; then\n    # Print confirmation of resolvability if it had previously failed\n    if [[ -n \"${secs:-}\" ]]; then\n      echo -e \"${OVER}  ${TICK} DNS resolution is now available\\\\n\"\n    fi\n    return 0\n  elif [[ -n \"${secs:-}\" ]]; then\n    echo -e \"${OVER}  ${CROSS} DNS resolution is not available\"\n    exit 1\n  fi\n\n  # If the /etc/resolv.conf contains resolvers other than 127.0.0.1 then the local dnsmasq will not be queried and pi.hole is NXDOMAIN.\n  # This means that even though name resolution is working, the getent hosts check fails and the holddown timer keeps ticking and eventually fails\n  # So we check the output of the last command and if it failed, attempt to use dig +short as a fallback\n  if timeout 4 dig +short \"${lookupDomain}\" &> /dev/null; then\n    if [[ -n \"${secs:-}\" ]]; then\n      echo -e \"${OVER}  ${TICK} DNS resolution is now available\\\\n\"\n    fi\n    return 0\n  elif [[ -n \"${secs:-}\" ]]; then\n    echo -e \"${OVER}  ${CROSS} DNS resolution is not available\"\n    exit 1\n  fi\n\n  # Determine error output message\n  if pgrep pihole-FTL &> /dev/null; then\n    echo -e \"  ${CROSS} DNS resolution is currently unavailable\"\n  else\n    echo -e \"  ${CROSS} DNS service is not running\"\n    \"${PIHOLE_COMMAND}\" restartdns\n  fi\n\n  # Ensure DNS server is given time to be resolvable\n  secs=\"120\"\n  echo -ne \"  ${INFO} Time until retry: ${secs}\"\n  until timeout 1 getent hosts \"${lookupDomain}\" &> /dev/null; do\n    [[ \"${secs:-}\" -eq 0 ]] && break\n    echo -ne \"${OVER}  ${INFO} Time until retry: ${secs}\"\n    : $((secs--))\n    sleep 1\n  done\n\n  # Try again\n  gravity_CheckDNSResolutionAvailable\n}\n\n# Retrieve blocklist URLs and parse domains from adlist.list\ngravity_DownloadBlocklists() {\n  echo -e \"  ${INFO} ${COL_BOLD}Neutrino emissions detected${COL_NC}...\"\n\n  if [[ \"${gravityDBfile}\" != \"${gravityDBfile_default}\" ]]; then\n    echo -e \"  ${INFO} Storing gravity database in ${COL_BOLD}${gravityDBfile}${COL_NC}\"\n  fi\n\n  # Retrieve source URLs from gravity database\n  # We source only enabled adlists, SQLite3 stores boolean values as 0 (false) or 1 (true)\n  mapfile -t sources <<< \"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"SELECT address FROM vw_adlist;\" 2> /dev/null)\"\n  mapfile -t sourceIDs <<< \"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"SELECT id FROM vw_adlist;\" 2> /dev/null)\"\n\n  # Parse source domains from $sources\n  mapfile -t sourceDomains <<< \"$(\n    # Logic: Split by folder/port\n    awk -F '[/:]' '{\n      # Remove URL protocol & optional username:password@\n      gsub(/(.*:\\/\\/|.*:.*@)/, \"\", $0)\n      if(length($1)>0){print $1}\n      else {print \"local\"}\n    }' <<< \"$(printf '%s\\n' \"${sources[@]}\")\" 2> /dev/null\n  )\"\n\n  local str=\"Pulling blocklist source list into range\"\n  echo -e \"${OVER}  ${TICK} ${str}\"\n\n  if [[ -z \"${sources[*]}\" ]] || [[ -z \"${sourceDomains[*]}\" ]]; then\n    echo -e \"  ${INFO} No source list found, or it is empty\"\n    echo \"\"\n    unset sources\n  fi\n\n  local url domain str target compression\n  echo \"\"\n\n  # Prepare new gravity database\n  str=\"Preparing new gravity database\"\n  echo -ne \"  ${INFO} ${str}...\"\n  rm \"${gravityTEMPfile}\" > /dev/null 2>&1\n  output=$( { pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\" < \"${gravityDBschema}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to create new database ${gravityTEMPfile}\\\\n  ${output}\"\n    gravity_Cleanup \"error\"\n  else\n    echo -e \"${OVER}  ${TICK} ${str}\"\n  fi\n\n  str=\"Creating new gravity databases\"\n  echo -ne \"  ${INFO} ${str}...\"\n\n  # Gravity copying SQL script\n  copyGravity=\"$(cat \"${gravityDBcopy}\")\"\n  if [[ \"${gravityDBfile}\" != \"${gravityDBfile_default}\" ]]; then\n    # Replace default gravity script location by custom location\n    copyGravity=\"${copyGravity//\"${gravityDBfile_default}\"/\"${gravityDBfile}\"}\"\n  fi\n\n  output=$( { pihole-FTL sqlite3 -ni \"${gravityTEMPfile}\" <<< \"${copyGravity}\"; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -ne 0 ]]; then\n    echo -e \"\\\\n  ${CROSS} Unable to copy data from ${gravityDBfile} to ${gravityTEMPfile}\\\\n  ${output}\"\n    return 1\n  fi\n  echo -e \"${OVER}  ${TICK} ${str}\"\n\n  # Use compression to reduce the amount of data that is transferred\n  # between the Pi-hole and the ad list provider. Use this feature\n  # only if it is supported by the locally available version of curl\n  if curl -V | grep -q \"Features:.* libz\"; then\n    compression=\"--compressed\"\n    echo -e \"  ${INFO} Using libz compression\\n\"\n  else\n    compression=\"\"\n    echo -e \"  ${INFO} Libz compression not available\\n\"\n  fi\n  # Loop through $sources and download each one\n  for ((i = 0; i < \"${#sources[@]}\"; i++)); do\n    url=\"${sources[$i]}\"\n    domain=\"${sourceDomains[$i]}\"\n    id=\"${sourceIDs[$i]}\"\n\n    # Save the file as list.#.domain\n    saveLocation=\"${piholeDir}/list.${id}.${domain}.${domainsExtension}\"\n    activeDomains[$i]=\"${saveLocation}\"\n\n    echo -e \"  ${INFO} Target: ${url}\"\n    local regex check_url\n    # Check for characters NOT allowed in URLs\n    regex=\"[^a-zA-Z0-9:/?&%=~._()-;]\"\n\n    # this will remove first @ that is after schema and before domain\n    # \\1 is optional schema, \\2 is userinfo\n    check_url=\"$( sed -re 's#([^:/]*://)?([^/]+)@#\\1\\2#' <<< \"$url\" )\"\n\n    if [[ \"${check_url}\" =~ ${regex} ]]; then\n      echo -e \"  ${CROSS} Invalid Target\"\n    else\n      gravity_DownloadBlocklistFromUrl \"${url}\" \"${sourceIDs[$i]}\" \"${saveLocation}\" \"${target}\" \"${compression}\"\n    fi\n    echo \"\"\n  done\n\n  gravity_Blackbody=true\n}\n\ncompareLists() {\n  local adlistID=\"${1}\" target=\"${2}\"\n\n  # Verify checksum when an older checksum exists\n  if [[ -s \"${target}.sha1\" ]]; then\n    if ! sha1sum --check --status --strict \"${target}.sha1\"; then\n      # The list changed upstream, we need to update the checksum\n      sha1sum \"${target}\" > \"${target}.sha1\"\n      echo \"  ${INFO} List has been updated\"\n      database_adlist_status \"${adlistID}\" \"1\"\n    else\n      echo \"  ${INFO} List stayed unchanged\"\n      database_adlist_status \"${adlistID}\" \"2\"\n    fi\n  else\n    # No checksum available, create one for comparing on the next run\n    sha1sum \"${target}\" > \"${target}.sha1\"\n    # We assume here it was changed upstream\n    database_adlist_status \"${adlistID}\" \"1\"\n  fi\n}\n\n# Download specified URL and perform checks on HTTP status and file content\ngravity_DownloadBlocklistFromUrl() {\n  local url=\"${1}\" adlistID=\"${2}\" saveLocation=\"${3}\" target=\"${4}\" compression=\"${5}\"\n  local heisenbergCompensator=\"\" listCurlBuffer str httpCode success=\"\" ip cmd_ext\n  local file_path permissions ip_addr port blocked=false download=true\n\n  # Create temp file to store content on disk instead of RAM\n  # We don't use '--suffix' here because not all implementations of mktemp support it, e.g. on Alpine\n  listCurlBuffer=\"$(mktemp -p \"${GRAVITY_TMPDIR}\")\"\n  mv \"${listCurlBuffer}\" \"${listCurlBuffer%.*}.phgpb\"\n\n  # Determine if $saveLocation has read permission\n  if [[ -r \"${saveLocation}\" && $url != \"file\"* ]]; then\n    # Have curl determine if a remote file has been modified since last retrieval\n    # Uses \"Last-Modified\" header, which certain web servers do not provide (e.g: raw github urls)\n    # Note: Don't do this for local files, always download them\n    heisenbergCompensator=\"-z ${saveLocation}\"\n  fi\n\n  str=\"Status:\"\n  echo -ne \"  ${INFO} ${str} Pending...\"\n  case $BLOCKINGMODE in\n    \"IP-NODATA-AAAA\"|\"IP\")\n      # Get IP address of this domain\n      ip=\"$(dig \"${domain}\" +short)\"\n      # Check if this IP matches any IP of the system\n      if [[ -n \"${ip}\" && $(grep -Ec \"inet(|6) ${ip}\" <<< \"$(ip a)\") -gt 0 ]]; then\n        blocked=true\n      fi;;\n    \"NXDOMAIN\")\n      if [[ $(dig \"${domain}\" | grep \"NXDOMAIN\" -c) -ge 1 ]]; then\n        blocked=true\n      fi;;\n    \"NODATA\")\n      if [[ $(dig \"${domain}\" | grep \"NOERROR\" -c) -ge 1 ]] && [[ -z $(dig +short \"${domain}\") ]]; then\n         blocked=true\n      fi;;\n    \"NULL\"|*)\n      if [[ $(dig \"${domain}\" +short | grep \"0.0.0.0\" -c) -ge 1 ]]; then\n        blocked=true\n      fi;;\n  esac\n\n  if [[ \"${blocked}\" == true ]]; then\n    printf -v ip_addr \"%s\" \"${PIHOLE_DNS_1%#*}\"\n    if [[ ${PIHOLE_DNS_1} != *\"#\"* ]]; then\n      port=53\n    else\n      printf -v port \"%s\" \"${PIHOLE_DNS_1#*#}\"\n    fi\n    ip=$(dig \"@${ip_addr}\" -p \"${port}\" +short \"${domain}\" | tail -1)\n    if [[ $(echo \"${url}\" | awk -F '://' '{print $1}') = \"https\" ]]; then\n      port=443;\n    else port=80\n    fi\n    bad_list=$(pihole -q -adlist \"${domain}\" | head -n1 | awk -F 'Match found in ' '{print $2}')\n    echo -e \"${OVER}  ${CROSS} ${str} ${domain} is blocked by ${bad_list%:}. Using DNS on ${PIHOLE_DNS_1} to download ${url}\";\n    echo -ne \"  ${INFO} ${str} Pending...\"\n    cmd_ext=\"--resolve $domain:$port:$ip\"\n  fi\n\n  # If we are going to \"download\" a local file, we first check if the target\n  # file has a+r permission. We explicitly check for all+read because we want\n  # to make sure that the file is readable by everyone and not just the user\n  # running the script.\n  if [[ $url == \"file://\"* ]]; then\n    # Get the file path\n    file_path=$(echo \"$url\" | cut -d'/' -f3-)\n    # Check if the file exists and is a regular file (i.e. not a socket, fifo, tty, block). Might still be a symlink.\n    if [[ ! -f $file_path ]]; then\n      # Output that the file does not exist\n      echo -e \"${OVER}  ${CROSS} ${file_path} does not exist\"\n      download=false\n    else\n      # Check if the file or a file referenced by the symlink has a+r permissions\n      permissions=$(stat -L -c \"%a\" \"$file_path\")\n      if [[ $permissions == *4 || $permissions == *5 || $permissions == *6 || $permissions == *7 ]]; then\n        # Output that we are using the local file\n        echo -e \"${OVER}  ${INFO} Using local file ${file_path}\"\n      else\n        # Output that the file does not have the correct permissions\n        echo -e \"${OVER}  ${CROSS} Cannot read file (file needs to have a+r permission)\"\n        download=false\n      fi\n    fi\n  fi\n\n  # Check for allowed protocols\n  if [[ $url != \"http\"* && $url != \"https\"* && $url != \"file\"* && $url != \"ftp\"* && $url != \"ftps\"* && $url != \"sftp\"* ]]; then\n    echo -e \"${OVER}  ${CROSS} ${str} Invalid protocol specified, ignoring list\"\n    download=false\n  fi\n\n  if [[ \"${download}\" == true ]]; then\n    # shellcheck disable=SC2086\n    httpCode=$(curl --connect-timeout ${curl_connect_timeout} -s -L ${compression} ${cmd_ext} ${heisenbergCompensator} -w \"%{http_code}\" \"${url}\" -o \"${listCurlBuffer}\" 2> /dev/null)\n  fi\n\n  case $url in\n    # Did we \"download\" a local file?\n    \"file\"*)\n      if [[ -s \"${listCurlBuffer}\" ]]; then\n        echo -e \"${OVER}  ${TICK} ${str} Retrieval successful\"; success=true\n      else\n        echo -e \"${OVER}  ${CROSS} ${str} Retrieval failed / empty list\"\n      fi;;\n    # Did we \"download\" a remote file?\n    *)\n      # Determine \"Status:\" output based on HTTP response\n      case \"${httpCode}\" in\n        \"200\") echo -e \"${OVER}  ${TICK} ${str} Retrieval successful\"; success=true;;\n        \"304\") echo -e \"${OVER}  ${TICK} ${str} No changes detected\"; success=true;;\n        \"000\") echo -e \"${OVER}  ${CROSS} ${str} Connection Refused\";;\n        \"403\") echo -e \"${OVER}  ${CROSS} ${str} Forbidden\";;\n        \"404\") echo -e \"${OVER}  ${CROSS} ${str} Not found\";;\n        \"408\") echo -e \"${OVER}  ${CROSS} ${str} Time-out\";;\n        \"451\") echo -e \"${OVER}  ${CROSS} ${str} Unavailable For Legal Reasons\";;\n        \"500\") echo -e \"${OVER}  ${CROSS} ${str} Internal Server Error\";;\n        \"504\") echo -e \"${OVER}  ${CROSS} ${str} Connection Timed Out (Gateway)\";;\n        \"521\") echo -e \"${OVER}  ${CROSS} ${str} Web Server Is Down (Cloudflare)\";;\n        \"522\") echo -e \"${OVER}  ${CROSS} ${str} Connection Timed Out (Cloudflare)\";;\n        *    ) echo -e \"${OVER}  ${CROSS} ${str} ${url} (${httpCode})\";;\n      esac;;\n  esac\n\n  local done=\"false\"\n  # Determine if the blocklist was downloaded and saved correctly\n  if [[ \"${success}\" == true ]]; then\n    if [[ \"${httpCode}\" == \"304\" ]]; then\n      # Add domains to database table file\n      pihole-FTL gravity parseList \"${saveLocation}\" \"${gravityTEMPfile}\" \"${adlistID}\"\n      database_adlist_status \"${adlistID}\" \"2\"\n      done=\"true\"\n    # Check if $listCurlBuffer is a non-zero length file\n    elif [[ -s \"${listCurlBuffer}\" ]]; then\n      # Determine if blocklist is non-standard and parse as appropriate\n      gravity_ParseFileIntoDomains \"${listCurlBuffer}\" \"${saveLocation}\"\n      # Remove curl buffer file after its use\n      rm \"${listCurlBuffer}\"\n      # Add domains to database table file\n      pihole-FTL gravity parseList \"${saveLocation}\" \"${gravityTEMPfile}\" \"${adlistID}\"\n      # Compare lists, are they identical?\n      compareLists \"${adlistID}\" \"${saveLocation}\"\n      done=\"true\"\n    else\n      # Fall back to previously cached list if $listCurlBuffer is empty\n      echo -e \"  ${INFO} Received empty file\"\n    fi\n  fi\n\n  # Do we need to fall back to a cached list (if available)?\n  if [[ \"${done}\" != \"true\" ]]; then\n    # Determine if cached list has read permission\n    if [[ -r \"${saveLocation}\" ]]; then\n      echo -e \"  ${CROSS} List download failed: ${COL_LIGHT_GREEN}using previously cached list${COL_NC}\"\n      # Add domains to database table file\n      pihole-FTL gravity parseList \"${saveLocation}\" \"${gravityTEMPfile}\" \"${adlistID}\"\n      database_adlist_status \"${adlistID}\" \"3\"\n    else\n      echo -e \"  ${CROSS} List download failed: ${COL_LIGHT_RED}no cached list available${COL_NC}\"\n      # Manually reset these two numbers because we do not call parseList here\n      database_adlist_number \"${adlistID}\" 0 0\n      database_adlist_status \"${adlistID}\" \"4\"\n    fi\n  fi\n}\n\n# Parse source files into domains format\ngravity_ParseFileIntoDomains() {\n  local src=\"${1}\" destination=\"${2}\"\n\n  # Remove comments and print only the domain name\n  # Most of the lists downloaded are already in hosts file format but the spacing/formatting is not contiguous\n  # This helps with that and makes it easier to read\n  # It also helps with debugging so each stage of the script can be researched more in depth\n  # 1) Convert all characters to lowercase\n  tr '[:upper:]' '[:lower:]' < \"${src}\" > \"${destination}\"\n\n  # 2) Remove carriage returns\n  # 3) Remove lines starting with ! (ABP Comments)\n  # 4) Remove lines starting with [ (ABP Header)\n  # 5) Remove lines containing ABP extended CSS selectors (\"##\", \"#!#\", \"#@#\", \"#?#\") preceded by a letter\n  # 6) Remove comments (text starting with \"#\", include possible spaces before the hash sign)\n  # 7) Remove leading tabs, spaces, etc. (Also removes leading IP addresses)\n  # 8) Remove empty lines\n\n    sed -i -r \\\n    -e 's/\\r$//' \\\n    -e 's/\\s*!.*//g' \\\n    -e 's/\\s*\\[.*//g' \\\n    -e '/[a-z]\\#[$?@]{0,1}\\#/d' \\\n    -e 's/\\s*#.*//g' \\\n    -e 's/^.*\\s+//g' \\\n    -e '/^$/d' \"${destination}\"\n\n  chmod 644 \"${destination}\"\n}\n\n# Report number of entries in a table\ngravity_Table_Count() {\n  local table=\"${1}\"\n  local str=\"${2}\"\n  local num\n  num=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"SELECT COUNT(*) FROM ${table};\")\"\n  if [[ \"${table}\" == \"gravity\" ]]; then\n    local unique\n    unique=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"SELECT COUNT(*) FROM (SELECT DISTINCT domain FROM ${table});\")\"\n    echo -e \"  ${INFO} Number of ${str}: ${num} (${COL_BOLD}${unique} unique domains${COL_NC})\"\n    pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"INSERT OR REPLACE INTO info (property,value) VALUES ('gravity_count',${unique});\"\n  else\n    echo -e \"  ${INFO} Number of ${str}: ${num}\"\n  fi\n}\n\n# Output count of blacklisted domains and regex filters\ngravity_ShowCount() {\n  # Here we use the table \"gravity\" instead of the view \"vw_gravity\" for speed.\n  # It's safe to replace it here, because right after a gravity run both will show the exactly same number of domains.\n  gravity_Table_Count \"gravity\" \"gravity domains\" \"\"\n  gravity_Table_Count \"vw_blacklist\" \"exact blacklisted domains\"\n  gravity_Table_Count \"vw_regex_blacklist\" \"regex blacklist filters\"\n  gravity_Table_Count \"vw_whitelist\" \"exact whitelisted domains\"\n  gravity_Table_Count \"vw_regex_whitelist\" \"regex whitelist filters\"\n}\n\n# Create \"localhost\" entries into hosts format\ngravity_generateLocalList() {\n  # Empty $localList if it already exists, otherwise, create it\n  echo \"### Do not modify this file, it will be overwritten by pihole -g\" > \"${localList}\"\n  chmod 644 \"${localList}\"\n\n  # Add additional LAN hosts provided by OpenVPN (if available)\n  if [[ -f \"${VPNList}\" ]]; then\n    awk -F, '{printf $2\"\\t\"$1\".vpn\\n\"}' \"${VPNList}\" >> \"${localList}\"\n  fi\n}\n\n# Trap Ctrl-C\ngravity_Trap() {\n  trap '{ echo -e \"\\\\n\\\\n  ${INFO} ${COL_LIGHT_RED}User-abort detected${COL_NC}\"; gravity_Cleanup \"error\"; }' INT\n}\n\n# Clean up after Gravity upon exit or cancellation\ngravity_Cleanup() {\n  local error=\"${1:-}\"\n\n  str=\"Cleaning up stray matter\"\n  echo -ne \"  ${INFO} ${str}...\"\n\n  # Delete tmp content generated by Gravity\n  rm ${piholeDir}/pihole.*.txt 2> /dev/null\n  rm ${piholeDir}/*.tmp 2> /dev/null\n  # listCurlBuffer location\n  rm \"${GRAVITY_TMPDIR}\"/*.phgpb 2> /dev/null\n  # invalid_domains location\n  rm \"${GRAVITY_TMPDIR}\"/*.ph-non-domains 2> /dev/null\n\n  # Ensure this function only runs when gravity_SetDownloadOptions() has completed\n  if [[ \"${gravity_Blackbody:-}\" == true ]]; then\n    # Remove any unused .domains files\n    for file in \"${piholeDir}\"/*.\"${domainsExtension}\"; do\n      # If list is not in active array, then remove it\n      if [[ ! \"${activeDomains[*]}\" == *\"${file}\"* ]]; then\n        rm -f \"${file}\" 2> /dev/null || \\\n          echo -e \"  ${CROSS} Failed to remove ${file##*/}\"\n      fi\n    done\n  fi\n\n  echo -e \"${OVER}  ${TICK} ${str}\"\n\n  # Only restart DNS service if offline\n  if ! pgrep pihole-FTL &> /dev/null; then\n    \"${PIHOLE_COMMAND}\" restartdns\n    dnsWasOffline=true\n  fi\n\n  # Print Pi-hole status if an error occurred\n  if [[ -n \"${error}\" ]]; then\n    \"${PIHOLE_COMMAND}\" status\n    exit 1\n  fi\n}\n\ndatabase_recovery() {\n  local result\n  local str=\"Checking integrity of existing gravity database (this can take a while)\"\n  local option=\"${1}\"\n  echo -ne \"  ${INFO} ${str}...\"\n  result=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"PRAGMA integrity_check\" 2>&1)\"\n\n  if [[ ${result} = \"ok\" ]]; then\n    echo -e \"${OVER}  ${TICK} ${str} - no errors found\"\n\n    str=\"Checking foreign keys of existing gravity database (this can take a while)\"\n    echo -ne \"  ${INFO} ${str}...\"\n    unset result\n    result=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \"PRAGMA foreign_key_check\" 2>&1)\"\n    if [[ -z ${result} ]]; then\n      echo -e \"${OVER}  ${TICK} ${str} - no errors found\"\n      if [[ \"${option}\" != \"force\" ]]; then\n        return\n      fi\n    else\n      echo -e \"${OVER}  ${CROSS} ${str} - errors found:\"\n      while IFS= read -r line ; do echo \"  - $line\"; done <<< \"$result\"\n    fi\n  else\n    echo -e \"${OVER}  ${CROSS} ${str} - errors found:\"\n    while IFS= read -r line ; do echo \"  - $line\"; done <<< \"$result\"\n  fi\n\n  str=\"Trying to recover existing gravity database\"\n  echo -ne \"  ${INFO} ${str}...\"\n  # We have to remove any possibly existing recovery database or this will fail\n  rm -f \"${gravityDBfile}.recovered\" > /dev/null 2>&1\n  if result=\"$(pihole-FTL sqlite3 -ni \"${gravityDBfile}\" \".recover\" | pihole-FTL sqlite3 -ni \"${gravityDBfile}.recovered\" 2>&1)\"; then\n    echo -e \"${OVER}  ${TICK} ${str} - success\"\n    mv \"${gravityDBfile}\" \"${gravityDBfile}.old\"\n    mv \"${gravityDBfile}.recovered\" \"${gravityDBfile}\"\n    echo -ne \" ${INFO} ${gravityDBfile} has been recovered\"\n    echo -ne \" ${INFO} The old ${gravityDBfile} has been moved to ${gravityDBfile}.old\"\n  else\n    echo -e \"${OVER}  ${CROSS} ${str} - the following errors happened:\"\n    while IFS= read -r line ; do echo \"  - $line\"; done <<< \"$result\"\n    echo -e \"  ${CROSS} Recovery failed. Try \\\"pihole -r recreate\\\" instead.\"\n    exit 1\n  fi\n  echo \"\"\n}\n\nhelpFunc() {\n  echo \"Usage: pihole -g\nUpdate domains from blocklists specified in adlists.list\n\nOptions:\n  -f, --force          Force the download of all specified blocklists\n  -h, --help           Show this help dialog\"\n  exit 0\n}\n\nrepairSelector() {\n  case \"$1\" in\n    \"recover\") recover_database=true;;\n    \"recreate\") recreate_database=true;;\n    *) echo \"Usage: pihole -g -r {recover,recreate}\nAttempt to repair gravity database\n\nAvailable options:\n  pihole -g -r recover        Try to recover a damaged gravity database file.\n                              Pi-hole tries to restore as much as possible\n                              from a corrupted gravity database.\n\n  pihole -g -r recover force  Pi-hole will run the recovery process even when\n                              no damage is detected. This option is meant to be\n                              a last resort. Recovery is a fragile task\n                              consuming a lot of resources and shouldn't be\n                              performed unnecessarily.\n\n  pihole -g -r recreate       Create a new gravity database file from scratch.\n                              This will remove your existing gravity database\n                              and create a new file from scratch. If you still\n                              have the migration backup created when migrating\n                              to Pi-hole v5.0, Pi-hole will import these files.\"\n    exit 0;;\n  esac\n}\n\nfor var in \"$@\"; do\n  case \"${var}\" in\n    \"-f\" | \"--force\" ) forceDelete=true;;\n    \"-r\" | \"--repair\" ) repairSelector \"$3\";;\n    \"-h\" | \"--help\" ) helpFunc;;\n  esac\ndone\n\n# Remove OLD (backup) gravity file, if it exists\nif [[ -f \"${gravityOLDfile}\" ]]; then\n  rm \"${gravityOLDfile}\"\nfi\n\n# Trap Ctrl-C\ngravity_Trap\n\nif [[ \"${recreate_database:-}\" == true ]]; then\n  str=\"Recreating gravity database from migration backup\"\n  echo -ne \"${INFO} ${str}...\"\n  rm \"${gravityDBfile}\"\n  pushd \"${piholeDir}\" > /dev/null || exit\n  cp migration_backup/* .\n  popd > /dev/null || exit\n  echo -e \"${OVER}  ${TICK} ${str}\"\nfi\n\nif [[ \"${recover_database:-}\" == true ]]; then\n  database_recovery \"$4\"\nfi\n\n# Move possibly existing legacy files to the gravity database\nif ! migrate_to_database; then\n  echo -e \"   ${CROSS} Unable to migrate to database. Please contact support.\"\n  exit 1\nfi\n\nif [[ \"${forceDelete:-}\" == true ]]; then\n  str=\"Deleting existing list cache\"\n  echo -ne \"${INFO} ${str}...\"\n\n  rm /etc/pihole/list.* 2> /dev/null || true\n  echo -e \"${OVER}  ${TICK} ${str}\"\nfi\n\n# Gravity downloads blocklists next\nif ! gravity_CheckDNSResolutionAvailable; then\n  echo -e \"   ${CROSS} Can not complete gravity update, no DNS is available. Please contact support.\"\n  exit 1\nfi\n\nif ! gravity_DownloadBlocklists; then\n  echo -e \"   ${CROSS} Unable to create gravity database. Please try again later. If the problem persists, please contact support.\"\n  exit 1\nfi\n\n# Create local.list\ngravity_generateLocalList\n\n# Migrate rest of the data from old to new database\nif ! gravity_swap_databases; then\n  echo -e \"   ${CROSS} Unable to create database. Please contact support.\"\n  exit 1\nfi\n\n# Update gravity timestamp\nupdate_gravity_timestamp\n\n# Ensure proper permissions are set for the database\nchown pihole:pihole \"${gravityDBfile}\"\nchmod g+w \"${piholeDir}\" \"${gravityDBfile}\"\n\n# Compute numbers to be displayed\ngravity_ShowCount\n\n# Determine if DNS has been restarted by this instance of gravity\nif [[ -z \"${dnsWasOffline:-}\" ]]; then\n  \"${PIHOLE_COMMAND}\" restartdns reload\nfi\n\ngravity_Cleanup\necho \"\"\n\n\"${PIHOLE_COMMAND}\" status\n"
        },
        {
          "name": "manpages",
          "type": "tree",
          "content": null
        },
        {
          "name": "pihole",
          "type": "blob",
          "size": 18.3359375,
          "content": "#!/usr/bin/env bash\n\n# Pi-hole: A black hole for Internet advertisements\n# (c) 2017 Pi-hole, LLC (https://pi-hole.net)\n# Network-wide ad blocking via your own hardware.\n#\n# Controller for all pihole scripts and functions.\n#\n# This file is copyright under the latest version of the EUPL.\n# Please see LICENSE file for your rights under this license.\n\nreadonly PI_HOLE_SCRIPT_DIR=\"/opt/pihole\"\n\n# setupVars and PI_HOLE_BIN_DIR are not readonly here because in some functions (checkout),\n# they might get set again when the installer is sourced. This causes an\n# error due to modifying a readonly variable.\nsetupVars=\"/etc/pihole/setupVars.conf\"\nPI_HOLE_BIN_DIR=\"/usr/local/bin\"\n\nreadonly colfile=\"${PI_HOLE_SCRIPT_DIR}/COL_TABLE\"\nsource \"${colfile}\"\n\nutilsfile=\"${PI_HOLE_SCRIPT_DIR}/utils.sh\"\nsource \"${utilsfile}\"\n\nversionsfile=\"/etc/pihole/versions\"\nif [ -f \"${versionsfile}\" ]; then\n    # Only source versionsfile if the file exits\n    # fixes a warning during installation where versionsfile does not exist yet\n    # but gravity calls `pihole -status` and thereby sourcing the file\n    source \"${versionsfile}\"\nfi\n\nwebpageFunc() {\n  source \"${PI_HOLE_SCRIPT_DIR}/webpage.sh\"\n  main \"$@\"\n  exit 0\n}\n\nlistFunc() {\n  \"${PI_HOLE_SCRIPT_DIR}\"/list.sh \"$@\"\n  exit 0\n}\n\ndebugFunc() {\n    local automated\n    local web\n    local check_database_integrity\n    # Pull off the `debug` leaving passed call augmentation flags in $1\n    shift\n\n    for value in \"$@\"; do\n        [[ \"$value\"  == *\"-a\"* ]] && automated=\"true\"\n        [[ \"$value\"  == *\"-w\"* ]] && web=\"true\"\n        [[ \"$value\"  == *\"-c\"* ]] && check_database_integrity=\"true\"\n        [[ \"$value\" == *\"--check_database\"* ]] && check_database_integrity=\"true\"\n    done\n\n  AUTOMATED=${automated:-} WEBCALL=${web:-} CHECK_DATABASE=${check_database_integrity:-} \"${PI_HOLE_SCRIPT_DIR}\"/piholeDebug.sh\n  exit 0\n}\n\nflushFunc() {\n  \"${PI_HOLE_SCRIPT_DIR}\"/piholeLogFlush.sh \"$@\"\n  exit 0\n}\n\narpFunc() {\n  \"${PI_HOLE_SCRIPT_DIR}\"/piholeARPTable.sh \"$@\"\n  exit 0\n}\n\nupdatePiholeFunc() {\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    unsupportedFunc\n  else\n    shift\n    \"${PI_HOLE_SCRIPT_DIR}\"/update.sh \"$@\"\n    exit 0\n  fi\n}\n\nreconfigurePiholeFunc() {\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    unsupportedFunc\n  else\n    /etc/.pihole/automated\\ install/basic-install.sh --reconfigure\n    exit 0;\n  fi\n}\n\nupdateGravityFunc() {\n  exec \"${PI_HOLE_SCRIPT_DIR}\"/gravity.sh \"$@\"\n}\n\nqueryFunc() {\n  shift\n  \"${PI_HOLE_SCRIPT_DIR}\"/query.sh \"$@\"\n  exit 0\n}\n\nchronometerFunc() {\n  shift\n  \"${PI_HOLE_SCRIPT_DIR}\"/chronometer.sh \"$@\"\n  exit 0\n}\n\n\nuninstallFunc() {\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    unsupportedFunc\n  else\n    \"${PI_HOLE_SCRIPT_DIR}\"/uninstall.sh\n    exit 0\n  fi\n}\n\nversionFunc() {\n  shift\n  exec \"${PI_HOLE_SCRIPT_DIR}\"/version.sh \"$@\"\n}\n\nrestartDNS() {\n  local svcOption svc str output status pid icon FTL_PID_FILE\n  svcOption=\"${1:-restart}\"\n\n  # get the current path to the pihole-FTL.pid\n  FTL_PID_FILE=\"$(getFTLPIDFile)\"\n\n  # Determine if we should reload or restart\n  if [[ \"${svcOption}\" =~ \"reload-lists\" ]]; then\n    # Reloading of the lists has been requested\n    # Note 1: This will NOT re-read any *.conf files\n    # Note 2: We cannot use killall here as it does\n    #         not know about real-time signals\n\n    pid=\"$(getFTLPID ${FTL_PID_FILE})\"\n    if [[ \"$pid\" -eq \"-1\" ]]; then\n      svc=\"true\"\n      str=\"FTL is not running\"\n      icon=\"${INFO}\"\n    else\n      svc=\"kill -RTMIN ${pid}\"\n      str=\"Reloading DNS lists\"\n      icon=\"${TICK}\"\n    fi\n  elif [[ \"${svcOption}\" =~ \"reload\" ]]; then\n    # Reloading of the DNS cache has been requested\n    # Note: This will NOT re-read any *.conf files\n    pid=\"$(getFTLPID ${FTL_PID_FILE})\"\n    if [[ \"$pid\" -eq \"-1\" ]]; then\n      svc=\"true\"\n      str=\"FTL is not running\"\n      icon=\"${INFO}\"\n    else\n      svc=\"kill -HUP ${pid}\"\n      str=\"Flushing DNS cache\"\n      icon=\"${TICK}\"\n    fi\n  else\n    # A full restart has been requested\n    svc=\"service pihole-FTL restart\"\n    str=\"Restarting DNS server\"\n    icon=\"${TICK}\"\n  fi\n\n  # Print output to Terminal, but not to Web Admin\n  [[ -t 1 ]] && echo -ne \"  ${INFO} ${str}...\"\n\n  output=$( { ${svc}; } 2>&1 )\n  status=\"$?\"\n\n  if [[ \"${status}\" -eq 0 ]]; then\n    [[ -t 1 ]] && echo -e \"${OVER}  ${icon} ${str}\"\n    return 0\n  else\n    [[ ! -t 1 ]] && local OVER=\"\"\n    echo -e \"${OVER}  ${CROSS} ${output}\"\n    return 1\n  fi\n}\n\npiholeEnable() {\n  if [[ \"${2}\" == \"-h\" ]] || [[ \"${2}\" == \"--help\" ]]; then\n    echo \"Usage: pihole disable [time]\nExample: 'pihole disable', or 'pihole disable 5m'\nDisable Pi-hole subsystems\n\nTime:\n  #s                  Disable Pi-hole functionality for # second(s)\n  #m                  Disable Pi-hole functionality for # minute(s)\"\n    exit 0\n\n  elif [[ \"${1}\" == \"0\" ]]; then\n    # Disable Pi-hole\n    if grep -cq \"BLOCKING_ENABLED=false\" \"${setupVars}\"; then\n      echo -e \"  ${INFO} Blocking already disabled, nothing to do\"\n      exit 0\n    fi\n    if [[ $# > 1 ]]; then\n      local error=false\n      if [[ \"${2}\" == *\"s\" ]]; then\n        tt=${2%\"s\"}\n        if [[ \"${tt}\" =~ ^-?[0-9]+$ ]];then\n          local str=\"Disabling blocking for ${tt} seconds\"\n          echo -e \"  ${INFO} ${str}...\"\n          local str=\"Blocking will be re-enabled in ${tt} seconds\"\n          nohup \"${PI_HOLE_SCRIPT_DIR}\"/pihole-reenable.sh ${tt} </dev/null &>/dev/null &\n        else\n          local error=true\n        fi\n      elif [[ \"${2}\" == *\"m\" ]]; then\n        tt=${2%\"m\"}\n          if [[ \"${tt}\" =~ ^-?[0-9]+$ ]];then\n          local str=\"Disabling blocking for ${tt} minutes\"\n          echo -e \"  ${INFO} ${str}...\"\n          local str=\"Blocking will be re-enabled in ${tt} minutes\"\n          tt=$((${tt}*60))\n          nohup \"${PI_HOLE_SCRIPT_DIR}\"/pihole-reenable.sh ${tt} </dev/null &>/dev/null &\n        else\n          local error=true\n        fi\n      elif [[ -n \"${2}\" ]]; then\n        local error=true\n      else\n        echo -e \"  ${INFO} Disabling blocking\"\n      fi\n\n      if [[ ${error} == true ]];then\n        echo -e \"  ${COL_LIGHT_RED}Unknown format for delayed reactivation of the blocking!${COL_NC}\"\n        echo -e \"  Try 'pihole disable --help' for more information.\"\n        exit 1\n      fi\n\n      local str=\"Pi-hole Disabled\"\n      addOrEditKeyValPair \"${setupVars}\" \"BLOCKING_ENABLED\" \"false\"\n    fi\n  else\n    # Enable Pi-hole\n    killall -q pihole-reenable\n    if grep -cq \"BLOCKING_ENABLED=true\" \"${setupVars}\"; then\n      echo -e \"  ${INFO} Blocking already enabled, nothing to do\"\n      exit 0\n    fi\n    echo -e \"  ${INFO} Enabling blocking\"\n    local str=\"Pi-hole Enabled\"\n\n    addOrEditKeyValPair \"${setupVars}\" \"BLOCKING_ENABLED\" \"true\"\n  fi\n\n  restartDNS reload-lists\n\n  echo -e \"${OVER}  ${TICK} ${str}\"\n}\n\npiholeLogging() {\n  shift\n  if [[ \"${1}\" == \"-h\" ]] || [[ \"${1}\" == \"--help\" ]]; then\n    echo \"Usage: pihole logging [options]\nExample: 'pihole logging on'\nSpecify whether the Pi-hole log should be used\n\nOptions:\n  on                  Enable the Pi-hole log at /var/log/pihole/pihole.log\n  off                 Disable and flush the Pi-hole log at /var/log/pihole/pihole.log\n  off noflush         Disable the Pi-hole log at /var/log/pihole/pihole.log\"\n    exit 0\n  elif [[ \"${1}\" == \"off\" ]]; then\n    # Disable logging\n    removeKey /etc/dnsmasq.d/01-pihole.conf \"log-queries\"\n    addOrEditKeyValPair \"${setupVars}\" \"QUERY_LOGGING\" \"false\"\n    if [[ \"${2}\" != \"noflush\" ]]; then\n      # Flush logs\n      \"${PI_HOLE_BIN_DIR}\"/pihole -f\n    fi\n    echo -e \"  ${INFO} Disabling logging...\"\n    local str=\"Logging has been disabled!\"\n  elif [[ \"${1}\" == \"on\" ]]; then\n    # Enable logging\n    addKey /etc/dnsmasq.d/01-pihole.conf \"log-queries\"\n    addOrEditKeyValPair \"${setupVars}\" \"QUERY_LOGGING\" \"true\"\n    echo -e \"  ${INFO} Enabling logging...\"\n    local str=\"Logging has been enabled!\"\n  else\n    echo -e \"  ${COL_LIGHT_RED}Invalid option${COL_NC}\n  Try 'pihole logging --help' for more information.\"\n    exit 1\n  fi\n  restartDNS\n  echo -e \"${OVER}  ${TICK} ${str}\"\n}\n\nanalyze_ports() {\n  local lv4 lv6 port=${1}\n  # FTL is listening at least on at least one port when this\n  # function is getting called\n  # Check individual address family/protocol combinations\n  # For a healthy Pi-hole, they should all be up (nothing printed)\n  lv4=\"$(ss --ipv4 --listening --numeric --tcp --udp src :${port})\"\n  if grep -q \"udp \" <<< \"${lv4}\"; then\n      echo -e \"     ${TICK} UDP (IPv4)\"\n  else\n      echo -e \"     ${CROSS} UDP (IPv4)\"\n  fi\n  if grep -q \"tcp \" <<< \"${lv4}\"; then\n      echo -e \"     ${TICK} TCP (IPv4)\"\n  else\n      echo -e \"     ${CROSS} TCP (IPv4)\"\n  fi\n  lv6=\"$(ss --ipv6 --listening --numeric --tcp --udp src :${port})\"\n  if grep -q \"udp \" <<< \"${lv6}\"; then\n      echo -e \"     ${TICK} UDP (IPv6)\"\n  else\n      echo -e \"     ${CROSS} UDP (IPv6)\"\n  fi\n  if grep -q \"tcp \" <<< \"${lv6}\"; then\n      echo -e \"     ${TICK} TCP (IPv6)\"\n  else\n      echo -e \"     ${CROSS} TCP (IPv6)\"\n  fi\n  echo \"\"\n}\n\nstatusFunc() {\n    # Determine if there is pihole-FTL service is listening\n    local pid port ftl_api_port ftl_pid_file\n\n    ftl_pid_file=\"$(getFTLPIDFile)\"\n\n    pid=\"$(getFTLPID ${ftl_pid_file})\"\n\n    ftl_api_port=\"$(getFTLAPIPort)\"\n    if [[ \"$pid\" -eq \"-1\" ]]; then\n        case \"${1}\" in\n            \"web\") echo \"-1\";;\n            *) echo -e \"  ${CROSS} DNS service is NOT running\";;\n        esac\n        return 0\n    else\n        #get the DNS port pihole-FTL is listening on by using FTL's telnet API\n        port=\"$(echo \">dns-port >quit\" | nc 127.0.0.1 \"$ftl_api_port\")\"\n        if [[ \"${port}\" == \"0\" ]]; then\n            case \"${1}\" in\n                \"web\") echo \"-1\";;\n                *) echo -e \"  ${CROSS} DNS service is NOT listening\";;\n            esac\n            return 0\n        else\n            if [[ \"${1}\" != \"web\" ]]; then\n                echo -e \"  ${TICK} FTL is listening on port ${port}\"\n                analyze_ports \"${port}\"\n            fi\n        fi\n    fi\n\n  # Determine if Pi-hole's blocking is enabled\n  if grep -q \"BLOCKING_ENABLED=false\" /etc/pihole/setupVars.conf; then\n    # A config is commented out\n    case \"${1}\" in\n      \"web\") echo 0;;\n      *) echo -e \"  ${CROSS} Pi-hole blocking is disabled\";;\n    esac\n  elif grep -q \"BLOCKING_ENABLED=true\" /etc/pihole/setupVars.conf;  then\n    # Configs are set\n    case \"${1}\" in\n      \"web\") echo \"$port\";;\n      *) echo -e \"  ${TICK} Pi-hole blocking is enabled\";;\n    esac\n  else\n    # No configs were found\n    case \"${1}\" in\n      \"web\") echo -2;;\n      *) echo -e \"  ${INFO} Pi-hole blocking will be enabled\";;\n    esac\n    # Enable blocking\n    \"${PI_HOLE_BIN_DIR}\"/pihole enable\n  fi\nexit 0\n}\n\ntailFunc() {\n  # Warn user if Pi-hole's logging is disabled\n  local logging_enabled=$(grep -c \"^log-queries\" /etc/dnsmasq.d/01-pihole.conf)\n  if [[ \"${logging_enabled}\" == \"0\" ]]; then\n    # No \"log-queries\" lines are found.\n    # Commented out lines (such as \"#log-queries\") are ignored\n    echo \"  ${CROSS} Warning: Query logging is disabled\"\n  fi\n  echo -e \"  ${INFO} Press Ctrl-C to exit\"\n\n  # Strip date from each line\n  # Color blocklist/blacklist/wildcard entries as red\n  # Color A/AAAA/DHCP strings as white\n  # Color everything else as gray\n  tail -f /var/log/pihole/pihole.log | grep --line-buffered \"${1}\" | sed -E \\\n    -e \"s,($(date +'%b %d ')| dnsmasq\\[[0-9]*\\]),,g\" \\\n    -e \"s,(.*(blacklisted |gravity blocked ).*),${COL_RED}&${COL_NC},\" \\\n    -e \"s,.*(query\\\\[A|DHCP).*,${COL_NC}&${COL_NC},\" \\\n    -e \"s,.*,${COL_GRAY}&${COL_NC},\"\n  exit 0\n}\n\npiholeCheckoutFunc() {\n  if [[ \"$2\" == \"-h\" ]] || [[ \"$2\" == \"--help\" ]]; then\n    echo \"Usage: pihole checkout [repo] [branch]\nExample: 'pihole checkout master' or 'pihole checkout core dev'\nSwitch Pi-hole subsystems to a different GitHub branch\n\nRepositories:\n  core [branch]       Change the branch of Pi-hole's core subsystem\n  web [branch]        Change the branch of Web Interface subsystem\n  ftl [branch]        Change the branch of Pi-hole's FTL subsystem\n\nBranches:\n  master              Update subsystems to the latest stable release\n  dev                 Update subsystems to the latest development release\n  branchname          Update subsystems to the specified branchname\"\n    exit 0\n  fi\n\n  source \"${PI_HOLE_SCRIPT_DIR}\"/piholeCheckout.sh\n  shift\n  checkout \"$@\"\n}\n\ntricorderFunc() {\n  local tricorder_token\n  if [[ ! -p \"/dev/stdin\" ]]; then\n    echo -e \"  ${INFO} Please do not call Tricorder directly\"\n    exit 1\n  fi\n\n  tricorder_token=$(curl --silent --fail --show-error --upload-file \"-\" https://tricorder.pi-hole.net/upload < /dev/stdin 2>&1)\n  if [[ \"${tricorder_token}\" != \"https://tricorder.pi-hole.net/\"* ]]; then\n      echo -e \"${CROSS} uploading failed, contact Pi-hole support for assistance.\"\n      # Log curl error (if available)\n      if [ -n \"${tricorder_token}\" ]; then\n          echo -e \"${INFO} Error message: ${COL_RED}${tricorder_token}${COL_NC}\\\\n\"\n          tricorder_token=\"\"\n      fi\n      exit 1\n  fi\n  echo \"Upload successful, your token is: ${COL_GREEN}${tricorder_token}${COL_NC}\"\n  exit 0\n}\n\nupdateCheckFunc() {\n  \"${PI_HOLE_SCRIPT_DIR}\"/updatecheck.sh \"$@\"\n  exit 0\n}\n\nunsupportedFunc(){\n  echo \"Function not supported in Docker images\"\n  exit 0\n}\n\nhelpFunc() {\n  echo \"Usage: pihole [options]\nExample: 'pihole -w -h'\nAdd '-h' after specific commands for more information on usage\n\nWhitelist/Blacklist Options:\n  -w, whitelist       Whitelist domain(s)\n  -b, blacklist       Blacklist domain(s)\n  --regex, regex      Regex blacklist domains(s)\n  --white-regex       Regex whitelist domains(s)\n  --wild, wildcard    Wildcard blacklist domain(s)\n  --white-wild        Wildcard whitelist domain(s)\n                        Add '-h' for more info on whitelist/blacklist usage\n\nDebugging Options:\n  -d, debug           Start a debugging session\n                        Add '-c' or '--check-database' to include a Pi-hole database integrity check\n                        Add '-a' to automatically upload the log to tricorder.pi-hole.net\n  -f, flush           Flush the Pi-hole log\n  -r, reconfigure     Reconfigure or Repair Pi-hole subsystems\n  -t, tail [arg]      View the live output of the Pi-hole log.\n                      Add an optional argument to filter the log\n                      (regular expressions are supported)\n\n\nOptions:\n  -a, admin           Web interface options\n                        Add '-h' for more info on Web Interface usage\n  -c, chronometer     Calculates stats and displays to an LCD\n                        Add '-h' for more info on chronometer usage\n  -g, updateGravity   Update the list of ad-serving domains\n  -h, --help, help    Show this help dialog\n  -l, logging         Specify whether the Pi-hole log should be used\n                        Add '-h' for more info on logging usage\n  -q, query           Query the adlists for a specified domain\n                        Add '-h' for more info on query usage\n  -up, updatePihole   Update Pi-hole subsystems\n                        Add '--check-only' to exit script before update is performed.\n  -v, version         Show installed versions of Pi-hole, Web Interface & FTL\n                        Add '-h' for more info on version usage\n  uninstall           Uninstall Pi-hole from your system\n  status              Display the running status of Pi-hole subsystems\n  enable              Enable Pi-hole subsystems\n  disable             Disable Pi-hole subsystems\n                        Add '-h' for more info on disable usage\n  restartdns          Full restart Pi-hole subsystems\n                        Add 'reload' to update the lists and flush the cache without restarting the DNS server\n                        Add 'reload-lists' to only update the lists WITHOUT flushing the cache or restarting the DNS server\n  checkout            Switch Pi-hole subsystems to a different GitHub branch\n                        Add '-h' for more info on checkout usage\n  arpflush            Flush information stored in Pi-hole's network tables\";\n  exit 0\n}\n\nif [[ $# = 0 ]]; then\n  helpFunc\nfi\n\n# functions that do not require sudo power\ncase \"${1}\" in\n  \"-h\" | \"help\" | \"--help\"      ) helpFunc;;\n  \"-v\" | \"version\"              ) versionFunc \"$@\";;\n  \"-c\" | \"chronometer\"          ) chronometerFunc \"$@\";;\n  \"-q\" | \"query\"                ) queryFunc \"$@\";;\n  \"status\"                      ) statusFunc \"$2\";;\n\n  \"tricorder\"                   ) tricorderFunc;;\n\n  # we need to add all arguments that require sudo power to not trigger the * argument\n  \"-w\" | \"whitelist\"            ) ;;\n  \"-b\" | \"blacklist\"            ) ;;\n  \"--wild\" | \"wildcard\"         ) ;;\n  \"--regex\" | \"regex\"           ) ;;\n  \"--white-regex\" | \"white-regex\" ) ;;\n  \"--white-wild\" | \"white-wild\"   ) ;;\n  \"-f\" | \"flush\"                ) ;;\n  \"-up\" | \"updatePihole\"        ) ;;\n  \"-r\"  | \"reconfigure\"         ) ;;\n  \"-g\" | \"updateGravity\"        ) ;;\n  \"-l\" | \"logging\"              ) ;;\n  \"uninstall\"                   ) ;;\n  \"enable\"                      ) ;;\n  \"disable\"                     ) ;;\n  \"-d\" | \"debug\"                ) ;;\n  \"restartdns\"                  ) ;;\n  \"-a\" | \"admin\"                ) ;;\n  \"checkout\"                    ) ;;\n  \"updatechecker\"               ) ;;\n  \"arpflush\"                    ) ;;\n  \"-t\" | \"tail\"                 ) ;;\n  *                             ) helpFunc;;\nesac\n\n# Must be root to use this tool\nif [[ ! $EUID -eq 0 ]];then\n  if [[ -x \"$(command -v sudo)\" ]]; then\n    exec sudo bash \"$0\" \"$@\"\n    exit $?\n  else\n    echo -e \"  ${CROSS} sudo is needed to run pihole commands.  Please run this script as root or install sudo.\"\n    exit 1\n  fi\nfi\n\n# Handle redirecting to specific functions based on arguments\ncase \"${1}\" in\n  \"-w\" | \"whitelist\"            ) listFunc \"$@\";;\n  \"-b\" | \"blacklist\"            ) listFunc \"$@\";;\n  \"--wild\" | \"wildcard\"         ) listFunc \"$@\";;\n  \"--regex\" | \"regex\"           ) listFunc \"$@\";;\n  \"--white-regex\" | \"white-regex\" ) listFunc \"$@\";;\n  \"--white-wild\" | \"white-wild\"   ) listFunc \"$@\";;\n  \"-d\" | \"debug\"                ) debugFunc \"$@\";;\n  \"-f\" | \"flush\"                ) flushFunc \"$@\";;\n  \"-up\" | \"updatePihole\"        ) updatePiholeFunc \"$@\";;\n  \"-r\"  | \"reconfigure\"         ) reconfigurePiholeFunc;;\n  \"-g\" | \"updateGravity\"        ) updateGravityFunc \"$@\";;\n  \"-l\" | \"logging\"              ) piholeLogging \"$@\";;\n  \"uninstall\"                   ) uninstallFunc;;\n  \"enable\"                      ) piholeEnable 1;;\n  \"disable\"                     ) piholeEnable 0 \"$2\";;\n  \"restartdns\"                  ) restartDNS \"$2\";;\n  \"-a\" | \"admin\"                ) webpageFunc \"$@\";;\n  \"checkout\"                    ) piholeCheckoutFunc \"$@\";;\n  \"updatechecker\"               ) shift; updateCheckFunc \"$@\";;\n  \"arpflush\"                    ) arpFunc \"$@\";;\n  \"-t\" | \"tail\"                 ) tailFunc \"$2\";;\nesac\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}