{
  "metadata": {
    "timestamp": 1736568578382,
    "page": 623,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Grokzen/docker-redis-cluster",
      "stars": 1477,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.474609375,
          "content": "# This travis run should only test and build the latest version of all major redis-server versions\nlanguage: python\npython:\n  - \"3.10\"\nservices:\n  - docker\nenv:\n  # - REDIS_VERSION=3.0.7\n  # - REDIS_VERSION=3.2.13\n  # - REDIS_VERSION=4.0.14\n  # - REDIS_VERSION=5.0.12\n  # - REDIS_VERSION=6.0.20\n  - REDIS_VERSION=6.2.14\n  - REDIS_VERSION=7.0.15\n  - REDIS_VERSION=7.2.5\n  - REDIS_VERSION=7.4-rc1\nscript:\n  docker build --build-arg redis_version=$REDIS_VERSION -t grokzen/redis-cluster .\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 1.15625,
          "content": "## 2024-06-25\n\n* Added 7.2.x releases and published docker images\n* added 7.4-rc1 release and published\n* Updated all older generations of images\n* New base image that contains more updated patches etc\n\n## 2022-12-18\n\n* Added redis 7.0.x releases and published docker images\n* Dropped redis 5.0.x releases and unpublished docker images\n* Added `invoke list` command to show all possible targets you can build against\n\n## 2021-04-13\n\n* Dropped the availability of redis-server major versions 3.0, 3.2, 4.0 from docker.hub\n\n## 2021-03-28\n\n* Added versions 5.0.12, 6.0.12, 6.2.1\n* Updated latest to 6.2.1\n\n## 2021-02-28\n\n* Rebuilt most of the build commands from Makefile into py-invoke script\n\n## 2021-02-27\n\n* Added versions 5.0.11, 6.0.11 & 6.2.0\n* Updated latest to 6.2.0\n\n## 2021-01-17\n\n* Updated README with documentation regarding new github discussions feature and how to use it.\n* Add new github issues template to make it easier to request features/help/support\n* Add release 5.0.10\n* Add support for building major version 6.2 and their RC releases\n* Add release 6.0.10\n* Updated latest to 6.0.10\n\n## 2020-11-24\n\n* Added support for IPv6 for cluster and stand-alone instances\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.595703125,
          "content": "# Build based on redis:7.2.5 from \"2024-05-22T23:17:59Z\"\nFROM redis@sha256:e422889e156ebea83856b6ff973bfe0c86bce867d80def228044eeecf925592b\n\nLABEL maintainer=\"Johan Andersson <Grokzen@gmail.com>\"\n\n# Some Environment Variables\nENV HOME /root\nENV DEBIAN_FRONTEND noninteractive\n\n# Install system dependencies\nRUN apt-get update -qq && \\\n    apt-get install --no-install-recommends -yqq \\\n      net-tools supervisor ruby rubygems locales gettext-base wget gcc make g++ build-essential libc6-dev tcl && \\\n    apt-get clean -yqq\n\n# # Ensure UTF-8 lang and locale\nRUN locale-gen en_US.UTF-8\nENV LANG       en_US.UTF-8\nENV LC_ALL     en_US.UTF-8\n\n# Necessary for gem installs due to SHA1 being weak and old cert being revoked\nENV SSL_CERT_FILE=/usr/local/etc/openssl/cert.pem\n\nRUN gem install redis -v 4.1.3\n\n# This will always build the latest release/commit in the 7.2 branch\nARG redis_version=7.2\n\nRUN wget -qO redis.tar.gz https://github.com/redis/redis/tarball/${redis_version} \\\n    && tar xfz redis.tar.gz -C / \\\n    && mv /redis-* /redis\n\nRUN (cd /redis && make)\n\nRUN mkdir /redis-conf && mkdir /redis-data\n\nCOPY redis-cluster.tmpl /redis-conf/redis-cluster.tmpl\nCOPY redis.tmpl         /redis-conf/redis.tmpl\nCOPY sentinel.tmpl      /redis-conf/sentinel.tmpl\n\n# Add startup script\nCOPY docker-entrypoint.sh /docker-entrypoint.sh\n\n# Add script that generates supervisor conf file based on environment variables\nCOPY generate-supervisor-conf.sh /generate-supervisor-conf.sh\n\nRUN chmod 755 /docker-entrypoint.sh\n\nEXPOSE 7000 7001 7002 7003 7004 7005 7006 7007 5000 5001 5002\n\nENTRYPOINT [\"/docker-entrypoint.sh\"]\nCMD [\"redis-cluster\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT LICENSE\n\nCopyright 2014-2024 Johan Andersson\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.724609375,
          "content": "help:\n\t@echo \"Please use 'make <target>' where <target> is one of\"\n\t@echo \"  build         builds docker-compose containers\"\n\t@echo \"  up            starts docker-compose containers\"\n\t@echo \"  down          stops the running docker-compose containers\"\n\t@echo \"  rebuild       rebuilds the image from scratch without using any cached layers\"\n\t@echo \"  bash          starts bash inside a running container.\"\n\t@echo \"  cli           run redis-cli inside the container on the server with port 7000\"\n\nbuild:\n\tdocker-compose build\n\nup:\n\tdocker-compose up\n\ndown:\n\tdocker-compose stop\n\nrebuild:\n\tdocker-compose build --no-cache\n\nbash:\n\tdocker-compose exec redis-cluster /bin/bash\n\ncli:\n\tdocker-compose exec redis-cluster /redis/src/redis-cli -p 7000\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.369140625,
          "content": "# docker-redis-cluster\n\n[![Docker Stars](https://img.shields.io/docker/stars/grokzen/redis-cluster.svg)](https://hub.docker.com/r/grokzen/redis-cluster/)\n[![Docker Pulls](https://img.shields.io/docker/pulls/grokzen/redis-cluster.svg)](https://hub.docker.com/r/grokzen/redis-cluster/)\n[![Build Status](https://travis-ci.org/Grokzen/docker-redis-cluster.svg?branch=master)](https://travis-ci.org/Grokzen/docker-redis-cluster)\n\nDocker image with redis built and installed from source and a cluster is built.\n\nTo find all redis-server releases see them here https://github.com/antirez/redis/releases\n\n\n## Discussions, help, guides\n\nGithub have recently released their `Discussions` feature into beta for more repositories across the github space. This feature is enabled on this repo since a while back.\n\nBecuase we now have this feature, the issues feature will NOT be a place where you can now ask general questions or need simple help with this repo and what it provides.\n\nWhat can you expect to find in there?\n\n - A place where you can freely ask any question regarding this repo.\n - Ask questions like `how do i do X?`\n - General help with problems with this repo\n - Guides written by me or any other contributer with useful examples and ansers to commonly asked questions and how to resolve thos problems.\n - Approved answers to questions marked and promoted by me if help is provided by the community regarding some questions\n\n\n## What this repo and container IS\n\nThis repo exists as a resource to make it quick and simple to get a redis cluster up and running with no fuzz or issues with mininal effort. The primary use for this container is to get a cluster up and running in no time that you can use for demo/presentation/development. It is not intended or built for anything else.\n\nI also aim to have every single release of redis that supports a cluster available for use so you can run the exact version you want.\n\nI personally use this to develop redis cluster client code https://github.com/Grokzen/redis-py-cluster\n\n\n## What this repo and container IS NOT\n\nThis container that i have built is not supposed to be some kind of production container or one that is used within any environment other than running locally on your machine. It is not ment to be run on kubernetes or in any other prod/stage/test/dev environment as a fully working commponent in that environment. If that works for you and your use-case then awesome. But this container will not change to fit any other primary solution than to be used locally on your machine.\n\nIf you are looking for something else or some production quality or kubernetes compatible solution then you are looking in the wrong repo. There is other projects or forks of this repo that is compatible for that situation/solution.\n\nFor all other purposes other than what has been stated you are free to fork and/or rebuild this container using it as a template for what you need.\n\n\n## Redis major version support and docker.hub availability\n\nStarting from `2020-04-01` this repo will only support and make available on docker.hub all minor versions in the latest 3 major versions of redis-server software. At this date the tags on docker.hub for major versions 3.0, 3.2 & 4.0, 5.0 will be removed and only 6.0, 6.2, 7.0 will be available to download. This do not mean that you will not be able to build your desired version from this repo but there is no guarantees or support or hacks that will support this out of the box.\n\nMoving forward when a new major release is shipped out, at the first minor release X.Y.1 version of the next major release, all tags from the last supported major version will be removed from docker.hub. This will give some time for the community to adapt and move forward in the versions before the older major version is removed from docker.hub.\n\nThis major version schema support follows the same major version support that redis itself use.\n\n\n## Redis instances inside the container\n\nThe cluster is 6 redis instances running with 3 master & 3 slaves, one slave for each master. They run on ports 7000 to 7005.\n\nIf the flag `-e \"SENTINEL=true\"` is passed there are 3 Sentinel nodes running on ports 5000 to 5002 matching cluster's master instances.\n\n\nThis image requires at least `Docker` version 1.10 but the latest version is recommended.\n\n\n\n# Important for Mac users\n\nIf you are using this container to run a redis cluster on your mac computer, then you need to configure the container to use another IP address for cluster discovery as it can't use the default discovery IP that is hardcoded into the container.\n\nIf you are using the docker-compose file to build the container, then you must export a environment variable on your machine before building the container.\n\n```\n# This will make redis do cluster discovery and bind all nodes to ip 127.0.0.1 internally\n\nexport REDIS_CLUSTER_IP=0.0.0.0\n```\n\nIf you are downloading the container from dockerhub, you must add the internal IP environment variable to your `docker run` command.\n\n```\ndocker run -e \"IP=0.0.0.0\" -p 7000-7005:7000-7005 grokzen/redis-cluster:latest\n```\n\n\n\n# Usage\n\nThis git repo is using `invoke` to pull, build, push docker images. You can use it to build your own images if you like.\n\nThe invoke scripts in this repo is written only for python 3.7 and above\n\nInstall `invoke` with `pip install invoke`.\n\nThis script will run `N num of cpu - 1` parralell tasks based on your version input.\n\nTo see available commands run `invoke -l` in the root folder of this repo. Example\n\n```\n(tmp-615229a94c330b9) ➜  docker-redis-cluster git:(invoke) ✗ invoke -l\n\"Configured multiprocess pool size: 3\nAvailable tasks:\n\n  build\n  list\n  pull\n  push\n```\n\nEach command is only taking one required positional argument `version`. Example:\n\n```\n(tmp-615229a94c330b9) ➜  docker-redis-cluster git:(invoke) ✗ invoke build 7.0\n...\n```\n\nand it will run the build step on all versions that starts with 6.0.\n\nThe only other optional usefull argument is `--cpu=N` and it will set how many paralell processes will be used. By default you will use n - 1 number of cpu cores that is available on your system. Commands like pull and push aare not very cpu intensive so using a higher number here might speed things up if you have good network bandwidth.\n\n\n## Makefile (legacy)\n\nMakefile still has a few docker-compose commands that can be used\n\nTo build your own image run:\n\n    make build\n\nTo run the container run:\n\n    make up\n\nTo stop the container run:\n\n    make down\n\nTo connect to your cluster you can use the redis-cli tool:\n\n    redis-cli -c -p 7000\n\nOr the built redis-cli tool inside the container that will connect to the cluster inside the container\n\n    make cli\n\n\n## Include sentinel instances\n\nSentinel instances is not enabled by default.\n\nIf running with plain docker send in `-e SENTINEL=true`.\n\nWhen running with docker-compose set the environment variable on your system `REDIS_USE_SENTINEL=true` and start your container.\n\n    version: '2'\n    services:\n      redis-cluster:\n        ...\n      environment:\n        SENTINEL: 'true'\n\n\n## Change number of nodes\n\nBe default, it is going to launch 3 masters with 1 slave per master. This is configurable through a number of environment variables:\n\n| Environment variable | Default |\n| -------------------- |--------:|\n| `INITIAL_PORT`       |    7000 |\n| `MASTERS`            |       3 |\n| `SLAVES_PER_MASTER`  |       1 | \n\nTherefore, the total number of nodes (`NODES`) is going to be `$MASTERS * ( $SLAVES_PER_MASTER  + 1 )` and ports are going to range from `$INITIAL_PORT` to `$INITIAL_PORT + NODES - 1`.\n\nAt the docker-compose provided by this repository, ports 7000-7050 are already mapped to the hosts'. Either if you need more than 50 nodes in total or if you need to change the initial port number, you should override those values.\n\nAlso note that the number of sentinels (if enabled) is the same as the number of masters. The docker-compose file already maps ports 5000-5010 by default. You should also override those values if you have more than 10 masters.\n\n    version: '2'\n    services:\n      redis-cluster:\n        ...\n      environment:\n        INITIAL_PORT: 9000,\n        MASTERS: 2,\n        SLAVES_PER_MASTER: 2\n\n\n## IPv6 support\n\nBy default, redis instances will bind and accept requests from any IPv4 network.\nThis is configurable by an environment variable that specifies which address a redis instance will bind to.\nBy using the IPv6 variant `::` as counterpart to IPv4s `0.0.0.0` an IPv6 cluster can be created.\n\n| Environment variable | Default |\n| -------------------- | ------: |\n| `BIND_ADDRESS`       | 0.0.0.0 |\n\nNote that Docker also needs to be [configured](https://docs.docker.com/config/daemon/ipv6/) for IPv6 support.\nUnfortunately Docker does not handle IPv6 NAT so, when acceptable, `--network host` can be used.\n\n    # Example using plain docker\n    docker run -e \"IP=::1\" -e \"BIND_ADDRESS=::\" --network host grokzen/redis-cluster:latest\n\n\n## Build alternative redis versions\n\nFor a release to be buildable it needs to be present at this url: http://download.redis.io/releases/\n\n\n### docker build\n\nTo build a different redis version use the argument `--build-arg` argument.\n\n    # Example plain docker\n    docker build --build-arg redis_version=6.0.11 -t grokzen/redis-cluster .\n\n\n### docker-compose\n\nTo build a different redis version use the `--build-arg` argument.\n\n    # Example docker-compose\n    docker-compose build --build-arg \"redis_version=6.0.11\" redis-cluster\n\n\n\n# Available tags\n\nThe following tags with pre-built images is available on `docker-hub`.\n\nLatest release in the most recent stable branch will be used as `latest` version.\n\n- latest == 7.2.5\n\nRedis 7.4-rc1 version:\n\n- 7.4-rc1\n\nRedis 7.2.x version:\n\n- 7.2.5\n- 7.2.4\n- 7.2.3\n- 7.2.2\n- 7.2.1\n- 7.2.0\n\nRedis 7.0.x version:\n\n- 7.0.15\n- 7.0.14\n- 7.0.13\n- 7.0.12\n- 7.0.11\n- 7.0.10\n- 7.0.9\n- 7.0.8\n- 7.0.7\n- 7.0.6\n- 7.0.5\n- 7.0.4\n- 7.0.3\n- 7.0.2\n- 7.0.1\n- 7.0.0\n\nRedis 6.2.x versions:\n\n- 6.2.14\n- 6.2.13\n- 6.2.12\n- 6.2.11\n- 6.2.10\n- 6.2.9\n- 6.2.8\n- 6.2.7\n- 6.2.6\n- 6.2.5\n- 6.2.4\n- 6.2.3\n- 6.2.2\n- 6.2.1\n- 6.2.0\n\nRedis 6.0.x versions:\n\n- 6.0.20\n- 6.0.19\n- 6.0.18\n- 6.0.17\n- 6.0.16\n- 6.0.15\n- 6.0.14\n- 6.0.13\n- 6.0.12\n- 6.0.11\n- 6.0.10\n- 6.0.9\n- 6.0.8\n- 6.0.7\n- 6.0.6\n- 6.0.5\n- 6.0.4\n- 6.0.3\n- 6.0.2\n- 6.0.1\n- 6.0.0\n\n\n## Unavailable major versions\n\nThe following major versions is no longer available to be downloaded from docker.hub. You can still build and run them directly from this repo.\n\n- 5.0\n- 4.0\n- 3.2\n- 3.0\n\n\n# License\n\nThis repo is using the MIT LICENSE.\n\nYou can find it in the file [LICENSE](LICENSE)\n"
        },
        {
          "name": "dev-requirements.txt",
          "type": "blob",
          "size": 0.0302734375,
          "content": "invoke>=2.0.0\nrequests>=2.28.2\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.3193359375,
          "content": "version: '2'\nservices:\n  redis-cluster:\n    environment:\n     IP: ${REDIS_CLUSTER_IP}\n     SENTINEL: ${REDIS_USE_SENTINEL}\n     STANDALONE: ${REDIS_USE_STANDALONE}\n    build:\n      context: .\n      args:\n        redis_version: '7.2.5'\n    hostname: server\n    ports:\n      - '7000-7050:7000-7050'\n      - '5000-5010:5000-5010'\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 3.138671875,
          "content": "#!/bin/sh\n\nif [ \"$1\" = 'redis-cluster' ]; then\n    # Allow passing in cluster IP by argument or environmental variable\n    IP=\"${2:-$IP}\"\n\n    if [ -z \"$IP\" ]; then # If IP is unset then discover it\n        IP=$(hostname -I)\n    fi\n\n    echo \" -- IP Before trim: '$IP'\"\n    IP=$(echo ${IP}) # trim whitespaces\n    echo \" -- IP Before split: '$IP'\"\n    IP=${IP%% *} # use the first ip\n    echo \" -- IP After trim: '$IP'\"\n\n    if [ -z \"$INITIAL_PORT\" ]; then # Default to port 7000\n      INITIAL_PORT=7000\n    fi\n\n    if [ -z \"$MASTERS\" ]; then # Default to 3 masters\n      MASTERS=3\n    fi\n\n    if [ -z \"$SLAVES_PER_MASTER\" ]; then # Default to 1 slave for each master\n      SLAVES_PER_MASTER=1\n    fi\n\n    if [ -z \"$BIND_ADDRESS\" ]; then # Default to any IPv4 address\n      BIND_ADDRESS=0.0.0.0\n    fi\n\n    max_port=$(($INITIAL_PORT + $MASTERS * ( $SLAVES_PER_MASTER  + 1 ) - 1))\n    first_standalone=$(($max_port + 1))\n    if [ \"$STANDALONE\" = \"true\" ]; then\n      STANDALONE=2\n    fi\n    if [ ! -z \"$STANDALONE\" ]; then\n      max_port=$(($max_port + $STANDALONE))\n    fi\n\n    for port in $(seq $INITIAL_PORT $max_port); do\n      mkdir -p /redis-conf/${port}\n      mkdir -p /redis-data/${port}\n\n      if [ -e /redis-data/${port}/nodes.conf ]; then\n        rm /redis-data/${port}/nodes.conf\n      fi\n\n      if [ -e /redis-data/${port}/dump.rdb ]; then\n        rm /redis-data/${port}/dump.rdb\n      fi\n\n      if [ -e /redis-data/${port}/appendonly.aof ]; then\n        rm /redis-data/${port}/appendonly.aof\n      fi\n\n      if [ \"$port\" -lt \"$first_standalone\" ]; then\n        PORT=${port} BIND_ADDRESS=${BIND_ADDRESS} envsubst < /redis-conf/redis-cluster.tmpl > /redis-conf/${port}/redis.conf\n        nodes=\"$nodes $IP:$port\"\n      else\n        PORT=${port} BIND_ADDRESS=${BIND_ADDRESS} envsubst < /redis-conf/redis.tmpl > /redis-conf/${port}/redis.conf\n      fi\n\n      if [ \"$port\" -lt $(($INITIAL_PORT + $MASTERS)) ]; then\n        if [ \"$SENTINEL\" = \"true\" ]; then\n          PORT=${port} SENTINEL_PORT=$((port - 2000)) envsubst < /redis-conf/sentinel.tmpl > /redis-conf/sentinel-${port}.conf\n          cat /redis-conf/sentinel-${port}.conf\n        fi\n      fi\n\n    done\n\n    bash /generate-supervisor-conf.sh $INITIAL_PORT $max_port > /etc/supervisor/supervisord.conf\n\n    supervisord -c /etc/supervisor/supervisord.conf\n    sleep 3\n\n    #\n    ## Check the version of redis-cli and if we run on a redis server below 5.0\n    ## If it is below 5.0 then we use the redis-trib.rb to build the cluster\n    #\n    /redis/src/redis-cli --version | grep -E \"redis-cli 3.0|redis-cli 3.2|redis-cli 4.0\"\n\n    if [ $? -eq 0 ]\n    then\n      echo \"Using old redis-trib.rb to create the cluster\"\n      echo \"yes\" | eval ruby /redis/src/redis-trib.rb create --replicas \"$SLAVES_PER_MASTER\" \"$nodes\"\n    else\n      echo \"Using redis-cli to create the cluster\"\n      echo \"yes\" | eval /redis/src/redis-cli --cluster create --cluster-replicas \"$SLAVES_PER_MASTER\" \"$nodes\"\n    fi\n\n    if [ \"$SENTINEL\" = \"true\" ]; then\n      for port in $(seq $INITIAL_PORT $(($INITIAL_PORT + $MASTERS))); do\n        redis-sentinel /redis-conf/sentinel-${port}.conf &\n      done\n    fi\n\n    tail -f /var/log/supervisor/redis*.log\nelse\n  exec \"$@\"\nfi\n"
        },
        {
          "name": "generate-supervisor-conf.sh",
          "type": "blob",
          "size": 1.556640625,
          "content": "initial_port=\"$1\"\nmax_port=\"$2\"\n\nprogram_entry_template ()\n{\n  local count=$1\n  local port=$2\n  echo \"\n\n[program:redis-$count]\ncommand=/redis/src/redis-server /redis-conf/$port/redis.conf\nstdout_logfile=/var/log/supervisor/%(program_name)s.log\nstderr_logfile=/var/log/supervisor/%(program_name)s.log\nautorestart=true\n\"\n}\n\nresult_str=\"\n[unix_http_server]\nfile=/tmp/supervisor.sock                       ; path to your socket file\n\n[supervisord]\nlogfile=/supervisord.log                        ; supervisord log file\nlogfile_maxbytes=50MB                           ; maximum size of logfile before rotation\nlogfile_backups=10                              ; number of backed up logfiles\nloglevel=error                                  ; info, debug, warn, trace\npidfile=/var/run/supervisord.pid                ; pidfile location\nnodaemon=false                                  ; run supervisord as a daemon\nminfds=1024                                     ; number of startup file descriptors\nminprocs=200                                    ; number of process descriptors\nuser=root                                       ; default user\nchildlogdir=/                                   ; where child log files will live\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface\n\n[supervisorctl]\nserverurl=unix:///tmp/supervisor.sock         ; use a unix:// URL  for a unix socket\n\"\n\ncount=1\nfor port in `seq $initial_port $max_port`; do\n  result_str=\"$result_str$(program_entry_template $count $port)\"\n  count=$((count + 1))\ndone\n\necho \"$result_str\"\n"
        },
        {
          "name": "redis-cluster.tmpl",
          "type": "blob",
          "size": 0.1640625,
          "content": "bind ${BIND_ADDRESS}\nport ${PORT}\ncluster-enabled yes\ncluster-config-file nodes.conf\ncluster-node-timeout 5000\nappendonly yes\ndir /redis-data/${PORT}\nprotected-mode no\n"
        },
        {
          "name": "redis.tmpl",
          "type": "blob",
          "size": 0.0888671875,
          "content": "bind ${BIND_ADDRESS}\nport ${PORT}\nappendonly yes\ndir /redis-data/${PORT}\nprotected-mode no\n"
        },
        {
          "name": "sentinel.tmpl",
          "type": "blob",
          "size": 0.2138671875,
          "content": "port ${SENTINEL_PORT}\nsentinel monitor sentinel${PORT} 127.0.0.1 ${PORT} 2\nsentinel down-after-milliseconds sentinel${PORT} 5000\nsentinel failover-timeout sentinel${PORT} 60000\nsentinel parallel-syncs sentinel${PORT} 1\n"
        },
        {
          "name": "tasks.py",
          "type": "blob",
          "size": 4.0458984375,
          "content": "import multiprocessing\nimport requests\n\nfrom multiprocessing import Pool\nfrom invoke import task\n\n\nlatest_version_string = \"7.2.5\"\n\n# Unpublished versions\nversion_config_mapping = []\nversion_config_mapping += [f\"3.0.{i}\" for i in range(0, 8)]\nversion_config_mapping += [f\"3.2.{i}\" for i in range(0, 14)]\nversion_config_mapping += [f\"4.0.{i}\" for i in range(0, 15)]\nversion_config_mapping += [f\"5.0.{i}\" for i in range(0, 13)]\nversion_config_mapping += [f\"6.0.{i}\" for i in range(0, 21)]\n\n# Published versions\nversion_config_mapping += [f\"6.2.{i}\" for i in range(0, 15)]\nversion_config_mapping += [f\"7.0.{i}\" for i in range(0, 16)]\nversion_config_mapping += [f\"7.2.{i}\" for i in range(0, 6)]\nversion_config_mapping += [\"7.4-rc1\"]\n\n\ndef version_name_to_version(version):\n    \"\"\"\n    Helper method that returns correct versions if you specify either\n     - all\n     - latest\n\n    or it will filter your chosen version based on what you inputed as version argument\n    \"\"\"\n    if version == \"all\":\n        return version_config_mapping\n    elif version == \"latest\":\n        return [latest_version_string]\n    else:\n        return filter_versions(version)\n\n\ndef get_pool_size(cpu_from_cli):\n    if cpu_from_cli:\n        pool_size = int(cpu_from_cli)\n    else:\n        pool_size = multiprocessing.cpu_count() - 1\n\n    print(f\"Configured multiprocess pool size: {pool_size}\")\n    return pool_size\n\n\ndef filter_versions(desired_version):\n    result = []\n\n    for version in version_config_mapping:\n        if version.startswith(desired_version):\n            result.append(version)\n\n    return result\n\n\ndef _docker_pull(config):\n    \"\"\"\n    Internal multiprocess method to run docker pull command\n    \"\"\"\n    c, version = config\n    print(f\" -- Starting docker pull for version : {version}\")\n    pull_command = f\"docker pull grokzen/redis-cluster:{version}\"\n    c.run(pull_command)\n\n\ndef _docker_build(config):\n    \"\"\"\n    Internal multiprocess method to run docker build command\n    \"\"\"\n    c, version = config\n    print(f\" -- Starting docker build for version : {version}\")\n    build_command = f\"docker build --build-arg redis_version={version} -t grokzen/redis-cluster:{version} .\"\n    c.run(build_command)\n\n\ndef _docker_push(config):\n    \"\"\"\n    Internal multiprocess method to run docker push command\n    \"\"\"\n    c, version = config\n    print(f\" -- Starting docker push for version : {version}\")\n    build_command = f\"docker push grokzen/redis-cluster:{version}\"\n    c.run(build_command)\n\n\n@task\ndef pull(c, version, cpu=None):\n    print(f\" -- Docker pull version docker-hub : {version}\")\n\n    pool = Pool(get_pool_size(cpu))\n    pool.map(\n        _docker_pull,\n        [\n            [c, version]\n            for version in version_name_to_version(version)\n        ],\n    )\n\n\n@task\ndef build(c, version, cpu=None):\n    print(f\" -- Docker building version : {version}\")\n\n    pool = Pool(get_pool_size(cpu))\n    pool.map(\n        _docker_build,\n        [\n            [c, version]\n            for version in version_name_to_version(version)\n        ],\n    )\n\n\n@task\ndef push(c, version, cpu=None):\n    print(f\" -- Docker push version to docker-hub : {version}\")\n\n    pool = Pool(get_pool_size(cpu))\n    pool.map(\n        _docker_push,\n        [\n            [c, version]\n            for version in version_name_to_version(version)\n        ],\n    )\n\n\n@task\ndef list(c):\n    from pprint import pprint\n    pprint(version_config_mapping, indent=2)\n\n\n@task\ndef list_releases(c):\n    releases = []\n\n    for page in range(1, 5):\n        data = requests.get(\"https://api.github.com/repos/redis/redis/releases\", params={\"page\": int(page)})\n\n        if data.status_code == 200:\n            for release in data.json():\n                r = release[\"name\"]\n\n                if \"rc\" in r or r.startswith(\"5\"):\n                    pass\n                else:\n                    releases.append(r)\n        else:\n            print(\"Error, stopping\")\n\n    for released_version in releases:\n        if released_version in version_config_mapping:\n            print(f\"Release found - {released_version}\")\n        else:\n            print(f\"NOT found - {released_version}\")\n"
        }
      ]
    }
  ]
}