{
  "metadata": {
    "timestamp": 1736568419486,
    "page": 369,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hnarayanan/shpotify",
      "stars": 2026,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.5322265625,
          "content": "# shpotify\n\n*shpotify* is a simple Bash/Apple script to control\n [Spotify](https://www.spotify.com) from the command line on a Mac.\n\nIf you find this interesting, you should [follow me on\nTwitter](https://twitter.com/copingbear) to learn about the other\nthings I do.\n\n## Installation\n\n[Download and install](http://www.spotify.com/download) the Spotify\ndesktop application if you haven’t already.\n\n### With Homebrew\n\nThe easiest way to install shpotify is by using the [Homebrew package\nmanager](http://brew.sh):\n\n````\nbrew install shpotify\n````\n\n### Manual installation\n\nIf you don’t use Homebrew, you can install the script manually by\nfollowing a few simple steps:\n\n1. Fetch a copy of this repository, either with git or [download the\n   zip archive](https://github.com/hnarayanan/shpotify/archive/master.zip).\n\n2. Navigate to the folder where you fetched the repository (unzip if\n   needed) and make sure the file called `spotify` is executable:\n   ````\n   cd shpotify\n   chmod +x spotify\n   ````\n\n3. Copy the file `spotify` to a convenient location in your `PATH`, or\n   set your `PATH` to include the folder where the file is located.\n\n### Connecting to Spotify’s API\n\nshpotify needs to connect to Spotify’s API in order to find music by\nname. It is very likely you want this feature!\n\nTo get this to work, you first need to sign up (or into) Spotify’s\ndeveloper site and [create an *Application*][spotify-dev]. Once you’ve\ndone so, you can find its `Client ID` and `Client Secret` values and\nenter them into your shpotify config file at `${HOME}/.shpotify.cfg`.\n\nBe sure to quote your values and don’t add any extra spaces. When\ndone, it should look like the following (but with your own values):\n\n````\nCLIENT_ID=\"abc01de2fghijk345lmnop\"\nCLIENT_SECRET=\"qr6stu789vwxyz\"\n````\n\n## Usage\n\nWith shpotify you can control Spotify with the following commands:\n````\nspotify play                       Resumes playback where Spotify last left off.\nspotify play <song name>           Finds a song by name and plays it.\nspotify play album <album name>    Finds an album by name and plays it.\nspotify play artist <artist name>  Finds an artist by name and plays it.\nspotify play list <playlist name>  Finds a playlist by name and plays it.\nspotify play uri <uri>             Play songs from specific uri.\n\nspotify next                       Skips to the next song in a playlist.\nspotify prev                       Returns to the previous song in a playlist.\nspotify replay                     Replays the current track from the beginning.\nspotify pos <time>                 Jump to a specific time (in seconds) in the current song.\nspotify pause                      Pauses (or resumes) Spotify playback.\nspotify stop                       Stops playback.\nspotify quit                       Stops playback and quits Spotify.\n\nspotify vol up                     Increases the volume by 10%.\nspotify vol down                   Decreases the volume by 10%.\nspotify vol <amount>               Sets the volume to an amount between 0 and 100.\nspotify vol [show]                 Shows the current volume.\n\nspotify status                     Shows the play status, including the current song details.\nspotify status artist              Shows the currently playing artist.\nspotify status album               Shows the currently playing album.\nspotify status track               Shows the currently playing track.\n\nspotify share                      Displays the current song's Spotify URL and URI.\nspotify share url                  Displays the current song's Spotify URL and copies it to the clipboard.\nspotify share uri                  Displays the current song's Spotify URI and copies it to the clipboard.\n\nspotify toggle shuffle             Toggles shuffle playback mode.\nspotify toggle repeat              Toggles repeat playback mode.\n````\n\n## Authors and contributing\n\nshpotify is primarily written and maintained by [Harish\nNarayanan](https://harishnarayanan.org).\n\nSince it’s an open source project, it contains numerous contributions\nfrom many helpful people, including:\n\n* Jorge Colindres\n* Thomas Pritchard\n* iLan Epstein\n* Gabriele Bonetti\n* Sean Heller\n* Eric Martin\n* Peter Fonseca\n\nIf you’re interested in contributing too, please consider addressing\nsome of the [issues people have previously\nreported](https://github.com/hnarayanan/shpotify/issues) and\n[submitting a pull\nrequest](https://help.github.com/articles/using-pull-requests/). **Thank\nyou!**\n\n## Copyright and license\n\nCopyright (c) 2012–2024 [Harish Narayanan](https://harishnarayanan.org).\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n[spotify-dev]: https://developer.spotify.com/dashboard/create\n"
        },
        {
          "name": "spotify",
          "type": "blob",
          "size": 19.6201171875,
          "content": "#!/usr/bin/env bash\n\n# Copyright (c) 2012--2024 Harish Narayanan <mail@harishnarayanan.org>\n#\n# Contains numerous helpful contributions from Jorge Colindres, Thomas\n# Pritchard, iLan Epstein, Gabriele Bonetti, Sean Heller, Eric Martin\n# and Peter Fonseca.\n\n# Permission is hereby granted, free of charge, to any person\n# obtaining a copy of this software and associated documentation files\n# (the \"Software\"), to deal in the Software without restriction,\n# including without limitation the rights to use, copy, modify, merge,\n# publish, distribute, sublicense, and/or sell copies of the Software,\n# and to permit persons to whom the Software is furnished to do so,\n# subject to the following conditions:\n\n# The above copyright notice and this permission notice shall be\n# included in all copies or substantial portions of the Software.\n\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\n# EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n# MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\n# NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS\n# BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN\n# ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n# CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n\nUSER_CONFIG_DEFAULTS=\"CLIENT_ID=\\\"\\\"\\nCLIENT_SECRET=\\\"\\\"\";\nUSER_CONFIG_FILE=\"${HOME}/.shpotify.cfg\";\nif ! [[ -f \"${USER_CONFIG_FILE}\" ]]; then\n    touch \"${USER_CONFIG_FILE}\";\n    echo -e \"${USER_CONFIG_DEFAULTS}\" > \"${USER_CONFIG_FILE}\";\nfi\nsource \"${USER_CONFIG_FILE}\";\n\n# Set the percent change in volume for vol up and vol down\nVOL_INCREMENT=10\n\nshowAPIHelp() {\n    echo;\n    echo \"Connecting to Spotify's API:\";\n    echo;\n    echo \"  This command line application needs to connect to Spotify's API in order to\";\n    echo \"  find music by name. It is very likely you want this feature!\";\n    echo;\n    echo \"  To get this to work, you need to sign up (or in) and create an 'Application' at:\";\n    echo \"  https://developer.spotify.com/my-applications/#!/applications/create\";\n    echo;\n    echo \"  Once you've created an application, find the 'Client ID' and 'Client Secret'\";\n    echo \"  values, and enter them into your shpotify config file at '${USER_CONFIG_FILE}'\";\n    echo;\n    echo \"  Be sure to quote your values and don't add any extra spaces!\";\n    echo \"  When done, it should look like this (but with your own values):\";\n    echo '  CLIENT_ID=\"abc01de2fghijk345lmnop\"';\n    echo '  CLIENT_SECRET=\"qr6stu789vwxyz\"';\n}\n\nshowHelp () {\n    echo \"Usage:\";\n    echo;\n    echo \"  `basename $0` <command>\";\n    echo;\n    echo \"Commands:\";\n    echo;\n    echo \"  play                         # Resumes playback where Spotify last left off.\";\n    echo \"  play <song name>             # Finds a song by name and plays it.\";\n    echo \"  play album <album name>      # Finds an album by name and plays it.\";\n    echo \"  play artist <artist name>    # Finds an artist by name and plays it.\";\n    echo \"  play list <playlist name>    # Finds a playlist by name and plays it.\";\n    echo \"  play uri <uri>               # Play songs from specific uri.\";\n    echo;\n    echo \"  next                         # Skips to the next song in a playlist.\";\n    echo \"  prev                         # Returns to the previous song in a playlist.\";\n    echo \"  replay                       # Replays the current track from the beginning.\";\n    echo \"  pos <time>                   # Jumps to a time (in secs) in the current song.\";\n    echo \"  pause                        # Pauses (or resumes) Spotify playback.\";\n    echo \"  stop                         # Stops playback.\";\n    echo \"  quit                         # Stops playback and quits Spotify.\";\n    echo;\n    echo \"  vol up                       # Increases the volume by 10%.\";\n    echo \"  vol down                     # Decreases the volume by 10%.\";\n    echo \"  vol <amount>                 # Sets the volume to an amount between 0 and 100.\";\n    echo \"  vol [show]                   # Shows the current Spotify volume.\";\n    echo;\n    echo \"  status                       # Shows the current player status.\";\n    echo \"  status artist                # Shows the currently playing artist.\";\n    echo \"  status album                 # Shows the currently playing album.\";\n    echo \"  status track                 # Shows the currently playing track.\";\n    echo;\n    echo \"  share                        # Displays the current song's Spotify URL and URI.\"\n    echo \"  share url                    # Displays the current song's Spotify URL and copies it to the clipboard.\"\n    echo \"  share uri                    # Displays the current song's Spotify URI and copies it to the clipboard.\"\n    echo;\n    echo \"  toggle shuffle               # Toggles shuffle playback mode.\";\n    echo \"  toggle repeat                # Toggles repeat playback mode.\";\n    showAPIHelp\n}\n\ncecho(){\n    bold=$(tput bold);\n    green=$(tput setaf 2);\n    reset=$(tput sgr0);\n    echo $bold$green\"$1\"$reset;\n}\n\nshowArtist() {\n    echo `osascript -e 'tell application \"Spotify\" to artist of current track as string'`;\n}\n\nshowAlbum() {\n    echo `osascript -e 'tell application \"Spotify\" to album of current track as string'`;\n}\n\nshowTrack() {\n    echo `osascript -e 'tell application \"Spotify\" to name of current track as string'`;\n}\n\nshowStatus () {\n    state=`osascript -e 'tell application \"Spotify\" to player state as string'`;\n    cecho \"Spotify is currently $state.\";\n    duration=`osascript -e 'tell application \"Spotify\"\n            set durSec to (duration of current track / 1000) as text\n            set tM to (round (durSec / 60) rounding down) as text\n            if length of ((durSec mod 60 div 1) as text) is greater than 1 then\n                set tS to (durSec mod 60 div 1) as text\n            else\n                set tS to (\"0\" & (durSec mod 60 div 1)) as text\n            end if\n            set myTime to tM as text & \":\" & tS as text\n            end tell\n            return myTime'`;\n    position=`osascript -e 'tell application \"Spotify\"\n            set pos to player position\n            set nM to (round (pos / 60) rounding down) as text\n            if length of ((round (pos mod 60) rounding down) as text) is greater than 1 then\n                set nS to (round (pos mod 60) rounding down) as text\n            else\n                set nS to (\"0\" & (round (pos mod 60) rounding down)) as text\n            end if\n            set nowAt to nM as text & \":\" & nS as text\n            end tell\n            return nowAt'`;\n\n    echo -e $reset\"Artist: $(showArtist)\\nAlbum: $(showAlbum)\\nTrack: $(showTrack) \\nPosition: $position / $duration\";\n}\n\nif [ $# = 0 ]; then\n    showHelp;\nelse\n\tif [ ! -d /Applications/Spotify.app ] && [ ! -d $HOME/Applications/Spotify.app ]; then\n\t\techo \"The Spotify application must be installed.\"\n\t\texit 1\n\tfi\n\n    if [ $(osascript -e 'application \"Spotify\" is running') = \"false\" ]; then\n        osascript -e 'tell application \"Spotify\" to activate' || exit 1\n        sleep 2\n    fi\nfi\nwhile [ $# -gt 0 ]; do\n    arg=$1;\n\n    case $arg in\n        \"play\"    )\n            if [ $# != 1 ]; then\n                # There are additional arguments, so find out how many\n                array=( $@ );\n                len=${#array[@]};\n                SPOTIFY_SEARCH_API=\"https://api.spotify.com/v1/search\";\n                SPOTIFY_TOKEN_URI=\"https://accounts.spotify.com/api/token\";\n                if [ -z \"${CLIENT_ID}\" ]; then\n                    cecho \"Invalid Client ID, please update ${USER_CONFIG_FILE}\";\n                    showAPIHelp;\n                    exit 1;\n                fi\n                if [ -z \"${CLIENT_SECRET}\" ]; then\n                    cecho \"Invalid Client Secret, please update ${USER_CONFIG_FILE}\";\n                    showAPIHelp;\n                    exit 1;\n                fi\n                SHPOTIFY_CREDENTIALS=$(printf \"${CLIENT_ID}:${CLIENT_SECRET}\" | base64 | tr -d \"\\n\"|tr -d '\\r');\n                SPOTIFY_PLAY_URI=\"\";\n\n                getAccessToken() {\n                    cecho \"Connecting to Spotify's API\";\n\n                    SPOTIFY_TOKEN_RESPONSE_DATA=$( \\\n                        curl \"${SPOTIFY_TOKEN_URI}\" \\\n                            --silent \\\n                            -X \"POST\" \\\n                            -H \"Authorization: Basic ${SHPOTIFY_CREDENTIALS}\" \\\n                            -d \"grant_type=client_credentials\" \\\n                    )\n                    if ! [[ \"${SPOTIFY_TOKEN_RESPONSE_DATA}\" =~ \"access_token\" ]]; then\n                        cecho \"Autorization failed, please check ${USER_CONFG_FILE}\"\n                        cecho \"${SPOTIFY_TOKEN_RESPONSE_DATA}\"\n                        showAPIHelp\n                        exit 1\n                    fi\n                    SPOTIFY_ACCESS_TOKEN=$( \\\n                        printf \"${SPOTIFY_TOKEN_RESPONSE_DATA}\" \\\n                        | command grep -E -o '\"access_token\":\".*\",' \\\n                        | sed 's/\"access_token\"://g' \\\n                        | sed 's/\"//g' \\\n                        | sed 's/,.*//g' \\\n                    )\n                }\n\n                searchAndPlay() {\n                    type=\"$1\"\n                    Q=\"$2\"\n\n                    getAccessToken;\n\n                    cecho \"Searching ${type}s for: $Q\";\n\n                    SPOTIFY_PLAY_URI=$( \\\n                        curl -s -G $SPOTIFY_SEARCH_API \\\n                            -H \"Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}\" \\\n                            -H \"Accept: application/json\" \\\n                            --data-urlencode \"q=$Q\" \\\n                            -d \"type=$type&limit=1&offset=0\" \\\n                        | command grep -E -o \"spotify:$type:[a-zA-Z0-9]+\" -m 1\n                    )\n                }\n\n                case $2 in\n                    \"list\"  )\n                        _args=${array[@]:2:$len};\n                        Q=$_args;\n\n                        getAccessToken;\n\n                        cecho \"Searching playlists for: $Q\";\n\n                        results=$( \\\n                            curl -s -G $SPOTIFY_SEARCH_API --data-urlencode \"q=$Q\" -d \"type=playlist&limit=10&offset=0\" -H \"Accept: application/json\" -H \"Authorization: Bearer ${SPOTIFY_ACCESS_TOKEN}\" \\\n                            | command grep -E -o \"spotify:playlist:[a-zA-Z0-9]+\" -m 10 \\\n                        )\n\n                        count=$( \\\n                            echo \"$results\" | command grep -c \"spotify:playlist\" \\\n                        )\n\n                        if [ \"$count\" -gt 0 ]; then\n                            random=$(( $RANDOM % $count));\n\n                            SPOTIFY_PLAY_URI=$( \\\n                                echo \"$results\" | awk -v random=\"$random\" '/spotify:playlist:[a-zA-Z0-9]+/{i++}i==random{print; exit}' \\\n                            )\n                        fi;;\n\n                    \"album\" | \"artist\" | \"track\"    )\n                        _args=${array[@]:2:$len};\n                        searchAndPlay $2 \"$_args\";;\n\n                    \"uri\"  )\n                        SPOTIFY_PLAY_URI=${array[@]:2:$len};;\n\n                    *   )\n                        _args=${array[@]:1:$len};\n                        searchAndPlay track \"$_args\";;\n                esac\n\n                if [ \"$SPOTIFY_PLAY_URI\" != \"\" ]; then\n                    if [ \"$2\" = \"uri\" ]; then\n                        cecho \"Playing Spotify URI: $SPOTIFY_PLAY_URI\";\n                    else\n                        cecho \"Playing ($Q Search) -> Spotify URI: $SPOTIFY_PLAY_URI\";\n                    fi\n\n                    osascript -e \"tell application \\\"Spotify\\\" to play track \\\"$SPOTIFY_PLAY_URI\\\"\";\n\n                else\n                    cecho \"No results when searching for $Q\";\n                fi\n\n            else\n\n                # play is the only param\n                cecho \"Playing Spotify.\";\n                osascript -e 'tell application \"Spotify\" to play';\n            fi\n            break ;;\n\n        \"pause\"    )\n            state=`osascript -e 'tell application \"Spotify\" to player state as string'`;\n            if [ $state = \"playing\" ]; then\n              cecho \"Pausing Spotify.\";\n            else\n              cecho \"Playing Spotify.\";\n            fi\n\n            osascript -e 'tell application \"Spotify\" to playpause';\n            break ;;\n\n        \"stop\"    )\n            state=`osascript -e 'tell application \"Spotify\" to player state as string'`;\n            if [ $state = \"playing\" ]; then\n              cecho \"Pausing Spotify.\";\n              osascript -e 'tell application \"Spotify\" to playpause';\n            else\n              cecho \"Spotify is already stopped.\"\n            fi\n\n            break ;;\n\n        \"quit\"    ) cecho \"Quitting Spotify.\";\n            osascript -e 'tell application \"Spotify\" to quit';\n            exit 0 ;;\n\n        \"next\"    ) cecho \"Going to next track.\" ;\n            osascript -e 'tell application \"Spotify\" to next track';\n            showStatus;\n            break ;;\n\n        \"prev\"    ) cecho \"Going to previous track.\";\n            osascript -e '\n            tell application \"Spotify\"\n                set player position to 0\n                previous track\n            end tell';\n            showStatus;\n            break ;;\n\n        \"replay\"  ) cecho \"Replaying current track.\";\n            osascript -e 'tell application \"Spotify\" to set player position to 0'\n            break ;;\n\n        \"vol\"    )\n            vol=`osascript -e 'tell application \"Spotify\" to sound volume as integer'`;\n            if [[ $2 = \"\" || $2 = \"show\" ]]; then\n                cecho \"Current Spotify volume level is $vol.\";\n                break ;\n            elif [ \"$2\" = \"up\" ]; then\n              if [ $vol -le $(( 100-$VOL_INCREMENT )) ]; then\n                    newvol=$(( vol+$VOL_INCREMENT ));\n                    cecho \"Increasing Spotify volume to $newvol.\";\n                else\n                    newvol=100;\n                    cecho \"Spotify volume level is at max.\";\n                fi\n            elif [ \"$2\" = \"down\" ]; then\n                if [ $vol -ge $(( $VOL_INCREMENT )) ]; then\n                    newvol=$(( vol-$VOL_INCREMENT ));\n                    cecho \"Reducing Spotify volume to $newvol.\";\n                else\n                    newvol=0;\n                    cecho \"Spotify volume level is at min.\";\n                fi\n            elif [[ $2 =~ ^[0-9]+$ ]] && [[ $2 -ge 0 && $2 -le 100 ]]; then\n                newvol=$2;\n                cecho \"Setting Spotify volume level to $newvol\";\n            else\n                echo \"Improper use of 'vol' command\"\n                echo \"The 'vol' command should be used as follows:\"\n                echo \"  vol up                       # Increases the volume by $VOL_INCREMENT%.\";\n                echo \"  vol down                     # Decreases the volume by $VOL_INCREMENT%.\";\n                echo \"  vol [amount]                 # Sets the volume to an amount between 0 and 100.\";\n                echo \"  vol                          # Shows the current Spotify volume.\";\n                exit 1;\n            fi\n\n            osascript -e \"tell application \\\"Spotify\\\" to set sound volume to $newvol\";\n            break ;;\n\n        \"toggle\"  )\n            if [ \"$2\" = \"shuffle\" ]; then\n                osascript -e 'tell application \"Spotify\" to set shuffling to not shuffling';\n                curr=`osascript -e 'tell application \"Spotify\" to shuffling'`;\n                cecho \"Spotify shuffling set to $curr\";\n            elif [ \"$2\" = \"repeat\" ]; then\n                osascript -e 'tell application \"Spotify\" to set repeating to not repeating';\n                curr=`osascript -e 'tell application \"Spotify\" to repeating'`;\n                cecho \"Spotify repeating set to $curr\";\n            fi\n            break ;;\n\n        \"status\" )\n            if [ $# != 1 ]; then\n                # There are additional arguments, a status subcommand\n                case $2 in\n                    \"artist\" )\n                        showArtist;\n                        break ;;\n\n                    \"album\" )\n                        showAlbum;\n                        break ;;\n\n                    \"track\" )\n                        showTrack;\n                        break ;;\n                esac\n            else\n                # status is the only param\n                showStatus;\n            fi\n            break ;;\n\n        \"info\" )\n            info=`osascript -e 'tell application \"Spotify\"\n                set durSec to (duration of current track / 1000)\n                set tM to (round (durSec / 60) rounding down) as text\n                if length of ((durSec mod 60 div 1) as text) is greater than 1 then\n                    set tS to (durSec mod 60 div 1) as text\n                else\n                    set tS to (\"0\" & (durSec mod 60 div 1)) as text\n                end if\n                set myTime to tM as text & \"min \" & tS as text & \"s\"\n                set pos to player position\n                set nM to (round (pos / 60) rounding down) as text\n                if length of ((round (pos mod 60) rounding down) as text) is greater than 1 then\n                    set nS to (round (pos mod 60) rounding down) as text\n                else\n                    set nS to (\"0\" & (round (pos mod 60) rounding down)) as text\n                end if\n                set nowAt to nM as text & \"min \" & nS as text & \"s\"\n                set info to \"\" & \"\\nArtist:         \" & artist of current track\n                set info to info & \"\\nTrack:          \" & name of current track\n                set info to info & \"\\nAlbum Artist:   \" & album artist of current track\n                set info to info & \"\\nAlbum:          \" & album of current track\n                set info to info & \"\\nSeconds:        \" & durSec\n                set info to info & \"\\nSeconds played: \" & pos\n                set info to info & \"\\nDuration:       \" & mytime\n                set info to info & \"\\nNow at:         \" & nowAt\n                set info to info & \"\\nPlayed Count:   \" & played count of current track\n                set info to info & \"\\nTrack Number:   \" & track number of current track\n                set info to info & \"\\nPopularity:     \" & popularity of current track\n                set info to info & \"\\nId:             \" & id of current track\n                set info to info & \"\\nSpotify URL:    \" & spotify url of current track\n                set info to info & \"\\nArtwork:        \" & artwork url of current track\n                set info to info & \"\\nPlayer:         \" & player state\n                set info to info & \"\\nVolume:         \" & sound volume\n                set info to info & \"\\nShuffle:        \" & shuffling\n                set info to info & \"\\nRepeating:      \" & repeating\n            end tell\n            return info'`\n            cecho \"$info\";\n            break ;;\n\n        \"share\"     )\n            uri=`osascript -e 'tell application \"Spotify\" to spotify url of current track'`;\n            remove='spotify:track:'\n            url=${uri#$remove}\n            url=\"https://open.spotify.com/track/$url\"\n\n            if [ \"$2\" = \"\" ]; then\n                cecho \"Spotify URL: $url\"\n                cecho \"Spotify URI: $uri\"\n                echo \"To copy the URL or URI to your clipboard, use:\"\n                echo \"\\`spotify share url\\` or\"\n                echo \"\\`spotify share uri\\` respectively.\"\n            elif [ \"$2\" = \"url\" ]; then\n                cecho \"Spotify URL: $url\";\n                echo -n $url | pbcopy\n            elif [ \"$2\" = \"uri\" ]; then\n                cecho \"Spotify URI: $uri\";\n                echo -n $uri | pbcopy\n            fi\n            break ;;\n\n        \"pos\"   )\n            cecho \"Adjusting Spotify play position.\"\n            osascript -e \"tell application \\\"Spotify\\\" to set player position to $2\";\n            break ;;\n\n        \"help\" )\n            showHelp;\n            break ;;\n        * )\n            showHelp;\n            exit 1;\n\n    esac\ndone\n"
        }
      ]
    }
  ]
}