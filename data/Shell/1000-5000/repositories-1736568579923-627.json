{
  "metadata": {
    "timestamp": 1736568579923,
    "page": 627,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "rime/plum",
      "stars": 1472,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0908203125,
          "content": "* text=auto\n*.bat text eol=crlf\n*.conf text eol=lf\n*.sh text eol=lf\nrime-install text eol=lf\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0322265625,
          "content": "*~\n/package\n/output\nplum-*.tar.gz"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 7.4716796875,
          "content": "                   GNU LESSER GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\n  This version of the GNU Lesser General Public License incorporates\nthe terms and conditions of version 3 of the GNU General Public\nLicense, supplemented by the additional permissions listed below.\n\n  0. Additional Definitions.\n\n  As used herein, \"this License\" refers to version 3 of the GNU Lesser\nGeneral Public License, and the \"GNU GPL\" refers to version 3 of the GNU\nGeneral Public License.\n\n  \"The Library\" refers to a covered work governed by this License,\nother than an Application or a Combined Work as defined below.\n\n  An \"Application\" is any work that makes use of an interface provided\nby the Library, but which is not otherwise based on the Library.\nDefining a subclass of a class defined by the Library is deemed a mode\nof using an interface provided by the Library.\n\n  A \"Combined Work\" is a work produced by combining or linking an\nApplication with the Library.  The particular version of the Library\nwith which the Combined Work was made is also called the \"Linked\nVersion\".\n\n  The \"Minimal Corresponding Source\" for a Combined Work means the\nCorresponding Source for the Combined Work, excluding any source code\nfor portions of the Combined Work that, considered in isolation, are\nbased on the Application, and not on the Linked Version.\n\n  The \"Corresponding Application Code\" for a Combined Work means the\nobject code and/or source code for the Application, including any data\nand utility programs needed for reproducing the Combined Work from the\nApplication, but excluding the System Libraries of the Combined Work.\n\n  1. Exception to Section 3 of the GNU GPL.\n\n  You may convey a covered work under sections 3 and 4 of this License\nwithout being bound by section 3 of the GNU GPL.\n\n  2. Conveying Modified Versions.\n\n  If you modify a copy of the Library, and, in your modifications, a\nfacility refers to a function or data to be supplied by an Application\nthat uses the facility (other than as an argument passed when the\nfacility is invoked), then you may convey a copy of the modified\nversion:\n\n   a) under this License, provided that you make a good faith effort to\n   ensure that, in the event an Application does not supply the\n   function or data, the facility still operates, and performs\n   whatever part of its purpose remains meaningful, or\n\n   b) under the GNU GPL, with none of the additional permissions of\n   this License applicable to that copy.\n\n  3. Object Code Incorporating Material from Library Header Files.\n\n  The object code form of an Application may incorporate material from\na header file that is part of the Library.  You may convey such object\ncode under terms of your choice, provided that, if the incorporated\nmaterial is not limited to numerical parameters, data structure\nlayouts and accessors, or small macros, inline functions and templates\n(ten or fewer lines in length), you do both of the following:\n\n   a) Give prominent notice with each copy of the object code that the\n   Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the object code with a copy of the GNU GPL and this license\n   document.\n\n  4. Combined Works.\n\n  You may convey a Combined Work under terms of your choice that,\ntaken together, effectively do not restrict modification of the\nportions of the Library contained in the Combined Work and reverse\nengineering for debugging such modifications, if you also do each of\nthe following:\n\n   a) Give prominent notice with each copy of the Combined Work that\n   the Library is used in it and that the Library and its use are\n   covered by this License.\n\n   b) Accompany the Combined Work with a copy of the GNU GPL and this license\n   document.\n\n   c) For a Combined Work that displays copyright notices during\n   execution, include the copyright notice for the Library among\n   these notices, as well as a reference directing the user to the\n   copies of the GNU GPL and this license document.\n\n   d) Do one of the following:\n\n       0) Convey the Minimal Corresponding Source under the terms of this\n       License, and the Corresponding Application Code in a form\n       suitable for, and under terms that permit, the user to\n       recombine or relink the Application with a modified version of\n       the Linked Version to produce a modified Combined Work, in the\n       manner specified by section 6 of the GNU GPL for conveying\n       Corresponding Source.\n\n       1) Use a suitable shared library mechanism for linking with the\n       Library.  A suitable mechanism is one that (a) uses at run time\n       a copy of the Library already present on the user's computer\n       system, and (b) will operate properly with a modified version\n       of the Library that is interface-compatible with the Linked\n       Version.\n\n   e) Provide Installation Information, but only if you would otherwise\n   be required to provide such information under section 6 of the\n   GNU GPL, and only to the extent that such information is\n   necessary to install and execute a modified version of the\n   Combined Work produced by recombining or relinking the\n   Application with a modified version of the Linked Version. (If\n   you use option 4d0, the Installation Information must accompany\n   the Minimal Corresponding Source and Corresponding Application\n   Code. If you use option 4d1, you must provide the Installation\n   Information in the manner specified by section 6 of the GNU GPL\n   for conveying Corresponding Source.)\n\n  5. Combined Libraries.\n\n  You may place library facilities that are a work based on the\nLibrary side by side in a single library together with other library\nfacilities that are not Applications and are not covered by this\nLicense, and convey such a combined library under terms of your\nchoice, if you do both of the following:\n\n   a) Accompany the combined library with a copy of the same work based\n   on the Library, uncombined with any other library facilities,\n   conveyed under the terms of this License.\n\n   b) Give prominent notice with the combined library that part of it\n   is a work based on the Library, and explaining where to find the\n   accompanying uncombined form of the same work.\n\n  6. Revised Versions of the GNU Lesser General Public License.\n\n  The Free Software Foundation may publish revised and/or new versions\nof the GNU Lesser General Public License from time to time. Such new\nversions will be similar in spirit to the present version, but may\ndiffer in detail to address new problems or concerns.\n\n  Each version is given a distinguishing version number. If the\nLibrary as you received it specifies that a certain numbered version\nof the GNU Lesser General Public License \"or any later version\"\napplies to it, you have the option of following the terms and\nconditions either of that published version or of any later version\npublished by the Free Software Foundation. If the Library as you\nreceived it does not specify a version number of the GNU Lesser\nGeneral Public License, you may choose any version of the GNU Lesser\nGeneral Public License ever published by the Free Software Foundation.\n\n  If the Library as you received it specifies that a proxy can decide\nwhether future versions of the GNU Lesser General Public License shall\napply, that proxy's public statement of acceptance of any version is\npermanent authorization for you to choose that version for the\nLibrary.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.6953125,
          "content": "ifeq ($(SRCDIR),)\n\tSRCDIR := $(shell dirname $(realpath $(lastword $(MAKEFILE_LIST))))\nendif\n\n# Tips: you can set OUTPUT to Rime user directory in the command line\nifeq ($(OUTPUT),)\n\tOUTPUT := $(SRCDIR)/output\nendif\n\nifeq ($(PREFIX),)\n\tPREFIX := /usr\nendif\n\nifeq ($(RIME_DATA_DIR),)\n\tRIME_DATA_DIR := $(PREFIX)/share/rime-data\nendif\n\n.DEFAULT_GOAL := preset\n\npreset extra all: clean\n\tbash $(SRCDIR)/scripts/install-packages.sh :$@ $(OUTPUT)\n\nminimal: clean\n\tbash $(SRCDIR)/scripts/minimal-build.sh $(OUTPUT)\n\npreset-bin: preset\n\t$(MAKE) build\n\nall-bin: all\n\t$(MAKE) build\n\nminimal-bin: minimal\n\t$(MAKE) build\n\nbuild:\n\trime_deployer --build $(OUTPUT)\n\trm $(OUTPUT)/user.yaml\n\ninstall:\n\t@echo \"Installing Rime data to '$(DESTDIR)$(RIME_DATA_DIR)'.\"\n\t@install -d $(DESTDIR)$(RIME_DATA_DIR)\n\t@install -m 644 $(OUTPUT)/*.* $(DESTDIR)$(RIME_DATA_DIR)\n\t@if [ -d \"$(OUTPUT)/build\" ]; then \\\n\t  install -d $(DESTDIR)$(RIME_DATA_DIR)/build; \\\n\t  install -m 644 $(OUTPUT)/build/*.* $(DESTDIR)$(RIME_DATA_DIR)/build; \\\n\tfi\n\t@if [ -d \"$(OUTPUT)/opencc\" ]; then \\\n\t  install -d $(DESTDIR)$(RIME_DATA_DIR)/opencc; \\\n\t  install -m 644 $(OUTPUT)/opencc/*.* $(DESTDIR)$(RIME_DATA_DIR)/opencc; \\\n\tfi\n\nclean:\n\trm -rf $(OUTPUT) > /dev/null 2>&1 || true\n\nVERSION = $(shell date \"+%Y%m%d\")\n\n# A source tarball that includes all data packages.\n# To reproduce package contents of the release, set `no_update=1`:\n#     tar xzf plum-YYYYMMDD.tar.gz\n#     cd plum\n#     no_update=1 make\n#     sudo make install\ndist:\n\t$(MAKE) OUTPUT=$(OUTPUT) all\n\ttar czf plum-$(VERSION).tar.gz \\\n\t  --exclude=.git \\\n\t  --exclude=output \\\n\t  --exclude='plum-*.tar.gz' \\\n\t  -C .. plum\n\n.PHONY: preset extra all minimal \\\n\tpreset-bin all-bin minimal-bin \\\n\tbuild install clean dist\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.640625,
          "content": "<meta charset=\"UTF-8\">\n\n# 東風破 /plum/\n\nRime configuration manager and input schema repository\n\n## Project home\n\n[rime.im](https://rime.im)\n\n## Introduction\n\n**/plum/** is a configuration manager for [Rime](https://rime.im) input method engine.\n\n/// **東風破** 是 [中州韻輸入法引擎](https://rime.im) 的配置管理工具。///\n\nIt's designed for Rime users to install and update the default configuration and a collection\nof data packages maintained by [Rime Developers](https://github.com/rime).\n\nIt also works perfectly well with personal configuration hosted on GitHub and input schema packages\nfrom third-party developers.\n\nA **Rime input schema** (**Rime 輸入方案**) defines the rules of a specific \"input method\", or in technical terms\nhow user input sequences are interpreted by the Rime input method engine.\nIt consists of a configuration file named `<schema_id>.schema.yaml`, and usually an optional\n**Rime dictionary** (**韻書**) file named `*.dict.yaml`.\n\nA package may contain one or several interrelated input schemata and their affiliated Rime dictionaries.\nA package is also good for publishing general configuration files and data files used by Rime.\n\nIn /plum/ terms, a re-usable piece of configuration is known as a **recipe** (**配方**), denoted by the \"℞\" symbol.\n\nA data package itself can be a recipe, this is the common case.\nIn the future, /plum/ will support more fine-grained recipes that allow you to select what to install from a package,\nor even take parameters like the target input schema to customize.\n\n## Packages\n\nThis is an index of the packages maintained by Rime Developers as separate projects.\n\nThese packages aim to offer a sensible default configuration for most users, and support various\nChinese input methods including those based on modern dialects and historical Chinese phonology.\n\n/// **配方一覽** ///\n\n### Essentials\n\n  - ℞ [`prelude`](https://github.com/rime/rime-prelude): 基礎配置 / the prelude package, providing Rime's default settings\n  - ℞ [`essay`](https://github.com/rime/rime-essay): 八股文 / a shared vocabulary and language model\n\n### Phonetic-based input methods\n\nModern Standard Mandarin\n\n  - ℞ [`luna-pinyin`](https://github.com/rime/rime-luna-pinyin): 朙月拼音 / Pinyin input method for Traditional Chinese\n  - ℞ [`terra-pinyin`](https://github.com/rime/rime-terra-pinyin): 地球拼音 / School-taught Pinyin, with tone marks\n  - ℞ [`bopomofo`](https://github.com/rime/rime-bopomofo): 注音 / Zhuyin (aka. Bopomofo)\n  - ℞ [`pinyin-simp`](https://github.com/rime/rime-pinyin-simp): 袖珍簡化字拼音\n\nDerivatives of Pinyin\n\n  - ℞ [`double-pinyin`](https://github.com/rime/rime-double-pinyin): 雙拼 / Double Pinyin (ZiRanMa, ABC, flyPY, MSPY, PYJJ variants)\n  - ℞ [`combo-pinyin`](https://github.com/rime/rime-combo-pinyin): 宮保拼音 / [Combo Pinyin](https://github.com/rime/home/wiki/ComboPinyin), a chord-typing input method\n  - ℞ [`stenotype`](https://github.com/rime/rime-stenotype): 打字速記法 / a stenographic system derived from ABC Easy Shorthand\n\nOther modern varieties of Chinese\n\n  - ℞ [`cantonese`](https://github.com/rime/rime-cantonese): 粵語拼音 / Cantonese\n  - ℞ [`jyutping`](https://github.com/rime/rime-jyutping): 粵拼（無聲調） / Cantonese (without tones)\n  - ℞ [`wugniu`](https://github.com/rime/rime-wugniu): 上海吳語 / Wu (Shanghainese)\n  - ℞ [`soutzoe`](https://github.com/rime/rime-soutzoe): 蘇州吳語 / Wu (Suzhounese)\n\nMiddle Chinese\n\n  - ℞ [`middle-chinese`](https://github.com/rime/rime-middle-chinese): 中古漢語拼音 / Middle Chinese Romanization\n\n### Shape-based input methods\n\n  - ℞ [`stroke`](https://github.com/rime/rime-stroke): 五筆畫 / five strokes\n  - ℞ [`cangjie`](https://github.com/rime/rime-cangjie): 倉頡輸入法 / Cangjie input method\n  - ℞ [`quick`](https://github.com/rime/rime-quick): 速成 / Simplified Cangjie\n  - ℞ [`wubi`](https://github.com/rime/rime-wubi): 五筆字型\n  - ℞ [`array`](https://github.com/rime/rime-array): 行列輸入法\n  - ℞ [`scj`](https://github.com/rime/rime-scj): 快速倉頡\n\n### Miscellaneous\n\n  - ℞ [`emoji`](https://github.com/rime/rime-emoji): 繪文字 / input emoji with English or Chinese Pinyin keywords\n  - ℞ [`ipa`](https://github.com/rime/rime-ipa): 國際音標 / International Phonetic Alphabet\n\n## Usage\n\nTo prepare your Rime configuration for [ibus-rime](https://github.com/rime/ibus-rime),\n[Squirrel](https://github.com/rime/squirrel), you can get started by running\n\n```sh\ncurl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash\n```\n\n/// 用法：Linux、macOS 系統，在終端輸入以上命令行，安裝配置管理器及預設配方。 ///\n\nPaste the command line in Linux terminal or macOS `Terminal.app` and hit enter.\n\nThe one-liner runs the `rime-install` script to download preset packages and install\nsource files to Rime user directory. (Yet it doesn't enable new schemas for you)\n\nFor [Weasel](https://github.com/rime/weasel), please refer to the [Windows bootstrap script](#windows) section for initial setup.\n\n## Advanced usage\n\nAlternatively, you can specify a configuration among `:preset`, `:extra` and `:all` (note the colon):\n\n```sh\ncurl -fsSL https://raw.githubusercontent.com/rime/plum/master/rime-install | bash -s -- :preset\n```\n\nThis is equivalent to cloning this repo and running the local copy of `rime-install`:\n\n```sh\ngit clone --depth 1 https://github.com/rime/plum.git\ncd plum\nbash rime-install :preset\n```\n\nYou can then add packages from all the great Rime developers on GitHub by specifying\na list of package names or refer to packages by `<user>/<repo>`:\n\n```sh\nbash rime-install jyutping lotem/rime-zhung acevery/rime-zhengma\n\n# optionally, specific a branch by appending \"@<branch-name>\"\nbash rime-install jyutping@master lotem/rime-zhung@master\n```\n\nLastly, it's also possible to install other author's Rime configuration from a\n`*-packages.conf` file hosted on GitHub. For example:\n\n\n```sh\nbash rime-install https://github.com/lotem/rime-forge/raw/master/lotem-packages.conf\n\n# or in short form: \"<user>/<repo>/<filepath>\"\nbash rime-install lotem/rime-forge/lotem-packages.conf\n\n# or specify a branch: \"<user>/<repo>@<branch>/<filepath>\"\nbash rime-install lotem/rime-forge@master/lotem-packages.conf\n```\n\nFor third-party Rime distributions, specify the `rime_frontend` variable in the command line:\n\n```sh\nrime_frontend=fcitx-rime bash rime-install\n```\n\nor set `rime_dir` to Rime user directory\n\n```sh\nrime_dir=\"$HOME/.config/fcitx/rime\" bash rime-install\n```\n\nTo update /plum/ itself, run\n\n```sh\nbash rime-install plum\n```\n\n## Interactively select packages to install\n\nSpecify the `--select` flag as the first argument to `rime-install`,\nthen add configurations (`:preset` is the default) and/or individual packages to display in the menu.\n\n```sh\nbash rime-install --select :extra\n\nbash rime-install --select :all lotem/rime-forge/lotem-packages.conf\n```\n\n[Screenshot](https://github.com/rime/home/raw/master/images/rime-install-select.png) of usage example\n\n<a name=\"windows\"></a>\n## Windows bootstrap script\n\nTo get started on Windows, download the [bootstrap bundle][bootstrap-bundle],\nunpack the ZIP archive and run `rime-install-bootstrap.bat` for initial setup.\n\nIt will fetch the latest installer script `rime-install.bat` an create a shortcut to it,\nwhich can then be copied or moved anywhere for easier access.\n\n/// Windows 用家可以通過 [小狼毫](https://rime.im/download/#windows) 0.11 以上「輸入法設定／獲取更多輸入方案」調用配置管理器。///\n\n/// 或者下載獨立的 [啓動工具包][bootstrap-bundle]。///\n\n  [bootstrap-bundle]: https://github.com/rime/plum-windows-bootstrap/archive/master.zip\n\n### Use built-in ZIP package installer\n\nYou can use the installer script to download and install ZIP packages from GitHub, in a number of ways:\n\n1. Double-click the shortcut to bring up an interactive package installer, then input package name, `<user>/<repo>` or GitHub URL for the package.\n\n2. Run `rime-install.bat` in the command line. The command takes a list of packages to install as arguments.\n\n```batch\nrime-install :preset combo-pinyin jyutping wubi\n```\n\n3. Drag downloaded ZIP packages from GitHub onto the shortcut to do offline install.\n\n   You can find ZIP packages downloaded by the installer script in `%TEMP%` folder (can be customized via variable `download_cache_dir`).\n\n   To manually download ZIP package from a GitHub repository, click the button *Clone or download*, then *Download ZIP*.\n\n### Use git for incremental updates (optional)\n\nIf [Git for Windows](https://gitforwindows.org/) is installed in the default location or is available in your `PATH`,\nthe script will use git-bash to install or update packages.\n\nUse the following command to install Git for Windows, if you are new to git.\n\n```batch\nrime-install git\n```\n\nYou can set more options in `rime-install-config.bat` in the same directory as `rime-install.bat`, for example:\n\n```batch\nset plum_dir=%APPDATA%\\plum\nset rime_dir=%APPDATA%\\Rime\nset use_plum=1\n```\n\n## Install as shared data\n\nThe `Makefile` builds and installs Rime data as a software on Unix systems.\n\nFor downstream packagers for the package management systems of the OS, it's recommend to create\nseparate packages for the /plum/ configuration manager (possibly named `rime-plum` or `rime-install`)\nand the data package(s) (possibly named `rime-data`, or `rime-data-*` if separated into many)\ncreated by the make targets.\n\n### Build dependencies\n\n  - git\n  - librime>=1.3 (for `rime_deployer`)\n\n### Run-time dependencies\n\n  - librime>=1.3\n  - opencc>=1.0.2\n\n### Build and install\n\nThe default make target uses `git` command to download the latest packages from GitHub.\n\n```sh\nmake\nsudo make install\n```\n\nYou can optionally build the by default enabled input schemas to binaries.\nThis saves user's time building those files on first startup.\n\n```sh\nmake preset-bin\n```\n\n## License\n\nCode in the `rime/plum` repository is licensed under **LGPLv3**.\nPlease refer to the `LICENSE` file in the project root directory.\n\n**Note** that make targets provided by the `Makefile` may include files downloaded by the\nconfiguration manager. Individual packages can be released under different licenses.\nPlease refer to their respective `LICENSE` files.\nThe license compatible with all the maintained packages is **GPLv3**.\n\n## Credits\n\nWe are grateful to the makers of the following open source projects:\n\n  - [Android Pinyin IME](https://source.android.com/) (Apache 2.0)\n  - [Chewing / 新酷音](http://chewing.im/) (LGPL)\n  - [ibus-table](https://github.com/acevery/ibus-table) (LGPL)\n  - [OpenCC / 開放中文轉換](https://github.com/BYVoid/OpenCC) (Apache 2.0)\n  - [moedict / 萌典](https://www.moedict.tw) (CC0 1.0)\n  - [Rime 翰林院 / Rime Academy](https://github.com/rime-aca) (GPLv3)\n\nAlso to the inventors of the following input methods:\n\n  - Cangjie / 倉頡輸入法 by 朱邦復\n  - Array input method / 行列輸入法 by 廖明德\n  - Wubi / 五筆字型 by 王永民\n  - Scj / 快速倉頡 by 麥志洪\n  - Middle Chinese Romanization / 中古漢語拼音 by 古韻\n\n## Contributors\n\nThis software is a result of collective effort. It was set up by the following\npeople by contributing files, patches and pull-requests. See also the\n[contributors](https://github.com/rime/plum/graphs/contributors) page for a\nlist of open-source collaborators.\n\n  - [佛振](https://github.com/lotem)\n  - [Kunki Chou](https://github.com/kunki)\n  - [雪齋](https://github.com/LEOYoon-Tsaw)\n  - [Patrick Tschang](https://github.com/Patricivs)\n  - [Joseph J.C. Tang](https://github.com/jinntrance)\n  - [lxk](http://101reset.com)\n  - [Ye Zhou](https://github.com/zhouye)\n  - Jiehong Ma\n  - StarSasumi\n  - 古韻\n  - 寒寒豆\n  - 四季的風\n  - 上海閒話abc\n  - 吳語越音\n"
        },
        {
          "name": "all-packages.bat",
          "type": "blob",
          "size": 0.0654296875,
          "content": "set package_list=\ncall preset-packages.bat\ncall extra-packages.bat\n"
        },
        {
          "name": "all-packages.conf",
          "type": "blob",
          "size": 0.1240234375,
          "content": "#!/usr/bin/env bash\n\npackage_list=()\n\nsource \"${root_dir:-.}\"/preset-packages.conf\nsource \"${root_dir:-.}\"/extra-packages.conf\n"
        },
        {
          "name": "extra-packages.bat",
          "type": "blob",
          "size": 0.1875,
          "content": "set package_list=%package_list%^\n array^\n cantonese^\n combo-pinyin^\n double-pinyin^\n emoji^\n ipa^\n jyutping^\n middle-chinese^\n pinyin-simp^\n quick^\n scj^\n soutzoe^\n stenotype^\n wubi^\n wugniu^\n"
        },
        {
          "name": "extra-packages.conf",
          "type": "blob",
          "size": 0.22265625,
          "content": "#!/usr/bin/env bash\n\npackage_list+=(\n    array\n    cantonese\n    combo-pinyin\n    double-pinyin\n    emoji\n    ipa\n    jyutping\n    middle-chinese\n    pinyin-simp\n    quick\n    scj\n    soutzoe\n    stenotype\n    wubi\n    wugniu\n)\n"
        },
        {
          "name": "preset-packages.bat",
          "type": "blob",
          "size": 0.107421875,
          "content": "set package_list=%package_list%^\n bopomofo^\n cangjie^\n essay^\n luna-pinyin^\n prelude^\n stroke^\n terra-pinyin^\n"
        },
        {
          "name": "preset-packages.conf",
          "type": "blob",
          "size": 0.126953125,
          "content": "#!/usr/bin/env bash\n\npackage_list+=(\n    bopomofo\n    cangjie\n    essay\n    luna-pinyin\n    prelude\n    stroke\n    terra-pinyin\n)\n"
        },
        {
          "name": "rime-install",
          "type": "blob",
          "size": 1.3701171875,
          "content": "#!/usr/bin/env bash\n\nif [[ -z \"${plum_repo}\" ]]; then\n    plum_repo='rime/plum'\nfi\n\nif [[ -z \"${plum_dir}\" ]]; then\n    # am I in a working copy already?\n    plum_dir=\"$(dirname \"$(readlink -f \"$0\")\")\"\n    if ! [[ -f \"${plum_dir}\"/scripts/install-packages.sh ]]; then\n        # make a copy of plum in a subdirectory\n        plum_dir='plum'\n    fi\nfi\n\nif ! [[ -e \"${plum_dir}\" ]]; then\n    git clone --depth 1 \"https://github.com/${plum_repo}.git\" \"${plum_dir}\"\nfi\n\nif ! [[ \"$0\" -ef \"${plum_dir}\"/rime-install ]]; then\n    # run the newer version of rime-install\n    \"${plum_dir}\"/rime-install \"$@\"\n    exit\nfi\n\nexport root_dir=\"${plum_dir}\"\nsource \"${root_dir}\"/scripts/bootstrap.sh\nrequire 'styles'\n\nif [[ -z \"${rime_dir}\" ]]; then\n    # Output to Rime user directory\n    require 'frontend'\n    guess_rime_user_dir  # exports `rime_dir`\nfi\n\nif [[ \"$1\" == '--select' ]]; then\n    shift\n    interactive=1\nfi\n\nif [[ $# -eq 0 ]]; then\n    targets=(':preset')\nelse\n    targets=(\"$@\")\nfi\n\nif [[ -n \"${interactive}\" ]]; then\n    require 'selector'\n    select_packages \"${targets[@]}\"\n    targets=(\"${selected_packages[@]}\")\nfi\n\nfor target in \"${targets[@]}\"; do\n    if [[ \"${target}\" == 'plum' ]]; then\n        echo $(print_result 'Updating plum at') \"'${plum_dir}'\"\n        (cd \"${plum_dir}\"; git pull)\n        continue\n    fi\n\n    \"${root_dir}\"/scripts/install-packages.sh \"${target}\" \"${rime_dir:-.}\"\ndone\n"
        },
        {
          "name": "rime-install-bootstrap.bat",
          "type": "blob",
          "size": 1.375,
          "content": "@echo off\n\nsetlocal\n\nset root_dir=%~dp0\nset PATH=%root_dir%;%PATH%\n\nset script_path=%root_dir%rime-install.bat\nset config_path=%root_dir%rime-install-config.bat\n\nrem download rime-install.bat if missing\nif exist \"%script_path%\" goto end_download\n\nwhere /q curl\nif %errorlevel% equ 0 (\n   set downloader=curl -fsSL\n   set save_to=-o\n   goto downloader_found\n)\n\nwhere /q powershell\nif %errorlevel% equ 0 (\n   set downloader=powershell Invoke-WebRequest\n   set save_to=-OutFile\n   goto downloader_found\n)\n\necho Error: downloader not found.\nexit /b 1\n:downloader_found\n\nset script_url=https://raw.githubusercontent.com/rime/plum/master/rime-install.bat\nset config_url=https://github.com/rime/plum/raw/master/rime-install-config.bat\n\necho Downloading rime-install.bat ...\n%downloader% \"%script_url%\" %save_to% \"%script_path%\"\nif errorlevel 1 (\n   echo Error downloading rime-install.bat\n   exit /b 1\n)\n\nif exist \"%config_path%\" goto end_download\n\necho Downloading rime-install-config.bat template ...\n%downloader% \"%config_url%\" %save_to% \"%config_path%\"\nif errorlevel 1 (\n   echo Error downloading rime-install-config.bat\n   exit /b 1\n)\n\n:end_download\n\nset link_name=Rime package installer\n\nrem create shortcut\npowershell \"$s=(New-Object -COM WScript.Shell).CreateShortcut('%root_dir%%link_name%.lnk');$s.TargetPath='\\\"%ComSpec%\\\"';$s.Arguments='/k \\\"%script_path%\\\"';$s.WorkingDirectory='%root_dir%';$s.Save()\"\n"
        },
        {
          "name": "rime-install-config.bat",
          "type": "blob",
          "size": 0.576171875,
          "content": "rem Location of download cache\nrem set download_cache_dir=%TEMP%\n\nrem Do not update packages; only download missing files.\nrem CAUTION: may suffer from incomplete downloads.\nrem set no_update=1\n\nrem Location of Rime configuration manager and downloaded packages\nrem set plum_dir=%APPDATA%\\plum\n\nrem Location of Rime user directory\nrem set rime_dir=%APPDATA%\\Rime\n\nset key=HKEY_CURRENT_USER\\SOFTWARE\\Rime\\Weasel\nset name=RimeUserDir\nfor /f \"tokens=2*\" %%a in ('reg query \"%key%\" /v \"%name%\"') do set rime_dir=%%b\n\nrem Disable /plum/ bash script; use batch installer only.\nrem set use_plum=0\n"
        },
        {
          "name": "rime-install.bat",
          "type": "blob",
          "size": 10.3193359375,
          "content": "@echo off\n\nsetlocal enabledelayedexpansion\n\ntitle Rime package installer\n\nset root_dir=%~dp0\nset PATH=%root_dir%;%PATH%\n\nset config_file=%~dp0\\rime-install-config.bat\nif exist \"%config_file%\" call \"%config_file%\"\n\nif not defined rime_dir set rime_dir=%APPDATA%\\Rime\nif not defined download_cache_dir set download_cache_dir=%TEMP%\nif not exist \"%download_cache_dir%\" mkdir \"%download_cache_dir%\"\n\necho.\necho Rime package installer\necho.\necho Working directory: %CD%\necho Package installer directory: %root_dir%\necho Download cache directory: %download_cache_dir%\necho Rime user directory: %rime_dir%\necho.\n\nif defined ProgramFiles(x86) (set arch=64) else (set arch=32)\n\ncall :find_7z\ncall :find_git_bash\ncall :find_downloader\n\nif not defined use_plum if \"%has_git_bash%\" == \"1\" set use_plum=1\n\n:process_arguments\nif \"%1\" == \"\" set batch_interactive=1\n\nif \"%1\" == \"--select\" if \"%use_plum\" == \"1\" (\n  call :install_with_plum %*\n  exit /b !errorlevel!\n)\n\nset /a installed_packages=0\n\n:next\nif \"%batch_interactive%\" == \"1\" (\n  set package=\n  echo. && (set /p package=Enter package name, URL, user/repo or downloaded ZIP to install: )\n) else (\n  set package=%1\n  shift\n)\nif \"%package%\" == \"\" goto finish\n\ncall :install_package\nif errorlevel 1 exit /b %errorlevel%\ngoto next\n\n:install_package\nif \"%package%\" == \"7z\" (\n  call :install_7z\n  exit /b %errorlevel%\n) else if \"%package%\" == \"git\" (\n  call :install_git\n  exit /b %errorlevel%\n) else if \"%package%\" == \"plum\" (\n  call :install_with_plum plum\n  exit /b %errorlevel%\n) else if \"%package:.zip=%.zip\" == \"%package%\" (\n  if \"https://github.com/%package:https://github.com/=%\" == \"%package%\" (\n     set user_repo_path=%package:https://github.com/=%\n     set archive_name=%package:*/archive/=%\n     for /f \"tokens=1 usebackq delims=.\" %%g in ('!archive_name!') do set branch=%%g\n     call set package_repo=%%user_repo_path:/archive/!archive_name!=%%\n     call :download_package\n  ) else (\n    set package_file=%package%\n    call :install_zip_package\n  )\n  goto :after_install_package\n)\n\n:prefer_plum_installer\nif \"%use_plum%\" == \"1\" (\n  call :install_with_plum %package%\n  goto after_install_package\n)\n:fallback_to_builtin_installer\nset branch=\nif \"https://github.com/%package:https://github.com/=%\" == \"%package%\" (\n  set user_repo_path=%package:https://github.com/=%\n  if not \"%package:/tree/=%\" == \"%package%\" (\n    set branch=%package:*/tree/=%\n  )\n  if defined branch (\n    call set package_repo=%%user_repo_path:/tree/!branch!=%%\n  ) else (\n    set package_repo=!user_repo_path!\n  )\n  call :download_package\n) else if \"%package:-packages.bat=%-packages.bat\" == \"%package%\" (\n  call \"%package%\"\n  call :install_package_group\n) else if \":%package::=%\" == \"%package%\" (\n  call \"%package::=%-packages.bat\"\n  call :install_package_group\n) else if not \"%package:/=%\" == \"%package%\" (\n  for /f \"tokens=1,2 usebackq delims=@\" %%g in ('%package%') do (\n    set package_repo=%%g\n    set branch=%%h\n  )\n  call :download_package\n) else (\n  for /f \"tokens=1,2 usebackq delims=@\" %%g in ('%package%') do (\n    set user_repo_path=%%g\n    set branch=%%h\n  )\n  set package_repo=rime/rime-!user_repo_path:rime-=!\n  call :download_package\n)\n:after_install_package\nif not errorlevel 1 set /a installed_packages+=1\nexit /b %errorlevel%\n\n:download_package\nif not defined downloader (\n  set error_message=Downloader not found.\n  goto error\n)\ncall :install_7z /needed\nif errorlevel 1 exit /b %errorlevel%\nif not defined branch (\n  for /f \"tokens=2 usebackq delims=:, \" %%g in (`\n    %downloader% https://api.github.com/repos/%package_repo% ^| findstr default_branch\n  `) do set branch=%%~g\n)\nset package_url=https://github.com/%package_repo%/archive/%branch%.zip\necho.\necho Downloading %package_url% ...\necho.\nset package_file=%download_cache_dir%\\%package_repo:*/=%-%branch%.zip\nif \"%no_update%\" == \"1\" if exist \"%package_file%\" goto skip_download_package\n%downloader% \"%package_url%\" %save_to% \"%package_file%\"\nif errorlevel 1 (\n  set error_message=Error downloading %package_url%\n  goto error\n)\n:skip_download_package\ncall :install_zip_package\nexit /b %errorlevel%\n\n:install_zip_package\ncall :install_7z /needed\nif errorlevel 1 exit /b %errorlevel%\necho.\necho Unpacking %package_file% ...\necho.\nfor %%f in (%package_file%) do set package_dir=%%~nf\nset unpack_package_dir=%TEMP%\\%package_dir%\nrem clean up obsolete files in target directory\nif exist \"%unpack_package_dir%\" rmdir /s /q \"%unpack_package_dir%\"\nrem unzip package\n7z x \"%package_file%\" -o\"%TEMP%\" -y\nif errorlevel 1 (\n  set error_message=Error unpacking package %package_file%\n  goto error\n)\nif not exist \"%rime_dir%\" (\n  mkdir \"%rime_dir%\"\n  if errorlevel 1 (\n    set error_message=Error creating rime user directory: %rime_dir%\n    goto error\n  )\n)\nrem install files from the unzipped package\npushd \"%unpack_package_dir%\"\nfor %%f in (\n    *.yaml\n    *.txt\n    opencc\\*.json\n    opencc\\*.ocd\n    opencc\\*.txt\n) do (\n  echo.\n  echo Installing %%f ...\n  echo.\n  set target_file=%rime_dir%\\%%f\n  for %%t in (!target_file!) do set target_dir=%%~dpt\n  if not exist \"!target_dir!\" mkdir \"!target_dir!\"\n  copy /y \"%%f\" \"!target_file!\"\n  if errorlevel 1 (\n    popd\n    set error_message=Error installing files from package %package%\n    goto error\n  )\n)\npopd\nexit /b\n\n:install_package_group\nif not defined package_list (\n  set error_message=package_list is undefined in %package%\n  goto error\n)\nfor %%p in (%package_list%) do (\n  set package=%%p\n  call :install_package\n  if errorlevel 1 exit /b !errorlevel!\n)\nexit /b\n\n:install_with_plum\ncall :install_git /needed\nif errorlevel 1 exit /b %errorlevel%\n\nset WSLENV=plum_dir:rime_dir\n\nif defined plum_dir if exist \"%plum_dir%\"/rime-install (\n   bash \"%plum_dir%\"/rime-install %*\n   exit /b !errorlevel!\n)\nif exist plum/rime-install (\n  bash plum/rime-install %*\n) else if exist rime-install (\n  bash rime-install %*\n) else (\n  echo Downloading rime-install ...\n  set script_url=https://raw.githubusercontent.com/rime/plum/master/rime-install\n  curl -fsSL \"!script_url!\" -o \"%download_cache_dir%\"/rime-install\n  if errorlevel 1 (\n    set error_message=Error downloading rime-install\n    goto error\n  )\n  bash \"%download_cache_dir%\"/rime-install %*\n)\nexit /b %errorlevel%\n\n:install_7z\nwhere /q 7z\nif not errorlevel 1 (\n   if \"%1\" == \"/needed\" exit /b\n   echo.\n   echo Found 7z\n   echo.\n   exit /b\n)\n\nrem check for updates at https://www.7-zip.org/download.html\nif not defined _7z_version set _7z_version=18.01\n\nif \"%arch%\" == \"64\" (set _7z_arch=-x%arch%) else (set _7z_arch=)\nset _7z_installer=7z%_7z_version:.=%%_7z_arch%.exe\n\nrem find local 7z installer\nwhere /q %_7z_installer%\nif not errorlevel 1 (\n   echo.\n   echo Found installer: %_7z_installer%\n   echo.\n   set _7z_installer_path=%_7z_installer%\n   goto run_7z_installer\n)\n\nset _7z_installer_path=%download_cache_dir%\\%_7z_installer%\nif \"%no_update%\" == \"1\" if exist \"%_7z_installer_path%\" goto run_7z_installer\n\n:download_7z_installer\nset _7z_download_url=https://www.7-zip.org/a/%_7z_installer%\nif not defined downloader (\n   echo.\n   echo TODO: please download and install 7z: %_7z_download_url%\n   echo.\n   set error_message=Downloader not found.\n   goto error\n)\necho.\necho Downloading installer: %_7z_installer%\necho.\n%downloader% \"%_7z_download_url%\" %save_to% \"%_7z_installer_path%\"\nif errorlevel 1 (\n  set error_message=Error downloading %_7z_installer%\n  goto error\n)\nrem TODO: verify installer\necho.\necho Download complete: %_7z_installer%\necho.\n\n:run_7z_installer\necho.\necho Installing 7z ...\necho.\n\"%_7z_installer_path%\" /S\n\nexit /b\n\n:install_git\nwhere /q git\nif not errorlevel 1 (\n   if \"%1\" == \"/needed\" exit /b\n   echo.\n   echo Found git\n   echo.\n   exit /b\n)\n\nrem check for updates at https://github.com/git-for-windows/git/releases/latest\nif not defined git_version set git_version=2.17.0\nif not defined git_release set git_release=.1\n\nset git_installer=Git-%git_version%%git_release:.1=%-%arch%-bit.exe\nrem find local Git installer\nwhere /q %git_installer%\nif not errorlevel 1 (\n   echo.\n   echo Found installer: %git_installer%\n   echo.\n   set git_installer_path=%git_installer%\n   goto run_git_installer\n)\n\nset git_installer_path=%download_cache_dir%\\%git_installer%\nif \"%no_update%\" == \"1\" if exist \"%git_installer_path%\" goto run_git_installer\n\n:download_git_installer\nset git_download_url_prefix=https://github.com/git-for-windows/git/releases/download/\nset git_download_url=%git_download_url_prefix%v%git_version%.windows%git_release%/%git_installer%\n\nif not defined downloader (\n   echo.\n   echo TODO: please download and install git: %git_download_url%\n   echo.\n   set error_message=Downloader not found.\n   goto error\n)\necho.\necho Downloading installer: %git_installer%\necho.\n%downloader% \"%git_download_url%\" %save_to% \"%git_installer_path%\"\nif errorlevel 1 (\n   set error_message=Error downloading %git_installer%\n   goto error\n)\nrem TODO: verify installer\necho.\necho Download complete: %git_installer%\necho.\n\n:run_git_installer\necho.\necho Installing git ...\necho.\n\"%git_installer_path%\" /SILENT\n\nexit /b\n\n:find_7z\nset search_path=^\n%ProgramFiles%\\7-Zip;\n\nif defined ProgramW6432 set search_path=%search_path%^\n%ProgramW6432%\\7-Zip;\n\nif defined ProgramFiles(x86) set search_path=%search_path%^\n%ProgramFiles(x86)%\\7-Zip;\n\nset PATH=%search_path%%PATH%\n\nwhere /q 7z\nif %errorlevel% equ 0 set has_7z=1\nexit /b\n\n:find_git_bash\nset search_path=^\n%ProgramFiles%\\Git\\cmd;^\n%ProgramFiles%\\Git\\mingw%arch%\\bin;^\n%ProgramFiles%\\Git\\usr\\bin;\n\nrem find 64-bit Git in 32-bit cmd.exe\nif defined ProgramW6432 set search_path=%search_path%^\n%ProgramW6432%\\Git\\cmd;^\n%ProgramW6432%\\Git\\mingw%arch%\\bin;^\n%ProgramW6432%\\Git\\usr\\bin;\n\nrem find user installed 32-bit Git on 64-bit OS\nif defined ProgramFiles(x86) set search_path=%search_path%^\n%ProgramFiles(x86)%\\Git\\cmd;^\n%ProgramFiles(x86)%\\Git\\mingw32\\bin;^\n%ProgramFiles(x86)%\\Git\\usr\\bin;\n\nset PATH=%search_path%%PATH%\n\nwhere /q git\nif %errorlevel% equ 0 set has_git=1\n\nwhere /q bash\nif %errorlevel% equ 0 set has_bash=1\n\nif \"%has_git%\" == \"1\" if \"%has_bash%\" == \"1\" set has_git_bash=1\nexit /b\n\n:find_downloader\nwhere /q curl\nif %errorlevel% equ 0 (\n   set downloader=curl -fsSL\n   set save_to=-o\n   goto downloader_found\n)\n\nwhere /q powershell\nif %errorlevel% equ 0 (\n   set downloader=powershell Invoke-WebRequest\n   set save_to=-OutFile\n   goto downloader_found\n)\n:downloader_found\nexit /b\n\n:error\necho.\necho Installation failed: %error_message%\necho.\nexit /b 1\n\n:finish\necho.\nif %installed_packages% equ 0 (\n  echo No package installed.\n) else (\n  echo Installed %installed_packages% packages.\n)\necho.\n\n:exit\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}