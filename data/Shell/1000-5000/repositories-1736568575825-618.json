{
  "metadata": {
    "timestamp": 1736568575825,
    "page": 618,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYxOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "newbit1/rootAVD",
      "stars": 1486,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.015625,
          "content": "*.sh text eol=lf"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0595703125,
          "content": ".DS_Store\nApps/*\ninitramfs.img\nbzImage\n*.rc\nlibbusybox*\nsbin*"
        },
        {
          "name": "Apps",
          "type": "tree",
          "content": null
        },
        {
          "name": "CompatibilityChart.md",
          "type": "blob",
          "size": 6.2919921875,
          "content": "### Compatibility Chart with Google <b><img src=\"https://user-images.githubusercontent.com/37043777/140272882-10a9b396-550c-40c7-b809-2ca05527f7a5.png\" width=\"15\"> PlayStore</b> System Images<b><br>\n</b>\n<table>\n<tbody>\n<tr>\n<th rowspan=\"2\" align=\"center\">Android</th>\n<th rowspan=\"2\" align=\"center\">API Level</th>\n<th rowspan=\"2\" align=\"center\">Rev.</th>\n<th rowspan=\"2\" align=\"center\">CPU/ABI</th>\n<th rowspan=\"2\" align=\"center\">Arch</th>\n<th rowspan=\"2\" align=\"center\">Build</th>\n<th colspan=\"3\" align=\"center\">Magisk v24.3</th>\n</tr>\n<tr>\n<th>Stable</th>\n<th>Canary</th>\n<th>Alpha</th>\n</tr>\n<tr>\n<td rowspan=\"3\" align=\"center\">Tiramisu</td>\n<td align=\"center\"><br>\n</td>\n<td align=\"center\"><br>\n</td>\n<td align=\"center\"><br>\n</td>\n<td rowspan=\"8\" align=\"center\">64-Bit</td>\n<td align=\"center\"><br>\n</td>\n<td rowspan=\"23\" align=\"center\">:heavy_check_mark:</td>\n<td rowspan=\"23\" align=\"center\">:heavy_check_mark:</td>\n<td rowspan=\"23\" align=\"center\">:heavy_check_mark:</td>\n</tr>\n<tr>\n<td align=\"center\">33</td>\n<td align=\"center\">r05</td>\n<td align=\"center\">x86_64</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-33_r05.zip\"\nmoz-do-not-send=\"true\">Windows<br>\nDarwin<br>\nMacOS<br>\nLinux</a></td>\n</tr>\n<tr>\n<td align=\"center\">32</td>\n<td align=\"center\">r02</td>\n<td align=\"center\">x86_64</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-Tiramisu_r02.zip\">Windows<br>\nDarwin<br>\nMacOS<br>\nLinux</a></td>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">12 (S)</td>\n<td rowspan=\"2\" align=\"center\">32 (Sv2)</td>\n<td rowspan=\"2\" align=\"center\">r01</td>\n<td rowspan=\"2\" align=\"center\">x86_64</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-Sv2_r01-windows.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-Sv2_r01-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">31</td>\n<td rowspan=\"2\" align=\"center\">r08</td>\n<td align=\"center\">ARM 64 v8a</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/arm64-v8a-31_r08-darwin.zip\">(M1)\nDarwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\">x86_64</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-31_r08-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td rowspan=\"5\" align=\"center\">11 (R)</td>\n<td rowspan=\"5\" align=\"center\">30</td>\n<td rowspan=\"3\" align=\"center\">r10</td>\n<td align=\"center\">ARM 64 v8a</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/arm64-v8a-30_r10-darwin.zip\">(M1)\nDarwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">x86_64</td>\n<td rowspan=\"2\" align=\"center\">32-Bit<br>\n64-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-windows.zip\">Windows</a></td>\n</tr>\n<tr>\n<td rowspan=\"2\" align=\"center\">r09</td>\n<td rowspan=\"2\" align=\"center\">x86</td>\n<td rowspan=\"2\" align=\"center\">32-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-windows.zip\">Windows</a></td>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">10 (Q)</td>\n<td rowspan=\"4\" align=\"center\">29</td>\n<td rowspan=\"4\" align=\"center\">r08</td>\n<td rowspan=\"2\" align=\"center\">x86_64</td>\n<td rowspan=\"2\" align=\"center\">32-Bit<br>\n64-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-29_r08-windows.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-29_r08-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td rowspan=\"4\" align=\"center\">x86</td>\n<td rowspan=\"4\" align=\"center\">32-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-29_r08-windows.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-29_r08-darwin.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\">8 (Oreo)</td>\n<td align=\"center\">26</td>\n<td align=\"center\">r07</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-26_r07.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\">7 (Nougat)</td>\n<td align=\"center\">24</td>\n<td align=\"center\">r19</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-24_r19.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\">TV 11 (R)</td>\n<td align=\"center\">30</td>\n<td rowspan=\"2\" align=\"center\">r03</td>\n<td rowspan=\"3\" align=\"center\">x86</td>\n<td rowspan=\"3\" align=\"center\">32-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/android-tv/x86-30_r03.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\">TV 10 (Q)</td>\n<td align=\"center\">29</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/android-tv/x86-29_r03.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\">Wear 8 (Oreo)</td>\n<td align=\"center\">26</td>\n<td align=\"center\">r04</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/android-wear/x86-26_r04.zip\">Darwin<br>\nMacOS</a></td>\n</tr>\n<tr>\n<td align=\"center\">Automotive 11 (R)</td>\n<td align=\"center\">30</td>\n<td rowspan=\"2\" align=\"center\">r01</td>\n<td align=\"center\">x86_64</td>\n<td align=\"center\">32-Bit<br>\n64-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/android-automotive/x86_64-30_r01.zip\">Windows</a></td>\n</tr>\n<tr>\n<td align=\"center\">Automotive 10 (Q)</td>\n<td align=\"center\">29</td>\n<td align=\"center\">x86</td>\n<td align=\"center\">32-Bit</td>\n<td align=\"center\"><a\nhref=\"https://dl.google.com/android/repository/sys-img/android-automotive/x86-29_r01.zip\">Windows</a></td>\n</tr>\n</tbody>\n</table>\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "Magisk.zip",
          "type": "blob",
          "size": 11013.935546875,
          "content": ""
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 34.072265625,
          "content": "# This Repo will be archived at the 24th of Oct 2023\n# Due to the forced 2FA Mumbo Jumbo from GitHub,\n# this Repo has moved to GitLab\n# [rootAVD](https://gitlab.com/newbit/rootAVD)\n### [newbit @ xda-developers](https://forum.xda-developers.com/m/newbit.1350876)\nA Script to...\n* root your Android Studio Virtual Device (AVD), with Magisk (Stable, Canary or Alpha)\n* patch its fstab\n* download and install the USB HOST Permissions Module for Magisk\n* install custom build Kernel and its Modules\n* download and install AOSP prebuilt Kernel and its Modules\n\n...within seconds.\n\n## Install Magisk\n### Download rootAVD via\n* [Click](https://github.com/newbit1/rootAVD/archive/refs/heads/master.zip)\n* `git clone https://github.com/newbit1/rootAVD.git`\n\n### Preconditions\n* the AVD is running\n* a working Internet connection for the Menu\n* a command prompt / terminal is opened\n* `adb shell` will connect to the running AVD\n### Use Case Examples\n#### on MacOS\n<img src=\"https://github.com/newbit1/video-files/blob/master/rootAVD_MacOS.gif\" width=\"50%\" height=\"50%\"/>\n\n#### BlueStacks 4 on MacOS\n<img src=\"https://github.com/newbit1/video-files/blob/master/rootAVD_MacOS_BlueStacks.gif\" width=\"50%\" height=\"50%\"/>\n\n#### on Windows\n<img src=\"https://github.com/newbit1/video-files/blob/master/rootAVD_Windows.gif\" width=\"50%\" height=\"50%\"/>\n\n#### on Linux\n<img src=\"https://github.com/newbit1/video-files/blob/master/rootAVD_Linux.gif\" width=\"50%\" height=\"50%\"/>\n\n#### Fake Boot.img on MacOS\n<img src=\"https://github.com/newbit1/video-files/blob/master/rootAVD_MacOS_FAKEBOOTIMG.gif\" width=\"50%\" height=\"50%\"/>\n\n### How to Install ADB (Android SDK Platform-Tools)\n* Open Android Studio -> SDK Manager -> Android SDK -> SDK Tools -> Check on **Android SDK Platform-Tools** -> Apply\n<img src=\"https://user-images.githubusercontent.com/37043777/140064719-ea2dd704-1aea-4c38-9725-3edbdafe7924.png\" width=\"200\" height=\"200\" />\n\n## rootAVD Help Menu\n```\nrootAVD A Script to root AVD by NewBit XDA\n\nUsage:  rootAVD [DIR/ramdisk.img] [OPTIONS] | [EXTRA ARGUMENTS]\nor:     rootAVD [ARGUMENTS]\n\nArguments:\n        ListAllAVDs                     Lists Command Examples for ALL installed AVDs\n\n        InstallApps                     Just install all APKs placed in the Apps folder\n\nMain operation mode:\n        DIR                             a path to an AVD system-image\n                                        - must always be the 1st Argument after rootAVD\n\nADB Path | Ramdisk DIR| ANDROID_HOME:\n        [M]ac/Darwin:                   export PATH=~/Library/Android/sdk/platform-tools:$PATH\n                                        export PATH=$ANDROID_HOME/platform-tools:$PATH\n                                        system-images/android-$API/google_apis_playstore/x86_64/\n\n        [L]inux:                        export PATH=~/Android/Sdk/platform-tools:$PATH\n                                        export PATH=$ANDROID_HOME/platform-tools:$PATH\n                                        system-images/android-$API/google_apis_playstore/x86_64/\n\n        [W]indows:                      set PATH=%LOCALAPPDATA%\\Android\\Sdk\\platform-tools;%PATH%\n                                        system-images\\android-$API\\google_apis_playstore\\x86_64\\\n\n        ANDROID_HOME:                   By default, the script uses %LOCALAPPDATA%, to set its Android Home\n                                        directory, search for AVD system-images and ADB binarys. This behaviour\n                                        can be overwritten by setting the ANDROID_HOME variable.\n                                        e.g. set ANDROID_HOME=%USERPROFILE%\\Downloads\\sdk\n\n        $API:                           25,29,30,31,32,33,34,UpsideDownCake,etc.\n\nOptions:\n        restore                         restore all existing .backup files, but doesn't delete them\n                                        - the AVD doesn't need to be running\n                                        - no other Argument after will be processed\n\n        InstallKernelModules            install custom build kernel and its modules into ramdisk.img\n                                        - kernel (bzImage) and its modules (initramfs.img) are inside rootAVD\n                                        - both files will be deleted after installation\n\n        InstallPrebuiltKernelModules    download and install an AOSP prebuilt kernel and its modules into ramdisk.img\n                                        - similar to InstallKernelModules, but the AVD needs to be online\n\nOptions are exclusive, only one at the time will be processed.\n\nExtra Arguments:\n        DEBUG                           Debugging Mode, prevents rootAVD to pull back any patched file\n\n        PATCHFSTAB                      fstab.ranchu will get patched to automount Block Devices like /dev/block/sda1\n                                        - other entries can be added in the script as well\n                                        - a custom build Kernel might be necessary\n\n        GetUSBHPmodZ                    The USB HOST Permissions Module Zip will be downloaded into /sdcard/Download\n\n        FAKEBOOTIMG                     Creates a fake Boot.img file that can directly be patched from the Magisk APP\n                                        - Magisk will be launched to patch the fake Boot.img within 60s\n                                        - the fake Boot.img will be placed under /sdcard/Download/fakeboot.img\n\nExtra Arguments can be combined, there is no particular order.\n\nNotes: rootAVD will\n- always create .backup files of ramdisk*.img and kernel-ranchu\n- replace both when done patching\n- show a Menu, to choose the Magisk Version (Stable || Canary || Alpha), if the AVD is online\n- make the choosen Magisk Version to its local\n- install all APKs placed in the Apps folder\n- use %LOCALAPPDATA%\\Android\\Sdk to search for AVD system images\n```\n### Linux & MacOS\n```\nCommand Examples:\n./rootAVD.sh\n./rootAVD.sh ListAllAVDs\n./rootAVD.sh InstallApps\n\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img restore\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-33/google_apis_playstore/x86_64/ramdisk.img AddRCscripts\n```\n\n<details>\n<summary>Command Examples: for ALL installed AVDs</summary>\n\n```\n./rootAVD.sh\n./rootAVD.sh ListAllAVDs\n./rootAVD.sh InstallApps\n\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img restore\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-25/google_apis/armeabi-v7a/ramdisk.img AddRCscripts\n\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img restore\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-25/google_apis/x86_64/ramdisk.img AddRCscripts\n\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img restore\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-30/google_apis_playstore/x86/ramdisk.img AddRCscripts\n\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img restore\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img InstallKernelModules\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk-qemu.img AddRCscripts\n\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img restore\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-30/android-automotive-playstore/x86_64/ramdisk.img AddRCscripts\n\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img FAKEBOOTIMG\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img restore\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img InstallKernelModules\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img InstallPrebuiltKernelModules\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n./rootAVD.sh system-images/android-29/android-automotive-playstore/x86/ramdisk.img AddRCscripts\n```\n</details>\n\n### Windows\n```\nCommand Examples:\nrootAVD.bat\nrootAVD.bat ListAllAVDs\nrootAVD.bat InstallApps\n\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img FAKEBOOTIMG\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img restore\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallKernelModules\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n```\n\n<details>\n<summary>Command Examples: for ALL installed AVDs</summary>\n\n```\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img FAKEBOOTIMG\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img restore\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallKernelModules\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules\nrootAVD.bat system-images\\android-33\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img FAKEBOOTIMG\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img restore\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img InstallKernelModules\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\x86_64\\ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img FAKEBOOTIMG\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img DEBUG PATCHFSTAB GetUSBHPmodZ\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img restore\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img InstallKernelModules\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img InstallPrebuiltKernelModules\nrootAVD.bat system-images\\android-25\\google_apis_playstore\\armeabi-v7a\\ramdisk.img InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\n```\n</details>\n\n### Notes\n* 64 Bit Only Systems needs Magisk 23.x\n* In the Menu, you can choose between the newest Magisk, Canary, Stable and Alpha, Version.\n* With the new Option `s`, you can see and download any other Versions of Magisk\n* Once choosen, the script will make that Version to your local one.\n* Prebuilt Kernel and Modules will be pulled from [AOSP](https://android.googlesource.com/kernel/prebuilts)\n* Starting Magisk from Terminal via `adb shell monkey -p com.topjohnwu.magisk -c android.intent.category.LAUNCHER 1`\n* API 28 (Pie) is **not supported** at all -> [because](https://source.android.com/devices/bootloader/partitions/system-as-root#sar-partitioning)\n* Magisk Versions >= 26.x can only be proper installed with the FAKEBOOTIMG argument\n\t* due to the [New sepolicy.rule Implementation](https://github.com/topjohnwu/Magisk/releases/tag/v26.1)\n* Android 14 needs Magisk Version >= 26.x to be rooted\n\n### ANDROID_HOME\n* Default location can be overwritten by setting the `ANDROID_HOME` variable\n* In both cases, the script will search in it for AVD system-images and adb binarys\n* `ANDROID_HOME` Sets the path to the SDK installation directory -> [AOSP Variables reference](https://developer.android.com/tools/variables#envar)\n\n### Notes for Apk Developers\n* [How-To SU](http://su.chainfire.eu) from [Chainfire's](https://github.com/Chainfire) [libsuperuser](https://github.com/Chainfire/libsuperuser) - Guidelines for problem-free su usage (for Android Developers)\n* [TopJohnWu's libsu](https://github.com/topjohnwu/libsu) - An Android library providing a complete solution for apps using root permissions\n\n### Fake Boot.img Function\n* During runtime, the script will launch the Magisk APK so that you can patch the fake Boot.img within 60s\n* The script also detects if there is already a patched Boot.img present\n* This feature lets you also update and switch between Magisk Versions\n\t* Updating a patched ramdisk will delete the overlay.d folder, all mods are gone!\n* If Magisk can't open a file manager, i.e. on Automotive AVDs,\n\t* download and install the famous [X-plore file manager](https://www.lonelycatgames.com/apps/xplore)\n* The script switches to user 0, so that you can see `/sdcard/Download/fakeboot.img`\n\n### 2 Ways to boot the AVD into Safe Mode\n* 1st Way - If the AVD still boots normal:\n\t* Tap and Hold the **Power Button** until the 3 Options appear\n\t* Tap and Hold the **Power Off Button** until **Reboot to safe mode** appears\n* 2nd Way - If the AVD stuck while booting (**black** screen):\n\t* Tap and Hold the **Volume Down Button**\n\t* The Time Window is between the **Launching Emulator Bar** is approx **half way** until the **Google Boot Screen** appears\n* Confirmation\n\t* On the Bottom Left Corner reads: **Safe mode**\n\n### Automotive Notes\n* After patching the ramdisk.img and cycle power, switch to user 0 via `adb shell am switch-user 0`\n\t* open the Magisk App and the **Requires Additional Setup** pops up -> reboot AVD\n\t* switch again to user 0\n\t\t* open the Magisk App -> Settings -> Multiuser Mode -> **User-Independent** -> reboot AVD\n* Every time you want to Grant Su Permissions, switch to user 0 and then back to 10 `adb shell am switch-user 10`\n* Alternative, you can install the Module [Magisk Single User Mod](https://github.com/newbit1/msum)\n\t* and remove all user higher than 0 i.e. `adb shell pm remove-user 13` or `adb shell pm remove-user 10`\n\n### BlueStacks 4 Notes on MacOs\n* Modules are working\n* Zygisk doesn't work\n* The Home Screen Apk closes as soon as Magisk APP is installed\n\t* but you can start Magisk from Terminal via `adb shell monkey -p com.topjohnwu.magisk -c android.intent.category.LAUNCHER 1`\n\t* and Hide the Magisk APP to Settings i.e.\n* ADB Connection is very buggy, `adb kill-server` is necessary quite often\n\n### Links\n* [XDA [GUIDE] Build / Mod AVD Kernel Android 10 / 11 rootAVD [Magisk] [USB passthrough Linux] [Google Play Store API]](https://forum.xda-developers.com/t/guide-build-mod-avd-kernel-android10-x86_64-29-root-magisk-usb-passthrough-linux.4212719)\n* [Inject Android Hardware USB HOST Permissions](https://github.com/newbit1/usbhostpermissons)\n* [XDA [SCRIPT] rootAVD - root your Android Studio Virtual Device emulator with Magisk [Android 12][Linux][Darwin/MacOS][WIN][Google Play Store APIs]](https://forum.xda-developers.com/t/script-rootavd-root-your-android-studio-virtual-device-emulator-with-magisk-android-11-linux-darwin-macos-win-google-play-store-apis.4218123)\n* [rootCROS - A Script to root your Google Chrome OS installed on a non Chromebook Device](https://github.com/newbit1/rootCROS)\n\n### XDA [GUIDE] How to [Build|Mod|Update] a custom AVD Kernel and its Modules\n* [[GUIDE][Build|Mod|Update][kernel-ranchu][goldfish][5.4][5.10][GKI][ramdisk.img][modules][rootAVD][Android 11(R) 12(S)][AVD][Google Play Store API]](https://forum.xda-developers.com/t/guide-build-mod-update-kernel-ranchu-goldfish-5-4-5-10-gki-ramdisk-img-modules-rootavd-android-11-r-12-s-avd-google-play-store-api.4220697)\n\n### How to root AVDs without Play Store (Google APIs) out of the box\n### Windows\n* open a terminal -> win + r `cmd`\n\t* add emulator to your PATH\n\t* find your AVD\n\t* launch your AVD with the `-writable-system` argument\n\t```\n\tset PATH=%LOCALAPPDATA%\\Android\\Sdk\\emulator;%PATH%\n\temulator -list-avds\n\t\tPixel_4_API_29\n\temulator -avd Pixel_4_API_29 -writable-system\n\t```\n* open a 2nd terminal -> win + r `cmd`\n\t* enter the following commands one by one\n\t```\n\tset PATH=%LOCALAPPDATA%\\Android\\Sdk\\platform-tools;%PATH%\n\tadb root\n\tadb shell avbctl disable-verification\n\tadb disable-verity\n\tadb reboot\n\tadb root\n\tadb remount\n\tadb shell\n\tgeneric_x86_64:/ #\n\t```\n\n### [Compatibility Chart](CompatibilityChart.md)\n<details>\n<summary>Archive</summary>\n### Magisk v23.0 Alpha Successfully tested with Stock Kernel on\n* [[Oct. 2021] - Android 12 (S) API 32 Google Apis Play Store x86_64 Sv2 r01 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-Sv2_r01-windows.zip)\n* [[Oct. 2021] - Android 12 (S) API 32 Google Apis Play Store x86_64 Sv2 r01 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-Sv2_r01-darwin.zip)\n* [[Oct. 2021] - Android 12 (S) API 31 Google Apis Play Store ARM 64 v8a r08 (M1) Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/arm64-v8a-31_r08-darwin.zip)\n* [[Oct. 2021] - Android 11 (R) API 30 Google Apis Play Store ARM 64 v8a r10 (M1) Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/arm64-v8a-30_r10-darwin.zip)\n* [[Oct. 2021] - Android 12 (S) API 31 Google Apis Play Store x86_64 r08 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-31_r08-darwin.zip)\n* [[Oct. 2021] - Android 11 (R) API 30 Google Apis Play Store x86 r09 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-darwin.zip)\n* [[Oct. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-darwin.zip)\n\n### Magisk v22.1+ Successfully tested with Stock Kernel on\n* [[Oct. 2021] - Android  8 (Oreo) API 26 Google Apis Play Store x86 r07 Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-26_r07.zip)\n* [[Oct. 2021] - Android  7 (Nougat) API 24 Google Apis Play Store x86 r19 Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-24_r19.zip)\n* [[Oct. 2021] - Android  7 (Nougat) API 24 Google Apis x86_64 r27 Production Build](https://dl.google.com/android/repository/sys-img/google_apis/x86_64-24_r27.zip)\n* [[Oct. 2021] - Android 11 (R) API 30 Google Apis Play Store x86 r09 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-windows.zip)\n* [[Oct. 2021] - Android 10 (Q) API 29 Google Apis Play Store x86 r08 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-29_r08-windows.zip)\n* [[Oct. 2021] - Android 11 (R) API 30 Google Apis Play Store x86 r09 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-darwin.zip)\n* [[Oct. 2021] - Android 10 (Q) API 29 Google Apis Play Store x86 r08 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-29_r08-darwin.zip)\n* [[June 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r05 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r05-darwin.zip)\n* [[Apr. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r04 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r04-darwin.zip)\n* [[May. 2021] - Android Wear 8 (Oreo) API 26 Google Apis Play Store x86 r04 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/android-wear/x86-26_r04.zip)\n* [[May. 2021] - Android TV 11 (R) API 30 Google Apis Play Store x86 r03 Windows Production Build](https://dl.google.com/android/repository/sys-img/android-tv/x86-30_r03.zip)\n* [[May. 2021] - Android TV 10 (Q) API 29 Google Apis Play Store x86 r03 Windows Production Build](https://dl.google.com/android/repository/sys-img/android-tv/x86-29_r03.zip)\n* [[May. 2021] - Android 10 (Q) API 29 Google Apis Play Store x86 r01 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/android-automotive/x86-29_r01.zip)\n* [[Apr. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r03 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r03-windows.zip)\n* [[Apr. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r03 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r03-darwin.zip)\n* [[Mar. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r02 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r02-darwin.zip)\n* [[Mar. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r01 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r01-darwin.zip)\n* [[Mar. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r02 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r02-windows.zip)\n* [[Mar. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r01 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-S_r01-windows.zip)\n* [[Mar. 2021] - Android 12 (S) API 30 Google Apis Play Store x86_64 r01 Darwin/MacOS User Debug Build](https://dl.google.com/android/repository/sys-img/google_apis/x86_64-S_r01.zip)\n* [[Mar. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-darwin.zip)\n* [[Mar. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-windows.zip)\n* [[Mar. 2021] - Android 10 (Q) API 29 Google Apis Play Store x86_64 r08 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-29_r08-darwin.zip)\n* [[Mar. 2021] - Android 10 (Q) API 29 Google Apis Play Store x86_64 r08 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-29_r08-windows.zip)\n\n</details>\n\n### Change Logs\n\n#### [August 2023]\n\n* [rootAVD.sh] - Added Pagesize Padding in the fakeboot.img\n* [rootAVD.sh] - Updated the creation of the fakeboot.img\n* [rootAVD.sh] - Added another way of checking the AVDs Internet connection\n\n#### [July 2023]\n* [rootAVD.bat] - Fixed file ListAllAVDs not found bug\n* [rootAVD.bat] - Fixed some errors with double spaces\n* [rootAVD.bat] - Added TestADBWORKDIR routine\n\n#### [June 2023]\n* [rootAVD.sh] - improved finding BusyBox routine, and once again\n* [rootAVD.sh] - rewritten the file and folder handling entirely, Darwin and Linux\n* [rootAVD.sh] - improved finding BusyBox routine, again\n* [General] - Added `.gitattributes` with `*.sh text eol=lf` to force UNIX line ending on Windows\n* [rootAVD.bat] - rewritten the file and folder handling entirely\n* [rootAVD.bat] - fixed typos and bug fixes\n* [rootAVD.bat] - updated the TestADB routine, adb path will now be set automatically\n* [rootAVD.bat] - updated Exit calls\n* [General] - updated the README.md\n\n#### [May 2023]\n* [rootAVD.sh] - removed Busybox from Script\n\n#### [April 2023]\n* [General] - added link to X-plore file manager\n* [General] - added link to Magisk Single User Mod\n* [General] - added switching to user 0 when running FAKEBOOTIMG\n* [rootAVD.bat] - changed return 1 to return 0\n* [rootAVD.sh] - changed return 1 to return 0\n* [rootAVD.sh] - changed copy and move routine\n* [rootAVD.sh] - added support for ramdisk-qemu.img\n\n<details>\n<summary>Archive</summary>\n\n### Change Logs\n#### [December 2022]\n* [rootAVD.sh] - Fixed arithmetic syntax error in decompress_ramdisk\n#### [November 2022]\n* [General] - Bug fixes\n* [General] - Updated to Magisk Stable Version 25.2\n* [General] - Added FAKEBOOTIMG Use Case Examples as Gif\n* [rootAVD.sh] - Added support for adding the stub.apk if present\n* [General] - Added support for already patched ramdisk files\n* [General] - removed the EnvFixTask Argument\n* [General] - Bug fixes\n* [rootAVD.sh] - Added FAKEBOOTIMG Argument that creates a fake Boot.img which can be patched directed from the Magisk APK\n#### [March 2022]\n* [rootAVD.sh] - Added toggleRamdisk Argument that toggles between patched and stock ramdisk\n* [rootAVD.sh] - Changed the need of a Magisk.zip file\n* [General] - Added Use Case Examples as Gif\n* [General] - Added Option to Download older Magisk Versions\n* [rootAVD.sh] - Added BlueStacks 4 Support on MacOS\n* [General] - Bug fixes\n#### [February 2022]\n* [General] - Updated to Magisk Stable Version 24.1\n#### [October 2021]\n* [rootAVD.sh] - Added get Up-To-Date Script Routine if Script is broken\n* [rootAVD.sh] - Updated LZ4 decompression Routine\n* [rootAVD.sh] - Updated InstallPrebuiltKernelModules Routine to support ARM64 Kernels\n* [rootAVD.sh] - Updated Busybox Extraction Routine\n* [General] - Added Multiarch Busybox Binarys and 64-Bit Only Support\n* [General] - Added Alpha Channel to the Menu\n* [rootAVD.bat] - Added Shut Down Feature\n* [rootAVD.sh] - Added Shut Down Feature\n* [General] - Added Android 12 (S) API 31 Status\n* [General] - Added Link to Android AppSecs Video about rootAVD\n#### [July 2021]\n* [rootAVD.bat] - Changed TestADB\n* [General] - Added rootCROS Project to Links\n#### [June 2021]\n* [General] - Android 12 (S) r05\n#### [May 2021]\n* [General] - Updated to Magisk App v23.0\n* [rootAVD.sh] - Added \"AddRCscripts\" Argument that **install all custom *.rc scripts, placed in the rootAVD folder, into ramdisk.img/overlay.d/sbin**\n* [rootAVD.sh] - Added BusyBox Binary after the rootAVD script\n* [rootAVD.bat] - Added ListAllAVDs and InstallApps as Arguments\n* [rootAVD.sh] - Added \"ListAllAVDs\" Argument that **Lists Command Examples for ALL installed AVDs**\n* [rootAVD.sh] - Added \"InstallApps\" Argument to **Just install all APKs placed in the Apps folder**\n* [rootAVD.bat] - Added comprehensive Help Menu\n#### [Apr. 2021]\n* [General] - Added comprehensive Help Menu\n* [rootAVD.sh] - Changed \"DEBUG\" \"PATCHFSTAB\" \"GetUSBHPmodZ\" to Arguments\n* [General] - Fixed some typos and functions\n* [rootAVD.sh] - Add a Menu to choose the prebuilt Kernel and Modules Version to install\n* [General] - Added \"InstallPrebuiltKernelModules\" download/update/install prebuilt kernel and modules\n* [General] - Added 2 Ways to boot the AVD into Safe Mode\n* [rootAVD.sh] - Added Android S rev 3 support\n* [General] - Added \"InstallKernelModules\" update/install custom build kernel and modules\n* [rootAVD.sh] - Added update_lib_modules function\n* [General] - Added \"restore\" to put back your backup files\n* [General] - Updated local Magisk App v22.1\n* [rootAVD.sh] - Added Option to Download the USB HOST Permissions Module\n#### [Mar. 2021]\n* [General] - Add a Download Manager Function for bad TLS record using wget\n* [rootAVD.bat] - Adjustments to run with the updated rootAVD.sh\n* [General] - Add a Menu to choose the Magisk Version to install\n* [rootAVD.sh] - Added EnvFixTask Argument to fix Requires Additional Setup in Android S\n* [General] - Changed to BusyBox (D)ASH Standalone\n* [General] - Re-Structured Script\n* [rootAVD.sh] - Added \"Additional Setup Required\" manually for Android S\n* [rootAVD.sh] - Updated shakalaca's Ramdisk Repack Routine\n* [rootAVD.sh] - Added Compression Detection for LZ4 and GZ\n* [General] - Fixed some bugs and typos\n* [General] - Updated to Magisk App v22.0\n### Magisk v21.4 Successfully tested with Stock Kernel on\n* [[Jan. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Darwin/MacOS Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-darwin.zip)\n* [[Jan. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Windows Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-windows.zip)\n* [[Jan. 2021] - Android 11 (R) API 30 Google Apis Play Store x86_64 r10 Linux Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-30_r10-linux.zip)\n* [[Jan. 2021] - Android 11 (R) API 30 Google Apis Play Store x86 r09 Linux Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-30_r09-linux.zip)\n* [[Dec. 2019] - Android 10 (Q) API 29 Google Apis Play Store x86_64 r09 Linux Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86_64-29_r08-linux.zip)\n* [[Dec. 2019] - Android 10 (Q) API 29 Google Apis x86_64 r11 User Debug Build](https://dl.google.com/android/repository/sys-img/google_apis/x86_64-29_r11.zip)\n* [[Jan. 2021] - Android  7 (Nougat) API 24 Google Apis Play Store x86 r19 Production Build](https://dl.google.com/android/repository/sys-img/google_apis_playstore/x86-24_r19.zip)\n\n</details>\n\n### Credits\n* [topjohnwu @ xda-developers](https://forum.xda-developers.com/m/topjohnwu.4470081)\n* [topjohnwu Magisk File Host](https://github.com/topjohnwu/magisk-files)\n* [topjohnwu Magisk](https://github.com/topjohnwu/Magisk)\n* [Magisk-Modules-Repo](https://github.com/Magisk-Modules-Repo)\n* [shakalaca @ xda-developers](https://forum.xda-developers.com/m/shakalaca.1813976)\n* [shakalaca MagiskOnEmulator](https://github.com/shakalaca/MagiskOnEmulator)\n* [huskydg @ xda-developers](https://forum.xda-developers.com/m/huskydg.11455139)\n* [huskydg MagiskOnEmu](https://github.com/HuskyDG/MagiskOnEmu)\n* [Akianonymus _json_value](https://gist.github.com/cjus/1047794#gistcomment-3313785)\n* [Tad Fisher Android Nixpkgs](https://github.com/tadfisher/android-nixpkgs)\n* [Sébastien Corne magisk-single-user](https://github.com/seebz)\n* [remote-android Native Bridge Support in ReDroid](https://github.com/remote-android/redroid-doc/tree/master/native_bridge)\n* [vvb2060 Magisk Alpha](https://github.com/vvb2060/magisk_files/)\n* [All-in-one Markdown editor by terrylinooo](https://markdown-editor.github.io/)\n* [Online Free WYSIWYG HTML Editor](https://www.htmeditor.com/author/)\n* [HTML Tidy - Online Markup Corrector](https://htmltidy.net)\n* [ffmpeg + ImageMagick. Convert video to GIF by using Terminal.app in macOS](https://acronis.design/ffmpeg-imagemagick-convert-video-to-gif-using-the-terminal-app-in-macos-657948adf900)\n* [Kazam Screencaster](https://launchpad.net/kazam)\n\n"
        },
        {
          "name": "rootAVD.bat",
          "type": "blob",
          "size": 16.87890625,
          "content": "@echo off\r\nSetLocal DisableDelayedExpansion\r\nset true=1==1\r\nset false=1==0\r\n\r\nREM ##########################################################################################\r\nREM #\r\nREM # Magisk Boot Image Patcher - original created by topjohnwu and modded by shakalaca's\r\nREM # modded by NewBit XDA for Android Studio AVD\r\nREM # Successfully tested on Android API:\r\nREM # [Dec. 2019] - 29 Google Apis Play Store x86_64 Production Build\r\nREM # [Jan. 2021] - 30 Google Apis Play Store x86_64 Production Build\r\nREM # [Apr. 2021] - 30 Android (S) Google Apis Play Store x86_64 Production Build rev 3\r\nREM #\r\nREM ##########################################################################################\r\nREM rootAVD.bat %LOCALAPPDATA%\\Android\\Sdk\\system-images\\android-S\\google_apis_playstore\\x86_64\\ramdisk.img\r\nREM rootAVD.bat %LOCALAPPDATA%\\Android\\Sdk\\system-images\\android-30\\google_apis_playstore\\x86_64\\ramdisk.img\r\nREM rootAVD.bat %LOCALAPPDATA%\\Android\\Sdk\\system-images\\android-29\\google_apis_playstore\\x86_64\\ramdisk.img\r\n\r\ncall :ProcessArguments %*\r\ncall :GetANDROIDHOME\r\n\r\nIF %DEBUG% (\r\n\techo [^!] We are in Debug Mode\r\n\techo params=%params%\r\n\techo DEBUG=%DEBUG%\r\n\techo PATCHFSTAB=%PATCHFSTAB%\r\n\techo GetUSBHPmodZ=%GetUSBHPmodZ%\r\n\techo RAMDISKIMG=%RAMDISKIMG%\r\n\techo restore=%restore%\r\n\techo InstallKernelModules=%InstallKernelModules%\r\n\techo InstallPrebuiltKernelModules=%InstallPrebuiltKernelModules%\r\n\techo ListAllAVDs=%ListAllAVDs%\r\n\techo InstallApps=%InstallApps%\r\n\techo NOPARAMSATALL=%NOPARAMSATALL%\r\n)\r\n\r\n\r\nIF NOT %InstallApps% (\r\n\tREM If there is no file to work with, abort the script\r\n\tIF \"%1\" == \"\" (\r\n\t\tcall :ShowHelpText && exit /B 0\r\n\t)\r\n\tIF %ListAllAVDs% (\r\n\t\tcall :ShowHelpText && exit /B 0\r\n\t)\r\n\tIF NOT exist \"%ANDROIDHOME%%1\" (\r\n\t\techo file %1 not found && exit /B 0\r\n\t)\r\n)\r\n\r\nREM Set Folders and FileNames\r\necho [*] Set Directorys\r\nset AVDPATHWITHRDFFILE=%ANDROIDHOME%%1\r\n\r\nfor /F \"delims=\" %%i in (\"%AVDPATHWITHRDFFILE%\") do (\r\n\tset AVDPATH=%%~dpi\r\n\tset RDFFILE=%%~nxi\r\n)\r\n\r\nREM If we can CD into the ramdisk.img, it is not a file!\r\ncd %AVDPATHWITHRDFFILE% >nul 2>&1\r\nIF \"%ERRORLEVEL%\"==\"0\" (\r\n    call :ShowHelpText && exit /B 0\r\n)\r\n\r\nIF %restore% (\r\n\tcall :restore_backups && exit /B 0\r\n)\r\n\r\ncall :TestADB\r\n\r\nREM The Folder where the script was called from\r\nset ROOTAVD=%cd%\r\nset MAGISKZIP=%ROOTAVD%\\Magisk.zip\r\n\r\nREM Kernel Names\r\nset BZFILE=%ROOTAVD%\\bzImage\r\nset KRFILE=kernel-ranchu\r\n\r\nIF %InstallApps% (\r\n\tcall :installapps && exit /B 0\r\n)\r\n\r\nset ADBWORKDIR=/data/data/com.android.shell\r\nset ADBBASEDIR=%ADBWORKDIR%/Magisk\r\necho [-] In any AVD via ADB, you can execute code without root in /data/data/com.android.shell\r\n\r\ncall :TestADBWORKDIR\r\n\r\nREM change to ROOTAVD directory\r\ncd %ROOTAVD%\r\n\r\necho [*] Cleaning up the ADB working space\r\nadb shell rm -rf %ADBBASEDIR%\r\n\r\necho [*] Creating the ADB working space\r\nadb shell mkdir %ADBBASEDIR%\r\n\r\necho [*] looking for Magisk installer Zip\r\nIF NOT exist \"%MAGISKZIP%\" (\r\n    echo [-] Please download Magisk.zip file\r\n) ELSE (\r\n\tcall :pushtoAVD \"%MAGISKZIP%\"\r\n)\r\n\r\nREM Proceed with ramdisk\r\nset INITRAMFS=%ROOTAVD%\\initramfs.img\r\n\r\nIF %RAMDISKIMG% (\r\n\tREM Is it a ramdisk named file?\r\n\r\n\techo.%RDFFILE% | findstr /I ramdisk.*.img >NUL || (\r\n\t\techo [!] please give a path to a ramdisk file\r\n\t\texit /B 0\r\n\t)\r\n\r\n\tcall :create_backup %RDFFILE%\r\n\tcall :pushtoAVD \"%AVDPATHWITHRDFFILE%\" \"ramdisk.img\"\r\n\r\n\tIF %InstallKernelModules% (\r\n\t\tIF EXIST \"%INITRAMFS%\" (\r\n\t\t\tcall :pushtoAVD \"%INITRAMFS%\"\r\n\t\t)\r\n\t)\r\n)\r\n\r\necho [-] Copy rootAVD Script into Magisk DIR\r\nadb push rootAVD.sh %ADBBASEDIR%\r\n\r\necho [-] run the actually Boot/Ramdisk/Kernel Image Patch Script\r\necho [*] from Magisk by topjohnwu and modded by NewBit XDA\r\nadb shell sh %ADBBASEDIR%/rootAVD.sh %*\r\n\r\nIF \"%ERRORLEVEL%\"==\"0\" (\r\n\tREM In Debug-Mode we can skip parts of the script\r\n\tIF NOT %DEBUG% (\r\n\t\tIF %RAMDISKIMG% (\r\n\t\t\tcall :pullfromAVD ramdiskpatched4AVD.img \"%AVDPATHWITHRDFFILE%\"\r\n\t\t\tcall :pullfromAVD Magisk.apk %ROOTAVD%\\Apps\\\r\n\t\t\tcall :pullfromAVD Magisk.zip\r\n\r\n\t\t\tIF %InstallPrebuiltKernelModules% (\r\n\t\t\t\tcall :pullfromAVD %BZFILE%\r\n\t\t\t\tcall :InstallKernelModules\r\n\t\t\t)\r\n\r\n\t\t\tIF %InstallKernelModules% (\r\n\t\t\t\tcall :InstallKernelModules\r\n\t\t\t)\r\n\r\n\t\t\techo [-] Clean up the ADB working space\r\n\t\t\tadb shell rm -rf %ADBBASEDIR%\r\n\r\n\t\t\tcall :installapps\r\n\r\n\t\t\techo [-] Shut-Down and Reboot [Cold Boot Now] the AVD and see IF it worked\r\n\t\t\techo [-] Root and Su with Magisk for Android Studio AVDs\r\n\t\t\techo [-] Modded by NewBit XDA - Jan. 2021\r\n\t\t\techo [*] Huge Credits and big Thanks to topjohnwu, shakalaca and vvb2060\r\n\t\t\tcall :ShutDownAVD\r\n\t\t)\r\n\t)\r\n)\r\n\r\nexit /B %ERRORLEVEL%\r\n\r\n:TestADBWORKDIR\r\necho [*] Testing the ADB working space\r\n\tSetLocal EnableDelayedExpansion\r\n\tset ADBWORKS=\r\n\tadb shell cd %ADBWORKDIR% > tmpFile 2>&1\r\n\tset /P ADBWORKS=<tmpFile\r\n\tdel tmpFile\r\n\r\n\techo.%ADBWORKS%| FIND /I \"No such file or directory\">Nul && (\r\n\t\techo [^^!] %ADBWORKDIR% is not available\r\n\t\tcall :_Exit 2> nul\r\n\t)\r\n\techo [^^!] %ADBWORKDIR% is available\r\n\tEndLocal\r\nexit /B 0\r\n\r\n:ShutDownAVD\r\n\tSetLocal EnableDelayedExpansion\r\n\tset ADBPULLECHO=\r\n\r\n\tadb shell setprop sys.powerctl shutdown > tmpFile 2>&1\r\n\tset /P ADBPULLECHO=<tmpFile\r\n\tdel tmpFile\r\n\r\n\techo.%ADBPULLECHO%| FIND /I \"error\">Nul || (\r\n  \t\techo [-] Trying to shut down the AVD\r\n\t)\r\n\techo [^^!] If the AVD doesnt shut down, try it manually^^!\r\n\r\n\tEndLocal\r\nexit /B 0\r\n\r\n:InstallKernelModules\r\n\tSetLocal EnableDelayedExpansion\r\n\tIF EXIST \"%BZFILE%\" (\r\n\t\tcall :create_backup %KRFILE%\r\n\t\techo [*] Copy %BZFILE% ^(Kernel^) into kernel-ranchu\r\n\t\tcopy \"%BZFILE%\" \"%AVDPATH%%KRFILE%\" >Nul\r\n\r\n\t\tIF \"%ERRORLEVEL%\"==\"0\" (\r\n\t\t\tdel \"%BZFILE%\" \"%INITRAMFS%\"\r\n\t\t)\r\n\t)\r\n\tEndLocal\r\nexit /B 0\r\n\r\n:pullfromAVD\r\n\tSetLocal EnableDelayedExpansion\r\n\tset SRC=%1\r\n\tset DST=%2\r\n\tset ADBPULLECHO=\r\n\r\n\tsetlocal enableDelayedExpansion\r\n\tfor /f \"delims=\" %%i in (\"!SRC!\") do (\r\n\t\tendlocal & REM\r\n\t\tset \"SRC=%%~nxi\"\r\n\t)\r\n\r\n\tsetlocal enableDelayedExpansion\r\n\tfor /f \"delims=\" %%i in (\"!DST!\") do (\r\n\t\tendlocal & REM\r\n\t\tset \"DST=%%~nxi\"\r\n\t)\r\n\r\n\tadb pull %ADBBASEDIR%/%SRC% %2 > tmpFile 2>&1\r\n\tset /P ADBPULLECHO=<tmpFile\r\n\tdel tmpFile\r\n\r\n\techo.%ADBPULLECHO%| FIND /I \"error\">Nul || (\r\n  \t\techo [*] Pull %SRC% into %DST%\r\n  \t\techo [-] %ADBPULLECHO%\r\n\t)\r\n\tEndLocal\r\nexit /B 0\r\n\r\n:pushtoAVD\r\n\tSetLocal EnableDelayedExpansion\r\n\tset SRC=%1\r\n\tset DST=%2\r\n\tset ADBPUSHECHO=\r\n\r\n\tsetlocal enableDelayedExpansion\r\n\tfor /f \"delims=\" %%i in (\"!SRC!\") do (\r\n\t\tendlocal & REM\r\n\t\tset \"SRC=%%~nxi\"\r\n\t)\r\n\r\n\tsetlocal enableDelayedExpansion\r\n\tfor /f \"delims=\" %%i in (\"!DST!\") do (\r\n\t\tendlocal & REM\r\n\t\tset \"DST=%%~nxi\"\r\n\t)\r\n\r\n\tIF \"%DST%\"==\"\" (\r\n\t\techo [*] Push %SRC% into %ADBBASEDIR%\r\n\t\tadb push %1 %ADBBASEDIR% > tmpFile 2>&1\r\n\t) ELSE (\r\n\t\techo [*] Push %SRC% into %ADBBASEDIR%/%DST%\r\n\t\tadb push %1 %ADBBASEDIR%/%DST% > tmpFile 2>&1\r\n\t)\r\n\tset /P ADBPUSHECHO=<tmpFile\r\n\tdel tmpFile\r\n\r\n\techo [-] %ADBPUSHECHO%\r\n\tENDLOCAL\r\nexit /B 0\r\n\r\n:create_backup\r\n\tSetLocal EnableDelayedExpansion\r\n\tset FILE=%1\r\n\tset BACKUPFILE=%FILE%.backup\r\n\r\n\tREM If no backup file exist, create one\r\n\r\n\tIF NOT EXIST \"%AVDPATH%%BACKUPFILE%\" (\r\n    \techo [*] create Backup File\r\n\t\tcopy \"%AVDPATH%%FILE%\" \"%AVDPATH%%BACKUPFILE%\" >Nul\r\n\t\tIF EXIST \"%AVDPATH%%BACKUPFILE%\" (\r\n\t\t\techo [-] Backup File was created\r\n\t\t)\r\n\t) ELSE (\r\n    \techo [-] Backup exists already\r\n\t)\r\n\tENDLOCAL\r\nexit /B 0\r\n\r\n:TestADB\r\n\tSetLocal EnableDelayedExpansion\r\n\tset ADB_DIR=\"\"\r\n\tset ADB_EX=\"\"\r\n\r\n\techo [-] Test IF ADB SHELL is working\r\n\r\n\tset ADBWORKS=\r\n\tadb shell -n echo true > tmpFile 2>&1\r\n\tset /P ADBWORKS=<tmpFile\r\n\tdel tmpFile\r\n\r\n\tIF \"%ADBWORKS%\" == \"true\" (\r\n\t\techo [-] ADB connection possible\r\n\t) ELSE (\r\n\t\techo.%ADBWORKS%| FIND /I \"offline\">Nul && (\r\n  \t\t\techo [^^!] ADB device is offline\r\n  \t\t\techo [*] no ADB connection possible\r\n  \t\t\tcall :_Exit 2> nul\r\n\t\t)\r\n\r\n\t\techo.%ADBWORKS%| FIND /I \"unauthorized\">Nul && (\r\n  \t\t\techo [^^!] %ADBWORKS%\r\n  \t\t\techo [*] no ADB connection possible\r\n  \t\t\tcall :_Exit 2> nul\r\n\t\t)\r\n\r\n\t\techo.%ADBWORKS%| FIND /I \"recognized\">Nul && (\r\n\t\t\tIF EXIST \"%ANDROIDHOME%%ADB_DIR_W%\" (\r\n\t\t\t\tset ADB_DIR=%ADB_DIR_W%\r\n\t\t\t) ELSE (\r\n\t\t\t\techo [^^!] ADB not found, please install platform-tools and add it to your %%PATH%%\r\n\t\t\t\tcall :_Exit 2> nul\r\n\t\t\t)\r\n\r\n\t\t\tfor /f \"delims=\" %%i in ('dir \"%ANDROIDHOME%%ADB_DIR%adb.exe\" /s /b /a-d') do (\r\n\t\t\t\tset ADB_EX=%%i\r\n\t\t\t)\r\n\r\n\t\t\tIF \"!ADB_EX!\" == \"\" (\r\n\t\t\t\techo [^^!] ADB binary not found in %ENVVAR%\\%ADB_DIR%\r\n\t\t\t\tcall :_Exit 2> nul\r\n\t\t\t)\r\n\r\n  \t\t\techo [^^!] ADB is not in your Path, try to\r\n  \t\t\techo set PATH=%ENVVAR%\\!ADB_DIR!;%%PATH%%\r\n\r\n\t\t\tIF EXIST \"!ADB_EX!\" (\r\n\t\t\t\techo [*] setting it, just during this session, for you\r\n\t\t\t\tset \"PATH=%ANDROIDHOME%!ADB_DIR!;%PATH%\"\r\n\t\t\t\tREM goto :TestADB\r\n\t\t\t\tcall :TestADB\r\n\t\t\t)\r\n\t\t)\r\n\r\n\t\techo.%ADBWORKS%| FIND /I \"error\">Nul && (\r\n\t\t\techo [^^!] %ADBWORKS%\r\n  \t\t\techo [*] no ADB connection possible\r\n  \t\t\tcall :_Exit 2> nul\r\n\t\t)\r\n\r\n\t\techo.%ADBWORKS%| FIND /I \"no devices/emulators found\">Nul && (\r\n\t\t\techo [^^!] %ADBWORKS%\r\n  \t\t\techo [*] no ADB connection possible\r\n  \t\t\tcall :_Exit 2> nul\r\n\t\t)\r\n\t)\r\n\tIF EXIST \"!ADB_EX!\" (\r\n\t\tENDLOCAL & set \"PATH=%PATH%\"\r\n    ) ELSE (\r\n    \tENDLOCAL\r\n    )\r\nexit /B 0\r\n\r\n:restore_backups\r\n\tfor /f \"delims=\" %%i in ('dir \"%AVDPATH%*.backup\" /s /b /a-d') do (\r\n\t\techo [^!] Restoring %%~ni%%~xi to %%~ni\r\n\t\tcopy \"%%i\" \"%%~di%%~pi%%~ni\" >nul 2>&1\r\n\t)\r\n\techo [*] Backups still remain in place\r\nREM call :_Exit 2> nul\r\nexit /B 0\r\n\r\n:ProcessArguments\r\n\tset params=%*\r\n\tset DEBUG=%false%\r\n\tset PATCHFSTAB=%false%\r\n\tset GetUSBHPmodZ=%false%\r\n\tset RAMDISKIMG=%false%\r\n\tset restore=%false%\r\n\tset InstallKernelModules=%false%\r\n\tset InstallPrebuiltKernelModules=%false%\r\n\tset ListAllAVDs=%false%\r\n\tset InstallApps=%false%\r\n\tset NOPARAMSATALL=%false%\r\n\r\n\tREM While debugging and developing you can turn this flag on\r\n\techo.%params%| FIND /I \"DEBUG\">Nul && (\r\n  \t\tset DEBUG=%true%\r\n  \t\tREM Shows whatever line get executed...\r\n  \t\tREM echo on\r\n\t)\r\n\r\n\tREM Call rootAVD with PATCHFSTAB if you want the RAMDISK merge your modded fstab.ranchu before Magisk Mirror gets mounted\r\n\techo.%params%| FIND /I \"PATCHFSTAB\">Nul && (\r\n  \t\tset PATCHFSTAB=%true%\r\n\t)\r\n\r\n\tREM Call rootAVD with GetUSBHPmodZ to download the usbhostpermissons module\r\n\techo.%params%| FIND /I \"GetUSBHPmodZ\">Nul && (\r\n  \t\tset GetUSBHPmodZ=%true%\r\n\t)\r\n\r\n\tREM Call rootAVD with ListAllAVDs to show all AVDs with command examples\r\n\techo.%params%| FIND /I \"ListAllAVDs\">Nul && (\r\n  \t\tset ListAllAVDs=%true%\r\n\t)\r\n\r\n\tREM Call rootAVD with InstallApps to just install all APKs placed in the Apps folder\r\n\techo.%params%| FIND /I \"InstallApps\">Nul && (\r\n  \t\tset InstallApps=%true%\r\n\t)\r\n\r\n    set RAMDISKIMG=%true%\r\n\r\n\tIF \"%2\" == \"restore\" (\r\n    \tset restore=%true%\r\n\t) ELSE IF \"%2\"==\"InstallKernelModules\" (\r\n    \tset InstallKernelModules=%true%\r\n\t) ELSE IF \"%2\"==\"InstallPrebuiltKernelModules\" (\r\n\t\tset InstallPrebuiltKernelModules=%true%\r\n\t)\r\n\r\n\tIF \"%params%\"==\"\" (\r\n\t\tREM No Parameters SET at all\r\n    \tset NOPARAMSATALL=%true%\r\n\t)\r\nexit /B 0\r\n\r\n:installapps\r\n\tSetLocal EnableDelayedExpansion\r\n\techo [-] Install all APKs placed in the Apps folder\r\n\tfor %%i in (APPS\\*.apk) do (\r\n\t\tset APK=%%i\r\n\t\t:whileloop\r\n\t\t\techo [*] Trying to install !APK!\r\n\t\t\tfor /f \"delims=\" %%A in ('adb install -r -d !APK! 2^>^&1' ) do (\r\n\t\t\t\techo [-] %%A\r\n\t\t\t\techo.%%A| FIND /I \"INSTALL_FAILED_UPDATE_INCOMPATIBLE\">Nul && (\r\n\t\t\t\t\tset Package=\r\n\t\t\t\t\tfor %%p in (%%A) do (\r\n\t\t\t\t\t\techo.!Package!| FIND /I \"Package\">Nul && (\r\n\t\t\t\t\t\t\techo [*] Need to uninstall %%p first\r\n\t\t\t\t\t\t\tadb uninstall %%p > tmpFile 2>&1\r\n\t\t\t\t\t\t\tset /P ADBECHO=<tmpFile\r\n\t\t\t\t\t\t\tdel tmpFile\r\n\t\t\t\t\t\t\techo [-] !ADBECHO!\r\n\t\t\t\t\t\t\tgoto :whileloop\r\n\t\t\t\t\t\t)\r\n\t\t\t\t\t\tset Package=%%p\r\n\t\t\t\t\t)\r\n\t\t\t\t)\r\n\t\t\t)\r\n\t)\r\n\tENDLOCAL\r\nexit /B 0\r\n\r\n:ShowHelpText\r\n\techo rootAVD A Script to root AVD by NewBit XDA\r\n\techo.\r\n\techo Usage:\trootAVD [DIR/ramdisk.img] [OPTIONS] ^| [EXTRA ARGUMENTS]\r\n\techo or:\trootAVD [ARGUMENTS]\r\n\techo.\r\n\techo Arguments:\r\n\techo \tListAllAVDs\t\t\tLists Command Examples for ALL installed AVDs\r\n\techo.\r\n\techo \tInstallApps\t\t\tJust install all APKs placed in the Apps folder\r\n\techo.\r\n\techo Main operation mode:\r\n\techo \tDIR\t\t\t\ta path to an AVD system-image\r\n\techo \t\t\t\t\t- must always be the 1st Argument after rootAVD\r\n\techo.\r\n\techo ADB Path ^| Ramdisk DIR^| ANDROID_HOME:\r\n\techo \t[M]ac/Darwin:\t\t\texport PATH=~/Library/Android/sdk/platform-tools:^$PATH\r\n\techo \t\t\t\t\texport PATH=^$ANDROID_HOME/platform-tools:^$PATH\r\n\techo \t\t\t\t\tsystem-images/android-^$API/google_apis_playstore/x86_64/\r\n\techo.\r\n\techo \t[L]inux:\t\t\texport PATH=~/Android/Sdk/platform-tools:^$PATH\r\n\techo \t\t\t\t\texport PATH=^$ANDROID_HOME/platform-tools:^$PATH\r\n\techo \t\t\t\t\tsystem-images/android-^$API/google_apis_playstore/x86_64/\r\n\techo.\r\n\techo \t[W]indows:\t\t\tset PATH=%ENVVAR%\\%ADB_DIR_W%;%%PATH%%\r\n\techo \t\t\t\t\tsystem-images\\android-^$API\\google_apis_playstore\\x86_64\\\r\n\techo.\r\n\techo \tANDROID_HOME:\t\t\tBy default, the script uses %%LOCALAPPDATA%%, to set its Android Home\r\n\techo \t\t\t\t\tdirectory, search for AVD system-images and ADB binarys. This behaviour\r\n\techo \t\t\t\t\tcan be overwritten by setting the ANDROID_HOME variable.\r\n\techo \t\t\t\t\te.g. set ANDROID_HOME=%%USERPROFILE%%\\Downloads\\sdk\r\n\techo.\r\n\techo \t^$API:\t\t\t\t25,29,30,31,32,33,34,UpsideDownCake,etc.\r\n\techo.\r\n\techo Options:\r\n\techo \trestore\t\t\t\trestore all existing .backup files, but doesn't delete them\r\n\techo \t\t\t\t\t- the AVD doesn't need to be running\r\n\techo \t\t\t\t\t- no other Argument after will be processed\r\n\techo.\r\n\techo \tInstallKernelModules\t\tinstall custom build kernel and its modules into ramdisk.img\r\n\techo \t\t\t\t\t- kernel (bzImage) and its modules (initramfs.img) are inside rootAVD\r\n\techo \t\t\t\t\t- both files will be deleted after installation\r\n\techo.\r\n\techo \tInstallPrebuiltKernelModules\tdownload and install an AOSP prebuilt kernel and its modules into ramdisk.img\r\n\techo \t\t\t\t\t- similar to InstallKernelModules, but the AVD needs to be online\r\n\techo.\r\n\techo Options are exclusive, only one at the time will be processed.\r\n\techo.\r\n\techo Extra Arguments:\r\n\techo \tDEBUG\t\t\t\tDebugging Mode, prevents rootAVD to pull back any patched file\r\n\techo.\r\n\techo \tPATCHFSTAB\t\t\tfstab.ranchu will get patched to automount Block Devices like /dev/block/sda1\r\n\techo \t\t\t\t\t- other entries can be added in the script as well\r\n\techo \t\t\t\t\t- a custom build Kernel might be necessary\r\n\techo.\r\n\techo \tGetUSBHPmodZ\t\t\tThe USB HOST Permissions Module Zip will be downloaded into /sdcard/Download\r\n\techo.\r\n\techo \tFAKEBOOTIMG\t\t\tCreates a fake Boot.img file that can directly be patched from the Magisk APP\r\n\techo \t\t\t\t\t- Magisk will be launched to patch the fake Boot.img within 60s\r\n\techo \t\t\t\t\t- the fake Boot.img will be placed under /sdcard/Download/fakeboot.img\r\n\techo.\r\n\techo Extra Arguments can be combined, there is no particular order.\r\n\techo.\r\n\techo Notes: rootAVD will\r\n\techo - always create .backup files of ramdisk*.img and kernel-ranchu\r\n\techo - replace both when done patching\r\n\techo - show a Menu, to choose the Magisk Version (Stable ^|^| Canary ^|^| Alpha), if the AVD is online\r\n\techo - make the choosen Magisk Version to its local\r\n\techo - install all APKs placed in the Apps folder\r\n\tcall :FindSystemImages\r\nexit /B 0\r\n\r\n:GetANDROIDHOME\r\n\tREM set PATH=%LOCALAPPDATA%\\Android\\Sdk\\platform-tools;%PATH%\r\n\tREM set ANDROID_HOME=%USERPROFILE%\\Downloads\\sdk\r\n\tREM set ANDROID_HOME=\"%USERPROFILE%\\Downloads\\sd k\"\r\n\tREM set ANDROID_HOME=%USERPROFILE%\\Downloads\\sd k\r\n\tREM set ANDROID_HOME=%USERPROFILE%\\Downloads\\Program Files (x86)\\Android\\android-sdk\r\n\tREM set ANDROID_HOME=\"%USERPROFILE%\\Downloads\\Program Files (x86)\\Android\\android-sdk\"\r\n\tset NoSystemImages=%true%\r\n\r\n\tREM Default: Looking for LOCALAPPDATA to seach AVD system-images\r\n\tset ENVVAR=%%LOCALAPPDATA%%\\Android\\Sdk\r\n\tset ANDROIDHOME=%LOCALAPPDATA%\\Android\\Sdk\\\r\n\r\n\tIF defined ANDROID_HOME (\r\n        set ENVVAR=%%ANDROID_HOME%%\r\n        setlocal enableDelayedExpansion\r\n\t\tfor /f \"delims=\" %%A in (\"!ANDROID_HOME!\") do (\r\n\t\t\tendlocal & REM\r\n\t\t\tset \"ANDROID_HOME=%%~A\"\r\n\t\t\tset \"ANDROIDHOME=%%~A\\\"\r\n\t\t)\r\n    )\r\n\r\n\tset SYSIM_DIR_W=system-images\\\r\n\tset ADB_DIR_W=platform-tools\r\n\r\n\tIF EXIST \"%ANDROIDHOME%%SYSIM_DIR_W%\" (\r\n\t\tset SYSIM_DIR=%SYSIM_DIR_W%\r\n\t\tset NoSystemImages=%false%\r\n\t)\r\nexit /B 0\r\n\r\n:FindSystemImages\r\n\techo - use %ENVVAR% to search for AVD system images\r\n\techo.\r\n\tSetLocal EnableDelayedExpansion\r\n\tset SYSIM_EX=\r\n\r\n\tIF %NoSystemImages% (\r\n\t\techo Neither system-images nor ramdisk files could be found\r\n\t\texit /B 1\r\n\t)\r\n\r\n\tfor /f \"delims=\" %%i in ('dir \"%ANDROIDHOME%%SYSIM_DIR%ramdisk*.img\" /s /b /a-d') do (\r\n\t\tset \"j=%%~i\"\r\n\t\tsetlocal enableDelayedExpansion\r\n\t\tfor /f \"delims=\" %%a in (\"!ANDROIDHOME!\") do (\r\n\t\t\tendlocal & REM\r\n\t\t\tset \"j=!j:%%a=!\"\r\n\t\t)\r\n\r\n\t\tIF %ListAllAVDs% (\r\n\t\t\tIF \"!SYSIM_EX!\" == \"\" (\r\n\t\t\t\tset SYSIM_EX=!j!\r\n\t\t\t) ELSE (\r\n\t\t\t\tset SYSIM_EX=!j! !SYSIM_EX!\r\n\t\t\t)\r\n\t\t) ELSE (\r\n\t\t\tset SYSIM_EX=!j!\r\n\t\t)\r\n\t)\r\n\r\n\techo Command Examples:\r\n\techo rootAVD.bat\r\n\techo rootAVD.bat ListAllAVDs\r\n\techo rootAVD.bat InstallApps\r\n\techo.\r\n\r\n\tfor %%i in (%SYSIM_EX%) do (\r\n\t\techo rootAVD.bat %%i\r\n\t\techo rootAVD.bat %%i FAKEBOOTIMG\r\n\t\techo rootAVD.bat %%i DEBUG PATCHFSTAB GetUSBHPmodZ\r\n\t\techo rootAVD.bat %%i restore\r\n\t\techo rootAVD.bat %%i InstallKernelModules\r\n\t\techo rootAVD.bat %%i InstallPrebuiltKernelModules\r\n\t\techo rootAVD.bat %%i InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG\r\n\t\techo.\r\n\t)\r\n\tENDLOCAL\r\nexit /B 0\r\n\r\n:_Exit\r\nIF %NOPARAMSATALL% (\r\n\tcmd /k\r\n)\r\n()\r\ngoto :eof\r\n"
        },
        {
          "name": "rootAVD.sh",
          "type": "blob",
          "size": 80.185546875,
          "content": "#!/usr/bin/env bash\n##########################################################################################\n#\n# Magisk Boot Image Patcher - original created by topjohnwu and modded by shakalaca's\n# modded by NewBit XDA for Android Studio AVD\n##########################################################################################\n\n###################\n# Helper Functions\n###################\n\n# Copied 1 to 1 from topjohnwu\ngetdir() {\n  case \"$1\" in\n    */*) dir=${1%/*}; [ -z $dir ] && echo \"/\" || echo $dir ;;\n    *) echo \".\" ;;\n  esac\n}\n\nget_flags() {\n\techo \"[-] Get Flags\"\n\tif [ -f /system/init -o -L /system/init ]; then\n    \tSYSTEM_ROOT=true\n  \telse\n    \tSYSTEM_ROOT=false\n    \tgrep ' / ' /proc/mounts | grep -qv 'rootfs' || grep -q ' /system_root ' /proc/mounts && SYSTEM_ROOT=true\n  \tfi\n\n\tif [ -z $KEEPVERITY ]; then\n\t\tif $SYSTEM_ROOT; then\n\t\t\tKEEPVERITY=true\n\t\t\techo \"[*] System-as-root, keep dm/avb-verity\"\n\t\telse\n\t\t\tKEEPVERITY=false\n\t\tfi\n\tfi\n\n\tISENCRYPTED=false\n\tgrep ' /data ' /proc/mounts | grep -q 'dm-' && ISENCRYPTED=true\n\t[ \"$(getprop ro.crypto.state)\" = \"encrypted\" ] && ISENCRYPTED=true\n\n\tif [ -z $KEEPFORCEENCRYPT ]; then\n\t\t# No data access means unable to decrypt in recovery\n\t\tif $ISENCRYPTED || ! $DATA; then\n\t\t\tKEEPFORCEENCRYPT=true\n\t\t\techo \"[-] Encrypted data, keep forceencrypt\"\n\t\telse\n\t\t\tKEEPFORCEENCRYPT=false\n\t\tfi\n\tfi\n\n\tRECOVERYMODE=false\n\n\tif [[ $API -eq 28 ]]; then\n\t\tRECOVERYMODE=true\n\tfi\n\n\texport RECOVERYMODE\n\texport KEEPVERITY\n\texport KEEPFORCEENCRYPT\n\techo \"[*] RECOVERYMODE=$RECOVERYMODE\"\n\techo \"[-] KEEPVERITY=$KEEPVERITY\"\n\techo \"[*] KEEPFORCEENCRYPT=$KEEPFORCEENCRYPT\"\n}\n\ncopyARCHfiles() {\n\tBINDIR=$BASEDIR/lib/$ABI\n\tASSETSDIR=$BASEDIR/assets\n\tSTUBAPK=false\n\n\tif [ -e $BINDIR/libstub.so ]; then\n\t\tABI=$ARCH32\n\t\tBINDIR=$BASEDIR/lib/$ABI\n\t\techo \"[*] No 64-Bit Binarys found, please consider Magisk Alpha\"\n\telif $IS64BIT && ! $IS64BITONLY; then\n\t\techo \"[*] copy $ARCH32 files to $BINDIR\"\n\t\tcp $BASEDIR/lib/$ARCH32/lib*32.so $BINDIR 2>/dev/null\n\tfi\n\n\tcd $BINDIR\n\t\tfor file in lib*.so; do mv \"$file\" \"${file:3:${#file}-6}\"; done\n\tcd $BASEDIR\n\techo \"[-] copy all $ABI files from $BINDIR to $BASEDIR\"\n\tcp $BINDIR/* $BASEDIR 2>/dev/null\n\n\tif [ -e $ASSETSDIR/stub.apk ]; then\n \t\techo \"[-] copy 'stub.apk' from $ASSETSDIR to $BASEDIR\"\n \t\tcp $ASSETSDIR/stub.apk $BASEDIR 2>/dev/null\n \t\tSTUBAPK=true\n \tfi\n\n\tchmod -R 755 $BASEDIR\n\texport STUBAPK\n}\n\napi_level_arch_detect() {\n\techo \"[-] Api Level Arch Detect\"\n\t# Detect version and architecture\n\t# To select the right files for the patching\n\n\tABI=$(getprop ro.product.cpu.abi)\n\tABILIST32=$(getprop ro.product.cpu.abilist32)\n\tABILIST64=$(getprop ro.product.cpu.abilist64)\n\n\tAPI=$(getprop ro.build.version.sdk)\n\tFIRSTAPI=$(getprop ro.product.first_api_level)\n\n\tAVERSION=$(getprop ro.build.version.release)\n\n\tIS64BIT=false\n\tIS64BITONLY=false\n\tIS32BITONLY=false\n\n\tif [ \"$ABI\" = \"x86\" ]; then\n\t\tARCH=x86\n\t\tARCH32=x86\n\telif [ \"$ABI\" = \"arm64-v8a\" ]; then\n\t\tARCH=arm64\n\t\tARCH32=armeabi-v7a\n\t\tIS64BIT=true\n\telif [ \"$ABI\" = \"x86_64\" ]; then\n\t\tARCH=x64\n\t\tARCH32=x86\n\t\tIS64BIT=true\n\telse\n\t\tARCH=arm\n\t\tABI=armeabi-v7a\n\t\tABI32=armeabi-v7a\n\t\tIS64BIT=false\n\tfi\n\n\tif [ -z \"$ABILIST32\" ]; then\n\t\tIS64BITONLY=true\n\tfi\n\n\tif [ -z \"$ABILIST64\" ]; then\n\t\tIS32BITONLY=true\n\tfi\n\n\tif $IS64BITONLY || $IS32BITONLY ; then\n\t\techo \"[-] Device Platform is $ARCH only\"\n\telse\n\t\techo \"[-] Device Platform: $ARCH\"\n\t\techo \"[-] ARCH32 $ARCH32\"\n\tfi\n\n\techo \"[-] Device SDK API: $API\"\n\techo \"[-] First API Level: $FIRSTAPI\"\n\techo \"[-] The AVD runs on Android $AVERSION\"\n\n\t[ -d /system/lib64 ] && IS64BIT=true || IS64BIT=false\n\n\texport ARCH\n  \texport ARCH32\n\texport IS64BIT\n\texport IS64BITONLY\n\texport IS32BITONLY\n\texport ABI\n\texport API\n\texport FIRSTAPI\n\texport AVERSION\n}\n\nabort_script() {\n\techo \"[!] aborting the script\"\n\texit 1\n}\n\ncompression_method() {\n\tlocal FILE=\"$1\"\n\tlocal FIRSTFILEBYTES\n\tlocal METHOD_LZ4=\"02214c18\"\n\tlocal METHOD_GZ=\"1f8b0800\"\n\tlocal ENDG=\"\"\n\tFIRSTFILEBYTES=$(xxd -p -c8 -l8 \"$FILE\")\n\tFIRSTFILEBYTES=\"${FIRSTFILEBYTES:0:8}\"\n\n\tif [ \"$FIRSTFILEBYTES\" == \"$METHOD_LZ4\" ]; then\n\t\tENDG=\".lz4\"\n\telif [ \"$FIRSTFILEBYTES\" == \"$METHOD_GZ\" ]; then\n\t\tENDG=\".gz\"\n\tfi\n\techo \"$ENDG\"\n}\n\ndetect_ramdisk_compression_method() {\n\techo \"[*] Detecting ramdisk.img compression\"\n\tRDF=$BASEDIR/ramdisk.img\n\tCPIO=$BASEDIR/ramdisk.cpio\n\tCPIOORIG=$BASEDIR/ramdisk.cpio.orig\n\n\tlocal FIRSTFILEBYTES\n\tlocal METHOD_LZ4=\"02214c18\"\n\tlocal METHOD_GZ=\"1f8b0800\"\n\tCOMPRESS_SIGN=\"\"\n\tFIRSTFILEBYTES=$(xxd -p -c8 -l8 \"$RDF\")\n\tFIRSTFILEBYTES=\"${FIRSTFILEBYTES:0:8}\"\n\tRAMDISK_LZ4=false\n\tRAMDISK_GZ=false\n\tENDG=\"\"\n\tMETHOD=\"\"\n\n\tif [ \"$FIRSTFILEBYTES\" == \"$METHOD_LZ4\" ]; then\n\t\tENDG=\".lz4\"\n\t\tMETHOD=\"lz4_legacy\"\n\t\tRAMDISK_LZ4=true\n\t\tmv $RDF $RDF$ENDG\n\t\tRDF=$RDF$ENDG\n\t\tCOMPRESS_SIGN=\"$METHOD_LZ4\"\n\telif [ \"$FIRSTFILEBYTES\" == \"$METHOD_GZ\" ]; then\n\t\tENDG=\".gz\"\n\t\tMETHOD=\"gzip\"\n\t\tRAMDISK_GZ=true\n\t\tmv $RDF $RDF$ENDG\n\t\t#cp $RDF $RDF$ENDG\n\t\tCOMPRESS_SIGN=\"$METHOD_GZ\"\n\tfi\n\n\tif [ \"$ENDG\" == \"\" ]; then\n\t\techo \"[!] Ramdisk.img uses UNKNOWN compression $FIRSTFILEBYTES\"\n\t\tabort_script\n\tfi\n\n\techo \"[!] Ramdisk.img uses $METHOD compression\"\n}\n\nrunMagisk_to_Patch_fake_boot_img() {\n\tam force-stop $PKG_NAME\n\techo \"[-] Starting Magisk\"\n\tmonkey -p $PKG_NAME -c android.intent.category.LAUNCHER 1 > /dev/null 2>&1\n\techo \"[*] Install/Patch $FBI and hit Enter when done(max. 60s)\"\n\tread -t 60 proceed\n\tcase $proceed in\n\t\t*)\n\t\t;;\n\tesac\n}\n\ndetecting_users() {\n\tlocal userID=\"\"\n\tlocal userZero=0\n\techo \"[*] Detecting current user\"\n\tuserID=$(am get-current-user)\n\techo \"[-] Current user $userID\"\n\tif [ \"$userID\" != \"$userZero\" ]; then\n\t\techo \"[-] Switching to user $userZero\"\n\t\tam switch-user $userZero\n\t\tuserID=$(am get-current-user)\n\t\techo \"[-] Current user $userID\"\n\tfi\n}\n\ngenerate_build_prop() {\n\techo \"[*] generating Build.prop\"\n\tlocal BPR=$BASEDIR/build.prop\n\tlocal recfstab=$BASEDIR/recovery.fstab\n\tgetprop > $BPR\n\tsed -i -e 's/: /=/g' -e 's/\\[//g' -e 's/\\]//g' $BPR\n\n\techo \"[*] generating recovery.fstab from fstab.ranchu\"\n\tcp /system/vendor/etc/fstab.ranchu $recfstab\n\n\techo \"[-] adding Build.prop and recovery.fstab to Stock Ramdisk\"\n\t$BASEDIR/magiskboot cpio $CPIO \\\n\t\t\"add 0644 system/build.prop build.prop\" \\\n\t\t\"add 0644 system/etc/recovery.fstab recovery.fstab\"\n\t#exit\n\t#BASEDIR=$(pwd)\n}\n\nwriteLittleEndian() {\n\tprintf \"\\x${1:6:2}\\x${1:4:2}\\x${1:2:2}\\x${1:0:2}\"\n}\n\ncreate_fake_boot_img() {\n\n\tif $DEBUG; then\n\t\tgenerate_build_prop\n\tfi\n\n\techo \"[*] Creating a fake Boot.img\"\n\tFBHI=$BASEDIR/fakebootheader.img\n\tFBI=$SDCARD/fakeboot.img\n\tRAMDISK_SZ=\"$(printf '%08x' $(stat -c%s $CPIO))\"\n\tPAGESIZE=2048\n\tPAGESIZE_HEX=\"$(printf '%08x' $PAGESIZE)\"\n\n\techo \"[-] removing old $FBI\"\n\trm -f $FBI $RDF\n\n\tprintf \"\\x41\\x4E\\x44\\x52\\x4F\\x49\\x44\\x21\" > $FBHI  # ANDROID!\n\tprintf \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" >> $FBHI # HEADER_VER KERNEL_SZ\n\twriteLittleEndian $RAMDISK_SZ >> $FBHI # RAMDISK_SZ\n\n\tprintf \"\\x00\\x00\\x00\\x00\" >> $FBHI # SECOND_SZ\n\tprintf \"\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\" >> $FBHI # EXTRA_SZ\n\tprintf \"\\x00\\x00\\x00\\x00\" >> $FBHI\n\twriteLittleEndian $PAGESIZE_HEX >> $FBHI # PAGESIZE_HEX\n\n\techo \"[!] Only a minimal header is required for Magisk to repack the ramdisk\"\n\t#mv $RDF $CPIO\n\n\techo \"[*] repacking ramdisk.img into $FBI\"\n\t$BASEDIR/magiskboot repack $FBHI $FBI > /dev/null 2>&1\n\n\ttest -f \"$FBI\"\n\tRESULT=\"$?\"\n\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\techo \"[*] $FBI could not be created\"\n\t\techo \"[-] Magisk expects a more complete boot.img header as source\"\n\n\t\t# fill 00 (to Pagesize 2048)\n\t\ttruncate -s $PAGESIZE $FBHI\n\n\t\techo \"[*] Adding $CPIO to fakeboot.img header\"\n\t\tcat $CPIO >> $FBHI\n\n\t\techo \"[*] Checking filesize Padding for Pagesize 2048\"\n\n\t\tFBHI_SZ=$(stat -c%s $FBHI)\n\t\tFBHI_PAD_SZ=$(( FBHI_SZ / $PAGESIZE ))\n\t\tFBHI_PAD_SZ=$(( FBHI_PAD_SZ * $PAGESIZE ))\n\n\t\tif [[ ! $FBHI_PAD_SZ -eq $FBHI_SZ ]]; then\n\t\t\techo \"[*] Padding filesize to match Pagesize of 2048 Bytes\"\n\t\t\tFBHI_PAD_SZ=$(( FBHI_SZ / $PAGESIZE +1))\n\t\t\tFBHI_PAD_SZ=$(( FBHI_PAD_SZ * $PAGESIZE ))\n\t\t\ttruncate -s $FBHI_PAD_SZ $FBHI\n\t\tfi\n\n\t\techo \"[-] repacking ramdisk.img into $FBI with the more complete header\"\n\t\t$BASEDIR/magiskboot repack $FBHI $FBI > /dev/null 2>&1\n\n\t\ttest -f \"$FBI\"\n\t\tRESULT=\"$?\"\n\t\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\t\techo \"[!] $FBI could not be created\"\n\t\t\tabort_script\n\t\tfi\n\tfi\n\techo \"[!] $FBI created\"\n\n\tInstallMagiskTemporarily\n\tdetecting_users\n\trunMagisk_to_Patch_fake_boot_img\n\tRemoveTemporarilyMagisk\n}\n\nunpack_patched_ramdisk_from_fake_boot_img() {\n\n\tif [ \"$MagiskPatchedFiles\" != \"\" ]; then\n\t\techo \"[!] magisk_patched file(s) could be found!\"\n\t\tfor file in `ls -tu $SDCARD/*magisk_patched*`; do\n\t\t\tMagiskPatched=$file\n\t\t\tbreak\n\t\tdone\n\t\techo \"[*] unpacking latest $MagiskPatched\"\n\t\t$BASEDIR/magiskboot unpack $MagiskPatched > /dev/null 2>&1\n\t\techo \"[-] deleting all magisk_patched files\"\n\t\tfor file in `ls -tu $SDCARD/*magisk_patched*`; do\n\t\t\trm -f $file\n\t\tdone\n\telse\n\t\techo \"[!] No magisk_patched file could be found!\"\n\t\tabort_script\n\tfi\n}\n\nprocess_fake_boot_img() {\n\n\tSDCARD=/sdcard/Download\n\n\techo \"[*] Processing fake Boot.img\"\n\tMagiskPatchedFiles=$(ls \"$SDCARD\"/*magisk_patched*) > /dev/null 2>&1\n\tif [ \"$MagiskPatchedFiles\" != \"\" ]; then\n\t\techo \"[!] external magisk_patched file(s) could be found!\"\n\t\tunpack_patched_ramdisk_from_fake_boot_img\n\telse\n\t\tcreate_fake_boot_img\n\t\tMagiskPatchedFiles=$(ls \"$SDCARD\"/*magisk_patched*) > /dev/null 2>&1\n\t\tunpack_patched_ramdisk_from_fake_boot_img\n\tfi\n}\n\n# requires additional setup\nconstruct_environment() {\n\tROOT=`su -c \"id -u\"` 2>/dev/null\n\n\tif [[ \"$ROOT\" == \"\" ]]; then\n\t\tROOT=$(id -u)\n\tfi\n\n\techo \"[-] Constructing environment - PAY ATTENTION to the AVDs Screen\"\n\tif [[ $ROOT -eq 0 ]]; then\n\t\techo \"[!] we are root\"\n\t\tlocal BBBIN=$BB\n\t\tlocal COMMONDIR=$BASEDIR/assets\n\t\tlocal NVBASE=/data/adb\n\t\tlocal MAGISKBIN=$NVBASE/magisk\n\n\t\t`su -c \"rm -rf $MAGISKBIN/* 2>/dev/null && \\\n\t\t\t\tmkdir -p $MAGISKBIN 2>/dev/null && \\\n\t\t\t\tcp -af $BINDIR/. $COMMONDIR/. $BBBIN $MAGISKBIN && \\\n\t\t\t\tchown root.root -R $MAGISKBIN && \\\n\t\t\t\tchmod -R 755 $MAGISKBIN && \\\n\t\t\t\trm -rf $BASEDIR 2>/dev/null && \\\n\t\t\t\treboot \\\n\t\t\t\t\"`\n\tfi\n\n\techo \"[!] not root yet\"\n\techo \"[!] Couldn't construct environment\"\n\techo \"[!] Double Check Root Access\"\n\techo \"[!] Re-Run Script with clean ramdisk.img and try again\"\n\tabort_script\n}\n\ncheckfile() {\n\t#echo \"checkfile $1\"\n\tif [ -r \"$1\" ]; then\n\t\t#echo \"File exists and is readable\"\n\t\tif [ -s \"$1\" ]; then\n\t\t\t#echo \"and has a size greater than zero\"\n\t\t\tif [ -w \"$1\" ]; then\n\t\t\t\t#echo \"and is writable\"\n\t\t\t\tif [ -f \"$1\" ]; then\n\t\t\t\t\t#echo \"and is a regular file.\"\n\t\t\t\t\treturn 1\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\tfi\n\treturn 0\n}\n\n# If all is done well so far, you can install some APK's to the AVD\n# every APK file in the Apps DIR will be (re)installed\n# Like magisk.apk etc.\ninstall_apps() {\n\tlocal ADBECHO=\"\"\n  \tAPPS=\"Apps/*\"\n\techo \"[-] Install all APKs placed in the Apps folder\"\n\tFILES=$APPS\n\n\tfor f in $FILES; do\n\t\techo \"[*] Trying to install $f\"\n\t\tADBECHO=\"\"\n\t\twhile [[ \"$ADBECHO\" != *\"Success\"* ]]; do\n\t\t\tADBECHO=$(adb install -r -d \"$f\" 2>&1)\n\t\t\tif [[ \"$ADBECHO\" == *\"INSTALL_FAILED_UPDATE_INCOMPATIBLE\"* ]]; then\n\t\t\t\techo \"$ADBECHO\" | while read I; do echo \"[*] $I\"; done\n\t\t\t\tPackage=\n\t\t\t\tfor I in $ADBECHO; do\n\t\t\t\t\tif [[ \"$Package\" == *\"Package\"* ]]; then\n\t\t\t\t\t\techo \"[*] Need to uninstall $I first\"\n\t\t\t\t\t\tADBECHO=$(adb uninstall $I 2>&1)\n\t\t\t\t\t\techo \"$ADBECHO\" | while read I; do echo \"[*] $I\"; done\n\t\t\t\t\t\tADBECHO=$(adb install -r -d \"$f\" 2>&1)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tfi\n\t\t\t\t\tPackage=$I\n\t\t\t\tdone\n\t\t\tfi\n\t\tdone\n\t\techo \"$ADBECHO\" | while read I; do echo \"[*] $I\"; done\n\tdone\n}\n\npushtoAVD() {\n\tlocal SRC=\"\"\n\tlocal DST=\"$2\"\n\tlocal ADBPUSHECHO=\"\"\n\tSRC=${1##*/}\n\n\tif [[ \"$DST\" == \"\" ]]; then\n\t\techo \"[*] Push $SRC into $ADBBASEDIR\"\n\t\tADBPUSHECHO=$(adb push \"$1\" $ADBBASEDIR 2>/dev/null)\n\telse\n\t\techo \"[*] Push $SRC into $ADBBASEDIR/$DST\"\n\t\tADBPUSHECHO=$(adb push \"$1\" $ADBBASEDIR/$DST 2>/dev/null)\n\tfi\n\n\techo \"[-] $ADBPUSHECHO\"\n}\n\npullfromAVD() {\n\tlocal SRC=\"\"\n\tlocal DST=\"\"\n\tlocal ADBPULLECHO=\"\"\n\tSRC=${1##*/}\n\tDST=${2##*/}\n\tADBPULLECHO=$(adb pull $ADBBASEDIR/$SRC \"$2\" 2>/dev/null)\n\tif [[ ! \"$ADBPULLECHO\" == *\"error\"* ]]; then\n\t\techo \"[*] Pull $SRC into $DST\"\n  \t\techo \"[-] $ADBPULLECHO\"\n\tfi\n}\n\ncreate_backup() {\n\tlocal FILE=\"\"\n\tlocal FILEPATH=\"\"\n\tlocal FILENAME=\"\"\n\tlocal BACKUPFILE=\"\"\n\tFILE=\"$1\"\n\tFILEPATH=${FILE%/*}\n\tFILENAME=${FILE##*/}\n\tBACKUPFILE=\"$FILENAME.backup\"\n\n\tcd \"$FILEPATH\" > /dev/null\n\t\t# If no backup file exist, create one\n\t\tif ( checkfile $BACKUPFILE -eq 0 ); then\n\t\t\techo \"[*] create Backup File of $FILENAME\"\n\t\t\tcp $FILENAME $BACKUPFILE\n\t\telse\n\t\t\techo \"[-] $FILENAME Backup exists already\"\n\t\tfi\n\tcd - > /dev/null\n}\n\nrestore_backups() {\n\tlocal BACKUPFILE=\"\"\n\tlocal RESTOREFILE=\"\"\n\n\tcd \"$1\" > /dev/null\n\t\tfor f in $(find . -type f -name '*.backup'); do\n\t\t\tBACKUPFILE=\"$f\"\n\t\t\tRESTOREFILE=\"${BACKUPFILE%.backup}\"\n\t\t\techo \"[!] Restoring ${BACKUPFILE##*/} to ${RESTOREFILE##*/}\"\n\t\t\tcp $BACKUPFILE $RESTOREFILE\n\t\tdone\n\tcd - > /dev/null\n\n\tif [ \"$f\" == \"\" ]; then\n\t\techo \"[*] No Backup(s) to restore\"\n\telse\n\t\techo \"[*] Backups still remain in place\"\n\tfi\n\texit 0\n}\n\ntoggle_Ramdisk() {\n\n\t#AVDPATHWITHRDFFILE=\"$1\"\n\t#AVDPATH=${AVDPATHWITHRDFFILE%/*}\n\t#RDFFILE=${AVDPATHWITHRDFFILE##*/}\n\t#RESTOREPATH=$AVDPATH\n\n\tlocal RamdiskFile=\"$AVDPATHWITHRDFFILE\"\n\tlocal PatchedFile=\"$AVDPATHWITHRDFFILE.patched\"\n\tlocal BackupFile=\"$AVDPATHWITHRDFFILE.backup\"\n\n\tlocal hasBackup=false\n\tlocal hasPatched=false\n\n\tif ( checkfile \"$BackupFile\" -eq 0 ); then\n\t\techo \"[!] we need a valid backup file to proceed\"\n\t\texit 0\n\tfi\n\n\techo \"[-] Toggle Ramdisk\"\n\tif ( checkfile \"$PatchedFile\" -eq 0 ); then\n\t\techo \"[*] Pushing patched Ramdisk into Stack\"\n\t\tmv \"$RamdiskFile\" \"$PatchedFile\"\n\t\techo \"[*] Popping original Ramdisk from Backup\"\n\t\tcp \"$BackupFile\" \"$RamdiskFile\"\n\telse\n\t\techo \"[*] Popping patched Ramdisk back from Stack\"\n\t\tmv -f \"$PatchedFile\" \"$RamdiskFile\"\n\tfi\n\texit 0\n}\n\nTestADB() {\n\n\tlocal ADB_EX=\"\"\n\tlocal exportedADB=false\n\n\twhile true; do\n\t\techo \"[-] Test if ADB SHELL is working\"\n\t\tADBWORKS=$(which adb)\n\t\tif [ \"$ADBWORKS\" == *\"not found\"* ] || [ \"$ADBWORKS\" == \"\" ]; then\n\t\t\tif [ ! -d \"$ANDROIDHOME/$ADB_DIR\" ]; then\n\t\t\t\techo \"[!] ADB not found, please install and add it to your \\$PATH\"\n\t\t\t\texit\n\t\t\tfi\n\n\t\t\tcd \"$ANDROIDHOME\" > /dev/null\n\t\t\t\tfor adb in $(find \"$ADB_DIR\" -type f -name adb); do\n\t\t\t\t\tADB_EX=\"$ANDROIDHOME/$adb\"\n\t\t\t\tdone\n\t\t\tcd - > /dev/null\n\n\t\t\tif [[ \"$ADB_EX\" == \"\" ]]; then\n\t\t\t\techo \"[!] ADB binary not found in $ENVVAR/$ADB_DIR\"\n\t\t\t\texit\n\t\t\tfi\n\n\t\t\techo \"[!] ADB is not in your Path, try to:\"\n\t\t\techo \"\"\n\t\t\techo \"export PATH=$ENVVAR/$ADB_DIR:\\$PATH\"\n\t\t\techo \"\"\n\n\t\t\tif $exportedADB; then\n\t\t\t\techo \"[!] export didn't work'\"\n\t\t\t\tbreak\n\t\t\tfi\n\n\t\t\tif ( ! checkfile \"$ADB_EX\" -eq 0 ); then\n\t\t\t\techo \"[*] setting it, just during this session, for you\"\n\t\t\t\texport \"PATH=$ANDROIDHOME/$ADB_DIR:$PATH\"\n\t\t\t\texportedADB=true\n\t\t\tfi\n\t\telse\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\tADBWORKS=$(adb shell 'echo true' 2>/dev/null)\n\tif [ -z \"$ADBWORKS\" ]; then\n\t\techo \"[!] no ADB connection possible\"\n\t\texit\n\telif [[ \"$ADBWORKS\" == \"true\" ]]; then\n\t\techo \"[*] ADB connection possible\"\n\tfi\n}\n\nMakeBlueStacksRW() {\n\n\tif ( checkfile \"$BLUESTACKSPATH/$AVBOXFILE\" -eq 0 ); then\n\t\techo \"[!] $AVBOXFILE not found\"\n\t\techo \"[!] check your BlueStacks installation\"\n\t\texit 0\n\tfi\n\techo \"[!] $AVBOXFILE found\"\n\tcreate_backup \"$AVBOX\"\n\techo \"[*] Changing $ROOTVDIFILE type to \\\"Normal\\\"\"\n\tsed 's,location=\"Root.vdi\" format=\"VDI\" type=\"Readonly\",location=\"Root.vdi\" format=\"VDI\" type=\"Normal\",' $AVBOX > $AVBOX\".edit\"\n\tmv $AVBOX\".edit\" $AVBOX\n}\n\nShutDownAVD() {\n\n\tif ( \"$BLUESTACKS\" ); then\n\t\techo \"[-] Shut-Down & Reboot BlueStacks and see if it worked\"\n\t\techo \"[-] Root and Su with Magisk for BlueStacks\"\n\n\t\tAPPNAME=BlueStacks.app\n\t\tif [ $(ps aux | grep -v grep | grep -c $APPNAME) -gt 0 ]; then\n\t\t\techo \"[-] Trying to shut down BlueStacks\"\n\t\t\tpkill -x BlueStacks\n\t\t\tif [ \"$?\" == \"0\" ]; then\n\t\t\t\techo \"[*] Shut down Signal were send\"\n\t\t\tfi\n\t\t\techo \"[!] If BlueStacks doesn't shut down, try it manually!\"\n\t\tfi\n\t\techo \"[*] If BlueStacks Home Screen is closing, run Magisk from the Terminal and hide it\"\n\t\techo \"adb shell monkey -p com.topjohnwu.magisk -c android.intent.category.LAUNCHER 1\"\n\telse\n\t\techo \"[-] Shut-Down & Reboot (Cold Boot Now) the AVD and see if it worked\"\n\t\techo \"[-] Root and Su with Magisk for Android Studio AVDs\"\n\n\t\tADBPULLECHO=$(adb shell setprop sys.powerctl shutdown 2>/dev/null)\n\t\tif [[ ! \"$ADBPULLECHO\" == *\"error\"* ]]; then\n\t\t\techo \"[-] Trying to shut down the AVD\"\n\t\tfi\n\t\techo \"[!] If the AVD doesn't shut down, try it manually!\"\n\tfi\n\techo \"[-] Modded by NewBit XDA - Jan. 2021\"\n\techo \"[!] Huge Credits and big Thanks to topjohnwu, shakalaca, vvb2060 and HuskyDG\"\n}\n\nGetAVDPKGRevision() {\n\tlocal sourcepropfile=\"source.properties\"\n\tif [[ -d \"$AVDPATH\" ]]; then\n\t\tcd \"$AVDPATH\" > /dev/null\n\t\t\t# If a source.properties file exist, try to find the Pkg.Revision number\n\t\t\tif ( ! checkfile $sourcepropfile -eq 0 ); then\n\t\t\t\techo \"[-] source.properties file exist\"\n\t\t\t\techo \"[*] AVD system-image $(grep 'Pkg.Revision=' $sourcepropfile)\"\n\t\t\tfi\n\t\tcd - > /dev/null\n\tfi\n}\n\nCopyMagiskToAVD() {\n\t# Set Folders and FileNames\n\techo \"[*] Set Directorys\"\n\tif ( \"$BLUESTACKS\" ); then\n\t\t# BlueStacks has its ramdisk.img within, no AVD Path needed\n\t\t# but the VBOX container Root.vdi should be backuped\n\t\tBLUESTACKSROOTVDIFILE=~/Library/BlueStacks/Android/Root.vdi\n\t\tAVBOX=~/Library/BlueStacks/Android/Android.vbox\n\t\tAVBOXFILE=${AVBOX##*/}\n\t\tBLUESTACKSPATH=${BLUESTACKSROOTVDIFILE%/*}\n\t\tROOTVDIFILE=${BLUESTACKSROOTVDIFILE##*/}\n\t\tRESTOREPATH=$BLUESTACKSPATH\n\telse\n\t\tAVDPATHWITHRDFFILE=\"$ANDROIDHOME/$1\"\n\t\tAVDPATH=${AVDPATHWITHRDFFILE%/*}\n\t\tRDFFILE=${AVDPATHWITHRDFFILE##*/}\n\t\tRESTOREPATH=$AVDPATH\n\tfi\n\n\tif ( \"$restore\" ); then\n\t\trestore_backups \"$RESTOREPATH\"\n\tfi\n\n\tif ( \"$toggleRamdisk\" ); then\n\t\ttoggle_Ramdisk \"$RESTOREPATH\"\n\tfi\n\n\tif ( \"$BLUESTACKS\" ); then\n\t\tif ( checkfile \"$BLUESTACKSPATH/$ROOTVDIFILE\" -eq 0 ); then\n\t\t\techo \"[!] $ROOTVDIFILE not found\"\n\t\t\techo \"[!] check your BlueStacks installation\"\n\t\t\texit\n\t\tfi\n\t\techo \"[!] $ROOTVDIFILE found\"\n\t\tcreate_backup \"$BLUESTACKSROOTVDIFILE\"\n\t\tMakeBlueStacksRW\n\tfi\n\n\tGetAVDPKGRevision\n\tTestADB\n\n\t# The Folder where the script was called from\n\tROOTAVD=\"`getdir \"${BASH_SOURCE:-$0}\"`\"\n\tMAGISKZIP=$ROOTAVD/Magisk.zip\n\n\t# change to ROOTAVD directory\n\tcd \"$ROOTAVD\"\n\n\t# Kernel Names\n\tBZFILE=$ROOTAVD/bzImage\n\tKRFILE=kernel-ranchu\n\n\tif ( \"$InstallApps\" ); then\n\t\tinstall_apps\n\t\texit\n\tfi\n\n\tADBWORKDIR=/data/data/com.android.shell\n\tadb shell \"cd $ADBWORKDIR\" 2>/dev/null\n\n\tif [ \"$?\" != \"0\" ]; then\n\t\techo \"[!] $ADBWORKDIR doesn't exist, switching to tmp'\"\n\t\tADBWORKDIR=/data/local/tmp\n\tfi\n\n\tADBBASEDIR=$ADBWORKDIR/Magisk\n\techo \"[-] In any AVD via ADB, you can execute code without root in $ADBWORKDIR\"\n\n\techo \"[*] Cleaning up the ADB working space\"\n\tadb shell rm -rf $ADBBASEDIR\n\n\techo \"[*] Creating the ADB working space\"\n\tadb shell mkdir $ADBBASEDIR\n\n\t# If Magisk.zip file doesn't exist, just ignore it\n\tif ( ! checkfile \"$MAGISKZIP\" -eq 0 ); then\n\t\techo \"[-] Magisk installer Zip exists already\"\n\t\tpushtoAVD \"$MAGISKZIP\"\n\tfi\n\n\t# Proceed with ramdisk\n\tif \"$RAMDISKIMG\"; then\n\t\t# Is it a ramdisk named img file?\n\t\tif [[ \"$RDFFILE\" != ramdisk*.img ]]; then\n\t\t\techo \"[!] please give a path to a ramdisk file\"\n\t\t\texit\n\t\tfi\n\n\t\tcreate_backup \"$AVDPATHWITHRDFFILE\"\n\t\tpushtoAVD \"$AVDPATHWITHRDFFILE\" \"ramdisk.img\"\n\n\t\tif ( \"$InstallKernelModules\" ); then\n\t\t\tINITRAMFS=$ROOTAVD/initramfs.img\n\t\t\tif ( ! checkfile \"$INITRAMFS\" -eq 0 ); then\n\t\t\t\tpushtoAVD \"$INITRAMFS\"\n\t\t\tfi\n\t\tfi\n\n\t\tif ( \"$AddRCscripts\" ); then\n\t\t\tfor f in $ROOTAVD/*.rc; do\n\t\t\t\tpushtoAVD \"$f\"\n\t\t\tdone\n\t\t\tpushtoAVD \"$ROOTAVD/sbin\"\n\t\tfi\n\tfi\n\n\tpushtoAVD \"rootAVD.sh\"\n\n\tif ( \"$UpdateBusyBoxScript\" ); then\n\t\tpushtoAVD \"libbusybox*.so\"\n\tfi\n\n\techo \"[-] run the actually Boot/Ramdisk/Kernel Image Patch Script\"\n\techo \"[*] from Magisk by topjohnwu and modded by NewBit XDA\"\n\n\tadb shell sh $ADBBASEDIR/rootAVD.sh $@\n\tif [ \"$?\" == \"0\" ]; then\n\n\t\tif ( \"$UpdateBusyBoxScript\" ); then\n\t\t\tpullfromAVD \"bbscript.sh\" \"rootAVD.sh\"\n\t\t\tchmod +x rootAVD.sh\n\t\t\texit\n\t\tfi\n\n\t\tif ( ! \"$DEBUG\" && \"$BLUESTACKS\" ); then\n\t\t\tpullfromAVD \"Magisk.apk\" \"Apps/\"\n\t\t\tpullfromAVD \"Magisk.zip\" \"$ROOTAVD\"\n\t\t\techo \"[-] Clean up the ADB working space\"\n\t\t\tadb shell rm -rf $ADBBASEDIR\n\t\t\tinstall_apps\n\t\t\tShutDownAVD\n\t\t\tadb kill-server\n\t\tfi\n\n\t\t# In Debug-Mode we can skip parts of the script\n\t\tif ( ! \"$DEBUG\" && \"$RAMDISKIMG\" ); then\n\n\t\t\tpullfromAVD \"ramdiskpatched4AVD.img\" \"$AVDPATHWITHRDFFILE\"\n\t\t\tpullfromAVD \"Magisk.apk\" \"Apps/\"\n\t\t\tpullfromAVD \"Magisk.zip\" \"$ROOTAVD\"\n\n\t\t\tif ( \"$InstallPrebuiltKernelModules\" ); then\n\t\t\t\tpullfromAVD \"$BZFILE\" \"$ROOTAVD\"\n\t\t\t\tInstallKernelModules=true\n\t\t\tfi\n\n\t\t\tif ( \"$InstallKernelModules\" ); then\n\t\t\t\tif ( ! checkfile \"$BZFILE\" -eq 0 ); then\n\t\t\t\t\tcreate_backup \"$AVDPATH/$KRFILE\"\n\t\t\t\t\techo \"[*] Copy $BZFILE (Kernel) into kernel-ranchu\"\n\t\t\t\t\tcp $BZFILE $AVDPATH/$KRFILE\n\t\t\t\t\tif [ \"$?\" == \"0\" ]; then\n\t\t\t\t\t\trm -f $BZFILE $INITRAMFS\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\techo \"[-] Clean up the ADB working space\"\n\t\t\tadb shell rm -rf $ADBBASEDIR\n\n\t\t\tinstall_apps\n\t\t\tShutDownAVD\n\t\tfi\n\tfi\n}\n\n###################################################\n# Method to extract specified field data from json\n# Globals: None\n# Arguments: 2\n#   ${1} - value of field to fetch from json\n#   ${2} - Optional, nth number of value from extracted values, by default shows all.\n# Input: file | here string | pipe\n#   _json_value \"Arguments\" < file\n#   _json_value \"Arguments <<< \"${varibale}\"\n#   echo something | _json_value \"Arguments\"\n# Result: print extracted value\n###################################################\njson_value() {\n    $BB grep -o \"\\\"\"\"${1}\"\"\\\"\\:.*\" | $BB sed -e \"s/.*\\\"\"\"${1}\"\"\\\": //\" -e 's/[\",]*$//' -e 's/[\"]*$//' -e 's/[,]*$//' -e \"s/\\\"//\" -n -e \"${2}\"p\n}\n\nCheckAVDIsOnline() {\n\tif [ -z $AVDIsOnline ]; then\n\t\techo \"[-] Checking AVDs Internet connection...\"\n\t\tAVDIsOnline=false\n\t\t$BB timeout 3 $BB wget -q --spider --no-check-certificate http://github.com > /dev/null 2>&1\n\t\tif [ $? -eq 0 ]; then\n    \t\tAVDIsOnline=true\n    \telse\n    \t\techo \"[-] Checking AVDs Internet connection another way...\"\n\t\t\techo -e \"GET http://google.com HTTP/1.0\\n\\n\" | $BB timeout 3 $BB nc -v google.com 80 > /dev/null 2>&1\n    \t\tif [ $? -eq 0 ]; then\n\t\t\t\tAVDIsOnline=true\n\t\t\tfi\n\t\tfi\n\t\t$AVDIsOnline && echo \"[!] AVD is online\" || echo \"[!] AVD is offline\"\n\tfi\n\texport AVDIsOnline\n}\n\nGetPrettyVer() {\n\t\tif echo $1 | $BB grep -q '\\.'; then\n\t\t\tPRETTY_VER=$1\n\t\telse\n\t\t\tPRETTY_VER=\"$1($2)\"\n\t\tfi\n\t\techo \"$PRETTY_VER\"\n}\n\nDownLoadFile() {\n\tCheckAVDIsOnline\n\tif (\"$AVDIsOnline\"); then\n\t\tlocal URL=\"$1\"\n\t\tlocal SRC=\"$2\"\n\t\tlocal DST=\"$3\"\n\n\t\tOF=$BASEDIR/download.tmp\n\t\trm -f $OF\n\t\tBS=1024\n\t\tCUTOFF=100\n\n\t\tif [ \"$DST\" == \"\" ]; then\n\t\t\tDST=$BASEDIR/$SRC\n\t\telse\n\t\t\tDST=$BASEDIR/$DST\n\t\tfi\n\t\t#echo \"[*] Downloading File $SRC\"\n\t\t$BB wget -q -O $DST --no-check-certificate $URL$SRC\n\t\tRESULT=\"$?\"\n\t\twhile [ $RESULT != \"0\" ]\n\t\tdo\n\t\t\techo \"[!] Error while downloading File $SRC\"\n\t\t\techo \"[-] patching it together\"\n\t\t\tFSIZE=$(./busybox stat $DST -c %s)\n\t\t\tif [ $FSIZE -gt $BS ]; then\n\t\t\t\tCOUNT=$(( FSIZE/BS ))\n\t\t\t\tif [ $COUNT -gt $CUTOFF ]; then\n\t\t\t\t\tCOUNT=$(( COUNT - $CUTOFF ))\n\t\t\t\tfi\n\t\t\tfi\n\t\t\t$BB dd if=$DST count=$COUNT bs=$BS of=$OF > /dev/null 2>&1\n\t\t\tmv -f $OF $DST\n\t\t\t$BB wget -q -O $DST --no-check-certificate $URL$SRC -c\n\t\t\tRESULT=\"$?\"\n\t\tdone\n\t\techo \"[!] Downloading File $SRC complete!\"\n\tfi\n}\n\nGetUSBHPmod() {\n\tUSBHPZSDDL=\"/sdcard/Download/usbhostpermissons.zip\"\n\tUSBHPZ=\"https://github.com/newbit1/usbhostpermissons/releases/download/v1.0/usbhostpermissons.zip\"\n\tif [ ! -e $USBHPZSDDL ]; then\n\t\techo \"[*] Downloading USB HOST Permissions Module Zip\"\n\t\t$BB wget -q -O $USBHPZSDDL --no-check-certificate $USBHPZ\n\telse\n\t\techo \"[*] USB HOST Permissions Module Zip is already present\"\n\tfi\n}\n\nFetchMagiskDLData() {\n\tlocal SRCURL=\"$1\"\n\tlocal CHANNEL=\"$2\"\n\tlocal JSON=\"$CHANNEL.json\"\n\tlocal VER=\"\"\n\tlocal VER_CODE=\"\"\n\tlocal DLL=\"\"\n\tlocal i=1\n\n\trm -rf *.json > /dev/null 2>&1\n\t$BB wget -q --no-check-certificate $SRCURL$JSON\n\tVER=$(json_value \"version\" < $JSON)\n\tVER_CODE=$(json_value \"versionCode\" 1 < $JSON)\n\tDLL=$(json_value \"link\" 1 < $JSON)\n\tVER=$(GetPrettyVer $VER $VER_CODE)\n\n\tif ! echo $DLL | $BB grep -q 'https'; then\n\t\tDLL=$SRCURL$DLL\n\tfi\n\n\tif [ -e $MAGISK_DL_LINKS ]; then\n\t\techo $DLL >> $MAGISK_DL_LINKS\n\t\techo $VER >> $MAGISK_VERSIONS\n\t\techo $CHANNEL >> $MAGISK_CHANNEL\n\t\ti=$($BB sed -n '$=' $MAGISK_DL_LINKS)\n\t\techo \"[$i] $CHANNEL $VER\" >> $MAGISK_MENU\n\telse\n\t\tif [[ \"$MAGISK_LOCL_VER\" != \"\" ]]; then\n\t\t\techo \"local\" > $MAGISK_DL_LINKS\n\t\t\techo $MAGISK_LOCL_VER > $MAGISK_VERSIONS\n\t\t\techo \"local \"$CHANNEL > $MAGISK_CHANNEL\n\t\t\techo \"[$i] local $CHANNEL $MAGISK_LOCL_VER (ENTER)\" > $MAGISK_MENU\n\t\t\ti=$((i+1))\n\t\tfi\n\t\techo $DLL >> $MAGISK_DL_LINKS\n\t\techo $VER >> $MAGISK_VERSIONS\n\t\techo $CHANNEL >> $MAGISK_CHANNEL\n\t\tif [[ \"$i\" == \"1\" ]]; then\n\n\t\t\techo \"[$i] $CHANNEL $VER (ENTER)\" >> $MAGISK_MENU\n\t\telse\n\t\t\t#echo $CHANNEL > $MAGISK_CHANNEL\n\t\t\techo \"[$i] $CHANNEL $VER\" >> $MAGISK_MENU\n\t\tfi\n\tfi\n\trm -rf *.json > /dev/null 2>&1\n}\n\nFetchMagiskRLCommits() {\n#$GITHUB $TJWCOMMITSURL $TJWBLOBURL $CHANNEL $TJWREPOURL\n\tlocal DOMAIN=\"$1\"\n\tlocal COMMITSURL=\"$2\"\n\tlocal BLOBURL=\"$3\"\n\tlocal CHANNEL=\"$4\"\n\tlocal JSON=\"$CHANNEL.json\"\n\tlocal REPOURL=\"$5\"\n\tlocal COMMITS=\"\"\n\n\trm -rf $JSON\n\t$BB wget -q --no-check-certificate $DOMAIN$COMMITSURL$JSON\n\n\tCOMMITS=$($BB grep $BLOBURL $JSON | $BB sed -e 's,.*'\"$BLOBURL\"',,' -e 's,'\"$JSON\"'.*,,')\n\n\tfor commit in $COMMITS;do\n\t\tFetchMagiskDLData $RAWGITHUB$REPOURL$commit $CHANNEL\n\tdone\n}\n\nCheckAvailableMagisks() {\n\n\tMAGISK_VERSIONS=$BASEDIR/magisk_versions.txt\n\tMAGISK_DL_LINKS=$BASEDIR/magisk_dl_links.txt\n\tMAGISK_MENU=$BASEDIR/magisk_menu.txt\n\tMAGISK_CHANNEL=$BASEDIR/magisk_channel.txt\n\n\tlocal GITHUB=\"https://github.com/\"\n\tRAWGITHUB=\"https://raw.githubusercontent.com/\"\n\tlocal TJWREPOURL=\"topjohnwu/magisk-files/\"\n\tlocal TJWCOMMITSURL=\"topjohnwu/magisk-files/commits/master/\"\n\tlocal TJWBLOBURL=\"topjohnwu/magisk-files/blob/\"\n\n\tlocal VVB2060REPOURL=\"vvb2060/magisk_files/\"\n\tlocal VVB2060COMMITSURL=\"vvb2060/magisk_files/commits/alpha/\"\n\tlocal VVB2060BLOBURL=\"vvb2060/magisk_files/blob/\"\n\tlocal DLL_cnt=0\n\n\tif [ -z $MAGISKVERCHOOSEN ]; then\n\n\t\tUFSH=$BASEDIR/assets/util_functions.sh\n\t\tOF=$BASEDIR/download.tmp\n\t\tBS=1024\n\t\tCUTOFF=100\n\n\t\tif [ -e $UFSH ]; then\n\t\t\tMAGISK_LOCL_VER=$($BB grep $UFSH -e \"MAGISK_VER\" -w | sed 's/^.*=//')\n\t\t\tMAGISK_LOCL_VER_CODE=$($BB grep $UFSH -e \"MAGISK_VER_CODE\" -w | sed 's/^.*=//')\n\t\t\tMAGISK_LOCL_VER=$(GetPrettyVer $MAGISK_LOCL_VER $MAGISK_LOCL_VER_CODE)\n\t\telse\n\t\t\tMAGISK_LOCL_VER=\"\"\n\t\t\tMAGISK_LOCL_VER_CODE=\"\"\n\t\tfi\n\n\t\tCheckAVDIsOnline\n\t\tif (\"$AVDIsOnline\"); then\n\t\t\techo \"[!] Checking available Magisk Versions\"\n\n\t\t\trm *.txt > /dev/null 2>&1\n\n\t\t\tFetchMagiskDLData $RAWGITHUB$TJWREPOURL\"master/\" \"stable\"\n\t\t\tFetchMagiskDLData $RAWGITHUB$TJWREPOURL\"master/\" \"canary\"\n\t\t\tFetchMagiskDLData $RAWGITHUB$VVB2060REPOURL\"alpha/\" \"alpha\"\n\n\t\t\twhile :\n\t\t\tdo\n\t\t\t\tDLL_cnt=$($BB sed -n '$=' $MAGISK_DL_LINKS)\n\t\t\t\techo \"[?] Choose a Magisk Version to install and make it local\"\n\t\t\t\techo \"[s] (s)how all available Magisk Versions\"\n\t\t\t\tcat $MAGISK_MENU\n\t\t\t\tread -t 10 choice\n\t\t\t\tcase $choice in\n\t\t\t\t\t*)\n\t\t\t\t\t\tif [[ \"$choice\" == \"\" ]]; then\n\t\t\t\t\t\t\tchoice=1\n\t\t\t\t\t\tfi\n\n\t\t\t\t\t\tif [[ $choice -gt 0 && $choice -le $DLL_cnt ]]; then\n\t\t\t\t\t\t\tMAGISK_VER=$($BB sed \"$choice\"'!d' $MAGISK_VERSIONS)\n\t\t\t\t\t\t\tMAGISK_CNL=$($BB sed \"$choice\"'!d' $MAGISK_CHANNEL)\n\t\t\t\t\t\t\techo \"[-] You choose Magisk $MAGISK_CNL Version $MAGISK_VER\"\n\n\t\t\t\t\t\t\tMAGISK_DL=$($BB sed \"$choice\"'!d' $MAGISK_DL_LINKS)\n\t\t\t\t\t\t\tif [[ \"$MAGISK_DL\" == \"local\" ]]; then\n\t\t\t\t\t\t\t\tMAGISKVERCHOOSEN=false\n\t\t\t\t\t\t\tfi\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfi\n\n\t\t\t\t\t\tif [[ \"$choice\" == \"s\" ]]; then\n\t\t\t\t\t\t\techo \"[!] Fetching all available Magisk Versions...\"\n\t\t\t\t\t\t\trm *.txt > /dev/null 2>&1\n\t\t\t\t\t\t\tFetchMagiskRLCommits $GITHUB $TJWCOMMITSURL $TJWBLOBURL \"stable\" $TJWREPOURL\n\t\t\t\t\t\t\tFetchMagiskRLCommits $GITHUB $TJWCOMMITSURL $TJWBLOBURL \"canary\" $TJWREPOURL\n\t\t\t\t\t\t\tFetchMagiskRLCommits $GITHUB $VVB2060COMMITSURL $VVB2060BLOBURL \"alpha\" $VVB2060REPOURL\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\techo \"invalid option $choice\"\n\t\t\t\t\t\tfi\n\t\t\t\t\t\t;;\n \t\t\t\tesac\n\t\t\tdone\n\t\t\t#exit\n\t\telse\n\t\t\tMAGISK_VER=$MAGISK_LOCL_VER\n\t\t\tMAGISKVERCHOOSEN=false\n\t\tfi\n\n\t\tif [ -z $MAGISKVERCHOOSEN ]; then\n\t\t\techo \"[*] Deleting local Magisk $MAGISK_LOCL_VER\"\n\t\t\trm -rf $MZ\n\t\t\trm -rf *.apk\n\t\t\techo \"[*] Downloading Magisk $MAGISK_CNL $MAGISK_VER\"\n\t\t\t$BB wget -q -O $MZ --no-check-certificate $MAGISK_DL\n\t\t\tRESULT=\"$?\"\n\t\t\twhile [ $RESULT != \"0\" ]; do\n\t\t\t\techo \"[!] Error while downloading Magisk $MAGISK_CNL $MAGISK_VER\"\n\t\t\t\techo \"[-] patching it together\"\n\t\t\t\tFSIZE=$(./busybox stat $MZ -c %s)\n\t\t\t\tif [ $FSIZE -gt $BS ]; then\n\t\t\t\t\tCOUNT=$(( FSIZE/BS ))\n\t\t\t\t\tif [ $COUNT -gt $CUTOFF ]; then\n\t\t\t\t\t\tCOUNT=$(( COUNT - $CUTOFF ))\n\t\t\t\t\tfi\n\t\t\t\tfi\n\t\t\t\t$BB dd if=$MZ count=$COUNT bs=$BS of=$OF > /dev/null 2>&1\n\t\t\t\tmv -f $OF $MZ\n\t\t\t\t$BB wget -q -O $MZ --no-check-certificate $MAGISK_DL -c\n\t\t\t\tRESULT=\"$?\"\n\t\t\tdone\n\t\t\techo \"[!] Downloading Magisk $MAGISK_CNL $MAGISK_VER complete!\"\n\t\t\tMAGISKVERCHOOSEN=true\n\t\t\tPrepBusyBoxAndMagisk\n\t\tfi\n\n\t\t# Call rootAVD with GetUSBHPmodZ to download the usbhostpermissons module\n\t\t$GetUSBHPmodZ && $AVDIsOnline && GetUSBHPmod\n\tfi\n\texport MAGISK_VER\n\texport MAGISKVERCHOOSEN\n\texport UFSH\n}\n\nInstallMagiskTemporarily() {\n\tmagiskispreinstalled=false\n\n\techo \"[*] Searching for pre installed Magisk Apps\"\n\tPKG_NAMES=$(pm list packages magisk | cut -f 2 -d \":\") > /dev/null 2>&1\n\tPKG_NAME=\"\"\n\tlocal MAGISK_PKG_VER_CODE=\"\"\n\tlocal MAGISK_ZIP_VER_CODE=\"\"\n\n\tif [[ \"$PKG_NAMES\" == \"\" ]]; then\n\t\techo \"[!] Temporarily installing Magisk\"\n\t\tpm install -r $MZ >/dev/null 2>&1\n\t\tPKG_NAME=$(pm list packages magisk | cut -f 2 -d \":\") > /dev/null 2>&1\n\telse\n\t\tPKG_NAME=$PKG_NAMES\n\n\t\t$(pm dump --help > /dev/null 2>&1)\n\t\tRESULT=\"$?\"\n\n\t\tif [[ \"$RESULT\" == \"0\" ]]; then\n\t\t\tMAGISK_PKG_VER_CODE=$(pm dump $PKG_NAME | grep versionCode= | sed 's/.*versionCode=\\([0-9]\\{1,\\}\\).*/\\1/')\n\t\t\t#echo \"MAGISK_PKG_VER_CODE=$MAGISK_PKG_VER_CODE\"\n\t\t\tMAGISK_ZIP_VER_CODE=$(grep $UFSH -e \"MAGISK_VER_CODE\" -w | sed 's/^.*=//')\n\t\t\t#echo \"MAGISK_ZIP_VER_CODE=$MAGISK_ZIP_VER_CODE\"\n\t\t\t#echo \"PKG_NAME=$PKG_NAME\"\n\t\tfi\n\n\t\tif [[ \"$MAGISK_PKG_VER_CODE\" != \"$MAGISK_ZIP_VER_CODE\" ]]; then\n\t\t\techo \"[-] Magisk Versions differ\"\n\t\t\techo \"[*] Exchanging pre installed Magisk App Version $MAGISK_PKG_VER_CODE\"\n\t\t\tpm clear $PKG_NAME >/dev/null 2>&1\n\t\t\tpm uninstall $PKG_NAME >/dev/null 2>&1\n\t\t\techo \"[-] with the Magisk App Version $MAGISK_ZIP_VER_CODE\"\n\t\t\tpm install -r $MZ >/dev/null 2>&1\n\t\t\tPKG_NAME=$(pm list packages magisk | cut -f 2 -d \":\") > /dev/null 2>&1\n\t\tfi\n\t\tif [[ \"$MAGISK_PKG_VER_CODE\" == \"\" ]]; then\n\t\t\techo \"[!] Found a pre installed Magisk App, use it\"\n\t\telse\n\t\t\techo \"[!] Found a pre installed Magisk App Version $MAGISK_PKG_VER_CODE, use it\"\n\t\tfi\n\t\tmagiskispreinstalled=true\n\tfi\n}\n\nRemoveTemporarilyMagisk() {\n\n\tif ! $magiskispreinstalled; then\n\t\techo \"[!] Removing Temporarily installed Magisk\"\n\t\tpm clear $PKG_NAME >/dev/null 2>&1\n\t\tpm uninstall $PKG_NAME >/dev/null 2>&1\n\tfi\n}\n\nTestingBusyBoxVersion() {\n\n\tlocal busyboxworks=false\n\tlocal RESULT=\"\"\n\techo \"[*] Testing Busybox $1\"\n\n\trm -fR $TMP\n\tmkdir -p $TMP\n\n\tcd $TMP > /dev/null\n\t\t$(ASH_STANDALONE=1 $1 sh -c 'grep' > /dev/null 2>&1)\n\t\tRESULT=\"$?\"\n\t\tif [[ \"$RESULT\" != \"255\" ]]; then\n\t\t\t$($1 unzip $MZ -oq > /dev/null 2>&1)\n\t\t\tRESULT=\"$?\"\n\t\t\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\t\t\techo \"[!] Busybox binary does not support extracting Magisk.zip\"\n\t\t\telse\n\t\t\t\tbusyboxworks=true\n\t\t\tfi\n\t\tfi\n\tcd - > /dev/null\n\n\trm -fR $TMP\n\t$busyboxworks && return 0 || return 1\n}\n\nFindWorkingBusyBox() {\n\techo \"[*] Finding a working Busybox Version\"\n\tlocal bbversion=\"\"\n\tlocal RESULT=\"\"\n\n\tfor file in $(ls $BASEDIR/lib/*/*busybox*); do\n\t\tchmod +x \"$file\"\n\t\tbbversion=$($file | $file head -n 1)>/dev/null 2>&1\n\t\tif [[ $bbversion == *\"BusyBox\"*\"Magisk\"*\"multi-call\"* ]]; then\n\t\t\tTestingBusyBoxVersion \"$file\"\n\t\t\tRESULT=\"$?\"\n\t\t\tif [[ \"$RESULT\" == \"0\" ]]; then\n\t\t\t\techo \"[!] Found a working Busybox Version\"\n\t\t\t\techo \"[!] $bbversion\"\n\t\t\t\texport WorkingBusyBox=\"$file\"\n\t\t\t\treturn\n\t\t\tfi\n\t\tfi\n\tdone\n\techo \"[!] Can not find any working Busybox Version\"\n\tabort_script\n}\n\nExtractMagiskViaPM() {\n\tInstallMagiskTemporarily\n\tPKG_PATH=$(pm path $PKG_NAME)\n\tPKG_PATH=${PKG_PATH%/*}\n\tPKG_PATH=${PKG_PATH#*:}\n\techo \"[*] Copy Magisk Lib Files to workdir\"\n\tcp -Rf $PKG_PATH/lib $BASEDIR/\n\tRemoveTemporarilyMagisk\n}\n\nDownloadUptoDateSript() {\n\techo \"[*] Trying to Download the Up-To-Date Script Version\"\n\n\tlocal DLL_URL=\"https://github.com/newbit1/rootAVD/raw/master/\"\n\tlocal DLL_SCRIPT=\"rootAVD.sh\"\n\tlocal DLL_ROOTAVD_ZIP=\"https://github.com/newbit1/rootAVD/archive/refs/heads/master.zip\"\n\tlocal PKG_PATH=\"\"\n\n\tExtractMagiskViaPM\n\tFindWorkingBusyBox\n\tCopyBusyBox\n\tDownLoadFile $DLL_URL $DLL_SCRIPT\n}\n\nExtractBusyboxFromScript() {\n\tlocal BBSCR=$BASEDIR/bbscript.sh\n\tlocal bblineoffset=\"\"\n\tlocal last_line=\"\"\n\tlocal bbline_cnt=\"\"\n\tcp $0 $BBSCR\n\n\tbblineoffset=$(sed -n '/BUSYBOXBINARY/=' $BBSCR | sort -nr)\n\tbbline_cnt=$(sed -n '/BUSYBOXBINARY/=' $BBSCR | sort -nr | sed -n '$=')\n\n\tif [[ \"$bbline_cnt\" -gt \"3\" ]]; then\n\t\techo \"[*] Extracting busybox from script ...\"\n\t\tfor i in $bblineoffset;do\n\t\t\tcp $BBSCR busybox\n\t\t\tsed -i 1,\"$i\"'d',\"$i\"'q' $BB\n\t\t\t$($BB >/dev/null 2>&1)\n\t\t\tif [[ \"$?\" == \"0\" ]]; then\n\t\t\t\techo \"[!] Found a working busybox Binary: $file\"\n\t\t\t\techo \"[!] $($BB | $BB head -n 1)\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tfi\n\n\t$($BB >/dev/null 2>&1)\n\tif [[ ! \"$?\" == \"0\" ]]; then\n\t\techo \"[!] There is no busybox behind the script\"\n\t\t#echo \"[!] Run rootAVD with UpdateBusyBoxScript first\"\n\t\tDownloadUptoDateSript\n\tfi\n}\n\nUpdateBusyBoxToScript() {\n\tlocal BBSCR=$BASEDIR/bbscript.sh\n\tlocal FSIZE=\"\"\n\tlocal last_line=\"\"\n\tcp $0 $BBSCR\n\tchmod +x libbusybox*.so\n\n\t# Find the first working busybox binary\n\tfor file in libbusybox*.so; do\n\t\tcp -fF $file $BB\n\t\t$($BB >/dev/null 2>&1)\n\t\tif [[ \"$?\" == \"0\" ]]; then\n\t\t\techo \"[!] Found a working busybox Binary: $file\"\n\t\t\techo \"[!] $($BB | $BB head -n 1)\"\n\t\t\tbreak\n\t\tfi\n\tdone\n\n\t$($BB >/dev/null 2>&1)\n\tif [[ ! \"$?\" == \"0\" ]]; then\n\t\techo \"[!] Can't find a working busybox Binary\"\n\t\texit 0\n\tfi\n\n\t# Add every provided busybox binary behind the script\n\tfor file in libbusybox*.so; do\n\t\techo \"\" >> $BBSCR\n\t\techo \"###BUSYBOXBINARY###\" >> $BBSCR\n\t\tFSIZE=$(./busybox stat $BBSCR -c %s)\n\t\t$BB dd if=$file oflag=seek_bytes seek=$FSIZE of=$BBSCR > /dev/null 2>&1\n\tdone\n\n\t#sed -i \"$((bblineoffset+1))\",\"$last_line\"'d' $BBSCR\n}\n\nCopyBusyBox() {\n\techo \"[*] Copy busybox from lib to workdir\"\n# \tif [ -e $BASEDIR/lib ]; then\n# \t\tchmod -R 755 $BASEDIR/lib\n# \t\tcp -f $BASEDIR/lib/$ABI/libbusybox.so $BB >/dev/null 2>&1\n# \t\t$BB >/dev/null 2>&1 && return || cp -f $BASEDIR/lib/$ARCH32/libbusybox.so $BB >/dev/null 2>&1\n# \t\t$BB >/dev/null 2>&1 && return || cp -f $BASEDIR/lib/$ARCH/libbusybox.so $BB >/dev/null 2>&1\n# \tfi\n\tcp -fF $WorkingBusyBox $BB >/dev/null 2>&1\n\tchmod +x $BB\n}\n\nMoveBusyBox() {\n\techo \"[*] Move busybox from lib to workdir\"\n# \tif [ -e $BASEDIR/lib ]; then\n# \t\tchmod -R 755 $BASEDIR/lib\n# \t\tmv -f $BASEDIR/lib/$ABI/libbusybox.so $BB >/dev/null 2>&1\n# \t\t$BB >/dev/null 2>&1 && return || mv -f $BASEDIR/lib/$ARCH32/libbusybox.so $BB >/dev/null 2>&1\n# \t\t$BB >/dev/null 2>&1 && return || mv -f $BASEDIR/lib/$ARCH/libbusybox.so $BB >/dev/null 2>&1\n# \tfi\n\tmv -f $WorkingBusyBox $BB >/dev/null 2>&1\n\tchmod +x $BB\n}\n\nFindUnzip() {\n\tlocal RESULT=\"\"\n\tif [ -e $MZ ]; then\n\t\techo \"[*] Looking for an unzip binary\"\n\t\t$(which unzip > /dev/null 2>&1)\n\t\tRESULT=\"$?\"\n\n\t\tif [[ \"$RESULT\" == \"0\" ]]; then\n\t\t\techo \"[-] unzip binary found\"\n\t\t\techo \"[*] Extracting busybox and Magisk.zip via unzip ...\"\n\t\t\t$(unzip $MZ -oq > /dev/null 2>&1)\n\t\t\tRESULT=\"$?\"\n\t\t\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\t\t\techo \"[!] unzip binary does not support extracting Magisk.zip\"\n\t\t\t\texit 1\n\t\t\telse\n\t\t\t\tFindWorkingBusyBox\n\t\t\tfi\n\t\telse\n\t\t\techo \"[-] No unzip binary found\"\n\t\tfi\n\n\t\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\t\tExtractMagiskViaPM\n\t\t\tFindWorkingBusyBox\n\t\t\tCopyBusyBox\n\t\t\techo \"[*] Extracting Magisk.zip via Busybox ...\"\n\t\t\t$($BB unzip $MZ -oq > /dev/null 2>&1)\n\t\t\tRESULT=\"$?\"\n\t\t\tif [[ \"$RESULT\" != \"0\" ]]; then\n\t\t\t\techo \"[!] Busybox binary does not support extracting Magisk.zip\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"[!] No Magisk.zip present\"\n\t\texit 1\n\tfi\n}\n\nPrepBusyBoxAndMagisk() {\n\techo \"[-] Switch to the location of the script file\"\n\tBASEDIR=\"`getdir \"${BASH_SOURCE:-$0}\"`\"\n\tif [[ \"$BASEDIR\" == \".\" ]]; then\n\t\tBASEDIR=$(pwd)\n\tfi\n\tTMP=$BASEDIR/tmp\n\tBB=$BASEDIR/busybox\n\tMZ=$BASEDIR/Magisk.zip\n\tcd $BASEDIR\n\n\tif (\"$UpdateBusyBoxScript\"); then\n\t\tUpdateBusyBoxToScript $@\n\t\texit 1\n\tfi\n\n\trm -rf lib assets\n\tFindUnzip\n\tMoveBusyBox\n\n\tchmod -R 755 $BASEDIR\n\tCheckAvailableMagisks\n}\n\nExecBusyBoxAsh() {\n\texport PREPBBMAGISK=1\n\texport ASH_STANDALONE=1\n\texport BASEDIR\n\texport TMP\n\texport BB\n\texport MZ\n\n\tif [ \"$DERIVATE\" == \"BlueStacks\" ]; then\n\t\tCheckBlueStacksSUBinary\n\t\techo \"[*] Re-Run rootAVD in Magisk Busybox STANDALONE (D)ASH as Root\"\n\t\texec $SU 0 $BB sh $0 $@\n\tfi\n\techo \"[*] Re-Run rootAVD in Magisk Busybox STANDALONE (D)ASH\"\n\texec $BB sh $0 $@\n}\n\nrepack_ramdisk() {\n\techo \"[*] Repacking ramdisk ..\"\n\tcd $TMP/ramdisk > /dev/null\n\t\t`find . | cpio -H newc -o > $CPIO`\n\tcd - > /dev/null\n}\n\nextract_patched_ramdisk() {\necho \"[-] Clearing $TMP/ramdisk\"\nrm -fR $TMP/ramdisk\nmkdir -p $TMP/ramdisk\n\ncd $TMP/ramdisk > /dev/null\n\t$BASEDIR/busybox cpio -F $CPIO -i *lib* > /dev/null 2>&1\n\t../../magiskboot cpio ../../ramdisk.cpio \"rm -r /lib/modules/*\"\n\tls -la\ncd - > /dev/null\nexit\n}\n\nextract_stock_ramdisk() {\necho \"[-] Clearing $TMP/ramdisk\"\nrm -fR $TMP/ramdisk\nmkdir -p $TMP/ramdisk\n\ncd $TMP/ramdisk > /dev/null\n\techo \"[*] Extracting Stock ramdisk\"\n\t$BASEDIR/busybox cpio -F $CPIO -i > /dev/null 2>&1\ncd - > /dev/null\n}\n\ndecompress_ramdisk(){\n\techo \"[-] taken from shakalaca's MagiskOnEmulator/process.sh\"\n\techo \"[*] executing ramdisk splitting / extraction / repacking\"\n\t# extract and check ramdisk\n\tif [[ $API -ge 30 ]]; then\n\t\t$RAMDISK_GZ && gzip -fdk $RDF$ENDG\n\t\techo \"[-] API level greater then 30\"\n\t\techo \"[*] Check if we need to repack ramdisk before patching ..\"\n\t\tCOUNT=`strings -t d $RDF | grep TRAILER\\!\\! | wc -l`\n\t  if [[ $COUNT -gt 1 ]]; then\n\t\techo \"[-] Multiple cpio archives detected\"\n\t\tREPACKRAMDISK=1\n\t  fi\n\tfi\n\n\tif [ \"$DERIVATE\" == \"BlueStacks\" ]; then\n\t\t$RAMDISK_GZ && gzip -fdk $RDF$ENDG\n\t\tCOUNT=`strings -t d $RDF | grep TRAILER | wc -l`\n\t\tREPACKRAMDISK=1\n\tfi\n\n\tif [[ -n \"$REPACKRAMDISK\" ]]; then\n\t\t$RAMDISK_GZ && rm $RDF$ENDG\n\t  \techo \"[*] Unpacking ramdisk ..\"\n\t  \tmkdir -p $TMP/ramdisk\n\t  \tLASTINDEX=0\n\t  \tNextArchiveINDEX=0\n\t  \tIBS=1\n\t  \tOBS=4096\n\t  \tOF=$TMP/temp$ENDG\n\n\t  \tRAMDISKS=`strings -t d $RDF | grep TRAILER | sed 's|TRAILER.*|TRAILER|'`\n\n\t  \tfor OFFSET in $RAMDISKS; do\n\n\t\t\t# calculate offset to next archive\n\t\t\tif [ `echo \"$OFFSET\" | grep TRAILER` ]; then\n\t\t\t\t# find position of end of TRAILER!!! string in image\n\n\t\t\t\tif $RAMDISK_GZ; then\n\t\t\t\t\tLEN=${#OFFSET}\n\t\t\t\t\tSTART=$((LASTINDEX+LEN))\n\t\t\t\t\t# find first occurance of string in image, that will be start of cpio archive\n\t\t\t\t\tdd if=$RDF skip=$START count=$OBS ibs=$IBS obs=$OBS of=$OF > /dev/null 2>&1\n\t\t\t\t\tHEAD=`strings -t d $OF | head -1`\n\t\t\t\t\t# vola\n\t\t\t\t\tfor i in $HEAD;do\n\t\t\t\t\t\tHEAD=$i\n\t\t\t\t\t\tbreak\n\t\t\t\t\tdone\n\t\t\t\t\tLASTINDEX=$((START+HEAD))\n\t\t\t\tfi\n\t\t  \t\tcontinue\n\t\t\tfi\n\n\t\t\t# number of blocks we'll extract\n\t\t\t$RAMDISK_GZ && BLOCKS=$(((OFFSET+128)/IBS))\n\t\t\tif $RAMDISK_LZ4; then\n\t\t\t\tif [ $LASTINDEX == \"0\" ]; then\n\t\t\t\t\techo \"[*] Searching for the real End of the 1st Archive\"\n\t\t\t\t\twhile [ $LASTINDEX == \"0\" ]; do\n\t\t\t\t\t\tFIRSTFILEBYTES=$(xxd -p -c8 -l8 -s \"$OFFSET\" \"$RDF\")\n\t\t\t\t\t\tFIRSTFILEBYTES=\"${FIRSTFILEBYTES:0:8}\"\n\t\t\t\t\t\tif [ \"$FIRSTFILEBYTES\" == \"$COMPRESS_SIGN\" ]; then\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfi\n\t\t\t\t\t\tOFFSET=$((OFFSET+1))\n\t\t\t\t\tdone\n\t\t\t\tfi\n\t\t\t\tBLOCKS=$((OFFSET/IBS))\n\t\t\tfi\n\n\t\t\t# extract and dump\n\t\t\techo \"[-] Dumping from $LASTINDEX to $BLOCKS ..\"\n\t\t\tdd if=$RDF skip=$LASTINDEX count=$BLOCKS ibs=$IBS obs=$OBS of=$OF > /dev/null 2>&1\n\n\t\t\tcd $TMP/ramdisk > /dev/null\n\t\t\t\t$RAMDISK_GZ && cat $OF | $BASEDIR/busybox cpio -i > /dev/null 2>&1\n\t\t\t\tif $RAMDISK_LZ4; then\n\t\t\t\t\t$BASEDIR/magiskboot decompress $OF $OF.cpio\n\t\t\t\t\t$BASEDIR/busybox cpio -F $OF.cpio -i > /dev/null 2>&1\n\t\t\t\tfi\n\t\t\tcd - > /dev/null\n\n\t\t\tLASTINDEX=$OFFSET\n\t  \tdone\n\t\trepack_ramdisk\n\telse\n\t\techo \"[*] After decompressing ramdisk.img, magiskboot will work\"\n\t\t$RAMDISK_GZ && RDF=$RDF$ENDG\n\t\t$BASEDIR/magiskboot decompress $RDF $CPIO\n\tfi\n\t#update_lib_modules\n}\n\napply_ramdisk_hacks() {\n\n\t# Call rootAVD with PATCHFSTAB if you want the RAMDISK merge your modded fstab.ranchu before Magisk Mirror gets mounted\n\n\t# cp the read-only fstab.ranchu from vendor partition and add usb:auto for SD devices\n\t# kernel musst have Mass-Storage + SCSI Support enabled to create /dev/block/sd* nodes\n\n\t#echo \"[!] PATCHFSTAB=$PATCHFSTAB\"\n\tif (\"$PATCHFSTAB\"); then\n\t\techo \"[-] pulling fstab.ranchu from AVD\"\n\t\tcp /system/vendor/etc/fstab.ranchu $(pwd)\n\t\techo \"[-] adding usb:auto to fstab.ranchu\"\n\t\techo \"/devices/*/block/sd* auto auto defaults voldmanaged=usb:auto\" >> fstab.ranchu\n\t\t#echo \"/devices/*/block/loop7 auto auto defaults voldmanaged=sdcard:auto\" >> fstab.ranchu\n\t\t#echo \"/devices/1-* auto auto defaults voldmanaged=usb:auto\" >> fstab.ranchu\n\t\t$BASEDIR/magiskboot cpio ramdisk.cpio \\\n\t\t\"mkdir 0755 overlay.d/vendor\" \\\n\t\t\"mkdir 0755 overlay.d/vendor/etc\" \\\n\t\t\"add 0644 overlay.d/vendor/etc/fstab.ranchu fstab.ranchu\"\n\t\techo \"[-] overlay adding complete\"\n\t\t#echo \"[-] jumping back to patching ramdisk for magisk init\"\n\t#else\n\t\t#echo \"[!] Skipping fstab.ranchu patch with /dev/block/sda\"\n\t\t#echo \"[?] If you want fstab.ranchu patched, Call rootAVD with PATCHFSTAB\"\n\tfi\n\n\t#echo \"[!] AddRCscripts=$AddRCscripts\"\n\tif (\"$AddRCscripts\"); then\n\t\techo \"[*] adding *.rc files to ramdisk\"\n\t\t#for f in *.rc; do\n\t\t#\t./magiskboot cpio ramdisk.cpio \"add 0644 overlay.d/sbin/$f $f\"\n\t\t#done\n\t\t#CSTRC=init.custom.rc\n\t\t#touch $CSTRC\n\t\tfor f in *.rc; do\n\t\t\t#echo \"$f\" > $CSTRC\n\t\t\t$BASEDIR/magiskboot cpio ramdisk.cpio \"add 0755 overlay.d/$f $f\"\n\t\tdone\n\n\t\tif [ -d $BASEDIR/sbin ]; then\n\t\t\techo \"[*] adding sbin files to ramdisk\"\n\t\t\tfor f in sbin/*; do\n\t\t\t$BASEDIR/magiskboot cpio ramdisk.cpio \"add 0755 overlay.d/$f $f\"\n\t\t\tdone\n\t\tfi\n\t\t#$BASEDIR/magiskboot cpio ramdisk.cpio \"add 0755 overlay.d/$CSTRC $CSTRC\"\n\t\techo \"[-] overlay adding complete\"\n\t\t#echo \"[-] jumping back to patching ramdisk for magisk init\"\n\t#else\n\t\t#echo \"[!] Skip adding *.rc scripts into ramdisk.img/sbin/*.rc\"\n\t\t#echo \"[?] If you want *.rc scripts added into ramdisk.img/sbin/*.rc, Call rootAVD with AddRCscripts\"\n\tfi\n\n\t#$PATCHFSTAB && SKIPOVERLAYD=\"#\" || SKIPOVERLAYD=\"\"\n\tupdate_lib_modules\n}\n\nverify_ramdisk_origin() {\n\techo \"[*] Verifying Boot Image by its Kernel Release number:\"\n\tlocal KRNAVD=$(uname -r)\n\tlocal KRNRDF=\"\"\n\techo \"[-] This AVD = $KRNAVD\"\n\tKRNRDF=$(cat $CPIO | strings | grep -m 1 vermagic= | sed 's/vermagic=//;s/ .*$//')\n\n\tif [ \"$KRNRDF\" != \"\" ]; then\n\t\techo \"[-]  Ramdisk = $KRNRDF\"\n\t\tif [ \"$KRNAVD\" == \"$KRNRDF\" ]; then\n\t\t\techo \"[!] Ramdisk is probably from this AVD\"\n\t\telse\n\t\t\techo \"[!] Ramdisk is probably NOT from this AVD\"\n\t\tfi\n\tfi\n}\n\ntest_ramdisk_patch_status(){\n\n\tif [ -e ramdisk.cpio ]; then\n\t\t$BASEDIR/magiskboot cpio ramdisk.cpio test 2>/dev/null\n\t\tSTATUS=$?\n\t\techo \"[-] Checking ramdisk STATUS=$STATUS\"\n\telse\n\t\techo \"[-] Stock A only system-as-root\"\n\t\tSTATUS=0\n\tfi\n\tPATCHEDBOOTIMAGE=false\n\n\tcase $((STATUS & 3)) in\n\t  0 )  # Stock boot\n\t\techo \"[-] Stock boot image detected\"\n\t\tSHA1=`$BASEDIR/magiskboot sha1 ramdisk.cpio 2>/dev/null`\n\t\tcp -af $CPIO $CPIOORIG 2>/dev/null\n\t\t;;\n\n\t  1 )  # Magisk patched\n\t\techo \"[-] Magisk patched boot image detected\"\n\t\t#construct_environment\n\t\tPATCHEDBOOTIMAGE=true\n\t\t;;\n\t  2 )  # Unsupported\n\t\techo \"[!] Boot image patched by unsupported programs\"\n\t\techo \"[!] Please restore back to stock boot image\"\n\t\tabort_script\n\t\t;;\n\tesac\n\n\tif [ $((STATUS & 8)) -ne 0 ]; then\n\t  echo \"[!] TWOSTAGE INIT image detected - Possibly using 2SI, export env var\"\n\t  export TWOSTAGEINIT=true\n\tfi\n\texport PATCHEDBOOTIMAGE\n}\n\npatching_ramdisk(){\n\t##########################################################################################\n\t# Ramdisk patches\n\t##########################################################################################\n\n\techo \"[-] Patching ramdisk\"\n\n\techo \"KEEPVERITY=$KEEPVERITY\" > config\n\techo \"KEEPFORCEENCRYPT=$KEEPFORCEENCRYPT\" >> config\n\techo \"RECOVERYMODE=$RECOVERYMODE\" >> config\n\n\t# actually here is the SHA of the bootimage generated\n\t# we only have one file, so it could make sense\n\t[ ! -z $SHA1 ] && echo \"SHA1=$SHA1\" >> config\n\n\t# Compress to save precious ramdisk space\n\n\tif $IS32BITONLY || ! $IS64BITONLY ; then\n\t\t$BASEDIR/magiskboot compress=xz magisk32 magisk32.xz\n\tfi\n\n\tif $IS64BITONLY || ! $IS32BITONLY ; then\n\t\t$BASEDIR/magiskboot compress=xz magisk64 magisk64.xz\n\tfi\n\n\t$IS64BITONLY && SKIP32=\"#\" || SKIP32=\"\"\n\t$IS64BIT && SKIP64=\"\" || SKIP64=\"#\"\n\n\tif $STUBAPK; then\n\t\techo \"[!] stub.apk is present, compress and add it to ramdisk\"\n\t\t$BASEDIR/magiskboot compress=xz stub.apk stub.xz\n\tfi\n\n\t$STUBAPK && SKIPSTUB=\"\" || SKIPSTUB=\"#\"\n\n\t# Here gets the ramdisk.img patched with the magisk su files and stuff\n\n\techo \"[*] adding overlay.d/sbin folders to ramdisk\"\n\t$BASEDIR/magiskboot cpio ramdisk.cpio \\\n\t\"mkdir 0750 overlay.d\" \\\n\t\"mkdir 0750 overlay.d/sbin\"\n\n\tapply_ramdisk_hacks\n\n\techo \"[!] patching the ramdisk with Magisk Init\"\n\t$BASEDIR/magiskboot cpio ramdisk.cpio \\\n\t\"add 0750 init magiskinit\" \\\n\t\"$SKIP32 add 0644 overlay.d/sbin/magisk32.xz magisk32.xz\" \\\n\t\"$SKIP64 add 0644 overlay.d/sbin/magisk64.xz magisk64.xz\" \\\n\t\"$SKIPSTUB add 0644 overlay.d/sbin/stub.xz stub.xz\" \\\n\t\"patch\" \\\n\t\"backup ramdisk.cpio.orig\" \\\n\t\"mkdir 000 .backup\" \\\n\t\"add 000 .backup/.magisk config\"\n}\n\n\nrename_copy_magisk() {\n\tif ( \"$MAGISKVERCHOOSEN\" ); then\n\t\techo \"[!] Copy Magisk.zip to Magisk.apk\"\n\t\tcp Magisk.zip Magisk.apk\n\telse\n\t\techo \"[!] Rename Magisk.zip to Magisk.apk\"\n\t\tmv Magisk.zip Magisk.apk\n\tfi\n}\n\nrepacking_ramdisk(){\n\tif [ $((STATUS & 4)) -ne 0 ]; then\n\t\techo \"[!] Compressing ramdisk before repacking it\"\n\t  $BASEDIR/magiskboot cpio ramdisk.cpio compress\n\tfi\n\n\techo \"[*] repacking back to ramdisk.img format\"\n\t# Rename and compress ramdisk.cpio back to ramdiskpatched4AVD.img\n\t$BASEDIR/magiskboot compress=$METHOD \"ramdisk.cpio\" \"ramdiskpatched4AVD.img\"\n}\n\nstrip_html_links() {\n\tsed -i -e 's/<a href=/\\n<a href=/g;s/<\\/a>/<\\/a>\\n/g' \"$1\"\n}\nstrip_kernel_builds() {\n\tsed -i -n '/>Update kernel to builds/p' \"$1\"\n}\nstrip_next_pages() {\n\tsed -n '/>Next/p' \"$1\"\n}\nfind_next_pages() {\n\tlocal URL=\"$2\"\n\tlocal NEXTPAGESRC=\"\"\n\tlocal TMPHTML=\"tmp.html\"\n\trm -rf $TMPHTML\n\tNEXTPAGESRC=$(strip_next_pages $1)\n\n\techo \"[-] Find Next Page(s)\"\n\twhile [[ \"$NEXTPAGESRC\" != \"\" ]]; do\n\t\tNEXTPAGESRC=$(echo $NEXTPAGESRC | sed -e 's/.*href=\\\"/\\1/' -e 's/\\\">Next.*//')\n\t\t#echo $NEXTPAGESRC\n\t\tDownLoadFile $URL $NEXTPAGESRC $TMPHTML\n\t\tstrip_html_links $TMPHTML\n\t\tcat $TMPHTML >> $1\n\t\tNEXTPAGESRC=$(strip_next_pages $TMPHTML)\n\tdone\n}\n\nupdate_lib_modules() {\n\tlocal INITRAMFS=initramfs.img\n\tif (\"$AVDIsOnline\"); then\n\t\tif ( \"$InstallPrebuiltKernelModules\" ); then\n\t\t\tlocal KERNEL_ARCH=\"x86-64\"\n\t\t\tif [[ $ABI == *\"arm\"* ]]; then\n  \t\t\t\tKERNEL_ARCH=\"arm64\"\n\t\t\tfi\n\t\t\tlocal unameR=$(uname -r)\n\t\t\tlocal majmin=${unameR%.*}\n\t\t\t#majmin=5.15\n\t\t\tlocal installedbuild=${unameR##*ab}\n\n\t\t\techo \"[*] Fetching Kernel Data:\"\n\t\t\techo \"[-]              Android: $AVERSION\"\n\t\t\techo \"[-]                 Arch: $KERNEL_ARCH\"\n\t\t\techo \"[-]                Uname: $unameR\"\n\t\t\techo \"[-]              Version: $majmin\"\n\t\t\techo \"[-]        Build Version: $installedbuild\"\n\n\t\t\tlocal URL=\"https://android.googlesource.com\"\n\t\t\t#local TAG=\"android$AVERSION-mainline-sdkext-release\"\n\t\t\tlocal TAG=\"android$AVERSION-gsi\"\n\t\t\t#local TAG=\"master\"\n\t\t\tlocal KERSRC=\"/kernel/prebuilts/$majmin/$KERNEL_ARCH/+log/refs/heads/$TAG\"\n\t\t\t#local KERSRC=\"/platform/prebuilts/qemu-kernel/+log/refs/heads/$TAG\"\n\t\t\t#https://android.googlesource.com/platform/prebuilts/qemu-kernel/+log/refs/heads/android11-gsi\n\t\t\t#https://android.googlesource.com/platform/prebuilts/qemu-kernel/+/refs/heads/android11-gsi\n\t\t\t#local KERSRC=\"/kernel/prebuilts/$majmin/$KERNEL_ARCH/+log/refs/heads/android$AVERSION-mainline-sdkext-release\"\n\n\t\t\tlocal MODSRC=\"/kernel/prebuilts/common-modules/virtual-device/$majmin/$KERNEL_ARCH/+log/refs/heads/$TAG\"\n\t\t\t#local MODSRC=\"/kernel/prebuilts/common-modules/virtual-device/$majmin/$KERNEL_ARCH/+log/refs/heads/android$AVERSION-mainline-sdkext-release\"\n\t\t\tlocal KERPREMASHTML=\"kernelprebuiltsmaster.html\"\n\t\t\tlocal KERDST=\"prebuiltkernel.tar.gz\"\n\t\t\tlocal MODDST=\"prebuiltmodules.tar.gz\"\n\t\t\tlocal MODPREMASHTML=\"moduleprebuiltsmaster.html\"\n\t\t\tlocal TMPSTRIPFILE=\"tmpstripfile\"\n\t\t\tlocal TMPREADFILE=\"tmpreadfile\"\n\t\t\tlocal FILETOREAD=\"\"\n\t\t\tlocal FILETOSTRIP=\"\"\n\n\t\t\tlocal BUILDVERCHOOSEN=\"\"\n\t\t\tlocal CHOOSENLINE=\"\"\n\t\t\tlocal KERCOMMITID=\"\"\n\t\t\tlocal MODCOMMITID=\"\"\n\n\t\t\tlocal ker_line_cnt=\"\"\n\t\t\tlocal mod_line_cnt=\"\"\n\t\t\tlocal i=\"\"\n\n\n\t\t\tDownLoadFile $URL $KERSRC $KERPREMASHTML\n\t\t\tstrip_html_links $KERPREMASHTML\n\t\t\tfind_next_pages $KERPREMASHTML $URL\n\t\t\tstrip_kernel_builds $KERPREMASHTML\n\n\t\t\tDownLoadFile $URL $MODSRC $MODPREMASHTML\n\t\t\tstrip_html_links $MODPREMASHTML\n\t\t\tfind_next_pages $MODPREMASHTML $URL\n\t\t\tstrip_kernel_builds $MODPREMASHTML\n\n\t\t\tker_line_cnt=$(sed -n '$=' $KERPREMASHTML)\n\t\t\tmod_line_cnt=$(sed -n '$=' $MODPREMASHTML)\n\n\t\t\tif [ \"$ker_line_cnt\" -gt \"$mod_line_cnt\" ];then\n\t\t\t\tFILETOREAD=\"$KERPREMASHTML\"\n\t\t\t\tFILETOSTRIP=\"$MODPREMASHTML\"\n\t\t\telse\n\t\t\t\tFILETOREAD=\"$MODPREMASHTML\"\n\t\t\t\tFILETOSTRIP=\"$KERPREMASHTML\"\n\t\t\tfi\n\n\t\t\ttouch $TMPSTRIPFILE\n\t\t\ttouch $TMPREADFILE\n\n\t\t\techo \"[*] Find common Build Versions\"\n\t\t\twhile read line; do\n\t\t\t\tBUILDVER=$(echo $line | sed -e 's/<[^>]*>//g')\n\t\t\t\tgrep -e \">$BUILDVER<\" -F $FILETOSTRIP >> $TMPSTRIPFILE\n\t\t\t\tif [[ \"$?\" == \"0\" ]]; then\n\t\t\t\t\techo $line >> $TMPREADFILE\n\t\t\t\tfi\n\t\t\tdone < $FILETOREAD\n\n\t\t\tmv -f $TMPREADFILE $FILETOREAD\n\t\t\tmv -f $TMPSTRIPFILE $FILETOSTRIP\n\n\t\t\twhile :\n\t\t\tdo\n\t\t\t\ti=0\n\t\t\t\techo \"[!] Installed Kernel builds $installedbuild\"\n\t\t\t\techo \"[?] Choose a Prebuild Kernel/Module Version\"\n\t\t\t\twhile read line; do\n\t\t\t\t\ti=$(( i + 1 ))\n\t\t\t\t\tBUILDVER=$(echo $line | sed -e 's/<[^>]*>//g')\n\t\t\t\t\techo \"[$i] $BUILDVER\"\n\t\t\t\tdone < $KERPREMASHTML\n\n\t\t\t\tread choice\n\t\t\t\tcase $choice in\n\t\t\t\t\t*)\n\t\t\t\t\t\tif [[ \"$choice\" == \"\" ]]; then\n\t\t\t\t\t\t\tchoice=1\n\t\t\t\t\t\tfi\n\t\t\t\t\t\tif [ \"$choice\" -le \"$i\" ];then\n\t\t\t\t\t\t\tBUILDVERCHOOSEN=$choice\n\t\t\t\t\t\t\tCHOOSENLINE=$(sed -n \"$BUILDVERCHOOSEN\"'p' $KERPREMASHTML)\n\t\t\t\t\t\t\tBUILDVER=$(echo $CHOOSENLINE| sed -e 's/<[^>]*>//g')\n\t\t\t\t\t\t\tKERCOMMITID=$(echo $CHOOSENLINE | sed -e 's/^[^\"]*\"\\([^\"]*\\)\".*/\\1/')\n\t\t\t\t\t\t\tKERCOMMITID=${KERCOMMITID##*/}\".tar.gz\"\n\n\t\t\t\t\t\t\tCHOOSENLINE=$(sed -n \"$BUILDVERCHOOSEN\"'p' $MODPREMASHTML)\n\t\t\t\t\t\t\tMODCOMMITID=$(echo $CHOOSENLINE | sed -e 's/^[^\"]*\"\\([^\"]*\\)\".*/\\1/')\n\t\t\t\t\t\t\tMODCOMMITID=${MODCOMMITID##*/}\".tar.gz\"\n\n\t\t\t\t\t\t\techo \"[$BUILDVERCHOOSEN] You choose: $BUILDVER\"\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tfi\n\t\t\t\t\t\techo \"Choice is out of range\";;\n\t\t\t\tesac\n\t\t\tdone\n\n\t\t\techo \"[-] Downloading Kernel and its Modules...\"\n\t\t\t# Download Kernel\n\t\t\tDownLoadFile \"$URL/kernel/prebuilts/$majmin/$KERNEL_ARCH/+archive/\" $KERCOMMITID $KERDST\n\t\t\t# Download Modules\n\t\t\tDownLoadFile \"$URL/kernel/prebuilts/common-modules/virtual-device/$majmin/$KERNEL_ARCH/+archive/\" $MODCOMMITID $MODDST\n\n\t\t\techo \"[*] Extracting kernel-$majmin to bzImage\"\n\t\t\ttar -xf $KERDST kernel-$majmin -O > bzImage\n\t\t\techo \"[-] Extracting $INITRAMFS\"\n\t\t\ttar -xf $MODDST $INITRAMFS\n\n\t\t\tInstallKernelModules=true\n\t\tfi\n\tfi\n\n\tif ( \"$InstallKernelModules\" ); then\n\n\t\tif [ -e \"$INITRAMFS\" ]; then\n\t\t\techo \"[!] Installing new Kernel Modules\"\n\t\t\techo \"[*] Copy initramfs.img $TMP/initramfs\"\n\t\t\tmkdir -p $TMP/initramfs\n\t\t\tCMPRMTH=$(compression_method $INITRAMFS)\n\t\t\tcp $INITRAMFS $TMP/initramfs/initramfs.cpio$CMPRMTH\n\t\telse\n\t\t\treturn 0\n\t\tfi\n\n\t\techo \"[-] Extracting Modules from $INITRAMFS\"\n\n\t\tcd $TMP/initramfs > /dev/null\n\t\t\t$BASEDIR/magiskboot decompress initramfs.cpio$CMPRMTH\n\t\t\t$BASEDIR/busybox cpio -F initramfs.cpio -i *lib* > /dev/null 2>&1\n\t\tcd - > /dev/null\n\n\t\tif [ ! -d \"$TMP/initramfs/lib/modules\" ]; then\n\t\t\techo \"[!] $INITRAMFS has no lib/modules, aborting\"\n\t\t\trm -rf bzImage 2>/dev/null\n\t\t\treturn 0\n\t\tfi\n\n\t\t# If Stock or patched Status\n\t\tif $PATCHEDBOOTIMAGE; then\n\t\t\t# If it is a already patched ramdisk\n\t\t\tif [ ! -e \"$TMP/ramdisk\" ]; then\n\t\t\t\tmkdir -p $TMP/ramdisk\n\t\t\tfi\n\n\t\t\techo \"[*] Extracting Modules from patched ramdisk.img\"\n\t\t\tcd $TMP/ramdisk > /dev/null\n\t\t\t\t$BASEDIR/busybox cpio -F $CPIO -i *lib* > /dev/null 2>&1\n\t\t\tcd - > /dev/null\n\t\telse\n\t\t\t# If it is a Stock Ramdisk\n\t\t\techo \"[*] Extracting Modules from Stock ramdisk.img\"\n\t\t\textract_stock_ramdisk\n\t\tfi\n\n\t\tOLDVERMAGIC=$(cat $(find $TMP/ramdisk/. -name '*.ko' | head -n 1 2> /dev/null) | strings | grep vermagic= | sed 's/vermagic=//;s/ .*$//' 2> /dev/null)\n\t\tOLDANDROID=$(cat $(find $TMP/ramdisk/. -name '*.ko' | head -n 1 2> /dev/null) | strings | grep 'Android (' | sed 's/ c.*$//' 2> /dev/null)\n\n\t\t# If Stock or patched Status\n\t\tif $PATCHEDBOOTIMAGE; then\n\t\t\t# If it is a already patched ramdisk\n\t\t\techo \"[*] Removing Modules from patched ramdisk.img\"\n\t\t\t$BASEDIR/magiskboot cpio $CPIO \"rm -r lib\" > /dev/null 2>&1\n\t\telse\n\t\t\t# If it is a Stock Ramdisk\n\t\t\techo \"[*] Removing Modules from Stock ramdisk.img\"\n\t\t\trm -f $TMP/ramdisk/lib/modules/*\n\t\tfi\n\n\t\techo \"[!] $OLDVERMAGIC\"\n\t\techo \"[!] $OLDANDROID\"\n\n\t\techo \"[-] Installing new Modules into ramdisk.img\"\n\t\tcd $TMP/initramfs > /dev/null\n\t\t\tfind ./lib/modules -type f -name '*' -exec cp {} . \\;\n\t\t\tfind . -name '*.ko' -exec cp {} $TMP/ramdisk/lib/modules/ \\;\n\t\t\tNEWVERMAGIC=$(cat $(find . -name '*.ko' | head -n 1 2> /dev/null) | strings | grep vermagic= | sed 's/vermagic=//;s/ .*$//' 2> /dev/null)\n\t\t\tNEWANDROID=$(cat $(find . -name '*.ko' | head -n 1 2> /dev/null) | strings | grep 'Android (' | sed 's/ c.*$//' 2> /dev/null)\n\t\t\tcp modules.alias modules.dep modules.load modules.softdep $TMP/ramdisk/lib/modules/\n\t\tcd - > /dev/null\n\n\t\techo \"[!] $NEWVERMAGIC\"\n\t\techo \"[!] $NEWANDROID\"\n\n\t\techo \"[*] Adjusting modules.load and modules.dep\"\n\t\tcd $TMP/ramdisk/lib/modules > /dev/null\n\t\t\tsed -i -E 's~[^[:blank:]]+/~/lib/modules/~g' modules.load\n\t\t\tsort -s -o modules.load modules.load\n\t\t\tsed -i -E 's~[^[:blank:]]+/~/lib/modules/~g' modules.dep\n\t\t\tsort -s -o modules.dep modules.dep\n\t\tcd - > /dev/null\n\n\t\t# If Stock or patched Status\n\t\tif $PATCHEDBOOTIMAGE; then\n\t\t\t# If it is a already patched ramdisk\n\t\t\techo \"[*] Adding new Modules into patched ramdisk.img\"\n\t\t\tcd $TMP/ramdisk/lib/modules > /dev/null\n\t\t\t\t$BASEDIR/magiskboot cpio $CPIO \\\n\t\t\t\t\"mkdir 0755 lib\" \\\n\t\t\t\t\"mkdir 0755 lib/modules\" > /dev/null 2>&1\n\t\t\t\tfor f in *.*; do\n\t\t\t\t\t$BASEDIR/magiskboot cpio $CPIO \\\n\t\t\t\t\t\"add 0644 lib/modules/$f $f\" > /dev/null 2>&1\n\t\t\t\t\t#echo \"$f\"\n\t\t\t\tdone\n\t\t\tcd - > /dev/null\n\t\telse\n\t\t\t# If it is a Stock Ramdisk\n\t\t\trepack_ramdisk\n\t\tfi\n\tfi\n}\n\n#### BlueStacks functions\n### taken from HuskyDG script MagiskOnEmu libbash.so ->\n\nrandom() {\n\tVALUE=$1; TYPE=$2; PICK=\"$3\"; PICKC=\"$4\"\n\tTMPR=\"\"\n\tHEX=\"0123456789abcdef\"; HEXC=16\n\tCHAR=\"qwertyuiopasdfghjklzxcvbnm\"; CHARC=26\n\tNUM=\"0123456789\"; NUMC=10\n\tCOUNT=$(seq 1 1 $VALUE)\n\tlist_pick=$HEX; C=$HEXC\n\t[ \"$TYPE\" == \"char\" ] &&  list_pick=$CHAR && C=$CHARC\n\t[ \"$TYPE\" == \"number\" ] && list_pick=$NUM && C=$NUMC\n\t[ \"$TYPE\" == \"custom\" ] && list_pick=\"$PICK\" && C=$PICKC\n\t\t  for i in $COUNT; do\n\t\t\t  random_pick=$(( $RANDOM % $C))\n\t\t\t  echo -n ${list_pick:$random_pick:1}\n\t\t  done\n}\n\nrandom_str() {\n\trandom_length=$(random 1 custom 56789 5);\n\trandom $random_length custom \"qwertyuiopasdfghjklzxcvbnm0123456789QWERTYUIOPASDFGHJKLZXCVBNM\" 63 | base64 | sed \"s/=//g\"\n}\nmagisk_loader() {\n\tmagisk_overlay=`random_str`\n\tmagisk_postfsdata=`random_str`\n\tmagisk_service=`random_str`\n\tmagisk_daemon=`random_str`\n\tmagisk_boot_complete=`random_str`\n\tmagisk_loadpolicy=`random_str`\n\tdev_random=`random_str`\n    #system-as-root, /sbin is removal\n    MAGISKTMP=\"/dev/$dev_random\"\n    mount_sbin=\"mkdir -p \\\"$MAGISKTMP\\\"\nmnt_tmpfs \\\"$MAGISKTMP\\\"\nchmod 755 \\\"$MAGISKTMP\\\"\"\n     umount_sbin=\"umount /sbin\"\n\n\n# apply multiple sepolicy at same time\n\nLOAD_MODULES_POLICY=\"rm -rf \\\"\\$MAGISKTMP/.magisk/sepolicy.rules\\\"\nfor module in \\$(ls /data/adb/modules); do\n              if ! [ -f \\\"/data/adb/modules/\\$module/disable\\\" ] && [ -f \\\"/data/adb/modules/\\$module/sepolicy.rule\\\" ]; then\n                  echo \\\"## * module sepolicy: \\$module\\\" >>\\\"\\$MAGISKTMP/.magisk/sepolicy.rules\\\"\n                  cat  \\\"/data/adb/modules/\\$module/sepolicy.rule\\\" >>\\\"\\$MAGISKTMP/.magisk/sepolicy.rules\\\"\n                  echo \\\"\\\" >>\\\"\\$MAGISKTMP/.magisk/sepolicy.rules\\\"\n\n              fi\n          done\n\\$MAGISKTMP/magiskpolicy --live --apply \\\"\\$MAGISKTMP/.magisk/sepolicy.rules\\\"\"\n\nADDITIONAL_SCRIPT=\"( # addition script\nrm -rf /data/adb/post-fs-data.d/fix_mirror_mount.sh\nrm -rf /data/adb/service.d/fix_modules_not_show.sh\n\n\n# additional script to deal with bullshit faulty design of emulator\n# that close built-in root will remove magisk's /system/bin/su\n\necho \\\"\nexport PATH=\\\\\\\"\\$MAGISKTMP:\\\\\\$PATH\\\\\\\"\nif [ -f \\\\\\\"/system/bin/magisk\\\\\\\" ]; then\n    umount -l /system/bin/su\n    rm -rf /system/bin/su\n    ln -fs ./magisk /system/bin/su\n    mount -o ro,remount /system/bin\n    umount -l /system/bin/magisk\n    mount --bind \\\\\\\"\\$MAGISKTMP/magisk\\\\\\\" /system/bin/magisk\nfi\\\" >\\$MAGISKTMP/emu/magisksu_survival.sh\n\n# additional script to deal with bullshit faulty design of Bluestacks\n# that /system is a bind mountpoint\n\necho \\\"\nSCRIPT=\\\\\\\"\\\\\\$0\\\\\\\"\nMAGISKTMP=\\\\\\$(magisk --path) || MAGISKTMP=/sbin\n( #fix bluestacks\nMIRROR_SYSTEM=\\\\\\\"\\\\\\$MAGISKTMP/.magisk/mirror/system\\\\\\\"\ntest ! -d \\\\\\\"\\\\\\$MIRROR_SYSTEM/android/system\\\\\\\" && exit\ntest \\\\\\\"\\\\\\$(cd /system; ls)\\\\\\\" == \\\\\\\"\\\\\\$(cd \\\\\\\"\\\\\\$MIRROR_SYSTEM\\\\\\\"; ls)\\\\\\\" && exit\nmount --bind \\\\\\\"\\\\\\$MIRROR_SYSTEM/android/system\\\\\\\" \\\\\\\"\\\\\\$MIRROR_SYSTEM\\\\\\\" )\n( #fix mount data mirror\nfunction cmdline() {\n\tawk -F\\\\\\\"\\\\\\${1}=\\\\\\\" '{print \\\\\\$2}' < /proc/cmdline | cut -d' ' -f1 2> /dev/null\n}\n\n# additional script to deal with bullshit faulty design of Android-x86\n# that data is a bind mount from $SRC/data on ext4 partition\n\n\nSRC=\\\\\\\"\\\\\\$(cmdline SRC)\\\\\\\"\ntest -z \\\\\\\"\\\\\\$SRC\\\\\\\" && exit\nLIST_TEST=\\\\\\\"\n/data\n/data/adb\n/data/adb/magisk\n/data/adb/modules\n\\\\\\\"\ncount=0\nfor folder in \\\\\\$LIST_TEST; do\ntest \\\\\\\"\\\\\\$(ls -A \\\\\\$MAGISKTMP/.magisk/mirror/\\\\\\$folder 2>/dev/null)\\\\\\\" == \\\\\\\"\\\\\\$(ls -A \\\\\\$folder 2>/dev/null)\\\\\\\" && count=\\\\\\$((\\\\\\$count + 1))\ndone\ntest \\\\\\\"\\\\\\$count\\\\\\\" == 4 && exit\ncount=0\nfor folder in \\\\\\$LIST_TEST; do\ntest \\\\\\\"\\\\\\$(ls -A \\\\\\$MAGISKTMP/.magisk/mirror/data/\\\\\\$SRC/\\\\\\$folder 2>/dev/null)\\\\\\\" == \\\\\\\"\\\\\\$(ls -A \\\\\\$folder 2>/dev/null)\\\\\\\" && count=\\\\\\$((\\\\\\$count + 1))\ndone\nif [ \\\\\\\"\\\\\\$count\\\\\\\" == 4 ]; then\nmount --bind \\\\\\\"\\\\\\$MAGISKTMP/.magisk/mirror/data/\\\\\\$SRC/data\\\\\\\" \\\\\\\"\\\\\\$MAGISKTMP/.magisk/mirror/data\\\\\\\"\nfi )\nrm -rf \\\\\\\"\\\\\\$SCRIPT\\\\\\\"\n\\\" >/data/adb/post-fs-data.d/fix_mirror_mount.sh\necho \\\"\nSCRIPT=\\\\\\\"\\\\\\$0\\\\\\\"\nMAGISKTMP=\\\\\\$(magisk --path) || MAGISKTMP=/sbin\nCHECK=\\\\\\\"/data/adb/modules/.mk_\\\\\\$RANDOM\\\\\\$RANDOM\\\\\\\"\ntouch \\\\\\\"\\\\\\$CHECK\\\\\\\"\ntest \\\\\\\"\\\\\\$(ls -A \\\\\\$MAGISKTMP/.magisk/modules 2>/dev/null)\\\\\\\" != \\\\\\\"\\\\\\$(ls -A /data/adb/modules 2>/dev/null)\\\\\\\" && mount --bind \\\\\\$MAGISKTMP/.magisk/mirror/data/adb/modules \\\\\\$MAGISKTMP/.magisk/modules\nrm -rf \\\\\\\"\\\\\\$CHECK\\\\\\\"\nrm -rf \\\\\\\"\\\\\\$SCRIPT\\\\\\\"\\\" >/data/adb/service.d/fix_modules_not_show.sh\nchmod 755 /data/adb/service.d/fix_modules_not_show.sh\nchmod 755 /data/adb/post-fs-data.d/fix_mirror_mount.sh; )\"\n\n\nEXPORT_PATH=\"export PATH /sbin:/system/bin:/system/xbin:/vendor/bin:/apex/com.android.runtime/bin:/apex/com.android.art/bin\"\n\n\nmagiskloader=\"\n\n         on early-init\n             $EXPORT_PATH\n\n\n          on post-fs-data\n$RM_RUSTY_MAGISK\n              start logd\n              start adbd\n              rm /dev/.magisk_unblock\n              exec u:r:su:s0 root root -- $MAGISKBASE/busybox sh -o standalone $MAGISKBASE/overlay.sh\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk --daemon\n              start $magisk_postfsdata\n              # wait all magisk post-fs-data jobs are completed or 40s  has passed\n              wait /dev/.magisk_unblock 40\n              rm /dev/.magisk_unblock\n\n          service $magisk_postfsdata $MAGISKTMP/magisk --post-fs-data\n              user root\n              seclabel u:r:magisk:s0\n              oneshot\n\n          service $magisk_service $MAGISKTMP/magisk --service\n              class late_start\n              user root\n              seclabel u:r:magisk:s0\n              oneshot\n\n          on property:sys.boot_completed=1\n              $umount_sbin\n              start $magisk_boot_complete\n# remove magisk service traces from some detection\n# although detect modified init.rc is not always correct\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc.$magisk_postfsdata\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc.$magisk_service\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc.$magisk_boot_complete\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc_debug_pid.$magisk_postfsdata\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc_debug_pid.$magisk_service\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/magisk resetprop --delete init.svc_debug_pid.$magisk_boot_complete\n              exec u:r:magisk:s0 root root -- $MAGISKTMP/busybox sh -o standalone $MAGISKTMP/emu/magisksu_survival.sh\n          service $magisk_boot_complete $MAGISKTMP/magisk --boot-complete\n              user root\n              seclabel u:r:magisk:s0\n              oneshot\"\n\n\noverlay_loader=\"#!$MAGISKBASE/busybox sh\n\nexport PATH=/sbin:/system/bin:/system/xbin\n\n\nmnt_tmpfs(){ (\n# MOUNT TMPFS ON A DIRECTORY\nMOUNTPOINT=\\\"\\$1\\\"\nmkdir -p \\\"\\$MOUNTPOINT\\\"\nmount -t tmpfs -o \\\"mode=0755\\\" tmpfs \\\"\\$MOUNTPOINT\\\" 2>/dev/null\n) }\n\n\n\nmnt_bind(){ (\n# SHORTCUT BY BIND MOUNT\nFROM=\\\"\\$1\\\"; TO=\\\"\\$2\\\"\nif [ -L \\\"\\$FROM\\\" ]; then\nSOFTLN=\\\"\\$(readlink \\\"\\$FROM\\\")\\\"\nln -s \\\"\\$SOFTLN\\\" \\\"\\$TO\\\"\nelif [ -d \\\"\\$FROM\\\" ]; then\nmkdir -p \\\"\\$TO\\\" 2>/dev/null\nmount --bind \\\"\\$FROM\\\" \\\"\\$TO\\\"\nelse\necho -n 2>/dev/null >\\\"\\$TO\\\"\nmount --bind \\\"\\$FROM\\\" \\\"\\$TO\\\"\nfi\n) }\n\nclone(){ (\nFROM=\\\"\\$1\\\"; TO=\\\"\\$2\\\"; IFS=\\$\\\"\n\\\"\n[ -d \\\"\\$TO\\\" ] || exit 1;\n( cd \\\"\\$FROM\\\" && find * -prune ) | while read obj; do\n( if [ -d \\\"\\$FROM/\\$obj\\\" ]; then\nmnt_tmpfs \\\"\\$TO/\\$obj\\\"\nelse\nmnt_bind \\\"\\$FROM/\\$obj\\\" \\\"\\$TO/\\$obj\\\" 2>/dev/null\nfi ) &\nsleep 0.05\ndone\n) }\n\noverlay(){ (\n# RE-OVERLAY A DIRECTORY\nFOLDER=\\\"\\$1\\\";\nTMPFOLDER=\\\"/dev/vm-overlay\\\"\n#_____\nPAYDIR=\\\"\\${TMPFOLDER}_\\${RANDOM}_\\$(date | base64)\\\"\nmkdir -p \\\"\\$PAYDIR\\\"\nmnt_tmpfs \\\"\\$PAYDIR\\\"\n#_________\nclone \\\"\\$FOLDER\\\" \\\"\\$PAYDIR\\\"\nmount --move \\\"\\$PAYDIR\\\" \\\"\\$FOLDER\\\"\nrm -rf \\\"\\$PAYDIR\\\"\n#______________\n) }\n\nexit_magisk(){\numount -l $MAGISKTMP\necho -n >/dev/.magisk_unblock\n}\n\n\nAPI=\\$(getprop ro.build.version.sdk)\n  ABI=\\$(getprop ro.product.cpu.abi)\n  if [ \\\"\\$ABI\\\" = \\\"x86\\\" ]; then\n    ARCH=x86\n    ABI32=x86\n    IS64BIT=false\n  elif [ \\\"\\$ABI\\\" = \\\"arm64-v8a\\\" ]; then\n    ARCH=arm64\n    ABI32=armeabi-v7a\n    IS64BIT=true\n  elif [ \\\"\\$ABI\\\" = \\\"x86_64\\\" ]; then\n    ARCH=x64\n    ABI32=x86\n    IS64BIT=true\n  else\n    ARCH=arm\n    ABI=armeabi-v7a\n    ABI32=armeabi-v7a\n    IS64BIT=false\n  fi\n\nmagisk_name=\\\"magisk32\\\"\n[ \\\"\\$IS64BIT\\\" == true ] && magisk_name=\\\"magisk64\\\"\n\n# umount previous /sbin tmpfs overlay\n\ncount=0\n( magisk --stop ) &\n\n# force umount /sbin tmpfs\n\nuntil ! mount | grep -q \\\" /sbin \\\"; do\n[ \"$count\" -gt \"10\" ] && break\numount -l /sbin 2>/dev/null\nsleep 0.1\ncount=$(($count+1))\ntest ! -d /sbin && break\ndone\n\n# mount magisk tmpfs path\n\n$mount_sbin\n\nMAGISKTMP=$MAGISKTMP\nchmod 755 \\\"\\$MAGISKTMP\\\"\nset -x\nmkdir -p \\$MAGISKTMP/.magisk\nmkdir -p \\$MAGISKTMP/emu\nexec 2>>\\$MAGISKTMP/emu/record_logs.txt\nexec >>\\$MAGISKTMP/emu/record_logs.txt\n\ncd $MAGISKBASE\n\ntest ! -f \\\"./\\$magisk_name\\\" && { echo -n >/dev/.overlay_unblock; exit_magisk; exit 0; }\n\n\nMAGISKBIN=/data/adb/magisk\nmkdir /data/unencrypted\nfor mdir in modules post-fs-data.d service.d magisk; do\ntest ! -d /data/adb/\\$mdir && rm -rf /data/adb/\\$mdir\nmkdir /data/adb/\\$mdir 2>/dev/null\ndone\nfor file in magisk32 magisk64 magiskinit; do\n  cp -af ./\\$file \\$MAGISKTMP/\\$file 2>/dev/null\n  chmod 755 \\$MAGISKTMP/\\$file\n  cp -af ./\\$file \\$MAGISKBIN/\\$file 2>/dev/null\n  chmod 755 \\$MAGISKBIN/\\$file\ndone\ncp -af ./magiskboot \\$MAGISKBIN/magiskboot\ncp -af ./busybox \\$MAGISKBIN/busybox\ncp -af ./busybox \\$MAGISKTMP\nchmod 755 \\$MAGISKTMP/busybox\n\\$MAGISKTMP/busybox --install -s \\$MAGISKTMP\ncp -af ./assets/* \\$MAGISKBIN\n\n# create symlink / applet\n\nln -s ./\\$magisk_name \\$MAGISKTMP/magisk 2>/dev/null\nln -s ./magisk \\$MAGISKTMP/su 2>/dev/null\nln -s ./magisk \\$MAGISKTMP/resetprop 2>/dev/null\nln -s ./magisk \\$MAGISKTMP/magiskhide 2>/dev/null\nln -s ./magiskinit \\$MAGISKTMP/magiskpolicy 2>/dev/null\n\nmkdir -p \\$MAGISKTMP/.magisk/mirror\nmkdir \\$MAGISKTMP/.magisk/block\n\ntouch \\$MAGISKTMP/.magisk/config\n\ncd \\$MAGISKTMP\n# SELinux stuffs\nln -sf ./magiskinit magiskpolicy\nif [ -f /vendor/etc/selinux/precompiled_sepolicy ]; then\n  ./magiskpolicy --load /vendor/etc/selinux/precompiled_sepolicy --live --magisk 2>&1\nelif [ -f /sepolicy ]; then\n  ./magiskpolicy --load /sepolicy --live --magisk 2>&1\nelse\n  ./magiskpolicy --live --magisk 2>&1\nfi\n\n#remount system read-only to fix Magisk fail to mount mirror\n\n$remove_backup\nmount -o ro,remount /\nmount -o ro,remount /system\nmount -o ro,remount /vendor\nmount -o ro,remount /product\nmount -o ro,remount /system_ext\n\nrestorecon -R /data/adb/magisk\n\n$ADDITIONAL_SCRIPT\n$LOAD_MODULES_POLICY\n\n[ ! -f \\\"\\$MAGISKTMP/magisk\\\" ] && exit_magisk\n# test ! \\\"\\$(pidof magiskd)\\\" && exit_magisk\n\n[ -d \"/oem/.overlay\" ] && umount -l /oem\numount -l /system/etc/init\numount -l /init.rc\numount -l /system/etc/init/hw/init.rc\n\"\n}\n### <- taken from HuskyDG script MagiskOnEmu libbash.so\n\nCheckBlueStacksSUBinary(){\n\tSU=\"/system/xbin/bstk/su\"\n\techo \"[-] Checking for build-in $SU binary\"\n\tif [ ! -e $SU ]; then\n\t\techo \"[!] We need Root to get Root\"\n\t\techo \"[!] No $SU could be found\"\n\t\tabort_script\n\tfi\n\techo \"[*] $SU binary found\"\n\n\t# Disable SELinux\n\t#$SU -c 'setenforce 0'\n}\n\nGetBlueStacksRamdisk() {\n\techo \"[*] Getting BlueStacks Ramdisk\"\n\n\tBA=\"/boot/android\"\n\n\tBSTKRDF=\"$BA/android/ramdisk.img\"\n\tBSTKRDFBU=\"$BSTKRDF.backup\"\n\n\techo \"[-] remounting $BA as RW\"\n\tmount -o remount,rw $BA\n\n\tif [ ! -e $BSTKRDFBU ]; then\n\t\techo \"[*] Copy $BSTKRDF to $BSTKRDFBU\"\n\t\tcp -fac $BSTKRDF $BSTKRDFBU\n\tfi\n\n\techo \"[*] Copy $BSTKRDF to $BASEDIR\"\n\tcp -fac $BSTKRDF $BASEDIR/\n}\n\nFinalizeBlueStacks() {\n\tif ! $DEBUG; then\n\t\techo \"[-] Overwriting $BSTKRDF with ramdiskpatched4AVD.img\"\n\t\tcp -f ramdiskpatched4AVD.img $BSTKRDF\n\t\techo \"[-] Change ramdisk Mode to 644\"\n\t\tchmod 644 $BSTKRDF\n\t\techo \"[-] Change ramdisk Owner to System\"\n\t\tchown 1000:1000 $BSTKRDF\n\tfi\n\n\techo \"[*] Change $BASEDIR Owner back to Shell while root for deleting reasons\"\n\tchown 2000:2000 $BASEDIR -R\n\techo \"[*] Cleaning /data/adb Folder\"\n\trm -rf /data/adb\n\techo \"[-] remounting $BA as RO\"\n\tmount -o remount,ro $BA\n}\n\n# Taken from the Magisk Modules Template by topjohnwu\n# set_perm <target> <owner> <group> <permission> [context]\n#     if [context] is empty, it will default to \"u:object_r:system_file:s0\"\n#     this function is a shorthand for the following commands\n#       chown owner.group target\n#       chmod permission target\n#       chcon context target\n\nset_perm() {\n\tchown $2:$3 $1 || return 1\n\tchmod $4 $1 || return 1\n\tCON=$5\n\t[ -z $CON ] && CON=u:object_r:system_file:s0\n\tchcon $CON $1 || return 1\n}\n\n# set_perm_recursive <directory> <owner> <group> <dirpermission> <filepermission> [context]\n#     if [context] is empty, it will default to \"u:object_r:system_file:s0\"\n#     for all files in <directory>, it will call:\n#       set_perm file owner group filepermission context\n#     for all directories in <directory> (including itself), it will call:\n#       set_perm dir owner group dirpermission context\n\nset_perm_recursive() {\n\tfind $1 -type d 2>/dev/null | while read dir; do\n\tset_perm $dir $2 $3 $4 $6\n\tdone\n\tfind $1 -type f -o -type l 2>/dev/null | while read file; do\n\tset_perm $file $2 $3 $5 $6\n\tdone\n}\n\nSettingBlueStackMagiskPermissions() {\n\techo \"[*] Setting BlueStack Magisk Permissions\"\n\tlocal ROOT=$(stat -c %u /dev)\n\tcd $BLSTKMAGISKDIR/ > /dev/null\n\t\tset_perm_recursive assets $ROOT $ROOT 0750 0777\n\t\tset_perm ./busybox $ROOT $ROOT 0750 u:object_r:magisk_file:s0\n\n\t\tif [ -e \"magisk64\" ]; then\n\t\t\tset_perm ./magisk64 $ROOT $ROOT 0750 u:object_r:magisk_exec:s0\n\t\telif [ -e \"magisk32\" ]; then\n\t\t\tset_perm ./magisk32 $ROOT $ROOT 0750 u:object_r:magisk_exec:s0\n\t\tfi\n\n\t\tset_perm ./magiskboot $ROOT $ROOT 0750\n\t\tset_perm ./magiskinit $ROOT $ROOT 0750\n\t\tset_perm ./overlay.sh $ROOT $ROOT 0750\n\t\tset_perm ../init.rc $ROOT $ROOT 0750\n\tcd - > /dev/null\n}\n\nInstallMagiskIntoBlueStacksRamdisk() {\n\techo \"[-] Patching BlueStacks ramdisk ..\"\n\techo \"[*] Taken from HuskyDG script MagiskOnEmu/libbash.so\"\n\n\tMAGISKBASE=\"/magisk\"\n\tBLSTKMAGISKDIR=$TMP/ramdisk$MAGISKBASE\n\tlocal INITRC=$TMP/ramdisk/init.rc\n\trm -rf $BLSTKMAGISKDIR 2>/dev/null\n\tmkdir -p $BLSTKMAGISKDIR\n\techo \"[-] copying Magisk Assets and Files\"\n\tcp -Rf $BASEDIR/assets $BLSTKMAGISKDIR/\n\tcp $BB $BLSTKMAGISKDIR/\n\tcp $BASEDIR/magisk32 $BLSTKMAGISKDIR/\n\tcp $BASEDIR/magisk64 $BLSTKMAGISKDIR/\n\tcp $BASEDIR/magiskboot $BLSTKMAGISKDIR/\n\tcp $BASEDIR/magiskinit $BLSTKMAGISKDIR/\n\tcp $INITRC $BLSTKMAGISKDIR/\n\techo \"[*] generating Magisk Boot Scripts\"\n\tmagisk_loader\n\techo \"[*] Magisk files will be mounted to $MAGISKTMP\"\n\techo \"[-] writing overlay.sh Script\"\n\techo \"$overlay_loader\" >\"$BLSTKMAGISKDIR/overlay.sh\"\n\techo \"[*] appending boot commands to init.rc\"\n\techo \"$magiskloader\" >> \"$TMP/ramdisk/init.rc\"\n\n\t# setting permissions\n\tSettingBlueStackMagiskPermissions\n\n\techo \"[-] Repacking BlueStacks ramdisk ..\"\n\tcd $TMP/ramdisk > /dev/null\n\t\t`find . | cpio -H newc -o > $CPIO`\n\tcd - > /dev/null\n}\n\nservice(){\n\techo \"[-] service Module testing\"\n\t#exit\n}\n\nInstallMagiskToAVD() {\n\n\tif [ -z $PREPBBMAGISK ]; then\n\t\tProcessArguments $@\n\t\tapi_level_arch_detect\n\t\tPrepBusyBoxAndMagisk\n\t\tExecBusyBoxAsh $@\n\tfi\n\n\techo \"[*] rootAVD with Magisk $MAGISK_VER Installer\"\n\n\tget_flags\n\tcopyARCHfiles\n\n\tif [ \"$DERIVATE\" == \"BlueStacks\" ]; then\n\t\tGetBlueStacksRamdisk\n\tfi\n\n\tif $INEMULATOR; then\n\t\tdetect_ramdisk_compression_method\n\t\tdecompress_ramdisk\n\t\tif $FAKEBOOTIMG; then\n\t\t\tprocess_fake_boot_img\n\t\tfi\n\n\t\ttest_ramdisk_patch_status\n\t\tverify_ramdisk_origin\n\n\t\tif [ \"$DERIVATE\" == \"BlueStacks\" ]; then\n\t\t\tInstallMagiskIntoBlueStacksRamdisk\n\t\telse\n\t\t\tif $PATCHEDBOOTIMAGE; then\n\t\t\t\tapply_ramdisk_hacks\n\t\t\telse\n\t\t\t\tpatching_ramdisk\n\t\t\tfi\n\t\tfi\n\n\t\t## Magisk Module testing\n\t\tif $DEBUG; then\n\t\t\tservice\n\t\tfi\n\n\t\trepacking_ramdisk\n\t\trename_copy_magisk\n\tfi\n\n\tif [ \"$DERIVATE\" == \"BlueStacks\" ]; then\n\t\tFinalizeBlueStacks\n\tfi\n}\n\nGetANDROIDHOME() {\n\n\t#unset ANDROID_HOME\n\t#export ANDROID_HOME=~/Downloads/sdk\n\t#export ANDROID_HOME=~\"/Downloads/sd k\"\n\t#export ANDROID_HOME=\"~/Downloads/sd k\"\n\n\tlocal HOME=~\n\tlocal ANDROIDHOME_M=$HOME/Library/Android/sdk\n\tlocal ANDROIDHOME_L=$HOME/Android/Sdk\n\tdefaultHOME_M=\"~/Library/Android/sdk\"\n\tdefaultHOME_L=\"~/Android/Sdk\"\n\tdefaultHOME=\"\"\n\tlocal hostarch=\"\"\n\tSYSIM_DIR=system-images\n\tADB_DIR=platform-tools\n\n\tNoSystemImages=true\n\n\tif [ -d \"$ANDROIDHOME_M\" ]; then\n\t\tANDROIDHOME=$ANDROIDHOME_M\n\t\tENVVAR=$defaultHOME_M\n\t\tdefaultHOME=$defaultHOME_M\n\telif [ -d \"$ANDROIDHOME_L\" ]; then\n\t\tANDROIDHOME=$ANDROIDHOME_L\n\t\tENVVAR=$defaultHOME_L\n\t\tdefaultHOME=$defaultHOME_L\n\tfi\n\n\tif [ ! -z \"$ANDROID_HOME\" ]; then\n\t\tif [[ \"$ANDROID_HOME\" == *\"~\"* ]]; then\n\t\t\tANDROID_HOME=\"${ANDROID_HOME/#~/~}\"\n\t\tfi\n\t\tANDROIDHOME=\"$ANDROID_HOME\"\n\t\tENVVAR=\"\\$ANDROID_HOME\"\n\tfi\n\n\tif [[ -d \"$ANDROIDHOME/$SYSIM_DIR\" ]]; then\n\t\tNoSystemImages=false\n\tfi\n\n\tif [[ \"$defaultHOME\" == \"\" ]]; then\n\t\thostarch=$(uname -a)\n\t\tdefaultHOME=$defaultHOME_M\n\t\tif [[ \"$hostarch\" == *\"Linux\"* ]]; then\n\t\t\tdefaultHOME=$defaultHOME_L\n\t\telif [[ \"$hostarch\" == *\"linux\"* ]]; then\n\t\t\tdefaultHOME=$defaultHOME_M\n\t\tfi\n\tfi\n\n\texport NoSystemImages\n\texport ANDROIDHOME\n\texport ENVVAR\n\texport SYSIM_DIR\n\texport ADB_DIR\n\texport defaultHOME\n\texport ANDROIDHOME_M\n\texport ANDROIDHOME_L\n}\n\nFindSystemImages() {\n\tlocal SYSIM_EX=\"\"\n\n\techo \"- use ${bold}$ENVVAR${normal} to search for AVD system images\"\n\techo \"\t\"\n\n\tif $NoSystemImages ; then\n\t\techo \"[!] No system-images could be found\"\n\t\treturn 1\n\tfi\n\n\tcd \"$ANDROIDHOME\" > /dev/null\n\t\t\tfor SI in $(find $SYSIM_DIR -type f -iname ramdisk*.img); do\n\t\t\t\tif ( \"$ListAllAVDs\" ); then\n\t\t\t\t\tif [[ \"$SYSIM_EX\" == \"\" ]]; then\n\t\t\t\t\t\tSYSIM_EX+=\"$SI\"\n\t\t\t\t\telse\n\t\t\t\t\t\tSYSIM_EX+=\" $SI\"\n\t\t\t\t\tfi\n\t\t\t\telse\n\t\t\t\t\tSYSIM_EX=\"$SI\"\n\t\t\t\tfi\n\t\t\tdone\n\tcd - > /dev/null\n\n\techo \"${bold}Command Examples:${normal}\"\n\techo \"${bold}./rootAVD.sh${normal}\"\n\techo \"${bold}./rootAVD.sh ListAllAVDs${normal}\"\n\techo \"${bold}./rootAVD.sh InstallApps${normal}\"\n\techo \"\"\n\n\tfor SYSIM in $SYSIM_EX;do\n\t\tif [[ ! \"$SYSIM\" == \"\" ]]; then\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM FAKEBOOTIMG${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM DEBUG PATCHFSTAB GetUSBHPmodZ${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM restore${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM InstallKernelModules${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM InstallPrebuiltKernelModules${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM InstallPrebuiltKernelModules GetUSBHPmodZ PATCHFSTAB DEBUG${normal}\"\n\t\t\techo \"${bold}./rootAVD.sh $SYSIM AddRCscripts${normal}\"\n\t\t\techo \"\"\n\t\telse\n\t\t\techo \"\"\n\t\t\techo \"No ramdisk files could be found\"\n\t\t\techo \"\"\n\t\tfi\n\tdone\n}\n\nShowHelpText() {\nbold=$(tput bold)\nnormal=$(tput sgr0)\necho \"${bold}rootAVD A Script to root AVD by NewBit XDA${normal}\"\necho \"\"\necho \"Usage:\t${bold}rootAVD [DIR/ramdisk.img] [OPTIONS] | [EXTRA ARGUMENTS]${normal}\"\necho \"or:\t${bold}rootAVD [ARGUMENTS]${normal}\"\necho \"\"\necho \"Arguments:\"\necho \"\t${bold}ListAllAVDs${normal}\t\t\tLists Command Examples for ALL installed AVDs\"\necho \"\"\necho \"\t${bold}InstallApps${normal}\t\t\tJust install all APKs placed in the Apps folder\"\necho \"\"\necho \"Main operation mode:\"\necho \"\t${bold}DIR${normal}\t\t\t\ta path to an AVD system-image\"\necho \"\t\t\t\t\t- must always be the ${bold}1st${normal} Argument after rootAVD\"\necho \"\t\"\necho \"ADB Path | Ramdisk DIR | ANDROID_HOME:\"\necho \"\t${bold}[M]ac/Darwin:${normal}\t\t\texport PATH=$defaultHOME_M/platform-tools:\\$PATH\"\necho \"\t\t\t\t\texport PATH=\\$ANDROID_HOME/platform-tools:\\$PATH\"\necho \"\t\t\t\t\tsystem-images/android-\\$API/google_apis_playstore/x86_64/\"\necho \"\t\"\necho \"\t${bold}[L]inux:${normal}\t\t\texport PATH=$defaultHOME_L/platform-tools:\\$PATH\"\necho \"\t\t\t\t\texport PATH=\\$ANDROID_HOME/platform-tools:\\$PATH\"\necho \"\t\t\t\t\tsystem-images/android-\\$API/google_apis_playstore/x86_64/\"\necho \"\t\"\necho \"\t${bold}[W]indows:${normal}\t\t\tset PATH=%LOCALAPPDATA%\\Android\\Sdk\\platform-tools;%PATH%\"\necho \"\t\t\t\t\tset PATH=%ANDROID_HOME%\\platform-tools;%PATH%\"\necho \"\t\t\t\t\tsystem-images\\android-\\$API\\google_apis_playstore\\x86_64\\\\\"\necho \"\t\"\necho \"\t${bold}ANDROID_HOME:${normal}\t\t\tBy default, the script uses ${bold}$defaultHOME${normal}, to set its Android Home\"\necho \"\t\t\t\t\tdirectory, search for AVD system-images and ADB binarys. This behaviour\"\necho \"\t\t\t\t\tcan be overwritten by setting the ANDROID_HOME variable.\"\necho \"\t\t\t\t\te.g. ${bold}export ANDROID_HOME=~/Downloads/sdk${normal}\"\necho \"\t\"\necho \"\t${bold}\\$API:${normal}\t\t\t\t25,29,30,31,32,33,34,UpsideDownCake,etc.\"\necho \"\t\"\necho \"Options:\"\necho \"\t${bold}restore${normal}\t\t\t\trestore all existing ${bold}.backup${normal} files, but doesn't delete them\"\necho \"\t\t\t\t\t- the AVD doesn't need to be running\"\necho \"\t\t\t\t\t- no other Argument after will be processed\"\necho \"\t\"\necho \"\t${bold}InstallKernelModules${normal}\t\tinstall ${bold}custom build kernel and its modules${normal} into ramdisk.img\"\necho \"\t\t\t\t\t- kernel (bzImage) and its modules (initramfs.img) are inside rootAVD\"\necho \"\t\t\t\t\t- both files will be deleted after installation\"\necho \"\t\"\necho \"\t${bold}InstallPrebuiltKernelModules${normal}\tdownload and install an ${bold}AOSP prebuilt kernel and its modules${normal} into ramdisk.img\"\necho \"\t\t\t\t\t- similar to ${bold}InstallKernelModules${normal}, but the AVD needs to be online\"\necho \"\t\"\necho \"\t${bold}AddRCscripts${normal}\t\t\tinstall all custom *.rc scripts, placed in the rootAVD folder, into ramdisk.img/overlay.d/sbin\"\necho \"\t\"\necho \"Options are ${bold}exclusive${normal}, only one at the time will be processed.\"\necho \"\t\"\necho \"Extra Arguments:\"\necho \"\t${bold}DEBUG${normal}\t\t\t\t${bold}Debugging Mode${normal}, prevents rootAVD to pull back any patched file\"\necho \"\t\"\necho \"\t${bold}PATCHFSTAB${normal}\t\t\t${bold}fstab.ranchu${normal} will get patched to automount Block Devices like ${bold}/dev/block/sda1${normal}\"\necho \"\t\t\t\t\t- other entries can be added in the script as well\"\necho \"\t\t\t\t\t- a custom build Kernel might be necessary\"\necho \"\t\"\necho \"\t${bold}GetUSBHPmodZ${normal}\t\t\tThe ${bold}USB HOST Permissions Module Zip${normal} will be downloaded into ${bold}/sdcard/Download${normal}\"\necho \"\t\"\necho \"\t${bold}FAKEBOOTIMG${normal}\t\t\tCreates a ${bold}fake Boot.img${normal} file that can directly be patched from the ${bold}Magisk APP${normal}\"\necho \"\t\t\t\t\t- Magisk will be launched to patch the fake Boot.img ${bold}within 60s${normal}\"\necho \"\t\t\t\t\t- the fake Boot.img will be placed under ${bold}/sdcard/Download/fakeboot.img${normal}\"\necho \"\t\"\necho \"Extra Commands can be ${bold}combined${normal}, there is no particular order.\"\necho \"\t\"\necho \"${bold}Notes: rootAVD will${normal}\"\necho \"- always create ${bold}.backup${normal} files of ${bold}ramdisk.img${normal} and ${bold}kernel-ranchu${normal}\"\necho \"- ${bold}replace${normal} both when done patching\"\necho \"- show a ${bold}Menu${normal}, to choose the Magisk Version ${bold}(Stable || Canary || Alpha)${normal}, if the AVD is ${bold}online${normal}\"\necho \"- make the ${bold}choosen${normal} Magisk Version to its ${bold}local${normal}\"\necho \"- install all APKs placed in the Apps folder\"\nFindSystemImages\nexit\n}\n\nProcessArguments() {\n\tDEBUG=false\n\tPATCHFSTAB=false\n\tGetUSBHPmodZ=false\n\tRAMDISKIMG=false\n\trestore=false\n\tInstallKernelModules=false\n\tInstallPrebuiltKernelModules=false\n\tListAllAVDs=false\n\tInstallApps=false\n\tUpdateBusyBoxScript=false\n\tAddRCscripts=false\n\tBLUESTACKS=false\n\ttoggleRamdisk=false\n\tFAKEBOOTIMG=false\n\n\t# Call rootAVD with SOURCING if you just want to source it\n\t# or export SOURCING=true if you are in crosh\n\tif [ -z \"$SOURCING\" ]; then\n\t\tSOURCING=false\n\tfi\n\tif [[ \"$@\" == *\"SOURCING\"* ]]; then\n\t\tSOURCING=true\n\tfi\n\n\t# While debugging and developing you can turn this flag on\n\tif [[ \"$@\" == *\"DEBUG\"* ]]; then\n\t\tDEBUG=true\n\t\t# Shows whatever line get executed...\n\t\t#set -x\n\tfi\n\n\t# Call rootAVD with PATCHFSTAB if you want the RAMDISK merge your modded fstab.ranchu before Magisk Mirror gets mounted\n\tif [[ \"$@\" == *\"PATCHFSTAB\"* ]]; then\n\t\tPATCHFSTAB=true\n\tfi\n\n\t# Call rootAVD with GetUSBHPmodZ to download the usbhostpermissons module\n\tif [[ \"$@\" == *\"GetUSBHPmodZ\"* ]]; then\n\t\tGetUSBHPmodZ=true\n\tfi\n\n\t# Call rootAVD with ListAllAVDs to show all AVDs with command examples\n\tif [[ \"$@\" == *\"ListAllAVDs\"* ]]; then\n\t\tListAllAVDs=true\n\tfi\n\n\t# Call rootAVD with InstallApps to just install all APKs placed in the Apps folder\n\tif [[ \"$@\" == *\"InstallApps\"* ]]; then\n\t\tInstallApps=true\n\tfi\n\n\t# Call rootAVD with UpdateBusyBoxScript to update the Busybox Version within the rootAVD.sh\n\tif [[ \"$@\" == *\"UpdateBusyBoxScript\"* ]]; then\n\t\tUpdateBusyBoxScript=true\n\tfi\n\n\t# Call rootAVD with AddRCscripts to add custom *.rc scripts into ramdisk.img/sbin/*.rc\n\tif [[ \"$@\" == *\"AddRCscripts\"* ]]; then\n\t\tAddRCscripts=true\n\tfi\n\n\n\tRAMDISKIMG=true\n\n\tcase $2 in\n\t  \"restore\" )\n\t\t\trestore=true\n\t\t;;\n\n\t  \"InstallKernelModules\" )\n\t\t\tInstallKernelModules=true\n\t\t;;\n\n\t  \"InstallPrebuiltKernelModules\" )\n\t\t\tInstallPrebuiltKernelModules=true\n\t\t;;\n\tesac\n\n\t# Call rootAVD with BLUESTACKS if you want to patch the ramdisk.img of a BlueStacks System\n\tif [[ \"$@\" == *\"BLUESTACKS\"* ]]; then\n\t\tBLUESTACKS=true\n\t\tRAMDISKIMG=false\n\tfi\n\n\t# Call rootAVD with toggleRamdisk if you want to toggle between patched and original ramdisk.img\n\tif [[ \"$@\" == *\"toggleRamdisk\"* ]]; then\n\t\ttoggleRamdisk=true\n\tfi\n\n\t# Call rootAVD with FAKEBOOTIMG if you want to create a fake boot.img to patch the ramdisk.img via direct install\n\tif [[ \"$@\" == *\"FAKEBOOTIMG\"* ]]; then\n\t\tFAKEBOOTIMG=true\n\tfi\n\n\texport DEBUG\n\texport PATCHFSTAB\n\texport GetUSBHPmodZ\n\texport RAMDISKIMG\n\texport restore\n\texport InstallKernelModules\n\texport InstallPrebuiltKernelModules\n\texport ListAllAVDs\n\texport InstallApps\n\texport UpdateBusyBoxScript\n\texport AddRCscripts\n\texport BLUESTACKS\n\texport toggleRamdisk\n\texport SOURCING\n\texport FAKEBOOTIMG\n}\n\n# Script Entry Point\n# Checking in which shell we are\n\nINEMULATOR=false\nSHELLRESULT=$(getprop 2>/dev/null)\nSHELLRESULT=\"$?\"\nif [[ \"$SHELLRESULT\" == \"0\" ]]; then\n\tINEMULATOR=true\n\tDERIVATE=$(getprop ro.boot.hardware 2>/dev/null)\n\tif [[ \"$DERIVATE\" == \"\" ]]; then\n\t\t$(which /system/xbin/bstk/su > /dev/null 2>&1)\n\t\tDERIVATE=\"$?\"\n\t\tif [[ \"$DERIVATE\" == \"0\" ]]; then\n\t\t\tDERIVATE=\"BlueStacks\"\n\t\tfi\n\tfi\n\tif [ ! -z $PREPBBMAGISK ]; then\n\t\techo \"[-] We are now in Magisk Busybox STANDALONE (D)ASH\"\n\t\t# Don't use $BB from now on\n\telse\n\t\techo \"[!] We are in a $DERIVATE emulator shell\"\n\tfi\nfi\n\n#if [[ $SHELL == \"ranchu\" ]]; then\n#\techo \"[!] We are in an emulator shell\"\n#\tRANCHU=true\n#fi\n#if [[ $SHELL == \"cheets\" ]]; then\n#\techo \"[!] We are in a ChromeOS shell\"\n#\tRANCHU=true\n#fi\n\nexport DERIVATE\nexport INEMULATOR\n\nif $INEMULATOR; then\n\tInstallMagiskToAVD $@\n\treturn 0\nfi\n\nProcessArguments $@\nGetANDROIDHOME\n\nif ( \"$SOURCING\" ); then\n\treturn\nfi\n\nif ( \"$DEBUG\" ); then\n\techo \"[!] We are in Debug Mode\"\n\techo \"DEBUG: $DEBUG\"\n\techo \"PATCHFSTAB: $PATCHFSTAB\"\n\techo \"GetUSBHPmodZ: $GetUSBHPmodZ\"\n\techo \"RAMDISKIMG: $RAMDISKIMG\"\n\techo \"restore: $restore\"\n\techo \"InstallKernelModules: $InstallKernelModules\"\n\techo \"InstallPrebuiltKernelModules: $InstallPrebuiltKernelModules\"\n\techo \"ListAllAVDs: $ListAllAVDs\"\n\techo \"InstallApps: $InstallApps\"\n\techo \"UpdateBusyBoxScript: $UpdateBusyBoxScript\"\n\techo \"AddRCscripts: $AddRCscripts\"\n\techo \"BLUESTACKS: $BLUESTACKS\"\n\techo \"toggleRamdisk: $toggleRamdisk\"\n\techo \"SOURCING: $SOURCING\"\n\techo \"FAKEBOOTIMG: $FAKEBOOTIMG\"\nfi\n\nif ( ! \"$InstallApps\" && ! \"$BLUESTACKS\"); then\n\t# If there is no file to work with, abort the script, except if it is a BlueStacks System\n\tif [[ \"$1\" == \"\" ]]; then\n\t\tShowHelpText\n\tfi\n\tif ( ! \"$restore\"); then\n\t\tif (checkfile \"$ANDROIDHOME/$1\" -eq 0); then\n\t\t\tShowHelpText\n\t\tfi\n\tfi\n\nfi\n\necho \"[!] and we are NOT in an emulator shell\"\n\nCopyMagiskToAVD $@\n\nexit"
        }
      ]
    }
  ]
}