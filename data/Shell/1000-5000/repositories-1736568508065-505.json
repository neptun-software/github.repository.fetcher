{
  "metadata": {
    "timestamp": 1736568508065,
    "page": 505,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "paxtonhare/demo-magic",
      "stars": 1693,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.251953125,
          "content": "# http://editorconfig.org\nroot = true\n\n[*]\nindent_style = space\nindent_size = 2\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n\n[*.mdown]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": ".DS_Store\nThumbs.db\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7724609375,
          "content": "# Demo Magic\n\ndemo-magic.sh is a handy shell script that enables you to script repeatable demos in a bash environment so you don't have to type as you present. Rather than trying to type commands when presenting you simply script them and let demo-magic.sh run them for you.\n\n## Features\n- Simulates typing. It looks like you are actually typing out commands\n- Allows you to actually run commands or pretend to do so.\n- Can hide commands from presentation. Useful for behind the scenes stuff that doesn't need to be shown.\n\n## Functions\n\n### pe\nPrint and Execute.\n\n1. Waits for you to press <kbd>ENTER</kbd> (unless -n is passed).\n1. Then simulates typing the command you gave it.\n1. Then pauses until you press <kbd>ENTER</kbd>.\n1. Then runs the command.\n\n```bash\n#!/bin/bash\n\npe \"ls -l\"\n```\n\n### pei\nPrint and Execute immediately.\n\n1. Simulates typing the command you gave it.\n1. Then pauses until you press <kbd>ENTER</kbd>.\n1. Then runs the command.\n\n```bash\n#!/bin/bash\n\npei \"ls -l\"\n```\n\n### p\nPrint only.\n\n1. Waits for you to press <kbd>ENTER</kbd> (unless -n is passed).\n1. Then simulates typing the command you gave it.\n1. Then pauses until you press <kbd>ENTER</kbd>.\n\n```bash\n#!/bin/bash\n\np \"ls -l\"\n```\n\n### wait\nWaits for the user to press <kbd>ENTER</kbd>.\n\nIf `PROMPT_TIMEOUT` is defined and > 0 the demo will automatically proceed after the amount of seconds has passed.\n\n```bash\n#!/bin/bash\n\n# Will wait until user presses enter\nPROMPT_TIMEOUT=0\nwait\n\n# Will wait max 5 seconds until user presses\nPROMPT_TIMEOUT=5\nwait\n\n```\n\n### cmd\nEnters script into interactive mode and allows newly typed commands to be executed within the script\n```\n#!/bin/bash\n\ncmd\n```\n\n### repl\nEnters script into repl mode and allows newly typed commands to be executed within the script\nType: `exit` to leave repl mode\n```\n#!/bin/bash\n\nrepl\n```\n\n## Getting Started\nCreate a shell script and include demo-magic.sh\n\n```bash\n#!/bin/bash\n\n########################\n# include the magic\n########################\n. demo-magic.sh\n\n# hide the evidence\nclear\n\n# Put your stuff here\n```\n\nThen use the handy functions to run through your demo.\n\n## Handy Starting Points\nThere are a few samples in the `samples/` folder to show you how easy it is to get up and running.\n\nThe `demo-template.sh` is a bit of a showcase of some of the features.\n\nThe `remote-exec` folder is there to show you how to run demo-magic locally and on a remote server via ssh. This was created in response to [Issue #24](https://github.com/paxtonhare/demo-magic/issues/24)\n\n## Command line usage\ndemo-magic.sh exposes some options to your script.\n- `-d` - disable simulated typing. Useful for debugging\n- `-h` - prints the usage text\n- `-n` - set no default waiting after `p` and `pe` functions\n- `-w` - set no wait timeout after `p` and `pe` functions\n\n```bash\n$ ./my-demo.sh -h\n\nUsage: ./my-demo.sh [options]\n\n  Where options is one or more of:\n  -h  Prints Help text\n  -d  Debug mode. Disables simulated typing\n  -n  No wait\n  -w  Waits max the given amount of seconds before proceeding with demo (e.g. `-w5`)\n```\n\n## Useful Tricks\n\n### Faking network connections\nNetwork connections during demos are often unreliable. Try and fake whatever commands would rely on a network connection. For example: Instead of trying to install node modules in a node.js application you can fake it. You can install the node_modules at home on your decent network. Then rename the directory and pretend to install it later by symlinking. If you want to be thorough you can capture the output of npm install into a log file then cat it out later to simulate the install.\n\n```bash\n#!/bin/bash\n\n########################\n# include the magic\n########################\n. demo-magic.sh\n\n# hide the evidence\nclear\n\n# this command is typed and executed\npe \"cd my-app\"\n\n# this command is merely typed. Not executed\np \"npm install\"\n\n# this command runs behind the scenes\nln -s cached_node_modules node_modules\n\n# cat out a log file that captures a previous successful node modules install\ncat node-modules-install.log\n\n# now type and run the command to start your app\npe \"node index.js\"\n```\n\n### No waiting\nThe -n _no wait_ option can be useful if you want to print and execute multiple commands.\n\n```bash\n# include demo-magic\n. demo-magic.sh -n\n\n# add multiple commands\npe 'git status'\npe 'git log --oneline --decorate -n 20'\n```\n\nHowever this will oblige you to define your waiting points manually e.g.\n```bash\n...\n# define waiting points\npe 'git status'\npe 'git log --oneline --decorate -n 20'\nwait\npe 'git pull'\npe 'git log --oneline --decorate -n 20'\nwait\n```\n\n### Pesky key cursor\n\nSome terminals (Mac terminal, [iterm2](https://iterm2.com/)) display a key cursor when input is masked.\n\n![Pesky Key Icon](_images/pesky-key-icon.png)\n\nYou can turn this off in [iterm2](https://iterm2.com/) like so:\n\n![Disable icon in iterm2](_images/iterm-disable-key.png)\n"
        },
        {
          "name": "_images",
          "type": "tree",
          "content": null
        },
        {
          "name": "demo-magic.sh",
          "type": "blob",
          "size": 4.9580078125,
          "content": "#!/usr/bin/env bash\n\n###############################################################################\n#\n# demo-magic.sh\n#\n# Copyright (c) 2015-2022 Paxton Hare\n#\n# This script lets you script demos in bash. It runs through your demo script\n# when you press ENTER. It simulates typing and runs commands.\n#\n###############################################################################\n\n# the speed to simulate typing the text\nTYPE_SPEED=20\n\n# no wait after \"p\" or \"pe\"\nNO_WAIT=false\n\n# if > 0, will pause for this amount of seconds before automatically proceeding with any p or pe\nPROMPT_TIMEOUT=0\n\n# don't show command number unless user specifies it\nSHOW_CMD_NUMS=false\n\n\n# handy color vars for pretty prompts\nBLACK=\"\\033[0;30m\"\nBLUE=\"\\033[0;34m\"\nGREEN=\"\\033[0;32m\"\nGREY=\"\\033[0;90m\"\nCYAN=\"\\033[0;36m\"\nRED=\"\\033[0;31m\"\nPURPLE=\"\\033[0;35m\"\nBROWN=\"\\033[0;33m\"\nWHITE=\"\\033[0;37m\"\nBOLD=\"\\033[1m\"\nCOLOR_RESET=\"\\033[0m\"\n\nC_NUM=0\n\n# prompt and command color which can be overriden\nDEMO_PROMPT=\"$ \"\nDEMO_CMD_COLOR=$BOLD\nDEMO_COMMENT_COLOR=$GREY\n\n##\n# prints the script usage\n##\nfunction usage() {\n  echo -e \"\"\n  echo -e \"Usage: $0 [options]\"\n  echo -e \"\"\n  echo -e \"  Where options is one or more of:\"\n  echo -e \"  -h  Prints Help text\"\n  echo -e \"  -d  Debug mode. Disables simulated typing\"\n  echo -e \"  -n  No wait\"\n  echo -e \"  -w  Waits max the given amount of seconds before \"\n  echo -e \"      proceeding with demo (e.g. '-w5')\"\n  echo -e \"\"\n}\n\n##\n# wait for user to press ENTER\n# if $PROMPT_TIMEOUT > 0 this will be used as the max time for proceeding automatically\n##\nfunction wait() {\n  if [[ \"$PROMPT_TIMEOUT\" == \"0\" ]]; then\n    read -rs\n  else\n    read -rst \"$PROMPT_TIMEOUT\"\n  fi\n}\n\n##\n# print command only. Useful for when you want to pretend to run a command\n#\n# takes 1 param - the string command to print\n#\n# usage: p \"ls -l\"\n#\n##\nfunction p() {\n  if [[ ${1:0:1} == \"#\" ]]; then\n    cmd=$DEMO_COMMENT_COLOR$1$COLOR_RESET\n  else\n    cmd=$DEMO_CMD_COLOR$1$COLOR_RESET\n  fi\n\n  # render the prompt\n  x=$(PS1=\"$DEMO_PROMPT\" \"$BASH\" --norc -i </dev/null 2>&1 | sed -n '${s/^\\(.*\\)exit$/\\1/p;}')\n\n  # show command number is selected\n  if $SHOW_CMD_NUMS; then\n   printf \"[$((++C_NUM))] $x\"\n  else\n   printf \"$x\"\n  fi\n\n  # wait for the user to press a key before typing the command\n  if [ $NO_WAIT = false ]; then\n    wait\n  fi\n\n  if [[ -z $TYPE_SPEED ]]; then\n    echo -en \"$cmd\"\n  else\n    echo -en \"$cmd\" | pv -qL $[$TYPE_SPEED+(-2 + RANDOM%5)];\n  fi\n\n  # wait for the user to press a key before moving on\n  if [ $NO_WAIT = false ]; then\n    wait\n  fi\n  echo \"\"\n}\n\n##\n# Prints and executes a command\n#\n# takes 1 parameter - the string command to run\n#\n# usage: pe \"ls -l\"\n#\n##\nfunction pe() {\n  # print the command\n  p \"$@\"\n  run_cmd \"$@\"\n}\n\n##\n# print and executes a command immediately\n#\n# takes 1 parameter - the string command to run\n#\n# usage: pei \"ls -l\"\n#\n##\nfunction pei {\n  NO_WAIT=true pe \"$@\"\n}\n\n##\n# Enters script into interactive mode\n#\n# and allows newly typed commands to be executed within the script\n#\n# usage : cmd\n#\n##\nfunction cmd() {\n  # render the prompt\n  x=$(PS1=\"$DEMO_PROMPT\" \"$BASH\" --norc -i </dev/null 2>&1 | sed -n '${s/^\\(.*\\)exit$/\\1/p;}')\n  printf \"$x\\033[0m\"\n  read command\n  run_cmd \"${command}\"\n}\n\n##\n# Enters script into repl mode\n#\n# and allows newly typed commands to be executed within the script\n#\n# type exit to leave the repl\n#\n# usage : repl\n#\n##\nfunction repl() {\n  # render the prompt\n  looping=true\n  while $looping; do\n    x=$(PS1=\"$DEMO_PROMPT\" \"$BASH\" --norc -i </dev/null 2>&1 | sed -n '${s/^\\(.*\\)exit$/\\1/p;}')\n    printf \"$x\\033[0m\"\n    read command\n    if [[ \"$command\" == \"exit\" ]]; then\n      looping=false\n    else\n      run_cmd \"$command\"\n    fi\n  done\n}\n\nfunction run_cmd() {\n  function handle_cancel() {\n    printf \"\"\n  }\n\n  trap handle_cancel SIGINT\n  stty -echoctl\n  eval $@\n  stty echoctl\n  trap - SIGINT\n}\n\n\nfunction check_pv() {\n  command -v pv >/dev/null 2>&1 || {\n\n    echo \"\"\n    echo -e \"${RED}##############################################################\"\n    echo \"# HOLD IT!! I require pv for simulated typing but it's \" >&2\n    echo \"# not installed. Aborting.\" >&2;\n    echo -e \"${RED}##############################################################\"\n    echo \"\"\n    echo -e \"${COLOR_RESET}Disable simulated typing: \"\n    echo \"\"\n    echo -e \"   unset TYPE_SPEED\"\n    echo \"\"\n    echo \"Installing pv:\"\n    echo \"\"\n    echo  \"   Mac: $ brew install pv\"\n    echo \"\"\n    echo  \"   Other: https://www.ivarch.com/programs/pv.shtml\"\n    echo  \"\"\n    exit 1;\n  }\n}\n\n#\n# handle some default params\n# -h for help\n# -d for disabling simulated typing\n#\nwhile getopts \":dhncw:\" opt; do\n  case $opt in\n    h)\n      usage\n      exit 1\n      ;;\n    d)\n      unset TYPE_SPEED\n      ;;\n    n)\n      NO_WAIT=true\n      ;;\n    c)\n      SHOW_CMD_NUMS=true\n      ;;\n    w)\n      PROMPT_TIMEOUT=$OPTARG\n      ;;\n  esac\ndone\n\n##\n# Do not check for pv. This trusts the user to not set TYPE_SPEED later in the\n# demo in which case an error will occur if pv is not installed.\n##\nif [[ -n \"$TYPE_SPEED\" ]]; then\n  check_pv\nfi\n"
        },
        {
          "name": "license.txt",
          "type": "blob",
          "size": 1.0576171875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015-2022 Paxton Hare\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}