{
  "metadata": {
    "timestamp": 1736568281560,
    "page": 178,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjE4MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "linrunner/TLP",
      "stars": 2783,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "debian\n*.geany\n.idea\n*.log\nPKGBUILD*\npkg\nsrc\ntlp.install\nworktree*\n*.zst\n"
        },
        {
          "name": ".perlcriticrc",
          "type": "blob",
          "size": 0.1513671875,
          "content": "[ValuesAndExpressions::ProhibitConstantPragma]\nseverity = 1\n\n[InputOutput::RequireBriefOpen]\nseverity = 1\n\n[Subroutines::RequireArgUnpacking]\nseverity = 1\n"
        },
        {
          "name": "00-template.conf",
          "type": "blob",
          "size": 0.162109375,
          "content": "# 00-template.conf - Template for TLP drop-in customizations\n# See full explanation: https://linrunner.de/tlp/settings\n#\n# PARAMETER=\"value\"\n# PARAMETER+=\"add value\"\n"
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.19140625,
          "content": "Main author:\n Thomas Koch - <linrunner at gmx.net>\n\nContributors:\n André Erdmann <dywi at mailerd.de>\n Pali Rohár <pali.rohar at gmail.com>\n https://github.com/linrunner/TLP/graphs/contributors\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 0.7197265625,
          "content": "Main Author:\n\n    Thomas Koch <linrunner at gmx.net>\n\nCopyright:\n\n    Copyright (c) 2025 Thomas Koch, André Erdmann, Pali Rohár\n\n    See https://github.com/linrunner/TLP/ for additional contributors\n\n    Some code and descriptions were adapted from:\n    - laptop-mode-tools\n         Copyright (c) 2004 by Bart Samwel, Kiko Piris, Micha Feigin,\n         Andrew Morton, Herve Eychenne, Dax Kelson, Jan Topinski\n    - https://thinkwiki.org\n\n    Thinkpad ACPI Battery Control (tpacpi-bat):\n    Copyright (c) 2011-2016 Elliot Wolk\n\nLicense:\n\n    This software is licensed under the GPL v2 or later,\n    see '/usr/share/common-licenses/GPL-2'\n\n    tpacpi-bat is licensed under the GPL v3 or later,\n    see '/usr/share/common-licenses/GPL-3'\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 17.5654296875,
          "content": "\t\t    GNU GENERAL PUBLIC LICENSE\n\t\t       Version 2, June 1991\n\n Copyright (C) 1989, 1991 Free Software Foundation, Inc.,\n 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n\t\t\t    Preamble\n\n  The licenses for most software are designed to take away your\nfreedom to share and change it.  By contrast, the GNU General Public\nLicense is intended to guarantee your freedom to share and change free\nsoftware--to make sure the software is free for all its users.  This\nGeneral Public License applies to most of the Free Software\nFoundation's software and to any other program whose authors commit to\nusing it.  (Some other Free Software Foundation software is covered by\nthe GNU Lesser General Public License instead.)  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthis service if you wish), that you receive source code or can get it\nif you want it, that you can change the software or use pieces of it\nin new free programs; and that you know you can do these things.\n\n  To protect your rights, we need to make restrictions that forbid\nanyone to deny you these rights or to ask you to surrender the rights.\nThese restrictions translate to certain responsibilities for you if you\ndistribute copies of the software, or if you modify it.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must give the recipients all the rights that\nyou have.  You must make sure that they, too, receive or can get the\nsource code.  And you must show them these terms so they know their\nrights.\n\n  We protect your rights with two steps: (1) copyright the software, and\n(2) offer you this license which gives you legal permission to copy,\ndistribute and/or modify the software.\n\n  Also, for each author's protection and ours, we want to make certain\nthat everyone understands that there is no warranty for this free\nsoftware.  If the software is modified by someone else and passed on, we\nwant its recipients to know that what they have is not the original, so\nthat any problems introduced by others will not reflect on the original\nauthors' reputations.\n\n  Finally, any free program is threatened constantly by software\npatents.  We wish to avoid the danger that redistributors of a free\nprogram will individually obtain patent licenses, in effect making the\nprogram proprietary.  To prevent this, we have made it clear that any\npatent must be licensed for everyone's free use or not licensed at all.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n\t\t    GNU GENERAL PUBLIC LICENSE\n   TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION\n\n  0. This License applies to any program or other work which contains\na notice placed by the copyright holder saying it may be distributed\nunder the terms of this General Public License.  The \"Program\", below,\nrefers to any such program or work, and a \"work based on the Program\"\nmeans either the Program or any derivative work under copyright law:\nthat is to say, a work containing the Program or a portion of it,\neither verbatim or with modifications and/or translated into another\nlanguage.  (Hereinafter, translation is included without limitation in\nthe term \"modification\".)  Each licensee is addressed as \"you\".\n\nActivities other than copying, distribution and modification are not\ncovered by this License; they are outside its scope.  The act of\nrunning the Program is not restricted, and the output from the Program\nis covered only if its contents constitute a work based on the\nProgram (independent of having been made by running the Program).\nWhether that is true depends on what the Program does.\n\n  1. You may copy and distribute verbatim copies of the Program's\nsource code as you receive it, in any medium, provided that you\nconspicuously and appropriately publish on each copy an appropriate\ncopyright notice and disclaimer of warranty; keep intact all the\nnotices that refer to this License and to the absence of any warranty;\nand give any other recipients of the Program a copy of this License\nalong with the Program.\n\nYou may charge a fee for the physical act of transferring a copy, and\nyou may at your option offer warranty protection in exchange for a fee.\n\n  2. You may modify your copy or copies of the Program or any portion\nof it, thus forming a work based on the Program, and copy and\ndistribute such modifications or work under the terms of Section 1\nabove, provided that you also meet all of these conditions:\n\n    a) You must cause the modified files to carry prominent notices\n    stating that you changed the files and the date of any change.\n\n    b) You must cause any work that you distribute or publish, that in\n    whole or in part contains or is derived from the Program or any\n    part thereof, to be licensed as a whole at no charge to all third\n    parties under the terms of this License.\n\n    c) If the modified program normally reads commands interactively\n    when run, you must cause it, when started running for such\n    interactive use in the most ordinary way, to print or display an\n    announcement including an appropriate copyright notice and a\n    notice that there is no warranty (or else, saying that you provide\n    a warranty) and that users may redistribute the program under\n    these conditions, and telling the user how to view a copy of this\n    License.  (Exception: if the Program itself is interactive but\n    does not normally print such an announcement, your work based on\n    the Program is not required to print an announcement.)\n\nThese requirements apply to the modified work as a whole.  If\nidentifiable sections of that work are not derived from the Program,\nand can be reasonably considered independent and separate works in\nthemselves, then this License, and its terms, do not apply to those\nsections when you distribute them as separate works.  But when you\ndistribute the same sections as part of a whole which is a work based\non the Program, the distribution of the whole must be on the terms of\nthis License, whose permissions for other licensees extend to the\nentire whole, and thus to each and every part regardless of who wrote it.\n\nThus, it is not the intent of this section to claim rights or contest\nyour rights to work written entirely by you; rather, the intent is to\nexercise the right to control the distribution of derivative or\ncollective works based on the Program.\n\nIn addition, mere aggregation of another work not based on the Program\nwith the Program (or with a work based on the Program) on a volume of\na storage or distribution medium does not bring the other work under\nthe scope of this License.\n\n  3. You may copy and distribute the Program (or a work based on it,\nunder Section 2) in object code or executable form under the terms of\nSections 1 and 2 above provided that you also do one of the following:\n\n    a) Accompany it with the complete corresponding machine-readable\n    source code, which must be distributed under the terms of Sections\n    1 and 2 above on a medium customarily used for software interchange; or,\n\n    b) Accompany it with a written offer, valid for at least three\n    years, to give any third party, for a charge no more than your\n    cost of physically performing source distribution, a complete\n    machine-readable copy of the corresponding source code, to be\n    distributed under the terms of Sections 1 and 2 above on a medium\n    customarily used for software interchange; or,\n\n    c) Accompany it with the information you received as to the offer\n    to distribute corresponding source code.  (This alternative is\n    allowed only for noncommercial distribution and only if you\n    received the program in object code or executable form with such\n    an offer, in accord with Subsection b above.)\n\nThe source code for a work means the preferred form of the work for\nmaking modifications to it.  For an executable work, complete source\ncode means all the source code for all modules it contains, plus any\nassociated interface definition files, plus the scripts used to\ncontrol compilation and installation of the executable.  However, as a\nspecial exception, the source code distributed need not include\nanything that is normally distributed (in either source or binary\nform) with the major components (compiler, kernel, and so on) of the\noperating system on which the executable runs, unless that component\nitself accompanies the executable.\n\nIf distribution of executable or object code is made by offering\naccess to copy from a designated place, then offering equivalent\naccess to copy the source code from the same place counts as\ndistribution of the source code, even though third parties are not\ncompelled to copy the source along with the object code.\n\n  4. You may not copy, modify, sublicense, or distribute the Program\nexcept as expressly provided under this License.  Any attempt\notherwise to copy, modify, sublicense or distribute the Program is\nvoid, and will automatically terminate your rights under this License.\nHowever, parties who have received copies, or rights, from you under\nthis License will not have their licenses terminated so long as such\nparties remain in full compliance.\n\n  5. You are not required to accept this License, since you have not\nsigned it.  However, nothing else grants you permission to modify or\ndistribute the Program or its derivative works.  These actions are\nprohibited by law if you do not accept this License.  Therefore, by\nmodifying or distributing the Program (or any work based on the\nProgram), you indicate your acceptance of this License to do so, and\nall its terms and conditions for copying, distributing or modifying\nthe Program or works based on it.\n\n  6. Each time you redistribute the Program (or any work based on the\nProgram), the recipient automatically receives a license from the\noriginal licensor to copy, distribute or modify the Program subject to\nthese terms and conditions.  You may not impose any further\nrestrictions on the recipients' exercise of the rights granted herein.\nYou are not responsible for enforcing compliance by third parties to\nthis License.\n\n  7. If, as a consequence of a court judgment or allegation of patent\ninfringement or for any other reason (not limited to patent issues),\nconditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot\ndistribute so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you\nmay not distribute the Program at all.  For example, if a patent\nlicense would not permit royalty-free redistribution of the Program by\nall those who receive copies directly or indirectly through you, then\nthe only way you could satisfy both it and this License would be to\nrefrain entirely from distribution of the Program.\n\nIf any portion of this section is held invalid or unenforceable under\nany particular circumstance, the balance of the section is intended to\napply and the section as a whole is intended to apply in other\ncircumstances.\n\nIt is not the purpose of this section to induce you to infringe any\npatents or other property right claims or to contest validity of any\nsuch claims; this section has the sole purpose of protecting the\nintegrity of the free software distribution system, which is\nimplemented by public license practices.  Many people have made\ngenerous contributions to the wide range of software distributed\nthrough that system in reliance on consistent application of that\nsystem; it is up to the author/donor to decide if he or she is willing\nto distribute software through any other system and a licensee cannot\nimpose that choice.\n\nThis section is intended to make thoroughly clear what is believed to\nbe a consequence of the rest of this License.\n\n  8. If the distribution and/or use of the Program is restricted in\ncertain countries either by patents or by copyrighted interfaces, the\noriginal copyright holder who places the Program under this License\nmay add an explicit geographical distribution limitation excluding\nthose countries, so that distribution is permitted only in or among\ncountries not thus excluded.  In such case, this License incorporates\nthe limitation as if written in the body of this License.\n\n  9. The Free Software Foundation may publish revised and/or new versions\nof the General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\nEach version is given a distinguishing version number.  If the Program\nspecifies a version number of this License which applies to it and \"any\nlater version\", you have the option of following the terms and conditions\neither of that version or of any later version published by the Free\nSoftware Foundation.  If the Program does not specify a version number of\nthis License, you may choose any version ever published by the Free Software\nFoundation.\n\n  10. If you wish to incorporate parts of the Program into other free\nprograms whose distribution conditions are different, write to the author\nto ask for permission.  For software which is copyrighted by the Free\nSoftware Foundation, write to the Free Software Foundation; we sometimes\nmake exceptions for this.  Our decision will be guided by the two goals\nof preserving the free status of all derivatives of our free software and\nof promoting the sharing and reuse of software generally.\n\n\t\t\t    NO WARRANTY\n\n  11. BECAUSE THE PROGRAM IS LICENSED FREE OF CHARGE, THERE IS NO WARRANTY\nFOR THE PROGRAM, TO THE EXTENT PERMITTED BY APPLICABLE LAW.  EXCEPT WHEN\nOTHERWISE STATED IN WRITING THE COPYRIGHT HOLDERS AND/OR OTHER PARTIES\nPROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESSED\nOR IMPLIED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF\nMERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.  THE ENTIRE RISK AS\nTO THE QUALITY AND PERFORMANCE OF THE PROGRAM IS WITH YOU.  SHOULD THE\nPROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF ALL NECESSARY SERVICING,\nREPAIR OR CORRECTION.\n\n  12. IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MAY MODIFY AND/OR\nREDISTRIBUTE THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES,\nINCLUDING ANY GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING\nOUT OF THE USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED\nTO LOSS OF DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY\nYOU OR THIRD PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER\nPROGRAMS), EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGES.\n\n\t\t     END OF TERMS AND CONDITIONS\n\n\t    How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nconvey the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software; you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation; either version 2 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License along\n    with this program; if not, write to the Free Software Foundation, Inc.,\n    51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n\nAlso add information on how to contact you by electronic and paper mail.\n\nIf the program is interactive, make it output a short notice like this\nwhen it starts in an interactive mode:\n\n    Gnomovision version 69, Copyright (C) year name of author\n    Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, the commands you use may\nbe called something other than `show w' and `show c'; they could even be\nmouse-clicks or menu items--whatever suits your program.\n\nYou should also get your employer (if you work as a programmer) or your\nschool, if any, to sign a \"copyright disclaimer\" for the program, if\nnecessary.  Here is a sample; alter the names:\n\n  Yoyodyne, Inc., hereby disclaims all copyright interest in the program\n  `Gnomovision' (which makes passes at compilers) written by James Hacker.\n\n  <signature of Ty Coon>, 1 April 1989\n  Ty Coon, President of Vice\n\nThis General Public License does not permit incorporating your program into\nproprietary programs.  If your program is a subroutine library, you may\nconsider it more useful to permit linking proprietary applications with the\nlibrary.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 9.673828125,
          "content": "# Makefile for TLP\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\nTLPVER := $(shell read _ver _dummy < ./VERSION; printf '%s' \"$${_ver:-undef}\")\n\n# Evaluate parameters\nTLP_SBIN    ?= /usr/sbin\nTLP_BIN     ?= /usr/bin\nTLP_TLIB    ?= /usr/share/tlp\nTLP_FLIB    ?= /usr/share/tlp/func.d\nTLP_ULIB    ?= /usr/lib/udev\nTLP_BATD    ?= /usr/share/tlp/bat.d\nTLP_NMDSP   ?= /usr/lib/NetworkManager/dispatcher.d\nTLP_CONFUSR ?= /etc/tlp.conf\nTLP_CONFDIR ?= /etc/tlp.d\nTLP_CONFDEF ?= /usr/share/tlp/defaults.conf\nTLP_CONFREN ?= /usr/share/tlp/rename.conf\nTLP_CONFDPR ?= /usr/share/tlp/deprecated.conf\nTLP_CONF    ?= /etc/default/tlp\nTLP_SYSD    ?= /usr/lib/systemd/system\nTLP_SDSL    ?= /usr/lib/systemd/system-sleep\nTLP_SYSV    ?= /etc/init.d\nTLP_ELOD    ?= /usr/lib/elogind/system-sleep\nTLP_SHCPL   ?= /usr/share/bash-completion/completions\nTLP_ZSHCPL  ?= /usr/share/zsh/site-functions\nTLP_FISHCPL ?= /usr/share/fish/vendor_completions.d\nTLP_MAN     ?= /usr/share/man\nTLP_META    ?= /usr/share/metainfo\nTLP_RUN     ?= /run/tlp\nTLP_VAR     ?= /var/lib/tlp\n\n# Catenate DESTDIR to paths\n_SBIN    = $(DESTDIR)$(TLP_SBIN)\n_BIN     = $(DESTDIR)$(TLP_BIN)\n_TLIB    = $(DESTDIR)$(TLP_TLIB)\n_FLIB    = $(DESTDIR)$(TLP_FLIB)\n_ULIB    = $(DESTDIR)$(TLP_ULIB)\n_BATD    = $(DESTDIR)$(TLP_BATD)\n_NMDSP   = $(DESTDIR)$(TLP_NMDSP)\n_CONFUSR = $(DESTDIR)$(TLP_CONFUSR)\n_CONFDIR = $(DESTDIR)$(TLP_CONFDIR)\n_CONFDEF = $(DESTDIR)$(TLP_CONFDEF)\n_CONFREN = $(DESTDIR)$(TLP_CONFREN)\n_CONFDPR = $(DESTDIR)$(TLP_CONFDPR)\n_CONF    = $(DESTDIR)$(TLP_CONF)\n_SYSD    = $(DESTDIR)$(TLP_SYSD)\n_SDSL    = $(DESTDIR)$(TLP_SDSL)\n_SYSV    = $(DESTDIR)$(TLP_SYSV)\n_ELOD    = $(DESTDIR)$(TLP_ELOD)\n_SHCPL   = $(DESTDIR)$(TLP_SHCPL)\n_ZSHCPL  = $(DESTDIR)$(TLP_ZSHCPL)\n_FISHCPL = $(DESTDIR)$(TLP_FISHCPL)\n_MAN     = $(DESTDIR)$(TLP_MAN)\n_META    = $(DESTDIR)$(TLP_META)\n_RUN     = $(DESTDIR)$(TLP_RUN)\n_VAR     = $(DESTDIR)$(TLP_VAR)\n\nSED = sed \\\n\t-e \"s|@TLPVER@|$(TLPVER)|g\" \\\n\t-e \"s|@TLP_SBIN@|$(TLP_SBIN)|g\" \\\n\t-e \"s|@TLP_TLIB@|$(TLP_TLIB)|g\" \\\n\t-e \"s|@TLP_FLIB@|$(TLP_FLIB)|g\" \\\n\t-e \"s|@TLP_ULIB@|$(TLP_ULIB)|g\" \\\n\t-e \"s|@TLP_BATD@|$(TLP_BATD)|g\" \\\n\t-e \"s|@TLP_CONFUSR@|$(TLP_CONFUSR)|g\" \\\n\t-e \"s|@TLP_CONFDIR@|$(TLP_CONFDIR)|g\" \\\n\t-e \"s|@TLP_CONFDEF@|$(TLP_CONFDEF)|g\" \\\n\t-e \"s|@TLP_CONFREN@|$(TLP_CONFREN)|g\" \\\n\t-e \"s|@TLP_CONFDPR@|$(TLP_CONFDPR)|g\" \\\n\t-e \"s|@TLP_CONF@|$(TLP_CONF)|g\" \\\n\t-e \"s|@TLP_RUN@|$(TLP_RUN)|g\"   \\\n\t-e \"s|@TLP_VAR@|$(TLP_VAR)|g\"\n\nINFILES = \\\n\ttlp \\\n\ttlp.conf \\\n\ttlp-func-base \\\n\ttlp-rdw-nm \\\n\ttlp-rdw.rules \\\n\ttlp-rdw-udev \\\n\ttlp-rdw \\\n\ttlp-rf \\\n\ttlp.rules \\\n\ttlp-readconfs \\\n\ttlp-run-on \\\n\ttlp.service \\\n\ttlp-stat \\\n\ttlp.upstart \\\n\ttlp-usb-udev\n\nMANFILES1 = \\\n\tbluetooth.1 \\\n\tnfc.1 \\\n\trun-on-ac.1 \\\n\trun-on-bat.1 \\\n\twifi.1 \\\n\twwan.1\n\nMANFILES8 = \\\n\ttlp.8 \\\n\ttlp-stat.8 \\\n\ttlp.service.8\n\nMANFILESRDW8 = \\\n\ttlp-rdw.8\n\nSHFILES = \\\n\ttlp.in \\\n\ttlp-func-base.in \\\n\tfunc.d/* \\\n\tbat.d/* \\\n\ttlp-rdw.in \\\n\ttlp-rdw-nm.in \\\n\ttlp-rdw-udev.in \\\n\ttlp-rf.in \\\n\ttlp-run-on.in \\\n\ttlp-sleep \\\n\ttlp-sleep.elogind \\\n\ttlp-stat.in \\\n\ttlp-usb-udev.in \\\n\nUTSHFILES = \\\n\tunit-tests/test-func \\\n\tunit-tests/test-*.sh\n\nPLFILES = \\\n\ttlp-pcilist \\\n\ttlp-readconfs.in \\\n\ttlp-usblist\n\nBATDRVFILES = $(foreach drv,$(wildcard bat.d/[0-9][0-9]-[a-z]*),$(drv)~)\n\n# Make targets\nall: $(INFILES)\n\n$(INFILES): %: %.in\n\t$(SED) $< > $@\n\nclean:\n\trm -f $(INFILES)\n\trm -f bat.d/*~\n\ninstall-tlp: all\n\t# Package tlp\n\tinstall -D -m 755 tlp $(_SBIN)/tlp\n\tinstall -D -m 755 tlp-rf $(_BIN)/bluetooth\n\tln -sf bluetooth $(_BIN)/nfc\n\tln -sf bluetooth $(_BIN)/wifi\n\tln -sf bluetooth $(_BIN)/wwan\n\tinstall -m 755 tlp-run-on $(_BIN)/run-on-ac\n\tln -sf run-on-ac $(_BIN)/run-on-bat\n\tinstall -m 755 tlp-stat $(_BIN)/\n\tinstall -D -m 755 -t $(_TLIB)/func.d func.d/*\n\tinstall -m 755 tlp-func-base $(_TLIB)/\n\tinstall -D -m 755 -t $(_TLIB)/bat.d bat.d/*\n\tinstall -m 755 tlp-pcilist $(_TLIB)/\n\tinstall -m 755 tlp-readconfs $(_TLIB)/\n\tinstall -m 755 tlp-usblist $(_TLIB)/\n\tinstall -D -m 755 tlp-usb-udev $(_ULIB)/tlp-usb-udev\n\tinstall -D -m 644 tlp.rules $(_ULIB)/rules.d/85-tlp.rules\n\t[ -f $(_CONFUSR) ] || install -D -m 644 tlp.conf $(_CONFUSR)\n\tinstall -d $(_CONFDIR)\n\tinstall -D -m 644 README.d $(_CONFDIR)/README\n\tinstall -D -m 644 00-template.conf $(_CONFDIR)/00-template.conf\n\tinstall -D -m 644 defaults.conf $(_CONFDEF)\n\tinstall -D -m 644 rename.conf $(_CONFREN)\n\tinstall -D -m 644 deprecated.conf $(_CONFDPR)\nifneq ($(TLP_NO_INIT),1)\n\tinstall -D -m 755 tlp.init $(_SYSV)/tlp\nendif\nifneq ($(TLP_WITH_SYSTEMD),0)\n\tinstall -D -m 644 tlp.service $(_SYSD)/tlp.service\n\tinstall -D -m 755 tlp-sleep $(_SDSL)/tlp\nendif\nifneq ($(TLP_WITH_ELOGIND),0)\n\tinstall -D -m 755 tlp-sleep.elogind $(_ELOD)/49-tlp-sleep\nendif\nifneq ($(TLP_NO_BASHCOMP),1)\n\tinstall -D -m 644 completion/bash/tlp.bash_completion $(_SHCPL)/tlp\n\tln -sf tlp $(_SHCPL)/tlp-stat\n\tln -sf tlp $(_SHCPL)/bluetooth\n\tln -sf tlp $(_SHCPL)/nfc\n\tln -sf tlp $(_SHCPL)/wifi\n\tln -sf tlp $(_SHCPL)/wwan\n\tln -sf tlp $(_SHCPL)/run-on-ac\n\tln -sf tlp $(_SHCPL)/run-on-bat\nendif\nifneq ($(TLP_NO_ZSHCOMP),1)\n\tinstall -D -m 644 completion/zsh/_tlp $(_ZSHCPL)/_tlp\n\tinstall -D -m 644 completion/zsh/_tlp-radio-device $(_ZSHCPL)/_tlp-radio-device\n\tinstall -D -m 644 completion/zsh/_tlp-run-on $(_ZSHCPL)/_tlp-run-on\n\tinstall -D -m 644 completion/zsh/_tlp-stat $(_ZSHCPL)/_tlp-stat\nendif\nifneq ($(TLP_NO_FISHCOMP),1)\n\tinstall -D -m 644 completion/fish/tlp.fish $(_FISHCPL)/tlp.fish\n\tinstall -D -m 644 completion/fish/tlp-stat.fish $(_FISHCPL)/tlp-stat.fish\n\tln -sf tlp.fish $(_FISHCPL)/bluetooth.fish\n\tln -sf tlp.fish $(_FISHCPL)/nfc.fish\n\tln -sf tlp.fish $(_FISHCPL)/wifi.fish\n\tln -sf tlp.fish $(_FISHCPL)/wwan.fish\n\tln -sf tlp.fish $(_FISHCPL)/run-on-ac.fish\n\tln -sf tlp.fish $(_FISHCPL)/run-on-bat.fish\nendif\n\tinstall -D -m 644 de.linrunner.tlp.metainfo.xml $(_META)/de.linrunner.tlp.metainfo.xml\n\tinstall -d -m 755 $(_VAR)\n\ninstall-rdw: all\n\t# Package tlp-rdw\n\tinstall -D -m 755 tlp-rdw $(_BIN)/tlp-rdw\n\tinstall -D -m 644 tlp-rdw.rules $(_ULIB)/rules.d/85-tlp-rdw.rules\n\tinstall -D -m 755 tlp-rdw-udev $(_ULIB)/tlp-rdw-udev\n\tinstall -D -m 755 tlp-rdw-nm $(_NMDSP)/99tlp-rdw-nm\nifneq ($(TLP_NO_BASHCOMP),1)\n\tinstall -D -m 644 completion/bash/tlp-rdw.bash_completion $(_SHCPL)/tlp-rdw\nendif\nifneq ($(TLP_NO_ZSHCOMP),1)\n\tinstall -D -m 644 completion/zsh/_tlp-rdw $(_ZSHCPL)/_tlp-rdw\nendif\nifneq ($(TLP_NO_FISHCOMP),1)\n\tinstall -D -m 644 completion/fish/tlp-rdw.fish $(_FISHCPL)/tlp-rdw.fish\nendif\n\ninstall-man-tlp:\n\t# manpages\n\tinstall -d -m 755 $(_MAN)/man1\n\tcd man && install -m 644 $(MANFILES1) $(_MAN)/man1/\n\tinstall -d -m 755 $(_MAN)/man8\n\tcd man && install -m 644 $(MANFILES8) $(_MAN)/man8/\n\ninstall-man-rdw:\n\t# manpages\n\tinstall -d -m 755 $(_MAN)/man8\n\tcd man-rdw && install -m 644 $(MANFILESRDW8) $(_MAN)/man8/\n\ninstall: install-tlp install-rdw\n\ninstall-man: install-man-tlp install-man-rdw\n\nuninstall-tlp:\n\t# Package tlp\n\trm $(_SBIN)/tlp\n\trm $(_BIN)/bluetooth\n\trm $(_BIN)/nfc\n\trm $(_BIN)/wifi\n\trm $(_BIN)/wwan\n\trm $(_BIN)/run-on-ac\n\trm $(_BIN)/run-on-bat\n\trm $(_BIN)/tlp-stat\n\trm $(_CONFDIR)/README\n\trm $(_CONFDIR)/00-template.conf\n\trm -r $(_TLIB)\n\trm $(_ULIB)/tlp-usb-udev\n\trm $(_ULIB)/rules.d/85-tlp.rules\n\trm -f $(_SYSV)/tlp\n\trm -f $(_SYSD)/tlp.service\n\trm -f $(_SDSL)/tlp-sleep\n\trm -f $(_ELOD)/49-tlp-sleep\n\trm -f $(_SHCPL)/tlp\n\trm -f $(_SHCPL)/tlp-stat\n\trm -f $(_SHCPL)/bluetooth\n\trm -f $(_SHCPL)/nfc\n\trm -f $(_SHCPL)/wifi\n\trm -f $(_SHCPL)/wwan\n\trm -f $(_SHCPL)/run-on-ac\n\trm -f $(_SHCPL)/run-on-bat\n\trm -f $(_ZSHCPL)/_tlp\n\trm -f $(_ZSHCPL)/_tlp-radio-device\n\trm -f $(_ZSHCPL)/_tlp-run-on\n\trm -f $(_ZSHCPL)/_tlp-stat\n\trm -f $(_FISHCPL)/tlp.fish\n\trm -f $(_FISHCPL)/tlp-stat.fish\n\trm -f $(_FISHCPL)/bluetooth.fish\n\trm -f $(_FISHCPL)/nfc.fish\n\trm -f $(_FISHCPL)/wifi.fish\n\trm -f $(_FISHCPL)/wwan.fish\n\trm -f $(_FISHCPL)/run-on-ac.fish\n\trm -f $(_FISHCPL)/run-on-bat.fish\n\trm -f $(_META)/de.linrunner.tlp.metainfo.xml\n\trm -r $(_VAR)\n\nuninstall-rdw:\n\t# Package tlp-rdw\n\trm $(_BIN)/tlp-rdw\n\trm $(_ULIB)/rules.d/85-tlp-rdw.rules\n\trm $(_ULIB)/tlp-rdw-udev\n\trm $(_NMDSP)/99tlp-rdw-nm\n\trm -f $(_SHCPL)/tlp-rdw\n\trm -f $(_ZSHCPL)/_tlp-rdw\n\trm -f $(_FISHCPL)/tlp-rdw.fish\n\nuninstall-man-tlp:\n\t# manpages\n\tcd $(_MAN)/man1 && rm -f $(MANFILES1)\n\tcd $(_MAN)/man8 && rm -f $(MANFILES8)\n\nuninstall-man-rdw:\n\t# manpages\n\tcd $(_MAN)/man8 && rm -f $(MANFILESRDW8)\n\nuninstall: uninstall-tlp uninstall-rdw\n\nuninstall-man: uninstall-man-tlp uninstall-man-rdw\n\ncheckall: checkbashisms shellcheck perlcritic checkdupconst checkbatdrv checkwip\n\ncheckbashisms:\n\t@echo \"*** checkbashisms ***************************************************************************\"\n\t@{ checkbashisms $(SHFILES) 2>&1 | sed -e '/test with unary -a (should be -e)/{N;d;}'; } || true\n\nshellcheck:\n\t@echo \"*** shellcheck ******************************************************************************\"\n\t@shellcheck -s dash $(SHFILES) $(UTSHFILES) || true\n\nperlcritic:\n\t@echo \"*** perlcritic ******************************************************************************\"\n\t@perlcritic --severity 4 --verbose \"%F: [%p] %m at line %l, column %c.  (Severity: %s)\\n\" $(PLFILES) || true\n\ncheckdupconst:\n\t@echo \"*** checkdupconst ***************************************************************************\"\n\t@{ sed -n -r -e 's,^.*readonly\\s+([A-Za-z_][A-Za-z_0-9]*)=.*$$,\\1,p' $(SHFILES) | sort | uniq -d; } || true\n\ncheckwip:\n\t@echo \"*** checkwip ********************************************************************************\"\n\t@grep -E -n \"### (DEBUG|DEVEL|TODO|WIP)\" $(SHFILES) $(UTSHFILES) $(PLFILES) || true\n\nbat.d/TEMPLATE~: bat.d/TEMPLATE\n\t@awk '/^batdrv_[a-z_]+ ()/ { print $$1; }' $< | grep -v 'batdrv_is' | sort > $@\n\nbat.d/%~: bat.d/%\n\t@printf \"*** checkbatdrv %-25s ***********************************************\\n\" \"$<\"\n\t@awk '/^batdrv_[a-z_]+ ()/ { print $$1; }' $< | grep -v -E 'batdrv_(is|has)' | sort > $@\n\t@diff -U 1 -s bat.d/TEMPLATE~  $@ || true\n\ncheckbatdrv: bat.d/TEMPLATE~ $(BATDRVFILES)\n\trm -f bat.d/*~\n"
        },
        {
          "name": "README.d",
          "type": "blob",
          "size": 0.3701171875,
          "content": "This directory is intended to contain drop-in customizations for TLP.\nSee full explanation: https://linrunner.de/tlp/settings\n\nThe naming scheme is 00-name.conf, the files are read in lexical (aphabetical)\norder.\n\nYou may also use /etc/tlp.conf directly, which will override any settings in\nthis directory.\n\nAfter making changes, run 'tlp start' to activate them without reboot.\n"
        },
        {
          "name": "README.rst",
          "type": "blob",
          "size": 1.5244140625,
          "content": "TLP - Optimize Linux Laptop Battery Life\n========================================\nTLP is a feature-rich command line utility for Linux, saving laptop battery power\nwithout the need to delve deeper into technical details.\n\nTLP’s default settings are already optimized for battery life, so you may just\ninstall and forget it.\n\nNevertheless TLP is highly customizable to meet your specific requirements.\n\nDocumentation\n-------------\nRead the full documentation at the website `<https://linrunner.de/tlp>`_.\n\nFor a summary of how TLP works and its features see\n`Introduction <https://linrunner.de/tlp/introduction>`_.\n\nInstallation\n------------\nTLP packages are available for all major Linux distributions:\n`Installation <https://linrunner.de/tlp/installation>`_.\n\nSettings\n--------\nSettings are organized into two profiles, enabling you to adjust between savings\nand performance independently for battery (BAT) and AC operation.\n\nRefer to `Settings <https://linrunner.de/tlp/settings/introduction>`_ to learn\nhow to customize the configuration if desired.\n\nSupport\n-------\nPlease visit your favorite Linux community for help and support questions.\nMake shure to check `Support <https://linrunner.de/tlp/support>`_ first.\n\nBug reports\n-----------\nRefer to the\n`Bug Reporting Howto <https://github.com/linrunner/TLP/blob/master/.github/Bug_Reporting_Howto.md>`_.\n\nContribute\n----------\nContributing is not only about coding. Volunteers helping with support, testing\nand documentation are always welcome!\n\nSee `Contributing <https://linrunner.de/tlp/contribute>`_.\n"
        },
        {
          "name": "VERSION",
          "type": "blob",
          "size": 0.013671875,
          "content": "1.8.0-alpha.0\n"
        },
        {
          "name": "bat.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "changelog",
          "type": "blob",
          "size": 53.4501953125,
          "content": "+++ 1.8.0-alpha.0 --- <unreleased> +++\n\n  * Development version\n\n  * Features\n    Battery Care:\n    - Chromebooks modded with chrultrabook/coreboot custom UEFI firmware\n      running kernel 6.12.8 (or later): stop threshold, recalibration;\n      latest Chromebooks with EC firmware v3 also support a start threshold\n      (Issue #765)\n    - Dell laptops with kernel 6.12 (or later): start and stop threshold\n      (Issue #379)\n    - Framework laptops with kernel 6.12.8 (or later): stop threshold,\n      recalibration (Issue #765)\n    - ThinkPads:\n      - tlp discharge to a target percentage\n      - Discharge code refactored, messages improved\n    Diagnostic:\n    - tlp-stat --psup: add readings\n    Graphics:\n    - RADEON_POWER_PROFILE_ON_AC/BAT: *DEPRECATED* feature will be\n      removed in TLP 1.9\n    Processor:\n    - tlp-stat -p -v: show boost per core (amd-pstate needs kernel >= 6.11)\n\n  * Bugfixes\n    Operation:\n    - Use AC mode for desktop PCs if no power source can be detected\n      (Issue #768)\n    Radio Devices:\n    - RDW: if LAN gets disconnected in suspend, ensure wifi activation\n      upon resume\n\n+++ 1.7.0 --- 27.09.2024 +++\n\n  * No changes since 1.7.0-beta.2\n\n+++ 1.7.0-beta.2 --- 20.09.2024 +++\n\n  * Beta release\n\n  * Features since 1.7.0-beta.1\n    Processor:\n    - tlp-stat -p: identify CPU model on ARM systems\n\n  * Bugfixes since 1.7.0-beta.1\n    Battery:\n    - ThinkPads:\n      - Fix premature abort of discharge/recalibrate for *20 models\n        (Issue #759)\n      - Fix ThinkPad X13s ARM power source detection (Issue #758)\n      - tlp-stat -b: do not recommend kernel 5.17 for coreboot,\n        as coreboot does not support discharge/recalibrate anyway.\n    USB:\n    - tlp-stat -u: filter out error messages\n\n+++ 1.7.0-beta.1 --- 04.09.2024 +++\n\n  * Beta release\n\n  * Features\n    Battery Care:\n    - Apple Silicon Macbooks (M*) with MacOS 13.0 (or later) firmware and\n      Asahi Linux kernel 6.6 (or later): start and stop threshold\n    - MSI laptops supported by the msi_ec driver in kernel 6.3 (or later):\n      start and stop threshold (Issue #707)\n    - Lenovo laptops (non-ThinkPad series): tlp-stat -b: number 60% removed\n      because the threshold varies by model (Issue #717)\n    - LG Gram laptops: forward to lg-legacy for kernel <= 5.17 only\n    - ThinkPads:\n      - The obsolete tpacpi-bat driver along with the acpi_call dependency\n        were removed. Current Linux distributions ship with kernel 5.17 or\n        later, which enables battery care via the built-in thinkpad_acpi.\n      - tlp-stat -b improvements for coreboot:\n        - Fix charge readings (Issue #657)\n        - Indicate when recalibration is not possible\n    - tlp-stat -b: Highlight battery care status\n    - tlp setcharge, tlp-stat -b: display a recommendation to use the laptop\n      on battery power until the battery is discharged to the stop threshold\n    Disks:\n    - tlp-stat -d: replace disk serial number with asterisks (for privacy)\n    General:\n    - TLP_MSG_COLORS: highlight error, warning, notice and success messages\n      in color.\n    - Add option --version to all TLP commands\n    - Add tlp-stat output options:\n      -m|--mode: print current power mode\n      -q|--quiet: omit version header and show less information in the\n        processor category\n    - Add Fish shell command completion\n    - Improve busybox compatibility by using only portable options for flock\n    Graphics:\n    - AMDGPU_ABM_LEVEL_ON_AC/BAT: configure display panel power savings via\n      Adaptive Backlight Modulation (ABM) from AMD Vega or newer GPUs;\n      kernel 6.9 required\n    Processor:\n    - CPU_ENERGY_PERF_POLICY_ON_AC/BAT: drop backwards compatibility for\n      EPB with kernels < 5.2; x86_energy_perf_policy is no longer required\n    - CPU_HWP_DYN_BOOST_ON_AC/BAT: drop the AMD implementation; the\n      corresponding kernel patch was discarded during the 2022 review,\n      reincarnation seems unlikely\n    - tlp-stat -t:\n      - Show AMD CPU temperatures\n      - Indicate unavailable fan speed\n    Radio Devices:\n    - DEVICES_TO_ENABLE/DISABLE_ON_SHUTDOWN removed\n    USB:\n    - USB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN removed\n\n  * Bugfixes\n    Battery:\n    - ThinkPads:\n      - Fix Edge 11 battery enumeration (Issue #714)\n      - Support ThinkPad W510\n    Disks:\n    - Ensure power saving for all USB disks when plugged in\n    - tlp diskid: filter duplicates\n    General:\n    - tlp-stat -s: rework manual mode detection (Issue #702)\n    - tlp-stat --psup/udev: fix udev rule check\n    Radio Devices:\n    - Avoid error popups from NetworkManager when switching wifi/wwan\n    USB:\n    - Prevent USB devices from being unrecognized or malfunctioning on battery;\n      adds xhci_hcd to RUNTIME_PM_DRIVER_DENYLIST defaults (Issues #436, #587)\n\n+++ 1.6.1 --- 18.09.2023 +++\n\n  * Bugfixes\n    Battery:\n    - LG Gram laptops: ensure lg-legacy is used for kernel <= 5.17 (Issue #708)\n    General:\n    - tlp-stat -s: report manual mode despite restrictive umask (Issue #702)\n\n+++ 1.6.0 --- 24.08.2023 +++\n\n  * Changes since 1.6.0-beta.1\n    Battery:\n    - System76: default start threshold set to 90% (due to EC firmware change)\n    Processor:\n    - CPU_DRIVER_OPMODE_ON_AC/BAT: check if operation mode is actually\n      supported by the current CPU driver\n\n+++ 1.6.0-beta.1 --- 20.07.2023 +++\n\n  * Beta release\n\n  * Features\n    Battery:\n    - LG Gram laptops:\n      - Use standard sysfs attribute 'charge_control_end_threshold'\n        provided by kernel 5.18 and newer\n      - Restore threshold after hibernate\n    - System76 laptops with open source EC firmware:\n      start and stop threshold\n    - ThinkPads: model detection adapted for Libreboot (Issue #679)\n    - Toshiba/Dynabook laptops: stop threshold 80/100%\n    Configuration:\n    - Allow comments (#) after parameters (Issue #598)\n    - tlp-stat -c/--cdiff: append a notice to deprecated or removed\n      parameters\n    Disks:\n    - SATA_LINKPWR_ON_AC/BAT: remove fallbacks for outdated kernels\n      before 4.15 from defaults (still available via explicit configuration)\n    General:\n    - Allow coexistence with power-profiles-daemon: do not apply\n      PLATFORM_PROFILE_ON_AC/BAT, CPU_ENERGY_PERF_POLICY_ON_AC/BAT and\n      CPU_BOOST_ON_BAT/BAT when it is running\n    - MEM_SLEEP_ON_AC/BAT: change system suspend mode\n    - Add ZSH command completion\n    - tlp-stat -s:\n      - Silence warnings about unmasked systemd-rfkill.service/.socket\n        when DEVICES_TO_ENABLE/DISABLE_ON_STARTUP is actually unconfigured\n      - Show EC firmware version\n      - Show system suspend mode\n      - Show proper ThinkPad model string with Libreboot (Issue #679)\n    PCI(e) devices:\n      - RUNTIME_PM_ENABLE/DISABLE: apply even when RUNTIME_PM_ON_AC/BAT\n        is disabled (Issue #614)\n    Processor:\n      - CPU_DRIVER_OPMODE_ON_AC/BAT: set CPU scaling driver operation mode\n        (active, guided, passive); amd-pstate/intel_pstate driver required\n      - CPU_ENERGY_PERF_POLICY_ON_AC/BAT: support AMD Zen 2 or newer CPUs;\n        kernel 6.3 with amd-pstate driver in active mode required\n      - CPU_HWP_DYN_BOOST_ON_AC/BAT: *EXPERIMENTAL* support AMD Zen 2 or\n        newer CPUs; yet unreleased kernel 6.x and amd-pstate driver\n        in active mode required\n      - SCHED_POWERSAVE_ON_AC/BAT removed (unavailable since kernel 3.5)\n      - tlp-stat -p:\n        - Show amd-pstate operation mode, dynamic boost and performance\n          attributes\n        - Show min/max operating frequency the processor can run at\n          (cpuinfo_min/max_freq) and limit imposed by the BIOS (bios_limit)\n        - (-v) Show acpi_cppc performance and frequency attributes\n    Radio Devices:\n    - Support Thunderbolt docks to switch radio devices\n    - DEVICES_TO_ENABLE/DISABLE_ON_SHUTDOWN: *DEPRECATED* feature will be\n      removed in TLP 1.7\n    USB:\n    - USB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN: *DEPRECATED* feature will be\n      removed in TLP 1.7\n\n  * Bugfixes\n    Configuration:\n    - Strip trailing blanks from unquoted parameter values\n    Operation:\n    - Deactivate AHCI_RUNTIME_PM and PCIE_ASPM before suspend to avoid\n      resume freezes (Issue #593, #606, #698)\n    Processor:\n    - Set governor although not listed in scaling_available_governors\n\n+++ 1.5.0 --- 07.01.2022 +++\n\n  * Bugfixes\n    - tlp-stat: drop PM_RUNTIME=y kernel config recommendation\n\n+++ 1.5.0-beta.1 --- 20.12.2021 +++\n\n  * Beta release\n\n  * Features\n    Battery:\n    - Sony laptops: stop threshold 50/80/100% aka \"battery care limiter\"\n    - ThinkPads:\n      - Use new sysfs attribute 'charge_behaviour' for recalibration\n      - Support T400 running coreboot via natacpi (Issue #601)\n    - tlp-stat -b: display \"cycle_count = 0\"  with the note \"or not supported\"\n    Radio Devices:\n    - Add support for switching NFC devices\n    - Remove support for wireless-tools (iwconfig)\n\n  * Bugfixes\n    Battery:\n    - ASUS laptops: apply stop threshold reliably on boot and after hibernate\n      (Issue #589)\n    Disks:\n    - tlp-stat -d: display correct sysfs path for disk runtime pm:\n      /sys/block/<DISK>/device/power/control (Issue #606)\n\n+++ 1.4.0 --- 24.09.2021 +++\n\n  * Features\n    Audio:\n      - SOUND_POWER_SAVE_ON_AC: change default to enabled (Issue #495)\n    Battery:\n      - \"Battery Features\" renamed to \"Battery Care\"\n      - Introduce plugins to support Battery Care for non-ThinkPads:\n        - ASUS laptops: stop threshold\n        - Huawei MateBooks: start and stop threshold\n        - LG Gram laptops: stop threshold at 80% aka \"battery care limit\"\n        - Lenovo laptops: stop threshold at 60% aka \"battery conservation mode\"\n        - Samsung laptops: stop threshold at 80% aka \"battery life extender\"\n      - ThinkPads\n        - Allow deactivation of the start threshold (START_CHARGE_THRESH_BATx=0)\n        - Discharge malfunction: hint to check battery and charger\n        - Use standard sysfs attributes for charge thresholds\n          (Issue #513)\n        - Flag ThinkPad L512 as \"unsupported\"\n      - Validate charge threshold configuration, don't fail silently\n      - tlp-stat -b\n        - Battery Care: show plugin, supported features, driver usage and\n          related kernel module(s)\n        - Map battery state \"Unknown\" to \"Idle\" for clarity\n    Configuration:\n      - tlp-stat --cdiff: show configuration differing from defaults\n      - PARAMETER+=\"add values\": append values to a parameter already defined\n        as intrinsic default or in a *previously* read file (Issue #457)\n      - TLP_WARN_LEVEL: warn about invalid settings, configurable for background\n        tasks and command line\n      - Rename parameters (backwards compatible to legacy config files):\n          SATA_LINKPWR_BLACKLIST      -> SATA_LINKPWR_DENYLIST\n          RUNTIME_PM_BLACKLIST        -> RUNTIME_PM_DENYLIST\n          RUNTIME_PM_DRIVER_BLACKLIST -> RUNTIME_PM_DRIVER_DENYLIST\n          USB_BLACKLIST               -> USB_DENYLIST\n          USB_BLACKLIST_BTUSB         -> USB_EXCLUDE_BTUSB\n          USB_BLACKLIST_PHONE         -> USB_EXCLUDE_PHONE\n          USB_BLACKLIST_PRINTER       -> USB_EXCLUDE_PRINTER\n          USB_BLACKLIST_WWAN          -> USB_EXCLUDE_WWAN\n          USB_WHITELIST               -> USB_ALLOWLIST\n    Disks:\n      - AHCI_RUNTIME_PM_ON_AC/BAT:\n        - Works only on disks defined in DISK_DEVICES\n        - Works on NVMe (new), SATA/ATA and plugged in USB (new) disks\n        - Works on SATA ports\n        - No longer experimental i.e. now enabled by default; the previously\n          existing risk of system freezes (and data loss) with the multiqueue\n          scheduler is now eliminated:\n          - Kernel >= 4.19 itself locks unsafe disk runtime pm\n          - TLP generally locks it for kernel < 4.19\n      - DISK_APM_CLASS_DENYLIST: exclude disk classes from APM, i.e. you may\n        now activate it for USB and IEEE1394 drives (Issue #523)\n      - DISK_APM_LEVEL_ON_AC/BAT, DISK_SPINDOWN_TIMEOUT_ON_AC, DISK_IOSCHED:\n        now also work when plugging in USB disks; provided disk is contained in\n        DISK_DEVICES and 'usb' is removed from DISK_APM_CLASS_DENYLIST\n      - tlp-stat -d\n        - Explain why AHCI_RUNTIME_PM is locked for a disk\n        - Show disks attached to SATA links/ports\n        - Show a disk's host (for SATA_LINKPWR_DENYLIST)\n        - Show ALPM state in the sysfs directory of the AHCI host\n        - Show IDs for all disks configured in DISK_DEVICES\n        - Distinguish SATA from ATA(IDE) disks\n        - Show NVMe disk temperature\n    General:\n      - power-profiles-daemon: issue error messages about conflicting service\n      - tlp-stat -s: determine OS release without the lsb_release utility\n    Graphics:\n      - Add support for amdgpu (Issue #498)\n      - Improve powerdown of unused GPUs with drivers amdgpu, nouveau,\n        nvidia and without driver (Issues #488, #495, #498)\n      - tlp-stat -g:\n        - List all GPUs with at least the driver info\n        - Show hybrid graphics switch state (switcheroo)\n        - Intel GPU:\n          - Show hardware min/max frequency instead of\n            list of available frequencies (kernel change)\n          - Show more informative RC6, FBC and PSR status where available\n            (Issue #203)\n    Operation Mode AC/BAT:\n      - Speed up system shutdown/suspend by not applying AC settings anymore\n      - TLP_PS_IGNORE: add USB; allow to ignore multiple power supply classes\n      - tlp-stat -s: speed up power source detection\n      - tlp-stat --psup/udev: check if udev rules for power source changes and\n        connecting USB devices are active\n    PCI(e) devices:\n      - RUNTIME_PM_ENABLE/DISABLE: permanently enable/disable runtime PM for\n        PCI(e) devices based on address (independent of the power source)\n      - RUNTIME_PM_DENYLIST: remove amdgpu, nvidia, pcieport from defaults\n      - tlp-stat -e -v: show device runtime_status\n    Platform:\n      - PLATFORM_PROFILE_ON_AC/BAT: select platform profile to control system\n        operating characteristics around power/performance levels, thermal\n        and fan speed\n      - tlp-stat -p: show state of ThinkPad lapmode\n    Processor:\n      - CPU_HWP_DYN_BOOST_ON_AC/BAT: Intel CPU HWP dynamic boost (Issue #468)\n      - Remove backwards compatibility of CPU_ENERGY_PERF_POLICY_ON_AC/BAT with\n        ENERGY_PERF_POLICY_ON_AC/BAT to prevent performance issues caused by the\n        value 'power' in legacy configurations\n      - PHC_CONTROLS removed (obsolete)\n      - tlp-stat -p:\n        - cpu1..cpuN omitted for clarity, use -v to show all\n        - Sort more than 10 CPU cores in proper numerical order\n        - Show intel_pstate operation mode (\"status\")\n        - Omit \"EPB: unsupported\" for AMD or non-intel_pstate CPUs\n    USB:\n      - USB_EXCLUDE_AUDIO: exclude audio devices from autosuspend (Issue #556)\n      - tlp-stat -u -v: show device runtime_status\n\n  * Bugfixes\n    Battery Care:\n      - tlp discharge/recalibrate:\n        - Terminate properly when AC/charger is removed\n        - Check support on ThinkPads because of Coreboot (Issue #547)\n      - [Try to] mitigate false threshold readouts caused by a firmware issue\n        on ThinkPad A/E/L/S/X series (Issue #369)\n    Disks:\n      - Issue #474: confine AHCI_RUNTIME_PM_ON_AC/BAT to SATA disks\n    Graphics:\n      - Issue #488: Idle temperature 20 °C higher on battery (Nvidia GPU)\n      - Issue #495: SOUND_POWER_SAVE_ON_AC=0 prevents powerdown of Nvidia GPU\n      - Issue #522: Intel GPU settings fail -> validate configuration\n    Operation Mode AC/BAT:\n      - Issue #573: power mode not updating when switching from AC to battery\n    Processor:\n      - Issue #570: no_turbo=1 decreases scaling_max_freq on ThinkPad X1 Gen9\n\n  * 1.4.0 Bugfixes since beta.2\n    Battery:\n      - tlp start: catch missing threshold method\n    Configuration:\n      - Ignore trailing blanks on non-quoted parameter values\n      - tlp-stat --cdiff: do not show user config lines matching the default\n    Disks:\n      - Confine plugin event handling to USB\n\n+++ 1.4.0-beta.2 --- 09.09.2021 +++\n\n  * Beta release\n\n  * Bugfixes\n    Battery:\n      - Huawei: use legacy interface 'charge_control_thresholds' for reliability\n      - LG: fix battery and battery_care_limit detection (Issue #568)\n      - ThinkPad: fix enforcement via NATACPI_ENABLE, TPAPCI_ENABLE\n    Operation Mode AC/BAT:\n      - Issue #573: power mode not updating when switching from AC to battery\n    Platform:\n      - tlp-stat -p: show state of ThinkPad lapmode\n    Processor:\n      - Issue #570: no_turbo=1 decreases scaling_max_freq on ThinkPad X1 Gen9\n      - tlp-stat -p: omit \"EPB: unsupported\" for AMD or non-intel_pstate CPUs\n\n+++ 1.4.0-beta.1 --- 29.07.2021 +++\n\n  * Beta release\n\n  * Features\n    Audio:\n      - SOUND_POWER_SAVE_ON_AC: change default to enabled (Issue #495)\n    Battery:\n      - \"Battery Features\" renamed to \"Battery Care\"\n      - Introduce plugins to support Battery Care for non-ThinkPads:\n        - ASUS laptops: stop threshold\n        - Huawei MateBooks: start and stop threshold\n        - LG Gram laptops: stop threshold at 80% aka \"battery care limit\"\n        - Lenovo laptops: stop threshold at 60% aka \"battery conservation mode\"\n        - Samsung laptops: stop threshold at 80% aka \"battery life extender\"\n      - ThinkPads\n        - Allow deactivation of the start threshold (START_CHARGE_THRESH_BATx=0)\n        - Discharge malfunction: hint to check battery and charger\n        - Use standard sysfs attributes for charge thresholds\n          (Issue #513)\n        - Flag ThinkPad L512 as \"unsupported\"\n      - Validate charge threshold configuration, don't fail silently\n      - tlp-stat -b\n        - Battery Care: show plugin, supported features, driver usage and\n          related kernel module(s)\n        - Map battery state \"Unknown\" to \"Idle\" for clarity\n    Configuration:\n      - tlp-stat --cdiff: show configuration differing from defaults\n      - PARAMETER+=\"add values\": append values to a parameter already defined\n        as intrinsic default or in a *previously* read file (Issue #457)\n      - TLP_WARN_LEVEL: warn about invalid settings, configurable for background\n        tasks and command line\n      - Rename parameters (backwards compatible to legacy config files):\n          SATA_LINKPWR_BLACKLIST      -> SATA_LINKPWR_DENYLIST\n          RUNTIME_PM_BLACKLIST        -> RUNTIME_PM_DENYLIST\n          RUNTIME_PM_DRIVER_BLACKLIST -> RUNTIME_PM_DRIVER_DENYLIST\n          USB_BLACKLIST               -> USB_DENYLIST\n          USB_BLACKLIST_BTUSB         -> USB_EXCLUDE_BTUSB\n          USB_BLACKLIST_PHONE         -> USB_EXCLUDE_PHONE\n          USB_BLACKLIST_PRINTER       -> USB_EXCLUDE_PRINTER\n          USB_BLACKLIST_WWAN          -> USB_EXCLUDE_WWAN\n          USB_WHITELIST               -> USB_ALLOWLIST\n    Disks:\n      - AHCI_RUNTIME_PM_ON_AC/BAT:\n        - Works only on disks defined in DISK_DEVICES\n        - Works on NVMe (new), SATA/ATA and plugged in USB (new) disks\n        - Works on SATA ports\n        - No longer experimental i.e. now enabled by default; the previously\n          existing risk of system freezes (and data loss) with the multiqueue\n          scheduler is now eliminated:\n          - Kernel >= 4.19 itself locks unsafe disk runtime pm\n          - TLP generally locks it for kernel < 4.19\n      - DISK_APM_CLASS_DENYLIST: exclude disk classes from APM, i.e. you may\n        now activate it for USB and IEEE1394 drives (Issue #523)\n      - DISK_APM_LEVEL_ON_AC/BAT, DISK_SPINDOWN_TIMEOUT_ON_AC, DISK_IOSCHED:\n        now also work when plugging in USB disks; provided disk is contained in\n        DISK_DEVICES and 'usb' is removed from DISK_APM_CLASS_DENYLIST\n      - tlp-stat -d\n        - Explain why AHCI_RUNTIME_PM is locked for a disk\n        - Show disks attached to SATA links/ports\n        - Show a disk's host (for SATA_LINKPWR_DENYLIST)\n        - Show ALPM state in the sysfs directory of the AHCI host\n        - Show IDs for all disks configured in DISK_DEVICES\n        - Distinguish SATA from ATA(IDE) disks\n        - Show NVMe disk temperature\n    General:\n      - power-profiles-daemon: issue error messages about conflicting service\n      - tlp-stat -s: determine OS release without the lsb_release utility\n    Graphics:\n      - Add support for amdgpu (Issue #498)\n      - Improve powerdown of unused GPUs with drivers amdgpu, nouveau,\n        nvidia and without driver (Issues #488, #495, #498)\n      - tlp-stat -g:\n        - List all GPUs with at least the driver info\n        - Show hybrid graphics switch state (switcheroo)\n        - Intel GPU:\n          - Show hardware min/max frequency instead of\n            list of available frequencies (kernel change)\n          - Show more informative RC6, FBC and PSR status where available\n            (Issue #203)\n    Operation Mode AC/BAT:\n      - Speed up system shutdown/suspend by not applying AC settings anymore\n      - TLP_PS_IGNORE: add USB; allow to ignore multiple power supply classes\n      - tlp-stat -s: speed up power source detection\n      - tlp-stat --psup/udev: check if udev rules for power source changes and\n        connecting USB devices are active\n    PCI(e) devices:\n      - RUNTIME_PM_ENABLE/DISABLE: permanently enable/disable runtime PM for\n        PCI(e) devices based on address (independent of the power source)\n      - RUNTIME_PM_DENYLIST: remove amdgpu, nvidia, pcieport from defaults\n      - tlp-stat -e -v: show device runtime_status\n    Platform:\n      - PLATFORM_PROFILE_ON_AC/BAT: select platform profile to control system\n        operating characteristics around power/performance levels, thermal\n        and fan speed\n    Processor:\n      - CPU_HWP_DYN_BOOST_ON_AC/BAT: Intel CPU HWP dynamic boost (Issue #468)\n      - Remove backwards compatibility of CPU_ENERGY_PERF_POLICY_ON_AC/BAT with\n        ENERGY_PERF_POLICY_ON_AC/BAT to prevent performance issues caused by the\n        value 'power' in legacy configurations\n      - PHC_CONTROLS removed (obsolete)\n      - tlp-stat -p:\n        - cpu1..cpuN omitted for clarity, use -v to show all\n        - Sort more than 10 CPU cores in proper numerical order\n        - Show intel_pstate operation mode (\"status\")\n    USB:\n      - USB_EXCLUDE_AUDIO: exclude audio devices from autosuspend (Issue #556)\n      - tlp-stat -u -v: show device runtime_status\n\n  * Bugfixes\n    Battery Care:\n      - tlp discharge/recalibrate:\n        - Terminate properly when AC/charger is removed\n        - Check support on ThinkPads because of Coreboot (Issue #547)\n      - [Try to] mitigate false threshold readouts caused by a firmware issue\n        on ThinkPad A/E/L/S/X series (Issue #369)\n    Disks:\n      - Issue #474: confine AHCI_RUNTIME_PM_ON_AC/BAT to SATA disks\n    Graphics:\n      - Issue #488: Idle temperature 20 °C higher on battery (Nvidia GPU)\n      - Issue #495: SOUND_POWER_SAVE_ON_AC=0 prevents powerdown of Nvidia GPU\n      - Issue #522: Intel GPU settings fail -> validate configuration\n\n+++ 1.3.1 --- 06.02.2020 +++\n\n  * Bugfixes\n    Processor:\n      - Issue #460: default CPU_ENERGY_PERF_POLICY_ON_BAT=power too aggressive\n\n+++ 1.3.0 --- 31.01.2020 +++\n\n  * Features\n    New configuration scheme:\n      - /etc/default/tlp is replaced by /etc/tlp.conf\n      - Settings are read in the following order:\n          1. Intrinsic defaults\n          2. /etc/tlp.d/*.conf - Drop-in customization snippets\n          3. /etc/tlp.conf     - User configuration\n        In case of identical parameters, the last occurrence has precedence\n      - Parse config files instead of sourcing --> no more shell expansion\n    Battery Features, tlp-stat -b:\n      - Charge thresholds: better checks for command line and configuration;\n        clearer error messages\n      - tlp discharge: error message \"check your hardware\" when battery wasn't\n        completely discharged (Issue #438)\n      - Distinguish between \"no kernel support\" for natacpi (< 4.17) and\n        \"laptop not supported\" (>= 4.17)\n      - Supplement battery status \"Unknown\" with \"threshold may prevent\n        charging\" when thresholds are available only\n    General:\n      - systemd: replace tlp-sleep.service with /lib/systemd/system-sleep/tlp\n    Operation Mode AC/BAT:\n      - TLP_PS_IGNORE: power supply class to ignore when determining operation\n        mode; workaround for laptops reporting incorrect AC or battery status\n        (Issue #446)\n    PCI(e) devices:\n      - PCIE_ASPM_ON_AC/BAT: add method 'powersupersave' (Issue #425)\n    Processor:\n      - CPU_ENERGY_PERF_POLICY_ON_AC/BAT: backward compatible merge of\n        settings for Intel energy vs. performance policies\n        EPB (ENERGY_PERF_POLICY_ON_AC/BAT) and HWP.EPP (CPU_HWP_ON_AC/BAT);\n        when HWP.EPP is available, EPB is not set; validate parameters;\n        eliminate external tool x86_energy_perf_policy for kernel >= 5.2\n    tlp-stat:\n      - Configuration: show file where the parameter comes from\n      - System Info:\n        - Show SELinux status\n        - Show RDW as 'disabled' when TLP is disabled as a whole\n        - Indicate persistent mode\n      - Intel CPU: don't show EPB values when HWP.EPP is active (see above)\n      - PCIe ASPM: show available policies\n      - Undervolting: remove \"PHC kernel not available\" message\n\n  * Bugfixes\n    Battery Features:\n      - Issue #415: ThinkPad X240 discharge BAT1 malfunction when BAT0 is not\n        installed\n    Disks:\n      - Fix NVMe detection on Linux 4.15\n    tlp-stat:\n      - Issue #430: ignore hid device batteries\n\n+++ 1.2.2 --- 04.05.2019 +++\n\n  * Bugfixes\n    Battery Features, tlp-stat -b:\n      - Show data for batteries named other than BAT0/BAT1 (non-ThinkPads)\n      - Issue #395: ThinkPad X1C6 discharge malfunction\n      - Separate checks for charge thresholds and recalibration\n      - Intelligible recommendation for tp-smapi on ThinkPad X220/T420 et al.\n      - Explain \"Battery Features: Charge Thresholds and Recalibrate\"\n    Disks:\n      - Fix type determination\n    Operation Mode AC/BAT:\n      - MacBookPro 5.3: workaround for false AC offline status\n    Processor, tlp-stat -p:\n      - Fix read of /sys/devices/system/cpu/cpufreq/boost\n      - x86_energy_perf_policy: detect unsupported CPUs in newer versions\n    Radio Devices:\n      - Issue #404: make RESTORE_DEVICE_STATE_ON_STARTUP=1 persistent again\n\n+++ 1.2.1 --- 18.03.2019 +++\n\n  * Bugfix\n    - Issue #391: unknown command \"chargeonce\"\n\n+++ 1.2 --- 11.03.2019 +++\n\n  * Features\n    Disks:\n      - Support for NVMe devices\n      - Support for removable drives e.g. USB / IEE1394 devices\n      - Improve support for multi queue I/O schedulers (blk-mq)\n    General:\n      - tlp bat/ac: keep manual power settings until tlp start (Issue #349)\n      - Remove all pm-utils scripts (Issue #363)\n      - tlp/tlp-stat: Temporarily overwrite configuration for one program\n        invocation only: -- PARAM=value ...\n      - Document intrinsic defaults in config file (Issue #353)\n      - Code verified with ShellCheck\n    Graphics:\n      - INTEL_GPU_MIN_FREQ_ON_AC/BAT, INTEL_GPU_MAX_FREQ_ON_AC/BAT,\n        INTEL_GPU_BOOST_FREQ_ON_AC/BAT: Intel GPU frequency limits\n    Radio Devices:\n       - tlp-rdw: new command to disable RDW actions temporarily (until reboot)\n       - Support ThinkPad Pro Dock CS18 (17ef:306f)\n       - USB_BLACKLIST_WWAN: disable by default\n       - Retire compatibility with Network Manager 0.9.8 (Ubuntu 14.04 EOL)\n    PCI(e) devices:\n       - RUNTIME_PM_BLACKLIST: add mei_me, pcieport\n    ThinkPad Battery:\n      - New native kernel API for battery features \"natacpi\" (Issue #321);\n        requires kernel 4.17; enabled by default\n      - NATACPI_ENABLE, TPACPI_ENABLE, TPSMAPI_ENABLE: make all battery feature\n        drivers switchable\n      - tlp discharge/recalibrate: exclude multiple simultaneous invocations\n      - Support ThinkPad 25, *80 (Coffee Lake) and all newer models\n    tlp-stat:\n      - Check systemd-rfkill.socket masked status\n      - Disks: show all configured devices (consider default)\n      - Intel GPU: show frequency limits and available frequencies\n      - Rename \"Suggestions\" section to \"Recommendations\"\n      - Remove invocation via 'tlp stat'\n    USB:\n      - Exclude scanners managed by libsane from autosuspend\n      - Remove long deprecated level/autosuspend attributes\n\n  * Bugfixes\n    - Issue #193: do not try to start NetworkManager (systemd)\n    - Issue #319: get_disk_dev logic is not compatible with NVMe devices\n    - Issue #320: AC mode not detected with USB charger\n    - Issue #331: Process '/usr/bin/tlp auto' failed with exit code 4\n    - Issue #332: zsh parse error in tlp diskid\n    - Issue #343, #362, #375: circumvent broken AC/charger detection\n    - Issue #344: keep ASPM default to enable deeper C-states on AC\n    - Issue #356: fix writing sequence for start/stop charge thresholds\n    - Issue #368: recognize Think*p*ad P50\n    - tlp-stat: filter HWP lines from x86_energy_perf_policy output\n\n+++ 1.1 --- 24.01.2018 +++\n\n  * Features\n    Disks:\n      - SATA_LINKPWR_ON_AC/BAT: try multiple values to support new recommended\n        ALPM policy \"med_power_with_dipm\" in kernel 4.15\n    Processor:\n      - Issue #297: ENERGY_PERF_POLICY_ON_AC/BAT: support changed values\n            performance, balance-performance, default, balance-power, power\n    ThinkPad Battery:\n      - Support ThinkPad 13 1st & 2nd Gen, E130; new tpacpi-bat version\n      - tlp-stat --psup: show ASLbase for tpacpi-bat (in device/path)\n      - tlp discharge: show state of battery and force_discharge\n    USB:\n      - USB_BLACKLIST_PRINTER: exclude printers from autosuspend\n\n  * Bugfixes\n    - Issue #271: intercept link_power_management_policy write error\n    - Issue #283: fix AC power detection for MacBook Pro 2017\n    - Issue #298: move runtime data from /var/run/tlp to /run/tlp\n    - Issue #301: DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE=\"bluetooth\"\n          not working as expected\n    - Issue #313: don't detect wireless input devices' batteries as power supply\n\n+++ 1.0 --- 25.05.2017 +++\n\n  * Features\n    General:\n      - TLP_PERSISTENT_DEFAULT: use TLP_DEFAULT_MODE regardless of the actual\n        power source\n    Device Bays:\n      - BAY_POWEROFF_ON_AC: power off optical drive not only on bat (Issue #243)\n    Graphics:\n      - RUNTIME_PM_DRIVER_BLACKLIST: when unconfigured default to\n        \"amdgpu nouveau nvidia radeon\"; driver default control=auto allows\n        PRIME/Bumblebee to turn the dGPU off and prevents accidential power-on\n        during boot as well\n      - Exclude Nvidia dGPU from runtime power management even when no driver\n        is associated (improve compatibility with Bumblebee)\n    PCI(e) devices\n      - RUNTIME_PM_ALL removed (default to RUNTIME_PM_ALL=1 internally)\n    Processor:\n      - CPU_HWP_ON_AC/BAT: HWP energy performance hints; needs kernel 4.10 and\n        Intel Skylake CPU or newer, intel_pstate only\n    ThinkPad Battery:\n      - RESTORE_THRESHOLDS_ON_BAT: restore charge thresholds on battery\n      - Detect ThinkPad *70 models (Kaby Lake)\n      - Detect ThinkPad 13 (1st and 2nd Gen) as unsupported (Issue #227)\n      - Change texts \"ThinkPad (extended) battery functions\" to\n        \"ThinkPad battery features\"\n      - tlp-stat:\n        - Show \"Charge total %\" when more than one battery is present\n        - Show battery temperature (tp-smapi only)\n        - Show \"unsupported\" instead of \"not installed\" for tp-smapi incapable\n          hardware\n    USB:\n      - USB_BLACKLIST_BTUSB: exclude bluetooth devices from autosuspend\n        (Issue #239)\n      - USB_BLACKLIST_PHONE: exclude phone devices from autosuspend\n        (Issue #188)\n    tlp-stat:\n      - -g|--graphics: show graphics card data only\n      - i915: explain enable_psr modes\n      - --psup: show power supply diagnostic\n      - SMART attribute G-Sense_Error_Rate (191)\n      - -v: additional battery voltages\n      - Workqueue power efficient status\n\n  * Bugfixes\n    - Issue #237: init start: apply powersave regardless of previous state\n    - Issue #256: tlp-stat: intercept non-existing or invalid charge values\n    - tlp-stat: show Intel graphics parameters for Ubuntu's i915_bpo module\n\n+++ 0.9 --- 18.08.2016 +++\n\n  * Features\n    General:\n      - Block concurrent invocation of tlp\n    Disks:\n      - AHCI runtime power management for host controllers and attached disks\n      - SATA_LINKPWR_BLACKLIST: exclude SATA host devices from power management\n    Radio Devices:\n      - Finally remove deprecated DEVICES_TO_ENABLE_ON_RADIOSW code\n        (works with Ubuntu 12.04/Kernel 3.2 only)\n      - Change WIFI_PWR_ON_AC/BAT default config values to off/on for better\n        usability (1/5 is still supported for backwards compatibility)\n    Radio Device Wizard (tlp-rdw):\n      - Add another ThinkPad OneLink Pro Dock USB LAN (17ef:304)\n    (ThinkPad) Battery:\n      - tlp-stat:\n        - Distinguish incompatible hardware from load errors (Issue #160)\n        - Display battery charge and capacity values in %\n        - More selective suggestions for tp-smapi/acpi-call kernel modules\n    tlp-stat:\n      - Intel graphics: include i915 parameters enable_dc, enable_psr, modeset\n      - --pev: monitor power supply udev events (Issue #172)\n      - Processor:\n        - Display available scaling governors\n        - intel_pstate: display turbo_pct, num_pstates\n      - Storage Devices:\n        - Recognize blk-mq I/O scheduler\n        - SMART attributes Power_Cycle_Count, Unused_Rsvd_Blk_Cnt_Tot,\n        NAND_Writes_1GiB\n      - Suggestions: add *60 models for tp-smapi/acpi-call\n      - System Info: display boot mode UEFI / BIOS\n      - TLP Status:\n        - Display time and mode of tlp's last invocation\n        - Issue warning when systemd-rfkill[@].service is not masked\n      - Wireless: display type in interface list\n\n  * Bugfixes\n    - Issue #163: handle kernel with built-in acpi_call module properly\n    - Issue #170: battery discharge does not terminate on ThinkPad E-series\n    - Issue #172: TLP does not notice power source change\n    - Issue #175: do not touch wifi on shutdown when unconfigured\n    - Issue #176: optimize rdw locking heuristics\n    - tlp-stat: fix ata error count (filter \"DevExch\" caused by bay inserts)\n    - tp-smapi: do not load on unsupported ThinkPads\n    - Fix bash completion\n\n+++ 0.8 --- 05.08.2015 +++\n\n  * Features\n    General:\n      - TLP_DEFAULT_MODE: change default operation mode to AC when no power supply\n        can be detected (concerns some desktop and embedded hardware only)\n    Radio Devices:\n      - Resume: restore bluetooth state (derball2008)\n    Radio Device Wizard (tlp-rdw):\n      - Support ThinkPad OneLink Dock Basic/Pro for dock/undock events\n      - Detect systemd \"predictable network interface names\" for WWAN\n    ThinkPad Battery:\n      - tpacpi-bat: new upstream version 2.2: get ASL path from\n        /sys/class/power_supply/*/device/path; avoids unnecessary\n        \"AE_NOT_FOUND\" kernel messages\n      - tlp-stat:\n        - Show \"No batteries detected.\"\n        - Explain battery status \"Unknown\" as \"threshold effective\"\n        - Show battery cell group voltages (verbose mode, tp-smapi only)\n        - Show acpi-call suggestion for ThinkPad *40, *50, X1 models\n    USB:\n      - Remove USB_DRIVER_BLACKLIST (because of issues #147, #149, see below)\n    tlp-stat:\n      - Show warnings for ata errors by default\n\n  * Bugfixes\n    - Issue #123: tlp-stat: detect kernel config with PM_RUNTIME=N\n    - Issue #124: tlp recalibrate: fix exitcode check\n    - Issue #133: USB autosuspend: write power/control if actually changing only\n    - Ignore missing files in /proc/sys/fs/xfs (Gijs Hillenius)\n    - Issues #147, #149: fix udev event processing for AC/BAT switching\n      and USB hotplugging (required for udevd v221 and higher)\n\n+++ 0.7 --- 29.01.2015 +++\n\n  * Features\n    Processor:\n    - Limit max/min P-state to control power dissipation of the CPU\n      (intel_pstate only)\n    - Set performance versus energy savings policy (x86_energy_perf_policy)\n    USB:\n    - USB_DRIVER_BLACKLIST: exclude devices assigned to the listed drivers\n      from USB autosuspend; default: usbhid\n    - USB_BLACKLIST_WWAN: match internal driver list instead of USB vendor ids\n    - USB_WHITELIST: include devices into USB autosuspend even if\n      already excluded by the driver or WWAN blacklists\n    Radio devices:\n    - DEVICES_TO_ENABLE_ON_AC/DISABLE_ON_BAT/DISABLE_ON_BAT_NOT_IN_USE:\n      enable/disable radio devices upon change of power source\n      (excluding connected devices)\n    ThinkPad Battery:\n    - Issue #105: provide proper return codes for all battery functions\n    - Issue #106: setcharge allowed on battery power\n    - Do not activate new thresholds with force_discharge anymore (tp-smapi)\n    - tpacpi-bat: support for ThinkPad E325 charge thresholds\n    Misc:\n    - RUNTIME_PM_DRIVER_BLACKLIST: exclude PCI(e) devices assigned to drivers;\n      default: radeon, nouveau (solves issue #94)\n    - Support Dell Latitude docks\n    tlp-stat:\n      - New options -d|--disk, -e|--pcie, -p|--processor,\n                    -s|--system, -u|--usb\n      - Show driver and connection state for all enabled radio devices\n      - Show driver name in Runtime PM PCI(e) device list\n      - Show type and state of docks and device bays\n      - Show type of init system\n      - Check if TLP's systemd services are enabled (zenox)\n\n  * Bugfixes\n    Udev:\n    - Run change of power source in a detached subshell to avoid blocking udev\n    - Fix dock/undock event processing for ThinkPad Adv Mini Dock and Ultrabase\n    - Make USB device event processing more robust\n      - Run in a detached subshell to avoid blocking udev\n      - Wait 2s for subdevices to populate for proper black/whitelist detection\n    Misc:\n    - Support for NM 0.9.10 (Debian Jessie)\n    - Issue #109: tlp-stat: report \"unknown\" power source when no AC detected\n    - Issue #98: do not change autosuspend_delay_ms, keep kernel default\n      settings (garyp)\n    - Exclude pseudo usb disks (Raphaël Halimi)\n\n  * Misc\n    - Add AUTHORS file\n\n+++ 0.6 --- 06.10.2014 +++\n\n  * Features\n    - Set systemd service type to simple, allows tlp service\n      to start asynchronously in the background (Timofey)\n    - Remove DISABLE_TPACPIBAT from configuration\n    - Remove DEVICES_TO_ENABLE_ON_RADIOSW from configuration because\n      it's deprecated: works with Ubuntu 12.04/Kernel 3.2 only\n    - Enable RUNTIME_PM_ALL by default\n    - Do not touch kernel settings if param is empty or commented:\n        DISK_IDLE_SECS_ON, MAX_LOST_WORK_SECS_ON,\n        SCHED_POWERSAVE_ON, NMI_WATCHDOG,\n        SATA_LINKPWR_ON, PCIE_ASPM_ON,\n        RADEON_DPM_STATE_ON, RADEON_POWER_PROFILE_ON,\n        WIFI_PWR_ON, SOUND_POWER_SAVE_ON, RUNTIME_PM_ON.\n    - DISK_APM_LEVEL_ON, DISK_SPINDOWN_TIMEOUT_ON, DISK_IOSCHED:\n      use _ or keep to skip the setting for a particular disk\n    - tlp-stat\n      - Consider changed sysfs paths for i915 enable_rc6/fbc\n        as of kernel 3.15 (M@C)\n      - Consider changed sysfs paths for hwmon coretemp/sensors\n        as of kernel 3.15/3.16\n      - Report speed of all fans, not just the first one\n      - Show warning for kernel sata errors (possibly) caused by\n        SATA_LINKPWR_ON_BAT/AC=min/medium power\n      - Retrieve trace output from systemd journal if present\n    - Do not disable TLP when laptop-mode-tools is detected,\n      just output a warning about possible conflicts\n\n  * Bugfixes\n    - Issue #74: Makefile: remove tlp-nop in uninstall-tlp target\n      (beatinho, peterkenji94)\n    - Issue #86: tlp-stat: don't suggest tp-smapi on non-ThinkPad\n      hardware with thinkpad_acpi loaded (sayantandas)\n    - tlp-stat: do not show /proc/acpi/ibm/fan on Lenovo non-ThinkPad\n      models (Qasim)\n\n+++ 0.5 --- 24.03.2014 +++\n\n  * Features\n    - tpacpi-bat: auto detection of all ThinkPad models (v2.1)\n    - tlp-stat: include newer models in tpacpi-bat suggestions\n    - tlp-rdw: support newer docks\n    - Handle special case where BAT1 = main battery\n      (Thinkpad Edge/L/S series)\n    - Issue #61: sound power save depending on power source ac/bat\n    - Issue #62: don't touch devices in RUNTIME_PM_BLACKLIST or excluded\n      by RUNTIME_PM_ALL=0\n\n  * Bugfixes\n    - run-on-ac/bat: check if command exists\n    - Issue #59: do not write sata link power when not configured\n    - Fix RESTORE_DEVICE_STATE_ON_STARTUP (fabio)\n    - Restore bay power state upon resume only when on bat power\n      and the setting is active (xudabit)\n    - Use nmcli before rfkill to change radio state; re-enable wifi\n      on shutdown when not explicitly configured (Ubuntu 14.04)\n\n  * Packaging\n    - Create symlinks instead of hardlinks for bluetooth/wifi/wwan,\n      run-on-ac/bat\n    - Makefile: new params TLP_*\n    - tlp.init: remove requirement $all\n\n+++ 0.4.1 --- 02.01.2014 +++\n\n  * Bugfix version (_not_ for Ubuntu/Debian)\n\n  * Features\n    - tpacpi-bat: support ThinkPad E431\n\n  * Bugfixes\n    - Bug #43: tlp-rdw not working with NM 0.9.9/Fedora 20 (wofritz)\n    - Bug #44: run-on-ac|bat: remove dependency on pm-utils/on_ac_power\n\n+++ 0.4 --- 17.09.2013 +++\n\n  * Features\n    - New radeon dynamic power management (dpm); needs Kernel >= 3.11\n      (Pali Rohár)\n    - RUNTIME_PM_BLACKLIST: exclude listed pci(e) device addresses\n      from Runtime PM (wofritz)\n    - USB_BLACKLIST_WWAN: exclude wwan devices from usb autosuspend;\n      works for ids 05c6:* 0bdb:* 1199:* only\n    - Apply ac settings for faster shutdown\n\n\n+++ 0.3.11 --- 10.09.2013 +++\n\n  *** Testing version (for Arch Linux) ***\n\n  * Bugfixes\n    - Issue #42:\n      - Remove dependency to on_ac_power (part of pm-utils in\n        Arch Linux)\n      - Fix udev rule to detect power source change ac - bat\n\n  * Packaging\n    - Pull request #40: systemd: start tlp.service after\n      local-fs.target instead of graphical.target (cprussin)\n\n+++ 0.3.10 --- 17.08.2013 +++\n\n  *** Testing version (for Arch Linux) ***\n\n  * Architecture\n    - Issue #36: detect change of power source via udev instead of being\n      called by pm-powersave\n    - Handle suspend/resume w/o pm-utils in systemd environments:\n      - Encapsulate suspend/resume tasks as a tlp subcommand\n      - Add tlp-sleep.service to call tlp suspend/resume\n      - Remove 48tlp-rdw.lock because it doesn't work as expected\n\n  * Features\n    - Issue #31: detect and use intel_pstate driver to control\n      turbo mode (ValdikSS)\n    - Disable wol for all ethernet devices i.e. non-eth0 (blafoo)\n    - tpacpi-bat:\n      - merge upstream support for ThinkPad T430u, Edge E335/E530\n\n  * Bugfixes\n    - Issue #28: do not touch dirty_(background_)ratio anymore,\n          i.e. revert setting to kernel defaults\n\n  * Packaging\n    - debian/control: remove ${shlibs:Depends}\n\n+++ 0.3.9 --- 02.05.2013 +++\n\n  * Features\n    - tpacpi-bat:\n      - merge upstream w/ support for ThinkPad (Edge) S430\n      - add support for ThinkPad L530\n    - tlp-stat:\n      - Subtract offset 128 from threshold values on ThinkPad Edge S430\n      - Show /sys/class/power_supply/BATx/cycle_count = 0 as \"(unsupported)\"\n  * Bugfixes\n    - Issue #14: tlp recalibrate fails when /bin/sh -> bash (slyon)\n    - Bug #42: X121e battery functions not working (Jlp)\n    - Set more reasonable values for dirty_ratio/dirty_background_ratio\n    - Reverse order of writing the thresholds upon system start\n      to stop - start, to achieve a consistent tlp-stat output between\n      tlp init/start and tlp setcharge on quirky Edge and L series.\n    - tlp-stat:\n      - Fix threshold output trailing empty line\n\n +++ 0.3.8.1-3 --- 07.04.2013 +++\n\n  * Packaging\n    - Fix #41: postinst/postrm fails without acpid (Petit Carlin)\n        - recommends: acpid\n        - postinst/rm: ignore missing acpid\n\n+++ 0.3.8.1 --- 29.03.2013 ***\n\n  * Packaging\n    - Remove obsolete desktop autostart hook\n    - New format for debian/copyright\n    - Add dummy case construct to tlp.init to make lintian happy\n    - Rename tlp-init.service to tlp.service\n    - postinst/postrm: restart acpid for thinkpad-radiosw event\n    - Move smartmontools to \"recommends:\"\n\n  * Features\n    - New options CPU_BOOST_ON_* for cpu turbo boost (Linux 3.7 or later)\n    - New option DEVICES_TO_ENABLE_ON_RADIOSW to enable only selected radios\n      when wireless radio switch is turned on (Ubuntu + ThinkPad only)\n    - [EXPERIMENTAL] New option RUNTIME_PM_ALL to activate runtime pm for\n      all PCI(e) devices\n    - tpacpi-bat: new upstream version (25.03.2013, commit dd5a682)\n        - add support for X121e, L430, E420s, S420\n    - tlp chargeonce: charge battery to upper threshold once\n    - tlp discharge: show current power consumption\n    - tlp-stat:\n        - Nicer output, code refactored\n        - Remove dmidecode – get DMI data from /sys/class/dmi/id/\n        - When ASPM policy is not writable, show \"using bios prefs\"\n        - Show interpretation for i915 params\n        - Show disk status\n        - Show tp-smapi, tpacpi-bat availability and status\n        - Show cpu model\n        - Resolve all pci device classes (new subcommand tlp-pcilist)\n        - Show suggestions to install missing kernel modules/tools\n    - Use iw for wifi power save if available, iwconfig is considered deprecated\n    - Remove obsolete tlp wifi subcommand\n    - Remove 2s delay in applying settings upon change of the power source\n\n  * Bugfixes\n    - tlp-stat:\n        - Exclude usb media from \"Storage Devices\" section\n        - Fix display of data in /sys/class/power_supply/BAT?/\n\n+++ 0.3.7.1 --- 17.08.2012 +++\n\n  * Bug fixes\n    - #39: tlp-stat: /sys/devices/platform/coretemp.0/temp1_input\n           does not exist (Laurent Bonnaud)\n\n+++ 0.3.7 --- 13.08.2012 +++\n\n  * Packaging\n    - implement startup/shutdown code as a command: tlp init\n    - systemd support: tlp-init.service\n    - deb recommends: tlp-rdw; suggests: acpi-call, tp-smapi\n  * Features\n    - Battery charge thresholds for Sandy Bridge and later models\n      (X220/T420/...) by means of tpacpi-bat\n    - Use tpacpi-bat even when tp-smapi is not available; for\n      Ivy Bridge models (X230/T430/...)\n    - DEVICES_TO_ENABLE_ON_SHUTDOWN to prevent other operating systems\n      from missing radios\n    - DEVICES_TO_ENABLE_ON_STARTUP\n    - tlp-stat:\n      - show TRIM capabilty for SSDs\n      - add SMART attributes (179, 241)\n      - new cmdline options -r, -t, -T\n      - show cpu temp, fan speed even if /proc/acpi/ibm/{thermal|fan}\n        are not available\n      - show tp_smapi/power_avg\n  * Bug fixes\n    - #34: system start hangs in Fedora 17 (DigitalFlow)\n    - #35: shutdown results in reboot; new config param\n           USB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN (Thubo)\n    - #38: wifi on/off not working with ipw2100/2200 (kristatos)\n\n+++ 0.3.6-2 --- 24.03.2012 +++\n\n  * Packaging:\n    - Fix tlp.postinst for systems without upstart dir /etc/init/\n\n+++ 0.3.6 --- 22.03.2014 +++\n\n  * Features\n    - handle usb autosuspend via udev events\n    - usb hid detection overhauled (based on subdev/bInterfaceClass)\n    - Restrict runtime pm to a safe subclass of pci devices\n      (from Ubuntu Precise's implementation of pm-utils)\n    - Restore radio device state on system startup (from previous shutdown)\n    - Radio device wizard: switch radios upon network connect/disconnect\n      and dock/undock events (samba)\n    - Set cpu scaling governor and mix/max frequencies (Alex Lochmann)\n    - tlp-stat: add smart attributes for samsung ssd\n    - tlp-stat: show settings\n  * Packaging\n    - postinst/postrm:\n      - disable power.d/harddrive, pci_devices, readahead,\n          usb_bluetooth (Package pm-utils, Ubuntu 12.04)\n      - disable conflicting upstart jobs (Package rfkill, Ubuntu 12.04)\n    - split package\n      - tlp: power save functions\n      - tlp-rdw: radio device wizard (depends on network manager)\n  * Bug Fixes\n    - tlp-usblist: cleanup code, add pragmas \"strict\" and \"warnings\" (dywisor)\n    - Remove setting of ext3/4 fs commit timeout (see LP #900923)\n\n+++ 0.3.5 --- 19.12.2011 +++\n\n  * Features\n    - tlp recalibrate = fullcharge + discharge\n    - tlp-stat: show thinkpad fan speed, battery model, power_now,\n                i915: powersave, lvds_downclock\n    - tlp-stat: usb output refactored, new subcommand tlp-usblist\n    - tlp-stat: show kernel cmdline\n    - added non-rfkill device ipw2100 (kristatos)\n\n  * Bug Fixes\n    - #27: tlp-stat complains about missing /proc/acpi/ibm/thermal and\n           start_charge_thresh on X220/T420(s) et al. (Esc)\n    - Check if start_charge_thresh, stop_charge_thresh, force_discharge\n      are writable\n    - #28: further mitigate race with gdm when disabling radios\n           in init script (blackbox)\n    - #29: tlp-stat: remove smartctl garbage output (SirVival)\n    - #30: suppress dmidecode error output (kristatos)\n    - iterate over all sched_powersave instances\n    - i915: rc6/fbc features removed\n    - Start upowerd in init script\n    - #32: show error message suggesting to uninstall latop-mode-tools\n           if present (Kuzoku)\n\n+++  0.3.4 --- 05.12.2014 +++\n\n  * Features\n    - Intel graphics: rc6 power save mode, frame buffer compression\n\n+++ 0.3.3 --- 19.09.2011 +++\n\n  * Features\n    - tlp-stat: show hdd temp SMART values (bassplayer)\n    - enable/disable kernel NMI watchdog\n\n  * Other changes\n    - set_charge_thresholds(): check for undefined thresh values\n    - set_extfs_commit(): skip bind mounts (Fedora sandbox)\n    - zztlp: check param; show help text\n\n  * Bug Fixes\n    - #24: openSUSE 11.4/2.6.37: writing to autosuspend_delay_ms fails,\n             fallback to autosuspend\n    - #25: fix sched_mc_power_savings on bat\n    - #26: tlp-stat complains about missing dmidecode (Sara)\n\n\n+++ 0.3.2-2 --- 11.07.2011 +++\n\n  * Bug Fix\n    - #23: init.d script not linked/unlinked by install/purge (LePatron)\n\n+++ 0.3.2 --- 04.07.2011 +++\n\n  * Bug Fix\n    - #22: runtime pm causes shutdown to fail, reboots instead (fabio)\n           disabled by default\n\n+++ 0.3.1 --- 23.06.2011 +++\n\n  * Changes to ease porting to other distros\n    - removed system utils absolute paths\n    - added PATH debug output in tlp, tlp.init/tlp.upstart\n    - manpages moved from debian/ to man/\n\n  * Features, other changes\n    - runtime pm (ccyx)\n    - set/disable hard disk spindown timeout (enrico65, hausmarke86)\n    - use power/autosuspend_delay_ms (kernel >= 2.6.38)\n    - tlp-stat: now runs with root privilege only,\n        show intel ssd specific smart values,\n        check for pcie aspm disabled by kernel\n    - bluetooth/wifi/wwan: when using rfkill, check for root privilege\n        or /dev/rfkill user-writable\n    - tlp/bluetooth/wifi/wwan: bash completion\n\n  * Bug Fixes\n    - #18: tlp start (ac): incorrect ouptut \"started in bat mode\"\n           fixed (yatpu)\n    - #19: tlp-stat: incorrect wifi power mgmt detection for\n           wl driver (DrPaulaner)\n    - #20: handle disabled pcie aspm in kernel 2.6.39 gracefully\n           (Schmitti, g3eB4Y)\n    - #21: battery attributes /sys/class/power_supply/BAT?/charge_*\n           not recognized (tanjapetri)\n\n+++ 0.3.0-2 --- 20.03.2011 +++\n\n  * Bug Fixes\n    - DEVICES_TO_DISABLE_ON_STARTUP (Debian): startup code fixed;\n      SysV-script depends on $syslog now\n\n*** 0.3.0 --- 18.03.2011 ***\n\n  * Bug Fixes\n    - Switch wwan off before suspend\n      (workaround for kernel/network-manager quirk)\n\n  * Features\n    - Specify DISK_DEVICES with id's from /dev/disk/by-id (egalus)\n    - tlp diskid: show disk id's\n    - DISK_IOSCHED: set i/o scheduler (egalus)\n    - PCIe ASPM\n    - Do not set START_CHARGE_THRESH on tp_smapi-capable ThinkPad Edge\n    - SCHED_POWERSAVE: cpu/sched_*_power_savings\n    - Set radeon clock speed via /sys/class/drm/card*/device/power_profile\n\n  * Packaging\n    - Move startup code from upstart back to init.d\n    - Move symlinking in /etc/pm/power.d/ to postinst/postrm\n    - Move /usr/lib/tlp/ to /usr/lib/tlp-pm/\n\n*** 0.2.8 --- 25.09.2010 ***\n\n  * Features\n    - USB_AUTOSUSPEND: exclude input devices (usbhid) w/o blacklist\n    - tlp-stat: indicate drivers in usb device list\n    - DISK_APM_LEVEL: support multiple devices (Stifflers_mom)\n    - maverick: override pm-utils power.d/ scripts with own functionality\n\n*** 0.2.7 --- 11.09.2010 ***\n\n  * Bug fixes\n    - usb autosuspend/tlp-stat not showing all usb devices\n    - #15: tlp-stat abort w/ ipw2200 (agape)\n    - #16: PHC_CONTROL written to all cpus/cores (pumpe et al.)\n\n  * Features\n    - charge thresholds: new command tlp setcharge (crishu)\n    - DEVICES_TO_DISABLE_ON_STARTUP: handle bluetooth in upstart job\n      (previously via desktop login)\n    - set usb autosuspend for wwan devices on ifup\n\n*** 0.2.6 --- 17.07.2010 ***\n\n  * Bugfixes\n    - tlp-stat: error checking get_ctrl_device, tlp-stat batinfo (mikar)\n    - #14: delayed login window (greeter) w/ USB_AUTOSUSPEND=1\n           (steveurkel, fishmac, saubaer)\n\n  * Features\n    - tlp fullcharge\n    - set_charge_thresholds on startup only, not on shutdown\n    - ext3/ext4 fs commit depending on MAX_LOST_WORK_SECS\n    - tlp-stat: check wifi power mgmt capability\n    - tlp-stat: display wifi driver\n\n*** 0.2.5-2 --- 17.05.2010 ***\n\n  * Bugfix/Package change\n    - Conflicts: pm-utils-powersave-policy\n    - powersave-policy-sata-link-power breaks pm-powersave w/ sata\n      controllers in compatible mode an pata controllers (LP# 514881).\n    - TLP implements same functionality as conflicting package anyway ...\n\n*** 0.2.5 --- 03.05.2010 ***\n\n  * Bugfixes\n    - #11: excessive boottime (+40s) w/ USB_SUSPEND=1 & USB_BLACKLIST=\"\"\n    - tlp-stat: display hard disk w/o apm as \"none/disabled\"\n\n  * Features\n    - bluetooth/wifi/wwan: toggle (#12, thatgui)\n    - changed usb autosuspend default: on\n    - wifi power management re-enabled on 2.6.32 w/ some adapters\n    - trace feature, output to syslog/debug (TLP_DEBUG)\n    - new variable BAY_DEVICE\n\n*** 0.2.4 --- 10.03.2010 ***\n\n  * Bugfixes\n    - #8: tlp-rf-func warnings on ThinkPad w/o bluetooth and wwan (woelffchen)\n    - #9: bayoff: ultrabay power on again after resume (linrunner)\n             -> script sleep.d/49bay added\n  * Features\n    - tlp: force battery discharge\n    - run-on-ac/run-on-bat\n\n*** 0.2.3 --- 07.03.2010 ***\n\n  * Bugfixes\n    - #7: bayoff - media not unmounted, drives != sr0 not recognized (linrunner)\n\n*** 0.2.2 --- 04.03.2010 ***\n\n  * Bugfixes\n    - #3: cannot re-enable bluetooth after disabling (M@C)\n    - #5: autoload tp_smapi (Starko)\n\n  * Features\n    - upstart integration\n    - tlp-stat: error checking improved\n    - poweroff ultrabay optical drive on battery\n    - support for ipw2200 radio enable/disable (karlitos)\n\n*** 0.2.1 --- 31.01.2010 ***\n\n  * Bugfixes\n    - #1: pm-suspend/pm-hibernate hang w/o wwan device (Zaphod_42)\n    - #2: error messages from set_sata_link_power() w/o sata-ahci or ide (quarf)\n  * tlp-stat: more info\n\n*** 0.2.0 --- 30.01.2010 ***\n\n  * Initial public release\n"
        },
        {
          "name": "completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "de.linrunner.tlp.metainfo.xml",
          "type": "blob",
          "size": 1.6357421875,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n\n<component>\n\n  <id>de.linrunner.tlp</id>\n  <metadata_license>MIT</metadata_license>\n  <name>TLP</name>\n\n  <summary>Save battery power on laptops</summary>\n  <description>\n    <p>\n      TLP is an advanced power management tool for Linux. It comes with a\n      default configuration already optimized for battery life. At the same\n      time it is highly customizable to fulfil specific user requirements.\n    </p>\n    <p>\n      TLP supplies separate settings profiles for AC and battery power and can\n      enable or disable bluetooth, WiFi and WWAN radio devices upon system\n      startup.\n    </p>\n    <p>\n      For ThinkPads it provides a unified way to configure charging thresholds\n      and recalibrate the battery for all models which support it (via tp-smapi\n      or acpi-call).\n    </p>\n    <p>\n      TLP is a pure command line tool with automated background tasks, it does\n      not contain a GUI.\n    </p>\n  </description>\n\n  <categories>\n    <category>System</category>\n  </categories>\n\n  <!-- Do we want software centers to automatically launch TLP ? -->\n  <!-- <launchable type=\"service\">tlp</launchable> -->\n\n  <project_license>GPL-2.0+</project_license>\n  <developer_name>Thomas Koch</developer_name>\n  <url type=\"homepage\">https://linrunner.de/tlp</url>\n\n  <provides>\n    <!-- Match \"Portable\" chassis type -->\n    <modalias>dmi:*:ct8:*</modalias>\n    <!-- Match \"Laptop\" chassis type -->\n    <modalias>dmi:*:ct9:*</modalias>\n    <!-- Match \"Notebook\" chassis type -->\n    <modalias>dmi:*:ct10:*</modalias>\n    <!-- Match \"battery\" kernel module -->\n    <modalias>acpi:PNP0C0A:*</modalias>\n  </provides>\n\n</component>\n"
        },
        {
          "name": "defaults.conf",
          "type": "blob",
          "size": 1.6044921875,
          "content": "# /usr/share/tlp/defaults.conf - TLP intrinsic defaults\n# IMPORTANT: do not edit this file, put your settings in /etc/tlp.conf or\n#            /etc/tlp.d/*.conf instead!\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\nTLP_ENABLE=1\nTLP_WARN_LEVEL=3\nTLP_MSG_COLORS=\"91 93 1 92\"\nTLP_PERSISTENT_DEFAULT=0\nDISK_IDLE_SECS_ON_AC=0\nDISK_IDLE_SECS_ON_BAT=2\nMAX_LOST_WORK_SECS_ON_AC=15\nMAX_LOST_WORK_SECS_ON_BAT=60\nCPU_ENERGY_PERF_POLICY_ON_AC=balance_performance\nCPU_ENERGY_PERF_POLICY_ON_BAT=balance_power\nNMI_WATCHDOG=0\nDISK_DEVICES=\"nvme0n1 sda\"\nDISK_APM_LEVEL_ON_AC=\"254 254\"\nDISK_APM_LEVEL_ON_BAT=\"128 128\"\nDISK_APM_CLASS_DENYLIST=\"usb ieee1394\"\nDISK_IOSCHED=\"keep keep\"\nSATA_LINKPWR_ON_AC=\"med_power_with_dipm\"\nSATA_LINKPWR_ON_BAT=\"med_power_with_dipm\"\nAHCI_RUNTIME_PM_ON_AC=on\nAHCI_RUNTIME_PM_ON_BAT=auto\nAHCI_RUNTIME_PM_TIMEOUT=15\nPCIE_ASPM_ON_AC=default\nPCIE_ASPM_ON_BAT=default\nRADEON_DPM_PERF_LEVEL_ON_AC=auto\nRADEON_DPM_PERF_LEVEL_ON_BAT=auto\nRADEON_POWER_PROFILE_ON_AC=default\nRADEON_POWER_PROFILE_ON_BAT=default\nAMDGPU_ABM_LEVEL_ON_AC=0\nAMDGPU_ABM_LEVEL_ON_BAT=1\nWIFI_PWR_ON_AC=off\nWIFI_PWR_ON_BAT=on\nWOL_DISABLE=Y\nSOUND_POWER_SAVE_ON_AC=1\nSOUND_POWER_SAVE_ON_BAT=1\nSOUND_POWER_SAVE_CONTROLLER=Y\nBAY_POWEROFF_ON_AC=0\nBAY_POWEROFF_ON_BAT=0\nBAY_DEVICE=\"sr0\"\nRUNTIME_PM_ON_AC=on\nRUNTIME_PM_ON_BAT=auto\nRUNTIME_PM_DRIVER_DENYLIST=\"mei_me nouveau radeon xhci_hcd\"\nUSB_AUTOSUSPEND=1\nUSB_EXCLUDE_AUDIO=1\nUSB_EXCLUDE_BTUSB=0\nUSB_EXCLUDE_PHONE=0\nUSB_EXCLUDE_PRINTER=1\nUSB_EXCLUDE_WWAN=0\nRESTORE_DEVICE_STATE_ON_STARTUP=0\nRESTORE_THRESHOLDS_ON_BAT=0\nNATACPI_ENABLE=1\nTPSMAPI_ENABLE=1\n"
        },
        {
          "name": "deprecated.conf",
          "type": "blob",
          "size": 0.5048828125,
          "content": "DEVICES_TO_DISABLE_ON_SHUTDOWN # Parameter was removed\nDEVICES_TO_ENABLE_ON_SHUTDOWN # Parameter was removed\nRADEON_POWER_PROFILE_ON_AC # Parameter is deprecated: feature will be removed with the next release\nRADEON_POWER_PROFILE_ON_BAT # Parameter is deprecated: feature will be removed with the next release\nSCHED_POWERSAVE_ON_AC # Parameter was removed: obsolete since kernel 3.5\nSCHED_POWERSAVE_ON_BAT # Parameter was removed: obsolete since kernel 3.5\nUSB_AUTOSUSPEND_DISABLE_ON_SHUTDOWN # Parameter was removed\n"
        },
        {
          "name": "func.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "man-rdw",
          "type": "tree",
          "content": null
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "rename.conf",
          "type": "blob",
          "size": 0.56640625,
          "content": "CPU_HWP_ON_AC                   CPU_ENERGY_PERF_POLICY_ON_AC\nCPU_HWP_ON_BAT                  CPU_ENERGY_PERF_POLICY_ON_BAT\nSATA_LINKPWR_BLACKLIST          SATA_LINKPWR_DENYLIST\nRUNTIME_PM_BLACKLIST            RUNTIME_PM_DENYLIST\nRUNTIME_PM_DRIVER_BLACKLIST     RUNTIME_PM_DRIVER_DENYLIST\nUSB_BLACKLIST                   USB_DENYLIST\nUSB_BLACKLIST_BTUSB             USB_EXCLUDE_BTUSB\nUSB_BLACKLIST_PHONE             USB_EXCLUDE_PHONE\nUSB_BLACKLIST_PRINTER           USB_EXCLUDE_PRINTER\nUSB_BLACKLIST_WWAN              USB_EXCLUDE_WWAN\nUSB_WHITELIST                   USB_ALLOWLIST\n"
        },
        {
          "name": "tlp-func-base.in",
          "type": "blob",
          "size": 33.3779296875,
          "content": "#!/bin/sh\n# tlp - Base Functions\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# shellcheck disable=SC2034\n\n# ----------------------------------------------------------------------------\n# Constants\n\nreadonly TLPVER=\"@TLPVER@\"\n\nreadonly RUNDIR=@TLP_RUN@\nreadonly VARDIR=@TLP_VAR@\n\nreadonly CONF_DEF=@TLP_CONFDEF@\nreadonly CONF_DIR=@TLP_CONFDIR@\nreadonly CONF_USR=@TLP_CONFUSR@\nreadonly CONF_OLD=@TLP_CONF@\nreadonly CONF_RUN=\"$RUNDIR/run.conf\"\n\nreadonly FLOCK=flock\nreadonly HDPARM=hdparm\nreadonly LAPMODE=laptop_mode\nreadonly LOGGER=logger\nreadonly MKTEMP=mktemp\nreadonly MODPRO=modprobe\nreadonly READCONFS=@TLP_TLIB@/tlp-readconfs\nreadonly SYSTEMCTL=systemctl\nreadonly TPACPIBAT=@TPACPIBAT@\nreadonly UDEVADM=udevadm\n\nreadonly TLPRDW=tlp-rdw\n\nreadonly LOCKFILE=$RUNDIR/lock\nreadonly LOCKTIMEOUT=2\n\nreadonly PWRRUNFILE=$RUNDIR/last_pwr\nreadonly MANUALMODEFILE=$RUNDIR/manual_mode\n\nreadonly DMID=/sys/class/dmi/id/\nreadonly NETD=/sys/class/net\nreadonly TPACPID=/sys/devices/platform/thinkpad_acpi\n\nreadonly RE_PARAM='^[A-Z_]+[0-9]*=[-0-9a-zA-Z _.:]*$'\n\n# power supplies: ignore MacBook Pro 2017 sbs-charger, ThinkPad X13s ARM qcom-battmgr-ac, hid devices, game controllers\nreadonly RE_PS_IGNORE='sbs-charger|qcom-battmgr-ac|hidpp_battery|hid-|controller-battery-|controller_battery_'\n\nreadonly DEBUG_TAGS_ALL=\"arg bat cfg disk lock nm path pm ps rf run sysfs udev usb\"\n\nreadonly TLP_SERVICES=\"tlp.service\"\nreadonly PPD_SERVICE=\"power-profiles-daemon.service\"\nreadonly RFKILL_SERVICES=\"systemd-rfkill.service systemd-rfkill.socket\"\n\n# ----------------------------------------------------------------------------\n# Control\n\n_nodebug=0\n\n# ----------------------------------------------------------------------------\n# Functions\n\n# -- Exit\n\ndo_exit () { # cleanup and exit  -- $1: rc\n    # remove temporary runconf\n    [ -z \"$_conf_tmp\" ] || rm -f -- \"$_conf_tmp\"\n\n    exit \"$1\"\n}\n\n# --- Messages\n\necho_debug () { # write trace message to syslog if tag matches -- $1: tag; $2: msg;\n    [ \"$_nodebug\" = \"1\" ] && return 0\n\n    if wordinlist \"$1\" \"$TLP_DEBUG\"; then\n        $LOGGER -p debug -t \"tlp\" --id=$$ -- \"$2\" > /dev/null 2>&1\n    fi\n}\n\ncprintf_init () {\n    # preset ANSI sequences for colorized message output\n    # retval: $_cprintf_color_err\n    #         $_cprintf_color_warn\n    #         $_cprintf_color_note\n    #         $_cprintf_color_succ\n    #         $_cprintf_color_dbg\n    #         $_cprintf_color_rst\n\n    # proceed only when external printf command exists\n    if [ -n \"$TLP_MSG_COLORS\" ]; then\n        # shellcheck disable=SC2086\n        set -- $TLP_MSG_COLORS\n        # note: dash internal printf does *not* support '\\x1b' notation for ESC\n        is_uint \"$1\" 3 && _cprintf_color_err=\"\\033[1;${1}m\"\n        is_uint \"$2\" 3 && _cprintf_color_warn=\"\\033[1;${2}m\"\n        is_uint \"$3\" 3 && _cprintf_color_note=\"\\033[1;${3}m\"\n        is_uint \"$4\" 3 && _cprintf_color_succ=\"\\033[1;${4}m\"\n        is_uint \"$5\" 3 && _cprintf_color_dbg=\"\\033[1;${5}m\"\n        _cprintf_color_rst=\"\\033[0m\"\n    fi\n}\n\ncprintf () {\n    # printf colorized message to stdout\n    # color is selected by class from $1 or, if the argument is left blank, by the message prefix\n    # $1: message class: err/warning/notice/debug\n    # $2: printf format string == message\n    # $3..n: printf arguments\n    # prerequisite: cprintf_init()\n\n    local class color fmt\n\n    class=\"$1\"; shift\n    fmt=\"$1\"; shift\n    if [ -z \"$class\" ]; then\n        # explicit class not specified -> cut out message prefix preceding \": \"\n        case \"${fmt}\" in\n            Error*)   class=\"err\" ;;\n            Warning*) class=\"warning\" ;;\n            Notice*)  class=\"notice\" ;;\n            Debug*)   class=\"debug\" ;;\n        esac\n    fi\n    case \"$class\" in\n        err)     color=\"$_cprintf_color_err\" ;;\n        warning) color=\"$_cprintf_color_warn\" ;;\n        notice)  color=\"$_cprintf_color_note\" ;;\n        success) color=\"$_cprintf_color_succ\" ;;\n        debug)   color=\"$_cprintf_color_dbg\" ;;\n        *)       color=\"\" ;;\n    esac\n\n    if  [ -n \"$color\" ] && [ -t 1 ]; then\n        # color is specd and output is a terminal (not a pipe)\n        # shellcheck disable=SC2059\n        printf \"${color}${fmt}${_cprintf_color_rst}\" \"$@\"\n    else\n        # shellcheck disable=SC2059\n        printf \"$fmt\" \"$@\"\n    fi\n\n    return 0\n}\n\ncecho () {\n    # echo colorized message to stdout, terminated by LF\n    # color is selected by the message prefix\n    # $1: message string\n    # $2: message class: err/warning/notice/debug\n    # prerequisite: cprintf_init()\n    cprintf \"$2\" \"$1\\n\"\n}\n\necho_message () {\n    # output message according to TLP_MSG_LEVEL\n    # $1: message\n    # $2: message class/log level for syslog: : err/warning/notice/debug/info\n\n    local msg\n    local class\n\n    msg=\"$1\"\n    class=\"$2\"\n\n    # shellcheck disable=SC2154\n    if [ \"$_bgtask\" = \"1\" ]; then\n        # called from background task --> use syslog\n        if [ -z \"$class\" ]; then\n            # explicit class not specified -> cut out message prefix preceding \": \"\n            case \"${msg%: *}\" in\n                Error)   class=\"err\" ;;\n                Warning) class=\"warning\" ;;\n                Notice)  class=\"notice\" ;;\n                Debug)   class=\"debug\" ;;\n                *)       class=\"info\" ;;\n            esac\n        fi\n\n        if [ -n \"$msg\" ]; then\n            case \"$TLP_WARN_LEVEL\" in\n                1|3) $LOGGER -p \"$class\" -t \"tlp\" --id=$$ -- \"$msg\" > /dev/null 2>&1 ;;\n            esac\n        fi\n    else\n        # called from command line task --> use stderr\n        case \"$TLP_WARN_LEVEL\" in\n            2|3)\n                # shellcheck disable=SC2059\n                cecho \"$msg\" \"$class\" 1>&2\n                ;;\n        esac\n    fi\n}\n\nprint_version () {\n    echo \"TLP version $TLPVER\"\n}\n\n# --- Strings\n\ntolower () { # print string in lowercase -- $1: string\n    printf \"%s\" \"$1\" | tr \"[:upper:]\" \"[:lower:]\"\n}\n\ntoupper () { # print string in uppercase -- $1: string\n    printf \"%s\" \"$1\" | tr \"[:lower:]\" \"[:upper:]\"\n}\n\nwordinlist () { # test if word in list\n                # $1: word, $2: whitespace-separated list of words\n    local word\n\n    if [ -n \"${1-}\" ]; then\n        for word in ${2-}; do\n            [ \"${word}\" != \"${1}\" ] || return 0 # exact match\n        done\n    fi\n\n    return 1 # no match\n}\n\n# --- Sysfiles\n\nread_sysf () {\n    # read and print contents of a sysfile\n    # return 1 and print default if read fails\n    # $1: sysfile\n    # $2: default\n    # rc: 0=ok/1=error\n    if cat \"$1\" 2> /dev/null; then\n        return 0\n    else\n        printf \"%s\" \"$2\"\n        return 1\n    fi\n}\n\nreadable_sysf () {\n    # check if sysfile is actually readable\n    # $1: file\n    # rc: 0=readable/1=read error\n    cat \"$1\" > /dev/null 2>&1\n}\n\nread_sysval () {\n    # read and print contents of a sysfile\n    # print '0' if file is non-existent, read fails or content is non-numeric\n    # $1: sysfile\n    # rc: 0=ok/1=error\n    printf \"%d\" \"$(read_sysf \"$1\")\" 2> /dev/null\n}\n\nwrite_sysf () { # write string to a sysfile\n    # $1: string\n    # $2: sysfile\n    # rc: 0=ok/1=error\n    { printf '%s\\n' \"$1\" > \"$2\"; } 2> /dev/null\n}\n\n# --- Globbing\n\nglob_files () {\n    # @stdout glob_files ( glob_pattern, dir[, dir...] )\n    #\n    # Nested loop that applies a glob expression to several directories\n    # (or path prefixes) and prints matching file paths (including symlinks)\n    # to stdout.\n    #\n    # NOTE: for x in $(glob_files 'a*' dirpath ); do ...; done\n    # globs twice:\n    #   (a) once in the \"for file_iter\" loop in glob_files()\n    #   (b) another time when x gets word expanded in the \"for x\" loop\n    # crafted filenames (e.g. a file named '*') will break this function,\n    # as such it should be only be used with 'sort-of trustworthy' directories\n    # (sysfs, proc).\n\n    [ -n \"${1-}\" ] || return 64\n    local glob_pattern file_iter\n    local rc=1\n\n    glob_pattern=\"${1}\"\n\n    while shift && [ $# -gt 0 ]; do\n        for file_iter in ${1}${glob_pattern}; do\n            if [ -f \"${file_iter}\" ] || [ -L \"${file_iter}\" ]; then\n                printf '%s\\n' \"${file_iter}\"\n                rc=0\n            fi\n        done\n    done\n\n    return $rc\n}\n\nglob_dirs () {\n    # @stdout glob_dirs ( glob_pattern, dir[, dir...] )\n    #\n    # Nested loop that applies a glob expression to several directories\n    # (or path prefixes) and prints matching directory paths to stdout.\n    #\n    # NOTE: globs twice, see glob_files().\n\n    [ -n \"${1-}\" ] || return 64\n    local glob_pattern dir_iter\n    local rc=1\n\n    glob_pattern=\"${1}\"\n\n    while shift && [ $# -gt 0 ]; do\n        for dir_iter in ${1}${glob_pattern}; do\n            if [ -d \"${dir_iter}\" ]; then\n                printf '%s\\n' \"${dir_iter}\"\n                rc=0\n            fi\n        done\n    done\n\n    return $rc\n}\n\n# --- Checks\n\ncmd_exists () {\n    # test if command exists -- $1: command\n    command -v \"$1\" > /dev/null 2>&1\n}\n\ntest_root () {\n    # test root privilege -- rc: 0=root, 1=not root\n    [ \"$(id -u)\" = \"0\" ]\n}\n\ncheck_root () {\n    # show error message and quit when root privilege missing\n    if ! test_root; then\n        cecho \"Error: missing root privilege.\" 1>&2\n        do_exit 1\n    fi\n}\n\ncheck_tlp_enabled () {\n    # check if TLP is enabled in config file\n    # $1: 1=verbose (default: 0)\n    # rc: 0=disabled/1=enabled\n\n    if [ \"$TLP_ENABLE\" = \"1\" ]; then\n        return 0\n    else\n        [ \"${1:-0}\" = \"1\" ] && cecho \"Error: TLP power save is disabled. Set TLP_ENABLE=1 in ${CONF_USR}.\" 1>&2\n        return 1\n    fi\n}\n\ncheck_rdw_installed () {\n    cmd_exists \"$TLPRDW\"\n}\n\ncheck_systemd () {\n    # check if systemd is the active init system (PID 1) and systemctl is installed\n    # rc: 0=yes, 1=no\n    [ -d /run/systemd/system ] && cmd_exists $SYSTEMCTL\n}\n\ncheck_service_state () {\n    # check service state\n    # $1: service\n    # $2: state match: active/enabled/masked\n    # rc: 0=yes, 1=no\n    case \"$2\" in\n        active)  $SYSTEMCTL is-active \"$1\" > /dev/null 2>&1 ;;\n        enabled) $SYSTEMCTL is-enabled \"$1\" > /dev/null 2>&1 ;;\n        masked)  $SYSTEMCTL is-enabled \"$1\" 2> /dev/null | grep -q 'masked' ;;\n    esac\n}\n\ncheck_ppd_active () {\n    # check if power-profiles-daemon.service is running\n    # rc: 0=yes, 1=no\n    check_service_state \"$PPD_SERVICE\" active\n}\n\ncheck_services_activation_status () {\n    # issue messages for\n    # - TLP service(s) not enabled\n    # - conflicting services enabled\n    # rc: 0=no messages/messages issued\n\n    local rc=0\n\n    if check_systemd; then\n        cnt=0\n        for su in $TLP_SERVICES; do\n            if ! check_service_state \"$su\" enabled > /dev/null 2>&1 ; then\n                echo_message \"Error: TLP's power saving will not apply on boot because $su is not enabled \"`\n                            `\"--> Invoke 'systemctl enable $su' to ensure the full functionality of TLP.\" \"err\"\n                echo_message \"\"\n                rc=1\n            fi\n        done\n        for su in $RFKILL_SERVICES; do\n            if ! check_service_state \"$su\" masked 2> /dev/null; then\n                if [ \"$RESTORE_DEVICE_STATE_ON_STARTUP\" = \"1\" ]; then\n                    echo_message \"Warning: TLP's radio device switching on boot may not work as expected because \"`\n                                `\"RESTORE_DEVICE_STATE_ON_STARTUP=1 is configured and $su is not masked \"`\n                                `\"--> Invoke 'systemctl mask $su' to ensure the full functionality of TLP.\" \"err\"\n                    echo_message \"\"\n                elif [ -n \"$DEVICES_TO_DISABLE_ON_STARTUP\" ] || [ -n \"$DEVICES_TO_ENABLE_ON_STARTUP\" ]; then\n                    echo_message \"Warning: TLP's radio device switching on boot may not work as expected because \"`\n                                `\"DEVICES_TO_DISABLE_ON_STARTUP or DEVICES_TO_ENABLE_ON_STARTUP \"`\n                                `\"is configured and $su is not masked \"`\n                                `\"--> Invoke 'systemctl mask $su' to ensure the full functionality of TLP.\" \"err\"\n                    echo_message \"\"\n                fi\n                rc=1\n            fi\n        done\n    fi\n\n    return $rc\n}\n\n# --- Type and value checking\n\nis_uint () { # check for unsigned integer -- $1: string; $2: max digits\n    printf \"%s\" \"$1\" | grep -E -q \"^[0-9]{1,$2}$\" 2> /dev/null\n}\n\nis_within_bounds () { # check condition min <= value <= max\n    # $1: value; $2: min; $3: max (all unsigned int)\n    # rc: 0=within/1=below/2=above/255=invalid\n    #\n    # value, min or max undefined/non-numeric means that this branch of the\n    # condition is fulfilled\n\n    is_uint \"$1\" || return 255\n    if is_uint \"$2\"; then\n        [ \"$1\" -ge \"$2\" ] || return 1\n    fi\n    if is_uint \"$3\"; then\n        [ \"$1\" -le \"$3\" ] || return 2\n    fi\n\n    return  0\n}\n\n# --- Locking and Semaphores\n\nset_run_flag () { # set flag -- $1: flag name\n                  # rc: 0=success/1,2=failed\n    local rc\n\n    create_rundir\n    touch \"$RUNDIR/$1\"; rc=$?\n    echo_debug \"lock\" \"set_run_flag.touch: $1; rc=$rc\"\n\n    return $rc\n}\n\nreset_run_flag () { # reset flag -- $1: flag name\n    if rm \"$RUNDIR/$1\" 2> /dev/null 1>&2 ; then\n        echo_debug \"lock\" \"reset_run_flag($1).remove\"\n    else\n        echo_debug \"lock\" \"reset_run_flag($1).not_found\"\n    fi\n\n    return 0\n}\n\ncheck_run_flag () { # check flag -- $1: flag name\n                    # rc: 0=flag set/1=flag not set\n    local rc\n\n    [ -f \"$RUNDIR/$1\" ]; rc=$?\n    echo_debug \"lock\" \"check_run_flag($1): rc=$rc\"\n\n    return $rc\n}\n\nlock_tlp () { # get exclusive lock: blocking with timeout\n              # $1: lock id (default: tlp)\n              # rc: 0=success/1=failed\n\n    create_rundir\n    # open file for writing and attach fd 9\n    # when successful lock fd 9 exclusive and blocking\n    # wait $LOCKTIMEOUT secs to obtain the lock\n    if { exec 9> \"${LOCKFILE}_${1:-tlp}\" ; } 2> /dev/null && timeout $LOCKTIMEOUT $FLOCK -x 9 ; then\n        echo_debug \"lock\" \"lock_tlp($1).success\"\n        return 0\n    else\n        echo_debug \"lock\" \"lock_tlp($1).failed\"\n        return 1\n    fi\n}\n\nlock_tlp_nb () { # get exclusive lock: non-blocking\n                 # $1: lock id (default: tlp)\n                 # rc: 0=success/1=failed\n\n    create_rundir\n    # open file for writing and attach fd 9\n    # when successful lock fd 9 exclusive and non-blocking\n    if { exec 9> \"${LOCKFILE}_${1:-tlp}\" ; } 2> /dev/null && $FLOCK -x -n 9 ; then\n        echo_debug \"lock\" \"lock_tlp_nb($1).success\"\n        return 0\n    else\n        echo_debug \"lock\" \"lock_tlp_nb($1).failed\"\n        return 1\n    fi\n}\n\nunlock_tlp () { # free exclusive lock\n                # $1: lock id (default: tlp)\n\n    # defer unlock for $X_DEFER_UNLOCK seconds -- debugging only\n    [ -n \"$X_DEFER_UNLOCK\" ] && sleep \"$X_DEFER_UNLOCK\"\n\n    # free fd 9 and scrap lockfile\n    { exec 9>&- ; } 2> /dev/null\n    rm -f \"${LOCKFILE}_${1:-tlp}\"\n    echo_debug \"lock\" \"unlock_tlp($1)\"\n\n    return 0\n}\n\nlockpeek_tlp () { # check for pending lock (by looking for the lockfile)\n                  # $1: lock id (default: tlp)\n    if [ -f \"${LOCKFILE}_${1:-tlp}\" ]; then\n        echo_debug \"lock\" \"lockpeek_tlp($1).locked\"\n        return 0\n    else\n        echo_debug \"lock\" \"lockpeek_tlp($1).not_locked\"\n        return 1\n    fi\n}\n\necho_tlp_locked () { # print \"locked\" message\n    cecho \"Error: TLP is locked by another operation.\" 1>&2\n    return 0\n}\n\nset_timed_lock () { # create timestamp n seconds in the future\n    # $1: lock id, $2: lock duration [s]\n    local lock rc time\n\n    lock=\"${1}_timed_lock_$(date +%s -d \"+${2} seconds\")\"\n    set_run_flag \"$lock\"; rc=$?\n    echo_debug \"lock\" \"set_timed_lock($1, $2): $lock; rc=$rc\"\n\n    # cleanup obsolete locks\n    time=$(date +%s)\n    for lockfile in \"$RUNDIR/${1}_timed_lock_\"*; do\n        if [ -f \"$lockfile\" ]; then\n            locktime=\"${lockfile#\"${RUNDIR}/${1}_timed_lock_\"}\"\n            if [ \"$time\" -ge \"$locktime\" ]; then\n                rm -f \"$lockfile\"\n                echo_debug \"lock\" \"set_timed_lock($1, $2).remove_obsolete: ${lockfile#\"${RUNDIR}/\"}\"\n            fi\n        fi\n    done\n\n    return $rc\n}\n\ncheck_timed_lock () { # check if active timestamp exists\n    # $1: lock id; rc: 0=locked/1=not locked\n    local lockfile locktime time\n\n    time=$(date +%s)\n    for lockfile in \"$RUNDIR/${1}_timed_lock_\"*; do\n        if [ -f \"$lockfile\" ]; then\n            locktime=${lockfile#\"${RUNDIR}/${1}_timed_lock_\"}\n            if [ \"$time\" -lt $(( locktime - 120 )) ]; then\n                # timestamp is more than 120 secs in the future,\n                # something weird has happened -> remove it\n                rm -f \"$lockfile\"\n                echo_debug \"lock\" \"check_timed_lock($1).remove_invalid: ${lockfile#\"${RUNDIR}/\"}\"\n            elif [ \"$time\" -lt \"$locktime\" ]; then\n                # timestamp in the future -> we're locked\n                echo_debug \"lock\" \"check_timed_lock($1).locked: $time, $locktime\"\n                return 0\n            else\n                # obsolete timestamp -> remove it\n                rm -f \"$lockfile\"\n                echo_debug \"lock\" \"check_timed_lock($1).remove_obsolete: ${lockfile#\"${RUNDIR}/\"}\"\n            fi\n        fi\n    done\n\n    echo_debug \"lock\" \"check_timed_lock($1).not_locked: $time\"\n    return 1\n}\n\n# --- Environment\nprint_shell () { # determine the shell executing this script\n    readlink -n \"/proc/$$/exe\"\n}\n\nadd_sbin2path () { # check if /sbin /usr/sbin in $PATH, otherwise add them\n                   # retval: $PATH, $_oldpath, $_addpath\n    local sp\n\n    _oldpath=\"$PATH\"\n    _addpath=\"\"\n\n    for sp in /usr/sbin /sbin; do\n        if [ -d $sp ] && [ ! -h $sp ]; then\n            # dir exists and is not a symlink\n            case \":$PATH:\" in\n                *\":$sp:\"*) # $sp already in $PATH\n                    ;;\n\n                *) # $sp not in $PATH, add it\n                    _addpath=\"$_addpath:$sp\"\n                    ;;\n            esac\n        fi\n    done\n\n    if [ -n \"$_addpath\" ]; then\n      export PATH=\"${PATH}${_addpath}\"\n    fi\n\n    return 0\n}\n\n# --- Directories and Files\ncreate_rundir () { # make sure $RUNDIR exists\n    [ -d $RUNDIR ] || mkdir -p $RUNDIR 2> /dev/null 1>&2\n}\n\nchmod_readable4all () { # make file world readable -- $1: file\n    chmod -f o+r \"$1\"\n}\n\n# -- Battery Plugins\n\nselect_batdrv () { # source battery feature drivers and\n                   # activate the one that matches the hardware\n\n    # do not execute twice\n    # shellcheck disable=SC2154\n    [ -z \"$_batdrv_selected\" ] || return 0\n\n    # iterate until a matching driver is found\n    for batdrv in @TLP_BATD@/[0-9][0-9]-[a-z]*; do\n        # shellcheck disable=SC1090\n        . \"$batdrv\" || exit 70\n\n        # end iteration when a matching driver is found\n        batdrv_init && break\n    done\n\n    return 0\n}\n\n# --- Configuration\n\nread_config () { # read all config files and write temporary runconf file\n    # $1: 0=continue/1=quit on error\n    # $2: 1=no trace\n    # rc: 0=ok/5=tlp.conf missing/6=defaults.conf missing/7=file creation error\n    # retval: config parameters;\n    #         _conf_tmp: runconf\n    local rc=0\n    local tmpdir\n\n    if test_root; then\n        tmpdir=$RUNDIR\n        create_rundir\n    else\n        tmpdir=${TMPDIR:-/tmp}\n    fi\n    if _conf_tmp=$($MKTEMP -p \"$tmpdir\" \"tlp-run.conf_tmpXXXXXX\"); then\n        # external perl script: merge all config files to $cf\n        if [ \"$2\" = \"1\" ]; then\n            $READCONFS --outfile \"$_conf_tmp\" --notrace; rc=$?\n        else\n            $READCONFS --outfile \"$_conf_tmp\"; rc=$?\n        fi\n        # shellcheck disable=SC1090\n        [ $rc -eq 0 ] && . \"$_conf_tmp\"\n    else\n        rc=7\n    fi\n\n    if [ $rc -ne 0 ]; then\n        case $rc in\n            5) cecho \"Error: cannot read user configuration from $CONF_USR or $CONF_OLD.\" 1>&2 ;;\n            6) cecho \"Error: cannot read default configuration from $CONF_DEF.\" 1>&2 ;;\n            7) cecho \"Error: cannot write runtime configuration to $_conf_tmp.\" 1>&2 ;;\n        esac\n        if [ \"$1\" = \"1\" ]; then\n            do_exit $rc\n        fi\n    fi\n\n    return 0\n}\n\nparse_args4config () { # parse command-line arguments: everything after the\n                       # delimiter '--' is interpreted as a config parameter\n    # retval: config parameters\n    local argd=\"\" cfgd=\"\" dflag=0 param value\n\n    # iterate arguments\n    while [ $# -gt 0 ]; do\n        if [ $dflag -eq 1 ]; then\n            # delimiter was passed --> sanitize and parse argument:\n            #   quotes stripped by the shell calling tlp\n            #   format is PARAMETER=value\n            #   PARAMETER allows 'A'..'Z' and '_' only, may end in a number (_BAT0)\n            #   value allows  'A'..'Z', 'a'..'z', '0'..'9', ' ', '-', '_', '.', ':'\n            #   value may be an empty string\n            if printf \"%s\" \"$1\" | grep -E -q \"$RE_PARAM\"; then\n                param=\"${1%%=*}\"\n                value=\"${1#*=}\"\n                if [ -n \"$param\" ]; then\n                    eval \"$param='$value'\" 2> /dev/null\n                    cfgd=\"$cfgd $param=\"\"$value\"\"\"\n                fi\n            fi\n        elif [ \"$1\" = \"--\" ]; then\n            # delimiter reached --> begin interpretation\n            dflag=1\n        else\n            argd=\"$argd $1\"\n        fi\n        shift # next argument\n    done # while arguments\n    echo_debug \"arg\" \"parse_args4config: ${0##/*/}$argd --$cfgd\"\n\n    return 0\n}\n\nsave_runconf () { # copy temporary to final runconf\n    create_rundir\n    if cp --preserve=timestamps \"$_conf_tmp\" $CONF_RUN > /dev/null 2>&1; then\n        chmod 664 \"$_conf_tmp\" $CONF_RUN > /dev/null 2>&1\n        echo_debug \"run\" \"save_runconf.ok: $_conf_tmp -> $CONF_RUN\"\n    else\n        echo_debug \"run\" \"save_runconf.failed: $_conf_tmp -> $CONF_RUN\"\n    fi\n}\n\n# --- Kernel\n\nkernel_version_ge () { # check if running kernel version >= $1: minimum version\n\n    [ \"$1\" = \"$(printf \"%s\\n%s\\n\" \"$1\" \"$(uname -r)\" | sort -V | head -n 1)\" ]\n}\n\nload_modules () { # load kernel module(s) -- $*: modules\n    local mod\n\n    # verify module loading is allowed (else explicitly disabled)\n    # and possible (else implicitly disabled)\n    [ \"${TLP_LOAD_MODULES:-y}\" = \"y\" ] && [ -e /proc/modules ] || return 0\n\n    # load modules, ignore any errors\n    # shellcheck disable=SC2048\n    for mod in $*; do\n        $MODPRO \"$mod\" > /dev/null 2>&1\n    done\n\n    return 0\n}\n\n# --- DMI\n\nread_dmi () { # read DMI data\n    # $1: dmi id\n    # stdout: dmi string\n    # rc: 0=ok/1=nonexistent\n\n    local out\n\n    out=\"$(read_sysf \"${DMID}/$1\" | \\\n            grep -E -v -i 'not available|to be filled|DMI table is broken')\"\n    printf '%s' \"$out\"\n    if [ -n \"$out\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n# --- Power Source\n\nget_sys_power_supply () {\n    # determine active power supply\n    # $1: command\n    # rc: 0=ac/1=battery/2=unknown\n    # retval: $_syspwr == rc\n    #         $_psdev: 1st power supply found (for udev rule check)\n    #\n    # examine all power supply devices in lexical order, typically this is:\n    #   AC, ADPx (AC chargers) -> BATx, CMBx (batteries) -> ucsi* (USB).\n    # names in $RE_PS_IGNORE are ignored.\n    #\n    # the ranking of power source classes for the determination of the active\n    # power supply is as follows:\n    #   1. AC chargers\n    #   2. Batteries\n    #   3. USB\n    # $TLP_PS_IGNORE may be used to ignore one or more power source classes\n\n    local bs ps_ignore psrc psrc_name\n    local ac0seen=\n    local wait=\n    _psdev=\"\"\n\n    _syspwr=\"$X_SIMULATE_PS\"\n    if [ -n \"$_syspwr\" ]; then\n        # simulate power supply\n        echo_debug \"ps\" \"get_sys_power_supply.simulate: syspwr=$_syspwr\"\n        return \"$_syspwr\"\n    fi\n\n    ps_ignore=$(toupper \"$TLP_PS_IGNORE\")\n    for psrc in /sys/class/power_supply/*; do\n        # -f $psrc/type not necessary - read_sysf() handles this\n        psrc_name=\"${psrc##*/}\"\n\n        # ignore atypical power supplies and batteries\n        printf '%s\\n' \"$psrc_name\" | grep -E -q \"$RE_PS_IGNORE\" && continue\n\n        case \"$(read_sysf \"$psrc/type\")\" in\n            Mains)\n                # AC detected\n                _psdev=\"${_psdev:-$psrc}\"\n                # if configured, skip device to ignore incorrect AC status\n                if wordinlist \"AC\" \"$ps_ignore\"; then\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).ac_ignored: syspwr=$_syspwr\"\n                    continue\n                fi\n\n                # check AC status\n                if [ \"$(read_sysf \"$psrc/online\")\" = \"1\" ]; then\n                    # AC online --> end iteration\n                    _syspwr=0\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).ac_online: syspwr=$_syspwr\"\n                    break\n                else\n                    # AC offine --> end iteration\n                    _syspwr=1\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).ac_offline: syspwr=$_syspwr\"\n                    break\n                fi\n                ;;\n\n            USB)\n                # USB PS detected\n                _psdev=\"${_psdev:-$psrc}\"\n                # if configured, skip device to ignore incorrect AC status\n                if wordinlist \"USB\" \"$ps_ignore\"; then\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).usb_ignored: syspwr=$_syspwr\"\n                    continue\n                fi\n\n                # check USB PS status\n                if [ \"$(read_sysf \"$psrc/online\")\" = \"1\" ]; then\n                    # USB online --> end iteration\n                    _syspwr=0\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).usb_online: syspwr=$_syspwr\"\n                    break\n                else\n                    # USB PS offline could mean battery, but multiple connectors may exist\n                    # --> remember and continue looking\n                    ac0seen=1\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).remember_usb_offline\"\n                fi\n                ;;\n\n            Battery)\n                # battery detected\n                _psdev=\"${_psdev:-$psrc}\"\n                # if configured, skip device to ignore incorrect battery status\n                if wordinlist \"BAT\" \"$ps_ignore\"; then\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).bat_ignored: syspwr=$_syspwr\"\n                    continue\n                fi\n\n                # check battery status\n                bs=\"$(read_sysf \"$psrc/status\")\"\n                if [ \"$bs\" != \"Discharging\" ] && [ \"$1\" = \"auto\" ] && [ -z \"$wait\" ]; then\n                    # when command is 'tlp auto', not \"Discharging\" might be caused by lagging battery status updates\n                    # --> recheck every 0.1 secs for 1.5 secs (or user value in deciseconds) max\n                    # use delay loop only once\n                    wait=\"$X_PS_WAIT_DS\"\n                    is_uint \"$wait\" 2 || wait=15\n                    echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).bat_not_discharging_recheck: bs=$bs; syspwr=$_syspwr; wait=$wait\"\n                    while [ \"$wait\" -gt 0 ]; do\n                        sleep 0.1\n                        wait=$((wait - 1))\n                        bs=\"$(read_sysf \"$psrc/status\")\"\n                        [ \"$bs\" = \"Discharging\" ] && break\n                    done\n                fi\n                case \"$bs\" in\n                    Discharging)\n                        if ! lockpeek_tlp tlp_discharge; then\n                            # battery status \"Discharging\" means battery mode ...\n                            _syspwr=1\n                            echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).bat_discharging: syspwr=$_syspwr; wait=$wait\"\n                        else\n                            # ... unless forced discharge is in progress, which means AC\n                            _syspwr=0\n                            echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).forced_discharge: syspwr=$_syspwr; wait=$wait\"\n                        fi\n                        break # --> end iteration\n                        ;;\n\n                    *) # assume AC mode for everything else, e.g. \"Charging\", \"Full\", \"Not charging\", \"Unknown\"\n                       # --> continue looking because there may be multiple batteries\n                        _syspwr=0\n                        echo_debug \"ps\" \"get_sys_power_supply(${psrc_name}).bat_not_discharging: bs=$bs; syspwr=$_syspwr; wait=$wait\"\n                        ;;\n                esac\n                ;;\n\n            *) # unknown power source type --> ignore\n                ;;\n        esac\n    done\n\n    if [ -z \"$_syspwr\" ]; then\n        # _syspwr result yet undecided\n        if [ \"$ac0seen\" = \"1\" ]; then\n            # AC offline remembered --> battery mode\n            _syspwr=1\n            echo_debug \"ps\" \"get_sys_power_supply(${ac0seen##/*/}).ac_offline_remembered: syspwr=$_syspwr\"\n        else\n            # we have seen neither a AC nor a battery power source --> unknown mode\n            _syspwr=2\n            echo_debug \"ps\" \"get_sys_power_supply.none_found: syspwr=$_syspwr\"\n        fi\n    fi\n\n    return \"$_syspwr\"\n}\n\nget_persist_mode () { # get persistent operation mode\n    # rc: 0=persistent/1=not persistent\n    # retval: $_persist_mode (0=ac, 1=battery, none)\n    local rc=1\n    _persist_mode=\"none\"\n\n    if [ \"$TLP_PERSISTENT_DEFAULT\" = \"1\" ]; then\n        # persistent mode = configured default mode\n        case $(toupper \"$TLP_DEFAULT_MODE\") in\n            AC)  _persist_mode=0; rc=0 ;;\n            BAT) _persist_mode=1; rc=0 ;;\n        esac\n    fi\n\n    return $rc\n}\n\nis_laptop () { # check if machine is a laptop\n    # rc: 0=laptop/1=other/desktop\n    case \"$(read_dmi \"chassis_type\")\" in\n        8|9|10|11) return 0 ;;\n        *) return 1 ;;\n    esac\n}\n\nget_power_mode () {\n    # get current operation mode\n    # $1: command\n    # rc: 0=AC/1=battery\n    # similar to get_sys_power_supply(), but maps unknown power source to TLP_DEFAULT_MODE\n    # or returns persistent mode when enabled.\n    # if TLP_DEFAULT_MODE is unconfigured and power source is unknown, returns\n    # 1=BAT for laptop/0=AC for desktop/other.\n\n    get_sys_power_supply \"$1\"\n    local rc=$?\n\n    if get_persist_mode; then\n        # persistent mode\n        rc=$_persist_mode\n    else\n        # non-persistent mode, use current power source\n        if [ $rc -eq 2 ]; then\n            # unknown power supply, use configured default mode\n            case $(toupper \"$TLP_DEFAULT_MODE\") in\n                AC)  rc=0 ;;\n                BAT) rc=1 ;;\n                *) # unconfigured or invalid default mode -> check machine type\n                    if is_laptop; then\n                        rc=1 # laptop: assume BAT\n                    else\n                        rc=0 # desktop/other: assume AC\n                    fi\n                    ;;\n            esac\n        fi\n    fi\n\n    return $rc\n}\n\ncompare_and_save_power_state() { # compare $1 to last saved power state,\n    # save $1 afterwards when different\n    # $1: new state 0=ac, 1=battery\n    # rc: 0=different, 1=equal\n    local lp\n\n    # intercept invalid states\n    case $1 in\n        0|1) ;; # valid state\n        *) # invalid new state --> return \"different\"\n            echo_debug \"ps\" \"compare_and_save_power_state($1).invalid\"\n            return 0\n            ;;\n    esac\n\n    # read saved state\n    lp=$(read_sysf $PWRRUNFILE)\n\n    # compare\n    if [ -z \"$lp\" ] || [ \"$lp\" != \"$1\" ]; then\n        # saved state is nonexistent/empty or is different --> save new state\n        create_rundir\n        write_sysf \"$1\" $PWRRUNFILE\n        echo_debug \"ps\" \"compare_and_save_power_state($1).different: old=$lp\"\n        return 0\n    else\n        # touch file for last run\n        touch $PWRRUNFILE\n        echo_debug \"ps\" \"compare_and_save_power_state($1).equal\"\n        return 1\n    fi\n}\n\nclear_saved_power_state() { # remove last saved power state\n\n    rm -f $PWRRUNFILE 2> /dev/null\n\n    return 0\n}\n\ncheck_ac_power () { # check if ac power connected -- $1: function\n\n    if ! get_sys_power_supply ; then\n        echo_debug \"bat\" \"check_ac_power($1).no_ac_power\"\n        cecho \"Error: $1 is possible on AC power only.\" 1>&2\n        return 1\n    fi\n\n    return 0\n}\n\necho_started_mode () { # print operation mode -- $1: 0=ac mode, 1=battery mode\n    if [ \"$1\" = \"0\" ]; then\n        printf \"TLP started in AC mode\"\n    else\n        printf \"TLP started in battery mode\"\n    fi\n    if [ \"$_manual_mode\" != \"n\" ]; then\n        printf \" (manual).\\n\"\n    else\n        printf \" (auto).\\n\"\n    fi\n\n    return 0\n}\n\nset_manual_mode () { # set manual operation mode\n    # $1: 0=ac mode, 1=battery mode\n    # retval: $_manual_mode (0=ac, 1=battery)\n\n    if [ \"$1\" != \"0\" ] && [ \"$1\" != \"1\" ]; then\n        echo_debug \"pm\" \"set_manual_mode($1).invalid\"\n        return 1\n    fi\n\n    create_rundir\n    if write_sysf \"$1\" $MANUALMODEFILE; then\n        _manual_mode=\"$1\"\n        echo_debug \"pm\" \"set_manual_mode($1).ok\"\n        return 0\n    else\n        echo_debug \"pm\" \"set_manual_mode($1).write_error\"\n        return 1\n    fi\n}\n\nclear_manual_mode () { # remove manual operation mode\n    # retval: $_manual_mode (none)\n\n    rm -f $MANUALMODEFILE 2> /dev/null\n    _manual_mode=\"n\"\n\n    echo_debug \"pm\" \"clear_manual_mode\"\n    return 0\n}\n\nget_manual_mode () { # get manual operation mode\n    # rc: 0=active/1=inactive\n    # retval: $_manual_mode (0=ac, 1=battery, a=active, n=inactive)\n    local rc=1\n    _manual_mode=\"n\"\n\n    if [ -f $MANUALMODEFILE ]; then\n        # read mode file\n        if _manual_mode=$(read_sysf $MANUALMODEFILE); then\n            case $_manual_mode in\n                0|1) rc=0 ;;\n                *) _manual_mode=\"n\" ;;\n            esac\n        else\n            # cannot read mode file - possible cause:\n            #   tlp-stat -s is running without root privilege and the file is not world readable\n            #   because tlp ac/bat is invoked with sudo when creating the file and thereby a\n            #   restrictive umask applies; see https://github.com/linrunner/TLP/issues/702\n            # -> manual mode is active but operation mode cannot be determined\n            _manual_mode=\"a\"\n            rc=0\n        fi\n    fi\n    return $rc\n}\n"
        },
        {
          "name": "tlp-pcilist",
          "type": "blob",
          "size": 2.6005859375,
          "content": "#!/usr/bin/perl\n# tlp-pcilist - list pci devices with runtime pm mode and device class\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# Cmdline options\n#   --verbose: show Runtime PM device status\n\npackage tlp_pcilist;\nuse strict;\nuse warnings;\n\n# --- Modules\nuse Getopt::Long;\n\n# --- Global vars\nmy $verbose = 0;\n\n# --- Subroutines\n\n# Read content from a sysfile\n# $_[0]: input file\n# return: content / empty string if nonexistent or not readable\nsub catsysf {\n    my $fname = \"$_[0]\";\n    my $sysval = \"\";\n    if (open my $sysf, \"<\", $fname) {\n        chomp ($sysval = <$sysf>);\n        close $sysf;\n    }\n    return $sysval;\n}\n\n# Read device driver from DEVICE/uevent\n# $_[0]: (sub)device base path\n# return: driver / empty string if uevent nonexistent or not readable\nsub getdriver {\n    my $dpath = \"$_[0]\";\n    my $driver = \"\";\n    if ( open (my $sysf, \"<\", $dpath . \"/uevent\") ) {\n        # read file line by line\n        while (<$sysf>) {\n            # match line content and return DRIVER= value\n            if ( s/^DRIVER=(.*)/$1/ ) {\n                chomp ($driver = $_);\n                last; # break loop\n            }\n        }\n        close ($sysf);\n    }\n    return $driver\n}\n\n# --- MAIN\n# parse arguments\nGetOptions ('verbose' => \\$verbose);\n\n# Output device list with Runtime PM mode, status and device class\nforeach (`lspci -m`) {\n    # parse lspci output: get short PCI(e) id and long description of device\n    my ($dev, $classdesc) = /(\\S+) \\\"(.+?)\\\"/;\n    # join device path\n    my $devp = \"/sys/bus/pci/devices/0000:$dev\";\n    # control file for Runtime PM\n    my $devc = \"$devp/power/control\";\n    # status file for Runtime PM\n    my $devs = \"$devp/power/runtime_status\";\n    # get device class\n    my $class = catsysf (\"$devp/class\");\n    # get device driver\n    my $driver = getdriver (\"$devp\") || \"no driver\";\n\n    if (-f $devc) { # control file exists\n        # get device mode\n        my $pmode = catsysf (\"$devc\");\n        if ( $verbose ) {\n            # get device status\n            my $pstatus = catsysf (\"$devs\");\n            # output device mode, status and data\n            printf \"%s/power/control = %-4s, runtime_status = %-9s (%s, %s, %s)\\n\", $devp, $pmode, $pstatus, $class, $classdesc, $driver;\n        } else {\n            # output device mode and data\n            printf \"%s/power/control = %-4s (%s, %s, %s)\\n\", $devp, $pmode, $class, $classdesc, $driver;\n        }\n    } else { # control file missing --> output device data only\n        printf \"%s/power/control = (not available) (%s, %s, %s)\\n\", $devp, $class, $classdesc, $driver;\n    }\n}\n\nexit 0;\n"
        },
        {
          "name": "tlp-rdw-nm.in",
          "type": "blob",
          "size": 7.3154296875,
          "content": "#!/bin/sh\n# tlp-rdw - network manager dispatcher hook:\n#           enable/disable radios on ifup/ifdown\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/25-tlp-func-rf @TLP_FLIB@/30-tlp-func-rf-sw; do\n    # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- Functions\n\ncheck_switch_lock() { # switch listed radio devices\n    # and time-lock them afterwards if actually switched\n    # $1: device type where the event originated -- do nothing if its time-locked\n    # $2: list of device types to switch\n    # $3: on/off\n    local sw_rc type\n\n    # quit if the originating *radio* device is time-locked (not LAN)\n    [ \"$1\" != \"LAN\" ] && check_timed_lock \"${RDW_NM_LOCK}_$1\" && return 1\n\n    for type in $2; do\n        if [ -n \"$type\" ] && [ \"$type\" != \"$1\" ]; then\n            # device type is valid and not the originating one\n            # --> do switch with state change lock\n            device_switch \"$type\" \"$3\" \"${RDW_NM_LOCK}_${type}\" \"$RDW_NM_LOCKTIME\"; sw_rc=$?\n\n            if [ \"$sw_rc\" = \"4\" ]; then\n                # switch failed, NetworkManager may be \"asleep\" -> schedule repeat:\n                # open a detached subshell, wait 2 secs and respawn ourselves,\n                # no more than two repetitions.\n                case \"$repeats\" in\n                    \"\") repeats=\"2\" ;;\n                    2)  repeats=\"1\" ;;\n                    *)  repeats=\"\"  ;;\n                esac\n                if [ -n \"$repeats\" ]; then\n                    echo_debug \"nm\" \"+++ tlp_rdw_nm(${iface}).${action}.nm_seems_asleep: repeats=$repeats\"\n                    ( sleep 2; $0 \"$iface\" \"$action\" \"$repeats\" < /dev/null > /dev/null ) &\n                    do_exit 0\n                fi\n            fi\n        fi\n    done\n\n    return 0\n}\n\nsave_iface_type () { # save interface type -- $1: interface; $2: type\n    # rc: 0=saved/1=error\n    [ -d \"$NETD/$1\" ] && { printf '%s\\n' \"$2\" > \"$RUNDIR/${1}.itype\"; } 2> /dev/null\n    return $?\n}\n\nget_iface_type () { # get saved interface type -- $1: interface\n    # rc: 0=saved state found/1=not found\n    # retval: $itype\n    local rc\n\n    itype=$(read_sysf \"$RUNDIR/${1}.itype\"); rc=$?\n    rm -f \"$RUNDIR/${1}.itype\"\n    return $rc\n}\n\necho_env () {\n    # record environment\n    if [ \"$X_USB_ENV_TRACE\" = \"1\" ]; then\n        echo_debug \"nm\" \"tlp_rdw_nm.env: $(printenv)\"\n    fi\n}\n\n# --- MAIN\n# shellcheck disable=SC2034\n_bgtask=1\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\n\n# quit if TLP disabled\ncheck_tlp_enabled || do_exit 0\n\n# quit if RDW disabled\ncheck_run_flag \"$RDW_KILL\" && do_exit 0\nadd_sbin2path\n\n# get args\niface=\"$1\"\naction=\"$2\"\nrepeats=\"$3\"\nitype=\"\"\n\ncase \"$action\" in\n    up|down) # interface up/down\n        # quit for invalid interfaces\n        if [ -z \"$iface\" ] || [ \"$iface\" = \"none\" ]; then\n            echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}.no_interface\"\n            echo_env\n            do_exit 0\n        fi\n        #  quit for virtual interfaces (up action)\n        if [ \"$action\" = \"up\" ] && readlink \"$NETD/${iface}\" | grep -q '/virtual/'; then\n            # save type for down action where $NETD/$iface won't be there anymore\n            save_iface_type \"$iface\" virtual\n            echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}.ignore_virtual\"\n            echo_env\n            do_exit 0\n        fi\n\n        # get saved interface type (down action)\n        if [ \"$action\" = \"down\" ]; then\n            get_iface_type \"$iface\"\n\n            # quit for virtual interfaces\n            if [ \"$itype\" = \"virtual\" ]; then\n                echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}.ignore_virtual\"\n                do_exit 0\n            fi\n        fi\n\n        echo_debug \"nm\" \"+++ tlp_rdw_nm($iface).$action: repeats=$repeats\"\n        echo_env\n        # shellcheck disable=SC2154\n        if [ -n \"$_addpath\" ]; then\n            # shellcheck disable=SC2154\n            echo_debug \"path\" \"PATH=${_oldpath}[${_addpath}]\"\n        else\n            # shellcheck disable=SC2154\n            echo_debug \"path\" \"PATH=${_oldpath}\"\n        fi\n\n        # determine interface type\n        if [ -n \"$itype\" ]; then\n            # saved type available (down action)\n            echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}: type=$itype [saved]\"\n\n        elif cmd_exists \"$NMCLI\"; then\n            # no saved type but nmcli is available\n            # --> check if nmcli dev output matches interface\n            itype=\"$($NMCLI dev | awk '$1 ~ /^'\"$iface\"'$/ { print $2; }')\"\n\n            if [ -z \"$itype\" ]; then\n                # iface is not found in nmcli dev output: many WWAN devices have\n                # different devices for control and the actual network connection\n                # --> check if interface matches a WWAN device\n                get_wwan_ifaces\n                # shellcheck disable=SC2154\n                if wordinlist \"$iface\" \"$_wanifaces\"; then\n                    itype=\"wwan\"\n                else\n                    # fallback:\n                    # if interface type detection with nmcli failed, then try to\n                    # deduct it using interface name: it can happen if e.g.\n                    # usb network card is unplugged\n                    case \"$iface\" in\n                        en* | eth*)\n                            itype=\"ethernet\"\n                            ;;\n\n                        wl*)\n                            itype=\"wifi\"\n                            ;;\n\n                        ww*)\n                            itype=\"wwan\"\n                            ;;\n\n                        *)\n                            itype=\"unknown\"\n                            ;;\n                    esac\n                fi\n            fi\n\n            # save interface type (up action)\n            [ \"$action\" = \"up\" ] && save_iface_type \"$iface\" \"$itype\"\n\n            echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}: type=$itype [nmcli]\"\n\n        else\n            # nmcli is not available\n            itype=\"unknown\"\n            echo_debug \"nm\" \"tlp_rdw_nm($iface).${action}: type=$itype [none]\"\n        fi\n\n        case \"$action\" in\n            up) # interface up, disable configured interfaces\n\n                case $itype in\n                    *ethernet)\n                        check_switch_lock LAN \"$DEVICES_TO_DISABLE_ON_LAN_CONNECT\" off\n                        ;;\n\n                    *wireless|wifi)\n                        check_switch_lock wifi \"$DEVICES_TO_DISABLE_ON_WIFI_CONNECT\" off\n                        ;;\n\n                    gsm|wwan)\n                        check_switch_lock wwan \"$DEVICES_TO_DISABLE_ON_WWAN_CONNECT\" off\n                        ;;\n                esac\n                ;; # up\n\n            down) # interface down, enable configured interfaces\n                case $itype in\n                    *ethernet)\n                        check_switch_lock LAN \"$DEVICES_TO_ENABLE_ON_LAN_DISCONNECT\" on\n                        ;;\n\n                    *wireless|wifi)\n                        check_switch_lock wifi \"$DEVICES_TO_ENABLE_ON_WIFI_DISCONNECT\" on\n                        ;;\n\n                    gsm|wwan)\n                        check_switch_lock wwan \"$DEVICES_TO_ENABLE_ON_WWAN_DISCONNECT\" on\n                        ;;\n                esac\n                ;; # down\n\n        esac\n        ;; # up/down\n\n    *)\n        # other calls: do nothing\n        ;;\n\nesac # action\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-rdw-udev.in",
          "type": "blob",
          "size": 2.9189453125,
          "content": "#!/bin/sh\n# tlp-rdw - handle dock/undock events\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/25-tlp-func-rf @TLP_FLIB@/30-tlp-func-rf-sw; do\n        # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- MAIN\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\n\ncheck_tlp_enabled || do_exit 0\ncheck_run_flag \"$RDW_KILL\" && do_exit 0\nadd_sbin2path\n\n# get power source\nget_sys_power_supply\n\n# get device/type\nddev=/sys$1\ndevtype=$2\n\ncase $devtype in\n    dock)\n        # check if type is \"dock_station\", quit if not\n        type=$(read_sysf \"$ddev/type\")\n        [ \"$type\" = \"dock_station\" ] || do_exit 0\n\n        docked=$(read_sysf \"$ddev/docked\")\n        action=$EVENT\n\n        # shellcheck disable=SC2154\n        echo_debug \"udev\" \"+++ rdw_udev($devtype).$action dev=$ddev type=$type docked=$docked syspwr=$_syspwr\"\n        ;;\n\n    usb_dock)\n        # shellcheck disable=SC2153\n        case $ACTION in\n            add)    action=\"dock\"  ;;\n            remove) action=\"undock\"  ;;\n        esac\n\n        echo_debug \"udev\" \"+++ rdw_udev($devtype).$action dev=$ddev syspwr=$_syspwr\"\n        ;;\n\n    *) do_exit 0 ;; # unknown device type\nesac\n\n# quit if timed lock in progress\nif check_timed_lock \"$RDW_DOCK_LOCK\" ; then\n    echo_debug \"udev\" \"rdw_udev.locked\"\n    do_exit 0\nfi\n\ncase $action in\n    dock) # laptop was docked\n\n        # lock for 2 seconds in case dock has multiple devices\n        set_timed_lock \"$RDW_DOCK_LOCK\" \"$RDW_NM_LOCKTIME\"\n\n        # enable configured radios (obey rdw nm locks too)\n        for dev in $DEVICES_TO_ENABLE_ON_DOCK; do\n            [ -n \"$dev\" ] && ! check_timed_lock \"${RDW_NM_LOCK}_${dev}\" \\\n                && device_switch \"$dev\" on \"${RDW_NM_LOCK}_${dev}\" \"$RDW_NM_LOCKTIME\"\n        done\n\n        # disable configured radios (obey rdw nm locks too)\n        for dev in $DEVICES_TO_DISABLE_ON_DOCK; do\n            [ -n \"$dev\" ] && ! check_timed_lock \"${RDW_NM_LOCK}_${dev}\" \\\n                && device_switch \"$dev\" off \"${RDW_NM_LOCK}_${dev}\" \"$RDW_NM_LOCKTIME\"\n        done\n        ;;\n\n    undock) # laptop was undocked\n\n        # lock for 2 seconds in case dock has multiple devices\n        set_timed_lock \"$RDW_DOCK_LOCK\" \"$RDW_NM_LOCKTIME\"\n\n        # enable configured radios (obey rdw nm locks too)\n        for dev in $DEVICES_TO_ENABLE_ON_UNDOCK; do\n            [ -n \"$dev\" ] && ! check_timed_lock \"${RDW_NM_LOCK}_${dev}\" \\\n                && device_switch \"$dev\" on \"${RDW_NM_LOCK}_${dev}\" \"$RDW_NM_LOCKTIME\"\n        done\n\n        # disable configured radios (obey rdw nm locks too)\n        for dev in $DEVICES_TO_DISABLE_ON_UNDOCK; do\n            [ -n \"$dev\" ] && ! check_timed_lock \"${RDW_NM_LOCK}_${dev}\" \\\n                && device_switch \"$dev\" off \"${RDW_NM_LOCK}_${dev}\" \"$RDW_NM_LOCKTIME\"\n        done\n        ;;\n\n    *) ;; # unknown action -> do nothing\nesac\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-rdw.in",
          "type": "blob",
          "size": 1.0390625,
          "content": "#!/bin/sh\n# tlp-rdw - enable/disable RDW\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/25-tlp-func-rf @TLP_FLIB@/30-tlp-func-rf-sw; do\n    # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- MAIN\n# shellcheck disable=SC2034\n_bgtask=1\n\ncarg1=\"$1\"\nif [ \"$carg1\" = \"--version\" ]; then\n    print_version\n    exit 0\nfi\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\nparse_args4config \"$@\"\ncprintf_init\n\ncase $carg1 in\n    \"\")\n        if check_run_flag \"$RDW_KILL\"; then\n            echo \"tlp-rdw: disabled.\"\n        else\n            echo \"tlp-rdw: enabled.\"\n        fi\n        ;;\n\n    enable)\n        check_root\n        reset_run_flag \"$RDW_KILL\"\n        echo \"tlp-rdw: enabled.\"\n        ;;\n\n    disable)\n        check_root\n        set_run_flag \"$RDW_KILL\"\n        echo \"tlp-rdw: disabled.\"\n        ;;\n\n    *)\n        echo \"Usage: tlp-rdw [ enable | disable ]\"\n        do_exit 3\n\nesac\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-rdw.rules.in",
          "type": "blob",
          "size": 2.048828125,
          "content": "# tlp-rdw - udev rules\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Dock/undock events\n\n# ThinkPad Advanced Mini Dock (and all older models), ThinkPad UltraBase\nACTION==\"change\", SUBSYSTEM==\"platform\", KERNEL==\"dock.*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p dock\"\n\n# ThinkPad Mini Dock (Plus) Series 3\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/100a/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad Pro Dock [P/N 40A1]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/1012/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad Ultra Dock [P/N 40A2]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/1010/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad OneLink Pro Dock (USB3 Gigabit LAN interface) [P/N 40X1E]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/304b/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/304f/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad OneLink Dock [P/N 40X1A9]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/3049/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad OneLink Dock Plus [P/N 40A4]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/3054/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad Pro Dock \"CS18\" [P/N 40AH]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/306f/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# ThinkPad USB-C Dock Gen 2 [P/N 40AS]\nACTION==\"add|remove\", SUBSYSTEM==\"usb\", ENV{DEVTYPE}==\"usb_device\", ENV{PRODUCT}==\"17ef/a396/*\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n\n# Thunderbolt docks\nACTION==\"add|remove\", SUBSYSTEM==\"thunderbolt\", ENV{DEVTYPE}==\"thunderbolt_device\", ENV{USB4_TYPE}==\"hub\", RUN+=\"@TLP_ULIB@/tlp-rdw-udev %p usb_dock\"\n"
        },
        {
          "name": "tlp-readconfs.in",
          "type": "blob",
          "size": 7.7880859375,
          "content": "#!/usr/bin/perl\n# tlp-readconfs - read all of TLP's config files\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# Cmdline options\n#   --outfile <FILE>: filepath to contain merged configuration\n#   --notrace: disable trace\n#   --cdiff: only show differences to the default\n#\n# Return codes\n#   0: ok\n#   5: tlp.conf missing\n#   6: defaults.conf missing\n\npackage tlp_readconfs;\nuse strict;\nuse warnings;\n\n# --- Modules\nuse File::Basename;\nuse Getopt::Long;\n\n# --- Constants\nuse constant CONF_USR => \"@TLP_CONFUSR@\";\nuse constant CONF_DIR => \"@TLP_CONFDIR@\";\nuse constant CONF_DEF => \"@TLP_CONFDEF@\";\nuse constant CONF_REN => \"@TLP_CONFREN@\";\nuse constant CONF_DPR => \"@TLP_CONFDPR@\";\nuse constant CONF_OLD => \"@TLP_CONF@\";\n\n# Exit codes\nuse constant EXIT_TLPCONF => 5;\nuse constant EXIT_DEFCONF => 6;\n\n# --- Global vars\nmy @config_val = ();  # 2-dim array: parameter name, value, source, default-value\nmy %config_idx = ();  # hash: parameter name => index into the name-value array\n\nmy %rename = ();      # hash: OLD_PARAMETER => NEW_PARAMETER\nmy $renrex;           # compiled regex for renaming parameters\nmy $do_rename = 0;    # enable renaming (when $renrex not empty)\nmy %dprmsg = ();      # hash: PARAMETER => deprecated message\n\nmy $notrace = 0;\nmy $debug   = 0;\nmy $cdiff   = 0;\n\nmy $outfile;\n\nmy $defsrc = basename (CONF_DEF);\n\n# --- Subroutines\n\n# Format and write debug message\n# @_: printf arguments including format string\nsub printf_debug {\n    if ( ! $notrace && $debug ) {\n        open (my $logpipe, \"|-\", \"logger -p debug -t \\\"tlp\\\" --id=\\$\\$ --\") || return 1;\n        printf {$logpipe} @_;\n        close ($logpipe);\n    }\n\n    return 0;\n}\n\n# Store parameter name, value, source in array/hash\n# $_[0]: parameter name  (non-null string)\n# $_[1]: parameter value (maybe null string)\n# $_[2]: 0=replace/1=append parameter value\n# $_[3]: parameter source e.g. filepath + line no.\n# $_[4]: 0=user config/1=default\n# return: 0=new name/1=known name\nsub store_name_value_source {\n    my $name = $_[0];\n    my $value = $_[1];\n    my $append = $_[2];\n    my $source = $_[3];\n    my $is_def = $_[4];\n\n    $debug = 1 if ( $name eq \"TLP_DEBUG\" && $value =~ /\\bcfg\\b/ );\n\n    if ( defined $config_idx{$name} ) {\n        # existing name\n        if ( $append ) {\n            # append value, source\n            $config_val[$config_idx{$name}][1] .= \" $value\";\n            $config_val[$config_idx{$name}][2] .= \" & $source\";\n        } else {\n            # replace value, source\n            $config_val[$config_idx{$name}][1] = $value;\n            $config_val[$config_idx{$name}][2] = $source;\n        }\n\n        printf_debug (\"tlp-readconfs.replace [%s]: %s=\\\"%s\\\" %s\\n\", $config_idx{$name}, $name, $value, $source);\n    } else {\n        # new name --> store name, value, source and hash name\n        if ( $is_def ) {\n            #save value as default\n            push(@config_val, [$name, $value, $source, $value]);\n        } else {\n            # save value as user config\n            push(@config_val, [$name, $value, $source, \"\"]);\n        }\n        $config_idx{$name} = $#config_val;\n\n        printf_debug (\"tlp-readconfs.insert  [%s]: %s=\\\"%s\\\" %s\\n\", $#config_val, $name, $value, $source);\n    }\n\n    return 0;\n}\n\n# Parse whole config file and store parameters\n# $_[0]: filepath\n# $_[1]: 0=no change/1=rename parameters\n# return: 0=ok/1=file non-existent\nsub parse_configfile {\n    my $fname  = $_[0];\n    my $do_ren = $_[1];\n    my $source;\n    my $is_def;\n    if ( $fname eq CONF_DEF ) {\n        $source = $defsrc;\n        $is_def = 1;\n    } else {\n        $source = $fname;\n        $is_def = 0;\n    }\n\n    open (my $cf, \"<\", $fname) || return 1;\n\n    my $ln = 0;\n    while ( my $line = <$cf> ) {\n        # strip newline\n        chomp $line;\n        $ln += 1;\n        # strip comments: everything after '#' but not when '#' is quoted, i.e. followed by a closing quote ('\"')\n        # note: opening quote is handled by the regex below\n        $line =~ s/#(?=[^\"]*$).*$//;\n        # strip trailing spaces\n        $line =~ s/\\s+$//;\n        # select lines with format 'PARAMETER=value' or 'PARAMETER=\"value\"'\n        if ( $line =~ /^(?<name>[A-Z_]+[0-9]*)(?<op>(=|\\+=))(?:(?<val_bare>[-0-9a-zA-Z _.:]*)|\"(?<val_dquoted>[-0-9a-zA-Z _.:]*)\")\\s*$/ ) {\n            my $name = $+{name};\n            if ( $do_ren ) {\n                # rename PARAMETER\n                $name =~ s/$renrex/$rename{$1}/;\n            }\n            my $value = $+{val_dquoted} // $+{val_bare};\n            my $append = $+{op} eq \"+=\";\n            store_name_value_source ($name, $value, $append, $source . \" L\" . sprintf (\"%04d\", $ln), $is_def );\n        }\n    }\n    close ($cf);\n\n    return 0;\n}\n\n# Output all stored parameter name, value to a file\n# or parameter name, value, source to stdout\n# $_[0]: filepath (without argument the output will be written to stdout)\n# return: 0=ok/1=file open error\nsub write_runconf {\n    my $fname = $_[0];\n\n    my $runconf;\n    if ( ! $fname ) {\n        $runconf = *STDOUT;\n    } else {\n        open ($runconf, \">\", $fname) || return 1;\n    }\n\n    foreach ( @config_val ) {\n        my ($name, $value, $source, $default) = @$_;\n        if ( $runconf eq *STDOUT ) {\n            my $msg = \"\";\n            # stdout: check for deprecated message\n            if ( defined $dprmsg{$name} ) {\n                $msg = \" #! $dprmsg{$name}\";\n            }\n            # --cdiff: do not show user config lines matching the default\n            if ( ! $cdiff || $value ne $default ) {\n                printf {$runconf} \"%s: %s=\\\"%s\\\"%s\\n\", $source, $name, $value, $msg;\n            }\n        } else  {\n            printf {$runconf} \"%s=\\\"%s\\\"\\n\", $name, $value;\n        }\n    }\n    close ($runconf);\n\n    return 0\n}\n\n# Parse parameter renaming rules from file\n# $_[0]: rules file\n# return: 0=ok/1=file non-existent\nsub parse_renfile {\n    my $fname = $_[0];\n\n    open (my $rf, \"<\", $fname) || return 1;\n\n    # accumulate renaming\n    while ( my $line = <$rf> ) {\n        chomp $line;\n        # select lines with format 'OLD_PARAMETER<whitespace>NEW_PARAMETER'\n        if ( $line =~ /^(?<old_name>[A-Z_]+[0-9]*)\\s+(?<new_name>[A-Z_]+[0-9]*)\\s*$/ ) {\n            my $old_name = $+{old_name};\n            my $new_name = $+{new_name};\n            $rename{$old_name} = $new_name;\n        }\n    }\n    close ($rf);\n\n    if ( keys %rename > 0 ) {\n        # renaming hash not empty --> compile OLD_PARAMETER keys to match regex\n        $renrex = qr/^(@{[join '|', map { quotemeta($_) } keys %rename]})$/;\n        # enable renaming\n        $do_rename = 1;\n    }\n\n    return 0;\n}\n\n# Parse deprecated parameters and messages from file\n# $_[0]: parameters file\n# return: 0=ok/1=file non-existent\nsub parse_dprfile {\n    my $fname = $_[0];\n\n    open (my $df, \"<\", $fname) || return 1;\n\n    # accumulate deprecated params and mesgs\n    while ( my $line = <$df> ) {\n        chomp $line;\n        # select lines with format 'PARAMETER<whitespace># message'\n        if ( $line =~ /^(?<param_name>[A-Z_]+[0-9]*)\\s+#\\s+(?<param_msg>.*)$/ ) {\n            my $param_name = $+{param_name};\n            my $param_msg = $+{param_msg};\n            $dprmsg{$param_name} = $param_msg;\n        }\n    }\n    close ($df);\n\n    return 0;\n}\n\n# --- MAIN\n# parse arguments\nGetOptions ('outfile=s' => \\$outfile, 'notrace' => \\$notrace, 'cdiff' => \\$cdiff);\n\n# read parameter renaming rules\nparse_renfile (CONF_REN);\n\n# read deprecated parameter messages\nparse_dprfile (CONF_DPR);\n\n# 1. read intrinsic defaults (no renaming)\nparse_configfile (CONF_DEF, 0) == 0 || exit EXIT_DEFCONF;\n\n# 2. read customization (with renaming)\nforeach my $conffile ( grep { -f } glob CONF_DIR . \"/*.conf\" ) {\n    parse_configfile ($conffile, $do_rename);\n}\n\n# 3. read user settings (with renaming)\nparse_configfile (CONF_USR, $do_rename) == 0\n    || parse_configfile (CONF_OLD, $do_rename) == 0 || exit EXIT_TLPCONF;\n\n# save result\nwrite_runconf ($outfile);\n\nexit 0;\n"
        },
        {
          "name": "tlp-rf.in",
          "type": "blob",
          "size": 1.2958984375,
          "content": "#!/bin/sh\n# tlp - switch bluetooth/nfc/wifi/wwan on/off\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/25-tlp-func-rf @TLP_FLIB@/30-tlp-func-rf-sw; do\n    # shellcheck disable=SC1090\n    . \"$lib\"\ndone\n\n# --- MAIN\ncarg1=\"$1\"\nif [ \"$carg1\" = \"--version\" ]; then\n    print_version\n    exit 0\nfi\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\nparse_args4config \"$@\"\ncprintf_init\n\nadd_sbin2path\nself=${0##*/}\n\ncase $self in\n    bluetooth|nfc|wifi|wwan)\n        case $carg1 in\n            on)\n                device_switch \"$self\" on\n                # shellcheck disable=SC2154\n                echo_device_state \"$self\" \"$_devs\"\n                ;;\n\n            off)\n                device_switch \"$self\" off\n                echo_device_state \"$self\" \"$_devs\"\n                ;;\n\n            toggle)\n                device_switch \"$self\" toggle\n                echo_device_state \"$self\" \"$_devs\"\n                ;;\n\n            *)\n                device_state \"$self\"\n                echo_device_state \"$self\" \"$_devs\"\n                ;;\n        esac\n        ;;\n\n    *)\n        cecho \"Error: unknown device type \\\"$self\\\".\" 1>&2\n        do_exit 1\n        ;;\nesac\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-run-on.in",
          "type": "blob",
          "size": 0.7939453125,
          "content": "#!/bin/sh\n# tlp - run commands depending on power source\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\n# shellcheck disable=SC2043\nfor lib in @TLP_TLIB@/tlp-func-base; do\n    # shellcheck disable=SC1090\n    . \"$lib\"\ndone\n\n# --- MAIN\nself=${0##*/}\n\ncmd=$1\nif [ -z \"$cmd\" ]; then\n    cecho \"Usage: $self command [arg(s)]\" 1>&2\n    exit 1\nfi\nif ! cmd_exists \"$cmd\"; then\n    cecho \"Error: \\\"$cmd\\\" not found.\" 1>&2\n    exit 2\nfi\nshift\n\ncase $self in\n    run-on-ac)\n        if get_power_mode; then\n            $cmd \"$@\"\n        fi\n        ;;\n\n    run-on-bat)\n        if ! get_power_mode; then\n            $cmd \"$@\"\n        fi\n        ;;\n\n    *)\n        cecho \"Error: unknown mode $self.\" 1>&2\n        exit 1\n        ;;\nesac\n"
        },
        {
          "name": "tlp-sleep",
          "type": "blob",
          "size": 0.2333984375,
          "content": "#!/bin/sh\n\n# tlp - systemd suspend/resume hook\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# This software is licensed under the GPL v2 or later.\n\ncase $1 in\n    pre)  tlp suspend ;;\n    post) tlp resume  ;;\nesac\n"
        },
        {
          "name": "tlp-sleep.elogind",
          "type": "blob",
          "size": 0.13671875,
          "content": "#!/bin/sh\ncase \"${1-}\" in\n    'pre')\n        exec tlp suspend\n\t;;\n\n    'post')\n        exec tlp resume\n\t;;\n\n    *)\n        exit 64\n\t;;\nesac\n"
        },
        {
          "name": "tlp-stat.in",
          "type": "blob",
          "size": 33.7158203125,
          "content": "#!/bin/sh\n# tlp-stat - display power saving details\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/[0-9][0-9]* @TLP_FLIB@/tlp-func-stat; do\n    # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- Constants\n\nreadonly TLPUSB=@TLP_TLIB@/tlp-usblist\nreadonly TLPPCI=@TLP_TLIB@/tlp-pcilist\n\nreadonly DMIDECODE=dmidecode\nreadonly JOURNALCTL=journalctl\n\nreadonly ASPM=/sys/module/pcie_aspm/parameters/policy\nreadonly EFID=/sys/firmware/efi\nreadonly NMIWD=/proc/sys/kernel/nmi_watchdog\nreadonly OSRELEASE=/etc/os-release\nreadonly SWITCHEROO=/sys/kernel/debug/vgaswitcheroo/switch\nreadonly WQPE=/sys/module/workqueue/parameters/power_efficient\n\nreadonly ACPITEMP_DIR=\"/sys/devices/virtual/thermal\"\nreadonly ACPITEMP_GLOB=\"\n/sys/devices/virtual/thermal/thermal_zone*\"\nreadonly CORETEMP_DIR=\"/sys/devices/platform/coretemp.0\"\nreadonly CORETEMP_GLOB=\"\n/sys/devices/platform/coretemp.0\n/sys/devices/platform/coretemp.0/hwmon/hwmon*\"\nreadonly HWMONFAN_DIRS=\"\n/sys/class/hwmon/hwmon*/device\n/sys/class/hwmon/hwmon*\"\nreadonly IBMFAN=/proc/acpi/ibm/fan\nreadonly IBMTHERMAL=/proc/acpi/ibm/thermal\n\nreadonly DEBUGLOG=/var/log/debug\n\n# --- Variables\n\nneeds_root_priv=\nshow_all=1\nshow_bat=0\nshow_conf=0\nshow_disk=0\nshow_graf=0\nshow_pcie=0\nshow_pev=0\nshow_proc=0\nshow_psup=0\nshow_rfkill=0\nshow_system=0\nshow_temp=0\nshow_trace=0\nshow_udev=0\nshow_usb=0\nshow_verbose=0\nshow_warn=0\nshow_mode=0\nshow_version=0\nquiet=0\n\n# --- Functions\n\nparse_args () { # parse command-line -- $@: arguments to parse\n\n    # iterate arguments until delimiter '--' reached\n    while [ $# -gt 0 ]; do\n        case \"$1\" in\n            \"-b\"|\"--battery\")\n                show_all=0\n                show_bat=1\n                needs_root_priv=1\n                ;;\n\n            \"-c\"|\"--config\")\n                show_all=0\n                show_conf=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"--cdiff\")\n                show_all=0\n                show_cdiff=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-d\"|\"--disk\")\n                show_all=0\n                show_disk=1\n                needs_root_priv=1\n                ;;\n\n            \"-e\"|\"--pcie\")\n                show_all=0\n                show_pcie=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-g\"|\"--graphics\")\n                show_all=0\n                show_graf=1\n                needs_root_priv=1\n                ;;\n\n            \"-m\"|\"--mode\")\n                show_all=0\n                show_mode=1\n                quiet=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-p\"|\"--processor\")\n                show_all=0\n                show_proc=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-q\"|\"--quiet\")\n                quiet=1\n                ;;\n\n            \"-r\"|\"--rfkill\")\n                show_all=0\n                show_rfkill=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-s\"|\"--system\")\n                show_all=0\n                show_system=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-t\"|\"--temp\")\n                show_all=0\n                show_temp=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-u\"|\"--usb\")\n                show_all=0\n                show_usb=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-v\"|\"--verbose\")\n                show_verbose=1\n                ;;\n\n            \"-w\"|\"--warn\")\n                show_all=0\n                show_warn=1\n                : ${needs_root_priv:=1}\n                ;;\n\n            \"-P\"|\"--pev\")\n                show_all=0\n                show_pev=1\n                needs_root_priv=1\n                ;;\n\n            \"--psup\")\n                show_all=0\n                show_psup=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"-T\"|\"--trace\")\n                show_all=0\n                show_trace=1\n                needs_root_priv=1\n                ;;\n\n            \"--udev\")\n                show_all=0\n                show_udev=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"--version\")\n                show_all=0\n                show_version=1\n                quiet=1\n                : ${needs_root_priv:=0}\n                ;;\n\n            \"--\") # config values follow --> quit loop\n                break\n                ;;\n\n            *)\n                echo \"Usage: tlp-stat [ -b | --battery   | -c | --config    |\"\n                echo \"                  -d | --disk      | -e | --pcie      |\"\n                echo \"                  -g | --graphics  | -m | --mode      |\"\n                echo \"                  -p | --processor | -q | --quiet     |\"\n                echo \"                  -r | --rfkill    | -s | --system    |\"\n                echo \"                  -t | --temp      | -u | --usb       |\"\n                echo \"                  -w | --warn      | -v | --verbose   |\"\n                echo \"                     | --version   |    | --cdiff     |\"\n                echo \"                     | --pev       | -P | --psup      |\"\n                echo \"                  -T | --trace     |    | --udev      |\"\n                echo \"                ]\"\n                do_exit 3\n                ;;\n        esac\n\n        shift # next argument\n    done # while arguments\n\n    return 0\n}\n\n# --- MAIN\n# read configuration; continue on error, no trace\nread_config 0 1\n\nparse_args \"$@\"\nparse_args4config \"$@\"\ncprintf_init\n\nadd_sbin2path\n: ${needs_root_priv:=1}\n\n# inhibit trace output (unless forced)\n# shellcheck disable=SC2034\n[ \"$X_TRACE_TLP_STAT\" = \"1\" ] || _nodebug=1\n\n# check prerequisites\nif [ \"$needs_root_priv\" = \"1\" ]; then\n    check_root\nfi\nget_sys_power_supply\n\nif [ \"$quiet\" = \"0\" ]; then\n    echo \"--- TLP $TLPVER --------------------------------------------\"\n    echo\nfi\n\n# --- show version\nif [ \"$show_version\" = \"1\" ]; then\n    print_version\nfi # show_version\n\n# --- show configuration\nif [ \"$show_conf\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ Configured Settings:\"\n    $READCONFS --notrace\n    echo\nfi # show_conf\n\nif [ \"$show_cdiff\" = \"1\" ]; then\n    echo \"+++ Configured Settings (only differences to defaults):\"\n    $READCONFS --notrace --cdiff\n    echo\nfi # show_cdiff\n\n# --- show opmode\nif [ \"$show_mode\" = \"1\" ]; then\n    printf \"%s\\n\" \"$(print_saved_powerstate)\"\nfi # show_mode\n\n# --- show system info and status\nif [ \"$show_system\" = \"1\" ] || [ \"$show_all\" = \"1\" ] ; then\n    if [ -z \"$X_SIMULATE_MODEL\" ]; then\n        product_version=\"$(read_dmi product_version)\"\n        product_name=\"$(read_dmi product_name)\"\n        if printf '%s' \"$product_name\" | grep -E -q 'Think[Pp]ad'; then\n            model=\"$product_name\"\n        else\n            model=\"$product_version $product_name\"\n        fi\n    else\n        # simulate arbitrary model\n        model=\"$X_SIMULATE_MODEL\"\n    fi\n\n    echo \"+++ System Info\"\n    vendor=\"$(read_dmi sys_vendor)\"        && printf \"System         = %s\\n\" \"$vendor $model\"\n    bios=\"$(read_dmi bios_version)\"        && printf \"BIOS           = %s\\n\" \"$bios\"\n    ecfw=\"$(read_dmi ec_firmware_release)\" && printf \"EC Firmware    = %s\\n\" \"$ecfw\"\n\n    # --- release & kernel info\n    printf \"OS Release     = \"\n    if ! sed -rn 's/PRETTY_NAME=\"(.*)\"/\\1/p' $OSRELEASE 2> /dev/null; then\n        echo \"unknown\"\n    fi\n    echo \"Kernel         = $(uname -r -m -v)\"\n    printparm \"%-14s = %s\" /proc/cmdline\n\n    # --- init system info\n    if check_systemd; then\n        echo \"Init system    = systemd $(systemd --version 2> /dev/null | sed -rn 's/systemd ([0-9]+)/v\\1/p')\"\n    elif check_upstart; then\n        echo \"Init system    = upstart\"\n    elif check_openrc; then\n        echo \"Init system    = openrc\"\n    else\n        echo \"Init system    = sysvinit\"\n    fi\n    if [ -d $EFID ]; then\n        echo \"Boot mode      = UEFI\"\n    else\n        echo \"Boot mode      = BIOS (CSM, Legacy)\"\n    fi\n    printf   \"Suspend mode   = %s\\n\" \"$(read_sysf \"$SLEEPMODE\" \"(not available)\")\"\n    print_selinux\n    echo\n\n    # --- TLP status\n    echo \"+++ TLP Status\"\n    if check_tlp_enabled; then\n        printf \"State          = enabled\\n\"\n    else\n        printf \"State          = disabled\\n\"\n    fi\n\n    # --- RDW status\n    if check_rdw_installed; then\n        if ! check_tlp_enabled; then\n            printf \"RDW state      = disabled (TLP disabled)\\n\"\n        elif check_run_flag \"$RDW_KILL\"; then\n            printf \"RDW state      = disabled\\n\"\n        else\n            printf \"RDW state      = enabled\\n\"\n        fi\n    else\n        printf \"RDW state      = not installed\\n\"\n    fi\n\n    # --- last invocation time\n    printf \"Last run       = %s\\n\" \"$(print_file_modtime_and_age \"$PWRRUNFILE\")\"\n\n    # --- actual opmode\n    printf \"Mode           = %s\\n\" \"$(print_saved_powerstate)\"\n\n    # ---- actual power source\n    get_sys_power_supply\n    case $? in\n        0) printf \"Power source   = AC\\n\" ;;\n        1) printf \"Power source   = battery\\n\" ;;\n        *) printf \"Power source   = unknown\\n\" ;;\n    esac\n    if check_ac_quirk \"$model\"; then\n        echo \"Notice: system may not detect AC/charger -- see: https://linrunner.de/faq/operation.html#faq-ac-quirk\"\n    fi\n    echo\n\n    # -- check systemd services\n    check_services_activation_status\n\n    # -- check for power-profiles-daemon\n    if check_ppd_active; then\n        cprintf \"\" \"Warning: TLP's power saving will not apply on boot because the conflicting $PPD_SERVICE is active.\\n\" 1>&2\n        echo\n    fi\nfi # show_system\n\n# --- show cpu info\nif [ \"$show_proc\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    [ \"$quiet\" = \"0\" ] || [ \"$show_all\" = \"1\" ] && echo \"+++ Processor\"\n\n    # check EPP availability\n    if [ -f \"${CPUD}/cpu0/cpufreq/energy_performance_preference\" ]; then\n        epp=1\n    else\n        epp=0\n    fi\n\n    if [ \"$quiet\" = \"0\" ]; then\n        if [ \"$X_IGNORE_PROCCPU\" != \"1\" ]; then\n            cpu_mod=\"$(sed -rn 's/model name[ \\t]+: (.+)/\\1/p' /proc/cpuinfo | head -1)\"\n        else\n            cpu_mod=\"\"\n        fi\n        if [ -z \"$cpu_mod\" ] && test_root && cmd_exists $DMIDECODE ; then\n            cpu_mod=\"$(dmidecode -t 4 2> /dev/null | sed -rn 's/\\s*Version:\\s+(.+)/\\1/p')\"\n        fi\n        if [ -n \"$cpu_mod\" ]; then\n            printf \"CPU model = %s\\n\\n\" \"$cpu_mod\"\n        fi\n\n        # -- scaling gov and freq info\n        cnt=0\n        cpu2nd=\"\"\n        cpulast=\"\"\n        for cn in $(glob_dirs '/cpu[0-9]*' \"$CPUD\" | sed 's/.*\\/cpu//' | sort -n); do\n\n            cpuf=\"${CPUD}/cpu${cn}/cpufreq\"\n            cpua=\"${CPUD}/cpu${cn}/acpi_cppc\"\n            if [ -f \"$cpuf/scaling_driver\" ]; then\n                cpu=\"cpu${cn}\"\n\n                # show only cpu0, unless verbose mode is enabled\n                if [ $cnt -eq 0 ] || [ \"$show_verbose\" = \"1\" ] ; then\n                    printparm \"%-54s = ##%s##\" \"$cpuf/scaling_driver\"\n                    printparm \"%-54s = ##%s##\" \"$cpuf/scaling_governor\"\n                    printparm \"%s = ##%s##\" \"$cpuf/scaling_available_governors\" _\n\n                    if [ -f \"$cpuf/scaling_min_freq\" ]; then\n                        printf \"%-54s = %8d [kHz]\\n\" \"$cpuf/scaling_min_freq\" \"$(read_sysf \"$cpuf/scaling_min_freq\")\"\n                    fi\n                    if [ -f \"$cpuf/scaling_max_freq\" ]; then\n                        printf \"%-54s = %8d [kHz]\\n\" \"$cpuf/scaling_max_freq\" \"$(read_sysf \"$cpuf/scaling_max_freq\")\"\n                    fi\n                    if [ -f \"$cpuf/scaling_available_frequencies\" ]; then\n                        printf \"%s = \" \"$cpuf/scaling_available_frequencies\"\n                        for freq in $(read_sysf \"$cpuf/scaling_available_frequencies\"); do\n                            printf \"%s \" \"$freq\"\n                        done\n                        printf \"[kHz]\\n\"\n                    fi\n                    if [ -f \"$cpuf/cpuinfo_min_freq\" ]; then\n                        printf \"%-54s = %8d [kHz]\\n\" \"$cpuf/cpuinfo_min_freq\" \"$(read_sysf \"$cpuf/cpuinfo_min_freq\")\"\n                    fi\n                    if [ -f \"$cpuf/cpuinfo_max_freq\" ]; then\n                        printf \"%-54s = %8d [kHz]\\n\" \"$cpuf/cpuinfo_max_freq\" \"$(read_sysf \"$cpuf/cpuinfo_max_freq\")\"\n                    fi\n                    if [ -f \"$cpuf/bios_limit\" ]; then\n                        printf \"%-54s = %8d [kHz]\\n\" \"$cpuf/bios_limit\" \"$(read_sysf \"$cpuf/bios_limit\")\"\n                    fi\n                    if [ -f \"$cpuf/boost\" ] && [ $show_verbose -eq 1 ]; then\n                        printf \"%-54s = %d\\n\" \"$cpuf/boost\" \"$(read_sysf \"$cpuf/boost\")\"\n                    fi\n\n                    if [ -f \"$cpuf/energy_performance_preference\" ]; then\n                        printparm \"%s = ##%s## [EPP]\" \"$cpuf/energy_performance_preference\"\n                    fi\n                    if [ -f \"$cpuf/energy_performance_available_preferences\" ]; then\n                        printparm \"%s = ##%s##\" \"$cpuf/energy_performance_available_preferences\"\n                    fi\n\n                    if { supports_intel_cpu_epb && [ \"$epp\" -eq 0 ]; } || [ \"$X_SHOW_EPB\" = \"1\" ] ; then\n                        # CPU supports EPB: use native kernel API (5.2 and later)\n                        printparm_epb \"${CPUD}/cpu${cn}/power/energy_perf_bias\"\n                    fi\n\n                    if [ $show_verbose -eq 1 ]; then\n                        if [ -f \"$cpuf/amd_pstate_highest_perf\" ]; then\n                            printf \"%-70s = %8d [%%]\\n\" \"$cpuf/amd_pstate_highest_perf\" \"$(read_sysf \"$cpuf/amd_pstate_highest_perf\")\"\n                        fi\n                        if [ -f \"$cpuf/amd_pstate_max_freq\" ]; then\n                            printf \"%-70s = %8d [kHz]\\n\" \"$cpuf/amd_pstate_max_freq\" \"$(read_sysf \"$cpuf/amd_pstate_max_freq\")\"\n                        fi\n                        if [ -f \"$cpuf/amd_pstate_lowest_nonlinear_freq\" ]; then\n                            printf \"%-70s = %8d [kHz]\\n\" \"$cpuf/amd_pstate_lowest_nonlinear_freq\" \"$(read_sysf \"$cpuf/amd_pstate_lowest_nonlinear_freq\")\"\n                        fi\n                        if [ -f \"$cpua/lowest_perf\" ]; then\n                            printf \"%-61s = %5d\\n\" \"$cpua/lowest_perf\" \"$(read_sysf \"$cpua/lowest_perf\")\"\n                        fi\n                        if [ -f \"$cpua/lowest_nonlinear_perf\" ]; then\n                            printf \"%-61s = %5d\\n\" \"$cpua/lowest_nonlinear_perf\" \"$(read_sysf \"$cpua/lowest_nonlinear_perf\")\"\n                        fi\n                        if [ -f \"$cpua/nominal_perf\" ]; then\n                            printf \"%-61s = %5d\\n\" \"$cpua/nominal_perf\" \"$(read_sysf \"$cpua/nominal_perf\")\"\n                        fi\n                        if [ -f \"$cpua/reference_perf\" ]; then\n                            printf \"%-61s = %5d\\n\" \"$cpua/reference_perf\" \"$(read_sysf \"$cpua/reference_perf\")\"\n                        fi\n                        if [ -f \"$cpua/highest_perf\" ]; then\n                            printf \"%-61s = %5d\\n\" \"$cpua/highest_perf\" \"$(read_sysf \"$cpua/highest_perf\")\"\n                        fi\n                        if [ -f \"$cpua/lowest_freq\" ]; then\n                            printf \"%-61s = %5d [MHz]\\n\" \"$cpua/lowest_freq\" \"$(read_sysf \"$cpua/lowest_freq\")\"\n                        fi\n                        if [ -f \"$cpua/nominal_freq\" ]; then\n                            printf \"%-61s = %5d [MHz]\\n\" \"$cpua/nominal_freq\" \"$(read_sysf \"$cpua/nominal_freq\")\"\n                        fi\n                    fi\n\n                    printf \"\\n\"\n                fi\n\n                if [ $cnt -eq 1 ]; then\n                    # remember 2nd cpu core\n                    cpu2nd=$cpu\n                else\n                    # remember last cpu core\n                    cpulast=$cpu\n                fi\n                cnt=$((cnt + 1))\n            fi\n        done # for cn\n\n        if [ \"$show_verbose\" = \"0\" ] && [ $cnt -gt 1 ]; then\n            printf \"%s/%s..%s: omitted for clarity, use -v to show all\\n\\n\" \"$CPUD\" \"$cpu2nd\" \"$cpulast\"\n        fi\n    fi # !quiet\n\n    if check_intel_pstate; then\n        # Intel P-state\n        printparm \"%-54s = ##%s##\"       \"$INTEL_PSTATED/status\"\n        printparm \"%-54s = ##%3d## [%%]\" \"$CPU_MIN_PERF_PCT\"\n        printparm \"%-54s = ##%3d## [%%]\" \"$CPU_MAX_PERF_PCT\"\n        printparm \"%-54s = ##%3d##\"      \"$CPU_TURBO_PSTATE\"\n        printparm \"%-54s = ##%3d##\"      \"$INTEL_DYN_BOOST\"\n        printparm \"%-54s = ##%3d## [%%]\" \"$INTEL_PSTATED/turbo_pct\"\n        printparm \"%-54s = ##%3d##\"      \"$INTEL_PSTATED/num_pstates\"\n\n    elif check_amd_pstate; then\n        # AMD P-state\n        printparm \"%-54s = ##%s##\" \"$AMD_PSTATED/status\"\n        if [ -f \"$CPU_BOOST_ALL_CTRL\" ]; then\n            printparm \"%-54s = ##%d##\" \"$CPU_BOOST_ALL_CTRL\" \"not available\"\n        fi\n\n    elif [ -f \"$CPU_BOOST_ALL_CTRL\" ]; then\n        # turbo boost\n        boost=$(read_sysval \"$CPU_BOOST_ALL_CTRL\")\n\n        # simple test for attribute \"w\" doesn't work, so actually write\n        if write_sysf \"$boost\" \"$CPU_BOOST_ALL_CTRL\"; then\n            printparm \"%-54s = ##%d##\" \"$CPU_BOOST_ALL_CTRL\"\n        else\n            printparm \"%-54s = ##%d## (CPU not supported)\" \"$CPU_BOOST_ALL_CTRL\"\n        fi\n\n    else\n        printparm \"%-54s = (not available)\" \"$CPU_BOOST_ALL_CTRL\"\n    fi\n\n    # --- workqueue power efficient status\n    printparm \"%-54s = ##%s##\" \"$WQPE\"\n\n    # --- nmi watchdog\n    printparm \"%-54s = ##%d##\" \"$NMIWD\"\n\n    # --- platform profile\n    if [ \"$quiet\" = \"0\" ] || [ \"$show_all\" = \"1\" ] ; then\n        printf \"\\n+++ Platform Profile\\n\"\n    fi\n    printparm \"%-54s = ##%s##\" \"$FWACPID/platform_profile\"\n    printparm \"%-54s = ##%s##\" \"$FWACPID/platform_profile_choices\"\n    [ -d \"$TPACPID\" ] && printparm \"%-54s = ##%s##\" \"$TPACPID/dytc_lapmode\"\n    printf \"\\n\"\nfi # show_proc\n\n# --- show temperatures\nif [ \"$show_temp\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    if [ \"$quiet\" = \"0\" ] || [ \"$show_all\" = \"1\" ]; then\n        echo \"+++ Temperatures\"\n    fi\n\n    tempshown=0\n    if [ -f \"$IBMTHERMAL\" ] && [ \"$X_IGNORE_IBM_TEMPFAN\" != \"1\" ]; then\n        # use ThinkPad-specific sysfile\n        echo \"$IBMTHERMAL = $(read_sysf $IBMTHERMAL | cut -f2  ) [°C]\"\n        tempshown=1\n    elif [ -d \"$CORETEMP_DIR\" ] && [ \"$X_IGNORE_CORETEMP\" != \"1\" ]; then\n        # use coretemp sensors\n        cmax=0\n        # find max value of all CPU packages (just in case there are several)\n        # temp1_input is \"package\"\n        for sens in $(glob_files '/temp1_input' \"$CORETEMP_GLOB\"); do\n            ctemp=$(read_sysval \"$sens\")\n            [ \"$ctemp\" -gt \"$cmax\" ] && cmax=$ctemp\n        done\n        if [ \"$cmax\" -gt 0 ]; then\n            perl -e 'printf (\"CPU temp               = %5d [°C]\\n\", '\"$cmax\"' / 1000.0);'\n            tempshown=1\n        fi\n    elif [ -d \"$ACPITEMP_DIR\" ] && [ \"$X_IGNORE_ACPITEMP\" != \"1\" ]; then\n        # use ACPI thermal zone sensors for CPUs\n        cmax=0\n        # find max value of all CPUs (just in case there are several)\n        for sens in $(glob_files '/temp' \"$ACPITEMP_GLOB\"); do\n            if [ \"$(read_sysf \"${sens%temp}type\")\" = \"acpitz\" ]; then\n                ctemp=$(read_sysval \"$sens\")\n                [ \"$ctemp\" -gt \"$cmax\" ] && cmax=$ctemp\n            fi\n        done\n        if [ \"$cmax\" -gt 0 ]; then\n            perl -e 'printf (\"CPU temp               = %5d [°C]\\n\", '\"$cmax\"' / 1000.0);'\n            tempshown=1\n        fi\n    fi\n    if [ \"$tempshown\" -eq \"0\" ]; then\n        # no CPU sensor detected\n        printf \"CPU temp               = (not available)\\n\"\n    fi\n\n    # --- fan speed\n    fanshown=0\n    if [ -f $IBMFAN ] && [ \"$X_IGNORE_IBM_TEMPFAN\" != \"1\" ]; then\n        # use thinkpad-specific sysfile\n        awk '$1 ~ /speed:/ { printf \"'$IBMFAN'     = %5d [/min]\\n\", $2 }' $IBMFAN\n        fanshown=1\n    elif [ \"$X_IGNORE_HWMONFAN\" != \"1\" ]; then\n        # use hwmon\n        # shellcheck disable=SC2086\n        for fan in $(glob_files '/fan?*_input' $HWMONFAN_DIRS); do\n            if fan_speed=$(read_sysval \"$fan\"); then\n                fan_name=\"${fan##*/}\"; fan_name=\"${fan_name%_input}\"\n                fanshown=1\n                printf \"Fan speed (%s)       = %5d [/min]\\n\" \\\n                    \"${fan_name}\" \"${fan_speed}\"\n            fi\n        done\n    fi\n    if [ \"$fanshown\" -eq \"0\" ]; then\n        printf \"Fan speed              = (not available)\\n\"\n    fi\n    if [ \"$quiet\" = \"0\" ] || [ \"$show_all\" = \"1\" ]; then\n        echo\n    fi\nfi # show_temp\n\n# --- show laptop-mode, dirty buffers params\nif [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ File System\"\n    printparm \"%-38s = ##%5d##\" /proc/sys/vm/laptop_mode\n    printparm \"%-38s = ##%5d##\" /proc/sys/vm/dirty_writeback_centisecs\n    printparm \"%-38s = ##%5d##\" /proc/sys/vm/dirty_expire_centisecs\n    printparm \"%-38s = ##%5d##\" /proc/sys/vm/dirty_ratio\n    printparm \"%-38s = ##%5d##\" /proc/sys/vm/dirty_background_ratio\n    printparm \"%-38s = ##%5d##\" /proc/sys/fs/xfs/age_buffer_centisecs _\n    printparm \"%-38s = ##%5d##\" /proc/sys/fs/xfs/xfssyncd_centisecs _\n    printparm \"%-38s = ##%5d##\" /proc/sys/fs/xfs/xfsbufd_centisecs _\n    echo\nfi # show_all\n\n# --- show disk info\nif [ \"$show_disk\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ Disks\"\n    # list for storage device iteration\n    disklist=\"$DISK_DEVICES\"\n    # list for output: print \"(disabled)\" when empty\n    diskstat=\"${DISK_DEVICES:-(disabled)}\"\n    printf \"Devices = %s\\n\" \"$diskstat\"\n\n    # iterate over list\n    if [ -n \"$disklist\" ]; then\n        for dev in $disklist; do # iterate all devices\n            show_disk_data \"$dev\"\n        done\n    fi\n    echo\n\n    # --- sata alpm mode\n    # shellcheck disable=SC2086\n    if stat -t ${ALPM_GLOB}/link_power_management_policy > /dev/null 2>&1; then\n        echo \"+++ AHCI Link Power Management (ALPM) :: SATA Links\"\n        for i in ${ALPM_GLOB} ; do\n            printparm_ahci \"$i/link_power_management_policy\"\n        done\n        echo\n    fi\n\n    # --- ahci runtime pm\n    # shellcheck disable=SC2086\n    if stat -t ${AHCI_GLOB}/power > /dev/null 2>&1; then\n        echo \"+++ AHCI Port Runtime Power Management :: SATA/ATA Ports\"\n        for dev in ${AHCI_GLOB}/power ; do\n            printparm_ahci \"$dev/control\"\n        done\n        echo\n    fi\n\n    # -- docks\n    cnt=0\n    for dock in $DOCK_GLOB; do\n        [ ! -d \"$dock\" ] && break # no dock/bay detected\n\n        # dock/bay detected, print header\n        [ $cnt -eq 0 ] && echo \"+++ Docks and Device Bays\"\n        cnt=$((cnt+1))\n\n        # get dock type\n        { read -r dock_type < \"$dock/type\"; } 2>/dev/null\n\n        # get dock state\n        if check_is_docked; then\n            # docked\n            case $dock_type in\n                ata_bay)      dock_state=\"drive present\" ;;\n                battery_bay)  dock_state=\"battery present\" ;;\n                dock_station) dock_state=\"docked\" ;;\n\n                *)  dock_state=\"docked\"\n                    dock_type=\"unknown\"\n                    ;;\n            esac\n        else\n            # not docked\n            case $dock_type in\n                ata_bay)      dock_state=\"no drive (or powered off)\" ;;\n                battery_bay)  dock_state=\"no battery \" ;;\n                dock_station) dock_state=\"undocked\" ;;\n\n                *)  dock_state=\"undocked\"\n                    dock_type=\"unknown\"\n                    ;;\n            esac\n        fi\n\n        # print dock data\n        printf \"%s: %-13s = %s\\n\" \"$dock\" \"$dock_type\" \"$dock_state\"\n    done\n    [ $cnt -gt 0 ] && echo\nfi # show_disk\n\n# --- show hybrid graphics switch (nouveau, radeon only)\nif [ \"$show_graf\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    if [ -f $SWITCHEROO ]; then\n        echo \"+++ Hybrid Graphics Switch\"\n        printparm_ml \"  \" $SWITCHEROO\n    fi\n\n    # --- gpu data for all drivers\n    show_gpu_data\nfi # show_graf\n\n# --- show rfkill state\nif [ \"$show_rfkill\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ Wireless\"\n    for i in bluetooth nfc wifi wwan; do\n        get_devc $i\n        get_devs $i\n        # shellcheck disable=SC2154\n        echo_device_state \"$i\" \"$_devs\"\n    done\n    echo\n\n    ifshown=0\n\n    # --- bluetooth\n    get_bluetooth_ifaces\n    # shellcheck disable=SC2154\n    for iface in $_bifaces; do\n        if [ -n \"$iface\" ]; then\n            ifshown=1\n\n            # get bluetooth driver\n            get_bluetooth_driver \"$iface\"\n            printf \"%-30s: bluetooth, \" \"$iface($_btdrv)\"\n            if bluetooth_in_use \"$iface\"; then\n                echo \"connected\"\n            else\n                echo \"not connected\"\n            fi\n        fi\n    done\n\n    # --- wifi\n    get_wifi_ifaces\n    # shellcheck disable=SC2154\n    for iface in $_wifaces; do\n        if [ -n \"$iface\" ]; then\n            ifshown=1\n\n            # get wifi power mgmt state\n            if cmd_exists \"$IW\"; then\n                wifipm=$($IW dev \"$iface\" get power_save 2> /dev/null | \\\n                    grep 'Power save' | \\\n                    sed -r 's/.*Power save: (on|off).*/\\1/')\n                                else\n                                    wifipm=\"\"\n            fi\n\n            # get wifi driver\n            get_wifi_driver \"$iface\"\n            printf \"%-30s: wifi, \" \"$iface($_wifidrv)\"\n            if wireless_in_use \"$iface\"; then\n                printf \"connected, \"\n            else\n                printf \"not connected, \"\n            fi\n            printf \"power management = \"\n            case $wifipm in\n                on|off) printf \"%s\" \"$wifipm\" ;;\n                *)      printf \"unknown\" ;;\n            esac\n            printf \"\\n\"\n        fi\n    done\n\n    # --- wwan\n    get_wwan_ifaces\n    # shellcheck disable=SC2154\n    for iface in $_wanifaces; do\n        if [ -n \"$iface\" ]; then\n            ifshown=1\n\n            # get wwan driver\n            get_wwan_driver \"$iface\"\n\n            printf \"%-30s: wwan, \" \"$iface($_wwandrv)\"\n            if wireless_in_use \"$iface\"; then\n                printf \"connected\"\n            else\n                printf \"not connected\"\n            fi\n            printf \"\\n\"\n        fi\n    done\n    [ \"$ifshown\" = \"1\" ] && echo\nfi # show_rfkill\n\n# --- show sound power mode\nif [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ Audio\"\n    if [ -d /sys/module/snd_hda_intel ]; then\n        printparm \"%-58s = ##%s##\" \"/sys/module/snd_hda_intel/parameters/power_save\"\n        printparm \"%-58s = ##%s##\" \"/sys/module/snd_hda_intel/parameters/power_save_controller\"\n    fi\n    if [ -d /sys/module/snd_ac97_codec ]; then\n        printparm \"%s = ##%s##\" \"/sys/module/snd_ac97_codec/parameters/power_save\"\n    fi\n    echo\nfi # show_all\n\n# --- show pcie info\nif [ \"$show_pcie\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    # --- aspm state\n    echo \"+++ PCIe Active State Power Management\"\n    if [ -f $ASPM ]; then\n        pol=$(read_sysf $ASPM | sed -r 's/[[:space:]]+$//')\n        apol=$(printf \"%s\" \"$pol\" | sed -r 's/.*\\[(.*)\\].*/\\1/')\n        if write_sysf \"$apol\" $ASPM; then\n            echo \"$ASPM = $pol\"\n        else\n            echo \"$ASPM = $pol (using BIOS preferences)\"\n        fi\n    else\n        echo \"$ASPM = (not available)\"\n    fi\n    echo\n\n    # --- runtime pm\n    echo \"+++ PCIe Runtime Power Management\"\n    echo \"Enable devices    = ${RUNTIME_PM_ENABLE:-(disabled)}\"\n    echo \"Disable devices   = ${RUNTIME_PM_DISABLE:-(disabled)}\"\n    echo \"Device denylist   = ${RUNTIME_PM_DENYLIST:=(disabled)}\"\n    echo \"Driver denylist   = ${RUNTIME_PM_DRIVER_DENYLIST:-(disabled)}\"\n    echo\n\n    if cmd_exists $TLPPCI; then\n        if [ $show_verbose -eq 1 ]; then\n            $TLPPCI --verbose\n        else\n            $TLPPCI\n        fi\n    else\n        cecho \"Error: missing subcommand $TLPPCI.\" 1>&2\n    fi\n    echo\nfi # show_pcie\n\n# --- show usb autosuspend\nif [ \"$show_usb\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    echo \"+++ USB\"\n    if [ \"$USB_AUTOSUSPEND\" = \"1\" ]; then\n        echo \"Autosuspend       = enabled\"\n    else\n        echo \"Autosuspend       = disabled\"\n    fi\n    echo \"Device allowlist  = ${USB_ALLOWLIST:=(not configured)}\"\n    echo \"Device denylist   = ${USB_DENYLIST:=(not configured)}\"\n    if [ \"${USB_EXCLUDE_AUDIO:-0}\" = \"1\" ]; then\n        echo \"Exclude audio     = enabled\"\n    else\n        echo \"Exclude audio     = disabled\"\n    fi\n    if [ \"${USB_EXCLUDE_BTUSB:-0}\" = \"1\" ]; then\n        echo \"Exclude bluetooth = enabled\"\n    else\n        echo \"Exclude bluetooth = disabled\"\n    fi\n    if [ \"${USB_EXCLUDE_PHONE:-0}\" = \"1\" ]; then\n        echo \"Exclude phones    = enabled\"\n    else\n        echo \"Exclude phones    = disabled\"\n    fi\n    if [ \"${USB_EXCLUDE_PRINTER:-0}\" = \"1\" ]; then\n        echo \"Exclude printers  = enabled\"\n    else\n        echo \"Exclude printers  = disabled\"\n    fi\n    if [ \"${USB_EXCLUDE_WWAN:-1}\" = \"1\" ]; then\n        echo \"Exclude WWAN      = enabled\"\n    else\n        echo \"Exclude WWAN      = disabled\"\n    fi\n    echo\n\n    if cmd_exists $TLPUSB; then\n        if [ $show_verbose -eq 1 ]; then\n            $TLPUSB --verbose\n        else\n            $TLPUSB\n        fi\n    else\n        cecho \"Error: missing subcommand $TLPUSB.\" 1>&2\n    fi\n    echo\nfi # show_usb\n\n# -- show battery info\nif [ \"$show_bat\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    select_batdrv\n    batdrv_show_battery_data $show_verbose\nfi # show_bat\n\n# --- show warnings\nif [ \"$show_warn\" = \"1\" ] || [ \"$show_disk\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    # ata errors (possibly) caused by SATA_LINKPWR_ON_AC/BAT != max_performance\n    ecnt=$(check_ata_errors)\n    if [ \"$ecnt\" -ne 0 ]; then\n        echo \"+++ Warnings\"\n        printf \"* Kernel log shows ata errors (%d) possibly caused by the configuration\\n\" \"$ecnt\"\n        printf \"  SATA_LINKPWR_ON_AC/BAT=min_power or medium_power.\\n\"\n        printf \"  Consider using medium_power or max_performance instead.\\n\"\n        printf \"  See the FAQ: https://linrunner.de/en/tlp/docs/tlp-faq.html#warnings\\n\"\n        printf \"  Details:\\n\"\n        dmesg | grep -E -A 5 \"${RE_ATA_ERROR}\"\n        echo\n    elif [ \"$show_warn\" = \"1\" ]; then\n        echo \"No warnings detected.\"\n        echo \"\"\n    fi\nfi # show_warn\n\n# -- show recommendations\nif [ \"$show_bat\" = \"1\" ] || [ \"$show_system\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n    # battery plugin specific recommendations\n    if [ \"$show_bat\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n        reout=\"$(batdrv_recommendations)\"\n        if [ -n \"$reout\" ]; then\n            reout=\"$reout\\n\"\n        fi\n    else\n        reout=\"\"\n    fi\n\n    # other recommendations\n    if [ \"$show_system\" = \"1\" ] || [ \"$show_all\" = \"1\" ]; then\n        if check_ppd_active; then\n            reout=\"${reout}Uninstall power-profiles-daemon or invoke 'systemctl mask $PPD_SERVICE' to ensure the full functionality of TLP\\n\"\n        fi\n    fi\n    if [ \"$show_all\" = \"1\" ]; then\n        cmd_exists ethtool  || reout=\"${reout}Install ethtool to disable Wake-on-LAN\\n\"\n        cmd_exists smartctl || reout=\"${reout}Install smartmontools for disk drive health info\\n\"\n    fi\n\n    if [ -n \"$reout\" ]; then\n        cecho \"+++ Recommendations\" \"notice\"\n        # shellcheck disable=SC2059\n        # don't change to %s, $reout contains blanks and \\n!\n        cecho \"$(printf \"$reout\" | sed -r 's/^/\\* /')\" \"notice\"\n        echo\n    fi\nfi # show_all\n\n# --- show udev power_supply events\nif [ \"$show_pev\" = \"1\" ]; then\n    # check for udevadm\n    if cmd_exists \"$UDEVADM\"; then\n        echo \"+++ Monitor power supply events -- cancel with ^C\"\n        echo\n        $UDEVADM monitor --udev --property --subsystem-match=power_supply\n    fi\nfi # show_pev\n\n# --- show power_supply diagnostic\nif [ \"$show_psup\" = \"1\" ]; then\n    printf \"+++ Power supply diagnostic\\n\"\n    for ps in /sys/class/power_supply/*; do\n        # shellcheck disable=SC2063\n        printparm \"%s: ##%s##\" \"$ps/type\" _\n        printparm \"%s: ##%s##\" \"$ps/usb_type\" _\n        printparm \"%s: ##%s##\" \"$ps/present\" _\n        printparm \"%s: ##%s##\" \"$ps/online\" _\n        printparm \"%s: ##%s##\" \"$ps/capacity\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_full_design\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_full\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_now\" _\n        printparm \"%s: ##%s##\" \"$ps/current_now\" _\n        printparm \"%s: ##%s##\" \"$ps/energy_full_design\" _\n        printparm \"%s: ##%s##\" \"$ps/energy_full\" _\n        printparm \"%s: ##%s##\" \"$ps/energy_now\" _\n        printparm \"%s: ##%s##\" \"$ps/power_now\" _\n        printparm \"%s: ##%s##\" \"$ps/voltage_max\" _\n        printparm \"%s: ##%s##\" \"$ps/voltage_min\" _\n        printparm \"%s: ##%s##\" \"$ps/voltage_now\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_control_start_threshold\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_control_end_threshold\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_behaviour\" _\n        printparm \"%s: ##%s##\" \"$ps/charge_types\" _\n        printparm \"%s: ##%s##\" \"$ps/status\" _\n        printparm \"%s: ##%s##\" \"$ps/device/path\" _\n    done\n    printf \"\\n+++ udev diagnostic\\n\"\n    check_udev_rule_ps\nfi # show_psup\n\n# --- show udev diagnostic\nif [ \"$show_udev\" = \"1\" ]; then\n    printf \"+++ udev diagnostic\\n\"\n    check_udev_rule_ps\n    check_udev_rule_usb\nfi # show_udev\n\n# --- show debug log\nif [ \"$show_trace\" = \"1\" ]; then\n    # check for systemd journal\n    jdone=0\n    if cmd_exists $JOURNALCTL; then\n        # retrieve trace output from journal, rc=1 if journald has no data available\n        if [ $show_verbose -eq 1 ]; then\n            # verbose: show all output\n            $JOURNALCTL -p debug --no-pager SYSLOG_IDENTIFIER=tlp 2> /dev/null && jdone=1\n        else\n            # non-verbose: show output since last reboot only\n            $JOURNALCTL -p debug --no-pager SYSLOG_IDENTIFIER=tlp -b 2> /dev/null && jdone=1\n        fi\n    fi\n\n    if [ \"$jdone\" = \"0\"  ]; then\n        # no journald data available --> retrieve trace output from logfile\n        if [ -f $DEBUGLOG ]; then\n            grep 'tlp\\[' $DEBUGLOG\n        else\n            cecho \"Error: $DEBUGLOG does not exist.\" 1>&2\n            echo 1>&2\n            echo \"Solution: create an rsyslog conffile /etc/rsyslog.d/90-debug.conf with the following contents\" 1>&2\n            echo \" *.=debug;\\\\\" 1>&2\n            echo \" mail,authpriv,cron.none;\\\\\" 1>&2\n            echo \" local0,local1,local3,local4,\\\\\" 1>&2\n            echo \" local5,local6,local7.none    -/var/log/debug\" 1>&2\n            echo \"and restart the rsyslog daemon.\" 1>&2\n            echo 1>&2\n        fi\n    fi\nfi # show_trace\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-usb-udev.in",
          "type": "blob",
          "size": 1.8720703125,
          "content": "#!/bin/sh\n# tlp - handle added usb devices\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n#\n# Remark: the calling udev rule is triggered for \"base\" devices only,\n#         not for the corresponding subdevices.\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/15-tlp-func-disk @TLP_FLIB@/20-tlp-func-usb; do\n    # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- MAIN\n# shellcheck disable=SC2034\n_bgtask=1\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\n\n# quit if TLP disabled\ncheck_tlp_enabled || do_exit 0\n\nif [ \"$X_USB_ENV_TRACE\" = \"1\" ]; then\n    echo_debug \"usb\" \"tlp_usb_udev.env = $(printenv)\"\nfi\n\ncase \"$1\" in\n    usb) # usb devices in general\n        [ \"$USB_AUTOSUSPEND\" = \"1\" ] || do_exit 0\n        # quit if usb autosuspend disabled\n\n        # USB autosuspend has two principal operation modes:\n        #\n        # Mode 1 (optional):\n        # - System startup is handled by tlp-functions:set_usb_suspend()\n        # - Startup completion is signaled by \"flag file\" $USB_DONE\n        # - Newly added devices are handled by this udev script\n        # - Mode 1 is enabled by the private config variable X_TLP_USB_MODE=1\n        #\n        # Mode 2 (default):\n        # - Everything - including system startup, but not shutdown - is handled by this udev script\n\n        # quit if mode 1 and no startup completion flag\n        [ \"$X_TLP_USB_MODE\" = \"1\" ] && ! check_run_flag \"$USB_DONE\" && do_exit 0\n\n\n        # handle device\n        usb_suspend_device \"/sys$2\" \"udev\"\n        ;;\n\n    disk) # (s)ata disks attached via usb\n        get_power_mode; pwrmode=$?\n        dev=\"${2##*/block/}\"\n        set_ahci_disk_runtime_pm $pwrmode \"$dev\"\n        set_disk_apm_level $pwrmode \"$dev\"\n        set_disk_spindown_timeout $pwrmode \"$dev\"\n        set_disk_iosched \"$dev\"\n        ;;\nesac\n\ndo_exit 0\n"
        },
        {
          "name": "tlp-usblist",
          "type": "blob",
          "size": 3.509765625,
          "content": "#!/usr/bin/perl\n# tlp-usblist - list usb device info with autosuspend attributes\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\npackage tlp_usblist;\nuse strict;\nuse warnings;\n\n# --- Constants\nuse constant USBD => \"/sys/bus/usb/devices\";\n\n# --- Modules\nuse Getopt::Long;\n\n# --- Global vars\nmy %usbdevices;\n\nmy $verbose = 0;\n\n# --- Subroutines\n\n# Read content from a sysfile\n# $_[0]: input file\n# return: content / empty string if nonexistent or not readable\nsub catsysf {\n    my $fname = \"$_[0]\";\n    my $sysval = \"\";\n    if ( open (my $sysf, \"<\", $fname) ) {\n        chomp ($sysval = <$sysf>);\n        close ($sysf);\n    }\n    return $sysval;\n}\n\n# Read device driver from DEVICE/uevent\n# $_[0]: (sub)device base path\n# return: driver / empty string if uevent nonexistent or not readable\nsub getdriver {\n    my $dpath = \"$_[0]\";\n    my $driver = \"\";\n    if ( open (my $sysf, \"<\", $dpath . \"/uevent\") ) {\n        # read file line by line\n        while (<$sysf>) {\n            # match line content and return DRIVER= value\n            if ( s/^DRIVER=(.*)/$1/ ) {\n                chomp ($driver = $_);\n                last; # break loop\n            }\n        }\n        close ($sysf);\n    }\n    return $driver\n}\n\n# Get drivers associated with USB device by iterating subdevices\n# $_[0]: device base path\n# return:  driver list / \"no driver\" if none found\nsub usbdriverlist {\n    my $dpath = \"$_[0]\";\n    my $driverlist = \"\";\n    # iterate subdevices\n    foreach my $subdev (glob $dpath . \"/*:*\") {\n        # get subdevice driver\n        my $driver = getdriver (\"$subdev\");\n        if ( $driver ) {\n            if (index ($driverlist, $driver) == -1) {\n                if ($driverlist) { $driverlist = $driverlist . \", \" . $driver; }\n                else { $driverlist = $driver; }\n            } # if index\n        } # if $driver\n    } # foreach $subdev\n\n    if (! $driverlist) { $driverlist = \"no driver\"; }\n    return $driverlist\n}\n\n# --- MAIN\n# parse arguments\nGetOptions ('verbose' => \\$verbose);\n\n# Read USB device tree attributes as arrays into %usbdevices hash, indexed by Bus_Device\nforeach my $udev (grep { ! /:/ } glob USBD . \"/*\") {\n    my $usbv = \"(autosuspend not available)\";\n\n    # get device id\n    my $usbk = sprintf (\"%03d_%03d\", catsysf (\"$udev/busnum\"), catsysf (\"$udev/devnum\") );\n\n    # get device mode and timeout\n    if ( length (my $ptimeout = catsysf (\"$udev/power/autosuspend_delay_ms\"))\n        && length (my $pmode = catsysf (\"$udev/power/control\")) ) {\n        if ( $verbose ) {\n            # get device status\n            my $pstatus = catsysf (\"$udev/power/runtime_status\");\n            # format: device mode, timeout, status\n            $usbv = sprintf (\"control = %-5s autosuspend_delay_ms = %4d, runtime_status = %-9s\", $pmode . \",\", $ptimeout, $pstatus);\n        } else {\n            # format: device mode, timeout\n            $usbv = sprintf (\"control = %-5s autosuspend_delay_ms = %4d\", $pmode . \",\", $ptimeout);\n        }\n    }\n\n    # store formatted result in hash\n    @{$usbdevices{$usbk}} = ($udev, $usbv);\n}\n\n# Output device list with attributes and drivers\nforeach (`lsusb 2> /dev/null`) {\n    my ($bus, $dev, $usbid, $desc) = /Bus (\\S+) Device (\\S+): ID (\\S+)[ ]+(.*)/;\n    if (length ($bus) and length ($dev) and length ($usbid) ) {\n        my $usbk = $bus . \"_\" . $dev;\n        $desc =~ s/\\s+$//;\n        $desc ||= \"<unknown>\";\n        print \"Bus $bus Device $dev ID $usbid $usbdevices{$usbk}[1] -- $desc (\"\n            . usbdriverlist($usbdevices{$usbk}[0]) . \")\\n\";\n    }\n}\n\nexit 0;\n"
        },
        {
          "name": "tlp.conf.in",
          "type": "blob",
          "size": 19.3271484375,
          "content": "# ------------------------------------------------------------------------------\n# /etc/tlp.conf - TLP user configuration (version @TLPVER@)\n# See full explanation: https://linrunner.de/tlp/settings\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n#\n# Settings are read in the following order:\n#\n# 1. Intrinsic defaults\n# 2. /etc/tlp.d/*.conf - Drop-in customization snippets\n# 3. /etc/tlp.conf     - User configuration (this file)\n#\n# Please note:\n# - If parameters are specified more than once, the last occurrence takes\n#   precedence. This also means that any parameters defined here will take\n#   precedence over any drop-ins.\n# - You can however, append values to a parameter already defined as intrinsic\n#   default or in a previously read file: use PARAMETER+=\"add values\".\n# - Important: all parameters are disabled here. Remove the leading '#' if you\n#   want to enable a feature without a default or if you want to set a value\n#   other than the default.\n# - Parameters must always be specified in pairs, i.e. for AC and BAT.\n#   If you omit one of them, the value you set will apply to both power\n#   sources, since a change will only occur if different values are defined.\n# - To completely disable a parameter, use PARAMETER=\"\".\n# Legend for defaults:\n# - Default *: intrinsic default that is effective when the parameter is\n#   missing or the line has a leading #'.\n# - Default <none>: do nothing or use kernel/hardware defaults.\n#\n# ------------------------------------------------------------------------------\n# tlp - Parameters for power saving\n\n# Set to 0 to disable, 1 to enable TLP.\n# Default: 1\n\n#TLP_ENABLE=1\n\n# Control how warnings about invalid settings are issued:\n#   0=disabled,\n#   1=background tasks (boot, resume, change of power source) report to syslog,\n#   2=shell commands report to the terminal (stderr),\n#   3=combination of 1 and 2\n# Default: 3\n\n#TLP_WARN_LEVEL=3\n\n# Colorize error, warning, notice and success messages. Colors are specified\n# with ANSI codes:\n#   1=bold black, 90=grey, 91=red, 92=green, 93=yellow, 94=blue, 95=magenta,\n#   96=cyan, 97=white.\n# Other colors are possible, refer to:\n#   https://en.wikipedia.org/wiki/ANSI_escape_code#3-bit_and_4-bit\n# Colors must be specified in the order \"<error> <warning> <notice> <success>\".\n# By default, errors are shown in red, warnings in yellow, notices in bold\n# and success in green.\n# Default: \"91 93 1 92\"\n\n#TLP_MSG_COLORS=\"91 93 1 92\"\n\n# Operation mode when no power supply can be detected: AC, BAT.\n# Concerns some desktop and embedded hardware only.\n# Default: <none>\n\n#TLP_DEFAULT_MODE=AC\n\n# Operation mode select: 0=depend on power source, 1=always use TLP_DEFAULT_MODE\n# Note: use in conjunction with TLP_DEFAULT_MODE=BAT for BAT settings on AC.\n# Default: 0\n\n#TLP_PERSISTENT_DEFAULT=0\n\n# Power supply classes to ignore when determining operation mode: AC, USB, BAT.\n# Separate multiple classes with spaces.\n# Note: try on laptops where operation mode AC/BAT is incorrectly detected.\n# Default: <none>\n\n#TLP_PS_IGNORE=\"BAT\"\n\n# Seconds laptop mode has to wait after the disk goes idle before doing a sync.\n# Non-zero value enables, zero disables laptop mode.\n# Default: 0 (AC), 2 (BAT)\n\n#DISK_IDLE_SECS_ON_AC=0\n#DISK_IDLE_SECS_ON_BAT=2\n\n# Dirty page values (timeouts in secs).\n# Default: 15 (AC), 60 (BAT)\n\n#MAX_LOST_WORK_SECS_ON_AC=15\n#MAX_LOST_WORK_SECS_ON_BAT=60\n\n# Select a CPU scaling driver operation mode.\n# Intel CPU with intel_pstate driver:\n#   active, passive.\n# AMD Zen 2 or newer CPU with amd-pstate driver as of kernel 6.3/6.4(*):\n#   active, passive, guided(*).\n# Default: <none>\n#CPU_DRIVER_OPMODE_ON_AC=active\n#CPU_DRIVER_OPMODE_ON_BAT=active\n\n# Select a CPU frequency scaling governor.\n# Intel CPU with intel_pstate driver or\n# AMD CPU with amd-pstate driver in active mode ('amd-pstate-epp'):\n#   performance, powersave(*).\n# Intel CPU with intel_pstate driver in passive mode ('intel_cpufreq') or\n# AMD CPU with amd-pstate driver in passive or guided mode ('amd-pstate') or\n# Intel, AMD and other CPU brands with acpi-cpufreq driver:\n#   conservative, ondemand(*), userspace, powersave, performance, schedutil(*).\n# Use tlp-stat -p to show the active driver and available governors.\n# Important:\n#   Governors marked (*) above are power efficient for *almost all* workloads\n#   and therefore kernel and most distributions have chosen them as defaults.\n#   You should have done your research about advantages/disadvantages *before*\n#   changing the governor.\n# Default: <none>\n\n#CPU_SCALING_GOVERNOR_ON_AC=powersave\n#CPU_SCALING_GOVERNOR_ON_BAT=powersave\n\n# Set the min/max frequency available for the scaling governor.\n# Possible values depend on your CPU. For available frequencies see\n# the output of tlp-stat -p.\n# Notes:\n# - Min/max frequencies must always be specified for both AC *and* BAT\n# - Not recommended for use with the intel_pstate driver, use\n#   CPU_MIN/MAX_PERF_ON_AC/BAT below instead\n# Default: <none>\n\n#CPU_SCALING_MIN_FREQ_ON_AC=0\n#CPU_SCALING_MAX_FREQ_ON_AC=0\n#CPU_SCALING_MIN_FREQ_ON_BAT=0\n#CPU_SCALING_MAX_FREQ_ON_BAT=0\n\n# Set CPU energy/performance policies EPP and EPB:\n#   performance, balance_performance, default, balance_power, power.\n# Values are given in order of increasing power saving.\n# Requires:\n# * Intel CPU\n#   EPP: Intel Core i 6th gen. or newer CPU with intel_pstate driver\n#   EPB: Intel Core i 2nd gen. or newer CPU with intel_pstate driver\n#   EPP and EPB are mutually exclusive: when EPP is available, Intel CPUs\n#   will not honor EPB. Only the matching feature will be applied by TLP.\n# * AMD Zen 2 or newer CPU\n#   EPP: amd-pstate driver in active mode ('amd-pstate-epp') as of kernel 6.3\n# Default: balance_performance (AC), balance_power (BAT)\n\n#CPU_ENERGY_PERF_POLICY_ON_AC=balance_performance\n#CPU_ENERGY_PERF_POLICY_ON_BAT=balance_power\n\n# Set Intel CPU P-state performance: 0..100 (%).\n# Limit the max/min P-state to control the power dissipation of the CPU.\n# Values are stated as a percentage of the available performance.\n# Requires Intel Core i 2nd gen. or newer CPU with intel_pstate driver.\n# Default: <none>\n\n#CPU_MIN_PERF_ON_AC=0\n#CPU_MAX_PERF_ON_AC=100\n#CPU_MIN_PERF_ON_BAT=0\n#CPU_MAX_PERF_ON_BAT=30\n\n# Set the CPU \"turbo boost\" (Intel) or \"core performance boost\" (AMD) feature:\n#   0=disable, 1=allow.\n# Allows to raise the maximum frequency/P-state of some cores if the\n# CPU chip is not fully utilized and below it's intended thermal budget.\n# Note: a value of 1 does *not* activate boosting, it just allows it.\n# Default: <none>\n\n#CPU_BOOST_ON_AC=1\n#CPU_BOOST_ON_BAT=0\n\n# Set CPU dynamic boost feature:\n#   0=disable, 1=enable.\n# Improve performance by increasing minimum P-state limit dynamically\n# whenever a task previously waiting on I/O is selected to run.\n# Requires Intel Core i  6th gen. or newer CPU: intel_pstate driver in active mode.\n# Note: AMD CPUs currently have no tunable for this.\n# Default: <none>\n\n#CPU_HWP_DYN_BOOST_ON_AC=1\n#CPU_HWP_DYN_BOOST_ON_BAT=0\n\n# Kernel NMI Watchdog:\n#   0=disable (default, saves power), 1=enable (for kernel debugging only).\n# Default: 0\n\n#NMI_WATCHDOG=0\n\n# Select platform profile:\n#   performance, balanced, low-power.\n# Controls system operating characteristics around power/performance levels,\n# thermal and fan speed. Values are given in order of increasing power saving.\n# Note: check the output of tlp-stat -p to determine availability on your\n# hardware and additional profiles such as: balanced-performance, quiet, cool.\n# Default: <none>\n\n#PLATFORM_PROFILE_ON_AC=performance\n#PLATFORM_PROFILE_ON_BAT=low-power\n\n# System suspend mode:\n#   s2idle: Idle standby - a pure software, light-weight, system sleep state,\n#   deep: Suspend to RAM - the whole system is put into a low-power state,\n#     except for memory, usually resulting in higher savings than s2idle.\n# CAUTION: changing suspend mode may lead to system instability and even\n# data loss. As for the availability of different modes on your system,\n# check the output of tlp-stat -s. If unsure, stick with the system default\n# by not enabling this.\n# Default: <none>\n\n#MEM_SLEEP_ON_AC=s2idle\n#MEM_SLEEP_ON_BAT=deep\n\n# Define disk devices on which the following DISK/AHCI_RUNTIME parameters act.\n# Separate multiple devices with spaces.\n# Devices can be specified by disk ID also (lookup with: tlp diskid).\n# Default: \"nvme0n1 sda\"\n\n#DISK_DEVICES=\"nvme0n1 sda\"\n\n# Disk advanced power management level: 1..254, 255 (max saving, min, off).\n# Levels 1..127 may spin down the disk; 255 allowable on most drives.\n# Separate values for multiple disks with spaces. Use the special value 'keep'\n# to keep the hardware default for the particular disk.\n# Default: 254 (AC), 128 (BAT)\n\n#DISK_APM_LEVEL_ON_AC=\"254 254\"\n#DISK_APM_LEVEL_ON_BAT=\"128 128\"\n\n# Exclude disk classes from advanced power management (APM):\n#   sata, ata, usb, ieee1394.\n# Separate multiple classes with spaces.\n# CAUTION: USB and IEEE1394 disks may fail to mount or data may get corrupted\n# with APM enabled. Be careful and make sure you have backups of all affected\n# media before removing 'usb' or 'ieee1394' from the denylist!\n# Default: \"usb ieee1394\"\n\n#DISK_APM_CLASS_DENYLIST=\"usb ieee1394\"\n\n# Hard disk spin down timeout:\n#   0:        spin down disabled\n#   1..240:   timeouts from 5s to 20min (in units of 5s)\n#   241..251: timeouts from 30min to 5.5 hours (in units of 30min)\n# See 'man hdparm' for details.\n# Separate values for multiple disks with spaces. Use the special value 'keep'\n# to keep the hardware default for the particular disk.\n# Default: <none>\n\n#DISK_SPINDOWN_TIMEOUT_ON_AC=\"0 0\"\n#DISK_SPINDOWN_TIMEOUT_ON_BAT=\"0 0\"\n\n# Select I/O scheduler for the disk devices.\n# Multi queue (blk-mq) schedulers:\n#   mq-deadline(*), none, kyber, bfq\n# Single queue schedulers:\n#   deadline(*), cfq, bfq, noop\n# (*) recommended.\n# Separate values for multiple disks with spaces. Use the special value 'keep'\n# to keep the kernel default scheduler for the particular disk.\n# Notes:\n# - Multi queue (blk-mq) may need kernel boot option 'scsi_mod.use_blk_mq=1'\n#   and 'modprobe mq-deadline-iosched|kyber|bfq' on kernels < 5.0\n# - Single queue schedulers are legacy now and were removed together with\n#   the old block layer in kernel 5.0\n# Default: keep\n\n#DISK_IOSCHED=\"mq-deadline mq-deadline\"\n\n# AHCI link power management (ALPM) for SATA disks:\n#   min_power, med_power_with_dipm(*), medium_power, max_performance.\n# (*) recommended.\n# Multiple values separated with spaces are tried sequentially until success.\n# Default: med_power_with_dipm (AC & BAT)\n\n#SATA_LINKPWR_ON_AC=\"med_power_with_dipm\"\n#SATA_LINKPWR_ON_BAT=\"med_power_with_dipm\"\n\n# Exclude SATA links from AHCI link power management (ALPM).\n# SATA links are specified by their host. Refer to the output of\n# tlp-stat -d to determine the host; the format is \"hostX\".\n# Separate multiple hosts with spaces.\n# Default: <none>\n\n#SATA_LINKPWR_DENYLIST=\"host1\"\n\n# Runtime Power Management for NVMe, SATA, ATA and USB disks\n# as well as SATA ports:\n#   on=disable, auto=enable.\n# Note: SATA controllers are PCIe bus devices and handled by RUNTIME_PM further\n# down.\n\n# Default: on (AC), auto (BAT)\n\n#AHCI_RUNTIME_PM_ON_AC=on\n#AHCI_RUNTIME_PM_ON_BAT=auto\n\n# Seconds of inactivity before disk is suspended.\n# Note: effective only when AHCI_RUNTIME_PM_ON_AC/BAT is activated.\n# Default: 15\n\n#AHCI_RUNTIME_PM_TIMEOUT=15\n\n# Power off optical drive in UltraBay/MediaBay: 0=disable, 1=enable.\n# Drive can be powered on again by releasing (and reinserting) the eject lever\n# or by pressing the disc eject button on newer models.\n# Note: an UltraBay/MediaBay hard disk is never powered off.\n# Default: 0\n\n#BAY_POWEROFF_ON_AC=0\n#BAY_POWEROFF_ON_BAT=0\n\n# Optical drive device to power off\n# Default: sr0\n\n#BAY_DEVICE=\"sr0\"\n\n# Set the min/max/turbo frequency for the Intel GPU.\n# Possible values depend on your hardware. For available frequencies see\n# the output of tlp-stat -g.\n# Default: <none>\n\n#INTEL_GPU_MIN_FREQ_ON_AC=0\n#INTEL_GPU_MIN_FREQ_ON_BAT=0\n#INTEL_GPU_MAX_FREQ_ON_AC=0\n#INTEL_GPU_MAX_FREQ_ON_BAT=0\n#INTEL_GPU_BOOST_FREQ_ON_AC=0\n#INTEL_GPU_BOOST_FREQ_ON_BAT=0\n\n# AMD GPU power management.\n# Performance level (DPM): auto, low, high; auto is recommended.\n# Note: requires amdgpu or radeon driver.\n# Default: auto\n\n#RADEON_DPM_PERF_LEVEL_ON_AC=auto\n#RADEON_DPM_PERF_LEVEL_ON_BAT=auto\n\n# Dynamic power management method (DPM): balanced, battery, performance.\n# Note: radeon driver only.\n# Default: <none>\n\n#RADEON_DPM_STATE_ON_AC=performance\n#RADEON_DPM_STATE_ON_BAT=battery\n\n# Display panel adaptive backlight modulation (ABM) level: 0(off), 1..4.\n# Values 1..4 control the maximum brightness reduction allowed by the ABM\n# algorithm, where 1 represents the least and 4 the most power saving.\n# Notes:\n# - Requires AMD Vega or newer GPU with amdgpu driver as of kernel 6.9\n# - Savings are made at the expense of color balance\n# Default: 0 (AC), 1 (BAT)\n\n#AMDGPU_ABM_LEVEL_ON_AC=0\n#AMDGPU_ABM_LEVEL_ON_BAT=3\n\n# Wi-Fi power saving mode: on=enable, off=disable.\n# Default: off (AC), on (BAT)\n\n#WIFI_PWR_ON_AC=off\n#WIFI_PWR_ON_BAT=on\n\n# Disable Wake-on-LAN: Y/N.\n# Default: Y\n\n#WOL_DISABLE=Y\n\n# Enable audio power saving for Intel HDA, AC97 devices (timeout in secs).\n# A value of 0 disables, >= 1 enables power saving.\n# Note: 1 is recommended for Linux desktop environments with PulseAudio,\n# systems without PulseAudio may require 10.\n# Default: 1\n\n#SOUND_POWER_SAVE_ON_AC=1\n#SOUND_POWER_SAVE_ON_BAT=1\n\n# Disable controller too (HDA only): Y/N.\n# Note: effective only when SOUND_POWER_SAVE_ON_AC/BAT is activated.\n# Default: Y\n\n#SOUND_POWER_SAVE_CONTROLLER=Y\n\n# PCIe Active State Power Management (ASPM):\n#   default(*), performance, powersave, powersupersave.\n# (*) keeps BIOS ASPM defaults (recommended)\n# Default: <none>\n\n#PCIE_ASPM_ON_AC=default\n#PCIE_ASPM_ON_BAT=default\n\n# Runtime Power Management for PCIe bus devices: on=disable, auto=enable.\n# Default: on (AC), auto (BAT)\n\n#RUNTIME_PM_ON_AC=on\n#RUNTIME_PM_ON_BAT=auto\n\n# Exclude listed PCIe device adresses from Runtime PM.\n# Note: this preserves the kernel driver default, to force a certain state\n# use RUNTIME_PM_ENABLE/DISABLE instead.\n# Separate multiple addresses with spaces.\n# Use lspci to get the adresses (1st column).\n# Default: <none>\n\n#RUNTIME_PM_DENYLIST=\"11:22.3 44:55.6\"\n\n# Exclude PCIe devices assigned to the listed drivers from Runtime PM.\n# Note: this preserves the kernel driver default, to force a certain state\n# use RUNTIME_PM_ENABLE/DISABLE instead.\n# Separate multiple drivers with spaces.\n# Default: \"mei_me nouveau radeon xhci_hcd\", use \"\" to disable completely.\n\n#RUNTIME_PM_DRIVER_DENYLIST=\"mei_me nouveau radeon xhci_hcd\"\n\n# Permanently enable/disable Runtime PM for listed PCIe device addresses\n# (independent of the power source). This has priority over all preceding\n# Runtime PM settings. Separate multiple addresses with spaces.\n# Use lspci to get the adresses (1st column).\n# Default: <none>\n\n#RUNTIME_PM_ENABLE=\"11:22.3\"\n#RUNTIME_PM_DISABLE=\"44:55.6\"\n\n# Set to 0 to disable, 1 to enable USB autosuspend feature.\n# Default: 1\n\n#USB_AUTOSUSPEND=1\n\n# Exclude listed devices from USB autosuspend (separate with spaces).\n# Use lsusb to get the ids.\n# Note: input devices (usbhid) and libsane-supported scanners are excluded\n# automatically.\n# Default: <none>\n\n#USB_DENYLIST=\"1111:2222 3333:4444\"\n\n# Exclude audio devices from USB autosuspend:\n#   0=do not exclude, 1=exclude.\n# Default: 1\n\n#USB_EXCLUDE_AUDIO=1\n\n# Exclude bluetooth devices from USB autosuspend:\n#   0=do not exclude, 1=exclude.\n# Default: 0\n\n#USB_EXCLUDE_BTUSB=0\n\n# Exclude phone devices from USB autosuspend:\n#   0=do not exclude, 1=exclude (enable charging).\n# Default: 0\n\n#USB_EXCLUDE_PHONE=0\n\n# Exclude printers from USB autosuspend:\n#   0=do not exclude, 1=exclude.\n# Default: 1\n\n#USB_EXCLUDE_PRINTER=1\n\n# Exclude WWAN devices from USB autosuspend:\n#   0=do not exclude, 1=exclude.\n# Default: 0\n\n#USB_EXCLUDE_WWAN=0\n\n# Allow USB autosuspend for listed devices even if already denylisted or\n# excluded above (separate with spaces). Use lsusb to get the ids.\n# Default: 0\n\n#USB_ALLOWLIST=\"1111:2222 3333:4444\"\n\n# Restore radio device state (Bluetooth, WiFi, WWAN) from previous shutdown\n# on system startup: 0=disable, 1=enable.\n# Note: the parameters DEVICES_TO_DISABLE/ENABLE_ON_STARTUP/SHUTDOWN below\n# are ignored when this is enabled.\n# Default: 0\n\n#RESTORE_DEVICE_STATE_ON_STARTUP=0\n\n# Radio devices to disable on startup: bluetooth, nfc, wifi, wwan.\n# Separate multiple devices with spaces.\n# Default: <none>\n\n#DEVICES_TO_DISABLE_ON_STARTUP=\"bluetooth nfc wifi wwan\"\n\n# Radio devices to enable on startup: bluetooth, nfc, wifi, wwan.\n# Separate multiple devices with spaces.\n# Default: <none>\n\n#DEVICES_TO_ENABLE_ON_STARTUP=\"wifi\"\n\n# Radio devices to enable on AC: bluetooth, nfc, wifi, wwan.\n# Default: <none>\n\n#DEVICES_TO_ENABLE_ON_AC=\"bluetooth nfc wifi wwan\"\n\n# Radio devices to disable on battery: bluetooth, nfc, wifi, wwan.\n# Default: <none>\n\n#DEVICES_TO_DISABLE_ON_BAT=\"bluetooth nfc wifi wwan\"\n\n# Radio devices to disable on battery when not in use (not connected):\n#   bluetooth, nfc, wifi, wwan.\n# Default: <none>\n\n#DEVICES_TO_DISABLE_ON_BAT_NOT_IN_USE=\"bluetooth nfc wifi wwan\"\n\n# Battery Care -- Charge thresholds\n# Charging starts when the charger is connected and the charge level\n# is below the start threshold. Charging stops when the charge level\n# is above the stop threshold.\n# Required hardware: Lenovo ThinkPads and select other laptop brands\n# are driven via specific plugins\n# - Active plugin and support status are shown by tlp-stat -b\n# - Vendor specific threshold levels are shown by tlp-stat -b, some\n#   laptops support only 1 (on)/ 0 (off) instead of a percentage level\n# - When your hardware supports a start *and* a stop threshold, you must\n#   specify both, otherwise TLP will refuse to apply the single threshold\n# - When your hardware supports only a stop threshold, set the start\n#   value to 0\n# - Older ThinkPads may require an external kernel module, refer to the\n#   output of tlp-stat -b\n# For further explanation and vendor specific details refer to\n# - https://linrunner.de/tlp/settings/battery.html\n# - https://linrunner.de/tlp/settings/bc-vendors.html\n\n# BAT0: Primary / Main / Internal battery\n# Note: also use for batteries BATC, BATT and CMB0\n# Default: <none>\n\n# Battery charge level below which charging will begin.\n#START_CHARGE_THRESH_BAT0=75\n# Battery charge level above which charging will stop.\n#STOP_CHARGE_THRESH_BAT0=80\n\n# BAT1: Secondary / Ultrabay / Slice / Replaceable battery\n# Note: primary on some laptops\n# Default: <none>\n\n# Battery charge level below which charging will begin.\n#START_CHARGE_THRESH_BAT1=75\n# Battery charge level above which charging will stop.\n#STOP_CHARGE_THRESH_BAT1=80\n\n# Restore charge thresholds when AC is unplugged: 0=disable, 1=enable.\n# Default: 0\n\n#RESTORE_THRESHOLDS_ON_BAT=1\n\n# ------------------------------------------------------------------------------\n# tlp-rdw - Parameters for the radio device wizard\n\n# Possible devices: bluetooth, wifi, wwan.\n# Separate multiple radio devices with spaces.\n# Default: <none> (for all parameters below)\n\n# Radio devices to disable on connect.\n\n#DEVICES_TO_DISABLE_ON_LAN_CONNECT=\"wifi wwan\"\n#DEVICES_TO_DISABLE_ON_WIFI_CONNECT=\"wwan\"\n#DEVICES_TO_DISABLE_ON_WWAN_CONNECT=\"wifi\"\n\n# Radio devices to enable on disconnect.\n\n#DEVICES_TO_ENABLE_ON_LAN_DISCONNECT=\"wifi wwan\"\n#DEVICES_TO_ENABLE_ON_WIFI_DISCONNECT=\"\"\n#DEVICES_TO_ENABLE_ON_WWAN_DISCONNECT=\"\"\n\n# Radio devices to enable/disable when docked.\n\n#DEVICES_TO_ENABLE_ON_DOCK=\"\"\n#DEVICES_TO_DISABLE_ON_DOCK=\"\"\n\n# Radio devices to enable/disable when undocked.\n\n#DEVICES_TO_ENABLE_ON_UNDOCK=\"wifi\"\n#DEVICES_TO_DISABLE_ON_UNDOCK=\"\"\n"
        },
        {
          "name": "tlp.in",
          "type": "blob",
          "size": 14.9990234375,
          "content": "#!/bin/sh\n# tlp - adjust power settings\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# --- Source libraries\n\nfor lib in @TLP_TLIB@/tlp-func-base @TLP_FLIB@/[0-9][0-9]*; do\n    # shellcheck disable=SC1090\n    . \"$lib\" || exit 70\ndone\n\n# --- Constants\n\n# --- Subroutines\n\napply_common_settings () { # apply settings common to all modes\n                           # $1: 0=ac mode, 1=battery mode\n    set_laptopmode \"$1\"\n    set_dirty_parms \"$1\"\n    set_platform_profile \"$1\"\n    set_cpu_driver_opmode \"$1\"\n    set_cpu_scaling_governor \"$1\"\n    set_cpu_scaling_min_max_freq \"$1\"\n    set_intel_cpu_perf_pct \"$1\"\n    set_cpu_boost_all \"$1\"\n    set_cpu_dyn_boost \"$1\"\n    set_cpu_perf_policy \"$1\"\n    set_nmi_watchdog\n    set_mem_sleep \"$1\"\n    set_ahci_port_runtime_pm \"$1\"\n    set_runtime_pm \"$1\"\n    set_ahci_disk_runtime_pm \"$1\"\n    set_sata_link_power \"$1\"\n    set_disk_apm_level \"$1\"\n    set_disk_spindown_timeout \"$1\"\n    set_disk_iosched\n    set_pcie_aspm \"$1\"\n    set_intel_gpu_min_max_boost_freq \"$1\"\n    set_amdgpu_profile \"$1\"\n    set_abm_level \"$1\"\n    set_wifi_power_mode \"$1\"\n    disable_wake_on_lan\n    set_sound_power_mode \"$1\"\n\n    return 0\n}\n\napply_suspend_settings () { # apply settings before suspending\n\n    set_ahci_port_runtime_pm \"2\"\n    set_ahci_disk_runtime_pm \"2\"\n    set_pcie_aspm \"2\"\n\n    return 0\n}\n\nshow_usage () {\n    echo \"Usage: tlp start|true|bat|false|ac|usb|bayoff|chargeonce|discharge|setcharge|fullcharge|recalibrate|diskid\" 1>&2\n}\n\nparse_args () { # parse command-line arguments\n    # $@:       arguments to parse\n    # retval:   $_cmd:  command;\n    #           $_cmd2: subcommand;\n    #           $_carg1,\n    #           $_carg2,\n    #           $_carg3: command arguments\n\n    # parsing control: 'nil' means that the element is still expected\n    _cmd=\"nil\"\n    _cmd2=\"nil\"\n    _carg1=\"nil\"\n    _carg2=\"nil\"\n    _carg3=\"nil\"\n\n    # iterate arguments until exhausted or delimiter '--' reached\n    while [ $# -gt 0 ]; do\n        if [ \"$1\" = \"--\" ]; then\n            break;\n\n        elif [ \"$_cmd\" = \"nil\" ]; then\n            # command\n            case \"$1\" in\n                ac|auto|bat|bayoff|false|diskid|resume|suspend|start|true|usb)\n                    # commands without further arguments\n                    _cmd=\"$1\"\n                    _cmd2=\"\"\n                    _carg1=\"\"\n                    _carg2=\"\"\n                    _carg3=\"\"\n                    ;;\n\n                chargeonce|fullcharge|recalibrate)\n                    # commands with one or no arguments\n                    _cmd=\"$1\"\n                    _cmd2=\"\"\n                    _carg2=\"\"\n                    _carg3=\"\"\n                    ;;\n\n                discharge)\n                    # command with up to two arguments\n                    _cmd=\"$1\"\n                    _cmd2=\"\"\n                    _carg3=\"\"\n                    ;;\n\n                setcharge)\n                    # command with up to three arguments\n                    _cmd=\"$1\"\n                    _cmd2=\"\"\n                    ;;\n\n                init)\n                    # command with subcommand and no arguments\n                    _cmd=\"$1\"\n                    _carg1=\"\"\n                    _carg2=\"\"\n                    _carg3=\"\"\n                    ;;\n\n                stat)\n                    # unsupported command\n                    cecho \"Error: 'tlp stat' no longer supported, use 'tlp-stat' instead.\"  1>&2\n                    do_exit 3\n                    ;;\n\n                noop)\n                    # no operation\n                    _cmd=\"$1\"\n                    _cmd2=\"\"\n                    ;;\n\n                --version)\n                    # no operation\n                    _cmd=\"version\"\n                    _cmd2=\"\"\n                    ;;\n\n                *)\n                    # unknown command\n                    cecho \"Error: unknown command \\\"$1\\\".\"  1>&2\n                    show_usage\n                    do_exit 3\n                    ;;\n            esac\n\n        elif [ \"$_cmd2\" = \"nil\" ]; then\n            # subcommand\n            case \"$1\" in\n                start|stop|restart|force-reload)\n                    _cmd2=\"$1\"\n                    ;;\n\n                *) # unknown subcommand\n                    echo \"Usage: tlp init {start|stop|restart|force-reload}\" >&2\n                    do_exit 3\n                    ;;\n            esac\n\n        elif [ \"$_carg1\" = \"nil\" ]; then\n            # first command argument\n            _carg1=\"$1\"\n\n        elif [ \"$_carg2\" = \"nil\" ]; then\n            # second command argument\n            _carg2=\"$1\"\n\n        elif [ \"$_carg3\" = \"nil\" ]; then\n            # third command argument\n            _carg3=\"$1\"\n\n        fi\n\n        shift # next argument\n    done # while arguments\n\n    if  [ \"$_cmd\" = \"nil\" ]; then\n        # no command parsed\n        show_usage\n        do_exit 3\n    fi\n\n    # clear missing arguments\n    [ \"$_carg1\" = \"nil\" ] && _carg1=\"\"\n    [ \"$_carg2\" = \"nil\" ] && _carg2=\"\"\n    [ \"$_carg3\" = \"nil\" ] && _carg3=\"\"\n\n    return 0\n}\n\n# --- MAIN\nparse_args \"$@\"\n\nif [ \"$_cmd\" = \"version\" ]; then\n    print_version\n    exit 0\nfi\n\n# read configuration: quit on error, trace allowed\nread_config 1 0\nparse_args4config \"$@\"\ncprintf_init\n\ncheck_tlp_enabled 1 || do_exit 1\nadd_sbin2path\n\nif [ -z \"$_cmd2\" ]; then\n    echo_debug \"run\" \"+++ $_cmd ($TLPVER) ++++++++++++++++++++++++++++++++++++++++\"\nelse\n    echo_debug \"run\" \"+++ $_cmd $_cmd2 ($TLPVER) ++++++++++++++++++++++++++++++++++++++++\"\nfi\n\n# shellcheck disable=SC2154\nif [ -n \"$_addpath\" ]; then\n    # shellcheck disable=SC2154\n    echo_debug \"path\" \"PATH=${_oldpath}[${_addpath}]\"\nelse\n    # shellcheck disable=SC2154\n    echo_debug \"path\" \"PATH=${_oldpath}\"\nfi\necho_debug \"run\" \"SHELL=$(print_shell); umask=$(umask)\"\n\n# get current power state\nget_power_mode \"$_cmd\"; pwrmode=$?\nget_manual_mode\n\n# determine new power state\ncase \"$_cmd\" in\n    init|start)\n        # discard manual mode\n        clear_manual_mode\n        ;;\n\n    auto|resume)\n        # if manual mode is set, use instead of current power state\n        # shellcheck disable=SC2154\n        case $_manual_mode in\n            0|1) pwrmode=\"$_manual_mode\" ;;\n        esac\n        ;;\n\n    true|bat)\n        pwrmode=1\n        set_manual_mode 1\n        ;;\n\n    false|ac)\n        pwrmode=0\n        set_manual_mode 0\n        ;;\nesac\n\n# shellcheck disable=SC2154\ncase \"$_syspwr\" in\n    0) echo_debug \"run\" \"power_source=ac\" ;;\n    1) echo_debug \"run\" \"power_source=bat\" ;;\n    *) echo_debug \"run\" \"power_source=unknown ($_syspwr)\" ;;\nesac\n\necho_debug \"run\" \"manual_mode=$_manual_mode\"\n\ncase \"$pwrmode\" in\n    0) echo_debug \"run\" \"power_mode=ac\" ;;\n    1) echo_debug \"run\" \"power_mode=bat\" ;;\n    *) echo_debug \"run\" \"power_mode=unknown ($pwrmode)\" ;;\nesac\n\n# process command\nexitcode=0\n\ncase \"$_cmd\" in\n    init) # system initialization/shutdown: sysv, upstart, systemd, ...\n        check_root\n        # try to obtain lock (with timeout)\n        locked=0\n        if lock_tlp; then\n            locked=1\n        else\n            echo \"Failed to get lock, continuing anyway.\" 1>&2\n        fi\n\n        # do init business ...\n        # shellcheck disable=SC2034\n        _bgtask=1\n        case \"$_cmd2\" in\n            start)\n                # apply power save settings\n                compare_and_save_power_state \"$pwrmode\"\n                echo -n \"Applying power save settings...\"\n                apply_common_settings \"$pwrmode\"\n                poweroff_drivebay \"$pwrmode\" 0\n                [ \"$X_TLP_USB_MODE\" = \"1\" ] && set_usb_suspend 0 auto\n                echo \"done.\"\n\n                # apply battery settings\n                echo -n \"Setting battery charge thresholds...\"\n                init_batteries_thresholds\n                echo \"done.\"\n\n                # apply radio states\n                set_radio_device_states start\n                ;;\n\n            restart|force-reload)\n                # apply power save settings\n                compare_and_save_power_state \"$pwrmode\"\n                echo -n \"Applying power save settings...\"\n                apply_common_settings \"$pwrmode\"\n                poweroff_drivebay \"$pwrmode\" 0\n                [ \"$X_TLP_USB_MODE\" = \"1\" ] && set_usb_suspend 0 auto\n                echo \"done.\"\n\n                # apply battery settings\n                echo -n \"Setting battery charge thresholds...\"\n                init_batteries_thresholds\n                echo \"done.\"\n                ;;\n\n            stop)\n                # remove usb startup flag\n                [ -f \"$USB_DONE\" ] && rm \"$USB_DONE\"\n\n                # clear saved power state\n                clear_saved_power_state\n\n                if [ \"$X_TLP_SHUTDOWN_ACMODE\" = \"1\" ]; then\n                    # workaround (optional): apply ac settings\n                    echo -n \"Applying power save settings...\"\n                    apply_common_settings 0\n                    poweroff_drivebay \"$pwrmode\" 0\n                    echo \"done.\"\n                fi\n\n                # apply radio states\n                set_radio_device_states stop\n                ;;\n\n            *)\n                echo \"Usage: tlp init {start|stop|restart|force-reload}\" >&2\n                do_exit 3\n                ;;\n        esac\n\n        save_runconf\n        # unlock if necessary\n        [ $locked -eq 0 ] || unlock_tlp\n        ;;\n\n    auto) # set mode depending on state (called by udev rule)\n          # -- but only if not previously run for the same power state\n          # rationale: filter out duplicate power_supply udev events\n        check_root\n        # shellcheck disable=SC2034\n        _bgtask=1\n        check_services_activation_status\n        if lock_tlp_nb; then\n            if compare_and_save_power_state \"$pwrmode\"; then\n                apply_common_settings \"$pwrmode\"\n                poweroff_drivebay \"$pwrmode\" 0\n                set_radio_device_states \"$pwrmode\"\n                if [ \"$RESTORE_THRESHOLDS_ON_BAT\" = \"1\" ] \\\n                    && [ \"$pwrmode\" = \"1\" ]; then\n                    init_batteries_thresholds\n                fi\n                save_runconf\n            fi\n            unlock_tlp\n        fi\n        ;;\n\n    start) # set mode depending on state (interactive mode)\n        check_services_activation_status\n        check_root\n        if lock_tlp; then\n            compare_and_save_power_state \"$pwrmode\"\n            apply_common_settings \"$pwrmode\"\n            poweroff_drivebay \"$pwrmode\" 0\n            set_usb_suspend 0 auto\n            init_batteries_thresholds\n            set_radio_device_states \"$pwrmode\"\n            save_runconf\n            unlock_tlp\n\n            echo_started_mode \"$pwrmode\"\n        else\n            echo_tlp_locked\n        fi\n        ;;\n\n    true|bat) # set battery power mode\n        check_services_activation_status\n        check_root\n        if lock_tlp; then\n            compare_and_save_power_state 1\n            apply_common_settings 1\n            poweroff_drivebay \"$pwrmode\" 0\n            [ \"$X_TLP_USB_MODE\" = \"1\" ] && set_usb_suspend 0 auto\n            set_radio_device_states 1\n            save_runconf\n            unlock_tlp\n\n            echo_started_mode 1\n        else\n            echo_tlp_locked\n        fi\n        ;;\n\n    false|ac) # set ac power mode\n        check_services_activation_status\n        check_root\n        if lock_tlp; then\n            compare_and_save_power_state 0\n            apply_common_settings 0\n            poweroff_drivebay \"$pwrmode\" 0\n            [ \"$X_TLP_USB_MODE\" = \"1\" ] && set_usb_suspend 0 auto\n            set_radio_device_states 0\n            save_runconf\n            unlock_tlp\n\n            echo_started_mode 0\n        else\n            echo_tlp_locked\n        fi\n        ;;\n\n    suspend) # handle suspend/hibernate\n        check_root\n        save_device_states \"bluetooth wwan\"\n        suspend_drivebay \"$pwrmode\"\n\n        case \"$X_TLP_SUSPEND_ACMODE\" in\n            1) # workaround (optional): apply ac settings\n                if lock_tlp; then\n                    apply_common_settings 0\n                    save_runconf\n                    unlock_tlp\n                fi\n                ;;\n\n            0) # workaround disabled: do nothing\n                ;;\n\n            *) # workaround (default): apply selected settings to avoid freezes on wakeup\n                if lock_tlp; then\n                    apply_suspend_settings\n                    save_runconf\n                    unlock_tlp\n                fi\n                ;;\n        esac\n        ;;\n\n    resume) # handle resume\n        check_root\n        if lock_tlp; then\n            restore_device_states\n\n            compare_and_save_power_state \"$pwrmode\"\n            apply_common_settings \"$pwrmode\"\n            resume_drivebay \"$pwrmode\"\n            init_batteries_thresholds \"asus huawei lg lg-legacy\"\n            save_runconf\n            unlock_tlp\n        fi\n        ;;\n\n    usb) # Enable usb autosuspend\n        check_root\n        set_usb_suspend 1 auto\n        ;;\n\n    bayoff) # power off drive bay\n        check_root\n        poweroff_drivebay \"$pwrmode\" 1\n        ;;\n\n    setcharge) # set charge thresholds (temporarily)\n        check_root\n        # quoting args will break $# in setcharge_battery()\n        # shellcheck disable=SC2086\n        setcharge_battery $_carg1 $_carg2 $_carg3\n        exitcode=$?\n        ;;\n\n    fullcharge) # charge battery to 100% (temporarily)\n        if check_ac_power fullcharge; then\n            check_root\n            # quoting args will break $# in setcharge_battery()\n            # shellcheck disable=SC2086\n            setcharge_battery DEF DEF $_carg1\n            exitcode=$?\n            if [ $exitcode -eq 0 ]; then\n                cecho \"Charging starts now, keep AC connected.\" \"notice\" 1>&2\n            fi\n        else\n            exitcode=2\n        fi\n        ;;\n\n    chargeonce) # charge battery to stop threshold once\n        if check_ac_power chargeonce; then\n            check_root\n            # shellcheck disable=SC2086\n            chargeonce_battery \"$_carg1\"\n            exitcode=$?\n            if [ $exitcode -eq 0 ]; then\n                cecho \"Charging starts now, keep AC connected.\" \"notice\" 1>&2\n            fi\n        else\n            exitcode=2\n        fi\n        ;;\n\n    discharge) # discharge battery to target soc or completely\n        discharge_battery discharge \"$_carg1\" \"$_carg2\"\n        exitcode=$?\n        ;;\n\n    recalibrate) # recalibrate battery, i.e. discharge completely and charge to 100%\n        discharge_battery recalibrate \"$_carg1\"\n        exitcode=$?\n        ;;\n\n    diskid) # show disk id's\n        show_disk_ids\n        ;;\n\n    noop) # Debug: no operation\n        check_root\n        select_batdrv\n        batdrv_select_battery \"DEF\"\n        save_runconf\n        echo_message \"Debug: no operation performed.\"\n        echo_message \"Error: message color test.\"\n        echo_message \"Warning: message color test.\"\n        echo_message \"Notice: message color test.\"\n        echo_message \"Success: message color test.\" \"success\"\n        _bgtask=1\n        echo_message \"Debug: no operation performed.\"\n        echo_message \"Error: message color test.\"\n        echo_message \"Warning: message color test.\"\n        echo_message \"Notice: message color test.\"\n        echo_message \"Success: message color test.\" \"success\"\n        ;;\nesac\n\ndo_exit $exitcode\n"
        },
        {
          "name": "tlp.init",
          "type": "blob",
          "size": 0.8017578125,
          "content": "#!/bin/sh\n\n# tlp - system startup/shutdown\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# This software is licensed under the GPL v2 or later.\n#\n# chkconfig: 2345 98 01\n\n### BEGIN INIT INFO\n# Provides:          tlp\n# Required-Start:    $remote_fs\n# Required-Stop:     $remote_fs\n# Default-Start:     2 3 4 5\n# Default-Stop:      0 1 6\n# Short-Description: tlp start/stop script\n# Description:       Initialize tlp\n### END INIT INFO\n\n[ -r /lib/lsb/init-functions ] && . /lib/lsb/init-functions\n\nTLP=/usr/sbin/tlp\n[ -x $TLP ] || exit 0\n\ncase \"$1\" in\n    status)\n        tlp-stat -s\n        ;;\n\n    start|\\\n    stop|\\\n    restart|\\\n    force-reload)\n        $TLP init $1\n        ;;\n\n     *)\n        echo \"Usage: $0 start|stop|restart|force-reload|status\" 1>&2\n        exit 3\n        ;;\nesac\n\nexit 0\n"
        },
        {
          "name": "tlp.rules.in",
          "type": "blob",
          "size": 0.787109375,
          "content": "# tlp - udev rules\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n# handle change of power source ac/bat, ignore input device batteries\nACTION==\"change\", SUBSYSTEM==\"power_supply\", KERNEL!=\"hidpp_battery*\", RUN+=\"@TLP_SBIN@/tlp auto\"\n\n# handle added usb devices (exclude subdevices via DRIVER==\"USB\")\nACTION==\"add\", SUBSYSTEM==\"usb\", DRIVER==\"usb\", ENV{DEVTYPE}==\"usb_device\", RUN+=\"@TLP_ULIB@/tlp-usb-udev usb %p\"\n\n# handle added usb disk devices (exclude partitions via ENV{DEVTYPE}==\"disk\")\nACTION==\"add\", SUBSYSTEM==\"block\", ENV{DEVTYPE}==\"disk\", ENV{ID_BUS}==\"usb\",       RUN+=\"@TLP_ULIB@/tlp-usb-udev disk %p\"\nACTION==\"add\", SUBSYSTEM==\"block\", ENV{DEVTYPE}==\"disk\", ENV{ID_USB_TYPE}==\"disk\", RUN+=\"@TLP_ULIB@/tlp-usb-udev disk %p\"\n"
        },
        {
          "name": "tlp.service.in",
          "type": "blob",
          "size": 0.484375,
          "content": "# tlp - systemd startup/shutdown service\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# SPDX-License-Identifier: GPL-2.0-or-later\n\n[Unit]\nDescription=TLP system startup/shutdown\nAfter=multi-user.target NetworkManager.service\nBefore=shutdown.target\nDocumentation=https://linrunner.de/tlp\n\n[Service]\nType=oneshot\nRemainAfterExit=yes\nExecStart=@TLP_SBIN@/tlp init start\nExecReload=@TLP_SBIN@/tlp start\nExecStop=@TLP_SBIN@/tlp init stop\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "tlp.upstart.in",
          "type": "blob",
          "size": 0.421875,
          "content": "# tlp - system startup/shutdown\n#\n# Copyright (c) 2025 Thomas Koch <linrunner at gmx.net> and others.\n# This software is licensed under the GPL v2 or later.\n\ndescription \"tlp\"\n\nstart on ( virtual-filesystems and runlevel [2345] )\nstop on runlevel [!2345]\n\nenv TLP=@TLP_SBIN@/tlp\n\npre-start script\n    [ -x $TLP ] || exit 4\n    $TLP init start\n\nend script\n\npost-stop script\n    [ -x $TLP ] || exit 4\n    $TLP init stop\n\nend script\n\n\n"
        },
        {
          "name": "unit-tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}