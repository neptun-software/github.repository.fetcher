{
  "metadata": {
    "timestamp": 1736568563295,
    "page": 595,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjU5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fscarmen/sing-box",
      "stars": 1519,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.859375,
          "content": "# 第一个阶段：使用 OpenSSL 生成证书文件\nFROM alpine/openssl:latest AS openssl\n\n# 生成私钥和证书\nRUN openssl ecparam -genkey -name prime256v1 -out /private.key && \\\n    openssl req -new -x509 -days 36500 -key /private.key -out /cert.pem -subj \"/CN=mozilla.org\"\n\n# 第二个阶段：使用 Alpine 镜像并复制证书文件\nFROM alpine:latest\nARG TARGETARCH\nENV ARCH=$TARGETARCH\n\n# 设置工作目录\nWORKDIR /sing-box\n\n# 从第一个阶段的 OpenSSL 镜像中复制证书文件到当前镜像\nCOPY --from=openssl /private.key /sing-box/cert/private.key\nCOPY --from=openssl /cert.pem /sing-box/cert/cert.pem\nCOPY docker_init.sh /sing-box/init.sh\n\nRUN set -ex &&\\\n  apk add --no-cache supervisor wget nginx bash &&\\\n  mkdir -p /sing-box/conf /sing-box/subscribe /sing-box/logs &&\\\n  chmod +x /sing-box/init.sh &&\\\n  rm -rf /var/cache/apk/*\n\nCMD [ \"./init.sh\" ]"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 30.4775390625,
          "content": "# 【Sing-box 全家桶】\n\n* * *\n\n# 目录\n\n- [1.更新信息](README.md#1更新信息)\n- [2.项目特点](README.md#2项目特点)\n- [3.Sing-box for VPS 运行脚本](README.md#3sing-box-for-vps-运行脚本)\n- [4.无交互极速安装](README.md#4无交互极速安装)\n- [5.Token Argo Tunnel 方案设置任意端口回源以使用 cdn](README.md#5token-argo-tunnel-方案设置任意端口回源以使用-cdn)\n- [6.Vmess / Vless 方案设置任意端口回源以使用 cdn](README.md#6vmess--vless-方案设置任意端口回源以使用-cdn)\n- [7.Docker 和 Docker compose 安装](README.md#7docker-和-docker-compose-安装)\n- [8.Nekobox 设置 shadowTLS 方法](README.md#8nekobox-设置-shadowtls-方法)\n- [9.主体目录文件及说明](README.md#9主体目录文件及说明)\n- [10.鸣谢下列作者的文章和项目](README.md#10鸣谢下列作者的文章和项目)\n- [11.免责声明](README.md#11免责声明)\n\n\n* * *\n## 1.更新信息\n2024.12.31 v1.2.10 Adapted v1.11.0-beta.17 to add port hopping for hysteria2 in sing-box client output; 适配 v1.11.0-beta.17，在 sing-box 客户端输出中添加 hysteria2 的端口跳跃\n\n2024.12.29 v1.2.9 Refactored the chatGPT detection method based on lmc999's detection and unlocking script; 根据 lmc999 的检测解锁脚本，重构了检测 chatGPT 方法\n\n2024.12.10 v1.2.8 Thank you to the veteran player Fan Glider Fangliding for the technical guidance on Warp's routing! 感谢资深玩家 风扇滑翔翼 Fangliding 关于 Warp 的分流的技术指导\n\n2024.12.10 v1.2.7 Compatible with Sing-box 1.11.0-beta.8+. Thanks to the PR from brother Maxrxf. I've already given up myself; 适配 Sing-box 1.11.0-beta.8+，感谢 Maxrxf 兄弟的 PR，我自己已经投降的了\n\n2024.10.28 v1.2.6 1. Fixed the bug that clash subscription failed when [-n] re-fetches the subscription; 2. vmess + ws encryption changed from none to auto; 3. Replaced a CDN; 1. 修复 [-n] 重新获取订阅时，clash 订阅失效的bug; 2. vmess + ws 加密方式从none改为auto; 3. 更换了一个 CDN\n\n<details>\n    <summary>历史更新 history（点击即可展开或收起）</summary>\n<br>\n\n>2024.08.06 v1.2.5 Add detection of TCP brutal. Sing-box will not use this module if not installed. 增加 TCP brutal 的检测，如果没有安装，Sing-box 将不使用该模块\n>\n>2024.05.09 v1.2.4 Add hysteria2 port hopping. Supported Clients: ShadowRocket / NekoBox / Clash; 添加 hysteria2 的跳跃端口，支持客户端: ShadowRocket / NekoBox / Clash\n>\n>2024.05.06 v1.2.3 Automatically detects native IPv4 and IPv6 for warp-installed machines to minimize interference with warp ip; 对于已安装 warp 机器，自动识别原生的 IPv4 和 IPv6，以减少受 warp ip 的干扰\n>\n>2024.05.03 v1.2.2 Complete 8 non-interactive installation modes, direct output results. Suitable for mass installation scenarios. You can put the commands in the favorites of the ssh software. Please refer to the README.md description for details. 完善8种无交互安装模式，直接输出结果，适合大量装机的情景，可以把命令放在 ssh 软件的收藏夹，详细请参考README.md 说明\n>\n>2024.04.16 v1.2.1 1. Fix the bug of dynamically adding and removing protocols; 2. CentOS 7 add EPEL to install nginx; 1. 修复动态增加和删除协议的 bug; 2. CentOS 7 增加 EPEL 软件仓库，以便安装 Nginx\n>\n>2024.04.12 v1.2.0 1. Add Cloudflare Argo Tunnel, so that 10 protocols, including the transport mode of ws, no longer need to bring our own domain; 2. Cloudflare Argo Tunnel supports try, Json and Token methods. Use of [sb -t] online switching; 3. Cloudflare Argo Tunnel switch is [sb -a], and the Sing-box switch is changed from [sb -o] to [sb -s]; 4. If Json or Token Argo is used, the subscription address is the domain name; 5. For details: https://github.com/fscarmen/sing-box; 1. 增加 Cloudflare Argo Tunnel，让包括传输方式为ws在内的10个协议均不再需要自带域名; 2. Cloudflare Argo Tunnel 支持临时、Json 和 Token 方式，支持使用 [sb -t] 在线切换; 3.  Cloudflare Argo Tunnel 开关为 [sb -a]，Sing-box 开关从 [sb -o] 更换为 [sb -s]; 4. 若使用 Json 或者 Token 固定域名 Argo，则订阅地址则使用该域名; 5. 详细参考: https://github.com/fscarmen/sing-box\n>\n>2024.04.01 sing-box + argo container version is newly launched, for details: https://github.com/fscarmen/sing-box; sing-box 全家桶 + argo 容器版本全新上线，详细参考: https://github.com/fscarmen/sing-box\n>\n>2024.03.27 v1.1.11 Add two non-interactive installation modes: 1. pass parameter; 2.kv file, for details: https://github.com/fscarmen/sing-box; 增加两个的无交互安装模式: 1. 传参；2.kv 文件，详细参考: https://github.com/fscarmen/sing-box\n>\n>2024.03.26 v1.1.10 Thanks to UUb for the official change of the compilation, dependencies jq, qrencode from apt installation to download the binary file, reduce the installation time of about 15 seconds, the implementation of the project's positioning of lightweight, as far as possible to install the least system dependencies; 感谢 UUb 兄弟的官改编译，依赖 jq, qrencode 从 apt 安装改为下载二进制文件，缩减安装时间约15秒，贯彻项目轻量化的定位，尽最大可能安装最少的系统依赖\n>\n>2024.03.22 v1.1.9 1. In the Sing-box client, add the brutal field in the TCP protocol to make it effective; 2. Compatible with CentOS 7,8,9; 3. Remove default Github CDN; 1. 在 Sing-box 客户端，TCP 协议协议里加上 brutal 字段以生效; 2. 适配 CentOS 7,8,9; 3. 去掉默认的 Github 加速网\n>\n>2024.3.18 v1.1.8 Move nginx for subscription services to the systemd daemon, following sing-box startup and shutdown; 把用于订阅服务的 nginx 移到 systemd daemon，跟随 sing-box 启停\n>\n>2024.3.13 v1.1.7 Subscription made optional, no nginx and qrcode installed if not needed; 在线订阅改为可选项，如不需要，不安装 nginx 和 qrcode\n>\n>2024.3.11 v1.1.6 1. Subscription api too many problems not working properly, instead put template-2 on Github; 2. Use native IP if it supports unlocking chatGPT, otherwise use warp chained proxy unlocking; 1. 在线转订阅 api 太多问题不能正常使用，改为把模板2放Github; 2. 如自身支持解锁 chatGPT，则使用原生 IP，否则使用 warp 链式代理解锁\n>\n>2024.3.10 v1.1.5 1. To protect node data security, use fake information to fetch subscribe api; 2. Adaptive the above clients. http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/<uuid>/<auto | auto2>; 1. 为保护节点数据安全，在 api 转订阅时，使用虚假信息; 2. 自适应以上的客户端，http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/<auto | auto2>\n>\n>2024.3.4 v1.1.4 1. Support V2rayN / Nekobox / Clash / sing-box / Shadowrocket subscribe. http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/\\<qr | clash | neko | proxies | shadowrocket | sing-box-pc | sing-box-phone | v2rayn\\>. Index of all subscribes: http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/  . Reinstall is required; 2. Adaptive the above clients. http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/auto ; 1. 增加 V2rayN / Nekobox / Clash / sing-box / Shadowrocket 订阅，http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/\\<qr | clash | neko | proxies | shadowrocket | sing-box-pc | sing-box-phone | v2rayn\\>， 所有订阅的索引: http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/，需要重新安装; 2. 自适应以上的客户端，http://\\<server ip\\>:\\<nginx port\\>/\\<uuid\\>/auto\n>\n>2024.2.16 v1.1.3 1. Support v2rayN V6.33 Tuic and Hysteria2 protocol URLs; 2. Add DNS module to adapt Sing-box V1.9.0-alpha.8; 3. Reconstruct the installation protocol, add delete protocols and protocol export module, each parameter is more refined. ( Reinstall is required ); 4. Remove obfs obfuscation from Hysteria2; 1. 支持 v2rayN V6.33 Tuic 和 Hysteria2 协议 URL; 2. 增加 DNS 模块以适配 Sing-box V1.9.0-alpha.8; 3. 重构安装协议，增加删除协议及协议输出模块，各参数更精细 (需要重新安装); 4. 去掉 Hysteria2 的 obfs 混淆\n>\n>2023.12.25 v1.1.2 1. support Sing-box 1.8.0 latest Rule Set and Experimental; 2. api.openai.com routes to WARP IPv4, other openai websites routes to WARP IPv6; 3. Start port changes to 100; 1. 支持 Sing-box 1.8.0 最新的 Rule Set 和 Experimental; 2. api.openai.com 分流到 WARP IPv4， 其他 openai 网站分流到 WARP IPv6; 3. 开始端口改为 100\n>\n>2023.11.21 v1.1.1 1. XTLS + REALITY remove flow: xtls-reality-vision to support multiplexing and TCP brutal (requires reinstallation); 2. Clash meta add multiplexing parameter. 1. XTLS + REALITY 去掉 xtls-reality-vision 流控以支持多路复用和 TCP brutal (需要重新安装); 2. Clash meta 增加多路复用参数\n>\n>2023.11.17 v1.1.0 1. Add [ H2 + Reality ] and [ gRPC + Reality ]. Reinstall is required; 2. Use beta verion instead of alpha; 3. Support TCP brutal and add the official install script; 1. 增加 [ H2 + Reality ] 和 [ gRPC + Reality ]，需要重新安装; 2. 由于 Sing-box 更新极快，将使用 beta 版本替代 alpha 3. 支持 TCP brutal，并提供官方安装脚本\n>\n>2023.11.15 v1.0.1 1. Support TCP brutal. Reinstall is required; 2. Use alpha verion instead of latest; 3. Change the default CDN to [ cn.azhz.eu.org ]; 1. 支持 TCP brutal，需要重新安装; 2. 由于 Sing-box 更新极快，将使用 alpha 版本替代 latest; 3. 默认优选改为 [ cn.azhz.eu.org ]\n>\n>2023.10.29 v1.0 正式版 1. Sing-box Family bucket v1.0; 2. After installing, add [sb] shortcut; 3. Output the configuration for Sing-box Client; 1. Sing-box 全家桶 v1.0; 2. 安装后，增加 [sb] 的快捷运行方式; 3. 输出 Sing-box Client 配置\n>\n>2023.10.18 beta7 1. You can add and remove protocols at any time, need to reinstall script; 2. Adjusted the order of some protocols; 1. 可以随时添加和删除协议，需要重新安装脚本; 2. 调整了部分协议的先后顺序\n>\n>2023.10.16 beta6 1. Support Alpine; 2. Add Sing-box PID, runtime, and memory usage to the menu; 3. Remove the option of using warp on returning to China; 支持 Alpine; 2. 菜单中增加 sing-box 内存占用显示; 3. 去掉使用 warp 回国的选项\n>\n>2023.10.10 beta5 1. Add the option of blocking on returning to China; 2. Add a number of quality cdn's that are collected online; 1. 增加禁止归国选项; 2. 增加线上收录的若干优质 cdn\n>\n>2023.10.9 beta4 1. Add v2rayN client, ShadowTLS and Tuic based on sing-box kernel configuration file output; 2. Shadowsocks encryption from aes-256-gcm to aes-128-gcm; 3. Optimize the routing and dns of sing-box on the server side; 1. 补充 v2rayN 客户端中，ShadowTLS 和 Tuic 基于 sing-box 内核的配置文件输出; 2. Shadowsocks 加密从 aes-256-gcm 改为 aes-128-gcm; 3. 优化服务端 sing-box 的 路由和 dns\n>\n>2023.10.6 beta3 1. Add vmess + ws / vless + ws + tls protocols; 2. Hysteria2 add obfuscated verification of obfs; 1. 增加 vmess + ws / vless + ws + tls 协议; 2. Hysteria2 增加 obfs 混淆验证\n>\n>2023.10.3 beta2 1. Single-select, multi-select or select all the required protocols; 2. Support according to the order of selection, the definition of the corresponding protocol listen port number; 1. 可以单选、多选或全选需要的协议; 2. 支持根据选择的先后次序，定义相应协议监听端口号\n>\n>2023.9.30 beta1 Sing-box 全家桶一键脚本 for vps\n</details>\n\n\n## 2.项目特点:\n\n* 一键部署多协议，可以单选、多选或全选 ShadowTLS v3 / XTLS Reality / Hysteria2 / Tuic V5 / ShadowSocks / Trojan / Vmess + ws / Vless + ws + tls / H2 Reality / gRPC Reality, 总有一款适合你\n* 所有协议均不需要域名，可选 Cloudflare Argo Tunnel 内网穿透以支持传统方式为 websocket 的协议\n* 节点信息输出到 V2rayN / Clash Meta / 小火箭 / Nekobox / Sing-box (SFI, SFA, SFM)，订阅自动适配客户端，一个订阅 url 走天下\n* 自定义端口，适合有限开放端口的 nat 小鸡\n* 内置 warp 链式代理解锁 chatGPT\n* 智能判断操作系统: Ubuntu 、Debian 、CentOS 、Alpine 和 Arch Linux,请务必选择 LTS 系统\n* 支持硬件结构类型: AMD 和 ARM，支持 IPv4 和 IPv6\n* 无交互极速安排模式: 一个回车完成超 10 个协议的安装\n\n\n## 3.Sing-box for VPS 运行脚本:\n\n* 首次运行\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh)\n```\n\n* 再次运行\n```\nsb\n```\n\n  | Option 参数      | Remark 备注 |\n  | --------------- | ------ |\n  | -c              | Chinese 中文 |\n  | -e              | English 英文 |\n  | -u              | Uninstall 卸载 |\n  | -n              | Export Nodes list 显示节点信息 |\n  | -p <start port> | Change the nodes start port 更改节点的起始端口 |\n  | -s              | Stop / Start the Sing-box service 停止/开启 Sing-box 服务 |\n  | -a              | Stop / Start the Argo Tunnel service 停止/开启 Argo Tunnel 服务 | \n  | -v              | Sync Argo Xray to the newest 同步 Argo Xray 到最新版本 |\n  | -b              | Upgrade kernel, turn on BBR, change Linux system 升级内核、安装BBR、DD脚本 |\n  | -r              | Add and remove protocols 添加和删除协议 |\n\n\n## 4.无交互极速安装:\n### 方式1. KV 配置文件，内容参照本库里的 config\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) -f config\n```\n\n### 方式2. KV 传参，举例\n\n<details>\n    <summary> 使用 Origin Rule + 订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --VMESS_HOST_DOMAIN vmess.test.com \\\n  --VLESS_HOST_DOMAIN vless.test.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --SUBSCRIBE=true \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n\n</details>\n\n<details>\n    <summary> 使用 Origin Rule ，不要订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --VMESS_HOST_DOMAIN vmess.test.com \\\n  --VLESS_HOST_DOMAIN vless.test.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo 临时隧道 + 订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --SUBSCRIBE=true \\\n  --ARGO=true \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo 临时隧道，不要订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --ARGO=true \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo Json 隧道 + 订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --SUBSCRIBE=true \\\n  --ARGO=true \\\n  --ARGO_DOMAIN=sb.argo.com \\\n  --ARGO_AUTH='{\"AccountTag\":\"9cc9e3e4d8f29d2a02e297f14f20513a\",\"TunnelSecret\":\"6AYfKBOoNlPiTAuWg64ZwujsNuERpWLm6pPJ2qpN8PM=\",\"TunnelID\":\"1ac55430-f4dc-47d5-a850-bdce824c4101\"}' \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo Json 隧道，不要订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --ARGO=true \\\n  --ARGO_DOMAIN=sb.argo.com \\\n  --ARGO_AUTH='{\"AccountTag\":\"9cc9e3e4d8f29d2a02e297f14f20513a\",\"TunnelSecret\":\"6AYfKBOoNlPiTAuWg64ZwujsNuERpWLm6pPJ2qpN8PM=\",\"TunnelID\":\"1ac55430-f4dc-47d5-a850-bdce824c4101\"}' \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo Token 隧道 + 订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --SUBSCRIBE=true \\\n  --ARGO=true \\\n  --ARGO_DOMAIN=sb.argo.com \\\n  --ARGO_AUTH='sudo cloudflared service install eyJhIjoiOWNjOWUzZTRkOGYyOWQyYTAyZTI5N2YxNGYyMDUxM2EiLCJ0IjoiOGNiZDA4ZjItNGM0MC00OGY1LTlmZDYtZjlmMWQ0YTcxMjUyIiwicyI6IllXWTFORGN4TW1ZdE5HTXdZUzAwT0RaakxUbGxNMkl0Wm1VMk5URTFOR0l4TkdKayJ9' \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n<details>\n    <summary> 使用 Argo Token 隧道，不要订阅（点击即可展开或收起）</summary>\n<br>\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\\n  --LANGUAGE c \\\n  --CHOOSE_PROTOCOLS a \\\n  --START_PORT 8881 \\\n  --PORT_NGINX 60000 \\\n  --SERVER_IP 123.123.123.123 \\\n  --CDN dash.cloudflare.com \\\n  --UUID_CONFIRM 20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n  --ARGO=true \\\n  --ARGO_DOMAIN=sb.argo.com \\\n  --ARGO_AUTH='sudo cloudflared service install eyJhIjoiOWNjOWUzZTRkOGYyOWQyYTAyZTI5N2YxNGYyMDUxM2EiLCJ0IjoiOGNiZDA4ZjItNGM0MC00OGY1LTlmZDYtZjlmMWQ0YTcxMjUyIiwicyI6IllXWTFORGN4TW1ZdE5HTXdZUzAwT0RaakxUbGxNMkl0Wm1VMk5URTFOR0l4TkdKayJ9' \\\n  --PORT_HOPPING_RANGE 50000:51000 \\\n  --NODE_NAME_CONFIRM bucket\n```\n</details>\n\n\n### 参数说明\n| Key 大小写不敏感（Case Insensitive）| Value |\n| --------------- | ----------- |\n| --LANGUAGE | c=中文;  e=英文 |\n| --CHOOSE_PROTOCOLS | 可多选，如 bcdfk<br> a=全部<br> b=XTLS + reality<br> c=hysteria2<br> d=tuic<br> e=ShadowTLS<br> f=shadowsocks<br> g=trojan<br> h=vmess + ws<br> i=vless + ws + tls<br> j=H2 + reality<br> k=gRPC + reality |\n| --START_PORT | 100 - 65520 |\n| --PORT_NGINX | n=不需要订阅，或者 100 - 65520 |\n| --SERVER_IP | IPv4 或 IPv6 地址，不需要中括号 |\n| --CDN | 优选 IP 或者域名，如 --CHOOSE_PROTOCOLS 是 [a,h,i] 时需要 |\n| --VMESS_HOST_DOMAIN | vmess sni 域名，如 --CHOOSE_PROTOCOLS 是 [a,h] 时需要 |\n| --VLESS_HOST_DOMAIN | vless sni 域名，如 --CHOOSE_PROTOCOLS 是 [a,i] 时需要 |\n| --UUID_CONFIRM | 协议的 uuid 或者 password |\n| --ARGO | 是否使用 Argo Tunnel，如果是填 true，如果使用 Origin rules，则可以忽略本 Key |\n| --ARGO_DOMAIN | 固定 Argo 域名，即是 Json 或者 Token 隧道的域名 |\n| --ARGO_AUTH | Json 或者 Token 隧道的内容 |\n| --PORT_HOPPING_RANGE | hysteria2 跳跃端口范围，如 50000:51000 |\n| --NODE_NAME_CONFIRM | 节点名 |\n\n\n## 5.Token Argo Tunnel 方案设置任意端口回源以使用 cdn\n详细教程: [群晖套件：Cloudflare Tunnel 内网穿透中文教程 支持DSM6、7](https://imnks.com/5984.html)\n\n<img width=\"1510\" alt=\"image\" src=\"https://github.com/fscarmen/sba/assets/62703343/bb2d9c43-3585-4abd-a35b-9cfd7404c87c\">\n\n<img width=\"1638\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/a4868388-d6ab-4dc7-929c-88bc775ca851\">\n\n\n## 6.Vmess / Vless 方案设置任意端口回源以使用 cdn\n举例子 IPv6: vmess [2a01:4f8:272:3ae6:100b:ee7a:ad2f:1]:10006\n<img width=\"1052\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/bc2df37a-95c4-4ba0-9c84-5d9c745c3a7b\">\n\n1. 解析域名\n<img width=\"1605\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/8f38d555-6294-493e-b43d-ff0586c80d61\">\n\n2. 设置 Origin rule\n<img width=\"1556\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/164bf255-a6be-40bc-a724-56e13da7a1e6\">\n\n\n## 7.Docker 和 Docker compose 安装\n\n### 说明:\n* 支持三种 Argo 类型隧道: 临时 (不需要域名) / Json / Token\n* 需要20个连续可用的端口，以 `START_PORT` 开始第一个\n\n<details>\n    <summary> Docker 部署（点击即可展开或收起）</summary>\n<br>\n\n```\ndocker run -dit \\\n    --pull always \\\n    --name sing-box \\\n    -p 8800-8820:8800-8820/tcp \\\n    -p 8800-8820:8800-8820/udp \\\n    -e START_PORT=8800 \\\n    -e SERVER_IP=123.123.123.123 \\\n    -e XTLS_REALITY=true \\\n    -e HYSTERIA2=true \\\n    -e TUIC=true \\\n    -e SHADOWTLS=true \\\n    -e SHADOWSOCKS=true \\\n    -e TROJAN=true \\\n    -e VMESS_WS=true \\\n    -e VLESS_WS=true \\\n    -e H2_REALITY=true \\\n    -e GRPC_REALITY=true \\\n    -e UUID=20f7fca4-86e5-4ddf-9eed-24142073d197 \\\n    -e CDN=www.csgo.com \\\n    -e NODE_NAME=sing-box \\\n    -e ARGO_DOMAIN=sb.argo.com \\\n    -e ARGO_AUTH='{\"AccountTag\":\"9cc9e3e4d8f29d2a02e297f14f20513a\",\"TunnelSecret\":\"6AYfKBOoNlPiTAuWg64ZwujsNuERpWLm6pPJ2qpN8PM=\",\"TunnelID\":\"1ac55430-f4dc-47d5-a850-bdce824c4101\"}' \\\n    fscarmen/sb\n```\n</details>\n\n<details>\n    <summary> Docker Compose 部署（点击即可展开或收起）</summary>\n<br>\n\n```\nversion: '3.8'\nnetworks:\n    sing-box:\n        name: sing-box\nservices:\n    sing-box:\n        image: fscarmen/sb\n        pull_policy: always\n        container_name: sing-box\n        restart: always\n        networks:\n            - sing-box\n        ports:\n            - \"8800-8820:8800-8820/tcp\"\n            - \"8800-8820:8800-8820/udp\"\n        environment:\n            - START_PORT=8800\n            - SERVER_IP=123.123.123.123\n            - XTLS_REALITY=true\n            - HYSTERIA2=true\n            - TUIC=true\n            - SHADOWTLS=true\n            - SHADOWSOCKS=true\n            - TROJAN=true\n            - VMESS_WS=true\n            - VLESS_WS=true\n            - H2_REALITY=true\n            - GRPC_REALITY=true\n            - UUID=20f7fca4-86e5-4ddf-9eed-24142073d197 \n            - CDN=www.csgo.com\n            - NODE_NAME=sing-box\n            - ARGO_DOMAIN=sb.argo.com\n            - ARGO_AUTH=eyJhIjoiOWNjOWUzZTRkOGYyOWQyYTAyZTI5N2YxNGYyMDUxM2EiLCJ0IjoiOGNiZDA4ZjItNGM0MC00OGY1LTlmZDYtZjlmMWQ0YTcxMjUyIiwicyI6IllXWTFORGN4TW1ZdE5HTXdZUzAwT0RaakxUbGxNMkl0Wm1VMk5URTFOR0l4TkdKayJ9\n```\n</details>\n\n\n### 常用指令\n| 功能 | 指令 |\n| ---- | ---- |\n| 查看节点信息 | `docker exec -it sing-box cat list` |\n| 查看容器日志 | `docker logs -f sing-box` |\n| 更新 Sing-box 版本 | `docker exec -it sing-box bash init.sh -v` |\n| 查看容器内存,CPU，网络等资源使用情况 | `docker stats sing-box` |\n| 暂停容器 | docker: `docker stop sing-box`</br> compose: `docker-compose stop` |\n| 停止并删除容器 | docker: `docker rm -f sing-box`</br> compose: `docker-compose down` |\n| 删除镜像 | `docker rmi -f fscarmen/sb:latest` |\n\n\n### 用户可以通过 Cloudflare Json 生成网轻松获取: https://fscarmen.cloudflare.now.cc\n\n<img width=\"784\" alt=\"image\" src=\"https://github.com/fscarmen/sba/assets/62703343/fb7c6e90-fb3e-4e77-bcd4-407e4660a33c\">\n\n如想手动，可以参考，以 Debian 为例，需要用到的命令，[Deron Cheng - CloudFlare Argo Tunnel 试用](https://zhengweidong.com/try-cloudflare-argo-tunnel)\n\n\n### Argo Token 的获取\n\n详细教程: [群晖套件：Cloudflare Tunnel 内网穿透中文教程 支持DSM6、7](https://imnks.com/5984.html)\n\n<img width=\"1510\" alt=\"image\" src=\"https://github.com/fscarmen/sba/assets/62703343/bb2d9c43-3585-4abd-a35b-9cfd7404c87c\">\n\n<img width=\"1616\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/ecb844be-1e93-4208-bb7c-6b00b9d1f00a\">\n\n\n### 参数说明\n| 参数 | 是否必须 | 说明 |\n| --- | ------- | --- |\n| -p /tcp | 是 | 宿主机端口范围:容器 sing-box 及 nginx 等 tcp 监听端口 |\n| -p /udp | 是 | 宿主机端口范围:容器 sing-box 及 nginx 等 udp 监听端口 |\n| -e START_PORT | 是 | 起始端口 ，一定要与端口映射的起始端口一致 |\n| -e SERVER_IP | 是 | 服务器公网 IP |\n| -e XTLS_REALITY | 是 |    true 为启用 XTLS + reality，不需要的话删除本参数或填 false |\n| -e HYSTERIA2 | 是 |       true 为启用 Hysteria v2 协议，不需要的话删除本参数或填 false |\n| -e TUIC | 是 |            true 为启用 TUIC 协议，不需要的话删除本参数或填 false |\n| -e SHADOWTLS | 是 |       true 为启用 ShadowTLS 协议，不需要的话删除本参数或填 false |\n| -e SHADOWSOCKS | 是 |     true 为启用 ShadowSocks 协议，不需要的话删除本参数或填 false |\n| -e TROJAN | 是 |          true 为启用 Trojan 协议，不需要的话删除本参数或填 false |\n| -e VMESS_WS | 是 |        true 为启用 VMess over WebSocket 协议，不需要的话删除本参数或填 false |\n| -e VLESS_WS | 是 |        true 为启用 VLess over WebSocket 协议，不需要的话删除本参数或填 false |\n| -e H2_REALITY | 是 |      true 为启用 H2 over reality 协议，不需要的话删除本参数或填 false |\n| -e GRPC_REALITY | 是 |    true 为启用 gRPC over reality 协议，不需要的话删除本参数或填 false |\n| -e UUID | 否 | 不指定的话 UUID 将默认随机生成 |\n| -e CDN | 否 | 优选域名，不指定的话将使用 www.csgo.com |\n| -e NODE_NAME | 否 | 节点名称，不指定的话将使用 sing-box |\n| -e ARGO_DOMAIN | 否 | Argo 固定隧道域名 , 与 ARGO_DOMAIN 一并使用才能生效 |\n| -e ARGO_AUTH | 否 | Argo 认证信息，可以是 Json 也可以是 Token，与 ARGO_DOMAIN 一并使用才能生效，不指定的话将使用临时隧道 |\n\n\n## 8.Nekobox 设置 shadowTLS 方法\n1. 复制脚本输出的两个 Neko links 进去\n<img width=\"630\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/db5960f3-63b1-4145-90a5-b01066dd39be\">\n\n2. 设置链式代理，并启用\n右键 -> 手动输入配置 -> 类型选择为 \"链式代理\"。\n\n点击 \"选择配置\" 后，给节点起个名字，先后选 1-tls-not-use 和 2-ss-not-use，按 enter 或 双击 使用这个服务器。一定要注意顺序不能反了，逻辑为 ShadowTLS -> ShadowSocks。\n\n<img width=\"408\" alt=\"image\" src=\"https://github.com/fscarmen/sing-box/assets/62703343/753e7159-92f9-4c88-91b5-867fdc8cca47\">\n\n\n## 9.主体目录文件及说明\n\n```\n/etc/sing-box/                               # 项目主体目录\n|-- cert                                     # 存放证书文件目录\n|   |-- cert.pem                             # SSL/TLS 安全证书文件\n|   `-- private.key                          # SSL/TLS 证书的私钥信息\n|-- conf                                     # sing-box server 配置文件目录\n|   |-- 00_log.json                          # 日志配置文件\n|   |-- 01_outbounds.json                    # 服务端出站配置文件\n|   |-- 02_endpoints.json                    # 配置 endpoints，添加 warp 账户信息配置文件\n|   |-- 03_route.json                        # 路由配置文件，chatGPT 使用 warp ipv6 链式代理出站\n|   |-- 04_experimental.json                 # 缓存配置文件\n|   |-- 05_dns.json                          # DNS 规则文件\n|   |-- 11_xtls-reality_inbounds.json        # Reality vision 协议配置文件\n|   |-- 12_hysteria2_inbounds.json           # Hysteria2 协议配置文件\n|   |-- 13_tuic_inbounds.json                # Tuic V5 协议配置文件 # Hysteria2 协议配置文件\n|   |-- 14_ShadowTLS_inbounds.json           # ShadowTLS 协议配置文件     # Tuic V5 协议配置文件\n|   |-- 15_shadowsocks_inbounds.json         # Shadowsocks 协议配置文件\n|   |-- 16_trojan_inbounds.json              # Trojan 协议配置文件\n|   |-- 17_vmess-ws_inbounds.json            # vmess + ws 协议配置文件\n|   |-- 18_vless-ws-tls_inbounds.json        # vless + ws + tls 协议配置文件\n|   |-- 19_h2-reality_inbounds.json          # Reality http2 协议配置文件\n|   `-- 20_grpc-reality_inbounds.json        # Reality gRPC 协议配置文件\n|-- logs\n|   `-- box.log                              # sing-box 运行日志文件\n|-- subscribe                                # sing-box server 配置文件目录\n|   |-- qr                                   # Nekoray / V2rayN / Shadowrock 订阅二维码\n|   |-- shadowrocket                         # Shadowrock 订阅文件\n|   |-- proxies                              # Clash proxy provider 订阅文件\n|   |-- clash                                # Clash 订阅文件1\n|   |-- clash2                               # Clash 订阅文件2\n|   |-- sing-box-pc                          # SFM 订阅文件1\n|   |-- sing-box-phone                       # SFI / SFA 订阅文件1\n|   |-- sing-box2                            # SFI / SFA / SFM 订阅文件2\n|   |-- v2rayn                               # V2rayN 订阅文件\n|   `-- neko                                 # Nekoray 订阅文件\n|-- cache.db                                 # sing-box 缓存文件\n|-- nginx.conf                               # 用于订阅服务的 nginx 配置文件\n|-- language                                 # 存放脚本语言文件，E 为英文，C 为中文\n|-- list                                     # 节点信息列表\n|-- sing-box                                 # sing-box 主程序\n|-- cloudflared                              # Argo tunnel 主程序\n|-- tunnel.json                              # Argo tunnel Json 信息文件\n|-- tunnel.yml                               # Argo tunnel 配置文件\n|-- sb.sh                                    # 快捷方式脚本文件\n|-- jq                                       # 命令行 json 处理器二进制文件\n`-- qrencode                                 # QR 码编码二进制文件\n```\n\n\n## 10.鸣谢下列作者的文章和项目:\n千歌 sing-box 模板: https://github.com/chika0801/sing-box-examples  \n瞎折腾 sing-box 模板: https://t.me/ztvps/100\n\n\n## 11.免责声明:\n* 本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。\n* 使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。"
        },
        {
          "name": "config",
          "type": "blob",
          "size": 0.2548828125,
          "content": "#  For details: https://github.com/fscarmen/sing-box/blob/main/README.md\nLANGUAGE=\nCHOOSE_PROTOCOLS=\nSTART_PORT=\nPORT_NGINX=\nSERVER_IP=\nCDN=\nVMESS_HOST_DOMAIN=\nVLESS_HOST_DOMAIN=\nUUID_CONFIRM=\nARGO=\nARGO_DOMAIN=\nARGO_AUTH=\nPORT_HOPPING_RANGE=\nNODE_NAME_CONFIRM="
        },
        {
          "name": "docker_init.sh",
          "type": "blob",
          "size": 49.2021484375,
          "content": "#!/usr/bin/env bash\n\n# 脚本更新日期 2024.12.20\nWORK_DIR=/sing-box\nPORT=$START_PORT\nSUBSCRIBE_TEMPLATE=\"https://raw.githubusercontent.com/fscarmen/client_template/main\"\n\n# 自定义字体彩色，read 函数\nwarning() { echo -e \"\\033[31m\\033[01m$*\\033[0m\"; }  # 红色\ninfo() { echo -e \"\\033[32m\\033[01m$*\\033[0m\"; }   # 绿色\nhint() { echo -e \"\\033[33m\\033[01m$*\\033[0m\"; }   # 黄色\n\n# 判断系统架构，以下载相应的应用\ncheck_arch() {\n  case \"$ARCH\" in\n    arm64 )\n      SING_BOX_ARCH=arm64; JQ_ARCH=arm64; QRENCODE_ARCH=arm64; ARGO_ARCH=arm64\n      ;;\n    amd64 )\n      SING_BOX_ARCH=amd64\n      JQ_ARCH=amd64; QRENCODE_ARCH=amd64; ARGO_ARCH=amd64\n      ;;\n    armv7 )\n      SING_BOX_ARCH=armv7; JQ_ARCH=armhf; QRENCODE_ARCH=arm; ARGO_ARCH=arm\n      ;;\n  esac\n}\n\n# 检查 sing-box 最新版本\ncheck_latest_sing-box() {\n  local VERSION_LATEST=$(wget -qO- \"https://api.github.com/repos/SagerNet/sing-box/releases\" | awk -F '[\"v-]' '/tag_name/{print $5}' | sort -r | sed -n '1p')\n  wget -qO- \"https://api.github.com/repos/SagerNet/sing-box/releases\" | awk -F '[\"v]' -v var=\"tag_name.*$VERSION_LATEST\" '$0 ~ var {print $5; exit}'\n}\n\n# 安装 sing-box 容器\ninstall() {\n  # 下载 sing-box\n  echo \"正在下载 sing-box ...\"\n  local ONLINE=$(check_latest_sing-box)\n  local ONLINE=${ONLINE:-'1.11.0-beta.15'}\n  wget https://github.com/SagerNet/sing-box/releases/download/v$ONLINE/sing-box-$ONLINE-linux-$SING_BOX_ARCH.tar.gz -O- | tar xz -C ${WORK_DIR} sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box && mv ${WORK_DIR}/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box ${WORK_DIR}/sing-box && rm -rf ${WORK_DIR}/sing-box-$ONLINE-linux-$SING_BOX_ARCH\n\n  # 下载 jq\n  echo \"正在下载 jq ...\"\n  wget -O ${WORK_DIR}/jq https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-$JQ_ARCH && chmod +x ${WORK_DIR}/jq\n\n  # 下载 qrencode\n  echo \"正在下载 qrencode ...\"\n  wget -O ${WORK_DIR}/qrencode https://github.com/fscarmen/client_template/raw/main/qrencode-go/qrencode-go-linux-$QRENCODE_ARCH && chmod +x ${WORK_DIR}/qrencode\n\n  # 下载 cloudflared\n  echo \"正在下载 cloudflared ...\"\n  wget -O ${WORK_DIR}/cloudflared https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$ARGO_ARCH && chmod +x ${WORK_DIR}/cloudflared\n\n  # 生成 sing-box 配置文件\n  if [[ \"$SERVER_IP\" =~ : ]]; then\n    local DOMAIN_STRATEG=prefer_ipv6\n  else\n    local DOMAIN_STRATEG=prefer_ipv4\n  fi\n\n  local REALITY_KEYPAIR=$(${WORK_DIR}/sing-box generate reality-keypair) && REALITY_PRIVATE=$(awk '/PrivateKey/{print $NF}' <<< \"$REALITY_KEYPAIR\") && REALITY_PUBLIC=$(awk '/PublicKey/{print $NF}' <<< \"$REALITY_KEYPAIR\")\n  local SHADOWTLS_PASSWORD=$(${WORK_DIR}/sing-box generate rand --base64 16)\n  local UUID=${UUID:-\"$(${WORK_DIR}/sing-box generate uuid)\"}\n  local NODE_NAME=${NODE_NAME:-\"sing-box\"}\n  local CDN=${CDN:-\"skk.moe\"}\n\n  # 检测是否解锁 chatGPT，首先检查API访问\n  local CHECK_RESULT1=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 -qO- --content-on-error --header='authority: api.openai.com' --header='accept: */*' --header='accept-language: en-US,en;q=0.9' --header='authorization: Bearer null' --header='content-type: application/json' --header='origin: https://platform.openai.com' --header='referer: https://platform.openai.com/' --header='sec-ch-ua: \"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"' --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: empty' --header='sec-fetch-mode: cors' --header='sec-fetch-site: same-site' --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36' 'https://api.openai.com/compliance/cookie_requirements')\n\n  # 如果API检测失败或者检测到unsupported_country,直接返回ban\n  if [ -z \"$CHECK_RESULT1\" ] || grep -qi 'unsupported_country' <<< \"$CHECK_RESULT1\"; then\n    CHATGPT_OUT=warp-ep\n  fi\n\n  # API检测通过后,继续检查网页访问\n  local CHECK_RESULT2=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 -qO- --content-on-error --header='authority: ios.chat.openai.com' --header='accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' --header='accept-language: en-US,en;q=0.9' --header='sec-ch-ua: \"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"' --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: document' --header='sec-fetch-mode: navigate' --header='sec-fetch-site: none' --header='sec-fetch-user: ?1' --header='upgrade-insecure-requests: 1' --user-agent='Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36' https://ios.chat.openai.com/)\n\n  # 检查第二个结果\n  if [ -z \"$CHECK_RESULT2\" ] || grep -qi 'VPN' <<< \"$CHECK_RESULT2\"; then\n    CHATGPT_OUT=warp-ep\n  else\n    CHATGPT_OUT=direct\n  fi\n\n  # 生成 log 配置\n  cat > ${WORK_DIR}/conf/00_log.json << EOF\n\n{\n    \"log\":{\n        \"disabled\":false,\n        \"level\":\"error\",\n        \"output\":\"${WORK_DIR}/logs/box.log\",\n        \"timestamp\":true\n    }\n}\nEOF\n\n  # 生成 outbound 配置\n  cat > ${WORK_DIR}/conf/01_outbounds.json << EOF\n{\n    \"outbounds\":[\n        {\n            \"type\":\"direct\",\n            \"tag\":\"direct\",\n            \"domain_strategy\":\"$DOMAIN_STRATEG\"\n        }\n    ]\n}\nEOF\n\n  # 生成 endpoint 配置\n  cat > ${WORK_DIR}/conf/02_endpoints.json << EOF\n{\n    \"endpoints\":[\n        {\n            \"type\":\"wireguard\",\n            \"tag\":\"warp-ep\",\n            \"mtu\":1280,\n            \"address\":[\n                \"172.16.0.2/32\",\n                \"2606:4700:110:8a36:df92:102a:9602:fa18/128\"\n            ],\n            \"private_key\":\"YFYOAdbw1bKTHlNNi+aEjBM3BO7unuFC5rOkMRAz9XY=\",\n            \"peers\": [\n              {\n                \"address\": \"engage.cloudflareclient.com\",\n                \"port\":2408,\n                \"public_key\":\"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n                \"allowed_ips\": [\n                  \"0.0.0.0/0\",\n                  \"::/0\"\n                ],\n                \"reserved\":[\n                    78,\n                    135,\n                    76\n                ]\n              }\n            ]\n        }\n    ]\n}\nEOF\n\n  # 生成 route 配置\n  cat > ${WORK_DIR}/conf/03_route.json << EOF\n{\n    \"route\":{\n        \"rule_set\":[\n            {\n                \"tag\":\"geosite-openai\",\n                \"type\":\"remote\",\n                \"format\":\"binary\",\n                \"url\":\"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-openai.srs\"\n            }\n        ],\n        \"rules\":[\n            {\n                \"action\": \"sniff\"\n            },\n            {\n                \"action\": \"resolve\",\n                \"domain\":[\n                    \"api.openai.com\"\n                ],\n                \"strategy\": \"prefer_ipv4\"\n            },\n            {\n                \"action\": \"resolve\",\n                \"rule_set\":[\n                    \"geosite-openai\"\n                ],\n                \"strategy\": \"prefer_ipv6\"\n            },\n            {\n                \"domain\":[\n                    \"api.openai.com\"\n                ],\n                \"rule_set\":[\n                    \"geosite-openai\"\n                ],\n                \"outbound\":\"${CHATGPT_OUT}\"\n            }\n        ]\n    }\n}\nEOF\n\n  # 生成缓存文件\n  cat > ${WORK_DIR}/conf/04_experimental.json << EOF\n{\n    \"experimental\": {\n        \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"${WORK_DIR}/cache.db\"\n        }\n    }\n}\nEOF\n\n  # 生成 dns 配置文件\n  cat > ${WORK_DIR}/conf/05_dns.json << EOF\n{\n    \"dns\":{\n        \"servers\":[\n            {\n                \"address\":\"local\"\n            }\n        ]\n    }\n}\nEOF\n\n  # 生成 XTLS + Reality 配置\n  [ \"${XTLS_REALITY}\" = 'true' ] && ((PORT++)) && PORT_XTLS_REALITY=$PORT && cat > ${WORK_DIR}/conf/11_xtls-reality_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME} xtls-reality\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_XTLS_REALITY},\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID}\",\n                    \"flow\":\"\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"addons.mozilla.org\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"addons.mozilla.org\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 Hysteria2 配置\n  [ \"${HYSTERIA2}\" = 'true' ] && ((PORT++)) && PORT_HYSTERIA2=$PORT && cat > ${WORK_DIR}/conf/12_hysteria2_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"hysteria2\",\n            \"tag\":\"${NODE_NAME} hysteria2\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_HYSTERIA2},\n            \"users\":[\n                {\n                    \"password\":\"${UUID}\"\n                }\n            ],\n            \"ignore_client_bandwidth\":false,\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"\",\n                \"alpn\":[\n                    \"h3\"\n                ],\n                \"min_version\":\"1.3\",\n                \"max_version\":\"1.3\",\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 Tuic V5 配置\n  [ \"${TUIC}\" = 'true' ] && ((PORT++)) && PORT_TUIC=$PORT && cat > ${WORK_DIR}/conf/13_tuic_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"tuic\",\n            \"tag\":\"${NODE_NAME} tuic\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_TUIC},\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID}\",\n                    \"password\":\"${UUID}\"\n                }\n            ],\n            \"congestion_control\": \"bbr\",\n            \"zero_rtt_handshake\": false,\n            \"tls\":{\n                \"enabled\":true,\n                \"alpn\":[\n                    \"h3\"\n                ],\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 ShadowTLS V5 配置\n  [ \"${SHADOWTLS}\" = 'true' ] && ((PORT++)) && PORT_SHADOWTLS=$PORT && cat > ${WORK_DIR}/conf/14_ShadowTLS_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"shadowtls\",\n            \"tag\":\"${NODE_NAME} ShadowTLS\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_SHADOWTLS},\n            \"detour\":\"shadowtls-in\",\n            \"version\":3,\n            \"users\":[\n                {\n                    \"password\":\"${UUID}\"\n                }\n            ],\n            \"handshake\":{\n                \"server\":\"addons.mozilla.org\",\n                \"server_port\":443\n            },\n            \"strict_mode\":true\n        },\n        {\n            \"type\":\"shadowsocks\",\n            \"tag\":\"shadowtls-in\",\n            \"listen\":\"127.0.0.1\",\n            \"network\":\"tcp\",\n            \"method\":\"2022-blake3-aes-128-gcm\",\n            \"password\":\"${SHADOWTLS_PASSWORD}\",\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 Shadowsocks 配置\n  [ \"${SHADOWSOCKS}\" = 'true' ] && ((PORT++)) && PORT_SHADOWSOCKS=$PORT && cat > ${WORK_DIR}/conf/15_shadowsocks_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"shadowsocks\",\n            \"tag\":\"${NODE_NAME} shadowsocks\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_SHADOWSOCKS},\n            \"method\":\"aes-128-gcm\",\n            \"password\":\"${UUID}\",\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 Trojan 配置\n  [ \"${TROJAN}\" = 'true' ] && ((PORT++)) && PORT_TROJAN=$PORT && cat > ${WORK_DIR}/conf/16_trojan_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"trojan\",\n            \"tag\":\"${NODE_NAME} trojan\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_TROJAN},\n            \"users\":[\n                {\n                    \"password\":\"${UUID}\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 vmess + ws 配置\n  [ \"${VMESS_WS}\" = 'true' ] && ((PORT++)) && PORT_VMESS_WS=$PORT && cat > ${WORK_DIR}/conf/17_vmess-ws_inbounds.json << EOF\n//  \"CDN\": \"${CDN}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vmess\",\n            \"tag\":\"${NODE_NAME} vmess-ws\",\n            \"listen\":\"127.0.0.1\",\n            \"listen_port\":${PORT_VMESS_WS},\n            \"tcp_fast_open\":false,\n            \"proxy_protocol\":false,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID}\",\n                    \"alterId\":0\n                }\n            ],\n            \"transport\":{\n                \"type\":\"ws\",\n                \"path\":\"/${UUID}-vmess\",\n                \"max_early_data\":2048,\n                \"early_data_header_name\":\"Sec-WebSocket-Protocol\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 vless + ws + tls 配置\n  [ \"${VLESS_WS}\" = 'true' ] && ((PORT++)) && PORT_VLESS_WS=$PORT && cat > ${WORK_DIR}/conf/18_vless-ws-tls_inbounds.json << EOF\n//  \"CDN\": \"${CDN}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME} vless-ws-tls\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_VLESS_WS},\n            \"tcp_fast_open\":false,\n            \"proxy_protocol\":false,\n            \"users\":[\n                {\n                    \"name\":\"sing-box\",\n                    \"uuid\":\"${UUID}\"\n                }\n            ],\n            \"transport\":{\n                \"type\":\"ws\",\n                \"path\":\"/${UUID}-vless\",\n                \"max_early_data\":2048,\n                \"early_data_header_name\":\"Sec-WebSocket-Protocol\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 H2 + Reality 配置\n  [ \"${H2_REALITY}\" = 'true' ] && ((PORT++)) && PORT_H2_REALITY=$PORT && cat > ${WORK_DIR}/conf/19_h2-reality_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME} h2-reality\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_H2_REALITY},\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID}\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"addons.mozilla.org\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"addons.mozilla.org\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"transport\": {\n                \"type\": \"http\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 生成 gRPC + Reality 配置\n  [ \"${GRPC_REALITY}\" = 'true' ] && ((PORT++)) && PORT_GRPC_REALITY=$PORT && cat > ${WORK_DIR}/conf/20_grpc-reality_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"sniff\":true,\n            \"sniff_override_destination\":true,\n            \"tag\":\"${NODE_NAME} grpc-reality\",\n            \"listen\":\"::\",\n            \"listen_port\":${PORT_GRPC_REALITY},\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID}\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"addons.mozilla.org\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"addons.mozilla.org\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"transport\": {\n                \"type\": \"grpc\",\n                \"service_name\": \"grpc\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":true,\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n\n  # 判断 argo 隧道类型\n  if [[ -n \"$ARGO_DOMAIN\" && -n \"$ARGO_AUTH\" ]]; then\n    if [[ \"$ARGO_AUTH\" =~ TunnelSecret ]]; then\n      ARGO_JSON=${ARGO_AUTH//[ ]/}\n      ARGO_RUNS=\"cloudflared tunnel --edge-ip-version auto --config ${WORK_DIR}/tunnel.yml run\"\n      echo $ARGO_JSON > ${WORK_DIR}/tunnel.json\n      cat > ${WORK_DIR}/tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< $ARGO_JSON)\ncredentials-file: ${WORK_DIR}/tunnel.json\n\ningress:\n  - hostname: ${ARGO_DOMAIN}\n    service: https://localhost:${START_PORT}\n    originRequest:\n      noTLSVerify: true\n  - service: http_status:404\nEOF\n\n    elif [[ \"${ARGO_AUTH}\" =~ [a-z0-9A-Z=]{120,250} ]]; then\n      [[ \"{$ARGO_AUTH}\" =~ cloudflared.*service ]] && ARGO_TOKEN=$(awk -F ' ' '{print $NF}' <<< \"$ARGO_AUTH\") || ARGO_TOKEN=$ARGO_AUTH\n      ARGO_RUNS=\"cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}\"\n    fi\n  else\n    ((PORT++))\n    METRICS_PORT=$PORT\n    ARGO_RUNS=\"cloudflared tunnel --edge-ip-version auto --no-autoupdate --no-tls-verify --metrics 0.0.0.0:$METRICS_PORT --url https://localhost:$START_PORT\"\n  fi\n\n  # 生成 supervisord 配置文件\n  mkdir -p /etc/supervisor.d\n  SUPERVISORD_CONF=\"[supervisord]\nuser=root\nnodaemon=true\nlogfile=/dev/null\npidfile=/run/supervisord.pid\n\n[program:nginx]\ncommand=/usr/sbin/nginx -g 'daemon off;'\nautostart=true\nautorestart=true\nstderr_logfile=/dev/null\nstdout_logfile=/dev/null\n\n[program:sing-box]\ncommand=${WORK_DIR}/sing-box run -C ${WORK_DIR}/conf/\nautostart=true\nautorestart=true\nstderr_logfile=/dev/null\nstdout_logfile=/dev/null\"\n\n[ -z \"$METRICS_PORT\" ] && SUPERVISORD_CONF+=\"\n\n[program:argo]\ncommand=${WORK_DIR}/$ARGO_RUNS\nautostart=true\nautorestart=true\nstderr_logfile=/dev/null\nstdout_logfile=/dev/null\n\"\n\n  echo \"$SUPERVISORD_CONF\" > /etc/supervisor.d/daemon.ini\n\n  # 如使用临时隧道，先运行 cloudflared 以获取临时隧道域名\n  if [ -n \"$METRICS_PORT\" ]; then\n    ${WORK_DIR}/$ARGO_RUNS >/dev/null 2>&1 &\n    sleep 15\n    local ARGO_DOMAIN=$(wget -qO- http://localhost:$METRICS_PORT/quicktunnel | awk -F '\"' '{print $4}')\n  fi\n\n  # 生成 nginx 配置文件\n  local NGINX_CONF=\"user root;\n\n  worker_processes auto;\n\n  error_log  /dev/null;\n  pid        /var/run/nginx.pid;\n\n  events {\n      worker_connections  1024;\n  }\n\n  http {\n    map \\$http_user_agent \\$path {\n      default                    /;                # 默认路径\n      ~*v2rayN|Neko              /base64;          # 匹配 V2rayN / NekoBox 客户端\n      ~*clash                    /clash;           # 匹配 Clash 客户端\n      ~*ShadowRocket             /shadowrocket;    # 匹配 ShadowRocket  客户端\n      ~*SFM                      /sing-box-pc;     # 匹配 Sing-box pc 客户端\n      ~*SFI|SFA                  /sing-box-phone;  # 匹配 Sing-box phone 客户端\n   #   ~*Chrome|Firefox|Mozilla  /;                # 添加更多的分流规则\n    }\n\n      include       /etc/nginx/mime.types;\n      default_type  application/octet-stream;\n\n      log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                        '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                        '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n      access_log  /dev/null;\n\n      sendfile        on;\n      #tcp_nopush     on;\n\n      keepalive_timeout  65;\n\n      #gzip  on;\n\n      #include /etc/nginx/conf.d/*.conf;\n\n    server {\n      listen 127.0.0.1:$START_PORT ssl ; # sing-box backend\n      http2 on;\n      server_name addons.mozilla.org;\n\n      ssl_certificate            ${WORK_DIR}/cert/cert.pem;\n      ssl_certificate_key        ${WORK_DIR}/cert/private.key;\n      ssl_protocols              TLSv1.3;\n      ssl_session_tickets        on;\n      ssl_stapling               off;\n      ssl_stapling_verify        off;\"\n\n  [ \"${VLESS_WS}\" = 'true' ] && NGINX_CONF+=\"\n      # 反代 sing-box vless websocket\n      location /${UUID}-vless {\n        if (\\$http_upgrade != \"websocket\") {\n           return 404;\n        }\n        proxy_pass                          http://127.0.0.1:${PORT_VLESS_WS};\n        proxy_http_version                  1.1;\n        proxy_set_header Upgrade            \\$http_upgrade;\n        proxy_set_header Connection         \"upgrade\";\n        proxy_set_header X-Real-IP          \\$remote_addr;\n        proxy_set_header X-Forwarded-For    \\$proxy_add_x_forwarded_for;\n        proxy_set_header Host               \\$host;\n        proxy_redirect                      off;\n      }\"\n\n  [ \"${VMESS_WS}\" = 'true' ] && NGINX_CONF+=\"\n      # 反代 sing-box websocket\n      location /${UUID}-vmess {\n        if (\\$http_upgrade != \"websocket\") {\n           return 404;\n        }\n        proxy_pass                          http://127.0.0.1:${PORT_VMESS_WS};\n        proxy_http_version                  1.1;\n        proxy_set_header Upgrade            \\$http_upgrade;\n        proxy_set_header Connection         \"upgrade\";\n        proxy_set_header X-Real-IP          \\$remote_addr;\n        proxy_set_header X-Forwarded-For    \\$proxy_add_x_forwarded_for;\n        proxy_set_header Host               \\$host;\n        proxy_redirect                      off;\n      }\"\n\n  NGINX_CONF+=\"\n      # 来自 /auto 的分流\n      location ~ ^/${UUID}/auto {\n        default_type 'text/plain; charset=utf-8';\n        alias ${WORK_DIR}/subscribe/\\$path;\n      }\n\n      location ~ ^/${UUID}/(.*) {\n        autoindex on;\n        proxy_set_header X-Real-IP \\$proxy_protocol_addr;\n        default_type 'text/plain; charset=utf-8';\n        alias ${WORK_DIR}/subscribe/\\$1;\n      }\n    }\n  }\"\n\n  echo \"$NGINX_CONF\" > /etc/nginx/nginx.conf\n\n  # IPv6 时的 IP 处理\n  if [[ \"$SERVER_IP\" =~ : ]]; then\n    SERVER_IP_1=\"[$SERVER_IP]\"\n    SERVER_IP_2=\"[[$SERVER_IP]]\"\n  else\n    SERVER_IP_1=\"$SERVER_IP\"\n    SERVER_IP_2=\"$SERVER_IP\"\n  fi\n\n  # 生成各订阅文件\n  # 生成 Clash proxy providers 订阅文件\n  local CLASH_SUBSCRIBE='proxies:'\n\n  [ \"${XTLS_REALITY}\" = 'true' ] && local CLASH_XTLS_REALITY=\"- {name: \\\"${NODE_NAME} xtls-reality\\\", type: vless, server: ${SERVER_IP}, port: ${PORT_XTLS_REALITY}, uuid: ${UUID}, network: tcp, udp: true, tls: true, servername: addons.mozilla.org, client-fingerprint: chrome, reality-opts: {public-key: ${REALITY_PUBLIC}, short-id: \\\"\\\"}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_XTLS_REALITY\n\"\n  [ \"${HYSTERIA2}\" = 'true' ] && local CLASH_HYSTERIA2=\"- {name: \\\"${NODE_NAME} hysteria2\\\", type: hysteria2, server: ${SERVER_IP}, port: ${PORT_HYSTERIA2}, up: \\\"200 Mbps\\\", down: \\\"1000 Mbps\\\", password: ${UUID}, skip-cert-verify: true}\" &&\n  local CLASH_SUBSCRIBE+=\"\n  - {name: \\\"${NODE_NAME} hysteria2\\\", type: hysteria2, server: ${SERVER_IP}, port: ${PORT_HYSTERIA2}, up: \\\"200 Mbps\\\", down: \\\"1000 Mbps\\\", password: ${UUID}, skip-cert-verify: true}\n\"\n  [ \"${TUIC}\" = 'true' ] && local CLASH_TUIC=\"- {name: \\\"${NODE_NAME} tuic\\\", type: tuic, server: ${SERVER_IP}, port: ${PORT_TUIC}, uuid: ${UUID}, password: ${UUID}, alpn: [h3], disable-sni: true, reduce-rtt: true, request-timeout: 8000, udp-relay-mode: native, congestion-controller: bbr, skip-cert-verify: true}\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_TUIC\n\"\n  [ \"${SHADOWTLS}\" = 'true' ] && local CLASH_SHADOWTLS=\"- {name: \\\"${NODE_NAME} ShadowTLS\\\", type: ss, server: ${SERVER_IP}, port: ${PORT_SHADOWTLS}, cipher: 2022-blake3-aes-128-gcm, password: ${SHADOWTLS_PASSWORD}, plugin: shadow-tls, client-fingerprint: chrome, plugin-opts: {host: addons.mozilla.org, password: \\\"${UUID}\\\", version: 3}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_SHADOWTLS\n\"\n  [ \"${SHADOWSOCKS}\" = 'true' ] && local CLASH_SHADOWSOCKS=\"- {name: \\\"${NODE_NAME} shadowsocks\\\", type: ss, server: ${SERVER_IP}, port: $PORT_SHADOWSOCKS, cipher: aes-128-gcm, password: ${UUID}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_SHADOWSOCKS\n\"\n  [ \"${TROJAN}\" = 'true' ] && local CLASH_TROJAN=\"- {name: \\\"${NODE_NAME} trojan\\\", type: trojan, server: ${SERVER_IP}, port: $PORT_TROJAN, password: ${UUID}, client-fingerprint: random, skip-cert-verify: true, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_TROJAN\n\"\n  [ \"${VMESS_WS}\" = 'true' ] && local CLASH_VMESS_WS=\"- {name: \\\"${NODE_NAME} vmess-ws\\\", type: vmess, server: ${CDN}, port: 80, uuid: ${UUID}, udp: true, tls: false, alterId: 0, cipher: auto, skip-cert-verify: true, network: ws, ws-opts: { path: \\\"/${UUID}-vmess\\\", headers: {Host: ${ARGO_DOMAIN}} }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_VMESS_WS\n\"\n  [ \"${VLESS_WS}\" = 'true' ] && local CLASH_VLESS_WS=\"- {name: \\\"${NODE_NAME} vless-ws-tls\\\", type: vless, server: ${CDN}, port: 443, uuid: ${UUID}, udp: true, tls: true, servername: ${ARGO_DOMAIN}, network: ws, skip-cert-verify: true, ws-opts: { path: \\\"/${UUID}-vless\\\", headers: {Host: ${ARGO_DOMAIN}}, max-early-data: 2048, early-data-header-name: Sec-WebSocket-Protocol }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_VLESS_WS\n\"\n  # Clash 的 H2 传输层未实现多路复用功能，在 Clash.Meta 中更建议使用 gRPC 协议，故不输出相关配置。 https://wiki.metacubex.one/config/proxies/vless/\n  [ \"${H2_REALITY}\" = 'true' ]\n\n  [ \"${GRPC_REALITY}\" = 'true' ] && local CLASH_GRPC_REALITY=\"- {name: \\\"${NODE_NAME} grpc-reality\\\", type: vless, server: ${SERVER_IP}, port: ${PORT_GRPC_REALITY}, uuid: ${UUID}, network: grpc, tls: true, udp: true, flow:, client-fingerprint: chrome, servername: addons.mozilla.org, grpc-opts: {  grpc-service-name: \\\"grpc\\\" }, reality-opts: { public-key: ${REALITY_PUBLIC}, short-id: \\\"\\\" }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_GRPC_REALITY\n\"\n  echo -n \"${CLASH_SUBSCRIBE}\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' > ${WORK_DIR}/subscribe/proxies\n\n  # 生成 clash 订阅配置文件\n  # 模板: 使用 proxy providers\n  wget -qO- --tries=3 --timeout=2 ${SUBSCRIBE_TEMPLATE}/clash | sed \"s#NODE_NAME#${NODE_NAME}#g; s#PROXY_PROVIDERS_URL#https://${ARGO_DOMAIN}/${UUID}/proxies#\" > ${WORK_DIR}/subscribe/clash\n\n  # 生成 ShadowRocket 订阅配置文件\n  [ \"${XTLS_REALITY}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\nvless://$(echo -n \"auto:${UUID}@${SERVER_IP_2}:${PORT_XTLS_REALITY}\" | base64 -w0)?remarks=${NODE_NAME} xtls-reality&obfs=none&tls=1&peer=addons.mozilla.org&mux=1&pbk=${REALITY_PUBLIC}\n\"\n  [ \"${HYSTERIA2}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\nhysteria2://${UUID}@${SERVER_IP_1}:${PORT_HYSTERIA2}?insecure=1&obfs=none#${NODE_NAME}%20hysteria2\n\"\n  [ \"${TUIC}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\ntuic://${UUID}:${UUID}@${SERVER_IP_2}:${PORT_TUIC}?congestion_control=bbr&udp_relay_mode=native&alpn=h3&allow_insecure=1#${NODE_NAME}%20tuic\n\"\n  [ \"${SHADOWTLS}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\nss://$(echo -n \"2022-blake3-aes-128-gcm:${SHADOWTLS_PASSWORD}@${SERVER_IP_2}:${PORT_SHADOWTLS}\" | base64 -w0)?shadow-tls=$(echo -n \"{\\\"version\\\":\\\"3\\\",\\\"host\\\":\\\"addons.mozilla.org\\\",\\\"password\\\":\\\"${UUID}\\\"}\" | base64 -w0)#${NODE_NAME}%20ShadowTLS\n\"\n  [ \"${SHADOWSOCKS}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\nss://$(echo -n \"aes-128-gcm:${UUID}@${SERVER_IP_2}:$PORT_SHADOWSOCKS\" | base64 -w0)#${NODE_NAME}%20shadowsocks\n\"\n  [ \"${TROJAN}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\ntrojan://${UUID}@${SERVER_IP_1}:$PORT_TROJAN?allowInsecure=1#${NODE_NAME}%20trojan\n\"\n  [ \"${VMESS_WS}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"auto:${UUID}@${CDN}:80\" | base64 -w0)?remarks=${NODE_NAME}%20vmess-ws&obfsParam=${ARGO_DOMAIN}&path=/${UUID}-vmess&obfs=websocket&alterId=0\n\"\n  [ \"${VLESS_WS}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvless://$(echo -n \"auto:${UUID}@${CDN}:443\" | base64 -w0)?remarks=${NODE_NAME} vless-ws-tls&obfsParam=${ARGO_DOMAIN}&path=/${UUID}-vless?ed=2048&obfs=websocket&tls=1&peer=${ARGO_DOMAIN}&allowInsecure=1\n\"\n  [ \"${H2_REALITY}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvless://$(echo -n auto:${UUID}@${SERVER_IP_2}:${PORT_H2_REALITY} | base64 -w0)?remarks=${NODE_NAME}%20h2-reality&path=/&obfs=h2&tls=1&peer=addons.mozilla.org&alpn=h2&mux=1&pbk=${REALITY_PUBLIC}\n\"\n  [ \"${GRPC_REALITY}\" = 'true' ] && local SHADOWROCKET_SUBSCRIBE+=\"\nvless://$(echo -n \"auto:${UUID}@${SERVER_IP_2}:${PORT_GRPC_REALITY}\" | base64 -w0)?remarks=${NODE_NAME}%20grpc-reality&path=grpc&obfs=grpc&tls=1&peer=addons.mozilla.org&pbk=${REALITY_PUBLIC}\n\"\n  echo -n \"$SHADOWROCKET_SUBSCRIBE\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/shadowrocket\n\n  # 生成 V2rayN 订阅文件\n  [ \"${XTLS_REALITY}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_XTLS_REALITY}?encryption=none&security=reality&sni=addons.mozilla.org&fp=chrome&pbk=${REALITY_PUBLIC}&type=tcp&headerType=none#${NODE_NAME// /%20}%20xtls-reality\"\n\n  [ \"${HYSTERIA2}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nhysteria2://${UUID}@${SERVER_IP_1}:${PORT_HYSTERIA2}/?alpn=h3&insecure=1#${NODE_NAME// /%20}%20hysteria2\"\n\n  [ \"${TUIC}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\ntuic://${UUID}:${UUID}@${SERVER_IP_1}:${PORT_TUIC}?alpn=h3&congestion_control=bbr#${NODE_NAME// /%20}%20tuic\n\n# $(info \"请把 tls 里的 inSecure 设置为 true\")\"\n\n  [ \"${SHADOWTLS}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\n# $(info \"ShadowTLS 配置文件内容，需要更新 sing_box 内核\")\n\n{\n  \\\"log\\\":{\n      \\\"level\\\":\\\"warn\\\"\n  },\n  \\\"inbounds\\\":[\n      {\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"listen\\\":\\\"127.0.0.1\\\",\n          \\\"listen_port\\\":${PORT_SHADOWTLS},\n          \\\"sniff\\\":true,\n          \\\"sniff_override_destination\\\":false,\n          \\\"tag\\\": \\\"ShadowTLS\\\",\n          \\\"type\\\":\\\"mixed\\\"\n      }\n  ],\n  \\\"outbounds\\\":[\n      {\n          \\\"detour\\\":\\\"shadowtls-out\\\",\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"method\\\":\\\"2022-blake3-aes-128-gcm\\\",\n          \\\"password\\\":\\\"${SHADOWTLS_PASSWORD}\\\",\n          \\\"type\\\":\\\"shadowsocks\\\",\n          \\\"udp_over_tcp\\\": false,\n          \\\"multiplex\\\": {\n            \\\"enabled\\\": true,\n            \\\"protocol\\\": \\\"h2mux\\\",\n            \\\"max_connections\\\": 8,\n            \\\"min_streams\\\": 16,\n            \\\"padding\\\": true\n          }\n      },\n      {\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"password\\\":\\\"${UUID}\\\",\n          \\\"server\\\":\\\"${SERVER_IP}\\\",\n          \\\"server_port\\\":${PORT_SHADOWTLS},\n          \\\"tag\\\": \\\"shadowtls-out\\\",\n          \\\"tls\\\":{\n              \\\"enabled\\\":true,\n              \\\"server_name\\\":\\\"addons.mozilla.org\\\",\n              \\\"utls\\\": {\n                \\\"enabled\\\": true,\n                \\\"fingerprint\\\": \\\"chrome\\\"\n              }\n          },\n          \\\"type\\\":\\\"shadowtls\\\",\n          \\\"version\\\":3\n      }\n  ]\n}\"\n  [ \"${SHADOWSOCKS}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nss://$(echo -n \"aes-128-gcm:${UUID}@${SERVER_IP_1}:$PORT_SHADOWSOCKS\" | base64 -w0)#${NODE_NAME// /%20}%20shadowsocks\"\n\n  [ \"${TROJAN}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\ntrojan://${UUID}@${SERVER_IP_1}:$PORT_TROJAN?security=tls&type=tcp&headerType=none#${NODE_NAME// /%20}%20trojan\n\n# $(info \"ShadowTLS 配置文件内容，需要更新 sing_box 内核\")\"\n\n  [ \"${VMESS_WS}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${NODE_NAME} vmess-ws\\\", \\\"add\\\": \\\"${CDN}\\\", \\\"port\\\": \\\"80\\\", \\\"id\\\": \\\"${UUID}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"auto\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"${ARGO_DOMAIN}\\\", \\\"path\\\": \\\"/${UUID}-vmess\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\" }\" | base64 -w0)\n\"\n\n  [ \"${VLESS_WS}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${CDN}:443?encryption=none&security=tls&sni=${ARGO_DOMAIN}&type=ws&host=${ARGO_DOMAIN}&path=%2F${UUID}-vless%3Fed%3D2048#${NODE_NAME// /%20}%20vless-ws-tls\n\"\n\n  [ \"${H2_REALITY}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_H2_REALITY}?encryption=none&security=reality&sni=addons.mozilla.org&fp=chrome&pbk=${REALITY_PUBLIC}&type=http#${NODE_NAME// /%20}%20h2-reality\"\n\n  [ \"${GRPC_REALITY}\" = 'true' ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_GRPC_REALITY}?encryption=none&security=reality&sni=addons.mozilla.org&fp=chrome&pbk=${REALITY_PUBLIC}&type=grpc&serviceName=grpc&mode=gun#${NODE_NAME// /%20}%20grpc-reality\"\n\n  echo -n \"$V2RAYN_SUBSCRIBE\" | sed -E '/^[ ]*#|^[ ]+|^--|^\\{|^\\}/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/v2rayn\n\n  # 生成 NekoBox 订阅文件\n  [ \"${XTLS_REALITY}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_XTLS_REALITY}?security=reality&sni=addons.mozilla.org&fp=chrome&pbk=${REALITY_PUBLIC}&type=tcp&encryption=none#${NODE_NAME}%20xtls-reality\"\n\n  [ \"${HYSTERIA2}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nhy2://${UUID}@${SERVER_IP_1}:${PORT_HYSTERIA2}?insecure=1#${NODE_NAME} hysteria2\"\n\n  [ \"${TUIC}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\ntuic://${UUID}:${UUID}@${SERVER_IP_1}:${PORT_TUIC}?congestion_control=bbr&alpn=h3&udp_relay_mode=native&allow_insecure=1&disable_sni=1#${NODE_NAME} tuic\"\n\n  [ \"${SHADOWTLS}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nnekoray://custom#$(echo -n \"{\\\"_v\\\":0,\\\"addr\\\":\\\"127.0.0.1\\\",\\\"cmd\\\":[\\\"\\\"],\\\"core\\\":\\\"internal\\\",\\\"cs\\\":\\\"{\\n    \\\\\\\"password\\\\\\\": \\\\\\\"${UUID}\\\\\\\",\\n    \\\\\\\"server\\\\\\\": \\\\\\\"${SERVER_IP_1}\\\\\\\",\\n    \\\\\\\"server_port\\\\\\\": ${PORT_SHADOWTLS},\\n    \\\\\\\"tag\\\\\\\": \\\\\\\"shadowtls-out\\\\\\\",\\n    \\\\\\\"tls\\\\\\\": {\\n        \\\\\\\"enabled\\\\\\\": true,\\n        \\\\\\\"server_name\\\\\\\": \\\\\\\"addons.mozilla.org\\\\\\\"\\n    },\\n    \\\\\\\"type\\\\\\\": \\\\\\\"shadowtls\\\\\\\",\\n    \\\\\\\"version\\\\\\\": 3\\n}\\n\\\",\\\"mapping_port\\\":0,\\\"name\\\":\\\"1-tls-not-use\\\",\\\"port\\\":1080,\\\"socks_port\\\":0}\" | base64 -w0)\n\nnekoray://shadowsocks#$(echo -n \"{\\\"_v\\\":0,\\\"method\\\":\\\"2022-blake3-aes-128-gcm\\\",\\\"name\\\":\\\"2-ss-not-use\\\",\\\"pass\\\":\\\"${SHADOWTLS_PASSWORD}\\\",\\\"port\\\":0,\\\"stream\\\":{\\\"ed_len\\\":0,\\\"insecure\\\":false,\\\"mux_s\\\":0,\\\"net\\\":\\\"tcp\\\"},\\\"uot\\\":0}\" | base64 -w0)\"\n\n  [ \"${SHADOWSOCKS}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nss://$(echo -n \"aes-128-gcm:${UUID}\" | base64 -w0)@${SERVER_IP_1}:$PORT_SHADOWSOCKS#${NODE_NAME} shadowsocks\"\n\n  [ \"${TROJAN}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\ntrojan://${UUID}@${SERVER_IP_1}:$PORT_TROJAN?security=tls&allowInsecure=1&fp=random&type=tcp#${NODE_NAME} trojan\"\n\n  [ \"${VMESS_WS}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{\\\"add\\\":\\\"${CDN}\\\",\\\"aid\\\":\\\"0\\\",\\\"host\\\":\\\"${ARGO_DOMAIN}\\\",\\\"id\\\":\\\"${UUID}\\\",\\\"net\\\":\\\"ws\\\",\\\"path\\\":\\\"/${UUID}-vmess\\\",\\\"port\\\":\\\"80\\\",\\\"ps\\\":\\\"${NODE_NAME} vmess-ws\\\",\\\"scy\\\":\\\"auto\\\",\\\"sni\\\":\\\"\\\",\\\"tls\\\":\\\"\\\",\\\"type\\\":\\\"\\\",\\\"v\\\":\\\"2\\\"}\" | base64 -w0)\n\"\n\n  [ \"${VLESS_WS}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${CDN}:443?security=tls&sni=${ARGO_DOMAIN}&type=ws&path=/${UUID}-vless?ed%3D2048&host=${ARGO_DOMAIN}#${NODE_NAME}%20vless-ws-tls\n\"\n\n  [ \"${H2_REALITY}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_H2_REALITY}?security=reality&sni=addons.mozilla.org&alpn=h2&fp=chrome&pbk=${REALITY_PUBLIC}&type=http&encryption=none#${NODE_NAME}%20h2-reality\"\n\n  [ \"${GRPC_REALITY}\" = 'true' ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID}@${SERVER_IP_1}:${PORT_GRPC_REALITY}?security=reality&sni=addons.mozilla.org&fp=chrome&pbk=${REALITY_PUBLIC}&type=grpc&serviceName=grpc&encryption=none#${NODE_NAME}%20grpc-reality\"\n\n  echo -n \"$NEKOBOX_SUBSCRIBE\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/neko\n\n  # 生成 Sing-box 订阅文件\n  [ \"${XTLS_REALITY}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME} xtls-reality\\\", \\\"server\\\":\\\"${SERVER_IP}\\\", \\\"server_port\\\":${PORT_XTLS_REALITY}, \\\"uuid\\\":\\\"${UUID}\\\", \\\"flow\\\":\\\"\\\", \\\"packet_encoding\\\":\\\"xudp\\\", \\\"tls\\\":{ \\\"enabled\\\":true, \\\"server_name\\\":\\\"addons.mozilla.org\\\", \\\"utls\\\":{ \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} xtls-reality\\\",\"\n\n  if [ \"${HYSTERIA2}\" = 'true' ]; then\n    local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"hysteria2\\\", \\\"tag\\\": \\\"${NODE_NAME} hysteria2\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_HYSTERIA2},\"\n    [[ -n \"${PORT_HOPPING_START}\" && -n \"${PORT_HOPPING_END}\" ]] && local INBOUND_REPLACE+=\" \\\"server_ports\\\": [ \\\"${PORT_HOPPING_START}:${PORT_HOPPING_END}\\\" ],\"\n    local INBOUND_REPLACE+=\" \\\"up_mbps\\\": 200, \\\"down_mbps\\\": 1000, \\\"password\\\": \\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"insecure\\\": true, \\\"server_name\\\": \\\"\\\", \\\"alpn\\\": [ \\\"h3\\\" ] } },\"\n    local NODE_REPLACE+=\"\\\"${NODE_NAME} hysteria2\\\",\"\n  fi\n\n  [ \"${TUIC}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"tuic\\\", \\\"tag\\\": \\\"${NODE_NAME} tuic\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_TUIC}, \\\"uuid\\\": \\\"${UUID}\\\", \\\"password\\\": \\\"${UUID}\\\", \\\"congestion_control\\\": \\\"bbr\\\", \\\"udp_relay_mode\\\": \\\"native\\\", \\\"zero_rtt_handshake\\\": false, \\\"heartbeat\\\": \\\"10s\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"insecure\\\": true, \\\"server_name\\\": \\\"\\\", \\\"alpn\\\": [ \\\"h3\\\" ] } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} tuic\\\",\"\n\n  [ \"${SHADOWTLS}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"shadowsocks\\\", \\\"tag\\\": \\\"${NODE_NAME} ShadowTLS\\\", \\\"method\\\": \\\"2022-blake3-aes-128-gcm\\\", \\\"password\\\": \\\"${SHADOWTLS_PASSWORD}\\\", \\\"detour\\\": \\\"shadowtls-out\\\", \\\"udp_over_tcp\\\": false, \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } }, { \\\"type\\\": \\\"shadowtls\\\", \\\"tag\\\": \\\"shadowtls-out\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_SHADOWTLS}, \\\"version\\\": 3, \\\"password\\\": \\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"server_name\\\": \\\"addons.mozilla.org\\\", \\\"utls\\\": { \\\"enabled\\\": true, \\\"fingerprint\\\": \\\"chrome\\\" } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} ShadowTLS\\\",\"\n\n  [ \"${SHADOWSOCKS}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"shadowsocks\\\", \\\"tag\\\": \\\"${NODE_NAME} shadowsocks\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": $PORT_SHADOWSOCKS, \\\"method\\\": \\\"aes-128-gcm\\\", \\\"password\\\": \\\"${UUID}\\\", \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} shadowsocks\\\",\"\n\n  [ \"${TROJAN}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"trojan\\\", \\\"tag\\\": \\\"${NODE_NAME} trojan\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": $PORT_TROJAN, \\\"password\\\": \\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"insecure\\\": true, \\\"server_name\\\":\\\"\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} trojan\\\",\"\n\n  [ \"${VMESS_WS}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vmess\\\", \\\"tag\\\": \\\"${NODE_NAME} vmess-ws\\\", \\\"server\\\":\\\"${CDN}\\\", \\\"server_port\\\":80, \\\"uuid\\\": \\\"${UUID}\\\", \\\"security\\\": \\\"auto\\\", \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/${UUID}-vmess\\\", \\\"headers\\\": { \\\"Host\\\": \\\"${ARGO_DOMAIN}\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" && local NODE_REPLACE+=\"\\\"${NODE_NAME} vmess-ws\\\",\"\n\n  [ \"${VLESS_WS}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME} vless-ws-tls\\\", \\\"server\\\":\\\"${CDN}\\\", \\\"server_port\\\":443, \\\"uuid\\\": \\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${ARGO_DOMAIN}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/${UUID}-vless\\\", \\\"headers\\\": { \\\"Host\\\": \\\"${ARGO_DOMAIN}\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":true, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} vless-ws-tls\\\",\"\n\n  [ \"${H2_REALITY}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME} h2-reality\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_H2_REALITY}, \\\"uuid\\\":\\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"addons.mozilla.org\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"packet_encoding\\\": \\\"xudp\\\", \\\"transport\\\": { \\\"type\\\": \\\"http\\\" } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} h2-reality\\\",\"\n\n  [ \"${GRPC_REALITY}\" = 'true' ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME} grpc-reality\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_GRPC_REALITY}, \\\"uuid\\\":\\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"addons.mozilla.org\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"packet_encoding\\\": \\\"xudp\\\", \\\"transport\\\": { \\\"type\\\": \\\"grpc\\\", \\\"service_name\\\": \\\"grpc\\\" } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME} grpc-reality\\\",\"\n\n  # 模板\n  local SING_BOX_JSON1=$(wget -qO- --tries=3 --timeout=2 ${SUBSCRIBE_TEMPLATE}/sing-box1)\n\n  echo $SING_BOX_JSON1 | sed 's#, {[^}]\\+\"tun-in\"[^}]\\+}##' | sed \"s#\\\"<INBOUND_REPLACE>\\\",#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#${NODE_REPLACE%,}#g\" | ${WORK_DIR}/jq > ${WORK_DIR}/subscribe/sing-box-pc\n\n  echo $SING_BOX_JSON1 | sed 's# {[^}]\\+\"mixed\"[^}]\\+},##; s#, \"auto_detect_interface\": true##' | sed \"s#\\\"<INBOUND_REPLACE>\\\",#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#${NODE_REPLACE%,}#g\" | ${WORK_DIR}/jq > ${WORK_DIR}/subscribe/sing-box-phone\n\n  # 生成二维码 url 文件\n  cat > ${WORK_DIR}/subscribe/qr << EOF\n自适应 Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM 客户端:\n模版:\nhttps://${ARGO_DOMAIN}/${UUID}/auto\n\n订阅 QRcode:\n模版:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://${ARGO_DOMAIN}/${UUID}/auto\n\n模版:\n$(${WORK_DIR}/qrencode \"https://${ARGO_DOMAIN}/${UUID}/auto\")\nEOF\n\n  # 生成配置文件\n  EXPORT_LIST_FILE=\"*******************************************\n┌────────────────┐\n│                │\n│     $(warning \"V2rayN\")     │\n│                │\n└────────────────┘\n$(info \"${V2RAYN_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│  $(warning \"ShadowRocket\")  │\n│                │\n└────────────────┘\n----------------------------\n$(hint \"${SHADOWROCKET_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│   $(warning \"Clash Meta\")   │\n│                │\n└────────────────┘\n----------------------------\n\n$(info \"$(sed '1d' <<< \"${CLASH_SUBSCRIBE}\")\")\n\n*******************************************\n┌────────────────┐\n│                │\n│    $(warning \"NekoBox\")     │\n│                │\n└────────────────┘\n$(hint \"${NEKOBOX_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│    $(warning \"Sing-box\")    │\n│                │\n└────────────────┘\n----------------------------\n\n$(info \"$(echo \"{ \\\"outbounds\\\":[ ${INBOUND_REPLACE%,} ] }\" | ${WORK_DIR}/jq)\n\n各客户端配置文件路径: ${WORK_DIR}/subscribe/\\n 完整模板可参照:\\n https://t.me/ztvps/100\\n https://github.com/chika0801/sing-box-examples/tree/main/Tun\")\n\"\n\nEXPORT_LIST_FILE+=\"\n\n*******************************************\n\n$(hint \"Index:\nhttps://${ARGO_DOMAIN}/${UUID}/\n\nQR code:\nhttps://${ARGO_DOMAIN}/${UUID}/qr\n\nV2rayN 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/v2rayn\")\n\n$(hint \"NekoBox 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/neko\")\n\n$(hint \"Clash 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/clash\n\nsing-box for pc 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/sing-box-pc\n\nsing-box for cellphone 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/sing-box-phone\n\nShadowRocket 订阅:\nhttps://${ARGO_DOMAIN}/${UUID}/shadowrocket\")\n\n*******************************************\n\n$(info \" 自适应 Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM 客户端:\n模版:\nhttps://${ARGO_DOMAIN}/${UUID}/auto\n\n 订阅 QRcode:\n模版:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://${ARGO_DOMAIN}/${UUID}/auto\")\n\n$(hint \"模版:\")\n$(${WORK_DIR}/qrencode https://${ARGO_DOMAIN}/${UUID}/auto)\n\"\n\n  # 生成并显示节点信息\n  echo \"$EXPORT_LIST_FILE\" > ${WORK_DIR}/list\n  cat ${WORK_DIR}/list\n\n  # 显示脚本使用情况数据\n  hint \"\\n*******************************************\\n\"\n}\n\n# Sing-box 的最新版本\nupdate_sing-box() {\n  #####local ONLINE=$(check_latest_sing-box)\n  local ONLINE='1.11.0-alpha.6'\n  local LOCAL=$(${WORK_DIR}/sing-box version | awk '/version/{print $NF}')\n  if [ -n \"$ONLINE\" ]; then\n    if [[ \"$ONLINE\" != \"$LOCAL\" ]]; then\n      wget https://github.com/SagerNet/sing-box/releases/download/v$ONLINE/sing-box-$ONLINE-linux-$SING_BOX_ARCH.tar.gz -O- | tar xz -C ${WORK_DIR} sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box &&\n      mv ${WORK_DIR}/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box ${WORK_DIR}/sing-box &&\n      rm -rf ${WORK_DIR}/sing-box-$ONLINE-linux-$SING_BOX_ARCH &&\n      supervisorctl restart sing-box\n      info \" Sing-box v${ONLINE} 更新成功！\"\n    else\n      info \" Sing-box v${ONLINE} 已是最新版本！\"\n    fi\n  else\n    warning \" 获取不了在线版本，请稍后再试！\"\n  fi\n}\n\n# 传参\nwhile getopts \":Vv\" OPTNAME; do\n  case \"${OPTNAME,,}\" in\n    v ) ACTION=update\n  esac\ndone\n\n# 主流程\ncheck_arch\n\ncase \"$ACTION\" in\n  update )\n    update_sing-box\n    ;;\n  * )\n    install\n    # 运行 supervisor 进程守护\n    supervisord -c /etc/supervisord.conf\nesac"
        },
        {
          "name": "sing-box.sh",
          "type": "blob",
          "size": 156.1416015625,
          "content": "#!/usr/bin/env bash\n\n# 当前脚本版本号\nVERSION='v1.2.10 (2024.12.31)'\n\n# 各变量默认值\nGH_PROXY='https://ghproxy.lvedong.eu.org/'\nTEMP_DIR='/tmp/sing-box'\nWORK_DIR='/etc/sing-box'\nSTART_PORT_DEFAULT='8881'\nMIN_PORT=100\nMAX_PORT=65520\nMIN_HOPPING_PORT=10000\nMAX_HOPPING_PORT=65535\nTLS_SERVER_DEFAULT=addons.mozilla.org\nPROTOCOL_LIST=(\"XTLS + reality\" \"hysteria2\" \"tuic\" \"ShadowTLS\" \"shadowsocks\" \"trojan\" \"vmess + ws\" \"vless + ws + tls\" \"H2 + reality\" \"gRPC + reality\")\nNODE_TAG=(\"xtls-reality\" \"hysteria2\" \"tuic\" \"ShadowTLS\" \"shadowsocks\" \"trojan\" \"vmess-ws\" \"vless-ws-tls\" \"h2-reality\" \"grpc-reality\")\nCONSECUTIVE_PORTS=${#PROTOCOL_LIST[@]}\nCDN_DOMAIN=(\"8cc.free.hr\" \"cm.yutian.us.kg\" \"fan.yutian.us.kg\" \"xn--b6gac.eu.org\" \"dash.cloudflare.com\" \"skk.moe\" \"visa.com\")\nSUBSCRIBE_TEMPLATE=\"https://raw.githubusercontent.com/fscarmen/client_template/main\"\n\nexport DEBIAN_FRONTEND=noninteractive\n\ntrap \"rm -rf $TEMP_DIR >/dev/null 2>&1 ; echo -e '\\n' ;exit\" INT QUIT TERM EXIT\n\nmkdir -p $TEMP_DIR\n\nE[0]=\"Language:\\n 1. English (default) \\n 2. 简体中文\"\nC[0]=\"${E[0]}\"\nE[1]=\"Adapted v1.11.0-beta.17 to add port hopping for hysteria2 in sing-box client output.\"\nC[1]=\"适配 v1.11.0-beta.17，在 sing-box 客户端输出中添加 hysteria2 的端口跳跃\"\nE[2]=\"Downloading Sing-box. Please wait a seconds ...\"\nC[2]=\"下载 Sing-box 中，请稍等 ...\"\nE[3]=\"Input errors up to 5 times.The script is aborted.\"\nC[3]=\"输入错误达5次,脚本退出\"\nE[4]=\"UUID should be 36 characters, please re-enter \\(\\${UUID_ERROR_TIME} times remaining\\):\"\nC[4]=\"UUID 应为36位字符,请重新输入 \\(剩余\\${UUID_ERROR_TIME}次\\):\"\nE[5]=\"The script supports Debian, Ubuntu, CentOS, Alpine, Fedora or Arch systems only. Feedback: [https://github.com/fscarmen/sing-box/issues]\"\nC[5]=\"本脚本只支持 Debian、Ubuntu、CentOS、Alpine、Fedora 或 Arch 系统,问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[6]=\"Curren operating system is \\$SYS.\\\\\\n The system lower than \\$SYSTEM \\${MAJOR[int]} is not supported. Feedback: [https://github.com/fscarmen/sing-box/issues]\"\nC[6]=\"当前操作是 \\$SYS\\\\\\n 不支持 \\$SYSTEM \\${MAJOR[int]} 以下系统,问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[7]=\"Install dependence-list:\"\nC[7]=\"安装依赖列表:\"\nE[8]=\"All dependencies already exist and do not need to be installed additionally.\"\nC[8]=\"所有依赖已存在，不需要额外安装\"\nE[9]=\"To upgrade, press [y]. No upgrade by default:\"\nC[9]=\"升级请按 [y]，默认不升级:\"\nE[10]=\"\\(4/6\\) Please enter VPS IP \\(Default is: \\${SERVER_IP_DEFAULT}\\):\"\nC[10]=\"\\(4/6\\) 请输入 VPS IP \\(默认为: \\${SERVER_IP_DEFAULT}\\):\"\nE[11]=\"\\(2/6\\) Please enter the starting port number. Must be \\${MIN_PORT} - \\${MAX_PORT}, consecutive \\${NUM} free ports are required \\(Default is: \\${START_PORT_DEFAULT}\\):\"\nC[11]=\"\\(2/6\\) 请输入开始的端口号，必须是 \\${MIN_PORT} - \\${MAX_PORT}，需要连续\\${NUM}个空闲的端口 \\(默认为: \\${START_PORT_DEFAULT}\\):\"\nE[12]=\"\\(5/6\\) Please enter UUID \\(Default is \\${UUID_DEFAULT}\\):\"\nC[12]=\"\\(5/6\\) 请输入 UUID \\(默认为 \\${UUID_DEFAULT}\\):\"\nE[13]=\"\\(6/6\\) Please enter the node name. \\(Default is \\${NODE_NAME_DEFAULT}\\):\"\nC[13]=\"\\(6/6\\) 请输入节点名称 \\(默认为: \\${NODE_NAME_DEFAULT}\\):\"\nE[14]=\"Node name only allow uppercase and lowercase letters and numeric characters, please re-enter \\(\\${a} times remaining\\):\"\nC[14]=\"节点名称只允许英文大小写及数字字符，请重新输入 \\(剩余\\${a}次\\):\"\nE[15]=\"Sing-box script has not been installed yet.\"\nC[15]=\"Sing-box 脚本还没有安装\"\nE[16]=\"Sing-box is completely uninstalled.\"\nC[16]=\"Sing-box 已彻底卸载\"\nE[17]=\"Version\"\nC[17]=\"脚本版本\"\nE[18]=\"New features\"\nC[18]=\"功能新增\"\nE[19]=\"System infomation\"\nC[19]=\"系统信息\"\nE[20]=\"Operating System\"\nC[20]=\"当前操作系统\"\nE[21]=\"Kernel\"\nC[21]=\"内核\"\nE[22]=\"Architecture\"\nC[22]=\"处理器架构\"\nE[23]=\"Virtualization\"\nC[23]=\"虚拟化\"\nE[24]=\"Choose:\"\nC[24]=\"请选择:\"\nE[25]=\"Curren architecture \\$(uname -m) is not supported. Feedback: [https://github.com/fscarmen/sing-box/issues]\"\nC[25]=\"当前架构 \\$(uname -m) 暂不支持,问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[26]=\"Not install\"\nC[26]=\"未安装\"\nE[27]=\"close\"\nC[27]=\"关闭\"\nE[28]=\"open\"\nC[28]=\"开启\"\nE[29]=\"View links (sb -n)\"\nC[29]=\"查看节点信息 (sb -n)\"\nE[30]=\"Change listen ports (sb -p)\"\nC[30]=\"更换监听端口 (sb -p)\"\nE[31]=\"Sync Sing-box to the latest version (sb -v)\"\nC[31]=\"同步 Sing-box 至最新版本 (sb -v)\"\nE[32]=\"Upgrade kernel, turn on BBR, change Linux system (sb -b)\"\nC[32]=\"升级内核、安装BBR、DD脚本 (sb -b)\"\nE[33]=\"Uninstall (sb -u)\"\nC[33]=\"卸载 (sb -u)\"\nE[34]=\"Install Sing-box\"\nC[34]=\"安装 Sing-box\"\nE[35]=\"Exit\"\nC[35]=\"退出\"\nE[36]=\"Please enter the correct number\"\nC[36]=\"请输入正确数字\"\nE[37]=\"successful\"\nC[37]=\"成功\"\nE[38]=\"failed\"\nC[38]=\"失败\"\nE[39]=\"Sing-box is not installed and cannot change the Argo tunnel.\"\nC[39]=\"Sing-box 未安装，不能更换 Argo 隧道\"\nE[40]=\"Sing-box local verion: \\$LOCAL\\\\\\t The newest verion: \\$ONLINE\"\nC[40]=\"Sing-box 本地版本: \\$LOCAL\\\\\\t 最新版本: \\$ONLINE\"\nE[41]=\"No upgrade required.\"\nC[41]=\"不需要升级\"\nE[42]=\"Downloading the latest version Sing-box failed, script exits. Feedback:[https://github.com/fscarmen/sing-box/issues]\"\nC[42]=\"下载最新版本 Sing-box 失败，脚本退出，问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[43]=\"The script must be run as root, you can enter sudo -i and then download and run again. Feedback:[https://github.com/fscarmen/sing-box/issues]\"\nC[43]=\"必须以root方式运行脚本，可以输入 sudo -i 后重新下载运行，问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[44]=\"Ports are in used:  \\${IN_USED[*]}\"\nC[44]=\"正在使用中的端口: \\${IN_USED[*]}\"\nE[45]=\"Ports used: \\${NOW_START_PORT} - \\$((NOW_START_PORT+NOW_CONSECUTIVE_PORTS-1))\"\nC[45]=\"使用端口: \\${NOW_START_PORT} - \\$((NOW_START_PORT+NOW_CONSECUTIVE_PORTS-1))\"\nE[46]=\"Warp / warp-go was detected to be running. Please enter the correct server IP:\"\nC[46]=\"检测到 warp / warp-go 正在运行，请输入确认的服务器 IP:\"\nE[47]=\"No server ip, script exits. Feedback:[https://github.com/fscarmen/sing-box/issues]\"\nC[47]=\"没有 server ip，脚本退出，问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[48]=\"ShadowTLS - Copy the above two Neko links and manually set up the chained proxies in order. Tutorial: https://github.com/fscarmen/sing-box/blob/main/README.md#sekobox-%E8%AE%BE%E7%BD%AE-shadowtls-%E6%96%B9%E6%B3%95\"\nC[48]=\"ShadowTLS - 复制上面两条 Neko links 进去，并按顺序手动设置链式代理，详细教程: https://github.com/fscarmen/sing-box/blob/main/README.md#sekobox-%E8%AE%BE%E7%BD%AE-shadowtls-%E6%96%B9%E6%B3%95\"\nE[49]=\"(1/6) Select more protocols to install (e.g. hgbd). The order of the port numbers of the protocols is related to the ordering of the multiple choices:\\n a. all (default)\"\nC[49]=\"(1/6) 多选需要安装协议(比如 hgbd)，协议的端口号次序与多选的排序有关:\\n a. all (默认)\"\nE[50]=\"Please enter the \\$TYPE domain name:\"\nC[50]=\"请输入 \\$TYPE 域名:\"\nE[51]=\"Please choose or custom a cdn, http support is required:\"\nC[51]=\"请选择或输入 cdn，要求支持 http:\"\nE[52]=\"Please set the ip \\[\\${WS_SERVER_IP_SHOW}] to domain \\[\\${TYPE_HOST_DOMAIN}], and set the origin rule to \\[\\${TYPE_PORT_WS}] in Cloudflare.\"\nC[52]=\"请在 Cloudflare 绑定 \\[\\${WS_SERVER_IP_SHOW}] 的域名为 \\[\\${TYPE_HOST_DOMAIN}], 并设置 origin rule 为 \\[\\${TYPE_PORT_WS}]\"\nE[53]=\"Please select or enter the preferred domain, the default is \\${CDN_DOMAIN[0]}:\"\nC[53]=\"请选择或者填入优选域名，默认为 \\${CDN_DOMAIN[0]}:\"\nE[54]=\"The contents of the ShadowTLS configuration file need to be updated for the sing_box kernel.\"\nC[54]=\"ShadowTLS 配置文件内容，需要更新 sing_box 内核\"\nE[55]=\"The script runs today: \\$TODAY. Total: \\$TOTAL\"\nC[55]=\"脚本当天运行次数: \\$TODAY，累计运行次数: \\$TOTAL\"\nE[56]=\"Process ID\"\nC[56]=\"进程ID\"\nE[57]=\"Selecting the ws return method:\\n 1. Argo (default)\\n 2. Origin rules\"\nC[57]=\"选择 ws 的回源方式:\\n 1. Argo (默认)\\n 2. Origin rules\"\nE[58]=\"Memory Usage\"\nC[58]=\"内存占用\"\nE[59]=\"Install ArgoX scripts (argo + xray) [https://github.com/fscarmen/argox]\"\nC[59]=\"安装 ArgoX 脚本 (argo + xray) [https://github.com/fscarmen/argox]\"\nE[60]=\"The order of the selected protocols and ports is as follows:\"\nC[60]=\"选择的协议及端口次序如下:\"\nE[61]=\"There are no replaceable Argo tunnels.\"\nC[61]=\"没有可更换的Argo 隧道\"\nE[62]=\"Add / Remove protocols (sb -r)\"\nC[62]=\"增加 / 删除协议 (sb -r)\"\nE[63]=\"(1/3) Installed protocols.\"\nC[63]=\"(1/3) 已安装的协议\"\nE[64]=\"Please select the protocols to be removed (multiple selections possible. Press Enter to skip):\"\nC[64]=\"请选择需要删除的协议（可以多选，回车跳过）:\"\nE[65]=\"(2/3) Uninstalled protocols.\"\nC[65]=\"(2/3) 未安装的协议\"\nE[66]=\"Please select the protocols to be added (multiple choices possible. Press Enter to skip):\"\nC[66]=\"请选择需要增加的协议（可以多选，回车跳过）:\"\nE[67]=\"(3/3) Confirm all protocols for reloading.\"\nC[67]=\"(3/3) 确认重装的所有协议\"\nE[68]=\"Press [n] if there is an error, other keys to continue:\"\nC[68]=\"如有错误请按 [n]，其他键继续:\"\nE[69]=\"Install sba scripts (argo + sing-box) [https://github.com/fscarmen/sba]\"\nC[69]=\"安装 sba 脚本 (argo + sing-box) [https://github.com/fscarmen/sba]\"\nE[70]=\"Please set inSecure in tls to true.\"\nC[70]=\"请把 tls 里的 inSecure 设置为 true\"\nE[71]=\"Create shortcut [ sb ] successfully.\"\nC[71]=\"创建快捷 [ sb ] 指令成功!\"\nE[72]=\"Path to each client configuration file: ${WORK_DIR}/subscribe/\\n The full template can be found at:\\n https://t.me/ztvps/100\\n https://github.com/chika0801/sing-box-examples/tree/main/Tun\"\nC[72]=\"各客户端配置文件路径: ${WORK_DIR}/subscribe/\\n 完整模板可参照:\\n https://t.me/ztvps/100\\n https://github.com/chika0801/sing-box-examples/tree/main/Tun\"\nE[73]=\"There is no protocol left, if you are sure please re-run [ sb -u ] to uninstall all.\"\nC[73]=\"没有协议剩下，如确定请重新执行 [ sb -u ] 卸载所有\"\nE[74]=\"Keep protocols\"\nC[74]=\"保留协议\"\nE[75]=\"Add protocols\"\nC[75]=\"新增协议\"\nE[76]=\"Install TCP brutal\"\nC[76]=\"安装 TCP brutal\"\nE[77]=\"With sing-box installed, the script exits.\"\nC[77]=\"已安装 sing-box ，脚本退出\"\nE[78]=\"Parameter [ $ERROR_PARAMETER ] error, script exits.\"\nC[78]=\"[ $ERROR_PARAMETER ] 参数错误，脚本退出\"\nE[79]=\"\\(3/6\\) Please enter the port number of nginx. Must be \\${MIN_PORT} - \\${MAX_PORT} \\(Default is: \\${PORT_NGINX_DEFAULT}\\):\"\nC[79]=\"\\(3/6\\) 请输入 nginx 端口号，必须是 \\${MIN_PORT} - \\${MAX_PORT} \\(默认为: \\${PORT_NGINX_DEFAULT}\\):\"\nE[80]=\"subscribe\"\nC[80]=\"订阅\"\nE[81]=\"Adaptive Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM Clients\"\nC[81]=\"自适应 Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM 客户端\"\nE[82]=\"template\"\nC[82]=\"模版\"\nE[83]=\"To uninstall Nginx press [y], it is not uninstalled by default:\"\nC[83]=\"如要卸载 Nginx 请按 [y]，默认不卸载:\"\nE[84]=\"Set SElinux: enforcing --> disabled\"\nC[84]=\"设置 SElinux: enforcing --> disabled\"\nE[85]=\"Please input Argo Token or Json ( User can easily obtain the json at https://fscarmen.cloudflare.now.cc ):\"\nC[85]=\"请输入 Argo Token 或者 Json ( 用户通过以下网站轻松获取 json: https://fscarmen.cloudflare.now.cc ):\"\nE[86]=\"Argo authentication message does not match the rules, neither Token nor Json, script exits. Feedback:[https://github.com/fscarmen/sba/issues]\"\nC[86]=\"Argo 认证信息不符合规则，既不是 Token，也是不是 Json，脚本退出，问题反馈:[https://github.com/fscarmen/sba/issues]\"\nE[87]=\"Please input the Argo domain (Default is temporary domain if left blank):\"\nC[87]=\"请输入 Argo 域名 (如果没有，可以跳过以使用 Argo 临时域名):\"\nE[88]=\"Please input the Argo domain (cannot be empty):\"\nC[88]=\"请输入 Argo 域名 (不能为空):\"\nE[89]=\"( Additional dependencies: nginx )\"\nC[89]=\"( 额外依赖: nginx )\"\nE[90]=\"Argo tunnel is: \\$ARGO_TYPE\\\\\\n The domain is: \\$ARGO_DOMAIN\"\nC[90]=\"Argo 隧道类型为: \\$ARGO_TYPE\\\\\\n 域名是: \\$ARGO_DOMAIN\"\nE[91]=\"Argo tunnel type:\\n 1. Try\\n 2. Token or Json\"\nC[91]=\"Argo 隧道类型:\\n 1. Try\\n 2. Token 或者 Json\"\nE[92]=\"Change the Argo tunnel (sb -t)\"\nC[92]=\"更换 Argo 隧道 (sb -t)\"\nE[93]=\"Can't get the temporary tunnel domain, script exits. Feedback:[https://github.com/fscarmen/sing-box/issues]\"\nC[93]=\"获取不到临时隧道的域名，脚本退出，问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[94]=\"Please bind \\[\\${ARGO_DOMAIN}] tunnel TYPE to HTTP and URL to \\[\\localhost:\\${PORT_NGINX}] in Cloudflare.\"\nC[94]=\"请在 Cloudflare 绑定 \\[\\${ARGO_DOMAIN}] 隧道 TYPE 为 HTTP，URL 为 \\[\\localhost:\\${PORT_NGINX}]\"\nE[95]=\"netfilter-persistent installation failed, but the installation progress will not stop. portHopping forwarding rules are temporary rules, reboot may be invalidated.\"\nC[95]=\"netfilter-persistent安装失败,但安装进度不会停止。PortHopping转发规则为临时规则,重启可能失效\"\nE[96]=\"netfilter-persistent is not started, PortHopping forwarding rules cannot be persisted. Reboot the system, the rules will be invalidated, please manually execute [netfilter-persistent save], continue the script does not affect the subsequent configuration.\"\nC[96]=\"netfilter-persistent未启动，PortHopping转发规则无法持久化，重启系统，规则将会失效，请手动执行 [netfilter-persistent save],继续运行脚本不影响后续配置\"\nE[97]=\"Port Hopping/Multiple: Users sometimes report that their ISPs block or throttle persistent UDP connections. However, these restrictions often only apply to the specific port being used. Port hopping can be used as a workaround for this situation. This function needs to occupy multiple ports, please make sure that these ports are not listening to other services. \\n Tip1: The number of ports should not be too many, the recommended number is about 1000, the minimum value: $MIN_HOPPING_PORT, the maximum value: $MAX_HOPPING_PORT.\\n Tip2: nat machines have a limited number of ports to listen on, usually 20-30. If setting ports out of the nat range will cause the node to not work, please use with caution!\\n This function is not used by default.\"\nC[97]=\"端口跳跃/多端口(Port Hopping)介绍: 用户有时报告运营商会阻断或限速 UDP 连接。不过，这些限制往往仅限单个端口。端口跳跃可用作此情况的解决方法。该功能需要占用多个端口，请保证这些端口没有监听其他服务\\n Tip1: 端口选择数量不宜过多，推荐1000个左右，最小值:$MIN_HOPPING_PORT，最大值: $MAX_HOPPING_PORT\\n Tip2: nat 鸡由于可用于监听的端口有限，一般为20-30个。如设置了不开放的端口会导致节点不通，请慎用！\\n 默认不使用该功能\"\nE[98]=\"Enter the port range, e.g. 50000:51000. Leave blank to disable:\"\nC[98]=\"请输入端口范围，例如 50000:51000，如要禁用请留空:\"\nE[99]=\"The \\${SING_BOX_SCRIPT} is detected to be installed. Script exits.\"\nC[99]=\"检测到已安装 \\${SING_BOX_SCRIPT}，脚本退出!\"\n\n# 自定义字体彩色，read 函数\nwarning() { echo -e \"\\033[31m\\033[01m$*\\033[0m\"; }  # 红色\nerror() { echo -e \"\\033[31m\\033[01m$*\\033[0m\" && exit 1; } # 红色\ninfo() { echo -e \"\\033[32m\\033[01m$*\\033[0m\"; }   # 绿色\nhint() { echo -e \"\\033[33m\\033[01m$*\\033[0m\"; }   # 黄色\nreading() { read -rp \"$(info \"$1\")\" \"$2\"; }\ntext() { grep -q '\\$' <<< \"${E[$*]}\" && eval echo \"\\$(eval echo \"\\${${L}[$*]}\")\" || eval echo \"\\${${L}[$*]}\"; }\n\n# 检测是否需要启用 Github CDN，如能直接连通，则不使用\ncheck_cdn() {\n  [ -n \"$GH_PROXY\" ] && wget --server-response --quiet --output-document=/dev/null --no-check-certificate --tries=2 --timeout=3 https://raw.githubusercontent.com/fscarmen/sing-box/main/README.md >/dev/null 2>&1 && unset GH_PROXY\n}\n\n# 检测是否解锁 chatGPT，以决定是否使用 warp 链式代理或者是 direct out，此处判断改编自 https://github.com/lmc999/RegionRestrictionCheck\ncheck_chatgpt() {\n  local CHECK_STACK=-$1\n  local UA_BROWSER=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36\"\n  local UA_SEC_CH_UA='\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"'\n  wget --help | grep -q '\\-\\-ciphers' && local IS_CIPHERS=is_ciphers\n\n  # 首先检查API访问\n  local CHECK_RESULT1=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} -qO- --content-on-error --header='authority: api.openai.com' --header='accept: */*' --header='accept-language: en-US,en;q=0.9' --header='authorization: Bearer null' --header='content-type: application/json' --header='origin: https://platform.openai.com' --header='referer: https://platform.openai.com/' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: empty' --header='sec-fetch-mode: cors' --header='sec-fetch-site: same-site' --user-agent=\"${UA_BROWSER}\" 'https://api.openai.com/compliance/cookie_requirements')\n\n  [ -z \"$CHECK_RESULT1\" ] && grep -qw is_ciphers <<< \"$IS_CIPHERS\" && local CHECK_RESULT1=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} --ciphers=DEFAULT@SECLEVEL=1 --no-check-certificate -qO- --content-on-error --header='authority: api.openai.com' --header='accept: */*' --header='accept-language: en-US,en;q=0.9' --header='authorization: Bearer null' --header='content-type: application/json' --header='origin: https://platform.openai.com' --header='referer: https://platform.openai.com/' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: empty' --header='sec-fetch-mode: cors' --header='sec-fetch-site: same-site' --user-agent=\"${UA_BROWSER}\" 'https://api.openai.com/compliance/cookie_requirements')\n\n  # 如果API检测失败或者检测到unsupported_country,直接返回ban\n  if [ -z \"$CHECK_RESULT1\" ] || grep -qi 'unsupported_country' <<< \"$CHECK_RESULT1\"; then\n    echo \"ban\"\n    return\n  fi\n\n  # API检测通过后,继续检查网页访问\n  local CHECK_RESULT2=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} -qO- --content-on-error --header='authority: ios.chat.openai.com' --header='accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' --header='accept-language: en-US,en;q=0.9' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: document' --header='sec-fetch-mode: navigate' --header='sec-fetch-site: none' --header='sec-fetch-user: ?1' --header='upgrade-insecure-requests: 1' --user-agent=\"${UA_BROWSER}\" https://ios.chat.openai.com/)\n\n  [ -z \"$CHECK_RESULT2\" ] && grep -qw is_ciphers <<< \"$IS_CIPHERS\" && local CHECK_RESULT2=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} --ciphers=DEFAULT@SECLEVEL=1 --no-check-certificate -qO- --content-on-error --header='authority: ios.chat.openai.com' --header='accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' --header='accept-language: en-US,en;q=0.9' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: document' --header='sec-fetch-mode: navigate' --header='sec-fetch-site: none' --header='sec-fetch-user: ?1' --header='upgrade-insecure-requests: 1' --user-agent=\"${UA_BROWSER}\" https://ios.chat.openai.com/)\n\n  # 检查第二个结果\n  if [ -z \"$CHECK_RESULT2\" ] || grep -qi 'VPN' <<< \"$CHECK_RESULT2\"; then\n    echo \"ban\"\n  else\n    echo \"unlock\"\n  fi\n}\n\n# 脚本当天及累计运行次数统计\nstatistics_of_run-times() {\n  local COUNT=$(wget --no-check-certificate -qO- --tries=2 --timeout=2 \"https://hit.forvps.gq/https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh\" 2>&1 | grep -m1 -oE \"[0-9]+[ ]+/[ ]+[0-9]+\") &&\n  TODAY=$(awk -F ' ' '{print $1}' <<< \"$COUNT\") &&\n  TOTAL=$(awk -F ' ' '{print $3}' <<< \"$COUNT\")\n}\n\n# 选择中英语言\nselect_language() {\n  if [ -z \"$L\" ]; then\n    if [ -s ${WORK_DIR}/language ]; then\n      L=$(cat ${WORK_DIR}/language)\n    else\n      L=E && hint \"\\n $(text 0) \\n\" && reading \" $(text 24) \" LANGUAGE\n      [ \"$LANGUAGE\" = 2 ] && L=C\n    fi\n  fi\n}\n\n# 字母与数字的 ASCII 码值转换\nasc() {\n  if [[ \"$1\" = [a-z] ]]; then\n    [ \"$2\" = '++' ] && printf \"\\\\$(printf '%03o' \"$[ $(printf \"%d\" \"'$1'\") + 1 ]\")\" || printf \"%d\" \"'$1'\"\n  else\n    [[ \"$1\" =~ ^[0-9]+$ ]] && printf \"\\\\$(printf '%03o' \"$1\")\"\n  fi\n}\n\n# 收录一些热心网友和官网的 cdn\ninput_cdn() {\n  echo \"\"\n  for c in \"${!CDN_DOMAIN[@]}\"; do\n    hint \" $[c+1]. ${CDN_DOMAIN[c]} \"\n  done\n\n  reading \"\\n $(text 53) \" CUSTOM_CDN\n  case \"$CUSTOM_CDN\" in\n    [1-${#CDN_DOMAIN[@]}] )\n      CDN=\"${CDN_DOMAIN[$((CUSTOM_CDN-1))]}\"\n      ;;\n    ?????* )\n      CDN=\"$CUSTOM_CDN\"\n      ;;\n    * )\n      CDN=\"${CDN_DOMAIN[0]}\"\n  esac\n}\n\n# 输入 Nginx 服务端口\ninput_nginx_port() {\n  local NUM=$1\n  local PORT_ERROR_TIME=6\n  # 生成 1000 - 65535 随机默认端口数\n  local PORT_NGINX_DEFAULT=$(shuf -i ${MIN_PORT}-${MAX_PORT} -n 1)\n  while true; do\n    [[ \"$PORT_ERROR_TIME\" > 1 && \"$PORT_ERROR_TIME\" < 6 ]] && unset IN_USED PORT_NGINX\n    (( PORT_ERROR_TIME-- )) || true\n    if [ \"$PORT_ERROR_TIME\" = 0 ]; then\n      error \"\\n $(text 3) \\n\"\n    else\n      [ -z \"$PORT_NGINX\" ] && reading \"\\n $(text 79) \" PORT_NGINX\n    fi\n    PORT_NGINX=${PORT_NGINX:-\"$PORT_NGINX_DEFAULT\"}\n    if [[ \"$PORT_NGINX\" =~ ^[1-9][0-9]{1,4}$ && \"$PORT_NGINX\" -ge \"$MIN_PORT\" && \"$PORT_NGINX\" -le \"$MAX_PORT\" ]]; then\n      ss -nltup | grep -q \":$PORT_NGINX\" && warning \"\\n $(text 44) \\n\" || break\n    fi\n  done\n}\n\n# 输入 hysteria2 跳跃端口\ninput_hopping_port() {\n  local HOPPING_ERROR_TIME=6\n  until [ -n \"$IS_HOPPING\" ]; do\n    (( HOPPING_ERROR_TIME-- )) || true\n    case \"$HOPPING_ERROR_TIME\" in\n      0 )\n        error \"\\n $(text 3) \\n\"\n        ;;\n      5 )\n        hint \"\\n $(text 97) \\n\" && reading \" $(text 98) \" PORT_HOPPING_RANGE\n        ;;\n      * )\n        reading \" $(text 98) \" PORT_HOPPING_RANGE\n    esac\n    if [[ \"${PORT_HOPPING_RANGE//-/:}\" =~ ^[1-6][0-9]{4}:[1-6][0-9]{4}$ ]]; then\n      # 为防止输入错误，把 - 改为 : ，比如  10000-11000 改为 10000:11000\n      PORT_HOPPING_RANGE=${PORT_HOPPING_RANGE//-/:}\n      PORT_HOPPING_START=${PORT_HOPPING_RANGE%:*}\n      PORT_HOPPING_END=${PORT_HOPPING_RANGE#*:}\n      [[ \"$PORT_HOPPING_START\" < \"$PORT_HOPPING_END\" && \"$PORT_HOPPING_START\" -ge \"$MIN_HOPPING_PORT\" && \"$PORT_HOPPING_END\" -le \"$MAX_HOPPING_PORT\" ]] && IS_HOPPING=is_hopping || warning \"\\n $(text 36) \"\n    elif [[ -z \"$PORT_HOPPING_RANGE\" || \"${PORT_HOPPING_RANGE,,}\" =~ ^(n|no)$ ]]; then\n      IS_HOPPING=no_hoppinng\n    else\n      warning \"\\n $(text 36) \"\n    fi\n  done\n}\n\n# 输入 Argo 域名和认证信息\ninput_argo_auth() {\n  local IS_CHANGE_ARGO=$1\n  [ -n \"$IS_CHANGE_ARGO\" ] && local EMPTY_ERROR_TIME=5\n  local DOMAIN_ERROR_TIME=6\n\n  # 处理可能输入的错误，去掉开头和结尾的空格，去掉最后的 :\n  if [ \"$IS_CHANGE_ARGO\" = 'is_change_argo' ]; then\n    until [ -n \"$ARGO_DOMAIN\" ]; do\n      (( EMPTY_ERROR_TIME-- )) || true\n      [ \"$EMPTY_ERROR_TIME\" = 0 ] && error \"\\n $(text 3) \\n\"\n      reading \"\\n $(text 88) \" ARGO_DOMAIN\n      [ -n \"$IS_CHANGE_ARGO\" ] && ARGO_DOMAIN=$(sed 's/[ ]*//g; s/:[ ]*//' <<< \"$ARGO_DOMAIN\")\n    done\n  elif [ \"$NONINTERACTIVE_INSTALL\" != 'noninteractive_install' ]; then\n    [ -z \"$ARGO_DOMAIN\" ] && reading \"\\n $(text 87) \" ARGO_DOMAIN\n    ARGO_DOMAIN=$(sed 's/[ ]*//g; s/:[ ]*//' <<< \"$ARGO_DOMAIN\")\n  fi\n\n  if [[ -z \"$ARGO_DOMAIN\" && ( \"$ARGO_DOMAIN\" =~ trycloudflare\\.com$ || \"$IS_CHANGE_ARGO\" = 'is_add_protocols' || \"$IS_CHANGE_ARGO\" = 'is_install' || \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ) ]]; then\n    ARGO_RUNS=\"${WORK_DIR}/cloudflared tunnel --edge-ip-version auto --no-autoupdate --url http://localhost:$PORT_NGINX\"\n  elif [ -n \"${ARGO_DOMAIN}\" ]; then\n    if [ -z \"${ARGO_AUTH}\" ]; then\n      until [[ \"$ARGO_AUTH\" =~ TunnelSecret || \"$ARGO_AUTH\" =~ ^[A-Z0-9a-z=]{120,250}$ || \"$ARGO_AUTH\" =~ .*cloudflared.*service[[:space:]]+install[[:space:]]+[A-Z0-9a-z=]{1,100} ]]; do\n        [ \"$DOMAIN_ERROR_TIME\" != 6 ] && warning \"\\n $(text 86) \\n\"\n      (( DOMAIN_ERROR_TIME-- )) || true\n        [ \"$DOMAIN_ERROR_TIME\" != 0 ] && reading \"\\n $(text 85) \" ARGO_AUTH || error \"\\n $(text 3) \\n\"\n      done\n    fi\n\n    # 根据 ARGO_AUTH 的内容，自行判断是 Json 还是 Token\n    if [[ \"$ARGO_AUTH\" =~ TunnelSecret ]]; then\n      ARGO_TYPE=is_json_argo\n      ARGO_JSON=${ARGO_AUTH//[ ]/}\n      [ \"$IS_CHANGE_ARGO\" = 'is_install' ] && export_argo_json_file $TEMP_DIR || export_argo_json_file ${WORK_DIR}\n      ARGO_RUNS=\"${WORK_DIR}/cloudflared tunnel --edge-ip-version auto --config ${WORK_DIR}/tunnel.yml run\"\n    elif [[ \"$ARGO_AUTH\" =~ ^[A-Z0-9a-z=]{120,250}$ ]]; then\n      ARGO_TYPE=is_token_argo\n      ARGO_TOKEN=$ARGO_AUTH\n      ARGO_RUNS=\"${WORK_DIR}/cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}\"\n    elif [[ \"$ARGO_AUTH\" =~ .*cloudflared.*service[[:space:]]+install[[:space:]]+[A-Z0-9a-z=]{1,100} ]]; then\n      ARGO_TYPE=is_token_argo\n      ARGO_TOKEN=$(awk -F ' ' '{print $NF}' <<< \"$ARGO_AUTH\")\n      ARGO_RUNS=\"${WORK_DIR}/cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}\"\n    fi\n  fi\n}\n\n# 更换 Argo 隧道类型\nchange_argo() {\n  check_install\n  if [ \"${STATUS[0]}\" =  \"$(text 26)\" ]; then\n    error \"\\n $(text 39) \"\n  elif [ \"${STATUS[1]}\" = \"$(text 26)\" ]; then\n    error \"\\n $(text 61) \"\n  fi\n\n  case $(grep \"ExecStart=\" /etc/systemd/system/argo.service) in\n    *--config* )\n      ARGO_TYPE='Json'\n      ;;\n    *--token* )\n      ARGO_TYPE='Token'\n      ;;\n    * )\n      ARGO_TYPE='Try'\n      cmd_systemctl enable argo && sleep 2 && [ \"$(systemctl is-active argo)\" = 'active' ] && fetch_quicktunnel_domain\n  esac\n\n  fetch_nodes_value\n  hint \"\\n $(text 90) \\n\"\n  unset ARGO_DOMAIN\n  hint \" $(text 91) \\n\" && reading \" $(text 24) \" CHANGE_TO\n    case \"$CHANGE_TO\" in\n      1 )\n        cmd_systemctl disable argo\n        [ -s ${WORK_DIR}/tunnel.json ] && rm -f ${WORK_DIR}/tunnel.{json,yml}\n        sed -i \"s@ExecStart=.*@ExecStart=${WORK_DIR}/cloudflared tunnel --edge-ip-version auto --no-autoupdate --url http://localhost:$PORT_NGINX@g\" /etc/systemd/system/argo.service\n        ;;\n      2 )\n        [ -s ${WORK_DIR}/tunnel.json ] && rm -f ${WORK_DIR}/tunnel.{json,yml}\n        input_argo_auth is_change_argo\n        cmd_systemctl disable argo\n        if [ -n \"$ARGO_TOKEN\" ]; then\n          sed -i \"s@ExecStart=.*@ExecStart=${WORK_DIR}/cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}@g\" /etc/systemd/system/argo.service\n        elif [ -n \"$ARGO_JSON\" ]; then\n          sed -i \"s@ExecStart=.*@ExecStart=${WORK_DIR}/cloudflared tunnel --edge-ip-version auto --config ${WORK_DIR}/tunnel.yml run@g\" /etc/systemd/system/argo.service\n        fi\n        [ -s ${WORK_DIR}/conf/17_${NODE_TAG[6]}_inbounds.json ] && sed -i \"s/VMESS_HOST_DOMAIN.*/VMESS_HOST_DOMAIN\\\": \\\"$ARGO_DOMAIN\\\"/\" ${WORK_DIR}/conf/17_${NODE_TAG[6]}_inbounds.json\n        [ -s ${WORK_DIR}/conf/18_${NODE_TAG[7]}_inbounds.json ] && sed -i \"s/\\\"server_name\\\":.*/\\\"server_name\\\": \\\"$ARGO_DOMAIN\\\",/\" ${WORK_DIR}/conf/18_${NODE_TAG[7]}_inbounds.json\n        ;;\n      * )\n        exit 0\n    esac\n\n  cmd_systemctl enable argo\n  fetch_nodes_value\n  export_nginx_conf_file\n  export_list\n}\n\ncheck_root() {\n  [ \"$(id -u)\" != 0 ] && error \"\\n $(text 43) \\n\"\n}\n\n# 判断处理器架构\ncheck_arch() {\n  case \"$(uname -m)\" in\n    aarch64|arm64 )\n      SING_BOX_ARCH=arm64; JQ_ARCH=arm64; QRENCODE_ARCH=arm64; ARGO_ARCH=arm64\n      ;;\n    x86_64|amd64 )\n      SING_BOX_ARCH=amd64; JQ_ARCH=amd64; QRENCODE_ARCH=amd64; ARGO_ARCH=amd64\n      ;;\n    armv7l )\n      SING_BOX_ARCH=armv7; JQ_ARCH=armhf; QRENCODE_ARCH=arm; ARGO_ARCH=amd64\n      ;;\n    * )\n      error \" $(text 25) \"\n  esac\n}\n\n# 检查系统是否已经安装 tcp-brutal\ncheck_brutal() {\n  IS_BRUTAL=false && [ -x \"$(type -p lsmod)\" ] && lsmod | grep -q brutal && IS_BRUTAL=true\n  [ \"$IS_BRUTAL\" = 'false' ] && [ -x \"$(type -p modprobe)\" ] && modprobe brutal 2>/dev/null && IS_BRUTAL=true\n}\n\n# 查安装及运行状态，下标0: sing-box，下标1: argo，下标2：docker；状态码: 26 未安装， 27 已安装未运行， 28 运行中\ncheck_install() {\n  [[ \"$IS_SUB\" = 'is_sub' || -s ${WORK_DIR}/subscribe/qr ]] && IS_SUB=is_sub || IS_SUB=no_sub\n  if ls ${WORK_DIR}/conf/*${NODE_TAG[1]}_inbounds.json >/dev/null 2>&1; then\n    check_port_hopping_nat\n    [ -n \"$PORT_HOPPING_END\" ] && IS_HOPPING=is_hopping || IS_HOPPING=no_hopping\n  fi\n\n  # 检测是否安装其他 sing-box systemd 状态，和是否其他一键脚本\n  if [ -s /etc/systemd/system/sing-box.service ]; then\n    SYSTEMD_EXECSTART=$(grep '^ExecStart=' /etc/systemd/system/sing-box.service)\n    case \"$SYSTEMD_EXECSTART\" in\n      'ExecStart=/etc/sing-box/sing-box run -C /etc/sing-box/conf/' )\n        [ \"$(systemctl is-active sing-box)\" = 'active' ] && STATUS[0]=$(text 28) || STATUS[0]=$(text 27)\n        ;;\n      'ExecStart=/etc/v2ray-agent/sing-box/sing-box run -c /etc/v2ray-agent/sing-box/conf/config.json' )\n        SING_BOX_SCRIPT='mack-a/v2ray-agent' && error \"\\n $(text 99) \\n\"\n        ;;\n      'ExecStart=/etc/s-box/sing-box run -c /etc/s-box/sb.json' )\n        SING_BOX_SCRIPT='yonggekkk/sing-box_hysteria2_tuic_argo_reality' && error \"\\n $(text 99) \\n\"\n        ;;\n      'ExecStart=/usr/local/s-ui/bin/runSingbox.sh' )\n        SING_BOX_SCRIPT='alireza0/s-ui' && error \"\\n $(text 99) \\n\"\n        ;;\n      'ExecStart=/usr/local/bin/sing-box run -c /usr/local/etc/sing-box/config.json' )\n        SING_BOX_SCRIPT='FranzKafkaYu/sing-box-yes' && error \"\\n $(text 99) \\n\"\n        ;;\n      * )\n        SING_BOX_SCRIPT='Unknown or customized sing-box' && error \"\\n $(text 99) \\n\"\n    esac\n  elif [ -s /lib/systemd/system/sing-box.service ]; then\n    SYSTEMD_EXECSTART=$(grep '^ExecStart=' /lib/systemd/system/sing-box.service)\n    case \"$SYSTEMD_EXECSTART\" in\n      'ExecStart=/etc/sing-box/bin/sing-box run -c /etc/sing-box/config.json -C /etc/sing-box/conf' )\n        SING_BOX_SCRIPT='233boy/sing-box' && error \"\\n $(text 99) \\n\"\n        ;;\n      * )\n        SING_BOX_SCRIPT='Unknown or customized sing-box' && error \"\\n $(text 99) \\n\"\n    esac\n  else\n    STATUS[0]=$(text 26)\n  fi\n\n  if [ \"${STATUS[0]}\" = \"$(text 26)\" ] && [ ! -s ${WORK_DIR}/sing-box ]; then\n    {\n    local VERSION_LATEST=$(wget --no-check-certificate --tries=2 --timeout=3 -qO- ${GH_PROXY}https://api.github.com/repos/SagerNet/sing-box/releases | awk -F '[\"v-]' '/tag_name/{print $5}' | sort -Vr | sed -n '1p')\n    local ONLINE=$(wget --no-check-certificate --tries=2 --timeout=3 -qO- ${GH_PROXY}https://api.github.com/repos/SagerNet/sing-box/releases | awk -F '[\"v]' -v var=\"tag_name.*$VERSION_LATEST\" '$0 ~ var {print $5; exit}')\n    ONLINE=${ONLINE:-'1.11.0-beta.15'}\n    wget --no-check-certificate --continue ${GH_PROXY}https://github.com/SagerNet/sing-box/releases/download/v$ONLINE/sing-box-$ONLINE-linux-$SING_BOX_ARCH.tar.gz -qO- | tar xz -C $TEMP_DIR sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box >/dev/null 2>&1\n    [ -s $TEMP_DIR/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box ] && mv $TEMP_DIR/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box $TEMP_DIR\n    wget --no-check-certificate --continue -qO $TEMP_DIR/jq ${GH_PROXY}https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-$JQ_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/jq >/dev/null 2>&1\n    wget --no-check-certificate --continue -qO $TEMP_DIR/qrencode ${GH_PROXY}https://github.com/fscarmen/client_template/raw/main/qrencode-go/qrencode-go-linux-$QRENCODE_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/qrencode >/dev/null 2>&1\n    }&\n  fi\n\n  if [ \"$NONINTERACTIVE_INSTALL\" != 'noninteractive_install' ]; then\n    STATUS[1]=$(text 26) && IS_ARGO=no_argo && [ -s /etc/systemd/system/argo.service ] && IS_ARGO=is_argo && STATUS[1]=$(text 27) && [ \"$(systemctl is-active argo)\" = 'active' ] && STATUS[1]=$(text 28)\n  fi\n  if [ -s /etc/systemd/system/argo.service ]; then\n    local ARGO_CONTENT=$(grep '^ExecStart' /etc/systemd/system/argo.service)\n    if grep -q '\\--token' <<< \"$ARGO_CONTENT\"; then\n      ARGO_TYPE=is_token_argo\n    elif grep -q '\\--config' <<< \"$ARGO_CONTENT\"; then\n      ARGO_TYPE=is_json_argo\n    elif grep -q '\\--url' <<< \"$ARGO_CONTENT\"; then\n      ARGO_TYPE=is_quicktunnel_argo\n    fi\n  fi\n  [[ \"${STATUS[1]}\" = \"$(text 26)\" || \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]] && [ ! -s ${WORK_DIR}/cloudflared ] && { wget --no-check-certificate -qO $TEMP_DIR/cloudflared ${GH_PROXY}https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$ARGO_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/cloudflared >/dev/null 2>&1; }&\n}\n\n# 检测 sing-box 的状态\ncheck_sing-box_status() {\n  case \"${STATUS[0]}\" in\n    \"$(text 26)\" )\n      error \"\\n Sing-box $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 27)\" )\n      cmd_systemctl enable sing-box\n      [ \"$(systemctl is-active sing-box)\" = 'active' ] && info \"\\n Sing-box $(text 28) $(text 37) \\n\" || error \"\\n Sing-box $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 28)\" )\n      info \"\\n Sing-box $(text 28) $(text 37) \\n\"\n  esac\n}\n\n# 检测 Argo 的状态\ncheck_argo_status() {\n  case \"${STATUS[1]}\" in\n    \"$(text 26)\" )\n      error \"\\n Argo $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 27)\" )\n      cmd_systemctl enable argo\n      [ \"$(systemctl is-active argo)\" = 'active' ] && info \"\\n Argo $(text 28) $(text 37) \\n\" || error \"\\n Argo $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 28)\" )\n      info \"\\n Argo $(text 28) $(text 37) \\n\"\n  esac\n}\n\n# 为了适配 alpine，定义 cmd_systemctl 的函数\ncmd_systemctl() {\n  local ENABLE_DISABLE=$1\n  local APP=$2\n  if [ \"$ENABLE_DISABLE\" = 'enable' ]; then\n    if [ \"$SYSTEM\" = 'Alpine' ]; then\n      systemctl start $APP\n      cat > /etc/local.d/$APP.start << EOF\n#!/usr/bin/env bash\n\nsystemctl start $APP\nEOF\n      chmod +x /etc/local.d/$APP.start\n      rc-update add local >/dev/null 2>&1\n    elif [ \"$IS_CENTOS\" = 'CentOS7' ]; then\n      systemctl enable --now $APP\n      [ \"$APP\" = 'sing-box' ] && [[ \"${IS_SUB}\" = 'is_sub' || \"${IS_ARGO}\" = 'is_argo' ]] && $(type -p nginx) -c ${WORK_DIR}/nginx.conf\n    else\n      systemctl enable --now $APP\n    fi\n  elif [ \"$ENABLE_DISABLE\" = 'disable' ]; then\n    if [ \"$SYSTEM\" = 'Alpine' ]; then\n      systemctl stop $APP\n      [ \"$APP\" = 'sing-box' ] && [[ \"${IS_SUB}\" = 'is_sub' || \"${IS_ARGO}\" = 'is_argo' ]] && [ -s ${WORK_DIR}/nginx.conf ] && ss -nltp | grep $(awk '/listen/{print $2; exit}' ${WORK_DIR}/nginx.conf) | tr ',' '\\n' | awk -F '=' '/pid/{print $2}' | sort -u | xargs kill -15 >/dev/null 2>&1\n      rm -f /etc/local.d/$APP.start\n    elif [ \"$IS_CENTOS\" = 'CentOS7' ]; then\n      systemctl disable --now $APP\n      [ \"$APP\" = 'sing-box' ] && [[ \"${IS_SUB}\" = 'is_sub' || \"${IS_ARGO}\" = 'is_argo' ]] && [ -s ${WORK_DIR}/nginx.conf ] && ss -nltp | grep $(awk '/listen/{print $2; exit}' ${WORK_DIR}/nginx.conf) | tr ',' '\\n' | awk -F '=' '/pid/{print $2}' | sort -u | xargs kill -15 >/dev/null 2>&1\n    else\n      systemctl disable --now $APP\n    fi\n  fi\n}\n\ncheck_system_info() {\n  # 判断虚拟化\n  if [ -x \"$(type -p systemd-detect-virt)\" ]; then\n    VIRT=$(systemd-detect-virt)\n  elif [ -x \"$(type -p hostnamectl)\" ]; then\n    VIRT=$(hostnamectl | awk '/Virtualization/{print $NF}')\n  elif [ -x \"$(type -p virt-what)\" ]; then\n    VIRT=$(virt-what)\n  fi\n\n  [ -s /etc/os-release ] && SYS=\"$(awk -F '\"' 'tolower($0) ~ /pretty_name/{print $2}' /etc/os-release)\"\n  [[ -z \"$SYS\" && -x \"$(type -p hostnamectl)\" ]] && SYS=\"$(hostnamectl | awk -F ': ' 'tolower($0) ~ /operating system/{print $2}')\"\n  [[ -z \"$SYS\" && -x \"$(type -p lsb_release)\" ]] && SYS=\"$(lsb_release -sd)\"\n  [[ -z \"$SYS\" && -s /etc/lsb-release ]] && SYS=\"$(awk -F '\"' 'tolower($0) ~ /distrib_description/{print $2}' /etc/lsb-release)\"\n  [[ -z \"$SYS\" && -s /etc/redhat-release ]] && SYS=\"$(cat /etc/redhat-release)\"\n  [[ -z \"$SYS\" && -s /etc/issue ]] && SYS=\"$(sed -E '/^$|^\\\\/d' /etc/issue | awk -F '\\\\' '{print $1}' | sed 's/[ ]*$//g')\"\n\n  REGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|alma|rocky\" \"arch linux\" \"alpine\" \"fedora\")\n  RELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"Arch\" \"Alpine\" \"Fedora\")\n  EXCLUDE=(\"\")\n  MAJOR=(\"9\" \"16\" \"7\" \"3\" \"\" \"37\")\n  PACKAGE_UPDATE=(\"apt -y update\" \"apt -y update\" \"yum -y update --skip-broken\" \"pacman -Sy\" \"apk update -f\" \"dnf -y update\")\n  PACKAGE_INSTALL=(\"apt -y install\" \"apt -y install\" \"yum -y install\" \"pacman -S --noconfirm\" \"apk add --no-cache\" \"dnf -y install\")\n  PACKAGE_UNINSTALL=(\"apt -y autoremove\" \"apt -y autoremove\" \"yum -y autoremove\" \"pacman -Rcnsu --noconfirm\" \"apk del -f\" \"dnf -y autoremove\")\n\n  for int in \"${!REGEX[@]}\"; do\n    [[ \"${SYS,,}\" =~ ${REGEX[int]} ]] && SYSTEM=\"${RELEASE[int]}\" && break\n  done\n\n  # 针对各厂商的订制系统\n  if [ -z \"$SYSTEM\" ]; then\n    [ -x \"$(type -p yum)\" ] && int=2 && SYSTEM='CentOS' || error \" $(text 5) \"\n  fi\n\n  # 先排除 EXCLUDE 里包括的特定系统，其他系统需要作大发行版本的比较\n  for ex in \"${EXCLUDE[@]}\"; do [[ ! \"{$SYS,,}\"  =~ $ex ]]; done &&\n  [[ \"$(echo \"$SYS\" | sed \"s/[^0-9.]//g\" | cut -d. -f1)\" -lt \"${MAJOR[int]}\" ]] && error \" $(text 6) \"\n\n  # 针对部分系统作特殊处理\n  [ \"$SYSTEM\" = 'CentOS' ] && IS_CENTOS=\"CentOS$(echo \"$SYS\" | sed \"s/[^0-9.]//g\" | cut -d. -f1)\"\n}\n\n# 删除端口跳跃\ndel_port_hopping_nat(){\n  check_port_hopping_nat\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    iptables --table nat -D PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n    ip6tables --table nat -D PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n  elif [ \"$(systemctl is-active firewalld)\" = 'active' ]; then\n    firewall-cmd --permanent --remove-forward-port=port=${PORT_HOPPING_START}-${PORT_HOPPING_END}:proto=udp:toport=${PORT_HOPPING_TARGET} >/dev/null 2>&1\n    firewall-cmd --reload >/dev/null 2>&1\n  else\n    iptables --table nat -D PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n    ip6tables --table nat -D PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n    [ \"$(systemctl is-active netfilter-persistent)\" = 'active' ] && netfilter-persistent save 2>/dev/null\n  fi\n}\n\n# 添加端口跳跃\nadd_port_hopping_nat() {\n  local PORT_HOPPING_START=$1\n  local PORT_HOPPING_END=$2\n  local PORT_HOPPING_TARGET=$3\n\n  # 检测防火墙依赖和状态\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    # 添加防火墙规则\n    iptables --table nat -A PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n    ip6tables --table nat -A PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n\n    # 将 iptables, ip6tables 添加到默认运行级别\n    rc-update show default | grep -q 'iptables' || rc-update add iptables >/dev/null 2>&1\n    rc-update show default | grep -q 'ip6tables' || rc-update add ip6tables >/dev/null 2>&1\n    rc-update show default | grep -q 'iptables' && rc-update show default | grep -q 'ip6tables' || warning \"\\n $(text 96) \\n\"\n\n    # 保存当前的 iptables, ip6tables 规则集，以便在开机时恢复\n    rc-service iptables save >/dev/null 2>&1\n    rc-service ip6tables save >/dev/null 2>&1\n\n  elif [ -x \"$(type -p firewalld)\" ]; then\n    [ \"$(systemctl is-active firewalld)\" != 'active' ] && systemctl enable --now firewalld >/dev/null 2>&1\n    if [ \"$(firewall-cmd --query-masquerade --permanent)\" != 'yes' ] ; then\n      firewall-cmd --add-masquerade --permanent >/dev/null 2>&1\n      firewall-cmd --reload >/dev/null 2>&1\n      [ \"$(firewall-cmd --query-masquerade --permanent)\" = 'yes' ] && info \"\\n firewalld masquerade $(text 28) $(text 37) \\n\" || warning \"\\n firewalld masquerade $(text 28) $(text 38) \\n\"\n    fi\n\n    # 添加防火墙规则\n    firewall-cmd --add-forward-port=port=$PORT_HOPPING_START-$PORT_HOPPING_END:proto=udp:toport=${PORT_HOPPING_TARGET} --permanent >/dev/null 2>&1\n    firewall-cmd --reload >/dev/null 2>&1\n\n  else\n    if [ ! -x \"$(type -p netfilter-persistent)\" ]; then\n      info \"\\n $(text 7) iptables-persistent\"\n      ${PACKAGE_INSTALL[int]} iptables-persistent >/dev/null 2>&1\n    fi\n    [ -x \"$(type -p netfilter-persistent)\" ] || warning \"\\n $(text 95) \\n\"\n\n    # 添加防火墙规则\n    iptables --table nat -A PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n    ip6tables --table nat -A PREROUTING -p udp --dport ${PORT_HOPPING_START}:${PORT_HOPPING_END} -m comment --comment \"NAT ${PORT_HOPPING_START}:${PORT_HOPPING_END} to ${PORT_HOPPING_TARGET} (Sing-box Family Bucket)\" -j DNAT --to-destination :${PORT_HOPPING_TARGET} 2>/dev/null\n\n    # 保存当前的 iptables, ip6tables 规则集，以便在开机时恢复\n    [ \"$(systemctl is-active netfilter-persistent)\" != 'active' ] && warning \"\\n $(text 96) \\n\" || netfilter-persistent save 2>/dev/null\n  fi\n}\n\n# 查端口跳跃的 dnat 端口\ncheck_port_hopping_nat() {\n  PORT_HOPPING_TARGET=$(awk -F [:,] '/\"listen_port\"/{print $2}' ${WORK_DIR}/conf/*${NODE_TAG[1]}_inbounds.json)\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    local IPTABLES_PREROUTING_LIST=$(iptables --table nat --list-rules PREROUTING 2>/dev/null | grep 'Sing-box Family Bucket')\n    [ -n \"$IPTABLES_PREROUTING_LIST\" ] && PORT_HOPPING_RANGE=$(awk '{for (i=0; i<NF; i++) if ($i==\"--dport\") {print $(i+1); exit}}' <<< \"$IPTABLES_PREROUTING_LIST\") && PORT_HOPPING_TARGET=$(awk '{for (i=0; i<NF; i++) if ($i==\"to\") {print $(i+1); exit}}' <<< \"$IPTABLES_PREROUTING_LIST\")\n    [ -n \"$PORT_HOPPING_RANGE\" ] && PORT_HOPPING_START=${PORT_HOPPING_RANGE%:*} && PORT_HOPPING_END=${PORT_HOPPING_RANGE#*:}\n  elif [ \"$(systemctl is-active firewalld)\" = 'active' ]; then\n    local FIREWALL_LIST=$(firewall-cmd --list-all --permanent | grep \"toport=${PORT_HOPPING_TARGET}\")\n    [ -n \"$FIREWALL_LIST\" ] && PORT_HOPPING_START=$(sed \"s/.*port=\\([^-]\\+\\)-.*toport.*/\\1/\" <<< \"$FIREWALL_LIST\") &&\n    PORT_HOPPING_END=$(sed \"s/.*port=$PORT_HOPPING_START-\\([^:]\\+\\):.*toport.*/\\1/\" <<< \"$FIREWALL_LIST\") &&\n    PORT_HOPPING_TARGET=$(sed \"s/.*toport=\\([^:]\\+\\):.*/\\1/\" <<< \"$FIREWALL_LIST\")\n  else\n    local IPTABLES_PREROUTING_LIST=$(iptables --table nat --list-rules PREROUTING 2>/dev/null | grep 'Sing-box Family Bucket')\n    [ -n \"$IPTABLES_PREROUTING_LIST\" ] && PORT_HOPPING_RANGE=$(awk '{for (i=0; i<NF; i++) if ($i==\"--dport\") {print $(i+1); exit}}' <<< \"$IPTABLES_PREROUTING_LIST\") && PORT_HOPPING_TARGET=$(awk '{for (i=0; i<NF; i++) if ($i==\"to\") {print $(i+1); exit}}' <<< \"$IPTABLES_PREROUTING_LIST\")\n    [ -n \"$PORT_HOPPING_RANGE\" ] && PORT_HOPPING_START=${PORT_HOPPING_RANGE%:*} && PORT_HOPPING_END=${PORT_HOPPING_RANGE#*:}\n  fi\n}\n\n# 检测 IPv4 IPv6 信息\ncheck_system_ip() {\n  [ \"$L\" = 'C' ] && local IS_CHINESE='?lang=zh-CN'\n  local DEFAULT_LOCAL_INTERFACE4=$(ip -4 route show default | awk '/default/ {for (i=0; i<NF; i++) if ($i==\"dev\") {print $(i+1); exit}}')\n  local DEFAULT_LOCAL_INTERFACE6=$(ip -6 route show default | awk '/default/ {for (i=0; i<NF; i++) if ($i==\"dev\") {print $(i+1); exit}}')\n  if [ -n \"\"${DEFAULT_LOCAL_INTERFACE4}${DEFAULT_LOCAL_INTERFACE6}\"\" ]; then\n    local DEFAULT_LOCAL_IP4=$(ip -4 addr show $DEFAULT_LOCAL_INTERFACE4 | sed -n 's#.*inet \\([^/]\\+\\)/[0-9]\\+.*global.*#\\1#gp')\n    local DEFAULT_LOCAL_IP6=$(ip -6 addr show $DEFAULT_LOCAL_INTERFACE6 | sed -n 's#.*inet6 \\([^/]\\+\\)/[0-9]\\+.*global.*#\\1#gp')\n    [ -n \"$DEFAULT_LOCAL_IP4\" ] && local BIND_ADDRESS4=\"--bind-address=$DEFAULT_LOCAL_IP4\"\n    [ -n \"$DEFAULT_LOCAL_IP6\" ] && local BIND_ADDRESS6=\"--bind-address=$DEFAULT_LOCAL_IP6\"\n  fi\n\n  WAN4=$(wget $BIND_ADDRESS4 -qO- --no-check-certificate --tries=2 --timeout=2 http://api-ipv4.ip.sb)\n  [ -n \"$WAN4\" ] && local IP4_JSON=$(wget -qO- --no-check-certificate --tries=2 --timeout=2 https://ip.forvps.gq/${WAN4}${IS_CHINESE}) &&\n  COUNTRY4=$(sed -En 's/.*\"country\":[ ]*\"([^\"]+)\".*/\\1/p' <<< \"$IP4_JSON\") &&\n  ASNORG4=$(sed -En 's/.*\"(isp|asn_org)\":[ ]*\"([^\"]+)\".*/\\2/p' <<< \"$IP4_JSON\")\n\n  WAN6=$(wget $BIND_ADDRESS6 -qO- --no-check-certificate --tries=2 --timeout=2 http://api-ipv6.ip.sb)\n  [ -n \"$WAN6\" ] && local IP6_JSON=$(wget -qO- --no-check-certificate --tries=2 --timeout=2 https://ip.forvps.gq/${WAN6}${IS_CHINESE}) &&\n  COUNTRY6=$(sed -En 's/.*\"country\":[ ]*\"([^\"]+)\".*/\\1/p' <<< \"$IP6_JSON\") &&\n  ASNORG6=$(sed -En 's/.*\"(isp|asn_org)\":[ ]*\"([^\"]+)\".*/\\2/p' <<< \"$IP6_JSON\")\n}\n\n# 输入起始 port 函数\ninput_start_port() {\n  local NUM=$1\n  local PORT_ERROR_TIME=6\n  while true; do\n    [ \"$PORT_ERROR_TIME\" -lt 6 ] && unset IN_USED START_PORT\n    (( PORT_ERROR_TIME-- )) || true\n    if [ \"$PORT_ERROR_TIME\" = 0 ]; then\n      error \"\\n $(text 3) \\n\"\n    else\n      [ -z \"$START_PORT\" ] && reading \"\\n $(text 11) \" START_PORT\n    fi\n    START_PORT=${START_PORT:-\"$START_PORT_DEFAULT\"}\n    if [[ \"$START_PORT\" =~ ^[1-9][0-9]{2,4}$ && \"$START_PORT\" -ge \"$MIN_PORT\" && \"$START_PORT\" -le \"$MAX_PORT\" ]]; then\n      for port in $(eval echo {$START_PORT..$[START_PORT+NUM-1]}); do\n      ss -nltup | grep -q \":$port\" && IN_USED+=(\"$port\")\n      done\n      [ \"${#IN_USED[*]}\" -eq 0 ] && break || warning \"\\n $(text 44) \\n\"\n    fi\n  done\n}\n\n# 定义 Sing-box 变量\nsing-box_variables() {\n  if grep -qi 'cloudflare' <<< \"$ASNORG4$ASNORG6\"; then\n    if grep -qi 'cloudflare' <<< \"$ASNORG6\" && [ -n \"$WAN4\" ] && ! grep -qi 'cloudflare' <<< \"$ASNORG4\"; then\n      SERVER_IP_DEFAULT=$WAN4\n    elif grep -qi 'cloudflare' <<< \"$ASNORG4\" && [ -n \"$WAN6\" ] && ! grep -qi 'cloudflare' <<< \"$ASNORG6\"; then\n      SERVER_IP_DEFAULT=$WAN6\n    else\n      local a=6\n      until [ -n \"$SERVER_IP\" ]; do\n        ((a--)) || true\n        [ \"$a\" = 0 ] && error \"\\n $(text 3) \\n\"\n        reading \"\\n $(text 46) \" SERVER_IP\n      done\n    fi\n  elif [ -n \"$WAN4\" ]; then\n    SERVER_IP_DEFAULT=$WAN4\n  elif [ -n \"$WAN6\" ]; then\n    SERVER_IP_DEFAULT=$WAN6\n  fi\n\n  # 选择安装的协议，由于选项 a 为全部协议，所以选项数不是从 a 开始，而是从 b 开始，处理输入：把大写全部变为小写，把不符合的选项去掉，把重复的选项合并\n  MAX_CHOOSE_PROTOCOLS=$(asc $[CONSECUTIVE_PORTS+96+1])\n  if [ -z \"$CHOOSE_PROTOCOLS\" ]; then\n    hint \"\\n $(text 49) \"\n    for e in \"${!PROTOCOL_LIST[@]}\"; do\n      [[ \"$e\" =~ '6'|'7' ]] && hint \" $(asc $[e+98]). ${PROTOCOL_LIST[e]} \" || hint \" $(asc $[e+98]). ${PROTOCOL_LIST[e]} \"\n    done\n    reading \"\\n $(text 24) \" CHOOSE_PROTOCOLS\n  fi\n\n  # 对选择协议的输入处理逻辑：先把所有的大写转为小写，并把所有没有去选项剔除掉，最后按输入的次序排序。如果选项为 a(all) 和其他选项并存，将会忽略 a，如 abc 则会处理为 bc\n  [[ ! \"${CHOOSE_PROTOCOLS,,}\" =~ [b-$MAX_CHOOSE_PROTOCOLS] ]] && INSTALL_PROTOCOLS=($(eval echo {b..$MAX_CHOOSE_PROTOCOLS})) || INSTALL_PROTOCOLS=($(grep -o . <<< \"$CHOOSE_PROTOCOLS\" | sed \"/[^b-$MAX_CHOOSE_PROTOCOLS]/d\" | awk '!seen[$0]++'))\n\n  # 显示选择协议及其次序，输入开始端口号\n  if [ -z \"$START_PORT\" ]; then\n    hint \"\\n $(text 60) \"\n    for w in \"${!INSTALL_PROTOCOLS[@]}\"; do\n      [ \"$w\" -ge 9 ] && hint \" $[w+1]. ${PROTOCOL_LIST[$(($(asc ${INSTALL_PROTOCOLS[w]}) - 98))]} \" || hint \" $[w+1] . ${PROTOCOL_LIST[$(($(asc ${INSTALL_PROTOCOLS[w]}) - 98))]} \"\n    done\n    input_start_port ${#INSTALL_PROTOCOLS[@]}\n  fi\n\n  # 输出模式选择，输入用于订阅的 Nginx 服务端口号， 后台根据选择安装依赖\n  [[ \"$IS_SUB\" = 'is_sub' || \"$IS_ARGO\" = 'is_argo' ]] && input_nginx_port\n\n  # 输入服务器 IP,默认为检测到的服务器 IP，如果全部为空，则提示并退出脚本\n  [ -z \"$SERVER_IP\" ] && reading \"\\n $(text 10) \" SERVER_IP\n  SERVER_IP=${SERVER_IP:-\"$SERVER_IP_DEFAULT\"} && WS_SERVER_IP_SHOW=$SERVER_IP\n  [ -z \"$SERVER_IP\" ] && error \" $(text 47) \"\n\n  # 根据服务 IP，使用不同的 warp 配置\n  if [[ \"$SERVER_IP\" =~ : ]]; then\n    DOMAIN_STRATEG=prefer_ipv6\n  else\n    DOMAIN_STRATEG=prefer_ipv4\n  fi\n\n  # 检测是否解锁 chatGPT\n  CHATGPT_OUT=warp-ep;\n  [ \"$(check_chatgpt ${DOMAIN_STRATEG: -1})\" = 'unlock' ] && CHATGPT_OUT=direct\n\n  # 如选择有 c. hysteria2 时，选择是否使用端口跳跃\n  [[ \"${INSTALL_PROTOCOLS[@]}\" =~ 'c' ]] && input_hopping_port\n\n  # 如选择有 h. vmess + ws 或 i. vless + ws 时，先检测是否有支持的 http 端口可用，如有则要求输入域名和 cdn\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ 'h' ]]; then\n    if [ \"$IS_ARGO\" = 'is_argo' ]; then\n      [ \"$ARGO_READY\" != 'argo_ready' ] && input_argo_auth is_install\n      local ARGO_READY=argo_ready\n    else\n      local DOMAIN_ERROR_TIME=5\n      until [ -n \"$VMESS_HOST_DOMAIN\" ]; do\n        (( DOMAIN_ERROR_TIME-- )) || true\n        [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VMESS && reading \"\\n $(text 50) \" VMESS_HOST_DOMAIN || error \"\\n $(text 3) \\n\"\n      done\n    fi\n  fi\n\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ 'i' ]]; then\n    if [ \"$IS_ARGO\" = 'is_argo' ]; then\n      [ \"$ARGO_READY\" != 'argo_ready' ] && input_argo_auth is_install\n      local ARGO_READY=argo_ready\n    else\n      local DOMAIN_ERROR_TIME=5\n      until [ -n \"$VLESS_HOST_DOMAIN\" ]; do\n        (( DOMAIN_ERROR_TIME-- )) || true\n        [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VLESS && reading \"\\n $(text 50) \" VLESS_HOST_DOMAIN || error \"\\n $(text 3) \\n\"\n      done\n    fi\n  fi\n\n  # 选择或者输入 cdn\n  [[ -z \"$CDN\" && -n \"${VMESS_HOST_DOMAIN}${VLESS_HOST_DOMAIN}${ARGO_READY}\" ]] && input_cdn\n\n  # 输入 UUID ，错误超过 5 次将会退出\n  UUID_DEFAULT=$(cat /proc/sys/kernel/random/uuid)\n  [ -z \"$UUID_CONFIRM\" ] && reading \"\\n $(text 12) \" UUID_CONFIRM\n  local UUID_ERROR_TIME=5\n  until [[ -z \"$UUID_CONFIRM\" || \"${UUID_CONFIRM,,}\" =~ ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$ ]]; do\n    (( UUID_ERROR_TIME-- )) || true\n    [ \"$UUID_ERROR_TIME\" = 0 ] && error \"\\n $(text 3) \\n\" || reading \"\\n $(text 4) \\n\" UUID_CONFIRM\n  done\n  UUID_CONFIRM=${UUID_CONFIRM:-\"$UUID_DEFAULT\"}\n\n  # 输入节点名，以系统的 hostname 作为默认\n  if [ -z \"$NODE_NAME_CONFIRM\" ]; then\n    if [ -x \"$(type -p hostname)\" ]; then\n      NODE_NAME_DEFAULT=\"$(hostname)\"\n    elif [ -s /etc/hostname ]; then\n      NODE_NAME_DEFAULT=\"$(cat /etc/hostname)\"\n    else\n      NODE_NAME_DEFAULT=\"Sing-Box\"\n    fi\n    reading \"\\n $(text 13) \" NODE_NAME_CONFIRM\n    NODE_NAME_CONFIRM=\"${NODE_NAME_CONFIRM:-\"$NODE_NAME_DEFAULT\"}\"\n  fi\n}\n\ncheck_dependencies() {\n  # 如果是 Alpine，先升级 wget ，安装 systemctl-py 版\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    local CHECK_WGET=$(wget 2>&1 | head -n 1)\n    grep -qi 'busybox' <<< \"$CHECK_WGET\" && ${PACKAGE_INSTALL[int]} wget >/dev/null 2>&1\n    local DEPS_CHECK=(\"bash\" \"rc-update\" \"virt-what\" \"python3\" \"iptables\" \"ip6tables\")\n    local DEPS_INSTALL=(\"bash\" \"openrc\" \"virt-what\" \"python3\" \"iptables\" \"ip6tables\")\n    for g in \"${!DEPS_CHECK[@]}\"; do\n      [ ! -x \"$(type -p ${DEPS_CHECK[g]})\" ] && DEPS_ALPINE+=(${DEPS_INSTALL[g]})\n    done\n    if [ \"${#DEPS_ALPINE[@]}\" -ge 1 ]; then\n      info \"\\n $(text 7) $(sed \"s/ /,&/g\" <<< ${DEPS_ALPINE[@]}) \\n\"\n      ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n      ${PACKAGE_INSTALL[int]} ${DEPS_ALPINE[@]} >/dev/null 2>&1\n      [[ -z \"$VIRT\" && \"${DEPS_ALPINE[@]}\" =~ 'virt-what' ]] && VIRT=$(virt-what | tr '\\n' ' ')\n    fi\n\n    [ ! -x \"$(type -p systemctl)\" ] && wget --no-check-certificate --quiet ${GH_PROXY}https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py -O /bin/systemctl && chmod a+x /bin/systemctl\n  fi\n\n  # 检测 Linux 系统的依赖，升级库并重新安装依赖\n  local DEPS_CHECK=(\"wget\" \"tar\" \"systemctl\" \"ss\" \"bash\" \"openssl\")\n  local DEPS_INSTALL=(\"wget\" \"tar\" \"systemctl\" \"iproute2\" \"bash\" \"openssl\")\n  for g in \"${!DEPS_CHECK[@]}\"; do\n    [ ! -x \"$(type -p ${DEPS_CHECK[g]})\" ] && DEPS+=(${DEPS_INSTALL[g]})\n  done\n\n  if [ \"$SYSTEM\" = 'CentOS' ]; then\n    if [ \"$IS_CENTOS\" = 'CentOS7' ]; then\n      yum repolist | grep -q epef || DEPS+=(epel-release)\n    fi\n    [ ! -x \"$(type -p firewalld)\" ] && DEPS+=(firewalld)\n  else\n    [ ! -x \"$(type -p iptables)\" ] && DEPS+=(iptables)\n    [ ! -x \"$(type -p ip6tables)\" ] && DEPS+=(ip6tables)\n  fi\n\n  # 如需要安装的依赖大于0，就更新库并安装\n  if [[ \"${#DEPS[@]}\" > 0 ]]; then\n    [[ ! \"$SYSTEM\" =~ Alpine|CentOS ]] && ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n    ${PACKAGE_INSTALL[int]} ${DEPS[@]} >/dev/null 2>&1\n    # 如新安装 firewalld，设置允许所有端口的 TCP 和 UDP 入站连接\n    if [[ \"${DEPS[@]}\" =~ 'firewalld' ]]; then\n      firewall-cmd --add-port=0-65535/tcp --permanent >/dev/null 2>&1\n      firewall-cmd --add-port=0-65535/udp --permanent >/dev/null 2>&1\n      firewall-cmd --reload >/dev/null 2>&1\n    fi\n  else\n    info \"\\n $(text 8) \\n\"\n  fi\n}\n\n# 检查并安装 nginx\ncheck_nginx() {\n  if [ ! -x \"$(type -p nginx)\" ]; then\n    info \"\\n $(text 7) nginx \\n\"\n    ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n    ${PACKAGE_INSTALL[int]} nginx >/dev/null 2>&1\n    # 如果新安装的 Nginx ，先停掉服务\n    systemctl disable --now nginx >/dev/null 2>&1\n  fi\n}\n\n# Json 生成两个配置文件\nexport_argo_json_file() {\n  local FILE_PATH=$1\n  [[ -z \"$PORT_NGINX\" && -s ${WORK_DIR}/nginx.conf ]] && local PORT_NGINX=$(awk '/listen/{print $2; exit}' ${WORK_DIR}/nginx.conf)\n  [ ! -s $FILE_PATH/tunnel.json ] && echo $ARGO_JSON > $FILE_PATH/tunnel.json\n  [ ! -s $FILE_PATH/tunnel.yml ] && cat > $FILE_PATH/tunnel.yml << EOF\ntunnel: $(awk -F '\"' '{print $12}' <<< \"$ARGO_JSON\")\ncredentials-file: ${WORK_DIR}/tunnel.json\n\ningress:\n  - hostname: ${ARGO_DOMAIN}\n    service: http://localhost:${PORT_NGINX}\n  - service: http_status:404\nEOF\n}\n\n# 生成100年的自签证书\nssl_certificate() {\n  mkdir -p ${WORK_DIR}/cert\n  openssl ecparam -genkey -name prime256v1 -out ${WORK_DIR}/cert/private.key && openssl req -new -x509 -days 36500 -key ${WORK_DIR}/cert/private.key -out ${WORK_DIR}/cert/cert.pem -subj \"/CN=$(awk -F . '{print $(NF-1)\".\"$NF}' <<< \"$TLS_SERVER_DEFAULT\")\"\n}\n\n# 处理防火墙规则\ncheck_firewall_configuration() {\n  if [[ -s /etc/selinux/config && -x \"$(type -p getenforce)\" && $(getenforce) = 'Enforcing' ]]; then\n    hint \"\\n $(text 84) \"\n    setenforce 0\n    sed -i 's/^SELINUX=.*/# &/; /SELINUX=/a\\SELINUX=disabled' /etc/selinux/config\n  fi\n}\n\n# Nginx 配置文件\nexport_nginx_conf_file() {\n  # 在添加协议，需要用到 nginx 的时候，先检测是否已经安装\n  if [ ! -x \"$(type -p nginx)\" ]; then\n    info \"\\n $(text 7) nginx\"\n    ${PACKAGE_INSTALL[int]} nginx >/dev/null 2>&1\n  fi\n\n  NGINX_CONF=\"user  root;\nworker_processes  auto;\n\nerror_log  /dev/null;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n\"\n  [ \"$IS_SUB\" = 'is_sub' ] && NGINX_CONF+=\"\n  map \\$http_user_agent \\$path1 {\n    default                    /;               # 默认路径\n    ~*v2rayN                   /v2rayn;         # 匹配 V2rayN 客户端\n    ~*clash                    /clash;          # 匹配 Clash 客户端\n    ~*Neko                     /neko;           # 匹配 Neko 客户端\n    ~*ShadowRocket             /shadowrocket;   # 匹配 ShadowRocket  客户端\n    ~*SFM                      /sing-box-pc;    # 匹配 Sing-box pc 客户端\n    ~*SFI|SFA                  /sing-box-phone; # 匹配 Sing-box phone 客户端\n#   ~*Chrome|Firefox|Mozilla   /;               # 添加更多的分流规则\n  }\n  map \\$http_user_agent \\$path2 {\n    default                    /;               # 默认路径\n    ~*v2rayN                   /v2rayn;         # 匹配 V2rayN 客户端\n    ~*clash                    /clash2;         # 匹配 Clash 客户端\n    ~*Neko                     /neko;           # 匹配 Neko 客户端\n    ~*ShadowRocket             /shadowrocket;   # 匹配 ShadowRocket  客户端\n    ~*SFM|SFI|SFA              /sing-box2;      # 匹配 Sing-box pc 和 phone 客户端\n#   ~*Chrome|Firefox|Mozilla   /;               # 添加更多的分流规则\n  }\"\n\n  [ \"$IS_SUB\" = 'is_sub' ] && NGINX_CONF+=\"\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                      '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                      '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\"\n\n  NGINX_CONF+=\"\n    access_log  /dev/null;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #include /etc/nginx/conf.d/*.conf;\n\n  server {\n    listen $PORT_NGINX ;  # ipv4\n    listen [::]:$PORT_NGINX ;  # ipv6\n#    listen $PORT_NGINX ssl http2 ;  # https\n    server_name localhost;\n\n#    ssl_certificate            ${WORK_DIR}/cert/cert.pem;\n#    ssl_certificate_key        ${WORK_DIR}/cert/private.key;\n#    ssl_protocols              TLSv1.3;\n#    ssl_session_tickets        on;\n#    ssl_stapling               off;\n#    ssl_stapling_verify        off;\n\"\n\n  [[ -n \"$PORT_VMESS_WS\" && \"$IS_ARGO\" = 'is_argo' ]] && NGINX_CONF+=\"\n    # 反代 sing-box vmess websocket\n    location /${UUID_CONFIRM}-vmess {\n      if (\\$http_upgrade != \"websocket\") {\n         return 404;\n      }\n      proxy_pass                          http://127.0.0.1:${PORT_VMESS_WS};\n      proxy_http_version                  1.1;\n      proxy_set_header Upgrade            \\$http_upgrade;\n      proxy_set_header Connection         \"upgrade\";\n      proxy_set_header X-Real-IP          \\$remote_addr;\n      proxy_set_header X-Forwarded-For    \\$proxy_add_x_forwarded_for;\n      proxy_set_header Host               \\$host;\n      proxy_redirect                      off;\n    }\n\"\n\n  [[ -n \"$PORT_VLESS_WS\" && \"$IS_ARGO\" = 'is_argo' ]] && NGINX_CONF+=\"\n    # 反代 sing-box vless websocket\n    location /${UUID_CONFIRM}-vless {\n      if (\\$http_upgrade != \"websocket\") {\n         return 404;\n      }\n      proxy_http_version                  1.1;\n      proxy_pass                          https://127.0.0.1:${PORT_VLESS_WS};\n      proxy_ssl_protocols                 TLSv1.3;\n      proxy_set_header Upgrade            \\$http_upgrade;\n      proxy_set_header Connection         \"upgrade\";\n      proxy_set_header X-Real-IP          \\$remote_addr;\n      proxy_set_header X-Forwarded-For    \\$proxy_add_x_forwarded_for;\n      proxy_set_header Host               \\$host;\n      proxy_redirect                      off;\n    }\n\"\n\n  [ \"$IS_SUB\" = 'is_sub' ] && NGINX_CONF+=\"\n    # 来自 /auto2 的分流\n    location ~ ^/${UUID_CONFIRM}/auto2 {\n      default_type 'text/plain; charset=utf-8';\n      alias ${WORK_DIR}/subscribe/\\$path2;\n    }\n\n    # 来自 /auto 的分流\n    location ~ ^/${UUID_CONFIRM}/auto {\n      default_type 'text/plain; charset=utf-8';\n      alias ${WORK_DIR}/subscribe/\\$path1;\n    }\n\n    location ~ ^/${UUID_CONFIRM}/(.*) {\n      autoindex on;\n      proxy_set_header X-Real-IP \\$proxy_protocol_addr;\n      default_type 'text/plain; charset=utf-8';\n      alias ${WORK_DIR}/subscribe/\\$1;\n    }\n\"\n\n  NGINX_CONF+=\"  }\n}\"\n\n  echo \"$NGINX_CONF\" > ${WORK_DIR}/nginx.conf\n}\n\n# 生成 sing-box 配置文件\nsing-box_json() {\n  local IS_CHANGE=$1\n  mkdir -p ${WORK_DIR}/conf ${WORK_DIR}/logs ${WORK_DIR}/subscribe\n\n  # 判断是否为新安装，不为 change 就是新安装\n  if [ \"$IS_CHANGE\" = 'change' ]; then\n    # 判断 sing-box 主程序所在路径\n    DIR=${WORK_DIR}\n  else\n    DIR=$TEMP_DIR\n\n    # 生成 log 配置\n    cat > ${WORK_DIR}/conf/00_log.json << EOF\n{\n    \"log\":{\n        \"disabled\":false,\n        \"level\":\"error\",\n        \"output\":\"${WORK_DIR}/logs/box.log\",\n        \"timestamp\":true\n    }\n}\nEOF\n\n    # 生成 outbound 配置\n    cat > ${WORK_DIR}/conf/01_outbounds.json << EOF\n{\n    \"outbounds\":[\n        {\n            \"type\":\"direct\",\n            \"tag\":\"direct\",\n            \"domain_strategy\":\"${DOMAIN_STRATEG}\"\n        }\n    ]\n}\nEOF\n\n    # 生成 endpoint 配置\n    cat > ${WORK_DIR}/conf/02_endpoints.json << EOF\n{\n    \"endpoints\":[\n        {\n            \"type\":\"wireguard\",\n            \"tag\":\"warp-ep\",\n            \"mtu\":1280,\n            \"address\":[\n                \"172.16.0.2/32\",\n                \"2606:4700:110:8a36:df92:102a:9602:fa18/128\"\n            ],\n            \"private_key\":\"YFYOAdbw1bKTHlNNi+aEjBM3BO7unuFC5rOkMRAz9XY=\",\n            \"peers\": [\n              {\n                \"address\": \"engage.cloudflareclient.com\",\n                \"port\":2408,\n                \"public_key\":\"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n                \"allowed_ips\": [\n                  \"0.0.0.0/0\",\n                  \"::/0\"\n                ],\n                \"reserved\":[\n                    78,\n                    135,\n                    76\n                ]\n              }\n            ]\n        }\n    ]\n}\nEOF\n\n    # 生成 route 配置\n    cat > ${WORK_DIR}/conf/03_route.json << EOF\n{\n    \"route\":{\n        \"rule_set\":[\n            {\n                \"tag\":\"geosite-openai\",\n                \"type\":\"remote\",\n                \"format\":\"binary\",\n                \"url\":\"https://raw.githubusercontent.com/SagerNet/sing-geosite/rule-set/geosite-openai.srs\"\n            }\n        ],\n        \"rules\":[\n            {\n                \"action\": \"sniff\"\n            },\n            {\n                \"action\": \"resolve\",\n                \"domain\":[\n                    \"api.openai.com\"\n                ],\n                \"strategy\": \"prefer_ipv4\"\n            },\n            {\n                \"action\": \"resolve\",\n                \"rule_set\":[\n                    \"geosite-openai\"\n                ],\n                \"strategy\": \"prefer_ipv6\"\n            },\n            {\n                \"domain\":[\n                    \"api.openai.com\"\n                ],\n                \"rule_set\":[\n                    \"geosite-openai\"\n                ],\n                \"outbound\":\"${CHATGPT_OUT}\"\n            }\n        ]\n    }\n}\nEOF\n\n    # 生成缓存文件\n    cat > ${WORK_DIR}/conf/04_experimental.json << EOF\n{\n    \"experimental\": {\n        \"cache_file\": {\n            \"enabled\": true,\n            \"path\": \"${WORK_DIR}/cache.db\"\n        }\n    }\n}\nEOF\n\n    # 生成 dns 配置文件\n    cat > ${WORK_DIR}/conf/05_dns.json << EOF\n{\n    \"dns\":{\n        \"servers\":[\n            {\n                \"address\":\"local\"\n            }\n        ]\n    }\n}\nEOF\n  fi\n\n  # 生成 Reality 公私钥，第一次安装的时候使用新生成的；添加协议的时，使用相应数组里的第一个非空值，如全空则像第一次安装那样使用新生成的\n  if [[ \"${#REALITY_PRIVATE[@]}\" = 0 || \"${#REALITY_PUBLIC[@]}\" = 0 ]]; then\n    REALITY_KEYPAIR=$($DIR/sing-box generate reality-keypair) && REALITY_PRIVATE=$(awk '/PrivateKey/{print $NF}' <<< \"$REALITY_KEYPAIR\") && REALITY_PUBLIC=$(awk '/PublicKey/{print $NF}' <<< \"$REALITY_KEYPAIR\")\n  else\n    REALITY_PRIVATE=$(awk '{print $1}' <<< \"${REALITY_PRIVATE[@]}\") && REALITY_PUBLIC=$(awk '{print $1}' <<< \"${REALITY_PUBLIC[@]}\")\n  fi\n\n  # 生成 TLS 网站\n  [ \"${#TLS_SERVER[@]}\" -gt 0 ] && TLS_SERVER=$(awk '{print $1}' <<< \"${TLS_SERVER[@]}\") || TLS_SERVER=$TLS_SERVER_DEFAULT\n\n  # 第1个协议为 b  (a为全部)，生成 XTLS + Reality 配置\n  CHECK_PROTOCOLS=b\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_XTLS_REALITY\" ] && PORT_XTLS_REALITY=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[11]=${NODE_NAME[11]:-\"$NODE_NAME_CONFIRM\"} && UUID[11]=${UUID[11]:-\"$UUID_CONFIRM\"} && TLS_SERVER[11]=${TLS_SERVER[11]:-\"$TLS_SERVER\"} && REALITY_PRIVATE[11]=${REALITY_PRIVATE[11]:-\"$REALITY_PRIVATE\"} && REALITY_PUBLIC[11]=${REALITY_PUBLIC[11]:-\"$REALITY_PUBLIC\"}\n    cat > ${WORK_DIR}/conf/11_${NODE_TAG[0]}_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC[11]}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME[11]} ${NODE_TAG[0]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_XTLS_REALITY,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID[11]}\",\n                    \"flow\":\"\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"${TLS_SERVER[11]}\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"${TLS_SERVER[11]}\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE[11]}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 Hysteria2 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_HYSTERIA2\" ] && PORT_HYSTERIA2=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    [ \"$IS_HOPPING\" = 'is_hopping' ] && add_port_hopping_nat $PORT_HOPPING_START $PORT_HOPPING_END $PORT_HYSTERIA2\n    NODE_NAME[12]=${NODE_NAME[12]:-\"$NODE_NAME_CONFIRM\"} && UUID[12]=${UUID[12]:-\"$UUID_CONFIRM\"}\n    cat > ${WORK_DIR}/conf/12_${NODE_TAG[1]}_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"hysteria2\",\n            \"tag\":\"${NODE_NAME[12]} ${NODE_TAG[1]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_HYSTERIA2,\n            \"users\":[\n                {\n                    \"password\":\"${UUID[12]}\"\n                }\n            ],\n            \"ignore_client_bandwidth\":false,\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"\",\n                \"alpn\":[\n                    \"h3\"\n                ],\n                \"min_version\":\"1.3\",\n                \"max_version\":\"1.3\",\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 Tuic V5 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_TUIC\" ] && PORT_TUIC=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[13]=${NODE_NAME[13]:-\"$NODE_NAME_CONFIRM\"} && UUID[13]=${UUID[13]:-\"$UUID_CONFIRM\"} && TUIC_PASSWORD=${TUIC_PASSWORD:-\"$UUID_CONFIRM\"} && TUIC_CONGESTION_CONTROL=${TUIC_CONGESTION_CONTROL:-\"bbr\"}\n    cat > ${WORK_DIR}/conf/13_${NODE_TAG[2]}_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"tuic\",\n            \"tag\":\"${NODE_NAME[13]} ${NODE_TAG[2]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_TUIC,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID[13]}\",\n                    \"password\":\"$TUIC_PASSWORD\"\n                }\n            ],\n            \"congestion_control\": \"$TUIC_CONGESTION_CONTROL\",\n            \"zero_rtt_handshake\": false,\n            \"tls\":{\n                \"enabled\":true,\n                \"alpn\":[\n                    \"h3\"\n                ],\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 ShadowTLS V5 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_SHADOWTLS\" ] && PORT_SHADOWTLS=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[14]=${NODE_NAME[14]:-\"$NODE_NAME_CONFIRM\"} && UUID[14]=${UUID[14]:-\"$UUID_CONFIRM\"} && TLS_SERVER[14]=${TLS_SERVER[14]:-\"$TLS_SERVER\"} && SHADOWTLS_PASSWORD=${SHADOWTLS_PASSWORD:-\"$($DIR/sing-box generate rand --base64 16)\"} && SHADOWTLS_METHOD=${SHADOWTLS_METHOD:-\"2022-blake3-aes-128-gcm\"}\n\n    cat > ${WORK_DIR}/conf/14_${NODE_TAG[3]}_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"shadowtls\",\n            \"tag\":\"${NODE_NAME[14]} ${NODE_TAG[3]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_SHADOWTLS,\n            \"detour\":\"shadowtls-in\",\n            \"version\":3,\n            \"users\":[\n                {\n                    \"password\":\"${UUID[14]}\"\n                }\n            ],\n            \"handshake\":{\n                \"server\":\"${TLS_SERVER[14]}\",\n                \"server_port\":443\n            },\n            \"strict_mode\":true\n        },\n        {\n            \"type\":\"shadowsocks\",\n            \"tag\":\"shadowtls-in\",\n            \"listen\":\"127.0.0.1\",\n            \"network\":\"tcp\",\n            \"method\":\"$SHADOWTLS_METHOD\",\n            \"password\":\"$SHADOWTLS_PASSWORD\",\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 Shadowsocks 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_SHADOWSOCKS\" ] && PORT_SHADOWSOCKS=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[15]=${NODE_NAME[15]:-\"$NODE_NAME_CONFIRM\"} && UUID[15]=${UUID[15]:-\"$UUID_CONFIRM\"} && SHADOWSOCKS_METHOD=${SHADOWSOCKS_METHOD:-\"aes-128-gcm\"}\n    cat > ${WORK_DIR}/conf/15_${NODE_TAG[4]}_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"shadowsocks\",\n            \"tag\":\"${NODE_NAME[15]} ${NODE_TAG[4]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_SHADOWSOCKS,\n            \"method\":\"${SHADOWSOCKS_METHOD}\",\n            \"password\":\"${UUID[15]}\",\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 Trojan 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_TROJAN\" ] && PORT_TROJAN=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[16]=${NODE_NAME[16]:-\"$NODE_NAME_CONFIRM\"} && TROJAN_PASSWORD=${TROJAN_PASSWORD:-\"$UUID_CONFIRM\"}\n    cat > ${WORK_DIR}/conf/16_${NODE_TAG[5]}_inbounds.json << EOF\n{\n    \"inbounds\":[\n        {\n            \"type\":\"trojan\",\n            \"tag\":\"${NODE_NAME[16]} ${NODE_TAG[5]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_TROJAN,\n            \"users\":[\n                {\n                    \"password\":\"$TROJAN_PASSWORD\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 vmess + ws 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_VMESS_WS\" ] && PORT_VMESS_WS=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[17]=${NODE_NAME[17]:-\"$NODE_NAME_CONFIRM\"} && UUID[17]=${UUID[17]:-\"$UUID_CONFIRM\"} && WS_SERVER_IP[17]=${WS_SERVER_IP[17]:-\"$SERVER_IP\"} && CDN[17]=${CDN[17]:-\"$CDN\"} && VMESS_WS_PATH=${VMESS_WS_PATH:-\"${UUID[17]}-vmess\"}\n    cat > ${WORK_DIR}/conf/17_${NODE_TAG[6]}_inbounds.json << EOF\n//  \"WS_SERVER_IP_SHOW\": \"${WS_SERVER_IP[17]}\"\n//  \"VMESS_HOST_DOMAIN\": \"${VMESS_HOST_DOMAIN}${ARGO_DOMAIN}\"\n//  \"CDN\": \"${CDN[17]}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vmess\",\n            \"tag\":\"${NODE_NAME[17]} ${NODE_TAG[6]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_VMESS_WS,\n            \"tcp_fast_open\":false,\n            \"proxy_protocol\":false,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID[17]}\",\n                    \"alterId\":0\n                }\n            ],\n            \"transport\":{\n                \"type\":\"ws\",\n                \"path\":\"/$VMESS_WS_PATH\",\n                \"max_early_data\":2048,\n                \"early_data_header_name\":\"Sec-WebSocket-Protocol\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 vless + ws + tls 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_VLESS_WS\" ] && PORT_VLESS_WS=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[18]=${NODE_NAME[18]:-\"$NODE_NAME_CONFIRM\"} && UUID[18]=${UUID[18]:-\"$UUID_CONFIRM\"} && WS_SERVER_IP[18]=${WS_SERVER_IP[18]:-\"$SERVER_IP\"} && CDN[18]=${CDN[18]:-\"$CDN\"} && VLESS_WS_PATH=${VLESS_WS_PATH:-\"${UUID[18]}-vless\"}\n    cat > ${WORK_DIR}/conf/18_${NODE_TAG[7]}_inbounds.json << EOF\n//  \"WS_SERVER_IP_SHOW\": \"${WS_SERVER_IP[18]}\"\n//  \"CDN\": \"${CDN[18]}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME[18]} ${NODE_TAG[7]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_VLESS_WS,\n            \"tcp_fast_open\":false,\n            \"proxy_protocol\":false,\n            \"users\":[\n                {\n                    \"name\":\"sing-box\",\n                    \"uuid\":\"${UUID[18]}\"\n                }\n            ],\n            \"transport\":{\n                \"type\":\"ws\",\n                \"path\":\"/$VLESS_WS_PATH\",\n                \"max_early_data\":2048,\n                \"early_data_header_name\":\"Sec-WebSocket-Protocol\"\n            },\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"${VLESS_HOST_DOMAIN}${ARGO_DOMAIN}\",\n                \"min_version\":\"1.3\",\n                \"max_version\":\"1.3\",\n                \"certificate_path\":\"${WORK_DIR}/cert/cert.pem\",\n                \"key_path\":\"${WORK_DIR}/cert/private.key\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 H2 + Reality 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_H2_REALITY\" ] && PORT_H2_REALITY=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[19]=${NODE_NAME[19]:-\"$NODE_NAME_CONFIRM\"} && UUID[19]=${UUID[19]:-\"$UUID_CONFIRM\"} && TLS_SERVER[19]=${TLS_SERVER[19]:-\"$TLS_SERVER\"} && REALITY_PRIVATE[19]=${REALITY_PRIVATE[19]:-\"$REALITY_PRIVATE\"} && REALITY_PUBLIC[19]=${REALITY_PUBLIC[19]:-\"$REALITY_PUBLIC\"}\n    cat > ${WORK_DIR}/conf/19_${NODE_TAG[8]}_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC[19]}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME[19]} ${NODE_TAG[8]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_H2_REALITY,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID[19]}\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"${TLS_SERVER[19]}\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"${TLS_SERVER[19]}\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE[19]}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"transport\": {\n                \"type\": \"http\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n\n  # 生成 gRPC + Reality 配置\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    [ -z \"$PORT_GRPC_REALITY\" ] && PORT_GRPC_REALITY=$[START_PORT+$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")]\n    NODE_NAME[20]=${NODE_NAME[20]:-\"$NODE_NAME_CONFIRM\"} && UUID[20]=${UUID[20]:-\"$UUID_CONFIRM\"} && TLS_SERVER[20]=${TLS_SERVER[20]:-\"$TLS_SERVER\"} && REALITY_PRIVATE[20]=${REALITY_PRIVATE[20]:-\"$REALITY_PRIVATE\"} && REALITY_PUBLIC[20]=${REALITY_PUBLIC[20]:-\"$REALITY_PUBLIC\"}\n    cat > ${WORK_DIR}/conf/20_${NODE_TAG[9]}_inbounds.json << EOF\n//  \"public_key\":\"${REALITY_PUBLIC[20]}\"\n{\n    \"inbounds\":[\n        {\n            \"type\":\"vless\",\n            \"tag\":\"${NODE_NAME[20]} ${NODE_TAG[9]}\",\n            \"listen\":\"::\",\n            \"listen_port\":$PORT_GRPC_REALITY,\n            \"users\":[\n                {\n                    \"uuid\":\"${UUID[20]}\"\n                }\n            ],\n            \"tls\":{\n                \"enabled\":true,\n                \"server_name\":\"${TLS_SERVER[20]}\",\n                \"reality\":{\n                    \"enabled\":true,\n                    \"handshake\":{\n                        \"server\":\"${TLS_SERVER[20]}\",\n                        \"server_port\":443\n                    },\n                    \"private_key\":\"${REALITY_PRIVATE[20]}\",\n                    \"short_id\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"transport\": {\n                \"type\": \"grpc\",\n                \"service_name\": \"grpc\"\n            },\n            \"multiplex\":{\n                \"enabled\":true,\n                \"padding\":true,\n                \"brutal\":{\n                    \"enabled\":${IS_BRUTAL},\n                    \"up_mbps\":1000,\n                    \"down_mbps\":1000\n                }\n            }\n        }\n    ]\n}\nEOF\n  fi\n}\n\n# Sing-box 生成守护进程文件\nsing-box_systemd() {\n  SING_BOX_SERVICE=\"[Unit]\nDescription=sing-box service\nDocumentation=https://sing-box.sagernet.org\nAfter=network.target nss-lookup.target\n\n[Service]\nUser=root\nType=simple\nNoNewPrivileges=yes\nTimeoutStartSec=0\nWorkingDirectory=${WORK_DIR}\n\"\n  [[ -n \"$PORT_NGINX\" && \"$IS_CENTOS\" != 'CentOS7' ]] && SING_BOX_SERVICE+=\"ExecStartPre=$(type -p nginx) -c ${WORK_DIR}/nginx.conf\n\"\n  SING_BOX_SERVICE+=\"ExecStart=${WORK_DIR}/sing-box run -C ${WORK_DIR}/conf/\nExecReload=/bin/kill -HUP \\$MAINPID\nRestart=on-failure\nRestartSec=10\nLimitNOFILE=infinity\n\n[Install]\nWantedBy=multi-user.target\"\n\n  echo \"$SING_BOX_SERVICE\" > /etc/systemd/system/sing-box.service\n}\n\n# Argo 生成守护进程文件\nargo_systemd() {\n  cat > /etc/systemd/system/argo.service << EOF\n[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nNoNewPrivileges=yes\nTimeoutStartSec=0\nExecStart=$ARGO_RUNS\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\nEOF\n}\n\n# 获取原有各协议的参数，先清空所有的 key-value\nfetch_nodes_value() {\n  unset FILE NODE_NAME PORT_XTLS_REALITY UUID TLS_SERVER REALITY_PRIVATE REALITY_PUBLIC PORT_HYSTERIA2 OBFS PORT_TUIC TUIC_PASSWORD TUIC_CONGESTION_CONTROL PORT_SHADOWTLS SHADOWTLS_PASSWORD SHADOWSOCKS_METHOD PORT_SHADOWSOCKS PORT_TROJAN TROJAN_PASSWORD PORT_VMESS_WS VMESS_WS_PATH WS_SERVER_IP WS_SERVER_IP_SHOW VMESS_HOST_DOMAIN CDN PORT_VLESS_WS VLESS_WS_PATH VLESS_HOST_DOMAIN PORT_H2_REALITY PORT_GRPC_REALITY ARGO_DOMAIN\n\n  # 获取公共数据\n  ls ${WORK_DIR}/conf/*-ws*inbounds.json >/dev/null 2>&1 && SERVER_IP=$(awk -F '\"' '/\"WS_SERVER_IP_SHOW\"/{print $4; exit}' ${WORK_DIR}/conf/*-ws*inbounds.json) || SERVER_IP=$(grep -A1 '\"tag\"' ${WORK_DIR}/list | sed -E '/-ws(-tls)*\",$/{N;d}' | awk -F '\"' '/\"server\"/{count++; if (count == 1) {print $4; exit}}')\n  EXISTED_PORTS=$(awk -F ':|,' '/listen_port/{print $2}' ${WORK_DIR}/conf/*_inbounds.json)\n  START_PORT=$(awk 'NR == 1 { min = $0 } { if ($0 < min) min = $0; count++ } END {print min}' <<< \"$EXISTED_PORTS\")\n  [[ -z \"$NODE_NAME_CONFIRM\" && -s ${WORK_DIR}/subscribe/clash ]] && NODE_NAME_CONFIRM=$(awk -F \"'\" '/u: &u/{print $2; exit}' ${WORK_DIR}/subscribe/clash)\n\n  # 如有 Argo，获取 Argo Tunnel\n  [[ ${STATUS[1]} =~ $(text 27)|$(text 28) ]] && grep -q '\\--url' /etc/systemd/system/argo.service && cmd_systemctl enable argo && sleep 2 && [ \"$(systemctl is-active argo)\" = 'active' ] && fetch_quicktunnel_domain\n\n  # 获取 Nginx 端口和路径\n  [[ \"${IS_SUB}\" = 'is_sub' || \"${IS_ARGO}\" = 'is_argo' ]] && local NGINX_JSON=$(cat ${WORK_DIR}/nginx.conf) &&\n  PORT_NGINX=$(awk '/listen/{print $2; exit}' <<< \"$NGINX_JSON\") &&\n  UUID_CONFIRM=$(awk -F '/' '/location ~ \\^/{print $2; exit}' <<< \"$NGINX_JSON\")\n\n  # 获取 XTLS + Reality key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[0]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[0]}_inbounds.json) && NODE_NAME[11]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[0]}.*/\\1/p\" <<< \"$JSON\") && PORT_XTLS_REALITY=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[11]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && TLS_SERVER[11]=$(awk -F '\"' '/\"server_name\"/{print $4}' <<< \"$JSON\") && REALITY_PRIVATE[11]=$(awk -F '\"' '/\"private_key\"/{print $4}' <<< \"$JSON\") && REALITY_PUBLIC[11]=$(awk -F '\"' '/\"public_key\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 Hysteria2 key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[1]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[1]}_inbounds.json) && NODE_NAME[12]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[1]}.*/\\1/p\" <<< \"$JSON\") && PORT_HYSTERIA2=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[12]=$(awk -F '\"' '/\"password\"/{count++; if (count == 1) {print $4; exit}}' <<< \"$JSON\") && check_port_hopping_nat\n\n  # 获取 Tuic V5 key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[2]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[2]}_inbounds.json) && NODE_NAME[13]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[2]}.*/\\1/p\" <<< \"$JSON\") && PORT_TUIC=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[13]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && TUIC_PASSWORD=$(awk -F '\"' '/\"password\"/{print $4}' <<< \"$JSON\") && TUIC_CONGESTION_CONTROL=$(awk -F '\"' '/\"congestion_control\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 ShadowTLS key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[3]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[3]}_inbounds.json) && NODE_NAME[14]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[3]}.*/\\1/p\" <<< \"$JSON\") && PORT_SHADOWTLS=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[14]=$(awk -F '\"' '/\"password\"/{count++; if (count == 1) {print $4; exit}}' <<< \"$JSON\") && SHADOWTLS_PASSWORD=$(awk -F '\"' '/\"password\"/{count++; if (count == 2) {print $4; exit}}' <<< \"$JSON\") && TLS_SERVER[14]=$(awk -F '\"' '/\"server\"/{print $4}' <<< \"$JSON\") && SHADOWTLS_METHOD=$(awk -F '\"' '/\"method\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 Shadowsocks key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[4]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[4]}_inbounds.json) && NODE_NAME[15]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[4]}.*/\\1/p\" <<< \"$JSON\") && PORT_SHADOWSOCKS=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[15]=$(awk -F '\"' '/\"password\"/{print $4}' <<< \"$JSON\") && SHADOWSOCKS_METHOD=$(awk -F '\"' '/\"method\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 Trojan key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[5]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[5]}_inbounds.json) && NODE_NAME[16]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[5]}.*/\\1/p\" <<< \"$JSON\") && PORT_TROJAN=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && TROJAN_PASSWORD=$(awk -F '\"' '/\"password\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 vmess + ws key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[6]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[6]}_inbounds.json) && NODE_NAME[17]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[6]}.*/\\1/p\" <<< \"$JSON\") && PORT_VMESS_WS=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[17]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && VMESS_WS_PATH=$(sed -n 's#.*\"path\":\"/\\(.*\\)\",#\\1#p' <<< \"$JSON\") && WS_SERVER_IP[17]=$(awk  -F '\"' '/\"WS_SERVER_IP_SHOW\"/{print $4}' <<< \"$JSON\") && CDN[17]=$(awk  -F '\"' '/\"CDN\"/{print $4}' <<< \"$JSON\") && [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] && ARGO_DOMAIN=$(awk  -F '\"' '/\"VMESS_HOST_DOMAIN\"/{print $4}' <<< \"$JSON\") || VMESS_HOST_DOMAIN=$(awk  -F '\"' '/\"VMESS_HOST_DOMAIN\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 vless + ws + tls key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[7]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[7]}_inbounds.json) && NODE_NAME[18]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[7]}.*/\\1/p\" <<< \"$JSON\") && PORT_VLESS_WS=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[18]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && VLESS_WS_PATH=$(sed -n 's#.*\"path\":\"/\\(.*\\)\",#\\1#p' <<< \"$JSON\") && WS_SERVER_IP[18]=$(awk  -F '\"' '/\"WS_SERVER_IP_SHOW\"/{print $4}' <<< \"$JSON\") && CDN[18]=$(awk  -F '\"' '/\"CDN\"/{print $4}' <<< \"$JSON\") && [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] && ARGO_DOMAIN=$(awk -F '\"' '/\"server_name\"/{print $4}' <<< \"$JSON\") || VLESS_HOST_DOMAIN=$(awk -F '\"' '/\"server_name\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 H2 + Reality key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[8]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[8]}_inbounds.json) && NODE_NAME[19]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[8]}.*/\\1/p\" <<< \"$JSON\") && PORT_H2_REALITY=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[19]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && TLS_SERVER[19]=$(awk -F '\"' '/\"server\"/{print $4}' <<< \"$JSON\") && REALITY_PRIVATE[19]=$(awk -F '\"' '/\"private_key\"/{print $4}' <<< \"$JSON\") && REALITY_PUBLIC[19]=$(awk -F '\"' '/\"public_key\"/{print $4}' <<< \"$JSON\")\n\n  # 获取 gRPC + Reality key-value\n  [ -s ${WORK_DIR}/conf/*_${NODE_TAG[9]}_inbounds.json ] && local JSON=$(cat ${WORK_DIR}/conf/*_${NODE_TAG[9]}_inbounds.json) && NODE_NAME[20]=$(sed -n \"s/.*\\\"tag\\\":\\\"\\(.*\\) ${NODE_TAG[9]}.*/\\1/p\" <<< \"$JSON\") && PORT_GRPC_REALITY=$(sed -n 's/.*\"listen_port\":\\([0-9]\\+\\),/\\1/gp' <<< \"$JSON\") && UUID[20]=$(awk -F '\"' '/\"uuid\"/{print $4}' <<< \"$JSON\") && TLS_SERVER[20]=$(awk -F '\"' '/\"server\"/{print $4}' <<< \"$JSON\") && REALITY_PRIVATE[20]=$(awk -F '\"' '/\"private_key\"/{print $4}' <<< \"$JSON\") && REALITY_PUBLIC[20]=$(awk -F '\"' '/\"public_key\"/{print $4}' <<< \"$JSON\")\n}\n\n# 获取 Argo 临时隧道域名\nfetch_quicktunnel_domain() {\n  unset CLOUDFLARED_PID METRICS_ADDRESS ARGO_DOMAIN\n  local QUICKTUNNEL_ERROR_TIME=20\n  until [ -n \"$ARGO_DOMAIN\" ]; do\n    [ \"$SYSTEM\" = 'Alpine' ] && CLOUDFLARED_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/cloudflared\" {print $1; exit}') || CLOUDFLARED_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/cloudflared\" {print $2; exit}')\n    [[ -z \"$METRICS_ADDRESS\" && \"$CLOUDFLARED_PID\" =~ ^[0-9]+$ ]] && METRICS_ADDRESS=$(ss -nltp | grep \"pid=$CLOUDFLARED_PID\" | awk '{print $4}')\n    [ -n \"$METRICS_ADDRESS\" ] && ARGO_DOMAIN=$(wget -qO- http://$METRICS_ADDRESS/quicktunnel | awk -F '\"' '{print $4}')\n    [[ ! \"$ARGO_DOMAIN\" =~ trycloudflare\\.com$ ]] && (( QUICKTUNNEL_ERROR_TIME-- )) && sleep 2 || break\n    [ \"$QUICKTUNNEL_ERROR_TIME\" = '0' ] && error \" $(text 93) \"\n  done\n\n  # 把临时隧道写到 Sing-box 相应的 ws inbounds 文件\n  [ -s ${WORK_DIR}/conf/17_${NODE_TAG[6]}_inbounds.json ] && sed -i \"s/VMESS_HOST_DOMAIN.*/VMESS_HOST_DOMAIN\\\": \\\"$ARGO_DOMAIN\\\"/\" ${WORK_DIR}/conf/17_${NODE_TAG[6]}_inbounds.json\n  [ -s ${WORK_DIR}/conf/18_${NODE_TAG[7]}_inbounds.json ] && sed -i \"s/\\\"server_name\\\":.*/\\\"server_name\\\": \\\"$ARGO_DOMAIN\\\",/\" ${WORK_DIR}/conf/18_${NODE_TAG[7]}_inbounds.json\n}\n\n# 安装 sing-box 全家桶\ninstall_sing-box() {\n  sing-box_variables\n  [ -n \"$PORT_NGINX\" ] && check_nginx\n  [ ! -d /etc/systemd/system ] && mkdir -p /etc/systemd/system\n  [ ! -d ${WORK_DIR}/logs ] && mkdir -p ${WORK_DIR}/logs\n  ssl_certificate\n  [ \"$SYSTEM\" = 'CentOS' ] && check_firewall_configuration\n  hint \"\\n $(text 2) \" && wait\n  sing-box_json\n  echo \"${L^^}\" > ${WORK_DIR}/language\n  cp $TEMP_DIR/sing-box $TEMP_DIR/jq ${WORK_DIR}\n  [ -x $TEMP_DIR/qrencode ] && cp $TEMP_DIR/qrencode ${WORK_DIR}\n\n  # 生成 sing-box systemd 配置文件\n  sing-box_systemd\n\n  # 生成 Argo systemd 配置文件，并复制 cloudflared 可执行二进制文件\n  cp $TEMP_DIR/cloudflared ${WORK_DIR}\n  [ -n \"$ARGO_RUNS\" ] && argo_systemd\n\n  # 如果是 Json Argo，把配置文件复制到工作目录\n  [ -n \"$ARGO_JSON\" ] && cp $TEMP_DIR/tunnel.* ${WORK_DIR}\n\n  # 生成 Nginx 配置文件\n  [ -n \"$PORT_NGINX\" ] && export_nginx_conf_file\n\n  # 如果 Alpine 系统，放到开机自启动\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    cat > /etc/local.d/sing-box.start << EOF\n#!/usr/bin/env bash\n\nsystemctl start sing-box\nEOF\n    chmod +x /etc/local.d/sing-box.start\n    rc-update add local >/dev/null 2>&1\n  fi\n\n  # 等待所有后台进程完成后,再次检测状态，运行 Sing-box\n  check_install\n  sleep 1\n  check_sing-box_status\n  if [ \"$IS_ARGO\" = 'is_argo' ]; then\n    [ \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ] && cmd_systemctl enable argo || check_argo_status\n  fi\n}\n\nexport_list() {\n  IS_INSTALL=$1\n\n  check_install\n\n  #### v1.1.9 处理的 jq 和 qrencode 二进制文件代替系统依赖的问题，此处预计6月30日删除\n  if [[ \"${IS_SUB}\" = 'is_sub' || \"${IS_ARGO}\" = 'is_argo' ]]; then\n    [[ ! -s ${WORK_DIR}/jq && -s /usr/bin/jq ]] && cp /usr/bin/jq ${WORK_DIR}/\n    if [ ! -s ${WORK_DIR}/qrencode ]; then\n      check_arch\n      wget -qO ${WORK_DIR}/qrencode ${GH_PROXY}https://github.com/fscarmen/client_template/raw/main/qrencode-go/qrencode-go-linux-$QRENCODE_ARCH && chmod +x ${WORK_DIR}/qrencode\n    fi\n  fi\n\n  [ \"$IS_INSTALL\" != 'install' ] && fetch_nodes_value\n\n  # IPv6 时的 IP 处理\n  if [[ \"$SERVER_IP\" =~ : ]]; then\n    SERVER_IP_1=\"[$SERVER_IP]\"\n    SERVER_IP_2=\"[[$SERVER_IP]]\"\n  else\n    SERVER_IP_1=\"$SERVER_IP\"\n    SERVER_IP_2=\"$SERVER_IP\"\n  fi\n\n  # 使用 Argo 时，获取临时隧道域名\n  ls ${WORK_DIR}/conf/*-ws*inbounds.json >/dev/null 2>&1 && [ \"$IS_ARGO\" = 'is_argo' ] && [ -z \"$ARGO_DOMAIN\" ] && [[ \"${STATUS[1]}\" = \"$(text 28)\" || \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]] && fetch_quicktunnel_domain\n\n  # 如果使用 Json 或者 Token Argo，则使用加密的而且是固定的 Argo 隧道域名，否则使用 IP:PORT 的 http 服务\n  [[ \"$ARGO_TYPE\" = 'is_token_argo' || \"$ARGO_TYPE\" = 'is_json_argo' ]] && SUBSCRIBE_ADDRESS=\"https://$ARGO_DOMAIN\" || SUBSCRIBE_ADDRESS=\"http://${SERVER_IP_1}:${PORT_NGINX}\"\n\n  # 生成各订阅文件\n  # 生成 Clash proxy providers 订阅文件\n  local CLASH_SUBSCRIBE='proxies:'\n\n  [ -n \"$PORT_XTLS_REALITY\" ] && local CLASH_XTLS_REALITY=\"- {name: \\\"${NODE_NAME[11]} ${NODE_TAG[0]}\\\", type: vless, server: ${SERVER_IP}, port: ${PORT_XTLS_REALITY}, uuid: ${UUID[11]}, network: tcp, udp: true, tls: true, servername: ${TLS_SERVER[11]}, client-fingerprint: chrome, reality-opts: {public-key: ${REALITY_PUBLIC[11]}, short-id: \\\"\\\"}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_XTLS_REALITY\n\"\n  if [ -n \"$PORT_HYSTERIA2\" ]; then\n    [[ -n \"$PORT_HOPPING_START\" && -n \"$PORT_HOPPING_END\" ]] && local CLASH_HOPPING=\" ports: ${PORT_HOPPING_START}-${PORT_HOPPING_END}, HopInterval: 60,\"\n    local CLASH_HYSTERIA2=\"- {name: \\\"${NODE_NAME[12]} ${NODE_TAG[1]}\\\", type: hysteria2, server: ${SERVER_IP}, port: ${PORT_HYSTERIA2},${CLASH_HOPPING} up: \\\"200 Mbps\\\", down: \\\"1000 Mbps\\\", password: ${UUID[12]}, skip-cert-verify: true}\" &&\n    local CLASH_SUBSCRIBE+=\"\n  $CLASH_HYSTERIA2\n\"\n  fi\n\n  [ -n \"$PORT_TUIC\" ] && local CLASH_TUIC=\"- {name: \\\"${NODE_NAME[13]} ${NODE_TAG[2]}\\\", type: tuic, server: ${SERVER_IP}, port: ${PORT_TUIC}, uuid: ${UUID[13]}, password: ${TUIC_PASSWORD}, alpn: [h3], disable-sni: true, reduce-rtt: true, request-timeout: 8000, udp-relay-mode: native, congestion-controller: $TUIC_CONGESTION_CONTROL, skip-cert-verify: true}\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_TUIC\n\"\n  [ -n \"$PORT_SHADOWTLS\" ] && local CLASH_SHADOWTLS=\"- {name: \\\"${NODE_NAME[14]} ${NODE_TAG[3]}\\\", type: ss, server: ${SERVER_IP}, port: ${PORT_SHADOWTLS}, cipher: $SHADOWTLS_METHOD, password: $SHADOWTLS_PASSWORD, plugin: shadow-tls, client-fingerprint: chrome, plugin-opts: {host: ${TLS_SERVER[14]}, password: \\\"${UUID[14]}\\\", version: 3}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_SHADOWTLS\n\"\n\n  [ -n \"$PORT_SHADOWSOCKS\" ] && local CLASH_SHADOWSOCKS=\"- {name: \\\"${NODE_NAME[15]} ${NODE_TAG[4]}\\\", type: ss, server: ${SERVER_IP}, port: $PORT_SHADOWSOCKS, cipher: ${SHADOWSOCKS_METHOD}, password: ${UUID[15]}, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_SHADOWSOCKS\n\"\n  [ -n \"$PORT_TROJAN\" ] && local CLASH_TROJAN=\"- {name: \\\"${NODE_NAME[16]} ${NODE_TAG[5]}\\\", type: trojan, server: ${SERVER_IP}, port: $PORT_TROJAN, password: $TROJAN_PASSWORD, client-fingerprint: random, skip-cert-verify: true, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_TROJAN\n\"\n  if [ -n \"$PORT_VMESS_WS\" ]; then\n    if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local CLASH_VMESS_WS=\"- {name: \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", type: vmess, server: ${CDN[17]}, port: 80, uuid: ${UUID[17]}, udp: true, tls: false, alterId: 0, cipher: auto, skip-cert-verify: true, network: ws, ws-opts: { path: \\\"/$VMESS_WS_PATH\\\", headers: {Host: $ARGO_DOMAIN} }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n      local CLASH_SUBSCRIBE+=\"\n  $CLASH_VMESS_WS\n\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && CLASH_SUBSCRIBE+=\"\n  # $(text 94)\n\"\n    else\n      local CLASH_VMESS_WS=\"- {name: \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", type: vmess, server: ${CDN[17]}, port: 80, uuid: ${UUID[17]}, udp: true, tls: false, alterId: 0, cipher: auto, skip-cert-verify: true, network: ws, ws-opts: { path: \\\"/$VMESS_WS_PATH\\\", headers: {Host: $VMESS_HOST_DOMAIN} }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n      local WS_SERVER_IP_SHOW=${WS_SERVER_IP[17]} && local TYPE_HOST_DOMAIN=$VMESS_HOST_DOMAIN && local TYPE_PORT_WS=$PORT_VMESS_WS &&\n      local CLASH_SUBSCRIBE+=\"\n  $CLASH_VMESS_WS\n\n  # $(text 52)\n\"\n    fi\n  fi\n\n  if [ -n \"$PORT_VLESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local CLASH_VLESS_WS=\"- {name: \\\"${NODE_NAME[18]} ${NODE_TAG[7]}\\\", type: vless, server: ${CDN[18]}, port: 443, uuid: ${UUID[18]}, udp: true, tls: true, servername: $ARGO_DOMAIN, network: ws, skip-cert-verify: true, ws-opts: { path: \\\"/$VLESS_WS_PATH\\\", headers: {Host: $ARGO_DOMAIN}, max-early-data: 2048, early-data-header-name: Sec-WebSocket-Protocol }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n      local CLASH_SUBSCRIBE+=\"\n  $CLASH_VLESS_WS\n\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && CLASH_SUBSCRIBE+=\"\n  # $(text 94)\n\"\n    else\n      local CLASH_VLESS_WS=\"- {name: \\\"${NODE_NAME[18]} ${NODE_TAG[7]}\\\", type: vless, server: ${CDN[18]}, port: 443, uuid: ${UUID[18]}, udp: true, tls: true, servername: $VLESS_HOST_DOMAIN, network: ws, skip-cert-verify: true, ws-opts: { path: \\\"/$VLESS_WS_PATH\\\", headers: {Host: $VLESS_HOST_DOMAIN}, max-early-data: 2048, early-data-header-name: Sec-WebSocket-Protocol }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n      local WS_SERVER_IP_SHOW=${WS_SERVER_IP[18]} && local TYPE_HOST_DOMAIN=$VLESS_HOST_DOMAIN && local TYPE_PORT_WS=$PORT_VLESS_WS &&\n      local CLASH_SUBSCRIBE+=\"\n  $CLASH_VLESS_WS\n\n  # $(text 52)\n\"\n    fi\n  fi\n\n  # Clash 的 H2 传输层未实现多路复用功能，在 Clash.Meta 中更建议使用 gRPC 协议，故不输出相关配置。 https://wiki.metacubex.one/config/proxies/vless/\n  [ -n \"$PORT_H2_REALITY\" ]\n\n  [ -n \"$PORT_GRPC_REALITY\" ] && local CLASH_GRPC_REALITY=\"- {name: \\\"${NODE_NAME[20]} ${NODE_TAG[9]}\\\", type: vless, server: ${SERVER_IP}, port: ${PORT_GRPC_REALITY}, uuid: ${UUID[20]}, network: grpc, tls: true, udp: true, flow:, client-fingerprint: chrome, servername: ${TLS_SERVER[20]}, grpc-opts: {  grpc-service-name: \\\"grpc\\\" }, reality-opts: { public-key: ${REALITY_PUBLIC[20]}, short-id: \\\"\\\" }, smux: { enabled: true, protocol: 'h2mux', padding: true, max-connections: '8', min-streams: '16', statistic: true, only-tcp: false } }\" &&\n  local CLASH_SUBSCRIBE+=\"\n  $CLASH_GRPC_REALITY\n\"\n  echo -n \"${CLASH_SUBSCRIBE}\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' > ${WORK_DIR}/subscribe/proxies\n\n  # 生成 clash 订阅配置文件\n\n  # 模板1: 使用 proxy providers\n  wget --no-check-certificate -qO- --tries=3 --timeout=2 ${GH_PROXY}${SUBSCRIBE_TEMPLATE}/clash | sed \"s#NODE_NAME#${NODE_NAME_CONFIRM}#g; s#PROXY_PROVIDERS_URL#$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/proxies#\" > ${WORK_DIR}/subscribe/clash\n\n  # 模板2: 不使用 proxy providers\n  CLASH2_PORT=(\"$PORT_XTLS_REALITY\" \"$PORT_HYSTERIA2\" \"$PORT_TUIC\" \"$PORT_SHADOWTLS\" \"$PORT_SHADOWSOCKS\" \"$PORT_TROJAN\" \"$PORT_VMESS_WS\" \"$PORT_VLESS_WS\" \"$PORT_GRPC_REALITY\")\n  CLASH2_PROXY_INSERT=(\"$CLASH_XTLS_REALITY\" \"$CLASH_HYSTERIA2\" \"$CLASH_TUIC\" \"$CLASH_SHADOWTLS\" \"$CLASH_SHADOWSOCKS\" \"$CLASH_TROJAN\" \"$CLASH_VMESS_WS\" \"$CLASH_VLESS_WS\" \"$CLASH_GRPC_REALITY\")\n  CLASH2_PROXY_GROUPS_INSERT=(\"- ${NODE_NAME[11]} ${NODE_TAG[0]}\" \"- ${NODE_NAME[12]} ${NODE_TAG[1]}\" \"- ${NODE_NAME[13]} ${NODE_TAG[2]}\" \"- ${NODE_NAME[14]} ${NODE_TAG[3]}\" \"- ${NODE_NAME[15]} ${NODE_TAG[4]}\" \"- ${NODE_NAME[16]} ${NODE_TAG[5]}\" \"- ${NODE_NAME[17]} ${NODE_TAG[6]}\" \"- ${NODE_NAME[18]} ${NODE_TAG[7]}\" \"- ${NODE_NAME[20]} ${NODE_TAG[9]}\")\n\n  CLASH2_YAML=$(wget --no-check-certificate -qO- --tries=3 --timeout=2 ${GH_PROXY}${SUBSCRIBE_TEMPLATE}/clash2)\n  for x in ${!CLASH2_PORT[@]}; do\n    [[ ${CLASH2_PORT[x]} =~ [0-9]+ ]] && CLASH2_YAML=$(sed \"/proxy-groups:/i\\  ${CLASH2_PROXY_INSERT[x]}\" <<< \"$CLASH2_YAML\") && CLASH2_YAML=$(sed -E \"/- name: (♻️ 自动选择|📲 电报消息|💬 OpenAi|📹 油管视频|🎥 奈飞视频|📺 巴哈姆特|📺 哔哩哔哩|🌍 国外媒体|🌏 国内媒体|📢 谷歌FCM|Ⓜ️ 微软Bing|Ⓜ️ 微软云盘|Ⓜ️ 微软服务|🍎 苹果服务|🎮 游戏平台|🎶 网易音乐|🎯 全球直连)|^rules:$/i\\      ${CLASH2_PROXY_GROUPS_INSERT[x]}\" <<< \"$CLASH2_YAML\")\n  done\n  echo \"$CLASH2_YAML\" > ${WORK_DIR}/subscribe/clash2\n\n  # 生成 ShadowRocket 订阅配置文件\n  [ -n \"$PORT_XTLS_REALITY\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\nvless://$(echo -n \"auto:${UUID[11]}@${SERVER_IP_2}:${PORT_XTLS_REALITY}\" | base64 -w0)?remarks=${NODE_NAME[11]} ${NODE_TAG[0]}&obfs=none&tls=1&peer=${TLS_SERVER[11]}&mux=1&pbk=${REALITY_PUBLIC[11]}\n\"\n  if [ -n \"$PORT_HYSTERIA2\" ]; then\n    [[ -n \"$PORT_HOPPING_START\" && -n \"$PORT_HOPPING_END\" ]] && local SHADOWROCKET_HOPPING=\"&mport=${PORT_HYSTERIA2},${PORT_HOPPING_START}-${PORT_HOPPING_END}\"\n    local SHADOWROCKET_SUBSCRIBE+=\"\nhysteria2://${UUID[12]}@${SERVER_IP_1}:${PORT_HYSTERIA2}?insecure=1&obfs=none${SHADOWROCKET_HOPPING}#${NODE_NAME[12]}%20${NODE_TAG[1]}\n\"\n  fi\n\n  [ -n \"$PORT_TUIC\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\ntuic://${TUIC_PASSWORD}:${UUID[13]}@${SERVER_IP_2}:${PORT_TUIC}?congestion_control=$TUIC_CONGESTION_CONTROL&udp_relay_mode=native&alpn=h3&allow_insecure=1#${NODE_NAME[13]}%20${NODE_TAG[2]}\n\"\n  [ -n \"$PORT_SHADOWTLS\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\nss://$(echo -n \"$SHADOWTLS_METHOD:$SHADOWTLS_PASSWORD@${SERVER_IP_2}:${PORT_SHADOWTLS}\" | base64 -w0)?shadow-tls=$(echo -n \"{\\\"version\\\":\\\"3\\\",\\\"host\\\":\\\"${TLS_SERVER[14]}\\\",\\\"password\\\":\\\"${UUID[14]}\\\"}\" | base64 -w0)#${NODE_NAME[14]}%20${NODE_TAG[3]}\n\"\n  [ -n \"$PORT_SHADOWSOCKS\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\nss://$(echo -n \"${SHADOWSOCKS_METHOD}:${UUID[15]}@${SERVER_IP_2}:$PORT_SHADOWSOCKS\" | base64 -w0)#${NODE_NAME[15]}%20${NODE_TAG[4]}\n\"\n  [ -n \"$PORT_TROJAN\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\ntrojan://$TROJAN_PASSWORD@${SERVER_IP_1}:$PORT_TROJAN?allowInsecure=1#${NODE_NAME[16]}%20${NODE_TAG[5]}\n\"\n  if [ -n \"$PORT_VMESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"auto:${UUID[17]}@${CDN[17]}:80\" | base64 -w0)?remarks=${NODE_NAME[17]}%20${NODE_TAG[6]}&obfsParam=$ARGO_DOMAIN&path=/$VMESS_WS_PATH&obfs=websocket&alterId=0\n\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && SHADOWROCKET_SUBSCRIBE+=\"\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[17]} && TYPE_HOST_DOMAIN=$VMESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VMESS_WS && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"auto:${UUID[17]}@${CDN[17]}:80\" | base64 -w0)?remarks=${NODE_NAME[17]}%20${NODE_TAG[6]}&obfsParam=$VMESS_HOST_DOMAIN&path=/$VMESS_WS_PATH&obfs=websocket&alterId=0\n\n# $(text 52)\n\"\n    fi\n  fi\n\n  if [ -n \"$PORT_VLESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvless://$(echo -n \"auto:${UUID[18]}@${CDN[18]}:443\" | base64 -w0)?remarks=${NODE_NAME[18]}%20${NODE_TAG[7]}&obfsParam=$ARGO_DOMAIN&path=/$VLESS_WS_PATH?ed=2048&obfs=websocket&tls=1&peer=$ARGO_DOMAIN&allowInsecure=1\n\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && SHADOWROCKET_SUBSCRIBE+=\"\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[18]} && TYPE_HOST_DOMAIN=$VLESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VLESS_WS && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvless://$(echo -n \"auto:${UUID[18]}@${CDN[18]}:443\" | base64 -w0)?remarks=${NODE_NAME[18]} ${NODE_TAG[7]}&obfsParam=$VLESS_HOST_DOMAIN&path=/$VLESS_WS_PATH?ed=2048&obfs=websocket&tls=1&peer=$VLESS_HOST_DOMAIN&allowInsecure=1\n\n# $(text 52)\n\"\n    fi\n  fi\n\n  [ -n \"$PORT_H2_REALITY\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\n----------------------------\nvless://$(echo -n auto:${UUID[19]}@${SERVER_IP_2}:${PORT_H2_REALITY} | base64 -w0)?remarks=${NODE_NAME[19]}%20${NODE_TAG[8]}&path=/&obfs=h2&tls=1&peer=${TLS_SERVER[19]}&alpn=h2&mux=1&pbk=${REALITY_PUBLIC[19]}\n\"\n  [ -n \"$PORT_GRPC_REALITY\" ] && local SHADOWROCKET_SUBSCRIBE+=\"\nvless://$(echo -n \"auto:${UUID[20]}@${SERVER_IP_2}:${PORT_GRPC_REALITY}\" | base64 -w0)?remarks=${NODE_NAME[20]}%20${NODE_TAG[9]}&path=grpc&obfs=grpc&tls=1&peer=${TLS_SERVER[20]}&pbk=${REALITY_PUBLIC[20]}\n\"\n  echo -n \"$SHADOWROCKET_SUBSCRIBE\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/shadowrocket\n\n  # 生成 V2rayN 订阅文件\n  [ -n \"$PORT_XTLS_REALITY\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[11]}@${SERVER_IP_1}:${PORT_XTLS_REALITY}?encryption=none&security=reality&sni=${TLS_SERVER[11]}&fp=chrome&pbk=${REALITY_PUBLIC[11]}&type=tcp&headerType=none#${NODE_NAME[11]// /%20}%20${NODE_TAG[0]}\"\n\n  [ -n \"$PORT_HYSTERIA2\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nhysteria2://${UUID[12]}@${SERVER_IP_1}:${PORT_HYSTERIA2}/?alpn=h3&insecure=1#${NODE_NAME[12]// /%20}%20${NODE_TAG[1]}\"\n\n  [ -n \"$PORT_TUIC\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\ntuic://${UUID[13]}:${TUIC_PASSWORD}@${SERVER_IP_1}:${PORT_TUIC}?alpn=h3&congestion_control=$TUIC_CONGESTION_CONTROL#${NODE_NAME[13]// /%20}%20${NODE_TAG[2]}\n\n# $(text 70)\"\n\n  [ -n \"$PORT_SHADOWTLS\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\n# $(text 54)\n\n{\n  \\\"log\\\":{\n      \\\"level\\\":\\\"warn\\\"\n  },\n  \\\"inbounds\\\":[\n      {\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"listen\\\":\\\"127.0.0.1\\\",\n          \\\"listen_port\\\":${PORT_SHADOWTLS},\n          \\\"sniff\\\":true,\n          \\\"sniff_override_destination\\\":false,\n          \\\"tag\\\": \\\"ShadowTLS\\\",\n          \\\"type\\\":\\\"mixed\\\"\n      }\n  ],\n  \\\"outbounds\\\":[\n      {\n          \\\"detour\\\":\\\"shadowtls-out\\\",\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"method\\\":\\\"$SHADOWTLS_METHOD\\\",\n          \\\"password\\\":\\\"$SHADOWTLS_PASSWORD\\\",\n          \\\"type\\\":\\\"shadowsocks\\\",\n          \\\"udp_over_tcp\\\": false,\n          \\\"multiplex\\\": {\n            \\\"enabled\\\": true,\n            \\\"protocol\\\": \\\"h2mux\\\",\n            \\\"max_connections\\\": 8,\n            \\\"min_streams\\\": 16,\n            \\\"padding\\\": true\n          }\n      },\n      {\n          \\\"domain_strategy\\\":\\\"\\\",\n          \\\"password\\\":\\\"${UUID[14]}\\\",\n          \\\"server\\\":\\\"${SERVER_IP}\\\",\n          \\\"server_port\\\":${PORT_SHADOWTLS},\n          \\\"tag\\\": \\\"shadowtls-out\\\",\n          \\\"tls\\\":{\n              \\\"enabled\\\":true,\n              \\\"server_name\\\":\\\"${TLS_SERVER[14]}\\\",\n              \\\"utls\\\": {\n                \\\"enabled\\\": true,\n                \\\"fingerprint\\\": \\\"chrome\\\"\n              }\n          },\n          \\\"type\\\":\\\"shadowtls\\\",\n          \\\"version\\\":3\n      }\n  ]\n}\"\n  [ -n \"$PORT_SHADOWSOCKS\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nss://$(echo -n \"${SHADOWSOCKS_METHOD}:${UUID[15]}@${SERVER_IP_1}:$PORT_SHADOWSOCKS\" | base64 -w0)#${NODE_NAME[15]// /%20}%20${NODE_TAG[4]}\"\n\n  [ -n \"$PORT_TROJAN\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\ntrojan://$TROJAN_PASSWORD@${SERVER_IP_1}:$PORT_TROJAN?security=tls&type=tcp&headerType=none#${NODE_NAME[16]// /%20}%20${NODE_TAG[5]}\n\n# $(text 70)\"\n\n  if [ -n \"$PORT_VMESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", \\\"add\\\": \\\"${CDN[18]}\\\", \\\"port\\\": \\\"80\\\", \\\"id\\\": \\\"${UUID[18]}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"auto\\\", \\\"host\\\": \\\"$ARGO_DOMAIN\\\", \\\"path\\\": \\\"/$VMESS_WS_PATH\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\" }\" | base64 -w0)\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && V2RAYN_SUBSCRIBE+=\"\n\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[17]} && TYPE_HOST_DOMAIN=$VMESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VMESS_WS && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", \\\"add\\\": \\\"${CDN[18]}\\\", \\\"port\\\": \\\"80\\\", \\\"id\\\": \\\"${UUID[18]}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"auto\\\", \\\"host\\\": \\\"$VMESS_HOST_DOMAIN\\\", \\\"path\\\": \\\"/$VMESS_WS_PATH\\\", \\\"tls\\\": \\\"\\\", \\\"sni\\\": \\\"\\\", \\\"alpn\\\": \\\"\\\" }\" | base64 -w0)\n\n# $(text 52)\"\n    fi\n  fi\n\n  if [ -n \"$PORT_VLESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[18]}@${CDN[18]}:443?encryption=none&security=tls&sni=$ARGO_DOMAIN&type=ws&host=$ARGO_DOMAIN&path=%2F$VLESS_WS_PATH%3Fed%3D2048#${NODE_NAME[18]// /%20}%20${NODE_TAG[7]}\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && V2RAYN_SUBSCRIBE+=\"\n\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[18]} && TYPE_HOST_DOMAIN=$VLESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VLESS_WS && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[18]}@${CDN[18]}:443?encryption=none&security=tls&sni=$VLESS_HOST_DOMAIN&type=ws&host=$VLESS_HOST_DOMAIN&path=%2F$VLESS_WS_PATH%3Fed%3D2048#${NODE_NAME[18]// /%20}%20${NODE_TAG[7]}\n\n# $(text 52)\"\n    fi\n  fi\n\n  [ -n \"$PORT_H2_REALITY\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[19]}@${SERVER_IP_1}:${PORT_H2_REALITY}?encryption=none&security=reality&sni=${TLS_SERVER[19]}&fp=chrome&pbk=${REALITY_PUBLIC[19]}&type=http#${NODE_NAME[19]// /%20}%20${NODE_TAG[8]}\"\n\n  [ -n \"$PORT_GRPC_REALITY\" ] && local V2RAYN_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[20]}@${SERVER_IP_1}:${PORT_GRPC_REALITY}?encryption=none&security=reality&sni=${TLS_SERVER[20]}&fp=chrome&pbk=${REALITY_PUBLIC[20]}&type=grpc&serviceName=grpc&mode=gun#${NODE_NAME[20]// /%20}%20${NODE_TAG[9]}\"\n\n  echo -n \"$V2RAYN_SUBSCRIBE\" | sed -E '/^[ ]*#|^[ ]+|^--|^\\{|^\\}/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/v2rayn\n\n  # 生成 NekoBox 订阅文件\n  [ -n \"$PORT_XTLS_REALITY\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[11]}@${SERVER_IP_1}:${PORT_XTLS_REALITY}?security=reality&sni=${TLS_SERVER[11]}&fp=chrome&pbk=${REALITY_PUBLIC[11]}&type=tcp&encryption=none#${NODE_NAME[11]}%20${NODE_TAG[0]}\"\n\n  if [ -n \"$PORT_HYSTERIA2\" ]; then\n    [[ -n \"$PORT_HOPPING_START\" && -n \"$PORT_HOPPING_END\" ]] && NEKOBOX_HOPPING=\"mport=${PORT_HOPPING_START}-${PORT_HOPPING_END}&\"\n    local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nhy2://${UUID[12]}@${SERVER_IP_1}:${PORT_HYSTERIA2}?${NEKOBOX_HOPPING}insecure=1#${NODE_NAME[12]} ${NODE_TAG[1]}\"\n  fi\n\n  [ -n \"$PORT_TUIC\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\ntuic://${TUIC_PASSWORD}:${UUID[13]}@${SERVER_IP_1}:${PORT_TUIC}?congestion_control=$TUIC_CONGESTION_CONTROL&alpn=h3&udp_relay_mode=native&allow_insecure=1&disable_sni=1#${NODE_NAME[13]} ${NODE_TAG[2]}\"\n\n  [ -n \"$PORT_SHADOWTLS\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nnekoray://custom#$(echo -n \"{\\\"_v\\\":0,\\\"addr\\\":\\\"127.0.0.1\\\",\\\"cmd\\\":[\\\"\\\"],\\\"core\\\":\\\"internal\\\",\\\"cs\\\":\\\"{\\n    \\\\\\\"password\\\\\\\": \\\\\\\"${UUID[14]}\\\\\\\",\\n    \\\\\\\"server\\\\\\\": \\\\\\\"${SERVER_IP_1}\\\\\\\",\\n    \\\\\\\"server_port\\\\\\\": ${PORT_SHADOWTLS},\\n    \\\\\\\"tag\\\\\\\": \\\\\\\"shadowtls-out\\\\\\\",\\n    \\\\\\\"tls\\\\\\\": {\\n        \\\\\\\"enabled\\\\\\\": true,\\n        \\\\\\\"server_name\\\\\\\": \\\\\\\"${TLS_SERVER[14]}\\\\\\\"\\n    },\\n    \\\\\\\"type\\\\\\\": \\\\\\\"shadowtls\\\\\\\",\\n    \\\\\\\"version\\\\\\\": 3\\n}\\n\\\",\\\"mapping_port\\\":0,\\\"name\\\":\\\"1-tls-not-use\\\",\\\"port\\\":1080,\\\"socks_port\\\":0}\" | base64 -w0)\n\nnekoray://shadowsocks#$(echo -n \"{\\\"_v\\\":0,\\\"method\\\":\\\"$SHADOWTLS_METHOD\\\",\\\"name\\\":\\\"2-ss-not-use\\\",\\\"pass\\\":\\\"$SHADOWTLS_PASSWORD\\\",\\\"port\\\":0,\\\"stream\\\":{\\\"ed_len\\\":0,\\\"insecure\\\":false,\\\"mux_s\\\":0,\\\"net\\\":\\\"tcp\\\"},\\\"uot\\\":0}\" | base64 -w0)\"\n\n  [ -n \"$PORT_SHADOWSOCKS\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nss://$(echo -n \"${SHADOWSOCKS_METHOD}:${UUID[15]}\" | base64 -w0)@${SERVER_IP_1}:$PORT_SHADOWSOCKS#${NODE_NAME[15]} ${NODE_TAG[4]}\"\n\n  [ -n \"$PORT_TROJAN\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\ntrojan://$TROJAN_PASSWORD@${SERVER_IP_1}:$PORT_TROJAN?security=tls&allowInsecure=1&fp=random&type=tcp#${NODE_NAME[16]} ${NODE_TAG[5]}\"\n\n  if [ -n \"$PORT_VMESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{\\\"add\\\":\\\"${CDN[17]}\\\",\\\"aid\\\":\\\"0\\\",\\\"host\\\":\\\"$ARGO_DOMAIN\\\",\\\"id\\\":\\\"${UUID[17]}\\\",\\\"net\\\":\\\"ws\\\",\\\"path\\\":\\\"/$VMESS_WS_PATH\\\",\\\"port\\\":\\\"80\\\",\\\"ps\\\":\\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\",\\\"scy\\\":\\\"auto\\\",\\\"sni\\\":\\\"\\\",\\\"tls\\\":\\\"\\\",\\\"type\\\":\\\"\\\",\\\"v\\\":\\\"2\\\"}\" | base64 -w0)\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && NEKOBOX_SUBSCRIBE+=\"\n\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[17]} && TYPE_HOST_DOMAIN=$VMESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VMESS_WS && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvmess://$(echo -n \"{\\\"add\\\":\\\"${CDN[17]}\\\",\\\"aid\\\":\\\"0\\\",\\\"host\\\":\\\"$VMESS_HOST_DOMAIN\\\",\\\"id\\\":\\\"${UUID[17]}\\\",\\\"net\\\":\\\"ws\\\",\\\"path\\\":\\\"/$VMESS_WS_PATH\\\",\\\"port\\\":\\\"80\\\",\\\"ps\\\":\\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\",\\\"scy\\\":\\\"auto\\\",\\\"sni\\\":\\\"\\\",\\\"tls\\\":\\\"\\\",\\\"type\\\":\\\"\\\",\\\"v\\\":\\\"2\\\"}\" | base64 -w0)\n\n# $(text 52)\"\n    fi\n  fi\n\n  if [ -n \"$PORT_VLESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[18]}@${CDN[18]}:443?security=tls&sni=$ARGO_DOMAIN&type=ws&path=/$VLESS_WS_PATH?ed%3D2048&host=$ARGO_DOMAIN&encryption=zero#${NODE_NAME[18]}%20${NODE_TAG[7]}\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && NEKOBOX_SUBSCRIBE+=\"\n\n  # $(text 94)\n\"\n    else\n      WS_SERVER_IP_SHOW=${WS_SERVER_IP[18]} && TYPE_HOST_DOMAIN=$VLESS_HOST_DOMAIN && TYPE_PORT_WS=$PORT_VLESS_WS && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[18]}@${CDN[18]}:443?security=tls&sni=$VLESS_HOST_DOMAIN&type=ws&path=/$VLESS_WS_PATH?ed%3D2048&host=$VLESS_HOST_DOMAIN&encryption=zero#${NODE_NAME[18]}%20${NODE_TAG[7]}\n\n# $(text 52)\"\n    fi\n  fi\n\n  [ -n \"$PORT_H2_REALITY\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[19]}@${SERVER_IP_1}:${PORT_H2_REALITY}?security=reality&sni=${TLS_SERVER[19]}&alpn=h2&fp=chrome&pbk=${REALITY_PUBLIC[19]}&type=http&encryption=none#${NODE_NAME[19]}%20${NODE_TAG[8]}\"\n\n  [ -n \"$PORT_GRPC_REALITY\" ] && local NEKOBOX_SUBSCRIBE+=\"\n----------------------------\nvless://${UUID[20]}@${SERVER_IP_1}:${PORT_GRPC_REALITY}?security=reality&sni=${TLS_SERVER[20]}&fp=chrome&pbk=${REALITY_PUBLIC[20]}&type=grpc&serviceName=grpc&encryption=none#${NODE_NAME[20]}%20${NODE_TAG[9]}\"\n\n  echo -n \"$NEKOBOX_SUBSCRIBE\" | sed -E '/^[ ]*#|^--/d' | sed '/^$/d' | base64 -w0 > ${WORK_DIR}/subscribe/neko\n\n  # 生成 Sing-box 订阅文件\n  [ -n \"$PORT_XTLS_REALITY\" ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME[11]} ${NODE_TAG[0]}\\\", \\\"server\\\":\\\"${SERVER_IP}\\\", \\\"server_port\\\":${PORT_XTLS_REALITY}, \\\"uuid\\\":\\\"${UUID[11]}\\\", \\\"flow\\\":\\\"\\\", \\\"packet_encoding\\\":\\\"xudp\\\", \\\"tls\\\":{ \\\"enabled\\\":true, \\\"server_name\\\":\\\"${TLS_SERVER[11]}\\\", \\\"utls\\\":{ \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC[11]}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[11]} ${NODE_TAG[0]}\\\",\"\n\n  if [ -n \"$PORT_HYSTERIA2\" ]; then\n    local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"hysteria2\\\", \\\"tag\\\": \\\"${NODE_NAME[12]} ${NODE_TAG[1]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_HYSTERIA2},\"\n    [[ -n \"${PORT_HOPPING_START}\" && -n \"${PORT_HOPPING_END}\" ]] && local INBOUND_REPLACE+=\" \\\"server_ports\\\": [ \\\"${PORT_HOPPING_START}:${PORT_HOPPING_END}\\\" ],\"\n    local INBOUND_REPLACE+=\" \\\"up_mbps\\\": 200, \\\"down_mbps\\\": 1000, \\\"password\\\": \\\"${UUID[12]}\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"insecure\\\": true, \\\"server_name\\\": \\\"\\\", \\\"alpn\\\": [ \\\"h3\\\" ] } },\"\n    local NODE_REPLACE+=\"\\\"${NODE_NAME[12]} ${NODE_TAG[1]}\\\",\"\n  fi\n\n  [ -n \"$PORT_TUIC\" ] &&\n  local TUIC_INBOUND=\" { \\\"type\\\": \\\"tuic\\\", \\\"tag\\\": \\\"${NODE_NAME[13]} ${NODE_TAG[2]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_TUIC}, \\\"uuid\\\": \\\"${UUID[13]}\\\", \\\"password\\\": \\\"${TUIC_PASSWORD}\\\", \\\"congestion_control\\\": \\\"$TUIC_CONGESTION_CONTROL\\\", \\\"udp_relay_mode\\\": \\\"native\\\", \\\"zero_rtt_handshake\\\": false, \\\"heartbeat\\\": \\\"10s\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"insecure\\\": true, \\\"server_name\\\": \\\"\\\", \\\"alpn\\\": [ \\\"h3\\\" ] } },\" &&\n  local INBOUND_REPLACE+=\"${TUIC_INBOUND}\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[13]} ${NODE_TAG[2]}\\\",\"\n\n  [ -n \"$PORT_SHADOWTLS\" ] &&\n  local SHADOWTLS_INBOUND=\" { \\\"type\\\": \\\"shadowsocks\\\", \\\"tag\\\": \\\"${NODE_NAME[14]} ${NODE_TAG[3]}\\\", \\\"method\\\": \\\"$SHADOWTLS_METHOD\\\", \\\"password\\\": \\\"$SHADOWTLS_PASSWORD\\\", \\\"detour\\\": \\\"shadowtls-out\\\", \\\"udp_over_tcp\\\": false, \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } }, { \\\"type\\\": \\\"shadowtls\\\", \\\"tag\\\": \\\"shadowtls-out\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_SHADOWTLS}, \\\"version\\\": 3, \\\"password\\\": \\\"${UUID[14]}\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"server_name\\\": \\\"${TLS_SERVER[14]}\\\", \\\"utls\\\": { \\\"enabled\\\": true, \\\"fingerprint\\\": \\\"chrome\\\" } } },\" &&\n  local INBOUND_REPLACE+=\"${SHADOWTLS_INBOUND}\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[14]} ${NODE_TAG[3]}\\\",\"\n\n  [ -n \"$PORT_SHADOWSOCKS\" ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"shadowsocks\\\", \\\"tag\\\": \\\"${NODE_NAME[15]} ${NODE_TAG[4]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": $PORT_SHADOWSOCKS, \\\"method\\\": \\\"${SHADOWSOCKS_METHOD}\\\", \\\"password\\\": \\\"${UUID[15]}\\\", \\\"multiplex\\\": { \\\"enabled\\\": true, \\\"protocol\\\": \\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[15]} ${NODE_TAG[4]}\\\",\"\n\n  [ -n \"$PORT_TROJAN\" ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"trojan\\\", \\\"tag\\\": \\\"${NODE_NAME[16]} ${NODE_TAG[5]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": $PORT_TROJAN, \\\"password\\\": \\\"$TROJAN_PASSWORD\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"insecure\\\": true, \\\"server_name\\\":\\\"\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_connections\\\": 8, \\\"min_streams\\\": 16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[16]} ${NODE_TAG[5]}\\\",\"\n\n  if [ -n \"$PORT_VMESS_WS\" ]; then\n     if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vmess\\\", \\\"tag\\\": \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", \\\"server\\\":\\\"${CDN[17]}\\\", \\\"server_port\\\":80, \\\"uuid\\\": \\\"${UUID[17]}\\\", \\\"security\\\": \\\"auto\\\", \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/$VMESS_WS_PATH\\\", \\\"headers\\\": { \\\"Host\\\": \\\"$ARGO_DOMAIN\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && [ -z \"$PROMPT\" ] && local PROMPT=\"\n  # $(text 94)\"\n    else\n      local WS_SERVER_IP_SHOW=${WS_SERVER_IP[17]} &&\n      local TYPE_HOST_DOMAIN=$VMESS_HOST_DOMAIN &&\n      local TYPE_PORT_WS=$PORT_VMESS_WS &&\n      local PROMPT+=\"\n      # $(text 52)\" &&\n      local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vmess\\\", \\\"tag\\\": \\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\", \\\"server\\\":\\\"${CDN[17]}\\\", \\\"server_port\\\":80, \\\"uuid\\\":\\\"${UUID[17]}\\\", \\\"security\\\": \\\"auto\\\", \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/$VMESS_WS_PATH\\\", \\\"headers\\\": { \\\"Host\\\": \\\"$VMESS_HOST_DOMAIN\\\" } }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\"\n    fi\n    local NODE_REPLACE+=\"\\\"${NODE_NAME[17]} ${NODE_TAG[6]}\\\",\"\n  fi\n\n  if [ -n \"$PORT_VLESS_WS\" ]; then\n    if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]] || [[ \"$IS_ARGO\" = 'is_argo' && \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]]; then\n      local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME[18]} ${NODE_TAG[7]}\\\", \\\"server\\\":\\\"${CDN[18]}\\\", \\\"server_port\\\":443, \\\"uuid\\\": \\\"${UUID[18]}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"$ARGO_DOMAIN\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/$VLESS_WS_PATH\\\", \\\"headers\\\": { \\\"Host\\\": \\\"$ARGO_DOMAIN\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\"\n      [ \"$ARGO_TYPE\" = 'is_token_argo' ] && [ -z \"$PROMPT\" ] && local PROMPT=\"\n  # $(text 94)\"\n    else\n      local WS_SERVER_IP_SHOW=${WS_SERVER_IP[18]} &&\n      local TYPE_HOST_DOMAIN=$VLESS_HOST_DOMAIN &&\n      local TYPE_PORT_WS=$PORT_VLESS_WS &&\n      local PROMPT+=\"\n      # $(text 52)\" &&\n      local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME[18]} ${NODE_TAG[7]}\\\", \\\"server\\\":\\\"${CDN[18]}\\\", \\\"server_port\\\":443, \\\"uuid\\\": \\\"${UUID[18]}\\\",\\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"$VLESS_HOST_DOMAIN\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/$VLESS_WS_PATH\\\", \\\"headers\\\": { \\\"Host\\\": \\\"$VLESS_HOST_DOMAIN\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" }, \\\"multiplex\\\": { \\\"enabled\\\":true, \\\"protocol\\\":\\\"h2mux\\\", \\\"max_streams\\\":16, \\\"padding\\\": true, \\\"brutal\\\":{ \\\"enabled\\\":${IS_BRUTAL}, \\\"up_mbps\\\":1000, \\\"down_mbps\\\":1000 } } },\"\n    fi\n    local NODE_REPLACE+=\"\\\"${NODE_NAME[18]} ${NODE_TAG[7]}\\\",\"\n  fi\n\n  [ -n \"$PORT_H2_REALITY\" ] &&\n  local REALITY_H2_INBOUND=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME[19]} ${NODE_TAG[8]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_H2_REALITY}, \\\"uuid\\\":\\\"${UUID[19]}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${TLS_SERVER[19]}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC[19]}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"packet_encoding\\\": \\\"xudp\\\", \\\"transport\\\": { \\\"type\\\": \\\"http\\\" } },\" &&\n  local REALITY_H2_NODE=\"\\\"${NODE_NAME[19]} ${NODE_TAG[8]}\\\"\" &&\n  local NODE_REPLACE+=\"${REALITY_H2_NODE},\" &&\n  local INBOUND_REPLACE+=\" ${REALITY_H2_INBOUND}\"\n\n  [ -n \"$PORT_GRPC_REALITY\" ] &&\n  local INBOUND_REPLACE+=\" { \\\"type\\\": \\\"vless\\\", \\\"tag\\\": \\\"${NODE_NAME[20]} ${NODE_TAG[9]}\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${PORT_GRPC_REALITY}, \\\"uuid\\\":\\\"${UUID[20]}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${TLS_SERVER[20]}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC[20]}\\\", \\\"short_id\\\":\\\"\\\" } }, \\\"packet_encoding\\\": \\\"xudp\\\", \\\"transport\\\": { \\\"type\\\": \\\"grpc\\\", \\\"service_name\\\": \\\"grpc\\\" } },\" &&\n  local NODE_REPLACE+=\"\\\"${NODE_NAME[20]} ${NODE_TAG[9]}\\\",\"\n\n  # 模板1\n  local SING_BOX_JSON1=$(wget --no-check-certificate -qO- --tries=3 --timeout=2 ${GH_PROXY}${SUBSCRIBE_TEMPLATE}/sing-box1)\n  echo $SING_BOX_JSON1 | sed 's#, {[^}]\\+\"tun-in\"[^}]\\+}##' | sed \"s#\\\"<INBOUND_REPLACE>\\\",#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#${NODE_REPLACE%,}#g\" | ${WORK_DIR}/jq > ${WORK_DIR}/subscribe/sing-box-pc\n  echo $SING_BOX_JSON1 | sed 's# {[^}]\\+\"mixed\"[^}]\\+},##; s#, \"auto_detect_interface\": true##' | sed \"s#\\\"<INBOUND_REPLACE>\\\",#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#${NODE_REPLACE%,}#g\" | ${WORK_DIR}/jq > ${WORK_DIR}/subscribe/sing-box-phone\n\n  # 模板2\n  local SING_BOX_JSON2=$(wget --no-check-certificate -qO- --tries=3 --timeout=2 ${GH_PROXY}${SUBSCRIBE_TEMPLATE}/sing-box2)\n  echo $SING_BOX_JSON2 | sed \"s#\\\"<INBOUND_REPLACE>\\\",#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#${NODE_REPLACE%,}#g\" | ${WORK_DIR}/jq > ${WORK_DIR}/subscribe/sing-box2\n\n  # 生成二维码 url 文件\n  [ \"$IS_SUB\" = 'is_sub' ] && cat > ${WORK_DIR}/subscribe/qr << EOF\n$(text 81):\n$(text 82) 1:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto\n\n$(text 82) 2:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2\n\n$(text 80) QRcode:\n$(text 82) 1:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto\n\n$(text 82) 2:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2\n\n$(text 82) 1:\n$(${WORK_DIR}/qrencode \"$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto\")\n\n$(text 82) 2:\n$(${WORK_DIR}/qrencode \"$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2\")\nEOF\n\n  # 生成配置文件\n  EXPORT_LIST_FILE=\"*******************************************\n┌────────────────┐\n│                │\n│     $(warning \"V2rayN\")     │\n│                │\n└────────────────┘\n$(info \"${V2RAYN_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│  $(warning \"ShadowRocket\")  │\n│                │\n└────────────────┘\n----------------------------\n$(hint \"${SHADOWROCKET_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│   $(warning \"Clash Meta\")   │\n│                │\n└────────────────┘\n----------------------------\n\n$(info \"$(sed '1d' <<< \"${CLASH_SUBSCRIBE}\")\")\n\n*******************************************\n┌────────────────┐\n│                │\n│    $(warning \"NekoBox\")     │\n│                │\n└────────────────┘\n$(hint \"${NEKOBOX_SUBSCRIBE}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│    $(warning \"Sing-box\")    │\n│                │\n└────────────────┘\n----------------------------\n\n$(info \"$(echo \"{ \\\"outbounds\\\":[ ${INBOUND_REPLACE%,} ] }\" | ${WORK_DIR}/jq)\n\n${PROMPT}\n\n  $(text 72)\")\n\"\n\n  [ \"$IS_SUB\" = 'is_sub' ] && EXPORT_LIST_FILE+=\"\n\n*******************************************\n\n$(hint \"Index:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/\n\nQR code:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/qr\n\nV2rayN $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/v2rayn\")\n\n$(hint \"NekoBox $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/neko\")\n\n$(hint \"Clash $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/clash\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/clash2\n\nsing-box for pc $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/sing-box-pc\n\nsing-box for cellphone $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/sing-box-phone\n\nSFI / SFA / SFM $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/sing-box2\n\nShadowRocket $(text 80):\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/shadowrocket\")\n\n*******************************************\n\n$(info \" $(text 81):\n$(text 82) 1:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto\n\n$(text 82) 2:\n$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2\n\n $(text 80) QRcode:\n$(text 82) 1:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto\n\n$(text 82) 2:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=$SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2\")\n\n$(hint \"$(text 82) 1:\")\n$(${WORK_DIR}/qrencode $SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto)\n\n$(hint \"$(text 82) 2:\")\n$(${WORK_DIR}/qrencode $SUBSCRIBE_ADDRESS/${UUID_CONFIRM}/auto2)\n\"\n\n  # 生成并显示节点信息\n  echo \"$EXPORT_LIST_FILE\" > ${WORK_DIR}/list\n  cat ${WORK_DIR}/list\n\n  # 显示脚本使用情况数据\n  hint \"\\n*******************************************\\n\\n $(text 55) \\n\"\n}\n\n# 创建快捷方式\ncreate_shortcut() {\n  cat > ${WORK_DIR}/sb.sh << EOF\n#!/usr/bin/env bash\n\nbash <(wget --no-check-certificate -qO- https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) \\$1\nEOF\n  chmod +x ${WORK_DIR}/sb.sh\n  ln -sf ${WORK_DIR}/sb.sh /usr/bin/sb\n  [ -s /usr/bin/sb ] && info \"\\n $(text 71) \"\n}\n\n# 更换各协议的监听端口\nchange_start_port() {\n  OLD_PORTS=$(awk -F ':|,' '/listen_port/{print $2}' ${WORK_DIR}/conf/*)\n  OLD_START_PORT=$(awk 'NR == 1 { min = $0 } { if ($0 < min) min = $0; count++ } END {print min}' <<< \"$OLD_PORTS\")\n  OLD_CONSECUTIVE_PORTS=$(awk 'END { print NR }' <<< \"$OLD_PORTS\")\n  input_start_port $OLD_CONSECUTIVE_PORTS\n  cmd_systemctl disable sing-box\n  for ((a=0; a<$OLD_CONSECUTIVE_PORTS; a++)) do\n    [ -s ${WORK_DIR}/conf/${CONF_FILES[a]} ] && sed -i \"s/\\(.*listen_port.*:\\)$((OLD_START_PORT+a))/\\1$((START_PORT+a))/\" ${WORK_DIR}/conf/*\n  done\n  fetch_nodes_value\n  [ -n \"$PORT_NGINX\" ] && export_nginx_conf_file\n  cmd_systemctl enable sing-box\n  [ -n \"$ARGO_DOMAIN\" ] && export_argo_json_file\n  sleep 2\n  export_list\n  [ \"$(systemctl is-active sing-box)\" = 'active' ] && info \" Sing-box $(text 30) $(text 37) \" || error \" Sing-box $(text 30) $(text 38) \"\n}\n\n# 增加或删除协议\nchange_protocols() {\n  check_install\n  [ \"${STATUS[0]}\" = \"$(text 26)\" ] && error \"\\n Sing-box $(text 26) \"\n\n  # 查找已安装的协议，并遍历其在所有协议列表中的名称，获取协议名后存放在 EXISTED_PROTOCOLS; 没有的协议存放在 NOT_EXISTED_PROTOCOLS\n  INSTALLED_PROTOCOLS_LIST=$(awk -F '\"' '/\"tag\":/{print $4}' ${WORK_DIR}/conf/*_inbounds.json | grep -v 'shadowtls-in' | awk '{print $NF}')\n  for f in ${!NODE_TAG[@]}; do [[ $INSTALLED_PROTOCOLS_LIST =~ \"${NODE_TAG[f]}\" ]] && EXISTED_PROTOCOLS+=(\"${PROTOCOL_LIST[f]}\") || NOT_EXISTED_PROTOCOLS+=(\"${PROTOCOL_LIST[f]}\"); done\n\n  # 列出已安装协议\n  hint \"\\n $(text 63) (${#EXISTED_PROTOCOLS[@]})\"\n  for h in \"${!EXISTED_PROTOCOLS[@]}\"; do\n    hint \" $(asc $[h+97]). ${EXISTED_PROTOCOLS[h]} \"\n  done\n\n  # 从已安装的协议中选择需要删除的协议名，并存放在 REMOVE_PROTOCOLS，把保存的协议的协议存放在 KEEP_PROTOCOLS\n  reading \"\\n $(text 64) \" REMOVE_SELECT\n  # 统一为小写，去掉重复选项，处理不在可选列表里的选项，把特殊符号处理\n  REMOVE_SELECT=$(sed \"s/[^a-$(asc $[${#EXISTED_PROTOCOLS[@]} + 96])]//g\" <<< \"${REMOVE_SELECT,,}\" | awk 'BEGIN{RS=\"\"; FS=\"\"}{delete seen; output=\"\"; for(i=1; i<=NF; i++){ if(!seen[$i]++){ output=output $i } } print output}')\n\n  for ((j=0; j<${#REMOVE_SELECT}; j++)); do\n    REMOVE_PROTOCOLS+=(\"${EXISTED_PROTOCOLS[$[$(asc \"$(awk \"NR==$[j+1] {print}\" <<< \"$(grep -o . <<< \"$REMOVE_SELECT\")\")\") - 97]]}\")\n  done\n\n  for k in \"${EXISTED_PROTOCOLS[@]}\"; do\n    [[ ! \"${REMOVE_PROTOCOLS[@]}\" =~ \"$k\" ]] && KEEP_PROTOCOLS+=(\"$k\")\n  done\n\n  # 如有未安装的协议，列表显示并选择安装，把增加的协议存在放在 ADD_PROTOCOLS\n  if [ \"${#NOT_EXISTED_PROTOCOLS[@]}\" -gt 0 ]; then\n    hint \"\\n $(text 65) (${#NOT_EXISTED_PROTOCOLS[@]}) \"\n    for i in \"${!NOT_EXISTED_PROTOCOLS[@]}\"; do\n      hint \" $(asc $[i+97]). ${NOT_EXISTED_PROTOCOLS[i]} \"\n    done\n    reading \"\\n $(text 66) \" ADD_SELECT\n    # 统一为小写，去掉重复选项，处理不在可选列表里的选项，把特殊符号处理\n    ADD_SELECT=$(sed \"s/[^a-$(asc $[${#NOT_EXISTED_PROTOCOLS[@]} + 96])]//g\" <<< \"${ADD_SELECT,,}\" | awk 'BEGIN{RS=\"\"; FS=\"\"}{delete seen; output=\"\"; for(i=1; i<=NF; i++){ if(!seen[$i]++){ output=output $i } } print output}')\n\n    for ((l=0; l<${#ADD_SELECT}; l++)); do\n      ADD_PROTOCOLS+=(\"${NOT_EXISTED_PROTOCOLS[$[$(asc \"$(awk \"NR==$[l+1] {print}\" <<< \"$(grep -o . <<< \"$ADD_SELECT\")\")\") - 97]]}\")\n    done\n  fi\n\n  # 重新安装 = 保留 + 新增，如数量为 0 ，则触发卸载\n  REINSTALL_PROTOCOLS=(\"${KEEP_PROTOCOLS[@]}\" \"${ADD_PROTOCOLS[@]}\")\n  [ \"${#REINSTALL_PROTOCOLS[@]}\" = 0 ] && error \"\\n $(text 73) \"\n\n  # 显示重新安装的协议列表，并确认是否正确\n  hint \"\\n $(text 67) (${#REINSTALL_PROTOCOLS[@]}) \"\n  [ \"${#KEEP_PROTOCOLS[@]}\" -gt 0 ] && hint \"\\n $(text 74) (${#KEEP_PROTOCOLS[@]}) \"\n  for r in \"${!KEEP_PROTOCOLS[@]}\"; do\n    hint \" $[r+1]. ${KEEP_PROTOCOLS[r]} \"\n  done\n\n  [ \"${#ADD_PROTOCOLS[@]}\" -gt 0 ] && hint \"\\n $(text 75) (${#ADD_PROTOCOLS[@]}) \"\n  for r in \"${!ADD_PROTOCOLS[@]}\"; do\n    hint \" $[r+1]. ${ADD_PROTOCOLS[r]} \"\n  done\n\n  reading \"\\n $(text 68) \" CONFIRM\n  [ \"${CONFIRM,,}\" = 'n' ] && exit 0\n\n  # 把确认安装的协议遍历所有协议列表的数组，找出其下标并变为英文小写的形式\n  for m in \"${!REINSTALL_PROTOCOLS[@]}\"; do\n    for n in \"${!PROTOCOL_LIST[@]}\"; do\n      if [ \"${REINSTALL_PROTOCOLS[m]}\" = \"${PROTOCOL_LIST[n]}\" ]; then\n        INSTALL_PROTOCOLS+=($(asc $[n+98]))\n      fi\n    done\n  done\n\n  # 获取各节点信息\n  fetch_nodes_value\n\n  # 用于新节点的配置信息\n  UUID_CONFIRM=$(awk '{print $1}' <<< \"${UUID[@]} $TROJAN_PASSWORD\")\n  for v in \"${NODE_NAME[@]}\"; do\n    [ -n \"$v\" ] && NODE_NAME_CONFIRM=\"$v\" && break\n  done\n  [ \"${#WS_SERVER_IP[@]}\" -gt 0 ] && WS_SERVER_IP_SHOW=$(awk '{print $1}' <<< \"${WS_SERVER_IP[@]}\") && CDN=$(awk '{print $1}' <<< \"${CDN[@]}\")\n\n  # 寻找待删除协议的 inbound 文件名\n  for o in \"${REMOVE_PROTOCOLS[@]}\"; do\n    for s in ${!PROTOCOL_LIST[@]}; do\n      [ \"$o\" = \"${PROTOCOL_LIST[s]}\" ] && REMOVE_FILE+=(\"${NODE_TAG[s]}_inbounds.json\")\n    done\n  done\n\n  # 如有需要，删除 hysteria2 跳跃端口，待后面添加回来\n  [ \"$IS_HOPPING\" = 'is_hopping' ] && del_port_hopping_nat\n\n  # 删除不需要的协议配置文件\n  [ \"${#REMOVE_FILE[@]}\" -gt 0 ] && for t in \"${REMOVE_FILE[@]}\"; do\n    rm -f ${WORK_DIR}/conf/*${t}\n  done\n\n  # 寻找已存在协议中原有的端口号\n  for p in \"${KEEP_PROTOCOLS[@]}\"; do\n    for u in \"${!PROTOCOL_LIST[@]}\"; do\n      [ \"$p\" = \"${PROTOCOL_LIST[u]}\" ] && KEEP_PORTS+=(\"$(awk -F '[:,]' '/listen_port/{print $2}' ${WORK_DIR}/conf/*${NODE_TAG[u]}_inbounds.json)\")\n    done\n  done\n\n  # 根据全部协议，找到空余的端口号\n  for q in \"${!REINSTALL_PROTOCOLS[@]}\"; do\n    [[ ! ${KEEP_PORTS[@]} =~ $[START_PORT + q] ]] && ADD_PORTS+=($[START_PORT + q])\n  done\n\n  # 所有协议的端口号\n  REINSTALL_PORTS=(${KEEP_PORTS[@]} ${ADD_PORTS[@]})\n\n  CHECK_PROTOCOLS=b\n  # 获取 Reality 端口\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_XTLS_REALITY=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_XTLS_REALITY\n  fi\n\n  # 获取 Hysteria2 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_HYSTERIA2=${REINSTALL_PORTS[POSITION]}\n    [ -z \"${PORT_HOPPING_START}${PORT_HOPPING_END}\" ] && input_hopping_port\n  else\n    unset PORT_HYSTERIA2\n  fi\n\n  # 获取 Tuic V5 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_TUIC=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_TUIC\n  fi\n\n  # 获取 ShadowTLS 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_SHADOWTLS=${REINSTALL_PORTS[POSITION]}\n  fi\n\n  # 获取 Shadowsocks 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_SHADOWSOCKS=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_SHADOWSOCKS\n  fi\n\n  # 获取 Trojan 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_TROJAN=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_TROJAN\n  fi\n\n  # 获取 ws 的 argo 或者 origin 状态\n  if [ -s /etc/systemd/system/argo.service ]; then\n    local ARGO_ORIGIN_RULES_STATUS=is_argo\n    ARGO_RUNS=$(sed -n \"s/^ExecStart=\\(.*\\)/\\1/gp\" /etc/systemd/system/argo.service)\n  elif ls ${WORK_DIR}/conf/*-ws*inbounds.json >/dev/null 2>&1; then\n    local ARGO_ORIGIN_RULES_STATUS=is_origin\n  else\n    local ARGO_ORIGIN_RULES_STATUS=no_argo_no_origin\n  fi\n\n  # 获取 vmess + ws 配置信息\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    local DOMAIN_ERROR_TIME=5\n    if [[ \"$ARGO_READY\" != 'argo_ready' || \"$ORIGIN_READY\" != 'origin_ready' ]]; then\n      if [ \"$ARGO_ORIGIN_RULES_STATUS\" = 'is_origin' ]; then\n        until [ -n \"$VMESS_HOST_DOMAIN\" ]; do\n          (( DOMAIN_ERROR_TIME-- )) || true\n          [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VMESS && reading \"\\n $(text 50) \" VMESS_HOST_DOMAIN || error \"\\n $(text 3) \\n\"\n        done\n      elif [ \"$ARGO_ORIGIN_RULES_STATUS\" = 'no_argo_no_origin' ]; then\n        [ -z \"$ARGO_OR_ORIGIN_RULES\" ] && hint \"\\n $(text 57) \" && reading \"\\n $(text 24) \" ARGO_OR_ORIGIN_RULES\n        [ \"$ARGO_OR_ORIGIN_RULES\" != '2' ] && ARGO_OR_ORIGIN_RULES=1 && IS_ARGO=is_argo || IS_ARGO=no_argo\n        if [ \"$IS_ARGO\" = 'is_argo' ]; then\n          # 如果原来没有 nginx 配置，需要获取 nginx 端口信息\n          [ -z \"$PORT_NGINX\"  ] && input_nginx_port\n          until [ -n \"$ARGO_RUNS\" ]; do\n            input_argo_auth is_add_protocols\n            [ -n \"$ARGO_RUNS\" ] && local ARGO_READY=argo_ready && break\n          done\n        else\n          until [ -n \"$VMESS_HOST_DOMAIN\" ]; do\n            (( DOMAIN_ERROR_TIME-- )) || true\n            [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VMESS && reading \"\\n $(text 50) \" VMESS_HOST_DOMAIN || error \"\\n $(text 3) \\n\"\n          done\n          local ORIGIN_READY=origin_ready\n        fi\n      fi\n    fi\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_VMESS_WS=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_VMESS_WS\n  fi\n\n  # 获取 vless + ws + tls 配置信息\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    local DOMAIN_ERROR_TIME=5\n    if [[ \"$ARGO_READY\" != 'argo_ready' || \"$ORIGIN_READY\" != 'origin_ready' ]]; then\n      if [ \"$ARGO_ORIGIN_RULES_STATUS\" = 'is_origin' ]; then\n        until [ -n \"$VLESS_HOST_DOMAIN\" ]; do\n          (( DOMAIN_ERROR_TIME-- )) || true\n          [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VLESS && reading \"\\n $(text 50) \" VLESS_HOST_DOMAIN || error \"\\n $(text   3) \\n\"\n        done\n      elif [ \"$ARGO_ORIGIN_RULES_STATUS\" = 'no_argo_no_origin' ]; then\n        [ -z \"$ARGO_OR_ORIGIN_RULES\" ] && hint \"\\n $(text 57) \" && reading \"\\n $(text 24) \" ARGO_OR_ORIGIN_RULES\n        [ \"$ARGO_OR_ORIGIN_RULES\" != '2' ] && ARGO_OR_ORIGIN_RULES=1 && IS_ARGO=is_argo || IS_ARGO=no_argo\n        if [ \"$IS_ARGO\" = 'is_argo' ]; then\n           # 如果原来没有 nginx 配置，需要获取 nginx 端口信息\n          [ -z \"$PORT_NGINX\"  ] && input_nginx_port\n          until [ -n \"$ARGO_RUNS\" ]; do\n            [ \"$ARGO_READY\" != 'argo_ready' ] && input_argo_auth is_add_protocols\n            [ -n \"$ARGO_RUNS\" ] && local ARGO_READY=argo_ready && break\n          done\n        else\n          until [ -n \"$VLESS_HOST_DOMAIN\" ]; do\n            (( DOMAIN_ERROR_TIME-- )) || true\n            [ \"$DOMAIN_ERROR_TIME\" != 0 ] && TYPE=VLESS && reading \"\\n $(text 50) \" VLESS_HOST_DOMAIN || error \"\\n $(text   3) \\n\"\n          done\n          local ORIGIN_READY=origin_ready\n        fi\n      fi\n    fi\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_VLESS_WS=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_VLESS_WS\n  fi\n\n  # 如之前没有 ws，现新增的 ws，则输入 cdn\n  [[ \"${#CDN[@]}\" = '0' && ( \"$ARGO_READY\" = 'argo_ready' || \"$ORIGIN_READY\" = 'origin_ready' ) ]] && input_cdn\n\n  # 获取 H2 + Reality 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_H2_REALITY=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_H2_REALITY\n  fi\n\n  # 获取 gRPC + Reality 端口\n  CHECK_PROTOCOLS=$(asc \"$CHECK_PROTOCOLS\" ++)\n  if [[ \"${INSTALL_PROTOCOLS[@]}\" =~ \"$CHECK_PROTOCOLS\" ]]; then\n    POSITION=$(awk -v target=$CHECK_PROTOCOLS '{ for(i=1; i<=NF; i++) if($i == target) { print i-1; break } }' <<< \"${INSTALL_PROTOCOLS[*]}\")\n    PORT_GRPC_REALITY=${REINSTALL_PORTS[POSITION]}\n  else\n    unset PORT_GRPC_REALITY\n  fi\n\n  # 停止 sing-box 服务\n  cmd_systemctl disable sing-box\n\n  # 生成 Nginx 配置文件\n  [ -n \"$PORT_NGINX\" ] && export_nginx_conf_file\n\n  # 生成各协议的 json 文件\n  sing-box_json change\n\n  # 如有需要，安装和删除 Argo 服务\n  if ls ${WORK_DIR}/conf/*-ws*inbounds.json >/dev/null 2>&1; then\n    if [[ \"$ARGO_OR_ORIGIN_RULES\" != '2' && \"$ARGO_ORIGIN_RULES_STATUS\" != 'is_origin' && ! -s /etc/systemd/system/argo.service ]]; then\n      argo_systemd\n      cmd_systemctl enable argo >/dev/null 2>&1\n    fi\n  elif [ -s /etc/systemd/system/argo.service ]; then\n    cmd_systemctl disable argo >/dev/null 2>&1\n    rm -f /etc/systemd/system/argo.service\n    [ -s ${WORK_DIR}/tunnel.json ] && rm -f ${WORK_DIR}/tunnel.*\n  fi\n\n  # 如有需要，删除 nginx 配置文件\n  ! ls /etc/systemd/system/argo.service >/dev/null 2>&1 && [[ -s ${WORK_DIR}/nginx.conf && \"$IS_SUB\" = 'no_sub' ]] && IS_ARGO=no_argo && rm -f ${WORK_DIR}/nginx.conf\n\n  # 运行 sing-box\n  cmd_systemctl enable sing-box\n\n  # 再次检测状态，运行 sing-box\n  check_install\n\n  check_sing-box_status\n\n  export_list\n}\n\n# 卸载 sing-box 全家桶\nuninstall() {\n  if [ -d ${WORK_DIR} ]; then\n    [ -s /etc/systemd/system/argo.service ] && ( cmd_systemctl disable argo 2>/dev/null; rm -f /etc/systemd/system/argo.service )\n    if [ \"$SYSTEM\" = 'Alpine' ]; then\n      cmd_systemctl disable sing-box 2>/dev/null\n    else\n      cmd_systemctl disable sing-box 2>/dev/null\n    fi\n    sleep 1\n    [[ -s ${WORK_DIR}/nginx.conf && $(ps -ef | grep 'nginx' | wc -l) -le 1 ]] && reading \"\\n $(text 83) \" REMOVE_NGINX\n    [ \"${REMOVE_NGINX,,}\" = 'y' ] && ${PACKAGE_UNINSTALL[int]} nginx >/dev/null 2>&1\n    [ \"$IS_HOPPING\" = 'is_hopping' ] && del_port_hopping_nat\n    rm -rf ${WORK_DIR} $TEMP_DIR /etc/systemd/system/sing-box.service /usr/bin/sb\n    info \"\\n $(text 16) \\n\"\n  else\n    error \"\\n $(text 15) \\n\"\n  fi\n\n  # 如果 Alpine 系统，删除开机自启动和python3版systemd\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    rm -f /etc/local.d/{sing-box,argo}.start\n    rc-update add local >/dev/null 2>&1\n    ! ls /etc/systemd/system/*.service >/dev/null 2>&1 && rm -f /bin/systemctl\n  fi\n}\n\n# Sing-box 的最新版本\nversion() {\n  local VERSION_LATEST=$(wget --no-check-certificate -qO- ${GH_PROXY}https://api.github.com/repos/SagerNet/sing-box/releases | awk -F '[\"v-]' '/tag_name/{print $5}' | sort -Vr | sed -n '1p')\n  local ONLINE=$(wget --no-check-certificate -qO- ${GH_PROXY}https://api.github.com/repos/SagerNet/sing-box/releases | awk -F '[\"v]' -v var=\"tag_name.*$VERSION_LATEST\" '$0 ~ var {print $5; exit}')\n  local ONLINE='1.11.0-beta.15'\n  local LOCAL=$(${WORK_DIR}/sing-box version | awk '/version/{print $NF}')\n  info \"\\n $(text 40) \"\n  [[ -n \"$ONLINE\" && \"$ONLINE\" != \"$LOCAL\" ]] && reading \"\\n $(text 9) \" UPDATE || info \" $(text 41) \"\n\n  if [ \"${UPDATE,,}\" = 'y' ]; then\n    check_system_info\n    wget --no-check-certificate --continue ${GH_PROXY}https://github.com/SagerNet/sing-box/releases/download/v$ONLINE/sing-box-$ONLINE-linux-$SING_BOX_ARCH.tar.gz -qO- | tar xz -C $TEMP_DIR sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box\n\n    if [ -s $TEMP_DIR/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box ]; then\n      cmd_systemctl disable sing-box\n      chmod +x $TEMP_DIR/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box && mv $TEMP_DIR/sing-box-$ONLINE-linux-$SING_BOX_ARCH/sing-box ${WORK_DIR}/sing-box\n      cmd_systemctl enable sing-box && sleep 2 && [ \"$(systemctl is-active sing-box)\" = 'active' ] && info \"\\n Sing-box $(text 28) $(text 37) \\n\" || error \"\\n Sing-box $(text 28) $(text 38) \\n\"\n    else\n      error \"\\n $(text 42) \"\n    fi\n  fi\n}\n\n# 判断当前 Sing-box 的运行状态，并对应的给菜单和动作赋值\nmenu_setting() {\n  if [[ \"${STATUS[0]}\" =~ $(text 27)|$(text 28) ]]; then\n    # 查 argo 进程号，运行时长和内存占用\n    if [[ \"${STATUS[1]}\" =~ $(text 27)|$(text 28) ]]; then\n      ARGO_VERSION=$(${WORK_DIR}/cloudflared -v | awk '{print $3}' | sed \"s@^@Version: &@g\")\n      if [ \"${STATUS[1]}\" = \"$(text 28)\" ]; then\n        [ \"$SYSTEM\" = 'Alpine' ] && ARGO_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/cloudflared\" {print $1}') || ARGO_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/cloudflared\" {print $2}')\n        [[ \"$ARGO_PID\" =~ ^[0-9]+$ ]] && ARGO_MEMORY_USAGE=\"$(text 58): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$ARGO_PID/status) MB\"\n      fi\n    fi\n\n    # 查 sing-box 进程号，运行时长和内存占用\n    if [ \"${STATUS[0]}\" = \"$(text 28)\" ]; then\n      [ \"$SYSTEM\" = 'Alpine' ] && SING_BOX_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/sing-box\" {print $1}') || SING_BOX_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/sing-box\" {print $2}')\n      [[ \"$SING_BOX_PID\" =~ ^[0-9]+$ ]] && SING_BOX_MEMORY_USAGE=\"$(text 58): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$SING_BOX_PID/status) MB\"\n    fi\n\n    # 查 Nginx 版本号\n    [ -x \"$(type -p nginx)\" ] && NGINX_VERSION=$(nginx -v 2>&1 | sed \"s#.*/#Version: #\")\n    [ \"$SYSTEM\" = 'Alpine' ] && NGINX_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/nginx.conf\" {print $1; exit}') || NGINX_PID=$(ps -ef | awk -v WORK_DIR=\"${WORK_DIR}\" '$0 ~ WORK_DIR\"/nginx.conf\" {print $2; exit}')\n    [[ \"$NGINX_PID\" =~ ^[0-9]+$ ]] && NGINX_MEMORY_USAGE=\"$(text 58): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$NGINX_PID/status) MB\"\n\n    NOW_PORTS=$(awk -F ':|,' '/listen_port/{print $2}' ${WORK_DIR}/conf/*)\n    NOW_START_PORT=$(awk 'NR == 1 { min = $0 } { if ($0 < min) min = $0; count++ } END {print min}' <<< \"$NOW_PORTS\")\n    NOW_CONSECUTIVE_PORTS=$(awk 'END { print NR }' <<< \"$NOW_PORTS\")\n    [ -s ${WORK_DIR}/sing-box ] && SING_BOX_VERSION=\"Version: $(${WORK_DIR}/sing-box version | awk '/version/{print $NF}')\"\n    [ -s ${WORK_DIR}/conf/02_route.json ] && { grep -q 'direct' ${WORK_DIR}/conf/02_route.json && RETURN_STATUS=$(text 27) || RETURN_STATUS=$(text 28); }\n    OPTION[1]=\"1 .  $(text 29)\"\n    [ \"${STATUS[0]}\" = \"$(text 28)\" ] && OPTION[2]=\"2 .  $(text 27) Sing-box (sb -s)\" || OPTION[2]=\"2 .  $(text 28) Sing-box (sb -s)\"\n    [ \"${STATUS[1]}\" = \"$(text 28)\" ] && OPTION[3]=\"3 .  $(text 27) Argo (sb -a)\" || OPTION[3]=\"3 .  $(text 28) Argo (sb -a)\"\n    OPTION[4]=\"4 .  $(text 92)\"\n    OPTION[5]=\"5 .  $(text 30)\"\n    OPTION[6]=\"6 .  $(text 31)\"\n    OPTION[7]=\"7 .  $(text 32)\"\n    OPTION[8]=\"8 .  $(text 62)\"\n    OPTION[9]=\"9 .  $(text 33)\"\n    OPTION[10]=\"10.  $(text 59)\"\n    OPTION[11]=\"11.  $(text 69)\"\n    OPTION[12]=\"12.  $(text 76)\"\n\n    ACTION[1]() { export_list; exit 0; }\n    [ \"${STATUS[0]}\" = \"$(text 28)\" ] && ACTION[2]() { cmd_systemctl disable sing-box; [[ \"$(systemctl is-active sing-box)\" =~ 'inactive'|'unknown' ]] && info \" Sing-box $(text 27) $(text 37)\" || error \" Sing-box $(text 27) $(text 38) \"; } || ACTION[2]() { cmd_systemctl enable sing-box && [ \"$(systemctl is-active sing-box)\" = 'active' ] && info \" Sing-box $(text 28) $(text 37)\" || error \" Sing-box $(text 28) $(text 38) \"; }\n    [ \"${STATUS[1]}\" = \"$(text 28)\" ] && ACTION[3]() { cmd_systemctl disable argo; [[ \"$(systemctl is-active argo)\" =~ 'inactive'|'unknown' ]] && info \" Argo $(text 27) $(text 37)\" || error \" Argo $(text 27) $(text 38) \"; } || ACTION[3]() { cmd_systemctl enable argo && sleep 2 && [ \"$(systemctl is-active argo)\" = 'active' ] && info \" Argo $(text 28) $(text 37)\" && ( grep -q '\\--url' /etc/systemd/system/argo.service && fetch_quicktunnel_domain && export_list ) || error \" Argo $(text 28) $(text 38) \"; }\n    ACTION[4]() { change_argo; exit; }\n    ACTION[5]() { change_start_port; exit; }\n    ACTION[6]() { version; exit; }\n    ACTION[7]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh); exit; }\n    ACTION[8]() { change_protocols; exit; }\n    ACTION[9]() { uninstall; exit; }\n    ACTION[10]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh) -$L; exit; }\n    ACTION[11]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sba/main/sba.sh) -$L; exit; }\n    ACTION[12]() { bash <(wget --no-check-certificate -qO- https://tcp.hy2.sh/); exit; }\n  else\n    OPTION[1]=\"1.  $(text 34) + Argo + $(text 80) $(text 89)\"\n    OPTION[2]=\"2.  $(text 34) + Argo $(text 89)\"\n    OPTION[3]=\"3.  $(text 34) + $(text 80) $(text 89)\"\n    OPTION[4]=\"4.  $(text 34)\"\n    OPTION[5]=\"5.  $(text 32)\"\n    OPTION[6]=\"6.  $(text 59)\"\n    OPTION[7]=\"7.  $(text 69)\"\n    OPTION[8]=\"8.  $(text 76)\"\n\n    ACTION[1]() { IS_SUB=is_sub; IS_ARGO=is_argo; install_sing-box; export_list install; create_shortcut; exit; }\n    ACTION[2]() { IS_SUB=no_sub; IS_ARGO=is_argo; install_sing-box; export_list install; create_shortcut; exit; }\n    ACTION[3]() { IS_SUB=is_sub; IS_ARGO=no_argo; install_sing-box; export_list install; create_shortcut; exit; }\n    ACTION[4]() { install_sing-box; export_list install; create_shortcut; exit; }\n    ACTION[5]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh); exit; }\n    ACTION[6]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh) -$L; exit; }\n    ACTION[7]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sba/main/sba.sh) -$L; exit; }\n    ACTION[8]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://tcp.hy2.sh/); exit; }\n  fi\n\n  [ \"${#OPTION[@]}\" -ge '10' ] && OPTION[0]=\"0 .  $(text 35)\" || OPTION[0]=\"0.  $(text 35)\"\n  ACTION[0]() { exit; }\n}\n\nmenu() {\n  clear\n  echo -e \"======================================================================================================================\\n\"\n  info \" $(text 17): $VERSION\\n $(text 18): $(text 1)\\n $(text 19):\\n\\t $(text 20): $SYS\\n\\t $(text 21): $(uname -r)\\n\\t $(text 22): $SING_BOX_ARCH\\n\\t $(text 23): $VIRT \"\n  info \"\\t IPv4: $WAN4 $WARPSTATUS4 $COUNTRY4  $ASNORG4 \"\n  info \"\\t IPv6: $WAN6 $WARPSTATUS6 $COUNTRY6  $ASNORG6 \"\n  info \"\\t Sing-box: ${STATUS[0]}\\t $SING_BOX_VERSION\\t\\t $SING_BOX_MEMORY_USAGE\\n\\t Argo: ${STATUS[1]}\\t $ARGO_VERSION\\t\\t $ARGO_MEMORY_USAGE\\n \\t Nginx: ${STATUS[0]}\\t $NGINX_VERSION\\t $NGINX_MEMORY_USAGE \"\n  echo -e \"\\n======================================================================================================================\\n\"\n  for ((b=1;b<=${#OPTION[*]};b++)); do [ \"$b\" = \"${#OPTION[*]}\" ] && hint \" ${OPTION[0]} \" || hint \" ${OPTION[b]} \"; done\n  reading \"\\n $(text 24) \" CHOOSE\n\n  # 输入必须是数字且少于等于最大可选项\n  if grep -qE \"^[0-9]{1,2}$\" <<< \"$CHOOSE\" && [ \"$CHOOSE\" -lt \"${#OPTION[*]}\" ]; then\n    ACTION[$CHOOSE]\n  else\n    warning \" $(text 36) [0-$((${#OPTION[*]}-1))] \" && sleep 1 && menu\n  fi\n}\n\ncheck_cdn\nstatistics_of_run-times\n\n# 传参\n[[ \"${*^^}\" =~ '-E' ]] && L=E\n[[ \"${*^^}\" =~ '-C'|'-B' ]] && L=C\n\nselect_language\ncheck_system_info\ncheck_brutal\n\n# 可以是 Key Value 或者 Key=Value 的形式。传参时，\n# 传参处理1: 把所有的 = 变为空格，但保留 =\" ，因为 Json TunnelSecret 是 =\" 结尾的，如 {\"AccountTag\":\"9cc9e3e4d8f29d2a02e297f14f20513a\",\"TunnelSecret\":\"6AYfKBOoNlPiTAuWg64ZwujsNuERpWLm6pPJ2qpN8PM=\",\"TunnelID\":\"1ac55430-f4dc-47d5-a850-bdce824c4101\"}\n# 传参处理2: 去掉 sudo cloudflared service install ，以方便用户输入 Token 并能正确读取真正的以 ey 开头的 Value\nALL_PARAMETER=($(sed -E 's/(-c|-e|-C|-E) //; s/=([^\"])/ \\1/g; s/sudo cloudflared service install //' <<< $*))\n[[ \"${#ALL_PARAMETER[@]}\" > 13 && \"${ALL_PARAMETER[@]^^}\" == *\"--LANGUAGE\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--CHOOSE_PROTOCOLS\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--START_PORT\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--PORT_NGINX\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--SERVER_IP\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--UUID\"* && \"${ALL_PARAMETER[@]^^}\" == *\"--NODE_NAME\"* ]] && NONINTERACTIVE_INSTALL=noninteractive_install\n\n# 传参处理，无交互快速安装参数\nfor z in ${!ALL_PARAMETER[@]}; do\n  case \"${ALL_PARAMETER[z]^^}\" in\n    -P )\n      ((z++)); START_PORT=${ALL_PARAMETER[z]}; check_install; [ \"${STATUS[0]}\" = \"$(text 26)\" ] && error \"\\n Sing-box $(text 26) \"; change_start_port; exit 0\n      ;;\n    -S )\n      check_install\n      if [ \"${STATUS[0]}\" = \"$(text 26)\" ];then\n        error \"\\n Sing-box $(text 26) \"\n      elif [ \"${STATUS[0]}\" = \"$(text 28)\" ]; then\n        cmd_systemctl disable sing-box\n        [[ \"$(systemctl is-active sing-box)\" =~ 'inactive'|'unknown' ]] && info \"\\n Sing-box $(text 27) $(text 37)\"\n      elif [ \"${STATUS[0]}\" = \"$(text 27)\" ]; then\n        cmd_systemctl enable sing-box\n        [ \"$(systemctl is-active sing-box)\" = 'active' ] && info \"\\n Sing-box $(text 28) $(text 37)\"\n      fi\n      exit 0\n      ;;\n    -A )\n      check_install\n      if [ \"${STATUS[1]}\" = \"$(text 26)\" ]; then\n        error \"\\n Argo $(text 26) \"\n      elif [ \"${STATUS[1]}\" = \"$(text 28)\" ]; then\n        cmd_systemctl disable argo\n        [[ \"$(systemctl is-active argo)\" =~ 'inactive'|'unknown' ]] && info \"\\n Argo $(text 27) $(text 37)\"\n      elif [ \"${STATUS[1]}\" = \"$(text 27)\" ]; then\n        cmd_systemctl enable argo\n        sleep 2\n        if [ \"$(systemctl is-active argo)\" = 'active' ]; then\n          info \"\\n Argo $(text 28) $(text 37)\"\n          grep -q '\\--url' /etc/systemd/system/argo.service && fetch_quicktunnel_domain && export_list\n        fi\n      fi\n      exit 0\n      ;;\n    -T )\n      change_argo; exit 0\n      ;;\n    -U )\n      check_install; uninstall; exit 0\n      ;;\n    -N )\n      [ ! -s ${WORK_DIR}/list ] && error \" Sing-box $(text 26) \"; export_list; exit 0\n      ;;\n    -V )\n      check_arch; version; exit 0\n      ;;\n    -B )\n      bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh); exit\n      ;;\n    -R )\n      change_protocols; exit 0\n      ;;\n    -F )\n      ((z++)); VARIABLE_FILE=${ALL_PARAMETER[z]}; . $VARIABLE_FILE; NONINTERACTIVE_INSTALL=noninteractive_install\n      ;;\n    --LANGUAGE )\n      ((z++)); [[ \"${ALL_PARAMETER[z]^^}\" =~ ^C ]] && L=C || L=E\n      ;;\n    --CHOOSE_PROTOCOLS )\n      ((z++)); CHOOSE_PROTOCOLS=${ALL_PARAMETER[z]}\n      ;;\n    --START_PORT )\n      ((z++)); START_PORT=${ALL_PARAMETER[z]}\n      ;;\n    --PORT_NGINX )\n      ((z++)); PORT_NGINX=${ALL_PARAMETER[z]}\n      ;;\n    --SERVER_IP )\n      ((z++)); SERVER_IP=${ALL_PARAMETER[z]}\n      ;;\n    --VMESS_HOST_DOMAIN )\n      ((z++)); VMESS_HOST_DOMAIN=${ALL_PARAMETER[z]}\n      ;;\n    --VLESS_HOST_DOMAIN )\n      ((z++)); VLESS_HOST_DOMAIN=${ALL_PARAMETER[z]}\n      ;;\n    --CDN )\n      ((z++)); CDN=${ALL_PARAMETER[z]}\n      ;;\n    --UUID_CONFIRM )\n      ((z++)); UUID_CONFIRM=${ALL_PARAMETER[z]}\n      ;;\n    --NODE_NAME_CONFIRM )\n      ((z++))\n      for ((z=$z; z<${#ALL_PARAMETER[@]}; z++)); do\n        [[ ! \"${ALL_PARAMETER[z]}\" =~ ^- ]] && NODE_NAME_ARRAY+=(${ALL_PARAMETER[z]}) || break\n      done\n      NODE_NAME_CONFIRM=${NODE_NAME_ARRAY[@]}\n      ;;\n    --SUBSCRIBE )\n      ((z++)); [ \"${ALL_PARAMETER[z]}\" = 'true' ] && IS_SUB=is_sub\n      ;;\n    --ARGO )\n      ((z++)); [ \"${ALL_PARAMETER[z]}\" = 'true' ] && IS_ARGO=is_argo\n      ;;\n    --ARGO_DOMAIN )\n      ((z++)); ARGO_DOMAIN=${ALL_PARAMETER[z]}\n      ;;\n    --ARGO_AUTH )\n      ((z++)); ARGO_AUTH=${ALL_PARAMETER[z]}\n      ;;\n    --PORT_HOPPING_RANGE )\n      ((z++)); [[ \"${ALL_PARAMETER[z]//:/-}\" =~ ^[1-6][0-9]{4}-[1-6][0-9]{4}$ ]] && PORT_HOPPING_RANGE=${ALL_PARAMETER[z]//-/:} && PORT_HOPPING_START=${ALL_PARAMETER[z]%:*} && PORT_HOPPING_END=${ALL_PARAMETER[z]#*:}\n      [[ \"$PORT_HOPPING_START\" < \"$PORT_HOPPING_END\" && \"$PORT_HOPPING_START\" -ge \"$MIN_HOPPING_PORT\" && \"$PORT_HOPPING_END\" -le \"$MAX_HOPPING_PORT\" ]] && IS_HOPPING=is_hopping\n      ;;\n  esac\ndone\n\ncheck_root\ncheck_arch\ncheck_system_info\ncheck_dependencies\ncheck_system_ip\ncheck_install\nif [ \"$NONINTERACTIVE_INSTALL\" = 'noninteractive_install' ]; then\n  # 预设默认值\n  IS_SUB=${IS_SUB:-'no_sub'}\n  IS_ARGO=${IS_ARGO:-'no_argo'}\n  IS_HOPPING=${IS_HOPPING:-'no_hoppinng'}\n\n  install_sing-box\n  export_list install\n  create_shortcut\nelse\n  menu_setting\n  menu\nfi"
        }
      ]
    }
  ]
}