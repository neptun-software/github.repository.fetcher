{
  "metadata": {
    "timestamp": 1736568492984,
    "page": 474,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "minamarkham/formation",
      "stars": 1772,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2018 Mina Markham\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.615234375,
          "content": "# üêù Formation <a href=\"https://www.patreon.com/minamarkham\"><img src=\"https://c5.patreon.com/external/logo/become_a_patron_button@2x.png\" width=\"100\"></a>\n\n![Let's get in formation](assets/formation.gif)\n> Formation is a shell script to set up a macOS laptop for design and development.\n\nIt can be run multiple times on the same machine safely. It installs, upgrades, or skips packages based on what is already installed on the machine.\n\n## Install\n\nDownload the script:\n\n```sh\ngit clone git@github.com/minamarkham/formation.git && cd formation\n```\n\nReview the script (please don't run scripts you don't understand):\n\n```sh\nless slay\n```\n\nSlay:\n\n```sh\ncd formation\n./slay 2>&1 | tee ~/slay.log\n```\nJust follow the prompts and you‚Äôll be fine. üëå\n\n:warning: Warning: I advise against running [this script](slay) unless you understand what it‚Äôs doing to your computer.\n\nI created this based on my own preferences; your mileage may vary.\n\nOnce the script is done, quit and relaunch Terminal.\n\nIt is highly recommended to run the script regularly to keep your computer up to date.\n\nYour last Formation run will be saved to `~/slay.log`. To review it, run `less ~/slay.log`.\n\nThat's it! :sparkles:\n\n## What it sets up\nThe setup process will install:\n\n<details>\n<summary>Basic tools:</summary>\n\n* [XCode Command Line Tools](https://developer.apple.com/xcode/downloads/) for developer essentials.\n* [Bash-it](https://github.com/Bash-it/bash-it/), for a more powerful bash.\n* [Git](https://git-scm.com/) for version control\n* [Homebrew](http://brew.sh/) for managing operating system libraries.\n</details>\n\n<details>\n<summary>Package Managers:</summary>\n\n* [NVM](https://github.com/creationix/nvm/) for managing and installing multiple versions of [Node.js](http://nodejs.org/) and [npm](https://www.npmjs.org/)\n* [Rbenv](https://github.com/sstephenson/rbenv) for managing versions of Ruby\n* [Yarn](https://yarnpkg.com/en/) for managing JavaScript packages\n</details>\n\n<details>\n<summary>CLI Tools & Utilities:</summary>\n\n* [asciinema](https://asciinema.org/) for recording terminal sessions\n* [Gulp](https://gulpjs.com/) the streaming build system\n* [Hotel](https://github.com/typicode/hotel), a simple process manager for developers\n* [Hub](http://hub.github.com/) for interacting with the GitHub API\n* [hugo](https://gohugo.io/), an open-source static site generator\n* [ImageMagick](http://www.imagemagick.org/) to create, edit, compose, or convert bitmap images\n* [mas](https://github.com/mas-cli/mas) Mac App Store command line interface\n* [Tig](https://github.com/jonas/tig) text-mode interface for git\n* [Vagrant](https://www.vagrantup.com/) for development environments\n</details>\n\n### Apps\n\n<details>\n<summary>Productivity</summary>\n\n* [Airmail](http://airmailapp.com/) for a better mail client.\n* [Alfred](https://www.alfredapp.com/) for increased productivity and efficiency with macOS.\n* [Fantastical](https://flexibits.com/fantastical) for a better calendar.\n* [Things](https://culturedcode.com/things/) for getting things done.\n</details>\n\n<details>\n<summary>Development</summary>\n\n* [Dash](https://kapeli.com/dash) offline access to API documentation sets\n* [ForkLift](https://www.binarynights.com/forklift/) FTP client\n* [Hyper](https://hyper.is/) for an alternative terminal.\n* [ImageOptim](https://imageoptim.com/mac) for image optimization.\n* [iTerm](https://www.iterm2.com/) for a better terminal.\n* [Kaleidoscope](https://www.kaleidoscopeapp.com/) for a better diff tool.\n* [Virtual Box](https://www.virtualbox.org/) powerful virtualization tool\n* [Visual Studio Code](https://code.visualstudio.com/) IDE\n</details>\n\n<details>\n<summary>Design</summary>\n\n* [Affinity Designer](https://affinity.serif.com/en-us/designer/)\n* [Affinity Photo](https://affinity.serif.com/en-us/photo/)\n* [Sip](http://sipapp.io/) collect, organize & share your colors\n* [Sketch](https://www.sketchapp.com/) for design.\n</details>\n\n<details>\n<summary>Communication</summary>\n\n* [Bear](http://www.bear-writer.com/) for writing and previewing markdown.\n* [Skype](https://www.skype.com/en/) for free calls to friends and family.\n* [Slack](https://slack.com/) where work happens.\n* [Ulysses](https://ulyssesapp.com/) for long-form writing.\n</details>\n\n<details>\n<summary>Utilities</summary>\n\n* [1Password](https://1password.com/) for password management.\n* [Dropbox](https://www.dropbox.com) for cloud file storage.\n* [Divvy](http://mizage.com/divvy/) for better window management.\n* [Encrypto](https://macpaw.com/encrypto) for securing files.\n* [ExpressVPN](https://www.expressvpn.com/) for privacy.\n* [HyperDock](https://bahoom.com/hyperdock/)\n* [Karabiner](https://pqrs.org/osx/karabiner/) for keyboard mapping.\n* [Renamer](https://renamer.com/) for easy file renaming.\n</details>\n\n<details>\n<summary>Miscellaneous</summary>\n\n* [Gifox](https://gifox.io/) for GIF making.\n* [Rocket](http://matthewpalmer.net/rocket/) for Slack-like emojis.\n* [Spotify](https://www.spotify.com/) for music.\n* [VLC](http://www.videolan.org/) for a better media player.\n</details>\n\n<details>\n<summary>Browsers</summary>\n\n* [Blisk](https://blisk.io/) for cross-device web development.\n* [Brave](https://brave.com/) for web browsing without ads.\n* [Chrome](https://www.google.com/chrome/browser/desktop/) for fast and free web browsing.\n* [Firefox](https://www.mozilla.org/en-US/firefox/new/) for web browsing and testing.\n* [TorBrowser](https://www.torproject.org/projects/torbrowser.html.en) for super secret web browsing.\n</details>\n\n<sub>See [`swag`](swag) for the full list of apps that will be installed. Adjust it to your personal taste.</sub>\n\nIt should take less than 20 minutes to install (depends on your machine).\n\n## üå∂ Just add `~/.hot-sauce`\n\n![I got hot sauce in my bag](assets/hot-sauce.gif)\n\nYour `~/.hot-sauce` is added at the end of the Formation script. Put your customizations there.\nFor example:\n\n```sh\n#!/usr/bin/env bash\n\nSETUP_ROOT=$HOME/.setup\n\nNERDFONTS_RELEASE=$(curl -L -s -H 'Accept: application/json' https://github.com/ryanoasis/nerd-fonts/releases/latest)\nNERDFONTS_VERSION=$(get_github_version $NERDFONTS_RELEASE)\n\nDIRECTORIES=(\n    $HOME/Desktop/code\n    $HOME/Desktop/design\n    $HOME/Desktop/*dump\n    $HOME/Desktop/GIFs\n    $HOME/Desktop/projects\n    $HOME/Desktop/screenshots\n)\n\nNERDFONTS=(\n    SpaceMono\n    Hack\n    AnonymousPro\n    Inconsolata\n)\n\nstep \"Making directories‚Ä¶\"\nfor dir in ${DIRECTORIES[@]}; do\n    mkd $dir\ndone\n\nstep \"Installing fonts‚Ä¶\"\nfor font in ${NERDFONTS[@]}; do\n    if [ ! -d ~/Library/Fonts/$font ]; then\n        printf \"${indent}  [‚Üì] $font \"\n        wget -P ~/Library/Fonts https://github.com/ryanoasis/nerd-fonts/releases/download/$NERDFONTS_VERSION/$font.zip --quiet;unzip -q ~/Library/Fonts/$font -d ~/Library/Fonts/$font\n        print_in_green \"${bold}‚úì done!${normal}\\n\"\n    else\n        print_muted \"${indent}‚úì $font already installed. Skipped.\"\n    fi\ndone\n```\n\nWrite your customizations such that they can be run safely more than once.\nSee the `slay` script for examples.\n\nFormation functions such as `step` and `link` can be used in your `~/.hot-sauce`.\n\n## Known Issues\nCask does not recognize applications installed outside of Homebrew Cask ‚Äì in the case that the script fails, you can either remove the application from the install list or uninstall the application causing the failure and try again.\n\n## Acknowledgements\n\nInspiration and code was taken from many sources, including:\n\n* [Mathias Bynens'](https://github.com/mathiasbynens) [dotfiles](https://github.com/mathiasbynens/dotfiles)\n* thoughtbot's [laptop](https://github.com/thoughtbot/laptop/)\n\n## üìú  License\n\nFormation is customized for my own needs. It is free software, and may be redistributed under the terms specified in the [LICENSE] file.\n\n[LICENSE]: LICENSE\n"
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "slay",
          "type": "blob",
          "size": 8.349609375,
          "content": "#!/usr/bin/env bash\n\n###############################################################################\n# ERROR: Let the user know if the script fails\n###############################################################################\n\ntrap 'ret=$?; test $ret -ne 0 && printf \"\\n   \\e[31mÔÅ±\\033[0m  Formation failed  \\e[31mÔÅ±\\033[0m\\n\" >&2; exit $ret' EXIT\n\nset -e\n\n###############################################################################\n# TWIRL: Check for required functions file\n###############################################################################\n\nif [ -e twirl ]; then\n\tcd \"$(dirname \"${BASH_SOURCE[0]}\")\" \\\n\t\t&& . \"twirl\"\nelse\n\tprintf \"\\n ‚ö†Ô∏è  ./twirl not found  üíÉüèæ First, you need to twirl on your haters\\n\"\n\texit 1\nfi\n\n###############################################################################\n# CHECK: Bash version\n###############################################################################\n\ncheck_bash_version\n\n###############################################################################\n# Get in Formation!          http://patorjk.com/software/taag/ ( font: Script )\n###############################################################################\n\nprintf \"\n   _\n  | |\n  | |  __   ,_    _  _  _    __, _|_ üçã  __   _  _\n  |/  /  \\_/  |  / |/ |/ |  /  |  |  |  /  \\_/ |/ |\n  |__/\\__/    |_/  |  |  |_/\\_/|_/|_/|_/\\__/   |  |\n  |\\  ---------------------------------------------\n  |/  Cause you slay           [for Bash 3.2 - 3.9]\n‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n‚îÇ  Okay developers now let's get in ${bold}formation${normal}.      ‚îÇ\n‚îÇ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÇ\n‚îÇ  Safe to run multiple times on the same machine.  ‚îÇ\n‚îÇ  It ${green}installs${reset}, ${blue}upgrades${reset}, or ${yellow}skips${reset} packages based   ‚îÇ\n‚îÇ  on what is already installed on the machine.     ‚îÇ\n‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n   ${dim}$(get_os) $(get_os_version) ${normal} // ${dim}$BASH ${normal} // ${dim}$BASH_VERSION${reset}\n\"\n\n###############################################################################\n# CHECK: Internet\n###############################################################################\nchapter \"Checking internet connection‚Ä¶\"\ncheck_internet_connection\n\n###############################################################################\n# PROMPT: Password\n###############################################################################\nchapter \"Caching password‚Ä¶\"\nask_for_sudo\n\n###############################################################################\n# PROMPT: SSH Key\n###############################################################################\nchapter 'Checking for SSH key‚Ä¶'\nssh_key_setup\n\n###############################################################################\n# INSTALL: Dependencies\n###############################################################################\nchapter \"Installing Dependencies‚Ä¶\"\n\n# -----------------------------------------------------------------------------\n# XCode\n# -----------------------------------------------------------------------------\nif type xcode-select >&- && xpath=$( xcode-select --print-path ) &&\n\ttest -d \"${xpath}\" && test -x \"${xpath}\" ; then\n\tprint_success_muted \"Xcode already installed. Skipping.\"\nelse\n\tstep \"Installing Xcode‚Ä¶\"\n\txcode-select --install\n\tprint_success \"Xcode installed!\"\nfi\n\nif [ ! -d \"$HOME/.bin/\" ]; then\n\tmkdir \"$HOME/.bin\"\nfi\n\n# -----------------------------------------------------------------------------\n# Bash-it\n# -----------------------------------------------------------------------------\nif [ -d \"$HOME/.bash_it\" ]; then\n\tprint_success_muted \"Bash-it already installed. Skipping.\"\nelse\n\tstep \"Installing Bash-it‚Ä¶\"\n\tgit clone --depth=1 https://github.com/Bash-it/bash-it.git ~/.bash_it\n\t~/.bash_it/install.sh --silent --no-modify-config\n\tprint_success \"Bash-it installed!\"\nfi\n\n# -----------------------------------------------------------------------------\n# NVM\n# -----------------------------------------------------------------------------\nif [ -x nvm ]; then\n\tstep \"Installing NVM‚Ä¶\"\n\tcurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.33.11/install.sh | bash\n\tprint_success \"NVM installed!\"\n\tstep \"Installing latest Node‚Ä¶\"\n\tnvm install node\n\tnvm use node\n\tnvm run node --version\n\tnodev=$(node -v)\n\tprint_success \"Using Node $nodev!\"\nelse\n\tprint_success_muted \"NVM/Node already installed. Skipping.\"\nfi\n\n# -----------------------------------------------------------------------------\n# Homebrew\n# -----------------------------------------------------------------------------\nif ! [ -x \"$(command -v brew)\" ]; then\n\tstep \"Installing Homebrew‚Ä¶\"\n\tcurl -fsS 'https://raw.githubusercontent.com/Homebrew/install/master/install' | ruby\n\texport PATH=\"/usr/local/bin:$PATH\"\n\tprint_success \"Homebrew installed!\"\nelse\n\tprint_success_muted \"Homebrew already installed. Skipping.\"\nfi\n\nif brew list | grep -Fq brew-cask; then\n\tstep \"Uninstalling old Homebrew-Cask‚Ä¶\"\n\tbrew uninstall --force brew-cask\n\tprint_success \"Homebrew-Cask uninstalled!\"\nfi\n\n###############################################################################\n# INSTALL: brews\n###############################################################################\nif [ -e $cwd/swag/brews ]; then\n\tchapter \"Installing Homebrew formulae‚Ä¶\"\n\n\tfor brew in $(<$cwd/swag/brews); do\n\t\tinstall_brews $brew\n\tdone\nfi\n\n###############################################################################\n# UPDATE: Homebrew\n###############################################################################\nchapter \"Updating Homebrew formulae‚Ä¶\"\nbrew update\n\n###############################################################################\n# INSTALL: casks\n###############################################################################\nif [ -e $cwd/swag/casks ]; then\n\tchapter \"Installing apps via Homebrew‚Ä¶\"\n\n\tfor cask in $(<$cwd/swag/casks); do\n\t    install_application_via_brew $cask\n\tdone\nfi\n\n###############################################################################\n# INSTALL: Mac App Store Apps\n###############################################################################\nchapter \"Installing apps from App Store‚Ä¶\"\nif [ -x mas ]; then\n\n\tprint_warning \"Please install mas-cli first: brew mas. Skipping.\"\n\n\telse\n\n\tif [ -e $cwd/swag/apps ]; then\n\t\tif mas_setup; then\n\t\t\t# Workaround for associative array in Bash 3\n\t\t\t# https://stackoverflow.com/questions/6047648/bash-4-associative-arrays-error-declare-a-invalid-option\n\t\t\tfor app in $(<$cwd/swag/apps); do\n\t\t\t\tKEY=\"${app%%::*}\"\n\t\t\t\tVALUE=\"${app##*::}\"\n\t\t\t\tinstall_application_via_app_store $KEY $VALUE\n\t\t\tdone\n\t\telse\n\t\t\tprint_warning \"Please signin to App Store first. Skipping.\"\n\t\tfi\n\tfi\n\nfi\n\n###############################################################################\n# CLEAN: Homebrew files\n###############################################################################\nchapter \"Cleaning up Homebrew files‚Ä¶\"\nbrew cleanup 2> /dev/null\n\n###############################################################################\n# INSTALL: npm packages\n###############################################################################\nif [ -e $cwd/swag/npm ]; then\n\tchapter \"Installing npm packages‚Ä¶\"\n\n\tfor pkg in $(<$cwd/swag/npm); do\n\t\tKEY=\"${pkg%%::*}\"\n\t\tVALUE=\"${pkg##*::}\"\n\t\tinstall_npm_packages $KEY $VALUE\n\tdone\nfi\n\n\n###############################################################################\n# OPTIONAL: Customizations\n###############################################################################\nchapter \"Adding hot sauce‚Ä¶\"\nif [ -f \"$HOME/.hot-sauce\" ]; then\n\tif ask \"Do you want to add hot sauce?\" Y; then\n\t\t. \"$HOME/.hot-sauce\"; printf \"\\n  You got hot sauce in your bag. üî• ${bold}Swag.${normal}\\n\";\n\telse\n\t\tprint_success_muted \"Hot sauce declined. Skipped.\";\n\tfi\nelse\n\tprint_warning \"No ~/.hot-sauce found. Skipping.\"\nfi\n\n###############################################################################\n# üçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçãüçã\n###############################################################################\ne_lemon_ated\n"
        },
        {
          "name": "swag",
          "type": "tree",
          "content": null
        },
        {
          "name": "twirl",
          "type": "blob",
          "size": 14.376953125,
          "content": "#!/usr/bin/env bash\n\n###############################################################################\n# VARIABLES\n###############################################################################\n\ncount=1\n\nreset=\"\\033[0m\"\nhighlight=\"\\033[41m\\033[97m\"\ndot=\"\\033[31m‚ñ∏ $reset\"\ndim=\"\\033[2m\"\nblue=\"\\e[34m\"\ngreen=\"\\e[32m\"\nyellow=\"\\e[33m\"\ntag_green=\"\\e[30;42m\"\ntag_blue=\"\\e[30;46m\"\nbold=$(tput bold)\nnormal=$(tput sgr0)\nunderline=\"\\e[37;4m\"\nindent=\"   \"\n\n# Get full directory name of this script\ncwd=\"$(cd \"$(dirname \"$0\")\" && pwd)\"\n\nDOTFILES_ROOT=$HOME/.dotfiles\n\n###############################################################################\n# Utility Functions\n###############################################################################\n_print_in_color() {\n    printf \"%b\" \\\n        \"$(tput setaf \"$2\" 2> /dev/null)\" \\\n        \"$1\" \\\n        \"$(tput sgr0 2> /dev/null)\"\n}\n\n_print_error_stream() {\n    while read -r line; do\n        print_in_red \"     ‚Ü≥ ERROR: $line\\n\"\n    done\n}\n\n_show_spinner() {\n\n    local -r FRAMES='/-\\|'\n\n    # shellcheck disable=SC2034\n    local -r NUMBER_OR_FRAMES=${#FRAMES}\n\n    local -r CMDS=\"$2\"\n    local -r MSG=\"$3\"\n    local -r PID=\"$1\"\n\n    local i=0\n    local frameText=\"\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Note: In order for the Travis CI site to display\n    # things correctly, it needs special treatment, hence,\n    # the \"is Travis CI?\" checks.\n\n    if [ \"$TRAVIS\" != \"true\" ]; then\n\n        # Provide more space so that the text hopefully\n        # doesn't reach the bottom line of the terminal window.\n        #\n        # This is a workaround for escape sequences not tracking\n        # the buffer position (accounting for scrolling).\n        #\n        # See also: https://unix.stackexchange.com/a/278888\n\n        printf \"\\n\\n\\n\"\n        tput cuu 3\n\n        tput sc\n\n    fi\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Display spinner while the commands are being executed.\n\n    while kill -0 \"$PID\" &>/dev/null; do\n\n        frameText=\" [${FRAMES:i++%NUMBER_OR_FRAMES:1}] $MSG\"\n\n        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        # Print frame text.\n\n        if [ \"$TRAVIS\" != \"true\" ]; then\n            printf \"%s\\n\" \"$frameText\"\n        else\n            printf \"%s\" \"$frameText\"\n        fi\n\n        sleep 0.2\n\n        # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n        # Clear frame text.\n\n        if [ \"$TRAVIS\" != \"true\" ]; then\n            tput rc\n        else\n            printf \"\\r\"\n        fi\n\n    done\n\n}\n\n_kill_all_subprocesses() {\n\n    local i=\"\"\n\n    for i in $(jobs -p); do\n        kill \"$i\"\n        wait \"$i\" &> /dev/null\n    done\n\n}\n\n_set_trap() {\n\n    trap -p \"$1\" | grep \"$2\" &> /dev/null \\\n        || trap '$2' \"$1\"\n\n}\n\n_link_file() {\n  local src=$1 dst=$2\n\n  local overwrite= backup= skip=\n  local action=\n\n  if [ -f \"$dst\" -o -d \"$dst\" -o -L \"$dst\" ]\n  then\n\n    if [ \"$overwrite_all\" == \"false\" ] && [ \"$backup_all\" == \"false\" ] && [ \"$skip_all\" == \"false\" ]\n    then\n\n      local currentSrc=\"$(readlink $dst)\"\n\n      if [ \"$currentSrc\" == \"$src\" ]\n      then\n\n        skip=true;\n\n      else\n\n        printf \"\\r   ${yellow}!${reset} File already exists: $dst ($(basename \"$src\")), what do you want to do?\n     [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all? \"\n        read -n 1 action\n\n        case \"$action\" in\n          o )\n            overwrite=true;;\n          O )\n            overwrite_all=true;;\n          b )\n            backup=true;;\n          B )\n            backup_all=true;;\n          s )\n            skip=true;;\n          S )\n            skip_all=true;;\n          * )\n            ;;\n        esac\n\n      fi\n\n    fi\n\n    overwrite=${overwrite:-$overwrite_all}\n    backup=${backup:-$backup_all}\n    skip=${skip:-$skip_all}\n\n    if [ \"$overwrite\" == \"true\" ]\n    then\n      rm -rf \"$dst\"\n      print_in_green \"\\n      ‚úì deleted $dst\"\n    fi\n\n    if [ \"$backup\" == \"true\" ]\n    then\n      mv \"$dst\" \"${dst}.backup\"\n      print_in_green \"\\n      ‚úì moved $dst to ${dst}.backup\"\n    fi\n\n    if [ \"$skip\" == \"true\" ]\n    then\n      printf \"\\n  ${dim}    ‚úì $src already linked. Skipped.${reset}\"\n    fi\n  fi\n\n  if [ \"$skip\" != \"true\" ]  # \"false\" or empty\n  then\n    ln -s \"$1\" \"$2\"\n    print_in_green \"\\n      ‚úì linked $1 to $2\"\n  fi\n}\n\n###############################################################################\n# Print Functions\n###############################################################################\n\nprint_in_red() {\n    _print_in_color \"$1\" 1\n}\n\nprint_in_green() {\n    _print_in_color \"$1\" 2\n}\n\nprint_in_yellow() {\n    _print_in_color \"$1\" 3\n}\n\nprint_in_blue() {\n    _print_in_color \"$1\" 4\n}\n\nprint_in_purple() {\n    _print_in_color \"$1\" 5\n}\n\nprint_in_cyan() {\n    _print_in_color \"$1\" 6\n}\n\nprint_in_white() {\n    _print_in_color \"$1\" 7\n}\n\nprint_result() {\n\n    if [ \"$1\" -eq 0 ]; then\n        print_success \"$2\"\n    else\n        print_error \"$2\"\n    fi\n\n    return \"$1\"\n\n}\n\nprint_question() {\n    print_in_yellow \"  [?] $1\\n\"\n}\n\nprint_success() {\n    print_in_green \"  [‚úì] $1\\n\"\n}\n\nprint_success_muted() {\n    printf \"  ${dim}[‚úì] $1${reset}\\n\" \"$@\"\n}\n\nprint_muted() {\n    printf \"  ${dim}$1${reset}\\n\" \"$@\"\n}\n\nprint_warning() {\n    print_in_yellow \"  [!] $1\\n\"\n}\n\nprint_error() {\n    print_in_red \"  [ùòÖ] $1 $2\\n\"\n}\n\n###############################################################################\n# Meta Checks\n###############################################################################\n\ncheck_bash_version() {\n    if ((BASH_VERSINFO[0] < 3))\n    then\n        print_error \"Sorry, you need at least bash-3.0 to run this script.\"\n        exit 1\n    fi\n}\n\nget_os() {\n\n    local os=\"\"\n    local kernelName=\"\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    kernelName=\"$(uname -s)\"\n\n    if [ \"$kernelName\" == \"Darwin\" ]; then\n        os=\"macOS\"\n    elif [ \"$kernelName\" == \"Linux\" ] && [ -e \"/etc/lsb-release\" ]; then\n        os=\"ubuntu\"\n    else\n        os=\"$kernelName\"\n    fi\n\n    printf \"%s\" \"$os\"\n\n}\n\nget_os_version() {\n\n    local os=\"\"\n    local version=\"\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    os=\"$(get_os)\"\n\n    if [ \"$os\" == \"macOS\" ]; then\n        version=\"$(sw_vers -productVersion)\"\n    elif [ \"$os\" == \"ubuntu\" ]; then\n        version=\"$(lsb_release -d | cut -f2 | cut -d' ' -f2)\"\n    fi\n\n    printf \"%s\" \"$version\"\n\n}\n\ncheck_internet_connection() {\n    if [ ping -q -w1 -c1 google.com &>/dev/null ]; then\n        print_error \"Please check your internet connection\";\n        exit 0\n    else\n        print_success \"Internet connection\";\n    fi\n}\n\n###############################################################################\n# Execution\n###############################################################################\n\nexecute() {\n\n    local -r CMDS=\"$1\"\n    local -r MSG=\"${2:-$1}\"\n    local -r TMP_FILE=\"$(mktemp /tmp/XXXXX)\"\n\n    local exitCode=0\n    local cmdsPID=\"\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # If the current process is ended,\n    # also end all its subprocesses.\n\n    _set_trap \"EXIT\" \"_kill_all_subprocesses\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Execute commands in background\n\n    eval \"$CMDS\" \\\n        &> /dev/null \\\n        2> \"$TMP_FILE\" &\n\n    cmdsPID=$!\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Show a spinner if the commands\n    # require more time to complete.\n\n    _show_spinner \"$cmdsPID\" \"$CMDS\" \"$MSG\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Wait for the commands to no longer be executing\n    # in the background, and then get their exit code.\n\n    wait \"$cmdsPID\" &> /dev/null\n    exitCode=$?\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Print output based on what happened.\n\n    print_result $exitCode \"$MSG\"\n\n    if [ $exitCode -ne 0 ]; then\n        _print_error_stream < \"$TMP_FILE\"\n    fi\n\n    rm -rf \"$TMP_FILE\"\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    return $exitCode\n\n}\n\nmkd() {\n    if [ -n \"$1\" ]; then\n        if [ -e \"$1\" ]; then\n            if [ ! -d \"$1\" ]; then\n                print_error \"$1 - a file with the same name already exists!\"\n            else\n                printf \"     ${dim}‚úì $1 already exists. Skipped.${reset}\\n\"\n            fi\n        else\n            execute \"mkdir -p $1\" \"$1\"\n        fi\n    fi\n}\n\nsymlink_dotfiles() {\n  local overwrite_all=false backup_all=false skip_all=false\n\n  for src in $(find -H \"$DOTFILES_ROOT\" -maxdepth 2 -name '*.symlink' -not -path '*.git*')\n  do\n    dst=\"$HOME/.$(basename \"${src%.*}\")\"\n    _link_file \"$src\" \"$dst\"\n  done\n}\n\n###############################################################################\n# Prompts\n###############################################################################\nask_for_sudo() {\n\n    # Ask for the administrator password upfront.\n\n    sudo -v &> /dev/null\n\n    # Update existing `sudo` time stamp\n    # until this script has finished.\n    #\n    # https://gist.github.com/cowboy/3118588\n\n    # Keep-alive: update existing `sudo` time stamp until script has finished\n    while true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n    print_success \"Password cached\"\n\n}\n\nask() {\n    # https://djm.me/ask\n    local prompt default reply\n\n    while true; do\n\n        if [ \"${2:-}\" = \"Y\" ]; then\n            prompt=\"Y/n\"\n            default=Y\n        elif [ \"${2:-}\" = \"N\" ]; then\n            prompt=\"y/N\"\n            default=N\n        else\n            prompt=\"y/n\"\n            default=\n        fi\n\n        # Ask the question (not using \"read -p\" as it uses stderr not stdout)\n        echo -n \"  [?] $1 [$prompt] \"\n\n        # Read the answer (use /dev/tty in case stdin is redirected from somewhere else)\n        read reply </dev/tty\n\n        # Default?\n        if [ -z \"$reply\" ]; then\n            reply=$default\n        fi\n\n        # Check if the reply is valid\n        case \"$reply\" in\n            Y*|y*) return 0 ;;\n            N*|n*) return 1 ;;\n        esac\n\n    done\n}\n\n###############################################################################\n# \n###############################################################################\n\n# return 1 if global command line program installed, else 0\ncli_is_installed() {\n    # set to 1 initially\n    local return_=1\n    # set to 0 if not found\n    type $1 >/dev/null 2>&1 || { local return_=0; }\n    # return value\n    echo \"$return_\"\n}\n\ncopy_key_github() {\n    inform 'Public key copied! Paste into Github‚Ä¶'\n    [[ -f $pub ]] && cat $pub | pbcopy\n    open 'https://github.com/account/ssh'\n    read -p \"   ‚ú¶  Press enter to continue‚Ä¶\"\n    print_success \"SSH key\"\n    return\n}\n\ngithub_key_check() {\n\tif ask \"SSH key found. Enter it in Github?\" Y; then\n\t\tcopy_key_github;\n\telse\n\t\tprint_success \"SSH key\";\n\tfi\n}\n\ncreate_ssh_key() {\n\tif ask \"No SSH key found. Create one?\" Y; then\n\t\tssh-keygen -t rsa; github_key_check;\n\telse\n\t\treturn 0;\n\tfi\n}\n\nssh_key_setup() {\n    local pub=$HOME/.ssh/id_rsa.pub\n\n    if ! [[ -f $pub ]]; then\n        create_ssh_key\n    else\n        github_key_check\n    fi\n}\n\nmas_setup() {\n    if mas account > /dev/null; then\n        return 0\n    else\n        return 1\n    fi\n}\n\ngem_install_or_update() {\n    if gem list \"$1\" --installed > /dev/null; then\n        gem update \"$@\"\n    else\n        gem install \"$@\"\n        rbenv rehash\n    fi\n}\n\ninstall_brews() {\n    if test ! $(brew list | grep $brew); then\n        echo_install \"Installing $brew\"\n\t\tbrew install $brew >/dev/null\n\t\tprint_in_green \"${bold}‚úì installed!${normal}\\n\"\n\telse\n\t\tprint_success_muted \"$brew already installed. Skipped.\"\n    fi\n}\n\ninstall_application_via_brew() {\n    if [[ ! $(brew cask list | grep $cask) ]]; then\n        echo_install \"Installing $cask\"\n        brew cask install $cask --appdir=/Applications >/dev/null\n        print_in_green \"${bold}‚úì installed!${normal}\\n\"\n    else\n    \tprint_success_muted \"$cask already installed. Skipped.\"\n    fi\n}\n\ninstall_application_via_app_store() {\n\tif ! mas list | grep $1 &> /dev/null; then\n\t\techo_install \"Installing $2\"\n\t\tmas install $1 >/dev/null\n\t\tprint_in_green \"${bold}‚úì installed!${normal}\\n\"\n\telse\n\t\tprint_success_muted \"$2 already installed. Skipped.\"\n\tfi\n}\n\ninstall_npm_packages() {\n\tif [[ $(cli_is_installed $2) == 0 ]]; then\n\t\techo_install \"Installing $1\"\n\t\tnpm install $1 -g --silent\n\t\tprint_in_green \"${bold}‚úì installed!${normal}\\n\"\n\telse\n\t\tprint_success_muted \"$1 already installed. Skipped.\"\n\tfi\n}\n\n# The releases are returned in the format\n# {\"id\":3622206,\"tag_name\":\"hello-1.0.0.11\",‚Ä¶}\n# we have to extract the tag_name.\nget_github_version() {\n    echo $1 | sed -e 's/.*\"tag_name\":\"\\([^\"]*\\)\".*/\\1/'\n}\n\n###############################################################################\n# Text Formatting\n###############################################################################\ntitle() {\n    local fmt=\"$1\"; shift\n    printf \"\\n‚ú¶  ${bold}$fmt${normal}\\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óã\\n\" \"$@\"\n}\n\nchapter() {\n    local fmt=\"$1\"; shift\n    printf \"\\n‚ú¶  ${bold}$((count++)). $fmt${normal}\\n‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚óã\\n\" \"$@\"\n}\n\necho_install() {\n    local fmt=\"$1\"; shift\n    printf \"  [‚Üì] $fmt \" \"$@\"\n}\n\ntodo() {\n    local fmt=\"$1\"; shift\n    printf \"  [ ] $fmt\\n\" \"$@\"\n}\n\ninform() {\n    local fmt=\"$1\"; shift\n    printf \"   ‚ú¶  $fmt\\n\" \"$@\"\n}\n\nannounce() {\n    local fmt=\"$1\"; shift\n    printf \"‚óã‚îÄ‚îÄ‚îÄ‚ú¶ $fmt\\n\" \"$@\"\n}\n\nstep() {\n    printf \"\\n   ${dot}${underline}$@${reset}\\n\"\n}\n\nlabel_blue() {\n    printf \"\\e[30;46m $1 \\033[0m\\e[34m $2 \\033[0m\\n\"\n}\n\nlabel_green() {\n    printf \"\\e[30;42m $1 \\e[0m\\e[32m $2 \\033[0m\\n\"\n}\n\ne_lemon_ated() {\n    printf \"\n  ${bold}Congrats! You're in formation!${normal} üçã\n\n  ‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïÆ\n  ‚îÇ Thanks for using Formation!                        ‚îÇ\n  ‚îÇ If you liked it, then you should put a star on it! ‚îÇ\n  ‚îÇ                                                    ‚îÇ\n  ‚îÇ https://github.com/minamarkham/formation           ‚îÇ\n  ‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚ïØ\n\n\"\n}\n"
        }
      ]
    }
  ]
}