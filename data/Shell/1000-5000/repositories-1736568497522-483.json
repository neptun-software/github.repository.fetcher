{
  "metadata": {
    "timestamp": 1736568497522,
    "page": 483,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "spiritLHLS/Oracle-server-keep-alive-script",
      "stars": 1750,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2023 spiritLHLS\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.533203125,
          "content": "# Oracle-server-keep-alive-script\n\n[![Hits](https://hits.seeyoufarm.com/api/count/incr/badge.svg?url=https%3A%2F%2Fgithub.com%2FspiritLHLS%2FOracle-server-keep-alive-script&count_bg=%2379C83D&title_bg=%23555555&icon=&icon_color=%23E7E7E7&title=hits&edge_flat=false)](https://hits.seeyoufarm.com)\n\n## 甲骨文服务器保活脚本\n\n适配系统：已在Ubuntu 20+，Debian 10+, Centos 7+, Oracle linux 8+，AlmaLinux 8.5+\n\n上述系统验证无问题，别的主流系统应该也没有问题\n\n可选占用：CPU，内存，带宽\n\n安装完毕后如果有问题请卸载脚本反馈问题(重复卸载也没问题)\n\n所有资源(除了CPU)可选默认配置则动态占用，实时调整，避免服务器有别的任何资源已经超过限额了仍然再占用资源\n\n为避免GitHub的CDN抽风加载不了新内容，所有新更新已使用[Gitlab仓库](https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script)\n\n由于speedtest-go的release依赖于GitHub，所以请检查 [www.githubstatus.com](https://www.githubstatus.com/) ,有问题时无法安装带宽占用\n\n请留意脚本当前更新日期：2023.09.24.08.37\n\n**由于友人实测，资源占用感觉也是玄学，一个号四个服务器全部停机，但号还在，也有人一直不占用，但就是没停机的问题，所以该项目将长期保持现有状态，非必要不再更新**\n\n**也有说要在上面解析一个网址做一个网站挂着的，感觉也是玄学，自己测试吧**\n\n### 说明\n\n选项1安装，选项2卸载，选项3更新安装引导脚本，选项4退出脚本\n\n安装过程中无脑回车则全部可选的占用都占用，不需要什么占用输入```n```再回车\n\n如果选择带宽占用，会询问使用speedtest-go占用还是使用wget占用，按照提示进行选择即可\n\n有询问是否需要带宽占用的参数自定义，这时候默认选项就是```n```，回车就使用默认配置，输入```y```再回车则需要按照提示自定义参数\n\n```\ncurl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/oalive.sh -o oalive.sh && chmod +x oalive.sh && bash oalive.sh\n```\n\n或\n\n```\nbash oalive.sh\n```\n\n或\n\n```\nbash <(wget -qO- --no-check-certificate https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/oalive.sh)\n```\n\n### 特点\n\n- 提供两种CPU占用模式：DD模拟占用和科学计算模式，用户可以自由选择，占用范围设置在15%至25%之间，更推荐DD模拟占用。\n- DD模拟占用在守护进程中设置了CPU占用的最高限制。\n- 默认情况下，CPU占用设置为25%最高值，计算方法是核数乘以20%，如果计算结果低于25%，则设置为25%；如果计算结果高于25%，则按照计算结果的比例进行设置。\n- 内存占用设置为占用总内存的25%，占用时间为300秒，休息时间为300秒。\n- 每300秒检测一次内存占用情况，并根据需要动态调整占用大小。如果内存占用已经大于25%，则不增加占用。\n- 在占用过程中，使用守护进程和开机自启服务，以确保占用任务持续且有效。\n- 默认选项的带宽占用每45分钟下载一次大小在1G至10G之间的文件，只进行下载而不保存。在下载过程中会占用硬盘空间，但在下载完成后会自动释放。\n- 默认选项的带宽占用动态调整实际下载的带宽/速率，限制每次下载的最长时长为6分钟。在每次下载之前，会测试最大可用带宽，并根据实时结果将下载速率设置为30%的带宽。\n- 带宽占用测试使用了speedtest-cli和speedtest-go两种工具，以防其中之一不可用时使用第二种工具，用户可以自定义设置带宽占用，此时详见设置提示。\n- 提供一键卸载所有占用服务的选项，卸载将删除所有脚本、服务、任务、守护进程和开机自启设置。\n- 提供一键检查更新的功能，更新范围仅限于脚本更新。**请在更新后重新设置占用服务**\n- 对所有进程执行增加唯一性检测，避免重复运行，使用PID文件进行判断。\n\n如若不希望一键的，希望自定义设置时间的，请查看[README_CRON.md](https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/blob/main/%20README_CRON.md)自行设置定时任务\n\n### 友链\n\nVPS融合怪测评脚本\n\nhttps://github.com/spiritLHLS/ecs\n\n一键虚拟化项目\n\n国内 https://virt.spiritlhl.net/\n\n国际 https://www.spiritlhl.net/\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/spiritLHLS/Oracle-server-keep-alive-script.svg)](https://starchart.cc/spiritLHLS/Oracle-server-keep-alive-script)\n"
        },
        {
          "name": "README_CRON.md",
          "type": "blob",
          "size": 1.65625,
          "content": "### 自定义定时任务的命令\n\n\n由于部分人需要自定义定时任务，我又懒得写定时套装，以下是和本脚本同类型占用的简短命令，怎么定时就自己搞吧，都是shell命令可以写到定时里\n\n至于怎么定时，要么你在crontab中设置，要么在nezha监控面板设置，要么在宝塔定时任务中设置，怎么搞自己谷歌百度去吧\n\n\n#### CPU\n\n下载脚本\n```\ncurl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/cpu-limit.sh -o cpu-limit.sh && chmod +x cpu-limit.sh\nmv cpu-limit.sh /usr/local/bin/cpu-limit.sh \n```\n\nCPU占用\n```\nbash /usr/local/bin/cpu-limit.sh\n```\n\nCPU释放\n```\nkill $(ps -efA | grep cpu-limit.sh | awk '{print $2}') && kill -9 $(cat /tmp/cpu-limit.pid) && rm -rf /tmp/cpu-limit.pid\n```\n\n#### 内存\n\n内存占用\n\n内存以MB计算的大小，修改xxxxx为对应数目\n\n```\nmkdir /tmp/memory && mount -t tmpfs -o size=xxxxxM tmpfs /tmp/memory && dd if=/dev/zero of=/tmp/memory/block\n```\n\n内存释放\n```\nrm /tmp/memory/block && umount /tmp/memory && rmdir /tmp/memory\n```\n\n内存占用实际只有ARM有要求(如果我没理解错的话)\n\n#### 网络占用，跑完自动释放\n\n下载脚本\n```\ncurl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.sh -o bandwidth_occupier.sh && chmod +x bandwidth_occupier.sh\nmv bandwidth_occupier.sh /usr/local/bin/bandwidth_occupier.sh\n```\n\n对应需要安装的```speedtest-cli```或```speedtest-go```自行安装\n\n安装```speedtest-go```的记得执行```mv speedtest-go /usr/local/bin/ ```\n\n运行脚本(也就是你需要定时的命令)\n```\nbash /usr/local/bin/bandwidth_occupier.sh \n```\n"
        },
        {
          "name": "bandwidth_occupier.service",
          "type": "blob",
          "size": 0.25,
          "content": "[Unit]\nDescription=Bandwidth Occupier Service\n\n[Service]\nUser=root\n#ExecStartPre=-/bin/bash -c 'kill $(ps -efA | grep bandwidth_occupier.sh | awk \"{print $2}\")'\nExecStart=/bin/bash /usr/local/bin/bandwidth_occupier.sh\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "bandwidth_occupier.sh",
          "type": "blob",
          "size": 3.755859375,
          "content": "#!/bin/bash\n# by spiritlhl\n# from https://github.com/spiritLHLS/Oracle-server-keep-alive-script\n\nif [[ -d \"/usr/share/locale/en_US.UTF-8\" ]]; then\n  export LANG=en_US.UTF-8\n  export LC_ALL=en_US.UTF-8\n  export LANGUAGE=en_US.UTF-8\nelse\n  export LANG=C.UTF-8\n  export LC_ALL=C.UTF-8\n  export LANGUAGE=C.UTF-8\nfi\npid_file=/tmp/bandwidth_occupier.pid\nif [ -e \"${pid_file}\" ]; then\n  # 如果 PID 文件存在，则读取其中的 PID\n  pid=$(cat \"${pid_file}\")\n  # 检查该 PID 是否对应一个正在运行的进程\n  if ps -p \"${pid}\" >/dev/null; then\n    echo \"Error: Another instance of bandwidth_occupier.sh is already running with PID ${pid}\"\n    exit 1\n  fi\n  # 如果 PID 文件存在，但对应的进程已经停止运行，删除 PID 文件\n  rm \"${pid_file}\"\nfi\necho $$ >\"${pid_file}\"\n\nurls=('http://mirror.nl.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.dal10.us.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.hk.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.sfo12.us.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.de.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.syd10.au.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.wdc1.us.leaseweb.net/speedtest/10000mb.bin' 'http://mirror.wdc1.us.leaseweb.net/speedtest/10000mb.bin' 'https://speed.hetzner.de/10GB.bin' 'http://proof.ovh.net/files/10Gio.dat' 'http://lg-sin.fdcservers.net/10GBtest.zip' 'http://lg-tok.fdcservers.net/10GBtest.zip' 'http://lg-hkg.fdcservers.net/10GBtest.zip' 'http://lg-atl.fdcservers.net/10GBtest.zip' 'http://lg-chie.fdcservers.net/10GBtest.zip' 'http://lg-dene.fdcservers.net/10GBtest.zip' 'http://lg-hou.fdcservers.net/10GBtest.zip' 'http://lg-lax.fdcservers.net/10GBtest.zip' 'http://lg-mia.fdcservers.net/10GBtest.zip' 'http://lg-minn.fdcservers.net/10GBtest.zip' 'http://lg-nyc.fdcservers.net/10GBtest.zip' 'http://lg-sea.fdcservers.net/10GBtest.zip' 'http://lg-tor.fdcservers.net/10GBtest.zip' 'http://lg-spb.fdcservers.net/10GBtest.zip' 'http://lg-ams.fdcservers.net/10GBtest.zip' 'http://lg-dub.fdcservers.net/10GBtest.zip' 'http://lg-fra.fdcservers.net/10GBtest.zip' 'http://lg-hel.fdcservers.net/10GBtest.zip' 'http://lg-kie.fdcservers.net/10GBtest.zip' 'http://lg-lis.fdcservers.net/10GBtest.zip' 'http://lg-lon.fdcservers.net/10GBtest.zip' 'http://lg-mad.fdcservers.net/10GBtest.zip' 'http://lg-par2.fdcservers.net/10GBtest.zip' 'http://lg-sof.fdcservers.net/10GBtest.zip' 'http://lg-sto.fdcservers.net/10GBtest.zip' 'http://lg-vie.fdcservers.net/10GBtest.zip' 'http://lg-war.fdcservers.net/10GBtest.zip' 'http://lg-zur.fdcservers.net/10GBtest.zip' 'http://speedtest-ca.turnkeyinternet.net/10000mb.bin' 'http://speedtest-ny.turnkeyinternet.net/10000mb.bin' 'http://sea-repo.hostwinds.net/tests/10gb.zip' 'http://dal-repo.hostwinds.net/tests/10gb.zip' 'http://ams-repo.hostwinds.net/tests/10gb.zip' 'http://zgb-speedtest-1.tele2.net/10GB.zip' 'http://fra36-speedtest-1.tele2.net/10GB.zip' 'http://bks4-speedtest-1.tele2.net/10GB.zip' 'http://vln038-speedtest-1.tele2.net/10GB.zip' 'http://ams-speedtest-1.tele2.net/10GB.zip' 'http://bck-speedtest-1.tele2.net/10GB.zip' 'http://hgd-speedtest-1.tele2.net/10GB.zip')\nselected_url=\"\"\ncount=0\nfor url in $(printf '%s\\n' \"${urls[@]}\" | shuf); do\n  if timeout 3s wget --tries=3 --spider \"$url\" 2>/dev/null; then\n    selected_url=$url\n    break\n  fi\n  count=$((count + 1))\n  if [[ $count -eq 20 ]]; then\n    selected_url=\"http://speed.cloudflare.com/__down?bytes=1000000000\" && break\n  fi\ndone\nif ! command -v speedtest-cli >/dev/null 2>&1; then\n  bandwidth=$(/usr/local/bin/speedtest-go | awk '/^Download/ {print $2}' | head -2 | tail -1)\nelse\n  bandwidth=$(speedtest-cli --simple | awk '/^Download/ {print $2}')\nfi\nrate=$(echo \"$bandwidth * 1024 * 1024 * 0.30\" | bc | awk '{printf \"%.0f\\n\", $1}')\ntimeout 6m wget $selected_url --limit-rate=$rate -O /dev/null &\nrm \"${pid_file}\"\n"
        },
        {
          "name": "bandwidth_occupier.timer",
          "type": "blob",
          "size": 0.140625,
          "content": "[Unit]\nDescription=Run the Bandwidth Occupier every 45 minutes\n\n[Timer]\nOnBootSec=15min\nOnUnitActiveSec=45min\n\n[Install]\nWantedBy=timers.target\n"
        },
        {
          "name": "cpu-limit.service",
          "type": "blob",
          "size": 0.2744140625,
          "content": "[Unit]\nDescription=Keep CPU usage\n\n[Service]\nUser=root\nExecStart=/bin/bash /usr/local/bin/cpu-limit.sh\nExecStop=/bin/bash -c 'kill $(cat /tmp/cpu-limit.pid) && rm -rf /tmp/cpu-limit.pid'\nRestart=always\nRestartSec=60s\nRestartKillSignal=SIGKILL\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "cpu-limit.sh",
          "type": "blob",
          "size": 2.576171875,
          "content": "#!/bin/bash\n# by spiritlhl\n# from https://github.com/spiritLHLS/Oracle-server-keep-alive-script\n\nif [[ -d \"/usr/share/locale/en_US.UTF-8\" ]]; then\n  export LANG=en_US.UTF-8\n  export LC_ALL=en_US.UTF-8\n  export LANGUAGE=en_US.UTF-8\nelse\n  export LANG=C.UTF-8\n  export LC_ALL=C.UTF-8\n  export LANGUAGE=C.UTF-8\nfi\nulimit -u 10\npid_file=/tmp/cpu-limit.pid\nif [ -e \"${pid_file}\" ]; then\n  # 如果 PID 文件存在，则读取其中的 PID\n  pid=$(cat \"${pid_file}\")\n  # 检查该 PID 是否对应一个正在运行的进程\n  if ps -p \"${pid}\" >/dev/null; then\n    echo \"Error: Another instance of cpu-limit.sh is already running with PID ${pid}\"\n    exit 1\n  fi\n  # 如果 PID 文件存在，但对应的进程已经停止运行，删除 PID 文件\n  rm \"${pid_file}\"\nfi\necho $$ >\"${pid_file}\"\n\n# function calculate_primes() {\n#   size=$1\n#   for ((i=2;i<=$size;i++)); do\n#     for ((j=2;j<=i/2;j++)); do\n#       if [ $((i%j)) == 0 ]; then\n#         break\n#       fi\n#     done\n#     if [ $j -gt $((i/2)) ]; then\n#       echo $i &> /dev/null\n#     fi\n#   done\n# }\n\n# low_main() {\n#   while true; do\n#     cpu_usage=$(top -bn1 | grep \"Cpu(s)\" | awk '{print $2 + $4}')\n#     if (( $(echo \"$cpu_usage < 15\" | bc -l) )); then\n#       if [ $(( $(date +%s) % 2 )) == 0 ]; then\n#         size=$((size+10))\n#       else\n#         interval=$(echo \"$interval - 0.5\" | bc)\n#       fi\n#       if [ $size -lt $MIN_SIZE ]; then\n#         size=$MIN_SIZE\n#       fi\n#       if [ $(echo \"$interval < $MIN_INTERVAL\" | bc -l) -eq 1 ]; then\n#         interval=$MIN_INTERVAL\n#       fi\n#       calculate_primes $size &\n#     elif (( $(echo \"$cpu_usage > 25\" | bc -l) )); then\n#       if [ $(( $(date +%s) % 2 )) == 0 ]; then\n#         size=$((size-10))\n#       else\n#         interval=$(echo \"$interval + 0.5\" | bc)\n#       fi\n#       if [ $size -lt $MIN_SIZE ]; then\n#         size=$MIN_SIZE\n#       fi\n#       if [ $(echo \"$interval < $MIN_INTERVAL\" | bc -l) -eq 1 ]; then\n#         interval=$MIN_INTERVAL\n#       fi\n#     else\n#       echo \"\"\n#     fi\n#     sleep $interval\n#   done\n# }\n\nhigh_main() {\n  for ((i = 0; i < $cores; i++)); do\n    {\n      dd if=/dev/zero of=/dev/null\n    } &\n  done\n  wait\n}\n\narch=$(uname -m)\ncores=$(nproc)\n# if [ \"$arch\" = \"armv7l\" ] || [ \"$arch\" = \"armv8\" ] || [ \"$arch\" = \"armv8l\" ] || [ \"$arch\" = \"aarch64\" ] || [ \"$arch\" = \"arm\" ] ; then\n#   if [ $cores -eq 3 ] || [ $cores -eq 4 ]; then\n#     high_main\n#   else\n#     size=600\n#     interval=5\n#     MIN_SIZE=400\n#     MIN_INTERVAL=1\n#     low_main\n#   fi\n# else\n#   size=450\n#   interval=10\n#   MIN_SIZE=200\n#   MIN_INTERVAL=2\n#   low_main\n# fi\nhigh_main\nrm \"${pid_file}\"\n"
        },
        {
          "name": "memory-limit.service",
          "type": "blob",
          "size": 0.2490234375,
          "content": "[Unit]\nDescription=Keep memory usage\n\n[Service]\nUser=root\n#ExecStartPre=-/bin/bash -c 'kill $(ps -efA | grep memory-limit.sh | awk \"{print $2}\")'\nExecStart=/bin/bash /usr/local/bin/memory-limit.sh\n#Restart=on-failure\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "memory-limit.sh",
          "type": "blob",
          "size": 1.4482421875,
          "content": "#!/bin/bash\n# by spiritlhl\n# from https://github.com/spiritLHLS/Oracle-server-keep-alive-script\n\nif [[ -d \"/usr/share/locale/en_US.UTF-8\" ]]; then\n  export LANG=en_US.UTF-8\n  export LC_ALL=en_US.UTF-8\n  export LANGUAGE=en_US.UTF-8\nelse\n  export LANG=C.UTF-8\n  export LC_ALL=C.UTF-8\n  export LANGUAGE=C.UTF-8\nfi\npid_file=/tmp/memory-limit.pid\nif [ -e \"${pid_file}\" ]; then\n  # 如果 PID 文件存在，则读取其中的 PID\n  pid=$(cat \"${pid_file}\")\n  # 检查该 PID 是否对应一个正在运行的进程\n  if ps -p \"${pid}\" >/dev/null; then\n    echo \"Error: Another instance of memory-limit.sh is already running with PID ${pid}\"\n    exit 1\n  fi\n  # 如果 PID 文件存在，但对应的进程已经停止运行，删除 PID 文件\n  rm \"${pid_file}\"\n  rm /dev/shm/file\nfi\necho $$ >\"${pid_file}\"\n\nwhile true; do\n  mem_total=$(free | awk '/Mem/ {print $2}')\n  mem_used=$(free | awk '/Mem/ {print $3}')\n  mem_usage=$(echo \"scale=2; $mem_used/$mem_total * 100.0\" | bc)\n  if [ $(echo \"$mem_usage < 25\" | bc) -eq 1 ]; then\n    target_mem_usage=$(echo \"scale=0; $mem_total * 0.25 / 1\" | bc)\n    echo \"target_mem_usage: $target_mem_usage\"\n    stress_mem=$(echo \"$target_mem_usage - $mem_used\" | bc)\n    echo \"stress_mem: $stress_mem\"\n    stress_mem_in_mb=$(echo \"scale=0; $stress_mem / 1024\" | bc)\n    echo \"stress_mem_in_mb: $stress_mem_in_mb\"\n    fallocate -l \"${stress_mem_in_mb}M\" /dev/shm/file\n    sleep 300\n    rm /dev/shm/file\n  else\n    sleep 300\n  fi\ndone\n\nrm \"${pid_file}\"\n"
        },
        {
          "name": "oalive.sh",
          "type": "blob",
          "size": 19.38671875,
          "content": "#!/usr/bin/env bash\n# by spiritlhl\n# from https://github.com/spiritLHLS/Oracle-server-keep-alive-script\n\nver=\"2023.09.24.08.37\"\ncd /root >/dev/null 2>&1\n_red() { echo -e \"\\033[31m\\033[01m$@\\033[0m\"; }\n_green() { echo -e \"\\033[32m\\033[01m$@\\033[0m\"; }\n_yellow() { echo -e \"\\033[33m\\033[01m$@\\033[0m\"; }\n_blue() { echo -e \"\\033[36m\\033[01m$@\\033[0m\"; }\nreading() { read -rp \"$(_green \"$1\")\" \"$2\"; }\nRED=\"\\033[31m\"\nPLAIN=\"\\033[0m\"\nREGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|oracle linux|alma|rocky\" \"'amazon linux'\" \"fedora\" \"arch\")\nRELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"CentOS\" \"Fedora\" \"Arch\")\nPACKAGE_UPDATE=(\"! apt-get update && apt-get --fix-broken install -y && apt-get update\" \"apt-get update\" \"yum -y update\" \"yum -y update\" \"yum -y update\" \"pacman -Sy\")\nPACKAGE_INSTALL=(\"apt-get -y install\" \"apt-get -y install\" \"yum -y install\" \"yum -y install\" \"yum -y install\" \"pacman -Sy --noconfirm --needed\")\nPACKAGE_REMOVE=(\"apt-get -y remove\" \"apt-get -y remove\" \"yum -y remove\" \"yum -y remove\" \"yum -y remove\" \"pacman -Rsc --noconfirm\")\nPACKAGE_UNINSTALL=(\"apt-get -y autoremove\" \"apt-get -y autoremove\" \"yum -y autoremove\" \"yum -y autoremove\" \"yum -y autoremove\" \"\")\nCMD=(\"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\" \"$(hostnamectl 2>/dev/null | grep -i system | cut -d : -f2)\" \"$(lsb_release -sd 2>/dev/null)\" \"$(grep -i description /etc/lsb-release 2>/dev/null | cut -d \\\" -f2)\" \"$(grep . /etc/redhat-release 2>/dev/null)\" \"$(grep . /etc/issue 2>/dev/null | cut -d \\\\ -f1 | sed '/^[ ]*$/d')\" \"$(grep -i pretty_name /etc/os-release 2>/dev/null | cut -d \\\" -f2)\")\nSYS=\"${CMD[0]}\"\n[[ -n $SYS ]] || exit 1\nfor ((int = 0; int < ${#REGEX[@]}; int++)); do\n  if [[ $(echo \"$SYS\" | tr '[:upper:]' '[:lower:]') =~ ${REGEX[int]} ]]; then\n    SYSTEM=\"${RELEASE[int]}\"\n    [[ -n $SYSTEM ]] && break\n  fi\ndone\nutf8_locale=$(locale -a 2>/dev/null | grep -i -m 1 -E \"UTF-8|utf8\")\nif [[ -z \"$utf8_locale\" ]]; then\n  echo \"No UTF-8 locale found\"\nelse\n  export LC_ALL=\"$utf8_locale\"\n  export LANG=\"$utf8_locale\"\n  export LANGUAGE=\"$utf8_locale\"\n  echo \"Locale set to $utf8_locale\"\nfi\n[[ $EUID -ne 0 ]] && echo -e \"${RED}请使用 root 用户运行本脚本！${PLAIN}\" && exit 1\n\ncheckver() {\n  running_version=$(grep \"ver=\\\"[0-9]\\{4\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\" \"$0\" | awk -F '\"' '{print $2}')\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/oalive.sh -o oalive1.sh && chmod +x oalive1.sh\n  downloaded_version=$(grep \"ver=\\\"[0-9]\\{4\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\\.[0-9]\\{2\\}\" oalive1.sh | awk -F '\"' '{print $2}')\n  if [ \"$running_version\" != \"$downloaded_version\" ]; then\n    _yellow \"更新脚本从 $ver 到 $downloaded_version\"\n    mv oalive1.sh \"$0\"\n    uninstall\n    _yellow \"5秒后请重新设置占用，已自动卸载原有占用\"\n    sleep 5\n    bash oalive.sh\n  else\n    _green \"本脚本已是最新脚本无需更新\"\n    rm -rf oalive1.sh*\n  fi\n}\n\ncheckupdate() {\n  _yellow \"Updating package management sources\"\n  ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n}\n\nboinc() {\n  _green \"\\n Install docker.\\n \"\n  if ! systemctl is-active docker >/dev/null 2>&1; then\n    if [ $SYSTEM = \"CentOS\" ]; then\n      ${PACKAGE_INSTALL[int]} yum-utils\n      yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo &&\n        ${PACKAGE_INSTALL[int]} docker-ce docker-ce-cli containerd.io\n      systemctl enable --now docker\n    else\n      ${PACKAGE_INSTALL[int]} docker.io\n    fi\n  fi\n  docker ps -a | awk '{print $NF}' | grep -qw boinc && _yellow \" Remove the boinc container.\\n \" && docker rm -f boinc >/dev/null 2>&1\n  if [ \"$SYSTEM\" == \"Ubuntu\" ] || [ \"$SYSTEM\" == \"Debian\" ]; then\n    docker run -d --restart unless-stopped --name boinc -v /var/lib/boinc:/var/lib/boinc -e \"BOINC_CMD_LINE_OPTIONS=--allow_remote_gui_rpc --cpu_usage_limit=20\" boinc/client\n  elif [ \"$SYSTEM\" == \"Centos\" ]; then\n    docker run -d --restart unless-stopped --name boinc -v /var/lib/boinc:/var/lib/boinc -e \"BOINC_CMD_LINE_OPTIONS=--allow_remote_gui_rpc --cpu_usage_limit=20\" boinc/client:centos\n  else\n    echo \"Error: The operating system is not supported.\"\n    exit 1\n  fi\n  systemctl enable docker\n  _green \"CPU限制安装成功\"\n  _green \"Boinc is installed as docker and using\"\n}\n\ncalculate() {\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/cpu-limit.sh -o cpu-limit.sh && chmod +x cpu-limit.sh\n  mv cpu-limit.sh /usr/local/bin/cpu-limit.sh\n  chmod +x /usr/local/bin/cpu-limit.sh\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/cpu-limit.service -o cpu-limit.service && chmod +x cpu-limit.service\n  mv cpu-limit.service /etc/systemd/system/cpu-limit.service\n  line_number=7\n  total_cores=0\n  if [ -f \"/proc/cpuinfo\" ]; then\n    total_cores=$(grep -c ^processor /proc/cpuinfo)\n  else\n    total_cores=$(nproc)\n  fi\n  if [ \"$total_cores\" == \"2\" ] || [ \"$total_cores\" == \"3\" ] || [ \"$total_cores\" == \"4\" ]; then\n    cpu_limit=$(echo \"$total_cores * 20\" | bc)\n  else\n    cpu_limit=25\n  fi\n  sed -i \"${line_number}a CPUQuota=${cpu_limit}%\" /etc/systemd/system/cpu-limit.service\n  systemctl daemon-reload\n  systemctl enable cpu-limit.service\n  if systemctl start cpu-limit.service; then\n    _green \"CPU限制安装成功 脚本路径: /usr/local/bin/cpu-limit.sh\"\n  else\n    restorecon /etc/systemd/system/cpu-limit.service\n    systemctl enable cpu-limit.service\n    systemctl start cpu-limit.service\n    _green \"CPU限制安装成功 脚本路径: /usr/local/bin/cpu-limit.sh\"\n  fi\n  _green \"The CPU limit script has been installed at /usr/local/bin/cpu-limit.sh\"\n}\n\nmemory() {\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/memory-limit.sh -o memory-limit.sh && chmod +x memory-limit.sh\n  mv memory-limit.sh /usr/local/bin/memory-limit.sh\n  chmod +x /usr/local/bin/memory-limit.sh\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/memory-limit.service -o memory-limit.service && chmod +x memory-limit.service\n  mv memory-limit.service /etc/systemd/system/memory-limit.service\n  systemctl daemon-reload\n  systemctl enable memory-limit.service\n  if systemctl start memory-limit.service; then\n    _green \"内存限制安装成功 脚本路径: /usr/local/bin/memory-limit.sh\"\n  else\n    restorecon /etc/systemd/system/memory-limit.service\n    systemctl enable memory-limit.service\n    systemctl start memory-limit.service\n    _green \"内存限制安装成功 脚本路径: /usr/local/bin/memory-limit.sh\"\n  fi\n  _green \"The memory limit script has been installed at /usr/local/bin/memory-limit.sh\"\n}\n\nbandwidth() {\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.sh -o bandwidth_occupier.sh && chmod +x bandwidth_occupier.sh\n  mv bandwidth_occupier.sh /usr/local/bin/bandwidth_occupier.sh\n  chmod +x /usr/local/bin/bandwidth_occupier.sh\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.timer -o bandwidth_occupier.timer && chmod +x bandwidth_occupier.timer\n  mv bandwidth_occupier.timer /etc/systemd/system/bandwidth_occupier.timer\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.service -o bandwidth_occupier.service && chmod +x bandwidth_occupier.service\n  mv bandwidth_occupier.service /etc/systemd/system/bandwidth_occupier.service\n  reading \"需要自定义带宽占用的设置吗? (y/[n]) \" answer\n  if [ \"$answer\" == \"y\" ]; then\n    # sed -i '/^bandwidth\\|^rate/s/^/#/' /usr/local/bin/bandwidth_occupier.sh\n    sed -i '41,47s/^/# /' /usr/local/bin/bandwidth_occupier.sh\n    reading \"输入你需要的带宽大小(以mbps为单位，例如10mbps输入10): \" rate_mbps\n    rate=$((rate_mbps * 1000000))\n    reading \"输入你需要请求的时长(以分钟为单位，例如10分钟输入10): \" timeout\n    # sed -i 's/^timeout/#timeout/' /usr/local/bin/bandwidth_occupier.sh\n    sed -i '47a\\timeout '$timeout'm wget $selected_url --limit-rate='$rate' -O /dev/null &' /usr/local/bin/bandwidth_occupier.sh\n    reading \"输入你需要间隔的时长(以分钟为单位，例如45分钟输入45): \" interval\n    sed -i \"s/^OnUnitActiveSec.*/OnUnitActiveSec=$interval/\" /etc/systemd/system/bandwidth_occupier.timer\n  else\n    _green \"\\n使用默认配置，45分钟间隔，请求6分钟，请求速率为最大速度的30%\"\n    if ! command -v speedtest-cli >/dev/null 2>&1; then\n      echo \"speedtest-cli not found, installing...\"\n      _yellow \"Installing speedtest-cli\"\n      rm -rf /etc/apt/sources.list.d/speedtest.list >/dev/null 2>&1\n      ${PACKAGE_REMOVE[int]} speedtest >/dev/null 2>&1\n      ${PACKAGE_REMOVE[int]} speedtest-cli >/dev/null 2>&1\n      checkupdate\n      ${PACKAGE_INSTALL[int]} speedtest-cli\n    fi\n    if ! command -v speedtest-cli >/dev/null 2>&1; then\n      ARCH=$(uname -m)\n      if [[ \"$ARCH\" == \"armv7l\" || \"$ARCH\" == \"armv8\" || \"$ARCH\" == \"armv8l\" || \"$ARCH\" == \"aarch64\" ]]; then\n        FILE_URL=\"${cdn_success_url}https://github.com/showwin/speedtest-go/releases/download/v1.5.2/speedtest-go_1.5.2_Linux_arm64.tar.gz\"\n      elif [[ $ARCH == \"i386\" ]]; then\n        FILE_URL=\"${cdn_success_url}https://github.com/showwin/speedtest-go/releases/download/v1.5.2/speedtest-go_1.5.2_Linux_i386.tar.gz\"\n      elif [[ $ARCH == \"x86_64\" ]]; then\n        FILE_URL=\"${cdn_success_url}https://github.com/showwin/speedtest-go/releases/download/v1.5.2/speedtest-go_1.5.2_Linux_x86_64.tar.gz\"\n      else\n        _red \"不支持该架构：$ARCH\"\n        exit 1\n      fi\n      wget -q -O speedtest-go_1.5.2_Linux.tar.gz $FILE_URL\n      if ! command -v tar >/dev/null 2>&1; then\n        yum install -y tar\n      fi\n      chmod 777 speedtest-go_1.5.2_Linux.tar.gz\n      tar -xvf speedtest-go_1.5.2_Linux.tar.gz\n      chmod 777 speedtest-go\n      mv speedtest-go /usr/local/bin/\n      rm -rf README.md* LICENSE* >/dev/null 2>&1\n      rm -rf speedtest-go_1.5.2_Linux.tar.gz* >/dev/null 2>&1\n    fi\n  fi\n  systemctl daemon-reload\n  systemctl enable bandwidth_occupier.timer\n  if systemctl start bandwidth_occupier.timer; then\n    _green \"带宽限制安装成功 脚本路径: /usr/local/bin/bandwidth_occupier.sh\"\n  else\n    restorecon /etc/systemd/system/bandwidth_occupier.timer\n    restorecon /etc/systemd/system/bandwidth_occupier.service\n    systemctl enable bandwidth_occupier.timer\n    systemctl start bandwidth_occupier.timer\n    _green \"带宽限制安装成功 脚本路径: /usr/local/bin/bandwidth_occupier.sh\"\n  fi\n  _green \"The bandwidth limit script has been installed at /usr/local/bin/bandwidth_occupier.sh\"\n}\n\ncdn_urls=(\"https://cdn0.spiritlhl.top/\" \"http://cdn3.spiritlhl.net/\" \"http://cdn1.spiritlhl.net/\" \"https://ghproxy.com/\" \"http://cdn2.spiritlhl.net/\")\n\ncheck_cdn() {\n  local o_url=$1\n  for cdn_url in \"${cdn_urls[@]}\"; do\n    if curl -sL -k \"$cdn_url$o_url\" --max-time 6 | grep -q \"success\" >/dev/null 2>&1; then\n      export cdn_success_url=\"$cdn_url\"\n      return\n    fi\n    sleep 0.5\n  done\n  export cdn_success_url=\"\"\n}\n\ncheck_cdn_file() {\n  check_cdn \"https://raw.githubusercontent.com/spiritLHLS/ecs/main/back/test\"\n  if [ -n \"$cdn_success_url\" ]; then\n    _yellow \"CDN available, using CDN\"\n  else\n    _yellow \"No CDN available, no use CDN\"\n  fi\n}\n\ndownload_speedtest_go_file() {\n  cd /root >/dev/null 2>&1\n  file=\"/etc/speedtest-cli/speedtest-go\"\n  if [[ -e \"$file\" ]]; then\n    _green \"speedtest-go found\"\n    return\n  fi\n  local sys_bit=\"$1\"\n  if [ \"$sys_bit\" = \"aarch64\" ]; then\n    sys_bit=\"arm64\"\n  fi\n  rm -rf speedtest-go*\n  local url3=\"${cdn_success_url}https://github.com/showwin/speedtest-go/releases/download/v1.6.0/speedtest-go_1.6.0_Linux_${sys_bit}.tar.gz\"\n  wget $url3\n  if [ $? -eq 0 ]; then\n    _green \"Used speedtest-go\"\n  fi\n  if [ ! -d \"/etc/speedtest-cli\" ]; then\n    mkdir -p \"/etc/speedtest-cli\"\n  fi\n  if [ -f \"./speedtest-go_1.6.0_Linux_${sys_bit}.tar.gz\" ]; then\n    tar -zxf speedtest-go_1.6.0_Linux_${sys_bit}.tar.gz -C /etc/speedtest-cli\n    chmod 777 /etc/speedtest-cli/speedtest-go\n    rm -f speedtest-go*\n  else\n    _red \"Error: Failed to download speedtest tool.\"\n    exit 1\n  fi\n}\n\ninstall_speedtest_go() {\n  cd /root >/dev/null 2>&1\n  _yellow \"checking speedtest\"\n  sys_bit=\"\"\n  local sysarch=\"$(uname -m)\"\n  case \"${sysarch}\" in\n  \"x86_64\" | \"x86\" | \"amd64\" | \"x64\") sys_bit=\"x86_64\" ;;\n  \"i386\" | \"i686\") sys_bit=\"i386\" ;;\n  \"aarch64\" | \"armv7l\" | \"armv8\" | \"armv8l\") sys_bit=\"aarch64\" ;;\n  \"s390x\") sys_bit=\"s390x\" ;;\n  \"riscv64\") sys_bit=\"riscv64\" ;;\n  \"ppc64le\") sys_bit=\"ppc64le\" ;;\n  \"ppc64\") sys_bit=\"ppc64\" ;;\n  *) sys_bit=\"x86_64\" ;;\n  esac\n  download_speedtest_go_file \"${sys_bit}\"\n}\n\nbandwidth_speedtest_go() {\n  install_speedtest_go\n  cd /root >/dev/null 2>&1\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.timer -o bandwidth_occupier.timer && chmod +x bandwidth_occupier.timer\n  mv bandwidth_occupier.timer /etc/systemd/system/bandwidth_occupier.timer\n  curl -L https://gitlab.com/spiritysdx/Oracle-server-keep-alive-script/-/raw/main/bandwidth_occupier.service -o bandwidth_occupier.service && chmod +x bandwidth_occupier.service\n  mv bandwidth_occupier.service /etc/systemd/system/bandwidth_occupier.service\n  file_content=$(cat /etc/systemd/system/bandwidth_occupier.service)\n  new_file_content=$(echo \"$file_content\" | sed '7s/.*/ExecStart=\\/bin\\/bash -c '\\''for i in {1..10}; do \\/etc\\/speedtest-cli\\/speedtest-go; done'\\''/')\n  echo \"$new_file_content\" >/etc/systemd/system/bandwidth_occupier.service\n  systemctl daemon-reload\n  systemctl enable bandwidth_occupier.timer\n  if systemctl start bandwidth_occupier.timer; then\n    _green \"带宽占用安装成功 speedtest-go路径: /etc/speedtest-cli/speedtest-go\"\n  fi\n  _green \"The speedtest-go has been installed at /etc/speedtest-cli/speedtest-go\"\n}\n\nuninstall() {\n  docker stop boinc &>/dev/null\n  docker rm boinc &>/dev/null\n  docker rmi boinc &>/dev/null\n  if [ -f \"/etc/systemd/system/cpu-limit.service\" ]; then\n    systemctl stop cpu-limit.service\n    systemctl disable cpu-limit.service\n    rm -rf /etc/systemd/system/cpu-limit.service\n    rm -rf /usr/local/bin/cpu-limit.sh*\n    kill $(pgrep dd) &>/dev/null\n    kill $(ps -efA | grep cpu-limit.sh | awk '{print $2}') &>/dev/null\n  fi\n  rm -rf /tmp/cpu-limit.pid &>/dev/null\n  _yellow \"已卸载CPU占用 - The cpu limit script has been uninstalled successfully.\"\n  if [ -f \"/etc/systemd/system/memory-limit.service\" ]; then\n    systemctl stop memory-limit.service\n    systemctl disable memory-limit.service\n    rm -rf /etc/systemd/system/memory-limit.service\n    rm -rf /usr/local/bin/memory-limit.sh*\n    rm -rf /dev/shm/file\n    kill $(ps -efA | grep memory-limit.sh | awk '{print $2}') &>/dev/null\n    rm -rf /tmp/memory-limit.pid &>/dev/null\n    _yellow \"已卸载内存占用 - The memory limit script has been uninstalled successfully.\"\n  fi\n  if [ -f \"/etc/systemd/system/bandwidth_occupier.service\" ]; then\n    systemctl stop bandwidth_occupier\n    systemctl disable bandwidth_occupier\n    rm -rf /etc/systemd/system/bandwidth_occupier.service\n    rm -rf /usr/local/bin/bandwidth_occupier.sh*\n    systemctl stop bandwidth_occupier.timer\n    systemctl disable bandwidth_occupier.timer\n    rm -rf /etc/systemd/system/bandwidth_occupier.timer\n    rm -rf /usr/local/bin/speedtest-go &>/dev/null\n    kill $(ps -efA | grep bandwidth_occupier.sh | awk '{print $2}') &>/dev/null\n    rm -rf /tmp/bandwidth_occupier.pid &>/dev/null\n    rm -rf /etc/speedtest-cli &>/dev/null\n    _yellow \"已卸载带宽占用 - The bandwidth occupier and timer script has been uninstalled successfully.\"\n  fi\n  systemctl daemon-reload\n}\n\ncheck_and_install() {\n  local command_name=$1\n  local package_name=$2\n\n  if ! command -v $command_name >/dev/null 2>&1; then\n    echo \"$command_name not found, installing...\"\n    _yellow \"Installing $package_name\"\n    ${PACKAGE_INSTALL[int]} $package_name\n  fi\n}\n\npre_check() {\n  reading \"是否需要更新软件包管理器？y/[n]：\" apt_option\n  if [ \"$apt_option\" == y ] || [ \"$apt_option\" == Y ]; then\n    checkupdate\n  fi\n  if [[ \"$SYSTEM\" == \"CentOS\" ]]; then\n    ${PACKAGE_INSTALL[int]} epel-release\n  fi\n  ${PACKAGE_INSTALL[int]} dmidecode >/dev/null 2>&1\n  check_and_install wget wget\n  check_and_install bc bc\n  check_and_install fallocate util-linux\n  check_and_install nproc coreutils\n  check_cdn_file\n}\n\ncheck_service_status() {\n  service_name=\"$1\"\n  if systemctl is-active --quiet \"$service_name\"; then\n    _blue \"$service_name 已设置\"\n  else\n    _blue \"$service_name 未设置\"\n  fi\n}\n\ncheck_services_status() {\n  check_service_status \"cpu-limit.service\"\n  check_service_status \"memory-limit.service\"\n  if [ -e \"/usr/local/bin/bandwidth_occupier.sh\" ]; then\n    if grep -qE '^\\s*#' <(sed -n '32,38p' /usr/local/bin/bandwidth_occupier.sh); then\n      line=$(sed -n '39p' /usr/local/bin/bandwidth_occupier.sh)\n      timeout=$(echo \"$line\" | awk '{print $2}' | awk -F 'm' '{print $1}')\n      limit_rate=$(echo \"$line\" | awk -F '--limit-rate=' '{print $2}' | awk '{print $1}')\n      limit_rate_mbps=$(echo \"scale=2; $limit_rate/1000000\" | bc)\n      on_unit_active_sec=$(grep -oP '^OnUnitActiveSec *= *\\K[^ ]+' /etc/systemd/system/bandwidth_occupier.timer)\n      _blue \"带宽占用使用配置：每隔 $on_unit_active_sec 分钟占用 $limit_rate_mbps Mbps 速率下载文件 $timeout 分钟\"\n    else\n      _blue \"带宽占用使用配置：自动检测带宽每隔45分钟占用6分钟以最大带宽的30%速率下载文件\"\n    fi\n    _blue \"bandwidth_occupier.service 已设置\"\n  elif [ -e \"/etc/speedtest-cli/speedtest-go\" ]; then\n    _blue \"带宽占用使用配置：使用speedtest-go每45分钟执行10次进行占用，使用机器最大的带宽\"\n    _blue \"bandwidth_occupier.service 已设置\"\n  else\n    _blue \"bandwidth_occupier.service 未设置\"\n  fi\n}\n\nmain() {\n  _green \"当前脚本更新时间(请注意比对仓库说明)： $ver\"\n  _green \"仓库：https://github.com/spiritLHLS/Oracle-server-keep-alive-script\"\n  check_services_status\n  echo \"选择你的选项:\"\n  echo \"1. 安装保活服务\"\n  echo \"2. 卸载保活服务\"\n  echo \"3. 一键更新脚本\"\n  echo \"4. 退出程序\"\n  while true; do\n    reading \"你的选择：\" option\n    case $option in\n    1)\n      pre_check\n      echo \"选择你需要占用CPU时使用的程序:\"\n      echo \"1. 本机DD模拟占用(20%~25%) [推荐]\"\n      echo \"2. BOINC-docker服务(20%)(https://github.com/BOINC/boinc) [不推荐]\"\n      echo \"3. 不限制\"\n      reading \"你的选择：\" cpu_option\n      if [ $cpu_option == 2 ]; then\n        boinc\n      elif [ $cpu_option == 3 ]; then\n        echo \"\"\n      else\n        calculate\n      fi\n      reading \"需要限制内存吗? ([y]/n): \" memory_confirm\n      if [ \"$memory_confirm\" != \"n\" ] && [ \"$memory_confirm\" != \"N\" ]; then\n        memory\n      fi\n      reading \"需要限制带宽吗? ([y]/n): \" bandwidth_confirm\n      if [ \"$bandwidth_confirm\" != \"n\" ] && [ \"$bandwidth_confirm\" != \"N\" ]; then\n        echo \"(1) 使用speedtest-go消耗带宽(无法实时限制流量，消耗时占满机器带宽，但所有机器都能保证有占用)\"\n        echo \"(2) 使用wget下载测速文件消耗带宽(可实时限制流量，消耗时按百分比占用带宽，但可能在某些机器上执行失败无法占用)\"\n        reading \"请输入选择的选项(默认回车为选项2): \" wget_confirm\n        if [ \"$wget_confirm\" == \"1\" ] || [ \"$wget_confirm\" == 1 ]; then\n          bandwidth_speedtest_go\n        else\n          bandwidth\n        fi\n      fi\n      break\n      ;;\n    2)\n      uninstall\n      exit 0\n      break\n      ;;\n    3)\n      checkver\n      break\n      ;;\n    4)\n      echo \"退出程序\"\n      exit 1\n      break\n      ;;\n    *)\n      echo \"无效选项，请重新输入\"\n      ;;\n    esac\n  done\n}\n\nmain\n"
        }
      ]
    }
  ]
}