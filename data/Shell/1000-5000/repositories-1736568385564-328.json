{
  "metadata": {
    "timestamp": 1736568385564,
    "page": 328,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "wulabing/V2Ray_ws-tls_bash_onekey",
      "stars": 2146,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 6.1162109375,
          "content": "## 2020-06-11\n* 从 v2ray 切换至 v2fly\n* mtproxy 安装下线\n\n## 2020-6-5\n* 添加 ws tls Quantmumult 导入\n* 添加 多线程编译\n* 修复 重复添加 cron 问题\n## 2020-6-3\n* 添加 Nginx ipv6 监听 TLS1.3 0 RTT (merge)\n* 适配 Nginx ipv6 监听端口修改\n* 变更 Nginx 版本 1.16.1 更新至 1.18.0\n* 变更 ws path 长度从固定8位变为范围随机长度\n\n## 2020-2-16\n1.1.0\n* 修复 证书更新后未正确应用的问题\n* 添加 旧配置文件保留\n* 添加 安装流程 TLS 版本选择\n* 变更 v2ray_qr_config_file位置\n* 修复 v2ray daemon判断逻辑错误\n* 添加 Nginx 冲突检测\n\n## 2020-2-7\n1.0.7\n* 修复 自动更新证书 Nginx 重启异常\n* 修复 bbr4合1 403 forbidden 问题\n* 修复 部分临时文件清理异常 问题\n* 变更 默认仅保留 TLS1.3\n* 添加 卸载提供 Nginx 保留选项\n* 添加 Nginx配置文件 XFF 感谢 tg:@Cliwired\n* 添加 ws DOH配置 感谢 tg:@auth_chain_b\n\n## 2020-01-25\n* 修复 curl依赖缺失\n* 添加 MT-proxy-go 安装代码，在此感谢 whunt1 的贡献\n* 修复 测试签发成功，正式签发失败，后续重装导致的跳过证书签发问题\n\n## 2019-12-30 \n> 本次更新内容较多，并存在部分代码重构及合并，请留意，建议用户使用新版管理脚本时 先执行卸载后 重新安装对应版本\n* 新增 交互式菜单，重构为安装管理脚本，版本号初始化为1.0，诸多功能合并\n* 合并 h2 版合并至主版本并跟随更新，h2版（旧版）停止维护\n* 新增 变更UUID ALTERID PORT TLS 版本选项\n* 新增 V2ray 日志记录及查看\n* 新增 4合1 bbr锐速脚本引入，感谢 94ish.me \n* 新增 卸载选项\n* 新增 证书手动更新，原理与计划任务更新相同，证书有效期仅小于30天可更新，默认不启用强制更新\n\n## 2019-11-28\n* 添加依赖 rng-tools haveged 提高系统熵池的补充速率\n* 又双叒叕...修复 Nginx 重启后无法开机自启问题\n## 2019-11-27\n* 调整证书签发检测 从周日凌晨0点 至 周日凌晨3点\n* 添加参数 boost 可以直接使用 四合一 bbr/锐速 脚本\n* 调整参数 tls_modify 兼容 TLS1.1 按需选择\n## 2019-11-26\n>  本版本有可能解决 ws tls 的祖传断流玄学问题，如有需要请执行安装脚本进行更新\n* TLS配置修改为支持1.2 1.3 可通过 tls_modify 选项切换\n* 卸载功能支持 可通过 uninstall 选项卸载\n### 2019-10-17\n> 建议遇到问题的用户重置系统后重新安装\n* 变更 添加 Nginx systemd serverfile\n* 修复 又双叒叕尝试修复 Nginx 开机自启动问题\n### 2019-10-16\n* 适配 Centos8 Debian10 Ubuntu19.04\n* 修复 部分系统下 计划任务不生效的问题\n* 修复 时间同步服务 在 Centos8 下无法安装的错误\n* 修复 部分系统下 证书不会自动更新的问题\n* 修复 部分系统下 Nginx 开机自启配置失效的问题\n* 变更 重复安装时，将不对相同的域名进行重复的证书申请，防止出现 Let's encrypt API 次数限制\n* 变更 默认 alterID 64 -> 4 ，减少资源占用\n* 变更 nginx 安装方式从源获取 变更为 编译安装，并使用新版Openssl，支持tls1.3\n* 变更 nginx 配置文件 ssl_protocols ssl_ciphers，适配 tls1.3\n* 变更 取消对Debian8 Ubuntu 16.04 的适配工作（本版本可能依旧可用）\n* 变更 默认页面伪装为 html5 小游戏\n* 新增 安装完成，节点配置信息留档\n* 新增 使用自定义证书\n* 新增 链接方式导入导入\n* 新增 二维码方式导入\n## 2018-04-10\n* vmess+http2 over tls 脚本更新\n## 2018-04-08\nv3.3.1（Beta）\n* 安装依赖小幅调整\n* Readme内容调整\n## 2018-04-06\nv3.3(Beta)\n* 修复 Ubuntu 16.04/17.10 安装后的Nginx启动失败\n* 修复 由于重复执行脚本导致的 Nginx 安装源的重复添加问题\n* 修复 由于重复执行脚本导致的 Nginx 配置文件异常，从而导致 Nginx 启动失败的问题\n* 修复 Nginx Ubuntu 源错误添加导致的 Nginx 版本问题\n## 2018-04-03\nV3.2(Beta)\n* Nginx 版本更新至mainline版本\n* Nginx 配置中添加 TLS1.3 http2\n## 2018-03-26\nV3.1(Beta)\n* 1.去除无关的依赖\n* 2.安装顺序变更，SSL生成放在程序末尾\n* 3.NGINX 安装版本统一为最新 stable 版本（为将来可能进行的 http2 及 tls1.3 适配做好准备,debian 源默认 NGINX 版本过低不支持 http2）\n## 2018-03-18\nV3.0(Stable)\n* 1.修复 Path 分流时访问特定的伪装 Path 时出现的 Bad Request 问题 （统一为404 Not Found）\n## 2018-03-10\nV3.0(beta)\n* 1.部分功能进行代码重构\n* 2.添加了 301 重定向，即 http 强制跳转 https \n* 3.添加了 页面伪装（一个计算器程序）\n* 4.伪装path 从原来的/ray/ 变为 随机生成\n## 2018-03-05\nV2.1.1(stable)\n* 1.变更 检测到端口占用后，尝试自动kill相关进程\n* 2.尝试修复 GCE 默认纯净模板80端口占用问题（等待更多反馈）\n## 2018-02-04\nV2.1.1(stable)\n* 1.变更 local_ip 判断方式，从 本地网卡获取 变更至 命令获取 公网IP。\n* 1.修复 域名dns解析IP 与 本机IP 不匹配 误报问题\n## 2018-01-28\nv2.1.1(stable)\n* 1.修复 缺乏 lsof 依赖导致的端口占用判断异常问题\n## 2018-01-27\nv2.1.1(stable）\n* 1.修复 部分机型因缺乏 crontab （计划任务）依赖导致的安装失败问题\n* 2.完善 端口占用 判断\n## 2017-12-06\nV2.1（stable）\n* 1.修复 Centos7 找不到 Nginx 安装包的问题\n* 2.完善 SElinux 配置过程提醒标识\n\nV2.0（stable）\n* 1.增加 Centos7 系统支持\n* 2.增加 自定义端口 和 自定义alterID\n* 3.完善 安装所需依赖\n* 4.修复 Ubuntu 系列系统版本判断异常导致的安装中断问题\n* 5.修复 bug\n\nV1.02（beta）\n* 1.增加 系统判定，目前打算仅支持带systemd的较新主流开发版系统\n* 2.本机 IP 获取方式重构\n\n## 2017-12-05\n\nV1.01（beta）\n* 1.完善 支持 Debian9\n* 2.修复 由于 Debian9 默认未安装 net-tools 导致的本机ip判定错误\n* 3.修复 bc 安装问题\n* 4.增加 ip 判定不一致时继续安装的选项（由于某些vps情况比较特殊，判定到内网IP或本身网卡信息，或公网ip与服务期内信息不一致等情况）\n\nV1.0（beta）\n* 1.目前仅支持 Debian 8+ / Ubuntu 16.04+ \n* 2.逐渐完善中\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2017 wulabing\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.572265625,
          "content": "## V2Ray 基于 Nginx 的 vmess+ws+tls 一键安装脚本\n\n> 感谢 JetBrains 提供的非商业开源软件开发授权\n\n> Thanks for non-commercial open source development authorization by JetBrains\n\n## 由于 Nginx 前置导致的嵌套 tls 可能会出现连接阻断，目前仅推荐使用 reality ，建议移步到以下地址\nhttps://github.com/wulabing/xray_docker\n\n### 关于 VMess MD5 认证信息 淘汰机制\n> 自 2022 年 1 月 1 日起，服务器端将默认禁用对于 MD5 认证信息 的兼容。任何使用 MD5 认证信息的客户端将无法连接到禁用 VMess MD5 认证信息的服务器端。\n\n受到影响的用户，我们强烈建议您重新安装，并设置alterid为0（默认值目前已经修改为0），不再使用 VMess MD5 认证机制\n如果您不想重新安装，您可以通过使用 https://github.com/KukiSa/VMess-fAEAD-disable 强制开启对于 MD5 认证机制的兼容\n\n### Telegram 群组\n* telegram 交流群:https://t.me/wulabing_v2ray \n* telegram 更新公告频道：https://t.me/wulabing_channel\n\n### 准备工作\n* 准备一个域名，并将A记录添加好。\n* [V2ray官方说明](https://www.v2ray.com/)，了解 TLS WebSocket 及 V2ray 相关信息\n* 安装好 wget\n\n### 安装/更新方式（h2 和 ws 版本已合并）\nVmess+websocket+TLS+Nginx+Website\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/master/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\nVLESS+websocket+TLS+Nginx+Website\n```\nwget -N --no-check-certificate -q -O install.sh \"https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/dev/install.sh\" && chmod +x install.sh && bash install.sh\n```\n\n### 注意事项\n* 如果你不了解脚本中各项设置的具体含义，除域名外，请使用脚本提供的默认值\n* 使用本脚本需要你拥有 Linux 基础及使用经验，了解计算机网络部分知识，计算机基础操作\n* 目前支持Debian 9+ / Ubuntu 18.04+ / Centos7+ ，部分Centos模板可能存在难以处理的编译问题，建议遇到编译问题时，请更换至其他系统模板\n* 群主仅提供极其有限的支持，如有问题可以询问群友\n* 每周日的凌晨3点，Nginx 会自动重启以配合证书的签发定时任务进行，在此期间，节点无法正常连接，预计持续时间为若干秒至两分钟\n\n### 更新日志\n> 更新内容请查看 CHANGELOG.md\n\n### 鸣谢\n* ~~本脚本的另一个分支版本（Use Host）地址： https://github.com/dylanbai8/V2Ray_ws-tls_Website_onekey 请根据需求进行选择~~ 该作者可能已停止维护\n* 本脚本中 MTProxy-go TLS 版本项目引用 https://github.com/whunt1/onekeymakemtg 在此感谢 whunt1\n* 本脚本中 锐速4合1脚本原项目引用 https://www.94ish.me/1635.html 在此感谢\n* 本脚本中 锐速4合1脚本修改版项目引用 https://github.com/ylx2016/Linux-NetSpeed 在此感谢 ylx2016\n\n### 证书\n> 如果你已经拥有了你所使用域名的证书文件，可以将 crt 和 key 文件命名为 v2ray.crt v2ray.key 放在 /data 目录下（若目录不存在请先建目录），请注意证书文件权限及证书有效期，自定义证书有效期过期后请自行续签\n\n脚本支持自动生成 let's encrypted 证书，有效期3个月，理论上自动生成的证书支持自动续签\n\n### 查看客户端配置\n`cat ~/v2ray_info.txt`\n\n### V2ray 简介\n\n* V2Ray是一个优秀的开源网络代理工具，可以帮助你畅爽体验互联网，目前已经全平台支持Windows、Mac、Android、IOS、Linux等操作系统的使用。\n* 本脚本为一键完全配置脚本，在所有流程正常运行完毕后，直接按照输出结果设置客户端即可使用\n* 请注意：我们依然强烈建议你全方面的了解整个程序的工作流程及原理\n\n### 建议单服务器仅搭建单个代理\n* 本脚本默认安装最新版本的V2ray core\n* V2ray core 目前最新版本为 4.22.1（同时请注意客户端 core 的同步更新，需要保证客户端内核版本 >= 服务端内核版本）\n* 建议使用默认的443端口作为连接端口\n* 伪装内容可自行替换。\n\n### 注意事项\n* 推荐在纯净环境下使用本脚本，如果你是新手，请不要使用Centos系统。\n* 在尝试本脚本确实可用之前，请不要将本程序应用于生产环境中。\n* 该程序依赖 Nginx 实现相关功能，请使用 [LNMP](https://lnmp.org) 或其他类似携带 Nginx 脚本安装过 Nginx 的用户特别留意，使用本脚本可能会导致无法预知的错误（未测试，若存在，后续版本可能会处理本问题）。\n* V2Ray 的部分功能依赖于系统时间，请确保您使用V2RAY程序的系统 UTC 时间误差在三分钟之内，时区无关。\n* 本 bash 依赖于 [V2ray 官方安装脚本](https://install.direct/go.sh) 及 [acme.sh](https://github.com/Neilpang/acme.sh) 工作。\n* Centos 系统用户请预先在防火墙中放行程序相关端口（默认：80，443）\n\n\n### 启动方式\n\n启动 V2ray：`systemctl start v2ray`\n\n停止 V2ray：`systemctl stop v2ray`\n\n启动 Nginx：`systemctl start nginx`\n\n停止 Nginx：`systemctl stop nginx`\n\n### 相关目录\n\nWeb 目录：`/home/wwwroot/3DCEList`\n\nV2ray 服务端配置：`/etc/v2ray/config.json`\n\nV2ray 客户端配置: `~/v2ray_info.inf`\n\nNginx 目录： `/etc/nginx`\n\n证书文件: `/data/v2ray.key 和 /data/v2ray.crt` 请注意证书权限设置\n\n### 捐赠\n\n您可以使用我的 搬瓦工 AFF 购买 VPS\n\nhttps://bandwagonhost.com/aff.php?aff=63939\n\n您可以使用我的 justmysocks AFF 购买搬瓦工提供的代理\n\nhttps://justmysocks.net/members/aff.php?aff=17621\n\n\n\n\n"
        },
        {
          "name": "http2",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 35.9970703125,
          "content": "#!/bin/bash\n\n#====================================================\n#\tSystem Request:Debian 9+/Ubuntu 18.04+/Centos 7+\n#\tAuthor:\twulabing\n#\tDscription: V2ray ws+tls onekey Management\n#\tVersion: 1.0\n#\temail:admin@wulabing.com\n#\tOfficial document: www.v2ray.com\n#====================================================\n\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\ncd \"$(\n    cd \"$(dirname \"$0\")\" || exit\n    pwd\n)\" || exit\n\n#fonts color\nGreen=\"\\033[32m\"\nRed=\"\\033[31m\"\n# Yellow=\"\\033[33m\"\nGreenBG=\"\\033[42;37m\"\nRedBG=\"\\033[41;37m\"\nFont=\"\\033[0m\"\n\n#notification information\n# Info=\"${Green}[信息]${Font}\"\nOK=\"${Green}[OK]${Font}\"\nError=\"${Red}[错误]${Font}\"\n\n# 版本\nshell_version=\"1.1.9.0\"\nshell_mode=\"None\"\ngithub_branch=\"master\"\nversion_cmp=\"/tmp/version_cmp.tmp\"\nv2ray_conf_dir=\"/etc/v2ray\"\nnginx_conf_dir=\"/etc/nginx/conf/conf.d\"\nv2ray_conf=\"${v2ray_conf_dir}/config.json\"\nnginx_conf=\"${nginx_conf_dir}/v2ray.conf\"\nnginx_dir=\"/etc/nginx\"\nweb_dir=\"/home/wwwroot\"\nnginx_openssl_src=\"/usr/local/src\"\nv2ray_bin_dir_old=\"/usr/bin/v2ray\"\nv2ray_bin_dir=\"/usr/local/bin/v2ray\"\nv2ctl_bin_dir=\"/usr/local/bin/v2ctl\"\nv2ray_info_file=\"$HOME/v2ray_info.inf\"\nv2ray_qr_config_file=\"/usr/local/vmess_qr.json\"\nnginx_systemd_file=\"/etc/systemd/system/nginx.service\"\nv2ray_systemd_file=\"/etc/systemd/system/v2ray.service\"\nv2ray_access_log=\"/var/log/v2ray/access.log\"\nv2ray_error_log=\"/var/log/v2ray/error.log\"\namce_sh_file=\"/root/.acme.sh/acme.sh\"\nssl_update_file=\"/usr/bin/ssl_update.sh\"\nnginx_version=\"1.20.1\"\nopenssl_version=\"1.1.1k\"\njemalloc_version=\"5.2.1\"\nold_config_status=\"off\"\n# v2ray_plugin_version=\"$(wget -qO- \"https://github.com/shadowsocks/v2ray-plugin/tags\" | grep -E \"/shadowsocks/v2ray-plugin/releases/tag/\" | head -1 | sed -r 's/.*tag\\/v(.+)\\\">.*/\\1/')\"\n\n#移动旧版本配置信息 对小于 1.1.0 版本适配\n[[ -f \"/etc/v2ray/vmess_qr.json\" ]] && mv /etc/v2ray/vmess_qr.json $v2ray_qr_config_file\n\n#简易随机数\nrandom_num=$((RANDOM%12+4))\n#生成伪装路径\ncamouflage=\"/$(head -n 10 /dev/urandom | md5sum | head -c ${random_num})/\"\n\nTHREAD=$(grep 'processor' /proc/cpuinfo | sort -u | wc -l)\n\nsource '/etc/os-release'\n\n#从VERSION中提取发行版系统的英文名称，为了在debian/ubuntu下添加相对应的Nginx apt源\nVERSION=$(echo \"${VERSION}\" | awk -F \"[()]\" '{print $2}')\n\ncheck_system() {\n    if [[ \"${ID}\" == \"centos\" && ${VERSION_ID} -ge 7 ]]; then\n        echo -e \"${OK} ${GreenBG} 当前系统为 Centos ${VERSION_ID} ${VERSION} ${Font}\"\n        INS=\"yum\"\n    elif [[ \"${ID}\" == \"debian\" && ${VERSION_ID} -ge 8 ]]; then\n        echo -e \"${OK} ${GreenBG} 当前系统为 Debian ${VERSION_ID} ${VERSION} ${Font}\"\n        INS=\"apt\"\n        $INS update\n        ## 添加 Nginx apt源\n    elif [[ \"${ID}\" == \"ubuntu\" && $(echo \"${VERSION_ID}\" | cut -d '.' -f1) -ge 16 ]]; then\n        echo -e \"${OK} ${GreenBG} 当前系统为 Ubuntu ${VERSION_ID} ${UBUNTU_CODENAME} ${Font}\"\n        INS=\"apt\"\n        rm /var/lib/dpkg/lock\n        dpkg --configure -a\n        rm /var/lib/apt/lists/lock\n        rm /var/cache/apt/archives/lock\n        $INS update\n    else\n        echo -e \"${Error} ${RedBG} 当前系统为 ${ID} ${VERSION_ID} 不在支持的系统列表内，安装中断 ${Font}\"\n        exit 1\n    fi\n\n    $INS install dbus\n\n    systemctl stop firewalld\n    systemctl disable firewalld\n    echo -e \"${OK} ${GreenBG} firewalld 已关闭 ${Font}\"\n\n    systemctl stop ufw\n    systemctl disable ufw\n    echo -e \"${OK} ${GreenBG} ufw 已关闭 ${Font}\"\n}\n\nis_root() {\n    if [ 0 == $UID ]; then\n        echo -e \"${OK} ${GreenBG} 当前用户是root用户，进入安装流程 ${Font}\"\n        sleep 3\n    else\n        echo -e \"${Error} ${RedBG} 当前用户不是root用户，请切换到root用户后重新执行脚本 ${Font}\"\n        exit 1\n    fi\n}\n\njudge() {\n    if [[ 0 -eq $? ]]; then\n        echo -e \"${OK} ${GreenBG} $1 完成 ${Font}\"\n        sleep 1\n    else\n        echo -e \"${Error} ${RedBG} $1 失败${Font}\"\n        exit 1\n    fi\n}\n\nchrony_install() {\n    ${INS} -y install chrony\n    judge \"安装 chrony 时间同步服务 \"\n\n    timedatectl set-ntp true\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        systemctl enable chronyd && systemctl restart chronyd\n    else\n        systemctl enable chrony && systemctl restart chrony\n    fi\n\n    judge \"chronyd 启动 \"\n\n    timedatectl set-timezone Asia/Shanghai\n\n    echo -e \"${OK} ${GreenBG} 等待时间同步 ${Font}\"\n    sleep 10\n\n    chronyc sourcestats -v\n    chronyc tracking -v\n    date\n    read -rp \"请确认时间是否准确,误差范围±3分钟(Y/N): \" chrony_install\n    [[ -z ${chrony_install} ]] && chrony_install=\"Y\"\n    case $chrony_install in\n    [yY][eE][sS] | [yY])\n        echo -e \"${GreenBG} 继续安装 ${Font}\"\n        sleep 2\n        ;;\n    *)\n        echo -e \"${RedBG} 安装终止 ${Font}\"\n        exit 2\n        ;;\n    esac\n}\n\ndependency_install() {\n    ${INS} install wget git lsof bind9-dnsutils -y\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        ${INS} -y install crontabs\n    else\n        ${INS} -y install cron\n    fi\n    judge \"安装 crontab\"\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        touch /var/spool/cron/root && chmod 600 /var/spool/cron/root\n        systemctl start crond && systemctl enable crond\n    else\n        touch /var/spool/cron/crontabs/root && chmod 600 /var/spool/cron/crontabs/root\n        systemctl start cron && systemctl enable cron\n\n    fi\n    judge \"crontab 自启动配置 \"\n\n    ${INS} -y install bc\n    judge \"安装 bc\"\n\n    ${INS} -y install unzip\n    judge \"安装 unzip\"\n\n    ${INS} -y install qrencode\n    judge \"安装 qrencode\"\n\n    ${INS} -y install curl\n    judge \"安装 curl\"\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        ${INS} -y groupinstall \"Development tools\"\n    else\n        ${INS} -y install build-essential\n    fi\n    judge \"编译工具包 安装\"\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        ${INS} -y install pcre pcre-devel zlib-devel epel-release\n    else\n        ${INS} -y install libpcre3 libpcre3-dev zlib1g-dev dbus\n    fi\n\n    #    ${INS} -y install rng-tools\n    #    judge \"rng-tools 安装\"\n\n    ${INS} -y install haveged\n    #    judge \"haveged 安装\"\n\n    #    sed -i -r '/^HRNGDEVICE/d;/#HRNGDEVICE=\\/dev\\/null/a HRNGDEVICE=/dev/urandom' /etc/default/rng-tools\n\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        #       systemctl start rngd && systemctl enable rngd\n        #       judge \"rng-tools 启动\"\n        systemctl start haveged && systemctl enable haveged\n        #       judge \"haveged 启动\"\n    else\n        #       systemctl start rng-tools && systemctl enable rng-tools\n        #       judge \"rng-tools 启动\"\n        systemctl start haveged && systemctl enable haveged\n        #       judge \"haveged 启动\"\n    fi\n\n    mkdir -p /usr/local/bin >/dev/null 2>&1\n}\n\nbasic_optimization() {\n    # 最大文件打开数\n    sed -i '/^\\*\\ *soft\\ *nofile\\ *[[:digit:]]*/d' /etc/security/limits.conf\n    sed -i '/^\\*\\ *hard\\ *nofile\\ *[[:digit:]]*/d' /etc/security/limits.conf\n    echo '* soft nofile 65536' >>/etc/security/limits.conf\n    echo '* hard nofile 65536' >>/etc/security/limits.conf\n\n    # 关闭 Selinux\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        sed -i 's/^SELINUX=.*/SELINUX=disabled/' /etc/selinux/config\n        setenforce 0\n    fi\n\n}\n\nport_alterid_set() {\n    if [[ \"on\" != \"$old_config_status\" ]]; then\n        read -rp \"请输入连接端口（default:443）:\" port\n        [[ -z ${port} ]] && port=\"443\"\n        alterID=\"0\"\n    fi\n}\n\nmodify_path() {\n    if [[ \"on\" == \"$old_config_status\" ]]; then\n        camouflage=\"$(grep '\\\"path\\\"' $v2ray_qr_config_file | awk -F '\"' '{print $4}')\"\n    fi\n    sed -i \"/\\\"path\\\"/c \\\\\\t  \\\"path\\\":\\\"${camouflage}\\\"\" ${v2ray_conf}\n    judge \"V2ray 伪装路径 修改\"\n}\n\nmodify_inbound_port() {\n    if [[ \"on\" == \"$old_config_status\" ]]; then\n        port=\"$(info_extraction '\\\"port\\\"')\"\n    fi\n    if [[ \"$shell_mode\" != \"h2\" ]]; then\n        PORT=$((RANDOM + 10000))\n        sed -i \"/\\\"port\\\"/c  \\    \\\"port\\\":${PORT},\" ${v2ray_conf}\n    else\n        sed -i \"/\\\"port\\\"/c  \\    \\\"port\\\":${port},\" ${v2ray_conf}\n    fi\n    judge \"V2ray inbound_port 修改\"\n}\n\nmodify_UUID() {\n    [ -z \"$UUID\" ] && UUID=$(cat /proc/sys/kernel/random/uuid)\n    if [[ \"on\" == \"$old_config_status\" ]]; then\n        UUID=\"$(info_extraction '\\\"id\\\"')\"\n    fi\n    sed -i \"/\\\"id\\\"/c \\\\\\t  \\\"id\\\":\\\"${UUID}\\\",\" ${v2ray_conf}\n    judge \"V2ray UUID 修改\"\n    [ -f ${v2ray_qr_config_file} ] && sed -i \"/\\\"id\\\"/c \\\\  \\\"id\\\": \\\"${UUID}\\\",\" ${v2ray_qr_config_file}\n    echo -e \"${OK} ${GreenBG} UUID:${UUID} ${Font}\"\n}\n\nmodify_nginx_port() {\n    if [[ \"on\" == \"$old_config_status\" ]]; then\n        port=\"$(info_extraction '\\\"port\\\"')\"\n    fi\n    sed -i \"/ssl http2;$/c \\\\\\tlisten ${port} ssl http2;\" ${nginx_conf}\n    sed -i \"3c \\\\\\tlisten [::]:${port} http2;\" ${nginx_conf}\n    judge \"V2ray port 修改\"\n    [ -f ${v2ray_qr_config_file} ] && sed -i \"/\\\"port\\\"/c \\\\  \\\"port\\\": \\\"${port}\\\",\" ${v2ray_qr_config_file}\n    echo -e \"${OK} ${GreenBG} 端口号:${port} ${Font}\"\n}\n\nmodify_nginx_other() {\n    sed -i \"/server_name/c \\\\\\tserver_name ${domain};\" ${nginx_conf}\n    sed -i \"/location/c \\\\\\tlocation ${camouflage}\" ${nginx_conf}\n    sed -i \"/proxy_pass/c \\\\\\tproxy_pass http://127.0.0.1:${PORT};\" ${nginx_conf}\n    sed -i \"/return/c \\\\\\treturn 301 https://${domain}\\$request_uri;\" ${nginx_conf}\n    #sed -i \"27i \\\\\\tproxy_intercept_errors on;\"  ${nginx_dir}/conf/nginx.conf\n}\n\nweb_camouflage() {\n    ##请注意 这里和LNMP脚本的默认路径冲突，千万不要在安装了LNMP的环境下使用本脚本，否则后果自负\n    rm -rf /home/wwwroot\n    mkdir -p /home/wwwroot\n    cd /home/wwwroot || exit\n    git clone https://github.com/wulabing/3DCEList.git\n    judge \"web 站点伪装\"\n}\n\nv2ray_install() {\n    if [[ -d /root/v2ray ]]; then\n        rm -rf /root/v2ray\n    fi\n    if [[ -d /etc/v2ray ]]; then\n        rm -rf /etc/v2ray\n    fi\n    mkdir -p /root/v2ray\n    cd /root/v2ray || exit\n    wget -N --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/v2ray.sh\n\n    if [[ -f v2ray.sh ]]; then\n        rm -rf $v2ray_systemd_file\n        systemctl daemon-reload\n        bash v2ray.sh --force\n        judge \"安装 V2ray\"\n    else\n        echo -e \"${Error} ${RedBG} V2ray 安装文件下载失败，请检查下载地址是否可用 ${Font}\"\n        exit 4\n    fi\n    # 清除临时文件\n    rm -rf /root/v2ray\n}\n\nnginx_exist_check() {\n    if [[ -f \"/etc/nginx/sbin/nginx\" ]]; then\n        echo -e \"${OK} ${GreenBG} Nginx已存在，跳过编译安装过程 ${Font}\"\n        sleep 2\n    elif [[ -d \"/usr/local/nginx/\" ]]; then\n        echo -e \"${OK} ${GreenBG} 检测到其他套件安装的Nginx，继续安装会造成冲突，请处理后安装${Font}\"\n        exit 1\n    else\n        nginx_install\n    fi\n}\n\nnginx_install() {\n    #    if [[ -d \"/etc/nginx\" ]];then\n    #        rm -rf /etc/nginx\n    #    fi\n\n    wget -nc --no-check-certificate http://nginx.org/download/nginx-${nginx_version}.tar.gz -P ${nginx_openssl_src}\n    judge \"Nginx 下载\"\n    wget -nc --no-check-certificate https://www.openssl.org/source/openssl-${openssl_version}.tar.gz -P ${nginx_openssl_src}\n    judge \"openssl 下载\"\n    wget -nc --no-check-certificate https://github.com/jemalloc/jemalloc/releases/download/${jemalloc_version}/jemalloc-${jemalloc_version}.tar.bz2 -P ${nginx_openssl_src}\n    judge \"jemalloc 下载\"\n\n    cd ${nginx_openssl_src} || exit\n\n    [[ -d nginx-\"$nginx_version\" ]] && rm -rf nginx-\"$nginx_version\"\n    tar -zxvf nginx-\"$nginx_version\".tar.gz\n\n    [[ -d openssl-\"$openssl_version\" ]] && rm -rf openssl-\"$openssl_version\"\n    tar -zxvf openssl-\"$openssl_version\".tar.gz\n\n    [[ -d jemalloc-\"${jemalloc_version}\" ]] && rm -rf jemalloc-\"${jemalloc_version}\"\n    tar -xvf jemalloc-\"${jemalloc_version}\".tar.bz2\n\n    [[ -d \"$nginx_dir\" ]] && rm -rf ${nginx_dir}\n\n    echo -e \"${OK} ${GreenBG} 即将开始编译安装 jemalloc ${Font}\"\n    sleep 2\n\n    cd jemalloc-${jemalloc_version} || exit\n    ./configure\n    judge \"编译检查\"\n    make -j \"${THREAD}\" && make install\n    judge \"jemalloc 编译安装\"\n    echo '/usr/local/lib' >/etc/ld.so.conf.d/local.conf\n    ldconfig\n\n    echo -e \"${OK} ${GreenBG} 即将开始编译安装 Nginx, 过程稍久，请耐心等待 ${Font}\"\n    sleep 4\n\n    cd ../nginx-${nginx_version} || exit\n\n    ./configure --prefix=\"${nginx_dir}\" \\\n        --with-http_ssl_module \\\n        --with-http_sub_module \\\n        --with-http_gzip_static_module \\\n        --with-http_stub_status_module \\\n        --with-pcre \\\n        --with-http_realip_module \\\n        --with-http_flv_module \\\n        --with-http_mp4_module \\\n        --with-http_secure_link_module \\\n        --with-http_v2_module \\\n        --with-cc-opt='-O3' \\\n        --with-ld-opt=\"-ljemalloc\" \\\n        --with-openssl=../openssl-\"$openssl_version\"\n    judge \"编译检查\"\n    make -j \"${THREAD}\" && make install\n    judge \"Nginx 编译安装\"\n\n    # 修改基本配置\n    sed -i 's/#user  nobody;/user  root;/' ${nginx_dir}/conf/nginx.conf\n    sed -i 's/worker_processes  1;/worker_processes  3;/' ${nginx_dir}/conf/nginx.conf\n    sed -i 's/    worker_connections  1024;/    worker_connections  4096;/' ${nginx_dir}/conf/nginx.conf\n    sed -i '$i include conf.d/*.conf;' ${nginx_dir}/conf/nginx.conf\n\n    # 删除临时文件\n    rm -rf ../nginx-\"${nginx_version}\"\n    rm -rf ../openssl-\"${openssl_version}\"\n    rm -rf ../nginx-\"${nginx_version}\".tar.gz\n    rm -rf ../openssl-\"${openssl_version}\".tar.gz\n\n    # 添加配置文件夹，适配旧版脚本\n    mkdir ${nginx_dir}/conf/conf.d\n}\n\nssl_install() {\n    if [[ \"${ID}\" == \"centos\" ]]; then\n        ${INS} install socat nc -y\n\telif [[ \"${ID}\" == \"debian\" && ${VERSION_ID} -ge 12 ]]; then\n\t\t${INS} install socat netcat-openbsd -y\n    else\n        ${INS} install socat netcat -y\n    fi\n    judge \"安装 SSL 证书生成脚本依赖\"\n\n    curl https://get.acme.sh | sh\n    judge \"安装 SSL 证书生成脚本\"\n}\n\ndomain_check() {\n    read -rp \"请输入你的域名信息(eg:www.wulabing.com):\" domain\n    domain_ipv4=\"$(dig +short \"${domain}\" a)\"\n    domain_ipv6=\"$(dig +short \"${domain}\" aaaa)\"\n    echo -e \"${OK} ${GreenBG} 正在获取 公网ip 信息，请耐心等待 ${Font}\"\n    wgcfv4_status=$(curl -s4m8 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n    wgcfv6_status=$(curl -s6m8 https://www.cloudflare.com/cdn-cgi/trace -k | grep warp | cut -d= -f2)\n    if [[ ${wgcfv4_status} =~ \"on\"|\"plus\" ]] || [[ ${wgcfv6_status} =~ \"on\"|\"plus\" ]]; then\n        # 关闭wgcf-warp，以防误判VPS IP情况\n        wg-quick down wgcf >/dev/null 2>&1\n        echo -e \"${OK} ${GreenBG} 已关闭 wgcf-warp ${Font}\"\n    fi\n    local_ipv4=$(curl -s4m8 http://ip.sb)\n    local_ipv6=$(curl -s6m8 http://ip.sb)\n    if [[ -z ${local_ipv4} && -n ${local_ipv6} ]]; then\n        echo -e nameserver 2a01:4f8:c2c:123f::1 > /etc/resolv.conf\n        echo -e \"${OK} ${GreenBG} 识别为 IPv6 Only 的 VPS，自动添加 DNS64 服务器 ${Font}\"\n    fi\n    echo -e \"域名 DNS 解析到的的 IP：${domain_ip}\"\n    echo -e \"本机IPv4: ${local_ipv4}\"\n    echo -e \"本机IPv6: ${local_ipv6}\"\n    sleep 2\n    if [[ ${domain_ipv4} == ${local_ipv4} ]]; then\n        echo -e \"${OK} ${GreenBG} 域名 DNS 解析 IP 与 本机 IPv4 匹配 ${Font}\"\n        sleep 2\n    elif [[ ${domain_ipv6} == ${local_ipv6} ]]; then\n        echo -e \"${OK} ${GreenBG} 域名 DNS 解析 IP 与 本机 IPv6 匹配 ${Font}\"\n        sleep 2\n    else\n        echo -e \"${Error} ${RedBG} 请确保域名添加了正确的 A / AAAA 记录，否则将无法正常使用 V2ray ${Font}\"\n        echo -e \"${Error} ${RedBG} 域名 DNS 解析 IP 与 本机 IPv4 / IPv6 不匹配 是否继续安装？（y/n）${Font}\" && read -r install\n        case $install in\n        [yY][eE][sS] | [yY])\n            echo -e \"${GreenBG} 继续安装 ${Font}\"\n            sleep 2\n            ;;\n        *)\n            echo -e \"${RedBG} 安装终止 ${Font}\"\n            exit 2\n            ;;\n        esac\n    fi\n}\n\nport_exist_check() {\n    if [[ 0 -eq $(lsof -i:\"$1\" | grep -i -c \"listen\") ]]; then\n        echo -e \"${OK} ${GreenBG} $1 端口未被占用 ${Font}\"\n        sleep 1\n    else\n        echo -e \"${Error} ${RedBG} 检测到 $1 端口被占用，以下为 $1 端口占用信息 ${Font}\"\n        lsof -i:\"$1\"\n        echo -e \"${OK} ${GreenBG} 5s 后将尝试自动 kill 占用进程 ${Font}\"\n        sleep 5\n        lsof -i:\"$1\" | awk '{print $2}' | grep -v \"PID\" | xargs kill -9\n        echo -e \"${OK} ${GreenBG} kill 完成 ${Font}\"\n        sleep 1\n    fi\n}\nacme() {\n    \"$HOME\"/.acme.sh/acme.sh --set-default-ca --server letsencrypt\n\n    if \"$HOME\"/.acme.sh/acme.sh --issue --insecure -d \"${domain}\" --standalone -k ec-256 --force; then\n        echo -e \"${OK} ${GreenBG} SSL 证书生成成功 ${Font}\"\n        sleep 2\n        mkdir /data\n        if \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc --force; then\n            echo -e \"${OK} ${GreenBG} 证书配置成功 ${Font}\"\n            sleep 2\n            if [[ -n $(type -P wgcf) && -n $(type -P wg-quick) ]]; then\n                wg-quick up wgcf >/dev/null 2>&1\n                echo -e \"${OK} ${GreenBG} 已启动 wgcf-warp ${Font}\"\n            fi\n        fi\n    else\n        echo -e \"${Error} ${RedBG} SSL 证书生成失败 ${Font}\"\n        rm -rf \"$HOME/.acme.sh/${domain}_ecc\"\n        if [[ -n $(type -P wgcf) && -n $(type -P wg-quick) ]]; then\n            wg-quick up wgcf >/dev/null 2>&1\n            echo -e \"${OK} ${GreenBG} 已启动 wgcf-warp ${Font}\"\n        fi\n        exit 1\n    fi\n}\n\nv2ray_conf_add_tls() {\n    cd /etc/v2ray || exit\n    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/tls/config.json -O config.json\n    modify_path\n    modify_inbound_port\n    modify_UUID\n}\n\nv2ray_conf_add_h2() {\n    cd /etc/v2ray || exit\n    wget --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/http2/config.json -O config.json\n    modify_path\n    modify_inbound_port\n    modify_UUID\n}\n\nold_config_exist_check() {\n    if [[ -f $v2ray_qr_config_file ]]; then\n        echo -e \"${OK} ${GreenBG} 检测到旧配置文件，是否读取旧文件配置 [Y/N]? ${Font}\"\n        read -r ssl_delete\n        case $ssl_delete in\n        [yY][eE][sS] | [yY])\n            echo -e \"${OK} ${GreenBG} 已保留旧配置  ${Font}\"\n            old_config_status=\"on\"\n            port=$(info_extraction '\\\"port\\\"')\n            ;;\n        *)\n            rm -rf $v2ray_qr_config_file\n            echo -e \"${OK} ${GreenBG} 已删除旧配置  ${Font}\"\n            ;;\n        esac\n    fi\n}\n\nnginx_conf_add() {\n    touch ${nginx_conf_dir}/v2ray.conf\n    cat >${nginx_conf_dir}/v2ray.conf <<EOF\n    server {\n        listen 443 ssl http2;\n        listen [::]:443 http2;\n        ssl_certificate       /data/v2ray.crt;\n        ssl_certificate_key   /data/v2ray.key;\n        ssl_protocols         TLSv1.3;\n        ssl_ciphers           TLS13-AES-256-GCM-SHA384:TLS13-CHACHA20-POLY1305-SHA256:TLS13-AES-128-GCM-SHA256:TLS13-AES-128-CCM-8-SHA256:TLS13-AES-128-CCM-SHA256:EECDH+CHACHA20:EECDH+CHACHA20-draft:EECDH+ECDSA+AES128:EECDH+aRSA+AES128:RSA+AES128:EECDH+ECDSA+AES256:EECDH+aRSA+AES256:RSA+AES256:EECDH+ECDSA+3DES:EECDH+aRSA+3DES:RSA+3DES:!MD5;\n        server_name           serveraddr.com;\n        index index.html index.htm;\n        root  /home/wwwroot/3DCEList;\n        error_page 400 = /400.html;\n\n        # Config for 0-RTT in TLSv1.3\n        ssl_early_data on;\n        ssl_stapling on;\n        ssl_stapling_verify on;\n        add_header Strict-Transport-Security \"max-age=31536000\";\n\n        location /ray/\n        {\n        proxy_redirect off;\n        proxy_read_timeout 1200s;\n        proxy_pass http://127.0.0.1:10000;\n        proxy_http_version 1.1;\n        proxy_set_header X-Real-IP \\$remote_addr;\n        proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n        proxy_set_header Upgrade \\$http_upgrade;\n        proxy_set_header Connection \"upgrade\";\n        proxy_set_header Host \\$http_host;\n\n        # Config for 0-RTT in TLSv1.3\n        proxy_set_header Early-Data \\$ssl_early_data;\n        }\n}\n    server {\n        listen 80;\n        listen [::]:80;\n        server_name serveraddr.com;\n        return 301 https://use.shadowsocksr.win\\$request_uri;\n    }\nEOF\n\n    modify_nginx_port\n    modify_nginx_other\n    judge \"Nginx 配置修改\"\n\n}\n\nstart_process_systemd() {\n    systemctl daemon-reload\n    chown -R root:root /var/log/v2ray/\n    if [[ \"$shell_mode\" != \"h2\" ]]; then\n        systemctl restart nginx\n        judge \"Nginx 启动\"\n    fi\n    systemctl restart v2ray\n    judge \"V2ray 启动\"\n}\n\nenable_process_systemd() {\n    systemctl enable v2ray\n    judge \"设置 v2ray 开机自启\"\n    if [[ \"$shell_mode\" != \"h2\" ]]; then\n        systemctl enable nginx\n        judge \"设置 Nginx 开机自启\"\n    fi\n\n}\n\nstop_process_systemd() {\n    if [[ \"$shell_mode\" != \"h2\" ]]; then\n        systemctl stop nginx\n    fi\n    systemctl stop v2ray\n}\nnginx_process_disabled() {\n    [ -f $nginx_systemd_file ] && systemctl stop nginx && systemctl disable nginx\n}\n\n#debian 系 9 10 适配\n#rc_local_initialization(){\n#    if [[ -f /etc/rc.local ]];then\n#        chmod +x /etc/rc.local\n#    else\n#        touch /etc/rc.local && chmod +x /etc/rc.local\n#        echo \"#!/bin/bash\" >> /etc/rc.local\n#        systemctl start rc-local\n#    fi\n#\n#    judge \"rc.local 配置\"\n#}\n\nacme_cron_update() {\n    wget -N -P /usr/bin --no-check-certificate \"https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/dev/ssl_update.sh\"\n    if [[ $(crontab -l | grep -c \"ssl_update.sh\") -lt 1 ]]; then\n      if [[ \"${ID}\" == \"centos\" ]]; then\n          #        sed -i \"/acme.sh/c 0 3 * * 0 \\\"/root/.acme.sh\\\"/acme.sh --cron --home \\\"/root/.acme.sh\\\" \\\n          #        &> /dev/null\" /var/spool/cron/root\n          sed -i \"/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}\" /var/spool/cron/root\n      else\n          #        sed -i \"/acme.sh/c 0 3 * * 0 \\\"/root/.acme.sh\\\"/acme.sh --cron --home \\\"/root/.acme.sh\\\" \\\n          #        &> /dev/null\" /var/spool/cron/crontabs/root\n          sed -i \"/acme.sh/c 0 3 * * 0 bash ${ssl_update_file}\" /var/spool/cron/crontabs/root\n      fi\n    fi\n    judge \"cron 计划任务更新\"\n}\n\nvmess_qr_config_tls_ws() {\n    cat >$v2ray_qr_config_file <<-EOF\n{\n  \"v\": \"2\",\n  \"ps\": \"wulabing_${domain}\",\n  \"add\": \"${domain}\",\n  \"port\": \"${port}\",\n  \"id\": \"${UUID}\",\n  \"aid\": \"${alterID}\",\n  \"net\": \"ws\",\n  \"type\": \"none\",\n  \"host\": \"${domain}\",\n  \"path\": \"${camouflage}\",\n  \"tls\": \"tls\"\n}\nEOF\n}\n\nvmess_qr_config_h2() {\n    cat >$v2ray_qr_config_file <<-EOF\n{\n  \"v\": \"2\",\n  \"ps\": \"wulabing_${domain}\",\n  \"add\": \"${domain}\",\n  \"port\": \"${port}\",\n  \"id\": \"${UUID}\",\n  \"aid\": \"${alterID}\",\n  \"net\": \"h2\",\n  \"type\": \"none\",\n  \"path\": \"${camouflage}\",\n  \"tls\": \"tls\"\n}\nEOF\n}\n\nvmess_qr_link_image() {\n    vmess_link=\"vmess://$(base64 -w 0 $v2ray_qr_config_file)\"\n    {\n        echo -e \"$Red 二维码: $Font\"\n        echo -n \"${vmess_link}\" | qrencode -o - -t utf8\n        echo -e \"${Red} URL导入链接:${vmess_link} ${Font}\"\n    } >>\"${v2ray_info_file}\"\n}\n\nvmess_quan_link_image() {\n    echo \"$(info_extraction '\\\"ps\\\"') = vmess, $(info_extraction '\\\"add\\\"'), \\\n    $(info_extraction '\\\"port\\\"'), chacha20-ietf-poly1305, \"\\\"$(info_extraction '\\\"id\\\"')\\\"\", over-tls=true, \\\n    certificate=1, obfs=ws, obfs-path=\"\\\"$(info_extraction '\\\"path\\\"')\\\"\", \" > /tmp/vmess_quan.tmp\n    vmess_link=\"vmess://$(base64 -w 0 /tmp/vmess_quan.tmp)\"\n    {\n        echo -e \"$Red 二维码: $Font\"\n        echo -n \"${vmess_link}\" | qrencode -o - -t utf8\n        echo -e \"${Red} URL导入链接:${vmess_link} ${Font}\"\n    } >>\"${v2ray_info_file}\"\n}\n\nvmess_link_image_choice() {\n        echo \"请选择生成的链接种类\"\n        echo \"1: V2RayNG/V2RayN\"\n        echo \"2: quantumult\"\n        read -rp \"请输入：\" link_version\n        [[ -z ${link_version} ]] && link_version=1\n        if [[ $link_version == 1 ]]; then\n            vmess_qr_link_image\n        elif [[ $link_version == 2 ]]; then\n            vmess_quan_link_image\n        else\n            vmess_qr_link_image\n        fi\n}\n\ninfo_extraction() {\n    grep \"$1\" $v2ray_qr_config_file | awk -F '\"' '{print $4}'\n}\n\nbasic_information() {\n    {\n        echo -e \"${OK} ${GreenBG} V2ray+ws+tls 安装成功\"\n        echo -e \"${Red} V2ray 配置信息 ${Font}\"\n        echo -e \"${Red} 地址（address）:${Font} $(info_extraction '\\\"add\\\"') \"\n        echo -e \"${Red} 端口（port）：${Font} $(info_extraction '\\\"port\\\"') \"\n        echo -e \"${Red} 用户id（UUID）：${Font} $(info_extraction '\\\"id\\\"')\"\n        echo -e \"${Red} 额外id（alterId）：${Font} $(info_extraction '\\\"aid\\\"')\"\n        echo -e \"${Red} 加密方式（security）：${Font} 自适应 \"\n        echo -e \"${Red} 传输协议（network）：${Font} $(info_extraction '\\\"net\\\"') \"\n        echo -e \"${Red} 伪装类型（type）：${Font} none \"\n        echo -e \"${Red} 路径（不要落下/）：${Font} $(info_extraction '\\\"path\\\"') \"\n        echo -e \"${Red} 底层传输安全：${Font} tls \"\n    } >\"${v2ray_info_file}\"\n}\n\nshow_information() {\n    cat \"${v2ray_info_file}\"\n}\n\nssl_judge_and_install() {\n    if [[ -f \"/data/v2ray.key\" || -f \"/data/v2ray.crt\" ]]; then\n        echo \"/data 目录下证书文件已存在\"\n        echo -e \"${OK} ${GreenBG} 是否删除 [Y/N]? ${Font}\"\n        read -r ssl_delete\n        case $ssl_delete in\n        [yY][eE][sS] | [yY])\n            rm -rf /data/v2ray.crt /data/v2ray.key\n            echo -e \"${OK} ${GreenBG} 已删除 ${Font}\"\n            ;;\n        *) ;;\n\n        esac\n    fi\n\n    if [[ -f \"/data/v2ray.key\" || -f \"/data/v2ray.crt\" ]]; then\n        echo \"证书文件已存在\"\n    elif [[ -f \"$HOME/.acme.sh/${domain}_ecc/${domain}.key\" && -f \"$HOME/.acme.sh/${domain}_ecc/${domain}.cer\" ]]; then\n        echo \"证书文件已存在\"\n        \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc\n        judge \"证书应用\"\n    else\n        ssl_install\n        acme\n    fi\n}\n\nnginx_systemd() {\n    cat >$nginx_systemd_file <<EOF\n[Unit]\nDescription=The NGINX HTTP and reverse proxy server\nAfter=syslog.target network.target remote-fs.target nss-lookup.target\n\n[Service]\nType=forking\nPIDFile=/etc/nginx/logs/nginx.pid\nExecStartPre=/etc/nginx/sbin/nginx -t\nExecStart=/etc/nginx/sbin/nginx -c ${nginx_dir}/conf/nginx.conf\nExecReload=/etc/nginx/sbin/nginx -s reload\nExecStop=/bin/kill -s QUIT \\$MAINPID\nPrivateTmp=true\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n    judge \"Nginx systemd ServerFile 添加\"\n    systemctl daemon-reload\n}\n\ntls_type() {\n    if [[ -f \"/etc/nginx/sbin/nginx\" ]] && [[ -f \"$nginx_conf\" ]] && [[ \"$shell_mode\" == \"ws\" ]]; then\n        echo \"请选择支持的 TLS 版本（default:3）:\"\n        echo \"请注意,如果你使用 Quantaumlt X / 路由器 / 旧版 Shadowrocket / 低于 4.18.1 版本的 V2ray core 请选择 兼容模式\"\n        echo \"1: TLS1.1 TLS1.2 and TLS1.3（兼容模式）\"\n        echo \"2: TLS1.2 and TLS1.3 (兼容模式)\"\n        echo \"3: TLS1.3 only\"\n        read -rp \"请输入：\" tls_version\n        [[ -z ${tls_version} ]] && tls_version=3\n        if [[ $tls_version == 3 ]]; then\n            sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.3;/' $nginx_conf\n            echo -e \"${OK} ${GreenBG} 已切换至 TLS1.3 only ${Font}\"\n        elif [[ $tls_version == 1 ]]; then\n            sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.1 TLSv1.2 TLSv1.3;/' $nginx_conf\n            echo -e \"${OK} ${GreenBG} 已切换至 TLS1.1 TLS1.2 and TLS1.3 ${Font}\"\n        else\n            sed -i 's/ssl_protocols.*/ssl_protocols         TLSv1.2 TLSv1.3;/' $nginx_conf\n            echo -e \"${OK} ${GreenBG} 已切换至 TLS1.2 and TLS1.3 ${Font}\"\n        fi\n        systemctl restart nginx\n        judge \"Nginx 重启\"\n    else\n        echo -e \"${Error} ${RedBG} Nginx 或 配置文件不存在 或当前安装版本为 h2 ，请正确安装脚本后执行${Font}\"\n    fi\n}\n\nshow_access_log() {\n    [ -f ${v2ray_access_log} ] && tail -f ${v2ray_access_log} || echo -e \"${RedBG}log文件不存在${Font}\"\n}\n\nshow_error_log() {\n    [ -f ${v2ray_error_log} ] && tail -f ${v2ray_error_log} || echo -e \"${RedBG}log文件不存在${Font}\"\n}\n\nssl_update_manuel() {\n    [ -f ${amce_sh_file} ] && \"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" || echo -e \"${RedBG}证书签发工具不存在，请确认你是否使用了自己的证书${Font}\"\n    domain=\"$(info_extraction '\\\"add\\\"')\"\n    \"$HOME\"/.acme.sh/acme.sh --installcert -d \"${domain}\" --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc\n}\n\nbbr_boost_sh() {\n    [ -f \"tcp.sh\" ] && rm -rf ./tcp.sh\n    wget -N --no-check-certificate \"https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh\" && chmod +x tcp.sh && ./tcp.sh\n}\n\nmtproxy_sh() {\n    echo -e \"${Error} ${RedBG} 功能维护，暂不可用 ${Font}\"\n}\n\nuninstall_all() {\n    stop_process_systemd\n    [[ -f $v2ray_systemd_file ]] && rm -f $v2ray_systemd_file\n    [[ -f $v2ray_bin_dir ]] && rm -f $v2ray_bin_dir\n    [[ -f $v2ctl_bin_dir ]] && rm -f $v2ctl_bin_dir\n    [[ -d $v2ray_bin_dir_old ]] && rm -rf $v2ray_bin_dir_old\n    if [[ -d $nginx_dir ]]; then\n        echo -e \"${OK} ${Green} 是否卸载 Nginx [Y/N]? ${Font}\"\n        read -r uninstall_nginx\n        case $uninstall_nginx in\n        [yY][eE][sS] | [yY])\n            rm -rf $nginx_dir\n            rm -rf $nginx_systemd_file\n            echo -e \"${OK} ${Green} 已卸载 Nginx ${Font}\"\n            ;;\n        *) ;;\n\n        esac\n    fi\n    [[ -d $v2ray_conf_dir ]] && rm -rf $v2ray_conf_dir\n    [[ -d $web_dir ]] && rm -rf $web_dir\n    echo -e \"${OK} ${Green} 是否卸载acme.sh及证书 [Y/N]? ${Font}\"\n    read -r uninstall_acme\n    case $uninstall_acme in\n    [yY][eE][sS] | [yY])\n      /root/.acme.sh/acme.sh --uninstall\n      rm -rf /root/.acme.sh\n      rm -rf /data/v2ray.crt /data/v2ray.key\n      ;;\n    *) ;;\n    esac\n    systemctl daemon-reload\n    echo -e \"${OK} ${GreenBG} 已卸载 ${Font}\"\n}\ndelete_tls_key_and_crt() {\n    [[ -f $HOME/.acme.sh/acme.sh ]] && /root/.acme.sh/acme.sh uninstall >/dev/null 2>&1\n    [[ -d $HOME/.acme.sh ]] && rm -rf \"$HOME/.acme.sh\"\n    echo -e \"${OK} ${GreenBG} 已清空证书遗留文件 ${Font}\"\n}\njudge_mode() {\n    if [ -f $v2ray_bin_dir ] || [ -f $v2ray_bin_dir_old/v2ray ]; then\n        if grep -q \"ws\" $v2ray_qr_config_file; then\n            shell_mode=\"ws\"\n        elif grep -q \"h2\" $v2ray_qr_config_file; then\n            shell_mode=\"h2\"\n        fi\n    fi\n}\ninstall_v2ray_ws_tls() {\n    is_root\n    check_system\n    chrony_install\n    dependency_install\n    basic_optimization\n    domain_check\n    old_config_exist_check\n    port_alterid_set\n    v2ray_install\n    port_exist_check 80\n    port_exist_check \"${port}\"\n    nginx_exist_check\n    v2ray_conf_add_tls\n    nginx_conf_add\n    web_camouflage\n    ssl_judge_and_install\n    nginx_systemd\n    vmess_qr_config_tls_ws\n    basic_information\n    vmess_link_image_choice\n    tls_type\n    show_information\n    start_process_systemd\n    enable_process_systemd\n    acme_cron_update\n}\ninstall_v2_h2() {\n    is_root\n    check_system\n    chrony_install\n    dependency_install\n    basic_optimization\n    domain_check\n    old_config_exist_check\n    port_alterid_set\n    v2ray_install\n    port_exist_check 80\n    port_exist_check \"${port}\"\n    v2ray_conf_add_h2\n    ssl_judge_and_install\n    vmess_qr_config_h2\n    basic_information\n    vmess_qr_link_image\n    show_information\n    start_process_systemd\n    enable_process_systemd\n\n}\nupdate_sh() {\n    ol_version=$(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh | grep \"shell_version=\" | head -1 | awk -F '=|\"' '{print $3}')\n    echo \"$ol_version\" >$version_cmp\n    echo \"$shell_version\" >>$version_cmp\n    if [[ \"$shell_version\" < \"$(sort -rV $version_cmp | head -1)\" ]]; then\n        echo -e \"${OK} ${GreenBG} 存在新版本，是否更新 [Y/N]? ${Font}\"\n        read -r update_confirm\n        case $update_confirm in\n        [yY][eE][sS] | [yY])\n            wget -N --no-check-certificate https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/install.sh\n            echo -e \"${OK} ${GreenBG} 更新完成 ${Font}\"\n            exit 0\n            ;;\n        *) ;;\n\n        esac\n    else\n        echo -e \"${OK} ${GreenBG} 当前版本为最新版本 ${Font}\"\n    fi\n\n}\nmaintain() {\n    echo -e \"${RedBG}该选项暂时无法使用${Font}\"\n    echo -e \"${RedBG}$1${Font}\"\n    exit 0\n}\nlist() {\n    case $1 in\n    tls_modify)\n        tls_type\n        ;;\n    uninstall)\n        uninstall_all\n        ;;\n    crontab_modify)\n        acme_cron_update\n        ;;\n    boost)\n        bbr_boost_sh\n        ;;\n    *)\n        menu\n        ;;\n    esac\n}\nmodify_camouflage_path() {\n    [[ -z ${camouflage_path} ]] && camouflage_path=1\n    sed -i \"/location/c \\\\\\tlocation \\/${camouflage_path}\\/\" ${nginx_conf}          #Modify the camouflage path of the nginx configuration file\n    sed -i \"/\\\"path\\\"/c \\\\\\t  \\\"path\\\":\\\"\\/${camouflage_path}\\/\\\"\" ${v2ray_conf}    #Modify the camouflage path of the v2ray configuration file\n    judge \"V2ray camouflage path modified\"\n}\n\nmenu() {\n    update_sh\n    echo -e \"\\t V2ray 安装管理脚本 ${Red}[${shell_version}]${Font}\"\n    echo -e \"\\t---authored by wulabing---\"\n    echo -e \"\\thttps://github.com/wulabing\\n\"\n    echo -e \"当前已安装版本:${shell_mode}\\n\"\n\n    echo -e \"—————————————— 安装向导 ——————————————\"\"\"\n    echo -e \"${Green}0.${Font}  升级 脚本\"\n    echo -e \"${Green}1.${Font}  安装 V2Ray (Nginx+ws+tls)\"\n    echo -e \"${Green}2.${Font}  安装 V2Ray (http/2)\"\n    echo -e \"${Green}3.${Font}  升级 V2Ray core\"\n    echo -e \"—————————————— 配置变更 ——————————————\"\n    echo -e \"${Green}4.${Font}  变更 UUID\"\n    echo -e \"${Green}6.${Font}  变更 port\"\n    echo -e \"${Green}7.${Font}  变更 TLS 版本(仅ws+tls有效)\"\n    echo -e \"${Green}18.${Font}  变更伪装路径\"\n    echo -e \"—————————————— 查看信息 ——————————————\"\n    echo -e \"${Green}8.${Font}  查看 实时访问日志\"\n    echo -e \"${Green}9.${Font}  查看 实时错误日志\"\n    echo -e \"${Green}10.${Font} 查看 V2Ray 配置信息\"\n    echo -e \"—————————————— 其他选项 ——————————————\"\n    echo -e \"${Green}11.${Font} 安装 4合1 bbr 锐速安装脚本\"\n    echo -e \"${Green}12.${Font} 安装 MTproxy(支持TLS混淆)\"\n    echo -e \"${Green}13.${Font} 证书 有效期更新\"\n    echo -e \"${Green}14.${Font} 卸载 V2Ray\"\n    echo -e \"${Green}15.${Font} 更新 证书crontab计划任务\"\n    echo -e \"${Green}16.${Font} 清空 证书遗留文件\"\n    echo -e \"${Green}17.${Font} 退出 \\n\"\n\n    read -rp \"请输入数字：\" menu_num\n    case $menu_num in\n    0)\n        update_sh\n        ;;\n    1)\n        shell_mode=\"ws\"\n        install_v2ray_ws_tls\n        ;;\n    2)\n        shell_mode=\"h2\"\n        install_v2_h2\n        ;;\n    3)\n        bash <(curl -L -s https://raw.githubusercontent.com/wulabing/V2Ray_ws-tls_bash_onekey/${github_branch}/v2ray.sh)\n        ;;\n    4)\n        read -rp \"请输入UUID:\" UUID\n        modify_UUID\n        start_process_systemd\n        ;;\n    6)\n        read -rp \"请输入连接端口:\" port\n        if grep -q \"ws\" $v2ray_qr_config_file; then\n            modify_nginx_port\n        elif grep -q \"h2\" $v2ray_qr_config_file; then\n            modify_inbound_port\n        fi\n        start_process_systemd\n        ;;\n    7)\n        tls_type\n        ;;\n    8)\n        show_access_log\n        ;;\n    9)\n        show_error_log\n        ;;\n    10)\n        basic_information\n        if [[ $shell_mode == \"ws\" ]]; then\n            vmess_link_image_choice\n        else\n            vmess_qr_link_image\n        fi\n        show_information\n        ;;\n    11)\n        bbr_boost_sh\n        ;;\n    12)\n        mtproxy_sh\n        ;;\n    13)\n        stop_process_systemd\n        ssl_update_manuel\n        start_process_systemd\n        ;;\n    14)\n        source '/etc/os-release'\n        uninstall_all\n        ;;\n    15)\n        acme_cron_update\n        ;;\n    16)\n        delete_tls_key_and_crt\n        ;;\n    17)\n        exit 0\n        ;;\n    18)\n        read -rp \"请输入伪装路径(注意！不需要加斜杠 eg:ray):\" camouflage_path\n        modify_camouflage_path\n        start_process_systemd\n        ;;\n    *)\n        echo -e \"${RedBG}请输入正确的数字${Font}\"\n        ;;\n    esac\n}\n\njudge_mode\nlist \"$1\"\n"
        },
        {
          "name": "ssl_update.sh",
          "type": "blob",
          "size": 0.4853515625,
          "content": "#!/usr/bin/env bash\n\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\nv2ray_qr_config_file=\"/usr/local/vmess_qr.json\"\ndomain=$(grep '\\\"add\\\"' $v2ray_qr_config_file | awk -F '\"' '{print $4}')\n\nsystemctl stop nginx &> /dev/null\nsleep 1\n\"/root/.acme.sh\"/acme.sh --cron --home \"/root/.acme.sh\" &> /dev/null\n\"/root/.acme.sh\"/acme.sh --installcert -d ${domain} --fullchainpath /data/v2ray.crt --keypath /data/v2ray.key --ecc\nsleep 1\nsystemctl start nginx &> /dev/null"
        },
        {
          "name": "tls",
          "type": "tree",
          "content": null
        },
        {
          "name": "v2ray.sh",
          "type": "blob",
          "size": 21.2197265625,
          "content": "#!/bin/bash\n\n# The files installed by the script conform to the Filesystem Hierarchy Standard:\n# https://wiki.linuxfoundation.org/lsb/fhs\n\n# The URL of the script project is:\n# https://github.com/v2fly/fhs-install-v2ray\n\n# The URL of the script is:\n# https://raw.githubusercontent.com/v2fly/fhs-install-v2ray/master/install-release.sh\n\n# If the script executes incorrectly, go to:\n# https://github.com/v2fly/fhs-install-v2ray/issues\n\n# If you modify the following variables, you also need to modify the unit file yourself:\n# You can modify it to /usr/local/lib/v2ray/\nDAT_PATH='/usr/local/lib/v2ray/'\n# You can modify it to /etc/v2ray/\nJSON_PATH='/etc/v2ray/'\n\ncheck_if_running_as_root() {\n    # If you want to run as another user, please modify $UID to be owned by this user\n    if [[ \"$UID\" -ne '0' ]]; then\n        echo \"error: You must run this script as root!\"\n        exit 1\n    fi\n}\n\nidentify_the_operating_system_and_architecture() {\n    if [[ \"$(uname)\" == 'Linux' ]]; then\n        case \"$(uname -m)\" in\n            'i386' | 'i686')\n                MACHINE='32'\n                ;;\n            'amd64' | 'x86_64')\n                MACHINE='64'\n                ;;\n            'armv5tel')\n                MACHINE='arm32-v5'\n                ;;\n            'armv6l')\n                MACHINE='arm32-v6'\n                ;;\n            'armv7' | 'armv7l' )\n                MACHINE='arm32-v7a'\n                ;;\n            'armv8' | 'aarch64')\n                MACHINE='arm64-v8a'\n                ;;\n            'mips')\n                MACHINE='mips32'\n                ;;\n            'mipsle')\n                MACHINE='mips32le'\n                ;;\n            'mips64')\n                MACHINE='mips64'\n                ;;\n            'mips64le')\n                MACHINE='mips64le'\n                ;;\n            'ppc64')\n                MACHINE='ppc64'\n                ;;\n            'ppc64le')\n                MACHINE='ppc64le'\n                ;;\n            'riscv64')\n                MACHINE='riscv64'\n                ;;\n            *)\n                echo \"error: The architecture is not supported.\"\n                exit 1\n                ;;\n        esac\n        if [[ ! -f '/etc/os-release' ]]; then\n            echo \"error: Don't use outdated Linux distributions.\"\n            exit 1\n        fi\n        if [[ -z \"$(ls -l /sbin/init | grep systemd)\" ]]; then\n            echo \"error: Only Linux distributions using systemd are supported.\"\n            exit 1\n        fi\n        if [[ \"$(command -v apt)\" ]]; then\n            PACKAGE_MANAGEMENT_INSTALL='apt install'\n            PACKAGE_MANAGEMENT_REMOVE='apt remove'\n        elif [[ \"$(command -v yum)\" ]]; then\n            PACKAGE_MANAGEMENT_INSTALL='yum install'\n            PACKAGE_MANAGEMENT_REMOVE='yum remove'\n            if [[ \"$(command -v dnf)\" ]]; then\n                PACKAGE_MANAGEMENT_INSTALL='dnf install'\n                PACKAGE_MANAGEMENT_REMOVE='dnf remove'\n            fi\n        elif [[ \"$(command -v zypper)\" ]]; then\n            PACKAGE_MANAGEMENT_INSTALL='zypper install'\n            PACKAGE_MANAGEMENT_REMOVE='zypper remove'\n        else\n            echo \"error: The script does not support the package manager in this operating system.\"\n            exit 1\n        fi\n    else\n        echo \"error: This operating system is not supported.\"\n        exit 1\n    fi\n}\n\njudgment_parameters() {\n    if [[ \"$#\" -gt '0' ]]; then\n        case \"$1\" in\n            '--remove')\n                if [[ \"$#\" -gt '1' ]]; then\n                    echo 'error: Please enter the correct parameters.'\n                    exit 1\n                fi\n                REMOVE='1'\n                ;;\n            '--version')\n                if [[ \"$#\" -gt '2' ]] || [[ -z \"$2\" ]]; then\n                    echo 'error: Please specify the correct version.'\n                    exit 1\n                fi\n                VERSION=\"$2\"\n                ;;\n            '-c' | '--check')\n                if [[ \"$#\" -gt '1' ]]; then\n                    echo 'error: Please enter the correct parameters.'\n                    exit 1\n                fi\n                CHECK='1'\n                ;;\n            '-f' | '--force')\n                if [[ \"$#\" -gt '1' ]]; then\n                    echo 'error: Please enter the correct parameters.'\n                    exit 1\n                fi\n                FORCE='1'\n                ;;\n            '-h' | '--help')\n                if [[ \"$#\" -gt '1' ]]; then\n                    echo 'error: Please enter the correct parameters.'\n                    exit 1\n                fi\n                HELP='1'\n                ;;\n            '-l' | '--local')\n                if [[ \"$#\" -gt '2' ]] || [[ -z \"$2\" ]]; then\n                    echo 'error: Please specify the correct local file.'\n                    exit 1\n                fi\n                LOCAL_FILE=\"$2\"\n                LOCAL_INSTALL='1'\n                ;;\n            '-p' | '--proxy')\n                case \"$2\" in\n                    'http://'*)\n                        ;;\n                    'https://'*)\n                        ;;\n                    'socks4://'*)\n                        ;;\n                    'socks4a://'*)\n                        ;;\n                    'socks5://'*)\n                        ;;\n                    'socks5h://'*)\n                        ;;\n                    *)\n                        echo 'error: Please specify the correct proxy server address.'\n                        exit 1\n                        ;;\n                esac\n                PROXY=\"-x$2\"\n                # Parameters available through a proxy server\n                if [[ \"$#\" -gt '2' ]]; then\n                    case \"$3\" in\n                        '--version')\n                            if [[ \"$#\" -gt '4' ]] || [[ -z \"$4\" ]]; then\n                                echo 'error: Please specify the correct version.'\n                                exit 1\n                            fi\n                            VERSION=\"$2\"\n                            ;;\n                        '-c' | '--check')\n                            if [[ \"$#\" -gt '3' ]]; then\n                                echo 'error: Please enter the correct parameters.'\n                                exit 1\n                            fi\n                            CHECK='1'\n                            ;;\n                        '-f' | '--force')\n                            if [[ \"$#\" -gt '3' ]]; then\n                                echo 'error: Please enter the correct parameters.'\n                                exit 1\n                            fi\n                            FORCE='1'\n                            ;;\n                        *)\n                            echo \"$0: unknown option -- -\"\n                            exit 1\n                            ;;\n                    esac\n                fi\n                ;;\n            *)\n                echo \"$0: unknown option -- -\"\n                exit 1\n                ;;\n        esac\n    fi\n}\n\ninstall_software() {\n    COMPONENT=\"$1\"\n    if [[ -n \"$(command -v \"$COMPONENT\")\" ]]; then\n        return\n    fi\n    ${PACKAGE_MANAGEMENT_INSTALL} \"$COMPONENT\"\n    if [[ \"$?\" -ne '0' ]]; then\n        echo \"error: Installation of $COMPONENT failed, please check your network.\"\n        exit 1\n    fi\n    echo \"info: $COMPONENT is installed.\"\n}\n\nversion_number() {\n    case \"$1\" in\n        'v'*)\n            echo \"$1\"\n            ;;\n        *)\n            echo \"v$1\"\n            ;;\n    esac\n}\n\nget_version() {\n    # 0: Install or update V2Ray.\n    # 1: Installed or no new version of V2Ray.\n    # 2: Install the specified version of V2Ray.\n    if [[ -z \"$VERSION\" ]]; then\n        # Determine the version number for V2Ray installed from a local file\n        if [[ -f '/usr/local/bin/v2ray' ]]; then\n            VERSION=\"$(/usr/local/bin/v2ray -version)\"\n            CURRENT_VERSION=\"$(version_number $(echo \"$VERSION\" | head -n 1 | awk -F ' ' '{print $2}'))\"\n            if [[ \"$LOCAL_INSTALL\" -eq '1' ]]; then\n                RELEASE_VERSION=\"$CURRENT_VERSION\"\n                return\n            fi\n        fi\n        # Get V2Ray release version number\n        TMP_FILE=\"$(mktemp)\"\n        install_software curl\n        # DO NOT QUOTE THESE `${PROXY}` VARIABLES!\n        if ! curl ${PROXY} -o \"$TMP_FILE\" 'https://api.github.com/repos/v2fly/v2ray-core/releases/latest'; then\n            rm \"$TMP_FILE\"\n            echo 'error: Failed to get release list, please check your network.'\n            exit 1\n        fi\n        RELEASE_LATEST=\"$(sed 'y/,/\\n/' \"$TMP_FILE\" | grep 'tag_name' | awk -F '\"' '{print $4}')\"\n        rm \"$TMP_FILE\"\n        RELEASE_VERSION=\"$(version_number \"$RELEASE_LATEST\")\"\n        # Compare V2Ray version numbers\n        if [[ \"$RELEASE_VERSION\" != \"$CURRENT_VERSION\" ]]; then\n            RELEASE_VERSIONSION_NUMBER=\"${RELEASE_VERSION#v}\"\n            RELEASE_MAJOR_VERSION_NUMBER=\"${RELEASE_VERSIONSION_NUMBER%%.*}\"\n            RELEASE_MINOR_VERSION_NUMBER=\"$(echo \"$RELEASE_VERSIONSION_NUMBER\" | awk -F '.' '{print $2}')\"\n            RELEASE_MINIMUM_VERSION_NUMBER=\"${RELEASE_VERSIONSION_NUMBER##*.}\"\n            CURRENT_VERSIONSION_NUMBER=\"$(echo \"${CURRENT_VERSION#v}\" | sed 's/-.*//')\"\n            CURRENT_MAJOR_VERSION_NUMBER=\"${CURRENT_VERSIONSION_NUMBER%%.*}\"\n            CURRENT_MINOR_VERSION_NUMBER=\"$(echo \"$CURRENT_VERSIONSION_NUMBER\" | awk -F '.' '{print $2}')\"\n            CURRENT_MINIMUM_VERSION_NUMBER=\"${CURRENT_VERSIONSION_NUMBER##*.}\"\n            if [[ \"$RELEASE_MAJOR_VERSION_NUMBER\" -gt \"$CURRENT_MAJOR_VERSION_NUMBER\" ]]; then\n                return 0\n            elif [[ \"$RELEASE_MAJOR_VERSION_NUMBER\" -eq \"$CURRENT_MAJOR_VERSION_NUMBER\" ]]; then\n                if [[ \"$RELEASE_MINOR_VERSION_NUMBER\" -gt \"$CURRENT_MINOR_VERSION_NUMBER\" ]]; then\n                    return 0\n                elif [[ \"$RELEASE_MINOR_VERSION_NUMBER\" -eq \"$CURRENT_MINOR_VERSION_NUMBER\" ]]; then\n                    if [[ \"$RELEASE_MINIMUM_VERSION_NUMBER\" -gt \"$CURRENT_MINIMUM_VERSION_NUMBER\" ]]; then\n                        return 0\n                    else\n                        return 1\n                    fi\n                else\n                    return 1\n                fi\n            else\n                return 1\n            fi\n        elif [[ \"$RELEASE_VERSION\" == \"$CURRENT_VERSION\" ]]; then\n            return 1\n        fi\n    else\n        RELEASE_VERSION=\"$(version_number \"$VERSION\")\"\n        return 2\n    fi\n}\n\ndownload_v2ray() {\n    mkdir \"$TMP_DIRECTORY\"\n    DOWNLOAD_LINK=\"https://github.com/v2fly/v2ray-core/releases/download/$RELEASE_VERSION/v2ray-linux-$MACHINE.zip\"\n    echo \"Downloading V2Ray archive: $DOWNLOAD_LINK\"\n    if ! curl ${PROXY} -L -H 'Cache-Control: no-cache' -o \"$ZIP_FILE\" \"$DOWNLOAD_LINK\"; then\n        echo 'error: Download failed! Please check your network or try again.'\n        return 1\n    fi\n    echo \"Downloading verification file for V2Ray archive: $DOWNLOAD_LINK.dgst\"\n    if ! curl ${PROXY} -L -H 'Cache-Control: no-cache' -o \"$ZIP_FILE.dgst\" \"$DOWNLOAD_LINK.dgst\"; then\n        echo 'error: Download failed! Please check your network or try again.'\n        return 1\n    fi\n    if [[ \"$(cat \"$ZIP_FILE\".dgst)\" == 'Not Found' ]]; then\n        echo 'error: This version does not support verification. Please replace with another version.'\n        return 1\n    fi\n\n    # Verification of V2Ray archive\n    for LISTSUM in 'md5' 'sha1'; do\n        SUM=\"$(${LISTSUM}sum \"$ZIP_FILE\" | sed 's/ .*//')\"\n        CHECKSUM=\"$(grep ${LISTSUM^^} \"$ZIP_FILE\".dgst | grep \"$SUM\" -o -a | uniq)\"\n        if [[ \"$SUM\" != \"$CHECKSUM\" ]]; then\n            echo 'error: Check failed! Please check your network or try again.'\n            return 1\n        fi\n    done\n}\n\ndecompression() {\n    if ! unzip -q \"$1\" -d \"$TMP_DIRECTORY\"; then\n        echo 'error: V2Ray decompression failed.'\n        rm -r \"$TMP_DIRECTORY\"\n        echo \"removed: $TMP_DIRECTORY\"\n        exit 1\n    fi\n    echo \"info: Extract the V2Ray package to $TMP_DIRECTORY and prepare it for installation.\"\n}\n\ninstall_file() {\n    NAME=\"$1\"\n    if [[ \"$NAME\" == 'v2ray' ]] || [[ \"$NAME\" == 'v2ctl' ]]; then\n        install -m 755 \"${TMP_DIRECTORY}$NAME\" \"/usr/local/bin/$NAME\"\n    elif [[ \"$NAME\" == 'geoip.dat' ]] || [[ \"$NAME\" == 'geosite.dat' ]]; then\n        install -m 644 \"${TMP_DIRECTORY}$NAME\" \"${DAT_PATH}$NAME\"\n    fi\n}\n\ninstall_v2ray() {\n    # Install V2Ray binary to /usr/local/bin/ and $DAT_PATH\n    install_file v2ray\n    install_file v2ctl\n    install -d \"$DAT_PATH\"\n    # If the file exists, geoip.dat and geosite.dat will not be installed or updated\n    if [[ ! -f \"${DAT_PATH}.undat\" ]]; then\n        install_file geoip.dat\n        install_file geosite.dat\n    fi\n\n    # Install V2Ray configuration file to $JSON_PATH\n    if [[ ! -d \"$JSON_PATH\" ]]; then\n        install -d \"$JSON_PATH\"\n        echo \"{}\" > \"${JSON_PATH}config.json\"\n        CONFIG_NEW='1'\n    fi\n\n    # Used to store V2Ray log files\n    if [[ ! -d '/var/log/v2ray/' ]]; then\n        if [[ -n \"$(id nobody | grep nogroup)\" ]]; then\n            install -d -m 755 -o root -g root /var/log/v2ray/\n            install -m 644 -o root -g root /dev/null /var/log/v2ray/access.log\n            install -m 644 -o root -g root /dev/null /var/log/v2ray/error.log\n        else\n            install -d -m 755 -o root -g root /var/log/v2ray/\n            install -m 644 -o root -g root /dev/null /var/log/v2ray/access.log\n            install -m 644 -o root -g root /dev/null /var/log/v2ray/error.log\n        fi\n        LOG='1'\n    fi\n}\n\ninstall_startup_service_file() {\n    if [[ ! -f '/etc/systemd/system/v2ray.service' ]]; then\n        mkdir \"${TMP_DIRECTORY}systemd/system/\"\n        install_software curl\n        cat > \"${TMP_DIRECTORY}systemd/system/v2ray.service\" <<-EOF\n[Unit]\nDescription=V2Ray Service\nAfter=network.target nss-lookup.target\n\n[Service]\nUser=root\nCapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nAmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nEnvironment=V2RAY_LOCATION_ASSET=/usr/local/lib/v2ray/\nExecStart=/usr/local/bin/v2ray run -c /etc/v2ray/config.json\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n        cat > \"${TMP_DIRECTORY}systemd/system/v2ray@.service\" <<-EOF\n[Unit]\nDescription=V2Ray Service\nAfter=network.target nss-lookup.target\n\n[Service]\nUser=root\nCapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nAmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE\nNoNewPrivileges=true\nEnvironment=V2RAY_LOCATION_ASSET=/usr/local/lib/v2ray/\nExecStart=/usr/local/bin/v2ray run -c /etc/v2ray/%i.json\nRestart=on-failure\n\n[Install]\nWantedBy=multi-user.target\nEOF\n        install -m 644 \"${TMP_DIRECTORY}systemd/system/v2ray.service\" /etc/systemd/system/v2ray.service\n        install -m 644 \"${TMP_DIRECTORY}systemd/system/v2ray@.service\" /etc/systemd/system/v2ray@.service\n        SYSTEMD='1'\n    fi\n}\n\nstart_v2ray() {\n    if [[ -f '/etc/systemd/system/v2ray.service' ]]; then\n        if [[ -z \"$V2RAY_CUSTOMIZE\" ]]; then\n            systemctl start v2ray\n        else\n            systemctl start \"$V2RAY_CUSTOMIZE\"\n        fi\n    fi\n    if [[ \"$?\" -ne 0 ]]; then\n        echo 'error: Failed to start V2Ray service.'\n        exit 1\n    fi\n    echo 'info: Start the V2Ray service.'\n}\n\nstop_v2ray() {\n    V2RAY_CUSTOMIZE=\"$(systemctl list-units | grep 'v2ray@' | awk -F ' ' '{print $1}')\"\n    if [[ -z \"$V2RAY_CUSTOMIZE\" ]]; then\n        systemctl stop v2ray\n    else\n        systemctl stop \"$V2RAY_CUSTOMIZE\"\n    fi\n    if [[ \"$?\" -ne '0' ]]; then\n        echo 'error: Stopping the V2Ray service failed.'\n        exit 1\n    fi\n    echo 'info: Stop the V2Ray service.'\n}\n\ncheck_update() {\n    if [[ -f '/etc/systemd/system/v2ray.service' ]]; then\n        get_version\n        if [[ \"$?\" -eq '0' ]]; then\n            echo \"info: Found the latest release of V2Ray $RELEASE_VERSION . (Current release: $CURRENT_VERSION)\"\n        elif [[ \"$?\" -eq '1' ]]; then\n            echo \"info: No new version. The current version of V2Ray is $CURRENT_VERSION .\"\n        fi\n        exit 0\n    else\n        echo 'error: V2Ray is not installed.'\n        exit 1\n    fi\n}\n\nremove_v2ray() {\n    if [[ -n \"$(systemctl list-unit-files | grep 'v2ray')\" ]]; then\n        if [[ -n \"$(pidof v2ray)\" ]]; then\n            stop_v2ray\n        fi\n        NAME=\"$1\"\n        rm /usr/local/bin/v2ray\n        rm /usr/local/bin/v2ctl\n        rm -r \"$DAT_PATH\"\n        rm /etc/systemd/system/v2ray.service\n        rm /etc/systemd/system/v2ray@.service\n        if [[ \"$?\" -ne '0' ]]; then\n            echo 'error: Failed to remove V2Ray.'\n            exit 1\n        else\n            echo 'removed: /usr/local/bin/v2ray'\n            echo 'removed: /usr/local/bin/v2ctl'\n            echo \"removed: $DAT_PATH\"\n            echo 'removed: /etc/systemd/system/v2ray.service'\n            echo 'removed: /etc/systemd/system/v2ray@.service'\n            echo 'Please execute the command: systemctl disable v2ray'\n            echo \"You may need to execute a command to remove dependent software: $PACKAGE_MANAGEMENT_REMOVE curl unzip\"\n            echo 'info: V2Ray has been removed.'\n            echo 'info: If necessary, manually delete the configuration and log files.'\n            echo \"info: e.g., $JSON_PATH and /var/log/v2ray/ ...\"\n            exit 0\n        fi\n    else\n        echo 'error: V2Ray is not installed.'\n        exit 1\n    fi\n}\n\n# Explanation of parameters in the script\nshow_help() {\n    echo \"usage: $0 [--remove | --version number | -c | -f | -h | -l | -p]\"\n    echo '  [-p address] [--version number | -c | -f]'\n    echo '  --remove        Remove V2Ray'\n    echo '  --version       Install the specified version of V2Ray, e.g., --version v4.18.0'\n    echo '  -c, --check     Check if V2Ray can be updated'\n    echo '  -f, --force     Force installation of the latest version of V2Ray'\n    echo '  -h, --help      Show help'\n    echo '  -l, --local     Install V2Ray from a local file'\n    echo '  -p, --proxy     Download through a proxy server, e.g., -p http://127.0.0.1:8118 or -p socks5://127.0.0.1:1080'\n    exit 0\n}\n\nmain() {\n    check_if_running_as_root\n    identify_the_operating_system_and_architecture\n    judgment_parameters \"$@\"\n\n    # Parameter information\n    [[ \"$HELP\" -eq '1' ]] && show_help\n    [[ \"$CHECK\" -eq '1' ]] && check_update\n    [[ \"$REMOVE\" -eq '1' ]] && remove_v2ray\n\n    # Two very important variables\n    TMP_DIRECTORY=\"$(mktemp -du)/\"\n    ZIP_FILE=\"${TMP_DIRECTORY}v2ray-linux-$MACHINE.zip\"\n\n    # Install V2Ray from a local file, but still need to make sure the network is available\n    if [[ \"$LOCAL_INSTALL\" -eq '1' ]]; then\n        echo 'warn: Install V2Ray from a local file, but still need to make sure the network is available.'\n        echo -n 'warn: Please make sure the file is valid because we cannot confirm it. (Press any key) ...'\n        read\n        install_software unzip\n        mkdir \"$TMP_DIRECTORY\"\n        decompression \"$LOCAL_FILE\"\n    else\n        # Normal way\n        get_version\n        NUMBER=\"$?\"\n        if [[ \"$NUMBER\" -eq '0' ]] || [[ \"$FORCE\" -eq '1' ]] || [[ \"$NUMBER\" -eq 2 ]]; then\n            echo \"info: Installing V2Ray $RELEASE_VERSION for $(uname -m)\"\n            download_v2ray\n            if [[ \"$?\" -eq '1' ]]; then\n                rm -r \"$TMP_DIRECTORY\"\n                echo \"removed: $TMP_DIRECTORY\"\n                exit 0\n            fi\n            install_software unzip\n            decompression \"$ZIP_FILE\"\n        elif [[ \"$NUMBER\" -eq '1' ]]; then\n            echo \"info: No new version. The current version of V2Ray is $CURRENT_VERSION .\"\n            exit 0\n        fi\n    fi\n\n    # Determine if V2Ray is running\n    if [[ -n \"$(systemctl list-unit-files | grep 'v2ray')\" ]]; then\n        if [[ -n \"$(pidof v2ray)\" ]]; then\n            stop_v2ray\n            V2RAY_RUNNING='1'\n        fi\n    fi\n    install_v2ray\n    install_startup_service_file\n    echo 'installed: /usr/local/bin/v2ray'\n    echo 'installed: /usr/local/bin/v2ctl'\n    # If the file exists, the content output of installing or updating geoip.dat and geosite.dat will not be displayed\n    if [[ ! -f \"${DAT_PATH}.undat\" ]]; then\n        echo \"installed: ${DAT_PATH}geoip.dat\"\n        echo \"installed: ${DAT_PATH}geosite.dat\"\n    fi\n    if [[ \"$CONFIG_NEW\" -eq '1' ]]; then\n        echo \"installed: ${JSON_PATH}config.json\"\n    fi\n    if [[ \"$CONFDIR\" -eq '1' ]]; then\n        echo \"installed: ${JSON_PATH}00_log.json\"\n        echo \"installed: ${JSON_PATH}01_api.json\"\n        echo \"installed: ${JSON_PATH}02_dns.json\"\n        echo \"installed: ${JSON_PATH}03_routing.json\"\n        echo \"installed: ${JSON_PATH}04_policy.json\"\n        echo \"installed: ${JSON_PATH}05_inbounds.json\"\n        echo \"installed: ${JSON_PATH}06_outbounds.json\"\n        echo \"installed: ${JSON_PATH}07_transport.json\"\n        echo \"installed: ${JSON_PATH}08_stats.json\"\n        echo \"installed: ${JSON_PATH}09_reverse.json\"\n    fi\n    if [[ \"$LOG\" -eq '1' ]]; then\n        echo 'installed: /var/log/v2ray/'\n        echo 'installed: /var/log/v2ray/access.log'\n        echo 'installed: /var/log/v2ray/error.log'\n    fi\n    if [[ \"$SYSTEMD\" -eq '1' ]]; then\n        echo 'installed: /etc/systemd/system/v2ray.service'\n        echo 'installed: /etc/systemd/system/v2ray@.service'\n    fi\n    rm -r \"$TMP_DIRECTORY\"\n    echo \"removed: $TMP_DIRECTORY\"\n    if [[ \"$LOCAL_INSTALL\" -eq '1' ]]; then\n        get_version\n    fi\n    echo \"info: V2Ray $RELEASE_VERSION is installed.\"\n    echo \"You may need to execute a command to remove dependent software: $PACKAGE_MANAGEMENT_REMOVE curl unzip\"\n    if [[ \"$V2RAY_RUNNING\" -eq '1' ]]; then\n        start_v2ray\n    else\n        echo 'Please execute the command: systemctl enable v2ray; systemctl start v2ray'\n    fi\n}\n\nmain \"$@\"\n"
        }
      ]
    }
  ]
}