{
  "metadata": {
    "timestamp": 1736568742738,
    "page": 837,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "basherpm/basher",
      "stars": 1170,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "cellar/\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.224609375,
          "content": "[submodule \"tests/vendor/bats-core\"]\n\tpath = tests/vendor/bats-core\n\turl = https://github.com/ztombol/bats-core\n[submodule \"tests/vendor/bats-assert\"]\n\tpath = tests/vendor/bats-assert\n\turl = https://github.com/ztombol/bats-assert\n"
        },
        {
          "name": ".projections.json",
          "type": "blob",
          "size": 0.1318359375,
          "content": "{\n  \"libexec/*\": {\n    \"alternate\": \"tests/{}.bats\"\n  },\n  \"tests/*.bats\": {\n    \"runner\": \"bats\",\n    \"alternate\": \"libexec/{}\"\n  }\n}\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.32421875,
          "content": "# Contributing\n\n## Commits\n\nWrite a [good commit message][commit].\n\n## Tests\n\nTo run the tests, install bats:\n\n~~~ sh\n$ basher install sstephenson/bats\n~~~\n\nupdate submodules:\n\n~~~ sh\n$ git submodule update --init\n~~~\n\nand then run:\n\n~~~ sh\n$ make\n~~~\n\n[commit]: http://tbaggery.com/2008/04/19/a-note-about-git-commit-messages.html\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.2333984375,
          "content": "ARG bashver=latest\n\nFROM bash:${bashver}\n\nRUN apk add --no-cache git; \\\ngit config --global user.email \"user@example.com\"; \\\ngit config --global user.name \"User Name\";\n\nCOPY . /opt/basher/\n\nENTRYPOINT [\"bash\", \"/opt/basher/bats/bin/bats\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Juan Ibiapina\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.03125,
          "content": "test:\n\tbats tests\n\n.PHONY: test\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 5.0458984375,
          "content": "# basher\n\nA package manager for shell scripts and functions.\n\nBasher allows you to quickly install shell packages directly from github (or\nother sites). Instead of looking for specific install instructions for each\npackage and messing with your path, basher will create a central location for\nall packages and manage their binaries for you.\n\nEven though it is called basher, it also works with zsh and fish.\n\n[![Build Status](https://travis-ci.org/basherpm/basher.svg?branch=master)](https://travis-ci.org/basherpm/basher)\n\n## Installation\n\nYou can install Basher in 1 line. This will install Basher, and add it to your .bashrc/.zshrc file - in a way that can automatically be uninstalled later:\n\n\tcurl -s https://raw.githubusercontent.com/basherpm/basher/master/install.sh | bash\n\n#### Install on Mac OSX\n \nBasher requires `bash >= 4`, and the `realpath` utility from `coreutils`. On\nosx you can install both with brew:\n\n```\n$ brew install bash coreutils\n```\n\n#### Manual method to Install\n\n1. Checkout basher on `~/.basher`\n\n    ~~~ sh\n    $ git clone --depth=1 https://github.com/basherpm/basher.git ~/.basher\n    ~~~\n\n2. Initialize basher in your shell initialization\n\n    ~~~ sh\n    export PATH=\"$HOME/.basher/bin:$PATH\"\n    eval \"$(basher init - bash)\" # replace `bash` with `zsh` if you use zsh\n    ~~~\n\n    **Fish**: Use the following commands instead:\n\n    ~~~ sh\n    if test -d ~/.basher\n      set basher ~/.basher/bin\n    end\n    set -gx PATH $basher $PATH\n    status --is-interactive; and . (basher init - fish|psub)\n    ~~~\n\n\n## Updating\n\nGo to the directory where you cloned basher and pull the latest changes:\n\n~~~ sh\n$ cd ~/.basher\n$ git pull\n~~~\n\n## Usage\n\n### Installing packages from Github\n\n~~~ sh\n$ basher install sstephenson/bats\n~~~\n\nThis will install bats from https://github.com/sstephenson/bats and add `bin/bats` to the PATH.\n\n### Installing packages from other sites\n\n~~~ sh\n$ basher install bitbucket.org/user/repo_name\n~~~\n\nThis will install `repo_name` from https://bitbucket.org/user/repo_name\n\n### Using ssh instead of https\n\nIf you want to do local development on installed packages and you have ssh\naccess to the site, use `--ssh` to override the protocol:\n\n~~~ sh\n$ basher install --ssh juanibiapina/gg\n~~~\n\n### Installing a local package\n\nIf you develop a package locally and want to try it through basher,\nuse the `link` command:\n\n~~~ sh\n$ basher link directory my_namespace/my_package\n~~~\n\nThe `link` command will install the dependencies of the local package.\nYou can prevent that with the `--no-deps` option:\n\n~~~ sh\n$ basher link --no-deps directory my_namespace/my_package\n~~~\n\n### Sourcing files from a package into current shell\n\nBasher provides an `include` function that allows sourcing files into the\ncurrent shell. After installing a package, you can run:\n\n```\ninclude username/repo lib/file.sh\n```\n\nThis will source a file `lib/file.sh` under the package `username/repo`.\n\n### Command summary\n\n- `basher commands` - List commands\n- `basher help <command>` - Display help for a command\n- `basher uninstall <package>` - Uninstall a package\n- `basher list` - List installed packages\n- `basher outdated` - List packages which are not in the latest version\n- `basher upgrade <package>` - Upgrade a package to the latest version\n\n### Configuration options\n\nTo change the behavior of basher, you can set the following variables either\nglobally or before each command:\n\n- If `$XDG_DATA_HOME/basher` is a directory, then `$BASHER_ROOT` will be set to `$XDG_DATA_HOME/basher` instead of the usual `$HOME/.basher`. If `$XDG_DATA_HOME` is not set or is empty, then it defaults to `~/.local/share`.\n- `BASHER_FULL_CLONE=true` - Clones the full repo history instead of only the last commit (useful for package development)\n- `BASHER_PREFIX` - set the installation and package checkout prefix (default is `$BASHER_ROOT/cellar`).  Setting this to `/usr/local`, for example, will install binaries to `/usr/local/bin`, manpages to `/usr/local/man`, completions to `/usr/local/completions`, and clone packages to `/usr/local/packages`.  This allows you to manage \"global packages\", distinct from individual user packages.\n\n## Packages\n\nPackages are simply repos (username/repo). You may also specify a site\n(site/username/repo).\n\nAny files inside a bin directory are added to the path. If there is no bin\ndirectory, any executable files in the package root are added to the path.\n\nAny manpages (files ended in `\\.[0-9]`) inside a `man` directory are added\nto the manpath.\n\nOptionally, a repo might contain a `package.sh` file which specifies binaries,\ndependencies and completions in the following format:\n\n~~~ sh\nBINS=folder/file1:folder/file2.sh\nDEPS=user1/repo1:user2/repo2\nBASH_COMPLETIONS=completions/package\nZSH_COMPLETIONS=completions/_package\n~~~\n\nBINS specified in this fashion have higher precedence then the inference rules\nabove.\n\n### Package Directory\n\nA list of working packages can be found on https://www.basher.it/. There\nyou can also find a badge if you want to include it in your readme:\n\n[![basher install](https://img.shields.io/badge/basher-install-white?logo=gnu-bash&style=flat)](https://www.basher.it/package/)\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "cellar",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.28125,
          "content": "#!/usr/bin/env bash\n\ndie() {\n  echo \"!! $1 \" >&2\n  echo \"!! -----------------------------\" >&2\n  exit 1\n}\n\nxdg_basher_dir=\"${XDG_DATA_HOME:-$HOME/.local/share}/basher\"\n\n## stop if basher is already installed\n[[ -d \"$HOME/.basher\" ]] && die \"basher is already installed on [$HOME/.basher]\"\n[[ -d \"$xdg_basher_dir\" ]] && die \"basher is already installed on [$xdg_basher_dir]\"\n\n## stop if git is not installed\ngit version >/dev/null 2>&1 || die \"git is not installed on this machine\"\n\n## install the scripts on ~/.basher\necho \". download basher code to ~/.basher\"\ngit clone https://github.com/basherpm/basher.git ~/.basher 2> /dev/null\n\n## now check what shell is running\nshell_type=$(basename \"$SHELL\")\necho \". detected shell type: $shell_type\"\ncase \"$shell_type\" in\nbash)  startup_type=\"simple\" ; startup_script=\"$HOME/.bashrc\" ;;\nzsh)   startup_type=\"simple\" ; startup_script=\"$HOME/.zshrc\"  ;;\nsh)    startup_type=\"simple\" ; startup_script=\"$HOME/.profile\";;\nfish)  startup_type=\"fish\"   ; startup_script=\"$HOME/.config/fish/config.fish\"  ;;\n*)     startup_type=\"?\"      ; startup_script=\"\" ;   ;;\nesac\n\n## startup script should exist already\n[[ -n \"$startup_script\" && ! -f \"$startup_script\" ]] && die \"startup script [$startup_script] does not exist\"\n\n## basher_keyword will allow us to remove the lines upon uninstall\nbasher_keyword=\"basher5ea843\"\n\n## now add the basher initialisation lines to the user's startup script\necho \". add basher initialisation to [$startup_script]\"\nif [[ \"$startup_type\" == \"simple\" ]]; then\n  (\n    echo \"export PATH=\\\"\\$HOME/.basher/bin:\\$PATH\\\"   ##$basher_keyword\"\n    # shellcheck disable=SC2086\n    echo \"eval \\\"\\$(basher init - $shell_type)\\\"             ##$basher_keyword\"\n  ) >>\"$startup_script\"\nelif [[ \"$startup_type\" == \"fish\" ]]; then\n  (\n    echo \"if test -d ~/.basher          ##$basher_keyword\"\n    echo \"  set basher ~/.basher/bin    ##$basher_keyword\"\n    echo \"end                           ##$basher_keyword\"\n    # shellcheck disable=SC2154\n    echo \"set -gx PATH \\$basher \\$PATH    ##$basher_keyword\"\n    echo \"status --is-interactive; and . (basher init - $shell_type | psub)    ##$basher_keyword\"\n  ) >>\"$startup_script\"\nelse\n  die \"unknown shell [$shell_type] - can't initialise\"\nfi\n\n## script is finished\necho \"basher is installed - open a new terminal window to start using it\"\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 1.8076171875,
          "content": "#!/usr/bin/env bash\n\ndie() {\n  echo \"!! $1 \" >&2\n  echo \"!! -----------------------------\" >&2\n  exit 1\n}\n\nxdg_basher_dir=\"${XDG_DATA_HOME:-$HOME/.local/share}/basher\"\n\n## stop if basher is not installed\n[[ -d \"$HOME/.basher\" || -d \"$xdg_basher_dir\" ]] || die \"basher doesn't seem to be installed on [$HOME/.basher] or [$xdg_basher_dir]\"\necho \". remove basher code and installed packages\"\nbasher list\nsleep 2\n[ -d \"$HOME/.basher\" ] && rm -fr \"$HOME/.basher\"\n[ -d \"$xdg_basher_dir\" ] && rm -fr \"$xdg_basher_dir\"\n\n## now check what shell is running\nshell_type=$(basename \"$SHELL\")\ncase \"$shell_type\" in\nbash)  startup_type=\"simple\" ; startup_script=\"$HOME/.bashrc\" ;;\nzsh)   startup_type=\"simple\" ; startup_script=\"$HOME/.zshrc\"  ;;\nsh)    startup_type=\"simple\" ; startup_script=\"$HOME/.profile\";;\nfish)  startup_type=\"fish\"   ; startup_script=\"$HOME/.config/fish/config.fish\"  ;;\n*)     startup_type=\"?\"      ; startup_script=\"\" ;   ;;\nesac\n\n## startup script should exist already\n[[ -n \"$startup_script\" && ! -f \"$startup_script\" ]] && die \"startup script [$startup_script] does not exist\"\n\n## basher_keyword will allow us to remove the lines upon uninstall\nbasher_keyword=\"basher5ea843\"\n\necho \". following basher folders are in your path:\"\necho $PATH | tr ':' \"\\n\" | grep basher\n\nif grep -q \"$basher_keyword\" \"$startup_script\" ; then\n  echo \". remove basher from startup script [$startup_script]\"\n  sleep 1\n  temp_file=\"$startup_script.temp\"\n  cp \"$startup_script\" \"$temp_file\"\n  < \"$temp_file\" grep -v \"$basher_keyword\" > \"$startup_script\"\n  rm \"$temp_file\"\nelif grep -q basher \"$startup_script\" ; then\n    grep basher \"$startup_script\"\n    die \"Can't auto-remove the lines from $(basename $startup_script) - please do so manually \"\nelse\n    die \"Can't find initialisation commands for basher\"\nfi\n\n## script is finished\necho \"basher is uninstalled\"\n"
        }
      ]
    }
  ]
}