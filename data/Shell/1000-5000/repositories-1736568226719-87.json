{
  "metadata": {
    "timestamp": 1736568226719,
    "page": 87,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "apple/tensorflow_macos",
      "stars": 3672,
      "defaultBranch": "master",
      "files": [
        {
          "name": "ATTRIBUTIONS.md",
          "type": "blob",
          "size": 0.255859375,
          "content": "# Attributions\n\nWe include binary wheels of the following open source packages compiled for macOS 11.0: \n\n- NumPy: https://github.com/numpy/numpy\n- SciPy: https://github.com/scipy/scipy\n- gRPC: https://github.com/grpc/grpc\n- h5py: https://github.com/h5py/h5py\n\n\n"
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 2.263671875,
          "content": "Copyright (C) 2020 Apple Inc. All Rights Reserved.\n\nIMPORTANT:  This Apple software is supplied to you by Apple\nInc. (\"Apple\") in consideration of your agreement to the following\nterms, and your use, installation, modification or redistribution of\nthis Apple software constitutes acceptance of these terms.  If you do\nnot agree with these terms, please do not use, install, modify or\nredistribute this Apple software.\n\nIn consideration of your agreement to abide by the following terms, and\nsubject to these terms, Apple grants you a personal, non-exclusive\nlicense, under Apple's copyrights in this original Apple software (the\n\"Apple Software\"), to use, reproduce, modify and redistribute the Apple\nSoftware, with or without modifications, in source and/or binary forms;\nprovided that if you redistribute the Apple Software in its entirety and\nwithout modifications, you must retain this notice and the following\ntext and disclaimers in all such redistributions of the Apple Software.\nNeither the name, trademarks, service marks or logos of Apple Inc. may\nbe used to endorse or promote products derived from the Apple Software\nwithout specific prior written permission from Apple.  Except as\nexpressly stated in this notice, no other rights or licenses, express or\nimplied, are granted by Apple herein, including but not limited to any\npatent rights that may be infringed by your derivative works or by other\nworks in which the Apple Software may be incorporated.\n\nThe Apple Software is provided by Apple on an \"AS IS\" basis.  APPLE\nMAKES NO WARRANTIES, EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION\nTHE IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND FITNESS\nFOR A PARTICULAR PURPOSE, REGARDING THE APPLE SOFTWARE OR ITS USE AND\nOPERATION ALONE OR IN COMBINATION WITH YOUR PRODUCTS.\n\nIN NO EVENT SHALL APPLE BE LIABLE FOR ANY SPECIAL, INDIRECT, INCIDENTAL\nOR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF\nSUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS\nINTERRUPTION) ARISING IN ANY WAY OUT OF THE USE, REPRODUCTION,\nMODIFICATION AND/OR DISTRIBUTION OF THE APPLE SOFTWARE, HOWEVER CAUSED\nAND WHETHER UNDER THEORY OF CONTRACT, TORT (INCLUDING NEGLIGENCE),\nSTRICT LIABILITY OR OTHERWISE, EVEN IF APPLE HAS BEEN ADVISED OF THE\nPOSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.81640625,
          "content": "## *You can now leverage Apple’s tensorflow-metal PluggableDevice in TensorFlow v2.5 for accelerated training on Mac GPUs directly with Metal. Learn more [here](https://developer.apple.com/metal/tensorflow-plugin/).*\n\n \n\n \n  \n\n\n## Mac-optimized TensorFlow and TensorFlow Addons\n\n### INTRODUCTION\n\nThis pre-release delivers hardware-accelerated TensorFlow and TensorFlow Addons for macOS 11.0+. Native hardware acceleration is supported on M1 Macs and Intel-based Macs through Apple’s [ML Compute](https://developer.apple.com/documentation/mlcompute) framework.\n\n### CURRENT RELEASE\n\n- 0.1-alpha3\n\n### SUPPORTED VERSIONS\n\n- TensorFlow r2.4rc0\n- TensorFlow Addons 0.11.2\n\n### REQUIREMENTS\n\n- macOS 11.0+\n- Python 3.8 (required to be downloaded from [Xcode Command Line Tools](https://developer.apple.com/download/more/?=command%20line%20tools) for M1 Macs).\n\n### INSTALLATION\n\nAn archive containing Python packages and an installation script can be downloaded from the [releases](https://github.com/apple/tensorflow_macos/releases).\n\n- To quickly try this out, copy and paste the following into Terminal:\n\n  ```\n  % /bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/apple/tensorflow_macos/master/scripts/download_and_install.sh)\"\n  ```\n\n  This will verify your system, ask you for confirmation, then create a [virtual environment](https://docs.python.org/3.8/tutorial/venv.html) with TensorFlow for macOS installed.\n\n- Alternatively, download the archive file from the [releases](https://github.com/apple/tensorflow_macos/releases). The archive contains an installation script, accelerated versions of TensorFlow, TensorFlow Addons, and needed dependencies.\n\n  ```\n  % curl -fLO https://github.com/apple/tensorflow_macos/releases/download/v0.1alpha2/tensorflow_macos-${VERSION}.tar.gz\n  % tar xvzf tensorflow_macos-${VERSION}.tar\n  % cd tensorflow_macos\n  % ./install_venv.sh --prompt\n  ```\n\n#### Installation on Conda\n\nThis pre-release version supports installation and testing using the Python from Xcode Command Line Tools. See [#153](https://github.com/apple/tensorflow_macos/issues/153) for more information on installation in a Conda environment.\n\n#### Notes\n\nFor M1 Macs, the following packages are currently unavailable:\n\n- SciPy and dependent packages\n- Server/Client TensorBoard packages\n\nWhen installing pip packages in a virtual environment, you may need to specify `--target` as follows:\n\n```\n% pip install --upgrade -t \"${VIRTUAL_ENV}/lib/python3.8/site-packages/\" PACKAGE_NAME\n```\n\n### ISSUES AND FEEDBACK\n\nPlease submit feature requests or report issues via [GitHub Issues](https://github.com/apple/tensorflow_macos/issues).\n\n### ADDITIONAL INFORMATION\n\n#### Device Selection (Optional)\n\nIt is not necessary to make any changes to your existing TensorFlow scripts to use ML Compute as a backend for TensorFlow and TensorFlow Addons.\n\nThere is an optional `mlcompute.set_mlc_device(device_name='any')` API for ML Compute device selection. The default value for `device_name` is `'any'`, which means ML Compute will select the best available device on your system, including multiple GPUs on multi-GPU configurations. Other available options are `'cpu'` and `'gpu'`. Please note that in eager mode, ML Compute will use the CPU. For example, to choose the CPU device, you may do the following:\n\n  ```\n  # Import mlcompute module to use the optional set_mlc_device API for device selection with ML Compute.\n  from tensorflow.python.compiler.mlcompute import mlcompute\n\n  # Select CPU device.\n  mlcompute.set_mlc_device(device_name='cpu') # Available options are 'cpu', 'gpu', and 'any'.\n  ```\n\n#### Unsupported TensorFlow Features\n\nThe following TensorFlow features are currently not supported in this fork:\n\n- [tf.vectorized_map](https://www.tensorflow.org/api_docs/python/tf/vectorized_map)\n- [Higher-order gradients](https://www.tensorflow.org/guide/advanced_autodiff#higher-order_gradients)\n- Jacobian-vector products (aka. [forwardprop](https://www.tensorflow.org/api_docs/python/tf/autodiff/ForwardAccumulator))\n\n\n#### Logs and Debugging\n\n##### Graph mode\n\nLogging provides more information about what happens when a TensorFlow model is optimized by ML Compute. Turn logging on by setting the environment variable `TF_MLC_LOGGING=1` when executing the model script. The following is the list of information that is logged in graph mode:\n\n- Device used by ML Compute.\n- Original TensorFlow graph without ML Compute.\n- TensorFlow graph after TensorFlow operations have been replaced with ML Compute.\n    - Look for MLCSubgraphOp nodes in this graph. Each of these nodes replaces a TensorFlow subgraph from the original graph, encapsulating all the operations in the subgraph. This, for example, can be used to determine which operations are being optimized by ML Compute.\n- Number of subgraphs using ML Compute and how many operations are included in each of these subgraphs.\n    - Having larger subgraphs that encapsulate big portions of the original graph usually results in better performance from ML Compute. Note that for training, there will usually be at least two MLCSubgraphOp nodes (representing forward and backward/gradient subgraphs).\n- TensorFlow subgraphs that correspond to each of the ML Compute graphs.\n\n\n##### Eager mode\n\nUnlike graph mode, logging in eager mode is controlled by `TF_CPP_MIN_VLOG_LEVEL`. The following is the list of information that is logged in eager mode:\n\n- The buffer pointer and shape of input/output tensor.\n- The key for associating the tensor’s buffer to built the `MLCTraining` or `MLCInference` graph. This key is used to retrieve the graph and run a backward pass or an optimizer update.\n- The weight tensor format.\n- Caching statistics, such as insertions and deletions.\n\n\n##### Tips for debugging\n\n- Larger models being trained on the GPU may use more memory than is available, resulting in paging.  If this happens, try decreasing the batch size or the number of layers.\n- TensorFlow is multi-threaded, which means that different TensorFlow operations, such as` MLCSubgraphOp`, can execute concurrently. As a result, there may be overlapping logging information. To avoid this during the debugging process, set TensorFlow to execute operators sequentially by setting the number of threads to 1 (see [`tf.config.threading.set_inter_op_parallelism_threads`](https://www.tensorflow.org/api_docs/python/tf/config/threading/set_inter_op_parallelism_threads)).\n- In eager mode, you may disable the conversion of any operation to ML Compute by using `TF_DISABLE_MLC_EAGER=“;Op1;Op2;...”`. The gradient op may also need to be disabled by modifying  the file `$PYTHONHOME/site-packages/tensorflow/python/ops/_grad.py` (this avoids TensorFlow recompilation).\n- To initialize allocated memory with a specific value, use `TF_MLC_ALLOCATOR_INIT_VALUE=<init-value>`.\n- To disable ML Compute acceleration (e.g. for debugging or results verification), set the environment variable `TF_DISABLE_MLC=1`.\n\n"
        },
        {
          "name": "RELEASE.md",
          "type": "blob",
          "size": 0.4541015625,
          "content": "# Release 0.1-alpha3\n\n* Fixes several failures in TensorFlow unit tests and other bug fixes.\n* Resolves <https://github.com/apple/tensorflow_macos/issues/165>\n* Improves README.\n\n# Release 0.1-alpha2\n\n* Fixes several failures in TensorFlow unit tests and other bug fixes.\n* Resolves <https://github.com/apple/tensorflow_macos/issues/50>\n* Resolves <https://github.com/apple/tensorflow_macos/issues/99>\n* Resolves reported installation issues.\n* Adds release notes.\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}