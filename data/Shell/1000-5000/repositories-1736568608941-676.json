{
  "metadata": {
    "timestamp": 1736568608941,
    "page": 676,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "0xKayala/NucleiFuzzer",
      "stars": 1393,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "NucleiFuzzer.sh",
          "type": "blob",
          "size": 6.29296875,
          "content": "#!/bin/bash\n\n# ANSI color codes\nRED='\\033[91m'\nGREEN='\\033[92m'\nRESET='\\033[0m'\n\n# ASCII art\necho -e \"${RED}\"\ncat << \"EOF\"\n                     __     _ ____                          \n   ____  __  _______/ /__  (_) __/_  __________  ___  _____\n  / __ \\/ / / / ___/ / _ \\/ / /_/ / / /_  /_  / / _ \\/ ___/\n / / / / /_/ / /__/ /  __/ / __/ /_/ / / /_/ /_/  __/ /    \n/_/ /_/\\__,_/\\___/_/\\___/_/_/  \\__,_/ /___/___/\\___/_/   v2.4.0\n\n                               Made by Satya Prakash (0xKayala)\nEOF\necho -e \"${RESET}\"\n\n# Help menu\ndisplay_help() {\n    echo -e \"NucleiFuzzer: A Powerful Automation Tool for Web Vulnerability Scanning\\n\"\n    echo -e \"Usage: $0 [options]\\n\"\n    echo \"Options:\"\n    echo \"  -h, --help              Display help information\"\n    echo \"  -d, --domain <domain>   Single domain to scan for vulnerabilities\"\n    echo \"  -f, --file <filename>   File containing multiple domains/URLs to scan\"\n    echo \"  -o, --output <folder>   Specify output folder for scan results (default: ./output)\"\n    exit 0\n}\n\n# Default output folder\noutput_folder=\"./output\"\n\n# Get the current user's home directory\nhome_dir=$(eval echo ~\"$USER\")\n\n# Excluded extensions\nexcluded_extensions=\"png,jpg,gif,jpeg,swf,woff,svg,pdf,json,css,js,webp,woff,woff2,eot,ttf,otf,mp4,txt\"\n\n# Check prerequisites\ncheck_prerequisite() {\n    local tool=$1\n    local install_command=$2\n    if ! command -v \"$tool\" &> /dev/null; then\n        echo \"Installing $tool...\"\n        eval \"$install_command\"\n    fi\n}\n\ncheck_prerequisite \"nuclei\" \"go install -v github.com/projectdiscovery/nuclei/v3/cmd/nuclei@latest\"\ncheck_prerequisite \"httpx\" \"go install -v github.com/projectdiscovery/httpx/cmd/httpx@latest\"\ncheck_prerequisite \"uro\" \"pip3 install uro\"\ncheck_prerequisite \"katana\" \"go install -v github.com/projectdiscovery/katana/cmd/katana@latest\"\ncheck_prerequisite \"waybackurls\" \"go install github.com/tomnomnom/waybackurls@latest\"\ncheck_prerequisite \"gauplus\" \"go install github.com/bp0lr/gauplus@latest\"\ncheck_prerequisite \"hakrawler\" \"go install github.com/hakluke/hakrawler@latest\"\n\n# Clone repositories if not present\nclone_repo() {\n    local repo_url=$1\n    local target_dir=$2\n    if [ ! -d \"$target_dir\" ]; then\n        echo \"Cloning $repo_url...\"\n        git clone \"$repo_url\" \"$target_dir\"\n    fi\n}\n\nclone_repo \"https://github.com/0xKayala/ParamSpider\" \"$home_dir/ParamSpider\"\nclone_repo \"https://github.com/projectdiscovery/nuclei-templates.git\" \"$home_dir/nuclei-templates\"\n\n# Parse command line arguments\nwhile [[ $# -gt 0 ]]; do\n    key=\"$1\"\n    case $key in\n        -h|--help)\n            display_help\n            ;;\n        -d|--domain)\n            domain=\"$2\"\n            shift\n            shift\n            ;;\n        -f|--file)\n            filename=\"$2\"\n            shift\n            shift\n            ;;\n        -o|--output)\n            output_folder=\"$2\"\n            shift\n            shift\n            ;;\n        *)\n            echo \"Unknown option: $key\"\n            display_help\n            ;;\n    esac\ndone\n\n# Validate input\nif [ -z \"$domain\" ] && [ -z \"$filename\" ]; then\n    echo -e \"${RED}Error: Please provide a domain (-d) or a file (-f).${RESET}\"\n    display_help\nfi\n\n# Ensure output folder exists\nmkdir -p \"$output_folder\"\n\n# Function to validate URLs\nvalidate_input() {\n    local input=$1\n    if [[ \"$input\" =~ ^https?:// ]]; then\n        echo \"$input\"\n    elif [[ \"$input\" =~ ^[a-zA-Z0-9.-]+$ ]]; then\n        echo \"http://$input\"  # Add http:// if it's a domain\n    else\n        echo -e \"${RED}Invalid input: $input${RESET}\" >&2\n    fi\n}\n\n# Pre-check input file\nvalidate_file() {\n    local file=$1\n    awk '{if ($0 ~ /^[a-zA-Z0-9.-]+$/ || $0 ~ /^https?:\\/\\//) print $0}' \"$file\" > \"${file}_validated\"\n    echo \"${file}_validated\"\n}\n\n# Step 1: Run URL collection tools\ncollect_urls() {\n    local target=$1\n    local output_file=$2\n\n    validated_target=$(validate_input \"$target\")\n    if [ -n \"$validated_target\" ]; then\n        echo -e \"${GREEN}Collecting URLs for $validated_target...${RESET} using ParamSpider\"\n        python3 \"$home_dir/ParamSpider/paramspider.py\" -d \"$target\" --exclude \"$excluded_extensions\" --level high --quiet -o \"$output_file\"\n    \n        echo -e \"${GREEN}Collecting URLs for $validated_target...${RESET} using Waybackurls\"\n        echo \"$validated_target\" | waybackurls >> \"$output_file\"\n    \n        echo -e \"${GREEN}Collecting URLs for $validated_target...${RESET} using Gauplus\"\n        echo \"$validated_target\" | gauplus -subs -b $excluded_extensions >> \"$output_file\"\n    \n        echo -e \"${GREEN}Collecting URLs for $validated_target...${RESET} using Hakrawler\"\n        echo \"$validated_target\" | hakrawler -d 3 -subs -u >> \"$output_file\"\n    \n        echo -e \"${GREEN}Collecting URLs for $validated_target...${RESET} using Katana\"\n        echo \"$validated_target\" | katana -d 3 -silent >> \"$output_file\"\n    else\n        echo -e \"${RED}Skipping invalid target: $target${RESET}\"\n    fi\n}\n\nif [ -n \"$domain\" ]; then\n    collect_urls \"$domain\" \"$output_folder/$domain_raw.txt\"\nelif [ -n \"$filename\" ]; then\n    validated_file=$(validate_file \"$filename\")\n    while IFS= read -r line; do\n        collect_urls \"$line\" \"$output_folder/${line}_raw.txt\"\n        cat \"$output_folder/${line}_raw.txt\" >> \"$output_folder/all_raw.txt\"\n    done < \"$validated_file\"\nfi\n\n# Step 2: Validate and deduplicate URLs\nvalidate_urls() {\n    local input_file=$1\n    local validated_file=$2\n\n    if [ ! -s \"$input_file\" ]; then\n        echo -e \"${RED}Error: No URLs found in $input_file. Exiting...${RESET}\"\n        exit 1\n    fi\n\n    sort \"$input_file\" | uro > \"$validated_file\"\n}\n\nif [ -n \"$domain\" ]; then\n    validate_urls \"$output_folder/$domain_raw.txt\" \"$output_folder/${domain}_validated.txt\"\nelif [ -n \"$filename\" ]; then\n    validate_urls \"$output_folder/all_raw.txt\" \"$output_folder/all_validated.txt\"\nfi\n\n# Step 3: Run Nuclei templates\nrun_nuclei() {\n    local url_file=$1\n\n    echo -e \"${GREEN}Running Nuclei on URLs from $url_file...${RESET}\"\n    httpx -silent -mc 200,204,301,302,401,403,405,500,502,503,504 -l \"$url_file\" \\\n        | nuclei -t \"$home_dir/nuclei-templates\" -dast -rl 50 -o \"$output_folder/nuclei_results.txt\"\n}\n\nif [ -n \"$domain\" ]; then\n    run_nuclei \"$output_folder/${domain}_validated.txt\"\nelif [ -n \"$filename\" ]; then\n    run_nuclei \"$output_folder/all_validated.txt\"\nfi\n\n# Step 4: Completion message\necho -e \"${RED}Scanning completed. Results are saved in $output_folder.${RESET}\"\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.7060546875,
          "content": "<h1 align=\"center\"> \n  NucleiFuzzer = Nuclei + Paramspider + waybackurls + gauplus + hakrawler + katana + Fuzzing Templates\n  <br>\n</h1>\n\n<p align=\"center\">\n<a href=\"https://github.com/0xKayala/NucleiFuzzer/issues\"><img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=flat\"></a>\n<a href=\"https://github.com/0xKayala/NucleiFuzzer/releases\"><img src=\"https://img.shields.io/github/v/release/0xkayala/NucleiFuzzer.svg\"></a>\n<a href=\"https://twitter.com/0xKayala\"><img src=\"https://img.shields.io/twitter/follow/0xKayala.svg?logo=twitter\"></a>\n</p>\n\n## Overview\n`NucleiFuzzer` is an advanced automation tool designed to streamline and optimize web application security testing by integrating a suite of powerful URL discovery and vulnerability scanning tools. It combines `ParamSpider`, `Waybackurls`, `Katana`, `Gauplus`, and `Hakrawler` to comprehensively gather and enumerate potential entry points for web applications. Leveraging the power of `Nuclei`, it scans these endpoints using `fuzzing-templates` to effectively uncover a wide range of vulnerabilities.\n\nThe enhanced `NucleiFuzzer` is built for speed and accuracy, utilizing advanced URL validation, deduplication with `uro`, and precise HTTP filtering using `httpx`. This tool provides `security professionals`, `bug bounty hunters`, and `web developers` with a seamless workflow to detect and address security risks, ensuring robust web application protection.\n\n## Key Features:\n1. Comprehensive URL Discovery: Integrates multiple tools (`ParamSpider`, `Waybackurls`, `Katana`, `Gauplus`, and `Hakrawler`) to ensure exhaustive coverage of URLs and parameters.\n2. Enhanced Vulnerability Scanning: Uses `Nuclei` with `fuzzing-templates` to identify critical security issues with precision.\n3. Advanced Filtering and Validation: Removes duplicates and irrelevant results using `uro` and `httpx` for cleaner and more focused scanning.\n4. Rate Limiting for Efficiency: Allows customizable request rates for optimal performance during scans.\n5. Customizable and User-Friendly: Easy-to-configure options for domains, files, and output directories, catering to both individual and batch scans.\n\nTake advantage of `NucleiFuzzer` to safeguard your web applications against vulnerabilities and attacks with an enhanced, efficient, and reliable security testing solution!\n\n**Note:** `Nuclei` + `Paramspider` + `waybackurls` + `gauplus` + `hakrawler` + `katana` + `Fuzzing Templates` = `NucleiFuzzer` <br><br>\n**Important:** Make sure the tools `Nuclei`, `Paramspider`, `waybackurls`, `gauplus`, `hakrawler`, `katana`, `httpx` & `uro` are installed on your machine and executing correctly to use the `NucleiFuzzer` without any issues.\n\n### Tools included:\n- [Nuclei](https://github.com/projectdiscovery/nuclei) `git clone https://github.com/projectdiscovery/nuclei.git`<br>\n- [ParamSpider](https://github.com/0xKayala/ParamSpider) `git clone https://github.com/0xKayala/ParamSpider.git`<br>\n- [waybackurls](https://github.com/tomnomnom/waybackurls) `git clone https://github.com/tomnomnom/waybackurls.git`<br>\n- [gauplus](https://github.com/bp0lr/gauplus) `git clone https://github.com/bp0lr/gauplus.git`<br>\n- [hakrawler](https://github.com/hakluke/hakrawler) `git clone https://github.com/hakluke/hakrawler.git`<br>\n- [katana](https://github.com/projectdiscovery/katana) `git clone https://github.com/projectdiscovery/katana.git`<br>\n- [httpx](https://github.com/projectdiscovery/httpx) `git clone https://github.com/projectdiscovery/httpx.git`<br>\n- [uro](https://github.com/s0md3v/uro) `https://github.com/s0md3v/uro.git`<br>\n\n\n### Templates:\n[Fuzzing Templates](https://github.com/projectdiscovery/nuclei-templates) `git clone https://github.com/projectdiscovery/nuclei-templates.git`\n\n## Screenshot\n![image](https://github.com/user-attachments/assets/2361a57a-7e82-47ac-832f-d83088e71ea3)\n\n\n## Output\n![image](https://github.com/user-attachments/assets/f26e6b1e-8bf9-4781-ab08-fe02f19931e3)\n![image](https://github.com/user-attachments/assets/0336b4c2-51e6-4a2f-8994-8fc0717d2b75)\n![image](https://github.com/user-attachments/assets/8293b1bb-2f8b-4678-bb76-d5da9eea6d05)\n\n\n## Usage\n\n```sh\nnf -h\n```\n\nThis will display help for the tool. Here are the options it supports.\n\n```console\nNucleiFuzzer: A Powerful Automation Tool for Web Vulnerability Scanning\n\nUsage: /usr/bin/nf [options]\n\nOptions:\n  -h, --help              Display help information\n  -d, --domain <domain>   Single domain to scan for vulnerabilities\n  -f, --file <filename>   File containing multiple domains/URLs to scan\n  -o, --output <folder>   Specify output folder for scan results (default: ./output)\n```  \n\n## Installation:\n\nTo install `NucleiFuzzer`, follow these steps:\n\n```\ngit clone https://github.com/0xKayala/NucleiFuzzer.git && cd NucleiFuzzer && sudo chmod +x install.sh && ./install.sh && (command -v nf &> /dev/null && nf -h || echo \"Installation failed: Command 'nf' not found. Please check for errors during installation.\") && cd .. || echo \"Failed to clone or navigate to NucleiFuzzer repository. Please check your setup.\"\n```\n\n## Examples:\n\nHere are a few examples of how to use NucleiFuzzer:\n\n- Run `NucleiFuzzer` on a single domain:\n\n  ```sh\n  nf -d example.com\n  ```\n\n- Run `NucleiFuzzer` on multiple domains from a file:\n\n  ```sh\n  nf -f file.txt\n  ```\n\n## Practical Demonstration:\n\nFor a Practical Demonstration of the NucleiFuzzer tool see the below video 👇 <br>\n\n[<img src=\"https://img.youtube.com/vi/2K2gTCHt6kg/hqdefault.jpg\" width=\"600\" height=\"300\"/>](https://www.youtube.com/embed/2K2gTCHt6kg)\n\n## Star History\n\n<a href=\"https://star-history.com/#0xKayala/NucleiFuzzer&Date\">\n <picture>\n   <source media=\"(prefers-color-scheme: dark)\" srcset=\"https://api.star-history.com/svg?repos=0xKayala/NucleiFuzzer&type=Date&theme=dark\" />\n   <source media=\"(prefers-color-scheme: light)\" srcset=\"https://api.star-history.com/svg?repos=0xKayala/NucleiFuzzer&type=Date\" />\n   <img alt=\"Star History Chart\" src=\"https://api.star-history.com/svg?repos=0xKayala/NucleiFuzzer&type=Date\" />\n </picture>\n</a>\n\n## Contributing\n\nContributions are welcome! If you'd like to contribute to `NucleiFuzzer`, please follow these steps:\n\n1. Fork the repository.\n2. Create a new branch.\n3. Make your changes and commit them.\n4. Submit a pull request.\n\nMade by\n`Satya Prakash` | `0xKayala` \\\n\nA `Security Researcher` and `Bug Hunter` \\\n\n## Connect with me:\n<p align=\"left\">\n<a href=\"https://twitter.com/0xkayala\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/twitter.svg\" alt=\"0xkayala\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://linkedin.com/in/0xkayala\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/linked-in-alt.svg\" alt=\"0xkayala\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://instagram.com/0xkayala\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/instagram.svg\" alt=\"0xkayala\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://medium.com/@0xkayala\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/medium.svg\" alt=\"@0xkayala\" height=\"30\" width=\"40\" /></a>\n<a href=\"https://www.youtube.com/@0xkayala\" target=\"blank\"><img align=\"center\" src=\"https://raw.githubusercontent.com/rahuldkjain/github-profile-readme-generator/master/src/images/icons/Social/youtube.svg\" alt=\"0xkayala\" height=\"30\" width=\"40\" /></a>\n</p>\n\n## Support me:\n<p><a href=\"https://www.buymeacoffee.com/0xKayala\"> <img align=\"left\" src=\"https://cdn.buymeacoffee.com/buttons/v2/default-yellow.png\" height=\"50\" width=\"210\" alt=\"0xKayala\" /></a></p><br><br>\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 0.2626953125,
          "content": "#!/bin/bash\n\n# Rename and move NucleiFuzzer.sh file to /usr/bin/nf\nsudo cp NucleiFuzzer.sh /usr/bin/nf\n\n# Make the NucleiFuzzer file executable\nsudo chmod u+x /usr/bin/nf\n\necho \"NucleiFuzzer has been installed successfully! Now Enter the command 'nf' to run the tool.\"\n"
        }
      ]
    }
  ]
}