{
  "metadata": {
    "timestamp": 1736568571044,
    "page": 608,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjYwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WhatsApp/proxy",
      "stars": 1503,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.09375,
          "content": "# Explicitly declare sh files to always be normalized and have LF file endings\n*.sh text eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.03515625,
          "content": "tmp/\nhelm/whatsapp-proxy-chart*.tgz\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.4111328125,
          "content": "<!-- Copyright (c) Meta Platforms, Inc. and affiliates.\n\nLicense found in the LICENSE file in the root directory\nof this source tree. -->\n# Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to make participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, sex characteristics, gender identity and expression,\nlevel of experience, education, socio-economic status, nationality, personal\nappearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\n  advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies within all project spaces, and it also applies when\nan individual is representing the project or its community in public spaces.\nExamples of representing a project or community include using an official\nproject e-mail address, posting via an official social media account, or acting\nas an appointed representative at an online or offline event. Representation of\na project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting the project team at <opensource-conduct@fb.com>. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at https://www.contributor-covenant.org/version/1/4/code-of-conduct.html\n\n[homepage]: https://www.contributor-covenant.org\n\nFor answers to common questions about this code of conduct, see\nhttps://www.contributor-covenant.org/faq\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.326171875,
          "content": "<!-- Copyright (c) Meta Platforms, Inc. and affiliates.\n\nLicense found in the LICENSE file in the root directory\nof this source tree. -->\n# Contributing to this library\nWe want to make contributing to this project as easy and transparent as\npossible.\n\n## Pull Requests\nWe actively welcome your pull requests.\n\n1. Fork the repo and create your branch from `main`.\n2. If you've added code that should be tested, add tests.\n3. If you've changed APIs, update the documentation.\n4. Ensure the test suite passes.\n5. If you haven't already, complete the Contributor License Agreement (\"CLA\").\n\n## Contributor License Agreement (\"CLA\")\nIn order to accept your pull request, we need you to submit a CLA. You only need\nto do this once to work on any of Facebook's open source projects.\n\nComplete your CLA here: <https://code.facebook.com/cla>\n\n## Issues\nWe use GitHub issues to track public bugs. Please ensure your description is\nclear and has sufficient instructions to be able to reproduce the issue.\n\nFacebook has a [bounty program](https://www.facebook.com/whitehat/) for the safe\ndisclosure of security bugs. In those cases, please go through the process\noutlined on that page and do not file a public issue.\n\n## License\nBy contributing to akd, you agree that your contributions will be\nlicensed under the LICENSE file in the root directory of this source tree.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 5.52734375,
          "content": "# Frequently asked questions\n\n## Getting started\n\nFirst you need to clone the repository. You can do this with\n\n```bash\ngit clone https://github.com/WhatsApp/proxy.git\n```\n\n## Common issues\n\n### (1) The container won't build on Windows with `set_public_ip_and_start.sh: Not found`\n\nThis is likely a line encoding issue since the application is expecting unix-style line\nencoding (EOL not CRLF). This resolved in PR [72](https://github.com/WhatsApp/proxy/pull/72)\nand you should just need to pull the latest changes and try again.\n\n### (2) I want to share my proxy to the community\n\nThis is great! We have created a dedicated GitHub issue to share these proxies. Access it here: [Issue #92](https://github.com/WhatsApp/proxy/issues/92)\n\n### (3) My proxy isn't accessible publicly\n\nSome common problems to investigate\n\n1. Are the necessary ports open on your host?\n2. If running in a cloud, are the necessary ports open on the cloud provider's firewall?\n3. Can you access the statistics port (8199) locally? (at `http://127.0.0.1:8199`) If not, can you check the health of the container (if it's up and running) with `docker ps`?\n\n### (4) What is the port configuration for this service + the client?\n\nWhen only a host is specified in the app (ip or domain name), the client will attempt to connect to port 443 by default.\n\nYou can also re-map the ports exposed from the proxy to whatever you want. For example if you have a different service running on port 80, you can send the proxy container's port 80 to port 8081 for example. You can do this by changing the port mapping from `80:80` to `8081:80`. The format for these ports is `{HOST_MACHINE_PORT}:{CONTAINER_PORT}` so you're stating that\nthe container's port 80 binds to my machine's 8081, which is what will be exposed to the internet. An example of these port mapping can be found in the provided [docker-compose.yml](https://github.com/WhatsApp/proxy/blob/main/proxy/ops/docker-compose.yml#L14)\n\n**NOTE** There is a caveat however to re-mapping port 443. Port 443 on the proxy runs a TLS encryption and the client knows to utilize TLS for connections to that port. All **OTHER** ports are expected to not have TLS. There is currently no way to configure this in the client so if you re-map the container's port 443 then it won't be able to connect. You can however safely remap ports 80 and 5222 freely and they should just work.\n\n### (5) Does the proxy support HTTP(S) or SOCKS?\n\nWhatsApp currently does **NOT** support anything besides TCP proxying. This is just copying the incoming bytes \nto WhatsApp on the other end. So we don't support running through any intermediary that is a HTTP proxy.\n\nYou are free to run your own pure TCP proxy as you see fit however, as long as it forwards to `g.whatsapp.net`. You aren't required to use this realization.\n\n### (6) haproxy `cannot bind socket (Permission denied)`\n\nSee https://github.com/docker-library/haproxy/issues/160 for possible solutions.\n\n### (7) Why do I need to expose 7 ports? \n\nThe short answer is you don't. The primary ports WhatsApp uses can be 80, 443, or 5222. The other 3 connection ports are if you're hosting the \nproxy in an environment that will send the PROXY header (if you don't know what this is, you likely don't need to expose these ports). \n\nThe last port is 8199 which is the \"statistics\" port of the underlying proxy process, HAProxy. We find this port is helpful for testing if your system is alive\nand running properly or not. While the other ports 80 and 443 look like normal HTTP and HTTPS ports, your browser will not be able to connect to them as they\nare just TCP forwarding the traffic to a server that is **NOT** HTTP based. For this reason, the statistics is a quick and easy way to check host health. \n\nThat being said, if you're worried about detection, once running we recommend disabling all non-necessary ports. A **typical** host configuration would likely\njust expose 80, 443, and 5222. You may re-map those however as you see fit, see point (4) above.\n\n### (8) I'm seeing something like `executor failed running [/bin/sh -c apk --no-cache add curl openssl jq bash]: exit code: 4`\n\nPlease try re-building the container without the docker cache enabled.\n\n```bash\ndocker build --no-cache proxy/ -t whatsapp-proxy:1.0\n```\n\nIf you're still seeing a problem, you may fill out a bug report in the issues filling out all the requested information in the template.\n\n### (9) Container is stuck after certificate generation\n\nActually thanks to recent community fixes, HAProxy is no longer printing \nany warning messages. Your host is actually running in interactive mode. You should be able to navigate to the host's port 8199 to view the statistics page ([http://localhost:8199](http://localhost:8199) on the machine running the proxy).\n\nRelated issue [#71](https://github.com/WhatsApp/proxy/issues/71)\n\n### (10) Why isn't there a pre-built image on DockerHub?\n\nApologies in the delay, but it takes some time to organize access to the \ncorrect repositories. We're happy to announce there is now a pre-built image\nbased on the latest version in this repository. We'll strive to keep it\nup-to-date as well. You can pull it (without needing to build locally) from\n\n```bash\ndocker pull facebook/whatsapp_proxy:latest\n```\n\nAfter you've pulled the image, you can then run it with the same run commands as before except substituting in `facebook/whatsapp_proxy:latest` instead of `whatsapp_proxy:1.0`. This will point to the latest image for you without having to worry about building it yourself. Example run command might be\n\n```bash\ndocker run -it -p 80:80 -p 443:443 -p 5222:5222 facebook/whatsapp_proxy:latest\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0625,
          "content": "MIT License\n\nCopyright (c) Meta Platforms, Inc. and affiliates.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.96875,
          "content": "<!-- Copyright (c) Meta Platforms, Inc. and affiliates.\n\nLicense found in the LICENSE file in the root directory\nof this source tree. -->\n# WhatsApp Chat Proxy\n\n[<img alt=\"github\" src=\"https://img.shields.io/badge/github-WhatsApp/proxy-8da0cb?style=for-the-badge&labelColor=555555&logo=github\" height=\"20\">](https://github.com/WhatsApp/proxy)\n[![CI](https://github.com/WhatsApp/proxy/actions/workflows/ci.yml/badge.svg)](https://github.com/WhatsApp/proxy/actions/workflows/ci.yml)\n\nIf you are unable to connect directly to WhatsApp, a proxy can be used as a gateway between you and our servers. To help yourself or others re-establish connection to WhatsApp, you can set up a proxy server.\n\nIf you already have a proxy to use, you can connect it to WhatsApp by following the steps in this [article](https://faq.whatsapp.com/520504143274092).\n\n## Frequently asked questions\n\n**PLEASE READ THIS BEFORE OPENING AN ISSUE** We have an FAQ, which you can find here: [FAQ.md](https://github.com/whatsapp/proxy/blob/main/FAQ.md)\n\n## What you'll need\n\n1. [Docker](https://docs.docker.com/engine/install/) (enable Docker on startup if your host system allows)\n2. [Docker compose](https://docs.docker.com/compose/) (optional)\n\n## Setting up your proxy\n\n**UPDATE** There is now a pre-built image hosted in Meta's DockerHub repository. You no longer need to build the default image (if you don't want to customize it of course).\n\n```bash\ndocker pull facebook/whatsapp_proxy:latest\n```\n\nYou can then skip down to **Running the proxy** and substitute any tag of `whatsapp_proxy:1.0` with `facebook/whatsapp_proxy:latest`.\n\n### 1. Clone the repository to your local machine\n\n```bash\ngit clone https://github.com/WhatsApp/proxy.git\n```\n\nYou should see a folder called `proxy` created in the current directory.\n\n### 2. [Install Docker](https://docs.docker.com/get-docker/) for your system\n\nTo confirm Docker is successfully installed:\n\n```bash\ndocker --version\n```\n\nshould display a line similar to `Docker version 20.10.21, build baeda1f`.\n\n### 2. (Optional) Install Docker compose\n\nFor Linux users, if your [version of Docker](https://docs.docker.com/desktop/install/linux-install/) doesn't come pre-installed with Docker compose, you can install a one-off version (For Linux).\n\n```bash\n# Download the pkg\nsudo curl -L https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m) -o /usr/bin/docker-compose\n# Enable execution of the script\nsudo chmod +x /usr/bin/docker-compose\n```\n\n### 3. Build the proxy host container\n\nNavigate to the repo directory\n\n```bash\ncd proxy\n```\n\nBuild the proxy host container with\n\n```bash\ndocker build proxy/ -t whatsapp_proxy:1.0\n```\n\nYou should see a message similar to `[+] Building 6.6s (18/18) FINISHED`. The container will be compiled and tagged as `whatsapp_proxy:1.0` for easy reference.\n\n## Running the proxy\n\n### Manually execute the container\n\nYou can manually execute the Docker container with the following `docker` command\n\n```bash\ndocker run -it -p 80:80 -p 443:443 -p 5222:5222 -p 8080:8080 -p 8443:8443 -p 8222:8222 -p 8199:8199 -p 587:587 -p 7777:7777 whatsapp_proxy:1.0\n```\n\nYou will see lines ending with `Certificate generation completed.`. The HAProxy is running in the background and will continue to do so until you close this process.\n\n### Check your connection\n\nTo confirm HAProxy is running, visit `http://<host-ip>:8199` where `<host-ip>` is your **public** IP address. You can also use this link to monitor proxy statistics.\n\n> NOTE: If your public IP address is not accessible, you will need to enable port forwarding (for the ports above) for the router/gateway you are using. Since this operation is device-specific, we are not going to go into it in details in this doc.\n\nIf you prefer OpenMetrics output you can use `http://<host-ip>:8199/metrics` for monitoring HAProxy metrics.\n\n# Miscellanous\n\n## An Overview of the WhatsApp Proxy Architecture\n\nDepending on the scenario in which you utilize your proxy, the proxy container exposes multiple ports. The basic ports may include:\n\n1. 80: Standard web traffic (HTTP)\n2. 443: Standard web traffic, encrypted (HTTPS)\n3. 5222: Jabber protocol traffic (WhatsApp default)\n4. 587 or 7777: *.whatsapp.net traffic including media (HTTPS)\n\nThere are also ports configured which accept incoming [proxy headers](https://www.haproxy.com/blog/use-the-proxy-protocol-to-preserve-a-clients-ip-address/) (version 1 or 2)\non connections. If you have a network load balancer you can preserve the client IP address if you want.\n\n1. 8080: Standard web traffic (HTTP) with PROXY protocol expected\n2. 8443: Standard web traffic, encrypted (HTTPS) with PROXY protocol expected\n3. 8222: Jabber protocol traffic (WhatsApp default) with PROXY protocol expected\n\n## Certificate generation for SSL encrypted ports\n\nPorts 443 and 8443 are protected by a self-signed encryption certificate generated at container start time. There are some custom options should you wish to tweak the settings of the generated certificates\n\n* `SSL_DNS` comma separate list of alternative hostnames, no default\n* `SSL_IP` comma separate list of alternative IPs, no default\n\nThey can be set with commands like\n\n```bash\ndocker build . --build-arg SSL_DNS=test.example.com\n```\n\n## Advanced\n\n### Automate the container lifecycle with Docker compose\n\nDocker Compose is an automated tool to run multi-container deployments, but it also helps automate the command-line arguments necessary to run a single container. It is a YAML definition file that denotes all the settings to start up and run the container. It also has restart strategies in the event the container crashes or self-restarts. Docker Compose helps manage your container setup and necessary port forwards without user interaction. We recommend utilizing Docker Compose because you usually don’t want to manually run the container outside of testing scenarios.\n\nWe provide a sample [docker-compose.yml](./proxy/ops/docker-compose.yml) file for you which defines a standard deployment of the proxy container.\n\nOnce Docker compose is installed, you can test your specific configuration by running Docker compose interactively with:\n\n```bash\ndocker compose -f /path/to/this/repo/docker-compose.yml up\n```\n\nThis will allow you to see the output from the build + container hosting process and check that everything is set up correctly.\n\nWhen you are ready to run the container as a service, do\\*:\n\n```bash\ndocker compose -f /path/to/this/repo/docker-compose.yml up -d\n```\n\n*\\*Note the `-d` flag which means \"daemonize\" and run as a service.*\n\nTo stop the container you can similarly do:\n\n```bash\ndocker compose down\n```\n\n### Automate host reboots with Docker compose\n\nOnce you have Docker compose set up, you can also automate the deployment for host reboots by utilizing a `systemd` service (if your hosting environment supports it).\n\nWe provide a sample [`docker_boot.service`](./proxy/ops/docker_boot.service) service definition for you which you should customize to your own environment.\n\nTo install and setup the `systemd` service\\*:\n\n```bash\n# Copy the service definition to systemd folder\ncp -v docker_boot.service /etc/systemd/system/\n# Enable starting the service on startup\nsystemctl enable docker_boot.service\n# Start the service (will docker compose up the container)\nsystemctl start docker_boot.service\n# Check container status with\ndocker ps\n```\n\n*\\*Make sure to update the path to your specific `docker-compose.yml` file in the service definition `docker_boot.service`*\n\n## Kubernetes deployment\n\nIf you would like to configure your proxy using Kubernetes, or run the Docker runtime through Kubernetes, please see our [Helm chart README](./charts/README.md)\n\nRead more about other type of deployments [here](/docs/deployments.md).\n\n# Contributors\n\n------------\n\nThe authors of this code are Sean Lawlor ([@slawlor](https://github.com/slawlor)).\n\nTo learn more about contributing to this project, [see this document](https://github.com/whatsapp/proxy/blob/main/CONTRIBUTING.md).\n\n# License\n\n------------\n\nThis project is licensed under [MIT](https://github.com/novifinancial/akd/blob/main/LICENSE-MIT).\n"
        },
        {
          "name": "charts",
          "type": "tree",
          "content": null
        },
        {
          "name": "cloud",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "proxy",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}