{
  "metadata": {
    "timestamp": 1736568719976,
    "page": 825,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ellermister/mtproxy",
      "stars": 1189,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0380859375,
          "content": "*.sh text eol=lf\nDockerfile text eol=lf"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0615234375,
          "content": "mtg\nmtproto-proxy\nproxy-multi.conf\nproxy-secret\nbuild\npid\n.idea"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.2626953125,
          "content": "FROM --platform=$TARGETPLATFORM nginx:1.23.2 AS build\n#FROM  nginx:1.23.2 AS build\n\n\nCOPY . /home/mtproxy\n\nENV WORKDIR=/home/mtproxy\n\nWORKDIR /home/mtproxy \n\n# setup config\nRUN set -ex \\\n    && cd $WORKDIR \\\n    && cp src/* /usr/share/nginx/html \\\n    && rm -rf .git \\\n    && cp mtproxy-entrypoint.sh /docker-entrypoint.d/40-mtproxy-start.sh \\\n    && chmod +x /docker-entrypoint.d/40-mtproxy-start.sh \\\n    && cp -f nginx/default.conf /etc/nginx/conf.d/default.conf \\\n    && cp -f nginx/ip_white.conf /etc/nginx/ip_white.conf \\\n    && cp -f nginx/nginx.conf /etc/nginx/nginx.conf\n\n# build mtproxy and install php\nRUN set -ex \\\n    && apt-get update \\\n    && apt-get install -y --no-install-recommends git wget curl build-essential libssl-dev zlib1g-dev iproute2 php7.4-fpm vim-common net-tools ntpdate procps \\\n    && bash mtproxy.sh build \\\n    && sed -i 's/^user\\s*=[^\\r]\\+/user = root/' /etc/php/7.4/fpm/pool.d/www.conf \\\n    && sed -i 's/^group\\s*=[^\\r]\\+/group = root/' /etc/php/7.4/fpm/pool.d/www.conf \\\n    && rm -rf $WORKDIR/MTProxy \\\n    && rm -rf ~/go \\\n    && mkdir /run/php -p && mkdir $WORKDIR/pid \\\n    && apt-get purge -y git build-essential libssl-dev zlib1g-dev \\\n    && apt-get clean \\\n    && apt-get autoremove --purge -y \\\n    && rm -rf /var/lib/apt/lists/*\n\nEXPOSE 80 443\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0400390625,
          "content": "MIT License\n\nCopyright (c) 2023 chauncey\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.7734375,
          "content": "<div align=\"right\">\n  <a title=\"简体中文\" href=\"README.md\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-A31F34?style=for-the-badge\" alt=\"简体中文\" /></a>\n  <a title=\"English\" href=\"README_EN.md\"><img src=\"https://img.shields.io/badge/-English-545759?style=for-the-badge\" alt=\"English\"></a>\n</div>\n\n# mtproxy\n\n这是一个一键安装 MTProxy 代理的绿色脚本，脚本可以在官方版本的 MTProxy 程序和兼容性最强的第三方作者开发的 mtg 程序中进行选择静态安装或者编译，该版本默认支持 Fake TLS 以及 AdTag 配置。\n\n在此基础上，提供了 Nginx 作为前端转发，MTProxy 作为后端代理的方式以实现安全的伪装。并且在 Nginx 转发层进行配置了 IP 白名单，只有通过白名单认证过的 IP 才可以进行访问。\n\n> 此功能提供了 Docker 镜像以便开箱即用。\n\n## 交流群组\n\nTelegram 群组：<https://t.me/EllerHK>\n\n## 安装方式\n\n提供了两种安装方式可供选择：\n\n- 使用脚本\n\n  选择该方式一般是你在宿主机中进行直接安装或者编译，会或多或少需要安装一些系统基础依赖库。\n\n- 使用 Docker\n\n  **小白建议使用 Docker!** 不会对宿主机造成污染，如果你需要修改一些配置文件，需要你稍微学习一些基础 Docker 使用技术。\n\n### 使用脚本\n\n> 如果你反复遇到错误或者其他未知问题, 建议更换为 Debian 9+ 以上的系统或采用 Docker 方式运行。\n\n执行如下代码进行安装\n\n```bash\nrm -rf /home/mtproxy && mkdir /home/mtproxy && cd /home/mtproxy\ncurl -fsSL -o mtproxy.sh https://github.com/ellermister/mtproxy/raw/master/mtproxy.sh\nbash mtproxy.sh\n```\n\n ![mtproxy.sh](https://raw.githubusercontent.com/ellermister/mtproxy/master/mtproxy.jpg)\n\n### 使用 Docker | 白名单 MTProxy Docker 镜像\n\n该镜像集成了 nginx、mtproxy+tls 实现对流量的伪装，并采用**白名单**模式来应对防火墙的检测。\n\n若使用该 Docker 镜像, 就不需要用脚本了，二者二选一，不要搞混了。\n\n**如果没有安装Docker**，一键安装方式如下：\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n```\n\n**创建白名单镜像：**\n\n ```bash\ndocker run -d \\\n--name mtproxy \\\n--restart=always \\\n-e domain=\"cloudflare.com\" \\\n-p 8080:80 \\\n-p 8443:443 \\\nellermister/mtproxy\n ```\n\n**镜像默认开启了 IP 段白名单**  \n如果你不需要可以配置 `ip_white_list=\"OFF\"` 取消：\n\n```bash\ndocker run -d \\\n--name mtproxy \\\n--restart=always \\\n-e domain=\"cloudflare.com\" \\\n-e secret=\"548593a9c0688f4f7d9d57377897d964\" \\\n-e ip_white_list=\"OFF\" \\\n-p 8080:80 \\\n-p 8443:443 \\\nellermister/mtproxy\n```\n\n`ip_white_list` 选项:\n\n- **OFF** 关闭白名单\n- **IP** 开启 IP 白名单\n- **IPSEG** 开启 IP 段白名单\n\n`secret`指定密钥：如果你想创建已知的密钥，格式为：32位十六进制字符。\n\n**在日志中查看链接的参数配置**：\n\n```bash\ndocker logs -f mtproxy\n```\n\n连接端口记得修改为你映射后的外部端口，如上文例子中都是`8443`，在连接时修改端口。\n\n更多使用请参考： <https://hub.docker.com/r/ellermister/mtproxy>\n\n## 使用方式\n\n配置文件 `mtp_config`，如果你想手动修改密钥或者参数请注意格式。\n\n运行服务\n\n```bash\nbash mtproxy.sh start\n```\n\n调试运行\n\n```bash\nbash mtproxy.sh debug\n```\n\n停止服务\n\n```bash\nbash mtproxy.sh stop\n```\n\n重启服务\n\n```bash\nbash mtproxy.sh restart\n```\n\n重新安装/重新配置\n\n```bash\nbash mtproxy.sh reinstall\n```\n\n## 卸载安装\n\n因为是绿色版卸载极其简单，直接删除所在目录即可。\n\n```bash\nrm -rf /home/mtproxy\n```\n\n## 开机启动\n\n> 该脚本没有配置为系统服务的方式，你可以将其添加到开机启动脚本中。\n\n开机启动脚本，如果你的 rc.local 文件不存在请检查开机自启服务。\n\n通过编辑文件`/etc/rc.local`将如下代码加入到开机自启脚本中：\n\n```bash\ncd /home/mtproxy && bash mtproxy.sh start > /dev/null 2>&1 &\n```\n\n## 计划任务守护\n\n由于默认官方的 mtproxy 程序存在BUG，在 pid 大于 65535 时进程处理存在问题，进程容易坏死和异常退出。\n\n因此建议通过计划任务去守护进程 `crontab -e` ：\n\n每分钟检测进程并启动\n\n```bash\n* * * * * cd /home/mtproxy && bash mtproxy.sh start > /dev/null 2>&1 &\n```\n\n## MTProxy Admin Bot\n\n<https://t.me/MTProxybot>\n> Sorry, an error has occurred during your request. Please try again later.(Code xxxxxx)\n\n如果你在申请绑定代理推广时遇到了此类错误，官方没有给出明确的原因。根据网友反馈，此类问题多出现于账号注册不足与 2~3 年。  \n**建议使用 3 年以上的账号以及未被 banned 的账号。**\n\n## 引用项目\n\n- <https://github.com/TelegramMessenger/MTProxy>\n- <https://github.com/9seconds/mtg>\n"
        },
        {
          "name": "README_EN.md",
          "type": "blob",
          "size": 4.23828125,
          "content": "<div align=\"right\">\n  <a title=\"简体中文\" href=\"README.md\"><img src=\"https://img.shields.io/badge/-%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87-545759?style=for-the-badge\" alt=\"简体中文\" /></a>\n  <a title=\"English\" href=\"README_EN.md\"><img src=\"https://img.shields.io/badge/-English-A31F34?style=for-the-badge\" alt=\"English\"></a>\n</div>\n\n# mtproxy\n\nMTProxyTLS one-click install lightweight script.  \nWith Nginx as a Forward Proxy, access is only granted with an IP whitelist.\n\n## Discussion\n\nTelegram Group: <https://t.me/EllerHK>\n\n## Install method\n\n- Script\n\n  This method generally requires you to install or compile directly on your machine, which may require the installation of some basic system dependency libraries.\n\n- Docker\n\n  **Recommended!** Will not broke your system or dependencies. Just need to know some basic Docker knowledge.\n\n### Script\n\n> If you repeatedly encounter errors or other unknown problems, it is recommended to switch to a Debian 9+ system or use Docker.\n\nExecute the following code to install\n\n```bash\nrm -rf /home/mtproxy && mkdir /home/mtproxy && cd /home/mtproxy\ncurl -fsSL -o mtproxy.sh https://github.com/ellermister/mtproxy/raw/master/mtproxy.sh\nbash mtproxy.sh\n```\n\n ![mtproxy.sh](https://raw.githubusercontent.com/ellermister/mtproxy/master/mtproxy.jpg)\n\n### Docker | Whitelist MTProxy Docker Image\n\nThe image integrates nginx and mtproxy+tls to disguise traffic, and uses a **white-list** mode to deal with firewall detection.\n\nIf you use this Docker image, you don't need to use the script anymore, you can choose one of the two, don't mix it up.\n\n**If you didn't install Docker before**, below is the install script:\n\n```bash\ncurl -fsSL https://get.docker.com -o get-docker.sh\nsh get-docker.sh\n```\n\n**Start the container with whitelist:**\n\n ```bash\ndocker run -d \\\n--name mtproxy \\\n--restart=always \\\n-e domain=\"cloudflare.com\" \\\n-p 8080:80 \\\n-p 8443:443 \\\nellermister/mtproxy\n ```\n\n**The image enabled the IP segment whitelist by default.**  \nIf you don't need it, you can cancel it:\n\n```bash\ndocker run -d \\\n--name mtproxy \\\n--restart=always \\\n-e domain=\"cloudflare.com\" \\\n-e secret=\"548593a9c0688f4f7d9d57377897d964\" \\\n-e ip_white_list=\"OFF\" \\\n-p 8080:80 \\\n-p 8443:443 \\\nellermister/mtproxy\n```\n\n`ip_white_list` :\n\n- **OFF** disable whitelist\n- **IP** enable IP whitelist\n- **IPSEG** enable IPSEG whitelist\n\n`secret`:If you want to create a known key, the format is: 32 hexadecimal characters.\n\n**View the parameter configuration of the link in the log**:\n\n```bash\ndocker logs -f mtproxy\n```\n\nPlease change the HOST_PORT which is for the connection, the HOST_PORT in the above example is `8443`.\n\nFor more usage: <https://hub.docker.com/r/ellermister/nginx-mtproxy>\n\n## Usage\n\nConfiguration file `mtp_config`, pay attention to the format if you want to change secret manually.\n\nStart service\n\n```bash\n bash mtproxy.sh start\n```\n\nDebug service\n\n```bash\nbash mtproxy.sh debug\n```\n\nStop service\n\n```bash\nbash mtproxy.sh stop\n```\n\nRestart service\n\n```bash\nbash mtproxy.sh restart\n```\n\nReinstall/Reconfigure\n\n```bash\nbash mtproxy.sh reinstall\n```\n\n## Uninstall\n\nJust delete the directory where it is located.\n\n```bash\nrm -rf /home/mtproxy\n```\n\n## Run on Startup\n\nEdit `/etc/rc.local` and add the following code to the script:\n\n```bash\ncd /home/mtproxy && bash mtproxy.sh start > /dev/null 2>&1 &\n```\n\n## Crontab\n\nDue to the bug in the official mtproxy, there are problems with process processing when the pid is over 65535, and the process is prone to necrosis and abnormal exit.\n\nTherefore, it is recommended to monitor the process through scheduled tasks `crontab -e`:\n\nCheck the process and start it every minute\n\n```bash\n* * * * * cd /home/mtproxy && bash mtproxy.sh start > /dev/null 2>&1 &\n```\n\n## MTProxy Admin Bot\n\n<https://t.me/MTProxybot>\n> Sorry, an error has occurred during your request. Please try again later.(Code xxxxxx)\n\nIf you encounter such an error when applying for binding agent promotion, the official does not give a clear reason. According to feedback from netizens, such problems mostly occur due to insufficient account registration and 2 to 3 years.  \n**It is recommended to use accounts that are more than 3 years old and accounts that have not been banned.**\n\n## Open Source Used\n\n- <https://github.com/TelegramMessenger/MTProxy>\n- <https://github.com/9seconds/mtg>\n"
        },
        {
          "name": "mtp_config.example",
          "type": "blob",
          "size": 0.1220703125,
          "content": "#!/bin/bash\nsecret=\"4451023506896290666356006a67ce93\"\nport=8443\nweb_port=8888\ndomain=\"cloudflare.com\"\nproxy_tag=\"\"\nprovider=1"
        },
        {
          "name": "mtproxy-entrypoint.sh",
          "type": "blob",
          "size": 1.4677734375,
          "content": "#!/bin/bash\nset -e\n/usr/sbin/php-fpm7.4 -R\nchmod 777 /etc/nginx/ip_white.conf\nchmod 777 /run/php/php7.4-fpm.sock\n\n\ndefault_config=\"/home/mtproxy/mtp_config.example\"\nmtp_config=\"/home/mtproxy/mtp_config\"\n\nfunction gen_rand_hex() {\n    local result=$(dd if=/dev/urandom bs=1 count=500 status=none | od -An -tx1 | tr -d ' \\n')\n    echo \"${result:0:$1}\"\n}\n\n\nset_config(){\n\tif [ \"$secret\" ] && [[ \"$secret\" =~ ^[A-Za-z0-9]{32}$ ]]; then\n\t\tsed -i 's/secret=\"[0-9A-Za-z]*\"/secret=\"'$secret'\"/' $mtp_config\n\tfi\n\tif [ \"$tag\" ] && [[ \"$tag\" =~ ^[A-Za-z0-9]{32}$ ]]; then\n\t\tsed -i 's/proxy_tag=\"[0-9A-Za-z]*\"/proxy_tag=\"'$tag'\"/' $mtp_config\n\tfi\n\tif [ \"$domain\" ]; then\n\t\tsed -i 's/domain=\"[0-9A-z\\.\\-]*\"/domain=\"'$domain'\"/' $mtp_config\n\tfi\n\tif [ \"$provider\" ] && [[ \"$provider\" =~ ^[1-2]$ ]]; then\n\t\tsed -i 's/provider=[0-9]\\+/provider='$provider'/' $mtp_config\n\tfi\n}\n\nif [ ! -f $mtp_config ];then\n\tcp \"${default_config}\" \"$mtp_config\"\n\n  # if params is empty, then generate random values\n\tif [ ! \"$secret\" ]; then\n\t\tsecret=$(gen_rand_hex 32)\n\tfi\n\n\tif [ ! \"$ip_white_list\" ]; then\n\t\tip_white_list='IPSEG'\n\tfi\n\n\tif [ $ip_white_list == \"OFF\" ]; then\n\t\techo \"0.0.0.0/0 1;\" >> /etc/nginx/ip_white.conf\n\tfi\n\n\techo $ip_white_list > /var/ip_white_list\nfi;\n\nset_config\necho \"==================================================\"\necho -e \"Default port is \\033[31m443\\033[0m by docker started mtproxy!!!\"\necho \"==================================================\"\ncd /home/mtproxy\n{\n\tbash /home/mtproxy/mtproxy.sh daemon\n} &\n"
        },
        {
          "name": "mtproxy.jpg",
          "type": "blob",
          "size": 58.0703125,
          "content": null
        },
        {
          "name": "mtproxy.sh",
          "type": "blob",
          "size": 18.0791015625,
          "content": "#!/bin/bash\nWORKDIR=$(dirname $(readlink -f $0))\ncd $WORKDIR\npid_file=$WORKDIR/pid/pid_mtproxy\n\ncheck_sys() {\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\nfunction abs() {\n    echo ${1#-};\n}\n\nfunction get_ip_public() {\n    public_ip=$(curl -s https://api.ip.sb/ip -A Mozilla --ipv4)\n    [ -z \"$public_ip\" ] && public_ip=$(curl -s ipinfo.io/ip -A Mozilla --ipv4)\n    echo $public_ip\n}\n\nfunction get_ip_private() {\n    echo $(ip a | grep inet | grep -v 127.0.0.1 | grep -v inet6 | awk '{print $2}' | cut -d \"/\" -f1 | awk 'NR==1 {print $1}')\n}\n\nfunction get_local_ip(){\n  ip a | grep inet | grep 127.0.0.1 > /dev/null 2>&1\n  if [[ $? -eq 1 ]];then\n    echo $(get_ip_private)\n  else\n    echo \"127.0.0.1\"\n  fi\n}\n\nfunction get_nat_ip_param() {\n    nat_ip=$(get_ip_private)\n    public_ip=$(get_ip_public)\n    nat_info=\"\"\n    if [[ $nat_ip != $public_ip ]]; then\n        nat_info=\"--nat-info ${nat_ip}:${public_ip}\"\n    fi\n    echo $nat_info\n}\n\nfunction get_cpu_core() {\n    echo $(cat /proc/cpuinfo | grep \"processor\" | wc -l)\n}\n\nfunction get_architecture() {\n    local architecture=\"\"\n    case $(uname -m) in\n    i386) architecture=\"386\" ;;\n    i686) architecture=\"386\" ;;\n    x86_64) architecture=\"amd64\" ;;\n    arm | aarch64 | aarch) dpkg --print-architecture | grep -q \"arm64\" && architecture=\"arm64\" || architecture=\"armv6l\" ;;\n    *) echo \"Unsupported system architecture \"$(uname -m) && exit 1 ;;\n    esac\n    echo $architecture\n}\n\nfunction build_mtproto() {\n    cd $WORKDIR\n\n    local platform=$(uname -m)\n    if [[ -z \"$1\" ]]; then\n        echo \"缺少参数\"\n        exit 1\n    fi\n\n    do_install_build_dep\n\n    rm -rf build\n    mkdir build && cd build\n\n    if [[ \"1\" == \"$1\" ]]; then\n         if [ -d 'MTProxy' ]; then\n            rm -rf 'MTProxy'\n        fi\n\n        git clone https://github.com/ellermister/MTProxyC --depth=1 MTProxy\n        cd MTProxy && make && cd objs/bin &&  chmod +x mtproto-proxy\n\n        if [ ! -f \"./mtproto-proxy\" ]; then\n            echo \"mtproto-proxy 编译失败\"\n            exit 1\n        fi\n\n        cp -f mtproto-proxy $WORKDIR\n        \n\n        # clean\n        rm -rf 'MTProxy'\n\n    elif [[ \"2\" == \"$1\" ]]; then\n        # golang\n        local arch=$(get_architecture)\n\n        #  https://go.dev/dl/go1.18.4.linux-amd64.tar.gz\n        local golang_url=\"https://go.dev/dl/go1.18.4.linux-$arch.tar.gz\"\n        wget $golang_url -O golang.tar.gz\n        rm -rf go && tar -C . -xzf golang.tar.gz\n        export PATH=$PATH:$(pwd)/go/bin\n\n        go version\n        if [[ $? != 0 ]]; then\n            local uname_m=$(uname -m)\n            local architecture_origin=$(dpkg --print-architecture)\n            echo -e \"[\\033[33mError\\033[0m] golang download failed, please check!!! arch: $arch, platform: $platform,  uname: $uname_m, architecture_origin: $architecture_origin download url: $golang_url\"\n            exit 1\n        fi\n\n        rm -rf build-mtg\n        git clone https://github.com/9seconds/mtg.git -b v1 build-mtg\n        cd build-mtg && git reset --hard 9d67414db633dded5f11d549eb80617dc6abb2c3  && make static\n\n        if [[ ! -f \"./mtg\" ]]; then\n            echo -e \"[\\033[33mError\\033[0m] Build fail for mtg, please check!!! $arch\"\n            exit 1\n        fi\n\n        cp -f mtg $WORKDIR && chmod +x $WORKDIR/mtg\n    fi\n\n    # clean\n    cd $WORKDIR\n    rm -rf build\n\n}\n\nfunction get_mtg_provider() {\n    source ./mtp_config\n\n    local arch=$(get_architecture)\n    if [[ \"$arch\" != \"amd64\" && $provider -eq 1 ]]; then\n        provider=2\n    fi\n\n    if [ $provider -eq 1 ]; then\n        echo \"mtproto-proxy\"\n    elif [ $provider -eq 2 ]; then\n        echo \"mtg\"\n    else\n        echo \"错误配置,请重新安装\"\n        exit 1\n    fi\n}\n\nfunction is_installed() {\n    if [ ! -f \"$WORKDIR/mtp_config\" ]; then\n        return 1\n    fi\n    return 0\n}\n\n\nfunction kill_process_by_port() {\n    pids=$(get_pids_by_port $1)\n    if [ -n \"$pids\" ]; then\n        kill -9 $pids\n    fi\n}\n\nfunction get_pids_by_port() {\n    echo $(netstat -tulpn 2>/dev/null | grep \":$1 \" | awk '{print $7}' | sed 's|/.*||')\n}\n\nfunction is_port_open() {\n    pids=$(get_pids_by_port $1)\n\n    if [ -n \"$pids\" ]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\n\nfunction is_running_mtp() {\n    if [ -f $pid_file ]; then\n\n        if is_pid_exists $(cat $pid_file); then\n            return 0\n        fi\n    fi\n    return 1\n}\n\nfunction is_supported_official_version() {\n    local arch=$(uname -m)\n    if [[ \"$arch\" == \"x86_64\" ]]; then\n        return 0\n    else\n        return 1\n    fi\n}\n\nfunction is_pid_exists() {\n    # check_ps_not_install_to_install\n    local exists=$(ps aux | awk '{print $2}' | grep -w $1)\n    if [[ ! $exists ]]; then\n        return 1\n    else\n        return 0\n    fi\n}\n\ndo_install() {\n    cd $WORKDIR\n\n    mtg_provider=$(get_mtg_provider)\n\n    if [[ \"$mtg_provider\" == \"mtg\" ]]; then\n        local arch=$(get_architecture)\n        local mtg_url=https://github.com/9seconds/mtg/releases/download/v1.0.11/mtg-1.0.11-linux-$arch.tar.gz\n        wget $mtg_url -O mtg.tar.gz\n        tar -xzvf mtg.tar.gz mtg-1.0.11-linux-$arch/mtg --strip-components 1\n\n        [[ -f \"./mtg\" ]] && ./mtg && echo \"Installed for mtg\"\n    else\n        wget https://github.com/ellermister/mtproxy/releases/download/0.03/mtproto-proxy -O mtproto-proxy -q\n        chmod +x mtproto-proxy\n    fi\n\n    if [ ! -d \"./pid\" ]; then\n        mkdir \"./pid\"\n    fi\n\n}\n\nprint_line() {\n    echo -e \"=========================================\"\n}\n\ndo_kill_process() {\n    cd $WORKDIR\n    source ./mtp_config\n\n    if is_port_open $port; then\n        echo \"检测到端口 $port 被占用, 准备杀死进程!\"\n        kill_process_by_port $port\n    fi\n    \n    if is_port_open $web_port; then\n        echo \"检测到端口 $web_port 被占用, 准备杀死进程!\"\n        kill_process_by_port $web_port\n    fi\n}\n\ndo_check_system_datetime_and_update() {\n    dateFromLocal=$(date +%s)\n    dateFromServer=$(date -d \"$(curl -v --silent ip.sb 2>&1 | grep Date | sed -e 's/< Date: //')\" +%s)\n    offset=$(abs $(( \"$dateFromServer\" - \"$dateFromLocal\")))\n    tolerance=60\n    if [ \"$offset\" -gt \"$tolerance\" ];then\n        echo \"检测到系统时间不同步于世界时间, 即将更新\"\n        ntpdate -u time.google.com\n    fi\n}\n\ndo_install_basic_dep() {\n    if check_sys packageManager yum; then\n        yum install -y iproute curl wget procps-ng.x86_64 net-tools ntp\n    elif check_sys packageManager apt; then\n        apt install -y iproute2 curl wget procps net-tools ntpdate\n    fi\n\n    return 0\n}\n\ndo_install_build_dep() {\n    if check_sys packageManager yum; then\n        yum install -y git  openssl-devel zlib-devel\n        yum groupinstall -y \"Development Tools\"\n    elif check_sys packageManager apt; then\n        apt install -y git curl  build-essential libssl-dev zlib1g-dev\n    fi\n    return 0\n}\n\ndo_config_mtp() {\n    cd $WORKDIR\n\n    while true; do\n        default_provider=1\n        echo -e \"请输入要安装的程序版本\"\n        echo -e \"1. Telegram 官方版本 (C语言, 存在一些问题, 只支持 x86_64)\"\n        echo -e \"2. 9seconds 第三方版本(兼容性强)\"\n\n        if ! is_supported_official_version; then\n            echo -e \"\\n[\\033[33m提醒\\033[0m] 你的系统不支持官方版本\\n\"\n        fi\n\n        read -p \"(默认版本: ${default_provider}):\" input_provider\n        [ -z \"${input_provider}\" ] && input_provider=${default_provider}\n        expr ${input_provider} + 1 &>/dev/null\n        if [ $? -eq 0 ]; then\n            if [ ${input_provider} -ge 1 ] && [ ${input_provider} -le 2 ] && [ ${input_provider:0:1} != 0 ]; then\n                echo\n                echo \"---------------------------\"\n                echo \"provider = ${input_provider}\"\n                echo \"---------------------------\"\n                echo\n                break\n            fi\n        fi\n        echo -e \"[\\033[33m错误\\033[0m] 请重新输入程序版本 [1-65535]\\n\"\n    done\n\n    while true; do\n        default_port=443\n        echo -e \"请输入一个客户端连接端口 [1-65535]\"\n        read -p \"(默认端口: ${default_port}):\" input_port\n        [ -z \"${input_port}\" ] && input_port=${default_port}\n        expr ${input_port} + 1 &>/dev/null\n        if [ $? -eq 0 ]; then\n            if [ ${input_port} -ge 1 ] && [ ${input_port} -le 65535 ] && [ ${input_port:0:1} != 0 ]; then\n                echo\n                echo \"---------------------------\"\n                echo \"port = ${input_port}\"\n                echo \"---------------------------\"\n                echo\n                break\n            fi\n        fi\n        echo -e \"[\\033[33m错误\\033[0m] 请重新输入一个客户端连接端口 [1-65535]\"\n    done\n\n    # 管理端口\n    while true; do\n        default_manage=8888\n        echo -e \"请输入一个管理端口 [1-65535]\"\n        read -p \"(默认端口: ${default_manage}):\" input_manage_port\n        [ -z \"${input_manage_port}\" ] && input_manage_port=${default_manage}\n        expr ${input_manage_port} + 1 &>/dev/null\n        if [ $? -eq 0 ] && [ $input_manage_port -ne $input_port ]; then\n            if [ ${input_manage_port} -ge 1 ] && [ ${input_manage_port} -le 65535 ] && [ ${input_manage_port:0:1} != 0 ]; then\n                echo\n                echo \"---------------------------\"\n                echo \"manage port = ${input_manage_port}\"\n                echo \"---------------------------\"\n                echo\n                break\n            fi\n        fi\n        echo -e \"[\\033[33m错误\\033[0m] 请重新输入一个管理端口 [1-65535]\"\n    done\n\n    # domain\n    while true; do\n        default_domain=\"azure.microsoft.com\"\n        echo -e \"请输入一个需要伪装的域名：\"\n        read -p \"(默认域名: ${default_domain}):\" input_domain\n        [ -z \"${input_domain}\" ] && input_domain=${default_domain}\n        http_code=$(curl -I -m 10 -o /dev/null -s -w %{http_code} $input_domain)\n        if [ $http_code -eq \"200\" ] || [ $http_code -eq \"302\" ] || [ $http_code -eq \"301\" ]; then\n            echo\n            echo \"---------------------------\"\n            echo \"伪装域名 = ${input_domain}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n        echo -e \"[\\033[33m状态码：${http_code}错误\\033[0m] 域名无法访问,请重新输入或更换域名!\"\n    done\n\n    # config info\n    public_ip=$(get_ip_public)\n    secret=$(gen_rand_hex 32)\n\n    # proxy tag\n    while true; do\n        default_tag=\"\"\n        echo -e \"请输入你需要推广的TAG：\"\n        echo -e \"若没有,请联系 @MTProxybot 进一步创建你的TAG, 可能需要信息如下：\"\n        echo -e \"IP: ${public_ip}\"\n        echo -e \"PORT: ${input_port}\"\n        echo -e \"SECRET(可以随便填): ${secret}\"\n        read -p \"(留空则跳过):\" input_tag\n        [ -z \"${input_tag}\" ] && input_tag=${default_tag}\n        if [ -z \"$input_tag\" ] || [[ \"$input_tag\" =~ ^[A-Za-z0-9]{32}$ ]]; then\n            echo\n            echo \"---------------------------\"\n            echo \"PROXY TAG = ${input_tag}\"\n            echo \"---------------------------\"\n            echo\n            break\n        fi\n        echo -e \"[\\033[33m错误\\033[0m] TAG格式不正确!\"\n    done\n\n    cat >./mtp_config <<EOF\n#!/bin/bash\nsecret=\"${secret}\"\nport=${input_port}\nweb_port=${input_manage_port}\ndomain=\"${input_domain}\"\nproxy_tag=\"${input_tag}\"\nprovider=${input_provider}\nEOF\n    echo -e \"配置已经生成完毕!\"\n}\n\nfunction str_to_hex() {\n    string=$1\n    hex=$(printf \"%s\" \"$string\" | od -An -tx1 | tr -d ' \\n')\n    echo $hex\n}\n\nfunction gen_rand_hex() {\n    local result=$(dd if=/dev/urandom bs=1 count=500 status=none | od -An -tx1 | tr -d ' \\n')\n    echo \"${result:0:$1}\"\n}\n\ninfo_mtp() {\n    if [[ \"$1\" == \"ingore\" ]] || is_running_mtp; then\n        source ./mtp_config\n        public_ip=$(get_ip_public)\n\n        domain_hex=$(str_to_hex $domain)\n\n        client_secret=\"ee${secret}${domain_hex}\"\n        echo -e \"TMProxy+TLS代理: \\033[32m运行中\\033[0m\"\n        echo -e \"服务器IP：\\033[31m$public_ip\\033[0m\"\n        echo -e \"服务器端口：\\033[31m$port\\033[0m\"\n        echo -e \"MTProxy Secret:  \\033[31m$client_secret\\033[0m\"\n        echo -e \"TG一键链接: https://t.me/proxy?server=${public_ip}&port=${port}&secret=${client_secret}\"\n        echo -e \"TG一键链接: tg://proxy?server=${public_ip}&port=${port}&secret=${client_secret}\"\n    else\n        echo -e \"TMProxy+TLS代理: \\033[33m已停止\\033[0m\"\n    fi\n}\n\nfunction get_run_command(){\n  cd $WORKDIR\n  mtg_provider=$(get_mtg_provider)\n  source ./mtp_config\n  if [[ \"$mtg_provider\" == \"mtg\" ]]; then\n      domain_hex=$(str_to_hex $domain)\n      client_secret=\"ee${secret}${domain_hex}\"\n      local local_ip=$(get_local_ip)\n      public_ip=$(get_ip_public)\n      \n      # ./mtg simple-run -n 1.1.1.1 -t 30s -a 512kib 0.0.0.0:$port $client_secret >/dev/null 2>&1 &\n      [[ -f \"./mtg\" ]] || (echo -e \"提醒：\\033[33m MTProxy 代理程序不存在请重新安装! \\033[0m\" && exit 1)\n      echo \"./mtg run $client_secret $proxy_tag -b 0.0.0.0:$port --multiplex-per-connection 500 --prefer-ip=ipv6 -t $local_ip:$web_port\" -4 \"$public_ip:$port\"\n  else\n      curl -s https://core.telegram.org/getProxyConfig -o proxy-multi.conf\n      curl -s https://core.telegram.org/getProxySecret -o proxy-secret\n      nat_info=$(get_nat_ip_param)\n      workerman=$(get_cpu_core)\n      tag_arg=\"\"\n      [[ -n \"$proxy_tag\" ]] && tag_arg=\"-P $proxy_tag\"\n      echo \"./mtproto-proxy -u nobody -p $web_port -H $port -S $secret --aes-pwd proxy-secret proxy-multi.conf -M $workerman $tag_arg --domain $domain $nat_info --ipv6\"\n  fi\n}\n\nrun_mtp() {\n    cd $WORKDIR\n\n    if is_running_mtp; then\n        echo -e \"提醒：\\033[33mMTProxy已经运行，请勿重复运行!\\033[0m\"\n    else\n        do_kill_process\n        do_check_system_datetime_and_update\n\n        local command=$(get_run_command)\n        echo $command\n        $command >/dev/null 2>&1 &\n\n        echo $! >$pid_file\n        sleep 2\n        info_mtp\n    fi\n}\n\n\ndaemon_mtp() {\n    cd $WORKDIR\n\n    if is_running_mtp; then\n        echo -e \"提醒：\\033[33mMTProxy已经运行，请勿重复运行!\\033[0m\"\n    else\n        do_kill_process\n        do_check_system_datetime_and_update\n\n        local command=$(get_run_command)\n        echo $command\n        while true\n        do\n            {\n                sleep 2\n                info_mtp \"ingore\"\n            } &\n            $command >/dev/null 2>&1\n            echo \"进程检测到被关闭,正在重启中!!!\"\n            sleep 2\n        done\n    fi\n}\n\ndebug_mtp() {\n    cd $WORKDIR\n\n    echo \"当前正在运行调试模式：\"\n    echo -e \"\\t你随时可以通过 Ctrl+C 进行取消操作\"\n\n    do_kill_process\n    do_check_system_datetime_and_update\n\n    local command=$(get_run_command)\n    echo $command\n    $command\n\n}\n\nstop_mtp() {\n    local pid=$(cat $pid_file)\n    kill -9 $pid\n\n    if is_pid_exists $pid; then\n        echo \"停止任务失败\"\n    fi\n}\n\nreinstall_mtp() {\n    cd $WORKDIR\n    if [ -f \"./mtp_config\" ]; then\n        while true; do\n            default_keep_config=\"y\"\n            echo -e \"是否保留配置文件? \"\n            read -p \"y: 保留 , n: 不保留 (默认: ${default_keep_config}):\" input_keep_config\n            [ -z \"${input_keep_config}\" ] && input_keep_config=${default_keep_config}\n\n            if [[ \"$input_keep_config\" == \"y\" ]] || [[ \"$input_keep_config\" == \"n\" ]]; then\n                if [[ \"$input_keep_config\" == \"n\" ]]; then\n                    rm -f mtp_config\n                fi\n                break\n            fi\n            echo -e \"[\\033[33m错误\\033[0m] 输入错误， 请输入 y / n\"\n        done\n    fi\n\n    if [ ! -f \"./mtp_config\" ]; then \n        do_install_basic_dep\n        do_config_mtp\n    fi\n\n    do_install\n    run_mtp\n}\n\nparam=$1\n\nif [[ \"start\" == $param ]]; then\n    echo \"即将：启动脚本\"\n    run_mtp\nelif [[ \"daemon\" == $param ]]; then\n    echo \"即将：启动脚本(守护进程)\"\n    daemon_mtp\nelif [[ \"stop\" == $param ]]; then\n    echo \"即将：停止脚本\"\n    stop_mtp\nelif [[ \"debug\" == $param ]]; then\n    echo \"即将：调试运行\"\n    debug_mtp\nelif [[ \"restart\" == $param ]]; then\n    stop_mtp\n    run_mtp\n    debug_mtp\nelif [[ \"reinstall\" == $param ]]; then\n    reinstall_mtp\nelif [[ \"build\" == $param ]]; then\n    arch=$(get_architecture)\n    if [[ \"$arch\" == \"amd64\" ]]; then\n        build_mtproto 1\n    fi\n    \n     build_mtproto 2\nelse\n    if ! is_installed; then\n        echo \"MTProxyTLS一键安装运行绿色脚本\"\n        print_line\n        echo -e \"检测到您的配置文件不存在, 为您指引生成!\" && print_line\n\n        do_install_basic_dep\n        do_config_mtp\n        do_install\n        run_mtp\n    else\n        [ ! -f \"$WORKDIR/mtp_config\" ] && do_config_mtp\n        echo \"MTProxyTLS一键安装运行绿色脚本\"\n        print_line\n        info_mtp\n        print_line\n        echo -e \"脚本源码：https://github.com/ellermister/mtproxy\"\n        echo -e \"配置文件: $WORKDIR/mtp_config\"\n        echo -e \"卸载方式：直接删除当前目录下文件即可\"\n        echo \"使用方式:\"\n        echo -e \"\\t启动服务\\t bash $0 start\"\n        echo -e \"\\t调试运行\\t bash $0 debug\"\n        echo -e \"\\t停止服务\\t bash $0 stop\"\n        echo -e \"\\t重启服务\\t bash $0 restart\"\n        echo -e \"\\t重新安装代理程序 bash $0 reinstall\"\n    fi\nfi\n"
        },
        {
          "name": "nginx",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}