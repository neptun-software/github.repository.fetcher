{
  "metadata": {
    "timestamp": 1736568682476,
    "page": 761,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "fscarmen/ArgoX",
      "stars": 1276,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.8828125,
          "content": "# 【ArgoX】 = Argo + Xray\n\n* * *\n\n# 目录\n\n- [更新信息](README.md#更新信息)\n- [项目特点](README.md#项目特点)\n- [ArgoX for VPS 运行脚本](README.md#argox-for-vps-运行脚本)\n- [Argo Json 的获取](README.md#argo-json-的获取)\n- [Argo Token 的获取](README.md#argo-token-的获取)\n- [各种场景下 xray outbound 和 routing 模板的说明](README.md#各种场景下-xray-outbound-和-routing-模板的说明)\n- [主体目录文件及说明](README.md#主体目录文件及说明)\n- [免责声明](README.md#免责声明)\n\n* * *\n## 更新信息\n2024.12.24 v1.6.6 Refactored the chatGPT detection method based on lmc999's detection and unlocking script; 根据 lmc999 的检测解锁脚本，重构了检测 chatGPT 方法\n\n2024.5.20 v1.6.5 1. Add Github CDN; 2. Remove subscription template 2; 1. 添加 Github 加速 CDN; 2. 去掉订阅模板2\n\n2024.3.26 v1.6.4 Thanks to UUb for the official change of the compilation, dependencies jq, qrencode from apt installation to download the binary file, reduce the installation time of about 15 seconds, the implementation of the project's positioning of lightweight, as far as possible to install the least system dependencies; 感谢 UUb 兄弟的官改编译，依赖 jq, qrencode 从 apt 安装改为下载二进制文件，缩减安装时间约15秒，贯彻项目轻量化的定位，尽最大可能安装最少的系统依赖\n\n<details>\n    <summary>历史更新 history（点击即可展开或收起）</summary>\n<br>\n\n>2024.3.24 v1.6.3 1. Compatible with CentOS 7,8,9; 2. Remove default Github CDN; 1. 适配 CentOS 7,8,9; 2. 去掉默认的 Github 加速网\n>\n>2024.3.13 v1.6.2 1. Subscription made optional, no nginx and qrcode installed if not needed; 2. Use native IP if it supports unlocking chatGPT, otherwise use warp chained proxy unlocking; 1. 在线订阅改为可选项，如不需要，不安装 nginx 和 qrcode; 2. 如自身支持解锁 chatGPT，则使用原生 IP，否则使用 warp 链式代理解锁\n>\n>2024.3.10 v1.6.1 1. To protect node data security, use fake information to fetch subscribe api; 2. Adaptive the above clients. https://\\<argo tunnel url\\>/\\<uuid\\>/\\<auto | auto2\\>; 1. 为保护节点数据安全，在 api 转订阅时，使用虚假信息; 2. 自适应以上的客户端，https://\\<argo tunnel url\\>/\\<uuid\\>/\\<auto | auto2\\>\n>\n>2024.3.2 v1.6 1. Support V2rayN / Nekobox / Clash / sing-box / Shadowrocket subscribe. https://\\<argo tunnel url\\>/\\<uuid\\>/\\<base64 | clash | sing-box-pc | sing-box-phone | proxies | qr\\>. Index of all subscribes: https://\\<argo tunnel url\\>/\\<uuid\\>/  ; Reinstall is required; 2. Adaptive the above clients. https://\\<argo tunnel url\\>/\\<uuid\\>/\\<auto | auto2\\> ; 1. 增加 V2rayN / Nekobox / Clash / sing-box / Shadowrocket 订阅，https://\\<argo tunnel url\\>/\\<uuid\\>/\\<base64 | clash | sing-box-pc | sing-box-phone | proxies | qr\\>， 所有订阅的索引: https://\\<argo tunnel url\\>/\\<uuid\\>/，需要重新安装; 2. 自适应以上的客户端，https://\\<argo tunnel url\\>/\\<uuid\\>/\\<auto | auto2\\>\n>\n>2024.2.6 V1.5 Argo run protocol uses default instead of http2. The default value is auto, what will automatically configure the quic protocol. If cloudflared is unable to establish UDP connections, it will fallback to using the http2 protocol; Argo 运行的协议使用默认值，而不是 http2。默认值为 auto，将自动配置 quic 协议。如果 cloudflared 无法建立 UDP 连接，它将回落到使用 http2 协议。\n>\n>2023.10.25 V1.4 1. Support Reality-Vison and Reality-gRPC, Both are direct connect solutions; 2. Quick-tunnel through the API to check dynamic domain names1; 3. After installing, add [argox] shortcut; 4. Output the configuration for Sing-box Client; 1. 支持 Reality-Vison and Reality-gRPC，两个均为直连方案; 2. 临时隧道通过 API 查动态域名; 3. 安装后，增加 [argox] 的快捷运行方式; 4. 输出 Sing-box Client 的配置\n>\n>2023.10.16 V1.3 1. Support Alpine; 2. Add Sing-box PID, runtime, and memory usage to the menu; 3. Remove the option of using warp on returning to China; 支持 Alpine; 2. 菜单中增加 sing-box 内存占用显示; 3. 去掉使用 warp 回国的选项\n>\n>2023.10.11 V1.2 1. Add the option of blocking on returning to China; 2. Add a number of quality cdn's that are collected online; 3. Use Warp IPv6 to visit chatGPT; 1. 增加禁止归国选项; 2. 增加线上收录的若干优质 cdn 3. 使用 Warp IPv6 访问 chatGPT\n>\n>2023.6.23 V1.1 For better network traffic diversion in various scenarios, split `config.json` into `inbound.json` and `outbound.json`; 为了更好的在各种情景下分流，把 `config.json` 拆分为 `inbound.json` 和 `outbound.json`\n>\n>2023.4.13 1.0 正式版\n>\n>2023.3.11 beta6 1. Users can easily obtain the JSON of a fixed domain name tunnel through the accompanying function website at https://fscarmen.cloudflare.now.cc ; 2. Change the sensitive path names; 3. Add CDN for download; 1. 用户可以通过配套的功能网轻松获取固定域名隧道的 json, https://fscarmen.cloudflare.now.cc;  2. 改掉敏感路径名; 3. 下载增加 CDN\n>\n>2023.3.4 beta5 1. Change listening to all network addresses to only Argo tunnel directed listening for added security; 2. Argo Tunnel supports dualstack; 1. 把对所有的网络地址监听改为只对 Argo 隧道作定向监听，以增加安全性; 2. Argo 隧道支持双栈\n>\n>2023.3.2 beta4 Change listening to all network addresses to only Argo tunnel directed listening for added security; 把对所有的网络地址监听改为只对 Argo 隧道作定向监听，以增加安全性\n>\n>2023.2.24 beta3 1. Simplify the operation of changing argo tunnel; 2. Use wget global instead of cURL; 1. 简化转换 Argo 隧道的方法; 2. 全局用 wget 替代 cURL\n>\n>2023.2.17 beta2 1. extremely fast installation mode, [-f] followed by a parameter file path; 2. Support for switching between the three argo tunnels; 3. Synchronise Argo and Xray to the latest version at any time; 4. Optimize the code to achieve speedup.\n>1.极速安装模式，[-f] 后带参数文件路径；2.安装后，支持三种argo隧道随意切换；3.随时同步Argo 和 Xray到最新版本；4.优化代码，达到提速的目的。\n</details>\n\n2023.2.16 beta1 Argo + Xray for vps\n\n\n## 项目特点:\n\n* 在 VPS 中部署 Xray，采用的方案为  Argo + Xray + Reality / Argo + Xray + WebSocket + TLS；\n* 正常用 CF 是访问机房回源，Argo 则是每次创建两个反向链接到两个就近机房，然后回源是通过源服务器就近机房回源，其中用户访问机房到源服务器连接的就近机房之间是CF自己的黑盒线路；\n* 使用 CloudFlare 的 Argo 隧道，使用TLS加密通信，可以将应用程序流量安全地传输到Cloudflare网络，提高了应用程序的安全性和可靠性。此外，Argo Tunnel也可以防止IP泄露和DDoS攻击等网络威胁；\n* Argo 是内网穿透的隧道，既 Xray 的 inbound 不对外暴露端口增加安全性，也不用做伪装网浪费资源，还支持 Cloudflare 的全部端口，不会死守443被封，同时服务端输出 Argo Ws 数据流，大大简化数据处理流程，提高响应，tls 由 cf 提供，避免多重 tls；\n* Argo 隧道既支持临时隧道，又支持通过 Token 或者 cloudflared Cli 方式申请的固定域名，直接优选 + 隧道，不需要申请域名证书，并可以在安装后随时转换；\n* 同时支持 Xray 的直连协议: reality vison 和 reality gRPC; 以及 ws 回落分流的 4 种主流协议: vless /  vmess / trojan / shadowsocks + WSS (ws + tls)；\n* 内置 warp 链式代理解锁 chatGPT；\n* 节点信息输出到 V2rayN / Clash Meta / 小火箭 / Nekobox / Sing-box (SFI, SFA, SFM)，订阅自动适配客户端，一个订阅 url 走天下；\n* 极速安装，即可交互式安装，也可像 docker compose 一样的非交互式安装，提前把所有的参数放到一个配置文件，全程不到5秒。\n\n\n## ArgoX for VPS 运行脚本:\n\n```\nbash <(wget -qO- https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh)\n```\n\n  | Option 参数 | Remark 备注 |\n  | -----------| ------ |\n  | -c         | Chinese 中文 |\n  | -e         | English 英文 |\n  | -a         | Argo on-off Argo 开关 |\n  | -x         | Xray on-off Xray 开关 |\n  | -s         | Change the Argo tunnel 更换 Argo 隧道 |\n  | -f         | Variable file，refer to REPO file \"config\" 参数文件，可参数项目的文件 config |\n  | -u         | Uninstall 卸载 |\n  | -n         | Export Nodes list 显示节点信息 |\n  | -v         | Sync Argo Xray to the newest 同步 Argo Xray 到最新版本 |\n  | -b         | Upgrade kernel, turn on BBR, change Linux system 升级内核、安装BBR、DD脚本 |\n\n\n\n## Argo Json 的获取\n\n用户可以通过 Cloudflare Json 生成网轻松获取: https://fscarmen.cloudflare.now.cc\n\n![image](https://user-images.githubusercontent.com/62703343/224388718-6adf22d0-01d3-46a0-8063-bc0a2210795f.png)\n\n如想手动，可以参考，以 Debian 为例，需要用到的命令，[Deron Cheng - CloudFlare Argo Tunnel 试用](https://zhengweidong.com/try-cloudflare-argo-tunnel)\n\n\n## Argo Token 的获取\n\n详细教程: [群晖套件：Cloudflare Tunnel 内网穿透中文教程 支持DSM6、7](https://imnks.com/5984.html)\n\n<img width=\"1409\" alt=\"image\" src=\"https://user-images.githubusercontent.com/92626977/218253461-c079cddd-3f4c-4278-a109-95229f1eb299.png\">\n\n<img width=\"1619\" alt=\"image\" src=\"https://user-images.githubusercontent.com/92626977/218253838-aa73b63d-1e8a-430e-b601-0b88730d03b0.png\">\n\n<img width=\"1155\" alt=\"image\" src=\"https://user-images.githubusercontent.com/92626977/218253971-60f11bbf-9de9-4082-9e46-12cd2aad79a1.png\">\n\n\n## 各种场景下 xray outbound 和 routing 模板的说明\n\n* 域名分类中包含的各具体域名: https://github.com/v2fly/domain-list-community/blob/master/data\n* Routing 路由说明: https://www.v2fly.org/config/routing.html\n* 修改 `/etc/argox/outbound.json`，注意: 请先备份好原 `outbound.json` 文件，修改的 json 做到 https://www.json.cn/ 查看格式\n* 修改后运行 `systemctl restart xray; sleep 1; systemctl is-active xray` ，反显 active 即生效，如为 failed 即为失败，请检查配置文件格式\n\n| 说明 | 模板示例 |\n| --- | ------ |\n| chatGPT 使用链式 warp 代理，不需要本地安装 warp，其余流量走 vps 默认的网络出口 | [warp](https://gitlab.com/fscarmen/warp#通过-warp-解锁-chatgpt-的方法) |\n| 指定流量走本机指定的网络接口，对于双栈能区分 IPv4 或 IPv6，其余流量走 vps 默认的网络出口 | [interface](https://gitlab.com/fscarmen/warp#指定网站分流到-interface-的-xray-配置模板适用于-warp-client-warp-和-warp-warp-go-非全局) |\n| 指定流量走本机指定的socks5代理，对于双栈能区分 IPv4 或 IPv6，其余流量走 vps 默认的网络出口 | [socks5](https://gitlab.com/fscarmen/warp#指定网站分流到-socks5-的-xray-配置模板-适用于-warp-client-proxy-和-wireproxy) |\n\n\n## 主体目录文件及说明\n\n```\n/etc/argox                    # 项目主体目录\n├── subscribe                 # 订阅文件目录\n│   ├── qr                    # Nekoray / V2rayN 订阅二维码\n│   ├── base64                # Nekoray / V2rayN 订阅文件\n│   ├── clash                 # Clash 订阅文件\n│   ├── clash2                # Clash 订阅文件2\n│   ├── proxies               # Clash proxy provider 订阅文件\n│   ├── shadowrocket          # Shadowrocket 订阅文件\n│   ├── sing-box-pc           # SFM 订阅文件\n│   ├── sing-box-phone        # SFI / SFA 订阅文件\n│   └── sing-box2             # SFI / SFA / SFM 订阅文件2\n├── cloudflared               # argo tunnel 主程序\n├── geoip.dat                 # 用于根据 IP 地址来进行地理位置策略或访问控制\n├── geosite.dat               # 用于基于域名或网站分类来进行访问控制、内容过滤或安全策略\n├── inbound.json              # vless / vmess / ss / trojan + WSS 入站配置文件\n├── language                  # 存放脚本语言文件，E 为英文，C 为中文\n├── list                      # 节点信息列表\n├── outbound.json             # 出站和路由配置文件，chatGPT 使用 warp ipv6 链式代理出站\n├── xray                      # xray 主程序\n├── nginx.conf                # Nginx 配置文件\n├── ax.sh                     # 快捷方式脚本文件\n├── jq                        # 命令行 JSON 处理器\n└── qrencode                  # QR 码编码二进制文件\n```\n\n\n## 免责声明:\n* 本程序仅供学习了解, 非盈利目的，请于下载后 24 小时内删除, 不得用作任何商业用途, 文字、数据及图片均有所属版权, 如转载须注明来源。\n* 使用本程序必循遵守部署免责声明。使用本程序必循遵守部署服务器所在地、所在国家和用户所在国家的法律法规, 程序作者不对使用者任何不当行为负责。"
        },
        {
          "name": "argox.sh",
          "type": "blob",
          "size": 68.0537109375,
          "content": "#!/usr/bin/env bash\n\n# 当前脚本版本号\nVERSION='1.6.6 (2024.12.24)'\n\n# 各变量默认值\nGH_PROXY='https://ghproxy.lvedong.eu.org/'\nWS_PATH_DEFAULT='argox'\nWORK_DIR='/etc/argox'\nTEMP_DIR='/tmp/argox'\nTLS_SERVER=addons.mozilla.org\nMETRICS_PORT='3333'\nCDN_DOMAIN=(\"8cc.free.hr\" \"cm.yutian.us.kg\" \"fan.yutian.us.kg\" \"xn--b6gac.eu.org\" \"dash.cloudflare.com\" \"skk.moe\" \"visa.com\")\nSUBSCRIBE_TEMPLATE=\"https://raw.githubusercontent.com/fscarmen/client_template/main\"\n\nexport DEBIAN_FRONTEND=noninteractive\n\ntrap \"rm -rf $TEMP_DIR; echo -e '\\n' ;exit 1\" INT QUIT TERM EXIT\n\nmkdir -p $TEMP_DIR\n\nE[0]=\"Language:\\n 1. English (default) \\n 2. 简体中文\"\nC[0]=\"${E[0]}\"\nE[1]=\"Refactored the chatGPT detection method based on lmc999's detection and unlocking script.\"\nC[1]=\"根据 lmc999 的检测解锁脚本，重构了检测 chatGPT 方法\"\nE[2]=\"Project to create Argo tunnels and Xray specifically for VPS, detailed:[https://github.com/fscarmen/argox]\\n Features:\\n\\t • Allows the creation of Argo tunnels via Token, Json and ad hoc methods. User can easily obtain the json at https://fscarmen.cloudflare.now.cc .\\n\\t • Extremely fast installation method, saving users time.\\n\\t • Support system: Ubuntu, Debian, CentOS, Alpine and Arch Linux 3.\\n\\t • Support architecture: AMD,ARM and s390x\\n\"\nC[2]=\"本项目专为 VPS 添加 Argo 隧道及 Xray,详细说明: [https://github.com/fscarmen/argox]\\n 脚本特点:\\n\\t • 允许通过 Token, Json 及 临时方式来创建 Argo 隧道,用户通过以下网站轻松获取 json: https://fscarmen.cloudflare.now.cc\\n\\t • 极速安装方式,大大节省用户时间\\n\\t • 智能判断操作系统: Ubuntu 、Debian 、CentOS 、Alpine 和 Arch Linux,请务必选择 LTS 系统\\n\\t • 支持硬件结构类型: AMD 和 ARM\\n\"\nE[3]=\"Input errors up to 5 times.The script is aborted.\"\nC[3]=\"输入错误达5次,脚本退出\"\nE[4]=\"UUID should be 36 characters, please re-enter \\(\\${a} times remaining\\)\"\nC[4]=\"UUID 应为36位字符,请重新输入 \\(剩余\\${a}次\\)\"\nE[5]=\"The script supports Debian, Ubuntu, CentOS, Alpine or Arch systems only. Feedback: [https://github.com/fscarmen/argox/issues]\"\nC[5]=\"本脚本只支持 Debian、Ubuntu、CentOS、Alpine 或 Arch 系统,问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[6]=\"Curren operating system is \\$SYS.\\\\\\n The system lower than \\$SYSTEM \\${MAJOR[int]} is not supported. Feedback: [https://github.com/fscarmen/argox/issues]\"\nC[6]=\"当前操作是 \\$SYS\\\\\\n 不支持 \\$SYSTEM \\${MAJOR[int]} 以下系统,问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[7]=\"Install dependence-list:\"\nC[7]=\"安装依赖列表:\"\nE[8]=\"All dependencies already exist and do not need to be installed additionally.\"\nC[8]=\"所有依赖已存在，不需要额外安装\"\nE[9]=\"To upgrade, press [y]. No upgrade by default:\"\nC[9]=\"升级请按 [y]，默认不升级:\"\nE[10]=\"(3/8) Please enter Argo Domain (Default is temporary domain if left blank):\"\nC[10]=\"(3/8) 请输入 Argo 域名 (如果没有，可以跳过以使用 Argo 临时域名):\"\nE[11]=\"Please enter Argo Token or Json ( User can easily obtain the json at https://fscarmen.cloudflare.now.cc ):\"\nC[11]=\"请输入 Argo Token 或者 Json ( 用户通过以下网站轻松获取 json: https://fscarmen.cloudflare.now.cc ):\"\nE[12]=\"\\(6/8\\) Please enter Xray UUID \\(Default is \\$UUID_DEFAULT\\):\"\nC[12]=\"\\(6/8\\) 请输入 Xray UUID \\(默认为 \\$UUID_DEFAULT\\):\"\nE[13]=\"\\(7/8\\) Please enter Xray WS Path \\(Default is \\$WS_PATH_DEFAULT\\):\"\nC[13]=\"\\(7/8\\) 请输入 Xray WS 路径 \\(默认为 \\$WS_PATH_DEFAULT\\):\"\nE[14]=\"Xray WS Path only allow uppercase and lowercase letters and numeric characters, please re-enter \\(\\${a} times remaining\\):\"\nC[14]=\"Xray WS 路径只允许英文大小写及数字字符，请重新输入 \\(剩余\\${a}次\\):\"\nE[15]=\"ArgoX script has not been installed yet.\"\nC[15]=\"ArgoX 脚本还没有安装\"\nE[16]=\"ArgoX is completely uninstalled.\"\nC[16]=\"ArgoX 已彻底卸载\"\nE[17]=\"Version\"\nC[17]=\"脚本版本\"\nE[18]=\"New features\"\nC[18]=\"功能新增\"\nE[19]=\"System infomation\"\nC[19]=\"系统信息\"\nE[20]=\"Operating System\"\nC[20]=\"当前操作系统\"\nE[21]=\"Kernel\"\nC[21]=\"内核\"\nE[22]=\"Architecture\"\nC[22]=\"处理器架构\"\nE[23]=\"Virtualization\"\nC[23]=\"虚拟化\"\nE[24]=\"Choose:\"\nC[24]=\"请选择:\"\nE[25]=\"Curren architecture \\$(uname -m) is not supported. Feedback: [https://github.com/fscarmen/argox/issues]\"\nC[25]=\"当前架构 \\$(uname -m) 暂不支持,问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[26]=\"Not install\"\nC[26]=\"未安装\"\nE[27]=\"close\"\nC[27]=\"关闭\"\nE[28]=\"open\"\nC[28]=\"开启\"\nE[29]=\"View links (argox -n)\"\nC[29]=\"查看节点信息 (argox -n)\"\nE[30]=\"Change the Argo tunnel (argox -t)\"\nC[30]=\"更换 Argo 隧道 (argox -t)\"\nE[31]=\"Sync Argo and Xray to the latest version (argox -v)\"\nC[31]=\"同步 Argo 和 Xray 至最新版本 (argox -v)\"\nE[32]=\"Upgrade kernel, turn on BBR, change Linux system (argox -b)\"\nC[32]=\"升级内核、安装BBR、DD脚本 (argox -b)\"\nE[33]=\"Uninstall (argox -u)\"\nC[33]=\"卸载 (argox -u)\"\nE[34]=\"Install ArgoX script (argo + xray)\"\nC[34]=\"安装 ArgoX 脚本 (argo + xray)\"\nE[35]=\"Exit\"\nC[35]=\"退出\"\nE[36]=\"Please enter the correct number\"\nC[36]=\"请输入正确数字\"\nE[37]=\"successful\"\nC[37]=\"成功\"\nE[38]=\"failed\"\nC[38]=\"失败\"\nE[39]=\"ArgoX is not installed.\"\nC[39]=\"ArgoX 未安装\"\nE[40]=\"Argo tunnel is: \\$ARGO_TYPE\\\\\\n The domain is: \\$ARGO_DOMAIN\"\nC[40]=\"Argo 隧道类型为: \\$ARGO_TYPE\\\\\\n 域名是: \\$ARGO_DOMAIN\"\nE[41]=\"Argo tunnel type:\\n 1. Try\\n 2. Token or Json\"\nC[41]=\"Argo 隧道类型:\\n 1. Try\\n 2. Token 或者 Json\"\nE[42]=\"\\(5/8\\) Please select or enter the preferred domain, the default is \\${CDN_DOMAIN[0]}:\"\nC[42]=\"\\(5/8\\) 请选择或者填入优选域名，默认为 \\${CDN_DOMAIN[0]}:\"\nE[43]=\"\\$APP local verion: \\$LOCAL.\\\\\\t The newest verion: \\$ONLINE\"\nC[43]=\"\\$APP 本地版本: \\$LOCAL.\\\\\\t 最新版本: \\$ONLINE\"\nE[44]=\"No upgrade required.\"\nC[44]=\"不需要升级\"\nE[45]=\"Argo authentication message does not match the rules, neither Token nor Json, script exits. Feedback:[https://github.com/fscarmen/argox/issues]\"\nC[45]=\"Argo 认证信息不符合规则，既不是 Token，也是不是 Json，脚本退出，问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[46]=\"Connect\"\nC[46]=\"连接\"\nE[47]=\"The script must be run as root, you can enter sudo -i and then download and run again. Feedback:[https://github.com/fscarmen/argox/issues]\"\nC[47]=\"必须以root方式运行脚本，可以输入 sudo -i 后重新下载运行，问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[48]=\"Downloading the latest version \\$APP failed, script exits. Feedback:[https://github.com/fscarmen/argox/issues]\"\nC[48]=\"下载最新版本 \\$APP 失败，脚本退出，问题反馈:[https://github.com/fscarmen/argox/issues]\"\nE[49]=\"\\(8/8\\) Please enter the node name. \\(Default is \\${NODE_NAME_DEFAULT}\\):\"\nC[49]=\"\\(8/8\\) 请输入节点名称 \\(默认为 \\${NODE_NAME_DEFAULT}\\):\"\nE[50]=\"\\${APP[@]} services are not enabled, node information cannot be output. Press [y] if you want to open.\"\nC[50]=\"\\${APP[@]} 服务未开启，不能输出节点信息。如需打开请按 [y]: \"\nE[51]=\"Install Sing-box multi-protocol scripts [https://github.com/fscarmen/sing-box]\"\nC[51]=\"安装 Sing-box 协议全家桶脚本 [https://github.com/fscarmen/sing-box]\"\nE[52]=\"Memory Usage\"\nC[52]=\"内存占用\"\nE[53]=\"The xray service is detected to be installed. Script exits.\"\nC[53]=\"检测到已安装 xray 服务，脚本退出!\"\nE[54]=\"Warp / warp-go was detected to be running. Please enter the correct server IP:\"\nC[54]=\"检测到 warp / warp-go 正在运行，请输入确认的服务器 IP:\"\nE[55]=\"The script runs today: \\$TODAY. Total: \\$TOTAL\"\nC[55]=\"脚本当天运行次数: \\$TODAY，累计运行次数: \\$TOTAL\"\nE[56]=\"\\(4/8\\) Please enter the Reality port \\(Default is \\${REALITY_PORT_DEFAULT}\\):\"\nC[56]=\"\\(4/8\\) 请输入 Reality 的端口号 \\(默认为 \\${REALITY_PORT_DEFAULT}\\):\"\nE[57]=\"Install sba scripts (argo + sing-box) [https://github.com/fscarmen/sba]\"\nC[57]=\"安装 sba 脚本 (argo + sing-box) [https://github.com/fscarmen/sba]\"\nE[58]=\"No server ip, script exits. Feedback:[https://github.com/fscarmen/sing-box/issues]\"\nC[58]=\"没有 server ip，脚本退出，问题反馈:[https://github.com/fscarmen/sing-box/issues]\"\nE[59]=\"\\(2/8\\) Please enter VPS IP \\(Default is: \\${SERVER_IP_DEFAULT}\\):\"\nC[59]=\"\\(2/8\\) 请输入 VPS IP \\(默认为: \\${SERVER_IP_DEFAULT}\\):\"\nE[60]=\"Quicktunnel domain can be obtained from: http://\\${SERVER_IP_1}:\\${METRICS_PORT}/quicktunnel\"\nC[60]=\"临时隧道域名可以从以下网站获取: http://\\${SERVER_IP_1}:\\${METRICS_PORT}/quicktunnel\"\nE[61]=\"Ports are in used: \\$REALITY_PORT\"\nC[61]=\"正在使用中的端口: \\$REALITY_PORT\"\nE[62]=\"Create shortcut [ argox ] successfully.\"\nC[62]=\"创建快捷 [ argox ] 指令成功!\"\nE[63]=\"The full template can be found at:\\n https://t.me/ztvps/67\\n https://github.com/chika0801/sing-box-examples/tree/main/Tun\"\nC[63]=\"完整模板可参照:\\n https://t.me/ztvps/67\\n https://github.com/chika0801/sing-box-examples/tree/main/Tun\"\nE[64]=\"subscribe\"\nC[64]=\"订阅\"\nE[65]=\"To uninstall Nginx press [y], it is not uninstalled by default:\"\nC[65]=\"如要卸载 Nginx 请按 [y]，默认不卸载:\"\nE[66]=\"Adaptive Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM Clients\"\nC[66]=\"自适应 Clash / V2rayN / NekoBox / ShadowRocket / SFI / SFA / SFM 客户端\"\nE[67]=\"template\"\nC[67]=\"模版\"\nE[68]=\"(1/8) Output subscription QR code and https service, need to install nginx\\n If not, please enter [n]. Default installation:\"\nC[68]=\"(1/8) 输出订阅二维码和 https 服务，需要安装依赖 nginx\\n 如不需要，请输入 [n]，默认安装:\"\nE[69]=\"Set SElinux: enforcing --> disabled\"\nC[69]=\"设置 SElinux: enforcing --> disabled\"\n\n# 自定义字体彩色，read 函数\nwarning() { echo -e \"\\033[31m\\033[01m$*\\033[0m\"; }  # 红色\nerror() { echo -e \"\\033[31m\\033[01m$*\\033[0m\" && exit 1; } # 红色\ninfo() { echo -e \"\\033[32m\\033[01m$*\\033[0m\"; }   # 绿色\nhint() { echo -e \"\\033[33m\\033[01m$*\\033[0m\"; }   # 黄色\nreading() { read -rp \"$(info \"$1\")\" \"$2\"; }\ntext() { grep -q '\\$' <<< \"${E[$*]}\" && eval echo \"\\$(eval echo \"\\${${L}[$*]}\")\" || eval echo \"\\${${L}[$*]}\"; }\n\n# 检测是否需要启用 Github CDN，如能直接连通，则不使用\ncheck_cdn() {\n  [ -n \"$GH_PROXY\" ] && wget --server-response --quiet --output-document=/dev/null --no-check-certificate --tries=2 --timeout=3 https://raw.githubusercontent.com/fscarmen/ArgoX/main/README.md >/dev/null 2>&1 && unset GH_PROXY\n}\n\n# 检测是否解锁 chatGPT，以决定是否使用 warp 链式代理或者是 direct out，此处判断改编自 https://github.com/lmc999/RegionRestrictionCheck\ncheck_chatgpt() {\n  local CHECK_STACK=-$1\n  local UA_BROWSER=\"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/125.0.0.0 Safari/537.36\"\n  local UA_SEC_CH_UA='\"Google Chrome\";v=\"125\", \"Chromium\";v=\"125\", \"Not.A/Brand\";v=\"24\"'\n  wget --help | grep -q '\\-\\-ciphers' && local IS_CIPHERS=is_ciphers\n\n  # 首先检查API访问\n  local CHECK_RESULT1=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} -qO- --content-on-error --header='authority: api.openai.com' --header='accept: */*' --header='accept-language: en-US,en;q=0.9' --header='authorization: Bearer null' --header='content-type: application/json' --header='origin: https://platform.openai.com' --header='referer: https://platform.openai.com/' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: empty' --header='sec-fetch-mode: cors' --header='sec-fetch-site: same-site' --user-agent=\"${UA_BROWSER}\" 'https://api.openai.com/compliance/cookie_requirements')\n\n  [ -z \"$CHECK_RESULT1\" ] && grep -qw is_ciphers <<< \"$IS_CIPHERS\" && local CHECK_RESULT1=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} --ciphers=DEFAULT@SECLEVEL=1 --no-check-certificate -qO- --content-on-error --header='authority: api.openai.com' --header='accept: */*' --header='accept-language: en-US,en;q=0.9' --header='authorization: Bearer null' --header='content-type: application/json' --header='origin: https://platform.openai.com' --header='referer: https://platform.openai.com/' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: empty' --header='sec-fetch-mode: cors' --header='sec-fetch-site: same-site' --user-agent=\"${UA_BROWSER}\" 'https://api.openai.com/compliance/cookie_requirements')\n\n  # 如果API检测失败或者检测到unsupported_country,直接返回ban\n  if [ -z \"$CHECK_RESULT1\" ] || grep -qi 'unsupported_country' <<< \"$CHECK_RESULT1\"; then\n    echo \"ban\"\n    return\n  fi\n\n  # API检测通过后,继续检查网页访问\n  local CHECK_RESULT2=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} -qO- --content-on-error --header='authority: ios.chat.openai.com' --header='accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' --header='accept-language: en-US,en;q=0.9' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: document' --header='sec-fetch-mode: navigate' --header='sec-fetch-site: none' --header='sec-fetch-user: ?1' --header='upgrade-insecure-requests: 1' --user-agent=\"${UA_BROWSER}\" https://ios.chat.openai.com/)\n\n  [ -z \"$CHECK_RESULT2\" ] && grep -qw is_ciphers <<< \"$IS_CIPHERS\" && local CHECK_RESULT2=$(wget --timeout=2 --tries=2 --retry-connrefused --waitretry=5 ${CHECK_STACK} --ciphers=DEFAULT@SECLEVEL=1 --no-check-certificate -qO- --content-on-error --header='authority: ios.chat.openai.com' --header='accept: */*;q=0.8,application/signed-exchange;v=b3;q=0.7' --header='accept-language: en-US,en;q=0.9' --header=\"sec-ch-ua: ${UA_SEC_CH_UA}\" --header='sec-ch-ua-mobile: ?0' --header='sec-ch-ua-platform: \"Windows\"' --header='sec-fetch-dest: document' --header='sec-fetch-mode: navigate' --header='sec-fetch-site: none' --header='sec-fetch-user: ?1' --header='upgrade-insecure-requests: 1' --user-agent=\"${UA_BROWSER}\" https://ios.chat.openai.com/)\n\n  # 检查第二个结果\n  if [ -z \"$CHECK_RESULT2\" ] || grep -qi 'VPN' <<< \"$CHECK_RESULT2\"; then\n    echo \"ban\"\n  else\n    echo \"unlock\"\n  fi\n}\n\n# 脚本当天及累计运行次数统计\nstatistics_of_run-times() {\n  local COUNT=$(wget --no-check-certificate -qO- --tries=2 --timeout=2 \"https://hit.forvps.gq/https://raw.githubusercontent.com/fscarmen/ArgoX/main/argox.sh\" 2>&1 | grep -m1 -oE \"[0-9]+[ ]+/[ ]+[0-9]+\") &&\n  TODAY=$(cut -d \" \" -f1 <<< \"$COUNT\") &&\n  TOTAL=$(cut -d \" \" -f3 <<< \"$COUNT\")\n}\n\n# 选择中英语言\nselect_language() {\n  if [ -z \"$L\" ]; then\n    case $(cat $WORK_DIR/language 2>&1) in\n      E ) L=E ;;\n      C ) L=C ;;\n      * ) [ -z \"$L\" ] && L=E && hint \"\\n $(text 0) \\n\" && reading \" $(text 24) \" LANGUAGE\n      [ \"$LANGUAGE\" = 2 ] && L=C ;;\n    esac\n  fi\n}\n\n# 只允许 root 用户安装脚本\ncheck_root() {\n  [ \"$(id -u)\" != 0 ] && error \"\\n $(text 47) \\n\"\n}\n\n# 判断处理器架构\ncheck_arch() {\n  case $(uname -m) in\n    aarch64|arm64 )\n      ARGO_ARCH=arm64; XRAY_ARCH=arm64-v8a; JQ_ARCH=arm64; QRENCODE_ARCH=arm64\n      ;;\n    x86_64|amd64 )\n      ARGO_ARCH=amd64; XRAY_ARCH=64; JQ_ARCH=amd64; QRENCODE_ARCH=amd64\n      ;;\n    armv7l )\n      ARGO_ARCH=arm; XRAY_ARCH=arm32-v7a; JQ_ARCH=armhf; QRENCODE_ARCH=arm\n      ;;\n    * )\n      error \" $(text 25) \"\n  esac\n}\n\n# 查安装及运行状态，下标0: argo，下标1: xray，下标2：docker；状态码: 26 未安装， 27 已安装未运行， 28 运行中\ncheck_install() {\n  [ -s $WORK_DIR/nginx.conf ] && IS_NGINX=is_nginx || IS_NGINX=no_nginx\n  STATUS[0]=$(text 26) && [[ -s /etc/systemd/system/argo.service ]] && grep -q \"^ExecStart=$WORK_DIR\" /etc/systemd/system/argo.service && STATUS[0]=$(text 27) && [ \"$(systemctl is-active argo)\" = 'active' ] && STATUS[0]=$(text 28)\n  STATUS[1]=$(text 26)\n  # xray systemd 文件存在的话，检测一下是否本脚本安装的，如果不是则提示并提出\n  if [ -s /etc/systemd/system/xray.service ]; then\n    ! grep -q \"$WORK_DIR\" /etc/systemd/system/xray.service && error \" $(text 53)\\n $(grep 'ExecStart=' /etc/systemd/system/xray.service) \"\n    STATUS[1]=$(text 27) && [ \"$(systemctl is-active xray)\" = 'active' ] && STATUS[1]=$(text 28)\n  fi\n  [[ ${STATUS[0]} = \"$(text 26)\" ]] && [ ! -s $WORK_DIR/cloudflared ] && { wget --no-check-certificate -qO $TEMP_DIR/cloudflared ${GH_PROXY}https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$ARGO_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/cloudflared >/dev/null 2>&1; }&\n  [[ ${STATUS[1]} = \"$(text 26)\" ]] && [ ! -s $WORK_DIR/xray ] && { wget --no-check-certificate -qO $TEMP_DIR/Xray.zip ${GH_PROXY}https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-$XRAY_ARCH.zip >/dev/null 2>&1; unzip -qo $TEMP_DIR/Xray.zip xray *.dat -d $TEMP_DIR >/dev/null 2>&1; }&\n  { wget --no-check-certificate --continue -qO $TEMP_DIR/jq ${GH_PROXY}https://github.com/jqlang/jq/releases/download/jq-1.7.1/jq-linux-$JQ_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/jq >/dev/null 2>&1; }&\n  { wget --no-check-certificate --continue -qO $TEMP_DIR/qrencode ${GH_PROXY}https://github.com/fscarmen/client_template/raw/main/qrencode-go/qrencode-go-linux-$QRENCODE_ARCH >/dev/null 2>&1 && chmod +x $TEMP_DIR/qrencode >/dev/null 2>&1; }&\n}\n\n# 为了适配 alpine，定义 cmd_systemctl 的函数\ncmd_systemctl() {\n  [ -s $WORK_DIR/nginx.conf ] && local IS_NGINX=is_nginx || local IS_NGINX=no_nginx\n  local ENABLE_DISABLE=$1\n  local APP=$2\n  if [ \"$ENABLE_DISABLE\" = 'enable' ]; then\n    if [ \"$SYSTEM\" = 'Alpine' ]; then\n      systemctl start $APP\n      cat > /etc/local.d/$APP.start << EOF\n#!/usr/bin/env bash\n\nsystemctl start $APP\nEOF\n      chmod +x /etc/local.d/$APP.start\n      rc-update add local >/dev/null 2>&1\n    elif [ \"$IS_CENTOS\" = 'CentOS7' ]; then\n      systemctl enable --now $APP\n      [[ \"$APP\" = 'argo' && \"$IS_NGINX\" = 'is_nginx' ]] && $(type -p nginx) -c $WORK_DIR/nginx.conf\n    else\n      systemctl enable --now $APP\n    fi\n\n  elif [ \"$ENABLE_DISABLE\" = 'disable' ]; then\n    if [ \"$SYSTEM\" = 'Alpine' ]; then\n      systemctl stop $APP\n      [[ \"$APP\" = 'argo' && \"$IS_NGINX\" = 'is_nginx' ]] && ss -nltp | grep \"$(cat /var/run/nginx.pid)\" | tr ',' '\\n' | awk -F '=' '/pid/{print $2}' | sort -u | xargs kill -15 >/dev/null 2>&1\n      rm -f /etc/local.d/$APP.start\n    elif [ \"$IS_CENTOS\" = 'CentOS7' ]; then\n      systemctl disable --now $APP\n      [[ \"$APP\" = 'argo' && \"$IS_NGINX\" = 'is_nginx' ]] && ss -nltp | grep \"$(cat /var/run/nginx.pid)\" | tr ',' '\\n' | awk -F '=' '/pid/{print $2}' | sort -u | xargs kill -15 >/dev/null 2>&1\n    else\n      systemctl disable --now $APP\n    fi\n  fi\n}\n\ncheck_system_info() {\n  # 判断虚拟化\n  if [ -x \"$(type -p systemd-detect-virt)\" ]; then\n    VIRT=$(systemd-detect-virt)\n  elif [ -x \"$(type -p hostnamectl)\" ]; then\n    VIRT=$(hostnamectl | awk '/Virtualization/{print $NF}')\n  elif [ -x \"$(type -p virt-what)\" ]; then\n    VIRT=$(virt-what)\n  fi\n\n  [ -s /etc/os-release ] && SYS=\"$(awk -F '\"' 'tolower($0) ~ /pretty_name/{print $2}' /etc/os-release)\"\n  [[ -z \"$SYS\" && -x \"$(type -p hostnamectl)\" ]] && SYS=\"$(hostnamectl | awk -F ': ' 'tolower($0) ~ /operating system/{print $2}')\"\n  [[ -z \"$SYS\" && -x \"$(type -p lsb_release)\" ]] && SYS=\"$(lsb_release -sd)\"\n  [[ -z \"$SYS\" && -s /etc/lsb-release ]] && SYS=\"$(awk -F '\"' 'tolower($0) ~ /distrib_description/{print $2}' /etc/lsb-release)\"\n  [[ -z \"$SYS\" && -s /etc/redhat-release ]] && SYS=\"$(cat /etc/redhat-release)\"\n  [[ -z \"$SYS\" && -s /etc/issue ]] && SYS=\"$(sed -E '/^$|^\\\\/d' /etc/issue | awk -F '\\\\' '{print $1}' | sed 's/[ ]*$//g')\"\n\n  REGEX=(\"debian\" \"ubuntu\" \"centos|red hat|kernel|alma|rocky\" \"arch linux\" \"alpine\" \"fedora\")\n  RELEASE=(\"Debian\" \"Ubuntu\" \"CentOS\" \"Arch\" \"Alpine\" \"Fedora\")\n  EXCLUDE=(\"---\")\n  MAJOR=(\"9\" \"16\" \"7\" \"\" \"\" \"37\")\n  PACKAGE_UPDATE=(\"apt -y update\" \"apt -y update\" \"yum -y update\" \"pacman -Sy\" \"apk update -f\" \"dnf -y update\")\n  PACKAGE_INSTALL=(\"apt -y install\" \"apt -y install\" \"yum -y install\" \"pacman -S --noconfirm\" \"apk add --no-cache\" \"dnf -y install\")\n  PACKAGE_UNINSTALL=(\"apt -y autoremove\" \"apt -y autoremove\" \"yum -y autoremove\" \"pacman -Rcnsu --noconfirm\" \"apk del -f\" \"dnf -y autoremove\")\n\n  for int in \"${!REGEX[@]}\"; do\n    [[ \"${SYS,,}\" =~ ${REGEX[int]} ]] && SYSTEM=\"${RELEASE[int]}\" && break\n  done\n  [ -z \"$SYSTEM\" ] && error \" $(text 5) \"\n\n  # 针对各厂商的订制系统\n  if [ -z \"$SYSTEM\" ]; then\n    [ -x \"$(type -p yum)\" ] && int=2 && SYSTEM='CentOS' || error \" $(text 5) \"\n  fi\n\n  # 先排除 EXCLUDE 里包括的特定系统，其他系统需要作大发行版本的比较\n  for ex in \"${EXCLUDE[@]}\"; do [[ ! \"{$SYS,,}\" =~ $ex ]]; done &&\n  [[ \"$(echo \"$SYS\" | sed \"s/[^0-9.]//g\" | cut -d. -f1)\" -lt \"${MAJOR[int]}\" ]] && error \" $(text 6) \"\n\n  # 针对部分系统作特殊处理\n  [ \"$SYSTEM\" = 'CentOS' ] && IS_CENTOS=\"CentOS$(echo \"$SYS\" | sed \"s/[^0-9.]//g\" | cut -d. -f1)\"\n}\n\n# 检测 IPv4 IPv6 信息\ncheck_system_ip() {\n  [ \"$L\" = 'C' ] && local IS_CHINESE='?lang=zh-CN'\n  local DEFAULT_LOCAL_INTERFACE4=$(ip -4 route show default | awk '/default/ {for (i=0; i<NF; i++) if ($i==\"dev\") {print $(i+1); exit}}')\n  local DEFAULT_LOCAL_INTERFACE6=$(ip -6 route show default | awk '/default/ {for (i=0; i<NF; i++) if ($i==\"dev\") {print $(i+1); exit}}')\n  if [ -n \"${DEFAULT_LOCAL_INTERFACE4}${DEFAULT_LOCAL_INTERFACE6}\" ]; then\n    local DEFAULT_LOCAL_IP4=$(ip -4 addr show $DEFAULT_LOCAL_INTERFACE4 | sed -n 's#.*inet \\([^/]\\+\\)/[0-9]\\+.*global.*#\\1#gp')\n    local DEFAULT_LOCAL_IP6=$(ip -6 addr show $DEFAULT_LOCAL_INTERFACE6 | sed -n 's#.*inet6 \\([^/]\\+\\)/[0-9]\\+.*global.*#\\1#gp')\n    [ -n \"$DEFAULT_LOCAL_IP4\" ] && local BIND_ADDRESS4=\"--bind-address=$DEFAULT_LOCAL_IP4\"\n    [ -n \"$DEFAULT_LOCAL_IP6\" ] && local BIND_ADDRESS6=\"--bind-address=$DEFAULT_LOCAL_IP6\"\n  fi\n\n  WAN4=$(wget $BIND_ADDRESS4 -qO- --no-check-certificate --tries=2 --timeout=2 http://api-ipv4.ip.sb)\n  [ -n \"$WAN4\" ] && local IP4_JSON=$(wget -qO- --no-check-certificate --tries=2 --timeout=2 https://ip.forvps.gq/${WAN4}${IS_CHINESE}) &&\n  COUNTRY4=$(sed -En 's/.*\"country\":[ ]*\"([^\"]+)\".*/\\1/p' <<< \"$IP4_JSON\") &&\n  ASNORG4=$(sed -En 's/.*\"(isp|asn_org)\":[ ]*\"([^\"]+)\".*/\\2/p' <<< \"$IP4_JSON\")\n\n  WAN6=$(wget $BIND_ADDRESS6 -qO- --no-check-certificate --tries=2 --timeout=2 http://api-ipv6.ip.sb)\n  [ -n \"$WAN6\" ] && local IP6_JSON=$(wget -qO- --no-check-certificate --tries=2 --timeout=2 https://ip.forvps.gq/${WAN6}${IS_CHINESE}) &&\n  COUNTRY6=$(sed -En 's/.*\"country\":[ ]*\"([^\"]+)\".*/\\1/p' <<< \"$IP6_JSON\") &&\n  ASNORG6=$(sed -En 's/.*\"(isp|asn_org)\":[ ]*\"([^\"]+)\".*/\\2/p' <<< \"$IP6_JSON\")\n}\n\n# 定义 Argo 变量\nargo_variable() {\n  [ -z \"$INSTALL_NGINX\" ] && reading \"\\n $(text 68) \" INSTALL_NGINX\n  [ \"${INSTALL_NGINX,,}\" != 'n' ] && check_nginx >/dev/null 2>&1 &\n\n  if grep -qi 'cloudflare' <<< \"$ASNORG4$ASNORG6\"; then\n    local a=6\n    until [ -n \"$SERVER_IP\" ]; do\n      ((a--)) || true\n      [ \"$a\" = 0 ] && error \"\\n $(text 3) \\n\"\n      reading \"\\n $(text 54) \" SERVER_IP\n    done\n  elif [ -n \"$WAN4\" ]; then\n    SERVER_IP_DEFAULT=$WAN4\n    CHATGPT_STACK=4\n  elif [ -n \"$WAN6\" ]; then\n    SERVER_IP_DEFAULT=$WAN6\n    CHATGPT_STACK=6\n  fi\n\n  # 输入服务器 IP,默认为检测到的服务器 IP，如果全部为空，则提示并退出脚本\n  [ -z \"$SERVER_IP\" ] && reading \"\\n $(text 59) \" SERVER_IP\n  SERVER_IP=${SERVER_IP:-\"$SERVER_IP_DEFAULT\"}\n  [ -z \"$SERVER_IP\" ] && error \" $(text 58) \"\n\n  # 检测是否解锁 chatGPT\n  if [ \"$(check_chatgpt ${CHATGPT_STACK})\" = 'unlock' ]; then\n    CHAT_GPT_OUT_V4=direct && CHAT_GPT_OUT_V6=direct\n  else\n    CHAT_GPT_OUT_V4=warp-IPv4 && CHAT_GPT_OUT_V6=warp-IPv6\n  fi\n\n  # 处理可能输入的错误，去掉开头和结尾的空格，去掉最后的 :\n  [ -z \"$ARGO_DOMAIN\" ] && reading \"\\n $(text 10) \" ARGO_DOMAIN\n  ARGO_DOMAIN=$(sed 's/[ ]*//g; s/:[ ]*//' <<< \"$ARGO_DOMAIN\")\n\n  if [[ -n \"$ARGO_DOMAIN\" && -z \"$ARGO_AUTH\" ]]; then\n    local a=5\n    until [[ \"$ARGO_AUTH\" =~ TunnelSecret || \"${ARGO_AUTH,,}\" =~ ^[a-z0-9=]{120,250}$ || \"${ARGO_AUTH,,}\" =~ .*cloudflared.*service[[:space:]]+install[[:space:]]+[a-z0-9=]{1,100} ]]; do\n      [ \"$a\" = 0 ] && error \"\\n $(text 3) \\n\" || reading \"\\n $(text 11) \" ARGO_AUTH\n      if [[ \"$ARGO_AUTH\" =~ TunnelSecret ]]; then\n        ARGO_JSON=${ARGO_AUTH//[ ]/}\n      elif [[ \"${ARGO_AUTH,,}\" =~ ^[a-z0-9=]{120,250}$ ]]; then\n        ARGO_TOKEN=$ARGO_AUTH\n      elif [[ \"{$ARGO_AUTH,,}\" =~ .*cloudflared.*service[[:space:]]+install[[:space:]]+[a-z0-9=]{1,100} ]]; then\n        ARGO_TOKEN=$(awk -F ' ' '{print $NF}' <<< \"$ARGO_AUTH\")\n      else\n        warning \"\\n $(text 45) \\n\"\n      fi\n      ((a--)) || true\n    done\n  fi\n}\n\n# 定义 Xray 变量\nxray_variable() {\n  local a=6\n  until [ -n \"$REALITY_PORT\" ]; do\n    ((a--)) || true\n    [ \"$a\" = 0 ] && error \"\\n $(text 3) \\n\"\n    REALITY_PORT_DEFAULT=$(shuf -i 1000-65535 -n 1)\n    reading \"\\n $(text 56) \" REALITY_PORT\n    REALITY_PORT=${REALITY_PORT:-\"$REALITY_PORT_DEFAULT\"}\n    ss -nltup | grep -q \":$REALITY_PORT\" && warning \"\\n $(text 61) \\n\" && unset REALITY_PORT\n  done\n\n  # 提供网上热心网友的anycast域名\n  if [ -z \"$SERVER\" ]; then\n    echo \"\"\n    for c in \"${!CDN_DOMAIN[@]}\"; do\n      hint \" $[c+1]. ${CDN_DOMAIN[c]} \"\n    done\n\n    reading \"\\n $(text 42) \" CUSTOM_CDN\n    case \"$CUSTOM_CDN\" in\n      [1-${#CDN_DOMAIN[@]}] )\n        SERVER=\"${CDN_DOMAIN[$((CUSTOM_CDN-1))]}\"\n      ;;\n      ?????* )\n        SERVER=\"$CUSTOM_CDN\"\n      ;;\n      * )\n        SERVER=\"${CDN_DOMAIN[0]}\"\n    esac\n  fi\n\n  local a=6\n  until [[ \"${UUID,,}\" =~ ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$ ]]; do\n    (( a-- )) || true\n    [ \"$a\" = 0 ] && error \"\\n $(text 3) \\n\"\n    UUID_DEFAULT=$(cat /proc/sys/kernel/random/uuid)\n    reading \"\\n $(text 12) \" UUID\n    UUID=${UUID:-\"$UUID_DEFAULT\"}\n    [[ ! \"${UUID,,}\" =~ ^[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}$ ]] && warning \"\\n $(text 4) \"\n  done\n\n  [ -z \"$WS_PATH\" ] && reading \"\\n $(text 13) \" WS_PATH\n  local a=5\n  until [[ -z \"$WS_PATH\" || \"${WS_PATH,,}\" =~ ^[a-z0-9]+$ ]]; do\n    (( a-- )) || true\n    [ \"$a\" = 0 ] && error \" $(text 3) \" || reading \" $(text 14) \" WS_PATH\n  done\n  WS_PATH=${WS_PATH:-\"$WS_PATH_DEFAULT\"}\n\n  # 输入节点名，以系统的 hostname 作为默认\n  if [ -z \"$NODE_NAME\" ]; then\n    if [ -x \"$(type -p hostname)\" ]; then\n      NODE_NAME_DEFAULT=\"$(hostname)\"\n    elif [ -s /etc/hostname ]; then\n      NODE_NAME_DEFAULT=\"$(cat /etc/hostname)\"\n    else\n      NODE_NAME_DEFAULT=\"ArgoX\"\n    fi\n    reading \"\\n $(text 49) \" NODE_NAME\n    NODE_NAME=\"${NODE_NAME:-\"$NODE_NAME_DEFAULT\"}\"\n  fi\n}\n\ncheck_dependencies() {\n  # 如果是 Alpine，先升级 wget ，安装 systemctl-py 版\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    local CHECK_WGET=$(wget 2>&1 | head -n 1)\n    grep -qi 'busybox' <<< \"$CHECK_WGET\" && ${PACKAGE_INSTALL[int]} wget >/dev/null 2>&1\n\n    local DEPS_CHECK=(\"bash\" \"rc-update\" \"virt-what\" \"python3\")\n    local DEPS_INSTALL=(\"bash\" \"openrc\" \"virt-what\" \"python3\")\n    for g in \"${!DEPS_CHECK[@]}\"; do\n      [ ! -x \"$(type -p ${DEPS_CHECK[g]})\" ] && DEPS_ALPINE+=(${DEPS_INSTALL[g]})\n    done\n    if [ \"${#DEPS_ALPINE[@]}\" -ge 1 ]; then\n      info \"\\n $(text 7) $(sed \"s/ /,&/g\" <<< ${DEPS_ALPINE[@]}) \\n\"\n      ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n      ${PACKAGE_INSTALL[int]} ${DEPS_ALPINE[@]} >/dev/null 2>&1\n      [[ -z \"$VIRT\" && \"${DEPS_ALPINE[@]}\" =~ 'virt-what' ]] && VIRT=$(virt-what | tr '\\n' ' ')\n    fi\n\n    [ ! -x \"$(type -p systemctl)\" ] && wget --no-check-certificate --quiet ${GH_PROXY}https://raw.githubusercontent.com/gdraheim/docker-systemctl-replacement/master/files/docker/systemctl3.py -O /bin/systemctl && chmod a+x /bin/systemctl\n  fi\n\n  # 检测 Linux 系统的依赖，升级库并重新安装依赖\n  local DEPS_CHECK=(\"wget\" \"systemctl\" \"ss\" \"unzip\" \"bash\")\n  local DEPS_INSTALL=(\"wget\" \"systemctl\" \"iproute2\" \"unzip\" \"bash\")\n  for g in \"${!DEPS_CHECK[@]}\"; do\n    [ ! -x \"$(type -p ${DEPS_CHECK[g]})\" ] && DEPS+=(${DEPS_INSTALL[g]})\n  done\n  if [ \"${#DEPS[@]}\" -ge 1 ]; then\n    info \"\\n $(text 7) $(sed \"s/ /,&/g\" <<< ${DEPS[@]}) \\n\"\n    [ \"$SYSTEM\" != 'CentOS' ] && ${PACKAGE_UPDATE[int]} >/dev/null 2>&1\n    ${PACKAGE_INSTALL[int]} ${DEPS[@]} >/dev/null 2>&1\n  else\n    info \"\\n $(text 8) \\n\"\n  fi\n\n  # 不需要 nginx 原来的服务\n  [[ \"${DEPS[@]}\" =~ 'nginx' ]] && cmd_systemctl disable nginx >/dev/null 2>&1\n}\n\n# 检查并安装 nginx\ncheck_nginx() {\n  if [ ! -x \"$(type -p nginx)\" ]; then\n    info \"\\n $(text 7) nginx \\n\"\n    ${PACKAGE_INSTALL[int]} nginx >/dev/null 2>&1\n    # 如果新安装的 Nginx ，先停掉服务\n    [ \"$SYSTEM\" != 'Alpine' ] && systemctl disable --now nginx >/dev/null 2>&1\n  fi\n}\n\n# 处理防火墙规则\ncheck_firewall_configuration() {\n  if [[ -s /etc/selinux/config && -x \"$(type -p getenforce)\" && $(getenforce) = 'Enforcing' ]]; then\n    hint \"\\n $(text 69) \\n\"\n    setenforce 0\n    sed -i 's/^SELINUX=.*/# &/; /SELINUX=/a\\SELINUX=disabled' /etc/selinux/config\n  fi\n}\n\n# Nginx 配置文件\njson_nginx() {\n  if [ -s $WORK_DIR/*inbound*.json ]; then\n    JSON=$(cat $WORK_DIR/*inbound*.json)\n    WS_PATH=$(expr \"$JSON\" : '.*path\":\"/\\(.*\\)-vl.*')\n    SERVER_IP=${SERVER_IP:-\"$(awk -F '\"' '/\"SERVER_IP\"/{print $4}' <<< \"$JSON\")\"}\n    UUID=$(awk -F '\"' '/\"password\"/{print $4; exit}' <<< \"$JSON\")\n  fi\n\n  [[ \"$SERVER_IP\" =~ : ]] && REVERSE_IP=\"[$SERVER_IP]\" || REVERSE_IP=\"$SERVER_IP\"\n  cat > $WORK_DIR/nginx.conf << EOF\nuser  root;\nworker_processes  auto;\n\nerror_log  /dev/null;\npid        /var/run/nginx.pid;\n\nevents {\n    worker_connections  1024;\n}\n\nhttp {\n  map \\$http_user_agent \\$path {\n    default                    /;                # 默认路径\n    ~*v2rayN|Neko              /base64;          # 匹配 V2rayN / NekoBox 客户端\n    ~*clash                    /clash;           # 匹配 Clash 客户端\n    ~*ShadowRocket             /shadowrocket;    # 匹配 ShadowRocket  客户端\n    ~*SFM                      /sing-box-pc;     # 匹配 Sing-box pc 客户端\n    ~*SFI|SFA                  /sing-box-phone;  # 匹配 Sing-box phone 客户端\n #   ~*Chrome|Firefox|Mozilla  /;                # 添加更多的分流规则\n  }\n\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  '\\$remote_addr - \\$remote_user [\\$time_local] \"\\$request\" '\n                      '\\$status \\$body_bytes_sent \"\\$http_referer\" '\n                      '\"\\$http_user_agent\" \"\\$http_x_forwarded_for\"';\n\n    access_log  /dev/null;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    #include /etc/nginx/conf.d/*.conf;\n\n  server {\n    listen 127.0.0.1:3006 proxy_protocol; # xray fallbacks\n\n\n    # 来自 /auto 的分流\n    location ~ ^/${UUID}/auto {\n      default_type 'text/plain; charset=utf-8';\n      alias ${WORK_DIR}/subscribe/\\$path;\n    }\n\n    location ~ ^/${UUID}/(.*) {\n      autoindex on;\n      proxy_set_header X-Real-IP \\$proxy_protocol_addr;\n      default_type 'text/plain; charset=utf-8';\n      alias ${WORK_DIR}/subscribe/\\$1;\n    }\n  }\n}\nEOF\n}\n\n# Json 生成两个配置文件\njson_argo() {\n  [ ! -s $WORK_DIR/tunnel.json ] && echo $ARGO_JSON > $WORK_DIR/tunnel.json\n  [ ! -s $WORK_DIR/tunnel.yml ] && cat > $WORK_DIR/tunnel.yml << EOF\ntunnel: $(cut -d\\\" -f12 <<< $ARGO_JSON)\ncredentials-file: $WORK_DIR/tunnel.json\n\ningress:\n  - hostname: ${ARGO_DOMAIN}\n    service: http://localhost:8080\n  - service: http_status:404\nEOF\n}\n\ninstall_argox() {\n  argo_variable\n  xray_variable\n  [ \"$SYSTEM\" = 'CentOS' ] && check_firewall_configuration\n  wait\n\n  # 生成 reality 的公私钥\n  [[ -z \"$REALITY_PRIVATE\" || -z \"$REALITY_PUBLIC\" ]] && REALITY_KEYPAIR=$($TEMP_DIR/xray x25519)\n  [ -z \"$REALITY_PRIVATE\" ] && REALITY_PRIVATE=$(awk '/Private/{print $NF}' <<< \"$REALITY_KEYPAIR\")\n  [ -z \"$REALITY_PUBLIC\" ] && REALITY_PUBLIC=$(awk '/Public/{print $NF}' <<< \"$REALITY_KEYPAIR\")\n\n  [ ! -d /etc/systemd/system ] && mkdir -p /etc/systemd/system\n  mkdir -p $WORK_DIR/subscribe && echo \"$L\" > $WORK_DIR/language\n  [ -s \"$VARIABLE_FILE\" ] && cp $VARIABLE_FILE $WORK_DIR/\n\n  wait\n  [[ ! -s $WORK_DIR/cloudflared && -x $TEMP_DIR/cloudflared ]] && mv $TEMP_DIR/cloudflared $WORK_DIR\n  [[ ! -s $WORK_DIR/jq && -x $TEMP_DIR/jq ]] && mv $TEMP_DIR/jq $WORK_DIR\n  [[ \"$INSTALL_NGINX\" != 'n' && ! -s $WORK_DIR/qrencode && -x $TEMP_DIR/qrencode ]] && mv $TEMP_DIR/qrencode $WORK_DIR\n  if [[ -n \"${ARGO_JSON}\" && -n \"${ARGO_DOMAIN}\" ]]; then\n    ARGO_RUNS=\"$WORK_DIR/cloudflared tunnel --edge-ip-version auto --config $WORK_DIR/tunnel.yml run\"\n    json_argo\n  elif [[ -n \"${ARGO_TOKEN}\" && -n \"${ARGO_DOMAIN}\" ]]; then\n    ARGO_RUNS=\"$WORK_DIR/cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}\"\n  else\n    ARGO_RUNS=\"$WORK_DIR/cloudflared tunnel --edge-ip-version auto --no-autoupdate --metrics 0.0.0.0:${METRICS_PORT} --url http://localhost:8080\"\n  fi\n\n  # Argo 生成守护进程文件\n  local ARGO_SERVER=\"[Unit]\nDescription=Cloudflare Tunnel\nAfter=network.target\n\n[Service]\nType=simple\nNoNewPrivileges=yes\nTimeoutStartSec=0\"\n  [[ \"$INSTALL_NGINX\" != 'n' && \"$IS_CENTOS\" != 'CentOS7' ]] && ARGO_SERVER+=\"\nExecStartPre=$(type -p nginx) -c $WORK_DIR/nginx.conf\"\n  ARGO_SERVER+=\"\nExecStart=$ARGO_RUNS\nRestart=on-failure\nRestartSec=5s\n\n[Install]\nWantedBy=multi-user.target\"\n\n  echo \"$ARGO_SERVER\" > /etc/systemd/system/argo.service\n\n  # 生成配置文件及守护进程文件\n  local i=1\n  [ ! -s $WORK_DIR/xray ] && wait && while [ \"$i\" -le 20 ]; do [[ -s $TEMP_DIR/xray && -s $TEMP_DIR/geoip.dat && -s $TEMP_DIR/geosite.dat ]] && mv $TEMP_DIR/xray $TEMP_DIR/geo*.dat $WORK_DIR && break; ((i++)); sleep 2; done\n  [ \"$i\" -ge 20 ] && local APP=Xray && error \"\\n $(text 48) \"\n  cat > $WORK_DIR/inbound.json << EOF\n//  \"SERVER_IP\":\"${SERVER_IP}\"\n//  \"REALITY_PUBLIC\":\"${REALITY_PUBLIC}\"\n//  \"SERVER\":\"${SERVER}\"\n{\n    \"log\":{\n        \"access\":\"/dev/null\",\n        \"error\":\"/dev/null\",\n        \"loglevel\":\"none\"\n    },\n    \"inbounds\":[\n      {\n            \"tag\":\"${NODE_NAME} reality-vision\",\n            \"protocol\":\"vless\",\n            \"port\":${REALITY_PORT},\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"id\":\"${UUID}\",\n                        \"flow\":\"xtls-rprx-vision\"\n                    }\n                ],\n                \"decryption\":\"none\",\n                \"fallbacks\":[\n                    {\n                        \"dest\":\"3001\",\n                        \"xver\":1\n                    }\n                ]\n            },\n            \"streamSettings\":{\n                \"network\":\"tcp\",\n                \"security\":\"reality\",\n                \"realitySettings\":{\n                    \"show\":true,\n                    \"dest\":\"${TLS_SERVER}:443\",\n                    \"xver\":0,\n                    \"serverNames\":[\n                        \"${TLS_SERVER}\"\n                    ],\n                    \"privateKey\":\"${REALITY_PRIVATE}\",\n                    \"publicKey\":\"${REALITY_PUBLIC}\",\n                    \"maxTimeDiff\":70000,\n                    \"shortIds\":[\n                        \"\"\n                    ]\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\"\n                ]\n            }\n        },\n        {\n            \"port\":3001,\n            \"listen\":\"127.0.0.1\",\n            \"protocol\":\"vless\",\n            \"tag\":\"${NODE_NAME} reality-grpc\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"id\":\"${UUID}\",\n                        \"flow\":\"\"\n                    }\n                ],\n                \"decryption\":\"none\"\n            },\n            \"streamSettings\":{\n                \"network\":\"grpc\",\n                \"grpcSettings\":{\n                    \"serviceName\":\"grpc\",\n                    \"multiMode\":true\n                },\n                \"sockopt\":{\n                    \"acceptProxyProtocol\":true\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\"\n                ]\n            }\n        },\n        {\n            \"listen\":\"127.0.0.1\",\n            \"port\":8080,\n            \"protocol\":\"vless\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"id\":\"${UUID}\",\n                        \"flow\":\"xtls-rprx-vision\"\n                    }\n                ],\n                \"decryption\":\"none\",\n                \"fallbacks\":[\n                    {\n                        \"path\":\"/${WS_PATH}-vl\",\n                        \"dest\":3002\n                    },\n                    {\n                        \"path\":\"/${WS_PATH}-vm\",\n                        \"dest\":3003\n                    },\n                    {\n                        \"path\":\"/${WS_PATH}-tr\",\n                        \"dest\":3004\n                    },\n                    {\n                        \"path\":\"/${WS_PATH}-sh\",\n                        \"dest\":3005\n                    },\n                    {\n                        \"dest\":3006,\n                        \"alpn\": \"\",\n                        \"xver\": 1\n                    }\n                ]\n            },\n            \"streamSettings\":{\n                \"network\":\"tcp\"\n            }\n        },\n        {\n            \"port\":3002,\n            \"listen\":\"127.0.0.1\",\n            \"protocol\":\"vless\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"id\":\"${UUID}\",\n                        \"level\":0\n                    }\n                ],\n                \"decryption\":\"none\"\n            },\n            \"streamSettings\":{\n                \"network\":\"ws\",\n                \"security\":\"none\",\n                \"wsSettings\":{\n                    \"path\":\"/${WS_PATH}-vl\"\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\",\n                    \"quic\"\n                ],\n                \"metadataOnly\":false\n            }\n        },\n        {\n            \"port\":3003,\n            \"listen\":\"127.0.0.1\",\n            \"protocol\":\"vmess\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"id\":\"${UUID}\",\n                        \"alterId\":0\n                    }\n                ]\n            },\n            \"streamSettings\":{\n                \"network\":\"ws\",\n                \"wsSettings\":{\n                    \"path\":\"/${WS_PATH}-vm\"\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\",\n                    \"quic\"\n                ],\n                \"metadataOnly\":false\n            }\n        },\n        {\n            \"port\":3004,\n            \"listen\":\"127.0.0.1\",\n            \"protocol\":\"trojan\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"password\":\"${UUID}\"\n                    }\n                ]\n            },\n            \"streamSettings\":{\n                \"network\":\"ws\",\n                \"security\":\"none\",\n                \"wsSettings\":{\n                    \"path\":\"/${WS_PATH}-tr\"\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\",\n                    \"quic\"\n                ],\n                \"metadataOnly\":false\n            }\n        },\n        {\n            \"port\":3005,\n            \"listen\":\"127.0.0.1\",\n            \"protocol\":\"shadowsocks\",\n            \"settings\":{\n                \"clients\":[\n                    {\n                        \"method\":\"chacha20-ietf-poly1305\",\n                        \"password\":\"${UUID}\"\n                    }\n                ],\n                \"decryption\":\"none\"\n            },\n            \"streamSettings\":{\n                \"network\":\"ws\",\n                \"wsSettings\":{\n                    \"path\":\"/${WS_PATH}-sh\"\n                }\n            },\n            \"sniffing\":{\n                \"enabled\":true,\n                \"destOverride\":[\n                    \"http\",\n                    \"tls\",\n                    \"quic\"\n                ],\n                \"metadataOnly\":false\n            }\n        }\n    ],\n    \"dns\":{\n        \"servers\":[\n            \"https+local://8.8.8.8/dns-query\"\n        ]\n    }\n}\nEOF\n  cat > $WORK_DIR/outbound.json << EOF\n{\n    \"outbounds\":[\n        {\n            \"protocol\":\"freedom\",\n            \"tag\":\"direct\"\n        },\n        {\n            \"protocol\":\"blackhole\",\n            \"settings\":{\n\n            },\n            \"tag\":\"block\"\n        },\n        {\n            \"protocol\":\"wireguard\",\n            \"settings\":{\n                \"secretKey\":\"YFYOAdbw1bKTHlNNi+aEjBM3BO7unuFC5rOkMRAz9XY=\",\n                \"address\":[\n                    \"172.16.0.2/32\",\n                    \"2606:4700:110:8a36:df92:102a:9602:fa18/128\"\n                ],\n                \"peers\":[\n                    {\n                        \"publicKey\":\"bmXOC+F1FxEMF9dyiK2H5/1SUtzH0JuVo51h2wPfgyo=\",\n                        \"allowedIPs\":[\n                            \"0.0.0.0/0\",\n                            \"::/0\"\n                        ],\n                        \"endpoint\":\"engage.cloudflareclient.com:2408\"\n                    }\n                ],\n                \"reserved\":[\n                    78,\n                    135,\n                    76\n                ],\n                \"mtu\":1280\n            },\n            \"tag\":\"wireguard\"\n        },\n        {\n            \"protocol\":\"freedom\",\n            \"settings\":{\n                \"domainStrategy\":\"UseIPv4\"\n            },\n            \"proxySettings\":{\n                \"tag\":\"wireguard\"\n            },\n            \"tag\":\"warp-IPv4\"\n        },\n        {\n            \"protocol\":\"freedom\",\n            \"settings\":{\n                \"domainStrategy\":\"UseIPv6\"\n            },\n            \"proxySettings\":{\n                \"tag\":\"wireguard\"\n            },\n            \"tag\":\"warp-IPv6\"\n        }\n    ],\n    \"routing\":{\n        \"domainStrategy\":\"AsIs\",\n        \"rules\":[\n            {\n                \"type\":\"field\",\n                \"domain\":[\n                    \"api.openai.com\"\n                ],\n                \"outboundTag\":\"${CHAT_GPT_OUT_V4}\"\n            },\n            {\n                \"type\":\"field\",\n                \"domain\":[\n                    \"geosite:openai\"\n                ],\n                \"outboundTag\":\"${CHAT_GPT_OUT_V6}\"\n            }\n        ]\n    }\n}\nEOF\n\n  cat > /etc/systemd/system/xray.service << EOF\n[Unit]\nDescription=Xray Service\nDocumentation=https://github.com/XTLS/Xray-core\nAfter=network.target nss-lookup.target\nWants=network-online.target\n\n[Service]\nType=simple\nNoNewPrivileges=yes\nExecStart=$WORK_DIR/xray run -confdir $WORK_DIR/\nRestart=on-failure\nRestartPreventExitStatus=23\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\n  # 生成 Nginx 配置文件\n  [ \"$INSTALL_NGINX\" != 'n' ] && json_nginx\n\n  # 再次检测状态，运行 Argo 和 Xray\n  check_install\n  case \"${STATUS[0]}\" in\n    \"$(text 26)\" )\n      warning \"\\n Argo $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 27)\" )\n      cmd_systemctl enable argo && info \"\\n Argo $(text 28) $(text 37) \\n\"\n      ;;\n    \"$(text 28)\" )\n      info \"\\n Argo $(text 28) $(text 37) \\n\"\n  esac\n\n  case \"${STATUS[1]}\" in\n    \"$(text 26)\" )\n      warning \"\\n Xray $(text 28) $(text 38) \\n\"\n      ;;\n    \"$(text 27)\" )\n      cmd_systemctl enable xray && info \"\\n Xray $(text 28) $(text 37) \\n\"\n      ;;\n    \"$(text 28)\" )\n      info \"\\n Xray $(text 28) $(text 37) \\n\"\n  esac\n}\n\n# 创建快捷方式\ncreate_shortcut() {\n  cat > $WORK_DIR/ax.sh << EOF\n#!/usr/bin/env bash\n\nbash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/argox/main/argox.sh) \\$1\nEOF\n  chmod +x $WORK_DIR/ax.sh\n  ln -sf $WORK_DIR/ax.sh /usr/bin/argox\n  [ -s /usr/bin/argox ] && hint \"\\n $(text 62) \"\n}\n\nexport_list() {\n  check_install\n\n  #### v1.6.3 处理的 jq 和 qrencode 二进制文件代替系统依赖的问题，此处预计6月30日删除\n  if [ \"$IS_NGINX\" = 'is_nginx' ]; then\n    [[ ! -s $WORK_DIR/jq && -s /usr/bin/jq ]] && cp /usr/bin/jq $WORK_DIR/\n    if [ ! -s $WORK_DIR/qrencode ]; then\n      check_arch\n      wget -qO $WORK_DIR/qrencode ${GH_PROXY}https://github.com/fscarmen/client_template/raw/main/qrencode-go/qrencode-go-linux-$QRENCODE_ARCH && chmod +x $WORK_DIR/qrencode\n    fi\n  fi\n\n  # 没有开启 Argo 和 Xray 服务，将不输出节点信息\n  local APP\n  [ \"${STATUS[0]}\" != \"$(text 28)\" ] && APP+=(Argo)\n  [ \"${STATUS[1]}\" != \"$(text 28)\" ] && APP+=(Xray)\n  if [ \"${#APP[@]}\" -gt 0 ]; then\n    reading \"\\n $(text 50) \" OPEN_APP\n    if [ \"${OPEN_APP,,}\" = 'y' ]; then\n      [ \"${STATUS[0]}\" != \"$(text 28)\" ] && cmd_systemctl enable argo\n      [ \"${STATUS[1]}\" != \"$(text 28)\" ] && cmd_systemctl enable xray\n    else\n      exit\n    fi\n  fi\n\n  if grep -q \"^ExecStart=.*8080$\" /etc/systemd/system/argo.service; then\n    local a=5\n    until [[ -n \"$ARGO_DOMAIN\" || \"$a\" = 0 ]]; do\n      sleep 2\n      ARGO_DOMAIN=$(wget -qO- http://localhost:$(ps -ef | awk -F '0.0.0.0:' '/cloudflared.*:8080/{print $2}' | awk 'NR==1 {print $1}')/quicktunnel | awk -F '\"' '{print $4}')\n      ((a--)) || true\n    done\n  else\n    ARGO_DOMAIN=${ARGO_DOMAIN:-\"$(grep -m1 '^vless.*host=.*' $WORK_DIR/list | sed \"s@.*host=\\(.*\\)&.*@\\1@g\")\"}\n  fi\n  JSON=$(cat $WORK_DIR/*inbound*.json)\n  SERVER_IP=${SERVER_IP:-\"$(awk -F '\"' '/\"SERVER_IP\"/{print $4; exit}' <<< \"$JSON\")\"}\n  REALITY_PORT=${REALITY_PORT:-\"$(awk -F '[:,]' '/\"port\"/{print $2; exit}' <<< \"$JSON\")\"}\n  REALITY_PUBLIC=${REALITY_PUBLIC:-\"$(awk -F '\"' '/\"publicKey\"/{print $4; exit}' <<< \"$JSON\")\"}\n  REALITY_PRIVATE=${REALITY_PRIVATE:-\"$(awk -F '\"' '/\"privateKey\"/{print $4; exit}' <<< \"$JSON\")\"}\n  TLS_SERVER=${TLS_SERVER:-\"$(awk -F '\"' '/\"server_name\"/{print $4}' <<< \"$JSON\")\"}\n  SERVER=${SERVER:-\"$(awk -F '\"' '/\"SERVER\"/{print $4; exit}' <<< \"$JSON\")\"}\n  UUID=${UUID:-\"$(awk -F '\"' '/\"password\"/{print $4; exit}' <<< \"$JSON\")\"}\n  WS_PATH=${WS_PATH:-\"$(expr \"$JSON\" : '.*path\":\"/\\(.*\\)-vl.*')\"}\n  NODE_NAME=${NODE_NAME:-\"$(sed -n 's/.*tag\":\"\\(.*\\) reality-vision.*/\\1/gp' <<< \"$JSON\")\"}\n  SS_METHOD=${SS_METHOD:-\"$(awk -F '\"' '/\"method\"/{print $4; exit}' <<< \"$JSON\")\"}\n\n  # IPv6 时的 IP 处理\n  if [[ \"$SERVER_IP\" =~ : ]]; then\n    SERVER_IP_1=\"[$SERVER_IP]\"\n    SERVER_IP_2=\"[[$SERVER_IP]]\"\n  else\n    SERVER_IP_1=\"$SERVER_IP\"\n    SERVER_IP_2=\"$SERVER_IP\"\n  fi\n\n  # 若为临时隧道，处理查询方法\n  grep -q 'metrics.*url' /etc/systemd/system/argo.service && QUICK_TUNNEL_URL=$(text 60)\n\n  # # 生成 vmess 文件\n  VMESS=\"{ \\\"v\\\": \\\"2\\\", \\\"ps\\\": \\\"${NODE_NAME}-Vm\\\", \\\"add\\\": \\\"${SERVER}\\\", \\\"port\\\": \\\"443\\\", \\\"id\\\": \\\"${UUID}\\\", \\\"aid\\\": \\\"0\\\", \\\"scy\\\": \\\"none\\\", \\\"net\\\": \\\"ws\\\", \\\"type\\\": \\\"none\\\", \\\"host\\\": \\\"${ARGO_DOMAIN}\\\", \\\"path\\\": \\\"/${WS_PATH}-vm?ed=2048\\\", \\\"tls\\\": \\\"tls\\\", \\\"sni\\\": \\\"${ARGO_DOMAIN}\\\", \\\"alpn\\\": \\\"\\\" }\"\n\n  # 生成各订阅文件\n  # 生成 Clash proxy providers 订阅文件\n  local CLASH_SUBSCRIBE=\"proxies:\n  - {name: \\\"${NODE_NAME} reality-vision\\\", type: vless, server: ${SERVER_IP}, port: ${REALITY_PORT}, uuid: ${UUID}, network: tcp, udp: true, tls: true, servername: ${TLS_SERVER}, flow: xtls-rprx-vision, client-fingerprint: chrome, reality-opts: {public-key: ${REALITY_PUBLIC}, short-id: \\\"\\\"} }\n  - {name: \\\"${NODE_NAME} reality-grpc\\\", type: vless, server: ${SERVER_IP}, port: ${REALITY_PORT}, uuid: ${UUID}, network: grpc, udp: true, tls: true, servername: ${TLS_SERVER}, flow: , client-fingerprint: chrome, reality-opts: {public-key: ${REALITY_PUBLIC}, short-id: \\\"\\\"}, grpc-opts: {grpc-service-name: \\\"grpc\\\"} }\n  - {name: \\\"${NODE_NAME}-Vl\\\", type: vless, server: ${SERVER}, port: 443, uuid: ${UUID}, udp: true, tls: true, servername: ${ARGO_DOMAIN}, skip-cert-verify: false, network: ws, ws-opts: {path: \\\"/${WS_PATH}-vl\\\", headers: {Host: ${ARGO_DOMAIN}}, \\\"max_early_data\\\":2408, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\"} }\n  - {name: \\\"${NODE_NAME}-Vm\\\", type: vmess, server: ${SERVER}, port: 443, uuid: ${UUID}, udp: true, alterId: 0, cipher: none, tls: true, servername: ${ARGO_DOMAIN}, skip-cert-verify: true, network: ws, ws-opts: {path: \\\"/${WS_PATH}-vm\\\", headers: {Host: ${ARGO_DOMAIN}}, \\\"max_early_data\\\":2408, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\"}}\n  - {name: \\\"${NODE_NAME}-Tr\\\", type: trojan, server: ${SERVER}, port: 443, password: ${UUID}, udp: true, tls: true, servername: ${ARGO_DOMAIN}, sni: ${ARGO_DOMAIN}, skip-cert-verify: false, network: ws, ws-opts: { path: \\\"/${WS_PATH}-tr\\\", headers: {Host: ${ARGO_DOMAIN}}, \\\"max_early_data\\\":2408, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" } }\n  - {name: \\\"${NODE_NAME}-Sh\\\", type: ss, server: ${SERVER}, port: 443, cipher: ${SS_METHOD}, password: ${UUID}, udp: true, plugin: v2ray-plugin, plugin-opts: { mode: websocket, host: ${ARGO_DOMAIN}, path: \\\"/${WS_PATH}-sh\\\", tls: true, servername: ${ARGO_DOMAIN}, skip-cert-verify: false, mux: false } }\"\n\n  echo -n \"${CLASH_SUBSCRIBE}\" > $WORK_DIR/subscribe/proxies\n\n  # 生成 clash 订阅配置文件\n  wget --no-check-certificate -qO- --tries=3 --timeout=2 ${SUBSCRIBE_TEMPLATE}/clash | sed \"s#NODE_NAME#${NODE_NAME}#g; s#PROXY_PROVIDERS_URL#http://${ARGO_DOMAIN}/${UUID}/proxies#\" > $WORK_DIR/subscribe/clash\n\n  # 生成 Shadowrocket 订阅文件\n  local SHADOWROCKET_SUBSCRIBE=\"vless://$(echo -n \"auto:${UUID}@${SERVER_IP_2}:${REALITY_PORT}\" | base64 -w0)?remarks=${NODE_NAME}%20reality-vision&obfs=none&tls=1&peer=${TLS_SERVER}&xtls=2&pbk=${REALITY_PUBLIC}\nvless://$(echo -n \"auto:${UUID}@${SERVER_IP_2}:${REALITY_PORT}\" | base64 -w0)?remarks=${NODE_NAME}%20reality-grpc&path=grpc&obfs=grpc&tls=1&peer=${TLS_SERVER}&pbk=${REALITY_PUBLIC}\nvless://${UUID}@${SERVER}:443?encryption=none&security=tls&type=ws&host=${ARGO_DOMAIN}&path=/${WS_PATH}-vl?ed=2048&sni=${ARGO_DOMAIN}#${NODE_NAME}-Vl\nvmess://$(echo -n \"none:${UUID}@${SERVER}:443\" | base64 -w0)?remarks=${NODE_NAME}-Vm&obfsParam=${ARGO_DOMAIN}&path=/${WS_PATH}-vm?ed=2048&obfs=websocket&tls=1&peer=${ARGO_DOMAIN}&alterId=0\ntrojan://${UUID}@${SERVER}:443?peer=${ARGO_DOMAIN}&plugin=obfs-local;obfs=websocket;obfs-host=${ARGO_DOMAIN};obfs-uri=/${WS_PATH}-tr?ed=2048#${NODE_NAME}-Tr\"\n\n  echo -n \"${SHADOWROCKET_SUBSCRIBE}\" | base64 -w0 > $WORK_DIR/subscribe/shadowrocket\n\n  # 生成 V2rayN / NekoBox 订阅文件\n  local V2RAYN_SUBSCRIBE=\"vless://${UUID}@${SERVER_IP_1}:${REALITY_PORT}?encryption=none&flow=xtls-rprx-vision&security=reality&sni=${TLS_SERVER}&fp=chrome&pbk=${REALITY_PUBLIC}&type=tcp&headerType=none#${NODE_NAME} reality-vision\nvless://${UUID}@${SERVER_IP_1}:${REALITY_PORT}?security=reality&sni=${TLS_SERVER}&fp=chrome&pbk=${REALITY_PUBLIC}&type=grpc&serviceName=grpc&encryption=none#${NODE_NAME} reality-grpc\nvless://${UUID}@${SERVER}:443?encryption=none&security=tls&sni=${ARGO_DOMAIN}&type=ws&host=${ARGO_DOMAIN}&path=%2F${WS_PATH}-vl%3Fed%3D2048#${NODE_NAME}-Vl\nvmess://$(echo -n \"$VMESS\" | base64 -w0)\ntrojan://${UUID}@${SERVER}:443?security=tls&sni=${ARGO_DOMAIN}&type=ws&host=${ARGO_DOMAIN}&path=/${WS_PATH}-tr?ed%3D2048#${NODE_NAME}-Tr\"\n\n  echo -n \"${V2RAYN_SUBSCRIBE}\" | base64 -w0 > $WORK_DIR/subscribe/base64\n\n  # 生成 Sing-box 订阅文件\n  local INBOUND_REPLACE=\"{ \\\"type\\\":\\\"vless\\\", \\\"tag\\\":\\\"${NODE_NAME} reality-vision\\\", \\\"server\\\":\\\"${SERVER_IP}\\\", \\\"server_port\\\": ${REALITY_PORT}, \\\"uuid\\\":\\\"${UUID}\\\", \\\"flow\\\":\\\"xtls-rprx-vision\\\", \\\"packet_encoding\\\":\\\"xudp\\\", \\\"tls\\\":{ \\\"enabled\\\":true, \\\"server_name\\\":\\\"${TLS_SERVER}\\\", \\\"utls\\\":{ \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" }, \\\"reality\\\":{ \\\"enabled\\\":true, \\\"public_key\\\":\\\"${REALITY_PUBLIC}\\\", \\\"short_id\\\":\\\"\\\" } } }, { \\\"type\\\": \\\"vless\\\", \\\"tag\\\":\\\"${NODE_NAME} reality-grpc\\\", \\\"server\\\": \\\"${SERVER_IP}\\\", \\\"server_port\\\": ${REALITY_PORT}, \\\"uuid\\\": \\\"${UUID}\\\", \\\"packet_encoding\\\":\\\"xudp\\\", \\\"tls\\\": { \\\"enabled\\\": true, \\\"server_name\\\": \\\"${TLS_SERVER}\\\", \\\"utls\\\": { \\\"enabled\\\": true, \\\"fingerprint\\\": \\\"chrome\\\" }, \\\"reality\\\": { \\\"enabled\\\": true, \\\"public_key\\\": \\\"${REALITY_PUBLIC}\\\", \\\"short_id\\\": \\\"\\\" } }, \\\"transport\\\": { \\\"type\\\": \\\"grpc\\\", \\\"service_name\\\": \\\"grpc\\\" } }, { \\\"type\\\":\\\"vless\\\", \\\"tag\\\":\\\"${NODE_NAME}-Vl\\\", \\\"server\\\":\\\"${SERVER}\\\", \\\"server_port\\\":443, \\\"uuid\\\":\\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${ARGO_DOMAIN}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/${WS_PATH}-vl\\\", \\\"headers\\\": { \\\"Host\\\": \\\"${ARGO_DOMAIN}\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" } }, { \\\"type\\\":\\\"vmess\\\", \\\"tag\\\":\\\"${NODE_NAME}-Vm\\\", \\\"server\\\":\\\"${SERVER}\\\", \\\"server_port\\\":443, \\\"uuid\\\":\\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${ARGO_DOMAIN}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/${WS_PATH}-vm\\\", \\\"headers\\\": { \\\"Host\\\": \\\"${ARGO_DOMAIN}\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" } }, { \\\"type\\\":\\\"trojan\\\", \\\"tag\\\":\\\"${NODE_NAME}-Tr\\\", \\\"server\\\": \\\"${SERVER}\\\", \\\"server_port\\\": 443, \\\"password\\\": \\\"${UUID}\\\", \\\"tls\\\": { \\\"enabled\\\":true, \\\"server_name\\\":\\\"${ARGO_DOMAIN}\\\", \\\"utls\\\": { \\\"enabled\\\":true, \\\"fingerprint\\\":\\\"chrome\\\" } }, \\\"transport\\\": { \\\"type\\\":\\\"ws\\\", \\\"path\\\":\\\"/${WS_PATH}-tr\\\", \\\"headers\\\": { \\\"Host\\\": \\\"${ARGO_DOMAIN}\\\" }, \\\"max_early_data\\\":2048, \\\"early_data_header_name\\\":\\\"Sec-WebSocket-Protocol\\\" } }\"\n  local NODE_REPLACE=\"\\\"${NODE_NAME} reality-vision\\\", \\\"${NODE_NAME} reality-grpc\\\", \\\"${NODE_NAME}-Vl\\\", \\\"${NODE_NAME}-Vm\\\", \\\"${NODE_NAME}-Tr\\\"\"\n\n  # 模板\n  local SING_BOX_JSON1=$(wget --no-check-certificate -qO- --tries=3 --timeout=2 ${SUBSCRIBE_TEMPLATE}/sing-box1)\n  echo $SING_BOX_JSON1 | sed 's#, {[^}]\\+\"tun-in\"[^}]\\+}##' | sed \"s#\\\"<INBOUND_REPLACE>\\\"#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#$NODE_REPLACE#g\" | $WORK_DIR/jq > $WORK_DIR/subscribe/sing-box-pc\n  echo $SING_BOX_JSON1 | sed 's# {[^}]\\+\"mixed\"[^}]\\+},##; s#, \"auto_detect_interface\": true##' | sed \"s#\\\"<INBOUND_REPLACE>\\\"#$INBOUND_REPLACE#; s#\\\"<NODE_REPLACE>\\\"#$NODE_REPLACE#g\" | $WORK_DIR/jq > $WORK_DIR/subscribe/sing-box-phone\n\n  # 生成二维码 url 文件\n  [ \"$IS_NGINX\" = 'is_nginx' ] && cat > $WORK_DIR/subscribe/qr << EOF\n$(text 66):\n$(text 67):\nhttps://${ARGO_DOMAIN}/${UUID}/auto\n\n$(text 67):\n$(text 64) QRcode:\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://${ARGO_DOMAIN}/${UUID}/auto\n\n$(text 67):\n$($WORK_DIR/qrencode \"https://${ARGO_DOMAIN}/${UUID}/auto\")\nEOF\n\n  # 生成客户端配置文件\n  EXPORT_LIST_FILE=\"*******************************************\n┌────────────────┐  ┌────────────────┐\n│                │  │                │\n│     $(warning \"V2rayN\")     │  │    $(warning \"NekoBox\")     │\n│                │  │                │\n└────────────────┘  └────────────────┘\n----------------------------\n$(info \"$(sed \"G\" <<< \"${V2RAYN_SUBSCRIBE}\")\n\nss://$(echo -n \"${SS_METHOD}:${UUID}\" | base64 -w0)@${SERVER}:443#${NODE_NAME}-Sh\n由于该软件导出的链接不全，请自行处理如下: 传输协议: WS , 伪装域名: ${ARGO_DOMAIN} , 路径: /${WS_PATH}-sh?ed=2048 , 传输层安全: tls , sni: ${ARGO_DOMAIN}\")\n\n*******************************************\n┌────────────────┐\n│                │\n│  $(warning \"Shadowrocket\")  │\n│                │\n└────────────────┘\n----------------------------\n\n$(hint \"$(sed \"G\" <<< \"${SHADOWROCKET_SUBSCRIBE}\")\")\n\n*******************************************\n┌────────────────┐\n│                │\n│   $(warning \"Clash Meta\")   │\n│                │\n└────────────────┘\n----------------------------\n\n$(info \"$(sed '1d;G' <<< \"$CLASH_SUBSCRIBE\")\")\n\n*******************************************\n┌────────────────┐\n│                │\n│    $(warning \"Sing-box\")    │\n│                │\n└────────────────┘\n----------------------------\n\n$(hint \"$(echo \"{ \\\"outbounds\\\":[ ${INBOUND_REPLACE%,} ] }\" | $WORK_DIR/jq)\n\n $(text 63)\")\n\"\n[ \"$IS_NGINX\" = 'is_nginx' ] && EXPORT_LIST_FILE+=\"\n\n*******************************************\n\n$(info \"Index:\nhttps://${ARGO_DOMAIN}/${UUID}/\n\nQR code:\nhttps://${ARGO_DOMAIN}/${UUID}/qr\n\nV2rayN / Nekoray $(text 66):\nhttps://${ARGO_DOMAIN}/${UUID}/base64\")\n\n$(info \"Clash $(text 66):\nhttps://${ARGO_DOMAIN}/${UUID}/clash\n\nsing-box for pc $(text 66):\nhttps://${ARGO_DOMAIN}/${UUID}/sing-box-pc\n\nsing-box for cellphone $(text 66):\nhttps://${ARGO_DOMAIN}/${UUID}/sing-box-phone\n\nShadowrocket $(text 66):\nhttps://${ARGO_DOMAIN}/${UUID}/shadowrocket\")\n\n*******************************************\n\n$(hint \" $(text 66):\n$(text 67):\nhttps://${ARGO_DOMAIN}/${UUID}/auto\n\n $(text 64) QRcode:\n$(text 67):\nhttps://api.qrserver.com/v1/create-qr-code/?size=200x200&data=https://${ARGO_DOMAIN}/${UUID}/auto\")\n\n$($WORK_DIR/qrencode https://${ARGO_DOMAIN}/${UUID}/auto)\n\"\n\nEXPORT_LIST_FILE+=\"\n$(info \"\\n*******************************************\n\n ${QUICK_TUNNEL_URL} \")\n\"\n  # 生成并显示节点信息\n  echo \"$EXPORT_LIST_FILE\" > $WORK_DIR/list\n  cat $WORK_DIR/list\n\n  # 显示脚本使用情况数据\n  hint \"\\n $(text 55) \\n\"\n}\n\n# 更换 Argo 隧道类型\nchange_argo() {\n  check_install\n  [[ ${STATUS[0]} = \"$(text 26)\" ]] && error \" $(text 39) \"\n\n  case $(grep \"ExecStart=\" /etc/systemd/system/argo.service) in\n    *--config* )\n      ARGO_TYPE='Json'; ARGO_DOMAIN=\"$(grep -m1 '^vless' $WORK_DIR/list | sed \"s@.*host=\\(.*\\)&.*@\\1@g\")\" ;;\n    *--token* )\n      ARGO_TYPE='Token'; ARGO_DOMAIN=\"$(grep -m1 '^vless' $WORK_DIR/list | sed \"s@.*host=\\(.*\\)&.*@\\1@g\")\" ;;\n    * )\n      ARGO_TYPE='Try'; ARGO_DOMAIN=$(wget -qO- http://localhost:$(ps -ef | awk -F '0.0.0.0:' '/cloudflared.*:8080/{print $2}' | awk 'NR==1 {print $1}')/quicktunnel | awk -F '\"' '{print $4}')\n  esac\n\n  hint \"\\n $(text 40) \\n\"\n  unset ARGO_DOMAIN\n  hint \" $(text 41) \\n\" && reading \" $(text 24) \" CHANGE_TO\n    case \"$CHANGE_TO\" in\n      1 )\n        cmd_systemctl disable argo\n        [ -s $WORK_DIR/tunnel.json ] && rm -f $WORK_DIR/tunnel.{json,yml}\n        sed -i \"s@ExecStart=.*@ExecStart=$WORK_DIR/cloudflared tunnel --edge-ip-version auto --no-autoupdate --metrics 0.0.0.0:${METRICS_PORT} --url http://localhost:8080@g\" /etc/systemd/system/argo.service\n        ;;\n      2 )\n        SERVER_IP=$(awk -F '\"' '/\"SERVER_IP\"/{print $4}' $WORK_DIR/*inbound*.json)\n        argo_variable\n        cmd_systemctl disable argo\n        if [ -n \"$ARGO_TOKEN\" ]; then\n          [ -s $WORK_DIR/tunnel.json ] && rm -f $WORK_DIR/tunnel.{json,yml}\n          sed -i \"s@ExecStart=.*@ExecStart=$WORK_DIR/cloudflared tunnel --edge-ip-version auto run --token ${ARGO_TOKEN}@g\" /etc/systemd/system/argo.service\n        elif [ -n \"$ARGO_JSON\" ]; then\n          [ -s $WORK_DIR/tunnel.json ] && rm -f $WORK_DIR/tunnel.{json,yml}\n          json_argo\n          sed -i \"s@ExecStart=.*@ExecStart=$WORK_DIR/cloudflared tunnel --edge-ip-version auto --config $WORK_DIR/tunnel.yml run@g\" /etc/systemd/system/argo.service\n        fi\n        ;;\n      * )\n        exit 0\n    esac\n\n    [ \"$IS_NGINX\" = 'is_nginx' ] && json_nginx\n    cmd_systemctl enable argo\n    export_list\n}\n\n# 卸载 ArgoX\nuninstall() {\n  if [ -d $WORK_DIR ]; then\n    cmd_systemctl disable argo\n    cmd_systemctl disable xray\n    [[ -s $WORK_DIR/nginx.conf && $(ps -ef | grep 'nginx' | wc -l) -le 1 ]] && reading \"\\n $(text 65) \" REMOVE_NGINX\n    [ \"${REMOVE_NGINX,,}\" = 'y' ] && ${PACKAGE_UNINSTALL[int]} nginx >/dev/null 2>&1\n    rm -rf $WORK_DIR $TEMP_DIR /etc/systemd/system/{xray,argo}.service /usr/bin/argox\n    info \"\\n $(text 16) \\n\"\n  else\n    error \"\\n $(text 15) \\n\"\n  fi\n\n  # 如果 Alpine 系统，删除开机自启动和python3版systemd\n  if [ \"$SYSTEM\" = 'Alpine' ]; then\n    rm -f /etc/local.d/argo.start /etc/local.d/xray.start\n    rc-update add local >/dev/null 2>&1\n    [ ! -s /etc/systemd/system/*.service ] && rm -f /bin/systemctl\n  fi\n}\n\n# Argo 与 Xray 的最新版本\nversion() {\n  # Argo 版本\n  local ONLINE=$(wget --no-check-certificate -qO- \"${GH_PROXY}https://api.github.com/repos/cloudflare/cloudflared/releases/latest\" | grep \"tag_name\" | cut -d \\\" -f4)\n  local LOCAL=$($WORK_DIR/cloudflared -v | awk '{for (i=0; i<NF; i++) if ($i==\"version\") {print $(i+1)}}')\n  local APP=ARGO && info \"\\n $(text 43) \"\n  [[ -n \"$ONLINE\" && \"$ONLINE\" != \"$LOCAL\" ]] && reading \"\\n $(text 9) \" UPDATE[0] || info \" $(text 44) \"\n  local ONLINE=$(wget --no-check-certificate -qO- \"${GH_PROXY}https://api.github.com/repos/XTLS/Xray-core/releases/latest\" | grep \"tag_name\" | sed \"s@.*\\\"v\\(.*\\)\\\",@\\1@g\")\n  local LOCAL=$($WORK_DIR/xray version | awk '{for (i=0; i<NF; i++) if ($i==\"Xray\") {print $(i+1)}}')\n  local APP=Xray && info \"\\n $(text 43) \"\n  [[ -n \"$ONLINE\" && \"$ONLINE\" != \"$LOCAL\" ]] && reading \"\\n $(text 9) \" UPDATE[1] || info \" $(text 44) \"\n\n  [[ \"${UPDATE[*],,}\" =~ y ]] && check_system_info\n  if [ \"${UPDATE[0],,}\" = 'y' ]; then\n    wget --no-check-certificate -O $TEMP_DIR/cloudflared ${GH_PROXY}https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-$ARGO_ARCH\n    if [ -s $TEMP_DIR/cloudflared ]; then\n      cmd_systemctl disable argo\n      chmod +x $TEMP_DIR/cloudflared && mv $TEMP_DIR/cloudflared $WORK_DIR/cloudflared\n      cmd_systemctl enable argo && [ \"$(systemctl is-active argo)\" = 'active' ] && info \" Argo $(text 28) $(text 37)\" || error \" Argo $(text 28) $(text 38) \"\n    else\n      local APP=ARGO && error \"\\n $(text 48) \"\n    fi\n  fi\n  if [ \"${UPDATE[1],,}\" = 'y' ]; then\n    wget --no-check-certificate -O $TEMP_DIR/Xray-linux-$XRAY_ARCH.zip ${GH_PROXY}https://github.com/XTLS/Xray-core/releases/latest/download/Xray-linux-$XRAY_ARCH.zip\n    if [ -s $TEMP_DIR/Xray-linux-$XRAY_ARCH.zip ]; then\n      cmd_systemctl disable xray\n      unzip -qo $TEMP_DIR/Xray-linux-$XRAY_ARCH.zip xray *.dat -d $WORK_DIR; rm -f $TEMP_DIR/Xray*.zip\n      cmd_systemctl enable xray && [ \"$(systemctl is-active xray)\" = 'active' ] && info \" Xray $(text 28) $(text 37)\" || error \" Xray $(text 28) $(text 38) \"\n    else\n      local APP=Xray && error \"\\n $(text 48) \"\n    fi\n  fi\n}\n\n# 判断当前 Argo-X 的运行状态，并对应的给菜单和动作赋值\nmenu_setting() {\n  if [[ \"${STATUS[*]}\" =~ $(text 27)|$(text 28) ]]; then\n    if [ -s $WORK_DIR/cloudflared ]; then\n      ARGO_VERSION=$($WORK_DIR/cloudflared -v | awk '{print $3}' | sed \"s@^@Version: &@g\")\n      ss -nltp | grep -q '127\\.0\\.0\\.1:.*\"cloudflared\"' && ARGO_CHECKHEALTH=\"$(text 46): $(wget -qO- http://localhost:$(ss -nltp | grep \"pid=$(ps -ef | awk '/cloudflared.*:8080/{print $2}' | awk 'NR==1 {print $1}'),\" | awk '{print $4}' | sed \"s/.*://\")/healthcheck | sed \"s/OK/$(text 37)/\")\"\n    fi\n    [ -s $WORK_DIR/xray ] && XRAY_VERSION=$($WORK_DIR/xray version | awk 'NR==1 {print $2}' | sed \"s@^@Version: &@g\")\n    [ \"$SYSTEM\" = 'Alpine' ] && PS_LIST=$(ps -ef) || PS_LIST=$(ps -ef | awk '{ $1=\"\"; sub(/^ */, \"\"); print $0 }')\n    [ \"$IS_NGINX\" = 'is_nginx' ] && NGINX_VERSION=$(nginx -v 2>&1 | sed \"s#.*/#Version: #\")\n\n    OPTION[1]=\"1.  $(text 29)\"\n    if [ ${STATUS[0]} = \"$(text 28)\" ]; then\n      AEGO_MEMORY=\"$(text 52): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$(awk '/\\/etc\\/argox\\/cloudflared/{print $1}' <<< \"$PS_LIST\")/status) MB\"\n      [ \"$IS_NGINX\" = 'is_nginx' ] && NGINX_MEMORY=\"$(text 52): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$(awk '/\\/etc\\/argox\\/nginx/{print $1}' <<< \"$PS_LIST\")/status) MB\"\n      OPTION[2]=\"2.  $(text 27) Argo (argox -a)\"\n    else\n      OPTION[2]=\"2.  $(text 28) Argo (argox -a)\"\n    fi\n    [ ${STATUS[1]} = \"$(text 28)\" ] && XRAY_MEMORY=\"$(text 52): $(awk '/VmRSS/{printf \"%.1f\\n\", $2/1024}' /proc/$(awk '/\\/etc\\/argox\\/xray.*\\/etc\\/argox/{print $1}' <<< \"$PS_LIST\")/status) MB\" && OPTION[3]=\"3.  $(text 27) Xray (argox -x)\" || OPTION[3]=\"3.  $(text 28) Xray (argox -x)\"\n    OPTION[4]=\"4.  $(text 30)\"\n    OPTION[5]=\"5.  $(text 31)\"\n    OPTION[6]=\"6.  $(text 32)\"\n    OPTION[7]=\"7.  $(text 33)\"\n    OPTION[8]=\"8.  $(text 51)\"\n    OPTION[9]=\"9.  $(text 57)\"\n\n    ACTION[1]() { export_list; exit 0; }\n    [[ ${STATUS[0]} = \"$(text 28)\" ]] && ACTION[2]() { cmd_systemctl disable argo; [[ \"$(systemctl is-active argo)\" =~ 'inactive'|'unknown' ]] && info \"\\n Argo $(text 27) $(text 37)\" || error \" Argo $(text 27) $(text 38) \"; } || ACTION[2]() { cmd_systemctl enable argo && [ \"$(systemctl is-active argo)\" = 'active' ] && info \"\\n Argo $(text 28) $(text 37)\" || error \" Argo $(text 28) $(text 38) \"; }\n    [[ ${STATUS[1]} = \"$(text 28)\" ]] && ACTION[3]() { cmd_systemctl disable xray; [[ \"$(systemctl is-active xray)\" =~ 'inactive'|'unknown' ]] && info \"\\n Xray $(text 27) $(text 37)\" || error \" Xray $(text 27) $(text 38) \"; } || ACTION[3]() { cmd_systemctl enable xray && [ \"$(systemctl is-active xray)\" = 'active' ] && info \"\\n Xray $(text 28) $(text 37)\" || error \" Xray $(text 28) $(text 38) \"; }\n    ACTION[4]() { change_argo; exit; }\n    ACTION[5]() { version; exit; }\n    ACTION[6]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh); exit; }\n    ACTION[7]() { uninstall; exit; }\n    ACTION[8]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) -$L; exit; }\n    ACTION[9]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sba/main/sba.sh) -$L; exit; }\n\n  else\n    OPTION[1]=\"1.  $(text 34)\"\n    OPTION[2]=\"2.  $(text 32)\"\n    OPTION[3]=\"3.  $(text 51)\"\n    OPTION[4]=\"4.  $(text 57)\"\n\n    ACTION[1]() { install_argox; export_list; create_shortcut; exit; }\n    ACTION[2]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh); exit; }\n    ACTION[3]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sing-box/main/sing-box.sh) -$L; exit; }\n    ACTION[4]() { bash <(wget --no-check-certificate -qO- ${GH_PROXY}https://raw.githubusercontent.com/fscarmen/sba/main/sba.sh) -$L; exit; }\n  fi\n\n  [ \"${#OPTION[@]}\" -ge '10' ] && OPTION[0]=\"0 .  $(text 35)\" || OPTION[0]=\"0.  $(text 35)\"\n  ACTION[0]() { exit; }\n}\n\nmenu() {\n  clear\n  ### hint \" $(text 2) \"\n  echo -e \"======================================================================================================================\\n\"\n  info \" $(text 17):$VERSION\\n $(text 18):$(text 1)\\n $(text 19):\\n\\t $(text 20):$SYS\\n\\t $(text 21):$(uname -r)\\n\\t $(text 22):$ARGO_ARCH\\n\\t $(text 23):$VIRT \"\n  info \"\\t IPv4: $WAN4 $WARPSTATUS4 $COUNTRY4  $ASNORG4 \"\n  info \"\\t IPv6: $WAN6 $WARPSTATUS6 $COUNTRY6  $ASNORG6 \"\n  info \"\\t Argo: ${STATUS[0]}\\t $ARGO_VERSION\\t $AEGO_MEMORY\\t $ARGO_CHECKHEALTH\\n\\t Xray: ${STATUS[1]}\\t $XRAY_VERSION\\t\\t $XRAY_MEMORY \"\n  [ \"$IS_NGINX\" = 'is_nginx' ] && info \"\\t Nginx: ${STATUS[0]}\\t $NGINX_VERSION\\t $NGINX_MEMORY \"\n  echo -e \"\\n======================================================================================================================\\n\"\n  for ((b=1;b<${#OPTION[*]};b++)); do hint \" ${OPTION[b]} \"; done\n  hint \" ${OPTION[0]} \"\n  reading \"\\n $(text 24) \" CHOOSE\n\n  # 输入必须是数字且少于等于最大可选项\n  if grep -qE \"^[0-9]$\" <<< \"$CHOOSE\" && [ \"$CHOOSE\" -lt \"${#OPTION[*]}\" ]; then\n    ACTION[$CHOOSE]\n  else\n    warning \" $(text 36) [0-$((${#OPTION[*]}-1))] \" && sleep 1 && menu\n  fi\n}\n\ncheck_cdn\nstatistics_of_run-times\n\n# 传参\n[[ \"${*,,}\" =~ -e ]] && L=E\n[[ \"${*,,}\" =~ -c ]] && L=C\n\nwhile getopts \":AaXxTtUuNnVvBbF:f:\" OPTNAME; do\n  case \"${OPTNAME,,}\" in\n    a ) select_language; check_system_info; check_install; [ \"${STATUS[0]}\" = \"$(text 28)\" ] && { cmd_systemctl disable argo; [[ \"$(systemctl is-active argo)\" =~ 'inactive'|'unknown' ]] && info \"\\n Argo $(text 27) $(text 37)\" || error \" Argo $(text 27) $(text 38) \"; } || { cmd_systemctl enable argo; [ \"$(systemctl is-active argo)\" = 'active' ] && info \"\\n Argo $(text 28) $(text 37)\" || error \" Argo $(text 28) $(text 38) \"; } ; exit 0 ;;\n    x ) select_language; check_system_info; check_install; [ \"${STATUS[1]}\" = \"$(text 28)\" ] && { cmd_systemctl disable xray; [[ \"$(systemctl is-active xray)\" =~ 'inactive'|'unknown' ]] && info \"\\n Xray $(text 27) $(text 37)\" || error \" Xray $(text 27) $(text 38) \"; } || { cmd_systemctl enable xray; [ \"$(systemctl is-active xray)\" = 'active' ] && info \"\\n Xray $(text 28) $(text 37)\" || error \" Xray $(text 28) $(text 38) \"; } ; exit 0 ;;\n    t ) select_language; change_argo; exit 0 ;;\n    u ) select_language; check_system_info; uninstall; exit 0;;\n    n ) select_language; check_system_info; export_list; exit 0 ;;\n    v ) select_language; check_arch; version; exit 0;;\n    b ) select_language; bash <(wget --no-check-certificate -qO- \"${GH_PROXY}https://raw.githubusercontent.com/ylx2016/Linux-NetSpeed/master/tcp.sh\"); exit ;;\n    f ) VARIABLE_FILE=$OPTARG; . $VARIABLE_FILE ;;\n  esac\ndone\n\nselect_language\ncheck_root\ncheck_arch\ncheck_system_info\ncheck_dependencies\ncheck_system_ip\ncheck_install\nmenu_setting\n[ -z \"$VARIABLE_FILE\" ] && menu || ACTION[1]"
        },
        {
          "name": "config",
          "type": "blob",
          "size": 0.98046875,
          "content": "# Language\nL='C' # C for Chinese / E for English\n\n# VPS ip\nSERVER_IP=''\n# For example: IPv4: 123.123.123.123;    IPv6: 2a01:4f8:272:5aa1:dc88:ff6e:5305:1234\n\n# Argo\nARGO_DOMAIN=''\n# For example: ARGO_DOMAIN='argo.xray.com'\nARGO_AUTH=''\n# For example - Json : ARGO_AUTH='{\"AccountTag\":\"9cc9e3e4dag29d2a02e297f14f20513a\",\"TunnelSecret\":\"vRzeQmSagqjCoQ0mzvl0qDR8dVROE889m0TnbZhJKHs=\",\"TunnelID\":\"acd8c712-b088-4660-8187-e69abfa38443\"}'\n# Token: ARGO_AUTH='eyJhIjoiOWNjOWUzZTRkOGYyOWQyYTAyZTI5N2YxNagyFzUxM2EiLCJ0IjoiYTcyMmUwNjYtODlmYi00ZjJmLTgagDQtOGEwOTVhNTkzM2I2IiwicyI6Ik9XTTFaak0xWWprdE16QTRNQzAwTUdVMExUbGlaV0V0TmpFek9UZzFNRGczWkdRNCJ9'\n\n# Xray\nREALITY_PORT='55443'\nREALITY_PRIVATE='iFgLurn7LeLvfKLAjn41R7_OISJ0-fDOZvoBMGcnvVU'\nREALITY_PUBLIC='SpFP6OlOOTkBnwOyBwzJT5I7oCIrCtGxU7pHK_qMJwA'\nSERVER='icook.hk'\nUUID='ffffffff-ffff-ffff-ffff-ffffffffffff'\nWS_PATH='argox'\nNODE_NAME='node'\n# Refer to the use case for modifications.\n\n# Subscribe\nINSTALL_NGINX='y'\n# [y/n]: Install nginx for subscribe or not."
        }
      ]
    }
  ]
}