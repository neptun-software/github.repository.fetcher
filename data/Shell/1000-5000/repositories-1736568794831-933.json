{
  "metadata": {
    "timestamp": 1736568794831,
    "page": 933,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "homebridge/homebridge-raspbian-image",
      "stars": 1069,
      "defaultBranch": "latest",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.05078125,
          "content": "output/\nwork/\ndeploy/\napt-cacher-ng/\n.git/objects/*\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.2890625,
          "content": "deploy/*\nwork/*\npostrun.sh\n.pc\n*-pc\napt-cacher-ng/\n*zip\n\n# These are all for a local pi-gen test instance\n\npi-gen\nDockerfile\nbuild.sh\nbuild-docker.sh\ndocker-compose.yml\nexport-image\nexport-noobs\nimagetool.sh\nmake_rpi-imager-snipplet.py\nscripts\nstage0\nstage1\nstage2\nstage3\nstage4\nstage5\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.486328125,
          "content": "Copyright (c) 2020 oznu\nCopyright (c) 2015 Raspberry Pi (Trading) Ltd.\n\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:\n\n1. Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer.\n\n2. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.\n\n3. Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.373046875,
          "content": "<p align=\"center\">\n<a href=\"https://github.com/homebridge/homebridge\">\n<img src=\"https://raw.githubusercontent.com/homebridge/branding/latest/logos/homebridge-color-round-stylized.png\" height=\"150\">\n</a>\n</p>\n\n<span align=\"center\">\n\n# Homebridge Raspberry Pi Image\n\n[![Build](https://github.com/homebridge/homebridge-raspbian-image/workflows/CI/badge.svg)](https://github.com/homebridge/homebridge-raspbian-image/actions)\n[![GitHub release (latest by date)](https://badgen.net/github/release/homebridge/homebridge-raspbian-image?label=Version)](https://github.com/homebridge/homebridge-raspbian-image/releases/latest)\n[![GitHub All Releases](https://img.shields.io/github/downloads/homebridge/homebridge-raspbian-image/total)](https://somsubhra.github.io/github-release-stats/?username=homebridge&repository=homebridge-raspbian-image&page=1&per_page=30)\n\n</span>\n\nThis project provides a free [Raspbian](https://www.raspberrypi.org/downloads/raspbian/) based Raspberry Pi image with [Homebridge](https://github.com/homebridge/homebridge) and [Homebridge Config UI X](https://github.com/homebridge/homebridge-config-ui-x) pre-installed.\n\n* Works on all Raspberry Pi models\n* Built on Raspbian Lite (no desktop)\n* Simple WiFi Setup\n* Includes `ffmpeg` pre-compiled with audio support (libfdk-aac)\n* Includes a user friendly, easy to use web based GUI to configure Homebridge and monitor your Raspberry Pi\n* Visual configuration for over 400 plugins (no manual config.json editing required)\n\nThis image also provides a command called `hb-config` which helps you keep Node.js up-to-date, perform maintenance on your Homebridge server, and install additional optional software such as *[Pi Hole](https://github.com/homebridge/homebridge-raspbian-image/wiki/How-To-Install-Pi-Hole)* and *[deCONZ](https://github.com/homebridge/homebridge-raspbian-image/wiki/How-To-Install-deCONZ-for-ConBee-or-RaspBee)*.\n\nThe Homebridge service is installed using the method described in the official [Raspberry Pi Installation Guide](https://github.com/homebridge/homebridge/wiki/Install-Homebridge-on-Raspbian) on the [Homebridge](https://github.com/homebridge/homebridge) project wiki.\n\n## Download and Flash to SD Card\n\n**Note: The homebridge Image is temporarily not available for download within the Raspberry PI Imager Tool.**\n\n**As a workaround, please download latest image from [here](https://github.com/homebridge/homebridge-raspbian-image/releases), and use the 'Custom' option under 'Choose OS' within the imager tool.**\n\nThe *Homebridge Raspberry Pi Image* is completely free (no sign up required).\n\nThe easiest way to flash the *Homebridge Raspberry Pi Image* to your SD card is to use the [Raspberry Pi Imager](https://www.raspberrypi.org/software/).\n\n<p align=\"center\">\n    <img src=\"./media/Raspbian Image.gif\" width=\"600\">\n</p>\n\n1. Download and install the latest version of [Raspberry Pi Imager](https://www.raspberrypi.org/software/).\n2. Open the *Raspberry Pi Imager* application.\n3. Click **Choose Device**\n4. Scroll down and select the **No filtering** option.\n5. Click **Choose OS**.\n6. Scroll down and select the **Other specific purpose OS** category.\n7. Select the **Home assistants and home automation** category.\n8. Select **Homebridge**, then choose your Homebridge image.\n  - **32bit** - For all RPI Models\n  - **64bit** - For RPI 3B, 3B+, 3A+, 4B, 400, 5, CM3, CM3+, CM4, CM4S, Zero 2 W\n9. Click **Choose Storage** and select your SD card.\n10. Click **Next**\n11. For **Use OS Customisation**, select **No**\n12. Click **Write**\n\n*Raspberry Pi Imager* will now download and flash the latest version of the *Homebridge Raspberry Pi Image* to your SD card, this may take several minutes depending on the speed of your internet connection and SD card.\n\n---\n\n**Advanced users:**\n\nIf you wish to use another tool such as [Etcher](https://www.balena.io/etcher/) or [`dd`](https://www.raspberrypi.org/documentation/installation/installing-images/mac.md) to flash the Homebridge Raspberry Pi Image, you can manually download the image from our releases page:\n\n<span align=\"center\">\n\n### [Download Latest Version](https://github.com/homebridge/homebridge-raspbian-image/releases/latest)\n\n</span>\n\n## First Boot / Network Setup\n\nNow that you have flashed your SD card, you can insert it into your Raspberry Pi.\n\nBefore powering on your Raspberry Pi decide if you want to use Ethernet or WiFi to connect to your network.\n\n### Ethernet\n\n**:warning: An Ethernet connection is recommended as this provides the most simple and stable Homebridge setup.**\n\nIf you have decided to connect your Raspberry Pi using ethernet, do so before you power on your device for the first time. \n\n### WiFi Setup\n\nFollow these steps to connect your device to WiFi:\n\n1. Power on your device without an Ethernet cable attached.\n2. Wait 1-2 minutes\n3. Use your mobile phone to scan for new WiFi networks\n4. Connect to the hotspot named **Homebridge WiFi Setup**\n5. Wait a few moments until the captive portal opens, this portal will allow you to connect the Raspberry Pi to your local WiFi network.\n\nIf you enter your WiFi credentials incorrectly the **Homebridge WiFi Setup** hotspot will reappear allowing you to try again.\n\n![wifi-connect-setup](https://user-images.githubusercontent.com/3979615/75397237-7e525b80-594a-11ea-9be0-4f064b6a4178.png)\n\n## Managing Homebridge\n\nThe [Homebridge UI](https://github.com/homebridge/homebridge-config-ui-x) web interface will allow you to install, remove and update plugins, and modify the Homebridge config.json and manage other aspects of your Homebridge service.\n\nIf you're using macOS or a mobile device, you should be able to access the UI via http://homebridge.local.\n\nIf you're using Windows, or `http://homebridge.local` does not work for you, you will need to find the IP address of your Raspberry Pi another way:\n\n1. Login to your router and find the \"connected devices\" or \"dhcp clients\" page to find the IP address that was assigned to the Raspberry Pi.\n2. Use an iPhone to access `http://homebridge.local`, once you login using the default username and password (admin/admin) you can find the IP address under System Information.\n3. Download the [Fing](https://www.fing.com/) app for [iOS](https://itunes.apple.com/us/app/fing-network-scanner/id430921107?mt=8) or [Android](https://play.google.com/store/apps/details?id=com.overlook.android.fing&hl=en_GB) to scan your network to find the IP address of your Raspberry Pi.\n4. As a last resort, if you plug a monitor into your Raspberry Pi, the IP address will be displayed on the attached screen once it has finished booting.\n\nOnce you've found your IP address, login to the web interface by going to `http://<ip address of your server>`.\n\n<p align=\"center\">\n  <img width=\"600px\" src=\"https://user-images.githubusercontent.com/3979615/71886653-b16d3f80-3190-11ea-9ff8-49dc4ae4fff0.png\">\n</p>\n\n## Security and Privacy\n\n* **Privacy:** The *Homebridge Raspbian Image*, as well as the [Homebridge](https://github.com/homebridge/homebridge) and [Homebridge Config UI X](https://github.com/homebridge/homebridge-config-ui-x) software components, do not contain any *analytics*, *call home*, or similar features that would allow the project maintainers to track you or the usage of this image.\n* **Security:** The *Homebridge Raspbian Image* is kept up-to-date with the latest [official Raspbian builds](https://github.com/RPi-Distro/pi-gen). To find out more, or to report a security issue or vulnerability, please see the project's [SECURITY](.github/SECURITY.md) policy.\n* **Transparency:** The *Homebridge Raspbian Image* project is open source and each image is built using the public GitHub Action runners. The build logs for each release are publicly available on the project's [GitHub Actions](https://github.com/homebridge/homebridge-raspbian-image/actions/workflows/main.yml) page and every release contains a SHA-256 checksum of the image you can use to verify the integrity of your download.\n\n## Community\n\nThe official Homebridge Discord server and Reddit community are where users can discuss Homebridge and ask for help.\n\n<span align=\"center\">\n\n[![Homebridge Discord](https://discordapp.com/api/guilds/432663330281226270/widget.png?style=banner2)](https://discord.gg/kqNCe2D) [![Homebridge Reddit](.github/homebridge-reddit.svg?sanitize=true)](https://www.reddit.com/r/homebridge/)\n\n</span>\n\n## Help\n\nThe *Homebridge Raspberry Pi Image* wiki contains more information and instructions on how to further customise your install:\n\nhttps://github.com/homebridge/homebridge-raspbian-image/wiki\n"
        },
        {
          "name": "combine-rpi-imager-snipplet.py",
          "type": "blob",
          "size": 0.6337890625,
          "content": "#!/usr/bin/env python3\nimport json\n\ndef read_json(file_path):\n    with open(file_path, 'r') as file:\n        return json.load(file)\n\ndef write_json(file_path, data):\n    with open(file_path, 'w') as file:\n        json.dump(data, file, indent=2)\n\n# Read JSON data from the files\ndata1 = read_json('rpi-image-repo-32bit.json')\ndata2 = read_json('rpi-image-repo-64bit.json')\n\n# Combine the lists in the \"os_list\" key\ncombined_list = data1['os_list'] + data2['os_list']\n\n# Create a new dictionary with the combined list\ncombined_data = {\"os_list\": combined_list}\n\n# Save the combined JSON data to a file\nwrite_json('rpi-image-repo.json', combined_data)\n"
        },
        {
          "name": "config",
          "type": "blob",
          "size": 0.2958984375,
          "content": "# This is only used for local testing, the main configuration is in the github action.\n\nIMG_DATE=\"Raspbian\"\nIMG_NAME=\"Homebridge\"\nTARGET_HOSTNAME=\"homebridge\"\nENABLE_SSH=1\nSTAGE_LIST=\"stage0 stage1 stage2 stage3_homebridge\"\nFIRST_USER_NAME=\"pi\"\nFIRST_USER_PASS=\"raspberry\"\nRELEASE=\"bookworm\"\n#CONTINUE=1"
        },
        {
          "name": "make_rpi-imager-snipplet.py",
          "type": "blob",
          "size": 4.240234375,
          "content": "#!/usr/bin/env python3\nimport json\nimport zipfile\nimport hashlib\nimport os\nimport argparse\nfrom datetime import date\nimport glob\n\n# Credits for this go to https://github.com/guysoft/CustomPiOS/blob/devel/src/make_rpi-imager-snipplet.py\n\n\ndef calculate_sha256(data):\n    sha256_hash = hashlib.sha256()\n    sha256_hash.update(data)\n    return sha256_hash.hexdigest()\n\n\ndef calculate_sha256_zip(zip_file_path):\n    # Calculate the SHA256 hash of the zip file\n    with open(zip_file_path, 'rb') as file:\n        sha256_hash = hashlib.sha256()\n        while True:\n            # Read the file in chunks\n            chunk = file.read(4096)\n            if not chunk:\n                break\n            sha256_hash.update(chunk)\n\n        zip_hash = sha256_hash.hexdigest()\n\n    # Open the zip file in binary mode\n    with zipfile.ZipFile(zip_file_path, 'r') as zip_obj:\n        # Get the list of file names in the zip\n        file_names = zip_obj.namelist()\n\n        if file_names:\n            # Get the first file name in the zip\n            first_file_name = file_names[0]\n\n            # Calculate the SHA256 hash of the first file's data within the zip\n            sha256_hash = hashlib.sha256()\n            with zip_obj.open(first_file_name) as first_file:\n                while True:\n                    # Read the first file's data in chunks\n                    chunk = first_file.read(4096)\n                    if not chunk:\n                        break\n                    sha256_hash.update(chunk)\n\n            first_file_hash = sha256_hash.hexdigest()\n\n            return zip_hash, first_file_hash\n\n    # Return None if the zip file is empty\n    return zip_hash, None\n\n\ndef handle_arg(key, optional=False):\n    if optional and key not in os.environ.keys():\n        return\n    if key in os.environ.keys():\n        return os.environ[key]\n    else:\n        print(\"Error: Missing value in your distro config file for rpi-imager json generator: \" + str(key))\n        exit(1)\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(\n        add_help=True, description='Create a json snipplet from an image to be used with the make_rpi-imager_list.py and eventually published in a repo')\n    parser.add_argument('workspace_suffix', nargs='?', default=\"default\",\n                        type=str, help='Suffix of workspace folder')\n    parser.add_argument('-u', '--rpi_imager_url', type=str,\n                        default=\"MISSING_URL\", help='url to the uploaded image url')\n\n    args = parser.parse_args()\n\n    workspace_path = os.path.join(os.getcwd(), \"pi-gen\", \"deploy\")\n    if args.workspace_suffix != \"\" and args.workspace_suffix != \"default\":\n        workspace_path += \"-\" + args.workspace_suffix\n\n    name = handle_arg(\"RPI_IMAGER_NAME\")\n    description = handle_arg(\"RPI_IMAGER_DESCRIPTION\")\n    url = args.rpi_imager_url\n    icon = handle_arg(\"RPI_IMAGER_ICON\")\n    website = handle_arg(\"RPI_IMAGER_WEBSITE\", True)\n    release_date = date.today().strftime(\"%Y-%m-%d\")\n\n    devices=[]\n    devices = json.loads(handle_arg(\"RPI_IMAGER_DEVICES\"))\n\n #   print(\"devices: \", devices)\n    zip_local = glob.glob(os.path.join(workspace_path, \"*.zip\"))[0]\n\n    if url == \"MISSING_URL\":\n        url = os.path.basename(zip_local)\n\n    output_path = os.path.join(workspace_path, \"rpi-image-repo.json\")\n\n    json_out = {\"name\": name,\n                \"description\": description,\n                \"init_format\": \"systemd\",\n                \"url\": url,\n                \"icon\": icon,\n                \"release_date\": release_date\n                }\n\n    json_out[\"devices\"] = [json.loads(json.dumps(i)) for i in devices]\n    if website is not None:\n        json_out[\"website\"] = website\n\n    json_out[\"extract_size\"] = None\n    with zipfile.ZipFile(zip_local) as zipSize:\n        json_out[\"extract_size\"] = zipSize.filelist[0].file_size\n\n    json_out[\"image_download_size\"] = os.stat(zip_local).st_size\n\n    json_out[\"extract_sha256\"] = None\n    json_out[\"image_download_sha256\"] = None\n    json_out[\"image_download_sha256\"], json_out[\"extract_sha256\"] = calculate_sha256_zip(\n        zip_local)\n\n    output_json = {}\n    output_json['os_list'] = []\n    output_json['os_list'].append(json_out)\n\n    with open(output_path, \"w\") as w:\n        json.dump(output_json, w, indent=2)\n\n    print(\"Done generating rpi-imager json snipplet to \" + output_path)\n"
        },
        {
          "name": "media",
          "type": "tree",
          "content": null
        },
        {
          "name": "remove_rpi_gen.sh",
          "type": "blob",
          "size": 0.18359375,
          "content": "rm -rf BUILD.md Dockerfile build.sh build-docker.sh docker-compose.yml export-image export-noobs imagetool.sh make_rpi-imager-snipplet.py scripts stage0 stage1 stage2 stage3 stage4 stage5\n"
        },
        {
          "name": "setup_local_test_environment.sh",
          "type": "blob",
          "size": 0.61328125,
          "content": "#! /bin/sh\n\necho\necho \"Cleaning up previous pi-gen clone\"\necho\n\nrm -rf pi-gen Dockerfile build.sh build-docker.sh docker-compose.yml export-image export-noobs imagetool.sh scripts stage0 stage1 stage2 stage3 stage4 stage5\necho\necho \"Cloning recent pi-gen arm64 branch for local testing of build process\"\necho\n\ngit clone https://github.com/RPi-Distro/pi-gen\ncd pi-gen\ngit switch arm64\ncd ..\n\necho\necho \"Moving clone for use\"\necho\n\nfor i in Dockerfile build.sh build-docker.sh docker-compose.yml export-image export-noobs imagetool.sh scripts stage0 stage1 stage2 stage3 stage4 stage5\ndo \n  echo \"Moving \"$i\n  mv pi-gen/$i .\ndone\n"
        },
        {
          "name": "stage3_homebridge",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}