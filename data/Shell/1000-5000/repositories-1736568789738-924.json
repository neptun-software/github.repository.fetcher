{
  "metadata": {
    "timestamp": 1736568789738,
    "page": 924,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "markus-perl/ffmpeg-build-script",
      "stars": 1075,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "packages/\nworkspace/"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.07421875,
          "content": "packages\nworkspace\n.idea\nlinux\n.artifacts\nbuild\nfull-static-test.dockerfile\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.009765625,
          "content": "FROM ubuntu:24.04 AS build\n\nENV DEBIAN_FRONTEND=noninteractive\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install build-essential curl ca-certificates libva-dev \\\n        python3 python-is-python3 ninja-build meson git curl \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* \\\n    && update-ca-certificates\n\nWORKDIR /app\nCOPY ./build-ffmpeg /app/build-ffmpeg\n\nRUN SKIPINSTALL=yes /app/build-ffmpeg --build\n\nFROM ubuntu:24.04\n\nENV DEBIAN_FRONTEND=noninteractive\n\n# install va-driver\nRUN apt-get update \\\n    && apt-get -y install libva-drm2 \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n\n# Copy ffmpeg\nCOPY --from=build /app/workspace/bin/ffmpeg /usr/bin/ffmpeg\nCOPY --from=build /app/workspace/bin/ffprobe /usr/bin/ffprobe\nCOPY --from=build /app/workspace/bin/ffplay /usr/bin/ffplay\n\n# Check shared library\nRUN ldd /usr/bin/ffmpeg\nRUN ldd /usr/bin/ffprobe\nRUN ldd /usr/bin/ffplay\n\nCMD         [\"--help\"]\nENTRYPOINT  [\"/usr/bin/ffmpeg\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.04296875,
          "content": "MIT License\n\nCopyright (c) 2016 Markus Perl\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 66.67578125,
          "content": "[![build test](https://github.com/markus-perl/ffmpeg-build-script/workflows/build%20test/badge.svg?branch=master)](https://github.com/markus-perl/ffmpeg-build-script/actions)\n\n![FFmpeg build script](https://raw.github.com/markus-perl/ffmpeg-build-script/master/ffmpeg-build-script.png)\n\n### If you like the script, please \"â˜…\" this project!\n\nbuild-ffmpeg\n==========\n\nThe FFmpeg build script provides an easy way to build a **static** FFmpeg on **macOS** and **Linux** with optional **non-free and GPL codecs** (--enable-gpl-and-non-free, see https://ffmpeg.org/legal.html) included.\n\n[![How-To build FFmpeg on MacOS](https://img.youtube.com/vi/Z9p3mM757cM/0.jpg)](https://www.youtube.com/watch?v=Z9p3mM757cM \"How-To build FFmpeg on OSX\")\n\n*Youtube: How-To build and install FFmpeg on macOS*\n\n## Disclaimer And Data Privacy Notice\n\nThis script will download different packages with different licenses from various sources, which may track your usage.\nThese sources are out of control by the developers of this script. Also, this script can create a non-free and unredistributable binary.\nBy downloading and using this script, you are fully aware of this.\n\nUse this script at your own risk. I maintain this script in my spare time. Please do not file bug reports for systems\nother than Debian and macOS, because I don't have the resources or time to maintain different systems.\n\n## Requirements to build\n\n### macOS\n\n* XCode 14.x or greater\n\n### Linux\n\n* Debian >= Buster, Ubuntu => Focal Fossa; other distributions might work too\n* Rocky Linux 8\n\n```bash\n# Debian and Ubuntu\n$ sudo apt install build-essential curl\n\n# Fedora\n$ sudo dnf install @development-tools curl\n```\n\n## Quick Script Installation \n\nNote: to enable hardware acceleration, see details below.\n### Quick install and build (macOS, Linux)\n\nOpen your command line and run (curl needs to be installed):\n\n```bash\n# Without GPL and non-free codes, see https://ffmpeg.org/legal.html \n$ bash <(curl -s \"https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/web-install.sh?v1\")\n\n# With GPL and non-free codes, see https://ffmpeg.org/legal.html \n$ bash <(curl -s \"https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/web-install-gpl-and-non-free.sh?v1\")\n```\n\nThis command downloads the build script and automatically starts the build process.\n\n### Common install and build (macOS, Linux)\n\n```bash\n$ git clone https://github.com/markus-perl/ffmpeg-build-script.git\n$ cd ffmpeg-build-script\n# Without GPL and non-free codecs\n$ ./build-ffmpeg --build\n# With GPL and non-free codecs\n$ ./build-ffmpeg --enable-gpl-and-non-free --build\n```\n\n## Supported Codecs\n\n* `x264`: H.264 Video Codec (MPEG-4 AVC)\n* `x265`: H.265 Video Codec (HEVC)\n* `libsvtav1`: SVT-AV1 Encoder and Decoder\n* `aom`: AV1 Video Codec (Experimental and very slow!)\n* `librav1e`: rust based AV1 encoder (only available if [`cargo` is installed](https://doc.rust-lang.org/cargo/getting-started/installation.html)) \n* `libdav1d`: Fastest AV1 decoder developed by the VideoLAN and FFmpeg communities and sponsored by the AOMedia (only available if `meson` and `ninja` are available)\n* `fdk_aac`: Fraunhofer FDK AAC Codec\n* `xvidcore`: MPEG-4 video coding standard\n* `VP8/VP9/webm`: VP8 / VP9 Video Codec for the WebM video file format\n* `mp3`: MPEG-1 or MPEG-2 Audio Layer III\n* `ogg`: Free, open container format\n* `vorbis`: Lossy audio compression format\n* `theora`: Free lossy video compression format\n* `opus`: Lossy audio coding format\n* `srt`: Secure Reliable Transport\n* `webp`: Image format both lossless and lossy\n\n### HardwareAccel\n\n* `nv-codec`: [NVIDIA's GPU accelerated video codecs](https://devblogs.nvidia.com/nvidia-ffmpeg-transcoding-guide/).\n  These encoders/decoders will only be available if a CUDA installation was found while building the binary.\n  Follow [these](#Cuda-installation) instructions for installation. Supported codecs in nvcodec:\n    * Decoders\n        * H264 `h264_cuvid`\n        * H265 `hevc_cuvid`\n        * Motion JPEG `mjpeg_cuvid`\n        * MPEG1 video `mpeg1_cuvid`\n        * MPEG2 video `mpeg2_cuvid`\n        * MPEG4 part 2 video `mepg4_cuvid`\n        * VC-1 `vc1_cuvid`\n        * VP8 `vp8_cuvid`\n        * VP9 `vp9_cuvid`\n    * Encoders\n        * H264 `nvenc_h264`\n        * H265 `nvenc_hevc`\n* `vaapi`: [Video Acceleration API](https://trac.ffmpeg.org/wiki/Hardware/VAAPI). These encoders/decoders will only be\n  available if a libva driver installation was found while building the binary. Follow [these](#Vaapi-installation)\n  instructions for installation. Supported codecs in vaapi:\n    * Encoders\n        * H264 `h264_vaapi`\n        * H265 `hevc_vaapi`\n        * Motion JPEG `mjpeg_vaapi`\n        * MPEG2 video `mpeg2_vaapi`\n        * VP8 `vp8_vaapi`\n        * VP9 `vp9_vaapi`\n* `AMF`: [AMD's Advanced Media Framework](https://github.com/GPUOpen-LibrariesAndSDKs/AMF). These encoders will only \n  be available if `amdgpu` drivers are detected in use on the system with `lspci -v`. \n    * Encoders\n        * H264 `h264_amf` \n\n\n## Build Script Usage\n\n```bash\nUsage: build-ffmpeg [OPTIONS]\nOptions:\n  -h, --help                     Display usage information\n      --version                  Display version information\n  -b, --build                    Starts the build process\n      --enable-gpl-and-non-free  Enable non-free codecs  - https://ffmpeg.org/legal.html\n      --latest                   Build latest version of dependencies if newer available\n  -c, --cleanup                  Remove all working dirs\n      --small                    Prioritize small size over speed and usability; don't build manpages.\n      --full-static              Complete static build of ffmpeg (eg. glibc, pthreads etc...) **only Linux**\n                                 Note: Because of the NSS (Name Service Switch), glibc does not recommend static links.\n```\n\n### Notes on static linking\n\n- Because of the NSS (Name Service Switch), glibc does **not recommend** static links. See [more details here](https://sourceware.org/glibc/wiki/FAQ#Even_statically_linked_programs_need_some_shared_libraries_which_is_not_acceptable_for_me.__What_can_I_do.3F).\n\n- The libnpp in the CUDA SDK cannot be statically linked.\n- Vaapi cannot be statically linked.\n\n\n## Common full build (macOS, Linux)\n\n1) Install the [prerequisites](#requirements-to-build), above.\n1) Install optional dependencies, as desired.\n   - If you have an NVIDIA GPU and want to enable CUDA acceleration, please refer to [these instructions](#Cuda-installation) to install the SDK.\n\n   - If you have an AMD GPU and want to enable AMF acceleration, please refer to [these instructions](#amf-installation) to install the drivers.\n\n   - If you want to enable Vaapi acceleration (for most GPUs), please refer to [these instructions](#Vaapi-installation) to install the driver.\n\n   - If you want the `librav1e` AV1 encoder, please install [rust](https://doc.rust-lang.org/cargo/getting-started/installation.html) to get `cargo` for the build process. Be sure to start a new shell before building, so that `cargo` is in the new path. If desired, it can be removed with `rustup self uninstall` after the build is complete.\n\n   - If you want the `dav1d` AV1 decoder, please ensure that `python3` is installed. If using the system python installation, also ensure that `meson` and `ninja` are installed before running (otherwise the script will try to install them using `pip3`).\n\n   - If you want the `Lv2` filter plugin, please ensure that `python3` is installed.\n\n1) Run the downoaded build script from the current directory, with your desired [options](#build-script-usage).\n   ```bash\n   $ ./build-ffmpeg [your parameters here] --build\n   ```\n   - Packages will be under the `packages/` subdirectory.\n   - Build results will be under the `workspace/` subdirectory.\n   \n   Upon completion, build-ffmpeg will prompt you for whether to install.\n\n1) Once installed, if you are satisfied with your ffmpeg build, the ffmpeg-build-script directory can be removed completely.\n\n### CUDA installation\n\nCUDA is a parallel computing platform developed by NVIDIA. To be able to compile ffmpeg with CUDA support, you first\nneed a compatible NVIDIA GPU and the NVIDIA compiler nvcc from the CUDA toolkit.\n\n- Ubuntu: To install the CUDA toolkit on Ubuntu, run \n  ```bash\n  sudo apt install nvidia-cuda-toolkit\n  ``` \n  After compilation, you can run \n  ```bash\n  sudo apt install nvidia-cuda-dev && sudo apt remove nvidia-cuda-toolkit\n  ``` \n  This removes the compilers but leaves the needed shared library `libnpp`.\n\n- Other Linux distributions: Once you have the GPU and display driver installed, you can follow the\n  [official instructions](https://docs.nvidia.com/cuda/cuda-installation-guide-linux/index.html)\n  or [this blog](https://www.pugetsystems.com/labs/hpc/How-To-Install-CUDA-10-1-on-Ubuntu-19-04-1405/)\n  to setup the CUDA toolkit.\n\nIt is also beneficial to set the `CUDA_COMPUTE_CAPABILITY` environmental variable so the build is tailored to your hardware and its capabilities. There are many ways you can find your compute capability, for example by using [nvidia-smi](https://stackoverflow.com/questions/40695455/what-utility-binary-can-i-call-to-determine-an-nvidia-gpus-compute-capability).\n\n### Vaapi installation\n\nYou will need the libva driver, so please install it below.\n\n```bash\n# Debian and Ubuntu\n$ sudo apt install libva-dev vainfo\n\n# Fedora and CentOS\n$ sudo dnf install libva-devel libva-intel-driver libva-utils\n```\n\n### AMF installation\n\nTo use the AMF encoder, you will need to be using the AMD GPU Pro drivers with OpenCL support.\nDownload the drivers from https://www.amd.com/en/support and install the appropriate opencl versions.\n\n```bash\n./amdgpu-pro-install -y --opencl=rocr,legacy\n```\n\n### LV2 Plugin Support\n\nIf python 3 is available, the script will build a ffmpeg binary with [Lv2 filter](https://github.com/lv2/lv2/wiki) plugin support.\n\n### Apple M1 (Apple Silicon) Support\n\nThe script also builds FFmpeg on a new MacBook with an Apple Silicon M1 processor.\n\n\n## Build in Docker (Linux)\n\nWith Docker, FFmpeg can be built reliably without altering the host system. Also, there is no need to have the CUDA SDK\ninstalled outside of the Docker image.\n\n#### Default\n\nIf you're running an operating system other than the one above, a completely static build may work. To build a full\nstatically linked binary inside Docker, just run the following command:\n\n```bash\n$ docker build --tag=ffmpeg:default --output type=local,dest=build -f Dockerfile .\n```\n\n#### CUDA\nThese builds are always built with the --enable-gpl-and-non-free switch, as CUDA is non-free. See https://ffmpeg.org/legal.html\n\n```bash\n## Start the build\n$ docker build --tag=ffmpeg:cuda --output type=local,dest=build -f cuda-ubuntu.dockerfile .\n```\n\nBuild an `export.dockerfile` that copies only what you need from the image you just built as follows. When running,\nmove the library in the lib to a location where the linker can find it or set the `LD_LIBRARY_PATH`. Since we have\nmatched the operating system and version, it should work well with dynamic links. If it doesn't work, edit\nthe `export.dockerfile` and copy the necessary libraries and try again.\n\n```bash\n$ docker build --output type=local,dest=build -f export.dockerfile .\n$ ls build\nbin lib\n$ ls build/bin\nffmpeg ffprobe\n$ ls build/lib\nlibnppc.so.11 libnppicc.so.11 libnppidei.so.11 libnppig.so.11\n```\n\n---\n\nBy default, newer docker versions don't allow GPU access while building the image. **If you intend to build with docker on the same system you intend to run the built image on**, allowing this access is beneficial for detecting CUDA compute capability, and tailoring the build to your hardware.  \n\n[some steps](https://stackoverflow.com/a/77348905/7764138) are required on the host machine to allow CUDA access during build:  \n\n1. Install NVIDIA docker runtime and toolkit `sudo apt install nvidia-container-runtime nvidia-container-toolkit`\n2. Modify `/etc/docker/daemon.json` and add the line `\"default-runtime\": \"nvidia\"`\n3. Restart Docker: `sudo systemctl restart docker`\n4. Disable buildkit with `export DOCKER_BUILDKIT=0` before building  \n5. If all this doesn't work, also remove buildx: `sudo apt remove docker-buildx-plugin`\n\nYou should now see the message `CUDA env variable provided` during the docker build process.\n\n#### Full static version\n\nIf you're running an operating system other than the one above, a completely static build may work. To build a full\nstatically linked binary inside Docker, just run the following command:\n\n```bash\n$ sudo -E docker build --tag=ffmpeg:cuda-static --output type=local,dest=build -f full-static.dockerfile .\n```\n\n### Run with Docker (macOS, Linux)\n\nYou can also run the FFmpeg directly inside a Docker container.\n\n#### Default - Without CUDA (macOS, Linux)\n\nIf CUDA is not required, a dockerized FFmpeg build can be executed with the following command:\n\n```bash\n$ sudo docker build --tag=ffmpeg .\n$ sudo docker run ffmpeg -i https://files.coconut.co.s3.amazonaws.com/test.mp4 -f webm -c:v libvpx -c:a libvorbis - > test.mp4\n```\n\n#### With CUDA (Linux)\n\nTo use CUDA from inside the container, the installed Docker version must be >= 19.03. Install the driver\nand `nvidia-docker2`\nfrom [here](https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/install-guide.html#installing-docker-ce).\nYou can then run FFmpeg inside Docker with GPU hardware acceleration enabled, as follows:\n\n```bash\n$ sudo docker build --tag=ffmpeg:cuda -f cuda-ubuntu.dockerfile .\n$ sudo docker run --gpus all ffmpeg-cuda -hwaccel cuvid -c:v h264_cuvid -i https://files.coconut.co.s3.amazonaws.com/test.mp4 -c:v hevc_nvenc -vf scale_npp=-1:1080 - > test.mp4\n```\n\n\nContact\n-------\n\n* Github: [http://www.github.com/markus-perl/](https://github.com/markus-perl/ffmpeg-build-script)\n\nTested on\n---------\n\n* MacOS 15.1\n* Debian 12\n* Ubuntu 22.04\n\n## Continuous Integration\n\nffmpeg-build-script is very stable. Every commit runs against Linux and macOS\nwith https://github.com/markus-perl/ffmpeg-build-script/actions to make sure everything works as expected.\n\n\nExample\n-------\n\n```\nCUDA_COMPUTE_CAPABILITY=75 SKIPINSTALL=yes ./build-ffmpeg --build --enable-gpl-and-non-free\n\nffmpeg-build-script v1.xx\n=========================\n\nUsing 12 make jobs simultaneously.\nWith GPL and non-free codecs\ncargo not installed. rav1e encoder will not be available.\n\nbuilding giflib - version 5.2.1\n=======================\nDownloading https://netcologne.dl.sourceforge.net/project/giflib/giflib-5.2.1.tar.gz as giflib-5.2.1.tar.gz\n... Done\nExtracted giflib-5.2.1.tar.gz\n$ make\n$ make PREFIX=/app/workspace install\n\nbuilding pkg-config - version 0.29.2\n=======================\nDownloading https://pkgconfig.freedesktop.org/releases/pkg-config-0.29.2.tar.gz as pkg-config-0.29.2.tar.gz\n... Done\nExtracted pkg-config-0.29.2.tar.gz\n$ ./configure --silent --prefix=/app/workspace --with-pc-path=/app/workspace/lib/pkgconfig --with-internal-glib\n$ make -j 12\n$ make install\n\nbuilding yasm - version 1.3.0\n=======================\nDownloading https://github.com/yasm/yasm/releases/download/v1.3.0/yasm-1.3.0.tar.gz as yasm-1.3.0.tar.gz\n... Done\nExtracted yasm-1.3.0.tar.gz\n$ ./configure --prefix=/app/workspace\n$ make -j 12\n$ make install\n\nbuilding nasm - version 2.16.01\n=======================\nDownloading https://www.nasm.us/pub/nasm/releasebuilds/2.16.01/nasm-2.16.01.tar.xz as nasm-2.16.01.tar.xz\n... Done\nExtracted nasm-2.16.01.tar.xz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding zlib - version 1.2.13\n=======================\nDownloading https://github.com/madler/zlib/releases/download/v1.2.13/zlib-1.2.13.tar.gz as zlib-1.2.13.tar.gz\n... Done\nExtracted zlib-1.2.13.tar.gz\n$ ./configure --static --prefix=/app/workspace\n$ make -j 12\n$ make install\n\nbuilding m4 - version 1.4.19\n=======================\nDownloading https://ftp.gnu.org/gnu/m4/m4-1.4.19.tar.gz as m4-1.4.19.tar.gz\n... Done\nExtracted m4-1.4.19.tar.gz\n$ ./configure --prefix=/app/workspace\n$ make -j 12\n$ make install\n\nbuilding autoconf - version 2.71\n=======================\nDownloading https://ftp.gnu.org/gnu/autoconf/autoconf-2.71.tar.gz as autoconf-2.71.tar.gz\n... Done\nExtracted autoconf-2.71.tar.gz\n$ ./configure --prefix=/app/workspace\n$ make -j 12\n$ make install\n\nbuilding automake - version 1.16.5\n=======================\nDownloading https://ftp.gnu.org/gnu/automake/automake-1.16.5.tar.gz as automake-1.16.5.tar.gz\n... Done\nExtracted automake-1.16.5.tar.gz\n$ ./configure --prefix=/app/workspace\n$ make -j 12\n$ make install\n\nbuilding libtool - version 2.4.7\n=======================\nDownloading https://ftpmirror.gnu.org/libtool/libtool-2.4.7.tar.gz as libtool-2.4.7.tar.gz\n... Done\nExtracted libtool-2.4.7.tar.gz\n$ ./configure --prefix=/app/workspace --enable-static --disable-shared\n$ make -j 12\n$ make install\n\nbuilding openssl - version 1.1.1w\n=======================\nDownloading https://www.openssl.org/source/openssl-1.1.1w.tar.gz as openssl-1.1.1w.tar.gz\n... Done\nExtracted openssl-1.1.1w.tar.gz\n$ ./config --prefix=/app/workspace --openssldir=/app/workspace --with-zlib-include=/app/workspace/include/ --with-zlib-lib=/app/workspace/lib no-shared zlib\n$ make -j 12\n$ make install_sw\n\nbuilding cmake - version 3.27.7\n=======================\nDownloading https://github.com/Kitware/CMake/releases/download/v3.27.7/cmake-3.27.7.tar.gz as cmake-3.27.7.tar.gz\n... Done\nExtracted cmake-3.27.7.tar.gz\n$ ./configure --prefix=/app/workspace --parallel=12 -- -DCMAKE_USE_OPENSSL=OFF\n$ make -j 12\n$ make install\n\nbuilding dav1d - version 1.1.0\n=======================\nDownloading https://code.videolan.org/videolan/dav1d/-/archive/1.1.0/dav1d-1.1.0.tar.gz as dav1d-1.1.0.tar.gz\n... Done\nExtracted dav1d-1.1.0.tar.gz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding svtav1 - version 1.7.0\n=======================\nDownloading https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v1.7.0/SVT-AV1-v1.7.0.tar.gz as svtav1-1.7.0.tar.gz\n... Done\nExtracted svtav1-1.7.0.tar.gz\n$ cmake -DCMAKE_INSTALL_PREFIX=/app/workspace -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../.. -GUnix Makefiles -DCMAKE_BUILD_TYPE=Release\n$ make -j 12\n$ make install\n$ cp SvtAv1Enc.pc /app/workspace/lib/pkgconfig/\n$ cp SvtAv1Dec.pc /app/workspace/lib/pkgconfig/\n\nbuilding x264 - version 941cae6d\n=======================\nDownloading https://code.videolan.org/videolan/x264/-/archive/941cae6d/x264-941cae6d.tar.gz as x264-941cae6d.tar.gz\n... Done\nExtracted x264-941cae6d.tar.gz\n$ ./configure --prefix=/app/workspace --enable-static --enable-pic CXXFLAGS=-fPIC\n$ make -j 12\n$ make install\n$ make install-lib-static\n\nbuilding x265 - version 3.5\n=======================\nDownloading https://github.com/videolan/x265/archive/Release_3.5.tar.gz as x265-3.5.tar.gz\n... Done\nExtracted x265-3.5.tar.gz\n$ cmake ../../../source -DCMAKE_INSTALL_PREFIX=/app/workspace -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF -DMAIN12=ON\n$ make -j 12\n$ cmake ../../../source -DCMAKE_INSTALL_PREFIX=/app/workspace -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF\n$ make -j 12\n$ cmake ../../../source -DCMAKE_INSTALL_PREFIX=/app/workspace -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DEXTRA_LIB=x265_main10.a;x265_main12.a;-ldl -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON\n$ make -j 12\n$ ar -M\n$ make install\n\nbuilding libvpx - version 1.13.1\n=======================\nDownloading https://github.com/webmproject/libvpx/archive/refs/tags/v1.13.1.tar.gz as libvpx-1.13.1.tar.gz\n... Done\nExtracted libvpx-1.13.1.tar.gz\n$ ./configure --prefix=/app/workspace --disable-unit-tests --disable-shared --disable-examples --as=yasm --enable-vp9-highbitdepth\n$ make -j 12\n$ make install\n\nbuilding xvidcore - version 1.3.7\n=======================\nDownloading https://downloads.xvid.com/downloads/xvidcore-1.3.7.tar.gz as xvidcore-1.3.7.tar.gz\n... Done\nExtracted xvidcore-1.3.7.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n$ rm /app/workspace/lib/libxvidcore.so /app/workspace/lib/libxvidcore.so.4 /app/workspace/lib/libxvidcore.so.4.3\n\nbuilding vid_stab - version 1.1.1\n=======================\nDownloading https://github.com/georgmartius/vid.stab/archive/v1.1.1.tar.gz as vid.stab-1.1.1.tar.gz\n... Done\nExtracted vid.stab-1.1.1.tar.gz\n$ cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=/app/workspace -DUSE_OMP=OFF -DENABLE_SHARED=off .\n$ make\n$ make install\n\nbuilding av1 - version 7b5f665\n=======================\nDownloading https://aomedia.googlesource.com/aom/+archive/7b5f665.tar.gz as av1.tar.gz\n... Done\nExtracted av1.tar.gz\n$ cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX=/app/workspace -DCMAKE_INSTALL_LIBDIR=lib /app/packages/av1\n$ make -j 12\n$ make install\n\nbuilding zimg - version 3.0.5\n=======================\nDownloading https://github.com/sekrit-twc/zimg/archive/refs/tags/release-3.0.5.tar.gz as zimg-3.0.5.tar.gz\n... Done\nExtracted zimg-3.0.5.tar.gz\n$ /app/workspace/bin/libtoolize -i -f -q\n$ ./autogen.sh --prefix=/app/workspace\n$ ./configure --prefix=/app/workspace --enable-static --disable-shared\n$ make -j 12\n$ make install\n\nbuilding lv2 - version 1.18.10\n=======================\nDownloading https://lv2plug.in/spec/lv2-1.18.10.tar.xz as lv2-1.18.10.tar.xz\n... Done\nExtracted lv2-1.18.10.tar.xz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding waflib - version b600c92\n=======================\nDownloading https://gitlab.com/drobilla/autowaf/-/archive/b600c92/autowaf-b600c92.tar.gz as autowaf.tar.gz\n... Done\nExtracted autowaf.tar.gz\n\nbuilding serd - version 0.30.16\n=======================\nDownloading https://gitlab.com/drobilla/serd/-/archive/v0.30.16/serd-v0.30.16.tar.gz as serd-v0.30.16.tar.gz\n... Done\nExtracted serd-v0.30.16.tar.gz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding pcre - version 8.45\n=======================\nDownloading https://altushost-swe.dl.sourceforge.net/project/pcre/pcre/8.45/pcre-8.45.tar.gz as pcre-8.45.tar.gz\n... Done\nExtracted pcre-8.45.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding sord - version 0.16.14\n=======================\nDownloading https://gitlab.com/drobilla/sord/-/archive/v0.16.14/sord-v0.16.14.tar.gz as sord-v0.16.14.tar.gz\n... Done\nExtracted sord-v0.16.14.tar.gz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding sratom - version 0.6.14\n=======================\nDownloading https://gitlab.com/lv2/sratom/-/archive/v0.6.14/sratom-v0.6.14.tar.gz as sratom-v0.6.14.tar.gz\n... Done\nExtracted sratom-v0.6.14.tar.gz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding lilv - version 0.24.20\n=======================\nDownloading https://gitlab.com/lv2/lilv/-/archive/v0.24.20/lilv-v0.24.20.tar.gz as lilv-v0.24.20.tar.gz\n... Done\nExtracted lilv-v0.24.20.tar.gz\n$ meson build --prefix=/app/workspace --buildtype=release --default-library=static --libdir=/app/workspace/lib\n$ ninja -C build\n$ ninja -C build install\n\nbuilding opencore - version 0.1.6\n=======================\nDownloading https://deac-ams.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-0.1.6.tar.gz as opencore-amr-0.1.6.tar.gz\n... Done\nExtracted opencore-amr-0.1.6.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding lame - version 3.100\n=======================\nDownloading https://sourceforge.net/projects/lame/files/lame/3.100/lame-3.100.tar.gz/download?use_mirror=gigenet as lame-3.100.tar.gz\n... Done\nExtracted lame-3.100.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding opus - version 1.4\n=======================\nDownloading https://downloads.xiph.org/releases/opus/opus-1.4.tar.gz as opus-1.4.tar.gz\n... Done\nExtracted opus-1.4.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding libogg - version 1.3.5\n=======================\nDownloading https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-1.3.5.tar.xz as libogg-1.3.5.tar.xz\n... Done\nExtracted libogg-1.3.5.tar.xz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding libvorbis - version 1.3.7\n=======================\nDownloading https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-1.3.7.tar.gz as libvorbis-1.3.7.tar.gz\n... Done\nExtracted libvorbis-1.3.7.tar.gz\n$ ./configure --prefix=/app/workspace --with-ogg-libraries=/app/workspace/lib --with-ogg-includes=/app/workspace/include/ --enable-static --disable-shared --disable-oggtest\n$ make -j 12\n$ make install\n\nbuilding libtheora - version 1.1.1\n=======================\nDownloading https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-1.1.1.tar.gz as libtheora-1.1.1.tar.gz\n... Done\nExtracted libtheora-1.1.1.tar.gz\n$ ./configure --prefix=/app/workspace --with-ogg-libraries=/app/workspace/lib --with-ogg-includes=/app/workspace/include/ --with-vorbis-libraries=/app/workspace/lib --with-vorbis-includes=/app/workspace/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec\n$ make -j 12\n$ make install\n\nbuilding fdk_aac - version 2.0.2\n=======================\nDownloading https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-2.0.2.tar.gz/download?use_mirror=gigenet as fdk-aac-2.0.2.tar.gz\n... Done\nExtracted fdk-aac-2.0.2.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static --enable-pic\n$ make -j 12\n$ make install\n\nbuilding libtiff - version 4.5.0\n=======================\nDownloading https://download.osgeo.org/libtiff/tiff-4.5.0.tar.xz as tiff-4.5.0.tar.xz\n... Done\nExtracted tiff-4.5.0.tar.xz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static --disable-dependency-tracking --disable-lzma --disable-webp --disable-zstd --without-x\n$ make -j 12\n$ make install\n\nbuilding libpng - version 1.6.39\n=======================\nDownloading https://gigenet.dl.sourceforge.net/project/libpng/libpng16/1.6.39/libpng-1.6.39.tar.gz as libpng-1.6.39.tar.gz\n... Done\nExtracted libpng-1.6.39.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding libwebp - version 1.2.2\n=======================\nDownloading https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-1.2.2.tar.gz as libwebp-1.2.2.tar.gz\n... Done\nExtracted libwebp-1.2.2.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static --disable-dependency-tracking --disable-gl --with-zlib-include=/app/workspace/include/ --with-zlib-lib=/app/workspace/lib\n$ cmake -DCMAKE_INSTALL_PREFIX=/app/workspace -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON ../\n$ make -j 12\n$ make install\n\nbuilding libsdl - version 2.28.5\n=======================\nDownloading https://github.com/libsdl-org/SDL/releases/download/release-2.28.5/SDL2-2.28.5.tar.gz as SDL2-2.28.5.tar.gz\n... Done\nExtracted SDL2-2.28.5.tar.gz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding FreeType2 - version 2.11.1\n=======================\nDownloading https://downloads.sourceforge.net/freetype/freetype-2.11.1.tar.xz as freetype-2.11.1.tar.xz\n... Done\nExtracted freetype-2.11.1.tar.xz\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding srt - version 1.5.3\n=======================\nDownloading https://github.com/Haivision/srt/archive/v1.5.3.tar.gz as srt-1.5.3.tar.gz\n... Done\nExtracted srt-1.5.3.tar.gz\n$ cmake . -DCMAKE_INSTALL_PREFIX=/app/workspace -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON\n$ make install\n\nbuilding libzmq - version 4.3.5\n=======================\nDownloading https://github.com/zeromq/libzmq/releases/download/v4.3.5/zeromq-4.3.5.tar.gz as zeromq-4.3.5.tar.gz\n... Done\nExtracted zeromq-4.3.5.tar.gz\n$ ./autogen.sh\n$ ./configure --prefix=/app/workspace --disable-shared --enable-static\n$ make -j 12\n$ make install\n\nbuilding nv-codec - version 11.1.5.3\n=======================\nDownloading https://github.com/FFmpeg/nv-codec-headers/releases/download/n11.1.5.3/nv-codec-headers-11.1.5.3.tar.gz as nv-codec-headers-11.1.5.3.tar.gz\n... Done\nExtracted nv-codec-headers-11.1.5.3.tar.gz\n$ make PREFIX=/app/workspace\n$ make PREFIX=/app/workspace install\n\nbuilding amf - version 1.4.30\n=======================\nDownloading https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v1.4.30.tar.gz as AMF-1.4.30.tar.gz\n... Done\nExtracted AMF-1.4.30.tar.gz\n$ rm -rf /app/workspace/include/AMF\n$ mkdir -p /app/workspace/include/AMF\n$ cp -r /app/packages/AMF-1.4.30/AMF-1.4.30/amf/public/include/components /app/packages/AMF-1.4.30/AMF-1.4.30/amf/public/include/core /app/workspace/include/AMF/\n\nbuilding ffmpeg - version 6.0\n=======================\nDownloading https://github.com/FFmpeg/FFmpeg/archive/refs/heads/release/6.0.tar.gz as FFmpeg-release-6.0.tar.gz\n... Done\nExtracted FFmpeg-release-6.0.tar.gz\ninstall prefix            /app/workspace\nsource path               .\nC compiler                gcc\nC library                 glibc\nARCH                      x86 (generic)\nbig-endian                no\nruntime cpu detection     yes\nstandalone assembly       yes\nx86 assembler             nasm\nMMX enabled               yes\nMMXEXT enabled            yes\n3DNow! enabled            yes\n3DNow! extended enabled   yes\nSSE enabled               yes\nSSSE3 enabled             yes\nAESNI enabled             yes\nAVX enabled               yes\nAVX2 enabled              yes\nAVX-512 enabled           yes\nAVX-512ICL enabled        yes\nXOP enabled               yes\nFMA3 enabled              yes\nFMA4 enabled              yes\ni686 features enabled     yes\nCMOV is fast              yes\nEBX available             yes\nEBP available             yes\ndebug symbols             no\nstrip symbols             yes\noptimize for size         no\noptimizations             yes\nstatic                    yes\nshared                    no\npostprocessing support    yes\nnetwork support           yes\nthreading support         pthreads\nsafe bitstream reader     yes\ntexi2html enabled         no\nperl enabled              yes\npod2man enabled           yes\nmakeinfo enabled          no\nmakeinfo supports HTML    no\nxmllint enabled           no\n\nExternal libraries:\niconv                   libsrt                  libxvid\nlibaom                  libsvtav1               libzimg\nlibdav1d                libtheora               libzmq\nlibfdk_aac              libvidstab              lv2\nlibfreetype             libvorbis               openssl\nlibmp3lame              libvpx                  sdl2\nlibopencore_amrnb       libwebp                 zlib\nlibopencore_amrwb       libx264\nlibopus                 libx265\n\nExternal libraries providing hardware acceleration:\namf                     cuvid                   nvenc\ncuda                    ffnvcodec               v4l2_m2m\ncuda_llvm               libnpp                  vaapi\ncuda_nvcc               nvdec\n\nLibraries:\navcodec                 avformat                swresample\navdevice                avutil                  swscale\navfilter                postproc\n\nPrograms:\nffmpeg                  ffplay                  ffprobe\n\nEnabled decoders:\naac                     fmvc                    pcx\naac_fixed               fourxm                  pfm\naac_latm                fraps                   pgm\naasc                    frwu                    pgmyuv\nac3                     ftr                     pgssub\nac3_fixed               g2m                     pgx\nacelp_kelvin            g723_1                  phm\nadpcm_4xm               g729                    photocd\nadpcm_adx               gdv                     pictor\nadpcm_afc               gem                     pixlet\nadpcm_agm               gif                     pjs\nadpcm_aica              gremlin_dpcm            png\nadpcm_argo              gsm                     ppm\nadpcm_ct                gsm_ms                  prores\nadpcm_dtk               h261                    prosumer\nadpcm_ea                h263                    psd\nadpcm_ea_maxis_xa       h263_v4l2m2m            ptx\nadpcm_ea_r1             h263i                   qcelp\nadpcm_ea_r2             h263p                   qdm2\nadpcm_ea_r3             h264                    qdmc\nadpcm_ea_xas            h264_cuvid              qdraw\nadpcm_g722              h264_v4l2m2m            qoi\nadpcm_g726              hap                     qpeg\nadpcm_g726le            hca                     qtrle\nadpcm_ima_acorn         hcom                    r10k\nadpcm_ima_alp           hdr                     r210\nadpcm_ima_amv           hevc                    ra_144\nadpcm_ima_apc           hevc_cuvid              ra_288\nadpcm_ima_apm           hevc_v4l2m2m            ralf\nadpcm_ima_cunning       hnm4_video              rasc\nadpcm_ima_dat4          hq_hqa                  rawvideo\nadpcm_ima_dk3           hqx                     realtext\nadpcm_ima_dk4           huffyuv                 rka\nadpcm_ima_ea_eacs       hymt                    rl2\nadpcm_ima_ea_sead       iac                     roq\nadpcm_ima_iss           idcin                   roq_dpcm\nadpcm_ima_moflex        idf                     rpza\nadpcm_ima_mtf           iff_ilbm                rscc\nadpcm_ima_oki           ilbc                    rv10\nadpcm_ima_qt            imc                     rv20\nadpcm_ima_rad           imm4                    rv30\nadpcm_ima_smjpeg        imm5                    rv40\nadpcm_ima_ssi           indeo2                  s302m\nadpcm_ima_wav           indeo3                  sami\nadpcm_ima_ws            indeo4                  sanm\nadpcm_ms                indeo5                  sbc\nadpcm_mtaf              interplay_acm           scpr\nadpcm_psx               interplay_dpcm          screenpresso\nadpcm_sbpro_2           interplay_video         sdx2_dpcm\nadpcm_sbpro_3           ipu                     sga\nadpcm_sbpro_4           jacosub                 sgi\nadpcm_swf               jpeg2000                sgirle\nadpcm_thp               jpegls                  sheervideo\nadpcm_thp_le            jv                      shorten\nadpcm_vima              kgv1                    simbiosis_imx\nadpcm_xa                kmvc                    sipr\nadpcm_xmd               lagarith                siren\nadpcm_yamaha            libaom_av1              smackaud\nadpcm_zork              libdav1d                smacker\nagm                     libfdk_aac              smc\naic                     libopencore_amrnb       smvjpeg\nalac                    libopencore_amrwb       snow\nalias_pix               libopus                 sol_dpcm\nals                     libvorbis               sonic\namrnb                   libvpx_vp8              sp5x\namrwb                   libvpx_vp9              speedhq\namv                     loco                    speex\nanm                     lscr                    srgc\nansi                    m101                    srt\nanull                   mace3                   ssa\napac                    mace6                   stl\nape                     magicyuv                subrip\napng                    mdec                    subviewer\naptx                    media100                subviewer1\naptx_hd                 metasound               sunrast\narbc                    microdvd                svq1\nargo                    mimic                   svq3\nass                     misc4                   tak\nasv1                    mjpeg                   targa\nasv2                    mjpeg_cuvid             targa_y216\natrac1                  mjpegb                  tdsc\natrac3                  mlp                     text\natrac3al                mmvideo                 theora\natrac3p                 mobiclip                thp\natrac3pal               motionpixels            tiertexseqvideo\natrac9                  movtext                 tiff\naura                    mp1                     tmv\naura2                   mp1float                truehd\nav1                     mp2                     truemotion1\nav1_cuvid               mp2float                truemotion2\navrn                    mp3                     truemotion2rt\navrp                    mp3adu                  truespeech\navs                     mp3adufloat             tscc\navui                    mp3float                tscc2\nayuv                    mp3on4                  tta\nbethsoftvid             mp3on4float             twinvq\nbfi                     mpc7                    txd\nbink                    mpc8                    ulti\nbinkaudio_dct           mpeg1_cuvid             utvideo\nbinkaudio_rdft          mpeg1_v4l2m2m           v210\nbintext                 mpeg1video              v210x\nbitpacked               mpeg2_cuvid             v308\nbmp                     mpeg2_v4l2m2m           v408\nbmv_audio               mpeg2video              v410\nbmv_video               mpeg4                   vb\nbonk                    mpeg4_cuvid             vble\nbrender_pix             mpeg4_v4l2m2m           vbn\nc93                     mpegvideo               vc1\ncavs                    mpl2                    vc1_cuvid\ncbd2_dpcm               msa1                    vc1_v4l2m2m\nccaption                mscc                    vc1image\ncdgraphics              msmpeg4v1               vcr1\ncdtoons                 msmpeg4v2               vmdaudio\ncdxl                    msmpeg4v3               vmdvideo\ncfhd                    msnsiren                vmnc\ncinepak                 msp2                    vnull\nclearvideo              msrle                   vorbis\ncljr                    mss1                    vp3\ncllc                    mss2                    vp4\ncomfortnoise            msvideo1                vp5\ncook                    mszh                    vp6\ncpia                    mts2                    vp6a\ncri                     mv30                    vp6f\ncscd                    mvc1                    vp7\ncyuv                    mvc2                    vp8\ndca                     mvdv                    vp8_cuvid\ndds                     mvha                    vp8_v4l2m2m\nderf_dpcm               mwsc                    vp9\ndfa                     mxpeg                   vp9_cuvid\ndfpwm                   nellymoser              vp9_v4l2m2m\ndirac                   notchlc                 vplayer\ndnxhd                   nuv                     vqa\ndolby_e                 on2avc                  vqc\ndpx                     opus                    wady_dpcm\ndsd_lsbf                paf_audio               wavarc\ndsd_lsbf_planar         paf_video               wavpack\ndsd_msbf                pam                     wbmp\ndsd_msbf_planar         pbm                     wcmv\ndsicinaudio             pcm_alaw                webp\ndsicinvideo             pcm_bluray              webvtt\ndss_sp                  pcm_dvd                 wmalossless\ndst                     pcm_f16le               wmapro\ndvaudio                 pcm_f24le               wmav1\ndvbsub                  pcm_f32be               wmav2\ndvdsub                  pcm_f32le               wmavoice\ndvvideo                 pcm_f64be               wmv1\ndxa                     pcm_f64le               wmv2\ndxtory                  pcm_lxf                 wmv3\ndxv                     pcm_mulaw               wmv3image\neac3                    pcm_s16be               wnv1\neacmv                   pcm_s16be_planar        wrapped_avframe\neamad                   pcm_s16le               ws_snd1\neatgq                   pcm_s16le_planar        xan_dpcm\neatgv                   pcm_s24be               xan_wc3\neatqi                   pcm_s24daud             xan_wc4\neightbps                pcm_s24le               xbin\neightsvx_exp            pcm_s24le_planar        xbm\neightsvx_fib            pcm_s32be               xface\nescape124               pcm_s32le               xl\nescape130               pcm_s32le_planar        xma1\nevrc                    pcm_s64be               xma2\nexr                     pcm_s64le               xpm\nfastaudio               pcm_s8                  xsub\nffv1                    pcm_s8_planar           xwd\nffvhuff                 pcm_sga                 y41p\nffwavesynth             pcm_u16be               ylc\nfic                     pcm_u16le               yop\nfits                    pcm_u24be               yuv4\nflac                    pcm_u24le               zero12v\nflashsv                 pcm_u32be               zerocodec\nflashsv2                pcm_u32le               zlib\nflic                    pcm_u8                  zmbv\nflv                     pcm_vidc\n\nEnabled encoders:\na64multi                hevc_vaapi              pcm_vidc\na64multi5               huffyuv                 pcx\naac                     jpeg2000                pfm\nac3                     jpegls                  pgm\nac3_fixed               libaom_av1              pgmyuv\nadpcm_adx               libfdk_aac              phm\nadpcm_argo              libmp3lame              png\nadpcm_g722              libopencore_amrnb       ppm\nadpcm_g726              libopus                 prores\nadpcm_g726le            libsvtav1               prores_aw\nadpcm_ima_alp           libtheora               prores_ks\nadpcm_ima_amv           libvorbis               qoi\nadpcm_ima_apm           libvpx_vp8              qtrle\nadpcm_ima_qt            libvpx_vp9              r10k\nadpcm_ima_ssi           libwebp                 r210\nadpcm_ima_wav           libwebp_anim            ra_144\nadpcm_ima_ws            libx264                 rawvideo\nadpcm_ms                libx264rgb              roq\nadpcm_swf               libx265                 roq_dpcm\nadpcm_yamaha            libxvid                 rpza\nalac                    ljpeg                   rv10\nalias_pix               magicyuv                rv20\namv                     mjpeg                   s302m\nanull                   mjpeg_vaapi             sbc\napng                    mlp                     sgi\naptx                    movtext                 smc\naptx_hd                 mp2                     snow\nass                     mp2fixed                sonic\nasv1                    mpeg1video              sonic_ls\nasv2                    mpeg2_vaapi             speedhq\nav1_amf                 mpeg2video              srt\navrp                    mpeg4                   ssa\navui                    mpeg4_v4l2m2m           subrip\nayuv                    msmpeg4v2               sunrast\nbitpacked               msmpeg4v3               svq1\nbmp                     msvideo1                targa\ncfhd                    nellymoser              text\ncinepak                 opus                    tiff\ncljr                    pam                     truehd\ncomfortnoise            pbm                     tta\ndca                     pcm_alaw                ttml\ndfpwm                   pcm_bluray              utvideo\ndnxhd                   pcm_dvd                 v210\ndpx                     pcm_f32be               v308\ndvbsub                  pcm_f32le               v408\ndvdsub                  pcm_f64be               v410\ndvvideo                 pcm_f64le               vbn\neac3                    pcm_mulaw               vc2\nexr                     pcm_s16be               vnull\nffv1                    pcm_s16be_planar        vorbis\nffvhuff                 pcm_s16le               vp8_v4l2m2m\nfits                    pcm_s16le_planar        vp8_vaapi\nflac                    pcm_s24be               vp9_vaapi\nflashsv                 pcm_s24daud             wavpack\nflashsv2                pcm_s24le               wbmp\nflv                     pcm_s24le_planar        webvtt\ng723_1                  pcm_s32be               wmav1\ngif                     pcm_s32le               wmav2\nh261                    pcm_s32le_planar        wmv1\nh263                    pcm_s64be               wmv2\nh263_v4l2m2m            pcm_s64le               wrapped_avframe\nh263p                   pcm_s8                  xbm\nh264_amf                pcm_s8_planar           xface\nh264_nvenc              pcm_u16be               xsub\nh264_v4l2m2m            pcm_u16le               xwd\nh264_vaapi              pcm_u24be               y41p\nhdr                     pcm_u24le               yuv4\nhevc_amf                pcm_u32be               zlib\nhevc_nvenc              pcm_u32le               zmbv\nhevc_v4l2m2m            pcm_u8\n\nEnabled hwaccels:\nav1_nvdec               mjpeg_vaapi             vp8_nvdec\nav1_vaapi               mpeg1_nvdec             vp8_vaapi\nh263_vaapi              mpeg2_nvdec             vp9_nvdec\nh264_nvdec              mpeg2_vaapi             vp9_vaapi\nh264_vaapi              mpeg4_nvdec             wmv3_nvdec\nhevc_nvdec              mpeg4_vaapi             wmv3_vaapi\nhevc_vaapi              vc1_nvdec\nmjpeg_nvdec             vc1_vaapi\n\nEnabled parsers:\naac                     dvdsub                  opus\naac_latm                flac                    png\nac3                     ftr                     pnm\nadx                     g723_1                  qoi\namr                     g729                    rv30\nav1                     gif                     rv40\navs2                    gsm                     sbc\navs3                    h261                    sipr\nbmp                     h263                    tak\ncavsvideo               h264                    vc1\ncook                    hdr                     vorbis\ncri                     hevc                    vp3\ndca                     ipu                     vp8\ndirac                   jpeg2000                vp9\ndnxhd                   misc4                   webp\ndolby_e                 mjpeg                   xbm\ndpx                     mlp                     xma\ndvaudio                 mpeg4video              xwd\ndvbsub                  mpegaudio\ndvd_nav                 mpegvideo\n\nEnabled demuxers:\naa                      idf                     pcm_s16be\naac                     iff                     pcm_s16le\naax                     ifv                     pcm_s24be\nac3                     ilbc                    pcm_s24le\nace                     image2                  pcm_s32be\nacm                     image2_alias_pix        pcm_s32le\nact                     image2_brender_pix      pcm_s8\nadf                     image2pipe              pcm_u16be\nadp                     image_bmp_pipe          pcm_u16le\nads                     image_cri_pipe          pcm_u24be\nadx                     image_dds_pipe          pcm_u24le\naea                     image_dpx_pipe          pcm_u32be\nafc                     image_exr_pipe          pcm_u32le\naiff                    image_gem_pipe          pcm_u8\naix                     image_gif_pipe          pcm_vidc\nalp                     image_hdr_pipe          pjs\namr                     image_j2k_pipe          pmp\namrnb                   image_jpeg_pipe         pp_bnk\namrwb                   image_jpegls_pipe       pva\nanm                     image_jpegxl_pipe       pvf\napac                    image_pam_pipe          qcp\napc                     image_pbm_pipe          r3d\nape                     image_pcx_pipe          rawvideo\napm                     image_pfm_pipe          realtext\napng                    image_pgm_pipe          redspark\naptx                    image_pgmyuv_pipe       rka\naptx_hd                 image_pgx_pipe          rl2\naqtitle                 image_phm_pipe          rm\nargo_asf                image_photocd_pipe      roq\nargo_brp                image_pictor_pipe       rpl\nargo_cvg                image_png_pipe          rsd\nasf                     image_ppm_pipe          rso\nasf_o                   image_psd_pipe          rtp\nass                     image_qdraw_pipe        rtsp\nast                     image_qoi_pipe          s337m\nau                      image_sgi_pipe          sami\nav1                     image_sunrast_pipe      sap\navi                     image_svg_pipe          sbc\navr                     image_tiff_pipe         sbg\navs                     image_vbn_pipe          scc\navs2                    image_webp_pipe         scd\navs3                    image_xbm_pipe          sdns\nbethsoftvid             image_xpm_pipe          sdp\nbfi                     image_xwd_pipe          sdr2\nbfstm                   ingenient               sds\nbink                    ipmovie                 sdx\nbinka                   ipu                     segafilm\nbintext                 ircam                   ser\nbit                     iss                     sga\nbitpacked               iv8                     shorten\nbmv                     ivf                     siff\nboa                     ivr                     simbiosis_imx\nbonk                    jacosub                 sln\nbrstm                   jv                      smacker\nc93                     kux                     smjpeg\ncaf                     kvag                    smush\ncavsvideo               laf                     sol\ncdg                     live_flv                sox\ncdxl                    lmlm4                   spdif\ncine                    loas                    srt\ncodec2                  lrc                     stl\ncodec2raw               luodat                  str\nconcat                  lvf                     subviewer\ndata                    lxf                     subviewer1\ndaud                    m4v                     sup\ndcstr                   matroska                svag\nderf                    mca                     svs\ndfa                     mcc                     swf\ndfpwm                   mgsts                   tak\ndhav                    microdvd                tedcaptions\ndirac                   mjpeg                   thp\ndnxhd                   mjpeg_2000              threedostr\ndsf                     mlp                     tiertexseq\ndsicin                  mlv                     tmv\ndss                     mm                      truehd\ndts                     mmf                     tta\ndtshd                   mods                    tty\ndv                      moflex                  txd\ndvbsub                  mov                     ty\ndvbtxt                  mp3                     v210\ndxa                     mpc                     v210x\nea                      mpc8                    vag\nea_cdata                mpegps                  vc1\neac3                    mpegts                  vc1t\nepaf                    mpegtsraw               vividas\nffmetadata              mpegvideo               vivo\nfilmstrip               mpjpeg                  vmd\nfits                    mpl2                    vobsub\nflac                    mpsub                   voc\nflic                    msf                     vpk\nflv                     msnwc_tcp               vplayer\nfourxm                  msp                     vqf\nfrm                     mtaf                    w64\nfsb                     mtv                     wady\nfwse                    musx                    wav\ng722                    mv                      wavarc\ng723_1                  mvi                     wc3\ng726                    mxf                     webm_dash_manifest\ng726le                  mxg                     webvtt\ng729                    nc                      wsaud\ngdv                     nistsphere              wsd\ngenh                    nsp                     wsvqa\ngif                     nsv                     wtv\ngsm                     nut                     wv\ngxf                     nuv                     wve\nh261                    obu                     xa\nh263                    ogg                     xbin\nh264                    oma                     xmd\nhca                     paf                     xmv\nhcom                    pcm_alaw                xvag\nhevc                    pcm_f32be               xwma\nhls                     pcm_f32le               yop\nhnm                     pcm_f64be               yuv4mpegpipe\nico                     pcm_f64le\nidcin                   pcm_mulaw\n\nEnabled muxers:\na64                     h263                    pcm_s16le\nac3                     h264                    pcm_s24be\nadts                    hash                    pcm_s24le\nadx                     hds                     pcm_s32be\naiff                    hevc                    pcm_s32le\nalp                     hls                     pcm_s8\namr                     ico                     pcm_u16be\namv                     ilbc                    pcm_u16le\napm                     image2                  pcm_u24be\napng                    image2pipe              pcm_u24le\naptx                    ipod                    pcm_u32be\naptx_hd                 ircam                   pcm_u32le\nargo_asf                ismv                    pcm_u8\nargo_cvg                ivf                     pcm_vidc\nasf                     jacosub                 psp\nasf_stream              kvag                    rawvideo\nass                     latm                    rm\nast                     lrc                     roq\nau                      m4v                     rso\navi                     matroska                rtp\navif                    matroska_audio          rtp_mpegts\navm2                    md5                     rtsp\navs2                    microdvd                sap\navs3                    mjpeg                   sbc\nbit                     mkvtimestamp_v2         scc\ncaf                     mlp                     segafilm\ncavsvideo               mmf                     segment\ncodec2                  mov                     smjpeg\ncodec2raw               mp2                     smoothstreaming\ncrc                     mp3                     sox\ndash                    mp4                     spdif\ndata                    mpeg1system             spx\ndaud                    mpeg1vcd                srt\ndfpwm                   mpeg1video              stream_segment\ndirac                   mpeg2dvd                streamhash\ndnxhd                   mpeg2svcd               sup\ndts                     mpeg2video              swf\ndv                      mpeg2vob                tee\neac3                    mpegts                  tg2\nf4v                     mpjpeg                  tgp\nffmetadata              mxf                     truehd\nfifo                    mxf_d10                 tta\nfifo_test               mxf_opatom              ttml\nfilmstrip               null                    uncodedframecrc\nfits                    nut                     vc1\nflac                    obu                     vc1t\nflv                     oga                     voc\nframecrc                ogg                     w64\nframehash               ogv                     wav\nframemd5                oma                     webm\ng722                    opus                    webm_chunk\ng723_1                  pcm_alaw                webm_dash_manifest\ng726                    pcm_f32be               webp\ng726le                  pcm_f32le               webvtt\ngif                     pcm_f64be               wsaud\ngsm                     pcm_f64le               wtv\ngxf                     pcm_mulaw               wv\nh261                    pcm_s16be               yuv4mpegpipe\n\nEnabled protocols:\nasync                   http                    rtmpe\ncache                   httpproxy               rtmps\nconcat                  https                   rtmpt\nconcatf                 icecast                 rtmpte\ncrypto                  ipfs_gateway            rtmpts\ndata                    ipns_gateway            rtp\nfd                      libsrt                  srtp\nffrtmpcrypt             libzmq                  subfile\nffrtmphttp              md5                     tcp\nfile                    mmsh                    tee\nftp                     mmst                    tls\ngopher                  pipe                    udp\ngophers                 prompeg                 udplite\nhls                     rtmp                    unix\n\nEnabled filters:\na3dscope                dblur                   palettegen\nabench                  dcshift                 paletteuse\nabitscope               dctdnoiz                pan\nacompressor             deband                  perms\nacontrast               deblock                 perspective\nacopy                   decimate                phase\nacrossfade              deconvolve              photosensitivity\nacrossover              dedot                   pixdesctest\nacrusher                deesser                 pixelize\nacue                    deflate                 pixscope\naddroi                  deflicker               pp\nadeclick                deinterlace_vaapi       pp7\nadeclip                 dejudder                premultiply\nadecorrelate            delogo                  prewitt\nadelay                  denoise_vaapi           procamp_vaapi\nadenorm                 derain                  pseudocolor\naderivative             deshake                 psnr\nadrawgraph              despill                 pullup\nadrc                    detelecine              qp\nadynamicequalizer       dialoguenhance          random\nadynamicsmooth          dilation                readeia608\naecho                   displace                readvitc\naemphasis               dnn_classify            realtime\naeval                   dnn_detect              remap\naevalsrc                dnn_processing          removegrain\naexciter                doubleweave             removelogo\nafade                   drawbox                 repeatfields\nafdelaysrc              drawgraph               replaygain\nafftdn                  drawgrid                reverse\nafftfilt                drawtext                rgbashift\nafifo                   drmeter                 rgbtestsrc\nafir                    dynaudnorm              roberts\nafirsrc                 earwax                  rotate\naformat                 ebur128                 sab\nafreqshift              edgedetect              scale\nafwtdn                  elbg                    scale2ref\nagate                   entropy                 scale2ref_npp\nagraphmonitor           epx                     scale_cuda\nahistogram              eq                      scale_npp\naiir                    equalizer               scale_vaapi\naintegral               erosion                 scdet\nainterleave             estdif                  scharr\nalatency                exposure                scroll\nalimiter                extractplanes           segment\nallpass                 extrastereo             select\nallrgb                  fade                    selectivecolor\nallyuv                  feedback                sendcmd\naloop                   fftdnoiz                separatefields\nalphaextract            fftfilt                 setdar\nalphamerge              field                   setfield\namerge                  fieldhint               setparams\nametadata               fieldmatch              setpts\namix                    fieldorder              setrange\namovie                  fifo                    setsar\namplify                 fillborders             settb\namultiply               find_rect               sharpen_npp\nanequalizer             firequalizer            sharpness_vaapi\nanlmdn                  flanger                 shear\nanlmf                   floodfill               showcqt\nanlms                   format                  showcwt\nanoisesrc               fps                     showfreqs\nanull                   framepack               showinfo\nanullsink               framerate               showpalette\nanullsrc                framestep               showspatial\napad                    freezedetect            showspectrum\naperms                  freezeframes            showspectrumpic\naphasemeter             fspp                    showvolume\naphaser                 gblur                   showwaves\naphaseshift             geq                     showwavespic\napsyclip                gradfun                 shuffleframes\napulsator               gradients               shufflepixels\narealtime               graphmonitor            shuffleplanes\naresample               grayworld               sidechaincompress\nareverse                greyedge                sidechaingate\narnndn                  guided                  sidedata\nasdr                    haas                    sierpinski\nasegment                haldclut                signalstats\naselect                 haldclutsrc             signature\nasendcmd                hdcd                    silencedetect\nasetnsamples            headphone               silenceremove\nasetpts                 hflip                   sinc\nasetrate                highpass                sine\nasettb                  highshelf               siti\nashowinfo               hilbert                 smartblur\nasidedata               histeq                  smptebars\nasoftclip               histogram               smptehdbars\naspectralstats          hqdn3d                  sobel\nasplit                  hqx                     spectrumsynth\nastats                  hstack                  speechnorm\nastreamselect           hstack_vaapi            split\nasubboost               hsvhold                 spp\nasubcut                 hsvkey                  sr\nasupercut               hue                     ssim\nasuperpass              huesaturation           ssim360\nasuperstop              hwdownload              stereo3d\natadenoise              hwmap                   stereotools\natempo                  hwupload                stereowiden\natilt                   hwupload_cuda           streamselect\natrim                   hysteresis              super2xsai\navectorscope            identity                superequalizer\navgblur                 idet                    surround\navsynctest              il                      swaprect\naxcorrelate             inflate                 swapuv\nazmq                    interlace               tblend\nbackgroundkey           interleave              telecine\nbandpass                join                    testsrc\nbandreject              kerndeint               testsrc2\nbass                    kirsch                  thistogram\nbbox                    lagfun                  threshold\nbench                   latency                 thumbnail\nbilateral               lenscorrection          thumbnail_cuda\nbilateral_cuda          life                    tile\nbiquad                  limitdiff               tiltshelf\nbitplanenoise           limiter                 tinterlace\nblackdetect             loop                    tlut2\nblackframe              loudnorm                tmedian\nblend                   lowpass                 tmidequalizer\nblockdetect             lowshelf                tmix\nblurdetect              lumakey                 tonemap\nbm3d                    lut                     tonemap_vaapi\nboxblur                 lut1d                   tpad\nbwdif                   lut2                    transpose\ncas                     lut3d                   transpose_npp\ncellauto                lutrgb                  transpose_vaapi\nchannelmap              lutyuv                  treble\nchannelsplit            lv2                     tremolo\nchorus                  mandelbrot              trim\nchromahold              maskedclamp             unpremultiply\nchromakey               maskedmax               unsharp\nchromakey_cuda          maskedmerge             untile\nchromanr                maskedmin               v360\nchromashift             maskedthreshold         vaguedenoiser\nciescope                maskfun                 varblur\ncodecview               mcompand                vectorscope\ncolor                   median                  vflip\ncolorbalance            mergeplanes             vfrdet\ncolorchannelmixer       mestimate               vibrance\ncolorchart              metadata                vibrato\ncolorcontrast           midequalizer            vidstabdetect\ncolorcorrect            minterpolate            vidstabtransform\ncolorhold               mix                     vif\ncolorize                monochrome              vignette\ncolorkey                morpho                  virtualbass\ncolorlevels             movie                   vmafmotion\ncolormap                mpdecimate              volume\ncolormatrix             mptestsrc               volumedetect\ncolorspace              msad                    vstack\ncolorspace_cuda         multiply                vstack_vaapi\ncolorspectrum           negate                  w3fdif\ncolortemperature        nlmeans                 waveform\ncompand                 nnedi                   weave\ncompensationdelay       noformat                xbr\nconcat                  noise                   xcorrelate\nconvolution             normalize               xfade\nconvolve                null                    xmedian\ncopy                    nullsink                xstack\ncorr                    nullsrc                 xstack_vaapi\ncover_rect              oscilloscope            yadif\ncrop                    overlay                 yadif_cuda\ncropdetect              overlay_cuda            yaepblur\ncrossfeed               overlay_vaapi           yuvtestsrc\ncrystalizer             owdenoise               zmq\ncue                     pad                     zoompan\ncurves                  pal100bars              zscale\ndatascope               pal75bars\n\nEnabled bsfs:\naac_adtstoasc           h264_redundant_pps      opus_metadata\nav1_frame_merge         hapqa_extract           pcm_rechunk\nav1_frame_split         hevc_metadata           pgs_frame_merge\nav1_metadata            hevc_mp4toannexb        prores_metadata\nchomp                   imx_dump_header         remove_extradata\ndca_core                media100_to_mjpegb      setts\ndts2pts                 mjpeg2jpeg              text2movsub\ndump_extradata          mjpega_dump_header      trace_headers\ndv_error_marker         mov2textsub             truehd_core\neac3_core               mp3_header_decompress   vp9_metadata\nextract_extradata       mpeg2_metadata          vp9_raw_reorder\nfilter_units            mpeg4_unpack_bframes    vp9_superframe\nh264_metadata           noise                   vp9_superframe_split\nh264_mp4toannexb        null\n\nEnabled indevs:\nfbdev                   oss\nlavfi                   v4l2\n\nEnabled outdevs:\nfbdev                   sdl2\noss                     v4l2\n\nLicense: nonfree and unredistributable\n$ make -j 12\n$ make install\n\nBuilding done. The following binaries can be found here:\n- ffmpeg: /app/workspace/bin/ffmpeg\n- ffprobe: /app/workspace/bin/ffprobe\n- ffplay: /app/workspace/bin/ffplay\n\nInstall these binaries to your /usr/local/bin folder? Existing binaries will be replaced. [Y/n] y\nPassword:\nDone. FFmpeg is now installed to your system.\n```\n\nOther Projects Of Mine\n------------\n\n- [Pushover CLI Client](https://github.com/markus-perl/pushover-cli)\n- [Gender API](https://gender-api.com): [Genderize A Name](https://gender-api.com)\n- [Gender API Client PHP](https://github.com/markus-perl/gender-api-client)\n- [Gender API Client NPM](https://github.com/markus-perl/gender-api-client-npm)\n- [Genderize Names](https://www.youtube.com/watch?v=2SLIAguaygo)\n- [Genderize API](https://gender-api.io)\n"
        },
        {
          "name": "build-ffmpeg",
          "type": "blob",
          "size": 40.5751953125,
          "content": "#!/bin/bash\n\n# HOMEPAGE: https://github.com/markus-perl/ffmpeg-build-script\n# LICENSE: https://github.com/markus-perl/ffmpeg-build-script/blob/master/LICENSE\n\nPROGNAME=$(basename \"$0\")\nFFMPEG_VERSION=7.1\nSCRIPT_VERSION=1.54\nCWD=$(pwd)\nPACKAGES=\"$CWD/packages\"\nWORKSPACE=\"$CWD/workspace\"\nCFLAGS=\"-I$WORKSPACE/include -Wno-int-conversion\"\nLDFLAGS=\"-L$WORKSPACE/lib\"\nLDEXEFLAGS=\"\"\nEXTRALIBS=\"-ldl -lpthread -lm -lz\"\nMACOS_SILICON=false\nCONFIGURE_OPTIONS=()\nNONFREE_AND_GPL=false\nDISABLE_LV2=false\nLATEST=false\nMANPAGES=1\nCURRENT_PACKAGE_VERSION=0\n\n\ncommand_exists() {\n  if ! [[ -x $(command -v \"$1\") ]]; then\n    return 1\n  fi\n\n  return 0\n}\n\n# Check for Apple Silicon\nif [[ (\"$(uname -m)\" == \"arm64\") && (\"$OSTYPE\" == \"darwin\"*) ]]; then\n  # If arm64 AND darwin (macOS)\n  export ARCH=arm64\n  export MACOSX_DEPLOYMENT_TARGET=11.0\n  export CXX=$(which clang++)\n  MACOS_SILICON=true\n  echo \"Apple Silicon detected.\"\n\n  # get macos version\n  MACOS_VERSION=$(sw_vers -productVersion)\n  echo \"macOS Version: $MACOS_VERSION\"\n\n  #check if clang++ is installed and print version. Otherwise exit with an error message\n  if command_exists \"clang++\"; then\n    echo \"clang++ is installed. Version: $(clang++ --version | head -n 1)\"\n  else\n    echo \"clang++ is not installed. Please install Xcode.\"\n    exit 1\n  fi\nfi\n\n# Speed up the process\n# Env Var NUMJOBS overrides automatic detection\nif [[ -n \"$NUMJOBS\" ]]; then\n  MJOBS=\"$NUMJOBS\"\nelif [[ -f /proc/cpuinfo ]]; then\n  MJOBS=$(grep -c processor /proc/cpuinfo)\nelif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  MJOBS=$(sysctl -n machdep.cpu.thread_count)\n  CONFIGURE_OPTIONS=(\"--enable-videotoolbox\")\n  MACOS_LIBTOOL=\"$(which libtool)\" # gnu libtool is installed in this script and need to avoid name conflict\nelse\n  MJOBS=4\nfi\n\nmake_dir() {\n  remove_dir \"$1\"\n  if ! mkdir \"$1\"; then\n    printf \"\\n Failed to create dir %s\" \"$1\"\n    exit 1\n  fi\n}\n\nremove_dir() {\n  if [ -d \"$1\" ]; then\n    rm -rf \"$1\"\n  fi\n}\n\ndownload() {\n  # download url [filename[dirname]]\n\n  DOWNLOAD_PATH=\"$PACKAGES\"\n  DOWNLOAD_FILE=\"${2:-\"${1##*/}\"}\"\n\n  if [[ \"$DOWNLOAD_FILE\" =~ tar. ]]; then\n    TARGETDIR=\"${DOWNLOAD_FILE%.*}\"\n    TARGETDIR=\"${3:-\"${TARGETDIR%.*}\"}\"\n  else\n    TARGETDIR=\"${3:-\"${DOWNLOAD_FILE%.*}\"}\"\n  fi\n\n  if [ ! -f \"$DOWNLOAD_PATH/$DOWNLOAD_FILE\" ]; then\n    echo \"Downloading $1 as $DOWNLOAD_FILE\"\n    curl -L --silent -o \"$DOWNLOAD_PATH/$DOWNLOAD_FILE\" \"$1\"\n\n    EXITCODE=$?\n    if [ $EXITCODE -ne 0 ]; then\n      echo \"\"\n      echo \"Failed to download $1. Exitcode $EXITCODE. Retrying in 10 seconds\"\n      sleep 10\n      curl -L --silent -o \"$DOWNLOAD_PATH/$DOWNLOAD_FILE\" \"$1\"\n    fi\n\n    EXITCODE=$?\n    if [ $EXITCODE -ne 0 ]; then\n      echo \"\"\n      echo \"Failed to download $1. Exitcode $EXITCODE\"\n      exit 1\n    fi\n\n    echo \"... Done\"\n  else\n    echo \"$DOWNLOAD_FILE has already downloaded.\"\n  fi\n\n  make_dir \"$DOWNLOAD_PATH/$TARGETDIR\"\n\n  if [[ \"$DOWNLOAD_FILE\" == *\"patch\"* ]]; then\n    return\n  fi\n\n  if [ -n \"$3\" ]; then\n    if ! tar -xvf \"$DOWNLOAD_PATH/$DOWNLOAD_FILE\" -C \"$DOWNLOAD_PATH/$TARGETDIR\" 2>/dev/null >/dev/null; then\n      echo \"Failed to extract $DOWNLOAD_FILE\"\n      exit 1\n    fi\n  else\n    if ! tar -xvf \"$DOWNLOAD_PATH/$DOWNLOAD_FILE\" -C \"$DOWNLOAD_PATH/$TARGETDIR\" --strip-components 1 2>/dev/null >/dev/null; then\n      echo \"Failed to extract $DOWNLOAD_FILE\"\n      exit 1\n    fi\n  fi\n\n  echo \"Extracted $DOWNLOAD_FILE\"\n\n  cd \"$DOWNLOAD_PATH/$TARGETDIR\" || (\n    echo \"Error has occurred.\"\n    exit 1\n  )\n}\n\nprint_flags () {\n  echo \"Flags: CFLAGS \\\"$CFLAGS\\\", CXXFLAGS \\\"$CXXFLAGS\\\", LDFLAGS \\\"$LDFLAGS\\\", LDEXEFLAGS \\\"$LDEXEFLAGS\\\"\"\n}\n\nexecute() {\n\n  if [[ \"$1\" == *configure* ]]; then\n    print_flags\n  fi\n\n  echo \"$ $*\"\n\n  OUTPUT=$(\"$@\" 2>&1)\n\n  # shellcheck disable=SC2181\n  if [ $? -ne 0 ]; then\n    echo \"$OUTPUT\"\n    echo \"\"\n    echo \"Failed to Execute $*\" >&2\n    exit 1\n  fi\n}\n\nbuild() {\n  echo \"\"\n  echo \"building $1 - version $2\"\n  echo \"=======================\"\n  CURRENT_PACKAGE_VERSION=$2\n\n  if [ -f \"$PACKAGES/$1.done\" ]; then\n    if grep -Fx \"$2\" \"$PACKAGES/$1.done\" >/dev/null; then\n      echo \"$1 version $2 already built. Remove $PACKAGES/$1.done lockfile to rebuild it.\"\n      return 1\n    elif $LATEST; then\n      echo \"$1 is outdated and will be rebuilt with latest version $2\"\n      return 0\n    else\n      echo \"$1 is outdated, but will not be rebuilt. Pass in --latest to rebuild it or remove $PACKAGES/$1.done lockfile.\"\n      return 1\n    fi\n  fi\n\n  return 0\n}\n\nlibrary_exists() {\n  if ! [[ -x $(pkg-config --exists --print-errors \"$1\" 2>&1 >/dev/null) ]]; then\n    return 1\n  fi\n\n  return 0\n}\n\nbuild_done() {\n  echo \"$2\" >\"$PACKAGES/$1.done\"\n}\n\nverify_binary_type() {\n  if ! command_exists \"file\"; then\n    return\n  fi\n\n  BINARY_TYPE=$(file \"$WORKSPACE/bin/ffmpeg\" | sed -n 's/^.*\\:\\ \\(.*$\\)/\\1/p')\n  echo \"\"\n  case $BINARY_TYPE in\n  \"Mach-O 64-bit executable arm64\")\n    echo \"Successfully built Apple Silicon for ${OSTYPE}: ${BINARY_TYPE}\"\n    ;;\n  *)\n    echo \"Successfully built binary for ${OSTYPE}: ${BINARY_TYPE}\"\n    ;;\n  esac\n}\n\ncleanup() {\n  remove_dir \"$PACKAGES\"\n  remove_dir \"$WORKSPACE\"\n  echo \"Cleanup done.\"\n  echo \"\"\n}\n\nusage() {\n  echo \"Usage: $PROGNAME [OPTIONS]\"\n  echo \"Options:\"\n  echo \"  -h, --help                     Display usage information\"\n  echo \"      --version                  Display version information\"\n  echo \"  -b, --build                    Starts the build process\"\n  echo \"      --enable-gpl-and-non-free  Enable GPL and non-free codecs  - https://ffmpeg.org/legal.html\"\n  echo \"      --disable-lv2              Disable LV2 libraries\"\n  echo \"  -c, --cleanup                  Remove all working dirs\"\n  echo \"      --latest                   Build latest version of dependencies if newer available\"\n  echo \"      --small                    Prioritize small size over speed and usability; don't build manpages\"\n  echo \"      --full-static              Build a full static FFmpeg binary (eg. glibc, pthreads etc...) **only Linux**\"\n  echo \"                                 Note: Because of the NSS (Name Service Switch), glibc does not recommend static links.\"\n  echo \"\"\n}\n\necho \"ffmpeg-build-script v$SCRIPT_VERSION\"\necho \"=========================\"\necho \"\"\n\nwhile (($# > 0)); do\n  case $1 in\n  -h | --help)\n    usage\n    exit 0\n    ;;\n  --version)\n    echo \"$SCRIPT_VERSION\"\n    exit 0\n    ;;\n  -*)\n    if [[ \"$1\" == \"--build\" || \"$1\" =~ '-b' ]]; then\n      bflag='-b'\n    fi\n    if [[ \"$1\" == \"--enable-gpl-and-non-free\" ]]; then\n      CONFIGURE_OPTIONS+=(\"--enable-nonfree\")\n      CONFIGURE_OPTIONS+=(\"--enable-gpl\")\n      NONFREE_AND_GPL=true\n    fi\n    if [[ \"$1\" == \"--disable-lv2\" ]]; then\n      DISABLE_LV2=true\n    fi\n    if [[ \"$1\" == \"--cleanup\" || \"$1\" =~ '-c' && ! \"$1\" =~ '--' ]]; then\n      cflag='-c'\n      cleanup\n    fi\n    if [[ \"$1\" == \"--full-static\" ]]; then\n      if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n        echo \"Error: A full static binary can only be build on Linux.\"\n        exit 1\n      fi\n      LDEXEFLAGS=\"-static -fPIC\"\n      CFLAGS+=\" -fPIC\"\n      CXXFLAGS+=\" -fPIC\"\n    fi\n    if [[ \"$1\" == \"--latest\" ]]; then\n      LATEST=true\n    fi\n    if [[ \"$1\" == \"--small\" ]]; then\n      CONFIGURE_OPTIONS+=(\"--enable-small\" \"--disable-doc\")\n      MANPAGES=0\n    fi\n    shift\n    ;;\n  *)\n    usage\n    exit 1\n    ;;\n  esac\ndone\n\nif [ -z \"$bflag\" ]; then\n  if [ -z \"$cflag\" ]; then\n    usage\n    exit 1\n  fi\n  exit 0\nfi\n\necho \"Using $MJOBS make jobs simultaneously.\"\n\nif $NONFREE_AND_GPL; then\n  echo \"With GPL and non-free codecs\"\nfi\n\n\nif [ -n \"$LDEXEFLAGS\" ]; then\n  echo \"Start the build in full static mode.\"\nfi\n\nmkdir -p \"$PACKAGES\"\nmkdir -p \"$WORKSPACE\"\n\nexport PATH=\"${WORKSPACE}/bin:$PATH\"\nPKG_CONFIG_PATH=\"$WORKSPACE/lib/pkgconfig:/usr/local/lib/x86_64-linux-gnu/pkgconfig:/usr/local/lib/pkgconfig\"\nPKG_CONFIG_PATH+=\":/usr/local/share/pkgconfig:/usr/lib/x86_64-linux-gnu/pkgconfig:/usr/lib/pkgconfig:/usr/share/pkgconfig:/usr/lib64/pkgconfig\"\nexport PKG_CONFIG_PATH\n\nif ! command_exists \"make\"; then\n  echo \"make not installed.\"\n  exit 1\nfi\n\nif ! command_exists \"g++\"; then\n  echo \"g++ not installed.\"\n  exit 1\nfi\n\nif ! command_exists \"curl\"; then\n  echo \"curl not installed.\"\n  exit 1\nfi\n\nif ! command_exists \"cargo\"; then\n  echo \"cargo not installed. rav1e encoder will not be available.\"\nfi\n\nif ! command_exists \"python3\"; then\n  echo \"python3 command not found. Lv2 filter and dav1d decoder will not be available.\"\nfi\n\n##\n## build tools\n##\n\nif build \"giflib\" \"5.2.1\"; then\n  download \"https://netcologne.dl.sourceforge.net/project/giflib/giflib-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    download \"https://sourceforge.net/p/giflib/bugs/_discuss/thread/4e811ad29b/c323/attachment/Makefile.patch\"\n    execute patch -p0 --forward \"${PACKAGES}/giflib-$CURRENT_PACKAGE_VERSION/Makefile\" \"${PACKAGES}/Makefile.patch\" || true\n  fi\n  cd \"${PACKAGES}\"/giflib-$CURRENT_PACKAGE_VERSION || exit\n  #multicore build disabled for this library\n  execute make\n  execute make PREFIX=\"${WORKSPACE}\" install\n  build_done \"giflib\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"pkg-config\" \"0.29.2\"; then\n  download \"https://pkgconfig.freedesktop.org/releases/pkg-config-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  \texport XXFLAGS +=\" -Wno-int-conversion\" # pkg-config 0.29.2 has a warning that is treated as an error\n  \texport CFLAGS +=\" -Wno-error=int-conversion\"\n  fi\n  execute ./configure --silent --prefix=\"${WORKSPACE}\" --with-pc-path=\"${WORKSPACE}\"/lib/pkgconfig --with-internal-glib\n  execute make -j $MJOBS\n  execute make install\n  build_done \"pkg-config\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"yasm\" \"1.3.0\"; then\n  download \"https://github.com/yasm/yasm/releases/download/v$CURRENT_PACKAGE_VERSION/yasm-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\"\n  execute make -j $MJOBS\n  execute make install\n  build_done \"yasm\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"nasm\" \"2.16.01\"; then\n  download \"https://www.nasm.us/pub/nasm/releasebuilds/$CURRENT_PACKAGE_VERSION/nasm-$CURRENT_PACKAGE_VERSION.tar.xz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n  build_done \"nasm\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"zlib\" \"1.3.1\"; then\n  download \"https://github.com/madler/zlib/releases/download/v$CURRENT_PACKAGE_VERSION/zlib-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --static --prefix=\"${WORKSPACE}\"\n  execute make -j $MJOBS\n  execute make install\n  build_done \"zlib\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"m4\" \"1.4.19\"; then\n  download \"https://ftp.gnu.org/gnu/m4/m4-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\"\n  execute make -j $MJOBS\n  execute make install\n  build_done \"m4\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"autoconf\" \"2.72\"; then\n  download \"https://ftp.gnu.org/gnu/autoconf/autoconf-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\"\n  execute make -j $MJOBS\n  execute make install\n  build_done \"autoconf\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"automake\" \"1.17\"; then\n  download \"https://ftp.gnu.org/gnu/automake/automake-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\"\n  execute make -j $MJOBS\n  execute make install\n  build_done \"automake\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"libtool\" \"2.4.7\"; then\n  download \"https://ftpmirror.gnu.org/libtool/libtool-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --enable-static --disable-shared\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libtool\" $CURRENT_PACKAGE_VERSION\nfi\n\nif $NONFREE_AND_GPL; then\n  if build \"gettext\" \"0.22.5\"; then\n    download \"https://ftpmirror.gnu.org/gettext/gettext-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    execute ./configure --prefix=\"${WORKSPACE}\" --enable-static --disable-shared\n    execute make -j $MJOBS\n    execute make install\n    build_done \"gettext\" $CURRENT_PACKAGE_VERSION\n  fi\n\n  if build \"openssl\" \"1.1.1w\"; then\n    download \"https://www.openssl.org/source/openssl-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    if $MACOS_SILICON; then\n      sed -n 's/\\(##### GNU Hurd\\)/\"darwin64-arm64-cc\" => { \\n    inherit_from     => [ \"darwin-common\", asm(\"aarch64_asm\") ],\\n    CFLAGS           => add(\"-Wall\"),\\n    cflags           => add(\"-arch arm64 \"),\\n    lib_cppflags     => add(\"-DL_ENDIAN\"),\\n    bn_ops           => \"SIXTY_FOUR_BIT_LONG\", \\n    perlasm_scheme   => \"macosx\", \\n}, \\n\\1/g' Configurations/10-main.conf\n      execute ./Configure --prefix=\"${WORKSPACE}\" no-shared no-asm darwin64-arm64-cc\n    else\n      execute ./config --prefix=\"${WORKSPACE}\" --openssldir=\"${WORKSPACE}\" --with-zlib-include=\"${WORKSPACE}\"/include/ --with-zlib-lib=\"${WORKSPACE}\"/lib no-shared zlib\n    fi\n    execute make -j $MJOBS\n    execute make install_sw\n    build_done \"openssl\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-openssl\")\nelse\n  if build \"gmp\" \"6.2.1\"; then\n    download \"https://ftp.gnu.org/gnu/gmp/gmp-$CURRENT_PACKAGE_VERSION.tar.xz\"\n    execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n    execute make -j $MJOBS\n    execute make install\n    build_done \"gmp\" $CURRENT_PACKAGE_VERSION\n  fi\n\n  if build \"nettle\" \"3.10\"; then\n    download \"https://ftp.gnu.org/gnu/nettle/nettle-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static --disable-openssl --disable-documentation --libdir=\"${WORKSPACE}\"/lib CPPFLAGS=\"${CFLAGS}\" LDFLAGS=\"${LDFLAGS}\"\n    execute make -j $MJOBS\n    execute make install\n    build_done \"nettle\" $CURRENT_PACKAGE_VERSION\n  fi\n\n  if [[ ! $ARCH == 'arm64' ]]; then\n    if build \"gnutls\" \"3.8.4\"; then\n      download \"https://www.gnupg.org/ftp/gcrypt/gnutls/v3.8/gnutls-$CURRENT_PACKAGE_VERSION.tar.xz\"\n      execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static --disable-doc --disable-tools --disable-cxx --disable-tests --disable-gtk-doc-html --disable-libdane --disable-nls --enable-local-libopts --disable-guile --with-included-libtasn1 --with-included-unistring --without-p11-kit CPPFLAGS=\"${CFLAGS}\" LDFLAGS=\"${LDFLAGS}\"\n      execute make -j $MJOBS\n      execute make install\n      build_done \"gnutls\" $CURRENT_PACKAGE_VERSION\n    fi\n    # CONFIGURE_OPTIONS+=(\"--enable-gmp\" \"--enable-gnutls\")\n  fi\nfi\n\nif build \"cmake\" \"3.31.0\"; then\n  CXXFLAGS_BACKUP=$CXXFLAGS\n  export CXXFLAGS+=\" -std=c++11\"\n  download \"https://github.com/Kitware/CMake/releases/download/v$CURRENT_PACKAGE_VERSION/cmake-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --parallel=\"${MJOBS}\" -- -DCMAKE_USE_OPENSSL=OFF\n  execute make -j $MJOBS\n  execute make install\n  build_done \"cmake\" $CURRENT_PACKAGE_VERSION\n  export CXXFLAGS=$CXXFLAGS_BACKUP\nfi\n\n##\n## video library\n##\n\nif command_exists \"python3\"; then\n  # dav1d needs meson and ninja along with nasm to be built\n  if command_exists \"pip3\"; then\n\n  #set variable meson and ninja installed to false\n  MESON_INSTALLED=false\n\n    #check if macOs and brew is available\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      if command_exists \"brew\"; then\n        brew install python-setuptools meson ninja\n          MESON_INSTALLED=true\n      fi\n    else\n      #check if meson and ninja are installed MESON_INSTALLED AND system is not MacOS\n      if ! $MESON_INSTALLED; then\n\n        # meson and ninja can be installed via pip3\n        execute pip3 install pip setuptools --quiet --upgrade --no-cache-dir --disable-pip-version-check\n        for r in meson ninja; do\n          if ! command_exists ${r}; then\n            execute pip3 install ${r} --quiet --upgrade --no-cache-dir --disable-pip-version-check\n          fi\n          export PATH=$PATH:~/Library/Python/3.9/bin\n        done\n      fi\n    fi\n\n  fi\n  if command_exists \"meson\"; then\n    if build \"dav1d\" \"1.5.0\"; then\n      download \"https://code.videolan.org/videolan/dav1d/-/archive/$CURRENT_PACKAGE_VERSION/dav1d-$CURRENT_PACKAGE_VERSION.tar.gz\"\n      make_dir build\n\n      CFLAGSBACKUP=$CFLAGS\n      if $MACOS_SILICON; then\n        export CFLAGS=\"-arch arm64\"\n      fi\n\n      execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n      execute ninja -C build\n      execute ninja -C build install\n\n      if $MACOS_SILICON; then\n        export CFLAGS=$CFLAGSBACKUP\n      fi\n\n      build_done \"dav1d\" $CURRENT_PACKAGE_VERSION\n    fi\n    CONFIGURE_OPTIONS+=(\"--enable-libdav1d\")\n  fi\nfi\n\nif build \"svtav1\" \"2.3.0\"; then\n  # Last known working commit which passed CI Tests from HEAD branch\n  download \"https://gitlab.com/AOMediaCodec/SVT-AV1/-/archive/v$CURRENT_PACKAGE_VERSION/SVT-AV1-v$CURRENT_PACKAGE_VERSION.tar.gz\" \"svtav1-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  cd \"${PACKAGES}\"/svtav1-$CURRENT_PACKAGE_VERSION//Build/linux || exit\n  execute cmake -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DENABLE_SHARED=off -DBUILD_SHARED_LIBS=OFF ../.. -G\"Unix Makefiles\" -DCMAKE_BUILD_TYPE=Release\n  execute make -j $MJOBS\n  execute make install\n  execute cp SvtAv1Enc.pc \"${WORKSPACE}/lib/pkgconfig/\"\n  build_done \"svtav1\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libsvtav1\")\n\n\nif command_exists \"cargo\"; then\n  if [[ ! \"$SKIPRAV1E\" == \"yes\" ]]; then\n    if build \"rav1e\" \"0.7.1\"; then\n      echo \"if you get the message 'cannot be built because it requires rustc x.xx or newer, try to run 'rustup update'\"\n      execute cargo install cargo-c\n      download \"https://github.com/xiph/rav1e/archive/refs/tags/v$CURRENT_PACKAGE_VERSION.tar.gz\"\n      export RUSTFLAGS=\"-C target-cpu=native\"  \n      execute cargo cinstall --prefix=\"${WORKSPACE}\" --libdir=lib --library-type=staticlib --crt-static --release\n      build_done \"rav1e\" $CURRENT_PACKAGE_VERSION\n    fi\n    CONFIGURE_OPTIONS+=(\"--enable-librav1e\")\n  fi\nfi\n\nif $NONFREE_AND_GPL; then\n\n  if build \"x264\" \"be4f0200\"; then\n    download \"https://code.videolan.org/videolan/x264/-/archive/$CURRENT_PACKAGE_VERSION/x264-$CURRENT_PACKAGE_VERSION.tar.gz\" \"x264-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    cd \"${PACKAGES}\"/x264-$CURRENT_PACKAGE_VERSION || exit\n\n    if [[ \"$OSTYPE\" == \"linux-gnu\" ]]; then\n      execute ./configure --prefix=\"${WORKSPACE}\" --enable-static --enable-pic CXXFLAGS=\"-fPIC ${CXXFLAGS}\"\n    else\n      execute ./configure --prefix=\"${WORKSPACE}\" --enable-static --enable-pic\n    fi\n\n    execute make -j $MJOBS\n    execute make install\n    execute make install-lib-static\n\n    build_done \"x264\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libx264\")\nfi\n\nif $NONFREE_AND_GPL; then\n  if build \"x265\" \"4.0\"; then\n    download \"https://bitbucket.org/multicoreware/x265_git/downloads/x265_$CURRENT_PACKAGE_VERSION.tar.gz\" \"x265-$CURRENT_PACKAGE_VERSION.tar.gz\" # This is actually 3.4 if looking at x265Version.txt\n    cd build/linux || exit\n    rm -rf 8bit 10bit 12bit 2>/dev/null\n    mkdir -p 8bit 10bit 12bit\n    cd 12bit || exit\n    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF -DMAIN12=ON\n    execute make -j $MJOBS\n    cd ../10bit || exit\n    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DHIGH_BIT_DEPTH=ON -DENABLE_HDR10_PLUS=ON -DEXPORT_C_API=OFF -DENABLE_CLI=OFF\n    execute make -j $MJOBS\n    cd ../8bit || exit\n    ln -sf ../10bit/libx265.a libx265_main10.a\n    ln -sf ../12bit/libx265.a libx265_main12.a\n    execute cmake ../../../source -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DENABLE_SHARED=OFF -DBUILD_SHARED_LIBS=OFF -DEXTRA_LIB=\"x265_main10.a;x265_main12.a;-ldl\" -DEXTRA_LINK_FLAGS=-L. -DLINKED_10BIT=ON -DLINKED_12BIT=ON\n    execute make -j $MJOBS\n\n    mv libx265.a libx265_main.a\n\n    if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n      execute \"${MACOS_LIBTOOL}\" -static -o libx265.a libx265_main.a libx265_main10.a libx265_main12.a 2>/dev/null\n    else\n      execute ar -M <<EOF\nCREATE libx265.a\nADDLIB libx265_main.a\nADDLIB libx265_main10.a\nADDLIB libx265_main12.a\nSAVE\nEND\nEOF\n    fi\n\n    execute make install\n\n    if [ -n \"$LDEXEFLAGS\" ]; then\n      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' \"${WORKSPACE}/lib/pkgconfig/x265.pc\" # The -i.backup is intended and required on MacOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux\n    fi\n\n    build_done \"x265\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libx265\")\nfi\n\nif build \"libvpx\" \"1.15.0\"; then\n  download \"https://github.com/webmproject/libvpx/archive/refs/tags/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"libvpx-$CURRENT_PACKAGE_VERSION.tar.gz\"\n\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    echo \"Applying Darwin patch\"\n    sed \"s/,--version-script//g\" build/make/Makefile >build/make/Makefile.patched\n    sed \"s/-Wl,--no-undefined -Wl,-soname/-Wl,-undefined,error -Wl,-install_name/g\" build/make/Makefile.patched >build/make/Makefile\n  fi\n\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-unit-tests --disable-shared --disable-examples --as=yasm --enable-vp9-highbitdepth\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"libvpx\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libvpx\")\n\nif $NONFREE_AND_GPL; then\n  if build \"xvidcore\" \"1.3.7\"; then\n    download \"https://downloads.xvid.com/downloads/xvidcore-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    cd build/generic || exit\n    execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n    execute make -j $MJOBS\n    execute make install\n\n    if [[ -f ${WORKSPACE}/lib/libxvidcore.4.dylib ]]; then\n      execute rm \"${WORKSPACE}/lib/libxvidcore.4.dylib\"\n    fi\n\n    if [[ -f ${WORKSPACE}/lib/libxvidcore.so ]]; then\n      execute rm \"${WORKSPACE}\"/lib/libxvidcore.so*\n    fi\n\n    build_done \"xvidcore\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libxvid\")\nfi\n\nif $NONFREE_AND_GPL; then\n  if build \"vid_stab\" \"1.1.1\"; then\n    download \"https://github.com/georgmartius/vid.stab/archive/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"vid.stab-$CURRENT_PACKAGE_VERSION.tar.gz\"\n\n    if $MACOS_SILICON; then\n      curl -L --silent -o \"$PACKAGES/vid.stab-$CURRENT_PACKAGE_VERSION/fix_cmake_quoting.patch\" \"https://raw.githubusercontent.com/Homebrew/formula-patches/5bf1a0e0cfe666ee410305cece9c9c755641bfdf/libvidstab/fix_cmake_quoting.patch\"\n      patch -p1 <fix_cmake_quoting.patch\n    fi\n\n    execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DUSE_OMP=OFF -DENABLE_SHARED=off .\n    execute make\n    execute make install\n\n    build_done \"vid_stab\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libvidstab\")\nfi\n\nif build \"av1\" \"d6f30ae474dd6c358f26de0a0fc26a0d7340a84c\"; then\n  #  d6f30ae474dd6c358f26de0a0fc26a0d7340a84c == v3.11.0\n  download \"https://aomedia.googlesource.com/aom/+archive/$CURRENT_PACKAGE_VERSION.tar.gz\" \"av1.tar.gz\" \"av1\"\n  make_dir \"$PACKAGES\"/aom_build\n  cd \"$PACKAGES\"/aom_build || exit\n  if $MACOS_SILICON; then\n    execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DCMAKE_INSTALL_LIBDIR=lib -DCONFIG_RUNTIME_CPU_DETECT=0 \"$PACKAGES\"/av1\n  else\n    execute cmake -DENABLE_TESTS=0 -DENABLE_EXAMPLES=0 -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DCMAKE_INSTALL_LIBDIR=lib \"$PACKAGES\"/av1\n  fi\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"av1\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libaom\")\n\nif build \"zimg\" \"3.0.5\"; then\n  download \"https://github.com/sekrit-twc/zimg/archive/refs/tags/release-$CURRENT_PACKAGE_VERSION.tar.gz\" \"zimg-$CURRENT_PACKAGE_VERSION.tar.gz\" \"zimg\"\n  cd zimg-release-$CURRENT_PACKAGE_VERSION || exit\n  execute \"${WORKSPACE}/bin/libtoolize\" -i -f -q\n  execute ./autogen.sh --prefix=\"${WORKSPACE}\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --enable-static --disable-shared\n  execute make -j $MJOBS\n  execute make install\n  build_done \"zimg\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libzimg\")\n\n##\n## audio library\n##\nif ! $DISABLE_LV2 ; then\n\n  if command_exists \"python3\"; then\n  \n    if command_exists \"meson\"; then\n  \n      if build \"lv2\" \"1.18.10\"; then\n        download \"https://lv2plug.in/spec/lv2-$CURRENT_PACKAGE_VERSION.tar.xz\" \"lv2-$CURRENT_PACKAGE_VERSION.tar.xz\"\n        execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n        execute ninja -C build\n        execute ninja -C build install\n        build_done \"lv2\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"waflib\" \"b600c92\"; then\n        download \"https://gitlab.com/drobilla/autowaf/-/archive/$CURRENT_PACKAGE_VERSION/autowaf-$CURRENT_PACKAGE_VERSION.tar.gz\" \"autowaf.tar.gz\"\n        build_done \"waflib\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"serd\" \"0.30.16\"; then\n        download \"https://gitlab.com/drobilla/serd/-/archive/v$CURRENT_PACKAGE_VERSION/serd-v$CURRENT_PACKAGE_VERSION.tar.gz\" \"serd-v$CURRENT_PACKAGE_VERSION.tar.gz\"\n        execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n        execute ninja -C build\n        execute ninja -C build install\n        build_done \"serd\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"pcre\" \"8.45\"; then\n        download \"https://altushost-swe.dl.sourceforge.net/project/pcre/pcre/$CURRENT_PACKAGE_VERSION/pcre-$CURRENT_PACKAGE_VERSION.tar.gz\" \"pcre-$CURRENT_PACKAGE_VERSION.tar.gz\"\n        execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n        execute make -j $MJOBS\n        execute make install\n        build_done \"pcre\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"sord\" \"0.16.14\"; then\n        download \"https://gitlab.com/drobilla/sord/-/archive/v$CURRENT_PACKAGE_VERSION/sord-v$CURRENT_PACKAGE_VERSION.tar.gz\" \"sord-v$CURRENT_PACKAGE_VERSION.tar.gz\"\n        execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n        execute ninja -C build\n        execute ninja -C build install\n        build_done \"sord\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"sratom\" \"0.6.14\"; then\n        download \"https://gitlab.com/lv2/sratom/-/archive/v$CURRENT_PACKAGE_VERSION/sratom-v$CURRENT_PACKAGE_VERSION.tar.gz\" \"sratom-v$CURRENT_PACKAGE_VERSION.tar.gz\"\n        execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n        execute ninja -C build\n        execute ninja -C build install\n        build_done \"sratom\" $CURRENT_PACKAGE_VERSION\n      fi\n      if build \"lilv\" \"0.24.20\"; then\n        download \"https://gitlab.com/lv2/lilv/-/archive/v$CURRENT_PACKAGE_VERSION/lilv-v$CURRENT_PACKAGE_VERSION.tar.gz\" \"lilv-v$CURRENT_PACKAGE_VERSION.tar.gz\"\n        execute meson build --prefix=\"${WORKSPACE}\" --buildtype=release --default-library=static --libdir=\"${WORKSPACE}\"/lib\n        execute ninja -C build\n        execute ninja -C build install\n        build_done \"lilv\" $CURRENT_PACKAGE_VERSION\n      fi\n      CFLAGS+=\" -I$WORKSPACE/include/lilv-0\"\n  \n      CONFIGURE_OPTIONS+=(\"--enable-lv2\")\n  \n    fi\n  fi\nfi\n\nif build \"opencore\" \"0.1.6\"; then\n  download \"https://deac-ams.dl.sourceforge.net/project/opencore-amr/opencore-amr/opencore-amr-$CURRENT_PACKAGE_VERSION.tar.gz\" \"opencore-amr-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"opencore\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libopencore_amrnb\" \"--enable-libopencore_amrwb\")\n\nif build \"lame\" \"3.100\"; then\n  download \"https://sourceforge.net/projects/lame/files/lame/$CURRENT_PACKAGE_VERSION/lame-$CURRENT_PACKAGE_VERSION.tar.gz/download?use_mirror=gigenet\" \"lame-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"lame\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libmp3lame\")\n\nif build \"opus\" \"1.5.2\"; then\n  download \"https://downloads.xiph.org/releases/opus/opus-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"opus\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libopus\")\n\nif build \"libogg\" \"1.3.5\"; then\n  download \"https://ftp.osuosl.org/pub/xiph/releases/ogg/libogg-$CURRENT_PACKAGE_VERSION.tar.xz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libogg\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"libvorbis\" \"1.3.7\"; then\n  download \"https://ftp.osuosl.org/pub/xiph/releases/vorbis/libvorbis-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  sed \"s/-force_cpusubtype_ALL//g\" configure.ac >configure.ac.patched\n  rm configure.ac\n  mv configure.ac.patched configure.ac\n  execute ./autogen.sh --prefix=\"${WORKSPACE}\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --with-ogg-libraries=\"${WORKSPACE}\"/lib --with-ogg-includes=\"${WORKSPACE}\"/include/ --enable-static --disable-shared --disable-oggtest\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"libvorbis\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libvorbis\")\n\nif build \"libtheora\" \"1.1.1\"; then\n  download \"https://ftp.osuosl.org/pub/xiph/releases/theora/libtheora-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  sed \"s/-fforce-addr//g\" configure >configure.patched\n  chmod +x configure.patched\n  mv configure.patched configure\n\n  if ! $MACOS_SILICON; then\n    ##BEGIN CONFIG.GUESS PATCH -- Updating config.guess file. Which allowed me to compile on aarch64 (ARMv8) [linux kernel 4.9 Ubuntu 20.04]\n    rm config.guess\n    curl -L --silent -o \"config.guess\" \"https://raw.githubusercontent.com/gcc-mirror/gcc/master/config.guess\"\n    chmod +x config.guess\n    ##END OF CONFIG.GUESS PATCH\n  fi\n\n  execute ./configure --prefix=\"${WORKSPACE}\" --with-ogg-libraries=\"${WORKSPACE}\"/lib --with-ogg-includes=\"${WORKSPACE}\"/include/ --with-vorbis-libraries=\"${WORKSPACE}\"/lib --with-vorbis-includes=\"${WORKSPACE}\"/include/ --enable-static --disable-shared --disable-oggtest --disable-vorbistest --disable-examples --disable-asm --disable-spec\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"libtheora\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libtheora\")\n\nif $NONFREE_AND_GPL; then\n  if build \"fdk_aac\" \"2.0.3\"; then\n    download \"https://sourceforge.net/projects/opencore-amr/files/fdk-aac/fdk-aac-$CURRENT_PACKAGE_VERSION.tar.gz/download?use_mirror=gigenet\" \"fdk-aac-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static --enable-pic\n    execute make -j $MJOBS\n    execute make install\n\n    build_done \"fdk_aac\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libfdk-aac\")\nfi\n\n##\n## image library\n##\n\nif build \"libtiff\" \"4.7.0\"; then\n  download \"https://download.osgeo.org/libtiff/tiff-$CURRENT_PACKAGE_VERSION.tar.xz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static --disable-dependency-tracking --disable-lzma --disable-webp --disable-zstd --without-x\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libtiff\" $CURRENT_PACKAGE_VERSION\nfi\nif build \"libpng\" \"1.6.44\"; then\n  download \"https://sourceforge.net/projects/libpng/files/libpng16/$CURRENT_PACKAGE_VERSION/libpng-$CURRENT_PACKAGE_VERSION.tar.gz\" \"libpng-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  export LDFLAGS=\"${LDFLAGS}\"\n  export CPPFLAGS=\"${CFLAGS}\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libpng\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"libjxl\" \"0.11.0\"; then\n  download \"https://github.com/libjxl/libjxl/archive/refs/tags/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"libjxl-$CURRENT_PACKAGE_VERSION.tar.gz\"\n# currently needed to fix linking of static builds in non-C++ applications\n  sed \"s/-ljxl_threads/-ljxl_threads @JPEGXL_THREADS_PUBLIC_LIBS@/g\" lib/threads/libjxl_threads.pc.in >lib/threads/libjxl_threads.pc.in.patched\n  rm lib/threads/libjxl_threads.pc.in\n  mv lib/threads/libjxl_threads.pc.in.patched lib/threads/libjxl_threads.pc.in\n  sed 's/set(JPEGXL_REQUIRES_TYPE \"Requires\")/set(JPEGXL_REQUIRES_TYPE \"Requires\")\\'$'\\n''  set(JPEGXL_THREADS_PUBLIC_LIBS \"-lm ${PKGCONFIG_CXX_LIB}\")/g' lib/jxl_threads.cmake >lib/jxl_threads.cmake.patched\n  rm lib/jxl_threads.cmake\n  mv lib/jxl_threads.cmake.patched lib/jxl_threads.cmake\n  execute ./deps.sh\n  execute cmake -DBUILD_SHARED_LIBS=OFF -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=off -DENABLE_STATIC=ON -DCMAKE_BUILD_TYPE=Release -DJPEGXL_ENABLE_BENCHMARK=OFF -DJPEGXL_ENABLE_DOXYGEN=OFF -DJPEGXL_ENABLE_MANPAGES=OFF -DJPEGXL_ENABLE_JPEGLI_LIBJPEG=OFF -DJPEGXL_ENABLE_JPEGLI=ON -DJPEGXL_TEST_TOOLS=OFF -DJPEGXL_ENABLE_JNI=OFF -DBUILD_TESTING=OFF DJPEGXL_ENABLE_SKCMS=OFF .\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libjxl\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libjxl\")\n\nif build \"libwebp\" \"1.4.0\"; then\n  # libwebp can fail to compile on Ubuntu if these flags were left set to CFLAGS\n  CPPFLAGS=\n  download \"https://storage.googleapis.com/downloads.webmproject.org/releases/webp/libwebp-$CURRENT_PACKAGE_VERSION.tar.gz\" \"libwebp-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  make_dir build\n  cd build || exit\n  execute cmake -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DWEBP_BUILD_CWEBP=OFF -DWEBP_BUILD_DWEBP=OFF -DWEBP_BUILD_GIF2WEBP=OFF -DWEBP_BUILD_IMG2WEBP=OFF -DWEBP_BUILD_VWEBP=OFF ../\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"libwebp\" $CURRENT_PACKAGE_VERSION\nfi\nCONFIGURE_OPTIONS+=(\"--enable-libwebp\")\n\n##\n## other library\n##\n\nif build \"libsdl\" \"2.30.1\"; then\n  download \"https://github.com/libsdl-org/SDL/releases/download/release-$CURRENT_PACKAGE_VERSION/SDL2-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n\n  build_done \"libsdl\" $CURRENT_PACKAGE_VERSION\nfi\n\nif build \"FreeType2\" \"2.13.3\"; then\n  download \"https://downloads.sourceforge.net/freetype/freetype-$CURRENT_PACKAGE_VERSION.tar.xz\"\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  execute make -j $MJOBS\n  execute make install\n  build_done \"FreeType2\" $CURRENT_PACKAGE_VERSION\nfi\n\nCONFIGURE_OPTIONS+=(\"--enable-libfreetype\")\n\nif $NONFREE_AND_GPL; then\n  if build \"srt\" \"1.5.4\"; then\n    download \"https://github.com/Haivision/srt/archive/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"srt-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    export OPENSSL_ROOT_DIR=\"${WORKSPACE}\"\n    export OPENSSL_LIB_DIR=\"${WORKSPACE}\"/lib\n    export OPENSSL_INCLUDE_DIR=\"${WORKSPACE}\"/include/\n    execute cmake . -DCMAKE_INSTALL_PREFIX=\"${WORKSPACE}\" -DCMAKE_INSTALL_LIBDIR=lib -DCMAKE_INSTALL_BINDIR=bin -DCMAKE_INSTALL_INCLUDEDIR=include -DENABLE_SHARED=OFF -DENABLE_STATIC=ON -DENABLE_APPS=OFF -DUSE_STATIC_LIBSTDCXX=ON\n    execute make install\n\n    if [ -n \"$LDEXEFLAGS\" ]; then\n      sed -i.backup 's/-lgcc_s/-lgcc_eh/g' \"${WORKSPACE}\"/lib/pkgconfig/srt.pc # The -i.backup is intended and required on MacOS: https://stackoverflow.com/questions/5694228/sed-in-place-flag-that-works-both-on-mac-bsd-and-linux\n    fi\n\n    build_done \"srt\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libsrt\")\n\n  if build \"zvbi\" \"0.2.42\"; then\n    download \"https://github.com/zapping-vbi/zvbi/archive/refs/tags/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"zvbi-$CURRENT_PACKAGE_VERSION.tar.gz\"\n    execute ./autogen.sh --prefix=\"${WORKSPACE}\"\n    execute ./configure CFLAGS=\"-I${WORKSPACE}/include/libpng16 ${CFLAGS}\" --prefix=\"${WORKSPACE}\" --enable-static --disable-shared\n    execute make -j $MJOBS\n    execute make install\n    build_done \"zvbi\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-libzvbi\")\nfi\n\n##\n## zmq library\n##\n\nif build \"libzmq\" \"4.3.5\"; then\n  download \"https://github.com/zeromq/libzmq/releases/download/v$CURRENT_PACKAGE_VERSION/zeromq-$CURRENT_PACKAGE_VERSION.tar.gz\"\n  if [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n    export XML_CATALOG_FILES=/usr/local/etc/xml/catalog \n  fi\n  execute ./configure --prefix=\"${WORKSPACE}\" --disable-shared --enable-static\n  sed \"s/stats_proxy stats = {0}/stats_proxy stats = {{{0, 0}, {0, 0}}, {{0, 0}, {0, 0}}}/g\" src/proxy.cpp >src/proxy.cpp.patched\n  rm src/proxy.cpp\n  mv src/proxy.cpp.patched src/proxy.cpp\n  execute make -j $MJOBS\n  execute make install\n  build_done \"libzmq\" $CURRENT_PACKAGE_VERSION\n  CONFIGURE_OPTIONS+=(\"--enable-libzmq\")\nfi\n\n##\n## HWaccel library\n##\n\nif [[ \"$OSTYPE\" == \"linux-gnu\" ]]; then\n  if command_exists \"nvcc\"; then\n    if build \"nv-codec\" \"11.1.5.3\"; then\n      download \"https://github.com/FFmpeg/nv-codec-headers/releases/download/n$CURRENT_PACKAGE_VERSION/nv-codec-headers-$CURRENT_PACKAGE_VERSION.tar.gz\"\n      execute make PREFIX=\"${WORKSPACE}\"\n      execute make PREFIX=\"${WORKSPACE}\" install\n      build_done \"nv-codec\" $CURRENT_PACKAGE_VERSION\n    fi\n    CFLAGS+=\" -I/usr/local/cuda/include\"\n    LDFLAGS+=\" -L/usr/local/cuda/lib64\"\n    CONFIGURE_OPTIONS+=(\"--enable-cuda-nvcc\" \"--enable-cuvid\" \"--enable-nvdec\" \"--enable-nvenc\" \"--enable-cuda-llvm\" \"--enable-ffnvcodec\")\n\n    if [ -z \"$LDEXEFLAGS\" ]; then\n      CONFIGURE_OPTIONS+=(\"--enable-libnpp\") # Only libnpp cannot be statically linked.\n    fi\n    if [ -z \"$CUDA_COMPUTE_CAPABILITY\" ]; then\n      # Set default value if no compute capability was found\n      # Note that multi-architecture builds are not supported in ffmpeg\n      # see https://patchwork.ffmpeg.org/comment/62905/\n      export CUDA_COMPUTE_CAPABILITY=52\n    fi\n    CONFIGURE_OPTIONS+=(\"--nvccflags=-gencode arch=compute_$CUDA_COMPUTE_CAPABILITY,code=sm_$CUDA_COMPUTE_CAPABILITY -O2\")\n  else\n    CONFIGURE_OPTIONS+=(\"--disable-ffnvcodec\")\n  fi\n\n  # Vaapi doesn't work well with static links FFmpeg.\n  if [ -z \"$LDEXEFLAGS\" ]; then\n    # If the libva development SDK is installed, enable vaapi.\n    if library_exists \"libva\"; then\n      if build \"vaapi\" \"1\"; then\n        build_done \"vaapi\" \"1\"\n      fi\n      CONFIGURE_OPTIONS+=(\"--enable-vaapi\")\n    fi\n  fi\n\n  if build \"amf\" \"1.4.35\"; then\n    download \"https://github.com/GPUOpen-LibrariesAndSDKs/AMF/archive/refs/tags/v$CURRENT_PACKAGE_VERSION.tar.gz\" \"AMF-$CURRENT_PACKAGE_VERSION.tar.gz\" \"AMF-$CURRENT_PACKAGE_VERSION\"\n    execute rm -rf \"${WORKSPACE}/include/AMF\"\n    execute mkdir -p \"${WORKSPACE}/include/AMF\"\n    execute cp -r \"${PACKAGES}\"/AMF-$CURRENT_PACKAGE_VERSION/AMF-$CURRENT_PACKAGE_VERSION/amf/public/include/* \"${WORKSPACE}/include/AMF/\"\n    build_done \"amf\" $CURRENT_PACKAGE_VERSION\n  fi\n  CONFIGURE_OPTIONS+=(\"--enable-amf\")\nfi\n\n##\n## FFmpeg\n##\n\nEXTRA_VERSION=\"\"\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  EXTRA_VERSION=\"${FFMPEG_VERSION}\"\nfi\n\nif [ -d \"$CWD/.git\" ]; then\n  echo -e \"\\nTemporarily moving .git dir to .git.bak to workaround ffmpeg build bug\" #causing ffmpeg version number to be wrong\n  mv \"$CWD/.git\" \"$CWD/.git.bak\"\n  # if build fails below, .git will remain in the wrong place...\nfi\n\nbuild \"ffmpeg\" \"$FFMPEG_VERSION\"\ndownload \"https://github.com/FFmpeg/FFmpeg/archive/refs/heads/release/$FFMPEG_VERSION.tar.gz\" \"FFmpeg-release-$FFMPEG_VERSION.tar.gz\"\n# shellcheck disable=SC2086\nexecute ./configure \"${CONFIGURE_OPTIONS[@]}\" \\\n  --disable-debug \\\n  --disable-shared \\\n  --enable-pthreads \\\n  --enable-static \\\n  --enable-version3 \\\n  --extra-cflags=\"${CFLAGS}\" \\\n  --extra-ldexeflags=\"${LDEXEFLAGS}\" \\\n  --extra-ldflags=\"${LDFLAGS}\" \\\n  --extra-libs=\"${EXTRALIBS}\" \\\n  --pkgconfigdir=\"$WORKSPACE/lib/pkgconfig\" \\\n  --pkg-config-flags=\"--static\" \\\n  --prefix=\"${WORKSPACE}\" \\\n  --extra-version=\"${EXTRA_VERSION}\"\n\nexecute make -j $MJOBS\nexecute make install\n\nif [ -d \"$CWD/.git.bak\" ]; then\n  mv \"$CWD/.git.bak\" \"$CWD/.git\"\nfi\n\nINSTALL_FOLDER=\"/usr\"  # not recommended, overwrites system ffmpeg package\nif [[ \"$OSTYPE\" == \"darwin\"* ]]; then\n  INSTALL_FOLDER=\"/usr/local\"\nelse\n  if [ -d \"$HOME/.local\" ]; then  # systemd-standard user path\n    INSTALL_FOLDER=\"$HOME/.local\"\n  elif [ -d \"/usr/local\" ]; then\n    INSTALL_FOLDER=\"/usr/local\"\n  fi\nfi\n\nverify_binary_type\n\necho \"\"\necho \"Building done. The following binaries can be found here:\"\necho \"- ffmpeg: $WORKSPACE/bin/ffmpeg\"\necho \"- ffprobe: $WORKSPACE/bin/ffprobe\"\necho \"- ffplay: $WORKSPACE/bin/ffplay\"\necho \"\"\n\nINSTALL_NOW=0\nif [[ \"$AUTOINSTALL\" == \"yes\" ]]; then\n  INSTALL_NOW=1\nelif [[ ! \"$SKIPINSTALL\" == \"yes\" ]]; then\n  read -r -p \"Install these binaries to your $INSTALL_FOLDER folder? Existing binaries will be replaced. [Y/n] \" response\n  case $response in\n    \"\" | [yY][eE][sS] | [yY])\n      INSTALL_NOW=1\n    ;;\n  esac\nfi\n\nif [ \"$INSTALL_NOW\" = 1 ]; then\n  if command_exists \"sudo\" && [[ $INSTALL_FOLDER == /usr* ]]; then\n    SUDO=sudo\n  fi\n  $SUDO cp \"$WORKSPACE/bin/ffmpeg\" \"$INSTALL_FOLDER/bin/ffmpeg\"\n  $SUDO cp \"$WORKSPACE/bin/ffprobe\" \"$INSTALL_FOLDER/bin/ffprobe\"\n  $SUDO cp \"$WORKSPACE/bin/ffplay\" \"$INSTALL_FOLDER/bin/ffplay\"\n  if [ $MANPAGES = 1 ]; then\n    $SUDO mkdir -p \"$INSTALL_FOLDER/share/man/man1\"\n    $SUDO cp \"$WORKSPACE/share/man/man1\"/ff* \"$INSTALL_FOLDER/share/man/man1\"\n    if command_exists \"mandb\"; then\n      $SUDO mandb -q\n    fi\n  fi\n  echo \"Done. FFmpeg is now installed to your system.\"\nfi\n\nexit 0\n"
        },
        {
          "name": "cuda-ubuntu.dockerfile",
          "type": "blob",
          "size": 2.224609375,
          "content": "ARG CUDAVER=12.6.2\nARG UBUNTUVER=22.04\n\nFROM nvidia/cuda:${CUDAVER}-devel-ubuntu${UBUNTUVER} AS build\n\nENV DEBIAN_FRONTEND=noninteractive\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install build-essential curl ca-certificates libva-dev \\\n        python3 python-is-python3 ninja-build meson git curl \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* \\\n    && update-ca-certificates\n\n# build and move deviceQuery to /usr/bin\nRUN mkdir -p /code && \\\n    git clone --depth 1 https://github.com/NVIDIA/cuda-samples.git /code/cuda-samples && \\\n    cd /code/cuda-samples/Samples/1_Utilities/deviceQuery && \\\n    make && \\\n    mv deviceQuery /usr/local/bin\n\nWORKDIR /app\nCOPY ./build-ffmpeg /app/build-ffmpeg\n\nRUN CUDA_COMPUTE_CAPABILITY=$(deviceQuery | grep Capability | head -n 1 | awk 'END {print $NF}' | tr -d '.') SKIPINSTALL=yes /app/build-ffmpeg --build --enable-gpl-and-non-free\n\nFROM ubuntu:${UBUNTUVER} AS release\n\nENV DEBIAN_FRONTEND=noninteractive\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video\n\n# install va-driver\nRUN apt-get update \\\n    && apt-get -y install libva-drm2 \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/*\n\n# Copy libnpp\nCOPY --from=build /usr/local/cuda-12.6/targets/x86_64-linux/lib/libnppc.so /lib/x86_64-linux-gnu/libnppc.so.12\nCOPY --from=build /usr/local/cuda-12.6/targets/x86_64-linux/lib/libnppig.so /lib/x86_64-linux-gnu/libnppig.so.12\nCOPY --from=build /usr/local/cuda-12.6/targets/x86_64-linux/lib/libnppicc.so /lib/x86_64-linux-gnu/libnppicc.so.12\nCOPY --from=build /usr/local/cuda-12.6/targets/x86_64-linux/lib/libnppidei.so /lib/x86_64-linux-gnu/libnppidei.so.12\nCOPY --from=build /usr/local/cuda-12.6/targets/x86_64-linux/lib/libnppif.so /lib/x86_64-linux-gnu/libnppif.so.12\n\n# Copy ffmpeg\nCOPY --from=build /app/workspace/bin/ffmpeg /usr/bin/ffmpeg\nCOPY --from=build /app/workspace/bin/ffprobe /usr/bin/ffprobe\nCOPY --from=build /app/workspace/bin/ffplay /usr/bin/ffplay\n\n# Check shared library\nRUN ldd /usr/bin/ffmpeg\nRUN ldd /usr/bin/ffprobe\nRUN ldd /usr/bin/ffplay\n\nCMD         [\"--help\"]\nENTRYPOINT  [\"/usr/bin/ffmpeg\"]\n"
        },
        {
          "name": "export.dockerfile",
          "type": "blob",
          "size": 0.5869140625,
          "content": "ARG DIST=ubuntu\n\nFROM scratch\n\n# Copy libnpp\nCOPY --from=ffmpeg:cuda-${DIST} /lib/x86_64-linux-gnu/libnppc.so.12 /lib/libnppc.so.12\nCOPY --from=ffmpeg:cuda-${DIST} /lib/x86_64-linux-gnu/libnppig.so.12 /lib/libnppig.so.12\nCOPY --from=ffmpeg:cuda-${DIST} /lib/x86_64-linux-gnu/libnppicc.so.12 /lib/libnppicc.so.12\nCOPY --from=ffmpeg:cuda-${DIST} /lib/x86_64-linux-gnu/libnppidei.so.12 /lib/libnppidei.so.12\n\n# Copy ffmpeg\nCOPY --from=ffmpeg:cuda-${DIST} /usr/bin/ffmpeg /bin/ffmpeg\nCOPY --from=ffmpeg:cuda-${DIST} /usr/bin/ffprobe /bin/ffprobe\nCOPY --from=ffmpeg:cuda-${DIST} /usr/bin/ffplay /bin/ffplay"
        },
        {
          "name": "ffmpeg-build-script.png",
          "type": "blob",
          "size": 18.935546875,
          "content": null
        },
        {
          "name": "full-static.dockerfile",
          "type": "blob",
          "size": 0.9716796875,
          "content": "FROM ubuntu:24.04 AS build\n\nENV DEBIAN_FRONTEND=noninteractive\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video\n\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install build-essential curl ca-certificates python3 \\\n    python-is-python3 ninja-build meson git \\\n    && apt-get clean; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* /usr/share/doc/* \\\n    && update-ca-certificates\n\nWORKDIR /app\nCOPY ./build-ffmpeg /app/build-ffmpeg\n\nRUN AUTOINSTALL=yes /app/build-ffmpeg --build --full-static\n\n# Check shared library\nRUN ! ldd /app/workspace/bin/ffmpeg\nRUN ! ldd /app/workspace/bin/ffprobe\nRUN ! ldd /app/workspace/bin/ffplay\n\nFROM scratch\n\nENV NVIDIA_VISIBLE_DEVICES=all\nENV NVIDIA_DRIVER_CAPABILITIES=compute,utility,video\n\n# Copy ffmpeg\nCOPY --from=build /app/workspace/bin/ffmpeg /ffmpeg\nCOPY --from=build /app/workspace/bin/ffprobe /ffprobe\nCOPY --from=build /app/workspace/bin/ffplay /ffplay\n\nCMD         [\"--help\"]\nENTRYPOINT  [\"/ffmpeg\"]\n"
        },
        {
          "name": "web-install-gpl-and-non-free.sh",
          "type": "blob",
          "size": 0.8232421875,
          "content": "#!/bin/bash\n# Helper script to download and run the build-ffmpeg script.\n\nmake_dir () {\n    if [ ! -d $1 ]; then\n        if ! mkdir $1; then            \n            printf \"\\n Failed to create dir %s\" \"$1\";\n            exit 1\n        fi\n    fi    \n}\n\ncommand_exists() {\n    if ! [[ -x $(command -v \"$1\") ]]; then\n        return 1\n    fi\n\n    return 0\n}\n\nTARGET='ffmpeg-build'\n\nif ! command_exists \"curl\"; then\n    echo \"curl not installed.\";\n    exit 1\nfi\n\necho \"ffmpeg-build-script-downloader v0.1\"\necho \"=========================================\"\necho \"\"\n\necho \"First we create the ffmpeg build directory $TARGET\"\nmake_dir $TARGET\ncd $TARGET\n\necho \"Now we download and execute the build script\"\necho \"\"\n\nbash <(curl -s https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/build-ffmpeg) --build --enable-gpl-and-non-free\n\n"
        },
        {
          "name": "web-install.sh",
          "type": "blob",
          "size": 0.7978515625,
          "content": "#!/bin/bash\n# Helper script to download and run the build-ffmpeg script.\n\nmake_dir () {\n    if [ ! -d $1 ]; then\n        if ! mkdir $1; then            \n            printf \"\\n Failed to create dir %s\" \"$1\";\n            exit 1\n        fi\n    fi    \n}\n\ncommand_exists() {\n    if ! [[ -x $(command -v \"$1\") ]]; then\n        return 1\n    fi\n\n    return 0\n}\n\nTARGET='ffmpeg-build'\n\nif ! command_exists \"curl\"; then\n    echo \"curl not installed.\";\n    exit 1\nfi\n\necho \"ffmpeg-build-script-downloader v0.1\"\necho \"=========================================\"\necho \"\"\n\necho \"First we create the ffmpeg build directory $TARGET\"\nmake_dir $TARGET\ncd $TARGET\n\necho \"Now we download and execute the build script\"\necho \"\"\n\nbash <(curl -s https://raw.githubusercontent.com/markus-perl/ffmpeg-build-script/master/build-ffmpeg) --build\n\n"
        }
      ]
    }
  ]
}