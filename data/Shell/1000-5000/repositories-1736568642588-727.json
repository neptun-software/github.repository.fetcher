{
  "metadata": {
    "timestamp": 1736568642588,
    "page": 727,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjcyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "myxuchangbin/dnsmasq_sniproxy_install",
      "stars": 1318,
      "defaultBranch": "master",
      "files": [
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.775390625,
          "content": "# Dnsmasq SNIproxy One-click Install\n\n### 脚本概述：\n\n* 原理简述：利用[Dnsmasq](http://thekelleys.org.uk/dnsmasq/doc.html)的DNS功能，将特定网站的DNS解析重定向到[SNIproxy](https://github.com/dlundquist/sniproxy)反向代理。\n\n* 用途：让访问流媒体受限的VPS突破限制，前提是要有一个能流媒体的VPS。\n\n* 特性：脚本默认解锁`Netflix Hulu HBO`[等](https://github.com/myxuchangbin/dnsmasq_sniproxy_install/blob/master/proxy-domains.txt)，如需增删流媒体域名请编辑文件`/etc/dnsmasq.d/custom_netflix.conf`和`/etc/sniproxy.conf`\n\n* 脚本支持系统：CentOS7+, Debian9+, Ubuntu18+\n    * 如果脚本最后显示的IP和实际公网IP不符，请修改一下文件`/etc/sniproxy.conf`中的IP地址\n\n### 脚本用法：\n\n    bash dnsmasq_sniproxy.sh [-h] [-i] [-f] [-id] [-fd] [-is] [-fs] [-u] [-ud] [-us]\n      -h , --help                显示帮助信息\n      -i , --install             安装 Dnsmasq + SNI Proxy\n      -f , --fastinstall         快速安装 Dnsmasq + SNI Proxy\n      -id, --installdnsmasq      仅安装 Dnsmasq\n      -fd, --installdnsmasq      快速安装 Dnsmasq\n      -is, --installsniproxy     仅安装 SNI Proxy\n      -fs, --fastinstallsniproxy 快速安装 SNI Proxy\n      -u , --uninstall           卸载 Dnsmasq + SNI Proxy\n      -ud, --undnsmasq           卸载 Dnsmasq\n      -us, --unsniproxy          卸载 SNI Proxy\n\n### 快速安装（推荐）：\n``` Bash\nwget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh && bash dnsmasq_sniproxy.sh -f\n```\n\n### 普通安装：\n``` Bash\nwget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh && bash dnsmasq_sniproxy.sh -i\n```\n\n### 卸载方法：\n``` Bash\nwget --no-check-certificate -O dnsmasq_sniproxy.sh https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq_sniproxy.sh && bash dnsmasq_sniproxy.sh -u\n```\n\n### 使用方法：\n将代理主机的 DNS 地址设置为安装了 dnsmasq 的主机 IP 即可，如果遇到问题，尝试在配置文件中只保留一个 DNS 地址。\n\n为了防止滥用，建议不要公开 IP 地址，并使用防火墙进行适当的访问限制。\n\n### 调试排错：\n- 确认 sniproxy 运行状态\n\n  查看sniproxy状态：`systemctl status sniproxy`\n\n  如果 sniproxy 未运行，请检查是否有其他服务占用了 80、443 端口，导致端口冲突。可以使用 `netstat -tlunp | grep 443` 命令查看端口监听情况。\n\n- 确认防火墙设置\n\n  确保防火墙已放行 53、80、443 端口。在调试时，可以关闭防火墙： `systemctl stop firewalld.service`\n\n  对于阿里云、腾讯云、AWS 等云服务提供商，安全组的端口设置同样需要放行。\n  \n  使用其他服务器进行测试： `telnet 1.2.3.4 53` \n\n- 域名解析测试\n\n  在配置完 DNS 后，进行域名解析测试：`nslookup netflix.com` 检查 IP 是否为 Netflix 代理服务器的 IP。\n  如果系统中没有 nslookup 命令，可以在 CentOS 上安装：`yum install -y bind-utils` 在 Ubuntu 和 Debian 上安装：`apt-get -y install dnsutils`\n\n- 解决 systemd-resolve 服务占用 53 端口的问题\n  \n  使用 `netstat -tlunp | grep 53` 发现 53 端口被 systemd-resolved 占用\n  修改`/etc/systemd/resolved.conf`文件：\n  ```\n  [Resolve]\n  DNS=8.8.8.8 1.1.1.1 #取消注释，增加dns\n  #FallbackDNS=\n  #Domains=\n  #LLMNR=no\n  #MulticastDNS=no\n  #DNSSEC=no\n  #Cache=yes\n  DNSStubListener=no  #取消注释，把yes改为no\n  ```\n  然后执行以下命令，并重启 systemd-resolved 服务：\n  ```\n  ln -sf /run/systemd/resolve/resolv.conf /etc/resolv.conf\n  systemctl restart systemd-resolved.service\n  ```\n"
        },
        {
          "name": "autoupdateip.sh",
          "type": "blob",
          "size": 3.005859375,
          "content": "#!/bin/bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin\nexport PATH\n\n# check os\nif [[ -f /etc/redhat-release ]]; then\n    release=\"centos\"\nelif cat /etc/issue | grep -Eqi \"debian\"; then\n    release=\"debian\"\nelif cat /etc/issue | grep -Eqi \"ubuntu\"; then\n    release=\"ubuntu\"\nelif cat /etc/issue | grep -Eqi \"centos|red hat|redhat\"; then\n    release=\"centos\"\nelif cat /proc/version | grep -Eqi \"debian\"; then\n    release=\"debian\"\nelif cat /proc/version | grep -Eqi \"ubuntu\"; then\n    release=\"ubuntu\"\nelif cat /proc/version | grep -Eqi \"centos|red hat|redhat\"; then\n    release=\"centos\"\nelse\n    echo -e \"[Error] 未检测到系统版本，请检查\\n\" && exit 1\nfi\n\nif ! command -v wget >/dev/null 2>&1; then \n    if [[ x\"${release}\" == x\"centos\" ]]; then\n        yum install -y wget\n    elif [[ x\"${release}\" == x\"ubuntu\" ]]; then\n        apt install -y wget\n    elif [[ x\"${release}\" == x\"debian\" ]]; then\n        apt install -y wget\n    fi\nfi\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\nif  [ -n \"$1\" ] ;then\n    if ! command -v dig >/dev/null 2>&1; then \n        if [[ x\"${release}\" == x\"centos\" ]]; then\n            yum install -y bind-utils\n        elif [[ x\"${release}\" == x\"ubuntu\" ]]; then\n            apt install -y dnsutils\n        elif [[ x\"${release}\" == x\"debian\" ]]; then\n            apt install -y dnsutils\n        fi\n    fi\n    ddns=\"$@\"\n    newip=`dig -t A +noquestion +noadditional +noauthority +tcp @8.8.8.8 ${ddns} | awk '/IN[ \\t]+A/{print $NF}'`\nelse\n    newip=$(get_ip)\nfi\n\nfile=/etc/dnsmasq.d/custom_netflix.conf\n[ ! -e ${file} ] && echo \"[Error] dnsmasq配置文件不存在，请检查\" && exit 1\nIPREX='([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,2}|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\ntime=`date +\"%Y-%m-%d-%H:%M\"`\noldip=`grep netflix.com ${file}|grep -Eo \"$IPREX\"|tail -n1`\n\nif [ $oldip != $newip ]; then\n    sed -i \"s/$oldip/$newip/g\" ${file}\n    systemctl restart dnsmasq\n    [ -e /tmp/autochangeip.log ] || touch /tmp/autochangeip.log\n    echo \"${time} - ${oldip} updated to ${newip}\" >> /tmp/autochangeip.log\n    tail -n 100 /tmp/autochangeip.log > /tmp/tmpautochangeip.log\n    mv -f /tmp/tmpautochangeip.log /tmp/autochangeip.log\nfi\n\n#说明\n#本脚本为方便一些动态IP解锁主机，实现自动更新dnsmasq解析记录\n#不带参数：bash autochangeip.sh  自动更新为本机公网IP\n#带参数：bash autochangeip.sh ddns.example.com  自动更新为ddns域名所解析的IP\n#使用crontab定时执行，运行命令 crontab -e 添加定时，例如： \n# */5 * * * *  bash autochangeip.sh \n#上面示例为每5分钟执行一次，实际配置中前面不要加#符号，注意修改正确脚本文件路径"
        },
        {
          "name": "build_sniproxy.sh",
          "type": "blob",
          "size": 5.8466796875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n#本脚本仅做编译sniproxy使用\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] 请使用root用户来执行脚本!\" && exit 1\n\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\ndownload(){\n    local filename=${1}\n    echo -e \"[${green}Info${plain}] ${filename} download configuration now...\"\n    wget --no-check-certificate -q -t3 -T60 -O ${1} ${2}\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Download ${filename} failed.\"\n        exit 1\n    fi\n}\n\nerror_detect_depends(){\n    local command=$1\n    local depend=`echo \"${command}\" | awk '{print $4}'`\n    echo -e \"[${green}Info${plain}] Starting to install package ${depend}\"\n    ${command} > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Failed to install ${red}${depend}${plain}\"\n        exit 1\n    fi\n}\n\ninstall_dependencies(){\n    echo \"安装依赖软件...\"\n    if check_sys packageManager yum; then\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository...\"\n        if [ ! -f /etc/yum.repos.d/epel.repo ]; then\n            yum install -y epel-release > /dev/null 2>&1\n        fi\n        [ ! -f /etc/yum.repos.d/epel.repo ] && echo -e \"[${red}Error${plain}] Install EPEL repository failed, please check it.\" && exit 1\n        [ ! \"$(command -v yum-config-manager)\" ] && yum install -y yum-utils > /dev/null 2>&1\n        [ x\"$(yum repolist epel | grep -w epel | awk '{print $NF}')\" != x\"enabled\" ] && yum-config-manager --enable epel > /dev/null 2>&1\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository complete...\"\n            yum_depends=(\n                autoconf automake curl gettext-devel libev-devel pcre-devel perl pkgconfig rpm-build udns-devel\n            )\n        for depend in ${yum_depends[@]}; do\n            error_detect_depends \"yum -y install ${depend}\"\n        done\n        if centosversion 6; then\n            error_detect_depends \"yum -y groupinstall development\"\n            error_detect_depends \"yum -y install centos-release-scl\"\n            error_detect_depends \"yum -y install devtoolset-6-gcc-c++\"\n        else\n            yum config-manager --set-enabled powertools\n            yum groups list development | grep Installed > /dev/null 2>&1\n            if [[ $? -eq 0 ]]; then\n                yum groups mark remove development -y > /dev/null 2>&1\n            fi\n            error_detect_depends \"yum -y groupinstall development\"\n        fi\n    elif check_sys packageManager apt; then\n        apt_depends=(\n            autotools-dev cdbs debhelper dh-autoreconf dpkg-dev gettext libev-dev libpcre3-dev libudns-dev pkg-config fakeroot devscripts\n        )\n        apt-get -y update\n        for depend in ${apt_depends[@]}; do\n            error_detect_depends \"apt-get -y install ${depend}\"\n        done\n        error_detect_depends \"apt-get -y install build-essential\"\n    fi\n}\ninstall_dependencies\nbit=`uname -m`\ncd /tmp\nif [ -e sniproxy-0.6.1 ]; then\n    rm -rf sniproxy-0.6.1\nfi\ndownload /tmp/sniproxy-0.6.1.tar.gz https://github.com/dlundquist/sniproxy/archive/refs/tags/0.6.1.tar.gz\n#最新代码需要autoconf版本至少为2.71，暂时使用0.6.1版本源码\n#参考编译链接：https://www.cnblogs.com/hucat/articles/16828816.html\ntar -zxf sniproxy-0.6.1.tar.gz\ncd sniproxy-0.6.1\nif check_sys packageManager yum; then\n    ./autogen.sh && ./configure && make dist\n    if centosversion 6; then\n        scl enable devtoolset-6 'rpmbuild --define \"_sourcedir `pwd`\" --define \"_topdir /tmp/sniproxy/rpmbuild\" --define \"debug_package %{nil}\" -ba redhat/sniproxy.spec'\n    else\n        sed -i \"s/\\%configure CFLAGS\\=\\\"-I\\/usr\\/include\\/libev\\\"/\\%configure CFLAGS\\=\\\"-fPIC -I\\/usr\\/include\\/libev\\\"/\" redhat/sniproxy.spec\n        rpmbuild --define \"_sourcedir `pwd`\" --define \"_topdir /tmp/sniproxy/rpmbuild\" --define \"debug_package %{nil}\" -ba redhat/sniproxy.spec\n    fi\n    echo -e \"[${green}Info${plain}] sniproxy build complete, Location: /tmp/sniproxy/rpmbuild/RPMS/x86_64/\"\n    echo /tmp/sniproxy/rpmbuild/RPMS/x86_64/\nelif check_sys packageManager apt; then\n    ./autogen.sh && dpkg-buildpackage\n    echo -e \"[${green}Info${plain}] sniproxy build complete, Location: /tmp/\"\nfi\nrm -rf /tmp/sniproxy-0.6.1/\n"
        },
        {
          "name": "dnsmasq.conf",
          "type": "blob",
          "size": 0.1591796875,
          "content": "domain-needed\nbogus-priv\nno-resolv\nno-poll\nall-servers\nserver=8.8.8.8\nserver=1.1.1.1\nserver=208.67.222.222\nserver=4.2.2.1\ncache-size=2048\nlocal-ttl=60\ninterface=*\n"
        },
        {
          "name": "dnsmasq_sniproxy.sh",
          "type": "blob",
          "size": 23.990234375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\nred='\\033[0;31m'\ngreen='\\033[0;32m'\nyellow='\\033[0;33m'\nplain='\\033[0m'\n\n[[ $EUID -ne 0 ]] && echo -e \"[${red}Error${plain}] 请使用root用户来执行脚本!\" && exit 1\n\ndisable_selinux(){\n    if [ -s /etc/selinux/config ] && grep 'SELINUX=enforcing' /etc/selinux/config; then\n        sed -i 's/SELINUX=enforcing/SELINUX=disabled/g' /etc/selinux/config\n        setenforce 0\n    fi\n}\n\ncheck_sys(){\n    local checkType=$1\n    local value=$2\n\n    local release=''\n    local systemPackage=''\n\n    if [[ -f /etc/redhat-release ]]; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /etc/issue; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /etc/issue; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /etc/issue; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    elif grep -Eqi \"debian|raspbian\" /proc/version; then\n        release=\"debian\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"ubuntu\" /proc/version; then\n        release=\"ubuntu\"\n        systemPackage=\"apt\"\n    elif grep -Eqi \"centos|red hat|redhat\" /proc/version; then\n        release=\"centos\"\n        systemPackage=\"yum\"\n    fi\n\n    if [[ \"${checkType}\" == \"sysRelease\" ]]; then\n        if [ \"${value}\" == \"${release}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    elif [[ \"${checkType}\" == \"packageManager\" ]]; then\n        if [ \"${value}\" == \"${systemPackage}\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    fi\n}\n\ngetversion(){\n    if [[ -s /etc/redhat-release ]]; then\n        grep -oE  \"[0-9.]+\" /etc/redhat-release\n    else\n        grep -oE  \"[0-9.]+\" /etc/issue\n    fi\n}\n\ncentosversion(){\n    if check_sys sysRelease centos; then\n        local code=$1\n        local version=\"$(getversion)\"\n        local main_ver=${version%%.*}\n        if [ \"$main_ver\" == \"$code\" ]; then\n            return 0\n        else\n            return 1\n        fi\n    else\n        return 1\n    fi\n}\n\nget_ip(){\n    local IP=$( ip addr | egrep -o '[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}' | egrep -v \"^192\\.168|^172\\.1[6-9]\\.|^172\\.2[0-9]\\.|^172\\.3[0-2]\\.|^10\\.|^127\\.|^255\\.|^0\\.\" | head -n 1 )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipv4.icanhazip.com )\n    [ -z ${IP} ] && IP=$( wget -qO- -t1 -T2 ipinfo.io/ip )\n    echo ${IP}\n}\n\ncheck_ip(){\n    local checkip=$1   \n    local valid_check=$(echo $checkip|awk -F. '$1<=255&&$2<=255&&$3<=255&&$4<=255{print \"yes\"}')   \n    if echo $checkip|grep -E \"^[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}$\" >/dev/null; then   \n        if [ ${valid_check:-no} == \"yes\" ]; then   \n            return 0   \n        else   \n            echo -e \"[${red}Error${plain}] IP $checkip not available!\"   \n            return 1   \n        fi   \n    else   \n        echo -e \"[${red}Error${plain}] IP format error!\"   \n        return 1   \n    fi\n}\n\ndownload(){\n    local filename=${1}\n    echo -e \"[${green}Info${plain}] ${filename} download configuration now...\"\n    wget --no-check-certificate -q -t3 -T60 -O ${1} ${2}\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Download ${filename} failed.\"\n        exit 1\n    fi\n}\n\nerror_detect_depends(){\n    local command=$1\n    local depend=`echo \"${command}\" | awk '{print $4}'`\n    echo -e \"[${green}Info${plain}] Starting to install package ${depend}\"\n    ${command} > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] Failed to install ${red}${depend}${plain}\"\n        exit 1\n    fi\n}\n\nconfig_firewall(){\n    if centosversion 6; then\n        /etc/init.d/iptables status > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            for port in ${ports}; do\n                iptables -L -n | grep -i ${port} > /dev/null 2>&1\n                if [ $? -ne 0 ]; then\n                    iptables -I INPUT -m state --state NEW -m tcp -p tcp --dport ${port} -j ACCEPT\n                    if [ ${port} == \"53\" ]; then\n                        iptables -I INPUT -m state --state NEW -m udp -p udp --dport ${port} -j ACCEPT\n                    fi\n                else\n                    echo -e \"[${green}Info${plain}] port ${green}${port}${plain} already be enabled.\"\n                fi\n            done\n            /etc/init.d/iptables save\n            /etc/init.d/iptables restart\n        else\n            echo -e \"[${yellow}Warning${plain}] iptables looks like not running or not installed, please enable port ${ports} manually if necessary.\"\n        fi\n    else\n        systemctl status firewalld > /dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            default_zone=$(firewall-cmd --get-default-zone)\n            for port in ${ports}; do\n                firewall-cmd --permanent --zone=${default_zone} --add-port=${port}/tcp\n                if [ ${port} == \"53\" ]; then\n                    firewall-cmd --permanent --zone=${default_zone} --add-port=${port}/udp\n                fi\n                firewall-cmd --reload\n            done\n        else\n            echo -e \"[${yellow}Warning${plain}] firewalld looks like not running or not installed, please enable port ${ports} manually if necessary.\"\n        fi\n    fi\n}\n\ninstall_dependencies(){\n    echo \"安装依赖软件...\"\n    if check_sys packageManager yum; then\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository...\"\n        if [ ! -f /etc/yum.repos.d/epel.repo ]; then\n            yum install -y epel-release > /dev/null 2>&1\n        fi\n        [ ! -f /etc/yum.repos.d/epel.repo ] && echo -e \"[${red}Error${plain}] Install EPEL repository failed, please check it.\" && exit 1\n        [ ! \"$(command -v yum-config-manager)\" ] && yum install -y yum-utils > /dev/null 2>&1\n        [ x\"$(yum repolist epel | grep -w epel | awk '{print $NF}')\" != x\"enabled\" ] && yum-config-manager --enable epel > /dev/null 2>&1\n        echo -e \"[${green}Info${plain}] Checking the EPEL repository complete...\"\n\n        if [[ ${fastmode} = \"1\" ]]; then\n            yum_depends=(\n                curl gettext-devel libev-devel pcre-devel perl udns-devel\n            )\n        else\n            yum_depends=(\n                autoconf automake curl gettext-devel libev-devel pcre-devel perl udns-devel\n            )\n        fi\n        for depend in ${yum_depends[@]}; do\n            error_detect_depends \"yum -y install ${depend}\"\n        done\n        if [[ ${fastmode} = \"0\" ]]; then\n            if centosversion 6; then\n                error_detect_depends \"yum -y groupinstall development\"\n                error_detect_depends \"yum -y install centos-release-scl\"\n                error_detect_depends \"yum -y install devtoolset-6-gcc-c++\"\n            else\n                yum config-manager --set-enabled powertools\n                yum groups list development | grep Installed > /dev/null 2>&1\n                if [[ $? -eq 0 ]]; then\n                    yum groups mark remove development -y > /dev/null 2>&1\n                fi\n                error_detect_depends \"yum -y groupinstall development\"\n            fi\n        fi\n    elif check_sys packageManager apt; then\n        if [[ ${fastmode} = \"1\" ]]; then\n            apt_depends=(\n                curl gettext libev-dev libpcre3-dev libudns-dev\n            )\n        else\n            apt_depends=(\n                autotools-dev cdbs curl gettext libev-dev libpcre3-dev libudns-dev\n            )\n        fi\n        apt-get -y update\n        for depend in ${apt_depends[@]}; do\n            error_detect_depends \"apt-get -y install ${depend}\"\n        done\n        if [[ ${fastmode} = \"0\" ]]; then\n            error_detect_depends \"apt-get -y install build-essential\"\n        fi\n    fi\n}\n\ncompile_dnsmasq(){\n    if check_sys packageManager yum; then\n        error_detect_depends \"yum -y install epel-release\"\n        error_detect_depends \"yum -y install make\"\n        error_detect_depends \"yum -y install gcc-c++\"\n        error_detect_depends \"yum -y install nettle-devel\"\n        error_detect_depends \"yum -y install gettext\"\n        error_detect_depends \"yum -y install libidn-devel\"\n        #error_detect_depends \"yum -y install libidn2-devel\"\n        error_detect_depends \"yum -y install libnetfilter_conntrack-devel\"\n        error_detect_depends \"yum -y install dbus-devel\"\n    elif check_sys packageManager apt; then\n        error_detect_depends \"apt -y install make\"\n        error_detect_depends \"apt -y install gcc\"\n        error_detect_depends \"apt -y install g++\"\n        error_detect_depends \"apt -y install pkg-config\"\n        error_detect_depends \"apt -y install nettle-dev\"\n        error_detect_depends \"apt -y install gettext\"\n        error_detect_depends \"apt -y install libidn11-dev\"\n        #error_detect_depends \"apt -y install libidn2-dev\"\n        error_detect_depends \"apt -y install libnetfilter-conntrack-dev\"\n        error_detect_depends \"apt -y install libdbus-1-dev\"\n    fi\n    if [ -e /tmp/dnsmasq-2.90 ]; then\n        rm -rf /tmp/dnsmasq-2.90\n    fi\n    cd /tmp/\n    download dnsmasq-2.90.tar.gz https://thekelleys.org.uk/dnsmasq/dnsmasq-2.90.tar.gz\n    tar -zxf dnsmasq-2.90.tar.gz\n    cd dnsmasq-2.90\n    make all-i18n V=s COPTS='-DHAVE_DNSSEC -DHAVE_IDN -DHAVE_CONNTRACK -DHAVE_DBUS'\n    if [ $? -ne 0 ]; then\n        echo -e \"[${red}Error${plain}] dnsmasq upgrade failed.\"\n        rm -rf /tmp/dnsmasq-2.90 /tmp/dnsmasq-2.90.tar.gz\n        exit 1\n    fi\n}\n\ninstall_dnsmasq(){\n    netstat -a -n -p | grep LISTEN | grep -P \"\\d+\\.\\d+\\.\\d+\\.\\d+:53\\s+\" > /dev/null && echo -e \"[${red}Error${plain}] required port 53 already in use\\n\" && exit 1\n    echo \"安装Dnsmasq...\"\n    if check_sys packageManager yum; then\n        error_detect_depends \"yum -y install dnsmasq\"\n        if centosversion 6; then\n            compile_dnsmasq\n            yes|cp -f /tmp/dnsmasq-2.90/src/dnsmasq /usr/sbin/dnsmasq && chmod +x /usr/sbin/dnsmasq\n        fi\n    elif check_sys packageManager apt; then\n        error_detect_depends \"apt -y install dnsmasq\"\n    fi\n    if [[ ${fastmode} = \"0\" ]]; then\n        compile_dnsmasq\n        yes|cp -f /tmp/dnsmasq-2.90/src/dnsmasq /usr/sbin/dnsmasq && chmod +x /usr/sbin/dnsmasq\n    fi\n    [ ! -f /usr/sbin/dnsmasq ] && echo -e \"[${red}Error${plain}] 安装dnsmasq出现问题，请检查.\" && exit 1\n    download /etc/dnsmasq.d/custom_netflix.conf https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/dnsmasq.conf\n    download /tmp/proxy-domains.txt https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/proxy-domains.txt\n    for domain in $(cat /tmp/proxy-domains.txt); do\n        printf \"address=/${domain}/${publicip}\\n\"\\\n        | tee -a /etc/dnsmasq.d/custom_netflix.conf > /dev/null 2>&1\n    done\n    [ \"$(grep -x -E \"(conf-dir=/etc/dnsmasq.d|conf-dir=/etc/dnsmasq.d,.bak|conf-dir=/etc/dnsmasq.d/,\\*.conf|conf-dir=/etc/dnsmasq.d,.rpmnew,.rpmsave,.rpmorig)\" /etc/dnsmasq.conf)\" ] || echo -e \"\\nconf-dir=/etc/dnsmasq.d\" >> /etc/dnsmasq.conf\n    echo \"启动 Dnsmasq 服务...\"\n    if check_sys packageManager yum; then\n        if centosversion 6; then\n            chkconfig dnsmasq on\n            service dnsmasq start\n        else\n            systemctl enable dnsmasq\n            systemctl start dnsmasq\n        fi\n    elif check_sys packageManager apt; then\n        systemctl enable dnsmasq\n        systemctl restart dnsmasq\n    fi\n    cd /tmp\n    rm -rf /tmp/dnsmasq-2.90 /tmp/dnsmasq-2.90.tar.gz /tmp/proxy-domains.txt\n    echo -e \"[${green}Info${plain}] dnsmasq install complete...\"\n}\n\ninstall_sniproxy(){\n    for aport in 80 443; do\n        netstat -a -n -p | grep LISTEN | grep -P \"\\d+\\.\\d+\\.\\d+\\.\\d+:${aport}\\s+\" > /dev/null && echo -e \"[${red}Error${plain}] required port ${aport} already in use\\n\" && exit 1\n    done\n    install_dependencies\n    echo \"安装SNI Proxy...\"\n    if check_sys packageManager yum; then\n        rpm -qa | grep sniproxy >/dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            rpm -e sniproxy\n        fi\n    elif check_sys packageManager apt; then\n        dpkg -s sniproxy >/dev/null 2>&1\n        if [ $? -eq 0 ]; then\n            dpkg -r sniproxy\n        fi\n    fi\n    bit=`uname -m`\n    cd /tmp\n    if [[ ${fastmode} = \"0\" ]]; then\n        if [ -e sniproxy-0.6.1 ]; then\n            rm -rf sniproxy-0.6.1\n        fi\n        download /tmp/sniproxy-0.6.1.tar.gz https://github.com/dlundquist/sniproxy/archive/refs/tags/0.6.1.tar.gz\n        tar -zxf sniproxy-0.6.1.tar.gz\n        cd sniproxy-0.6.1\n    fi\n    if check_sys packageManager yum; then\n        if [[ ${fastmode} = \"1\" ]]; then\n            if [[ ${bit} = \"x86_64\" ]]; then\n                download /tmp/sniproxy-0.6.1-1.el8.x86_64.rpm https://github.com/myxuchangbin/dnsmasq_sniproxy_install/raw/master/sniproxy/sniproxy-0.6.1-1.el8.x86_64.rpm\n                error_detect_depends \"yum -y install /tmp/sniproxy-0.6.1-1.el8.x86_64.rpm\"\n                rm -f /tmp/sniproxy-0.6.1-1.el8.x86_64.rpm\n            else\n                echo -e \"${red}暂不支持${bit}内核，请使用编译模式安装！${plain}\" && exit 1\n            fi\n        else\n            if centosversion 6; then\n                ./autogen.sh && ./configure && make dist\n                scl enable devtoolset-6 'rpmbuild --define \"_sourcedir `pwd`\" --define \"_topdir /tmp/sniproxy/rpmbuild\" --define \"debug_package %{nil}\" -ba redhat/sniproxy.spec'\n                error_detect_depends \"yum -y install /tmp/sniproxy/rpmbuild/RPMS/x86_64/sniproxy-*.rpm\"\n            else\n                ./autogen.sh && ./configure --prefix=/usr && make && make install\n            fi\n        fi\n        if centosversion 6; then\n            download /etc/init.d/sniproxy https://raw.githubusercontent.com/dlundquist/sniproxy/master/redhat/sniproxy.init && chmod +x /etc/init.d/sniproxy\n            [ ! -f /etc/init.d/sniproxy ] && echo -e \"[${red}Error${plain}] 下载Sniproxy启动文件出现问题，请检查.\" && exit 1\n        else\n            download /etc/systemd/system/sniproxy.service https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/sniproxy.service\n            systemctl daemon-reload\n            [ ! -f /etc/systemd/system/sniproxy.service ] && echo -e \"[${red}Error${plain}] 下载Sniproxy启动文件出现问题，请检查.\" && exit 1\n        fi\n    elif check_sys packageManager apt; then\n        if [[ ${fastmode} = \"1\" ]]; then\n            if [[ ${bit} = \"x86_64\" ]]; then\n                download /tmp/sniproxy_0.6.1_amd64.deb https://github.com/myxuchangbin/dnsmasq_sniproxy_install/raw/master/sniproxy/sniproxy_0.6.1_amd64.deb\n                error_detect_depends \"dpkg -i --no-debsig /tmp/sniproxy_0.6.1_amd64.deb\"\n                rm -f /tmp/sniproxy_0.6.1_amd64.deb\n            else\n                echo -e \"${red}暂不支持${bit}内核，请使用编译模式安装！${plain}\" && exit 1\n            fi\n        else\n            env NAME=sniproxy ./autogen.sh && ./configure --prefix=/usr && make && make install\n        fi  \n        download /etc/systemd/system/sniproxy.service https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/sniproxy.service\n        systemctl daemon-reload\n        [ ! -f /etc/systemd/system/sniproxy.service ] && echo -e \"[${red}Error${plain}] 下载Sniproxy启动文件出现问题，请检查.\" && exit 1\n    fi\n    [ ! -f /usr/sbin/sniproxy ] && echo -e \"[${red}Error${plain}] 安装Sniproxy出现问题，请检查.\" && exit 1\n    download /etc/sniproxy.conf https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/sniproxy.conf\n    download /tmp/sniproxy-domains.txt https://raw.githubusercontent.com/myxuchangbin/dnsmasq_sniproxy_install/master/proxy-domains.txt\n    sed -i -e 's/\\./\\\\\\./g' -e 's/^/    \\.\\*/' -e 's/$/\\$ \\*/' /tmp/sniproxy-domains.txt || (echo -e \"[${red}Error:${plain}] Failed to configuration sniproxy.\" && exit 1)\n    sed -i '/table {/r /tmp/sniproxy-domains.txt' /etc/sniproxy.conf || (echo -e \"[${red}Error:${plain}] Failed to configuration sniproxy.\" && exit 1)\n    if [ ! -e /var/log/sniproxy ]; then\n        mkdir /var/log/sniproxy\n    fi\n    echo \"启动 SNI Proxy 服务...\"\n    if check_sys packageManager yum; then\n        if centosversion 6; then\n            chkconfig sniproxy on > /dev/null 2>&1\n            service sniproxy start || (echo -e \"[${red}Error:${plain}] Failed to start sniproxy.\" && exit 1)\n        else\n            systemctl enable sniproxy > /dev/null 2>&1\n            systemctl start sniproxy || (echo -e \"[${red}Error:${plain}] Failed to start sniproxy.\" && exit 1)\n        fi\n    elif check_sys packageManager apt; then\n        systemctl enable sniproxy > /dev/null 2>&1\n        systemctl restart sniproxy || (echo -e \"[${red}Error:${plain}] Failed to start sniproxy.\" && exit 1)\n    fi\n    cd /tmp\n    rm -rf /tmp/sniproxy-0.6.1/\n    rm -rf /tmp/sniproxy-domains.txt\n    echo -e \"[${green}Info${plain}] sniproxy install complete...\"\n}\n\ninstall_check(){\n    if check_sys packageManager yum || check_sys packageManager apt; then\n        if centosversion 5; then\n            return 1\n        fi\n        return 0\n    else\n        return 1\n    fi\n}\n\nready_install(){\n    echo \"检测您的系统...\"\n    if ! install_check; then\n        echo -e \"[${red}Error${plain}] Your OS is not supported to run it!\"\n        echo -e \"Please change to CentOS 6+/Debian 8+/Ubuntu 16+ and try again.\"\n        exit 1\n    fi\n    if check_sys packageManager yum; then\n        yum makecache\n        error_detect_depends \"yum -y install net-tools\"\n        error_detect_depends \"yum -y install wget\"\n    elif check_sys packageManager apt; then\n        apt update\n        error_detect_depends \"apt-get -y install net-tools\"\n        error_detect_depends \"apt-get -y install wget\"\n    fi\n    disable_selinux\n    if check_sys packageManager yum; then\n        config_firewall\n    fi\n    echo -e \"[${green}Info${plain}] Checking the system complete...\"\n}\n\nhello(){\n    echo \"\"\n    echo -e \"${yellow}Dnsmasq + SNI Proxy自助安装脚本${plain}\"\n    echo -e \"${yellow}支持系统:  CentOS 6+, Debian8+, Ubuntu16+${plain}\"\n    echo \"\"\n}\n\nhelp(){\n    hello\n    echo \"使用方法：bash $0 [-h] [-i] [-f] [-id] [-fd] [-is] [-fs] [-u] [-ud] [-us]\"\n    echo \"\"\n    echo \"  -h , --help                显示帮助信息\"\n    echo \"  -i , --install             安装 Dnsmasq + SNI Proxy\"\n    echo \"  -f , --fastinstall         快速安装 Dnsmasq + SNI Proxy\"\n    echo \"  -id, --installdnsmasq      仅安装 Dnsmasq\"\n    echo \"  -id, --installdnsmasq      快速安装 Dnsmasq\"\n    echo \"  -is, --installsniproxy     仅安装 SNI Proxy\"\n    echo \"  -fs, --fastinstallsniproxy 快速安装 SNI Proxy\"\n    echo \"  -u , --uninstall           卸载 Dnsmasq + SNI Proxy\"\n    echo \"  -ud, --undnsmasq           卸载 Dnsmasq\"\n    echo \"  -us, --unsniproxy          卸载 SNI Proxy\"\n    echo \"\"\n}\n\ninstall_all(){\n    ports=\"53 80 443\"\n    publicip=$(get_ip)\n    hello\n    ready_install\n    install_dnsmasq\n    install_sniproxy\n    echo \"\"\n    echo -e \"${yellow}Dnsmasq + SNI Proxy 已完成安装！${plain}\"\n    echo \"\"\n    echo -e \"${yellow}将您的DNS更改为 $(get_ip) 即可以观看Netflix节目了。${plain}\"\n    echo \"\"\n}\n\nonly_dnsmasq(){\n    ports=\"53\"\n    hello\n    ready_install\n    inputipcount=1\n    echo -e \"请输入SNIProxy服务器的IP地址\"\n    read -e -p \"(为空则自动获取公网IP): \" inputip\n    while true; do\n        if [ \"${inputipcount}\" == 3 ]; then\n            echo -e \"[${red}Error:${plain}] IP输入错误次数过多，请重新执行脚本。\"\n            exit 1\n        fi\n        if [ -z ${inputip} ]; then\n            publicip=$(get_ip)\n            break\n        else\n            check_ip ${inputip}\n            if [ $? -eq 0 ]; then\n                publicip=${inputip}\n                break\n            else\n                echo -e \"请重新输入SNIProxy服务器的IP地址\"\n                read -e -p \"(为空则自动获取公网IP): \" inputip\n            fi\n        fi\n        inputipcount=`expr ${inputipcount} + 1`\n    done\n    install_dnsmasq\n    echo \"\"\n    echo -e \"${yellow}Dnsmasq 已完成安装！${plain}\"\n    echo \"\"\n    echo -e \"${yellow}将您的DNS更改为 $(get_ip) 即可以观看Netflix节目了。${plain}\"\n    echo \"\"\n}\n\nonly_sniproxy(){\n    ports=\"80 443\"\n    hello\n    ready_install\n    install_sniproxy\n    echo \"\"\n    echo -e \"${yellow}SNI Proxy 已完成安装！${plain}\"\n    echo \"\"\n    echo -e \"${yellow}将Netflix的相关域名解析到 $(get_ip) 即可以观看Netflix节目了。${plain}\"\n    echo \"\"\n}\n\nundnsmasq(){\n    echo -e \"[${green}Info${plain}] Stoping dnsmasq services.\"\n    if check_sys packageManager yum; then\n        if centosversion 6; then\n            chkconfig dnsmasq off > /dev/null 2>&1\n            service dnsmasq stop || echo -e \"[${red}Error:${plain}] Failed to stop dnsmasq.\"\n        else\n            systemctl disable dnsmasq > /dev/null 2>&1\n            systemctl stop dnsmasq || echo -e \"[${red}Error:${plain}] Failed to stop dnsmasq.\"\n        fi\n    elif check_sys packageManager apt; then\n        systemctl disable dnsmasq > /dev/null 2>&1\n        systemctl stop dnsmasq || echo -e \"[${red}Error:${plain}] Failed to stop dnsmasq.\"\n    fi\n    echo -e \"[${green}Info${plain}] Starting to uninstall dnsmasq services.\"\n    if check_sys packageManager yum; then\n        yum remove dnsmasq -y > /dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Failed to uninstall ${red}dnsmasq${plain}\"\n        fi\n    elif check_sys packageManager apt; then\n        apt-get remove dnsmasq -y > /dev/null 2>&1\n        apt-get remove dnsmasq-base -y > /dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Failed to uninstall ${red}dnsmasq${plain}\"\n        fi\n    fi\n    rm -rf /etc/dnsmasq.d/custom_netflix.conf\n    echo -e \"[${green}Info${plain}] services uninstall dnsmasq complete...\"\n}\n\nunsniproxy(){\n    echo -e \"[${green}Info${plain}] Stoping sniproxy services.\"\n    if check_sys packageManager yum; then\n        if centosversion 6; then\n            chkconfig sniproxy off > /dev/null 2>&1\n            service sniproxy stop || echo -e \"[${red}Error:${plain}] Failed to stop sniproxy.\"\n        else\n            systemctl disable sniproxy > /dev/null 2>&1\n            systemctl stop sniproxy || echo -e \"[${red}Error:${plain}] Failed to stop sniproxy.\"\n        fi\n    elif check_sys packageManager apt; then\n        systemctl disable sniproxy > /dev/null 2>&1\n        systemctl stop sniproxy || echo -e \"[${red}Error:${plain}] Failed to stop sniproxy.\"\n    fi\n    echo -e \"[${green}Info${plain}] Starting to uninstall sniproxy services.\"\n    if check_sys packageManager yum; then\n        yum remove sniproxy -y > /dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Failed to uninstall ${red}sniproxy${plain}\"\n        fi\n    elif check_sys packageManager apt; then\n        apt-get remove sniproxy -y > /dev/null 2>&1\n        if [ $? -ne 0 ]; then\n            echo -e \"[${red}Error${plain}] Failed to uninstall ${red}sniproxy${plain}\"\n        fi\n    fi\n    rm -rf /etc/sniproxy.conf\n    echo -e \"[${green}Info${plain}] services uninstall sniproxy complete...\"\n}\n\nconfirm(){\n    echo -e \"${yellow}是否继续执行?(n:取消/y:继续)${plain}\"\n    read -e -p \"(默认:取消): \" selection\n    [ -z \"${selection}\" ] && selection=\"n\"\n    if [ ${selection} != \"y\" ]; then\n        exit 0\n    fi\n}\n\nif [[ $# = 1 ]];then\n    key=\"$1\"\n    case $key in\n        -i|--install)\n        fastmode=0\n        install_all\n        ;;\n        -f|--fastinstall)\n        fastmode=1\n        install_all\n        ;;\n        -id|--installdnsmasq)\n        fastmode=0\n        only_dnsmasq\n        ;;\n        -fd|--fastinstalldnsmasq)\n        fastmode=1\n        only_dnsmasq\n        ;;\n        -is|--installsniproxy)\n        fastmode=0\n        only_sniproxy\n        ;;\n        -fs|--fastinstallsniproxy)\n        fastmode=1\n        only_sniproxy\n        ;;\n        -u|--uninstall)\n        hello\n        echo -e \"${yellow}正在执行卸载Dnsmasq和SNI Proxy.${plain}\"\n        confirm\n        undnsmasq\n        unsniproxy\n        ;;\n        -ud|--undnsmasq)\n        hello\n        echo -e \"${yellow}正在执行卸载Dnsmasq.${plain}\"\n        confirm\n        undnsmasq\n        ;;\n        -us|--unsniproxy)\n        hello\n        echo -e \"${yellow}正在执行卸载SNI Proxy.${plain}\"\n        confirm\n        unsniproxy\n        ;;\n        -h|--help|*)\n        help\n        ;;\n    esac\nelse\n    help\nfi\n"
        },
        {
          "name": "proxy-domains.txt",
          "type": "blob",
          "size": 1.9033203125,
          "content": "akadns.net\nakam.net\nakamai.com\nakamai.net\nakamaiedge.net\nakamaihd.net\nakamaistream.net\nakamaitech.net\nakamaitechnologies.com\nakamaitechnologies.fr\nakamaized.net\nedgekey.net\nedgesuite.net\nsrip.net\nfootprint.net\nlevel3.net\nllnwd.net\nedgecastcdn.net\ncloudfront.net\nnetflix.com\nnetflix.net\nnflximg.com\nnflximg.net\nnflxvideo.net\nnflxso.net\nnflxext.com\nhulu.com\nhuluim.com\nhbo.com\nhbonow.com\nhbomax.com\nhbomaxcdn.com\nhboasia.com\nhbogoasia.com\nmax.com\nwarnermediacdn.com\nwmcdp.io\nngtv.io\npypestream.com\narkoselabs.com\namazon.com\namazon.co.uk\namazonvideo.com\ncrackle.com\npandora.com\nvudu.com\nblinkbox.com\nabc.com\nfox.com\ntheplatform.com\nnbc.com\nnbcuni.com\nip2location.com\npbs.org\nwarnerbros.com\nsouthpark.cc.com\ncbs.com\nbrightcove.com\ncwtv.com\nspike.com\ngo.com\nmtv.com\nmtvnservices.com\nplaystation.net\nuplynk.com\nmaxmind.com\ndisney.com\ndisneyjunior.com\nadobedtm.com\nbam.nr-data.net\nbamgrid.com\nbraze.com\ncdn.optimizely.com\ncdn.registerdisney.go.com\ncws.conviva.com\nd9.flashtalking.com\ndisney-plus.net\ndisney-portal.my.onetrust.com\ndisney.demdex.net\ndisney.my.sentry.io\ndisneyplus.bn5x.net\ndisneyplus.com\ndisneyplus.com.ssl.sc.omtrdc.net\ndisneystreaming.com\ndssott.com\nexecute-api.us-east-1.amazonaws.com\njs-agent.newrelic.com\nxboxlive.com\nlovefilm.com\nturner.com\namctv.com\nsho.com\nmog.com\nwdtvlive.com\nbeinsportsconnect.tv\nbeinsportsconnect.net\nfig.bbc.co.uk\nopen.live.bbc.co.uk\nsa.bbc.co.uk\nwww.bbc.co.uk\ncrunchyroll.com\nifconfig.co\nomtrdc.net\nsling.com\nmovetv.com\nhappyon.jp\nabema.tv\nhulu.jp\noptus.com.au\noptusnet.com.au\ngamer.com.tw\nbahamut.com.tw\nhinet.net\ndmm.com\ndmm.co.jp\ndmm-extension.com\ndmmapis.com\nvideomarket.jp\np-smith.com\nimg.vm-movie.jp\nsaima.zlzd.xyz\nchallenges.cloudflare.com\nai.com\nopenai.com\ncdn.oaistatic.com\naiv-cdn.net\naiv-delivery.net\namazonprimevideo.cn\namazonprimevideo.com.cn\namazonprimevideos.com\namazonvideo.cc\nmedia-amazon.com\nprime-video.com\nprimevideo.cc\nprimevideo.com\nprimevideo.info\nprimevideo.org\nprimevideo.tv\npv-cdn.net\n"
        },
        {
          "name": "sniproxy.conf",
          "type": "blob",
          "size": 0.4775390625,
          "content": "user daemon\npidfile /var/tmp/sniproxy.pid\n\nerror_log {\n    syslog daemon\n    priority notice\n}\n\nresolver {\n    nameserver 8.8.8.8\n    nameserver 8.8.4.4 # local dns should be better\n    mode ipv4_only\n}\nlistener 0.0.0.0:80 {\n    proto http\n    access_log {\n        filename /var/log/sniproxy/http_access.log\n        priority notice\n    }\n}\nlistener 0.0.0.0:443 {\n    proto tls\n    access_log {\n        filename /var/log/sniproxy/https_access.log\n        priority notice\n    }\n}\n\ntable {\n\n}"
        },
        {
          "name": "sniproxy.default",
          "type": "blob",
          "size": 0.3662109375,
          "content": "# Defaults for sniproxy initscript\n\n# This file has two functions:\n# 1) to completely disable starting sniproxy,\n# 2) to select an alternative config file\n#    by setting DAEMON_ARGS to -c <file>\n\n# Additional options that are passed to the Daemon.\nDAEMON_ARGS=\"-c /etc/sniproxy.conf\"\n\n# Whether or not to run the sniproxy daemon; set to 0 to disable, 1 to enable.\nENABLED=1\n"
        },
        {
          "name": "sniproxy.service",
          "type": "blob",
          "size": 0.28515625,
          "content": "[Unit]\nDescription=Sniproxy\nAfter=network-online.target\nWants=network-online.target\n\n[Service]\nLimitCORE=infinity\nLimitNOFILE=512000\nLimitNPROC=512000\nType=forking\nUser=root\nRestart=always\nRestartSec=5s\nExecStart=/usr/sbin/sniproxy -c /etc/sniproxy.conf\n\n[Install]\nWantedBy=multi-user.target\n"
        },
        {
          "name": "sniproxy",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}