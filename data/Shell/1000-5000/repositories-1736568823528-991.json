{
  "metadata": {
    "timestamp": 1736568823528,
    "page": 991,
    "hasNextPage": false,
    "endCursor": "Y3Vyc29yOjk5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "moritz-wundke/Boost-for-Android",
      "stars": 1022,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".drone.yml",
          "type": "blob",
          "size": 0.1650390625,
          "content": "kind: pipeline\nname: default\n\nsteps:\n- name: build\n  image: jhasse/android-ndk:r19b\n  commands:\n  - ./build-android.sh $ANDROID_HOME/ndk-bundle | grep -v '^common.copy'\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0341796875,
          "content": "*        text=auto\n*.sh     eol=lf\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0498046875,
          "content": "boost_*\nbuild\n*~\nlogs\nbuild.log\n*.swp\n*.vim\n\n.idea\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.044921875,
          "content": "MIT License\n\nCopyright (c) 2024 Moritz Wundke\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.265625,
          "content": "# Boost for Android [![Build Status: GitHub Actions](https://github.com/moritz-wundke/Boost-for-Android/workflows/CI/badge.svg)](https://github.com/moritz-wundke/Boost-for-Android/actions)\nBoost for android is a set of tools to compile the main part of the [Boost C++ Libraries](http://www.boost.org/) for the Android platform.\n\nCurrently supported boost versions are 1.45.0, 1.48.0, 1.49.0, 1.53.0, 1.54.0, 1.55.0, 1.65.1, 1.66.0, 1.67.0, 1.68.0, 1.69.0, 1.70.0, 1.71.0, 1.73.0, 1.74.0, 1.76.0, 1.77.0, 1.78.0, 1.79.0, 1.80.0, 1.82.0, 1.83.0, 1.84.0, and 1.85.0\n\nx86, mips, and 64-bit architectures are built with Boost 1.65.1 and NDK r16-beta2, this version uses clang toolchain with llvm libc++ STL library.\n\nOther versions of Boost are built only for arm architecture, they are using gcc toolchain and gnustl library.\n\nTo compile Boost for Android you may use one of the following NDKs:\n\n| NDK / boost | 1.45 | 1.48 | 1.49 | 1.53 | 1.65 | 1.66 | 1.67 | 1.68 | 1.69 | 1.70 | 1.71 | 1.73 | 1.74 | 1.76 | 1.77 | 1.78 | 1.79 | 1.80 | 1.82 | 1.83 | 1.84 | 1.85 |\n| ----------- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- | ---- |\n| r4 customized by [Dmitry Moskalchuk aka CrystaX](http://www.crystax.net/android/ndk.php). | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r5 from the [official android repository](http://developer.android.com).                  | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r5 customized by [CrystaX](http://www.crystax.net/android/ndk.php).                       | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r7 customized by [CrystaX](http://www.crystax.net/android/ndk.php).                       | x | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r8 from the [official android repository](http://developer.android.com).                  | x | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r8b from the [official android repository](http://developer.android.com).                 |   | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r8c from the [official android repository](http://developer.android.com).                 |   |   | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r8d from the [official android repository](http://developer.android.com).                 |   |   | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r8e from the [official android repository](http://developer.android.com).                 |   |   | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r10 from the [official android repository](http://developer.android.com).                 |   |   | x | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r16 from the [official android repository](http://developer.android.com).                 |   |   |   |   | x | x | x | x |   | x |   |   |   |   |   |   |   |   |   |   |   |   |\n| r17b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   | x | x |   | x |   |   |   |   |   |   |   |   |   |   |   |   |\n| r18 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   | x |   |   |   |   |   |   |   |   |   |   |   |   |   |   |\n| r18b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   | x | x | x |   |   |   |   |   |   |   |   |   |   |   |   |\n| r19 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r19b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r19c from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r20 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r20b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r21 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r21b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r21c from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r21d from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r21e from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   | x | x | x | x | x |   |   |   |   |   |   |   |   |   |\n| r23 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r23b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r25 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r25b from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r25c from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r26 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r26d from the [official android repository](http://developer.android.com).                |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n| r27 from the [official android repository](http://developer.android.com).                 |   |   |   |   |   |   |   |   |   |   |   |   | x | x | x | x | x | x | x | x | x | x |\n\nFor NDK from r4 to r10, GCC with gnustl_static runtime library is used, only ARM architecture is supported.\n\nFor NDK from r16 to r18b, clang with c++_static runtime library is used, all architectures are supported.\n\nFor NDK from r19 and up, clang with c++_shared runtime library is used, all architectures are supported.\n\n# Quick Start\n\n## Dependencies\n\n * NDK ([official](http://developer.android.com) or [customized by CrystaX](http://www.crystax.net/android/ndk.php))\n * GNU Make\n * autoconf, automake, libtool, pkg-config\n\n## Usage\n\n### Compiling\n\nLinux.\n```\n./build-android.sh $(NDK_ROOT)\n```\nWindows:\n```\nbuild-android.bat $(NDK_ROOT)\n```\nNOTE: Do not forget to replace backslash with slashes in `$(NDK_ROOT)`. For example set `$(NDK_ROOT)` to D:/android-ndk-r8e instead of D:\\android-ndk-r8e\n\nOn windows you will need MSYS to be able to launch the corresponding bat files (http://www.mingw.org/wiki/MSYS).\n\nThis command will download and build boost against the NDK specified and output the final headers and libs in the `build` folder. Make sure to provide an absolute path the the NDK folder!\n\nFor more info about usage and available commands use `--help`.\n\n### Including\n\nNow that you got Boost compiled you must add it to your `Android.mk` file. Locate the `build` folder and copy the `include` and `lib` folders over to your project's `jni` folder. A recommended path inside your project is `/jni/boost/`.\n\nAdd the following to your `Android.mk` (note that here we're using Boost 1.48 and have assumed that Boost resides inside `/jni/boost`):\n\n    LOCAL_CFLAGS += -I$(LOCAL_PATH)/boost/include/boost-1_48\n    LOCAL_LDLIBS += -L$(LOCAL_PATH)/boost/lib/ -lboost_system -lboost_...\n\n    LOCAL_CPPFLAGS += -fexceptions\n    LOCAL_CPPFLAGS += -frtti\n\nNow use `ndk-build` to build and have fun with it!\n\nNote that you should build your project and Boost with the same version of NDK as the C++ STL inside NDK r4 and NDK r5 are not compatible in some subtle details.\n\n## Contribute\n\nThe projects is split into two main branches, the master and devel. The master branch is where the current stable version lies and which should be used in most of the cases, the devel branch in turn is where development occurs. To contribute to the project make sure to use the devel branch which will make it easier to test changes and to merge incoming pull requests (PR).\n\n## Troubleshooting\n\nIn case you encounter bunch of linker errors when building your app with boost,\nthis might help:\n\n### Building from a 64 bit machine (Linux)\n\nMake sure you have installed the 32 bit libraries. Those are required to be able\nto use the NDK.\n\nTo install them just use the following\n\n    $ sudo apt-get install ia32-libs\n\n### NDK 7 (CrystaX)\n\nAdd `-lgnustl_static` *AFTER* all boost libraries to the LOCAL_LDLIBS line in\nAndroid.mk. Example:\n\n    LOCAL_LDLIBS += lboost_system-gcc-md lboost_thread-gcc-md -lgnustl_static\n\n### NDK 8 (official)\n\nDo everything that is in the NDK 7 Crystax section, but also\nadd full path to the gnustl_static library to the link paths. Example:\n\n    LOCAL_LDLIBS += lboost_system-gcc-md lboost_thread-gcc-md \\\n                 -L$(NDK_ROOT)/sources/cxx-stl/gnu-libstdc++/libs/armeabi \\\n                 -lgnustl_static\n\n### NDK 17 (official)\n\nSupport for ARMv5 (armeabi), MIPS, and MIPS64 has been removed. Attempting to build any of these ABIs will result in an error.\nThis project will exclude these architectures for compiling with NDK 17.\n\n\n"
        },
        {
          "name": "build-android.bat",
          "type": "blob",
          "size": 0.291015625,
          "content": "@Echo Off\n\nsh -c \"echo MSYS found. Running ./build-android.sh\"\nIf %ERRORLEVEL% EQU 0 GOTO MSYSOK\necho This script requires MSYS installed and path to its bin folder added to PATH variable\necho Read http://www.mingw.org/wiki/MSYS for more information\nGOTO:EOF\n:MSYSOK\n\nsh -c \"./build-android.sh %*\"\n"
        },
        {
          "name": "build-android.sh",
          "type": "blob",
          "size": 21.5166015625,
          "content": "#!/bin/sh\n# Copyright (C) 2010 Mystic Tree Games\n#\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Author: Moritz \"Moss\" Wundke (b.thax.dcg@gmail.com)\n#\n# <License>\n#\n# Build boost for android completly. It will download boost 1.45.0\n# prepare the build system and finally build it for android\n\nSCRIPTDIR=\"$(cd \"$(dirname \"$0\")\"; pwd)\" # \" # This extra quote fixes syntax highlighting in mcedit\n\n# Add common build methods\n. \"$SCRIPTDIR\"/build-common.sh\n\n# -----------------------\n# Command line arguments\n# -----------------------\n\nBOOST_VER1=1\nBOOST_VER2=85\nBOOST_VER3=0\nregister_option \"--boost=<version>\" boost_version \"Boost version to be used, one of {1.85.0 1.84.0 1.83.0 1.82.0 1.80.0 1.79.0 1.78.0 1.76.0 1.74.0, 1.73.0, 1.71.0, 1.70.0, 1.69.0, 1.68.0, 1.67.0, 1.66.0, 1.65.1, 1.55.0, 1.54.0, 1.53.0, 1.49.0, 1.48.0, 1.45.0}, default is 1.85.0.\"\nboost_version()\n{\n  if [ \"$1\" = \"1.85.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=85\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.84.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=84\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.83.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=83\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.82.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=82\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.80.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=80\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.79.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=79\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.78.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=78\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.77.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=77\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.76.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=76\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.74.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=74\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.73.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=73\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.71.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=71\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.70.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=70\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.69.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=69\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.68.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=68\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.67.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=67\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.66.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=66\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.65.1\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=65\n    BOOST_VER3=1\n  elif [ \"$1\" = \"1.55.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=55\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.54.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=54\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.53.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=53\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.49.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=49\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.48.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=48\n    BOOST_VER3=0\n  elif [ \"$1\" = \"1.45.0\" ]; then\n    BOOST_VER1=1\n    BOOST_VER2=45\n    BOOST_VER3=0\n  else\n    echo \"Unsupported boost version '$1'.\"\n    exit 1\n  fi\n}\n\nregister_option \"--toolchain=<toolchain>\" select_toolchain \"Select a toolchain. To see available execute ls -l ANDROID_NDK/toolchains.\"\nselect_toolchain () {\n    TOOLCHAIN=$1\n}\n\nCLEAN=no\nregister_option \"--clean\"    do_clean     \"Delete all previously downloaded and built files, then exit.\"\ndo_clean () {\tCLEAN=yes; }\n\nDOWNLOAD=no\nregister_option \"--download\" do_download  \"Only download required files and clean up previus build. No build will be performed.\"\n\ndo_download ()\n{\n\tDOWNLOAD=yes\n\t# Clean previus stuff too!\n\tCLEAN=yes\n}\n\n#LIBRARIES=--with-libraries=date_time,filesystem,program_options,regex,signals,system,thread,iostreams,locale\nLIBRARIES=\nregister_option \"--with-libraries=<list>\" do_with_libraries \"Comma separated list of libraries to build.\"\ndo_with_libraries () {\n  for lib in $(echo $1 | tr ',' '\\n') ; do LIBRARIES=\"--with-$lib ${LIBRARIES}\"; done\n}\n\nregister_option \"--without-libraries=<list>\" do_without_libraries \"Comma separated list of libraries to exclude from the build.\"\ndo_without_libraries () {\tLIBRARIES=\"--without-libraries=$1\"; }\ndo_without_libraries () {\n  for lib in $(echo $1 | tr ',' '\\n') ; do LIBRARIES=\"--without-$lib ${LIBRARIES}\"; done\n}\n\nLAYOUT=versioned\nregister_option \"--layout=<layout>\" do_layout \"Library naming layout [versioned, tagged, system].\"\ndo_layout () {\n\tLAYOUT=$1;\n}\n\nregister_option \"--prefix=<path>\" do_prefix \"Prefix to be used when installing libraries and includes.\"\ndo_prefix () {\n    if [ -d $1 ]; then\n        PREFIX=$1;\n    fi\n}\n\nARCHLIST=\nregister_option \"--arch=<list>\" do_arch \"Comma separated list of architectures to build: arm64-v8a,armeabi,armeabi-v7a,mips,mips64,x86,x86_64\"\ndo_arch () {\n  for ARCH in $(echo $1 | tr ',' '\\n') ; do ARCHLIST=\"$ARCH ${ARCHLIST}\"; done\n}\n\nANDROID_TARGET_32=21\nANDROID_TARGET_64=21\nregister_option \"--target-version=<version>\" select_target_version \\\n                \"Select Android's target version\" \"$ANDROID_TARGET_32\"\nselect_target_version () {\n\n    if [ \"$1\" -lt 16 ]; then\n        ANDROID_TARGET_32=\"16\"\n        ANDROID_TARGET_64=\"21\"\n    elif [ \"$1\" = 20 ]; then\n        ANDROID_TARGET_32=\"19\"\n        ANDROID_TARGET_64=\"21\"\n    elif [ \"$1\" -lt 21 ]; then\n        ANDROID_TARGET_32=\"$1\"\n        ANDROID_TARGET_64=\"21\"\n    elif [ \"$1\" = 25 ]; then\n        ANDROID_TARGET_32=\"24\"\n        ANDROID_TARGET_64=\"24\"\n    else\n        ANDROID_TARGET_32=\"$1\"\n        ANDROID_TARGET_64=\"$1\"\n    fi\n}\n\nWITH_ICONV=\nregister_option \"--with-iconv\" do_with_iconv \"Build iconv and icu libaries, for boost-locale\"\ndo_with_iconv () {\n  WITH_ICONV=1\n}\n\nWITH_PYTHON=\nregister_option \"--with-python=</path/to/python>\" do_with_python \"Build boost-python\"\ndo_with_python () {\n  WITH_PYTHON=$1\n  for pylib in ${WITH_PYTHON}/lib/python*; do\n    pyvers_=$(basename $pylib)\n    PYTHON_VERSION=${pyvers_#python}\n    for pyinclude in ${WITH_PYTHON}/include/python${PYTHON_VERSION}*; do\n        PYTHON_INCLUDE_DIR=${pyinclude}\n    done\n  done\n}\n\nPROGRAM_PARAMETERS=\"<ndk-root>\"\nPROGRAM_DESCRIPTION=\\\n\"       Boost For Android\\n\"\\\n\"Copyright (C) 2010 Mystic Tree Games\\n\"\\\n\nextract_parameters $@\n\necho \"Building boost version: $BOOST_VER1.$BOOST_VER2.$BOOST_VER3\"\n\n# -----------------------\n# Build constants\n# -----------------------\n\nBOOST_DOWNLOAD_LINK=\"https://archives.boost.io/release/$BOOST_VER1.$BOOST_VER2.$BOOST_VER3/source/boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}.tar.bz2\"\nBOOST_TAR=\"boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}.tar.bz2\"\nBOOST_DIR=\"boost_${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}\"\nBUILD_DIR=\"./build/\"\n\n# -----------------------\n\nif [ $CLEAN = yes ] ; then\n\techo \"Cleaning: $BUILD_DIR\"\n\trm -f -r $PROGDIR/$BUILD_DIR\n\n\techo \"Cleaning: $BOOST_DIR\"\n\trm -f -r $PROGDIR/$BOOST_DIR\n\n\techo \"Cleaning: $BOOST_TAR\"\n\trm -f $PROGDIR/$BOOST_TAR\n\n\techo \"Cleaning: logs\"\n\trm -f -r logs\n\trm -f build.log\n\n  [ \"$DOWNLOAD\" = \"yes\" ] || exit 0\nfi\n\n# It is almost never desirable to have the boost-X_Y_Z directory from\n# previous builds as this script doesn't check in which state it's\n# been left (bootstrapped, patched, built, ...). Unless maybe during\n# a debug, in which case it's easy for a developer to comment out\n# this code.\n\nif [ -d \"$PROGDIR/$BOOST_DIR\" ]; then\n\techo \"Cleaning: $BOOST_DIR\"\n\trm -f -r $PROGDIR/$BOOST_DIR\nfi\n\nif [ -d \"$PROGDIR/$BUILD_DIR\" ]; then\n\techo \"Cleaning: $BUILD_DIR\"\n\trm -f -r $PROGDIR/$BUILD_DIR\nfi\n\n\nAndroidNDKRoot=$PARAMETERS\nif [ -z \"$AndroidNDKRoot\" ] ; then\n  if [ -n \"${ANDROID_BUILD_TOP}\" ]; then # building from Android sources\n    AndroidNDKRoot=\"${ANDROID_BUILD_TOP}/prebuilts/ndk/current\"\n    export AndroidSourcesDetected=1\n  elif [ -z \"`which ndk-build`\" ]; then\n    dump \"ERROR: You need to provide a <ndk-root>!\"\n    exit 1\n  else\n    AndroidNDKRoot=`which ndk-build`\n    AndroidNDKRoot=`dirname $AndroidNDKRoot`\n  fi\n  echo \"Using AndroidNDKRoot = $AndroidNDKRoot\"\nelse\n  # User passed the NDK root as a parameter. Make sure the directory\n  # exists and make it an absolute path. \".cmd\" is for Windows support.\n  if [ ! -f \"$AndroidNDKRoot/ndk-build\" ] && [ ! -f \"$AndroidNDKRoot/ndk-build.cmd\" ]; then\n    dump \"ERROR: $AndroidNDKRoot is not a valid NDK root\"\n    exit 1\n  fi\n  AndroidNDKRoot=$(cd $AndroidNDKRoot; pwd -P)\nfi\nexport AndroidNDKRoot\n\n# Check platform patch\ncase \"$HOST_OS\" in\n    linux)\n        PlatformOS=linux\n        ;;\n    darwin|freebsd)\n        PlatformOS=darwin\n        ;;\n    windows|cygwin)\n        PlatformOS=windows\n        ;;\n    *)  # let's play safe here\n        PlatformOS=linux\nesac\n\nNDK_RELEASE_FILE=$AndroidNDKRoot\"/RELEASE.TXT\"\nif [ -f \"${NDK_RELEASE_FILE}\" ]; then\n    NDK_RN=`cat $NDK_RELEASE_FILE | sed 's/^r\\(.*\\)$/\\1/g'`\nelif [ -n \"${AndroidSourcesDetected}\" ]; then\n    if [ -f \"${ANDROID_BUILD_TOP}/ndk/docs/CHANGES.html\" ]; then\n        NDK_RELEASE_FILE=\"${ANDROID_BUILD_TOP}/ndk/docs/CHANGES.html\"\n        NDK_RN=`grep \"android-ndk-\" \"${NDK_RELEASE_FILE}\" | head -1 | sed 's/^.*r\\(.*\\)$/\\1/'`\n    elif [ -f \"${ANDROID_BUILD_TOP}/ndk/docs/text/CHANGES.text\" ]; then\n        NDK_RELEASE_FILE=\"${ANDROID_BUILD_TOP}/ndk/docs/text/CHANGES.text\"\n        NDK_RN=`grep \"android-ndk-\" \"${NDK_RELEASE_FILE}\" | head -1 | sed 's/^.*r\\(.*\\)$/\\1/'`\n    else\n        dump \"ERROR: can not find ndk version\"\n        exit 1\n    fi\nelse\n    NDK_RELEASE_FILE=$AndroidNDKRoot\"/source.properties\"\n    if [ -f \"${NDK_RELEASE_FILE}\" ]; then\n        NDK_RN=`cat $NDK_RELEASE_FILE | grep 'Pkg.Revision' | sed -E 's/^.*[=] *([0-9]+[.][0-9]+)[.].*/\\1/g'`\n    else\n        dump \"ERROR: can not find ndk version\"\n        exit 1\n    fi\nfi\n\necho \"Detected Android NDK version $NDK_RN\"\n\nCONFIG_VARIANT=boost\n\ncase \"$NDK_RN\" in\n\t4*)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-eabi-4.4.0}\n\t\tCXXPATH=$AndroidNDKRoot/build/prebuilt/$PlatformOS-x86/${TOOLCHAIN}/bin/arm-eabi-g++\n\t\tTOOLSET=gcc-androidR4\n\t\t;;\n\t5*)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.4.3}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/$PlatformOS-x86/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR5\n\t\t;;\n\t7-crystax-5.beta3)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6.3}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/$PlatformOS-x86/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR7crystax5beta3\n\t\t;;\n\t8)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.4.3}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/$PlatformOS-x86/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8\n\t\t;;\n\t8b|8c|8d)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/$PlatformOS-x86/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8b\n\t\t;;\n\t8e|9|9b|9c|9d)\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/$PlatformOS-x86/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8e\n\t\t;;\n\t\"8e (64-bit)\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8e\n\t\t;;\n\t\"9 (64-bit)\"|\"9b (64-bit)\"|\"9c (64-bit)\"|\"9d (64-bit)\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8e\n\t\t;;\n\t\"10 (64-bit)\"|\"10b (64-bit)\"|\"10c (64-bit)\"|\"10d (64-bit)\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8e\n\t\t;;\n\t\"10 (64-bit)\"|\"10b (64-bit)\"|\"10c (64-bit)\"|\"10d (64-bit)\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-arm-linux-androideabi-4.6}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/arm-linux-androideabi-g++\n\t\tTOOLSET=gcc-androidR8e\n\t\t;;\n\t\"16.0\"|\"16.1\"|\"17.1\"|\"17.2\"|\"18.0\"|\"18.1\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-llvm}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/clang++\n\t\tTOOLSET=clang\n\t\t;;\n\t\"19.0\"|\"19.1\"|\"19.2\"|\"20.0\"|\"20.1\"|\"21.0\"|\"21.1\"|\"21.2\"|\"21.3\"|\"21.4\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-llvm}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/clang++\n\t\tTOOLSET=clang\n\t\tCONFIG_VARIANT=ndk19\n\t\t;;\n\t\"22.1\"|\"23.0\"|\"23.1\"|\"23.2\"|\"25.0\"|\"25.1\"|\"25.2\"|\"26.0\"|\"26.1\"|\"26.2\"|\"26.3\"|\"27.0\")\n\t\tTOOLCHAIN=${TOOLCHAIN:-llvm}\n\t\tCXXPATH=$AndroidNDKRoot/toolchains/${TOOLCHAIN}/prebuilt/${PlatformOS}-x86_64/bin/clang++\n\t\tTOOLSET=clang\n\t\tCONFIG_VARIANT=ndk23\n\t\t;;\n\t*)\n\t\techo \"Undefined or not supported Android NDK version: $NDK_RN\"\n\t\texit 1\nesac\n\nif [ -n \"${AndroidSourcesDetected}\" -a \"${TOOLSET}\" '!=' \"clang\" ]; then # Overwrite CXXPATH if we are building from Android sources\n    CXXPATH=\"${ANDROID_TOOLCHAIN}/arm-linux-androideabi-g++\"\nfi\n\nif [ -z \"${ARCHLIST}\" ]; then\n  ARCHLIST=armeabi-v7a\n  if [ \"$TOOLSET\" = \"clang\" ]; then\n\n    case \"$NDK_RN\" in\n      # NDK 17+: Support for ARMv5 (armeabi), MIPS, and MIPS64 has been removed.\n      \"17.1\"|\"17.2\"|\"18.0\"|\"18.1\"|\"19.0\"|\"19.1\"|\"19.2\"|\"20.0\"|\"20.1\"|\"21.0\"|\"21.1\"|\"21.2\"|\"21.3\"|\"21.4\"|\"22.1\"|\"23.0\"|\"23.1\"|\"23.2\"|\"25.0\"|\"25.1\"|\"25.2\"|\"26.0\"|\"26.1\"|\"26.2\"|\"26.3\"|\"27.0\")\n        ARCHLIST=\"arm64-v8a armeabi-v7a x86 x86_64\"\n        ;;\n      *)\n        ARCHLIST=\"arm64-v8a armeabi armeabi-v7a mips mips64 x86 x86_64\"\n    esac\n  fi\nfi\n\nif [ \"${ARCHLIST}\" '!=' \"armeabi\" ] && [ \"${TOOLSET}\" '!=' \"clang\" ]; then\n    echo \"Old NDK versions only support ARM architecture\"\n    exit 1\nfi\n\necho Building with TOOLSET=$TOOLSET CONFIG_VARIANT=${CONFIG_VARIANT} CXXPATH=$CXXPATH CFLAGS=$CFLAGS CXXFLAGS=$CXXFLAGS | tee $PROGDIR/build.log\n\n# Check if the ndk is valid or not\nif [ ! -f $CXXPATH ]\nthen\n\techo \"Cannot find C++ compiler at: $CXXPATH\"\n\texit 1\nfi\n\n# -----------------------\n# Download required files\n# -----------------------\n\n# Downalod and unzip boost in a temporal folder and\nif [ ! -f $BOOST_TAR ]\nthen\n\techo \"Downloading boost ${BOOST_VER1}.${BOOST_VER2}.${BOOST_VER3} please wait...\"\n\tprepare_download\n\tdownload_file $BOOST_DOWNLOAD_LINK $PROGDIR/$BOOST_TAR\nfi\n\nif [ ! -f $PROGDIR/$BOOST_TAR ]\nthen\n\techo \"Failed to download boost! Please download boost ${BOOST_VER1}.${BOOST_VER2}.${BOOST_VER3} manually\\nand save it in this directory as $BOOST_TAR\"\n\texit 1\nfi\n\nif [ ! -d $PROGDIR/$BOOST_DIR ]\nthen\n\techo \"Unpacking boost\"\n\tif [ \"$OPTION_PROGRESS\" = \"yes\" ] ; then\n\t\tpv $PROGDIR/$BOOST_TAR | tar xjf - -C $PROGDIR\n\telse\n\t\ttar xjf $PROGDIR/$BOOST_TAR\n\tfi\nfi\n\nif [ $DOWNLOAD = yes ] ; then\n\techo \"All required files has been downloaded and unpacked!\"\n\texit 0\nfi\n\n# ---------\n# Bootstrap\n# ---------\nif [ ! -f ./$BOOST_DIR/b2 ]\nthen\n  # Make the initial bootstrap\n  echo \"Performing boost bootstrap\"\n\n  cd $BOOST_DIR\n  case \"$HOST_OS\" in\n    windows)\n        cmd //c \"bootstrap.bat\" 2>&1 | tee -a $PROGDIR/build.log\n        ;;\n    *)  # Linux and others\n        ./bootstrap.sh 2>&1 | tee -a $PROGDIR/build.log\n    esac\n\n\n  if [ $? != 0 ] ; then\n  \tdump \"ERROR: Could not perform boostrap! See $TMPLOG for more info.\"\n  \texit 1\n  fi\n  cd $PROGDIR\n\n  # -------------------------------------------------------------\n  # Patching will be done only if we had a successfull bootstrap!\n  # -------------------------------------------------------------\n\n  # Apply patches to boost\n  BOOST_VER=${BOOST_VER1}_${BOOST_VER2}_${BOOST_VER3}\n  PATCH_BOOST_DIR=\"$SCRIPTDIR/patches/boost-${BOOST_VER}\"\n\n  if [ \"$TOOLSET\" = \"clang\" ]; then\n      cp \"$SCRIPTDIR\"/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}.jam $BOOST_DIR/tools/build/src/user-config.jam || exit 1\n      for FILE in \"$SCRIPTDIR\"/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}-*.jam; do\n          ARCH=\"`echo $FILE | sed s%$SCRIPTDIR/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}-%% | sed s/[.]jam//`\"\n          if [ \"$ARCH\" = \"common\" ]; then\n              continue\n          fi\n          JAMARCH=\"`echo ${ARCH} | tr -d '_-'`\" # Remove all dashes, b2 does not like them\n          sed \"s/%ARCH%/${JAMARCH}/g\" \"$SCRIPTDIR\"/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}-common.jam >> $BOOST_DIR/tools/build/src/user-config.jam || exit 1\n          cat \"$SCRIPTDIR\"/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}-$ARCH.jam >> $BOOST_DIR/tools/build/src/user-config.jam || exit 1\n          echo ';' >> $BOOST_DIR/tools/build/src/user-config.jam || exit 1\n      done\n  else\n      cp \"$SCRIPTDIR\"/configs/user-config-${CONFIG_VARIANT}-${BOOST_VER}.jam $BOOST_DIR/tools/build/v2/user-config.jam || exit 1\n  fi\n\n  if [ -n \"$WITH_PYTHON\" ]; then\n    echo \"Sed: $WITH_PYTHON\"\n    sed -e \"s:%PYTHON_VERSION%:${PYTHON_VERSION}:g;s:%PYTHON_INSTALL_DIR%:${WITH_PYTHON}:g;s:%PYTHON_INCLUDE_DIR%:${PYTHON_INCLUDE_DIR}:g\" \"$SCRIPTDIR\"/configs/user-config-python.jam >> $BOOST_DIR/tools/build/src/user-config-python.jam || exit 1\n    cat $BOOST_DIR/tools/build/src/user-config-python.jam >> $BOOST_DIR/tools/build/src/user-config.jam\n  fi\n\n  for dir in $PATCH_BOOST_DIR; do\n    if [ ! -d \"$dir\" ]; then\n      echo \"Could not find directory '$dir' while looking for patches\"\n      exit 1\n    fi\n\n    PATCHES=`(cd $dir && ls *.patch | sort) 2> /dev/null`\n\n    if [ -z \"$PATCHES\" ]; then\n      echo \"No patches found in directory '$dir'\"\n      exit 1\n    fi\n\n    for PATCH in $PATCHES; do\n      PATCH=`echo $PATCH | sed -e s%^\\./%%g`\n      SRC_DIR=$PROGDIR/$BOOST_DIR\n      PATCHDIR=`dirname $PATCH`\n      PATCHNAME=`basename $PATCH`\n      log \"Applying $PATCHNAME into $SRC_DIR/$PATCHDIR\"\n      cd $SRC_DIR && patch -p1 < $dir/$PATCH && cd $PROGDIR\n      if [ $? != 0 ] ; then\n        dump \"ERROR: Patch failure !! Please check your patches directory!\"\n        dump \"       Try to perform a clean build using --clean .\"\n        dump \"       Problem patch: $dir/$PATCHNAME\"\n        exit 1\n      fi\n    done\n  done\nfi\n\necho \"# ---------------\"\necho \"# Build using NDK\"\necho \"# ---------------\"\n\nif [ -z \"$NCPU\" ]; then\n\tNCPU=4\n\tif uname -s | grep -i \"linux\" > /dev/null ; then\n\t\tNCPU=`cat /proc/cpuinfo | grep -c -i processor`\n\tfi\nfi\n\nfor ARCH in $ARCHLIST; do\n\necho \"Building boost for android for $ARCH\"\n(\n\n  if [ -n \"$WITH_ICONV\" ] || echo $LIBRARIES | grep locale; then\n    if [ -e libiconv-libicu-android ]; then\n      echo \"ICONV and ICU already downloaded\"\n    else\n      echo \"Downloading libiconv-libicu-android repo\"\n      git clone --depth=1 https://github.com/pelya/libiconv-libicu-android.git || exit 1\n    fi\n    if [ -e libiconv-libicu-android/$ARCH/libicuuc.a ]; then\n      echo \"ICONV and ICU already compiled\"\n    else\n      echo \"boost_locale selected - compiling ICONV and ICU\"\n      cd libiconv-libicu-android\n      ARCHS=$ARCH PATH=$AndroidNDKRoot:$PATH ./build.sh || exit 1\n      cd ..\n    fi\n  fi\n\n  cd $BOOST_DIR\n\n  echo \"Adding pathname: `dirname $CXXPATH`\"\n  # `AndroidBinariesPath` could be used by user-config-*.jam\n  export AndroidBinariesPath=`dirname $CXXPATH`\n  export PATH=$AndroidBinariesPath:$PATH\n  export AndroidNDKRoot=$AndroidNDKRoot\n  export AndroidTargetVersion32=$ANDROID_TARGET_32\n  export AndroidTargetVersion64=$ANDROID_TARGET_64\n  export NO_BZIP2=1\n  export PlatformOS=$PlatformOS\n\n  cflags=\"\"\n  for flag in $CFLAGS; do cflags=\"$cflags cflags=$flag\"; done\n  cxxflags=\"\"\n  for flag in $CXXFLAGS; do cxxflags=\"$cxxflags cxxflags=$flag\"; done\n\n  LIBRARIES_BROKEN=\"\"\n  if [ \"$TOOLSET\" = \"clang\" ]; then\n      JAMARCH=\"`echo ${ARCH} | tr -d '_-'`\" # Remove all dashes, b2 does not like them\n      TOOLSET_ARCH=${TOOLSET}-${JAMARCH}\n      TARGET_OS=android\n      if [ \"$ARCH\" = \"armeabi\" ]; then\n          if [ -z \"$LIBRARIES\" ]; then\n              echo \"Disabling boost_math library on armeabi architecture, because of broken toolchain\" | tee -a $PROGDIR/build.log\n              LIBRARIES_BROKEN=\"--without-math\"\n          elif echo $LIBRARIES | grep math; then\n            dump \"ERROR: Cannot build boost_math library for armeabi architecture because of broken toolchain\"\n            dump \"       However, it is explicitly included\"\n            exit 1\n          fi\n      fi\n  else\n      TOOLSET_ARCH=${TOOLSET}\n      TARGET_OS=linux\n  fi\n  if [ -n \"$WITH_PYTHON\" ]; then\n    WITHOUT_LIBRARIES=\n    PYTHON_BUILD=python=${PYTHON_VERSION}\n  else\n    WITHOUT_LIBRARIES=--without-python\n    PYTHON_BUILD=\n  fi\n\n  if [ -n \"$LIBRARIES\" ]; then\n      unset WITHOUT_LIBRARIES\n  fi\n\n  {\n    ./b2 -q                          \\\n        -d+2                         \\\n        --ignore-site-config         \\\n        -j$NCPU                      \\\n        target-os=${TARGET_OS}       \\\n        toolset=${TOOLSET_ARCH}      \\\n        $cflags                      \\\n        $cxxflags                    \\\n        link=static                  \\\n        threading=multi              \\\n        --layout=${LAYOUT}           \\\n        $WITHOUT_LIBRARIES           \\\n        $PYTHON_BUILD                \\\n        -sICONV_PATH=`pwd`/../libiconv-libicu-android/$ARCH \\\n        -sICU_PATH=`pwd`/../libiconv-libicu-android/$ARCH \\\n        --build-dir=\"./../$BUILD_DIR/build/$ARCH\" \\\n        --prefix=\"./../$BUILD_DIR/out/$ARCH\" \\\n        $LIBRARIES                   \\\n        $LIBRARIES_BROKEN            \\\n        install 2>&1                 \\\n        || { dump \"ERROR: Failed to build boost for android for $ARCH!\" ; rm -rf ./../$BUILD_DIR/out/$ARCH ; exit 1 ; }\n  } | tee -a $PROGDIR/build.log\n\n  # PIPESTATUS variable is defined only in Bash, and we are using /bin/sh, which is not Bash on newer Debian/Ubuntu\n)\n\ndump \"Done!\"\n\nif [ $PREFIX ]; then\n    echo \"Prefix set, copying files to $PREFIX\"\n    mkdir -p $PREFIX/$ARCH\n    cp -r $PROGDIR/$BUILD_DIR/out/$ARCH/lib $PREFIX/$ARCH/\n    cp -r $PROGDIR/$BUILD_DIR/out/$ARCH/include $PREFIX/$ARCH/\nfi\n\ndone # for ARCH in $ARCHLIST\n"
        },
        {
          "name": "build-common.sh",
          "type": "blob",
          "size": 15.13671875,
          "content": "#!/bin/sh\n#\n# Copyright (C) 2010 Mystic Tree Games\n# Licensed under the Apache License, Version 2.0 (the \"License\");\n# you may not use this file except in compliance with the License.\n# You may obtain a copy of the License at\n#\n#      http://www.apache.org/licenses/LICENSE-2.0\n#\n# Unless required by applicable law or agreed to in writing, software\n# distributed under the License is distributed on an \"AS IS\" BASIS,\n# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n# See the License for the specific language governing permissions and\n# limitations under the License.\n#\n# Author: Moritz \"Moss\" Wundke (b.thax.dcg@gmail.com)\n#\n# <License>\n#\n# Adapted common build methods from NDK-Common.sh and prebuilt-common.sh\n# from the Android NDK\n#\n\n# Current script name into PROGNAME\nPROGNAME=`basename $0`\nPROGDIR=`pwd`\n\n## Logging support\n##\nVERBOSE=${VERBOSE-yes}\nVERBOSE2=${VERBOSE2-no}\n\nTMPLOG=\n\n# Setup a log file where all log() and log2() output will be sent\n#\n# $1: log file path  (optional)\n#\nsetup_log_file ()\n{\n    if [ -n \"$1\" ] ; then\n        TMPLOG=\"$1\"\n    else\n\t\tmkdir -p $PROGDIR/logs/\n        TMPLOG=$PROGDIR/logs/myst-log-$$.log\n    fi\n    rm -f $TMPLOG && touch $TMPLOG\n    echo \"To follow build in another terminal, please use: tail -F $TMPLOG\"\n}\n\ndump ()\n{\n    if [ -n \"$TMPLOG\" ] ; then\n        echo \"$@\" >> $TMPLOG\n    fi\n    echo \"$@\"\n}\n\nlog ()\n{\n    if [ \"$VERBOSE\" = \"yes\" ] ; then\n        echo \"$@\"\n    else\n        if [ \"$TMPLOG\" ] ; then\n            echo \"$@\" >> $TMPLOG\n        fi\n    fi\n}\n\nlog2 ()\n{\n    if [ \"$VERBOSE2\" = \"yes\" ] ; then\n        echo \"$@\"\n    else\n        if [ -n \"$TMPLOG\" ] ; then\n            echo \"$@\" >> $TMPLOG\n        fi\n    fi\n}\n\nrun ()\n{\n    if [ \"$VERBOSE\" = \"yes\" ] ; then\n        echo \"##### NEW COMMAND\"\n        echo \"$@\"\n        $@ 2>&1\n    else\n        if [ -n \"$TMPLOG\" ] ; then\n            echo \"##### NEW COMMAND\" >> $TMPLOG\n            echo \"$@\" >> $TMPLOG\n            $@ 2>&1 | tee -a $TMPLOG\n        else\n            $@ > /dev/null 2>&1\n        fi\n    fi\n}\n\n## Utilities\n##\n\n# Generate a random temp directory\nrandom_temp_directory ()\n{\n    mktemp -d /tmp/myst-dir-XXXXXX\n}\n\n# return the value of a given named variable\n# $1: variable name\n#\n# example:\n#    FOO=BAR\n#    BAR=ZOO\n#    echo `var_value $FOO`\n#    will print 'ZOO'\n#\nvar_value ()\n{\n    # find a better way to do that ?\n    eval echo \"$`echo $1`\"\n}\n\n# convert to uppercase\n# assumes tr is installed on the platform ?\n#\nto_uppercase ()\n{\n    echo $1 | tr \"[:lower:]\" \"[:upper:]\"\n}\n\n## Normalize OS and CPU\n##\nHOST_ARCH=`uname -m`\ncase \"$HOST_ARCH\" in\n    i?86) HOST_ARCH=x86\n    ;;\n    amd64) HOST_ARCH=x86_64\n    ;;\n    powerpc) HOST_ARCH=ppc\n    ;;\nesac\n\nlog2 \"HOST_ARCH=$HOST_ARCH\"\n\n# at this point, the supported values for CPU are:\n#   x86\n#   x86_64\n#   ppc\n#\n# other values may be possible but haven't been tested\n#\nHOST_EXE=\"\"\nHOST_OS=`uname -s`\ncase \"$HOST_OS\" in\n    Darwin)\n        HOST_OS=darwin\n        ;;\n    Linux)\n        # note that building  32-bit binaries on x86_64 is handled later\n        HOST_OS=linux\n        ;;\n    FreeBsd)  # note: this is not tested\n        HOST_OS=freebsd\n        ;;\n    CYGWIN*|*_NT-*)\n        HOST_OS=windows\n        HOST_EXE=.exe\n        if [ \"x$OSTYPE\" = xcygwin ] ; then\n            HOST_OS=cygwin\n        fi\n        ;;\nesac\n\nlog2 \"HOST_OS=$HOST_OS\"\nlog2 \"HOST_EXE=$HOST_EXE\"\n\n# at this point, the value of HOST_OS should be one of the following:\n#   linux\n#   darwin\n#    windows (MSys)\n#    cygwin\n#\n# Note that cygwin is treated as a special case because it behaves very differently\n# for a few things. Other values may be possible but have not been tested\n#\n\n# define HOST_TAG as a unique tag used to identify both the host OS and CPU\n# supported values are:\n#\n#   linux-x86\n#   linux-x86_64\n#   darwin-x86\n#   darwin-ppc\n#   windows\n#\n# other values are possible but were not tested.\n#\ncompute_host_tag ()\n{\n    case \"$HOST_OS\" in\n        windows|cygwin)\n            HOST_TAG=\"windows\"\n            ;;\n        *)  HOST_TAG=\"${HOST_OS}-${HOST_ARCH}\"\n    esac\n    log2 \"HOST_TAG=$HOST_TAG\"\n}\n\ncompute_host_tag\n\n# Compute the number of host CPU cores an HOST_NUM_CPUS\n#\ncase \"$HOST_OS\" in\n    linux)\n        HOST_NUM_CPUS=`cat /proc/cpuinfo | grep processor | wc -l`\n        ;;\n    darwin|freebsd)\n        HOST_NUM_CPUS=`sysctl -n hw.ncpu`\n        ;;\n    windows|cygwin)\n        HOST_NUM_CPUS=$NUMBER_OF_PROCESSORS\n        ;;\n    *)  # let's play safe here\n        HOST_NUM_CPUS=1\nesac\n\nlog2 \"HOST_NUM_CPUS=$HOST_NUM_CPUS\"\n\n# If BUILD_NUM_CPUS is not already defined in your environment,\n# define it as the double of HOST_NUM_CPUS. This is used to\n# run Make commends in parralles, as in 'make -j$BUILD_NUM_CPUS'\n#\nif [ -z \"$BUILD_NUM_CPUS\" ] ; then\n    BUILD_NUM_CPUS=`expr $HOST_NUM_CPUS \\* 2`\nfi\n\nlog2 \"BUILD_NUM_CPUS=$BUILD_NUM_CPUS\"\n\n# Various probes are going to need to run a small C program\nTMPC=/tmp/myst-$$-test.c\nTMPO=/tmp/myst-$$-test.o\nTMPE=/tmp/myst-$$-test$EXE\nTMPL=/tmp/myst-$$-test.log\n\n# cleanup temporary files\nclean_temp ()\n{\n    rm -f $TMPC $TMPO $TMPL $TMPE\n}\n\n# cleanup temp files then exit with an error\nclean_exit ()\n{\n    clean_temp\n    exit 1\n}\n\npattern_match ()\n{\n    echo \"$2\" | grep -q -E -e \"$1\"\n}\n\n# Let's check that we have a working md5sum here\ncheck_md5sum ()\n{\n    A_MD5=`echo \"A\" | md5sum | cut -d' ' -f1`\n    if [ \"$A_MD5\" != \"bf072e9119077b4e76437a93986787ef\" ] ; then\n        echo \"Please install md5sum on this machine\"\n        exit 2\n    fi\n}\n\n# Find if a given shell program is available.\n#\n# $1: variable name\n# $2: program name\n#\n# Result: set $1 to the full path of the corresponding command\n#         or to the empty/undefined string if not available\n#\nfind_program ()\n{\n    eval $1=`command -v $2`\n}\n\nprepare_download ()\n{\n    find_program CMD_WGET wget\n    find_program CMD_CURL curl\n    find_program CMD_SCRP scp\n}\n\n# Download a file with either 'curl', 'wget' or 'scp'\n#\n# $1: source URL (e.g. http://foo.com, ssh://blah, /some/path)\n# $2: target file\ndownload_file ()\n{\n    # Is this HTTP, HTTPS or FTP ?\n    if pattern_match \"^(http|https|ftp):.*\" \"$1\"; then\n        if [ -n \"$CMD_WGET\" ] ; then\n            run $CMD_WGET -O $2 $1 \n        elif [ -n \"$CMD_CURL\" ] ; then\n            run $CMD_CURL -L -o $2 $1\n        else\n            echo \"Please install wget or curl on this machine\"\n            exit 1\n        fi\n        return\n    fi\n\n    # Is this SSH ?\n    # Accept both ssh://<path> or <machine>:<path>\n    #\n    if pattern_match \"^(ssh|[^:]+):.*\" \"$1\"; then\n        if [ -n \"$CMD_SCP\" ] ; then\n            scp_src=`echo $1 | sed -e s%ssh://%%g`\n            run $CMD_SCP $scp_src $2\n        else\n            echo \"Please install scp on this machine\"\n            exit 1\n        fi\n        return\n    fi\n\n    # Is this a file copy ?\n    # Accept both file://<path> or /<path>\n    #\n    if pattern_match \"^(file://|/).*\" \"$1\"; then\n        cp_src=`echo $1 | sed -e s%^file://%%g`\n        run cp -f $cp_src $2\n        return\n    fi\n}\n\n# Return the maximum length of a series of strings\n#\n# Usage:  len=`max_length <string1> <string2> ...`\n#\nmax_length ()\n{\n    echo \"$@\" | tr ' ' '\\n' | awk 'BEGIN {max=0} {len=length($1); if (len > max) max=len} END {print max}'\n}\n\n# Translate dashes to underscores\n# Usage:  str=`dashes_to_underscores <values>`\ndashes_to_underscores ()\n{\n    echo $@ | tr '-' '_'\n}\n\n# Translate underscores to dashes\n# Usage: str=`underscores_to_dashes <values>`\nunderscores_to_dashes ()\n{\n    echo $@ | tr '_' '-'\n}\n\n#-----------------------------------------------------------------------\n#  OPTION PROCESSING\n#-----------------------------------------------------------------------\n\n# We recognize the following option formats:\n#\n#  -f\n#  --flag\n#\n#  -s<value>\n#  --setting=<value>\n#\n\n# NOTE: We translate '-' into '_' when storing the options in global\n#       variables\n#\n\nOPTIONS=\"\"\nOPTION_FLAGS=\"\"\nOPTION_SETTINGS=\"\"\n\n# Set a given option attribute\n# $1: option name\n# $2: option attribute\n# $3: attribute value\n#\noption_set_attr ()\n{\n    eval OPTIONS_$1_$2=\\\"$3\\\"\n}\n\n# Get a given option attribute\n# $1: option name\n# $2: option attribute\n#\noption_get_attr ()\n{\n    echo `var_value OPTIONS_$1_$2`\n}\n\n# Determine optional variable value\n# $1: final variable name\n# $2: option variable name\n# $3: small description for the option\nfix_option ()\n{\n    if [ -n \"$2\" ] ; then\n        eval $1=\"$2\"\n        log \"Using specific $3: $2\"\n    else\n        log \"Using default $3: `var_value $1`\"\n    fi\n}\n\n# Register a new option\n# $1: option\n# $2: name of function that will be called when the option is parsed\n# $3: small abstract for the option\n# $4: optional. default value\n#\nregister_option ()\n{\n    local optname optvalue opttype optlabel\n    optlabel=\n    optname=\n    optvalue=\n    opttype=\n    while [ -n \"1\" ] ; do\n        # Check for something like --setting=<value>\n        echo \"$1\" | grep -q -E -e '^--[^=]+=<.+>$'\n        if [ $? = 0 ] ; then\n            optlabel=`expr -- \"$1\" : '\\(--[^=]*\\)=.*'`\n            optvalue=`expr -- \"$1\" : '--[^=]*=\\(<.*>\\)'`\n            opttype=\"long_setting\"\n            break\n        fi\n\n        # Check for something like --flag\n        echo \"$1\" | grep -q -E -e '^--[^=]+$'\n        if [ $? = 0 ] ; then\n            optlabel=\"$1\"\n            opttype=\"long_flag\"\n            break\n        fi\n\n        # Check for something like -f<value>\n        echo \"$1\" | grep -q -E -e '^-[A-Za-z0-9]<.+>$'\n        if [ $? = 0 ] ; then\n            optlabel=`expr -- \"$1\" : '\\(-.\\).*'`\n            optvalue=`expr -- \"$1\" : '-.\\(<.+>\\)'`\n            opttype=\"short_setting\"\n            break\n        fi\n\n        # Check for something like -f\n        echo \"$1\" | grep -q -E -e '^-.$'\n        if [ $? = 0 ] ; then\n            optlabel=\"$1\"\n            opttype=\"short_flag\"\n            break\n        fi\n\n        echo \"ERROR: Invalid option format: $1\"\n        echo \"       Check register_option call\"\n        exit 1\n    done\n\n    log \"new option: type='$opttype' name='$optlabel' value='$optvalue'\"\n\n    optname=`dashes_to_underscores $optlabel`\n    OPTIONS=\"$OPTIONS $optname\"\n    OPTIONS_TEXT=\"$OPTIONS_TEXT $1\"\n    option_set_attr $optname label \"$optlabel\"\n    option_set_attr $optname otype \"$opttype\"\n    option_set_attr $optname value \"$optvalue\"\n    option_set_attr $optname text \"$1\"\n    option_set_attr $optname funcname \"$2\"\n    option_set_attr $optname abstract \"$3\"\n    option_set_attr $optname default \"$4\"\n}\n\n# Print the help, including a list of registered options for this program\n# Note: Assumes PROGRAM_PARAMETERS and PROGRAM_DESCRIPTION exist and\n#       correspond to the parameters list and the program description\n#\nprint_help ()\n{\n    local opt text abstract default\n\n    echo \"Usage: $PROGNAME [options] $PROGRAM_PARAMETERS\"\n    echo \"\"\n    if [ -n \"$PROGRAM_DESCRIPTION\" ] ; then\n        echo \"$PROGRAM_DESCRIPTION\"\n        echo \"\"\n    fi\n    echo \"Valid options (defaults are in brackets):\"\n    echo \"\"\n\n    maxw=`max_length \"$OPTIONS_TEXT\"`\n    AWK_SCRIPT=`echo \"{ printf \\\"%-${maxw}s\\\", \\\\$1 }\"`\n    for opt in $OPTIONS; do\n        text=`option_get_attr $opt text | awk \"$AWK_SCRIPT\"`\n        abstract=`option_get_attr $opt abstract`\n        default=`option_get_attr $opt default`\n        if [ -n \"$default\" ] ; then\n            echo \"  $text     $abstract [$default]\"\n        else\n            echo \"  $text     $abstract\"\n        fi\n    done\n    echo \"\"\n}\n\noption_panic_no_args ()\n{\n    echo \"ERROR: Option '$1' does not take arguments. See --help for usage.\"\n    exit 1\n}\n\noption_panic_missing_arg ()\n{\n    echo \"ERROR: Option '$1' requires an argument. See --help for usage.\"\n    exit 1\n}\n\nextract_parameters ()\n{\n    local opt optname otype value name fin funcname\n    PARAMETERS=\"\"\n    while [ -n \"$1\" ] ; do\n        # If the parameter does not begin with a dash\n        # it is not an option.\n        param=`expr -- \"$1\" : '^\\([^\\-].*\\)$'`\n        if [ -n \"$param\" ] ; then\n            if [ -z \"$PARAMETERS\" ] ; then\n                PARAMETERS=\"$1\"\n            else\n                PARAMETERS=\"$PARAMETERS $1\"\n            fi\n            shift\n            continue\n        fi\n\n        while [ -n \"1\" ] ; do\n            # Try to match a long setting, i.e. --option=value\n            opt=`expr -- \"$1\" : '^\\(--[^=]*\\)=.*$'`\n            if [ -n \"$opt\" ] ; then\n                otype=\"long_setting\"\n                value=`expr -- \"$1\" : '^--[^=]*=\\(.*\\)$'`\n                break\n            fi\n\n            # Try to match a long flag, i.e. --option\n            opt=`expr -- \"$1\" : '^\\(--.*\\)$'`\n            if [ -n \"$opt\" ] ; then\n                otype=\"long_flag\"\n                value=\n                break\n            fi\n\n            # Try to match a short setting, i.e. -o<value>\n            opt=`expr -- \"$1\" : '^\\(-[A-Za-z0-9]\\)..*$'`\n            if [ -n \"$opt\" ] ; then\n                otype=\"short_setting\"\n                value=`expr -- \"$1\" : '^-.\\(.*\\)$'`\n                break\n            fi\n\n            # Try to match a short flag, i.e. -o\n            opt=`expr -- \"$1\" : '^\\(-.\\)$'`\n            if [ -n \"$opt\" ] ; then\n                otype=\"short_flag\"\n                value=\n                break\n            fi\n\n            echo \"ERROR: Unknown option '$1'. Use --help for list of valid values.\"\n            exit 1\n        done\n\n        #echo \"Found opt='$opt' otype='$otype' value='$value'\"\n\n        name=`dashes_to_underscores $opt`\n        found=0\n        for xopt in $OPTIONS; do\n            if [ \"$name\" != \"$xopt\" ] ; then\n                continue\n            fi\n            # Check that the type is correct here\n            #\n            # This also allows us to handle -o <value> as -o<value>\n            #\n            xotype=`option_get_attr $name otype`\n            if [ \"$otype\" != \"$xotype\" ] ; then\n                case \"$xotype\" in\n                \"short_flag\")\n                    option_panic_no_args $opt\n                    ;;\n                \"short_setting\")\n                    if [ -z \"$2\" ] ; then\n                        option_panic_missing_arg $opt\n                    fi\n                    value=\"$2\"\n                    shift\n                    ;;\n                \"long_flag\")\n                    option_panic_no_args $opt\n                    ;;\n                \"long_setting\")\n                    option_panic_missing_arg $opt\n                    ;;\n                esac\n            fi\n            found=1\n            break\n            break\n        done\n        if [ \"$found\" = \"0\" ] ; then\n            echo \"ERROR: Unknown option '$opt'. See --help for usage.\"\n            exit 1\n        fi\n        # Launch option-specific function, value, if any as argument\n        eval `option_get_attr $name funcname` \\\"$value\\\"\n        shift\n    done\n    \n    # Change log out put if requested\n    if [ \"x$OPTION_OUTPUT\" != \"x\" ] ; then\n\t\tsetup_log_file $OPTION_OUTPUT\n\telse\n\t\tsetup_log_file\n\tfi\n}\n\ndo_option_help ()\n{\n    print_help\n    exit 0\n}\n\nVERBOSE=no\nVERBOSE2=no\ndo_option_verbose ()\n{\n    if [ $VERBOSE = \"yes\" ] ; then\n        VERBOSE2=yes\n    else\n        VERBOSE=yes\n    fi\n}\n\nOPTION_OUTPUT=\ndo_logpath () { OPTION_OUTPUT=$1; }\n\ndo_progress_bar() \n{ \n\tOPTION_PROGRESS=\"yes\"\n}\n\nregister_option \"--help\"          do_option_help     \"Print this help.\"\nregister_option \"--verbose\"       do_option_verbose  \"Enable verbose mode.\"\nregister_option \"--output=<path>\" do_logpath \"Specify specific log output path (only terminal output by default)\"\nregister_option \"--progress\"\t  do_progress_bar \"Enable extraction progress bar\"\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}