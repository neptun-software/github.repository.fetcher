{
  "metadata": {
    "timestamp": 1736568433041,
    "page": 392,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "HazyResearch/deepdive",
      "stars": 1958,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "*\n!.git\n"
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4638671875,
          "content": "# build byproducts\n/.build\n/dist\n/.travis\n/.travis.tar\n/.github-release-assets\n/deepdive-*.tar.gz\n/inference/format_converter\n\n# misc.\n.DS_Store\n*~\n\\#*#\n*.sublime-project\n*.sublime-workspace\n.cache\n.ipynb_checkpoints/\n\n/doc/_*local*\n\n/examples/**/*.pyc\n/examples/tutorial_example/*/experiment-reports/latest\n/examples/spouse_example/data/sentences_dump_large.csv\n/examples/spouse_example/data/spouses.tsv\n\n# python-related\n*.pyc\n__pycache__/\n\n# conda related\n/conda_build.sh\n"
        },
        {
          "name": ".gitmodules",
          "type": "blob",
          "size": 0.7119140625,
          "content": "[submodule \"util/mindbender\"]\n\tpath = util/mindbender\n\turl = https://github.com/netj/mindbender.git\n[submodule \"test/bats\"]\n\tpath = test/bats\n\turl = https://github.com/sstephenson/bats.git\n[submodule \"inference/dimmwitted/test/bats\"]\n        path = inference/dimmwitted/test/bats\n\turl = https://github.com/sstephenson/bats.git\n[submodule \"compiler/ddlog/test/bats\"]\n\tpath = compiler/ddlog/test/bats\n\turl = https://github.com/sstephenson/bats.git\n[submodule \"extern/buildkit\"]\n\tpath = extern/buildkit\n\turl = https://github.com/netj/buildkit.git\n[submodule \"runner/mkmimo\"]\n\tpath = runner/mkmimo\n\turl = https://github.com/netj/mkmimo.git\n[submodule \"DockerBuild\"]\n\tpath = DockerBuild\n\turl = https://github.com/netj/DockerBuild.git\n"
        },
        {
          "name": ".travis.tar.enc",
          "type": "blob",
          "size": 3.515625,
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 3.3701171875,
          "content": "# Travis CI config to run tests using Docker\n# See: https://docs.travis-ci.com/user/docker/\n# See: https://docker.io/\nsudo: required\ndist: trusty\nlanguage: c  # C seems to have the least amount of setup\nservices:\n  - docker\n\nnotifications:\n  email:\n    - deepdive-notifications@cs.stanford.edu\n    # XXX Routing notifications through cs.stanford.edu as Travis cannot directly send to googlegroups.com\n    # See: https://github.com/travis-ci/travis-ci/issues/2513\n    #- deepdive-dev@googlegroups.com\n  webhooks:\n    urls:\n      # gitter.im/HazyResearch/deepdive\n      - https://webhooks.gitter.im/e/ee3a2470727e53cdc3c3\n    on_success: change  # options: [always|never|change] default: always\n    on_failure: always  # options: [always|never|change] default: always\n    on_start: never     # options: [always|never|change] default: always\n\nbefore_install:\n  # Check coding style before performing the build and tests\n  - make checkstyle;\n\n  # Have Docker build scripts use and update the correct images (these can override DockerBuild.conf)\n  - export DOCKER_IMAGE=hazyresearch/deepdive-build;\n  - export POSTGRES_DOCKER_IMAGE=hazyresearch/postgres;\n\n  # Pull Docker images\n  - docker pull $DOCKER_IMAGE;\n  - docker pull $POSTGRES_DOCKER_IMAGE;\n\ninstall:\n  # Build using Docker\n  - ./DockerBuild/build-in-container\n  # TODO tag the $DOCKER_IMAGE with TRAVIS environment\n\nscript:\n  # Run all tests using Docker\n  - ./DockerBuild/test-in-container-postgres\n\n  # Check broken links in documentation\n  # TODO check only when doc/ has changed\n  #- make -C doc/ linkcheck\n\nafter_script:\n  - docker login -e \"$encrypted_DOCKER_EMAIL\" -u \"$encrypted_DOCKER_USERNAME\" -p \"$encrypted_DOCKER_PASSWORD\";\n\n    # decide what tag to use\n  - if [[ $TRAVIS_TEST_RESULT = 0 ]];\n    then verdict=PASS;\n    else verdict=FAIL;\n    fi;\n\n    # push the test result\n  - if [[ $TRAVIS_PULL_REQUEST = false ]];\n    then docker tag $DOCKER_IMAGE:latest-test  $DOCKER_IMAGE:$TRAVIS_BRANCH.latest-test;\n         docker push                           $DOCKER_IMAGE:$TRAVIS_BRANCH.latest-test;\n         docker tag $DOCKER_IMAGE:latest-test  $DOCKER_IMAGE:$TRAVIS_BRANCH.latest-test-$verdict;\n         docker push                           $DOCKER_IMAGE:$TRAVIS_BRANCH.latest-test-$verdict;\n    else docker tag $DOCKER_IMAGE:latest-test  $DOCKER_IMAGE:pr$TRAVIS_PULL_REQUEST-test;\n         docker push                           $DOCKER_IMAGE:pr$TRAVIS_PULL_REQUEST-test;\n    fi;\n\n    # update the master image with the successful build\n  - case $TRAVIS_EVENT_TYPE-$TRAVIS_BRANCH-$verdict in\n        push-master-PASS)\n            docker tag $DOCKER_IMAGE:latest-build $DOCKER_IMAGE:latest;\n            docker push                           $DOCKER_IMAGE:latest;;\n        push-*-PASS)\n            docker tag $DOCKER_IMAGE:latest-build $DOCKER_IMAGE:$TRAVIS_BRANCH.latest;\n            docker push                           $DOCKER_IMAGE:$TRAVIS_BRANCH.latest;\n    esac;\n\n## update GitHub releases for some select branches (master and v*.*.x)\n#deploy:\n#  - provider: script\n#    script: util/build/decrypt-travis-then-update-github-releases\n#    skip_cleanup: true\n#    on:\n#      repo: HazyResearch/deepdive\n#      all_branches: true\n#      # TODO condition: \"$TRAVIS_BRANCH = master || $TRAVIS_BRANCH = v*.*.x\"\n#  - provider: script\n#    script: util/build/decrypt-travis-then-update-github-releases\n#    skip_cleanup: true\n#    on:\n#      repo: HazyResearch/deepdive\n#      tag: true\n"
        },
        {
          "name": "DockerBuild",
          "type": "commit",
          "content": null
        },
        {
          "name": "DockerBuild.conf",
          "type": "blob",
          "size": 0.7353515625,
          "content": "# configuration for DeepDive's DockerBuild scripts\n\n: ${DOCKER_IMAGE:=hazyresearch/deepdive-build}\n\n# Uncomment below if you're working close to Stanford\n#: ${DOCKER_APT_SOURCE:=http://debian.stanford.edu}\n: ${DOCKER_APT_SOURCE:=}\n\n: ${DOCKER_BUILD_COMMAND:='\n    # make sure all build dependencies are installed\n    ./DockerBuild/container/use-apt-source '\"$DOCKER_APT_SOURCE\"'\n    make .build/depends\n    ./DockerBuild/container/clean-apt\n\n    # build\n    make -j build\n'}\n\n# Using our own postgres 9.5 Docker image for testing\n# as DeepDive requires some extensions such as PL/Python for id assignment\n# See: test/postgresql/Dockerfile.postgres\n# See: https://hub.docker.com/r/hazyresearch/postgres/\n: ${POSTGRES_DOCKER_IMAGE:=hazyresearch/postgres}\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 1.04296875,
          "content": "# Dockerfile to build and test DeepDive inside a container\n#\n# `make build-in-container test-in-container` uses master image built by this.\n# `util/build/docker/` contains utilities relevant to this.\nFROM debian\nMAINTAINER deepdive-dev@googlegroups.com\n\n# Install essential stuffs\nRUN apt-get update && apt-get install -qy \\\n        coreutils \\\n        bash \\\n        curl \\\n        sudo \\\n        git \\\n        build-essential \\\n        postgresql-client \\\n && apt-get clean \\\n && rm -rf /var/lib/apt/lists/*\n\n# Set up a non-superuser\nARG USER=user\nENV USER=$USER\nRUN adduser --disabled-password --gecos \"\" $USER \\\n && adduser $USER adm \\\n && bash -c \"echo '%adm ALL=(ALL:ALL) NOPASSWD: ALL' | tee -a /etc/sudoers\"\nUSER $USER\n\n# Get a fresh clone of deepdive\nARG BRANCH=master\nENV BRANCH=$BRANCH\nWORKDIR /deepdive\nCOPY .git .git\nRUN sudo chown -R $USER .\nRUN git checkout .\n\n# Install deepdive build/runtime dependencies\nRUN make depends \\\n && sudo apt-get clean \\\n && sudo rm -rf /var/lib/apt/lists/*\n\n# Build deepdive\nRUN make bundled-runtime-dependencies\nRUN make\n"
        },
        {
          "name": "LICENSE-2.0.txt",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 7.349609375,
          "content": "# Makefile for DeepDive\n\n# install destination\nPREFIX = ~/local\n# path to the staging area\nSTAGE_DIR = dist/stage\n# path to the area for keeping track of build\nBUILD_DIR = .build\n# path to the package to be built\nPACKAGE = $(dir $(STAGE_DIR))deepdive.tar.gz\n\nNO_DOCKER_BUILD ?= false\nifneq ($(shell $(NO_DOCKER_BUILD) || which docker 2>/dev/null),)\n# do a containerized build by default if Docker is available\n.DEFAULT_GOAL := build--in-container\n\nelse  # do a normal build by default without Docker\n.DEFAULT_GOAL := build\n\nendif  # Docker\n\n# On Mac OS X, require GNU coreutils instead of continuing on BSD utilities with uncertainty\n# TODO relax this requirement when build--in-container is the only goal\nifeq ($(shell uname),Darwin)\nifeq ($(shell brew ls coreutils &>/dev/null || echo notfound),)\n    PATH := $(shell brew --prefix coreutils)/libexec/gnubin:$(PATH)\nelse\n    $(error Missing GNU coreutils from Homebrew [http://brew.sh]. \\\n        It must be installed to ensure correct build. \\\n        Please run: `brew install coreutils` \\\n    )\nendif\nendif\n\n### build/test inside containers ##############################################\n.PHONY: %--in-container dev-docker-image\ndev-docker-image: ./DockerBuild/rebuild-latest-image-from-scratch # needs to be run at least once by someone\n\t$<\nbuild--in-container: ./DockerBuild/build-in-container\n\t$<\ntest--in-container: ./DockerBuild/test-in-container-postgres\n\t$< \\\n\t    make -j test $(if $(ONLY),ONLY=\"$(ONLY)\") $(if $(EXCEPT),EXCEPT=\"$(EXCEPT)\")\n./DockerBuild/%:\n\tgit submodule update --init DockerBuild\n\n### dependency recipes ########################################################\n\n.PHONY: depends\ndepends: .build/depends\n.build/depends: util/install.sh $(wildcard util/install/*)\n\t# Installing and Checking dependencies...\n\tmkdir -p $(@D)\n\tsha1sum $^ | diff -q $@ - || \\\n\t$< _deepdive_build_deps _deepdive_runtime_deps\n\tsha1sum $^ >$@\n\n### install recipes ###########################################################\n\n.PHONY: install\ninstall: build\n\t# Installing DeepDive to $(PREFIX)/\n\tmkdir -p $(PREFIX)\n\ttar cf - -C $(STAGE_DIR) . | tar xf - -C $(PREFIX)\n\t# DeepDive has been install to $(PREFIX)/\n\t# Make sure your shell is configured to include the directory in PATH environment, e.g.:\n\t#    export PATH=\"$(PREFIX)/bin:$$PATH\"\n\n.PHONY: package\npackage: $(PACKAGE)\n$(PACKAGE): build\n\ttar czf $@ -C $(STAGE_DIR) .\n\n### release recipes ###########################################################\n\n# For example, `make release-v0.7.0` builds the package, tags it with version\n# v0.7.0, then uploads the file to the GitHub release.  Installers under\n# util/install/ can then download and install the binary release directly\n# without building the source tree.\n\n# XXX put coffee and node from mindbender on PATH\n.PHONY: release-%\nrelease-%: PATH := $(realpath $(STAGE_DIR)/mindbender/node_modules/.bin):$(realpath $(STAGE_DIR)/mindbender/depends/bundled/.all/bin):$(PATH)\nrelease-%: GITHUB_REPO = HazyResearch/deepdive\nrelease-%: RELEASE_VERSION = $*\nrelease-%: RELEASE_PACKAGE = deepdive-$(RELEASE_VERSION)-$(shell uname).tar.gz\nrelease-%:\n\t-git tag --annotate $(RELEASE_VERSION) --cleanup=whitespace\n\t$(MAKE) RELEASE_VERSION=$(RELEASE_VERSION) $(PACKAGE)\n\tln -sfn $(PACKAGE) $(RELEASE_PACKAGE)\n\t# Releasing $(RELEASE_PACKAGE) to GitHub\n\t# (Make sure GITHUB_OAUTH_TOKEN is set directly or via ~/.netrc or OS X Keychain)\n\tutil/build/upload-github-release-asset \\\n\t    file=$(RELEASE_PACKAGE) \\\n\t    repo=$(GITHUB_REPO) \\\n\t    tag=$(RELEASE_VERSION)\n\t# Released $(RELEASE_PACKAGE) to GitHub\n\n# Encrypted deepdiveDeployBot credentials for Travis\n.travis.tar.enc: .travis.tar\n\ttravis encrypt-file $< $@\n\tgit add .travis.tar.enc\n.travis.tar: .travis\n\tchmod -R go= .travis\n\ttar cvf $@ $^\n\n### production Docker container ##############################################\n\nDOCKER_IMAGE_FOR_BUILD   = hazyresearch/deepdive-build\nDOCKER_IMAGE_FOR_RELEASE = hazyresearch/deepdive\n\n.PHONY: production-docker-image\n.PHONY: sandbox/deepdive-build.tar.gz sandbox/deepdive-examples.tar.gz  # always retrieve from latest image\nproduction-docker-image: sandbox/Dockerfile sandbox/deepdive-build.tar.gz sandbox/deepdive-examples.tar.gz sandbox/install.sh sandbox/stanford-corenlp\n\tdocker build -t $(DOCKER_IMAGE_FOR_RELEASE) $(<D)\nsandbox/deepdive-build.tar.gz:\n\tdocker run --rm -it -v \"$(realpath $(@D))\":/mnt \\\n\t    $(DOCKER_IMAGE_FOR_BUILD) \\\n\t    tar cfvz /mnt/$(@F) -C \"$(STAGE_DIR)\" .\nsandbox/deepdive-examples.tar.gz:\n\tdocker run --rm -it -v \"$(realpath $(@D))\":/mnt \\\n\t    $(DOCKER_IMAGE_FOR_BUILD) \\\n\t    tar cfvz /mnt/$(@F) -C examples .\nsandbox/install.sh: util/install.sh $(wildcard util/install/*)\n\trsync -avH util/install{.sh,} $(@D)/\nsandbox/stanford-corenlp:\n\tmkdir -p $@\n\t# TODO download latest stable release\n\n### build recipes #############################################################\n\n# common build steps\nBUILD_INFO=$(STAGE_DIR)/.build-info.sh\nbuild:\n\t# staging all executable code and runtime data under $(STAGE_DIR)/\n\t./stage.sh $(STAGE_DIR)\n\t# record version and build info\n\tutil/build/generate-build-info.sh >$(BUILD_INFO)\n\n# build DimmWitted\n.PHONY build: inference/dimmwitted/dw\ninference/dimmwitted/dw:\n\t$(@D).build.sh\n\n# build DDlog compiler\n.PHONY build: compiler/ddlog/ddlog.jar\ncompiler/ddlog/ddlog.jar:\n\t$(@D).build.sh\n\n# ensure some submodules required by stage.sh is there\nbuild: \\\n    extern/buildkit/install-shared-libraries-required-by \\\n    extern/buildkit/generate-wrapper-for-libdirs \\\n    #\nextern/buildkit/%:\n\tgit submodule update --init extern/buildkit\n\n# how to build external runtime dependencies to bundle\n.PHONY: extern bundled-runtime-dependencies all-bundled-runtime-dependencies no-bundled-runtime-dependencies\nextern \\\nbundled-runtime-dependencies \\\nextern/.build/bundled: extern/bundle-runtime-dependencies.sh extern/bundle.conf\n\tPACKAGENAME=deepdive  $<\n$(PACKAGE): bundled-runtime-dependencies\nbuild: extern/.build/bundled\n# bundle all unless overridden with `make no-bundled-runtime-dependencies`\nextern/bundle-runtime-dependencies.sh: extern/bundle.conf\nall-bundled-runtime-dependencies \\\nextern/bundle.conf:\n\tln -sfn bundle-all.conf extern/bundle.conf\nno-bundled-runtime-dependencies:\n\tln -sfn bundle-none.conf extern/bundle.conf\n\n### test recipes #############################################################\n\n# before testing on a clean source tree, make sure it's built at least once\ntest-build: $(BUILD_INFO)\n$(BUILD_INFO):\n\t$(MAKE) build\n\n# make sure test is against the code built and staged by this Makefile\nDEEPDIVE_HOME := $(realpath $(STAGE_DIR))\nexport DEEPDIVE_HOME\n\ninclude test/bats.mk\nTEST_LIST_COMMAND = mkdir -p $(STAGE_DIR) && $(TEST_ROOT)/enumerate-tests.sh\n\n.PHONY: checkstyle\ncheckstyle:\n\ttest/checkstyle.sh\n\n\n### submodule build recipes ###################################################\n\n# submodules to build and the files to copy out from each of them\ninclude util/build/build-submodules.mk\n$(call BUILD_SUBMODULE_AND_COPY, runner/mkmimo       , mkmimo                                               )\nifndef NO_MINDBENDER\n$(call BUILD_SUBMODULE_AND_COPY, util/mindbender     , @prefix@/                                            )\nendif\n\n# XXX legacy targets kept to reduce surprise\n.PHONY: build-sampler\nbuild-sampler: inference/dimmwitted/dw\n.PHONY: build-dimmwitted\nbuild-dimmwitted: inference/dimmwitted/dw\n.PHONY: build-mindbender\nbuild-mindbender: build-submodule-mindbender\n.PHONY: build-ddlog\nbuild-ddlog: compiler/ddlog/ddlog.jar\n.PHONY: build-mkmimo\nbuild-mkmimo: build-submodule-mkmimo\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.3388671875,
          "content": "# DeepDive\n\n[![Build Status](https://travis-ci.org/HazyResearch/deepdive.svg?branch=master)](https://travis-ci.org/HazyResearch/deepdive)\n[![Join the chat at https://gitter.im/HazyResearch/deepdive](https://badges.gitter.im/HazyResearch/deepdive.svg)](https://gitter.im/HazyResearch/deepdive?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\n----\n\n<blockquote class=\"well alert-block alert-danger\">\n<big>\nAs of 2017, DeepDive project is in maintenance mode and no longer under active development.\nThe user community remains active, but the original project members can no longer promise exciting new features/improvements or responding to requests.\nFor the more up-to-date research, please see the <a href=\"https://hazyresearch.github.io/snorkel/\">Snorkel Project</a> or <a href=\"https://ds3lab.org/~czhang/\">Ce Zhang's Projects</a>.\n</big>\n</blockquote>\n\n----\n\n<strong><big>See [deepdive.stanford.edu](http://deepdive.stanford.edu) or [doc/](doc/index.md) to learn how to install and use DeepDive.</big></strong>\n\n<strong>Or, just start with this one-liner command:</strong>\n```bash\nbash <(curl -fsSL git.io/getdeepdive)\n```\n\nRead the [DeepDive developer's guide](doc/developer.md#readme) to learn more about this source tree and how to contribute.\n\nLicensed under [Apache License, Version 2.0](http://www.apache.org/licenses/LICENSE-2.0.txt).\n"
        },
        {
          "name": "compiler",
          "type": "tree",
          "content": null
        },
        {
          "name": "database",
          "type": "tree",
          "content": null
        },
        {
          "name": "ddlib",
          "type": "tree",
          "content": null
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "extern",
          "type": "tree",
          "content": null
        },
        {
          "name": "inference",
          "type": "tree",
          "content": null
        },
        {
          "name": "runner",
          "type": "tree",
          "content": null
        },
        {
          "name": "sandbox",
          "type": "tree",
          "content": null
        },
        {
          "name": "shell",
          "type": "tree",
          "content": null
        },
        {
          "name": "stage.sh",
          "type": "blob",
          "size": 8.423828125,
          "content": "#!/usr/bin/env bash\n# stage.sh -- a script that stages code and data for distribution\nset -eu\n\n###############################################################################\nSTAGE_DIR=${1:-dist/stage}\nstage() {\n    local src=$1 dst=$2\n    [[ -e \"$src\" ]] || {\n        echo >&2 \"$src: No such file to stage\"\n        false\n    }\n    dst=\"$STAGE_DIR/$dst\"\n    dstdir=$(dirname \"$dst.\")\n    [[ -d \"$dstdir\" ]] || mkdir -p \"$dstdir\"\n    if [[ -d \"$src\" ]]; then\n        # use rsync(1) for staging directories\n        set -x; rsync -aH --delete \"$src\" \"$dst\"\n    else\n        # use install(1) for staging files when changed\n        dstfile=$dst\n        case $dst in */) dstfile=$dst${src##*/}; esac\n        if [[ \"$src\" -nt \"$dstfile\" ]]; then\n            if [[ -x \"$src\" ]]; then\n                set -x; install -m a=rx \"$src\" \"$dst\"\n            else\n                # preserve flags of non-executable data since install(1) always marks as executable\n                set -x; install -m a=r  \"$src\" \"$dst\"\n            fi\n        fi\n    fi\n    { set +x; } &>/dev/null\n}\nsymlink() {\n    local src=$1 dst=$2\n    dst=\"$STAGE_DIR/$dst\"\n    dstdir=$(dirname \"$dst.\")\n    [[ -d \"$dstdir\" ]] || mkdir -p \"$dstdir\"\n    case $dst in */) dst=$dst${src##*/}; esac\n    if ! [[ -L \"$dst\" && $(readlink \"$dst\") = $src ]]; then\n        set -x; ln -sfn \"$src\" \"$dst\"\n    fi\n    { set +x; } &>/dev/null\n}\n###############################################################################\n\n# DeepDive shell\nstage shell/deepdive                                              bin/\nstage shell/deepdive-version                                      util/\nstage shell/deepdive-help                                         util/\nstage shell/deepdive-env                                          util/\nstage shell/deepdive-whereis                                      util/\nstage shell/find-deepdive-app                                     util/\nstage shell/parse-url.sh                                          util/\nstage shell/error                                                 util/\nstage shell/error-from-file                                       util/\nstage shell/warning                                               util/\nstage shell/usage                                                 util/\nstage shell/escape4sh                                             util/\nstage compiler/jq2sh                                              util/\nstage shell/jq                                                    util/\nstage shell/make                                                  util/\nstage shell/logging-with-ts                                       util/\nstage shell/deepdive_bash_completion.sh                           etc/\n\n# DeepDive compiler\nstage compiler/deepdive-compile                                   util/\nstage compiler/deepdive-check                                     util/\nstage compiler/app-has-been-compiled                              util/\nstage compiler/app-has-nothing-to-compile                         util/\nstage compiler/deepdive-default.conf                              etc/\nstage compiler/compile-config                                     util/\nstage compiler/compile-check                                      util/\nstage compiler/compile-code                                       util/\nstage compiler/compile-codegen                                    util/\n\nstage compiler/ddlog-wrapper.sh                                   bin/ddlog\nstage compiler/ddlog/ddlog.jar                                    lib/ddlog.jar\nstage compiler/hocon2json                                         util/\n\n# DeepDive execution planner and runner\nstage runner/deepdive-run                                         util/\nstage runner/deepdive-plan                                        util/\nstage runner/deepdive-do                                          util/\nstage runner/deepdive-redo                                        util/\nstage runner/deepdive-mark                                        util/\nstage runner/deepdive-done                                        util/\nstage runner/format_timestamp                                     util/\nstage runner/reset_timestamp                                      util/\nstage runner/restore_timestamp                                    util/\nstage runner/mark_done                                            util/\nstage runner/deepdive-do-getopts.sh                               util/\nstage runner/resolve-args-to-do.sh                                util/\nstage runner/show_progress                                        util/\nstage runner/ps_descendants                                       util/\n\nstage runner/deepdive-compute                                     util/\nstage runner/load-compute-driver.sh                               util/\nstage runner/compute-driver/local                                 util/compute-driver/\nstage runner/compute-driver/torque                                util/compute-driver/\nstage runner/computers-default.conf                               util/\nstage .build/submodule/runner/mkmimo/mkmimo                       util/\n\n# DeepDive database operations and drivers\nstage database/deepdive-query                                     util/\nstage database/deepdive-db                                        util/\nstage database/deepdive-initdb                                    util/\nstage database/deepdive-sql                                       util/\nstage database/deepdive-create                                    util/\nstage database/deepdive-relation                                  util/\nstage database/deepdive-load                                      util/\nstage database/deepdive-reload                                    util/\nstage database/deepdive-unload                                    util/\nstage database/load-db-driver.sh                                  util/\nstage database/db-driver/postgresql                               util/db-driver/\nstage database/db-driver/greenplum                                util/db-driver/\nstage database/db-driver/postgresql-xl                            util/db-driver/\nstage database/db-driver/mysql                                    util/db-driver/\nstage database/partition_id_range                                 util/\nstage database/tsj2fmt                                            util/\nstage database/pgtsv_to_json                                      util/\nstage database/tsv2tsj                                            util/\nstage database/tsv2tsj.pl                                         util/\nstage runner/mkmimo/test/util/mkprocs                             util/\nstage database/tsv2json                                           util/\nstage util/partition_integers                                     util/\n\n# DDlib\nstage ddlib/ddlib                                                 lib/python/\nstage ddlib/deepdive.py                                           lib/python/\n\n# DeepDive inference engine and supporting utilities\n#  copying shared libraries required by the dimmwitted sampler and generating a wrapper\nPATH=\"$PWD\"/extern/buildkit:\"$PATH\"\nfor cmd in dw; do\nstage inference/dimmwitted/$cmd              \t                  util/sampler-$cmd.bin\ninstall-shared-libraries-required-by  \"$STAGE_DIR\"/lib/dw \\\n      inference/dimmwitted/$cmd\ngenerate-wrapper-for-libdirs          \"$STAGE_DIR\"/util/sampler-$cmd \\\n                                      \"$STAGE_DIR\"/util/sampler-$cmd.bin \\\n                                      \"$STAGE_DIR\"/lib/dw\ndone\nstage inference/deepdive-model                                    util/\nstage inference/run-sampler                                       util/\nstage inference/restore_partitioned_vids                          util/\n\n# Stanford CoreNLP utilities\nstage util/nlp/deepdive-corenlp                                   util/\nfor nlp_util in util/nlp/*\ndo stage \"$nlp_util\"                                              util/nlp/\ndone\n\n# DeepDive utilities\nstage extern/buildkit/fetch-verify                                util/\nstage util/draw_calibration_plot                                  util/\nstage util/calibration.py                                         util/\nstage util/calibration.plg                                        util/\n\nif [[ -z ${NO_MINDBENDER:-} ]]; then\nstage .build/submodule/util/mindbender/@prefix@/                  mindbender/\nstage util/mindbender-wrapper.sh                                  bin/mindbender\nfi\n\n# runtime dependencies after building them from source\n! [[ -e extern/.build/bundled ]] ||\nstage extern/.build/bundled                                       lib/\n"
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        },
        {
          "name": "util",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}