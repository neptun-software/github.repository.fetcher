{
  "metadata": {
    "timestamp": 1736568464521,
    "page": 441,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQ0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "trojanpanel/install-script",
      "stars": 1826,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": "/.idea/\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5380859375,
          "content": "[中文](README_ZH.md)\n\n<div align=\"center\">\n<a href=\"https://github.com/trojanpanel\"><img src=\"https://github.com/trojanpanel/install-script/assets/46235235/bfc4f96a-e8b6-499d-956f-a9c212059294\" alt=\"Trojan Panel\" width=\"150\" /></a>\n<h1>Trojan Panel</h1>\n<p>\n<a href=\"https://github.com/trojanpanel/install-script/stargazers\"><img src=\"https://img.shields.io/github/stars/trojanpanel/install-script\" alt=\"GitHub stars\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/forks\"><img src=\"https://img.shields.io/github/forks/trojanpanel/install-script\" alt=\"GitHub forks\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/issues\"><img src=\"https://img.shields.io/github/issues/trojanpanel/install-script\" alt=\"GitHub issues\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/releases\"><img src=\"https://img.shields.io/github/v/release/trojanpanel/install-script\" alt=\"GitHub release\"></a>\n<a href=\"https://hub.docker.com/r/jonssonyan/trojan-panel\"><img src=\"https://img.shields.io/docker/pulls/jonssonyan/trojan-panel\" alt=\"Docker pulls\"></a>\n</p>\n<h3>Multi-user web administration panel supporting Xray/Trojan-Go/Hysteria/NaiveProxy</h3>\n<a href=\"https://github.com/trojanpanel/install-script/assets/46235235/7ac2bba1-b442-442d-b48e-b52f92e0bad8\"><img src=\"https://github.com/trojanpanel/install-script/assets/46235235/7ac2bba1-b442-442d-b48e-b52f92e0bad8\" alt=\"Trojan Panel\"/></a>\n</div>\n\n## Features\n\n- Speed build: One-click installation of scripts, lowering the deployment threshold, and quickly building the system\n- Globalization: System language support 中文/English/한국인/فارسی\n- Multi-agent support: Node type supports Xray/Trojan-Go/Hysteria/NaiveProxy\n- Distributed: The front-end and back-end are developed separately, reducing the coupling between modules, and can be\n  freely combined and deployed on multiple servers\n- Powerful: Support login registration/user management/node management/mail management/blacklist management/custom\n  camouflage website/system Kanban, etc.\n- What you see is what you get: Support multi-node management, automatic management of remote nodes, automatic\n  application/renewal of certificates, editing nodes in the panel, remote service real-time modification of node\n  configuration\n\n## Recommended OS\n\nOS: CentOS 7+ / Ubuntu 18+ / Debian 10+\n\nCPU: linux/amd64 / linux/arm/v6 / linux/arm/v7 / linux/arm64 / linux/s390x / linux/ppc64le / linux/386\n\nMemory: ≥ 1G\n\n## Installation\n\n- Online(recommended)\n\n    ```shell\n    source <(curl -L https://github.com/trojanpanel/install-script/raw/main/install_script.sh)\n    ```\n\n- Standalone\n\n    ```shell\n    source <(curl -L https://github.com/trojanpanel/install-script/raw/main/install_script_standalone.sh)\n    ```\n\n- [Install old version](README_ARCHIVE.md)\n\n## Telegram\n\nTelegram Channel: https://t.me/TrojanPanel\n\n## Documentation\n\nVisit [https://trojanpanel.github.io](https://trojanpanel.github.io) to view the full documentation\n\n## Change Log\n\nVisit [https://trojanpanel.github.io/change/change-log.html](https://trojanpanel.github.io/change/change-log.html) to view the full log\n\n## Bugs & Issues\n\n[Issues](https://github.com/trojanpanel/install-script/issues)\n\n## Thanks\n\n- [trojan](https://github.com/trojan-gfw/trojan)\n- [trojan-go](https://github.com/p4gefau1t/trojan-go)\n- [Xray-core](https://github.com/XTLS/Xray-core)\n- [hysteria](https://github.com/HyNetwork/hysteria)\n- [naiveproxy](https://github.com/klzgrad/naiveproxy)\n\n## Stargazers over time\n\n[![Stargazers over time](https://starchart.cc/trojanpanel/install-script.svg)](https://github.com/trojanpanel/install-script)\n"
        },
        {
          "name": "README_ARCHIVE.md",
          "type": "blob",
          "size": 2.16015625,
          "content": "[中文](README_ARCHIVE_ZH.md)\n\n# Release Notes\n\n|                Install Script                | Trojan Panel UI | Trojan Panel | Trojan Panel Core | Core SDK |  Xray  | Trojan Go | Hysteria | Hysteria2 | Caddy（NaiveProxy） |\n|:--------------------------------------------:|:---------------:|:------------:|:-----------------:|:--------:|:------:|:---------:|:--------:|:---------:|:-----------------:|\n| [v2.1.5](./archive/install_script_v2.1.5.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.6](./archive/install_script_v2.1.6.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.7](./archive/install_script_v2.1.7.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.8](./archive/install_script_v2.1.8.sh) |     v2.1.6      |    v2.1.5    |      v2.1.2       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.2.0](./archive/install_script_v2.2.0.sh) |     v2.1.6      |    v2.2.0    |      v2.2.0       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.2.1](./archive/install_script_v2.2.1.sh) |     v2.1.6      |    v2.2.0    |      v2.2.1       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.3.0](./archive/install_script_v2.3.0.sh) |     v2.2.0      |    v2.3.0    |      v2.3.0       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n| [v2.3.1](./archive/install_script_v2.3.1.sh) |     v2.2.0      |    v2.3.0    |      v2.3.0       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n| [v2.3.2](./archive/install_script_v2.3.2.sh) |     v2.3.0      |    v2.3.1    |      v2.3.1       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n\n# Install old version\n\n```shell\nsource <(curl -L https://github.com/trojanpanel/install-script/raw/main/archive/install_script_{old_version}.sh)\n```\n\nexplanation of params:\n\n- `{old_version}`: old version number"
        },
        {
          "name": "README_ARCHIVE_ZH.md",
          "type": "blob",
          "size": 2.1376953125,
          "content": "[English](README_ARCHIVE.md)\n\n## 发行说明\n\n|                Install Script                | Trojan Panel UI | Trojan Panel | Trojan Panel Core | Core SDK |  Xray  | Trojan Go | Hysteria | Hysteria2 | Caddy（NaiveProxy） |\n|:--------------------------------------------:|:---------------:|:------------:|:-----------------:|:--------:|:------:|:---------:|:--------:|:---------:|:-----------------:|\n| [v2.1.5](./archive/install_script_v2.1.5.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.6](./archive/install_script_v2.1.6.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.7](./archive/install_script_v2.1.7.sh) |     v2.1.5      |    v2.1.4    |      v2.1.1       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.1.8](./archive/install_script_v2.1.8.sh) |     v2.1.6      |    v2.1.5    |      v2.1.2       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.2.0](./archive/install_script_v2.2.0.sh) |     v2.1.6      |    v2.2.0    |      v2.2.0       |  v0.0.1  | v1.8.0 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.2.1](./archive/install_script_v2.2.1.sh) |     v2.1.6      |    v2.2.0    |      v2.2.1       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |           |      v2.6.4       |\n| [v2.3.0](./archive/install_script_v2.3.0.sh) |     v2.2.0      |    v2.3.0    |      v2.3.0       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n| [v2.3.1](./archive/install_script_v2.3.1.sh) |     v2.2.0      |    v2.3.0    |      v2.3.0       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n| [v2.3.2](./archive/install_script_v2.3.2.sh) |     v2.3.0      |    v2.3.1    |      v2.3.1       |  v0.0.1  | v1.8.4 |  v0.10.6  |  v1.3.4  |  v2.0.4   |      v2.6.4       |\n\n## 安装旧版\n\n```shell\nsource <(curl -L https://github.com/trojanpanel/install-script/raw/main/archive/install_script_{old_version}.sh)\n```\n\n参数解释:\n\n- `{old_version}`: 旧版本号"
        },
        {
          "name": "README_ZH.md",
          "type": "blob",
          "size": 3.2890625,
          "content": "[English](README.md)\n\n<div align=\"center\">\n<a href=\"https://github.com/trojanpanel\"><img src=\"https://github.com/trojanpanel/install-script/assets/46235235/bfc4f96a-e8b6-499d-956f-a9c212059294\" alt=\"Trojan Panel\" width=\"150\" /></a>\n<h1>Trojan Panel</h1>\n<p>\n<a href=\"https://github.com/trojanpanel/install-script/stargazers\"><img src=\"https://img.shields.io/github/stars/trojanpanel/install-script\" alt=\"GitHub stars\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/forks\"><img src=\"https://img.shields.io/github/forks/trojanpanel/install-script\" alt=\"GitHub forks\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/issues\"><img src=\"https://img.shields.io/github/issues/trojanpanel/install-script\" alt=\"GitHub issues\"></a>\n<a href=\"https://github.com/trojanpanel/install-script/releases\"><img src=\"https://img.shields.io/github/v/release/trojanpanel/install-script\" alt=\"GitHub release\"></a>\n<a href=\"https://hub.docker.com/r/jonssonyan/trojan-panel\"><img src=\"https://img.shields.io/docker/pulls/jonssonyan/trojan-panel\" alt=\"Docker pulls\"></a>\n</p>\n<h3>支持Xray/Trojan-Go/Hysteria/NaiveProxy的多用户Web管理面板</h3>\n<a href=\"https://github.com/trojanpanel/install-script/assets/46235235/7ac2bba1-b442-442d-b48e-b52f92e0bad8\"><img src=\"https://github.com/trojanpanel/install-script/assets/46235235/7ac2bba1-b442-442d-b48e-b52f92e0bad8\" alt=\"Trojan Panel\"/></a>\n</div>\n\n## 特点\n\n- 极速搭建: 一键安装脚本，降低部署门槛，快速搭建系统\n- 国际化: 系统语言支持中文/English/한국인/فارسی\n- 多代理支持: 节点类型支持Xray/Trojan-Go/Hysteria/NaiveProxy\n- 分布式: 前后端分离开发，减少模块之间耦合度，可以自由组合部署在多个服务器\n- 功能强大: 支持登录注册/用户管理/节点管理/邮件管理/黑名单管理/自定义伪装网站/系统看板等\n- 所见即所得: 支持多节点管理，自动化管理远程节点，自动化申请/续签证书，面板内编辑节点，远程服务实时修改节点配置\n\n## 系统要求\n\n系统: CentOS 7+ / Ubuntu 18+ / Debian 10+\n\nCPU: linux/amd64 / linux/arm/v6 / linux/arm/v7 / linux/arm64 / linux/s390x / linux/ppc64le / linux/386\n\n内存: ≥ 1G\n\n## 安装\n\n- 联机（推荐）\n\n    ```shell\n    source <(curl -L https://github.com/trojanpanel/install-script/raw/main/install_script.sh)\n    ```\n\n- 单机\n\n    ```shell\n    source <(curl -L https://github.com/trojanpanel/install-script/raw/main/install_script_standalone.sh)\n    ```\n\n- [安装旧版本](README_ARCHIVE_ZH.md)\n\n## Telegram\n\nTelegram Channel: https://t.me/TrojanPanel\n\n## 文档\n\n访问 [https://trojanpanel.github.io](https://trojanpanel.github.io) 查看完整文档\n\n## 更新日志\n\n访问 [https://trojanpanel.github.io/change/change-log.html](https://trojanpanel.github.io/change/change-log.html) 查看完整日志\n\n## 报告缺陷与问题\n\n[Issues](https://github.com/trojanpanel/install-script/issues)\n\n## 致谢\n\n- [trojan](https://github.com/trojan-gfw/trojan)\n- [trojan-go](https://github.com/p4gefau1t/trojan-go)\n- [Xray-core](https://github.com/XTLS/Xray-core)\n- [hysteria](https://github.com/HyNetwork/hysteria)\n- [naiveproxy](https://github.com/klzgrad/naiveproxy)\n\n## Star随时间变化\n\n[![Stargazers over time](https://starchart.cc/trojanpanel/install-script.svg)](https://github.com/trojanpanel/install-script)\n"
        },
        {
          "name": "archive",
          "type": "tree",
          "content": null
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 3.205078125,
          "content": "version: '3'\n\nservices:\n  trojan-panel-caddy:\n    image: caddy:2.6.2\n    container_name: trojan-panel-caddy\n    restart: always\n    network_mode: host\n    volumes:\n      - \"/tpdata/caddy/config.json:/tpdata/caddy/config.json\"\n      - \"/tpdata/cert/:/tpdata/cert/certificates/acme-v02.api.letsencrypt.org-directory/${domain}/\"\n      - \"/tpdata/web/:/tpdata/web/\"\n      - \"/tpdata/caddy/logs/:/tpdata/caddy/logs/\"\n    command: caddy run --config /tpdata/caddy/config.json\n\n  trojan-panel-mariadb:\n    image: mariadb:10.7.3\n    container_name: trojan-panel-mariadb\n    restart: always\n    network_mode: host\n    environment:\n      MYSQL_DATABASE: trojan_panel_db\n      MYSQL_ROOT_PASSWORD: \"${mariadb_pas}\"\n      TZ: Asia/Shanghai\n    command: --port=9507\n\n  trojan-panel-redis:\n    image: redis:6.2.7\n    container_name: trojan-panel-redis\n    restart: always\n    network_mode: host\n    command: redis-server --requirepass ${redis_pass} --port 6378\n\n  trojan-panel:\n    image: jonssonyan/trojan-panel\n    container_name: trojan-panel\n    restart: always\n    network_mode: host\n    volumes:\n      - \"/tpdata/web/:/tpdata/trojan-panel/webfile/\"\n      - \"/tpdata/trojan-panel/logs/:/tpdata/trojan-panel/logs/\"\n      - \"/tpdata/trojan-panel/config/:/tpdata/trojan-panel/config/\"\n      - \"/etc/localtime:/etc/localtime\"\n    environment:\n      - \"GIN_MODE=release\"\n      - \"mariadb_ip=127.0.0.1\"\n      - \"mariadb_port=9507\"\n      - \"mariadb_user=root\"\n      - \"mariadb_pas=${mariadb_pas}\"\n      - \"redis_host=127.0.0.1\"\n      - \"redis_port=6378\"\n      - \"redis_pass=${redis_pass}\"\n      - \"server_port=8081\"\n\n  trojan-panel-ui:\n    image: jonssonyan/trojan-panel-ui\n    container_name: trojan-panel-ui\n    restart: always\n    network_mode: host\n    volumes:\n      - \"/tpdata/trojan-panel-ui/nginx/default.conf:/etc/nginx/conf.d/default.conf\"\n      - \"/tpdata/cert/:/tpdata/cert/\"\n\n  trojan-panel-core:\n    image: jonssonyan/trojan-panel-core\n    container_name: trojan-panel-core\n    restart: always\n    network_mode: host\n    volumes:\n      - \"/tpdata/trojan-panel-core/bin/xray/config/:/tpdata/trojan-panel-core/bin/xray/config/\"\n      - \"/tpdata/trojan-panel-core/bin/trojango/config/:/tpdata/trojan-panel-core/bin/trojango/config/\"\n      - \"/tpdata/trojan-panel-core/bin/hysteria/config/:/tpdata/trojan-panel-core/bin/hysteria/config/\"\n      - \"/tpdata/trojan-panel-core/bin/naiveproxy/config/:/tpdata/trojan-panel-core/bin/naiveproxy/config/\"\n      - \"/tpdata/trojan-panel-core/bin/hysteria2/config/:/tpdata/trojan-panel-core/bin/hysteria2/config/\"\n      - \"/tpdata/trojan-panel-core/logs/:/tpdata/trojan-panel-core/logs/\"\n      - \"/tpdata/trojan-panel-core/config/:/tpdata/trojan-panel-core/config/\"\n      - \"/tpdata/cert/:/tpdata/cert/\"\n      - \"/tpdata/web/:/tpdata/web/\"\n      - \"/etc/localtime:/etc/localtime\"\n    environment:\n      - \"GIN_MODE=release\"\n      - \"mariadb_ip=127.0.0.1\"\n      - \"mariadb_port=9507\"\n      - \"mariadb_user=root\"\n      - \"mariadb_pas=${mariadb_pas}\"\n      - \"database=trojan_panel_db\"\n      - \"account-table=account\"\n      - \"redis_host=127.0.0.1\"\n      - \"redis_port=6378\"\n      - \"redis_pass=${redis_pass}\"\n      - \"crt_path=/tpdata/cert/${domain}.crt\"\n      - \"key_path=/tpdata/cert/${domain}.key\"\n      - \"grpc_port=8100\"\n      - \"server_port=8082\""
        },
        {
          "name": "install_script.sh",
          "type": "blob",
          "size": 71.3935546875,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\n# System Required: CentOS 7+/Ubuntu 18+/Debian 10+\n# Version: v2.3.2\n# Description: One click Install Trojan Panel server\n# Author: jonssonyan <https://jonssonyan.com>\n# Github: https://github.com/trojanpanel/install-script\n\ninit_var() {\n  ECHO_TYPE=\"echo -e\"\n\n  package_manager=\"\"\n  release=\"\"\n  get_arch=\"\"\n  can_google=0\n\n  # Docker\n  DOCKER_MIRROR='\"https://hub-mirror.c.163.com\",\"https://ccr.ccs.tencentyun.com\",\"https://mirror.baidubce.com\",\"https://dockerproxy.com\"'\n\n  # Project directory\n  TP_DATA=\"/tpdata/\"\n\n  STATIC_HTML=\"https://github.com/trojanpanel/install-script/releases/download/v1.0/html.tar.gz\"\n\n  # Web\n  WEB_PATH=\"/tpdata/web/\"\n\n  # Cert\n  CERT_PATH=\"/tpdata/cert/\"\n  DOMAIN_FILE=\"/tpdata/domain.lock\"\n  domain=\"\"\n  crt_path=\"\"\n  key_path=\"\"\n\n  # Caddy2\n  CADDY_DATA=\"/tpdata/caddy/\"\n  CADDY_CONFIG=\"${CADDY_DATA}config.json\"\n  CADDY_LOG=\"${CADDY_DATA}logs/\"\n  CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme-v02.api.letsencrypt.org-directory/\"\n  caddy_port=80\n  caddy_remote_port=8863\n  your_email=\"\"\n  ssl_option=1\n  ssl_module_type=1\n  ssl_module=\"acme\"\n\n  # Nginx\n  NGINX_DATA=\"/tpdata/nginx/\"\n  NGINX_CONFIG=\"${NGINX_DATA}default.conf\"\n  nginx_port=80\n  nginx_remote_port=8863\n  nginx_https=1\n\n  # MariaDB\n  MARIA_DATA=\"/tpdata/mariadb/\"\n  mariadb_ip=\"127.0.0.1\"\n  mariadb_port=9507\n  mariadb_user=\"root\"\n  mariadb_pas=\"\"\n\n  # Redis\n  REDIS_DATA=\"/tpdata/redis/\"\n  redis_host=\"127.0.0.1\"\n  redis_port=6378\n  redis_pass=\"\"\n\n  # Trojan Panel Frontend\n  TROJAN_PANEL_UI_DATA=\"/tpdata/trojan-panel-ui/\"\n  # Nginx\n  UI_NGINX_DATA=\"${TROJAN_PANEL_UI_DATA}nginx/\"\n  UI_NGINX_CONFIG=\"${UI_NGINX_DATA}default.conf\"\n  trojan_panel_ui_port=8888\n  ui_https=1\n  trojan_panel_ip=\"127.0.0.1\"\n  trojan_panel_server_port=8081\n\n  # Trojan Panel Backend\n  TROJAN_PANEL_DATA=\"/tpdata/trojan-panel/\"\n  TROJAN_PANEL_WEBFILE=\"${TROJAN_PANEL_DATA}webfile/\"\n  TROJAN_PANEL_LOGS=\"${TROJAN_PANEL_DATA}logs/\"\n  TROJAN_PANEL_CONFIG=\"${TROJAN_PANEL_DATA}config/\"\n  trojan_panel_config_path=\"${TROJAN_PANEL_DATA}config/config.ini\"\n  trojan_panel_port=8081\n\n  # Trojan Panel Core\n  TROJAN_PANEL_CORE_DATA=\"/tpdata/trojan-panel-core/\"\n  TROJAN_PANEL_CORE_LOGS=\"${TROJAN_PANEL_CORE_DATA}logs/\"\n  TROJAN_PANEL_CORE_CONFIG=\"${TROJAN_PANEL_CORE_DATA}config/\"\n  trojan_panel_core_config_path=\"${TROJAN_PANEL_CORE_DATA}config/config.ini\"\n  database=\"trojan_panel_db\"\n  account_table=\"account\"\n  grpc_port=8100\n  trojan_panel_core_port=8082\n\n  # Version\n  trojan_panel_ui_current_version=\"\"\n  trojan_panel_ui_latest_version=\"v2.3.0\"\n  trojan_panel_current_version=\"\"\n  trojan_panel_latest_version=\"v2.3.1\"\n  trojan_panel_core_current_version=\"\"\n  trojan_panel_core_latest_version=\"v2.3.1\"\n\n  # SQL\n  sql_215=\"alter table account change validity_period preset_expire int unsigned default 0 not null comment '预设过期时长';alter table account add preset_quota bigint default 0 not null comment '预设配额' after preset_expire;update account set preset_quota = quota where last_login_time = 0;update account set quota = 0 where last_login_time = 0;alter table node add priority int default 100 not null comment '优先级' after port;INSERT INTO casbin_rule (p_type, v0, v1, v2, v3, v4, v5) VALUES ('p', 'sysadmin', '/api/account/clashSubscribeForSb', 'GET', 'default', 'default', 'default');alter table node_hysteria add server_name varchar(64) default '' not null comment '用于验证服务端证书的 hostname' after down_mbps;alter table node_hysteria add insecure tinyint(1) default 0 not null comment '忽略一切证书错误' after server_name;alter table node_hysteria add fast_open tinyint(1) default 0 not null comment '启用 Fast Open (降低连接建立延迟)' after insecure;\"\n  sql_230=\"CREATE TABLE node_hysteria2 ( id bigint(20) unsigned NOT NULL AUTO_INCREMENT COMMENT '自增主键', obfs_password varchar(64) NOT NULL DEFAULT '' COMMENT '混淆密码', up_mbps int(10) NOT NULL DEFAULT '100' COMMENT '单客户端最大上传速度 单位:Mbps', down_mbps int(10) NOT NULL DEFAULT '100' COMMENT '单客户端最大下载速度 单位:Mbps', server_name varchar(64) NOT NULL DEFAULT '' COMMENT '用于验证服务端证书的 hostname', insecure tinyint(1) NOT NULL DEFAULT '0' COMMENT '忽略一切证书错误', create_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT '创建时间', update_time datetime NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP COMMENT '更新时间', PRIMARY KEY (id) ) ENGINE=InnoDB DEFAULT CHARSET=utf8mb4 COMMENT='Hysteria2节点';INSERT INTO node_type (id, name, create_time, update_time) VALUES (5, 'hysteria2', '2022-04-01 00:00:00', '2022-04-01 00:00:00');\"\n}\n\necho_content() {\n  case $1 in\n  \"red\")\n    ${ECHO_TYPE} \"\\033[31m$2\\033[0m\"\n    ;;\n  \"green\")\n    ${ECHO_TYPE} \"\\033[32m$2\\033[0m\"\n    ;;\n  \"yellow\")\n    ${ECHO_TYPE} \"\\033[33m$2\\033[0m\"\n    ;;\n  \"blue\")\n    ${ECHO_TYPE} \"\\033[34m$2\\033[0m\"\n    ;;\n  \"purple\")\n    ${ECHO_TYPE} \"\\033[35m$2\\033[0m\"\n    ;;\n  \"skyBlue\")\n    ${ECHO_TYPE} \"\\033[36m$2\\033[0m\"\n    ;;\n  \"white\")\n    ${ECHO_TYPE} \"\\033[37m$2\\033[0m\"\n    ;;\n  esac\n}\n\nmkdir_tools() {\n  # Project directory\n  mkdir -p ${TP_DATA}\n\n  # Web\n  mkdir -p ${WEB_PATH}\n\n  # Cert\n  mkdir -p ${CERT_PATH}\n  touch ${DOMAIN_FILE}\n\n  # Caddy2\n  mkdir -p ${CADDY_DATA}\n  touch ${CADDY_CONFIG}\n  mkdir -p ${CADDY_LOG}\n\n  # Nginx\n  mkdir -p ${NGINX_DATA}\n  touch ${NGINX_CONFIG}\n\n  # MariaDB\n  mkdir -p ${MARIA_DATA}\n\n  # Redis\n  mkdir -p ${REDIS_DATA}\n\n  # Trojan Panel Frontend\n  mkdir -p ${TROJAN_PANEL_UI_DATA}\n  # Nginx\n  mkdir -p ${UI_NGINX_DATA}\n  touch ${UI_NGINX_CONFIG}\n\n  # Trojan Panel Backend\n  mkdir -p ${TROJAN_PANEL_DATA}\n  mkdir -p ${TROJAN_PANEL_LOGS}\n\n  # Trojan Panel Core\n  mkdir -p ${TROJAN_PANEL_CORE_DATA}\n  mkdir -p ${TROJAN_PANEL_CORE_LOGS}\n}\n\ncan_connect() {\n  ping -c2 -i0.3 -W1 \"$1\" &>/dev/null\n  if [[ \"$?\" == \"0\" ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\n# query .ini configuration file information\nget_ini_value() {\n  local config_file=\"$1\"\n  local key=\"$2\"\n  local section=\"\"\n  local section_flag=0\n\n  # split group and key names\n  IFS='.' read -r group_name key_name <<<\"$key\"\n\n  while IFS='=' read -r name val; do\n    # processing section name\n    if [[ $name =~ ^\\[(.*)\\]$ ]]; then\n      section=\"${BASH_REMATCH[1]}\"\n      if [[ $section == $group_name ]]; then\n        section_flag=1\n      else\n        section_flag=0\n      fi\n      continue\n    fi\n\n    # extract the value of the configuration item\n    if [[ $section_flag -eq 1 && $name == $key_name ]]; then\n      echo \"$val\"\n      return\n    fi\n  done <\"$config_file\"\n}\n\n# Version number comparison greater than or equal to\nversion_ge() {\n  local v1=${1#v}\n  local v2=${2#v}\n\n  local v1_parts=(${v1//./ })\n  local v2_parts=(${v2//./ })\n\n  for ((i = 0; i < 3; i++)); do\n    if ((${v1_parts[i]} < ${v2_parts[i]})); then\n      echo false\n      return 0\n    elif ((${v1_parts[i]} > ${v2_parts[i]})); then\n      echo true\n      return 0\n    fi\n  done\n  echo true\n}\n\ncheck_sys() {\n  if [[ $(command -v yum) ]]; then\n    package_manager='yum'\n  elif [[ $(command -v dnf) ]]; then\n    package_manager='dnf'\n  elif [[ $(command -v apt) ]]; then\n    package_manager='apt'\n  elif [[ $(command -v apt-get) ]]; then\n    package_manager='apt-get'\n  fi\n\n  if [[ -z \"${package_manager}\" ]]; then\n    echo_content red \"The system is not currently supported\"\n    exit 0\n  fi\n\n  if [[ -n $(find /etc -name \"redhat-release\") ]] || grep </proc/version -q -i \"centos\"; then\n    release=\"centos\"\n  elif grep </etc/issue -q -i \"debian\" && [[ -f \"/etc/issue\" ]] || grep </etc/issue -q -i \"debian\" && [[ -f \"/proc/version\" ]]; then\n    release=\"debian\"\n  elif grep </etc/issue -q -i \"ubuntu\" && [[ -f \"/etc/issue\" ]] || grep </etc/issue -q -i \"ubuntu\" && [[ -f \"/proc/version\" ]]; then\n    release=\"ubuntu\"\n  fi\n\n  if [[ -z \"${release}\" ]]; then\n    echo_content red \"The operating system only supports CentOS 7+/Ubuntu 18+/Debian 10+\"\n    exit 0\n  fi\n\n  if [[ $(arch) =~ (\"x86_64\"|\"amd64\"|\"arm64\"|\"aarch64\"|\"arm\"|\"s390x\") ]]; then\n    get_arch=$(arch)\n  fi\n\n  if [[ -z \"${get_arch}\" ]]; then\n    echo_content red \"The processor architecture only supports amd64/arm64/arm/s390x\"\n    exit 0\n  fi\n\n  can_connect www.google.com\n  [[ \"$?\" == \"0\" ]] && can_google=1\n}\n\ndepend_install() {\n  if [[ \"${package_manager}\" != 'yum' && \"${package_manager}\" != 'dnf' ]]; then\n    ${package_manager} update -y\n  fi\n  ${package_manager} install -y \\\n    curl \\\n    wget \\\n    tar \\\n    lsof \\\n    systemd\n}\n\n# Install Docker\ninstall_docker() {\n  if [[ ! $(docker -v 2>/dev/null) ]]; then\n    echo_content green \"---> Install Docker\"\n\n    # turn off firewall\n    if [[ \"${release}\" == \"centos\" ]]; then\n      systemctl disable firewalld\n    elif [[ \"${release}\" == \"debian\" || \"${release}\" == \"ubuntu\" ]]; then\n      sudo ufw disable\n    fi\n\n    # set time zone\n    timedatectl set-timezone Asia/Shanghai\n\n    if [[ ${can_google} == 0 ]]; then\n      sh <(curl -sL https://get.docker.com) --mirror Aliyun\n      mkdir -p /etc/docker &&\n        cat >/etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\":[${DOCKER_MIRROR}],\n  \"log-driver\":\"json-file\",\n  \"log-opts\":{\n      \"max-size\":\"50m\",\n      \"max-file\":\"3\"\n  }\n}\nEOF\n    else\n      sh <(curl -sL https://get.docker.com)\n      mkdir -p /etc/docker &&\n        cat >/etc/docker/daemon.json <<EOF\n{\n  \"log-driver\":\"json-file\",\n  \"log-opts\":{\n      \"max-size\":\"50m\",\n      \"max-file\":\"3\"\n  }\n}\nEOF\n    fi\n\n    systemctl enable docker &&\n      systemctl restart docker\n\n    if [[ $(docker -v 2>/dev/null) ]]; then\n      echo_content skyBlue \"---> Docker installation completed\"\n    else\n      echo_content red \"---> Docker installation failed\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Docker\"\n  fi\n}\n\n# Custom Settings Certificate\ninstall_custom_cert() {\n  if [[ -z \"$(cat \"${DOMAIN_FILE}\")\" ]]; then\n    while read -r -p \"Please enter the file path of the .crt certificate (required): \" crt_path; do\n      if [[ -z \"${crt_path}\" ]]; then\n        echo_content red \"Path cannot be empty\"\n      else\n        if [[ ! -f \"${crt_path}\" ]]; then\n          echo_content red \"The file path for the .crt certificate does not exist\"\n        else\n          cp \"${crt_path}\" \"${CERT_PATH}$1.crt\"\n          break\n        fi\n      fi\n    done\n    while read -r -p \"Please enter the file path of the .key certificate (required): \" key_path; do\n      if [[ -z \"${key_path}\" ]]; then\n        echo_content red \"Path cannot be empty\"\n      else\n        if [[ ! -f \"${key_path}\" ]]; then\n          echo_content red \"The file path for the .key certificate does not exist\"\n        else\n          cp \"${key_path}\" \"${CERT_PATH}$1.key\"\n          break\n        fi\n      fi\n    done\n    cat >${DOMAIN_FILE} <<EOF\n$1\nEOF\n    echo_content red \"\\n==============================================================\"\n    echo_content skyBlue \"---> Custom settings certificate installation completed\"\n    echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n    echo_content red \"\\n==============================================================\"\n  fi\n}\n\n# Caddy2 https custom settings certificate configuration file\ncaddy2_https_config() {\n  domain=$1\n  cat >${CADDY_CONFIG} <<EOF\n{\n    \"admin\":{\n        \"disabled\":true\n    },\n    \"logging\":{\n        \"logs\":{\n            \"default\":{\n                \"writer\":{\n                    \"output\":\"file\",\n                    \"filename\":\"${CADDY_LOG}error.log\"\n                },\n                \"level\":\"ERROR\"\n            }\n        }\n    },\n    \"storage\":{\n        \"module\":\"file_system\",\n        \"root\":\"${CERT_PATH}\"\n    },\n    \"apps\":{\n        \"http\":{\n            \"http_port\": ${caddy_port},\n            \"servers\":{\n                \"srv0\":{\n                    \"listen\":[\n                        \":${caddy_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"match\":[\n                                {\n                                    \"host\":[\n                                        \"${domain}\"\n                                    ]\n                                }\n                            ],\n                            \"handle\":[\n                                {\n                                    \"handler\":\"static_response\",\n                                    \"headers\":{\n                                        \"Location\":[\n                                            \"https://{http.request.host}:${caddy_remote_port}{http.request.uri}\"\n                                        ]\n                                    },\n                                    \"status_code\":301\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"srv1\":{\n                    \"listen\":[\n                        \":${caddy_remote_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"handle\":[\n                                {\n                                    \"handler\":\"subroute\",\n                                    \"routes\":[\n                                        {\n                                            \"match\":[\n                                                {\n                                                    \"host\":[\n                                                        \"${domain}\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"handle\":[\n                                                {\n                                                    \"handler\":\"file_server\",\n                                                    \"root\":\"${WEB_PATH}\",\n                                                    \"index_names\":[\n                                                        \"index.html\",\n                                                        \"index.htm\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"terminal\":true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"tls_connection_policies\":[\n                        {\n                            \"match\":{\n                                \"sni\":[\n                                    \"${domain}\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"automatic_https\":{\n                        \"disable\":true\n                    }\n                }\n            }\n        },\n        \"tls\":{\n            \"certificates\":{\n                \"automate\":[\n                    \"${domain}\"\n                ],\n                \"load_files\":[\n                    {\n                        \"certificate\":\"${CADDY_CERT_DIR}${domain}/${domain}.crt\",\n                        \"key\":\"${CADDY_CERT_DIR}${domain}/${domain}.key\"\n                    }\n                ]\n            },\n            \"automation\":{\n                \"policies\":[\n                    {\n                        \"issuers\":[\n                            {\n                                \"module\":\"${ssl_module}\",\n                                \"email\":\"${your_email}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\nEOF\n}\n\n# Caddy2 https automatic application and renewal certificate configuration file\ncaddy2_https_auto_config() {\n  domain=$1\n  cat >${CADDY_CONFIG} <<EOF\n{\n    \"admin\":{\n        \"disabled\":true\n    },\n    \"logging\":{\n        \"logs\":{\n            \"default\":{\n                \"writer\":{\n                    \"output\":\"file\",\n                    \"filename\":\"${CADDY_LOG}error.log\"\n                },\n                \"level\":\"ERROR\"\n            }\n        }\n    },\n    \"storage\":{\n        \"module\":\"file_system\",\n        \"root\":\"${CERT_PATH}\"\n    },\n    \"apps\":{\n        \"http\":{\n            \"http_port\": ${caddy_port},\n            \"servers\":{\n                \"srv0\":{\n                    \"listen\":[\n                        \":${caddy_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"match\":[\n                                {\n                                    \"host\":[\n                                        \"${domain}\"\n                                    ]\n                                }\n                            ],\n                            \"handle\":[\n                                {\n                                    \"handler\":\"static_response\",\n                                    \"headers\":{\n                                        \"Location\":[\n                                            \"https://{http.request.host}:${caddy_remote_port}{http.request.uri}\"\n                                        ]\n                                    },\n                                    \"status_code\":301\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"srv1\":{\n                    \"listen\":[\n                        \":${caddy_remote_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"handle\":[\n                                {\n                                    \"handler\":\"subroute\",\n                                    \"routes\":[\n                                        {\n                                            \"match\":[\n                                                {\n                                                    \"host\":[\n                                                        \"${domain}\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"handle\":[\n                                                {\n                                                    \"handler\":\"file_server\",\n                                                    \"root\":\"${WEB_PATH}\",\n                                                    \"index_names\":[\n                                                        \"index.html\",\n                                                        \"index.htm\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"terminal\":true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"tls_connection_policies\":[\n                        {\n                            \"match\":{\n                                \"sni\":[\n                                    \"${domain}\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"automatic_https\":{\n                        \"disable\":true\n                    }\n                }\n            }\n        },\n        \"tls\":{\n            \"certificates\":{\n                \"automate\":[\n                    \"${domain}\"\n                ]\n            },\n            \"automation\":{\n                \"policies\":[\n                    {\n                        \"issuers\":[\n                            {\n                                \"module\":\"${ssl_module}\",\n                                \"email\":\"${your_email}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\nEOF\n}\n\n# Install Caddy2\ninstall_caddy2() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n    echo_content green \"---> Install Caddy2+https\"\n\n    wget --no-check-certificate -O ${WEB_PATH}html.tar.gz -N ${STATIC_HTML} &&\n      tar -zxvf ${WEB_PATH}html.tar.gz -k -C ${WEB_PATH}\n\n    read -r -p \"Please enter the port of Caddy2 (default: 80): \" caddy_port\n    [[ -z \"${caddy_port}\" ]] && caddy_port=80\n    read -r -p \"Please enter the forwarding port of Caddy2 (default: 8863): \" caddy_remote_port\n    [[ -z \"${caddy_remote_port}\" ]] && caddy_remote_port=8863\n\n    echo_content yellow \"Tip: Please confirm that the domain name has been resolved to this machine, otherwise the installation may fail\"\n    while read -r -p \"Please enter your domain name (required): \" domain; do\n      if [[ -z \"${domain}\" ]]; then\n        echo_content red \"Domain name cannot be empty\"\n      else\n        break\n      fi\n    done\n\n    read -r -p \"Please enter your email (optional): \" your_email\n\n    while read -r -p \"Please choose the way to set up the certificate? (1/automatically apply for and renew the certificate 2/manually set the certificate path default: 1: \" ssl_option; do\n      if [[ -z ${ssl_option} || ${ssl_option} == 1 ]]; then\n        while read -r -p \"Please choose the way to apply for the certificate (1/acme 2/zerossl default: 1: \" ssl_module_type; do\n          if [[ -z \"${ssl_module_type}\" || ${ssl_module_type} == 1 ]]; then\n            ssl_module=\"acme\"\n            CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme-v02.api.letsencrypt.org-directory/\"\n            break\n          elif [[ ${ssl_module_type} == 2 ]]; then\n            ssl_module=\"zerossl\"\n            CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme.zerossl.com-v2-dv90/\"\n            break\n          else\n            echo_content red \"Cannot enter other characters except 1 and 2\"\n          fi\n        done\n        caddy2_https_auto_config \"${domain}\"\n        break\n      elif [[ ${ssl_option} == 2 ]]; then\n        install_custom_cert \"${domain}\"\n        caddy2_https_config \"${domain}\"\n        break\n      else\n        echo_content red \"Cannot enter other characters except 1 and 2\"\n      fi\n    done\n\n    # Caddy2 temporary listening port for automatic certificate application\n    if [[ -n $(lsof -i:${caddy_port},${caddy_remote_port} -t) ]]; then\n      kill -9 \"$(lsof -i:${caddy_port},${caddy_remote_port} -t)\"\n    fi\n\n    docker pull caddy:2.6.2 &&\n      docker run -d --name trojan-panel-caddy --restart always \\\n        --network=host \\\n        -v \"${CADDY_CONFIG}\":\"${CADDY_CONFIG}\" \\\n        -v ${CERT_PATH}:\"${CADDY_CERT_DIR}${domain}/\" \\\n        -v ${WEB_PATH}:${WEB_PATH} \\\n        -v ${CADDY_LOG}:${CADDY_LOG} \\\n        caddy:2.6.2 caddy run --config ${CADDY_CONFIG}\n\n    cat >${DOMAIN_FILE} <<EOF\n${domain}\nEOF\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-caddy$\" -f \"status=running\") ]]; then\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"---> Caddy2+https installation completed\"\n      echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> Caddy2+https installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Caddy2+https\"\n  fi\n}\n\n# Nginx http configuration file\nnginx_http_config() {\n  cat >${NGINX_CONFIG} <<-EOF\nserver {\n    listen       ${nginx_port};\n    server_name  localhost;\n\n    location / {\n        root   ${WEB_PATH};\n        index  index.html index.htm;\n    }\n\n    error_page  497               http://\\$host:${nginx_port}\\$request_uri;\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\nEOF\n}\n\n# Nginx https configuration file\nnginx_https_config() {\n  domain=$1\n  cat >${NGINX_CONFIG} <<-EOF\nserver {\n    listen ${nginx_port};\n    server_name localhost;\n\n    return 301 http://\\$host:${nginx_remote_port}\\$request_uri;\n}\n\nserver {\n    listen       ${nginx_remote_port} ssl;\n    server_name  localhost;\n\n    # force ssl\n    ssl on;\n    ssl_certificate      ${CERT_PATH}${domain}.crt;\n    ssl_certificate_key  ${CERT_PATH}${domain}.key;\n    # cache validity period\n    ssl_session_timeout  5m;\n    # secure link optional encryption protocol\n    ssl_protocols  TLSv1.3;\n    # encryption algorithm\n    ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # use server-side preferred algorithm\n    ssl_prefer_server_ciphers  on;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   ${WEB_PATH};\n        index  index.html index.htm;\n    }\n\n    #error_page  404              /404.html;\n    #497 http->https\n    error_page  497               https://\\$host:${nginx_remote_port}\\$request_uri;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\nEOF\n}\n\n# Install Nginx\ninstall_nginx() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-nginx$\") ]]; then\n    echo_content green \"---> Install Nginx\"\n\n    wget --no-check-certificate -O ${WEB_PATH}html.tar.gz -N ${STATIC_HTML} &&\n      tar -zxvf ${WEB_PATH}html.tar.gz -k -C ${WEB_PATH}\n\n    read -r -p \"Please enter the port of Nginx (default: 80): \" nginx_port\n    [[ -z \"${nginx_port}\" ]] && nginx_port=80\n    read -r -p \"Please enter the forwarding port of Nginx (default: 8863): \" nginx_remote_port\n    [[ -z \"${nginx_remote_port}\" ]] && nginx_remote_port=8863\n\n    while read -r -p \"Please choose whether to enable https in Nginx? (0/off 1/on default: 1): \" nginx_https; do\n      if [[ -z ${nginx_https} || ${nginx_https} == 1 ]]; then\n        install_custom_cert \"custom_cert\"\n        nginx_https_config \"custom_cert\"\n        break\n      elif [[ ${nginx_https} == 0 ]]; then\n        nginx_http_config\n        break\n      else\n        echo_content red \"Cannot enter other characters except 1 and 2\"\n      fi\n    done\n\n    docker pull nginx:1.20-alpine &&\n      docker run -d --name trojan-panel-nginx --restart always \\\n        --network=host \\\n        -v \"${NGINX_CONFIG}\":\"/etc/nginx/conf.d/default.conf\" \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        -v ${WEB_PATH}:${WEB_PATH} \\\n        nginx:1.20-alpine\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-nginx$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Nginx installation completed\"\n    else\n      echo_content red \"---> Nginx installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Nginx\"\n  fi\n}\n\n# Install a web server\ninstall_reverse_proxy() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-caddy$|^trojan-panel-nginx$\") ]]; then\n    echo_content green \"---> Install a web server\"\n\n    while :; do\n      echo_content yellow \"1. Install Caddy2+https (recommend)\"\n      echo_content yellow \"2. Install Nginx\"\n      echo_content yellow \"3. Not install\"\n      read -r -p \"Please select (default: 1): \" whether_install_reverse_proxy\n      [[ -z \"${whether_install_reverse_proxy}\" ]] && whether_install_reverse_proxy=1\n\n      case ${whether_install_reverse_proxy} in\n      1)\n        install_caddy2\n        break\n        ;;\n      2)\n        install_nginx\n        break\n        ;;\n      3)\n        break\n        ;;\n      *)\n        echo_content red \"No such option\"\n        continue\n        ;;\n      esac\n    done\n\n    echo_content skyBlue \"---> Web server installation completed\"\n  fi\n}\n\n# Set certificate\ninstall_cert() {\n  if [[ -z \"$(cat \"${DOMAIN_FILE}\")\" ]]; then\n    echo_content green \"---> Set certificate\"\n\n    while :; do\n      echo_content yellow \"1. Custom certificate\"\n      echo_content yellow \"2. Not set\"\n      read -r -p \"Please select (default: 1): \" whether_install_cert\n      [[ -z \"${whether_install_cert}\" ]] && whether_install_cert=1\n\n      case ${whether_install_cert} in\n      1)\n        install_custom_cert \"custom_cert\"\n        break\n        ;;\n      2)\n        break\n        ;;\n      *)\n        echo_content red \"No such option\"\n        continue\n        ;;\n      esac\n    done\n\n    echo_content green \"---> Certificate setup completed\"\n  fi\n}\n\n# Install MariaDB\ninstall_mariadb() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-mariadb$\") ]]; then\n    echo_content green \"---> Install MariaDB\"\n\n    read -r -p \"Please enter the port of MariaDB (default: 9507): \" mariadb_port\n    [[ -z \"${mariadb_port}\" ]] && mariadb_port=9507\n    read -r -p \"Please enter the username of MariaDB (default: root): \" mariadb_user\n    [[ -z \"${mariadb_user}\" ]] && mariadb_user=\"root\"\n    while read -r -p \"Please enter the password of MariaDB (required): \" mariadb_pas; do\n      if [[ -z \"${mariadb_pas}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    if [[ \"${mariadb_user}\" == \"root\" ]]; then\n      docker pull mariadb:10.7.3 &&\n        docker run -d --name trojan-panel-mariadb --restart always \\\n          --network=host \\\n          -e MYSQL_DATABASE=\"trojan_panel_db\" \\\n          -e MYSQL_ROOT_PASSWORD=\"${mariadb_pas}\" \\\n          -e TZ=Asia/Shanghai \\\n          mariadb:10.7.3 \\\n          --port ${mariadb_port} \\\n          --character-set-server=utf8mb4 \\\n          --collation-server=utf8mb4_unicode_ci\n    else\n      docker pull mariadb:10.7.3 &&\n        docker run -d --name trojan-panel-mariadb --restart always \\\n          --network=host \\\n          -e MYSQL_DATABASE=\"trojan_panel_db\" \\\n          -e MYSQL_ROOT_PASSWORD=\"${mariadb_pas}\" \\\n          -e MYSQL_USER=\"${mariadb_user}\" \\\n          -e MYSQL_PASSWORD=\"${mariadb_pas}\" \\\n          -e TZ=Asia/Shanghai \\\n          mariadb:10.7.3 \\\n          --port ${mariadb_port} \\\n          --character-set-server=utf8mb4 \\\n          --collation-server=utf8mb4_unicode_ci\n    fi\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-mariadb$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> MariaDB installation completed\"\n      echo_content yellow \"---> The MariaDB password of root (please keep it safe): ${mariadb_pas}\"\n      if [[ \"${mariadb_user}\" != \"root\" ]]; then\n        echo_content yellow \"---> The MariaDB password of ${mariadb_user} (please keep it safe): ${mariadb_pas}\"\n      fi\n    else\n      echo_content red \"---> MariaDB installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed MariaDB\"\n  fi\n}\n\n# Install Redis\ninstall_redis() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-redis$\") ]]; then\n    echo_content green \"---> Install Redis\"\n\n    read -r -p \"Please enter the port of Redis (default: 6378): \" redis_port\n    [[ -z \"${redis_port}\" ]] && redis_port=6378\n    while read -r -p \"Please enter the Redis password (required): \" redis_pass; do\n      if [[ -z \"${redis_pass}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    docker pull redis:6.2.7 &&\n      docker run -d --name trojan-panel-redis --restart always \\\n        --network=host \\\n        redis:6.2.7 \\\n        redis-server --requirepass \"${redis_pass}\" --port \"${redis_port}\"\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-redis$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Redis installation completed\"\n      echo_content yellow \"---> Redis password (please keep it safe): ${redis_pass}\"\n    else\n      echo_content red \"---> Redis installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Redis\"\n  fi\n}\n\n# Trojan Panel Frontend Nginx http configuration file\nui_http_config() {\n  cat >${UI_NGINX_CONFIG} <<-EOF\nserver {\n    listen       ${trojan_panel_ui_port};\n    server_name  localhost;\n\n    location / {\n        root   ${TROJAN_PANEL_UI_DATA};\n        index  index.html index.htm;\n    }\n\n    location /api {\n        proxy_pass http://${trojan_panel_ip}:${trojan_panel_server_port};\n    }\n\n    error_page  497               http://\\$host:${trojan_panel_ui_port}\\$request_uri;\n\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\nEOF\n}\n\n# Trojan Panel Frontend Nginx https configuration file\nui_https_config() {\n  cat >${UI_NGINX_CONFIG} <<-EOF\nserver {\n    listen       ${trojan_panel_ui_port} ssl;\n    server_name  localhost;\n\n    # force ssl\n    ssl on;\n    ssl_certificate      ${CERT_PATH}${domain}.crt;\n    ssl_certificate_key  ${CERT_PATH}${domain}.key;\n    # cache validity period\n    ssl_session_timeout  5m;\n    # secure link optional encryption protocol\n    ssl_protocols  TLSv1.3;\n    # encryption algorithm\n    ssl_ciphers  ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4;\n    # use server-side preferred algorithm\n    ssl_prefer_server_ciphers  on;\n\n    #access_log  /var/log/nginx/host.access.log  main;\n\n    location / {\n        root   ${TROJAN_PANEL_UI_DATA};\n        index  index.html index.htm;\n    }\n\n    location /api {\n        proxy_pass http://${trojan_panel_ip}:${trojan_panel_server_port};\n    }\n\n    #error_page  404              /404.html;\n    #497 http->https\n    error_page  497               https://\\$host:${trojan_panel_ui_port}\\$request_uri;\n\n    # redirect server error pages to the static page /50x.html\n    #\n    error_page   500 502 503 504  /50x.html;\n    location = /50x.html {\n        root   /usr/share/nginx/html;\n    }\n}\nEOF\n}\n\n# Install Trojan Panel Frontend\ninstall_trojan_panel_ui() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-ui$\") ]]; then\n    echo_content green \"---> Install Trojan Panel Frontend\"\n\n    read -r -p \"Please enter the IP address of the Trojan Panel Backend (default: local host): \" trojan_panel_ip\n    [[ -z \"${trojan_panel_ip}\" ]] && trojan_panel_ip=\"127.0.0.1\"\n    read -r -p \"Please enter the service port of the Trojan Panel Backend (default: 8081): \" trojan_panel_server_port\n    [[ -z \"${trojan_panel_server_port}\" ]] && trojan_panel_server_port=8081\n\n    read -r -p \"Please enter the port of the Trojan Panel Frontend (default: 8888): \" trojan_panel_ui_port\n    [[ -z \"${trojan_panel_ui_port}\" ]] && trojan_panel_ui_port=\"8888\"\n    while read -r -p \"Please choose whether to enable https on the Trojan Panel Frontend? (0/off 1/on default: 1): \" ui_https; do\n      if [[ -z ${ui_https} || ${ui_https} == 1 ]]; then\n        install_custom_cert \"custom_cert\"\n        domain=$(cat \"${DOMAIN_FILE}\")\n        ui_https_config\n        break\n      elif [[ ${ui_https} == 0 ]]; then\n        ui_http_config\n        break\n      else\n        echo_content red \"Cannot enter other characters except 1 and 2\"\n      fi\n    done\n\n    docker pull jonssonyan/trojan-panel-ui &&\n      docker run -d --name trojan-panel-ui --restart always \\\n        --network=host \\\n        -v \"${UI_NGINX_CONFIG}\":\"/etc/nginx/conf.d/default.conf\" \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        jonssonyan/trojan-panel-ui\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-ui$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel Frontend installation completed\"\n\n      https_flag=$([[ -z ${ui_https} || ${ui_https} == 1 ]] && echo \"https\" || echo \"http\")\n      domain_or_ip=$([[ -z ${domain} || \"${domain}\" == \"custom_cert\" ]] && echo \"ip\" || echo \"${domain}\")\n\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"Trojan Panel Frontend installed successfully\"\n      echo_content yellow \"Web management panel address: ${https_flag}://${domain_or_ip}:${trojan_panel_ui_port}\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> Trojan Panel Frontend installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the Trojan Panel Frontend\"\n  fi\n}\n\n# Install Trojan Panel Backend\ninstall_trojan_panel() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel$\") ]]; then\n    echo_content green \"---> Install Trojan Panel Backend\"\n\n    read -r -p \"Please enter the service port of the Trojan Panel Backend (default: 8081): \" trojan_panel_port\n    [[ -z \"${trojan_panel_port}\" ]] && trojan_panel_port=8081\n\n    read -r -p \"Please enter the IP address of MariaDB (default: local host): \" mariadb_ip\n    [[ -z \"${mariadb_ip}\" ]] && mariadb_ip=\"127.0.0.1\"\n    read -r -p \"Please enter the port of MariaDB (default: 9507): \" mariadb_port\n    [[ -z \"${mariadb_port}\" ]] && mariadb_port=9507\n    read -r -p \"Please enter the username of MariaDB (default: root): \" mariadb_user\n    [[ -z \"${mariadb_user}\" ]] && mariadb_user=\"root\"\n    while read -r -p \"Please enter the password of MariaDB (required): \" mariadb_pas; do\n      if [[ -z \"${mariadb_pas}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    docker exec trojan-panel-mariadb mysql --default-character-set=utf8 -h\"${mariadb_ip}\" -P\"${mariadb_port}\" -u\"${mariadb_user}\" -p\"${mariadb_pas}\" -e \"create database if not exists trojan_panel_db;\" &>/dev/null\n\n    read -r -p \"Please enter the IP address of Redis (default: local host): \" redis_host\n    [[ -z \"${redis_host}\" ]] && redis_host=\"127.0.0.1\"\n    read -r -p \"Please enter the port of Redis (default: 6378): \" redis_port\n    [[ -z \"${redis_port}\" ]] && redis_port=6378\n    while read -r -p \"Please enter the Redis password (required): \" redis_pass; do\n      if [[ -z \"${redis_pass}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    docker exec trojan-panel-redis redis-cli -h \"${redis_host}\" -p \"${redis_port}\" -a \"${redis_pass}\" -e \"flushall\" &>/dev/null\n\n    docker pull jonssonyan/trojan-panel &&\n      docker run -d --name trojan-panel --restart always \\\n        --network=host \\\n        -v ${WEB_PATH}:${TROJAN_PANEL_WEBFILE} \\\n        -v ${TROJAN_PANEL_LOGS}:${TROJAN_PANEL_LOGS} \\\n        -v ${TROJAN_PANEL_CONFIG}:${TROJAN_PANEL_CONFIG} \\\n        -v /etc/localtime:/etc/localtime \\\n        -e GIN_MODE=release \\\n        -e \"mariadb_ip=${mariadb_ip}\" \\\n        -e \"mariadb_port=${mariadb_port}\" \\\n        -e \"mariadb_user=${mariadb_user}\" \\\n        -e \"mariadb_pas=${mariadb_pas}\" \\\n        -e \"redis_host=${redis_host}\" \\\n        -e \"redis_port=${redis_port}\" \\\n        -e \"redis_pass=${redis_pass}\" \\\n        -e \"server_port=${trojan_panel_port}\" \\\n        jonssonyan/trojan-panel\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel Backend installation completed\"\n\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"Trojan Panel Backend installed successfully\"\n      echo_content yellow \"MariaDB ${mariadb_user} password (please keep it safe): ${mariadb_pas}\"\n      echo_content yellow \"Redis password (please keep it safe): ${redis_pass}\"\n      echo_content yellow \"System administrator Default username: sysadmin Default password: 123456\"\n      echo_content yellow \"Please log in to the management panel to change the password in time\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> Trojan Panel Backend installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the Trojan Panel Backend\"\n  fi\n}\n\n# Install Trojan Panel Core\ninstall_trojan_panel_core() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-core$\") ]]; then\n    echo_content green \"---> Install Trojan Panel Core\"\n\n    read -r -p \"Please enter the service port of the Trojan Panel Core (default: 8082): \" trojan_panel_core_port\n    [[ -z \"${trojan_panel_core_port}\" ]] && trojan_panel_core_port=8082\n\n    read -r -p \"Please enter the IP address of MariaDB (default: local host): \" mariadb_ip\n    [[ -z \"${mariadb_ip}\" ]] && mariadb_ip=\"127.0.0.1\"\n    read -r -p \"Please enter the port of MariaDB (default: 9507): \" mariadb_port\n    [[ -z \"${mariadb_port}\" ]] && mariadb_port=9507\n    read -r -p \"Please enter the username of MariaDB (default: root): \" mariadb_user\n    [[ -z \"${mariadb_user}\" ]] && mariadb_user=\"root\"\n    while read -r -p \"Please enter the password of MariaDB (required): \" mariadb_pas; do\n      if [[ -z \"${mariadb_pas}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n    read -r -p \"Please enter the database name (default: trojan_panel_db): \" database\n    [[ -z \"${database}\" ]] && database=\"trojan_panel_db\"\n    read -r -p \"Please enter the user table name of the database (default: account): \" account_table\n    [[ -z \"${account_table}\" ]] && account_table=\"account\"\n\n    read -r -p \"Please enter the IP address of Redis (default: local host): \" redis_host\n    [[ -z \"${redis_host}\" ]] && redis_host=\"127.0.0.1\"\n    read -r -p \"Please enter the port of Redis (default: 6378): \" redis_port\n    [[ -z \"${redis_port}\" ]] && redis_port=6378\n    while read -r -p \"Please enter the Redis password (required): \" redis_pass; do\n      if [[ -z \"${redis_pass}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n    read -r -p \"Please enter the API port (default: 8100): \" grpc_port\n    [[ -z \"${grpc_port}\" ]] && grpc_port=8100\n\n    domain=$(cat \"${DOMAIN_FILE}\")\n\n    docker pull jonssonyan/trojan-panel-core &&\n      docker run -d --name trojan-panel-core --restart always \\\n        --network=host \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/xray/config/:${TROJAN_PANEL_CORE_DATA}bin/xray/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/trojango/config/:${TROJAN_PANEL_CORE_DATA}bin/trojango/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/hysteria/config/:${TROJAN_PANEL_CORE_DATA}bin/hysteria/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/naiveproxy/config/:${TROJAN_PANEL_CORE_DATA}bin/naiveproxy/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/hysteria2/config/:${TROJAN_PANEL_CORE_DATA}bin/hysteria2/config/ \\\n        -v ${TROJAN_PANEL_CORE_LOGS}:${TROJAN_PANEL_CORE_LOGS} \\\n        -v ${TROJAN_PANEL_CORE_CONFIG}:${TROJAN_PANEL_CORE_CONFIG} \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        -v ${WEB_PATH}:${WEB_PATH} \\\n        -v /etc/localtime:/etc/localtime \\\n        -e GIN_MODE=release \\\n        -e \"mariadb_ip=${mariadb_ip}\" \\\n        -e \"mariadb_port=${mariadb_port}\" \\\n        -e \"mariadb_user=${mariadb_user}\" \\\n        -e \"mariadb_pas=${mariadb_pas}\" \\\n        -e \"database=${database}\" \\\n        -e \"account-table=${account_table}\" \\\n        -e \"redis_host=${redis_host}\" \\\n        -e \"redis_port=${redis_port}\" \\\n        -e \"redis_pass=${redis_pass}\" \\\n        -e \"crt_path=${CERT_PATH}${domain}.crt\" \\\n        -e \"key_path=${CERT_PATH}${domain}.key\" \\\n        -e \"grpc_port=${grpc_port}\" \\\n        -e \"server_port=${trojan_panel_core_port}\" \\\n        jonssonyan/trojan-panel-core\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-core$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel Core installation completed\"\n    else\n      echo_content red \"---> Trojan Panel Core installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the Trojan Panel Core\"\n  fi\n}\n\n# Update Trojan Panel database structure\nupdate_trojan_panel_database() {\n  echo_content skyBlue \"---> Update Trojan Panel database structure\"\n\n  version_214_215=(\"v2.1.4\")\n  if [[ \"${version_214_215[*]}\" =~ \"${trojan_panel_current_version}\" ]]; then\n    docker exec trojan-panel-mariadb mysql --default-character-set=utf8 -h\"${mariadb_ip}\" -P\"${mariadb_port}\" -u\"${mariadb_user}\" -p\"${mariadb_pas}\" -Dtrojan_panel_db -e \"${sql_215}\" &>/dev/null &&\n      trojan_panel_current_version=\"v2.1.5\"\n  fi\n  version_215_230=(\"v2.1.5\" \"v2.1.6\" \"v2.1.7\" \"v2.1.8\" \"v2.2.0\" \"v2.2.1\")\n  if [[ \"${version_215_230[*]}\" =~ \"${trojan_panel_current_version}\" ]]; then\n    docker exec trojan-panel-mariadb mysql --default-character-set=utf8 -h\"${mariadb_ip}\" -P\"${mariadb_port}\" -u\"${mariadb_user}\" -p\"${mariadb_pas}\" -Dtrojan_panel_db -e \"${sql_230}\" &>/dev/null &&\n      trojan_panel_current_version=\"v2.3.0\"\n  fi\n\n  echo_content skyBlue \"---> Trojan Panel database structure update completed\"\n}\n\n# Update Trojan Panel Core database structure\nupdate_trojan_panel_core_database() {\n  echo_content skyBlue \"---> Update Trojan Panel Core database structure\"\n\n  echo_content skyBlue \"---> Trojan Panel Core database structure update completed\"\n}\n\n# Update Trojan Panel Frontend\nupdate_trojan_panel_ui() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-ui$\") ]]; then\n    echo_content red \"---> Please install the Trojan Panel Frontend first\"\n    exit 0\n  fi\n\n  trojan_panel_ui_current_version=$(docker exec trojan-panel-ui cat ${TROJAN_PANEL_UI_DATA}version)\n  if [[ -z \"${trojan_panel_ui_current_version}\" || ! \"${trojan_panel_ui_current_version}\" =~ ^v.* ]]; then\n    echo_content red \"---> The current version does not support online updates\"\n    exit 0\n  fi\n\n  echo_content yellow \"Tip: The current version of the Trojan Panel Frontend (trojan-panel-ui) is ${trojan_panel_ui_current_version} the latest version is ${trojan_panel_ui_latest_version}\"\n\n  if [[ \"${trojan_panel_ui_current_version}\" != \"${trojan_panel_ui_latest_version}\" ]]; then\n    echo_content green \"---> Update Trojan Panel Frontend\"\n\n    docker rm -f trojan-panel-ui &&\n      docker rmi -f jonssonyan/trojan-panel-ui\n\n    docker pull jonssonyan/trojan-panel-ui &&\n      docker run -d --name trojan-panel-ui --restart always \\\n        --network=host \\\n        -v \"${UI_NGINX_CONFIG}\":\"/etc/nginx/conf.d/default.conf\" \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        jonssonyan/trojan-panel-ui\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-ui$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel Frontend update completed\"\n    else\n      echo_content red \"---> Trojan Panel Frontend update fails or runs abnormally, please try to repair or uninstall and reinstall\"\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the latest version of the Trojan Panel Frontend\"\n  fi\n}\n\n# Update Trojan Panel Backend\nupdate_trojan_panel() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel$\") ]]; then\n    echo_content red \"---> Please install the Trojan Panel Backend first\"\n    exit 0\n  fi\n\n  trojan_panel_current_version=$(docker exec trojan-panel ./trojan-panel -version)\n  if [[ -z \"${trojan_panel_current_version}\" || ! \"${trojan_panel_current_version}\" =~ ^v.* || ! $(version_ge \"${trojan_panel_current_version}\" \"v2.1.4\") ]]; then\n    echo_content red \"---> The current version does not support online updates\"\n    exit 0\n  fi\n\n  echo_content yellow \"Tip: The current version of the Trojan Panel Backend (trojan-panel) is ${trojan_panel_current_version} The latest version is ${trojan_panel_latest_version}\"\n\n  if [[ \"${trojan_panel_current_version}\" != \"${trojan_panel_latest_version}\" ]]; then\n    echo_content green \"---> Update Trojan Panel Backend\"\n\n    mariadb_ip=$(get_ini_value ${trojan_panel_config_path} mysql.host)\n    mariadb_port=$(get_ini_value ${trojan_panel_config_path} mysql.port)\n    mariadb_user=$(get_ini_value ${trojan_panel_config_path} mysql.user)\n    mariadb_pas=$(get_ini_value ${trojan_panel_config_path} mysql.password)\n    redis_host=$(get_ini_value ${trojan_panel_config_path} redis.host)\n    redis_port=$(get_ini_value ${trojan_panel_config_path} redis.port)\n    redis_pass=$(get_ini_value ${trojan_panel_config_path} redis.password)\n    trojan_panel_port=$(get_ini_value ${trojan_panel_config_path} server.port)\n\n    update_trojan_panel_database\n\n    docker exec trojan-panel-redis redis-cli -h \"${redis_host}\" -p \"${redis_port}\" -a \"${redis_pass}\" -e \"flushall\" &>/dev/null\n\n    docker rm -f trojan-panel &&\n      docker rmi -f jonssonyan/trojan-panel\n\n    docker pull jonssonyan/trojan-panel &&\n      docker run -d --name trojan-panel --restart always \\\n        --network=host \\\n        -v ${WEB_PATH}:${TROJAN_PANEL_WEBFILE} \\\n        -v ${TROJAN_PANEL_LOGS}:${TROJAN_PANEL_LOGS} \\\n        -v ${TROJAN_PANEL_CONFIG}:${TROJAN_PANEL_CONFIG} \\\n        -v /etc/localtime:/etc/localtime \\\n        -e GIN_MODE=release \\\n        -e \"mariadb_ip=${mariadb_ip}\" \\\n        -e \"mariadb_port=${mariadb_port}\" \\\n        -e \"mariadb_user=${mariadb_user}\" \\\n        -e \"mariadb_pas=${mariadb_pas}\" \\\n        -e \"redis_host=${redis_host}\" \\\n        -e \"redis_port=${redis_port}\" \\\n        -e \"redis_pass=${redis_pass}\" \\\n        -e \"server_port=${trojan_panel_port}\" \\\n        jonssonyan/trojan-panel\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel backend update completed\"\n    else\n      echo_content red \"---> Trojan Panel Backend update fails or runs abnormally, please try to repair or uninstall and reinstall\"\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the latest version of the Trojan Panel Backend\"\n  fi\n}\n\n# Update Trojan Panel Core\nupdate_trojan_panel_core() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-core$\") ]]; then\n    echo_content red \"---> Please install the Trojan Panel Core first\"\n    exit 0\n  fi\n\n  trojan_panel_core_current_version=$(docker exec trojan-panel-core ./trojan-panel-core -version)\n  if [[ -z \"${trojan_panel_core_current_version}\" || ! \"${trojan_panel_core_current_version}\" =~ ^v.* || ! $(version_ge \"${trojan_panel_core_current_version}\" \"v2.1.1\") ]]; then\n    echo_content red \"---> The current version does not support online updates\"\n    exit 0\n  fi\n\n  echo_content yellow \"Tip: The current version of the Trojan Panel Core (trojan-panel-core) is ${trojan_panel_core_current_version} The latest version is ${trojan_panel_core_latest_version}\"\n\n  if [[ \"${trojan_panel_core_current_version}\" != \"${trojan_panel_core_latest_version}\" ]]; then\n    echo_content green \"---> Update Trojan Panel Core\"\n\n    mariadb_ip=$(get_ini_value ${trojan_panel_core_config_path} mysql.host)\n    mariadb_port=$(get_ini_value ${trojan_panel_core_config_path} mysql.port)\n    mariadb_user=$(get_ini_value ${trojan_panel_core_config_path} mysql.user)\n    mariadb_pas=$(get_ini_value ${trojan_panel_core_config_path} mysql.password)\n    redis_host=$(get_ini_value ${trojan_panel_core_config_path} redis.host)\n    redis_port=$(get_ini_value ${trojan_panel_core_config_path} redis.port)\n    redis_pass=$(get_ini_value ${trojan_panel_core_config_path} redis.password)\n    grpc_port=$(get_ini_value ${trojan_panel_core_config_path} grpc.port)\n    trojan_panel_core_port=$(get_ini_value ${trojan_panel_core_config_path} server.port)\n\n    update_trojan_panel_core_database\n\n    docker exec trojan-panel-redis redis-cli -h \"${redis_host}\" -p \"${redis_port}\" -a \"${redis_pass}\" -e \"flushall\" &>/dev/null\n\n    docker rm -f trojan-panel-core &&\n      docker rmi -f jonssonyan/trojan-panel-core\n\n    domain=$(cat \"${DOMAIN_FILE}\")\n\n    docker pull jonssonyan/trojan-panel-core &&\n      docker run -d --name trojan-panel-core --restart always \\\n        --network=host \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/xray/config/:${TROJAN_PANEL_CORE_DATA}bin/xray/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/trojango/config/:${TROJAN_PANEL_CORE_DATA}bin/trojango/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/hysteria/config/:${TROJAN_PANEL_CORE_DATA}bin/hysteria/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/naiveproxy/config/:${TROJAN_PANEL_CORE_DATA}bin/naiveproxy/config/ \\\n        -v ${TROJAN_PANEL_CORE_DATA}bin/hysteria2/config/:${TROJAN_PANEL_CORE_DATA}bin/hysteria2/config/ \\\n        -v ${TROJAN_PANEL_CORE_LOGS}:${TROJAN_PANEL_CORE_LOGS} \\\n        -v ${TROJAN_PANEL_CORE_CONFIG}:${TROJAN_PANEL_CORE_CONFIG} \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        -v ${WEB_PATH}:${WEB_PATH} \\\n        -v /etc/localtime:/etc/localtime \\\n        -e GIN_MODE=release \\\n        -e \"mariadb_ip=${mariadb_ip}\" \\\n        -e \"mariadb_port=${mariadb_port}\" \\\n        -e \"mariadb_user=${mariadb_user}\" \\\n        -e \"mariadb_pas=${mariadb_pas}\" \\\n        -e \"database=${database}\" \\\n        -e \"account-table=${account_table}\" \\\n        -e \"redis_host=${redis_host}\" \\\n        -e \"redis_port=${redis_port}\" \\\n        -e \"redis_pass=${redis_pass}\" \\\n        -e \"crt_path=${CERT_PATH}${domain}.crt\" \\\n        -e \"key_path=${CERT_PATH}${domain}.key\" \\\n        -e \"grpc_port=${grpc_port}\" \\\n        -e \"server_port=${trojan_panel_core_port}\" \\\n        jonssonyan/trojan-panel-core\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-core$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Trojan Panel Core update completed\"\n    else\n      echo_content red \"---> Trojan Panel Core update fails or runs abnormally, please try to repair or uninstall and reinstall\"\n    fi\n  else\n    echo_content skyBlue \"---> You have installed the latest version of the Trojan Panel Core\"\n  fi\n}\n\n# Uninstall Caddy2+https\nuninstall_caddy2() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n    echo_content green \"---> Uninstall Caddy2+https\"\n\n    docker rm -f trojan-panel-caddy &&\n      rm -rf ${CADDY_DATA}\n\n    echo_content skyBlue \"---> Caddy2+https uninstallation completed\"\n  else\n    echo_content red \"---> Please install Caddy2+https first\"\n  fi\n}\n\n# Uninstall Nginx\nuninstall_nginx() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-nginx\") ]]; then\n    echo_content green \"---> Uninstall Nginx\"\n\n    docker rm -f trojan-panel-nginx &&\n      rm -rf ${NGINX_DATA}\n\n    echo_content skyBlue \"---> Nginx uninstallation completed\"\n  else\n    echo_content red \"---> Please install Nginx first\"\n  fi\n}\n\n# Uninstall MariaDB\nuninstall_mariadb() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-mariadb$\") ]]; then\n    echo_content green \"---> Uninstall MariaDB\"\n\n    docker rm -f trojan-panel-mariadb &&\n      rm -rf ${MARIA_DATA}\n\n    echo_content skyBlue \"---> MariaDB uninstall completed\"\n  else\n    echo_content red \"---> Please install MariaDB first\"\n  fi\n}\n\n# Uninstall Redis\nuninstall_redis() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-redis$\") ]]; then\n    echo_content green \"---> Uninstall Redis\"\n\n    docker rm -f trojan-panel-redis &&\n      rm -rf ${REDIS_DATA}\n\n    echo_content skyBlue \"---> Redis uninstall completed\"\n  else\n    echo_content red \"---> Please install Redis first\"\n  fi\n}\n\n# Uninstall Trojan Panel Frontend\nuninstall_trojan_panel_ui() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-ui$\") ]]; then\n    echo_content green \"---> Uninstall Trojan Panel Frontend\"\n\n    docker rm -f trojan-panel-ui &&\n      docker rmi -f jonssonyan/trojan-panel-ui &&\n      rm -rf ${TROJAN_PANEL_UI_DATA}\n\n    echo_content skyBlue \"---> Trojan Panel Frontend uninstallation completed\"\n  else\n    echo_content red \"---> Please install the Trojan Panel Frontend first\"\n  fi\n}\n\n# Uninstall Trojan Panel Backend\nuninstall_trojan_panel() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel$\") ]]; then\n    echo_content green \"---> Uninstall Trojan Panel Backend\"\n\n    docker rm -f trojan-panel &&\n      docker rmi -f jonssonyan/trojan-panel &&\n      rm -rf ${TROJAN_PANEL_DATA}\n\n    echo_content skyBlue \"---> Trojan Panel Backend uninstallation completed\"\n  else\n    echo_content red \"---> Please install the Trojan Panel Backend first\"\n  fi\n}\n\n# Uninstall Trojan Panel Core\nuninstall_trojan_panel_core() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-core$\") ]]; then\n    echo_content green \"---> Uninstall Trojan Panel Core\"\n\n    docker rm -f trojan-panel-core &&\n      docker rmi -f jonssonyan/trojan-panel-core &&\n      rm -rf ${TROJAN_PANEL_CORE_DATA}\n\n    echo_content skyBlue \"---> Trojan Panel Core uninstallation completed\"\n  else\n    echo_content red \"---> Please install the Trojan Panel Core first\"\n  fi\n}\n\n# Uninstall all Trojan Panel related containers\nuninstall_all() {\n  echo_content green \"---> Uninstall all Trojan Panel related containers\"\n\n  docker rm -f $(docker ps -a -q -f \"name=^trojan-panel\")\n  docker rmi -f $(docker images | grep \"^jonssonyan/trojan-panel\" | awk '{print $3}')\n  rm -rf ${TP_DATA}\n\n  echo_content skyBlue \"---> Uninstall all Trojan Panel related containers completed\"\n}\n\n# Modify Trojan Panel Frontend port\nupdate_trojan_panel_ui_port() {\n  if [[ -n $(docker ps -q -f \"name=^trojan-panel-ui$\" -f \"status=running\") ]]; then\n    echo_content green \"---> Modify Trojan Panel Frontend port\"\n\n    trojan_panel_ui_port=$(grep 'listen.*ssl' ${UI_NGINX_CONFIG} | awk '{print $2}')\n    if [[ -z \"${trojan_panel_ui_port}\" ]]; then\n      ui_https=0\n      trojan_panel_ui_port=$(grep -oP 'listen\\s+\\K\\d+' ${UI_NGINX_CONFIG} | awk 'NR==1')\n    fi\n    if [[ -z \"${trojan_panel_ui_port}\" ]]; then\n      echo_content red \"---> Trojan Panel Frontend port not queried\"\n      exit 0\n    fi\n    echo_content yellow \"Tip: The current port of the Trojan Panel Frontend (trojan-panel-ui) is ${trojan_panel_ui_port}\"\n\n    read -r -p \"Please enter the new port of the Trojan Panel Frontend (default: 8888): \" trojan_panel_ui_port\n    [[ -z \"${trojan_panel_ui_port}\" ]] && trojan_panel_ui_port=\"8888\"\n\n    if [[ ${ui_https} == 0 ]]; then\n      # http\n      sed -i \"s/listen.*;/listen       ${trojan_panel_ui_port};/g\" ${UI_NGINX_CONFIG} &&\n        sed -i \"s/http:\\/\\/\\$host:.*\\$request_uri;/http:\\/\\/\\$host:${trojan_panel_ui_port}\\$request_uri;/g\" ${UI_NGINX_CONFIG} &&\n        docker restart trojan-panel-ui\n    else\n      # https\n      sed -i \"s/listen.*ssl;/listen       ${trojan_panel_ui_port} ssl;/g\" ${UI_NGINX_CONFIG} &&\n        sed -i \"s/https:\\/\\/\\$host:.*\\$request_uri;/https:\\/\\/\\$host:${trojan_panel_ui_port}\\$request_uri;/g\" ${UI_NGINX_CONFIG} &&\n        docker restart trojan-panel-ui\n    fi\n\n    if [[ \"$?\" == \"0\" ]]; then\n      echo_content skyBlue \"---> Trojan Panel Frontend port modification completed\"\n    else\n      echo_content red \"---> Trojan Panel Frontend port modification failed\"\n    fi\n  else\n    echo_content red \"---> The Trojan Panel Frontend is not installed or is running abnormally, please repair or uninstall and reinstall and try again\"\n  fi\n}\n\n# Refresh Redis cache\nredis_flush_all() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-redis$\") ]]; then\n    echo_content red \"---> Please install Redis first\"\n    exit 0\n  fi\n\n  if [[ -z $(docker ps -q -f \"name=^trojan-panel-redis$\" -f \"status=running\") ]]; then\n    echo_content red \"---> Redis is running abnormally\"\n    exit 0\n  fi\n\n  echo_content green \"---> Refresh Redis cache\"\n\n  read -r -p \"Please enter the IP address of Redis (default: local host): \" redis_host\n  [[ -z \"${redis_host}\" ]] && redis_host=\"127.0.0.1\"\n  read -r -p \"Please enter the port of Redis (default: 6378): \" redis_port\n  [[ -z \"${redis_port}\" ]] && redis_port=6378\n  while read -r -p \"Please enter the Redis password (required): \" redis_pass; do\n    if [[ -z \"${redis_pass}\" ]]; then\n      echo_content red \"Password can not be empty\"\n    else\n      break\n    fi\n  done\n\n  docker exec trojan-panel-redis redis-cli -h \"${redis_host}\" -p \"${redis_port}\" -a \"${redis_pass}\" -e \"flushall\" &>/dev/null\n\n  echo_content skyBlue \"---> Redis cache refresh completed\"\n}\n\n# Replace certificate\nchange_cert() {\n  domain_1=$(cat \"${DOMAIN_FILE}\")\n\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n    docker rm -f trojan-panel-caddy &&\n      rm -rf ${CADDY_LOG}* &&\n      echo \"\" >${CADDY_CONFIG} &&\n      rm -rf ${WEB_PATH}*\n  fi\n\n  rm -rf ${CERT_PATH}* &&\n    echo \"\" >${DOMAIN_FILE}\n\n  install_reverse_proxy\n  install_cert\n\n  domain_2=$(cat \"${DOMAIN_FILE}\")\n  if [[ -n \"${domain_1}\" && -n \"${domain_2}\" ]]; then\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-nginx$\") ]]; then\n      sed -i \"s/${domain_1}/${domain_2}/g\" ${NGINX_CONFIG} &&\n        docker restart trojan-panel-nginx\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-ui$\") ]]; then\n      sed -i \"s/${domain_1}/${domain_2}/g\" ${UI_NGINX_DATA} &&\n        docker restart trojan-panel-ui\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-core$\") ]]; then\n      find /tpdata/trojan-panel-core/bin/ -type f -exec sed -i \"s/${domain_1}/${domain_2}/g\" {} + &&\n        sed -i \"s/${domain_1}/${domain_2}/g\" ${trojan_panel_core_config_path} &&\n        docker restart trojan-panel-core\n    fi\n  fi\n}\n\n# Forgot sysadmin password\nforget_pass() {\n  while :; do\n    echo_content yellow \"1. Query MariaDB password\"\n    echo_content yellow \"2. Query Redis password\"\n    echo_content yellow \"3. Reset the username and password of the admin panel system administrator\"\n    echo_content yellow \"4. Quit\"\n    read -r -p \"Please choose (default: 4): \" forget_pass_option\n    [[ -z \"${forget_pass_option}\" ]] && forget_pass_option=4\n    case ${forget_pass_option} in\n    1)\n      if [[ -n $(docker ps -a -q -f \"name=^trojan-panel$\") ]]; then\n        mariadb_user=$(get_ini_value ${trojan_panel_config_path} mysql.user)\n        mariadb_pas=$(get_ini_value ${trojan_panel_config_path} mysql.password)\n        echo_content red \"\\n==============================================================\"\n        echo_content yellow \"MariaDB ${mariadb_user} password (please keep it safe): ${mariadb_pas}\"\n        echo_content red \"\\n==============================================================\"\n      else\n        echo_content red \"---> Please execute on the Trojan Panel backend server\"\n      fi\n      ;;\n    2)\n      if [[ -n $(docker ps -a -q -f \"name=^trojan-panel$\") ]]; then\n        redis_pass=$(get_ini_value ${trojan_panel_config_path} redis.password)\n        echo_content red \"\\n==============================================================\"\n        echo_content yellow \"Redis password (please keep it safe): ${redis_pass}\"\n        echo_content red \"\\n==============================================================\"\n      else\n        echo_content red \"---> Please execute on the Trojan Panel backend server\"\n      fi\n      ;;\n    3)\n      if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-mariadb$\") ]]; then\n        read -r -p \"Please enter the IP address of MariaDB (default: local host): \" mariadb_ip\n        [[ -z \"${mariadb_ip}\" ]] && mariadb_ip=\"127.0.0.1\"\n        read -r -p \"Please enter the port of MariaDB (default: 9507): \" mariadb_port\n        [[ -z \"${mariadb_port}\" ]] && mariadb_port=9507\n        read -r -p \"Please enter the username of MariaDB (default: root): \" mariadb_user\n        [[ -z \"${mariadb_user}\" ]] && mariadb_user=\"root\"\n        while read -r -p \"Please enter the password of MariaDB (required): \" mariadb_pas; do\n          if [[ -z \"${mariadb_pas}\" ]]; then\n            echo_content red \"Password can not be empty\"\n          else\n            break\n          fi\n        done\n\n        docker exec trojan-panel-mariadb mysql --default-character-set=utf8 -h\"${mariadb_ip}\" -P\"${mariadb_port}\" -u\"${mariadb_user}\" -p\"${mariadb_pas}\" -Dtrojan_panel_db -e \"update account set username = 'sysadmin',pass = 'tFjD2X1F6i9FfWp2GDU5Vbi1conuaChDKIYbw9zMFrqvMoSz',hash='4366294571b8b267d9cf15b56660f0a70659568a86fc270a52fdc9e5',deleted = 0 where id = 1 limit 1\"\n        if [[ \"$?\" == \"0\" ]]; then\n          echo_content red \"\\n==============================================================\"\n          echo_content yellow \"System administrator Default username: sysadmin Default password: 123456\"\n          echo_content yellow \"Please log in to the management panel to change the password in time\"\n          echo_content red \"\\n==============================================================\"\n        else\n          echo_content red \"Admin panel sysadmin username and password reset failed\"\n        fi\n      else\n        echo_content red \"---> Please execute on the MariaDB server\"\n      fi\n      ;;\n    4)\n      break\n      ;;\n    *)\n      echo_content red \"No such option\"\n      continue\n      ;;\n    esac\n  done\n}\n\n# Fault detection\nfailure_testing() {\n  echo_content green \"---> Start troubleshooting\"\n  if [[ ! $(docker -v 2>/dev/null) ]]; then\n    echo_content red \"---> Docker is running abnormally\"\n  else\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n      if [[ -z $(docker ps -q -f \"name=^trojan-panel-caddy$\" -f \"status=running\") ]]; then\n        echo_content red \"---> Caddy2 is running abnormally and the running log is as follows:\"\n        docker logs trojan-panel-caddy\n      fi\n      domain=$(cat \"${DOMAIN_FILE}\")\n      if [[ -n ${domain} && ! -f \"${CERT_PATH}${domain}.crt\" ]]; then\n        echo_content red \"---> The certificate application is abnormal, please try 1. Change the sub-domain name to re-build 2. Restart the server to re-apply for the certificate 3. Re-build and select the custom certificate option\"\n        if [[ -f ${CADDY_LOG}error.log ]]; then\n          echo_content red \"Caddy2 error log is as follows:\"\n          tail -n 20 ${CADDY_LOG}error.log | grep error\n        fi\n      fi\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-mariadb$\") && -z $(docker ps -q -f \"name=^trojan-panel-mariadb$\" -f \"status=running\") ]]; then\n      echo_content red \"---> The MariaDB is running abnormally and the running log is as follows:\"\n      docker logs trojan-panel-mariadb\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-redis$\") && -z $(docker ps -q -f \"name=^trojan-panel-redis$\" -f \"status=running\") ]]; then\n      echo_content red \"---> The Redis is running abnormally and the running log is as follows:\"\n      docker logs trojan-panel-redis\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel$\") && -z $(docker ps -q -f \"name=^trojan-panel$\" -f \"status=running\") ]]; then\n      echo_content red \"---> The Trojan Panel Backend is running abnormally and the running log is as follows:\"\n      if [[ -f ${TROJAN_PANEL_LOGS}trojan-panel.log ]]; then\n        tail -n 20 ${TROJAN_PANEL_LOGS}trojan-panel.log | grep error\n      else\n        docker logs trojan-panel\n      fi\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-ui$\") && -z $(docker ps -q -f \"name=^trojan-panel-ui$\" -f \"status=running\") ]]; then\n      echo_content red \"---> The Trojan Panel Frontend is running abnormally and the running log is as follows:\"\n      docker logs trojan-panel-ui\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-core$\") && -z $(docker ps -q -f \"name=^trojan-panel-core$\" -f \"status=running\") ]]; then\n      echo_content red \"---> The Trojan Panel Core is running abnormally and the running log is as follows:\"\n      if [[ -f ${TROJAN_PANEL_CORE_LOGS}trojan-panel.log ]]; then\n        tail -n 20 ${TROJAN_PANEL_CORE_LOGS}trojan-panel.log | grep error\n      else\n        docker logs trojan-panel-core\n      fi\n    fi\n  fi\n  echo_content green \"---> Troubleshooting ended\"\n}\n\nlog_query() {\n  while :; do\n    echo_content skyBlue \"Applications that can query logs are as follows:\"\n    echo_content yellow \"1. Trojan Panel Backend\"\n    echo_content yellow \"2. Trojan Panel Frontend\"\n    echo_content yellow \"3. Quit\"\n    read -r -p \"Please select an application (default: 3): \" select_log_query_type\n    [[ -z \"${select_log_query_type}\" ]] && select_log_query_type=3\n\n    case ${select_log_query_type} in\n    1)\n      log_file_path=${TROJAN_PANEL_LOGS}trojan-panel.log\n      ;;\n    2)\n      log_file_path=${TROJAN_PANEL_CORE_LOGS}trojan-panel-core.log\n      ;;\n    3)\n      break\n      ;;\n    *)\n      echo_content red \"No such option\"\n      continue\n      ;;\n    esac\n\n    read -r -p \"Please enter the number of rows to query (default: 20): \" select_log_query_line_type\n    [[ -z \"${select_log_query_line_type}\" ]] && select_log_query_line_type=20\n\n    if [[ -f ${log_file_path} ]]; then\n      echo_content skyBlue \"The log is as follows:\"\n      tail -n ${select_log_query_line_type} ${log_file_path}\n    else\n      echo_content red \"No log file exists\"\n    fi\n  done\n}\n\nversion_query() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-ui$\") && -n $(docker ps -q -f \"name=^trojan-panel-ui$\" -f \"status=running\") ]]; then\n    trojan_panel_ui_current_version=$(docker exec trojan-panel-ui cat ${TROJAN_PANEL_UI_DATA}version)\n    echo_content yellow \"The current version of Trojan Panel Frontend(trojan-panel-ui) is ${trojan_panel_ui_current_version} the latest version is ${trojan_panel_ui_latest_version}\"\n  fi\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel$\") && -n $(docker ps -q -f \"name=^trojan-panel$\" -f \"status=running\") ]]; then\n    trojan_panel_current_version=$(docker exec trojan-panel ./trojan-panel -version)\n    echo_content yellow \"The current version of Trojan Panel Backend(trojan-panel) is ${trojan_panel_current_version} the latest version is ${trojan_panel_latest_version}\"\n  fi\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-core$\") && -n $(docker ps -q -f \"name=^trojan-panel-core$\" -f \"status=running\") ]]; then\n    trojan_panel_core_current_version=$(docker exec trojan-panel-core ./trojan-panel-core -version)\n    echo_content yellow \"The current version of Trojan Panel Core(trojan-panel-core) is ${trojan_panel_core_current_version} the latest version is ${trojan_panel_core_latest_version}\"\n  fi\n}\n\nmain() {\n  cd \"$HOME\" || exit 0\n  init_var\n  mkdir_tools\n  check_sys\n  depend_install\n  clear\n  echo_content red \"\\n==============================================================\"\n  echo_content skyBlue \"System Required: CentOS 7+/Ubuntu 18+/Debian 10+\"\n  echo_content skyBlue \"Version: v2.3.2\"\n  echo_content skyBlue \"Description: One click Install Trojan Panel server\"\n  echo_content skyBlue \"Author: jonssonyan <https://jonssonyan.com>\"\n  echo_content skyBlue \"Github: https://github.com/trojanpanel\"\n  echo_content skyBlue \"Docs: https://trojanpanel.github.io\"\n  echo_content red \"\\n==============================================================\"\n  echo_content yellow \"1. Install Trojan Panel Frontend\"\n  echo_content yellow \"2. Install Trojan Panel Backend\"\n  echo_content yellow \"3. Install Trojan Panel Core\"\n  echo_content yellow \"4. Install Caddy2+https\"\n  echo_content yellow \"5. Install Nginx\"\n  echo_content yellow \"6. Install MariaDB\"\n  echo_content yellow \"7. Install Redis\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"8. Update Trojan Panel Frontend\"\n  echo_content yellow \"9. Update Trojan Panel Backend\"\n  echo_content yellow \"10. Update Trojan Panel Core\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"11. Uninstall Trojan Panel Frontend\"\n  echo_content yellow \"12. Uninstall Trojan Panel Backend\"\n  echo_content yellow \"13. Uninstall Trojan Panel Core\"\n  echo_content yellow \"14. Uninstall Caddy2+https\"\n  echo_content yellow \"15. Uninstall Nginx\"\n  echo_content yellow \"16. Uninstall MariaDB\"\n  echo_content yellow \"17. Uninstall Redis\"\n  echo_content yellow \"18. Uninstall all Trojan Panel related containers\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"19. Modify Trojan Panel Frontend port\"\n  echo_content yellow \"20. Refresh Redis cache\"\n  echo_content yellow \"21. Replace certificate\"\n  echo_content yellow \"22. Forgot sysadmin password\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"23. Fault detection\"\n  echo_content yellow \"24. Log query\"\n  echo_content yellow \"25. Version query\"\n  read -r -p \"Please choose: \" selectInstall_type\n  case ${selectInstall_type} in\n  1)\n    install_docker\n    install_reverse_proxy\n    install_cert\n    install_trojan_panel_ui\n    ;;\n  2)\n    install_docker\n    install_mariadb\n    install_redis\n    install_trojan_panel\n    ;;\n  3)\n    install_docker\n    install_reverse_proxy\n    install_cert\n    install_trojan_panel_core\n    ;;\n  4)\n    install_docker\n    install_caddy2\n    ;;\n  5)\n    install_docker\n    install_nginx\n    ;;\n  6)\n    install_docker\n    install_mariadb\n    ;;\n  7)\n    install_docker\n    install_redis\n    ;;\n  8)\n    update_trojan_panel_ui\n    ;;\n  9)\n    update_trojan_panel\n    ;;\n  10)\n    update_trojan_panel_core\n    ;;\n  11)\n    uninstall_trojan_panel_ui\n    ;;\n  12)\n    uninstall_trojan_panel\n    ;;\n  13)\n    uninstall_trojan_panel_core\n    ;;\n  14)\n    uninstall_caddy2\n    ;;\n  15)\n    uninstall_nginx\n    ;;\n  16)\n    uninstall_mariadb\n    ;;\n  17)\n    uninstall_redis\n    ;;\n  18)\n    uninstall_all\n    ;;\n  19)\n    update_trojan_panel_ui_port\n    ;;\n  20)\n    redis_flush_all\n    ;;\n  21)\n    change_cert\n    ;;\n  22)\n    forget_pass\n    ;;\n  23)\n    failure_testing\n    ;;\n  24)\n    log_query\n    ;;\n  25)\n    version_query\n    ;;\n  *)\n    echo_content red \"No such option\"\n    ;;\n  esac\n}\n\nmain\n"
        },
        {
          "name": "install_script_standalone.sh",
          "type": "blob",
          "size": 33.458984375,
          "content": "#!/usr/bin/env bash\nPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/bin\nexport PATH\n\ninit_var() {\n  ECHO_TYPE=\"echo -e\"\n\n  package_manager=\"\"\n  release=\"\"\n  get_arch=\"\"\n  can_google=0\n\n  # Docker\n  DOCKER_MIRROR='\"https://registry.docker-cn.com\",\"https://hub-mirror.c.163.com\",\"https://docker.mirrors.ustc.edu.cn\"'\n\n  # Project directory\n  TP_DATA=\"/tpdata/\"\n\n  STATIC_HTML=\"https://github.com/trojanpanel/install-script/releases/download/v1.0/html.tar.gz\"\n\n  # Web\n  WEB_PATH=\"/tpdata/web/\"\n\n  # Cert\n  CERT_PATH=\"/tpdata/cert/\"\n  DOMAIN_FILE=\"/tpdata/domain.lock\"\n  domain=\"\"\n\n  # Caddy2\n  CADDY_DATA=\"/tpdata/caddy/\"\n  CADDY_CONFIG=\"${CADDY_DATA}config.json\"\n  CADDY_LOG=\"${CADDY_DATA}logs/\"\n  CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme-v02.api.letsencrypt.org-directory/\"\n  caddy_port=80\n  caddy_remote_port=8863\n  your_email=\"\"\n  ssl_module_type=1\n  ssl_module=\"acme\"\n\n  # TrojanGO\n  TROJANGO_DATA=\"/tpdata/trojanGO/\"\n  TROJANGO_STANDALONE_CONFIG=\"/tpdata/trojanGO/standalone_config.json\"\n  trojanGO_port=443\n  trojanGO_websocket_enable=0\n  trojanGO_websocket_path=\"trojan-panel-websocket-path\"\n  trojanGO_shadowsocks_enable=0\n  trojanGO_shadowsocks_method=\"AES-128-GCM\"\n  trojanGO_shadowsocks_password=\"\"\n  trojanGO_mux_enable=1\n  # trojan\n  trojan_pas=\"\"\n  remote_addr=\"127.0.0.1\"\n\n  # Hysteria\n  HYSTERIA_DATA=\"/tpdata/hysteria/\"\n  HYSTERIA_STANDALONE_CONFIG=\"/tpdata/hysteria/standalone_config.json\"\n  hysteria_port=443\n  hysteria_password=\"\"\n  hysteria_protocol=\"udp\"\n  hysteria_up_mbps=100\n  hysteria_down_mbps=100\n\n  # NaiveProxy\n  NAIVEPROXY_DATA=\"/tpdata/naiveproxy/\"\n  NAIVEPROXY_STANDALONE_CONFIG=\"/tpdata/naiveproxy/standalone_config.json\"\n  naiveproxy_port=443\n  naiveproxy_username=\"\"\n  naiveproxy_pass=\"\"\n}\n\necho_content() {\n  case $1 in\n  \"red\")\n    ${ECHO_TYPE} \"\\033[31m$2\\033[0m\"\n    ;;\n  \"green\")\n    ${ECHO_TYPE} \"\\033[32m$2\\033[0m\"\n    ;;\n  \"yellow\")\n    ${ECHO_TYPE} \"\\033[33m$2\\033[0m\"\n    ;;\n  \"blue\")\n    ${ECHO_TYPE} \"\\033[34m$2\\033[0m\"\n    ;;\n  \"purple\")\n    ${ECHO_TYPE} \"\\033[35m$2\\033[0m\"\n    ;;\n  \"skyBlue\")\n    ${ECHO_TYPE} \"\\033[36m$2\\033[0m\"\n    ;;\n  \"white\")\n    ${ECHO_TYPE} \"\\033[37m$2\\033[0m\"\n    ;;\n  esac\n}\n\nmkdir_tools() {\n  # Project directory\n  mkdir -p ${TP_DATA}\n\n  # Web\n  mkdir -p ${WEB_PATH}\n\n  # Cert\n  mkdir -p ${CERT_PATH}\n  touch ${DOMAIN_FILE}\n\n  # Caddy2\n  mkdir -p ${CADDY_DATA}\n  touch ${CADDY_CONFIG}\n  mkdir -p ${CADDY_LOG}\n\n  # TrojanGO\n  mkdir -p ${TROJANGO_DATA}\n  touch ${TROJANGO_STANDALONE_CONFIG}\n\n  # Hysteria\n  mkdir -p ${HYSTERIA_DATA}\n  touch ${HYSTERIA_STANDALONE_CONFIG}\n\n  # NaiveProxy\n  mkdir -p ${NAIVEPROXY_DATA}\n  touch ${NAIVEPROXY_STANDALONE_CONFIG}\n}\n\ncan_connect() {\n  ping -c2 -i0.3 -W1 \"$1\" &>/dev/null\n  if [[ \"$?\" == \"0\" ]]; then\n    return 0\n  else\n    return 1\n  fi\n}\n\ncheck_sys() {\n  if [[ $(command -v yum) ]]; then\n    package_manager='yum'\n  elif [[ $(command -v dnf) ]]; then\n    package_manager='dnf'\n  elif [[ $(command -v apt) ]]; then\n    package_manager='apt'\n  elif [[ $(command -v apt-get) ]]; then\n    package_manager='apt-get'\n  fi\n\n  if [[ -z \"${package_manager}\" ]]; then\n    echo_content red \"The system is not currently supported\"\n    exit 0\n  fi\n\n  if [[ -n $(find /etc -name \"redhat-release\") ]] || grep </proc/version -q -i \"centos\"; then\n    release=\"centos\"\n  elif grep </etc/issue -q -i \"debian\" && [[ -f \"/etc/issue\" ]] || grep </etc/issue -q -i \"debian\" && [[ -f \"/proc/version\" ]]; then\n    release=\"debian\"\n  elif grep </etc/issue -q -i \"ubuntu\" && [[ -f \"/etc/issue\" ]] || grep </etc/issue -q -i \"ubuntu\" && [[ -f \"/proc/version\" ]]; then\n    release=\"ubuntu\"\n  fi\n\n  if [[ -z \"${release}\" ]]; then\n    echo_content red \"The operating system only supports CentOS 7+/Ubuntu 18+/Debian 10+\"\n    exit 0\n  fi\n\n  if [[ $(arch) =~ (\"x86_64\"|\"amd64\"|\"arm64\"|\"aarch64\"|\"arm\"|\"s390x\") ]]; then\n    get_arch=$(arch)\n  fi\n\n  if [[ -z \"${get_arch}\" ]]; then\n    echo_content red \"The processor architecture only supports amd64/arm64/arm/s390x\"\n    exit 0\n  fi\n\n  can_connect www.google.com\n  [[ \"$?\" == \"0\" ]] && can_google=1\n}\n\ndepend_install() {\n  if [[ \"${package_manager}\" != 'yum' && \"${package_manager}\" != 'dnf' ]]; then\n    ${package_manager} update -y\n  fi\n  ${package_manager} install -y \\\n    curl \\\n    wget \\\n    tar \\\n    lsof \\\n    systemd\n}\n\n# Install Docker\ninstall_docker() {\n  if [[ ! $(docker -v 2>/dev/null) ]]; then\n    echo_content green \"---> Install Docker\"\n\n    # turn off firewall\n    if [[ \"$(firewall-cmd --state 2>/dev/null)\" == \"running\" ]]; then\n      if [[ \"${release}\" == \"centos\" ]]; then\n        systemctl disable firewalld\n      elif [[ \"${release}\" == \"debian\" || \"${release}\" == \"ubuntu\" ]]; then\n        sudo ufw disable\n      fi\n    fi\n\n    # set time zone\n    timedatectl set-timezone Asia/Shanghai\n\n    if [[ ${can_google} == 0 ]]; then\n      sh <(curl -sL https://get.docker.com) --mirror Aliyun\n      mkdir -p /etc/docker &&\n        cat >/etc/docker/daemon.json <<EOF\n{\n  \"registry-mirrors\":[${DOCKER_MIRROR}],\n  \"log-driver\":\"json-file\",\n  \"log-opts\":{\n      \"max-size\":\"50m\",\n      \"max-file\":\"3\"\n  }\n}\nEOF\n    else\n      sh <(curl -sL https://get.docker.com)\n      mkdir -p /etc/docker &&\n        cat >/etc/docker/daemon.json <<EOF\n{\n  \"log-driver\":\"json-file\",\n  \"log-opts\":{\n      \"max-size\":\"50m\",\n      \"max-file\":\"3\"\n  }\n}\nEOF\n    fi\n\n    systemctl enable docker &&\n      systemctl restart docker\n\n    if [[ $(docker -v 2>/dev/null) ]]; then\n      echo_content skyBlue \"---> Docker installation completed\"\n    else\n      echo_content red \"---> Docker installation failed\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Docker\"\n  fi\n}\n\n# Caddy2 https automatic application and renewal certificate configuration file\ncaddy2_https_auto_config() {\n  cat >${CADDY_CONFIG} <<EOF\n{\n    \"admin\":{\n        \"disabled\":true\n    },\n    \"logging\":{\n        \"logs\":{\n            \"default\":{\n                \"writer\":{\n                    \"output\":\"file\",\n                    \"filename\":\"${CADDY_LOG}error.log\"\n                },\n                \"level\":\"ERROR\"\n            }\n        }\n    },\n    \"storage\":{\n        \"module\":\"file_system\",\n        \"root\":\"${CERT_PATH}\"\n    },\n    \"apps\":{\n        \"http\":{\n            \"http_port\": ${caddy_port},\n            \"servers\":{\n                \"srv0\":{\n                    \"listen\":[\n                        \":${caddy_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"match\":[\n                                {\n                                    \"host\":[\n                                        \"${domain}\"\n                                    ]\n                                }\n                            ],\n                            \"handle\":[\n                                {\n                                    \"handler\":\"static_response\",\n                                    \"headers\":{\n                                        \"Location\":[\n                                            \"https://{http.request.host}:${caddy_remote_port}{http.request.uri}\"\n                                        ]\n                                    },\n                                    \"status_code\":301\n                                }\n                            ]\n                        }\n                    ]\n                },\n                \"srv1\":{\n                    \"listen\":[\n                        \":${caddy_remote_port}\"\n                    ],\n                    \"routes\":[\n                        {\n                            \"handle\":[\n                                {\n                                    \"handler\":\"subroute\",\n                                    \"routes\":[\n                                        {\n                                            \"match\":[\n                                                {\n                                                    \"host\":[\n                                                        \"${domain}\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"handle\":[\n                                                {\n                                                    \"handler\":\"file_server\",\n                                                    \"root\":\"${WEB_PATH}\",\n                                                    \"index_names\":[\n                                                        \"index.html\",\n                                                        \"index.htm\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"terminal\":true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"tls_connection_policies\":[\n                        {\n                            \"match\":{\n                                \"sni\":[\n                                    \"${domain}\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"automatic_https\":{\n                        \"disable\":true\n                    }\n                }\n            }\n        },\n        \"tls\":{\n            \"certificates\":{\n                \"automate\":[\n                    \"${domain}\"\n                ]\n            },\n            \"automation\":{\n                \"policies\":[\n                    {\n                        \"issuers\":[\n                            {\n                                \"module\":\"${ssl_module}\",\n                                \"email\":\"${your_email}\"\n                            }\n                        ]\n                    }\n                ]\n            }\n        }\n    }\n}\nEOF\n}\n\n# Install Caddy2+https\ninstall_caddy2() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n    echo_content green \"---> Install Caddy2+https\"\n\n    wget --no-check-certificate -O ${WEB_PATH}html.tar.gz -N ${STATIC_HTML} &&\n      tar -zxvf ${WEB_PATH}html.tar.gz -k -C ${WEB_PATH}\n\n    read -r -p \"Please enter the port of Caddy2 (default: 80): \" caddy_port\n    [[ -z \"${caddy_port}\" ]] && caddy_port=80\n    read -r -p \"Please enter the forwarding port of Caddy2 (default: 8863): \" caddy_remote_port\n    [[ -z \"${caddy_remote_port}\" ]] && caddy_remote_port=8863\n\n    echo_content yellow \"Tip: Please confirm that the domain name has been resolved to this machine, otherwise the installation may fail\"\n    while read -r -p \"Please enter your domain name (required): \" domain; do\n      if [[ -z \"${domain}\" ]]; then\n        echo_content red \"Domain name cannot be empty\"\n      else\n        break\n      fi\n    done\n\n    read -r -p \"Please enter your email (optional): \" your_email\n\n    while read -r -p \"Please choose the way to apply for the certificate (1/acme 2/zerossl default: 1: \" ssl_module_type; do\n      if [[ -z \"${ssl_module_type}\" || ${ssl_module_type} == 1 ]]; then\n        ssl_module=\"acme\"\n        CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme-v02.api.letsencrypt.org-directory/\"\n        break\n      elif [[ ${ssl_module_type} == 2 ]]; then\n        ssl_module=\"zerossl\"\n        CADDY_CERT_DIR=\"${CERT_PATH}certificates/acme.zerossl.com-v2-dv90/\"\n        break\n      else\n        echo_content red \"Cannot enter other characters except 1 and 2\"\n      fi\n    done\n    caddy2_https_auto_config\n\n    # Caddy2 temporary listening port for automatic certificate application\n    if [[ -n $(lsof -i:${caddy_port},${caddy_remote_port} -t) ]]; then\n      kill -9 \"$(lsof -i:${caddy_port},${caddy_remote_port} -t)\"\n    fi\n\n    docker pull caddy:2.6.2 &&\n      docker run -d --name trojan-panel-caddy --restart always \\\n        --network=host \\\n        -v \"${CADDY_CONFIG}\":\"${CADDY_CONFIG}\" \\\n        -v ${CERT_PATH}:\"${CADDY_CERT_DIR}${domain}/\" \\\n        -v ${WEB_PATH}:${WEB_PATH} \\\n        -v ${CADDY_LOG}:${CADDY_LOG} \\\n        caddy:2.6.2 caddy run --config ${CADDY_CONFIG}\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-caddy$\" -f \"status=running\") ]]; then\n      cat >${DOMAIN_FILE} <<EOF\n${domain}\nEOF\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"---> Caddy2+https installation completed\"\n      echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> Caddy2+https installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Caddy2+https\"\n  fi\n}\n\n# Install TrojanGO+Caddy2+Web+TLS+Websocket\ninstall_trojanGO_standalone() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-trojanGO-standalone$\") ]]; then\n    echo_content green \"---> Install TrojanGO+Caddy2+Web+TLS+Websocket\"\n\n    read -r -p \"Please enter the port of TrojanGO (default: 443): \" trojanGO_port\n    [[ -z \"${trojanGO_port}\" ]] && trojanGO_port=443\n    while read -r -p \"Please enter TrojanGO password (required): \" trojan_pas; do\n      if [[ -z \"${trojan_pas}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    while read -r -p \"Is multiplexing enabled? (0/disabled 1/enabled default: 1): \" trojanGO_mux_enable; do\n      if [[ -z \"${trojanGO_mux_enable}\" || ${trojanGO_mux_enable} == 1 ]]; then\n        trojanGO_mux_enable=1\n        break\n      elif [[ ${trojanGO_mux_enable} == 0 ]]; then\n        trojanGO_mux_enable=0\n        break\n      else\n        echo_content red \"Cannot enter other characters except 0 and 1\"\n      fi\n    done\n\n    while read -r -p \"Is Websocket enabled? (0/disabled 1/enabled default: 0): \" trojanGO_websocket_enable; do\n      if [[ -z \"${trojanGO_websocket_enable}\" || ${trojanGO_websocket_enable} == 0 ]]; then\n        trojanGO_websocket_enable=0\n        break\n      elif [[ ${trojanGO_websocket_enable} == 1 ]]; then\n        trojanGO_websocket_enable=1\n        read -r -p \"Please enter the Websocket path (default: trojan-panel-websocket-path): \" trojanGO_websocket_path\n        [[ -z \"${trojanGO_websocket_path}\" ]] && trojanGO_websocket_path=\"trojan-panel-websocket-path\"\n        break\n      else\n        echo_content red \"Cannot enter other characters except 0 and 1\"\n      fi\n    done\n\n    while read -r -p \"Do you want to enable Shadowsocks AEAD encryption? (0/disabled 1/enabled default: 0): \" trojanGO_shadowsocks_enable; do\n      if [[ -z \"${trojanGO_shadowsocks_enable}\" || ${trojanGO_shadowsocks_enable} == 0 ]]; then\n        trojanGO_shadowsocks_enable=0\n        break\n      elif [[ ${trojanGO_shadowsocks_enable} == 1 ]]; then\n        echo_content skyBlue \"Shadowsocks AEAD encryption method is as follows:\"\n        echo_content yellow \"1. AES-128-GCM(default)\"\n        echo_content yellow \"2. CHACHA20-IETF-POLY1305\"\n        echo_content yellow \"3. AES-256-GCM\"\n        read -r -p \"Please enter the Shadowsocks AEAD encryption method (default: 1): \" select_method_type\n        [[ -z \"${select_method_type}\" ]] && select_method_type=1\n        case ${select_method_type} in\n        1)\n          trojanGO_shadowsocks_method=\"AES-128-GCM\"\n          ;;\n        2)\n          trojanGO_shadowsocks_method=\"CHACHA20-IETF-POLY1305\"\n          ;;\n        3)\n          trojanGO_shadowsocks_method=\"AES-256-GCM\"\n          ;;\n        *)\n          trojanGO_shadowsocks_method=\"AES-128-GCM\"\n          ;;\n        esac\n\n        while read -r -p \"Please enter the Shadowsocks AEAD encryption password (required): \" trojanGO_shadowsocks_password; do\n          if [[ -z \"${trojanGO_shadowsocks_password}\" ]]; then\n            echo_content red \"Password can not be empty\"\n          else\n            break\n          fi\n        done\n        break\n      else\n        echo_content yellow \"Cannot enter other characters except 0 and 1\"\n      fi\n    done\n\n    cat >${TROJANGO_STANDALONE_CONFIG} <<EOF\n{\n  \"run_type\": \"server\",\n  \"local_addr\": \"0.0.0.0\",\n  \"local_port\": ${trojanGO_port},\n  \"remote_addr\": \"${remote_addr}\",\n  \"remote_port\": 80,\n  \"log_level\": 1,\n  \"log_file\": \"\",\n  \"password\": [\n      \"${trojan_pas}\"\n  ],\n  \"disable_http_check\": false,\n  \"udp_timeout\": 60,\n  \"ssl\": {\n    \"verify\": true,\n    \"verify_hostname\": true,\n    \"cert\": \"${CERT_PATH}${domain}.crt\",\n    \"key\": \"${CERT_PATH}${domain}.key\",\n    \"key_password\": \"\",\n    \"cipher\": \"\",\n    \"curves\": \"\",\n    \"prefer_server_cipher\": false,\n    \"sni\": \"\",\n    \"alpn\": [\n      \"http/1.1\"\n    ],\n    \"session_ticket\": true,\n    \"reuse_session\": true,\n    \"plain_http_response\": \"\",\n    \"fallback_addr\": \"\",\n    \"fallback_port\": 80,\n    \"fingerprint\": \"\"\n  },\n  \"tcp\": {\n    \"no_delay\": true,\n    \"keep_alive\": true,\n    \"prefer_ipv4\": false\n  },\n    \"mux\": {\n    \"enabled\": ${trojanGO_mux_enable},\n    \"concurrency\": 8,\n    \"idle_timeout\": 60\n  },\n  \"websocket\": {\n    \"enabled\": ${trojanGO_websocket_enable},\n    \"path\": \"/${trojanGO_websocket_path}\",\n    \"host\": \"${domain}\"\n  },\n  \"shadowsocks\": {\n    \"enabled\": ${trojanGO_shadowsocks_enable},\n    \"method\": \"${trojanGO_shadowsocks_method}\",\n    \"password\": \"${trojanGO_shadowsocks_password}\"\n  },\n  \"mysql\": {\n    \"enabled\": false,\n    \"server_addr\": \"localhost\",\n    \"server_port\": 3306,\n    \"database\": \"\",\n    \"username\": \"\",\n    \"password\": \"\",\n    \"check_rate\": 60\n  }\n}\nEOF\n\n    docker pull p4gefau1t/trojan-go &&\n      docker run -d --name trojan-panel-trojanGO-standalone --restart=always \\\n        --network=host \\\n        -v ${TROJANGO_STANDALONE_CONFIG}:\"/etc/trojan-go/config.json\" \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        p4gefau1t/trojan-go\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-trojanGO-standalone$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> TrojanGO+Caddy+Web+TLS+Websocket installation completed\"\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"TrojanGO+Caddy+Web+TLS+Websocket installed successfully\"\n      echo_content yellow \"domain: ${domain}\"\n      echo_content yellow \"Port of TrojanGO: ${trojanGO_port}\"\n      echo_content yellow \"Password for TrojanGO: ${trojan_pas}\"\n      echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n      if [[ ${trojanGO_websocket_enable} == 1 ]]; then\n        echo_content yellow \"Websocket Path: ${trojanGO_websocket_path}\"\n      fi\n      if [[ ${trojanGO_shadowsocks_enable} == 1 ]]; then\n        echo_content yellow \"Shadowsocks AEAD encryption method: ${trojanGO_shadowsocks_method}\"\n        echo_content yellow \"Shadowsocks AEAD encryption password: ${trojanGO_shadowsocks_password}\"\n      fi\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> TrojanGO+Caddy+Web+TLS+Websocket fails to install or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed TrojanGO+Caddy+Web+TLS+Websocket\"\n  fi\n}\n\n# Install Hysteria\ninstall_hysteria_standalone() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-hysteria-standalone$\") ]]; then\n    echo_content green \"---> Install Hysteria\"\n\n    echo_content skyBlue \"Hysteria's schema is as follows:\"\n    echo_content yellow \"1. udp(default)\"\n    echo_content yellow \"2. faketcp\"\n    read -r -p \"Please enter the mode of Hysteria (default: 1): \" selectProtocolType\n    [[ -z \"${selectProtocolType}\" ]] && selectProtocolType=1\n    case ${selectProtocolType} in\n    1)\n      hysteria_protocol=\"udp\"\n      ;;\n    2)\n      hysteria_protocol=\"faketcp\"\n      ;;\n    *)\n      hysteria_protocol=\"udp\"\n      ;;\n    esac\n    read -r -p \"Please enter the port of Hysteria (default: 443): \" hysteria_port\n    [[ -z ${hysteria_port} ]] && hysteria_port=443\n    read -r -p \"Please enter the maximum upload speed of a single client/Mbps (default: 100): \" hysteria_up_mbps\n    [[ -z \"${hysteria_up_mbps}\" ]] && hysteria_up_mbps=100\n    read -r -p \"Please enter the maximum download speed of a single client/Mbps (default: 100): \" hysteria_down_mbps\n    [[ -z \"${hysteria_down_mbps}\" ]] && hysteria_down_mbps=100\n    while read -r -p \"Please enter the password of Hysteria (required): \" hysteria_password; do\n      if [[ -z ${hysteria_password} ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n\n    cat >${HYSTERIA_STANDALONE_CONFIG} <<EOF\n{\n  \"listen\": \":${hysteria_port}\",\n  \"protocol\": \"${hysteria_protocol}\",\n  \"cert\": \"${CERT_PATH}${domain}.crt\",\n  \"key\": \"${CERT_PATH}${domain}.key\",\n  \"up_mbps\": ${hysteria_up_mbps},\n  \"down_mbps\": ${hysteria_down_mbps},\n  \"auth_str\": \"${hysteria_password}\"\n}\nEOF\n\n    docker pull tobyxdd/hysteria &&\n      docker run -d --name trojan-panel-hysteria-standalone --restart=always \\\n        --network=host \\\n        -v ${HYSTERIA_STANDALONE_CONFIG}:/etc/hysteria.json \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        tobyxdd/hysteria -c /etc/hysteria.json server\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-hysteria-standalone$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> Hysteria installation completed\"\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"Hysteria installed successfully\"\n      echo_content yellow \"domain: ${domain}\"\n      echo_content yellow \"Port of Hysteria: ${hysteria_port}\"\n      echo_content yellow \"Password for Hysteria: ${hysteria_password}\"\n      echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> Hysteria installation fails or runs abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed Hysteria\"\n  fi\n}\n\n# Install NaiveProxy (Caddy+ForwardProxy)\ninstall_navieproxy_standalone() {\n  if [[ -z $(docker ps -a -q -f \"name=^trojan-panel-navieproxy-standalone$\") ]]; then\n    echo_content green \"---> Install NaiveProxy (Caddy+ForwardProxy)\"\n\n    read -r -p \"Please enter the port of NaiveProxy (default: 443): \" naiveproxy_port\n    [[ -z \"${naiveproxy_port}\" ]] && naiveproxy_port=443\n    while read -r -p \"Please enter the username of NaiveProxy (required): \" naiveproxy_username; do\n      if [[ -z \"${naiveproxy_username}\" ]]; then\n        echo_content red \"Username can not be empty\"\n      else\n        break\n      fi\n    done\n    while read -r -p \"Please enter the password of NaiveProxy (required): \" naiveproxy_pass; do\n      if [[ -z \"${naiveproxy_pass}\" ]]; then\n        echo_content red \"Password can not be empty\"\n      else\n        break\n      fi\n    done\n    domain=$(cat \"${DOMAIN_FILE}\")\n    cat >${NAIVEPROXY_STANDALONE_CONFIG} <<EOF\n{\n    \"admin\": {\n        \"disabled\": true\n    },\n    \"logging\": {\n        \"sink\": {\n            \"writer\": {\n                \"output\": \"discard\"\n            }\n        },\n        \"logs\": {\n            \"default\": {\n                \"writer\": {\n                    \"output\": \"discard\"\n                }\n            }\n        }\n    },\n    \"apps\": {\n        \"http\": {\n            \"servers\": {\n                \"srv0\": {\n                    \"listen\": [\n                        \":${naiveproxy_port}\"\n                    ],\n                    \"routes\": [\n                        {\n                            \"handle\": [\n                                {\n                                    \"handler\": \"subroute\",\n                                    \"routes\": [\n                                        {\n                                            \"handle\": [\n                                                {\n                                                    \"auth_pass_deprecated\": \"${naiveproxy_pass}\",\n                                                    \"auth_user_deprecated\": \"${naiveproxy_username}\",\n                                                    \"handler\": \"forward_proxy\",\n                                                    \"hide_ip\": true,\n                                                    \"hide_via\": true,\n                                                    \"probe_resistance\": {}\n                                                }\n                                            ]\n                                        },\n                                        {\n                                            \"match\": [\n                                                {\n                                                    \"host\": [\n                                                        \"${domain}\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"handle\": [\n                                                {\n                                                    \"handler\": \"file_server\",\n                                                    \"root\": \"/caddy-forwardproxy/dist/\",\n                                                    \"index_names\": [\n                                                        \"index.html\",\n                                                        \"index.htm\"\n                                                    ]\n                                                }\n                                            ],\n                                            \"terminal\": true\n                                        }\n                                    ]\n                                }\n                            ]\n                        }\n                    ],\n                    \"tls_connection_policies\": [\n                        {\n                            \"match\": {\n                                \"sni\": [\n                                    \"${domain}\"\n                                ]\n                            }\n                        }\n                    ],\n                    \"automatic_https\": {\n                        \"disable\": true\n                    }\n                }\n            }\n        },\n        \"tls\": {\n            \"certificates\": {\n                \"load_files\": [\n                    {\n                        \"certificate\": \"${CERT_PATH}${domain}.crt\",\n                        \"key\": \"${CERT_PATH}${domain}.crt\"\n                    }\n                ]\n            }\n        }\n    }\n}\nEOF\n    docker pull jonssonyan/caddy-forwardproxy &&\n      docker run -d --name trojan-panel-navieproxy-standalone --restart=always \\\n        --network=host \\\n        -v ${NAIVEPROXY_STANDALONE_CONFIG}:\"/caddy-forwardproxy/config/config.json\" \\\n        -v ${CERT_PATH}:${CERT_PATH} \\\n        jonssonyan/caddy-forwardproxy\n\n    if [[ -n $(docker ps -q -f \"name=^trojan-panel-navieproxy-standalone$\" -f \"status=running\") ]]; then\n      echo_content skyBlue \"---> NaiveProxy(Caddy+ForwardProxy) installation completed\"\n      echo_content red \"\\n==============================================================\"\n      echo_content skyBlue \"NaiveProxy(Caddy+ForwardProxy) installed successfully\"\n      echo_content yellow \"domain: ${domain}\"\n      echo_content yellow \"Port of NaiveProxy: ${naiveproxy_port}\"\n      echo_content yellow \"Username for NaiveProxy: ${naiveproxy_username}\"\n      echo_content yellow \"Password for NaiveProxy: ${naiveproxy_pass}\"\n      echo_content yellow \"Certificate Directory: ${CERT_PATH}\"\n      echo_content red \"\\n==============================================================\"\n    else\n      echo_content red \"---> NaiveProxy(Caddy+ForwardProxy) failed to install or run abnormally, please try to repair or uninstall and reinstall\"\n      exit 0\n    fi\n  else\n    echo_content skyBlue \"---> You have installed NaiveProxy(Caddy+ForwardProxy)\"\n  fi\n}\n\n# Uninstall Caddy2\nuninstall_caddy2() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n    echo_content green \"---> Uninstall Caddy2\"\n\n    docker rm -f trojan-panel-caddy &&\n      rm -rf ${CADDY_DATA}\n\n    echo_content skyBlue \"---> Caddy2 uninstallation completed\"\n  else\n    echo_content red \"---> Please install Caddy2 first\"\n  fi\n}\n\n# Uninstall TrojanGO+Caddy+Web+TLS+Websocket\nuninstall_trojanGO_standalone() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-trojanGO-standalone$\") ]]; then\n    echo_content green \"---> Uninstall TrojanGO+Caddy+Web+TLS+Websocket\"\n\n    docker rm -f trojan-panel-trojanGO-standalone &&\n      docker rmi -f p4gefau1t/trojan-go &&\n      rm -f ${TROJANGO_STANDALONE_CONFIG}\n\n    echo_content skyBlue \"---> TrojanGO+Caddy+Web+TLS+Websocket uninstallation completed\"\n  else\n    echo_content red \"---> Please install TrojanGO+Caddy+Web+TLS+Websocket first\"\n  fi\n}\n\n# Uninstall Hysteria\nuninstall_hysteria_standalone() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-hysteria-standalone$\") ]]; then\n    echo_content green \"---> Uninstall Hysteria\"\n\n    docker rm -f trojan-panel-hysteria-standalone &&\n      docker rmi -f tobyxdd/hysteria &&\n      rm -f ${HYSTERIA_STANDALONE_CONFIG}\n\n    echo_content skyBlue \"---> Hysteria uninstallation completed\"\n  else\n    echo_content red \"---> Please install Hysteria\"\n  fi\n}\n\n# Uninstall NaiveProxy (Caddy+ForwardProxy)\nuninstall_navieproxy_standalone() {\n  if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-navieproxy-standalone$\") ]]; then\n    echo_content green \"---> Uninstall NaiveProxy (Caddy+ForwardProxy)\"\n\n    docker rm -f trojan-panel-navieproxy-standalone &&\n      docker rmi -f jonssonyan/caddy-forwardproxy &&\n      rm -f ${NAIVEPROXY_STANDALONE_CONFIG}\n\n    echo_content skyBlue \"---> NaiveProxy(Caddy+ForwardProxy) uninstallation completed\"\n  else\n    echo_content red \"---> Please install NaiveProxy(Caddy+ForwardProxy)\"\n  fi\n}\n\n# Uninstall all Trojan Panel related containers\nuninstall_all() {\n  echo_content green \"---> Uninstall all Trojan Panel related containers\"\n\n  docker rm -f $(docker ps -a -q -f \"name=^trojan-panel\")\n  docker rmi -f $(docker images | grep \"^jonssonyan/trojan-panel\" | awk '{print $3}')\n  rm -rf ${TP_DATA}\n\n  echo_content skyBlue \"---> Uninstall all Trojan Panel related containers completed\"\n}\n\n# Fault detection\nfailure_testing() {\n  echo_content green \"---> Start troubleshooting\"\n  if [[ ! $(docker -v 2>/dev/null) ]]; then\n    echo_content red \"---> Docker is running abnormally\"\n  else\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-caddy$\") ]]; then\n      if [[ -z $(docker ps -q -f \"name=^trojan-panel-caddy$\" -f \"status=running\") ]]; then\n        echo_content red \"---> Caddy2 is running abnormally and the running log is as follows:\"\n        docker logs trojan-panel-caddy\n      fi\n      domain=$(cat \"${DOMAIN_FILE}\")\n      if [[ -n ${domain} && ! -f \"${CERT_PATH}${domain}.crt\" ]]; then\n        echo_content red \"---> The certificate application is abnormal, please try 1. Change the sub-domain name to re-build 2. Restart the server to re-apply for the certificate 3. Re-build and select the custom certificate option\"\n        if [[ -f ${CADDY_LOG}error.log ]]; then\n          echo_content red \"Caddy2 error log is as follows:\"\n          tail -n 20 ${CADDY_LOG}error.log | grep error\n        fi\n      fi\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-trojanGO-standalone$\") && -z $(docker ps -q -f \"name=^trojan-panel-trojanGO-standalone$\" -f \"status=running\") ]]; then\n      echo_content red \"---> TrojanGO is running abnormally\"\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-hysteria-standalone$\") && -z $(docker ps -q -f \"name=^trojan-panel-hysteria-standalone$\" -f \"status=running\") ]]; then\n      echo_content red \"---> Hysteria is running abnormally\"\n    fi\n    if [[ -n $(docker ps -a -q -f \"name=^trojan-panel-navieproxy-standalone$\") && -z $(docker ps -q -f \"name=^trojan-panel-navieproxy-standalone$\" -f \"status=running\") ]]; then\n      echo_content red \"---> NaiveProxy(Caddy+ForwardProxy) is running abnormally\"\n    fi\n  fi\n  echo_content green \"---> Troubleshooting ended\"\n}\n\nmain() {\n  cd \"$HOME\" || exit 0\n  init_var\n  mkdir_tools\n  check_sys\n  depend_install\n  clear\n  echo_content red \"\\n==============================================================\"\n  echo_content skyBlue \"System Required: CentOS 7+/Ubuntu 18+/Debian 10+\"\n  echo_content skyBlue \"Description: One click Install Trojan Panel standalone server\"\n  echo_content skyBlue \"Author: jonssonyan <https://jonssonyan.com>\"\n  echo_content skyBlue \"Github: https://github.com/trojanpanel\"\n  echo_content skyBlue \"Docs: https://trojanpanel.github.io\"\n  echo_content red \"\\n==============================================================\"\n  echo_content yellow \"2. Install TrojanGO+Caddy2+Web+TLS+Websocket\"\n  echo_content yellow \"3. Install Hysteria\"\n  echo_content yellow \"4. Install NaiveProxy(Caddy2+ForwardProxy)\"\n  echo_content yellow \"5. Install Caddy2+https\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"7. Uninstall TrojanGO+Caddy2+Web+TLS+Websocket\"\n  echo_content yellow \"8. Uninstall Hysteria\"\n  echo_content yellow \"9. Uninstall NaiveProxy(Caddy2+ForwardProxy)\"\n  echo_content yellow \"10. Uninstall Caddy2+https\"\n  echo_content yellow \"11. Uninstall all Trojan Panel related containers\"\n  echo_content green \"\\n==============================================================\"\n  echo_content yellow \"12. Fault detection\"\n  read -r -p \"Please choose: \" selectInstall_type\n  case ${selectInstall_type} in\n  1)\n    install_docker\n    install_caddy2\n    install_trojanGO_standalone\n    ;;\n  2)\n    install_docker\n    install_caddy2\n    install_hysteria_standalone\n    ;;\n  3)\n    install_docker\n    install_caddy2\n    install_navieproxy_standalone\n    ;;\n  4)\n    install_docker\n    install_caddy2\n    ;;\n  5)\n    uninstall_trojanGO_standalone\n    ;;\n  6)\n    uninstall_hysteria_standalone\n    ;;\n  7)\n    uninstall_navieproxy_standalone\n    ;;\n  8)\n    uninstall_caddy2\n    ;;\n  9)\n    uninstall_all\n    ;;\n  10)\n    failure_testing\n    ;;\n  *)\n    echo_content red \"No such option\"\n    ;;\n  esac\n}\n\nmain\n"
        }
      ]
    }
  ]
}