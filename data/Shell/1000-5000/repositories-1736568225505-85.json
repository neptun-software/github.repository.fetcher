{
  "metadata": {
    "timestamp": 1736568225505,
    "page": 85,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "cknadler/vim-anywhere",
      "stars": 3680,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.044921875,
          "content": "# generated by vim-anywhere on OSX only\n.path\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.048828125,
          "content": "Thanks for your interest in contributing to vim-anywhere! So much has been added\nto vim-anywhere over the years by contributors like you. If you're interested\nin making a pull request, please review these guidelines.\n\n## Pull Request Requirements\n\nI try to get pull requests checked in quickly, but many stall out before getting merged for one\nof the reasons below.\n\n1. Every feature in vim-anywhere should be cross platform (OSX & Linux at least). I usually won't merge changes unless they're cross platform.\n2. Everything should work out of the box by running the install script.\n3. Existing features most likely won't be changed significantly. Adding new\n   features should be done with the option to opt-in or as alternative keybindings.\n4. Any changes that change or add functionality need to be documented in the\n   README.\n\n## New Features\n\nBefore working on a new feature, submit an issue with the proposed design of the\nfeature so we can discuss. If you open a new feature pull request without\nhashing out the design with me first, I can't guarantee I'll merge it.\n"
        },
        {
          "name": "FAQ.md",
          "type": "blob",
          "size": 0.3779296875,
          "content": "## Text doesn't automatically paste after I close vim\n\nThis is by design currently. The readme has a blurb about this at the top.\n\n```\nOnce invoked, vim-anywhere will open a buffer. Close it and its\ncontents are copied to your clipboard and your previous application is\nrefocused.\n```\n\nWhile this feature may be added in the future, for compatibility sake,\nit'll be optional or opt in.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0546875,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Chris Knadler\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.158203125,
          "content": "# vim-anywhere\n\nSometimes, you edit text outside of Vim. These are sad times. Enter\nvim-anywhere!\n\n![demo](assets/demo.gif)\n\nOnce [invoked](#keybinding), vim-anywhere will open a buffer. Close it and its\ncontents are copied to your __clipboard__ and your previous application is\nrefocused.\n\n## Installation\n\n#### Requirements\n\n__OSX:__\n\n- MacVim (`brew install --cask macvim`)\n\n__Linux:__\n\n- Gnome (or a derivative)\n- gVim\n\n#### Install\n\n```bash\ncurl -fsSL https://raw.github.com/cknadler/vim-anywhere/master/install | bash\n```\n\n#### Update\n\n```bash\n~/.vim-anywhere/update\n```\n\n#### Uninstall\n\n```bash\n~/.vim-anywhere/uninstall\n```\n\n## Keybinding\n\n__OSX:__ ( default = `ctrl+cmd+v` )\n\nYou can adjust the shortcut via [system preferences](assets/shortcut.png).\n\n```\nSystem Preferences > Keyboard > Shortcuts > Services > Vim Anywhere\n```\n\n__Linux:__ ( default = `ctrl+alt+v` )\n\n*Gnome*\n```bash\n$ gconftool -t str --set /desktop/gnome/keybindings/vim-anywhere/binding <custom binding>\n```\n\n*I3WM*\n\n```bash\n$ echo 'bindsym $mod+Alt+v exec ~/.vim-anywhere/bin/run' >> ~/.i3/config # remember to reload your config after\n```\nAdjust in case `$mod` is not set to ctrl.\n\n## History\n\nvim-anywhere creates a temporary file in `/tmp/vim-anywhere` when invoked. These\nfiles stick around until you restart your system, giving you a temporary\nhistory.\n\nView your history:\n\n```bash\n$ ls /tmp/vim-anywhere\n```\n\nReopen your most recent file:\n\n```bash\n$ vim $( ls /tmp/vim-anywhere | sort -r | head -n 1 )\n```\n\n## Why?\n\nI use Vim for _almost_ everything. I wish I didn't have to say _almost_. My\nusual workflow is to open Vim, write, copy the text out of my current buffer\nand paste it into whatever application I was just using. vim-anywhere attempts\nto automate this process as much as possible, reducing the friction of using\nVim to do more than just edit code.\n\n## Bugs\n\nFirst, make sure to [read the FAQ](FAQ.md). If you don't find the answer you're\nlooking for there, feel free to open an issue.\n\n## [Contributing](CONTRIBUTING.md)\n\nPull requests, suggestions and issues of any kind are welcome. **Make sure\nto check out the [contribution guidelines](CONTRIBUTING.md) before you submit a\npull request.**\n\n## License\n\nMIT.\n"
        },
        {
          "name": "VimAnywhere.workflow",
          "type": "tree",
          "content": null
        },
        {
          "name": "assets",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "install",
          "type": "blob",
          "size": 3.7802734375,
          "content": "#!/bin/bash\n#\n# vim-anywhere - use Vim whenever, wherever\n# Author: Chris Knadler\n# Homepage: https://www.github.com/cknadler/vim-anywhere\n#\n# Installs vim-anywhere. Intended for use via curl:\n#\n#   $ curl -fsSL https://raw.github.com/cknadler/vim-anywhere/master/install | bash\n\nset -e\n\n###\n# opts\n###\n\nwhile getopts \":v\" opt; do\n  case \"$opt\" in\n    v) set -x ;;\n    \\?) echo \"Invalid option: -$OPTARG\" >&2 ;;\n  esac\ndone\n\n###\n# defs\n###\n\nerr() { echo -e \"$@\" 1>&2; }\n\ncheck_installed() { hash $1 &> /dev/null; }\n\nrequire_installed() {\n  if ! check_installed $1; then\n    err \"vim-anywhere requires $1 to function\"\n    if [[ \"$2\" != \"\" ]]; then echo $2; fi\n    exit 1\n  fi\n}\n\nrequire_one_installed() {\n  for file in $*; do\n    check_installed $file && return\n  done\n  err \"vim-anywhere requires one of the following to be installed:\\n$*\"\n  exit 1\n}\n\nAW_PATH=$HOME/.vim-anywhere\nAW_URL='https://github.com/cknadler/vim-anywhere'\n\n###\n# pre-installation checks\n###\n\n# Check if vim-anywhere is already installed. If so, remove the previous\n# installation.\nif [ -a $AW_PATH ]; then\n  echo 'Cleaning up previous installation...'\n  rm -rf $AW_PATH\n  # TODO: It would be nice to have an option for user input here\n  # Reinstall vim-anywhere (y/n)? ... or something like that\nfi\n\nrequire_installed git\n\n# if we are in a git repo, unset env vars\nif git rev-parse --git-dir &> /dev/null; then\n  unset $(git rev-parse --local-env-vars) &> /dev/null\nfi\n\n# Linux specific checks\nif [[ $OSTYPE == \"linux-gnu\" ]]; then\n  require_one_installed gconftool gsettings\n  require_installed gvim\n  require_installed xclip\n\n# OSX specific checks\nelif [[ $OSTYPE == \"darwin\"* ]]; then\n  require_installed mvim 'Run `brew install macvim`.'\n\n# Unsupported OS\nelse\n  echo \"OS '$OSTYPE' is not supported!\"\n  exit 1\nfi\n\n###\n# installation\n###\n\necho \"Installing vim-anywhere...\"\n\ngit clone $AW_URL $AW_PATH\n\n# Linux install\nif [[ $OSTYPE == \"linux-gnu\" ]]; then\n  name=\"vim-anywhere\"\n  binding=\"<CTRL><ALT>v\"\n  action=$AW_PATH/bin/run\n\n  # We always try gconftool first. It is deprecated so it won't be on newer\n  # installs. If it's installed, we know we are on older versions of Gnome.\n  if check_installed gconftool; then\n    kbd_path=/desktop/gnome/keybindings/vim-anywhere\n    gconftool -t str --set $kbd_path/name $name\n    gconftool -t str --set $kbd_path/binding $binding\n    gconftool -t str --set $kbd_path/action $action\n\n  # At this point, we know we are using dconf, the currently supported settings\n  # manager. gsettings is the gnome client for dconf.\n  else\n    media_keys=org.gnome.settings-daemon.plugins.media-keys\n    custom_kbd=org.gnome.settings-daemon.plugins.media-keys.custom-keybinding\n    kbd_path=/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/vim-anywhere/\n    new_bindings=`gsettings get $media_keys custom-keybindings | sed -e\"s>'\\]>','$kbd_path']>\"| sed -e\"s>@as \\[\\]>['$kbd_path']>\"`\n    gsettings set $media_keys custom-keybindings \"$new_bindings\"\n    gsettings set $custom_kbd:$kbd_path name $name\n    gsettings set $custom_kbd:$kbd_path binding $binding\n    gsettings set $custom_kbd:$kbd_path command $action\n  fi\n\n# OSX install\nelif [[ $OSTYPE == \"darwin\"* ]]; then\n  # store the absolute path to the mvim executable\n  which mvim > $AW_PATH/.path\n\n  # install the workflow as a service\n  mkdir -p $HOME/Library/Services\n  cp -R $AW_PATH/VimAnywhere.workflow $HOME/Library/Services\n\n  # Set default keybindings\n  defaults write pbs NSServicesStatus '{\n    \"(null) - VimAnywhere - runWorkflowAsService\" = {\n      \"key_equivalent\" = \"@^v\";\n    };\n    \"org.vim.MacVim - MacVim/New MacVim Buffer With Selection - openSelection\" = {\n      \"key_equivalent\" = \"@^v\";\n    };\n  }'\n\n  # Activating Finder causes the new keybindings to become active\n  osascript -e \"activate application \\\"Finder\\\"\"\nfi\n\necho \"vim-anywhere has been successfully installed!\"\n"
        },
        {
          "name": "script",
          "type": "tree",
          "content": null
        },
        {
          "name": "uninstall",
          "type": "blob",
          "size": 1.146484375,
          "content": "#!/bin/bash\n#\n# vim-anywhere - use Vim whenever, wherever\n# Author: Chris Knadler\n# Homepage: https://www.github.com/cknadler/vim-anywhere\n#\n# Uninstalls vim-anywhere\n\nset -e\n\n###\n# opts\n###\n\nwhile getopts \":v\" opt; do\n  case \"$opt\" in\n    v) set -x ;;\n    \\?) echo \"Invalid option: -$OPTARG\" >&2 ;;\n  esac\ndone\n\n###\n# defs\n###\n\ncheck_installed() { hash $1 &> /dev/null; }\n\nAW_PATH=$HOME/.vim-anywhere\nDOC_PATH=/tmp/vim-anywhere\n\n###\n# uninstall\n###\n\nrm -rf $AW_PATH $DOC_PATH\n\n# Linux uninstall\nif [[ $OSTYPE == \"linux-gnu\" ]]; then\n  if check_installed gconftool; then\n    kbd_path=/desktop/gnome/keybindings/vim-anywhere\n    gconftool --unset $kbd_path/name\n    gconftool --unset $kbd_path/binding\n    gconftool --unset $kbd_path/action\n\n  else # gsettings must be installed\n    custom_kbd=org.gnome.settings-daemon.plugins.media-keys.custom-keybinding\n    kbd_path=/org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/vim-anywhere/\n    gsettings reset-recursively $custom_kbd:$kbd_path\n  fi\n\n# OSX uninstall\nelif [[ $OSTYPE == \"darwin\"* ]]; then\n  rm -rf $HOME/Library/Services/VimAnywhere.workflow\nfi\n\necho \"vim-anywhere has been successfully uninstalled!\"\n"
        },
        {
          "name": "update",
          "type": "blob",
          "size": 0.8544921875,
          "content": "#!/bin/bash\n#\n# vim-anywhere - use Vim whenever, wherever\n# Author: Chris Knadler\n# Homepage: https://www.github.com/cknadler/vim-anywhere\n#\n# Updates vim-anywhere\n\nset -e\n\n###\n# opts\n###\n\nwhile getopts \":v\" opt; do\n  case \"$opt\" in\n    v) set -x ;;\n    \\?) echo \"Invalid option: -$OPTARG\" >&2 ;;\n  esac\ndone\n\n###\n# defs\n###\n\nerr() { echo -e \"$@\" 1>&2; }\n\nAW_PATH=$HOME/.vim-anywhere\n\n###\n# update\n###\n\nif [ ! -d $AW_PATH ]; then\n  err \"vim-anywhere doesn't seem to be installed.\"\n  exit 1\nfi\n\n# if we are in a git repo, unset env vars\nif git rev-parse --git-dir &> /dev/null; then\n  unset $(git rev-parse --local-env-vars) &> /dev/null\nfi\n\npushd $AW_PATH\n  git pull origin master\n  [ $? -ne 0 ] && exit 1\npopd\n\n# OSX only\nif [[ $OSTYPE == \"darwin\"* ]]; then\n  cp -R $AW_PATH/VimAnywhere.workflow $HOME/Library/Services\nfi\n\necho \"vim-anywhere has been successfully updated!\"\n"
        }
      ]
    }
  ]
}