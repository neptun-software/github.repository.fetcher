{
  "metadata": {
    "timestamp": 1736568417663,
    "page": 366,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "xero/dotfiles",
      "stars": 2032,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.5107421875,
          "content": "# ùôÑùôÇùôâùôäùôçùôÄ ùôàùôÄ! üôà\ndbcli/.config/pgcli/log\ndbcli/.config/mycli/log\ngpg/.local/share/gpg/crls.d/\ngpg/.local/share/gpg/private-keys-v1.d/\ngpg/.local/share/gpg/tofu.db\ngpg/.local/share/gpg/pubring.kbx\ngpg/.local/share/gpg/pubring.kbx~\ngpg/.local/share/gpg/trustdb.gpg\ngpg/.local/share/gpg/.*.*\nssh/.ssh/authorized_keys\nssh/.ssh/id_*\nssh/.ssh/*.pub\nssh/.ssh/known_hosts\ntmux/.config/tmux/plugins/\nvim/.config/nvim/*/\nzsh/.zcompdump\nzsh/.config/zsh/*secret*.zsh\nneovim/.config/nvim/db_ui/connections.json\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 6.40234375,
          "content": "CC0 1.0 Universal\n\nStatement of Purpose\n\nThe laws of most jurisdictions throughout the world automatically confer\nexclusive Copyright and Related Rights (defined below) upon the creator and\nsubsequent owner(s) (each and all, an \"owner\") of an original work of\nauthorship and/or a database (each, a \"Work\").\n\nCertain owners wish to permanently relinquish those rights to a Work for the\npurpose of contributing to a commons of creative, cultural and scientific\nworks (\"Commons\") that the public can reliably and without fear of later\nclaims of infringement build upon, modify, incorporate in other works, reuse\nand redistribute as freely as possible in any form whatsoever and for any\npurposes, including without limitation commercial purposes. These owners may\ncontribute to the Commons to promote the ideal of a free culture and the\nfurther production of creative, cultural and scientific works, or to gain\nreputation or greater distribution for their Work in part through the use and\nefforts of others.\n\nFor these and/or other purposes and motivations, and without any expectation\nof additional consideration or compensation, the person associating CC0 with a\nWork (the \"Affirmer\"), to the extent that he or she is an owner of Copyright\nand Related Rights in the Work, voluntarily elects to apply CC0 to the Work\nand publicly distribute the Work under its terms, with knowledge of his or her\nCopyright and Related Rights in the Work and the meaning and intended legal\neffect of CC0 on those rights.\n\n1. Copyright and Related Rights. A Work made available under CC0 may be\nprotected by copyright and related or neighboring rights (\"Copyright and\nRelated Rights\"). Copyright and Related Rights include, but are not limited\nto, the following:\n\n  i. the right to reproduce, adapt, distribute, perform, display, communicate,\n  and translate a Work;\n\n  ii. moral rights retained by the original author(s) and/or performer(s);\n\n  iii. publicity and privacy rights pertaining to a person's image or likeness\n  depicted in a Work;\n\n  iv. rights protecting against unfair competition in regards to a Work,\n  subject to the limitations in paragraph 4(a), below;\n\n  v. rights protecting the extraction, dissemination, use and reuse of data in\n  a Work;\n\n  vi. database rights (such as those arising under Directive 96/9/EC of the\n  European Parliament and of the Council of 11 March 1996 on the legal\n  protection of databases, and under any national implementation thereof,\n  including any amended or successor version of such directive); and\n\n  vii. other similar, equivalent or corresponding rights throughout the world\n  based on applicable law or treaty, and any national implementations thereof.\n\n2. Waiver. To the greatest extent permitted by, but not in contravention of,\napplicable law, Affirmer hereby overtly, fully, permanently, irrevocably and\nunconditionally waives, abandons, and surrenders all of Affirmer's Copyright\nand Related Rights and associated claims and causes of action, whether now\nknown or unknown (including existing as well as future claims and causes of\naction), in the Work (i) in all territories worldwide, (ii) for the maximum\nduration provided by applicable law or treaty (including future time\nextensions), (iii) in any current or future medium and for any number of\ncopies, and (iv) for any purpose whatsoever, including without limitation\ncommercial, advertising or promotional purposes (the \"Waiver\"). Affirmer makes\nthe Waiver for the benefit of each member of the public at large and to the\ndetriment of Affirmer's heirs and successors, fully intending that such Waiver\nshall not be subject to revocation, rescission, cancellation, termination, or\nany other legal or equitable action to disrupt the quiet enjoyment of the Work\nby the public as contemplated by Affirmer's express Statement of Purpose.\n\n3. Public License Fallback. Should any part of the Waiver for any reason be\njudged legally invalid or ineffective under applicable law, then the Waiver\nshall be preserved to the maximum extent permitted taking into account\nAffirmer's express Statement of Purpose. In addition, to the extent the Waiver\nis so judged Affirmer hereby grants to each affected person a royalty-free,\nnon transferable, non sublicensable, non exclusive, irrevocable and\nunconditional license to exercise Affirmer's Copyright and Related Rights in\nthe Work (i) in all territories worldwide, (ii) for the maximum duration\nprovided by applicable law or treaty (including future time extensions), (iii)\nin any current or future medium and for any number of copies, and (iv) for any\npurpose whatsoever, including without limitation commercial, advertising or\npromotional purposes (the \"License\"). The License shall be deemed effective as\nof the date CC0 was applied by Affirmer to the Work. Should any part of the\nLicense for any reason be judged legally invalid or ineffective under\napplicable law, such partial invalidity or ineffectiveness shall not\ninvalidate the remainder of the License, and in such case Affirmer hereby\naffirms that he or she will not (i) exercise any of his or her remaining\nCopyright and Related Rights in the Work or (ii) assert any associated claims\nand causes of action with respect to the Work, in either case contrary to\nAffirmer's express Statement of Purpose.\n\n4. Limitations and Disclaimers.\n\n  a. No trademark or patent rights held by Affirmer are waived, abandoned,\n  surrendered, licensed or otherwise affected by this document.\n\n  b. Affirmer offers the Work as-is and makes no representations or warranties\n  of any kind concerning the Work, express, implied, statutory or otherwise,\n  including without limitation warranties of title, merchantability, fitness\n  for a particular purpose, non infringement, or the absence of latent or\n  other defects, accuracy, or the present or absence of errors, whether or not\n  discoverable, all to the greatest extent permissible under applicable law.\n\n  c. Affirmer disclaims responsibility for clearing rights of other persons\n  that may apply to the Work or any use thereof, including without limitation\n  any person's Copyright and Related Rights in the Work. Further, Affirmer\n  disclaims responsibility for obtaining any necessary consents, permissions\n  or other rights required for any use of the Work.\n\n  d. Affirmer understands and acknowledges that Creative Commons is not a\n  party to this document and has no duty or obligation with respect to this\n  CC0 or use of the Work.\n\nFor more information, please see\n<http://creativecommons.org/publicdomain/zero/1.0/>\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 17.921875,
          "content": "![evangeion](https://raw.githubusercontent.com/xero/dotfiles/main/preview.png)\n```\n      ‚ñà‚ñà            ‚ñà‚ñà     ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà  ‚ñà‚ñà\n     ‚ñë‚ñà‚ñà           ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà‚ñë ‚ñë‚ñë  ‚ñë‚ñà‚ñà\n     ‚ñë‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà ‚ñë‚ñà‚ñà  ‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n  ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë ‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë ‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë\n ‚ñà‚ñà‚ñë‚ñë‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà\n‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà    ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà ‚ñë‚ñà‚ñà‚ñë‚ñà‚ñà‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñà‚ñà\n‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà   ‚ñë‚ñë‚ñà‚ñà   ‚ñë‚ñà‚ñà  ‚ñë‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\n ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë     ‚ñë‚ñë    ‚ñë‚ñë   ‚ñë‚ñë ‚ñë‚ñë‚ñë  ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n\n  ‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\n ‚ñë‚ñì about  ‚ñì custom linux config files\n ‚ñë‚ñì author ‚ñì xero <x@xero.style>\n ‚ñë‚ñì code   ‚ñì http://code.x-e.ro/dotfiles\n ‚ñë‚ñì mirror ‚ñì https://git.io/.files\n ‚ñë‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì‚ñì\n ‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë‚ñë\n\n```\n\n> __NOTE:__ if you are looking for my linux wm configs like [2bwm](https://github.com/xero/dotfiles/tree/classic/2bwm), [windowchef](https://github.com/xero/dotfiles/tree/classic/windowchef), etc. they now live in the [classic](https://github.com/xero/dotfiles/tree/classic) branch and are not actively maintained since i live in the tty, xorg free, these days.\n\n## table of contents\n\n - [introduction](#dotfiles)\n - [managing](#managing)\n - [installing](#installing)\n - [how it works](#how-it-works)\n - [tl;dr](#tldr)\n - [terminal emulator](#terminal-emulator)\n - [vps & local clipboard](#vps--local-clipboard)\n - [shell](#shell)\n - [clean home](#clean-home)\n - [neovim](#neovim)\n - [license](#license)\n\n# dotfiles\n\nin the unix world programs are commonly configured in two different ways, via shell arguments or text based configuration files. programs with many options like text editors are configured on a per-user basis with files in your home directory `~`. in unix like operating systems any file or directory name that starts with a period or full stop character is considered hidden, and in a default view will not be displayed. thus the name dotfiles.\n\nit's been said of every console user:\n> _\"you are your dotfiles\"_.\n\nsince they dictate how your system will look and function. to many users (see [ricers](https://reddit.com/r/unixporn/) and [beaners](https://reddit.com/r/unixart/)) these files are very important, and need to be backed up and shared. people who create custom themes have the added challenge of managing multiple versions of them. i have tried many organization techniques. and just take my word for it when i say, keeping a git repo in the root of your home directory is a bad idea. i've written custom shell scripts for moving or symlinking files into place. there are even a few [dotfile managers](https://dotfiles.github.io/utilities/), but they all seem to have lots of dependencies. i knew there had to be a simple tool to help me.\n\n# managing\n\ni manage mine with [gnu stow](http://www.gnu.org/software/stow/), a free, portable, lightweight symlink farm manager. this allows me to keep a versioned directory of all my config files that are virtually linked into place via a single command. this makes sharing these files among many users (root) and computers super simple. and does not clutter your home directory with version control files.\n\n# installing\n\nstow is available for all linux and most other unix like distributions via your package manager.\n\n- `apt install stow`\n- `brew install stow`\n- `dnf install stow`\n- `pacman -S stow`\n- `yum install stow`\n\nor clone it [from source](https://savannah.gnu.org/git/?group=stow) and [build it](http://git.savannah.gnu.org/cgit/stow.git/tree/INSTALL) yourself.\n\n# how it works\n\nby default the stow command will create symlinks for files in the parent directory of where you execute the command. since i keep my dots in: `~/.local/src/dotfiles` and all stow commands should be executed in that directory and suffixed with `-t ~` to target the home directory. otherwise they will end up in `~/.local/`. if you wanna make things easier on yourself you can clone the repo to `~/dotfiles` then run commands with no flags. but who likes things easy in the unix world ;P\n\nto install configs execute the stow command with the folder name as the first argument, then target your home directory (or wherever you like).\n\nto install my **zsh** configs use the command:\n\n`stow zsh -t ~`\nthis will symlink files like `.zshrc` to `~/.config/zsh`\n\nto install the **fun scripts** to `/usr/local/bin` execute the command:\n\n`stow fun -t /usr/local/`\n\nthis will symlink the fun scripts like `food` to `/usr/local/bin`. notice that the location of the scripts has appended a bin folder? that's b/c stow creates or uses the exact folder structure of the repo. and the food script is located at `/fun/bin/food` in this repo.\n\n**note:** stow can only create a symlink if a config file does not already exist. if a default file was created upon program installation you must delete it first before you can install a new one with stow. this does not apply to directories, only files.\n\nmore notes on using/understanding stow in [this github issue](https://github.com/xero/dotfiles/issues/14).\n\n# my dotfiles setup\n\nto fully \"install\" and setup this repo run the [setup script](https://github.com/xero/dotfiles/blob/main/setup) or something like this:\n```\n# clone and stow\ngit clone git@github.com:xero/dotfiles.git ~/.local/src/dotfiles &&\n\tcd ~/.local/src/dotfiles &&\n\tstow bin fun git gpg ssh tmux neovim zsh -t ~\n\n# tmux\nmkdir ~/.config/tmux/plugins &&\n\tgit clone --depth=1 https://github.com/tmux-plugins/tpm ~/.config/tmux/plugins/tpm &&\n\t~/.config/tmux/plugins/tpm/scripts/install_plugins.sh &&\n\tcd ~/.config/tmux/plugins/tmux-thumbs &&\n\t\texpect -c \"spawn ./tmux-thumbs-install.sh; send \\\"\\r2\\r\\\"; expect complete\" 1>/dev/null\n\n# nvim\nmkdir ~/.local/nvim &&\n  git clone --filter=blob:none --single-branch https://github.com/folke/lazy.nvim.git ~/.local/share/nvim/lazy\nnvim --headless \"+Lazy! sync\" +qa\nnvim --headless \"+MasonUpdate\" +qa\n\n# creating ~src and ~dotfiles aliases\"\nsudo useradd -g src -d ~/.local/src src\nsudo useradd -d ~/.local/src/dotfiles dotfiles\n```\n\n# tl;dr\n\nnavigate to your home directory\n\n`cd ~`\n\nclone the repo:\n\n`git clone git@github.com:xero/dotfiles.git`\n\nenter the dotfiles directory\n\n`cd dotfiles`\n\ninstall the zsh settings\n\n`stow zsh`\n\ninstall zsh settings for the root user\n\n`sudo stow zsh -t /root`\n\nuninstall zsh\n\n`stow -D zsh`\n\netc, etc, etc...\n\n# terminal emulator\n\nrecently i've been using an 11\" m1 ipad pro and a bluetooth 68% mechanical keyboard, usually on my lap, as my main computer. i use the [community edition of the blink shell](https://community.blink.sh) connected to a vps.\n\nwhen it comes to fonts i've been using [hack](https://sourcefoundry.org/hack/) (i use a [mod](https://github.com/ryanoasis/nerd-fonts/blob/master/patched-fonts/Hack/readme.md) w/ extra icons for extended unicode and emoji support.) it's included in base64 encoded css form, along with color schemes, in the `blink` directory.\n\nrun blink `config` under appearance, set the screen mode set to `cover` then setup your server identity and keys. beyond that the only command i ever run in blink is `mosh x`. x being my server alias.\n\n# vps & local clipboard\n\nidk why, but i chose debian 11 on aws for some reason. there's a [setup script](https://github.com/xero/dotfiles/blob/main/setup) for a fresh vps to install all the packages, tools, & services, create my user, setup keys, etc... that i use, my way. but you the reader don't need them all to run my dots, this is for me. beware there be dragons here.\n\nit builds [mosh-server from this pr](https://github.com/mobile-shell/mosh/pull/1104#issuecomment-710754740) for osc 52 clipboard support.\n\ni use [xvfb](https://www.x.org/releases/X11R7.6/doc/man/man1/Xvfb.1.xhtml) to create a headless xorg enviroment for the clipboard. you can then use tools like [xsel](https://linux.die.net/man/1/xsel) and [xclip](https://linux.die.net/man/1/xclip) to pipe `{in/out}` of it in the tty. i have a personal fork on clipmenu that uses [fzf](https://github.com/junegunn/fzf) and a an osc52 [yank script](https://github.com/xero/dotfiles/blob/main/bin/.local/bin/yank) to syncromize the x and ipad clipboards. there are other osc52 plugins for neovim and tmux included in these dotfiles to bring the whole thing together.\n\nhere's an abbreviated aws ec2 launch template for my arm64 graviton instance:\n```\n{\n\t\"LaunchTemplateName\": \"debian11_dev_box\",\n\t\"LaunchTemplateData\": {\n\t\t\"ImageId\": \"ami-038e5cbebf3138c24\",\n\t\t\"InstanceType\": \"c6g.medium\",\n\t\t\"EbsOptimized\": true,\n\t\t\"BlockDeviceMappings\": [{\n\t\t\t\"DeviceName\": \"/dev/xvda\",\n\t\t\t\"Ebs\": {\n\t\t\t\t\"Encrypted\": true,\n\t\t\t\t\"Iops\": 8000,\n\t\t\t\t\"VolumeSize\": 80,\n\t\t\t\t\"VolumeType\": \"gp3\",\n\t\t\t\t\"Throughput\": 125\n\t\t\t}\n\t\t}],\n\t\t\"NetworkInterfaces\": [{\n\t\t\t\"SecuityGroups\": {\n\t\t\t\t\"IpPermissions\": [\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 0 },\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 1723 },\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 22 },\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 443 },\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 60806 },\n\t\t\t\t\t{ \"protocol\": \"tcp\", \"port\": 80 },\n\t\t\t\t\t{ \"protocol\": \"udp\", \"port\": 1701 },\n\t\t\t\t\t{ \"protocol\": \"udp\", \"port\": 4500 },\n\t\t\t\t\t{ \"protocol\": \"udp\", \"port\": 500 },\n\t\t\t\t\t{ \"protocol\": \"udp\", \"port\": 61000 }\n\t\t\t\t]\n\t\t\t}\n\t\t}]\n\t}\n}\n```\n\n# shell\n\ni prefer a minimal setup, and choose to interact with my operating system via the so-called \"terminal\" or \"command line\", (read that quoting sarcastically). with the web browser and video player among the noted outliers. in my opinion, using your computer should be a very personal experience. your colors, aliases, key-bindings, etc meticulously crafted to your exacting specifications. so for me, the unix shell is the most important part of my environment.\n\ni use [zsh](http://linux.die.net/man/1/zsh) as my interactive shell. it's an extensible, bash like shell with awesome completion and correction engines. i manage multiple shell sessions with [tmux](http://linux.die.net/man/1/tmux). it's a feature packed terminal multiplexer with support for buffers, split windows, detached local and remote sessions, etc. i use [neovim](https://neovim.io) and a member of the [cult of vi](https://en.wikipedia.org/wiki/Editor_war). sing phrases to the third reincarnation of the glorious ed! **lel.**\n\n# clean home\n\ni'm all about living a *comfy* and clean digital life, so that means a tidy and organized home directory. my `~` and this repo, follow the [XDG spec](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html).  here's a generalized breakdown:\n\n```\n.\n‚îú‚îÄ‚îÄ .config/ $XDG_CONFIG_HOME --> app specific configs\n‚îÇ   ‚îú‚îÄ‚îÄ nvim\n‚îÇ   ‚îú‚îÄ‚îÄ tmux\n‚îÇ   ‚îú‚îÄ‚îÄ zsh       --> each app has a folder\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ zshrc --> config files\n‚îÇ   ‚îî‚îÄ‚îÄ etc...\n‚îú‚îÄ‚îÄ .local/\n‚îÇ   ‚îú‚îÄ‚îÄ bin/   $PATH            --> my scripts\n‚îÇ   ‚îú‚îÄ‚îÄ cache/ $XDG_CACHE_HOME  --> runtime files\n‚îÇ   ‚îú‚îÄ‚îÄ docs/  ~docs            --> my documents\n‚îÇ   ‚îú‚îÄ‚îÄ lib/   $pkgManger_HOME  --> app libraries\n‚îÇ   ‚îú‚îÄ‚îÄ share/ $XDG_DATA_HOME   --> shared app files\n‚îÇ   ‚îú‚îÄ‚îÄ src/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ dotfiles/   --> this repo\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ other_code/\n‚îÇ   ‚îî‚îÄ‚îÄ state/ $XDG_STATE_HOME  --> app state files\n‚îÇ       ‚îî‚îÄ‚îÄ zsh/\n‚îÇ           ‚îî‚îÄ‚îÄ history --> app created files\n‚îú‚îÄ‚îÄ .ssh/\n‚îÇ   ‚îú‚îÄ‚îÄ authorized_keys\n‚îÇ   ‚îú‚îÄ‚îÄ config\n‚îÇ   ‚îî‚îÄ‚îÄ known_hosts\n‚îî‚îÄ‚îÄ ‚ñÑ‚ñà‚ñÄ ‚ñà‚ñ¨‚ñà ‚ñà ‚ñÄ‚ñà‚ñÄ\n```\nto make this all work, (esp `~/.local/lib`) i have a ton of XDG directives in my [zsh environment file](https://github.com/xero/dotfiles/blob/main/zsh/.config/zsh/01-environment.zsh#L16). the one tricky bit it getting your zshrc outta home. you need to export the ZDOTDIR globally somewhere like `/etc/zsh/zshenv` or `/etc/zlogin`  that is globally sourced. other options like using systemd discussed [here](https://www.reddit.com/r/zsh/comments/3ubrdr/comment/iqd901v/). i suggest running these two commands from my [setup script](https://github.com/xero/dotfiles/blob/main/setup) to get things ready:\n\n```\n# create directory skeleton\nmkdir -p ~/.local/{bin,docs,cache,lib,share,src,state} ~/.local/state/zsh\n\n# export ZDOTDIR globally\necho 'export ZDOTDIR=\"$HOME\"/.config/zsh' >>/etc/zsh/zshenv\n```\n\ni like to run these __before__ cloning my dotfiles and using stow, to prevent these dirs from being symlinks.\n\n# neovim\n\nwith it's tight integration to the unix shell, [vim](http://www.vim.org) has been my editor of choice for years. once you start to grok movements and operators you quickly begin manipulating, not just editing text files. and in the shell, everything is just text ;D these days i'm a full time [neovim](https://neovim.io) user. it's just better than normal vim at this point imho. using a community built embedded language like lua5 makes way more sense than a custom/proprietary one.\n\nwith [my asliases](https://github.com/xero/dotfiles/blob/main/zsh/.config/zsh/06-aliases.zsh#L35) `e` is `$EDITOR` and `se` is `sudo $EDITOR`\n\n`e ~dotfiles/README.md` is `nvim ~/.local/src/dotfiles/README.md`\n\n`se /etc/hosts` is `sudo nvim /etc/hosts`\n\nyou can also start neovim using `ec` or editor clean, to run `nvim --cmd \":lua vim.g.noplugins=1\"`. which is kinda like `nvim --clean` with the added bonus of still loading some sane defaults. i use this as my [MANPAGER](https://github.com/xero/dotfiles/blob/main/zsh/.config/zsh/01-environment.zsh#L40) with `+MAN!` as well.\n\nmy neovim setup is written in [lua](https://neovim.io/doc/user/lua-guide.html), uses [lazy.vim](https://github.com/folke/lazy.nvim), and a bunch of plugins. you can enable/disable them selectivly from [plugins.lua](https://github.com/xero/dotfiles/blob/main/neovim/.config/nvim/lua/plugins.lua). here's the structure of configs:\n```\n~/.config/nvim\n‚îú‚îÄ‚îÄ lua/\n‚îÇ   ‚îú‚îÄ‚îÄ utils/i            --> shared helper functions\n‚îÇ   ‚îú‚îÄ‚îÄ plugins/\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ alpha.lua      --> each plugin has it's own config\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ cmp.lua\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ lsp/\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ init.lua   --> main lsp setup logic\n‚îÇ   ‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ remaps.lua --> lsp key-bindings\n‚îÇ   ‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ servers/\n‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ bashls.lua --> language server specific configs\n‚îÇ   ‚îÇ   ‚îÇ       ‚îú‚îÄ‚îÄ luals.lua\n‚îÇ   ‚îÇ   ‚îÇ       ‚îî‚îÄ‚îÄ etc...\n‚îÇ   ‚îÇ   ‚îú‚îÄ‚îÄ mason.lua\n‚îÇ   ‚îÇ   ‚îî‚îÄ‚îÄ etc...\n‚îÇ   ‚îú‚îÄ‚îÄ ui.lua            --> ui related options\n‚îÇ   ‚îú‚îÄ‚îÄ commands.lua      --> custom commands and key-bindings\n‚îÇ   ‚îú‚îÄ‚îÄ general.lua       --> general settings\n‚îÇ   ‚îî‚îÄ‚îÄ lazy-plugins.lua  --> lazy.nvim entrypoint\n‚îú‚îÄ‚îÄ nvim-logo*            --> k-rad ansi art\n‚îú‚îÄ‚îÄ eva-logo*             --> evangeion ansi art\n‚îî‚îÄ‚îÄ init.lua              --> calls other files\n```\n\nas of writing this, i use ~50 [plugins](https://github.com/xero/dotfiles/tree/main/neovim/.config/nvim/lua/plugins) and an average startup time of 80-125ms. plugin highlights include:\n\n* [lazy](https://github.com/folke/lazy.nvim) - the chillest package manager\n* [lspconfig](https://github.com/neovim/nvim-lspconfig) - native language server protocol\n    * [conform](https://github.com/stevearc/conform.nvim) - lsp formatting\n    * [neodev](https://github.com/folke/neodev.nvim) - vscode exported completions and snips\n\t* [mason_lsp](https://github.com/williamboman/mason-lspconfig.nvim) - mason linter backend\n\t* [lsp_lines](https://git.sr.ht/~whynothugo/lsp_lines.nvim) - visualize diagnostics\n    * [trouble](https://github.com/folke/trouble.nvim) - pretty diagnostics navigation pane\n* [gitsigns](https://github.com/lewis6991/gitsigns.nvim) - subtle git diffs in the gutter\n* [cmp](https://github.com/hrsh7th/nvim-cmp) - completion engine\n* [surround](https://github.com/kylechui/nvim-surround) - motions to surround objects w/ characters\n* [comments](https://github.com/terrortylor/nvim-comment) - toggle comments with motion\n* [flog](https://github.com/rbong/vim-flog) - visually explore your git history\n* [lualine](https://github.com/nvim-lualine/lualine.nvim) - customized status bar for the rice factor\n* [tint](https://github.com/levouh/tint.nvim) - desaturate inactive panes for visual cues\n* [indent_blank_line](https://github.com/lukas-reineke/indent-blankline.nvim) - eyecandy for indentation whitespace\n* [telescope](https://github.com/nvim-telescope/telescope.nvim) - extensible fuzzy finder with native  floating windows\n    * [telescope-undo](https://github.com/debugloop/telescope-undo.nvim) - view your undo history as a tree of diffs\n    * [telescope-live-grep-args](https://github.com/nvim-telescope/telescope-live-grep-args.nvim) - ripgrep powered fuzzy search\n    * [telescope-file-browser](https://github.com/nvim-telescope/telescope-file-browser.nvim) - file browser, for when you need it\n* [lush](https://github.com/rktjmp/lush.nvim) - interactive colorscheme development tool\n    * [evangeion](https://github.com/xero/evangeion.nvim) - my own colorscheme\n* [alpha](https://github.com/goolord/alpha-nvim) - hipster splashscreen with awesome text art\n* [which-key](https://github.com/folke/which-key.nvim) - help define and display key-bindings\n\nmy leader key is set to `,` and you can checkout all my custom key-bindings by calling `:WhichKey`\n\n# previews\n\n[miasma](https://github.com/xero/dotfiles/releases/tag/miasma)\n![miasma](https://raw.githubusercontent.com/xero/dotfiles/miasma/preview.png)\n\nmore at https://lab.x-e.ro/rice/\n\n# license\n\n![kopimi logo](https://gist.githubusercontent.com/xero/cbcd5c38b695004c848b73e5c1c0c779/raw/6b32899b0af238b17383d7a878a69a076139e72d/kopimi-sm.png)\n\nall files and scripts in this repo are released [CC0](https://creativecommons.org/publicdomain/zero/1.0/) / [kopimi](https://kopimi.com)! in the spirit of _freedom of information_, i encourage you to fork, modify, change, share, or do whatever you like with this project! `^c^v`\n"
        },
        {
          "name": "bash",
          "type": "tree",
          "content": null
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "blink",
          "type": "tree",
          "content": null
        },
        {
          "name": "dbcli",
          "type": "tree",
          "content": null
        },
        {
          "name": "fun",
          "type": "tree",
          "content": null
        },
        {
          "name": "git",
          "type": "tree",
          "content": null
        },
        {
          "name": "gpg",
          "type": "tree",
          "content": null
        },
        {
          "name": "neovim",
          "type": "tree",
          "content": null
        },
        {
          "name": "preview.png",
          "type": "blob",
          "size": 500.78125,
          "content": null
        },
        {
          "name": "setup",
          "type": "blob",
          "size": 17.560546875,
          "content": "#!/bin/bash\n# usage:\n# curl -L https://raw.githubusercontent.com/xero/dotfiles/main/setup > x && chmod +x x && sudo ./x\n# make sure your edit the ARCH var for your architecture\n#\n# setup.sh by xero (http://git.io/.files)\n# a script to setup a new debian vps with\n# all my tools and configs, ready to roll\n# it relies heavily on my 1password vault\n# so...\n#   ‚ñÑ‚ñÑ‚ñÑ‚ñÑ  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà ‚ñà     ‚ñà ‚ñÑ‚ñà‚ñà‚ñà‚ñà ‚ñà‚ñà‚ñÄ‚ñà‚ñà‚ñÑ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà\n#  ‚ñì‚ñà‚ñà‚ñà‚ñà‚ñà‚ñÑ‚ñì‚ñà‚ñë  ‚ñÄ‚ñì‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñì‚ñà ‚ñí ‚ñà‚ñì‚ñà‚ñà ‚ñí ‚ñà‚ñì‚ñà‚ñí‚ñë ‚ñì\n#  ‚ñí‚ñà‚ñà‚ñí ‚ñÑ‚ñà‚ñí‚ñà‚ñà‚ñà  ‚ñí‚ñà‚ñë ‚ñà ‚ñë‚ñà‚ñì‚ñà ‚ñë ‚ñà‚ñì‚ñà‚ñà ‚ñë‚ñÑ‚ñà‚ñí‚ñà‚ñà‚ñà\n#  ‚ñí‚ñà‚ñà‚ñë‚ñà‚ñÄ ‚ñí‚ñì‚ñà  ‚ñÑ‚ñë‚ñà‚ñÑ ‚ñà‚ñë‚ñÑ‚ñà‚ñí‚ñà‚ñÄ‚ñÄ‚ñÄ‚ñà‚ñí‚ñà‚ñà‚ñÄ‚ñÄ‚ñà‚ñÑ‚ñí‚ñì‚ñà  ‚ñÑ\n#  ‚ñë‚ñì‚ñà  ‚ñÄ‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñë‚ñë‚ñà‚ñà‚ñí‚ñà‚ñà‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñë‚ñà‚ñà‚ñì ‚ñí‚ñà‚ñë‚ñí‚ñà‚ñà‚ñà‚ñà‚ñí\n#  ‚ñë‚ñí‚ñì‚ñà‚ñà‚ñà‚ñÄ‚ñë‚ñë ‚ñí‚ñë ‚ñë ‚ñì‚ñë‚ñí ‚ñí‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñë ‚ñí‚ñì ‚ñë‚ñí‚ñë‚ñë ‚ñí‚ñë ‚ñë\n#  ‚ñí‚ñë‚ñí   ‚ñë ‚ñë ‚ñë  ‚ñë ‚ñí ‚ñë ‚ñë  ‚ñë‚ñí ‚ñë ‚ñí ‚ñë‚ñí ‚ñë ‚ñí‚ñë ‚ñë  ‚ñë\n#   ‚ñë    ‚ñë   ‚ñë    ‚ñë   ‚ñë  ‚ñë‚ñë   ‚ñë ‚ñë‚ñë   ‚ñë  ‚ñë\n#   ‚ñë  ‚ñë     ‚ñë  ‚ñë   ‚ñë     ‚ñë      ‚ñë         ‚ñë\n#         this is how i setup my shiz    ‚ñë\n#      ‚ñë it might not be great for you  ‚ñë\n\n# user vars\nexport ME='x0'\nexport X_UID=10806\nexport PORT=60806\nexport HOSTNAME='thirteen'\nexport ARCH='x86' # arm, x86\n# script vars\nMYHOME=\"/home/$ME\"\nASME=\"sudo -u $ME\"\nPKGARCH=$ARCH\n\n# helper functions\nfunction _echo() { printf \"\\n‚ïì‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ %s \\n‚ïô‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ ‚îÄ ‚îÄ \\n\" \"$1\"; }\nfunction get() {\n\tf=\"${3:-notesPlain}\"\n\top item get \"$2\" --account \"$1\" --fields \"$f\" --format json | jq -rM '.value'\n}\nfunction getfile() {\n\tf=\"${4:-notesPlain}\"\n\top --account \"$1\" read \"op://$2/$3/$f\"\n}\nfunction account() {\n\tdomain=\"${3:-my}.1password.com\"\n\top account add \\\n\t\t--address \"$domain\" \\\n\t\t--email \"$2\" \\\n\t\t--shorthand \"$1\"\n}\n\n[ \"$(id -u)\" -ne 0 ] && {\n\t_echo \"got root?\" >&2\n\texit 1\n}\n\n_echo \"creating swap\"\ndd if=/dev/zero of=/swapmeet bs=128M count=32\nchmod 600 /swapmeet\nmkswap /swapmeet\nswapon /swapmeet\nswapon -s\necho \"/swapmeet swap swap defaults 0 0\" >> /etc/fstab\necho \"vm.swappiness=0\" >> /etc/sysctl.conf\nsysctl vm.swappiness=0\n\n_echo \"installing runtime deps\"\napt update && apt install -y git gpg bash curl locales gnupg software-properties-common\n\n_echo \"setting up locales and console\"\nlocale-gen \"en_US.UTF-8\"\nlocalectl set-locale en_US.UTF-8\ndpkg-reconfigure locales\ndpkg-reconfigure console-setup\nsystemctl daemon-reload\nsystemctl restart console-setup.service\n\n_echo \"adding apt sources\"\n# add github\ncurl -fsSL https://cli.github.com/packages/githubcli-archive-keyring.gpg | dd of=/usr/share/keyrings/githubcli-archive-keyring.gpg &&\n\tchmod go+r /usr/share/keyrings/githubcli-archive-keyring.gpg &&\n\techo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/githubcli-archive-keyring.gpg] https://cli.github.com/packages stable main\" | tee /etc/apt/sources.list.d/github-cli.list > /dev/null\n\n# add 1pw\ncurl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/keyrings/1password-archive-keyring.gpg &&\n\techo \"deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/1password-archive-keyring.gpg] https://downloads.1password.com/linux/debian/$(dpkg --print-architecture) stable main\" | tee /etc/apt/sources.list.d/1password.list > /dev/null\nmkdir -p /etc/debsig/policies/AC2D62742012EA22/ &&\n\tcurl -sS https://downloads.1password.com/linux/debian/debsig/1password.pol | tee /etc/debsig/policies/AC2D62742012EA22/1password.pol\nmkdir -p /usr/share/debsig/keyrings/AC2D62742012EA22 &&\n\tcurl -sS https://downloads.1password.com/linux/keys/1password.asc | gpg --dearmor --output /usr/share/debsig/keyrings/AC2D62742012EA22/debsig.gpg\n\n# add hashicorp\ncurl -sL https://apt.releases.hashicorp.com/gpg |\n\tgpg --dearmor |\n\ttee /usr/share/keyrings/hashicorp-archive-keyring.gpg\ngpg --no-default-keyring \\\n\t--keyring /usr/share/keyrings/hashicorp-archive-keyring.gpg \\\n\t--fingerprint\necho \"deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \\\n\thttps://apt.releases.hashicorp.com $(lsb_release -cs) main\" |\n\ttee /etc/apt/sources.list.d/hashicorp.list\n\n# install all the things \\o/\n_echo \"installing packages\"\napt update &&\n\tDEBIAN_FRONTEND=noninteractive apt install -y \\\n\t\t1password-cli \\\n\t\tapparmor \\\n\t\tapt-utils \\\n\t\tautoconf \\\n\t\tautomake \\\n\t\tawscli \\\n\t\tbash \\\n\t\tbash-completion \\\n\t\tbc \\\n\t\tbind9-host \\\n\t\tbsdutils \\\n\t\tbuild-essential \\\n\t\tca-certificates \\\n\t\tclamav-base \\\n\t\tcmake \\\n\t\tcmatrix \\\n\t\tcoreutils \\\n\t\tcurl \\\n\t\tdash \\\n\t\tdbus \\\n\t\tdbus-user-session \\\n\t\tdebianutils \\\n\t\tdiffutils \\\n\t\tdnsutils \\\n\t\tdocker.io \\\n\t\tdoxygen \\\n\t\tdpkg \\\n\t\te2fsprogs \\\n\t\teslint \\\n\t\tethtool \\\n\t\texpect \\\n\t\tfail2ban \\\n\t\tfindutils \\\n\t\tfzf \\\n\t\tg++ \\\n\t\tgawk \\\n\t\tgcc \\\n\t\tgettext \\\n\t\tgh \\\n\t\tgit \\\n\t\tgolang \\\n\t\tgolang-doc \\\n\t\tgolang-src \\\n\t\tgpg \\\n\t\tgpg-agent \\\n\t\tgpgv \\\n\t\tgzip \\\n\t\thtop \\\n\t\tiptables \\\n\t\tiputils-ping \\\n\t\tisc-dhcp-client \\\n\t\tjq \\\n\t\tkeychain \\\n\t\tkubernetes-client \\\n\t\tlibevent-dev \\\n\t\tlibncurses5-dev \\\n\t\tlibprotobuf-dev \\\n\t\tlibssl-dev \\\n\t\tlibtool \\\n\t\tlibtool-bin \\\n\t\tlibutempter-dev \\\n\t\tlibx11-dev \\\n\t\tlibxfixes-dev \\\n\t\tlsb-base \\\n\t\tlua5.4 \\\n\t\tluajit \\\n\t\tluarocks \\\n\t\tman-db \\\n\t\tmanpages \\\n\t\tmawk \\\n\t\tncurses-base \\\n\t\tncurses-bin \\\n\t\tncurses-term \\\n\t\tnet-tools \\\n\t\tnetbase \\\n\t\tninja-build \\\n\t\tnmap \\\n\t\tocproxy \\\n\t\topenconnect \\\n\t\topenssh-client \\\n\t\topenssh-server \\\n\t\topenssl \\\n\t\tpciutils \\\n\t\tperl \\\n\t\tperl-base \\\n\t\tpkg-config \\\n\t\tprotobuf-compiler \\\n\t\tproxychains4 \\\n\t\tpsmisc \\\n\t\tpython3 \\\n\t\tpython3-boto \\\n\t\tpython3-pip \\\n\t\tpython3-venv \\\n\t\tripgrep \\\n\t\trkhunter \\\n\t\trsyslog \\\n\t\tsecure-delete \\\n\t\tshellcheck \\\n\t\tsilversearcher-ag \\\n\t\tsocat \\\n\t\tstow \\\n\t\tsudo \\\n\t\ttar \\\n\t\ttcpdump \\\n\t\tterraform \\\n\t\ttmux \\\n\t\ttoilet \\\n\t\ttraceroute \\\n\t\ttree \\\n\t\ttzdata \\\n\t\tunzip \\\n\t\tutil-linux \\\n\t\tuuid-runtime \\\n\t\tvim-tiny \\\n\t\tvpnc \\\n\t\twhiptail \\\n\t\twhois \\\n\t\txsel \\\n\t\txvfb \\\n\t\txz-utils \\\n\t\tzlib1g \\\n\t\tzlib1g-dev \\\n\t\tzsh \\\n\t\tzsh-syntax-highlighting\n\n_echo \"systemd housekeeping\"\nsystemctl stop docker.service\nsystemctl stop containerd.service\nsystemctl enable clamav-freshclam.service\n\n_echo \"setting up timezone and hostname\"\ntimedatectl set-timezone America/New_York\nhostname \"$HOSTNAME\"\nhostnamectl set-hostname \"$HOSTNAME\"\nsed -i '/^127\\.0\\.0\\.1\\s/s/$/ '\"$HOSTNAME\"'/' /etc/hosts\nsed -i '/^127\\.0\\.0\\.1\\s/s/$/ '\"$HOSTNAME\"'/' /etc/cloud/templates/hosts.debian.tmpl\n\n_echo \"creating local user\"\nadduser --uid \"$X_UID\" --shell \"$(which zsh)\" \"$ME\"\n\n_echo \"granting root access\"\necho \"${ME} ALL=(ALL) NOPASSWD:ALL\" > \"/etc/sudoers.d/$ME\"\n\n_echo \"setting up 1password\"\naccount x0 \"x@xero.style\"\neval \"$(op signin --account x0)\"\n\n_echo \"setting up key keychain\"\nget x0 GH_TOKEN | $ASME gh auth login -p ssh --with-token\nmkdir -p $MYHOME/.ssh\nif [[ -d /home/admin/.ssh ]]; then\n\tcp /home/admin/.ssh/authorized_keys $MYHOME/.ssh/authorized_keys\nelse\n\tcp /root/.ssh/authorized_keys $MYHOME/.ssh/authorized_keys\nfi\nget x0 id_ed25519_github privateKey > $MYHOME/.ssh/id_ed25519\nget x0 id_ed25519_github publicKey > $MYHOME/.ssh/id_ed25519.pub\nssh-keyscan -p 22 -H github.com gist.github.com > /root/.ssh/known_hosts\n$ASME ssh-keyscan -p 22 -H github.com gist.github.com > $MYHOME/.ssh/known_hosts\nchown -R $ME:$ME /home/$ME/.ssh\nchmod 700 $MYHOME/.ssh\nchmod 600 $MYHOME/.ssh/*\n\n# i do not want these dirs to be symlinks\n_echo \"creating directory skeletons\"\n$ASME mkdir -p \\\n\t$MYHOME/.{config,local} \\\n\t$MYHOME/.local/{bin,docs,cache,lib,share,src,state} \\\n\t$MYHOME/.local/state/zsh\n\n_echo \"setting up rust\"\ncurl https://sh.rustup.rs -sSf | $ASME CARGO_HOME=\"$MYHOME/.local/lib/cargo\" RUSTUP_HOME=\"$MYHOME/.local/lib/rustup\" sh -s -- -y --default-toolchain stable --profile default &&\n\t$ASME CARGO_HOME=\"$MYHOME/.local/lib/cargo\" RUSTUP_HOME=\"$MYHOME/.local/lib/rustup\" $MYHOME/.local/lib/cargo/bin/cargo install cargo-quickinstall &&\n\t$ASME CARGO_HOME=\"$MYHOME/.local/lib/cargo\" RUSTUP_HOME=\"$MYHOME/.local/lib/rustup\" $MYHOME/.local/lib/cargo/bin/cargo quickinstall lolcat stylua\n\n_echo \"setting up starship\"\nif [[ \"$ARCH\" == \"arm\" ]]; then\n\tcurl -sS https://starship.rs/install.sh | sh\nelse\n\t$ASME CARGO_HOME=\"$MYHOME/.local/lib/cargo\" RUSTUP_HOME=\"$MYHOME/.local/lib/rustup\" $MYHOME/.local/lib/cargo/bin/cargo quickinstall starship\nfi\n\n_echo \"building neovim\"\n$ASME git clone --depth=1 https://github.com/neovim/neovim.git -b stable $MYHOME/.local/src/neovim &&\n\tcd $MYHOME/.local/src/neovim &&\n\tCMAKE_BUILD_TYPE=RelWithDebInfo make &&\n\tmake install\n\n_echo \"setting up dotfiles\"\n$ASME git clone git@github.com:xero/dotfiles.git $MYHOME/.local/src/dotfiles &&\n\tcd $MYHOME/.local/src/dotfiles &&\n\t$ASME stow bin fun git gpg ssh tmux neovim zsh -t $MYHOME\n# tmux\n$ASME mkdir $MYHOME/.config/tmux/plugins &&\n\t$ASME git clone --depth=1 https://github.com/tmux-plugins/tpm $MYHOME/.config/tmux/plugins/tpm &&\n\t$ASME $MYHOME/.config/tmux/plugins/tpm/scripts/install_plugins.sh &&\n\tcd $MYHOME/.config/tmux/plugins/tmux-thumbs &&\n\texpect -c \"spawn ./tmux-thumbs-install.sh; send \\\"\\r1\\r\\\"; expect complete\" 1> /dev/null\n# nvim\n$ASME mkdir $MYHOME/.local/nvim &&\n\t$ASME git clone --filter=blob:none --single-branch https://github.com/folke/lazy.nvim.git $MYHOME/.local/share/nvim/lazy\n$ASME nvim --headless \"+Lazy! sync\" +qa\n$ASME nvim --headless \"+MasonInstallAll\" +qa\n\n# shellcheck disable=SC2016\necho 'export ZDOTDIR=\"$HOME\"/.config/zsh' >> /etc/zsh/zshenv\n\n_echo \"creating ~src, ~docs, and ~dotfiles aliases\"\nuseradd -g src -d $MYHOME/.local/src src\nuseradd -d $MYHOME/.local/src/dotfiles dotfiles\nuseradd -d $MYHOME/docs docs\n\n_echo \"building mosh\"\n$ASME git clone --depth=1 https://github.com/mobile-shell/mosh.git $MYHOME/.local/src/mosh &&\n\tcd $MYHOME/.local/src/mosh &&\n\tgit fetch origin && git checkout mosh-1.4.0 &&\n\t./autogen.sh &&\n\t./configure &&\n\tmake &&\n\tmake install\n\n_echo \"building clipmenu\"\n$ASME git clone --recurse-submodules git@github.com:xero/clipmenu.git $MYHOME/.local/src/clipmenu &&\n\tcd $MYHOME/.local/src/clipmenu/clipnotify &&\n\tmake install && cd .. && make install &&\n\t$ASME systemctl --user daemon-reload &&\n\t$ASME systemctl --user restart clipmenud.service &> /dev/null\n\n_echo \"setting up kubectx\"\n$ASME git clone --depth=1 https://github.com/ahmetb/kubectx.git $MYHOME/.local/src/kubectx &&\n\tmv $MYHOME/.local/src/kubectx/kubectx $MYHOME/.local/src/kubectx/kubens $MYHOME/.local/bin/ &&\n\tchmod +x $MYHOME/.local/bin/kubens $MYHOME/.local/bin/kubectx\n\n_echo \"setting up k9s\"\n[[ \"$ARCH\" == \"arm\" ]] && PKGARCH=\"arm64\" || PKGARCH=\"amd64\"\n$ASME curl -L \"https://github.com/derailed/k9s/releases/download/v0.27.4/k9s_Linux_${PKGARCH}.tar.gz\" -o $MYHOME/.local/src/k9s.tar.gz &&\n\ttar xzf $MYHOME/.local/src/k9s.tar.gz -C $MYHOME/.local/bin/ k9s &&\n\tchmod +x $MYHOME/.local/bin/k9s &&\n\trm $MYHOME/.local/src/k9s.tar.gz\n\n_echo \"updating fzf\"\n[[ \"$ARCH\" == \"arm\" ]] && PKGARCH=\"arm64\" || PKGARCH=\"amd64\"\n$ASME curl -L \"https://github.com/junegunn/fzf/releases/download/v0.55.0/fzf-0.55.0-linux_${PKGARCH}.tar.gz\" -o $MYHOME/.local/src/fzf.tar.gz\n\ttar xzf $MYHOME/.local/src/fzf.tar.gz -C /usr/bin/ fzf &&\n\tchmod +x /usr/bin/fzf &&\n\trm $MYHOME/.local/src/fzf.tar.gz\n\necho \"updating the aws cli to v2\"\n[[ \"$ARCH\" == \"arm\" ]] && PKGARCH=\"aarch64\" || PKGARCH=\"x86_64\"\ncurl -L \"https://awscli.amazonaws.com/awscli-exe-linux-${PKGARCH}.zip\" -o /tmp/awscliv2.zip &&\n\tcd /tmp && unzip awscliv2.zip &&\n\t./aws/install --bin-dir /usr/bin --install-dir /usr/local/aws-cli --update &&\n\trm /tmp/awscliv2.zip\n\n_echo \"setting up node with nave\"\n$ASME mkdir -p $MYHOME/.config/node\ncurl -L https://raw.githubusercontent.com/isaacs/nave/main/nave.sh > $MYHOME/.local/bin/nave &&\n\tchmod +x $MYHOME/.local/bin/nave &&\n\tNAVE_DIR=\"$MYHOME/.local/lib/nodejs\" $MYHOME/.local/bin/nave usemain lts &&\n\t$ASME npm i -g \\\n\t\tneovim \\\n\t\tsofancy\n\n_echo \"setting up python + pip\"\n$ASME pip3 -V\n$ASME pip3 install --upgrade pip\n$ASME pip3 install --no-warn-script-location \\\n\tboto3 \\\n\tcryptography \\\n\tdocutils \\\n\temoji-fzf \\\n\tgreynoise \\\n\thttps://github.com/PaulSec/API-dnsdumpster.com/archive/master.zip \\\n\tjson-spec \\\n\tmycli \\\n\tneovim \\\n\tpgcli \\\n\tsix \\\n\turllib3 \\\n\twcwidth\n\n_echo \"setting up ascii/ansi art tools\"\nrm -rf /usr/share/figlet/\ngit clone --depth=1 https://github.com/xero/figlet-fonts.git /usr/share/figlet/\n$ASME git clone --depth=1 https://github.com/digitallyserviced/tdfgo.git $MYHOME/.local/src/tdfgo &&\n\tcd $MYHOME/.local/src/tdfgo &&\n\t$ASME go build &&\n\tmv ./tdfgo $MYHOME/.local/bin/tdfgo &&\n\tchmod +x $MYHOME/.local/bin/tdfgo &&\n\tmkdir -p $MYHOME/.config/tdfgo &&\n\tmv ./fonts $MYHOME/.config/tdfgo/fonts\n\n_echo \"updating motd\"\nrm /etc/motd /etc/update-motd.d/*\ncat << 'X0' > /etc/update-motd.d/00-banner\n#!/bin/bash\ndraw() {\n  out=\n  perc=$1\n  size=$2\n  inc=$(( perc * size / 100 ))\n  color=36\n  color2=95\n  for v in $(seq 0 $(( size - 1 ))); do\n    [ \"$v\" -le \"$inc\" ] && out=\"${out}\\e[1;${color}m${FULL}\" || out=\"${out}\\e[0;${color2}m${EMPTY}\"\n  done\n  printf \"$out\"\n}\n\ni=1\nc=$(printf \"\\e[0m\\e[31m‚ñë‚ñí\")\nwhile [ $i -le 6 ];do\n  c=${c}$(printf \"\\e[$((i+41))m\\e[$((i+30))m‚ñà‚ñì‚ñí‚ñë\")\n  i=$((i+1))\ndone\nCOLORS=${c}$(printf \"\\e[37m‚ñà\\e[0m‚ñí‚ñë\")\n\nFULL=‚îÅ\nEMPTY=‚îÑ\nHOST=$(hostname)\nIP=$(curl -s icanhazip.com) #$(hostname -I | cut -d' ' -f1)\nDISTRO=$(grep PRETTY </etc/os-release | sed 's/PRETTY_NAME=//;s/\"//g;s/GNU.Linux / /') # TAKE THAT RMS ;P\nKERNEL=$(uname -r)\nPKGS=$(apt list --installed 2>/dev/null | grep -c 'installed')\nUPTIME=$(uptime -p | cut -d \" \" -f2-)\n[[ ${#UPTIME} -ge 22 ]] && UPTIME=$(echo \"$UPTIME\" | sed 's/ hours/hrs/;s/ minutes/mins/')\n\nc_lvl=$(printf \"%.0f\" `grep 'cpu ' /proc/stat | awk '{usage=($2+$4)*100/($2+$4+$5)} END {print usage}'`)\nCPU=$(printf \"\\e[0;36m%-4s \\e[1;95m%-5s %-25s \\n\" \"cpu\" \"$c_lvl%\" `draw \"$c_lvl\" 18`)\n\nram_lvl=$(free | awk '/Mem:/ {print int($3/$2 * 100.0)}')\nRAM=$(printf \"\\e[0;36m%-4s \\e[1;95m%-5s %-25s \\n\" \"ram\" \"$ram_lvl%\" `draw \"$ram_lvl\" 18`)\n\ndisk_lvl=$(df -h | grep '/$' | tr -s ' ' | cut -d ' ' -f5 | sed 's/%//')\nDISK=$(printf \"\\e[0;36m%-4s \\e[1;95m%-5s %-25s \\n\" \"disk\" \"$disk_lvl%\" `draw \"$disk_lvl\" 18`)\n\nPPID1=$(grep PPid <\"/proc/$PPID/status\" | awk '{ print $2 }')\nPPID2=$(grep PPid <\"/proc/$PPID1/status\" | awk '{ print $2 }')\nUSERNAME=$(pgrep \"$PPID2\" | awk '{ print $6 }' | head -1)\n[ -z \"$USERNAME\" ] && USERNAME=$USER\n\nfiles=0\nIFS=':' read -r -a PATHS <<<\"$PATH\"\nmapfile -t DIRS <<<\"$(printf \"%s\\n\" \"${PATHS[@]}\" | sort -u)\"\nfor d in \"${DIRS[@]}\"; do\n  [ -d \"$d\" ] && { new=$(find \"$d\" -maxdepth 1 -type f -executable -print | wc -l); files=$(( files+new )); }\ndone\n\ncat << EOF\n\n \u001b[37;40m \u001b[95;40m‚ñÑ\u001b[95;45m‚ñà‚ñà\u001b[95;40m‚ñà‚ñà\u001b[37;40m  \u001b[37;40m \u001b[37;40m  \u001b[37;40m \u001b[95;40m‚ñÑ‚ñà\u001b[95;40m‚ñà‚ñà\u001b[95;40m‚ñÑ\u001b[37;40m  \u001b[37;40m\n \u001b[90;40m‚ñÑ‚ñÑ\u001b[37;40m \u001b[95;45m‚ñí‚ñì\u001b[95;45m‚ñà\u001b[37;40m \u001b[90;40m‚ñÑ‚ñÑ\u001b[90;40m‚ñÄ\u001b[37;40m \u001b[95;40m‚ñà\u001b[95;45m‚ñì‚ñë\u001b[37;40m \u001b[95;45m‚ñë‚ñì\u001b[95;40m‚ñà\u001b[37;40m \u001b[90;40m‚ñÄ\u001b[90;40m‚ñÑ‚ñÑ\u001b[37;40m    welcome to \u001b[95;40m$HOST\u001b[37;40m, $USERNAME\n \u001b[36;40m‚ñí‚ñí\u001b[37;40m \u001b[95;45m‚ñë‚ñí\u001b[95;45m‚ñì\u001b[37;40m \u001b[36;40m‚ñí‚ñí\u001b[37;40m \u001b[95;45m‚ñì‚ñì\u001b[95;45m‚ñë\u001b[35;40m‚ñå\u001b[90;40m‚ñÑ\u001b[35;40m‚ñê\u001b[95;45m‚ñë‚ñì\u001b[95;45m‚ñì\u001b[37;40m \u001b[36;40m‚ñí‚ñí $COLORS\n \u001b[90;40m‚ñÄ‚ñÄ\u001b[37;40m \u001b[96;46m‚ñë\u001b[95;45m‚ñë‚ñí\u001b[37;40m \u001b[90;40m‚ñÄ‚ñÄ\u001b[37;40m \u001b[95;45m‚ñì‚ñí\u001b[95;45m‚ñë\u001b[37;40m \u001b[90;40m‚ñÄ\u001b[37;40m \u001b[96;46m‚ñë\u001b[95;45m‚ñí‚ñì\u001b[37;40m \u001b[90;40m‚ñÄ‚ñÄ\u001b[95;40m distro: $DISTRO\n \u001b[34;40m‚ñë‚ñë\u001b[37;40m \u001b[96;46m‚ñë‚ñë\u001b[95;45m‚ñë\u001b[37;40m \u001b[34;40m‚ñë‚ñë\u001b[34;40m‚ñÑ‚ñÑ\u001b[34;40m‚ñÑ‚ñÑ\u001b[37;40m \u001b[34;40m‚ñÄ\u001b[37;40m \u001b[96;46m‚ñë‚ñë\u001b[95;45m‚ñë\u001b[37;40m \u001b[34;40m‚ñë‚ñë\u001b[37;40m kernel: $KERNEL\n \u001b[34;40m‚ñí‚ñí\u001b[37;40m \u001b[96;46m‚ñí‚ñë\u001b[96;46m‚ñë\u001b[37;40m \u001b[34;40m‚ñí‚ñí\u001b[34;40m‚ñì‚ñì\u001b[34;40m‚ñì‚ñì\u001b[37;40m \u001b[96;46m‚ñë‚ñë\u001b[96;46m‚ñë‚ñë\u001b[96;46m‚ñí\u001b[37;40m \u001b[34;40m‚ñí‚ñí\u001b[34;40m public address:  $IP\n \u001b[34;40m‚ñì‚ñì\u001b[37;40m \u001b[96;46m‚ñí‚ñí\u001b[96;46m‚ñë\u001b[37;40m \u001b[34;40m‚ñì‚ñì\u001b[34;40m‚ñÄ‚ñÄ\u001b[34;40m‚ñÄ‚ñÄ\u001b[37;40m \u001b[34;40m‚ñÑ\u001b[37;40m \u001b[96;46m‚ñí‚ñí\u001b[96;46m‚ñì\u001b[37;40m \u001b[34;40m‚ñì‚ñì\u001b[90;40m uptime:  $UPTIME\n \u001b[34;40m‚ñà‚ñà\u001b[37;40m \u001b[96;46m‚ñì‚ñí\u001b[96;46m‚ñí\u001b[37;40m \u001b[34;40m‚ñà‚ñà\u001b[37;40m \u001b[96;46m‚ñì‚ñì\u001b[96;46m‚ñì\u001b[37;40m \u001b[34;40m‚ñì\u001b[37;40m \u001b[96;40m‚ñà‚ñà\u001b[96;40m‚ñì\u001b[37;40m \u001b[34;40m‚ñà‚ñà packages: $PKGS  \u001b[95;40m+  \u001b[34;40m bins: $files\n \u001b[90;40m‚ñÑ‚ñÑ\u001b[37;40m \u001b[96;46m‚ñà‚ñì\u001b[96;46m‚ñì\u001b[37;40m \u001b[90;40m‚ñÑ‚ñÑ\u001b[37;40m \u001b[96;40m‚ñà\u001b[96;46m‚ñì‚ñì\u001b[37;40m \u001b[90;40m‚ñÑ\u001b[37;40m \u001b[96;46m‚ñì‚ñà\u001b[96;46m‚ñà\u001b[37;40m \u001b[90;40m‚ñÑ‚ñÑ $CPU\n \u001b[36;40m‚ñí‚ñí\u001b[37;40m \u001b[96;46m‚ñà‚ñà\u001b[96;46m‚ñì\u001b[37;40m \u001b[36;40m‚ñí‚ñí\u001b[37;40m \u001b[96;40m‚ñà‚ñà\u001b[96;46m‚ñì\u001b[37;40m \u001b[90;40m‚ñÄ\u001b[37;40m \u001b[96;46m‚ñà‚ñà\u001b[96;46m‚ñà\u001b[37;40m \u001b[36;40m‚ñí‚ñí $RAM\n \u001b[90;40m‚ñÄ‚ñÄ\u001b[37;40m \u001b[96;46m‚ñà‚ñà\u001b[96;46m‚ñà\u001b[37;40m \u001b[90;40m‚ñÄ‚ñÄ\u001b[90;40m‚ñÑ\u001b[37;40m \u001b[96;40m‚ñà\u001b[96;46m‚ñà‚ñà\u001b[37;40m \u001b[96;46m‚ñà‚ñà\u001b[96;46m‚ñà\u001b[37;40m \u001b[90;40m‚ñÑ\u001b[90;40m‚ñÄ‚ñÄ $DISK\n \u001b[37;40m \u001b[96;40m‚ñà‚ñà\u001b[96;40m‚ñà‚ñà\u001b[96;40m‚ñà‚ñà\u001b[96;40m‚ñà\u001b[37;40m \u001b[37;40m  \u001b[37;40m \u001b[96;40m‚ñÄ\u001b[96;46m‚ñà‚ñà\u001b[96;46m‚ñà\u001b[96;40m‚ñÄ\u001b[37;40m  \u001b[37;40m \u001b[37;40m  \u001b[37;40m\n\nEOF\nX0\nchmod +x /etc/update-motd.d/00-banner\n\n# run ssh on a non-standard port\n_echo \"setting up ssh\"\necho \"Port $PORT\" >> /etc/ssh/sshd_config\nsystemctl restart ssh.service\nsystemctl restart sshd\n\n_echo \"setting up fail2ban\"\ncp /etc/fail2ban/jail.conf /etc/fail2ban/jail.local\nfail2ban-client reload\n\n_echo \"final user setup stuff\"\ngetfile x0 keys runme runme > $MYHOME/runme\nop signout --account x0 --forget\n$ASME rm $MYHOME/.profile $MYHOME/.bash*\nmv $MYHOME/go $MYHOME/.local/lib/\nmv $MYHOME/.cache $MYHOME/cache\nmv $MYHOME/cache/* $MYHOME/cache\nrm -rf $MYHOME/.npm\nchmod +x $MYHOME/runme\nchown -R $ME:$ME /home/$ME\n\n_echo \"removing default user\"\nuserdel -rf admin &> /dev/null &&\n\trm /etc/sudoers.d/90-cloud-init-users\n\n_echo \"setup complete. rebooting the vps. reconnect as yourself via mosh\"\nIP=$(curl -sL icanhazip.com)\necho \"$HOSTNAME: $ME@$IP:$PORT\"\necho \"mosh location: $(which mosh-server)\"\n\n# self destruct\nsrm -dvrl \"$0\" &> /dev/null\nsystemctl reboot\n"
        },
        {
          "name": "ssh",
          "type": "tree",
          "content": null
        },
        {
          "name": "tmux",
          "type": "tree",
          "content": null
        },
        {
          "name": "wallpaper",
          "type": "tree",
          "content": null
        },
        {
          "name": "xorg",
          "type": "tree",
          "content": null
        },
        {
          "name": "zsh",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}