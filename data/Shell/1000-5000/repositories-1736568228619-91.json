{
  "metadata": {
    "timestamp": 1736568228619,
    "page": 91,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zolrath/wemux",
      "stars": 3635,
      "defaultBranch": "master",
      "files": [
        {
          "name": "MIT-LICENSE",
          "type": "blob",
          "size": 1.0224609375,
          "content": "Copyright 2012 Matt Furden\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\nSoftware), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED AS IS, WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.96484375,
          "content": "![wemux: Multi-User Tmux Sessions Made Easy](http://i.imgur.com/iOjcz.png)\n********************************************************************************\n\nwemux enhances tmux to make multi-user terminal multiplexing both easier and\nmore powerful. It allows users to host a wemux server and have clients join\nin either:\n\n**Mirror Mode** gives clients (another SSH user on your machine) read-only\naccess to the session, allowing them to see you work, or\n\n**Pair Mode** allows the client and yourself to work in the same terminal\n(shared cursor)\n\n**Rogue Mode** allows the client to pair or work independently in another\nwindow (separate cursors) in the same tmux session.\n\nIt features multi-server support as well as user listing\nand notifications when users attach/detach.\n\n## How To Install\n  **IMPORTANT**: Wemux requires tmux version >= 1.6\n  \n### MacPorts (on OS X)\n  If you have [MacPorts](https://www.macports.org/) installed you can\n  install wemux with a very simple:\n\n    sudo port install wemux\n\n### Homebrew (on OS X)\n  If you have [Homebrew](http://mxcl.github.com/homebrew/) installed you can\n  install wemux with a fairly simple:\n\n    brew install wemux\n\n  The user that installed wemux will automatically be added to the wemux host list.\n  To change the host or add more hosts, edit `/usr/local/etc/wemux.conf` and add the\n  username to the host_list array.\n\n  Users in the host_list will be able to start new wemux servers, all other\n  users will be wemux clients and join these servers.\n\n    $ vim /usr/local/etc/wemux.conf\n         OR\n    $ wemux conf\n\n    host_list=(zolrath brocksamson)\n\n### Manual Installation\n  The rest of this readme will operate under the assumption you'll place wemux\n  in `wemux/` in your `/usr/local/share` directory. To make wemux available for\n  all users, perform the following steps, using sudo as required:\n\n  Git clone this repo.\n\n    git clone git://github.com/zolrath/wemux.git /usr/local/share/wemux\n\n  Symlink the `wemux` file into your $PATH via `/usr/local/bin/`,\n  being sure to use the full path.\n\n    ln -s /usr/local/share/wemux/wemux /usr/local/bin/wemux\n\n  **IMPORTANT**: Copy the `wemux.conf.example` file to `/usr/local/etc/wemux.conf`\n\n    cp /usr/local/share/wemux/wemux.conf.example /usr/local/etc/wemux.conf\n\n  Then set a user to be a wemux host by adding their username to the host_list in\n  `/usr/local/etc/wemux.conf`. Users in the host_list will be able to start new wemux\n  servers, all other users will be wemux clients and join these servers.\n\n    vim /usr/local/etc/wemux.conf\n    host_list=(zolrath brocksamson)\n\n  To upgrade to a new version of wemux return to the `/usr/local/share/wemux`\n  directory and perform a `git pull`\n\n## Host Commands\n#### wemux start\n  Use `wemux start` to start a wemux server, chmod /tmp/wemux-wemux to 1777 so\n  that other users may connect to it, and attach to it.  If a wemux server\n  already exists, it will attach to it instead.\n#### wemux attach\n  Use `wemux attach` to attach to an existing wemux server.\n#### wemux stop\n  Use `wemux stop` to kill the wemux server and remove the /tmp/wemux-wemux\n  socket.\n#### wemux kick *username*\n  Use `wemux kick <username>` to kick an SSH user from the server and remove\n  their wemux rogue sessions.\n#### wemux config\n  Use `wemux config` to open `/usr/local/etc/wemux.conf` in your $EDITOR.\n  Note this only works if you have the environment variable EDITOR configured.\n#### wemux\n  When `wemux` is run without any arguments in host mode, it is just like\n  running wemux start.  It will reattach to an existing wemux server if it\n  exists, otherwise it will start a new server.\n\n## Client Commands\n#### wemux mirror\n  Use `wemux mirror` to attach to server in read-only mode.\n#### wemux pair\n  Use `wemux pair` to attach to server in pair mode, allowing the client to \n  control the terminal as well.\n#### wemux rogue\n  Use `wemux rogue` to attach to server in rogue mode, which allows both editing\n  with the host and switching to windows independently from the host.\n#### wemux logout\n  Use `wemux logout` to remove your rogue mode session.\n#### wemux\n  When `wemux` is run without any arguments in client mode, its behavior\n  attempts to intelligently select mirror, pair, or rogue:\n\n  * If the client does not have an existing rogue session it will attach to the\n  wemux server in pair mode.\n  * If the client has already started a wemux rogue session, it will\n  reattach to the server in rogue mode.\n  * If both rogue and pair mode are disabled, it will attach in mirror mode.\n  * By setting `default_client_mode=\"rogue\"` in `wemux.conf` this can be changed\n  to always join in rogue mode, even if a rogue session doesn't already exist.\n\n#### Other Commands\n  wemux passes commands it doesn't understand through to tmux with the correct\n  socket setting.\n\n  `wemux list-sessions` is equivalent to entering `tmux -S /tmp/wemux-wemux\n  list-sessions`\n\n## User List\n  wemux can display a list of connected users, indicating users in mirror mode\n  with [m] at the end of their name.\n\n  If you'd like to see a list of all users currently connected to the wemux\n  server, you have three options:\n\n### wemux users\n  Enter `wemux users` in the terminal to display a list of all currently\n  connected wemux users.\n\n    $ wemux users\n    Users connected to 'wemux':\n      1. zolrath\n      2. csagan[m]\n\n### Status Bar\n  You can add the user list to your status bar by adding #(wemux status_users)\n  where you see fit by editing your `~/tmux.conf` file.\n\n    set -g status-right \"#(wemux status_users)\"\n\n### Display Message\n  If you'd rather display users on command via a tmux message, similar to the\n  user attachment/detachment messages, you can do so by editing your\n  `~/tmux.conf` file.  Pick whatever key you'd like to bind the displaying the\n  message to. Using t as an example:\n\n    unbind t\n    bind t run-shell 'wemux display_users'\n\n  Note that the tmux prefix should be pressed before t to activate the command.\n\n  User listing can be disabled by setting `allow_user_list=\"false\"` in\n  `wemux.conf`\n\n### Short-form Commands\n  All commands have a short form. s for start, a for attach, p for pair etc.\n  For a complete list, type `wemux help` (or `wemux h`)\n\n# Multi-Host Capabilities\n********************************************************************************\n\n  wemux supports specifying the joining different wemux servers via `wemux join\n  <server>`. This allows multiple hosts on the same machine to host their own\n  independent wemux servers with their own clients. By default this option is\n  disabled.\n\n  wemux will remember the last server specified to in order to make reconnecting\n  to the same server easy. `wemux help` will output the currently specified\n  server along with the wemux command list.\n\n  Changing servers can be enabled by setting `allow_server_change=\"true\"` in\n  `/usr/local/etc/wemux.conf`\n\n### Joining Different wemux Servers\n  To change the wemux server run `wemux join <server>`. The name will be sanitized to contain no spaces or uppercase letters.\n\n    $ wemux join Project X\n    Changed wemux server from 'wemux' to 'project-x'\n    $ wemux\n    $ wemux stop\n    $ wemux reset\n    Changed wemux server from 'project-x' to 'wemux'\n\n#### wemux join *servername*\n  Join wemux server with specified name.\n\n    $ wemux join rails\n    Changed wemux server from 'wemux' to 'rails'\n\n#### wemux join *servernumber*\n  Alternatively, enter the server number displayed next to the server name in `wemux list`.\n\n    $ wemux j 1\n    Changed wemux server from 'rails' to 'project-x'\n\n#### wemux join\n  Join with no argument simply displays the current wemux server, if you're into that.\n\n    $ wemux join\n    Current wemux server: wemux\n\n### Resetting the Server Name\n  In order to easily return to the default server you can run `wemux reset`\n#### wemux reset\n  Joins the default wemux server: wemux (or value of default_server_name in wemux.conf)\n\n    $ wemux reset\n    Changed wemux server from 'project-x' to 'wemux'\n\n### Active Server List\n  To list the name of all currently running wemux servers run `wemux list`\n#### wemux list\n  List all currently active wemux servers.\n\n    $ wemux list\n    Currently active wemux servers:\n      1. project-x\n      2. rails\n      3. wemux    <- current server\n\n  `wemux join` and `wemux stop` both accept either the name of a server or\n  the number indicated next to the name in `wemux list`.\n\n  Listing servers can be disabled by setting `allow_server_list=\"false\"` in\n  `/usr/local/etc/wemux.conf`\n\n# Configuration\n********************************************************************************\n\n  There are a number of additional options that be configured in\n  `/usr/local/etc/wemux.conf`.  In most cases the only option that must be changed is the\n  `host_list` array. To open your wemux configuration file, you can either open\n  `/usr/local/etc/wemux.conf` manually or run `wemux config`\n\n### Host Mode\n  To have an account act as host, ensure that you have added their username to the\n  `/usr/local/etc/wemux.conf` file's `host_list` array.\n\n    host_list=(zolrath hostusername brocksamson)\n\n### Pair Mode\n  Pair mode can be disabled, only allowing clients to attach to the server in\n  mirror mode by setting `allow_pair_mode=\"false\"`\n\n### Rogue Mode\n  Rogue mode can be disabled, only allowing clients to attach to the server in\n  mirror or pair mode by setting `allow_rogue_mode=\"false\"`\n\n### Default Client Mode\n When clients enter 'wemux' with no arguments by default it will first attempt to\n join an existing rogue mode session. If there is no rogue session it will start\n in pair mode.\n By setting default_client_mode to \"rogue\", 'wemux' with no arguments will always\n join a rogue mode session, even if it has to create it.\n\n  This can be changed by setting `default_client_mode=\"rogue\"`\n\n### Default Server Name\n  The default wemux server name will be used with `wemux reset` and when\n  `allow_server_name` is not enabled in `wemux.conf`.\n\n  This can be changed by setting `default_server_name=\"customname\"`\n\n### Changing Servers\n  The ability to change servers can be enabled by setting\n  `allow_server_change=\"true\"`\n\n### Listing Servers\n  Listing servers can be disabled by setting `allow_server_list=\"false\"`\n\n### Listing Users\n  Listing users can be disabled by setting `allow_user_list=\"false\"` in\n  `wemux.conf`\n\n### Kicking SSH Users\n  Kicking SSH users from the server can be disabled by setting\n  `allow_kick_user=\"false\"` in `wemux.conf`\n\n### Announcements\n  When a user joins a server in either mirror, pair, or rogue mode, a message is\n  displayed to all currently attached users:\n\n    csagan has attached in mirror mode.\n    csagan has detached.\n\n This can be disabled by setting `announce_attach=\"false\"`\n\n In addition, when a user switches from one server to another via the `wemux\n join <servername>` command, their movement is displayed similarly to the\n attach messages.\n\n  If csagan enters `wemux join applepie` the users on the default server\n  `wemux` will see:\n\n    csagan has switched to server: applepie\n\n  If csagan returns to default server with: `wemux reset` users on `wemux`\n  will see:\n\n    csagan has joined this server.\n\n  This can be disabled by setting `announce_server_change=\"false\"`\n\n### Automatic SSH Client Modes\n  To make an SSHed user start in a wemux mode automatically, add one of the\n  following lines to the users `.bash_profile` or `.zshrc`\n\n  **Option 1**: Automatically log the client into mirror mode upon login,\n  disconnect them from the server when they detach.\n\n    wemux mirror; exit\n\n  **Option 2**: Automatically start the client in mirror mode but allow them to\n  detach.\n\n    wemux mirror\n\n  **Option 3**: Automatically start the client in pair mode but allow them to\n  detach.\n\n    wemux pair\n    \n  **Option 4**: Automatically start the client in rogue mode but allow them to\n  detach.\n\n    wemux rogue\n\n  **Option 5**: Only display the connection commands, don't automatically start\n  any modes.\n\n    wemux help\n\n  Please note that this does not ensure a logged in user will not be able to exit\n  tmux and access their shell. If the user is not trusted, you must perform any\n  security measures one would normally perform for a remote user.\n"
        },
        {
          "name": "man",
          "type": "tree",
          "content": null
        },
        {
          "name": "wemux",
          "type": "blob",
          "size": 27.0947265625,
          "content": "#!/usr/bin/env bash\n# wemux by Matt Furden @zolrath\n#\n# wemux allows you to start a shared tmux session using the command 'wemux'.\n# Clients have the option of:\n# Mirroring, which will give them read-only access,\n# Pairing, which will allow them to control the hosts cursor.\n# Rogue mode, which  allows them to work in the same window (shared cursor) or\n# in another window (separate cursors) in the hosts tmux session.\n#\n# To set a user as host add their username to the host_list in the configuration\n# file located at /usr/local/etc/wemux.conf\n# Other configuations options are also located in /usr/local/etc/wemux.conf\n#\n# For environments with multiple hosts running their own independent servers\n# on the same machine wemux can join different servers with the wemux join\n# command, if enabled. This can be enabled in the configuration file.\n#\n# WEMUX HOST COMMANDS:\n# wemux start : Start the wemux server/join an existing wemux server.\n# wemux attach: Join an existing wemux server.\n# wemux stop  : Stop the wemux server.\n# wemux users : List the currently attached wemux users.\n# wemux kick  : Disconnect an SSH user, remove their wemux server.\n# wemux config: Open the wemux configuration file in your $EDITOR.\n# wemux help  : Display the help screen.\n#\n# WEMUX CLIENT COMMANDS:\n# wemux mirror: Attach to Host in read-only mode.\n# wemux pair  : Attach to Host in pair mode, which allows editing.\n# wemux rogue : Attach to Host in rogue mode, which allows editing and switching\n#               to windows independently from the host.\n# wemux logout: Log out of the wemux rogueing session.\n# wemux users : List the currently attached wemux users.\n# wemux help  : Display the help screen.\n#\n# To enable multi-host commands, set allow_server_change=\"true\" in wemux.conf\n# WEMUX SESSION COMMANDS: can be run by either host or client.\n# wemux join  : Join wemux server with supplied name.\n# wemux reset : Join default wemux server: wemux\n# wemux list  : List all currently active wemux servers.\n\n###############################################################################\n\n# Current wemux version.\nversion=\"3.2.0\"\n\n# Setup and Configuration Files.\n# Default settings, modify them in the /usr/local/etc/wemux.conf file:\nhost_list=(change_this_in_wemux_conf)\nhost_groups=()\nsocket_prefix=\"/tmp/wemux\"\noptions=\"-u\"\nallow_pair_mode=\"true\"\nallow_rogue_mode=\"true\"\ndefault_client_mode=\"mirror\"\nallow_kick_user=\"true\"\nallow_server_change=\"false\"\ndefault_server_name=\"wemux\"\nallow_server_list=\"true\"\nallow_user_list=\"true\"\nannounce_attach=\"true\"\nannounce_server_change=\"true\"\n\n# Prevent users from changing their $USER env variable to become host.\nusername=`whoami`\n# Set $EDITOR default to vi if not configured on host machine.\neditor=${EDITOR:=\"vi\"}\n\n# Load configuration options from /usr/local/etc/wemux.conf\n[ -f /usr/local/etc/wemux.conf ] && . /usr/local/etc/wemux.conf\n\n# Sanitize server name, replace spaces and underscores with dashes.\n# Remove all non alpha-numeric characters, convert to lowercase.\nsanitize_server_name() {\n  local new_server=$@\n  local new_server=${new_server// /\\-}\n  local new_server=${new_server//_/\\-}\n  local new_server=${new_server//[^a-zA-Z0-9\\-]/}\n  local new_server=`echo \"$new_server\" | tr '[A-Z]' '[a-z]'`\n  echo \"$new_server\"\n}\n\n# Load the server name of last wemux server. If empty, set to 'wemux'.\n# Ensure server name is 'wemux' if allow_server_change is disabled.\n# If default_server_name is set in wemux.conf it will be used instead of 'wemux'\nload_server_name() {\n  if [ \"$allow_server_change\" == \"true\" ]; then\n    if [ -f ~/.wemux_last_server ]; then\n      unclean_server=`cat ~/.wemux_last_server`\n      # Sanitize loaded server name.\n      server=`sanitize_server_name $unclean_server`\n      if ! [[ $unclean_server == $server ]]; then\n        echo \"$server\" > ~/.wemux_last_server\n      fi\n    else\n      # If ~/.wemux_last_server doesn't exist set to default_server_name\n      server=\"$default_server_name\"\n    fi\n  else\n    # If allow_server_change is disabled, set to default_server_name\n    server=\"$default_server_name\"\n  fi\n}\n\n# Build $wemux variable to call proper tmux server.\nbuild_wemux_prefix() {\n  load_server_name\n  # Set client's rogue mode session name.\n  client_session=\"$server-$username\"\n  # Set socket to include server name.\n  socket=\"${socket_prefix}-$server\"\n  # Set $wemux to wemux server socket.\n  wemux=\"tmux -S $socket $options\"\n}\n\n# List all currently running wemux servers.\nlist_active_servers() {\n  if [ \"$allow_server_change\" == \"true\" ]; then\n    if [ \"$allow_server_list\" == \"true\" ]; then\n      wemux_server_sockets=$socket_prefix*\n      for wemux_server in $wemux_server_sockets; do\n        redirect=`tmux -S $wemux_server server-info 2>&1`; server_running=$?\n        # Number each active server, give it its own line.\n        if [ \"$server_running\" == 0 ]; then\n          num=$[num+1]\n          server_name=`echo \"$wemux_server\" | sed -e \"s,$socket_prefix-,,\"`\n          # Add indicator for current wemux server.\n          if [ \"$server_name\" == \"$server\" ]; then\n            server_name=\"$server_name    <- current server\"\n          fi\n          server_list=\"$server_list  $num. $server_name\\n\"\n        fi\n      done\n      if [ -z \"$server_list\" ]; then\n        echo \"No wemux servers currently active.\"\n      else\n        echo \"Currently active wemux servers:\"\n        # Remove last newline\n        echo -e \"${server_list%??}\"\n      fi\n    # allow_server_list is disabled:\n    else\n      echo \"Server listing has been disabled.\"\n      return 126\n    fi\n  # allow_server_change is disabled:\n  else\n    echo \"Server related commands have been disabled.\"\n    return 126\n  fi\n}\n\n# List users currently attached to wemux server. Username[m] for mirror mode.\n# Only contains names. Formatted for being included as part of status bar.\nstatus_users() {\n  if [ \"$allow_user_list\" == \"true\" ]; then\n    while IFS= read line; do\n      read tty mode <<<$(echo $line)\n      # Get user associated with tty\n      name=`stat -f%Su $tty 2>/dev/null` || name=`stat -c%U $tty 2>/dev/null`\n      # If user is attached in read-only mode, set mode to [m]\n      [[ $mode == \"(ro)\" ]] && mode=\"[m]\" || mode=\"\"\n      # If user/mode is already is userlist, do not add them again.\n      if ! [[ \"$users\" =~ \"$name$mode,\" ]]; then\n        users=\"$users$name$mode, \"\n      fi\n    done < <(wemux list-clients | cut -f1,6 -d ' ' | sed s/://)\n    # Strip last two characters ', '\n    echo \"${users%??}\"\n  else\n    echo \"User list disabled.\"\n    return 126\n  fi\n}\n\nlist_all_users() {\n  if [ \"$allow_user_list\" == \"true\" ]; then\n      wemux_server_sockets=$socket_prefix*\n      for wemux_server in $wemux_server_sockets; do\n        server_running=`tmux -S $wemux_server list-clients`\n        if [[ \"$server_running\" ]] && [[ \"$server_running\" != *\"failed to connect\"* ]]; then\n          server_name=`echo \"$wemux_server\" | sed -e \"s,$socket_prefix-,,\"`\n          echo \"Users connected to '$server_name':\"\n          # Get list of users with status_users function.\n          while IFS= read line; do\n            read tty mode <<<$(echo $line)\n            # Get user associated with tty\n            name=`stat -f%Su $tty 2>/dev/null` || name=`stat -c%U $tty 2>/dev/null`\n            # If user is attached in read-only mode, set mode to [m]\n            [[ $mode == \"(ro)\" ]] && mode=\"[m]\" || mode=\"\"\n            # If user/mode is already is userlist, do not add them again.\n            user=\"$name$mode\"\n            num=$[num+1]\n            echo \"  $num. $user\"\n          done < <(tmux -S $wemux_server list-clients -F '#{client_tty}')\n        fi\n      done\n  else\n    echo \"User listing has been disabled.\"\n  fi\n}\n\n# List users currently attached to wemux server with informative string.\n# More verbose, intended for use in terminal.\nlist_users() {\n  if [ \"$allow_user_list\" == \"true\" ]; then\n    redirect=`wemux server-info 2>&1`; server_running=$?\n    if [ \"$server_running\" == 0 ]; then\n      # Get list of users with status_users function.\n      users=\"$(wemux status_users)\"\n      # Number each user, give it its own line.\n      for user in $users; do\n          num=$[num+1]\n          user=`echo \"$user\" | sed -e \"s/,//\"`\n          user_list=\"$user_list  $num. $user\\n\"\n      done\n      if [ -z \"$user_list\" ]; then\n        echo \"No wemux users attached to '$server'.\"\n      else\n        echo \"Users attached to '$server': \"\n        # Remove last newline.\n        echo -e \"${user_list%??}\"\n      fi\n    else\n      echo \"No wemux server running on '$server'. No server, no users!\"\n    fi\n  else\n    echo \"User listing has been disabled.\"\n  fi\n}\n\n# Display the currently attached users verbosely in a tmux message.\ndisplay_users() {\n    redirect=`$wemux display-message \"$(wemux users)\" 2>&1`\n}\n\n# Returns the host's tty and server name.\nget_host_session() {\n  redirect=`wemux server-info 2>&1`; server_running=$?\n  if [ \"$server_running\" == 0 ]; then\n    while read line; do\n      read tty current_session <<<$(echo $line)\n      # Get user associated with tty\n      name=`stat -f%Su $tty 2>/dev/null` || name=`stat -c%U $tty 2>/dev/null`\n      if [[ $name == $username ]]; then\n        host=$tty\n        host_session=$current_session\n      fi\n    done < <(wemux list-clients -F '#{client_tty}')\n  echo \"$host $host_session\"\n  fi\n}\n\n# Toggles mirrored users to pair mode, pair mode to mirrored.\nmirror_toggle() {\n  get_host_session > read host host_session\n  while read tty; do\n    if ! [[ $tty == $host ]]; then\n      redirect=`$wemux switch-client -c $tty -t $host_session -r 2>&1`\n    fi\n  done < <(wemux list-clients -F '#{client_tty}')\n}\n\n# Set all users to mirror mode on the hosts current session\nmirror_all_users() {\n  get_host_session > read host host_session\n  while read line; do\n    read tty mode <<<$(echo $line)\n    if ! [[ $tty == $host ]] && [[ $mode == \"(ro)\" ]]; then\n      redirect=`$wemux switch-client -c $tty -t $host_session 2>&1`\n    elif ! [[ $tty == $host ]]; then\n      redirect=`$wemux switch-client -c $tty -t $host_session -r 2>&1`\n    fi\n  done < <(wemux list-clients -F '#{client_tty}')\n}\n\n# Make all users join the hosts session.\nsummon_all_users() {\n  get_host_session > read host host_session\n  while read tty; do\n    if ! [[ $tty == $host ]]; then\n      $wemux switch-client -c $tty -t $host_session\n    fi\n  done < <(wemux list-clients -F '#{client_tty}')\n}\n\n# Make all mirrored users join the hosts session.\nsummon_mirrored() {\n  get_host_session > read host host_session\n  while read line; do\n    read tty mode <<<$(echo $line)\n    if ! [[ $tty == $host ]] && [[ $mode == \"(ro)\" ]]; then\n      $wemux switch-client -c $tty -t $host_session\n    fi\n  done < <(wemux list-clients -F '#{client_tty}')\n}\n\n# The ugly group of redirects below solve the issue where tmux/epoll causes tmux\n# to hang when stderr is redirected to /dev/null in a backwards compatible way.\n\n# Returns true if host currently has a running wemux session.\nsession_exists() {\n  redirect=`$wemux has-session -t $server 2>&1`; does_exist=$?\n  [ \"$does_exist\" == 0 ] && return 0 || return 1;\n}\n\n# Returns true if rogue session with current host already exists.\nhas_rogue_session() {\n  redirect=`$wemux has-session -t $client_session 2>&1`; does_exist=$?\n  [ \"$does_exist\" == 0 ] && return 0 || return 1;\n}\n\n# Returns true if server is successfully killed.\nkill_server_successful() {\n  redirect=`tmux -S $socket kill-server 2>&1`; killed_successfully=$?\n  [ \"$killed_successfully\" == 0 ] && return 0 || return 1;\n}\n\n# Announce when user attaches/detaches from server.\n# Can be disabled by changing announce_attach to false in /usr/local/etc/wemux.conf\n# The first argument specifies the mode the user is attaching in for the message\n# All additional arguments get wrapped in the attach/detach messages.\nannounce_connection() {\n  connection_type=$1; shift; attach_commands=\"$@\"\n  [ \"$announce_attach\" == \"true\" ] && redirect=`$wemux display-message \\\n    \"$username has attached in $connection_type mode.\" 2>&1`\n  $attach_commands\n  status=$?\n  [ \"$announce_attach\" == \"true\" ] && redirect=`$wemux display-message \\\n    \"$username has detached.\" 2>&1`\n  return $status\n}\n\n# Announces when a user joins/changes their server.\n# Can be disabled by changing announce_server_change to false in /usr/local/etc/wemux.conf\n# Change server name for server, or display server name if no argument is given.\nchange_server() {\n  if [ \"$allow_server_change\" == \"true\" ]; then\n    # Sanitize input.\n    new_server=`sanitize_server_name $@`\n    old_server=$server\n\n    # Get list of currently running servers\n    server_names=(`echo $socket_prefix* | sed -e \"s,$socket_prefix-,,g\"`)\n    # If user joins a number, go to the server with that number in `wemux list`\n    [[ \"$new_server\" =~ ^[0-9]+$ ]] && new_server=${server_names[$new_server-1]}\n\n    if [ -z \"$new_server\" ]; then\n      echo \"Current wemux server: $server\"\n    elif [ \"$new_server\" == \"$old_server\" ]; then\n      echo \"Your wemux server is already set to '$server'\"\n    else\n      # Announce that the user has changed servers to current server.\n      [ \"$announce_server_change\" == \"true\" ] && redirect=`$wemux display-message \\\n        \"$username has switched to server: $new_server\" 2>&1`\n      echo \"Changed wemux server from '$old_server' to '$new_server'\"\n      echo $new_server > ~/.wemux_last_server\n      # Rebuild wemux prefix for new server name.\n      build_wemux_prefix\n      # Announce that the user has joined to new server.\n      [ \"$announce_server_change\" == \"true\" ] && redirect=`$wemux display-message \\\n        \"$username has joined this server\" 2>&1`\n    fi\n  else\n    echo \"Changing wemux servers has been disabled.\"\n    return 126\n  fi\n  return 0\n}\n\n# Display version of wemux installed on system. Show URL for wemux.\ndisplay_version() {\n  echo \"wemux $version\"\n  echo \"To check for a newer version visit: http://www.github.com/zolrath/wemux\"\n}\n\n# Host mode, used when user is listed in the host_list array in /usr/local/etc/wemux.conf\nhost_mode() {\n  # Start the server if it doesn't exist, otherwise reattach.\n  start_server() {\n    if ! session_exists; then\n      $wemux new-session -d -s $server\n      # Open tmux socket to all users to allow clients to connect.\n      chmod 1777 $socket\n      echo \"wemux server started on '$server'.\"\n    fi\n    reattach\n  }\n\n  # Reattach to the wemux server.\n  reattach() {\n    if session_exists; then\n      $wemux attach -t $server\n    else\n      echo \"No wemux server to attach to on '$server'.\"\n    fi\n  }\n\n  # Kick an SSH user off the server and remove their rogue session if it exists.\n  kick_user() {\n    if [ \"$allow_kick_user\" == \"true\" ]; then\n      kicked_user=$1\n      echo \"Kicking $kicked_user from the server. Sudo required.\"\n      # Get sshd process with users name and get its PID.\n      user_pid=`sudo lsof -t -u $kicked_user -c sshd -a`\n      # Kill the sshd process of the supplied user.\n      redirect=`sudo kill -9 $user_pid 2>&1`; kicked_successfully=$?\n      # Remove any tmux sessions ending in \"-kicked_user\"\n      `wemux kill-session -t \"*-$kicked_user\" > /dev/null 2>&1`\n      if [ \"$kicked_successfully\" == 0 ]; then\n        echo \"$kicked_user kicked successfully!\"\n      else\n        echo \"$kicked_user was not kicked. Are you sure they're connected?\"\n      fi\n    else\n      echo \"Kicking users has been disabled.\"\n    fi\n  }\n\n  # Stop the wemux session and remove the socket file.\n  stop_server() {\n    server_sockets=(`echo $socket_prefix*`)\n    # If a specific server is supplied:\n    if [ $1 ]; then\n      # If user enters a number, stop the server with that number in `wemux list`\n      if [[ $@ =~ ^[0-9]+$ ]]; then\n        socket=${server_sockets[$1-1]}\n        server=`echo $socket | sed -e \"s,$socket_prefix-,,g\"`\n      # Otherwise, stop the server with the supplied name.\n      else\n        server=`sanitize_server_name $@`\n        socket=\"$socket_prefix-$server\"\n      fi\n    fi\n    # If the user doesn't pass an argument, stop current server.\n    if kill_server_successful; then\n      echo \"wemux server on '$server' stopped.\"\n    else\n      echo \"No wemux server running on '$server'\"\n    fi\n    # If the socket file exists:\n    if [ -e \"$socket\" ]; then\n      if ! rm $socket; then\n        echo \"Could not remove '$socket'. Please check file ownership.\"\n      fi\n    fi\n  }\n\n  # Display the commands available in host mode.\n  display_host_commands() {\n    echo \"wemux version $version\"\n    if [ \"$allow_server_change\" == \"true\" ]; then\n      echo \"Current wemux server: $server\"\n    fi\n    echo \"\"\n    echo \"Usage: wemux [command]\"\n    echo \"To host a wemux server please use one of the following:\"\n    echo \"\"\n    echo \"    [s]       start: Start the wemux server/attach to an existing wemux server.\"\n    echo \"    [a]      attach: Attach to an existing wemux server.\"\n    echo \"    [k]        stop: Kill the wemux server '$server', delete its socket.\"\n    echo \"\"\n    if [ \"$allow_server_change\" == \"true\" ]; then\n      echo \"    [j] join [name]: Join the specified wemux server.\"\n      echo \"    [j]        join: Display the current wemux server.\"\n      echo \"    [d]       reset: Join default wemux server: $default_server_name\"\n      if [ \"$allow_server_list\" == \"true\" ]; then\n        echo \"    [l]        list: List all currently active wemux servers.\"\n      fi\n    fi\n    if [ \"$allow_user_list\" == \"true\" ]; then\n      echo \"    [u]       users: List all users currently attached to '$server'\"\n    fi\n    if [ \"$allow_kick_user\" == \"true\" ]; then\n      echo \"               kick: Disconnect an SSH user, remove their wemux server.\"\n    fi\n    echo \"\"\n    echo \"    [c]      config: Open the wemux configuration file in $EDITOR.\"\n    echo \"    [h]        help: Display this screen.\"\n    echo \"            no args: Start the wemux server/attach to an existing wemux server.\"\n  }\n\n  # Host mode command handling:\n  # If no command given, call start server.\n  if [ -z \"$1\" ]; then\n    announce_connection \"host\" start_server\n  else\n    case \"$1\" in\n      start|s)        announce_connection \"host\" start_server;;\n      attach|a)       announce_connection \"host\" reattach;;\n      stop|st)        shift; stop_server \"$@\";;\n      kill|k)         shift; stop_server \"$@\";;\n      help|h)         display_host_commands;;\n      join|j)         shift; change_server \"$@\";;\n      name|n)         shift; change_server \"$@\";;\n      reset|d)        change_server \"$default_server_name\";;\n      list|l)         list_active_servers;;\n      users|u)        list_all_users;;\n      summon)         summon_mirrored;;\n      summon_all)     summon_all_users;;\n      setmirrored)    mirror_all_users;;\n      togglemirrored) mirror_toggle;;\n      kick)           kick_user $2;;\n      status_users)   status_users;;\n      display_users)  display_users;;\n      version|v)      display_version;;\n      conf*|c)        $editor /usr/local/etc/wemux.conf;;\n      *)              if ! $wemux \"$@\"; then\n                        echo \"To see a list of wemux commands enter 'wemux help'\"\n                        exit 127\n                      fi;;\n    esac\n  fi\n}\n\n# Client Mode, used when user is NOT listed in the host_list in /usr/local/etc/wemux.conf\nclient_mode() {\n  # Mirror mode, allows the user to view wemux server in read only mode.\n  mirror_mode() {\n    if session_exists; then\n      $wemux attach -t $server -r\n    else\n      echo \"No wemux server to mirror on '$server'.\"\n      return 126\n    fi\n  }\n\n  # Pair mode, allows user to interact with wemux server.\n  pair_mode() {\n    if [ \"$allow_pair_mode\" == \"true\" ]; then\n      if session_exists; then\n        $wemux attach -t $server\n      else\n        echo \"No wemux server to pair with on '$server'.\"\n        return 126\n      fi\n    else\n      echo \"Pair mode is disabled.\"\n      return 126\n    fi\n  }\n\n  # Rogue mode, allows user to interact with wemux server and operate\n  # independently in other windows.\n  # Will connect to existing rogue session or create one if necessary.\n  rogue_mode() {\n    if [ \"$allow_rogue_mode\" == \"true\" ]; then\n      if has_rogue_session; then\n        $wemux attach -t $client_session\n      elif session_exists; then\n        $wemux new-session -d -t $server -s $client_session\n        $wemux new-window -n $username\n        $wemux send-keys -t $client_session $@\n        $wemux attach -t $client_session\n      else\n        echo \"No wemux server to go 'rogue' with on '$server'.\"\n        return 126\n      fi\n    else\n      echo \"Rogue mode is disabled.\"\n      return 126\n    fi\n  }\n\n  # Log user out of rogue mode, removing their session..\n  logout_rogue() {\n    if [ \"$allow_rogue_mode\" == \"true\" ]; then\n      if has_rogue_session; then\n        [ \"$announce_attach\" == \"true\" ] && $wemux display-message \\\n          \"$username has logged out of rogue mode.\"\n        $wemux kill-session -t $client_session\n        echo \"Logged out of rogue mode on '$server'.\"\n      else\n        echo \"No wemux server to log out of on '$server'.\"\n        return 126\n      fi\n    else\n      echo \"Rogue mode is disabled.\"\n      return 126\n    fi\n  }\n\n  send() {\n    if [ \"$allow_pair_mode\" == \"true\" -o \"$allow_rogue_mode\" == \"true\" ]; then\n      $wemux \"$@\"\n    else\n      echo \"Pairing and Rogue mode are off, sending is disabled.\"\n    fi\n  }\n\n  smart_reattach() {\n    # If default_client_mode has been set to \"rogue\" in wemux.conf:\n    if [ \"$default_client_mode\" == \"rogue\" ] && [ \"$allow_rogue_mode\" == \"true\" ]; then\n      announce_connection \"rogue\" rogue_mode\n    # If default_client_mode has been set to \"pair\" in wemux.conf:\n    elif [ \"$default_client_mode\" == \"pair\" ] && [ \"$allow_pair_mode\" == \"true\" ]; then\n      announce_connection \"pair\" pair_mode\n    elif has_rogue_session && [ \"$allow_rogue_mode\" == \"true\" ]; then\n      announce_connection \"rogue\" rogue_mode\n    elif [ \"$allow_pair\" == \"true\" ]; then\n      announce_connection \"pair\" pair_mode\n    elif session_exists; then\n      announce_connection \"mirror\" $wemux attach -t $server -r\n    else\n      echo \"No wemux server to attach to on '$server'\"\n      return 126\n    fi\n  }\n\n  # Display the commands available in client mode.\n  display_client_commands() {\n    echo \"wemux version $version\"\n    if [ \"$allow_server_change\" == \"true\" ]; then\n      echo \"Current wemux server: $server\"\n    fi\n    echo \"\"\n    echo \"Usage: wemux [command]\"\n    echo \"To connect to wemux please use one of the following:\"\n    echo \"\"\n    echo \"    [m]      mirror: Attach to '$server' in read-only mode.\"\n    if [ \"$allow_pair_mode\" == \"true\" ]; then\n      echo \"    [p]        pair: Attach to '$server' in pair mode, which allows editing.\"\n    fi\n    if [ \"$allow_rogue_mode\" == \"true\" ]; then\n      echo \"    [r]       rogue: Attach to '$server' in rogue mode, allowing you to pair\"\n      echo \"                     and also work in other windows independent of the host.\"\n      echo \"    [o]      logout: Log out of the current wemux rogue session.\"\n    fi\n    echo \"\"\n    if [ \"$allow_server_change\" == \"true\" ]; then\n      echo \"    [j] join [name]: Join the specified wemux server.\"\n      echo \"    [j]        join: Display the current wemux server.\"\n      echo \"    [d]       reset: Join default wemux server: $default_server_name\"\n      if [ \"$allow_server_list\" == \"true\" ]; then\n        echo \"    [l]        list: List all currently active wemux servers.\"\n      fi\n    fi\n    if [ \"$allow_user_list\" == \"true\" ]; then\n      echo \"    [u]       users: List all users currently attached to '$server'\"\n    fi\n    echo \"\"\n    echo \"    [h]        help: Display this screen.\"\n    if [ \"$default_client_mode\" == \"rogue\" ] && [ \"$allow_rogue_mode\" == \"true\" ]; then\n      echo \"            no args: Attach to '$server' in rogue mode.\"\n    elif [ \"$default_client_mode\" == \"pair\" ] && [ \"$allow_pair_mode\" == \"true\" ]; then\n      echo \"            no args: Attach to '$server' in pair mode.\"\n    elif [ \"$allow_rogue_mode\" == \"true\" ] &&  [ \"$allow_pair_mode\" == \"true\" ]; then\n      echo \"            no args: Attach to rogue session on '$server' if it already exists,\"\n      echo \"                     otherwise, attach in pair mode.\"\n    elif [ \"$allow_rogue_mode\" == \"true\" ] &&  [ \"$allow_pair_mode\" == \"false\" ]; then\n      echo \"            no args: Attach to rogue session on '$server' if it already exists,\"\n      echo \"                     otherwise, attach in mirror mode.\"\n    elif [ \"$allow_pair_mode\" == \"true\" ]; then\n      echo \"            no args: Attach to '$server' in pair mode.\"\n    else\n      echo \"            no args: Attach to '$server' in mirror mode.\"\n    fi\n  }\n\n  # Client mode command handling:\n  # If no command given, call smart_reattach\n  if [ -z \"$1\" ]; then\n    smart_reattach\n  else\n    case \"$1\" in\n      mirror|m)      announce_connection \"mirror\" mirror_mode;;\n      pair|p)        announce_connection \"pair\" pair_mode;;\n      rogue|r)       shift; announce_connection \"rogue\" rogue_mode $@;;\n      edit|e)        announce_connection \"rogue\" rogue_mode;;\n      logout|o)      logout_rogue;;\n      stop|s)        logout_rogue;;\n      help|h)        display_client_commands;;\n      join|j)        shift; change_server \"$@\";;\n      name|n)        shift; change_server \"$@\";;\n      reset|d)       change_server \"$default_server_name\";;\n      list|l)        list_active_servers;;\n      users|u)       list_users;;\n      status_users)  status_users;;\n      display_users) display_users;;\n      version|v)     display_version;;\n      send)          send $@;;\n      *)             if ! $wemux \"$@\"; then\n                       echo \"To see a list of wemux commands enter 'wemux help'\"\n                       exit 127\n                     fi;;\n    esac\n  fi\n}\n\n# Determine the groups the user belongs to\ngroups_for_user() {\n  echo $(groups $username | awk -F: \"{print \\$NF}\");\n}\n\n# Check if current user is listed in the host_list.\nuser_is_a_host() {\n  for user in \"${host_list[@]}\"; do\n    [[ \"$user\" == \"$username\" ]] && return 0\n  done\n\n  # If the user is not in the host list, check their groups\n  user_groups=\"$(groups_for_user)\";\n  for group in ${host_groups[@]}; do\n    group_re=\"\\\\b${group}\\\\b\"\n    if [[ $user_groups =~ $group_re ]]; then\n      return 0\n    fi\n  done\n\n  return 1\n}\n\n\nallowed_nested_command() {\n  commands=(togglemirrored setmirrored summon summon_all send users u list l display_users\n  status_users list-clients kill-sesssion kick version v)\n  for command in \"${commands[@]}\"; do\n    [[ \"$command\" == \"$1\" ]] && return 0\n  done\n  return 1\n}\n# Create $wemux variable.\n\nbuild_wemux_prefix\n\n# Don't allow wemux to be run directly within a wemux server.\nif [[ \"$TMUX\" != *$socket* ]] || allowed_nested_command \"$1\" ; then\n  # Allow manual override to operate in client mode.\n  if [ \"$1\" = \"client\" ]; then\n    shift; client_mode \"$@\"\n  else\n    # If user is in host list, use host mode. If not, use client mode.\n    if user_is_a_host; then\n      host_mode \"$@\"\n    else\n      client_mode \"$@\"\n    fi\n  fi\nelif [[ $@ == \"help\" ]] || [[ $@ == \"h\" ]]; then\n  echo \"Most wemux commands can only be run while detached from tmux.\"\n  echo \"The commands that are available while attached are:\"\n  echo \"\"\n  echo \"HOST ONLY COMMANDS:\"\n  echo \"    [s]      summon: Summon all mirrored users to your current session.\"\n  echo \"          summonall: Summon all users to your current session.\"\n  echo \"        setmirrored: Set all users to mirror mode to your current session.\"\n  echo \"     togglemirrored: Toggle users between mirror/pair mode.\"\n  echo \"        kick [user]: Kick specified user from the server.\"\n  echo \"\"\n  echo \"GENERAL COMMANDS:\"\n  echo \"    [u]  users: List all attached users\"\n  echo \"    [l]   list: List all wemux servers\"\nelse\n  echo \"You're already attached to the wemux server on '$server'\"\n  echo \"wemux does not allow nesting wemux servers directly.\"\nfi\n"
        },
        {
          "name": "wemux.conf.example",
          "type": "blob",
          "size": 2.572265625,
          "content": "## wemux Configuration:\n## wemux version 3.2.0\n##\n## Uncomment an option (remove the # in front of it) if you would like to change\n## the option from its default setting.\n\n####### HOST OPTIONS #######\n\n## All usernames in host_list will use wemux in host mode, allowing\n## them to create wemux servers for other users to attach to.\n## Add the usernames of users who should use wemux in host mode:\n## example: host_list=(zolrath csagan brocksamson)\n\n## All users in any of the groups in host_groups will also use wemux in host mode.\n## example: host_groups=(wheel wemux)\n\n####### CLIENT OPTIONS #######\n\n## Allow users to attach to the wemux server in pair mode.\n## When set to false, clients will only be able to attach in mirror mode.\n## Defaults to \"true\"\n# allow_pair_mode=\"false\"\n\n## Allow users to attach to the wemux server in rogue mode.\n## When set to false, clients will only be able to attach in pair or mirror mode.\n## Defaults to \"true\"\n# allow_rogue_mode=\"false\"\n\n## When clients enter 'wemux' with no arguments by default it will attempt to\n## join an existing pair mode session, if there is no pair session it will start\n## a mirror mode session.\n## By setting default_client_mode to \"pair\", 'wemux' with no arguments will always\n## join a pair mode session, even if it has to create it.\n## Defaults to \"mirror\"\n# default_client_mode=\"pair\"\n\n## Allow hosts to kick SSH users from the server and remove the kicked users\n## wemux sessions.\n## Defaults to \"true\"\n# allow_kick_user=\"false\"\n\n####### MULTI-HOST OPTIONS #######\n\n## Allow users to change their server for multi-host environments.\n## Defaults to \"false\"\n# allow_server_change=\"true\"\n\n## Set name for default wemux server. Will be used with wemux reset and\n## when allow_server_change is disabled.\n## Defaults to \"wemux\"\n# default_server_name=\"customname\"\n\n## Allow users to list all currently running wemux sockets/servers.\n## Automatically disabled if allow_server_change=\"false\"\n## Defaults to \"true\"\n# allow_server_list=\"false\"\n\n####### ANNOUNCEMENT OPTIONS #######\n\n## Allow users to see list of currently connected wemux users.\n## Defaults to \"true\"\n# allow_user_list=\"false\"\n\n## Announce when users attach/detach from a tmux server.\n## Defaults to \"true\"\n# announce_attach=\"false\"\n\n## Announce when users change the wemux server they are using.\n## Defaults to \"true\"\n# announce_server_change=\"false\"\n\n####### OTHER OPTIONS #######\n\n## Location of tmux socket, will have server name appended to end:\n## Defaults to \"/tmp/wemux\"\n# socket_prefix=\"/tmp/wemux\"\n\n## Tmux Options:\n## Defaults to -u to have tmux always attempt to use utf-8 mode.\n# options=\"-u\"\n"
        }
      ]
    }
  ]
}