{
  "metadata": {
    "timestamp": 1736568748781,
    "page": 848,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "zendesk/helm-secrets",
      "stars": 1156,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": "*.options\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0712890625,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2017 Zendesk\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 19.845703125,
          "content": "\n[![License](https://img.shields.io/github/license/zendesk/helm-secrets.svg)](https://github.com/zendesk/helm-secrets/blob/master/LICENSE)\n[![No Maintenance Intended](http://unmaintained.tech/badge.svg)](http://unmaintained.tech/)\n[![Current Release](https://img.shields.io/github/release/zendesk/helm-secrets.svg)](https://github.com/zendesk/helm-secrets/releases/latest)\n[![Production Ready](https://img.shields.io/badge/production-ready-green.svg)](https://github.com/zendesk/helm-secrets/releases/latest)\n[![GitHub issues](https://img.shields.io/github/issues/zendesk/helm-secrets.svg)](https://github.com/zendesk/helm-secrets/issues)\n[![GitHub pull requests](https://img.shields.io/github/issues-pr/zendesk/helm-secrets.svg?style=flat-square)](https://github.com/zendesk/helm-secrets/pulls)\n\n# Deprecation information \n\nPlease note, this project is no longer being maintained.\nThere is an active fork [jkroepke/helm-secrets](https://github.com/jkroepke/helm-secrets) and we will also contribute our future changes to it. \n\n# Plugin for secrets management in Helm\n\nDeveloped and used in all environments in [BaseCRM](https://getbase.com/).\n\n# how we use it ?\n\nWe store secrets and values in ```helm_vars``` dir structure just like in this repository example dir. All this data versioned in GIT.\nWorking in teams on multiple projects/regions/envs and multiple secrets files at once.\nWe have Makefile in our Helm charts repo to simplify install helm-secrets plugin with helm and other stuff we use. Same Makefile used to rebuild all helm charts with dependencies and some other everyday helpers.\nEncrypting, Decrypting, Editing secrets on local clones, making #PR's and storing this in our helm charts repo encrypted with PGP, AWS KMS and GCP KMS.\nDeploying using helm-wrapper from local or from CI with same charts and secrets/values from GIT repository.\n\n# Main features\n\nA first internal version of the plugin used pure PGP and the whole secret file was encrypted as one.\nA current version of the plugin using Golang sops as backend which could be integrated in future into Helm itself, but currently, it is only shell wrapper.\n\nWhat kind of problems this plugin solves:\n* Simple replaceable layer integrated with helm command for encrypting, decrypting, view secrets files stored in any place. Currently using SOPS as backend.\n* [Support for YAML/JSON structures encryption - Helm YAML secrets files](https://github.com/mozilla/sops#important-information-on-types)\n* [Encryption per value where visual Diff should work even on encrypted files](https://github.com/mozilla/sops/blob/master/example.yaml)\n* [On the fly decryption for git diff](https://github.com/mozilla/sops#showing-diffs-in-cleartext-in-git)\n* On the fly decryption and cleanup for helm install/upgrade with a helm command wrapper\n* [Multiple key management solutions like PGP, AWS KMS and GCP KMS at same time](https://github.com/mozilla/sops#using-sops-yaml-conf-to-select-kms-pgp-for-new-files)\n* [Simple adding/removing keys](https://github.com/mozilla/sops#adding-and-removing-keys)\n* [With AWS KMS permissions management for keys](https://aws.amazon.com/kms/)\n* [Secrets files directory tree separation with recursive .sops.yaml files search](https://github.com/mozilla/sops#using-sops-yaml-conf-to-select-kms-pgp-for-new-files)\n* [Extracting sub-elements from encrypted file structure](https://github.com/mozilla/sops#extract-a-sub-part-of-a-document-tree)\n* [Encrypt only part of a file if needed](https://github.com/mozilla/sops#encrypting-only-parts-of-a-file). [Example encrypted file](https://github.com/mozilla/sops/blob/master/example.yaml)\n\n## Moving parts of project\n\n```helm-wrapper``` - It is not a part of Helm project itself. It is a just simple wrapper in the shell that runs helm within but wrapping secret decryption and cleaning on-the-fly, before and after Helm run. It is created from install-binary.sh in helm-secrets plugin install process as hook action making the symlink to wrapper.sh. This should be used as default command to operate with Helm client with helm-secrets installed.\n\n```test.sh``` - Test script to check if all parts of the plugin work. Using example dir with vars structure and PGP keys to make real tests on real data with real encryption/decryption.\n\n```install-binary.sh``` - Script used as the hook to download and install sops and install git diff configuration for helm-secrets files.\n\n```secrets.sh``` - Main helm-secrets plugin code for all helm-secrets plugin actions available in ```helm secrets help``` after plugin install\n\n## Installation and Dependencies\n\n#### SOPS install\nJust install the plugin using ```helm plugin install https://github.com/zendesk/helm-secrets``` and sops will be installed as part of it, using hook when helm > 2.3.x\n\nYou can always install manually in MacOS as below:\n```\nbrew install sops\n```\nFor Linux RPM or DEB, sops is available here: [Dist Packages](https://github.com/mozilla/sops/releases)\n\n#### SOPS git diff\nGit config part is installed with the plugin, but to be fully functional the following needs to be added to the ```.gitattributes``` file in the root directory of a charts repo:\n```\nsecrets.yaml diff=sopsdiffer\nsecrets.*.yaml diff=sopsdiffer\n```\nMore info on [sops page](https://github.com/mozilla/sops#showing-diffs-in-cleartext-in-git)\n\n#### Using Helm plugin manager (> 2.3.x)\n\nAs already described above,\n```\nhelm plugin install https://github.com/zendesk/helm-secrets \n```\n\n#### For Pre Helm 2.3.0 Installation\nGet a release tarball from the [releases](https://github.com/zendesk/helm-secrets/releases) page.\n\nUnpack the tarball in your helm plugins directory (```$(helm home)/plugins```).\n\nFor example:\n```\ncurl -L $TARBALL_URL | tar -C $(helm home)/plugins -xzv\n```\n#### Helm-wrapper configuration\nBy default, helm-wrapper is not configured to encrypt/decrypt secrets.yaml in charts templates. They are treated as templates and values from specific secrets/value files should be used in these templates as a reference from helm itself.\nSet you own options as ENV variables if you like to overwrite default kms enabled and decrypt charts disabled.\n```\nDECRYPT_CHARTS=false helm-wrapper...\n```\n## Usage and examples\n\n```\n$ helm secrets help\nGnuPG secrets encryption in Helm Charts\n\nThis plugin provides ability to encrypt/decrypt secrets files\nto store in less secure places, before they are installed using\nHelm.\n\nTo decrypt/encrypt/edit you need to initialize/first encrypt secrets with\nsops - https://github.com/mozilla/sops\n\nAvailable Commands:\n  enc           Encrypt secrets file\n  dec           Decrypt secrets file\n  view          Print secrets decrypted\n  edit          Edit secrets file and encrypt afterwards\n  clean         Remove all decrypted files in specified directory (recursively)\n  install       wrapper that decrypts secrets[.*].yaml files before running helm install\n  template      wrapper that decrypts secrets[.*].yaml files before running helm template\n  upgrade       wrapper that decrypts secrets[.*].yaml files before running helm upgrade\n  lint          wrapper that decrypts secrets[.*].yaml files before running helm lint\n  diff          wrapper that decrypts secrets[.*].yaml files before running helm diff\n                  (diff is a helm plugin)\n```\n\nBy convention, files containing secrets are named `secrets.yaml`, or anything beginning with \"secrets.\" and ending with \".yaml\". E.g. `secrets.test.yaml` and `secrets.prod.yaml`.\n\nDecrypted files have the suffix \".yaml.dec\" by default. This can be changed using the `HELM_SECRETS_DEC_SUFFIX` environment variable.\n\n#### Basic commands:\n```\n  enc           Encrypt secrets file\n  dec           Decrypt secrets file\n  view          Print decrypted secrets file\n  edit          Edit secrets file (decrypt before and encrypt after)\n  clean         Delete *.yaml-dec files in directory (recursively)\n```\nEach of these commands have their own help.\n\n## Use case and workflow\n\n#### Usage examples\n\nNote: You need to run `gpg --import example/pgp/project{x,y}.asc` in order to successfully decrypt secrets included in the examples\n\n##### Decrypt\n\nThe decrypt operation decrypts a secrets.yaml file and saves the decrypted result in secrets.yaml.dec:\n```\n$ helm secrets dec example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nDecrypting example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n```\n\nThe secrets.yaml.dec file:\n```\nsecret_sandbox_projectx: secret_foo_123\n```\n\nNote that if the secrets.yaml.dec file already exists and is newer than secrets.yaml, it will not be overwritten:\n```\n$ helm secrets dec example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nDecrypting example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nexample/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml.dec is newer than example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n```\n\n##### Encrypt\n\nThe encrypt operation encrypts a secrets.yaml.dec file and saves the encrypted result in secrets.yaml:\n\nIf you initially have an unencrypted secrets.yaml file, it will be used as input and will be overwritten:\n\n```\n$ helm secrets enc example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nEncrypting example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nEncrypted example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n```\n\nIf you already have an encrypted secrets.yaml file and a decrypted secrets.yaml.dec file, encrypting will encrypt secrets.yaml.dec to secrets.yaml:\n```\n$ helm secrets dec example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nDecrypting example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n$ helm secrets enc example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nEncrypting example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nEncrypted example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml.dec to example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n```\n##### View\nThe view operation decrypts secrets.yaml and prints it to stdout:\n```\n$ helm secrets view example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\nsecret_sandbox_projectx: secret_foo_123\n```\n##### Edit\nThe edit operation will decrypt the secrets.yaml file and open it in an editor. If the file is modified, it will be encrypted again after you exit the editor.\n\n```\n$ helm secrets edit example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml\n```\nThere is new feature in SOPS master that allows using $EDITOR to specify editor used by sops but not released yet.\n\n##### Clean\n\nThe operation will delete all decrypted files in a directory, recursively:\n\n```\n$ helm secrets clean example/helm_vars/projectX/sandbox/us-east-1/java-app/\nremoved example/helm_vars/projectX/sandbox/us-east-1/java-app/secrets.yaml.dec\n```\n\nIf you use git there is commit hook that prevents commiting decrypted files and you can add all *.yaml.dec files in you repository ```.gitignore``` file.\n\n#### Summary\n\n* Values/Secrets data are not a part of the chart. You need to manage your values, public charts contains mostly defaults without secrets - data vs code\n* To use the helm-secrets plugin you should build your ```.sops.yaml``` rules to make everything automatic\n* Use helm secrets <enc|dec|view|edit> for everyday work with you secret yaml files\n* Use version control systems like GIT to work in teams and get history of versions\n* Everyday search keys is simple even with encrypted files or decrypt on-the-fly with git diff config included\n* With example helm_vars you can manage multiple world locations with multiple projects that contain multiple environments\n* With the helm wrapper you can easily run \"helm secrets install/upgrade/rollback\" with secrets files included as ```-f``` option from you helm_vars values dir tree.\n\nWe use vars for Helm Charts from separate directory tree with the structure like this:\n```\nhelm_vars/\n├── .sops.yaml\n├── projectX\n|   ├── .sops.yaml\n│   ├── production\n│   │   └── us-east-1\n│   │       └── java-app\n│   │           └── hello-world\n│   │               ├── secrets.yaml\n│   │               └── values.yaml\n│   ├── sandbox\n│   │   └── us-east-1\n│   │       └── java-app\n│   │           └── hello-world\n│   │               ├── secrets.yaml\n│   │               └── values.yaml\n|   ├── secrets.yaml\n│   └── values.yaml\n├── projectY\n|   ├── .sops.yaml\n│   ├── production\n│   │   └── us-east-1\n│   │       └── java-app\n│   │           └── hello-world\n│   │               ├── secrets.yaml\n│   │               └── values.yaml\n│   ├── sandbox\n│   │   └── us-east-1\n│   │       └── java-app\n│   │           └── hello-world\n│   │               ├── secrets.yaml\n│   │               └── values.yaml\n|   ├── secrets.yaml\n│   └── values.yaml\n├── secrets.yaml\n└── values.yaml\n```\nAs you can see we can run different PGP or KMS keys per project, globally or per any tree level. Thanks to this we can isolate tree on different CI/CD instances using same GIT repository.\nAs we use simple -f option when running the helm wrapper we can just use encrypted secrets.yaml and all these secrets will be decrypted and cleaned on the fly before and after helm run.\n\n```.sops.yaml``` file example\n```\n---\ncreation_rules:\n        # Encrypt with AWS KMS\n        - kms: 'arn:aws:kms:us-east-1:222222222222:key/111b1c11-1c11-1fd1-aa11-a1c1a1sa1dsl1+arn:aws:iam::222222222222:role/helm_secrets'\n\n        # Encrypt using GCP KMS\n        - gcp_kms: projects/mygcproject/locations/global/keyRings/mykeyring/cryptoKeys/thekey\n\n        # As failover encrypt with PGP\n        - pgp: '000111122223333444AAAADDDDFFFFGGGG000999'\n\n        # For more help look at https://github.com/mozilla/sops\n```\nMultiple KMS and PGP are allowed.\n\nEverything is described in SOPS docs - links in this project description.\n\n## Helm Wrapper\n\nRunning helm to install/upgrade chart with our secrets files is simple with the included helm wrapper which will decrypt on-the-fly and use decrypted secrets files in the actual helm command.\n\n#### Wrapped commands\n```\n  install       run \"helm install\" with decrypted secrets files\n  upgrade       run \"helm upgrade\" with decrypted secrets files\n  lint          run \"helm lint\" with decrypted secrets files\n  diff          run \"helm diff\" with decrypted secrets files\n```\n\nThe wrapper enables you to call these helm commands with on-the-fly decryption of secrets files passed as `-f` or `--values` arguments. Instead of calling e.g. `helm install ...` you can call `helm secrets install ...` to get on-the-fly decryption.\n\nThe diff command is a separate helm plugin, [helm-diff](<https://github.com/databus23/helm-diff>). Using it you can view the changes that would be deployed before deploying. In the same way as above, instead of calling e.g. `helm diff upgrade ...` you can call `helm secrets diff upgrade ...`, and so on.\n\nNote that if a decrypted secrets.yaml.dec file exists and is newer then the secrets.yaml file, it will be used in the wrapped command rather than decrypting secrets.yaml. \n\nReal example of the helm wrapper usage with simple java helloworld application.\n```\nAWS_PROFILE=sandbox helm secrets upgrade \\\n  helloworld \\\n  stable/java-app \\\n  --install \\\n  --timeout 600 \\\n  --wait \\\n  --kube-context=sandbox \\\n  --namespace=projectx \\\n  --set global.app_version=bff8fc4 \\\n  -f helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml \\\n  -f helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/values.yaml \\\n  -f helm_vars/secrets.yaml \\\n  -f helm_vars/values.yaml\n\nRelease \"helloworld\" has been upgraded. Happy Helming!\nLAST DEPLOYED: Fri May  5 13:27:01 2017\nNAMESPACE: projectx\nSTATUS: DEPLOYED\n\nRESOURCES:\n==> extensions/v1beta1/Deployment\nNAME        DESIRED  CURRENT  UP-TO-DATE  AVAILABLE  AGE\nhelloworld  3        3        3           2          1h\n\n==> v1/Secret\nNAME        TYPE    DATA  AGE\nhelloworld  Opaque  10    1h\n\n==> v1/ConfigMap\nNAME        DATA  AGE\nhelloworld  2     1h\n\n==> v1/Service\nNAME        CLUSTER-IP      EXTERNAL-IP  PORT(S)   AGE\nhelloworld  100.65.221.245  <none>       8080/TCP  1h\n\nNOTES:\nDeploy success helloworld-bff8fc4 in namespace projectx\n\nremoved helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml.dec\nremoved helm_vars/secrets.yaml.dec\n```\nYou can see that we use a global secrets file and a specific secrets file for this app in this project/environment/region. We use some plain value files next to secrets. We use values from secrets in some secrets template in helloworld application chart template and some values are used in the configmap template in the same chart. Some values are added as env variables in deployment manifest templates in the chart. As you can see we can use secrets and values in helm in many ways. Everything depends on use case.\n\nEven when helm failed then decrypted files are cleaned\n```\nAWS_PROFILE=sandbox helm-wrapper upgrade \\\n  helloworld \\\n  stable/java-app \\\n  --install \\\n  --timeout 600 \\\n  --wait \\\n  --kube-context=wrongcontext \\\n  --namespace=projectx \\\n  --set global.app_version=bff8fc4 \\\n  -f helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml \\\n  -f helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/values.yaml \\\n  -f helm_vars/secrets.yaml \\\n  -f helm_vars/values.yaml\n\nError: could not get kubernetes config for context 'wrongcontext': context \"wrongcontext\" does not exist\n\nremoved helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml.dec\nremoved helm_vars/secrets.yaml.dec\n```\n#### Using secret values in Helm chart secrets template\n\nWe just need to create Kubernetes secrets template in chart templates dir.\nFor example in your charts repo you have `stable/helloworld/`. Inside this chart you should have `stable/helloworld/templates/` dir and then create the `stable/helloworld/templates/secrets.yaml` file with content as specified bellow.\n\n```\napiVersion: v1\nkind: Secret\nmetadata:\n  name: helloworld\n  labels:\n    app: helloworld\n    chart: \"{{ .Chart.Name }}-{{ .Chart.Version }}\"\n    release: \"{{ .Release.Name }}\"\n    heritage: \"{{ .Release.Service }}\"\ntype: Opaque\ndata:\n  my_secret_key: {{ .Values.secret_sandbox_helloworld | b64enc | quote }}\n```\n\nIn this example you have a Kubernetes secret named \"helloworld\" and data inside this secret will be filled in from values defined in `-f helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml`. We use `.Values.secret_sandbox_helloworld` to refer to the value in the decrypted secret file. In this way, the value from the decrypted `helm_vars/projectx/sandbox/us-east-1/java-app/helloworld/secrets.yaml` will be available as `my_secret_key` in Kubernetes.\n\nYou can now use the \"helloworld\" secret in your deployment manifest (or any other manifest supporting secretKeyRef) in the env section like this:\n```\napiVersion: extensions/v1beta1\nkind: Deployment\n...\n...\n        containers:\n        ...\n        ...\n          env:\n            - name: my_new_secret_key\n              valueFrom:\n                secretKeyRef:\n                  name: helloworld\n                  key: my_secret_key\n```\n## Important Tips\n\n#### Prevent committing decrypted files to git\nIf you like to secure situation when decrypted file is committed by mistake to git you can add your secrets.yaml.dec files to you charts project repository `.gitignore`.\n\nA second level of security is to add for example a `.sopscommithook` file inside your chart repository local commit hook.\n\nThis will prevent committing decrypted files without sops metadata.\n\n`.sopscommithook` content example:\n```\n#!/bin/sh\n\nfor FILE in $(git diff-index HEAD --name-only | grep <your vars dir> | grep \"secrets.y\"); do\n    if [ -f \"$FILE\" ] && ! grep -C10000 \"sops:\" $FILE | grep -q \"version:\"; then\n        echo \"!!!!! $FILE\" 'File is not encrypted !!!!!'\n        echo \"Run: helm secrets enc <file path>\"\n        exit 1\n    fi\ndone\nexit\n```\n\n## Copyright and license\n\nCopyright 2017 Zendesk\n\nLicensed under the [Apache License, Version 2.0](LICENSE)\n"
        },
        {
          "name": "example",
          "type": "tree",
          "content": null
        },
        {
          "name": "install-binary.sh",
          "type": "blob",
          "size": 2.5107421875,
          "content": "#!/usr/bin/env bash\n\nset -ueo pipefail\n\nSOPS_VERSION=\"3.0.4\"\nSOPS_DEB_URL=\"https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops_${SOPS_VERSION}_amd64.deb\"\nSOPS_DEB_SHA=\"9d9f319882ba05e7050be91bdfc396167ac9b00e2e6f634a647d55ac97915bb6\"\nSOPS_LINUX_URL=\"https://github.com/mozilla/sops/releases/download/${SOPS_VERSION}/sops-${SOPS_VERSION}.linux\"\nSOPS_LINUX_SHA=\"e185d2752defdcb18c054f67682a6684c72d6a6bf2341f6bef1dd7d33a110459\"\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\n#BLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nNOC='\\033[0m'\n\n# Find some tools\ncase \"${HELM_BIN}\" in\n    helm)\n        HELM_DIR=\"$(dirname $(command -v helm))\"\n        ;;\n    *)\n        HELM_DIR=\"$(dirname ${HELM_BIN})\"\n        ;;\nesac\n\nget_sha_256 () {\n    if command -v sha256sum > /dev/null; then res=$(sha256sum $1)\n    elif command -v shasum > /dev/null; then res=$(shasum -a 256 $1)\n    else res=$(/usr/bin/shasum -a 256 $1)\n    fi\n    echo $res | cut -d ' ' -f 1\n}\n\n# Install the helm wrapper in the same dir as helm itself. That's not\n# guaranteed to work, but it's better than hard-coding it.\nHELM_WRAPPER=\"${HELM_DIR}/helm-wrapper\"\n\nif hash sops 2>/dev/null; then\n    echo \"sops is already installed:\"\n    sops --version\nelse\n\n    # Try to install sops.\n\n    ### Mozilla SOPS binary install\n    if [ \"$(uname)\" == \"Darwin\" ];\n    then\n            brew install sops\n    elif [ \"$(uname)\" == \"Linux\" ];\n    then\n        if which dpkg;\n        then\n            curl -sL \"${SOPS_DEB_URL}\" > /tmp/sops\n            if [ \"$(get_sha_256 /tmp/sops)\" == \"${SOPS_DEB_SHA}\" ];\n            then\n                sudo dpkg -i /tmp/sops;\n            else\n                echo -e \"${RED}Wrong SHA256${NOC}\"\n            fi\n        else\n            curl -sL \"${SOPS_LINUX_URL}\" > /tmp/sops\n            if [ \"$(get_sha_256 /tmp/sops)\" == \"${SOPS_LINUX_SHA}\" ];\n            then\n                chmod +x /tmp/sops\n                mv /tmp/sops /usr/local/bin/\n            else\n                echo -e \"${RED}Wrong SHA256${NOC}\"\n            fi\n        fi\n        rm /tmp/sops 2>/dev/null || true\n    else\n        echo -e \"${RED}No SOPS package available${NOC}\"\n        exit 1\n    fi\nfi\n\n### git diff config\nif [ -x \"$(command -v git --version)\" ];\nthen\n    git config --global diff.sopsdiffer.textconv \"sops -d\"\nelse\n    echo -e \"${RED}[FAIL]${NOC} Install git command\"\n    exit 1\nfi\n\necho \"Deprecation Info\"\necho \"  Please note, this project is no longer being maintained.\"\necho \"  Link to active helm-secret plugin could be found in helm documentation: https://helm.sh/docs/community/related/#helm-plugins\"\n"
        },
        {
          "name": "plugin.yaml",
          "type": "blob",
          "size": 0.330078125,
          "content": "name: \"secrets\"\nversion: \"2.0.2\"\nusage: \"Secrets encryption in Helm for Git storing\"\ndescription: |-\n  This plugin provides secrets values encryption for Helm charts secure storing\ncommand: \"$HELM_PLUGIN_DIR/secrets.sh\"\nuseTunnel: true\nhooks:\n  install: \"$HELM_PLUGIN_DIR/install-binary.sh\"\n  update: \"$HELM_PLUGIN_DIR/install-binary.sh\"\n"
        },
        {
          "name": "secrets.sh",
          "type": "blob",
          "size": 12.09765625,
          "content": "#!/usr/bin/env bash\n\n# The suffix to use for decrypted files. The default can be overridden using\n# the HELM_SECRETS_DEC_SUFFIX environment variable.\nDEC_SUFFIX=\"${HELM_SECRETS_DEC_SUFFIX:-.yaml.dec}\"\n\n# Make sure HELM_BIN is set (normally by the helm command)\nHELM_BIN=\"${HELM_BIN:-helm}\"\n\ngetopt --test > /dev/null\nif [[ $? -ne 4 ]]\nthen\n    # Check if gnu-getopt is installed\n    if [ -x /usr/local/opt/gnu-getopt/bin/getopt ]\n    then\n        /usr/local/opt/gnu-getopt/bin/getopt --test > /dev/null\n        if [[ $? -ne 4 ]]\n\tthen\n\t    GNU_GETOPT=0\n\telse\n\t    GNU_GETOPT=1\n\t    export PATH=\"/usr/local/opt/gnu-getopt/bin:$PATH\"\n\tfi\n    else\n    \tGNU_GETOPT=0\n    fi\n    \n    if [ \"${GNU_GETOPT}\" -ne 1 ]; then\n    \tcat <<EOF\nI’m sorry, \"getopt --test\" failed in this environment.\n\nYou may need to install enhanced getopt, e.g. on OSX using\n\"brew install gnu-getopt\".\nEOF\n    \texit 1\n    fi\nfi\n\nset -ueo pipefail\n\nusage() {\n    cat <<EOF\nGnuPG secrets encryption in Helm Charts\n\nThis plugin provides ability to encrypt/decrypt secrets files\nto store in less secure places, before they are installed using\nHelm.\n\nTo decrypt/encrypt/edit you need to initialize/first encrypt secrets with\nsops - https://github.com/mozilla/sops\n\nAvailable Commands:\n  enc    \tEncrypt secrets file\n  dec    \tDecrypt secrets file\n  view   \tPrint secrets decrypted\n  edit   \tEdit secrets file and encrypt afterwards\n  clean         Remove all decrypted files in specified directory (recursively)\n  install\twrapper that decrypts secrets[.*].yaml files before running helm install\n  template\twrapper that decrypts secrets[.*].yaml files before running helm template\n  upgrade\twrapper that decrypts secrets[.*].yaml files before running helm upgrade\n  lint\t\twrapper that decrypts secrets[.*].yaml files before running helm lint\n  diff\t\twrapper that decrypts secrets[.*].yaml files before running helm diff\n                  (diff is a helm plugin)\n\nEOF\n}\n\nenc_usage() {\n    cat <<EOF\nEncrypt secrets\n\nIt uses your gpg credentials to encrypt .yaml file. If the file is already\nencrypted, look for a decrypted ${DEC_SUFFIX} file and encrypt that to .yaml.\nThis allows you to first decrypt the file, edit it, then encrypt it again.\n\nYou can use plain sops to encrypt - https://github.com/mozilla/sops\n\nExample:\n  $ ${HELM_BIN} secrets enc <SECRET_FILE_PATH>\n  $ git add <SECRET_FILE_PATH>\n  $ git commit\n  $ git push\n\nEOF\n}\n\ndec_usage() {\n    cat <<EOF\nDecrypt secrets\n\nIt uses your gpg credentials to decrypt previously encrypted .yaml file.\nProduces ${DEC_SUFFIX} file.\n\nYou can use plain sops to decrypt specific files - https://github.com/mozilla/sops\n\nExample:\n  $ ${HELM_BIN} secrets dec <SECRET_FILE_PATH>\n\nTypical usage:\n  $ ${HELM_BIN} secrets dec secrets/myproject/secrets.yaml\n  $ vim secrets/myproject/secrets.yaml.dec\n\nEOF\n}\n\nview_usage() {\n    cat <<EOF\nView specified secrets[.*].yaml file\n\nExample:\n  $ ${HELM_BIN} secrets view <SECRET_FILE_PATH>\n\nTypical usage:\n  $ ${HELM_BIN} secrets view secrets/myproject/nginx/secrets.yaml | grep basic_auth\n\nEOF\n}\n\nedit_usage() {\n    cat <<EOF\nEdit encrypted secrets\n\nDecrypt encrypted file, edit and then encrypt\n\nYou can use plain sops to edit - https://github.com/mozilla/sops\n\nExample:\n  $ ${HELM_BIN} secrets edit <SECRET_FILE_PATH>\n  or $ sops <SECRET_FILE_PATH>\n  $ git add <SECRET_FILE_PATH>\n  $ git commit\n  $ git push\n\nEOF\n}\n\nclean_usage() {\n    cat <<EOF\nClean all decrypted files if any exist\n\nIt removes all decrypted ${DEC_SUFFIX} files in the specified directory\n(recursively) if they exist.\n\nExample:\n  $ ${HELM_BIN} secrets clean <dir with secrets>\n\nEOF\n}\n\ninstall_usage() {\n    cat <<EOF\nInstall a chart\n\nThis is a wrapper for the \"helm install\" command. It will detect -f and\n--values options, and decrypt any secrets.*.yaml files before running \"helm\ninstall\".\n\nExample:\n  $ ${HELM_BIN} secrets install <HELM INSTALL OPTIONS>\n\nTypical usage:\n  $ ${HELM_BIN} secrets install -n i1 stable/nginx-ingress -f values.test.yaml -f secrets.test.yaml\n\nEOF\n}\n\ntemplate_usage() {\n    cat <<EOF\nInstall a chart\n\nThis is a wrapper for the \"helm template\" command. It will detect -f and\n--values options, and decrypt any secrets.*.yaml files before running \"helm\ntemplate\".\n\nExample:\n  $ ${HELM_BIN} secrets template <HELM INSTALL OPTIONS>\n\nTypical usage:\n  $ ${HELM_BIN} secrets template -n i1 stable/nginx-ingress -f values.test.yaml -f secrets.test.yaml\n\nEOF\n}\n\nupgrade_usage() {\n    cat <<EOF\nUpgrade a deployed release\n\nThis is a wrapper for the \"helm upgrade\" command. It will detect -f and\n--values options, and decrypt any secrets.*.yaml files before running \"helm\nupgrade\".\n\nExample:\n  $ ${HELM_BIN} secrets upgrade <HELM UPGRADE OPTIONS>\n\nTypical usage:\n  $ ${HELM_BIN} secrets upgrade i1 stable/nginx-ingress -f values.test.yaml -f secrets.test.yaml\n\nEOF\n}\n\nlint_usage() {\n    cat <<EOF\nRun helm lint on a chart\n\nThis is a wrapper for the \"helm lint\" command. It will detect -f and\n--values options, and decrypt any secrets.*.yaml files before running \"helm\nlint\".\n\nExample:\n  $ ${HELM_BIN} secrets lint <HELM LINT OPTIONS>\n\nTypical usage:\n  $ ${HELM_BIN} secrets lint ./my-chart -f values.test.yaml -f secrets.test.yaml\n\nEOF\n}\n\ndiff_usage() {\n    cat <<EOF\nRun helm diff on a chart\n\n\"diff\" is a helm plugin. This is a wrapper for the \"helm diff\" command. It\nwill detect -f and --values options, and decrypt any secrets.*.yaml files\nbefore running \"helm diff\".\n\nExample:\n  $ ${HELM_BIN} secrets diff <HELM DIFF OPTIONS>\n\nTypical usage:\n  $ ${HELM_BIN} secrets diff upgrade i1 stable/nginx-ingress -f values.test.yaml -f secrets.test.yaml\n\nEOF\n}\n\nis_help() {\n    case \"$1\" in\n\t-h|--help|help)\n\t    return 0\n\t    ;;\n\t*)\n\t    return 1\n\t    ;;\n    esac\n}\n\nencrypt_helper() {\n    local yml=$1\n    [[ -e \"$yml\" ]] || { echo \"File does not exist: $yml\"; exit 1; }\n    local ymldec=$(sed -e \"s/\\\\.yaml$/${DEC_SUFFIX}/\" <<<\"$yml\")\n    [[ -e $ymldec ]] || ymldec=\"$yml\"\n\n    if [[ $(grep -C10000 'sops:' \"$ymldec\" | grep -c 'version:') -gt 0 ]]\n    then\n        echo \"Already encrypted: $ymldec\"\n        return\n    fi\n    if [[ $yml == $ymldec ]]\n    then\n        sops --encrypt --input-type yaml --output-type yaml --in-place \"$yml\"\n        echo \"Encrypted $yml\"\n    else\n        sops --encrypt --input-type yaml --output-type yaml \"$ymldec\" > \"$yml\"\n        echo \"Encrypted $ymldec to $yml\"\n    fi\n}\n\nenc() {\n    if is_help \"$1\"\n    then\n\tenc_usage\n\treturn\n    fi\n    yml=\"$1\"\n    if [[ ! -f \"$yml\" ]]\n    then\n\techo \"$yml doesn't exist.\"\n    else\n\techo \"Encrypting $yml\"\n\tencrypt_helper \"$yml\"\n    fi\n}\n\n# Name references (\"declare -n\" and \"local -n\") are a Bash 4.3+ feature.\n# For previous versions, work around using eval.\ndecrypt_helper() {\n    local yml=\"$1\" __ymldec __dec\n\n    if [[ ${BASH_VERSINFO[0]} -lt 4 || ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -lt 3 ]]\n    then\n\tlocal __ymldec_var='' __dec_var=''\n\t[[ $# -ge 2 ]] && __ymldec_var=$2\n\t[[ $# -ge 3 ]] && __dec_var=$3\n\t[[ $__dec_var ]] && eval $__dec_var=0\n    else\n\t[[ $# -ge 2 ]] && local -n __ymldec=$2\n\t[[ $# -ge 3 ]] && local -n __dec=$3\n    fi\n\n    __dec=0\n    [[ -e \"$yml\" ]] || { echo \"File does not exist: $yml\"; exit 1; }\n    if [[ $(grep -C10000 'sops:' \"$yml\" | grep -c 'version:') -eq 0 ]]\n    then\n\techo \"Not encrypted: $yml\"\n\t__ymldec=\"$yml\"\n    else\n\t__ymldec=$(sed -e \"s/\\\\.yaml$/${DEC_SUFFIX}/\" <<<\"$yml\")\n\tif [[ -e $__ymldec && $__ymldec -nt $yml ]]\n\tthen\n\t    echo \"$__ymldec is newer than $yml\"\n\telse\n\t    sops --decrypt --input-type yaml --output-type yaml \"$yml\" > \"$__ymldec\" || { rm \"$__ymldec\"; exit 1; }\n\t    __dec=1\n\tfi\n    fi\n\n    if [[ ${BASH_VERSINFO[0]} -lt 4 || ${BASH_VERSINFO[0]} -eq 4 && ${BASH_VERSINFO[1]} -lt 3 ]]\n    then\n\t[[ $__ymldec_var ]] && eval $__ymldec_var=\"'$__ymldec'\"\n\t[[ $__dec_var ]] && eval $__dec_var=\"'$__dec'\"\n    fi\n    true # just so that decrypt_helper will exit with a true status on no error\n}\n\n\ndec() {\n    if is_help \"$1\"\n    then\n\tdec_usage\n\treturn\n    fi\n    yml=\"$1\"\n    if [[ ! -f \"$yml\" ]]\n    then\n\techo \"$yml doesn't exist.\"\n    else\n\techo \"Decrypting $yml\"\n\tdecrypt_helper \"$yml\"\n    fi\n}\n\nview_helper() {\n    local yml=\"$1\"\n    [[ -e \"$yml\" ]] || { echo \"File does not exist: $yml\"; exit 1; }\n    sops --decrypt --input-type yaml --output-type yaml \"$yml\"\n}\n\nview() {\n    if is_help \"$1\"\n    then\n\tview_usage\n\treturn\n    fi\n    local yml=\"$1\"\n    view_helper \"$yml\"\n}\n\nedit_helper() {\n    local yml=\"$1\"\n    [[ -e \"$yml\" ]] || { echo \"File does not exist: $yml\"; exit 1; }\n    exec sops --input-type yaml --output-type yaml \"$yml\" < /dev/tty\n}\n\nedit() {\n    local yml=\"$1\"\n    edit_helper \"$yml\"\n}\n\nclean() {\n    if is_help \"$1\"\n    then\n\tclean_usage\n\treturn\n    fi\n    local basedir=\"$1\"\n    find \"$basedir\" -type f -name \"secrets*${DEC_SUFFIX}\" -exec rm -v {} \\;\n}\n\nhelm_wrapper() {\n    local cmd=\"$1\" subcmd='' cmd_version=''\n    shift\n    if [[ $cmd == diff ]]\n    then\n\tsubcmd=\"$1\"\n\tshift\n\tcmd_version=$(${HELM_BIN} diff version)\n    fi\n\n    # cache options for the helm command in a file so we don't need to parse the help each time\n    local helm_version=$(${HELM_BIN} version --client --short)\n    local cur_options_version=\"${helm_version}${cmd_version:+ ${cmd}: ${cmd_version}}\"\n    local optfile=\"$HELM_PLUGIN_DIR/helm.${cmd}${subcmd:+.$subcmd}.options\" options_version='' options='' longoptions=''\n    [[ -f $optfile ]] && . \"$optfile\"\n\n    if [[ $cur_options_version != $options_version ]]\n    then\n\tlocal re='(-([a-zA-Z0-9]), )?--([-_a-zA-Z0-9]+)( ([a-zA-Z0-9]+))?' line\n\toptions='' longoptions=''\n\n\t# parse the helm command options and option args from the help output\n\twhile read line\n\tdo\n\t    if [[ $line =~ $re ]]\n\t    then\n\t\tlocal opt=\"${BASH_REMATCH[2]}\" lopt=\"${BASH_REMATCH[3]}\" optarg=\"${BASH_REMATCH[5]:+:}\"\n\t\t[[ $opt ]] && options+=\"${opt}${optarg}\"\n\t\t[[ $lopt ]] && longoptions+=\"${longoptions:+,}${lopt}${optarg}\"\n\t    fi\n\tdone <<<\"$(${HELM_BIN} \"$cmd\" $subcmd --help | sed -e '1,/^Flags:/d' -e '/^Global Flags:/,$d' )\"\n\n\tcat >\"$optfile\" <<EOF\noptions_version='$cur_options_version'\noptions='$options'\nlongoptions='$longoptions'\nEOF\n    fi\n    \n    # parse command line\n    local parsed # separate line, otherwise the return value of getopt is ignored\n    # if parsing fails, getopt returns non-0, and the shell exits due to \"set -e\"\n    parsed=$(getopt --options=\"$options\" --longoptions=\"$longoptions\" --name=\"${HELM_BIN} $cmd${subcmd:+ ${subcmd}}\" -- \"$@\")\n\n    # collect cmd options with optional option arguments\n    local -a cmdopts=() decfiles=()\n    local yml ymldec decrypted\n    eval set -- \"$parsed\"\n    while [[ $# -gt 0 ]]\n    do\n\tcase \"$1\" in\n\t    --)\n\t\t# skip --, and what remains are the cmd args\n\t\tshift \n\t\tbreak\n\t\t;;\n            -f|--values)\n\t\tcmdopts+=(\"$1\")\n\t\tyml=\"$2\"\n\t\t# increase support for -f=myfile.yaml or -f=myfile (helm support both spaces and equal sign)\n\t\tif [[ $yml =~ ^=.*$ ]]; then\n\t\t    yml=\"${yml/=/}\"\n\t\tfi\n\t\tif [[ $yml =~ ^(.*/)?secrets(\\.[^.]+)*\\.yaml$ ]]\n\t\tthen\n\t\t    decrypt_helper $yml ymldec decrypted\n\t\t    cmdopts+=(\"$ymldec\")\n\t\t    [[ $decrypted -eq 1 ]] && decfiles+=(\"$ymldec\")\n\t\telse\n\t\t    cmdopts+=(\"$yml\")\n\t\tfi\n\t\tshift # to also skip option arg\n\t\t;;\n\t    *)\n\t\tcmdopts+=(\"$1\")\n\t\t;;\n\tesac\n\tshift\n    done\n\n    # run helm command with args and opts in correct order\n    set +e # ignore errors\n    ${HELM_BIN} ${TILLER_HOST:+--host \"$TILLER_HOST\" }\"$cmd\" $subcmd \"$@\" \"${cmdopts[@]}\"\n    helm_exit_code=$?\n    # cleanup on-the-fly decrypted files\n    [[ ${#decfiles[@]} -gt 0 ]] && rm -v \"${decfiles[@]}\"\n}\n\nhelm_command() {\n    if [[ $# -lt 2 ]] || is_help \"$2\"\n    then\n\t\"${1}_usage\"\n\treturn\n    fi\n    helm_wrapper \"$@\"\n}\n\ncase \"${1:-help}\" in\n    enc)\n\tif [[ $# -lt 2 ]]\n\tthen\n\t    enc_usage\n\t    echo \"Error: secrets file required.\"\n\t    exit 1\n\tfi\n\tenc \"$2\"\n\tshift\n\t;;\n    dec)\n\tif [[ $# -lt 2 ]]\n\tthen\n\t    dec_usage\n\t    echo \"Error: secrets file required.\"\n\t    exit 1\n\tfi\n\tdec \"$2\"\n\t;;\n    view)\n\tif [[ $# -lt 2 ]]\n\tthen\n\t    view_usage\n\t    echo \"Error: secrets file required.\"\n\t    exit 1\n\tfi\n\tview \"$2\"\n\t;;\n    edit)\n\tif [[ $# -lt 2 ]]\n\tthen\n\t    edit_usage\n\t    echo \"Error: secrets file required.\"\n\t    exit 1\n\tfi\n\tedit \"$2\"\n\tshift\n\t;;\n    clean)\n\tif [[ $# -lt 2 ]]\n\tthen\n\t    clean_usage\n\t    echo \"Error: Chart package required.\"\n\t    exit 1\n\tfi\n\tclean \"$2\"\n\t;;\n    install|template|upgrade|lint|diff)\n\thelm_command \"$@\"\n\t;;\n    --help|-h|help)\n\tusage\n\t;;\n    *)\n\tusage\n\texit 1\n\t;;\nesac\nexit ${helm_exit_code:-0}\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 4.5126953125,
          "content": "#!/usr/bin/env bash\n\nRED='\\033[0;31m'\nGREEN='\\033[0;32m'\nBLUE='\\033[0;34m'\nYELLOW='\\033[1;33m'\nNOC='\\033[0m'\nALREADY_ENC=\"Already encrypted\"\nSECRETS_REPO=\"https://github.com/futuresimple/helm-secrets\"\nHELM_CMD=\"helm\"\n\ntrap_error() {\n    local status=$?\n    if [ \"$status\" -ne 0 ]; then\n        echo -e \"${RED}General error${NOC}\"\n        exit 1\n    else\n        exit 0\n    fi\n    echo -e \"${RED}General error${NOC}\"\n}\n\ntrap \"trap_error\" EXIT\n\ntest_encryption() {\nresult=$(cat < \"${secret}\" | grep -Ec \"(40B6FAEC80FD467E3FE9421019F6A67BB1B8DDBE|4434EA5D05F10F59D0DF7399AF1D073646ED4927)\")\nif [ \"${result}\" -eq 2 ] && [ \"${secret}\" == \"./example/helm_vars/secrets.yaml\" ];\nthen\n    echo -e \"${GREEN}[OK]${NOC} File properly encrypted\"\nelif [ \"${result}\" -eq 1 ] && [ \"${secret}\" != \"./example/helm_vars/secrets.yaml\" ];\nthen\n    echo -e \"${GREEN}[OK]${NOC} File properly encrypted\"\nelse\n    echo -e \"${RED}[FAIL]${NOC} ${secret} Not encrypted properly\"\n    exit 1\nfi\n}\n\ntest_view() {\nresult_view=$(${HELM_CMD} secrets view \"${secret}\" | grep -Ec \"(40B6FAEC80FD467E3FE9421019F6A67BB1B8DDBE|4434EA5D05F10F59D0DF7399AF1D073646ED4927)\")\nif [ \"${result_view}\" -gt 0 ];\nthen\n    echo -e \"${RED}[FAIL]${NOC} Decryption failed\"\nelse\n    echo -e \"${GREEN}[OK]${NOC} File decrypted and viewable\"\nfi\n}\n\ntest_decrypt() {\nif [ -f \"${secret}.dec\" ];\nthen\n    result_dec=$(cat < \"${secret}.dec\" | grep -Ec \"(40B6FAEC80FD467E3FE9421019F6A67BB1B8DDBE|4434EA5D05F10F59D0DF7399AF1D073646ED4927)\")\n    if [ \"${result_dec}\" -gt 0 ];\n    then\n        echo -e \"${RED}[FAIL]${NOC} Decryption failed\"\n    else\n        echo -e \"${GREEN}[OK]${NOC} File decrypted\"\n    fi\nelse\n    echo -e \"${RED}[FAIL]${NOC} ${secret}.dec not exist\"\n    exit 1\nfi\n}\n\ntest_clean() {\nif [ -f \"${secret}.dec\" ];\nthen\n    echo -e \"${RED}[FAIL]${NOC} ${secret}.dec exist after cleanup\"\n    exit 1\nelse\n    echo -e \"${GREEN}[OK]${NOC} Cleanup ${mode}\"\nfi\n}\n\ntest_already_encrypted() {\nif [[ \"${enc_res}\" == *\"${ALREADY_ENC}\"* ]];\nthen\n    echo -e \"${GREEN}[OK]${NOC} Already Encrypted\"\nelse\n    echo -e \"${RED}[FAIL]${NOC} Not Encrypted or re-encrypted. Should be already encrypted with no re-encryption.\"\n    exit 1\nfi\n}\n\n\ntest_helm_secrets() {\necho -e \"${YELLOW}+++${NOC} ${BLUE}Testing ${secret}${NOC}\"\n\necho -e \"${YELLOW}+++${NOC} Encrypt and Test\"\n\"${HELM_CMD}\" secrets enc \"${secret}\" > /dev/null || exit 1 && \\\ntest_encryption \"${secret}\"\n\necho -e \"${YELLOW}+++${NOC} Test if 'Already Encrypted' feature works\"\nenc_res=$(\"${HELM_CMD}\" secrets enc \"${secret}\" | grep \"${ALREADY_ENC}\")\ntest_already_encrypted \"${enc_res}\"\n\necho -e \"${YELLOW}+++${NOC} View encrypted Test\"\ntest_view \"${secret}\"\n\necho -e \"${YELLOW}+++${NOC} Decrypt\"\n\"${HELM_CMD}\" secrets dec \"${secret}\" > /dev/null || exit 1 && \\\ntest_decrypt \"${secret}\" && \\\ncp \"${secret}.dec\" \"${secret}\"\n\necho -e \"${YELLOW}+++${NOC} Cleanup Test\"\n\"${HELM_CMD}\" secrets clean \"$(dirname ${secret})\" > /dev/null || exit 1\nmode=\"specified directory\"\ntest_clean \"${secret}\" \"${mode}\" && \\\ncp \"${secret}\" \"${secret}.dec\" && \\\n\"${HELM_CMD}\" secrets clean \"${secret}.dec\" > /dev/null || exit 1\nmode=\"specified .dec file\"\ntest_clean \"${secret}\" \"${mode}\" # && \\\n# cp \"${secret}\" \"${secret}.dec\" && \\\n# \"${HELM_CMD}\" secrets clean \"${secret}.dec\" > /dev/null || exit 1\n# mode=\"specified encrypted secret file\"\n# test_clean \"${secret}\" \"${mode}\"\n# The functionality above doesn't work, it only works with .dec in filename\n\necho -e \"${YELLOW}+++${NOC} Once again Encrypt and Test\"\n\"${HELM_CMD}\" secrets enc \"${secret}\" > /dev/null || exit 1 && \\\ntest_encryption \"${secret}\"\n}\n\necho -e \"${YELLOW}+++${NOC} Installing helm-secrets plugin\"\nif [ \"$(helm plugin list | tail -n +2 | cut -d ' ' -f 1 | grep -c \"secrets\")\" -eq 1 ];\nthen\n    echo -e \"${GREEN}[OK]${NOC} helm-secrets plugin installed\"\nelse\n    \"${HELM_CMD}\" plugin install \"${SECRETS_REPO}\" 2>/dev/null\n    echo -e \"${RED}[FAIL]${NOC} No helm-secrets plugin aborting\"\n    exit 1\nfi\n\necho \"\"\nif [ -x \"$(command -v gpg --version)\" ];\nthen\n    echo -e \"${YELLOW}+++${NOC} Importing private pgp key for projectx\"\n    gpg --import example/pgp/projectx.asc\n    echo \"\"\n    echo -e \"${YELLOW}+++${NOC} Importing private pgp key for projectx\"\n    gpg --import example/pgp/projecty.asc\n    echo \"\"\nelse\n    echo -e \"${RED}[FAIL]${NOC} Install gpg\"\n    exit 1\nfi\n\necho -e \"${YELLOW}+++${NOC} Show helm_vars tree from example\"\nif [ -x \"$(command -v tree --version)\" ];\nthen\n    tree -Ca example/helm_vars/\nelse\n    echo -e \"${RED}[FAIL]${NOC} Install tree command\"\n    exit 1\nfi\n\necho \"\"\nfor secret in $(find . -type f -name secrets.yaml);\ndo test_helm_secrets \"${secret}\";\ndone\n"
        }
      ]
    }
  ]
}