{
  "metadata": {
    "timestamp": 1736568227026,
    "page": 88,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjkw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "arialdomartini/oh-my-git",
      "stars": 3669,
      "defaultBranch": "master",
      "files": [
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2013 Arialdo Martini\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 14.19140625,
          "content": "\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/01-ordinary-prompt.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/02-bang.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/03-useful-information.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/04-untracked-files.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/06-rm-commit.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/06-tris-colors.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/07-tracking-branches.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/08-push-rebase-and-remote-branch-names.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/09-you-can-push.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/10-you-are-behind-fast-forward.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/11-diverged.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/12-detached.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/13-stash-and-tag.jpg)\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/14-action-in-progress.jpg)\n\n\n![alt tag](https://raw.github.com/arialdomartini/oh-my-git-gh-pages/gh-pages/images/shut-up.gif)\n\n\n# Installation\n## <a name=\"install-the-font\"></a>The Font\n\noh-my-git is shipped with 3 themes. The one showed above is called [oppa-lana-style](https://github.com/arialdomartini/oh-my-git-themes/blob/oppa-lana-style/oppa-lana-style.zsh-theme). It's based on the [Awesome-Terminal-Fonts](https://github.com/gabrielelana/awesome-terminal-fonts) by [@gabrielelana](https://github.com/gabrielelana). The screenshots above use the font [Source Code Pro](https://github.com/adobe/Source-Code-Pro) by Adobe patched to include additional glyphs from [Powerline](https://github.com/powerline/powerline) and from Awesome-Terminal-Fonts, but you can choose any other of the Awesome-Terminal-Fonts.\n\nYou can freely [download](https://github.com/gabrielelana/awesome-terminal-fonts/tree/patching-strategy/patched) the fonts from the original repo.\n\nTo install one of the fonts, on macOS just double click on the corresponding ```ttf``` file and click on ```Install font```. So far, I didn't find a way to make the fallback strategy work on macOS.\n\nOn Linux you can either [install the patched font](#install-the-patched-font) or you can apply the Awesome-Terminal-Fonts [fallback strategy](https://github.com/gabrielelana/awesome-terminal-fonts/blob/master/README.md#patching-vs-fallback).\n    \nThen, configure your terminal with the desired font, and restart it.\n\n## Bash\n\nOne liner for macOS:\n\n    git clone https://github.com/arialdomartini/oh-my-git.git ~/.oh-my-git && echo source ~/.oh-my-git/prompt.sh >> ~/.profile\n\nOne liner for Ubuntu:\n\n    git clone https://github.com/arialdomartini/oh-my-git.git ~/.oh-my-git && echo source ~/.oh-my-git/prompt.sh >> ~/.bashrc\n\nThen restart your Terminal.\n\n\n## Manual installation\n\nFork the repo and git clone it in your home directory.\n\nThen add\n\n    source $HOME/oh-my-git/prompt.sh\n\nto the bash startup file (`~/.profile` on Mac, `~/.bashrc` on Linux)\n\nIf you prefer to keep oh-my-git repository in a different directory, just modify the startup file accordingly to the chosen position\n\n    source /wherever-you-want/oh-my-git/prompt.sh\n\n## zsh\n\nWith antigen installed, just add\n\n    antigen use oh-my-zsh\n    antigen bundle arialdomartini/oh-my-git\n    antigen theme arialdomartini/oh-my-git-themes oppa-lana-style\n\nto your `.zshrc` file.\n\n[`oh-my-git-themes`](https://github.com/arialdomartini/oh-my-git-themes) still includes the old 2 themes [arialdo-granzestyle](https://github.com/arialdomartini/oh-my-git-themes/blob/master/arialdo-granzestyle.zsh-theme)  (which is inspired to the great [Granze theme](https://github.com/Granze/G-zsh-theme-2)) by [@granze](https://github.com/granze), and [arialdo-pathinline](https://github.com/arialdomartini/oh-my-git-themes/blob/master/arialdo-pathinline.zsh-theme). If you want to use them, edit accordingly your ```.zshrc``` file.\n\n## Fig\n\n[Fig](https://fig.io) adds apps, shortcuts, and autocomplete to your existing terminal.\n\nInstall `oh-my-git` in just one click.\n\n<a href=\"https://fig.io/plugins/other/oh-my-git\" target=\"_blank\"><img src=\"https://fig.io/badges/install-with-fig.svg\" /></a>\n\n## How to install antigen\n\n[antigen](https://github.com/zsh-users/antigen) is a plugin manager for `zsh`.\nInstalling antigen is straightforward:\n\n    cd ~ && git clone https://github.com/zsh-users/antigen.git .antigen \n\nThen, edit your `.zshrc` file including\n\n    source \"$HOME/.antigen/antigen.zsh\"\n\n    antigen use oh-my-zsh\n    antigen bundle arialdomartini/oh-my-git\n    antigen theme arialdomartini/oh-my-git-themes oppa-lana-style\n\n    antigen apply\n\nWhen you restart zsh, antigen will download and install all that's needed.\n\n# Customizing symbols\n\nYou can easily change any symbols used by the prompt. Take a look to the file [prompt.sh](https://github.com/arialdomartini/oh-my-git/blob/master/prompt.sh) (or to [oppa-lana-style.zsh-theme](https://github.com/arialdomartini/oh-my-git-themes/blob/master/oppa-lana-style.zsh-theme) if you use zsh). You will find a bunch of variables, each of them with its default value. The variables names should be auto-explanatory. Something like\n\n```\n: ${omg_is_a_git_repo_symbol:='❤'}\n: ${omg_has_untracked_files_symbol:='∿'}\n: ${omg_has_adds_symbol:='+'}\n: ${omg_has_deletions_symbol:='-'}\n: ${omg_has_cached_deletions_symbol:='✖'}\n: ${omg_has_modifications_symbol:='✎'}\n: ${omg_has_cached_modifications_symbol:='☲'}\n: ${omg_ready_to_commit_symbol:='→'}\n: ${omg_is_on_a_tag_symbol:='⌫'}\n```\n\nYou can override any of those variables in your shell startup file.\n\nFor example, just add a\n\n```\nomg_is_on_a_tag_symbol='#'\n```\n\nto your `.bashrc` file, and oh-my-git will use `#` when you are on a tag.\n\n\n# Disabling oh-my-git\noh-my-git can be disabled on a per-repository basis. Just add a\n\n    [oh-my-git]\n    enabled = false\n\nin the `.git/config` file of a repo to revert to the original prompt for that particular repo. This could be handy when working with very huge repository, when the git commands invoked by oh-my-git can slow down the prompt.\n\n# Uninstall\n\n## Bash\n* Remove the line `source ~/.oh-my-git/prompt.sh` from the terminal boot script (`.profile` or `.bash_rc`)\n* Delete the oh-my-git repo with a `rm -fr ~/.oh-my-git`\n\n## zsh\nRemove the lines\n\n```\nantigen use oh-my-zsh\nantigen bundle arialdomartini/oh-my-git\nantigen theme arialdomartini/oh-my-git-themes oppa-lana-style\n```\n\nfrom your `.zshrc` file\n\n# Troubleshooting\n\n#### Help, I installed oh-my-git but this is what I see:\n\n\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/bad-font.png)\n\n**A**: It's likely that you forgot to [install the font](#install-the-font).\n\n---\n\n#### I don't want to install a new font!\n\n**A**: \"No prob. You may select [another theme](https://github.com/arialdomartini/oh-my-git-themes), or you can customize symbols. Take a look to the [prompt.sh](https://github.com/arialdomartini/oh-my-git/blob/master/prompt.sh) file. It contains a list of pre-defined symbols, similar to:\n\n    # Symbols\n    : ${omg_is_a_git_repo_symbol:='❤'}\n    : ${omg_has_untracked_files_symbol:='∿'}\n    : ${omg_has_adds_symbol:='+'}\n    : ${omg_has_deletions_symbol:='-'}\n    : ${omg_has_modifications_symbol:='✎'}\n\nThose are just default values. If you wish to use another glyph for untracked file, just define a\n\n    omg_has_untracked_files_symbol=\"whatever\"\n\nin your shell startup file.\n\n---\n#### With Bash the last symbol looks very bad, like this\n\n![oh-my-git](https://cloud.githubusercontent.com/assets/6009528/6031476/0b9bfe2c-ac00-11e4-898a-324a71be6cb5.png)\n\n**A**: Unfortunately, I haven't find a way to tell bash \"*print the next symbol using the background color currently used by the terminal*\" and as far as I know [there's no way to achieve this result](http://unix.stackexchange.com/questions/1755/change-the-ps1-color-based-on-the-background-color#tab-top). Zsh is not affected by this issue, but bash is.\n\nAs a consequence, when printing the last symbol, oh-my-git has no choice but setting explicitly the foreground and background colors. Currently, the standard background color is black. This is unfortunate, because if the terminal uses a different background color than black, the result is bad, as showed in the above screenshot.\n\nA smart solution is the one proposed by [@Sgiath](https://github.com/Sgiath): in the color palette set the first color (the one in the top-left corner) same as background color, like this\n\n![oh-my-git](https://cloud.githubusercontent.com/assets/6009528/6039646/454c965e-ac69-11e4-8f80-37425181d04b.png)\n\nThis in fact sets the \"black\" color to the same color used as the terminal background.\n\n\nIf for any reasons you cannot change the palette, you can override the colors used to render the last symbol with the variable `omg_last_symbol_color`.\n\nFor example, if the terminal is using a gray background, you can add a\n\n```\nbackground=240\nred='\\e[0;31m'\nomg_last_symbol_color=\"${red}\\[\\033[48;5;${background}m\\]\"\n```\n\nto your `.bashrc` and fix the issue by choosing the right value for `background`.\n\nYou can use\n\n```\nforeground=160\nbackground=240\nomg_last_symbol_color=\"\\[\\033[38;5;${foreground}m\\]\\[\\033[48;5;${background}m\\]\"\n```\n\nif you want a more detailed control on the colors.\n\nFinding the right value is not trivial. Please, refer to [this page](http://bitmote.com/index.php?post/2012/11/19/Using-ANSI-Color-Codes-to-Colorize-Your-Bash-Prompt-on-Linux) for a the 256 colors code table.\n\n---\n\n#### On OS X, I configured iTerm2 with the patched font, but the prompt is still broken.\n\n**A**: iTerm2 preferences have 2 sections for setting the font: one for `Regular Font` and one for `Non-ASCII Font`.\nThe font should be set on both the sections, like showed in the following screenshot:\n\n![iTerm2 Preferences Page](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/iterm2.png)\n\n---\n\n#### <a name=\"install-the-patched-font\"></a>Help! On Linux I can't install the font!\n\n**A**: You should refer to the documentation of [Awesome-Terminal-Fonts](https://github.com/gabrielelana/awesome-terminal-fonts). Anyway, this is how I personally setup the prompt on Ubuntu\n\n    # Copy the awesome fonts to ~/.fonts\n    cd /tmp\n    git clone http://github.com/gabrielelana/awesome-terminal-fonts\n    cd awesome-terminal-fonts\n    git checkout patching-strategy\n    mkdir -p ~/.fonts\n    cp patched/*.ttf ~/.fonts\n\n    # update the font-info cache\n    sudo fc-cache -fv ~/.fonts\n\nThen, run ```gnome-terminal``` (or whatever terminal you like) and select one of the awesome-fonts\n\n![alt tag](https://raw.githubusercontent.com/arialdomartini/oh-my-git-gh-pages/master/images/samples/gnome-terminal.png)\n\nFinally, install oh-my-zsh with the one-liner (if you use Bash) or with Antigen if you love zsh, and restart the Terminal.\n\n---\n\n#### When I'm not in a git repo, I want to use my old, beloved prompt...\n\n**A**: Sure! Use the variable `omg_ungit_prompt`. Store there your old prompt: it will be used when you are not in a git repo.\n\n---\n\n#### Help! I used the one-liner for OS X, but the prompt doesn't start!\n\n**A**: The one-liner for OS X adds the startup command in ```~/.profile```, which is the startup file for generic login shells. If a ```~/.bash_profile``` is present, this is used in place of ```.profile```, and ```.profile``` itself is ignored. To solve your issue, use this alternative one-liner\n\n    cd ~ && git clone https://github.com/arialdomartini/oh-my-git.git && echo source $HOME/.oh-my-git/prompt.sh >> .bash_profile\n\nor just move the startup command\n\n    echo source $HOME/oh-my-git/prompt.sh\n\nfrom ```.profile``` to ```.bash_profile```\n\n---\n\n#### Hey, where's my current virtualenv name? It disappeared from the prompt! Or it appears like this\n\n![virtualenv badly rendered](https://cloud.githubusercontent.com/assets/150719/5852434/06933e88-a217-11e4-81a0-153c5a300b0a.png)\n\n**A**: Yes, actually the virtualenv's approach with prompts is pretty disappointing (see [Virtualenv's bin/activate is Doing It Wrong](https://gist.github.com/datagrok/2199506)): in fact, the script ```activate``` performs a\n\n```\nPS1=\"(`basename \\\"$VIRTUAL_ENV\\\"`)$PS1\"\n```\n\nthat arrogantly prepends the virtualenv name to the current ```PS1```, leaving you no opportunity to customise the output.\n\nYou can solve this problem disabling the standard virtualenv prompt injection and using the callback function `omg_prompt_callback`.\n\nAdd\n\n```\nVIRTUAL_ENV_DISABLE_PROMPT=true\nfunction omg_prompt_callback() {\n    if [ -n \"${VIRTUAL_ENV}\" ]; then\n        echo \"\\e[0;31m(`basename ${VIRTUAL_ENV}`)\\e[0m \"\n    fi\n}\n```\n\nto your shell startup script. It should render the prompt inside an active virtualenv like this\n\n![a proper virtualenv rendering](https://cloud.githubusercontent.com/assets/150719/5852429/e50d18a6-a216-11e4-9b0e-c902f47a1ca4.png)]\n\nYou can use the call back function to inject whatever you want at the beginning of the second line.\n\n# Known bugs and limitations\n\n* git v1.8.4 or newer is required\n* It works weird on brand new repositories, before the first commit\n* It has been tested on Mac and Ubuntu only. I never managed to make it work on Cygwin\n* Depending on the theme selected, you need an unicode font (like Sauce Code Pro, Menlo or Monaco on Mac OS X, or Monospace on Ubuntu; on Windows, with Cygwin, a good choice is [Meslo](https://github.com/andreberg/Meslo-Font) by [André Berg](https://github.com/andreberg), but I didn't tested the ooppa-lana-style theme)\n* If the Terminal uses a clear background color, in Bash you need to change the colors defined in [prompt.sh](https://github.com/arialdomartini/oh-my-git/blob/oppa-lana-style/prompt.sh). The zsh version is not affected by this problem.\n"
        },
        {
          "name": "base.sh",
          "type": "blob",
          "size": 5.0380859375,
          "content": "function enrich {\n    local flag=$1\n    local symbol=$2\n\n    local color_on=${3:-$omg_default_color_on}\n\n    if [[ $flag != true && $omg_use_color_off == false ]]; then symbol=' '; fi\n    if [[ $flag == true ]]; then local color=$color_on; else local color=$omg_default_color_off; fi    \n\n    echo -n \"${prompt}${color}${symbol}${reset} \"\n}\n\nfunction get_current_action () {\n    local info=\"$(git rev-parse --git-dir 2>/dev/null)\"\n    if [ -n \"$info\" ]; then\n        local action\n        if [ -f \"$info/rebase-merge/interactive\" ]\n        then\n            action=${is_rebasing_interactively:-\"rebase -i\"}\n        elif [ -d \"$info/rebase-merge\" ]\n        then\n            action=${is_rebasing_merge:-\"rebase -m\"}\n        else\n            if [ -d \"$info/rebase-apply\" ]\n            then\n                if [ -f \"$info/rebase-apply/rebasing\" ]\n                then\n                    action=${is_rebasing:-\"rebase\"}\n                elif [ -f \"$info/rebase-apply/applying\" ]\n                then\n                    action=${is_applying_mailbox_patches:-\"am\"}\n                else\n                    action=${is_rebasing_mailbox_patches:-\"am/rebase\"}\n                fi\n            elif [ -f \"$info/MERGE_HEAD\" ]\n            then\n                action=${is_merging:-\"merge\"}\n            elif [ -f \"$info/CHERRY_PICK_HEAD\" ]\n            then\n                action=${is_cherry_picking:-\"cherry-pick\"}\n            elif [ -f \"$info/BISECT_LOG\" ]\n            then\n                action=${is_bisecting:-\"bisect\"}\n            fi\n        fi\n\n        if [[ -n $action ]]; then printf \"%s\" \"${1-}$action${2-}\"; fi\n    fi\n}\n\nfunction build_prompt {\n    local enabled=`git config --get oh-my-git.enabled`\n    if [[ ${enabled} == false ]]; then\n        echo \"${PSORG}\"\n        exit;\n    fi\n\n    local prompt=\"\"\n    \n    # Git info\n    local current_commit_hash=$(git rev-parse HEAD 2> /dev/null)\n    if [[ -n $current_commit_hash ]]; then local is_a_git_repo=true; fi\n    \n    if [[ $is_a_git_repo == true ]]; then\n        local current_branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)\n        if [[ $current_branch == 'HEAD' ]]; then local detached=true; fi\n\n        local number_of_logs=\"$(git log --pretty=oneline -n1 2> /dev/null | wc -l)\"\n        if [[ $number_of_logs -eq 0 ]]; then\n            local just_init=true\n        else\n            local upstream=$(git rev-parse --symbolic-full-name --abbrev-ref @{upstream} 2> /dev/null)\n            if [[ -n \"${upstream}\" && \"${upstream}\" != \"@{upstream}\" ]]; then local has_upstream=true; fi\n\n            local git_status=\"$(git status --porcelain 2> /dev/null)\"\n            local action=\"$(get_current_action)\"\n\n            if [[ $git_status =~ ($'\\n'|^).M ]]; then local has_modifications=true; fi\n            if [[ $git_status =~ ($'\\n'|^)M ]]; then local has_modifications_cached=true; fi\n            if [[ $git_status =~ ($'\\n'|^)A ]]; then local has_adds=true; fi\n            if [[ $git_status =~ ($'\\n'|^).D ]]; then local has_deletions=true; fi\n            if [[ $git_status =~ ($'\\n'|^)D ]]; then local has_deletions_cached=true; fi\n            if [[ $git_status =~ ($'\\n'|^)[MAD] && ! $git_status =~ ($'\\n'|^).[MAD\\?] ]]; then local ready_to_commit=true; fi\n\n            local number_of_untracked_files=$(\\grep -c \"^??\" <<< \"${git_status}\")\n            if [[ $number_of_untracked_files -gt 0 ]]; then local has_untracked_files=true; fi\n        \n            local tag_at_current_commit=$(git describe --exact-match --tags $current_commit_hash 2> /dev/null)\n            if [[ -n $tag_at_current_commit ]]; then local is_on_a_tag=true; fi\n        \n            if [[ $has_upstream == true ]]; then\n                local commits_ahead commits_behind\n                read -r commits_ahead commits_behind <<<$(git rev-list --left-right --count ${current_commit_hash}...${upstream} 2> /dev/null)\n            fi\n\n            if [[ $commits_ahead -gt 0 && $commits_behind -gt 0 ]]; then local has_diverged=true; fi\n            if [[ $has_diverged == false && $commits_ahead -gt 0 ]]; then local should_push=true; fi\n        \n            local will_rebase=$(git config --get branch.${current_branch}.rebase 2> /dev/null)\n        \n            local number_of_stashes=\"$(git stash list -n1 2> /dev/null | wc -l)\"\n            if [[ $number_of_stashes -gt 0 ]]; then local has_stashes=true; fi\n        fi\n    fi\n    \n    echo \"$(custom_build_prompt ${enabled:-true} ${current_commit_hash:-\"\"} ${is_a_git_repo:-false} ${current_branch:-\"\"} ${detached:-false} ${just_init:-false} ${has_upstream:-false} ${has_modifications:-false} ${has_modifications_cached:-false} ${has_adds:-false} ${has_deletions:-false} ${has_deletions_cached:-false} ${has_untracked_files:-false} ${ready_to_commit:-false} ${tag_at_current_commit:-\"\"} ${is_on_a_tag:-false} ${has_upstream:-false} ${commits_ahead:-false} ${commits_behind:-false} ${has_diverged:-false} ${should_push:-false} ${will_rebase:-false} ${has_stashes:-false} ${action})\"\n    \n}\n\nfunction_exists() {\n    declare -f -F $1 > /dev/null\n    return $?\n}\n\nfunction eval_prompt_callback_if_present {\n        function_exists omg_prompt_callback && echo \"$(omg_prompt_callback)\"\n}\n"
        },
        {
          "name": "prompt.sh",
          "type": "blob",
          "size": 7.1923828125,
          "content": "PSORG=$PS1;\nPROMPT_COMMAND_ORG=$PROMPT_COMMAND;\n\nif [ -n \"${BASH_VERSION}\" ]; then\n    DIR=\"$( cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd )\"\n    source ${DIR}/base.sh\n\n    : ${omg_ungit_prompt:=$PS1}\n    : ${omg_second_line:=$PS1}\n\n    : ${omg_is_a_git_repo_symbol:=''}\n    : ${omg_has_untracked_files_symbol:=''}        #                ?    \n    : ${omg_has_adds_symbol:=''}\n    : ${omg_has_deletions_symbol:=''}\n    : ${omg_has_cached_deletions_symbol:=''}\n    : ${omg_has_modifications_symbol:=''}\n    : ${omg_has_cached_modifications_symbol:=''}\n    : ${omg_ready_to_commit_symbol:=''}            #   →\n    : ${omg_is_on_a_tag_symbol:=''}                #   \n    : ${omg_needs_to_merge_symbol:='ᄉ'}\n    : ${omg_detached_symbol:=''}\n    : ${omg_can_fast_forward_symbol:=''}\n    : ${omg_has_diverged_symbol:=''}               #   \n    : ${omg_not_tracked_branch_symbol:=''}\n    : ${omg_rebase_tracking_branch_symbol:=''}     #   \n    : ${omg_merge_tracking_branch_symbol:=''}      #  \n    : ${omg_should_push_symbol:=''}                #    \n    : ${omg_has_stashes_symbol:=''}\n\n    : ${omg_default_color_on:='\\[\\033[1;37m\\]'}\n    : ${omg_default_color_off:='\\[\\033[0m\\]'}\n    : ${omg_last_symbol_color:='\\e[0;31m\\e[40m'}\n    \n    PROMPT='$(build_prompt)'\n    RPROMPT='%{$reset_color%}%T %{$fg_bold[white]%} %n@%m%{$reset_color%}'\n\n    function enrich_append {\n        local flag=$1\n        local symbol=$2\n        local color=${3:-$omg_default_color_on}\n        if [[ $flag == false ]]; then symbol=' '; fi\n\n        echo -n \"${color}${symbol}  \"\n    }\n\n    function custom_build_prompt {\n        local enabled=${1}\n        local current_commit_hash=${2}\n        local is_a_git_repo=${3}\n        local current_branch=$4\n        local detached=${5}\n        local just_init=${6}\n        local has_upstream=${7}\n        local has_modifications=${8}\n        local has_modifications_cached=${9}\n        local has_adds=${10}\n        local has_deletions=${11}\n        local has_deletions_cached=${12}\n        local has_untracked_files=${13}\n        local ready_to_commit=${14}\n        local tag_at_current_commit=${15}\n        local is_on_a_tag=${16}\n        local has_upstream=${17}\n        local commits_ahead=${18}\n        local commits_behind=${19}\n        local has_diverged=${20}\n        local should_push=${21}\n        local will_rebase=${22}\n        local has_stashes=${23}\n\n        local prompt=\"\"\n        local original_prompt=$PS1\n\n\n        # foreground\n        local black='\\e[0;30m'\n        local red='\\e[0;31m'\n        local green='\\e[0;32m'\n        local yellow='\\e[0;33m'\n        local blue='\\e[0;34m'\n        local purple='\\e[0;35m'\n        local cyan='\\e[0;36m'\n        local white='\\e[0;37m'\n\n        #background\n        local background_black='\\e[40m'\n        local background_red='\\e[41m'\n        local background_green='\\e[42m'\n        local background_yellow='\\e[43m'\n        local background_blue='\\e[44m'\n        local background_purple='\\e[45m'\n        local background_cyan='\\e[46m'\n        local background_white='\\e[47m'\n        \n        local reset='\\e[0m'     # Text Reset]'\n\n        local black_on_white=\"${black}${background_white}\"\n        local yellow_on_white=\"${yellow}${background_white}\"\n        local red_on_white=\"${red}${background_white}\"\n        local red_on_black=\"${red}${background_black}\"\n        local black_on_red=\"${black}${background_red}\"\n        local white_on_red=\"${white}${background_red}\"\n        local yellow_on_red=\"${yellow}${background_red}\"\n\n\n        # Flags\n        local omg_default_color_on=\"${black_on_white}\"\n\n        if [[ $is_a_git_repo == true ]]; then\n            # on filesystem\n            prompt=\"${black_on_white} \"\n            prompt+=$(enrich_append $is_a_git_repo $omg_is_a_git_repo_symbol \"${black_on_white}\")\n            prompt+=$(enrich_append $has_stashes $omg_has_stashes_symbol \"${yellow_on_white}\")\n\n            prompt+=$(enrich_append $has_untracked_files $omg_has_untracked_files_symbol \"${red_on_white}\")\n            prompt+=$(enrich_append $has_modifications $omg_has_modifications_symbol \"${red_on_white}\")\n            prompt+=$(enrich_append $has_deletions $omg_has_deletions_symbol \"${red_on_white}\")\n            \n\n            # ready\n            prompt+=$(enrich_append $has_adds $omg_has_adds_symbol \"${black_on_white}\")\n            prompt+=$(enrich_append $has_modifications_cached $omg_has_cached_modifications_symbol \"${black_on_white}\")\n            prompt+=$(enrich_append $has_deletions_cached $omg_has_cached_deletions_symbol \"${black_on_white}\")\n            \n            # next operation\n\n            prompt+=$(enrich_append $ready_to_commit $omg_ready_to_commit_symbol \"${red_on_white}\")\n\n            # where\n\n            prompt=\"${prompt} ${white_on_red} ${black_on_red}\"\n            if [[ $detached == true ]]; then\n                prompt+=$(enrich_append $detached $omg_detached_symbol \"${white_on_red}\")\n                prompt+=$(enrich_append $detached \"(${current_commit_hash:0:7})\" \"${black_on_red}\")\n            else            \n                if [[ $has_upstream == false ]]; then\n                    prompt+=$(enrich_append true \"-- ${omg_not_tracked_branch_symbol}  --  (${current_branch})\" \"${black_on_red}\")\n                else\n                    if [[ $will_rebase == true ]]; then\n                        local type_of_upstream=$omg_rebase_tracking_branch_symbol\n                    else\n                        local type_of_upstream=$omg_merge_tracking_branch_symbol\n                    fi\n\n                    if [[ $has_diverged == true ]]; then\n                        prompt+=$(enrich_append true \"-${commits_behind} ${omg_has_diverged_symbol} +${commits_ahead}\" \"${white_on_red}\")\n                    else\n                        if [[ $commits_behind -gt 0 ]]; then\n                            prompt+=$(enrich_append true \"-${commits_behind} ${white_on_red}${omg_can_fast_forward_symbol}${black_on_red} --\" \"${black_on_red}\")\n                        fi\n                        if [[ $commits_ahead -gt 0 ]]; then\n                            prompt+=$(enrich_append true \"-- ${white_on_red}${omg_should_push_symbol}${black_on_red}  +${commits_ahead}\" \"${black_on_red}\")\n                        fi\n                        if [[ $commits_ahead == 0 && $commits_behind == 0 ]]; then\n                            prompt+=$(enrich_append true \" --   -- \" \"${black_on_red}\")\n                        fi\n                        \n                    fi\n                    prompt+=$(enrich_append true \"(${current_branch} ${type_of_upstream} ${upstream//\\/$current_branch/})\" \"${black_on_red}\")\n                fi\n            fi\n            prompt+=$(enrich_append ${is_on_a_tag} \"${omg_is_on_a_tag_symbol} ${tag_at_current_commit}\" \"${black_on_red}\")\n            prompt+=\"${omg_last_symbol_color}${reset}\\n\"\n            prompt+=\"$(eval_prompt_callback_if_present)\"\n            prompt+=\"${omg_second_line}\"\n        else\n            prompt+=\"$(eval_prompt_callback_if_present)\"\n            prompt+=\"${omg_ungit_prompt}\"\n        fi\n\n        echo \"${prompt}\"\n    }\n    \n    PS2=\"${yellow}→${reset} \"\n\n    function bash_prompt() {\n        PS1=\"$(build_prompt)\"\n    }\n\n    PROMPT_COMMAND=\"bash_prompt; $PROMPT_COMMAND_ORG\"\n\nfi\n"
        }
      ]
    }
  ]
}