{
  "metadata": {
    "timestamp": 1736568593690,
    "page": 652,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "nicokaiser/rpi-audio-receiver",
      "stars": 1429,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0078125,
          "content": ".vscode\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.06640625,
          "content": "MIT License\n\nCopyright (c) 2018-present Nico Kaiser <nico@kaiser.me>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE."
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 8.9248046875,
          "content": "# Raspberry Pi Audio Receiver\n\nA simple, light weight audio receiver with Bluetooth (A2DP), AirPlay 2, and Spotify Connect.\n\n## Features\n\nDevices like phones, tablets and computers can play audio via this receiver.\n\n## Requirements\n\n- A USB Bluetooth dongle (the internal Raspberry Pi Bluetooth chipset turned out as not suited for audio playback and causes all kinds of strange connectivity problems)\n- Raspberry Pi OS 12 Lite\n- Internal audio, HDMI, USB or I2S Audio adapter (tested with [Adafruit USB Audio Adapter](https://www.adafruit.com/product/1475),  [pHAT DAC](https://shop.pimoroni.de/products/phat-dac), and [HifiBerry DAC+](https://www.hifiberry.com/products/dacplus/))\n\n**Again: do not try to use the internal Bluetooth chip, this will only bring you many hours of frustration.**\n\n## Installation\n\nThe installation script asks whether to install each component.\n\n    wget https://raw.githubusercontent.com/nicokaiser/rpi-audio-receiver/main/install.sh\n    bash install.sh\n\n**Note**: the installation process is not reversible, there is no uninstall. The script is meant to be run on a clean device that is not used for anything else.\n\n### Basic setup\n\nLets you choose the hostname and the visible device name (\"pretty hostname\") which is displayed as Bluetooth name, in AirPlay clients and in Spotify.\n\n### Bluetooth\n\nSets up Bluetooth, adds a simple agent that accepts every connection, and enables audio playback through ALSA. A udev script is installed that disables discoverability while connected.\n\n### AirPlay 2\n\nInstalls [Shairport Sync](https://github.com/mikebrady/shairport-sync) AirPlay 2 Audio Receiver.\n\n### Spotify Connect\n\nInstalls [Raspotify](https://github.com/dtcooper/raspotify), an open source Spotify client for Raspberry Pi.\n\n## Additional steps\n\n### Enable HiFiBerry device\n\nWhen using a HiFiBerry or similar I2C device, a device tree overlay needs to be enabled in `/boot/firmware/config.txt` (replace `dacplus` with the overlay that fits your hardware):\n\n```\n...\ndtoverlay=hifiberry-dacplus\n```\n\nTo enable the software volume mixer, `/etc/asound.conf` needs to be created:\n\n```\ndefaults.pcm.card 0\ndefaults.ctl.card 0\n\npcm.hifiberry {\n  type hw\n  card 0\n  device 0\n}\npcm.dmixer {\n  type dmix\n  ipc_key 1024\n  ipc_perm 0666\n  slave.pcm \"hifiberry\"\n  slave {\n    period_time 0\n    period_size 1024\n    buffer_size 8192\n    rate 44100\n    format S32_LE\n  }\n  bindings {\n    0 0\n    1 1\n  }\n}\nctl.dmixer {\n  type hw\n  card 0\n}\npcm.softvol {\n  type softvol\n  slave.pcm \"dmixer\"\n  control {\n    name \"Softvol\"\n    card 0\n  }\n  min_dB -90.2\n  max_dB 0.0\n}\npcm.!default {\n  type plug\n  slave.pcm \"softvol\"\n}\n```\n\n### Read-only mode\n\nTo avoid SD card corruption when powering off, you can boot Raspberry Pi OS in read-only mode. This can be achieved using the `raspi-config` script (in the \"Performance\" section).\n\n### Disable Wi-Fi power management\n\nDisabling Wi-Fi power management might resolve some connection issues:\n\n```sh\nsudo nmcli connection modify preconfigured wifi.powersave 2\n```\n\n### Disable internal Bluetooth and Audio\n\nWhen an external audio device (HDMI, USB, I2S) is used, the internal audio can be disabled in `/boot/firmware/config.txt` (replace `hifiberry-dacplus` with the overlay which fits your installation):\n\n```\n...\ndtoverlay=disable-bt\ndtparam=audio=off\ndtoverlay=vc4-kms-v3d,noaudio\ndtoverlay=hifiberry-dacplus\n```\n\n### Add Bluetooth devices\n\nThe device should be visible for new Bluetooth connections, but in some cases you might need to pair them manually:\n\n    sudo bluetoothctl\n    power on\n    agent on\n    # Now search for available bluetooth devices from your device\n    # Once paired note down the MAC address of your device \n    trust 00:00:00:00:00:00 # Put device MAC address here so after reboot it can automatically re-connect again\n\n### Disable Wi-Fi when Bluetooth is connected\n\nDislaimer: You really might want to use a Bluetooth USB dongle. The internal Bluetooth module of the Raspberry Pi (all versions) is very limited and using it for audio transmission will most certainly lead to problems and unexpected behaviour, see [raspberrypi/linux/#1402](https://github.com/raspberrypi/linux/issues/1402).\n\nIf you really want to use the internal Bluetooth module, you almost certainly need to disable Wi-Fi.\n\nModify `/usr/local/bin/bluetooth-udev` and remove the comments (`#`) around the `ifconfig` calls:\n\n```\n...\nif [ \"$action\" = \"add\" ]; then\n    ...\n    # disconnect wifi to prevent dropouts\n    ifconfig wlan0 down &\nfi\n\nif [ \"$action\" = \"remove\" ]; then\n    # reenable wifi\n    ifconfig wlan0 up &\n    ...\nfi\n```\n\n### Bluetooth A2DP volume\n\nTo enable A2DP volume control, add the `--plugin=a2dp` parameter to the `bluetoothd` command line. This helps setting the volume via Bluetooth, but does not work on all setups.\n\n```sh\n# Enable A2DP volume control\nmkdir -p /etc/systemd/system/bluetooth.service.d\ncat <<'EOF' > /etc/systemd/system/bluetooth.service.d/override.conf\n[Service]\nExecStart=\nExecStart=/usr/libexec/bluetooth/bluetoothd --plugin=a2dp\nEOF\n```\n\n### Bluetooth Fast Connectable\n\nUsing the `FastConnectable` flag may lead to faster Bluetooth connections, but may also lead to poor sound quality. You can try and see if it works for you. See [#70](https://github.com/nicokaiser/rpi-audio-receiver/issues/70)\n\nAdd the flag to the `General` section in `/etc/bluetooth/main.conf`:\n\n```\n[General]\n...\nFastConnectable = true\n...\n```\n\n### Bluetooth pairing with PIN\n\nTo enable pairing with a PIN code instead of Simple Secure Pairing mode, the following steps are required:\n\n1. Change `sspmode 1` to `sspmode 0` in `/etc/systemd/system/bt-agent@.service`\n2. Add ` --pin /etc/bluetooth/pin.conf` to the `ExecStart` line in `/etc/systemd/system/bt-agent@.service`\n3. Add a file `/etc/bluetooth/pin.conf` which contains PIN code for the devices:\n\n`AA:BB:CC:DD:EE:FF 1234` (replace `AA:BB:CC:DD:EE:FF` with your Bluetooth devices's Mac address or `*` to use PIN `1234` for all devices)\n\n#### Notes\n\n- **This does not work with iOS devices.** iOS refuses to pair with devices that do not support SSP. So sspmode needs to be on\n- Even with sspmode=1 and a PIN file, iOS would not connect at all\n- macOS allows pairing with devices with sspmode=0 (and a PIN configured on the Pi). When sspmode=1, macOS decides upon a PIN and either the Pi has a fixed PIN list (which does not match => connection refused), or requires keyboard input on the Pi (which is not desired for a headless device).\n\nSo you need to try yourself if this works with your setup.\n\n## Limitations\n\n- Only one Bluetooth device can be connected at a time, otherwise interruptions may occur.\n- The device is always open, new clients can connect at any time without authentication.\n- To permanently save paired devices when using read-only mode, the Raspberry has to be switched to read-write mode until all devices have been paired once.\n- You might want to use a Bluetooth USB dongle or have the script disable Wi-Fi while connected (see `bluetooth-udev`), as the BCM43438 (Raspberry Pi 3, Zero W) has severe problems with both switched on, see [raspberrypi/linux/#1402](https://github.com/raspberrypi/linux/issues/1402).\n- The Pi Zero may not be powerful enough to play 192 kHz audio, you may want to change the values in `/etc/asound.conf` accordingly.\n\n## Disclaimer\n\nThese scripts are tested and work on a current Raspberry Pi OS setup on Raspberry Pi. Depending on your setup (board, configuration, sound module, Bluetooth adapter) and your preferences, you might need to adjust the scripts. They are held as simple as possible and can be used as a starting point for additional adjustments.\n\n## Upgrading\n\nThis project does not really support upgrading to newer versions of this script. It is meant to be adjusted to your needs and run on a clean Raspberry Pi OS install. When something goes wrong, the easiest way is to just wipe the SD card and start over. Since apart from Bluetooth pairing information all parts are stateless, this should be ok.\n\nUpdating the system using `apt-get upgrade` should work however.\n\n## Contributing\n\nPackage and configuration choices are quite opinionated but as close to the Debian defaults as possible. Customizations can be made by modifying the scripts, but the installer should stay as simple as possible, with as few choices as possible. That said, pull requests and suggestions are of course always welcome. However I might decide not to merge changes that add too much complexity.\n\n## Related projects\n\nThere are many forks and similar projects that are optimized for more specific requirements.\n\n- [Arcaria197/rpi-audio-receiver](https://github.com/Arcadia197/rpi-audio-receiver) - a fork that uses Raspbian 10 (legacy) and runs on Raspberry Pi Zero W hardware\n- [HiFiBerryOS](https://github.com/hifiberry/hifiberry-os/) - a more sophisticated approach on this, using an entirely custom (buildroot) ecosystem\n\n## References\n\n- [Shairport Sync: AirPlay 2 audio player](https://github.com/mikebrady/shairport-sync)\n- [Raspotify: A Spotify Connect client that mostly Just Works™](https://github.com/dtcooper/raspotify)\n\n## License\n\n[MIT](LICENSE)\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 5.54296875,
          "content": "#!/bin/bash\n\nset -e\n\nNQPTP_VERSION=\"1.2.4\"\nSHAIRPORT_SYNC_VERSION=\"4.3.2\"\nTMP_DIR=\"\"\n\ncleanup() {\n    if [ -d \"${TMP_DIR}\" ]; then\n        rm -rf \"${TMP_DIR}\"\n    fi\n}\n\nverify_os() {\n    MSG=\"Unsupported OS: Raspberry Pi OS 12 (bookworm) is required.\"\n\n    if [ ! -f /etc/os-release ]; then\n        echo $MSG\n        exit 1\n    fi\n\n    . /etc/os-release\n\n    if [ \"$ID\" != \"debian\" && \"$ID\" != \"raspbian\" ] || [ \"$VERSION_ID\" != \"12\" ]; then\n        echo $MSG\n        exit 1\n    fi\n}\n\nset_hostname() {\n    CURRENT_PRETTY_HOSTNAME=$(hostnamectl status --pretty)\n\n    read -p \"Hostname [$(hostname)]: \" HOSTNAME\n    sudo raspi-config nonint do_hostname ${HOSTNAME:-$(hostname)}\n\n    read -p \"Pretty hostname [${CURRENT_PRETTY_HOSTNAME:-Raspberry Pi}]: \" PRETTY_HOSTNAME\n    PRETTY_HOSTNAME=\"${PRETTY_HOSTNAME:-${CURRENT_PRETTY_HOSTNAME:-Raspberry Pi}}\"\n    sudo hostnamectl set-hostname --pretty \"$PRETTY_HOSTNAME\"\n}\n\ninstall_bluetooth() {\n    read -p \"Do you want to install Bluetooth Audio (ALSA)? [y/N] \" REPLY\n    if [[ ! \"$REPLY\" =~ ^(yes|y|Y)$ ]]; then return; fi\n\n    # Bluetooth Audio ALSA Backend (bluez-alsa-utils)\n    sudo apt update\n    sudo apt install -y --no-install-recommends bluez-tools bluez-alsa-utils\n\n    # Bluetooth settings\n    sudo tee /etc/bluetooth/main.conf >/dev/null <<'EOF'\n[General]\nClass = 0x200414\nDiscoverableTimeout = 0\n\n[Policy]\nAutoEnable=true\nEOF\n\n    # Bluetooth Agent\n    sudo tee /etc/systemd/system/bt-agent@.service >/dev/null <<'EOF'\n[Unit]\nDescription=Bluetooth Agent\nRequires=bluetooth.service\nAfter=bluetooth.service\n\n[Service]\nExecStartPre=/usr/bin/bluetoothctl discoverable on\nExecStartPre=/bin/hciconfig %I piscan\nExecStartPre=/bin/hciconfig %I sspmode 1\nExecStart=/usr/bin/bt-agent --capability=NoInputNoOutput\nRestartSec=5\nRestart=always\nKillSignal=SIGUSR1\n\n[Install]\nWantedBy=multi-user.target\nEOF\n    sudo systemctl daemon-reload\n    sudo systemctl enable bt-agent@hci0.service\n\n    # Bluetooth udev script\n    sudo tee /usr/local/bin/bluetooth-udev >/dev/null <<'EOF'\n#!/bin/bash\nif [[ ! $NAME =~ ^\\\"([0-9A-F]{2}[:-]){5}([0-9A-F]{2})\\\"$ ]]; then exit 0; fi\n\naction=$(expr \"$ACTION\" : \"\\([a-zA-Z]\\+\\).*\")\n\nif [ \"$action\" = \"add\" ]; then\n    bluetoothctl discoverable off\n    # disconnect wifi to prevent dropouts\n    #ifconfig wlan0 down &\nfi\n\nif [ \"$action\" = \"remove\" ]; then\n    # reenable wifi\n    #ifconfig wlan0 up &\n    bluetoothctl discoverable on\nfi\nEOF\n    sudo chmod 755 /usr/local/bin/bluetooth-udev\n\n    sudo tee /etc/udev/rules.d/99-bluetooth-udev.rules >/dev/null <<'EOF'\nSUBSYSTEM==\"input\", GROUP=\"input\", MODE=\"0660\"\nKERNEL==\"input[0-9]*\", RUN+=\"/usr/local/bin/bluetooth-udev\"\nEOF\n}\n\ninstall_shairport() {\n    read -p \"Do you want to install Shairport Sync (AirPlay 2 audio player)? [y/N] \" REPLY\n    if [[ ! \"$REPLY\" =~ ^(yes|y|Y)$ ]]; then return; fi\n\n    sudo apt update\n    sudo apt install -y --no-install-recommends wget unzip autoconf automake build-essential libtool git autoconf automake libpopt-dev libconfig-dev libasound2-dev avahi-daemon libavahi-client-dev libssl-dev libsoxr-dev libplist-dev libsodium-dev libavutil-dev libavcodec-dev libavformat-dev uuid-dev libgcrypt20-dev xxd\n\n    if [[ -z \"$TMP_DIR\" ]]; then\n        TMP_DIR=$(mktemp -d)\n    fi\n\n    cd $TMP_DIR\n\n    # Install ALAC\n    wget -O alac-master.zip https://github.com/mikebrady/alac/archive/refs/heads/master.zip\n    unzip alac-master.zip\n    cd alac-master\n    autoreconf -fi\n    ./configure\n    make -j $(nproc)\n    sudo make install\n    sudo ldconfig\n    cd ..\n    rm -rf alac-master\n\n    # Install NQPTP\n    wget -O nqptp-${NQPTP_VERSION}.zip https://github.com/mikebrady/nqptp/archive/refs/tags/${NQPTP_VERSION}.zip\n    unzip nqptp-${NQPTP_VERSION}.zip\n    cd nqptp-${NQPTP_VERSION}\n    autoreconf -fi\n    ./configure --with-systemd-startup\n    make -j $(nproc)\n    sudo make install\n    cd ..\n    rm -rf nqptp-${NQPTP_VERSION}\n\n    # Install Shairport Sync\n    wget -O shairport-sync-${SHAIRPORT_SYNC_VERSION}.zip https://github.com/mikebrady/shairport-sync/archive/refs/tags/${SHAIRPORT_SYNC_VERSION}.zip\n    unzip shairport-sync-${SHAIRPORT_SYNC_VERSION}.zip\n    cd shairport-sync-${SHAIRPORT_SYNC_VERSION}\n    autoreconf -fi\n    ./configure --sysconfdir=/etc --with-alsa --with-soxr --with-avahi --with-ssl=openssl --with-systemd --with-airplay-2 --with-apple-alac\n    make -j $(nproc)\n    sudo make install\n    cd ..\n    rm -rf shairport-sync-${SHAIRPORT_SYNC_VERSION}\n\n    # Configure Shairport Sync\n    sudo tee /etc/shairport-sync.conf >/dev/null <<EOF\ngeneral = {\n  name = \"${PRETTY_HOSTNAME:-$(hostname)}\";\n  output_backend = \"alsa\";\n}\n\nsessioncontrol = {\n  session_timeout = 20;\n};\nEOF\n\n    sudo usermod -a -G gpio shairport-sync\n    sudo systemctl enable --now nqptp\n    sudo systemctl enable --now shairport-sync\n}\n\ninstall_raspotify() {\n    read -p \"Do you want to install Raspotify (Spotify Connect)? [y/N] \" REPLY\n    if [[ ! \"$REPLY\" =~ ^(yes|y|Y)$ ]]; then return; fi\n\n    # Install Raspotify\n    curl -sL https://dtcooper.github.io/raspotify/install.sh | sh\n\n    # Configure Raspotify\n    LIBRESPOT_NAME=\"${PRETTY_HOSTNAME// /-}\"\n    LIBRESPOT_NAME=${LIBRESPOT_NAME:-$(hostname)}\n\n    sudo tee /etc/raspotify/conf >/dev/null <<EOF\nLIBRESPOT_QUIET=\nLIBRESPOT_AUTOPLAY=\nLIBRESPOT_DISABLE_AUDIO_CACHE=\nLIBRESPOT_DISABLE_CREDENTIAL_CACHE=\nLIBRESPOT_ENABLE_VOLUME_NORMALISATION=\nLIBRESPOT_NAME=\"${LIBRESPOT_NAME}\"\nLIBRESPOT_DEVICE_TYPE=\"avr\"\nLIBRESPOT_BITRATE=\"320\"\nLIBRESPOT_INITIAL_VOLUME=\"100\"\nEOF\n\n    sudo systemctl daemon-reload\n    sudo systemctl enable raspotify\n}\n\ntrap cleanup EXIT\n\necho \"Raspberry Pi Audio Receiver\"\n\nverify_os\nset_hostname\ninstall_bluetooth\ninstall_shairport\ninstall_raspotify\n"
        }
      ]
    }
  ]
}