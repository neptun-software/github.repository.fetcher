{
  "metadata": {
    "timestamp": 1736568728069,
    "page": 829,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "shellspec/shellspec",
      "stars": 1185,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codecov.yml",
          "type": "blob",
          "size": 0.0830078125,
          "content": "coverage:\n  status:\n    project:\n      default:\n        target: 30%\n    patch: false\n"
        },
        {
          "name": ".dockerhub",
          "type": "tree",
          "content": null
        },
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.25390625,
          "content": "*\n!.dockerhub/shellspec-docker-entrypoint.sh\n!bin\n!contrib/bugs.sh\n!lib\n!libexec\n!dockerfiles/.shellspec-entrypoint.sh\n!examples\n!helper\n!spec\n!stub\nhelper/fixture/stat/*\n!.shellspec\n!shellspec\n!install.sh\n!LICENSE\n!Makefile\n!package.json\n!*.sh\n!.shellcheckrc\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.083984375,
          "content": "* text=auto eol=lf\nhelper/fixture/** -text\ndockerfiles/* linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.087890625,
          "content": ".env\n.shellspec-local\n.shellspec-quick.log\n/*.tar.gz\nreport\ncoverage-*\ncoverage\nttyrecord\n"
        },
        {
          "name": ".shellcheck-version",
          "type": "blob",
          "size": 0.0078125,
          "content": "v0.10.0\n"
        },
        {
          "name": ".shellcheckrc",
          "type": "blob",
          "size": 0.0146484375,
          "content": "disable=SC2317\n"
        },
        {
          "name": ".shellspec",
          "type": "blob",
          "size": 0.3173828125,
          "content": "--require spec_helper\n--require ksh_workaround\n--helperdir helper\n--sandbox\n--skip-message moderate\n--fail-no-examples\n--env-from helper/env.sh\n--kcov-options \"--include-pattern=\"\n--kcov-options \"--include-path=./shellspec,./install.sh,./lib,./libexec\"\n--kcov-options \"--exclude-pattern=/.,_generated.sh\"\n--hide-deprecations\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 17.3974609375,
          "content": "# Changelog\n\nAll notable changes to this project will be documented in this file.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## [Unreleased]\n\n## [0.28.1] - 2021-01-11\n\n### Changed\n\n- Improved documentation. Thanks to Yohei Kawahara (#173).\n\n### Fixed\n\n- bash: Fixed an unexpected error message in self-executable specfile.\n- Fixed a bug that test command cannot redefine when using \"when run source\"\n- Fixed a bug when specified relative tmp directory path.\n- Fixed option parsing\n\n## [0.28.0] - 2021-01-05\n\n### Added\n\n- Added `BeforeEach` / `AfterEach` as synonym for `Before` / `After`.\n- Added `FORCE_COLOR` environment variable.\n- Added `--tmpdir` option.\n- Added `--execdir` option to specify the directory for specfile execution.\n- Added `-c` (`--chdir`) and `-C` (`--directory`) options to change directory at startup.\n- Added path syntax (`*/` and `**/`) and `-L` (`--dereference`) option to match recursive directories.\n- Added `--helperdir` to specify the location of `spec_helper` etc.\n- Added the environment variable `SHELLSPEC_HELPERDIR` to indicate the location of `spec_helper` etc.\n- Added `--reportdir` and `--covdir` options.\n- Added `-O` (`--option`) option.\n- Added `-I` (`--load-path`) option.\n- Added `<module>_precheck` callback and some helper functions to `spec_helper` for pre-checking.\n- Added `<module>_loaded` callback to be called after `spec_helper` loading.\n\n### Changed\n\n- Replaced with a new option parser [getoptions](https://github.com/ko1nksm/getoptions) which supports the standard option syntax.\n- Replaced `--keep-tempdir` with `--keep-tmpdir`.\n- Specifying a file in the shellspec's argument is now ignored if it does not match `--pattern`.\n- Filled in system-out and system-err in junit xml.\n- Allowed run the tests from any subdirectory.\n- The `-D` option has been deprecated (Replace with the `--default-path` option).\n- The environment variable `SHELLSPEC_SPECDIR` has been deprecated since there is not always a single directory for specfiles.\n- Rename `.shellspec-profiler.log` to `profiler.log` for profiler log.\n- Accept `banner.md` as a banner file\n- `Include` and `import` (`shellspec_import`) can now pass arguments.\n- The delimiter of the environment variable `SHELLSPEC_REQUIRES` has been changed from `:` to space.\n- Improved documentation. Thanks to ldicarlo (#117, #119), Antoni Marcinek (#120, #139), Stuart R. Jefferys (#155), Leon Stafford (#159).\n\n### Removed\n\n- Removed `--kcov-common-options` option.\n\n### Fixed\n\n- bash 4.1 - 4.3: Fixed a bug that `run script` could not get the exit status.\n- zsh < 4.2.0: Fixed a bug when extendedglob is enabled.\n- Fixed possibility of I/O error in satisfy matcher (GitHub Actions only?).\n- Fixed a bug in which zsh on macOS occasionally exits with exit code 147 (SIGCONT).\n- Fixed several bugs related to the Windows path for busybox-w32.\n- Fixed a bug when using metacharacters for tags.\n\n## [0.27.2] - 2020-10-28\n\n### Fixed\n\n- Fixed a bug that didn't cause an error if there are fixed examples.\n\n## [0.27.1] - 2020-09-30\n\n### Removed\n\n- Drop support for posh 0.8.5 due to signal handling broken.\n\n### Fixed\n\n- Fixed gray color.\n- Fixed broken `--warning-as-failure`.\n- Fixed a bug that can not CTRL-C with posh.\n\n## [0.27.0] - 2020-09-25\n\n### Added\n\n- **Added `be exported` and `be readonly` matchers.**\n- Added `%printf` and `%sleep` directives.\n\n### Changed\n\n- **Improved TAP formatter.**\n  - Supports `TODO` and `SKIP` directives.\n  - Use `Bail out!` on error.\n  - Added error details.\n- `BeforeAll` / `AfterAll`: Avoid crashes due to hook errors.\n- `Before` / `After`: Improved hook error handling.\n- `BeforeCall` / `AfterCall`, `BeforeRun` / `AfterRun`: Minor changes.\n\n### Removed\n\n- Drop support for dash 0.5.3 due to unstable bug.\n- Drop support for busybox < 1.20.0 due to unstable bug.\n\n### Fixed\n\n- Fixed a bug that \"Parameter is not set\" error in word modifier.\n- Fixed a bug that satisfy matcher succeed even syntax error.\n- Fixed a bug that can not CTRL-C with parallel execution on zsh.\n- shellspec-syntax-check.sh: Some minor bug fixes.\n\n## [0.26.1] - 2020-07-13\n\n### Added\n\n- **Added `--docker` option.** (EXPERIMENTAL)\n\n## [0.26.0] - 2020-07-12\n\n### Added\n\n- **Added `Mock` helper (command-based mock).**\n- **Added `%preserve` directive.**\n- **Added `--sandbox`, `--sandbox-path` option.**\n- Added `--path` option.\n\n### Fixed\n\n- Workaround when the Windows version of `sort.exe` is executed.\n\n## [0.25.0] - 2020-06-21\n\n### Added\n\n- **Coverage support for zsh and ksh.** (#62)\n- Respect `NO_COLOR` environment variable.\n- Support [busybox-w32](https://frippery.org/busybox/) ash for windows.\n- **Added `Assert` expectation to assert side effects of system environment.**\n- Added `Dump` helper - dump stdout, stderr and status for debugging.\n- Added `line` and `word` subject. (`of stdout (output)` can be omitted now)\n- Added `--log-file` option to specify log file for `%logger` and trace.\n- **Implement `--xtrace` (`--xtrace-only`) feature.**\n\n### Changed\n\n- Upgrade to alpine 3.12 for docker image and officially release `shellspec/kcov` docker image.\n- Separate a file descriptor for reporting and stdout to able to use `echo` in specfile.\n- Minor specification change of `result` modifier and `satisfy` matcher.\n- `-r` option is now a short option for `--repair`, not `--require`.\n- Use [debian/eol(https://hub.docker.com/r/debian/eol/) docker images for old debian tests.\n\n### Fixed\n\n- Before/After hooks should not consume stdin data (#82)\n\n## [0.24.3] - 2020-06-06\n\n### Fixed\n\n- Fixes `BeforeAll` / `AfterAll` to share states\n\n## [0.24.2] - 2020-05-27\n\n### Fixed\n\n- Fixed a bug \"SHELLSPEC_GROUP_ID: unbound variable\"\n- Fixes when ran by \"bash shellcpec\" and \"ksh shellspec\"\n\n## [0.24.1] - 2020-05-22\n\n### Fixed\n\n- Fixed broken `Todo`.\n- Fixed a bug that caused an error when \"--kcov\" was specified and /dev/tty no be writable. (#67 Alexander Reitzel)\n- Fixed a bug when enabled extendedglob for zsh.\n\n## [0.24.0] - 2020-05-11\n\n### Added\n\n- Add `BeforeAll` and `AfterAll`. (#7)\n- Expand parameter within Data helper. (#57)\n- Add test for [GWSH shell](https://github.com/hvdijk/gwsh).\n- Add manual test for OpenBSD ksh on OpenBSD 6.6.\n- Add manual test for NetBSD sh on NetBSD 9.0.\n\n### Removed\n\n- Removed `match` matcher. Use `match pattern` matcher instead.\n- Remove tests for unstable old shells (Bus Error, Bad address, Memory fault, etc).\n  - CI test for pdksh 5.2.14 on FreeBSD.\n  - Docker test for pdksh 5.2.14 on Debian 2.2r7.\n  - Docker test for ksh 93q on Debian 3.1r8.\n- Remove tests for FreeBSD 13.0-current (Unstable due to work in progress).\n\n## [0.23.0] - 2020-04-02\n\n### Added\n\n- New **quick execution** and related options (`--quick`, `--repair`, `--next`).\n- New **failures formatter**.\n- Support **self-executable specfile**. (#40)\n- Add `--pending-message` and `--quiet` option.\n- Add short options for focus and filters.\n- Add `-w` short options for `--warning-as-failure`.\n- Add `--boost` (joke) option.\n- Reporter: Displays comments of 'temporary skip' and 'temporary pending'.\n- Support windows line endings. (#45)\n- Syntax check for missing `End` of parameters.\n- shellspec --init: generate ignore file for cvs.\n\n### Changed\n\n- Run the specfile specified by arguments even not end with `_spec.sh`.\n- Formatter: Change fixed color.\n- Formatter: Change mark for fixed and pending of progress formatter.\n\n### Fixed\n\n- Fixed `--pattern` option to avoid syntax error.\n- Return exit status code on the specfile properly.\n- Fixed a bug that `start with` and `end with` match glob pattern.\n- Formatter: Fixed not display correctly of documentation formatter when description is empty.\n- Fixed an issue installer.sh fails in some environments. (#43)\n\n### Deprecated\n\n- Use `--require` long option instead of `-r` short option.\n\n## [0.22.0] - 2020-02-22\n\n### Added\n\n- Improve kcov version detection.\n- Colored TAP formatter. (#34 Kylie McClain)\n- Added `--show-deprecations` and  `--hide-deprecations` options.\n\n### Changed\n\n- New **kcov integration**.\n  - Do not create translated specfile in project directory.\n  - Suppress unnecessary coverage measurement to improve testing speed.\n  - Added `--coverage-report-info` to add extra information to coverage report.\n- make install compatible with BSD and macOS.\n- Suppress unnecessary before/after hooks of skipped examples.\n- install.sh: Install to under $HOME/.local by default\n- Use $HOME/.config if not defined XDG_CONFIG_HOME\n\n### Deprecated\n\n- `--kcov-common-options` is deprecated, merge into `--kcov-options`.\n- Deprecates the `match` matcher due to cause many syntax errors. Use `match pattern` matcher instead.\n\n### Fixed\n\n- Fixed broken test in docker on Linux.\n- Fixed `--example` option to avoid syntax error.\n- Append to LOGFILE instead of overwriting.\n\n## [0.21.0] - 2020-01-30\n\n### Added\n\n- Provide **docker images**.\n- Provide **distribution archive**.\n- Available ArchLinux package. (#15 Damien Flament)\n\n### Changed\n\n- docs: Improve English quality. (#16 Damien Flament)\n\n## [0.20.2] - 2019-08-24\n\n### Fixed\n\n- Fixed wrong SHELLSPEC_TMPBASE\n- Fixed for bug that some shell can not call external command same name as builtin.\n\n## [0.20.1] - 2019-08-19\n\n### Fixed\n\n- Fixed for solaris.\n\n## [0.20.0] - 2019-08-18\n\n### Added\n\n- Add **parameterized example**. (`Parameters` helper)\n- Add `Set` helper for set shell option\n- Add `BeforeCall` / `AfterCall` helper.\n- Add `BeforeRun` / `AfterRun` helper.\n- Use `hexdump` if `od` does not exist.\n\n### Changed\n\n- Redesign `run` evaluation. [**major breaking change**]\n  - Change the behavior to close to the `run` of bats.\n  - New `run` evaluation allows the execution of functions and commands.\n  - Use `run command` to execute only the commands. (old `run` -> use `run command`)\n  - Merge `invoke` evaluation to `run` evaluation. (old `invoke` -> use `run`)\n  - Merge `execute` evaluation to `run` evaluation. (old `execute` -> use `run source`)\n- Export %const values to the translation process\n\n### Removed\n\n- Drop support for posh 0.10.2 and similar versions as the handling of the shell flag is broken.\n\n### Fixed\n\n- Fixed bug for related with tag.\n- Fixed bug where coverage might not work on macOS.\n\n## [0.19.1] - 2019-07-23\n\n### Added\n\n- Support install via make, bpkg, basher\n\n## [0.19.0] - 2019-07-22\n\n### Added\n\n- Add installer (It has not been officially released, but you can used it already).\n- Testing for **single script file** (Add `execute` evaluation, `Intercept` and `__SOURCED__` variable).\n- Add `--keep-tempdir` option.\n- Add `Data < <FILE>` syntax.\n\n### Removed\n\n- Drop support for busybox 1.1.3 and similar versions as it can not redefine builtin commands.\n- Drop support for ash 0.3.8 and similar versions as it can not use retrun in sourced script.\n- Remove `call`/`invoke` `<STRING>` syntax.\n\n## [0.18.0] - 2019-07-09\n\n### Added\n\n- **Profiler feature** (`--profile`)\n- Time attribute for JUnit XML.\n\n## [0.17.0] - 2019-07-06\n\n### Added\n\n- **Coverage reporting**.\n- Add `--fail-low-coverage` option.\n\n## [0.16.0] - 2019-07-03\n\n### Added\n\n- **Coverage** support (kcov integration)\n- Add **JUnit formatter** and **report generator**.\n- Add `--warning-as-failure` option.\n- Support [Unofficial Bash Strict Mode](http://redsymbol.net/articles/unofficial-bash-strict-mode/).\n- Support for [Schily Bourne Shell](http://schilytools.sourceforge.net/bosh.html) (`bosh`, `pbosh`).\n\n### Changed\n\n- Change `--skip-message none` to `--skip-message verbose`.\n\n### Removed\n\n- Remove `--warnings` option.\n\n## [0.15.0] - 2019-05-26\n\n### Added\n\n- Add `be empty directory` (alias: `be empty dir`) matcher.\n\n### Changed\n\n- Rename `be empty` matcher to `be empty file` matcher. [breaking change]\n\n### Fixed\n\n- Fixed bug that `be empty` (renamed to `be empty file`) matcher matches not exists file, etc.\n- Ensure call & invoke start with errno zero (#2 Rowan Thorpe)\n\n## [0.14.0] - 2019-05-15\n\n### Added\n\n- Add `--random` option.\n\n### Changed\n\n- Improve `--example`, `--tag` option.\n\n## [0.13.1] - 2019-05-13\n\n### Fixed\n\n- Fixed bug when --dry-run mode.\n- Fixed documentation formatter.\n\n## [0.13.0] - 2019-05-12\n\n### Added\n\n- Add `--list examples:id` option.\n- Add `*_spec.sh:@ID` syntax the specify id with the filename.\n- Add `--pattern`, `--example`, `--tag`, `--default-path` filter option.\n\n### Changed\n\n- Change `Logger` Helper to `%logger` directive.\n- Merge `--list-specfiles`, `--list-examples` options to `--list` option.\n- Redesign reporter to improve performance, maintainability.\n\n## [0.12.0] - 2019-04-26\n\n### Added\n\n- Add `--list-specfiles`, `--list-examples` option.\n- Add `--env-from` option.\n- Add tests that for array if supported shells.\n\n### Changed\n\n- Change `--count` option output includes the number of specfiles.\n- Change to the banner show only on shellspec-runner.\n\n## [0.11.3] - 2019-04-24\n\n### Fixed\n\n- Fixed broken parallel executor.\n\n## [0.11.2] - 2019-04-23\n\n### Fixed\n\n- Fixed bug that does not work with zsh 5.4.2.\n\n## [0.11.1] - 2019-04-21\n\n### Fixed\n\n- Fixed ignored specified line number when parallel execution.\n- Fixed documentation formatter when supplied multiple specfiles.\n\n## [0.11.0] - 2019-04-20\n\n### Added\n\n- Run **the example by line number**. (`*_spec.sh:#`)\n- Run **focused groups / examples**. (`fDescribe`, `fContext`, `fExample`, `fSpecify`, `fIt`)\n- Add `--count` option for count the number of examples without running.\n\n## [0.10.0] - 2019-04-17\n\n### Added\n\n- Support **parallel execution**. (`--jobs` option)\n\n### Changed\n\n- Separete syntax checker into tools.\n- Improve syntax checker.\n- Improve error handling.\n- Improve ctrl-c handling.\n\n### Removed\n\n- Remove `Def` helper. (use `%putsn`, `%puts` directive instead)\n\n## [0.9.0] - 2019-03-30\n\n### Added\n\n- Add `--syntax-check` option for syntax check of the specfile.\n\n### Changed\n\n- Change timing of loading external script by 'Include'. [breaking change]\n\n### Fixed\n\n- Fix for translation speed slowdown.\n\n### Removed\n\n- Remove shorthand of the variable subject.\n\n## [0.8.0] - 2019-03-26\n\n### Added\n\n- Add `Constant definition`.\n- Add `Data` helper, `Embedded text`.\n- Add `Def` helper.\n- Add `Logger` helper.\n- Add `result` modifier.\n- Add `Include` helper.\n- Add shorthand for `function` subject and `variable` subject.\n- Add failed message for `Before`/`After` each hook.\n\n### Changed\n\n- Change behavior of `line` and `lines` modifier to like \"grep -c\" not \"wc -l\".\n- Change `function` subject to alias for `value` subject.\n- Improve handling unexpected errors.\n- Improve examples.\n\n### Removed\n\n- Remove `It` statement and change `It` is alias of `Example` now.\n- Remove `Set` / `Unset` helper.\n- Remove `Debug` helper.\n- Remove `string` subject.\n- Remove `exit status` subject. (use `status` subject)\n\n## [0.7.0] - 2019-03-08\n\n### Added\n\n- Added `lines` modifier.\n\n## [0.6.0] - 2019-02-19\n\n### Added\n\n- Added `match` matcher.\n\n## [0.5.0] - 2019-02-06\n\n### Added\n\n- Initial public release.\n\n[Unreleased]: https://github.com/shellspec/shellspec/compare/0.28.1...HEAD\n[0.28.1]: https://github.com/shellspec/shellspec/compare/0.28.0...0.28.1\n[0.28.0]: https://github.com/shellspec/shellspec/compare/0.27.2...0.28.0\n[0.27.2]: https://github.com/shellspec/shellspec/compare/0.27.1...0.27.2\n[0.27.1]: https://github.com/shellspec/shellspec/compare/0.27.0...0.27.1\n[0.27.0]: https://github.com/shellspec/shellspec/compare/0.26.1...0.27.0\n[0.26.1]: https://github.com/shellspec/shellspec/compare/0.26.0...0.26.1\n[0.26.0]: https://github.com/shellspec/shellspec/compare/0.25.0...0.26.0\n[0.25.0]: https://github.com/shellspec/shellspec/compare/0.24.3...0.25.0\n[0.24.3]: https://github.com/shellspec/shellspec/compare/0.24.2...0.24.3\n[0.24.2]: https://github.com/shellspec/shellspec/compare/0.24.1...0.24.2\n[0.24.1]: https://github.com/shellspec/shellspec/compare/0.24.0...0.24.1\n[0.24.0]: https://github.com/shellspec/shellspec/compare/0.23.0...0.24.0\n[0.23.0]: https://github.com/shellspec/shellspec/compare/0.22.0...0.23.0\n[0.22.0]: https://github.com/shellspec/shellspec/compare/0.21.0...0.22.0\n[0.21.0]: https://github.com/shellspec/shellspec/compare/0.20.2...0.21.0\n[0.20.2]: https://github.com/shellspec/shellspec/compare/0.20.1...0.20.2\n[0.20.1]: https://github.com/shellspec/shellspec/compare/0.20.0...0.20.1\n[0.20.0]: https://github.com/shellspec/shellspec/compare/0.19.0...0.20.0\n[0.19.1]: https://github.com/shellspec/shellspec/compare/0.19.0...0.19.1\n[0.19.0]: https://github.com/shellspec/shellspec/compare/0.18.0...0.19.0\n[0.18.0]: https://github.com/shellspec/shellspec/compare/0.17.0...0.18.0\n[0.17.0]: https://github.com/shellspec/shellspec/compare/0.16.0...0.17.0\n[0.16.0]: https://github.com/shellspec/shellspec/compare/0.15.0...0.16.0\n[0.15.0]: https://github.com/shellspec/shellspec/compare/0.14.0...0.15.0\n[0.14.0]: https://github.com/shellspec/shellspec/compare/0.13.1...0.14.0\n[0.13.1]: https://github.com/shellspec/shellspec/compare/0.13.0...0.13.1\n[0.13.0]: https://github.com/shellspec/shellspec/compare/0.12.0...0.13.0\n[0.12.0]: https://github.com/shellspec/shellspec/compare/0.11.3...0.12.0\n[0.11.3]: https://github.com/shellspec/shellspec/compare/0.11.2...0.11.3\n[0.11.2]: https://github.com/shellspec/shellspec/compare/0.11.1...0.11.2\n[0.11.1]: https://github.com/shellspec/shellspec/compare/0.11.0...0.11.1\n[0.11.0]: https://github.com/shellspec/shellspec/compare/0.10.0...0.11.0\n[0.10.0]: https://github.com/shellspec/shellspec/compare/0.9.0...0.10.0\n[0.9.0]: https://github.com/shellspec/shellspec/compare/0.8.0...0.9.0\n[0.8.0]: https://github.com/shellspec/shellspec/compare/0.7.0...0.8.0\n[0.7.0]: https://github.com/shellspec/shellspec/compare/0.6.0...0.7.0\n[0.6.0]: https://github.com/shellspec/shellspec/compare/0.5.0...0.6.0\n[0.5.0]: https://github.com/shellspec/shellspec/commits/0.5.0\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.7138671875,
          "content": "# CONTRIBUTING\n\n## For developer\n\n1. To understand the [architecture](docs/architecture.md)\n2. About [reporter](docs/reporter.md)\n3. About various [shells](docs/shells.md)\n4. How to [test](docs/test.md)\n\n### About specfile translation process\n\nThe specfile is a valid shell script, but a translation process is performed to implement the scope,\nline number etc. Each example group block and example block is translated to commands in a subshell.\nTherefore changes inside those blocks do not affect the outside of the block. In other words it realizes\nlocal variables and local functions in the specfile. This is very useful for describing a structured spec.\nIf you are interested in how to translate, use the `--translate` option.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0478515625,
          "content": "MIT License\n\nCopyright (c) 2018 Koichi Nakashima\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 1.896484375,
          "content": "PREFIX ?= /usr/local\nBINDIR := $(PREFIX)/bin\nLIBDIR := $(PREFIX)/lib\n\nGENGETOPTIONS := gengetoptions\nOPTPARSERDIR := lib/libexec/optparser\n\n.PHONY: coverage test dist build release\n\nall: test check\n\ndist: LICENSE shellspec lib libexec\n\ttar -czf shellspec-dist.tar.gz $^ --transform 's,^,shellspec/,'\n\ninstall:\n\tinstall -d \"$(BINDIR)\" \"$(LIBDIR)\"\n\tinstall stub/shellspec \"$(BINDIR)/shellspec\"\n\tfind lib libexec -type d -exec install -d \"$(LIBDIR)/shellspec/{}\" \\;\n\tfind LICENSE lib -type f -exec install -m 644 {} \"$(LIBDIR)/shellspec/{}\" \\;\n\tfind shellspec libexec -type f -exec install {} \"$(LIBDIR)/shellspec/{}\" \\;\n\nuninstall:\n\trm -rf \"$(BINDIR)/shellspec\" \"$(LIBDIR)/shellspec\"\n\npackage:\n\tcontrib/make_package_json.sh > package.json\n\n# Take in to retest getoptions in various shells\ntakein_getoptions:\n\tcp ../getoptions/lib/getoptions_*.sh lib\n\tcp ../getoptions/spec/getoptions_*_spec.sh spec\n\noptparser:\n\t@printf \"getoptions: \"\n\t@$(GENGETOPTIONS) --version\n\t$(GENGETOPTIONS) parser --indent=2 --shellcheck \\\n\t\t-f $(OPTPARSERDIR)/parser_definition.sh \\\n\t        parser_definition optparser_parse SHELLSPEC optparser_error \\\n\t\t> $(OPTPARSERDIR)/parser_definition_generated.sh\n\ndemo:\n\tttyrec -e \"ghostplay contrib/demo.sh\"\n\tseq2gif -l 5000 -h 32 -w 139 -p win -i ttyrecord -o docs/demo.gif\n\tgifsicle -i docs/demo.gif -O3 -o docs/demo.gif\n\ncoverage:\n\tcontrib/coverage.sh --pull\n\ncheck:\n\tcontrib/check.sh --pull\n\nmetrics:\n\tcontrib/metrics.sh\n\nbuild:\n\tcontrib/build.sh .dockerhub/Dockerfile         shellspec\n\tcontrib/build.sh .dockerhub/Dockerfile         shellspec kcov\n\tcontrib/build.sh .dockerhub/Dockerfile.debian  shellspec-debian\n\tcontrib/build.sh .dockerhub/Dockerfile.debian  shellspec-debian kcov\n\tcontrib/build.sh .dockerhub/Dockerfile.scratch shellspec-scratch\n\ntest:\n\t./shellspec\n\ntest_all:\n\tcontrib/all.sh shellspec\n\ntest_in_docker:\n\tcontrib/test_in_docker.sh --pull dockerfiles/* -- shellspec -j 2\n\nrelease:\n\tcontrib/release.sh\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 80.1630859375,
          "content": "# ShellSpec: full-featured BDD unit testing framework\n\nShellSpec is a **full-featured [BDD](https://en.wikipedia.org/wiki/Behavior-driven_development) unit testing framework** for dash, bash, ksh, zsh and **all POSIX shells** that provides first-class features such as code coverage, mocking, parameterized test, parallel execution and more. It was developed as a dev/test tool for **cross-platform shell scripts and shell script libraries**. ShellSpec is a new modern testing framework released in 2019, but it's already stable enough. With lots of practical CLI features and simple yet powerful syntax, it provides you with a fun shell script test environment.\n\n[![Ubuntu](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/ubuntu-jammy.yml?label=Ubuntu&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/ubuntu-jammy.yml)\n[![macOS](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/macos-sonoma.yml?label=macOS&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/macos-sonoma.yml)\n[![FreeBSD](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/freebsd-14.yml?label=FreeBSD&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/freebsd-14.yml)\n[![NetBSD](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/netbsd-10.yml?label=NetBSD&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/netbsd-10.yml)\n[![OpenBSD](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/openbsd7.5.yml?label=OpenBSD&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/openbsd7.5.yml)\n[![DragonFlyBSD](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/dragonflybsd-6.4.yml?label=DragonFlyBSD&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/dragonflybsd-6.4.yml)\n[![Solaris11](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/solaris-11.4.yml?label=Solaris11&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/solaris-11.4.yml)<br>\n[![gitbash](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/windows-gitbash.yml?label=Windows%20(gitbash)&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/windows-gitbash.yml)\n[![cygwin](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/windows-cygwin.yml?label=Windows%20(cygwin)&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/windows-cygwin.yml)\n[![msys](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/windows-msys.yml?label=Windows%20(msys)&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/windows-msys.yml)\n[![busybox](https://img.shields.io/github/actions/workflow/status/shellspec/shellspec/windows-busybox.yml?label=Windows%20(busybox)&style=flat-square)](https://github.com/shellspec/shellspec/actions/workflows/windows-busybox.yml)<br>\n[![CodeFactor Grade](https://img.shields.io/codefactor/grade/github/shellspec/shellspec?label=CodeFactor&style=flat-square)](https://www.codefactor.io/repository/github/shellspec/shellspec)\n[![Code Climate](https://img.shields.io/codeclimate/coverage/shellspec/shellspec?label=CodeClimate&style=flat-square)](https://codeclimate.com/github/shellspec/shellspec)\n[![Codecov](https://img.shields.io/codecov/c/github/shellspec/shellspec.svg?label=Codecov&style=flat-square)](https://codecov.io/gh/shellspec/shellspec)\n[![Kcov](https://img.shields.io/badge/dynamic/json?url=https%3A%2F%2Fshellspec.github.io%2Fshellspec%2Fcoverage.json&query=percent_covered&label=Kcov&suffix=%25&style=flat-square)](https://shellspec.github.io/shellspec/)\n[![Docker Cloud Automated build](https://img.shields.io/docker/cloud/automated/shellspec/shellspec?style=flat-square&label=DockerHub)](https://hub.docker.com/r/shellspec/shellspec)\n[![GitHub top language](https://img.shields.io/github/languages/top/shellspec/shellspec.svg?style=flat-square)](https://github.com/shellspec/shellspec/search?l=Shell)\n[![GitHub release](https://img.shields.io/github/release/shellspec/shellspec.svg?style=flat-square)](https://github.com/shellspec/shellspec/releases/latest)\n[![License](https://img.shields.io/github/license/shellspec/shellspec.svg?style=flat-square)](https://github.com/shellspec/shellspec/blob/master/LICENSE)<br>\n[![bash](https://img.shields.io/badge/bash-&ge;2.03-lightgrey.svg?style=flat)](https://www.gnu.org/software/bash/)\n[![bosh](https://img.shields.io/badge/bosh-&ge;2018%2F10%2F07-lightgrey.svg?style=flat)](https://codeberg.org/schilytools/schilytools)\n[![busybox](https://img.shields.io/badge/busybox-&ge;1.20.0-lightgrey.svg?style=flat)](https://www.busybox.net/)\n[![dash](https://img.shields.io/badge/dash-&ge;0.5.4-lightgrey.svg?style=flat)](http://gondor.apana.org.au/~herbert/dash/)\n[![ksh](https://img.shields.io/badge/ksh-&ge;93r-lightgrey.svg?style=flat)](https://github.com/ksh93/ksh)\n[![mksh](https://img.shields.io/badge/mksh-&ge;R28-lightgrey.svg?style=flat)](http://www.mirbsd.org/mksh.htm)\n[![posh](https://img.shields.io/badge/posh-&ge;0.3.14-lightgrey.svg?style=flat)](https://salsa.debian.org/clint/posh)\n[![yash](https://img.shields.io/badge/yash-&ge;2.29-lightgrey.svg?style=flat)](https://magicant.github.io/yash/)\n[![zsh](https://img.shields.io/badge/zsh-&ge;3.1.9-lightgrey.svg?style=flat)](https://www.zsh.org/)\n\n----\n\n**Version 0.28.0** has a lot of enhancements in the CLI. It is basically compatible, but there are some changes that you need to be aware of. See [Migration Guide to Version 0.28.0](https://github.com/shellspec/shellspec/wiki/Migration-Guide-to-Version-0.28.0) for details.\n\n----\n\n**Thank you for your interest in ShellSpec. Please visit 🚩[the official website](https://shellspec.info/) to know the impressive features!**\n\nLet's have fun testing your shell scripts! (Try [Online Demo](https://shellspec.info/demo) on your browser).\n\n[![demo](docs/demo.gif)](https://shellspec.info/demo)\n\n[![Coverage report](docs/coverage.png)](https://circleci.com/api/v1.1/project/github/shellspec/shellspec/latest/artifacts/0/coverage/index.html?branch=master)\n\n**Latest Update.**\n\nSee [CHANGELOG.md](CHANGELOG.md)\n\nNOTE: This documentation contains unreleased features. Check them in the changelog.\n\n----\n\n## Table of Contents <!-- omit in toc -->\n\n- [Supported shells and platforms](#supported-shells-and-platforms)\n- [Requirements](#requirements)\n- [Installation](#installation)\n  - [Web installer (for developers)](#web-installer-for-developers)\n  - [Package manager](#package-manager)\n  - [Manual installation](#manual-installation)\n  - [Distribution archive (runtime only)](#distribution-archive-runtime-only)\n- [Tutorial](#tutorial)\n- [ShellSpec CLI](#shellspec-cli)\n  - [runs specfile using `/bin/sh` by default](#runs-specfile-using-binsh-by-default)\n  - [command options](#command-options)\n- [Project directory](#project-directory)\n  - [Typical directory structure](#typical-directory-structure)\n  - [Options file](#options-file)\n  - [`.shellspec` - project options file](#shellspec---project-options-file)\n  - [`.shellspec-local` - user custom options file](#shellspec-local---user-custom-options-file)\n  - [`.shellspec-basedir` - specfile execution base directory](#shellspec-basedir---specfile-execution-base-directory)\n  - [`.shellspec-quick.log` - quick execution log](#shellspec-quicklog---quick-execution-log)\n  - [`report/` - report file directory](#report---report-file-directory)\n  - [`coverage/` - coverage reports directory](#coverage---coverage-reports-directory)\n  - [`spec/` - (default) specfiles directory](#spec---default-specfiles-directory)\n  - [\\<HELPERDIR\\> (default: `spec/`)](#helperdir-default-spec)\n    - [`spec_helper.sh` - (default) helper file for specfile](#spec_helpersh---default-helper-file-for-specfile)\n    - [`banner[.md]` - banner file displayed at test execution](#bannermd---banner-file-displayed-at-test-execution)\n    - [`support/` - directory for support files](#support---directory-for-support-files)\n      - [`bin` - directory for support commands](#bin---directory-for-support-commands)\n- [Specfile (test file)](#specfile-test-file)\n  - [Example](#example)\n  - [About DSL](#about-dsl)\n  - [Execution directory](#execution-directory)\n  - [Embedded shell scripts](#embedded-shell-scripts)\n  - [Translation process](#translation-process)\n  - [Syntax formatter (`altshfmt`)](#syntax-formatter-altshfmt)\n- [DSL syntax](#dsl-syntax)\n  - [Basic structure](#basic-structure)\n    - [`Describe`, `Context`, `ExampleGroup` - example group block](#describe-context-examplegroup---example-group-block)\n    - [`It`, `Specify`, `Example` - example block](#it-specify-example---example-block)\n    - [`Todo` - one liner empty example](#todo---one-liner-empty-example)\n    - [`When` - evaluation](#when---evaluation)\n      - [`call` - call a shell function (without subshell)](#call---call-a-shell-function-without-subshell)\n      - [`run` - run a command (within subshell)](#run---run-a-command-within-subshell)\n        - [`command` - runs an external command](#command---runs-an-external-command)\n        - [`script` - runs a shell script](#script---runs-a-shell-script)\n        - [`source` - runs a script by `.` (dot) command](#source---runs-a-script-by--dot-command)\n      - [About executing aliases](#about-executing-aliases)\n    - [`The` - expectation](#the---expectation)\n      - [Subjects](#subjects)\n      - [Modifiers](#modifiers)\n      - [Matchers](#matchers)\n      - [Language chains](#language-chains)\n    - [`Assert` - expectation for custom assertion](#assert---expectation-for-custom-assertion)\n  - [Pending, skip and focus](#pending-skip-and-focus)\n    - [`Pending` - pending example](#pending---pending-example)\n    - [`Skip` - skip example](#skip---skip-example)\n      - [`if` - conditional skip](#if---conditional-skip)\n    - ['x' prefix for example group and example](#x-prefix-for-example-group-and-example)\n      - [`xDescribe`, `xContext`, `xExampleGroup` - skipped example group](#xdescribe-xcontext-xexamplegroup---skipped-example-group)\n      - [`xIt`, `xSpecify`, `xExample` - skipped example](#xit-xspecify-xexample---skipped-example)\n    - ['f' prefix for example group and example](#f-prefix-for-example-group-and-example)\n      - [`fDescribe`, `fContext`, `fExampleGroup` - focused example group](#fdescribe-fcontext-fexamplegroup---focused-example-group)\n      - [`fIt`, `fSpecify`, `fExample` - focused example](#fit-fspecify-fexample---focused-example)\n    - [About temporary pending and skip](#about-temporary-pending-and-skip)\n  - [Hooks](#hooks)\n    - [`BeforeEach` (`Before`), `AfterEach` (`After`) - example hook](#beforeeach-before-aftereach-after---example-hook)\n    - [`BeforeAll`, `AfterAll` - example group hook](#beforeall-afterall---example-group-hook)\n    - [`BeforeCall`, `AfterCall` - call evaluation hook](#beforecall-aftercall---call-evaluation-hook)\n    - [`BeforeRun`, `AfterRun` - run evaluation hook](#beforerun-afterrun---run-evaluation-hook)\n    - [Pitfalls](#pitfalls)\n  - [Helpers](#helpers)\n    - [`Dump` - dump stdout, stderr, and status for debugging](#dump---dump-stdout-stderr-and-status-for-debugging)\n    - [`Include` - include a script file](#include---include-a-script-file)\n    - [`Set` - set shell options](#set---set-shell-options)\n    - [`Path`, `File`, `Dir` - path alias](#path-file-dir---path-alias)\n    - [`Data` - pass data as stdin to evaluation](#data---pass-data-as-stdin-to-evaluation)\n    - [`Parameters` - parameterized example](#parameters---parameterized-example)\n    - [`Mock` - create a command-based mock](#mock---create-a-command-based-mock)\n    - [`Intercept` - create an intercept point](#intercept---create-an-intercept-point)\n- [Directives](#directives)\n  - [`%const` (`%`) - constant definition](#const----constant-definition)\n  - [`%text` - embedded text](#text---embedded-text)\n  - [`%puts` (`%-`), `%putsn` (`%=`) - output a string (with newline)](#puts---putsn----output-a-string-with-newline)\n  - [`%printf` - alias for printf](#printf---alias-for-printf)\n  - [`%sleep` - alias for sleep](#sleep---alias-for-sleep)\n  - [`%preserve` - preserve variables](#preserve---preserve-variables)\n  - [`%logger` - debug output](#logger---debug-output)\n  - [`%data` - define parameter](#data---define-parameter)\n- [Mocking](#mocking)\n  - [Function-based mock](#function-based-mock)\n  - [Command-based mock](#command-based-mock)\n- [Support commands](#support-commands)\n  - [Execute the actual command within a mock function](#execute-the-actual-command-within-a-mock-function)\n  - [Make mock not mandatory in sandbox mode](#make-mock-not-mandatory-in-sandbox-mode)\n  - [Resolve command incompatibilities](#resolve-command-incompatibilities)\n- [Tagging](#tagging)\n- [About testing external commands](#about-testing-external-commands)\n- [How to test a single file shell script](#how-to-test-a-single-file-shell-script)\n  - [Using `run script`](#using-run-script)\n  - [Using `run source`](#using-run-source)\n  - [Testing shell functions](#testing-shell-functions)\n    - [`__SOURCED__`](#__sourced__)\n  - [Intercepting](#intercepting)\n    - [`Intercept`](#intercept)\n    - [`test || __() { :; }`](#test--__---)\n    - [`__`](#__)\n- [spec\\_helper](#spec_helper)\n  - [`<module>_precheck`](#module_precheck)\n    - [`minimum_version`](#minimum_version)\n    - [`error`, `warn`, `info`](#error-warn-info)\n    - [`abort`](#abort)\n    - [`setenv`, `unsetenv`](#setenv-unsetenv)\n    - [environment variables](#environment-variables)\n  - [`<module>_loaded`](#module_loaded)\n  - [`<module>_configure`](#module_configure)\n    - [`import`](#import)\n    - [`before_each`, `after_each`](#before_each-after_each)\n    - [`before_all`, `after_all`](#before_all-after_all)\n- [Self-executable specfile](#self-executable-specfile)\n- [Use with Docker](#use-with-docker)\n- [Extension](#extension)\n  - [Custom subject, modifier and matcher](#custom-subject-modifier-and-matcher)\n- [Code Coverage](#code-coverage)\n  - [Supported shells](#supported-shells)\n  - [Measurement target](#measurement-target)\n  - [Coverage report](#coverage-report)\n- [For developers](#for-developers)\n  - [Subprojects](#subprojects)\n    - [ShellMetrics - Cyclomatic Complexity Analyzer for shell scripts](#shellmetrics---cyclomatic-complexity-analyzer-for-shell-scripts)\n    - [ShellBench - A benchmark utility for POSIX shell comparison](#shellbench---a-benchmark-utility-for-posix-shell-comparison)\n    - [altshfmt - AltSH (alternative shell script) formatter](#altshfmt---altsh-alternative-shell-script-formatter)\n  - [Related projects](#related-projects)\n    - [getoptions - An elegant option parser and generator for shell scripts](#getoptions---an-elegant-option-parser-and-generator-for-shell-scripts)\n    - [readlinkf - readlink -f implementation for shell scripts](#readlinkf---readlink--f-implementation-for-shell-scripts)\n    - [portable-echo - Portable echo shell function for POSIX compliant shells](#portable-echo---portable-echo-shell-function-for-posix-compliant-shells)\n  - [Inspired frameworks](#inspired-frameworks)\n  - [Contributions](#contributions)\n\n## Supported shells and platforms\n\n- <code>[bash][bash]</code>_>=2.03_, <code>[bosh/pbosh][bosh]</code>_>=2018/10/07_, <code>[posh][posh]</code>_>=0.3.14_, <code>[yash][yash]</code>_>=2.29_, <code>[zsh][zsh]</code>_>=3.1.9_\n- <code>[dash][dash]</code>_>=0.5.4_, <code>[busybox][busybox] ash</code>_>=1.20.0_, <code>[busybox-w32][busybox-w32]</code>, <code>[GWSH][gwsh]</code>_>=20190627_\n- <code>ksh88</code>, <code>[ksh93][ksh93]</code>_>=93s_, <code>[ksh2020][ksh2020]</code>, <code>[mksh/lksh][mksh]</code>_>=R28_, <code>[pdksh][pdksh]</code>_>=5.2.14_\n- <code>[FreeBSD sh][freebsdsh]</code>, <code>[NetBSD sh][netbsdsh]</code>, <code>[NetBSD ksh][netbsdksh]</code>, <code>[OpenBSD ksh][openbsdksh]</code>, <code>[loksh][loksh]</code>, <code>[oksh][oksh]</code>\n\n[bash]: https://www.gnu.org/software/bash/\n[bosh]: http://schilytools.sourceforge.net/bosh.html\n[busybox]: https://www.busybox.net/\n[busybox-w32]: https://frippery.org/busybox/\n[dash]: http://gondor.apana.org.au/~herbert/dash/\n[gwsh]: https://github.com/hvdijk/gwsh\n[ksh93]: http://kornshell.org\n[ksh2020]: https://github.com/ksh-community/ksh\n[mksh]: http://www.mirbsd.org/mksh.htm\n[posh]: https://salsa.debian.org/clint/posh\n[yash]: https://yash.osdn.jp/\n[zsh]: https://www.zsh.org/\n[netbsdsh]: http://cvsweb.netbsd.org/bsdweb.cgi/src/bin/sh/\n[netbsdksh]: http://cvsweb.netbsd.org/bsdweb.cgi/src/bin/ksh/\n[freebsdsh]: https://www.freebsd.org/cgi/man.cgi?sh(1)\n[openbsdksh]: https://man.openbsd.org/ksh.1\n[pdksh]: https://web.archive.org/web/20160918190548/http://www.cs.mun.ca:80/~michael/pdksh/\n[loksh]: https://github.com/dimkr/loksh\n[oksh]: https://github.com/ibara/oksh\n\n| Platform                                                         | Test                                               |\n| ---------------------------------------------------------------- | -------------------------------------------------- |\n| Linux (Debian, Ubuntu, Fedora, CentOS, Alpine, Busybox, OpenWrt) | [GitHub Actions][Actions] or [Docker][Docker]      |\n| macOS (Default installed shells, Homebrew)                       | [GitHub Actions][Actions]                          |\n| Windows (Git bash, msys2, cygwin, busybox-w32, WSL)              | [GitHub Actions][Actions]                          |\n| BSD (FreeBSD, OpenBSD, NetBSD)                                   | [Cirrus CI][CirrusCI] (FreeBSD) or Manual (Others) |\n| Unix (Solaris, AIX)                                              | Manual only                                        |\n\n[Actions]: https://github.com/shellspec/shellspec/actions\n[CirrusCI]: https://cirrus-ci.com/github/shellspec/shellspec\n[Docker]: dockerfiles\n\n[Tested version details](docs/shells.md)\n\n## Requirements\n\n### POSIX-compliant commands <!-- omit in toc -->\n\nShellSpec uses shell built-in commands and only few basic [POSIX-compliant commands][utilities] to\nsupport wide range of environments (except `kcov` for optional code coverage).\n\n[utilities]: http://pubs.opengroup.org/onlinepubs/9699919799/utilities/contents.html\n\nCurrently used external (not shell builtins) commands:\n\n- `cat`, `date`, `env`, `ls`, `mkdir`, `od` (or not POSIX `hexdump`), `rm`, `sleep`, `sort`, `time`\n- `ps` (use to auto-detect shells in environments that don't implement procfs)\n- `ln`, `mv` (use only when generating coverage report)\n- `kill`, `printf` (most shells except some are built-in)\n\n## Installation\n\n### Web installer (for developers)\n\n#### Install the latest release version <!-- omit in toc -->\n\n```sh\ncurl -fsSL https://git.io/shellspec | sh\n```\n\nor\n\n```sh\nwget -O- https://git.io/shellspec | sh\n```\n\nNOTE: `https://git.io/shellspec` is redirected to [install.sh](https://github.com/shellspec/shellspec/raw/master/install.sh)\n\nThe installation using the web installer is mainly intended for development use.\nFor CI, it is recommended to use a specific version (tag) in git or archives to avoid unexpected failures.\n\n<details>\n<summary>Advanced installation / upgrade</summary>\n\n#### Automatic installation <!-- omit in toc -->\n\n```sh\ncurl -fsSL https://git.io/shellspec | sh -s -- --yes\n```\n\n#### Install the specified version <!-- omit in toc -->\n\n```sh\ncurl -fsSL https://git.io/shellspec | sh -s 0.19.1\n```\n\n#### Upgrade to the latest release version <!-- omit in toc -->\n\n```sh\ncurl -fsSL https://git.io/shellspec | sh -s -- --switch\n```\n\n#### Switch to the specified version <!-- omit in toc -->\n\n```sh\ncurl -fsSL https://git.io/shellspec | sh -s 0.18.0 --switch\n```\n\n</details>\n\n<details>\n<summary>Uninstall</summary>\n\n#### How to uninstall <!-- omit in toc -->\n\n1. Delete the ShellSpec executable file [default: `$HOME/.local/bin/shellspec`].\n2. Delete the ShellSpec installation directory [default: `$HOME/.local/lib/shellspec`].\n\n</details>\n\n<details>\n<summary>Other usage</summary>\n\n### Other usage <!-- omit in toc -->\n\n```console\n$ curl -fsSL https://git.io/shellspec | sh -s -- --help\nUsage: [sudo] ./install.sh [VERSION] [OPTIONS...]\n  or : wget -O- https://git.io/shellspec | [sudo] sh\n  or : wget -O- https://git.io/shellspec | [sudo] sh -s -- [OPTIONS...]\n  or : wget -O- https://git.io/shellspec | [sudo] sh -s VERSION [OPTIONS...]\n  or : curl -fsSL https://git.io/shellspec | [sudo] sh\n  or : curl -fsSL https://git.io/shellspec | [sudo] sh -s -- [OPTIONS...]\n  or : curl -fsSL https://git.io/shellspec | [sudo] sh -s VERSION [OPTIONS...]\n\nVERSION:\n  Specify install version and method\n\n  e.g\n    1.0.0           Install 1.0.0 from git\n    master          Install master from git\n    1.0.0.tar.gz    Install 1.0.0 from tar.gz archive\n    .               Install from local directory\n\nOPTIONS:\n  -p, --prefix PREFIX   Specify prefix                 [default: $HOME/.local]\n  -b, --bin BIN         Specify bin directory          [default: <PREFIX>/bin]\n  -d, --dir DIR         Specify installation directory [default: <PREFIX>/lib/shellspec]\n  -s, --switch          Switch version (requires installation via git)\n  -l, --list            List available versions (tags)\n      --pre             Include pre-release\n      --fetch FETCH     Force command to use when installing from archive (curl or wget)\n  -y, --yes             Automatic yes to prompts\n  -h, --help            You're looking at it\n```\n\n</details>\n\n### Package manager\n\n<details>\n<summary>Arch Linux</summary>\n\nInstallation on Arch Linux from the AUR [ShellSpec package](https://aur.archlinux.org/packages/shellspec/) using `aura`:\n\n```console\n# Install the latest stable version\n$ aura -A shellspec\n```\n\n</details>\n\n<details>\n<summary>Homebrew / Linuxbrew</summary>\n\n```console\n# Install the latest stable version\n$ brew tap shellspec/shellspec\n$ brew install shellspec\n```\n\n</details>\n\n<details>\n<summary>basher / bpkg</summary>\n\nInstallation with [basher](https://github.com/basherpm/basher)\n\n**The officially supported version is ShellSpec 0.19.1 and later.**\n\n```console\n# Install from master branch\n$ basher install shellspec/shellspec\n\n# To specify a version (example: 0.19.1)\n$ basher install shellspec/shellspec@0.19.1\n```\n\nInstallation with [bpkg](https://github.com/bpkg/bpkg)\n\n**The officially supported version is ShellSpec 0.19.1 and later.**\n\n```console\n# Install from master branch\n$ bpkg install shellspec/shellspec\n\n# To specify a version (example: 0.19.1)\n$ bpkg install shellspec/shellspec@0.19.1\n```\n\n</details>\n\n### Manual installation\n\n<details>\n<summary>git / archive (source code)</summary>\n\nDownload from git or archive and create a symbolic link.\n\nFrom git\n\n```console\n$ cd /SOME/WHERE/TO/INSTALL\n$ git clone https://github.com/shellspec/shellspec.git\n\n$ ln -s /SOME/WHERE/TO/INSTALL/shellspec/shellspec /EXECUTABLE/PATH/\n```\n\nFrom archive\n\n```console\n$ cd /SOME/WHERE/TO/INSTALL\n$ wget https://github.com/shellspec/shellspec/archive/{VERSION}.tar.gz\n$ tar xzvf shellspec-{VERSION}.tar.gz\n\n$ ln -s /SOME/WHERE/TO/INSTALL/shellspec-{VERSION}/shellspec /EXECUTABLE/PATH/\n```\n\nExecutable path: e.g. `/usr/local/bin/`, `$HOME/bin/`\n\n</details>\n\n<details>\n<summary>Use make instead of symbolic link creation</summary>\n\nDownload from git or archive and use `make` command.\n\n**How to install.**\n\nInstall to `/usr/local/bin` and `/usr/local/lib`\n\n```sh\nsudo make install\n```\n\nInstall to `$HOME/bin` and `$HOME/lib`\n\n```sh\nmake install PREFIX=$HOME\n```\n\n**How to uninstall.**\n\n```sh\nsudo make uninstall\n```\n\n```sh\nmake uninstall PREFIX=$HOME\n```\n\n</details>\n\n<details>\n<summary>For environments that do not support symbolic links</summary>\n\nDownload from git or archive and create the following `shellspec` file instead of the symbolic link.\n\n```console\n$ cat<<'HERE'>/EXECUTABLE/PATH/shellspec\n#!/bin/sh\nexec /SOME/WHERE/TO/INSTALL/shellspec/shellspec \"$@\"\nHERE\n$ chmod +x /EXECUTABLE/PATH/shellspec\n```\n\n</details>\n\n### Distribution archive (runtime only)\n\nSee [Releases](https://github.com/shellspec/shellspec/releases) page if you want to download distribution archive.\n\n## Tutorial\n\n**Just create your project directory and run `shellspec --init` to setup your project**\n\n```console\n# Create your project directory, for example \"hello\".\n$ mkdir hello\n$ cd hello\n\n# Initialize\n$ shellspec --init\n  create   .shellspec\n  create   spec/spec_helper.sh\n\n# Write your first specfile (of course you can use your favorite editor)\n$ cat<<'HERE'>spec/hello_spec.sh\nDescribe 'hello.sh'\n  Include lib/hello.sh\n  It 'says hello'\n    When call hello ShellSpec\n    The output should equal 'Hello ShellSpec!'\n  End\nEnd\nHERE\n\n# Create lib/hello.sh\n$ mkdir lib\n$ touch lib/hello.sh\n\n# It will fail because the hello function is not implemented.\n$ shellspec\n\n# Write hello function\n$ cat<<'HERE'>lib/hello.sh\nhello() {\n  echo \"Hello ${1}!\"\n}\nHERE\n\n# It will success!\n$ shellspec\n```\n\n## ShellSpec CLI\n\n### runs specfile using `/bin/sh` by default\n\nShellSpec CLI runs specfiles with the shell running `shellspec`.\nUsually it is `/bin/sh` that is the shebang of `shellspec`. If you run `bash shellspec`, it will be bash.\n`Include` files from specfile will be executed in the same shell as well.\n\nThe purpose of this specification is to allow ShellSpec to easily change multiple types of shells\nand enable the development of cross-platform shell scripts that support multiple shells and environments.\n\nIf you want to test with a specific shell, use the `-s` (`--shell`) option.\nYou can specify the default shell in the `.shellspec` file.\n\nNOTE: If you execute a **shell script file** (not a shell function) from within the specfile,\nits shebang will be respected. Because in that case, it will be run as an external command.\nThe `-s` (`--shell`) option also has no effect.\nIf you are testing a external shell script file, you can use `When run script` or `When run source`.\nThese ignore the shebang of external shell script file and run in the same shell that runs specfile.\n\n### command options\n\nNOTE: Since version 0.28.0, [getoptions](https://github.com/ko1nksm/getoptions) is used to parse options,\nso all POSIX and GNU compatible option syntax can be used. For example, you can abbreviate a long option.\n\nSee more info: [ShellSpec CLI](docs/cli.md)\n\n```console\n$ shellspec -h\nUsage: shellspec [ -c ] [-C <directory>] [options...] [files or directories...]\n\n  Using + instead of - for short options causes reverses the meaning\n\n    -s, --shell SHELL               Specify a path of shell [default: \"auto\" (the shell running shellspec)]\n        --require MODULE            Require a MODULE (shell script file)\n    -O, --options PATH              Specify the path to an additional options file\n    -I, --load-path PATH            Specify PATH to add to $SHELLSPEC_LOAD_PATH (may be used more than once)\n        --helperdir DIRECTORY       The directory to load helper files (spec_helper.sh, etc) [default: \"spec\"]\n        --path PATH                 Set PATH environment variable at startup\n        --{no-}sandbox              Force the use of the mock instead of the actual command\n        --sandbox-path PATH         Make PATH the sandbox path instead of empty [default: empty]\n        --execdir @LOCATION[/DIR]   Specify the execution directory of each specfile | [default: @project]\n    -e, --env NAME[=VALUE]          Set environment variable\n        --env-from ENV-SCRIPT       Set environment variable from shell script file\n    -w, --{no-}warning-as-failure   Treat warning as failure [default: enabled]\n        --{no-}fail-fast[=COUNT]    Abort the run after first (or COUNT) of failures [default: disabled]\n        --{no-}fail-no-examples     Fail if no examples found [default: disabled]\n        --{no-}fail-low-coverage    Fail on low coverage [default: disabled]\n        --failure-exit-code CODE    Override the exit code used when there are failing specs [default: 101]\n        --error-exit-code CODE      Override the exit code used when there are fatal errors [default: 102]\n    -p, --{no-}profile              Enable profiling and list the slowest examples [default: disabled]\n        --profile-limit N           List the top N slowest examples [default: 10]\n        --{no-}boost                Increase the CPU frequency to boost up testing speed [default: disabled]\n        --log-file LOGFILE          Log file for %logger directive and trace [default: \"/dev/tty\"]\n        --tmpdir TMPDIR             Specify temporary directory [default: $TMPDIR, $TMP or \"/tmp\"]\n        --keep-tmpdir               Do not cleanup temporary directory [default: disabled]\n\n  The following options must be specified before other options and cannot be specified in the options file\n\n    -c, --chdir                     Change the current directory to the first path of arguments at the start\n    -C, --directory DIRECTORY       Change the current directory at the start\n\n  **** Execution ****\n\n    -q, --{no-}quick                Run not-passed examples if it exists, otherwise run all [default: disabled]\n    -r, --repair, --only-failures   Run failure examples only (Depends on quick mode)\n    -n, --next-failure              Run failure examples and abort on first failure (Depends on quick mode)\n    -j, --jobs JOBS                 Number of parallel jobs to run [default: 0 (disabled)]\n        --random TYPE[:SEED]        Run examples by the specified random type | <[none]> [specfiles] [examples]\n    -x, --xtrace                    Run examples with trace output of evaluation enabled [default: disabled]\n    -X, --xtrace-only               Run examples with trace output only enabled [default: disabled]\n        --dry-run                   Print the formatter output without running any examples [default: disabled]\n\n  **** Output ****\n\n        --{no-}banner               Show banner if exist \"<HELPERDIR>/banner[.md]\" [default: enabled]\n        --reportdir DIRECTORY       Output directory of the report [default: \"report\"]\n    -f, --format FORMATTER          Choose a formatter for display | <[p]> [d] [t] [j] [f] [null] [debug]\n    -o, --output FORMATTER          Choose a generator(s) to generate a report file(s) [default: none]\n        --{no-}color                Enable or disable color [default: enabled if the output is a TTY]\n        --skip-message VERBOSITY    Mute skip message | <[verbose]> [moderate] [quiet]\n        --pending-message VERBOSITY Mute pending message | <[verbose]> [quiet]\n        --quiet                     Equivalent of --skip-message quiet --pending-message quiet\n        --(show|hide)-deprecations  Show or hide deprecations details [default: show]\n\n  **** Ranges / Filters / Focus ****\n\n    You can run selected examples by specified the line numbers or ids\n\n      shellspec path/to/a_spec.sh:10   # Run the groups or examples that includes lines 10\n      shellspec path/to/a_spec.sh:@1-5 # Run the 5th groups/examples defined in the 1st group\n      shellspec a_spec.sh:10:@1:20:@2  # You can mixing multiple line numbers and ids with join by \":\"\n\n    -F, --focus                     Run focused groups / examples only\n    -P, --pattern PATTERN           Load files matching pattern [default: \"*_spec.sh\"]\n    -E, --example PATTERN           Run examples whose names include PATTERN\n    -T, --tag TAG[:VALUE]           Run examples with the specified TAG\n        --default-path PATH         Set the default path where looks for examples [default: \"spec\"]\n\n    You can specify the path recursively by prefixing it with the pattern \"*/\" or \"**/\"\n      (This is not glob patterns and requires quotes. It is also available with --default-path)\n\n      shellspec \"*/spec\"               # The pattern \"*/\" matches 1 directory\n      shellspec \"**/spec\"              # The pattern \"**/\" matches 0 and more directories\n      shellspec \"*/*/**/test_spec.sh\"  # These patterns can be specified multiple times\n\n    -L, --dereference               Dereference all symlinks in in the above pattern [default: disabled]\n\n  **** Coverage ****\n\n        --covdir DIRECTORY          Output directory of the Coverage Report [default: coverage]\n        --{no-}kcov                 Enable coverage using kcov [default: disabled]\n        --kcov-path PATH            Specify kcov path [default: kcov]\n        --kcov-options OPTIONS      Additional Kcov options (coverage limits, coveralls id, etc)\n\n  **** Utility ****\n\n        --init [TEMPLATE...]        Initialize your project with ShellSpec | [spec] [git] [hg] [svn]\n        --gen-bin [@COMMAND...]     Generate test support commands in \"<HELPERDIR>/support/bin\"\n        --count                     Count the number of specfiles and examples\n        --list LIST                 List the specfiles/examples | [specfiles] [examples(:id|:lineno)]\n        --syntax-check              Syntax check of the specfiles without running any examples\n        --translate                 Output translated specfile\n        --task [TASK]               Run the TASK or Show the task list if TASK is not specified\n        --docker DOCKER-IMAGE       Run tests in specified docker image (EXPERIMENTAL)\n    -v, --version                   Display the version\n    -h, --help                      -h: short help, --help: long help\n```\n\n## Project directory\n\nAll specfiles for ShellSpec must be under the project directory. The root of the project directory\nmust have a `.shellspec` file. This file is that specify the default options to be used in\nthe project, but an empty file is required even if the project has no options.\n\nNOTE: The `.shellspec` file was described in the documentation as a required file for some time,\nbut ShellSpec worked without it. Starting with version 0.28.0, this file is checked and will be\nrequired in future versions.\n\nYou can easily create the necessary files by executing the `shellspec --init` command in an existing directory.\n\n### Typical directory structure\n\nThis is the typical directory structure. Version 0.28.0 allows many of these to be changed by specifying options, supporting a more flexible [directory structure](docs/directory_structure.md).\n\n```text\n<PROJECT-ROOT> directory\n├─ .shellspec                       [mandatory]\n├─ .shellspec-local                 [optional] Ignore from version control\n├─ .shellspec-quick.log             [optional] Ignore from version control\n├─ report/                          [optional] Ignore from version control\n├─ coverage/                        [optional] Ignore from version control\n│\n├─ bin/\n│   ├─ your_script1.sh\n│              :\n├─ lib/\n│   ├─ your_library1.sh\n│              :\n│\n├─ spec/ (also <HELPERDIR>)\n│   ├─ spec_helper.sh               [recommended]\n│   ├─ banner[.md]                  [optional]\n│   ├─ support/                     [optional]\n│   │\n│   ├─ bin/\n│   │   ├─ your_script1_spec.sh\n│   │             :\n│   ├─ lib/\n│   │   ├─ your_library1_spec.sh\n```\n\n### Options file\n\nTo change the default options for the `shellspec` command, create options file(s).\nFiles are read in the order shown below, options defined last take precedence.\n\n1. `$XDG_CONFIG_HOME/shellspec/options`\n2. `$HOME/.shellspec-options` (version >= 0.28.0) or `$HOME/.shellspec` (deprecated)\n3. `<PROJECT-ROOT>/.shellspec`\n4. `<PROJECT-ROOT>/.shellspec-local` (Do not store in VCS such as git)\n\nSpecify your default options with `$XDG_CONFIG_HOME/shellspec/options` or `$HOME/.shellspec-options`.\nSpecify default project options with `.shellspec` and overwrite to your favorites with `.shellspec-local`.\n\n### `.shellspec` - project options file\n\nSpecifies the default options to use for the project.\n\n### `.shellspec-local` - user custom options file\n\nOverride the default options used by the project with your favorites.\n\n### `.shellspec-basedir` - specfile execution base directory\n\nUsed to specify the directory in which the specfile will be run.\nSee [directory structure](docs/directory_structure.md) or `--execdir` option for details.\n\n### `.shellspec-quick.log` - quick execution log\n\nIf this file is present, Quick mode will be enabled and the log of Quick execution will be recorded.\nIt created automatically when `--quick` option is specified.\nIf you want to turn off Quick mode, delete it.\n\n### `report/` - report file directory\n\nThe output location for reports generated by the `--output` or `--profile` options.\nThis can be changed with the `--reportdir` option.\n\n### `coverage/` - coverage reports directory\n\nThe output location for coverage reports.\nThis can be changed with the `--covdir` option.\n\n### `spec/` - (default) specfiles directory\n\nBy default, it is assumed that all specfiles are store under the `spec` directory,\nbut it is possible to create multiple directories with different names.\n\nNOTE: In Version <= 0.27.x, the `spec` directory was the only directory that contained the specfiles.\n\n### \\<HELPERDIR\\> (default: `spec/`)\n\nThe directory to store `spec_helper.sh` and other files.\nBy default, the `spec` directory also serves as `HELPERDIR` directory,\nbut you can change it to another directory with the `--helperdir` option.\n\n#### `spec_helper.sh` - (default) helper file for specfile\n\nThe `spec_helper.sh` is loaded to specfile by the `--require spec_helper` option.\nThis file is used to define global functions, initial setting for examples, custom matchers, etc.\n\n#### `banner[.md]` - banner file displayed at test execution\n\nIf the file `<HELPERDIR>/banner` or `<HELPERDIR>/banner.md` exists, Display a banner when\nthe `shellspec` command is executed. It can be used to display information about the tests.\nThe `--no-banner` option can be used to disable this behavior.\n\n#### `support/` - directory for support files\n\nThis directory can be used to store files such as custom matchers and tasks.\n\n##### `bin` - directory for support commands\n\nThis directory is used to store [support commands](#support-commands).\n\n## Specfile (test file)\n\nIn ShellSpec, you write your tests in a specfile.\nBy default, specfile is a file ending with `_spec.sh` under the `spec` directory.\n\nThe specfile is executed using the `shellspec` command, but it can also be executed directly.\nSee [self-executable specfile](#self-executable-specfile) for details.\n\n### Example\n\n```sh\nDescribe 'lib.sh' # example group\n  Describe 'bc command'\n    add() { echo \"$1 + $2\" | bc; }\n\n    It 'performs addition' # example\n      When call add 2 3 # evaluation\n      The output should eq 5  # expectation\n    End\n  End\nEnd\n```\n\n**The best place to learn how to write a specfile is the\n[examples/spec](examples/spec) directory. You should take a look at it!**\n*(Those examples include failure examples on purpose.)*\n\n### About DSL\n\nShellSpec has its own DSL to write tests. It may seem like a distinctive code because DSL starts\nwith a capital letter, but the syntax is compatible with shell scripts, and you can embed\nshell functions and use [ShellCheck](https://github.com/koalaman/shellcheck) to check the syntax.\n\nYou may feel rejected by this DSL, but It starts with a capital letter to avoid confusion with\nthe command, and it does a lot more than you think, such as realizing scopes, getting\nshell-independent line numbers, and workarounds for bugs in some shells.\n\n### Execution directory\n\nSince version 0.28.0, the working directory when running a specfile is the project root directory by default.\nEven if you run a specfile from a subdirectory in the project directory,\nit is the project root directory.\nBefore 0.27.x, it was the current directory when the `shellspec` command was executed.\n\nYou can change this directory (location) by using the `--execdir @LOCATION[/DIR]` option.\nYou can choose from the following locations and specify a path relative to the location if necessary.\nHowever, you cannot specify a directory outside the project directory.\n\n- `@project`   Where the `.shellspec` file is located (project root) [default]\n- `@basedir`   Where the `.shellspec` or `.shellspec-basedir` file is located\n- `@specfile`  Where the specfile is located\n\nIf `@basedir` is specified, the parent directory is searched from the directory containing the specfile\nto be run, and the first directory where `.shellspec-basedir` or `.shellspec` is found is used as\nthe execution directory. This is useful if you want to have a separate directory for each\nutility (command) you want to test.\n\nNOTE: You will need to change under the project directory or use the `-c` (`--chdir`) or\n`-C` (`--directory`) option before running the specfile.\n\n### Embedded shell scripts\n\nYou can embed shell functions (or shell script code) in the specfile.\nThis shell function can be used for test preparation and complex testing.\n\nNote that the specfile implements scope using subshells.\nShell functions defined in the specfile can only be used within blocks (e.g. `Describe`, `It`, etc).\n\nIf you want to use a global function, you can define it in `spec_helper.sh`.\n\n### Translation process\n\nThe specfile will not be executed directly by the shell, but will be translated into a regular\nshell script and output to a temporary directory (default: `/tmp`) before being executed.\n\nThe translation process is simple in that it only replaces forward-matched words (DSLs), with a few\nexceptions. If you are interested in the translated code, you can see with `shellspec --translate`.\n\n### Syntax formatter (`altshfmt`)\n\nThe specfile contains DSLs, so it cannot be properly formatted by general shell script formatters.\nIf you want to format the specfile, use [altshfmt](https://github.com/shellspec/altshfmt).\n\n## DSL syntax\n\n### Basic structure\n\n#### `Describe`, `Context`, `ExampleGroup` - example group block\n\n`ExampleGroup` is a block for grouping example groups or examples.\n`Describe` and `Context` are aliases for `ExampleGroup`.\nThey can be nested, and may contain example groups or examples.\n\n```sh\nDescribe 'is example group'\n  Describe 'is nestable'\n    ...\n  End\n\n  Context 'is used to facilitate understanding depending on the context'\n    ...\n  End\nEnd\n```\n\nThe example groups can be optionally tagged. See [Tagging](#tagging) for details.\n\n```sh\nDescribe 'is example group' tag1:value1 tag2:value2 ...\n```\n\n#### `It`, `Specify`, `Example` - example block\n\n`Example` is a block for writing an evaluation and expectations.\n`It` and `Specify` are aliases for `Example`.\n\nAn example is composed by up to one evaluation and multiple expectations.\n\n```sh\nadd() { echo \"$1 + $2\" | bc; }\n\nIt 'performs addition'          # example\n  When call add 2 3             # evaluation\n  The output should eq 5        # expectation\n  The status should be success  # another expectation\nEnd\n```\n\nThe examples can be optionally tagged. See [Tagging](#tagging) for details.\n\n```sh\nIt 'performs addition' tag1:value1 tag2:value2 ...\n```\n\n#### `Todo` - one liner empty example\n\n`Todo` is the same as the empty example and is treated as a [pending](#pending---pending-example) example.\n\n```sh\nTodo 'will be used later when we write a test'\n\nIt 'is an empty example, the same as Todo'\nEnd\n```\n\n#### `When` - evaluation\n\nEvaluation executes a shell function or command for verification.\nOnly one evaluation can be defined for each example and also can be omitted.\n\nSee more details of [Evaluation](docs/references.md#evaluation)\n\nNOTE: [About executing aliases](#about-executing-aliases)\n\n##### `call` - call a shell function (without subshell)\n\nIt calls a function without subshell.\nPractically, it can also run commands.\n\n```sh\nWhen call add 1 2 # call `add` shell function with two arguments.\n```\n\n##### `run` - run a command (within subshell)\n\nIt runs a command within subshell. Practically, it can also call a shell function.\nThe command does not have to be a shell script.\n\nNOTE: This does not support coverage measurement.\n\n```sh\nWhen run touch /tmp/foo # run `touch` command.\n```\n\nSome commands below are specially handled by ShellSpec.\n\n###### `command` - runs an external command\n\nIt runs a command, respecting shebang.\nIt can not call a shell function. The command does not have to be a shell script.\n\nNOTE: This does not support coverage measurement.\n\n```sh\nWhen run command touch /tmp/foo # run `touch` command.\n```\n\n###### `script` - runs a shell script\n\nIt runs a shell script, ignoring shebang. The script has to be a shell script.\nIt will be executed in another instance of the same shell as the current shell.\n\n```sh\nWhen run script my.sh # run `my.sh` script.\n```\n\n###### `source` - runs a script by `.` (dot) command\n\nIt sources a shell script, ignoring its shebang. The script has to be a shell script.\nIt is similar to `run script`, but with some differences.\nUnlike `run script`, function-based mocking is available.\n\n```sh\nWhen run source my.sh # source `my.sh` script.\n```\n\n##### About executing aliases\n\nIf you want to execute aliases, you need a workaround using `eval`.\n\n```sh\nalias alias-name='echo this is alias'\nWhen call alias-name # alias-name: not found\n\n# eval is required\nWhen call eval alias-name\n\n# When using embedded shell scripts\nfoo() { eval alias-name; }\nWhen call foo\n```\n\n#### `The` - expectation\n\nExpectation begins with `The` which does the verification.\nThe basic syntax is as follows:\n\n```sh\nThe output should equal 4\n```\n\nUse `should not` for the opposite verification.\n\n```sh\nThe output should not equal 4\n```\n\n##### Subjects\n\nThe subject is the target of the verification.\n\n```sh\nThe output should equal 4\n      |\n      +-- subject\n```\n\nThere are `output` (`stdout`), `error` (`stdout`), `status`, `variable`, `path`, etc. subjects.\n\nPlease refer to the [Subjects](docs/references.md#subjects) for more details.\n\n##### Modifiers\n\nThe modifier concretizes the target of the verification (subject).\n\n```sh\nThe line 2 of output should equal 4\n      |\n      +-- modifier\n```\n\nThe modifiers are chainable.\n\n```sh\nThe word 1 of line 2 of output should equal 4\n```\n\nIf the modifier argument is a number, you can use an ordinal numeral instead of a number.\n\n```sh\nThe first word of second line of output should equal 4\n```\n\nThere are `line`, `word`, `length`, `contents`, `result`, etc. modifiers.\nThe `result` modifier is useful for making the result of a user-defined function the subject.\n\nPlease refer to the [Modifiers](docs/references.md#modifiers) for more details.\n\n##### Matchers\n\nThe matcher is the verification.\n\n```sh\nThe output should equal 4\n                   |\n                   +-- matcher\n```\n\nThere are many matchers such as string matcher, status matcher, variable matchers and stat matchers.\nThe `satisfy` matcher is useful for verification with user-defined functions.\n\nPlease refer to the [Matchers](docs/references.md#matchers) for more details.\n\n##### Language chains\n\nShellSpec supports *language chains* like [chai.js](https://www.chaijs.com/).\nIt only improves readability, does not affect the expectation: `a`, `an`, `as`, `the`.\n\nThe following two sentences have the same meaning:\n\n```sh\nThe first word of second line of output should valid number\n\nThe first word of the second line of output should valid as a number\n```\n\n#### `Assert` - expectation for custom assertion\n\nThe `Assert` is yet another expectation to verify with a user-defined function.\nIt is designed for verification of side effects, not the result of the evaluation.\n\n```sh\nstill_alive() {\n  ping -c1 \"$1\" >/dev/null\n}\n\nDescribe \"example.com\"\n  It \"responses\"\n    Assert still_alive \"example.com\"\n  End\nEnd\n```\n\n### Pending, skip and focus\n\n#### `Pending` - pending example\n\n`Pending` is similar to `Skip`, but the test passes if the verification fails,\nand the test fails if the verification succeeds. This is useful if you want to\nspecify that you will implement something later.\n\n```sh\nDescribe 'Pending'\n  Pending \"not implemented\"\n\n  hello() { :; }\n\n  It 'will success when test fails'\n    When call hello world\n    The output should \"Hello world\"\n  End\nEnd\n```\n\n#### `Skip` - skip example\n\nUse `Skip` to skip executing the example.\n\n```sh\nDescribe 'Skip'\n  Skip \"not exists bc\"\n\n  It 'is always skip'\n    ...\n  End\nEnd\n```\n\n##### `if` - conditional skip\n\nUse `Skip if` if you want to skip conditionally.\n\n```sh\nDescribe 'Conditional skip'\n  not_exists_bc() { ! type bc >/dev/null 2>&1; }\n  Skip if \"not exists bc\" not_exists_bc\n\n  add() { echo \"$1 + $2\" | bc; }\n\n  It 'performs addition'\n    When call add 2 3\n    The output should eq 5\n  End\nEnd\n```\n\n#### 'x' prefix for example group and example\n\n##### `xDescribe`, `xContext`, `xExampleGroup` - skipped example group\n\n`xDescribe`, `xContext`, `xExampleGroup` are skipped example group blocks.\nExecution of examples contained in these blocks is skipped.\n\n```sh\nDescribe 'is example group'\n  xDescribe 'is skipped example group'\n    ...\n  End\nEnd\n```\n\n##### `xIt`, `xSpecify`, `xExample` - skipped example\n\n`xIt`, `xSpecify`, `xExample` are skipped example blocks.\nExecution of the example is skipped.\n\n```sh\nxIt 'is skipped example'\n  ...\nEnd\n```\n\n#### 'f' prefix for example group and example\n\n##### `fDescribe`, `fContext`, `fExampleGroup` - focused example group\n\n`fDescribe`, `fContext`, `fExampleGroup` are focused example group blocks.\nOnly the examples included in these will be executed when the `--focus` option is specified.\n\n```sh\nDescribe 'is example group'\n  fDescribe 'is focus example group'\n    ...\n  End\nEnd\n```\n\n##### `fIt`, `fSpecify`, `fExample` - focused example\n\n`fIt`, `fSpecify`, `fExample` are focused example blocks.\nOnly these examples will be executed when the `--focus` option is specified.\n\n```sh\nfIt 'is focused example'\n  ...\nEnd\n```\n\n#### About temporary pending and skip\n\nUsing `Pending` or `Skip` without a message is a \"temporary pending\" or \"temporary skip\".\n\"x\"-prefixed example groups and examples are also treated as temporary skips.\n\nThe non-temporary `Pending` and `Skip` (with a message) are used when the case will take a long time to resolve.\nIt may be committed to a version control system. Temporary pending and skip are used during current work.\nWe do not recommend committing them to a version control system.\n\nThese two types differ in the display of the report. Refer to `--skip-message` and `--pending-message` options.\n\n```sh\n# Temporary pending and skip\nPending\nSkip\nSkip # this comment will be displayed in the report\nTodo\nxIt\n  ...\nEnd\n\n# Non-temporary pending and skip\nPending \"reason\"\nSkip \"reason\"\nSkip if \"reason\" condition\nTodo \"It will be implemented\"\n```\n\n### Hooks\n\n#### `BeforeEach` (`Before`), `AfterEach` (`After`) - example hook\n\nYou can specify commands to be executed before / after each example by `BeforeEach` (`Before`), `AfterEach` (`After`).\n\nNOTE: `BeforeEach` and `AfterEach` are supported in version 0.28.0 and later.\nPrevious versions should use `Before` and `After` instead.\n\nNOTE: `AfterEach` is for cleanup and not for assertions.\n\n```sh\nDescribe 'example hook'\n  setup() { :; }\n  cleanup() { :; }\n  BeforeEach 'setup'\n  AfterEach 'cleanup'\n\n  It 'is called before and after each example'\n    ...\n  End\n\n  It 'is called before and after each example'\n    ...\n  End\nEnd\n```\n\n#### `BeforeAll`, `AfterAll` - example group hook\n\nYou can specify commands to be executed before / after all examples by `BeforeAll` and `AfterAll`.\n\n```sh\nDescribe 'example all hook'\n  setup() { :; }\n  cleanup() { :; }\n  BeforeAll 'setup'\n  AfterAll 'cleanup'\n\n  It 'is called before/after all example'\n    ...\n  End\n\n  It 'is called before/after all example'\n    ...\n  End\nEnd\n```\n\n#### `BeforeCall`, `AfterCall` - call evaluation hook\n\nYou can specify commands to be executed before / after call evaluation by `BeforeCall` and `AfterCall`.\n\nNOTE: These hooks were originally created to test ShellSpec itself.\nPlease use the `BeforeEach` / `AfterEach` hooks whenever possible.\n\n```sh\nDescribe 'call evaluation hook'\n  setup() { :; }\n  cleanup() { :; }\n  BeforeCall 'setup'\n  AfterCall 'cleanup'\n\n  It 'is called before/after call evaluation'\n    When call hello world\n    ...\n  End\nEnd\n```\n\n#### `BeforeRun`, `AfterRun` - run evaluation hook\n\nYou can specify commands to be executed before / after run evaluation\n(`run`, `run command`, `run script`, and `run source`) by `BeforeRun` and `AfterRun`.\n\nThese hooks are executed in the same subshell as the \"run evaluation\".\nTherefore, you can access the variables after executing the evaluation.\n\nNOTE: These hooks were originally created to test ShellSpec itself.\nPlease use the `BeforeEach` / `AfterEach` hooks whenever possible.\n\n```sh\nDescribe 'run evaluation hook'\n  setup() { :; }\n  cleanup() { :; }\n  BeforeRun 'setup'\n  AfterRun 'cleanup'\n\n  It 'is called before/after run evaluation'\n    When run hello world\n    ...\n  End\nEnd\n```\n\n#### Pitfalls\n\nThe hooks may fail in subtle ways if there is output to stderr, even if the\nreturn code / exit code is `0`.\n\nCommands like `git checkout` routinely write to stderr, even if there was no actual\nfailure, so be aware that your hooks may fail because of this.\n\n### Helpers\n\n#### `Dump` - dump stdout, stderr, and status for debugging\n\nDump stdout, stderr, and status of the evaluation. It is useful for debugging.\n\n```sh\nWhen call echo hello world\nDump # stdout, stderr and status\n```\n\n#### `Include` - include a script file\n\nInclude a shell script to test.\n\n```sh\nDescribe 'lib.sh'\n  Include lib.sh # hello function defined\n\n  Describe 'hello()'\n    It 'says hello'\n      When call hello ShellSpec\n      The output should equal 'Hello ShellSpec!'\n    End\n  End\nEnd\n```\n\n#### `Set` - set shell options\n\nSet shell options before executing each example.\nThe shell option name is the long name of `set` or the name of `shopt`:\n\nNOTE: Use `Set` instead of the `set` command because the `set` command\nmay not work as expected in some shells.\n\n```sh\nDescribe 'Set helper'\n  Set 'errexit:off' 'noglob:on'\n\n  It 'sets shell options before executing the example'\n    When call foo\n  End\nEnd\n```\n\n#### `Path`, `File`, `Dir` - path alias\n\n`Path` is used to define a short pathname alias.\n`File` and `Dir` are aliases for `Path`.\n\n```sh\nDescribe 'Path helper'\n  Path hosts-file=\"/etc/hosts\"\n\n  It 'defines short alias for long path'\n    The path hosts-file should exist\n  End\nEnd\n```\n\n#### `Data` - pass data as stdin to evaluation\n\nYou can use the Data Helper which inputs data from stdin for evaluation.\nThe input data is specified after `#|` in the `Data` or `Data:expand` block.\n\n```sh\nDescribe 'Data helper'\n  It 'provides with Data helper block style'\n    Data # Use Data:expand instead if you want expand variables.\n      #|item1 123\n      #|item2 456\n      #|item3 789\n    End\n    When call awk '{total+=$2} END{print total}'\n    The output should eq 1368\n  End\nEnd\n```\n\nYou can also use a file, function or string as data sources.\n\nSee more details of [Data](docs/references.md#data)\n\n#### `Parameters` - parameterized example\n\nParameterized tests (aka [Data-driven testing](https://en.wikipedia.org/wiki/Data-driven_testing))\nare used to run the same test once for each set of parameters.\n`Parameters` defines a block of parameters.\n\n```sh\nDescribe 'example'\n  Parameters\n    \"#1\" 1 2 3\n    \"#2\" 1 2 3\n  End\n\n  Example \"example $1\"\n    When call echo \"$(($2 + $3))\"\n    The output should eq \"$4\"\n  End\nEnd\n```\n\nIn addition to the default `Parameters` block, three additional styles are supported:\n`Parameters:value`, `Parameters:matrix` and `Parameters:dynamic`.\n\nSee more details of [Parameters](docs/references.md#parameters)\n\nNOTE: You can also combine the `Parameters` and `Data:expand` helpers.\n\n#### `Mock` - create a command-based mock\n\nSee [Command-based mock](#command-based-mock)\n\n#### `Intercept` - create an intercept point\n\nSee [Intercept](#intercept)\n\n## Directives\n\nDirectives are instructions that can be used in embedded shell scripts.\nIt is used to solve small problems of shell scripts in testing.\n\nThis is like a shell function, but not a shell function.\nTherefore, the supported grammar is limited and can only be used at the\nbeginning of a function definition or at the beginning of a line.\n\n```sh\nfoo() { %puts \"foo\"; } # supported\n\nbar() {\n  %puts \"bar\" # supported\n}\n\nbaz() {\n  any command; %puts \"baz\" # not supported\n}\n```\n\n### `%const` (`%`) - constant definition\n\n`%const` (`%` is short hand) directive defines a constant value. The characters\nwhich can be used for variable names are uppercase letters `[A-Z]`, digits\n`[0-9]` and underscore `_` only. It can not be defined inside an example\ngroup nor an example.\n\nThe value is evaluated during the specfile translation process.\nSo you can access ShellSpec variables, but you can not access variable or\nfunction in the specfile.\n\nThis feature assumes use with conditional skip. The conditional skip may run\noutside of the examples. As a result, sometimes you may need variables defined\noutside of the examples.\n\n### `%text` - embedded text\n\nYou can use the `%text` directive instead of a hard-to-use heredoc with\nindented code. The input data is specified after `#|`.\n\n```sh\nDescribe '%text directive'\n  It 'outputs texts'\n    output() {\n      echo \"start\" # you can write code here\n      %text\n      #|aaa\n      #|bbb\n      #|ccc\n      echo \"end\" # you can write code here\n    }\n\n    result() { %text\n      #|start\n      #|aaa\n      #|bbb\n      #|ccc\n      #|end\n    }\n\n    When call output\n    The output should eq \"$(result)\"\n    The line 3 of output should eq 'bbb'\n  End\nEnd\n```\n\n### `%puts` (`%-`), `%putsn` (`%=`) - output a string (with newline)\n\n`%puts` (put string) and `%putsn` (put string with newline) can be used instead\nof (not portable) echo. Unlike echo, it does not interpret escape sequences\nregardless of the shell. `%-` is an alias of `%puts`, `%=` is an alias of\n`%putsn`.\n\n### `%printf` - alias for printf\n\nThis is the same as `printf`, but it can be used in the sandbox mode because the path has been resolved.\n\n### `%sleep` - alias for sleep\n\nThis is the same as `sleep`, but it can be used in the sandbox mode because the path has been resolved.\n\n### `%preserve` - preserve variables\n\nUse the `%preserve` directive to preserve the variables in subshells and external shell scripts.\n\nIn the following cases, `%preserve` is required because variables are not preserved.\n\n- `When run` evaluation - It runs in a subshell.\n- Command-based mock (`Mock`) - It is an external shell script.\n- Function-based Mock called by command substitution\n\n```sh\nDescribe '%preserve directive'\n  It 'preserves variables'\n    func() { foo=1; bar=2; baz=3; }\n    preserve() { %preserve bar baz:BAZ; }\n    AfterRun preserve\n\n    When run func\n    The variable foo should eq 1 # This will be failure\n    The variable bar should eq 2 # This will be success\n    The variable BAZ should eq 3 # Preserved to different variable (baz:BAZ)\n  End\nEnd\n```\n\n### `%logger` - debug output\n\nOutput log messages to the log file (default: `/dev/tty`) for debugging.\n\n### `%data` - define parameter\n\nSee [Parameters:dynamic](docs/references.md#parametersdynamic).\n\n## Mocking\n\nThere are two ways to create a mock, (shell) function-based mock and (external) command-based mock.\nThe function-based mock is usually recommended for performance reasons.\nBoth can be overwritten with an internal block and will be restored when the block ends.\n\n### Function-based mock\n\nThe (shell) function-based mock is simply (re)defined with a shell function.\n\n```sh\nDescribe 'function-based mock'\n  get_next_day() { echo $(($(date +%s) + 86400)); }\n\n  date() {\n    echo 1546268400\n  }\n\n  It 'calls the date function'\n    When call get_next_day\n    The stdout should eq 1546354800\n  End\nEnd\n```\n\n### Command-based mock\n\nThe (external) command-based mock creates a temporary mock shell script and runs as an external command.\nThis is slow, but there are some advantages over the function-based mock.\n\n- Can be use invalid characters as the shell function name.\n  - e.g. `docker-compose` (`-` cannot be used as a function name in POSIX)\n- Can be invoke a mocked command from an external command (not limited to shell script).\n\nA command-based mock creates an external shell script with the contents of a `Mock` block,\nso there are some restrictions.\n\n- It is not possible to mock shell functions or shell built-in functions.\n- It is not possible to call shell functions outside the `Mock` block.\n  - Exception: Can be called exported (`export -f`) functions. (bash only)\n- To reference variables outside the `Mock` block, they must be exported.\n- To return a variable from a Mock block, you need to use the `%preserve` directive.\n\n```sh\nDescribe 'command-based mock'\n  get_next_day() { echo $(($(date +%s) + 86400)); }\n\n  Mock date\n    echo 1546268400\n  End\n\n  It 'runs the mocked date command'\n    When call get_next_day\n    The stdout should eq 1546354800\n  End\nEnd\n```\n\nNOTE: To achieve this feature, a directory for mock commands is included at the beginning of the `PATH`.\n\n## Support commands\n\n### Execute the actual command within a mock function\n\nSupport commands are helper commands that can be used in the specfile.\nFor example, it can be used in a mock function to execute the actual command.\nIt is recommended that the support command name be the actual command name prefixed with `@`.\n\n```sh\nDescribe \"Support commands example\"\n  touch() {\n    @touch \"$@\" # @touch executes actual touch command\n    echo \"$1 was touched\"\n  }\n\n  It \"touch a file\"\n    When run touch \"file\"\n    The output should eq \"file was touched\"\n    The file \"file\" should exist\n  End\nEnd\n```\n\nSupport commands are generated in the `spec/support/bin` directory by the `--gen-bin` option.\nFor example run `shellspec --gen-bin @touch` to generate the `@touch` command.\n\nThis is the main purpose, but support commands are just shell scripts, so they can\nalso be used for other purposes. You can freely edit the support command script.\n\n### Make mock not mandatory in sandbox mode\n\nThe sandbox mode forces the use of mocks. However, you may not want to require mocks for some commands.\nFor example, `printf` is a built-in command in many shells and does not require a mock in the sandbox mode for these shells. But\nthere are shells where it is an external command and then it requires to be mocked.\n\nTo allow `printf` to be called without mocking in certain cases,\ncreate a support command named `printf` (`shellspec --gen-bin printf`).\n\n### Resolve command incompatibilities\n\nSome commands have different options between BSD and GNU.\nIf you handle the difference in the specfile, the test will be hard to read.\nYou can solve it with the support command.\n\n```sh\n#!/bin/sh -e\n# Command name: @sed\n. \"$SHELLSPEC_SUPPORT_BIN\"\ncase $OSTYPE in\n  *darwin*) invoke gsed \"$@\" ;;\n  *) invoke sed \"$@\" ;;\nesac\n```\n\n## Tagging\n\nThe example groups or examples can be tagged, and the `--tag` option can be used to filter the examples to be run.\nThe tag name and tag value are separated by `:`, and the tag value is optional. You can use any character if quoted.\n\n```sh\nDescribe \"Checking something\" someTag:someVal\n  It \"does foo\" tagA:val1\n    ...\n  It \"does bar\" tagA:val2\n    ...\n  It \"does baz\" tagA\n    ...\nEnd\n```\n\n1. Everything nested inside a selected element is selected in parent elements. e.g. `--tag someTag` will select everything above.\n2. Specifying a tag but no value selects everything with that tag whether or not it has a value, e.g. `--tag tagA` will select everything above.\n3. Specifying multiple tags will select the union of everything tagged, e.g. `--tag tagA:val1,tagA:val2` will select `does foo` and `does bar`.\n4. Tests included multiple times are not a problem, e.g. `--tag someTag,tagA,tagA:val1` just selects everything.\n5. If no tag matches, nothing will be run, e.g. `--tag tagA:` runs nothing (it does not match baz above, as empty values are not the same as no value).\n6. The --tag option can be used multiple times, e.g. `--tag tagA:val1 --tag tagA:val2` works the same as `--tag tagA:val1,tagA:val2`\n\n## About testing external commands\n\nShellSpec is a testing framework for shell scripts, but it can be used to test anything that can be executed as an external command, even if it is written in another language. Even shell scripts can be tested as external commands.\n\nIf you are testing a shell script as an external command, please note the following.\n\n- It will be executed in the shell specified by the shebang not the shell running the specfile.\n- The coverage of the shell script will not be measured.\n- Cannot refer to variables inside the shell script.\n- Shell built-in commands cannot be mocked.\n- Functions defined inside the shell script cannot be mocked.\n- Only command-based mock can be used (if the script is calling an external command).\n- Interceptor is not available.\n\nTo get around these limitations, use `run script` or `run source`. See [How to test a single file shell script](#how-to-test-a-single-file-shell-script).\n\n## How to test a single file shell script\n\nIf the shell script consists of a single file, unit testing becomes difficult.\nHowever, there are many such shell scripts.\n\nShellSpec has the ability to testing in such cases with only few modifications to the shell script.\n\n### Using `run script`\n\nUnlike the case of executing as an [external command](#about-testing-external-commands), it has the following features.\n\n- It will run in the same shell (but another process) that is running specfile.\n- The coverage of the shell script will be measured.\n\nThere are limitations as follows.\n\n- Cannot refer to variables inside the shell script.\n- Shell built-in commands cannot be mocked.\n- Functions defined inside the shell script cannot be mocked.\n- Only command-based mock can be used (if the script is calling an external command).\n- Interceptor is not available.\n\n### Using `run source`\n\nIt is even less limitations than `run script` and has the following features.\n\n- It will run in the same shell and same process that is running specfile.\n- The coverage of the shell script will be measured.\n- Can be refer to variables inside the shell script.\n- Function-based mock and command-based mock are available.\n- Interceptor is available.\n- Shell built-in commands can be mocked.\n- Functions defined inside the shell script can be mocked using interceptor.\n\nHowever, since it is simulated using the `.` command, there are some differences in behavior.\nFor example, the value of `$0` is different.\n\nNOTE: Mocking of shell built-in commands can be done before `run source`. However, if you are using\ninterceptor, mocking of the `test` command must be done in the `__<name>__` function.\n\n### Testing shell functions\n\n#### `__SOURCED__`\n\nThis is the way to test shell functions defined in a shell script.\n\nLoading a script with `Include` defines a `__SOURCED__` variable available in the sourced script.\nIf the variable `__SOURCED__` is defined, please return from the shell script.\n\n```sh\n#!/bin/sh\n# hello.sh\n\nhello() { echo \"Hello $1\"; }\n\n# This is the writing style presented by ShellSpec, which is short but unfamiliar.\n# Note that it returns the current exit status (could be non-zero).\n${__SOURCED__:+return}\n\n# The above means the same as below.\n# ${__SOURCED__:+x} && return $?\n\n# If you don't like the coding style, you can use the general writing style.\n# if [ \"${__SOURCED__:+x}\" ]; then\n#   return 0\n# fi\n\nhello \"$1\"\n```\n\n```sh\nDescribe \"hello.sh\"\n  Include \"./hello.sh\"\n\n  Describe \"hello()\"\n    It \"says hello\"\n      When call hello world\n      The output should eq \"Hello world\"\n    End\n  End\nEnd\n```\n\n### Intercepting\n\nInterceptor is a feature that allows you to intercept your shell script in the middle of its execution.\nThis makes it possible to mock functions that cannot be mocked in advance at arbitrary timing,\nand to make assertions by retrieving the state of during script execution.\n\nIt is a powerful feature, but avoid using it as possible, because it requires you to modify your code\nand may reduce readability. Normally, it is not a good idea to modify the code just for testing,\nbut in some cases, there is no choice but to use this.\n\n```sh\n#!/bin/sh\n# ./today.sh\n\n# When run directly without testing, the \"__()\" function does nothing.\ntest || __() { :; }\n\n# the \"now()\" function is defined here, so it can't be mocked in advance.\nnow() { date +\"%Y-%m-%d %H:%M:%S\"; }\n\n# The function you want to test\ntoday() {\n  now=$(now)\n  echo \"${now% *}\"\n}\n\n# I want to mock the \"now()\" function here.\n__ begin __\n\ntoday=$(today)\necho \"Today is $today\"\n\n__ end __\n```\n\n```sh\nDescribe \"today.sh\"\n  Intercept begin\n  __begin__() {\n    now() { echo \"2021-01-01 01:02:03\"; }\n  }\n  __end__() {\n    # The \"run source\" is run in a subshell, so you need to use \"%preserve\"\n    # to preserve variables\n    %preserve today\n  }\n\n  It \"gets today's date\"\n    When run source ./today.sh\n    The output should eq \"Today is 2021-01-01\"\n    The variable today should eq \"2021-01-01\"\n  End\nEnd\n```\n\n#### `Intercept`\n\nUsage: `Intercept [<name>...]`\n\nSpecify the name(s) to intercept.\n\nNOTE: I will change `Intercept` to `Interceptors` to make it a declarative DSL.\n\n#### `test || __() { :; }`\n\nDefine the `__` function that does nothing except when run as a test (via ShellSpec).\nThis allows you to run it as a production without changing the code.\n\nThe `test` command is the shell built-in `test` command. This command returns false (non-zero)\nwhen called with no arguments. This will allow who are not familiar with ShellSpec to will\nunderstand what the result will be, even if they don't know what the code is for.\nOf course, it is good practice to comment on what the code is for\n\nWhen run via ShellSpec, the `test` command is redefined and returns true \"only once\" when called\nwith no arguments. After that, it will return to its original behavior. This means that this code\nneeds to be executed only once, at the start of the shell script.\n\n#### `__`\n\nUsage: `__ <name> [arguments...] __`\n\nThis is where the process is intercepted. You can define more than one.\nIf the name matches the name specified in `Intercept`, the `__<name>__` function will be called.\n\nNote that if the name is not specified in `Intercept`, nothing will be done,\nbut the exit status will be changed to 0.\n\n## spec_helper\n\nThe `spec_helper` can be used to set shell options for all specfiles,\ndefine global functions,check the execution shell, load custom matchers, etc.\n\nThe `spec_helper` is the default module name. It can be changed to any other name, and multiple\nmodules can be used. Only characters accepted by POSIX as identifiers can be used in module names.\nThe file name of the module must be the module name with the extension `.sh` appended.\nIt is loaded from `SHELLSPEC_LOAD_PATH` using the `--require` option.\n\nThe following is a typical `spec_helper`. The following three callback functions are available.\n\n```sh\n# Filename: spec/spec_helper.sh\n\nset -eu\n\nspec_helper_precheck() {\n  minimum_version \"0.28.0\"\n  if [ \"$SHELL_TYPE\" != \"bash\" ]; then\n    abort \"Only bash is supported.\"\n  fi\n}\n\nspec_helper_loaded() {\n  : # In most cases, you won't use it.\n}\n\nspec_helper_configure() {\n  import 'support/custom_matcher'\n  before_each \"global_before_each_hook\"\n}\n\n# User-defined global function\nglobal_before_each_hook() {\n  :\n}\n\n# In version <= 0.27.x, only shellspec_spec_helper_configure was available.\n# This callback function is still supported but deprecated in the future.\n# Please rename it to spec_helper_configure.\n# shellspec_spec_helper_configure() {\n#  :\n# }\n```\n\nThe `spec_helper` will be loaded at least twice. The first time is at precheck phase,\nwhich is executed in a separate process before the specfile execution.\nThe second time will be load at the beginning of the specfile execution.\nIf you are using parallel execution, it will be loaded every specfile.\n\nWithin each callback function, there are several helper functions available. These functions are\nnot available outside of the callback function. Also, these callback functions will be removed\nautomatically when `spec_helper` is finished loading. (User-defined functions will not be removed.)\n\n### `<module>_precheck`\n\nThis callback function will be invoked only once before loading specfiles.\nExit with `exit` or `abort`, or `return` non-zero to exit without executing specfiles.\nInside this function, `set -eu` is executed, so an explicit return on error is not necessary.\n\nSince it is invoked in a separate process from specfiles, changes made in\nthis function will not be affected in specfiles.\n\n#### `minimum_version`\n\n- Usage: `minimum_version <version>`\n\nSpecifies the minimum version of ShellSpec that the specfile supports. The version format is\n[semantic version](https://semver.org/). Pre-release versions have a lower precedence than\nthe associated normal version, but comparison between pre-release versions is not supported.\nThe build metadata will simply be ignored.\n\nNOTE: Since `<module>_precheck` is only available in 0.28.0 or later,\nit can be executed with earlier ShellSpecs even if minimum_version is specified.\nTo avoid this, you can implement a workaround using `--env-from`.\n\n```sh\n# spec/env.sh\n# Add `--env-from spec/env.sh` to `.shellspec`\nmajor_minor=${SHELLSPEC_VERSION%\".${SHELLSPEC_VERSION#*.*.}\"}\nif [ \"${major_minor%.*}\" -eq 0 ] && [ \"${major_minor#*.}\" -lt 28 ]; then\n  echo \"ShellSpec version 0.28.0 or higher is required.\" >&2\n  exit 1\nfi\n```\n\n#### `error`, `warn`, `info`\n\n- Usage: `error [messages...]`\n- Usage: `warn [messages...]`\n- Usage: `info [messages...]`\n\nOutputs a message according to the type. You can also use `echo` or `printf`.\n\n#### `abort`\n\n- Usage: `abort [messages...]`\n- Usage: `abort <exit status> [messages...]`\n\nDisplay an error message and `exit`. If the exit status is omitted, it is `1`.\nYou can also exit with exit. `exit 0` will exit normally without executing the specfiles.\n\n#### `setenv`, `unsetenv`\n\n- Usage: `setenv [name=value...]`\n- Usage: `unset [name...]`\n\nYou can use `setenv` or `unsetenv` to pass or remove environment variables from precheck to specfiles.\n\n#### environment variables\n\nThe following environment variables are defined.\n\n- `VERSION` - ShellSpec Version\n- `SHELL_TYPE` - Currently running shell type (e.g. `bash`)\n- `SHELL_VERSION` - Currently running shell version (e.g. `4.4.20(1)-release`)\n\nNOTE: Be careful not to confuse `SHELL_TYPE` with the environment variable `SHELL`.\nThe environment variable `SHELL` is the user login shell, not the currently running shell.\nIt is a variable set by the system, and which unrelated to ShellSpec.\n\n### `<module>_loaded`\n\nIt is called after loading the shellspec's general internal functions,\nbut before loading the core modules (subject, modifier, matcher, etc).\nIf parallel execution is enabled, it may be called multiple times in isolated processes.\nInternal functions starting with `shellspec_` can also be used, but be aware that they may change.\n\nThis was created to perform [workarounds](helper/ksh_workaround.sh) for specific shells in order to\ntest ShellSpec itself. Other than that, I have not come up with a case where this is\nabsolutely necessary, but if you have one, please let me know.\n\n### `<module>_configure`\n\nThis callback function will be called after core modules (subject, modifier, matcher, etc) has been loaded.\nIf parallel execution is enabled, it may be called multiple times in isolated processes.\nInternal functions starting with `shellspec_` can also be used, but be aware that they may change.\nIt can be used to set global hooks, load custom matchers, etc., and override core module functions.\n\n#### `import`\n\n- Usage: `import <module> [arguments...]`\n\nImport a custom module from `SHELLSPEC_LOAD_PATH`.\n\n#### `before_each`, `after_each`\n\n- Usage: `before_each [hooks...]`\n- Usage: `after_each [hooks...]`\n\nRegister hooks to be executed before and after every example.\nIt is the same as executing `BeforeEach`/`AfterEach` at the top of all specfiles.\n\n#### `before_all`, `after_all`\n\n- Usage: `before_all [hooks...]`\n- Usage: `after_all [hooks...]`\n\nRegister hooks to be executed before and after all example.\nIt is the same as executing `BeforeAll`/`AfterAll` at the top of all specfiles.\n\nNOTE: This is a hook that is called before and after each specfile, not before and after all specfiles.\n\n## Self-executable specfile\n\nAdd `eval \"$(shellspec - -c) exit 1\"` to the top of the specfile and give execute permission\nto the specfile. You can use `/bin/sh`, `/usr/bin/env bash`, etc. for shebang.\nThe specfile will be run in the shell written in shebang.\n\n```sh\n#!/bin/sh\n\neval \"$(shellspec - -c) exit 1\"\n\n# Use the following if version <= 0.27.x\n# eval \"$(shellspec -)\"\n\nDescribe \"bc command\"\n  bc() { echo \"$@\" | command bc; }\n\n  It \"performs addition\"\n    When call bc \"2+3\"\n    The output should eq 5\n  End\nEnd\n```\n\nThe `-c` option is available since 0.28.0, and you can also pass other options.\nIf you run the specfile directly, `--pattern` will be automatically set to `*`.\nThese options will be ignored if run via `shellspec` command.\n\nThe use of `shellspec` as shebang is deprecated because it is not portable.\n\n```awk\n#!/usr/bin/env shellspec -c\nLinux does not allow passing options\n\n#!/usr/bin/env -S shellspec -c\nThe -S option requires GNU Core Utilities 8.30 (2018-07-01) or later.\n```\n\n## Use with Docker\n\nYou can run ShellSpec without installation using Docker. ShellSpec and\nspecfiles run in a Docker container.\n\nSee [How to use ShellSpec with Docker](docs/docker.md).\n\n## Extension\n\n### Custom subject, modifier and matcher\n\nYou can create custom subject, custom modifier and custom matcher.\n\nSee [examples/spec/support/custom_matcher.sh](examples/spec/support/custom_matcher.sh) for custom matcher.\n\nNOTE: If you want to verify using shell function, you can use [result](docs/references.md#result) modifier or\n[satisfy](docs/references.md#satisfy) matcher. You don't need to create a custom matcher, etc.\n\n## Code Coverage\n\nShellSpec has integrated coverage feature. To use this feature [Kcov][] (v38 or later) is required.\n\n[Kcov]: https://github.com/SimonKagstrom/kcov\n\n### Supported shells\n\nSupported only in **bash**, **zsh**, and **ksh**, where `DEBUG` trap is implemented.\nHowever, we recommend latest **bash** for the following reasons.\n\n- bash (older versions): There seems to be some code that cannot be measured correctly.\n- zsh: There seems to be some code that cannot be measured correctly, and the measurement rate will be the lowest.\n- ksh: ksh93u+ and ksh2020 may have side effects on exit status when DEBUG trap is enabled due to a bug.\nThis bug has been [fixed](https://github.com/ksh93/ksh/issues/155) in [ksh93u+m](https://github.com/ksh93/ksh).\nThese are also prone to instability, especially with ksh2020 (which has been abandoned).\n\nIn any shell, some code may not be measured correctly (e.g., code containing `eval` or newline).\nThese are limitations and problems caused by shells and Kcov.\n\n### Measurement target\n\nShellSpec measures only the necessary codes to improve the measurement speed.\nAlso, there are some things that cannot be measured due to implementation.\n\n- The shell scripts loaded by `Include` will be measured.\n- The shell functions called by the `When` evaluation will be measured.\n- The shell scripts executed by the `When run script` evaluation will be measured.\n- The shell scripts executed by the `When run source` evaluation will be measured.\n- The external commands executed by the `When` evaluation will NOT be measured.\n  - Even if it is a shell script, it is not measured when it is executed as an external command.\n- If other than the above, it will not be measured.\n\nBy default only shell scripts whose names contain `.sh` are coverage targeted.\nIf you want to include other files, you need to adjust options with `--kcov-options`.\n\n```sh\n# Default kcov (coverage) options\n--kcov-options \"--include-path=. --path-strip-level=1\"\n--kcov-options \"--include-pattern=.sh\"\n--kcov-options \"--exclude-pattern=/.shellspec,/spec/,/coverage/,/report/\"\n\n# Example: Include script \"myprog\" with no extension\n--kcov-options \"--include-pattern=.sh,myprog\"\n\n# Example: Only specified files/directories\n--kcov-options \"--include-pattern=myprog,/lib/\"\n```\n\n### Coverage report\n\n[Coverage report][coverage] and `cobertura.xml` and `sonarqube.xml` files are generated under the coverage directory by Kcov.\nYou can easily integrate with [Coveralls](https://coveralls.io/), [Code Climate](https://codeclimate.com/),\n[Codecov](https://codecov.io/), etc.\n\n## For developers\n\n### Subprojects\n\n#### ShellMetrics - Cyclomatic Complexity Analyzer for shell scripts\n\nURL: [https://github.com/shellspec/shellmetrics](https://github.com/shellspec/shellmetrics)\n\n#### ShellBench - A benchmark utility for POSIX shell comparison\n\nURL: [https://github.com/shellspec/shellbench](https://github.com/shellspec/shellbench)\n\n#### altshfmt - AltSH (alternative shell script) formatter\n\nURL: [https://github.com/shellspec/altshfmt](https://github.com/shellspec/altshfmt)\n\n### Related projects\n\n#### getoptions - An elegant option parser and generator for shell scripts\n\nURL: [https://github.com/ko1nksm/getoptions](https://github.com/ko1nksm/getoptions)\n\n#### readlinkf - readlink -f implementation for shell scripts\n\nURL: [https://github.com/ko1nksm/readlinkf](https://github.com/ko1nksm/readlinkf)\n\n#### portable-echo - Portable echo shell function for POSIX compliant shells\n\nURL: [https://github.com/ko1nksm/portable-echo.sh](https://github.com/ko1nksm/portable-echo.sh)\n\n### Inspired frameworks\n\n- [RSpec](https://rspec.info/) - Behaviour Driven Development for Ruby\n- [Jest](https://jestjs.io/]) - Delightful JavaScript Testing\n- [Mocha](https://mochajs.org/) - the fun, simple, flexible JavaScript test framework\n- [Jasmine](https://jasmine.github.io/) - Behavior-Driven JavaScript\n- [Ginkgo](https://onsi.github.io/ginkgo/) - A Golang BDD Testing Framework\n- [JUnit 5](https://junit.org/junit5/) - The programmer-friendly testing framework for Java\n\n### Contributions\n\nAll contributions are welcome!\n\nShellSpec uses a peculiar coding style to assure high performance,\nreliability and portability, and the external commands allowed to use are greatly restricted.\n\nWe recommend that you create WIP PR early or offer suggestions in discussions to avoid ruining your work.\n\nSee [CONTRIBUTING.md](CONTRIBUTING.md)\n\n---\n\nAuthor: Koichi Nakashima ([ko1nksm](https://github.com/ko1nksm))\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "helper",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 7.4658203125,
          "content": "#!/bin/sh\n# shellcheck disable=SC2034\n\ntest || __() { :; }\n\ninstaller=\"https://git.io/shellspec\"\nrepo=\"https://github.com/shellspec/shellspec.git\"\narchive=\"https://github.com/shellspec/shellspec/archive\"\nproject=\"shellspec\"\nexec=\"shellspec\"\n\nset -eu && :<<'USAGE'\nUsage: [sudo] ${0##*/} [VERSION] [OPTIONS...]\n  or : wget -O- $installer | [sudo] sh\n  or : wget -O- $installer | [sudo] sh -s -- [OPTIONS...]\n  or : wget -O- $installer | [sudo] sh -s VERSION [OPTIONS...]\n  or : curl -fsSL $installer | [sudo] sh\n  or : curl -fsSL $installer | [sudo] sh -s -- [OPTIONS...]\n  or : curl -fsSL $installer | [sudo] sh -s VERSION [OPTIONS...]\n\nVERSION:\n  Specify install version and method\n\n  e.g\n    1.0.0           Install 1.0.0 from git\n    master          Install master from git\n    1.0.0.tar.gz    Install 1.0.0 from tar.gz archive\n    .               Install from local directory\n\nOPTIONS:\n  -p, --prefix PREFIX   Specify prefix                 [default: \\$HOME/.local]\n  -b, --bin BIN         Specify bin directory          [default: <PREFIX>/bin]\n  -d, --dir DIR         Specify installation directory [default: <PREFIX>/lib/$project]\n  -s, --switch          Switch version (requires installation via git)\n  -l, --list            List available versions (tags)\n      --pre             Include pre-release\n      --fetch FETCH     Force command to use when installing from archive (curl or wget)\n  -y, --yes             Automatic yes to prompts\n  -h, --help            You're looking at it\nUSAGE\n\nusage() {\n  while IFS= read -r line && [ ! \"${line#*:}\" = \\<\\<\"'$1'\" ]; do :; done\n  while IFS= read -r line && [ ! \"$line\" = \"$1\" ]; do set \"$@\" \"$line\"; done\n  shift && [ $# -eq 0 ] || printf '%s\\n' cat\\<\\<\"$line\" \"$@\" \"$line\"\n}\n\nCDPATH=''\n[ \"${ZSH_VERSION:-}\" ] && setopt shwordsplit\n\nfinish() { done=1; exit \"${1:-0}\"; }\nerror() { printf '\\033[31m%s\\033[0m\\n' \"$1\"; }\nabort() { [ \"${1:-}\" ] && error \"$1\" >&2; finish 1; }\nfinished() { [ \"$done\" ] || error \"Failed to install\"; }\n\nexists() {\n  type \"$1\" >/dev/null 2>&1 && return 0\n  ( IFS=:; for p in $PATH; do [ -x \"${p%/}/$1\" ] && return 0; done; return 1 )\n}\n\nprompt() {\n  set -- \"$1\" \"$2\" \"${3:-/dev/tty}\"\n  printf \"%s \" \"$1\"\n  if eval \"[ \\\"\\$$2\\\" ] && :\"; then\n    eval \"printf \\\"%s\\n\\\" \\\"\\$$2\\\"\"\n  else\n    IFS= read -r \"$2\" < \"$3\" || return 1\n    [ \"$3\" = \"/dev/tty\" ] || eval \"printf \\\"%s\\n\\\" \\\"\\$$2\\\"\"\n  fi\n}\n\nis_yes() {\n  case $1 in ( [Yy] | [Yy][Ee][Ss] ) return 0; esac\n  return 1\n}\n\nconfirm() {\n  prompt \"$@\" || return 1\n  eval \"is_yes \\\"\\$$2\\\" &&:\"\n}\n\nfetch() {\n  tmpfile=\"${TMPDIR:-${TMP:-/tmp}}/${1##*/}.$$\"\n  case $FETCH in\n    curl) curl --head -sSfL -o /dev/null \"$1\" && curl -SfL \"$1\" ;;\n    wget) wget --spider -q \"$1\" && wget -O- \"$1\" ;;\n  esac > \"$tmpfile\" &&:\n  error=$?\n  if [ \"$error\" -eq 0 ]; then\n    unarchive \"$tmpfile\" \"$1\" \"$2\" &&:\n    error=$?\n    [ \"$error\" -ne 0 ] && [ -d \"$2\" ] && rm -rf \"$2\"\n  fi\n  rm \"$tmpfile\"\n  return \"$error\"\n}\n\nunarchive() {\n  mkdir -p \"${3%/*}\"\n  gunzip -c \"$1\" | (cd \"${3%/*}\"; tar xf -)\n  set -- \"$1\" \"${2##*/}\" \"$3\"\n  mv \"$(components_path \"${3%/*}/$project-${2%.tar.gz}\"*)\" \"$3\"\n}\n\ncomponents_path() {\n  ( set +u\n    cd \"${1%/*}\"\n    for p in *; do\n      case $p in (${1##*/}*) echo \"${1%/*}/$p\"; break ; esac\n    done\n  )\n}\n\ngit_remote_tags() {\n  git ls-remote --tags \"$repo\" | while read -r line; do\n    # shellcheck disable=SC2295\n    tag=${line##*/} && pre=${tag#${tag%%[-+]*}}\n    [ \"${1:-}\" = \"--pre\" ] || case $pre in (-*) continue; esac\n    echo \"${tag%\\^\\{\\}}\"\n  done | uniq\n}\n\nget_versions() {\n  git_remote_tags \"${PRE:+--pre}\"\n}\n\nsort_by_first_key() {\n  # Retry if sort is Windows version\n  ( export LC_ALL=C; sort -k 1 2>/dev/null || command -p sort -k 1 )\n}\n\nversion_sort() {\n  while read -r version; do\n    ver=${version%%+*} && num=${ver%%-*} && pre=${ver#\"$num\"}\n    #shellcheck disable=SC2086\n    case $num in\n      *[!0-9.]*)  set -- 0 0 0 0 ;;\n      *) IFS=. && set -- $num ;;\n    esac\n    printf '%08d%08d%08d%08d' \"${1:-0}\" \"${2:-0}\" \"${3:-0}\" \"${4:-0}\"\n    printf '%s %s\\n' \"${pre:-=}\" \"$version\"\n  done | sort_by_first_key | while read -r kv; do echo \"${kv#* }\"; done\n}\n\njoin() {\n  s=''\n  while read -r v; do\n    s=\"$s$v$1\"\n  done\n  echo \"${s%\"$1\"}\"\n}\n\nlast() {\n  version=''\n  while read -r v; do\n    version=$v\n  done\n  echo \"$version\"\n}\n\nlist_versions() {\n  get_versions | version_sort | join \", \"\n}\n\nlatest_version() {\n  get_versions | version_sort | last\n}\n\n${__SOURCED__:+false} : || return 0\n\ntrap finished EXIT\nVERSION='' PREFIX=$HOME/.local BIN='' DIR='' SWITCH='' PRE='' YES='' FETCH=''\ndone='' mode=install\n\n__ parse_option __\n\nwhile [ $# -gt 0 ]; do\n  case $1 in\n    -p | --prefix ) [ \"${2:-}\" ] || abort \"PREFIX not specified\"\n                    PREFIX=$2 && shift ;;\n    -b | --bin    ) [ \"${2:-}\" ] || abort \"BIN not specified\"\n                    BIN=$2 && shift ;;\n    -d | --dir    ) [ \"${2:-}\" ] || abort \"DIR not specified\"\n                    DIR=$2 && shift ;;\n    -s | --switch ) SWITCH=1 ;;\n    -y | --yes    ) YES=y ;;\n    -l | --list   ) mode=list ;;\n         --pre    ) PRE=1 ;;\n         --fetch  ) [ \"${2:-}\" ] || abort \"FETCH not specified\"\n                    case $2 in ( curl | wget ) FETCH=$2 && shift ;;\n                      *) abort \"FETCH must be 'curl' or 'wget'.\"\n                    esac ;;\n    -h | --help   ) eval \"$(usage \"USAGE\" < \"$0\")\" && finish ;;\n    -*            ) abort \"Unknown option $1\" ;;\n    *             ) VERSION=$1 ;;\n  esac\n  shift\ndone\n\nif [ \"$mode\" = \"list\" ]; then\n  list_versions\n  finish\nfi\n\nBIN=${BIN:-${PREFIX%/}/bin} DIR=${DIR:-${PREFIX%/}/lib/$project}\n\n__ main __\n\ncase $VERSION in\n  .)\n    method=local DIR=$PWD\n    [ -x \"$DIR/$exec\" ] || abort \"Not found '$exec' in installation directory: '$DIR'\"\n    VERSION=$(\"$DIR/$exec\" --version)\n    ;;\n  *.tar.gz)\n    [ \"$SWITCH\" ] && abort \"Can not switch version when install from archive\"\n    [ -e \"$DIR\" ] && abort \"Already exists installation directory: '$DIR'\"\n    method=archive\n    [ ! \"$FETCH\" ] && exists curl && FETCH=curl\n    [ ! \"$FETCH\" ] && exists wget && FETCH=wget\n    [ \"$FETCH\" ] || abort \"Requires 'curl' or 'wget' when install from archive\"\n    exists tar || abort \"Not found 'tar' when install from archive\"\n    ;;\n  *)\n    if [ \"$SWITCH\" ]; then\n      method=switch\n      [ -d \"$DIR\" ] || abort \"Not found installation directory: '$DIR'\"\n      [ -d \"$DIR/.git\" ] || abort \"Can't switch it's not a git repository: '$DIR'\"\n    else\n      method=git\n      [ -e \"$DIR\" ] && abort \"Already exists installation directory: '$DIR'\"\n    fi\n    # requires git >= 1.7.10.4\n    exists git || abort \"Requires 'git' when install from git repository\"\n    [ \"$VERSION\" ] || VERSION=$(latest_version)\nesac\n\necho \"Executable file        : $BIN/$exec\"\necho \"Installation directory : $DIR\"\necho \"Version (tag or commit): $VERSION\"\ncase $method in\n  git) echo \"[git] $repo\" ;;\n  archive) echo \"[$FETCH] $archive/$VERSION\" ;;\nesac\necho\n\nconfirm \"Do you want to continue? [y/N]\" YES || abort \"Canceled\"\n\ncase $method in\n  git)\n    git init \"$DIR\" && cd \"$DIR\"\n    git remote add origin \"$repo\"\n    git fetch --depth=1 origin \"$VERSION\"\n    git checkout -b \"$VERSION\" FETCH_HEAD\n    ;;\n  archive)\n    fetch \"$archive/$VERSION\" \"$DIR\"\n    ;;\n  switch)\n    cd \"$DIR\"\n    if message=$(git checkout \"$VERSION\" 2>&1); then\n      echo \"$message\"\n    else\n      git fetch --depth=1 origin \"$VERSION\"\n      git checkout -b \"$VERSION\" FETCH_HEAD\n    fi\n    ;;\n  local) # Do nothing\nesac\n\nmkdir -p \"$BIN\"\nln -sf \"$DIR/$exec\" \"$BIN/$exec\"\n\nif [ ! -L \"$BIN/$exec\" ]; then\n  rm \"$BIN/$exec\"\n  printf '#!/bin/sh\\nexec \"%s\" \"$@\"\\n' \"$DIR/$exec\" > \"$BIN/$exec\"\n  chmod +x \"$BIN/$exec\"\nfi\n\necho \"Done\"\nfinish\n"
        },
        {
          "name": "lib",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 4.18359375,
          "content": "{\n  \"name\": \"ShellSpec\",\n  \"version\": \"0.29.0-dev\",\n  \"description\": \"BDD style unit testing framework for POSIX compliant shell script\",\n  \"homepage\": \"https://shellspec.info\",\n  \"scripts\": [\"shellspec\"],\n  \"license\": \"MIT\",\n  \"files\": [\n    \"bin/shellspec\",\n    \"lib/bootstrap.sh\",\n    \"lib/core/clone.sh\",\n    \"lib/core/core.sh\",\n    \"lib/core/dsl.sh\",\n    \"lib/core/evaluation.sh\",\n    \"lib/core/file_descriptor.sh\",\n    \"lib/core/hook.sh\",\n    \"lib/core/matchers.sh\",\n    \"lib/core/matchers/be.sh\",\n    \"lib/core/matchers/be/empty.sh\",\n    \"lib/core/matchers/be/stat.sh\",\n    \"lib/core/matchers/be/status.sh\",\n    \"lib/core/matchers/be/successful.sh\",\n    \"lib/core/matchers/be/valid.sh\",\n    \"lib/core/matchers/be/variable.sh\",\n    \"lib/core/matchers/end_with.sh\",\n    \"lib/core/matchers/equal.sh\",\n    \"lib/core/matchers/exist.sh\",\n    \"lib/core/matchers/have.sh\",\n    \"lib/core/matchers/have/stat.sh\",\n    \"lib/core/matchers/include.sh\",\n    \"lib/core/matchers/match.sh\",\n    \"lib/core/matchers/satisfy.sh\",\n    \"lib/core/matchers/start_with.sh\",\n    \"lib/core/modifiers.sh\",\n    \"lib/core/modifiers/contents.sh\",\n    \"lib/core/modifiers/length.sh\",\n    \"lib/core/modifiers/line.sh\",\n    \"lib/core/modifiers/lines.sh\",\n    \"lib/core/modifiers/result.sh\",\n    \"lib/core/modifiers/word.sh\",\n    \"lib/core/output.sh\",\n    \"lib/core/outputs.sh\",\n    \"lib/core/statement.sh\",\n    \"lib/core/subjects.sh\",\n    \"lib/core/subjects/fd.sh\",\n    \"lib/core/subjects/line.sh\",\n    \"lib/core/subjects/path.sh\",\n    \"lib/core/subjects/status.sh\",\n    \"lib/core/subjects/stderr.sh\",\n    \"lib/core/subjects/stdout.sh\",\n    \"lib/core/subjects/value.sh\",\n    \"lib/core/subjects/variable.sh\",\n    \"lib/core/subjects/word.sh\",\n    \"lib/core/switch.sh\",\n    \"lib/core/syntax.sh\",\n    \"lib/core/utils.sh\",\n    \"lib/core/verb.sh\",\n    \"lib/cov/kcov.sh\",\n    \"lib/cov/kcov/.bashenv\",\n    \"lib/cov/kcov/.kshenv\",\n    \"lib/cov/kcov/.zshenv\",\n    \"lib/ext/ext.sh\",\n    \"lib/general.sh\",\n    \"lib/getoptions_abbr.sh\",\n    \"lib/getoptions_base.sh\",\n    \"lib/getoptions_help.sh\",\n    \"lib/libexec.sh\",\n    \"lib/libexec/binary.sh\",\n    \"lib/libexec/executor.sh\",\n    \"lib/libexec/grammar.sh\",\n    \"lib/libexec/grammar/blocks\",\n    \"lib/libexec/grammar/directives\",\n    \"lib/libexec/grammar/dsls\",\n    \"lib/libexec/kcov-executor.sh\",\n    \"lib/libexec/list.sh\",\n    \"lib/libexec/optparser/optparser.sh\",\n    \"lib/libexec/optparser/parser_definition.sh\",\n    \"lib/libexec/optparser/parser_definition_generated.sh\",\n    \"lib/libexec/parallel-executor.sh\",\n    \"lib/libexec/prechecker.sh\",\n    \"lib/libexec/reporter.sh\",\n    \"lib/libexec/reporter/color_schema.sh\",\n    \"lib/libexec/reporter/conclusion_formatter.sh\",\n    \"lib/libexec/reporter/debug_formatter.sh\",\n    \"lib/libexec/reporter/documentation_formatter.sh\",\n    \"lib/libexec/reporter/failures_formatter.sh\",\n    \"lib/libexec/reporter/finished_formatter.sh\",\n    \"lib/libexec/reporter/formatter.sh\",\n    \"lib/libexec/reporter/junit_formatter.sh\",\n    \"lib/libexec/reporter/kcov_formatter.sh\",\n    \"lib/libexec/reporter/methods_formatter.sh\",\n    \"lib/libexec/reporter/null_formatter.sh\",\n    \"lib/libexec/reporter/profiler_formatter.sh\",\n    \"lib/libexec/reporter/progress_formatter.sh\",\n    \"lib/libexec/reporter/references_formatter.sh\",\n    \"lib/libexec/reporter/summary_formatter.sh\",\n    \"lib/libexec/reporter/tap_formatter.sh\",\n    \"lib/libexec/reporter/trace_formatter.sh\",\n    \"lib/libexec/runner.sh\",\n    \"lib/libexec/serial-executor.sh\",\n    \"lib/libexec/shellspec.sh\",\n    \"lib/libexec/task.sh\",\n    \"lib/libexec/translator.sh\",\n    \"lib/semver.sh\",\n    \"lib/support-bin.sh\",\n    \"libexec/shellspec-executor.sh\",\n    \"libexec/shellspec-gen-bin.sh\",\n    \"libexec/shellspec-init.sh\",\n    \"libexec/shellspec-inspection-readonly.sh\",\n    \"libexec/shellspec-inspection.sh\",\n    \"libexec/shellspec-list.sh\",\n    \"libexec/shellspec-load-env.sh\",\n    \"libexec/shellspec-prechecker.sh\",\n    \"libexec/shellspec-profiler.sh\",\n    \"libexec/shellspec-reporter.sh\",\n    \"libexec/shellspec-runner.sh\",\n    \"libexec/shellspec-shebang\",\n    \"libexec/shellspec-syntax-check.sh\",\n    \"libexec/shellspec-task.sh\",\n    \"libexec/shellspec-time.sh\",\n    \"libexec/shellspec-translate.sh\",\n    \"libexec/shellspec-unreadonly-path.sh\"\n  ],\n  \"install\": \"make install\"\n}\n"
        },
        {
          "name": "shellspec",
          "type": "blob",
          "size": 17.3525390625,
          "content": "#!/bin/sh\n#shellcheck disable=SC2004,SC2016\n\n[ \"$PPID\" ] || { echo \"Unsupported shell. (Bourne shell?)\" >&2; exit 1; }\n\nset -e -u -f\n\n#shellcheck disable=SC3044\n[ \"${OIL_VERSION:-}\" ] && shopt -s compat_array\n\nif [ \"${1:-}\" = \"-\" ]; then\n  if [ $# -gt 1 ]; then shift; set -- \"$0\" \"$@\"; else set -- \"$0\"; fi\n  for i in \"$@\"; do i=\"$i'\" j=''\n    while [ \"$i\" ]; do j=\"$j${i%%\\'*}'\\''\" && i=${i#*\\'}; done\n    set -- \"$@\" \"'${j%????}'\" && shift\n  done\n  echo 'IFS= read -r shebang < \"$0\"'\n  echo 'case $shebang in \\#\\!*) shell=${shebang#??};; *) shell=\"\";; esac'\n  echo 'exec $shell' \"$@\" '\"$0\" --pattern \"*\" \"$@\"'\n  echo 'exit 1'\n  exit 0\nfi\n\nexport SHELLSPEC_VERSION='0.29.0-dev'\nexport SHELLSPEC_CWD=\"$PWD\"\nexport SHELLSPEC_PATH=''\nexport SHELLSPEC_POSIX_PATH=''\nexport SHELLSPEC_GRAMMAR_DSLS=''\nexport SHELLSPEC_GRAMMAR_DIRECTIVES=''\nexport SHELLSPEC_GRAMMAR_BLOCKS=''\nexport SHELLSPEC_DEFECT_SANDBOX=''\nexport SHELLSPEC_PATH_IS_READONLY=''\nexport SHELLSPEC_MSLEEP=''\nexport SHELLSPEC_BUILTIN_PRINTF=''\nexport SHELLSPEC_BUILTIN_PRINT=''\nexport SHELLSPEC_BUILTIN_TYPESETF=''\nexport SHELLSPEC_BUILTIN_READARRAY=''\nexport SHELLSPEC_SEEKABLE=''\nexport SHELLSPEC_READ_DELIM=''\nexport SHELLSPEC_YASH_ARRAY=''\nexport SHELLSPEC_STRING_CONCAT=''\nexport SHELLSPEC_LIST=''\nexport SHELLSPEC_COUNT_FILE=''\nexport SHELLSPEC_DEBUG_TRAP=''\nexport SHELLSPEC_INFILE=file\nexport SHELLSPEC_COVERAGE_SETUP=''\nexport SHELLSPEC_COVERAGE_SHELL_OPTIONS=''\nexport SHELLSPEC_KCOV_COMPATIBLE_SHELL=''\nexport SHELLSPEC_DEFECT_EMPTYPARAMS=''\nexport SHELLSPEC_DEFECT_READONLY=''\nexport SHELLSPEC_DEFECT_BUILTIN=''\nexport SHELLSPEC_DEFECT_REDEFINE=''\nexport SHELLSPEC_DEFECT_SHELLFLAG=''\nexport SHELLSPEC_DEFECT_ERREXIT=''\nexport SHELLSPEC_DEFECT_ZSHEXIT=''\nexport SHELLSPEC_DEFECT_BOSHEXIT=''\nexport SHELLSPEC_DEFECT_SUBSHELL=''\nexport SHELLSPEC_DEFECT_SETE=''\nexport SHELLSPEC_DEFECT_XTRACE=''\nexport SHELLSPEC_DEFECT_EXPORTP=''\nexport SHELLSPEC_DEFECT_SIGNAL=''\nexport SHELLSPEC_DEFECT_DEBUGXS=''\nexport SHELLSPEC_SHEBANG_MULTIARG=''\nexport SHELLSPEC_BUSYBOX_W32=''\nexport SHELLSPEC_SHOPT_AVAILABLE=''\nexport SHELLSPEC_FAILGLOB_AVAILABLE=''\nexport SHELLSPEC_NOMATCH_AVAILABLE=''\nexport SHELLSPEC_FDVAR_AVAILABLE=''\nexport SHELLSPEC_PATHSEP=\":\"\nexport SHELLSPEC_REPAIR=''\nexport SHELLSPEC_INFO=''\nexport SHELLSPEC_TTY=''\nexport SHELLSPEC_DEV_TTY=\"/dev/null\"\nexport SHELLSPEC_XTRACEFD=''\nexport SHELLSPEC_XTRACEFD_VAR=''\nexport SHELLSPEC_CLONE_TYPE=''\nexport SHELLSPEC_PROC_VERSION='/proc/version'\nexport SHELLSPEC_NOEXEC_TMPDIR=''\n\nexport SHELLSPEC_ENV=\"env\"\nexport SHELLSPEC_PRINTF=\"printf\"\nexport SHELLSPEC_SLEEP=\"sleep\"\nexport SHELLSPEC_TRAP=\"trap\"\nexport SHELLSPEC_MV=\"mv\"\nexport SHELLSPEC_CHMOD=\"chmod\"\nexport SHELLSPEC_DATE=\"date\"\nexport SHELLSPEC_RM=\"rm\"\nexport SHELLSPEC_LS=\"ls\"\nexport SHELLSPEC_SORT=\"sort\"\nexport SHELLSPEC_FIND=\"find\"\nexport SHELLSPEC_OD=\"od\"\nexport SHELLSPEC_HEXDUMP=\"hexdump\"\n\nSHELLSPEC_POSIX_PATH=$(getconf PATH 2>/dev/null) ||:\n\n#shellcheck disable=SC2039,SC3028\nexport SHELLSPEC_HOSTNAME=\"${HOSTNAME:-localhost}\"\n\nexport SHELLSPEC_COLOR=''\nif [ ! \"${NO_COLOR:-}\" ] && { [ -t 1 ] || [ \"${FORCE_COLOR:-}\" ]; } then\n  SHELLSPEC_COLOR=1\nfi\n\n# Based on https://github.com/ko1nksm/readlinkf\n# Changed the interpretation of symlinks to my preference (Change cd -P to cd)\nreadlinkf() {\n  [ ${1:+x} ] || return 1; p=$1; until [ _\"${p%/}\" = _\"$p\" ]; do p=${p%/}; done\n  [ -e \"$p\" ] && p=$1; [ -d \"$1\" ] && p=$p/; set 10 \"$(pwd)\" \"${OLDPWD:-}\"; PWD=\n  CDPATH=\"\" cd \"$2\" && while [ \"$1\" -gt 0 ]; do set \"$1\" \"$2\" \"$3\" \"${p%/*}\"\n    [ _\"$p\" = _\"$4\" ] || { CDPATH=\"\" cd \"${4:-/}\" || break; p=${p##*/}; }\n    [ ! -L \"$p\" ] && p=${PWD%/}${p:+/}$p && set \"$@\" \"${p:-/}\" && break\n    set $(($1-1)) \"$2\" \"$3\" \"$p\"; p=$(ls -dl \"$p\") || break; p=${p#*\" $4 -> \"}\n  done 2>/dev/null; cd \"$2\" && OLDPWD=$3 && [ ${5+x} ] && printf '%s\\n' \"$5\"\n}\n\nself=$0\n[ \"${BASH_SOURCE:-}\" ] && eval \"self=\\${BASH_SOURCE[0]}\"\n( eval \"[ \\\"\\${.sh.file:-}\\\" ]\" ) 2>/dev/null && eval \"self=\\${.sh.file}\"\nif ! self=$(readlinkf \"$self\"); then\n echo \"Failed to detect shellspec real path.\" >&2\n exit 1\nfi\n\n# shellspec path\nexport SHELLSPEC_SELF=\"$self\"\nexport SHELLSPEC_ROOT=\"${SHELLSPEC_SELF%/*}\"\nexport SHELLSPEC_LIB=\"$SHELLSPEC_ROOT/lib\"\nexport SHELLSPEC_SUPPORT_BIN=\"$SHELLSPEC_LIB/support-bin.sh\"\nexport SHELLSPEC_REPORTERLIB=\"$SHELLSPEC_LIB/libexec/reporter\"\nexport SHELLSPEC_LIBEXEC=\"$SHELLSPEC_ROOT/libexec\"\nexport SHELLSPEC_INSPECTION=\"$SHELLSPEC_LIBEXEC/shellspec-inspection.sh\"\nexport SHELLSPEC_UNREADONLY_PATH=\"$SHELLSPEC_LIBEXEC/shellspec-unreadonly-path.sh\"\nexport SHELLSPEC_TIME_TYPE=auto\nexport SHELLSPEC_TIME=\"$SHELLSPEC_LIBEXEC/shellspec-time.sh\"\n\n# shellcheck source=lib/libexec/shellspec.sh\n. \"$SHELLSPEC_LIB/libexec/shellspec.sh\"\n# shellcheck source=lib/libexec/optparser/optparser.sh\n. \"$SHELLSPEC_LIB/libexec/optparser/optparser.sh\"\n\nexport SHELLSPEC_UNIXTIME=''\nunixtime SHELLSPEC_UNIXTIME\nif ! check_semver \"$SHELLSPEC_VERSION\"; then\n  abort \"SHELLSPEC_VERSION: Invalid version format\" \\\n    \"(major.minor.patch[-pre][+build]): $SHELLSPEC_VERSION\"\nfi\n\n# option parsing for change directory\n{\n  dir='.'\n  while [ $# -gt 0 ]; do\n    case $1 in (-c?*)\n      opts=${1#??}\n      shift\n      case $# in\n        0) set -- -c -\"$opts\" ;;\n        *) set -- -c -\"$opts\" \"$@\" ;;\n      esac\n    esac\n    case $1 in\n      -C?*) dir=${1#??} ;;\n      -c | --chdir) dir='' ;;\n      --directory=*) dir=${1#*=} ;;\n      -C | --directory)\n        [ $# -lt 2 ] && abort \"Requires an argument: $1\"\n        dir=${2:-.}\n        shift ;;\n      *) break ;;\n    esac\n    shift\n  done\n\n  abort_chdir() { abort \"Cannot change to '$1'${2:+: }${2:-}\"; }\n  if [ ! \"$dir\" ]; then\n    [ $# -gt 0 ] || abort \"There is no file or directory path\"\n    case $1 in ([-+]?*)\n      abort \"The file or directory path is required before the option '$1'\"\n    esac\n    [ -f \"$1\" ] && dir=${1%/*} || dir=$1\n  fi\n  [ -e \"${dir:-.}\" ] || abort_chdir \"$dir\" 'No such file or directory'\n  [ -d \"${dir:-.}\" ] || abort_chdir \"$dir\" 'Not a directory'\n  cd \"$dir\" 2>/dev/null || {\n    error \"$(cd \"$dir\" 2>&1)\"\n    abort_chdir \"$dir\"\n  }\n}\n\n# project root path\nexport SHELLSPEC_PROJECT_ROOT=\"$PWD\"\nuntil [ -f \"$SHELLSPEC_PROJECT_ROOT/.shellspec\" ]; do\n  [ \"$SHELLSPEC_PROJECT_ROOT\" ] || break\n  SHELLSPEC_PROJECT_ROOT=${SHELLSPEC_PROJECT_ROOT%/*}\ndone\ncd \"${SHELLSPEC_PROJECT_ROOT:-.}\"\nabspath SHELLSPEC_PROJECT_ROOT \"$SHELLSPEC_PROJECT_ROOT\"\n\n# option parsing\n{\n  optparser parse_options error_message\n\n  error_message() {\n    error \"$1${options_file:+ \"[$options_file]\"}\"\n  }\n\n  options_file() {\n    set -- \"$1\" \"$params\"\n    options_file=$1\n    read_options_file \"$1\" parse_options\n    if [ \"$params\" ]; then\n      abort \"Cannot specify a specfile in the options file. [$options_file]\"\n    fi\n    unset options_file\n    params=$2\n  }\n  enum_options_file options_file\n  [ $# -gt 0 ] && parse_options \"$@\"\n  if [ \"$SHELLSPEC_OPTIONS\" ]; then\n    [ -e \"$SHELLSPEC_OPTIONS\" ] || abort \"Options file not found: $SHELLSPEC_OPTIONS\"\n    options_file \"$SHELLSPEC_OPTIONS\"\n  fi\n\n  # Run inside docker container\n  if [ \"${SHELLSPEC_DOCKER_IMAGE#:}\" ]; then\n    case $SHELLSPEC_DOCKER_IMAGE in (:*)\n      SHELLSPEC_DOCKER_IMAGE=\"shellspec/runtime${SHELLSPEC_DOCKER_IMAGE}\"\n    esac\n    set -- \"$@\" --docker :\n    cid=$(docker create --rm -it \"$SHELLSPEC_DOCKER_IMAGE\" shellspec \"$@\")\n    set -- --exclude spec --exclude .git\n    tar -C \"$SHELLSPEC_ROOT\" \"$@\" -c ./ | docker cp - \"$cid:/bin/\"\n    tar --exclude .git -c ./ | docker cp - \"$cid:./\"\n    exec docker start -ai \"$cid\"\n    exit\n  fi\n  eval \"set -- $params\"\n}\n\n# shellcheck disable=SC2153\ncase $SHELLSPEC_MODE in (init)\n  SHELLSPEC_PROJECT_ROOT=${SHELLSPEC_PROJECT_ROOT:-$SHELLSPEC_CWD}\n  helperdir=$SHELLSPEC_HELPERDIR\n  coveragedir=$SHELLSPEC_COVERAGEDIR\n  reportdir=$SHELLSPEC_REPORTDIR\nesac\nif [ ! \"$SHELLSPEC_PROJECT_ROOT\" ]; then\n  # DEPRECATED: Not a shellspec project directory (TODO: change from error to abort)\n  SHELLSPEC_PROJECT_ROOT=$SHELLSPEC_CWD\n  error 'Not a shellspec project directory (\".shellspec\" not found in any of the parent directories).'\n  warn 'IMPORTANT NOTES:'\n  warn '  In future releases, run from outside the project directory will not be allowed.'\n  warn '  Create a \".shellspec\" or run shellspec from under the directory where the \".shellspec\"'\n  warn '  is located. If you are executing specfile directly, the -c (--chdir) option is useful.'\n  warn '  Fallback to the previous behavior for compatibility.'\n  warn \"Current project root directory: $SHELLSPEC_PROJECT_ROOT\"\n  case $SHELLSPEC_EXECDIR in (@basedir*)\n    abort '--execdir @basedir is not supported (requires \".shellspec\").'\n  esac\n  # abort\nfi\n\n# DEPRECATED: Remove loading the $HOME/.shellspec and remove the code here.\nif [ -e \"$HOME/.shellspec\" ] && [ ! -e \"$HOME/.shellspec-options\" ]; then\n  if [ \"$SHELLSPEC_PROJECT_ROOT\" != \"$HOME\" ]; then\n    warn '\"$HOME/.shellspec\" has been deprecated. Use \"$HOME/.shellspec-options\" instead.'\n  fi\nfi\n\nabspath SHELLSPEC_HELPERDIR \"$SHELLSPEC_HELPERDIR\" \"$SHELLSPEC_PROJECT_ROOT\"\nabspath SHELLSPEC_COVERAGEDIR \"$SHELLSPEC_COVERAGEDIR\" \"$SHELLSPEC_PROJECT_ROOT\"\nabspath SHELLSPEC_REPORTDIR \"$SHELLSPEC_REPORTDIR\" \"$SHELLSPEC_PROJECT_ROOT\"\n\n# project path\nexport SHELLSPEC_QUICK_FILE=\"$SHELLSPEC_PROJECT_ROOT/.shellspec-quick.log\"\nexport SHELLSPEC_PROJECT_NAME=\"${SHELLSPEC_PROJECT_ROOT##*/}\"\nexport SHELLSPEC_SPECDIR=\"$SHELLSPEC_HELPERDIR\" # deprecated\nexport SHELLSPEC_BANNER_FILE=\"$SHELLSPEC_HELPERDIR/banner\"\nexport SHELLSPEC_SUPPORT_BINDIR=\"$SHELLSPEC_HELPERDIR/support/bin\"\nexport SHELLSPEC_PROFILER_REPORT=\"$SHELLSPEC_REPORTDIR/profiler.log\"\nexport SHELLSPEC_KCOV_FILENAME=\"$SHELLSPEC_PROJECT_NAME [specfiles]\"\nopts=''\nopts=\"$opts --include-path=.\"\nopts=\"$opts --include-pattern=.sh\"\nopts=\"$opts --exclude-pattern=/.shellspec,/spec/,/coverage/,/report/\"\nopts=\"$opts --path-strip-level=1\"\nexport SHELLSPEC_KCOV_COMMON_OPTS=\"${opts# } \"\n\n# temporary path\nexport SHELLSPEC_TMPDIR=\"${SHELLSPEC_TMPDIR%/}\"\nabspath SHELLSPEC_TMPDIR \"$SHELLSPEC_TMPDIR\" \"$SHELLSPEC_CWD\"\nif [ ! -d \"$SHELLSPEC_TMPDIR\" ]; then\n  abort \"Temporary directory '$SHELLSPEC_TMPDIR' does not exist or is not a directory.\"\nfi\nexport SHELLSPEC_TMPBASE=\"$SHELLSPEC_TMPDIR/shellspec.$SHELLSPEC_UNIXTIME.$$\"\nexport SHELLSPEC_TIME_LOG=\"$SHELLSPEC_TMPBASE/.shellspec-time.log\"\nexport SHELLSPEC_PROFILER_LOG=\"$SHELLSPEC_TMPBASE/.shellspec-profiler.log\"\nexport SHELLSPEC_DEPRECATION_LOGFILE=\"$SHELLSPEC_TMPBASE/.shellspec-deprecation.log\"\nexport SHELLSPEC_PROFILER_SIGNAL=\"$SHELLSPEC_TMPBASE/.shellspec-profiler.signal\"\nexport SHELLSPEC_REPORTER_PID=\"$SHELLSPEC_TMPBASE/.shellspec-reporter.pid\"\nexport SHELLSPEC_KCOV_IN_FILE=\"$SHELLSPEC_TMPBASE/kcov/$SHELLSPEC_KCOV_FILENAME\"\nexport SHELLSPEC_PRECHECKER_STATUS=\"$SHELLSPEC_TMPBASE/.shellspec-prechecker.status\"\n\n# shell detection\n{\n  if [ \"${SHELLSPEC_SHELL:-auto}\" = \"auto\" ]; then\n    # shellcheck disable=SC2039,SC3047\n    if [ \"$SHELLSPEC_KCOV\" ] && ! (trap '' DEBUG) 2>/dev/null; then\n      for shell in sh bash ksh zsh :; do\n        \"$shell\" -c \"trap '' DEBUG\" 2>/dev/null && break\n      done\n      [ \"$shell\" = : ] && abort \"Current shell is not compatible with Kcov.\"\n      warn \"Current shell is not compatible with Kcov. Using '$shell' instead.\"\n    else\n      shell=$(current_shell \"$0\" \"$$\")\n    fi\n    if [ ! \"$shell\" ] && shell=\"sh\"; then\n      warn \"Failed to detect the current shell,\" \\\n           \"because the ps command does not exist or not compatible.\"\n      warn \"Using 'sh' instead. You can specify the shell with --shell option.\"\n    fi\n    SHELLSPEC_SHELL=$shell\n  fi\n\n  if command_path shell \"${SHELLSPEC_SHELL%% *}\"; then\n    case $SHELLSPEC_SHELL in (*\\ *) shell=\"$shell ${SHELLSPEC_SHELL#* }\"; esac\n    SHELLSPEC_SHELL=$shell\n  elif ! $SHELLSPEC_SHELL -c '' >/dev/null 2>&1; then\n    abort \"Not found specified shell: $SHELLSPEC_SHELL.\"\n  fi\n}\n\n# inspection\n{\n  if ! eval \"$($SHELLSPEC_SHELL \"$SHELLSPEC_INSPECTION\" || echo false)\" &&:; then\n    abort \"Shell inspection failed. This shell is not supported.$SHELLSPEC_LF\" \\\n      \"(It is not a POSIX shell or basic functionality is defective).\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_BUILTIN\" ]; then\n    warn \"Unsupported shell (builtin commands can not redefine).\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_READONLY\" ]; then\n    warn \"Unsupported shell (readonly malfunction).\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_SHELLFLAG\" ]; then\n    warn \"Unsupported shell (shell flag handling broken).\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_ERREXIT\" ]; then\n    warn \"Unsupported shell (errexit handling broken).\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_SIGNAL\" ]; then\n    SHELLSPEC_TRAP=\":\"\n    warn \"Unsupported shell (signal handling broken).\"\n  fi\n\n  if [ \"$SHELLSPEC_BUSYBOX_W32\" ]; then\n    SHELLSPEC_PATHSEP=\";\"\n  fi\n\n  if [ \"$SHELLSPEC_TTY\" ]; then\n    SHELLSPEC_DEV_TTY=/dev/tty\n  fi\n}\n\nsetup_load_path\n\nif [ \"$SHELLSPEC_DEFECT_SANDBOX\" ]; then\n  warn \"Some features may fail due to incompatibilities with sandbox features.\"\nfi\n\n# Convert to absolute paths as needed for command-based mocks\nif [ \"$SHELLSPEC_BUSYBOX_W32\" ]; then\n  case $SHELLSPEC_SHELL in\n    */*) ;;\n    *) SHELLSPEC_SHELL=\"/bin/$SHELLSPEC_SHELL\"\n  esac\nfi\n\n# shellcheck disable=SC2153\nif [ \"$SHELLSPEC_XTRACE\" ]; then\n  if [ \"$SHELLSPEC_XTRACE_ONLY\" ]; then\n    SHELLSPEC_XTRACEFD=2\n  elif [ \"$SHELLSPEC_XTRACEFD_VAR\" ]; then\n    if [ \"$SHELLSPEC_FDVAR_AVAILABLE\" ]; then\n      SHELLSPEC_XTRACEFD=${SHELLSPEC_XTRACEFD:-\"{SHELLSPEC_XTRACEFD}\"}\n    else\n      # Busybox ash only?\n      SHELLSPEC_XTRACEFD=${SHELLSPEC_XTRACEFD:-8}\n    fi\n  else\n    SHELLSPEC_XTRACE_ONLY=1 SHELLSPEC_XTRACEFD=2\n    warn \"Fall back to trace-only mode. All expectations will be skipped.\"\n  fi\n\n  if [ \"$SHELLSPEC_DEFECT_XTRACE\" ]; then\n    warn \"If xtrace doesn't work, execute 'set -x' manually inside a function.\"\n  fi\nfi\n\n# resolve basic command path\n{\n  if [ ! \"$SHELLSPEC_BUILTIN_PRINTF\" ]; then\n    command_path SHELLSPEC_PRINTF \"printf\" || SHELLSPEC_PRINTF=\"printf\"\n  fi\n  command_path SHELLSPEC_ENV \"env\" ||:\n  command_path SHELLSPEC_MV \"mv\" ||:\n  command_path SHELLSPEC_CHMOD \"chmod\" ||:\n  command_path SHELLSPEC_DATE \"date\" ||:\n  command_path SHELLSPEC_RM \"rm\" ||:\n  command_path SHELLSPEC_SLEEP \"sleep\" ||:\n  command_path SHELLSPEC_LS \"ls\" ||:\n  command_path SHELLSPEC_SORT \"sort\" ||:\n  command_path SHELLSPEC_FIND \"find\" ||:\n  command_path SHELLSPEC_OD \"od\" ||:\n  command_path SHELLSPEC_HEXDUMP \"hexdump\" ||:\n}\n\nif ! signal 0 $$ 2>/dev/null; then\n  # For example posh 0.13.2 does not implement kill as builtin and\n  # debian 10 docker image does not have kill command installed by default.\n  warn \"kill not found. You may encounter errors with some features.\"\nfi\n\nif [ \"$SHELLSPEC_KCOV\" ]; then\n  kcov_verson=$(kcov_version \"$SHELLSPEC_KCOV_PATH\") || abort \"Kcov not found.\"\n  if [ \"$(kcov_version_number \"$kcov_verson\")\" -lt 35 ]; then\n    kcov_verson=${kcov_verson:-unknown (kcov v30 or below)}\n    abort \"Kcov v35 or later required. [current: $kcov_verson]\"\n  fi\n  if [ ! \"$SHELLSPEC_KCOV_COMPATIBLE_SHELL\" ]; then\n    abort \"Require to use bash/zsh/ksh to run kcov (e.g: --shell bash).\"\n  fi\n  export SHELLSPEC_KCOV_VERSION=\"$kcov_verson\"\nfi\n\nif [ \"$SHELLSPEC_PROFILER\" ] && [ \"$SHELLSPEC_WORKERS\" -gt 0 ]; then\n  abort \"Cannot be specified profiler and parallel execution at the same time.\"\nfi\n\ncase $SHELLSPEC_MODE in (runner | list | translate | syntax-check)\n  [ $# -eq 0 ] && set -- \"$SHELLSPEC_DEFAULT_PATH\"\n  if includes_pathstar \"$@\"; then\n    for p in \"$@\"; do\n      includes_pathstar \"$p\" || continue\n      check_pathstar \"$p\" || abort \"The path pattern is invalid: $p.\"\n    done\n    args=''\n    cd \"$SHELLSPEC_CWD\"\n    callback() { if [ ! \"$2\" ] || [ -e \"${1%%:*}\" ]; then pack args \"$1\"; fi; }\n    expand_pathstar callback \".\" \"$@\"\n    cd \"$SHELLSPEC_PROJECT_ROOT\"\n    eval \"set -- $args\"\n    [ $# -eq 0 ] && abort \"Did not match the specified path(s).\"\n  fi\n  for p in \"$@\"; do\n    abspath='' range=''\n    abspath abspath \"$p\" \"$SHELLSPEC_CWD\"\n    separate_abspath_and_range abspath range \"$abspath\"\n    [ -e \"$abspath\" ] || abort \"Not found a path: ${p%%:*}.\"\n    if [ -d \"$abspath\" ] && [ \"$range\" ]; then\n      abort \"Cannot specify range for the directory: $p\"\n    fi\n    check_range \"$range\" || abort \"Invalid range: $p\"\n    if is_path_in_project \"$abspath\"; then\n      relpath=${abspath#\"$SHELLSPEC_PROJECT_ROOT\"}\n      [ \"$relpath\" ] && relpath=${relpath#/} || relpath='./'\n      set -- \"$@\" \"${relpath}${range:+:}${range}\"\n    else\n      # DEPRECATED: Accept only files in the project\n      # abort \"Not a path in the project directory: $p.\"\n      if [ -e \"$SHELLSPEC_PROJECT_ROOT/.shellspec\" ]; then\n        error \"Not a path in the project directory: $p\"\n        warn 'IMPORTANT NOTES:'\n        warn '  You have specified specfile(s) that outside of the current project directory.'\n        warn '  In future releases, run specfile(s) that outside the current project directory'\n        warn '  will not be allowed. Fallback to the previous behavior for compatibility.'\n        warn \"Current project root directory: $SHELLSPEC_PROJECT_ROOT\"\n      fi\n      set -- \"$@\" \"${abspath}${range:+:}${range}\"\n    fi\n    shift\n  done\nesac\n\ncase $SHELLSPEC_MODE in (init)\n  SHELLSPEC_PROJECT_ROOT=$SHELLSPEC_CWD\n  SHELLSPEC_PROJECT_NAME=${SHELLSPEC_PROJECT_ROOT##*/}\n  SHELLSPEC_HELPERDIR=$helperdir\n  SHELLSPEC_COVERAGEDIR=$coveragedir\n  SHELLSPEC_REPORTDIR=$reportdir\n  cd \"$SHELLSPEC_CWD\"\nesac\n\ncase $SHELLSPEC_MODE in (runner | list)\n  # shellcheck disable=SC2153\n  if [ \"$SHELLSPEC_RANDOM\" ] && [ ! \"$SHELLSPEC_SEED\" ]; then\n    random_seed SHELLSPEC_SEED \"$SHELLSPEC_UNIXTIME\" \"$$\"\n    info \"Randomized with seed $SHELLSPEC_SEED\" >&2\n  fi\nesac\n\n[ \"$SHELLSPEC_ENV_FROM\" ] && exec=\"load-env\" || exec=$SHELLSPEC_MODE\nexec=\"$SHELLSPEC_LIBEXEC/shellspec-${exec}.sh\"\neval exec \"$SHELLSPEC_SHELL\" \"\\\"$exec\\\"\" ${1+'\"$@\"'}\n"
        },
        {
          "name": "spec",
          "type": "tree",
          "content": null
        },
        {
          "name": "stub",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}