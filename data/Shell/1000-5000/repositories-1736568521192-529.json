{
  "metadata": {
    "timestamp": 1736568521192,
    "page": 529,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Aurora-Admin-Panel/deploy",
      "stars": 1649,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0498046875,
          "content": "MIT License\n\nCopyright (c) 2020 Aurora-Admin-Panel\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 10.1474609375,
          "content": "# 极光面板\n\n## 这是什么？\n\n这是一个多服务器端口租用管理面板，你可以添加多台服务器及端口，并将其分配给任意注册用户，租户则可以很方便地使用被分配的端口来完成各种操作，目前支持的端口功能（**以下功能均支持 AMD64 或 ARM64 架构运行**）：\n\n- [iptables](https://www.netfilter.org/)\n- [socat](http://www.dest-unreach.org/socat/)\n- [gost](https://github.com/ginuerzh/gost)\n- [ehco](https://github.com/Ehco1996/ehco)\n- [realm](https://github.com/zephyrchien/realm)\n- [v2ray](https://github.com/v2fly/v2ray-core)\n- [brook](https://github.com/txthinking/brook)\n- [iperf](https://iperf.fr)\n- [haproxy](http://www.haproxy.org)\n- [wstunnel](https://github.com/erebe/wstunnel)\n- [shadowsocks](https://github.com/shadowsocks)\n- [tinyPortMapper](https://github.com/wangyu-/tinyPortMapper)\n- [Prometheus Node Exporter](https://github.com/leishi1313/node_exporter)\n\n目前，全部端口转发功能均已支持 `IPV6` 。除 `iptables` 以外的转发方式，如果中转机器本身同时具备 `IPV4` 和 `IPV6` 网络访问能力，可以借助端口转发实现 `IPV4 to IPV6` 或 `IPV6 to IPV4`。\n\n### 面板服务器与被控机说明\n\n**面板建议安装在单独的一台服务器上，建议安装配置为不低于单核 512M 内存的 VPS 中**，可以直接部署到本地。**被控机端无需做任何特别配置，只需保证面板服务器能够通过 ssh 连接至被控机即可。**\n\n面板服务器在连接被控机的时候会检测被控机是否已经安装好 python （python 为被控机必须依赖），如果被控机上没安装会自动在被控机上通过 apt / yum 执行 python 安装（优先安装python3），如果被控机没有自带 python 且自动安装失败会导致面板显示被控机连接失败（表现为被控机连接状态持续转圈）。\n\n#### 面板（主控机）支持进度：\n\n- 操作系统\n- [x] CentOS 7+\n- [x] Debian 8+\n- [x] Ubuntu 18+\n- [x] Alpine Linux 3.15.0+ （请使用一键脚本安装）\n- 虚拟平台\n- [x] KVM\n- [x] VMware\n- [x] OVZ （需要 OVZ 支持 docker）\n- CPU 架构\n- [x] AMD64\n- [x] ARM64\n- 网络类型\n- [x] IPV4\n- [X] IPV6\n\n特别说明：由于 docker 默认不开启 IPV6，如果需要在面板通过 IPV6 连接被控机 SSH，请在面板机器的配置文件中开启 `ipv6` 选项，并使用 `ip6tables` 命令为容器添加 IPV6 NAT，**命令中的 IPV6 地址不需要做任何更改**：\n\n```shell\n# 1. docker-compose.yml 配置开启 ipv6 选项，该配置文件默认在 ~/aurora/ 目录下\n# 找到 enable_ipv6: false 该行，将 false 改为 true，重建容器\ncd ~/aurora/ && docker-compose up -d\n# 2. ip6tables 命令，直接复制粘贴回车即可（注意，重启系统会导致 ip6tables 规则被重置，需要手动重新添加）\nip6tables -t nat -A POSTROUTING -s fd00:ea23:9c80:4a54:e242:5f97::/96 -j MASQUERADE\n```\n\n#### 中转机器（被控机）支持进度：\n\n- 操作系统\n- [x] CentOS 7+\n- [x] Debian 8+\n- [x] Ubuntu 18+\n- [ ] Alpine Linux 3.15.0+  （正在开发中，仅支持 iptables 转发和流量统计）\n- [x] 其他操作系统如果支持 docker，可以参考下面的手动安装方法\n- 虚拟平台\n- [x] KVM\n- [x] VMware\n- [x] OVZ\n- CPU 架构\n- [x] AMD64\n- [x] ARM64\n- 网络类型\n- [x] IPV4\n- [X] IPV6\n- Linux init process\n- [x] systemd\n- [ ] SysVinit\n- [ ] OpenRC\n\n## 怎么跑起来？\n\n## 一键脚本（推荐）\n\n目前已支持一键安装、更新（自动同步旧配置）、卸载面板以及备份数据库、添加超级管理员帐号、更换面板端口等操作。**使用一键脚本安装后，如果仍需使用一脚脚本更新，请勿更改数据库用户名和密码，否则会使得更新后无法同步更改后的数据库用户名和密码，导致数据库连接出错。**\n\n```shell\nbash <(curl -fsSL https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/install.sh)\n```\n\n**由于公开的 github 代理以及 docker 代理不稳定，一键脚本已经移除所有代理选项，如需在国内机器安装，请自行解决相关网络问题**。一键脚本也支持更新测试版本，只需要添加 `--dev` 参数执行脚本即可，但是测试版本并不稳定，可能会出现各种问题，不建议在生产环境中使用。\n\n## 手动安装 — 中转被控机\n\n**对于不在中转机器（被控机）支持进度里面的系统版本，无法直接使用面板连接中转机器。** 如果被控机支持运行 docker，则可以利用被控机运行一个网络模式为 host 的特权 centos7 容器，并利用面板连接到 centos7 docker 中，实现转发功能的操作。（或可以参考 [aurora-client](https://github.com/smartcatboy/aurora-client) 直接编译被控端镜像运行）\n\n```shell\n# 启动 centos 7 特权容器，设置网络模式为 host ，并设置为开机自启动\nsudo docker run -d --privileged --name aurora-client --network=host --restart=always -v /lib/modules:/lib/modules centos:7 /usr/sbin/init\n# 进入 centos 7 容器内\nsudo docker exec -it aurora-client bash\n# 在 docker 内安装 openssh 服务端，并修改容器的 ssh 端口（避免跟主机 ssh 服务冲突）\nyum makecache -y && yum install -y openssh-server\nsed -i \"s/#Port 22/Port 62222/\" /etc/ssh/sshd_config\n# 启用 ssh 服务\nsystemctl enable --now sshd\n# 安装 iptables 转发必须的依赖\nyum install -y iproute\n# 为 root 账号设置密码\npasswd\n# 直接在面板添加中转机器 ip:62222 ，用户名 root ，密码为刚刚设置的密码\n# 卸载时候只需要在面板删除对应中转机，并删除 aurora-client 容器即可\nsudo docker stop aurora-client && sudo docker rm aurora-client\n```\n\n## 手动安装 — 面板主控机\n\n如果一键脚本提示不支持当前系统版本时，可以尝试使用手动安装的方式。\n\n### 1. 安装 docker（必须）\n\n```shell\ncurl -fsSL https://get.docker.com | sudo bash -s docker && sudo systemctl enable --now docker\n\n# 如果当前执行安装命令的不是 root 用户，请执行下面部分\n# =================非root用户执行==================\nsudo groupadd docker\nsudo usermod -aG docker $USER\nnewgrp docker\n# =================非root用户执行==================\n```\n\n### 2. 安装 docker-compose（必须）\n\n```shell\nsudo curl -L \"https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose && sudo chmod +x /usr/local/bin/docker-compose\n\n# 如果 /usr/local/bin 不在环境变量 PATH 里\n# ============================可选================================\nsudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose\n# ============================可选================================\n```\n\n### 3. 生成 SSH 密钥（建议，非必须）\n\n此步操作目的为让面板服务器通过密钥连接被控机 ssh ，**可以提高被控机安全性，非必须步骤**，如果不采用密钥连接方式，后续在面板添加被控机使可以选择使用密码连接的方式。\n\n```shell\n# 如果面板服务器并没有已经生成好的 ssh 密钥\nssh-keygen -t rsa -b 4096 -C \"your_email@example.com\"\n# 后面一直回车，跳过设置 passphase 即可\n# 然后还需要将面板服务器 ~/.ssh/id_rsa.pub 里面的内容复制到每一台被控机的 ~/.ssh/authorized_keys 文件中去。\n```\n\n### 4. 安装并启动面板（必须）\n\n```shell\nmkdir -p ~/aurora && cd ~/aurora && wget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose.yml -O docker-compose.yml && docker-compose up -d\n# 创建管理员用户（密码必须设置8位以上，否则无法登陆）\ndocker-compose exec backend python app/initial_data.py\n```\n之后可以访问 `http://你的IP:8000` 进入面板。\n\n## 配置说明\n\n1. 修改所有的 `POSTGRES_USER` 和 `POSTGRES_PASSWORD` ，以及相应的 `DATABASE_URL` ，虽然数据库不公开，但使用默认的数据库用户和密码并不安全！\n\n2. 后端默认会发送错误信息到 Sentry （**建议使用测试版本不要关闭，方便排查错误**），可能会导致信息泄漏，移除 `ENABLE_SENTRY: 'yes'` 就好。\n\n3. 默认挂载 `~/.ssh/id_rsa` 作为连接服务器的密钥，如使用其他密钥或者不使用密钥可以删除配置文件中的 `- $HOME/.ssh/id_rsa:/app/ansible/env/ssh_key` 。\n\n## 更新\n\n### 正式版\n```shell\ncd ~/aurora\nwget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose.yml -O docker-compose.yml\ndocker-compose pull && docker-compose down --remove-orphans && docker-compose up -d\n```\n\n### ~~内测版（目前已不维护，请不要使用）~~\n```shell\ncd ~/aurora\nwget https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/docker-compose-dev.yml -O docker-compose.yml\ndocker-compose pull && docker-compose down --remove-orphans && docker-compose up -d\n```\n\n## 数据库备份与恢复\n\n### 备份\n```shell\ndocker-compose exec -T postgres pg_dump -d aurora -U [数据库用户名，默认aurora] -c > data.sql\n```\n\n### 恢复\n```shell\n# 首先先把所有服务停下\ndocker-compose down\n# 只启动数据库服务\ndocker-compose up -d postgres\n# 执行数据恢复\ndocker-compose exec -T postgres psql -d aurora -U [数据库用户名，默认aurora] < data.sql\n# 然后正常启动所有服务\ndocker-compose up -d\n```\n\n## 卸载面板\n```shell\ndocker-compose down\ndocker volume rm aurora_db-data\ndocker volume rm aurora_app-data\n```\n\n## 面板长什么样？\n\n### 服务器管理页面\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/servers.png)\n\n#### 修改/添加服务器\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/servers_edit.png)\n\n### 服务器端口管理页面\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server.png)\n\n#### 添加/编辑端口\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit.png)\n\n#### 端口分配页面\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_users.png)\n\n#### 端口设置 iptables\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit_rule_iptables.png)\n\n#### 端口设置 gost\n\n![](https://raw.githubusercontent.com/Aurora-Admin-Panel/deploy/main/img/server_port_edit_rule_gost.png)\n"
        },
        {
          "name": "docker-compose-dev.yml",
          "type": "blob",
          "size": 1.3564453125,
          "content": "version: '3.7'\nservices:\n  worker:\n    image: leishi1313/aurora-admin-backend:dev-latest\n    restart: always\n    command: bash worker.sh\n    environment:\n      ENABLE_SENTRY: 'yes'\n      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      TRAFFIC_INTERVAL_SECONDS: 600\n      DDNS_INTERVAL_SECONDS: 120\n    volumes:\n      - $HOME/.ssh/id_rsa:/app/ansible/env/ssh_key\n      - app-data:/app/ansible/priv_data_dirs\n\n  backend:\n    image: leishi1313/aurora-admin-backend:dev-latest\n    restart: always\n    command: bash -c \"while !</dev/tcp/postgres/5432; do sleep 1; done; alembic upgrade heads && python app/main.py\"\n    environment:\n      PYTHONPATH: .\n      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      ENABLE_SENTRY: 'yes'\n      SECREY_KEY: 'AuroraAdminPanel321'\n    volumes:\n      - app-data:/app/ansible/priv_data_dirs\n    depends_on:\n      - postgres\n\n  nginx:\n    image: leishi1313/aurora-admin-frontend:dev-latest\n    restart: always\n    ports:\n      - 8000:80\n    depends_on:\n      - backend\n\n  redis:\n    image: redis\n    restart: always\n\n  postgres:\n    image: postgres:13-alpine\n    restart: always\n    environment:\n      POSTGRES_USER: aurora\n      POSTGRES_PASSWORD: AuroraAdminPanel321\n      POSTGRES_DB: aurora\n    volumes:\n      - db-data:/var/lib/postgresql/data\n      \n  \nvolumes:\n  db-data:\n  app-data:\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 2.21484375,
          "content": "version: '3.7'\nservices:\n  worker:\n    image: leishi1313/aurora-admin-backend:latest\n    restart: always\n    command: bash worker.sh\n    environment:\n      TZ: 'Asia/Shanghai'\n      ENABLE_SENTRY: 'yes'\n      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      ASYNC_DATABASE_URL: 'postgresql+asyncpg://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      TRAFFIC_INTERVAL_SECONDS: 600\n      DDNS_INTERVAL_SECONDS: 120\n    volumes:\n      # - $HOME/.ssh/id_rsa:/app/ansible/env/ssh_key\n      # - $HOME/.ssh/id_ed25519:/app/ansible/env/ssh_key\n      - app-data:/app/ansible/priv_data_dirs\n    depends_on:\n      - redis\n    networks:\n      - aurora\n      - worker\n\n  backend:\n    image: leishi1313/aurora-admin-backend:latest\n    restart: always\n    command: bash -c \"while !</dev/tcp/postgres/5432; do sleep 1; done; alembic upgrade heads && python app/main.py\"\n    environment:\n      TZ: 'Asia/Shanghai'\n      PYTHONPATH: .\n      DATABASE_URL: 'postgresql://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      ASYNC_DATABASE_URL: 'postgresql+asyncpg://aurora:AuroraAdminPanel321@postgres:5432/aurora'\n      SECREY_KEY: 'AuroraAdminPanel321'\n    volumes:\n      - app-data:/app/ansible/priv_data_dirs\n    depends_on:\n      - postgres\n      - redis\n    networks:\n      - aurora\n\n  nginx:\n    image: leishi1313/aurora-admin-frontend:latest\n    restart: always\n    environment:\n      TZ: 'Asia/Shanghai'\n    ports:\n      - 8000:80\n    depends_on:\n      - backend\n    networks:\n      - aurora\n\n  redis:\n    image: redis\n    restart: always\n    environment:\n      TZ: 'Asia/Shanghai'\n    networks:\n      - aurora\n\n  postgres:\n    image: postgres:13-alpine\n    restart: always\n    environment:\n      TZ: 'Asia/Shanghai'\n      POSTGRES_USER: aurora\n      POSTGRES_PASSWORD: AuroraAdminPanel321\n      POSTGRES_DB: aurora\n    volumes:\n      - db-data:/var/lib/postgresql/data\n    networks:\n      - aurora\n\n\nvolumes:\n  db-data:\n  app-data:\n\nnetworks:\n  worker:\n    enable_ipv6: false\n    driver: bridge\n    driver_opts:\n      com.docker.network.enable_ipv6: \"true\"\n    ipam:\n      driver: default\n      config:\n        - subnet: fd00:ea23:9c80:4a54:e242:5f97::/96\n          gateway: fd00:ea23:9c80:4a54:e242:5f97::1\n  aurora:\n    driver: bridge\n"
        },
        {
          "name": "img",
          "type": "tree",
          "content": null
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 19.0146484375,
          "content": "#! /bin/bash\n\nexport PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\n\nGreen_font_prefix=\"\\033[32m\"\nGreen_background_prefix=\"\\033[42;37m\"\nRed_font_prefix=\"\\033[31m\"\nRed_background_prefix=\"\\033[41;37m\"\nFont_color_suffix=\"\\033[0m\"\nInfo=\"${Green_font_prefix}[信息]${Font_color_suffix}\"\nError=\"${Red_font_prefix}[错误]${Font_color_suffix}\"\nTip=\"${Green_font_prefix}[注意]${Font_color_suffix}\"\n\n[[ $EUID != 0 ]] && echo -e \"${Error} 请使用 root 账号运行该脚本！\" && exit 1\n\nwhile [[ $# -ge 1 ]]; do\n    case $1 in\n        --dev)\n            AURORA_VERSION=\"DEV\"\n            shift\n            ;;\n        *)\n            echo -e \"${Error} 请检查脚本输入的参数是否正确！\"\n            exit 1\n    esac\ndone\n\nINSTALL_VERSION=\"1.0.0\"\n[[ -z \"$HOME\" ]] && echo -e \"${Error} 家目录检查失败！\" && exit 1\nAURORA_HOME=\"$HOME/aurora\"\nAURORA_HOME_BACKUP=\"$HOME/aurora_backup\"\nAURORA_DOCKER_YML=${AURORA_HOME}/docker-compose.yml\nAURORA_DOCKER_YML_TEMP=${AURORA_HOME}/docker-compose.yml.tmp\nGITHUB_RAW_URL=\"raw.githubusercontent.com\"\nGITHUB_URL=\"github.com\"\nAURORA_GITHUB=\"Aurora-Admin-Panel\"\nAURORA_YML_URL=\"https://${GITHUB_RAW_URL}/${AURORA_GITHUB}/deploy/main/docker-compose.yml\"\nAURORA_DEV_YML_URL=\"https://${GITHUB_RAW_URL}/${AURORA_GITHUB}/deploy/main/docker-compose-dev.yml\"\nDOCKER_INSTALL_URL=\"https://get.docker.com\"\nDOCKER_COMPOSE_CMD='docker compose'\nDOCKER_COMPOSE_URL=\"https://${GITHUB_URL}/docker/compose/releases/download/v2.29.7/docker-compose-$(uname -s)-$(uname -m)\"\n\nAURORA_DEF_IP=\"\"\nAURORA_DEF_PORT=8000\nAURORA_DEF_TRAFF_MIN=10\nAURORA_DEF_DDNS_MIN=2\nAURORA_IP6TABLES_MASQ_COMMENT='aurora-docker-ipv6-support'\n\nfunction check_system() {\n    source '/etc/os-release'\n    ARCH=$(uname -m)\n    [[ $ARCH == \"x86_64\" || $ARCH == \"aarch64\" ]] || \\\n    (echo -e \"${Error} 极光面板仅支持安装在 X64 或 ARM64 架构的机器上！\" && exit 1)\n    if [[ $ID = \"centos\" ]]; then\n        OS_FAMILY=\"centos\"\n        UPDATE=\"yum makecache -q -y\"\n        INSTALL=\"yum install -q -y\"\n    elif [[ $ID = \"debian\" || $ID = \"ubuntu\" ]]; then\n        OS_FAMILY=\"debian\"\n        UPDATE=\"apt update -qq -y\"\n        INSTALL=\"apt install -qq -y\"\n    elif [[ $ID = \"alpine\" ]]; then\n        OS_FAMILY=\"alpine\"\n        UPDATE=\"apk update\"\n        INSTALL=\"apk add\"\n    else\n        echo -e \"${Error} 系统 $ID $VERSION_ID 暂不支持一键脚本，请尝试手动安装！\" && exit 1\n    fi\n}\n\nfunction check_docker_compose() {\n    if docker compose > /dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD='docker compose'\n    elif docker-compose > /dev/null 2>&1; then\n        DOCKER_COMPOSE_CMD='docker-compose'\n    else\n        # 新安装的 docker 默认自带 compose 插件\n        DOCKER_COMPOSE_CMD='docker compose'\n    fi\n}\n\nfunction install_software() {\n    [[ -z $1 ]] || \\\n    (type $1 > /dev/null 2>&1 || (echo -e \"开始安装依赖 $1 ...\" && $INSTALL $1) || ($UPDATE && $INSTALL $1))\n}\n\nfunction install_docker() {\n    if [[ $OS_FAMILY = \"centos\" || $OS_FAMILY = \"debian\" ]]; then\n        if ! docker > /dev/null 2>&1; then\n            curl -fsSL ${DOCKER_INSTALL_URL} | bash -s docker\n        fi\n        systemctl enable --now docker && \\\n            while ! systemctl is-active --quiet docker; do sleep 3; done\n    elif [[ $OS_FAMILY = \"alpine\" ]]; then\n        if ! docker > /dev/null 2>&1; then\n            ($INSTALL docker || ($UPDATE && $INSTALL docker))\n        fi\n        rc-update add docker boot && \\\n            service docker start && \\\n            while [[ -z $(service docker status | grep started) ]]; do sleep 3; done\n    fi\n}\n\nfunction install_docker_compose() {\n    if ! docker compose > /dev/null 2>&1; then\n        curl -fsSL ${DOCKER_COMPOSE_URL} -o /usr/local/bin/docker-compose && \\\n        chmod +x /usr/local/bin/docker-compose && \\\n        ln -sf /usr/local/bin/docker-compose /usr/bin/docker-compose\n        # update docker compose cmd\n        check_docker_compose\n    fi\n}\n\nfunction install_all() {\n    install_software wget\n    install_software curl\n    install_docker\n    install_docker_compose\n}\n\nfunction get_config() {\n    echo -e \"${Info} 正在下载最新配置文件 ...\"\n    [[ $AURORA_VERSION == \"DEV\" ]] && YML_URL=${AURORA_DEV_YML_URL} || YML_URL=${AURORA_YML_URL}\n    wget -q $YML_URL -O ${AURORA_DOCKER_YML_TEMP}\n    [[ -z $(grep aurora ${AURORA_DOCKER_YML_TEMP}) ]] && echo -e \"${Error} 配置文件下载失败，请检查网络连接是否正常！\" && exit 1\n    mv -f ${AURORA_DOCKER_YML_TEMP} ${AURORA_DOCKER_YML}\n}\n\nfunction check_install() {\n    [ -f ${AURORA_DOCKER_YML} ] || (echo -e \"${Tip} 未检测到已经安装极光面板，请先安装！\" && exit 1)\n}\n\nfunction match_config() {\n    [[ -z $1 ]] || TEMP=$(cat ${AURORA_DOCKER_YML} | awk -v name=\"$1\" '{ if ( $0 ~ name ){ print $2; } }' | head -n 1)\n    [[ -z $TEMP ]] && [[ -n $2 ]] && echo $2 || echo $TEMP\n}\n\nfunction read_config() {\n    ENABLE_SENTRY=$(match_config ENABLE_SENTRY \\'no\\')\n    TRAFFIC_INTERVAL_SECONDS=$(match_config TRAFFIC_INTERVAL_SECONDS 600)\n    DDNS_INTERVAL_SECONDS=$(match_config DDNS_INTERVAL_SECONDS 120)\n    check_ipv6_enabled && ENABLE_IPV6=true || ENABLE_IPV6=false\n}\n\nfunction set_config() {\n    [[ -z $ENABLE_SENTRY ]] || sed -i \"s/ENABLE_SENTRY:.*$/ENABLE_SENTRY: $ENABLE_SENTRY/\" ${AURORA_DOCKER_YML}\n    [[ -z $TRAFFIC_INTERVAL_SECONDS ]] || sed -i \"s/TRAFFIC_INTERVAL_SECONDS:.*$/TRAFFIC_INTERVAL_SECONDS: $TRAFFIC_INTERVAL_SECONDS/\" ${AURORA_DOCKER_YML}\n    [[ -z $DDNS_INTERVAL_SECONDS ]] || sed -i \"s/DDNS_INTERVAL_SECONDS:.*$/DDNS_INTERVAL_SECONDS: $DDNS_INTERVAL_SECONDS/\" ${AURORA_DOCKER_YML}\n}\n\nfunction read_port() {\n    IP=$(grep -A 1 port ${AURORA_DOCKER_YML} | grep -Eo \"((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\")\n    [[ -z $IP ]] && PORT=$(grep -A 1 port ${AURORA_DOCKER_YML} | grep -Eo \"[[:digit:]]+:\" | grep -Eo \"[[:digit:]]+\") || \\\n    PORT=$(grep -A 1 port ${AURORA_DOCKER_YML} | grep -Eo \":[[:digit:]]+:\" | grep -Eo \"[[:digit:]]+\")\n    [[ -z $PORT ]] && echo -e \"${Error} 未检测到旧端口号，请检查配置文件是否正确！\" && exit 1\n}\n\nfunction set_port() {\n    [[ -z $1 ]] && PORT=${AURORA_DEF_PORT} || PORT=$1\n    NEW_PORT=$(echo $2 | grep -Eo \"[[:digit:]]+\")\n    [[ -z $NEW_PORT ]] && echo -e \"${Error} 未检测到新端口号！\" && exit 1\n    [[ -z $IP ]] && sed -i \"s/- $PORT:80/- $NEW_PORT:80/\" ${AURORA_DOCKER_YML} || \\\n    (sed -i \"s/- $PORT:80/- $IP:$NEW_PORT:80/\" ${AURORA_DOCKER_YML} && \\\n    sed -i \"s/- $IP:$PORT:80/- $IP:$NEW_PORT:80/\" ${AURORA_DOCKER_YML})\n}\n\nfunction check_run() {\n    LEVEL=$1 && [[ -z $LEVEL || $LEVEL != ${Info} || $LEVEL != ${Tip} || $LEVEL != ${Error} ]] && LEVEL=${Tip}\n    TIPS=$2 && [[ -z $TIPS ]] && TIPS=\"极光面板未在运行！\"\n    [[ -z $(docker ps | grep aurora) ]] && echo -e \"${LEVEL} $TIPS\"\n}\n\n\nfunction change_port() {\n    check_install || exit 1\n    check_run && exit 1\n    read_port\n    echo -e \"${Info} 旧端口号: $PORT\"\n    read -r -e -p \"请输入新端口: \" NEW_PORT\n    set_port $PORT $NEW_PORT\n    read_port\n    [[ $PORT = $NEW_PORT ]] && cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD up -d && \\\n    echo -e \"${Info} 端口修改成功！\" || echo -e \"${Error} 端口修改失败！\"\n}\n\nfunction sec_to_min() {\n    [[ -z $1 ]] || sec=$(echo $1 | grep -v \"\\.\" | grep -Eo \"[[:digit:]]+\")\n    [[ -z $sec ]] || ((min=$sec/60))\n    echo $min\n}\n\nfunction min_to_sec() {\n    [[ -z $1 ]] || min=$(echo $1 | grep -v \"\\.\" | grep -Eo \"[[:digit:]]+\")\n    [[ -z $min ]] || ((sec=$min*60))\n    echo $sec\n}\n\nfunction echo_config() {\n    [[ -z $IP ]] || echo -e \"${Info} 面板监听地址: $IP\"\n    [[ -z $PORT ]] || echo -e \"${Info} 面板监听端口: $PORT\"\n    [[ -z $ENABLE_SENTRY ]] || echo -e \"${Info} 开启错误跟踪: $ENABLE_SENTRY\"\n    [[ -z $TRAFFIC_INTERVAL_SECONDS ]] || echo -e \"${Info} 流量同步周期: $(sec_to_min $TRAFFIC_INTERVAL_SECONDS) 分钟\"\n    [[ -z $DDNS_INTERVAL_SECONDS ]] || echo -e \"${Info} DDNS同步周期: $(sec_to_min $DDNS_INTERVAL_SECONDS) 分钟\"\n    $ENABLE_IPV6 && echo -e \"${Info} 已开启 IPV6 支持\" || echo -e \"${Info} 未开启 IPV6 支持\"\n}\n\nfunction install() {\n    install_all\n    [[ -n $(docker ps | grep aurora) ]] && echo -e \"${Tip} 极光面板已经安装，且正在运行！\" && exit 0\n    [[ -d ${AURORA_HOME} ]] || mkdir -p ${AURORA_HOME}\n    cd ${AURORA_HOME}\n    get_config || exit 1\n    echo \"-----------------------------------\"\n    read_config\n    read_port\n    echo_config\n    echo \"-----------------------------------\"\n    [[ ! -d \"$HOME\"/.ssh ]] && mkdir -p \"$HOME\"/.ssh\n    # avoid docker creating a directory automatically\n    [[ ! -f \"$HOME\"/.ssh/id_rsa ]] && touch \"$HOME\"/.ssh/id_rsa\n    $DOCKER_COMPOSE_CMD up -d && $DOCKER_COMPOSE_CMD exec backend python app/initial_data.py && \\\n    (echo -e \"${Info} 极光面板安装成功，已启动！\" && exit 0) || (echo -e \"${Error} 极光面板安装失败！\" && exit 1)\n}\n\nfunction update() {\n    check_install && install_all || exit 1\n    cd ${AURORA_HOME}\n    echo -e \"${Info} 同步旧配置文件中 ...\"\n    echo \"-----------------------------------\"\n    read_config\n    read_port\n    echo_config\n    echo \"-----------------------------------\"\n    get_config || exit 1\n    set_config\n    set_port ${AURORA_DEF_PORT} $PORT\n    echo -e \"${Info} 同步新配置文件完成！\"\n    [[ -z $(docker ps | grep aurora | grep postgres) ]] && \\\n        echo -e \"${Error} 请先运行极光面板，以保证更新前完成自动备份旧数据库！\" && exit 1 || \\\n        (echo -e \"${Tip} 正在备份旧数据库，如果更新后出现问题，请回退旧版本并恢复旧数据库！\" && backup)\n    $DOCKER_COMPOSE_CMD pull\n    if $ENABLE_IPV6 ; then\n        enable_ipv6\n    else\n        recreate\n    fi\n    OLD_IMG_IDS=$(docker images | grep aurora | grep -v latest | awk '{ print $3; }')\n    [[ -z $OLD_IMG_IDS ]] || (docker image rm $OLD_IMG_IDS && echo -e \"${Info} 旧版镜像清理完成！\")\n    $DOCKER_COMPOSE_CMD up -d && \\\n        (echo -e \"${Info} 极光面板更新成功！\" && exit 0) || (echo -e \"${Error} 极光面板更新失败！\" && exit 1)\n}\n\nfunction backup_data_before_uninstall(){\n    if [ ! -d ${AURORA_HOME_BACKUP} ]; then\n        mkdir ${AURORA_HOME_BACKUP}\n    fi\n    cp -f ${AURORA_HOME}/data-*.sql ${AURORA_HOME_BACKUP}/\n    echo -e \"${Tip} 已有的数据库备份文件已移动到备份目录：${AURORA_HOME_BACKUP}\" && \\\n    echo -e \"${Tip} 如果不需要备份，可自行删除文件 rm -rf ${AURORA_HOME_BACKUP}\"\n}\n\nfunction uninstall() {\n    [ -f ${AURORA_DOCKER_YML} ] || (echo -e \"${Tip} 未检测到已经安装极光面板！\" && exit 0)\n    [[ -n $(docker ps | grep aurora | grep postgres) ]] && \\\n    echo -e \"${Tip} 正在备份数据库，如果意外卸载请重新安装面板并恢复数据库！\" && backup\n    backup_data_before_uninstall\n    cd ${AURORA_HOME}\n    [[ -n $(docker ps | grep aurora) ]] && $DOCKER_COMPOSE_CMD down\n    OLD_IMG_IDS=$(docker images | grep aurora | awk '{ print $3; }')\n    [[ -z $OLD_IMG_IDS ]] || (docker image rm $OLD_IMG_IDS && echo -e \"${Info} 镜像清理完成！\")\n    docker volume rm aurora_db-data && docker volume rm aurora_app-data && \\\n    (rm -rf ${AURORA_HOME} && echo -e \"${Info} 卸载成功！\" && exit 0) || (echo -e \"${Error} 卸载失败！\" && exit 1)\n}\n\nfunction start() {\n    check_install || exit 1\n    [[ -n $(docker ps | grep aurora) ]] && echo -e \"${Info} 极光面板正在运行\" && exit 0\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD up -d && echo -e \"${Info} 启动成功！\" || echo -e \"${Error} 启动失败！\"\n}\n\nfunction stop() {\n    check_install || exit 1\n    check_run ${Info} && exit 0\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD down --remove-orphans && echo -e \"${Info} 停止成功！\" || echo -e \"${Error} 停止失败！\"\n}\n\nfunction restart() {\n    check_install || exit 1\n    check_run ${Tip} \"极光面板未在运行，请直接启动！\" && exit 0\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD restart && echo -e \"${Info} 重启成功！\" || echo -e \"${Error} 重启失败！\"\n}\n\nfunction recreate() {\n    stop\n    start\n}\n\nfunction backend_logs() {\n    check_install || exit 1\n    check_run && exit 1\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD logs -f --tail=\"100\" backend worker\n}\n\nfunction frontend_logs() {\n    check_install || exit 1\n    check_run && exit 1\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD logs -f --tail=\"100\" frontend\n}\n\nfunction all_logs() {\n    check_install || exit 1\n    check_run && exit 1\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD logs -f --tail=\"100\"\n}\n\nfunction export_logs() {\n    check_install || exit 1\n    check_run && exit 1\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD logs > logs && \\\n    echo -e \"${Info} 日志导出成功：${AURORA_HOME}/logs\" || echo -e \"${Error} 日志导出失败！\"\n}\n\nfunction read_db_info() {\n    DB_USER=$(grep POSTGRES_USER ${AURORA_DOCKER_YML} | awk '{print $2}')\n    [[ -z $DB_USER ]] && DB_USER=\"aurora\"\n    DB_NAME=$(grep POSTGRES_DB ${AURORA_DOCKER_YML} | awk '{print $2}')\n    [[ -z $DB_NAME ]] && DB_NAME=\"aurora\"\n}\n\nfunction backup() {\n    check_install || exit 1\n    [[ -z $(docker ps | grep aurora | grep postgres) ]] && echo -e \"${Tip} 极光面板未在运行，请先启动！\" && exit 1\n    BACKUP_FILE=\"data-$(date +%Y%m%d%H%M%S).sql\"\n    read_db_info\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD exec -T postgres pg_dump -d $DB_NAME -U $DB_USER -c > $BACKUP_FILE && \\\n    echo -e \"${Info} 数据库备份成功：${AURORA_HOME}/$BACKUP_FILE\" || echo -e \"${Error} 数据库备份失败！\"\n}\n\nfunction restore() {\n    check_install || exit 1\n    [[ -z $(docker ps | grep aurora | grep postgres) ]] && \\\n    echo -e \"${Error} 请先运行极光面板，以保证还原前完成自动备份旧数据库！\" && exit 1 || \\\n    (echo -e \"${Tip} 正在备份旧数据库，如果还原后出现问题，请恢复旧数据库！\" && backup)\n    read -r -e -p \"请输入需恢复的数据库文件路径: \" BACKUP_FILE\n    [[ ! -f $BACKUP_FILE ]] && echo -e \"${Error} 无法找到数据库文件！\" && exit 1\n    cd ${AURORA_HOME}\n    read_db_info\n    docker stop $($DOCKER_COMPOSE_CMD ps | grep aurora | grep -v postgres | awk '{ print $1; }') && \\\n    $DOCKER_COMPOSE_CMD exec -T postgres psql -d $DB_NAME -U $DB_USER < $BACKUP_FILE > /dev/null && \\\n    $DOCKER_COMPOSE_CMD up -d && \\\n    echo -e \"${Info} 数据库还原成功！\" || echo -e \"${Error} 数据库还原失败！\"\n}\n\nfunction add_superu() {\n    check_install || exit 1\n    [[ -z $(docker ps | grep aurora | grep backend) ]] && echo -e \"${Tip} 极光面板未在运行，请先启动！\" && exit 1\n    cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD exec backend python app/initial_data.py\n}\n\nfunction set_traffic_interval() {\n    check_install || exit 1\n    check_run && exit 1\n    read_config\n    echo -e \"${Info} 旧流量同步间隔: $(sec_to_min $TRAFFIC_INTERVAL_SECONDS) 分钟\"\n    read -r -e -p \"请输入新同步间隔 [分钟]: \" NEW_TRAFFIC_INTERVAL_MIN\n    NEW_TRAFFIC_INTERVAL_SEC=$(min_to_sec $NEW_TRAFFIC_INTERVAL_MIN)\n    [[ -z $NEW_TRAFFIC_INTERVAL_SEC ]] && echo -e \"${Error} 请输入整数分钟！\" && exit 1 || \\\n    sed -i \"s/TRAFFIC_INTERVAL_SECONDS:.*$/TRAFFIC_INTERVAL_SECONDS: $NEW_TRAFFIC_INTERVAL_SEC/\" ${AURORA_DOCKER_YML}\n    read_config\n    [[ $TRAFFIC_INTERVAL_SECONDS = $NEW_TRAFFIC_INTERVAL_SEC ]] && cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD up -d && \\\n    echo -e \"${Info} 流量同步间隔修改成功！\" || echo -e \"${Error} 流量同步间隔修改失败！\"\n}\n\nfunction set_ddns_interval() {\n    check_install || exit 1\n    check_run && exit 1\n    read_config\n    echo -e \"${Info} 旧DDNS同步间隔: $(sec_to_min $DDNS_INTERVAL_SECONDS) 分钟\"\n    read -r -e -p \"请输入新同步间隔 [分钟]: \" NEW_DDNS_INTERVAL_MIN\n    NEW_DDNS_INTERVAL_SEC=$(min_to_sec $NEW_DDNS_INTERVAL_MIN)\n    [[ -z $NEW_DDNS_INTERVAL_SEC ]] && echo -e \"${Error} 请输入整数分钟！\" && exit 1 || \\\n    sed -i \"s/DDNS_INTERVAL_SECONDS:.*$/DDNS_INTERVAL_SECONDS: $NEW_DDNS_INTERVAL_SEC/\" ${AURORA_DOCKER_YML}\n    read_config\n    [[ $DDNS_INTERVAL_SECONDS = $NEW_DDNS_INTERVAL_SEC ]] && cd ${AURORA_HOME} && $DOCKER_COMPOSE_CMD up -d && \\\n    echo -e \"${Info} DDNS同步间隔修改成功！\" || echo -e \"${Error} DDNS同步间隔修改失败！\"\n}\n\nfunction check_ipv6_enabled() {\n    cat ${AURORA_DOCKER_YML} | grep '    enable_ipv6' | grep true > /dev/null 2>&1\n}\n\nfunction check_ip6tables_masq() {\n    [[ -n $(ip6tables -t nat -nxvL | grep \"${AURORA_IP6TABLES_MASQ_COMMENT}\") ]] && echo -e \"${Info} IPV6 MASQ 规则已存在！\"\n}\n\nfunction enable_ipv6() {\n    check_install || exit 1\n    ip6tables -V > /dev/null || (echo -e \"${Error} 请先安装 ip6tables！\" && exit 1)\n    IPV6_SUBNET=$(sed -n 's/^.*subnet:\\s*\\(.*\\)$/\\1/p' ${AURORA_DOCKER_YML})\n    check_ip6tables_masq || (ip6tables -t nat -A POSTROUTING -s ${IPV6_SUBNET} -j MASQUERADE -m comment --comment \"${AURORA_IP6TABLES_MASQ_COMMENT}\" && \\\n        echo -e \"${Info} 已添加 IPV6 MASQ 规则！\")\n    sed -i \"s/    enable_ipv6:.*$/    enable_ipv6: true/\" ${AURORA_DOCKER_YML}\n    recreate\n    check_ipv6_enabled && echo -e \"${Info} 已开启 IPV6 支持！\"\n    echo -e \"${Tip} 重启系统会导致 ip6tables 规则被重置，需要重新添加！\"\n}\n\nfunction welcome_aurora() {\n    check_system\n    check_docker_compose\n    echo -e \"${Green_font_prefix}\n            极光面板 一键脚本\n    --------------------------------\n    1.  安装 极光面板 ${AURORA_VERSION}\n    2.  更新 极光面板 ${AURORA_VERSION}\n    3.  卸载 极光面板\n    ————————————\n    4.  启动 极光面板\n    5.  停止 极光面板\n    6.  重启 极光面板\n    ————————————\n    7.  查看 后端实时日志\n    8.  查看 前端实时日志\n    9.  查看 全部实时日志\n    10. 导出 全部日志\n    ————————————\n    11. 备份 数据库\n    12. 还原 数据库\n    13. 添加 管理员用户\n    14. 修改 面板访问端口（默认 ${AURORA_DEF_PORT}）\n    15. 修改 面板流量同步间隔（默认 ${AURORA_DEF_TRAFF_MIN} 分钟）\n    16. 修改 DDNS同步间隔（默认 ${AURORA_DEF_DDNS_MIN} 分钟）\n    17. 开启 IPV6 支持（需要本机支持 IPV6）\n    ————————————\n    0.  退出脚本\n    ————————————\n    ${Font_color_suffix}\"\n    read -r -e -p \" 请输入数字 [1-16]: \" num && echo\n    case \"$num\" in\n        1)\n            install\n            ;;\n        2)\n            update\n            ;;\n        3)\n            uninstall\n            ;;\n        4)\n            start\n            ;;\n        5)\n            stop\n            ;;\n        6)\n            restart\n            ;;\n        7)\n            backend_logs\n            ;;\n        8)\n            frontend_logs\n            ;;\n        9)\n            all_logs\n            ;;\n        10)\n            export_logs\n            ;;\n        11)\n            backup\n            ;;\n        12)\n            restore\n            ;;\n        13)\n            add_superu\n            ;;\n        14)\n            change_port\n            ;;\n        15)\n            set_traffic_interval\n            ;;\n        16)\n            set_ddns_interval\n            ;;\n        17)\n            enable_ipv6\n            ;;\n        0)\n            exit 0\n            ;;\n        *)\n            echo -e \"${Error} 请输入正确数字 [1-16]\"\n            ;;\n    esac\n}\n\nwelcome_aurora\n"
        }
      ]
    }
  ]
}