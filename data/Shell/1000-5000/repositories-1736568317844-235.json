{
  "metadata": {
    "timestamp": 1736568317844,
    "page": 235,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "betterlockscreen/betterlockscreen",
      "stars": 2501,
      "defaultBranch": "next",
      "files": [
        {
          "name": ".envrc",
          "type": "blob",
          "size": 0.009765625,
          "content": "use flake\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 2.673828125,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nWe as members, contributors, and leaders pledge to make participation in our\ncommunity a harassment-free experience for everyone, regardless of age, body\nsize, visible or invisible disability, ethnicity, sex characteristics, gender\nidentity and expression, level of experience, education, socio-economic status,\nnationality, personal appearance, race, religion, or sexual identity\nand orientation.\n\nWe pledge to act and interact in ways that contribute to an open, welcoming,\ndiverse, inclusive, and healthy community.\n\n## Our Standards\n\nExamples of behavior that contributes to a positive environment for our\ncommunity include:\n\n* Demonstrating empathy and kindness toward other people\n* Being respectful of differing opinions, viewpoints, and experiences\n* Giving and gracefully accepting constructive feedback\n* Accepting responsibility and apologizing to those affected by our mistakes,\n  and learning from the experience\n* Focusing on what is best not just for us as individuals, but for the\n  overall community\n\nExamples of unacceptable behavior include:\n\n* The use of sexualized language or imagery, and sexual attention or\n  advances of any kind\n* Trolling, insulting or derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or email\n  address, without their explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Enforcement Responsibilities\n\nCommunity leaders are responsible for clarifying and enforcing our standards of\nacceptable behavior and will take appropriate and fair corrective action in\nresponse to any behavior that they deem inappropriate, threatening, offensive,\nor harmful.\n\nCommunity leaders have the right and responsibility to remove, edit, or reject\ncomments, commits, code, wiki edits, issues, and other contributions that are\nnot aligned to this Code of Conduct, and will communicate reasons for moderation\ndecisions when appropriate.\n\n## Scope\n\nThis Code of Conduct applies within all community spaces, and also applies when\nan individual is officially representing the community in public spaces.\nExamples of representing our community include using an official e-mail address,\nposting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported to the community leaders responsible for enforcement at\nhttps://github.com/betterlockscreen/betterlockscreen/discussions/364.\nAll complaints will be reviewed and investigated promptly and fairly.\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 0.435546875,
          "content": "# Contributing to Betterlockscreen\n\nThanks to all the amazing people for all your wonderful PRs, issues and ideas, all contributions are welcome!\n\nWe are using [next](https://github.com/betterlockscreen/betterlockscreen/tree/next) as our development-branch and master for the latest stable release. Please provide your pull-requests based on our next-branch.\n\nFor Nix(OS)-Users: We provide a `flake.nix` with devShell for development :-)\n\nThanks\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1337890625,
          "content": "MIT License\n\nCopyright (c) 2017-2023 Pavan Jadhaw, and others (https://github.com/betterlockscreen/betterlockscreen/graphs/contributors)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.44921875,
          "content": "<img src=\"./logo.svg\" height=\"200\" alt=\"BLS-Logo\" />\n\n# Betterlockscreen\n> fast and sweet looking lockscreen for linux systems with effects!\n\n<div align=\"center\">\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/releases\"><img alt=\"GitHub release (latest by date including pre-releases)\" src=\"https://img.shields.io/github/v/release/betterlockscreen/betterlockscreen?include_prereleases&label=latest&style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/releases\"><img alt=\"GitHub release (latest by date)\" src=\"https://img.shields.io/github/v/release/betterlockscreen/betterlockscreen?label=Stable&style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/actions/workflows/main.yml?query=branch%3Amain\"><img alt=\"GitHub Workflow Status (main)\" src=\"https://img.shields.io/github/actions/workflow/status/betterlockscreen/betterlockscreen/main.yml?branch=main&label=main&style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/actions/workflows/main.yml?query=branch%3Anext\"><img alt=\"GitHub Workflow Status (next)\" src=\"https://img.shields.io/github/actions/workflow/status/betterlockscreen/betterlockscreen/main.yml?branch=next&label=next&style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/milestone/2\"><img alt=\"GitHub milestone\" src=\"https://img.shields.io/github/milestones/progress/betterlockscreen/betterlockscreen/2?style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/compare/v4.3.0...next\"><img alt=\"GitHub commits since latest release (by date) for a branch\" src=\"https://img.shields.io/github/commits-since/betterlockscreen/betterlockscreen/v4.3.0/next?style=for-the-badge\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/blob/main/LICENSE\"><img src=\"https://img.shields.io/github/license/betterlockscreen/betterlockscreen.svg?style=for-the-badge\"></a>\n</div>\n\n<div align=\"center\">\n  <h2>You want to support us?</h2>\n\n  <div>\n    <a href=\"https://github.com/betterlockscreen/betterlockscreen/discussions/366\">We are searching a new Maintainer!</a>\n  </div>\n\n  <br />\n  \n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/stargazers\"><img alt=\"GitHub Repo stars\" src=\"https://img.shields.io/github/stars/betterlockscreen/betterlockscreen?style=social\"></a>\n  <a href=\"https://github.com/betterlockscreen/betterlockscreen/fork\"><img alt=\"GitHub forks\" src=\"https://img.shields.io/github/forks/betterlockscreen/betterlockscreen?style=social\"></a>\n  <a href=\"https://www.codetriage.com/betterlockscreen/betterlockscreen\"><img src=\"https://www.codetriage.com/betterlockscreen/betterlockscreen/badges/users.svg\"></a>\n</div>\n<br />\n\n![scrot2](https://github.com/pavanjadhaw/betterlockscreen.demo/raw/master/scrots/scrot2.png 'scrot2.png')\n<br />\n\n## Table of Contents\n\n- [About](#about)\n- [How it works](#how-it-works)\n- [System Requirements](#system-requirements)\n- [Installation](#installation)\n- [Configuration](#configuration)\n- [Usage](#usage)\n- [Background](#background)\n- [Keybinding](#keybindings)\n- [Lockscreen on sleep/suspend with systemd](#systemd)\n\n## About\n\nMost of i3lock wrapper-scripts out there take an image, add some effect(s) then lock with the modified image as locker-background. Overall experience doesn't feel natural given delay of 2-3 seconds.\n\n> Who would like a delay of 2-3 seconds while locking screen?\n\nSo Betterlockscreen was my attempt to solve this problem, as we dont need to change lockscreen background frequently this script caches images with effect so overall experience is simple and as fast as native i3lock.\n\n## How it works\n\nThe script takes a directory or image, adds various effects and caches the images in special directory. Those cached images will be used as locker-background depending on configuration provided by user.\n\n## System Requirements\n\n* [i3lock-color](https://github.com/Raymo111/i3lock-color) `>= 2.13.c.3`\n* [ImageMagick](https://imagemagick.org/)\n* [bc](https://www.gnu.org/software/bc/)\n* xdpyinfo, xrandr, xrdb and xset from [X.Org](https://www.x.org/)\n* (Optional) [Dunst](https://dunst-project.org/)\n* (Optional) [feh](https://feh.finalrewind.org/) for wallpaper-functionality\n\n> Note: Make sure your system has all dependencies satisfied\n\n## Installation\n### Package Manager\n\n<a href=\"https://repology.org/project/betterlockscreen\">\n  <img src=\"https://repology.org/badge/vertical-allrepos/betterlockscreen.svg\" alt=\"Packaging status\" align=\"right\">\n</a>\n\nBetterlockscreen is available via package manager on some linux-distributions, if you miss your favorite one you can follow along with our [installation-script](#installation-script) or [manual-installation](#manual-installation).\n\nIf you are using **Arch Linux**, you can install the AUR package\n[betterlockscreen](https://aur.archlinux.org/packages/betterlockscreen/) to get the latest\nversion, or [betterlockscreen-git](https://aur.archlinux.org/packages/betterlockscreen-git/) for the most up-to-date (unstable) changes.\n\nIf you are using **Gentoo Linux**, you can install `betterlockscreen` from Gentoo's [GURU overlay](https://wiki.gentoo.org/wiki/Project:GURU) using `emerge x11-misc/betterlockscreen`.\n\nIf you are using **NixOS**, [betterlockscreen](https://search.nixos.org/packages?query=betterlockscreen) is available in both the [stable](https://github.com/NixOS/nixpkgs/blob/nixos-21.05/pkgs/misc/screensavers/betterlockscreen/default.nix) and [unstable](https://github.com/NixOS/nixpkgs/blob/nixos-unstable/pkgs/misc/screensavers/betterlockscreen/default.nix) channels and can be installed using `nix-env -iA nixos.betterlockscreen`.\n\nIf you are using **Void Linux**, you can install [betterlockscreen](https://github.com/void-linux/void-packages/blob/master/srcpkgs/betterlockscreen/template) using `xbps-install -S betterlockscreen`.\n\n### Installation Script\n\nWe have created an automatic [install-script](https://github.com/betterlockscreen/betterlockscreen/blob/main/install.sh) for Betterlockscreen. The script is very simple and takes three parameters:\n  * `<install-mode>`: (string) 'user' installs to '~/.local/bin/', 'system' installs to '/usr/local/bin'\n  * `[<version>]`: (string) defaults to 'latest' which will determinate the latest tag from git or specified branch/tag\n  * `[<systemd-service>]`: (boolean) defaults to 'false' - Whether to copy and enable system-service.\n\nFor system-installation:\n```sh\nwget https://raw.githubusercontent.com/betterlockscreen/betterlockscreen/main/install.sh -O - -q | sudo bash -s system\n```\n\nFor user-installation:\n```sh\nwget https://raw.githubusercontent.com/betterlockscreen/betterlockscreen/main/install.sh -O - -q | bash -s user\n```\n\n### Manual Installation\n\nỲou can download the latest release [here](https://github.com/betterlockscreen/betterlockscreen/releases), please ensure to fullfill the [system-requirements](#system-requirements)!\n\nYou will need to copy \"betterlockscreen\" to you desired binary-directory, if you want to use the systemd-service you will need to copy the service-file from \"system/\" to the desired location on your system.\n\nExample (Ubuntu):\n```sh\nwget https://github.com/betterlockscreen/betterlockscreen/archive/refs/heads/main.zip\nunzip main.zip\n\ncd betterlockscreen-main/\nchmod u+x betterlockscreen\ncp betterlockscreen /usr/local/bin/\n\ncp system/betterlockscreen@.service /usr/lib/systemd/system/\nsystemctl enable betterlockscreen@$USER\n```\n\n## Configuration\n\nYou can customize Betterlockscreen for your needs, copy the config file from the examples-directory to the user-configuration directory `~/.config/betterlockscreen/` and edit it accordingly.\n\n```sh\nmkdir -p ~/.config/betterlockscreen/\ncp /usr/share/doc/betterlockscreen/examples/betterlockscreenrc ~/.config/betterlockscreen/\n```\n\nIf no configuration-file is found, then the default configurations (which is equal to the example but hardcoded) will be used.\n\n### Custom script's on pre/post-lock\nIf present in user-configuration directory (see above) the \"custom-(pre|post).sh\" gets sourced at the appropriate time. This can be used to pause notification (not needed for dunst!), switch keyboard-layout on pre/post-lock etc.\n\n## Usage\n\nRun `betterlockscreen` and point it to either a directory (`betterlockscreen -u \"path/to/dir\"`) or an image (`betterlockscreen -u \"/path/to/img.jpg\"`) and that's all. `betterlockscreen` will change update its cache with image you provided.\n\n```sh\nUsage: betterlockscreen [-u <PATH>] [-l <EFFECT>] [-w <EFFECT>]\n\n  -u --update <PATH>\n      Update lock screen image\n\n  -l --lock <EFFECT>\n      Lock screen with cached image\n\n  -w --wall <EFFECT>\n      Set wallpaper with cached image\n\nAdditional arguments:\n\n  --display <N>\n      Set display to draw loginbox\n\n  --span\n      Scale image to span multiple displays\n\n  --off <N>\n      Turn display off after N seconds\n\n  --fx <EFFECT,EFFECT,EFFECT>\n      List of effects to apply\n\n  -- <ARGS>\n      Pass following arguments to i3lock\n\nEffects arguments:\n\n  --dim <N>\n      Dim image N percent (0-100)\n\n  --blur <N>\n      Blur image N amount (0.0-1.0)\n\n  --pixel <N,N>\n      Pixelate image with N shrink and N grow (unsupported)\n\n  --color <HEX>\n      Solid color background with HEX\n```\n\n#### Examples\n1. Update image cache with random image\n`betterlockscreen -u ~/Wallpapers`\n\n2. Update image cache with only dim and pixel effects\n`betterlockscreen -u ~/Wallpapers/image.png --fx dim,pixel`\n\n3. Update image cache with random image, multiple monitors, login on 1, spanning\n`betterlockscreen -u ~/Wallpapers/Dual/ --display 1 --span`\n\n4. Update image cache with solid background only (ignore errors)\n`betterlockscreen -u . --fx color --color 5833ff`\n\n5. Update image cache with different background images\n`betterlockscreen -u ~/Wallpapers/image1.png -u ~/Wallpapers/image2.png`\n\n6. Lock screen with blur effect\n`betterlockscreen --lock blur`\n\n7. Lock screen with multiple monitors, spanning\n`betterlockscreen -l dimblur --display 1 --span`\n\n#### AwesomeWM - naughty\nIt has been discovered that the integrated notification-system \"naughty\" which is included and enabled by default, causes issue with dunst when running parallel.\n\nIf dunst is not installed, there should be no issue, if dunst is installed (even not running) our integration will try to pause dunst on lock/resume on unlock, which lead to a DBus reply timeout.\n\nTo fix this, please add the following line to your `rc.lua`:\n```\npackage.loaded[\"naughty.dbus\"] = {}\n```\n\nSource: #284 (thanks to @nullbyto), https://github.com/awesomeWM/awesome/issues/1285\n\n## Background\n\nAdd this line to `.xinitrc`.\n\n```sh\n# set desktop background with custom effect\nbetterlockscreen -w dim\n\n# Alternative (set last used background)\nsource ~/.fehbg\n```\n\n### i3wm\n\nAdd this line to `~/.config/i3/config`\n\n```sh\n# set desktop background with custom effect\nexec --no-startup-id betterlockscreen -w dim\n\n# Alternative (set last used background)\nexec --no-startup-id source ~/.fehbg\n```\n\n## Keybindings\n\nTo lockscreen using keyboard shortcut\n\n### i3wm\n\nAdd this line to your `~/.config/i3/config`\n\n```sh\nbindsym $mod+shift+x exec betterlockscreen -l dim\n```\n\n### bspwm\n\nAdd this line to your `~/.config/sxhkd/sxhkdrc`\n\n```sh\n# lockscreen\nalt + shift + x\n    betterlockscreen -l dim\n```\n\n<h2 id=\"systemd\">Systemd-Service: Lockscreen after sleep/suspend</h2>\n\n```sh\n# move service file to proper dir (the aur package does this for you)\ncp betterlockscreen@.service /usr/lib/systemd/system/\n\n# enable systemd service\nsystemctl enable betterlockscreen@$USER\n\n# disable systemd service\nsystemctl disable betterlockscreen@$USER\n\n# Note: Now you can call systemctl suspend to suspend your system\n# and betterlockscreen service will be activated\n# so when your system wakes your screen will be locked.\n```\n\n**Hint:** The systemd-unit expects betterlockscreen to be installed in \"/usr/local/bin\", so maybe you want to check or change this!\n\nResources and more informations:\n * https://gist.github.com/Raymo111/91ffd256b7aca6a85e8a99d6331d3b7b\n * https://github.com/Raymo111/i3lock-color/issues/174#issuecomment-687149213\n\n## Contributing\n\nPlease see [CONTRIBUTING.md](CONTRIBUTING.md).\n\n## License\n\nBetterlockscreen is under [MIT](https://github.com/betterlockscreen/betterlockscreen/blob/main/LICENSE) license.\n\n### Feel free to use and distribute\n\n- Hat tip to anyone who's code was used\n- Thanks to those who contributed to make it better\n- Inspiration - [r/unixporn](https://www.reddit.com/r/unixporn)\n\n### Supported by\n<a href=\"https://jb.gg/OpenSourceSupport\">\n  <img src=\"https://resources.jetbrains.com/storage/products/company/brand/logos/jb_beam.png\" height=\"100\" alt=\"JetBrains Logo (Main) logo\" />\n</a>\n"
        },
        {
          "name": "betterlockscreen",
          "type": "blob",
          "size": 27.064453125,
          "content": "#!/usr/bin/env bash\n\n# Author : Copyright (c) 2017-2023 Pavan Jadhaw, and others (https://github.com/betterlockscreen/betterlockscreen/graphs/contributors)\n# Project Repository : https://github.com/betterlockscreen/betterlockscreen\n\ncmd_exists () {\n    command -v \"$1\" >/dev/null\n}\n\ninit_config () {\n    # default options\n    display_on=0\n    span_image=false\n    lock_timeout=300\n    fx_list=(dim blur dimblur pixel dimpixel color)\n    dim_level=40\n    blur_level=1\n    pixel_scale=10,1000\n    solid_color=333333\n    description=\"\"\n    quiet=false\n    i3lockcolor_bin=\"i3lock-color\"\n    suspend_command=\"systemctl suspend\"\n    convert_command=\"magick\"\n    composite_command=\"magick composite\"\n\n    if ! cmd_exists \"$i3lockcolor_bin\" && cmd_exists \"i3lock\"; then\n        i3lockcolor_bin=\"i3lock\"\n    fi\n\n    if ! cmd_exists \"magick\"; then\n        convert_command=\"convert\"\n        composite_command=\"composite\"\n    fi\n\n    # default theme\n    loginbox=00000066\n    loginshadow=00000000\n    locktext=\"Type password to unlock...\"\n    font=\"sans-serif\"\n    ringcolor=ffffffff\n    insidecolor=00000000\n    separatorcolor=00000000\n    ringvercolor=ffffffff\n    insidevercolor=00000000\n    ringwrongcolor=ffffffff\n    insidewrongcolor=d23c3dff\n    timecolor=ffffffff\n    time_format=\"%H:%M:%S\"\n    greetercolor=ffffffff\n    layoutcolor=ffffffff\n    keyhlcolor=d23c3dff\n    bshlcolor=d23c3dff\n    veriftext=\"Verifying...\"\n    verifcolor=ffffffff\n    wrongtext=\"Failure!\"\n    wrongcolor=d23c3dff\n    modifcolor=d23c3dff\n    bgcolor=000000ff\n    wallpaper_cmd=\"feh --bg-fill\"\n\n    # read user config\n    USER_CONF_DIR=\"${XDG_CONFIG_HOME:-$HOME/.config}\"\n    USER_CONF=\"$USER_CONF_DIR/betterlockscreenrc\"\n    SYS_CONF=\"/etc/betterlockscreenrc\"\n    XDG_USER_CONF_DIR=\"$USER_CONF_DIR/betterlockscreen\"\n    XDG_USER_CONF=\"$XDG_USER_CONF_DIR/betterlockscreenrc\"\n\n    if [ -e \"$SYS_CONF\" ]; then\n        # shellcheck source=/dev/null\n        source \"$SYS_CONF\"\n    fi\n\n    if [ -e \"$USER_CONF\" ]; then\n        echof error \"Please, migrate your config $USER_CONF to $XDG_USER_CONF. Old location will soon be deprecated.\"\n        echof info \"mkdir -p ~/.config/betterlockscreen/ && mv $USER_CONF $XDG_USER_CONF\"\n\n        # shellcheck source=/dev/null\n        source \"$USER_CONF\"\n    fi\n\n    if [ -e \"$XDG_USER_CONF\" ]; then\n        # shellcheck source=/dev/null\n        source \"$XDG_USER_CONF\"\n    fi\n\n    if ! cmd_exists \"$i3lockcolor_bin\"; then\n        echof error \"Unable to find i3lock-color binary under detected/configured name: '$i3lockcolor_bin'!\"\n        exit\n    fi\n\n    # Please make sure to adjust this before release!\n    VERSION=\"4.3.0\"\n\n    # paths\n    CACHE_DIR=\"${XDG_CACHE_HOME:-$HOME/.cache}/betterlockscreen\"\n    CUR_DIR=\"$CACHE_DIR/current\"\n\n    # wallpaper\n    CUR_W_RESIZE=\"$CUR_DIR/wall_resize.png\"\n    CUR_W_DIM=\"$CUR_DIR/wall_dim.png\"\n    CUR_W_BLUR=\"$CUR_DIR/wall_blur.png\"\n    CUR_W_DIMBLUR=\"$CUR_DIR/wall_dimblur.png\"\n    CUR_W_PIXEL=\"$CUR_DIR/wall_pixel.png\"\n    CUR_W_DIMPIXEL=\"$CUR_DIR/wall_dimpixel.png\"\n    CUR_W_COLOR=\"$CUR_DIR/wall_color.png\"\n\n    # lockscreen\n    CUR_L_RESIZE=\"$CUR_DIR/lock_resize.png\"\n    CUR_L_DIM=\"$CUR_DIR/lock_dim.png\"\n    CUR_L_BLUR=\"$CUR_DIR/lock_blur.png\"\n    CUR_L_DIMBLUR=\"$CUR_DIR/lock_dimblur.png\"\n    CUR_L_PIXEL=\"$CUR_DIR/lock_pixel.png\"\n    CUR_L_DIMPIXEL=\"$CUR_DIR/lock_dimpixel.png\"\n    CUR_L_COLOR=\"$CUR_DIR/lock_color.png\"\n\n    # Original DPMS timeout\n    DEFAULT_TIMEOUT=$(cut -d ' ' -f4 <<< \"$(xset q | sed -n '25p')\")\n    # Original DPMS status\n    DEFAULT_DPMS=$(xset q | awk '/^[[:blank:]]*DPMS is/ {print $(NF)}')\n\n    # Dunst\n    DUNST_INSTALLED=false && [[ -e \"$(command -v dunstctl)\" ]] && DUNST_INSTALLED=true\n    DUNST_IS_RUNNING=false && [[ \"$DUNST_INSTALLED\" == \"true\" ]] && [[ \"$(pgrep -c dunst)\" -gt 0 ]] && DUNST_IS_RUNNING=true\n    DUNST_IS_PAUSED=false && [[ \"$DUNST_IS_RUNNING\" == \"true\" ]] && DUNST_IS_PAUSED=$(dunstctl is-paused)\n\n    # Feh\n    FEH_INSTALLED=false && [[ -e \"$(command -v feh)\" ]] && FEH_INSTALLED=true\n}\n\n# called before screen is locked\nprelock() {\n    # set dpms timeout\n    if [ \"$DEFAULT_DPMS\" == \"Enabled\" ]; then\n        xset dpms \"$lock_timeout\"\n    fi\n\n    # If dusnt is already paused don't pause it again\n    if [[ \"$DUNST_IS_RUNNING\" == \"true\" && \"$DUNST_IS_PAUSED\" == \"false\" ]]; then\n        dunstctl set-paused true\n    fi\n\n    if [ -e \"$XDG_USER_CONF_DIR/custom-pre.sh\" ]; then\n        # shellcheck source=/dev/null\n        source \"$XDG_USER_CONF_DIR/custom-pre.sh\"\n    fi\n}\n\n# lock screen with specified image\nlock() {\n    local image=\"$1\"\n    local fontlg=32\n    local fontmd=16\n    local fontsm=12\n\n    if [ -f \"$image\" ]; then\n        echof act \"Locking screen...\"\n    else\n        echof act \"Locking screen... (FAILSAFE MODE)\"\n    fi\n\n    $i3lockcolor_bin \\\n        ${image:+-i \"$image\"} \\\n        --color \"$bgcolor\" \\\n        ${display_on:+-S \"$display_on\"} \\\n        --ind-pos=\"x+310:y+h-80\" \\\n        --radius=25 \\\n        --ring-width=5 \\\n        --inside-color=\"$insidecolor\" \\\n        --ring-color=\"$ringcolor\" \\\n        --separator-color=$separatorcolor \\\n        --insidever-color=\"$insidevercolor\" \\\n        --insidewrong-color=\"$insidewrongcolor\" \\\n        --ringver-color=\"$ringvercolor\" \\\n        --ringwrong-color=\"$ringwrongcolor\" \\\n        --line-uses-inside \\\n        --keyhl-color=\"$keyhlcolor\" \\\n        --bshl-color=\"$bshlcolor\" \\\n        --clock --force-clock \\\n        --time-pos=\"ix-265:iy-10\" \\\n        --time-align 1 \\\n        --time-str \"$time_format\" \\\n        --time-color=\"$timecolor\" \\\n        --time-font=\"$font\" \\\n        --time-size=\"$fontlg\" \\\n        --date-str \"\" \\\n        --greeter-pos=\"ix-265:iy+12\" \\\n        --greeter-align 1 \\\n        --greeter-text \"$locktext\" \\\n        --greeter-color=\"$greetercolor\" \\\n        --greeter-font=\"$font\" \\\n        --greeter-size=\"$fontmd\" \\\n        --layout-pos=\"ix-265:iy+32\" \\\n        --layout-align 1 \\\n        --layout-color=\"$layoutcolor\" \\\n        --layout-font=\"$font\" \\\n        --layout-size=\"$fontsm\" \\\n        --verif-pos=\"ix+35:iy-34\" \\\n        --verif-align 2 \\\n        --verif-text=\"$veriftext\" \\\n        --verif-color=\"$verifcolor\" \\\n        --verif-font=\"$font\" \\\n        --verif-size=\"$fontsm\" \\\n        --wrong-pos=\"ix+24:iy-34\" \\\n        --wrong-align 2 \\\n        --wrong-text=\"$wrongtext\" \\\n        --wrong-color=\"$wrongcolor\" \\\n        --wrong-font=\"$font\" \\\n        --wrong-size=\"$fontsm\" \\\n        --modif-pos=\"ix+45:iy+43\" \\\n        --modif-align 2 \\\n        --modif-size=\"$fontsm\" \\\n        --modif-color=\"$modifcolor\" \\\n        --noinput-text=\"\" \\\n        --pass-media-keys \\\n        --pass-screen-keys \\\n        --pass-volume-keys \\\n        --pass-power-keys \\\n        \"${lockargs[@]}\"\n}\n\n# called after screen is unlocked\npostlock() {\n    # restore default dpms timeout\n    if [ \"$DEFAULT_DPMS\" == \"Enabled\" ]; then\n        xset dpms \"$DEFAULT_TIMEOUT\"\n    fi\n\n    # If dunst already paused before locking don't unpause dunst\n    if [[ \"$DUNST_IS_RUNNING\" == \"true\" && \"$DUNST_IS_PAUSED\" == \"false\" ]]; then\n        dunstctl set-paused false\n    fi\n\n    if [ -e \"$XDG_USER_CONF_DIR/custom-post.sh\" ]; then\n        # shellcheck source=/dev/null\n        source \"$XDG_USER_CONF_DIR/custom-post.sh\"\n    fi\n}\n\n# select effect and lock screen\nlockinit() {\n    if pgrep -u \"$USER\" \"$i3lockcolor_bin\"; then\n        echof error \"i3lock already running\"\n        exit 1\n    fi\n\n    echof act \"Running prelock...\"\n    prelock\n\n    if [[ $runsuspend ]]; then\n        lockselect \"$@\" &\n        $suspend_command\n        wait $!\n    else\n        lockselect \"$@\"\n    fi\n\n    echof act \"Running postlock...\"\n    postlock\n}\n\nlockselect() {\n    case \"$1\" in\n        dim) lock \"$CUR_L_DIM\" ;;\n        blur) lock \"$CUR_L_BLUR\" ;;\n        dimblur) lock \"$CUR_L_DIMBLUR\" ;;\n        pixel) lock \"$CUR_L_PIXEL\" ;;\n        dimpixel) lock \"$CUR_L_DIMPIXEL\" ;;\n        color) lock \"$CUR_L_COLOR\" ;;\n        *) lock \"$CUR_L_RESIZE\" ;;\n    esac\n}\n\n# calculate adjustments for hidpi displays\nlogical_px() {\n    # $1: number of pixels to convert\n    # $2: 1 for width. 2 for height\n    local pixels=\"$1\"\n    local direction=\"$2\"\n    local dpi\n\n    # use DPI set by user in .Xresources\n    dpi=$(xrdb -q | grep -oP '^\\s*Xft.dpi:\\s*\\K\\d+' | bc)\n\n    # or get dpi value from xdpyinfo\n    if [ -z \"$dpi\" ]; then\n        dpi=$(xdpyinfo | sed -En \"s/\\s*resolution:\\s*([0-9]*)x([0-9]*)\\s.*/\\\\$direction/p\" | head -n1)\n    fi\n\n    # adjust scaling\n    if [ -n \"$dpi\" ]; then\n        local scale\n        scale=$(echo \"scale=3; $dpi / 96.0\" | bc)\n        echo \"$scale * $pixels / 1\" | bc\n    else\n        # return the default value if no DPI is set\n        echo \"$pixels\"\n    fi\n}\n\n# get total resolution, sets $TOTAL_SIZE\nget_total_size () {\n    TOTAL_SIZE=$(xdpyinfo | grep -w \"dimensions\" | sed -r 's/^[^0-9]*([0-9]+x[0-9]+).*$/\\1/')\n}\n\n# get list of displays, sets $DISPLAY_LIST\nget_display_list () {\n    local count=0\n    mapfile -t displays < <(xrandr --listactivemonitors)\n    for display in \"${displays[@]:1}\"; do\n        ((count++))\n        display=\"$(echo \"$display\" | sed -r 's/\\/[0-9]*//g')\"\n        IFS=' ' read -r -a info  <<< \"$display\"\n        DISPLAY_LIST+=(\"$count ${info[3]} ${info[2]}\")\n    done\n}\n\n# populate $WALL_LIST depending on number of displays and images passed\nget_wall_list() {\n    local paths=(\"$@\")\n    declare -ga WALL_LIST\n\n    # multiple images and spanning conflict, bail out\n    if [ \"${#paths[@]}\" -gt 1 ] && [ \"$span_image\" = true ]; then\n        echof err \"Can't use --span with multiple images!\"\n        exit 1\n    fi\n\n    # if spanning return 1 image\n    if [ \"$span_image\" = true ]; then\n        get_image \"${paths[0]}\"\n\n    # if # paths is 1\n    elif [ \"${#paths[@]}\" -eq 1 ]; then\n        for ((i=0; i<${#DISPLAY_LIST[@]}; i++)); do\n            # add same image to $WALL_LIST for each display\n            get_image \"${paths[0]}\"\n        done\n\n    # if # of paths equals # of displays\n    elif [ ${#paths[@]} -eq \"${#DISPLAY_LIST[@]}\" ]; then\n        for ((i=0; i<${#DISPLAY_LIST[@]}; i++)); do\n            # add each image to $WALL_LIST\n            get_image \"${paths[$i]}\"\n        done\n\n    # if # of paths differ from # of display, bail out\n    else\n        echof err \"${#paths[@]} images provided for ${#DISPLAY_LIST[@]} displays!\"\n        exit 1\n    fi\n}\n\n# get image path, append to $WALL_LIST\nget_image() {\n    local path=\"$1\"\n\n    # we have a file\n    if [ -f \"$path\" ]; then\n        WALL_LIST+=(\"$path\")\n        return\n    # we have a directory\n    elif [ -d \"$path\" ]; then\n        dir=(\"$path\"/*)\n        rdir=\"${dir[RANDOM % ${#dir[@]}]}\"\n        get_image \"$rdir\" # <-- calls itself\n    # not file or directory, bail out\n    else\n        echof err \"invalid path: $path\"\n        exit 1\n    fi\n\n}\n\n# scale base image and generate effects\nresize_and_render () {\n    local base=\"$1\"\n    local path=\"$2\"\n    local resolution=\"$3\"\n\n    # resource paths\n    RES_RESIZE=\"$path/resize.png\"\n    RES_DIM=\"$path/dim.png\"\n    RES_BLUR=\"$path/blur.png\"\n    RES_DIMBLUR=\"$path/dimblur.png\"\n    RES_PIXEL=\"$path/pixel.png\"\n    RES_DIMPIXEL=\"$path/dimpixel.png\"\n    RES_COLOR=\"$path/color.png\"\n\n    # resize\n    base_resize \"$base\" \"$RES_RESIZE\" \"$resolution\"\n\n    # effects\n    for effect in \"${fx_list[@]}\"; do\n        case $effect in\n            dim) fx_dim \"$RES_RESIZE\" \"$RES_DIM\";;\n            blur) fx_blur \"$RES_RESIZE\" \"$RES_BLUR\" \"$resolution\";;\n            dimblur) fx_dimblur \"$RES_RESIZE\" \"$RES_DIMBLUR\" \"$resolution\";;\n            pixel) fx_pixel \"$RES_RESIZE\" \"$RES_PIXEL\";;\n            dimpixel) fx_dimpixel \"$RES_RESIZE\" \"$RES_DIMPIXEL\";;\n            color) fx_color \"$RES_COLOR\" \"$resolution\";;\n        esac\n    done\n\n}\n\n# apply resize\nbase_resize() {\n    local input=\"$1\"\n    local output=\"$2\"\n    local size=\"$3\"\n\n    echof act \"Resizing base image...\"\n    eval $convert_command \"$input\" \\\n        -resize \"$size\"\"^\" \\\n        -gravity center \\\n        -extent \"$size\" \\\n        \"$output\"\n}\n\n# apply dim\nfx_dim() {\n    local input=\"$1\"\n    local output=\"$2\"\n\n    echof act \"Rendering 'dim' effect...\"\n    eval $convert_command \"$input\" \\\n        -fill black -colorize \"$dim_level\"% \\\n        \"$output\"\n}\n\n# apply blur\nfx_blur() {\n    local input=\"$1\"\n    local output=\"$2\"\n    local size=\"$3\"\n\n    echof act \"Rendering 'blur' effect...\"\n    blur_shrink=$(echo \"scale=2; 20 / $blur_level\" | bc)\n    blur_sigma=$(echo \"scale=2; 0.6 * $blur_level\" | bc)\n    eval $convert_command \"$input\" \\\n        -filter Gaussian \\\n        -resize \"$blur_shrink%\" \\\n        -define \"filter:sigma=$blur_sigma\" \\\n        -resize \"$size^\" -gravity center -extent \"$size\" \\\n        \"$output\"\n}\n\n# apply dimblur\nfx_dimblur() {\n    local input=\"$1\"\n    local output=\"$2\"\n    local size=\"$3\"\n\n    echof act \"Rendering 'dimblur' effect...\"\n    blur_shrink=$(echo \"scale=2; 20 / $blur_level\" | bc)\n    blur_sigma=$(echo \"scale=2; 0.6 * $blur_level\" | bc)\n    eval $convert_command \"$input\" \\\n        -fill black -colorize \"$dim_level\"% \\\n        -filter Gaussian \\\n        -resize \"$blur_shrink%\" \\\n        -define \"filter:sigma=$blur_sigma\" \\\n        -resize \"$size^\" -gravity center -extent \"$size\" \\\n        \"$output\"\n}\n\n# pixelate\nfx_pixel() {\n    local input=\"$1\"\n    local output=\"$2\"\n\n    echof act \"Rendering 'pixel' effect...\"\n    IFS=',' read -ra range <<< \"$pixel_scale\"\n    eval $convert_command \"$input\" \\\n        -scale \"${range[0]}\"% -scale \"${range[1]}\"% \\\n        \"$output\"\n}\n\n# apply dimpixel\nfx_dimpixel() {\n    local input=\"$1\"\n    local output=\"$2\"\n\n    echof act \"Rendering 'dimpixel' effect...\"\n    IFS=',' read -ra range <<< \"$pixel_scale\"\n    eval $convert_command \"$input\" \\\n        -fill black -colorize \"$dim_level\"% \\\n        -scale \"${range[0]}\"% -scale \"${range[1]}\"% \\\n        \"$output\"\n}\n\n# create solid color\nfx_color() {\n    local output=\"$1\"\n    local size=\"$2\"\n\n    echof act \"Rendering 'color' effect...\"\n    eval $convert_command -size \"$size\" canvas:\\#\"$solid_color\" \"$RES_COLOR\"\n}\n\n# create loginbox rectangle, set \"$RECTANGLE\"\ncreate_loginbox () {\n    RECTANGLE=\"$CUR_DIR/rectangle.png\"\n    local shadow=\"$CUR_DIR/shadow.png\"\n    local width height\n    width=$(logical_px 340 1)\n    height=$(logical_px 100 2)\n    $convert_command -size \"$width\"x\"$height\" xc:\\#\"$loginbox\" -fill none \"$RECTANGLE\"\n    $convert_command \"$RECTANGLE\" \\\n        \\( -clone 0 -background \\#\"$loginshadow\" -shadow 100x5+0+0 \\) +swap \\\n        -background none -layers merge +repage \"$shadow\"\n    $composite_command -compose Dst_Out -gravity center \\\n        \"$RECTANGLE\" \"$shadow\" -alpha Set \"$shadow\"\n    $convert_command \"$shadow\" \"$RECTANGLE\" -geometry +10+10 -composite \"$RECTANGLE\"\n    [[ \"$shadow\" ]] && rm \"$shadow\"\n}\n\n# create rectangle with description, set \"$DESCRECT\"\ncreate_description () {\n    DESCRECT=\"$CUR_DIR/description.png\"\n    local shadow=\"$CUR_DIR/shadow.png\"\n    $convert_command -background none -family \"$(fc-match \"$font\" family)\" -style Normal -pointsize 14 -fill \\#\"$greetercolor\" label:\"\\ $description\\ \" -bordercolor \\#\"$loginbox\" -border 10 \"$DESCRECT\"\n    $convert_command \"$DESCRECT\" \\\n        \\( -clone 0 -background \\#\"$loginshadow\" -shadow 100x5+0+0 \\) +swap \\\n        -background none -layers merge +repage \"$shadow\"\n    $composite_command -compose Dst_Out -gravity center \\\n        \"$DESCRECT\" \"$shadow\" -alpha Set \"$shadow\"\n    $convert_command \"$shadow\" \"$DESCRECT\" -geometry +10+10 -composite \"$DESCRECT\"\n    [[ \"$shadow\" ]] && rm \"$shadow\"\n}\n\n# delete and recreate directory\npurge_cache () {\n    if [[ -d \"$1\" ]]; then\n        rm -r \"$1\"\n    fi\n    mkdir -p \"$1\"\n}\n\n# update lockscreen and wallpaper images\nupdate () {\n    local images=(\"$@\")\n\n    echof act \"Updating image cache...\"\n    mkdir -p \"$CACHE_DIR\" &>/dev/null\n\n    get_display_list # DISPLAY_LIST\n    get_total_size # TOTAL_SIZE\n    echof info \"Detected ${#DISPLAY_LIST[@]} display(s) @ $TOTAL_SIZE total resolution\"\n\n    get_wall_list \"${images[@]}\" # WALL_LIST\n    echof info \"Original image(s): ${WALL_LIST[*]##*/}\"\n\n    # Prepare description box to obtain width for positioning\n    local descwidth\n    local descheight\n    if [ -z \"$description\" ]; then\n        descwidth=0\n        descheight=0\n    else\n        create_description\n        descwidth=$(identify -format \"%[fx:w]\" \"$DESCRECT\")\n        descheight=$(identify -format \"%[fx:h]\" \"$DESCRECT\")\n    fi\n\n    for ((i=0; i<${#DISPLAY_LIST[@]}; i++)); do\n        display=\"${DISPLAY_LIST[$i]}\"\n        USER_WALL=\"${WALL_LIST[$i]}\"\n\n        # escape spaces for IM\n        if echo \"$USER_WALL\" | grep -E -q \"[[:space:]]\"; then\n            USER_WALL=\"${USER_WALL// /\\\\ }\"\n        fi\n\n        IFS=' ' read -r -a dinfo  <<< \"$display\"\n        local id=\"${dinfo[0]}\"\n        local device=\"${dinfo[1]}\"\n        local geometry=\"${dinfo[2]}\"\n\n        read -r -a cols <<< \"${geometry//[x+-]/ }\"\n        local position=\"${geometry#*\"${cols[1]}\"}\"\n        local resolution=\"${geometry%\"${position}\"*}\"\n\n        if [[ $id -eq \"$display_on\" ]] || [[ \"$display_on\" -eq 0 ]]; then\n\n            IFS='x' read -r -a dimension <<< \"$resolution\"\n            res_x=\"${dimension[0]}\"\n            res_y=\"${dimension[1]}\"\n            read -r -a val <<< \"${position//[+-]/ }\"\n            read -r -a sym <<< \"${position//[0-9]/ }\"\n            pos_x=\"${sym[0]}${val[0]}\"\n            pos_y=\"${sym[1]}${val[1]}\"\n\n            rect_x=$((pos_x + $(logical_px 15 1)))\n            rect_y=$((pos_y + res_y - $(logical_px 140 2)))\n            positions+=(\"+$((rect_x))+$((rect_y))\")\n\n            descrect_x=$((pos_x + res_x - descwidth - $(logical_px 15 1)))\n            descrect_y=$((pos_y + res_y - descheight - $(logical_px 20 2)))\n            positions_desc+=(\"+$((descrect_x))+$((descrect_y))\")\n        fi\n\n        local path=\"$CACHE_DIR/$id-$device\"\n        purge_cache \"$path\"\n\n        if [ \"$span_image\" = true ]; then\n            if [ \"$id\" -gt 1 ]; then\n                continue\n            else\n                device=\"[span]\"\n                id=\"*\"\n                resolution=\"$TOTAL_SIZE\"\n            fi\n        fi\n\n        echof info \"Processing display: $device ($id)\"\n        echof info \"Resolution: $resolution\"\n\n        if [ \"$span_image\" = true ]; then\n            resize_and_render \"$USER_WALL\" \"$path\" \"$resolution\"\n        else\n            resize_and_render \"$USER_WALL\" \"$path\" \"$resolution\"\n\n            PARAM_RESIZE=\"$PARAM_RESIZE $RES_RESIZE -geometry $position -composite \"\n            PARAM_DIM=\"$PARAM_DIM $RES_DIM -geometry $position -composite \"\n            PARAM_BLUR=\"$PARAM_BLUR $RES_BLUR -geometry $position -composite \"\n            PARAM_DIMBLUR=\"$PARAM_DIMBLUR $RES_DIMBLUR -geometry $position -composite \"\n            PARAM_PIXEL=\"$PARAM_PIXEL $RES_PIXEL -geometry $position -composite \"\n            PARAM_DIMPIXEL=\"$PARAM_DIMPIXEL $RES_DIMPIXEL -geometry $position -composite \"\n            PARAM_COLOR=\"$PARAM_COLOR $RES_COLOR -geometry $position -composite \"\n        fi\n\n    done\n\n    purge_cache \"$CUR_DIR\"\n\n    if [ \"$span_image\" = true ] || [ ${#DISPLAY_LIST[@]} -lt 2 ]; then\n        echof act \"Rendering final wallpaper images...\"\n        [[ -f \"$RES_RESIZE\" ]] && eval \"cp $RES_RESIZE $CUR_W_RESIZE\"\n        [[ -f \"$RES_DIM\" ]] && eval \"cp $RES_DIM $CUR_W_DIM\"\n        [[ -f \"$RES_BLUR\" ]] && eval \"cp $RES_BLUR $CUR_W_BLUR\"\n        [[ -f \"$RES_DIMBLUR\" ]] && eval \"cp $RES_DIMBLUR $CUR_W_DIMBLUR\"\n        [[ -f \"$RES_PIXEL\" ]] && eval \"cp $RES_PIXEL $CUR_W_PIXEL\"\n        [[ -f \"$RES_DIMPIXEL\" ]] && eval \"cp $RES_DIMPIXEL $CUR_W_DIMPIXEL\"\n        [[ -f \"$RES_COLOR\" ]] && eval \"cp $RES_COLOR $CUR_W_COLOR\"\n    else\n        echof act \"Creating canvas: $TOTAL_SIZE\"\n        [[ -f \"$RES_RESIZE\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_RESIZE\"\n        [[ -f \"$RES_DIM\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_DIM\"\n        [[ -f \"$RES_BLUR\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_BLUR\"\n        [[ -f \"$RES_DIMBLUR\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_DIMBLUR\"\n        [[ -f \"$RES_PIXEL\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_PIXEL\"\n        [[ -f \"$RES_DIMPIXEL\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_DIMPIXEL\"\n        [[ -f \"$RES_COLOR\" ]] && eval \"$convert_command -size $TOTAL_SIZE 'xc:blue' $CUR_W_COLOR\"\n\n        echof act \"Rendering final wallpaper images...\"\n        [[ -f \"$CUR_W_RESIZE\" ]] && eval \"$convert_command $CUR_W_RESIZE $PARAM_RESIZE $CUR_W_RESIZE\"\n        [[ -f \"$CUR_W_DIM\" ]] && eval \"$convert_command $CUR_W_DIM $PARAM_DIM $CUR_W_DIM\"\n        [[ -f \"$CUR_W_BLUR\" ]] && eval \"$convert_command $CUR_W_BLUR $PARAM_BLUR $CUR_W_BLUR\"\n        [[ -f \"$CUR_W_DIMBLUR\" ]] && eval \"$convert_command $CUR_W_DIMBLUR $PARAM_DIMBLUR $CUR_W_DIMBLUR\"\n        [[ -f \"$CUR_W_PIXEL\" ]] && eval \"$convert_command $CUR_W_PIXEL $PARAM_PIXEL $CUR_W_PIXEL\"\n        [[ -f \"$CUR_W_DIMPIXEL\" ]] && eval \"$convert_command $CUR_W_DIMPIXEL $PARAM_DIMPIXEL $CUR_W_DIMPIXEL\"\n        [[ -f \"$CUR_W_COLOR\" ]] && eval \"$convert_command $CUR_W_COLOR $PARAM_COLOR $CUR_W_COLOR\"\n    fi\n\n    echof act \"Rendering final lockscreen images...\"\n\n    create_loginbox\n    for pos in \"${positions[@]}\"; do\n        PARAM_RECT=\"$PARAM_RECT $RECTANGLE -geometry $pos -composite \"\n    done\n\n    if [ -n \"$description\" ]; then\n        create_description\n        for descpos in \"${positions_desc[@]}\"; do\n            PARAM_RECT=\"$PARAM_RECT $DESCRECT -geometry $descpos -composite \"\n        done\n    fi\n\n    [[ -f \"$CUR_W_RESIZE\" ]] && eval \"$convert_command $CUR_W_RESIZE $PARAM_RECT $CUR_L_RESIZE\"\n    [[ -f \"$CUR_W_DIM\" ]] && eval \"$convert_command $CUR_W_DIM $PARAM_RECT $CUR_L_DIM\"\n    [[ -f \"$CUR_W_BLUR\" ]] && eval \"$convert_command $CUR_W_BLUR $PARAM_RECT $CUR_L_BLUR\"\n    [[ -f \"$CUR_W_DIMBLUR\" ]] && eval \"$convert_command $CUR_W_DIMBLUR $PARAM_RECT $CUR_L_DIMBLUR\"\n    [[ -f \"$CUR_W_PIXEL\" ]] && eval \"$convert_command $CUR_W_PIXEL $PARAM_RECT $CUR_L_PIXEL\"\n    [[ -f \"$CUR_W_DIMPIXEL\" ]] && eval \"$convert_command $CUR_W_DIMPIXEL $PARAM_RECT $CUR_L_DIMPIXEL\"\n    [[ -f \"$CUR_W_COLOR\" ]] && eval \"$convert_command $CUR_W_COLOR $PARAM_RECT $CUR_L_COLOR\"\n\n    [[ \"$RECTANGLE\" ]] && rm \"$RECTANGLE\"\n    [[ \"$DESCRECT\" ]] && rm \"$DESCRECT\"\n\n    echof ok \"Done\"\n\n}\n\n# set wallpaper with effect\nwallpaper() {\n    local effect=\"$1\"\n\n    # make wallpaper span displays\n    get_display_list\n    if [ \"$span_image\" = true ] || [[ \"${#DISPLAY_LIST[@]}\" -gt 1 ]]; then\n        wallpaper_cmd=\"$wallpaper_cmd --no-xinerama\"\n    fi\n\n    # set wallpaper\n    case \"$effect\" in\n        dim) wallpaper=\"$CUR_W_DIM\";;\n        blur) wallpaper=\"$CUR_W_BLUR\";;\n        dimblur) wallpaper=\"$CUR_W_DIMBLUR\";;\n        pixel) wallpaper=\"$CUR_W_PIXEL\";;\n        dimpixel) wallpaper=\"$CUR_W_DIMPIXEL\";;\n        color) wallpaper=\"$CUR_W_COLOR\";;\n        *) wallpaper=\"$CUR_W_RESIZE\";;\n    esac\n    eval \"$wallpaper_cmd $wallpaper\"\n}\n\n# wrap echo with fancy prefix\nechof() {\n    local prefix=\"$1\"\n    local message=\"$2\"\n\n    case \"$prefix\" in\n        header) msgpfx=\"[\\e[1;95mB\\e[m]\";;\n        info) msgpfx=\"[\\e[1;97m=\\e[m]\";;\n        act) msgpfx=\"[\\e[1;92m*\\e[m]\";;\n        ok) msgpfx=\"[\\e[1;93m+\\e[m]\";;\n        error) msgpfx=\"[\\e[1;91m!\\e[m]\";;\n        *) msgpfx=\"\";;\n    esac\n    [ \"$quiet\" != true ] && echo -e \"$msgpfx $message\"\n}\n\n# help message\nusage() {\n    echo\n    echo \"Usage: betterlockscreen [-u <PATH>] [-l <EFFECT>] [-w <EFFECT>]\"\n    echo\n    echo \"  -q --quiet\"\n    echo \"      Do not produce any text output on locking\"\n    echo\n    echo \"  -u --update <PATH>\"\n    echo \"      Update lock screen image\"\n    echo\n    echo \"  -l --lock <EFFECT>\"\n    echo \"      Lock screen with cached image\"\n    echo\n    echo \"  -w --wall <EFFECT>\"\n    echo \"      Set wallpaper with cached image\"\n    echo\n    echo \"Additional arguments:\"\n    echo\n    echo \"  --display <N>\"\n    echo \"      Set display to draw loginbox\"\n    echo\n    echo \"  --span\"\n    echo \"      Scale image to span multiple displays\"\n    echo\n    echo \"  --off <N>\"\n    echo \"      Turn display off after N seconds\"\n    echo\n    echo \"  --fx <EFFECT,EFFECT,EFFECT>\"\n    echo \"      List of effects to generate\"\n    echo\n    echo \"  --desc <DESCRIPTION>\"\n    echo \"      Set a description for the new lock screen image\"\n    echo \"      (Only has an effect in combination with --update)\"\n    echo\n    echo \"  --show-layout\"\n    echo \"      Show current keyboard layout\"\n    echo\n    echo \"  --wallpaper-cmd <command>\"\n    echo \"      to set your custom wallpaper setter\"\n    echo\n    echo \"  --time-format <format>\"\n    echo \"      to set the time format used by i3lock-color\"\n    echo\n    echo \"  -- <ARGS>\"\n    echo \"      Pass additional arguments to i3lock\"\n    echo\n    echo \"Effects arguments:\"\n    echo\n    echo \"  --dim <N>\"\n    echo \"      Dim image N percent (0-100)\"\n    echo\n    echo \"  --blur <N>\"\n    echo \"      Blur image N amount (0.0-1.0)\"\n    echo\n    echo \"  --pixel <N,N>\"\n    echo \"      Pixelate image with N shrink and N grow (unsupported)\"\n    echo\n    echo \"  --color <HEX>\"\n    echo \"      Solid color background with HEX\"\n    echo\n    exit 1\n}\n\nlockargs=(-n)\n\ninit_config\n\n# show usage when no arguments passed\n[[ \"$1\" = \"\" ]] && usage\n\n# process arguments\nfor arg in \"$@\"; do\n    [[ \"${arg:0:1}\" = '-' ]] || continue\n\n    case \"$1\" in\n\n        -q | --quiet)\n            quiet=true\n            shift\n            ;;\n\n        -u | --update)\n            runupdate=true\n            imagepaths+=(\"$2\")\n            shift 2\n            ;;\n\n        -s | --suspend)\n            runsuspend=true\n            ;&\n\n        -l | --lock)\n            runlock=true\n            if [[ ${2:0:1} = '-' ]]; then\n                shift 1\n            else\n                lockstyle=\"$2\"; shift 2\n            fi\n            ;;\n\n        -w | --wall)\n            wallpaper \"$2\"\n            shift 2\n            ;;\n\n        --wallpaper-cmd)\n            wallpaper_cmd=\"$2\"\n            shift 2\n            ;;\n\n        --time-format)\n            time_format=\"$2\"\n            shift 2\n            ;;\n\n        --display)\n            display_on=\"$2\"\n            shift 2\n            ;;\n\n        --span)\n            span_image=true\n            shift 1\n            ;;\n\n        --off)\n            lock_timeout=\"$2\"\n            shift 2\n            ;;\n\n        --text)\n            locktext=\"$2\"\n            shift 2\n            ;;\n\n        --show-layout)\n            keylayout=\"$2\";\n            lockargs+=(--keylayout \"${keylayout:-0}\")\n            shift 2\n            ;;\n\n        --fx)\n            IFS=',' read -ra fx_list <<< \"$2\"\n            shift 2\n            ;;\n\n        --dim)\n            dim_level=\"$2\"\n            shift 2\n            ;;\n\n        --blur)\n            blur_level=\"$2\"\n            shift 2\n            ;;\n\n        --pixel)\n            pixel_scale=\"$2\"\n            shift 2\n            ;;\n\n        --color)\n            solid_color=\"${2//\\#/}\"\n            shift 2\n            ;;\n\n        --desc)\n            description=\"$2\"\n            shift 2\n            ;;\n\n        -v | --version)\n            echo\n            echo \"Betterlockscreen: version: v$VERSION (dunst: $DUNST_INSTALLED, feh: $FEH_INSTALLED)\"\n            $i3lockcolor_bin --version\n            $convert_command --version\n\n            if [[ \"$DUNST_INSTALLED\" == \"true\" ]]; then\n                dunstctl debug\n            fi\n\n            if [[ \"$FEH_INSTALLED\" == \"true\" ]]; then\n                feh --version\n            fi\n\n            break\n            ;;\n\n        --)\n            lockargs+=(\"${@:2}\")\n            break\n            ;;\n\n        -h | --help | *)\n            usage\n            ;;\n    esac\ndone\n\nechof header \"Betterlockscreen\"\n\n# Run image generation\n[[ $runupdate ]] && update \"${imagepaths[@]}\"\n\n# Activate lockscreen\n[[ $runlock ]] && lockinit \"$lockstyle\"\n\nexit 0\n"
        },
        {
          "name": "examples",
          "type": "tree",
          "content": null
        },
        {
          "name": "flake.nix",
          "type": "blob",
          "size": 0.568359375,
          "content": "{\n  inputs = {\n    flake-utils.url = \"github:numtide/flake-utils\";\n    nixpkgs.url = \"github:NixOS/nixpkgs/nixos-unstable\";\n  };\n\n  outputs = {\n    self,\n    nixpkgs,\n    flake-utils,\n  }:\n    flake-utils.lib.eachDefaultSystem\n    (\n      system: let\n        pkgs = import nixpkgs {inherit system;};\n      in {\n        formatter = pkgs.alejandra;\n        devShells.default = pkgs.mkShell {\n          packages = with pkgs; [ bash bc coreutils i3lock-color gawk gnugrep gnused imagemagick procps shellcheck xorg.xdpyinfo xorg.xrandr xorg.xrdb xorg.xset ];\n        };\n      }\n    );\n}\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 2.958984375,
          "content": "#!/usr/bin/env bash\n\ncmd_exists () {\n    command -v \"$1\" >/dev/null\n}\n\nechof() {\n    local colorReset=\"\\033[0m\"\n    local prefix=\"$1\"\n    local message=\"$2\"\n\n    case \"$prefix\" in\n        header) msgpfx=\"[\\e[1;95mB\\e[m]\" color=\"\";;\n        info) msgpfx=\"[\\e[1;97m=\\e[m]\" color=\"\\033[0;34m\";;\n        act) msgpfx=\"[\\e[1;92m*\\e[m]\" color=\"\";;\n        ok) msgpfx=\"[\\e[1;93m+\\e[m]\" color=\"\\033[0;32m\";;\n        error) msgpfx=\"[\\e[1;91m!\\e[m]\" color=\"\\033[0;31m\";;\n        *) msgpfx=\"\" color=\"\";;\n    esac\n    echo -e \"$msgpfx $color $message $colorReset\"\n}\n\ncase $1 in\n\tsystem)\n\t\tBL_INSTALL_DIR=\"/usr/local/bin\"\n\t;;\n\n\tuser)\n\t\tBL_INSTALL_DIR=\"$HOME/.local/bin\"\n\n\t\tif [[ ! -d $BL_INSTALL_DIR ]]; then\n\t\t\tmkdir -p \"$BL_INSTALL_DIR\"\n\t\tfi\n\t;;\n\n\t*)\n\t\techo \"Usage: $0 <install-mode> [<version>] [<systemd-service>]\"\n\t\techo \"  <install-mode>: (string) 'user' installs to '~/.local/bin/', 'system' installs to '/usr/local/bin'\"\n\t\techo \"  <version>: (string) defaults to 'latest' which will determinate the latest tag from git or specified branch/tag\"\n\t\techo \"  <systemd-service>: (boolean) defaults to 'false' - Whether to copy and enable system-service\"\n\t\techo -e \"\\nPlease note: The order of the parameters *is* relevant, if you want to set '<system-service>' you need to specify '<version>' as well!\"\n\t\texit 1\n\t;;\nesac\n\nechof header \"Betterlockscreen-Setup\"\n\nif [[ ! -w $BL_INSTALL_DIR ]]; then\n\techof error \"Unable to write to '$BL_INSTALL_DIR'!\"\n\texit 1\nfi\n\nechof info \"Checking system-requirements...\"\n\ndeclare -A DEPS\nDEPS[\"ImageMagick\"]=\"convert\"\nDEPS[\"i3lock-color\"]=\"i3lock-color\"\nDEPS[\"xdpyinfo\"]=\"xdpyinfo\"\nDEPS[\"xrdb\"]=\"xrdb\"\nDEPS[\"xset\"]=\"xset\"\n\nif ! cmd_exists DEPS[\"i3lock-color\"] && cmd_exists \"i3lock\"; then\n\tDEPS[\"i3lock-color\"]=\"i3lock\"\nfi\n\nfor key in \"${!DEPS[@]}\"; do\n\t[[ ! -e $(command -v \"${DEPS[$key]}\") ]] && echof error \"Missing '$key' under binary named '${DEPS[$key]}'!\" && exit 1\ndone\n\nechof ok \"done!\"\n\nBLI_TEMP_DIR=$(mktemp -d)\n\ngit clone https://github.com/betterlockscreen/betterlockscreen \"$BLI_TEMP_DIR\" &>/dev/null\ncd \"$BLI_TEMP_DIR\" || exit 1\n\nVERSION=$2\nif [[ $VERSION == \"\" ]] || [[ $VERSION == \"latest\" ]]; then\n\techof info \"Determinate latest release... \"\n\tVERSION=$(git describe --tags \"$(git rev-list --tags --max-count=1)\")\n\techof ok \"done! ($VERSION)\"\nfi\n\ngit checkout \"$VERSION\" &>/dev/null\n\nechof info \"Installing Betterlockscreen to '$BL_INSTALL_DIR'... \"\ncp betterlockscreen \"$BL_INSTALL_DIR\"\nechof ok \"done!\"\n\nif [[ $3 == \"true\" ]]; then\n\tSYSTEMD_SERVICE_DIR=\"/usr/lib/systemd/system\"\n\n\techof info \"Installing/enable sytemd-service... \"\n\n\tif [[ ! -w $SYSTEMD_SERVICE_DIR ]]; then\n\t\techof error \"\\nUnable to write to '$SYSTEMD_SERVICE_DIR'!\"\n\t\texit 1\n\tfi\n\n\tcp system/betterlockscreen@.service $SYSTEMD_SERVICE_DIR\n\tsystemctl enable betterlockscreen@\"$USER\"\n\n\techof ok \"done!\"\nfi\n\nif [[ $PATH != *\"$BL_INSTALL_DIR\"*  ]]; then\n\techof error \"Please ensure to add 'export PATH=\\\"\\$PATH:/home/\\$USER/.local/bin\\\"' to your shell-config!\\033[0m\"\nfi\n\nechof ok \"Install completed successfully!\"\nexit 0\n"
        },
        {
          "name": "logo.svg",
          "type": "blob",
          "size": 3.703125,
          "content": "<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\"?>\n<!-- Created with Inkscape (http://www.inkscape.org/) -->\n<svg width=\"101.02974mm\" height=\"159.63773mm\" viewBox=\"0 0 101.02974 159.63773\" version=\"1.1\" id=\"svg5\" xml:space=\"preserve\" inkscape:version=\"1.2.1 (9c6d41e410, 2022-07-14)\" sodipodi:docname=\"betterlockscreen_v2_dbe.svg\" inkscape:export-filename=\"betterlockscreen_v2_dbe.png\" inkscape:export-xdpi=\"1200\" inkscape:export-ydpi=\"1200\" xmlns:inkscape=\"http://www.inkscape.org/namespaces/inkscape\" xmlns:sodipodi=\"http://sodipodi.sourceforge.net/DTD/sodipodi-0.dtd\" xmlns=\"http://www.w3.org/2000/svg\" xmlns:svg=\"http://www.w3.org/2000/svg\"><sodipodi:namedview id=\"namedview7\" pagecolor=\"#505050\" bordercolor=\"#eeeeee\" borderopacity=\"1\" inkscape:showpageshadow=\"0\" inkscape:pageopacity=\"0\" inkscape:pagecheckerboard=\"0\" inkscape:deskcolor=\"#505050\" inkscape:document-units=\"mm\" showgrid=\"false\" inkscape:zoom=\"0.63290127\" inkscape:cx=\"313.63502\" inkscape:cy=\"341.28546\" inkscape:window-width=\"1920\" inkscape:window-height=\"1136\" inkscape:window-x=\"0\" inkscape:window-y=\"0\" inkscape:window-maximized=\"1\" inkscape:current-layer=\"layer1\"><inkscape:grid type=\"xygrid\" id=\"grid2364\" originx=\"-46.684501\" originy=\"-64.281104\"/></sodipodi:namedview><defs id=\"defs2\"><inkscape:path-effect effect=\"bspline\" id=\"path-effect1084\" is_visible=\"true\" lpeversion=\"1\" weight=\"33.333333\" steps=\"2\" helper_size=\"0\" apply_no_weight=\"true\" apply_with_weight=\"true\" only_selected=\"false\"/><inkscape:path-effect effect=\"bspline\" id=\"path-effect1017\" is_visible=\"true\" lpeversion=\"1\" weight=\"33.333333\" steps=\"2\" helper_size=\"0\" apply_no_weight=\"true\" apply_with_weight=\"true\" only_selected=\"false\"/></defs><g inkscape:label=\"Layer 1\" inkscape:groupmode=\"layer\" id=\"layer1\" transform=\"translate(-46.684502,-64.2811)\"><g id=\"g2640\"/><g id=\"g2777\" transform=\"translate(-440.68613,-232.64872)\"><path id=\"path2579\" style=\"\" d=\"m 537.8855,342.34764 c 0,0 -3.36921,-0.0327 -8.40362,0.31523 v 39.22965 a 21.024302,21.024302 0 0 1 8.40362,-1.7539 21.024302,21.024302 0 0 1 21.02456,21.02404 21.024302,21.024302 0 0 1 -21.02456,21.02404 21.024302,21.024302 0 0 1 -21.02404,-21.02404 V 344.1279 c -9.95163,1.66992 -21.00133,4.90153 -27.25622,11.15642 0,0 -18.01936,83.51829 48.28026,101.28322 66.29964,-17.76493 48.28026,-101.28322 48.28026,-101.28322 -13.29979,-13.2998 -48.28026,-12.93668 -48.28026,-12.93668 z\"/><path id=\"path2614\" style=\"\" d=\"m 537.88551,296.92982 c -22.49495,0 -40.60476,18.10981 -40.60476,40.60476 v 6.88278 c 6.01353,-3.26915 12.7782,-5.11143 19.00659,-6.12572 v -5.22346 c 0,-11.96533 9.63283,-21.59816 21.59817,-21.59816 11.96533,0 21.59816,9.63283 21.59816,21.59816 v 5.64514 c 6.37651,1.20368 13.16389,3.27453 19.00659,6.80837 v -7.98711 c 0,-22.49495 -18.1098,-40.60476 -40.60475,-40.60476 z\"/><g id=\"g2660\" transform=\"translate(431.76765,277.83372)\" style=\"\"><g aria-label=\"l\" id=\"text2654\" style=\"\"><path d=\"m 107.48255,134.5966 c 1.04423,0 2.14489,-0.19756 3.07622,-0.53623 l -0.95955,-3.21733 c -0.28222,0.0847 -0.59267,0.11289 -0.762,0.11289 -0.73378,0 -1.12889,-0.45155 -1.12889,-1.32644 v -16.11488 h -4.79777 v 16.70755 c 0,2.79399 1.66511,4.37444 4.57199,4.37444 z\" id=\"path1851\"/></g></g><path id=\"path2916\" style=\"\" d=\"m 537.06095,342.35152 c -1.26738,0.0104 -3.96482,0.0613 -7.57887,0.3111 v 39.22964 a 21.024302,21.024302 0 0 1 7.57887,-1.711 z m -20.19929,1.77612 c -9.95162,1.66992 -21.00133,4.90154 -27.25622,11.15643 0,0 -17.86508,82.81753 47.45551,101.05378 V 422.13218 A 21.024302,21.024302 0 0 1 516.86166,401.1624 Z\"/><path id=\"path2921\" style=\"\" d=\"m 537.8857,296.93001 c -22.49493,0 -40.60475,18.10983 -40.60475,40.60475 v 6.88279 c 6.01352,-3.26915 12.7782,-5.11144 19.00659,-6.12573 v -5.22345 c 0,-11.96532 9.63283,-21.59817 21.59816,-21.59817 z\"/></g></g></svg>"
        },
        {
          "name": "system",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}