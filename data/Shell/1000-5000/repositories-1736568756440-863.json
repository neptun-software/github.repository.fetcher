{
  "metadata": {
    "timestamp": 1736568756440,
    "page": 863,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Installomator/Installomator",
      "stars": 1134,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.28515625,
          "content": "# EditorConfig is awesome: https://EditorConfig.org\n\n # Unix-style newlines and whitespace cleanup\n [*]\n end_of_line = lf\n insert_final_newline = true\n trim_trailing_whitespace = true\n insert_final_newline = true\n\n # shell formatting\n [*.{sh,bash,zsh}]\n indent_style = space\n indent_size = 4\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1533203125,
          "content": ".DS_Store\nbuild/\nSamplePkgs/\nscratch/\n*.pkg\n*.mpkg\n*.dmg\n*.zip\n*.app\n*.tbz\n\n# do include Installomator .pkg files\n#!Installomator-*.pkg\ncheckLabelCurrent.sh\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 31.193359375,
          "content": "## v10.6\n\n- script improvements (#1476, #1578, #1513, #1544)\n\n- new labels\n\t- airtamepkg (#1379)\n\t- anastasiysextensionmanager (#1408)\n\t- apachedirectorystudio (#1301)\n\t- apachenetbeans (#1493, #1739)\n\t- aquamacs (#1504)\n\t- arduinoide (#1505)\n\t- automounter (#1300)\n\t- bambustudio (#1290, #1700, #1709)\n\t- baseline-nodaemon (#1317)\n\t- baseline (#1317)\n\t- bruno\n\t- buttercup (#1391)\n\t- calibriteprofiler (#1553)\n\t- cmake (#1500)\n\t- crystalfetch\n\t- dedoose (#1361)\n\t- deepl (#1372)\n\t- droplr (#1521)\n\t- dstny (#1482)\n\t- duet (#1310)\n\t- duodesktop (#1323)\n\t- eclipsetemurin11 (#1443)\n\t- eclipsetemurin17 (#1442)\n\t- eclipsetemurin21 (#1444)\n\t- eclipsetemurin8 (#1441)\n\t- ecosiabrowser (#1691)\n\t- emacs (#1503)\n\t- eposconnect (#1486)\n\t- etssecurebrowser (#1303)\n\t- evercast (#1378)\n\t- expressvpn (#1480)\n\t- facebookmessenger\n\t- finaldraft11 (#1378)\n\t- finaldraft12 (#1378)\n\t- flstudiomac (#1463, #1790)\n\t- fontbase (#1387)\n\t- freeplane (#1489)\n\t- garminexpress (#1413)\n\t- gather (#1321)\n\t- geneiousprime (#1264)\n\t- glpiagent (#1475)\n\t- grooveomnidialerenterpriseedition (#1312)\n\t- hoppscotch (#1322)\n\t- hot (#1563)\n\t- i1Profiler (#1353)\n\t- igv (#1558)\n\t- iriunwebcam (#1355)\n\t- jitsimeet (#1282)\n\t- keyshot12_2024 (#1645)\n\t- lifesize (#1464)\n\t- lightburn (#1377)\n\t- logitune (#1294)\n\t- loupedeck (#1472)\n\t- macpass (#1557)\n\t- microsoftteams-rollingout (#1670)\n\t- mobirise (#1384)\n\t- mockoon (#1535)\n\t- mountainduck (#1579)\n\t- multipass (#1561)\n\t- munkiadmin (#1449)\n\t- namiral (#1329)\n\t- networksharemounter (#1481)\n\t- nodejslts (#1429)\n\t- nomachine (#1275)\n\t- nordvpn (#1302)\n\t- nweasecuretestingbrowser (#1403)\n\t- omnifocus4 (#1487)\n\t- onyx (#1309)\n\t- orcaslicer (#1305)\n\t- pdfexpert (#1307)\n\t- powermonitor (#1362)\n\t- pulsar (#1430)\n\t- raindropio (#1458)\n\t- raycast (#1412)\n\t- realvnconedemandassist (#1517)\n\t- redshift (#1646)\n\t- rhino7 (#1572)\n\t- rhino8 (#1573)\n\t- rodecentral (#1473)\n\t- rodeunify (#1473)\n\t- scenebuilder (#1491)\n\t- scribus (#1488)\n\t- sipgateclinq\n\t- skim (#1479)\n\t- smartsvn (#1511)\n\t- soapuiopensource (#1508)\n\t- solstice (#1516)\n\t- soundly-placeit (#1471)\n\t- soundly (#1471)\n\t- spark (#1465)\n\t- splashtopstreamer (#1447)\n\t- stats (#1306)\n\t- symhelper (#1406)\n\t- texliveutility (#1584)\n\t- thonny (#1502)\n\t- transmit5 (#1580)\n\t- typeface (#1280)\n\t- workplacechat (#1512)\n\t- youleanloudnessmeter2 (#1470)\n\t- yubikeymanager (#1297)\n\t- zulujdk21 (#1439)\n\t- zulujdkfx17 (#1527)\n- updated labels\n\t- 1password8 (#1451)\n\t- asana (#1494)\n\t- asperaconnect (#1588)\n\t- autodeskfusion360admininstall (#1637)\n\t- basecamp3 (#1565)\n\t- beyondcomparepro (#1395)\n\t- blender (#1343, #1585)\n\t- bravepkg (#1450)\n\t- chemdoodle (#1392)\n\t- cinema4d (#1397)\n\t- clickshare (#1308, #1638)\n\t- clipgrab (#1533)\n\t- discord (#1456)\n\t- displaylinkmanager (#1337, #1538)\n\t- evernote (#1272)\n\t- filezilla (#1386, #1421, #1659)\n\t- googlechromepkg (#1569)\n\t- horos (#1419)\n\t- hpeasystart (#1333)\n\t- island (#1359)\n\t- jamfconnect (#1546)\n\t- jamfmigrator (#1285)\n\t- jetbrains apps (#1404)\n\t- keeperpasswordmanager (#1399)\n\t- krisp (#1466)\n\t- logitechoptionsplus (#1531)\n\t- macadminspython (#1478, #1525)\n\t- macports (#1642)\n\t- mactracker (#1276)\n\t- magicbullet (#1446, #1596)\n\t- marathon (#1539)\n\t- marathon2 (#1540)\n\t- marathoninfinity (#1541)\n\t- maxonapp (#1432)\n\t- mendeleyreferencemanager (#1514)\n\t- microsoftautoupdate (#1499)\n\t- microsoftdefender (#1685)\n\t- microsoftedge (#1622)\n\t- microsoftonedrive-deferred (#1330)\n\t- microsoftonedrivereset (#1283, #1269)\n\t- miro (#1498)\n\t- mkuser (#1319)\n\t- notion (#1288)\n\t- nvivo14 (#1438)\n\t- obs (#1336, #1344, #1581)\n\t- perimeter81 (#1508)\n\t- pgadmin4 (#1425)\n\t- popsql (#1452)\n\t- postman (#1398)\n\t- pritunl (#1436)\n\t- protonvpn (#1283)\n\t- qlab (#1469)\n\t- remotedesktopmanagerfree (#1522, #1523)\n\t- rodeconnect (#1473)\n\t- scaleft (#1375)\n\t- sketch (#1400)\n\t- skype (#1348)\n\t- slack (#1663, #1664)\n\t- smartsheet (#1401)\n\t- splashtopbusiness (#1293)\n\t- suspiciouspackage (#1358)\n\t- sync (#1532)\n\t- tableaudesktop (#1402)\n\t- trapcode (#1434, #1575)\n\t- ultimakercura (#1385)\n\t- vagrant (#1393)\n\t- virtualbox (#1357, #1346)\n\t- vlc (#1719)\n\t- webex (#1376)\n\t- whatsapp (#1356, #1369, #1445, #1793)\n\t- wireshark (#1370)\n\t- xeroxphaser7800 (#1554)\n\t- xeroxworkcentre7800 (#1554)\n\t- xmind (#1474)\n\t- yubikeymanagerqt (#1773)\n\t- zerotier (#1418)\n\t- zulujdk8 (#1570)\n- deleted labels\n\t- atom (#1437)\n\t- redeye (#1483)\n\n## v10.5\n\n- improved comments (#1219, #1229, #1258 )\n- added FileWave to list of known LOGOs\n\n- new labels\n\t- acorn (#1183)\n\t- adium (#1184)\n\t- adobedigitaleditions (#1142)\n\t- asperaconnect (#1154)\n\t- beamstudio (#1256)\n\t- bibdesk (#1189)\n\t- bravepkg (#1077)\n\t- burpsuitecommunityedition, burpsuiteprofessional (#1152)\n\t- catoclient (#1087)\n\t- chemdoodle2d, chemdoodle3d (#1185)\n\t- clipgrab (#1246)\n\t- codemeter (#1079)\n\t- digiexam (#1179)\n\t- dragonframe5 (#1254)\n\t- elgatocamerahub (#1175)\n\t- elgatostreamdeck (#1174)\n\t- escrowbuddy (#1098)\n\t- franz (#1190)\n\t- gephi (#1730)\n\t- homebrew (#1252)\n\t- isadora (#1250)\n\t- jamfcheck (#1212)\n\t- jetbrainsdataspell (#1178)\n\t- jetbrainsgoland (#1178)\n\t- jre8 (#1131)\n\t- keyshot12 (#1255)\n\t- keystoreexplorer (#1146)\n\t- kimplusclientmodul (#1121, #1261)\n\t- libericajdk11ltsfull (#1205)\n\t- libericajdk17ltsfull (#1206)\n\t- libericajdk8ltsfull (#1204)\n\t- libreofficelanguagepack_intl (#1120)\n\t- mactracker (#1168)\n\t- mdmwatchdog (#1100)\n\t- microsoftexcelreset, microsoftlicensereset, microsoftonenotereset, microsoftoutlookdataremoval, microsoftpowerpointreset, microsoftskypeforbusinessremovaltool, microsoftteamsreset, microsoftwordreset (#1224)\n\t- microsoftoutlook-monthly (#1101)\n\t- microsoftteamsnew (#1251)\n\t- mmhmm-desktop (#1203)\n\t- morisawadesktopmanager (#1134)\n\t- nvivo14 (#1095)\n\t- obsbotwebcam (#1126)\n\t- orion (#1089)\n\t- plexmediaserver (#1227)\n\t- prism10 (#1140)\n\t- processing3, processing4 (#1249)\n\t- proofpointautoupdater (#1108)\n\t- prusaslicer (#1222, #1259)\n\t- qlab (#1110)\n\t- realvnc (#1186)\n\t- realvncserver, vncconnect (#1186)\n\t- reflector4 (#1228)\n\t- salesforcescli (#1159)\n\t- sassafraskeyaccess (#1150)\n\t- sequelace (#1191)\n\t- shotcut (#1158)\n\t- snagit, snagit2023, snagit2024 (#1234, #1235)\n\t- starface72x (#1123)\n\t- starface73x (#1124)\n\t- starfaceuccclient (#1122)\n\t- suitestudio (#1199)\n\t- surfdrive (#1100, #1102)\n\t- teamviewerhostcustom (#1109)\n\t- texshop (#1188)\n\t- virtualbuddy (#1091)\n\t- vivi (#1143)\n\t- vmwarefusion (#1151)\n\t- weasis (#1236)\n\t- webextoolsremoval (#1224)\n\t- weprint (#1153)\n\t- zoomoutlookpluginremoval (#1224)\n\t- zulip (#1161)\n- updated labels\n\t- audacity (#1085)\n\t- boxdrive (#1097)\n\t- canva (#1213)\n\t- dialog (#1187, #1248)\n\t- displaylinkmanager (#1230)\n\t- dropbox (#1088, #1145)\n\t- egnytecore (#1172)\n\t- everweb (#1078)\n\t- figma (#1167)\n\t- googledrive (#1070)\n\t- inkscape (#1147)\n\t- lcadvancedvpnclient (#1209)\n\t- libreoffice (#1119)\n\t- magicbullet (#1216)\n\t- mailmate (#1166)\n\t- microsoftazurestorageexplorer (#1171)\n\t- microsoftteamsclassic, microsoftteams (#1251)\n\t- mmhmm, mmhmm-studio (#1203)\n\t- mysqlworkbenchce (#1197)\n\t- nextcloud (#1155)\n\t- nvivo, nvivo13 (#1095)\n\t- parallelsrasclient (#1192)\n\t- pgadmin4 (#1084)\n\t- prism9 (#1141)\n\t- python (#1241)\n\t- remotedesktopmanagerenterprise, remotedesktopmanagerfree (#1115)\n\t- royaltsx (#1243)\n\t- shottr (#1083)\n\t- slack (#1148)\n\t- teamviewer (#1136)\n\t- teamviewerhost (#1138)\n\t- teamviewerqs (#1137)\n\t- teamviewerqscustom (#1139)\n\t- textexpander (#1081)\n\t- thunderbird (#1128)\n\t- trapcode (#1216)\n\t- tunnelblick (#1198, #1198)\n\t- virtualbox (#1238)\n\t- vmwarehorizonclient (#1127)\n\t- xcreds (#1074, #1094)\n\t- zohoworkdrivetruesync (#1226)\n\n## v10.4\n\n- functions to get download url and version from git no longer print to stdout (#978, #1031)\n- fixes in swiftdialog scripts (#972)\n- added kandji to list of pre-defined logos (#928)\n\n- new labels:\n    - adobereaderdc (#933)\n    - affinitydesigner2 (#1001)\n    - affinityphoto2 (#1002)\n    - affinitypublisher2 (#1003)\n    - airtable (#929)\n    - anaconda (#948)\n    - arcbrowser (#967)\n    - atlassiancompanion (#974)\n    - avertouch (#1024)\n    - backgrounds (#984)\n    - bracketsio (#906)\n    - brosix (#930)\n    - camtasia2023 (#1071)\n    - cinema4d (#1045)\n    - cleartouchcollage (#1023)\n    - clickup (#896)\n    - crashplan (#948, #966)\n    - crashplansmb (#931)\n    - daylite (#943)\n    - displaylinkmanagergraphicsconnectivity (#1022)\n    - dymoconnectdesktop (#960)\n    - espanso (#1073)\n    - everweb (#1059)\n    - fork (#1005)\n    - gdevelop (#1044)\n    - hubstaff (#932)\n    - huddly (#986)\n    - jamovi (#940)\n    - jasp (#939)\n    - jdk20 (#989, #999)\n    - jetbrainsgateway (#937)\n    - jupyterlab (#982)\n    - keeperpasswordmanager (#1072)\n    - magicbullet (#1065)\n    - mailmate (#1006)\n    - maxonapp (#1047)\n    - meetingbar (#971)\n    - microsoftonedrive-deferred (#1061)\n    - microsoftonedrive-rollingoutdeferred (#1061)\n    - microsoftonedrivereset (#980)\n    - microsoftoutlookreset (#981)\n    - miniconda (#983)\n    - mkuser (#909)\n    - moderncsv (#973)\n    - monitorcontrol (#923)\n    - munki (#1063)\n    - nova (#1039)\n    - outset (#1064)\n    - patchomator (#1015)\n    - podmandesktop (#993)\n    - python (#948)\n    - rapidapi (#998)\n    - redcanarymacmonitor (#1017)\n    - rustdesk (#1021)\n    - smartsheet (#952)\n    - snagit2022, snagit2023 (#911)\n    - sococo (#935)\n    - ticktick (#988)\n    - tower (#941)\n    - trapcode (#1048)\n    - universe (#1049)\n    - vfx (#1050)\n    - wrikeformac (#901)\n    - xbar (#1012)\n    - xmind (#1007)\n    - zipwhip (#934)\n- deleted labels:\n    - ferdi (#580)\n    - ramboxce (#580)\n- merged labels:\n    - adobebrackets (merged into bracketsio, #906)\n    - adobereaderdc-install, adobereaderdc-update (merged into adobereaderdc, #933)\n    - mowgliiistycal (merged into itsycal, #1027)\n- updated Labels:\n    - 1passwordcli (#895)\n    - adobeacrobatprodc (#927)\n    - adobecreativeclouddesktop (#969)\n    - alttab (#1026)\n    - bitwarden (#1067)\n    - camtasia2022 (#1071)\n    - citrixworkspace (#1029)\n    - coconutbattery (#1040)\n    - cricutdesignspace (#985)\n    - cryptomator (#1043)\n    - cytoscape (#1069)\n    - dialpad (#1051)\n    - docker (#1037)\n    - flowjo (#1014)\n    - gitkraken (#964)\n    - gpgsuite (#946, #1010)\n    - grandperspective (#1032)\n    - imazingprofileeditor (#1028)\n    - inkscape (#1011, #1030)\n    - itsycal (#1027)\n    - jabradirect (#953)\n    - loom (#938, #942)\n    - lsagent (#926)\n    - mattermost (#991)\n    - microsoftonedrive-rollingout (#1061)\n    - microsoftonedrive (#1061)\n    - nessusagent (#961)\n    - nudge (#900)\n    - nudgesuite (#898, #900)\n    - openvpnconnectv3 (#970)\n    - remotedesktopmanagerfree (#975)\n    - scaleft (#918, #1068)\n    - shottr (#1025)\n    - snagit (#911)\n    - teamviewerqscustom (#1035)\n    - virtualbox (#904, #902)\n    - whatroute (#1038)\n    - wireshark (#955, #962, #963, #1034)\n\n## v10.3\n\n- new labels:\n    - aftermath (#816)\n    - backgroundmusic (#894)\n    - chromeremotedesktop (#840)\n    - cloudflarewarp (#839)\n    - druvainsync (#809, #868)\n    - firefoxdeveloperedition (#838)\n    - island (#891)\n    - jdk17 (#875)\n    - jdk19 (#880)\n    - jumpdesktop (#855)\n    - microsoftonedrive-rollingout (#826)\n    - mysqlworkbenchce (#856)\n    - nodejs (#848)\n    - pgadmin4 (#851)\n    - scrollreverser (#830)\n    - selfcontrol (#857)\n    - synologyactivebackupforbusinessagent (#837)\n    - vonagebusiness (#865)\n    - yubicoauthenticator (#842)\n- updated labels:\n    - 1password8 (#841)\n    - adobeacrobatprodc (#866, #867)\n    - alfred (#881)\n    - drawio (#889)\n    - firefoxpkg_intl (#893, #890)\n    - googleadseditor (#854)\n    - jdk18 (#859, #874)\n    - keybase (#861)\n    - loom (#847, #853)\n    - macports (#879, #882)\n    - microsoftoffice365\n    - musescore (#872)\n    - nudge, nudgesuite (#886, #887)\n    - openvpnconnectv3 (#845, #846, #852, #878)\n    - teamviewer (#1053)\n    - teamviewerhost (#1054)\n    - teamviewerqs (#1055)\n    - tencentmeeting (#849)\n    - ultimakercura (#884)\n- deleted labels:\n    - eraseinstall.sh\n\n\n## v10.2\n\n- first install script fixes (#818)\n- minor text fix (#832)\n- new labels:\n    - archimate (#814)\n    - betterdisplay (#813)\n    - beyondcomparepro (#820)\n    - camunda (#815)\n    - connectfonts (#824)\n    - gitkraken (#819)\n    - hmavpn (#604)\n    - lsagent (#793)\n    - nessusagent (#827)\n    - pcoipclient (#723)\n    - pingplotter (#597)\n    - popsql (#825)\n    - renew-noagent (#821)\n    - renew (#821)\n    - scrollreverser (#830)\n- updated labels:\n    - adobereaderdc-install (#807)\n    - anydesk (#715, #786, #800)\n    - audacity (#829)\n    - gimp (#798, #799, #802)\n    - jabradirect (#804)\n    - keybase (#831)\n    - microsoftteams (#803)\n    - openvpnconnectv3 (#784, #796, #801)\n    - rstudio (#822, #823)\n    - teamviewer (#805)\n    - vagrant (#817)\n    - xquartz (#828)\n\n## v10.1\n\n- updated Jamf/Dialog scripts icon handling (#778)\n- Readme Updates (#744)\n- new labels:\n    - amazoncorretto11jdk (#721)\n    - amazoncorretto17jdk (#721)\n    - bbeditpkg (#720)\n    - boop (#781)\n    - camtasia2021, camtasia2022 (#730)\n    - jamfcpr (#753)\n    - jetbrainsrider\n    - lgcalibrationstudio (#763)\n    - mendeleyreferencemanager (#713)\n    - microsoftofficefactoryreset (#751)\n    - microsoftofficeremoval (#755)\n    - mist-cli (#733)\n    - mist (#732)\n    - mobiletolocal (#752)\n    - netiquette (#770)\n    - todoist (#769)\n    - transfer (#773)\n    - vpntracker365 (#760)\n    - zerotier (#785)\n\n- updated labels:\n    - 1password8 (#759)\n    - amazoncorretto8jdk (#721)\n    - camtasia (#730)\n    - citrixworkspace (#731)\n    - code42 (#766)\n    - drawio (#725)\n    - duodevicehealth (#761)\n    - idrive (#726)\n    - idrivethin (#727)\n    - macfuse (#714)\n    - microsoftazuredatastudio (#788)\n    - nudge (#754)\n    - prism9 (#746)\n    - skype (#762)\n    - synologydriveclient (#789)\n    - ultimakercura (#740)\n\n\n## v10\n\n- updates to MDM sample scripts (#738)\n- updates to Swift Dialog integration (#717)\n- documentation updates (#711)\n\nAnd everything from the betas ([beta1](https://github.com/Installomator/Installomator/releases/tag/v10beta1), [beta2](https://github.com/Installomator/Installomator/releases/tag/v10beta2), [beta3](https://github.com/Installomator/Installomator/releases/tag/v10beta3))\n\n- new labels:\n    - ibmnotifier (#716)\n    - ipvisionconnect (#749)\n    - logitechoptionsplus (#719)\n    - lucidlink (#722)\n    - mactex (#685)\n    - onscreencontrol (#581)\n    - projectplace (#688)\n    - subethaedit (#728)\n    - sublimemerge (#729)\n    - venturablocker (#712)\n    - vysor (#710)\n\n- updated labels:\n    - googleadseditor (#739)\n    - openvpnconnectv3 (#750)\n    - tunnelblick (#618)\n\n\n## v10beta3\n\n- option to add item to dock if dockutil is installed (#701 requires dockutil https://github.com/kcrawford/dockutil )\n- further improvements to GitHub downloads (#691)\n- updated user dialog when app is already on the latest version (#658)\n\nPlus everything from beta1 and beta2.\n\n- new labels:\n    - adobeacrobatprodc (#707)\n    - adobereaderdc-install (#707)\n    - archiwareb2go (#625, #707)\n    - archiwarepst (#624)\n    - bitrix24 (#661)\n    - charles (#670)\n    - chronoagent (#617)\n    - chronosync (#616)\n    - cytoscape (#689)\n    - egnytecore (#655)\n    - fellow (#599)\n    - filemakerpro (#609)\n    - fujifilmwebcam (#598)\n    - gfxcardstatus (#690)\n    - horos (#610)\n    - inetclearreportsdesigner (#601)\n    - jdk18 (#608)\n    - latexit (#684)\n    - nudgesuite (#633)\n    - origin (#662)\n    - parallelsrasclient (#607)\n    - polylens (#671)\n    - splashtopbusiness (#660)\n    - tailscale (#620)\n    - zoomoutlookplugin (#656)\n    - zotero (#634)\n    - zulujdk18 (#612)\n\n- updated labels:\n    - acroniscyberprotectconnectagent (#678)\n    - adobecreativeclouddesktop (#687)\n    - adobereaderdc-update (#707)\n    - audacity (#708)\n    - duckduckgo (#704)\n    - libreoffice (#605)\n    - nudge\n    - obs (#692)\n    - r (#702)\n    - rstudio (#702)\n    - screamingfrogseospider (#665)\n    - vlc (#705, #606)\n    - xcreds\n\n\n\n## v10beta2\n\n- fixed problem with GitHub labels (#659)\n- bz2 archive support (#659)\n- fixed WorkspaceOne support (#653)\n- updated how `aapNewVersion` is determined (#680)\n\nPlus everything from v10beta1\n\n- new labels:\n\t- abetterfinderrename11 (#552)\n\t- carboncopycloner (#553)\n\t- cocoapods (#659)\n\t- coconutbattery (#588)\n\t- cricutdesignspace (#562)\n\t- dynalist (#591)\n\t- fellow (#591)\n\t- flexoptixapp (#554)\n\t- googleadseditor (#652, #541)\n\t- kap (#568)\n\t- keepingyouawake (#549)\n\t- lcadvancedvpnclient (#584)\n\t- masv (#569)\n\t- merlinproject (#555)\n\t- mongodbcompass (#654)\n\t- netspot (#556)\n\t- relatel (#619)\n\t- sonicvisualiser (#575)\n\t- strongdm (#559)\n\t- synologyassistant (#557)\n\t- synologydriveclient (#582)\n\t- tencentmeeting (#570)\n\t- typinator (#583)\n\t- xcreds (#675)\n- updated labels:\n\t- acroniscyberprotectconnect/remotix (#664)\n\t- acroniscyberprotectconnectagent/remotixagent (#664)\n\t- awsvpnclient (#586)\n\t- boxtools (#589)\n\t- clevershare2 (#664)\n\t- coderunner (#664)\n\t- colourcontrastanalyser (#664)\n\t- cryptomator (#664)\n\t- dangerzone (#664)\n\t- drawio (#664)\n\t- golang (#664)\n\t- icons (#664)\n\t- insomnia (#664)\n\t- knockknock (#664)\n\t- libreoffice (#672)\n\t- macports\n\t- opera (#664)\n\t- supportapp (#664)\n\t- vmwarehorizonclient (#645, #511)\n- deleted/deactivated labels:\n\t- microsoftyammer (#664)\n\t- wickrme (#664)\n\t- wickrpro (#664)\n\n\n## v10beta1\n\n- [swiftDialog](https://github.com/bartreardon/swiftDialog) integration (#641, #632), many thanks to @bartreardon, [sample scripts](in the MDM folder)\n- added WorkspaceOne option for LOGO (#517)\n- added function for JSON parsing with JXA (#529)\n- updated assemble.sh script to update Labels.txt when script is rebuilt (#540)\n- added a no requisite install script (#493)\n- GitHub lookup now don't use API calls, this should avoid or at least reduce rate limiting (#543)\n- fixed redundant exit codes (#643, #561)\n\nNOTE: some exit codes have changed! see [Installomator Exit Codes](https://github.com/Installomator/Installomator/wiki/Installomator-Exit-Codes) for a list\n\n- new labels:\n\t- bluejeanswithaudiodriver (#473)\n\t- duodevicehealth (#548)\n\t- googlechromeenterprise (#532)\n\t- ipswupdater (#545)\n\t- mmhmm (#571)\n\t- nordlayer (#419)\n\t- prune (#538)\n\t- whatroute (#560)\n- updated labels:\n\t- blender (#535, #622)\n\t- camtasia2019 (#547)\n\t- clickshare (#565)\n\t- egnyte (#500)\n\t- googledrive (#563)\n\t- grammarly (#576)\n\t- marathon, marathon2, marathoninfinity (#544)\n\t- miro (#475, #539)\n\t- notion (#566)\n\t- ringcentralapp (#550)\n\t- sublimetext (#593, #578, #567, #623, #626)\n\t- talkdeskcallbar (#536)\n\t- talkdeskcxcloud (#537)\n\t- wireshark (#585)\n\n\n## v9.2\n\n**Note**: Both Google and Mozilla recommend using the pkg installers instead of the dmg downloads for managed deployments. So far, Installomator has provided labels for both. (`googlechrome` and `googlechromepkg` or `firefox` and `firefoxpkg`, respectively) Since there are problems with the dmg downloads, a future release of Installomator will _disable_ the `firefox` and `googlechrome` dmg labels. You should switch to using `googlechromepkg` and `firefoxpkg` labels instead.\n\n- bug fix (#434)\n- documentation updates (#485, #494)\n- new labels:\n    - 1password8 (#514)\n\t- ultimakercura\n\t- androidstudio (#547)\n\t- atextlegacy (#464)\n\t- camtasia2019, camtasia2020 (#499)\n\t- clue, cluefull (#481)\n\t- craftmanagerforsketch\n\t- displaylinkmanager (#448)\n\t- drawio (#480)\n\t- duckduckgo\n\t- egnytewebedit (#512)\n\t- filezilla (#522)\n\t- firefoxpkg_intl\n\t- flycut (#501)\n\t- fontexplorer (#523)\n\t- hype (#524)\n\t- idrive (#507), idrivethin (#509)\n\t- imageoptim (#525)\n\t- linear (#519)\n\t- macoslaps (#502)\n\t- mightymike\n\t- mindmanager (#479)\n\t- pika (#526)\n\t- propresenter7 (#394)\n\t- qgis-pr\n\t- shottr (#516)\n\t- slab (#487)\n\t- snagit2019, snagit2020, snagit2021 (#498)\n\t- sonobus (#490)\n\t- talkdeskcxcloud (#452)\n\t- thunderbird_intl (#497)\n\t- unnaturalscrollwheels (#503)\n\t- wechat (#510)\n\t- xeroxworkcentre7800 (#527)\n\t- zohoworkdrivegenie\n- updated labels\n\t- adobereaderdc-update, adobereaderdc (#503)\n\t- amazoncorretto8jdk (#461)\n\t- camtasia (#499)\n\t- citrixworkspace (#508)\n\t- dbeaverce (#450)\n\t- dropbox\n\t- firefox, firefox_da, firefox_intl (#495), firefoxesr_intl (#496), firefoxpkg\n\t- googlechrome, googlechromepkg (#484)\n\t- gpgsuite (#465)\n\t- grammarly (#515)\n\t- logitechoptions (#478)\n\t- onlyofficedesktop (#454)\n\t- postman (#458)\n\t- rancherdesktop (#463)\n\t- remotedesktopmanagerenterprise\n\t- remotedesktopmanagerfree\n\t- ringcentralapp (#492)\n\t- sketch\n\t- snagit (#498)\n\t- talkdeskcallbar (#453)\n\n\n\n## v9.1\n\n\n- added option for Microsoft Endpoint Manager (Intune) to `LOGO` (#446)\n- minor fixes (#427, #434, #436)\n- the `googlechrome` label now always downloads the universal version (#430)\n- new labels:\n    - 1passwordcli (#429)\n    - amazoncorretto8jdk (#423)\n    - autodeskfusion360admininstall (#447)\n    - axurerp10 (#439)\n    - calcservice (#426)\n    - clipy (#412)\n    - dockutil (#432)\n    - easyfind (#426)\n    - grammarly (#444)\n    - houdahspot (#426)\n    - macadminspython (#431)\n    - microsoftazuredatastudio (#438)\n    - nanosaur (#426)\n    - tembo (#426)\n    - wordservice (#426)\n    - xmenu (#426)\n- updated labels:\n    - appcleaner (#428)\n    - dialog (#435, #437)\n    - googlechrome (#430)\n    - microsoftdefender (#440)\n    - supportapp (#426)\n    - zoom and zoomgov (#426, #433)\n\n\n\n## v9.0.1\n\n- improved logging levels throughout the script #408\n- fixed a bug for `pkgindmg` style labels #408\n- changed the criteria used to locate an app in the case the it cannot be found in the default locations, this should help with some apps with similar name (Virtual Box and Box Drive, #401) #413\n- new label: WhiteBox Packages (`packages`) #415\n- modified label: `loom` (added Apple silicon download) #417\n\n## v9\n\n- We have moved the root check to the beginning of the script, and improved DEBUG handling with two different modes. `DEBUG=0` is still for production, and `1` is still for the DEBUG we previously knew downloading to the directory it is running from, but `2` will download to temporary folder, will detect updates, but will not install anything, but it will notify the user (almost as running the script without root before).\n- Added option to not interrupt Do Not Disturb full screen apps like Keynote or Zoom with `INTERRUPT_DND=\"no\"`. Default is `\"yes\"` which is how it has worked until now.\n- `pkgName` in a label can now be searched for. An example is logitechoptions, where only the name of the pkg is given, and not the exact file path to it.\n- `LSMinimumSystemVersion` will now be honered, if the `Info.plist` in the app is specifying this. That means that an app that has this parameter in that file and it shows that the app requires a newer version of the OS than is currently installed, then we will not install it.\n- New variable `RETURN_LABEL_NAME`. If given the value `1`, like `RETURN_LABEL_NAME=1` then Installomator only returns the name of the label. It makes for a better user friendly message for displaying in DEPNotify if that is integrated.\n- Changed logic if `IGNORE_APP_STORE_APPS=yes`. Before this version a label like `microsoftonedrive` that was installed from App Store, and that we want to replace with the “ordinary” version, Installomator would still use `updateTool`, even though `IGNORE_APP_STORE_APPS=yes`. So we would have to have `INSTALL=force` in order to have the app replaced, as `updateTool` would be used. But now if `IGNORE_APP_STORE_APPS=yes` then `updateTool` will be not set, and the App Store app will be replaced. BUT if the installed software was not from App Store, then `updateTool` will not be used, and it would be a kind of a forced install (in the example of `microsoftonedrive`), except if the version is the same (where installation is skipped).\n- Added variable `SYSTEMOWNER` that is used when copying files when installing. Default `0` is to change owner of the app to the current user on the Mac, like this user was installing this app themselves. When using `1` we will put “root:wheel” on the app, which can be useful for shared machines.\n- Added option `curlOptions` to the labels. It can be filled with extra headers need for downloading the specific software. It needs to be an array, like `curlOptions=( )`. See “mocha”-software-labels.\n\nBig changes to logging:\n- Introducing variable `LOGGING`, that can be either of the logging levels\n- Logging levels:\n    0: DEBUG     Everything is logged\n    1: INFO      Normal logging behavior\n    2: WARN\n    3: ERROR\n    4: REQ\n- External logging to Datadog\n- A function to shorten duplicate lines in installation logs or output of longer commands\n- Ability to extract install.log in the time when Installomator was running, if further investigations needs to be done to logs\n\nFixes:\n- Fixed a problem with pkgs: If they were mounted with .pkg in the name, then we would find the directory and not the pkg file itself.\n- Minor fix for a check for a pkgName on a DMG. We used `ls` that would throw an error when not found, so the check was corrected.\n\n## v8.0\n\n- removed leading `0` from the version because it has lost all meaning (thanks to @grahampugh for the inspiration)\n- Installomator now detects when an app is already installed, and will display notifications correctly the user based on if the app was updated or installed for the first time.\n- New variables for labels that should be installed using CLI: `CLIInstaller` and `CLIArguments`. When the installer app is named differently than the installed app, then the variable `installerTool` should be used to name the app that should be located in the DMG or zip. See the label __adobecreativeclouddesktop__ to see its use.\n- `buildLabel.sh` has been improved to build GitHub software labels much easier. In essense if the URL contains github.com, then it will try to find if it's the latest version or if variable `archiveName` is needed for finding the software. Also improved messaging throughout the script, as well as handling a situation where a pkg does not include a “Distribution” file, but a “PackageInfo”.\n- MDM script extended with `caffeinate` so Mac will not go to sleep during the time it takes installomator to run. Especially during setup, this can be useful.\n- Microsoft labels with `updateTool` variable, is updated to run `msupdate --list` before running the updateTool directly. Problems have been reported that the update would fail if the `--list` parameter for the command was not run first. This should help with the Jamf agent stalling during installation.\n- Added bunch of new labels, and improved others.\n\n## v0.7\n\n- default for `BLOCKING_PROCESS_ACTION`is now `BLOCKING_PROCESS_ACTION=tell_user` and not `prompt_user`. It will demand the user to quit the app to get it updated, and not present any option to skip it. In considering various use cases in different MDM solutions this is the best option going forward. Users usually choose to update, and is most often not bothered much with this information. If it's absoultely a bad time, then they can move the dialog box to the side, and click it when ready.\n- script is now assembled from fragments. This helps avoid merging conflicts on git and allows the core team to work on the script logic while also accepting new labels. See the \"Assemble Script ReadMe\" for details.\n- We now detect App Store installed apps, and we do not replace them automatically. An example is Slack that will loose all settings if it is suddenly changed from App Store version to the \"web\" version (they differ in the handling of settings files). If `INSTALL=force` then we will replace the App Store app. We log all this.\n- Change in finding installed apps. We now look in /Applications and /Applications/Utilities first. If not found there, we use spotligt to find it. (We discovered a problem when a user has Parallels Windows installed with Microsoft Edge in it. Then Installomator wanted to update the app all the time, becaus spotlight found that Windows version of the app that Parallels created.)\n- Added bunch of new labels, and improved others.\n- Renamed `buildCaseStatement.sh` to `buildLabel.sh` and improved it a lot. It is a great start when figuring out how to create a new label for an app, or a piece of software. Look at the tutorials in our wiki.\n- Mosyle changed their app name from Business to Self-Service\n\n## v0.6 - 2021-07-14\n\n- several new and updated labels, for a total of 302\n- versionKey variable can be used to choose which Info.plist key to get the version from\n- an appCustomVersion() {} function can now be used in a label\n- with INSTALL=force, the script will not be using updateTool, but will reinstall instead\n- added quit and quit_kill options to NOTIFY\n- updated buildCaseStatement.sh\n- updated buildInstallomatorPkg.sh to use notarytool (requires Xcode 13)\n- several minor fixes\n\n## v0.5 - 2021-04-13\n\n- Major update and now with help from @Theile and @Isaac\n- Added additional `BLOCKING_PROCESS_ACTION` handlings\n- Added additional `NOTIFY=all`. Usuful if used in Self Service, as the user will be notified before download, before install as well as when it is done.\n- Added variable `LOGO` for icons i dialogs, use `LOGO=appstore` (or `jamf` or `mosyleb` or `mosylem` or `addigy`). It's also possible to set it to a direct path to a specific icon. Default is `appstore`.\n- Added variable `INSTALL` that can be set to `INSTALL=force` if software needs to be installed even though latest version is already installed (it will be a reinstall).\n- Version control now included. The variable `appNewVersion` in a label can be used to tell what the latest version from the web is. If this is not given, version checking is done after download.\n- For a label that only installs a pkg without an app in it, a variable `packageID` can be used for version checking.\n- Labels now sorted alphabetically, except for the Microsoft ones (that are at the end of the list). A bunch of new labels added, and lots of them have either been changed or improved (with `appNewVersion` og `packageID`).\n- If an app is asked to be closed down, it will now be opened again after the update.\n- If your MDM cannot call a script with parameters, the label can be set in the top of the script.\n- If your MDM is not Jamf Pro, and you need the script to be installed locally on your managed machines, then take a look at [Theiles fork](https://github.com/Theile/Installomator/). This fork can be called from the MDM using a small script.\n- Script `buildCaseStatement.sh` to help with creating labels have been improved.\n- Fixed a bug in a variable name that prevented updateTool to be used\n- added `type` variable for value `\"updateronly\"` if the label should only run an updater tool.\n\n\n## v0.4 - 2020-10-19\n\n- you can now set script variables as an argument in the form `VARIABLE=value`. More detail on this in the README file, 'Configuration from Arguments.' (#26, #50, #72, and #73)\n- change `downloadFromGit` to match file types better (#58)\n- implemented a workaround for changed behavior of `xpath` in Big Sur (#80)\n- added an option `prompt_user_then_kill` to `BLOCKING_PROCESS_ACTION` which will kill the process after the third unsuccessful attempt to quit (#78, thanks Patrick Atoon @raptor399)\n- added several new labels for total of 116\n\n\n## v0.3 - 2020-07-23\n\n- added several new labels for total of 98\n- removed the powershell labels, since the installer is not notarized\n- when run without any arguments, the script now lists all labels\n- changed how zips are expanded because this was broken on Mojave\n- improved logging in some statements\n- several more minor improvements\n\n\n## v0.2 - 2020-06-09\n\n- many fixes for broken URLs and other bugs\n- the `pkgInDmg` and `pkgInZip` now search for a pkg file in the archive in case the file name varies with the version\n- notification on successful installation can be suppressed with the `NOTIFY` variable\n- Apple signed installers and apps that don’t have a Team ID are verified correctly now\nimproved logging\n- several new applications: count increased from 62 in 0.1 to 87 in 0.2\n\n\n## v0.1 - 2020-05-12\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 4.0458984375,
          "content": "# Contributing to Installomator\n\n__Please note, that if you are contributing to this project with new labels or other suggestions in PRs, please put your changes in the files in the `fragments` sub-folder. DO NOT edit the full `Installomator.sh` script. The full script is generated from the fragments, and will be overwritten. More details on [how the script is assembled from the fragments here](https://github.com/Installomator/Installomator/tree/main/utils#how-to-assemble-installomatorsh).__\n\nWe try to keep the script as short as possible, and with more than 400 labels, we can save 400 lines in the script, if we do not have credit lines on each of these. So we are thankful for your contribution, but we will be removing these lines in the coming releases.\n\n## Branches\n\nThe branch list is as follows:\n\n- `release`: this branch will have the latest released version\n- `main`: (default) this branch will be the current build we are working on. It includes new and updated app labels, and critical bug fixes\n- `dev`: this will contain new and updated app labels, as well as other code changes that have the risk of significantly changing or breaking behavior\nthere will be other branches for new features and testing.\n\nThis should allow the contributing team to release minor updates for new and updated app labels while also work on new features for the next major release.\n\nWith all the new branches, your local repo may get confused. If you don’t have local changes, it is easiest to delete your local repo and re-clone it. If you have local changes you want to preserve, then you should commit those to a local branch, pull the latest changes `git pull --all`, then delete the old master branch: `git branch -d master`.\n\nPlease make sure you branch off of main for your PRs.\n\n__Thank you for contributing!__\n\n## Labels\n\nIf you need a new label for a piece of software, please take a look [at the tutorials in the Wiki](https://github.com/Installomator/Installomator/wiki#tutorials), those can be helpful for starting out on the creation of the label.\n\nWe expect you to try out finding the __version__ of the software online, so that `appNewVersion` can be filled in the label. It helps a lot when the software needs update, and greatly improve user experience.\n\nPlease document what you found out about the __version__ of the software if it's not included. We will not accept a new label if this is not documented, we will ask about this if it was not included. This is very important for the quality and reliability of Installomator.\n\nWhen creating a new label, please file a pull request (PR). And feel free to ask questions or make your comments about what else is needed, if we should take a look at the label, or help out in finding the version or isolating URLs or anything else. You can find [a tutorial on how to create a PR here](https://github.com/Installomator/Installomator/wiki/GitHub-howto-create-PRs).\n\nPlease include the log of installing this label in the description, like this:\n```\n% /Users/st/Documents/GitHub/Installomator/utils/assemble.sh software\n2021-11-24 10:07:19 software ################## Start Installomator v. 0.8.0\n2021-11-24 10:07:19 software ################## software\n2021-11-24 10:07:19 software DEBUG mode 1 enabled.\n```\n\nPlease have one label per PR, so we can separate these. Also if you change/fix a label.\n\n__Thank you very much for your contribution!__\n\n\n## Issues\n\nDo not create an issue just when you have a questions, but do file an issue or pull request (PR) for bugs or wrong behavior. Include the full log and include the version of Installomator you're running. When you create a PR to follow-up and solve an issue make sure to [mention the issue using the `#xxx` syntax in a commit message or comment to link the issue](https://docs.github.com/en/issues/tracking-your-work-with-issues/linking-a-pull-request-to-an-issue).\n\nJoin [the MacAdmins Slack](https://macadmins.org) and find us in the `#installomator` channel for questions, support and discussions. \n\nWhen in doubt, use the MacAdmins.org Slack as described in [README.md](https://github.com/Installomator/Installomator/)\n"
        },
        {
          "name": "Installomator.sh",
          "type": "blob",
          "size": 451.828125,
          "content": "#!/bin/zsh --no-rcs\nlabel=\"\" # if no label is sent to the script, this will be used\n\n# Installomator\n#\n# Downloads and installs Applications\n# 2020-2024 Installomator\n#\n# inspired by the download scripts from William Smith and Sander Schram\n#\n# Contributors:\n#    Armin Briegel - @scriptingosx\n#    Isaac Ordonez - @issacatmann\n#    Søren Theilgaard - @Theile\n#    Adam Codega - @acodega\n#    Trevor Sysock - @BigMacAdmin\n#\n# with contributions from many others\n\nexport PATH=/usr/bin:/bin:/usr/sbin:/sbin\n\n# NOTE: adjust these variables:\n\n# set to 0 for production, 1 or 2 for debugging\n# while debugging, items will be downloaded to the parent directory of this script\n# also no actual installation will be performed\n# debug mode 1 will download to the directory the script is run in, but will not check the version\n# debug mode 2 will download to the temp directory, check for blocking processes, check the version, but will not install anything or remove the current version\nDEBUG=1\n\n# notify behavior\nNOTIFY=success\n# options:\n#   - success      notify the user on success\n#   - silent       no notifications\n#   - all          all notifications (great for Self Service installation)\n\n# time in seconds to wait for a prompt to be answered before exiting the script\nPROMPT_TIMEOUT=86400\n# Common times translated into seconds\n# 60    =  1 minute\n# 300   =  5 minutes\n# 600   = 10 minutes\n# 3600  =  1 hour\n# 86400 = 24 hours (default)\n\n# behavior when blocking processes are found\n# BLOCKING_PROCESS_ACTION is ignored if app label uses updateTool\nBLOCKING_PROCESS_ACTION=tell_user\n# options:\n#   - ignore       continue even when blocking processes are found\n#   - quit         app will be told to quit nicely if running\n#   - quit_kill    told to quit twice, then it will be killed\n#                  Could be great for service apps if they do not respawn\n#   - silent_fail  exit script without prompt or installation\n#   - prompt_user  show a user dialog for each blocking process found,\n#                  user can choose \"Quit and Update\" or \"Not Now\".\n#                  When \"Quit and Update\" is chosen, blocking process\n#                  will be told to quit. Installomator will wait 30 seconds\n#                  before checking again in case Save dialogs etc are being responded to.\n#                  Installomator will abort if quitting after three tries does not succeed.\n#                  \"Not Now\" will exit Installomator.\n#   - prompt_user_then_kill\n#                  show a user dialog for each blocking process found,\n#                  user can choose \"Quit and Update\" or \"Not Now\".\n#                  When \"Quit and Update\" is chosen, blocking process\n#                  will be terminated. Installomator will abort if terminating\n#                  after two tries does not succeed. \"Not Now\" will exit Installomator.\n#   - prompt_user_loop\n#                  Like prompt-user, but clicking \"Not Now\", will just wait an hour,\n#                  and then it will ask again.\n#                  WARNING! It might block the MDM agent on the machine, as\n#                  the script will not exit, it will pause until the hour has passed,\n#                  possibly blocking for other management actions in this time.\n#   - tell_user    User will be showed a notification about the important update,\n#                  but user is only allowed to Quit and Continue, and then we\n#                  ask the app to quit. This is default.\n#   - tell_user_then_kill\n#                  User will be showed a notification about the important update,\n#                  but user is only allowed to Quit and Continue. If the quitting fails,\n#                  the blocking processes will be terminated.\n#   - kill         kill process without prompting or giving the user a chance to save\n\n\n# logo-icon used in dialog boxes if app is blocking\nLOGO=appstore\n# options:\n#   - appstore      Icon is Apple App Store (default)\n#   - jamf          JAMF Pro\n#   - mosyleb       Mosyle Business\n#   - mosylem       Mosyle Manager (Education)\n#   - addigy        Addigy\n#   - microsoft     Microsoft Endpoint Manager (Intune)\n#   - ws1           Workspace ONE (AirWatch)\n#   - filewave      FileWave\n#   - kandji        Kandji\n# path can also be set in the command call, and if file exists, it will be used.\n# Like 'LOGO=\"/System/Applications/App\\ Store.app/Contents/Resources/AppIcon.icns\"'\n# (spaces have to be escaped).\n\n\n# App Store apps handling\nIGNORE_APP_STORE_APPS=no\n# options:\n#  - no            If the installed app is from App Store (which include VPP installed apps)\n#                  it will not be touched, no matter its version (default)\n#  - yes           Replace App Store (and VPP) version of the app and handle future\n#                  updates using Installomator, even if latest version.\n#                  Shouldn’t give any problems for the user in most cases.\n#                  Known bad example: Slack will lose all settings.\n\n# Owner of copied apps\nSYSTEMOWNER=0\n# options:\n#  - 0             Current user will be owner of copied apps, just like if they\n#                  installed it themselves (default).\n#  - 1             root:wheel will be set on the copied app.\n#                  Useful for shared machines.\n\n# install behavior\nINSTALL=\"\"\n# options:\n#  -               When not set, the software will only be installed\n#                  if it is newer/different in version\n#  - force         Install even if it’s the same version\n\n\n# Re-opening of closed app\nREOPEN=\"yes\"\n# options:\n#  - yes           App will be reopened if it was closed\n#  - no            App not reopened\n\n# Only let Installomator return the name of the label\n# RETURN_LABEL_NAME=0\n# options:\n#   - 1      Installomator will return the name of the label and exit, so last line of\n#            output will be that name. When Installomator is locally installed and we\n#            use DEPNotify, then DEPNotify can present a more nice name to the user,\n#            instead of just the label name.\n\n\n# Interrupt Do Not Disturb (DND) full screen apps\nINTERRUPT_DND=\"yes\"\n# options:\n#  - yes           Script will run without checking for DND full screen apps.\n#  - no            Script will exit when an active DND full screen app is detected.\n\n# Comma separated list of app names to ignore when evaluating DND\nIGNORE_DND_APPS=\"\"\n# example that will ignore browsers when evaluating DND:\n# IGNORE_DND_APPS=\"firefox,Google Chrome,Safari,Microsoft Edge,Opera,Amphetamine,caffeinate\"\n\n\n# Swift Dialog integration\n\n# These variables will allow Installomator to communicate progress with Swift Dialog\n# https://github.com/swiftDialog/swiftDialog\n\n# This requires Swift Dialog 2.11.2 or higher.\n\nDIALOG_CMD_FILE=\"\"\n# When this variable is set, Installomator will write Swift Dialog commands to this path.\n# Installomator will not launch Swift Dialog. The process calling Installomator will have\n# launch and configure Swift Dialog to listen to this file.\n# See `MDM/swiftdialog_example.sh` for an example.\n\nDIALOG_LIST_ITEM_NAME=\"\"\n# When this variable is set, progress for downloads and installs will be sent to this\n# listitem.\n# When the variable is unset, progress will be sent to Swift Dialog's main progress bar.\n\nNOTIFY_DIALOG=0\n# If this variable is set to 1, then we will check for installed Swift Dialog v. 2 or later, and use that for notification\n\n\n# NOTE: How labels work\n\n# Each workflow label needs to be listed in the case statement below.\n# for each label these variables can be set:\n#\n# - name: (required)\n#   Name of the installed app.\n#   This is used to derive many of the other variables.\n#\n# - type: (required)\n#   The type of the installation. Possible values:\n#     - dmg\n#     - pkg\n#     - zip\n#     - tbz\n#     - pkgInDmg\n#     - pkgInZip\n#     - appInDmgInZip\n#     - updateronly     This last one is for labels that should only run an updateTool (see below)\n#\n# - packageID: (optional)\n#   The package ID of a pkg\n#   If given, will be used to find the version of installed software, instead of searching for an app.\n#   Usefull if a pkg does not install an app.\n#   See label installomator_st\n#\n# - downloadURL: (required)\n#   URL to download the dmg.\n#   Can be generated with a series of commands (see BBEdit for an example).\n#\n# - curlOptions: (array, optional)\n#   Options to the curl command, needed for curl to be able to download the software.\n#   Usually used for adding extra headers that some servers need in order to serve the file.\n#   curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" )\n#   (See “mocha”-labels, for examples on labels, and buildLabel.sh for header-examples.)\n#\n# - appNewVersion: (optional)\n#   Version of the downloaded software.\n#   If given, it will be compared to the installed version, to see if the download is different.\n#   It does not check for newer or not, only different.\n#\n# - versionKey: (optional)\n#   How we get version number from app. Possible values:\n#     - CFBundleShortVersionString\n#     - CFBundleVersion\n#   Not all software titles uses fields the same.\n#   See Opera label.\n#\n# - appCustomVersion(){}: (optional function)\n#   This function can be added to your label, if a specific custom\n#   mechanism hs to be used for getting the installed version.\n#   See labels zulujdk11, zulujdk13, zulujdk15\n#\n# - expectedTeamID: (required)\n#   10-digit developer team ID.\n#   Obtain the team ID by running:\n#\n#   - Applications (in dmgs or zips)\n#     spctl -a -vv /Applications/BBEdit.app\n#\n#   - Pkgs\n#     spctl -a -vv -t install ~/Downloads/desktoppr-0.2.pkg\n#\n#   The team ID is the ten-digit ID at the end of the line starting with 'origin='\n#\n# - archiveName: (optional)\n#   The name of the downloaded file.\n#   When not given the archiveName is derived from the $name.\n#   Note: This has to be defined BEFORE calling downloadURLFromGit or\n#   versionFromGit functions in the label.\n#\n# - appName: (optional)\n#   File name of the app bundle in the dmg to verify and copy (include .app).\n#   When not given, the appName is derived from the $name.\n#\n# - targetDir: (optional)\n#   dmg or zip:\n#     Applications will be copied to this directory.\n#     Default value is '/Applications' for dmg and zip installations.\n#   pkg:\n#     targetDir is used as the install-location. Default is '/'.\n#\n# - blockingProcesses: (optional)\n#   Array of process names that will block the installation or update.\n#   If no blockingProcesses array is given the default will be:\n#     blockingProcesses=( $name )\n#   When a package contains multiple applications, _all_ should be listed, e.g:\n#     blockingProcesses=( \"Keynote\" \"Pages\" \"Numbers\" )\n#   When a workflow has no blocking processes, use\n#     blockingProcesses=( NONE )\n#\n# - pkgName: (optional, only used for pkgInDmg, dmgInZip, and appInDmgInZip)\n#   File name or path to the pkg/dmg file _inside_ the dmg or zip.\n#   When not given the pkgName is derived from the $name\n#\n# - updateTool:\n# - updateToolArguments:\n#   When Installomator detects an existing installation of the application,\n#   and the updateTool variable is set\n#       $updateTool $updateArguments\n#   Will be run instead of of downloading and installing a complete new version.\n#   Use this when the updateTool does differential and optimized downloads.\n#   e.g. msupdate on various Microsoft labels\n#\n# - updateToolRunAsCurrentUser:\n#   When this variable is set (any value), $updateTool will be run as the current user.\n#\n# - CLIInstaller:\n# - CLIArguments:\n#   If the downloaded dmg is an installer that we can call using CLI, we can\n#   use these two variables for what to call.\n#   We need to define `name` for the installed app (to be version checked), as well as\n#   `installerTool` for the installer app (if named differently than `name`. Installomator\n#   will add the path to the folder/disk image with the binary, and it will be called like this:\n#       $CLIInstaller $CLIArguments\n#   For most installations `CLIInstaller` should contain the `installerTool` for the CLI call\n#   (if it’s the same).\n#   We can support a whole range of other software titles by implementing this.\n#   See label adobecreativeclouddesktop\n#\n# - installerTool:\n#   Introduced as part of `CLIInstaller`. If the installer in the DMG or ZIP is named\n#   differently than the installed app, then this variable can be used to name the\n#   installer that should be located after mounting/expanding the downloaded archive.\n#   See label adobecreativeclouddesktop\n#\n### Logging\n# Logging behavior\nLOGGING=\"INFO\"\n# options:\n#   - DEBUG     Everything is logged\n#   - INFO      (default) normal logging level\n#   - WARN      only warning\n#   - ERROR     only errors\n#   - REQ       ????\n\n# MDM profile name\nMDMProfileName=\"\"\n# options:\n#   - MDM Profile               Addigy has this name on the profile\n#   - Mosyle Corporation MDM    Mosyle uses this name on the profile\n# From the LOGO variable we can know if Addigy og Mosyle is used, so if that variable\n# is either of these, and this variable is empty, then we will auto detect this.\n\n# Datadog logging used\ndatadogAPI=\"\"\n# Simply add your own API key for this in order to have logs sent to Datadog\n# See more here: https://www.datadoghq.com/product/log-management/\n\n# Log Date format used when parsing logs for debugging, this is the default used by\n# install.log, override this in the case statements if you need something custom per\n# application (See adobeillustrator).  Using stadard GNU Date formatting.\nLogDateFormat=\"%Y-%m-%d %H:%M:%S\"\n\n# Get the start time for parsing install.log if we fail.\nstarttime=$(date \"+$LogDateFormat\")\n\n# Check if we have rosetta installed\nif [[ $(/usr/bin/arch) == \"arm64\" ]]; then\n    if ! arch -x86_64 /usr/bin/true >/dev/null 2>&1; then # pgrep oahd >/dev/null 2>&1\n        rosetta2=no\n    fi\nfi\nVERSION=\"10.7beta\"\nVERSIONDATE=\"2025-01-08\"\n\n# MARK: Functions\n\ncleanupAndExit() { # $1 = exit code, $2 message, $3 level\n    if [ -n \"$dmgmount\" ]; then\n        # unmount disk image\n        printlog \"Unmounting $dmgmount\" DEBUG\n        unmountingOut=$(hdiutil detach \"$dmgmount\" 2>&1)\n        printlog \"Debugging enabled, Unmounting output was:\\n$unmountingOut\" DEBUG\n    fi\n    if [ \"$DEBUG\" -ne 1 ]; then\n        # remove the temporary working directory when done (only if DEBUG is not used)\n        printlog \"Deleting $tmpDir\" DEBUG\n        deleteTmpOut=$(rm -Rfv \"$tmpDir\")\n        printlog \"Debugging enabled, Deleting tmpDir output was:\\n$deleteTmpOut\" DEBUG\n    fi\n\n    # If we closed any processes, reopen the app again\n    reopenClosedProcess\n    if [[ -n $2 && $1 -ne 0 ]]; then\n        printlog \"ERROR: $2\" $3\n        updateDialog \"fail\" \"Error ($1; $2)\"\n    else\n        printlog \"$2\" $3\n        updateDialog \"success\" \"\"\n    fi\n    printlog \"################## End Installomator, exit code $1 \\n\" REQ\n\n    # if label is wrong and we wanted name of the label, then return ##################\n    if [[ $RETURN_LABEL_NAME -eq 1 ]]; then\n        1=0 # If only label name should be returned we exit without any errors\n        echo \"#\"\n    fi\n    exit \"$1\"\n}\n\nrunAsUser() {\n    if [[ $currentUser != \"loginwindow\" ]]; then\n        uid=$(id -u \"$currentUser\")\n        launchctl asuser $uid sudo -u $currentUser \"$@\"\n    fi\n}\n\nreloadAsUser() {\n    if [[ $currentUser != \"loginwindow\" ]]; then\n        uid=$(id -u \"$currentUser\")\n        su - $currentUser -c \"${@}\"\n    fi\n}\n\ndisplaydialog() { # $1: message $2: title\n    message=${1:-\"Message\"}\n    title=${2:-\"Installomator\"}\n    runAsUser osascript -e \"button returned of (display dialog \\\"$message\\\" with  title \\\"$title\\\" buttons {\\\"Not Now\\\", \\\"Quit and Update\\\"} default button \\\"Quit and Update\\\" with icon POSIX file \\\"$LOGO\\\" giving up after $PROMPT_TIMEOUT)\"\n}\n\ndisplaydialogContinue() { # $1: message $2: title\n    message=${1:-\"Message\"}\n    title=${2:-\"Installomator\"}\n    runAsUser osascript -e \"button returned of (display dialog \\\"$message\\\" with  title \\\"$title\\\" buttons {\\\"Quit and Update\\\"} default button \\\"Quit and Update\\\" with icon POSIX file \\\"$LOGO\\\")\"\n}\n\ndisplaynotification() { # $1: message $2: title\n    message=${1:-\"Message\"}\n    title=${2:-\"Notification\"}\n    manageaction=\"/Library/Application Support/JAMF/bin/Management Action.app/Contents/MacOS/Management Action\"\n    hubcli=\"/usr/local/bin/hubcli\"\n    swiftdialog=\"/usr/local/bin/dialog\"\n\n    if [[ \"$($swiftdialog --version | cut -d \".\" -f1)\" -ge 2 && \"$NOTIFY_DIALOG\" -eq 1 ]]; then\n        \"$swiftdialog\" --notification --title \"$title\" --message \"$message\"\n    elif [[ -x \"$manageaction\" ]]; then\n         \"$manageaction\" -message \"$message\" -title \"$title\" &\n    elif [[ -x \"$hubcli\" ]]; then\n         \"$hubcli\" notify -t \"$title\" -i \"$message\" -c \"Dismiss\"\n    elif [[ \"$($swiftdialog --version | cut -d \".\" -f1)\" -ge 2 ]]; then\n         \"$swiftdialog\" --notification --title \"$title\" --message \"$message\"\n    else\n        runAsUser osascript -e \"display notification \\\"$message\\\" with title \\\"$title\\\"\"\n    fi\n}\n\nprintlog(){\n    [ -z \"$2\" ] && 2=INFO\n    log_message=$1\n    log_priority=$2\n    timestamp=$(date +%F\\ %T)\n\n    # Check to make sure that the log isn't the same as the last, if it is then don't log and increment a timer.\n    if [[ ${log_message} == ${previous_log_message} ]]; then\n        let logrepeat=$logrepeat+1\n        return\n    fi\n    previous_log_message=$log_message\n\n    # Extra spaces for log_priority alignment\n    space_char=\"\"\n    if [[ ${#log_priority} -eq 3 ]]; then\n        space_char=\"  \"\n    elif [[ ${#log_priority} -eq 4 ]]; then\n        space_char=\" \"\n    fi\n\n    # Once we finally stop getting duplicate logs output the number of times we got a duplicate.\n    if [[ $logrepeat -gt 1 ]];then\n        echo \"$timestamp\" : \"${log_priority}${space_char} : $label : Last Log repeated ${logrepeat} times\" | tee -a $log_location\n\n        if [[ ! -z $datadogAPI ]]; then\n            curl -s -X POST https://http-intake.logs.datadoghq.com/v1/input -H \"Content-Type: text/plain\" -H \"DD-API-KEY: $datadogAPI\" -d \"${log_priority} : $mdmURL : $APPLICATION : $VERSION : $SESSION : Last Log repeated ${logrepeat} times\" > /dev/null\n        fi\n        logrepeat=0\n    fi\n\n    # If the datadogAPI key value is set and our logging level is greater than or equal to our set level\n    # then post to Datadog's HTTPs endpoint.\n    if [[ -n $datadogAPI && ${levels[$log_priority]} -ge ${levels[$datadogLoggingLevel]} ]]; then\n        while IFS= read -r logmessage; do\n            curl -s -X POST https://http-intake.logs.datadoghq.com/v1/input -H \"Content-Type: text/plain\" -H \"DD-API-KEY: $datadogAPI\" -d \"${log_priority} : $mdmURL : Installomator-${label} : ${VERSIONDATE//-/} : $SESSION : ${logmessage}\" > /dev/null\n        done <<< \"$log_message\"\n    fi\n\n    # If our logging level is greaterthan or equal to our set level then output locally.\n    if [[ ${levels[$log_priority]} -ge ${levels[$LOGGING]} ]]; then\n        while IFS= read -r logmessage; do\n            if [[ \"$(whoami)\" == \"root\" ]]; then\n                echo \"$timestamp\" : \"${log_priority}${space_char} : $label : ${logmessage}\" | tee -a $log_location\n            else\n                echo \"$timestamp\" : \"${log_priority}${space_char} : $label : ${logmessage}\"\n            fi\n        done <<< \"$log_message\"\n    fi\n}\n\n# Used to remove dupplicate lines in large log output,\n# for example from msupdate command after it finishes running.\ndeduplicatelogs() {\n    loginput=${1:-\"Log\"}\n    logoutput=\"\"\n    # Read each line of the incoming log individually, match it with the previous.\n    # If it matches increment logrepeate then skip to the next line.\n    while read log; do\n        if [[ $log == $previous_log ]];then\n            let logrepeat=$logrepeat+1\n            continue\n        fi\n\n        previous_log=\"$log\"\n        if [[ $logrepeat -gt 1 ]];then\n            logoutput+=\"Last Log repeated ${logrepeat} times\\n\"\n            logrepeat=0\n        fi\n\n        logoutput+=\"$log\\n\"\n    done <<< \"$loginput\"\n}\n\n# will get the latest release download from a github repo\ndownloadURLFromGit() { # $1 git user name, $2 git repo name\n    gitusername=${1?:\"no git user name\"}\n    gitreponame=${2?:\"no git repo name\"}\n\n    if [[ $type == \"pkgInDmg\" ]]; then\n        filetype=\"dmg\"\n    elif [[ $type == \"pkgInZip\" ]]; then\n        filetype=\"zip\"\n    else\n        filetype=$type\n    fi\n\n    if [ -n \"$archiveName\" ]; then\n        downloadURL=$(curl -sfL \"https://api.github.com/repos/$gitusername/$gitreponame/releases/latest\" | awk -F '\"' \"/browser_download_url/ && /$archiveName\\\"/ { print \\$4; exit }\")\n        if [[ \"$(echo $downloadURL | grep -ioE \"https.*$archiveName\")\" == \"\" ]]; then\n            #downloadURL=https://github.com$(curl -sfL \"https://github.com/$gitusername/$gitreponame/releases/latest\" | tr '\"' \"\\n\" | grep -i \"^/.*\\/releases\\/download\\/.*$archiveName\" | head -1)\n            downloadURL=\"https://github.com$(curl -sfL \"$(curl -sfL \"https://github.com/$gitusername/$gitreponame/releases/latest\" | tr '\"' \"\\n\" | grep -i \"expanded_assets\" | head -1)\" | tr '\"' \"\\n\" | grep -i \"^/.*\\/releases\\/download\\/.*$archiveName\" | head -1)\"\n        fi\n    else\n        downloadURL=$(curl -sfL \"https://api.github.com/repos/$gitusername/$gitreponame/releases/latest\" | awk -F '\"' \"/browser_download_url/ && /$filetype\\\"/ { print \\$4; exit }\")\n        if [[ \"$(echo $downloadURL | grep -ioE \"https.*.$filetype\")\" == \"\" ]]; then\n            #downloadURL=https://github.com$(curl -sfL \"https://github.com/$gitusername/$gitreponame/releases/latest\" | tr '\"' \"\\n\" | grep -i \"^/.*\\/releases\\/download\\/.*\\.$filetype\" | head -1)\n            downloadURL=\"https://github.com$(curl -sfL \"$(curl -sfL \"https://github.com/$gitusername/$gitreponame/releases/latest\" | tr '\"' \"\\n\" | grep -i \"expanded_assets\" | head -1)\" | tr '\"' \"\\n\" | grep -i \"^/.*\\/releases\\/download\\/.*\\.$filetype\" | head -1)\"\n        fi\n    fi\n    if [ -z \"$downloadURL\" ]; then\n        cleanupAndExit 14 \"could not retrieve download URL for $gitusername/$gitreponame\" ERROR\n    else\n        echo \"$downloadURL\"\n        return 0\n    fi\n}\n\nversionFromGit() {\n    # credit: Søren Theilgaard (@theilgaard)\n    # $1 git user name, $2 git repo name\n    gitusername=${1?:\"no git user name\"}\n    gitreponame=${2?:\"no git repo name\"}\n\n    #appNewVersion=$(curl -L --silent --fail \"https://api.github.com/repos/$gitusername/$gitreponame/releases/latest\" | grep tag_name | cut -d '\"' -f 4 | sed 's/[^0-9\\.]//g')\n    appNewVersion=$(curl -sLI \"https://github.com/$gitusername/$gitreponame/releases/latest\" | grep -i \"^location\" | tr \"/\" \"\\n\" | tail -1 | sed 's/[^0-9\\.]//g')\n    if [ -z \"$appNewVersion\" ]; then\n        printlog \"could not retrieve version number for $gitusername/$gitreponame\" WARN\n        appNewVersion=\"\"\n    else\n        echo \"$appNewVersion\"\n        return 0\n    fi\n}\n\n\n# Handling of differences in xpath between Catalina and Big Sur\nxpath() {\n\t# the xpath tool changes in Big Sur and now requires the `-e` option\n\tif [[ $(sw_vers -buildVersion) > \"20A\" ]]; then\n\t\t/usr/bin/xpath -e $@\n\t\t# alternative: switch to xmllint (which is not perl)\n\t\t#xmllint --xpath $@ -\n\telse\n\t\t/usr/bin/xpath $@\n\tfi\n}\n\n# from @Pico: https://macadmins.slack.com/archives/CGXNNJXJ9/p1652222365989229?thread_ts=1651786411.413349&cid=CGXNNJXJ9\ngetJSONValue() {\n\t# $1: JSON string OR file path to parse (tested to work with up to 1GB string and 2GB file).\n\t# $2: JSON key path to look up (using dot or bracket notation).\n\tprintf '%s' \"$1\" | /usr/bin/osascript -l 'JavaScript' \\\n\t\t-e \"let json = $.NSString.alloc.initWithDataEncoding($.NSFileHandle.fileHandleWithStandardInput.readDataToEndOfFile$(/usr/bin/uname -r | /usr/bin/awk -F '.' '($1 > 18) { print \"AndReturnError(ObjC.wrap())\" }'), $.NSUTF8StringEncoding)\" \\\n\t\t-e 'if ($.NSFileManager.defaultManager.fileExistsAtPath(json)) json = $.NSString.stringWithContentsOfFileEncodingError(json, $.NSUTF8StringEncoding, ObjC.wrap())' \\\n\t\t-e \"const value = JSON.parse(json.js)$([ -n \"${2%%[.[]*}\" ] && echo '.')$2\" \\\n\t\t-e 'if (typeof value === \"object\") { JSON.stringify(value, null, 4) } else { value }'\n}\n\ngetAppVersion() {\n    # modified by: Søren Theilgaard (@theilgaard) and Isaac Ordonez\n\n    # If label contain function appCustomVersion, we use that and return\n    if type 'appCustomVersion' 2>/dev/null | grep -q 'function'; then\n        appversion=$(appCustomVersion)\n        printlog \"Custom App Version detection is used, found $appversion\"\n        return\n    fi\n\n    # pkgs contains a version number, then we don't have to search for an app\n    if [[ $packageID != \"\" ]]; then\n        appversion=\"$(pkgutil --pkg-info-plist ${packageID} 2>/dev/null | grep -A 1 pkg-version | tail -1 | sed -E 's/.*>([0-9.]*)<.*/\\1/g')\"\n        if [[ $appversion != \"\" ]]; then\n            printlog \"found packageID $packageID installed, version $appversion\"\n            updateDetected=\"YES\"\n            return\n        else\n            printlog \"No version found using packageID $packageID\"\n        fi\n    fi\n\n    # get app in targetDir, /Applications, or /Applications/Utilities\n    if [[ -d \"$targetDir/$appName\" ]]; then\n        applist=\"$targetDir/$appName\"\n    elif [[ -d \"/Applications/$appName\" ]]; then\n        applist=\"/Applications/$appName\"\n#        if [[ $type =~ '^(dmg|zip|tbz|app.*)$' ]]; then\n#            targetDir=\"/Applications\"\n#        fi\n    elif [[ -d \"/Applications/Utilities/$appName\" ]]; then\n        applist=\"/Applications/Utilities/$appName\"\n#        if [[ $type =~ '^(dmg|zip|tbz|app.*)$' ]]; then\n#            targetDir=\"/Applications/Utilities\"\n#        fi\n    else\n    #    applist=$(mdfind \"kind:application $appName\" -0 )\n        printlog \"name: $name, appName: $appName\"\n        applist=$(mdfind \"kind:application AND name:$name\" -0 )\n#        printlog \"App(s) found: ${applist}\" DEBUG\n#        applist=$(mdfind \"kind:application AND name:$appName\" -0 )\n    fi\n    if [[ -z $applist ]]; then\n        printlog \"No previous app found\" WARN\n    else\n        printlog \"App(s) found: ${applist}\" INFO\n    fi\n#    if [[ $type =~ '^(dmg|zip|tbz|app.*)$' ]]; then\n#        printlog \"targetDir for installation: $targetDir\" INFO\n#    fi\n\n    appPathArray=( ${(0)applist} )\n\n    if [[ ${#appPathArray} -gt 0 ]]; then\n        filteredAppPaths=( ${(M)appPathArray:#${targetDir}*} )\n        if [[ ${#filteredAppPaths} -eq 1 ]]; then\n            installedAppPath=$filteredAppPaths[1]\n            #appversion=$(mdls -name kMDItemVersion -raw $installedAppPath )\n            appversion=$(defaults read $installedAppPath/Contents/Info.plist $versionKey) #Not dependant on Spotlight indexing\n            printlog \"found app at $installedAppPath, version $appversion, on versionKey $versionKey\"\n            updateDetected=\"YES\"\n            # Is current app from App Store\n            if [[ -d \"$installedAppPath\"/Contents/_MASReceipt ]];then\n                printlog \"Installed $appName is from App Store, use “IGNORE_APP_STORE_APPS=yes” to replace.\"\n                if [[ $IGNORE_APP_STORE_APPS == \"yes\" ]]; then\n                    printlog \"Replacing App Store apps, no matter the version\" WARN\n                    appversion=0\n                else\n                    if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n                        updateDialog \"wait\" \"Already installed from App Store. Not replaced.\"\n                        sleep 4\n                    fi\n                    cleanupAndExit 23 \"App previously installed from App Store, and we respect that\" ERROR\n                fi\n            fi\n        else\n            printlog \"could not determine location of $appName\" WARN\n        fi\n    else\n        printlog \"could not find $appName\" WARN\n    fi\n}\n\ncheckRunningProcesses() {\n    # don't check in DEBUG mode 1\n    if [[ $DEBUG -eq 1 ]]; then\n        printlog \"DEBUG mode 1, not checking for blocking processes\" DEBUG\n        return\n    fi\n\n    # try at most 3 times\n    for i in {1..4}; do\n        countedProcesses=0\n        for x in ${blockingProcesses}; do\n            if pgrep -xq \"$x\"; then\n                printlog \"found blocking process $x\"\n                appClosed=1\n\n                case $BLOCKING_PROCESS_ACTION in\n                    quit|quit_kill)\n                        printlog \"telling app $x to quit\"\n                        runAsUser osascript -e \"tell app \\\"$x\\\" to quit\"\n                        if [[ $i > 2 && $BLOCKING_PROCESS_ACTION = \"quit_kill\" ]]; then\n                          printlog \"Changing BLOCKING_PROCESS_ACTION to kill\"\n                          BLOCKING_PROCESS_ACTION=kill\n                        else\n                            # give the user a bit of time to quit apps\n                            printlog \"waiting 30 seconds for processes to quit\"\n                            sleep 30\n                        fi\n                        ;;\n                    kill)\n                      printlog \"killing process $x\"\n                      pkill $x\n                      sleep 5\n                      ;;\n                    prompt_user|prompt_user_then_kill)\n                      button=$(displaydialog \"Quit “$x” to continue updating? $([[ -n $appNewVersion ]] && echo \"Version $appversion is installed, but version $appNewVersion is available.\") (Leave this dialogue if you want to activate this update later).\" \"The application “$x” needs to be updated.\")\n                      if [[ $button = \"Not Now\" ]]; then\n                        appClosed=0\n                        cleanupAndExit 10 \"user aborted update\" ERROR\n                      elif [[ $button = \"\" ]]; then\n                        appClosed=0\n                        cleanupAndExit 25 \"timed out waiting for user response\" ERROR\n                      else\n                        if [[ $BLOCKING_PROCESS_ACTION = \"prompt_user_then_kill\" ]]; then\n                          # try to quit, then set to kill\n                          printlog \"telling app $x to quit\"\n                          runAsUser osascript -e \"tell app \\\"$x\\\" to quit\"\n                          # give the user a bit of time to quit apps\n                          printlog \"waiting 30 seconds for processes to quit\"\n                          sleep 30\n                          printlog \"Changing BLOCKING_PROCESS_ACTION to kill\"\n                          BLOCKING_PROCESS_ACTION=kill\n                        else\n                          printlog \"telling app $x to quit\"\n                          runAsUser osascript -e \"tell app \\\"$x\\\" to quit\"\n                          # give the user a bit of time to quit apps\n                          printlog \"waiting 30 seconds for processes to quit\"\n                          sleep 30\n                        fi\n                      fi\n                      ;;\n                    prompt_user_loop)\n                      button=$(displaydialog \"Quit “$x” to continue updating? $([[ -n $appNewVersion ]] && echo \"Version $appversion is installed, but version $appNewVersion is available.\") (Click “Not Now” to be asked in 1 hour, or leave this open until you are ready).\" \"The application “$x” needs to be updated.\")\n                      if [[ $button = \"Not Now\" ]]; then\n                        if [[ $i < 2 ]]; then\n                          printlog \"user wants to wait an hour\"\n                          sleep 3600 # 3600 seconds is an hour\n                        else\n                          printlog \"change of BLOCKING_PROCESS_ACTION to tell_user\"\n                          BLOCKING_PROCESS_ACTION=tell_user\n                        fi\n                      else\n                        printlog \"telling app $x to quit\"\n                        runAsUser osascript -e \"tell app \\\"$x\\\" to quit\"\n                        # give the user a bit of time to quit apps\n                        printlog \"waiting 30 seconds for processes to quit\"\n                        sleep 30\n                      fi\n                      ;;\n                    tell_user|tell_user_then_kill)\n                      button=$(displaydialogContinue \"Quit “$x” to continue updating? (This is an important update). Wait for notification of update before launching app again.\" \"The application “$x” needs to be updated.\")\n                      printlog \"telling app $x to quit\"\n                      runAsUser osascript -e \"tell app \\\"$x\\\" to quit\"\n                      # give the user a bit of time to quit apps\n                      printlog \"waiting 30 seconds for processes to quit\"\n                      sleep 30\n                      if [[ $i > 1 && $BLOCKING_PROCESS_ACTION = tell_user_then_kill ]]; then\n                          printlog \"Changing BLOCKING_PROCESS_ACTION to kill\"\n                          BLOCKING_PROCESS_ACTION=kill\n                      fi\n                      ;;\n                    silent_fail)\n                      appClosed=0\n                      cleanupAndExit 12 \"blocking process '$x' found, aborting\" ERROR\n                      ;;\n                esac\n\n                countedProcesses=$((countedProcesses + 1))\n            fi\n        done\n\n    done\n\n    if [[ $countedProcesses -ne 0 ]]; then\n        cleanupAndExit 11 \"could not quit all processes, aborting...\" ERROR\n    fi\n\n    printlog \"no more blocking processes, continue with update\" REQ\n}\n\nreopenClosedProcess() {\n    # If Installomator closed any processes, let's get the app opened again\n    # credit: Søren Theilgaard (@theilgaard)\n\n    # don't reopen if REOPEN is not \"yes\"\n    if [[ $REOPEN != yes ]]; then\n        printlog \"REOPEN=no, not reopening anything\"\n        return\n    fi\n\n    # don't reopen in DEBUG mode 1\n    if [[ $DEBUG -eq 1 ]]; then\n        printlog \"DEBUG mode 1, not reopening anything\" DEBUG\n        return\n    fi\n\n    if [[ $appClosed == 1 ]]; then\n        printlog \"Telling app $appName to open\"\n        #runAsUser osascript -e \"tell app \\\"$appName\\\" to open\"\n        #runAsUser open -a \"${appName}\"\n        reloadAsUser \"open -a \\\"${appName}\\\"\"\n        #reloadAsUser \"open \\\"${(0)applist}\\\"\"\n        processuser=$(ps aux | grep -i \"${appName}\" | grep -vi \"grep\" | awk '{print $1}')\n        printlog \"Reopened ${appName} as $processuser\"\n    else\n        printlog \"Installomator did not close any apps, so no need to reopen any apps.\" INFO\n    fi\n}\n\ninstallAppWithPath() { # $1: path to app to install in $targetDir $2: path to folder (with app inside) to copy to $targetDir\n    # modified by: Søren Theilgaard (@theilgaard)\n    appPath=${1?:\"no path to app\"}\n    # If $2 ends in \"/\" then a folderName has not been specified so don't set it.\n    if [[ ! \"${2}\" == */ ]]; then\n        folderPath=\"${2}\"\n    fi\n\n    # check if app exists\n    if [ ! -e \"$appPath\" ]; then\n        cleanupAndExit 8 \"could not find: $appPath\" ERROR\n    fi\n\n    # check if folder path exists if it is set\n    if [[ -n \"$folderPath\" ]] && [[ ! -e \"$folderPath\" ]]; then\n        cleanupAndExit 8 \"could not find folder: $folderPath\" ERROR\n    fi\n\n    # verify with spctl\n    printlog \"Verifying: $appPath\" INFO\n    updateDialog \"wait\" \"Verifying...\"\n    printlog \"App size: $(du -sh \"$appPath\")\" DEBUG\n    appVerify=$(spctl -a -vv \"$appPath\" 2>&1 )\n    appVerifyStatus=$(echo $?)\n    teamID=$(echo $appVerify | awk '/origin=/ {print $NF }' | tr -d '()' )\n    deduplicatelogs \"$appVerify\"\n\n    if [[ $appVerifyStatus -ne 0 ]] ; then\n    #if ! teamID=$(spctl -a -vv \"$appPath\" 2>&1 | awk '/origin=/ {print $NF }' | tr -d '()' ); then\n        cleanupAndExit 4 \"Error verifying $appPath error:\\n$logoutput\" ERROR\n    fi\n    printlog \"Debugging enabled, App Verification output was:\\n$logoutput\" DEBUG\n    printlog \"Team ID matching: $teamID (expected: $expectedTeamID )\" INFO\n\n    if [ \"$expectedTeamID\" != \"$teamID\" ]; then\n        cleanupAndExit 5 \"Team IDs do not match\" ERROR\n    fi\n\n    # app versioncheck\n    appNewVersion=$(defaults read $appPath/Contents/Info.plist $versionKey)\n    if [[ -n $appNewVersion && $appversion == $appNewVersion ]]; then\n        printlog \"Downloaded version of $name is $appNewVersion on versionKey $versionKey, same as installed.\"\n        if [[ $INSTALL != \"force\" ]]; then\n            message=\"$name, version $appNewVersion, is the latest version.\"\n            if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n                printlog \"notifying\"\n                displaynotification \"$message\" \"No update for $name!\"\n            fi\n            if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n                updateDialog \"wait\" \"Latest version already installed...\"\n                sleep 2\n            fi\n            cleanupAndExit 0 \"No new version to install\" REG\n        else\n            printlog \"Using force to install anyway.\"\n        fi\n    elif [[ -z $appversion ]]; then\n        printlog \"Installing $name version $appNewVersion on versionKey $versionKey.\"\n    else\n        printlog \"Downloaded version of $name is $appNewVersion on versionKey $versionKey (replacing version $appversion).\"\n    fi\n\n    # macOS versioncheck\n    minimumOSversion=$(defaults read $appPath/Contents/Info.plist LSMinimumSystemVersion 2>/dev/null )\n    if [[ -n $minimumOSversion && $minimumOSversion =~ '[0-9.]*' ]]; then\n        printlog \"App has LSMinimumSystemVersion: $minimumOSversion\"\n        if ! is-at-least $minimumOSversion $installedOSversion; then\n            printlog \"App requires higher System Version than installed: $installedOSversion\"\n            message=\"Cannot install $name, version $appNewVersion, as it is not compatible with the running system version.\"\n            if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n                printlog \"notifying\"\n                displaynotification \"$message\" \"Error updating $name!\"\n            fi\n            cleanupAndExit 15 \"Installed macOS is too old for this app.\" ERROR\n        fi\n    fi\n\n    # skip install for DEBUG 1\n    if [ \"$DEBUG\" -eq 1 ]; then\n        printlog \"DEBUG mode 1 enabled, skipping remove, copy and chown steps\" DEBUG\n        return 0\n    fi\n\n    # skip install for DEBUG 2\n    if [ \"$DEBUG\" -eq 2 ]; then\n        printlog \"DEBUG mode 2 enabled, not installing anything, exiting\" DEBUG\n        cleanupAndExit 0\n    fi\n\n    # Test if variable CLIInstaller is set\n    if [[ -z $CLIInstaller ]]; then\n\n        # remove existing application\n        if [ -e \"$targetDir/$appName\" ]; then\n            printlog \"Removing existing $targetDir/$appName\" WARN\n            deleteAppOut=$(rm -Rfv \"$targetDir/$appName\" 2>&1)\n            tempName=\"$targetDir/$appName\"\n            tempNameLength=$((${#tempName} + 10))\n            deleteAppOut=$(echo $deleteAppOut | cut -c 1-$tempNameLength)\n            deduplicatelogs \"$deleteAppOut\"\n            printlog \"Debugging enabled, App removing output was:\\n$logoutput\" DEBUG\n        fi\n\n        # copy app to /Applications\n        printlog \"Copy $appPath to $targetDir\"\n        if [[ -n $folderPath ]]; then\n            copyAppOut=$(ditto -v \"$folderPath\" \"$targetDir/$folderName\" 2>&1)\n        else\n            copyAppOut=$(ditto -v \"$appPath\" \"$targetDir/$appName\" 2>&1)\n        fi\n        copyAppStatus=$(echo $?)\n        deduplicatelogs \"$copyAppOut\"\n        printlog \"Debugging enabled, App copy output was:\\n$logoutput\" DEBUG\n        if [[ $copyAppStatus -ne 0 ]] ; then\n        #if ! ditto \"$appPath\" \"$targetDir/$appName\"; then\n            cleanupAndExit 7 \"Error while copying:\\n$logoutput\" ERROR\n        fi\n\n        # set ownership to current user\n        if [[ \"$currentUser\" != \"loginwindow\" && $SYSTEMOWNER -ne 1 ]]; then\n            printlog \"Changing owner to $currentUser\" WARN\n            chown -R \"$currentUser\" \"$targetDir/$appName\"\n        else\n            printlog \"No user logged in or SYSTEMOWNER=1, setting owner to root:wheel\" WARN\n            chown -R root:wheel \"$targetDir/$appName\"\n        fi\n\n    elif [[ ! -z $CLIInstaller ]]; then\n        mountname=$(dirname $appPath)\n        printlog \"CLIInstaller exists, running installer command $mountname/$CLIInstaller $CLIArguments\" INFO\n\n        CLIoutput=$(\"$mountname/$CLIInstaller\" \"${CLIArguments[@]}\" 2>&1)\n        CLIstatus=$(echo $?)\n        deduplicatelogs \"$CLIoutput\"\n\n        if [ $CLIstatus -ne 0 ] ; then\n            cleanupAndExit 16 \"Error installing $mountname/$CLIInstaller $CLIArguments error:\\n$logoutput\" ERROR\n        else\n            printlog \"Succesfully ran $mountname/$CLIInstaller $CLIArguments\" INFO\n        fi\n        printlog \"Debugging enabled, update tool output was:\\n$logoutput\" DEBUG\n    fi\n\n}\n\nmountDMG() {\n    # mount the dmg\n    printlog \"Mounting $tmpDir/$archiveName\"\n    # always pipe 'Y\\n' in case the dmg requires an agreement\n    dmgmountOut=$(echo 'Y'$'\\n' | hdiutil attach \"$tmpDir/$archiveName\" -nobrowse -readonly )\n    dmgmountStatus=$(echo $?)\n    dmgmount=$(echo $dmgmountOut | tail -n 1 | cut -c 54- )\n    deduplicatelogs \"$dmgmountOut\"\n\n    if [[ $dmgmountStatus -ne 0 ]] ; then\n    #if ! dmgmount=$(echo 'Y'$'\\n' | hdiutil attach \"$tmpDir/$archiveName\" -nobrowse -readonly | tail -n 1 | cut -c 54- ); then\n        cleanupAndExit 3 \"Error mounting $tmpDir/$archiveName error:\\n$logoutput\" ERROR\n    fi\n    if [[ ! -e $dmgmount ]]; then\n        cleanupAndExit 3 \"Error accessing mountpoint for $tmpDir/$archiveName error:\\n$logoutput\" ERROR\n    fi\n    printlog \"Debugging enabled, dmgmount output was:\\n$logoutput\" DEBUG\n\n    printlog \"Mounted: $dmgmount\" INFO\n}\n\ninstallFromDMG() {\n    mountDMG\n    installAppWithPath \"$dmgmount/$appName\" \"$dmgmount/$folderName\"\n}\n\ninstallFromPKG() {\n    # verify with spctl\n    printlog \"Verifying: $archiveName\"\n    updateDialog \"wait\" \"Verifying...\"\n    printlog \"File list: $(ls -lh \"$archiveName\")\" DEBUG\n    printlog \"File type: $(file \"$archiveName\")\" DEBUG\n    spctlOut=$(spctl -a -vv -t install \"$archiveName\" 2>&1 )\n    spctlStatus=$(echo $?)\n    printlog \"spctlOut is $spctlOut\" DEBUG\n\n    teamID=$(echo $spctlOut | awk -F '(' '/origin=/ {print $2 }' | tr -d '()' )\n    # Apple signed software has no teamID, grab entire origin instead\n    if [[ -z $teamID ]]; then\n        teamID=$(echo $spctlOut | awk -F '=' '/origin=/ {print $NF }')\n    fi\n\n    deduplicatelogs \"$spctlOut\"\n\n    if [[ $spctlStatus -ne 0 ]] ; then\n    #if ! spctlout=$(spctl -a -vv -t install \"$archiveName\" 2>&1 ); then\n        cleanupAndExit 4 \"Error verifying $archiveName error:\\n$logoutput\" ERROR\n    fi\n\n    # Apple signed software has no teamID, grab entire origin instead\n    if [[ -z $teamID ]]; then\n        teamID=$(echo $spctlout | awk -F '=' '/origin=/ {print $NF }')\n    fi\n\n    printlog \"Team ID: $teamID (expected: $expectedTeamID )\"\n\n    if [ \"$expectedTeamID\" != \"$teamID\" ]; then\n        cleanupAndExit 5 \"Team IDs do not match!\" ERROR\n    fi\n\n    # Check version of pkg to be installed if packageID is set\n    if [[ $packageID != \"\" && $appversion != \"\" ]]; then\n        printlog \"Checking package version.\"\n        baseArchiveName=$(basename $archiveName)\n        expandedPkg=\"$tmpDir/${baseArchiveName}_pkg\"\n        pkgutil --expand \"$archiveName\" \"$expandedPkg\"\n        appNewVersion=$(cat \"$expandedPkg\"/Distribution | xpath \"string(//installer-gui-script/pkg-ref[@id='$packageID'][@version]/@version)\" 2>/dev/null )\n        rm -r \"$expandedPkg\"\n        printlog \"Downloaded package $packageID version $appNewVersion\"\n        if [[ $appversion == $appNewVersion ]]; then\n            printlog \"Downloaded version of $name is the same as installed.\"\n            if [[ $INSTALL != \"force\" ]]; then\n                message=\"$name, version $appNewVersion, is the latest version.\"\n                if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n                    printlog \"notifying\"\n                    displaynotification \"$message\" \"No update for $name!\"\n                fi\n                if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n                    updateDialog \"wait\" \"Latest version already installed...\"\n                    sleep 2\n                fi\n                cleanupAndExit 0 \"No new version to install\" REQ\n            else\n                printlog \"Using force to install anyway.\"\n            fi\n        fi\n    fi\n\n    # skip install for DEBUG 1\n    if [ \"$DEBUG\" -eq 1 ]; then\n        printlog \"DEBUG enabled, skipping installation\" DEBUG\n        return 0\n    fi\n\n    # skip install for DEBUG 2\n    if [ \"$DEBUG\" -eq 2 ]; then\n        cleanupAndExit 0 \"DEBUG mode 2 enabled, exiting\" DEBUG\n    fi\n\n    # install pkg\n    printlog \"Installing $archiveName to $targetDir\"\n\n    if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n        # pipe\n        pipe=\"$tmpDir/installpipe\"\n        # initialise named pipe for installer output\n        initNamedPipe create $pipe\n\n        # run the pipe read in the background\n        readPKGInstallPipe $pipe \"$DIALOG_CMD_FILE\" & installPipePID=$!\n        printlog \"listening to output of installer with pipe $pipe and command file $DIALOG_CMD_FILE on PID $installPipePID\" DEBUG\n\n        pkgInstall=$(installer -verboseR -pkg \"$archiveName\" -tgt \"$targetDir\" 2>&1 | tee $pipe)\n        pkgInstallStatus=$pipestatus[1]\n            # because we are tee-ing the output, we want the pipe status of the first command in the chain, not the most recent one\n        killProcess $installPipePID\n\n    else\n        pkgInstall=$(installer -verbose -dumplog -pkg \"$archiveName\" -tgt \"$targetDir\" 2>&1)\n        pkgInstallStatus=$(echo $?)\n    fi\n\n\n\n    sleep 1\n    pkgEndTime=$(date \"+$LogDateFormat\")\n    pkgInstall+=$(echo \"\\nOutput of /var/log/install.log below this line.\\n\")\n    pkgInstall+=$(echo \"----------------------------------------------------------\\n\")\n    pkgInstall+=$(awk -v \"b=$starttime\" -v \"e=$pkgEndTime\" -F ',' '$1 >= b && $1 <= e' /var/log/install.log)\n    deduplicatelogs \"$pkgInstall\"\n\n    if [[ $pkgInstallStatus -ne 0 ]] && [[ $logoutput == *\"requires Rosetta 2\"* ]] && [[ $rosetta2 == no ]]; then\n        printlog \"Package requires Rosetta 2, Installing Rosetta 2 and Installing Package\" INFO\n        /usr/sbin/softwareupdate --install-rosetta --agree-to-license\n        rosetta2=yes\n        installFromPKG\n    fi\n\n    if [[ $pkginstallstatus -ne 0 ]] ; then\n    #if ! installer -pkg \"$archiveName\" -tgt \"$targetDir\" ; then\n        cleanupAndExit 9 \"Error installing $archiveName error:\\n$logoutput\" ERROR\n    fi\n    printlog \"Debugging enabled, installer output was:\\n$logoutput\" DEBUG\n}\n\ninstallFromZIP() {\n    # unzip the archive\n    printlog \"Unzipping $archiveName\"\n\n    # tar -xf \"$archiveName\"\n\n    # note: when you expand a zip using tar in Mojave the expanded\n    # app will never pass the spctl check\n\n    # unzip -o -qq \"$archiveName\"\n\n    # note: githubdesktop fails spctl verification when expanded\n    # with unzip\n\n    ditto -x -k \"$archiveName\" \"$tmpDir\"\n    installAppWithPath \"$tmpDir/$appName\"\n}\n\ninstallFromTBZ() {\n    # unzip the archive\n    printlog \"Unzipping $archiveName\"\n    tar -xf \"$archiveName\"\n    installAppWithPath \"$tmpDir/$appName\"\n}\n\ninstallPkgInDmg() {\n    mountDMG\n    # locate pkg in dmg\n    if [[ -z $pkgName ]]; then\n        # find first file ending with 'pkg'\n        findfiles=$(find \"$dmgmount\" -iname \"*.pkg\" -type f -maxdepth 1  )\n        printlog \"Found pkg(s):\\n$findfiles\" DEBUG\n        filearray=( ${(f)findfiles} )\n        if [[ ${#filearray} -eq 0 ]]; then\n            cleanupAndExit 20 \"couldn't find pkg in dmg $archiveName\" ERROR\n        fi\n        archiveName=\"${filearray[1]}\"\n    else\n        if [[ -s \"$dmgmount/$pkgName\" ]] ; then # was: $tmpDir\n            archiveName=\"$dmgmount/$pkgName\"\n        else\n            # try searching for pkg\n            findfiles=$(find \"$dmgmount\" -iname \"$pkgName\") # was: $tmpDir\n            printlog \"Found pkg(s):\\n$findfiles\" DEBUG\n            filearray=( ${(f)findfiles} )\n            if [[ ${#filearray} -eq 0 ]]; then\n                cleanupAndExit 20 \"couldn't find pkg “$pkgName” in dmg $archiveName\" ERROR\n            fi\n            # it is now safe to overwrite archiveName for installFromPKG\n            archiveName=\"${filearray[1]}\"\n        fi\n    fi\n    printlog \"found pkg: $archiveName\"\n\n    # installFromPkgs\n    installFromPKG\n}\n\ninstallPkgInZip() {\n    # unzip the archive\n    printlog \"Unzipping $archiveName\"\n    tar -xf \"$archiveName\"\n\n    # locate pkg in zip\n    if [[ -z $pkgName ]]; then\n        # find first file ending with 'pkg'\n        findfiles=$(find \"$tmpDir\" -iname \"*.pkg\" -type f -maxdepth 2  )\n        printlog \"Found pkg(s):\\n$findfiles\" DEBUG\n        filearray=( ${(f)findfiles} )\n        if [[ ${#filearray} -eq 0 ]]; then\n            cleanupAndExit 21 \"couldn't find pkg in zip $archiveName\" ERROR\n        fi\n        # it is now safe to overwrite archiveName for installFromPKG\n        archiveName=\"${filearray[1]}\"\n        printlog \"found pkg: $archiveName\"\n    else\n        if [[ -s \"$tmpDir/$pkgName\" ]]; then\n            archiveName=\"$tmpDir/$pkgName\"\n        else\n            # try searching for pkg\n            findfiles=$(find \"$tmpDir\" -iname \"$pkgName\")\n            filearray=( ${(f)findfiles} )\n            if [[ ${#filearray} -eq 0 ]]; then\n                cleanupAndExit 21 \"couldn't find pkg “$pkgName” in zip $archiveName\" ERROR\n            fi\n            # it is now safe to overwrite archiveName for installFromPKG\n            archiveName=\"${filearray[1]}\"\n            printlog \"found pkg: $archiveName\"\n        fi\n    fi\n\n    # installFromPkgs\n    installFromPKG\n}\n\ninstallAppInDmgInZip() {\n    # unzip the archive\n    printlog \"Unzipping $archiveName\"\n    tar -xf \"$archiveName\"\n\n    # locate dmg in zip\n    if [[ -z $pkgName ]]; then\n        # find first file ending with 'dmg'\n        findfiles=$(find \"$tmpDir\" -iname \"*.dmg\" -maxdepth 2  )\n        filearray=( ${(f)findfiles} )\n        if [[ ${#filearray} -eq 0 ]]; then\n            cleanupAndExit 22 \"couldn't find dmg in zip $archiveName\" ERROR\n        fi\n        archiveName=\"$(basename ${filearray[1]})\"\n        # it is now safe to overwrite archiveName for installFromDMG\n        printlog \"found dmg: $tmpDir/$archiveName\"\n    else\n        # it is now safe to overwrite archiveName for installFromDMG\n        archiveName=\"$pkgName\"\n    fi\n\n    # installFromDMG, DMG expected to include an app (will not work with pkg)\n    installFromDMG\n}\n\nrunUpdateTool() {\n    printlog \"Function called: runUpdateTool\"\n    if [[ -x $updateTool ]]; then\n        printlog \"running $updateTool $updateToolArguments\"\n        if [[ -n $updateToolRunAsCurrentUser ]]; then\n            updateOutput=$(runAsUser $updateTool ${updateToolArguments} 2>&1)\n            updateStatus=$(echo $?)\n        else\n            updateOutput=$($updateTool ${updateToolArguments} 2>&1)\n            updateStatus=$(echo $?)\n        fi\n        sleep 1\n        updateEndTime=$(date \"+$updateToolLogDateFormat\")\n        deduplicatelogs $updateOutput\n        if [[ -n $updateToolLog ]]; then\n            updateOutput+=$(echo \"Output of Installer log of $updateToolLog below this line.\\n\")\n            updateOutput+=$(echo \"----------------------------------------------------------\\n\")\n            updateOutput+=$(awk -v \"b=$updatestarttime\" -v \"e=$updateEndTime\" -F ',' '$1 >= b && $1 <= e' $updateToolLog)\n        fi\n\n        if [[ $updateStatus -ne 0 ]]; then\n            printlog \"Error running $updateTool, Procceding with normal installation. Exit Status: $updateStatus Error:\\n$logoutput\" WARN\n            return 1\n            if [[ $type == updateronly ]]; then\n                cleanupAndExit 77 \"No Download URL Set, this is an update only application and the updater failed\" ERROR\n            fi\n        elif [[ $updateStatus -eq 0 ]]; then\n            printlog \"Debugging enabled, update tool output was:\\n$logoutput\" DEBUG\n        fi\n    else\n        printlog \"couldn't find $updateTool, continuing normally\" WARN\n        return 1\n    fi\n    return 0\n}\n\nfinishing() {\n    printlog \"Finishing...\"\n\n    sleep 3 # wait a moment to let spotlight catch up\n    getAppVersion\n\n    if [[ -z $appNewVersion ]]; then\n        message=\"Installed $name\"\n    else\n        message=\"Installed $name, version $appNewVersion\"\n    fi\n\n    printlog \"$message\" REQ\n\n    if [[ $currentUser != \"loginwindow\" && ( $NOTIFY == \"success\" || $NOTIFY == \"all\" ) ]]; then\n        printlog \"notifying\"\n        if [[ $updateDetected == \"YES\" ]]; then\n            displaynotification \"$message\" \"$name update complete!\"\n        else\n            displaynotification \"$message\" \"$name installation complete!\"\n        fi\n    fi\n}\n\n# Detect if there is an app actively making a display sleep assertion, e.g.\n# KeyNote, PowerPoint, Zoom, or Webex.\n# See: https://developer.apple.com/documentation/iokit/iopmlib_h/iopmassertiontypes\nhasDisplaySleepAssertion() {\n    # Get the names of all apps with active display sleep assertions\n    local apps=\"$(/usr/bin/pmset -g assertions | /usr/bin/awk '/NoDisplaySleepAssertion | PreventUserIdleDisplaySleep/ && match($0,/\\(.+\\)/) && ! /coreaudiod/ {gsub(/^.*\\(/,\"\",$0); gsub(/\\).*$/,\"\",$0); print};')\"\n\n    if [[ ! \"${apps}\" ]]; then\n        # No display sleep assertions detected\n        return 1\n    fi\n\n    # Create an array of apps that need to be ignored\n    local ignore_array=(\"${(@s/,/)IGNORE_DND_APPS}\")\n\n    for app in ${(f)apps}; do\n        if (( ! ${ignore_array[(Ie)${app}]} )); then\n            # Relevant app with display sleep assertion detected\n            printlog \"Display sleep assertion detected by ${app}.\"\n            return 0\n        fi\n    done\n\n    # No relevant display sleep assertion detected\n    return 1\n}\n\n\ninitNamedPipe() {\n    # create or delete a named pipe\n    # commands are \"create\" or \"delete\"\n\n    local cmd=$1\n    local pipe=$2\n    case $cmd in\n        \"create\")\n            if [[ -e $pipe ]]; then\n                rm $pipe\n            fi\n            # make named pipe\n            mkfifo -m 644 $pipe\n            ;;\n        \"delete\")\n            # clean up\n            rm $pipe\n            ;;\n        *)\n            ;;\n    esac\n}\n\nreadDownloadPipe() {\n    # reads from a previously created named pipe\n    # output from curl with --progress-bar. % downloaded is read in and then sent to the specified log file\n    local pipe=$1\n    local log=${2:-$DIALOG_CMD_FILE}\n    # set up read from pipe\n    while IFS= read -k 1 -u 0 char; do\n        if [[ $char =~ [0-9] ]]; then\n            keep=1\n        fi\n\n        if [[ $char == % ]]; then\n            updateDialog $progress \"Downloading...\"\n            progress=\"\"\n            keep=0\n        fi\n\n        if [[ $keep == 1 ]]; then\n            progress=\"$progress$char\"\n        fi\n    done < $pipe\n}\n\nreadPKGInstallPipe() {\n    # reads from a previously created named pipe\n    # output from installer with -verboseR. % install status is read in and then sent to the specified log file\n    local pipe=$1\n    local log=${2:-$DIALOG_CMD_FILE}\n    local appname=${3:-$name}\n\n    while read -k 1 -u 0 char; do\n        if [[ $char == % ]]; then\n            keep=1\n        fi\n        if [[ $char =~ [0-9] && $keep == 1 ]]; then\n            progress=\"$progress$char\"\n        fi\n        if [[ $char == . && $keep == 1 ]]; then\n            updateDialog $progress \"Installing...\"\n            progress=\"\"\n            keep=0\n        fi\n    done < $pipe\n}\n\nkillProcess() {\n    # will silently kill the specified PID\n    builtin kill $1 2>/dev/null\n}\n\nupdateDialog() {\n    local state=$1\n    local message=$2\n    local listitem=${3:-$DIALOG_LIST_ITEM_NAME}\n    local cmd_file=${4:-$DIALOG_CMD_FILE}\n    local progress=\"\"\n\n    if [[ $state =~ '^[0-9]' \\\n       || $state == \"reset\" \\\n       || $state == \"increment\" \\\n       || $state == \"complete\" \\\n       || $state == \"indeterminate\" ]]; then\n        progress=$state\n    fi\n\n    # when to cmdfile is set, do nothing\n    if [[ $cmd_file == \"\" ]]; then\n        return\n    fi\n\n    if [[ $listitem == \"\" ]]; then\n        # no listitem set, update main progress bar and progress text\n        if [[ $progress != \"\" ]]; then\n            echo \"progress: $progress\" >> $cmd_file\n        fi\n        if [[ $message != \"\" ]]; then\n            echo \"progresstext: $message\" >> $cmd_file\n        fi\n    else\n        # list item has a value, so we update the progress and text in the list\n        if [[ $progress != \"\" ]]; then\n            echo \"listitem: title: $listitem, statustext: $message, progress: $progress\" >> $cmd_file\n        else\n            echo \"listitem: title: $listitem, statustext: $message, status: $state\" >> $cmd_file\n        fi\n    fi\n}\n\n# NOTE: check minimal macOS requirement\nautoload is-at-least\n\ninstalledOSversion=$(sw_vers -productVersion)\nif ! is-at-least 10.14 $installedOSversion; then\n    printlog \"Installomator requires at least macOS 10.14 Mojave.\" ERROR\n    exit 98\nfi\n\n\n# MARK: argument parsing\nif [[ $# -eq 0 ]]; then\n    if [[ -z $label ]]; then # check if label is set inside script\n        printlog \"no label provided, printing labels\" REQ\n        grep -E '^[a-z0-9\\_-]*(\\)|\\|\\\\)$' \"$0\" | tr -d ')|\\' | grep -v -E '^(broken.*|longversion|version|valuesfromarguments)$' | sort\n        #grep -E '^[a-z0-9\\_-]*(\\)|\\|\\\\)$' \"${labelFile}\" | tr -d ')|\\' | grep -v -E '^(broken.*|longversion|version|valuesfromarguments)$' | sort\n        exit 0\n    fi\nelif [[ $1 == \"/\" ]]; then\n    # jamf uses sends '/' as the first argument\n    printlog \"shifting arguments for Jamf\" REQ\n    shift 3\nfi\n\n# first argument is the label\nlabel=$1\n\n# lowercase the label\nlabel=${label:l}\n\n# separate check for 'version' in order to print plain version number without any other information\nif [[ $label == \"version\" ]]; then\n    echo \"$VERSION\"\n    exit 0\nfi\n\n# MARK: Logging\nlog_location=\"/private/var/log/Installomator.log\"\n\n# Check if we're in debug mode, if so then set logging to DEBUG, otherwise default to INFO\n# if no log level is specified.\nif [[ $DEBUG -ne 0 ]]; then\n    LOGGING=DEBUG\nelif [[ -z $LOGGING ]]; then\n    LOGGING=INFO\n    datadogLoggingLevel=INFO\nfi\n\n# Associate logging levels with a numerical value so that we are able to identify what\n# should be removed. For example if the LOGGING=ERROR only printlog statements with the\n# level REQ and ERROR will be displayed. LOGGING=DEBUG will show all printlog statements.\n# If a printlog statement has no level set it's automatically assigned INFO.\n\ndeclare -A levels=(DEBUG 0 INFO 1 WARN 2 ERROR 3 REQ 4)\n\n# If we are able to detect an MDM URL (Jamf Pro) or another identifier for a customer/instance we grab it here, this is useful if we're centrally logging multiple MDM instances.\nif [[ -f /Library/Preferences/com.jamfsoftware.jamf.plist ]]; then\n    mdmURL=$(defaults read /Library/Preferences/com.jamfsoftware.jamf.plist jss_url)\nelif [[ -n \"$MDMProfileName\" ]]; then\n    mdmURL=$(sudo profiles show | grep -A3 \"$MDMProfileName\" | sed -n -e 's/^.*organization: //p')\nelse\n    mdmURL=\"Unknown\"\nfi\n\n# Generate a session key for this run, this is useful to idenify streams when we're centrally logging.\nSESSION=$RANDOM\n\n# MARK: START\nprintlog \"################## Start Installomator v. $VERSION, date $VERSIONDATE\" REQ\nprintlog \"################## Version: $VERSION\" INFO\nprintlog \"################## Date: $VERSIONDATE\" INFO\nprintlog \"################## $label\" INFO\n\n# Check for DEBUG mode\nif [[ $DEBUG -gt 0 ]]; then\n    printlog \"DEBUG mode $DEBUG enabled.\" DEBUG\nfi\n\n# How we get version number from app\nif [[ -z $versionKey ]]; then\n    versionKey=\"CFBundleShortVersionString\"\nfi\n\n# get current user\ncurrentUser=$(scutil <<< \"show State:/Users/ConsoleUser\" | awk '/Name :/ { print $3 }')\n\n# NOTE: check for root\nif [[ \"$(whoami)\" != \"root\" && \"$DEBUG\" -eq 0 ]]; then\n    # not running as root\n    cleanupAndExit 6 \"not running as root, exiting\" ERROR\nfi\n\n# check Swift Dialog presence and version\nDIALOG_CMD=\"/usr/local/bin/dialog\"\n\nif [[ ! -x $DIALOG_CMD ]]; then\n    # Swift Dialog is not installed, clear cmd file variable to ignore\n    printlog \"SwiftDialog is not installed, clear cmd file var\"\n    DIALOG_CMD_FILE=\"\"\nfi\n\n# MARK: labels in case statement\ncase $label in\nlongversion)\n    # print the script version\n    printlog \"Installomater: version $VERSION ($VERSIONDATE)\" REQ\n    exit 0\n    ;;\nvaluesfromarguments)\n    # no action necessary, all values should be provided in arguments\n    ;;\n\n# label descriptions start here\n1password7)\n    name=\"1Password 7\"\n    type=\"pkg\"\n    downloadURL=\"https://app-updates.agilebits.com/download/OPM7\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[0-9a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"2BUA8C4S2C\"\n    blockingProcesses=( \"1Password Extension Helper\" \"1Password 7\" \"1Password (Safari)\" \"1PasswordNativeMessageHost\" \"1PasswordSafariAppExtension\" )\n    #forcefulQuit=YES\n    ;;\n1password8)\n    name=\"1Password\"\n    type=\"pkg\"\n    packageID=\"com.1password.1password\"\n    downloadURL=\"https://downloads.1password.com/mac/1Password.pkg\"\n    relBuildVer=$(curl -s https://releases.1password.com/mac/ | grep \"1Password for Mac\" | grep -v Beta | head -n 1 | grep href | cut -d = -f 3 | cut -d / -f 3)\n    appNewVersion=$(curl -s \"https://releases.1password.com/mac/$relBuildVer/\" | grep \"Updated to\" | cut -d \\> -f 78 | cut -d \\  -f 3)\n    expectedTeamID=\"2BUA8C4S2C\"\n    blockingProcesses=( \"1Password Extension Helper\" \"1Password 7\" \"1Password 8\" \"1Password\" \"1PasswordNativeMessageHost\" \"1PasswordSafariAppExtension\" )\n    #forcefulQuit=YES\n    ;;\n1passwordcli)\n    name=\"1Password CLI\"\n    type=\"pkg\"\n    #packageID=\"com.1password.op\"\n    downloadURL=$(curl -fs https://app-updates.agilebits.com/product_history/CLI2 | grep -m 1 -i op_apple_universal | cut -d'\"' -f 2)\n    appNewVersion=$(echo $downloadURL | sed -E 's/.*\\/[a-zA-Z_]*([0-9.]*)\\..*/\\1/g')\n    appCustomVersion(){ /usr/local/bin/op -v }\n    expectedTeamID=\"2BUA8C4S2C\"\n    ;;\n4kvideodownloader)\n    name=\"4K Video Downloader\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsL \"https://www.4kdownload.com/products/product-videodownloader\" | grep -E -o \"https:\\/\\/dl\\.4kdownload\\.com\\/app\\/4kvideodownloader_.*?.dmg\\?source=website\" | head -1)\"\n    appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*\\/[0-9a-zA-Z]*_([0-9.]*)\\.dmg.*/\\1/g')\n\tversionKey=\"CFBundleVersion\"\n    expectedTeamID=\"GHQ37VJF83\"\n    ;;\n8x8)\n    # credit: #D-A-James from MacAdmins Slack and Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"8x8 Work\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs -L https://support.8x8.com/cloud-phone-service/voice/work-desktop/download-8x8-work-for-desktop | grep -m 1 -o \"https.*dmg\" | sed 's/\\\"//' | awk '{print $1}')\n    # As for appNewVersion, it needs to be checked for newer version than 7.2.4\n    appNewVersion=$(curl -fs -L https://support.8x8.com/cloud-phone-service/voice/work-desktop/download-8x8-work-for-desktop | grep -m 1 -o \"https.*dmg\" | sed 's/\\\"//' | awk '{print $1}' | sed -E 's/.*-v([0-9\\.]*)[-\\.]*.*/\\1/' )\n    expectedTeamID=\"FC967L3QRG\"\n    ;;\nabetterfinderrename11)\n    name=\"A Better Finder Rename 11\"\n    type=\"dmg\"\n    downloadURL=\"https://www.publicspace.net/download/ABFRX11.dmg\"\n    appNewVersion=$(curl -fs \"https://www.publicspace.net/app/signed_abfr11.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"7Y9KW4ND8W\"\n    ;;\nabstract)\n    name=\"Abstract\"\n    type=\"zip\"\n    downloadURL=\"https://api.goabstract.com/releases/latest/download\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"77MZLZE47D\"\n    ;;\nacorn)\n    name=\"Acorn\"\n    type=\"zip\"\n    downloadURL=\"https://flyingmeat.com/download/Acorn.zip\"\n    appNewVersion=\"$(curl -sL https://flyingmeat.com/acorn/releasenotes.html | grep -i 'class=\"releaseTitleT\"' | head -n1 | sed -n 's:.*<div\\(.*\\)>\\(.*\\)</div>.*:\\2:p' | awk '{print $NF}')\"\n    expectedTeamID=\"WZCN9HJ4VP\"\n    ;;\nacroniscyberprotectconnect|\\\nremotix)\n    name=\"Acronis Cyber Protect Connect\"\n    type=\"dmg\"\n    downloadURL=\"https://go.acronis.com/AcronisCyberProtectConnect_ForMac\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | sed -E 's/.*\\/[a-zA-Z]*-[0-9.]*-([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"ZU2TV78AA6\"\n    ;;\nacroniscyberprotectconnectagent|\\\nremotixagent)\n    name=\"Acronis Cyber Protect Connect Agent\"\n    type=\"pkg\"\n    #packageID=\"com.nulana.rxagentmac\"\n    downloadURL=\"https://go.acronis.com/AcronisCyberProtectConnect_AgentForMac\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | sed -E 's/.*\\/[a-zA-Z]*-[0-9.]*-([0-9.]*)\\.pkg/\\1/g')\n    expectedTeamID=\"H629V387SY\"\n    blockingProcesses=( NONE )\n    ;;\nadium)\n    name=\"Adium\"\n    type=\"dmg\"\n    appNewVersion=\"$(curl -sL \"https://adium.im\" | grep -i 'class=\"downloadlink\"' | sed -r 's/.*href=\"([^\"]+).*/\\1/g' | sed -n 's:.*Adium_\\(.*\\).dmg.*:\\1:p')\"\n    downloadURL=\"https://adiumx.cachefly.net/Adium_${appNewVersion}.dmg\"\n    expectedTeamID=\"VQ6ZEL8UD3\"\n    ;;\nadobeacrobatprodc)\n    name=\"Adobe Acrobat Pro DC\"\n    appName=\"Acrobat Distiller.app\"\n    type=\"pkgInDmg\"\n    pkgName=\"Acrobat/Acrobat DC Installer.pkg\"\n    packageID=\"com.adobe.acrobat.DC.viewer.app.pkg.MUI\"\n    downloadURL=\"https://trials.adobe.com/AdobeProducts/APRO/Acrobat_HelpX/osx10/Acrobat_DC_Web_WWMUI.dmg\"\n    expectedTeamID=\"JQ525L2MZD\"\n    blockingProcesses=( \"Acrobat Pro DC\" )\n    Company=\"Adobe\"\n    ;;\nadobeconnect)\n    # credit: Oh4sh0 https://github.com/Oh4sh0\n    # Comment by Søren: I do not know this software.\n    # Looks like it's an Adobe installer in an app, so it will probably not work\n    name=\"AdobeConnectInstaller\"\n    type=\"dmg\"\n    downloadURL=\"http://www.adobe.com/go/ConnectSetupMac\"\n    appNewVersion=$(curl -fs https://helpx.adobe.com/adobe-connect/connect-downloads-updates.html | grep \"Mac\" | grep version | head -1 | sed -E 's/.*\\(version ([0-9\\.]*),.*/\\1/g')\n    expectedTeamID=\"JQ525L2MZD\"\n    ;;\nadobecreativeclouddesktop)\n    name=\"Adobe Creative Cloud\"\n    appName=\"Creative Cloud.app\"\n    type=\"dmg\"\n    if pgrep -q \"Adobe Installer\"; then\n        printlog \"Adobe Installer is running, not a good time to update.\" WARN\n        printlog \"################## End $APPLICATION \\n\\n\" INFO\n        exit 75\n    fi\n    if [[ \"$(arch)\" == \"arm64\" ]]; then\n        downloadURL=$(curl -fs \"https://helpx.adobe.com/download-install/kb/creative-cloud-desktop-app-download.html\" | grep -o 'https.*macarm64.*dmg' | head -1 | cut -d '\"' -f1)\n    else\n        downloadURL=$(curl -fs \"https://helpx.adobe.com/download-install/kb/creative-cloud-desktop-app-download.html\" | grep -o 'https.*osx10.*dmg' | head -1 | cut -d '\"' -f1)\n    fi\n    #appNewVersion=$(curl -fs \"https://helpx.adobe.com/creative-cloud/release-note/cc-release-notes.html\" | grep \"mandatory\" | head -1 | grep -o \"Version *.* released\" | cut -d \" \" -f2)\n    appNewVersion=$(echo $downloadURL | grep -o '[^x]*$' | cut -d '.' -f 1 | sed 's/_/\\./g')\n    targetDir=\"/Applications/Utilities/Adobe Creative Cloud/ACC/\"\n    installerTool=\"Install.app\"\n    CLIInstaller=\"Install.app/Contents/MacOS/Install\"\n    CLIArguments=(--mode=silent)\n    expectedTeamID=\"JQ525L2MZD\"\n    blockingProcesses=( \"Creative Cloud\" )\n    Company=\"Adobe\"\n    ;;\nadobedigitaleditions)\n    name=\"Adobe Digital Editions\"\n    type=\"pkgInDmg\"\n    downloadURL=$(curl -fs https://www.adobe.com/solutions/ebook/digital-editions/download.html | grep dmg | sed -n 's/.*href=\"\\([^\"]*\\)\".*/\\1/p')\n    appNewVersion=$(curl -fs https://www.adobe.com/solutions/ebook/digital-editions/download.html | grep -o 'Adobe Digital Editions.*Installers' | awk -F' ' '{ print $4 }')\n    expectedTeamID=\"JQ525L2MZD\"\n    ;;\nadobereaderdc|\\\nadobereaderdc-install|\\\nadobereaderdc-update)\n    name=\"Adobe Acrobat Reader\"\n    type=\"pkgInDmg\"\n    if [[ -d \"/Applications/Adobe Acrobat Reader DC.app\" ]]; then\n      printlog \"Found /Applications/Adobe Acrobat Reader DC.app - Setting readerPath\" INFO\n      readerPath=\"/Applications/Adobe Acrobat Reader DC.app\"\n      name=\"Adobe Acrobat Reader DC\"\n    elif [[ -d \"/Applications/Adobe Acrobat Reader.app\" ]]; then\n      printlog \"Found /Applications/Adobe Acrobat Reader.app - Setting readerPath\" INFO\n      readerPath=\"/Applications/Adobe Acrobat Reader.app\"\n    fi\n    if ! [[ `defaults read \"$readerPath/Contents/Resources/AcroLocale.plist\"` ]]; then\n      printlog \"Missing locale data, this will cause the updater to fail.  Deleting Adobe Acrobat Reader DC.app and installing fresh.\" INFO\n      rm -Rf \"$readerPath\"\n      unset $readerPath\n    fi\n    if [[ -n $readerPath ]]; then\n      mkdir -p \"/Library/Application Support/Adobe/Acrobat/11.0\"\n      defaults write \"/Library/Application Support/Adobe/Acrobat/11.0/com.adobe.Acrobat.InstallerOverrides.plist\" ReaderAppPath \"$readerPath\"\n      defaults write \"/Library/Application Support/Adobe/Acrobat/11.0/com.adobe.Acrobat.InstallerOverrides.plist\" BreakIfAppPathInvalid -bool false\n      printlog \"Adobe Reader Installed, running updater.\" INFO\n      adobecurrent=$(curl -sL https://armmf.adobe.com/arm-manifests/mac/AcrobatDC/reader/current_version.txt)\n      adobecurrentmod=\"${adobecurrent//.}\"\n      if [[ \"${adobecurrentmod}\" != <-> ]]; then\n        printlog \"Got an invalid response for the Adobe Reader Current Version: ${adobecurrent}\" ERROR\n        printlog \"################## End $APPLICATION \\n\\n\" INFO\n        exit 50\n      fi\n      if pgrep -q \"Acrobat Updater\"; then\n        printlog \"Adobe Acrobat Updater Running, killing it to avoid any conflicts\" INFO\n        killall \"Acrobat Updater\"\n      fi\n      downloadURL=$(echo https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/\"$adobecurrentmod\"/AcroRdrDCUpd\"$adobecurrentmod\"_MUI.dmg)\n      appNewVersion=\"${adobecurrent}\"\n    else\n      printlog \"Changing IFS for Adobe Reader\" INFO\n      SAVEIFS=$IFS\n      IFS=$'\\n'\n      versions=( $( curl -s https://www.adobe.com/devnet-docs/acrobatetk/tools/ReleaseNotesDC/index.html | grep -Eo \"[0-9]+\\.[0-9]+\\.[0-9]+\"| head -n 30) )\n      local version\n      for version in $versions; do\n        version=\"${version//.}\"\n        printlog \"trying version: $version\" INFO\n        local httpstatus=$(curl -X HEAD -s \"https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/${version}/AcroRdrDC_${version}_MUI.dmg\" --write-out \"%{http_code}\")\n        printlog \"HTTP status for Adobe Reader full installer URL https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/${version}/AcroRdrDC_${version}_MUI.dmg is $httpstatus\" DEBUG\n        if [[ \"${httpstatus}\" == \"200\" ]]; then\n          downloadURL=\"https://ardownload2.adobe.com/pub/adobe/reader/mac/AcrobatDC/${version}/AcroRdrDC_${version}_MUI.dmg\"\n          unset httpstatus\n          break\n        fi\n      done\n      unset version\n      IFS=$SAVEIFS\n    fi\n    updateTool=\"/usr/local/bin/RemoteUpdateManager\"\n    updateToolArguments=( --productVersions=RDR )\n    updateToolLog=\"/Users/$currentUser/Library/Logs/RemoteUpdateManager.log\"\n    updateToolLogDateFormat=\"%m/%d/%y %H:%M:%S\"\n    expectedTeamID=\"JQ525L2MZD\"\n    blockingProcesses=( \"Acrobat Pro DC\" \"AdobeAcrobat\" \"AdobeReader\" \"Distiller\" )\n    Company=\"Adobe\"\n    ;;\naffinitydesigner2)\n    name=\"Affinity Designer 2\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://store.serif.com/en-gb/update/macos/designer/2/\" | grep -i -o -E \"https.*\\.dmg.*\\\"\" | sort | tail -n1 | sed 's/.$//' | sed 's/&amp;/\\&/g')\n    appNewVersion=$(curl -fs \"https://store.serif.com/en-gb/update/macos/designer/2/\" | grep -i -o -E \"https.*\\.dmg\" | sort | tail -n1 | tr \"-\" \"\\n\" | grep dmg | sed -E 's/([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"6LVTQB9699\"\n    ;;\naffinityphoto2)\n    name=\"Affinity Photo 2\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://store.serif.com/en-gb/update/macos/photo/2/\" | grep -i -o -E \"https.*\\.dmg.*\\\"\" | sort | tail -n1 | sed 's/.$//' | sed 's/&amp;/\\&/g')\n    appNewVersion=$(curl -fs \"https://store.serif.com/en-gb/update/macos/photo/2/\" | grep -i -o -E \"https.*\\.dmg\" | sort | tail -n1 | tr \"-\" \"\\n\" | grep dmg | sed -E 's/([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"6LVTQB9699\"\n    ;;\naffinitypublisher2)\n    name=\"Affinity Publisher 2\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://store.serif.com/en-gb/update/macos/publisher/2/\" | grep -i -o -E \"https.*\\.dmg.*\\\"\" | sort | tail -n1 | sed 's/.$//' | sed 's/&amp;/\\&/g')\n    appNewVersion=$(curl -fs \"https://store.serif.com/en-gb/update/macos/publisher/2/\" | grep -i -o -E \"https.*\\.dmg\" | sort | tail -n1 | tr \"-\" \"\\n\" | grep dmg | sed -E 's/([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"6LVTQB9699\"\n    ;;\naftermath)\n    name=\"Aftermath\"\n    type=\"pkg\"\n    packageID=\"com.jamf.aftermath\"\n    downloadURL=\"$(downloadURLFromGit jamf aftermath)\"\n    appNewVersion=\"$(versionFromGit jamf aftermath)\"\n    expectedTeamID=\"6PV5YF2UES\"\n    ;;\naircall)\n    # credit: @kris-anderson\n    name=\"Aircall\"\n    type=\"dmg\"\n    downloadURL=\"https://electron.aircall.io/download/osx\"\n    expectedTeamID=\"3ML357Q795\"\n    ;;\nairserver)\n    # credit: AP Orlebeke (@apizz)\n    name=\"AirServer\"\n    type=\"dmg\"\n    downloadURL=\"https://www.airserver.com/download/mac/latest\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"location\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"6C755KS5W3\"\n    ;;\nairtable)\n    name=\"Airtable\"\n    type=\"dmg\"\n    downloadURL=\"https://static.airtable.com/download/AirtableInstaller.dmg\"\n    expectedTeamID=\"E22RZMX62E\"\n    ;;\nairtame)\n    name=\"Airtame\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fs https://airtame.com/download/ | grep -i platform=mac | head -1 | grep -o -i -E \"https.*\" | cut -d '\"' -f1)\"\n    appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i ^location | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\"\n    expectedTeamID=\"4TPSP88HN2\"\n    ;;\nairtamepkg)\n    name=\"Airtame\"\n    type=\"pkg\"\n    packageID=\"com.airtame.airtame-application\"\n    appNewVersion=\"$(curl -fs https://airtame.com/download/ | grep -i platform=mac | head -1 | grep -o -i -E \"https.*\" | cut -d '\"' -f1 | xargs curl -fsIL | grep -i ^location | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\"\n    downloadURL=\"https://airtame-app.b-cdn.net/app/latest/mac/Airtame-${appNewVersion}.pkg\"\n    expectedTeamID=\"4TPSP88HN2\"\n    ;;\naldente)\n    name=\"AlDente\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit davidwernhart AlDente)\n    appNewVersion=$(versionFromGit davidwernhart AlDente)\n    expectedTeamID=\"3WVC84GB99\"\n    ;;\nalephone)\n    name=\"Aleph One\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit Aleph-One-Marathon alephone)\n    appNewVersion=$(versionFromGit Aleph-One-Marathon alephone)\n    expectedTeamID=\"E8K89CXZE7\"\n    ;;\nalfred)\n    # credit: AP Orlebeke (@apizz)\n    name=\"Alfred\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs https://www.alfredapp.com | awk -F '\"' \"/dmg/ {print \\$2}\" | head -1)\n    appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*Alfred_([0-9.]*)_.*/\\1/')\n    appName=\"Alfred 5.app\"\n    expectedTeamID=\"XZZXE9SED4\"\n    ;;\nalttab)\n    name=\"AltTab\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit lwouis alt-tab-macos)\n    appNewVersion=$(versionFromGit lwouis alt-tab-macos)\n    expectedTeamID=\"QXD7GW8FHY\"\n    ;;\namazonchime)\n    # credit: @dvsjr macadmins slack\n    name=\"Amazon Chime\"\n    type=\"dmg\"\n    downloadURL=\"https://clients.chime.aws/mac/latest\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z.\\-]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"94KV3E626L\"\n    ;;\namazoncorretto11jdk)\n    name=\"Amazon Corretto 11 JDK\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"aarch64\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x64\"\n        ;;\n    esac\n    downloadURL=\"https://corretto.aws/downloads/latest/amazon-corretto-11-${cpu_arch}-macos-jdk.pkg\"\n    appNewVersion=\"$(\n        curl -Ls https://raw.githubusercontent.com/corretto/corretto-11/develop/CHANGELOG.md \\\n            | grep \"## Corretto version\" \\\n            | head -n 1 \\\n            | awk '{ print $NF}'\n    )\"\n    expectedTeamID=\"94KV3E626L\"\n    ;;\namazoncorretto17jdk)\n    name=\"Amazon Corretto 17 JDK\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"aarch64\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x64\"\n        ;;\n    esac\n    downloadURL=\"https://corretto.aws/downloads/latest/amazon-corretto-17-${cpu_arch}-macos-jdk.pkg\"\n    appNewVersion=\"$(\n        curl -Ls https://raw.githubusercontent.com/corretto/corretto-17/develop/CHANGELOG.md \\\n            | grep \"## Corretto version\" \\\n            | head -n 1 \\\n            | awk '{ print $NF}'\n    )\"\n    expectedTeamID=\"94KV3E626L\"\n    ;;\namazoncorretto8jdk)\n    name=\"Amazon Corretto 8 JDK\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"aarch64\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x64\"\n        ;;\n    esac\n    downloadURL=\"https://corretto.aws/downloads/latest/amazon-corretto-8-${cpu_arch}-macos-jdk.pkg\"\n    appNewVersion=\"$(\n        curl -Ls https://raw.githubusercontent.com/corretto/corretto-8/develop/CHANGELOG.md \\\n            | grep \"## Corretto version\" \\\n            | head -n 1 \\\n            | awk '{ print $NF}'\n    )\"\n    expectedTeamID=\"94KV3E626L\"\n    ;;\namazonworkspaces)\n    # credit: Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"Workspaces\"\n    type=\"pkg\"\n    downloadURL=\"https://d2td7dqidlhjx7.cloudfront.net/prod/global/osx/WorkSpaces.pkg\"\n    appNewVersion=$(curl -fs https://d2td7dqidlhjx7.cloudfront.net/prod/iad/osx/WorkSpacesAppCast_macOS_20171023.xml | grep -o \"Version*.*<\" | head -1 | cut -d \" \" -f2 | cut -d \"<\" -f1)\n    expectedTeamID=\"94KV3E626L\"\n    ;;\nanaconda)\n    name=\"Anaconda-Navigator\"\n    packageID=\"com.anaconda.io\"\n    type=\"pkg\"\n    if [[ \"$(arch)\" == \"arm64\" ]]; then\n        archiveName=$( curl -sf https://repo.anaconda.com/archive/ | awk '/href=\".*Anaconda.*MacOSX.*arm64.*\\.pkg\"/{gsub(/.*href=\"|\".*/, \"\"); gsub(/.*\\//, \"\"); print; exit}' )\n    else\n        archiveName=$( curl -sf https://repo.anaconda.com/archive/ | awk '/href=\".*Anaconda.*MacOSX.*x86_64.*\\.pkg\"/{gsub(/.*href=\"|\".*/, \"\"); gsub(/.*\\//, \"\"); print; exit}' )\n    fi\n    downloadURL=\"https://repo.anaconda.com/archive/$archiveName\"\n    appNewVersion=$( awk -F'-' '{print $2}' <<< \"$archiveName\" )\n    expectedTeamID=\"Z5788K4JT7\"\n    blockingProcesses=( \"Anaconda-Navigator.app\" )\n    appCustomVersion() {\n        if [ -e \"/Users/$currentUser/opt/anaconda3/bin/conda\" ]; then\n            \"/Users/$currentUser/opt/anaconda3/bin/conda\" list -f ^anaconda$ | awk '/anaconda /{print $2}'\n        fi\n    }\n    updateTool=\"/Users/$currentUser/opt/anaconda3/bin/conda\"\n    updateToolArguments=( install -y anaconda=$appNewVersion )\n    updateToolRunAsCurrentUser=1\n    ;;\nanastasiysextensionmanager)\n    name=\"ExtensionManager\"\n    type=\"zip\"\n    downloadURL=\"https://f000.backblazeb2.com/file/anastasiy-downloads/EM/ExtensionManager.zip\"\n    expectedTeamID=\"D3SBBNFWTC\"\n    ;;\nandroidfiletransfer)\n    name=\"Android File Transfer\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.google.com/dl/androidjumper/mtp/current/AndroidFileTransfer.dmg\"\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\nandroidstudio)\n    name=\"Android Studio\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n\t downloadURL=$(curl -fsL \"https://developer.android.com/studio#downloads\" | grep -i arm.dmg | head -2 | grep -o -i -E \"https.*\" | cut -d '\"' -f1)\n\t appNewVersion=$( echo \"${downloadURL}\" | head -1 | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' )\n    elif [[ $(arch) == i386 ]]; then\n     downloadURL=$(curl -fsL \"https://developer.android.com/studio#downloads\" | grep -i mac.dmg | head -2 | grep -o -i -E \"https.*\" | cut -d '\"' -f1)\n\t appNewVersion=$( echo \"${downloadURL}\" | head -1 | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' )\n\tfi\n    expectedTeamID=\"EQHXZ8M8AV\"\n    blockingProcesses=( androidstudio )\n    ;;\nanydesk)\n    name=\"AnyDesk\"\n    type=\"dmg\"\n    downloadURL=\"https://download.anydesk.com/anydesk.dmg\"\n    appNewVersion=\"$(curl -fs https://anydesk.com/en/downloads/mac-os | grep -i \"d-block\" | grep -E -o \">v[0-9.]* .*MB\" | sed -E 's/.*v([0-9.]*) .*/\\1/g')\"\n    expectedTeamID=\"KU6W3B6JMZ\"\n    ;;\napachedirectorystudio)\n    name=\"ApacheDirectoryStudio\"\n    type=\"dmg\"\n    downloadURL=$( curl -fs https://directory.apache.org/studio/download/download-macosx.html | grep -o 'http[^\"]*downloads[^\"]*ApacheDirectoryStudio[^\"]*.dmg' | head -1 )\n    appNewVersion=$( curl -fs https://directory.apache.org/studio/download/download-macosx.html  | grep -o 'studio/\\([^/]*\\)/ApacheDirectoryStudio' | cut -d'/' -f2 | head -1)\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"2GLGAFWEQD\"\n    ;;\napachenetbeans)\n    name=\"Apache NetBeans\"\n    type=\"pkg\"\n    packageID=\"org.apache.netbeans\"\n    appNewVersion=$(curl -sfL \"https://netbeans.apache.org/\" | xmllint --html --format - 2>/dev/null | grep -A 1 \"<div class=\\\"annotation\\\">Latest release</div>\" | sed '2p;d' | sed 's/<h1>Apache NetBeans //g' | sed 's/<\\/h1>//g' | xargs)\n    downloadURL=\"https://archive.apache.org/dist/netbeans/netbeans-installers/${appNewVersion}/Apache-NetBeans-${appNewVersion}.pkg\"\n    expectedTeamID=\"2GLGAFWEQD\"\n    ;;\napparency)\n    name=\"Apparency\"\n    type=\"dmg\"\n    downloadURL=\"https://www.mothersruin.com/software/downloads/Apparency.dmg\"\n    appNewVersion=$(curl -fs https://mothersruin.com/software/Apparency/data/ApparencyVersionInfo.plist | grep -A1 CFBundleShortVersionString | tail -1 | sed -E 's/.*>([0-9.]*)<.*/\\1/g')\n    expectedTeamID=\"936EB786NH\"\n    ;;\nappcleaner)\n    name=\"AppCleaner\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://freemacsoft.net/appcleaner/Updates.xml | xpath '//rss/channel/item[last()]/enclosure/@url' 2>/dev/null | tr \" \" \"\\n\" | sort | tail -1 | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fsL \"https://freemacsoft.net/appcleaner/Updates.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:shortVersionString' 2>/dev/null  | cut -d '\"' -f 2)\n    expectedTeamID=\"X85ZX835W9\"\n    ;;\napplenyfonts)\n    name=\"Apple New York Font Collection\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://devimages-cdn.apple.com/design/resources/download/NY.dmg\"\n    packageID=\"com.apple.pkg.NYFonts\"\n    expectedTeamID=\"Software Update\"\n    ;;\napplesfarabic)\n    name=\"San Francisco Arabic\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://devimages-cdn.apple.com/design/resources/download/SF-Arabic.dmg\"\n    packageID=\"com.apple.pkg.SFArabicFonts\"\n    expectedTeamID=\"Software Update\"\n    ;;\napplesfcompact)\n    name=\"San Francisco Compact\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://devimages-cdn.apple.com/design/resources/download/SF-Compact.dmg\"\n    packageID=\"com.apple.pkg.SanFranciscoCompact\"\n    expectedTeamID=\"Software Update\"\n    ;;\napplesfmono)\n    name=\"San Francisco Mono\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://devimages-cdn.apple.com/design/resources/download/SF-Mono.dmg\"\n    packageID=\"com.apple.pkg.SFMonoFonts\"\n    expectedTeamID=\"Software Update\"\n    ;;\napplesfpro)\n    name=\"San Francisco Pro\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://devimages-cdn.apple.com/design/resources/download/SF-Pro.dmg\"\n    packageID=\"com.apple.pkg.SanFranciscoPro\"\n    expectedTeamID=\"Software Update\"\n    ;;\napplesfsymbols|\\\nsfsymbols)\n    name=\"SF Symbols\"\n    type=\"pkgInDmg\"\n    downloadURL=$( curl -fs \"https://developer.apple.com/sf-symbols/\" | grep -oe \"https.*Symbols.*\\.dmg\" | head -1 )\n    appNewVersion=$( echo \"$downloadURL\" | sed -E 's/.*SF-Symbols-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"Software Update\"\n    ;;\naquamacs)\n    name=\"Aquamacs\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit aquamacs-emacs aquamacs-emacs)\"\n    appNewVersion=\"$(versionFromGit aquamacs-emacs aquamacs-emacs)\"\n    expectedTeamID=\"DTBC5BX3L9\"\n    ;;\naquaskk)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"aquaskk\"\n    type=\"pkg\"\n    downloadURL=$(downloadURLFromGit codefirst aquaskk)\n    appNewVersion=$(versionFromGit codefirst aquaskk)\n    expectedTeamID=\"FPZK4WRGW7\"\n    ;;\narcbrowser)\nname=\"Arc\"\ntype=\"dmg\"\ndownloadURL=\"https://releases.arc.net/release/Arc-latest.dmg\"\nappNewVersion=\"$(curl -fsIL https://releases.arc.net/release/Arc-latest.dmg | grep -i ^location | sed -E 's/.*-([0-9]+\\.[0-9]+\\.[0-9]+-[0-9]+).*/\\1/')\"\nexpectedTeamID=\"S6N382Y83G\"\n    ;;\narchimate)\n    name=\"Archi\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n      downloadURL=\"https://www.archimatetool.com\"\n      downloadURL+=$(curl -s https://www.archimatetool.com/download/ | grep dmg | sed -n 's/.*href=\"\\([^\"]*\\)\".*/\\1/p' | awk 'NR==2')\n    elif [[ $(arch) == \"i386\" ]]; then\n      downloadURL=\"https://www.archimatetool.com\"\n      downloadURL+=$(curl -s https://www.archimatetool.com/download/ | grep dmg | sed -n 's/.*href=\"\\([^\"]*\\)\".*/\\1/p' | awk 'NR==1')\n    fi\n    appNewVersion=$(echo \"${downloadURL}\" | sed 's/.*\\/downloads\\/index.php?\\/downloads\\/archi\\/\\([^\\/]*\\)\\/Archi-.*/\\1/')\n    expectedTeamID=\"375WT5T296\"\n    ;;\narchiwareb2go)\n    name=\"P5 Workstation\"\n    type=\"pkgInDmg\"\n    packageID=\"com.archiware.presstore\"\n    appNewVersion=$(curl -sf https://www.archiware.com/download-p5 | grep -m 1 \"ARCHIWARE P5 Version\" | sed \"s|.*Version \\(.*\\) -.*|\\\\1|\")\n    downloadURL=$(appNrVersion=`sed 's/[^0-9]//g' <<< $appNewVersion` && echo https://p5-downloads.s3.amazonaws.com/awpst\"$appNrVersion\"-darwin.dmg)\n    pkgName=$(appNrVersion=`sed 's/[^0-9]//g' <<< $appNewVersion` && echo P5-Workstation-\"$appNrVersion\"-Install.pkg)\n    expectedTeamID=\"5H5EU6F965\"\n    # blockingProcesses=( nsd )\n    ;;\narchiwarepst)\n    name=\"P5\"\n    type=\"pkgInDmg\"\n    packageID=\"com.archiware.presstore\"\n    appNewVersion=$(curl -sf https://www.archiware.com/download-p5 | grep -m 1 \"ARCHIWARE P5 Version\" | sed \"s|.*Version \\(.*\\) -.*|\\\\1|\")\n    downloadURL=$(appNrVersion=`sed 's/[^0-9]//g' <<< $appNewVersion` && echo https://p5-downloads.s3.amazonaws.com/awpst\"$appNrVersion\"-darwin.dmg)\n    pkgName=$(appNrVersion=`sed 's/[^0-9]//g' <<< $appNewVersion` && echo P5-\"$appNrVersion\"-Install.pkg)\n    expectedTeamID=\"5H5EU6F965\"\n    # blockingProcesses=( nsd )\n    ;;\narduinoide)\n    name=\"Arduino IDE\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"arduino-ide_[0-9.]*_macOS_arm64.dmg\"\n\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"arduino-ide_[0-9.]*_macOS_64bit.dmg\"\n    fi\n    downloadURL=\"$(downloadURLFromGit arduino arduino-ide)\"\n    appNewVersion=\"$(versionFromGit arduino arduino-ide)\"\n    expectedTeamID=\"7KT7ZWMCJT\"\n    ;;\n\narq7)\n    name=\"Arq7\"\n    type=\"pkg\"\n    packageID=\"com.haystacksoftware.Arq\"\n    downloadURL=\"https://arqbackup.com/download/arqbackup/Arq7.pkg\"\n    appNewVersion=\"$(curl -fs \"https://arqbackup.com\" | grep -io \"version .*[0-9.]*.* for macOS\" | cut -d \">\" -f2 | cut -d \"<\" -f1)\"\n    expectedTeamID=\"48ZCSDVL96\"\n    ;;\nasana)\n    name=\"Asana\"\n    type=\"dmg\"\n    downloadURL=\"https://desktop-downloads.asana.com/darwin_universal/prod/latest/Asana.dmg\"\n    expectedTeamID=\"A679L395M8\"\n    ;;\nasperaconnect)\n    name=\"Aspera Connect\"\n    type=\"pkg\"\n    downloadURL=\"https://d3gcli72yxqn2z.cloudfront.net/downloads/connect/latest/bin/$(curl -fs 'https://www.ibm.com/support/fixcentral/swg/selectFixes?parent=ibm~Other%20software&product=ibm/Other+software/IBM+Aspera+Connect' --data-raw 'showStatus=false' | egrep -o \"ibm-aspera-connect_[0-9.]+_macOS\" | head -n1)_x86_64.pkg\"\n    appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*ibm-aspera-connect_([0-9]+(\\.[0-9]+)*)_macOS.*\\.pkg/\\1/')\n    expectedTeamID=\"PETKK2G752\"\n    ;;\natext)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"aText\"\n    type=\"dmg\"\n    downloadURL=\"https://trankynam.com/atext/downloads/aText.dmg\"\n    expectedTeamID=\"KHEMQ2FD9E\"\n    ;;\natextlegacy)\n     # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n     name=\"aText\"\n     type=\"dmg\"\n     downloadURL=\"https://trankynam.com/atext/downloads/aTextLegacy.dmg\"\n     expectedTeamID=\"KHEMQ2FD9E\"\n     ;;\natlassiancompanion)\n    name=\"Atlassian Companion\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL https://confluence.atlassian.com/display/DOC/Install+Atlassian+Companion | sed -nE 's/.*(https:.*\\.dmg)\\\".*/\\1/p')\n    appNewVersion=$(getJSONValue \"$(curl -fsL https://update-nucleus.atlassian.com/Atlassian-Companion/291cb34fe2296e5fb82b83a04704c9b4/darwin/x64/RELEASES.json)\" \"currentRelease\" )\n    expectedTeamID=\"UPXU4CQZ5P\"\n    ;;\n\naudacity)\n    name=\"Audacity\"\n    type=\"dmg\"\n    archiveName=\"audacity-macOS-[0-9.]*-universal.dmg\"\n    downloadURL=$(downloadURLFromGit audacity audacity)\n    appNewVersion=$(versionFromGit audacity audacity)\n    appCustomVersion(){ defaults read \"/Applications/Audacity.app/Contents/Info.plist\" CFBundleVersion | cut -d '.' -f 1-3 }\n    expectedTeamID=\"AWEYX923UX\"\n    ;;\nauthydesktop)\n    name=\"Authy Desktop\"\n    type=\"dmg\"\n    downloadURL=$(curl -s -w '%{redirect_url}' -o /dev/null \"https://electron.authy.com/download?channel=stable&arch=x64&platform=darwin&version=latest&product=authy\" | sed 's/\\ /%20/g')\n    appNewVersion=\"$(curl -sfL --output /dev/null -r 0-0 \"${downloadURL}\" --remote-header-name --remote-name -w \"%{url_effective}\\n\" | grep -o -E '([a-zA-Z0-9\\_.%-]*)\\.(dmg|pkg|zip|tbz)$' | sed -E 's/.*-([0-9.]*)\\.dmg/\\1/g')\"\n    expectedTeamID=\"9EVH78F4V4\"\n    ;;\nautodeskfusion360admininstall)\n    name=\"Autodesk Fusion 360 Admin Install\"\n    type=\"pkg\"\n    packageID=\"com.autodesk.edu.fusion360\"\n    downloadURL=\"https://dl.appstreaming.autodesk.com/production/installers/Autodesk%20Fusion%20Admin%20Install.pkg\"\n    appNewVersion=$(curl -fs \"https://dl.appstreaming.autodesk.com/production/97e6dd95735340d6ad6e222a520454db/73e72ada57b7480280f7a6f4a289729f/full.json\" | sed -E 's/.*build-version\":\"([[:digit:]]+\\.[[:digit:]]+\\.[[:digit:]]+).*/\\1/g')\n    expectedTeamID=\"XXKJ396S2Y\"\n    appName=\"Autodesk Fusion 360.app\"\n    blockingProcesses=( \"Autodesk Fusion 360\" \"Fusion 360\" )\n    ;;\nautodmg)\n    # credit: Mischa van der Bent (@mischavdbent)\n    name=\"AutoDMG\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit MagerValp AutoDMG)\n    appNewVersion=$(versionFromGit MagerValp AutoDMG)\n    expectedTeamID=\"5KQ3D3FG5H\"\n    ;;\nautomounter)\n    name=\"AutoMounter\"\n    type=\"dmg\"\n    downloadURL=\"https://www.pixeleyes.co.nz/automounter/AutoMounter.dmg\"\n    appNewVersion=\"$( curl -fs https://www.pixeleyes.co.nz/automounter/version )\"\n    versionKey=\"CFBundleShortVersionString\"\n    expectedTeamID=\"UKWABN4MGL\"\n    ;;\nautopkgr)\n    name=\"AutoPkgr\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit lindegroup autopkgr)\n    appNewVersion=$(versionFromGit lindegroup autopkgr)\n    expectedTeamID=\"JVY2ZR6SEF\"\n    ;;\navertouch)\n    name=\"AverTouch\"\n    type=\"zip\"\n    appNewVersion=\"$(curl -s \"https://www.averusa.com/education/support/avertouch\" | xmllint --html --xpath 'substring-after(string(//a[@class=\"dl-avertouch-mac\"]/@href), \"AVerTouch_mac_v\")' - 2> /dev/null | sed 's/\\.zip$//')\"\n    downloadURL=\"https://www.averusa.com/education/downloads/AVerTouch_mac_v${appNewVersion}.zip\"\n    expectedTeamID=\"B6T3WCD59Q\"\n    versionKey=\"CFBundleVersion\"\n    ;;\naviatrix)\n    # credit: Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"Aviatrix VPN Client\"\n    type=\"pkg\"\n    downloadURL=\"https://s3-us-west-2.amazonaws.com/aviatrix-download/AviatrixVPNClient/AVPNC_mac.pkg\"\n    expectedTeamID=\"32953Z7NBN\"\n    ;;\nawscli2)\n    # credit: Bilal Habib (@Pro4TLZZ)\n    name=\"AWSCLI\"\n    type=\"pkg\"\n    packageID=\"com.amazon.aws.cli2\"\n    downloadURL=\"https://awscli.amazonaws.com/AWSCLIV2.pkg\"\n    appNewVersion=$( curl -fs \"https://raw.githubusercontent.com/aws/aws-cli/v2/CHANGELOG.rst\" | grep -i \"CHANGELOG\" -a4 | grep \"[0-9.]\" )\n    expectedTeamID=\"94KV3E626L\"\n    ;;\nawsvpnclient)\n    name=\"AWS VPN Client\"\n    type=\"pkg\"\n    baseURL=\"https://d20adtppz83p9s.cloudfront.net/OSX\"\n    appNewVersion=$(curl -s \"https://docs.aws.amazon.com/vpn/latest/clientvpn-user/client-vpn-user-guide.rss\" | grep -o 'AWS provided client ([0-9]*\\.[0-9]*\\.[0-9]*) for macOS' | head -1 | grep -o '[0-9]*\\.[0-9]*\\.[0-9]*')\n    downloadURL=\"${baseURL}/${appNewVersion}/AWS_VPN_Client.pkg\"\n    expectedTeamID=\"94KV3E626L\"\n    ;;\naxurerp10)\n    name=\"Axure RP 10\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://d3uii9pxdigrx1.cloudfront.net/AxureRP-Setup-arm64.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://d3uii9pxdigrx1.cloudfront.net/AxureRP-Setup.dmg\"\n    fi\n    appNewVersion=$( curl -sL https://www.axure.com/release-history | grep -Eo '[0-9]{1,4}\\.[0-9]{1,4}\\.[0-9]{1,4}\\.[0-9]{1,4}' -m 1 )\n    expectedTeamID=\"HUMW6UU796\"\n    versionKey=\"CFBundleVersion\"\n    appName=\"Axure RP 10.app\"\n    blockingProcesses=( \"Axure RP 10\" )\n    ;;\nbackgroundmusic)\n    name=\"BackgroundMusic\"\n    type=\"pkg\"\n    packageID=\"com.bearisdriving.BGM\"\n    downloadURL=\"$(downloadURLFromGit kyleneideck BackgroundMusic)\"\n    appNewVersion=\"$(versionFromGit kyleneideck BackgroundMusic)\"\n    expectedTeamID=\"PR7PXC66S5\"\n    ;;\nbackgrounds)\n    name=\"Backgrounds\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit SAP backgrounds)\"\n    appNewVersion=\"$(versionFromGit SAP backgrounds)\"\n    expectedTeamID=\"7R5ZEU67FQ\"\n    ;;\n\nbalenaetcher)\n    name=\"balenaEtcher\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit balena-io etcher )\n    appNewVersion=$(versionFromGit balena-io etcher )\n    expectedTeamID=\"66H43P8FRG\"\n    ;;\nbalsamiqwireframes)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Balsamiq Wireframes\"\n    type=\"dmg\"\n    downloadURL=https://builds.balsamiq.com/bwd/$(curl -fs \"https://builds.balsamiq.com\" | awk -F \"<Key>bwd/\" \"/dmg/ {print \\$3}\" | awk -F \"</Key>\" \"{print \\$1}\" | sed \"s/ /%20/g\")\n    expectedTeamID=\"3DPKD72KQ7\"\n    ;;\nbambustudio)\n    name=\"BambuStudio\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit \"bambulab\" \"BambuStudio\")\n    appNewVersion=$(versionFromGit \"bambulab\" \"BambuStudio\")\n    expectedTeamID=\"T3UBR9Y3B2\"\n    ;;\nbartender)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Bartender 4\"\n    type=\"dmg\"\n    downloadURL=\"https://www.macbartender.com/B2/updates/B4Latest/Bartender%204.dmg\"\n    expectedTeamID=\"8DD663WDX4\"\n    ;;\nbasecamp3)\n    name=\"Basecamp 3\"\n    type=\"dmg\"\n    if [[ $(/usr/bin/arch) == \"arm64\" ]]; then \n        downloadURL=\"https://bc3-desktop.s3.amazonaws.com/mac_arm64/basecamp3_arm64.dmg\"\n    else\n        downloadURL=\"https://bc3-desktop.s3.amazonaws.com/mac/basecamp3.dmg\"\n    fi\n    expectedTeamID=\"2WNYUYRS7G\"\n    appName=\"Basecamp 3.app\"\n    ;;\nbaseline-nodaemon)\n    #Baseline by @BigMacAdmin and Second Son Consulting\n    #Use this label if you DO NOT want Baseline to run immediately upon install\n    name=\"Baseline\"\n    type=\"pkg\"\n    archiveName=\"Baseline_NoDaemon_v[0-9.]*.pkg\"\n    downloadURL=$(downloadURLFromGit secondsonconsulting Baseline )\n    expectedTeamID=\"7Q6XP5698G\"\n    ;;\nbaseline)\n    #Baseline by @BigMacAdmin and Second Son Consulting\n    #Use this label if you want Baseline to run immediately upon install\n    name=\"Baseline\"\n    type=\"pkg\"\n    archiveName=\"Baseline_v[0-9.]*.pkg\"\n    downloadURL=$(downloadURLFromGit secondsonconsulting Baseline )\n    expectedTeamID=\"7Q6XP5698G\"\n    ;;\nbbedit)\n    name=\"BBEdit\"\n    type=\"dmg\"\n    downloadURL=$(curl -s https://versioncheck.barebones.com/BBEdit.xml | grep dmg | sort | tail -n1 | cut -d\">\" -f2 | cut -d\"<\" -f1)\n    appNewVersion=$(curl -s https://versioncheck.barebones.com/BBEdit.xml | grep dmg | sort  | tail -n1 | sed -E 's/.*BBEdit_([0-9 .]*)\\.dmg.*/\\1/')\n    expectedTeamID=\"W52GZAXT98\"\n    ;;\nbbeditpkg)\n    name=\"BBEdit\"\n    type=\"pkg\"\n    downloadURL=$(curl -s https://versioncheck.barebones.com/BBEdit.xml | grep dmg | sort | tail -n1 | cut -d\">\" -f2 | cut -d\"<\" -f1 | sed 's/dmg/pkg/')\n    appNewVersion=$(curl -s https://versioncheck.barebones.com/BBEdit.xml | grep dmg | sort  | tail -n1 | sed -E 's/.*BBEdit_([0-9 .]*)\\.dmg.*/\\1/')\n    expectedTeamID=\"W52GZAXT98\"\n    ;;\nbeamstudio)\n    name=\"Beam Studio\"\n    type=\"dmg\"\n    expectedTeamID=\"4Y92JWKV94\"\n    downloadURL=\"$( curl -s \"https://id.flux3dp.com/api/check-update?key=beamstudio-stable\" | tr '\"' '\\n' | grep -m1 dmg )\"\n    appNewVersion=\"$( echo \"$downloadURL\" | cut -d '+' -f 3 | cut -d '.' -f 1-3 )\"\n    ;;\nbetterdisplay)\n    name=\"BetterDisplay\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit waydabber BetterDisplay)\n    appNewVersion=$(versionFromGit waydabber BetterDisplay)\n    expectedTeamID=\"299YSU96J7\"\n    ;;\nbettertouchtool)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"BetterTouchTool\"\n    type=\"zip\"\n    downloadURL=\"https://folivora.ai/releases/BetterTouchTool.zip\"\n    appNewVersion=$(curl -fs https://updates.folivora.ai/bettertouchtool_release_notes.html | grep BetterTouchTool | head -n 2 | tail -n 1 | sed -E 's/.* ([0-9\\.]*) .*/\\1/g')\n    expectedTeamID=\"DAFVSXZ82P\"\n    ;;\nbeyondcomparepro)\n    name=\"Beyond Compare\"\n    type=\"zip\"\n    downloadURL=\"https://www.scootersoftware.com\"$(curl -fsL 'https://www.scootersoftware.com/download' | sed -nE 's/.*\"(.*OSX-[^\"]*)\".*/\\1/p')\n    appNewVersion=$( grep -oE '(\\d+\\.){2}(\\d+)' <<< $downloadURL )\n    expectedTeamID=\"BS29TEJF86\"\n    ;;\nbibdesk)\n    name=\"BibDesk\"\n    type=\"dmg\"\n    html_page_source=$(curl -sL https://bibdesk.sourceforge.io)\n    downloadURL=\"$(echo $html_page_source | grep -i \"current version\" | grep -o 'href=\"[^\"]*' | head -1 | awk -F '=\"' '{print $NF}')\"\n    appNewVersion=\"$(echo $html_page_source | grep -i \"current version\" | sed -n 's:.*BibDesk-\\(.*\\).dmg.*:\\1:p')\"\n    expectedTeamID=\"J33JTA7SY9\"\n    ;;\nbitrix24)\n     name=\"Bitrix24\"\n     type=\"dmg\"\n     archiveName=\"bitrix24_desktop.dmg\"\n     downloadURL=\"https://dl.bitrix24.com/b24/bitrix24_desktop.dmg\"\n     expectedTeamID=\"5B3T3A994N\"\n     blockingProcesses=( \"Bitrix24\" )\n     ;;\nbitwarden)\n    name=\"Bitwarden\"\n    type=\"dmg\"\n    appNewVersion=$(curl -s \"https://github.com/bitwarden/clients/releases?q\\=desktop\" | xmllint --html --xpath 'substring-after(string(//h2[starts-with(text(),\"Desktop v\")]), \" v\")' - 2>/dev/null)\n    downloadURL=\"https://github.com/bitwarden/clients/releases/download/desktop-v${appNewVersion}/Bitwarden-${appNewVersion}-universal.dmg\"\n    expectedTeamID=\"LTZ2PFU5D6\"\n    ;;\nbitwigstudio)\n    name=\"Bitwig Studio\"\n    type=\"dmg\"\n    appNewVersion=\"$(curl -fs \"https://www.bitwig.com/download/\" | grep 'changelog' | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/')\"\n    downloadURL=\"https://www.bitwig.com/dl/Bitwig%20Studio/${appNewVersion}/installer_mac/\"\n    expectedTeamID=\"2B6K987585\"\n    ;;\nblender)\n    name=\"Blender\"\n    type=\"dmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    baseVersion=$(curl -sf https://ftp.nluug.nl/pub/graphics/blender/release/ | grep -o 'Blender[0-9]\\+\\.[0-9]\\+' | cut -d 'r' -f 2 | sort -V | tail -1)\n    if [[ $(arch) == \"arm64\" ]]; then\n        appNewVersion=$(curl -sf https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/ | grep -o 'blender-[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+-macos-arm64\\.dmg' | sort -V | tail -1 | sed -E 's/[^0-9]*([0-9]+\\.[0-9]+\\.[0-9]+).*/\\1/' )\n        archiveName=$(curl -sf \"https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/\"| grep -o 'blender-[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+-macos-arm64\\.dmg' | sort -V | tail -1)\n        downloadURL=\"https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/$archiveName\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        appNewVersion=$(curl -sf https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/ | grep -o 'blender-[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+-macos-x64\\.dmg' | sort -V | tail -1 | sed -E 's/[^0-9]*([0-9]+\\.[0-9]+\\.[0-9]+).*/\\1/' )\n        archiveName=$(curl -sf \"https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/\" | grep -o 'blender-[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+-macos-x64\\.dmg' | sort -V | tail -1)\n        downloadURL=\"https://ftp.nluug.nl/pub/graphics/blender/release/Blender$baseVersion/$archiveName\"\n    fi\n    expectedTeamID=\"68UA947AUU\"\n    ;;\nbluejeans)\n    name=\"BlueJeans\"\n    type=\"pkg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=$(curl -fs \"https://www.bluejeans.com/downloads\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*BlueJeans.*Installer.*arm.*.pkg\" )\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=$(curl -fs \"https://www.bluejeans.com/downloads\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*BlueJeansInstaller.*x86.*.dmg\" | sed 's/dmg/pkg/g')\n    fi\n    appNewVersion=$(echo $downloadURL | cut -d '/' -f6)\n    expectedTeamID=\"HE4P42JBGN\"\n    ;;\nbluejeanswithaudiodriver)\n    name=\"BlueJeans\"\n    type=\"pkg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=$(curl -fs \"https://www.bluejeans.com/downloads\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*BlueJeans.*Installer.*arm.*.pkg\" )\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=$(curl -fs \"https://www.bluejeans.com/downloads\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*BlueJeansInstaller.*x86.*.dmg\" | sed 's/dmg/pkg/g')\n    fi\n    appNewVersion=$(echo $downloadURL | cut -d '/' -f6)\n    choiceChangesXML='<?xml version=\"1.0\" encoding=\"UTF-8\"?><!DOCTYPE plist PUBLIC \"-//Apple//DTD PLIST 1.0//EN\" \"http://www.apple.com/DTDs/PropertyList-1.0.dtd\"><plist version=\"1.0\"><array><dict><key>attributeSetting</key><integer>1</integer><key>choiceAttribute</key><string>selected</string><key>choiceIdentifier</key><string>com.tatvikmohit.BlueJeans-Audio</string></dict></array></plist>'\n    expectedTeamID=\"HE4P42JBGN\"\n    ;;\nboop)\n    name=\"Boop\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit IvanMathy Boop)\n    appNewVersion=$(versionFromGit IvanMathy Boop)\n    expectedTeamID=\"RLZ8XBTX7G\"\n    ;;\nboxdrive)\n    name=\"Box\"\n    type=\"pkg\"\n    downloadURL=\"https://e3.boxcdn.net/desktop/releases/mac/BoxDrive.pkg\"\n    expectedTeamID=\"M683GB7CPW\"\n    ;;\nboxsync)\n    name=\"Box Sync\"\n    type=\"dmg\"\n    downloadURL=\"https://e3.boxcdn.net/box-installers/sync/Sync+4+External/Box%20Sync%20Installer.dmg\"\n    expectedTeamID=\"M683GB7CPW\"\n    ;;\nboxtools)\n    name=\"Box Tools\"\n    type=\"pkg\"\n    downloadURL=\"https://box-installers.s3.amazonaws.com/boxedit/mac/currentrelease/BoxToolsInstaller.pkg\"\n    packageID=\"com.box.boxtools.installer.boxedit\"\n    expectedTeamID=\"M683GB7CPW\"\n    ;;\nadobebrackets|\\\nbracketsio)\n    name=\"Brackets\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit brackets-cont brackets )\n    appNewVersion=$(versionFromGit brackets-cont brackets )\n    expectedTeamID=\"JQ525L2MZD\"\n    ;;\nbrave)\n    name=\"Brave Browser\"\n    type=\"dmg\"\n    if [[ $(arch) != \"i386\" ]]; then\n        printlog \"Architecture: arm64 (not i386)\"\n        downloadURL=$(curl -fsIL https://laptop-updates.brave.com/latest/osxarm64/release | grep -i \"^location\" | sed -E 's/.*(https.*\\.dmg).*/\\1/g')\n        appNewVersion=\"$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable-arm64/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:version' 2>/dev/null  | cut -d '\"' -f 2)\"\n        #appNewVersion=\"96.$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable-arm64/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:shortVersionString' 2>/dev/null  | cut -d '\"' -f 2 | cut -d \".\" -f1-3)\"\n    else\n        printlog \"Architecture: i386\"\n        downloadURL=$(curl -fsIL https://laptop-updates.brave.com/latest/osx/release | grep -i \"^location\" | sed -E 's/.*(https.*\\.dmg).*/\\1/g')\n        appNewVersion=\"$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:version' 2>/dev/null  | cut -d '\"' -f 2)\"\n        #appNewVersion=\"96.$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:shortVersionString' 2>/dev/null  | cut -d '\"' -f 2 | cut -d \".\" -f1-3)\"\n    fi\n    versionKey=\"CFBundleVersion\"\n#    downloadURL=$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    expectedTeamID=\"KL8N8XSYF4\"\n    ;;\nbravepkg)\n    name=\"Brave Browser\"\n    type=\"pkg\"\n    downloadURL=\"https://referrals.brave.com/latest/Brave-Browser.pkg\" # Universal\n        # https://referrals.brave.com/latest/Brave-Browser-arm64.pkg - ARM64\n    appNewVersion=\"$(curl -fsL \"https://updates.bravesoftware.com/sparkle/Brave-Browser/stable/appcast.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:version' 2>/dev/null  | cut -d '\"' -f 2)\"\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"KL8N8XSYF4\"\n    ;;\nbrosix)\n    name=\"Brosix\"\n    type=\"pkg\"\n    downloadURL=\"https://www.brosix.com/downloads/builds/official/Brosix.pkg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"TA6P23NW8H\"\n    ;;\nbruno)\n    # https://github.com/usebruno/bruno; https://www.usebruno.com/\n    name=\"Bruno\"\n    type=\"dmg\"\n    if [[ $(arch) == “arm64” ]]; then\n        archiveName=\"bruno_[0-9.]*_arm64_mac.dmg\"\n    elif [[ $(arch) == “i386” ]]; then\n        archiveName=\"bruno_[0-9.]*_x64_mac.dmg\"\n    fi\n    downloadURL=\"$(downloadURLFromGit usebruno bruno)\"\n    appNewVersion=\"$(versionFromGit usebruno bruno)\"\n    expectedTeamID=\"W7LPPWA48L\"\n    ;;\nbugdom)\n    name=\"Bugdom\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit jorio Bugdom)\n    appNewVersion=$(versionFromGit jorio Bugdom)\n    expectedTeamID=\"RVNL7XC27G\"\n    ;;\nburpsuitecommunityedition)\n    name=\"Burp Suite Community Edition\"\n    type=\"dmg\"\n    appNewVersion=$(curl -s https://portswigger.net/burp/releases | grep 'releases/professional-community' | head -n 1 | sed 's/.*href=\"//' | sed 's/\".*//' | cut -d '/' -f4 | cut -d '-' -f3-6 | sed -r 's/-/./g')\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://portswigger.net/burp/releases/startdownload/?product=community&version&=\"$appNewVersion\"&type=macosarm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://portswigger.net/burp/releases/startdownload/?product=community&version&=\"$appNewVersion\"&type=macosx\"\n    fi\n    expectedTeamID=\"N82YM748DZ\"\n    ;;\nburpsuiteprofessional)\n    name=\"Burp Suite Professional\"\n    type=\"dmg\"\n    appNewVersion=$(curl -s https://portswigger.net/burp/releases | grep 'releases/professional-community' | head -n 1 | sed 's/.*href=\"//' | sed 's/\".*//' | cut -d '/' -f4 | cut -d '-' -f3-6 | sed -r 's/-/./g')\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://portswigger.net/burp/releases/startdownload/?product=pro&version&=\"$appNewVersion\"&type=macosarm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://portswigger.net/burp/releases/startdownload/?product=pro&version&=\"$appNewVersion\"&type=macosx\"\n    fi\n    expectedTeamID=\"N82YM748DZ\"\n    ;;\nbuttercup)\n    name=\"Buttercup\"\n    type=\"zip\"\n\tarchiveName=\"Buttercup-[0-9.]*-mac.zip\"\n\tdownloadURL=$(downloadURLFromGit buttercup buttercup-desktop)\n    appNewVersion=$(versionFromGit buttercup buttercup-desktop)\n    expectedTeamID=\"9D8F4J769D\"\n    ;;\ncaffeine)\n    name=\"Caffeine\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit IntelliScape caffeine)\n    appNewVersion=$(versionFromGit IntelliScape caffeine)\n    expectedTeamID=\"YD6LEYT6WZ\"\n    blockingProcesses=( Caffeine )\n    ;;\ncakebrew)\n    name=\"Cakebrew\"\n    type=\"zip\"\n    downloadURL=$(curl -fsL \"https://www.cakebrew.com/appcast/profileInfo.php\" | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    appNewVersion=$( curl -fsL \"https://www.cakebrew.com/appcast/profileInfo.php\" | xpath '//rss/channel/item[1]/enclosure/@sparkle:shortVersionString' 2>/dev/null | cut -d '\"' -f 2 )\n    expectedTeamID=\"R85D3K8ATT\"\n    ;;\ncalcservice)\n    name=\"CalcService\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" \"https://www.devontechnologies.com/support/download\" | tr '\"' \"\\n\" | grep -o \"http.*download.*.zip\" | grep -i calcservice | head -1)\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*\\/([0-9.]*)\\/.*/\\1/g')\"\n    expectedTeamID=\"679S2QUWR8\"\n    ;;\ncalibre)\n    # credit: Drew Diver (@grumpydrew on MacAdmins Slack)\n    name=\"calibre\"\n    type=\"dmg\"\n    downloadURL=\"https://calibre-ebook.com/dist/osx\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    #Maybe change to GitHub for this title. Looks like 5.28.0 release is the first to also release a binary, so maybe see what the next release will be to decide if we should switch.\n    #downloadURL=$(downloadURLFromGit kovidgoyal calibre )\n    #appNewVersion=$(versionFromGit kovidgoyal calibre )\n    #archiveName=\"OS X dmg\"\n    expectedTeamID=\"NTY7FVCEKP\"\n    ;;\ncalibriteprofiler)\n    name=\"calibrite PROFILER\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit LUMESCA calibrite-profiler-releases)\"\n    appNewVersion=\"$(versionFromGit LUMESCA calibrite-profiler-releases)\"\n    expectedTeamID=\"5C392763F5\"\n    ;;\ncamostudio)\n    name=\"Camo Studio\"\n    type=\"zip\"\n    downloadURL=\"https://reincubate.com/res/labs/camo/camo-macos-latest.zip\"\n    #appNewVersion=$(curl -s -L  https://reincubate.com/support/camo/release-notes/ | grep -m2 \"has-m-t-0\" | head -1 | cut -d \">\" -f2 | cut -d \" \" -f1)\n    appNewVersion=$( curl -fs \"https://uds.reincubate.com/release-notes/camo/\" | head -1 | cut -d \",\" -f3 | grep -o -e \"[0-9.]*\" )\n    # Camo Studio will ask for admin permissions to install som plug-ins. that has not been handled.\n    expectedTeamID=\"Q248YREB53\"\n    ;;\ncamtasia2019)\n    name=\"Camtasia 2019\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Camtasia (Mac) 2019\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Camtasia (Mac) 2019\" | sed -e 's/.*Camtasia (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ncamtasia2020)\n    name=\"Camtasia 2020\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Camtasia (Mac) 2020\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Camtasia (Mac) 2020\" | sed -e 's/.*Camtasia (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ncamtasia2021)\n    name=\"Camtasia 2021\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Camtasia (Mac) 2021\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Camtasia (Mac) 2021\" | sed -e 's/.*Camtasia (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ncamtasia2022)\n    name=\"Camtasia 2022\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Camtasia (Mac) 2022\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Camtasia (Mac) 2022\" | sed -e 's/.*Camtasia (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ncamtasia|\\\ncamtasia2023)\n    name=\"Camtasia 2023\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Camtasia (Mac) 2023\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Camtasia (Mac) 2023\" | sed -e 's/.*Camtasia (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ncamunda)\n    name=\"Camunda Modeler\"\n    type=\"dmg\"\n    downloadURL=$(curl -s https://camunda.com/download/modeler/ | grep dmg | sed -n 's/.*href=\"\\([^\"]*\\)\".*/\\1/p')\n    appNewVersion=$(echo \"${downloadURL}\" | sed 's/.*release\\/camunda-modeler\\/\\([^\\/]*\\)\\/camunda-modeler-.*/\\1/')\n    expectedTeamID=\"3JVGD57JQZ\"\n    ;;\ncanva)\n    name=\"Canva\"\n    type=\"dmg\"\n        downloadURL=https://desktop-release.canva.com/Canva-latest.dmg\n        appNewVersion=$( curl -fsLI -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -H \"accept-encoding: gzip, deflate, br\" -H \"Referrer Policy: strict-origin-when-cross-origin\" -H \"upgrade-insecure-requests: 1\" -H \"sec-fetch-dest: document\" -H \"sec-gpc: 1\" -H \"sec-fetch-user: ?1\" -H \"accept-language: en-US,en;q=0.9\" -H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\" -H \"sec-fetch-mode: navigate\" \"https://www.canva.com/download/mac/intel/canva-desktop/\" | grep -i \"^location\" | cut -d \" \" -f2 | tr -d '\\r' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)-*.*\\.dmg/\\1/g' )\n\n    expectedTeamID=\"5HD2ARTBFS\"\n    ;;\ncarboncopycloner)\n    name=\"Carbon Copy Cloner\"\n    type=\"zip\"\n    downloadURL=$(curl -fsIL \"https://bombich.com/software/download_ccc.php?v=latest\" | grep -i ^location | sed -E 's/.*(https.*\\.zip).*/\\1/g')\n    appNewVersion=$(sed -E 's/.*-([0-9.]*)\\.zip/\\1/g' <<< $downloadURL | sed 's/\\.[^.]*$//')\n    expectedTeamID=\"L4F2DED5Q7\"\n    ;;\ncatoclient)\n    name=\"CatoClient\"\n    type=\"pkg\"\n    packageID=\"com.catonetworks.pkg.CatoClient\"\n    downloadURL=\"https://myvpn.catonetworks.com/public/clients/CatoClient.pkg\"\n    appNewVersion=$(curl -Ls -o /dev/null -w %{url_effective} \"${downloadURL}\" | sed -E 's/.*\\/([0-9.]*)\\/.*/\\1/g' | awk -F '.' '{print $1 \".\" $2 \".\" $3}')\n    expectedTeamID=\"CKGSB8CH43\"\n    blockingProcesses=( \"CatoClient\" \"CatoClientExtension\" )\n    ;;\ncharles)\n    name=\"Charles\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fs https://www.charlesproxy.com/download/latest-release/ | sed -nE 's/.*version.*value=\"([^\"]*).*/\\1/p')\n    downloadURL=\"https://www.charlesproxy.com/assets/release/$appNewVersion/charles-proxy-$appNewVersion.dmg\"\n    expectedTeamID=\"9A5PCU4FSD\"\n    ;;\nchatwork)\n     name=\"Chatwork\"\n     type=\"dmg\"\n     downloadURL=\"https://desktop-app.chatwork.com/installer/Chatwork.dmg\"\n     expectedTeamID=\"H34A3H2Y54\"\n     ;;\nchemdoodle|\\\nchemdoodle2d)\n     name=\"ChemDoodle\"\n     type=\"dmg\"\n     [[ $(arch) == \"arm64\" ]] && cpu_arch=\"aarch64\" || cpu_arch=\"x64\"\n     downloadURL=\"https://www.ichemlabs.com$(curl -s -L https://www.ichemlabs.com/download | grep -oE '[^\"]*Doodle-[^\"]*'$cpu_arch'[^\"]*\\.dmg' | head -1)\"\n     expectedTeamID=\"9XP397UW95\"\n     folderName=\"ChemDoodle\"\n     appName=\"${folderName}/ChemDoodle.app\"\n     appNewVersion=$(sed -E 's/.*-(.*).dmg/\\1/g' <<< $downloadURL )\n     versionKey=\"CFBundleVersion\"\n     ;;\nchemdoodle3d)\n     name=\"ChemDoodle3D\"\n     type=\"dmg\"\n     [[ $(arch) == \"arm64\" ]] && cpu_arch=\"aarch64\" || cpu_arch=\"x64\"\n     downloadURL=\"https://www.ichemlabs.com$(curl -s -L https://www.ichemlabs.com/download | grep -oE '[^\"]*Doodle3D-[^\"]*'$cpu_arch'[^\"]*\\.dmg' | head -1)\"\n     expectedTeamID=\"9XP397UW95\"\n     folderName=\"ChemDoodle3D\"\n     appName=\"${folderName}/ChemDoodle3D.app\"\n     appNewVersion=$(sed -E 's/.*-(.*).dmg/\\1/g' <<< $downloadURL )\n     versionKey=\"CFBundleVersion\"\n     ;;\ncherryaudioatomika)\n    name=\"Atomika\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.AtomikaPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/atomika-synthesizer/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/atomika-synthesizer-macos-installer?file=Atomika-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioblue3)\n    name=\"Blue3 Organ\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Blue3Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/blue3-tonewheel-organ/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/blue3-tonewheel-organ-macos-installer?file=Blue3-Organ-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioca2600)\n    name=\"CA2600\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.CA2600Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/ca2600/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/ca2600-macos-installer?file=CA2600-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiochroma)\n    name=\"Chroma\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.ChromaPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/chroma/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/chroma-macos-installer?file=Chroma-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiocr78)\n    name=\"CR-78\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.CR-78Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/cr-78/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/cr-78-macos-installer?file=CR-78-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiodco106)\n    name=\"DCO-106\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.DCO106Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/dco-106/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/dco-106-macos-installer?file=DCO-106-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiodreamsynth)\n    name=\"Dreamsynth\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.DreamsynthPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/dreamsynth/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/dreamsynth-macos-installer?file=Dreamsynth-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioeightvoice)\n    name=\"Eight Voice\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.EightVoicePackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/eight-voice/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/eight-voice-macos-installer?file=Eight-Voice-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioelkax)\n    name=\"Elka-X\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Elka-XPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/elka-x/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/elka-x-macos-installer?file=Elka-X-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiogalacticreverb)\n    name=\"Galactic Reverb\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.GalacticPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/galactic-reverb/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/galactic-reverb-macos-installer?file=Galactic-Reverb-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiogx80)\n    name=\"GX-80\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.GX-80Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/gx-80/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/gx-80-macos-installer?file=GX-80-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioharmonia)\n    name=\"Harmonia\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.HarmoniaPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/harmonia/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/harmonia-macos-installer?file=Harmonia-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiolowdown)\n    name=\"Lowdown\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.LowdownPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/lowdown/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/lowdown-macos-installer?file=Lowdown-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiomemorymode)\n    name=\"Memorymode\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.MemorymodePackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/memorymode/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/memorymode-macos-installer?file=Memorymode-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiomercury4)\n    name=\"Mercury-4\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Mercury-4Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/mercury-4/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/mercury-4-macos-installer?file=Mercury-4-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiomercury6)\n    name=\"Mercury-6\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Mercury-6Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/mercury-6/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/mercury-6-macos-installer?file=Mercury-6-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiominiverse)\n    name=\"Miniverse\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.MiniversePackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/miniverse/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/miniverse-macos-installer?file=Miniverse-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiomoduledesigner)\n    name=\"Voltage Module Designer\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.VoltageModuleDesigner\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/voltage-module-designer/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/module-designer-mac/download?file=Voltage-Module-Designer-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudionovachord)\n    name=\"Novachord\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.NovachordPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/novachord-solovox/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/novachord-macos-installer?file=Novachord-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiooctavecat)\n    name=\"Octave Cat\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.OctaveCatPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/octave-cat/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/octave-cat-macos-installer?file=Octave-Cat-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiopolymode)\n    name=\"Polymode Synthesizer\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.PolymodePackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/polymode-synthesizer/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/polymode-synthesizer-macos-installer?file=Polymode-Synthesizer-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioprosoloist)\n    name=\"Pro Soloist\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.ProSoloistPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/pro-soloist/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/pro-soloist-macos-installer?file=Pro-Soloist-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiops20)\n    name=\"PS-20\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.PS-20Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/ps-20/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/ps-20-macos-installer?file=PS-20-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiops3300)\n    name=\"PS-3300\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.PS-3300Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/ps-3300/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/ps-3300-macos-installer?file=PS-3300-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudioquadra)\n    name=\"Quadra\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.QuadraPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/quadra/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/quadra-macos-installer?file=Quadra-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiorackmode)\n    name=\"Rackmode\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.RackmodePackage-StandAlone\"\n    blockingProcesses=( \"Rackmode Frequency Shifter\" \"Rackmode Graphic EQ\" \"Rackmode Parametric EQ\" \"Rackmode Phaser\" \"Rackmode Ring Modulator\" \"Rackmode String Filter\" \"Rackmode Vocoder\" \"Rackmode Vocoder FX\" )\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/rackmode/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/rackmode-macos-installer?file=Rackmode-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiosines)\n    name=\"Sines\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.SinesPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/sines/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/sines-macos-installer?file=Sines-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiosolovox)\n    name=\"Solovox\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.SolovoxPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs curl -fs https://cherryaudio.com/products/novachord-solovox/version-history | grep -E -o \".<h4>Solovox</h4>.{0,40}\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/solovox-macos-installer?file=Solovox-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiostardust201)\n    name=\"Stardust 201 Tape Echo\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Stardust201Package-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/stardust-201/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/stardust-201-macos-installer?file=Stardust-201-Tape-Echo-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiosurrealisticmg1plus)\n    name=\"Surrealistic MG-1 Plus\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.MG-1PlusPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/surrealistic-mg-1-plus/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/surrealistic-mg-1-plus-macos-installer?file=Surrealistic-MG-1-Plus-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiosync)\n    name=\"Cherry Audio Sync\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.SyncPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/sync/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/sync-macos-installer?file=Cherry-Audio-Sync-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiosynthesizerexpander)\n    name=\"Synthesizer Expander Module\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.SynthesizerExpanderModulePackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/synthesizer-expander-module/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/synthesizer-expander-module-macos-installer?file=Synthesizer-Expander-Module-Installer-macOS.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiovoltagemodular)\n    name=\"Voltage Modular\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.VoltageModularPackageUniversal-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/voltage-modular/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/voltage-mac/download?file=Voltage-Modular-Installer-macOS-Universal.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\ncherryaudiowurlybird140b)\n    name=\"Wurlybird 140B\"\n    type=\"pkg\"\n    packageID=\"com.cherryaudio.pkg.Wurlybird140bPackage-StandAlone\"\n    appNewVersion=\"$(curl -fs https://cherryaudio.com/products/wurlybird140b/version-history | grep -A 6 \"info\" | grep -Eo \"([0-9]+(\\.[0-9]+)+)\" | head -1 | xargs)\"\n    downloadURL=\"https://store.cherryaudio.com/downloads/wurlybird140b-macos-installer?file=Wurlybird140B.pkg\"\n    expectedTeamID=\"A2XFV22B2X\"\n    ;;\nchromeremotedesktop)\n    name=\"chromeremotedesktop\"\n    type=\"pkgInDmg\"\n    packageID=\"com.google.pkg.ChromeRemoteDesktopHost\"\n    downloadURL=\"https://dl.google.com/chrome-remote-desktop/chromeremotedesktop.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\nchronoagent)\n    name=\"ChronoAgent\"\n    type=\"pkgInDmg\"\n    # packageID=\"com.econtechnologies.preference.chronoagent\"\n    # versionKey=\"CFBundleVersion\"\n    # None of the above can read out the installed version\n    releaseURL=\"https://www.econtechnologies.com/UC/updatecheck.php?prod=ChronoAgent&lang=en&plat=mac&os=10.14.1&hw=i64&req=1&vers=#\"\n    appNewVersion=$(curl -sf $releaseURL | sed -r 's/.*VERSION=([^<]+).*/\\1/')\n    downloadURL=\"https://downloads.econtechnologies.com/CA_Mac_Download.dmg\"\n    expectedTeamID=\"9U697UM7YX\"\n    ;;\nchronosync)\n    name=\"ChronoSync\"\n    type=\"pkgInDmg\"\n    releaseURL=\"https://www.econtechnologies.com/UC/updatecheck.php?prod=ChronoSync&lang=en&plat=mac&os=10.14.1&hw=i64&req=1&vers=#\"\n    appNewVersion=$(curl -sf $releaseURL | sed -r 's/.*VERSION=([^<]+).*/\\1/')\n    downloadURL=\"https://downloads.econtechnologies.com/CS4_Download.dmg\"\n    expectedTeamID=\"9U697UM7YX\"\n    ;;\ncinema4d)\n    name=\"Cinema 4D\"\n    type=\"dmg\"\n    productDownloadsPage=$(curl -fsL https://www.maxon.net/en/downloads | grep -oE '[^\"]*downloads/cinema-4d[^\"]*' | head -1)\n    downloadURL=$(curl -fsL $productDownloadsPage | grep -oE 'https://[^\"]*\\.dmg' | head -1)\n    appNewVersion=$(sed -E 's/.*_([0-9.]*)_Mac\\.dmg/\\1/g' <<< $downloadURL)\n    targetDir=\"/Applications/Maxon Cinema 4D ${appNewVersion:0:4}\"\n    appCustomVersion(){\n      defaults read \"$targetDir/Cinema 4D.app/Contents/Info.plist\" CFBundleGetInfoString | grep -Eo \"202[0-9]+\\.[0-9]+\\.[0-9]+\"\n    }\n    installerTool=\"Maxon Cinema 4D Installer.app\"\n    CLIInstaller=\"Maxon Cinema 4D Installer.app/Contents/MacOS/installbuilder.sh\"\n    CLIArguments=( --mode unattended --unattendedmodeui none )\n    expectedTeamID=\"4ZY22YGXQG\"\n    ;;\n\ncisdem-documentreader)\n    name=\"cisdem-documentreader\"\n    type=\"dmg\"\n    downloadURL=\"https://download.cisdem.com/cisdem-documentreader.dmg\"\n    expectedTeamID=\"5HGV8EX6BQ\"\n    appName=\"Cisdem Document Reader.app\"\n    ;;\ncitrixworkspace)\n    #credit: Erik Stam (@erikstam) and #Philipp on MacAdmins Slack\n    name=\"Citrix Workspace\"\n    type=\"pkgInDmg\"\n    parseURL() {\n        urlToParse='https://www.citrix.com/downloads/workspace-app/mac/workspace-app-for-mac-latest.html#ctx-dl-eula-external'\n        htmlDocument=$(curl -s -L $urlToParse)\n        xmllint --html --xpath \"string(//a[contains(@rel, 'downloads.citrix.com')]/@rel)\" 2> /dev/null <(print $htmlDocument)\n    }\n    downloadURL=\"https:$(parseURL)\"\n    newVersionString() {\n        urlToParse='https://www.citrix.com/downloads/workspace-app/mac/workspace-app-for-mac-latest.html'\n        htmlDocument=$(curl -fs $urlToParse)\n        xmllint --html --xpath 'string(//p[contains(., \"Version\")])' 2> /dev/null <(print $htmlDocument)\n    }\n    appNewVersion=$(newVersionString | cut -d ' ' -f2 )\n    versionKey=\"CitrixVersionString\"\n    expectedTeamID=\"S272Y5R93J\"\n    ;;\ncleartouchcollage)\n    name=\"Collage\"\n    type=\"pkgInZip\"\n    packageID=\"com.cvte.cleartouch.mac\"\n    downloadURL=$(curl -fs https://www.getcleartouch.com/download/collage-for-mac/ | xmllint --html --xpath 'string(//*[@id=\"wpdm-filelist-412\"]/tbody/tr[1]/td[2]/a/@href)' - 2> /dev/null | sed 's/ /%20/g')\n    expectedTeamID=\"P76M9BE8DQ\"\n    ;;\nclevershare2)\n    name=\"Clevershare\"\n    type=\"dmg\"\n    printlog \"Label for $name broken in test\" ERROR\n    downloadURL=$(curl -fs https://www.clevertouch.com/eu/clevershare2g | grep -i -o -E \"https.*notarized.*\\.dmg\")\n    appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*\\/([0-9.]*)\\/[0-9]*\\/.*\\.dmg$/\\1/')\n    expectedTeamID=\"P76M9BE8DQ\"\n    ;;\nclickshare)\n    name=\"ClickShare\"\n    type=\"appInDmgInZip\"\n    clickshareAppInfo=\"$( curl -fs \"https://www.barco.com/bin/barco/tde/details.json?fileNumber=R3306192&tdeType=3\" )\"\n    appNewVersion=\"$( expr $( getJSONValue \"$clickshareAppInfo\" majorVersion ) + 1 - 1 )\"\n    appNewVersion+=\".$( expr $( getJSONValue \"$clickshareAppInfo\" minorVersion ) + 1 - 1 )\"\n    appNewVersion+=\".$( expr $( getJSONValue \"$clickshareAppInfo\" patchVersion ) + 1 - 1 )\"\n    appNewVersion+=\"-b$( expr $( getJSONValue \"$clickshareAppInfo\" buildVersion ) + 1 - 1 )\"\n    downloadURL=\"$( getJSONValue \"$( curl -fs \"https://www.barco.com/bin/barco/tde/downloadUrl.json?fileNumber=R3306192&tdeType=3\" )\" downloadUrl )\"\n    expectedTeamID=\"P6CDJZR997\"\n    ;;\nclickup)\n\tname=\"ClickUp\"\n\ttype=\"dmg\"\n\tif [[ $(arch) == \"arm64\" ]]; then\n\t\tappNewVersion=$(curl -sD /dev/stdout https://desktop.clickup.com/mac/dmg/arm64 | grep filename | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/')\n\t\tdownloadURL=\"https://desktop.clickup.com/mac/dmg/arm64\"\n\telif [[ $(arch) == \"i386\" ]]; then\n        appNewVersion=$(curl -sD /dev/stdout https://desktop.clickup.com/mac | grep filename | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/')\n        downloadURL=\"https://desktop.clickup.com/mac\"\n\tfi\n\texpectedTeamID=\"5RJWFAUGXQ\"\n\t;;\nclipgrab)\n    name=\"ClipGrab\"\n    type=\"dmg\"\n    expectedTeamID=\"E8BJ3ZV5W8\"\n    downloadURL=\"$( curl -s 'https://clipgrab.org' | tr '\"' '\\n' | grep dmg )\"\n    appNewVersion=\"$( echo \"$downloadURL\" | sed -E 's/.*-([0-9.]*).dmg/\\1/' )\"\n    ;;\nclipy)\n\tname=\"Clipy\"\n\ttype=\"dmg\"\n    downloadURL=$(downloadURLFromGit Clipy Clipy)\n    appNewVersion=$(versionFromGit Clipy Clipy)\n    expectedTeamID=\"BBCHAJ584H\"\n    ;;\ncloseio)\n    name=\"Close.io\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit closeio closeio-desktop-releases)\n    appNewVersion=$(versionFromGit closeio closeio-desktop-releases)\n    expectedTeamID=\"WTNQ6773UC\"\n    ;;\ncloudflarewarp)\n    name=\"Cloudflare_WARP\"\n    type=\"pkgInZip\"\n    packageID=\"com.cloudflare.1dot1dot1dot1.macos\"\n    downloadURL=\"https://1111-releases.cloudflareclient.com/mac/Cloudflare_WARP.zip\"\n    appNewVersion=\"\"\n    expectedTeamID=\"68WVV388M8\"\n    ;;\ncloudya)\n    name=\"Cloudya\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"$(curl -fs https://www.nfon.com/de/service/downloads | grep -i -E -o \"https://cdn.cloudya.com/Cloudya-[.0-9]+-mac.zip\")\"\n    appNewVersion=\"$(curl -fs https://www.nfon.com/de/service/downloads | grep -i -E -o \"Cloudya Desktop App MAC [0-9.]*\" | sed 's/^.*\\ \\([^ ]\\{0,7\\}\\)$/\\1/g')\"\n    expectedTeamID=\"X26F74J8TH\"\n    ;;\nclue)\n    #For personal use and students\n    name=\"Clue\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL https://clue.no/en/download | grep \"For personal use and students:\" | sed 's/.*href=\"//' | sed 's/\".*//')\n    appNewVersion=\"$(echo \"${downloadURL}\" | sed -E 's/.*Clue*([0-9.]*)\\..*/\\1/g')\"\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"3NX6B9TB2F\"\n    ;;\ncluefull)\n    #For companies and schools\n    name=\"Clue\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL https://clue.no/en/download | grep \"For companies and schools:\" | sed 's/.*href=\"//' | sed 's/\".*//')\n    appNewVersion=\"$(echo \"${downloadURL}\" | sed -E 's/.*Clue*([0-9.]*)\\F.*/\\1/g')\"\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"3NX6B9TB2F\"\n    ;;\ncmake)\n    name=\"CMake\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fsL \"https://cmake.org/download\" | awk -F'[()]' '/id=\"latest\"/{print $2}')\n    downloadURL=\"https://github.com/Kitware/CMake/releases/download/v${appNewVersion}/cmake-${appNewVersion}-macos-universal.dmg\"\n    expectedTeamID=\"W38PE5Y733\"\n    ;;\ncocoapods)\n    name=\"CocoaPods\"\n    type=\"bz2\"\n    downloadURL=\"$(downloadURLFromGit CocoaPods CocoaPods-app)\"\n    appNewVersion=\"$(versionFromGit CocoaPods CocoaPods-app)\"\n    expectedTeamID=\"AX2Q2BH2XR\"\n    ;;\ncoconutbattery)\n    name=\"coconutBattery\"\n    type=\"zip\"\n    downloadURL=\"https://coconut-flavour.com/downloads/coconutBattery_latest.zip\"\n    appNewVersion=$(curl -fs https://www.coconut-flavour.com/coconutbattery/ | grep \"<body>\" | sed 's/.*Release Notes - v\\([^ ]*\\) .*/\\1/')\n    expectedTeamID=\"R5SC3K86L5\"\n    ;;\ncode42)\n    name=\"Code42\"\n    type=\"pkgInDmg\"\n    if [[ $(arch) == i386 ]]; then\n       downloadURL=\"https://download-preservation.code42.com/installs/agent/latest-mac.dmg\"\n    elif [[ $(arch) == arm64 ]]; then\n       downloadURL=\"https://download-preservation.code42.com/installs/agent/latest-mac-arm64.dmg\"\n    fi\n    expectedTeamID=\"9YV9435DHD\"\n    blockingProcesses=( NONE )\n    ;;\ncodemeter)\n    name=\"CodeMeter\"\n    type=\"pkgInDmg\"\n    archiveName=\"CmInstall.pkg\"\n    html_page_source=\"https://www.wibu.com/de/support/anwendersoftware/anwendersoftware.html\"\n    macos_value=$(curl -fs $html_page_source | xmllint --html --format - 2>/dev/null | grep -Eo '10.15\"> <option value=\".*?\"' | cut -d '\"' -f3)\n    downloadHTML=\"https://www.wibu.com/de/support/anwendersoftware/anwendersoftware/file/download/$macos_value.html\"\n    downloadURL=\"https://www.wibu.com\"$(curl -fs $downloadHTML | xmllint --html --format - 2>/dev/null | grep -Eo 'rel=\"nofollow\" href=\".*?\"' | cut -d '\"' -f4)\n    appNewVersion=$(curl -fs $html_page_source | xmllint --html --format - 2>/dev/null | grep -Eo \"option value=\\\"$macos_value\\\" style=\\\"\\\">Version .*?\\\"\" | sed -E 's/.*Version (.*) \\| 2.*/\\1/g')\n    expectedTeamID=\"2SE7W37452\"\n    ;;\ncoderunner)\n    name=\"CodeRunner\"\n    type=\"zip\"\n    downloadURL=\"https://coderunnerapp.com/download\"\n    appNewVersion=$(curl -fsIL ${downloadURL} | grep -i \"^location\" | cut -d \" \" -f2 | sed -E 's/.*CodeRunner-([0-9.]*).zip/\\1/')\n    expectedTeamID=\"R4GD98AJF9\"\n    ;;\ncolourcontrastanalyser)\n    name=\"Colour Contrast Analyser\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit ThePacielloGroup CCAe)\n    appNewVersion=$(versionFromGit ThePacielloGroup CCAe)\n    expectedTeamID=\"34RS4UC3M6\"\n    blockingProcesses=( NONE )\n    ;;\nconnectfonts)\n    name=\"Connect Fonts\"\n    type=\"dmg\"\n    downloadURL=\"https://links.extensis.com/connect_fonts/cf_latest?language=en&platform=mac\"\n    appNewVersion=$( curl -is \"$downloadURL\" | grep \"location:\" | grep -o \"[[:digit:]]\\+-[[:digit:]]\\+-[[:digit:]]\\+\" | sed -e 's/-/./g' )\n    expectedTeamID=\"J6MMHGD9D6\"\n    ;;\ncormorant)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Cormorant\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://eclecticlight.co/downloads/ | grep -i $name | grep zip | sed -E 's/.*href=\\\"(https.*)\\\">.*/\\1/g')\n    appNewVersion=$(curl -fs https://eclecticlight.co/downloads/ | grep zip | grep -o -E \"$name [0-9.]*\" | awk '{print $2}')\n    expectedTeamID=\"QWY4LRW926\"\n    ;;\ncraftmanager)\n    name=\"CraftManager\"\n    type=\"zip\"\n    #downloadURL=\"https://craft-assets.invisionapp.com/CraftManager/production/CraftManager.zip\"\n    downloadURL=\"$(curl -fs https://craft-assets.invisionapp.com/CraftManager/production/appcast.xml | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs https://craft-assets.invisionapp.com/CraftManager/production/appcast.xml | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    expectedTeamID=\"VRXQSNCL5W\"\n    ;;\ncraftmanagerforsketch)\n    name=\"CraftManager\"\n    type=\"zip\"\n    downloadURL=\"https://craft-assets.invisionapp.com/CraftManager/production/CraftManager.zip\"\n    appNewVersion=$(curl -fs https://craft-assets.invisionapp.com/CraftManager/production/appcast.xml | xpath '//rss/channel/item[1]/enclosure/@sparkle:shortVersionString' 2>/dev/null | cut -d '\"' -f2)\n    expectedTeamID=\"VRXQSNCL5W\"\n    ;;\ncrashplan)\n    name=\"CrashPlan\"\n    appName=\"CrashPlan.app\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://download.crashplan.com/installs/agent/latest-mac.dmg\"\n    appNewVersion=$( curl -sfI https://download.crashplan.com/installs/agent/latest-mac.dmg | awk -F'/' '/Location: /{print $7}' )\n    archiveName=$( curl -sfI https://download.crashplan.com/installs/agent/latest-mac.dmg | awk -F'/' '/Location: /{print $NF}' )\n    expectedTeamID=\"UGHXR79U6M\"\n    pkgName=\"Install CrashPlan.pkg\"\n    packageID=\"com.crashplan.app.pkg\"\n    blockingProcesses=( $name )\n    ;;\ncrashplansmb)\n    name=\"CrashPlan\"\n    type=\"pkgInDmg\"\n    pkgName=\"Install Crashplan.pkg\"\n    downloadURL=\"https://download.crashplan.com/installs/agent/latest-smb-mac.dmg\"\n    appNewVersion=$( curl https://download.crashplan.com/installs/agent/latest-smb-mac.dmg  -s -L -I -o /dev/null -w '%{url_effective}' | cut -d \"/\" -f7 )\n    expectedTeamID=\"UGHXR79U6M\"\n    blockingProcesses=( NONE )\n    ;;\ncricutdesignspace)\n    name=\"Cricut Design Space\"\n    type=\"dmg\"\n    cricutVersionURL=$(getJSONValue $(curl -fsL \"https://apis.cricut.com/desktopdownload/UpdateJson?operatingSystem=osxnative&shard=a\") \"result\")\n    cricutVersionJSON=$(curl -fs \"$cricutVersionURL\")\n    appNewVersion=$(getJSONValue \"$cricutVersionJSON\" \"rolloutVersion\")\n    downloadURL=$(getJSONValue $(curl  -fsL \"https://apis.cricut.com/desktopdownload/InstallerFile?shard=a&operatingSystem=osxnative&fileName=CricutDesignSpace-Install-v${appNewVersion}.dmg\") \"result\")\n    expectedTeamID=\"25627ZFVT7\"\n    ;;\n\ncryptomator)\n    name=\"Cryptomator\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"Cryptomator-[0-9.]*-arm64.dmg\"\n\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"Cryptomator-[0-9.]*-x64.dmg\"\n    fi\n    downloadURL=$(downloadURLFromGit cryptomator cryptomator)\n    appNewVersion=$(versionFromGit cryptomator cryptomator)\n    expectedTeamID=\"YZQJQUHA3L\"\n    ;;\ncrystalfetch)\n\tname=\"CrystalFetch\"\n\ttype=\"dmg\"\n    downloadURL=$(downloadURLFromGit TuringSoftware CrystalFetch)\n    appNewVersion=$(versionFromGit TuringSoftware CrystalFetch)\n    expectedTeamID=\"WDNLXAD4W8\"\n    ;;\ncyberduck)\n    name=\"Cyberduck\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://version.cyberduck.io/changelog.rss | xpath '//rss/channel/item/enclosure/@url' 2>/dev/null | cut -d '\"' -f 2 )\n    appNewVersion=$(curl -fs https://version.cyberduck.io/changelog.rss | xpath '//rss/channel/item/enclosure/@sparkle:shortVersionString' 2>/dev/null | cut -d '\"' -f 2 )\n    expectedTeamID=\"G69SCX94XU\"\n    ;;\ncytoscape)\n    name=\"Cytoscape\"\n    #appName=\"Cytoscape Installer.app\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"Cytoscape_[0-9._]*_macos_aarch64.dmg\"\n\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"Cytoscape_[0-9._]*_macos_x64.dmg\"\n    fi\n    downloadURL=\"$(downloadURLFromGit cytoscape cytoscape)\"\n    appNewVersion=\"$(versionFromGit cytoscape cytoscape)\"\n    installerTool=\"Cytoscape Installer.app\"\n    CLIInstaller=\"Cytoscape Installer.app/Contents/MacOS/JavaApplicationStub\"\n    CLIArguments=(-q)\n    expectedTeamID=\"35LDCJ33QT\"\n    ;;\ndaisydisk)\n    name=\"DaisyDisk\"\n    type=\"zip\"\n    downloadURL=\"https://daisydiskapp.com/downloads/DaisyDisk.zip\"\n    appNewVersion=$( curl -fs 'https://daisydiskapp.com/downloads/appcastReleaseNotes.php?appEdition=Standard' | grep Version | head -1 | sed -E 's/.*Version ([0-9.]*).*/\\1/g' )\n    expectedTeamID=\"4CBU3JHV97\"\n    ;;\ndangerzone)\n    name=\"Dangerzone\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit freedomofpress dangerzone)\"\n    appNewVersion=\"$(versionFromGit freedomofpress dangerzone)\"\n    expectedTeamID=\"N9B95FDWH4\"\n    ;;\ndarktable)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"darktable\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit darktable-org darktable)\n    appNewVersion=$(versionFromGit darktable-org darktable)\n    expectedTeamID=\"85Q3K4KQRY\"\n    ;;\ndaylite)\n    name=\"Daylite\"\n    type=\"zip\"\n    downloadURL=\"https://www.marketcircle.com/downloads/latest-daylite\"\n    appNewVersion=\"$(curl -fs https://www.marketcircle.com/appcasts/daylite.xml | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f 2)\"\n    expectedTeamID=\"GR26KTJYTV\"\n    ;;\ndbeaverce)\n    name=\"DBeaver\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://dbeaver.io/files/dbeaver-ce-latest-macos-aarch64.dmg\"\n        appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i ^location | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' | head -1)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://dbeaver.io/files/dbeaver-ce-latest-macos.dmg\"\n        appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i ^location | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' | head -1)\"\n    fi\n    expectedTeamID=\"42B6MDKMW8\"\n    blockingProcesses=( dbeaver )\n    ;;\ndebookee)\n    name=\"Debookee\"\n    type=\"zip\"\n    downloadURL=$(curl --location --fail --silent \"https://www.iwaxx.com/debookee/appcast.xml\" | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    expectedTeamID=\"AATLWWB4MZ\"\n    ;;\ndedoose)\n    name=\"Dedoose\"\n    type=\"dmg\"\n    downloadURL=$(curl https://www.dedoose.com/resources/articledetail/dedoose-desktop-app | grep \"Dedoose-.*[0-9.].*[0-9.].*[0-9.]dmg\" | cut -d'/' -f3- | cut -f1 -d'\"' | cut -c2-)\n    appNewVersion=$(curl https://www.dedoose.com/resources/articledetail/dedoose-desktop-app | grep -o \"Dedoose-.*[0-9.].*[0-9.].*[0-9.]\" | cut -d'>' -f2- | tail -1)\n    expectedTeamID=\"9U74Q6K62X\"\n    ;;\n\ndeepl)\n    name=\"DeepL\"\n    type=\"dmg\"\n    downloadURL=\"https://www.deepl.com/macos/download/bigsur/DeepL.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"4N8BGCG336\"\n    ;;\ndefaultfolderx)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Default Folder X\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://www.stclairsoft.com/cgi-bin/dl.cgi?DX\" | awk -F '\"' \"/dmg/ {print \\$4}\" | head -2 | tail -1)\n    expectedTeamID=\"7HK42V8R9D\"\n    ;;\ndepnotify)\n    name=\"DEPNotify\"\n    type=\"pkg\"\n    #packageID=\"menu.nomad.depnotify\"\n    downloadURL=\"https://files.nomad.menu/DEPNotify.pkg\"\n    #appNewVersion=$()\n    expectedTeamID=\"VRPY9KHGX6\"\n    ;;\ndesktoppr)\n    name=\"desktoppr\"\n    type=\"pkg\"\n    packageID=\"com.scriptingosx.desktoppr\"\n    downloadURL=$(downloadURLFromGit \"scriptingosx\" \"desktoppr\")\n    appNewVersion=$(versionFromGit \"scriptingosx\" \"desktoppr\")\n    expectedTeamID=\"JME5BW3F3R\"\n    blockingProcesses=( NONE )\n    ;;\ndetectxswift)\n    # credit: AP Orlebeke (@apizz)\n    name=\"DetectX Swift\"\n    type=\"zip\"\n    downloadURL=\"https://s3.amazonaws.com/sqwarq.com/PublicZips/DetectX_Swift.app.zip\"\n    appNewVersion=$(curl -fs https://s3.amazonaws.com/sqwarq.com/AppCasts/dtxswift_release_notes.html | grep Version | head -1 | sed -E 's/.*Version ([0-9.]*)\\<.*/\\1/')\n    expectedTeamID=\"MAJ5XBJSG3\"\n    ;;\ndevonthink)\n    # It's a zipped dmg file, needs function installAppInDmgInZip\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"DEVONthink 3\"\n    type=\"appInDmgInZip\"\n    downloadURL=$( curl -fs https://www.devontechnologies.com/apps/devonthink | grep -i \"download.devon\" | tr '\"' '\\n' | tr \"'\" '\\n' | grep -e '^https://' )\n    appNewVersion=$( echo ${downloadURL} | tr '/' '\\n' | grep \"[0-9]\" | grep \"[.]\" | head -1 )\n    expectedTeamID=\"679S2QUWR8\"\n    ;;\ndialog|\\\nswiftdialog)\n    name=\"Dialog\"\n    type=\"pkg\"\n    packageID=\"au.csiro.dialogcli\"\n    downloadURL=\"$(downloadURLFromGit swiftDialog swiftDialog)\"\n    appNewVersion=\"$(versionFromGit swiftDialog swiftDialog)\"\n    expectedTeamID=\"PWA5E9TQ59\"\n    ;;\ndialpad)\n    # credit: @ehosaka\n    name=\"Dialpad\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://storage.googleapis.com/dialpad_native/osx/arm64/Dialpad.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://storage.googleapis.com/dialpad_native/osx/x64/Dialpad.dmg\"\n    fi\n    expectedTeamID=\"9V29MQSZ9M\"\n    ;;\ndigiexam)\n\tname=\"Digiexam\"\n\ttype=\"dmg\"\n\tdownloadURL=\"https://www.digiexam.com/hubfs/client/Digiexam_Mac.dmg\"\n    appNewVersion=$( curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs https://support.digiexam.se/hc/en-us/articles/7119593625628-Client-updates | perl -ne 'print if /Version(?!.*Only(?!.*Mac))(?=.*Mac)?/' | head -1 | sed -nre 's/^[^0-9]*(([0-9]+\\.)*[0-9]+).*/\\1/p' )\n\texpectedTeamID=\"73T9H7VE4P\"\n\t;;\ndiscord)\n    name=\"Discord\"\n    type=\"dmg\"\n    downloadURL=\"https://discordapp.com/api/download?platform=osx\"\n    appNewVersion=\"$(curl -fsL -o /dev/null -w %{url_effective} \"${downloadURL}\" | awk -F'/' '{print $(NF-1)}')\"\n    expectedTeamID=\"53Q6R32WPB\"\n    ;;\ndiskdrill)\n    name=\"Disk Drill\"\n    type=\"dmg\"\n    appname=\"Disk Drill.app\"\n    downloadURL=\"https://dl.cleverfiles.com/diskdrill.dmg\"\n    expectedTeamID=\"A3W62KZY8Z\"\n    blockingProcesses=( Disk Drill )\n    ;;\ndiskspace)\n    name=\"diskspace\"\n    type=\"pkg\"\n    packageID=\"com.scriptingosx.diskspace\"\n    downloadURL=\"$(downloadURLFromGit scriptingosx diskspace)\"\n    appNewVersion=\"$(versionFromGit scriptingosx diskspace)\"\n    expectedTeamID=\"JME5BW3F3R\"\n    ;;\ndisplaylinkmanager)\n    name=\"DisplayLink Manager\"\n    type=\"pkg\"\n    #packageID=\"com.displaylink.displaylinkmanagerapp\"\n    downloadURL=https://www.synaptics.com$(redirect=$(curl -sfL https://www.synaptics.com/products/displaylink-graphics/downloads/macos | grep -m 1 'class=\"download-link\">Download' | sed 's/.*href=\"//' | sed 's/\".*//') && curl -sfL \"https://www.synaptics.com$redirect\" | grep 'class=\"no-link\"' | awk -F 'href=\"' '{print $2}' | awk -F '\"' '{print $1}')\n    appNewVersion=$(curl -sfL https://www.synaptics.com/products/displaylink-graphics/downloads/macos | grep -m 1 \"Release:\" | cut -d ' ' -f2)\n    expectedTeamID=\"73YQY62QM3\"\n    ;;\ndisplaylinkmanagergraphicsconnectivity)\n    name=\"DisplayLink Manager Graphics Connectivity\"\n    type=\"pkg\"\n    packageID=\"com.displaylink.displaylinkmanagerapp\"\n    downloadURL=https://www.synaptics.com$(curl -fLs \"https://www.synaptics.com$(curl -fLs https://www.synaptics.com/products/displaylink-graphics/downloads/macos | xmllint --html --format - 2>/dev/null | grep -oE '\"/node/.+?\"' | head -n1 | tr -d '\"')\" | xmllint --html --format - 2>/dev/null | grep -oE \"/.+\\.pkg\")\n    appNewVersion=$(echo \"${downloadURL}\" | grep -Eo '[0-9]\\.[0-9]+(\\.[0-9])?')\n    expectedTeamID=\"73YQY62QM3\"\n    ;;\ndocker)\n    name=\"Docker\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n     downloadURL=\"https://desktop.docker.com/mac/stable/arm64/Docker.dmg\"\n     appNewVersion=$( curl -fs \"https://desktop.docker.com/mac/main/arm64/appcast.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[last()]' 2>/dev/null | cut -d '\"' -f2 )\n    elif [[ $(arch) == i386 ]]; then\n     downloadURL=\"https://desktop.docker.com/mac/stable/amd64/Docker.dmg\"\n     appNewVersion=$( curl -fs \"https://desktop.docker.com/mac/main/amd64/appcast.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[last()]' 2>/dev/null | cut -d '\"' -f2 )\n    fi\n    expectedTeamID=\"9BNSXJN65R\"\n    blockingProcesses=( \"Docker Desktop\" \"Docker\" )\n    ;;\ndockutil)\n    name=\"dockutil\"\n    type=\"pkg\"\n    packageID=\"dockutil.cli.tool\"\n    downloadURL=$(downloadURLFromGit \"kcrawford\" \"dockutil\")\n    appNewVersion=$(versionFromGit \"kcrawford\" \"dockutil\")\n    expectedTeamID=\"Z5J8CJBUWC\"\n    blockingProcesses=( NONE )\n    ;;\ndragonframe5)\n    name=\"DragonFrame 5\"\n    type=\"pkg\"\n    packageID=\"com.dzed.Dragonframe5\"\n    expectedTeamID=\"PG7SM8SD8M\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" )\n    downloadURL=\"$( curl -s \"https://www.dragonframe.com/downloads/\" $curlOptions | tr '\"' '\\n' | grep -m1 \"_5.*pkg\" )\"\n    appNewVersion=\"$( echo \"$downloadURL\" | cut -d '_' -f 2 | cut -d '.' -f 1-3 )\"\n    ;;\ndrawio)\n    name=\"draw.io\"\n    type=\"dmg\"\n    archiveName=\"draw.io-universal-[0-9.]*.dmg\"\n    downloadURL=\"$(downloadURLFromGit jgraph drawio-desktop)\"\n    appNewVersion=\"$(versionFromGit jgraph drawio-desktop)\"\n    expectedTeamID=\"UZEUFB4N53\"\n    blockingProcesses=( draw.io )\n    ;;\ndrift)\n    # credit Elena Ackley (@elenaelago)\n    name=\"Drift\"\n    type=\"dmg\"\n    downloadURL=\"https://drift-prod-desktop-installers.s3.amazonaws.com/mac/Drift-latest.dmg\"\n    expectedTeamID=\"78559WUUR9\"\n    ;;\ndropbox)\n    name=\"Dropbox\"\n    type=\"dmg\"\n    # Handling differens on Apple Silicon and Intel arch\n    if [[ $(arch) = \"arm64\" ]]; then\n        printlog \"Architecture: arm64\"\n        downloadURL=\"https://www.dropbox.com/download?plat=mac&full=1&arch=arm64\"\n    else\n        printlog \"Architecture: i386 (not arm64)\"\n        downloadURL=\"https://www.dropbox.com/download?plat=mac&full=1\"\n    fi\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i \"^location\" | sed -E 's/.*%20([0-9.]*)\\.[arm64.]*dmg/\\1/g' | tr -d '[:cntrl:]' )\n    expectedTeamID=\"G7HH3F8CAK\"\n    ;;\ndroplr)\n    name=\"Droplr\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit Droplr droplr-desktop-releases)\"\n    appNewVersion=\"$(versionFromGit Droplr droplr-desktop-releases)\"\n    expectedTeamID=\"MZ25PHMY7Y\"\n    ;;\ndruvainsync)\n    name=\"Druva inSync\"\n    type=\"pkgInDmg\"\n    appNewVersion=$(getJSONValue \"$(curl -fsL curl -fs https://downloads.druva.com/insync/js/data.json)\" \"[1].supportedVersions[0]\")\n    downloadURL=$(getJSONValue \"$(curl -fsL curl -fs https://downloads.druva.com/insync/js/data.json)\" \"[1].installerDetails[0].downloadURL\")\n    expectedTeamID=\"JN6HK3RMAP\"\n    ;;\ndstny)\n    name=\"Dstny\"\n    type=\"dmg\"\n    downloadURL=\"https://soft.dstny.se/dstny_mac.dmg\"\n    # appNewVersion=\"\"\n    expectedTeamID=\"5RLWBLKGL2\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nduckduckgo)\n    name=\"DuckDuckGo\"\n    type=\"dmg\"\n    #downloadURL=\"https://staticcdn.duckduckgo.com/macos-desktop-browser/duckduckgo.dmg\"\n    downloadURL=$(curl -fs https://staticcdn.duckduckgo.com/macos-desktop-browser/appcast.xml | xpath '(//rss/channel/item/enclosure/@url)[last()]' 2>/dev/null | cut -d '\"' -f2)\n    #downloadURL=$(curl -fs https://staticcdn.duckduckgo.com/macos-desktop-browser/appcast.xml | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f2)\n    appNewVersion=$(curl -fs https://staticcdn.duckduckgo.com/macos-desktop-browser/appcast.xml | xpath '(//rss/channel/item/enclosure/@sparkle:version)[last()]' 2>/dev/null | cut -d '\"' -f2)\n    #appNewVersion=$(curl -fs https://staticcdn.duckduckgo.com/macos-desktop-browser/appcast.xml | xpath '(//rss/channel/item/sparkle:shortVersionString)[1]' 2>/dev/null | cut -d \">\" -f2 | cut -d \"<\" -f1)\n    expectedTeamID=\"HKE973VLUW\"\n    ;;\nduet)\n    name=\"Duet\"\n    type=\"zip\"\n    downloadURL=\"https://updates.duetdisplay.com/AppleSilicon\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^location | cut -d \"/\" -f6 | sed 's/duet-//' | sed 's/.zip//' | sed 's/-/./g')\"\n    expectedTeamID=\"J6L96W8A86\"\n    blockingProcesses=( \"duet\" \"duet Networking\" )\n    ;;\nduodevicehealth|\\\nduodesktop)\n    name=\"Duo Desktop\"\n    type=\"pkg\"\n    downloadURL=\"https://dl.duosecurity.com/DuoDesktop-latest.pkg\"\n    appNewVersion=$(curl -fsLIXGET \"https://dl.duosecurity.com/DuoDesktop-latest.pkg\" | grep -i \"^content-disposition\" | sed -e 's/.*filename\\=\\\"DuoDesktop\\-\\(.*\\)\\.pkg\\\".*/\\1/')\n    appName=\"Duo Desktop.app\"\n    expectedTeamID=\"FNN8Z5JMFP\"\n    ;;\ndymoconnectdesktop)\n    name=\"DYMO Connect\"\n    type=\"pkg\"\n    downloadURL=$(curl -fs -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" \"https://www.dymo.com/compatibility-chart.html\" | grep -oE 'https?://[^\"]+\\.pkg' | sort -rV | head -n 1| sort -rV | head -n 1)\n    appNewVersion=$(curl -fs -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" \"https://www.dymo.com/compatibility-chart.html\" | grep -oE 'https?://[^\"]+\\.pkg' | awk -F/ '{print $NF}' | sed 's/DCDMac\\([0-9\\.]*\\)\\.pkg/\\1.pkg/' | cut -d\".\" -f1-4 | sort -rV | head -n 1)\n    expectedTeamID=\"N3S6676K3E\"\n    blockingProcesses=\"DYMO Connect\"\n    ;;\ndynalist)\n    name=\"Dynalist\"\n    type=\"dmg\"\n    downloadURL=\"https://dynalist.io/standalone/download?file=Dynalist.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"6JSW4SJWN9\"\n    ;;\neaseusdatarecoverywizard)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"EaseUS Data Recovery Wizard\"\n    type=\"dmg\"\n    downloadURL=$( curl -fsIL https://down.easeus.com/product/mac_drw_free_setup | grep -i \"^location\" | awk '{print $2}' | tr -d '\\r\\n' )\n    #appNewVersion=\"\"\n    expectedTeamID=\"DLLVW95FSM\"\n    ;;\neasyfind)\n    name=\"EasyFind\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs \"https://www.devontechnologies.com/apps/freeware\" | grep -o \"http.*download.*.zip\" | grep -i easyfind)\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*\\/([0-9.]*)\\/.*/\\1/g')\"\n    expectedTeamID=\"679S2QUWR8\"\n    ;;\neclipsetemurin11)\n    name=\"Temurin 11\"\n    type=\"pkg\"\n    packageID=\"net.temurin.11.jdk\"\n    downloadURL=\"$(downloadURLFromGit adoptium temurin11-binaries)\"\n    appNewVersion=\"$(downloadURLFromGit adoptium temurin11-binaries | grep -oE 'jdk-11(\\.0\\.)?([0-9]+)?(\\.[0-9]+)?%2B[0-9]+(\\.[0-9]+)?' | sed 's/jdk-//; s/%2B/+/g')\"\n    expectedTeamID=\"JCDTMS22B4\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/temurin-11.jdk/Contents/Info.plist\" ]; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/temurin-11.jdk/Contents/Info.plist\" \"CFBundleGetInfoString\" | sed 's/OpenJDK //'; fi }\n    ;;\neclipsetemurin17)\n    name=\"Temurin 17\"\n    type=\"pkg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"OpenJDK17U-jdk_aarch64_mac_hotspot_[0-9._]+\\.pkg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"OpenJDK17U-jdk_x64_mac_hotspot_[0-9._]+\\.pkg\"\n    fi\n    downloadURL=\"$(downloadURLFromGit adoptium temurin17-binaries)\"\n    appNewVersion=\"$(downloadURLFromGit adoptium temurin17-binaries | grep -oE 'jdk-17(\\.0\\.)?([0-9]+)?(\\.[0-9]+)?%2B[0-9]+(\\.[0-9]+)?' | sed 's/jdk-//; s/%2B/+/g')\"\n    expectedTeamID=\"JCDTMS22B4\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Info.plist\" ]; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Info.plist\" \"CFBundleGetInfoString\" | sed 's/OpenJDK //'; fi }\n    ;;\neclipsetemurin21)\n    name=\"Temurin 21\"\n    type=\"pkg\"\n    packageID=\"net.temurin.21.jdk\"\n    downloadURL=\"$(downloadURLFromGit adoptium temurin21-binaries)\"\n    appNewVersion=\"$(downloadURLFromGit adoptium temurin21-binaries | grep -oE 'jdk-21(\\.0\\.)?([0-9]+)?(\\.[0-9]+)?%2B[0-9]+(\\.[0-9]+)?' | sed 's/jdk-//; s/%2B/+/g')\"\n    expectedTeamID=\"JCDTMS22B4\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Info.plist\" ]; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/temurin-21.jdk/Contents/Info.plist\" \"CFBundleGetInfoString\" | sed 's/OpenJDK //; s/-LTS//'; fi }\n    ;;\n\neclipsetemurin8)\n    name=\"Temurin 8\"\n    type=\"pkg\"\n    packageID=\"net.temurin.8.jdk\"\n    downloadURL=\"$(downloadURLFromGit adoptium temurin8-binaries)\"\n    appNewVersion=\"$(downloadURLFromGit adoptium temurin8-binaries | grep -oE 'jdk8u[0-9]+-b[0-9]+' | sed 's/jdk//')\"\n    expectedTeamID=\"JCDTMS22B4\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Info.plist\" ]; then echo \"8u$(/usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/temurin-8.jdk/Contents/Info.plist\" \"CFBundleGetInfoString\" | sed 's/Eclipse Temurin 1.8.0_//')\"; fi }\n    ;;\necosiabrowser)\n    name=\"Ecosia Browser\"\n    type=\"dmg\"\n \tdownloadURL=$(getJSONValue \"$(curl -fsL 'https://ams.ecosia-browser.net/api/getLatest/144548e4-670e-46ef-be30-8d14ad305f19/mac/?update=false&channelprofilename=PROD&arch=x64')\" '.LocationUri')\n    appNewVersion=$(getJSONValue \"$(curl -fsL 'https://ams.ecosia-browser.net/api/getLatest/144548e4-670e-46ef-be30-8d14ad305f19/mac/?update=false&channelprofilename=PROD&arch=x64')\" '.Version')\n    expectedTeamID=\"33YMRSYD2L\"\n    ;;\negnyte)\n    # credit: #MoeMunyoki from MacAdmins Slack\n    name=\"Egnyte Connect\"\n    type=\"pkg\"\n    downloadURL=\"https://egnyte-cdn.egnyte.com/egnytedrive/mac/en-us/latest/EgnyteConnectMac.pkg\"\n    appNewVersion=$(curl -fs \"https://egnyte-cdn.egnyte.com/egnytedrive/mac/en-us/versions/default.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' | cut -d '\"' -f 2)\n    expectedTeamID=\"FELUD555VC\"\n    blockingProcesses=( NONE )\n    ;;\negnytecore)\n    name=\"Egnyte Core\"\n    appName=\"Egnyte.app\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://egnyte-cdn.egnyte.com/desktopapp/mac/en-us/versions/default.xml\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://egnyte-cdn.egnyte.com/desktopapp/mac/en-us/versions/default.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"FELUD555VC\"\n    blockingProcesses=( Egnyte )\n    ;;\negnytewebedit)\n    name=\"EgnyteWebEdit\"\n    type=\"pkg\"\n    downloadURL=\"https://egnyte-cdn.egnyte.com/webedit/mac/en-us/latest/EgnyteWebEdit.pkg\"\n    expectedTeamID=\"FELUD555VC\"\n    appName=\"Egnyte WebEdit.app\"\n    blockingProcesses=( NONE )\n    ;;\n    \nelement)\n    name=\"Element\"\n    type=\"dmg\"\n    downloadURL=\"https://packages.riot.im/desktop/install/macos/Element.dmg\"\n    appNewVersion=$(versionFromGit vector-im element-desktop)\n    expectedTeamID=\"7J4U792NQT\"\n    ;;\nelgatocamerahub)\n    name=\"Elgato Camera Hub\"\n    type=\"pkg\"\n    # packageID=\"com.elgato.CameraHub.Installer\"\n    downloadURL=\"https://gc-updates.elgato.com/mac/echm-update/final/download-website.php\"\n    appNewVersion=$(curl -fsI \"https://gc-updates.elgato.com/mac/echm-update/final/download-website.php\" | grep -i ^location | sed -E 's/.*Camera_Hub_([0-9.]*).pkg/\\1/g' | sed 's/\\.[^.]*//3')\n    expectedTeamID=\"Y93VXCB8Q5\"\n    blockingProcesses=( \"Camera Hub\" )\n    ;;\nelgatostreamdeck)\n    name=\"Elgato Stream Deck\"\n    type=\"pkg\"\n    # packageID=\"com.elgato.StreamDeck\"\n\tdownloadURL=\"https://gc-updates.elgato.com/mac/sd-update/final/download-website.php\"\n    appNewVersion=$(curl -fsI \"https://gc-updates.elgato.com/mac/sd-update/final/download-website.php\" | grep -i ^location | sed -E 's/.*Stream_Deck_([0-9.]*).pkg/\\1/g' | sed 's/\\.[^.]*//3')\n    expectedTeamID=\"Y93VXCB8Q5\"\n    blockingProcesses=( \"Stream Deck\" )\n    ;;\nemacs)\n    name=\"Emacs\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsL \"https://emacsformacosx.com/atom/release\" | xpath '//feed/entry[1]/content/div/p/a' 2>/dev/null | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(echo \"${downloadURL}\" | sed -n 's/.*Emacs-\\([0-9.-]*\\)-universal.dmg/\\1/p')\"\n    expectedTeamID=\"5BRAQAFB8B\"\n    ;;\neposconnect)\n    name=\"EPOS Connect\"\n    type=\"pkg\"\n    #packageID=\"com.DSEA.pkg.DSEASDKM1\"\n    #downloadURL=\"https://www.eposaudio.com/globalassets/___image-library/_enterprise/files/english/epos-connect/epos-connect-7.7.0/eposconnect_7.7.0.44457.pkg\"\n    downloadURL=$(curl -fs \"https://www.eposaudio.com/en/dk/software/epos-connect\" | tr '\"' \"\\n\" | grep -o \"^https://www.eposaudio.*.pkg$\")\n    versionKey=\"CFBundleVersion\"\n    # 2024-02-06: appNewVersion commented out as the latest version is 7.8.1 but above page only shows 7.7.0\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*_([0-9.]*).pkg/\\1/' | cut -d \".\" -f4)\n    expectedTeamID=\"8956A7Y69J\"\n    ;;\nescrowbuddy)\n    name=\"Escrow Buddy\"\n    type=\"pkg\"\n    archiveName=\"Escrow.Buddy-[0-9.]*.pkg\"\n    packageID=\"com.netflix.Escrow-Buddy\"\n    appNewVersion=$(versionFromGit macadmins escrow-buddy )\n    downloadURL=$(downloadURLFromGit macadmins escrow-buddy )\n    expectedTeamID=\"T4SK8ZXCXG\"\n    ;;\neshareosx)\n    name=\"e-Share\"\n    type=\"pkg\"\n    #packageID=\"com.ncryptedcloud.e-Share.pkg\"\n    downloadURL=https://www.ncryptedcloud.com/static/downloads/osx/$(curl -fs https://www.ncryptedcloud.com/static/downloads/osx/ | grep -o -i \"href.*\\\".*\\\"\" | cut -d '\"' -f2)\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z\\-]*_([0-9.]*)\\.pkg/\\1/g' )\n    expectedTeamID=\"X9MBQS7DDC\"\n    ;;\nespanso)\n    name=\"Espanso\"\n    type=\"zip\"\n    if [[ \"$(arch)\" == \"arm64\" ]]; then\n        archiveName=\"Espanso-Mac-M1.zip\"\n    else\n        archiveName=\"Espanso-Mac-Intel.zip\"\n    fi\n    downloadURL=\"$(downloadURLFromGit espanso espanso)\"\n    appNewVersion=\"$(versionFromGit espanso espanso)\"\n    blockingProcesses=( \"Espanso\" \"espanso\" )\n    expectedTeamID=\"K839T4T5BY\"\n    ;;\netrecheck)\n    # credit: @dvsjr macadmins slack\n    name=\"EtreCheckPro\"\n    type=\"zip\"\n    downloadURL=\"https://cdn.etrecheck.com/EtreCheckPro.zip\"\n    expectedTeamID=\"U87NE528LC\"\n    ;;\netssecurebrowser)\n    name=\"ETS Secure Browser\"\n    type=\"dmg\"\n    downloadURL=\"https://ibtprod-rp.ets.org/SoftwareDistribution/rp/PROD/mac/ETS-RP-PROD.dmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    expectedTeamID=\"WGC236CZU9\"\n    ;;\nevercast)\n    name=\"Evercast\"\n    type=\"pkg\"\n    downloadURL=\"https://s3.amazonaws.com/files.evercast.us/Evercast.pkg\"\n    expectedTeamID=\"H2J9VR2HM2\"\n    ;;\nevernote)\n    name=\"Evernote\"\n    type=\"dmg\"\n    downloadURL=\"https://mac.desktop.evernote.com/builds/Evernote-latest.dmg\"\n    appNewVersion=$(curl -s https://evernote.com/release-notes | grep Latest | awk -F '<!-- -->' '{print $2}')\n    expectedTeamID=\"Q79WDW8YH9\"\n    appName=\"Evernote.app\"\n    ;;\neverweb)\n    name=\"EverWeb\"\n    type=\"dmg\"\n    downloadURL=\"https://www.ragesw.com/downloads/everweb/everweb.dmg\"\n    appNewVersion=$(curl -fs https://www.everwebapp.com/change-log/index.html | grep -oE \"[0-9]+\\.[0-9]+\\.[0-9]+\" | head -n 1)\n    expectedTeamID=\"A95T4TFRZ2\"\n    ;;\nexelbanstats)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Stats\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit exelban stats)\n    appNewVersion=$(versionFromGit exelban stats)\n    expectedTeamID=\"RP2S87B72W\"\n    ;;\nexifrenamer)\n    name=\"ExifRenamer\"\n    type=\"dmg\"\n    downloadURL=\"https://www.qdev.de/\"$(curl -fs \"https://www.qdev.de/download.php?file=ExifRenamer.dmg\" | grep -o -e \"URL=[a-zA-Z/]*.dmg\" | cut -d \"=\" -f2)\n    appNewVersion=$(curl -fs \"https://www.qdev.de/?location=downloads\" | grep -A1 -m1 \"ExifRenamer\" | tail -1 | cut -d \">\" -f2 | cut -d \" \" -f1)\n    expectedTeamID=\"MLF9FE35AM\"\n    ;;\nexpressvpn)\n    name=\"ExpressVPN\"\n    type=\"pkg\"\n    packageID=\"com.expressvpn.ExpressVPN\"\n    downloadURL=\"https://www.expressvpn.com/clients/latest/mac\"\n    appNewVersion=\"$(curl -fsIL https://www.expressvpn.com/clients/latest/mac | grep -i ^location | sed -n -e 's/^\\(.*\\)\\(_release\\)\\(.*\\)$/\\3\\2\\1/p' | sed -n -e 's/^.*mac_//p')\"\n    expectedTeamID=\"VMES9GFUQJ\"\n    ;;\nfacebookmessenger)\n    name=\"Messenger\"\n    type=\"dmg\"\n    downloadURL=\"https://www.messenger.com/messenger/desktop/downloadV2/?platform=mac\"\n    appNewVersion=$(curl -I \"${downloadURL}\" | awk -F': ' '/^location/ {print $2}' | grep -oE 'Messenger.*\\.dmg' | sed 's/Messenger\\.//;s/\\.dmg//')\n    expectedTeamID=\"V9WTTPBFK9\"\n    ;;\nfantastical)\n    # credit: Drew Diver (@grumpydrew on MacAdmins Slack)\n    name=\"Fantastical\"\n    type=\"zip\"\n    downloadURL=\"https://flexibits.com/fantastical/download\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*_([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"85C27NK92C\"\n    ;;\nfastscripts)\n    name=\"FastScripts\"\n    type=\"zip\"\n    downloadURL=$( curl -fs \"https://redsweater.com/fastscripts/appcast3.php\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f2 )\n    appNewVersion=$( curl -fs \"https://redsweater.com/fastscripts/appcast3.php\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f2 )\n    expectedTeamID=\"493CVA9A35\"\n    ;;\nfavro)\n    name=\"Favro\"\n    type=\"dmg\"\n    downloadURL=\"https://download.favro.com/FavroDesktop/macOS/x64/$(curl -fs https://download.favro.com/FavroDesktop/macOS/x64/Latest.html | cut -d \">\" -f1 | cut -d \"=\" -f 4 | cut -d '\"' -f1)\"\n    appNewVersion=\"$(curl -fs https://download.favro.com/FavroDesktop/macOS/x64/Latest.html | cut -d \">\" -f1 | cut -d \"=\" -f 4 | cut -d '\"' -f1 | sed -E 's/.*-([0-9.]*)\\.dmg/\\1/g')\"\n    expectedTeamID=\"PUA8Q354ZF\"\n    ;;\nfellow)\n    name=\"Fellow\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.fellow.app/desktop/1.3.11/darwin/stable/universal/Fellow-1.3.11-universal.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"2NF46HY8D8\"\n    ;;\nfigma)\n    name=\"Figma\"\n    type=\"zip\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://desktop.figma.com/mac-arm/Figma.zip\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://desktop.figma.com/mac/Figma.zip\"\n    fi\n    appNewVersion=\"$(getJSONValue \"$(curl -fs https://desktop.figma.com/mac/RELEASE.json)\" \"version\")\"\n    expectedTeamID=\"T8RA8NE3B7\"\n    ;;\nfilemakerpro)\n    name=\"FileMaker Pro\"\n    type=\"dmg\"\n    versionKey=\"BuildVersion\"\n    downloadURL=$(curl -fs https://www.filemaker.com/redirects/ss.txt | grep '\\\"PRO..MAC\\\"' | tail -1 | sed \"s|.*url\\\":\\\"\\(.*\\)\\\".*|\\\\1|\")\n    appNewVersion=$(curl -fs https://www.filemaker.com/redirects/ss.txt | grep '\\\"PRO..MAC\\\"' | tail -1 | sed \"s|.*fmp_\\(.*\\).dmg.*|\\\\1|\")\n    expectedTeamID=\"J6K4T76U7W\"\n    ;;\nfilezilla)\n    name=\"FileZilla\"\n    type=\"bz2\"\n    packageID=\"org.filezilla-project.filezilla\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        cpu_arch=\"arm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        cpu_arch=\"x86\"\n    fi\n    downloadURL=$(curl -A \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15\" -fsL https://filezilla-project.org/download.php\\?show_all=1 | grep macos-$cpu_arch | head -n 1 | awk -F '\"' '{print $2}' )\n    appNewVersion=$( curl -A \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_4) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/13.1 Safari/605.1.15\" -fsL https://filezilla-project.org/download.php\\?show_all=1 | grep macos-$cpu_arch | head -n 1 | awk -F '_' '{print $2}' )\n    expectedTeamID=\"5VPGKXL75N\"\n    blockingProcesses=( NONE )\n    ;;\n    \nfinaldraft11)\n    name=\"Final Draft 11\"\n    type=\"pkgInZip\"\n    downloadURL=\"https://www.finaldraft.com\"\n    downloadURL+=$(curl -fs \"https://www.finaldraft.com/support/install-final-draft/install-final-draft-11-macintosh/\" | xmllint --html --format - 2>/dev/null | grep -o \"/downloads/finaldraft.*.zip\")\n    appNewVersion=$(echo $downloadURL | cut -d 't' -f5 | cut -f1 -d \"M\")\n    expectedTeamID=\"7XUZ8R5736\"\n    ;;\nfinaldraft12)\n    name=\"Final Draft 12\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://www.finaldraft.com\"\n    downloadURL+=$(curl -fs \"https://www.finaldraft.com/support/install-final-draft/install-final-draft-12-macintosh/\" | xmllint --html --format - 2>/dev/null | grep -o \"/downloads/finaldraft.*.zip\")\n    appNewVersion=$(echo $downloadURL | cut -d 't' -f5 | cut -f1 -d \"M\")\n    expectedTeamID=\"7XUZ8R5736\"\n    ;;\nfindanyfile)\n    name=\"Find Any File\"\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://findanyfile.app/appcast2.php\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f2)\n    appNewVersion=$(curl -fs \"https://findanyfile.app/appcast2.php\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f2)\n    expectedTeamID=\"25856V4B4X\"\n    ;;\nfirefox)\n    name=\"Firefox\"\n    type=\"dmg\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-latest&os=osx&lang=en-US\"\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    printlog \"WARNING for ERROR: Label firefox and firefox_intl should not be used. Instead use firefoxpkg and firefoxpkg_intl as per recommendations from Firefox. It's not fully certain that the app actually gets updated here. firefoxpkg and firefoxpkg_intl will have built in updates and make sure the client is updated in the future.\" REQ\n    ;;\nfirefox_da)\n    name=\"Firefox\"\n    type=\"dmg\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-latest&amp;os=osx&amp;lang=da\"\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    printlog \"WARNING for ERROR: Label firefox, firefox_da and firefox_intl should not be used. Instead use firefoxpkg and firefoxpkg_intl as per recommendations from Firefox. It's not fully certain that the app actually gets updated here. firefoxpkg and firefoxpkg_intl will have built in updates and make sure the client is updated in the future.\" REQ\n    ;;\nfirefox_intl)\n    # This label will try to figure out the selected language of the user,\n    # and install corrosponding version of Firefox\n    name=\"Firefox\"\n    type=\"dmg\"\n    userLanguage=$(runAsUser defaults read .GlobalPreferences AppleLocale | tr '_' '-')\n    printlog \"Found language $userLanguage to be used for $name.\"\n    releaseURL=\"https://ftp.mozilla.org/pub/firefox/releases/latest/README.txt\"\n    until curl -fs $releaseURL | grep -q \"=$userLanguage\"; do\n        if [ ${#userLanguage} -eq 2 ]; then\n            break\n        fi\n        printlog \"No locale matching '$userLanguage', trying '${userLanguage:0:2}'\"\n        userLanguage=${userLanguage:0:2}\n    done\n    printlog \"Using language '$userLanguage' for download.\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=osx&lang=$userLanguage\"\n    if ! curl -sfL --output /dev/null -r 0-0 $downloadURL; then\n        printlog \"Download not found for '$userLanguage', using default ('en-US').\"\n        downloadURL=\"https://download.mozilla.org/?product=firefox-latest-ssl&os=osx\"\n    fi\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    printlog \"WARNING for ERROR: Label firefox and firefox_intl should not be used. Instead use firefoxpkg and firefoxpkg_intl as per recommendations from Firefox. It's not fully certain that the app actually gets updated here. firefoxpkg and firefoxpkg_intl will have built in updates and make sure the client is updated in the future.\" REQ\n    ;;\nfirefoxdeveloperedition)\n    name=\"Firefox Developer Edition\"\n    type=\"dmg\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=osx&lang=en-US\"\n    appNewVersion=$(curl -fsIL \"https://download.mozilla.org/?product=firefox-devedition-latest-ssl&os=osx&lang=en-US&_gl=1*1g4sufp*_ga*OTAwNTc3MjE4LjE2NTM2MDIwODM.*_ga_MQ7767QQQW*MTY1NDcyNTYyNy40LjEuMTY1NDcyNzA2MS4w\" | grep -i ^location | cut -d \"/\" -f7)\n    expectedTeamID=\"43AQ936H96\"\n    ;;\nfirefoxesr|\\\nfirefoxesrpkg)\n    name=\"Firefox\"\n    type=\"pkg\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-esr-pkg-latest-ssl&os=osx\"\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"FIREFOX_ESR\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    ;;\nfirefoxesr_intl)\n    # This label will try to figure out the selected language of the user,\n    # and install corrosponding version of Firefox ESR\n    name=\"Firefox\"\n    type=\"dmg\"\n    userLanguage=$(runAsUser defaults read .GlobalPreferences AppleLocale | tr '_' '-')\n    printlog \"Found language $userLanguage to be used for $name.\"\n    releaseURL=\"https://ftp.mozilla.org/pub/firefox/releases/latest-esr/README.txt\"\n    until curl -fs $releaseURL | grep -q \"=$userLanguage\"; do\n        if [ ${#userLanguage} -eq 2 ]; then\n            break\n        fi\n        printlog \"No locale matching '$userLanguage', trying '${userLanguage:0:2}'\"\n        userLanguage=${userLanguage:0:2}\n    done\n    printlog \"Using language '$userLanguage' for download.\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-esr-latest-ssl&os=osx&lang=$userLanguage\"\n    if ! curl -sfL --output /dev/null -r 0-0 $downloadURL; then\n        printlog \"Download not found for '$userLanguage', using default ('en-US').\"\n        downloadURL=\"https://download.mozilla.org/?product=firefox-esr-latest-ssl&os=osx\"\n    fi\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    printlog \"WARNING for ERROR: Label firefox and firefox_intl should not be used. Instead use firefoxpkg and firefoxpkg_intl as per recommendations from Firefox. It's not fully certain that the app actually gets updated here. firefoxpkg and firefoxpkg_intl will have built in updates and make sure the client is updated in the future.\" REQ\n    ;;\nfirefoxpkg)\n    name=\"Firefox\"\n    type=\"pkg\"\n    downloadURL=\"https://download.mozilla.org/?product=firefox-pkg-latest-ssl&os=osx&lang=en-US\"\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    ;;\nfirefoxpkg_intl)\n    # This label will try to figure out the selected language of the user,\n    # and install corrosponding version of Firefox ESR\n    name=\"Firefox\"\n    type=\"pkg\"\n    userLanguage=$(runAsUser defaults read .GlobalPreferences AppleLocale | tr '_' '-' | cut -f1 -d\"@\")\n    # userLanguage=\"sv-SE\" #for tests without international language setup\n    printlog \"Found language $userLanguage to be used for Firefox.\" WARN\n    releaseURL=\"https://ftp.mozilla.org/pub/firefox/releases/latest/README.txt\"\n    until curl -fs $releaseURL | grep -q \"=$userLanguage\"; do\n        if [ ${#userLanguage} -eq 2 ]; then\n            break\n        fi\n        printlog \"No locale matching '$userLanguage', trying '${userLanguage:0:2}'\"\n        userLanguage=${userLanguage:0:2}\n    done\n    printlog \"Using language $userLanguage for download.\" WARN\n    downloadURL=\"https://download.mozilla.org/?product=firefox-pkg-latest-ssl&os=osx&lang=$userLanguage\"\n    # https://download.mozilla.org/?product=firefox-pkg-latest-ssl&os=osx&lang=en-US\n    if ! curl -sfL --output /dev/null -r 0-0 \"$downloadURL\" ; then\n        printlog \"Download not found for that language. Using en-US\" WARN\n        downloadURL=\"https://download.mozilla.org/?product=firefox-pkg-latest-ssl&os=osx&lang=en-US\"\n    fi\n    firefoxVersions=$(curl -fs \"https://product-details.mozilla.org/1.0/firefox_versions.json\")\n    appNewVersion=$(getJSONValue \"$firefoxVersions\" \"LATEST_FIREFOX_VERSION\")\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( firefox )\n    ;;\nflexoptixapp)\n    name=\"FLEXOPTIX App\"\n    type=\"dmg\"\n    downloadURL=\"https://flexbox.reconfigure.me/download/electron/mac/x64/current\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i ^location | sed -E 's/.*-([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"C5JETSFPHL\"\n    ;;\nflowjo)\n    name=\"FlowJo\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fs \"https://www.flowjo.com/solutions/flowjo/downloads\" | grep -i -o -E \"https.*\\.dmg\")\"\n    appNewVersion=$(echo \"${downloadURL}\" | tr \"-\" \"\\n\" | grep dmg | sed -E 's/([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"C79HU5AD9V\"\n    ;;\nflstudiomac)\n    name=\"flstudiomac\"\n    type=\"pkgInDmg\"\n    packageID=\"com.Image-Line.pkg.flcloud.plugins\ncom.Image-Line.pkg.24ONLINE\"\n    downloadURL=\"https://support.image-line.com/redirect/flstudio_mac_installer\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15\" )\n    appNewVersion=$(curl -fsL \"https://support.image-line.com/api.php?call=get_version_info&callback=il_get_version_info_cb&prod_type=undefined\" | \\\n        sed 's/var get_version_info_res;get_version_info_res = il_get_version_info_cb(//;s/);$//' | \\\n        sed 's/\\\\//g' | \\\n        grep -o '\"os\":\"mac\",\"version\":\"[0-9.]*\"' | \\\n        sed 's/.*\"version\":\"\\([0-9.]*\\)\".*/\\1/')\n    expectedTeamID=\"N68WEP5ZZZ\"\n    ;;\n    \nflux)\n    name=\"Flux\"\n    type=\"zip\"\n    downloadURL=\"https://justgetflux.com/mac/Flux.zip\"\n    expectedTeamID=\"VZKSA7H9J9\"\n    ;;\n    \nflycut)\n    name=\"Flycut\"\n    type=\"zip\"\n    archiveName=\"Flycut.[0-9.]*.zip\"\n    downloadURL=\"$(downloadURLFromGit TermiT Flycut)\"\n    appNewVersion=$(versionFromGit TermiT Flycut )\n    expectedTeamID=\"S8JLSG5ES7\"\n;;\nfontbase)\n    name=\"FontBase\"\n    type=\"dmg\"\n    appNewVersion=$(curl -s https://releases.fontba.se/mac/latest-mac.yml | grep version: | awk -F ':' '{print $2}' | sed -e 's/^ *//' -e 's/ *$//')\n    downloadURL=\"https://releases.fontba.se/mac/FontBase-$appNewVersion.dmg\"\n    expectedTeamID=\"457B89RFCZ\"\n    ;;\nfontexplorer)\n    name=\"FontExplorer X Pro\"\n    type=\"dmg\"\n    packageID=\"com.linotype.FontExplorerX\"\n    downloadURL=\"http://www.fontexplorerx.com/download/free-trial/Mac/\"\n    appNewVersion=$( curl -fsL http://fex.linotype.com/update/client/mac/pro/version.plist | grep string | tail -n 1 | sed 's/[^0-9.]//g' )\n    expectedTeamID=\"2V7G2B7WG4\"\n    ;;\n\nfork)\n    name=\"Fork\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fs \"https://git-fork.com/update/feed.xml\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs \"https://git-fork.com/update/feed.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f2)\"\n    expectedTeamID=\"Q6M7LEEA66\"\n    ;;\nfranz)\n    name=\"Franz\"\n    type=\"dmg\"\n    if [[ $(arch) = \"arm64\" ]]; then\n        archiveName=\"Franz-[0-9.]*-arm64.dmg\" \n    else \n        archiveName=\"Franz-[0-9.]*.dmg\" \n    fi\n    downloadURL=\"$(downloadURLFromGit meetfranz franz)\"\n    appNewVersion=\"$(versionFromGit meetfranz franz)\"\n    expectedTeamID=\"TAC9P63ANZ\"\n    ;;\n\nfreeplane)\n    name=\"Freeplane\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fsL \"https://sourceforge.net/projects/freeplane/rss?path=/freeplane%20stable/archive\" | xpath '//rss/channel/item[1]/title' 2>/dev/null | awk -F'/' '{ print $(NF-2) }')\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=$(curl -fsL \"https://sourceforge.net/projects/freeplane/rss?path=/freeplane%20stable/archive/${appNewVersion}\" | grep -oE '<link>(.*-apple.dmg/download)</link>' | tail -1 | sed 's/<link>//;s/<\\/link>//')\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=$(curl -fsL \"https://sourceforge.net/projects/freeplane/rss?path=/freeplane%20stable/archive/${appNewVersion}\" | grep -oE '<link>(.*-intel.dmg/download)</link>' | tail -1 | sed 's/<link>//;s/<\\/link>//')\n    fi\n    expectedTeamID=\"CSHVD99Y7K\"\n    ;;\nfront)\n    name=\"Front\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://dl.frontapp.com/macos/Front-arm64.dmg\"\n        appNewVersion=$(curl -fs \"https://dl.frontapp.com/desktop/updates/latest/mac-arm64/latest-mac.yml\" | grep -i version | cut -d \" \" -f2)\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://dl.frontapp.com/macos/Front.dmg\"\n        appNewVersion=$(curl -fs \"https://dl.frontapp.com/desktop/updates/latest/mac/latest-mac.yml\" | grep -i version | cut -d \" \" -f2)\n    fi\n    expectedTeamID=\"X549L7572J\"\n    Company=\"FrontApp. Inc.\"\n    ;;\nfsmonitor)\n    name=\"FSMonitor\"\n    type=\"zip\"\n    downloadURL=$(curl --location --fail --silent \"https://fsmonitor.com/FSMonitor/Archives/appcast2.xml\" | xpath '//rss/channel/item[last()]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    expectedTeamID=\"V85GBYB7B9\"\n    ;;\nfujifilmwebcam)\n     name=\"FUJIFILM X Webcam 2\"\n     type=\"pkg\"\n     downloadURL=$(curl -fs \"https://fujifilm-x.com/en-us/support/download/software/x-webcam/\" | grep \"https.*pkg\" | sed -E 's/.*(https:\\/\\/dl.fujifilm-x\\.com\\/support\\/software\\/.*\\.pkg[^\\<]).*/\\1/g' | sed -e 's/^\"//' -e 's/\"$//')\n     appNewVersion=$( echo “${downloadURL}” | sed -E 's/.*XWebcamIns([0-9]*).*/\\1/g' | sed -E 's/([0-9])([0-9]).*/\\1\\.\\2/g')\n     expectedTeamID=\"34LRP8AV2M\"\n     ;;\ngarminexpress)\n    name=\"Garmin Express\"\n    blockingProcesses=( \"Garmin Express\" \"Garmin Express Service\" )\n    type=\"pkgInDmg\"\n    downloadURL=\"https://download.garmin.com/omt/express/GarminExpress.dmg\"\n    garminfaqURL=$(curl -sf https://support.garmin.com/capi/content/en-US/\\?productID\\=168768\\&tab\\=software\\&topicTag\\=region_softwareproduct\\&productTagName\\=topic_express0\\&ct\\=content\\&mr\\=5\\&locale\\=en-US\\&si\\=0\\&tags\\=topic_express0%2Cregion_softwareproduct%2C%2C | tr \"{\" \"\\n\" | grep \"Garmin Express\" | tr \",\" \"\\n\" | grep \"contentURL\" | awk -F \"\\\"\" '{print$4}')\n    appNewVersion=\"$(curl -sfL $garminfaqURL | tr '><' \"\\n\" | grep \"Garmin Express for Mac\" | head -1 | awk 'sub(/.*Mac: */,\"\"){f=1} f{if ( sub(/ *as of.*/,\"\") ) f=0; print$2}').0\"\n    expectedTeamID=\"72ES32VZUA\"\n    appName=\"Garmin Express.app\"\n    ;;\ngather|\\\ngathertown)\n    name=\"Gather\"\n    type=\"dmg\"\n    appNewVersion=\"$(versionFromGit gathertown gather-town-desktop-releases)\"\n    downloadURL=\"$(downloadURLFromGit gathertown gather-town-desktop-releases)\"\n    archiveName=\"Gather-${appNewVersion}-universal.dmg\"\n    expectedTeamID=\"69MCJ5CRDW\"\n    ;;\n\ngdevelop)\n    name=\"GDevelop 5\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        archiveName=\"GDevelop-5-[0-9.]*-arm64.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        archiveName=\"GDevelop-5-[0-9.]*.dmg\" \n    fi\n    appNewVersion=\"$(versionFromGit 4ian GDevelop)\"\n    downloadURL=\"$(downloadURLFromGit 4ian GDevelop)\"\n    expectedTeamID=\"5CG65LEVUK\"\n    ;;\ngeneiousprime)\n    name=\"Geneious Prime\"\n    type=\"dmg\"\n    downloadURL=\"https://assets.geneious.com/installers/geneious/release/latest/Geneious_Prime_mac64_with_jre.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"3BTDDQD3L6\"\n    ;;\ngephi)\n\t# An open-source software that visualizes and manipulates large graphs with ease, featuring a user-friendly interface and powerful real-time capabilities\n    name=\"Gephi\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        archiveName=\"gephi-[0-9.]*-macos-aarch64.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        archiveName=\"gephi-[0-9.]*-macos-x64.dmg\"\n    fi\n    appNewVersion=\"$(versionFromGit gephi gephi)\"\n    downloadURL=\"$(downloadURLFromGit gephi gephi)\"\n    expectedTeamID=\"3D8H75J8UL\"\n    ;;\ngfxcardstatus)\n    name=\"gfxCardStatus\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit codykrieger gfxCardStatus)\"\n    appNewVersion=\"$(versionFromGit codykrieger gfxCardStatus)\"\n    expectedTeamID=\"LF22FTQC25\"\n    ;;\ngimp)\n    name=\"GIMP\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=https://$(curl -fs https://www.gimp.org/downloads/ | grep -m 1 -o \"download.*gimp-.*-arm64.dmg\")\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=https://$(curl -fs https://www.gimp.org/downloads/ | grep -m 1 -o \"download.*gimp-.*-x86_64.dmg\")\n    fi\n    appNewVersion=$(echo $downloadURL | cut -d \"-\" -f 2)\n    expectedTeamID=\"T25BQ8HSJF\"\n    ;;\ngithubdesktop)\n    name=\"GitHub Desktop\"\n    type=\"zip\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://central.github.com/deployments/desktop/desktop/latest/darwin-arm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://central.github.com/deployments/desktop/desktop/latest/darwin\"\n    fi\n    appNewVersion=$(curl -fsL https://central.github.com/deployments/desktop/desktop/changelog.json | awk -F '{' '/\"version\"/ { print $2 }' | sed -E 's/.*,\\\"version\\\":\\\"([0-9.]*)\\\".*/\\1/g')\n    expectedTeamID=\"VEKTX9H2N7\"\n    ;;\ngitkraken)\n    name=\"gitkraken\"\n    type=\"dmg\"\n    appNewVersion=$( curl -sfL https://www.gitkraken.com/download | grep -o 'Latest release: [0-9.]*' | grep -o '[0-9.]*' )\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://release.gitkraken.com/darwin-arm64/installGitKraken.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://release.gitkraken.com/darwin/installGitKraken.dmg\"\n    fi\n    expectedTeamID=\"T7QVVUTZQ8\"\n    blockingProcesses=( \"GitKraken\" )\n    ;;\nglpiagent)\n    name=\"GLPI-agent\"\n    type=\"pkg\"\n    packageID=\"com.teclib.glpi-agent\"\n    appNewVersion=\"$(versionFromGit glpi-project glpi-agent)\"\n    downloadURL=\"https://github.com/glpi-project/glpi-agent/releases/download/${appNewVersion}/GLPI-Agent-${appNewVersion}_\"$(uname -m)\".pkg\"\n    versionKey=\"CFBundleShortVersionString\"  \n    expectedTeamID=\"H7XJV96LX2\"\n    blockingProcesses=( NONE )\n    ;;\ngolang)\n    name=\"GoLang\"\n    type=\"pkg\"\n    packageID=\"org.golang.go\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://go.dev$(curl -fs \"https://go.dev/dl/\" | grep -i \"downloadBox\" | grep \"darwin-arm\" | tr '\"' '\\n' | grep \"pkg\")\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://go.dev$(curl -fs \"https://go.dev/dl/\" | grep -i \"downloadBox\" | grep \"darwin-amd\" | tr '\"' '\\n' | grep \"pkg\")\"\n    fi\n    appNewVersion=\"$( echo \"${downloadURL}\" | sed -E 's/.*\\/(go[0-9.]*)\\..*/\\1/g' )\" # Version includes letters \"go\" in the beginning\n    expectedTeamID=\"EQHXZ8M8AV\"\n    blockingProcesses=( NONE )\n    ;;\ngoogleadseditor)\n    name=\"Google Ads Editor\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.google.com/adwords_editor/google_ads_editor.dmg\"\n    appNewVersion=\"$(curl -s \"https://support.google.com/google-ads/editor/topic/13728\" | grep -E -o \"Google Ads Editor version.{1,4}\" | head -1 | tail -c 4)\"\n    appCustomVersion(){cat /Applications/Google\\ Ads\\ Editor.app/Contents/Versions/*/Google\\ Ads\\ Editor.app/Contents/locale/content/welcome1/welcome1-en-US.htm | grep -o -E \" about version.{0,4}\" | tail -c 4}\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngooglechrome)\n    name=\"Google Chrome\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.google.com/chrome/mac/universal/stable/GGRO/googlechrome.dmg\"\n    appNewVersion=$(curl -s https://omahaproxy.appspot.com/history | awk -F',' '/mac_arm64,stable/{print $3; exit}')\n    expectedTeamID=\"EQHXZ8M8AV\"\n    printlog \"WARNING for ERROR: Label googlechrome should not be used. Instead use googlechromepkg as per recommendations from Google. It's not fully certain that the app actually gets updated here. googlechromepkg will have built in updates and make sure the client is updated in the future.\" REQ\n    ;;\ngooglechromeenterprise)\n    name=\"Google Chrome\"\n    type=\"pkg\"\n    downloadURL=\"https://dl.google.com/dl/chrome/mac/universal/stable/gcem/GoogleChrome.pkg\"\n    appNewVersion=$(getJSONValue \"$(curl -fsL \"https://versionhistory.googleapis.com/v1/chrome/platforms/mac/channels/stable/versions/all/releases?filter=fraction>0.01,endtime=none&order_by=version%20desc\" )\" \"releases[0].version\" )\n    expectedTeamID=\"EQHXZ8M8AV\"\n    updateTool=\"/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/GoogleSoftwareUpdateAgent.app/Contents/MacOS/GoogleSoftwareUpdateAgent\"\n    updateToolArguments=( -runMode oneshot -userInitiated YES )\n    updateToolRunAsCurrentUser=1\n    ;;\ngooglechromepkg)\n    name=\"Google Chrome\"\n    type=\"pkg\"\n    #\n    # Note: this url acknowledges that you accept the terms of service\n    # https://support.google.com/chrome/a/answer/9915669\n    #\n    downloadURL=\"https://dl.google.com/chrome/mac/stable/accept_tos%3Dhttps%253A%252F%252Fwww.google.com%252Fintl%252Fen_ph%252Fchrome%252Fterms%252F%26_and_accept_tos%3Dhttps%253A%252F%252Fpolicies.google.com%252Fterms/googlechrome.pkg\"\n    appNewVersion=$(getJSONValue \"$(curl -fsL \"https://versionhistory.googleapis.com/v1/chrome/platforms/mac/channels/stable/versions/all/releases?filter=fraction>0.01,endtime=none&order_by=version%20desc\" )\" \"releases[0].version\" )\n    expectedTeamID=\"EQHXZ8M8AV\"\n    updateTool=\"/Library/Google/GoogleSoftwareUpdate/GoogleSoftwareUpdate.bundle/Contents/Resources/GoogleSoftwareUpdateAgent.app/Contents/MacOS/GoogleSoftwareUpdateAgent\"\n    updateToolArguments=( -runMode oneshot -userInitiated YES )\n    updateToolRunAsCurrentUser=1\n    ;;\ngoogledrive|\\\ngoogledrivefilestream)\n    # credit: Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"Google Drive File Stream\"\n    type=\"pkgInDmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n       packageID=\"com.google.drivefs.arm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n       packageID=\"com.google.drivefs.x86_64\"\n    fi\n    appNewVersion=$(curl -s \"https://community.chocolatey.org/packages/googledrive\" | xmllint --html --xpath 'substring-after(string(//h1[@class=\"mb-0 text-center\"]), \"Google Drive\")' - 2> /dev/null)\n    downloadURL=\"https://dl.google.com/drive-file-stream/GoogleDriveFileStream.dmg\" # downloadURL=\"https://dl.google.com/drive-file-stream/GoogleDrive.dmg\"\n    blockingProcesses=( \"Google Docs\" \"Google Drive\" \"Google Sheets\" \"Google Slides\" )\n    appName=\"Google Drive.app\"\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngoogledrivebackupandsync)\n    name=\"Backup and Sync\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.google.com/drive/InstallBackupAndSync.dmg\"\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngoogleearth)\n    name=\"Google Earth Pro\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://dl.google.com/earth/client/advanced/current/GoogleEarthProMac-Intel.dmg\"\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngooglejapaneseinput)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"GoogleJapaneseInput\"\n    type=\"pkgInDmg\"\n    pkgName=\"GoogleJapaneseInput.pkg\"\n    downloadURL=\"https://dl.google.com/japanese-ime/latest/GoogleJapaneseInput.dmg\"\n    blockingProcesses=( NONE )\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngooglesoftwareupdate)\n    name=\"Install Google Software Update\"\n    type=\"pkgInDmg\"\n    pkgName=\"Install Google Software Update.app/Contents/Resources/GSUInstall.pkg\"\n    downloadURL=\"https://dl.google.com/mac/install/googlesoftwareupdate.dmg\"\n    blockingProcesses=( NONE )\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\ngosign)\n    name=\"GoSign-Desktop\"\n    type=\"dmg\"\n    downloadURL=\"https://rinnovofirma.infocert.it/gosign/download/darwin/latest/\"\n    expectedTeamID=\"QC25859FX9\"\n    appName=\"GoSign-Desktop.app\"\n    ;;\ngotiengviet)\n    name=\"GoTiengViet\"\n    type=\"dmg\"\n    downloadURL=\"https://www.trankynam.com/gotv/downloads/GoTiengViet.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"KHEMQ2FD9E\"\n    ;;\ngotomeeting)\n    # credit: @matins\n    name=\"GoToMeeting\"\n    type=\"dmg\"\n    downloadURL=\"https://link.gotomeeting.com/latest-dmg\"\n    expectedTeamID=\"GFNFVT632V\"\n    ;;\ngpgsuite)\n    # credit: Micah Lee (@micahflee)\n    name=\"GPG Suite\"\n    type=\"pkgInDmg\"\n    pkgName=\"Install.pkg\"\n    downloadURL=$(curl -s https://gpgtools.com/ | grep https://releases.gpgtools.com/GPG_Suite- | grep Download | cut -d'\"' -f4)\n    appNewVersion=$(echo $downloadURL | cut -d \"-\" -f 2 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"PKV8ZPD836\"\n    blockingProcesses=( \"GPG Keychain\" )\n    ;;\ngpgsync)\n    name=\"GPG Sync\"\n    type=\"pkg\"\n    packageID=\"org.firstlook.gpgsync\"\n    downloadURL=\"$(downloadURLFromGit firstlookmedia gpgsync)\"\n    appNewVersion=\"$(versionFromGit firstlookmedia gpgsync)\"\n    expectedTeamID=\"P24U45L8P5\"\n    ;;\ngrammarly)\n     name=\"Grammarly Desktop\"\n     type=\"dmg\"\n     packageID=\"com.grammarly.ProjectLlama\"\n     downloadURL=\"https://download-mac.grammarly.com/Grammarly.dmg\"\n     expectedTeamID=\"W8F64X92K3\"\n     # appName=\"Grammarly Installer.app\"\n     installerTool=\"Grammarly Installer.app\"\n     CLIInstaller=\"Grammarly Installer.app/Contents/MacOS/Grammarly Desktop\"\n;;\ngrandperspective)\n    name=\"GrandPerspective\"\n    type=\"dmg\"\n    downloadURL=\"https://sourceforge.net/projects/grandperspectiv/files/latest/download\"\n    appNewVersion=$(curl -s https://sourceforge.net/projects/grandperspectiv/files/grandperspective/ | grep -A1 'Click to enter' | head -1 | sed -nre 's/^[^0-9]*(([0-9]+\\.)*[0-9]+).*/\\1/p')\n    expectedTeamID=\"3Z75QZGN66\"\n    ;;\ngrasshopper)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Grasshopper\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.grasshopper.com/Grasshopper.dmg\"\n    pkgName=\"Grasshopper.dmg\"\n    expectedTeamID=\"KD6L2PTK2Q\"\n    ;;\ngrooveomnidialerenterpriseedition)\n\tname=\"Groove Omnidialer Enterprise Edition\"\n\ttype=\"zip\"\n\tappNewVersion=$( curl -fs 'https://groove-dialer.s3.us-west-2.amazonaws.com/electron/enterprise/latest-mac.yml' | grep ^version: | cut -c 10-21 ) \n\tdownloadURL=\"https://groove-dialer.s3.us-west-2.amazonaws.com/electron/enterprise/Groove+OmniDialer+Enterprise+Edition-\"$appNewVersion\"-universal-mac.zip\" \n\texpectedTeamID=\"ZDYDJ5XPF3\"\n;;\ngyazo)\n    # credit: @matins\n    name=\"Gyazo\"\n    type=\"dmg\"\n    appNewVersion=$(curl -is \"https://formulae.brew.sh/cask/gyazo\" | grep 'Current version:' | grep -o \"Gyazo.*dmg\" | cut -d \"-\" -f 2 | awk -F \".dmg\" '{print $1}')\n    downloadURL=\"https://files.gyazo.com/setup/Gyazo-${appNewVersion}.dmg\"\n    expectedTeamID=\"9647Y3B7A4\"\n    ;;\ngyazogif)\n    # credit: @matins\n    # This is identical to gyazo, but the download contains two apps on the DMG\n    name=\"Gyazo GIF\"\n    type=\"dmg\"\n    appNewVersion=$(curl -is \"https://formulae.brew.sh/cask/gyazo\" | grep 'Current version:' | grep -o \"Gyazo.*dmg\" | cut -d \"-\" -f 2 | awk -F \".dmg\" '{print $1}')\n    downloadURL=\"https://files.gyazo.com/setup/Gyazo-${appNewVersion}.dmg\"\n    expectedTeamID=\"9647Y3B7A4\"\n    ;;\nhancock)\n    # Credit: Bilal Habib @Pro4TLZZZ\n    name=\"Hancock\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit JeremyAgost Hancock )\n    appNewVersion=$(versionFromGit JeremyAgost Hancock )\n    expectedTeamID=\"SWD2B88S58\"\n    ;;\nhandbrake)\n    name=\"HandBrake\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit HandBrake HandBrake )\n    appNewVersion=$(versionFromGit HandBrake HandBrake )\n    expectedTeamID=\"5X9DE89KYV\"\n    ;;\nhazel)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Hazel\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsI https://www.noodlesoft.com/Products/Hazel/download | grep -i \"^location\" | awk '{print $2}' | tr -d '\\r\\n')\n    appNewVersion=$(curl -fsI https://www.noodlesoft.com/Products/Hazel/download | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"86Z3GCJ4MF\"\n    ;;\nhmavpn)\nname=\"HMA-VPN\"\ntype=\"pkgInDmg\"\npackageID=\"com.privax.osx.provpn\"\ndownloadURL=\"https://s-mac-sl.avcdn.net/macosx/privax/HMA-VPN.dmg\"\nappNewVersion=\"\"\nexpectedTeamID=\"96HLSU34RN\"\n;;\nhomebrew)\n    name=\"Homebrew\"\n    type=\"pkg\"\n    packageID=\"sh.brew.homebrew\"\n    downloadURL=\"$(downloadURLFromGit Homebrew brew)\"\n    appNewVersion=\"$(versionFromGit Homebrew brew)\"\n    expectedTeamID=\"927JGANW46\"\n    archiveName=\"Homebrew.pkg\"\n    ;;\nhoppscotch)\n    name=\"Hoppscotch\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        archiveName=\"Hoppscotch_mac_aarch64.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        archiveName=\"Hoppscotch_mac_x64.dmg\" \n    fi\n    downloadURL=\"$(downloadURLFromGit hoppscotch releases)\"\n    appNewVersion=\"$(versionFromGit hoppscotch releases)\"\n    expectedTeamID=\"XBK86CMQGZ\"\n    ;;\nhoros)\n    name=\"Horos\"\n    type=\"dmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    if [[ $(arch) == \"arm64\" ]]; then\n    \timageName=$(curl -fs https://horosproject.org/horos-content/ | grep \"arm64\" | tail -1 | sed \"s|.*href=\\\"\\(.*\\)\\\">Horos.*|\\\\1|\")\n        downloadURL=\"https://horosproject.org/horos-content/\"$imageName\"\"\n        appNewVersion=$(curl -fs https://horosproject.org/horos-content/ | grep \"arm64\" | tail -1 | sed \"s|.*href=\\\"\\(.*\\)\\\">Horos.*|\\\\1|\" | sed -e 's/.*_\\(.*\\)_.*/\\1/')\n    elif [[ $(arch) == \"i386\" ]]; then\n    \timageName=$(curl -fs https://horosproject.org/horos-content/ | grep -v -e \"Apple\" -e \"arm64\" -e \"Nightly\" | grep \".dmg\" | tail -1 | sed \"s|.*href=\\\"\\(.*\\)\\\">Horos.*|\\\\1|\")\n        downloadURL=\"https://horosproject.org/horos-content/\"$imageName\"\"\n        appNewVersion=$(curl -fs https://horosproject.org/horos-content/ | grep -v -e \"Apple\" -e \"arm64\" -e \"Nightly\" | grep \".dmg\" | tail -1 | sed \"s|.*href=\\\"\\(.*\\)\\\">Horos.*|\\\\1|\" | sed -e 's/.*Horos\\(.*\\).dmg.*/\\1/')\n    fi\n    expectedTeamID=\"TPT6TVH8UY\"\n    ;;\nhot)\n    name=\"Hot\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit macmade Hot)\"\n    appNewVersion=\"$(versionFromGit macmade Hot)\"\n    expectedTeamID=\"326Y53CJMD\"\n    ;;\nhoudahspot)\n    name=\"HoudahSpot\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs https://www.houdah.com/houdahSpot/updates/cast6.php | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs https://www.houdah.com/houdahSpot/updates/cast6.php | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    expectedTeamID=\"DKGQD8H8ZY\"\n    ;;\nhpeasyadmin)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"HP Easy Admin\"\n    type=\"zip\"\n    downloadURL=\"https://ftp.hp.com/pub/softlib/software12/HP_Quick_Start/osx/Applications/HP_Easy_Admin.app.zip\"\n    expectedTeamID=\"6HB5Y2QTA3\"\n    ;;\nhpeasystart)\n    name=\"HP Easy Start\"\n    type=\"zip\"\n    downloadURL=\"https://ftp.hp.com/pub/softlib/software12/HP_Quick_Start/osx/HP_Easy_Start/HP_Easy_Start.app.zip\"\n    expectedTeamID=\"6HB5Y2QTA3\"\n    ;;\nhubstaff)\n    name=\"Hubstaff\"\n    type=\"dmg\"\n    downloadURL=\"https://app.hubstaff.com/download/osx\"\n    appNewVersion=\"\"\n    expectedTeamID=\"24BCJT3JW2\"\n    ;;\nhuddly)\n    name=\"Huddly\"\n    type=\"dmg\"\n    downloadURL=\"https://app.huddly.com/download/latest/osx\"\n    appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i '^content-disposition' | sed -E 's/.*-([0-9]+\\.[0-9]+\\.[0-9]+)-.*/\\1/g')\"\n    expectedTeamID=\"J659R47HZT\"\n    ;;\nhype)\n    name=\"Hype4\"\n    type=\"dmg\"\n    packageID=\"com.tumult.Hype4\"\n    downloadURL=\"https://static.tumult.com/hype/download/Hype.dmg\"\n    appNewVersion=$( curl -fsL https://tumult.com/hype/download/all/ | grep Ongoing | awk -F '<' '{print $4}' | sed 's/[^0-9.]//g' )\n    expectedTeamID=\"8J356DM772\"\n    blockingProcesses=( NONE )\n    ;;\nhyper)\n    name=\"Hyper\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n      archiveName=\"mac-x64.dmg\"\n    elif [[ $(arch) == arm64 ]]; then\n      archiveName=\"mac-arm64.dmg\"\n    fi\n    downloadURL=$(downloadURLFromGit vercel hyper )\n    appNewVersion=$(versionFromGit vercel hyper)\n    expectedTeamID=\"JW6Y669B67\"\n    ;;\ni1profiler)\n    name=\"i1Profiler\"\n    type=\"pkgInZip\"\n    downloadURL=$(curl -fs \"https://downloads.xrite.com/downloads/autoupdate/i1profiler_mac_appcast.xml\" | xmllint --xpath '//rss/channel/item[1]/enclosure/@url' - | sed -E 's/.*url=\"([^\"]+)\".*/\\1/')\n    appNewVersion=$(curl -fs \"https://downloads.xrite.com/downloads/autoupdate/i1profiler_mac_appcast.xml\" | xmllint --xpath '//rss/channel/item[1]/enclosure/@sparkle:shortVersionString' - | sed -E 's/.*shortVersionString=\"([^\"]+)\".*/\\1/')\n    expectedTeamID=\"2K7GT73B4R\"\n    ;;\nibarcoder)\n    name=\"iBarcoder\"\n    type=\"dmg\"\n    downloadURL=\"https://cristallight.com/Downloads/mac/ibarcoder.dmg\"\n    appNewVersion=\"$(curl -fs \"https://cristallight.com/iBarcoder/\" | grep -i version: | head -1 | awk '{print $2}')\"\n    expectedTeamID=\"JAXVB9AH9M\"\n    ;;\nibmnotifier)\n    name=\"IBM Notifier\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit IBM mac-ibm-notifications)\"\n    #appNewVersion=\"$(versionFromGit IBM mac-ibm-notifications)\"\n    appNewVersion=\"$(curl -sLI \"https://github.com/IBM/mac-ibm-notifications/releases/latest\" | grep -i \"^location\" | tr \"/\" \"\\n\" | tail -1 | cut -d \"-\" -f2 | sed 's/[^0-9\\.]//g')\"\n    expectedTeamID=\"PETKK2G752\"\n    ;;\nice)\n\t# A versatile macOS menu bar management tool that allows users to hide, show, and rearrange menu bar items\n    name=\"Ice\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit jordanbaird Ice)\"\n    appNewVersion=\"$(versionFromGit jordanbaird Ice)\"\n    expectedTeamID=\"K2ATHQPJDP\"\n    ;;\nicons)\n    name=\"Icons\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit SAP macOS-icon-generator )\n    appNewVersion=$(versionFromGit SAP macOS-icon-generator )\n    expectedTeamID=\"7R5ZEU67FQ\"\n    ;;\nidrive)\n    name=\"IDrive\"\n    type=\"pkgInDmg\"\n    pkgName=\"IDrive.pkg\"\n    downloadURL=$(curl -fs https://static.idriveonlinebackup.com/downloads/version_mac.js | tr -d '\\n\\t' | sed -E 's/.*(https.*dmg).*/\\1/g')\n    appNewVersion=$(curl -fs https://static.idriveonlinebackup.com/downloads/version_mac.js | tr -d '\\n\\t' | sed -E 's/.*mac_vernum\\=\\\"Version\\ ([0-9.]*).*/\\1/g')\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"JWDCNYZ922\"\n    blockingProcesses=( NONE )\n    ;;\nidrivethin)\n    name=\"IDrive\"\n    type=\"pkgInDmg\"\n    pkgName=\"IDriveThin.pkg\"\n    downloadURL=$(curl -fs https://static.idriveonlinebackup.com/downloads/idrivethin/thin_version.js | tr -d '\\n\\t' | sed -E 's/.*thinclient-mac([^;]*).*/\\1/g' | sed -E 's/.*(https.*dmg).*/\\1/g')\n    appNewVersion=$(curl -fs https://static.idriveonlinebackup.com/downloads/idrivethin/thin_version.js | tr -d '\\n\\t' | sed -E 's/.*thin\\_mac\\_ver\\=\\\"Version\\ ([0-9.]*).*/\\1/g')\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"JWDCNYZ922\"\n    blockingProcesses=( NONE )\n    ;;\nigv)\n    name=\"IGV\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs \"https://igv.org/doc/desktop/DownloadPage/\" | grep -oE \"https://data.broadinstitute.org/igv/projects/downloads/.*/IGV_MacApp_.*_WithJava\\.zip\")\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*IGV_MacApp_([0-9]+(\\.[0-9]+)*).*/\\1/')\"\n    appName=\"${name}_${appNewVersion}.app\"\n    expectedTeamID=\"R787A9V6VV\"\n    ;;\n\niina)\n    name=\"IINA\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit iina iina )\n    appNewVersion=$(versionFromGit iina iina )\n    expectedTeamID=\"67CQ77V27R\"\n    ;;\nimageoptim)\n    name=\"imageoptim\"\n    type=\"tbz\"\n    packageID=\"net.pornel.ImageOptim\"\n    downloadURL=\"https://imageoptim.com/ImageOptim.tbz2\"\n    appNewVersion=$( curl -fsL https://imageoptim.com/appcast.xml | grep \"title\" | tail -n 1 | sed 's/[^0-9.]//g' )\n    expectedTeamID=\"59KZTZA4XR\"\n    blockingProcesses=( NONE )\n    ;;\nimazingprofileeditor)\n    # Credit: Bilal Habib @Pro4TLZZ\n    name=\"iMazing Profile Editor\"\n    type=\"dmg\"\n    downloadURL=\"https://downloads.imazing.com/mac/iMazing-Profile-Editor/iMazingProfileEditorMac.dmg\"\n    appNewVersion=$(curl -s https://imazing.com/profile-editor/download | grep -2 'Version' | head -4 | sed -nE 's/.*<b>([0-9\\.]+)<\\/b>.*/\\1/p' )\n    expectedTeamID=\"J5PR93692Y\"\n    ;;\ninetclearreportsdesigner)\n    name=\"i-Net Clear Reports Designer\"\n    type=\"appindmg\"\n    appNewVersion=$(curl -s https://www.inetsoftware.de/products/clear-reports/designer | grep \"Latest release:\" | cut -d \">\" -f 4 | cut -d \\  -f 2)\n    downloadURL=$(curl -s https://www.inetsoftware.de/products/clear-reports/designer | grep $appNewVersion | grep dmg | cut -d \">\" -f 12 | cut -d \\\" -f 2)\n    expectedTeamID=\"9S2Y97K3D9\"\n    blockingProcesses=( \"clear-reports-designer\" )\n    #forcefulQuit=YES\n    ;;\ninkscape)\n    name=\"Inkscape\"\n    type=\"dmg\"\n    appCustomVersion() { /Applications/Inkscape.app/Contents/MacOS/inkscape --version | cut -d \" \" -f2 }\n    appNewVersion=$(curl -fsL https://inkscape.org/release/  | grep \"<title>\" | grep -o -e \"[0-9.]*\")\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://media.inkscape.org/dl/resources/file/$(curl -fsL https://inkscape.org/release/inkscape-{$appNewVersion}/mac-os-x/dmg-arm64/dl/ | grep -o -m1 \"Inkscape-.*.dmg\")\"\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://media.inkscape.org/dl/resources/file/$(curl -fsL https://inkscape.org/release/inkscape-{$appNewVersion}/mac-os-x/dmg/dl/ | grep -o -m1 \"Inkscape-.*.dmg\")\"\n    fi\n    expectedTeamID=\"SW3D6BB6A6\"\n    ;;\ninsomnia)\n    name=\"Insomnia\"\n    type=\"dmg\"\n    #downloadURL=$(downloadURLFromGit kong insomnia)\n    downloadURL=$(curl -fs \"https://updates.insomnia.rest/downloads/mac/latest?app=com.insomnia.app&source=website\" | grep -o \"https.*\\.dmg\")\n    #appNewVersion=$(versionFromGit kong insomnia)\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*\\/Insomnia.Core.([0-9.]*)\\.dmg/\\1/')\n    expectedTeamID=\"FX44YY62GV\"\n    ;;\ninstallomator|\\\ninstallomator_theile)\n    name=\"Installomator\"\n    type=\"pkg\"\n    packageID=\"com.scriptingosx.Installomator\"\n    downloadURL=$(downloadURLFromGit Installomator Installomator )\n    appNewVersion=$(versionFromGit Installomator Installomator )\n    expectedTeamID=\"JME5BW3F3R\"\n    blockingProcesses=( NONE )\n    ;;\nipswupdater)\n    name=\"IPSW Updater\"\n    type=\"zip\"\n    ipswupdaterVersions=$(curl -fs \"https://ipsw.app/download/updates.php?current_version=0.9.16\")\n    downloadURL=$(getJSONValue \"$ipswupdaterVersions\" \"[0].url\")\n    appNewVersion=$(getJSONValue \"$ipswupdaterVersions\" \"[0].version\")\n    expectedTeamID=\"YRW6NUGA63\"\n    ;;\nipvisionconnect)\n    name=\"ipvision Connect\"\n    type=\"dmg\"\n    # Description: A softphone client from ipvision.dk\n    downloadStore=\"https://my.ipvision.dk/connect/\"\n    downloadURL=\"${downloadStore}$(curl -fs \"https://my.ipvision.dk/connect/\" | grep osx | sort | tail -1 | cut -d '\"' -f2)\"\n    appNewVersion=\"$(curl -fs \"${downloadStore}\" | grep osx | sort | tail -1 | sed -E 's/.*ipvision_connect_([0-9_]*)_osx.*/\\1/' | tr \"_\" \".\")\"\n    expectedTeamID=\"5RLWBLKGL2\"\n    ;;\niriunwebcam)\n    name=\"IriunWebcam\"\n    type=\"pkg\"\n    packageID=\"com.iriun.pkg.multicam\"\n    downloadURL=\"$(curl -sf \"https://iriun.com\" | grep \"Webcam for Mac\" | awk -F '\"' '{ print $4; }')\"\n    appNewVersion=\"$( echo \"$downloadURL\" | cut -d '-' -f 2 | sed -e 's/.pkg//' )\"\n    expectedTeamID=\"R84MX49LQY\"\n    blockingProcesses=( \"IriunWebcam\" )\n    ;;\nisadora)\n    name=\"Isadora\"\n    type=\"pkgInDmg\"\n    packageID=\"com.troikatronix.isadora-fat-std-installer\"\n    expectedTeamID=\"Q5V96MD6S6\"\n    siteURL=\"https://troikatronix.com\"\n    downloadURL=\"$siteURL/$(curl -s \"$siteURL/get-it/\" | tr '\"' '\\n' | grep -m1 dmg)\"\n    # This will have issues if they go past 9 in any part of the version, but hopefully\n    #   by then they might have provided a better way to collect the current version.\n    URLversion=\"$( echo \"$downloadURL\" | cut -d '-' -f 2 | cut -d 'f' -f 1 )\"\n    appNewVersion=\"${URLversion[1]}.${URLversion[2]}.${URLversion[3]}\"\n    ;;\nisland)\n    name=\"Island\"\n    type=\"dmg\"\n    downloadURL=\"https://d3qqq7lqx3rf23.internal.island.io/E5QCaudFDx5FE5OX4INk/stable/latest/mac/IslandX64.dmg\"\n    appCustomVersion() { echo \"$(defaults read /Applications/Island.app/Contents/Info.plist CFBundleShortVersionString | sed 's/[^.]*.//' | sed -e 's/*\\.//')\" }\n    appNewVersion=$(curl -fsLIXGET \"https://d3qqq7lqx3rf23.internal.island.io/E5QCaudFDx5FE5OX4INk/stable/latest/mac/IslandX64.dmg\" | grep -i \"^x-amz-meta-version\" | sed -e 's/x-amz-meta-version\\: //' | tr -d '\\r')\n    expectedTeamID=\"38ZC4T8AWY\"\n    ;;\nistatmenus)\n    # credit: AP Orlebeke (@apizz)\n    name=\"iStat Menus\"\n    type=\"zip\"\n    downloadURL=\"https://download.bjango.com/istatmenus/\"\n    expectedTeamID=\"Y93TK974AT\"\n    appNewVersion=$(curl -fs https://bjango.com/mac/istatmenus/versionhistory/ | grep \"<h3>\" | head -1 | sed -E 's/<h3>([0-9.]*)<\\/h3>/\\1/')\n    blockingProcesses=( \"iStat Menus\" \"iStatMenusAgent\" \"iStat Menus Status\" )\n    ;;\niterm2)\n    name=\"iTerm\"\n    type=\"zip\"\n    downloadURL=\"https://iterm2.com/downloads/stable/latest\"\n    appNewVersion=$(curl -is https://iterm2.com/downloads/stable/latest | grep location: | grep -o \"iTerm2.*zip\" | cut -d \"-\" -f 2 | cut -d '.' -f1 | sed 's/_/./g')\n    expectedTeamID=\"H7V7XYVQ7D\"\n    blockingProcesses=( iTerm2 )\n    ;;\nitsycal|\\\nmowgliiitsycal)\n    name=\"Itsycal\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://s3.amazonaws.com/itsycal/itsycal.xml | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs https://s3.amazonaws.com/itsycal/itsycal.xml | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    expectedTeamID=\"HFT3T55WND\"\n    ;;\nizotopeproductportal)\n    name=\"iZotope Product Portal\"\n    type=\"dmg\"\n    izotopeDetails=\"$(curl -fs 'https://productportal.izotope.com/api/productupdate' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 14_6_1) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/89.0.4389.72 ProductPortal/1.4.8/b28/macOS-x86_64 Safari/537.36')\"\n    appNewVersion=$(getJSONValue \"${izotopeDetails}\" \"[0].Version\")\n    downloadURL=$(getJSONValue \"${izotopeDetails}\" \"[0].OSXDownloadURL\")\n    installerTool=\"Install Product Portal.app\"\n    CLIInstaller=\"Install Product Portal.app/Contents/MacOS/installbuilder.sh\"\n    CLIArguments=( --mode unattended --disable-components launch_after_install )\n    expectedTeamID=\"QGULMAPEB2\"\n    ;;\njabradirect)\n    name=\"Jabra Direct\"\n    type=\"pkgInDmg\"\n    # packageID=\"com.jabra.directonline\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=\"https://jabraxpressonlineprdstor.blob.core.windows.net/jdo/JabraDirectSetup.dmg\"\n    #appNewVersion=$(curl -fs https://www.jabra.com/Support/release-notes/release-note-jabra-direct | grep -oe \"Release version:.*[0-9.]*<\" | head -1 | cut -d \">\" -f2 | cut -d \"<\" -f1 | sed 's/ //g')\n    appNewVersion=$(curl -fs \"https://jabraexpressonlinejdo.jabra.com/jdo/jdo.json\" | grep -i MacVersion | cut -d '\"' -f4)\n    expectedTeamID=\"55LV32M29R\"\n    ;;\njamfcheck)\n    name=\"jamfcheck\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit txhaflaire JamfCheck)\"\n    appNewVersion=\"$(versionFromGit txhaflaire JamfCheck)\"\n    expectedTeamID=\"CLQKFNPCCP\"\n    ;;\njamfconnect)\n    name=\"Jamf Connect\"\n    type=\"pkgInDmg\"\n    packageID=\"com.jamf.connect\"\n    downloadURL=\"https://files.jamfconnect.com/JamfConnect.dmg\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep \"x-amz-meta-version\" | grep -o \"[0-9.].*[0-9.].*[0-9]\")\n    expectedTeamID=\"483DWKW443\"\n    ;;\njamfconnectconfiguration)\n    name=\"Jamf Connect Configuration\"\n    type=\"dmg\"\n    downloadURL=\"https://files.jamfconnect.com/JamfConnect.dmg\"\n    expectedTeamID=\"483DWKW443\"\n    ;;\njamfcpr)\n    name=\"jamfcpr\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit BIG-RAT jamfcpr)\"\n    appNewVersion=\"$(versionFromGit BIG-RAT jamfcpr)\"\n    expectedTeamID=\"PS2F6S478M\"\n    ;;\njamfmigrator)\n    name=\"jamf-migrator\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit jamf JamfMigrator)\n    appNewVersion=$(versionFromGit jamf JamfMigrator)\n    expectedTeamID=\"PS2F6S478M\"\n    ;;\njamfpppcutility)\n    # credit: Mischa van der Bent\n    name=\"PPPC Utility\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit jamf PPPC-Utility)\n    appNewVersion=$(versionFromGit jamf PPPC-Utility)\n    expectedTeamID=\"483DWKW443\"\n    ;;\njamfprintermanager)\n    name=\"Jamf Printer Manager\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit jamf jamf-printer-manager)\"\n    appNewVersion=\"$(versionFromGit jamf jamf-printer-manager)\"\n    expectedTeamID=\"483DWKW443\"\n    ;;\njamfreenroller)\n    # credit: Mischa van der Bent\n    name=\"ReEnroller\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit jamf ReEnroller)\n    #appNewVersion=$(versionFromGit jamf ReEnroller)\n    expectedTeamID=\"PS2F6S478M\"\n    ;;\njamovi)\n    name=\"jamovi\"\n    type=\"dmg\"\n    downloadURL=\"http://www.jamovi.org\"\n    if [[ -n $jamoviLatest ]]; then\n        downloadURL=\"${downloadURL}$(curl -s \"$downloadURL/download.html\" | grep macos | grep \"download-button\" | head -1 | cut -d '\"' -f 4)\"\n    else\n        downloadURL=\"${downloadURL}$(curl -s \"$downloadURL/download.html\" | grep macos | grep \"download-button\" | tail -1 | cut -d '\"' -f 4)\"\n    fi\n    # The above is a cheat, they list both the \"Latest\" version and the \"Solid\" version twice on the page, but in opposing order.\n    #     I'm also assuming they mean Latest = beta, and Solid = Stable.\n    appNewVersion=\"$(echo $downloadPATH | cut -d '-' -f 2)\"\n    expectedTeamID=\"9NCBP559AB\"\n    ;;\njasp)\n    name=\"JASP\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"JASP-[0-9.]*-macOS-arm64.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"JASP-[0-9.]*-macOS-x86_64.dmg\"\n    fi\n    downloadURL=$(downloadURLFromGit jasp-stats jasp-desktop )\n    appNewVersion=$(versionFromGit jasp-stats jasp-desktop )\n    expectedTeamID=\"AWJJ3YVK9B\"\n    ;;\njdk17)\n    name=\"Java SE Development Kit 17\"\n    type=\"pkgInDmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    appNewVersion=$(curl -sf https://www.oracle.com/java/technologies/javase/jdk17-archive-downloads.html | grep -m 1 \"Java SE Development Kit\" | sed \"s|.*Kit \\(.*\\)\\<.*|\\\\1|\")\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/17/archive/jdk-\"$appNewVersion\"_macos-aarch64_bin.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/17/archive/jdk-\"$appNewVersion\"_macos-x64_bin.dmg\"\n    fi\n    appCustomVersion(){ java --version | grep java | awk '{print $2}' }\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\njdk18)\n    name=\"Java SE Development Kit 18\"\n    type=\"pkgInDmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    appNewVersion=$(curl -sf https://www.oracle.com/java/technologies/javase/jdk18-archive-downloads.html | grep -m 1 \"Java SE Development Kit\" | sed \"s|.*Kit \\(.*\\)\\<.*|\\\\1|\")\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/18/archive/jdk-\"$appNewVersion\"_macos-aarch64_bin.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/18/archive/jdk-\"$appNewVersion\"_macos-x64_bin.dmg\"\n    fi\n    appCustomVersion(){ java --version | grep java | awk '{print $2}' }\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\njdk19)\n    name=\"Java SE Development Kit 19\"\n    type=\"pkgInDmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    appNewVersion=$(curl -sf https://www.oracle.com/java/technologies/javase/jdk19-archive-downloads.html | grep -m 1 \"Java SE Development Kit\" | sed \"s|.*Kit \\(.*\\)\\<.*|\\\\1|\")\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/19/archive/jdk-\"$appNewVersion\"_macos-aarch64_bin.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/19/archive/jdk-\"$appNewVersion\"_macos-x64_bin.dmg\"\n    fi\n    appCustomVersion(){ java --version | grep java | awk '{print $2}' }\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\njdk20)\n    name=\"Java SE Development Kit 20\"\n    type=\"pkgInDmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/20/latest/jdk-20_macos-aarch64_bin.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.oracle.com/java/20/latest/jdk-20_macos-x64_bin.dmg\"\n    fi\n    appCustomVersion(){ java --version | grep java | awk '{print $2}' }\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\njetbrainsclion)\n    name=\"CLion\"\n    type=\"dmg\"\n    jetbrainscode=\"CL\"\n    jetbrainsdistribution=\"mac\"\n    if [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsdatagrip)\n    name=\"DataGrip\"\n    type=\"dmg\"\n    jetbrainscode=\"DG\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsdataspell)\n    name=\"DataSpell\"\n    type=\"dmg\"\n    jetbrainscode=\"DS\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsgateway)\n    name=\"JetBrains Gateway\"\n    type=\"dmg\"\n    jetbrainscode=\"GW\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsgoland)\n    name=\"GoLand\"\n    type=\"dmg\"\n    jetbrainscode=\"GO\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsintellijidea)\n    name=\"IntelliJ IDEA\"\n    type=\"dmg\"\n    jetbrainscode=\"II\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsintellijideace|\\\nintellijideace)\n    name=\"IntelliJ IDEA CE\"\n    type=\"dmg\"\n    jetbrainscode=\"IIC\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsphpstorm)\n    name=\"PHPStorm\"\n    type=\"dmg\"\n    jetbrainscode=\"PS\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainspycharm)\n    # This is the Pro version of PyCharm. Do not confuse with PyCharm CE.\n    name=\"PyCharm\"\n    type=\"dmg\"\n    jetbrainscode=\"PCP\"\n    jetbrainsdistribution=\"mac\"\n    if [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainspycharmce|\\\npycharmce)\n    name=\"PyCharm CE\"\n    type=\"dmg\"\n    jetbrainscode=\"PCC\"\n    jetbrainsdistribution=\"mac\"\n    if [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsrider)\n    name=\"Rider\"\n    type=\"dmg\"\n    jetbrainscode=\"RD\"\n    if [[ $(arch) == i386 ]]; then\n        jetbrainsdistribution=\"mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainsrubymine)\n     name=\"RubyMine\"\n     type=\"dmg\"\n     jetbrainscode=\"RM\"\n     if [[ $(arch) == i386 ]]; then\n         jetbrainsdistribution=\"mac\"\n     elif [[ $(arch) == arm64 ]]; then\n         jetbrainsdistribution=\"macM1\"\n     fi\n     downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n     expectedTeamID=\"2ZEFAR8TH3\"\n     ;;\njetbrainstoolbox)\n    name=\"JetBrains Toolbox\"\n    type=\"dmg\"\n    jetbrainscode=\"TBA\"\n    jetbrainsdistribution=\"mac\"\n    if [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njetbrainswebstorm)\n    name=\"Webstorm\"\n    type=\"dmg\"\n    jetbrainscode=\"WS\"\n    jetbrainsdistribution=\"mac\"\n    if [[ $(arch) == arm64 ]]; then\n        jetbrainsdistribution=\"macM1\"\n    fi\n    downloadURL=\"https://download.jetbrains.com/product?code=${jetbrainscode}&latest&distribution=${jetbrainsdistribution}\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"location\" | tail -1 | sed -E 's/.*-([0-9.]+)[-.].*/\\1/g' )\n    expectedTeamID=\"2ZEFAR8TH3\"\n    ;;\njitsimeet)\n    name=\"Jitsi Meet\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit Jitsi jitsi-meet-electron)\n    appNewVersion=$(versionFromGit Jitsi jitsi-meet-electron)\n    expectedTeamID=\"FC967L3QRG\"\n    ;;\njre8)\n    name=\"Java Runtime Environment 8\"\n    type=\"pkgInDmg\"\n    versionKey=\"CFBundleVersion\"\n    versionURL=$(curl -fs \"https://javadl-esd-secure.oracle.com/update/mac/map-mac-1.8.0.xml\" | xpath '( //java-update-map/mapping/url)[last()]' 2>/dev/null | cut -d\\> -f2 | cut -d\\< -f1)\n    appNewVersion=$(curl -fs \"${versionURL}\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null | cut -d '\"' -f 2)\n    appBuildVersion=$(echo $appNewVersion | cut -d. -f3)\n    downloadURL=\"$(curl -fs \"${versionURL}\" | xpath '(//rss/channel/item/enclosure/@url)[last()]' 2>/dev/null | cut -d '\"' -f 2)\"\n    pkgName=\"Java 8 Update ${appBuildVersion}.app/Contents/Resources/JavaAppletPlugin.pkg\"\n    appCustomVersion(){ defaults read \"/Library/Internet Plug-Ins/JavaAppletPlugin.plugin/Contents/Info.plist\" \"${versionKey}\" 2>/dev/null }\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\njumpdesktop)\n    name=\"Jump Desktop\"\n    type=\"zip\"\n    downloadURL=$(curl -fsL \"https://mirror.jumpdesktop.com/downloads/jdm/jdmac-web-appcast.xml\" | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://mirror.jumpdesktop.com/downloads/jdm/jdmac-web-appcast.xml\" | grep sparkle:shortVersionString | tr ',' '\\n' | grep sparkle:shortVersionString | cut -d '\"' -f 2)\n    expectedTeamID=\"2HCKV38EEC\"\n    ;;\njupyterlab)\n    name=\"JupyterLab\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        archiveName=\"JupyterLab-Setup-macOS-arm64.dmg\"\n\t\tdownloadURL=\"$(downloadURLFromGit jupyterlab jupyterlab-desktop)\"\n\t\tappNewVersion=\"$(versionFromGit jupyterlab jupyterlab-desktop)\"\n\telif [[ $(arch) == i386 ]]; then\n\t\tarchiveName=\"JupyterLab-Setup-macOS-x64.dmg\"\n\t\tdownloadURL=\"$(downloadURLFromGit jupyterlab jupyterlab-desktop)\"\n\t\tappNewVersion=\"$(versionFromGit jupyterlab jupyterlab-desktop)\"\n \tfi\n    expectedTeamID=\"2YJ64GUAVW\"\n    ;;\nkap)\n    # credit: Lance Stephens (@pythoninthegrass on MacAdmins Slack)\n    name=\"Kap\"\n    type=\"dmg\"\n    if [[ $(arch) = \"i386\" ]]; then\n        archiveName=\"${name}-[0-9.]*-x64.${type}\"\n        downloadURL=$(downloadURLFromGit wulkano kap | grep -i x64)\n    else\n        archiveName=\"${name}-[0-9.]*-arm64.${type}\"\n        downloadURL=$(downloadURLFromGit wulkano kap | grep -i arm64)\n    fi\n    appNewVersion=$(versionFromGit wulkano Kap)\n    expectedTeamID=\"2KEEHXF6R6\"\n    ;;\nkarabinerelements)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"Karabiner-Elements\"\n    type=\"pkgInDmg\"\n    downloadURL=$(downloadURLFromGit pqrs-org Karabiner-Elements)\n    appNewVersion=$(versionFromGit pqrs-org Karabiner-Elements)\n    expectedTeamID=\"G43BCU2T37\"\n    ;;\nkeepassxc)\n    name=\"KeePassXC\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n      archiveName=\"x86_64.dmg\"\n    elif [[ $(arch) == arm64 ]]; then\n      archiveName=\"arm64.dmg\"\n    fi\n    downloadURL=$(downloadURLFromGit keepassxreboot keepassxc)\n    appNewVersion=$(versionFromGit keepassxreboot keepassxc)\n    expectedTeamID=\"G2S7P7J672\"\n    ;;\nkeeperpasswordmanager)\n    name=\"Keeper Password Manager\"\n    type=\"dmg\"\n    downloadURL=\"https://www.keepersecurity.com/desktop_electron/Darwin/KeeperSetup.dmg\"\n    appNewVersion=$(getJSONValue \"$(curl -fsL 'https://keepersecurity.com/desktop_electron/desktop_electron_version.txt')\" \"version\" )\n    expectedTeamID=\"234QNB7GCA\"\n    blockingProcess=( \"Keeper Password Manager\" )\n    ;;\nkeepingyouawake)\n    name=\"KeepingYouAwake\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit newmarcel KeepingYouAwake)\n    appNewVersion=$(versionFromGit newmarcel KeepingYouAwake)\n    expectedTeamID=\"5KESHV9W85\"\n    blockingProcesses=( \"KeepingYouAwake\" )\n    ;;\nkeka)\n    name=\"Keka\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit aonez Keka)\n    appNewVersion=$(versionFromGit aonez Keka)\n    expectedTeamID=\"4FG648TM2A\"\n    ;;\nkeybase)\n    name=\"Keybase\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=$(curl -s https://keybase.io/docs/the_app/install_macos | grep data-target | cut -d '\"' -f2 | grep arm64 )\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=$(curl -s https://keybase.io/docs/the_app/install_macos | grep data-target | cut -d '\"' -f2 | grep -v arm64 )\n    fi\n    expectedTeamID=\"99229SGT5K\"\n    ;; \nkeyboardmaestro)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Keyboard Maestro\"\n    type=\"zip\"\n    downloadURL=\"https://download.keyboardmaestro.com/\"\n    #appNewVersion=$( curl -fs https://www.stairways.com/press/ | grep -i \"releases Keyboard Maestro\" | head -1 | sed -E 's/.*releases Keyboard Maestro ([0-9.]*)<.*/\\1/g' ) # Text based from web site\n    appNewVersion=$( curl -fs \"https://www.stairways.com/press/rss.xml\" | xpath '//rss/channel/item/title[contains(text(), \"releases Keyboard Maestro\")]' 2>/dev/null | head -1 | sed -E 's/.*releases Keyboard Maestro ([0-9.]*)<.*/\\1/g' ) # uses XML, so might be a little more precise/future proof\n    expectedTeamID=\"QMHRBA4LGH\"\n    blockingProcesses=( \"Keyboard Maestro Engine\" \"Keyboard Maestro\" )\n    ;;\nkeyshot12)\n    name=\"KeyShot12\"\n    type=\"pkg\"\n    packageID=\"com.luxion.pkg.keyshot12.app\"\n    expectedTeamID=\"W7B24M74T3\"\n    downloadURL=\"https://www.keyshot.com/download/357619/\"\n    appNewVersion=\"$( curl -v \"$downloadURL\" 2>&1 | grep location | cut -d '_' -f 4 | cut -d '.' -f 1-2 )\"\n    ;;\nkeyshot12_2024)\n    name=\"KeyShot12\"\n    type=\"pkg\"\n    expectedTeamID=\"W7B24M74T3\"\n    downloadURL=\"https://www.keyshot.com/download/370762/\"\n    appNewVersion=\"$( curl -v \"$downloadURL\" 2>&1 | grep location | cut -d '_' -f 4 | cut -d '.' -f 1-2 )\"\n    ;;\nkeystoreexplorer)\n    name=\"KeyStore Explorer\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit kaikramer keystore-explorer)\"\n    appNewVersion=\"$(versionFromGit kaikramer keystore-explorer)\"\n    expectedTeamID=\"BKXPBP395L\"\n    ;;\nkimplusclientmodul)\n    name=\"KIMplus Clientmodul\"\n    # appName=\"KIMplus Clientmodul.app\"\n    type=\"dmg\"\n    downloadName=$(curl -fs \"https://cm.kimplus.de/download/current/\" | grep \"macos\" | sed \"s|.*href=\\\"\\(.*\\)\\\">kimplus-clientmodul.*|\\\\1|\")\n    appNewVersion=$(curl -fs \"https://cm.kimplus.de/download/current/\" | grep \"macos\" | sed \"s|.*kimplus-clientmodul_\\(.*\\)_macos.dmg.*|\\\\1|\" | sed s/_/./g)\n    downloadURL=https://cm.kimplus.de/download/current/$downloadName\n    installerTool=\"KIMplus Clientmodul Installationsprogramm.app\"\n    CLIInstaller=\"KIMplus Clientmodul Installationsprogramm.app/Contents/MacOS/JavaApplicationStub\"\n    CLIArguments=(-q -overwrite)\n    expectedTeamID=\"7QZS8E98SZ\"\n    blockingProcesses=( \"JavaApplicationStub\" )\n    ;;\nklokki)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Klokki\"\n    type=\"dmg\"\n    downloadURL=\"https://storage.yandexcloud.net/klokki/Klokki.dmg\"\n    expectedTeamID=\"Q9SATZMHPG\"\n    ;;\nknockknock)\n    name=\"KnockKnock\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit objective-see KnockKnock)\"\n    appNewVersion=\"$(versionFromGit objective-see KnockKnock)\"\n    expectedTeamID=\"VBG97UB4TA\"\n    ;;\nkrisp)\n    name=\"Krisp\"\n    type=\"pkg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.krisp.ai/mac?package=package_arm\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.krisp.ai/mac?package=package_64\"\n    fi\n    appNewVersion=\"$(curl -fsIL $downloadURL | grep -i \"^location\" | tail -1 | awk -F'/' '{ print $(NF-2) }')\"\n    expectedTeamID=\"U5R26XM5Z2\"\n    ;;\nkrita)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"krita\"\n    type=\"dmg\"\n    downloadURL=$( curl -fs \"https://krita.org/en/download/krita-desktop/\" | grep \".*https.*stable.*dmg.*\" | head -1 | sed -E 's/.*(https.*dmg).*/\\1/g' )\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"5433B4KXM8\"\n    ;;\nlastpass)\n    name=\"LastPass\"\n    type=\"dmg\"\n    downloadURL=\"https://download.cloud.lastpass.com/mac/LastPass.dmg\"\n    expectedTeamID=\"N24REP3BMN\"\n    Company=\"Marvasol, Inc DBA LastPass\"\n    ;;\nlatexit)\n    name=\"LaTeXiT\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fs \"https://pierre.chachatelier.fr/latexit/downloads/latexit-sparkle-en.rss\" | xpath '(//rss/channel/item/enclosure/@url)[last()]' 2>/dev/null | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs \"https://pierre.chachatelier.fr/latexit/downloads/latexit-sparkle-en.rss\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[last()]' 2>/dev/null | cut -d '\"' -f 2)\"\n    expectedTeamID=\"7SFX84GNR7\"\n    ;;\nlaunchbar)\n    name=\"LaunchBar\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://obdev.at/products/launchbar/download.html\" | xmllint --html --format - 2>/dev/null | grep -m 1 -o \"https://.*.dmg\")\n    appNewVersion=$( echo ${downloadURL} | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"MLZF7K7B5R\"\n    ;;\nlcadvancedvpnclient)\n    name=\"LANCOM Advanced VPN Client\"\n    type=\"pkgInDmg\"\n    appNewVersion=$(curl -fs https://www.ncp-e.com/de/service/download-vpn-client | grep -m 1 \"NCP Secure Entry macOS Client\" -A 6 | grep -i Version | sed  \"s|.*Version \\(.*\\) Rev.*|\\\\1|\")\n    downloadURL=$(appShortVersion=`sed 's/[^0-9]//g' <<< $appNewVersion` && echo https://ftp.lancom.de/LANCOM-Releases/LC-VPN-Client/LC-Advanced-VPN-Client-macOS-\"${appShortVersion}\"-Rel-x86-64.dmg)\n    expectedTeamID=\"LL3KBL2M3A\"\n    ;;\nlexarrecoverytool)\n    name=\"Lexar Recovery Tool\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://www.lexar.com/wp-content/uploads/product_images/Lexar-Recovery-Tool-Mac.zip\"\n    expectedTeamID=\"Y8HM6WR2DV\"\n    ;;\nlgcalibrationstudio)\n    name=\"LG Calibration Studio\"\n    type=\"pkgInZip\"\n    packageID=\"LGSI.TrueColorPro\"\n    releaseURL=\"https://www.lg.com/de/support/software-select-category-result?csSalesCode=34WK95U-W.AEU\"\n    appNewVersion=$(curl -sf $releaseURL | grep -m 1 \"Mac_LCS_\" | sed -E 's/.*LCS_([0-9.]*).zip.*/\\1/g')\n    downloadURL=$(curl -sf $releaseURL | grep -m 1 \"Mac_LCS_\" | sed \"s|.*href=\\\"\\(.*\\)\\\" title.*|\\\\1|\")\n    expectedTeamID=\"5SKT5H4CPQ\"\n    ;;\nlibericajdk11ltsfull)\n    name=\"Liberica JDK 11 LTS Full\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"arm\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x86\"\n        ;;\n    esac\n    appNewVersion=\"$(curl \"https://api.bell-sw.com/v1/liberica/releases?version-modifier=latest&version-feature=11&bitness=64&release-type=lts&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full\" | sed 's/.*\"version\":\"\\{0,1\\}\\([^,\"]*\\)\"\\{0,1\\}.*/\\1/')\"\n    downloadURL=$(curl \"https://api.bell-sw.com/v1/liberica/releases?version=${appNewVersion}&bitness=64&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full&output=text&fields=downloadUrl\")\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/liberica-jdk-11-full.jdk/Contents/Info.plist\" ] ; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/liberica-jdk-8-full.jdk/Contents/Info.plist\" \"CFBundleVersion\" ; fi }\n    expectedTeamID=\"8LBATW8FZA\"\n    ;;\nlibericajdk17ltsfull)\n    name=\"Liberica JDK 17 Full LTS\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"arm\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x86\"\n        ;;\n    esac\n    appNewVersion=\"$(curl \"https://api.bell-sw.com/v1/liberica/releases?version-modifier=latest&version-feature=17&bitness=64&release-type=lts&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full\" | sed 's/.*\"version\":\"\\{0,1\\}\\([^,\"]*\\)\"\\{0,1\\}.*/\\1/')\"\n    downloadURL=$(curl \"https://api.bell-sw.com/v1/liberica/releases?version=${appNewVersion}&bitness=64&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full&output=text&fields=downloadUrl\")\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/liberica-jdk-17-full.jdk/Contents/Info.plist\" ] ; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/liberica-jdk-8-full.jdk/Contents/Info.plist\" \"CFBundleVersion\" ; fi }\n    expectedTeamID=\"8LBATW8FZA\"\n    ;;\nlibericajdk8ltsfull)\n    name=\"Liberica JDK 8 Full LTS\"\n    type=\"pkg\"\n    case $(arch) in\n        \"arm64\")\n            cpu_arch=\"arm\"\n        ;;\n        \"i386\")\n            cpu_arch=\"x86\"\n        ;;\n    esac\n    # Liberica lumps all versions in one GitHub repo but provide an API to query latest version details that we can parse\n    latestVersionJSON=$(curl \"https://api.bell-sw.com/v1/liberica/releases?version-modifier=latest&version-feature=8&bitness=64&release-type=lts&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full\")\n\t# The release version of their JDK8 package (which are used in the download URLs) are formatted differently from the CFBundleVersion 1.8.0_382-b06 and 8u382+6 in pkg name\n    pkgNewVersion=\"$(echo ${latestVersionJSON} | sed 's/.*\"version\":\"\\{0,1\\}\\([^,\"]*\\)\"\\{0,1\\}.*/\\1/')\"\n    # We take the CFBundleIdentifier from the installed version (if found) and snag what they call the \"Update Version\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/liberica-jdk-8-full.jdk/Contents/Info.plist\" ] ; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/liberica-jdk-8-full.jdk/Contents/Info.plist\" \"CFBundleVersion\" | sed -n 's:.*_\\(.*\\)\\-.*:\\1:p' ; fi }\n    appNewVersion=\"$(echo ${latestVersionJSON} | sed 's/.*\"updateVersion\":\"\\{0,1\\}\\([^,\"]*\\)\"\\{0,1\\}.*/\\1/')\"\n    # As long as we have the latest PKG version, we can get a direct download URL without further JSON parsing\n    downloadURL=$(curl \"https://api.bell-sw.com/v1/liberica/releases?version=${pkgNewVersion}&bitness=64&os=macos&arch=${cpu_arch}&package-type=pkg&bundle-type=jdk-full&output=text&fields=downloadUrl\")\n\texpectedTeamID=\"8LBATW8FZA\"\n    ;;\nlibreoffice)\n    name=\"LibreOffice\"\n    type=\"dmg\"\n    appMajorVersion=\"$(curl -Ls https://www.libreoffice.org/download/download-libreoffice/ | grep dl_version_number | head -n 1 | cut -d'>' -f3 | cut -d'<' -f1)\"\n    if [[ $(arch) == \"arm64\" ]]; then\n    \tdownloadURL=\"https://download.documentfoundation.org/libreoffice/stable/\"$appMajorVersion\"/mac/aarch64/LibreOffice_\"$appMajorVersion\"_MacOS_aarch64.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n    \tdownloadURL=\"https://download.documentfoundation.org/libreoffice/stable/\"$appMajorVersion\"/mac/x86_64/LibreOffice_\"$appMajorVersion\"_MacOS_x86-64.dmg\"\n    fi\n    appNewVersion=\"$(curl -Ls https://www.libreoffice.org/download/download-libreoffice/ | grep -m 1 \".tar.xz\" | sed \"s|.*libreoffice-\\(.*\\).tar.xz?.*|\\\\1|\")\"\n    expectedTeamID=\"7P5S3ZLCN7\"\n    blockingProcesses=( soffice )\n    ;;\nlibreofficelanguagepack_intl)\n    name=\"LibreOffice Language Pack\"\n    # appName=\"LibreOffice.app\"\n    #\n    # Reads the primary language of the system and installs the appropriate language pack for the latest LibreOffice STABLE version\n    # There is no language pack for the US English language and no installation is required other than the LibreOffice software itself.\n    # Use in combination and after installing Libre Office (STABLE Version)\n    # This label requires user interaction to complete the installation\n    #\n    type=\"dmg\"\n    packageID=\"org.libreoffice.script.langpack\"\n    userLanguage=$(runAsUser defaults read .GlobalPreferences AppleLanguages | head -2 | tail -1 | tr -dc \"[:alnum:]\\-\")\n    if [[ \"$userLanguage\" == \"en-US\" ]]; then\n        cleanupAndExit 0 \"No installation of a language pack is necessary for the US-English language.\"\n    fi\n    appNewVersion=\"$(curl -Ls https://www.libreoffice.org/download/download-libreoffice/ | grep dl_version_number | head -n 1 | cut -d'>' -f3 | cut -d'<' -f1)\"\n    releaseURL=\"https://download.documentfoundation.org/libreoffice/stable/\"$appNewVersion\"/mac/aarch64/\"\n    until curl -fs $releaseURL | grep -q \"_$userLanguage.dmg\"; do\n        if [ ${#userLanguage} -eq 2 ]; then\n            break\n        fi\n        printlog \"No locale matching '$userLanguage', trying '${userLanguage:0:2}'\"\n        userLanguage=${userLanguage:0:2}\n    done\n    printlog \"Using language '$userLanguage' for download.\"\n    # downloadURL=\"https://downloadarchive.documentfoundation.org/libreoffice/old/latest/mac/aarch64/\"\n    # if ! curl -sfL --output /dev/null -r 0-0 $downloadURL; then\n    #     printlog \"Download not found for '$userLanguage', exiting.\"\n    #     exit\n    # fi\n    # appNewVersion=$(curl -sf $releaseURL | grep -m 1 \"_langpack_$userLanguage.dmg\" | sed \"s|.*LibreOffice_\\(.*\\)_MacOS.*|\\\\1|\")\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.documentfoundation.org/libreoffice/stable/\"$appNewVersion\"/mac/aarch64/LibreOffice_\"$appNewVersion\"_MacOS_aarch64_langpack_\"$userLanguage\".dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.documentfoundation.org/libreoffice/stable/\"$appNewVersion\"/mac/x86_64/LibreOffice_\"$appNewVersion\"_MacOS_x86-64_langpack_\"$userLanguage\".dmg\"\n    fi\n    installerTool=\"LibreOffice Language Pack.app\"\n    CLIInstaller=\"LibreOffice Language Pack.app/Contents/LibreOffice Language Pack\"\n    expectedTeamID=\"7P5S3ZLCN7\"\n    # blockingProcesses=( soffice )\n    ;;\nlifesize)\n    name=\"Lifesize\"\n    type=\"dmg\"\n    downloadURL=\"https://download.lifesizecloud.com/$(curl -fsL \"https://download.lifesizecloud.com/\" | xpath '//ListBucketResult/Contents/Key' 2>/dev/null | grep -oE '<Key>(.*\\.dmg)</Key>' | sed 's/<Key>\\(.*\\)<\\/Key>/\\1/' | tail -1)\"\n    appNewVersion=\"$(echo \"$downloadURL\" | sed 's~https://download\\.lifesizecloud\\.com/~~;s/Lifesize-//;s/\\.dmg//')\"\n    expectedTeamID=\"L57M4NT7Y7\"\n    ;;\nlightburn)\n    name=\"LightBurn\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit LightBurnSoftware deployment)\"\n    appNewVersion=\"$(versionFromGit LightBurnSoftware deployment)\"\n    expectedTeamID=\"UWZQ3LL82C\"\n    ;;\nlinear)\n    name=\"Linear\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://desktop.linear.app/mac/dmg/arm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://desktop.linear.app/mac/dmg\"\n    fi\n    appNewVersion=$(curl -sIkL $downloadURL | sed -r '/filename=/!d;s/.*filename=(.*)$/\\1/' | awk '{print $2}')\n    expectedTeamID=\"7VZ2S3V9RV\"\n    versionKey=\"CFBundleShortVersionString\"\n    appName=\"Linear.app\"\n    blockingProcesses=( \"Linear\" )\n    ;;\n    \nlogioptions|\\\nlogitechoptions)\n    name=\"Logi Options\"\n    type=\"pkgInZip\"\n    #downloadURL=$(curl -fs \"https://support.logi.com/api/v2/help_center/en-us/articles.json?label_names=webcontent=productdownload,webos=mac-macos-x-11.0\" | tr \",\" \"\\n\" | grep -A 10 \"macOS\" | grep -oie \"https.*/.*/options/.*\\.zip\" | head -1)\n    downloadURL=\"https://download01.logi.com/web/ftp/pub/techsupport/options/options_installer.zip\"\n    appNewVersion=$(curl -fs \"https://support.logi.com/api/v2/help_center/en-us/articles.json?label_names=webcontent=productdownload,webos=mac-macos-x-11.0\" | tr \",\" \"\\n\" | grep -A 10 \"macOS\" | grep -B 5 -ie \"https.*/.*/options/.*\\.zip\" | grep \"Software Version\" | sed 's/\\\\u[0-9a-z][0-9a-z][0-9a-z][0-9a-z]//g' | grep -ioe \"Software Version.*[0-9.]*\" | tr \"/\" \"\\n\" | grep -oe \"[0-9.]*\" | head -1)\n    #pkgName=\"LogiMgr Installer \"*\".app/Contents/Resources/LogiMgr.pkg\"\n    pkgName=LogiMgr.pkg\n    expectedTeamID=\"QED4VVPZWA\"\n    ;;\nlogitechoptionsplus)\n    name=\"Logi Options+\"\n    appName=\"logioptionsplus.app\"\n    archiveName=\"logioptionsplus_installer.zip\"\n    installerTool=\"logioptionsplus_installer.app\"\n    type=\"zip\"\n    downloadURL=\"https://download01.logi.com/web/ftp/pub/techsupport/optionsplus/logioptionsplus_installer.zip\"\n    # Latest version of Logi Options+ requires macOS 12+\n    # If older macOS is specified in the url for appNewVersion, it will never correspond to the installed version\n    appNewVersion=$(curl -fs \"https://support.logi.com/api/v2/help_center/en-us/articles.json?label_names=webcontent=productdownload,webos=mac-macos-x-12.0\" | tr \",\" \"\\n\" | grep -A 10 \"macOS\" | grep -B 5 -ie \"https.*/.*/optionsplus/.*\\.zip\" | grep \"Software Version\" | sed 's/\\\\u[0-9a-z][0-9a-z][0-9a-z][0-9a-z]//g' | grep -ioe \"Software Version.*[0-9.]*\" | tr \"/\" \"\\n\" | grep -oe \"[0-9.]*\" | head -1)\n    CLIInstaller=\"logioptionsplus_installer.app/Contents/MacOS/logioptionsplus_installer\"\n    CLIArguments=(--quiet)\n    expectedTeamID=\"QED4VVPZWA\"\n    ;;\nlogitune)\n    name=\"LogiTune\"\n    archiveName=\"LogiTuneInstaller.dmg\"\n    appName=\"LogiTuneInstaller.app\"\n    type=\"dmg\"\n    downloadURL=\"https://software.vc.logitech.com/downloads/tune/LogiTuneInstaller.dmg\"\n    appNewVersion=$(curl -fs \"https://support.logi.com/api/v2/help_center/en-us/articles.json?label_names=webcontent=productdownload,webos=mac-macos-x-11.0\" | tr \",\" \"\\n\" | grep -A 10 \"macOS\" | grep -B 5 -ie \"https.*/.*/optionsplus/.*\\.zip\" | grep \"Software Version\" | sed 's/\\\\u[0-9a-z][0-9a-z][0-9a-z][0-9a-z]//g' | grep -ioe \"Software Version.*[0-9.]*\" | tr \"/\" \"\\n\" | grep -oe \"[0-9.]*\" | head -1)\n    CLIInstaller=\"LogiTuneInstaller.app/Contents/MacOS/LogiTuneInstaller\"\n    CLIArguments=(-silent)\n    expectedTeamID=\"QED4VVPZWA\"\n    ;;\nlogseq)\n    name=\"Logseq\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"darwin-arm64-[0-9.]*.dmg\"\n        downloadURL=$(downloadURLFromGit logseq logseq)\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"darwin-x64-[0-9.]*.dmg\"\n        downloadURL=$(downloadURLFromGit logseq logseq)\n    fi\n    appNewVersion=$(versionFromGit logseq logseq)\n    expectedTeamID=\"3K44EUN829\"\n    ;;\nloom)\n    name=\"Loom\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=https://cdn.loom.com/desktop-packages/$(curl -fs https://packages.loom.com/desktop-packages/latest-mac.yml | awk '/url/ && /arm64/ && /dmg/ {print $3}')\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=https://cdn.loom.com/desktop-packages/$(curl -fs https://packages.loom.com/desktop-packages/latest-mac.yml | awk '/url/ && ! /arm64/ && /dmg/ {print $3}')\n    fi\n    appNewVersion=$(curl -fs https://packages.loom.com/desktop-packages/latest-mac.yml | awk '/version/ {print $2}' )\n    expectedTeamID=\"QGD2ZPXZZG\"\n    ;;\nloupedeck)\n    name=\"Loupedeck\"\n    type=\"pkgInDmg\"\n    #downloadURL=\"https://5145542.fs1.hubspotusercontent-na1.net/hubfs/5145542/Knowledge%20Base/LD%20Software%20Downloads/5.8.1/LoupedeckInstaller_5.8.1.18057.dmg\"\n    downloadURL=$(curl -fs \"https://loupedeck.com/downloads/\" | xmllint --html --format - 2>/dev/null | grep -oE \"https.*.dmg\" | head -1)\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*_([0-9.]*).dmg/\\1/')\n    expectedTeamID=\"M24R8BN5BK\"\n    ;;\nlowprofile)\n    name=\"Low Profile\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit ninxsoft LowProfile)\"\n    appNewVersion=\"$(versionFromGit ninxsoft LowProfile)\"\n    expectedTeamID=\"7K3HVCLV7Z\"\n    ;;\nlsagent)\n    name=\"LsAgent-osx\"\n    #Description: Lansweeper is an IT Asset Management solution. This label installs the latest version. \n    #Download: https://www.lansweeper.com/download/lsagent/\n    #Icon: https://www.lansweeper.com/wp-content/uploads/2018/08/LsAgent-Scanning-Agent.png\n    #Usage:\n    #  --help                                      Display the list of valid options\n    #  --version                                   Display product information\n    #  --unattendedmodeui <unattendedmodeui>       Unattended Mode UI\n    #                                              Default: none\n    #                                              Allowed: none minimal minimalWithDialogs\n    #  --optionfile <optionfile>                   Installation option file\n    #                                              Default: \n    #  --debuglevel <debuglevel>                   Debug information level of verbosity\n    #                                              Default: 2\n    #                                              Allowed: 0 1 2 3 4\n    #  --mode <mode>                               Installation mode\n    #                                              Default: osx\n    #                                              Allowed: osx text unattended\n    #  --debugtrace <debugtrace>                   Debug filename\n    #                                              Default: \n    #  --installer-language <installer-language>   Language selection\n    #                                              Default: en\n    #                                              Allowed: sq ar es_AR az eu pt_BR bg ca hr cs da nl en et fi fr de el he hu id it ja kk ko lv lt no fa pl pt ro ru sr zh_CN sk sl es sv th zh_TW tr tk uk va vi cy\n    #  --prefix <prefix>                           Installation Directory\n    #                                              Default: /Applications/LansweeperAgent\n    #  --server <server>                           FQDN, NetBios or IP of the Scanning Server\n    #                                              Default: \n    #  --port <port>                               Listening Port on the Scanning Server\n    #                                              Default: 9524\n    #  --agentkey <agentkey>                       Cloud Relay Authentication Key (Optional)\n    #                                              Default: \n    type=\"dmg\"\n    downloadURL=\"https://content.lansweeper.com/lsagent-mac/\"\n    appNewVersion=\"$(curl -fsIL \"$downloadURL\" | grep -i \"location\" | cut -w -f2 | cut -d \"/\" -f5-6 | tr \"/\" \".\")\"\n    installerTool=\"LsAgent-osx.app\"\n    CLIInstaller=\"LsAgent-osx.app/Contents/MacOS/installbuilder.sh\"\n    if [[ -z $lsagentPort ]]; then\n        lsagentPort=9524\n    fi\n    if [[ -z $lsagentMode ]]; then\n        lsagentMode=\"osx\"\n    fi\n    if [[ -z $lsagentLanguage ]]; then\n        lsagentLanguage=\"en\"\n    fi\n    if [[ -z $lsagentServer && -z $lsagentKey ]]; then\n        cleanupAndExit 89 \"This label requires more parameters: lsagentServer and/or lsagentKey is required. Optional parameters include: lsagentPort, lsagentMode, and lsagentLanguage\\nSee /Volumes/LsAgent/LsAgent-osx.app/Contents/MacOS/installbuilder.sh --help\" ERROR\n    fi\n    CLIArguments=( --mode $lsagentMode --installer-language $lsagentLanguage )\n    if [[ -n $lsagentServer ]]; then\n        CLIArguments+=( --server $lsagentServer --port $lsagentPort )\n    fi\n    if [[ -n $lsagentKey ]]; then\n        CLIArguments+=( --agentkey $lsagentKey )\n    fi\n    expectedTeamID=\"65LX6K7CBA\"\n    ;;\nlucidlink)\n    name=\"Lucid\"\n    # https://www.lucidlink.com/download\n    type=\"pkg\"\n    downloadURL=\"https://www.lucidlink.com/download/latest/osx/stable/\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"Y4KMJPU2B4\"\n    ;;\nlucifer)\n    # credit: Drew Diver (@grumpydrew on MacAdmins Slack)\n    name=\"Lucifer\"\n    type=\"zip\"\n    downloadURL=\"https://www.hexedbits.com/downloads/lucifer.zip\"\n    appNewVersion=$( curl -fs \"https://www.hexedbits.com/lucifer/\" | grep \"Latest version\" | sed -E 's/.*Latest version ([0-9.]*),.*/\\1/g' )\n    expectedTeamID=\"5VRJU68BZ5\"\n    ;;\nlulu)\n    name=\"LuLu\"\n    type=\"dmg\"\n    #downloadURL=$( curl -fs \"https://objective-see.com/products/lulu.html\" | grep https | grep \"$type\" | head -1 | tr '\"' \"\\n\" | grep \"^http\" )\n    #appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*_([0-9.]*)\\..*/\\1/g' )\n    downloadURL=$(downloadURLFromGit objective-see LuLu)\n    appNewVersion=$(versionFromGit objective-see LuLu)\n    expectedTeamID=\"VBG97UB4TA\"\n    ;;\nmacadminspython)\n    name=\"MacAdmins Python\"\n    type=\"pkg\"\n    packageID=\"org.macadmins.python.recommended\"\n    downloadURL=$(curl --silent --fail \"https://api.github.com/repos/macadmins/python/releases/latest\" | awk -F '\"' \"/browser_download_url/ && /python_recommended_signed/ { print \\$4; exit }\")\n    appNewVersion=$(grep -o -E '\\d+\\.\\d+\\.\\d+\\.\\d+' <<< $downloadURL | head -n 1)\n    expectedTeamID=\"T4SK8ZXCXG\"\n    blockingProcesses=( NONE )\n    ;;\nmaccyapp)\n    name=\"Maccy\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit p0deje Maccy)\"\n    appNewVersion=\"$(versionFromGit p0deje Maccy)\"\n    expectedTeamID=\"MN3X4648SC\"\n    ;;\nmacfuse)\n    name=\"FUSE for macOS\"\n    type=\"pkgInDmg\"\n    pkgName=\"Install macFUSE.pkg\"\n    downloadURL=$(downloadURLFromGit osxfuse osxfuse)\n    appNewVersion=$(versionFromGit osxfuse osxfuse)\n    expectedTeamID=\"3T5GSNBU6W\"\n    ;;\nmacoslaps)\n    name=\"macOSLAPS\"\n    type=\"pkg\"\n    packageID=\"edu.psu.macOSLAPS\"\n    downloadURL=\"$(downloadURLFromGit joshua-d-miller macOSLAPS)\"\n    appNewVersion=\"$(versionFromGit joshua-d-miller macOSLAPS)\"\n    expectedTeamID=\"9UYK4F9BSM\"\n    ;;\nmacpass)\n    name=\"MacPass\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit MacPass MacPass)\n    appNewVersion=$(versionFromGit MacPass MacPass)\n    expectedTeamID=\"55SM4L4Z97\"\n    ;;\n\nmacports)\n    name=\"MacPorts\"\n    type=\"pkg\"\n    #buildVersion=$(uname -r | cut -d '.' -f 1)\n    case $(uname -r | cut -d '.' -f 1) in\n        23)\n            archiveName=\"Sonoma.pkg\"\n            ;;\n        22)\n            archiveName=\"Ventura.pkg\"\n            ;;\n        21)\n            archiveName=\"Monterey.pkg\"\n            ;;\n        20)\n            archiveName=\"BigSur.pkg\"\n            ;;\n        19)\n            archiveName=\"Catalina.pkg\"\n            ;;\n        *)\n            cleanupAndExit 98 \"macOS 10.14 or earlier not supported by Installomator.\"\n            ;;\n    esac\n    downloadURL=$(downloadURLFromGit macports macports-base)\n    appNewVersion=$(versionFromGit macports macports-base)\n    appCustomVersion(){ if [ -x /opt/local/bin/port ]; then /opt/local/bin/port version | awk '{print $2}'; else \"0\"; fi }\n    updateTool=\"/opt/local/bin/port\"\n    updateToolArguments=\"selfupdate\"\n    expectedTeamID=\"QTA3A3B7F3\"\n    ;;\nmactex)\n    name=\"MacTeX\"\n    appName=\"TeX Live Utility.app\"\n    type=\"pkg\"\n    downloadURL=\"https://mirror.ctan.org/systems/mac/mactex/MacTeX.pkg\"\n    expectedTeamID=\"RBGCY5RJWM\"\n    ;;\nmactracker)\n    name=\"Mactracker\"\n    type=\"zip\"\n    #downloadURL=$(curl -fs \"https://mactracker.ca/releasenotes-mac.html\" | grep \"Mactracker_\" | sed \"s|.*href=\\\"\\(.*\\)\\\">Download for macOS.*|\\\\1|\")\n    downloadURL=$(curl -fs \"https://update.mactracker.ca/appcast-b.xml\" | xpath '//rss/channel/item[last()]/enclosure/@url' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://update.mactracker.ca/appcast-b.xml\" | xpath '//rss/channel/item[last()]/enclosure/@sparkle:version' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"63TP32R3AB\"\n    ;;\nmagicbullet)\n    name=\"Magic Bullet Suite\"\n    type=\"zip\"\n    appCustomVersion(){\n    \tls \"/Users/Shared/Red Giant/uninstall\" | grep bullet | grep -Eo \"([0-9][0-9][0-9][0-9]\\.[0-9]+(\\.[0-9])?)\" | head -n 30 | sort -gru\n    }\n    for i in {1..5}; do\n        appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (X11; Fedora; Linux x86_64; rv:129.0) Gecko/20100101 Firefox/129.0\" -fs \"https://support.maxon.net/hc/en-us/sections/13336955539228-Red-Giant\" | grep -i \"Magic Bullet\" | grep -Eo \"([0-9][0-9][0-9][0-9]\\.[0-9]+(\\.[0-9])?)\" | sort -gru | head -n 1)\n        if [[ -n $appNewVersion ]]; then break; else sleep 1; fi\n    done\n    if [[ \"$appNewVersion\" =~ ^[^.]*\\.[^.]*$ ]]; then\n        appNewVersion=$(sed 's/\\([0-9]*\\.[0-9]*\\)/\\1.0/' <<<\"$appNewVersion\")\n    fi\n    downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/installer/macos/redgiant/magicbullet/releases/$appNewVersion/MagicBulletSuite-${appNewVersion}_Mac.zip\"\n    magicbulletResponse=$(curl -s -I -L \"$downloadURL\")\n    magicbulletHttpStatus=$(echo \"$magicbulletResponse\" | head -n 1 | cut -d ' ' -f 2)\n    if [[ \"$magicbulletHttpStatus\" == \"200\" ]]; then\n\t    printlog \"DownloadURL HTTP status code: $magicbulletHttpStatus\" INFO\n    elif [[ \"$magicbulletHttpStatus\" == \"404\" ]]; then\n\t    downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/installer/macos/redgiant/magicbullet/releases/$appNewVersion/MagicBulletSuite-${appNewVersion}_mac.zip\"\n\t    printlog \"Had to change DownloadURL due HTTP Status.\" INFO\n    else\n\t    printlog \"Unexpected HTTP status code: $magicbulletHttpStatus\" ERROR\n    fi\n    installerTool=\"Magic Bullet Suite Installer.app\"\n    CLIInstaller=\"Magic Bullet Suite Installer.app/Contents/Scripts/install.sh\"\n    CLIArguments=()\n    expectedTeamID=\"4ZY22YGXQG\"\n    ;;\nmailmate)\n    # info: It is now recommended for new users to use the latest beta release of MailMate instead of the public release, see https://freron.com/download/\n    name=\"MailMate\"\n    type=\"tbz\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=\"https://updates.mailmate-app.com/archives/MailMateBeta.tbz\"\n    appNewVersion=\"$(curl -fs https://updates.mailmate-app.com/beta_release_notes | grep Revision | head -n 1 | sed -E 's/.* ([0-9\\.]*) .*/\\1/g')\"\n    expectedTeamID=\"VP8UL4YCJC\"\n    ;;\nmailtooutlook)\n    name=\"MailToOutlook\"\n    type=\"pkg\"\n    downloadURL=https://macadmins.software/tools/MailToOutlook_2.1.pkg\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmalwarebytes)\n    name=\"Malwarebytes\"\n    type=\"pkg\"\n    downloadURL=\"https://downloads.malwarebytes.com/file/mb3-mac\"\n    appNewVersion=$(curl -Ifs https://downloads.malwarebytes.com/file/mb3-mac | grep \"location\" | sed -E 's/.*-Mac-([0-9\\.]*)\\.pkg/\\1/g')\n    expectedTeamID=\"GVZRY6KDKR\"\n    ;;\nmarathon)\n    name=\"Classic Marathon\"\n    type=\"dmg\"\n    archiveName=\"Marathon-[0-9.]*-Mac.dmg\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=\"$(downloadURLFromGit Aleph-One-Marathon alephone)\"\n    appNewVersion=\"$(versionFromGit Aleph-One-Marathon alephone)\"\n    expectedTeamID=\"E8K89CXZE7\"\n    ;;\nmarathon2)\n    name=\"Classic Marathon 2\"\n    type=\"dmg\"\n    archiveName=\"Marathon2-[0-9.]*-Mac.dmg\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=\"$(downloadURLFromGit Aleph-One-Marathon alephone)\"\n    appNewVersion=\"$(versionFromGit Aleph-One-Marathon alephone)\"\n    expectedTeamID=\"E8K89CXZE7\"\n    ;;\nmarathoninfinity)\n    name=\"Classic Marathon Infinity\"\n    type=\"dmg\"\n    archiveName=\"MarathonInfinity-[0-9.]*-Mac.dmg\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=\"$(downloadURLFromGit Aleph-One-Marathon alephone)\"\n    appNewVersion=\"$(versionFromGit Aleph-One-Marathon alephone)\"\n    expectedTeamID=\"E8K89CXZE7\"\n    ;;\nmasv)\n    name=\"MASV\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.massive.io/MASV.dmg\"\n    expectedTeamID=\"VHKX7RCAY7\"\n    ;;\nmattermost)\n    name=\"Mattermost\"\n    type=\"dmg\"\n    archiveName=\"mac-universal.dmg\"\n    downloadURL=$(downloadURLFromGit mattermost desktop)\n    appNewVersion=$(versionFromGit mattermost desktop)\n    expectedTeamID=\"UQ8HT4Q2XM\"\n    ;;\nmaxonapp)\n    name=\"Maxon\"\n    type=\"dmg\"\n    versionKey=\"CFBundleShortVersionString\"\n    appNewVersion=\"$(curl -s \"https://packages.maxon.net/manifests?platform=macos&org=maxon&type=products&family=fuse\" | tr '{' '\\n' | tr ',' '\\n' | tr '}' '\\n' | grep \"version\" | awk -F'\"' '{print $4}' | sort -gr | head -n 1)\"\n    downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/website/macos/maxon/maxonapp/releases/${appNewVersion}/Maxon_App_${appNewVersion}_Mac.dmg\"\n    installerTool=\"Maxon App Installer.app\"\n    CLIInstaller=\"Maxon App Installer.app/Contents/MacOS/installbuilder.sh\"\n    CLIArguments=(--mode unattended --unattendedmodeui none)\n    expectedTeamID=\"4ZY22YGXQG\"\n    ;;\nmdmwatchdog)\n    name=\"Addigy MDM Watchdog\"\n    type=\"pkg\"\n    packageID=\"com.addigy.mdm-watchdog\"\n    downloadURL=\"https://agents.addigy.com/tools/mdm-watchdog/latest/mdm-watchdog.pkg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i location | cut -d '/' -f 6)\"\n    expectedTeamID=\"R5LEJ8Y242\"\n    blockingProcesses=( \"NONE\" )\n    ;;\nmeetingbar)\n    name=\"Meetingbar\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit leits MeetingBar)\n    appNewVersion=$(versionFromGit leits MeetingBar)\n    expectedTeamID=\"KGH289N6T8\"\n    ;;\nmeistertask)\n    name=\"MeisterTask\"\n    type=\"dmg\"\n    downloadURL=\"https://www.meistertask.com/files/MeisterTask_osx.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"4MX957DLH9\"\n    ;;\nmendeleyreferencemanager)\n    name=\"Mendeley Reference Manager\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://www.mendeley.com/download-reference-manager/macOS\" | grep -oE \"https://static.mendeley.com/bin/desktop/.*?.dmg\")\n    appNewVersion=$(curl -fs \"https://www.mendeley.com/download-reference-manager/macOS\" | grep -oE \"https://static.mendeley.com/bin/desktop/.*?.dmg\" | sed -n 's/.*mendeley-reference-manager-\\([0-9.-]*\\)-x64.dmg/\\1/p')\n    expectedTeamID=\"45K89Y5X9B\"\n    #Company=\"Elsevier Inc.\"\n    ;;\nmenumeters)\n    name=\"MenuMeters\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit yujitach MenuMeters )\n    appNewVersion=$(versionFromGit yujitach MenuMeters )\n    expectedTeamID=\"95AQ7YKR5A\"\n    ;;\nmerlinproject)\n    name=\"Merlin Project\"\n    type=\"zip\"\n    downloadURL=\"https://www.projectwizards.net/downloads/MerlinProject.zip\"\n    appNewVersion=\"$(curl -fs \"https://www.projectwizards.net/de/support/release-notes\"  | grep Version | head -n 6 | tail -n 1 | sed 's/[^0-9.]*//g')\"\n    expectedTeamID=\"9R6P9VZV27\"\n    ;;\nmicrosoftautoupdate)\n    name=\"Microsoft AutoUpdate\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=830196\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"Microsoft_AutoUpdate.*pkg\" | sed -E 's/[a-zA-Z_]*_([0-9.]*)_.*/\\1/g')\n    expectedTeamID=\"UBF8T346G9\"\n    # commented the updatetool for MSAutoupdate, because when Autoupdate is really\n    # old or broken, you want to force a new install\n    #updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    #updateToolArguments=( --install --apps MSau04 )\n    ;;\nmicrosoftazuredatastudio|\\\nazuredatastudio)\n    name=\"Azure Data Studio\"\n    type=\"zip\"\n    downloadURL=$( curl -sL https://github.com/microsoft/azuredatastudio/releases/latest | grep 'Universal' | grep -Eo \"(http|https)://[a-zA-Z0-9./?=_%:-]*\" | head -1 )\n    appNewVersion=$(versionFromGit microsoft azuredatastudio )\n    expectedTeamID=\"UBF8T346G9\"\n    appName=\"Azure Data Studio.app\"\n    blockingProcesses=( \"Azure Data Studio\" )\n    ;;\nmicrosoftazurestorageexplorer)\n    name=\"Microsoft Azure Storage Explorer\"\n    type=\"zip\"\n    if [[ $(arch) == arm64 ]]; then\n        archiveName=\"StorageExplorer-darwin-arm64.zip\"\n    elif [[ $(arch) == i386 ]]; then\n        archiveName=\"StorageExplorer-darwin-x64.zip\" \n    fi\n    downloadURL=$(downloadURLFromGit microsoft AzureStorageExplorer )\n    appNewVersion=$(versionFromGit microsoft AzureStorageExplorer )\n    expectedTeamID=\"UBF8T346G9\"\n    ;;\nmicrosoftcompanyportal)\n    name=\"Company Portal\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=869655\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.intunecompanyportal.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/CompanyPortal_.*pkg\" | cut -d \"_\" -f 2 | cut -d \"-\" -f 1)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps IMCP01 )\n    ;;\nmicrosoftdefender|\\\nmicrosoftdefenderatp)\n    name=\"Microsoft Defender\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=2097502\"\n    appNewVersion=$(curl -fs https://raw.githubusercontent.com/MicrosoftDocs/defender-docs/public/defender-endpoint/mac-whatsnew.md | grep -m 1 -o \"Build: [0-9\\.]*\" | awk '{print $2}')\n    # No version number in download url\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps WDAV00 )\n    ;;\nmicrosoftedge|\\\nmicrosoftedgeconsumerstable|\\\nmicrosoftedgeenterprisestable)\n    name=\"Microsoft Edge\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=2093504\"\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/MicrosoftEdge.*pkg\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"UBF8T346G9\"\n    ;;\nmicrosoftexcel)\n    name=\"Microsoft Excel\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=525135\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.excel.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps XCEL2019 )\n    ;;\nmicrosoftexcelreset)\n    name=\"Microsoft Excel Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Excel\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Excel_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftlicenseremovaltool)\n    # credit: Isaac Ordonez (@isaac) macadmins slack\n    name=\"Microsoft License Removal Tool\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=849815\"\n    expectedTeamID=\"QGS93ZLCU7\"\n    appNewVersion=$(curl -is \"$downloadURL\" | grep ocation: | grep -o \"Microsoft_.*pkg\" | cut -d \"_\" -f 5 | cut -d \".\" -f1-2)\n    Company=\"Microsoft\"\n    ;;\nmicrosoftlicensereset)\n    name=\"Microsoft License Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Credentials\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*License_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftoffice365)\n    name=\"MicrosoftOffice365\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.pkg.licensing\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=525133\"\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 5)\n    expectedTeamID=\"UBF8T346G9\"\n    # using MS PowerPoint as the 'stand-in' for the entire suite\n    #appName=\"Microsoft PowerPoint.app\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    blockingProcesses=( \"Microsoft AutoUpdate\" \"Microsoft Word\" \"Microsoft PowerPoint\" \"Microsoft Excel\" \"Microsoft OneNote\" \"Microsoft Outlook\" \"OneDrive\" )\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install )\n    ;;\nmicrosoftofficebusinesspro)\n    name=\"MicrosoftOfficeBusinessPro\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=2009112\"\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3)\n    expectedTeamID=\"UBF8T346G9\"\n    # using MS PowerPoint as the 'stand-in' for the entire suite\n    appName=\"Microsoft PowerPoint.app\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    blockingProcesses=( \"Microsoft AutoUpdate\" \"Microsoft Word\" \"Microsoft PowerPoint\" \"Microsoft Excel\" \"Microsoft OneNote\" \"Microsoft Outlook\" \"OneDrive\" \"Teams\")\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install )\n    ;;\nmicrosoftofficefactoryreset)\n    name=\"Microsoft Office Factory Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Factory\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Factory_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftofficeremoval)\n    name=\"Microsoft Office Removal\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.remove.Office\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Office_Removal.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftonedrive-deferred)\n    # This version should match the Enterprise (Deferred) version setting of OneDrive update channel. So only use this label if that is the channel you use for OneDrive. For default update settings use label “microsoftonedrive”.\n    # https://support.microsoft.com/en-us/office/onedrive-release-notes-845dcf18-f921-435e-bf28-4e24b95e5fc0#OSVersion=Mac\n    name=\"OneDrive\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=861009\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.onedrive.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | cut -d \"/\" -f 6 | cut -d \".\" -f 1-3)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps ONDR18 )\n    ;;\nmicrosoftonedrive-rollingout)\n    # This version is the Rolling out version of OneDrive. Not sure what channel in OneDrive update it matches, maybe Insiders.\n    # https://support.microsoft.com/en-us/office/onedrive-release-notes-845dcf18-f921-435e-bf28-4e24b95e5fc0#OSVersion=Mac\n    name=\"OneDrive\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=861011\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.onedrive.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | cut -d \"/\" -f 6 | cut -d \".\" -f 1-3)\n    expectedTeamID=\"UBF8T346G9\"\n    #if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n    #    printlog \"Running msupdate --list\"\n    #    \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    #fi\n    #updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    #updateToolArguments=( --install --apps ONDR18 )\n    ;;\nmicrosoftonedrive-rollingoutdeferred)\n    # This version is the Rolling out Deferred version of OneDrive. Not sure what channel in OneDrive update it matches.\n    # https://support.microsoft.com/en-us/office/onedrive-release-notes-845dcf18-f921-435e-bf28-4e24b95e5fc0#OSVersion=Mac\n    name=\"OneDrive\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=861010\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.onedrive.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | cut -d \"/\" -f 6 | cut -d \".\" -f 1-3)\n    expectedTeamID=\"UBF8T346G9\"\n    #if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n    #    printlog \"Running msupdate --list\"\n    #    \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    #fi\n    #updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    #updateToolArguments=( --install --apps ONDR18 )\n    ;;\nmicrosoftonedrive)\n    # This version match the Last Released Production version setting of OneDrive update channel. It’s default if no update channel setting for OneDrive updates has been specified. Enterprise (Deferred) is also supported with label “microsoftonedrive-deferred”.\n    # https://support.microsoft.com/en-us/office/onedrive-release-notes-845dcf18-f921-435e-bf28-4e24b95e5fc0#OSVersion=Mac\n    name=\"OneDrive\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=823060\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.onedrive.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | cut -d \"/\" -f 6 | cut -d \".\" -f 1-3)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps ONDR18 )\n    ;;\nmicrosoftonedrivereset)\n    name=\"Microsoft OneDrive Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.OneDrive\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*OneDrive_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftonenote)\n    name=\"Microsoft OneNote\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=820886\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.onenote.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps ONMC2019 )\n    ;;\nmicrosoftonenotereset)\n    name=\"Microsoft OneNote Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.OneNote\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*OneNote_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftoutlook-monthly)\n    name=\"Microsoft Outlook\"\n    # As macadmin.software has provided a link to a monthly edition of Outlook, I have created this label.\n    # Not sure about the requirements for this label, nor if the call to msupdate should be there or not.\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=2228510\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.outlook.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps OPIM2019 )\n    ;;\nmicrosoftoutlook)\n    name=\"Microsoft Outlook\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=525137\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.outlook.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps OPIM2019 )\n    ;;\nmicrosoftoutlookdataremoval)\n    name=\"Microsoft Outlook Data Removal\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.remove.Outlook.Data\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Outlook_Data_Removal.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftoutlookreset)\n    name=\"Microsoft Outlook Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Outlook\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Outlook_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftpowerpoint)\n    name=\"Microsoft PowerPoint\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=525136\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.powerpoint.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps PPT32019 )\n    ;;\nmicrosoftpowerpointreset)\n    name=\"Microsoft PowerPoint Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.PowerPoint\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*PowerPoint_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftremotedesktop)\n    name=\"Microsoft Remote Desktop\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=868963\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.remotedesktop.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_Remote_Desktop.*pkg\" | cut -d \"_\" -f 4)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps MSRD10 )\n    ;;\nmicrosoftremotehelp)\n    name=\"Microsoft Remote Help\"\n    type=\"pkg\"\n    downloadURL=\"https://aka.ms/downloadremotehelpmacos\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i location: | grep -o \"Microsoft_Remote_Help.*pkg\" | sed -E 's/[a-zA-Z_]*_([0-9.]*)_.*/\\1/g')\n    expectedTeamID=\"UBF8T346G9\"\n    ;;\nmicrosoftsharepointplugin)\n    # Microsoft has marked this \"oldpackage\", should probably not be used anymore\n    name=\"MicrosoftSharePointPlugin\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=800050\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/oldpackage[id=\"com.microsoft.sharepointplugin.standalone\"]/version' 2>/dev/null | sed -E 's/<version>([0-9.]*) .*/\\1/')\n    expectedTeamID=\"UBF8T346G9\"\n    # TODO: determine blockingProcesses for SharePointPlugin\n    ;;\nmicrosoftskypeforbusiness)\n    name=\"Skype for Business\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=832978\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.skypeforbusiness.standalone\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps MSFB16 )\n    ;;\nmicrosoftskypeforbusinessremovaltool)\n    name=\"Skype for Business Removal\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.remove.SkypeForBusiness\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*SkypeForBusiness_Removal.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftteams-rollingout)\n    name=\"Microsoft Teams\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.teams2\"\n    # Fetch the latest version number from the Microsoft documentation page\n    appNewVersion=$(curl -s https://learn.microsoft.com/en-us/officeupdates/teams-app-versioning | awk '/<h4 id=\"mac-version-history\">Mac version history<\\/h4>/,/<\\/table>/' | grep -oE '[0-9]+\\.[0-9]+\\.[0-9]+\\.[0-9]+' | head -n 1)\n    downloadURL=\"https://statics.teams.cdn.office.net/production-osx/${appNewVersion}/MicrosoftTeams.pkg\"\n    expectedTeamID=\"UBF8T346G9\"\n    blockingProcesses=( Teams MSTeams \"Microsoft Teams\" \"Microsoft Teams WebView\" \"Microsoft Teams WebView Helper\" \"Microsoft Teams Launcher\" \"Microsoft Teams (work preview)\" \"Microsoft Teams classic Helper\" \"com.microsoft.teams2.respawn\")\n    # msupdate requires a PPPC profile pushed out from Jamf to work, https://github.com/pbowden-msft/MobileConfigs/tree/master/Jamf-MSUpdate\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps TEAMS21 ) # --wait 600\n    ;;\nmicrosoftteamsclassic|\\\nmicrosoftteams)\n    name=\"Microsoft Teams classic\"\n    type=\"pkg\"\n    #packageID=\"com.microsoft.teams\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=869428\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | tail -1 | cut -d \"/\" -f5)\n    versionKey=\"CFBundleGetInfoString\"\n    expectedTeamID=\"UBF8T346G9\"\n    blockingProcesses=( Teams \"Microsoft Teams classic Helper\" )\n    # msupdate requires a PPPC profile pushed out from Jamf to work, https://github.com/pbowden-msft/MobileConfigs/tree/master/Jamf-MSUpdate\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps TEAMS10 ) # --wait 600 #TEAM01\n    ;;\nmicrosoftteamsnew)\n    name=\"Microsoft Teams (work or school)\"\n    type=\"pkg\"\n    #packageID=\"com.microsoft.teams2\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=2249065\"\n    #appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | tail -1 | cut -d \"/\" -f5)\n    # No version in download path, so grab it from homepage\n    appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.teams2.standalone\"]/version' 2>/dev/null | sed -E 's/<version>([0-9.]*) .*/\\1/')\n    #versionKey=\"CFBundleGetInfoString\"\n    expectedTeamID=\"UBF8T346G9\"\n    blockingProcesses=( MSTeams \"Microsoft Teams\" \"Microsoft Teams WebView\" \"Microsoft Teams Launcher\" \"Microsoft Teams (work preview)\")\n    # msupdate requires a PPPC profile pushed out from Jamf to work, https://github.com/pbowden-msft/MobileConfigs/tree/master/Jamf-MSUpdate\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" && $DEBUG -eq 0 ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps TEAMS21 ) # --wait 600 # TEAM01\n    ;;\nmicrosoftteamsreset)\n    name=\"Microsoft Teams Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Teams\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Teams_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmicrosoftvisualstudiocode|\\\nvisualstudiocode)\n    name=\"Visual Studio Code\"\n    type=\"zip\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?LinkID=2156837\" # Universal\n    appNewVersion=$(curl -fsL \"https://code.visualstudio.com/Updates\" | grep \"/darwin\" | grep -oiE \".com/([^>]+)([^<]+)/darwin\" | cut -d \"/\" -f 2 | sed $'s/[^[:print:]\t]//g' | head -1 )\n    expectedTeamID=\"UBF8T346G9\"\n    appName=\"Visual Studio Code.app\"\n    blockingProcesses=( Code )\n    ;;\nmicrosoftwindowsapp)\n    name=\"Windows App\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.rdc.macos\"\n    blockingProcesses=( \"Windows App\" \"Microsoft Remote Desktop\" )\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=868963\"\n    appNewVersion=\"$(curl -is \"${downloadURL}\" | grep \"Location\" | grep -o '[0-9][0-9]\\.[0-9]*\\.[0-9]*')\"\n    expectedTeamID=\"UBF8T346G9\"\n    ;;\nmicrosoftword)\n    name=\"Microsoft Word\"\n    type=\"pkg\"\n    downloadURL=\"https://go.microsoft.com/fwlink/?linkid=525134\"\n    #appNewVersion=$(curl -fs https://macadmins.software/latest.xml | xpath '//latest/package[id=\"com.microsoft.word.standalone.365\"]/cfbundleshortversionstring' 2>/dev/null | sed -E 's/<cfbundleshortversionstring>([0-9.]*)<.*/\\1/')\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i location: | grep -o \"/Microsoft_.*pkg\" | cut -d \"_\" -f 3 | cut -d \".\" -f 1-2)\n    expectedTeamID=\"UBF8T346G9\"\n    if [[ -x \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" && $INSTALL != \"force\" ]]; then\n        printlog \"Running msupdate --list\"\n        \"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" --list\n    fi\n    updateTool=\"/Library/Application Support/Microsoft/MAU2.0/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\"\n    updateToolArguments=( --install --apps MSWD2019 )\n    ;;\nmicrosoftwordreset)\n    name=\"Microsoft Word Reset\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.reset.Word\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*Word_Reset.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nmightymike)\n    name=\"Mighty Mike\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit jorio MightyMike)\n    appNewVersion=$(versionFromGit jorio MightyMike)\n    expectedTeamID=\"RVNL7XC27G\"\n    ;;\nmindmanager)\n    name=\"MindManager\"\n    type=\"dmg\"\n    downloadURL=\"https://www.mindmanager.com/mm-mac-dmg\"\n    appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*_Mac_*([0-9.]*)\\..*/\\1/g')\"\n    expectedTeamID=\"ZF6ZZ779N5\"\n    ;;\nminiconda)\n    type=\"pkg\"\n\tpackageID=\"io.continuum.pkg.prepare_installation io.continuum.pkg.run_installation io.continuum.pkg.pathupdate\"\n    if [[ $(arch) == arm64 ]]; then\n\t\tname=\"Miniconda3-latest-MacOSX-arm64\"\n\t\tdownloadURL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-arm64.pkg\"\n\telif [[ $(arch) == i386 ]]; then\n\t\tname=\"Miniconda3-latest-MacOSX-x86_64\"\n\t\tdownloadURL=\"https://repo.anaconda.com/miniconda/Miniconda3-latest-MacOSX-x86_64.pkg\"\n\tfi\n    expectedTeamID=\"Z5788K4JT7\"\n    ;;\nmiro)\n    # credit: @matins\n    name=\"Miro\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://desktop.miro.com/platforms/darwin-arm64/Install-Miro.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://desktop.miro.com/platforms/darwin/Install-Miro.dmg\"\n    fi\n    expectedTeamID=\"M3GM7MFY7U\"\n    ;;\nmist-cli)\n    name=\"Mist-CLI\"\n    type=\"pkg\"\n    packageID=\"com.ninxsoft.pkg.mist-cli\"\n    downloadURL=$(downloadURLFromGit \"ninxsoft\" \"mist-cli\")\n    appNewVersion=$(versionFromGit \"ninxsoft\" \"mist-cli\")\n    expectedTeamID=\"7K3HVCLV7Z\"\n    blockingProcesses=( NONE )\n    ;;\nmist)\n    name=\"Mist\"\n    type=\"pkg\"\n    packageID=\"com.ninxsoft.pkg.mist\"\n    downloadURL=$(downloadURLFromGit \"ninxsoft\" \"mist\")\n    appNewVersion=$(versionFromGit \"ninxsoft\" \"mist\")\n    expectedTeamID=\"7K3HVCLV7Z\"\n    blockingProcesses=( NONE )\n    ;;\nmkuser)\n    name=\"mkuser\"\n    type=\"pkg\"\n    packageID=\"org.freegeek.pkg.mkuser\"\n    downloadURL=\"$(downloadURLFromGit freegeek-pdx mkuser)\"\n    # appNewVersion=\"$(versionFromGit freegeek-pdx mkuser unfiltered)\"\n    # mkuser does not adhere to numbers and dots only for version numbers.\n    # Pull request submitted to add an unfiltered option to versionFromGit\n    appNewVersion=\"$(osascript -l 'JavaScript' -e 'run = argv => JSON.parse(argv[0]).tag_name' -- \"$(curl -m 5 -sfL 'https://update.mkuser.sh' 2> /dev/null)\" 2> /dev/null)\"\n    appCustomVersion(){\n        if [ -e /usr/local/bin/mkuser ]; then\n            awk -F \" |=|'\" '($2 == \"MKUSER_VERSION\") { print $(NF-1); exit }' /usr/local/bin/mkuser\n        fi\n    }\n    expectedTeamID=\"YRW6NUGA63\"\n    ;;\nmmhmm-desktop)\n    name=\"mmhmm desktop\"\n    appName=\"mmhmm desktop.app\"\n    type=\"pkg\"\n    downloadURL=\"https://updates.mmhmm.app/mac/hybrid/beta/mmhmm.pkg\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/16.6 Safari/605.1.15\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"M3KUT44L48\"\n    blockingProcesses=( \"mmhmm\" )\n    ;;\nmmhmm|\\\nmmhmm-studio)\n    name=\"mmhmm Studio\"\n    appName=\"mmhmm Studio.app\"\n    type=\"pkg\"\n    downloadURL=\"https://updates.mmhmm.app/mac/mmhmmStudio.pkg\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15\" )\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://help.mmhmm.app/hc/en-us/articles/4420969712151-mmhmm-Studio-Mac-only-\" | grep 'The latest version of mmhmm Studio is <strong>*' | sed -e 's/.*\\<strong\\>\\(.*\\)\\.\\<\\/strong\\>.*/\\1/')\n    expectedTeamID=\"M3KUT44L48\"\n    ;;\nmobikinassistantforandroid)\n    name=\"MobiKin Assistant for Android\"\n    type=\"dmg\"\n    downloadURL=\"https://www.mobikin.com/downloads/mobikin-android-assistant.dmg\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=$(curl -fs https://www.mobikin.com/assistant-for-android-mac/ | grep -i \"version:\" | sed -E 's/.*Version: ([0-9.]*)<.*/\\1/g')\n    expectedTeamID=\"YNL42PA5C4\"\n    ;;\nmobiletolocal)\n    name=\"Mobile to Local\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit BIG-RAT mobile_to_local)\"\n    appNewVersion=\"$(versionFromGit BIG-RAT mobile_to_local)\"\n    expectedTeamID=\"PS2F6S478M\"\n    ;;\nmobirise)\n    name=\"mobirise\"\n    type=\"dmg\"\n    downloadURL=\"https://download.mobirise.com/MobiriseSetup.dmg\"\n    expectedTeamID=\"UD4494E573\"\n    ;;\nmochakeyboard)\n    name=\"Mocha Keyboard\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://mochasoft.dk/mochakeyboard.dmg.zip\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\"\n-H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n-H \"accept-encoding: gzip, deflate, br\"\n-H \"accept-language: en-US,en;q=0.9\"\n-H \"sec-fetch-dest: document\"\n-H \"sec-fetch-mode: navigate\"\n-H \"sec-fetch-user: ?1\"\n-H \"sec-gpc: 1\"\n-H \"upgrade-insecure-requests: 1\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"RR9F5EPNVW\"\n    ;;\nmochatelnet)\n    name=\"Telnet\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://mochasoft.dk/telnet.dmg.zip\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\"\n-H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n-H \"accept-encoding: gzip, deflate, br\"\n-H \"accept-language: en-US,en;q=0.9\"\n-H \"sec-fetch-dest: document\"\n-H \"sec-fetch-mode: navigate\"\n-H \"sec-fetch-user: ?1\"\n-H \"sec-gpc: 1\"\n-H \"upgrade-insecure-requests: 1\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"RR9F5EPNVW\"\n    ;;\nmochatn3270)\n    name=\"TN3270\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://mochasoft.dk/tn3270.dmg.zip\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\"\n-H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n-H \"accept-encoding: gzip, deflate, br\"\n-H \"accept-language: en-US,en;q=0.9\"\n-H \"sec-fetch-dest: document\"\n-H \"sec-fetch-mode: navigate\"\n-H \"sec-fetch-user: ?1\"\n-H \"sec-gpc: 1\"\n-H \"upgrade-insecure-requests: 1\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"RR9F5EPNVW\"\n    ;;\nmochatn3812)\n    name=\"TN3812\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://mochasoft.dk/tn3812.dmg.zip\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\"\n-H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n-H \"accept-encoding: gzip, deflate, br\"\n-H \"accept-language: en-US,en;q=0.9\"\n-H \"sec-fetch-dest: document\"\n-H \"sec-fetch-mode: navigate\"\n-H \"sec-fetch-user: ?1\"\n-H \"sec-gpc: 1\"\n-H \"upgrade-insecure-requests: 1\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"Frydendal\"\n    ;;\nmochatn5250)\n    name=\"TN5250\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://mochasoft.dk/tn5250.dmg.zip\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\"\n-H \"accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9\"\n-H \"accept-encoding: gzip, deflate, br\"\n-H \"accept-language: en-US,en;q=0.9\"\n-H \"sec-fetch-dest: document\"\n-H \"sec-fetch-mode: navigate\"\n-H \"sec-fetch-user: ?1\"\n-H \"sec-gpc: 1\"\n-H \"upgrade-insecure-requests: 1\" )\n    appNewVersion=\"\"\n    expectedTeamID=\"RR9F5EPNVW\"\n    ;;\nmockoon)\n    name=\"Mockoon\"\n    type=\"dmg\"\n    archiveName=\"mockoon.setup[0-9.]*universal.dmg\"\n    downloadURL=\"$(downloadURLFromGit mockoon mockoon)\"\n    appNewVersion=\"$(versionFromGit mockoon mockoon)\"\n    expectedTeamID=\"8443RQQKK6\"\n    ;;\nmoderncsv)\n    name=\"Modern CSV\"\n    type=\"dmg\"\n    downloadURL=\"https://moderncsv.com/release/$(curl https://www.moderncsv.com/release/ | grep -o ModernCSV-Mac-v\\[0-9\\]\\*.\\[0-9\\]\\*.\\[0-9\\]\\*.dmg | tail -1)\"\n    appNewVersion=$(curl https://www.moderncsv.com/release/ | grep -o moderncsv-mac-v\\[0-9\\]\\*.\\[0-9\\]\\*.\\[0-9\\]\\*.dmg | tail -1 | grep -Eo '([0-9]+)(\\.?[0-9]+)*' | head -1)\n    expectedTeamID=\"HV2WS8735K\"\n    ;;\nmongodbcompass)\n    name=\"MongoDB Compass\"\n    type=\"dmg\"\n    archiveName=\"mongodb-compass-[0-9.]*-darwin-x64.dmg\"\n    downloadURL=\"$(downloadURLFromGit mongodb-js compass)\"\n    appNewVersion=\"$(versionFromGit mongodb-js compass)\"\n    expectedTeamID=\"4XWMY46275\"\n    ;;\nmonitorcontrol)\n    name=\"MonitorControl\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit MonitorControl MonitorControl)\"\n    appNewVersion=\"$(versionFromGit MonitorControl MonitorControl)\"\n    expectedTeamID=\"CYC8C8R4K9\"\n    ;;\nmontereyblocker)\n    name=\"montereyblocker\"\n    type=\"pkg\"\n    packageID=\"dk.envo-it.montereyblocker\"\n    downloadURL=$(downloadURLFromGit Theile montereyblocker )\n    appNewVersion=$(versionFromGit Theile montereyblocker )\n    expectedTeamID=\"FXW6QXBFW5\"\n    ;;\nmorisawadesktopmanager)\n    name=\"Morisawa Desktop Manager\"\n    type=\"pkgInDmg\"\n    packageID=\"jp.co.morisawa.MorisawaDesktopManager.Installer\"\n    morisawadesktopmanagerVersions=$(curl -fsL https://morisawafonts.com/resources/dm/mf_updates.mac.json)\n    downloadURL=$(getJSONValue \"${morisawadesktopmanagerVersions}\" \"latest_url\")\n    appNewVersion=$(getJSONValue \"${morisawadesktopmanagerVersions}\" \"latest_version\")\n    expectedTeamID=\"662PVPVA3N\"\n    ;;\nmountainduck)\n    name=\"Mountain Duck\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://version.mountainduck.io/changelog.rss | xpath '//rss/channel/item/enclosure/@url' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs https://version.mountainduck.io/changelog.rss | xpath '//rss/channel/item/enclosure/@sparkle:shortVersionString' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"G69SCX94XU\"\n    ;;\nmultipass)\n    name=\"multipass\"\n    type=\"pkg\"\n    downloadURL=\"$(downloadURLFromGit canonical multipass)\"\n    appNewVersion=\"$(versionFromGit canonical multipass)\"\n    expectedTeamID=\"X4QN7LTP59\"\n    ;;\nmunki)\n    name=\"Munki\"\n    type=\"pkg\"\n    packageID=\"com.googlecode.munki.core\"\n    downloadURL=$(downloadURLFromGit \"macadmins\" \"munki-builds\")\n    appNewVersion=$(versionFromGit \"macadmins\" \"munki-builds\")\n    expectedTeamID=\"T4SK8ZXCXG\"\n    blockingProcesses=( NONE )\n    ;;\nmunkiadmin)\n    name=\"MunkiAdmin\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit hjuutilainen munkiadmin )\n    appNewVersion=$(versionFromGit hjuutilainen munkiadmin )\n    expectedTeamID=\"8XXWJ76X9Y\"\n    ;;\nmusescore)\n    name=\"MuseScore 4\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit musescore MuseScore)\n    appNewVersion=$(versionFromGit musescore MuseScore)\n    expectedTeamID=\"6EPAF2X3PR\"\n    ;;\nmuzzle)\n    name=\"Muzzle\"\n    type=\"zip\"\n    downloadURL=\"https://muzzleapp.com/binaries/muzzle.zip\"\n    appNewVersion=$(curl -fs https://muzzleapp.com/updates/  | grep -io 'h2.*Version.* [0-9.]*.*h2' | head -1 | sed -E 's/.*ersion *([0-9.]*).*/\\1/g')\n    expectedTeamID=\"49EYHPJ4Q3\"\n    ;;\nmysqlworkbenchce)\n    name=\"MySQLWorkbench\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://dev.mysql.com/get/Downloads/MySQLGUITools/$(curl -fsL \"https://dev.mysql.com/downloads/workbench/?os=33\" | grep -o \"mysql-workbench-community-.*-macos-arm64.dmg\" | head -1)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://dev.mysql.com/get/Downloads/MySQLGUITools/$(curl -fsL \"https://dev.mysql.com/downloads/workbench/?os=33\" | grep -o \"mysql-workbench-community-.*-macos-x86_64.dmg\" | head -1)\"\n    fi\n    appNewVersion=\"$(curl -fsL 'http://workbench.mysql.com/current-release' | grep fullversion | cut -d\\\" -f4).CE\"\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\nnamiral)\n    name=\"Namirial Sign\"\n    type=\"dmg\"\n    downloadURL=\"https://sign-be.namirial.app/download/macos\"\n    expectedTeamID=\"V7PV54FASQ\"\n    appName=\"Namirial Sign.app\"\n    ;;\nnanosaur)\n    name=\"Nanosaur\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit jorio Nanosaur)\n    appNewVersion=$(versionFromGit jorio Nanosaur)\n    expectedTeamID=\"RVNL7XC27G\"\n    ;;\nnativeaccess)\n    name=\"Native Access\"\n    type=\"zip\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        naDetails=\"$(curl -fs \"https://na-update.native-instruments.com/arm64/latest-mac.yml\")\"\n        naItem=\"arm64/$(echo \"$naDetails\" | grep \"path\" | awk '{print $2}' | xargs)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        naDetails=\"$(curl -fs \"https://na-update.native-instruments.com/latest-mac.yml\")\"\n        naItem=\"$(echo \"$naDetails\" | grep \"path\" | awk '{print $2}' | xargs)\"\n    fi\n    downloadURL=\"https://na-update.native-instruments.com/${naItem}\"\n    appNewVersion=\"$(echo \"$naDetails\" | grep \"version\" | awk '{print $2}' | xargs)\"\n    expectedTeamID=\"83K5EG6Z9V\"\n    ;;\nnessusagent)\n    name=\"Nessus Agent\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://www.tenable.com/downloads/api/v2/pages/nessus-agents/files/NessusAgent-latest.dmg\"\n    appCustomVersion() { /Library/NessusAgent/run/bin/nasl -v | grep Agent | cut -d' ' -f3 }\n    appNewVersion=$(curl -I -s  'https://www.tenable.com/downloads/api/v2/pages/nessus-agents/files/NessusAgent-latest.dmg' | grep 'filename=' | cut -d- -f3 | cut -f 1-3 -d '.')\n    expectedTeamID=\"4B8J598M7U\"\n    ;;\nnetiquette)\n    name=\"Netiquette\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit objective-see Netiquette)\"\n    appNewVersion=\"$(versionFromGit objective-see Netiquette)\"\n    expectedTeamID=\"VBG97UB4TA\"\n    ;;\nnetnewswire)\n    name=\"NetNewsWire\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://ranchero.com/downloads/netnewswire-release.xml \\\n        | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs https://ranchero.com/downloads/netnewswire-release.xml | xpath '//rss/channel/item[1]/enclosure/@sparkle:shortVersionString' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"M8L2WTLA8W\"\n    ;;\nnetspot)\n    name=\"NetSpot\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.netspotapp.com/download/NetSpot.dmg\"\n    appNewVersion=$(curl -fs \"https://www.netspotapp.com/updates/netspot2-appcast.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"5QLDY8TU83\"\n    ;;\nnetworksharemounter)\n    name=\"NetworkShareMounter\"\n    type=\"pkg\"\n    packageID=\"de.fau.rrze.NetworkShareMounter\"\n    appNewVersion=$(curl -sfL https://gitlab.rrze.fau.de/api/v4/projects/506/releases | grep -o 'release-[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | grep -o '[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | head -n 1)\n    downloadURL=$(curl -sfL \"https://gitlab.rrze.fau.de/api/v4/projects/506/releases/release-$appNewVersion/assets/links/\" | grep -Eo '(http|https)://[a-zA-Z0-9./?=_%:-]*.pkg' | head -n 1)\n    expectedTeamID=\"C8F68RFW4L\"\n    ;;\nnextcloud)\n    name=\"nextcloud\"\n    type=\"pkg\"\n    #packageID=\"com.nextcloud.desktopclient\"\n    downloadURL=$(downloadURLFromGit nextcloud-releases desktop)\n    appNewVersion=$(versionFromGit nextcloud-releases desktop)\n    # The version of the app is not equal to the version listed on GitHub.\n    # App version something like \"3.1.3git (build 4850)\" but web page lists as \"3.1.3\"\n    # Also it does not math packageID version \"3.1.34850\"\n    appCustomVersion(){defaults read /Applications/nextcloud.app/Contents/Info.plist CFBundleShortVersionString | sed -E 's/^([0-9.]*)git.*/\\1/g'}\n    expectedTeamID=\"NKUJUXUJ3B\"\n    ;;\nnodejs)\n    name=\"nodejs\"\n    type=\"pkg\"\n    appNewVersion=$(curl -s https://nodejs.org/dist/latest/ | sed -nE 's|.*>node-(.*)\\.pkg</a>.*|\\1|p')\n    appCustomVersion(){/usr/local/bin/node -v}\n    downloadURL=\"https://nodejs.org/dist/latest/node-$(curl -s https://nodejs.org/dist/latest/ | sed -nE 's|.*>node-(.*)\\.pkg</a>.*|\\1|p').pkg\"\n    expectedTeamID=\"HX7739G8FX\"\n    ;;\nnodejslts)\n    name=\"nodejs\"\n    type=\"pkg\"\n    appNewVersion=$(curl -fsL https://nodejs.org/en | xmllint --html --xpath '//a[contains(text(),\"LTS\")]/@href' - 2>/dev/null | grep -oE 'v[0-9]+(\\.[0-9]+)*' | head -1)\n    downloadURL=\"https://nodejs.org/dist/$appNewVersion/node-$appNewVersion.pkg\"\n    appCustomVersion(){/usr/local/bin/node -v}\n    expectedTeamID=\"HX7739G8FX\"\n    ;;\nnomachine)\n    name=\"NoMachine\"\n    type=\"pkgInDmg\"\n    downloadURL=$(curl -i -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" https://www.nomachine.com/dwl_nm_bann.php | grep -i location | cut -w -f2 | tr -d '[:cntrl:]')\n    appNewVersion=$(echo $downloadURL | grep -Eo \"\\d+.\\d+.\\d+\")\n    expectedTeamID=\"493C5JZAGR\"\n    ;;\nnomad)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"NoMAD\"\n    type=\"pkg\"\n    downloadURL=\"https://files.nomad.menu/NoMAD.pkg\"\n    appNewVersion=$(curl -fs https://nomad.menu/support/ | grep \"NoMAD Downloads\" | sed -E 's/.*Current Version ([0-9\\.]*)<.*/\\1/g')\n    expectedTeamID=\"VRPY9KHGX6\"\n    ;;\nnomadlogin)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"NoMAD Login\"\n    type=\"pkg\"\n    downloadURL=\"https://files.nomad.menu/NoMAD-Login-AD.pkg\"\n    appNewVersion=$(curl -fs https://nomad.menu/support/ | grep \"NoMAD Login AD Downloads\" | sed -E 's/.*Current Version ([0-9\\.]*)<.*/\\1/g')\n    expectedTeamID=\"AAPZK3CB24\"\n    ;;\nnordlayer)\n    # credit: Taboc741 (https://github.com/taboc741)\n    name=\"NordLayer\"\n    type=\"pkg\"\n    downloadURL=\"https://downloads.nordlayer.com/mac/latest/NordLayer.pkg\"\n    expectedTeamID=\"W5W395V82Y\"\n    ;;\nnordvpn)\n    name=\"NordVPN\"\n    type=\"pkg\"\n    packageID=\"com.nordvpn.macos\"\n    downloadURL=\"https://downloads.nordcdn.com/apps/macos/generic/NordVPN-OpenVPN/latest/NordVPN.pkg\"\n    appNewVersion=$( curl -s https://downloads.nordcdn.com/apps/macos/generic/NordVPN-OpenVPN/latest/update_pkg.xml | xpath '(//sparkle:shortVersionString/text())[1]' 2>/dev/null )\n    versionKey=\"CFBundleShortVersionString\"\n    expectedTeamID=\"W5W395V82Y\"\n    ;;\nnotion)\n    name=\"Notion\"\n    type=\"dmg\"\n    downloadURL=\"https://www.notion.so/desktop/mac/download\"\n    appNewVersion=$(curl -fsIL \"https://www.notion.so/desktop/mac/download\" | grep -i \"^location\" | awk '{print $2}' | sed -e 's/.*Notion-\\(.*\\).dmg.*/\\1/' | cut -d '-' -f 1)\n    expectedTeamID=\"LBQJ96FQ8D\"\n    ;;\nnova)\n    name=\"Nova\"\n    type=\"zip\"\n    downloadURL=\"https://download.panic.com/nova/Nova-Latest.zip\"\n    appNewVersion=\"$(curl -fsIL https://download.panic.com/nova/Nova-Latest.zip | grep -i ^location | tail -1 | sed -E 's/^.*http.*\\%20([0-9.]*)\\.zip/\\1/g')\"\n    expectedTeamID=\"VE8FC488U5\"\n    ;;\nnudge)\n    name=\"Nudge\"\n    type=\"pkg\"\n    archiveName=\"Nudge-[0-9.]*.pkg\"\n    downloadURL=$(downloadURLFromGit macadmins Nudge )\n    appNewVersion=$(versionFromGit macadmins Nudge )\n    expectedTeamID=\"T4SK8ZXCXG\"\n    ;;\nnudgesuite)\n    name=\"Nudge Suite\"\n    appName=\"Nudge.app\"\n    type=\"pkg\"\n    archiveName=\"Nudge_Suite-[0-9.]*.pkg\"\n    appNewVersion=$(versionFromGit macadmins Nudge )\n    downloadURL=$(downloadURLFromGit macadmins Nudge )\n    expectedTeamID=\"T4SK8ZXCXG\"\n    blockingProcesses=( \"Nudge\" )\n    ;;\nnvivo13)\n    name=\"NVivo\"\n    type=\"dmg\"\n    downloadURL=\"https://download.qsrinternational.com/Software/NVivoforMac/NVivo.dmg\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | tr '/' '\\n' | grep \"[0-9]\" | cut -d \".\" -f1-3 )\n    expectedTeamID=\"A66L57342X\"\n    blockingProcesses=( NVivo NVivoHelper )\n    ;;\nnvivo|\\\nnvivo14)\n    name=\"NVivo 14\"\n    type=\"dmg\"\n    downloadURL=\"https://download.qsrinternational.com/Software/NVivo14forMac/NVivo.dmg\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | awk -F'/' '{ print $6 }' | cut -d \".\" -f1-3 )\n    expectedTeamID=\"8F4S7H8S59\"\n    blockingProcesses=( NVivo NVivoHelper \"Nvivo 14\" )\n    ;;\nnweasecuretestingbrowser)\n    name=\"NWEA Secure Testing Browser\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.nwea.org/docs/NWEA-Secure-Testing-Browser-Mac.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"SRTXZJ7SQ3\"\n    ;;\n\nobs)\n    name=\"OBS\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        SUFeedURL=\"https://obsproject.com/osx_update/updates_arm64_v2.xml\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        SUFeedURL=\"https://obsproject.com/osx_update/updates_x86_64_v2.xml\"\n    fi\n    appNewVersion=$(curl -fs \"$SUFeedURL\" | xpath '(//rss/channel/item[sparkle:channel=\"stable\"]/sparkle:shortVersionString/text())[1]' 2>/dev/null)\n    downloadURL=$(curl -fs \"$SUFeedURL\" | xpath 'string(//rss/channel/item[sparkle:channel=\"stable\"]/enclosure/@url[1])' 2>/dev/null)\n    archiveName=$(basename \"$downloadURL\")   \n    versionKey=\"CFBundleShortVersionString\"\n    blockingProcesses=( \"OBS Studio\" )\n    expectedTeamID=\"2MMRE5MTB8\"\n    ;;\nobsbotwebcam)\n    name=\"OBSBOT_WebCam\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL \"https://www.obsbot.com/download/obsbot-tiny-series\" | xmllint --html --xpath 'string(//a[contains(@href,\"WebCam_OA_E_MacOS\")]/@href)' - 2> /dev/null)\n    appNewVersion=$(curl -fsL \"https://www.obsbot.com/download/obsbot-tiny-series\" | xmllint --html --xpath 'substring-after(substring-before(string(//a[contains(@href,\"WebCam_OA_E_MacOS\")]/@href),\"_release\"),\"MacOS_\")' - 2> /dev/null)\n    expectedTeamID=\"7GJANK3822\"\n    ;;\nobsidian)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Obsidian\"\n    type=\"dmg\"\n    downloadURL=$( downloadURLFromGit obsidianmd obsidian-releases )\n    appNewVersion=$(versionFromGit obsidianmd obsidian-releases)\n    expectedTeamID=\"6JSW4SJWN9\"\n    ;;\nodrive)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"odrive\"\n    type=\"pkg\"\n    packageID=\"com.oxygen.odrive.installer-prod.pkg\"\n    # https://docs.odrive.com/docs/odrive-usage-guide#install-desktop-sync\n    downloadURL=\"https://www.odrive.com/downloaddesktop?platform=mac\"\n    expectedTeamID=\"N887K88VYZ\"\n    ;;\nomnidisksweeper)\n    name=\"OmniDiskSweeper\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniDiskSweeper\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnifocus3)\n    name=\"OmniFocus\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniFocus3\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnifocus4)\n    name=\"OmniFocus\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniFocus4\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnigraffle6)\n    name=\"OmniGraffle\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniGraffle6\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnigraffle7)\n    name=\"OmniGraffle\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniGraffle7\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnioutliner5)\n    name=\"OmniOutliner\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniOutliner5\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomniplan3)\n    name=\"OmniPlan\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniPlan3\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomniplan4)\n    name=\"OmniPlan\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniPlan4\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nomnipresence)\n    name=\"OmniPresence\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://update.omnigroup.com/appcast/com.omnigroup.OmniPresence\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34YW5XSRB7\"\n    ;;\nonionshare)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"OnionShare\"\n    type=\"dmg\"\n    downloadURL=\"https://onionshare.org$(curl -fs https://onionshare.org | grep \"button.*dmg\" | tr '\"' '\\n' | grep \".dmg\")\"\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"N9B95FDWH4\"\n    ;;\nonlyofficedesktop)\n    name=\"ONLYOFFICE\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n    downloadURL=\"https://download.onlyoffice.com/install/desktop/editors/mac/arm/distrib/ONLYOFFICE.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n    downloadURL=\"https://download.onlyoffice.com/install/desktop/editors/mac/x86_64/distrib/ONLYOFFICE.dmg\"\n    fi\n    appNewVersion=$(versionFromGit ONLYOFFICE DesktopEditors)\n    expectedTeamID=\"2WH24U26GJ\"\n    ;;\nonscreencontrol)\n    name=\"OnScreen Control\"\n    type=\"pkgInZip\"\n    packageID=\"com.LGSI.OnScreen-Control\"\n    releaseURL=\"https://www.lg.com/de/support/software-select-category-result?csSalesCode=34WK95U-W.AEU\"\n    appNewVersion=$(curl -sf $releaseURL | grep -m 1 \"Mac_OSC_\" | sed -E 's/.*OSC_([0-9.]*).zip.*/\\1/g')\n    downloadURL=$(curl -sf $releaseURL | grep -m 1 \"Mac_OSC_\" | sed \"s|.*href=\\\"\\(.*\\)\\\" title.*|\\\\1|\")\n    expectedTeamID=\"5SKT5H4CPQ\"\n    ;;\nonyx)\n    name=\"OnyX\"\n    type=\"dmg\"\n    osVersion=$( sw_vers -productVersion | cut -f1 -d'.' )\n    downloadURL=\"https://www.titanium-software.fr/download/$osVersion/OnyX.dmg\"\n    appNewVersion=$( curl -fs https://www.titanium-software.fr/en/onyx.html | grep -Eo \"OnyX [0-9]+\\.[0-9]+\\.[0-9]+ for macOS [^ ]+ $osVersion\" | awk '{print $2}' | sort -Vr | head -1 )\n    versionKey=\"CFBundleShortVersionString\"\n    expectedTeamID=\"T49MRBL8UL\"\n    ;;\nopenvpnconnect)\n    # credit: Erik Stam (@erikstam)\n    name=\"OpenVPN\"\n    type=\"pkgInDmg\"\n    pkgName=\"OpenVPN_Connect_Installer_signed.pkg\"\n    downloadURL=\"https://openvpn.net/downloads/openvpn-connect-v2-macos.dmg\"\n    expectedTeamID=\"ACV7L3WCD8\"\n    ;;\nopenvpnconnectv3)\n    # credit: @lotnix\n    name=\"OpenVPN Connect\"\n    type=\"pkgInDmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        pkgName=\"OpenVPN_Connect_[0-9_()]*_arm64_Installer_signed.pkg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        pkgName=\"OpenVPN_Connect_[0-9_()]*_x86_64_Installer_signed.pkg\"\n    fi\n    appNewVersion=$(curl -fs \"https://openvpn.net/vpn-server-resources/openvpn-connect-for-macos-change-log/\" | grep -i \">Release notes for \" | grep -v beta | head -n 1 | sed \"s|.*for \\(.*\\) .*|\\\\1|\")\n    downloadURL=\"https://openvpn.net/downloads/openvpn-connect-v3-macos.dmg\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" )\n    expectedTeamID=\"ACV7L3WCD8\"\n    ;;\nopera)\n    name=\"Opera\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsIL \"$(curl -fs \"$(curl -fsL \"https://download.opera.com/download/get/?partner=www&opsys=MacOS\" | tr '\"' \"\\n\" | grep -e \"www.opera.com.*thanks.*opera\" | sed 's/\\&amp\\;/\\&/g')\" | tr '\"' \"\\n\" | grep \"download.opera.com\" | sed 's/\\&amp\\;/\\&/g')\" | grep -i \"^location\" | grep -io \"https.*dmg\")\"\n    appNewVersion=\"$(printf \"$downloadURL\" | sed -E 's/https.*\\/([0-9.]*)\\/mac\\/.*/\\1/')\"\n\tversionKey=\"CFBundleVersion\"\n    expectedTeamID=\"A2P9LX4JPN\"\n    ;;\norcaslicer)\n    name=\"OrcaSlicer\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n       downloadURL=\"$(downloadURLFromGit SoftFever OrcaSlicer)\"\n       appNewVersion=\"$(versionFromGit SoftFever OrcaSlicer)\"\n       archiveName=\"OrcaSlicer_Mac_arm64_*.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n      downloadURL=\"$(downloadURLFromGit SoftFever OrcaSlicer)\"\n      appNewVersion=\"$(versionFromGit SoftFever OrcaSlicer)\"\n      archiveName=\"OrcaSlicer_Mac_x86_64_*.dmg\"\n    fi\n    expectedTeamID=\"XQK7C38HH5\"\n    ;;\n    \norigin)\n     name=\"Origin\"\n     type=\"dmg\"\n     downloadURL=\"https://www.dm.origin.com/mac/download/Origin.dmg\"\n     expectedTeamID=\"TSTV75T6Q5\"\n     blockingProcesses=( \"Origin\" )\n     ;;\norion)\n    name=\"Orion\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.kagi.com/downloads/OrionInstaller.dmg\"\n    expectedTeamID=\"TFVG979488\"\n    blockingProcesses=( \"Orion\" )\n    ;;\nottomatic)\n    name=\"Otto Matic\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit jorio OttoMatic)\n    appNewVersion=$(versionFromGit jorio OttoMatic)\n    expectedTeamID=\"RVNL7XC27G\"\n    ;;\noutset)\n    name=\"Outset\"\n    type=\"pkg\"\n    packageID=\"io.macadmins.Outset\"\n    downloadURL=$(downloadURLFromGit \"macadmins\" \"outset\")\n    appNewVersion=$(versionFromGit \"macadmins\" \"outset\")\n    expectedTeamID=\"T4SK8ZXCXG\"\n    blockingProcesses=( NONE )\n    ;;\noverflow)\n    name=\"Overflow\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -sL 'https://overflow.io/download/' | awk -F '\"' '/app-updates.overflow.io\\/packages\\/updates\\/osx_64/ { print $8; exit }')\"\n    appNewVersion=$(echo \"$downloadURL\" | awk -F '-|[.]dmg' '{ print $(NF-1) }')\n    expectedTeamID=\"7TK7YSGJFF\"\n    versionKey=\"CFBundleShortVersionString\"\n    ;;\npacifist)\n    name=\"Pacifist\"\n    type=\"dmg\"\n    downloadURL=\"https://charlessoft.com/cgi-bin/pacifist_download.cgi?type=dmg\"\n    expectedTeamID=\"HRLUCP7QP4\"\n    ;;\n\npackages)\n   #NOTE: Packages is signed but _not_ notarized, so spctl will reject it\n   name=\"Packages\"\n   type=\"pkgInDmg\"\n   pkgName=\"Install Packages.pkg\"\n   downloadURL=\"http://s.sudre.free.fr/Software/files/Packages.dmg\"\n   expectedTeamID=\"NL5M9E394P\"\n   ;;\npandoc)\n    name=\"Pandoc\"\n    type=\"pkg\"\n    packageID=\"net.johnmacfarlane.pandoc\"\n    downloadURL=$(downloadURLFromGit jgm pandoc )\n    appNewVersion=$(versionFromGit jgm pandoc )\n    archiveName=\"mac.pkg\"\n    expectedTeamID=\"5U2WKE6DES\"\n    ;;\nparallelsrasclient)\n    name=\"Parallels Client\"\n    type=\"pkg\"\n    appMajorVersion=$(curl -sf \"https://download.parallels.com/website_links/ras/index.json\" | head -2 | tail -1 | tr -dc \"[:alnum:]\")\n\tappFirstCommaVersion=$(curl -sf \"https://download.parallels.com/ras/v\"$appMajorVersion\"/docs/RAS%20Client%20for%20Mac%20Changelog.txt\" | grep -m 1 \"Parallels Client for Mac Version\" | sed \"s|.*Version \\(.*\\) (.*|\\\\1|\" | cut -d. -f-2)\n    # appSecondCommaVersion=$(curl -sf \"https://download.parallels.com/ras/v\"$appMajorVersion\"/docs/RAS%20Client%20for%20Mac%20Changelog.txt\" | grep -m 1 \"Parallels Client for Mac Version\" | sed \"s|.*Version \\(.*\\) (.*|\\\\1|\")\n    appRealVersion=$(curl -sf \"https://download.parallels.com/ras/v\"$appMajorVersion\"/docs/RAS%20Client%20for%20Mac%20Changelog.txt\" | grep -m 1 \"Parallels Client for Mac Version\" | sed \"s|.*(\\(.*\\)).*|\\\\1|\")\n    # appDownloadVersion=$(curl -sf \"https://download.parallels.com/ras/v\"$appMajorVersion\"/docs/RAS%20Client%20for%20Mac%20Changelog.txt\" | grep -m 1 \"Parallels Client for Mac Version\" | sed \"s|.*Version \\(.*\\) -.*|\\\\1|\" | sed 's/ /./g' | sed 's/[^0-9.]//g')\n    appNewVersion=$appFirstCommaVersion.$appRealVersion\n    # downloadURL=https://download.parallels.com/ras/v\"$appMajorVersion\"/\"$appSecondCommaVersion\".\"$appRealVersion\"/RasClient-Mac-Notarized-\"$appSecondCommaVersion\"-\"$appRealVersion\".pkg\n    downloadURL=$(curl -fs https://download.parallels.com/website_links/ras/$appMajorVersion/builds-en_US.json | grep '\"Mac Client\":' | cut -d \":\" -f2- | cut -d '\"' -f2)\n    expectedTeamID=\"4C6364ACXT\"\n    ;;\nparetosecurity)\n    name=\"Pareto Security\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit ParetoSecurity pareto-mac)\n    appNewVersion=$(versionFromGit ParetoSecurity pareto-mac)\n    expectedTeamID=\"PM784W7B8X\"\n    ;;\nparsec)\n    name=\"Parsec\"\n    type=\"pkg\"\n    downloadURL=\"https://builds.parsecgaming.com/package/parsec-macos.pkg\"\n    expectedTeamID=\"Y9MY52XZDB\"\n    ;;\nparticulars)\n    name=\"Particulars\"\n    type=\"pkg\"\n    packageID=\"net.glencode.Particulars\"\n    downloadURL=\"https://particulars.app/_downloads/Particulars-latest.pkg\"\n    appNewVersion=$(curl -fsI \"${downloadURL}\" | grep -i location | grep -oE \"[0-9]+\\.[0-9]+\")\n    expectedTeamID=\"2Z25XDNP2X\"\n    blockingProcesses=( NONE )\n    ;;\npatchomator)\n    name=\"patchomator\"\n    type=\"pkg\"\n    packageID=\"com.option8.patchomator\"\n    downloadURL=\"$(downloadURLFromGit Mac-Nerd patchomator)\"\n    appNewVersion=\"$(versionFromGit Mac-Nerd patchomator)\"\n    expectedTeamID=\"4VAAB6AM7X\"\n    ;;\npcoipclient)\n    # Note that the sed match removes 'pcoip-client_' and '.dmg' \n    name=\"PCoIPClient\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.teradici.com/DeAdBCiUYInHcSTy/pcoip-client/raw/names/pcoip-client-dmg/versions/latest/pcoip-client_latest.dmg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^content-disposition | sed -e 's/.*pcoip-client_//' -e 's/.dmg\"//')\"\n    expectedTeamID=\"RU4LW7W32C\"\n    blockingProcesses=( \"Teradici PCoIP Client\" )\n    ;;\npdfexpert)\n    # PDF Expert\n    name=\"PDF Expert\"\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://downloads.pdfexpert.com/pem3/release/appcast.xml\" | grep -o 'https://downloads.pdfexpert.com/[^\"]*.zip' | tail -n 1)\n    appNewVersion=$(curl -fs \"https://downloads.pdfexpert.com/pem3/release/appcast.xml\" | grep -o 'sparkle:shortVersionString=\"[^\"]*\"' | sed -E 's/sparkle:shortVersionString=\"([^\"]*)\"/\\1/' | tail -n 1)\n    expectedTeamID=\"3L68KQB4HG\"\n    ;;\npdfsam)\n    name=\"PDFsam Basic\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit torakiki pdfsam)\n    appNewVersion=$(versionFromGit torakiki pdfsam)\n    expectedTeamID=\"8XM3GHX436\"\n    ;;\nperimeter81)\n    name=\"Perimeter 81\"\n    type=\"pkg\"\n    pkgURL=$(curl -sL https://support.perimeter81.com/docs/downloading-the-agent | grep -o \"Perimeter81.*.pkg\")\n    downloadURL=\"https://static.perimeter81.com/agents/mac/$pkgURL\"\n    appNewVersion=\"$(curl -fsIL \"${downloadURL}\" | grep -i ^x-amz-meta-version | sed -E 's/x-amz-meta-version: //' | cut -d\".\" -f1-3)\"\n    expectedTeamID=\"924635PD62\"\n    ;;\npgadmin4)\n    name=\"pgAdmin 4\"\n    type=\"dmg\"\n    downloadParent=\"https://www.postgresql.org/ftp/pgadmin/pgadmin4/\"\n    appNewVersion=$(curl -fs \"${downloadParent}\" | grep -oE 'v[0-9]+.[0-9]+' | sort -V | tail -n 1 | sed 's/v//g')\n    if [[ \"$(arch)\" == \"arm64\" ]]; then\n        downloadURL=\"https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v$appNewVersion/macos/pgadmin4-$appNewVersion-arm64.dmg\"\n    else\n        downloadURL=\"https://ftp.postgresql.org/pub/pgadmin/pgadmin4/v$appNewVersion/macos/pgadmin4-$appNewVersion-x86_64.dmg\"\n    fi\n    expectedTeamID=\"TCHGL2R7C5\"\n    ;;\npika)\n    name=\"Pika\"\n    type=\"dmg\"\n    packageID=\"com.superhighfives.Pika\"\n    downloadURL=$(downloadURLFromGit \"superhighfives\" \"pika\")\n    appNewVersion=$(versionFromGit \"superhighfives\" \"pika\")\n    expectedTeamID=\"TGHU37N6EX\"\n    blockingProcesses=( NONE )\n    ;;\npingplotter)\n    name=\"PingPlotter\"\n    type=\"zip\"\n    downloadURL=\"https://www.pingplotter.com/downloads/pingplotter_osx.zip\"\n    appNewVersion=\"\"\n    expectedTeamID=\"JXB6F3JSYT\"\n    ;;\npitch)\n    name=\"Pitch\"\n    type=\"dmg\"\n    downloadURL=\"https://desktop.pitch.com/mac/Pitch.dmg\"\n    expectedTeamID=\"KUCN8NUU6Z\"\n    ;;\nplantronicshub)\n    name=\"Plantronics Hub\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://www.poly.com/content/dam/www/software/PlantronicsHubInstaller.dmg\"\n    expectedTeamID=\"SKWK2Q7JJV\"\n    appNewVersion=$(curl -fs \"https://www.poly.com/in/en/support/knowledge-base/kb-article-page?lang=en_US&urlName=Hub-Release-Notes&type=Product_Information__kav\" | grep -o \"(*.*<span>)\" | head -1 | cut -d \"(\" -f2 | sed 's/\\<\\/span\\>//g' | cut -d \"<\" -f1)\n    ;;\nplatypus)\n    name=\"Platypus\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit sveinbjornt Platypus)\n    appNewVersion=$(versionFromGit sveinbjornt Platypus)\n    expectedTeamID=\"55GP2M789L\"\n    ;;\nplexmediaserver)\n\tname=\"Plex Media Server\"\n\ttype=\"zip\"\n\tdownloadURL=$(curl -fs https://plex.tv/api/downloads/5.json | sed -E 's/.*(https:\\/\\/downloads.plex.tv\\/plex-media-server-new\\/([0-9\\.]+)-[a-z0-9]+\\/macos\\/PlexMediaServer-[0-9\\.]+-[a-z0-9]+-universal\\.zip).*/\\1/')\n\tappNewVersion=$(echo $downloadURL | sed -E 's/.*(https:\\/\\/downloads.plex.tv\\/plex-media-server-new\\/([0-9\\.]+)-[a-z0-9]+\\/macos\\/PlexMediaServer-[0-9\\.]+-[a-z0-9]+-universal\\.zip).*/\\2/' | cut -d '.' -f 1-3 )\n\tversionKey=\"CFBundleShortVersionString\"\n\texpectedTeamID=\"K4QJ56KR4A\"\n;;\nplisteditpro)\n    name=\"PlistEdit Pro\"\n    type=\"zip\"\n    downloadURL=\"https://www.fatcatsoftware.com/plisteditpro/PlistEditPro.zip\"\n    expectedTeamID=\"8NQ43ND65V\"\n    ;;\npodmandesktop)\n    name=\"Podman Desktop\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit containers podman-desktop)\n    appNewVersion=$(versionFromGit containers podman-desktop)\n    archiveName=\" podman-desktop-$appNewVersion-universal.dmg\"\n    expectedTeamID=\"HYSCB8KRL2\"\n    ;;\npolylens)\n    name=\"Poly Lens\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fs \"https://info.lens.poly.com/lens-dt-rn/atom.xml\" | grep \"Version\" | head -1 | cut -d \"[\" -f3 | sed 's/Version //g' | sed 's/]]\\>\\<\\/title\\>//g')\n    downloadURL=\"https://swupdate.lens.poly.com/lens-desktop-mac/$appNewVersion/$appNewVersion/PolyLens-$appNewVersion.dmg\"\n    expectedTeamID=\"SKWK2Q7JJV\"\n    ;;\npopsql)\n     name=\"PopSQL\"\n     type=\"dmg\"\n     appNewVersion=$(curl -s 'https://popsql-releases.s3.amazonaws.com/mac/latest-mac.yml' | grep version: | cut -d' ' -f2)\n     curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" )\n    if [[ $(arch) == \"arm64\" ]]; then\n     \tdownloadURL=\"https://get.popsql.com/download/dmg_arm64\"\n    elif [[ $(arch) == \"i386\" ]]; then\n     \tdownloadURL=\"https://get.popsql.com/download/dmg\"\n    fi\n     expectedTeamID=\"4TFVQY839W\"\n     ;;\nportingkit)\n    name=\"Porting Kit\"\n    type=\"dmg\"\n    downloadURL=\"https://www.portingkit.com/pub/portingkit/download_latest.php?format=dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"45WEPZ3433\"\n    ;;\npostman)\n    name=\"Postman\"\n    type=\"zip\"\n    curlOptions=( -H \"accept-encoding: gzip, deflate, br\")\n    if [[ $(arch) == \"arm64\" ]]; then\n    \tdownloadURL=\"https://dl.pstmn.io/download/latest/osx_arm64\"\n\telif [[ $(arch) == \"i386\" ]]; then\n\t\tdownloadURL=\"https://dl.pstmn.io/download/latest/osx_64\"\n\tfi\n\tappNewVersion=$(getJSONValue \"$(curl -fsL 'https://www.postman.com/mkapi/release.json?t=')\" 'notes[0].version')\n    expectedTeamID=\"H7H8Q7M5CK\"\n    ;;\npowermonitor)\n    name=\"Power Monitor\"\n    type=\"pkg\"\n    downloadURL=$(downloadURLFromGit sap power-monitoring-tool-for-macos )\n    appNewVersion=$(versionFromGit sap power-monitoring-tool-for-macos )\n    expectedTeamID=\"7R5ZEU67FQ\"\n    ;;\nprism10)\n    name=\"Prism 10\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.graphpad.com/downloads/prism/10/InstallPrism10.dmg\"\n    appNewVersion=$(curl -fs \"https://www.graphpad.com/updates\" | grep -Eio 'The latest Prism version is.*' | cut -d \"(\" -f 1 | awk -F '<!-- --> <!-- -->' '{print $2}' | cut -d \"<\" -f 1)\n    expectedTeamID=\"YQ2D36NS9M\"\n    ;;\nprism9)\n    name=\"Prism 9\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.graphpad.com/downloads/prism/9/InstallPrism9.dmg\"\n    appNewVersion=\"9.5.1\"\n    expectedTeamID=\"YQ2D36NS9M\"\n    ;;\npritunl)\n    name=\"Pritunl\"\n    type=\"pkgInZip\"\n    packageID=\"com.pritunl.pkg.Pritunl\"\n    archiveName=\"Pritunl.pkg.zip\"\n    downloadURL=$(downloadURLFromGit pritunl pritunl-client-electron)\n    appNewVersion=$(versionFromGit pritunl pritunl-client-electron)\n    expectedTeamID=\"U22BLATN63\"\n    ;;\nprivileges)\n    # Locking label to v1.5.4 because of changes in v2, see privileges2 label if needed\n    name=\"Privileges\"\n    type=\"zip\"\n    downloadURL=https://github.com/SAP/macOS-enterprise-privileges/releases/download/1.5.4/Privileges.zip\n    appNewVersion=1.5.4\n    expectedTeamID=\"7R5ZEU67FQ\"\n    ;;\nprivileges2)\n    # credit: Matt Adams (@d3xbot)\n    name=\"Privileges\"\n    type=\"pkg\"\n    packageID=\"corp.sap.privileges.pkg\"\n    downloadURL=\"$(downloadURLFromGit SAP macOS-enterprise-privileges)\"\n    appNewVersion=\"$(versionFromGit SAP macOS-enterprise-privileges)\"\n    expectedTeamID=\"7R5ZEU67FQ\"\n    ;;\nprocessing3)\n    name=\"Processing\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit processing processing)\n    appNewVersion=$(versionFromGit processing processing)\n    expectedTeamID=\"8SBRM6J77J\"\n    # Github returned version number resulves in build and version numbers being combined, so this provides the best match.\n    # if you are manually replicating the label with valuesfromarguements use 'appNewVersion=\"3.$(versionFromGit processing processing | cut -d \".\" -f 2-)\"' instead.\n    appCustomVersion(){ echo \"$(defaults read /Applications/Processing.app/Contents/Info.plist CFBundleVersion )$( defaults read /Applications/Processing.app/Contents/Info.plist CFBundleShortVersionString )\" }\n    ;;\nprocessing4)\n    name=\"Processing\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit processing processing4)\n    appNewVersion=$(versionFromGit processing processing4)\n    expectedTeamID=\"8SBRM6J77J\"\n    # Github returned version number resulves in build and version numbers being combined, so this provides the best match.\n    # if you are manually replicating the label with valuesfromarguements use 'appNewVersion=\"4.$(versionFromGit processing processing | cut -d \".\" -f 2-)\"' instead.\n    appCustomVersion(){ echo \"$(defaults read /Applications/Processing.app/Contents/Info.plist CFBundleVersion )$( defaults read /Applications/Processing.app/Contents/Info.plist CFBundleShortVersionString )\" }\n    ;;\nproctortrack)\n    #credit: Jeff F. (@jefff on MacAdmins Slack)\n    name=\"Proctortrack\"\n    type=\"zip\"\n    downloadURL=\"https://storage.googleapis.com/verificientstatic/ProctortrackApp/Production/Proctortrack.zip\"\n    expectedTeamID=\"SNHZD6TJE6\"\n    ;;\nprojectplace)\n    name=\"Projectplace\"\n    type=\"dmg\"\n    downloadURL=\"https://service.projectplace.com/client_apps/desktop/Projectplace-for-mac.dmg\"\n    expectedTeamID=\"8333HW99E8\"\n    ;;\npromiseutility|\\\npromiseutilityr)\n    name=\"Promise Utility\"\n    type=\"pkgInDmg\"\n    packageID=\"com.promise.utilinstaller\"\n    downloadURL=\"https://www.promise.com/DownloadFile.aspx?DownloadFileUID=6533\"\n    expectedTeamID=\"268CCUR4WN\"\n    ;;\nproofpointautoupdater)\n    name=\"Proofpoint Auto Updater\"\n    type=\"pkgInZip\"\n    downloadURL=$(curl -fs https://app.us-east-1-op1.op.analyze.proofpoint.com/downloads/default/ | grep -o -i \"href.*\\\".*\\\"*observeit-autoupdater-OSX-.*.tar.gz\" | sed -n '1p' | cut -c 9-)\n    expectedTeamID=\"DJR63QYCGL\"\n    ;;\npropresenter7)\n    name=\"ProPresenter 7\"\n    appName=\"ProPresenter.app\"\n    type=\"zip\"\n    blockingProcesses=\"ProPresenter\"\n    downloadURL=$(curl -s \"https://api.renewedvision.com/v1/pro/upgrade?platform=macos&osVersion=12&appVersion=771&buildNumber=117899527&includeNotes=false\" | grep -Eo '\"downloadUrl\":.*?[^\\]\",' | head -n 1 | cut -d \\\" -f 4 | sed -e 's/\\\\//g')\n    appNewVersion=$(curl -s \"https://api.renewedvision.com/v1/pro/upgrade?platform=macos&osVersion=12&appVersion=771&buildNumber=117899527&includeNotes=false\" | grep -Eo '\"version\":.*?[^\\]\",' | head -n 1 | cut -d \\\" -f 4)\n    expectedTeamID=\"97GAAZ6CPX\"\n    ;;\nprotonvpn)\n    name=\"ProtonVPN\"\n    type=\"dmg\"\n    downloadURL=$(curl -s \"https://protonvpn.com/download/macos-update3.xml\" | xmllint --xpath 'string(//enclosure/@url)' -)\n    appNewVersion=$(echo $downloadURL | sed -e 's/^.*\\/Proton.*_v\\([0-9.]*\\)\\.dmg/\\1/g')\n    expectedTeamID=\"J6S6Q257EK\"\n    ;;\nproxyman)\n    name=\"Proxyman\"\n    type=\"dmg\"\n    #downloadURL=\"https://proxyman.io/release/osx/Proxyman_latest.dmg\"\n    downloadURL=\"$(downloadURLFromGit ProxymanApp Proxyman)\"\n    appNewVersion=\"$(versionFromGit ProxymanApp Proxyman)\"\n    expectedTeamID=\"3X57WP8E8V\"\n    ;;\nprune)\n    name=\"Prune\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit BIG-RAT Prune)\n    appNewVersion=$(versionFromGit BIG-RAT Prune)\n    expectedTeamID=\"PS2F6S478M\"\n;;\nprusaslicer)\n    name=\"PrusaSlicer\"\n    type=\"dmg\"\n    archiveName=\"PrusaSlicer-[0-9.]*+MacOS-universal-[0-9.]*.dmg\"\n    downloadURL=\"$(downloadURLFromGit prusa3d PrusaSlicer)\"\n    appNewVersion=\"$(versionFromGit prusa3d PrusaSlicer)\"\n    expectedTeamID=\"DKPB65N43Z\"\n    ;;\npulsar)\n    name=\"Pulsar\"\n    type=\"zip\"\n    appNewVersion=$(versionFromGit pulsar-edit pulsar)\n    if [[ $(arch) = \"arm64\" ]]; then\n        printlog \"Architecture: arm64\"\n        archiveName=\"Silicon.Mac.Pulsar-${appNewVersion}-arm64-mac.zip\"\n    else\n        printlog \"Architecture: i386 (not arm64)\"\n        archiveName=\"Intel.Mac.Pulsar-${appNewVersion}-mac.zip\"\n    fi\n    downloadURL=$(downloadURLFromGit pulsar-edit pulsar)\n    expectedTeamID=\"D3KV2P2CZ8\"\n    ;;\n\npymol)\n    name=\"PyMOL\"\n    type=\"dmg\"\n    downloadURL=$(curl -s -L \"https://pymol.org/\" | grep -m 1 -Eio 'href=\"https://pymol.org/installers/PyMOL-(.*)-MacOS(.*).dmg\"' | cut -c7- | sed -e 's/\"$//')\n    expectedTeamID=\"26SDDJ756N\"\n    ;;\npython)\n    name=\"Python\"\n    type=\"pkg\"\n    appNewVersion=\"$( curl --compressed -s \"https://www.python.org/downloads/macos/\" | awk '/Latest Python 3 Release - Python/{gsub(/<\\/?[^>]+(>|$)/, \"\"); print $NF}' )\"\n    archiveName=\"$( curl -s \"https://www.python.org/ftp/python/$appNewVersion/\" | grep -om 1 \"\\\"python.*macos.*\\.pkg\\\"\" | tr -d \\\" )\"\n    downloadURL=\"https://www.python.org/ftp/python/$appNewVersion/$archiveName\"\n    shortVersion=$( cut -d '.' -f1,2 <<< $appNewVersion )\n    packageID=\"org.python.Python.PythonFramework-$shortVersion\"\n    expectedTeamID=\"BMM5U3QVKW\"\n    blockingProcesses=( \"IDLE\" \"Python Launcher\" )\n    versionKey=\"CFBundleVersion\"\n    appCustomVersion() {\n        if [ -d \"/Library/Frameworks/Python.framework/Versions/$shortVersion/Resources/Python.app/\" ]; then\n            /usr/bin/defaults read \"/Library/Frameworks/Python.framework/Versions/$shortVersion/Resources/Python.app/Contents/Info\" CFBundleVersion\n        fi\n    }\n    ;;\nqgis-pr)\n    name=\"QGIS\"\n    type=\"dmg\"\n    downloadURL=\"https://download.qgis.org/downloads/macos/qgis-macos-pr.dmg\"\n    appNewVersion=\"$(curl -fs \"https://www.qgis.org/da/_static/documentation_options.js\" | grep -i version | cut -d \"'\" -f2)\"\n    expectedTeamID=\"4F7N4UDA22\"\n    ;;\nqlab)\n    name=\"QLab\"\n    type=\"dmg\"\n    downloadURL=\"https://qlab.app/downloads/QLab.dmg\"\n    appNewVersion=$(curl -fs \"https://qlab.app/appcast/v5/\" | xpath 'string(//rss/channel[1]/item/enclosure/@sparkle:shortVersionString)')\n    expectedTeamID=\"7672N4CCJM\"\n    ;;\nr)\n    name=\"R\"\n    type=\"pkg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://cloud.r-project.org/bin/macosx/$( curl -fsL https://cloud.r-project.org/bin/macosx/ | grep -m 1 -o '<a href=\".*arm64\\.pkg\">' | sed -E 's/.+\"(.+)\".+/\\1/g' )\"\n        appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)-.*\\..*/\\1/g')\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://cloud.r-project.org/bin/macosx/$( curl -fsL https://cloud.r-project.org/bin/macosx/ | grep -o '<a href=\".*pkg\">' | grep -m 1 -v \"arm64\" | sed -E 's/.+\"(.+)\".+/\\1/g' )\"\n        appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    fi\n    expectedTeamID=\"VZLD955F6P\"\n    ;;\nraindropio)\n    name=\"Raindrop.io\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n        archiveName=\"Raindrop-x64.dmg\"\n    elif [[ $(arch) == arm64 ]]; then\n        archiveName=\"Raindrop-arm64.dmg\"\n    fi\n\n    downloadURL=$(downloadURLFromGit raindropio desktop )\n    appNewVersion=$(versionFromGit raindropio desktop )\n    expectedTeamID=\"7459JWM5TY\"\n    ;;\nrancherdesktop)\n    name=\"Rancher Desktop\"\n    type=\"zip\"\n    if [[ $(arch) == \"arm64\" ]]; then\n      archiveName=\"Rancher.Desktop-[0-9.]*-mac.aarch64.zip\"\n      downloadURL=\"$(downloadURLFromGit rancher-sandbox rancher-desktop)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n      archiveName=\"Rancher.Desktop-[0-9.]*-mac.x86_64.zip\"\n      downloadURL=\"$(downloadURLFromGit rancher-sandbox rancher-desktop)\"\n    fi\n    appNewVersion=\"$(versionFromGit rancher-sandbox rancher-desktop)\"\n    expectedTeamID=\"2Q6FHJR3H3\"\n    appName=\"Rancher Desktop.app\"\n    ;;\nrapidapi)\n    name=\"RapidAPI\"\n    type=\"zip\"\n    downloadURL=\"https://paw.cloud/download\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^location | cut -d '/' -f5 | awk -F '-' '{ print $2 }')\"\n    expectedTeamID=\"84599RL58A\"\n    blockingProcesses=( \"RapidAPI\" )\n    ;;\nraycast)\n    name=\"Raycast\"\n    type=\"dmg\"\n    downloadURL=\"https://www.raycast.com/download\"\n    appNewVersion=\"$( curl -fsIL \"https://www.raycast.com/download\" | grep -i ^location | grep Raycast_ | sed 's/^.*[^0-9]\\([0-9]*\\.[0-9]*\\.[0-9]*\\).*$/\\1/' )\"\n    expectedTeamID=\"SY64MV22J9\"\n    ;;\nrealvncviewer)\n    name=\"Real VNC Viewer\"\n    appName=\"VNC Viewer.app\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -sL https://www.realvnc.com/en/connect/download/viewer/ | grep -i 'download-link-path-macos' | sed -r 's/.*href=\"([^\"]+).*/\\1/g')\"\n    appNewVersion=\"$(echo $downloadURL | sed -n 's:.*VNC-Viewer-\\(.*\\)-MacOSX.*:\\1:p')\"\n    expectedTeamID=\"ZNCQ8JEH7X\"\n    ;;\n\nvncconnect|\\\nrealvncserver)\n    name=\"Real VNC Server\"\n    appName=\"VNC Server.app\"\n    type=\"pkg\"\n    packageID=\"com.realvnc.vncserver.pkg\"\n    downloadURL=\"$(curl -sL https://www.realvnc.com/en/connect/download/vnc/ | grep -i 'download-link-path-macos' | sed -r 's/.*href=\"([^\"]+).*/\\1/g')\"\n    appNewVersion=\"$(echo ${downloadURL} | sed -n 's:.*VNC-Server-\\(.*\\)-MacOSX.*:\\1:p')\"\n    expectedTeamID=\"ZNCQ8JEH7X\"\n    ;;\n\nrealvncondemandassist)\n    name=\"On-Demand-Assist-$(curl -sL \"https://www.realvnc.help/\" | awk -F'\"' '/Mac/ && /\\.zip/{print $2}' | sed -n 's:.*generic/\\(.*\\)/.*:\\1:p')-MacOSX-universal\"\n    type=\"zip\"\n    downloadURL=$(curl -sL \"https://www.realvnc.help/\" | awk -F'\"' '/Mac/ && /\\.zip/{print $2}')\n    appNewVersion=\"$(echo $downloadURL | sed -n 's:.*generic/\\(.*\\)/.*:\\1:p')\"\n    expectedTeamID=\"ZNCQ8JEH7X\"\n    blockingProcesses=( \"On-Demand Assist\" \"$name\" )\n    appCustomVersion() { echo \"$(defaults read \"/Applications/On-Demand-Assist-$(curl -sL \"https://www.realvnc.help/\" | awk -F'\"' '/Mac/ && /\\.zip/{print $2}' | sed -n 's:.*generic/\\(.*\\)/.*:\\1:p')-MacOSX-universal.app/Contents/Info.plist\" CFBundleShortVersionString)\" | sed 's/ ([^)]*)//' ; }\n    ;;\n\nrectangle)\n    name=\"Rectangle\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit rxhanson Rectangle)\n    appNewVersion=$(versionFromGit rxhanson Rectangle)\n    expectedTeamID=\"XSYZ3E4B7D\"\n    ;;\nredcanarymacmonitor)\n    name=\"Red Canary Mac Monitor\"\n    # Red Canary Mac Monitor is an advanced, stand-alone system monitoring tool tailor-made for macOS security research, malware triage, and system troubleshooting\n    type=\"pkg\"\n    packageID=\"com.redcanary.agent\"\n    downloadURL=\"$(downloadURLFromGit redcanaryco mac-monitor)\"\n    appNewVersion=\"$(versionFromGit redcanaryco mac-monitor)\"\n    expectedTeamID=\"UA6JCQGF3F\"\n    ;;\nredshift)\n    name=\"redshift\"\n    blockingProcesses=( \"Cinema 4D\" )\n    type=\"pkg\"\n    packageID=\"com.redshift3d.redshift\"\n    expectedTeamID=\"4ZY22YGXQG\"\n    appNewVersion=\"$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.maxon.net/hc/en-us/sections/4405730592274-Redshift\" | grep \"\\-Redshift-\" | grep -Eo \"[0-9]+\\.[0-9]+\\.[0-9]+\" | sort -Vru | head -1)\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://www.maxon.net/en/downloads\" | grep -Eo -m 1 \"https://installer.maxon.net/installer/rs/redshift_v${appNewVersion}_[a-f0-9]+_macos_metal.pkg\")\n    ;;\nreflector4)\n    name=\"Reflector 4\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs https://www.airsquirrels.com/reflector/try | grep -i dmg | grep -o -i -E \"https.*\" | cut -d '\"' -f1)\n    appNewVersion=$(echo ${downloadURL} | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"67X2M9MT5G\"\n    ;;\nrelatel)\n    name=\"Relatel\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.rela.tel/www/public/junotron/Relatel.dmg\"\n    appNewVersion=\"$(curl -fs \"https://cdn.firmafon.dk/www/public/junotron/latest-mac.yml\" | grep -i \"version\" | cut -w -f2)\"\n    expectedTeamID=\"B9358QF55B\"\n    ;;\nremotedesktopmanagerenterprise)\n    name=\"Remote Desktop Manager\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL https://devolutions.net/remote-desktop-manager/home/thankyou/rdmmacbin/ | grep -oe \"http.*\\.dmg\" | head -1)\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*\\.Mac\\.([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"N592S9ASDB\"\n    blockingProcesses=( \"$name\" )\n    ;;\nremotedesktopmanagerfree)\n    name=\"Remote Desktop Manager\"\n    type=\"dmg\"\n    downloadURL=$(curl -fsL https://devolutions.net/remote-desktop-manager/home/thankyou/rdmmacbin/ | grep -oe \"http.*\\.dmg\" | head -1)\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*\\.Mac\\.([0-9.]*)\\.dmg/\\1/g')\n    expectedTeamID=\"N592S9ASDB\"\n    ;;\nrenew-noagent)\n    #Renew by @BigMacAdmin and Second Son Consulting\n    name=\"Renew-NoAgent\"\n    type=\"pkg\"\n    archiveName=\"Renew_NoAgent_v[0-9.]*.pkg\"\n    downloadURL=$(downloadURLFromGit secondsonconsulting Renew )\n    appNewVersion=$(versionFromGit secondsonconsulting Renew )\n    appCustomVersion() { grep -i \"scriptVersion=\" /usr/local/Renew.sh | cut -d '\"' -f2 }\n    expectedTeamID=\"7Q6XP5698G\"\n    ;;\nrenew)\n    #Renew by @BigMacAdmin and Second Son Consulting\n    name=\"Renew\"\n    type=\"pkg\"\n    archiveName=\"Renew_v[0-9.]*.pkg\"\n    downloadURL=$(downloadURLFromGit secondsonconsulting Renew )\n    appNewVersion=$(versionFromGit secondsonconsulting Renew )\n    appCustomVersion() { grep -i \"scriptVersion=\" /usr/local/Renew.sh | cut -d '\"' -f2 }\n    expectedTeamID=\"7Q6XP5698G\"\n    ;;\nresiliosynchome)\n    name=\"Resilio Sync\"\n    type=\"dmg\"\n    downloadURL=\"https://download-cdn.resilio.com/stable/osx/Resilio-Sync.dmg\"\n    expectedTeamID=\"2953Z5SZSK\"\n    ;;\nretrobatch)\n    name=\"Retrobatch\"\n    type=\"zip\"\n    downloadURL=\"https://flyingmeat.com/download/Retrobatch.zip\"\n    appNewVersion=$(curl -fs \"https://flyingmeat.com/retrobatch/\" | grep -i download | grep -i zip | grep -iv Documentation | sed -E 's/.*Download.*href.*https.*zip.*Retrobatch ([0-9.]*)<.*/\\1/g')\n    expectedTeamID=\"WZCN9HJ4VP\"\n    ;;\nrhino7)\n    name=\"Rhino 7\"\n    type=\"dmg\"\n    sparkleFeed=$(curl -fs \"https://files.mcneel.com/rhino/7/mac/updates/commercialUpdates.xml\")\n    appNewVersion=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString[1]' 2>/dev/null | cut -d '\"' -f 2 | cut -d ' ' -f 1)\n    downloadURL=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"D6XDM4N99E\"\n    ;;\nrhino8)\n    name=\"Rhino 8\"\n    type=\"dmg\"\n    sparkleFeed=$(curl -fs \"https://files.mcneel.com/rhino/8/mac/updates/commercialUpdates.xml\")\n    appNewVersion=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f 2 | cut -d ' ' -f 1)\n    downloadURL=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"D6XDM4N99E\"\n    ;;\nricohpsprinters)\n    name=\"Ricoh Printers\"\n    type=\"pkgInDmg\"\n    packageID=\"com.RICOH.print.PS_Printers_Vol4_EXP.ppds.pkg\"\n    downloadURL=$(curl -fs https://support.ricoh.com//bb/html/dr_ut_e/rc3/model/mpc3004ex/mpc3004exen.htm | xmllint --html --format - 2>/dev/null | grep -m 1 -o \"https://.*.dmg\" | cut -d '\"' -f 1)\n    expectedTeamID=\"5KACUT3YX8\"\n    ;;\nringcentralapp)\n    # credit: Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"RingCentral\"\n    type=\"pkg\"\n    if [[ $(arch) != \"i386\" ]]; then\n        downloadURL=\"https://app.ringcentral.com/download/RingCentral-arm64.pkg\"\n    else\n        downloadURL=\"https://app.ringcentral.com/download/RingCentral.pkg\"\n    fi\n    expectedTeamID=\"M932RC5J66\"\n    blockingProcesses=( \"RingCentral\" )\n    ;;\nringcentralclassicapp)\n    name=\"Glip\"\n    type=\"dmg\"\n    downloadURL=\"https://downloads.ringcentral.com/glip/rc/GlipForMac\"\n    expectedTeamID=\"M932RC5J66\"\n    blockingProcesses=( \"Glip\" )\n    #blockingProcessesMaxCPU=\"5\"\n    ;;\nringcentralmeetings)\n    # credit: Isaac Ordonez, Mann consulting (@mannconsulting)\n    name=\"Ring Central Meetings\"\n    type=\"pkg\"\n    downloadURL=\"http://dn.ringcentral.com/data/web/download/RCMeetings/1210/RCMeetingsClientSetup.pkg\"\n    expectedTeamID=\"M932RC5J66\"\n    blockingProcesses=( \"RingCentral Meetings\" )\n    ;;\nringcentralphone)\n    # credit: Eric Gjerde, When I Work (@ericgjerde)\n    name=\"RingCentral for Mac\"\n    type=\"dmg\"\n    downloadURL=\"https://downloads.ringcentral.com/sp/RingCentralForMac\"\n    expectedTeamID=\"M932RC5J66\"\n    blockingProcesses=( \"RingCentral Phone\" )\n    ;;\nrocket)\n    name=\"Rocket\"\n    type=\"dmg\"\n    downloadURL=\"https://macrelease.matthewpalmer.net/Rocket.dmg\"\n    expectedTeamID=\"Z4JV2M65MH\"\n    ;;\nrocketchat)\n    name=\"Rocket.Chat\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit RocketChat Rocket.Chat.Electron)\n    appNewVersion=$(versionFromGit RocketChat Rocket.Chat.Electron)\n    expectedTeamID=\"S6UPZG7ZR3\"\n    blockingProcesses=( Rocket.Chat )\n    ;;\nrodecentral)\n    name=\"RODE Central\"\n    type=\"pkgInZip\"\n    #packageID=\"com.rodecentral.installer\"\n    downloadURL=\"https://update.rode.com/central/RODE_Central_MACOS.zip\"\n    appNewVersion=$(curl -fs https://rode.com/en/release-notes/rode-central | xmllint --html --format - 2>/dev/null | tr '\"' '\\n' | sed 's/\\&quot\\;/\\n/g' | grep -i -o \"Version .*\" | head -1 | cut -w -f2)\n    expectedTeamID=\"Z9T72PWTJA\"\n    ;;\nrodeconnect)\n    name=\"RODE Connect\"\n    type=\"pkgInZip\"\n    #packageID=\"com.rodeconnect.installer\" #Versioned wrong as 0 in 1.1.0 pkg\n    downloadURL=\"https://update.rode.com/connect/RODE_Connect_MACOS.zip\"\n    appNewVersion=$(curl -fs https://rode.com/en/release-notes/rode-connect | xmllint --html --format - 2>/dev/null | tr '\"' '\\n' | sed 's/\\&quot\\;/\\n/g' | grep -i -o \"Version .*\" | head -1 | cut -w -f2)\n    expectedTeamID=\"Z9T72PWTJA\"\n    ;;\nrodeunify)\n    name=\"RODE UNIFY\"\n    type=\"pkgInZip\"\n    #packageID=\"com.rodecentral.installer\"\n    downloadURL=\"https://update.rode.com/unify_new/macos/RODE_UNIFY_MACOS.zip\"\n    appNewVersion=$(curl -fs https://rode.com/en/release-notes/unify | xmllint --html --format - 2>/dev/null | tr '\"' '\\n' | sed 's/\\&quot\\;/\\n/g' | grep -i -o \"Version .*\" | head -1 | cut -w -f2)\n    expectedTeamID=\"Z9T72PWTJA\"\n    ;;\nrogueamoebaaudiohijack4)\n    name=\"Audio Hijack\"\n    type=\"zip\"\n    raSysVer=\"$(sw_vers -productVersion | sed 's/\\.//g')\"\n    raVerDetails=\"$(curl -fs \"https://rogueamoeba.net/ping/versionCheck.cgi?format=sparkle&bundleid=com.rogueamoeba.audiohijack&system=${raSysVer}&version=40000000\")\"\n    downloadURL=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@url)' 2>/dev/null)\"\n    appNewVersion=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null)\"\n    expectedTeamID=\"7266XEXAPM\"\n    ;;\nrogueamoebafission2)\n    name=\"Fission\"\n    type=\"zip\"\n    raSysVer=\"$(sw_vers -productVersion | sed 's/\\.//g')\"\n    raVerDetails=\"$(curl -fs \"https://rogueamoeba.net/ping/versionCheck.cgi?format=sparkle&bundleid=com.rogueamoeba.Fission&system=${raSysVer}&version=20000000\")\"\n    downloadURL=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@url)' 2>/dev/null)\"\n    appNewVersion=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null)\"\n    expectedTeamID=\"7266XEXAPM\"\n    ;;\nrogueamoebaloopback2)\n    name=\"Loopback\"\n    type=\"zip\"\n    raSysVer=\"$(sw_vers -productVersion | sed 's/\\.//g')\"\n    raVerDetails=\"$(curl -fs \"https://rogueamoeba.net/ping/versionCheck.cgi?format=sparkle&bundleid=com.rogueamoeba.Loopback&system=${raSysVer}&version=20000000\")\"\n    downloadURL=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@url)' 2>/dev/null)\"\n    appNewVersion=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null)\"\n    expectedTeamID=\"7266XEXAPM\"\n    ;;\nrogueamoebasoundsource5)\n    name=\"SoundSource\"\n    type=\"zip\"\n    raSysVer=\"$(sw_vers -productVersion | sed 's/\\.//g')\"\n    raVerDetails=\"$(curl -fs \"https://rogueamoeba.net/ping/versionCheck.cgi?format=sparkle&bundleid=com.rogueamoeba.soundsource&system=${raSysVer}&version=5000000\")\"\n    downloadURL=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@url)' 2>/dev/null)\"\n    appNewVersion=\"$(echo \"${raVerDetails}\" | xpath 'string(//rss/channel/item/enclosure/@sparkle:version)' 2>/dev/null)\"\n    expectedTeamID=\"7266XEXAPM\"\n    ;;\nroyaltsx)\n    name=\"Royal TSX\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs https://royaltsx-v6.royalapps.com/updates_stable | xpath '//rss/channel/item[1]/enclosure/@url'  2>/dev/null | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs https://royaltsx-v6.royalapps.com/updates_stable | xpath '//rss/channel/item[1]/enclosure/@sparkle:shortVersionString'  2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"VXP8K9EDP6\"\n    ;;\nrstudio)\n    name=\"RStudio\"\n    type=\"dmg\"\n    downloadURL=$(curl -s -L \"https://posit.co/download/rstudio-desktop/\" | grep -m 1 -Eio 'href=\"https://download1.rstudio.org/electron/macos/RStudio-(.*).dmg\"' | cut -c7- | sed -e 's/\"$//')\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.-]*)\\..*/\\1/g' | sed 's/-/+/' )\n    expectedTeamID=\"FYF2F5GFX4\"\n    ;;\nrustdesk)\n    name=\"RustDesk\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit rustdesk rustdesk)\n    appNewVersion=$(versionFromGit rustdesk rustdesk)\n    archiveName=\"rustesk-$appNewVersion.dmg\"\n    expectedTeamID=\"HZF9JMC8YN\"\n    ;;\nsalesforcecli)\n    name=\"Salesforce CLI\"\n    type=\"pkg\"\n    packageID=\"com.salesforce.cli\"\n    if [[ $(arch) == \"arm64\" ]]; then\n    downloadURL=\"https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-arm64.pkg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n    downloadURL=\"https://developer.salesforce.com/media/salesforce-cli/sf/channels/stable/sf-x64.pkg\"\n    fi\n    appNewVersion=$( curl -fsL https://raw.githubusercontent.com/forcedotcom/cli/main/releasenotes/README.md | grep -iF  \"[stable]\"  | grep -i \"[##]\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g'  )\n    expectedTeamID=\"62J96EUJ9N\"\n    blockingProcesses=( NONE )\n    ;;\nsanta)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"Santa\"\n    type=\"pkgInDmg\"\n    packageID=\"com.google.santa\"\n    downloadURL=$(downloadURLFromGit google santa)\n    appNewVersion=$(versionFromGit google santa)\n    expectedTeamID=\"EQHXZ8M8AV\"\n    ;;\nkeyaccess)\n    name=\"KeyAccess\"\n    type=\"pkg\"\n    downloadStore=\"$(curl -s \"http://www.sassafras.com/client-download/\" | tr '>' '\\n')\"\n    downloadURL=\"$(echo \"$downloadStore\" | grep \"https.*ksp-client.*pkg\" | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(echo \"$downloadStore\" | grep \"KeyAccess.*for Mac\" | cut -d ' ' -f 2)\"\n    expectedTeamID=\"7Z2KSDFMVY\"\n    BLOCKING_PROCESS_ACTION=ignore\n    blockingProcesses=( NONE )\n    # Application is not installed in /Applications\n    appName=\"Library/KeyAccess/KeyAccess.app\"\n    # Allowing for setting host as it is the only setting required for a fresh install.\n    if [[ -n $keyaccessHost ]]; then\n        defaults write /Library/Preferences/com.sassafras.KeyAccess host -string \"${keyaccessHost}\"\n    fi\n    ;;\nscaleft)\n    name=\"ScaleFT\"\n    type=\"pkg\"\n    downloadURL=\"https://dist.scaleft.com/repos/macos/stable/all/macos-client/$(curl -s \"https://dist.scaleft.com/repos/macos/stable/all/macos-client/\" | grep -o 'v[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | sort -V | tail -n 1)/ScaleFT-$(curl -s \"https://dist.scaleft.com/repos/macos/stable/all/macos-client/\" | grep -o 'v[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | sort -V | tail -n 1 | sed 's/^v//').pkg\"\n    appNewVersion=$(curl -s \"https://dist.scaleft.com/repos/macos/stable/all/macos-client/\" | grep -o 'v[0-9]\\+\\.[0-9]\\+\\.[0-9]\\+' | sort -V | tail -n 1 | sed 's/^v//')\n    expectedTeamID=\"B7F62B65BN\"\n    blockingProcesses=( ScaleFT )\n    ;;\nscapple)\n    name=\"Scapple\"\n    type=\"dmg\"\n    downloadURL=\"https://scrivener.s3.amazonaws.com/Scapple.dmg\"\n    appNewVersion=\"$(curl -fs \"https://scrivener.s3.amazonaws.com/mac_updates/scapple.xml\" | xpath 'string(//rss/channel/item[last()]/enclosure/@sparkle:shortVersionString)' 2>/dev/null)\"\n    expectedTeamID=\"W4QTL7X778\"\n    ;;\nscenebuilder)\n    name=\"SceneBuilder\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=$(curl -sfL \"https://gluonhq.com/products/scene-builder/\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*SceneBuilder.*aarch64.dmg\")\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=$(curl -sfL \"https://gluonhq.com/products/scene-builder/\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*SceneBuilder.*amd64.dmg\")\n    fi\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)-.*/\\1/g' )\n    expectedTeamID=\"S7ZR395D8U\"\n    ;;\nscmenu)\n    name=\"SC Menu\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit boberito sc_menu)\"\n    appNewVersion=\"$(versionFromGit boberito sc_menu)\"\n    expectedTeamID=\"2WUMX954UB\"\n    ;;\nscreamingfrogseospider)\n    name=\"Screaming Frog SEO Spider\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n        platform=\"Mac - (intel)\"\n    elif [[ $(arch) == arm64 ]]; then\n        platform=\"Mac - (apple silicon)\"\n    fi\n    downloadURL=$(curl -fs \"https://www.screamingfrog.co.uk/wp-content/themes/screamingfrog/inc/download-modal.php\" | grep \"${platform}\" | grep -i -o \"https.*\\.dmg\" | head -1)\n    appNewVersion=$(print \"$downloadURL\" | sed -E 's/https.*\\/[a-zA-Z]*-([0-9.]*)\\.dmg/\\1/g')\".0\"\n    expectedTeamID=\"CAHEVC3HZC\"\n    ;;\nscreencloudplayer)\n    name=\"ScreenCloud Player\"\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://screencloud.com/download\" | sed -n 's/^.*\"url\":\"\\(https.*\\.dmg\\)\".*$/\\1/p')\n    appNewVersion=$( echo $downloadURL | sed -e 's/.*\\/ScreenCloud.*\\-\\([0-9.]*\\)\\.dmg/\\1/g' )\n    expectedTeamID=\"3C4F953K6P\"\n    ;;\nscreenflick)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Screenflick\"\n    type=\"zip\"\n    downloadURL=\"https://www.araelium.com/screenflick/downloads/Screenflick.zip\"\n    expectedTeamID=\"28488A87JB\"\n    ;;\nscribus)\n    name=\"Scribus\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fsL \"https://sourceforge.net/projects/scribus/rss?path=/scribus\" | xpath '//rss/channel/item[1]/title' 2>/dev/null | awk -F'/' '{ print $3 }')\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=$(curl -fsL \"https://sourceforge.net/projects/scribus/rss?path=/scribus/${appNewVersion}\" | grep -oE '<link>(.*-arm64.dmg/download)</link>' | head -1 |  sed 's/<link>//;s/<\\/link>//')\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=$(curl -fsL \"https://sourceforge.net/projects/scribus/rss?path=/scribus/${appNewVersion}\" | grep -oE '<link>(.*\\.dmg/download)</link>' | grep -v '\\-arm64' | head -1 | sed 's/<link>//;s/<\\/link>//')\n    fi\n    expectedTeamID=\"627FV4LMG7\"\n    ;;\nscrollreverser)\n    name=\"Scroll Reverser\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit pilotmoon Scroll-Reverser)\n    appNewVersion=$(versionFromGit pilotmoon Scroll-Reverser)\n    expectedTeamID=\"6W6K75YWQ9\"\n    ;;\nsdnotary)\n    name=\"SD Notary\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://latenightsw.com/sd-notary-notarizing-made-easy/ | grep -io \"https://.*/.*\\.zip\")\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*\\/[a-zA-Z]*([0-9.]*)-.*\\.zip/\\1/g')\n    expectedTeamID=\"Z7S6X96M3X\"\n    ;;\nsecretive)\n    name=\"Secretive\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit maxgoedjen secretive)\n    appNewVersion=$(versionFromGit maxgoedjen secretive)\n    expectedTeamID=\"Z72PRUAWF6\"\n    ;;\n    \nselfcontrol)\n    name=\"SelfControl\"\n    type=\"zip\"\n    downloadURL=$(curl -fs https://update.selfcontrolapp.com/feeds/selfcontrol | xpath '//rss/channel/item[last()]/enclosure/@url' 2>/dev/null | tr \" \" \"\\n\" | sort | tail -1 | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs https://update.selfcontrolapp.com/feeds/selfcontrol | xpath '//rss/channel/item[last()]/enclosure/@sparkle:shortVersionString' 2>/dev/null | tr \" \" \"\\n\" | sort | tail -1 | cut -d '\"' -f 2)\n    expectedTeamID=\"EG6ZYP3AQH\"\n    ;;\nsequelace)\n    name=\"Sequel Ace\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit sequel-ace sequel-ace)\"\n    appNewVersion=\"$(versionFromGit sequel-ace sequel-ace)\"\n    expectedTeamID=\"NKQ4HJ66PX\"\n    ;;\nsequelpro)\n    name=\"Sequel Pro\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit sequelpro sequelpro)\"\n    appNewVersion=\"$(versionFromGit sequelpro sequelpro)\"\n    expectedTeamID=\"Media\"\n    ;;\nshield)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Shield\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit theevilbit Shield)\n    appNewVersion=$(versionFromGit theevilbit Shield)\n    expectedTeamID=\"33YRLYRBYV\"\n    ;;\nshotcut)\n    name=\"shotcut\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fsL https://www.shotcut.org/download/releasenotes | grep 'release-' | head -n 1 | cut -d '\"' -f 2 | cut -d '-' -f 2)\n    appCustomVersion() { echo \"$(/usr/bin/defaults read \"/Applications/shotcut.app/Contents/Info.plist\" \"CFBundleVersion\" | sed -r 's/[.]//g')\" }\n    archiveName=\"shotcut-macos-$appNewVersion.dmg\"\n    downloadURL=$(downloadURLFromGit mltframework shotcut)\n    expectedTeamID=\"Y6RX44QG2G\"\n    ;;\nshottr)\n    name=\"Shottr\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fs \"https://shottr.cc/newversion.html\" | xmllint --html --xpath 'substring-before(substring-after(string(//a[@id=\"downloadButton\"]/small), \"v\"), \",\")' - 2> /dev/null)\n    downloadURL=\"https://shottr.cc/dl/Shottr-${appNewVersion}.dmg\"\n    expectedTeamID=\"2Y683PRQWN\"\n    ;;\nsidekick)\n    name=\"Sidekick\"\n    type=\"dmg\"\n    downloadURL=\"https://api.meetsidekick.com/downloads/df/mac\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/.*-x64-([0-9.]*)-.*/\\1/g' )\n    expectedTeamID=\"N975558CUS\"\n    ;;\nsignal)\n    name=\"Signal\"\n    type=\"dmg\"\n    downloadURL=https://updates.signal.org/desktop/$(curl -fs https://updates.signal.org/desktop/latest-mac.yml | awk '/url/ && /dmg/ {print $3}' | grep -i universal)\n    appNewVersion=$(curl -fs https://updates.signal.org/desktop/latest-mac.yml | grep version | awk '{print $2}')\n    expectedTeamID=\"U68MSDN6DR\"\n    ;;\nsigniantapp)\n    name=\"Signiant App\"\n    type=\"dmg\"\n    downloadURL=\"https://updates.signiant.com/signiant_app/$(curl -fs \"https://updates.signiant.com/signiant_app/signiant-app-info-mac.json\" | grep -o '\"file\": *\"[^\"]*\"' | awk -F '\"' '{print $4}')\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*Signiant_App_([0-9]+(\\.[0-9]+)*)\\.dmg/\\1/')\"\n    expectedTeamID=\"U6ZZ4QLU4Q\"\n    ;;\nsilnite)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"silnite\"\n    type=\"pkgInZip\"\n    downloadURL=$(curl -fs https://eclecticlight.co/downloads/ | grep -i $name | grep zip | sed -E 's/.*href=\\\"(https.*)\\\">.*/\\1/g')\n    appNewVersion=$(curl -fs https://eclecticlight.co/downloads/ | grep zip | grep -o -E \"silnite [0-9.]*\" | awk '{print $2}')\n    expectedTeamID=\"QWY4LRW926\"\n    blockingProcesses=( NONE )\n    ;;\nsipgateclinq)\n    name=\"Sipgate CLINQ\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fs -L https://desktop.download.sipgate.com/latest-mac.yml | sed -n 's/version: \\(.*\\)/\\1/p')\n    downloadURL=\"https://desktop.download.sipgate.com/sipgate%20CLINQ-${appNewVersion}.dmg\"\n    expectedTeamID=\"K4L4M6DD76\"\n;;\n\nsirimote)\n    name=\"SiriMote\"\n    type=\"zip\"\n    downloadURL=\"http://bit.ly/sirimotezip\"\n    #appNewVersion=\"\" # Not found on web page\n    expectedTeamID=\"G78RJ6NLJU\"\n    ;;\nsizeup)\n    # credit: AP Orlebeke (@apizz)\n    name=\"SizeUp\"\n    type=\"zip\"\n    downloadURL=\"https://www.irradiatedsoftware.com/download/SizeUp.zip\"\n    appNewVersion=$(curl -fs https://www.irradiatedsoftware.com/updates/notes/SizeUpReleaseNotes.html | grep Version | sed -E 's/.*Version ([0-9.]*) <.*/\\1/')\n    expectedTeamID=\"GVZ7RF955D\"\n    ;;\nsketch)\n    name=\"Sketch\"\n    type=\"zip\"\n    downloadURL=$(curl -sf https://www.sketch.com/downloads/mac/ | grep 'href=\"https://download.sketch.com' | tr '\"' \"\\n\" | grep -E \"https.*.zip\")\n    appNewVersion=$( grep -oE '\\d+\\.\\d+' <<< $downloadURL)\n    expectedTeamID=\"WUGMZZ5K46\"\n    ;;\nsketchupviewer)\n    name=\"SketchUpViewer\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fs https://www.sketchup.com/sketchup/SketchUpViewer-en-dmg | grep \"<a href=\" | sed 's/.*href=\"//' | sed 's/\".*//')\"\n    expectedTeamID=\"J8PVMCY7KL\"\n    ;;\nskim)\n    name=\"Skim\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsL \"https://skim-app.sourceforge.io/skim.xml\" | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fsL \"https://skim-app.sourceforge.io/skim.xml\" | xpath '//rss/channel/item[1]/title' 2>/dev/null | sed -n 's/.*Version \\([^<]*\\)<\\/title>.*/\\1/p')\"\n    expectedTeamID=\"J33JTA7SY9\"\n    ;;\n\nskype)\n    name=\"Skype\"\n    type=\"dmg\"\n    downloadURL=$(curl -sfi https://get.skype.com/go/getskype-skypeformac | awk 'BEGIN{IGNORECASE=1} /location:/ {gsub(/\\r/,\"\",$2); print $2}')\n    archiveName=$(basename \"$downloadURL\")\n    appNewVersion=$(awk -F'[-.]' '{print $2\".\"$3\".\"$4\".\"$5}' <<< \"$archiveName\")\n    versionKey=\"CFBundleVersion\"\n    blockingProcesses=( \"Skype\" , \"Skype Helper\" )\n    expectedTeamID=\"AL798K98FX\"\n    ;;\nslab)\n    name=\"Slab\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n       archiveName=\"Slab-[0-9.]*-darwin-x64.dmg\"\n    elif [[ $(arch) == arm64 ]]; then\n       archiveName=\"Slab-[0-9.]*-darwin-arm64.dmg\"\n    fi\n    downloadURL=$(downloadURLFromGit slab desktop-releases)\n    appNewVersion=$(versionFromGit slab desktop-releases)\n    expectedTeamID=\"Q67SW996Z5\"\n    ;;\nslack)\n    name=\"Slack\"\n    type=\"dmg\"\n    downloadURL=\"https://slack.com/ssb/download-osx-universal\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | cut -d \"/\" -f7 )\n    expectedTeamID=\"BQR82RBBHL\"\n    ;;\nsmartgit)\n    name=\"SmartGit\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n    downloadURL=\"https://www.syntevo.com$(curl -fs \"https://www.syntevo.com/smartgit/download/\" | grep -i -o -E \"/downloads/.*/smartgit.*\\.dmg\" | tail -1)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n    downloadURL=\"https://www.syntevo.com$(curl -fs \"https://www.syntevo.com/smartgit/download/\" | grep -i -o -E \"/downloads/.*/smartgit.*\\.dmg\" | head -1)\"\n    fi\n    appNewVersion=\"$(curl -fs \"https://www.syntevo.com/smartgit/changelog.txt\" | grep -i -E \"SmartGit *[0-9.]* *.*\" | head -1 | awk '{print $2}')\"\n    expectedTeamID=\"PHMY45PTNW\"\n    ;;\nsmartsheet)\n\tname=\"Smartsheet\"\n\ttype=\"dmg\"\n\tdownloadURL=\"https://smartsheet-desktop-app-builds.s3.amazonaws.com/public/darwin/Smartsheet-setup.dmg\"\n\tappNewVersion=$(curl -fsl 'https://smartsheet-desktop-app-builds.s3.amazonaws.com/public/darwin/latest-mac.yml' | sed -nE 's/^version: (.*)/\\1/p')\n\texpectedTeamID=\"J89ET3PY68\"\n\t;;\nsmartsvn)\n    name=\"SmartSVN\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://www.smartsvn.com$(curl -fsL \"https://www.smartsvn.com/download/\" | grep -oE \"href=\\\".*-aarch64.*\\.dmg\\\"\" | cut -d '\"' -f 2)\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://www.smartsvn.com$(curl -fsL \"https://www.smartsvn.com/download/\" | grep -oE \"href=\\\".*-x86_64.*\\.dmg\\\"\" | cut -d '\"' -f 2)\"\n    fi\n    appNewVersion=$(curl -fsL \"https://www.smartsvn.com/download/\" | grep -B 1 \"changelog.txt\" | grep \"Version \" | awk -F' ' '{ print $2 }')\n    expectedTeamID=\"PHMY45PTNW\"\n    ;;\nsnagit|\\\nsnagit2024)\n    name=\"Snagit 2024\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2024\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2024\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnagit2019)\n    name=\"Snagit 2019\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2019\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2019\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnagit2020)\n    name=\"Snagit 2020\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2020\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2020\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnagit2021)\n    name=\"Snagit 2021\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2021\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2021\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnagit2022)\n    name=\"Snagit 2022\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2022\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2022\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnagit2023)\n    name=\"Snagit 2023\"\n    type=\"dmg\"\n    downloadURL=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\" | grep -A 3 \"Snagit (Mac) 2023\" | sed 's/.*href=\"//' | sed 's/\".*//' | grep .dmg)\n    appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.techsmith.com/hc/en-us/articles/360004908652-Desktop-Product-Download-Links\"  | grep \"Snagit (Mac) 2023\" | sed -e 's/.*Snagit (Mac) //' -e 's/<\\/td>.*//')\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\nsnapgeneviewer)\n    name=\"SnapGene Viewer\"\n    type=\"dmg\"\n    downloadURL=\"https://www.snapgene.com/local/targets/download.php?variant=viewer&os=mac&majorRelease=latest&minorRelease=latest\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | tr '/' '\\n' | grep -i \"dmg\" | sed -E 's/[a-zA-Z_]*_([0-9.]*)_mac\\.dmg/\\1/g' )\n    expectedTeamID=\"WVCV9Q8Y78\"\n    ;;\nsoapuiopensource)\n    name=\"SoapUI\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsL \"https://github.com/SmartBear/soapui/releases/latest\" | grep -m 1 -o 'href=\".*\\.dmg\".*' | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(versionFromGit SmartBear soapui)\"\n    appCustomVersion() {\n        while IFS= read -r line; do\n            soapUIApps+=(\"$line\")\n        done < <(ls -d ${targetDir}/* | grep -E \"SoapUI-.*\\.app\")\n\n        if [ -e \"${soapUIApps[-1]}\" ]; then\n            defaults read \"${soapUIApps[-1]}/Contents/Info.plist\" CFBundleShortVersionString\n        fi\n    }\n    installerTool=\"SoapUI ${appNewVersion} Installer.app\"\n    CLIInstaller=\"${installerTool}/Contents/MacOS/JavaApplicationStub\"\n    CLIArguments=(-q)\n    expectedTeamID=\"HVA5GNL2LF\"\n    ;;\nsococo)\n    name=\"Sococo\"\n    type=\"dmg\"\n    downloadURL=\"https://s.sococo.com/rs/client/mac/sococo-client-mac.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"MR43LR5EJ4\"\n    ;;\nsolstice)\n    name=\"Mersive Solstice\"\n    type=\"dmg\"\n    downloadURL=\"https://www.mersive.com/files/41693/\"\n    expectedTeamID=\"63B5A5WDNG\"\n    ;;\nsonicvisualiser)\n    name=\"Sonic Visualiser\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit sonic-visualiser sonic-visualiser)\"\n    appNewVersion=\"$(versionFromGit sonic-visualiser sonic-visualiser)\"\n    expectedTeamID=\"73F996B92S\"\n    ;;\nsonobus)\n    name=\"Sonobus\"\n    type=\"pkgInDmg\"\n    html_page_source=\"$(curl -fs 'https://www.sonobus.net')\"\n    downloadFile=\"$(echo \"${html_page_source}\" | xmllint --html --xpath \"string(//a[contains(@href, 'mac.dmg')]/@href)\" - 2> /dev/null)\"\n    downloadURL=\"https://www.sonobus.net/$downloadFile\"\n    appNewVersion=\"$(echo \"${downloadFile}\" | sed 's/releases\\/sonobus-//' | sed 's/\\-mac.dmg//' )\"\n    expectedTeamID=\"XCS435894D\"\n    ;;\nsonos|\\\nsonoss1)\n    # credit: Erik Stam (@erikstam)\n    name=\"Sonos S1 Controller\"\n    type=\"dmg\"\n    downloadURL=\"https://www.sonos.com/redir/controller_software_mac\"\n    expectedTeamID=\"2G4LW83Q3E\"\n    ;;\nsonoss2)\n    name=\"Sonos\"\n    type=\"dmg\"\n    downloadURL=\"https://www.sonos.com/redir/controller_software_mac2\"\n    expectedTeamID=\"2G4LW83Q3E\"\n    ;;\nsoundly-placeit)\n    name=\"Placeit\"\n    # Other Tools: https://getsoundly.com/tools/\n    type=\"pkg\"\n    downloadURL=\"https://storage.googleapis.com/soundly-plugins/Placeit.pkg\"\n    #appNewVersion=\"\"\n    expectedTeamID=\"67Y6N7VTDG\"\n    ;;\nsoundly)\n    name=\"Soundly\"\n    # From: https://getsoundly.com\n    # Cheat Sheet: https://getsoundly.com/cheatsheet/Soundly-Cheatsheet-Mac.pdf\n    type=\"dmg\"\n    downloadURL=\"https://storage.googleapis.com/soundlyapp/arm/Soundly.dmg\"\n    #appNewVersion=\"\"\n    expectedTeamID=\"67Y6N7VTDG\"\n    ;;\nsourcetree)\n    name=\"Sourcetree\"\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://www.sourcetreeapp.com\" | grep -i \"macURL\" | tr '\"' '\\n' | grep -io \"https://.*/Sourcetree.*\\.zip\" | tail -1)\n    appNewVersion=$(echo \"${downloadURL}\" | sed -E 's/.*\\/Sourcetree_([0-9.]*)_[0-9]*\\.zip/\\1/g')\n    expectedTeamID=\"UPXU4CQZ5P\"\n    ;;\nspark)\n    name=\"Spark\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -fsL https://sparkmailapp.com/download | grep -m 1 -o \"https.*dmg\")\"\n    versionKey=\"CFBundleVersion\"\n    appNewVersion=\"$(echo $downloadURL | awk -F'/' '{ print $(NF-1) }')\"\n    appName=\"Spark Desktop.app\"\n    expectedTeamID=\"3L68KQB4HG\"\n    ;;\nsplashtopbusiness)\n    name=\"Splashtop Business\"\n    type=\"pkgInDmg\"\n    splashtopbusinessVersions=$(curl -fsL \"https://www.splashtop.com/wp-content/themes/responsive/downloadx.php?product=stb&platform=mac-client\")\n    downloadURL=$(curl -Ls -w %{url_effective} -o /dev/null $(getJSONValue \"$splashtopbusinessVersions\" \"url\"))\n    appNewVersion=\"${${downloadURL#*INSTALLER_v}%*.dmg}\"\n    expectedTeamID=\"CPQQ3AW49Y\"\n    ;;\nsplashtopsos)\n    name=\"Splashtop SOS\"\n    type=\"dmg\"\n    downloadURL=\"https://download.splashtop.com/sos/SplashtopSOS.dmg\"\n    expectedTeamID=\"CPQQ3AW49Y\"\n    ;;\nsplashtopstreamer)\n    name=\"Splashtop Streamer\"\n    type=\"pkgInDmg\"\n    downloadURL=$(curl -fsLI \"https://my.splashtop.com/csrs/mac\" | grep -i '^location:' | tail -n 1 | cut -d ' ' -f 2 | tr -d '\\r')\n    appNewVersion=$(echo $downloadURL | sed -E 's/.*_v([0-9.]+).dmg/\\1/')\n    expectedTeamID=\"CPQQ3AW49Y\"\n    ;;\nsplice)\n    name=\"Splice\"\n    type=\"zip\"\n    if [[ \"$(arch)\" == \"arm64\" ]]; then\n        appNewVersion=$(getJSONValue \"$(curl -fs 'https://api.splice.com/v2/desktop/darwin/stable/latest?v=1.0.0&architecture=arm64')\" \"name\")\n        downloadURL=\"https://desktop.splice.com/darwin/stable/arm64/Splice.app.zip\"\n    else\n        appNewVersion=$(getJSONValue \"$(curl -fs 'https://api.splice.com/v2/desktop/darwin/stable/latest?v=1.0.0&architecture=x64')\" \"name\")\n        downloadURL=\"https://desktop.splice.com/darwin/stable/x64/Splice.app.zip\"\n    fi\n    expectedTeamID=\"9962T6AKMH\"\n    ;;\nspotify)\n    name=\"Spotify\"\n    type=\"dmg\"\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://download.scdn.co/SpotifyARM64.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://download.scdn.co/Spotify.dmg\"\n    fi\n    # appNewVersion=$(curl -fs https://www.spotify.com/us/opensource/ | cat | grep -o \"<td>.*.</td>\" | head -1 | cut -d \">\" -f2 | cut -d \"<\" -f1) # does not result in the same version as downloaded\n    expectedTeamID=\"2FNC3A47ZF\"\n    ;;\nsqlpropostgres)\n    name=\"SQLPro for Postgres\"\n    type=\"zip\"\n    downloadURL=\"https://macpostgresclient.com/download.php\"\n    expectedTeamID=\"LKJB72232C\"\n    blockingProcesses=( \"SQLPro for Postgres\" )\n    ;;\nsqlprostudio)\n    name=\"SQLPro Studio\"\n    type=\"zip\"\n    downloadURL=\"https://www.sqlprostudio.com/download.php\"\n    expectedTeamID=\"LKJB72232C\"\n    blockingProcesses=( \"SQLPro Studio\" )\n    ;;\nstarface72x)\n    name=\"STARFACE\"\n    # Downloads the latest 7.2.x version of the STARFACE Client. The client depends on the version of the PBX, so the correct version should be selected for installation\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"7.2\" | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"7.2\" | cut -d '\"' -f 2 | cut -d '-' -f 4 | sed 's/\\(.*\\).zip/\\1/')\n    expectedTeamID=\"Q965D3UXEW\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nstarface73x)\n    name=\"STARFACE\"\n    # Downloads the latest 7.3.x version of the STARFACE Client. The client depends on the version of the PBX, so the correct version should be selected for installation\n    type=\"dmg\"\n    downloadURL=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"7.3\" | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"7.3\" | cut -d '\"' -f 2 | cut -d '-' -f 4 | sed 's/\\(.*\\).dmg/\\1/')\n    expectedTeamID=\"Q965D3UXEW\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nstarfaceuccclient)\n    name=\"STARFACE UCC Client\"\n    # Downloads the latest 6.7.x version of the STARFACE Client. The client depends on the version of the PBX, so the correct version should be selected for installation\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"STARFACE_UCC_Client_6.7\" | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://www.starface-cdn.de/starface/clients/mac/appcast.xml\" | grep -i 'enclosure url=' | grep -m 1 \"STARFACE_UCC_Client_6.7\" | cut -d '\"' -f 2 | sed -e 's/.*-\\(.*\\).zip*/\\1/')\n    expectedTeamID=\"Q965D3UXEW\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nstats)\n    name=\"Stats\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit exelban stats)\"\n    appNewVersion=\"$(versionFromGit exelban stats)\"\n    expectedTeamID=\"RP2S87B72W\"\n    ;;\nsteelseriesengine)\n    name=\"SteelSeries GG\"\n    type=\"pkg\"\n    downloadURL=\"https://steelseries.com/engine/latest/darwin\"\n    appNewVersion=\"$(curl -fsIL \"$downloadURL\" | grep -i \"^location\" | sed -E 's/.*SteelSeriesGG([0-9.]*)\\.pkg/\\1/')\"\n    expectedTeamID=\"6WGL6CHFH2\"\n    ;;\nstrongdm)\n    name=\"strongDM\"\n    type=\"dmg\"\n    downloadURL=\"https://app.strongdm.com/downloads/client/darwin\"\n    appNewVersion=$(curl -fsLIXGET \"https://app.strongdm.com/downloads/client/darwin\" | grep -i \"^content-disposition\" | sed -e 's/.*filename\\=\\\"SDM\\-\\(.*\\)\\.dmg\\\".*/\\1/')\n    appName=\"SDM.app\"\n    blockingProcesses=( \"SDM\" )\n    expectedTeamID=\"W5HSYBBJGA\"\n    ;;\nstrongsync)\n    name=\"Strongsync\"\n    type=\"dmg\"\n    #downloadURL=\"https://updates.expandrive.com/apps/strongsync/download_latest\"\n    downloadURL=$(curl -fs \"https://updates.expandrive.com/appcast/strongsync.xml\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    appNewVersion=$(curl -fs \"https://updates.expandrive.com/appcast/strongsync.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    versionKey=\"CFBundleVersion\"\n    expectedTeamID=\"CH86M498V4\"\n    ;;\nsubethaedit)\n    name=\"SubEthaEdit\"\n    # Home: https://github.com/subethaedit/SubEthaEdit\n    # Description: General purpose plain text editor for macOS. Widely known for its live collaboration feature.\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit subethaedit SubEthaEdit)\"\n    appNewVersion=\"$(versionFromGit subethaedit SubEthaEdit)\"\n    expectedTeamID=\"S76GCAG929\"\n    ;;\nsublimemerge)\n    # Home: https://www.sublimemerge.com\n    # Description: Git Client, done Sublime. Line-by-line Staging. Commit Editing. Unmatched Performance.\n    name=\"Sublime Merge\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs \"https://www.sublimemerge.com/download_thanks?target=mac#direct-downloads\" | grep -io \"https://download.*_mac.zip\" | head -1)\"\n    appNewVersion=$(curl -fs https://www.sublimemerge.com/download | grep -i -A 4 \"id.*changelog\" | grep -io \"Build [0-9]*\")\n    expectedTeamID=\"Z6D26JE4Y4\"\n    ;;\nsublimetext)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Sublime Text\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs \"https://www.sublimetext.com/download_thanks?target=mac#direct-downloads\" | grep -io \"https://download.*_mac.zip\" | head -1)\"\n    appNewVersion=$(curl -fs https://www.sublimetext.com/download | grep -i -A 4 \"id.*changelog\" | grep -io \"Build [0-9]*\")\n    expectedTeamID=\"Z6D26JE4Y4\"\n    ;;\nsuitestudio)\n    name=\"Suite\"\n    type=\"pkg\"\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://saturn-installer-prd-124359286071-bucket.s3.amazonaws.com/suite-installer-osx-arm64.pkg\"\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://saturn-installer-prd-124359286071-bucket.s3.amazonaws.com/suite-installer-osx-x64.pkg\"\n    fi\n    expectedTeamID=\"58KZ58VMJ8\"\n    ;;\nsuperhuman)\n    name=\"superhuman\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"https://download.superhuman.com/Superhuman-arm64.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"https://download.superhuman.com/Superhuman.dmg\"\n    fi\n    appNewVersion=$(curl -fs \"https://storage.googleapis.com/download.superhuman.com/supertron-update/latest-mac.yml\" | head -1 | cut -d \" \" -f2)\n    expectedTeamID=\"6XHFYUTQGX\"\n    ;;\nsupportapp)\n    name=\"Support\"\n    type=\"pkg\"\n    packageID=\"nl.root3.support\"\n    downloadURL=$(downloadURLFromGit root3nl SupportApp)\n    appNewVersion=$(versionFromGit root3nl SupportApp)\n    expectedTeamID=\"98LJ4XBGYK\"\n    blockingProcesses=( NONE )\n    ;;\nsurfdrive)\n    name=\"SURFdrive\"\n    type=\"pkg\"\n    downloadURL=\"https://surfdrive.surf.nl/downloads/surfdrive-latest-x86_64.pkg\"\n    expectedTeamID=\"4AP2STM4H5\"\n    appNewVersion=$(curl -fs https://wiki.surfnet.nl/display/SURFdrive/Downloads+voor+SURFdrive|grep -Eo \"(http|https)://[a-zA-Z0-9./?=_%:-]*\" | grep pkg|cut -d- -f2)\n    appName=\"surfdrive.app\"\n    blockingProcesses=( \"surfdrive\" )\n    ;;\nsuspiciouspackage)\n    # credit: Mischa van der Bent (@mischavdbent)\n    name=\"Suspicious Package\"\n    type=\"dmg\"\n    downloadURL=\"https://mothersruin.com/software/downloads/SuspiciousPackage.dmg\"\n    appNewVersion=$(curl -fs https://mothersruin.com/software/SuspiciousPackage/get.html | grep 'class=\"version\"' | sed -E 's/.*>([0-9\\.]*) \\(.*/\\1/g')\n    expectedTeamID=\"936EB786NH\"\n    ;;\nswiftruntimeforcommandlinetools)\n    # Note: this installer will error on macOS versions later than 10.14.3\n    name=\"SwiftRuntimeForCommandLineTools\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://updates.cdn-apple.com/2019/cert/061-41823-20191025-5efc5a59-d7dc-46d3-9096-396bb8cb4a73/SwiftRuntimeForCommandLineTools.dmg\"\n    expectedTeamID=\"Software Update\"\n    ;;\nsymhelper)\n    name=\"SYM-Helper\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit setup-your-mac SYM-Helper)\"\n    appNewVersion=\"$(versionFromGit setup-your-mac SYM-Helper)\"\n    expectedTeamID=\"PS2F6S478M\"\n    ;;\n\nsync)\n    name=\"Sync\"\n    type=\"dmg\"\n    downloadURL=\"https://www.sync.com/download/apple/Sync.dmg\"\n    appNewVersion=\"$(curl -fs \"https://www.sync.com/blog/category/desktop/feed/\" | xpath '(//channel/item/title)[1]' 2>/dev/null | sed -E 's/^.* ([0-9.]*) .*$/\\1/g')\"\n    expectedTeamID=\"7QR39CMJ3W\"\n    blockingProcesses=( \"Sync\" \"sync-worker.exe\" )\n    ;;\nsynologyactivebackupforbusinessagent)\n    name=\"Synology Active Backup for Business Agent\"\n    type=\"pkgInDmg\"\n    packageID=\"com.synology.activebackup-agent\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=$(appVersion=`curl -sf https://archive.synology.com/download/Utility/ActiveBackupBusinessAgent | grep -m 1 /download/Utility/ActiveBackupBusinessAgent/ | sed \"s|.*>\\(.*\\)<.*|\\\\1|\"` && appShortVersion=`sed 's#.*-\\(\\)#\\1#' <<< $appVersion` && echo https://global.download.synology.com/download/Utility/ActiveBackupBusinessAgent/\"$appVersion\"/Mac/x86_64/Synology%20Active%20Backup%20for%20Business%20Agent-\"$appVersion\".dmg)\n    # appNewVersion=$(appVersionP1=`curl -sf https://archive.synology.com/download/Utility/ActiveBackupBusinessAgent | grep -m 1 /download/Utility/ActiveBackupBusinessAgent/ | sed \"s|.*>\\(.*\\)-.*|\\\\1|\"` && sed 's/\\(.\\{0\\}\\)./\\17/' <<< $appVersionP1)\n    appNewVersion=$(curl -sf https://archive.synology.com/download/Utility/ActiveBackupBusinessAgent | grep -m 1 /download/Utility/ActiveBackupBusinessAgent/ | sed \"s|.*>\\(.*\\)<.*|\\\\1|\" | sed \"s#.*-\\(\\)#\\1#\")\n    expectedTeamID=\"X85BAK35Y4\"\n    ;;\nsynologyassistant)\n    name=\"SynologyAssistant\"\n    type=\"dmg\"\n    packageID=\"com.synology.DSAssistant\"\n    appNewVersion=\"$(curl -sf https://archive.synology.com/download/Utility/Assistant | grep -m 1 /download/Utility/Assistant/ | sed \"s|.*>\\(.*\\)<.*|\\\\1|\")\"\n    downloadURL=\"https://global.download.synology.com/download/Utility/Assistant/${appNewVersion}/Mac/synology-assistant-${appNewVersion}.dmg\"\n    expectedTeamID=\"X85BAK35Y4\"\n    ;;\nsynologydriveclient)\n    name=\"Synology Drive Client\"\n    type=\"pkgInDmg\"\n    # packageID=\"com.synology.CloudStation\"\n    versionKey=\"CFBundleVersion\"\n    downloadURL=$(appVersion=`curl -sf https://archive.synology.com/download/Utility/SynologyDriveClient | grep -m 1 /download/Utility/SynologyDriveClient/ | sed \"s|.*>\\(.*\\)<.*|\\\\1|\"` && appShortVersion=`sed 's#.*-\\(\\)#\\1#' <<< $appVersion` && echo https://global.download.synology.com/download/Utility/SynologyDriveClient/\"$appVersion\"/Mac/Installer/synology-drive-client-\"${appShortVersion}\".dmg)\n    # appNewVersion=$(appVersionP1=`curl -sf https://archive.synology.com/download/Utility/SynologyDriveClient | grep -m 1 /download/Utility/SynologyDriveClient/ | sed \"s|.*>\\(.*\\)-.*|\\\\1|\"` && sed 's/\\(.\\{0\\}\\)./\\17/' <<< $appVersionP1)\n    appNewVersion=$(curl -sf https://archive.synology.com/download/Utility/SynologyDriveClient | grep -m 1 /download/Utility/SynologyDriveClient/ | sed \"s|.*>\\(.*\\)<.*|\\\\1|\" | sed \"s#.*-\\(\\)#\\1#\")\n    expectedTeamID=\"X85BAK35Y4\"\n    ;;\ntableaudesktop)\n    name=\"Tableau Desktop\"\n    type=\"pkgInDmg\"\n    packageID=\"com.tableausoftware.tableaudesktop\"\n    downloadURL=\"https://www.tableau.com/downloads/desktop/mac\"\n    appNewVersion=${$(curl -fsIL \"$downloadURL\" | sed -nE 's/.*Desktop-([0-9-]*).*/\\1/p')//-/.}\n    expectedTeamID=\"QJ4XPRK37C\"\n    ;;\ntableaupublic)\n    name=\"Tableau Public\"\n    type=\"pkgInDmg\"\n    packageID=\"com.tableausoftware.tableaudesktop\"\n    downloadURL=$(curl -fs https://www.tableau.com/downloads/public/mac | awk '/TableauPublic/' | xmllint --recover --html --xpath \"//a/text()\" -)\n    appNewVersion=$( echo $downloadURL | sed -E 's/.*TableauPublic-([-0-9]*)\\.dmg/\\1/g' | tr \"-\" \".\" )\n    expectedTeamID=\"QJ4XPRK37C\"\n    ;;\ntableaureader)\n    name=\"Tableau Reader\"\n    type=\"pkgInDmg\"\n    packageID=\"com.tableausoftware.reader.app\"\n    downloadURL=\"https://www.tableau.com/downloads/reader/mac\"\n    expectedTeamID=\"QJ4XPRK37C\"\n    ;;\ntageditor)\n     name=\"Tag Editor\"\n     type=\"dmg\"\n     downloadURL=\"https://amvidia.com/downloads/tag-editor-mac.dmg\"\n     appNewVersion=$(curl -sf \"https://amvidia.com/tag-editor\" | grep -o -E '\"softwareVersion\":.'\"{8}\" | sed -E 's/.*\"([0-9.]*).*/\\1/g')\n     expectedTeamID=\"F2TH9XX9CJ\"\n     ;;\ntailscale)\n    name=\"Tailscale\"\n    type=\"zip\"\n    appNewVersion=\"$(curl -s https://pkgs.tailscale.com/stable/ | awk -F- '/Tailscale.*macos.zip/ {print $2}')\"\n    downloadURL=\"https://pkgs.tailscale.com/stable/Tailscale-${appNewVersion}-macos.zip\"\n    expectedTeamID=\"W5364U7YZB\"\n    versionKey=\"CFBundleShortVersionString\"\n    ;;\ntalkdeskcxcloud)\n    name=\"Talkdesk\"\n    type=\"dmg\"\n    talkdeskcxcloudVersions=$(curl -fs \"https://td-infra-prd-us-east-1-s3-atlaselectron.s3.amazonaws.com/talkdesk-latest-metadata.json\")\n    appNewVersion=$(getJSONValue \"$talkdeskcxcloudVersions\" \"[0].version\")\n    downloadURL=\"https://td-infra-prd-us-east-1-s3-atlaselectron.s3.amazonaws.com/talkdesk-${appNewVersion}.dmg\"\n    expectedTeamID=\"YGGJX44TB8\"\n    ;;\ntaskpaper)\n    # credit: Drew Diver (@grumpydrew on MacAdmins Slack)\n    name=\"TaskPaper\"\n    type=\"dmg\"\n    downloadURL=\"https://www.taskpaper.com/assets/app/TaskPaper.dmg\"\n    expectedTeamID=\"64A5CLJP5W\"\n    ;;\nteamviewer)\n    name=\"TeamViewer\"\n    type=\"pkgInDmg\"\n    # packageID=\"com.teamviewer.teamviewer\"\n    versionKey=\"CFBundleShortVersionString\"\n    pkgName=\"Install TeamViewer.app/Contents/Resources/Install TeamViewer.pkg\"\n    downloadURL=\"https://download.teamviewer.com/download/TeamViewer.dmg\"\n    appNewVersion=$(curl -fs \"https://www.teamviewer.com/en/download/macos/\" | grep \"Current version\" | awk -F': ' '{ print $2 }' | sed 's/<[^>]*>//g')\n    expectedTeamID=\"H7UGFBUGV6\"\n    ;;\nteamviewerhost)\n    name=\"TeamViewerHost\"\n    type=\"pkgInDmg\"\n    packageID=\"com.teamviewer.teamviewerhost\"\n    pkgName=\"Install TeamViewerHost.app/Contents/Resources/Install TeamViewerHost.pkg\"\n    downloadURL=\"https://download.teamviewer.com/download/TeamViewerHost.dmg\"\n    appNewVersion=$(curl -fs \"https://www.teamviewer.com/en/download/macos/\" | grep \"Current version\" | awk -F': ' '{ print $2 }' | sed 's/<[^>]*>//g')\n    expectedTeamID=\"H7UGFBUGV6\"\n    #blockingProcessesMaxCPU=\"5\" # Future feature\n    ;;\nteamviewerhostcustom)\n    name=\"TeamViewerHost\"\n    type=\"pkgInDmg\"\n    teamviewerCustomDownloadURL=\"\" # https://get.teamviewer.com/your_custom_name_here\n    teamviewerConfigID=$(curl -fs ${teamviewerCustomDownloadURL} -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' | grep -o 'var configId = \".*\"' | awk -F'\"' '{ print $2 }')\n    teamviewerVersion=$(curl -fs ${teamviewerCustomDownloadURL} -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' | grep -o 'var version = \".*\"' | awk -F'\"' '{ print $2 }')\n    downloadURL=$(curl -fs -X POST --url \"https://get.teamviewer.com/api/CustomDesign\" --header 'Content-Type: application/json; charset=utf-8' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' --data '{ \"ConfigId\": \"'\"$teamviewerConfigID\"'\", \"Version\": \"'\"$teamviewerVersion\"'\", \"IsCustomModule\": true, \"Subdomain\": \"1\", \"ConnectionId\": \"\" }' | tr -d '\"')\n    appNewVersion=$(curl -fs \"https://www.teamviewer.com/en/download/macos/\" | grep \"Current version\" | awk -F': ' '{ print $2 }' | sed 's/<[^>]*>//g')\n    appName=\"TeamViewer.app\"\n    expectedTeamID=\"H7UGFBUGV6\"\n    ;;\nteamviewerqs)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"TeamViewerQS\"\n    type=\"dmg\"\n    downloadURL=\"https://download.teamviewer.com/download/TeamViewerQS.dmg\"\n    appNewVersion=$(curl -fs \"https://www.teamviewer.com/en/download/macos/\" | grep \"Current version\" | awk -F': ' '{ print $2 }' | sed 's/<[^>]*>//g')\n    appName=\"TeamViewerQS.app\"\n    expectedTeamID=\"H7UGFBUGV6\"\n    ;;\nteamviewerqscustom)\n    name=\"TeamViewerQS\"\n    type=\"zip\"\n    teamviewerCustomDownloadURL=\"\" # https://get.teamviewer.com/your_custom_name_here\n    teamviewerConfigID=$(curl -fs ${teamviewerCustomDownloadURL} -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' | grep -o 'var configId = \".*\"' | awk -F'\"' '{ print $2 }')\n    teamviewerVersion=$(curl -fs ${teamviewerCustomDownloadURL} -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' | grep -o 'var version = \".*\"' | awk -F'\"' '{ print $2 }')\n    downloadURL=$(curl -fs -X POST --url \"https://get.teamviewer.com/api/CustomDesign\" --header 'Content-Type: application/json; charset=utf-8' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/113.0.0.0 Safari/537.36' --data '{ \"ConfigId\": \"'\"$teamviewerConfigID\"'\", \"Version\": \"'\"$teamviewerVersion\"'\", \"IsCustomModule\": true, \"Subdomain\": \"1\", \"ConnectionId\": \"\" }' | tr -d '\"')\n    appNewVersion=$(curl -fs \"https://www.teamviewer.com/en/download/macos/\" | grep \"Current version\" | awk -F': ' '{ print $2 }' | sed 's/<[^>]*>//g')\n    appName=\"TeamViewerQS.app\"\n    expectedTeamID=\"H7UGFBUGV6\"\n    ;;\ntechsmithcapture)\n    # credit Elena Ackley (@elenaelago)\n    name=\"TechSmith Capture\"\n    type=\"dmg\"\n    downloadURL=\"https://cdn.cloud.techsmith.com/techsmithcapture/mac/TechSmithCapture.dmg\"\n    expectedTeamID=\"7TQL462TU8\"\n    ;;\ntelegram)\n    name=\"Telegram\"\n    type=\"dmg\"\n    downloadURL=\"https://telegram.org/dl/macos\"\n    appNewVersion=$( curl -fs https://macos.telegram.org | grep anchor | head -1 | sed -E 's/.*a>([0-9.]*) .*/\\1/g' )\n    expectedTeamID=\"6N38VWS5BX\"\n    ;;\ntembo)\n    name=\"Tembo\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs https://www.houdah.com/tembo/updates/cast2.xml | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs https://www.houdah.com/tembo/updates/cast2.xml | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\"\n    expectedTeamID=\"DKGQD8H8ZY\"\n    ;;\ntencentmeeting)\n    name=\"TencentMeeting\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        downloadURL=\"$(curl -fs 'https://meeting.tencent.com/web-service/query-download-info?q=%5B%7B%22package-type%22%3A%22app%22%2C%22channel%22%3A%220300000000%22%2C%22platform%22%3A%22mac%22%2C%22arch%22%3A%22arm64%22%7D%5D&c_os=web&c_os_version=1&c_os_model=web&c_timestamp=1653366550252&c_instance_id=5&c_nonce=DcaDam4y&c_app_id=1400143280&c_app_version=1&c_lang=zh-cn&c_district=0&nonce=miwSceJNQaSZttma' -H 'authority: meeting.tencent.com' -H 'referer: https://meeting.tencent.com/download-mac.html?from=1000&fromSource=1&macType=apple' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15' | grep -o \"https://updatecdn.meeting.qq.com[^']*\\.publish.arm64.officialwebsite.dmg\")\"\n        appNewVersion=$(curl -fs 'https://meeting.tencent.com/web-service/query-download-info?q=%5B%7B%22package-type%22%3A%22app%22%2C%22channel%22%3A%220300000000%22%2C%22platform%22%3A%22mac%22%2C%22arch%22%3A%22arm64%22%7D%5D&c_os=web&c_os_version=1&c_os_model=web&c_timestamp=1653366550252&c_instance_id=5&c_nonce=DcaDam4y&c_app_id=1400143280&c_app_version=1&c_lang=zh-cn&c_district=0&nonce=miwSceJNQaSZttma' -H 'authority: meeting.tencent.com' -H 'referer: https://meeting.tencent.com/download-mac.html?from=1000&fromSource=1&macType=apple' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15' | grep -o \"https://updatecdn.meeting.qq.com[^']*\\.publish.arm64.officialwebsite.dmg\" | sed -e 's/.*TencentMeeting\\_0300000000\\_\\(.*\\)\\.publish\\.arm64\\.officialwebsite\\.dmg.*/\\1/')\n    elif [[ $(arch) == \"i386\" ]]; then\n        downloadURL=\"$(curl -fs 'https://meeting.tencent.com/web-service/query-download-info?q=%5B%7B%22package-type%22%3A%22app%22%2C%22channel%22%3A%220300000000%22%2C%22platform%22%3A%22mac%22%2C%22arch%22%3A%22x86_64%22%7D%5D&c_os=web&c_os_version=1&c_os_model=web&c_timestamp=1653366500890&c_instance_id=5&c_nonce=jA4P4JPY&c_app_id=1400143280&c_app_version=1&c_lang=zh-cn&c_district=0&nonce=tF6Bm4FYHJwdPeGH' -H 'authority: meeting.tencent.com' -H 'referer: https://meeting.tencent.com/download-mac.html?from=1000&fromSource=1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15' | grep -o \"https://updatecdn.meeting.qq.com[^']*\\.publish.x86_64.officialwebsite.dmg\")\"\n        appNewVersion=$(curl -fs 'https://meeting.tencent.com/web-service/query-download-info?q=%5B%7B%22package-type%22%3A%22app%22%2C%22channel%22%3A%220300000000%22%2C%22platform%22%3A%22mac%22%2C%22arch%22%3A%22x86_64%22%7D%5D&c_os=web&c_os_version=1&c_os_model=web&c_timestamp=1653366500890&c_instance_id=5&c_nonce=jA4P4JPY&c_app_id=1400143280&c_app_version=1&c_lang=zh-cn&c_district=0&nonce=tF6Bm4FYHJwdPeGH' -H 'authority: meeting.tencent.com' -H 'referer: https://meeting.tencent.com/download-mac.html?from=1000&fromSource=1' -H 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15' | grep -o \"https://updatecdn.meeting.qq.com[^']*\\.publish.x86_64.officialwebsite.dmg\" | sed -e 's/.*TencentMeeting\\_0300000000\\_\\(.*\\)\\.publish\\.x86_64\\.officialwebsite\\.dmg.*/\\1/')\n    fi\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.5 Safari/605.1.15\" )\n    appCustomVersion() { echo \"$(defaults read /Applications/TencentMeeting.app/Contents/Info.plist CFBundleShortVersionString)$(echo \".\")$(defaults read /Applications/TencentMeeting.app/Contents/Info.plist CFBundleVersion)\" }\n    expectedTeamID=\"88L2Q4487U\"\n    ;;\n\ntexliveutility)\n    name=\"TeX Live Utility\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit amaxwell tlutility)\"\n    appNewVersion=\"$(versionFromGit amaxwell tlutility)\"\n    expectedTeamID=\"966Z24PX4J\"\n    ;;\ntexshop)\n    name=\"TeXShop\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit TeXShop TeXShop)\"\n    appNewVersion=\"$(versionFromGit TeXShop TeXShop)\"\n    expectedTeamID=\"RBGCY5RJWM\"\n    ;;\ntextexpander)\n    name=\"TextExpander\"\n    type=\"dmg\"\n    downloadURL=\"$(curl -s -L -w \"%{url_effective}\\n\" -o /dev/null \"https://rest-prod.tenet.textexpander.com/download?platform=macos\")\"\n    appNewVersion=$( echo \"$downloadURL\" | sed -n 's/.*TextExpander_\\([0-9.]*\\).dmg/\\1/p' | grep -oE '[0-9.]+' )\n    expectedTeamID=\"7PKJ6G4DXL\"\n    ;;\ntextmate)\n    name=\"TextMate\"\n    type=\"tbz\"\n    #downloadURL=\"https://api.textmate.org/downloads/release?os=10.12\"\n    downloadURL=$(downloadURLFromGit \"textmate\" \"textmate\")\n    appNewVersion=$(versionFromGit \"textmate\" \"textmate\")\n    expectedTeamID=\"45TL96F76G\"\n    ;;\ntheunarchiver)\n    name=\"The Unarchiver\"\n    type=\"dmg\"\n    downloadURL=\"https://dl.devmate.com/com.macpaw.site.theunarchiver/TheUnarchiver.dmg\"\n    appNewVersion=\"$(curl -fs \"https://theunarchiver.com\" | grep -i \"Latest version\" | head -1 | sed -E 's/.*> ([0-9.]*) .*/\\1/g')\"\n    expectedTeamID=\"S8EX82NJP6\"\n    appName=\"The Unarchiver.app\"\n    ;;\nthings)\n    name=\"Things\"\n    type=\"zip\"\n    downloadURL=\"https://culturedcode.com/things/download/\"\n    expectedTeamID=\"JLMPQHK86H\"\n    ;;\nthonny)\n    name=\"Thonny\"\n    type=\"pkg\"\n    downloadURL=\"$(downloadURLFromGit thonny thonny)\"\n    appNewVersion=\"$(versionFromGit thonny thonny)\"\n    expectedTeamID=\"2SA9D4CVU8\"\n    ;;\nthunderbird)\n    name=\"Thunderbird\"\n    type=\"dmg\"\n    downloadURL=\"https://download.mozilla.org/?product=thunderbird-latest&os=osx&lang=en-US\"\n    appNewVersion=$(curl -fsL \"https://www.thunderbird.net/en-US/thunderbird/releases/\" | xmllint --html --xpath 'string(//aside/a[last()]/text())' - 2> /dev/null)\n    expectedTeamID=\"43AQ936H96\"\n    ;;\nthunderbird_intl)\n    # This label will try to figure out the selected language of the user,\n    # and install corrosponding version of Thunderbird\n    name=\"Thunderbird\"\n    type=\"dmg\"\n    userLanguage=$(if [ -e \"/Applications/${name}.app/Contents/Resources/locale.ini\" ]; then tail -1 \"/Applications/${name}.app/Contents/Resources/locale.ini\" | grep \"locale=\" | awk -F'=' '{ print $2 }'; else runAsUser defaults read .GlobalPreferences AppleLocale | tr '_' '-'; fi)\n    printlog \"Found language $userLanguage to be used for $name.\"\n    releaseURL=\"https://ftp.mozilla.org/pub/thunderbird/releases/latest/README.txt\"\n    until curl -fs $releaseURL | grep -q \"=$userLanguage\"; do\n        if [ ${#userLanguage} -eq 2 ]; then\n            break\n        fi\n        printlog \"No locale matching '$userLanguage', trying '${userLanguage:0:2}'\"\n        userLanguage=${userLanguage:0:2}\n    done\n    printlog \"Using language '$userLanguage' for download.\"\n    downloadURL=\"https://download.mozilla.org/?product=thunderbird-latest&os=osx&lang=$userLanguage\"\n    if ! curl -sfL --output /dev/null -r 0-0 $downloadURL; then\n        printlog \"Download not found for '$userLanguage', using default ('en-US').\"\n        downloadURL=\"https://download.mozilla.org/?product=thunderbird-latest&os=osx\"\n    fi\n    appNewVersion=$(curl -fsIL $downloadURL | awk -F releases/ '/Location:/ {split($2,a,\"/\"); print a[1]}')\n    expectedTeamID=\"43AQ936H96\"\n    blockingProcesses=( thunderbird )\n    ;;\nticktick)\n    # TickTick is a x-platform ToDo-app for groups/teams, see https://ticktick.com\n    name=\"TickTick\"\n    type=\"dmg\"\n    downloadURL=\"https://ticktick.com/down/getApp/download?type=mac\"\n    appNewVersion=\"$(curl -fsIL \"$downloadURL\" | grep -Ei \"^location\" | cut -d \"_\" -f2)\"\n    expectedTeamID=\"75TY9UT8AY\"\n    ;;\ntidal)\n    name=\"TIDAL\"\n    type=\"dmg\"\n    downloadURL=\"https://download.tidal.com/desktop/TIDAL.dmg\"\n    appNewVersion=$(curl -fs https://update.tidal.com/updates/latest\\?v\\=1 | cut -d '\"' -f4 | sed -E 's/https.*\\/TIDAL\\.([0-9.]*)\\.zip/\\1/g')\n    expectedTeamID=\"GK2243L7KB\"\n    ;;\ntodoist)\n    name=\"Todoist\"\n    type=\"dmg\"\n    downloadURL=\"https://todoist.com/mac_app\"\n    appNewVersion=\"$(curl -fsIL https://todoist.com/mac_app | grep -i ^location | sed -E 's/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g')\"\n    expectedTeamID=\"S3DD273774\"\n    ;;\ntoggltrack)\n    name=\"Toggl Track\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit toggl-open-source toggldesktop )\n    appNewVersion=$(versionFromGit toggl-open-source toggldesktop )\n    expectedTeamID=\"B227VTMZ94\"\n    ;;\ntom4aconverter)\n     name=\"To M4A Converter\"\n     type=\"dmg\"\n     downloadURL=\"https://amvidia.com/downloads/to-m4a-converter-mac.dmg\"\n     appNewVersion=$(curl -sf \"https://amvidia.com/to-m4a-converter\" | grep -o -E '\"softwareVersion\":.'\"{8}\" | sed 's/\\\"//g' | awk -F ': ' '{print $2}')\n     expectedTeamID=\"F2TH9XX9CJ\"\n     ;;\ntorbrowser)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"Tor Browser\"\n    type=\"dmg\"\n    downloadURL=https://www.torproject.org$(curl -fs https://www.torproject.org/download/ | grep \"downloadLink\" | grep dmg | head -1 | cut -d '\"' -f 4)\n    appNewVersion=$(curl -fs https://www.torproject.org/download/ | grep \"downloadLink\" | grep dmg | head -1 | cut -d '\"' -f 4 | cut -d / -f 4)\n    expectedTeamID=\"MADPSAYN6T\"\n    ;;\ntower)\n    name=\"Tower\"\n    type=\"zip\"\n    downloadURL=\"https://www.git-tower.com/updates/tower3-mac/stable/releases/latest/download\"\n    appNewVersion=\"$(curl -s https://www.git-tower.com/updates/tower3-mac/stable/releases | grep -m1 -o '<h2>[^<]*</h2>' | sed 's/<h2>\\(.*\\)<\\/h2>/\\1/' | awk '{print $1}')\"\n    expectedTeamID=\"UN97WY764J\"\n    ;;\ntransfer)\n    name=\"Transfer\"\n    type=\"dmg\"\n    downloadURL=\"https://www.intuitibits.com/products/transfer/download\"\n    appNewVersion=$(curl -fs \"https://www.intuitibits.com/appcasts/transfercast.xml\" | xpath '(//rss/channel/item/sparkle:shortVersionString)[1]' 2>/dev/null | cut -d \">\" -f2 | cut -d \"<\" -f1)\n    expectedTeamID=\"2B9R362QNU\"\n    ;;\ntransmit5)\n    name=\"Transmit\"\n    type=\"zip\"\n    downloadURL=\"https://download.panic.com/transmit/Transmit-5-Latest.zip\"\n    appNewVersion=\"$(curl -fsI \"https://download.panic.com/transmit/Transmit-5-Latest.zip\" | grep -i \"^location\" | sed -E 's/.*Transmit%20([0-9]+(\\.[0-9]+)*)\\.zip/\\1/' | tr -d '\\r')\"\n    expectedTeamID=\"VE8FC488U5\"\n    ;;\n\ntrapcode)\n    name=\"Trapcode Suite\"\n    type=\"zip\"\n    appCustomVersion(){\n      ls \"/Users/Shared/Red Giant/uninstall\" | grep trapcode | grep -Eo \"202[0-9]+\\.[0-9]+\\.[0-9]+\" | sort -gru | head -n 1\n    }\n    for i in {1..5}; do\n      appNewVersion=$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.maxon.net/hc/en-us/sections/13336955539228-Red-Giant\" | grep -i \"Trapcode\" | grep -Eo \"([0-9][0-9][0-9][0-9]\\.[0-9]+(\\.[0-9])?)\" | sort -gru | head -n 1)\n      if [[ -n $appNewVersion ]]; then break; else sleep 1; fi\n    done\n    downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/installer/macos/redgiant/trapcode/releases/${appNewVersion}/TrapcodeSuite-${appNewVersion}_Mac.zip\"\n    trapcodeResponse=$(curl -s -I -L \"$downloadURL\")\n    trapcodeHttpStatus=$(echo \"$trapcodeResponse\" | head -n 1 | cut -d ' ' -f 2)\n    if [[ \"trapcodeHttpStatus\" == \"200\" ]]; then\n      printlog \"DownloadURL HTTP status code: $trapcodeHttpStatus\" INFO\n    elif [[ \"$trapcodeHttpStatus\" == \"404\" ]]; then\n      downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/installer/macos/redgiant/trapcode/releases/${appNewVersion}/TrapcodeSuite-${appNewVersion}_mac.zip\"\n      printlog \"Had to change DownloadURL due HTTP Status.\" INFO\n    else\n      printlog \"Unexpected HTTP status code: $trapcodeHttpStatus\" ERROR\n    fi\n    installerTool=\"Trapcode Suite Installer.app\"\n    CLIInstaller=\"Trapcode Suite Installer.app/Contents/MacOS/Trapcode Suite Installer\"\n    expectedTeamID=\"4ZY22YGXQG\"\n    ;;\ntrex)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"TRex\"\n    type=\"zip\"\n    downloadURL=$(downloadURLFromGit amebalabs TRex)\n    appNewVersion=$(versionFromGit amebalabs TRex)\n    expectedTeamID=\"X93LWC49WV\"\n    ;;\ntunnelbear)\n    name=\"TunnelBear\"\n    type=\"zip\"\n    downloadURL=\"https://s3.amazonaws.com/tunnelbear/downloads/mac/TunnelBear.zip\"\n    expectedTeamID=\"P2PHZ9K5JJ\"\n    ;;\ntunnelblick)\n    name=\"Tunnelblick\"\n    type=\"dmg\"\n    version_plus_build=$(curl -sf https://github.com/Tunnelblick/Tunnelblick/releases  | grep -B2 'Pre-release' |grep -m 1 \"/Tunnelblick/Tunnelblick/releases/tag/\" | sed -r 's/.*Tunnelblick ([^<]+).*/\\1/' | awk '{gsub(/ /,\"_\"); gsub(/\\(|\\)/,\"\"); print}')\n    appNewVersion=$version_plus_build\n    version=$(echo $version_plus_build | awk -F_ '{print $1}')\n    downloadURL=\"https://github.com/Tunnelblick/Tunnelblick/releases/download/v${version}/Tunnelblick_${version_plus_build}.dmg\"\n    expectedTeamID=\"Z2SG5H3HC8\"\n    ;;\ntuple)\n    name=\"Tuple\"\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://d32ifkf9k9ezcg.cloudfront.net/production/sparkle/appcast.xml\" | grep -o 'https://d32ifkf9k9ezcg.cloudfront.net/[^\"]*.zip' | head -n 1)\n    appNewVersion=$(curl -fs \"https://d32ifkf9k9ezcg.cloudfront.net/production/sparkle/appcast.xml\" | grep -o 'sparkle:shortVersionString=\"[^\"]*\"' | sed -E 's/sparkle:shortVersionString=\"([^\"]*)\"/\\1/' | head -n 1)\n    expectedTeamID=\"DQYU7DR9Q7\"\n    ;;\ntypeface)\n    name=\"Typeface\"\n    type=\"dmg\"\n    downloadURL=\"https://dcdn.typefaceapp.com/latest\"\n    appNewVersion=$(curl -fs https://dcdn.typefaceapp.com/appcast.xml | xpath '//rss/channel/item[1]/sparkle:shortVersionString /text()' 2>/dev/null )\n    expectedTeamID=\"X55SP58WS6\"\n    ;;\ntypinator)\n    name=\"Typinator\"\n    type=\"zip\"\n    downloadURL=https://update.ergonis.com/downloads/products/typinator/Typinator.app.zip\n    appNewVersion=\"$(curl -fs https://update.ergonis.com/vck/typinator.xml | grep -i Program_Version | sed \"s|.*>\\(.*\\)<.*|\\\\1|\")\"\n    expectedTeamID=\"TU7D9Y7GTQ\"\n    ;;\ntypora)\n    name=\"Typora\"\n    type=\"dmg\"\n    #downloadURL=\"https://www.typora.io/download/Typora.dmg\"\n    downloadURL=$(curl -fs \"https://www.typora.io/download/dev_update.xml\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f2)\n    #appNewVersion=\"$(curl -fs \"https://www.typora.io/dev_release.html\" | grep -o -i \"h4>[0-9.]*</h4\" | head -1 | sed -E 's/.*h4>([0-9.]*)<\\/h4.*/\\1/')\"\n    appNewVersion=$(curl -fs \"https://www.typora.io/download/dev_update.xml\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f2)\n    expectedTeamID=\"9HWK5273G4\"\n    ;;\nuaconnect)\n    name=\"UA Connect\"\n    type=\"dmg\"\n    downloadURL=\"https://www.uaudio.com/apps/uaconnect/mac/installer\"\n    appNewVersion=\"$(curl -Ifs \"$downloadURL\" | grep 'location:' | cut -d'_' -f4-6 | tr '_' '.')\"\n    expectedTeamID=\"4KAC9AX6CG\"\n    ;;\nultimakercura)\n    name=\"Ultimaker Cura\"\n    type=\"dmg\"\n    if [[ $(arch) == \"arm64\" ]]; then\n        archiveName=\"UltiMaker-Cura-[0-9.]*-macos-ARM64.dmg\"\n    elif [[ $(arch) == \"i386\" ]]; then\n        archiveName=\"UltiMaker-Cura-[0-9.]*-macos-X64.dmg\"\n    fi\n    downloadURL=\"$(downloadURLFromGit Ultimaker Cura)\"\n    appNewVersion=$(versionFromGit Ultimaker Cura )\n    expectedTeamID=\"V4B3JXRRQS\"\n    ;;\numbrellaroamingclient)\n    # credit: Tadayuki Onishi (@kenchan0130)\n    name=\"Umbrella Roaming Client\"\n    type=\"pkgInZip\"\n    downloadURL=https://disthost.umbrella.com/roaming/upgrade/mac/production/$( curl -fsL https://disthost.umbrella.com/roaming/upgrade/mac/production/manifest.json | awk -F '\"' '/\"downloadFilename\"/ { print $4 }' )\n    expectedTeamID=\"7P7HQ8H646\"\n    ;;\nuniconverter)\n    # credit: Gabe Marchan (gabemarchan.com - @darklink87)\n    name=\"Wondershare UniConverter\"\n    type=\"dmg\"\n    downloadURL=\"http://download.wondershare.com/video-converter-ultimate-mac_full735.dmg\"\n    expectedTeamID=\"YZC2T44ZDX\"\n    ;;\nuniversaltypeclient)\n    name=\"Universal Type Client\"\n    type=\"pkgInZip\"\n    #packageID=\"com.extensis.UniversalTypeClient.universalTypeClient70.Info.pkg\" # Does not contain the real version of the download\n    downloadURL=https://bin.extensis.com/$( curl -fs https://www.extensis.com/support/universal-type-server-7/ | grep -o \"UTC-[0-9].*M.zip\" )\n    expectedTeamID=\"J6MMHGD9D6\"\n    ;;\nunnaturalscrollwheels)\n    name=\"UnnaturalScrollWheels\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit ther0n UnnaturalScrollWheels)\"\n    appNewVersion=\"$(versionFromGit ther0n UnnaturalScrollWheels)\"\n    expectedTeamID=\"D6H5W2T379\"\n    blockingProcesses=( UnnaturalScrollWheels )\n    ;;\nutm)\n    name=\"UTM\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit utmapp UTM )\n    appNewVersion=$(versionFromGit utmapp UTM )\n    expectedTeamID=\"WDNLXAD4W8\"\n    ;;\nvagrant)\n    name=\"Vagrant\"\n    type=\"pkgInDmg\"\n    pkgName=\"vagrant.pkg\"\n    cpu_arch=\"${$(arch)/i386/amd64}\"\n    downloadURL=$(curl -fsL \"https://developer.hashicorp.com/vagrant/downloads\" | grep -oE 'https[^\"]*'$cpu_arch'[^\"]*.dmg' | head -1)\n    appNewVersion=$( echo $downloadURL | cut -d \"/\" -f5 )\n    expectedTeamID=\"D38WU7D763\"\n    ;;\nvanilla)\n    name=\"Vanilla\"\n    type=\"dmg\"\n    downloadURL=\"https://macrelease.matthewpalmer.net/Vanilla.dmg\"\n    expectedTeamID=\"Z4JV2M65MH\"\n    ;;\nventurablocker)\n    name=\"venturablocker\"\n    type=\"pkg\"\n    packageID=\"dk.envo-it.venturablocker\"\n    downloadURL=$(downloadURLFromGit Theile venturablocker )\n    appNewVersion=$(versionFromGit Theile venturablocker )\n    expectedTeamID=\"FXW6QXBFW5\"\n    ;;\nveracrypt)\n    name=\"VeraCrypt\"\n    type=\"pkgInDmg\"\n    #downloadURL=$(curl -s -L \"https://www.veracrypt.fr/en/Downloads.html\" | grep -Eio 'href=\"https://launchpad.net/veracrypt/trunk/(.*)/&#43;download/VeraCrypt_([0-9].*).dmg\"' | cut -c7- | sed -e 's/\"$//' | sed \"s/&#43;/+/g\")\n    downloadURL=$(curl -fs \"https://www.veracrypt.fr/en/Downloads.html\" | grep \"https.*\\.dmg\" | grep -vi \"legacy\" | tr '\"' '\\n' | grep \"^https.*\" | grep -vi \".sig\" | sed \"s/&#43;/+/g\")\n    appNewVersion=$( echo \"${downloadURL}\" | sed -E 's/.*\\/[a-zA-Z]*_([0-9.]*.*)\\.dmg/\\1/g' )\n    expectedTeamID=\"Z933746L2S\"\n    ;;\nvfx)\n    name=\"VFX Suite\"\n    type=\"zip\"\n    appCustomVersion(){\n      ls \"/Users/Shared/Red Giant/uninstall\" | grep vfx | grep -Eo \"202[0-9]+\\.[0-9]+\\.[0-9]+\" | head -n 30 | sort -gru\n    }\n    appNewVersion=\"$(curl -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" -fs \"https://support.maxon.net/hc/en-us/sections/4406405445394-VFX-Suite\" | grep \"#icon-star\" -B3 | grep -Eo \"202[0-9]+\\.[0-9]+\\.[0-9]+\" | head -n 30 | sort -gru)\"\n    downloadURL=\"https://mx-app-blob-prod.maxon.net/mx-package-production/installer/macos/redgiant/vfx/releases/${appNewVersion}/VfxSuite-${appNewVersion}_Mac.zip\"\n    installerTool=\"VFX Suite Installer.app\"\n    CLIInstaller=\"VFX Suite Installer.app/Contents/Scripts/install.sh\"\n    CLIArguments=()\n    expectedTeamID=\"4ZY22YGXQG\"\n    ;;\nvimac)\n    name=\"Vimac\"\n    type=\"zip\"\n    downloadURL=$(curl -fs \"https://vimacapp.com/latest-release-metadata\" | tr ',' '\\n' | awk -F\\\" '/download_url/ {print $4}')\n    appNewVersion=$(curl -fs \"https://vimacapp.com/latest-release-metadata\" | tr ',' '\\n' | awk -F\\\" '/short_version/ {print $4}')\n    expectedTeamID=\"LQ2VH8VB84\"\n    ;;\nvirtualbox)\n    # credit: AP Orlebeke (@apizz)\n    name=\"VirtualBox\"\n    type=\"pkgInDmg\"\n    pkgName=\"VirtualBox.pkg\"\n    downloadURL=\"https:$(curl -fsL \"https://www.oracle.com/virtualization/technologies/vm/downloads/virtualbox-downloads.html\" | grep \"OSX.dmg\" | xmllint --html --xpath 'string(//a/@href)' -)\"\n    appNewVersion=$(echo \"${downloadURL}\" | awk -F '/' '{print $5}')\n    expectedTeamID=\"VB5E2TV963\"\n    ;;\nvirtualbuddy)\n    name=\"VirtualBuddy\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit insidegui VirtualBuddy)\n    appNewVersion=$(versionFromGit insidegui VirtualBuddy)\n    expectedTeamID=\"8C7439RJLG\"\n    ;;\nviscosity)\n    #credit: @matins\n    name=\"Viscosity\"\n    type=\"dmg\"\n    downloadURL=\"https://www.sparklabs.com/downloads/Viscosity.dmg\"\n    appNewVersion=$( curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | awk '{print $2}' | sed -E 's/.*\\/[a-zA-Z.\\-]*%20([0-9.]*)\\..*/\\1/g' )\n    expectedTeamID=\"34XR7GXFPX\"\n    ;;\nvisualz)\n    name=\"Visualz\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit madchops1 visualz-releases)\"\n    appNewVersion=\"$(versionFromGit madchops1 visualz-releases)\"\n    expectedTeamID=\"6RLU6426R3\"\n    ;;\nvivaldi)\n    name=\"Vivaldi\"\n    type=\"tbz\"\n    downloadURL=$(curl -fsL \"https://update.vivaldi.com/update/1.0/public/mac/appcast.xml\" | xpath '//rss/channel/item[1]/enclosure/@url' 2>/dev/null  | cut -d '\"' -f 2)\n    appNewVersion=$(curl -is \"https://update.vivaldi.com/update/1.0/public/mac/appcast.xml\" | grep sparkle:version | tr ',' '\\n' | grep sparkle:version | cut -d '\"' -f 4)\n    expectedTeamID=\"4XF3XNRN6Y\"\n    ;;\nvivi)\n    name=\"Vivi\"\n    type=\"pkg\"\n    packageID=\"au.com.viviaustralia.mac\"\n    appNewVersion=$(curl -fsIL https://api.vivi.io/mac | grep -i \"^location\" | awk \"{print $2}\" | sed -E \"s/.*\\/[a-zA-Z]*-([0-9.]*)\\..*/\\1/g\")\n    downloadURL=$(curl -sf https://api.vivi.io/mac | grep -o '<a .*href=.*>' | sed -e 's/<a /\\n<a /g' | sed -e 's/<a .*href=['\"'\"'\"]//' -e 's/[\"'\"'\"'].*$//' -e '/^$/ d')\n    pkgName=$(echo Vivi-\"$appNewVersion\".pkg)\n    expectedTeamID=\"3NRCUJ8TJC\"\n    ;;\nvlc)\n    # VLC is a versatile, open-source multimedia player that supports a wide range of audio, video, and streaming formats across multiple platforms\n    name=\"VLC\"\n    type=\"dmg\"\n    appNewVersion=$(curl -s https://www.videolan.org/vlc/#download | xmllint --html --xpath \"//script[contains(text(),'var PLATFORMS')]\" - 2>/dev/null | grep -o '\"osx\":{\"name\":\"macOS[^}]*' | grep -o '\"latestVersion\":\"[^\"]*' | sed 's/\"latestVersion\":\"//')\n    downloadURL=\"https://get.videolan.org/vlc/$appNewVersion/macosx/vlc-$appNewVersion-universal.dmg\"\n    expectedTeamID=\"75GAHG3SZQ\"\n    ;;\nvmwarefusion)\n    name=\"VMware Fusion\"\n    type=\"dmg\"\n    downloadURL=\"https://www.vmware.com/go/getfusion\"\n    curlOptions=(-H \"Accept: */*\" -H \"Accept-Encoding: gzip, deflate\" -H \"Connection: keep-alive\" -H \"Host: www.vmware.com\" -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\")\n    appNewVersion=$(curl -fsIL ${curlOptions} \"https://www.vmware.com/go/getfusion\" | grep -i \"^location\" | awk '{print $2}' | sed 's/.*-\\(.*\\)-.*/\\1/')\n    expectedTeamID=\"EG7KH642X6\"\n    ;;\nvmwarehorizonclient)\n    name=\"VMware Horizon Client\"\n    type=\"pkgInDmg\"\n    downloadGroup=$(curl -fsL \"https://my.vmware.com/channel/public/api/v1.0/products/getRelatedDLGList?locale=en_US&category=desktop_end_user_computing&product=vmware_horizon_clients&version=horizon_8&dlgType=PRODUCT_BINARY\" | grep -o '[^\"]*_MAC_[^\"]*')\n    fileName=$(curl -fsL \"https://my.vmware.com/channel/public/api/v1.0/dlg/details?locale=en_US&category=desktop_end_user_computing&product=vmware_horizon_clients&dlgType=PRODUCT_BINARY&downloadGroup=${downloadGroup}\" | grep -o '\"fileName\":\"[^\"]*\"' | cut -d: -f2 | sed 's/\"//g')\n    downloadURL=\"https://download3.vmware.com/software/$downloadGroup/${fileName}\"\n    appNewVersion=$(curl -fsL \"https://my.vmware.com/channel/public/api/v1.0/dlg/details?locale=en_US&downloadGroup=${downloadGroup}\" | grep -o '[^\"]*\\.dmg[^\"]*' | sed 's/.*-\\(.*\\)-.*/\\1/')\n    expectedTeamID=\"EG7KH642X6\"\n    ;;\nvonagebusiness)\n    # @BigMacAdmin (Second Son Consulting) with assists from @Isaac, @Bilal, and @Theilgaard\n    name=\"Vonage Business\"\n    type=\"dmg\"\n    downloadURL=\"https://vbc-downloads.vonage.com/mac/VonageBusinessSetup.dmg\"\n    expectedTeamID=\"E37FZSUGQP\"\n    archiveName=\"VonageBusinessSetup.dmg\"\n    appName=\"Vonage Business.app\"\n    blockingProcesses=( \"Vonage Business\" )\n    curlOptions=( -L -O --compressed )\n    appNewVersion=$(curl -fs \"https://s3.amazonaws.com/vbcdesktop.vonage.com/prod/mac/latest-mac.yml\" | grep -i version | cut -w -f2)\n    ;;\nvpntracker365)\n\t#credit BigMacAdmin @ Second Son Consulting\n\tname=\"VPN Tracker 365\"\n\ttype=\"zip\"\n\tdownloadURL=\"https://www.vpntracker.com/goto/HPdownload/VPNT365Latest\"\n\tappNewVersion=\"$(curl -fsIL ${downloadURL}  | grep -i ^location | grep -i \".zip\" | tail -1 | sed 's/.*VPN Tracker 365 - //g'| awk '{print $1}')\"\n\texpectedTeamID=\"MJMRT6WJ8S\"\n\tblockingProcesses=( \"VPN Tracker 365\" )\n\t;;\nvscodium)\n    name=\"VSCodium\"\n    type=\"dmg\"\n    downloadURL=\"$(downloadURLFromGit VSCodium vscodium)\"\n    appNewVersion=\"$(versionFromGit VSCodium vscodium)\"\n    expectedTeamID=\"VC39D2VNQ7\"\n    blockingProcesses=( Electron )\n    ;;\nvysor)\n    name=\"Vysor\"\n    type=\"zip\"\n    downloadURL=\"$(downloadURLFromGit koush vysor.io)\"\n    appNewVersion=\"$(versionFromGit koush vysor.io)\"\n    expectedTeamID=\"XT4C9EJNUG\"\n    ;;\nwacomdrivers)\n    name=\"Wacom Desktop Center\"\n    type=\"pkgInDmg\"\n    downloadURL=\"$(curl -fs https://www.wacom.com/en-us/support/product-support/drivers | grep -e \"drivers/mac/professional.*dmg\" | head -1 | tr '\"' \"\\n\" | grep -i http)\"\n    expectedTeamID=\"EG27766DY7\"\n    #pkgName=\"Install Wacom Tablet.pkg\"\n    appNewVersion=\"$(curl -fs https://www.wacom.com/en-us/support/product-support/drivers | grep mac/professional/releasenotes | head -1 | tr '\"' \"\\n\" | grep -e \"Driver [0-9][-0-9.]*\" | sed -E 's/Driver ([-0-9.]*).*/\\1/g')\"\n    ;;\nwallyezflash)\n    name=\"Wally\"\n    type=\"dmg\"\n    downloadURL=\"https://configure.zsa.io/wally/osx\"\n    # 2022-02-07: Info.plist is totally wrong defined and contains no version information\n    #appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i ^location | head -1 | sed -E 's/.*\\/[a-zA-Z\\-]*-([0-9.]*)\\..*/\\1/g')\n    expectedTeamID=\"V32BWKSNYH\"\n    #versionKey=\"CFBundleVersion\"\n    ;;\nweasis)\n    name=\"Weasis\"\n    type=\"pkg\"\n    packageID=\"org.weasis.launcher\"\n    downloadURL=\"$(downloadURLFromGit nroduit Weasis)\"\n    appNewVersion=\"$(versionFromGit nroduit Weasis)\"\n    expectedTeamID=\"T52M998N47\"\n    ;;\nwebex|\\\nwebexteams)\n    # credit: Erik Stam (@erikstam)\n    name=\"Webex\"\n    type=\"dmg\"\n    appNewVersion=$(curl -fs https://help.webex.com/en-us/article/8dmbcr/Webex-App-%7C-What%27s-New | tr '\"' \"\\n\" |  grep \"Mac—\"| head -1|sed 's/[^0-9\\.]//g' )\n    blockingProcesses=( \"Webex\" \"Webex Teams\" \"Cisco WebEx Start\" \"WebexHelper\")\n    if [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://binaries.webex.com/WebexDesktop-MACOS-Apple-Silicon-Gold/Webex.dmg\"\n    elif [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://binaries.webex.com/WebexTeamsDesktop-MACOS-Gold/Webex.dmg\"\n    fi\n    expectedTeamID=\"DE8Y96K9QP\"\n    ;;\nwebexmeetings)\n    # credit: Erik Stam (@erikstam)\n    name=\"Cisco Webex Meetings\"\n    type=\"pkgInDmg\"\n    downloadURL=\"https://akamaicdn.webex.com/client/webexapp.dmg\"\n    expectedTeamID=\"DE8Y96K9QP\"\n    targetDir=\"/Applications\"\n    #blockingProcessesMaxCPU=\"5\"\n    blockingProcesses=( Webex )\n    ;;\nwebextoolsremoval)\n    name=\"WebEx Tools Removal\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.remove.WebExPT\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*WebExPT_Removal.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nwechat)\n    name=\"WeChat\"\n    type=\"dmg\"\n    downloadURL=\"https://dldir1.qq.com/weixin/mac/WeChatMac.dmg\"\n    expectedTeamID=\"5A4RE8SF68\"\n    ;;\nweprint)\n    name=\"Print\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://it-assets.s3.amazonaws.com/print-by-we/Print-By-We-Mac-Installer.zip\"\n    appNewVersion=\"\"\n    expectedTeamID=\"2D42ACMA8R\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nwhatroute)\n    name=\"WhatRoute\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs https://www.whatroute.net/whatroute2appcast.xml | xpath '(//rss/channel/item/enclosure/@url)' 2>/dev/null | cut -d '\"' -f 2)\"\n    appNewVersion=\"$(curl -fs \"https://www.whatroute.net/whatroute2appcast.xml\" | xpath '(//rss/channel/item/sparkle:shortVersionString)' 2>/dev/null | cut -d \">\" -f2 | cut -d \"<\" -f1)\"\n    expectedTeamID=\"H5879E8LML\"\n    ;;\nwhatsapp)\n    name=\"WhatsApp\"\n    type=\"dmg\"\n    downloadURL=\"https://web.whatsapp.com/desktop/mac_native/release/?configuration=Release\"\n    appNewVersion=$(curl -fsLIXGET \"https://web.whatsapp.com/desktop/mac_native/release/?configuration=Release\" | grep -i \"^location\" | grep -m 1 -o \"WhatsApp-.*dmg\" | sed 's/.*WhatsApp-2.//g' | sed 's/.dmg//g')\n    expectedTeamID=\"57T9237FN3\"\n    ;;\nwireshark)\n    name=\"Wireshark\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n      sparkleFeedURL=\"https://www.wireshark.org/update/0/Wireshark/4.0.0/macOS/x86-64/en-US/stable.xml\"\n    elif [[ $(arch) == arm64 ]]; then\n      sparkleFeedURL=\"https://www.wireshark.org/update/0/Wireshark/4.0.0/macOS/arm64/en-US/stable.xml\"\n    fi\n    sparkleFeed=$(curl -fs \"$sparkleFeedURL\")\n    appNewVersion=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    downloadURL=$(echo \"$sparkleFeed\" | xpath '(//rss/channel/item/enclosure/@url)[1]' 2>/dev/null | cut -d '\"' -f 2)\n    expectedTeamID=\"7Z6EMTD2C6\"\n    ;;\nwordservice)\n    name=\"WordService\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" \"https://www.devontechnologies.com/support/download\" | tr '\"' \"\\n\" | grep -o \"http.*download.*.zip\" | grep -i wordservice | head -1)\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*\\/([0-9.]*)\\/.*/\\1/g')\"\n    appNewVersion=\"\"\n    expectedTeamID=\"679S2QUWR8\"\n    ;;\nworkbrew)\n    name=\"Workbrew\"\n    type=\"pkg\"\n    packageID=\"com.workbrew.Workbrew\"\n    downloadURL=\"https://console.workbrew.com/downloads/macos\"\n    appNewVersion=\"$(curl -ifs \"https://console.workbrew.com/downloads/macos\" | grep -o \"Workbrew-[0-9].[0.9].[0-9][0-9].pkg\" | grep -o \"[0-9].[0.9].[0-9][0-9]\")\"\n    appCustomVersion(){ /opt/workbrew/bin/brew --version | grep \"Workbrew \" | awk '{ print $2 }' | cut -d'-' -f1 }\n    expectedTeamID=\"676JW3JDLF\"\n    ;;\nworkplacechat)\n    name=\"Workplace Chat\"\n    type=\"dmg\"\n    curlOptions=( -H \"User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.1 Safari/605.1.15\" )\n    downloadPage=$(curl -s \"https://www.workplace.com/resources/tech/it-configuration/download-workplace-chat\")\n    downloadURL=$(echo \"$downloadPage\" | grep -oE 'https://[^\"]+\\.dmg[^\"]+\"' | head -n 1 | sed 's/\"$//' | sed 's/&amp;/\\&/g')\n    appNewVersion=$(echo \"$downloadPage\" | grep -oE '<td class=\"_3-mi\">[0-9.]+<\\/td>' | head -n 1 | sed -E 's/<\\/?[^>]+>//g')\n    expectedTeamID=\"V9WTTPBFK9\"\n    ;;\nwrikeformac)\n#Il faut chercher une solution pour DL la version ARM\n    name=\"Wrike for Mac\"\n    type=\"dmg\"\n    appNewVersion=\"4.0.6\"\n    if [[ $(arch) == i386 ]]; then\n        #downloadURL=\"https://dl.wrike.com/download/WrikeDesktopApp.latest.dmg\"      # valide pour arch i386\n        downloadURL=\"https://dl.wrike.com/download/WrikeDesktopApp.v${appNewVersion}.dmg\"      # pour la coherence avec silicon, on hardcode le numéro de vesrion\n    elif [[ $(arch) == arm64 ]]; then\n        #downloadURL=\"https://dl.wrike.com/download/WrikeDesktopApp_ARM.latest.dmg\"  # ne marche pas avec latest, il faut obligatoirement un numéro de version précis\n        downloadURL=\"https://dl.wrike.com/download/WrikeDesktopApp_ARM.v${appNewVersion}.dmg\"\n    fi\n    expectedTeamID=\"BD3YL53XT4\"\n    ;;\nwwdc)\n    # credit: Søren Theilgaard (@theilgaard)\n    name=\"WWDC\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit insidegui WWDC)\n    appNewVersion=$(versionFromGit insidegui WWDC)\n    expectedTeamID=\"8C7439RJLG\"\n    ;;\nxbar)\n    name=\"xbar\"\n    type=\"dmg\"\n    downloadURL=$(downloadURLFromGit matryer xbar)\n    appNewVersion=$(versionFromGit matryer xbar)\n    expectedTeamID=\"N3H5B92L5N\"\n    ;;\nxcreds)\n    name=\"XCreds\"\n    # Downloading from twocanoes homepage\n    type=\"pkg\"\n    #packageID=\"com.twocanoes.pkg.secureremoteaccess\"\n    downloadURL=\"https://twocanoes-software-updates.s3.amazonaws.com/XCreds.pkg\"\n    appNewVersion=$(curl -fs \"https://twocanoes.com/products/mac/xcreds/history/\" | grep -A1 \"<h3>Change Log</h3>\" | sed -n 's/.*<h4>Version \\(.*\\) Build.*/\\1/p')\n    # GitHub download\n    # type=\"pkg\"\n    # downloadURL=\"$(downloadURLFromGit twocanoes xcreds)\"\n    # appNewVersion=\"$(versionFromGit twocanoes xcreds)\" # GitHub tag contain “_” and not “.” so our function fails to get the right version\n    # appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*XCreds_.*-([0-9.]*)\\.pkg/\\1/')\n    expectedTeamID=\"UXP6YEHSPW\"\n    ;;\nxeroxphaser7800)\n    name=\"XeroxPhaser\"\n    type=\"pkgInDmg\"\n    downloadURL=$(curl -fs \"https://www.support.xerox.com/en-us/product/phaser-7800/downloads?platform=macOS14\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*XeroxDrivers.*.dmg\")\n    expectedTeamID=\"G59Y3XFNFR\"\n    ;;\nxeroxprintandscan|\\\nxeroxworkcentre7800)\n    name=\"XeroxWorkCentre\"\n    type=\"pkgInDmg\"\n    appCustomVersion(){ lpinfo -m | grep 783 | tail -n 1 | awk -F ', ' '{print $2}' }\n    appNewVersion=$( curl -fsL \"https://www.support.xerox.com/nl-nl/product/workcentre-7800-series/downloads?platform=macOS14\" | grep .dmg | head -n 1 | awk -F '_' '{print $2}' )\n    downloadURL=$( curl -fsL \"https://www.support.xerox.com/nl-nl/product/workcentre-7800-series/downloads?platform=macOS14\" | xmllint --html --format - 2>/dev/null | grep -o \"https://.*XeroxDrivers.*.dmg\" )\n    expectedTeamID=\"G59Y3XFNFR\"\n    blockingProcesses=( NONE )\n;;\nxink)\n    name=\"Xink\"\n    type=\"pkg\"\n    packageID=\"com.emailsignature.Xink\"\n    downloadURL=\"https://downloads.xink.io/macos/pkg\"\n    appNewVersion=$(curl -fs \"https://downloads.xink.io/macos/appcast\" | xpath '(//rss/channel/item/enclosure/@sparkle:version)[1]' 2>/dev/null | head -1 | cut -d '\"' -f 2)\n    expectedTeamID=\"F287823HVS\"\n    ;;\nxmenu)\n    name=\"XMenu\"\n    type=\"zip\"\n    downloadURL=\"$(curl -fs \"https://www.devontechnologies.com/apps/freeware\" | grep -o \"http.*download.*.zip\" | grep -i xmenu)\"\n    appNewVersion=\"$(echo $downloadURL | sed -E 's/.*\\/([0-9.]*)\\/.*/\\1/g')\"\n    expectedTeamID=\"679S2QUWR8\"\n    ;;\n\nxmind)\n    name=\"Xmind\"\n    type=\"dmg\"\n    downloadURL=\"https://xmind.app/zen/download/mac/\"\n    appNewVersion=\"$(curl -fsIL $downloadURL | grep -i \"^location\" | grep -oE 'Xmind-for-macOS-(.+?)-[0-9]+\\.dmg' | sed -E 's/Xmind-for-macOS-(.+)-[0-9]+\\.dmg/\\1/')\"\n    expectedTeamID=\"4WV38P2X5K\"\n    ;;\n\nxquartz)\n    # credit: AP Orlebeke (@apizz)\n    name=\"XQuartz\"\n    type=\"pkg\"\n    downloadURL=$(downloadURLFromGit XQuartz XQuartz)\n    appNewVersion=$(versionFromGit XQuartz XQuartz)\n    expectedTeamID=\"NA574AWV7E\"\n    ;;\nyed)\n    # This label assumes accept of these T&C’s: https://www.yworks.com/resources/yed/license.html\n    name=\"yEd\"\n    type=\"dmg\"\n    downloadURL=\"https://www.yworks.com\"$(curl -fs \"https://www.yworks.com/products/yed/download\" | grep -o -e \"/resources/.*\\.dmg\" | tr \" \" '\\n' | grep -o -e \"/resources/.*\\.dmg\")\n    appNewVersion=$(echo $downloadURL | sed -E 's/.*-([0-9.]*)_.*\\.dmg/\\1/')\n    expectedTeamID=\"JD89S887M2\"\n    ;;\nyouleanloudnessmeter2)\n    name=\"Youlean Loudness Meter 2\"\n    type=\"pkgInZip\"\n    #downloadURL=\"https://cdn.youlean.co/wp-content/uploads/2023/03/Youlean-Loudness-Meter-2-V2.4.4-macOS.zip\"\n    downloadURL=$(curl -fs \"https://youlean.co/download-youlean-loudness-meter/\" | grep macOS | grep -oE \"https:.*-macOS.zip\" | head -1)\n    appNewVersion=$(echo \"$downloadURL\" | sed -E 's/.*-V([0-9.]*)-macOS.zip/\\1/')\n    expectedTeamID=\"S7KN6P3F95\"\n    ;;\nyubicoauthenticator)\n    name=\"Yubico Authenticator\"\n    type=\"dmg\"\n    downloadURL=\"https://developers.yubico.com/yubioath-flutter/Releases/yubico-authenticator-latest-mac.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"LQA3CS5MM7\"\n    ;;\nyubikeymanager)\n    name=\"YubiKey Manager\"\n    type=\"pkg\"\n    appCustomVersion(){/usr/local/ykman/ykman -v | awk '{print $5}'}\n\tdownloadURL=$(downloadURLFromGit Yubico yubikey-manager)\n    appNewVersion=$(versionFromGit Yubico yubikey-manager)\n    expectedTeamID=\"LQA3CS5MM7\"\n    #CLI for YubikeyManager which is not installed via the QT version.\n    ;;\nyubikeymanagerqt)\n    name=\"YubiKey Manager GUI\"\n    type=\"pkg\"\n    downloadURL=\"https://developers.yubico.com/yubikey-manager-qt/Releases/yubikey-manager-qt-latest-mac.pkg\"\n    appNewVersion=$(curl -fsIL \"${downloadURL}\" | grep -i \"^location\" | grep -Eo \"[1-9][0-9\\.]*\" )\n    expectedTeamID=\"LQA3CS5MM7\"\n    ;;\nzappy)\n    name=\"Zappy\"\n    type=\"appInDmgInZip\"\n    downloadURL=\"https://zappy.zapier.com/releases/zappy-latest.zip\"\n    expectedTeamID=\"6LS97Q5E79\"\n    ;;\nzeplin)\n    name=\"Zeplin\"\n    type=\"zip\"\n    downloadURL=\"https://zpl.io/download-mac\"\n    appNewVersion=\"$(curl -fs \"https://api.appcenter.ms/v0.1/public/sparkle/apps/8926efff-e734-b6d3-03d0-9f41d90c34fc\" | xpath '(//rss/channel/item/enclosure/@sparkle:shortVersionString)[1]' 2>/dev/null | cut -d '\"' -f 2)\"\n    expectedTeamID=\"8U3Y4X5WDQ\"\n    ;;\nzerotier)\n    # credit: Michael T (PurpleComputing)\n    name=\"ZeroTier%20One\"\n    type=\"pkg\"\n    packageID=\"com.zerotier.pkg.ZeroTierOne\"\n    appNewVersion=$(versionFromGit zerotier ZeroTierOne )\n    downloadURL=\"https://download.zerotier.com/dist/ZeroTier%20One.pkg\"\n    expectedTeamID=\"8ZD9JUCZ4V\"\n    ;;\nzipwhip)\n    name=\"Zipwhip\"\n    type=\"dmg\"\n    downloadURL=\"https://s3-us-west-2.amazonaws.com/zw-app-upload/mac/master/Zipwhip-latest.dmg\"\n    appNewVersion=\"\"\n    expectedTeamID=\"96NL5642U7\"\n    ;;\nzohoworkdrive)\n# Using this label expects you to agree to these:\n# License Areemant: https://www.zoho.com/workdrive/zohoworkdrive-license-agreement.html\n# Privacy policy: https://www.zoho.com/privacy.html\n    name=\"Zoho WorkDrive\"\n    type=\"dmg\"\n    lines=$(curl -fs https://www.zohowebstatic.com/sites/all/themes/zoho/scripts/workdrive.js | grep files-accl.zohopublic.com | tr '\"' \"\\n\")\n    downloadURL=$(echo \"$lines\" | grep -i \"files-accl.zohopublic.com\")$(echo \"$lines\" | grep -i -A17 \"files-accl.zohopublic.com\" | grep -i -A2 macintosh | tail -1)\n    expectedTeamID=\"TZ824L8Y37\"\n    ;;\nzohoworkdrivegenie)\n    name=\"Zoho WorkDrive Genie\"\n    type=\"dmg\"\n    # https://www.zoho.com/workdrive/genie.html\n    downloadURL=\"https://www.zoho.com/workdrive/downloads/edit-tool/Zoho_WorkDrive_Genie.dmg\"\n    CLIInstaller=\"Zoho WorkDrive Genie.app/Contents/MacOS/Zoho WorkDrive Genie\"\n    expectedTeamID=\"TZ824L8Y37\"\n    ;;\nzohoworkdrivetruesync)\n# Using this label expects you to agree to these:\n# License Areemant: https://www.zoho.com/workdrive/zohoworkdrive-license-agreement.html\n# Privacy policy: https://www.zoho.com/privacy.html\n    name=\"Zoho WorkDrive TrueSync\"\n    type=\"pkg\"\n    #https://www.zoho.com/workdrive/truesync.html\n    downloadURL=\"https://files-accl.zohopublic.com/public/tsbin/download/c488f53fb0fe339a8a3868a16d56ede6\"\n    expectedTeamID=\"TZ824L8Y37\"\n    ;;\nzoom)\n    name=\"zoom.us\"\n    type=\"pkg\"\n    downloadURL=\"https://zoom.us/client/latest/ZoomInstallerIT.pkg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^location | cut -d \"/\" -f5)\"\n    expectedTeamID=\"BJ4HAAB9B3\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nzoomclient)\n    name=\"zoom.us\"\n    type=\"pkg\"\n    packageID=\"us.zoom.pkg.videomeeting\"\n    if [[ $(arch) == i386 ]]; then\n       downloadURL=\"https://zoom.us/client/latest/Zoom.pkg\"\n    elif [[ $(arch) == arm64 ]]; then\n       downloadURL=\"https://zoom.us/client/latest/Zoom.pkg?archType=arm64\"\n    fi\n    expectedTeamID=\"BJ4HAAB9B3\"\n    #appNewVersion=$(curl -is \"https://beta2.communitypatch.com/jamf/v1/ba1efae22ae74a9eb4e915c31fef5dd2/patch/zoom.us\" | grep currentVersion | tr ',' '\\n' | grep currentVersion | cut -d '\"' -f 4) # Does not match packageID\n    blockingProcesses=( zoom.us )\n    #blockingProcessesMaxCPU=\"5\"\n    ;;\nzoomgov)\n    name=\"zoom.us\"\n    type=\"pkg\"\n    downloadURL=\"https://www.zoomgov.com/client/latest/ZoomInstallerIT.pkg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^location | cut -d \"/\" -f5)\"\n    expectedTeamID=\"BJ4HAAB9B3\"\n    versionKey=\"CFBundleVersion\"\n    ;;\nzoomoutlookplugin)\n    name=\"Zoom Outlook Plugin\"\n    appName=\"PluginLauncher.app\"\n    targetDir=\"/Applications/ZoomOutlookPlugin\"\n    type=\"pkg\"\n    downloadURL=\"https://zoom.us/client/latest/ZoomMacOutlookPlugin.pkg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i ^location | cut -d \"/\" -f5 | cut -d \".\" -f1-3)\"\n    expectedTeamID=\"BJ4HAAB9B3\"\n    blockingProcesses=( \"PluginLauncher\" )\n    ;;\nzoomoutlookpluginremoval)\n    name=\"Zoom Outlook Plugin Removal\"\n    type=\"pkg\"\n    packageID=\"com.microsoft.remove.ZoomPlugin\"\n    downloadURL=\"https://office-reset.com\"$(curl -fs https://office-reset.com/macadmins/ | grep -o -i \"href.*\\\".*\\\"*ZoomPlugin_Removal.*.pkg\" | cut -d '\"' -f2)\n    expectedTeamID=\"QGS93ZLCU7\"\n    ;;\nzoomrooms)\n    name=\"ZoomRooms\"\n    type=\"pkg\"\n    packageID=\"us.zoom.pkg.zp\"\n    downloadURL=\"https://zoom.us/client/latest/ZoomRooms.pkg\"\n    appNewVersion=\"$(curl -fsIL ${downloadURL} | grep -i location | cut -d \"/\" -f5)\"\n    expectedTeamID=\"BJ4HAAB9B3\"\n    blockingProcesses=( \"ZoomPresence\" )\n    ;;\nzotero)\n    name=\"Zotero\"\n    type=\"dmg\"\n    downloadURL=\"https://www.zotero.org/download/client/dl?channel=release&platform=mac&version=$(curl -fs \"https://www.zotero.org/download/\" | grep -Eio '\"mac\":\"(.*)' | cut -d '\"' -f 4)\"\n    expectedTeamID=\"8LAYR367YV\"\n    appNewVersion=$(curl -fs \"https://www.zotero.org/download/\" | grep -Eio '\"mac\":\"(.*)' | cut -d '\"' -f 4)\n    #Company=\"Corporation for Digital Scholarship\"\n    ;;\nzulip)\n    name=\"Zulip\"\n    type=\"dmg\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=\"https://zulip.com/apps/download/mac\"\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=\"https://zulip.com/apps/download/mac-arm64\"\n    fi\n    appNewVersion=$(curl -fsIL \"$downloadURL\" | grep -i ^location | sed 's/.*\\/v\\(.*\\)\\/Zulip-.*/\\1/')\n    expectedTeamID=\"66KHCWMEYB\"\n    ;;\nzulujdk11)\n    name=\"Zulu JDK 11\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.11\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu11.*ca-jdk11.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu11.*ca-jdk11.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk13)\n    name=\"Zulu JDK 13\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.13\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu13.*ca-jdk13.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu13.*ca-jdk13.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk15)\n    name=\"Zulu JDK 15\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.15\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu15.*ca-jdk15.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu15.*ca-jdk15.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk17)\n    name=\"Zulu JDK 17\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.17\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu17.*ca-jdk17.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu17.*ca-jdk17.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk18)\n    name=\"Zulu JDK 18\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.18\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu18.*ca-jdk18.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu18.*ca-jdk18.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | cut -c11- | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk21)\n    name=\"Zulu JDK 21\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.21\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu21.*ca-jdk21.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort -V | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu21.*ca-jdk21.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort -V | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/zulu-21.jdk/Contents/Info.plist\" ]; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/zulu-21.jdk/Contents/Info.plist\" \"CFBundleName\" | sed 's/Zulu //'; fi }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdk8)\n    name=\"Zulu JDK 8\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulu.8\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu8.*ca-jdk8.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort -V | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu8.*ca-jdk8.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sed -E 's/([0-9.]*)M//' | awk '{print $2 $1}' | sort | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ if [ -f \"/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Info.plist\" ]; then /usr/bin/defaults read \"/Library/Java/JavaVirtualMachines/zulu-8.jdk/Contents/Info.plist\" \"CFBundleName\" | sed 's/Zulu //'; fi }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\nzulujdkfx17)\n    name=\"Zulu JDK FX 17\"\n    type=\"pkgInDmg\"\n    packageID=\"com.azulsystems.zulufx.17\"\n    if [[ $(arch) == i386 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu17.*ca-fx-jdk17.*x64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sort | tail -1)\n    elif [[ $(arch) == arm64 ]]; then\n        downloadURL=https://cdn.azul.com/zulu/bin/$(curl -fs \"https://cdn.azul.com/zulu/bin/\" | grep -Eio '\">zulu17.*ca-fx-jdk17.*aarch64.dmg(.*)' | cut -c3- | sed 's/<\\/a><\\/td>//' | sort | tail -1)\n    fi\n    expectedTeamID=\"TDTHCUPYFR\"\n    appCustomVersion(){ java -version 2>&1 | grep Runtime | awk '{print $4}' | sed -e \"s/.*Zulu//\" | cut -d '-' -f 1 | sed -e \"s/+/\\./\" }\n    appNewVersion=$(echo \"$downloadURL\" | cut -d \"-\" -f 1 | sed -e \"s/.*zulu//\") # Cannot be compared to anything\n    ;;\n*)\n    # unknown label\n    #printlog \"unknown label $label\"\n    cleanupAndExit 1 \"unknown label $label\" ERROR\n    ;;\nesac\n\n# MARK: finish reading the arguments:\nwhile [[ -n $1 ]]; do\n    if [[ $1 =~ \".*\\=.*\" ]]; then\n        # if an argument contains an = character, send it to eval\n        printlog \"setting variable from argument $1\" INFO\n        eval $1\n    fi\n    # shift to next argument\n    shift 1\ndone\n\n# verify we have everything we need\nif [[ -z $name ]]; then\n    printlog \"need to provide 'name'\" ERROR\n    exit 1\nfi\nif [[ -z $type ]]; then\n    printlog \"need to provide 'type'\" ERROR\n    exit 1\nfi\nif [[ -z $downloadURL ]]; then\n    printlog \"need to provide 'downloadURL'\" ERROR\n    exit 1\nfi\nif [[ -z $expectedTeamID ]]; then\n    printlog \"need to provide 'expectedTeamID'\" ERROR\n    exit 1\nfi\n\n# Are we only asked to return label name\nif [[ $RETURN_LABEL_NAME -eq 1 ]]; then\n    printlog \"Only returning label name.\" REQ\n    printlog \"$name\"\n    echo \"$name\"\n    exit\nfi\n\n# MARK: application download and installation starts here\n\n# Debug output of all variables in a label\nprintlog \"name=${name}\" DEBUG\nprintlog \"appName=${appName}\" DEBUG\nprintlog \"type=${type}\" DEBUG\nprintlog \"archiveName=${archiveName}\" DEBUG\nprintlog \"downloadURL=${downloadURL}\" DEBUG\nprintlog \"curlOptions=${curlOptions}\" DEBUG\nprintlog \"appNewVersion=${appNewVersion}\" DEBUG\nprintlog \"appCustomVersion function: $(if type 'appCustomVersion' 2>/dev/null | grep -q 'function'; then echo \"Defined. ${appCustomVersion}\"; else; echo \"Not defined\"; fi)\" DEBUG\nprintlog \"versionKey=${versionKey}\" DEBUG\nprintlog \"packageID=${packageID}\" DEBUG\nprintlog \"pkgName=${pkgName}\" DEBUG\nprintlog \"choiceChangesXML=${choiceChangesXML}\" DEBUG\nprintlog \"expectedTeamID=${expectedTeamID}\" DEBUG\nprintlog \"blockingProcesses=${blockingProcesses}\" DEBUG\nprintlog \"installerTool=${installerTool}\" DEBUG\nprintlog \"CLIInstaller=${CLIInstaller}\" DEBUG\nprintlog \"CLIArguments=${CLIArguments}\" DEBUG\nprintlog \"updateTool=${updateTool}\" DEBUG\nprintlog \"updateToolArguments=${updateToolArguments}\" DEBUG\nprintlog \"updateToolRunAsCurrentUser=${updateToolRunAsCurrentUser}\" DEBUG\n#printlog \"Company=${Company}\" DEBUG # Not used\n\n# NOTE: Do not disturb active display sleep assertion\nif [[ ${INTERRUPT_DND} = \"no\" ]]; then\n    # Check if a fullscreen app is active\n    if hasDisplaySleepAssertion; then\n        cleanupAndExit 24 \"active display sleep assertion detected, aborting\" ERROR\n    fi\nfi\n\nprintlog \"BLOCKING_PROCESS_ACTION=${BLOCKING_PROCESS_ACTION}\"\nprintlog \"NOTIFY=${NOTIFY}\"\nprintlog \"LOGGING=${LOGGING}\"\n\n# NOTE: Finding LOGO to use in dialogs\ncase $LOGO in\n    appstore)\n        # Apple App Store on Mac\n        if [[ $(sw_vers -buildVersion) > \"19\" ]]; then\n            LOGO=\"/System/Applications/App Store.app/Contents/Resources/AppIcon.icns\"\n        else\n            LOGO=\"/Applications/App Store.app/Contents/Resources/AppIcon.icns\"\n        fi\n        ;;\n    jamf)\n        # Jamf Pro\n        LOGO=\"/Library/Application Support/JAMF/Jamf.app/Contents/Resources/AppIcon.icns\"\n        ;;\n    mosyleb)\n        # Mosyle Business\n        LOGO=\"/Applications/Self-Service.app/Contents/Resources/AppIcon.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"Mosyle Corporation MDM\"; fi\n        ;;\n    mosylem)\n        # Mosyle Manager (education)\n        LOGO=\"/Applications/Manager.app/Contents/Resources/AppIcon.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"Mosyle Corporation MDM\"; fi\n        ;;\n    addigy)\n        # Addigy\n        LOGO=\"/Library/Addigy/macmanage/MacManage.app/Contents/Resources/atom.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"MDM Profile\"; fi\n        ;;\n    microsoft)\n        # Microsoft Endpoint Manager (Intune)\n        if [[ -d \"/Library/Intune/Microsoft Intune Agent.app\" ]]; then\n            LOGO=\"/Library/Intune/Microsoft Intune Agent.app/Contents/Resources/AppIcon.icns\"\n        elif [[ -d \"/Applications/Company Portal.app\" ]]; then\n            LOGO=\"/Applications/Company Portal.app/Contents/Resources/AppIcon.icns\"\n        fi\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"Management Profile\"; fi\n        ;;\n    ws1)\n        # Workspace ONE (AirWatch)\n        LOGO=\"/Applications/Workspace ONE Intelligent Hub.app/Contents/Resources/AppIcon.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"Device Manager\"; fi\n        ;;\n    kandji)\n        # Kandji\n        LOGO=\"/Applications/Kandji Self Service.app/Contents/Resources/AppIcon.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"MDM Profile\"; fi\n        ;;\n    filewave)\n        # FileWave\n        LOGO=\"/usr/local/sbin/FileWave.app/Contents/Resources/fwGUI.app/Contents/Resources/kiosk.icns\"\n        if [[ -z $MDMProfileName ]]; then; MDMProfileName=\"FileWave MDM Configuration\"; fi\n        ;;\nesac\nif [[ ! -a \"${LOGO}\" ]]; then\n    if [[ $(sw_vers -buildVersion) > \"19\" ]]; then\n        LOGO=\"/System/Applications/App Store.app/Contents/Resources/AppIcon.icns\"\n    else\n        LOGO=\"/Applications/App Store.app/Contents/Resources/AppIcon.icns\"\n    fi\nfi\nprintlog \"LOGO=${LOGO}\" INFO\n\nprintlog \"Label type: $type\" INFO\n\n# NOTE: extract info from data\nif [ -z \"$archiveName\" ]; then\n    case $type in\n        dmg|pkg|zip|tbz|bz2)\n            archiveName=\"${name}.$type\"\n            ;;\n        pkgInDmg)\n            archiveName=\"${name}.dmg\"\n            ;;\n        *InZip)\n            archiveName=\"${name}.zip\"\n            ;;\n        updateronly)\n            ;;\n        *)\n            printlog \"Cannot handle type $type\"\n            cleanupAndExit 99\n            ;;\n    esac\nfi\nprintlog \"archiveName: $archiveName\" INFO\n\nif [ -z \"$appName\" ]; then\n    # when not given derive from name\n    appName=\"$name.app\"\nfi\n\nif [ -z \"$targetDir\" ]; then\n    case $type in\n        dmg|zip|tbz|bz2|app*)\n            targetDir=\"/Applications\"\n            ;;\n        pkg*)\n            targetDir=\"/\"\n            ;;\n        updateronly)\n            ;;\n        *)\n            cleanupAndExit 99 \"Cannot handle type $type\" ERROR\n            ;;\n    esac\nfi\n\nif [[ -z $blockingProcesses ]]; then\n    printlog \"no blocking processes defined, using $name as default\" INFO\n    blockingProcesses=( $name )\nfi\n\n# MARK: determine tmp dir\nif [ \"$DEBUG\" -eq 1 ]; then\n    # for debugging use script dir as working directory\n    tmpDir=$(dirname \"$0\")\nelse\n    # create temporary working directory\n    tmpDir=$(mktemp -d )\nfi\n\n# NOTE: change directory to temporary working directory\nprintlog \"Changing directory to $tmpDir\" DEBUG\nif ! cd \"$tmpDir\"; then\n    cleanupAndExit 13 \"error changing directory $tmpDir\" ERROR\nfi\n\n# MARK: get installed version\ngetAppVersion\nprintlog \"appversion: $appversion\"\n\n# NOTE: Exit if new version is the same as installed version (appNewVersion specified)\nif [[ \"$type\" != \"updateronly\" && ($INSTALL == \"force\" || $IGNORE_APP_STORE_APPS == \"yes\") ]]; then\n    printlog \"Label is not of type “updateronly”, and it’s set to use force to install or ignoring app store apps, so not using updateTool.\"\n    updateTool=\"\"\nfi\nif [[ -n $appNewVersion ]]; then\n    printlog \"Latest version of $name is $appNewVersion\"\n    if [[ $appversion == $appNewVersion ]]; then\n        if [[ $DEBUG -ne 1 ]]; then\n            printlog \"There is no newer version available.\"\n            if [[ $INSTALL != \"force\" ]]; then\n                message=\"$name, version $appNewVersion, is the latest version.\"\n                if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n                    printlog \"notifying\"\n                    displaynotification \"$message\" \"No update for $name!\"\n                fi\n                if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n                    updateDialog \"complete\" \"Latest version already installed...\"\n                    sleep 2\n                fi\n                cleanupAndExit 0 \"No newer version.\" REQ\n            fi\n        else\n            printlog \"DEBUG mode 1 enabled, not exiting, but there is no new version of app.\" WARN\n        fi\n    fi\nelse\n    printlog \"Latest version not specified.\"\nfi\n\n# MARK: check if this is an Update and we can use updateTool\nif [[ (-n $appversion && -n \"$updateTool\") || \"$type\" == \"updateronly\" ]]; then\n    printlog \"App needs to be updated and uses $updateTool. Ignoring BLOCKING_PROCESS_ACTION and running updateTool now.\"\n    updateDialog \"wait\" \"Updating...\"\n\n    if [[ $DEBUG -ne 1 ]]; then\n        if runUpdateTool; then\n            finishing\n            cleanupAndExit 0 \"updateTool has run\" REQ\n        elif [[ $type == \"updateronly\" ]];then\n            cleanupAndExit 0 \"type is $type so we end here.\" REQ\n        fi # otherwise continue\n    else\n        printlog \"DEBUG mode 1 enabled, not running update tool\" WARN\n    fi\nfi\n\n# MARK: download the archive\nif [ -f \"$archiveName\" ] && [ \"$DEBUG\" -eq 1 ]; then\n    printlog \"$archiveName exists and DEBUG mode 1 enabled, skipping download\"\nelse\n    # download\n    printlog \"Downloading $downloadURL to $archiveName\" REQ\n    if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n        printlog \"notifying\"\n        if [[ $updateDetected == \"YES\" ]]; then\n            displaynotification \"Downloading $name update\" \"Download in progress …\"\n        else\n            displaynotification \"Downloading new $name\" \"Download in progress …\"\n        fi\n    fi\n\n    if [[ $DIALOG_CMD_FILE != \"\" ]]; then\n        # pipe\n        pipe=\"$tmpDir/downloadpipe\"\n        # initialise named pipe for curl output\n        initNamedPipe create $pipe\n\n        # run the pipe read in the background\n        readDownloadPipe $pipe \"$DIALOG_CMD_FILE\" & downloadPipePID=$!\n        printlog \"listening to output of curl with pipe $pipe and command file $DIALOG_CMD_FILE on PID $downloadPipePID\" DEBUG\n\n        curlDownload=$(curl -fL -# --show-error ${curlOptions} \"$downloadURL\" -o \"$archiveName\" 2>&1 | tee $pipe)\n        # because we are tee-ing the output, we want the pipe status of the first command in the chain, not the most recent one\n        curlDownloadStatus=$(echo $pipestatus[1])\n        killProcess $downloadPipePID\n\n    else\n        printlog \"No Dialog connection, just download\" DEBUG\n        curlDownload=$(curl -v -fsL --show-error ${curlOptions} \"$downloadURL\" -o \"$archiveName\" 2>&1)\n        curlDownloadStatus=$(echo $?)\n    fi\n\n    deduplicatelogs \"$curlDownload\"\n    if [[ $curlDownloadStatus -ne 0 ]]; then\n    #if ! curl --location --fail --silent \"$downloadURL\" -o \"$archiveName\"; then\n        printlog \"error downloading $downloadURL\" ERROR\n        message=\"$name update/installation failed. This will be logged, so IT can follow up.\"\n        if [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n            printlog \"notifying\"\n            if [[ $updateDetected == \"YES\" ]]; then\n                displaynotification \"$message\" \"Error updating $name\"\n            else\n                displaynotification \"$message\" \"Error installing $name\"\n            fi\n        fi\n        printlog \"File list: $(ls -lh \"$archiveName\")\" ERROR\n        printlog \"File type: $(file \"$archiveName\")\" ERROR\n        cleanupAndExit 2 \"Error downloading $downloadURL error:\\n$logoutput\" ERROR\n    fi\n    printlog \"File list: $(ls -lh \"$archiveName\")\" DEBUG\n    printlog \"File type: $(file \"$archiveName\")\" DEBUG\n    printlog \"curl output was:\\n$logoutput\" DEBUG\nfi\n\n# MARK: when user is logged in, and app is running, prompt user to quit app\nif [[ $BLOCKING_PROCESS_ACTION == \"ignore\" ]]; then\n    printlog \"ignoring blocking processes\"\nelse\n    if [[ $currentUser != \"loginwindow\" ]]; then\n        if [[ ${#blockingProcesses} -gt 0 ]]; then\n            if [[ ${blockingProcesses[1]} != \"NONE\" ]]; then\n                checkRunningProcesses\n            fi\n        fi\n    fi\nfi\n\n# MARK: install the download\nprintlog \"Installing $name\" REQ\nif [[ $currentUser != \"loginwindow\" && $NOTIFY == \"all\" ]]; then\n    printlog \"notifying\"\n    if [[ $updateDetected == \"YES\" ]]; then\n        displaynotification \"Updating $name\" \"Installation in progress …\"\n        updateDialog \"wait\" \"Updating...\"\n    else\n        displaynotification \"Installing $name\" \"Installation in progress …\"\n        updateDialog \"wait\" \"Installing...\"\n    fi\nfi\n\nif [ -n \"$installerTool\" ]; then\n    # installerTool defined, and we use that for installation\n    printlog \"installerTool used: $installerTool\" REQ\n    appName=\"$installerTool\"\nfi\n\ncase $type in\n    dmg)\n        installFromDMG\n        ;;\n    pkg)\n        installFromPKG\n        ;;\n    zip)\n        installFromZIP\n        ;;\n    tbz|bz2)\n        installFromTBZ\n        ;;\n    pkgInDmg)\n        installPkgInDmg\n        ;;\n    pkgInZip)\n        installPkgInZip\n        ;;\n    appInDmgInZip)\n        installAppInDmgInZip\n        ;;\n    *)\n        cleanupAndExit 99 \"Cannot handle type $type\" ERROR\n        ;;\nesac\n\nupdateDialog \"wait\" \"Finishing...\"\n\n# MARK: Finishing — print installed application location and version\nfinishing\n\n# all done!\ncleanupAndExit 0 \"All done!\" REQ\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0927734375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2020 Armin Briegel, Scripting OS X\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Labels.txt",
          "type": "blob",
          "size": 11.09375,
          "content": "1password7\n1password8\n1passwordcli\n4kvideodownloader\n8x8\nabetterfinderrename11\nabstract\nacorn\nacroniscyberprotectconnect\nacroniscyberprotectconnectagent\nadium\nadobeacrobatprodc\nadobebrackets\nadobeconnect\nadobecreativeclouddesktop\nadobedigitaleditions\nadobereaderdc\nadobereaderdc-install\nadobereaderdc-update\naffinitydesigner2\naffinityphoto2\naffinitypublisher2\naftermath\naircall\nairserver\nairtable\nairtame\nairtamepkg\naldente\nalephone\nalfred\nalttab\namazonchime\namazoncorretto11jdk\namazoncorretto17jdk\namazoncorretto8jdk\namazonworkspaces\nanaconda\nanastasiysextensionmanager\nandroidfiletransfer\nandroidstudio\nanydesk\napachedirectorystudio\napachenetbeans\napparency\nappcleaner\napplenyfonts\napplesfarabic\napplesfcompact\napplesfmono\napplesfpro\napplesfsymbols\naquamacs\naquaskk\narcbrowser\narchimate\narchiwareb2go\narchiwarepst\narduinoide\narq7\nasana\nasperaconnect\natext\natextlegacy\natlassiancompanion\naudacity\nauthydesktop\nautodeskfusion360admininstall\nautodmg\nautomounter\nautopkgr\navertouch\naviatrix\nawscli2\nawsvpnclient\naxurerp10\nazuredatastudio\nbackgroundmusic\nbackgrounds\nbalenaetcher\nbalsamiqwireframes\nbambustudio\nbartender\nbasecamp3\nbaseline\nbaseline-nodaemon\nbbedit\nbbeditpkg\nbeamstudio\nbetterdisplay\nbettertouchtool\nbeyondcomparepro\nbibdesk\nbitrix24\nbitwarden\nbitwigstudio\nblender\nbluejeans\nbluejeanswithaudiodriver\nboop\nboxdrive\nboxsync\nboxtools\nbracketsio\nbrave\nbravepkg\nbrosix\nbruno\nbugdom\nburpsuitecommunityedition\nburpsuiteprofessional\nbuttercup\ncaffeine\ncakebrew\ncalcservice\ncalibre\ncalibriteprofiler\ncamostudio\ncamtasia\ncamtasia2019\ncamtasia2020\ncamtasia2021\ncamtasia2022\ncamtasia2023\ncamunda\ncanva\ncarboncopycloner\ncatoclient\ncharles\nchatwork\nchemdoodle\nchemdoodle2d\nchemdoodle3d\ncherryaudioatomika\ncherryaudioblue3\ncherryaudioca2600\ncherryaudiochroma\ncherryaudiocr78\ncherryaudiodco106\ncherryaudiodreamsynth\ncherryaudioeightvoice\ncherryaudioelkax\ncherryaudiogalacticreverb\ncherryaudiogx80\ncherryaudioharmonia\ncherryaudiolowdown\ncherryaudiomemorymode\ncherryaudiomercury4\ncherryaudiomercury6\ncherryaudiominiverse\ncherryaudiomoduledesigner\ncherryaudionovachord\ncherryaudiooctavecat\ncherryaudiopolymode\ncherryaudioprosoloist\ncherryaudiops20\ncherryaudiops3300\ncherryaudioquadra\ncherryaudiorackmode\ncherryaudiosines\ncherryaudiosolovox\ncherryaudiostardust201\ncherryaudiosurrealisticmg1plus\ncherryaudiosync\ncherryaudiosynthesizerexpander\ncherryaudiovoltagemodular\ncherryaudiowurlybird140b\nchromeremotedesktop\nchronoagent\nchronosync\ncinema4d\ncisdem-documentreader\ncitrixworkspace\ncleartouchcollage\nclevershare2\nclickshare\nclickup\nclipgrab\nclipy\ncloseio\ncloudflarewarp\ncloudya\nclue\ncluefull\ncmake\ncocoapods\ncoconutbattery\ncode42\ncodemeter\ncoderunner\ncolourcontrastanalyser\nconnectfonts\ncormorant\ncraftmanager\ncraftmanagerforsketch\ncrashplan\ncrashplansmb\ncricutdesignspace\ncryptomator\ncrystalfetch\ncyberduck\ncytoscape\ndaisydisk\ndangerzone\ndarktable\ndaylite\ndbeaverce\ndebookee\ndedoose\ndeepl\ndefaultfolderx\ndepnotify\ndesktoppr\ndetectxswift\ndevonthink\ndialog\ndialpad\ndigiexam\ndiscord\ndiskdrill\ndiskspace\ndisplaylinkmanager\ndisplaylinkmanagergraphicsconnectivity\ndocker\ndockutil\ndragonframe5\ndrawio\ndrift\ndropbox\ndroplr\ndruvainsync\ndstny\nduckduckgo\nduet\nduodesktop\nduodevicehealth\ndymoconnectdesktop\ndynalist\neaseusdatarecoverywizard\neasyfind\neclipsetemurin11\neclipsetemurin17\neclipsetemurin21\neclipsetemurin8\necosiabrowser\negnyte\negnytecore\negnytewebedit\nelement\nelgatocamerahub\nelgatostreamdeck\nemacs\neposconnect\nescrowbuddy\neshareosx\nespanso\netrecheck\netssecurebrowser\nevercast\nevernote\neverweb\nexelbanstats\nexifrenamer\nexpressvpn\nfacebookmessenger\nfantastical\nfastscripts\nfavro\nfellow\nfigma\nfilemakerpro\nfilezilla\nfinaldraft11\nfinaldraft12\nfindanyfile\nfirefox\nfirefox_da\nfirefox_intl\nfirefoxdeveloperedition\nfirefoxesr\nfirefoxesr_intl\nfirefoxesrpkg\nfirefoxpkg\nfirefoxpkg_intl\nflexoptixapp\nflowjo\nflstudiomac\nflux\nflycut\nfontbase\nfontexplorer\nfork\nfranz\nfreeplane\nfront\nfsmonitor\nfujifilmwebcam\ngarminexpress\ngather\ngathertown\ngdevelop\ngeneiousprime\ngephi\ngfxcardstatus\ngimp\ngithubdesktop\ngitkraken\nglpiagent\ngolang\ngoogleadseditor\ngooglechrome\ngooglechromeenterprise\ngooglechromepkg\ngoogledrive\ngoogledrivebackupandsync\ngoogledrivefilestream\ngoogleearth\ngooglejapaneseinput\ngooglesoftwareupdate\ngosign\ngotiengviet\ngotomeeting\ngpgsuite\ngpgsync\ngrammarly\ngrandperspective\ngrasshopper\ngrooveomnidialerenterpriseedition\ngyazo\ngyazogif\nhancock\nhandbrake\nhazel\nhmavpn\nhomebrew\nhoppscotch\nhoros\nhot\nhoudahspot\nhpeasyadmin\nhpeasystart\nhubstaff\nhuddly\nhype\nhyper\ni1profiler\nibarcoder\nibmnotifier\nice\nicons\nidrive\nidrivethin\nigv\niina\nimageoptim\nimazingprofileeditor\ninetclearreportsdesigner\ninkscape\ninsomnia\ninstallomator\ninstallomator_theile\nintellijideace\nipswupdater\nipvisionconnect\niriunwebcam\nisadora\nisland\nistatmenus\niterm2\nitsycal\nizotopeproductportal\njabradirect\njamfcheck\njamfconnect\njamfconnectconfiguration\njamfcpr\njamfmigrator\njamfpppcutility\njamfprintermanager\njamfreenroller\njamovi\njasp\njdk17\njdk18\njdk19\njdk20\njetbrainsclion\njetbrainsdatagrip\njetbrainsdataspell\njetbrainsgateway\njetbrainsgoland\njetbrainsintellijidea\njetbrainsintellijideace\njetbrainsphpstorm\njetbrainspycharm\njetbrainspycharmce\njetbrainsrider\njetbrainsrubymine\njetbrainstoolbox\njetbrainswebstorm\njitsimeet\njre8\njumpdesktop\njupyterlab\nkap\nkarabinerelements\nkeepassxc\nkeeperpasswordmanager\nkeepingyouawake\nkeka\nkeyaccess\nkeybase\nkeyboardmaestro\nkeyshot12\nkeyshot12_2024\nkeystoreexplorer\nkimplusclientmodul\nklokki\nknockknock\nkrisp\nkrita\nlastpass\nlatexit\nlaunchbar\nlcadvancedvpnclient\nlexarrecoverytool\nlgcalibrationstudio\nlibericajdk11ltsfull\nlibericajdk17ltsfull\nlibericajdk8ltsfull\nlibreoffice\nlibreofficelanguagepack_intl\nlifesize\nlightburn\nlinear\nlogioptions\nlogitechoptions\nlogitechoptionsplus\nlogitune\nlogseq\nloom\nloupedeck\nlowprofile\nlsagent\nlucidlink\nlucifer\nlulu\nmacadminspython\nmaccyapp\nmacfuse\nmacoslaps\nmacpass\nmacports\nmactex\nmactracker\nmagicbullet\nmailmate\nmailtooutlook\nmalwarebytes\nmarathon\nmarathon2\nmarathoninfinity\nmasv\nmattermost\nmaxonapp\nmdmwatchdog\nmeetingbar\nmeistertask\nmendeleyreferencemanager\nmenumeters\nmerlinproject\nmicrosoftautoupdate\nmicrosoftazuredatastudio\nmicrosoftazurestorageexplorer\nmicrosoftcompanyportal\nmicrosoftdefender\nmicrosoftdefenderatp\nmicrosoftedge\nmicrosoftedgeconsumerstable\nmicrosoftedgeenterprisestable\nmicrosoftexcel\nmicrosoftexcelreset\nmicrosoftlicenseremovaltool\nmicrosoftlicensereset\nmicrosoftoffice365\nmicrosoftofficebusinesspro\nmicrosoftofficefactoryreset\nmicrosoftofficeremoval\nmicrosoftonedrive\nmicrosoftonedrive-deferred\nmicrosoftonedrive-rollingout\nmicrosoftonedrive-rollingoutdeferred\nmicrosoftonedrivereset\nmicrosoftonenote\nmicrosoftonenotereset\nmicrosoftoutlook\nmicrosoftoutlook-monthly\nmicrosoftoutlookdataremoval\nmicrosoftoutlookreset\nmicrosoftpowerpoint\nmicrosoftpowerpointreset\nmicrosoftremotedesktop\nmicrosoftremotehelp\nmicrosoftsharepointplugin\nmicrosoftskypeforbusiness\nmicrosoftskypeforbusinessremovaltool\nmicrosoftteams\nmicrosoftteams-rollingout\nmicrosoftteamsclassic\nmicrosoftteamsnew\nmicrosoftteamsreset\nmicrosoftvisualstudiocode\nmicrosoftwindowsapp\nmicrosoftword\nmicrosoftwordreset\nmightymike\nmindmanager\nminiconda\nmiro\nmist\nmist-cli\nmkuser\nmmhmm\nmmhmm-desktop\nmmhmm-studio\nmobikinassistantforandroid\nmobiletolocal\nmobirise\nmochakeyboard\nmochatelnet\nmochatn3270\nmochatn3812\nmochatn5250\nmockoon\nmoderncsv\nmongodbcompass\nmonitorcontrol\nmontereyblocker\nmorisawadesktopmanager\nmountainduck\nmowgliiitsycal\nmultipass\nmunki\nmunkiadmin\nmusescore\nmuzzle\nmysqlworkbenchce\nnamiral\nnanosaur\nnativeaccess\nnessusagent\nnetiquette\nnetnewswire\nnetspot\nnetworksharemounter\nnextcloud\nnodejs\nnodejslts\nnomachine\nnomad\nnomadlogin\nnordlayer\nnordvpn\nnotion\nnova\nnudge\nnudgesuite\nnvivo\nnvivo13\nnvivo14\nnweasecuretestingbrowser\nobs\nobsbotwebcam\nobsidian\nodrive\nomnidisksweeper\nomnifocus3\nomnifocus4\nomnigraffle6\nomnigraffle7\nomnioutliner5\nomniplan3\nomniplan4\nomnipresence\nonionshare\nonlyofficedesktop\nonscreencontrol\nonyx\nopenvpnconnect\nopenvpnconnectv3\nopera\norcaslicer\norigin\norion\nottomatic\noutset\noverflow\npacifist\npackages\npandoc\nparallelsrasclient\nparetosecurity\nparsec\nparticulars\npatchomator\npcoipclient\npdfexpert\npdfsam\nperimeter81\npgadmin4\npika\npingplotter\npitch\nplantronicshub\nplatypus\nplexmediaserver\nplisteditpro\npodmandesktop\npolylens\npopsql\nportingkit\npostman\npowermonitor\nprism10\nprism9\npritunl\nprivileges\nprivileges2\nprocessing3\nprocessing4\nproctortrack\nprojectplace\npromiseutility\npromiseutilityr\nproofpointautoupdater\npropresenter7\nprotonvpn\nproxyman\nprune\nprusaslicer\npulsar\npycharmce\npymol\npython\nqgis-pr\nqlab\nr\nraindropio\nrancherdesktop\nrapidapi\nraycast\nrealvncondemandassist\nrealvncserver\nrealvncviewer\nrectangle\nredcanarymacmonitor\nredshift\nreflector4\nrelatel\nremotedesktopmanagerenterprise\nremotedesktopmanagerfree\nremotix\nremotixagent\nrenew\nrenew-noagent\nresiliosynchome\nretrobatch\nrhino7\nrhino8\nricohpsprinters\nringcentralapp\nringcentralclassicapp\nringcentralmeetings\nringcentralphone\nrocket\nrocketchat\nrodecentral\nrodeconnect\nrodeunify\nrogueamoebaaudiohijack4\nrogueamoebafission2\nrogueamoebaloopback2\nrogueamoebasoundsource5\nroyaltsx\nrstudio\nrustdesk\nsalesforcecli\nsanta\nscaleft\nscapple\nscenebuilder\nscmenu\nscreamingfrogseospider\nscreencloudplayer\nscreenflick\nscribus\nscrollreverser\nsdnotary\nsecretive\nselfcontrol\nsequelace\nsequelpro\nsfsymbols\nshield\nshotcut\nshottr\nsidekick\nsignal\nsigniantapp\nsilnite\nsipgateclinq\nsirimote\nsizeup\nsketch\nsketchupviewer\nskim\nskype\nslab\nslack\nsmartgit\nsmartsheet\nsmartsvn\nsnagit\nsnagit2019\nsnagit2020\nsnagit2021\nsnagit2022\nsnagit2023\nsnagit2024\nsnapgeneviewer\nsoapuiopensource\nsococo\nsolstice\nsonicvisualiser\nsonobus\nsonos\nsonoss1\nsonoss2\nsoundly\nsoundly-placeit\nsourcetree\nspark\nsplashtopbusiness\nsplashtopsos\nsplashtopstreamer\nsplice\nspotify\nsqlpropostgres\nsqlprostudio\nstarface72x\nstarface73x\nstarfaceuccclient\nstats\nsteelseriesengine\nstrongdm\nstrongsync\nsubethaedit\nsublimemerge\nsublimetext\nsuitestudio\nsuperhuman\nsupportapp\nsurfdrive\nsuspiciouspackage\nswiftdialog\nswiftruntimeforcommandlinetools\nsymhelper\nsync\nsynologyactivebackupforbusinessagent\nsynologyassistant\nsynologydriveclient\ntableaudesktop\ntableaupublic\ntableaureader\ntageditor\ntailscale\ntalkdeskcxcloud\ntaskpaper\nteamviewer\nteamviewerhost\nteamviewerhostcustom\nteamviewerqs\nteamviewerqscustom\ntechsmithcapture\ntelegram\ntembo\ntencentmeeting\ntexliveutility\ntexshop\ntextexpander\ntextmate\ntheunarchiver\nthings\nthonny\nthunderbird\nthunderbird_intl\nticktick\ntidal\ntodoist\ntoggltrack\ntom4aconverter\ntorbrowser\ntower\ntransfer\ntransmit5\ntrapcode\ntrex\ntunnelbear\ntunnelblick\ntuple\ntypeface\ntypinator\ntypora\nuaconnect\nultimakercura\numbrellaroamingclient\nuniconverter\nuniversaltypeclient\nunnaturalscrollwheels\nutm\nvagrant\nvanilla\nventurablocker\nveracrypt\nvfx\nvimac\nvirtualbox\nvirtualbuddy\nviscosity\nvisualstudiocode\nvisualz\nvivaldi\nvivi\nvlc\nvmwarefusion\nvmwarehorizonclient\nvncconnect\nvonagebusiness\nvpntracker365\nvscodium\nvysor\nwacomdrivers\nwallyezflash\nweasis\nwebex\nwebexmeetings\nwebexteams\nwebextoolsremoval\nwechat\nweprint\nwhatroute\nwhatsapp\nwireshark\nwordservice\nworkbrew\nworkplacechat\nwrikeformac\nwwdc\nxbar\nxcreds\nxeroxphaser7800\nxeroxprintandscan\nxeroxworkcentre7800\nxink\nxmenu\nxmind\nxquartz\nyed\nyouleanloudnessmeter2\nyubicoauthenticator\nyubikeymanager\nyubikeymanagerqt\nzappy\nzeplin\nzerotier\nzipwhip\nzohoworkdrive\nzohoworkdrivegenie\nzohoworkdrivetruesync\nzoom\nzoomclient\nzoomgov\nzoomoutlookplugin\nzoomoutlookpluginremoval\nzoomrooms\nzotero\nzulip\nzulujdk11\nzulujdk13\nzulujdk15\nzulujdk17\nzulujdk18\nzulujdk21\nzulujdk8\nzulujdkfx17\n"
        },
        {
          "name": "MDM",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.0673828125,
          "content": "\n# Installomator\n\n_The one installer script to rule them all._\n\n![](https://img.shields.io/github/v/release/Installomator/Installomator)&nbsp;![](https://img.shields.io/github/downloads/Installomator/Installomator/latest/total)&nbsp;![](https://img.shields.io/badge/macOS-10.14%2B-success)&nbsp;![](https://img.shields.io/github/license/Installomator/Installomator)\n\n**Important:** The default (`main`) branch is a beta version of the next release. It contains the latest fixes, new labels and changes to application labels, but they are also not thoroughly tested yet. Installomator is designed so that changes to application labels should not affect the behavior of the script outside of that label, so it should be mostly safe, but things may be in flux. If you want the latest release version, you can either switch to the [`release` branch](https://github.com/Installomator/Installomator/tree/release) from the branch menu above the file list (where is says 'main' by default) or download the Installomator latest, non-beta, zip from the ['Releases'](https://github.com/Installomator/Installomator/releases) area and extract Installomator.sh. [More detail on the wiki.](https://github.com/Installomator/Installomator/wiki/Branches-and-Betas)\n\n**Always test carefully and thoroughly in your environment before going to production!**\n\n*Every production and deployment environment is different: please test thoroughly before rolling it out to your production.*\n\nWe have put a lot of work into making it stable and safe, but we _cannot_ and will not make _any_ promises that it won't break in some not yet encountered edge case.\n\n## Support and Contributing\n\n__Please note, that if you are contributing to this project with new labels or other suggestions in PRs, please put your changes in the files in the `fragments`-folder. DO NOT edit the full `Installomator.sh` script. The full script is assembled from the fragment files for release, and will be overwritten. See the [README.md](utils/README.md) file in the `utils` directory for detailed instructions.__\n\nDiscussion, support and advice around Installomator happens in the `#installomator` channel in the [MacAdmins.org Slack](https://macadmins.org). Please go there for support questions. Do not create an issue just when you have a questions, but do file an issue or pull request (PR) for bugs or wrong behavior. When in doubt, ask in the above Slack channel.\n\nPlease see [CONTRIBUTING.md](https://github.com/Installomator/Installomator/blob/dev/CONTRIBUTING.md) for how to contribute.\n\n## Installomator Wiki\n\n- [Wiki](https://github.com/Installomator/Installomator/wiki)\n- [Motivation and Background](https://github.com/Installomator/Installomator/wiki/Motivation-and-Background)\n- [Goals](https://github.com/Installomator/Installomator/wiki/Goals)\n- [What it does](https://github.com/Installomator/Installomator/wiki/What-it-does)\n- [Using Installomator](https://github.com/Installomator/Installomator/wiki/Using-Installomator)\n- [Configuration and Variables](https://github.com/Installomator/Installomator/wiki/Configuration-and-Variables)\n- [Labels Variable Reference](https://github.com/Installomator/Installomator/wiki/Label-Variables-Reference)\n- [Methods to Run Installomator](https://github.com/Installomator/Installomator/wiki/Methods-to-Run-Installomator)\n- [Frequently Asked Questions](https://github.com/Installomator/Installomator/wiki/Frequently-Asked-Questions)\n\n## Authors and Contributors\n\nInstallomator was originally inspired by the download scripts from [William Smith - @talkingmoose](https://github.com/talkingmoose) and [Sander Schram - @macbofh](https://github.com/macbofh), and created by:\n\n- [Armin Briegel - @scriptingosx](https://github.com/scriptingosx)\n\nwith help from [Erik Stam - @erikstam](https://github.com/erikstam)  \n\nThe Installomator team:\n- [Armin Briegel - @scriptingosx](https://github.com/scriptingosx)\n- [Isaac Ordonez - @isaacatmann](https://github.com/isaacatmann)\n- [Søren Theilgaard - @Theile](https://github.com/Theile)\n- [Adam Codega - @acodega](https://github.com/acodega)\n\n And with numerous contributions from many others. Thank you all, very much!\n"
        },
        {
          "name": "assemble.sh",
          "type": "blob",
          "size": 0.0166015625,
          "content": "utils/assemble.sh"
        },
        {
          "name": "fragments",
          "type": "tree",
          "content": null
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}