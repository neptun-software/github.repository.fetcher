{
  "metadata": {
    "timestamp": 1736568198443,
    "page": 39,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjQw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "paulirish/dotfiles",
      "stars": 4223,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".aliases",
          "type": "blob",
          "size": 2.373046875,
          "content": "# Easier navigation: .., ..., ~ and -\nalias ..=\"cd ..\"\nalias cd..=\"cd ..\"\nalias ...=\"cd ../..\"\nalias ....=\"cd ../../..\"\nalias .....=\"cd ../../../..\"\nalias ~=\"cd ~\" # `cd` is probably faster to type though\nalias -- -=\"cd -\"\n\n# mv, rm, cp\nalias mv='mv -v'\nalias rm='rm -i -v'\nalias cp='cp -v'\n\nalias chmox='chmod -x'\n\nalias where=which # sometimes i forget\nalias brwe=brew  #typos\n\nalias hosts='sudo $EDITOR /etc/hosts'   # yes I occasionally 127.0.0.1 twitter.com ;)\n\n###\n# time to upgrade `ls`. use eza instead of dealing with coreutils, LS_COLORS blah blah\nalias ls='eza --classify=auto --color --group-directories-first --sort=extension -A'\nalias la='eza --classify=auto --color --group-directories-first --sort=extension -a -l --octal-permissions --no-permissions'\n# ls options: A = include hidden (but not . or ..), F = put `/` after folders, h = byte unit suffixes\n\n\n\n###\n# GIT STUFF\n\nfunction clone() {\n    git clone --depth=1 $1\n    cd $(basename ${1%.*})\n    yarn install\n}\nalias push=\"git push\"\n\n# Undo a `git push`\nalias undopush=\"git push -f origin HEAD^:master\"\n\n# git root\nalias gr='[ ! -z `git rev-parse --show-cdup` ] && cd `git rev-parse --show-cdup || pwd`'\n\n\nalias gitmainormaster=\"git branch --format '%(refname:short)' --sort=-committerdate --list master main | head -n1\"\nalias main=\"git checkout \\$(gitmainormaster)\"\nalias master=\"main\"\n\nalias dotfiles=\"subl ~/code/dotfiles\" # open dotfiles for viewing\n\n# Networking. IP address, dig, DNS\n# alias dig=\"dig +nocmd any +multiline +noall +answer\"\n# wget sucks with certificates. Let's keep it simple.\nalias wget=\"curl -O\"\n\n# Recursively delete `.DS_Store` files\nalias cleanup_dsstore=\"find . -name '*.DS_Store' -type f -ls -delete\"\n\nalias diskspace_report=\"df -P -kHl\"\nalias free_diskspace_report=\"diskspace_report\"\n\n# Shortcuts\nalias g=\"git\"\nalias gi=\"git\"\nalias v=\"vim\"\nalias ungz=\"gunzip -k\"\n\n# File size\nalias fs=\"stat -f \\\"%z bytes\\\"\"\n\n\n# Update installed Ruby gems, Homebrew, npm, and their installed packages\nalias brew_update=\"brew -v update; brew upgrade --force-bottle --cleanup; brew cleanup; brew cask cleanup; brew prune; brew doctor; npm-check -g -u\"\nalias update_brew_npm_gem='brew_update; npm install npm -g; npm update -g; sudo gem update --system; sudo gem update --no-document'\n\n\nalias xpraserver='xpra start --printing=no --systemd-run=no --daemon=no :110'\n\n# weird ass behavior without this.\nalias watchexec=\"watchexec --project-origin .\"\n\n"
        },
        {
          "name": ".bash_profile",
          "type": "blob",
          "size": 4.744140625,
          "content": "\n# Load our dotfiles like ~/.bash_prompt, etc…\n#   ~/.extra can be used for settings you don’t want to commit,\n#   Use it to configure your PATH, thus it being first in line.\nfor file in ~/.{extra,bash_prompt,exports,aliases,functions}; do\n    [ -r \"$file\" ] && source \"$file\"\ndone\nunset file\n\n# to help sublimelinter etc with finding my PATHS\ncase $- in\n   *i*) source ~/.extra\nesac\n\n\n# generic colouriser\nGRC=`which grc`\nif [ \"$TERM\" != dumb ] && [ -n \"$GRC\" ]\n    then\n        alias colourify=\"$GRC -es --colour=auto\"\n        alias configure='colourify ./configure'\n        for app in {diff,make,gcc,g++,ping,traceroute}; do\n            alias \"$app\"='colourify '$app\n    done\nfi\n\n# highlighting inside manpages and elsewhere\nexport LESS_TERMCAP_mb=$'\\E[01;31m'       # begin blinking\nexport LESS_TERMCAP_md=$'\\E[01;38;5;74m'  # begin bold\nexport LESS_TERMCAP_me=$'\\E[0m'           # end mode\nexport LESS_TERMCAP_se=$'\\E[0m'           # end standout-mode\nexport LESS_TERMCAP_so=$'\\E[38;5;246m'    # begin standout-mode - info box\nexport LESS_TERMCAP_ue=$'\\E[0m'           # end underline\nexport LESS_TERMCAP_us=$'\\E[04;38;5;146m' # begin underline\n\n##\n## HISTORY settings... \n##\n\n# Enable history expansion with space\n# E.g. typing !!<space> will replace the !! with your last command\nbind Space:magic-space\n\n# Use standard ISO 8601 timestamp\n# %F equivalent to %Y-%m-%d\n# %T equivalent to %H:%M:%S (24-hours format)\nexport HISTTIMEFORMAT='%F %T '\n\n# keep history up to date, across sessions, in realtime\n#  http://unix.stackexchange.com/a/48113\nexport HISTCONTROL=\"ignoredups\"       # no duplicate entries, but keep space-prefixed commands. (bash-sensible uses \"erasedups:ignoreboth\" but i think i validated this already?)\n# here's the popularity amonngst other-peoples-dotfiles... (cmd: ag --nogroup --noheading --nofilename --hidden -o \"HISTCONTROL.*\" |  grep -E -o \"(ignore|erase)[a-z:]*\" | sort | uniq -c | sort -r)\n#      5 ignoreboth\n#      4 ignoredups\n#      2 erasedups:ignoreboth\n#      1 ignorespace:erasedups\n#      1 ignoredups:erasedups\n#      1 erasedups\n\nexport HISTSIZE=100000                          # big big history (default is 500)\nexport HISTFILESIZE=$HISTSIZE                   # big big history\nshopt -s histappend                             # append to history, don't overwrite it\nshopt -s cmdhist                                # Save multi-line commands as one command\n\n\n# Enable incremental history search with up/down arrows (also Readline goodness)\n# Learn more about this here: http://codeinthehole.com/writing/the-most-important-command-line-tip-incremental-history-searching-with-inputrc/\nbind '\"\\e[A\": history-search-backward'\nbind '\"\\e[B\": history-search-forward'\n\n# Don't record some commands\nexport HISTIGNORE=\"&:[ ]*:exit:ls:bg:fg:history:clear\"\n\n# Save and reload the history after each command finishes. Also look for any conflicting prompt_command definitions!!\nexport PROMPT_COMMAND=\"history -a; history -c; history -r; $PROMPT_COMMAND\"\n\n# ^ the only downside with this is [up] on the readline will go over all history not just this bash session.\n\n\n# z beats cd most of the time. `brew install z`\nif which brew > /dev/null; then\n    zpath=\"$(brew --prefix)/etc/profile.d/z.sh\"\n    [ -s $zpath ] && source $zpath\nfi;\n\n##\n## Completion…\n##\n\n\nif [[ -n \"$ZSH_VERSION\" ]]; then  # quit now if in zsh\n    return 1 2> /dev/null || exit 1;\nfi;\n\n# Sorry, very MacOS centric here. :/\nif  which brew > /dev/null; then\n\n    # bash completion.\n    if [ -f \"$(brew --prefix)/share/bash-completion/bash_completion\" ]; then\n        source \"$(brew --prefix)/share/bash-completion/bash_completion\";\n    elif [ -f /etc/bash_completion ]; then\n        source /etc/bash_completion;\n    fi\n\n    # homebrew completion\n    source \"$(brew --prefix)/etc/bash_completion.d/brew\"\n\n    # hub completion\n    if  which hub > /dev/null; then\n        source \"$(brew --prefix)/etc/bash_completion.d/hub.bash_completion.sh\";\n    fi;\nfi;\n\n# Enable tab completion for `g` by marking it as an alias for `git`\nif type __git_complete &> /dev/null; then\n    __git_complete g __git_main\nfi;\n\n\n# Enable git branch name completion. \n# curl -L https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash > ~/.git-completion.bash\nif [ -f ~/.git-completion.bash ]; then\n  . ~/.git-completion.bash\nfi\n\n\n# Add tab completion for `defaults read|write NSGlobalDomain`\n# You could just use `-g` instead, but I like being explicit\ncomplete -W \"NSGlobalDomain\" defaults\n\n##\n## better `cd`'ing\n##\n\n# Case-insensitive globbing (used in pathname expansion)\nshopt -s nocaseglob;\n\n# Correct spelling errors in arguments supplied to cd\nshopt -s cdspell;\n\n# Autocorrect on directory names to match a glob.\nshopt -s dirspell 2> /dev/null\n\n# Turn on recursive globbing (enables ** to recurse all directories)\nshopt -s globstar 2> /dev/null\n"
        },
        {
          "name": ".bash_prompt",
          "type": "blob",
          "size": 5.16015625,
          "content": "# This prompt inspired by gf3, sindresorhus, alrra, and mathiasbynens.\n# but customized to me. <3\n\ndefault_username='paulirish'\n\n# Automatically trim long paths in the prompt (requires Bash 4.x)\nPROMPT_DIRTRIM=2\n\nif [[ -n \"$ZSH_VERSION\" ]]; then  # quit now if in zsh\n    return 1 2> /dev/null || exit 1;\nfi;\n\n\nif [[ $COLORTERM = gnome-* && $TERM = xterm ]] && infocmp gnome-256color >/dev/null 2>&1; then\n    export TERM=gnome-256color\nelif infocmp xterm-256color >/dev/null 2>&1; then\n    export TERM=xterm-256color\nfi\n\n\nset_prompts() {\n\n    local black=\"\" blue=\"\" bold=\"\" cyan=\"\" green=\"\" orange=\"\" \\\n          purple=\"\" red=\"\" reset=\"\" white=\"\" yellow=\"\"\n\n    local dateCmd=\"\"\n\n    if [ -x /usr/bin/tput ] && tput setaf 1 &> /dev/null; then\n        tput sgr0 # Reset colors\n\n        bold=$(tput bold)\n        reset=$(tput sgr0)\n\n        # Solarized colors\n        # (https://github.com/altercation/solarized/tree/master/iterm2-colors-solarized#the-values)\n        black=$(tput setaf 0)\n        blue=$(tput setaf 33)\n        cyan=$(tput setaf 37)\n        green=$(tput setaf 190)\n        orange=$(tput setaf 172)\n        purple=$(tput setaf 141)\n        red=$(tput setaf 124)\n        violet=$(tput setaf 61)\n        magenta=$(tput setaf 9)\n        white=$(tput setaf 8)\n        yellow=$(tput setaf 136)\n    fi\n\n    # Only show username/host if not default\n    function usernamehost() {\n\n        # Highlight the user name when logged in as root.\n        if [[ \"${USER}\" == *\"root\" ]]; then\n            userStyle=\"${red}\";\n        else\n            userStyle=\"${magenta}\";\n        fi;\n\n        userhost=\"\"\n        userhost+=\"\\[${userStyle}\\]$USER \"\n        userhost+=\"\\[${white}\\]at \"\n        userhost+=\"\\[${orange}\\]$HOSTNAME \"\n        userhost+=\"\\[${white}\\]in\"\n\n        if [ $USER != \"$default_username\" ]; then echo $userhost \"\"; fi\n    }\n\n\n    function prompt_git() {\n        # this is >5x faster than mathias's.\n\n        # check if we're in a git repo. (fast)\n        git rev-parse --is-inside-work-tree &>/dev/null || return\n\n        # check for what branch we're on. (fast)\n        #   if… HEAD isn’t a symbolic ref (typical branch),\n        #   then… get a tracking remote branch or tag\n        #   otherwise… get the short SHA for the latest commit\n        #   lastly just give up.\n        branchName=\"$(git symbolic-ref --quiet --short HEAD 2> /dev/null || \\\n            git describe --all --exact-match HEAD 2> /dev/null || \\\n            git rev-parse --short HEAD 2> /dev/null || \\\n            echo '(unknown)')\";\n\n\n        ## early exit for Chromium & Blink repo, as the dirty check takes ~5s\n        ## see other Chromium repo hacking optimizations: https://github.com/paulirish/dotfiles/blob/master/setup-a-new-machine.sh#L214\n        repoUrl=$(git config --get remote.origin.url)\n        if grep -q chromium.googlesource.com <<<$repoUrl; then\n            dirty=\" ⁂\"\n        else\n\n            # check if it's dirty (slow)\n            #   technique via github.com/git/git/blob/355d4e173/contrib/completion/git-prompt.sh#L472-L475\n            dirty=$(git diff --no-ext-diff --quiet --ignore-submodules --exit-code || echo -e \"*\")\n\n            # mathias has a few more checks some may like:\n            #    github.com/mathiasbynens/dotfiles/blob/a8bd0d4300/.bash_prompt#L30-L43\n        fi\n\n\n        [ -n \"${s}\" ] && s=\" [${s}]\";\n        echo -e \"${1}${branchName}${2}$dirty\";\n\n        return\n    }\n\n\n\n    # ------------------------------------------------------------------\n    # | Prompt string                                                  |\n    # ------------------------------------------------------------------\n\n    PS1=\"\\[\\033]0;\\w\\007\\]\"                                 # terminal title (set to the current working directory)\n    PS1+=\"\\n\\[$bold\\]\"\n    PS1+=\"\\[$(usernamehost)\\]\"                              # username at host\n    PS1+=\"\\[$green\\]\\w\"                                     # working directory\n    PS1+=\"\\$(prompt_git \\\"\\[$white\\] on \\[$purple\\]\\\" \\\"\\[$cyan\\]\\\")\"   # git repository details\n    PS1+=\"\\n\"\n    PS1+=\"\\[$reset$white\\]\\\\$ \\[$reset\\]\"\n\n    export PS1\n\n    # ------------------------------------------------------------------\n    # | Subshell prompt string                                         |\n    # ------------------------------------------------------------------\n\n    export PS2=\"⚡ \"\n\n    # ------------------------------------------------------------------\n    # | Debug prompt string  (when using `set -x`)                     |\n    # ------------------------------------------------------------------\n\n    # When debugging a shell script via `set -x` this tricked-out prompt is used.\n\n    # The first character (+) is used and repeated for stack depth\n    # Then, we log the current time, filename and line number, followed by function name, followed by actual source line\n\n    # FWIW, I have spent hours attempting to get time-per-command in here, but it's not possible. ~paul\n    export PS4='+ \\011\\e[1;30m\\t\\011\\e[1;34m${BASH_SOURCE}\\e[0m:\\e[1;36m${LINENO}\\e[0m \\011 ${FUNCNAME[0]:+\\e[0;35m${FUNCNAME[0]}\\e[1;30m()\\e[0m:\\011\\011 }'\n\n\n    # shoutouts:\n    #   https://github.com/dholm/dotshell/blob/master/.local/lib/sh/profile.sh is quite nice.\n    #   zprof is also hot.\n\n}\n\n\n\nset_prompts\nunset set_prompts\n"
        },
        {
          "name": ".bashrc",
          "type": "blob",
          "size": 0.083984375,
          "content": "\n\n\n[ -n \"$PS1\" ] && source ~/.bash_profile\n\n\n[ -f ~/.fzf.bash ] && source ~/.fzf.bash\n"
        },
        {
          "name": ".config",
          "type": "tree",
          "content": null
        },
        {
          "name": ".eslintrc.js",
          "type": "blob",
          "size": 1.638671875,
          "content": "module.exports = {\n\n  \"extends\": [\n    \"eslint:recommended\",\n    // \"plugin:import/errors\",\n    // \"plugin:import/warnings\",\n    // \"kentcdodds/possible-errors\",\n    // \"kentcdodds/best-practices\",\n    // \"kentcdodds/es6/possible-errors\",\n    // \"kentcdodds/import\",\n    // \"plugin:promise/recommended\",\n    // \"xo/esnext\",\n    // \"plugin:unicorn/recommended\",\n    // \"google\"\n  ],\n  \"plugins\": [\n    // \"unicorn\",\n    // \"import\",\n    // \"json\",\n    // \"eslint-comments\",\n    // \"optimize-regex\",\n    // \"promise\"\n  ],\n\n  \"env\": {\n    \"browser\": true,\n    \"es6\": true,\n    \"node\": true\n  },\n\n  \"rules\": {\n    \"no-console\": \"off\",\n    \"indent\": [\"error\", 2, {\n      \"SwitchCase\": 1,\n      \"VariableDeclarator\": 2\n    }],\n    \"max-len\": [\"error\", 120, {\n      \"ignoreComments\": true,\n      \"ignoreUrls\": true,\n      \"tabWidth\": 2\n    }],\n    \"no-unused-vars\": [\"error\", {\n      \"vars\": \"all\",\n      \"args\": \"after-used\",\n      \"argsIgnorePattern\": \"(^reject$|^_$)\",\n      \"varsIgnorePattern\": \"(^_$)\"\n    }],\n\n    // \"eslint-comments/disable-enable-pair\": \"error\",\n    // \"eslint-comments/no-duplicate-disable\": \"error\",\n    // \"eslint-comments/no-unlimited-disable\": \"error\",\n    // \"eslint-comments/no-unused-disable\": \"error\",\n    // \"eslint-comments/no-unused-enable\": \"error\",\n\n    // \"optimize-regex/optimize-regex\": \"warn\",\n\n    \"valid-jsdoc\": \"off\", // it's wrong pretty often\n    \"comma-dangle\": \"off\",\n    \"strict\": \"off\",\n    \"curly\": \"off\",\n    \"arrow-parens\": [\"error\", \"as-needed\"],\n    \"no-return-assign\": \"off\",\n    // \"unicorn/prefer-type-error\": \"off\",\n    \"require-jsdoc\": \"off\",\n    \"no-implicit-coercion\": \"off\",\n    \"capitalized-comments\": \"warn\"\n\n    }\n};\n"
        },
        {
          "name": ".exports",
          "type": "blob",
          "size": 1.9892578125,
          "content": "# file is shared between bash and fish\n# todo: place these near the thematically related stuff. grouping as .exports is dumb.\n\n# vim as default\nexport EDITOR=\"vim\"\n\n# Don’t clear the screen after quitting a manual page\nexport MANPAGER=\"less -X\"\n\n# Prefer US English and use UTF-8\nexport LC_ALL=\"en_US.UTF-8\"\nexport LANG=\"en_US\"\n\nexport HOMEBREW_CASK_OPTS=\"--appdir=/Applications\"\n\n# highlighting inside manpages and elsewhere\nexport LESS_TERMCAP_mb=$(printf '\\e[01;31m')\t\t\t\t\t\t\t\t\t\t\t\t\t# enter blinking mode – red\nexport LESS_TERMCAP_md=$(printf '\\e[01;35m')\t\t\t\t\t\t\t\t\t\t\t\t\t# enter double-bright mode – bold, magenta\nexport LESS_TERMCAP_me=$(printf '\\e[0m')\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# turn off all appearance modes (mb, md, so, us)\nexport LESS_TERMCAP_se=$(printf '\\e[0m')\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# leave standout mode\nexport LESS_TERMCAP_so=$(printf '\\e[01;33m')\t\t\t\t\t\t\t\t\t\t\t\t\t# enter standout mode – yellow\nexport LESS_TERMCAP_ue=$(printf '\\e[0m')\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t# leave underline mode\nexport LESS_TERMCAP_us=$(printf '\\e[04;36m')\t\t\t\t\t\t\t\t\t\t\t\t\t# enter underline mode – cyan\n\n\n# fzf should be populated via `fd` which is the fastest file/dir finder. (respects gitignore, etc)\n# note.. `fd` seems faster than `ag`.. but if i wanted to use `ag` this is good: command ag --files-with-matches --filename-pattern \"\"\n# fd > 8.1 got slower. https://github.com/sharkdp/fd/issues/1131\n#    so.. here's the install for the last fast one: CARGO_NET_GIT_FETCH_WITH_CLI=true cargo install --vers 8.1.1 fd-find\n# To do a fzf including hidden/ignord files.. 'fd --unrestricted'\nexport FZF_DEFAULT_COMMAND='fd'\nexport FZF_CTRL_T_COMMAND='fd'\nexport FZF_CTRL_T_OPTS=\"--preview 'bat -n --color=always {} 2>/dev/null || tree -C {}'\"\n\n# Skip line-numbers and grid. https://github.com/sharkdp/bat/blob/e608b331425ca2ce8f8d0bd37e7f90901f91eb99/src/style.rs#L27-L61\n# In the future this can be `default,-numbers,-grid` but they haven't released in 18months so.....   \nexport BAT_STYLE=\"changes,header-filename,header-filesize,snip,rule\"\n\n\nexport CLOUDSDK_PYTHON=/usr/bin/python3\n\n"
        },
        {
          "name": ".functions",
          "type": "blob",
          "size": 5.3203125,
          "content": "#!/bin/bash\n\n# Create a new directory and enter it\nfunction md() {\n\tmkdir -p \"$@\" && cd \"$@\"\n}\n\n\n# find shorthand\nfunction f() {\n\tfind . -name \"$1\" 2>&1 | grep -v 'Permission denied'\n}\n\n\n# cd into whatever is the forefront Finder window.\ncdf() {  # short for cdfinder\n  cd \"`osascript -e 'tell app \"Finder\" to POSIX path of (insertion location as alias)'`\"\n}\n\n# Use `which` along with symlink resolving\nwhichlink() {\n\t# This dopeass conditional stolen from sheerun's dotfiles\n\t$(type -p greadlink readlink | head -1) -f $(which $@)\n}\n\n\n# git commit browser. needs fzf. ctrl-m to view commit.\nlog() {\n  git log --graph --color=always \\\n      --format=\"%C(auto)%h%d %s %C(black)%C(bold)%cr\" \"$@\" |\n  fzf --ansi --no-sort --reverse --tiebreak=index --toggle-sort=\\` \\\n      --bind \"ctrl-m:execute:\n                echo '{}' | grep -o '[a-f0-9]\\{7\\}' | head -1 |\n                xargs -I % sh -c 'git show --color=always % | less -R'\"\n}\n\n#make two beeps\nbeep() { \n  echo -e '\\a'; sleep 0.1; echo -e '\\a';\n}\n\n\n# Start an HTTP server from a directory, optionally specifying the port\nfunction server() {\n\tlocal port=\"${1:-8011}\"\n\topen \"http://localhost:${port}/\" &\n \t# statikk is good because it won't expose hidden folders/files by default.\n \t# yarn global add statikk\n \tstatikk --port \"$port\" .\n}\n\n\n# Copy w/ progress\ncp_p () {\n  rsync -WavP --human-readable --progress $1 $2\n}\n\n\n\n# get gzipped size\nfunction gz() {\n\techo \"orig size    (bytes): \"\n\tcat \"$1\" | wc -c\n\techo \"gzipped size (bytes): \"\n\tgzip -c \"$1\" | wc -c\n}\n\n# whois a domain or a URL\nfunction whois() {\n\tlocal domain=$(echo \"$1\" | awk -F/ '{print $3}') # get domain from URL\n\tif [ -z $domain ] ; then\n\t\tdomain=$1\n\tfi\n\techo \"Getting whois record for: $domain …\"\n\n\t# avoid recursion\n\t\t\t\t\t# this is the best whois server\n\t\t\t\t\t\t\t\t\t\t\t\t\t# strip extra fluff\n\t/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'\n}\n\n\n# preview csv files. source: http://stackoverflow.com/questions/1875305/command-line-csv-viewer\nfunction csvpreview(){\n      sed 's/,,/, ,/g;s/,,/, ,/g' \"$@\" | column -s, -t | less -#2 -N -S\n}\n\n# Extract archives - use: extract <file>\n# Based on http://dotfiles.org/~pseup/.bashrc\nfunction extract() {\n\tif [ -f \"$1\" ] ; then\n\t\tlocal filename=$(basename \"$1\")\n\t\tlocal foldername=\"${filename%%.*}\"\n\t\tlocal fullpath=`perl -e 'use Cwd \"abs_path\";print abs_path(shift)' \"$1\"`\n\t\tlocal didfolderexist=false\n\t\tif [ -d \"$foldername\" ]; then\n\t\t\tdidfolderexist=true\n\t\t\tread -p \"$foldername already exists, do you want to overwrite it? (y/n) \" -n 1\n\t\t\techo\n\t\t\tif [[ $REPLY =~ ^[Nn]$ ]]; then\n\t\t\t\treturn\n\t\t\tfi\n\t\tfi\n\t\tmkdir -p \"$foldername\" && cd \"$foldername\"\n\t\tcase $1 in\n\t\t\t*.tar.bz2) tar xjf \"$fullpath\" ;;\n\t\t\t*.tar.gz) tar xzf \"$fullpath\" ;;\n\t\t\t*.tar.xz) tar Jxvf \"$fullpath\" ;;\n\t\t\t*.tar.Z) tar xzf \"$fullpath\" ;;\n\t\t\t*.tar) tar xf \"$fullpath\" ;;\n\t\t\t*.taz) tar xzf \"$fullpath\" ;;\n\t\t\t*.tb2) tar xjf \"$fullpath\" ;;\n\t\t\t*.tbz) tar xjf \"$fullpath\" ;;\n\t\t\t*.tbz2) tar xjf \"$fullpath\" ;;\n\t\t\t*.tgz) tar xzf \"$fullpath\" ;;\n\t\t\t*.txz) tar Jxvf \"$fullpath\" ;;\n\t\t\t*.zip) unzip \"$fullpath\" ;;\n\t\t\t*) echo \"'$1' cannot be extracted via extract()\" && cd .. && ! $didfolderexist && rm -r \"$foldername\" ;;\n\t\tesac\n\telse\n\t\techo \"'$1' is not a valid file\"\n\tfi\n}\n\n# who is using the laptop's iSight camera?\ncamerausedby() {\n\techo \"Checking to see who is using the iSight camera… 📷\"\n\tusedby=$(lsof | grep -w \"AppleCamera\\|USBVDC\\|iSight\" | awk '{printf $2\"\\n\"}' | xargs ps)\n\techo -e \"Recent camera uses:\\n$usedby\"\n}\n\n\n# animated gifs from any video\n# from alex sexton   gist.github.com/SlexAxton/4989674\ngifify() {\n  if [[ -n \"$1\" ]]; then\n\tif [[ $2 == '--good' ]]; then\n\t  ffmpeg -i \"$1\" -r 10 -vcodec png out-static-%05d.png\n\t  time convert -verbose +dither -layers Optimize -resize 900x900\\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > \"$1.gif\"\n\t  rm -f out-static*.png\n\telse\n\t  ffmpeg -i \"$1\" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > \"$1.gif\"\n\tfi\n  else\n\techo \"proper usage: gifify <input_movie.mov>. You DO need to include extension.\"\n  fi\n}\n\n# turn that video into webm.\n# brew reinstall ffmpeg --with-libvpx\nwebmify(){\n\tffmpeg -i \"$1\" -vcodec libvpx -acodec libvorbis -isync -copyts -aq 80 -threads 3 -qmax 30 -y \"$2\" \"$1.webm\"\n}\n\n# direct it all to /dev/null\nfunction nullify() {\n  \"$@\" >/dev/null 2>&1\n}\n\n# `shellswitch [bash |zsh]`\n#   Must be in /etc/shells\nshellswitch () {\n\tchsh -s $(brew --prefix)/bin/$1\n}\n\n# from https://github.com/davidaurelio/dotfiles/blob/ce3d4117762f15ed92287e1049efefadfefb557a/.bash_functions\ntodatauri () {\n  local M=`file \"$1\" --mime-type | sed 's/^.*: //'`;\n  local D=`openssl base64 -in \"$1\"|tr -d '\\n'`;\n  echo \"data:$M;base64,$D\";\n}\n\n\n##\n# lazy initialize nvm, rvm, miniconda\n# https://news.ycombinator.com/item?id=33582219\n##\n\n# npm alternatives:\n# * i kinda like volta more but i forget it.\n# * https://github.com/Schniz/fnm also exists.\n# * https://asdf-vm.com/ has lots of fans. i want to try it.\nfunction nvm {\n\tunset -f nvm\n\texport NVM_DIR=\"$HOME/.nvm\"\n\t. \"$NVM_DIR/nvm.sh\" --no-use\n\tnvm \"${@}\"\n}\n\n# lazy initialize rvm\n# 2022-11 apparently a while ago i noted that i prefer rbenv? \n# and apparently theres another competitor that looks better than all those\nfunction rvm {\n\tunset -f rvm\n\tsource \"$HOME/.rvm/scripts/rvm\"\n\trvm \"${@}\"\n}\n\n# lazy initialize conda\nfunction conda {\n\tunset -f conda\n\tsource <(/opt/miniconda3/bin/conda shell.bash hook)\n\tconda \"${@}\"\n}\n"
        },
        {
          "name": ".gemrc",
          "type": "blob",
          "size": 0.0185546875,
          "content": "gem: --no-document\n"
        },
        {
          "name": ".git-completion.bash",
          "type": "blob",
          "size": 80.572265625,
          "content": "# bash/zsh completion support for core Git.\n#\n# Copyright (C) 2006,2007 Shawn O. Pearce <spearce@spearce.org>\n# Conceptually based on gitcompletion (http://gitweb.hawaga.org.uk/).\n# Distributed under the GNU General Public License, version 2.0.\n#\n# The contained completion routines provide support for completing:\n#\n#    *) local and remote branch names\n#    *) local and remote tag names\n#    *) .git/remotes file names\n#    *) git 'subcommands'\n#    *) git email aliases for git-send-email\n#    *) tree paths within 'ref:path/to/file' expressions\n#    *) file paths within current working directory and index\n#    *) common --long-options\n#\n# To use these routines:\n#\n#    1) Copy this file to somewhere (e.g. ~/.git-completion.bash).\n#    2) Add the following line to your .bashrc/.zshrc:\n#        source ~/.git-completion.bash\n#    3) Consider changing your PS1 to also show the current branch,\n#       see git-prompt.sh for details.\n#\n# If you use complex aliases of form '!f() { ... }; f', you can use the null\n# command ':' as the first command in the function body to declare the desired\n# completion style.  For example '!f() { : git commit ; ... }; f' will\n# tell the completion to use commit completion.  This also works with aliases\n# of form \"!sh -c '...'\".  For example, \"!sh -c ': git commit ; ... '\".\n# Note that \"git\" is optional --- '!f() { : commit; ...}; f' would complete\n# just like the 'git commit' command.\n#\n# If you have a command that is not part of git, but you would still\n# like completion, you can use __git_complete:\n#\n#   __git_complete gl git_log\n#\n# Or if it's a main command (i.e. git or gitk):\n#\n#   __git_complete gk gitk\n#\n# Compatible with bash 3.2.57.\n#\n# You can set the following environment variables to influence the behavior of\n# the completion routines:\n#\n#   GIT_COMPLETION_CHECKOUT_NO_GUESS\n#\n#     When set to \"1\", do not include \"DWIM\" suggestions in git-checkout\n#     and git-switch completion (e.g., completing \"foo\" when \"origin/foo\"\n#     exists).\n#\n#   GIT_COMPLETION_SHOW_ALL_COMMANDS\n#\n#     When set to \"1\" suggest all commands, including plumbing commands\n#     which are hidden by default (e.g. \"cat-file\" on \"git ca<TAB>\").\n#\n#   GIT_COMPLETION_SHOW_ALL\n#\n#     When set to \"1\" suggest all options, including options which are\n#     typically hidden (e.g. '--allow-empty' for 'git commit').\n#\n#   GIT_COMPLETION_IGNORE_CASE\n#\n#     When set, uses for-each-ref '--ignore-case' to find refs that match\n#     case insensitively, even on systems with case sensitive file systems\n#     (e.g., completing tag name \"FOO\" on \"git checkout f<TAB>\").\n\ncase \"$COMP_WORDBREAKS\" in\n*:*) : great ;;\n*)   COMP_WORDBREAKS=\"$COMP_WORDBREAKS:\"\nesac\n\n# Discovers the path to the git repository taking any '--git-dir=<path>' and\n# '-C <path>' options into account and stores it in the $__git_repo_path\n# variable.\n__git_find_repo_path ()\n{\n\tif [ -n \"${__git_repo_path-}\" ]; then\n\t\t# we already know where it is\n\t\treturn\n\tfi\n\n\tif [ -n \"${__git_C_args-}\" ]; then\n\t\t__git_repo_path=\"$(git \"${__git_C_args[@]}\" \\\n\t\t\t${__git_dir:+--git-dir=\"$__git_dir\"} \\\n\t\t\trev-parse --absolute-git-dir 2>/dev/null)\"\n\telif [ -n \"${__git_dir-}\" ]; then\n\t\ttest -d \"$__git_dir\" &&\n\t\t__git_repo_path=\"$__git_dir\"\n\telif [ -n \"${GIT_DIR-}\" ]; then\n\t\ttest -d \"$GIT_DIR\" &&\n\t\t__git_repo_path=\"$GIT_DIR\"\n\telif [ -d .git ]; then\n\t\t__git_repo_path=.git\n\telse\n\t\t__git_repo_path=\"$(git rev-parse --git-dir 2>/dev/null)\"\n\tfi\n}\n\n# Deprecated: use __git_find_repo_path() and $__git_repo_path instead\n# __gitdir accepts 0 or 1 arguments (i.e., location)\n# returns location of .git repo\n__gitdir ()\n{\n\tif [ -z \"${1-}\" ]; then\n\t\t__git_find_repo_path || return 1\n\t\techo \"$__git_repo_path\"\n\telif [ -d \"$1/.git\" ]; then\n\t\techo \"$1/.git\"\n\telse\n\t\techo \"$1\"\n\tfi\n}\n\n# Runs git with all the options given as argument, respecting any\n# '--git-dir=<path>' and '-C <path>' options present on the command line\n__git ()\n{\n\tgit ${__git_C_args:+\"${__git_C_args[@]}\"} \\\n\t\t${__git_dir:+--git-dir=\"$__git_dir\"} \"$@\" 2>/dev/null\n}\n\n# Removes backslash escaping, single quotes and double quotes from a word,\n# stores the result in the variable $dequoted_word.\n# 1: The word to dequote.\n__git_dequote ()\n{\n\tlocal rest=\"$1\" len ch\n\n\tdequoted_word=\"\"\n\n\twhile test -n \"$rest\"; do\n\t\tlen=${#dequoted_word}\n\t\tdequoted_word=\"$dequoted_word${rest%%[\\\\\\'\\\"]*}\"\n\t\trest=\"${rest:$((${#dequoted_word}-$len))}\"\n\n\t\tcase \"${rest:0:1}\" in\n\t\t\\\\)\n\t\t\tch=\"${rest:1:1}\"\n\t\t\tcase \"$ch\" in\n\t\t\t$'\\n')\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tdequoted_word=\"$dequoted_word$ch\"\n\t\t\t\t;;\n\t\t\tesac\n\t\t\trest=\"${rest:2}\"\n\t\t\t;;\n\t\t\\')\n\t\t\trest=\"${rest:1}\"\n\t\t\tlen=${#dequoted_word}\n\t\t\tdequoted_word=\"$dequoted_word${rest%%\\'*}\"\n\t\t\trest=\"${rest:$((${#dequoted_word}-$len+1))}\"\n\t\t\t;;\n\t\t\\\")\n\t\t\trest=\"${rest:1}\"\n\t\t\twhile test -n \"$rest\" ; do\n\t\t\t\tlen=${#dequoted_word}\n\t\t\t\tdequoted_word=\"$dequoted_word${rest%%[\\\\\\\"]*}\"\n\t\t\t\trest=\"${rest:$((${#dequoted_word}-$len))}\"\n\t\t\t\tcase \"${rest:0:1}\" in\n\t\t\t\t\\\\)\n\t\t\t\t\tch=\"${rest:1:1}\"\n\t\t\t\t\tcase \"$ch\" in\n\t\t\t\t\t\\\"|\\\\|\\$|\\`)\n\t\t\t\t\t\tdequoted_word=\"$dequoted_word$ch\"\n\t\t\t\t\t\t;;\n\t\t\t\t\t$'\\n')\n\t\t\t\t\t\t;;\n\t\t\t\t\t*)\n\t\t\t\t\t\tdequoted_word=\"$dequoted_word\\\\$ch\"\n\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\trest=\"${rest:2}\"\n\t\t\t\t\t;;\n\t\t\t\t\\\")\n\t\t\t\t\trest=\"${rest:1}\"\n\t\t\t\t\tbreak\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\tdone\n\t\t\t;;\n\t\tesac\n\tdone\n}\n\n# The following function is based on code from:\n#\n#   bash_completion - programmable completion functions for bash 3.2+\n#\n#   Copyright © 2006-2008, Ian Macdonald <ian@caliban.org>\n#             © 2009-2010, Bash Completion Maintainers\n#                     <bash-completion-devel@lists.alioth.debian.org>\n#\n#   This program is free software; you can redistribute it and/or modify\n#   it under the terms of the GNU General Public License as published by\n#   the Free Software Foundation; either version 2, or (at your option)\n#   any later version.\n#\n#   This program is distributed in the hope that it will be useful,\n#   but WITHOUT ANY WARRANTY; without even the implied warranty of\n#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n#   GNU General Public License for more details.\n#\n#   You should have received a copy of the GNU General Public License\n#   along with this program; if not, see <http://www.gnu.org/licenses/>.\n#\n#   The latest version of this software can be obtained here:\n#\n#   http://bash-completion.alioth.debian.org/\n#\n#   RELEASE: 2.x\n\n# This function can be used to access a tokenized list of words\n# on the command line:\n#\n#\t__git_reassemble_comp_words_by_ref '=:'\n#\tif test \"${words_[cword_-1]}\" = -w\n#\tthen\n#\t\t...\n#\tfi\n#\n# The argument should be a collection of characters from the list of\n# word completion separators (COMP_WORDBREAKS) to treat as ordinary\n# characters.\n#\n# This is roughly equivalent to going back in time and setting\n# COMP_WORDBREAKS to exclude those characters.  The intent is to\n# make option types like --date=<type> and <rev>:<path> easy to\n# recognize by treating each shell word as a single token.\n#\n# It is best not to set COMP_WORDBREAKS directly because the value is\n# shared with other completion scripts.  By the time the completion\n# function gets called, COMP_WORDS has already been populated so local\n# changes to COMP_WORDBREAKS have no effect.\n#\n# Output: words_, cword_, cur_.\n\n__git_reassemble_comp_words_by_ref()\n{\n\tlocal exclude i j first\n\t# Which word separators to exclude?\n\texclude=\"${1//[^$COMP_WORDBREAKS]}\"\n\tcword_=$COMP_CWORD\n\tif [ -z \"$exclude\" ]; then\n\t\twords_=(\"${COMP_WORDS[@]}\")\n\t\treturn\n\tfi\n\t# List of word completion separators has shrunk;\n\t# re-assemble words to complete.\n\tfor ((i=0, j=0; i < ${#COMP_WORDS[@]}; i++, j++)); do\n\t\t# Append each nonempty word consisting of just\n\t\t# word separator characters to the current word.\n\t\tfirst=t\n\t\twhile\n\t\t\t[ $i -gt 0 ] &&\n\t\t\t[ -n \"${COMP_WORDS[$i]}\" ] &&\n\t\t\t# word consists of excluded word separators\n\t\t\t[ \"${COMP_WORDS[$i]//[^$exclude]}\" = \"${COMP_WORDS[$i]}\" ]\n\t\tdo\n\t\t\t# Attach to the previous token,\n\t\t\t# unless the previous token is the command name.\n\t\t\tif [ $j -ge 2 ] && [ -n \"$first\" ]; then\n\t\t\t\t((j--))\n\t\t\tfi\n\t\t\tfirst=\n\t\t\twords_[$j]=${words_[j]}${COMP_WORDS[i]}\n\t\t\tif [ $i = $COMP_CWORD ]; then\n\t\t\t\tcword_=$j\n\t\t\tfi\n\t\t\tif (($i < ${#COMP_WORDS[@]} - 1)); then\n\t\t\t\t((i++))\n\t\t\telse\n\t\t\t\t# Done.\n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\t\twords_[$j]=${words_[j]}${COMP_WORDS[i]}\n\t\tif [ $i = $COMP_CWORD ]; then\n\t\t\tcword_=$j\n\t\tfi\n\tdone\n}\n\nif ! type _get_comp_words_by_ref >/dev/null 2>&1; then\n_get_comp_words_by_ref ()\n{\n\tlocal exclude cur_ words_ cword_\n\tif [ \"$1\" = \"-n\" ]; then\n\t\texclude=$2\n\t\tshift 2\n\tfi\n\t__git_reassemble_comp_words_by_ref \"$exclude\"\n\tcur_=${words_[cword_]}\n\twhile [ $# -gt 0 ]; do\n\t\tcase \"$1\" in\n\t\tcur)\n\t\t\tcur=$cur_\n\t\t\t;;\n\t\tprev)\n\t\t\tprev=${words_[$cword_-1]}\n\t\t\t;;\n\t\twords)\n\t\t\twords=(\"${words_[@]}\")\n\t\t\t;;\n\t\tcword)\n\t\t\tcword=$cword_\n\t\t\t;;\n\t\tesac\n\t\tshift\n\tdone\n}\nfi\n\n# Fills the COMPREPLY array with prefiltered words without any additional\n# processing.\n# Callers must take care of providing only words that match the current word\n# to be completed and adding any prefix and/or suffix (trailing space!), if\n# necessary.\n# 1: List of newline-separated matching completion words, complete with\n#    prefix and suffix.\n__gitcomp_direct ()\n{\n\tlocal IFS=$'\\n'\n\n\tCOMPREPLY=($1)\n}\n\n# Similar to __gitcomp_direct, but appends to COMPREPLY instead.\n# Callers must take care of providing only words that match the current word\n# to be completed and adding any prefix and/or suffix (trailing space!), if\n# necessary.\n# 1: List of newline-separated matching completion words, complete with\n#    prefix and suffix.\n__gitcomp_direct_append ()\n{\n\tlocal IFS=$'\\n'\n\n\tCOMPREPLY+=($1)\n}\n\n__gitcompappend ()\n{\n\tlocal x i=${#COMPREPLY[@]}\n\tfor x in $1; do\n\t\tif [[ \"$x\" == \"$3\"* ]]; then\n\t\t\tCOMPREPLY[i++]=\"$2$x$4\"\n\t\tfi\n\tdone\n}\n\n__gitcompadd ()\n{\n\tCOMPREPLY=()\n\t__gitcompappend \"$@\"\n}\n\n# Generates completion reply, appending a space to possible completion words,\n# if necessary.\n# It accepts 1 to 4 arguments:\n# 1: List of possible completion words.\n# 2: A prefix to be added to each possible completion word (optional).\n# 3: Generate possible completion matches for this word (optional).\n# 4: A suffix to be appended to each possible completion word (optional).\n__gitcomp ()\n{\n\tlocal cur_=\"${3-$cur}\"\n\n\tcase \"$cur_\" in\n\t*=)\n\t\t;;\n\t--no-*)\n\t\tlocal c i=0 IFS=$' \\t\\n'\n\t\tfor c in $1; do\n\t\t\tif [[ $c == \"--\" ]]; then\n\t\t\t\tcontinue\n\t\t\tfi\n\t\t\tc=\"$c${4-}\"\n\t\t\tif [[ $c == \"$cur_\"* ]]; then\n\t\t\t\tcase $c in\n\t\t\t\t--*=|*.) ;;\n\t\t\t\t*) c=\"$c \" ;;\n\t\t\t\tesac\n\t\t\t\tCOMPREPLY[i++]=\"${2-}$c\"\n\t\t\tfi\n\t\tdone\n\t\t;;\n\t*)\n\t\tlocal c i=0 IFS=$' \\t\\n'\n\t\tfor c in $1; do\n\t\t\tif [[ $c == \"--\" ]]; then\n\t\t\t\tc=\"--no-...${4-}\"\n\t\t\t\tif [[ $c == \"$cur_\"* ]]; then\n\t\t\t\t\tCOMPREPLY[i++]=\"${2-}$c \"\n\t\t\t\tfi\n\t\t\t\tbreak\n\t\t\tfi\n\t\t\tc=\"$c${4-}\"\n\t\t\tif [[ $c == \"$cur_\"* ]]; then\n\t\t\t\tcase $c in\n\t\t\t\t*=|*.) ;;\n\t\t\t\t*) c=\"$c \" ;;\n\t\t\t\tesac\n\t\t\t\tCOMPREPLY[i++]=\"${2-}$c\"\n\t\t\tfi\n\t\tdone\n\t\t;;\n\tesac\n}\n\n# Clear the variables caching builtins' options when (re-)sourcing\n# the completion script.\nif [[ -n ${ZSH_VERSION-} ]]; then\n\tunset ${(M)${(k)parameters[@]}:#__gitcomp_builtin_*} 2>/dev/null\nelse\n\tunset $(compgen -v __gitcomp_builtin_)\nfi\n\n# This function is equivalent to\n#\n#    __gitcomp \"$(git xxx --git-completion-helper) ...\"\n#\n# except that the output is cached. Accept 1-3 arguments:\n# 1: the git command to execute, this is also the cache key\n# 2: extra options to be added on top (e.g. negative forms)\n# 3: options to be excluded\n__gitcomp_builtin ()\n{\n\t# spaces must be replaced with underscore for multi-word\n\t# commands, e.g. \"git remote add\" becomes remote_add.\n\tlocal cmd=\"$1\"\n\tlocal incl=\"${2-}\"\n\tlocal excl=\"${3-}\"\n\n\tlocal var=__gitcomp_builtin_\"${cmd//-/_}\"\n\tlocal options\n\teval \"options=\\${$var-}\"\n\n\tif [ -z \"$options\" ]; then\n\t\tlocal completion_helper\n\t\tif [ \"${GIT_COMPLETION_SHOW_ALL-}\" = \"1\" ]; then\n\t\t\tcompletion_helper=\"--git-completion-helper-all\"\n\t\telse\n\t\t\tcompletion_helper=\"--git-completion-helper\"\n\t\tfi\n\t\t# leading and trailing spaces are significant to make\n\t\t# option removal work correctly.\n\t\toptions=\" $incl $(__git ${cmd/_/ } $completion_helper) \" || return\n\n\t\tfor i in $excl; do\n\t\t\toptions=\"${options/ $i / }\"\n\t\tdone\n\t\teval \"$var=\\\"$options\\\"\"\n\tfi\n\n\t__gitcomp \"$options\"\n}\n\n# Variation of __gitcomp_nl () that appends to the existing list of\n# completion candidates, COMPREPLY.\n__gitcomp_nl_append ()\n{\n\tlocal IFS=$'\\n'\n\t__gitcompappend \"$1\" \"${2-}\" \"${3-$cur}\" \"${4- }\"\n}\n\n# Generates completion reply from newline-separated possible completion words\n# by appending a space to all of them.\n# It accepts 1 to 4 arguments:\n# 1: List of possible completion words, separated by a single newline.\n# 2: A prefix to be added to each possible completion word (optional).\n# 3: Generate possible completion matches for this word (optional).\n# 4: A suffix to be appended to each possible completion word instead of\n#    the default space (optional).  If specified but empty, nothing is\n#    appended.\n__gitcomp_nl ()\n{\n\tCOMPREPLY=()\n\t__gitcomp_nl_append \"$@\"\n}\n\n# Fills the COMPREPLY array with prefiltered paths without any additional\n# processing.\n# Callers must take care of providing only paths that match the current path\n# to be completed and adding any prefix path components, if necessary.\n# 1: List of newline-separated matching paths, complete with all prefix\n#    path components.\n__gitcomp_file_direct ()\n{\n\tlocal IFS=$'\\n'\n\n\tCOMPREPLY=($1)\n\n\t# use a hack to enable file mode in bash < 4\n\tcompopt -o filenames +o nospace 2>/dev/null ||\n\tcompgen -f /non-existing-dir/ >/dev/null ||\n\ttrue\n}\n\n# Generates completion reply with compgen from newline-separated possible\n# completion filenames.\n# It accepts 1 to 3 arguments:\n# 1: List of possible completion filenames, separated by a single newline.\n# 2: A directory prefix to be added to each possible completion filename\n#    (optional).\n# 3: Generate possible completion matches for this word (optional).\n__gitcomp_file ()\n{\n\tlocal IFS=$'\\n'\n\n\t# XXX does not work when the directory prefix contains a tilde,\n\t# since tilde expansion is not applied.\n\t# This means that COMPREPLY will be empty and Bash default\n\t# completion will be used.\n\t__gitcompadd \"$1\" \"${2-}\" \"${3-$cur}\" \"\"\n\n\t# use a hack to enable file mode in bash < 4\n\tcompopt -o filenames +o nospace 2>/dev/null ||\n\tcompgen -f /non-existing-dir/ >/dev/null ||\n\ttrue\n}\n\n# Execute 'git ls-files', unless the --committable option is specified, in\n# which case it runs 'git diff-index' to find out the files that can be\n# committed.  It return paths relative to the directory specified in the first\n# argument, and using the options specified in the second argument.\n__git_ls_files_helper ()\n{\n\tif [ \"$2\" = \"--committable\" ]; then\n\t\t__git -C \"$1\" -c core.quotePath=false diff-index \\\n\t\t\t--name-only --relative HEAD -- \"${3//\\\\/\\\\\\\\}*\"\n\telse\n\t\t# NOTE: $2 is not quoted in order to support multiple options\n\t\t__git -C \"$1\" -c core.quotePath=false ls-files \\\n\t\t\t--exclude-standard $2 -- \"${3//\\\\/\\\\\\\\}*\"\n\tfi\n}\n\n\n# __git_index_files accepts 1 or 2 arguments:\n# 1: Options to pass to ls-files (required).\n# 2: A directory path (optional).\n#    If provided, only files within the specified directory are listed.\n#    Sub directories are never recursed.  Path must have a trailing\n#    slash.\n# 3: List only paths matching this path component (optional).\n__git_index_files ()\n{\n\tlocal root=\"$2\" match=\"$3\"\n\n\t__git_ls_files_helper \"$root\" \"$1\" \"${match:-?}\" |\n\tawk -F / -v pfx=\"${2//\\\\/\\\\\\\\}\" '{\n\t\tpaths[$1] = 1\n\t}\n\tEND {\n\t\tfor (p in paths) {\n\t\t\tif (substr(p, 1, 1) != \"\\\"\") {\n\t\t\t\t# No special characters, easy!\n\t\t\t\tprint pfx p\n\t\t\t\tcontinue\n\t\t\t}\n\n\t\t\t# The path is quoted.\n\t\t\tp = dequote(p)\n\t\t\tif (p == \"\")\n\t\t\t\tcontinue\n\n\t\t\t# Even when a directory name itself does not contain\n\t\t\t# any special characters, it will still be quoted if\n\t\t\t# any of its (stripped) trailing path components do.\n\t\t\t# Because of this we may have seen the same directory\n\t\t\t# both quoted and unquoted.\n\t\t\tif (p in paths)\n\t\t\t\t# We have seen the same directory unquoted,\n\t\t\t\t# skip it.\n\t\t\t\tcontinue\n\t\t\telse\n\t\t\t\tprint pfx p\n\t\t}\n\t}\n\tfunction dequote(p,    bs_idx, out, esc, esc_idx, dec) {\n\t\t# Skip opening double quote.\n\t\tp = substr(p, 2)\n\n\t\t# Interpret backslash escape sequences.\n\t\twhile ((bs_idx = index(p, \"\\\\\")) != 0) {\n\t\t\tout = out substr(p, 1, bs_idx - 1)\n\t\t\tesc = substr(p, bs_idx + 1, 1)\n\t\t\tp = substr(p, bs_idx + 2)\n\n\t\t\tif ((esc_idx = index(\"abtvfr\\\"\\\\\", esc)) != 0) {\n\t\t\t\t# C-style one-character escape sequence.\n\t\t\t\tout = out substr(\"\\a\\b\\t\\v\\f\\r\\\"\\\\\",\n\t\t\t\t\t\t esc_idx, 1)\n\t\t\t} else if (esc == \"n\") {\n\t\t\t\t# Uh-oh, a newline character.\n\t\t\t\t# We cannot reliably put a pathname\n\t\t\t\t# containing a newline into COMPREPLY,\n\t\t\t\t# and the newline would create a mess.\n\t\t\t\t# Skip this path.\n\t\t\t\treturn \"\"\n\t\t\t} else {\n\t\t\t\t# Must be a \\nnn octal value, then.\n\t\t\t\tdec = esc             * 64 + \\\n\t\t\t\t      substr(p, 1, 1) * 8  + \\\n\t\t\t\t      substr(p, 2, 1)\n\t\t\t\tout = out sprintf(\"%c\", dec)\n\t\t\t\tp = substr(p, 3)\n\t\t\t}\n\t\t}\n\t\t# Drop closing double quote, if there is one.\n\t\t# (There is not any if this is a directory, as it was\n\t\t# already stripped with the trailing path components.)\n\t\tif (substr(p, length(p), 1) == \"\\\"\")\n\t\t\tout = out substr(p, 1, length(p) - 1)\n\t\telse\n\t\t\tout = out p\n\n\t\treturn out\n\t}'\n}\n\n# __git_complete_index_file requires 1 argument:\n# 1: the options to pass to ls-file\n#\n# The exception is --committable, which finds the files appropriate commit.\n__git_complete_index_file ()\n{\n\tlocal dequoted_word pfx=\"\" cur_\n\n\t__git_dequote \"$cur\"\n\n\tcase \"$dequoted_word\" in\n\t?*/*)\n\t\tpfx=\"${dequoted_word%/*}/\"\n\t\tcur_=\"${dequoted_word##*/}\"\n\t\t;;\n\t*)\n\t\tcur_=\"$dequoted_word\"\n\tesac\n\n\t__gitcomp_file_direct \"$(__git_index_files \"$1\" \"$pfx\" \"$cur_\")\"\n}\n\n# Lists branches from the local repository.\n# 1: A prefix to be added to each listed branch (optional).\n# 2: List only branches matching this word (optional; list all branches if\n#    unset or empty).\n# 3: A suffix to be appended to each listed branch (optional).\n__git_heads ()\n{\n\tlocal pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\"\n\n\t__git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\\n\t\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\t\"refs/heads/$cur_*\" \"refs/heads/$cur_*/**\"\n}\n\n# Lists branches from remote repositories.\n# 1: A prefix to be added to each listed branch (optional).\n# 2: List only branches matching this word (optional; list all branches if\n#    unset or empty).\n# 3: A suffix to be appended to each listed branch (optional).\n__git_remote_heads ()\n{\n\tlocal pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\"\n\n\t__git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\\n\t\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\t\"refs/remotes/$cur_*\" \"refs/remotes/$cur_*/**\"\n}\n\n# Lists tags from the local repository.\n# Accepts the same positional parameters as __git_heads() above.\n__git_tags ()\n{\n\tlocal pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\"\n\n\t__git for-each-ref --format=\"${pfx//\\%/%%}%(refname:strip=2)$sfx\" \\\n\t\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\t\"refs/tags/$cur_*\" \"refs/tags/$cur_*/**\"\n}\n\n# List unique branches from refs/remotes used for 'git checkout' and 'git\n# switch' tracking DWIMery.\n# 1: A prefix to be added to each listed branch (optional)\n# 2: List only branches matching this word (optional; list all branches if\n#    unset or empty).\n# 3: A suffix to be appended to each listed branch (optional).\n__git_dwim_remote_heads ()\n{\n\tlocal pfx=\"${1-}\" cur_=\"${2-}\" sfx=\"${3-}\"\n\tlocal fer_pfx=\"${pfx//\\%/%%}\" # \"escape\" for-each-ref format specifiers\n\n\t# employ the heuristic used by git checkout and git switch\n\t# Try to find a remote branch that cur_es the completion word\n\t# but only output if the branch name is unique\n\t__git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\\n\t\t--sort=\"refname:strip=3\" \\\n\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\"refs/remotes/*/$cur_*\" \"refs/remotes/*/$cur_*/**\" | \\\n\tuniq -u\n}\n\n# Lists refs from the local (by default) or from a remote repository.\n# It accepts 0, 1 or 2 arguments:\n# 1: The remote to list refs from (optional; ignored, if set but empty).\n#    Can be the name of a configured remote, a path, or a URL.\n# 2: In addition to local refs, list unique branches from refs/remotes/ for\n#    'git checkout's tracking DWIMery (optional; ignored, if set but empty).\n# 3: A prefix to be added to each listed ref (optional).\n# 4: List only refs matching this word (optional; list all refs if unset or\n#    empty).\n# 5: A suffix to be appended to each listed ref (optional; ignored, if set\n#    but empty).\n#\n# Use __git_complete_refs() instead.\n__git_refs ()\n{\n\tlocal i hash dir track=\"${2-}\"\n\tlocal list_refs_from=path remote=\"${1-}\"\n\tlocal format refs\n\tlocal pfx=\"${3-}\" cur_=\"${4-$cur}\" sfx=\"${5-}\"\n\tlocal match=\"${4-}\"\n\tlocal umatch=\"${4-}\"\n\tlocal fer_pfx=\"${pfx//\\%/%%}\" # \"escape\" for-each-ref format specifiers\n\n\t__git_find_repo_path\n\tdir=\"$__git_repo_path\"\n\n\tif [ -z \"$remote\" ]; then\n\t\tif [ -z \"$dir\" ]; then\n\t\t\treturn\n\t\tfi\n\telse\n\t\tif __git_is_configured_remote \"$remote\"; then\n\t\t\t# configured remote takes precedence over a\n\t\t\t# local directory with the same name\n\t\t\tlist_refs_from=remote\n\t\telif [ -d \"$remote/.git\" ]; then\n\t\t\tdir=\"$remote/.git\"\n\t\telif [ -d \"$remote\" ]; then\n\t\t\tdir=\"$remote\"\n\t\telse\n\t\t\tlist_refs_from=url\n\t\tfi\n\tfi\n\n\tif test \"${GIT_COMPLETION_IGNORE_CASE:+1}\" = \"1\"\n\tthen\n\t\t# uppercase with tr instead of ${match,^^} for bash 3.2 compatibility\n\t\tumatch=$(echo \"$match\" | tr a-z A-Z 2>/dev/null || echo \"$match\")\n\tfi\n\n\tif [ \"$list_refs_from\" = path ]; then\n\t\tif [[ \"$cur_\" == ^* ]]; then\n\t\t\tpfx=\"$pfx^\"\n\t\t\tfer_pfx=\"$fer_pfx^\"\n\t\t\tcur_=${cur_#^}\n\t\t\tmatch=${match#^}\n\t\t\tumatch=${umatch#^}\n\t\tfi\n\t\tcase \"$cur_\" in\n\t\trefs|refs/*)\n\t\t\tformat=\"refname\"\n\t\t\trefs=(\"$match*\" \"$match*/**\")\n\t\t\ttrack=\"\"\n\t\t\t;;\n\t\t*)\n\t\t\tfor i in HEAD FETCH_HEAD ORIG_HEAD MERGE_HEAD REBASE_HEAD CHERRY_PICK_HEAD REVERT_HEAD BISECT_HEAD AUTO_MERGE; do\n\t\t\t\tcase \"$i\" in\n\t\t\t\t$match*|$umatch*)\n\t\t\t\t\tif [ -e \"$dir/$i\" ]; then\n\t\t\t\t\t\techo \"$pfx$i$sfx\"\n\t\t\t\t\tfi\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\tdone\n\t\t\tformat=\"refname:strip=2\"\n\t\t\trefs=(\"refs/tags/$match*\" \"refs/tags/$match*/**\"\n\t\t\t\t\"refs/heads/$match*\" \"refs/heads/$match*/**\"\n\t\t\t\t\"refs/remotes/$match*\" \"refs/remotes/$match*/**\")\n\t\t\t;;\n\t\tesac\n\t\t__git_dir=\"$dir\" __git for-each-ref --format=\"$fer_pfx%($format)$sfx\" \\\n\t\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\t\"${refs[@]}\"\n\t\tif [ -n \"$track\" ]; then\n\t\t\t__git_dwim_remote_heads \"$pfx\" \"$match\" \"$sfx\"\n\t\tfi\n\t\treturn\n\tfi\n\tcase \"$cur_\" in\n\trefs|refs/*)\n\t\t__git ls-remote \"$remote\" \"$match*\" | \\\n\t\twhile read -r hash i; do\n\t\t\tcase \"$i\" in\n\t\t\t*^{}) ;;\n\t\t\t*) echo \"$pfx$i$sfx\" ;;\n\t\t\tesac\n\t\tdone\n\t\t;;\n\t*)\n\t\tif [ \"$list_refs_from\" = remote ]; then\n\t\t\tcase \"HEAD\" in\n\t\t\t$match*|$umatch*)\techo \"${pfx}HEAD$sfx\" ;;\n\t\t\tesac\n\t\t\t__git for-each-ref --format=\"$fer_pfx%(refname:strip=3)$sfx\" \\\n\t\t\t\t${GIT_COMPLETION_IGNORE_CASE+--ignore-case} \\\n\t\t\t\t\"refs/remotes/$remote/$match*\" \\\n\t\t\t\t\"refs/remotes/$remote/$match*/**\"\n\t\telse\n\t\t\tlocal query_symref\n\t\t\tcase \"HEAD\" in\n\t\t\t$match*|$umatch*)\tquery_symref=\"HEAD\" ;;\n\t\t\tesac\n\t\t\t__git ls-remote \"$remote\" $query_symref \\\n\t\t\t\t\"refs/tags/$match*\" \"refs/heads/$match*\" \\\n\t\t\t\t\"refs/remotes/$match*\" |\n\t\t\twhile read -r hash i; do\n\t\t\t\tcase \"$i\" in\n\t\t\t\t*^{})\t;;\n\t\t\t\trefs/*)\techo \"$pfx${i#refs/*/}$sfx\" ;;\n\t\t\t\t*)\techo \"$pfx$i$sfx\" ;;  # symbolic refs\n\t\t\t\tesac\n\t\t\tdone\n\t\tfi\n\t\t;;\n\tesac\n}\n\n# Completes refs, short and long, local and remote, symbolic and pseudo.\n#\n# Usage: __git_complete_refs [<option>]...\n# --remote=<remote>: The remote to list refs from, can be the name of a\n#                    configured remote, a path, or a URL.\n# --dwim: List unique remote branches for 'git switch's tracking DWIMery.\n# --pfx=<prefix>: A prefix to be added to each ref.\n# --cur=<word>: The current ref to be completed.  Defaults to the current\n#               word to be completed.\n# --sfx=<suffix>: A suffix to be appended to each ref instead of the default\n#                 space.\n# --mode=<mode>: What set of refs to complete, one of 'refs' (the default) to\n#                complete all refs, 'heads' to complete only branches, or\n#                'remote-heads' to complete only remote branches. Note that\n#                --remote is only compatible with --mode=refs.\n__git_complete_refs ()\n{\n\tlocal remote= dwim= pfx= cur_=\"$cur\" sfx=\" \" mode=\"refs\"\n\n\twhile test $# != 0; do\n\t\tcase \"$1\" in\n\t\t--remote=*)\tremote=\"${1##--remote=}\" ;;\n\t\t--dwim)\t\tdwim=\"yes\" ;;\n\t\t# --track is an old spelling of --dwim\n\t\t--track)\tdwim=\"yes\" ;;\n\t\t--pfx=*)\tpfx=\"${1##--pfx=}\" ;;\n\t\t--cur=*)\tcur_=\"${1##--cur=}\" ;;\n\t\t--sfx=*)\tsfx=\"${1##--sfx=}\" ;;\n\t\t--mode=*)\tmode=\"${1##--mode=}\" ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\t# complete references based on the specified mode\n\tcase \"$mode\" in\n\t\trefs)\n\t\t\t__gitcomp_direct \"$(__git_refs \"$remote\" \"\" \"$pfx\" \"$cur_\" \"$sfx\")\" ;;\n\t\theads)\n\t\t\t__gitcomp_direct \"$(__git_heads \"$pfx\" \"$cur_\" \"$sfx\")\" ;;\n\t\tremote-heads)\n\t\t\t__gitcomp_direct \"$(__git_remote_heads \"$pfx\" \"$cur_\" \"$sfx\")\" ;;\n\t\t*)\n\t\t\treturn 1 ;;\n\tesac\n\n\t# Append DWIM remote branch names if requested\n\tif [ \"$dwim\" = \"yes\" ]; then\n\t\t__gitcomp_direct_append \"$(__git_dwim_remote_heads \"$pfx\" \"$cur_\" \"$sfx\")\"\n\tfi\n}\n\n# __git_refs2 requires 1 argument (to pass to __git_refs)\n# Deprecated: use __git_complete_fetch_refspecs() instead.\n__git_refs2 ()\n{\n\tlocal i\n\tfor i in $(__git_refs \"$1\"); do\n\t\techo \"$i:$i\"\n\tdone\n}\n\n# Completes refspecs for fetching from a remote repository.\n# 1: The remote repository.\n# 2: A prefix to be added to each listed refspec (optional).\n# 3: The ref to be completed as a refspec instead of the current word to be\n#    completed (optional)\n# 4: A suffix to be appended to each listed refspec instead of the default\n#    space (optional).\n__git_complete_fetch_refspecs ()\n{\n\tlocal i remote=\"$1\" pfx=\"${2-}\" cur_=\"${3-$cur}\" sfx=\"${4- }\"\n\n\t__gitcomp_direct \"$(\n\t\tfor i in $(__git_refs \"$remote\" \"\" \"\" \"$cur_\") ; do\n\t\t\techo \"$pfx$i:$i$sfx\"\n\t\tdone\n\t\t)\"\n}\n\n# __git_refs_remotes requires 1 argument (to pass to ls-remote)\n__git_refs_remotes ()\n{\n\tlocal i hash\n\t__git ls-remote \"$1\" 'refs/heads/*' | \\\n\twhile read -r hash i; do\n\t\techo \"$i:refs/remotes/$1/${i#refs/heads/}\"\n\tdone\n}\n\n__git_remotes ()\n{\n\t__git_find_repo_path\n\ttest -d \"$__git_repo_path/remotes\" && ls -1 \"$__git_repo_path/remotes\"\n\t__git remote\n}\n\n# Returns true if $1 matches the name of a configured remote, false otherwise.\n__git_is_configured_remote ()\n{\n\tlocal remote\n\tfor remote in $(__git_remotes); do\n\t\tif [ \"$remote\" = \"$1\" ]; then\n\t\t\treturn 0\n\t\tfi\n\tdone\n\treturn 1\n}\n\n__git_list_merge_strategies ()\n{\n\tLANG=C LC_ALL=C git merge -s help 2>&1 |\n\tsed -n -e '/[Aa]vailable strategies are: /,/^$/{\n\t\ts/\\.$//\n\t\ts/.*://\n\t\ts/^[ \t]*//\n\t\ts/[ \t]*$//\n\t\tp\n\t}'\n}\n\n__git_merge_strategies=\n# 'git merge -s help' (and thus detection of the merge strategy\n# list) fails, unfortunately, if run outside of any git working\n# tree.  __git_merge_strategies is set to the empty string in\n# that case, and the detection will be repeated the next time it\n# is needed.\n__git_compute_merge_strategies ()\n{\n\ttest -n \"$__git_merge_strategies\" ||\n\t__git_merge_strategies=$(__git_list_merge_strategies)\n}\n\n__git_merge_strategy_options=\"ours theirs subtree subtree= patience\n\thistogram diff-algorithm= ignore-space-change ignore-all-space\n\tignore-space-at-eol renormalize no-renormalize no-renames\n\tfind-renames find-renames= rename-threshold=\"\n\n__git_complete_revlist_file ()\n{\n\tlocal dequoted_word pfx ls ref cur_=\"$cur\"\n\tcase \"$cur_\" in\n\t*..?*:*)\n\t\treturn\n\t\t;;\n\t?*:*)\n\t\tref=\"${cur_%%:*}\"\n\t\tcur_=\"${cur_#*:}\"\n\n\t\t__git_dequote \"$cur_\"\n\n\t\tcase \"$dequoted_word\" in\n\t\t?*/*)\n\t\t\tpfx=\"${dequoted_word%/*}\"\n\t\t\tcur_=\"${dequoted_word##*/}\"\n\t\t\tls=\"$ref:$pfx\"\n\t\t\tpfx=\"$pfx/\"\n\t\t\t;;\n\t\t*)\n\t\t\tcur_=\"$dequoted_word\"\n\t\t\tls=\"$ref\"\n\t\t\t;;\n\t\tesac\n\n\t\tcase \"$COMP_WORDBREAKS\" in\n\t\t*:*) : great ;;\n\t\t*)   pfx=\"$ref:$pfx\" ;;\n\t\tesac\n\n\t\t__gitcomp_file \"$(__git ls-tree \"$ls\" \\\n\t\t\t\t| sed 's/^.*\t//\n\t\t\t\t       s/$//')\" \\\n\t\t\t\"$pfx\" \"$cur_\"\n\t\t;;\n\t*...*)\n\t\tpfx=\"${cur_%...*}...\"\n\t\tcur_=\"${cur_#*...}\"\n\t\t__git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\t;;\n\t*..*)\n\t\tpfx=\"${cur_%..*}..\"\n\t\tcur_=\"${cur_#*..}\"\n\t\t__git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\t;;\n\t*)\n\t\t__git_complete_refs\n\t\t;;\n\tesac\n}\n\n__git_complete_file ()\n{\n\t__git_complete_revlist_file\n}\n\n__git_complete_revlist ()\n{\n\t__git_complete_revlist_file\n}\n\n__git_complete_remote_or_refspec ()\n{\n\tlocal cur_=\"$cur\" cmd=\"${words[__git_cmd_idx]}\"\n\tlocal i c=$((__git_cmd_idx+1)) remote=\"\" pfx=\"\" lhs=1 no_complete_refspec=0\n\tif [ \"$cmd\" = \"remote\" ]; then\n\t\t((c++))\n\tfi\n\twhile [ $c -lt $cword ]; do\n\t\ti=\"${words[c]}\"\n\t\tcase \"$i\" in\n\t\t--mirror) [ \"$cmd\" = \"push\" ] && no_complete_refspec=1 ;;\n\t\t-d|--delete) [ \"$cmd\" = \"push\" ] && lhs=0 ;;\n\t\t--all)\n\t\t\tcase \"$cmd\" in\n\t\t\tpush) no_complete_refspec=1 ;;\n\t\t\tfetch)\n\t\t\t\treturn\n\t\t\t\t;;\n\t\t\t*) ;;\n\t\t\tesac\n\t\t\t;;\n\t\t--multiple) no_complete_refspec=1; break ;;\n\t\t-*) ;;\n\t\t*) remote=\"$i\"; break ;;\n\t\tesac\n\t\t((c++))\n\tdone\n\tif [ -z \"$remote\" ]; then\n\t\t__gitcomp_nl \"$(__git_remotes)\"\n\t\treturn\n\tfi\n\tif [ $no_complete_refspec = 1 ]; then\n\t\treturn\n\tfi\n\t[ \"$remote\" = \".\" ] && remote=\n\tcase \"$cur_\" in\n\t*:*)\n\t\tcase \"$COMP_WORDBREAKS\" in\n\t\t*:*) : great ;;\n\t\t*)   pfx=\"${cur_%%:*}:\" ;;\n\t\tesac\n\t\tcur_=\"${cur_#*:}\"\n\t\tlhs=0\n\t\t;;\n\t+*)\n\t\tpfx=\"+\"\n\t\tcur_=\"${cur_#+}\"\n\t\t;;\n\tesac\n\tcase \"$cmd\" in\n\tfetch)\n\t\tif [ $lhs = 1 ]; then\n\t\t\t__git_complete_fetch_refspecs \"$remote\" \"$pfx\" \"$cur_\"\n\t\telse\n\t\t\t__git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\tfi\n\t\t;;\n\tpull|remote)\n\t\tif [ $lhs = 1 ]; then\n\t\t\t__git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\telse\n\t\t\t__git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\tfi\n\t\t;;\n\tpush)\n\t\tif [ $lhs = 1 ]; then\n\t\t\t__git_complete_refs --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\telse\n\t\t\t__git_complete_refs --remote=\"$remote\" --pfx=\"$pfx\" --cur=\"$cur_\"\n\t\tfi\n\t\t;;\n\tesac\n}\n\n__git_complete_strategy ()\n{\n\t__git_compute_merge_strategies\n\tcase \"$prev\" in\n\t-s|--strategy)\n\t\t__gitcomp \"$__git_merge_strategies\"\n\t\treturn 0\n\t\t;;\n\t-X)\n\t\t__gitcomp \"$__git_merge_strategy_options\"\n\t\treturn 0\n\t\t;;\n\tesac\n\tcase \"$cur\" in\n\t--strategy=*)\n\t\t__gitcomp \"$__git_merge_strategies\" \"\" \"${cur##--strategy=}\"\n\t\treturn 0\n\t\t;;\n\t--strategy-option=*)\n\t\t__gitcomp \"$__git_merge_strategy_options\" \"\" \"${cur##--strategy-option=}\"\n\t\treturn 0\n\t\t;;\n\tesac\n\treturn 1\n}\n\n__git_all_commands=\n__git_compute_all_commands ()\n{\n\ttest -n \"$__git_all_commands\" ||\n\t__git_all_commands=$(__git --list-cmds=main,others,alias,nohelpers)\n}\n\n# Lists all set config variables starting with the given section prefix,\n# with the prefix removed.\n__git_get_config_variables ()\n{\n\tlocal section=\"$1\" i IFS=$'\\n'\n\tfor i in $(__git config --name-only --get-regexp \"^$section\\..*\"); do\n\t\techo \"${i#$section.}\"\n\tdone\n}\n\n__git_pretty_aliases ()\n{\n\t__git_get_config_variables \"pretty\"\n}\n\n# __git_aliased_command requires 1 argument\n__git_aliased_command ()\n{\n\tlocal cur=$1 last list= word cmdline\n\n\twhile [[ -n \"$cur\" ]]; do\n\t\tif [[ \"$list\" == *\" $cur \"* ]]; then\n\t\t\t# loop detected\n\t\t\treturn\n\t\tfi\n\n\t\tcmdline=$(__git config --get \"alias.$cur\")\n\t\tlist=\" $cur $list\"\n\t\tlast=$cur\n\t\tcur=\n\n\t\tfor word in $cmdline; do\n\t\t\tcase \"$word\" in\n\t\t\t\\!gitk|gitk)\n\t\t\t\tcur=\"gitk\"\n\t\t\t\tbreak\n\t\t\t\t;;\n\t\t\t\\!*)\t: shell command alias ;;\n\t\t\t-*)\t: option ;;\n\t\t\t*=*)\t: setting env ;;\n\t\t\tgit)\t: git itself ;;\n\t\t\t\\(\\))   : skip parens of shell function definition ;;\n\t\t\t{)\t: skip start of shell helper function ;;\n\t\t\t:)\t: skip null command ;;\n\t\t\t\\'*)\t: skip opening quote after sh -c ;;\n\t\t\t*)\n\t\t\t\tcur=\"${word%;}\"\n\t\t\t\tbreak\n\t\t\tesac\n\t\tdone\n\tdone\n\n\tcur=$last\n\tif [[ \"$cur\" != \"$1\" ]]; then\n\t\techo \"$cur\"\n\tfi\n}\n\n# Check whether one of the given words is present on the command line,\n# and print the first word found.\n#\n# Usage: __git_find_on_cmdline [<option>]... \"<wordlist>\"\n# --show-idx: Optionally show the index of the found word in the $words array.\n__git_find_on_cmdline ()\n{\n\tlocal word c=\"$__git_cmd_idx\" show_idx\n\n\twhile test $# -gt 1; do\n\t\tcase \"$1\" in\n\t\t--show-idx)\tshow_idx=y ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\tlocal wordlist=\"$1\"\n\n\twhile [ $c -lt $cword ]; do\n\t\tfor word in $wordlist; do\n\t\t\tif [ \"$word\" = \"${words[c]}\" ]; then\n\t\t\t\tif [ -n \"${show_idx-}\" ]; then\n\t\t\t\t\techo \"$c $word\"\n\t\t\t\telse\n\t\t\t\t\techo \"$word\"\n\t\t\t\tfi\n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\t\t((c++))\n\tdone\n}\n\n# Similar to __git_find_on_cmdline, except that it loops backwards and thus\n# prints the *last* word found. Useful for finding which of two options that\n# supersede each other came last, such as \"--guess\" and \"--no-guess\".\n#\n# Usage: __git_find_last_on_cmdline [<option>]... \"<wordlist>\"\n# --show-idx: Optionally show the index of the found word in the $words array.\n__git_find_last_on_cmdline ()\n{\n\tlocal word c=$cword show_idx\n\n\twhile test $# -gt 1; do\n\t\tcase \"$1\" in\n\t\t--show-idx)\tshow_idx=y ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\tlocal wordlist=\"$1\"\n\n\twhile [ $c -gt \"$__git_cmd_idx\" ]; do\n\t\t((c--))\n\t\tfor word in $wordlist; do\n\t\t\tif [ \"$word\" = \"${words[c]}\" ]; then\n\t\t\t\tif [ -n \"$show_idx\" ]; then\n\t\t\t\t\techo \"$c $word\"\n\t\t\t\telse\n\t\t\t\t\techo \"$word\"\n\t\t\t\tfi\n\t\t\t\treturn\n\t\t\tfi\n\t\tdone\n\tdone\n}\n\n# Echo the value of an option set on the command line or config\n#\n# $1: short option name\n# $2: long option name including =\n# $3: list of possible values\n# $4: config string (optional)\n#\n# example:\n# result=\"$(__git_get_option_value \"-d\" \"--do-something=\" \\\n#     \"yes no\" \"core.doSomething\")\"\n#\n# result is then either empty (no option set) or \"yes\" or \"no\"\n#\n# __git_get_option_value requires 3 arguments\n__git_get_option_value ()\n{\n\tlocal c short_opt long_opt val\n\tlocal result= values config_key word\n\n\tshort_opt=\"$1\"\n\tlong_opt=\"$2\"\n\tvalues=\"$3\"\n\tconfig_key=\"$4\"\n\n\t((c = $cword - 1))\n\twhile [ $c -ge 0 ]; do\n\t\tword=\"${words[c]}\"\n\t\tfor val in $values; do\n\t\t\tif [ \"$short_opt$val\" = \"$word\" ] ||\n\t\t\t   [ \"$long_opt$val\"  = \"$word\" ]; then\n\t\t\t\tresult=\"$val\"\n\t\t\t\tbreak 2\n\t\t\tfi\n\t\tdone\n\t\t((c--))\n\tdone\n\n\tif [ -n \"$config_key\" ] && [ -z \"$result\" ]; then\n\t\tresult=\"$(__git config \"$config_key\")\"\n\tfi\n\n\techo \"$result\"\n}\n\n__git_has_doubledash ()\n{\n\tlocal c=1\n\twhile [ $c -lt $cword ]; do\n\t\tif [ \"--\" = \"${words[c]}\" ]; then\n\t\t\treturn 0\n\t\tfi\n\t\t((c++))\n\tdone\n\treturn 1\n}\n\n# Try to count non option arguments passed on the command line for the\n# specified git command.\n# When options are used, it is necessary to use the special -- option to\n# tell the implementation were non option arguments begin.\n# XXX this can not be improved, since options can appear everywhere, as\n# an example:\n#\tgit mv x -n y\n#\n# __git_count_arguments requires 1 argument: the git command executed.\n__git_count_arguments ()\n{\n\tlocal word i c=0\n\n\t# Skip \"git\" (first argument)\n\tfor ((i=$__git_cmd_idx; i < ${#words[@]}; i++)); do\n\t\tword=\"${words[i]}\"\n\n\t\tcase \"$word\" in\n\t\t\t--)\n\t\t\t\t# Good; we can assume that the following are only non\n\t\t\t\t# option arguments.\n\t\t\t\t((c = 0))\n\t\t\t\t;;\n\t\t\t\"$1\")\n\t\t\t\t# Skip the specified git command and discard git\n\t\t\t\t# main options\n\t\t\t\t((c = 0))\n\t\t\t\t;;\n\t\t\t?*)\n\t\t\t\t((c++))\n\t\t\t\t;;\n\t\tesac\n\tdone\n\n\tprintf \"%d\" $c\n}\n\n__git_whitespacelist=\"nowarn warn error error-all fix\"\n__git_patchformat=\"mbox stgit stgit-series hg mboxrd\"\n__git_showcurrentpatch=\"diff raw\"\n__git_am_inprogress_options=\"--skip --continue --resolved --abort --quit --show-current-patch\"\n__git_quoted_cr=\"nowarn warn strip\"\n\n_git_am ()\n{\n\t__git_find_repo_path\n\tif [ -d \"$__git_repo_path\"/rebase-apply ]; then\n\t\t__gitcomp \"$__git_am_inprogress_options\"\n\t\treturn\n\tfi\n\tcase \"$cur\" in\n\t--whitespace=*)\n\t\t__gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\"\n\t\treturn\n\t\t;;\n\t--patch-format=*)\n\t\t__gitcomp \"$__git_patchformat\" \"\" \"${cur##--patch-format=}\"\n\t\treturn\n\t\t;;\n\t--show-current-patch=*)\n\t\t__gitcomp \"$__git_showcurrentpatch\" \"\" \"${cur##--show-current-patch=}\"\n\t\treturn\n\t\t;;\n\t--quoted-cr=*)\n\t\t__gitcomp \"$__git_quoted_cr\" \"\" \"${cur##--quoted-cr=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin am \"\" \\\n\t\t\t\"$__git_am_inprogress_options\"\n\t\treturn\n\tesac\n}\n\n_git_apply ()\n{\n\tcase \"$cur\" in\n\t--whitespace=*)\n\t\t__gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin apply\n\t\treturn\n\tesac\n}\n\n_git_add ()\n{\n\tcase \"$cur\" in\n\t--chmod=*)\n\t\t__gitcomp \"+x -x\" \"\" \"${cur##--chmod=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin add\n\t\treturn\n\tesac\n\n\tlocal complete_opt=\"--others --modified --directory --no-empty-directory\"\n\tif test -n \"$(__git_find_on_cmdline \"-u --update\")\"\n\tthen\n\t\tcomplete_opt=\"--modified\"\n\tfi\n\t__git_complete_index_file \"$complete_opt\"\n}\n\n_git_archive ()\n{\n\tcase \"$cur\" in\n\t--format=*)\n\t\t__gitcomp \"$(git archive --list)\" \"\" \"${cur##--format=}\"\n\t\treturn\n\t\t;;\n\t--remote=*)\n\t\t__gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--remote=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin archive \"--format= --list --verbose --prefix= --worktree-attributes\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_file\n}\n\n_git_bisect ()\n{\n\t__git_has_doubledash && return\n\n\tlocal subcommands=\"start bad good skip reset visualize replay log run\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__git_find_repo_path\n\t\tif [ -f \"$__git_repo_path\"/BISECT_START ]; then\n\t\t\t__gitcomp \"$subcommands\"\n\t\telse\n\t\t\t__gitcomp \"replay start\"\n\t\tfi\n\t\treturn\n\tfi\n\n\tcase \"$subcommand\" in\n\tbad|good|reset|skip|start)\n\t\t__git_complete_refs\n\t\t;;\n\t*)\n\t\t;;\n\tesac\n}\n\n__git_ref_fieldlist=\"refname objecttype objectsize objectname upstream push HEAD symref\"\n\n_git_branch ()\n{\n\tlocal i c=\"$__git_cmd_idx\" only_local_ref=\"n\" has_r=\"n\"\n\n\twhile [ $c -lt $cword ]; do\n\t\ti=\"${words[c]}\"\n\t\tcase \"$i\" in\n\t\t-d|-D|--delete|-m|-M|--move|-c|-C|--copy)\n\t\t\tonly_local_ref=\"y\" ;;\n\t\t-r|--remotes)\n\t\t\thas_r=\"y\" ;;\n\t\tesac\n\t\t((c++))\n\tdone\n\n\tcase \"$cur\" in\n\t--set-upstream-to=*)\n\t\t__git_complete_refs --cur=\"${cur##--set-upstream-to=}\"\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin branch\n\t\t;;\n\t*)\n\t\tif [ $only_local_ref = \"y\" -a $has_r = \"n\" ]; then\n\t\t\t__gitcomp_direct \"$(__git_heads \"\" \"$cur\" \" \")\"\n\t\telse\n\t\t\t__git_complete_refs\n\t\tfi\n\t\t;;\n\tesac\n}\n\n_git_bundle ()\n{\n\tlocal cmd=\"${words[__git_cmd_idx+1]}\"\n\tcase \"$cword\" in\n\t$((__git_cmd_idx+1)))\n\t\t__gitcomp \"create list-heads verify unbundle\"\n\t\t;;\n\t$((__git_cmd_idx+2)))\n\t\t# looking for a file\n\t\t;;\n\t*)\n\t\tcase \"$cmd\" in\n\t\t\tcreate)\n\t\t\t\t__git_complete_revlist\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tesac\n}\n\n# Helper function to decide whether or not we should enable DWIM logic for\n# git-switch and git-checkout.\n#\n# To decide between the following rules in decreasing priority order:\n# - the last provided of \"--guess\" or \"--no-guess\" explicitly enable or\n#   disable completion of DWIM logic respectively.\n# - If checkout.guess is false, disable completion of DWIM logic.\n# - If the --no-track option is provided, take this as a hint to disable the\n#   DWIM completion logic\n# - If GIT_COMPLETION_CHECKOUT_NO_GUESS is set, disable the DWIM completion\n#   logic, as requested by the user.\n# - Enable DWIM logic otherwise.\n#\n__git_checkout_default_dwim_mode ()\n{\n\tlocal last_option dwim_opt=\"--dwim\"\n\n\tif [ \"${GIT_COMPLETION_CHECKOUT_NO_GUESS-}\" = \"1\" ]; then\n\t\tdwim_opt=\"\"\n\tfi\n\n\t# --no-track disables DWIM, but with lower priority than\n\t# --guess/--no-guess/checkout.guess\n\tif [ -n \"$(__git_find_on_cmdline \"--no-track\")\" ]; then\n\t\tdwim_opt=\"\"\n\tfi\n\n\t# checkout.guess = false disables DWIM, but with lower priority than\n\t# --guess/--no-guess\n\tif [ \"$(__git config --type=bool checkout.guess)\" = \"false\" ]; then\n\t\tdwim_opt=\"\"\n\tfi\n\n\t# Find the last provided --guess or --no-guess\n\tlast_option=\"$(__git_find_last_on_cmdline \"--guess --no-guess\")\"\n\tcase \"$last_option\" in\n\t\t--guess)\n\t\t\tdwim_opt=\"--dwim\"\n\t\t\t;;\n\t\t--no-guess)\n\t\t\tdwim_opt=\"\"\n\t\t\t;;\n\tesac\n\n\techo \"$dwim_opt\"\n}\n\n_git_checkout ()\n{\n\t__git_has_doubledash && return\n\n\tlocal dwim_opt=\"$(__git_checkout_default_dwim_mode)\"\n\n\tcase \"$prev\" in\n\t-b|-B|--orphan)\n\t\t# Complete local branches (and DWIM branch\n\t\t# remote branch names) for an option argument\n\t\t# specifying a new branch name. This is for\n\t\t# convenience, assuming new branches are\n\t\t# possibly based on pre-existing branch names.\n\t\t__git_complete_refs $dwim_opt --mode=\"heads\"\n\t\treturn\n\t\t;;\n\t*)\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--conflict=*)\n\t\t__gitcomp \"diff3 merge zdiff3\" \"\" \"${cur##--conflict=}\"\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin checkout\n\t\t;;\n\t*)\n\t\t# At this point, we've already handled special completion for\n\t\t# the arguments to -b/-B, and --orphan. There are 3 main\n\t\t# things left we can possibly complete:\n\t\t# 1) a start-point for -b/-B, -d/--detach, or --orphan\n\t\t# 2) a remote head, for --track\n\t\t# 3) an arbitrary reference, possibly including DWIM names\n\t\t#\n\n\t\tif [ -n \"$(__git_find_on_cmdline \"-b -B -d --detach --orphan\")\" ]; then\n\t\t\t__git_complete_refs --mode=\"refs\"\n\t\telif [ -n \"$(__git_find_on_cmdline \"-t --track\")\" ]; then\n\t\t\t__git_complete_refs --mode=\"remote-heads\"\n\t\telse\n\t\t\t__git_complete_refs $dwim_opt --mode=\"refs\"\n\t\tfi\n\t\t;;\n\tesac\n}\n\n__git_sequencer_inprogress_options=\"--continue --quit --abort --skip\"\n\n__git_cherry_pick_inprogress_options=$__git_sequencer_inprogress_options\n\n_git_cherry_pick ()\n{\n\t__git_find_repo_path\n\tif [ -f \"$__git_repo_path\"/CHERRY_PICK_HEAD ]; then\n\t\t__gitcomp \"$__git_cherry_pick_inprogress_options\"\n\t\treturn\n\tfi\n\n\t__git_complete_strategy && return\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin cherry-pick \"\" \\\n\t\t\t\"$__git_cherry_pick_inprogress_options\"\n\t\t;;\n\t*)\n\t\t__git_complete_refs\n\t\t;;\n\tesac\n}\n\n_git_clean ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin clean\n\t\treturn\n\t\t;;\n\tesac\n\n\t# XXX should we check for -x option ?\n\t__git_complete_index_file \"--others --directory\"\n}\n\n_git_clone ()\n{\n\tcase \"$prev\" in\n\t-c|--config)\n\t\t__git_complete_config_variable_name_and_value\n\t\treturn\n\t\t;;\n\tesac\n\tcase \"$cur\" in\n\t--config=*)\n\t\t__git_complete_config_variable_name_and_value \\\n\t\t\t--cur=\"${cur##--config=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin clone\n\t\treturn\n\t\t;;\n\tesac\n}\n\n__git_untracked_file_modes=\"all no normal\"\n\n__git_trailer_tokens ()\n{\n\t__git config --name-only --get-regexp '^trailer\\..*\\.key$' | cut -d. -f 2- | rev | cut -d. -f2- | rev\n}\n\n_git_commit ()\n{\n\tcase \"$prev\" in\n\t-c|-C)\n\t\t__git_complete_refs\n\t\treturn\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--cleanup=*)\n\t\t__gitcomp \"default scissors strip verbatim whitespace\n\t\t\t\" \"\" \"${cur##--cleanup=}\"\n\t\treturn\n\t\t;;\n\t--reuse-message=*|--reedit-message=*|\\\n\t--fixup=*|--squash=*)\n\t\t__git_complete_refs --cur=\"${cur#*=}\"\n\t\treturn\n\t\t;;\n\t--untracked-files=*)\n\t\t__gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\"\n\t\treturn\n\t\t;;\n\t--trailer=*)\n\t\t__gitcomp_nl \"$(__git_trailer_tokens)\" \"\" \"${cur##--trailer=}\" \":\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin commit\n\t\treturn\n\tesac\n\n\tif __git rev-parse --verify --quiet HEAD >/dev/null; then\n\t\t__git_complete_index_file \"--committable\"\n\telse\n\t\t# This is the first commit\n\t\t__git_complete_index_file \"--cached\"\n\tfi\n}\n\n_git_describe ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin describe\n\t\treturn\n\tesac\n\t__git_complete_refs\n}\n\n__git_diff_algorithms=\"myers minimal patience histogram\"\n\n__git_diff_submodule_formats=\"diff log short\"\n\n__git_color_moved_opts=\"no default plain blocks zebra dimmed-zebra\"\n\n__git_color_moved_ws_opts=\"no ignore-space-at-eol ignore-space-change\n\t\t\tignore-all-space allow-indentation-change\"\n\n__git_ws_error_highlight_opts=\"context old new all default\"\n\n# Options for the diff machinery (diff, log, show, stash, range-diff, ...)\n__git_diff_common_options=\"--stat --numstat --shortstat --summary\n\t\t\t--patch-with-stat --name-only --name-status --color\n\t\t\t--no-color --color-words --no-renames --check\n\t\t\t--color-moved --color-moved= --no-color-moved\n\t\t\t--color-moved-ws= --no-color-moved-ws\n\t\t\t--full-index --binary --abbrev --diff-filter=\n\t\t\t--find-copies --find-object --find-renames\n\t\t\t--no-relative --relative\n\t\t\t--find-copies-harder --ignore-cr-at-eol\n\t\t\t--text --ignore-space-at-eol --ignore-space-change\n\t\t\t--ignore-all-space --ignore-blank-lines --exit-code\n\t\t\t--quiet --ext-diff --no-ext-diff --unified=\n\t\t\t--no-prefix --src-prefix= --dst-prefix=\n\t\t\t--inter-hunk-context= --function-context\n\t\t\t--patience --histogram --minimal\n\t\t\t--raw --word-diff --word-diff-regex=\n\t\t\t--dirstat --dirstat= --dirstat-by-file\n\t\t\t--dirstat-by-file= --cumulative\n\t\t\t--diff-algorithm= --default-prefix\n\t\t\t--submodule --submodule= --ignore-submodules\n\t\t\t--indent-heuristic --no-indent-heuristic\n\t\t\t--textconv --no-textconv --break-rewrites\n\t\t\t--patch --no-patch --cc --combined-all-paths\n\t\t\t--anchored= --compact-summary --ignore-matching-lines=\n\t\t\t--irreversible-delete --line-prefix --no-stat\n\t\t\t--output= --output-indicator-context=\n\t\t\t--output-indicator-new= --output-indicator-old=\n\t\t\t--ws-error-highlight=\n\t\t\t--pickaxe-all --pickaxe-regex\n\"\n\n# Options for diff/difftool\n__git_diff_difftool_options=\"--cached --staged\n\t\t\t--base --ours --theirs --no-index --merge-base\n\t\t\t--ita-invisible-in-index --ita-visible-in-index\n\t\t\t$__git_diff_common_options\"\n\n_git_diff ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--diff-algorithm=*)\n\t\t__gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\"\n\t\treturn\n\t\t;;\n\t--submodule=*)\n\t\t__gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\"\n\t\treturn\n\t\t;;\n\t--color-moved=*)\n\t\t__gitcomp \"$__git_color_moved_opts\" \"\" \"${cur##--color-moved=}\"\n\t\treturn\n\t\t;;\n\t--color-moved-ws=*)\n\t\t__gitcomp \"$__git_color_moved_ws_opts\" \"\" \"${cur##--color-moved-ws=}\"\n\t\treturn\n\t\t;;\n\t--ws-error-highlight=*)\n\t\t__gitcomp \"$__git_ws_error_highlight_opts\" \"\" \"${cur##--ws-error-highlight=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp \"$__git_diff_difftool_options\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist_file\n}\n\n__git_mergetools_common=\"diffuse diffmerge ecmerge emerge kdiff3 meld opendiff\n\t\t\ttkdiff vimdiff nvimdiff gvimdiff xxdiff araxis p4merge\n\t\t\tbc codecompare smerge\n\"\n\n_git_difftool ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--tool=*)\n\t\t__gitcomp \"$__git_mergetools_common kompare\" \"\" \"${cur##--tool=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin difftool \"$__git_diff_difftool_options\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist_file\n}\n\n__git_fetch_recurse_submodules=\"yes on-demand no\"\n\n_git_fetch ()\n{\n\tcase \"$cur\" in\n\t--recurse-submodules=*)\n\t\t__gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\"\n\t\treturn\n\t\t;;\n\t--filter=*)\n\t\t__gitcomp \"blob:none blob:limit= sparse:oid=\" \"\" \"${cur##--filter=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin fetch\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_remote_or_refspec\n}\n\n__git_format_patch_extra_options=\"\n\t--full-index --not --all --no-prefix --src-prefix=\n\t--dst-prefix= --notes\n\"\n\n_git_format_patch ()\n{\n\tcase \"$cur\" in\n\t--thread=*)\n\t\t__gitcomp \"\n\t\t\tdeep shallow\n\t\t\t\" \"\" \"${cur##--thread=}\"\n\t\treturn\n\t\t;;\n\t--base=*|--interdiff=*|--range-diff=*)\n\t\t__git_complete_refs --cur=\"${cur#--*=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin format-patch \"$__git_format_patch_extra_options\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n_git_fsck ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin fsck\n\t\treturn\n\t\t;;\n\tesac\n}\n\n_git_gitk ()\n{\n\t__gitk_main\n}\n\n# Lists matching symbol names from a tag (as in ctags) file.\n# 1: List symbol names matching this word.\n# 2: The tag file to list symbol names from.\n# 3: A prefix to be added to each listed symbol name (optional).\n# 4: A suffix to be appended to each listed symbol name (optional).\n__git_match_ctag () {\n\tawk -v pfx=\"${3-}\" -v sfx=\"${4-}\" \"\n\t\t/^${1//\\//\\\\/}/ { print pfx \\$1 sfx }\n\t\t\" \"$2\"\n}\n\n# Complete symbol names from a tag file.\n# Usage: __git_complete_symbol [<option>]...\n# --tags=<file>: The tag file to list symbol names from instead of the\n#                default \"tags\".\n# --pfx=<prefix>: A prefix to be added to each symbol name.\n# --cur=<word>: The current symbol name to be completed.  Defaults to\n#               the current word to be completed.\n# --sfx=<suffix>: A suffix to be appended to each symbol name instead\n#                 of the default space.\n__git_complete_symbol () {\n\tlocal tags=tags pfx=\"\" cur_=\"${cur-}\" sfx=\" \"\n\n\twhile test $# != 0; do\n\t\tcase \"$1\" in\n\t\t--tags=*)\ttags=\"${1##--tags=}\" ;;\n\t\t--pfx=*)\tpfx=\"${1##--pfx=}\" ;;\n\t\t--cur=*)\tcur_=\"${1##--cur=}\" ;;\n\t\t--sfx=*)\tsfx=\"${1##--sfx=}\" ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\tif test -r \"$tags\"; then\n\t\t__gitcomp_direct \"$(__git_match_ctag \"$cur_\" \"$tags\" \"$pfx\" \"$sfx\")\"\n\tfi\n}\n\n_git_grep ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin grep\n\t\treturn\n\t\t;;\n\tesac\n\n\tcase \"$cword,$prev\" in\n\t$((__git_cmd_idx+1)),*|*,-*)\n\t\t__git_complete_symbol && return\n\t\t;;\n\tesac\n\n\t__git_complete_refs\n}\n\n_git_help ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin help\n\t\treturn\n\t\t;;\n\tesac\n\tif test -n \"${GIT_TESTING_ALL_COMMAND_LIST-}\"\n\tthen\n\t\t__gitcomp \"$GIT_TESTING_ALL_COMMAND_LIST $(__git --list-cmds=alias,list-guide) gitk\"\n\telse\n\t\t__gitcomp \"$(__git --list-cmds=main,nohelpers,alias,list-guide) gitk\"\n\tfi\n}\n\n_git_init ()\n{\n\tcase \"$cur\" in\n\t--shared=*)\n\t\t__gitcomp \"\n\t\t\tfalse true umask group all world everybody\n\t\t\t\" \"\" \"${cur##--shared=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin init\n\t\treturn\n\t\t;;\n\tesac\n}\n\n_git_ls_files ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin ls-files\n\t\treturn\n\t\t;;\n\tesac\n\n\t# XXX ignore options like --modified and always suggest all cached\n\t# files.\n\t__git_complete_index_file \"--cached\"\n}\n\n_git_ls_remote ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin ls-remote\n\t\treturn\n\t\t;;\n\tesac\n\t__gitcomp_nl \"$(__git_remotes)\"\n}\n\n_git_ls_tree ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin ls-tree\n\t\treturn\n\t\t;;\n\tesac\n\n\t__git_complete_file\n}\n\n# Options that go well for log, shortlog and gitk\n__git_log_common_options=\"\n\t--not --all\n\t--branches --tags --remotes\n\t--first-parent --merges --no-merges\n\t--max-count=\n\t--max-age= --since= --after=\n\t--min-age= --until= --before=\n\t--min-parents= --max-parents=\n\t--no-min-parents --no-max-parents\n\"\n# Options that go well for log and gitk (not shortlog)\n__git_log_gitk_options=\"\n\t--dense --sparse --full-history\n\t--simplify-merges --simplify-by-decoration\n\t--left-right --notes --no-notes\n\"\n# Options that go well for log and shortlog (not gitk)\n__git_log_shortlog_options=\"\n\t--author= --committer= --grep=\n\t--all-match --invert-grep\n\"\n# Options accepted by log and show\n__git_log_show_options=\"\n\t--diff-merges --diff-merges= --no-diff-merges --remerge-diff\n\"\n\n__git_diff_merges_opts=\"off none on first-parent 1 separate m combined c dense-combined cc remerge r\"\n\n__git_log_pretty_formats=\"oneline short medium full fuller reference email raw format: tformat: mboxrd\"\n__git_log_date_formats=\"relative iso8601 iso8601-strict rfc2822 short local default human raw unix auto: format:\"\n\n_git_log ()\n{\n\t__git_has_doubledash && return\n\t__git_find_repo_path\n\n\tlocal merge=\"\"\n\tif [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then\n\t\tmerge=\"--merge\"\n\tfi\n\tcase \"$prev,$cur\" in\n\t-L,:*:*)\n\t\treturn\t# fall back to Bash filename completion\n\t\t;;\n\t-L,:*)\n\t\t__git_complete_symbol --cur=\"${cur#:}\" --sfx=\":\"\n\t\treturn\n\t\t;;\n\t-G,*|-S,*)\n\t\t__git_complete_symbol\n\t\treturn\n\t\t;;\n\tesac\n\tcase \"$cur\" in\n\t--pretty=*|--format=*)\n\t\t__gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases)\n\t\t\t\" \"\" \"${cur#*=}\"\n\t\treturn\n\t\t;;\n\t--date=*)\n\t\t__gitcomp \"$__git_log_date_formats\" \"\" \"${cur##--date=}\"\n\t\treturn\n\t\t;;\n\t--decorate=*)\n\t\t__gitcomp \"full short no\" \"\" \"${cur##--decorate=}\"\n\t\treturn\n\t\t;;\n\t--diff-algorithm=*)\n\t\t__gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\"\n\t\treturn\n\t\t;;\n\t--submodule=*)\n\t\t__gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\"\n\t\treturn\n\t\t;;\n\t--ws-error-highlight=*)\n\t\t__gitcomp \"$__git_ws_error_highlight_opts\" \"\" \"${cur##--ws-error-highlight=}\"\n\t\treturn\n\t\t;;\n\t--no-walk=*)\n\t\t__gitcomp \"sorted unsorted\" \"\" \"${cur##--no-walk=}\"\n\t\treturn\n\t\t;;\n\t--diff-merges=*)\n                __gitcomp \"$__git_diff_merges_opts\" \"\" \"${cur##--diff-merges=}\"\n                return\n                ;;\n\t--*)\n\t\t__gitcomp \"\n\t\t\t$__git_log_common_options\n\t\t\t$__git_log_shortlog_options\n\t\t\t$__git_log_gitk_options\n\t\t\t$__git_log_show_options\n\t\t\t--root --topo-order --date-order --reverse\n\t\t\t--follow --full-diff\n\t\t\t--abbrev-commit --no-abbrev-commit --abbrev=\n\t\t\t--relative-date --date=\n\t\t\t--pretty= --format= --oneline\n\t\t\t--show-signature\n\t\t\t--cherry-mark\n\t\t\t--cherry-pick\n\t\t\t--graph\n\t\t\t--decorate --decorate= --no-decorate\n\t\t\t--walk-reflogs\n\t\t\t--no-walk --no-walk= --do-walk\n\t\t\t--parents --children\n\t\t\t--expand-tabs --expand-tabs= --no-expand-tabs\n\t\t\t$merge\n\t\t\t$__git_diff_common_options\n\t\t\t\"\n\t\treturn\n\t\t;;\n\t-L:*:*)\n\t\treturn\t# fall back to Bash filename completion\n\t\t;;\n\t-L:*)\n\t\t__git_complete_symbol --cur=\"${cur#-L:}\" --sfx=\":\"\n\t\treturn\n\t\t;;\n\t-G*)\n\t\t__git_complete_symbol --pfx=\"-G\" --cur=\"${cur#-G}\"\n\t\treturn\n\t\t;;\n\t-S*)\n\t\t__git_complete_symbol --pfx=\"-S\" --cur=\"${cur#-S}\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n_git_merge ()\n{\n\t__git_complete_strategy && return\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin merge\n\t\treturn\n\tesac\n\t__git_complete_refs\n}\n\n_git_mergetool ()\n{\n\tcase \"$cur\" in\n\t--tool=*)\n\t\t__gitcomp \"$__git_mergetools_common tortoisemerge\" \"\" \"${cur##--tool=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp \"--tool= --prompt --no-prompt --gui --no-gui\"\n\t\treturn\n\t\t;;\n\tesac\n}\n\n_git_merge_base ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin merge-base\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_refs\n}\n\n_git_mv ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin mv\n\t\treturn\n\t\t;;\n\tesac\n\n\tif [ $(__git_count_arguments \"mv\") -gt 0 ]; then\n\t\t# We need to show both cached and untracked files (including\n\t\t# empty directories) since this may not be the last argument.\n\t\t__git_complete_index_file \"--cached --others --directory\"\n\telse\n\t\t__git_complete_index_file \"--cached\"\n\tfi\n}\n\n_git_notes ()\n{\n\tlocal subcommands='add append copy edit get-ref list merge prune remove show'\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\n\tcase \"$subcommand,$cur\" in\n\t,--*)\n\t\t__gitcomp_builtin notes\n\t\t;;\n\t,*)\n\t\tcase \"$prev\" in\n\t\t--ref)\n\t\t\t__git_complete_refs\n\t\t\t;;\n\t\t*)\n\t\t\t__gitcomp \"$subcommands --ref\"\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t*,--reuse-message=*|*,--reedit-message=*)\n\t\t__git_complete_refs --cur=\"${cur#*=}\"\n\t\t;;\n\t*,--*)\n\t\t__gitcomp_builtin notes_$subcommand\n\t\t;;\n\tprune,*|get-ref,*)\n\t\t# this command does not take a ref, do not complete it\n\t\t;;\n\t*)\n\t\tcase \"$prev\" in\n\t\t-m|-F)\n\t\t\t;;\n\t\t*)\n\t\t\t__git_complete_refs\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tesac\n}\n\n_git_pull ()\n{\n\t__git_complete_strategy && return\n\n\tcase \"$cur\" in\n\t--recurse-submodules=*)\n\t\t__gitcomp \"$__git_fetch_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin pull\n\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_remote_or_refspec\n}\n\n__git_push_recurse_submodules=\"check on-demand only\"\n\n__git_complete_force_with_lease ()\n{\n\tlocal cur_=$1\n\n\tcase \"$cur_\" in\n\t--*=)\n\t\t;;\n\t*:*)\n\t\t__git_complete_refs --cur=\"${cur_#*:}\"\n\t\t;;\n\t*)\n\t\t__git_complete_refs --cur=\"$cur_\"\n\t\t;;\n\tesac\n}\n\n_git_push ()\n{\n\tcase \"$prev\" in\n\t--repo)\n\t\t__gitcomp_nl \"$(__git_remotes)\"\n\t\treturn\n\t\t;;\n\t--recurse-submodules)\n\t\t__gitcomp \"$__git_push_recurse_submodules\"\n\t\treturn\n\t\t;;\n\tesac\n\tcase \"$cur\" in\n\t--repo=*)\n\t\t__gitcomp_nl \"$(__git_remotes)\" \"\" \"${cur##--repo=}\"\n\t\treturn\n\t\t;;\n\t--recurse-submodules=*)\n\t\t__gitcomp \"$__git_push_recurse_submodules\" \"\" \"${cur##--recurse-submodules=}\"\n\t\treturn\n\t\t;;\n\t--force-with-lease=*)\n\t\t__git_complete_force_with_lease \"${cur##--force-with-lease=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin push\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_remote_or_refspec\n}\n\n_git_range_diff ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp \"\n\t\t\t--creation-factor= --no-dual-color\n\t\t\t$__git_diff_common_options\n\t\t\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n__git_rebase_inprogress_options=\"--continue --skip --abort --quit --show-current-patch\"\n__git_rebase_interactive_inprogress_options=\"$__git_rebase_inprogress_options --edit-todo\"\n\n_git_rebase ()\n{\n\t__git_find_repo_path\n\tif [ -f \"$__git_repo_path\"/rebase-merge/interactive ]; then\n\t\t__gitcomp \"$__git_rebase_interactive_inprogress_options\"\n\t\treturn\n\telif [ -d \"$__git_repo_path\"/rebase-apply ] || \\\n\t     [ -d \"$__git_repo_path\"/rebase-merge ]; then\n\t\t__gitcomp \"$__git_rebase_inprogress_options\"\n\t\treturn\n\tfi\n\t__git_complete_strategy && return\n\tcase \"$cur\" in\n\t--whitespace=*)\n\t\t__gitcomp \"$__git_whitespacelist\" \"\" \"${cur##--whitespace=}\"\n\t\treturn\n\t\t;;\n\t--onto=*)\n\t\t__git_complete_refs --cur=\"${cur##--onto=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin rebase \"\" \\\n\t\t\t\"$__git_rebase_interactive_inprogress_options\"\n\n\t\treturn\n\tesac\n\t__git_complete_refs\n}\n\n_git_reflog ()\n{\n\tlocal subcommands=\"show delete expire\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\telse\n\t\t__git_complete_refs\n\tfi\n}\n\n__git_send_email_confirm_options=\"always never auto cc compose\"\n__git_send_email_suppresscc_options=\"author self cc bodycc sob cccmd body all\"\n\n_git_send_email ()\n{\n\tcase \"$prev\" in\n\t--to|--cc|--bcc|--from)\n\t\t__gitcomp \"$(__git send-email --dump-aliases)\"\n\t\treturn\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--confirm=*)\n\t\t__gitcomp \"\n\t\t\t$__git_send_email_confirm_options\n\t\t\t\" \"\" \"${cur##--confirm=}\"\n\t\treturn\n\t\t;;\n\t--suppress-cc=*)\n\t\t__gitcomp \"\n\t\t\t$__git_send_email_suppresscc_options\n\t\t\t\" \"\" \"${cur##--suppress-cc=}\"\n\n\t\treturn\n\t\t;;\n\t--smtp-encryption=*)\n\t\t__gitcomp \"ssl tls\" \"\" \"${cur##--smtp-encryption=}\"\n\t\treturn\n\t\t;;\n\t--thread=*)\n\t\t__gitcomp \"\n\t\t\tdeep shallow\n\t\t\t\" \"\" \"${cur##--thread=}\"\n\t\treturn\n\t\t;;\n\t--to=*|--cc=*|--bcc=*|--from=*)\n\t\t__gitcomp \"$(__git send-email --dump-aliases)\" \"\" \"${cur#--*=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin send-email \"$__git_format_patch_extra_options\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n_git_stage ()\n{\n\t_git_add\n}\n\n_git_status ()\n{\n\tlocal complete_opt\n\tlocal untracked_state\n\n\tcase \"$cur\" in\n\t--ignore-submodules=*)\n\t\t__gitcomp \"none untracked dirty all\" \"\" \"${cur##--ignore-submodules=}\"\n\t\treturn\n\t\t;;\n\t--untracked-files=*)\n\t\t__gitcomp \"$__git_untracked_file_modes\" \"\" \"${cur##--untracked-files=}\"\n\t\treturn\n\t\t;;\n\t--column=*)\n\t\t__gitcomp \"\n\t\t\talways never auto column row plain dense nodense\n\t\t\t\" \"\" \"${cur##--column=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin status\n\t\treturn\n\t\t;;\n\tesac\n\n\tuntracked_state=\"$(__git_get_option_value \"-u\" \"--untracked-files=\" \\\n\t\t\"$__git_untracked_file_modes\" \"status.showUntrackedFiles\")\"\n\n\tcase \"$untracked_state\" in\n\tno)\n\t\t# --ignored option does not matter\n\t\tcomplete_opt=\n\t\t;;\n\tall|normal|*)\n\t\tcomplete_opt=\"--cached --directory --no-empty-directory --others\"\n\n\t\tif [ -n \"$(__git_find_on_cmdline \"--ignored\")\" ]; then\n\t\t\tcomplete_opt=\"$complete_opt --ignored --exclude=*\"\n\t\tfi\n\t\t;;\n\tesac\n\n\t__git_complete_index_file \"$complete_opt\"\n}\n\n_git_switch ()\n{\n\tlocal dwim_opt=\"$(__git_checkout_default_dwim_mode)\"\n\n\tcase \"$prev\" in\n\t-c|-C|--orphan)\n\t\t# Complete local branches (and DWIM branch\n\t\t# remote branch names) for an option argument\n\t\t# specifying a new branch name. This is for\n\t\t# convenience, assuming new branches are\n\t\t# possibly based on pre-existing branch names.\n\t\t__git_complete_refs $dwim_opt --mode=\"heads\"\n\t\treturn\n\t\t;;\n\t*)\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--conflict=*)\n\t\t__gitcomp \"diff3 merge zdiff3\" \"\" \"${cur##--conflict=}\"\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin switch\n\t\t;;\n\t*)\n\t\t# Unlike in git checkout, git switch --orphan does not take\n\t\t# a start point. Thus we really have nothing to complete after\n\t\t# the branch name.\n\t\tif [ -n \"$(__git_find_on_cmdline \"--orphan\")\" ]; then\n\t\t\treturn\n\t\tfi\n\n\t\t# At this point, we've already handled special completion for\n\t\t# -c/-C, and --orphan. There are 3 main things left to\n\t\t# complete:\n\t\t# 1) a start-point for -c/-C or -d/--detach\n\t\t# 2) a remote head, for --track\n\t\t# 3) a branch name, possibly including DWIM remote branches\n\n\t\tif [ -n \"$(__git_find_on_cmdline \"-c -C -d --detach\")\" ]; then\n\t\t\t__git_complete_refs --mode=\"refs\"\n\t\telif [ -n \"$(__git_find_on_cmdline \"-t --track\")\" ]; then\n\t\t\t__git_complete_refs --mode=\"remote-heads\"\n\t\telse\n\t\t\t__git_complete_refs $dwim_opt --mode=\"heads\"\n\t\tfi\n\t\t;;\n\tesac\n}\n\n__git_config_get_set_variables ()\n{\n\tlocal prevword word config_file= c=$cword\n\twhile [ $c -gt \"$__git_cmd_idx\" ]; do\n\t\tword=\"${words[c]}\"\n\t\tcase \"$word\" in\n\t\t--system|--global|--local|--file=*)\n\t\t\tconfig_file=\"$word\"\n\t\t\tbreak\n\t\t\t;;\n\t\t-f|--file)\n\t\t\tconfig_file=\"$word $prevword\"\n\t\t\tbreak\n\t\t\t;;\n\t\tesac\n\t\tprevword=$word\n\t\tc=$((--c))\n\tdone\n\n\t__git config $config_file --name-only --list\n}\n\n__git_config_vars=\n__git_compute_config_vars ()\n{\n\ttest -n \"$__git_config_vars\" ||\n\t__git_config_vars=\"$(git help --config-for-completion)\"\n}\n\n__git_config_sections=\n__git_compute_config_sections ()\n{\n\ttest -n \"$__git_config_sections\" ||\n\t__git_config_sections=\"$(git help --config-sections-for-completion)\"\n}\n\n# Completes possible values of various configuration variables.\n#\n# Usage: __git_complete_config_variable_value [<option>]...\n# --varname=<word>: The name of the configuration variable whose value is\n#                   to be completed.  Defaults to the previous word on the\n#                   command line.\n# --cur=<word>: The current value to be completed.  Defaults to the current\n#               word to be completed.\n__git_complete_config_variable_value ()\n{\n\tlocal varname=\"$prev\" cur_=\"$cur\"\n\n\twhile test $# != 0; do\n\t\tcase \"$1\" in\n\t\t--varname=*)\tvarname=\"${1##--varname=}\" ;;\n\t\t--cur=*)\tcur_=\"${1##--cur=}\" ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\tif [ \"${BASH_VERSINFO[0]:-0}\" -ge 4 ]; then\n\t\tvarname=\"${varname,,}\"\n\telse\n\t\tvarname=\"$(echo \"$varname\" |tr A-Z a-z)\"\n\tfi\n\n\tcase \"$varname\" in\n\tbranch.*.remote|branch.*.pushremote)\n\t\t__gitcomp_nl \"$(__git_remotes)\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tbranch.*.merge)\n\t\t__git_complete_refs --cur=\"$cur_\"\n\t\treturn\n\t\t;;\n\tbranch.*.rebase)\n\t\t__gitcomp \"false true merges interactive\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tremote.pushdefault)\n\t\t__gitcomp_nl \"$(__git_remotes)\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tremote.*.fetch)\n\t\tlocal remote=\"${varname#remote.}\"\n\t\tremote=\"${remote%.fetch}\"\n\t\tif [ -z \"$cur_\" ]; then\n\t\t\t__gitcomp_nl \"refs/heads/\" \"\" \"\" \"\"\n\t\t\treturn\n\t\tfi\n\t\t__gitcomp_nl \"$(__git_refs_remotes \"$remote\")\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tremote.*.push)\n\t\tlocal remote=\"${varname#remote.}\"\n\t\tremote=\"${remote%.push}\"\n\t\t__gitcomp_nl \"$(__git for-each-ref \\\n\t\t\t--format='%(refname):%(refname)' refs/heads)\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tpull.twohead|pull.octopus)\n\t\t__git_compute_merge_strategies\n\t\t__gitcomp \"$__git_merge_strategies\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tcolor.pager)\n\t\t__gitcomp \"false true\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tcolor.*.*)\n\t\t__gitcomp \"\n\t\t\tnormal black red green yellow blue magenta cyan white\n\t\t\tbold dim ul blink reverse\n\t\t\t\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tcolor.*)\n\t\t__gitcomp \"false true always never auto\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tdiff.submodule)\n\t\t__gitcomp \"$__git_diff_submodule_formats\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\thelp.format)\n\t\t__gitcomp \"man info web html\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tlog.date)\n\t\t__gitcomp \"$__git_log_date_formats\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tsendemail.aliasfiletype)\n\t\t__gitcomp \"mutt mailrc pine elm gnus\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tsendemail.confirm)\n\t\t__gitcomp \"$__git_send_email_confirm_options\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tsendemail.suppresscc)\n\t\t__gitcomp \"$__git_send_email_suppresscc_options\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\tsendemail.transferencoding)\n\t\t__gitcomp \"7bit 8bit quoted-printable base64\" \"\" \"$cur_\"\n\t\treturn\n\t\t;;\n\t*.*)\n\t\treturn\n\t\t;;\n\tesac\n}\n\n# Completes configuration sections, subsections, variable names.\n#\n# Usage: __git_complete_config_variable_name [<option>]...\n# --cur=<word>: The current configuration section/variable name to be\n#               completed.  Defaults to the current word to be completed.\n# --sfx=<suffix>: A suffix to be appended to each fully completed\n#                 configuration variable name (but not to sections or\n#                 subsections) instead of the default space.\n__git_complete_config_variable_name ()\n{\n\tlocal cur_=\"$cur\" sfx\n\n\twhile test $# != 0; do\n\t\tcase \"$1\" in\n\t\t--cur=*)\tcur_=\"${1##--cur=}\" ;;\n\t\t--sfx=*)\tsfx=\"${1##--sfx=}\" ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\tcase \"$cur_\" in\n\tbranch.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"remote pushRemote merge mergeOptions rebase\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tbranch.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_#*.}\"\n\t\t__gitcomp_direct \"$(__git_heads \"$pfx\" \"$cur_\" \".\")\"\n\t\t__gitcomp_nl_append $'autoSetupMerge\\nautoSetupRebase\\n' \"$pfx\" \"$cur_\" \"${sfx- }\"\n\t\treturn\n\t\t;;\n\tguitool.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"\n\t\t\targPrompt cmd confirm needsFile noConsole noRescan\n\t\t\tprompt revPrompt revUnmerged title\n\t\t\t\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tdifftool.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"cmd path\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tman.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"cmd path\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tmergetool.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"cmd path trustExitCode\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tpager.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_#*.}\"\n\t\t__git_compute_all_commands\n\t\t__gitcomp_nl \"$__git_all_commands\" \"$pfx\" \"$cur_\" \"${sfx- }\"\n\t\treturn\n\t\t;;\n\tremote.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"\n\t\t\turl proxy fetch push mirror skipDefaultUpdate\n\t\t\treceivepack uploadpack tagOpt pushurl\n\t\t\t\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\tremote.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_#*.}\"\n\t\t__gitcomp_nl \"$(__git_remotes)\" \"$pfx\" \"$cur_\" \".\"\n\t\t__gitcomp_nl_append \"pushDefault\" \"$pfx\" \"$cur_\" \"${sfx- }\"\n\t\treturn\n\t\t;;\n\turl.*.*)\n\t\tlocal pfx=\"${cur_%.*}.\"\n\t\tcur_=\"${cur_##*.}\"\n\t\t__gitcomp \"insteadOf pushInsteadOf\" \"$pfx\" \"$cur_\" \"$sfx\"\n\t\treturn\n\t\t;;\n\t*.*)\n\t\t__git_compute_config_vars\n\t\t__gitcomp \"$__git_config_vars\" \"\" \"$cur_\" \"$sfx\"\n\t\t;;\n\t*)\n\t\t__git_compute_config_sections\n\t\t__gitcomp \"$__git_config_sections\" \"\" \"$cur_\" \".\"\n\t\t;;\n\tesac\n}\n\n# Completes '='-separated configuration sections/variable names and values\n# for 'git -c section.name=value'.\n#\n# Usage: __git_complete_config_variable_name_and_value [<option>]...\n# --cur=<word>: The current configuration section/variable name/value to be\n#               completed. Defaults to the current word to be completed.\n__git_complete_config_variable_name_and_value ()\n{\n\tlocal cur_=\"$cur\"\n\n\twhile test $# != 0; do\n\t\tcase \"$1\" in\n\t\t--cur=*)\tcur_=\"${1##--cur=}\" ;;\n\t\t*)\t\treturn 1 ;;\n\t\tesac\n\t\tshift\n\tdone\n\n\tcase \"$cur_\" in\n\t*=*)\n\t\t__git_complete_config_variable_value \\\n\t\t\t--varname=\"${cur_%%=*}\" --cur=\"${cur_#*=}\"\n\t\t;;\n\t*)\n\t\t__git_complete_config_variable_name --cur=\"$cur_\" --sfx='='\n\t\t;;\n\tesac\n}\n\n_git_config ()\n{\n\tcase \"$prev\" in\n\t--get|--get-all|--unset|--unset-all)\n\t\t__gitcomp_nl \"$(__git_config_get_set_variables)\"\n\t\treturn\n\t\t;;\n\t*.*)\n\t\t__git_complete_config_variable_value\n\t\treturn\n\t\t;;\n\tesac\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin config\n\t\t;;\n\t*)\n\t\t__git_complete_config_variable_name\n\t\t;;\n\tesac\n}\n\n_git_remote ()\n{\n\tlocal subcommands=\"\n\t\tadd rename remove set-head set-branches\n\t\tget-url set-url show prune update\n\t\t\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\tcase \"$cur\" in\n\t\t--*)\n\t\t\t__gitcomp_builtin remote\n\t\t\t;;\n\t\t*)\n\t\t\t__gitcomp \"$subcommands\"\n\t\t\t;;\n\t\tesac\n\t\treturn\n\tfi\n\n\tcase \"$subcommand,$cur\" in\n\tadd,--*)\n\t\t__gitcomp_builtin remote_add\n\t\t;;\n\tadd,*)\n\t\t;;\n\tset-head,--*)\n\t\t__gitcomp_builtin remote_set-head\n\t\t;;\n\tset-branches,--*)\n\t\t__gitcomp_builtin remote_set-branches\n\t\t;;\n\tset-head,*|set-branches,*)\n\t\t__git_complete_remote_or_refspec\n\t\t;;\n\tupdate,--*)\n\t\t__gitcomp_builtin remote_update\n\t\t;;\n\tupdate,*)\n\t\t__gitcomp \"$(__git_remotes) $(__git_get_config_variables \"remotes\")\"\n\t\t;;\n\tset-url,--*)\n\t\t__gitcomp_builtin remote_set-url\n\t\t;;\n\tget-url,--*)\n\t\t__gitcomp_builtin remote_get-url\n\t\t;;\n\tprune,--*)\n\t\t__gitcomp_builtin remote_prune\n\t\t;;\n\t*)\n\t\t__gitcomp_nl \"$(__git_remotes)\"\n\t\t;;\n\tesac\n}\n\n_git_replace ()\n{\n\tcase \"$cur\" in\n\t--format=*)\n\t\t__gitcomp \"short medium long\" \"\" \"${cur##--format=}\"\n\t\treturn\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin replace\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_refs\n}\n\n_git_rerere ()\n{\n\tlocal subcommands=\"clear forget diff remaining status gc\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif test -z \"$subcommand\"\n\tthen\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n}\n\n_git_reset ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin reset\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_refs\n}\n\n_git_restore ()\n{\n\tcase \"$prev\" in\n\t-s)\n\t\t__git_complete_refs\n\t\treturn\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--conflict=*)\n\t\t__gitcomp \"diff3 merge zdiff3\" \"\" \"${cur##--conflict=}\"\n\t\t;;\n\t--source=*)\n\t\t__git_complete_refs --cur=\"${cur##--source=}\"\n\t\t;;\n\t--*)\n\t\t__gitcomp_builtin restore\n\t\t;;\n\t*)\n\t\tif __git rev-parse --verify --quiet HEAD >/dev/null; then\n\t\t\t__git_complete_index_file \"--modified\"\n\t\tfi\n\tesac\n}\n\n__git_revert_inprogress_options=$__git_sequencer_inprogress_options\n\n_git_revert ()\n{\n\t__git_find_repo_path\n\tif [ -f \"$__git_repo_path\"/REVERT_HEAD ]; then\n\t\t__gitcomp \"$__git_revert_inprogress_options\"\n\t\treturn\n\tfi\n\t__git_complete_strategy && return\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin revert \"\" \\\n\t\t\t\"$__git_revert_inprogress_options\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_refs\n}\n\n_git_rm ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin rm\n\t\treturn\n\t\t;;\n\tesac\n\n\t__git_complete_index_file \"--cached\"\n}\n\n_git_shortlog ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp \"\n\t\t\t$__git_log_common_options\n\t\t\t$__git_log_shortlog_options\n\t\t\t--numbered --summary --email\n\t\t\t\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n_git_show ()\n{\n\t__git_has_doubledash && return\n\n\tcase \"$cur\" in\n\t--pretty=*|--format=*)\n\t\t__gitcomp \"$__git_log_pretty_formats $(__git_pretty_aliases)\n\t\t\t\" \"\" \"${cur#*=}\"\n\t\treturn\n\t\t;;\n\t--diff-algorithm=*)\n\t\t__gitcomp \"$__git_diff_algorithms\" \"\" \"${cur##--diff-algorithm=}\"\n\t\treturn\n\t\t;;\n\t--submodule=*)\n\t\t__gitcomp \"$__git_diff_submodule_formats\" \"\" \"${cur##--submodule=}\"\n\t\treturn\n\t\t;;\n\t--color-moved=*)\n\t\t__gitcomp \"$__git_color_moved_opts\" \"\" \"${cur##--color-moved=}\"\n\t\treturn\n\t\t;;\n\t--color-moved-ws=*)\n\t\t__gitcomp \"$__git_color_moved_ws_opts\" \"\" \"${cur##--color-moved-ws=}\"\n\t\treturn\n\t\t;;\n\t--ws-error-highlight=*)\n\t\t__gitcomp \"$__git_ws_error_highlight_opts\" \"\" \"${cur##--ws-error-highlight=}\"\n\t\treturn\n\t\t;;\n\t--diff-merges=*)\n                __gitcomp \"$__git_diff_merges_opts\" \"\" \"${cur##--diff-merges=}\"\n                return\n                ;;\n\t--*)\n\t\t__gitcomp \"--pretty= --format= --abbrev-commit --no-abbrev-commit\n\t\t\t--oneline --show-signature\n\t\t\t--expand-tabs --expand-tabs= --no-expand-tabs\n\t\t\t$__git_log_show_options\n\t\t\t$__git_diff_common_options\n\t\t\t\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist_file\n}\n\n_git_show_branch ()\n{\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin show-branch\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\n__gitcomp_directories ()\n{\n\tlocal _tmp_dir _tmp_completions _found=0\n\n\t# Get the directory of the current token; this differs from dirname\n\t# in that it keeps up to the final trailing slash.  If no slash found\n\t# that's fine too.\n\t[[ \"$cur\" =~ .*/ ]]\n\t_tmp_dir=$BASH_REMATCH\n\n\t# Find possible directory completions, adding trailing '/' characters,\n\t# de-quoting, and handling unusual characters.\n\twhile IFS= read -r -d $'\\0' c ; do\n\t\t# If there are directory completions, find ones that start\n\t\t# with \"$cur\", the current token, and put those in COMPREPLY\n\t\tif [[ $c == \"$cur\"* ]]; then\n\t\t\tCOMPREPLY+=(\"$c/\")\n\t\t\t_found=1\n\t\tfi\n\tdone < <(git ls-tree -z -d --name-only HEAD $_tmp_dir)\n\n\tif [[ $_found == 0 ]] && [[ \"$cur\" =~ /$ ]]; then\n\t\t# No possible further completions any deeper, so assume we're at\n\t\t# a leaf directory and just consider it complete\n\t\t__gitcomp_direct_append \"$cur \"\n\tfi\n}\n\n_git_sparse_checkout ()\n{\n\tlocal subcommands=\"list init set disable add reapply\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\t\treturn\n\tfi\n\n\tcase \"$subcommand,$cur\" in\n\t*,--*)\n\t\t__gitcomp_builtin sparse-checkout_$subcommand \"\" \"--\"\n\t\t;;\n\tset,*|add,*)\n\t\tif [ \"$(__git config core.sparseCheckoutCone)\" == \"true\" ] ||\n\t\t[ -n \"$(__git_find_on_cmdline --cone)\" ]; then\n\t\t\t__gitcomp_directories\n\t\tfi\n\tesac\n}\n\n_git_stash ()\n{\n\tlocal subcommands='push list show apply clear drop pop create branch'\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands save\")\"\n\n\tif [ -z \"$subcommand\" ]; then\n\t\tcase \"$((cword - __git_cmd_idx)),$cur\" in\n\t\t*,--*)\n\t\t\t__gitcomp_builtin stash_push\n\t\t\t;;\n\t\t1,sa*)\n\t\t\t__gitcomp \"save\"\n\t\t\t;;\n\t\t1,*)\n\t\t\t__gitcomp \"$subcommands\"\n\t\t\t;;\n\t\tesac\n\t\treturn\n\tfi\n\n\tcase \"$subcommand,$cur\" in\n\tlist,--*)\n\t\t# NEEDSWORK: can we somehow unify this with the options in _git_log() and _git_show()\n\t\t__gitcomp_builtin stash_list \"$__git_log_common_options $__git_diff_common_options\"\n\t\t;;\n\tshow,--*)\n\t\t__gitcomp_builtin stash_show \"$__git_diff_common_options\"\n\t\t;;\n\t*,--*)\n\t\t__gitcomp_builtin \"stash_$subcommand\"\n\t\t;;\n\tbranch,*)\n\t\tif [ $cword -eq $((__git_cmd_idx+2)) ]; then\n\t\t\t__git_complete_refs\n\t\telse\n\t\t\t__gitcomp_nl \"$(__git stash list \\\n\t\t\t\t\t| sed -n -e 's/:.*//p')\"\n\t\tfi\n\t\t;;\n\tshow,*|apply,*|drop,*|pop,*)\n\t\t__gitcomp_nl \"$(__git stash list \\\n\t\t\t\t| sed -n -e 's/:.*//p')\"\n\t\t;;\n\tesac\n}\n\n_git_submodule ()\n{\n\t__git_has_doubledash && return\n\n\tlocal subcommands=\"add status init deinit update set-branch set-url summary foreach sync absorbgitdirs\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\tcase \"$cur\" in\n\t\t--*)\n\t\t\t__gitcomp \"--quiet\"\n\t\t\t;;\n\t\t*)\n\t\t\t__gitcomp \"$subcommands\"\n\t\t\t;;\n\t\tesac\n\t\treturn\n\tfi\n\n\tcase \"$subcommand,$cur\" in\n\tadd,--*)\n\t\t__gitcomp \"--branch --force --name --reference --depth\"\n\t\t;;\n\tstatus,--*)\n\t\t__gitcomp \"--cached --recursive\"\n\t\t;;\n\tdeinit,--*)\n\t\t__gitcomp \"--force --all\"\n\t\t;;\n\tupdate,--*)\n\t\t__gitcomp \"\n\t\t\t--init --remote --no-fetch\n\t\t\t--recommend-shallow --no-recommend-shallow\n\t\t\t--force --rebase --merge --reference --depth --recursive --jobs\n\t\t\"\n\t\t;;\n\tset-branch,--*)\n\t\t__gitcomp \"--default --branch\"\n\t\t;;\n\tsummary,--*)\n\t\t__gitcomp \"--cached --files --summary-limit\"\n\t\t;;\n\tforeach,--*|sync,--*)\n\t\t__gitcomp \"--recursive\"\n\t\t;;\n\t*)\n\t\t;;\n\tesac\n}\n\n_git_svn ()\n{\n\tlocal subcommands=\"\n\t\tinit fetch clone rebase dcommit log find-rev\n\t\tset-tree commit-diff info create-ignore propget\n\t\tproplist show-ignore show-externals branch tag blame\n\t\tmigrate mkdirs reset gc\n\t\t\"\n\tlocal subcommand=\"$(__git_find_on_cmdline \"$subcommands\")\"\n\tif [ -z \"$subcommand\" ]; then\n\t\t__gitcomp \"$subcommands\"\n\telse\n\t\tlocal remote_opts=\"--username= --config-dir= --no-auth-cache\"\n\t\tlocal fc_opts=\"\n\t\t\t--follow-parent --authors-file= --repack=\n\t\t\t--no-metadata --use-svm-props --use-svnsync-props\n\t\t\t--log-window-size= --no-checkout --quiet\n\t\t\t--repack-flags --use-log-author --localtime\n\t\t\t--add-author-from\n\t\t\t--recursive\n\t\t\t--ignore-paths= --include-paths= $remote_opts\n\t\t\t\"\n\t\tlocal init_opts=\"\n\t\t\t--template= --shared= --trunk= --tags=\n\t\t\t--branches= --stdlayout --minimize-url\n\t\t\t--no-metadata --use-svm-props --use-svnsync-props\n\t\t\t--rewrite-root= --prefix= $remote_opts\n\t\t\t\"\n\t\tlocal cmt_opts=\"\n\t\t\t--edit --rmdir --find-copies-harder --copy-similarity=\n\t\t\t\"\n\n\t\tcase \"$subcommand,$cur\" in\n\t\tfetch,--*)\n\t\t\t__gitcomp \"--revision= --fetch-all $fc_opts\"\n\t\t\t;;\n\t\tclone,--*)\n\t\t\t__gitcomp \"--revision= $fc_opts $init_opts\"\n\t\t\t;;\n\t\tinit,--*)\n\t\t\t__gitcomp \"$init_opts\"\n\t\t\t;;\n\t\tdcommit,--*)\n\t\t\t__gitcomp \"\n\t\t\t\t--merge --strategy= --verbose --dry-run\n\t\t\t\t--fetch-all --no-rebase --commit-url\n\t\t\t\t--revision --interactive $cmt_opts $fc_opts\n\t\t\t\t\"\n\t\t\t;;\n\t\tset-tree,--*)\n\t\t\t__gitcomp \"--stdin $cmt_opts $fc_opts\"\n\t\t\t;;\n\t\tcreate-ignore,--*|propget,--*|proplist,--*|show-ignore,--*|\\\n\t\tshow-externals,--*|mkdirs,--*)\n\t\t\t__gitcomp \"--revision=\"\n\t\t\t;;\n\t\tlog,--*)\n\t\t\t__gitcomp \"\n\t\t\t\t--limit= --revision= --verbose --incremental\n\t\t\t\t--oneline --show-commit --non-recursive\n\t\t\t\t--authors-file= --color\n\t\t\t\t\"\n\t\t\t;;\n\t\trebase,--*)\n\t\t\t__gitcomp \"\n\t\t\t\t--merge --verbose --strategy= --local\n\t\t\t\t--fetch-all --dry-run $fc_opts\n\t\t\t\t\"\n\t\t\t;;\n\t\tcommit-diff,--*)\n\t\t\t__gitcomp \"--message= --file= --revision= $cmt_opts\"\n\t\t\t;;\n\t\tinfo,--*)\n\t\t\t__gitcomp \"--url\"\n\t\t\t;;\n\t\tbranch,--*)\n\t\t\t__gitcomp \"--dry-run --message --tag\"\n\t\t\t;;\n\t\ttag,--*)\n\t\t\t__gitcomp \"--dry-run --message\"\n\t\t\t;;\n\t\tblame,--*)\n\t\t\t__gitcomp \"--git-format\"\n\t\t\t;;\n\t\tmigrate,--*)\n\t\t\t__gitcomp \"\n\t\t\t\t--config-dir= --ignore-paths= --minimize\n\t\t\t\t--no-auth-cache --username=\n\t\t\t\t\"\n\t\t\t;;\n\t\treset,--*)\n\t\t\t__gitcomp \"--revision= --parent\"\n\t\t\t;;\n\t\t*)\n\t\t\t;;\n\t\tesac\n\tfi\n}\n\n_git_tag ()\n{\n\tlocal i c=\"$__git_cmd_idx\" f=0\n\twhile [ $c -lt $cword ]; do\n\t\ti=\"${words[c]}\"\n\t\tcase \"$i\" in\n\t\t-d|--delete|-v|--verify)\n\t\t\t__gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\"\n\t\t\treturn\n\t\t\t;;\n\t\t-f)\n\t\t\tf=1\n\t\t\t;;\n\t\tesac\n\t\t((c++))\n\tdone\n\n\tcase \"$prev\" in\n\t-m|-F)\n\t\t;;\n\t-*|tag)\n\t\tif [ $f = 1 ]; then\n\t\t\t__gitcomp_direct \"$(__git_tags \"\" \"$cur\" \" \")\"\n\t\tfi\n\t\t;;\n\t*)\n\t\t__git_complete_refs\n\t\t;;\n\tesac\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin tag\n\t\t;;\n\tesac\n}\n\n_git_whatchanged ()\n{\n\t_git_log\n}\n\n__git_complete_worktree_paths ()\n{\n\tlocal IFS=$'\\n'\n\t# Generate completion reply from worktree list skipping the first\n\t# entry: it's the path of the main worktree, which can't be moved,\n\t# removed, locked, etc.\n\t__gitcomp_nl \"$(git worktree list --porcelain |\n\t\tsed -n -e '2,$ s/^worktree //p')\"\n}\n\n_git_worktree ()\n{\n\tlocal subcommands=\"add list lock move prune remove unlock\"\n\tlocal subcommand subcommand_idx\n\n\tsubcommand=\"$(__git_find_on_cmdline --show-idx \"$subcommands\")\"\n\tsubcommand_idx=\"${subcommand% *}\"\n\tsubcommand=\"${subcommand#* }\"\n\n\tcase \"$subcommand,$cur\" in\n\t,*)\n\t\t__gitcomp \"$subcommands\"\n\t\t;;\n\t*,--*)\n\t\t__gitcomp_builtin worktree_$subcommand\n\t\t;;\n\tadd,*)\t# usage: git worktree add [<options>] <path> [<commit-ish>]\n\t\t# Here we are not completing an --option, it's either the\n\t\t# path or a ref.\n\t\tcase \"$prev\" in\n\t\t-b|-B)\t# Complete refs for branch to be created/reseted.\n\t\t\t__git_complete_refs\n\t\t\t;;\n\t\t-*)\t# The previous word is an -o|--option without an\n\t\t\t# unstuck argument: have to complete the path for\n\t\t\t# the new worktree, so don't list anything, but let\n\t\t\t# Bash fall back to filename completion.\n\t\t\t;;\n\t\t*)\t# The previous word is not an --option, so it must\n\t\t\t# be either the 'add' subcommand, the unstuck\n\t\t\t# argument of an option (e.g. branch for -b|-B), or\n\t\t\t# the path for the new worktree.\n\t\t\tif [ $cword -eq $((subcommand_idx+1)) ]; then\n\t\t\t\t# Right after the 'add' subcommand: have to\n\t\t\t\t# complete the path, so fall back to Bash\n\t\t\t\t# filename completion.\n\t\t\t\t:\n\t\t\telse\n\t\t\t\tcase \"${words[cword-2]}\" in\n\t\t\t\t-b|-B)\t# After '-b <branch>': have to\n\t\t\t\t\t# complete the path, so fall back\n\t\t\t\t\t# to Bash filename completion.\n\t\t\t\t\t;;\n\t\t\t\t*)\t# After the path: have to complete\n\t\t\t\t\t# the ref to be checked out.\n\t\t\t\t\t__git_complete_refs\n\t\t\t\t\t;;\n\t\t\t\tesac\n\t\t\tfi\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tlock,*|remove,*|unlock,*)\n\t\t__git_complete_worktree_paths\n\t\t;;\n\tmove,*)\n\t\tif [ $cword -eq $((subcommand_idx+1)) ]; then\n\t\t\t# The first parameter must be an existing working\n\t\t\t# tree to be moved.\n\t\t\t__git_complete_worktree_paths\n\t\telse\n\t\t\t# The second parameter is the destination: it could\n\t\t\t# be any path, so don't list anything, but let Bash\n\t\t\t# fall back to filename completion.\n\t\t\t:\n\t\tfi\n\t\t;;\n\tesac\n}\n\n__git_complete_common () {\n\tlocal command=\"$1\"\n\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp_builtin \"$command\"\n\t\t;;\n\tesac\n}\n\n__git_cmds_with_parseopt_helper=\n__git_support_parseopt_helper () {\n\ttest -n \"$__git_cmds_with_parseopt_helper\" ||\n\t\t__git_cmds_with_parseopt_helper=\"$(__git --list-cmds=parseopt)\"\n\n\tcase \" $__git_cmds_with_parseopt_helper \" in\n\t*\" $1 \"*)\n\t\treturn 0\n\t\t;;\n\t*)\n\t\treturn 1\n\t\t;;\n\tesac\n}\n\n__git_have_func () {\n\tdeclare -f -- \"$1\" >/dev/null 2>&1\n}\n\n__git_complete_command () {\n\tlocal command=\"$1\"\n\tlocal completion_func=\"_git_${command//-/_}\"\n\tif ! __git_have_func $completion_func &&\n\t\t__git_have_func _completion_loader\n\tthen\n\t\t_completion_loader \"git-$command\"\n\tfi\n\tif __git_have_func $completion_func\n\tthen\n\t\t$completion_func\n\t\treturn 0\n\telif __git_support_parseopt_helper \"$command\"\n\tthen\n\t\t__git_complete_common \"$command\"\n\t\treturn 0\n\telse\n\t\treturn 1\n\tfi\n}\n\n__git_main ()\n{\n\tlocal i c=1 command __git_dir __git_repo_path\n\tlocal __git_C_args C_args_count=0\n\tlocal __git_cmd_idx\n\n\twhile [ $c -lt $cword ]; do\n\t\ti=\"${words[c]}\"\n\t\tcase \"$i\" in\n\t\t--git-dir=*)\n\t\t\t__git_dir=\"${i#--git-dir=}\"\n\t\t\t;;\n\t\t--git-dir)\n\t\t\t((c++))\n\t\t\t__git_dir=\"${words[c]}\"\n\t\t\t;;\n\t\t--bare)\n\t\t\t__git_dir=\".\"\n\t\t\t;;\n\t\t--help)\n\t\t\tcommand=\"help\"\n\t\t\tbreak\n\t\t\t;;\n\t\t-c|--work-tree|--namespace)\n\t\t\t((c++))\n\t\t\t;;\n\t\t-C)\n\t\t\t__git_C_args[C_args_count++]=-C\n\t\t\t((c++))\n\t\t\t__git_C_args[C_args_count++]=\"${words[c]}\"\n\t\t\t;;\n\t\t-*)\n\t\t\t;;\n\t\t*)\n\t\t\tcommand=\"$i\"\n\t\t\t__git_cmd_idx=\"$c\"\n\t\t\tbreak\n\t\t\t;;\n\t\tesac\n\t\t((c++))\n\tdone\n\n\tif [ -z \"${command-}\" ]; then\n\t\tcase \"$prev\" in\n\t\t--git-dir|-C|--work-tree)\n\t\t\t# these need a path argument, let's fall back to\n\t\t\t# Bash filename completion\n\t\t\treturn\n\t\t\t;;\n\t\t-c)\n\t\t\t__git_complete_config_variable_name_and_value\n\t\t\treturn\n\t\t\t;;\n\t\t--namespace)\n\t\t\t# we don't support completing these options' arguments\n\t\t\treturn\n\t\t\t;;\n\t\tesac\n\t\tcase \"$cur\" in\n\t\t--*)\n\t\t\t__gitcomp \"\n\t\t\t--paginate\n\t\t\t--no-pager\n\t\t\t--git-dir=\n\t\t\t--bare\n\t\t\t--version\n\t\t\t--exec-path\n\t\t\t--exec-path=\n\t\t\t--html-path\n\t\t\t--man-path\n\t\t\t--info-path\n\t\t\t--work-tree=\n\t\t\t--namespace=\n\t\t\t--no-replace-objects\n\t\t\t--help\n\t\t\t\"\n\t\t\t;;\n\t\t*)\n\t\t\tif test -n \"${GIT_TESTING_PORCELAIN_COMMAND_LIST-}\"\n\t\t\tthen\n\t\t\t\t__gitcomp \"$GIT_TESTING_PORCELAIN_COMMAND_LIST\"\n\t\t\telse\n\t\t\t\tlocal list_cmds=list-mainporcelain,others,nohelpers,alias,list-complete,config\n\n\t\t\t\tif test \"${GIT_COMPLETION_SHOW_ALL_COMMANDS-}\" = \"1\"\n\t\t\t\tthen\n\t\t\t\t\tlist_cmds=builtins,$list_cmds\n\t\t\t\tfi\n\t\t\t\t__gitcomp \"$(__git --list-cmds=$list_cmds)\"\n\t\t\tfi\n\t\t\t;;\n\t\tesac\n\t\treturn\n\tfi\n\n\t__git_complete_command \"$command\" && return\n\n\tlocal expansion=$(__git_aliased_command \"$command\")\n\tif [ -n \"$expansion\" ]; then\n\t\twords[1]=$expansion\n\t\t__git_complete_command \"$expansion\"\n\tfi\n}\n\n__gitk_main ()\n{\n\t__git_has_doubledash && return\n\n\tlocal __git_repo_path\n\t__git_find_repo_path\n\n\tlocal merge=\"\"\n\tif [ -f \"$__git_repo_path/MERGE_HEAD\" ]; then\n\t\tmerge=\"--merge\"\n\tfi\n\tcase \"$cur\" in\n\t--*)\n\t\t__gitcomp \"\n\t\t\t$__git_log_common_options\n\t\t\t$__git_log_gitk_options\n\t\t\t$merge\n\t\t\t\"\n\t\treturn\n\t\t;;\n\tesac\n\t__git_complete_revlist\n}\n\nif [[ -n ${ZSH_VERSION-} && -z ${GIT_SOURCING_ZSH_COMPLETION-} ]]; then\n\techo \"ERROR: this script is obsolete, please see git-completion.zsh\" 1>&2\n\treturn\nfi\n\n__git_func_wrap ()\n{\n\tlocal cur words cword prev\n\tlocal __git_cmd_idx=0\n\t_get_comp_words_by_ref -n =: cur words cword prev\n\t$1\n}\n\n___git_complete ()\n{\n\tlocal wrapper=\"__git_wrap${2}\"\n\teval \"$wrapper () { __git_func_wrap $2 ; }\"\n\tcomplete -o bashdefault -o default -o nospace -F $wrapper $1 2>/dev/null \\\n\t\t|| complete -o default -o nospace -F $wrapper $1\n}\n\n# Setup the completion for git commands\n# 1: command or alias\n# 2: function to call (e.g. `git`, `gitk`, `git_fetch`)\n__git_complete ()\n{\n\tlocal func\n\n\tif __git_have_func $2; then\n\t\tfunc=$2\n\telif __git_have_func __$2_main; then\n\t\tfunc=__$2_main\n\telif __git_have_func _$2; then\n\t\tfunc=_$2\n\telse\n\t\techo \"ERROR: could not find function '$2'\" 1>&2\n\t\treturn 1\n\tfi\n\t___git_complete $1 $func\n}\n\n___git_complete git __git_main\n___git_complete gitk __gitk_main\n\n# The following are necessary only for Cygwin, and only are needed\n# when the user has tab-completed the executable name and consequently\n# included the '.exe' suffix.\n#\nif [ \"$OSTYPE\" = cygwin ]; then\n\t___git_complete git.exe __git_main\nfi\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0693359375,
          "content": "\n*.gif diff=image\n*.jpeg diff=image\n*.jpg diff=image\n*.png diff=image\n\n"
        },
        {
          "name": ".gitconfig",
          "type": "blob",
          "size": 6.234375,
          "content": "[alias]\n\tc = commit -am\n\tfpush = push --force\n\ttpush = push  # typo: leftover t from git\n\ts = status\n\tts = status # I do the `gi ts` typo all the time\n\tsclone = clone --depth=1\n\tamend = commit --amend --all --no-edit\n\tundocommit = reset HEAD~\n\threset = reset --hard\n\tco = checkout\n\tdf = diff --color --color-words --abbrev\n\tlg = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd) %C(bold blue)<%an>%Creset' --abbrev-commit\n\tcherrypick = cherry-pick\n\tcp = cherry-pick\n\t# i'm a merger in dev branches, but a squasher for landing to main.\n\tmergegood = merge --no-ff\n\n\t# If you do `git git status`, this sorts out the duplicate\n\tgit = !exec git\n\n\tmergeorigin = !\"git merge origin/$(git mainormaster)\"\n\n\t# Essentially GitHub's compare view: show all 'ahead' changes (incl working tree) vs the merge-base\n\tdiffbranch = !\"git diff  $(git diffbase)\"\n\t# Diff of branch that's not checked out. Doesn't include working tree (but obv doesnt need to)\n\tdiffbranch-that = !\"git diff origin/$(git mainormaster)...\\\"$1\\\" #\"\n\t# Show commit log of unique commits of this branch (not on main)\n\tdiffcommitsfrommain = !\"git log --no-merges origin/$(git mainormaster)..\"\n\t#                                                                      ^^ also, 2 vs 3 dots: so important. https://stackoverflow.com/a/48681527\n\n\t# I prefer these from my fish abbv's, but for bash we'll keep this as a fallback.\n\tdb = diffbranch\n\tdbt = diffbranch-that\n\n\t# Squash a branch to one commit against a branch with many non-main commits.\n\t# This can't be an alias, but here's the hack.\n\t#    # be on the new feature branch, be okay with rewriting it's history.\n\t#    git reset --soft (git merge-base Other_Branch_Name HEAD)\n\n\n\t# Two utils: \n\t#   What's the ancestor commit this branch shares with (the parent branch, or, more likely...) main?\n\t#   diffbase = !\"git config --get branch.$(command git symbolic-ref --short HEAD).base || git merge-base origin/$(git mainormaster) HEAD\"\n\tdiffbase = !\"git merge-base origin/$(git mainormaster) HEAD\"\n\t#   Is it a `main` or a `master` repo? Will default to main if neither is found.\n\tmainormaster = !\"(git branch --format '%(refname:short)' --sort=-committerdate --list master main; echo main) | head -n1 || echo main\"\n\n\t# fyi to change a git checkout from master to main.. (gh's suggested commands:)\n\t#    git branch -m master main; git fetch origin; git branch -u origin/main main; git remote set-head origin -a\n\n\t# commit (past) WIP changes with a message stating when they happened. (Cuz I sometimes leave changes uncommitted for a while, but want the dates for reference)\n\t# todo: maybe use `git commit --date=X` to set a past date. would need to pick one, tho.\n\tcommitwip = !\"git commit -am \\\"Assorted changes. Last modified on:\\n$(( git diff --name-only --cached; git ls-files --modified ) | uniq | xargs gstat -c '- %.19y %N')\\\"\"\n\n\n\t# I'm curious about some of these git + fzf aliases... \n\t#   https://github.com/mattorb/dotfiles/blob/d16776eff48d831bcfaca58f1972e6b587f5dc28/git/.gitaliases#L89\n\t#   https://github.com/junegunn/fzf-git.sh\n\t#   https://brettterpstra.com/2021/11/25/git-better-with-fzf-and-fish/ and https://gist.github.com/aluxian/9c6f97557b7971c32fdff2f2b1da8209                   \n\n[core]\n\texcludesfile = ~/.gitignore\n\tattributesfile = ~/.gitattributes\n\tprecomposeUnicode = true\n\t# https://github.com/dandavison/delta\n\tpager = delta\n\n[delta]\n\tmax-line-length = 700\n\t# max-line-distance = 0.3 # better word-diff?\n\tsyntax-theme = base16\n\thyperlinks = true # i filed https://github.com/dandavison/delta/issues/362 but in 2022 i can't see brokenness in the issue nor repro weirdness. but i installed latest `less` anyway\n\t                  # oh i found it. it doubles up the sha and adds some `8;;` at the end.\n\t\t\t\t\t  # to fix.... install latest less (`less -V` should be >= v570). shouldn't need to set DELTA_PAGER.\n\t# line-numbers = true # seems nice until you want to copypaste and they're there…\n\t# navigate = true # eh. not great with short diffs.\n\n\tfile-style = bold yellow ul\n\tfile-decoration-style = yellow ol ul\n\thunk-header-decoration-style = blue\n\thunk-header-line-number-style = purple bold\n\n[interactive]\n\tdiffFilter = delta --color-only --features=interactive\n\n[diff]\n\t# Show blocks of moved text of at least 20 alphanumeric characters differently than adds/deletes\n\t# https://blog.github.com/2018-04-05-git-217-released/\n\tcolorMoved = default\n\t# Detect copies in addition to renames\n\trenames = copies\n\t# A la `git submodule summary`\n\tsubmodule = log\n\n# special hunk parsing for .pdl. https://mirrors.edge.kernel.org/pub/software/scm/git/docs/gitattributes.html#_defining_a_custom_hunk_header\n[diff \"pdl\"]\n\txfuncname = \"^((experimental )*domain.*)\"\n\txfuncname = \"^  type.*\"\n\n# so much color\n[color]\n\tui = auto\n[color \"diff\"]  # i still love these choices in 2022.\n\tmeta = yellow bold\n\tcommit = green bold\n\tfrag = magenta bold\n\told = red bold\n\tnew = green bold\n\twhitespace = red reverse\n\n\tnewMoved = cyan dim\n\toldMoved = blue dim\n\tnewMovedAlternative = cyan italic\n\toldMovedAlternative = blue italic\n[color \"branch\"]\n\tcurrent = yellow reverse\n\tlocal = yellow\n\tremote = green\n[color \"status\"]\n\tadded = yellow\n\tchanged = green\n\tuntracked = cyan\n\n[color \"diff-highlight\"]  # mostly dead. only needed when using diff-so-fancy\n\toldNormal = red bold\n\toldHighlight = \"red bold 52\"\n\tnewNormal = \"green bold\"\n\tnewHighlight = \"green bold 22\"\n\n[log]\n\t# https://github.com/git/git/commit/acdd37769de8b0fe37a74bfc0475b63bdc55e9dc\n\tdate = human\n\n# git mergetool\n[merge]\n\ttool = opendiff\n\trenameLimit = 0\n\n\n[url \"git@github.com:\"]\n\tinsteadOf = https://github.com/\n\n[url \"git://gist.github.com/\"]\n\tinsteadOf = \"gist:\"\n\n# correct typos\n[help]\n\tautocorrect = 1\n\n# push easily. http://stackoverflow.com/a/23918418/89484\n[push]\n\tdefault = current\n\tfollowTags = true\n\tautoSetupRemote = true\n[pull]\n\tff = only\n\tdefault = current\n[checkout]\n\tdefaultRemote = origin\n\n# use separate file for username / github token / etc\n[include]\n\tpath = ~/.gitconfig.local\n\n[filter \"lfs\"]\n\tclean = git-lfs clean -- %f\n\tsmudge = git-lfs smudge -- %f\n\trequired = true\n\tprocess = git-lfs filter-process\n\n[fetch]\n\tprune = true\n\n[stash]\n\tshowPatch = true\n\n# faster git server communication.\n# like a LOT faster. https://opensource.googleblog.com/2018/05/introducing-git-protocol-version-2.html\n[protocol]\n\tversion = 2\n\n\n[advice]\n\tdetachedHead = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.455078125,
          "content": "# This is intended as GLOBAL ~/.gitignore, not just this dotfiles repo. (But.. it's both.)\n\n# I like having a personal readme file to keep notes.\nPAUL.readme.md\n\n# git credential file\n.gitconfig.local\n\n# Nice and clean by default, but this does create a problem if I don't add into new repos gitignore and other folks dont have the same default.  problems when other folks don't have the same in their global gitignore.  \nnode_modules\n\n# why u be like that\n.DS_Store"
        },
        {
          "name": ".hushlogin",
          "type": "blob",
          "size": 0,
          "content": ""
        },
        {
          "name": ".inputrc",
          "type": "blob",
          "size": 2.203125,
          "content": "\n## SMARTER TAB-COMPLETION (Readline bindings) ##\n\n# Perform file completion in a case insensitive fashion\nset completion-ignore-case on\n\n# Treat hyphens and underscores as equivalent\nset completion-map-case on\n\n# Display matches for ambiguous patterns at first tab press\nset show-all-if-ambiguous on\n\n# Immediately add a trailing slash when autocompleting symlinks to directories\nset mark-symlinked-directories on\n\n\n# Show all autocomplete results at once\nset page-completions off\n\n\n# If set to 'on', when listing completions, Readline displays the common prefix of the set of possible completions using a different color. The color definitions are taken from the value of the LS_COLORS environment variable. The default is 'off'.\nset colored-completion-prefix on\n\n# If set to 'on', Readline displays possible completions using different colors to indicate their file type. The color definitions are taken from the value of the LS_COLORS environment variable. The default is 'off'.\nset colored-stats on\n\n\n# Use the text that has already been typed as the prefix for searching through\n# commands (basically more intelligent Up/Down behavior)\n# These two lines are DUPLICATED in bash_profile also......\n\"\\e[A\": history-search-backward\n\"\\e[B\": history-search-forward\n\n\n# macOS Option + Left/Right arrow keys to move the cursor wordwise\n\"\\e\\e[C\": forward-word\n\"\\e\\e[D\": backward-word\n\n# Do not autocomplete hidden files unless the pattern explicitly begins with a dot\nset match-hidden-files off\n\n\n# If there are more than 200 possible completions for a word, ask to show them all\nset completion-query-items 200\n\n# Show extra file information when completing, like `ls -F` does\nset visible-stats on\n\n# Be more intelligent when autocompleting by also looking at the text after\n# the cursor. For example, when the current line is \"cd ~/src/mozil\", and\n# the cursor is on the \"z\", pressing Tab will not autocomplete it to \"cd\n# ~/src/mozillail\", but to \"cd ~/src/mozilla\". (This is supported by the\n# Readline used by Bash 4.)\nset skip-completed-text on\n\n# Allow UTF-8 input and output, instead of showing stuff like $'\\0123\\0456'\nset input-meta on\nset output-meta on\nset convert-meta off\n\n# Use Alt/Meta + Delete to delete the preceding word\n\"\\e[3;3~\": kill-word"
        },
        {
          "name": ".iterm2_shell_integration.fish",
          "type": "blob",
          "size": 5.88671875,
          "content": "# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# \n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n# \n# You should have received a copy of the GNU General Public License\n# along with this program; if not, write to the Free Software\n# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n\nif begin; status --is-interactive; and not functions -q -- iterm2_status; and test \"$ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX\"\"$TERM\" != screen; and test \"$ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX\"\"$TERM\" != screen-256color; and test \"$ITERM_ENABLE_SHELL_INTEGRATION_WITH_TMUX\"\"$TERM\" != tmux-256color; and test \"$TERM\" != dumb; and test \"$TERM\" != linux; end\n  function iterm2_status\n    printf \"\\033]133;D;%s\\007\" $argv\n  end\n\n  # Mark start of prompt\n  function iterm2_prompt_mark\n    printf \"\\033]133;A\\007\"\n  end\n\n  # Mark end of prompt\n  function iterm2_prompt_end\n    printf \"\\033]133;B\\007\"\n  end\n\n  # Tell terminal to create a mark at this location\n  function iterm2_preexec --on-event fish_preexec\n    # For other shells we would output status here but we can't do that in fish.\n    if test \"$TERM_PROGRAM\" = \"iTerm.app\"\n      printf \"\\033]133;C;\\r\\007\"\n    else\n      printf \"\\033]133;C;\\007\"\n    end\n  end\n\n  # Usage: iterm2_set_user_var key value\n  # These variables show up in badges (and later in other places). For example\n  # iterm2_set_user_var currentDirectory \"$PWD\"\n  # Gives a variable accessible in a badge by \\(user.currentDirectory)\n  # Calls to this go in iterm2_print_user_vars.\n  function iterm2_set_user_var\n    printf \"\\033]1337;SetUserVar=%s=%s\\007\" $argv[1] (printf \"%s\" $argv[2] | base64 | tr -d \"\\n\")\n  end\n\n  function iterm2_write_remotehost_currentdir_uservars\n    if not set -q -g iterm2_hostname\n      printf \"\\033]1337;RemoteHost=%s@%s\\007\\033]1337;CurrentDir=%s\\007\" $USER (hostname -f 2>/dev/null) $PWD\n    else\n      printf \"\\033]1337;RemoteHost=%s@%s\\007\\033]1337;CurrentDir=%s\\007\" $USER $iterm2_hostname $PWD\n    end\n\n    # Users can define a function called iterm2_print_user_vars.\n    # It should call iterm2_set_user_var and produce no other output.\n    if functions -q -- iterm2_print_user_vars\n      iterm2_print_user_vars\n    end\n  end\n\n  functions -c fish_prompt iterm2_fish_prompt\n\n  function iterm2_common_prompt\n    set -l last_status $status\n\n    iterm2_status $last_status\n    iterm2_write_remotehost_currentdir_uservars\n    if not functions iterm2_fish_prompt | string match -q \"*iterm2_prompt_mark*\"\n      iterm2_prompt_mark\n    end\n    return $last_status\n  end\n\n  function iterm2_check_function -d \"Check if function is defined and non-empty\"\n    test (functions $argv[1] | grep -cvE '^ *(#|function |end$|$)') != 0\n  end\n\n  if iterm2_check_function fish_mode_prompt\n    # Only override fish_mode_prompt if it is non-empty. This works around a problem created by a\n    # workaround in starship: https://github.com/starship/starship/issues/1283\n    functions -c fish_mode_prompt iterm2_fish_mode_prompt\n    function fish_mode_prompt --description 'Write out the mode prompt; do not replace this. Instead, change fish_mode_prompt before sourcing .iterm2_shell_integration.fish, or modify iterm2_fish_mode_prompt instead.'\n      iterm2_common_prompt\n      iterm2_fish_mode_prompt\n    end\n\n    function fish_prompt --description 'Write out the prompt; do not replace this. Instead, change fish_prompt before sourcing .iterm2_shell_integration.fish, or modify iterm2_fish_prompt instead.'\n      # Remove the trailing newline from the original prompt. This is done\n      # using the string builtin from fish, but to make sure any escape codes\n      # are correctly interpreted, use %b for printf.\n      printf \"%b\" (string join \"\\n\" (iterm2_fish_prompt))\n\n      iterm2_prompt_end\n    end\n  else\n    # fish_mode_prompt is empty or unset.\n    function fish_prompt --description 'Write out the mode prompt; do not replace this. Instead, change fish_mode_prompt before sourcing .iterm2_shell_integration.fish, or modify iterm2_fish_mode_prompt instead.'\n      iterm2_common_prompt\n\n      # Remove the trailing newline from the original prompt. This is done\n      # using the string builtin from fish, but to make sure any escape codes\n      # are correctly interpreted, use %b for printf.\n      printf \"%b\" (string join \"\\n\" (iterm2_fish_prompt))\n\n      iterm2_prompt_end\n    end\n  end\n\n  # If hostname -f is slow for you, set iterm2_hostname before sourcing this script\n  if not set -q -g iterm2_hostname\n    # hostname -f is fast on macOS so don't cache it. This lets us get an updated version when\n    # it changes, such as if you attach to a VPN.\n    if test (uname) != Darwin\n      set -g iterm2_hostname (hostname -f 2>/dev/null)\n      # some flavors of BSD (i.e. NetBSD and OpenBSD) don't have the -f option\n      if test $status -ne 0\n        set -g iterm2_hostname (hostname)\n      end\n    end\n  end\n\n  iterm2_write_remotehost_currentdir_uservars\n  printf \"\\033]1337;ShellIntegrationVersion=19;shell=fish\\007\"\nend\n\nalias imgcat=$HOME/.iterm2/imgcat;alias imgls=$HOME/.iterm2/imgls;alias it2api=$HOME/.iterm2/it2api;alias it2attention=$HOME/.iterm2/it2attention;alias it2cat=$HOME/.iterm2/it2cat;alias it2check=$HOME/.iterm2/it2check;alias it2copy=$HOME/.iterm2/it2copy;alias it2dl=$HOME/.iterm2/it2dl;alias it2getvar=$HOME/.iterm2/it2getvar;alias it2git=$HOME/.iterm2/it2git;alias it2profile=$HOME/.iterm2/it2profile;alias it2setcolor=$HOME/.iterm2/it2setcolor;alias it2setkeylabel=$HOME/.iterm2/it2setkeylabel;alias it2ssh=$HOME/.iterm2/it2ssh;alias it2tip=$HOME/.iterm2/it2tip;alias it2ul=$HOME/.iterm2/it2ul;alias it2universion=$HOME/.iterm2/it2universion\n"
        },
        {
          "name": ".macos",
          "type": "blob",
          "size": 29.1015625,
          "content": "#!/usr/bin/env bash\n\n# ~/.macos\n# paul's slight fork of https://mths.be/macos\n#                       ^ is more canonical and comprehensive. I've edited it down a bit for my own uses.\n\n\n# FWIW, this `defaults find` is good at finding some set preferences.\n# e.g.    defaults find com.apple.ActivityMonitor\n\n#\n# TODO: capture some preferences in \n#     - com.apple.ActivityMonitor \"UserColumnsPerTab v6.0\" (i have the 5.0s below.)\n#     - 'com.apple.dock'    \"persistent-apps\" somehow?\n#\n\n\n# Close any open System Preferences panes, to prevent them from overriding\n# settings we’re about to change\nosascript -e 'tell application \"System Preferences\" to quit'\n\n# Ask for the administrator password upfront\nsudo -v\n\n# Keep-alive: update existing `sudo` time stamp until `.macos` has finished\nwhile true; do sudo -n true; sleep 60; kill -0 \"$$\" || exit; done 2>/dev/null &\n\n###############################################################################\n# General UI/UX                                                               #\n###############################################################################\n\n# Menu bar: disable transparency\ndefaults write NSGlobalDomain AppleEnableMenuBarTransparency -bool false\n\n# Set standby delay to 24 hours (default is 1 hour)\nsudo pmset -a standbydelay 86400\n\n# Disable the sound effects on boot\nsudo nvram SystemAudioVolume=\" \"\n\n# Disable transparency in the menu bar and elsewhere on Yosemite\ndefaults write com.apple.universalaccess reduceTransparency -bool true\n\n# Set highlight color to pink\ndefaults write NSGlobalDomain AppleHighlightColor -string \"1.000000 0.252792 1.000000 Other\"\n\n# Set sidebar icon size to medium\ndefaults write NSGlobalDomain NSTableViewDefaultSizeMode -int 2\n\n# Always show scrollbars\n# defaults write NSGlobalDomain AppleShowScrollBars -string \"Always\"\n# Possible values: `WhenScrolling`, `Automatic` and `Always`\n\n# Adjust toolbar title rollover delay\ndefaults write NSGlobalDomain NSToolbarTitleViewRolloverDelay -float 0\n\n# Disable smooth scrolling\n# (Uncomment if you’re on an older Mac that messes up the animation)\n#defaults write NSGlobalDomain NSScrollAnimationEnabled -bool false\n\n# Increase window resize speed for Cocoa applications\ndefaults write NSGlobalDomain NSWindowResizeTime -float 0.001\n\n# Expand save panel by default\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode -bool true\ndefaults write NSGlobalDomain NSNavPanelExpandedStateForSaveMode2 -bool true\n\n# Expand print panel by default\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint -bool true\ndefaults write NSGlobalDomain PMPrintingExpandedStateForPrint2 -bool true\n\n# Save to disk (not to iCloud) by default\ndefaults write NSGlobalDomain NSDocumentSaveNewDocumentsToCloud -bool false\n\n# Automatically quit printer app once the print jobs complete\ndefaults write com.apple.print.PrintingPrefs \"Quit When Finished\" -bool true\n\n# Disable the “Are you sure you want to open this application?” dialog\ndefaults write com.apple.LaunchServices LSQuarantine -bool false\n\n# Remove duplicates in the “Open With” menu (also see `lscleanup` alias)\n/System/Library/Frameworks/CoreServices.framework/Frameworks/LaunchServices.framework/Support/lsregister -kill -r -domain local -domain system -domain user\n\n# Display ASCII control characters using caret notation in standard text views\n# Try e.g. `cd /tmp; unidecode \"\\x{0000}\" > cc.txt; open -e cc.txt`\ndefaults write NSGlobalDomain NSTextShowsControlCharacters -bool true\n\n# Disable Resume system-wide\ndefaults write com.apple.systempreferences NSQuitAlwaysKeepsWindows -bool false\n\n# Edit: ALLOW automatic termination of inactive apps\ndefaults write NSGlobalDomain NSDisableAutomaticTermination -bool false\n\n# Disable the crash reporter\n#defaults write com.apple.CrashReporter DialogType -string \"none\"\n\n# Set Help Viewer windows to non-floating mode\ndefaults write com.apple.helpviewer DevMode -bool true\n\n# Fix for the ancient UTF-8 bug in QuickLook (https://mths.be/bbo)\n# Commented out, as this is known to cause problems in various Adobe apps :(\n# See https://github.com/mathiasbynens/dotfiles/issues/237\n#echo \"0x08000100:0\" > ~/.CFUserTextEncoding\n\n# Reveal IP address, hostname, OS version, etc. when clicking the clock\n# in the login window\nsudo defaults write /Library/Preferences/com.apple.loginwindow AdminHostInfo HostName\n\n# Restart automatically if the computer freezes\nsudo systemsetup -setrestartfreeze on\n\n# go into computer sleep mode after 20min\nsudo systemsetup -setcomputersleep 20\n\n# Check for software updates daily, not just once per week\ndefaults write com.apple.SoftwareUpdate ScheduleFrequency -int 1\n\n# Disable Notification Center and remove the menu bar icon\n# launchctl unload -w /System/Library/LaunchAgents/com.apple.notificationcenterui.plist 2> /dev/null\n\n# Disable smart quotes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticQuoteSubstitutionEnabled -bool false\n\n# Disable smart dashes as they’re annoying when typing code\ndefaults write NSGlobalDomain NSAutomaticDashSubstitutionEnabled -bool false\n\n# Set a custom wallpaper image. `DefaultDesktop.jpg` is already a symlink, and\n# all wallpapers are in `/Library/Desktop Pictures/`. The default is `Wave.jpg`.\n#rm -rf ~/Library/Application Support/Dock/desktoppicture.db\n#sudo rm -rf /System/Library/CoreServices/DefaultDesktop.jpg\n#sudo ln -s /path/to/your/image /System/Library/CoreServices/DefaultDesktop.jpg\n\n###############################################################################\n# MacBookPro Touch Bar                                                        #\n###############################################################################\n\n# Always display full control strip (ignoring App Controls)\ndefaults write com.apple.touchbar.agent PresentationModeGlobal fullControlStrip\n\n###############################################################################\n# SSD-specific tweaks                                                         #\n###############################################################################\n\n# Disable local Time Machine snapshots\nsudo tmutil disablelocal\n\n# Disable hibernation (speeds up entering sleep mode)\nsudo pmset -a hibernatemode 0\n\n# Remove the sleep image file to save disk space\nsudo rm /private/var/vm/sleepimage\n# Create a zero-byte file instead…\nsudo touch /private/var/vm/sleepimage\n# …and make sure it can’t be rewritten\nsudo chflags uchg /private/var/vm/sleepimage\n\n# Disable the sudden motion sensor as it’s not useful for SSDs\nsudo pmset -a sms 0\n\n###############################################################################\n# Trackpad, mouse, keyboard, Bluetooth accessories, and input                 #\n###############################################################################\n\n# Trackpad: enable tap to click for this user and for the login screen\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad Clicking -bool true\ndefaults -currentHost write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\ndefaults write NSGlobalDomain com.apple.mouse.tapBehavior -int 1\n\n# Trackpad: map bottom right corner to right-click\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadCornerSecondaryClick -int 2\ndefaults write com.apple.driver.AppleBluetoothMultitouch.trackpad TrackpadRightClick -bool true\ndefaults -currentHost write NSGlobalDomain com.apple.trackpad.trackpadCornerClickBehavior -int 1\ndefaults -currentHost write NSGlobalDomain com.apple.trackpad.enableSecondaryClick -bool true\n\n# Disable “natural” (Lion-style) scrolling\ndefaults write NSGlobalDomain com.apple.swipescrolldirection -bool false\n\n# Increase sound quality for Bluetooth headphones/headsets\ndefaults write com.apple.BluetoothAudioAgent \"Apple Bitpool Min (editable)\" -int 40\n\n# mute all sounds, incl volume change feedback\ndefaults write \"com.apple.sound.beep.feedback\" -int 0\ndefaults write com.apple.systemsound 'com.apple.sound.beep.volume' -float 0\ndefaults write \"com.apple.systemsound\" \"com.apple.sound.uiaudio.enabled\" -int 0\n\n# Enable full keyboard access for all controls\n# (e.g. enable Tab in modal dialogs)\ndefaults write NSGlobalDomain AppleKeyboardUIMode -int 3\n\n# Enable access for assistive devices\necho -n 'a' | sudo tee /private/var/db/.AccessibilityAPIEnabled > /dev/null 2>&1\nsudo chmod 444 /private/var/db/.AccessibilityAPIEnabled\n# TODO: avoid GUI password prompt somehow (http://apple.stackexchange.com/q/60476/4408)\n#sudo osascript -e 'tell application \"System Events\" to set UI elements enabled to true'\n\n# Use scroll gesture with the Ctrl (^) modifier key to zoom\ndefaults write com.apple.universalaccess closeViewScrollWheelToggle -bool true\ndefaults write com.apple.universalaccess HIDScrollZoomModifierMask -int 262144\n# Follow the keyboard focus while zoomed in\ndefaults write com.apple.universalaccess closeViewZoomFollowsFocus -bool false\n# Zoom should use nearest neighbor instead of smoothing.\ndefaults write com.apple.universalaccess 'closeViewSmoothImages' -bool false\n\n# Disable press-and-hold for keys in favor of key repeat\ndefaults write NSGlobalDomain ApplePressAndHoldEnabled -bool false\n\n# Set a blazingly fast keyboard repeat rate\ndefaults write NSGlobalDomain KeyRepeat -int 2\ndefaults write NSGlobalDomain InitialKeyRepeat -int 15\n\n# Automatically illuminate built-in MacBook keyboard in low light\ndefaults write com.apple.BezelServices kDim -bool true\n# Turn off keyboard illumination when computer is not used for 5 minutes\ndefaults write com.apple.BezelServices kDimTime -int 300\n\n\n# Disable auto-correct\ndefaults write NSGlobalDomain NSAutomaticSpellingCorrectionEnabled -bool false\n\n# Stop iTunes from responding to the keyboard media keys\nlaunchctl unload -w /System/Library/LaunchAgents/com.apple.rcd.plist 2> /dev/null\n\n###############################################################################\n# Screen                                                                      #\n###############################################################################\n\n\n# Save screenshots to the desktop\ndefaults write com.apple.screencapture location -string \"${HOME}/Desktop\"\n\n# Save screenshots in PNG format (other options: BMP, GIF, JPG, PDF, TIFF)\ndefaults write com.apple.screencapture type -string \"png\"\n\n# Hide all desktop icons because who need 'em'\ndefaults write com.apple.finder CreateDesktop -bool false\n\n# Disable shadow in screenshots\ndefaults write com.apple.screencapture disable-shadow -bool false\n\n# Enable subpixel font rendering on non-Apple LCDs\ndefaults write NSGlobalDomain AppleFontSmoothing -int 2\n\n# Enable HiDPI display modes (requires restart)\nsudo defaults write /Library/Preferences/com.apple.windowserver DisplayResolutionEnabled -bool true\n\n###############################################################################\n# Finder                                                                      #\n###############################################################################\n\n# Finder: allow quitting via ⌘ + Q; doing so will also hide desktop icons\ndefaults write com.apple.finder QuitMenuItem -bool true\n\n# Finder: disable window animations and Get Info animations\ndefaults write com.apple.finder DisableAllAnimations -bool true\n\n\n# Finder: show hidden files by default\ndefaults write com.apple.Finder AppleShowAllFiles -bool true\n\n# Finder: show all filename extensions\ndefaults write NSGlobalDomain AppleShowAllExtensions -bool true\n\n# Finder: show status bar\ndefaults write com.apple.finder ShowStatusBar -bool true\n\n# Finder: show path bar\ndefaults write com.apple.finder ShowPathbar -bool true\n\n# When performing a search, search the current folder by default\ndefaults write com.apple.finder FXDefaultSearchScope -string \"SCcf\"\n\n# Disable the warning when changing a file extension\ndefaults write com.apple.finder FXEnableExtensionChangeWarning -bool false\n\n# Enable spring loading for directories\ndefaults write NSGlobalDomain com.apple.springing.enabled -bool true\n\n# I dont want the drag n drop happening SUPERFAST. https://discussions.apple.com/thread/7160895\ndefaults write NSGlobalDomain com.apple.springing.delay -float 2\n\n# Avoid creating .DS_Store files on network volumes\ndefaults write com.apple.desktopservices DSDontWriteNetworkStores -bool true\n\n# Automatically open a new Finder window when a volume is mounted\ndefaults write com.apple.frameworks.diskimages auto-open-ro-root -bool true\ndefaults write com.apple.frameworks.diskimages auto-open-rw-root -bool true\ndefaults write com.apple.finder OpenWindowForNewRemovableDisk -bool true\n\n# Show item info near icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:showItemInfo true\" ~/Library/Preferences/com.apple.finder.plist\n\n# Show item info to the right of the icons on the desktop\n/usr/libexec/PlistBuddy -c \"Set DesktopViewSettings:IconViewSettings:labelOnBottom false\" ~/Library/Preferences/com.apple.finder.plist\n\n# Enable snap-to-grid for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:arrangeBy grid\" ~/Library/Preferences/com.apple.finder.plist\n\n# Increase grid spacing for icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:gridSpacing 100\" ~/Library/Preferences/com.apple.finder.plist\n\n# Increase the size of icons on the desktop and in other icon views\n/usr/libexec/PlistBuddy -c \"Set :DesktopViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :FK_StandardViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n/usr/libexec/PlistBuddy -c \"Set :StandardViewSettings:IconViewSettings:iconSize 80\" ~/Library/Preferences/com.apple.finder.plist\n\n# Use list view in all Finder windows by default\n# Four-letter codes for the other view modes: `icnv`, `clmv`, `Flwv`\ndefaults write com.apple.finder FXPreferredViewStyle -string \"Nlsv\"\n\n# Disable the warning before emptying the Trash\ndefaults write com.apple.finder WarnOnEmptyTrash -bool false\n\n# Empty Trash securely by default\ndefaults write com.apple.finder EmptyTrashSecurely -bool true\n\n# Enable AirDrop over Ethernet and on unsupported Macs running Lion\ndefaults write com.apple.NetworkBrowser BrowseAllInterfaces -bool true\n\n# Show the ~/Library folder\nchflags nohidden ~/Library\n\n# Show the /Volumes folder\nsudo chflags nohidden /Volumes\n\n# Remove Dropbox’s green checkmark icons in Finder\nfile=/Applications/Dropbox.app/Contents/Resources/emblem-dropbox-uptodate.icns\n[ -e \"${file}\" ] && mv -f \"${file}\" \"${file}.bak\"\n\n# Expand the following File Info panes:\n# “General”, “Open with”, and “Sharing & Permissions”\ndefaults write com.apple.finder FXInfoPanesExpanded -dict \\\n\tGeneral -bool true \\\n\tOpenWith -bool true \\\n\tPrivileges -bool true\n\n###############################################################################\n# Dock, Dashboard, and hot corners                                            #\n###############################################################################\n\n# Enable highlight hover effect for the grid view of a stack (Dock)\ndefaults write com.apple.dock mouse-over-hilite-stack -bool true\n\n# Set the icon size of Dock items to 36 pixels\ndefaults write com.apple.dock tilesize -int 36\n\n# Change minimize/maximize window effect\ndefaults write com.apple.dock mineffect -string \"scale\"\n\n# Minimize windows into their application’s icon\ndefaults write com.apple.dock minimize-to-application -bool false\n\n# Enable spring loading for all Dock items\ndefaults write com.apple.dock enable-spring-load-actions-on-all-items -bool true\n\n# Show indicator lights for open applications in the Dock\ndefaults write com.apple.dock show-process-indicators -bool true\n\n# Wipe all (default) app icons from the Dock\n# This is only really useful when setting up a new Mac, or if you don’t use\n# the Dock to launch apps.\n#defaults write com.apple.dock persistent-apps -array\n\n# Show only open applications in the Dock\n#defaults write com.apple.dock static-only -bool true\n\n# Don’t animate opening applications from the Dock\ndefaults write com.apple.dock launchanim -bool false\n\n# Speed up Mission Control animations\ndefaults write com.apple.dock expose-animation-duration -float 0.1\n\n# Don’t group windows by application in Mission Control\n# (i.e. use the old Exposé behavior instead)\ndefaults write com.apple.dock expose-group-by-app -bool false\n\n# Disable Dashboard\ndefaults write com.apple.dashboard mcx-disabled -bool true\n\n# Don’t show Dashboard as a Space\ndefaults write com.apple.dock dashboard-in-overlay -bool true\n\n# Don’t automatically rearrange Spaces based on most recent use\ndefaults write com.apple.dock mru-spaces -bool false\n\n# Remove the auto-hiding Dock delay\ndefaults write com.apple.dock autohide-delay -float 0\n# Remove the animation when hiding/showing the Dock\ndefaults write com.apple.dock autohide-time-modifier -float 0\n\n# Automatically hide and show the Dock\ndefaults write com.apple.dock autohide -bool true\n\n# Don't make Dock icons of hidden applications translucent\ndefaults write com.apple.dock showhidden -bool false\n\n# Disable the Launchpad gesture (pinch with thumb and three fingers)\n#defaults write com.apple.dock showLaunchpadGestureEnabled -int 0\n\n# Reset Launchpad, but keep the desktop wallpaper intact\nfind \"${HOME}/Library/Application Support/Dock\" -name \"*-*.db\" -maxdepth 1 -delete\n\n# Add iOS Simulator to Launchpad\nsudo ln -sf \"/Applications/Xcode.app/Contents/Developer/Applications/iOS Simulator.app\" \"/Applications/iOS Simulator.app\"\n\n# Add a spacer to the left side of the Dock (where the applications are)\n#defaults write com.apple.dock persistent-apps -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n# Add a spacer to the right side of the Dock (where the Trash is)\n#defaults write com.apple.dock persistent-others -array-add '{tile-data={}; tile-type=\"spacer-tile\";}'\n\n# Hot corners\n# Possible values:\n#  0: no-op\n#  2: Mission Control\n#  3: Show application windows\n#  4: Desktop\n#  5: Start screen saver\n#  6: Disable screen saver\n#  7: Dashboard\n# 10: Put display to sleep\n# 11: Launchpad\n# 12: Notification Center\n\n\n# Top left screen corner → Put to sleep\ndefaults write com.apple.dock wvous-tl-corner -int 10\ndefaults write com.apple.dock wvous-tl-modifier -int 0\n# Top right screen corner → no-op\ndefaults write com.apple.dock wvous-tr-corner -int 1\ndefaults write com.apple.dock wvous-tr-modifier -int 1048576\n# Bottom left screen corner → no-op\ndefaults write com.apple.dock wvous-bl-corner -int 1\ndefaults write com.apple.dock wvous-bl-modifier -int 1048576\n# Bottom right screen corner → no-op\ndefaults write com.apple.dock wvous-br-corner -int 1\ndefaults write com.apple.dock wvous-br-modifier -int 1048576\n\n###############################################################################\n# Safari & WebKit                                                             #\n###############################################################################\n\n# Privacy: don’t send search queries to Apple\ndefaults write com.apple.Safari UniversalSearchEnabled -bool false\ndefaults write com.apple.Safari SuppressSearchSuggestions -bool true\n\n# Press Tab to highlight each item on a web page\ndefaults write com.apple.Safari WebKitTabToLinksPreferenceKey -bool true\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2TabsToLinks -bool true\n\n# Show the full URL in the address bar (note: this still hides the scheme)\ndefaults write com.apple.Safari ShowFullURLInSmartSearchField -bool true\n\n# Set Safari’s home page to `about:blank` for faster loading\ndefaults write com.apple.Safari HomePage -string \"about:blank\"\n\n# Prevent Safari from opening ‘safe’ files automatically after downloading\ndefaults write com.apple.Safari AutoOpenSafeDownloads -bool false\n\n# Allow hitting the Backspace key to go to the previous page in history\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2BackspaceKeyNavigationEnabled -bool true\n\n# Hide Safari’s bookmarks bar by default\ndefaults write com.apple.Safari ShowFavoritesBar -bool false\n\n# Hide Safari’s sidebar in Top Sites\ndefaults write com.apple.Safari ShowSidebarInTopSites -bool false\n\n# Disable Safari’s thumbnail cache for History and Top Sites\ndefaults write com.apple.Safari DebugSnapshotsUpdatePolicy -int 2\n\n# Enable Safari’s debug menu\ndefaults write com.apple.Safari IncludeInternalDebugMenu -bool true\n\n# Make Safari’s search banners default to Contains instead of Starts With\ndefaults write com.apple.Safari FindOnPageMatchesWordStartsOnly -bool false\n\n# Remove useless icons from Safari’s bookmarks bar\ndefaults write com.apple.Safari ProxiesInBookmarksBar \"()\"\n\n# Enable the Develop menu and the Web Inspector in Safari\ndefaults write com.apple.Safari IncludeDevelopMenu -bool true\ndefaults write com.apple.Safari WebKitDeveloperExtrasEnabledPreferenceKey -bool true\ndefaults write com.apple.Safari com.apple.Safari.ContentPageGroupIdentifier.WebKit2DeveloperExtrasEnabled -bool true\n\n# Add a context menu item for showing the Web Inspector in web views\ndefaults write NSGlobalDomain WebKitDeveloperExtras -bool true\n\n\n###############################################################################\n# Spotlight                                                                   #\n###############################################################################\n\n# Hide Spotlight tray-icon (and subsequent helper)\n#sudo chmod 600 /System/Library/CoreServices/Search.bundle/Contents/MacOS/Search\n# Disable Spotlight indexing for any volume that gets mounted and has not yet\n# been indexed before.\n# Use `sudo mdutil -i off \"/Volumes/foo\"` to stop indexing any volume.\nsudo defaults write /.Spotlight-V100/VolumeConfiguration Exclusions -array \"/Volumes\"\n# Change indexing order and disable some search results\n# Yosemite-specific search results (remove them if you are using macOS 10.9 or older):\n# \tMENU_DEFINITION\n# \tMENU_CONVERSION\n# \tMENU_EXPRESSION\n# \tMENU_SPOTLIGHT_SUGGESTIONS (send search queries to Apple)\n# \tMENU_WEBSEARCH             (send search queries to Apple)\n# \tMENU_OTHER\ndefaults write com.apple.spotlight orderedItems -array \\\n\t'{\"enabled\" = 1;\"name\" = \"APPLICATIONS\";}' \\\n\t'{\"enabled\" = 1;\"name\" = \"SYSTEM_PREFS\";}'\n# Load new settings before rebuilding the index\nkillall mds > /dev/null 2>&1\n# Make sure indexing is enabled for the main volume\nsudo mdutil -i on / > /dev/null\n# Rebuild the index from scratch\nsudo mdutil -E / > /dev/null\n\n###############################################################################\n# Terminal                                                                    #\n###############################################################################\n\n# Only use UTF-8 in Terminal.app\ndefaults write com.apple.terminal StringEncodings -array 4\n\n# Enable “focus follows mouse” for Terminal.app and all X11 apps\n# i.e. hover over a window and start typing in it without clicking first\n#defaults write com.apple.terminal FocusFollowsMouse -bool true\n#defaults write org.x.X11 wm_ffm -bool true\n\n# Enable Secure Keyboard Entry in Terminal.app\n# See: https://security.stackexchange.com/a/47786/8918\ndefaults write com.apple.terminal SecureKeyboardEntry -bool true\n\n# Disable the annoying line marks\ndefaults write com.apple.Terminal ShowLineMarks -int 0\n\n###############################################################################\n# Time Machine                                                                #\n###############################################################################\n\n# Prevent Time Machine from prompting to use new hard drives as backup volume\ndefaults write com.apple.TimeMachine DoNotOfferNewDisksForBackup -bool true\n\n# Disable local Time Machine backups\nhash tmutil &> /dev/null && sudo tmutil disablelocal\n\n###############################################################################\n# Activity Monitor                                                            #\n###############################################################################\n\n# Show the main window when launching Activity Monitor\ndefaults write com.apple.ActivityMonitor OpenMainWindow -bool true\n\n# Visualize CPU usage in the Activity Monitor Dock icon\ndefaults write com.apple.ActivityMonitor IconType -int 5\n\n# Show all processes in Activity Monitor\ndefaults write com.apple.ActivityMonitor ShowCategory -int 0\n\n# Sets columns for all tabs\ndefaults read com.apple.ActivityMonitor \"UserColumnsPerTab v5.0\" -dict \\\n    '0' '( Command, CPUUsage, CPUTime, Threads, PID, UID, Ports )' \\\n    '1' '( Command, ResidentSize, Threads, Ports, PID, UID,  )' \\\n    '2' '( Command, PowerScore, 12HRPower, AppSleep, UID, powerAssertion )' \\\n    '3' '( Command, bytesWritten, bytesRead, Architecture, PID, UID, CPUUsage )' \\\n    '4' '( Command, txBytes, rxBytes, PID, UID, txPackets, rxPackets, CPUUsage )'\n\n# Set sort column\ndefaults write com.apple.ActivityMonitor UserColumnSortPerTab -dict \\\n    '0' '{ direction = 0; sort = CPUUsage; }' \\\n    '1' '{ direction = 0; sort = ResidentSize; }' \\\n    '2' '{ direction = 0; sort = 12HRPower; }' \\\n    '3' '{ direction = 0; sort = bytesWritten; }' \\\n    '4' '{ direction = 0; sort = rxBytes; }'\ndefaults write com.apple.ActivityMonitor SortDirection -int 0\n\n# Show Data in the Disk graph (instead of IO)\ndefaults write com.apple.ActivityMonitor DiskGraphType -int 1\n\n# Show Data in the Network graph (instead of packets)\ndefaults write com.apple.ActivityMonitor NetworkGraphType -int 1\n\n###############################################################################\n# Text Edit, QuickTime                                                        #\n###############################################################################\n\n# Use plain text mode for new TextEdit documents\ndefaults write com.apple.TextEdit RichText -int 0\n# Open and save files as UTF-8 in TextEdit\ndefaults write com.apple.TextEdit PlainTextEncoding -int 4\ndefaults write com.apple.TextEdit PlainTextEncodingForWrite -int 4\n\n# Auto-play videos when opened with QuickTime Player\ndefaults write com.apple.QuickTimePlayerX MGPlayMovieOnOpen -bool true\n\n###############################################################################\n# Mac App Store                                                               #\n###############################################################################\n\n# Enable the WebKit Developer Tools in the Mac App Store\ndefaults write com.apple.appstore WebKitDeveloperExtras -bool true\n\n# Enable Debug Menu in the Mac App Store\ndefaults write com.apple.appstore ShowDebugMenu -bool true\n\n\n###############################################################################\n# Google Chrome & Google Chrome Canary                                        #\n###############################################################################\n\n# Allow installing user scripts via GitHub Gist or Userscripts.org\ndefaults write com.google.Chrome ExtensionInstallSources -array \"https://gist.githubusercontent.com/\" \"http://userscripts.org/*\"\ndefaults write com.google.Chrome.canary ExtensionInstallSources -array \"https://gist.githubusercontent.com/\" \"http://userscripts.org/*\"\n\n# Disable the all too sensitive backswipe on trackpads\ndefaults write com.google.Chrome AppleEnableSwipeNavigateWithScrolls -bool false\ndefaults write com.google.Chrome.canary AppleEnableSwipeNavigateWithScrolls -bool false\n\n# Disable the all too sensitive backswipe on Magic Mouse\ndefaults write com.google.Chrome AppleEnableMouseSwipeNavigateWithScrolls -bool false\ndefaults write com.google.Chrome.canary AppleEnableMouseSwipeNavigateWithScrolls -bool false\n\n# Use the system-native print preview dialog\n#defaults write com.google.Chrome DisablePrintPreview -bool true\n#defaults write com.google.Chrome.canary DisablePrintPreview -bool true\n\n# Expand the print dialog by default\ndefaults write com.google.Chrome PMPrintingExpandedStateForPrint2 -bool true\ndefaults write com.google.Chrome.canary PMPrintingExpandedStateForPrint2 -bool true\n\n\n###############################################################################\n# Finalize and Kill affected applications                                     #\n###############################################################################\n\n# Activate some of the above settings without a logout\n/System/Library/PrivateFrameworks/SystemAdministration.framework/Resources/activateSettings -u\n\nfor app in \"Activity Monitor\" \"Address Book\" \"Calendar\" \"Contacts\" \"cfprefsd\" \\\n\t\"Dock\" \"Finder\" \"Google Chrome\" \"Google Chrome Canary\" \"Mail\" \"Messages\" \\\n\t\"Opera\" \"Photos\" \"Safari\" \"SizeUp\" \"Spectacle\" \"SystemUIServer\" \"Terminal\" \\\n\t\"Transmission\" \"Tweetbot\" \"Twitter\" \"iCal\"; do\n\tkillall \"${app}\" &> /dev/null\ndone\necho \"Done. Note that some of these changes require a logout/restart to take effect.\"\n"
        },
        {
          "name": ".prettierrc.js",
          "type": "blob",
          "size": 0.2783203125,
          "content": "// https://prettier.io/docs/en/options.html\n\n// If you change anything here, you probably have to reload vscode windows to pick it up.\nmodule.exports = {\n  printWidth: 160,\n  tabWidth: 2,\n  singleQuote: true,\n  trailingComma: 'es5',\n  bracketSpacing: false,\n  arrowParens: 'avoid',\n};\n"
        },
        {
          "name": ".ssh.config.example",
          "type": "blob",
          "size": 0.439453125,
          "content": "# copy to ~/.ssh/config\n\nHost github.com\n\tControlMaster auto\n\tControlPersist 120\n\nHost *\n\t# Always use SSH2.\n\tProtocol 2\n\n\t# Use a shared channel for all sessions to the same host,\n\t# instead of always opening a new one. This leads to much\n\t# quicker connection times.\n\tControlMaster auto\n\tControlPath ~/.ssh/control/%r@%h:%p\n\tControlPersist 1800\n\n\t# also this stuff\n\tCompression yes\n\tTCPKeepAlive yes\n\tServerAliveInterval 20\n\tServerAliveCountMax 10\n"
        },
        {
          "name": ".tmux.conf",
          "type": "blob",
          "size": 1.8193359375,
          "content": "# my tmux.\n# must be named `$HOME/.tmux.conf` on box where the tmux-server is running.\n\n#######################################\n#######################################\n# -CC is the BEST SHIT and using it means not customizing some whack psuedo environment. instead rely on your terminal client's windows/tabs/splits. yay\n# 0. use iterm or another modern terminal client\n# 1. connect over shh\n# 2. just run this:\n#        tmux -u -CC attach || tmux -u -CC\n# 3. enjoy life\n#######################################\n#######################################\n\n\n# reload config file with ctrl b, y\nbind y source-file ~/.tmux.conf \\; display \"tmux configs reloaded\"\n\n\n# todo: maybe disable bell or something?\n\n\n\n# Automatically set window title\nset-option -g status-interval 1\nset-window-option -g automatic-rename on\n# Fancy command to get full active command set in window (not pane) title.  https://github.com/tmux/tmux/issues/733\n# The bash_prompt sets pane title to working directory. AFAIK, i cant also make pane title have the process cmd/args\nset-option -g automatic-rename-format '#(ps --no-headers -t #{pane_tty} -o args -O-c | head -n1 | cut -c -100 | sed 's/bash//') 🖥 '\n# Also, there's no 0:0 window/pane index BS in the title. (Yay). To ensure that, dont set any of these:\n#   pane-border-format, pane-border-status, set-titles, status-interval, window-status-current-format, window-status-format\n# and you'll have to create a brand new tmux session. Just doing source-file aint good enough\n\n\n\n# persist sessions.\n#   save   : Ctrl-b + Ctrl-s\n#   restore: Ctrl-b + Ctrl-r\nrun-shell ~/code/tmux-resurrect/resurrect.tmux\nrun-shell ~/code/tmux-continuum/continuum.tmux\n\n# Automatically restore last saved environment when tmux is started\nset -g @continuum-restore 'on'\n\n# this feature is deprecated but i like it. :/\nset -g @resurrect-save-shell-history 'on'\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.5673828125,
          "content": "# Paul's dotfiles\n\n* I maintain this repo as *my* dotfiles, but I'm keenly aware people are using it for theirs.\n* You're quite welcome to make suggestions, however I may decline if it's not of personal value to me.\n* If you're starting off anew, consider forking [mathias](https://github.com/mathiasbynens/dotfiles/) or [alrra](https://github.com/alrra/dotfiles/). [paulmillr](https://github.com/paulmillr/dotfiles) and [gf3](https://github.com/gf3/dotfiles) also have great setups\n\n\n## Setup\n\nI would not suggest you just wholesale use my dotfiles. But there's a few files where there's great goodies you can steal.\n\n#### shell\n\nThis repo contains config for fish and bash. As of 2016, I primarily use `fish` shell, but fall back to `bash` once in a while. The bash and fish stuff are both well maintained. If you're using fish you'll want to do a `git submodule update --init`.\n\n## my favorite parts.\n\n### aliases and functions\n\n* [`aliases.fish`](./fish/aliases.fish) and [`functions.fish`](./fish/functions.fish) and [`fish/functions/*`](./fish/functions/)\n* [`.aliases`](./.aliases) and [`.functions`](./.functions)\n\nSo many goodies.\n\n### The \"readline config\" (`.inputrc`)\nBasically it makes typing into the prompt amazing.\n\n* tab like crazy for autocompletion that doesnt suck. tab all the things. srsly.\n* no more <tab><tab> that says \"Display all 1745 possibilities? (y or n)\" YAY\n* type `cat <uparrow>` to see your previous `cat`s and use them.\n* case insensitivity.\n* tab all the livelong day.\n\n### [.gitconfig](./.gitconfig)\n* err'body gotta have their aliases. I'm no different.\n\n### Moving around in folders (`z`, `...`, `cdf`)\n`z` helps you jump around to whatever folder. It uses actual real magic to determine where you should jump to. Seperately there's some `...` aliases to shorten `cd ../..` and `..`, `....` etc. Then, if you have a folder open in Finder, `cdf` will bring you to it.\n```sh\nz dotfiles\nz blog\n....      # drop back equivalent to cd ../../..\nz public\ncdf       # cd to whatever's up in Finder\n```\n`z` learns only once its installed so you'll have to cd around for a bit to get it taught.\nLastly, I use `open .` to open Finder from this path. (That's just available normally.)\n\n\n## overview of files\n\n\n#### shell environment\n* `.aliases`, `.bash_profile`, `.bash_prompt`, `.bashrc`, `.exports`, `.functions`\n\n#### manual run\n* `setup-a-new-machine.sh` - random apps i need installed\n* `symlink-setup.sh`  - sets up symlinks for all dotfiles and vim config.\n* `.macos` - run on a fresh mac os setup\n* `brew.sh` & `brew-cask.sh` - homebrew initialization\n\n#### git, brah\n* `.gitconfig`\n* `.gitignore`\n\n\n### `.extra` for your private configuration\n\nThere will be items that don't belong to be committed to a git repo, because either 1) it shoudn't be the same across your machines or 2) it shouldn't be in a git repo. Kick it off like this:\n\n`touch ~/.extra && $EDITOR $_`\n\nI have some EXPORTS, my PATH construction, and a few aliases for ssh'ing into my servers in there.\n\n\n### Sensible OS X defaults in `.macos`\n\nMathias's repo is the canonical for this, but you should probably run his or mine after reviewing it.\n\n\n### `~/bin`\n\nOne-off binaries that aren't via an npm global or homebrew. [git open](https://github.com/paulirish/git-open), `subl` for Sublime Text, and some other git utilities.\n\n\n### 2020 update\n\nRust folks have made a few things that are changing things.\n\n - most folks know `bat`  as a `cat` replacement\n - https://github.com/dandavison/delta is a bit nicer than the diff-so-fancy project that i started. :/\n - https://github.com/eza-community/eza is better `ls` and gets all the trapd00r/LS_COLORS stuff etc.\n - https://github.com/bigH/git-fuzzy interactive git thing. deprecates my `git recent` script. and probably some other things.\n\n### Dotfiles mgmt todo\n Also I'd like to migrate to using one of these:\n - homesick or \n - https://www.atlassian.com/git/tutorials/dotfiles\n - https://github.com/nix-community/home-manager\n - https://www.chezmoi.io/\n\n also interested in https://github.com/dandavison/open-in-editor\n\n### SSH authenticate with security key\n\n(presumably you've already upgraded from passwords to using ssh public key authentication.. but this is an alternative if you want the security key challenge)\n\nBeen doing this for a while.. forgot how i learned it and nobody has it documented that I can find...\n\nRun on client machine:\n\n    ssh-add -L | grep publickey\n\nThis outputs a `ecdsa-sha2-nistp256` key for me. I know it's registered for my hardware security key. (I don't know how it got registered with the SSH agent but w/e.)\n\nPut that in whatever `authorized_keys` of your remote host. That's it.\n\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "brew-cask.sh",
          "type": "blob",
          "size": 0.4833984375,
          "content": "#!/bin/bash\n\n\n# to maintain cask ....\n#     brew update && brew cleanup\n\n\n# Install native apps\n\n# daily\nbrew install --cask rectangle\nbrew install --cask 1password\nbrew install --cask rescuetime\n\n# dev\nbrew install --cask iterm2\nbrew install --cask sublime-text\nbrew install --cask imageoptim\n\n\n# less often\nbrew install --cask disk-inventory-x\nbrew install --cask screenflow\nbrew install --cask vlc\n\nbrew install --cask spotify\n\nbrew tap homebrew/cask-fonts\nbrew install --cask font-fira-code\n"
        },
        {
          "name": "brew.sh",
          "type": "blob",
          "size": 1.5712890625,
          "content": "#!/bin/bash\n\n# Install command-line tools using Homebrew\n\n# (Optionally) Turn off brew's analytics https://docs.brew.sh/Analytics\n# brew analytics off\n\n\n# GNU core utilities (those that come with OS X are outdated)\nbrew install coreutils\nbrew install moreutils\n# GNU `find`, `locate`, `updatedb`, and `xargs`, `g`-prefixed\nbrew install findutils\n# GNU `sed`\nbrew install gnu-sed\n\n\n# Updated shells\n# Note: don’t forget to add `/usr/local/bin/<EACHSHELL>` to `/etc/shells` before running `chsh`.\nbrew install fish\n\nbrew install bash-completion\n\n\n# Install wget\nbrew install wget\n\n# Install more recent versions of some OS X tools\nbrew install vim\nbrew install nano\nbrew install grep\n\n# z hopping around folders\nbrew install z\n\n# run this script when this file changes guy.\nbrew install entr\n\n# github util\nbrew install gh\n# nicer git diffs\nbrew install git-delta\n\n# better `top`\nbrew install glances\n\nbrew install shellcheck # linting for .sh files\n\n\n# mtr - ping & traceroute. best.\nbrew install mtr\n   # `abbr mtr \"sudo mtr\"` to avoid forgetting.\n\n# Install other useful binaries\nbrew install the_silver_searcher # ack is an alternative, tbh i forget which i like more.\nbrew install fzf\n\nbrew install imagemagick\nbrew install node # This installs `npm` too using the recommended installation method\nbrew install rename\nbrew install tree\nbrew install ffmpeg\n\n# json stuff\nbrew install jq gron\n\n# brew install ncdu # find where your diskspace went\nbrew install gdu # available as gdu-go. faster than ncdu on SSD's.\n\n\nbrew install scrcpy # control/view android phone from PC. amazing\nbrew install youtube-dl\n\n"
        },
        {
          "name": "chromium.sh",
          "type": "blob",
          "size": 3.25390625,
          "content": "#!/bin/bash\n\n# usage:\n# after `git pull`, a full build is now `depsbcr` or `deps && b && cr`\n# and after changes.. a `bcr` will recompile and relaunch chrome.\n\n# 2021 update: __dt versions of these functions are added for the chromium-devtools repo. \n\nfunction deps () {\n    # --reset drops local changes. often great, but if making changes inside v8, you don't want to use --reset\n    # also reset seems to reset branch position in the devtools-internal repo??? weird.\n    gclient sync --delete_unversioned_trees --jobs=70\n}\n\nfunction hooks () {\n    gclient runhooks\n}\n\nfunction b () {\n    local dir=./$(git rev-parse --show-cdup)/out/Default\n    # autoninja will automatically determine your -j number based on CPU cores\n    local cmd=\"autoninja -C $(realpath $dir) chrome\" \n    echo \"  > $cmd\"\n    # start the compile\n    eval $cmd\n\n    if [ $? -eq 0 ]; then\n        osascript -e 'display notification \"\" with title \"✅ Chromium compile done\"'\n    else\n        osascript -e 'display notification \"\" with title \"❌ Chromium compile failed\"'\n    fi\n}\n\nfunction dtb () {\n    local dir_default=$(realpath $PWD/$(git rev-parse --show-cdup)out/Default/)\n    local cmd=\"autoninja -C $dir_default\"\n    echo \"  > $cmd\"\n    eval $cmd\n}\n\n\n# https://github.com/GoogleChrome/chrome-launcher/blob/main/docs/chrome-flags-for-tools.md\n#                    # Avoid the startup dialog for 'Chromium wants to use your confidential information stored in \"Chromium Safe Storage\" in your keychain'\n#                                                          # Avoid the startup dialog for 'Do you want the application “Chromium.app” to accept incoming network connections?'\n#                                                                      # Avoid weird interaction between this experiment and CDP targets\n#                                                                                                                # Hides blue bubble \"user education\" nudges\n#                                                                                                                                # Hides Chrome for Testing bar, among others.\nclutch_chrome_flags=\"--use-mock-keychain --disable-features=MediaRouter,ProcessPerSiteUpToMainFrameThreshold --ash-no-nudges --disable-infobars\"\n\n\n# you can also add any extra args: `cr --user-data-dir=/tmp/lol123\"\n# (disable DialMediaRouteProvider gets rid of that \"do you want to accept incoming connections\" prompt)\nfunction cr () {\n    local dir=\"./$(git rev-parse --show-cdup)/out/Default\"\n    local cmd=\"./$dir/Chromium.app/Contents/MacOS/Chromium $clutch_chrome_flags $argv\"\n    echo \"  > $cmd\"\n    eval \"$cmd\"\n}\n\nfunction dtcr () {\n    local crpath=\"./$(git rev-parse --show-cdup)/third_party/chrome/chrome-mac/Chromium.app/Contents/MacOS/Chromium\"\n    local dtpath=$(realpath out/Default/gen/front_end)\n    local cmd=\"$crpath --custom-devtools-frontend=file://$dtpath --user-data-dir=$HOME/chromium-devtools/dt-chrome-profile $clutch_chrome_flags $argv\"\n    echo \"  > $cmd\"\n    eval \"$cmd\"\n}\n\n\n\nfunction dtbcr () {\n    if dtb; then\n        dtcr\n    fi\n}\n\n\nfunction bcr () {\n    if b; then\n        cr\n    fi\n}\n\n\nfunction depsb () {\n    if deps; then\n        b\n    fi\n}\n\nfunction depsbcr () {\n    if deps; then\n        bcr\n    fi\n}\n\nfunction hooksbcr () {\n    if hooks; then\n        bcr\n    fi\n}\n"
        },
        {
          "name": "cron",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "fish",
          "type": "tree",
          "content": null
        },
        {
          "name": "package.json",
          "type": "blob",
          "size": 0.51171875,
          "content": "{\n  \"//\": \"    ln -sf $HOME/code/dotfiles/node_modules $HOME/.node_libraries     \",\n  \"devDependencies\": {\n    \"eslint\": \"^6.0.1\",\n    \"eslint-config-google\": \"^0.13.0\",\n    \"eslint-config-kentcdodds\": \"^14.3.4\",\n    \"eslint-config-xo\": \"^0.26.0\",\n    \"eslint-plugin-eslint-comments\": \"^3.1.2\",\n    \"eslint-plugin-import\": \"^2.2.0\",\n    \"eslint-plugin-json\": \"^1.2.0\",\n    \"eslint-plugin-optimize-regex\": \"^1.1.1\",\n    \"eslint-plugin-promise\": \"^4.2.1\",\n    \"eslint-plugin-unicorn\": \"^9.1.1\",\n    \"prettier\": \"^1.3.1\"\n  }\n}\n"
        },
        {
          "name": "prefs",
          "type": "tree",
          "content": null
        },
        {
          "name": "setup-a-new-machine.sh",
          "type": "blob",
          "size": 8.0224609375,
          "content": "# copy paste this file in bit by bit.\n# don't run it.\n# shellcheck disable=2148\n  echo \"do not run this script in one go. hit ctrl-c NOW\"\n  read -n 1\n\n\n##############################################################################################################\n###  backup old machine's key items\n\nmkdir -p ~/migration/home/\nmkdir -p ~/migration/Library/\"Application Support\"/\nmkdir -p ~/migration/Library/Preferences/\nmkdir -p ~/migration/Library/Application Support/\nmkdir -p ~/migration/rootLibrary/Preferences/SystemConfiguration/\n\ncd ~/migration\n\n# what is worth reinstalling?\nbrew leaves              > brew-list.txt    # all top-level brew installs\nnpm list -g --depth=0    > npm-g-list.txt\n\n# then compare brew-list to what's in `brew.sh`\n#   comm <(sort brew-list.txt) <(sort brew.sh-cleaned-up)\n\n# backup some dotfiles likely not under source control\ncp -Rp \\\n    ~/.bash_history \\\n    ~/.extra ~/.extra.fish \\\n    ~/.gitconfig.local \\\n    ~/.gnupg \\\n    ~/.nano \\\n    ~/.nanorc \\\n    ~/.netrc \\\n    ~/.ssh \\\n    ~/.z   \\\n        ~/migration/home\n\ncp -Rp ~/Documents ~/migration\n\ncp -Rp /Library/Preferences/SystemConfiguration/com.apple.airport.preferences.plist ~/migration/rootLibrary/Preferences/SystemConfiguration/ # wifi\n\ncp -Rp ~/Library/Preferences/net.limechat.LimeChat.plist ~/migration/Library/Preferences/\ncp -Rp ~/Library/Preferences/com.tinyspeck.slackmacgap.plist ~/migration/Library/Preferences/\n\ncp -Rp ~/Library/Services ~/migration/Library/ # automator stuff\ncp -Rp ~/Library/Fonts ~/migration/Library/ # all those fonts you've installed\n\n# editor settings & plugins\ncp -Rp ~/Library/Application\\ Support/Sublime\\ Text\\ * ~/migration/Library/\"Application Support\"\ncp -Rp ~/Library/Application\\ Support/Code\\ -\\ Insider* ~/migration/Library/\"Application Support\"\n\n# also consider...\n# random git branches you never pushed anywhere?\n# git untracked files (or local gitignored stuff). stuff you never added, but probably want..\n\n\n# OneTab history pages, because chrome tabs are valuable.\n\n# usage logs you've been keeping.\n\n# iTerm settings.\n  # Prefs, General, Use settings from Folder\n\n# Finder settings and TotalFinder settings\n#   Not sure how to do this yet. Really want to.\n\n# Timestats chrome extension stats\n#   chrome-extension://ejifodhjoeeenihgfpjijjmpomaphmah/options.html#_options\n# \tgotta export into JSON through devtools:\n#     copy(JSON.stringify(localStorage))\n#     pbpaste > timestats-canary.json.txt\n\n# software licenses.\n#   sublimetext's is in its Application Support folder\n\n# maybe ~/Pictures and such\ncp -Rp ~/Pictures ~/migration\n\n### end of old machine backup\n##############################################################################################################\n\n\n\n##############################################################################################################\n### XCode Command Line Tools\n#      thx https://github.com/alrra/dotfiles/blob/ff123ca9b9b/os/os_x/installs/install_xcode.sh\n\n# !!! doesnt work, need to update this section..\n\nif ! xcode-select --print-path &> /dev/null; then\n\n    # Prompt user to install the XCode Command Line Tools\n    xcode-select --install &> /dev/null\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Wait until the XCode Command Line Tools are installed\n    until xcode-select --print-path &> /dev/null; do\n        sleep 5\n    done\n\n    print_result $? 'Install XCode Command Line Tools'\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Point the `xcode-select` developer directory to\n    # the appropriate directory from within `Xcode.app`\n    # https://github.com/alrra/dotfiles/issues/13\n\n    sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\n    print_result $? 'Make \"xcode-select\" developer directory point to Xcode'\n\n    # - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\n    # Prompt user to agree to the terms of the Xcode license\n    # https://github.com/alrra/dotfiles/issues/10\n\n    sudo xcodebuild -license\n    print_result $? 'Agree with the XCode Command Line Tools licence'\n\nfi\n###\n##############################################################################################################\n\n\n\n##############################################################################################################\n### homebrew!\n\n# (if your machine has /usr/local locked down (like google's), you can do this to place everything in ~/homebrew\nmkdir $HOME/homebrew && curl -L https://github.com/Homebrew/brew/tarball/master | tar xz --strip 1 -C $HOME/homebrew\nexport PATH=$HOME/homebrew/bin:$HOME/homebrew/sbin:$PATH\n# maybe you still need an LD_LIBRARY export thing\n\n# install all the things\n./brew.sh\n./brew-cask.sh\n\n### end of homebrew\n##############################################################################################################\n\n\n\n\n##############################################################################################################\n### install of common things\n###\n\n# github.com/jamiew/git-friendly\n# the `push` command which copies the github compare URL to my clipboard is heaven\nbash < <( curl https://raw.github.com/jamiew/git-friendly/master/install.sh)\n\n# autocompletion for git branch names https://git-scm.com/book/en/v1/Git-Basics-Tips-and-Tricks\ncurl https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash -o ~/.git-completion.bash\n\n\n# Type `git open` to open the GitHub page or website for a repository.\nnpm install -g git-open\n\n# fancy listing of recent branches\nnpm install -g git-recent\n\n# trash as the safe `rm` alternative\nnpm install --global trash-cli\n\n# more readable git diffs\nnpm install --global diff-so-fancy\n\n# my preferred statik webserver\nnpm install -g statikk\n\n# install better nanorc config\n# https://github.com/scopatz/nanorc\ncurl https://raw.githubusercontent.com/scopatz/nanorc/master/install.sh | sh\n\n# consider reusing your current .z file if possible. it's painful to rebuild :)\n# z is hooked up in .bash_profile\n\n\n# github.com/thebitguru/play-button-itunes-patch\n# disable itunes opening on media keys\ngit clone https://github.com/thebitguru/play-button-itunes-patch ~/code/play-button-itunes-patch\n\n\n\n# change to bash 4 (installed by homebrew)\nBASHPATH=$(brew --prefix)/bin/bash\nsudo bash -c \"echo $BASHPATH >> /etc/shells\"\nchsh -s $BASHPATH # will set for current user only.\necho $BASH_VERSION # should be 4.x not the old 3.2.X\n# repeat for fish, zsh\n# Later, confirm iterm settings aren't conflicting.\n\n\n\n\n# iterm with more margin! http://hackr.it/articles/prettier-gutter-in-iterm-2/\n#   (admittedly not as easy to maintain)\n\n\n# setting up the sublime symlink\nln -sf \"/Applications/Sublime Text.app/Contents/SharedSupport/bin/subl\" ~/bin/subl\n\n\n\n\n###\n##############################################################################################################\n\n\n\n##############################################################################################################\n## Chromium hacking\n\n# see setup-chromium.sh\n\n\n\n##############################################################################################################\n### remaining configuration\n###\n\n# go read mathias, paulmillr, gf3, alraa's dotfiles to see what's worth stealing.\n\n# prezto and antigen communties also have great stuff\n#   github.com/sorin-ionescu/prezto/blob/master/modules/utility/init.zsh\n\n# set up macos defaults\n#   maybe something else in here https://github.com/hjuutilainen/dotfiles/tree/master/bin\nsh .macos\n\n# setup and run Rescuetime!\n\n###\n##############################################################################################################\n\n\n\n##############################################################################################################\n### symlinks to link dotfiles into ~/\n###\n\n#   move git credentials into ~/.gitconfig.local    \thttp://stackoverflow.com/a/13615531/89484\n#   now .gitconfig can be shared across all machines and only the .local changes\n\n# symlink it up!\n./symlink-setup.sh\n\n# add manual symlink for .ssh/config and probably .config/fish\n\n###\n##############################################################################################################\n"
        },
        {
          "name": "setup-chromium.sh",
          "type": "blob",
          "size": 1.6123046875,
          "content": "\n## Chromium hacking\n\n# improve perf of git inside of chromium checkout\n# shellcheck disable=2148\n\n# Read https://chromium.googlesource.com/chromium/src/+/HEAD/docs/mac_build_instructions.md#improving-performance-of-git-commands\n# ... and do it all.\nsysctl -a | egrep 'max(files|vnodes|proc)' \n# should see\n#    kern.maxvnodes: 524288\n#    kern.maxproc: 16704\n#    kern.maxfiles: 524288\n#    kern.maxfilesperproc: 524288\n\n\n# Useful: https://serverfault.com/questions/502053/difference-between-ulimit-launchctl-sysctl\n# launchctl limit maxfiles    # launchctl limit maxproc    \n\nulimit -a # though setting with ulimit is per-shell . # https://wilsonmar.github.io/maximum-limits/\n\n# The plist files broke in ventura 13.5. https://bugs.chromium.org/p/chromium/issues/detail?id=1467777#c17\n# the fix is doing running `ulimit -n 200000` like.. often? lol.\n\n\n\n\n# speed up git status (to run only in chromium repo)\ngit config feature.manyFiles true  # https://git-scm.com/docs/git-config#Documentation/git-config.txt-featuremanyFiles\ngit config status.showuntrackedfiles no\ngit update-index --untracked-cache\n\n# use fsmonitor\ngit config --local core.fsmonitor true\n# dumb gitsecrets checks\ngit config --type=bool --add google.gitSecretsHook false\n# any 'side' pushes shouldnt confuse depot_tools\ngit config push.autoSetupRemote false  \n# fixes some awkward bug where `git cl upload` hangs forever\ngit config --local http.version HTTP/1.1\n\n# also this unrelated thing\ngit config user.email \"xxxx@chromium.org\"\n\n# see also \"A Chromium Compiling Setup for DevTools Hackers\"\n# https://gist.github.com/paulirish/2d84a6db1b41b4020685 or devtools own WORKFLOWS.md\n\n"
        },
        {
          "name": "symlink-setup.sh",
          "type": "blob",
          "size": 3.6884765625,
          "content": "#!/bin/bash\n\n# this symlinks all the dotfiles (and .vim/) to ~/\n# it also symlinks ~/bin for easy updating\n\n# this is safe to run multiple times and will prompt you about anything unclear\n\n\n# this is a messy edit of alrra's nice work here:\n#   https://raw.githubusercontent.com/alrra/dotfiles/master/os/create_symbolic_links.sh\n#   it should and needs to be improved to be less of a hack.\n\n\n\n# unrelated other thing you need to do:\n#     git submodule update --init\n\n\n# jump down to line ~140 for the start.\n\n\n\n#\n# utils !!!\n#\n\n\nanswer_is_yes() {\n    [[ \"$REPLY\" =~ ^[Yy]$ ]] \\\n        && return 0 \\\n        || return 1\n}\n\nask() {\n    print_question \"$1\"\n    read\n}\n\nask_for_confirmation() {\n    print_question \"$1 (y/n) \"\n    read -n 1\n    printf \"\\n\"\n}\n\nask_for_sudo() {\n\n    # Ask for the administrator password upfront\n    sudo -v\n\n    # Update existing `sudo` time stamp until this script has finished\n    # https://gist.github.com/cowboy/3118588\n    while true; do\n        sudo -n true\n        sleep 60\n        kill -0 \"$$\" || exit\n    done &> /dev/null &\n\n}\n\ncmd_exists() {\n    [ -x \"$(command -v \"$1\")\" ] \\\n        && printf 0 \\\n        || printf 1\n}\n\nexecute() {\n    $1 &> /dev/null\n    print_result $? \"${2:-$1}\"\n}\n\nget_answer() {\n    printf \"$REPLY\"\n}\n\nget_os() {\n\n    declare -r OS_NAME=\"$(uname -s)\"\n    local os=\"\"\n\n    if [ \"$OS_NAME\" == \"Darwin\" ]; then\n        os=\"osx\"\n    elif [ \"$OS_NAME\" == \"Linux\" ] && [ -e \"/etc/lsb-release\" ]; then\n        os=\"ubuntu\"\n    fi\n\n    printf \"%s\" \"$os\"\n\n}\n\nis_git_repository() {\n    [ \"$(git rev-parse &>/dev/null; printf $?)\" -eq 0 ] \\\n        && return 0 \\\n        || return 1\n}\n\nmkd() {\n    if [ -n \"$1\" ]; then\n        if [ -e \"$1\" ]; then\n            if [ ! -d \"$1\" ]; then\n                print_error \"$1 - a file with the same name already exists!\"\n            else\n                print_success \"$1\"\n            fi\n        else\n            execute \"mkdir -p $1\" \"$1\"\n        fi\n    fi\n}\n\nprint_error() {\n    # Print output in red\n    printf \"\\e[0;31m  [✖] $1 $2\\e[0m\\n\"\n}\n\nprint_info() {\n    # Print output in purple\n    printf \"\\n\\e[0;35m $1\\e[0m\\n\\n\"\n}\n\nprint_question() {\n    # Print output in yellow\n    printf \"\\e[0;33m  [?] $1\\e[0m\"\n}\n\nprint_result() {\n    [ $1 -eq 0 ] \\\n        && print_success \"$2\" \\\n        || print_error \"$2\"\n\n    [ \"$3\" == \"true\" ] && [ $1 -ne 0 ] \\\n        && exit\n}\n\nprint_success() {\n    # Print output in green\n    printf \"\\e[0;32m  [✔] $1\\e[0m\\n\"\n}\n\n\n\n\n\n\n#\n# actual symlink stuff\n#\n\n\n# finds all .dotfiles in this folder\ndeclare -a FILES_TO_SYMLINK=$(find . -type f -maxdepth 1 -name \".*\" -not -name .DS_Store -not -name .git -not -name .macos | sed -e 's|//|/|' | sed -e 's|./.|.|' | sort)\nFILES_TO_SYMLINK=\"$FILES_TO_SYMLINK .vim bin .config/fish\" # add in vim and the binaries\n\n\n# - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -\n\nmain() {\n\n    local i=\"\"\n    local sourceFile=\"\"\n    local targetFile=\"\"\n\n    for i in \"${FILES_TO_SYMLINK[@]}\"; do\n\n        sourceFile=\"$(pwd)/$i\"\n        targetFile=\"$HOME/$(printf \"%s\" \"$i\" | sed \"s/.*\\/\\(.*\\)/\\1/g\")\"\n\n        if [ -e \"$targetFile\" ]; then\n            if [ \"$(readlink \"$targetFile\")\" != \"$sourceFile\" ]; then\n\n                ask_for_confirmation \"'$targetFile' already exists, do you want to overwrite it?\"\n                if answer_is_yes; then\n                    rm -rf \"$targetFile\"\n                    execute \"ln -fs $sourceFile $targetFile\" \"$targetFile → $sourceFile\"\n                else\n                    print_error \"$targetFile → $sourceFile\"\n                fi\n\n            else\n                print_success \"$targetFile → $sourceFile\"\n            fi\n        else\n            execute \"ln -fs $sourceFile $targetFile\" \"$targetFile → $sourceFile\"\n        fi\n\n    done\n\n}\n\nmain\n"
        }
      ]
    }
  ]
}