{
  "metadata": {
    "timestamp": 1736568719262,
    "page": 823,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "userdocs/qbittorrent-nox-static",
      "stars": 1193,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 1.0849609375,
          "content": "root = true\n\n[*]\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\nindent_style = tab\nindent_size = 4\n\n[{**.*sh,test/run,**.bats}]\nindent_size = 4\nindent_style = tab\n\nshell_variant      = bash\nbinary_next_line   = true  # like -bn\nswitch_case_indent = true  # like -ci\nspace_redirects    = true  # like -sr\nkeep_padding       = false # like -kp\nend_of_line        = lf\ncharset            = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[**.md]\nindent_size = 4\nindent_style = space\n\n[**.bats]\nindent_style = tab\nshell_variant\t= bats\n\n[*.{yml,yaml,html}]\nindent_style = space\nindent_size = 2\n\n[*.json]\ninsert_final_newline = false\nindent_style = space\nindent_size = 2\n\n[**.astro]\nindent_size = 2\nindent_style = tab\nend_of_line = lf\n\n[**.css]\nindent_size = 4\nindent_style = space\nend_of_line = lf\n\n[LICENSE.txt]\nindent_style = space\nindent_size = 2\n\n[**.txt]\n\n[patch]\nindent_style = space\nindent_size = 0\ntrim_trailing_whitespace = false\n\n[url]\ninsert_final_newline = false\n\n[patch]\nindent_style = space\nindent_size = 0\n\n[Jamfile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.0078125,
          "content": "* -text\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.3408203125,
          "content": "node_modules\n/package-lock.json\n/package.json\n\n# Dependencies\ndocs/node_modules\n\n# Production\ndocs/build\n\n# Generated files\ndocs/.docs\ndocs/.docusaurus\ndocs/.cache-loader\n\n# Misc\ndocs/.DS_Store\ndocs/.env.local\ndocs/.env.development.local\ndocs/.env.test.local\ndocs/.env.production.local\n\ndocs/npm-debug.log*\ndocs/yarn-debug.log*\ndocs/yarn-error.log*\n"
        },
        {
          "name": ".pre-commit-config.yaml",
          "type": "blob",
          "size": 0.10546875,
          "content": "repos:\n  - repo: https://github.com/woodruffw/zizmor-pre-commit\n    rev: v1.0.1\n    hooks:\n    - id: zizmor\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 11.068359375,
          "content": "\n                                Apache License\n                          Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n  TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n  1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n  2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n  3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n  4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n  5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n  6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n  7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n  8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n  9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n  END OF TERMS AND CONDITIONS\n\n  APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n  Copyright [yyyy] [name of copyright owner]\n\n  Licensed under the Apache License, Version 2.0 (the \"License\");\n  you may not use this file except in compliance with the License.\n  You may obtain a copy of the License at\n\n      http://www.apache.org/licenses/LICENSE-2.0\n\n  Unless required by applicable law or agreed to in writing, software\n  distributed under the License is distributed on an \"AS IS\" BASIS,\n  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n  See the License for the specific language governing permissions and\n  limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.8837890625,
          "content": "# qbittorrent-nox-static\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/9817ad80d35c480aa9842b53001d55b0)](https://app.codacy.com/gh/userdocs/qbittorrent-nox-static?utm_source=github.com&utm_medium=referral&utm_content=userdocs/qbittorrent-nox-static&utm_campaign=Badge_Grade)\n[![CodeFactor](https://www.codefactor.io/repository/github/userdocs/qbittorrent-nox-static/badge)](https://www.codefactor.io/repository/github/userdocs/qbittorrent-nox-static)\n[![CI](https://github.com/userdocs/qbittorrent-nox-static/actions/workflows/ci-main-reusable-caller.yml/badge.svg)](https://github.com/userdocs/qbittorrent-nox-static/actions/workflows/ci-main-reusable-caller.yml)\n\n## Summary\n\nThe `qbittorrent-nox-static` project is a `bash` build script that compiles a static `qbittorrent-nox` binary using the latest available dependencies from their source. These statically linked binaries can run on any matching CPU architecture and are not OS specific. This means you can run a `x86_64` Alpine edge build on any Linux based OS of like CentOS | Fedora | OpenSuse | Debian | Ubuntu and more.\n\n> [!TIP]\n> You don't need to use the script to access the binaries it creates, just use the [release tag](https://github.com/userdocs/qbittorrent-nox-static/tags) you need or [latest release page](https://github.com/userdocs/qbittorrent-nox-static/releases/latest)\n\nSee here for how to [install the latest release](https://github.com/userdocs/qbittorrent-nox-static?tab=readme-ov-file#install-the-latest-release)\n\n## Linked Github repositories\n\nThis build script uses and depends on some related repositories.\n\n-   [qbt-musl-cross-make](https://github.com/userdocs/qbt-musl-cross-make)\n-   [qbt-workflow-files](https://github.com/userdocs/qbt-workflow-files)\n-   [qbt-ninja-build](https://github.com/userdocs/qbt-ninja-build)\n-   [qbt-cmake-ninja-crossbuilds](https://github.com/userdocs/qbt-cmake-ninja-crossbuilds)\n\n## Documentation\n\n> [!TIP]\n> Visit the [documentation](https://userdocs.github.io/qbittorrent-nox-static/introduction/) for in depth information on using this project and script usage.\n\n## WSL2\n\n> [!TIP]\n> These static builds can be used on WSL2 and accessed via `localhost:8080` using the download instructions below\n\n## Install the latest release\n\n> [!TIP]\n> For the most current build visit the [latest release page](https://github.com/userdocs/qbittorrent-nox-static/releases/latest)\n\nOr uses these commands for your arch:\n\n### x86\n\n```bash\nmkdir -p ~/bin && source ~/.profile\nwget -qO ~/bin/qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/x86-qbittorrent-nox\nchmod 700 ~/bin/qbittorrent-nox\n```\n\n### x86_64\n\n```bash\nmkdir -p ~/bin && source ~/.profile\nwget -qO ~/bin/qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/x86_64-qbittorrent-nox\nchmod 700 ~/bin/qbittorrent-nox\n```\n\n### armhf (armv6)\n\n```bash\nmkdir -p ~/bin && source ~/.profile\nwget -qO ~/bin/qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/armhf-qbittorrent-nox\nchmod 700 ~/bin/qbittorrent-nox\n```\n\n### armv7\n\n```bash\nmkdir -p ~/bin && source ~/.profile\nwget -qO ~/bin/qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/armv7-qbittorrent-nox\nchmod 700 ~/bin/qbittorrent-nox\n```\n\n### aarch64\n\n```bash\nmkdir -p ~/bin && source ~/.profile\nwget -qO ~/bin/qbittorrent-nox https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/aarch64-qbittorrent-nox\nchmod 700 ~/bin/qbittorrent-nox\n```\n\n## Libtorrent versions\n\n> [!IMPORTANT]\n> Libtorrent `v1.2` is currently the main branch supported by qBittorrent since a change with the release of [4.4.5](https://www.qbittorrent.org/news.php)\n\nLibtorrent `v2.0` builds are still released as latest releases as it it does not really matter to this project as it always builds and releases for both `v1.2` and `v2.0`. See the next section for how to get the version you need via the latest release URL.\n\n> [!TIP]\n> You can view the current latest and pre releases and tags here <https://github.com/userdocs/qbittorrent-nox-static/tags>\n\n## Getting the Version you want via the latest release URL\n\nSince this project builds and releases both v1.2 and v2.0 builds simultaneously we can use the commands below to always get the latest version of the related pre release via the latest release `dependency-version.json` asset.\n\nUsing this method it does not matter which version is the latest release or pre release as the commands will provide you the version specific info you need for the twinned latest/pre releases.\n\nFor Libtorrent `v1.2`\n\n```bash\njq -r '. | \"release-\\(.qbittorrent)_v\\(.libtorrent_1_2)\"' < <(curl -sL https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/dependency-version.json)\n```\n\nFor Libtorrent `v2.0`\n\n```bash\njq -r '. | \"release-\\(.qbittorrent)_v\\(.libtorrent_2_0)\"' < <(curl -sL https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/dependency-version.json)\n```\n\n## Revisions\n\nThe build has 5 main dependencies tracked that will trigger a rebuild on an update being available.\n\n-   qBittorrent\n-   Libtorrent\n-   Qt\n-   Boost\n-   Openssl\n\nWhen a new build is triggered for updating `qBittorrent` or `Libtorrent` a new release will be generated as the release tags will be updated.\n\nSince I do not append revision info to tags `Qt` - `Boost` - `Openssl` builds will only update the existing release assets.\n\nTo track these revisions you can use this command. All new releases start at a revision of `0` and increment by `1` per revised build.\n\n```bash\njq -r '.revision' < <(curl -sL \"https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/dependency-version.json\")\n```\n\n## Dependency json\n\nFrom `release-4.4.5` each release contains a `dependency-version.json` file that provide some key version information for that is shared across the latest release and the twinned pre release. This helps to overcome some limitations of the API for consistently and directly accessing this information.\n\nDownloading the file like this:\n\n```bash\ncurl -sL https://github.com/userdocs/qbittorrent-nox-static/releases/latest/download/dependency-version.json\n```\n\nWill output a result like this:\n\n```json\n{\n    \"openssl\": \"3.2.0\",\n    \"boost\": \"1.84.0\",\n    \"libtorrent_1_2\": \"1.2.19\",\n    \"libtorrent_2_0\": \"2.0.9\",\n    \"qt5\": \"5.15.12\",\n    \"qt6\": \"6.6.1\",\n    \"qbittorrent\": \"4.6.2\",\n    \"revision\": \"3\"\n}\n```\n\nAs demonstrated above by using the latest release URL we can construct the tag of the twinned pre release and therefore the asset URL with no margin for error.\n\n> [!IMPORTANT]\n> From the release of qBittorrent v5 configure based builds will be unsupported and we will only be able to use cmake to build qBittorrent v5 onwards. All releases from that point on will drop Qt5 builds as at this point cmake,Qt6 and v5 should be the default and preferred build combination with Qt5 being a legacy dependency.\n\n## gh attestation verify\n\nBinaries built from the release of release `release-5.0.0_v2.0.10` and `release-5.0.0_v1.2.19` revision `1` use [actions/attest-build-provenance](https://github.com/actions/attest-build-provenance)\n\nVerify the integrity and provenance of an artifact using its associated cryptographically signed attestations.\n\nhttps://cli.github.com/manual/gh_attestation_verify\n\nFor example:\n\n```bash\ngh attestation verify x86_64-qbittorrent-nox -o userdocs\n```\n\nWill give you this result for the `release-5.0.0_v2.0.10` revision `1` binary.\n\n```bash\nLoaded digest sha256:a656ff57b03ee6218205d858679ea189246caaecbbcc38d4d2b57eb81d8e59bb for file://x86_64-qbittorrent-nox\nLoaded 1 attestation from GitHub API\n✓ Verification succeeded!\n\nsha256:a656ff57b03ee6218205d858679ea189246caaecbbcc38d4d2b57eb81d8e59bb was attested by:\nREPO                             PREDICATE_TYPE                  WORKFLOW\nuserdocs/qbittorrent-nox-static  https://slsa.dev/provenance/v1  .github/workflows/matrix_multi_build_and_release_qbt_workflow_files.yml@refs/heads/master\n```\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 0.2177734375,
          "content": "# Security Policy\n\nFind bug?\n\n[Open issue](https://github.com/userdocs/qbittorrent-nox-static/issues/new/choose)\n\nGot question?\n\n[Start discussion](https://github.com/userdocs/qbittorrent-nox-static/discussions/new/choose)\n"
        },
        {
          "name": "changelog.md",
          "type": "blob",
          "size": 8.3359375,
          "content": "### v2.0.14 - 31/12/2024\n\nfix: libtorrent `v1.2` and boost `1.86.0` check to not ignore `RC_1_2`\nfix: the `_apply_patches` function was assuming the remote default branch name of `master` which made it fail the check. It now tests for the remote default branch of a patch repo and uses that.\nfix: boost source URL. jfrog source is just a problem. Script now defaults to github boost release and falls back to archives.boost.i, jfrog is purged.\nfix: Some typos\n\n### v2.0.13 - 31/12/2024\n\nAdded `qbt_build_dir` as a definable env variable. This variable is to set the build directory which defaults to `qbt-build` if unset\n\n### v2.0.12 - 17/12/2024\n\nDefault to `boost-1.86.0` for `RC_1_2` or `v1.2.x` builds because `RC_1_2` has not been updated to support the (depreciated) features removed in `boost-1.87.0` so the build will fail.\n\nThis method allows the user to override the setting by providing a valid boost tag using `qbt_boost_tag` or `-bt`\n\nfix: changed `-bt | --boost-version` to `-bt | --boost-tag` for consistency. It was always supposed to be `--boost-tag` since that is what we are providing and testing via this flag.\n\n### v2.0.11 - 13/10/2024\n\nDisable glib tests on zlib-ng https://github.com/userdocs/qbittorrent-nox-static/pull/173\n\nUpdate contributor info\n\nminor changes - https://github.com/userdocs/qbittorrent-nox-static/commit/e4a674fa3832e0c0d6950539adac9d1d8d00d0e7\n\n### v2.0.10 - 05/10/2024\n\nMake `cmake` the default build tool with the release of qBittorrent v5\n\n### v2.0.9 - 14/05/2024\n\nChange default c++ standard used for newer build combinations from 23 to 20.\n\n### v2.0.8 - 12-04-2024\n\nFixed a regression with `-o` where part the code was left in and duplicated after introducing a check for cross compilation, causing the positional parameters to be shifted twice, breaking things.\n\nfix - https://github.com/userdocs/qbittorrent-nox-static/commit/b51e1ef356fbdbd3f2f93f2b2a8a6279b99e5f22\n\n### v2.0.7 - 12-02-2024\n\nAdded: a boost download function to combine some logic around fallback urls and minimise external calls.\nAdded: a check to build combos for qt + cmake to prevent env files trying to build a known bad combo.\nfixed: modules check for whole word and not accept partial matches\nfixed: associative arrays declared earlier and in a group to allow changing settings via functions\n\n### v2.0.6 - 2024-01-27\n\nNew flag: `-si` / `--static-ish` for Debian, Ubuntu, and Alpine platforms. This flag disables LDFLAG static linking, allowing the OS libc to be dynamically linked.\n\nYou cannot you this flag with cross compilation, only native host builds.\n\nTests were added for ` static-ish` and `optimise` to check for bad combinations, exiting the script with a helpful reason when used in combination with cross compilation, as the build will fail.\n\n### v2.0.5 - 23-01-2024\n\nCodename: Copilot made me do it\n\nImproved readability of the colour variables used throughout the script.\nSome minor tweaks to OS detection\nMoved some things around or into their own functions and some error handling.\nSome changes to how cxx standard is handled and defined so the script will default to 23 when the conditions are met.\nminor bug fix - `qbt_libtorrent_version` displays correctly when using an RC github tag.\n\nSupport for Ubuntu Noble added - Mantic removed as it's preferred to support LTS releases\n\nUbuntu Focal - Jammy - Noble\nDebian Bullseye - Bookworm\n\n### v2.0.4 - 16-01-2024\n\nMake sure the workflow override applies when using cached dependencies\nAllow patching from a remote raw git patch via URL - an file called `url` in the patch repo for the module version that contains a URL to the raw patch\nother minor tweaks and cosmetic changes\n\n### v2.0.3 - 27-12-2023\n\nFixed a regression from the V2 update where the host arch for `zlib-ng` was incorrectly set to `x86_64`, regardless of the actual host arch, when building on a non `x86_64` host to the same target arch (not cross building).\n\nhttps://github.com/userdocs/qbittorrent-nox-static/issues/131\n\n### v2.0.2 - 26-05-2023\n\nSet `ICU` default to `no`. It does not need to be forced to on as there is no longer a related bug and it also makes more sense when considering the `-i` toggle.\n\n### v2.0.1 - 15-05-2023\n\nBug fix: `skip_icu` was being unset and defaulting to no. It is no longer unset and if set to skipped when using the module directly will still skip it.\n\n### v2.0.0 - 03-04-2023\n\nThere have been various breaking changes in the supporting architecture that effect the script and require updating to v2.0.0 from v1.1.0 or earlier.\n\nA lot of changes and tweaks to workflows and supporting repos to make sure things are as size efficient as they can be. For example, gz to xz where possible.\n\nAlpine Crossbuild tools are 70% reduced in size.\n\nThe script can now build for these arches using musl or debian though workflows and releases may not target them all yet.\n\narmel armhf armv7 aarch64 x86_64 x86 s390x powerpc ppc64el mips mispel mips64 mips64el riscv64\n\nv2 is is an overhaul that aims to be more sensibly coded and and use associative arrays to handle the URL data properly. Less obfuscated and consistent in how it uses this data.\n\ndocs to be updated soon.\n\nA quick summary of main changes and features from v1.5.0 through vto 2.0.0\n\nNo more bison or gawk building. They are OS dependencies now and need to be installed on the host.\nAlpine only - Increased multiarch target support, updated musl cross tools and optimised size.\nA caching mechanism for files to store and manage download dependencies to avoid re-downloading them across builds.\nAny valid boost tag can be provided including beta tags. It was not a tag based check before.\nAny valid qt tag can be provided including beta tags.\npatches system reworked to allow patching any module. Source code files can also be used from app_version/source\nImproved the way tags are checked and the changes applied to be more consistent throughout the script.\nRemoved any trace of gnu.org for being a really unreliable source location.\noptimised multiarch configurations and multiarch various bug fixes.\nAlpine only - Ninja is now prebuilt instead of locally built.\nAll url data can be viewed using the -sdu switch.\nLots of small tweaks, removing code and simplifying code and rebuilding functions.\n\n### v1.1.0 - 18-03-2023\n\nBreaking changes: -bv 1.81.0 have been replaced with -bt boost-1.81\n\nReason: This check is now very similar to the -lt and -qt switches to it makes sense to bring it inline with how those are used.\n\nChanges:\n\nThe script has gone through a general refactoring with many code optimizations, simplifications and improvements starting from v1.0.6.\n\nFeatures:\n\nCaching and cache management via -cd\n\nTag switches are more versatile in how they select source files based on tag input. Trying to use archives first but automatically falling back to folders when required.\n\nMore env options introduced to make setting most dynamic features available via env settings.\n\nNew switch options added.\n\n### v1.0.6 - 07-03-2023\n\nLot of tweaks and changes.\n\ncache files method is now integrated into the script as a result of the URL function changes.\n\nRefactored URL function. It now uses associative arrays to hold the data for URLs, tags and versions. This makes the data more structured and easier to use consistently throughout the script.\n\nChanged all instances of echo -e to printf %b\n\nAdded a method to using an existing local git repo as a cached source. It will clone a folder with the matching app name in the cache path provided and clone, if it exists.\n\nIt will respect manually specified tags and checkout those from the clone folders.\n\nThe lowercase naming convention of the applications must be used in the cache_path/folder_name like cache_path/qbittorrent\n\nIt must be a git repo\n\n### v1.0.5 - 06-03-2023\n\nModified the default behaviour of the Debian installation to not build gawk and bison by default. It will now install them via apt-get.\n\nThere is a new switch -dma which will trigger the alternate mode and instead build gawk and bison from source.\n\n### v1.0.4 - 19-01-2023\n\nChanged: Dropped build support for older Buster-Bionic since they require a more modern gcc version to successfully build natively. Successful builds on a modern OS can be used there instead.\n\n### v1.0.3 - 15-07-2022\n\nFixed: build - Libtorrent using b2 had checks against supplied tags to do version specific things that failed to match properly when using a pull request tag or non versioned branch. It now always check the version.hpp to determine the version in these build checks.\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "patches",
          "type": "tree",
          "content": null
        },
        {
          "name": "qbittorrent-nox-static.sh",
          "type": "blob",
          "size": 171.8828125,
          "content": "#!/usr/bin/env bash\n#\n# cSpell:includeRegExp #.*\n#\n# Copyright 2020 by userdocs and contributors\n#\n# SPDX-License-Identifier: Apache-2.0\n#\n# @author - userdocs\n#\n# @contributors IceCodeNew Stanislas boredazfcuk AdvenT. guillaumedsde inochisa angristan xNihil0 Jercik\n#\n# https://github.com/userdocs/qbittorrent-nox-static/graphs/contributors\n#\n# @credits - https://gist.github.com/notsure2 https://github.com/c0re100/qBittorrent-Enhanced-Edition\n#\n# Script Formatting - https://marketplace.visualstudio.com/items?itemName=foxundermoon.shell-format\n#\n#################################################################################################################################################\n# Script version = Major minor patch\n#################################################################################################################################################\nscript_version=\"2.0.14\"\n#################################################################################################################################################\n# Set some script features - https://www.gnu.org/software/bash/manual/html_node/The-Set-Builtin.html\n#################################################################################################################################################\nset -a\n#################################################################################################################################################\n# Unset some variables to set defaults.\n#################################################################################################################################################\nunset qbt_skip_delete qbt_git_proxy qbt_curl_proxy qbt_install_dir qbt_working_dir qbt_modules_test qbt_python_version\n#################################################################################################################################################\n# Color me up Scotty - define some color values to use as variables in the scripts.\n#################################################################################################################################################\ncolor_red=\"\\e[31m\" color_red_light=\"\\e[91m\"\ncolor_green=\"\\e[32m\" color_green_light=\"\\e[92m\"\ncolor_yellow=\"\\e[33m\" color_yellow_light=\"\\e[93m\"\ncolor_blue=\"\\e[34m\" color_blue_light=\"\\e[94m\"\ncolor_magenta=\"\\e[35m\" color_magenta_light=\"\\e[95m\"\ncolor_cyan=\"\\e[36m\" color_cyan_light=\"\\e[96m\"\n\ntext_bold=\"\\e[1m\" text_dim=\"\\e[2m\" text_underlined=\"\\e[4m\" text_blink=\"\\e[5m\" text_newline=\"\\n\"\n\nunicode_red_circle=\"\\e[31m\\U2B24\\e[0m\" unicode_red_light_circle=\"\\e[91m\\U2B24\\e[0m\"\nunicode_green_circle=\"\\e[32m\\U2B24\\e[0m\" unicode_green_light_circle=\"\\e[92m\\U2B24\\e[0m\"\nunicode_yellow_circle=\"\\e[33m\\U2B24\\e[0m\" unicode_yellow_light_circle=\"\\e[93m\\U2B24\\e[0m\"\nunicode_blue_circle=\"\\e[34m\\U2B24\\e[0m\" unicode_blue_light_circle=\"\\e[94m\\U2B24\\e[0m\"\nunicode_magenta_circle=\"\\e[35m\\U2B24\\e[0m\" unicode_magenta_light_circle=\"\\e[95m\\U2B24\\e[0m\"\nunicode_cyan_circle=\"\\e[36m\\U2B24\\e[0m\" unicode_cyan_light_circle=\"\\e[96m\\U2B24\\e[0m\"\nunicode_grey_circle=\"\\e[37m\\U2B24\\e[0m\" unicode_grey_light_circle=\"\\e[97m\\U2B24\\e[0m\"\n\ncolor_end=\"\\e[0m\"\n\n# Function to test color and show outputs in the terminal\n_color_test() {\n\t# Check if the terminal supports color output\n\tif [[ -t 1 ]]; then\n\t\tcolour_array=(\"${color_red}red\" \"${color_red_light}light red\" \"${color_green}green\" \"${color_green_light}light green\" \"${color_yellow}yellow\" \"${color_yellow_light}light yellow\" \"${color_blue}blue\" \"${color_blue_light}ligh blue\" \"${color_magenta}magenta\" \"${color_magenta_light}light magenta\" \"${color_cyan}cyan\" \"${color_cyan_light}light cyan\")\n\t\tformatting_array=(\"${text_bold}Text Bold\" \"${text_dim}Text Dim\" \"${text_underlined}Text Underline\" \"${text_newline}New line\" \"${text_blink}Text Blink\")\n\t\tunicode_array=(\"${unicode_red_circle}\" \"${unicode_red_light_circle}\" \"${unicode_green_circle}\" \"${unicode_green_light_circle}\" \"${unicode_yellow_circle}\" \"${unicode_yellow_light_circle}\" \"${unicode_blue_circle}\" \"${unicode_blue_light_circle}\" \"${unicode_magenta_circle}\" \"${unicode_magenta_light_circle}\" \"${unicode_cyan_circle}\" \"${unicode_cyan_light_circle}\" \"${unicode_grey_circle}\" \"${unicode_grey_light_circle}\")\n\t\tprintf '\\n'\n\t\tfor colours in \"${colour_array[@]}\" \"${formatting_array[@]}\" \"${unicode_array[@]}\"; do\n\t\t\tprintf '%b\\n' \"${colours}${color_end}\"\n\t\tdone\n\t\tprintf '\\n'\n\t\texit\n\telse\n\t\techo \"The terminal does not support color output.\"\n\t\texit 1\n\tfi\n}\n[[ \"${1}\" == \"ctest\" ]] && _color_test # ./scriptname.sh ctest\n#######################################################################################################################################################\n# Check we are on a supported OS and release.\n#######################################################################################################################################################\nget_os_info() { # Function to source /etc/os-release and get info from it on demand.\n\t# shellcheck source=/dev/null\n\tif source /etc/os-release &> /dev/null; then\n\t\tprintf \"%s\" \"${!1%_*}\" # the exansion part is specific to the Alpine VERSION_ID format 1.2.3_alpha but won't break anything in Debian based format. 12/24.04\n\telse\n\t\tprintf \"%s\" \"unknown\" # This will make the script exit on the version check and provide useful reason.\n\tfi\n}\n\nos_id=\"$(get_os_info ID)\"                                                         # Get the ID for this this OS.\nos_version_codename=\"$(get_os_info VERSION_CODENAME)\"                             # Get the codename for this this OS. Note, Alpine does not have a unique codename.\nos_version_id=\"$(get_os_info VERSION_ID)\"                                         # Get the version number for this codename, for example: 10, 20.04, 3.12.4\n[[ \"$(wc -w <<< \"${os_version_id//\\./ }\")\" -eq \"2\" ]] && alpine_min_version=\"310\" # Account for variation in the versioning 3.1 or 3.1.0 to make sure the check works correctly\n[[ \"${os_id}\" =~ ^(alpine)$ ]] && os_version_codename=\"alpine\"                    # If alpine, set the codename to alpine. We check for min v3.10 later with codenames.\n\n# Check against allowed codenames or if the codename is alpine version greater than 3.10\nif [[ ! \"${os_version_codename}\" =~ ^(alpine|bullseye|bookworm|focal|jammy|noble)$ ]] || [[ \"${os_version_codename}\" =~ ^(alpine)$ && \"${os_version_id//\\./}\" -lt \"${alpine_min_version:-3100}\" ]]; then\n\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow} This is not a supported OS. There is no reason to continue.${color_end}\"\n\tprintf '%b\\n\\n' \" id: ${text_dim}${color_yellow_light}${os_id}${color_end} codename: ${text_dim}${color_yellow_light}${os_version_codename}${color_end} version: ${text_dim}${color_red_light}${os_version_id}${color_end}\"\n\tprintf '%b\\n\\n' \" ${unicode_yellow_circle} ${text_dim}These are the supported platforms${color_end}\"\n\tprintf '%b\\n' \" ${color_magenta_light}Debian${color_end} - ${color_blue_light}bullseye${color_end} - ${color_blue_light}bookworm${color_end}\"\n\tprintf '%b\\n' \" ${color_magenta_light}Ubuntu${color_end} - ${color_blue_light}focal${color_end} - ${color_blue_light}jammy${color_end} - ${color_blue_light}noble${color_end}\"\n\tprintf '%b\\n\\n' \" ${color_magenta_light}Alpine${color_end} - ${color_blue_light}3.10.0${color_end} ${text_dim}or greater${color_end}\"\n\texit 1\nfi\n#######################################################################################################################################################\n# Source env vars from a file if it exists but it will be overridden by switches and flags passed to the script\n#######################################################################################################################################################\nif [[ -f \"${PWD}/.qbt_env\" ]]; then\n\tprintf '\\n%b\\n' \" ${unicode_magenta_circle} Sourcing .qbt_env file\"\n\t# shellcheck source=/dev/null\n\tsource \"${PWD}/.qbt_env\"\nfi\n#######################################################################################################################################################\n# Multi arch stuff\n#######################################################################################################################################################\n# Define all available multi arches we use from here https://github.com/userdocs/qbt-musl-cross-make#readme\ndeclare -gA multi_arch_options\nmulti_arch_options[default]=\"skip\"\nmulti_arch_options[armel]=\"armel\"\nmulti_arch_options[armhf]=\"armhf\"\nmulti_arch_options[armv7]=\"armv7\"\nmulti_arch_options[aarch64]=\"aarch64\"\nmulti_arch_options[x86_64]=\"x86_64\"\nmulti_arch_options[x86]=\"x86\"\nmulti_arch_options[s390x]=\"s390x\"\nmulti_arch_options[powerpc]=\"powerpc\"\nmulti_arch_options[ppc64el]=\"ppc64el\"\nmulti_arch_options[mips]=\"mips\"\nmulti_arch_options[mipsel]=\"mipsel\"\nmulti_arch_options[mips64]=\"mips64\"\nmulti_arch_options[mips64el]=\"mips64el\"\nmulti_arch_options[riscv64]=\"riscv64\"\n#######################################################################################################################################################\n# This function sets some default values we use but whose values can be overridden by certain flags or exported as variables before running the script\n#######################################################################################################################################################\n_set_default_values() {\n\t# For docker deploys to not get prompted to set the timezone.\n\texport DEBIAN_FRONTEND=\"noninteractive\" && TZ=\"Europe/London\"\n\n\t# The default build configuration is qmake + qt5, qbt_build_tool=cmake or -c will make qt6 and cmake default\n\tqbt_build_tool=\"${qbt_build_tool:-cmake}\"\n\n\t# Default to empty to use host native build tools. This way we can build on native arch on a supported OS and skip cross build toolchains\n\tqbt_cross_name=\"${qbt_cross_name:-default}\"\n\n\t# Default to host - we are not really using this for anything other than what it defaults to so no need to set it.\n\tqbt_cross_target=\"${qbt_cross_target:-${os_id}}\"\n\n\t# yes to create debug build to use with gdb - disables stripping - for some reason libtorrent b2 builds are 200MB or larger. qbt_build_debug=yes or -d\n\tqbt_build_debug=\"${qbt_build_debug:-no}\"\n\n\t# github actions workflows - use https://github.com/userdocs/qbt-workflow-files/releases/latest instead of direct downloads from various source locations.\n\t# Provides an alternative source and does not spam download hosts when building matrix builds.\n\tqbt_workflow_files=\"${qbt_workflow_files:-no}\"\n\n\t# github actions workflows - use the workflow files saved as artifacts instead of downloading from workflow files or host per matrix\n\tqbt_workflow_artifacts=\"${qbt_workflow_artifacts:-no}\"\n\n\t# Provide a git username and repo in this format - username/repo\n\t# In this repo the structure needs to be like this /patches/libtorrent/1.2.11/patch and/or /patches/qbittorrent/4.3.1/patch\n\t# your patch file will be automatically fetched and loaded for those matching tags.\n\tqbt_patches_url=\"${qbt_patches_url:-userdocs/qbittorrent-nox-static}\"\n\n\t# Default to this version of libtorrent is no tag or branch is specified. qbt_libtorrent_version=1.2 or -lt v1.2.18\n\tqbt_libtorrent_version=\"${qbt_libtorrent_version:-2.0}\"\n\n\t# Use release Jamfile unless we need a specific fix from the relevant RC branch.\n\t# Using this can also break builds when non backported changes are present which will require a custom jamfile\n\tqbt_libtorrent_master_jamfile=\"${qbt_libtorrent_master_jamfile:-no}\"\n\n\t# Strip symbols by default as we need full debug builds to be useful gdb to backtrace so stripping is a sensible default optimisation.\n\tqbt_optimise_strip=\"${qbt_optimise_strip:-yes}\"\n\n\t# Github actions specific - Build revisions - The workflow will set this dynamically so that the urls are not hardcoded to a single repo\n\tqbt_revision_url=\"${qbt_revision_url:-userdocs/qbittorrent-nox-static}\"\n\n\t# Provide a path to check for cached local git repos and use those instead. Priority over workflow files.\n\tqbt_cache_dir=\"${qbt_cache_dir%/}\"\n\n\t# Env setting for the icu tag\n\tqbt_skip_icu=\"${qbt_skip_icu:-yes}\"\n\n\t# Env setting for the boost tag\n\tif [[ \"${qbt_libtorrent_version}\" == \"1.2\" || \"${qbt_libtorrent_tag}\" =~ ^(v1\\.2\\.|RC_1_2) ]]; then\n\t\tqbt_boost_tag=\"${qbt_boost_tag:-boost-1.86.0}\"\n\telse\n\t\tqbt_boost_tag=\"${qbt_boost_tag:-}\"\n\tfi\n\n\t# Env setting for the libtorrent tag\n\tqbt_libtorrent_tag=\"${qbt_libtorrent_tag:-}\"\n\n\t# Env setting for the Qt tag\n\tqbt_qt_tag=\"${qbt_qt_tag:-}\"\n\n\t# Env setting for the qbittorrent tag\n\tqbt_qbittorrent_tag=\"${qbt_qbittorrent_tag:-}\"\n\n\t# We are only using python3 but it's easier to just change this if we need to for some reason.\n\tqbt_python_version=\"3\"\n\n\t# The Alpine repository we use for package sources\n\tCDN_URL=\"http://dl-cdn.alpinelinux.org/alpine/edge/main\" # for alpine\n\n\t# Define our list of available modules in an array.\n\tqbt_modules=(\"all\" \"install\" \"glibc\" \"zlib\" \"iconv\" \"icu\" \"openssl\" \"boost\" \"libtorrent\" \"double_conversion\" \"qtbase\" \"qttools\" \"qbittorrent\")\n\n\t# Create this array empty. Modules listed in or added to this array will be removed from the default list of modules, changing the behaviour of all or install\n\tdelete=()\n\n\t# Create this array empty. Packages listed in or added to this array will be removed from the default list of packages, changing the list of installed dependencies\n\tdelete_pkgs=()\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\n\tif [[ \"${qbt_build_debug}\" = \"yes\" ]]; then\n\t\tqbt_optimise_strip=\"no\"\n\t\tqbt_cmake_debug='ON'\n\t\tqbt_libtorrent_debug='debug-symbols=on'\n\t\tqbt_qbittorrent_debug='--enable-debug'\n\telse\n\t\tqbt_cmake_debug='OFF'\n\tfi\n\n\t# staticish builds\n\tif [[ ${qbt_static_ish:=no} == \"yes\" ]]; then\n\t\tqbt_ldflags_static=\"\"\n\n\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then delete+=(\"glibc\"); fi\n\n\t\tif [[ ${qbt_cross_name} != \"default\" ]]; then\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_light_circle} You cannot use the ${color_blue_light}-si${color_end} flag with cross compilation${color_end}\"\n\t\t\texit 1\n\t\tfi\n\telse\n\t\tqbt_ldflags_static=\"-static\"\n\tfi\n\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\n\tif [[ \"${qbt_optimise_strip}\" = \"yes\" && \"${qbt_build_debug}\" = \"no\" ]]; then\n\t\tqbt_strip_qmake='strip'\n\t\tqbt_strip_flags='-s'\n\telse\n\t\tqbt_strip_qmake='-nostrip'\n\t\tqbt_strip_flags=''\n\tfi\n\n\t# Dynamic tests to change settings based on the use of qmake,cmake,strip and debug\n\tcase \"${qbt_qt_version}\" in\n\t\t5)\n\t\t\tif [[ \"${qbt_build_tool}\" != 'cmake' ]]; then\n\t\t\t\tqbt_build_tool=\"qmake\"\n\t\t\t\tqbt_use_qt6=\"OFF\"\n\t\t\tfi\n\t\t\t;;&\n\t\t6)\n\t\t\tqbt_build_tool=\"cmake\"\n\t\t\tqbt_use_qt6=\"ON\"\n\t\t\t;;&\n\t\t\"\")\n\t\t\t[[ \"${qbt_build_tool}\" == 'cmake' ]] && qbt_qt_version=\"6\" || qbt_qt_version=\"5\"\n\t\t\t;;&\n\t\t*)\n\t\t\t[[ ! \"${qbt_qt_version}\" =~ ^(5|6)$ ]] && qbt_workflow_files=\"no\"\n\t\t\t[[ \"${qbt_build_tool}\" == 'qmake' && \"${qbt_qt_version}\" =~ ^6 ]] && qbt_build_tool=\"cmake\"\n\t\t\t[[ \"${qbt_build_tool}\" == 'cmake' && \"${qbt_qt_version}\" =~ ^5 ]] && qbt_build_tool=\"cmake\" qbt_qt_version=\"6\"\n\t\t\t[[ \"${qbt_build_tool}\" == 'cmake' && \"${qbt_qt_version}\" =~ ^6 ]] && qbt_use_qt6=\"ON\"\n\t\t\t;;\n\tesac\n\n\t# If we are cross building then bootstrap the cross build tools we ned for the target arch else set native arch and remove the debian cross build tools\n\tif [[ \"${multi_arch_options[${qbt_cross_name}]}\" == \"${qbt_cross_name}\" ]]; then\n\t\t_multi_arch info_bootstrap\n\telse\n\t\tcross_arch=\"$(uname -m)\"\n\t\tdelete_pkgs+=(\"crossbuild-essential-${cross_arch}\")\n\tfi\n\n\t# if Alpine then delete modules we don't use and set the required packages array\n\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\tdelete+=(\"glibc\")\n\t\t[[ -z \"${qbt_cache_dir}\" ]] && delete_pkgs+=(\"coreutils\" \"gpg\")\n\t\tqbt_required_pkgs=(\"autoconf\" \"automake\" \"bash\" \"bash-completion\" \"build-base\" \"coreutils\" \"curl\" \"git\" \"gpg\" \"pkgconf\" \"libtool\" \"perl\" \"python${qbt_python_version}\" \"python${qbt_python_version}-dev\" \"py${qbt_python_version}-numpy\" \"py${qbt_python_version}-numpy-dev\" \"linux-headers\" \"ttf-freefont\" \"graphviz\" \"cmake\" \"re2c\")\n\tfi\n\n\t# if debian based then set the required packages array\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t[[ -z \"${qbt_cache_dir}\" ]] && delete_pkgs+=(\"autopoint\" \"gperf\")\n\t\tqbt_required_pkgs=(\"autopoint\" \"gperf\" \"gettext\" \"texinfo\" \"gawk\" \"bison\" \"build-essential\" \"crossbuild-essential-${cross_arch}\" \"curl\" \"pkg-config\" \"automake\" \"libtool\" \"git\" \"openssl\" \"perl\" \"python${qbt_python_version}\" \"python${qbt_python_version}-dev\" \"python${qbt_python_version}-numpy\" \"unzip\" \"graphviz\" \"re2c\")\n\tfi\n\n\t# remove this module by default unless provided as a first argument to the script.\n\tif [[ \"${1}\" != 'install' ]]; then\n\t\tdelete+=(\"install\")\n\tfi\n\n\t# Don't remove the icu module if it was provided as a positional parameter.\n\t# else skip icu by default unless the -i flag is provided.\n\tif [[ \"${qbt_skip_icu}\" != 'yes' && \"${*}\" =~ ([[:space:]]|^)\"icu\"([[:space:]]|$) ]]; then\n\t\tqbt_skip_icu=\"no\"\n\telif [[ \"${qbt_skip_icu}\" != \"no\" ]]; then\n\t\tdelete+=(\"icu\")\n\tfi\n\n\t# Configure default dependencies and modules if cmake is not specified\n\tif [[ \"${qbt_build_tool}\" != 'cmake' ]]; then\n\t\tdelete+=(\"double_conversion\")\n\t\tdelete_pkgs+=(\"unzip\" \"ttf-freefont\" \"graphviz\" \"cmake\" \"re2c\")\n\telse\n\t\t[[ \"${qbt_skip_icu}\" != \"no\" ]] && delete+=(\"icu\")\n\tfi\n\n\t# The default is 17 but can be manually defined via the env qbt_standard - this will be overridden by the _set_cxx_standard function in specific cases\n\tqbt_standard=\"${qbt_standard:-17}\" qbt_cxx_standard=\"c++${qbt_standard}\"\n\n\t# Set the working dir to our current location and all things well be relative to this location.\n\tqbt_working_dir=\"$(pwd)\"\n\n\t# Used with printf. Use the qbt_working_dir variable but the ${HOME} path is replaced with a literal ~\n\tqbt_working_dir_short=\"${qbt_working_dir/${HOME}/\\~}\"\n\n\tqbt_build_dir=\"${qbt_build_dir:-qbt-build}\" # Build directory\n\n\t# Install relative to the script location.\n\tqbt_install_dir=\"${qbt_working_dir}/${qbt_build_dir}\"\n\n\t# Used with printf. Use the qbt_install_dir variable but the ${HOME} path is replaced with a literal ~\n\tqbt_install_dir_short=\"${qbt_install_dir/${HOME}/\\~}\"\n\n\t# Get the local users $PATH before we isolate the script by setting HOME to the install dir in the _set_build_directory function.\n\tqbt_local_paths=\"$PATH\"\n}\n#######################################################################################################################################################\n# This function will check for a list of defined dependencies from the qbt_required_pkgs array. Apps like python3-dev are dynamically set\n#######################################################################################################################################################\n_check_dependencies() {\n\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} ${text_bold}Checking if required core dependencies are installed${color_end}\"\n\n\t# remove packages in the delete_pkgs from the qbt_required_pkgs array\n\tfor target in \"${delete_pkgs[@]}\"; do\n\t\tfor i in \"${!qbt_required_pkgs[@]}\"; do\n\t\t\tif [[ \"${qbt_required_pkgs[i]}\" == \"${target}\" ]]; then\n\t\t\t\tunset 'qbt_required_pkgs[i]'\n\t\t\tfi\n\t\tdone\n\tdone\n\n\t# Rebuild array to sort index from 0\n\tqbt_required_pkgs=(\"${qbt_required_pkgs[@]}\")\n\n\t# This checks over the qbt_required_pkgs array for the OS specified dependencies to see if they are installed\n\tfor pkg in \"${qbt_required_pkgs[@]}\"; do\n\n\t\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\t\tpkgman() { apk info -e \"${pkg}\"; }\n\t\tfi\n\n\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t\tpkgman() { dpkg -s \"${pkg}\"; }\n\t\tfi\n\n\t\tif pkgman > /dev/null 2>&1; then\n\t\t\tprintf '%b\\n' \" ${unicode_green_circle} ${pkg}\"\n\t\telse\n\t\t\tif [[ -n \"${pkg}\" ]]; then\n\t\t\t\tdeps_installed=\"no\"\n\t\t\t\tprintf '%b\\n' \" ${unicode_red_circle} ${pkg}\"\n\t\t\t\tqbt_checked_required_pkgs+=(\"$pkg\")\n\t\t\tfi\n\t\tfi\n\tdone\n\n\t# Check if user is able to install the dependencies, if yes then do so, if no then exit.\n\tif [[ \"${deps_installed}\" == \"no\" ]]; then\n\t\tif [[ \"$(id -un)\" == 'root' ]]; then\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} ${color_green}Updating${color_end}\"\n\n\t\t\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\t\t\tapk update --repository=\"${CDN_URL}\"\n\t\t\t\tapk upgrade --repository=\"${CDN_URL}\"\n\t\t\t\tapk fix\n\t\t\tfi\n\n\t\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t\t\tapt-get update -y\n\t\t\t\tapt-get upgrade -y\n\t\t\t\tapt-get autoremove -y\n\t\t\tfi\n\n\t\t\t[[ -f /var/run/reboot-required ]] && {\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${color_red}This machine requires a reboot to continue installation. Please reboot now.${color_end}\"\n\t\t\t\texit\n\t\t\t}\n\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle}${color_green} Installing required dependencies${color_end}\"\n\n\t\t\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\t\t\tif ! apk add \"${qbt_checked_required_pkgs[@]}\" --repository=\"${CDN_URL}\"; then\n\t\t\t\t\tprintf '\\n'\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t\t\tif ! apt-get install -y \"${qbt_checked_required_pkgs[@]}\"; then\n\t\t\t\t\tprintf '\\n'\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\tfi\n\n\t\t\tprintf '\\n%b\\n' \" ${unicode_green_circle}${color_green} Dependencies installed!${color_end}\"\n\n\t\t\tdeps_installed=\"yes\"\n\t\telse\n\t\t\tprintf '\\n%b\\n' \" ${text_bold}Please request or install the missing core dependencies before using this script${color_end}\"\n\n\t\t\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${color_red_light}apk add${color_end} ${qbt_checked_required_pkgs[*]}\"\n\t\t\tfi\n\n\t\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${color_red_light}apt-get install -y${color_end} ${qbt_checked_required_pkgs[*]}\"\n\t\t\tfi\n\n\t\t\texit\n\t\tfi\n\tfi\n\n\t# All dependency checks passed print\n\tif [[ \"${deps_installed}\" != \"no\" ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle}${text_bold} Dependencies: All checks passed, continuing to build${color_end}\"\n\tfi\n}\n#######################################################################################################################################################\n# This function converts a version string to a number for comparison purposes.\n#######################################################################################################################################################\n_semantic_version() {\n\tlocal test_array\n\tread -ra test_array < <(printf \"%s\" \"${@//./ }\")\n\tprintf \"%d%03d%03d%03d\" \"${test_array[@]}\"\n}\n#######################################################################################################################################################\n# _print_env\n#######################################################################################################################################################\n_print_env() {\n\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} Default env settings${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_build_dir=\\\"${color_green_light}${qbt_build_dir}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_libtorrent_version=\\\"${color_green_light}${qbt_libtorrent_version}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_qt_version=\\\"${color_green_light}${qbt_qt_version}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_build_tool=\\\"${color_green_light}${qbt_build_tool}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_cross_name=\\\"${color_green_light}${qbt_cross_name}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_patches_url=\\\"${color_green_light}${qbt_patches_url}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_skip_icu=\\\"${color_green_light}${qbt_skip_icu}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_boost_tag=\\\"${color_green_light}${github_tag[boost]}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_libtorrent_tag=\\\"${color_green_light}${github_tag[libtorrent]}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_qt_tag=\\\"${color_green_light}${github_tag[qtbase]}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_qbittorrent_tag=\\\"${color_green_light}${github_tag[qbittorrent]}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_libtorrent_master_jamfile=\\\"${color_green_light}${qbt_libtorrent_master_jamfile}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_workflow_files=\\\"${color_green_light}${qbt_workflow_files}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_workflow_artifacts=\\\"${color_green_light}${qbt_workflow_artifacts}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_cache_dir=\\\"${color_green_light}${qbt_cache_dir}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_optimise_strip=\\\"${color_green_light}${qbt_optimise_strip}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_build_debug=\\\"${color_green_light}${qbt_build_debug}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n' \" ${color_yellow_light}  qbt_standard=\\\"${color_green_light}${qbt_standard}${color_yellow_light}\\\"${color_end}\"\n\tprintf '%b\\n\\n' \" ${color_yellow_light}  qbt_static_ish=\\\"${color_green_light}${qbt_static_ish}${color_yellow_light}\\\"${color_end}\"\n}\n#######################################################################################################################################################\n# These functions set the cxx standard dynmically based on the libtorrent versions, qt version and qbittorrent combinations\n#######################################################################################################################################################\n_qt_std_cons() {\n\t[[ \"${qbt_qt_version}\" == \"6\" ]] && cxx_check=\"yes\"\n\tprintf '%s' \"${cxx_check:-no}\"\n}\n\n_libtorrent_std_cons() {\n\t[[ \"${github_tag[libtorrent]}\" =~ ^(RC_1_2|RC_2_0)$ ]] && cxx_check=\"yes\"\n\t[[ \"${github_tag[libtorrent]}\" =~ ^v1\\.2\\. && \"$(_semantic_version \"${github_tag[libtorrent]/v/}\")\" -ge \"$(_semantic_version \"1.2.20\")\" ]] && cxx_check=\"yes\"\n\t[[ \"${github_tag[libtorrent]}\" =~ ^v2\\.0\\. && \"$(_semantic_version \"${github_tag[libtorrent]/v/}\")\" -ge \"$(_semantic_version \"2.0.10\")\" ]] && cxx_check=\"yes\"\n\tprintf '%s' \"${cxx_check:-no}\"\n}\n\n_qbittorrent_std_cons() {\n\t[[ \"${github_tag[qbittorrent]}\" == \"master\" ]] && cxx_check=\"yes\"\n\t[[ \"${github_tag[qbittorrent]}\" =~ ^release- && \"$(_semantic_version \"${github_tag[qbittorrent]/release-/}\")\" -ge \"$(_semantic_version \"4.6.0\")\" ]] && cxx_check=\"yes\"\n\tprintf '%s' \"${cxx_check:-no}\"\n}\n\n_set_cxx_standard() {\n\tif [[ $(_qt_std_cons) == \"yes\" && $(_libtorrent_std_cons) == \"yes\" && $(_qbittorrent_std_cons) == \"yes\" ]]; then\n\t\tif [[ \"${os_version_codename}\" =~ ^(alpine|bookworm|jammy|noble)$ ]]; then\n\t\t\tqbt_standard=\"20\" qbt_cxx_standard=\"c++${qbt_standard}\"\n\t\tfi\n\tfi\n}\n\n#######################################################################################################################################################\n# These functions set some build conditions dynmically based on the libtorrent versions, qt version and qbittorrent combinations\n#######################################################################################################################################################\n_qbittorrent_build_cons() {\n\t[[ \"${github_tag[qbittorrent]}\" == \"master\" ]] && disable_qt5=\"yes\"\n\t[[ \"${github_tag[qbittorrent]}\" == \"v5_0_x\" ]] && disable_qt5=\"yes\"\n\t[[ \"${github_tag[qbittorrent]}\" =~ ^release- && \"$(_semantic_version \"${github_tag[qbittorrent]/release-/}\")\" -ge \"$(_semantic_version \"5.0.0\")\" ]] && disable_qt5=\"yes\"\n\tprintf '%s' \"${disable_qt5:-no}\"\n}\n\n_set_build_cons() {\n\tif [[ $(_qbittorrent_build_cons) == \"yes\" && \"${qbt_qt_version}\" == \"5\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${text_blink}${unicode_red_light_circle}${color_end} ${color_yellow}qBittorrent ${color_magenta}${github_tag[qbittorrent]}${color_yellow} does not support ${color_red}Qt5${color_yellow}. Please use ${color_green}Qt6${color_yellow} or a qBittorrent ${color_green}v4${color_yellow} tag.${color_end}\"\n\t\tif [[ -d \"${release_info_dir}\" ]]; then touch \"${release_info_dir}/disable-qt5\"; fi # qbittorrent v5 transition - workflow specific\n\t\texit                                                                                # non error exit to not upset github actions - just skip the step\n\tfi\n}\n#######################################################################################################################################################\n# This is a command test function: _cmd exit 1\n#######################################################################################################################################################\n_cmd() {\n\tif ! \"${@}\"; then\n\t\tprintf '\\n%b\\n\\n' \" The command: ${color_red_light}${*}${color_end} failed\"\n\t\texit 1\n\tfi\n}\n#######################################################################################################################################################\n# This is a command test function to test build commands for failure\n#######################################################################################################################################################\n_post_command() {\n\toutcome=(\"${PIPESTATUS[@]}\")\n\t[[ -n \"${1}\" ]] && command_type=\"${1}\"\n\tif [[ \"${outcome[*]}\" =~ [1-9] ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_red_circle}${color_red} Error:${color_end} The ${command_type:-tested} command produced an exit code greater than 0 - Check the logs ${color_end}\"\n\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle}${color_yellow} Warning:${color_end} Developers can be easily startled or confused by wild issues, if you are seeing this warning and cannot resolve the issue yourself, please open an issue at this repo first:\"\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_circle}${color_blue_light} https://github.com/userdocs/qbittorrent-nox-static/issues ${color_end}\"\n\t\texit 1\n\tfi\n}\n#######################################################################################################################################################\n# This function is to test a directory exists before attempting to cd and fail with and exit code if it doesn't.\n#######################################################################################################################################################\n_pushd() {\n\tif ! pushd \"$@\" &> /dev/null; then\n\t\tprintf '\\n%b\\n' \"This directory does not exist. There is a problem\"\n\t\tprintf '\\n%b\\n\\n' \"${color_red_light}${1}${color_end}\"\n\t\texit 1\n\tfi\n}\n\n_popd() {\n\tif ! popd &> /dev/null; then\n\t\tprintf '%b\\n' \"This directory does not exist. There is a problem\"\n\t\texit 1\n\tfi\n}\n#######################################################################################################################################################\n# This function makes sure the log directory and path required exists for tee\n#######################################################################################################################################################\n_tee() {\n\t[[ \"$#\" -eq 1 && \"${1%/*}\" =~ / ]] && mkdir -p \"${1%/*}\"\n\t[[ \"$#\" -eq 2 && \"${2%/*}\" =~ / ]] && mkdir -p \"${2%/*}\"\n\tcommand tee \"$@\"\n}\n#######################################################################################################################################################\n# error functions\n#######################################################################################################################################################\n_error_tag() {\n\t[[ \"${github_tag[*]}\" =~ error_tag ]] && {\n\t\tprintf '\\n'\n\t\texit\n\t}\n}\n#######################################################################################################################################################\n# _curl test download functions - default is no proxy - _curl is a test function and _curl_curl is the command function\n#######################################################################################################################################################\n_curl_curl() {\n\t\"$(type -P curl)\" -sNL4fq --connect-timeout 5 --retry 5 --retry-delay 5 --retry-max-time 25 \"${qbt_curl_proxy[@]}\" \"${@}\"\n}\n\n_curl() {\n\tif ! _curl_curl \"${@}\"; then\n\t\treturn 1\n\tfi\n}\n#######################################################################################################################################################\n# git test download functions - default is no proxy - git is a test function and _git_git is the command function\n#######################################################################################################################################################\n_git_git() {\n\t\"$(type -P git)\" \"${qbt_git_proxy[@]}\" \"${@}\"\n}\n\n_git() {\n\tif [[ \"${2}\" == '-t' ]]; then\n\t\tgit_test_cmd=(\"${1}\" \"${2}\" \"${3}\")\n\telse\n\t\t[[ \"${9}\" =~ https:// ]] && git_test_cmd=(\"${9}\")   # 9th place in our download folder function for qttools\n\t\t[[ \"${11}\" =~ https:// ]] && git_test_cmd=(\"${11}\") # 11th place in our download folder function\n\tfi\n\n\tif ! _curl -fIL \"${git_test_cmd[@]}\" &> /dev/null; then\n\t\tprintf '\\n%b\\n\\n' \" ${color_yellow}Git test 1: There is an issue with your proxy settings or network connection${color_end}\"\n\t\texit\n\tfi\n\n\tstatus=\"$(\n\t\t_git_git ls-remote -qht --refs --exit-code \"${git_test_cmd[@]}\" &> /dev/null\n\t\tprintf \"%s\" \"${?}\"\n\t)\"\n\n\tif [[ \"${2}\" == '-t' && \"${status}\" -eq '0' ]]; then\n\t\tprintf '%b\\n' \"${3}\"\n\telif [[ \"${2}\" == '-t' && \"${status}\" -ge '1' ]]; then\n\t\tprintf '%b\\n' 'error_tag'\n\telse\n\t\tif ! _git_git \"${@}\"; then\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_yellow}Git test 2: There is an issue with your proxy settings or network connection${color_end}\"\n\t\t\texit\n\t\tfi\n\tfi\n}\n\n_test_git_ouput() {\n\tif [[ \"${1}\" == 'error_tag' ]]; then\n\t\tprintf '\\n%b\\n' \" ${text_blink}${unicode_red_light_circle}${color_end} ${color_yellow}The provided ${2} tag ${color_red}${3}${color_end}${color_yellow} is not valid${color_end}\"\n\tfi\n}\n#######################################################################################################################################################\n# Boost URL test function\n#######################################################################################################################################################\n_boost_url() {\n\tif [[ \"${github_tag[boost]}\" =~ \\.beta ]]; then\n\t\tlocal boost_asset=\"${github_tag[boost]/\\.beta/\\.b}\"\n\t\tlocal boost_asset_type=\"beta\"\n\telse\n\t\tlocal boost_asset=\"${github_tag[boost]}\"\n\t\tlocal boost_asset_type=\"release\"\n\tfi\n\n\tlocal boost_url_array=(\n\t\t\"https://github.com/boostorg/boost/${boost_asset_type}s/download/${github_tag[boost]}/${github_tag[boost]}-b2-nodocs.tar.xz\"\n\t\t\"https://archives.boost.io/${boost_asset_type}/${github_tag[boost]/boost-/}/source/${boost_asset//[-\\.]/_}.tar.gz\"\n\t)\n\n\tfor url in \"${boost_url_array[@]}\"; do\n\t\tif _curl -sfLI \"${url}\" &> /dev/null; then\n\t\t\tboost_url_status=\"200\"\n\t\t\tsource_archive_url[boost]=\"${url}\"\n\t\t\tsource_default[boost]=\"file\"\n\t\t\tbreak\n\t\telse\n\t\t\tboost_url_status=\"403\"\n\t\t\tsource_default[boost]=\"folder\"\n\t\tfi\n\tdone\n}\n#######################################################################################################################################################\n# Debug stuff\n#######################################################################################################################################################\n_debug() {\n\tif [[ \"${script_debug_urls}\" == \"yes\" ]]; then\n\t\tmapfile -t github_url_sorted < <(printf '%s\\n' \"${!github_url[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}github_url${color_end}\"\n\t\tfor n in \"${github_url_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${github_url[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tmapfile -t github_tag_sorted < <(printf '%s\\n' \"${!github_tag[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}github_tag${color_end}\"\n\t\tfor n in \"${github_tag_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${github_tag[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tmapfile -t app_version_sorted < <(printf '%s\\n' \"${!app_version[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}app_version${color_end}\"\n\t\tfor n in \"${app_version_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${app_version[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tmapfile -t source_archive_url_sorted < <(printf '%s\\n' \"${!source_archive_url[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}source_archive_url${color_end}\"\n\t\tfor n in \"${source_archive_url_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${source_archive_url[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tmapfile -t qbt_workflow_archive_url_sorted < <(printf '%s\\n' \"${!qbt_workflow_archive_url[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}qbt_workflow_archive_url${color_end}\"\n\t\tfor n in \"${qbt_workflow_archive_url_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${qbt_workflow_archive_url[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tmapfile -t source_default_sorted < <(printf '%s\\n' \"${!source_default[@]}\" | sort)\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_magenta_circle} ${color_yellow_light}source_default${color_end}\"\n\t\tfor n in \"${source_default_sorted[@]}\"; do\n\t\t\tprintf '%b\\n' \" ${color_green_light}$n${color_end}: ${color_blue_light}${source_default[$n]}${color_end}\" #: ${github_url[$n]}\"\n\t\tdone\n\n\t\tprintf '\\n%b\\n' \" ${unicode_magenta_circle} ${color_yellow_light}Tests${color_end}\"\n\t\tprintf '\\n%b\\n' \" ${color_green_light}boost_url_status:${color_end} ${color_blue_light}${boost_url_status}${color_end}\"\n\t\tprintf '%b\\n' \" ${color_green_light}test_url_status:${color_end} ${color_blue_light}${test_url_status}${color_end}\"\n\n\t\tprintf '\\n'\n\t\texit\n\tfi\n}\n#######################################################################################################################################################\n# This function sets some compiler flags globally - b2 settings are set in the ~/user-config.jam  set in the _installation_modules function\n#######################################################################################################################################################\n_custom_flags_set() {\n\tCXXFLAGS=\"${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ${qbt_ldflags_static} -w -Wno-psabi -I${include_dir}\"\n\tCPPFLAGS=\"${qbt_optimize/*/${qbt_optimize} }${qbt_ldflags_static} -w -Wno-psabi -I${include_dir}\"\n\tLDFLAGS=\"${qbt_optimize/*/${qbt_optimize} }${qbt_ldflags_static} ${qbt_strip_flags} -L${lib_dir} -pthread -z max-page-size=65536\"\n}\n\n_custom_flags_reset() {\n\tCXXFLAGS=\"${qbt_optimize/*/${qbt_optimize} } -w -std=${qbt_cxx_standard}\"\n\tCPPFLAGS=\"${qbt_optimize/*/${qbt_optimize} } -w\"\n\tLDFLAGS=\"\"\n}\n#######################################################################################################################################################\n# This function installs a completed static build of qbittorrent-nox to the /usr/local/bin for root or ${HOME}/bin for non root\n#######################################################################################################################################################\n_install_qbittorrent() {\n\tif [[ -f \"${qbt_install_dir}/completed/qbittorrent-nox\" ]]; then\n\t\tif [[ \"$(id -un)\" == 'root' ]]; then\n\t\t\tmkdir -p \"/usr/local/bin\"\n\t\t\tcp -rf \"${qbt_install_dir}/completed/qbittorrent-nox\" \"/usr/local/bin\"\n\t\telse\n\t\t\tmkdir -p \"${HOME}/bin\"\n\t\t\tcp -rf \"${qbt_install_dir}/completed/qbittorrent-nox\" \"${LOCAL_USER_HOME}/bin\"\n\t\tfi\n\n\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} qbittorrent-nox has been installed!${color_end}\"\n\t\tprintf '\\n%b\\n' \" Run it using this command:\"\n\t\t[[ \"$(id -un)\" == 'root' ]] && printf '\\n%b\\n\\n' \" ${color_green}qbittorrent-nox${color_end}\" || printf '\\n%b\\n\\n' \" ${color_green}~/bin/qbittorrent-nox${color_end}\"\n\t\texit\n\telse\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} qbittorrent-nox has not been built to the defined install directory:\"\n\t\tprintf '\\n%b\\n' \"${color_green}${qbt_install_dir_short}/completed${color_end}\"\n\t\tprintf '\\n%b\\n\\n' \"Please build it using the script first then install\"\n\t\texit\n\tfi\n}\n#######################################################################################################################################################\n# Script Version check\n#######################################################################################################################################################\n_script_version() {\n\tscript_version_remote=\"$(_curl -sL \"${script_url}\" | sed -rn 's|^script_version=\"(.*)\"$|\\1|p')\"\n\n\tif [[ \"$(_semantic_version \"${script_version}\")\" -lt \"$(_semantic_version \"${script_version_remote}\")\" ]]; then\n\t\tprintf '\\n%b\\n' \" ${text_blink}${unicode_red_circle}${color_end} Script update available! Versions - ${color_yellow_light}local:${color_red_light}${script_version}${color_end} ${color_yellow_light}remote:${color_green_light}${script_version_remote}${color_end}\"\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} curl -sLo ${BASH_SOURCE[0]} https://git.io/qbstatic${color_end}\"\n\telif [[ \"$(_semantic_version \"${script_version}\")\" -gt \"$(_semantic_version \"${script_version_remote}\")\" ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} Script version: ${color_red_light}${script_version}-dev${color_end}\"\n\telse\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} Script version: ${color_green_light}${script_version}${color_end}\"\n\tfi\n}\n#######################################################################################################################################################\n# URL test for normal use and proxy use - make sure we can reach google.com before processing the URL functions\n#######################################################################################################################################################\n_test_url() {\n\ttest_url_status=\"$(_curl -o /dev/null --head --write-out '%{http_code}' \"https://github.com\")\"\n\tif [[ \"${test_url_status}\" -eq \"200\" ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} Test URL = ${color_green}passed${color_end}\"\n\telse\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow}Test URL failed:${color_end} ${color_yellow_light}There could be an issue with your proxy settings or network connection${color_end}\"\n\t\texit\n\tfi\n}\n#######################################################################################################################################################\n# This function sets the build and installation directory. If the argument -b is used to set a build directory that directory is set and used.\n# If nothing is specified or the switch is not used it defaults to the hard-coded path relative to the scripts location - qbittorrent-build\n#######################################################################################################################################################\n_set_build_directory() {\n\tif [[ -n \"${qbt_build_dir}\" ]]; then\n\t\tif [[ \"${qbt_build_dir}\" =~ ^/ ]]; then\n\t\t\tqbt_install_dir=\"${qbt_build_dir}\"\n\t\t\tqbt_install_dir_short=\"${qbt_install_dir/${HOME}/\\~}\"\n\t\telse\n\t\t\tqbt_install_dir=\"${qbt_working_dir}/${qbt_build_dir}\"\n\t\t\tqbt_install_dir_short=\"${qbt_working_dir_short}/${qbt_build_dir}\"\n\t\tfi\n\tfi\n\n\t# Set lib and include directory paths based on install path.\n\tinclude_dir=\"${qbt_install_dir}/include\"\n\tlib_dir=\"${qbt_install_dir}/lib\"\n\n\t# Define some build specific variables\n\tLOCAL_USER_HOME=\"${HOME}\" # Get the local user's home dir path before we contain HOME to the build dir.\n\tHOME=\"${qbt_install_dir}\"\n\tPATH=\"${qbt_install_dir}/bin${PATH:+:${qbt_local_paths}}\"\n\tPKG_CONFIG_PATH=\"${lib_dir}/pkgconfig\"\n}\n#######################################################################################################################################################\n# This function is where we set your URL and github tag info that we use with other functions.\n#######################################################################################################################################################\n_set_module_urls() {\n\t# Update check url for the _script_version function\n\tscript_url=\"https://raw.githubusercontent.com/userdocs/qbittorrent-nox-static/master/qbittorrent-nox-static.sh\"\n\t##########################################################################################################################################################\n\t# Create all the arrays now\n\t##########################################################################################################################################################\n\tdeclare -gA github_url github_tag app_version source_archive_url qbt_workflow_archive_url qbt_workflow_override source_default\n\t##########################################################################################################################################################\n\t# Configure the github_url associative array for all the applications this script uses and we call them as ${github_url[app_name]}\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tgithub_url[cmake_ninja]=\"https://github.com/userdocs/qbt-cmake-ninja-crossbuilds.git\"\n\t\tgithub_url[glibc]=\"https://sourceware.org/git/glibc.git\"\n\telse\n\t\tgithub_url[ninja]=\"https://github.com/userdocs/qbt-ninja-build.git\"\n\tfi\n\tgithub_url[zlib]=\"https://github.com/zlib-ng/zlib-ng.git\"\n\tgithub_url[iconv]=\"https://git.savannah.gnu.org/git/libiconv.git\"\n\tgithub_url[icu]=\"https://github.com/unicode-org/icu.git\"\n\tgithub_url[double_conversion]=\"https://github.com/google/double-conversion.git\"\n\tgithub_url[openssl]=\"https://github.com/openssl/openssl.git\"\n\tgithub_url[boost]=\"https://github.com/boostorg/boost.git\"\n\tgithub_url[libtorrent]=\"https://github.com/arvidn/libtorrent.git\"\n\tgithub_url[qtbase]=\"https://github.com/qt/qtbase.git\"\n\tgithub_url[qttools]=\"https://github.com/qt/qttools.git\"\n\tgithub_url[qbittorrent]=\"https://github.com/qbittorrent/qBittorrent.git\"\n\t##########################################################################################################################################################\n\t# Configure the github_tag associative array for all the applications this script uses and we call them as ${github_tag[app_name]}\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tgithub_tag[cmake_ninja]=\"$(_git_git ls-remote -q -t --refs \"${github_url[cmake_ninja]}\" | awk '{sub(\"refs/tags/\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\t\tif [[ \"${os_version_codename}\" =~ ^(bullseye|focal)$ ]]; then\n\t\t\tgithub_tag[glibc]=\"glibc-2.31\"\n\t\telif [[ \"${os_version_codename}\" =~ ^(bookworm|jammy)$ ]]; then\n\t\t\tgithub_tag[glibc]=\"glibc-2.38\"\n\t\telse # \"$(_git_git ls-remote -q -t --refs https://sourceware.org/git/glibc.git | awk '/\\/tags\\/glibc-[0-9]\\.[0-9]{2}$/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\t\t\tgithub_tag[glibc]=\"glibc-2.40\"\n\t\tfi\n\telse\n\t\tgithub_tag[ninja]=\"$(_git_git ls-remote -q -t --refs \"${github_url[ninja]}\" | awk '/v/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tfi\n\tgithub_tag[zlib]=\"develop\"\n\t#github_tag[iconv]=\"$(_git_git ls-remote -q -t --refs \"${github_url[iconv]}\" | awk '{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[iconv]=\"v$(_curl \"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/dependency-version.json\" | sed -rn 's|(.*)\"iconv\": \"(.*)\",|\\2|p')\"\n\tgithub_tag[icu]=\"$(_git_git ls-remote -q -t --refs \"${github_url[icu]}\" | awk '/\\/release-/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[double_conversion]=\"$(_git_git ls-remote -q -t --refs \"${github_url[double_conversion]}\" | awk '/v/{sub(\"refs/tags/\", \"\");sub(\"(.*)(v6|rc|alpha|beta)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[openssl]=\"$(_git_git ls-remote -q -t --refs \"${github_url[openssl]}\" | awk '/openssl/{sub(\"refs/tags/\", \"\");sub(\"(.*)(v6|rc|alpha|beta)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n1)\"\n\tgithub_tag[boost]=$(_git_git ls-remote -q -t --refs \"${github_url[boost]}\" | awk '{sub(\"refs/tags/\", \"\");sub(\"(.*)(rc|alpha|beta|-bgl)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\n\tgithub_tag[libtorrent]=\"$(_git_git ls-remote -q -t --refs \"${github_url[libtorrent]}\" | awk '/'\"v${qbt_libtorrent_version}\"'/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[qtbase]=\"$(_git_git ls-remote -q -t --refs \"${github_url[qtbase]}\" | awk '/'\"v${qbt_qt_version}\"'/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-a|-b|-r)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[qttools]=\"$(_git_git ls-remote -q -t --refs \"${github_url[qttools]}\" | awk '/'\"v${qbt_qt_version}\"'/{sub(\"refs/tags/\", \"\");sub(\"(.*)(-a|-b|-r)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\tgithub_tag[qbittorrent]=\"$(_git_git ls-remote -q -t --refs \"${github_url[qbittorrent]}\" | awk '{sub(\"refs/tags/\", \"\");sub(\"(.*)(-[^0-9].*|rc|alpha|beta)(.*)\", \"\"); print $2 }' | awk '!/^$/' | sort -rV | head -n 1)\"\n\t##########################################################################################################################################################\n\t# Configure the app_version associative array for all the applications this script uses and we call them as ${app_version[app_name]}\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tapp_version[cmake_debian]=\"${github_tag[cmake_ninja]%_*}\"\n\t\tapp_version[ninja_debian]=\"${github_tag[cmake_ninja]#*_}\"\n\t\tapp_version[glibc]=\"${github_tag[glibc]#glibc-}\"\n\telse\n\t\tapp_version[cmake]=\"$(apk info -d cmake | awk '/cmake-/{sub(\"(cmake-)\", \"\");sub(\"(-r)\", \"\"); print $1 }' | sort -r | head -n1)\"\n\t\tapp_version[ninja]=\"${github_tag[ninja]#v}\"\n\tfi\n\tapp_version[zlib]=\"$(_curl \"https://raw.githubusercontent.com/zlib-ng/zlib-ng/${github_tag[zlib]}/zlib.h.in\" | sed -rn 's|#define ZLIB_VERSION \"(.*)\"|\\1|p' | sed 's/\\.zlib-ng//g')\"\n\tapp_version[iconv]=\"${github_tag[iconv]#v}\"\n\tapp_version[icu]=\"${github_tag[icu]#release-}\"\n\tapp_version[double_conversion]=\"${github_tag[double_conversion]#v}\"\n\tapp_version[openssl]=\"${github_tag[openssl]#openssl-}\"\n\tapp_version[boost]=\"${github_tag[boost]#boost-}\"\n\tapp_version[libtorrent]=\"${github_tag[libtorrent]#v}\"\n\tapp_version[qtbase]=\"$(printf '%s' \"${github_tag[qtbase]#v}\" | sed 's/-lts-lgpl//g')\"\n\tapp_version[qttools]=\"$(printf '%s' \"${github_tag[qttools]#v}\" | sed 's/-lts-lgpl//g')\"\n\tapp_version[qbittorrent]=\"${github_tag[qbittorrent]#release-}\"\n\t##########################################################################################################################################################\n\t# Configure the source_archive_url associative array for all the applications this script uses and we call them as ${source_archive_url[app_name]}\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tsource_archive_url[cmake_ninja]=\"https://github.com/userdocs/qbt-cmake-ninja-crossbuilds/releases/latest/download/${os_id}-${os_version_codename}-cmake-$(dpkg --print-architecture).tar.xz\"\n\t\tsource_archive_url[glibc]=\"https://ftpmirror.gnu.org/gnu/libc/${github_tag[glibc]}.tar.xz\"\n\tfi\n\tsource_archive_url[zlib]=\"https://github.com/zlib-ng/zlib-ng/archive/refs/heads/develop.tar.gz\"\n\tsource_archive_url[iconv]=\"https://mirrors.dotsrc.org/gnu/libiconv/$(grep -Eo 'libiconv-([0-9]{1,3}[.]?)([0-9]{1,3}[.]?)([0-9]{1,3}?)\\.tar.gz' <(_curl https://mirrors.dotsrc.org/gnu/libiconv/) | sort -V | tail -1)\"\n\tsource_archive_url[icu]=\"https://github.com/unicode-org/icu/releases/download/${github_tag[icu]}/icu4c-${app_version[icu]/-/_}-src.tgz\"\n\tsource_archive_url[double_conversion]=\"https://github.com/google/double-conversion/archive/refs/tags/${github_tag[double_conversion]}.tar.gz\"\n\tsource_archive_url[openssl]=\"https://github.com/openssl/openssl/releases/download/${github_tag[openssl]}/${github_tag[openssl]}.tar.gz\"\n\t_boost_url # function to test and set the boost url and more\n\tsource_archive_url[libtorrent]=\"https://github.com/arvidn/libtorrent/releases/download/${github_tag[libtorrent]}/libtorrent-rasterbar-${github_tag[libtorrent]#v}.tar.gz\"\n\n\tread -ra qt_version_short_array <<< \"${app_version[qtbase]//\\./ }\"\n\tqt_version_short=\"${qt_version_short_array[0]}.${qt_version_short_array[1]}\"\n\n\tif [[ \"${qbt_qt_version}\" =~ ^6 ]]; then\n\t\tsource_archive_url[qtbase]=\"https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qtbase]}/submodules/qtbase-everywhere-src-${app_version[qtbase]}.tar.xz\"\n\t\tsource_archive_url[qttools]=\"https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qttools]}/submodules/qttools-everywhere-src-${app_version[qttools]}.tar.xz\"\n\telse\n\t\tsource_archive_url[qtbase]=\"https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qtbase]}/submodules/qtbase-everywhere-opensource-src-${app_version[qtbase]}.tar.xz\"\n\t\tsource_archive_url[qttools]=\"https://download.qt.io/official_releases/qt/${qt_version_short}/${app_version[qttools]}/submodules/qttools-everywhere-opensource-src-${app_version[qttools]}.tar.xz\"\n\tfi\n\n\tsource_archive_url[qbittorrent]=\"https://github.com/qbittorrent/qBittorrent/archive/refs/tags/${github_tag[qbittorrent]}.tar.gz\"\n\t##########################################################################################################################################################\n\t# Configure the qbt_workflow_archive_url associative array for all the applications this script uses and we call them as ${qbt_workflow_archive_url[app_name]}\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tqbt_workflow_archive_url[cmake_ninja]=\"${source_archive_url[cmake_ninja]}\"\n\t\tqbt_workflow_archive_url[glibc]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/glibc.${github_tag[glibc]#glibc-}.tar.xz\"\n\tfi\n\tqbt_workflow_archive_url[zlib]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/zlib.tar.xz\"\n\tqbt_workflow_archive_url[iconv]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/iconv.tar.xz\"\n\tqbt_workflow_archive_url[icu]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/icu.tar.xz\"\n\tqbt_workflow_archive_url[double_conversion]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/double_conversion.tar.xz\"\n\tqbt_workflow_archive_url[openssl]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/openssl.tar.xz\"\n\tqbt_workflow_archive_url[boost]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/boost.tar.xz\"\n\tqbt_workflow_archive_url[libtorrent]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/libtorrent.${github_tag[libtorrent]/v/}.tar.xz\"\n\tqbt_workflow_archive_url[qtbase]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qt${qbt_qt_version:0:1}base.tar.xz\"\n\tqbt_workflow_archive_url[qttools]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qt${qbt_qt_version:0:1}tools.tar.xz\"\n\tqbt_workflow_archive_url[qbittorrent]=\"https://github.com/userdocs/qbt-workflow-files/releases/latest/download/qbittorrent.tar.xz\"\n\t##########################################################################################################################################################\n\t# Configure workflow override options\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tqbt_workflow_override[cmake_ninja]=\"no\"\n\t\tqbt_workflow_override[glibc]=\"no\"\n\tfi\n\tqbt_workflow_override[zlib]=\"no\"\n\tqbt_workflow_override[iconv]=\"no\"\n\tqbt_workflow_override[icu]=\"no\"\n\tqbt_workflow_override[double_conversion]=\"no\"\n\tqbt_workflow_override[openssl]=\"no\"\n\tqbt_workflow_override[boost]=\"no\"\n\tqbt_workflow_override[libtorrent]=\"no\"\n\tqbt_workflow_override[qtbase]=\"no\"\n\tqbt_workflow_override[qttools]=\"no\"\n\tqbt_workflow_override[qbittorrent]=\"no\"\n\t##########################################################################################################################################################\n\t# Configure the default source type we use for the download function\n\t##########################################################################################################################################################\n\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\tsource_default[cmake_ninja]=\"file\"\n\t\tsource_default[glibc]=\"file\"\n\tfi\n\tsource_default[zlib]=\"file\"\n\tsource_default[iconv]=\"file\"\n\tsource_default[icu]=\"file\"\n\tsource_default[double_conversion]=\"file\"\n\tsource_default[openssl]=\"file\"\n\tsource_default[boost]=\"file\"\n\tsource_default[libtorrent]=\"file\"\n\tsource_default[qtbase]=\"file\"\n\tsource_default[qttools]=\"file\"\n\tsource_default[qbittorrent]=\"file\"\n\t##########################################################################################################################################################\n\t#\n\t##########################################################################################################################################################\n\treturn\n}\n#######################################################################################################################################################\n# This function verifies the module names from the array qbt_modules in the default values function.\n#######################################################################################################################################################\n_installation_modules() {\n\t# Delete modules - using the the delete array to unset them from the qbt_modules array\n\tfor target in \"${delete[@]}\"; do\n\t\tfor deactivated in \"${!qbt_modules[@]}\"; do\n\t\t\t[[ \"${qbt_modules[${deactivated}]}\" == \"${target}\" ]] && unset 'qbt_modules[${deactivated}]'\n\t\tdone\n\tdone\n\tunset target deactivated\n\n\t# For any modules params passed, test that they exist in the qbt_modules array or set qbt_modules_test to fail\n\tfor passed_params in \"${@}\"; do\n\t\tif [[ ! \"${qbt_modules[*]}\" =~ (^|[^[:alpha:]])${passed_params}([^[:alpha:]]|$) ]]; then\n\t\t\tqbt_modules_test=\"fail\"\n\t\tfi\n\tdone\n\tunset passed_params\n\n\tif [[ \"${qbt_modules_test}\" != 'fail' && \"${#}\" -ne '0' ]]; then\n\t\tif [[ \"${1}\" == \"all\" ]]; then\n\t\t\t# If all is passed as a module and once the params check = pass has triggered this condition, remove to from the qbt_modules array to leave only the modules to be activated\n\t\t\tunset 'qbt_modules[0]'\n\t\t\t# Rebuild the qbt_modules array so it is indexed starting from 0 after we have modified and removed items from it previously.\n\t\t\tqbt_modules=(\"${qbt_modules[@]}\")\n\t\telse # Only activate the module passed as a param and leave the rest defaulted to skip\n\t\t\tunset 'qbt_modules[0]'\n\t\t\tread -ra qbt_modules_skipped <<< \"${qbt_modules[@]}\"\n\t\t\tdeclare -gA skip_modules\n\t\t\tfor selected in \"${@}\"; do\n\t\t\t\tfor full_list in \"${!qbt_modules_skipped[@]}\"; do\n\t\t\t\t\t[[ \"${selected}\" == \"${qbt_modules_skipped[full_list]}\" ]] && qbt_modules_skipped[full_list]=\"${color_magenta_light}${selected}${color_end}\"\n\t\t\t\tdone\n\t\t\tdone\n\t\t\tunset selected\n\t\t\tqbt_modules=(\"${@}\")\n\t\tfi\n\n\t\tfor modules_skip in \"${qbt_modules[@]}\"; do\n\t\t\tskip_modules[\"${modules_skip}\"]=\"no\"\n\t\tdone\n\t\tunset modules_skip\n\n\t\t# Create the directories we need.\n\t\tmkdir -p \"${qbt_install_dir}/logs\"\n\t\tmkdir -p \"${PKG_CONFIG_PATH}\"\n\t\tmkdir -p \"${qbt_install_dir}/completed\"\n\n\t\t# Set some python variables we need.\n\t\tpython_major=\"$(python\"${qbt_python_version}\" -c \"import sys; print(sys.version_info[0])\")\"\n\t\tpython_minor=\"$(python\"${qbt_python_version}\" -c \"import sys; print(sys.version_info[1])\")\"\n\n\t\tpython_short_version=\"${python_major}.${python_minor}\"\n\n\t\tprintf '%b\\n' \"using gcc : : : <cflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} <cxxflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ;${text_newline}using python : ${python_short_version} : /usr/bin/python${python_short_version} : /usr/include/python${python_short_version} : /usr/lib/python${python_short_version} ;\" > \"${HOME}/user-config.jam\"\n\n\t\t# printf the build directory.\n\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle}${text_bold} Install Prefix${color_end} : ${color_cyan_light}${qbt_install_dir_short}${color_end}\"\n\n\t\t# Some basic help\n\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle}${text_bold} Script help${color_end} : ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-h${color_end}\"\n\tfi\n}\n#######################################################################################################################################################\n# This function will test to see if a Jamfile patch file exists via the variable patches_github_url for the tag used.\n#######################################################################################################################################################\n_apply_patches() {\n\t[[ -n \"${1}\" ]] && app_name=\"${1}\"\n\t# Start to define the default master branch we will use by transforming the app_version[libtorrent] variable to underscores. The result is dynamic and can be: RC_1_0, RC_1_1, RC_1_2, RC_2_0 and so on.\n\tdefault_jamfile=\"${app_version[libtorrent]//./\\_}\"\n\n\t# Remove everything after second underscore. Occasionally the tag will be short, like v2.0 so we need to make sure not remove the underscore if there is only one present.\n\tif [[ $(grep -o '_' <<< \"${default_jamfile}\" | wc -l) -le 1 ]]; then\n\t\tdefault_jamfile=\"RC_${default_jamfile}\"\n\telif [[ $(grep -o '_' <<< \"${default_jamfile}\" | wc -l) -ge 2 ]]; then\n\t\tdefault_jamfile=\"RC_${default_jamfile%_*}\"\n\tfi\n\n\tif [[ \"${app_name}\" == \"bootstrap\" ]]; then\n\t\tfor module_patch in \"${qbt_modules[@]}\"; do\n\t\t\t[[ -n \"${app_version[\"${module_patch}\"]}\" ]] && mkdir -p \"${qbt_install_dir}/patches/${module_patch}/${app_version[\"${module_patch}\"]}/source\"\n\t\tdone\n\t\tunset module_patch\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} Using the defaults, these directories have been created:${color_end}\"\n\n\t\tfor patch_info in \"${qbt_modules[@]}\"; do\n\t\t\t[[ -n \"${app_version[\"${patch_info}\"]}\" ]] && printf '%b\\n' \" ${color_cyan_light} ${qbt_install_dir_short}/patches/${patch_info}/${app_version[\"${patch_info}\"]}${color_end}\"\n\t\tdone\n\t\tunset patch_info\n\t\tprintf '\\n%b\\n' \" ${unicode_cyan_circle} If a patch file, named ${color_cyan_light}patch${color_end} is found in these directories it will be applied to the relevant module with a matching tag.\"\n\telse\n\t\tpatch_dir=\"${qbt_install_dir}/patches/${app_name}/${app_version[${app_name}]}\"\n\n\t\t# local\n\t\tpatch_file=\"${patch_dir}/patch\"\n\t\tpatch_url_file=\"${patch_dir}/url\" # A file with a url to raw patch info\n\t\t# remote\n\t\tqbt_patches_url_branch=\"$(_git_git ls-remote -q --symref \"https://github.com/${qbt_patches_url}\" HEAD | awk '/^ref:/{sub(\"refs/heads/\", \"\", $2); print $2}')\"\n\t\t# qbt_patches_url_branch=\"$(_curl -sL \"https://github.com/${qbt_patches_url}\" | sed -n 's/.*\"defaultBranch\":\"\\([^\"]*\\)\".*/\\1/p')\"\n\t\tpatch_file_remote=\"https://raw.githubusercontent.com/${qbt_patches_url}/${qbt_patches_url_branch}/patches/${app_name}/${app_version[${app_name}]}\"\n\n\t\tif [[ \"${app_name}\" == \"libtorrent\" ]]; then\n\t\t\tpatch_jamfile=\"${patch_dir}/Jamfile\"\n\t\t\tpatch_jamfile_url=\"https://raw.githubusercontent.com/${qbt_patches_url}/${qbt_patches_url_branch}/patches/${app_name}/${app_version[${app_name}]}/Jamfile\"\n\t\tfi\n\n\t\t# Order of patch file preference\n\t\t# 1. Local patch file - A custom patch file in the module version folder matching the build configuration\n\t\t# 2. Local url file - A custom url to a raw patch file in the module version folder matching the build configuration\n\t\t# 3. Remote patch file using the patch_file_remote/patch - A custom url to a raw patch file\n\t\t# 4. Remote url file using patch_file_remote/url - A url to a raw patch file in the patch repo\n\n\t\t[[ \"${source_default[${app_name}]}\" == \"folder\" && ! -d \"${qbt_cache_dir}/${app_name}\" ]] && printf '\\n' # cosmetics\n\n\t\t_patch_url() {\n\t\t\tpatch_url=\"$(< \"${patch_url_file}\")\"\n\t\t\tif _curl --create-dirs \"${patch_url}\" -o \"${patch_file}\"; then\n\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}remote:url${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_yellow_light}${patch_url}${color_end}\"\n\t\t\tfi\n\t\t}\n\n\t\tif [[ -f \"${patch_file}\" ]]; then # If the patch file exists in the module version folder matching the build configuration then use this.\n\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}local:patch${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_cyan_light}${patch_file}${color_end}\"\n\t\telif [[ -f \"${patch_url_file}\" ]]; then # If a remote URL file exists in the module version folder matching the build configuration then use this to create the patch file for the next check\n\t\t\t_patch_url\n\t\telse # Else check that if there is a remotely host patch file available in the patch repo\n\t\t\tif _curl --create-dirs \"${patch_file_remote}/patch\" -o \"${patch_file}\"; then\n\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle} ${color_red}Patching${color_end} from ${color_red_light}remote:patch${color_end} - ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${app_version[${app_name}]}${color_end} - ${color_yellow_light}${patch_file_remote}/patch${color_end}\"\n\t\t\telif _curl --create-dirs \"${patch_file_remote}/url\" -o \"${patch_url_file}\"; then\n\t\t\t\t_patch_url\n\t\t\tfi\n\t\tfi\n\n\t\t# Libtorrent specific stuff\n\t\tif [[ \"${app_name}\" == \"libtorrent\" ]]; then\n\t\t\tif [[ \"${qbt_libtorrent_master_jamfile}\" == \"yes\" ]]; then\n\t\t\t\t_curl --create-dirs \"https://raw.githubusercontent.com/arvidn/libtorrent/${default_jamfile}/Jamfile\" -o \"${qbt_dl_folder_path}/${patch_jamfile##*/}\"\n\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle}${color_red} Using libtorrent branch master Jamfile file${color_end}\"\n\t\t\telif [[ -f \"${patch_dir}/Jamfile\" ]]; then\n\t\t\t\tcp -f \"${patch_dir}/Jamfile\" \"${qbt_dl_folder_path}/${patch_jamfile##*/}\"\n\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle}${color_red} Using existing custom Jamfile file${color_end}\"\n\t\t\telse\n\t\t\t\tif _curl --create-dirs \"${patch_jamfile_url}\" -o \"${qbt_dl_folder_path}/${patch_jamfile##*/}\"; then\n\t\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle}${color_red} Using downloaded custom Jamfile file${color_end}\"\n\t\t\t\telse\n\t\t\t\t\tprintf '%b\\n\\n' \" ${unicode_green_circle}${color_red} Using libtorrent ${github_tag[libtorrent]} Jamfile file${color_end}\"\n\t\t\t\tfi\n\t\t\tfi\n\t\tfi\n\n\t\t# Patch files\n\t\tif [[ -f \"${patch_file}\" ]]; then\n\t\t\tpatch -p1 < \"${patch_file}\"\n\t\tfi\n\n\t\t# Copy modified files from source directory\n\t\tif [[ -d \"${patch_dir}/source\" && \"$(ls -A \"${patch_dir}/source\")\" ]]; then\n\t\t\tprintf '%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}Copying files from patch source dir${color_end}\"\n\t\t\tcp -rf \"${patch_dir}/source/\". \"${qbt_dl_folder_path}/\"\n\t\tfi\n\tfi\n}\n#######################################################################################################################################################\n# A unified download function to handle the processing of various options and directions the script can take.\n#######################################################################################################################################################\n_download() {\n\t_pushd \"${qbt_install_dir}\"\n\n\t[[ -n \"${1}\" ]] && app_name=\"${1}\"\n\n\t# The location we download source archives and folders to\n\tqbt_dl_dir=\"${qbt_install_dir}\"\n\tqbt_dl_file_path=\"${qbt_dl_dir}/${app_name}.tar.xz\"\n\tqbt_dl_folder_path=\"${qbt_dl_dir}/${app_name}\"\n\n\tif [[ \"${qbt_workflow_files}\" == \"no\" ]] || [[ \"${qbt_workflow_override[${app_name}]}\" == \"yes\" ]]; then\n\t\tqbt_dl_source_url=\"${source_archive_url[${app_name}]}\"\n\t\tsource_type=\"source\"\n\tfi\n\n\tif [[ \"${qbt_workflow_files}\" == \"yes\" && \"${qbt_workflow_override[${app_name}]}\" == \"no\" ]] || [[ \"${qbt_workflow_artifacts}\" == 'yes' ]]; then\n\t\tqbt_dl_source_url=\"${qbt_workflow_archive_url[${app_name}]}\"\n\t\t[[ \"${qbt_workflow_files}\" == \"yes\" ]] && source_type=\"workflow\"\n\t\t[[ \"${qbt_workflow_artifacts}\" == \"yes\" ]] && source_type=\"artifact\"\n\tfi\n\n\t[[ -n \"${qbt_cache_dir}\" ]] && _cache_dirs\n\t[[ \"${source_default[${app_name}]}\" == \"file\" ]] && _download_file\n\t[[ \"${source_default[${app_name}]}\" == \"folder\" ]] && _download_folder\n\n\treturn 0\n}\n#######################################################################################################################################################\n#\n#######################################################################################################################################################\n_cache_dirs() {\n\t# If the path is not starting with / then make it a full path by prepending the qbt_working_dir path\n\tif [[ ! \"${qbt_cache_dir}\" =~ ^/ ]]; then\n\t\tqbt_cache_dir=\"${qbt_working_dir}/${qbt_cache_dir}\"\n\tfi\n\n\tqbt_dl_dir=\"${qbt_cache_dir}\"\n\tqbt_dl_file_path=\"${qbt_dl_dir}/${app_name}.tar.xz\"\n\tqbt_dl_folder_path=\"${qbt_dl_dir}/${app_name}\"\n\n\tif [[ \"${qbt_workflow_files}\" == \"yes\" && \"${qbt_workflow_override[${app_name}]}\" == \"no\" || \"${app_name}\" == \"cmake_ninja\" ]]; then\n\t\tsource_default[\"${app_name}\"]=\"file\"\n\telif [[ \"${qbt_cache_dir_options}\" == \"bs\" || -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tsource_default[\"${app_name}\"]=\"folder\"\n\tfi\n\n\treturn\n}\n#######################################################################################################################################################\n# This function is for downloading git releases based on their tag.\n#######################################################################################################################################################\n_download_folder() {\n\t# Set this to avoid some warning when cloning some modules\n\t_git_git config --global advice.detachedHead false\n\n\t# If not using artifacts remove the source files in the build directory if present before we download or copy them again\n\t[[ -d \"${qbt_install_dir}/${app_name}\" ]] && rm -rf \"${qbt_install_dir}/${app_name:?}\"\n\t[[ -d \"${qbt_install_dir}/include/${app_name}\" ]] && rm -rf \"${qbt_install_dir}/include/${app_name:?}\"\n\n\t# if there IS NOT and app_name cache directory present in the path provided and we are bootstrapping then use this echo\n\tif [[ \"${qbt_cache_dir_options}\" == \"bs\" && ! -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Caching ${color_magenta_light}${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${color_cyan_light}${qbt_dl_folder_path}${color_end}${color_end} from ${color_yellow_light}${color_yellow_light}${github_url[${app_name}]}${color_end}\"\n\tfi\n\n\t# if cache dir is on and the app_name folder does not exist then get folder via cloning default source\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" && ! -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Downloading ${color_magenta_light}${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${color_cyan_light}${qbt_dl_folder_path}${color_end}${color_end} from ${color_yellow_light}${color_yellow_light}${github_url[${app_name}]}${color_end}\"\n\tfi\n\n\tif [[ ! -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tif [[ \"${app_name}\" =~ qttools ]]; then\n\t\t\t_git clone --no-tags --single-branch --branch \"${github_tag[${app_name}]}\" -j\"$(nproc)\" --depth 1 \"${github_url[${app_name}]}\" \"${qbt_dl_folder_path}\"\n\t\t\t_pushd \"${qbt_dl_folder_path}\"\n\t\t\tgit submodule update --force --recursive --init --remote --depth=1 --single-branch\n\t\t\t_popd\n\t\telse\n\t\t\t_git clone --no-tags --single-branch --branch \"${github_tag[${app_name}]}\" --shallow-submodules --recurse-submodules -j\"$(nproc)\" --depth 1 \"${github_url[${app_name}]}\" \"${qbt_dl_folder_path}\"\n\t\tfi\n\tfi\n\n\t# if there IS a app_name cache directory present in the path provided and we are bootstrapping then use this\n\tif [[ \"${qbt_cache_dir_options}\" == \"bs\" && -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_green_circle} ${color_blue_light}${app_name}${color_end} - Updating directory ${color_cyan_light}${qbt_dl_folder_path}${color_end}\"\n\t\t_pushd \"${qbt_dl_folder_path}\"\n\n\t\tif git ls-remote -qh --refs --exit-code \"${github_url[${app_name}]}\" \"${github_tag[${app_name}]}\" &> /dev/null; then\n\t\t\t_git_git fetch origin \"${github_tag[${app_name}]}:${github_tag[${app_name}]}\" --no-tags --depth=1 --recurse-submodules --update-head-ok\n\t\tfi\n\n\t\tif git ls-remote -qt --refs --exit-code \"${github_url[${app_name}]}\" \"${github_tag[${app_name}]}\" &> /dev/null; then\n\t\t\t_git_git fetch origin tag \"${github_tag[${app_name}]}\" --no-tags --depth=1 --recurse-submodules --update-head-ok\n\t\tfi\n\n\t\t_git_git checkout \"${github_tag[${app_name}]}\"\n\t\t_popd\n\tfi\n\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" && -n \"${qbt_cache_dir}\" && -d \"${qbt_dl_folder_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Copying ${color_magenta_light}${app_name}${color_end} from cache ${color_cyan_light}${qbt_cache_dir}/${app_name}${color_end} with tag ${color_yellow_light}${github_tag[${app_name}]}${color_end} to ${color_cyan_light}${qbt_install_dir}/${app_name}${color_end}\"\n\t\tcp -rf \"${qbt_dl_folder_path}\" \"${qbt_install_dir}/\"\n\tfi\n\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/${app_name}${sub_dir}\"\n\t\t_pushd \"${qbt_install_dir}/${app_name}${sub_dir}\"\n\tfi\n\n\tprintf '%s' \"${github_url[${app_name}]}\" |& _tee \"${qbt_install_dir}/logs/${app_name}_github_url.log\" > /dev/null\n\n\treturn\n}\n#######################################################################################################################################################\n# This function is for downloading source code archives\n#######################################################################################################################################################\n_download_file() {\n\tif [[ -f \"${qbt_dl_file_path}\" && \"${qbt_workflow_artifacts}\" == \"no\" ]]; then\n\t\t# This checks that the archive is not corrupt or empty checking for a top level folder and exiting if there is no result i.e. the archive is empty - so that we do rm and empty substitution\n\t\t_cmd grep -Eqom1 \"(.*)[^/]\" <(tar tf \"${qbt_dl_file_path}\")\n\t\t# delete any existing extracted archives and archives\n\t\trm -rf {\"${qbt_install_dir:?}/$(tar tf \"${qbt_dl_file_path}\" | grep -Eom1 \"(.*)[^/]\")\",\"${qbt_install_dir}/${app_name}.tar.xz\"}\n\t\t[[ -d \"${qbt_install_dir}/${app_name}\" ]] && rm -rf \"${qbt_install_dir}/${app_name:?}\"\n\t\t[[ -d \"${qbt_install_dir}/include/${app_name}\" ]] && rm -rf \"${qbt_install_dir}/include/${app_name:?}\"\n\tfi\n\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" && ! -f \"${qbt_dl_file_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Downloading ${color_magenta_light}${app_name}${color_end} using ${color_yellow_light}${source_type}${color_end} files to ${color_cyan_light}${qbt_dl_file_path}${color_end} - ${color_yellow_light}${qbt_dl_source_url}${color_end}\"\n\telif [[ -n \"${qbt_cache_dir}\" && \"${qbt_cache_dir_options}\" == \"bs\" && ! -f \"${qbt_dl_file_path}\" ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Caching ${color_magenta_light}${app_name}${color_end} ${color_yellow_light}${source_type}${color_end} files to ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end} - ${color_yellow_light}${qbt_dl_source_url}${color_end}\"\n\telif [[ -n \"${qbt_cache_dir}\" && \"${qbt_cache_dir_options}\" == \"bs\" && -f \"${qbt_dl_file_path}\" ]]; then\n\t\t[[ \"${qbt_cache_dir_options}\" == \"bs\" ]] && printf '\\n%b\\n' \" ${unicode_blue_light_circle} Updating ${color_magenta_light}${app_name}${color_end} cached ${color_yellow_light}${source_type}${color_end} files from - ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end}\"\n\telif [[ -n \"${qbt_cache_dir}\" && \"${qbt_cache_dir_options}\" != \"bs\" && -f \"${qbt_dl_file_path}\" ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Extracting ${color_magenta_light}${app_name}${color_end} cached ${color_yellow_light}${source_type}${color_end} files from - ${color_cyan_light}${qbt_cache_dir}/${app_name}.tar.xz${color_end}\"\n\tfi\n\n\tif [[ \"${qbt_workflow_artifacts}\" == \"no\" ]]; then\n\t\t# download the remote source file using curl\n\t\tif [[ \"${qbt_cache_dir_options}\" = \"bs\" || ! -f \"${qbt_dl_file_path}\" ]]; then\n\t\t\t_curl --create-dirs \"${qbt_dl_source_url}\" -o \"${qbt_dl_file_path}\"\n\t\tfi\n\tfi\n\n\t# Set the extracted dir name to a var to easily use or remove it\n\tqbt_dl_folder_path=\"${qbt_install_dir}/$(tar tf \"${qbt_dl_file_path}\" | head -1 | cut -f1 -d\"/\")\"\n\n\tprintf '%b\\n' \"${qbt_dl_source_url}\" |& _tee \"${qbt_install_dir}/logs/${app_name}_${source_type}_archive_url.log\" > /dev/null\n\n\t[[ \"${app_name}\" == \"cmake_ninja\" ]] && additional_cmds=(\"--strip-components=1\")\n\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" ]]; then\n\t\t_cmd tar xf \"${qbt_dl_file_path}\" -C \"${qbt_install_dir}\" \"${additional_cmds[@]}\"\n\t\t# we don't need to cd into the boost if we download it via source archives\n\n\t\tif [[ \"${app_name}\" == \"cmake_ninja\" ]]; then\n\t\t\t_delete_function\n\t\telse\n\t\t\tmkdir -p \"${qbt_dl_folder_path}${sub_dir}\"\n\t\t\t_pushd \"${qbt_dl_folder_path}${sub_dir}\"\n\t\tfi\n\tfi\n\n\tunset additional_cmds\n\treturn\n}\n#######################################################################################################################################################\n# static lib link fix: check for *.so and *.a versions of a lib in the $lib_dir and change the *.so link to point to the static lib e.g. libdl.a\n#######################################################################################################################################################\n_fix_static_links() {\n\tlog_name=\"${app_name}\"\n\tmapfile -t library_list < <(find \"${lib_dir}\" -maxdepth 1 -exec bash -c 'basename \"$0\" \".${0##*.}\"' {} \\; | sort | uniq -d)\n\tfor file in \"${library_list[@]}\"; do\n\t\tif [[ \"$(readlink \"${lib_dir}/${file}.so\")\" != \"${file}.a\" ]]; then\n\t\t\tln -fsn \"${file}.a\" \"${lib_dir}/${file}.so\"\n\t\t\tprintf '%b\\n' \"${lib_dir}${file}.so changed to point to ${file}.a\" |& _tee -a \"${qbt_install_dir}/logs/${log_name}-fix-static-links.log\" > /dev/null\n\t\tfi\n\tdone\n\treturn\n}\n_fix_multiarch_static_links() {\n\tif [[ -d \"${qbt_install_dir}/${qbt_cross_host}\" ]]; then\n\t\tlog_name=\"${app_name}\"\n\t\tmultiarch_lib_dir=\"${qbt_install_dir}/${qbt_cross_host}/lib\"\n\t\tmapfile -t library_list < <(find \"${multiarch_lib_dir}\" -maxdepth 1 -exec bash -c 'basename \"$0\" \".${0##*.}\"' {} \\; | sort | uniq -d)\n\t\tfor file in \"${library_list[@]}\"; do\n\t\t\tif [[ \"$(readlink \"${multiarch_lib_dir}/${file}.so\")\" != \"${file}.a\" ]]; then\n\t\t\t\tln -fsn \"${file}.a\" \"${multiarch_lib_dir}/${file}.so\"\n\t\t\t\tprintf '%b\\n' \"${multiarch_lib_dir}${file}.so changed to point to ${file}.a\" |& _tee -a \"${qbt_install_dir}/logs/${log_name}-fix-static-links.log\" > /dev/null\n\t\t\tfi\n\t\tdone\n\t\treturn\n\tfi\n}\n#######################################################################################################################################################\n# This function is for removing files and folders we no longer need\n#######################################################################################################################################################\n_delete_function() {\n\t[[ \"${app_name}\" != \"cmake_ninja\" ]] && printf '\\n'\n\tif [[ \"${qbt_skip_delete}\" != \"yes\" ]]; then\n\t\tprintf '%b\\n' \" ${unicode_green_circle}${color_red_light} Deleting ${app_name} uncached installation files and folders${color_end}\"\n\t\t[[ -f \"${qbt_dl_file_path}\" && \"${qbt_workflow_artifacts}\" == \"no\" ]] && rm -rf {\"${qbt_install_dir:?}/$(tar tf \"${qbt_dl_file_path}\" | grep -Eom1 \"(.*)[^/]\")\",\"${qbt_install_dir}/${app_name}.tar.xz\"}\n\t\t[[ -d \"${qbt_dl_folder_path}\" ]] && rm -rf \"${qbt_install_dir}/${app_name:?}\"\n\t\t_pushd \"${qbt_working_dir}\"\n\telse\n\t\tprintf '%b\\n' \" ${unicode_yellow_circle}${color_red_light} Skipping ${app_name} deletion${color_end}\"\n\tfi\n}\n#######################################################################################################################################################\n# cmake installation\n#######################################################################################################################################################\n_cmake() {\n\tif [[ \"${qbt_build_tool}\" == 'cmake' ]]; then\n\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} ${color_blue_light}Checking if cmake and ninja need to be installed${color_end}\"\n\t\tmkdir -p \"${qbt_install_dir}/bin\"\n\n\t\tif [[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]]; then\n\t\t\tif [[ \"$(cmake --version 2> /dev/null | awk 'NR==1{print $3}')\" != \"${app_version[cmake_debian]}\" ]]; then\n\t\t\t\t_download cmake_ninja\n\t\t\t\t_post_command \"Debian cmake and ninja installation\"\n\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Using cmake: ${color_yellow_light}${app_version[cmake_debian]}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Using ninja: ${color_yellow_light}${app_version[ninja_debian]}\"\n\t\t\tfi\n\t\tfi\n\n\t\tif [[ \"${os_id}\" =~ ^(alpine)$ ]]; then\n\t\t\tif [[ \"$(\"${qbt_install_dir}/bin/ninja\" --version 2> /dev/null | sed 's/\\.git//g')\" != \"${app_version[ninja]}\" ]]; then\n\t\t\t\t_curl \"https://github.com/userdocs/qbt-ninja-build/releases/latest/download/ninja-$(apk info --print-arch)\" -o \"${qbt_install_dir}/bin/ninja\"\n\t\t\t\t_post_command ninja\n\t\t\t\tchmod 700 \"${qbt_install_dir}/bin/ninja\"\n\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Using cmake: ${color_yellow_light}${app_version[cmake]}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Using ninja: ${color_yellow_light}${app_version[ninja]}\"\n\t\t\tfi\n\t\tfi\n\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} ${color_green_light}cmake and ninja are installed and ready to use${color_end}\"\n\tfi\n\t_pushd \"${qbt_working_dir}\"\n}\n#######################################################################################################################################################\n# This function handles the Multi Arch dynamics of the script.\n#######################################################################################################################################################\n_multi_arch() {\n\tif [[ \"${multi_arch_options[${qbt_cross_name:-default}]}\" == \"${qbt_cross_name}\" ]]; then\n\t\tif [[ \"${os_id}\" =~ ^(alpine|debian|ubuntu)$ ]]; then\n\t\t\t[[ \"${1}\" != \"bootstrap\" ]] && printf '\\n%b\\n' \" ${unicode_green_circle}${color_yellow_light} Using multiarch - arch: ${qbt_cross_name} host: ${os_id} target: ${qbt_cross_target}${color_end}\"\n\t\t\tcase \"${qbt_cross_name}\" in\n\t\t\t\tarmel)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"arm-linux-musleabi\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"armv5\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"arm-linux-gnueabi\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tcross_arch=\"armel\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-arm\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-armv4\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-arm-gnueabi-g++\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tarmhf)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tcross_arch=\"armhf\"\n\t\t\t\t\t\t\tqbt_cross_host=\"arm-linux-musleabihf\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"armv6\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tcross_arch=\"armel\"\n\t\t\t\t\t\t\tqbt_cross_host=\"arm-linux-gnueabihf\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-arm\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-armv4\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-arm-gnueabi-g++\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tarmv7)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tcross_arch=\"armv7\"\n\t\t\t\t\t\t\tqbt_cross_host=\"armv7l-linux-musleabihf\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"armv7\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tcross_arch=\"armhf\"\n\t\t\t\t\t\t\tqbt_cross_host=\"arm-linux-gnueabihf\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-arm\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-armv4\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-arm-gnueabi-g++\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\taarch64)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tcross_arch=\"aarch64\"\n\t\t\t\t\t\t\tqbt_cross_host=\"aarch64-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"aarch64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tcross_arch=\"arm64\"\n\t\t\t\t\t\t\tqbt_cross_host=\"aarch64-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-arm\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-aarch64\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-aarch64-gnu-g++\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tx86_64)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tcross_arch=\"x86_64\"\n\t\t\t\t\t\t\tqbt_cross_host=\"x86_64-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"x86_64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tcross_arch=\"amd64\"\n\t\t\t\t\t\t\tqbt_cross_host=\"x86_64-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-x86_64\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tx86)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tcross_arch=\"x86\"\n\t\t\t\t\t\t\tqbt_cross_host=\"i686-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"i686\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tcross_arch=\"i386\"\n\t\t\t\t\t\t\tqbt_cross_host=\"i686-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-x86\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-32\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\ts390x)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"s390x-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"s390x\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"s390x-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tcross_arch=\"s390x\"\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-s390x\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux64-s390x\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tpowerpc)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"powerpc-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"ppc\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"powerpc-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tcross_arch=\"powerpc\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-ppc\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-ppc\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-32\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tppc64el)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"powerpc64le-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"ppc64el\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"powerpc64le-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tcross_arch=\"ppc64el\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-ppc64el\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-ppc64le\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tmips)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"mips\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tcross_arch=\"mips\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-mips\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-mips32\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-32\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tmipsel)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"mipsel-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"mipsel\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"mipsel-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"32\"\n\t\t\t\t\t\t\tcross_arch=\"mipsel\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-mipsel\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux-mips32\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-32\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tmips64)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips64-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"mips64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips64-linux-gnuabi64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tcross_arch=\"mips64\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-mips64\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux64-mips64\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\tmips64el)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips64el-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"mips64el\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian | ubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"mips64el-linux-gnuabi64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tcross_arch=\"mips64el\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-mips64el\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux64-mips64\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\t\triscv64)\n\t\t\t\t\tcase \"${qbt_cross_target}\" in\n\t\t\t\t\t\talpine)\n\t\t\t\t\t\t\tqbt_cross_host=\"riscv64-linux-musl\"\n\t\t\t\t\t\t\tqbt_zlib_arch=\"riscv64\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\tdebian)\n\t\t\t\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} The arch ${color_yellow_light}${qbt_cross_name}${color_end} can only be cross built on and Alpine OS Host\"\n\t\t\t\t\t\t\texit 1\n\t\t\t\t\t\t\t;;\n\t\t\t\t\t\tubuntu)\n\t\t\t\t\t\t\tqbt_cross_host=\"riscv64-linux-gnu\"\n\t\t\t\t\t\t\t;;&\n\t\t\t\t\t\t*)\n\t\t\t\t\t\t\tbitness=\"64\"\n\t\t\t\t\t\t\tcross_arch=\"riscv64\"\n\t\t\t\t\t\t\tqbt_cross_boost=\"gcc-riscv64\"\n\t\t\t\t\t\t\tqbt_cross_openssl=\"linux64-riscv64\"\n\t\t\t\t\t\t\tqbt_cross_qtbase=\"linux-g++-64\"\n\t\t\t\t\t\t\t;;\n\t\t\t\t\tesac\n\t\t\t\t\t;;\n\t\t\tesac\n\n\t\t\t[[ \"${1}\" == 'info_bootstrap' ]] && return\n\n\t\t\texport CHOST=\"${qbt_cross_host}\"\n\t\t\texport CC=\"${qbt_cross_host}-gcc\"\n\t\t\texport AR=\"${qbt_cross_host}-ar\"\n\t\t\texport CXX=\"${qbt_cross_host}-g++\"\n\n\t\t\tmkdir -p \"${qbt_install_dir}/logs\"\n\n\t\t\tif [[ \"${1}\" == 'bootstrap' || \"${qbt_cache_dir_options}\" == \"bs\" ]] && [[ -f \"${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz\" ]]; then\n\t\t\t\trm -f \"${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz\"\n\t\t\tfi\n\n\t\t\tif [[ \"${qbt_cross_target}\" =~ ^(alpine)$ ]]; then\n\t\t\t\tif [[ \"${1}\" == 'bootstrap' || \"${qbt_cache_dir_options}\" == \"bs\" || ! -f \"${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz\" ]]; then\n\t\t\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Downloading ${color_magenta_light}${qbt_cross_host}.tar.gz${color_end} cross tool chain - ${color_cyan_light}https://github.com/userdocs/qbt-musl-cross-make/releases/latest/download/${qbt_cross_host}.tar.xz${color_end}\"\n\t\t\t\t\t_curl --create-dirs \"https://github.com/userdocs/qbt-musl-cross-make/releases/latest/download/${qbt_cross_host}.tar.xz\" -o \"${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz\"\n\t\t\t\telse\n\t\t\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Extracting ${color_magenta_light}${qbt_cross_host}.tar.gz${color_end} cross tool chain - ${color_cyan_light}${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.xz${color_end}\"\n\t\t\t\tfi\n\n\t\t\t\ttar xf \"${qbt_cache_dir:-${qbt_install_dir}}/${qbt_cross_host}.tar.gz\" --strip-components=1 -C \"${qbt_install_dir}\"\n\n\t\t\t\t_fix_multiarch_static_links \"${qbt_cross_host}\"\n\t\t\tfi\n\n\t\t\tmulti_glibc=(\"--host=${qbt_cross_host}\")                                                # ${multi_glibc[@]}\n\t\t\tmulti_iconv=(\"--host=${qbt_cross_host}\")                                                # ${multi_iconv[@]}\n\t\t\tmulti_icu=(\"--host=${qbt_cross_host}\" \"-with-cross-build=${qbt_install_dir}/icu/cross\") # ${multi_icu[@]}\n\t\t\tmulti_openssl=(\"./Configure\" \"${qbt_cross_openssl}\")                                    # ${multi_openssl[@]}\n\t\t\tmulti_qtbase=(\"-xplatform\" \"${qbt_cross_qtbase}\")                                       # ${multi_qtbase[@]}\n\n\t\t\tif [[ \"${qbt_build_tool}\" == 'cmake' ]]; then\n\t\t\t\tmulti_libtorrent=(\"-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++\")        # ${multi_libtorrent[@]}\n\t\t\t\tmulti_double_conversion=(\"-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++\") # ${multi_double_conversion[@]}\n\t\t\t\tmulti_qbittorrent=(\"-D CMAKE_CXX_COMPILER=${qbt_cross_host}-g++\")       # ${multi_qbittorrent[@]}\n\t\t\telse\n\t\t\t\tprintf '%b\\n' \"using gcc : ${qbt_cross_boost#gcc-} : ${qbt_cross_host}-g++ : <cflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} <cxxflags>${qbt_optimize/*/${qbt_optimize} }-std=${qbt_cxx_standard} ;${text_newline}using python : ${python_short_version} : /usr/bin/python${python_short_version} : /usr/include/python${python_short_version} : /usr/lib/python${python_short_version} ;\" > \"${HOME}/user-config.jam\"\n\t\t\t\tmulti_libtorrent=(\"toolset=${qbt_cross_boost:-gcc}\") # ${multi_libtorrent[@]}\n\t\t\t\tmulti_qbittorrent=(\"--host=${qbt_cross_host}\")       # ${multi_qbittorrent[@]}\n\t\t\tfi\n\t\t\treturn\n\t\telse\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} Multiarch only works with Alpine Linux (native or docker)${color_end}\"\n\t\t\texit 1\n\t\tfi\n\telse\n\t\tmulti_openssl=(\"./config\") # ${multi_openssl[@]}\n\t\treturn\n\tfi\n}\n#######################################################################################################################################################\n# Github Actions release info\n#######################################################################################################################################################\n_release_info() {\n\t_error_tag\n\n\tprintf '\\n%b\\n' \" ${unicode_green_circle} ${color_yellow_light}Release boot-strapped${color_end}\"\n\n\trelease_info_dir=\"${qbt_install_dir}/release_info\"\n\n\tmkdir -p \"${release_info_dir}\"\n\n\tcat > \"${release_info_dir}/tag.md\" <<- TAG_INFO\n\t\t${github_tag[qbittorrent]}_${github_tag[libtorrent]}\n\tTAG_INFO\n\n\tcat > \"${release_info_dir}/title.md\" <<- TITLE_INFO\n\t\tqbittorrent ${app_version[qbittorrent]} libtorrent ${app_version[libtorrent]}\n\tTITLE_INFO\n\n\tif _git_git ls-remote -t --exit-code \"https://github.com/${qbt_revision_url}.git\" \"${github_tag[qbittorrent]}_${github_tag[libtorrent]}\" &> /dev/null; then\n\t\tif grep -q '\"name\": \"dependency-version.json\"' < <(_curl \"https://api.github.com/repos/${qbt_revision_url}/releases/tags/${github_tag[qbittorrent]}_${github_tag[libtorrent]}\"); then\n\t\t\tuntil _curl \"https://github.com/${qbt_revision_url}/releases/download/${github_tag[qbittorrent]}_${github_tag[libtorrent]}/dependency-version.json\" > \"${release_info_dir}/remote-dependency-version.json\"; do\n\t\t\t\tprintf '%b\\n' \"Waiting for dependency-version.json URL.\"\n\t\t\t\tsleep 2\n\t\t\tdone\n\n\t\t\tremote_revision_version=\"$(sed -rn 's|(.*)\"revision\": \"(.*)\"|\\2|p' < \"${release_info_dir}/remote-dependency-version.json\")\"\n\t\t\trm -f \"${release_info_dir}/remote-dependency-version.json\"\n\t\t\tqbt_revision_version=\"$((remote_revision_version + 1))\"\n\t\tfi\n\tfi\n\n\t# Dependency version info\n\tprintf '%b\\n' \"{\\n  \\\"openssl\\\": \\\"${app_version[openssl]}\\\",\\n  \\\"boost\\\": \\\"${app_version[boost]}\\\",\\n  \\\"libtorrent_${qbt_libtorrent_version//\\./_}\\\": \\\"${app_version[libtorrent]}\\\",\\n  \\\"qt${qt_version_short_array[0]}\\\": \\\"${app_version[qtbase]}\\\",\\n  \\\"qbittorrent\\\": \\\"${app_version[qbittorrent]}\\\",\\n  \\\"revision\\\": \\\"${qbt_revision_version:-0}\\\"\\n}\" > \"${release_info_dir}/qt${qt_version_short_array[0]}-dependency-version.json\"\n\n\t[[ ${qbt_workflow_files} == \"no\" && ${qbt_workflow_artifacts} == \"no\" ]] && source_text=\"source files - direct\"\n\t[[ ${qbt_workflow_files} == \"yes\" ]] && source_text=\"source files - workflows: [qbt-workflow-files](https://github.com/userdocs/qbt-workflow-files/releases/latest)\"\n\t[[ ${qbt_workflow_artifacts} == \"yes\" ]] && source_text=\"source files - artifacts: [qbt-workflow-files](https://github.com/userdocs/qbt-workflow-files/releases/latest)\"\n\n\tcat > \"${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md\" <<- RELEASE_INFO\n\t\t## Build info\n\n\t\t|           Components           |           Version           |\n\t\t| :----------------------------: | :-------------------------: |\n\t\t|          Qbittorrent           | ${app_version[qbittorrent]} |\n\t\t| Qt${qt_version_short_array[0]} |   ${app_version[qtbase]}    |\n\t\t|           Libtorrent           | ${app_version[libtorrent]}  |\n\t\t|             Boost              |    ${app_version[boost]}    |\n\t\t|            OpenSSL             |   ${app_version[openssl]}   |\n\t\t|            zlib-ng             |    ${app_version[zlib]}     |\n\n\t\t## Architecture and build info\n\n\t\t> [!NOTE]\n\t\t> ${source_text}\n\t\t>\n\t\t> These builds were created on Alpine linux using [custom prebuilt musl toolchains](https://github.com/userdocs/qbt-musl-cross-make/releases/latest) for:\n\tRELEASE_INFO\n\n\t{\n\t\tprintf '\\n%s\\n' \"|  Crossarch  | Alpine Cross build files | Arch config |                                                             Tuning                                                              |\"\n\t\tprintf '%s\\n' \"| :---------: | :----------------------: | :---------: | :-----------------------------------------------------------------------------------------------------------------------------: |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == armel ]] && printf '%s\\n' \"|    armel    |    arm-linux-musleabi    |   armv5te   |                       --with-arch=armv5te --with-tune=arm926ej-s --with-float=soft --with-abi=aapcs-linux                       |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == armhf ]] && printf '%s\\n' \"|    armhf    |   arm-linux-musleabihf   |   armv6zk   |              --with-arch=armv6kz --with-tune=arm1176jzf-s --with-fpu=vfpv2 --with-float=hard --with-abi=aapcs-linux             |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == armv7 ]] && printf '%s\\n' \"|    armv7    | armv7l-linux-musleabihf  |   armv7-a   | --with-arch=armv7-a --with-tune=generic-armv7-a --with-fpu=vfpv3-d16 --with-float=hard --with-abi=aapcs-linux --with-mode=thumb |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == aarch64 ]] && printf '%s\\n' \"|   aarch64   |    aarch64-linux-musl    |   armv8-a   |                                               --with-arch=armv8-a --with-abi=lp64                                               |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == x86_64 ]] && printf '%s\\n' \"|   x86_64    |    x86_64-linux-musl     |    amd64    |                                                               N/A                                                               |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == x86 ]] && printf '%s\\n' \"|     x86     |     i686-linux-musl      |    i686     |                                        --with-arch=pentium-m --with-fpmath=sse --with-tune=generic --enable-cld                 |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == s390x ]] && printf '%s\\n' \"|    s390x    |     s390x-linux-musl     |    zEC12    |                  --with-arch=z196 --with-tune=zEC12 --with-zarch --with-long-double-128 --enable-decimal-float                  |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == powerpc ]] && printf '%s\\n' \"|   powerpc   |    powerpc-linux-musl    |     ppc     |                                          --enable-secureplt --enable-decimal-float=no                                           |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == ppc64el ]] && printf '%s\\n' \"| powerpc64le |  powerpc64le-linux-musl  |    ppc64    |                 --with-abi=elfv2 --enable-secureplt --enable-decimal-float=no --enable-targets=powerpcle-linux                  |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == mips ]] && printf '%s\\n' \"|    mips     |     mips-linux-musl      |    mips32     |                               --with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32                                |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == mipsel ]] && printf '%s\\n' \"|   mipsel    |    mipsel-linux-musl     |   mips32    |                                -with-arch=mips32 --with-mips-plt --with-float=soft --with-abi=32                                |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == mips64 ]] && printf '%s\\n' \"|   mips64    |    mips64-linux-musl     |   mips64    |                      --with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64                       |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == mips64el ]] && printf '%s\\n' \"|  mips64el   |   mips64el-linux-musl    |   mips64    |                      --with-arch=mips3 --with-tune=mips64 --with-mips-plt --with-float=soft --with-abi=64                       |\"\n\t\t[[ \"${multi_arch_options[${qbt_cross_name}]}\" == riscv64 ]] && printf '%s\\n' \"|   riscv64   |    riscv64-linux-musl    |   rv64gc    |                                 --with-arch=rv64gc --with-abi=lp64d --enable-autolink-libatomic                                 |\"\n\t\tprintf '\\n'\n\t} >> \"${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md\"\n\n\tcat >> \"${release_info_dir}/qt${qt_version_short_array[0]}-${qbt_cross_name}-release.md\" <<- RELEASE_INFO\n\t\t## General Info\n\n\t\t> [!WARNING]\n\t\t> With Qbittorrent 4.4.0 onwards all cmake builds use Qt6 and all qmake builds use Qt5, as long as Qt5 is supported or qBitorrent V5 is released.\n\t\t>\n\t\t> Qbittorrent v5 won't support qmake (Qt5) builds so Qt6 (cmake) will become default and Qt5 builds will no longer be released.\n\t\t>\n\t\t> Binary builds are stripped - See https://userdocs.github.io/qbittorrent-nox-static/debugging/\n\tRELEASE_INFO\n\n\treturn\n}\n#######################################################################################################################################################\n# This is first help section that for triggers that do not require any processing and only provide a static result whe using help\n#######################################################################################################################################################\nwhile ((\"${#}\")); do\n\tcase ${1} in\n\t\t-b | --build-directory)\n\t\t\tif [[ -n $2 ]]; then\n\t\t\t\tqbt_build_dir=\"${2}\"\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} You must provide a directory path when using ${color_blue_light}-b${color_end}\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t-bs-c | --boot-strap-cmake)\n\t\t\tqbt_build_tool=\"cmake\"\n\t\t\tparams1+=(\"-bs-c\")\n\t\t\tshift\n\t\t\t;;\n\t\t-c | --cmake)\n\t\t\tqbt_build_tool=\"cmake\"\n\t\t\tshift\n\t\t\t;;\n\t\t-d | --debug)\n\t\t\tqbt_build_debug=\"yes\"\n\t\t\tshift\n\t\t\t;;\n\t\t-cd | --cache-directory)\n\t\t\tqbt_cache_dir=\"${2%/}\"\n\t\t\tif [[ -n \"${3}\" && \"${3}\" =~ (^rm$|^bs$) ]]; then\n\t\t\t\tqbt_cache_dir_options=\"${3}\"\n\t\t\t\tif [[ \"${3}\" == \"rm\" ]]; then\n\t\t\t\t\t[[ -d \"${qbt_cache_dir}\" ]] && rm -rf \"${qbt_cache_dir}\"\n\t\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} Cache directory removed: ${color_cyan_light}${qbt_cache_dir}${color_end}\"\n\t\t\t\t\texit\n\t\t\t\tfi\n\t\t\t\tshift 3\n\t\t\telif [[ -n \"${3}\" && ! \"${3}\" =~ ^- ]]; then\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle} Only ${color_blue_light}bs${color_end} or ${color_blue_light}rm${color_end} are supported as conditionals for this switch${color_end}\"\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} See ${color_blue_light}-h-cd${color_end} for more information${color_end}\"\n\t\t\t\texit\n\t\t\telse\n\t\t\t\tshift 2\n\t\t\tfi\n\t\t\t;;\n\t\t-i | --icu)\n\t\t\tqbt_skip_icu=\"no\"\n\t\t\t[[ \"${qbt_skip_icu}\" == \"no\" ]] && delete=(\"${delete[@]/icu/}\")\n\t\t\tshift\n\t\t\t;;\n\t\t-ma | --multi-arch)\n\t\t\tif [[ -n \"${2}\" && \"${multi_arch_options[${2}]}\" == \"${2}\" ]]; then\n\t\t\t\tqbt_cross_name=\"${2}\"\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} You must provide a valid arch option when using${color_end} ${color_blue_light}-ma${color_end}\"\n\t\t\t\tunset \"multi_arch_options[default]\"\n\t\t\t\tfor arches in \"${multi_arch_options[@]}\"; do\n\t\t\t\t\tprintf '%b\\n' \" ${unicode_blue_light_circle} ${arches}${color_end}\"\n\t\t\t\tdone\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_green_circle} Example usage:${color_blue_light} -ma aarch64${color_end}\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t-p | --proxy)\n\t\t\tqbt_git_proxy=(\"-c\" \"http.sslVerify=false\" \"-c\" \"http.https://github.com.proxy=${2}\")\n\t\t\tqbt_curl_proxy=(\"--proxy-insecure\" \"-x\" \"${2}\")\n\t\t\tshift 2\n\t\t\t;;\n\t\t-o | --optimize)\n\t\t\tif [[ -z ${qbt_cross_name} ]]; then\n\t\t\t\tqbt_optimize=\"-march=native\"\n\t\t\t\tshift\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_light_circle} You cannot use the ${color_blue_light}-o${color_end} flag with cross compilation\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t-s | --strip)\n\t\t\tqbt_optimise_strip=\"yes\"\n\t\t\tshift\n\t\t\t;;\n\t\t-si | --static-ish)\n\t\t\tif [[ -z ${qbt_cross_name} ]]; then\n\t\t\t\tqbt_static_ish=\"yes\"\n\t\t\t\tshift\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_light_circle} You cannot use the ${color_blue_light}-si${color_end} flag with cross compilation${color_end}\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t-sdu | --script-debug-urls)\n\t\t\tscript_debug_urls=\"yes\"\n\t\t\tshift\n\t\t\t;;\n\t\t-wf | --workflow)\n\t\t\tqbt_workflow_files=\"yes\"\n\t\t\tshift\n\t\t\t;;\n\t\t--) # end argument parsing\n\t\t\tshift\n\t\t\tbreak\n\t\t\t;;\n\t\t*) # preserve positional arguments\n\t\t\tparams1+=(\"${1}\")\n\t\t\tshift\n\t\t\t;;\n\tesac\ndone\n# Set positional arguments in their proper place.\nset -- \"${params1[@]}\"\n#######################################################################################################################################################\n# Functions part 1: Use some of our functions\n#######################################################################################################################################################\n_set_default_values \"${@}\" # see functions\n_check_dependencies        # see functions\n_test_url\n_set_build_directory    # see functions\n_set_module_urls \"${@}\" # see functions\n_script_version         # see functions\n#######################################################################################################################################################\n# Environment variables - settings positional parameters of flags\n#######################################################################################################################################################\n[[ -n \"${qbt_patches_url}\" ]] && set -- -pr \"${qbt_patches_url}\" \"${@}\"\n[[ -n \"${qbt_boost_tag}\" ]] && set -- -bt \"${qbt_boost_tag}\" \"${@}\"\n[[ -n \"${qbt_libtorrent_tag}\" ]] && set -- -lt \"${qbt_libtorrent_tag}\" \"${@}\"\n[[ -n \"${qbt_qt_tag}\" ]] && set -- -qtt \"${qbt_qt_tag}\" \"${@}\"\n[[ -n \"${qbt_qbittorrent_tag}\" ]] && set -- -qt \"${qbt_qbittorrent_tag}\" \"${@}\"\n#######################################################################################################################################################\n# This section controls our flags that we can pass to the script to modify some variables and behavior.\n#######################################################################################################################################################\nwhile ((\"${#}\")); do\n\tcase \"${1}\" in\n\t\t-bs-p | --boot-strap-patches)\n\t\t\t_apply_patches bootstrap\n\t\t\tshift\n\t\t\t;;\n\t\t-bs-c | --boot-strap-cmake)\n\t\t\t_cmake\n\t\t\tshift\n\t\t\t;;\n\t\t-bs-r | --boot-strap-release)\n\t\t\t_release_info\n\t\t\tshift\n\t\t\t;;\n\t\t-bs-ma | --boot-strap-multi-arch)\n\t\t\tif [[ \"${multi_arch_options[${qbt_cross_name}]}\" == \"${qbt_cross_name}\" ]]; then\n\t\t\t\t_multi_arch\n\t\t\t\tshift\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} You must provide a valid arch option when using${color_end} ${color_blue_light}-ma${color_end}\"\n\t\t\t\tfor arches in \"${multi_arch_options[@]}\"; do\n\t\t\t\t\tprintf '%b\\n' \" ${unicode_blue_light_circle} ${arches}${color_end}\"\n\t\t\t\tdone\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_green_circle} Example usage:${color_blue_light} -ma aarch64${color_end}\"\n\t\t\t\texit 1\n\t\t\tfi\n\t\t\t;;\n\t\t-bs-a | --boot-strap-all)\n\t\t\t_apply_patches bootstrap\n\t\t\t_release_info\n\t\t\t_cmake\n\t\t\t_multi_arch bootstrap\n\t\t\tshift\n\t\t\t;;\n\t\t-bt | --boost-tag)\n\t\t\tif [[ -n \"${2}\" ]]; then\n\t\t\t\tgithub_tag[boost]=\"$(_git \"${github_url[boost]}\" -t \"${2}\")\"\n\t\t\t\tapp_version[boost]=\"${github_tag[boost]#boost-}\"\n\t\t\t\t_boost_url\n\t\t\t\tqbt_workflow_override[boost]=\"yes\"\n\t\t\t\t_test_git_ouput \"${github_tag[boost]}\" \"boost\" \"${2}\"\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\t;;\n\t\t-n | --no-delete)\n\t\t\tqbt_skip_delete=\"yes\"\n\t\t\tshift\n\t\t\t;;\n\t\t-m | --master)\n\t\t\tgithub_tag[libtorrent]=\"$(_git \"${github_url[libtorrent]}\" -t \"RC_${qbt_libtorrent_version//./_}\")\"\n\t\t\tapp_version[libtorrent]=\"${github_tag[libtorrent]}\"\n\t\t\tqbt_workflow_override[libtorrent]=\"yes\"\n\t\t\tsource_default[libtorrent]=\"folder\"\n\t\t\t_test_git_ouput \"${github_tag[libtorrent]}\" \"libtorrent\" \"RC_${qbt_libtorrent_version//./_}\"\n\t\t\tgithub_tag[qbittorrent]=\"$(_git \"${github_url[qbittorrent]}\" -t \"master\")\"\n\t\t\tapp_version[qbittorrent]=\"${github_tag[qbittorrent]#release-}\"\n\t\t\tqbt_workflow_override[qbittorrent]=\"yes\"\n\t\t\tsource_default[qbittorrent]=\"folder\"\n\t\t\t_test_git_ouput \"${github_tag[qbittorrent]}\" \"qbittorrent\" \"master\"\n\t\t\tshift\n\t\t\t;;\n\t\t-lm | --libtorrent-master)\n\t\t\tgithub_tag[libtorrent]=\"$(_git \"${github_url[libtorrent]}\" -t \"RC_${qbt_libtorrent_version//./_}\")\"\n\t\t\tapp_version[libtorrent]=\"${github_tag[libtorrent]}\"\n\t\t\tsource_default[qbittorrent]=\"folder\"\n\t\t\tqbt_workflow_override[libtorrent]=\"yes\"\n\t\t\t_test_git_ouput \"${github_tag[libtorrent]}\" \"libtorrent\" \"RC_${qbt_libtorrent_version//./_}\"\n\t\t\tshift\n\t\t\t;;\n\t\t-lt | --libtorrent-tag)\n\t\t\tif [[ -n \"${2}\" ]]; then\n\t\t\t\tgithub_tag[libtorrent]=\"$(_git \"${github_url[libtorrent]}\" -t \"$2\")\"\n\t\t\t\t[[ \"${github_tag[libtorrent]}\" =~ ^RC_ ]] && app_version[libtorrent]=\"${github_tag[libtorrent]/RC_/}\" app_version[libtorrent]=\"${app_version[libtorrent]//_/\\.}\"\n\t\t\t\t[[ \"${github_tag[libtorrent]}\" =~ ^libtorrent- ]] && app_version[libtorrent]=\"${github_tag[libtorrent]#libtorrent-}\" app_version[libtorrent]=\"${app_version[libtorrent]//_/\\.}\"\n\t\t\t\t[[ \"${github_tag[libtorrent]}\" =~ ^libtorrent_ ]] && app_version[libtorrent]=\"${github_tag[libtorrent]#libtorrent_}\" app_version[libtorrent]=\"${app_version[libtorrent]//_/\\.}\"\n\t\t\t\t[[ \"${github_tag[libtorrent]}\" =~ ^v[0-9] ]] && app_version[libtorrent]=\"${github_tag[libtorrent]#v}\"\n\t\t\t\tsource_archive_url[libtorrent]=\"https://github.com/arvidn/libtorrent/releases/download/${github_tag[libtorrent]}/libtorrent-rasterbar-${app_version[libtorrent]}.tar.gz\"\n\t\t\t\tif ! _curl \"${source_archive_url[libtorrent]}\" &> /dev/null; then\n\t\t\t\t\tsource_default[libtorrent]=\"folder\"\n\t\t\t\tfi\n\t\t\t\tqbt_workflow_override[libtorrent]=\"yes\"\n\n\t\t\t\tread -ra lt_version_short_array <<< \"${app_version[libtorrent]//\\./ }\"\n\t\t\t\tqbt_libtorrent_version=\"${lt_version_short_array[0]}.${lt_version_short_array[1]}\"\n\t\t\t\t[[ \"${github_tag[libtorrent]}\" =~ ^RC_ ]] && app_version[libtorrent]=\"RC_${app_version[libtorrent]//\\./_}\" # set back to RC_... so that release info has proper version context\n\n\t\t\t\t_test_git_ouput \"${github_tag[libtorrent]}\" \"libtorrent\" \"$2\"\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\t;;\n\t\t-pr | --patch-repo)\n\t\t\tif [[ -n \"${2}\" ]]; then\n\t\t\t\tif _curl \"https://github.com/${2}\" &> /dev/null; then\n\t\t\t\t\tqbt_patches_url=\"${2}\"\n\t\t\t\telse\n\t\t\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle} ${color_yellow_light}This repo does not exist:${color_end}\"\n\t\t\t\t\tprintf '\\n%b\\n' \"   ${color_cyan_light}https://github.com/${2}${color_end}\"\n\t\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Please provide a valid username and repo.${color_end}\"\n\t\t\t\t\texit\n\t\t\t\tfi\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} username/repo ${color_end}\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\t;;\n\t\t-qm | --qbittorrent-master)\n\t\t\tgithub_tag[qbittorrent]=\"$(_git \"${github_url[qbittorrent]}\" -t \"master\")\"\n\t\t\tapp_version[qbittorrent]=\"${github_tag[qbittorrent]#release-}\"\n\t\t\tqbt_workflow_override[qbittorrent]=\"yes\"\n\t\t\tsource_archive_url[qbittorrent]=\"https://github.com/qbittorrent/qBittorrent/archive/refs/heads/${github_tag[qbittorrent]}.tar.gz\"\n\t\t\t_test_git_ouput \"${github_tag[qbittorrent]}\" \"qbittorrent\" \"master\"\n\t\t\tshift\n\t\t\t;;\n\t\t-qt | --qbittorrent-tag)\n\t\t\tif [[ -n \"${2}\" ]]; then\n\t\t\t\tgithub_tag[qbittorrent]=\"$(_git \"${github_url[qbittorrent]}\" -t \"$2\")\"\n\t\t\t\tapp_version[qbittorrent]=\"${github_tag[qbittorrent]#release-}\"\n\t\t\t\tif [[ \"${github_tag[qbittorrent]}\" =~ ^release- ]]; then\n\t\t\t\t\tsource_archive_url[qbittorrent]=\"https://github.com/qbittorrent/qBittorrent/archive/refs/tags/${github_tag[qbittorrent]}.tar.gz\"\n\t\t\t\telse\n\t\t\t\t\tsource_archive_url[qbittorrent]=\"https://github.com/qbittorrent/qBittorrent/archive/refs/heads/${github_tag[qbittorrent]}.tar.gz\"\n\t\t\t\tfi\n\t\t\t\tqbt_workflow_override[qbittorrent]=\"yes\"\n\t\t\t\t_test_git_ouput \"${github_tag[qbittorrent]}\" \"qbittorrent\" \"$2\"\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\t;;\n\t\t-qtt | --qt-tag)\n\t\t\tif [[ -n \"${2}\" ]]; then\n\t\t\t\tgithub_tag[qtbase]=\"$(_git \"${github_url[qtbase]}\" -t \"${2}\")\"\n\t\t\t\tgithub_tag[qttools]=\"$(_git \"${github_url[qttools]}\" -t \"${2}\")\"\n\t\t\t\tapp_version[qtbase]=\"$(printf '%s' \"${github_tag[qtbase]#v}\" | sed 's/-lts-lgpl//g')\"\n\t\t\t\tapp_version[qttools]=\"$(printf '%s' \"${github_tag[qttools]#v}\" | sed 's/-lts-lgpl//g')\"\n\t\t\t\tsource_default[qtbase]=\"folder\"\n\t\t\t\tsource_default[qttools]=\"folder\"\n\t\t\t\tqbt_workflow_override[qtbase]=\"yes\"\n\t\t\t\tqbt_workflow_override[qttools]=\"yes\"\n\t\t\t\tqbt_qt_version=\"${app_version[qtbase]%%.*}\"\n\t\t\t\tread -ra qt_version_short_array <<< \"${app_version[qtbase]//\\./ }\"\n\t\t\t\tqt_version_short=\"${qt_version_short_array[0]}.${qt_version_short_array[1]}\"\n\t\t\t\t_test_git_ouput \"${github_tag[qtbase]}\" \"qtbase\" \"${2}\"\n\t\t\t\t_test_git_ouput \"${github_tag[qttools]}\" \"qttools\" \"${2}\"\n\n\t\t\t\tif [[ $qbt_build_tool == \"cmake\" && \"${2}\" =~ ^v5 ]]; then\n\t\t\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle} Please use a correct qt and build tool combination\"\n\t\t\t\t\tprintf '\\n%b\\n' \" ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake\"\n\t\t\t\t\t_print_env\n\t\t\t\t\texit 1\n\t\t\t\tfi\n\t\t\t\tshift 2\n\t\t\telse\n\t\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} ${color_yellow_light}You must provide a tag for this switch:${color_end} ${color_blue_light}${1} TAG ${color_end}\"\n\t\t\t\texit\n\t\t\tfi\n\t\t\t;;\n\t\t-h | --help)\n\t\t\tprintf '\\n%b\\n\\n' \" ${text_bold}${text_underlined}Here are a list of available options${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-b${color_end}     ${text_dim}or${color_end} ${color_blue_light}--build-directory${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-b${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-build-directory${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--boost-tag${color_end}             ${color_yellow}Help:${color_end} ${color_blue_light}-h-bt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-boost-version${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-c${color_end}     ${text_dim}or${color_end} ${color_blue_light}--cmake${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-c${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-cmake${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-cd${color_end}    ${text_dim}or${color_end} ${color_blue_light}--cache-directory${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-cd${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-cache-directory${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-d${color_end}     ${text_dim}or${color_end} ${color_blue_light}--debug${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-d${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-debug${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bs-p${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-patches${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-p${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-patches${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bs-c${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-cmake${color_end}      ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-c${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-cmake${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bs-r${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-release${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-r${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-release${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bs-ma${color_end} ${text_dim}or${color_end} ${color_blue_light}--boot-strap-multi-arch${color_end} ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-ma${color_end} ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-multi-arch${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-bs-a${color_end}  ${text_dim}or${color_end} ${color_blue_light}--boot-strap-all${color_end}        ${color_yellow}Help:${color_end} ${color_blue_light}-h-bs-a${color_end}  ${text_dim}or${color_end} ${color_blue_light}--help-boot-strap-all${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-i${color_end}     ${text_dim}or${color_end} ${color_blue_light}--icu${color_end}                   ${color_yellow}Help:${color_end} ${color_blue_light}-h-i${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-icu${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-lm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--libtorrent-master${color_end}     ${color_yellow}Help:${color_end} ${color_blue_light}-h-lm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-libtorrent-master${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-lt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--libtorrent-tag${color_end}        ${color_yellow}Help:${color_end} ${color_blue_light}-h-lt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-libtorrent-tag${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-m${color_end}     ${text_dim}or${color_end} ${color_blue_light}--master${color_end}                ${color_yellow}Help:${color_end} ${color_blue_light}-h-m${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-master${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-ma${color_end}    ${text_dim}or${color_end} ${color_blue_light}--multi-arch${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-ma${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-multi-arch${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-n${color_end}     ${text_dim}or${color_end} ${color_blue_light}--no-delete${color_end}             ${color_yellow}Help:${color_end} ${color_blue_light}-h-n${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-no-delete${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-o${color_end}     ${text_dim}or${color_end} ${color_blue_light}--optimize${color_end}              ${color_yellow}Help:${color_end} ${color_blue_light}-h-o${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-optimize${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-p${color_end}     ${text_dim}or${color_end} ${color_blue_light}--proxy${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-p${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-proxy${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-pr${color_end}    ${text_dim}or${color_end} ${color_blue_light}--patch-repo${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-pr${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-patch-repo${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-qm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--qbittorrent-master${color_end}    ${color_yellow}Help:${color_end} ${color_blue_light}-h-qm${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-qbittorrent-master${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-qt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--qbittorrent-tag${color_end}       ${color_yellow}Help:${color_end} ${color_blue_light}-h-qt${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-qbittorrent-tag${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-qtt${color_end}   ${text_dim}or${color_end} ${color_blue_light}--qt-tag${color_end}                ${color_yellow}Help:${color_end} ${color_blue_light}-h-qtt${color_end}   ${text_dim}or${color_end} ${color_blue_light}--help-qtt-tag${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-sdu${color_end}   ${text_dim}or${color_end} ${color_blue_light}--script-debug-urls${color_end}     ${color_yellow}Help:${color_end} ${color_blue_light}-h-sdu${color_end}   ${text_dim}or${color_end} ${color_blue_light}--help-script-debug-urls${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-si${color_end}    ${text_dim}or${color_end} ${color_blue_light}--static-ish${color_end}            ${color_yellow}Help:${color_end} ${color_blue_light}-h-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-strip${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--strip${color_end}                 ${color_yellow}Help:${color_end} ${color_blue_light}-h-s${color_end}     ${text_dim}or${color_end} ${color_blue_light}--help-strip${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_green}Use:${color_end} ${color_blue_light}-wf${color_end}    ${text_dim}or${color_end} ${color_blue_light}--workflow${color_end}              ${color_yellow}Help:${color_end} ${color_blue_light}-h-wf${color_end}    ${text_dim}or${color_end} ${color_blue_light}--help-workflow${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_bold}${text_underlined}Module specific help - flags are used with the modules listed here.${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${color_green}Use:${color_end} ${color_magenta_light}all${color_end} ${text_dim}or${color_end} ${color_magenta_light}module-name${color_end}          ${color_green}Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_magenta_light}all${color_end} ${color_blue_light}-i${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}${color_magenta_light}all${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Recommended method to install all modules${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}install${color_end} ${text_dim}------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Install the ${text_dim}${color_cyan_light}${qbt_install_dir_short}/completed/qbittorrent-nox${color_end} ${text_dim}binary${color_end}\"\n\t\t\t[[ \"${os_id}\" =~ ^(debian|ubuntu)$ ]] && printf '%b\\n' \" ${text_dim}${color_magenta_light}glibc${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build libc locally to statically link nss${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}zlib${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build zlib locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}iconv${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build iconv locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}icu${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_yellow_light}optional${color_end} ${text_dim}Build ICU locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}openssl${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build openssl locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}boost${color_end} ${text_dim}--------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Download, extract and build the boost library files${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}libtorrent${color_end} ${text_dim}---------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build libtorrent locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}double_conversion${color_end} ${text_dim}--${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}A cmake + Qt6 build component on modern OS only.${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}qtbase${color_end} ${text_dim}-------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qtbase locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}qttools${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qttools locally${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}qbittorrent${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}required${color_end} ${text_dim}Build qbittorrent locally${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_bold}${text_underlined}env help - supported exportable environment variables${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}${color_magenta_light}export qbt_build_dir=\\\"\\\"${color_end} ${text_dim}-----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}path - a valid path${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_libtorrent_version=\\\"\\\"${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}1.2 | 2.0${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_qt_version=\\\"\\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}5 | 5.15 | 6 | 6.2 | 6.3 and so on${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_build_tool=\\\"\\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}qmake | cmake - The default if empty is cmake ${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_cross_name=\\\"\\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}x86_64 | aarch64 | armv7 | armhf${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_patches_url=\\\"\\\"${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}userdocs/qbittorrent-nox-static${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_libtorrent_tag=\\\"\\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for libtorrent${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_qbittorrent_tag=\\\"\\\"${color_end} ${text_dim}-----------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for qbittorrent${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_boost_tag=\\\"\\\"${color_end} ${text_dim}-----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for boost${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_qt_tag=\\\"\\\"${color_end} ${text_dim}--------------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}Takes a valid git tag or branch for Qt${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_workflow_files=\\\"\\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - use qbt-workflow-files for dependencies${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_workflow_artifacts=\\\"\\\"${color_end} ${text_dim}--------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - use qbt_workflow_artifacts for dependencies${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_cache_dir=\\\"\\\"${color_end} ${text_dim}-----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}path | empty - provide a path to a cache directory${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_libtorrent_master_jamfile=\\\"\\\"${color_end} ${text_dim}-${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - use RC branch instead of release jamfile${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_optimise_strip=\\\"\\\"${color_end} ${text_dim}------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - strip binaries - cannot be used with debug${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_build_debug=\\\"\\\"${color_end} ${text_dim}---------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - debug build - cannot be used with strip${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_standard=\\\"\\\"${color_end} ${text_dim}------------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}14 | 17 | 20 | 23 - c standard for gcc - OS dependendent${color_end}\"\n\t\t\tprintf '%b\\n' \" ${text_dim}${color_magenta_light}export qbt_static_ish=\\\"\\\"${color_end} ${text_dim}----------------${color_end} ${text_dim}${color_red_light}options${color_end} ${text_dim}yes | no - libc linking - link dynamically to host libc${color_end}\"\n\t\t\t_print_env\n\t\t\texit\n\t\t\t;;\n\t\t-h-b | --help-build-directory)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Default build location: ${color_cyan}${qbt_install_dir_short}${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-b${color_end} or ${color_blue_light}--build-directory${color_end} to set the location of the build directory.\"\n\t\t\tprintf '\\n%b\\n' \" ${color_yellow}Paths are relative to the script location. I recommend that you use a full path.${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${text_dim}${color_magenta_light}all${color_end} ${text_dim}- Will install all modules and build libtorrent to the default build location${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${text_dim}${color_magenta_light}module${color_end} ${text_dim}- Will install a single module to the default build location${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${text_dim}${unicode_blue_light_circle} Usage example:${color_end} ${text_dim}${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${text_dim}${color_magenta_light}module${color_end} ${color_blue_light}-b${color_end} ${text_dim}${color_cyan_light}\\\"\\$HOME/build\\\"${color_end} ${text_dim}- will specify a custom build directory and install a specific module use to that custom location${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bs-p | --help-boot-strap-patches)\n\t\t\t_apply_patches bootstrap-help\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Creates dirs in this structure: ${color_cyan}${qbt_install_dir_short}/patches/app_name/tag/patch${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Add your patches there, for example.\"\n\t\t\tprintf '\\n%b\\n' \" ${color_cyan}${qbt_install_dir_short}/patches/libtorrent/${app_version[libtorrent]}/patch${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_cyan}${qbt_install_dir_short}/patches/qbittorrent/${app_version[qbittorrent]}/patch${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bs-c | --help-boot-strap-cmake)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This bootstrap will install cmake and ninja build to the build directory\"\n\t\t\tprintf '\\n%b\\n\\n'\"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs-c${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bs-r | --help-boot-strap-release)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \"${color_red_light} Github action specific. You probably dont need it${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This switch creates some github release template files in this directory\"\n\t\t\tprintf '\\n%b\\n' \" ${qbt_install_dir_short}/release_info\"\n\t\t\tprintf '\\n%b\\n\\n' \"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs-r${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bs-ma | --help-boot-strap-multi-arch)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle}${color_red_light} Github action and Alpine specific. You probably dont need it${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This switch bootstraps the musl cross build files needed for any provided and supported architecture\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} armhf\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} armv7\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} aarch64\"\n\t\t\tprintf '\\n%b\\n' \"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs-ma ${qbt_cross_name:-aarch64}${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} You can also set it as a variable to trigger cross building: ${color_blue_light}export qbt_cross_name=${qbt_cross_name:-aarch64}${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bs-a | --help-boot-strap-all)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle}${color_red_light} Github action specific and Alpine only. You probably dont need it${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Performs all bootstrapping options\"\n\t\t\tprintf '\\n%b\\n' \"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs-a${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Patches${color_end}\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Release info${color_end}\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Cmake and ninja build${color_end} if the ${color_blue_light}-c${color_end} flag is passed\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Multi arch${color_end} if the ${color_blue_light}-ma${color_end} flag is passed\"\n\t\t\tprintf '\\n%b\\n' \" Equivalent of doing: ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs -bs-r${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" And with ${color_blue_light}-c${color_end} and ${color_blue_light}-ma${color_end} : ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs -bs-c -bs-ma -bs-r ${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-bt | --help-boost-version)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This will let you set a specific version of boost to use with older build combos\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-bt boost-1.81.0${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-bt boost-1.82.0.beta1${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-c | --help-cmake)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This flag can change the build process in a few ways.\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Use cmake to build libtorrent.\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} Use cmake to build qbittorrent.\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} You can use this flag with ICU and qtbase will use ICU instead of iconv.\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-cd | --help-cache-directory)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This will let you set a path of a directory that contains cached github repos of modules\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Cached apps folder names must match the module name. Case and spelling\"\n\t\t\tprintf '\\n%b\\n' \" For example: ${color_cyan_light}~/cache_dir/qbittorrent${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Additonal flags supported: ${color_cyan_light}rm${color_end} - remove the cache directory and exit\"\n\t\t\tprintf '\\n%b\\n' \" Additonal flags supported: ${color_cyan_light}bs${color_end} - download cache for all activated modules then exit\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir rm${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-cd ~/cache_dir bs${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-d | --help-debug)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" Enables debug symbols for libtorrent and qbitorrent when building - required for gdb backtrace\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-n | --help-no-delete)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Skip all delete functions for selected modules to leave source code directories behind.\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-n${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-i | --help-icu)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Use ICU libraries when building qBittorrent. Final binary size will be around ~50Mb\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-i${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-m | --help-master)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Always use the master branch for ${color_green}libtorrent RC_${qbt_libtorrent_version//./_}${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Always use the master branch for ${color_green}qBittorrent\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-lm${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-ma | --help-multi-arch)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_red_circle}${color_red_light} Github action and Alpine specific. You probably dont need it${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This switch will make the script use the cross build configuration for these supported architectures\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} armhf\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} armv7\"\n\t\t\tprintf '%b\\n' \" ${unicode_yellow_circle} aarch64\"\n\t\t\tprintf '\\n%b\\n' \"${color_green_light} Usage:${color_end} ${color_cyan_light}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end} ${color_blue_light}-bs-ma ${qbt_cross_name:-aarch64}${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_yellow_circle} You can also set it as a variable to trigger cross building: ${color_blue_light}export qbt_cross_name=${qbt_cross_name:-aarch64}${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-lm | --help-libtorrent-master)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Always use the master branch for ${color_green}libtorrent-${qbt_libtorrent_version}${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This master that will be used is: ${color_green}RC_${qbt_libtorrent_version//./_}${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-lm${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-lt | --help-libtorrent-tag)\n\t\t\tif [[ ! \"${github_tag[libtorrent]}\" =~ (error_tag|error_22) ]]; then\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" Use a provided libtorrent tag when cloning from github.\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end}${color_blue_light} -lt ${color_cyan_light}${github_tag[libtorrent]}${color_end} ${color_blue_light}-h-lt${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag must be provided with arguments.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-lt${color_end} ${color_cyan_light}${github_tag[libtorrent]}${color_end}\"\n\t\t\tfi\n\t\t\tprintf '\\n'\n\t\t\texit\n\t\t\t;;\n\t\t-h-o | --help-optimize)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Warning:${color_end} using this flag will mean your static build is limited a CPU that matches the host spec\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-o${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" Additonal flags used: ${color_cyan_light}-march=native${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-p | --help-proxy)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Specify a proxy URL and PORT to use with curl and git\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} Usage examples:\"\n\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-p${color_end} ${color_cyan_light}username:password@https://123.456.789.321:8443${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-p${color_end} ${color_cyan_light}https://proxy.com:12345${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Call this before the help option to see outcome dynamically:\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-p${color_end} ${color_cyan_light}https://proxy.com:12345${color_end} ${color_blue_light}-h-p${color_end}\"\n\t\t\t[[ -n \"${qbt_curl_proxy[*]}\" ]] && printf '%b\\n' \" proxy command: ${color_cyan_light}${qbt_curl_proxy[*]}${text_newline}${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-pr | --help-patch-repo)\n\t\t\t_apply_patches bootstrap-help\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Specify a username and repo to use patches hosted on github${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}There is a specific github directory format you need to use with this flag${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${color_cyan_light}patches/libtorrent/${app_version[libtorrent]}/patch${color_end}\"\n\t\t\tprintf '%b\\n' \" ${color_cyan_light}patches/libtorrent/${app_version[libtorrent]}/Jamfile${color_end} ${color_red_light}(defaults to branch master)${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${color_cyan_light}patches/qbittorrent/${app_version[qbittorrent]}/patch${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}If an installation tag matches a hosted tag patch file, it will be automatically used.${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" The tag name will alway be an abbreviated version of the default or specificed tag.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} ${color_green}Usage example:${color_end} ${color_blue_light}-pr usnerame/repo${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-qm | --help-qbittorrent-master)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Always use the master branch for ${color_green}qBittorrent${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" This master that will be used is: ${color_green}master${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-qm${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-qt | --help-qbittorrent-tag)\n\t\t\tif [[ ! \"${github_tag[qbittorrent]}\" =~ (error_tag|error_22) ]]; then\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" Use a provided qBittorrent tag when cloning from github.\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end}${color_blue_light} -qt ${color_cyan_light}${github_tag[qbittorrent]}${color_end} ${color_blue_light}-h-qt${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag must be provided with arguments.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-qt${color_end} ${color_cyan_light}${github_tag[qbittorrent]}${color_end}\"\n\t\t\tfi\n\t\t\tprintf '\\n'\n\t\t\texit\n\t\t\t;;\n\t\t-h-qtt | --help-qt-tag)\n\t\t\tif [[ ! \"${github_tag[qtbase]}\" =~ (error_tag|error_22) ]]; then\n\t\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" Use a provided Qt tag when cloning from github.\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_yellow}You can use this flag with this help command to see the value if called before the help option.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_green}${qbt_working_dir_short}/$(basename -- \"$0\")${color_end}${color_blue_light} -qt ${color_cyan_light}${github_tag[qtbase]}${color_end} ${color_blue_light}-h-qt${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag must be provided with arguments.${color_end}\"\n\t\t\t\tprintf '\\n%b\\n' \" ${color_blue_light}-qt${color_end} ${color_cyan_light}${github_tag[qtbase]}${color_end}\"\n\t\t\tfi\n\t\t\tprintf '\\n'\n\t\t\texit\n\t\t\t;;\n\t\t-h-s | --help-strip)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Strip the qbittorrent-nox binary of unneeded symbols to decrease file size\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Static musl builds don't work with qBittorrents built in stacktrace.\"\n\t\t\tprintf '\\n%b\\n' \" If you need to debug a build with gdb you must build a debug build using the flag ${color_blue_light}-d${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-s${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-si | --help-static-ish)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" Do not statically link libc (glibc/muslc) when building qbittorrent-nox\"\n\t\t\tprintf '\\n%b\\n' \" ${text_dim}This flag is provided with no arguments.${color_end}\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${color_blue_light}-si${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-sdu | --help-script-debug-urls)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_blue_light_circle} This will print out all the ${color_yellow_light}_set_module_urls${color_end} array info to check\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-sdu${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t-h-wf | --help-workflow)\n\t\t\tprintf '\\n%b\\n' \" ${unicode_cyan_light_circle} ${text_bold}${text_underlined}Here is the help description for this flag:${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} Use archives from ${color_cyan_light}https://github.com/userdocs/qbt-workflow-files/releases/latest${color_end}\"\n\t\t\tprintf '\\n%b\\n' \" ${unicode_yellow_circle} ${color_yellow_light}Warning:${color_end} If you set a custom version for supported modules it will override and disable workflows as a source for that module\"\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_blue_light_circle} Usage example: ${color_blue_light}-wf${color_end}\"\n\t\t\texit\n\t\t\t;;\n\t\t--) # end argument parsing\n\t\t\tshift\n\t\t\tbreak\n\t\t\t;;\n\t\t-*) # unsupported flags\n\t\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle} Error: Unsupported flag ${color_red_light}${1}${color_end} - use ${color_green_light}-h${color_end} or ${color_green_light}--help${color_end} to see the valid options${color_end}\" >&2\n\t\t\texit 1\n\t\t\t;;\n\t\t*) # preserve positional arguments\n\t\t\tparams2+=(\"${1}\")\n\t\t\tshift\n\t\t\t;;\n\tesac\ndone\nset -- \"${params2[@]}\" # Set positional arguments in their proper place.\n#######################################################################################################################################################\n# Functions part 2: Use some of our functions\n#######################################################################################################################################################\n[[ \"${1}\" == \"install\" ]] && _install_qbittorrent \"${@}\" # see functions\n#######################################################################################################################################################\n# Lets dip out now if we find that any github tags failed validation or the urls are invalid\n#######################################################################################################################################################\n_error_tag\n#######################################################################################################################################################\n# Functions part 3: Any functions that require that params in the above options while loop to have been shifted must come after this line\n#######################################################################################################################################################\n_set_cxx_standard\n_set_build_cons\n_debug \"${@}\"                # requires shifted params from options block 2\n_installation_modules \"${@}\" # requires shifted params from options block 2\n#######################################################################################################################################################\n# If any modules fail the qbt_modules_test then exit now.\n#######################################################################################################################################################\nif [[ \"${qbt_modules_test}\" == 'fail' || \"${#}\" -eq '0' ]]; then\n\tprintf '\\n%b\\n' \" ${text_blink}${unicode_red_circle}${color_end}${text_bold} One or more of the provided modules are not supported${color_end}\"\n\tprintf '\\n%b\\n' \" ${unicode_yellow_circle}${text_bold} Below is a list of supported modules${color_end}\"\n\tprintf '\\n%b\\n' \" ${unicode_magenta_circle}${color_magenta_light} ${qbt_modules[*]}${color_end}\"\n\t_print_env\n\texit\nfi\n#######################################################################################################################################################\n# Functions part 4:\n#######################################################################################################################################################\n_cmake\n_multi_arch\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_glibc_bootstrap() {\n\tsub_dir=\"/BUILD\"\n}\n# shellcheck disable=SC2317\n_glibc() {\n\tCFLAGS=\"-O2 -U_FORTIFY_SOURCE\" \"${qbt_dl_folder_path}/configure\" \"${multi_glibc[@]}\" --prefix=\"${qbt_install_dir}\" --enable-static-nss --disable-nscd --srcdir=\"${qbt_dl_folder_path}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\tCFLAGS=\"-O2 -U_FORTIFY_SOURCE\" make -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/$app_name.log\"\n\t_post_command build\n\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\n\tunset sub_dir\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_zlib() {\n\tif [[ \"${qbt_build_tool}\" == \"cmake\" ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\t# force set some ARCH when using zlib-ng, cmake and musl-cross since it does not detect the arch correctly on Alpine.\n\t\t[[ \"${qbt_cross_target}\" =~ ^(alpine)$ ]] && printf '%b\\n' \"\\narchfound ${qbt_zlib_arch:-$(apk --print-arch)}\" >> \"${qbt_dl_folder_path}/cmake/detect-arch.c\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_CXX_STANDARD=\"${qbt_standard}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir}\" \\\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\n\t\t\t-D ZLIB_COMPAT=ON \\\n\t\t\t-D WITH_GTEST=OFF \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\telse\n\t\t# force set some ARCH when using zlib-ng, configure and musl-cross since it does not detect the arch correctly on Alpine.\n\t\t[[ \"${qbt_cross_target}\" =~ ^(alpine)$ ]] && sed \"s|  CFLAGS=\\\"-O2 \\${CFLAGS}\\\"|  ARCH=${qbt_zlib_arch:-$(apk --print-arch)}\\n  CFLAGS=\\\"-O2 \\${CFLAGS}\\\"|g\" -i \"${qbt_dl_folder_path}/configure\"\n\t\t./configure --prefix=\"${qbt_install_dir}\" --static --zlib-compat |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tmake -j\"$(nproc)\" CXXFLAGS=\"${CXXFLAGS}\" CPPFLAGS=\"${CPPFLAGS}\" LDFLAGS=\"${LDFLAGS}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_iconv() {\n\tif [[ -n \"${qbt_cache_dir}\" && -d \"${qbt_cache_dir}/${app_name}\" ]]; then\n\t\t./gitsub.sh pull --depth 1\n\t\t./autogen.sh\n\tfi\n\n\t./configure \"${multi_iconv[@]}\" --prefix=\"${qbt_install_dir}\" --disable-shared --enable-static CXXFLAGS=\"${CXXFLAGS}\" CPPFLAGS=\"${CPPFLAGS}\" LDFLAGS=\"${LDFLAGS}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_icu_bootstrap() {\n\tif [[ -n \"${qbt_cache_dir}\" && -d \"${qbt_cache_dir}/${app_name}\" && \"${qbt_workflow_files}\" == \"no\" ]]; then\n\t\tsub_dir=\"/icu4c/source\"\n\telse\n\t\tsub_dir=\"/source\"\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_icu() {\n\tif [[ \"${multi_arch_options[${qbt_cross_name:-default}]}\" == \"${qbt_cross_name}\" ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/${app_name}/cross\"\n\t\t_pushd \"${qbt_install_dir}/${app_name}/cross\"\n\t\t\"${qbt_install_dir}/${app_name}${sub_dir}/runConfigureICU\" Linux/gcc\n\t\tmake -j\"$(nproc)\"\n\t\t_pushd \"${qbt_install_dir}/${app_name}${sub_dir}\"\n\tfi\n\n\t./configure \"${multi_icu[@]}\" --prefix=\"${qbt_install_dir}\" --disable-shared --enable-static --disable-samples --disable-tests --with-data-packaging=static CXXFLAGS=\"${CXXFLAGS}\" CPPFLAGS=\"${CPPFLAGS}\" LDFLAGS=\"${LDFLAGS}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t_post_command build\n\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\n\tunset sub_dir\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_openssl() {\n\t\"${multi_openssl[@]}\" --prefix=\"${qbt_install_dir}\" --libdir=\"${lib_dir##*/}\" --openssldir=\"/etc/ssl\" threads no-shared no-dso no-comp no-docs CXXFLAGS=\"${CXXFLAGS}\" CPPFLAGS=\"${CPPFLAGS}\" LDFLAGS=\"${LDFLAGS}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t_post_command build\n\tmake install_sw |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_boost_bootstrap() {\n\t# If using source files and the source fails, default to git, if we are not using workflows sources.\n\tif [[ \"${boost_url_status}\" =~ (403|404) && \"${qbt_workflow_files}\" == \"no\" && \"${qbt_workflow_artifacts}\" == \"no\" ]]; then\n\t\tsource_default[\"${app_name}\"]=\"folder\"\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_boost() {\n\tif [[ \"${source_default[\"${app_name}\"]}\" == \"file\" ]]; then\n\t\tmv -f \"${qbt_dl_folder_path}/\" \"${qbt_install_dir}/boost\"\n\t\t_pushd \"${qbt_install_dir}/boost\"\n\tfi\n\n\tif [[ \"${qbt_build_tool}\" != 'cmake' ]]; then\n\t\t\"${qbt_install_dir}/boost/bootstrap.sh\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tln -s \"${qbt_install_dir}/boost/boost\" \"${qbt_install_dir}/boost/include\"\n\telse\n\t\tprintf '%b\\n' \" ${unicode_yellow_circle} Skipping b2 as we are using cmake with Qt6\"\n\tfi\n\n\tif [[ \"${source_default[\"${app_name}\"]}\" == \"folder\" ]]; then\n\t\t\"${qbt_install_dir}/boost/b2\" headers |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_libtorrent() {\n\texport BOOST_ROOT=\"${qbt_install_dir}/boost\"\n\texport BOOST_INCLUDEDIR=\"${qbt_install_dir}/boost\"\n\texport BOOST_BUILD_PATH=\"${qbt_install_dir}/boost\"\n\n\tif [[ \"${qbt_build_tool}\" == 'cmake' ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t\"${multi_libtorrent[@]}\" \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_BUILD_TYPE=\"Release\" \\\n\t\t\t-D CMAKE_CXX_STANDARD=\"${qbt_standard}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir};${qbt_install_dir}/boost\" \\\n\t\t\t-D Boost_NO_BOOST_CMAKE=TRUE \\\n\t\t\t-D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \\\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\n\t\t\t-D Iconv_LIBRARY=\"${lib_dir}/libiconv.a\" \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\telse\n\t\t[[ ${qbt_cross_name} =~ ^(armhf|armv7)$ ]] && arm_libatomic=\"-l:libatomic.a\"\n\t\t# Check the actual version of the cloned libtorrent instead of using the tag so that we can determine RC_1_1, RC_1_2 or RC_2_0 when a custom pr branch was used. This will always give an accurate result.\n\t\tlibtorrent_version_hpp=\"$(sed -rn 's|(.*)LIBTORRENT_VERSION \"(.*)\"|\\2|p' include/libtorrent/version.hpp)\"\n\t\tif [[ \"${libtorrent_version_hpp}\" =~ ^1\\.1\\. ]]; then\n\t\t\tlibtorrent_library_filename=\"libtorrent.a\"\n\t\telse\n\t\t\tlibtorrent_library_filename=\"libtorrent-rasterbar.a\"\n\t\tfi\n\n\t\tif [[ \"${libtorrent_version_hpp}\" =~ ^2\\. ]]; then\n\t\t\tlt_version_options=()\n\t\t\tlibtorrent_libs=\"-l:libboost_system.a -l:${libtorrent_library_filename} -l:libtry_signal.a ${arm_libatomic}\"\n\t\t\tlt_cmake_flags=\"-DTORRENT_USE_LIBCRYPTO -DTORRENT_USE_OPENSSL -DTORRENT_USE_I2P=1 -DBOOST_ALL_NO_LIB -DBOOST_ASIO_ENABLE_CANCELIO -DBOOST_ASIO_HAS_STD_CHRONO -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_SYSTEM_STATIC_LINK=1 -DTORRENT_SSL_PEERS -DBOOST_ASIO_NO_DEPRECATED\"\n\t\telse\n\t\t\tlt_version_options=(\"iconv=on\")\n\t\t\tlibtorrent_libs=\"-l:libboost_system.a -l:${libtorrent_library_filename} ${arm_libatomic} -l:libiconv.a\"\n\t\t\tlt_cmake_flags=\"-DTORRENT_USE_LIBCRYPTO -DTORRENT_USE_OPENSSL -DTORRENT_USE_I2P=1 -DBOOST_ALL_NO_LIB -DBOOST_ASIO_ENABLE_CANCELIO -DBOOST_ASIO_HAS_STD_CHRONO -DBOOST_MULTI_INDEX_DISABLE_SERIALIZATION -DBOOST_SYSTEM_NO_DEPRECATED -DBOOST_SYSTEM_STATIC_LINK=1 -DTORRENT_USE_ICONV=1\"\n\t\tfi\n\n\t\t\"${qbt_install_dir}/boost/b2\" \"${multi_libtorrent[@]}\" -j\"$(nproc)\" \"${lt_version_options[@]}\" address-model=\"${bitness:-$(getconf LONG_BIT)}\" \"${qbt_libtorrent_debug}\" optimization=speed cxxstd=\"${qbt_standard}\" dht=on encryption=on crypto=openssl i2p=on extensions=on variant=release threading=multi link=static boost-link=static cxxflags=\"${CXXFLAGS}\" cflags=\"${CPPFLAGS}\" linkflags=\"${LDFLAGS}\" install --prefix=\"${qbt_install_dir}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tlibtorrent_strings_version=\"$(strings -d \"${lib_dir}/${libtorrent_library_filename}\" | grep -Eom1 \"^libtorrent/[0-9]\\.(.*)\")\" # ${libtorrent_strings_version#*/}\n\t\tcat > \"${PKG_CONFIG_PATH}/libtorrent-rasterbar.pc\" <<- LIBTORRENT_PKG_CONFIG\n\t\t\tprefix=${qbt_install_dir}\n\t\t\tlibdir=\\${prefix}/lib\n\t\t\tincludedir=\\${prefix}/include\n\n\t\t\tName: libtorrent-rasterbar\n\t\t\tDescription: The libtorrent-rasterbar libraries\n\t\t\tVersion: ${libtorrent_strings_version#*/}\n\n\t\t\tRequires:\n\t\t\tLibs: -L\\${libdir} ${libtorrent_libs}\n\t\t\tCflags: -I\\${includedir} -I${BOOST_ROOT} ${lt_cmake_flags}\n\t\tLIBTORRENT_PKG_CONFIG\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_double_conversion() {\n\tif [[ \"${qbt_build_tool}\" == 'cmake' && \"${qbt_qt_version}\" =~ ^6 ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t\"${multi_double_conversion[@]}\" \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir}\" \\\n\t\t\t-D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \\\n\t\t\t-D CMAKE_INSTALL_LIBDIR=lib \\\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_qtbase() {\n\n\tcat > \"mkspecs/${qbt_cross_qtbase}/qmake.conf\" <<- QT_MKSPECS\n\t\tMAKEFILE_GENERATOR      = UNIX\n\t\tCONFIG                 += incremental\n\t\tQMAKE_INCREMENTAL_STYLE = sublib\n\n\t\tinclude(../common/linux.conf)\n\tQT_MKSPECS\n\n\tif [[ \"${qbt_cross_name}\" =~ ^(x86|x86_64)$ ]]; then\n\t\tcat >> \"mkspecs/${qbt_cross_qtbase}/qmake.conf\" <<- QT_MKSPECS\n\n\t\t\tQMAKE_CFLAGS            = -m${bitness:-$(getconf LONG_BIT)}\n\t\t\tQMAKE_LFLAGS            = -m${bitness:-$(getconf LONG_BIT)}\n\n\t\tQT_MKSPECS\n\tfi\n\n\tcat >> \"mkspecs/${qbt_cross_qtbase}/qmake.conf\" <<- QT_MKSPECS\n\t\tinclude(../common/gcc-base-unix.conf)\n\t\tinclude(../common/g++-unix.conf)\n\n\t\t# modifications to g++.conf\n\t\tQMAKE_CC                = ${qbt_cross_host}-gcc\n\t\tQMAKE_CXX               = ${qbt_cross_host}-g++\n\t\tQMAKE_LINK              = ${qbt_cross_host}-g++\n\t\tQMAKE_LINK_SHLIB        = ${qbt_cross_host}-g++\n\n\t\t# modifications to linux.conf\n\t\tQMAKE_AR                = ${qbt_cross_host}-ar cqs\n\t\tQMAKE_OBJCOPY           = ${qbt_cross_host}-objcopy\n\t\tQMAKE_NM                = ${qbt_cross_host}-nm -P\n\t\tQMAKE_STRIP             = ${qbt_cross_host}-strip\n\n\t\tload(qt_config)\n\tQT_MKSPECS\n\n\tif [[ \"${qbt_build_tool}\" == 'cmake' && \"${qbt_qt_version}\" =~ ^6 ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t\"${multi_libtorrent[@]}\" \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_BUILD_TYPE=\"release\" \\\n\t\t\t-D QT_FEATURE_optimize_full=on -D QT_FEATURE_static=on -D QT_FEATURE_shared=off \\\n\t\t\t-D QT_FEATURE_gui=off -D QT_FEATURE_openssl_linked=on -D QT_FEATURE_dbus=off \\\n\t\t\t-D QT_FEATURE_system_pcre2=off -D QT_FEATURE_widgets=off \\\n\t\t\t-D FEATURE_androiddeployqt=OFF -D FEATURE_animation=OFF \\\n\t\t\t-D QT_FEATURE_testlib=off -D QT_BUILD_EXAMPLES=off -D QT_BUILD_TESTS=off \\\n\t\t\t-D QT_BUILD_EXAMPLES_BY_DEFAULT=OFF -D QT_BUILD_TESTS_BY_DEFAULT=OFF \\\n\t\t\t-D CMAKE_CXX_STANDARD=\"${qbt_standard}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir}\" \\\n\t\t\t-D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \\\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\n\t\t\t-D CMAKE_SKIP_RPATH=on -D CMAKE_SKIP_INSTALL_RPATH=on \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\telif [[ \"${qbt_qt_version}\" =~ ^5 ]]; then\n\t\tif [[ \"${qbt_skip_icu}\" == \"no\" ]]; then\n\t\t\ticu=(\"-icu\" \"-no-iconv\" \"QMAKE_CXXFLAGS=-w -fpermissive\")\n\t\telse\n\t\t\ticu=(\"-no-icu\" \"-iconv\" \"QMAKE_CXXFLAGS=-w -fpermissive\")\n\t\tfi\n\t\t# Fix 5.15.4 to build on gcc 11\n\t\tsed '/^#  include <utility>/a #  include <limits>' -i \"src/corelib/global/qglobal.h\"\n\t\t# Don't strip by default by disabling these options. We will set it as off by default and use it with a switch\n\t\tprintf '%b\\n' \"CONFIG                 += ${qbt_strip_qmake}\" >> \"mkspecs/common/linux.conf\"\n\t\t./configure \"${multi_qtbase[@]}\" -prefix \"${qbt_install_dir}\" \"${icu[@]}\" -opensource -confirm-license -release \\\n\t\t\t-openssl-linked -static -c++std \"${qbt_cxx_standard}\" -qt-pcre \\\n\t\t\t-no-feature-glib -no-feature-opengl -no-feature-dbus -no-feature-gui -no-feature-widgets -no-feature-testlib -no-compile-examples \\\n\t\t\t-skip tests -nomake tests -skip examples -nomake examples \\\n\t\t\t-I \"${include_dir}\" -L \"${lib_dir}\" QMAKE_LFLAGS=\"${LDFLAGS}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\telse\n\t\tprintf '\\n%b\\n' \" ${unicode_red_circle} Please use a correct qt and build tool combination\"\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake\"\n\t\texit 1\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_qttools() {\n\tif [[ \"${qbt_build_tool}\" == 'cmake' && \"${qbt_qt_version}\" =~ ^6 ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t\"${multi_libtorrent[@]}\" \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_BUILD_TYPE=\"release\" \\\n\t\t\t-D CMAKE_CXX_STANDARD=\"${qbt_standard}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir}\" \\\n\t\t\t-D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \\\n\t\t\t-D BUILD_SHARED_LIBS=OFF \\\n\t\t\t-D CMAKE_SKIP_RPATH=on -D CMAKE_SKIP_INSTALL_RPATH=on \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\telif [[ \"${qbt_qt_version}\" =~ ^5 ]]; then\n\t\t\"${qbt_install_dir}/bin/qmake\" -set prefix \"${qbt_install_dir}\" |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t\"${qbt_install_dir}/bin/qmake\" QMAKE_CXXFLAGS=\"-std=${qbt_cxx_standard} -static -w -fpermissive\" QMAKE_LFLAGS=\"-static\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\telse\n\t\tprintf '\\n%b\\n' \" ${unicode_red_circle} Please use a correct qt and build tool combination\"\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_green_circle} qt5 + qmake ${unicode_green_circle} qt6 + cmake ${unicode_red_circle} qt5 + cmake ${unicode_red_circle} qt6 + qmake\"\n\t\texit 1\n\tfi\n}\n#######################################################################################################################################################\n# shellcheck disable=SC2317\n_qbittorrent() {\n\t[[ \"${os_id}\" =~ ^(alpine)$ ]] && stacktrace=\"OFF\"\n\n\tif [[ \"${qbt_build_tool}\" == 'cmake' ]]; then\n\t\tmkdir -p \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}\"\n\t\tcmake -Wno-dev -Wno-deprecated --graphviz=\"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\" -G Ninja -B build \\\n\t\t\t\"${multi_qbittorrent[@]}\" \\\n\t\t\t-D CMAKE_VERBOSE_MAKEFILE=\"${qbt_cmake_debug}\" \\\n\t\t\t-D CMAKE_BUILD_TYPE=\"release\" \\\n\t\t\t-D QT6=\"${qbt_use_qt6}\" \\\n\t\t\t-D STACKTRACE=\"${stacktrace:-ON}\" \\\n\t\t\t-D CMAKE_CXX_STANDARD=\"${qbt_standard}\" \\\n\t\t\t-D CMAKE_PREFIX_PATH=\"${qbt_install_dir};${qbt_install_dir}/boost\" \\\n\t\t\t-D Boost_NO_BOOST_CMAKE=TRUE \\\n\t\t\t-D CMAKE_CXX_FLAGS=\"${CXXFLAGS}\" \\\n\t\t\t-D Iconv_LIBRARY=\"${lib_dir}/libiconv.a\" \\\n\t\t\t-D GUI=OFF \\\n\t\t\t-D CMAKE_INSTALL_PREFIX=\"${qbt_install_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tcmake --build build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tcmake --install build |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tdot -Tpng -o \"${qbt_install_dir}/completed/${app_name}-graph.png\" \"${qbt_install_dir}/graphs/${app_name}/${app_version[\"${app_name}\"]}/dep-graph.dot\"\n\telse\n\t\t./bootstrap.sh |& _tee \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t./configure \\\n\t\t\tQT_QMAKE=\"${qbt_install_dir}/bin\" \\\n\t\t\t--prefix=\"${qbt_install_dir}\" \\\n\t\t\t\"${multi_qbittorrent[@]}\" \\\n\t\t\t\"${qbt_qbittorrent_debug}\" \\\n\t\t\t--disable-gui \\\n\t\t\tCXXFLAGS=\"${CXXFLAGS}\" CPPFLAGS=\"${CPPFLAGS}\" LDFLAGS=\"${LDFLAGS}\" \\\n\t\t\t--with-boost=\"${qbt_install_dir}/boost\" --with-boost-libdir=\"${lib_dir}\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\tmake -j\"$(nproc)\" |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\t\t_post_command build\n\t\tmake install |& _tee -a \"${qbt_install_dir}/logs/${app_name}.log\"\n\tfi\n\n\t[[ -f \"${qbt_install_dir}/bin/qbittorrent-nox\" ]] && cp -f \"${qbt_install_dir}/bin/qbittorrent-nox\" \"${qbt_install_dir}/completed/qbittorrent-nox\"\n}\n#######################################################################################################################################################\n# A module installer loop. This will loop through the activated modules and install them via their corresponding functions\n#######################################################################################################################################################\nfor app_name in \"${qbt_modules[@]}\"; do\n\tif [[ \"${qbt_cache_dir_options}\" != \"bs\" ]] && [[ ! -d \"${qbt_install_dir}/boost\" && \"${app_name}\" =~ (libtorrent|qbittorrent) ]]; then\n\t\tprintf '\\n%b\\n\\n' \" ${unicode_red_circle}${color_red_light} Warning${color_end} This module depends on the boost module. Use them together: ${color_magenta_light}boost ${app_name}${color_end}\"\n\telse\n\t\tif [[ \"${skip_modules[\"${app_name}\"]}\" == \"no\" ]]; then\n\t\t\t############################################################\n\t\t\tskipped_false=$((skipped_false + 1))\n\t\t\t############################################################\n\t\t\tif command -v \"_${app_name}_bootstrap\" &> /dev/null; then\n\t\t\t\t\"_${app_name}_bootstrap\"\n\t\t\tfi\n\t\t\t########################################################\n\t\t\tif [[ \"${app_name}\" =~ (glibc|iconv|icu) ]]; then\n\t\t\t\t_custom_flags_reset\n\t\t\telse\n\t\t\t\t_custom_flags_set\n\t\t\tfi\n\t\t\t############################################################\n\t\t\t_download\n\t\t\t############################################################\n\t\t\t[[ \"${qbt_cache_dir_options}\" == \"bs\" && \"${skipped_false}\" -eq \"${#qbt_modules[@]}\" ]] && printf '\\n'\n\t\t\t[[ \"${qbt_cache_dir_options}\" == \"bs\" ]] && continue\n\t\t\t############################################################\n\t\t\t_apply_patches\n\t\t\t############################################################\n\t\t\t\"_${app_name}\"\n\t\t\t############################################################\n\t\t\t_fix_static_links\n\t\t\t[[ \"${app_name}\" != \"boost\" ]] && _delete_function\n\t\tfi\n\n\t\tif [[ \"${#qbt_modules_skipped[@]}\" -gt '0' ]]; then\n\t\t\tprintf '\\n'\n\t\t\tprintf '%b' \" ${unicode_magenta_light_circle} Activated:\"\n\t\t\tfor skipped_true in \"${qbt_modules_skipped[@]}\"; do\n\t\t\t\tprintf '%b' \" ${color_cyan_light}${skipped_true}${color_end}\"\n\t\t\tdone\n\t\t\tprintf '\\n'\n\t\tfi\n\n\t\t[[ \"${skipped_false}\" -eq \"${#qbt_modules[@]}\" ]] && printf '\\n'\n\tfi\n\t_pushd \"${qbt_working_dir}\"\ndone\n#######################################################################################################################################################\n# We are all done so now exit\n#######################################################################################################################################################\nexit\n"
        },
        {
          "name": "todo.md",
          "type": "blob",
          "size": 0.197265625,
          "content": "-   cache & multiarch\n    -   If you swap multiarch the target cache won't update the crossbuild toolset unless you delete it or bootstrap the cache; add some method to update/download correct toolset.\n"
        }
      ]
    }
  ]
}