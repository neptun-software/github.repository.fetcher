{
  "metadata": {
    "timestamp": 1736568661625,
    "page": 742,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Benjamin-Dobell/nvidia-update",
      "stars": 1297,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0107421875,
          "content": ".DS_Store\n\n"
        },
        {
          "name": "BLACKLIST",
          "type": "blob",
          "size": 0.13671875,
          "content": "387.10.10.10.25.156\n387.10.10.10.25.157\n387.10.10.10.25.158\n387.10.10.10.25.159\n387.10.10.10.25.160\n387.10.10.10.25.161\n387.10.10.10.30.103\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.03515625,
          "content": "Copyright (c) 2018 Benjamin Dobell\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.7275390625,
          "content": "# nVidia Update\n\nThe simplest way to install nVidia drivers on macOS.\n\n# How?\n\nSimply copy and paste the following in a terminal:\n\n```\nbash <(curl -s https://raw.githubusercontent.com/Benjamin-Dobell/nvidia-update/master/nvidia-update.sh)\n```\n\n# How does it work?\n\nThis script installs the _best_ (not necessarily the latest) official nVidia web drivers for your system.\n\nSpecifically, it does the following:\n\n * Checks for official driver updates for your version of macOS.\n * Cross-references against a list of blacklisted drivers, that it'll avoid installing (by default).\n * Properly uninstalls old drivers.\n * Downloads and installs the latest non-blacklisted drivers.\n * On-the-fly patches driver packages so they can be installed on your version of macOS (if necessary).\n * Patches drivers that you've already installed, if they no longer match your macOS version i.e. post macOS update.\n\n## Why not always install the latest drivers?\n\nSometimes nVidia releases drivers that have bugs or performance issues. This script maintains a blacklist of \"bad\" drivers that it won't install by default.\n\n## Why does it sometimes need to patch drivers?\n\nPresently, each nVidia driver release is tied to an exact version of macOS. However, as described above, sometimes it's desirable to install a different release. This script will download the official drivers and patch them on-the-fly so that they can be loaded on your system.\n\nPatching does not involve changing the driver binaries, just a couple of configuration options in some text files.\n\n## Do I need to disable [SIP](https://support.apple.com/en-au/HT204899)?\n\n_No!_\n\nUnlike other alternative approaches that manually mess around with your file system, this tool uses official installers and drivers. Even after patching (where necessary) they install flawlessly on systems with SIP enabled.\n\n## Does this work on real Macs?\n\n_Yes!_\n\nNo need to disable SIP, it just works.\n\n## What do I do after updating macOS to a new version?\n\nSimply run the script again, it'll take care of the rest, updating and/or patching drivers as necessary.\n\n# Install a specific driver version\n\n```\nbash <(curl -s https://raw.githubusercontent.com/Benjamin-Dobell/nvidia-update/master/nvidia-update.sh) <revision>\n```\n\nWhere `<revision>` is a driver version e.g. `378.10.10.10.25.106`\n\n# Downloading the script\n\nYou can clone this repository or download the script with the following command:\n\n```\ncurl -O https://raw.githubusercontent.com/Benjamin-Dobell/nvidia-update/master/nvidia-update.sh\nchmod 755 nvidia-update.sh\n```\n\n## Usage\n\n```\nUsage: ./nvidia-update.sh [--force|-f] [revision]\n```\n\nIf `revision` is not supplied, the latest non-blacklisted driver will be used.\n\n`--force`/`-f` will allow you to reinstall a revision that is already installed.\n\n"
        },
        {
          "name": "nvidia-update.sh",
          "type": "blob",
          "size": 5.943359375,
          "content": "#!/bin/sh\n\nset -e\n\nPLISTBUDDY=/usr/libexec/PlistBuddy\n\nBLACKLIST_URL=https://raw.githubusercontent.com/Benjamin-Dobell/nvidia-update/master/BLACKLIST\nUPDATE_URL=https://gfe.nvidia.com/mac-update\n\nSYSTEM_BUILD=$(system_profiler SPSoftwareDataType | grep 'System Version:' | cut -d '(' -f 2 | cut -d ')' -f 1)\n\nCURRENT_INFO_PATH=/Library/Extensions/NVDAStartupWeb.kext/Contents/Info.plist\nCURRENT_BUNDLE_STRING=\nCURRENT_REQUIRED_OS=\n\nif [ -f \"$CURRENT_INFO_PATH\" ]; then\n\tCURRENT_BUNDLE_STRING=$($PLISTBUDDY -c \"Print CFBundleGetInfoString\" $CURRENT_INFO_PATH)\n\tCURRENT_REQUIRED_OS=$($PLISTBUDDY -c \"Print IOKitPersonalities:NVDAStartup:NVDARequiredOS\" $CURRENT_INFO_PATH)\nfi\n\nFORCE=false\nREVISION=\n\nfunction usage() {\n\tprintf \"Usage: ./$(basename \"$0\") [--force|-f] [revision]\\n\"\n\tprintf \"\\nIf revision is not supplied, the latest non-blacklisted driver will be used.\\n\"\n\texit\n}\n\nfunction temp_pkg_path() {\n\techo \"$TMPDIR/$(uuidgen).pkg\"\n}\n\nfunction realpath() {\n    [[ $1 = /* ]] && echo \"$1\" || echo \"$PWD/${1#./}\"\n}\n\nfunction patch_installed() {\n\tif [[ \"$CURRENT_REQUIRED_OS\" != \"$SYSTEM_BUILD\" ]]; then\n\t\tprintf \"\\n\"\n\t\tread -p \"Your existing drivers need patching to run. Patch them? [Y/n] \" -n 1 -r\n\t\tprintf \"\\n\"\n\n\t\tif [[ $REPLY =~ ^[Yy]$ ]]; then\n\t\t\tsudo $PLISTBUDDY -c \"Set IOKitPersonalities:NVDAStartup:NVDARequiredOS $SYSTEM_BUILD\" $CURRENT_INFO_PATH\n\t\t\tprintf \"\\nDone.\\nPlease restart your system.\\n\"\n\t\tfi\n\tfi\n}\n\nif [[ $# -gt 2 ]]; then\n\tusage\nelif [[ $# -gt 1 ]]; then\n\tif [[ \"$1\" == \"--force\" ]] || [[ \"$1\" == \"-f\" ]]; then\n\t\tFORCE=true\n\t\tREVISION=$2\n\telse\n\t\tusage\n\tfi\nelif [[ $# -gt 0 ]]; then\n\tif [[ \"$1\" == \"--help\" ]] || [[ \"$1\" == \"-h\" ]]; then\n\t\tusage\n\telif [[ \"$1\" == \"--force\" ]] || [[ \"$1\" == \"-f\" ]]; then\n\t\tFORCE=true\n\telse\n\t\tREVISION=$1\n\tfi\nfi\n\nfunction update() {\n\tprintf \"Downloading driver blacklist...\\n\"\n\n\tBLACKLIST=\n\twhile read -r version; do BLACKLIST+=(\"$version\"); done <<<$(curl $BLACKLIST_URL)\n\n\tprintf \"\\nDownloading driver list...\\n\"\n\n\tUPDATE_PLIST=\"$(mktemp)\"\n\n\tcurl $UPDATE_URL -o \"$UPDATE_PLIST\"\n\n\tVERSIONS=$($PLISTBUDDY -c \"Print updates: \" \"$UPDATE_PLIST\" | grep \"version\" | awk -v N=3 '{print $N}')\n\tVERSION_COUNT=$(echo \"$VERSIONS\" | wc -l | xargs)\n\n\tfound_os=false\n\tLATEST_VERSION=\n\tLATEST_URL=\n\n\tfor ((i=0; i<VERSION_COUNT; i++)); do\n\t\tversion=$($PLISTBUDDY -c \"Print updates:$i:version\" \"$UPDATE_PLIST\")\n\t\tos=$($PLISTBUDDY -c \"Print updates:$i:OS\" \"$UPDATE_PLIST\")\n\t\turl=$($PLISTBUDDY -c \"Print updates:$i:downloadURL\" \"$UPDATE_PLIST\")\n\n\t\tif [[ -z \"$REVISION\" ]]; then\n\t\t\tblacklisted=false\n\n\t\t\tif [[ \" ${BLACKLIST[@]} \" =~ \" ${version} \" ]]; then\n\t\t\t\tblacklisted=true\n\t\t\telif [[ -z \"$LATEST_VERSION\" ]]; then\n\t\t\t\tLATEST_VERSION=$version\n\t\t\t\tLATEST_URL=$url\n\t\t\tfi\n\n\t\t\tif [[ \"$found_os\" == \"true\" ]] || [[ \"$os\" == \"$SYSTEM_BUILD\" ]]; then\n\t\t\t\tfound_os=true\n\n\t\t\t\tif [[ \"$blacklisted\" != \"true\" ]]; then\n\t\t\t\t\tREVISION=$version\n\t\t\t\t\tPKG_URL=$url\n\t\t\t\t\tPKG_OS=$os\n\t\t\t\t\tprintf \"\\nThe latest driver revision is $REVISION\\n\"\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\tif [[ \"$version\" == \"$REVISION\" ]]; then\n\t\t\t\tPKG_URL=$url\n\t\t\t\tPKG_OS=$os\n\t\t\t\tbreak\n\t\t\tfi\n\t\tfi\n\tdone\n\n\trm \"$UPDATE_PLIST\"\n\n\tif [[ \"$CURRENT_BUNDLE_STRING\" =~ \"$REVISION\" ]] && [[ \"$FORCE\" != \"true\" ]]; then\n\t\tprintf \"\\n$REVISION is already installed.\\n\"\n\t\tpatch_installed\n\t\texit\n\tfi\n\n\tif [[ -z \"$PKG_URL\" ]]; then\n\t\tif [[ -z \"$REVISION\" ]]; then\n\t\t\tprintf \"\\nCould not find a release for your OS.\\n\\nThe latest recommended release is:\\n $LATEST_VERSION\\n\"\n\n\t\t\tif [[ \"$CURRENT_BUNDLE_STRING\" =~ \"$LATEST_VERSION\" ]] && [[ \"$FORCE\" != \"true\" ]]; then\n\t\t\t\tprintf \"which is already installed.\\n\"\n\t\t\t\tpatch_installed\n\t\t\t\texit\n\t\t\telse\n\t\t\t\tprintf \"\\n\"\n\t\t\t\tread -p \"Do you want to install that now? [Y/n] \" -n 1 -r\n\t\t\t\tprintf \"\\n\"\n\n\t\t\t\tif [[ $REPLY =~ ^[Yy]$ ]]; then\n\t\t\t\t\tREVISION=$LATEST_VERSION\n\t\t\t\t\tPKG_URL=$LATEST_URL\n\t\t\t\telse\n\t\t\t\t\tpatch_installed\n\t\t\t\t\texit\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\tprintf \"\\nUnknown revision: $REVISION\\n\"\n\t\t\texit\n\t\tfi\n\tfi\n\n\tPKG_PATH=\"$(temp_pkg_path)\"\n\n\tprintf \"\\nDownloading $REVISION drivers...\\n\"\n\tcurl $PKG_URL -o \"$PKG_PATH\"\n\n\tif [[ \"$PKG_OS\" != \"$SYSTEM_BUILD\" ]]; then\n\t\tprintf \"\\nPatching package...\\n\"\n\n\t\tTEMP_DIR=\"$(mktemp -d)\"\n\t\tEXPANDED_DIR=\"$TEMP_DIR/expanded\"\n\n\t\tsudo pkgutil --expand \"$PKG_PATH\" \"$EXPANDED_DIR\"\n\n\t\trm \"$PKG_PATH\"\n\n\t\tsudo cat \"$EXPANDED_DIR/Distribution\" | sed '/installation-check/d' | sudo tee \"$EXPANDED_DIR/DistributionTEMP\" > /dev/null\n\t\tsudo mv \"$EXPANDED_DIR/DistributionTEMP\" \"$EXPANDED_DIR/Distribution\"\n\n\t\tprintf \"Patched install requirements.\\n\"\n\n\t\tWEB_DRIVERS_PATH=\"$EXPANDED_DIR/$(ls \"$EXPANDED_DIR\" | grep NVWebDrivers.pkg)\"\n\t\tPAYLOAD_PATH=\"$(realpath \"$WEB_DRIVERS_PATH/Payload\")\"\n\t\tBOM_PATH=\"$(realpath \"$WEB_DRIVERS_PATH/Bom\")\"\n\n\t\tPAYLOAD_TEMP_DIR=\"$(mktemp -d)\"\n\n\t\t(cd \"$PAYLOAD_TEMP_DIR\"; sudo cat \"$PAYLOAD_PATH\" | gunzip -dc | cpio -i --quiet)\n\t\t$PLISTBUDDY -c \"Set IOKitPersonalities:NVDAStartup:NVDARequiredOS $SYSTEM_BUILD\" \"$PAYLOAD_TEMP_DIR/Library/Extensions/NVDAStartupWeb.kext/Contents/Info.plist\"\n\t\tsudo chown -R root:wheel \"$PAYLOAD_TEMP_DIR/\"*\n\t\tprintf \"Patched extension.\\n\"\n\n\t\tprintf \"\\nRepackaging...\\n\"\n\n\t\t(cd \"$PAYLOAD_TEMP_DIR\"; sudo find . | sudo cpio -o --quiet | gzip -c | sudo tee \"$PAYLOAD_PATH\" > /dev/null)\n\t\t(cd \"$PAYLOAD_TEMP_DIR\"; sudo mkbom . \"$BOM_PATH\")\n\n\t\tsudo rm -rf \"$PAYLOAD_TEMP_DIR\"\n\n\t\tPKG_PATH=\"$(temp_pkg_path)\"\n\n\t\tsudo pkgutil --flatten \"$EXPANDED_DIR\" \"$PKG_PATH\"\n\t\tsudo chown \"$(id -un):$(id -gn)\" \"$PKG_PATH\"\n\n\t\tsudo rm -rf \"$TEMP_DIR\"\n\tfi\n\n\tUNINSTALL_PKG_PATH=\"/Library/PreferencePanes/NVIDIA Driver Manager.prefPane/Contents/MacOS/NVIDIA Web Driver Uninstaller.app/Contents/Resources/NVUninstall.pkg\"\n\n\tif [[ -f \"$UNINSTALL_PKG_PATH\" ]]; then\n\t\tprintf \"\\nUninstalling previous drivers...\\n\"\n\t\tsudo installer -pkg \"$UNINSTALL_PKG_PATH\" -target /\n\tfi\n\n\t# Try remove NVidia user-mode left-overs. Only possible if SIP is disabled.\n\tsudo rm -rf /Library/GPUBundles/GeForce*Web.bundle > /dev/null 2>&1 || true\n\n\tprintf \"\\nInstalling new drivers...\\n\"\n\tsudo installer -pkg \"$PKG_PATH\" -allowUntrusted -target /\n\trm \"$PKG_PATH\"\n\n\tprintf \"\\nDone.\\nPlease restart your system.\\n\"\n}\n\nupdate\n"
        }
      ]
    }
  ]
}