{
  "metadata": {
    "timestamp": 1736568179068,
    "page": 3,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "GaiaNet-AI/gaianet-node",
      "stars": 4865,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.4140625,
          "content": "# Generated by Cargo\n# will have compiled files and executables\ndebug/\ntarget/\n\n# Remove Cargo.lock from gitignore if creating an executable, leave it for libraries\n# More information here https://doc.rust-lang.org/cargo/guide/cargo-toml-vs-cargo-lock.html\nCargo.lock\n\n# These are backup files generated by rustfmt\n**/*.rs.bk\n\n# MSVC Windows builds of rustc generate these, which store debugging information\n*.pdb\n.DS_Store\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 34.3251953125,
          "content": "                    GNU GENERAL PUBLIC LICENSE\n                       Version 3, 29 June 2007\n\n Copyright (C) 2007 Free Software Foundation, Inc. <https://fsf.org/>\n Everyone is permitted to copy and distribute verbatim copies\n of this license document, but changing it is not allowed.\n\n                            Preamble\n\n  The GNU General Public License is a free, copyleft license for\nsoftware and other kinds of works.\n\n  The licenses for most software and other practical works are designed\nto take away your freedom to share and change the works.  By contrast,\nthe GNU General Public License is intended to guarantee your freedom to\nshare and change all versions of a program--to make sure it remains free\nsoftware for all its users.  We, the Free Software Foundation, use the\nGNU General Public License for most of our software; it applies also to\nany other work released this way by its authors.  You can apply it to\nyour programs, too.\n\n  When we speak of free software, we are referring to freedom, not\nprice.  Our General Public Licenses are designed to make sure that you\nhave the freedom to distribute copies of free software (and charge for\nthem if you wish), that you receive source code or can get it if you\nwant it, that you can change the software or use pieces of it in new\nfree programs, and that you know you can do these things.\n\n  To protect your rights, we need to prevent others from denying you\nthese rights or asking you to surrender the rights.  Therefore, you have\ncertain responsibilities if you distribute copies of the software, or if\nyou modify it: responsibilities to respect the freedom of others.\n\n  For example, if you distribute copies of such a program, whether\ngratis or for a fee, you must pass on to the recipients the same\nfreedoms that you received.  You must make sure that they, too, receive\nor can get the source code.  And you must show them these terms so they\nknow their rights.\n\n  Developers that use the GNU GPL protect your rights with two steps:\n(1) assert copyright on the software, and (2) offer you this License\ngiving you legal permission to copy, distribute and/or modify it.\n\n  For the developers' and authors' protection, the GPL clearly explains\nthat there is no warranty for this free software.  For both users' and\nauthors' sake, the GPL requires that modified versions be marked as\nchanged, so that their problems will not be attributed erroneously to\nauthors of previous versions.\n\n  Some devices are designed to deny users access to install or run\nmodified versions of the software inside them, although the manufacturer\ncan do so.  This is fundamentally incompatible with the aim of\nprotecting users' freedom to change the software.  The systematic\npattern of such abuse occurs in the area of products for individuals to\nuse, which is precisely where it is most unacceptable.  Therefore, we\nhave designed this version of the GPL to prohibit the practice for those\nproducts.  If such problems arise substantially in other domains, we\nstand ready to extend this provision to those domains in future versions\nof the GPL, as needed to protect the freedom of users.\n\n  Finally, every program is threatened constantly by software patents.\nStates should not allow patents to restrict development and use of\nsoftware on general-purpose computers, but in those that do, we wish to\navoid the special danger that patents applied to a free program could\nmake it effectively proprietary.  To prevent this, the GPL assures that\npatents cannot be used to render the program non-free.\n\n  The precise terms and conditions for copying, distribution and\nmodification follow.\n\n                       TERMS AND CONDITIONS\n\n  0. Definitions.\n\n  \"This License\" refers to version 3 of the GNU General Public License.\n\n  \"Copyright\" also means copyright-like laws that apply to other kinds of\nworks, such as semiconductor masks.\n\n  \"The Program\" refers to any copyrightable work licensed under this\nLicense.  Each licensee is addressed as \"you\".  \"Licensees\" and\n\"recipients\" may be individuals or organizations.\n\n  To \"modify\" a work means to copy from or adapt all or part of the work\nin a fashion requiring copyright permission, other than the making of an\nexact copy.  The resulting work is called a \"modified version\" of the\nearlier work or a work \"based on\" the earlier work.\n\n  A \"covered work\" means either the unmodified Program or a work based\non the Program.\n\n  To \"propagate\" a work means to do anything with it that, without\npermission, would make you directly or secondarily liable for\ninfringement under applicable copyright law, except executing it on a\ncomputer or modifying a private copy.  Propagation includes copying,\ndistribution (with or without modification), making available to the\npublic, and in some countries other activities as well.\n\n  To \"convey\" a work means any kind of propagation that enables other\nparties to make or receive copies.  Mere interaction with a user through\na computer network, with no transfer of a copy, is not conveying.\n\n  An interactive user interface displays \"Appropriate Legal Notices\"\nto the extent that it includes a convenient and prominently visible\nfeature that (1) displays an appropriate copyright notice, and (2)\ntells the user that there is no warranty for the work (except to the\nextent that warranties are provided), that licensees may convey the\nwork under this License, and how to view a copy of this License.  If\nthe interface presents a list of user commands or options, such as a\nmenu, a prominent item in the list meets this criterion.\n\n  1. Source Code.\n\n  The \"source code\" for a work means the preferred form of the work\nfor making modifications to it.  \"Object code\" means any non-source\nform of a work.\n\n  A \"Standard Interface\" means an interface that either is an official\nstandard defined by a recognized standards body, or, in the case of\ninterfaces specified for a particular programming language, one that\nis widely used among developers working in that language.\n\n  The \"System Libraries\" of an executable work include anything, other\nthan the work as a whole, that (a) is included in the normal form of\npackaging a Major Component, but which is not part of that Major\nComponent, and (b) serves only to enable use of the work with that\nMajor Component, or to implement a Standard Interface for which an\nimplementation is available to the public in source code form.  A\n\"Major Component\", in this context, means a major essential component\n(kernel, window system, and so on) of the specific operating system\n(if any) on which the executable work runs, or a compiler used to\nproduce the work, or an object code interpreter used to run it.\n\n  The \"Corresponding Source\" for a work in object code form means all\nthe source code needed to generate, install, and (for an executable\nwork) run the object code and to modify the work, including scripts to\ncontrol those activities.  However, it does not include the work's\nSystem Libraries, or general-purpose tools or generally available free\nprograms which are used unmodified in performing those activities but\nwhich are not part of the work.  For example, Corresponding Source\nincludes interface definition files associated with source files for\nthe work, and the source code for shared libraries and dynamically\nlinked subprograms that the work is specifically designed to require,\nsuch as by intimate data communication or control flow between those\nsubprograms and other parts of the work.\n\n  The Corresponding Source need not include anything that users\ncan regenerate automatically from other parts of the Corresponding\nSource.\n\n  The Corresponding Source for a work in source code form is that\nsame work.\n\n  2. Basic Permissions.\n\n  All rights granted under this License are granted for the term of\ncopyright on the Program, and are irrevocable provided the stated\nconditions are met.  This License explicitly affirms your unlimited\npermission to run the unmodified Program.  The output from running a\ncovered work is covered by this License only if the output, given its\ncontent, constitutes a covered work.  This License acknowledges your\nrights of fair use or other equivalent, as provided by copyright law.\n\n  You may make, run and propagate covered works that you do not\nconvey, without conditions so long as your license otherwise remains\nin force.  You may convey covered works to others for the sole purpose\nof having them make modifications exclusively for you, or provide you\nwith facilities for running those works, provided that you comply with\nthe terms of this License in conveying all material for which you do\nnot control copyright.  Those thus making or running the covered works\nfor you must do so exclusively on your behalf, under your direction\nand control, on terms that prohibit them from making any copies of\nyour copyrighted material outside their relationship with you.\n\n  Conveying under any other circumstances is permitted solely under\nthe conditions stated below.  Sublicensing is not allowed; section 10\nmakes it unnecessary.\n\n  3. Protecting Users' Legal Rights From Anti-Circumvention Law.\n\n  No covered work shall be deemed part of an effective technological\nmeasure under any applicable law fulfilling obligations under article\n11 of the WIPO copyright treaty adopted on 20 December 1996, or\nsimilar laws prohibiting or restricting circumvention of such\nmeasures.\n\n  When you convey a covered work, you waive any legal power to forbid\ncircumvention of technological measures to the extent such circumvention\nis effected by exercising rights under this License with respect to\nthe covered work, and you disclaim any intention to limit operation or\nmodification of the work as a means of enforcing, against the work's\nusers, your or third parties' legal rights to forbid circumvention of\ntechnological measures.\n\n  4. Conveying Verbatim Copies.\n\n  You may convey verbatim copies of the Program's source code as you\nreceive it, in any medium, provided that you conspicuously and\nappropriately publish on each copy an appropriate copyright notice;\nkeep intact all notices stating that this License and any\nnon-permissive terms added in accord with section 7 apply to the code;\nkeep intact all notices of the absence of any warranty; and give all\nrecipients a copy of this License along with the Program.\n\n  You may charge any price or no price for each copy that you convey,\nand you may offer support or warranty protection for a fee.\n\n  5. Conveying Modified Source Versions.\n\n  You may convey a work based on the Program, or the modifications to\nproduce it from the Program, in the form of source code under the\nterms of section 4, provided that you also meet all of these conditions:\n\n    a) The work must carry prominent notices stating that you modified\n    it, and giving a relevant date.\n\n    b) The work must carry prominent notices stating that it is\n    released under this License and any conditions added under section\n    7.  This requirement modifies the requirement in section 4 to\n    \"keep intact all notices\".\n\n    c) You must license the entire work, as a whole, under this\n    License to anyone who comes into possession of a copy.  This\n    License will therefore apply, along with any applicable section 7\n    additional terms, to the whole of the work, and all its parts,\n    regardless of how they are packaged.  This License gives no\n    permission to license the work in any other way, but it does not\n    invalidate such permission if you have separately received it.\n\n    d) If the work has interactive user interfaces, each must display\n    Appropriate Legal Notices; however, if the Program has interactive\n    interfaces that do not display Appropriate Legal Notices, your\n    work need not make them do so.\n\n  A compilation of a covered work with other separate and independent\nworks, which are not by their nature extensions of the covered work,\nand which are not combined with it such as to form a larger program,\nin or on a volume of a storage or distribution medium, is called an\n\"aggregate\" if the compilation and its resulting copyright are not\nused to limit the access or legal rights of the compilation's users\nbeyond what the individual works permit.  Inclusion of a covered work\nin an aggregate does not cause this License to apply to the other\nparts of the aggregate.\n\n  6. Conveying Non-Source Forms.\n\n  You may convey a covered work in object code form under the terms\nof sections 4 and 5, provided that you also convey the\nmachine-readable Corresponding Source under the terms of this License,\nin one of these ways:\n\n    a) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by the\n    Corresponding Source fixed on a durable physical medium\n    customarily used for software interchange.\n\n    b) Convey the object code in, or embodied in, a physical product\n    (including a physical distribution medium), accompanied by a\n    written offer, valid for at least three years and valid for as\n    long as you offer spare parts or customer support for that product\n    model, to give anyone who possesses the object code either (1) a\n    copy of the Corresponding Source for all the software in the\n    product that is covered by this License, on a durable physical\n    medium customarily used for software interchange, for a price no\n    more than your reasonable cost of physically performing this\n    conveying of source, or (2) access to copy the\n    Corresponding Source from a network server at no charge.\n\n    c) Convey individual copies of the object code with a copy of the\n    written offer to provide the Corresponding Source.  This\n    alternative is allowed only occasionally and noncommercially, and\n    only if you received the object code with such an offer, in accord\n    with subsection 6b.\n\n    d) Convey the object code by offering access from a designated\n    place (gratis or for a charge), and offer equivalent access to the\n    Corresponding Source in the same way through the same place at no\n    further charge.  You need not require recipients to copy the\n    Corresponding Source along with the object code.  If the place to\n    copy the object code is a network server, the Corresponding Source\n    may be on a different server (operated by you or a third party)\n    that supports equivalent copying facilities, provided you maintain\n    clear directions next to the object code saying where to find the\n    Corresponding Source.  Regardless of what server hosts the\n    Corresponding Source, you remain obligated to ensure that it is\n    available for as long as needed to satisfy these requirements.\n\n    e) Convey the object code using peer-to-peer transmission, provided\n    you inform other peers where the object code and Corresponding\n    Source of the work are being offered to the general public at no\n    charge under subsection 6d.\n\n  A separable portion of the object code, whose source code is excluded\nfrom the Corresponding Source as a System Library, need not be\nincluded in conveying the object code work.\n\n  A \"User Product\" is either (1) a \"consumer product\", which means any\ntangible personal property which is normally used for personal, family,\nor household purposes, or (2) anything designed or sold for incorporation\ninto a dwelling.  In determining whether a product is a consumer product,\ndoubtful cases shall be resolved in favor of coverage.  For a particular\nproduct received by a particular user, \"normally used\" refers to a\ntypical or common use of that class of product, regardless of the status\nof the particular user or of the way in which the particular user\nactually uses, or expects or is expected to use, the product.  A product\nis a consumer product regardless of whether the product has substantial\ncommercial, industrial or non-consumer uses, unless such uses represent\nthe only significant mode of use of the product.\n\n  \"Installation Information\" for a User Product means any methods,\nprocedures, authorization keys, or other information required to install\nand execute modified versions of a covered work in that User Product from\na modified version of its Corresponding Source.  The information must\nsuffice to ensure that the continued functioning of the modified object\ncode is in no case prevented or interfered with solely because\nmodification has been made.\n\n  If you convey an object code work under this section in, or with, or\nspecifically for use in, a User Product, and the conveying occurs as\npart of a transaction in which the right of possession and use of the\nUser Product is transferred to the recipient in perpetuity or for a\nfixed term (regardless of how the transaction is characterized), the\nCorresponding Source conveyed under this section must be accompanied\nby the Installation Information.  But this requirement does not apply\nif neither you nor any third party retains the ability to install\nmodified object code on the User Product (for example, the work has\nbeen installed in ROM).\n\n  The requirement to provide Installation Information does not include a\nrequirement to continue to provide support service, warranty, or updates\nfor a work that has been modified or installed by the recipient, or for\nthe User Product in which it has been modified or installed.  Access to a\nnetwork may be denied when the modification itself materially and\nadversely affects the operation of the network or violates the rules and\nprotocols for communication across the network.\n\n  Corresponding Source conveyed, and Installation Information provided,\nin accord with this section must be in a format that is publicly\ndocumented (and with an implementation available to the public in\nsource code form), and must require no special password or key for\nunpacking, reading or copying.\n\n  7. Additional Terms.\n\n  \"Additional permissions\" are terms that supplement the terms of this\nLicense by making exceptions from one or more of its conditions.\nAdditional permissions that are applicable to the entire Program shall\nbe treated as though they were included in this License, to the extent\nthat they are valid under applicable law.  If additional permissions\napply only to part of the Program, that part may be used separately\nunder those permissions, but the entire Program remains governed by\nthis License without regard to the additional permissions.\n\n  When you convey a copy of a covered work, you may at your option\nremove any additional permissions from that copy, or from any part of\nit.  (Additional permissions may be written to require their own\nremoval in certain cases when you modify the work.)  You may place\nadditional permissions on material, added by you to a covered work,\nfor which you have or can give appropriate copyright permission.\n\n  Notwithstanding any other provision of this License, for material you\nadd to a covered work, you may (if authorized by the copyright holders of\nthat material) supplement the terms of this License with terms:\n\n    a) Disclaiming warranty or limiting liability differently from the\n    terms of sections 15 and 16 of this License; or\n\n    b) Requiring preservation of specified reasonable legal notices or\n    author attributions in that material or in the Appropriate Legal\n    Notices displayed by works containing it; or\n\n    c) Prohibiting misrepresentation of the origin of that material, or\n    requiring that modified versions of such material be marked in\n    reasonable ways as different from the original version; or\n\n    d) Limiting the use for publicity purposes of names of licensors or\n    authors of the material; or\n\n    e) Declining to grant rights under trademark law for use of some\n    trade names, trademarks, or service marks; or\n\n    f) Requiring indemnification of licensors and authors of that\n    material by anyone who conveys the material (or modified versions of\n    it) with contractual assumptions of liability to the recipient, for\n    any liability that these contractual assumptions directly impose on\n    those licensors and authors.\n\n  All other non-permissive additional terms are considered \"further\nrestrictions\" within the meaning of section 10.  If the Program as you\nreceived it, or any part of it, contains a notice stating that it is\ngoverned by this License along with a term that is a further\nrestriction, you may remove that term.  If a license document contains\na further restriction but permits relicensing or conveying under this\nLicense, you may add to a covered work material governed by the terms\nof that license document, provided that the further restriction does\nnot survive such relicensing or conveying.\n\n  If you add terms to a covered work in accord with this section, you\nmust place, in the relevant source files, a statement of the\nadditional terms that apply to those files, or a notice indicating\nwhere to find the applicable terms.\n\n  Additional terms, permissive or non-permissive, may be stated in the\nform of a separately written license, or stated as exceptions;\nthe above requirements apply either way.\n\n  8. Termination.\n\n  You may not propagate or modify a covered work except as expressly\nprovided under this License.  Any attempt otherwise to propagate or\nmodify it is void, and will automatically terminate your rights under\nthis License (including any patent licenses granted under the third\nparagraph of section 11).\n\n  However, if you cease all violation of this License, then your\nlicense from a particular copyright holder is reinstated (a)\nprovisionally, unless and until the copyright holder explicitly and\nfinally terminates your license, and (b) permanently, if the copyright\nholder fails to notify you of the violation by some reasonable means\nprior to 60 days after the cessation.\n\n  Moreover, your license from a particular copyright holder is\nreinstated permanently if the copyright holder notifies you of the\nviolation by some reasonable means, this is the first time you have\nreceived notice of violation of this License (for any work) from that\ncopyright holder, and you cure the violation prior to 30 days after\nyour receipt of the notice.\n\n  Termination of your rights under this section does not terminate the\nlicenses of parties who have received copies or rights from you under\nthis License.  If your rights have been terminated and not permanently\nreinstated, you do not qualify to receive new licenses for the same\nmaterial under section 10.\n\n  9. Acceptance Not Required for Having Copies.\n\n  You are not required to accept this License in order to receive or\nrun a copy of the Program.  Ancillary propagation of a covered work\noccurring solely as a consequence of using peer-to-peer transmission\nto receive a copy likewise does not require acceptance.  However,\nnothing other than this License grants you permission to propagate or\nmodify any covered work.  These actions infringe copyright if you do\nnot accept this License.  Therefore, by modifying or propagating a\ncovered work, you indicate your acceptance of this License to do so.\n\n  10. Automatic Licensing of Downstream Recipients.\n\n  Each time you convey a covered work, the recipient automatically\nreceives a license from the original licensors, to run, modify and\npropagate that work, subject to this License.  You are not responsible\nfor enforcing compliance by third parties with this License.\n\n  An \"entity transaction\" is a transaction transferring control of an\norganization, or substantially all assets of one, or subdividing an\norganization, or merging organizations.  If propagation of a covered\nwork results from an entity transaction, each party to that\ntransaction who receives a copy of the work also receives whatever\nlicenses to the work the party's predecessor in interest had or could\ngive under the previous paragraph, plus a right to possession of the\nCorresponding Source of the work from the predecessor in interest, if\nthe predecessor has it or can get it with reasonable efforts.\n\n  You may not impose any further restrictions on the exercise of the\nrights granted or affirmed under this License.  For example, you may\nnot impose a license fee, royalty, or other charge for exercise of\nrights granted under this License, and you may not initiate litigation\n(including a cross-claim or counterclaim in a lawsuit) alleging that\nany patent claim is infringed by making, using, selling, offering for\nsale, or importing the Program or any portion of it.\n\n  11. Patents.\n\n  A \"contributor\" is a copyright holder who authorizes use under this\nLicense of the Program or a work on which the Program is based.  The\nwork thus licensed is called the contributor's \"contributor version\".\n\n  A contributor's \"essential patent claims\" are all patent claims\nowned or controlled by the contributor, whether already acquired or\nhereafter acquired, that would be infringed by some manner, permitted\nby this License, of making, using, or selling its contributor version,\nbut do not include claims that would be infringed only as a\nconsequence of further modification of the contributor version.  For\npurposes of this definition, \"control\" includes the right to grant\npatent sublicenses in a manner consistent with the requirements of\nthis License.\n\n  Each contributor grants you a non-exclusive, worldwide, royalty-free\npatent license under the contributor's essential patent claims, to\nmake, use, sell, offer for sale, import and otherwise run, modify and\npropagate the contents of its contributor version.\n\n  In the following three paragraphs, a \"patent license\" is any express\nagreement or commitment, however denominated, not to enforce a patent\n(such as an express permission to practice a patent or covenant not to\nsue for patent infringement).  To \"grant\" such a patent license to a\nparty means to make such an agreement or commitment not to enforce a\npatent against the party.\n\n  If you convey a covered work, knowingly relying on a patent license,\nand the Corresponding Source of the work is not available for anyone\nto copy, free of charge and under the terms of this License, through a\npublicly available network server or other readily accessible means,\nthen you must either (1) cause the Corresponding Source to be so\navailable, or (2) arrange to deprive yourself of the benefit of the\npatent license for this particular work, or (3) arrange, in a manner\nconsistent with the requirements of this License, to extend the patent\nlicense to downstream recipients.  \"Knowingly relying\" means you have\nactual knowledge that, but for the patent license, your conveying the\ncovered work in a country, or your recipient's use of the covered work\nin a country, would infringe one or more identifiable patents in that\ncountry that you have reason to believe are valid.\n\n  If, pursuant to or in connection with a single transaction or\narrangement, you convey, or propagate by procuring conveyance of, a\ncovered work, and grant a patent license to some of the parties\nreceiving the covered work authorizing them to use, propagate, modify\nor convey a specific copy of the covered work, then the patent license\nyou grant is automatically extended to all recipients of the covered\nwork and works based on it.\n\n  A patent license is \"discriminatory\" if it does not include within\nthe scope of its coverage, prohibits the exercise of, or is\nconditioned on the non-exercise of one or more of the rights that are\nspecifically granted under this License.  You may not convey a covered\nwork if you are a party to an arrangement with a third party that is\nin the business of distributing software, under which you make payment\nto the third party based on the extent of your activity of conveying\nthe work, and under which the third party grants, to any of the\nparties who would receive the covered work from you, a discriminatory\npatent license (a) in connection with copies of the covered work\nconveyed by you (or copies made from those copies), or (b) primarily\nfor and in connection with specific products or compilations that\ncontain the covered work, unless you entered into that arrangement,\nor that patent license was granted, prior to 28 March 2007.\n\n  Nothing in this License shall be construed as excluding or limiting\nany implied license or other defenses to infringement that may\notherwise be available to you under applicable patent law.\n\n  12. No Surrender of Others' Freedom.\n\n  If conditions are imposed on you (whether by court order, agreement or\notherwise) that contradict the conditions of this License, they do not\nexcuse you from the conditions of this License.  If you cannot convey a\ncovered work so as to satisfy simultaneously your obligations under this\nLicense and any other pertinent obligations, then as a consequence you may\nnot convey it at all.  For example, if you agree to terms that obligate you\nto collect a royalty for further conveying from those to whom you convey\nthe Program, the only way you could satisfy both those terms and this\nLicense would be to refrain entirely from conveying the Program.\n\n  13. Use with the GNU Affero General Public License.\n\n  Notwithstanding any other provision of this License, you have\npermission to link or combine any covered work with a work licensed\nunder version 3 of the GNU Affero General Public License into a single\ncombined work, and to convey the resulting work.  The terms of this\nLicense will continue to apply to the part which is the covered work,\nbut the special requirements of the GNU Affero General Public License,\nsection 13, concerning interaction through a network will apply to the\ncombination as such.\n\n  14. Revised Versions of this License.\n\n  The Free Software Foundation may publish revised and/or new versions of\nthe GNU General Public License from time to time.  Such new versions will\nbe similar in spirit to the present version, but may differ in detail to\naddress new problems or concerns.\n\n  Each version is given a distinguishing version number.  If the\nProgram specifies that a certain numbered version of the GNU General\nPublic License \"or any later version\" applies to it, you have the\noption of following the terms and conditions either of that numbered\nversion or of any later version published by the Free Software\nFoundation.  If the Program does not specify a version number of the\nGNU General Public License, you may choose any version ever published\nby the Free Software Foundation.\n\n  If the Program specifies that a proxy can decide which future\nversions of the GNU General Public License can be used, that proxy's\npublic statement of acceptance of a version permanently authorizes you\nto choose that version for the Program.\n\n  Later license versions may give you additional or different\npermissions.  However, no additional obligations are imposed on any\nauthor or copyright holder as a result of your choosing to follow a\nlater version.\n\n  15. Disclaimer of Warranty.\n\n  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY\nAPPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT\nHOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM \"AS IS\" WITHOUT WARRANTY\nOF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,\nTHE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR\nPURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM\nIS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF\nALL NECESSARY SERVICING, REPAIR OR CORRECTION.\n\n  16. Limitation of Liability.\n\n  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING\nWILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS\nTHE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY\nGENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE\nUSE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF\nDATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD\nPARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),\nEVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF\nSUCH DAMAGES.\n\n  17. Interpretation of Sections 15 and 16.\n\n  If the disclaimer of warranty and limitation of liability provided\nabove cannot be given local legal effect according to their terms,\nreviewing courts shall apply local law that most closely approximates\nan absolute waiver of all civil liability in connection with the\nProgram, unless a warranty or assumption of liability accompanies a\ncopy of the Program in return for a fee.\n\n                     END OF TERMS AND CONDITIONS\n\n            How to Apply These Terms to Your New Programs\n\n  If you develop a new program, and you want it to be of the greatest\npossible use to the public, the best way to achieve this is to make it\nfree software which everyone can redistribute and change under these terms.\n\n  To do so, attach the following notices to the program.  It is safest\nto attach them to the start of each source file to most effectively\nstate the exclusion of warranty; and each file should have at least\nthe \"copyright\" line and a pointer to where the full notice is found.\n\n    <one line to give the program's name and a brief idea of what it does.>\n    Copyright (C) <year>  <name of author>\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n\nAlso add information on how to contact you by electronic and paper mail.\n\n  If the program does terminal interaction, make it output a short\nnotice like this when it starts in an interactive mode:\n\n    <program>  Copyright (C) <year>  <name of author>\n    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.\n    This is free software, and you are welcome to redistribute it\n    under certain conditions; type `show c' for details.\n\nThe hypothetical commands `show w' and `show c' should show the appropriate\nparts of the General Public License.  Of course, your program's commands\nmight be different; for a GUI interface, you would use an \"about box\".\n\n  You should also get your employer (if you work as a programmer) or school,\nif any, to sign a \"copyright disclaimer\" for the program, if necessary.\nFor more information on this, and how to apply and follow the GNU GPL, see\n<https://www.gnu.org/licenses/>.\n\n  The GNU General Public License does not permit incorporating your program\ninto proprietary programs.  If your program is a subroutine library, you\nmay consider it more useful to permit linking proprietary applications with\nthe library.  If this is what you want to do, use the GNU Lesser General\nPublic License instead of this License.  But first, please read\n<https://www.gnu.org/licenses/why-not-lgpl.html>.\n"
        },
        {
          "name": "README-ar.md",
          "type": "blob",
          "size": 9.8466796875,
          "content": "# قم بتشغيل عقدة Gaianet الخاصة بك\n\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n\n\n[إنجليزي(English)](README.md) | [اليابانية(日本語)](README-ja.md) | [الصينية(中文)](README-cn.md) | [التركية (Türkçe)](README-tr.md) | [العربية (العَرَبية)](README-ar.md) | نحتاجُ الى مساعدتك في ترجمة  هذا الملف الى لغتك الأم.\n\n\nأعجَبَك عَمَلُنا؟ ⭐ قَيْمِنّا بنجمة!\n---\n\n## بداية سريعة\n\nقم بتثبيت حزمة برامج العقدة الافتراضية باستخدام أمر واحد على نظام التشغيل Mac أو Linux أو Windows WSL.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nثم اتبع التعليمات على شاشتك لإعداد مسار البيئة, سيبدأ سطر الأوامر بالأمر `source`.\n\nقم بتهيئة العقدة. ستقوم بتنزيل ملفات النماذج وقواعد بيانات المتجهات المحددة في ملف `$HOME/gaianet/config.json`، وقد يستغرق ذلك بضع دقائق نظرًا لحجم الملفات الكبير.\n\n```bash\ngaianet init\n```\n\nابدأ العقدة.\n\n```bash\ngaianet start\n```\nسيقوم النص بطباعة عنوان العقدة الرسمي على الكونسول كما يلي.\nيمكنك فتح المتصفح على ذلك العنوان لرؤية معلومات العقدة ثم التحدث مع وكيل الذكاء الاصطناعي على العقدة.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\nلإيقاف العقدة, يمكنك تشغيل الأمر الآتي:\n\n```bash\ngaianet stop\n```\n\n## دليل التثبيت\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> يجب أن تبدو النتائج كما يلي: </summary>\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n</details>\n\nبشكل افتراضي, يتم التثبيت ب `$HOME/gaianet`, يمكنك أيضًا أن تختارَ عنوانًا بديلاً.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## تهيئة العقدة\n\n```\ngaianet init\n```\n\n<details><summary> يجب أن تبدو النتيجة كما يلي: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\nيعمل أمر `init` على تهيئة العقدة وفقًا لملف `$HOME/gaianet/config.json`. يمكنك استخدام بعض التكوينات المعدة مسبقًا. على سبيل المثال، الأمر أدناه يقوم بتهيئة عقدة باستخدام نموذج llama-3 8B مع دليل لندن كقاعدة معرفية.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nلرؤية قائمة تكوينات معدة مسبقًا, بإمكانك تشغيل `gaianet init --help`.\nبالإضافة إلى التكوينات المعدة مسبقًا مثل `gaianet_docs`، يمكنك أيضًا تمرير عنوان URL إلى ملف `config.json` الخاص بك ليتم تهيئة العقدة بالحالة التي ترغب فيها.\n\n\nإذا كنت بحاجة إلى تهيئة-`init`- عقدة مثبتة في دليل بديل، قم بذلك على النحو التالي.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## إبدأ العقدة\n\n```\ngaianet start\n```\n\n<details><summary> النتيجة يجب أن تكون كما يلي: </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n</details>\n\nيمكنك بدء العقدة للاستخدام المحلي. ستكون متاحة فقط عبر `localhost` ولن تكون متاحة على أي من عناوين URL العامة لنطاقات GaiaNet.\n\n```bash\ngaianet start --local-only\n```\n\nيمكنك أيضًا بدء عقدة مثبتة في دليل أساسي بديل.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### أوقف العقدة\n\n```bash\ngaianet stop\n```\n\n<details><summary> النتيجة يجب أن تبدو كما يلي: </summary>\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n</details>\n\nإيقاف عقدة مثبتة في دليل أساسي بديل.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### تحديث التكوين\n\nباستخدام الأمر الفرعي `gaianet config` يمكنك تحديث الحقول الأساسية المحددة في ملف `config.json`. **يجب** عليك تشغيل `gaianet init` مرة أخرى بعد تحديث التكوين.\n\n\n\nلتحديث حقل `chat`، على سبيل المثال، استخدم الأمر التالي:\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\nلتحديث حقل `chat_ctx_size`، على سبيل المثال، استخدم الأمر التالي:\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\nفيما يلي جميع خيارات الأمر الفرعي `config`:\n\n```console\n$ gaianet config --help\n\nUsage: gaianet config [OPTIONS]\n\nOptions:\n  --chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\nاستمتع!\n"
        },
        {
          "name": "README-cn.md",
          "type": "blob",
          "size": 8.34765625,
          "content": "# 运行自己的 GaiaNet 节点\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n> 如果您在中国大陆，需要翻墙。而且不只是要浏览器翻墙，命令行也要使用代理翻墙。同时，localhost 不应该有代理：在终端命令行输入 `export no_proxy=localhost,127.0.0.0/8`.\n\n## 快速入门\n\n在 Mac、Linux 或 Windows WSL 上只需一行命令即可安装默认节点软件栈。\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\n初始化节点。这将下载 `$HOME/gaianet/config.json` 文件中指定的模型文件和向量数据库文件，由于文件较大，可能需要几分钟时间。\n\n```bash\ngaianet init\n```\n\n启动节点。\n\n```bash\ngaianet start\n```\n\n脚本会在控制台上显示官方节点地址，如下所示。\n\n您可以打开浏览器访问该 URL，查看节点信息并与节点上的人工智能代理聊天。\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\n要停止节点，可以运行以下脚本。\n\n```bash\ngaianet stop\n```\n\n## 安装指南\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> 输出结果应如下所示： </summary>\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n</details>\n\n默认情况下，它会安装到 `$HOME/gaianet` 目录中。您也可以选择安装在其他目录下。\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## 初始化节点\n\n```\ngaianet init\n```\n\n<details><summary> 输出结果应如下所示： </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\n`init` 命令根据 `$HOME/gaianet/config.json` 文件初始化节点。您可以使用我们的一些预设配置。例如，下面的命令初始化了一个用 llama-3 8B 模型加上伦敦旅游指南作为知识库的节点。\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\n要查看预设配置列表，可以执行 `gaianet init --help` 命令。\n\n除了像 `gaianet_docs` 这样的预设配置外，您还可以向 `config.json` 传递一个 URL，以便将节点初始化为你想要的状态。\n\n如果需要 `init` 安装在其他目录下的节点，可以这样做：\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## 启动节点\n\n```\ngaianet start\n```\n\n<details><summary> 输出结果应如下所示： </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n</details>\n\n您可以在本地启动节点。它只能通过 `localhost` 访问，而不能通过 GaiaNet 域的公共 URL 访问。\n\n```bash\ngaianet start --local-only\n```\n\n您也可以启动安装在其他目录下的节点。\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### 停止节点\n\n```bash\ngaianet stop\n```\n\n<details><summary> 输出结果应如下所示： </summary>\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n</details>\n\n停止安装在其他目录下的节点。\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### 更新配置\n\n使用 `gaianet config` 子命令可以更新 `config.json` 文件中定义的字段。更新配置后，必须再次运行 `gaianet init` 。\n\n例如，要更新 `chat` 字段，请使用以下命令：\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\n例如，要更新 `chat_ctx_size` 字段，请使用以下命令：\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\n以下是 `config` 子命令的所有选项。\n\n```console\n$ gaianet config --help\n\nUsage: gaianet config [OPTIONS]\n\nOptions:\n  --chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\n玩得开心！\n"
        },
        {
          "name": "README-fa.md",
          "type": "blob",
          "size": 10.60546875,
          "content": "# اجرای نود GaiaNet خودتان\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n[Japanese(日本語)](README-ja.md) | [Chinese(中文)](README-cn.md) | [Turkish (Türkçe)](README-tr.md) | [Farsi(فارسی)](README-fa.md) |\n\nما به کمک شما برای ترجمه این\nREADME\nبه زبان مادری‌تان نیاز داریم.\n\nاز کار ما خوشتان آمده؟ ⭐ ما را ستاره‌دار کنید!\n\n---\n\n## شروع سریع\n\nنصب نرم‌افزار پیش‌فرض نود با یک خط دستور در مک، لینوکس، یا ویندوز (WSL).\n\n```bash\n\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n\n```\n\nسپس، از دستورات روی صفحه برای تنظیم environment path پیروی کنید. خط فرمان با `source` شروع خواهد شد.\n\nنود را مقداردهی اولیه کنید. این کار فایل‌های مدل و فایل‌های پایگاه داده وکتور که در فایل `HOME/gaianet/config.json$` مشخص شده‌اند را دانلود می‌کند و ممکن است چند دقیقه طول بکشد زیرا فایل‌ها بزرگ هستند.\n\n```bash\n\ngaianet init\n\n```\n\nنود را شروع کنید\n\n```bash\n\ngaianet start\n\n```\n\nاسکریپت، آدرس رسمی نود را در کنسول چاپ می‌کند به صورت زیر. می‌توانید آن URL را در مرورگری باز کنید تا اطلاعات نود را ببینید و سپس با هوش مصنوعی در نود چت کنید.\n\n```\n\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n\n```\n\nبرای توقف نود، می‌توانید اسکریپت زیر را اجرا کنید.\n\n```bash\n\ngaianet stop\n\n```\n\n## راهنمای نصب\n\n```bash\n\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n\n```\n\n<details dir=\"rtl\"><summary> خروجی باید به صورت زیر باشد: </summary>\n\n```console\n\n[+] Downloading default config file ...\n\n\n\n[+] Downloading nodeid.json ...\n\n\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\n\n\nInfo: Detected Linux-x86_64\n\n\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\n\n\nInfo: Fetching WasmEdge-0.13.5\n\n\n\n/tmp/wasmedge.2884467 ~/gaianet\n\n######################################################################## 100.0%\n\n~/gaianet\n\nInfo: Fetching WasmEdge-GGML-Plugin\n\n\n\nInfo: Detected CUDA version:\n\n\n\n/tmp/wasmedge.2884467 ~/gaianet\n\n######################################################################## 100.0%\n\n~/gaianet\n\nInstallation of wasmedge-0.13.5 successful\n\nWasmEdge binaries accessible\n\n\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n\n\n[+] Installing Qdrant binary...\n\n    * Download Qdrant binary\n\n################################################################################################## 100.0%\n\n\n\n    * Initialize Qdrant directory\n\n\n\n[+] Downloading the rag-api-server.wasm ...\n\n################################################################################################## 100.0%\n\n\n\n[+] Downloading dashboard ...\n\n################################################################################################## 100.0%\n\n```\n\n</details>\n\nبه‌طور پیش‌فرض، در دایرکتوری `HOME/gaianet$` نصب می‌شود. همچنین می‌توانید انتخاب کنید که در دایرکتوری دیگری نصب شود.\n\n```bash\n\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n\n```\n\n## مقداردهی اولیه نود\n\n```\n\ngaianet init\n\n```\n\n<details dir=\"rtl\"><summary> خروجی باید به صورت زیر باشد : </summary>\n\n```bash\n\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n\n\n    * Start a Qdrant instance ...\n\n\n\n    * Remove the existed 'default' Qdrant collection ...\n\n\n\n    * Download Qdrant collection snapshot ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n\n\n    * Import the Qdrant collection snapshot ...\n\n\n\n    * Recovery is done successfully\n\n```\n\n</details>\n\nدستور `init` نود را بر اساس فایل `HOME/gaianet/config.json$` مقداردهی اولیه می‌کند. شما می‌توانید از برخی از پیکربندی‌های از پیش تنظیم شده ما استفاده کنید. به عنوان مثال، دستور زیر نود را با مدل llama-3 8B و راهنمای London guidebook به عنوان پایگاه دانش مقداردهی اولیه می‌کند.\n\n```bash\n\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n\n```\n\nبرای دیدن لیست پیکربندی‌های از پیش تنظیم شده، می‌توانید `gaianet init --help` را اجرا کنید. علاوه بر پیکربندی‌های از پیش تنظیم شده مانند `gaianet_docs`، می‌توانید یک URL به فایل `config.json` خودتان بدهید تا نود را به حالت دلخواهتان مقداردهی اولیه کنید.\n\nاگر نیاز به `init` نود نصب شده در دایرکتوری دیگری دارید، این کار را انجام دهید.\n\n```bash\n\ngaianet init --base $HOME/gaianet.alt\n\n```\n\n## شروع نود\n\n```\n\ngaianet start\n\n```\n\n<details dir=\"rtl\"><summary> خروجی باید به صورت زیر باشد: </summary>\n\n```bash\n\n[+] Starting Qdrant instance ...\n\n\n\n    Qdrant instance started with pid: 39762\n\n\n\n[+] Starting LlamaEdge API Server ...\n\n\n\n    Run the following command to start the LlamaEdge API Server:\n\n\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n\n\n    LlamaEdge API Server started with pid: 39796\n\n```\n\n</details>\n\nمیتوانید نود را برای استفاده local شروع کنید. این نود فقط از طریق `localhost` قابل دسترسی خواهد بود و در هیچ یک از URL های عمومی دامنه GaiaNet در دسترس نخواهد بود.\n\n```bash\n\ngaianet start --local-only\n\n```\n\nمی‌توانید نود نصب شده در یک دایرکتوری base جایگزین را نیز شروع کنید.\n\n```bash\n\ngaianet start --base $HOME/gaianet.alt\n\n```\n\n### توقف نود\n\n```bash\n\ngaianet stop\n\n```\n\n<details dir=\"rtl\"><summary> خروجی باید به صورت زیر باشد : </summary>\n\n```bash\n\n[+] Stopping WasmEdge, Qdrant and frpc ...\n\n```\n\n</details>\n\nنود نصب شده در یک دایرکتوری base جایگزین را متوقف کنید.\n\n```bash\n\ngaianet stop --base $HOME/gaianet.alt\n\n```\n\n### به‌روزرسانی پیکربندی\n\nبا استفاده از زیر فرمان `gaianet config` می‌توانید فیلدهای کلیدی تعریف شده در فایل `config.json` را به‌روزرسانی کنید. شما باید پس از به‌روزرسانی پیکربندی، دوباره `gaianet init` را اجرا کنید.\n\nبه عنوان مثال برای به‌روزرسانی فیلد `chat`، از فرمان زیر استفاده کنید:\n\n```bash\n\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n\n```\n\nبه عنوان مثال برای به‌روزرسانی فیلد `chat_ctx_size`، از فرمان زیر استفاده کنید:\n\n```bash\n\ngaianet config --chat-ctx-size 5120\n\n```\n\nگزینه‌های زیر فرمان `config` به شرح زیر است:\n\n```console\n\n$ gaianet config --help\n\n\n\nUsage: gaianet config [OPTIONS]\n\n\n\nOptions:\n\n  --chat-url <url>               Update the url of chat model.\n\n  --chat-ctx-size <val>          Update the context size of chat model.\n\n  --embedding-url <url>          Update the url of embedding model.\n\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n\n  --prompt-template <val>        Update the prompt template of chat model.\n\n  --port <val>                   Update the port of LlamaEdge API Server.\n\n  --system-prompt <val>          Update the system prompt.\n\n  --rag-prompt <val>             Update the rag prompt.\n\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n\n  --reverse-prompt <val>         Update the reverse prompt.\n\n  --domain <val>                 Update the domain of GaiaNet node.\n\n  --snapshot <url>               Update the Qdrant snapshot.\n\n  --qdrant-limit <val>           Update the max number of result to return.\n\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n\n  --base <path>                  The base directory of GaiaNet node.\n\n  --help                         Show this help message\n\n```\n\nلذت ببرید!\n"
        },
        {
          "name": "README-id.md",
          "type": "blob",
          "size": 9.080078125,
          "content": "# MENJALANKAN GAIA NODE MILIK ANDA\n\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n## MULAI DENGAN CEPAT\n\nInstal kumpulan perangkat lunak *node* bawaan hanya dengan menggunakan satu baris perintah di Mac, Linux, atau Windows WSL.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nKemudian, ikuti perintah yang muncul pada layar Anda untuk menyiapkan *environment path*. yang dimulai dengan mengetikkan `source`, contohnya adalah `source ~/.bashrc`.\n\nInisialisasi *node*. Ini akan mengunduh file model dan file basis data vektor yang ditentukan sesuai pada file `$HOME/gaianet/config.json`, dan mungkin memerlukan waktu beberapa menit karena file berukuran besar.\n\n```bash\ngaianet init\n```\n\nMulai node dengan perintah\n\n```bash\ngaianet start\n```\n\n*Script* akan memunculkan alamat dari *node* pada *console*. Anda dapat melakukan klik pada link tersebut untuk membuka browser dan melihat informasi *node* beserta memulai obrolan dengan agen AI dari *node* tersebut.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\nUntuk menghentikan *node*, anda bisa menjalankan perintah berikut.\n\n```bash\ngaianet stop\n```\n\n## Panduan Instalasi\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> Hasilnya seharusnya akan seperti dibawah ini: </summary>\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n</details>\n\nSecara bawaan, ini diinstal ke direktori `$HOME/gaianet`. Namun anda juga dapat memilih untuk menginstal ke direktori alternatif.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## Inisialisasi node\n\n```\ngaianet init\n```\n\n<details><summary> Hasilnya seharusnya akan seperti dibawah ini: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\nPerintah `init` menginisialisasi *node* sesuai dengan file `$HOME/gaianet/config.json`. Anda dapat menggunakan beberapa konfigurasi standar. Misalnya, perintah di bawah ini menginisialisasi *node* dengan model llama-3 8B dengan buku panduan London sebagai basis pengetahuan.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nUntuk melihat daftar konfigurasi yang telah ditentukan sebelumnya, Anda dapat menjalankan perintah `gaianet init --help`.\nSelain konfigurasi yang telah ditentukan sebelumnya seperti `gaianet_docs`, Anda juga dapat meneruskan URL ke `config.json` Anda sendiri agar *node* dapat diinisialisasi sesuai dengan kondisi yang Anda inginkan.\n\nJika Anda perlu `init` sebuah *node* yang diinstal di direktori alternatif, lakukan ini.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## Memulai Menjalankan Node\n\n```\ngaianet start\n```\n\n<details><summary> Hasilnya seharusnya akan seperti dibawah ini: </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n</details>\n\nYou can start the *node* for local use. It will be only accessible via `localhost` and not available on any of the GaiaNet domain's public URLs.\nAnda dapat memulai *node* untuk penggunaan lokal. Dengan ini *node* hanya dapat diakses melalui `localhost` dan tidak tersedia di URL publik domain GaiaNet mana pun.\n\n```bash\ngaianet start --local-only\n```\n\nAnda juga dapat memulai sebuah *node* yang diinstal di direktori alternatif.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### Menghentikan Node\n\n```bash\ngaianet stop\n```\n\n<details><summary> Hasilnya seharusnya akan seperti dibawah ini: </summary>\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n</details>\n\nBerikut ini adalah perintah jika anda ingin menghentikan *node* yang terinstall di direktori alternatif.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### Update configuration\n\nMenggunakan subperintah `gaianet config` dapat memperbarui bidang kunci yang ditentukan dalam file `config.json`. Anda HARUS menjalankan `gaianet init` lagi setelah Anda memperbarui konfigurasi.\n\nUntuk memperbarui kolom `chat`, misalnya, gunakan perintah berikut:\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\nUntuk memperbarui kolom `chat_ctx_size`, misalnya, gunakan perintah berikut:\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\nDi bawah ini adalah semua opsi subperintah `config`.\n\n```console\n$ gaianet config --help\n\nUsage: gaianet config [OPTIONS]\n\nOptions:\n  --chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\nSelamat Bersenang-senang!\n"
        },
        {
          "name": "README-ja.md",
          "type": "blob",
          "size": 9.1181640625,
          "content": "# 自分のGaiaNetノードを実行する\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n## クイックスタート\n\nMac、Linux、またはWindows WSLで、一行のコマンドでデフォルトのノードソフトウェアスタックをインストールします。\n\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\n\nノードを初期化します。`$HOME/gaianet/config.json`ファイルに指定されたモデルファイルとベクターデータベースファイルをダウンロードしますが、ファイルが大きいため数分かかる場合があります。\n\n\n```bash\ngaianet init\n```\n\n\nノードを開始します。\n\n\n```bash\ngaianet start\n```\n\n\nスクリプトは、以下のように公式のノードアドレスをコンソールに表示します。\nそのURLをブラウザで開いて、ノードの情報を確認し、ノード上のAIエージェントとチャットできます。\n\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\n\nノードを停止するには、次のスクリプトを実行します。\n\n\n```bash\ngaianet stop\n```\n\n\n## インストールガイド\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n\n<details><summary> 出力は以下のようになります: </summary>\n\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n\n</details>\n\n\nデフォルトでは `$HOME/gaianet` ディレクトリにインストールされますが、別のディレク\n\nトリにインストールすることもできます。\n\n\n```\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n\n\n## ノードを初期化\n\n```\ngaianet init\n```\n\n\n<details><summary> 出力は以下のようになります: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\n`init` コマンドは、`$HOME/gaianet/config.json` ファイルに従ってノードを初期化します。\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nプリセット設定のリストを見るには、`gaianet init --help` を実行できます。\n`gaianet_docs`のようなプリセット設定の他に、ノードが希望する状態に初期化されるように自分の `config.json` のURLを渡すこともできます。\n\n別のディレクトリにインストールされたノードを初期化するには、以下を実行します。\n\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n\n\n## ノードを開始\n\n```\ngaianet start\n```\n\n\n<details><summary> 出力は以下のようになります: </summary>\n\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n\n</details>\n\nローカルでノードを開始することができます。これは `localhost` 経由でのみアクセス可能で、GaiaNetドメインの公開URLでは利用できません。\n\n\n```bash\ngaianet start --local-only\n```\n\n\n別のベースディレクトリにインストールされたノードも開始できます。\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### ノードを停止\n\n```bash\ngaianet stop\n```\n\n\n<details><summary> 出力は以下のようになります: </summary>\n\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n\n</details>\n\n別のベースディレクトリにインストールされたノードを停止します。\n\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n\n\n### 設定を更新\n\n`gaianet config` サブコマンドを使用して、`config.json` ファイルで定義された主要なフィールドを更新できます。設定を更新した後は、`gaianet init` を再実行する必要があります。\n\nたとえば、`chat` フィールドを更新するには、次のコマンドを使用します：\n\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\n\nたとえば、`chat_ctx_size` フィールドを更新するには、次のコマンドを使用します：\n\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\n\n`config` サブコマンドのすべてのオプションは以下の通りです。\n\n\n```console\n$ gaianet config --help\n\n使用方法: gaianet config [OPTIONS]\n\nオプション:\n  --chat-url <url>               チャットモデルのURLを更新。\n  --chat-ctx-size <val>          チャットモデルのコンテキストサイズを更新。\n  --embedding-url <url>          埋め込みモデルのURLを更新。\n  --embedding-ctx-size <val>     埋め込みモデルのコンテキストサイズを更新。\n  --prompt-template <val>        チャットモデルのプロンプトテンプレートを更新。\n  --port <val>                   LlamaEdge APIサーバーのポートを更新。\n  --system-prompt <val>          システムプロンプトを更新。\n  --rag-prompt <val>             RAGプロンプトを更新。\n  --rag-policy <val>             RAGポリシーを更新 [可能な値: system-message, last-user-message].\n  --reverse-prompt <val>         逆プロンプトを更新。\n  --domain <val>                 GaiaNetノードのドメインを更新。\n  --snapshot <url>               Qdrantスナップショットを更新。\n  --qdrant-limit <val>           返す結果の最大数を更新。\n  --qdrant-score-threshold <val> 結果の最小スコア閾値を更新。\n  --base <path>                  GaiaNetノードのベースディレクトリ。\n  --help                         このヘルプメッセージを表示\n```\n\n\n楽しんでください！\n"
        },
        {
          "name": "README-kr.md",
          "type": "blob",
          "size": 8.8916015625,
          "content": "# GaiaNet 노드 직접 실행하기\n\n우리의 작업이 마음에 드시나요? ⭐ 별표를 눌러주세요!\n\n공식 문서와 오픈 소스 모델을 커스터마이징하는 방법에 대해 [공식문서](https://docs.gaianet.ai/) 와 [매닝 이북](https://www.manning.com/liveprojectseries/open-source-llms-on-your-own-computer) 을 확인해보세요.\n\n## 빠른 시작\n\nMac, Linux 또는 Windows WSL에서 다음 단일 명령줄로 기본 노드 소프트웨어 스택을 설치하세요.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\n그런 다음 화면에 나타나는 안내에 따라 환경 경로를 설정하세요. 커맨드 라인은 `source`로 시작될 것입니다.\n\n노드를 초기화합니다. `$HOME/gaianet/config.json` 파일에 지정된 모델 파일과 벡터 데이터베이스 파일을 다운로드합니다. 파일들의 용량이 크기 때문에 몇 분 정도 걸릴 수 있습니다.\n```bash\ngaianet init\n```\n\n다음 명령어로 노드를 시작합니다.\n\n```bash\ngaianet start\n```\n\n스크립트는 다음과 같이 콘솔에 공식 노드 주소를 출력합니다. 해당 URL을 브라우저에서 열어 노드 정보를 확인하고 노드의 AI 에이전트와 채팅할 수 있습니다.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\n노드를 멈추려면 다음 스크립트를 실행하세요.\n\n```bash\ngaianet stop\n```\n\n## 설치 가이드\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> 출력 결과는 다음과 같을 것입니다 : </summary>\n\n```console\n[+] Downloading default config file ...\n[+] Downloading nodeid.json ...\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\nInfo: Detected Linux-x86_64\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\nInfo: Fetching WasmEdge-0.13.5\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\nInfo: Detected CUDA version:\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n    * Initialize Qdrant directory\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n</details>\n\n기본설정으로 `$HOME/gaianet` 경로의 디렉토리에 설치됩니다. 다른 디렉토리에 설치하도록 선택할 수도 있습니다.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## 노드 초기화 하기\n\n```bash\ngaianet init\n```\n\n<details><summary> 출력 결과는 다음과 같을 것입니다 : </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\n`init` 명령은 `$HOME/gaianet/config.json` 파일의 설정에 따라 노드를 초기화합니다. 미리 설정된 프리셋 구성 중 일부를 사용할 수 있습니다. 예를 들어, 다음 명령은 런던 가이드북을 지식 기반으로 하는 llama-3 8B 모델로 노드를 초기화합니다.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\n미리 설정된 프리셋 구성 목록을 보려면 `gaianet init --help`를 실행하세요.\n\n`gaianet_docs`와 같이 미리 설정된 구성 외에도, 원하는 상태로 노드를 초기화하고 싶다면 자체적으로 만든 `config.json`의 URL을 입력합니다.\n\n\n대체 디렉토리에 설치된 노드를 `init`해야 하는 경우 다음과 같이 하세요.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## 노드 시작하기\n\n```\ngaianet start\n```\n<details><summary> 출력 결과는 다음과 같을 것입니다 : </summary>\n```bash\n[+] Starting Qdrant instance ...\n    Qdrant instance started with pid: 39762\n[+] Starting LlamaEdge API Server ...\n    Run the following command to start the LlamaEdge API Server:\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n    LlamaEdge API Server started with pid: 39796\n```\n</details>\n\n로컬 환경에서 사용하기 위해 노드를 시작하는 명령입니다. 이 경우 `localhost`를 통해서만 접근 가능하며 GaiaNet 도메인의 공개 URL에서는 사용할 수 없습니다.\n\n```bash\ngaianet start --local-only\n```\n\n다른 기본 경로에 설치된 노드를 시작할 수도 있습니다.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### 노드 중지하기\n\n```bash\ngaianet stop\n```\n\n<details><summary> 출력 결과는 다음과 같을 것입니다 :  </summary>\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n</details>\n\n다른 대체경로에 설치된 노드를 중지하려면 다음 명령어를 사용합니다.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### 설정 업데이트 하기\n\n`gaianet config` 하위 명령을 사용하여 `config.json` 파일에 정의된 주요 필드들을 업데이트할 수 있습니다. 구성을 업데이트한 후에는 반드시 `gaianet init`을 다시 실행해야 합니다.\n\n예를 들어 `chat` 필드를 업데이트하려면 다음 명령어를 사용할 수 있습니다 :\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n예를 들어 `chat_ctx_size` 필드를 업데이트하려면 다음 명령을 사용하세요 :\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\n다음은 `config` 하위 명령의 모든 옵션입니다.\n\n```console\n$ gaianet config --help\nUsage: gaianet config [OPTIONS]\nOptions:\n  --chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\n즐거운 사용 되세요!\n"
        },
        {
          "name": "README-pt.md",
          "type": "blob",
          "size": 8.248046875,
          "content": "# Início Rápido\n\nInstale a pilha de software padrão do nó com uma única linha de comando no Mac, Linux ou Windows WSL.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nEm seguida, siga as instruções na tela para configurar o caminho do ambiente. A linha de comando começará com `source`.\n\nInicialize o nó. Ele fará o download dos arquivos de modelo e do banco de dados vetorial especificados no arquivo `$HOME/gaianet/config.json`, e isso pode levar alguns minutos, pois os arquivos são grandes.\n\n```bash\ngaianet init\n```\n\nInicie o nó.\n\n```bash\ngaianet start\n```\n\nO script imprimirá o endereço oficial do nó no console como segue.\nVocê pode abrir um navegador nesse URL para ver as informações do nó e depois conversar com o agente de IA no nó.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\nPara parar o nó, você pode executar o seguinte script.\n\n```bash\ngaianet stop\n```\n\n## Guia de Instalação\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary>A saída deve ser semelhante a esta:</summary>\n\n```console\n[+] Baixando arquivo de configuração padrão...\n\n[+] Baixando nodeid.json...\n\n[+] Instalando WasmEdge com o plugin wasi-nn_ggml...\n\nInfo: Linux-x86_64 detectado\n\nInfo: Instalação do WasmEdge em /home/azureuser/.wasmedge\n\nInfo: Buscando WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Buscando WasmEdge-GGML-Plugin\n\nInfo: Versão CUDA detectada:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstalação do wasmedge-0.13.5 bem-sucedida\nBinários do WasmEdge acessíveis\n\n    O Runtime WasmEdge versão 0.13.5 está instalado em /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Instalando binário do Qdrant...\n    * Baixando binário do Qdrant\n################################################################################################## 100.0%\n\n    * Inicializando diretório do Qdrant\n\n[+] Baixando o rag-api-server.wasm...\n################################################################################################## 100.0%\n\n[+] Baixando dashboard...\n################################################################################################## 100.0%\n```\n\n</details>\n\nPor padrão, ele instala no diretório `$HOME/gaianet`. Você também pode optar por instalar em um diretório alternativo.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## Inicialize o nó\n\n```\ngaianet init\n```\n\n<details><summary>A saída deve ser semelhante a esta:</summary>\n\n```bash\n[+] Baixando Llama-2-7b-chat-hf-Q5_K_M.gguf...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Baixando all-MiniLM-L6-v2-ggml-model-f16.gguf...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Criando 'coleção padrão' na instância do Qdrant...\n\n    * Iniciando uma instância do Qdrant...\n\n    * Removendo a coleção 'padrão' existente do Qdrant...\n\n    * Baixando snapshot da coleção do Qdrant...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Importando o snapshot da coleção do Qdrant...\n\n    * Recuperação concluída com sucesso\n```\n\n</details>\n\nO comando `init` inicializa o nó de acordo com o arquivo `$HOME/gaianet/config.json`. Você pode usar algumas de nossas configurações predefinidas. Por exemplo, o comando abaixo inicializa um nó com o modelo llama-3 8B com um guia de Londres como base de conhecimento.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nPara ver uma lista de configurações predefinidas, você pode usar `gaianet init --help`.\nAlém de configurações predefinidas como `gaianet_docs`, você também pode passar uma URL para o seu próprio `config.json` para que o nó seja inicializado no estado desejado.\n\nSe você precisar inicializar um nó instalado em um diretório alternativo, faça o seguinte:\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## Inicie o nó\n\n```\ngaianet start\n```\n\n<details><summary>A saída deve ser semelhante a esta:</summary>\n\n```bash\n[+] Iniciando instância do Qdrant...\n\n    Instância do Qdrant iniciada com pid: 39762\n\n[+] Iniciando o LlamaEdge API Server...\n\n    Execute o seguinte comando para iniciar o LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use os seguintes trechos de contexto para responder à pergunta do usuário.\\nSe você não souber a resposta, apenas diga que não sabe, não tente inventar uma resposta.\\n----------------\\n\"\n\n\n    LlamaEdge API Server iniciado com pid: 39796\n```\n\n</details>\n\nVocê pode iniciar o nó para uso local. Ele será acessível apenas via `localhost` e não estará disponível em nenhum dos URLs públicos do domínio GaiaNet.\n\n```bash\ngaianet start --local-only\n```\n\nVocê também pode iniciar um nó instalado em um diretório base alternativo.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### Pare o nó\n\n```bash\ngaianet stop\n```\n\n<details><summary>A saída deve ser semelhante a esta:</summary>\n\n```bash\n[+] Parando WasmEdge, Qdrant e frpc...\n```\n\n</details>\n\nPare um nó instalado em um diretório base alternativo.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### Atualizar Configuração\n\nUsando o subcomando `gaianet config` você pode atualizar os campos-chave definidos no arquivo `config.json`. Você DEVE executar `gaianet init` novamente após atualizar a configuração.\n\nPara atualizar o campo `chat`, por exemplo, use o seguinte comando:\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\nPara atualizar o campo `chat_ctx_size`, por exemplo, use o seguinte comando:\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\nAbaixo estão todas as opções do subcomando `config`.\n\n```console\n$ gaianet config --help\n\nUsage: gaianet config [OPTIONS]\n\nOptions:\n  --chat-url <url>               Atualiza a URL do modelo de chat.\n  --chat-ctx-size <val>          Atualiza o tamanho do contexto do modelo de chat.\n  --embedding-url <url>          Atualiza a URL do modelo de embedding.\n  --embedding-ctx-size <val>     Atualiza o tamanho do contexto do modelo de embedding.\n  --prompt-template <val>        Atualiza o template do prompt do modelo de chat.\n  --port <val>                   Atualiza a porta do LlamaEdge API Server.\n  --system-prompt <val>          Atualiza o prompt do sistema.\n  --rag-prompt <val>             Atualiza o prompt RAG.\n  --rag-policy <val>             Atualiza a política RAG [Valores possíveis: system-message, last-user-message].\n  --reverse-prompt <val>         Atualiza o prompt reverso.\n  --domain <val>                 Atualiza o domínio do nó GaiaNet.\n  --snapshot <url>               Atualiza o snapshot do Qdrant.\n  --qdrant-limit <val>           Atualiza o número máximo de resultados a serem retornados.\n  --qdrant-score-threshold <val> Atualiza o limite mínimo de pontuação para o resultado.\n  --base <path>                  O diretório base do nó GaiaNet.\n  --help                         Mostra esta mensagem de ajuda\n```\n\nDivirta-se!\n"
        },
        {
          "name": "README-ru.md",
          "type": "blob",
          "size": 11.609375,
          "content": "# Запуск ноды GaiaNet\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n[Japanese(日本語)](README-ja.md) | [Chinese(中文)](README-cn.md) | [Turkish (Türkçe)](README-tr.md) | [Arabic (العربية)](README-ar.md) | [Russian (русскийة)](README-ru.md) | Нам нужна ваша помощь, чтобы перевести этот README на ваш родной язык.\n\nНравится наша работа? ⭐ Поставьте нам звезду!\n\n---\n\n## Быстрый старт\n\nУстановите стандартный стек программного обеспечения узла с помощью одной строки команды на Mac, Linux или Windows WSL.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nЗатем, следуя подсказкам на экране, установите путь к окружению. Командная строка будет начинаться с `source`.\n\nИнициализируйте узел. Он загрузит файлы модели и векторную базу данных, указанные в файле `$HOME/gaianet/config.json`, это может занять некоторое время, поскольку файлы имеют большой размер.\n\n```bash\ngaianet init\n```\n\nЗапустите узел.\n\n```bash\ngaianet start\n```\n\nСкрипт выводит в консоль официальный адрес узла следующим образом.\nВы можете открыть браузер по этому URL, чтобы увидеть информацию об узле, а затем пообщаться с агентом ИИ на узле.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\nЧтобы остановить узел, можно запустить следующий скрипт.\n\n```bash\ngaianet stop\n```\n\n## Руководство по установке\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary>Вывод должен выглядеть следующим образом: </summary>\n\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n\n```\n\n</details\n\nПо умолчанию установка производится в директорию `$HOME/gaianet`. Вы также можете выбрать установку в альтернативный каталог.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## Инициализация узла\n\n```\ngaianet init\n````\n\n<details><summary>Вывод должен выглядеть следующим образом: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n\n```\n\n</details\n\nКоманда `init` инициализирует узел в соответствии с файлом `$HOME/gaianet/config.json`. Вы можете использовать некоторые из наших предустановленных конфигураций. Например, команда ниже инициализирует узел с моделью llama-3 8B с путеводителем по Лондону в качестве базы знаний.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n\n```\n\nЧтобы посмотреть список предустановленных конфигураций, вы можете выполнить команду `gaianet init --help`.\nПомимо предустановленных конфигураций, таких как `gaianet_docs`, вы также можете передать URL-адрес собственного `config.json`, чтобы узел был инициализирован до нужного вам состояния.\n\nЕсли вам нужно инициализировать `init` узел, установленный в альтернативной директории, сделайте следующее.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## Запуск узла\n\n```bash\ngaianet start\n```\n\n<details><summary>Вывод должен выглядеть следующим образом: </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Выполните следкющую команду для запуска LlamaEdge API Server:\n\n    wasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n        LlamaEdge API Server started with pid: 39796\n    ```\n\n    </details>\n\n    Вы можете запустить узел для локального использования. Он будет доступен только через `localhost` и не будет доступен ни по одному из публичных URL домена GaiaNet.\n\n    ```bash\n    gaianet start --local-only\n    ```\n\n    Вы также можете запустить узел, установленный в альтернативном базовом каталоге.\n\n    ``bash\n    gaianet start --base $HOME/gaianet.alt\n    ```\n\n    ### Остановка узла\n\n    ```bash\n    gaianet stop\n    ```\n  <details><summary> Вывод должен выглядеть следующим образом: </summary>\n\n  ```bash\n  [+] Stopping WasmEdge, Qdrant and frpc ...\n  ```\n\n  </details>\n\n  Остановка узла установленного в альтернативном базовом каталоге.\n\n  ```bash\n  gaianet stop --base $HOME/gaianet.alt\n  ```\n\n  ### Обновление конфигурации\n\n  Использование подкоманды `gaianet config` позволяет обновить ключевые значения, определенные в файле `config.json`. После обновления конфигурации необходимо снова запустить `gaianet init`.\n\n  Чтобы обновить значение поля `chat`, например, используйте следующую команду:\n\n  ```bash\n  gaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n  ```\n\n  К примеру, для того чтобы обновить значение поля `chat_ctx_size`, выполните следующую команду:\n\n  ```bash\n  gaianet config --chat-ctx-size 5120\n  ```\n  Ниже перечислены все опции подкоманды `config`.\n\n  ```console\n  $ gaianet config --help\n  \n  Использование: gaianet config [OPTIONS]\n\n  Опции:\n    --chat-url <url>               Обновление url модели чата.\n    --chat-ctx-size <val>          Обновить размер контекста модели чата.\n    --embedding-url <url>          Обновить url модели встраивания.\n    --embedding-ctx-size <val>     Обновить размер контекста модели встраивания.\n    --prompt-template <val>        Обновить шаблон подсказки модели чата.\n    --port <val>                   Обновление порта LlamaEdge API Server.\n    --system-prompt <val>          Обновить системную подсказку.\n    --rag-prompt <val>             Обновить подсказку rag.\n    --rag-policy <val>             Обновление политики rag [Возможные значения: system-message, last-user-message].\n    --reverse-prompt <val>         Обновить обратную подсказку.\n    --domain <val>                 Обновление домена узла GaiaNet.\n    --snapshot <url>               Обновление моментального снимка Qdrant.\n    --qdrant-limit <val>           Обновить максимальное количество возвращаемых результатов.\n    --qdrant-score-threshold <val> Обновление минимального порога оценки для результата.\n    --base <path>                  Базовый каталог узла GaiaNet.\n    --help                         Показать сообщение о помощи\n  ```\n  Удачи!\n"
        },
        {
          "name": "README-tr.md",
          "type": "blob",
          "size": 8.6171875,
          "content": "# Kendi GaiaNet düğümünüzü çalıştırın\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n## Hızlı başlangıç\n\nMac, Linux veya Windows WSL'de tek bir komut satırıyla varsayılan düğüm yazılım yığınını yükleyin.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nDüğümü başlatın. Bu işlem `$HOME/gaianet/config.json` dosyasında belirtilen model dosyalarını ve vektör veritabanı dosyalarını indirecektir ve dosyalar büyük olduğu için birkaç dakika sürebilir.\n\n```bash\ngaianet init\n```\n\nDüğümü başlatın.\n\n```bash\ngaianet start\n```\n\nKod, resmi düğüm adresini konsola aşağıdaki gibi yazdırır.\nDüğüm bilgilerini görmek için bu URL'ye bir tarayıcı açabilir ve ardından düğümdeki AI aracısı ile sohbet edebilirsiniz.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.gaianet.xyz\n```\n\nDüğümü durdurmak için aşağıdaki komut dosyasını çalıştırabilirsiniz.\n\n```bash\ngaianet stop\n```\n\n## Kurulum kılavuzu\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> Çıktı aşağıdaki gibi görünmelidir: </summary>\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n</details>\n\nVarsayılan olarak `$HOME/gaianet` dizinine yüklenir. Alternatif bir dizine yüklemeyi de seçebilirsiniz.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## Düğümü başlatın\n\n```\ngaianet init\n```\n\n<details><summary> Çıktı aşağıdaki gibi görünmelidir: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\ninit` komutu düğümü `$HOME/gaianet/config.json` dosyasına göre başlatır. Önceden ayarlanmış konfigürasyonlarımızdan bazılarını kullanabilirsiniz.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nÖnceden ayarlanmış yapılandırmaların bir listesini görmek için `gaianet init --help` yapabilirsiniz.\ngaianet_docs` gibi önceden ayarlanmış yapılandırmaların yanı sıra, düğümün istediğiniz duruma başlatılması için kendi `config.json` dosyanıza bir URL de iletebilirsiniz.\n\nAlternatif bir dizinde kurulu bir düğümü `init` etmeniz gerekiyorsa, bunu yapın.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## Düğümü başlat\n\n```\ngaianet start\n```\n\n<details><summary> Çıktı aşağıdaki gibi görünmelidir: </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n</details>\n\nDüğümü yerel kullanım için başlatabilirsiniz. Yalnızca `localhost` üzerinden erişilebilir olacak ve GaiaNet etki alanının genel URL'lerinden hiçbirinde bulunmayacaktır.\n\n```bash\ngaianet start --local-only\n```\n\nAlternatif bir temel dizinde yüklü bir düğümü de başlatabilirsiniz.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### Düğümü durdur\n\n```bash\ngaianet stop\n```\n\n<details><summary> Çıktı aşağıdaki gibi görünmelidir: </summary>\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n</details>\n\nAlternatif bir temel dizinde yüklü bir düğümü durdurun.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### Yapılandırmayı güncelle\n\ngaianet config` alt komutunu kullanarak `config.json` dosyasında tanımlanan anahtar alanları güncelleyebilirsiniz. Konfigürasyonu güncelledikten sonra `gaianet init` komutunu tekrar çalıştırmalısınız.\n\nÖrneğin `chat` alanını güncellemek için aşağıdaki komutu kullanın:\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\nÖrneğin `chat_ctx_size` alanını güncellemek için aşağıdaki komutu kullanın:\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\nAşağıda `config` alt komutunun tüm seçenekleri yer almaktadır.\n\n```console\n$ gaianet config --help\n\nKullanım: gaianet config [SEÇENEKLER]\n\nSeçenekler:\n--chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\nİyi eğlenceler!\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 9.0732421875,
          "content": "# Run your own GaiaNet node\n\n\n<p align=\"center\">\n  <a href=\"https://discord.gg/gaianet-ai\">\n    <img src=\"https://img.shields.io/badge/chat-Discord-7289DA?logo=discord\" alt=\"GaiaNet Discord\">\n  </a>\n  <a href=\"https://twitter.com/Gaianet_AI\">\n    <img src=\"https://img.shields.io/badge/Twitter-1DA1F2?logo=twitter&amp;logoColor=white\" alt=\"GaiaNet Twitter\">\n  </a>\n   <a href=\"https://www.gaianet.ai/\">\n    <img src=\"https://img.shields.io/website?up_message=Website&url=https://www.gaianet.ai/\" alt=\"Gaianet website\">\n  </a>\n</p>\n\n[Japanese(日本語)](README-ja.md) | [Chinese(中文)](README-cn.md) | [Korean(한국어)](README-kr.md) | [Turkish (Türkçe)](README-tr.md) | [Farsi(فارسی)](README-fa.md) | [Arabic (العربية)](README-ar.md) | [Indonesia](README-id.md) | [Russian (русскийة)](README-ru.md) | [Portuguese (português)](README-pt.md) | We need your help to translate this README into your native language.\n\nLike our work? ⭐ Star us!\n\nCheckout our [official docs](https://docs.gaianet.ai/) and a [Manning ebook](https://www.manning.com/liveprojectseries/open-source-llms-on-your-own-computer) on how to customize open source models.\n\n---\n\n## Quick start\n\nInstall the default node software stack with a single line of command on Mac, Linux, or Windows WSL.\n\n```bash\ncurl -sSfL 'https://github.com/GaiaNet-AI/gaianet-node/releases/latest/download/install.sh' | bash\n```\n\nThen, follow the prompt on your screen to set up the environment path. The command line will begin with `source`.\n\nInitialize the node. It will download the model files and vector database files specified in the `$HOME/gaianet/config.json` file, and it could take a few minutes since the files are large.\n\n```bash\ngaianet init\n```\n\nStart the node.\n\n```bash\ngaianet start\n```\n\nThe script prints the official node address on the console as follows.\nYou can open a browser to that URL to see the node information and then chat with the AI agent on the node.\n\n```\n... ... https://0xf63939431ee11267f4855a166e11cc44d24960c0.us.gaianet.network\n```\n\nTo stop the node, you can run the following script.\n\n```bash\ngaianet stop\n```\n\n## Install guide\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash\n```\n\n<details><summary> The output should look like below: </summary>\n\n```console\n[+] Downloading default config file ...\n\n[+] Downloading nodeid.json ...\n\n[+] Installing WasmEdge with wasi-nn_ggml plugin ...\n\nInfo: Detected Linux-x86_64\n\nInfo: WasmEdge Installation at /home/azureuser/.wasmedge\n\nInfo: Fetching WasmEdge-0.13.5\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInfo: Fetching WasmEdge-GGML-Plugin\n\nInfo: Detected CUDA version:\n\n/tmp/wasmedge.2884467 ~/gaianet\n######################################################################## 100.0%\n~/gaianet\nInstallation of wasmedge-0.13.5 successful\nWasmEdge binaries accessible\n\n    The WasmEdge Runtime wasmedge version 0.13.5 is installed in /home/azureuser/.wasmedge/bin/wasmedge.\n\n\n[+] Installing Qdrant binary...\n    * Download Qdrant binary\n################################################################################################## 100.0%\n\n    * Initialize Qdrant directory\n\n[+] Downloading the rag-api-server.wasm ...\n################################################################################################## 100.0%\n\n[+] Downloading dashboard ...\n################################################################################################## 100.0%\n```\n\n</details>\n\nBy default, it installs into the `$HOME/gaianet` directory. You can also choose to install into an alternative directory.\n\n```bash\ncurl -sSfL 'https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/install.sh' | bash -s -- --base $HOME/gaianet.alt\n```\n\n## Initialize the node\n\n```\ngaianet init\n```\n\n<details><summary> The output should look like below: </summary>\n\n```bash\n[+] Downloading Llama-2-7b-chat-hf-Q5_K_M.gguf ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Downloading all-MiniLM-L6-v2-ggml-model-f16.gguf ...\n\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n[+] Creating 'default' collection in the Qdrant instance ...\n\n    * Start a Qdrant instance ...\n\n    * Remove the existed 'default' Qdrant collection ...\n\n    * Download Qdrant collection snapshot ...\n############################################################################################################################## 100.0%############################################################################################################################## 100.0%\n\n    * Import the Qdrant collection snapshot ...\n\n    * Recovery is done successfully\n```\n\n</details>\n\nThe `init` command initializes the node according to the `$HOME/gaianet/config.json` file. You can use some of our pre-set configurations. For example, the command below initializes a node with the llama-3 8B model with a London guidebook as knowledge base.\n\n```bash\ngaianet init --config https://raw.githubusercontent.com/GaiaNet-AI/node-configs/main/llama-3-8b-instruct_london/config.json\n```\n\nTo see a list of pre-set configurations, you can do `gaianet init --help`.\nBesides a pre-set configurations like `gaianet_docs`, you can also pass a URL to your own `config.json` for the node to be initialized to the state you'd like.\n\nIf you need to `init` a node installed in an alternative directory, do this.\n\n```bash\ngaianet init --base $HOME/gaianet.alt\n```\n\n## Start the node\n\n```\ngaianet start\n```\n\n<details><summary> The output should look like below: </summary>\n\n```bash\n[+] Starting Qdrant instance ...\n\n    Qdrant instance started with pid: 39762\n\n[+] Starting LlamaEdge API Server ...\n\n    Run the following command to start the LlamaEdge API Server:\n\nwasmedge --dir .:./dashboard --nn-preload default:GGML:AUTO:Llama-2-7b-chat-hf-Q5_K_M.gguf --nn-preload embedding:GGML:AUTO:all-MiniLM-L6-v2-ggml-model-f16.gguf rag-api-server.wasm --model-name Llama-2-7b-chat-hf-Q5_K_M,all-MiniLM-L6-v2-ggml-model-f16 --ctx-size 4096,384 --prompt-template llama-2-chat --qdrant-collection-name default --web-ui ./ --socket-addr 0.0.0.0:8080 --log-prompts --log-stat --rag-prompt \"Use the following pieces of context to answer the user's question.\\nIf you don't know the answer, just say that you don't know, don't try to make up an answer.\\n----------------\\n\"\n\n\n    LlamaEdge API Server started with pid: 39796\n```\n\n</details>\n\nYou can start the node for local use. It will be only accessible via `localhost` and not available on any of the GaiaNet domain's public URLs.\n\n```bash\ngaianet start --local-only\n```\n\nYou can also start a node installed in an alternative base directory.\n\n```bash\ngaianet start --base $HOME/gaianet.alt\n```\n\n### Stop the node\n\n```bash\ngaianet stop\n```\n\n<details><summary> The output should look like below: </summary>\n\n```bash\n[+] Stopping WasmEdge, Qdrant and frpc ...\n```\n\n</details>\n\nStop a node installed in an alternative base directory.\n\n```bash\ngaianet stop --base $HOME/gaianet.alt\n```\n\n### Update configuration\n\nUsing `gaianet config` subcommand can update the key fields defined in the `config.json` file. You MUST run `gaianet init` again after you update the configuartion.\n\nTo update the `chat` field, for example, use the following command:\n\n```bash\ngaianet config --chat-url \"https://huggingface.co/second-state/Llama-2-13B-Chat-GGUF/resolve/main/Llama-2-13b-chat-hf-Q5_K_M.gguf\"\n```\n\nTo update the `chat_ctx_size` field, for example, use the following command:\n\n```bash\ngaianet config --chat-ctx-size 5120\n```\n\nBelow are all options of the `config` subcommand.\n\n```console\n$ gaianet config --help\n\nUsage: gaianet config [OPTIONS]\n\nOptions:\n  --chat-url <url>               Update the url of chat model.\n  --chat-ctx-size <val>          Update the context size of chat model.\n  --embedding-url <url>          Update the url of embedding model.\n  --embedding-ctx-size <val>     Update the context size of embedding model.\n  --prompt-template <val>        Update the prompt template of chat model.\n  --port <val>                   Update the port of LlamaEdge API Server.\n  --system-prompt <val>          Update the system prompt.\n  --rag-prompt <val>             Update the rag prompt.\n  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\n  --reverse-prompt <val>         Update the reverse prompt.\n  --domain <val>                 Update the domain of GaiaNet node.\n  --snapshot <url>               Update the Qdrant snapshot.\n  --qdrant-limit <val>           Update the max number of result to return.\n  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\n  --base <path>                  The base directory of GaiaNet node.\n  --help                         Show this help message\n```\n\nHave fun!\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 1.07421875,
          "content": "### Reporting a vulnerability\n\nFor all Gaia security-related defects, please send an email to security@gaianet.ai. You will receive an acknowledgment mail within 24 hours. After that, we will be sure to give a detailed response about the next step in 48 hours. Please do not submit security vulnerabilities directly as GitHub Issues.\n\n### Disclosure policy\n\nWe will disclose known public security vulnerabilities as soon as possible after receiving the report. Vulnerabilities discovered for the first time will be disclosed by the following process:\n\n* The received security vulnerability report shall be handed over to the security team for follow-up coordination and repair work.\n* After the vulnerability is confirmed, we will create a draft Security Advisory on Github that lists the details of the vulnerability.\n* Invite related personnel to discuss about the fix.\n* Fork the temporary private repository on Github, and collaborate to fix the vulnerability.\n* After the fix code is merged into all supported versions, the vulnerability will be publicly posted in the GitHub Advisory Database.\n"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 1.3076171875,
          "content": "{\n    \"address\": \"\",\n    \"description\": \"The default GaiaNet node config with a Llama-3.2-3B-Instruct model and a Paris tour guide knowledge base.\",\n    \"domain\": \"gaia.domains\",\n    \"llamaedge_port\": \"8080\",\n    \"chat\": \"https://huggingface.co/second-state/Llama-3.2-3B-Instruct-GGUF/resolve/main/Llama-3.2-3B-Instruct-Q5_K_M.gguf\",\n    \"chat_name\": \"Llama-3.2-3B-Instruct\",\n    \"chat_ctx_size\": \"16384\",\n    \"chat_batch_size\": \"16\",\n    \"prompt_template\": \"llama-3-chat\",\n    \"reverse_prompt\": \"\",\n    \"system_prompt\": \"You are a tour guide in Paris, France. Please answer the question from a Paris visitor accurately.\",\n    \"context_window\": \"1\",\n    \"embedding\": \"https://huggingface.co/gaianet/Nomic-embed-text-v1.5-Embedding-GGUF/resolve/main/nomic-embed-text-v1.5.f16.gguf\",\n    \"embedding_name\": \"Nomic-embed-text-v1.5\",\n    \"embedding_ctx_size\": \"8192\",\n    \"embedding_batch_size\": \"8192\",\n    \"snapshot\": \"https://huggingface.co/datasets/gaianet/paris/resolve/main/paris_768_nomic-embed-text-v1.5-f16.snapshot\",\n    \"embedding_collection_name\": \"default\",\n    \"qdrant_limit\": \"1\",\n    \"qdrant_score_threshold\": \"0.5\",\n    \"rag_policy\": \"system-message\",\n    \"rag_prompt\": \"You are a tour guide in Paris, France. Use information in the following context to directly answer the question from a Paris visitor.\\n----------------\\n\"\n}"
        },
        {
          "name": "docker",
          "type": "tree",
          "content": null
        },
        {
          "name": "frpc.toml",
          "type": "blob",
          "size": 0.140625,
          "content": "serverAddr = \"\"\nserverPort = 7000\nmetadatas.deviceId = \"\"\n\n[[proxies]]\nname = \"\"\ntype = \"http\"\nlocalPort = 8080\n#remotePort = 80\nsubdomain = \"\"\n"
        },
        {
          "name": "gaianet",
          "type": "blob",
          "size": 70.376953125,
          "content": "#!/bin/bash\n\nset -e\n\n# version of CLI tool\n# Note that the version should kept same as the version of installer\nversion=\"0.4.16\"\n\n# version of the GaiaNet node\n# Note that the version should kept same as the version of installer\ninstaller_version=\"0.4.16\"\n\n# path to the default gaianet base directory. It could be changed by the --base option\ngaianet_base_dir=\"$HOME/gaianet\"\n\n# We will make sure that the path is setup in case the user runs gaianet immediately after init\nsource $HOME/.wasmedge/env\n\n# print in red color\nRED=$'\\e[0;31m'\n# print in green color\nGREEN=$'\\e[0;32m'\n# print in yellow color\nYELLOW=$'\\e[0;33m'\n# No Color\nNC=$'\\e[0m'\n\n# Mac OS requires this hack in order to run qdrant reliablly\nif [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n    ulimit -n 10000\nfi\n\ninfo() {\n    printf \"${GREEN}$1${NC}\\n\\n\"\n}\n\nerror() {\n    printf \"${RED}$1${NC}\\n\\n\"\n}\n\nwarning() {\n    printf \"${YELLOW}$1${NC}\\n\\n\"\n}\n\n# download target file to destination. If failed, then exit\ncheck_curl() {\n    curl --retry 3 --progress-bar -L \"$1\" -o \"$2\"\n\n    if [ $? -ne 0 ]; then\n        error \"    * Failed to download $1\"\n        exit 1\n    fi\n}\n\ncheck_curl_silent() {\n    curl --retry 3 -s --progress-bar -L \"$1\" -o \"$2\"\n\n    if [ $? -ne 0 ]; then\n        error \"    * Failed to download $1\"\n        exit 1\n    fi\n}\n\ncheck_base_dir() {\n    # Check if $gaianet_base_dir directory exists\n    if [ ! -d $gaianet_base_dir ]; then\n        printf \"\\n[Error] Not found $gaianet_base_dir.\\n\\nPlease run 'bash install.sh' command first, then try again.\\n\\n\"\n        exit 1\n    fi\n}\n\nsed_in_place() {\n    if [ \"$(uname)\" == \"Darwin\" ]; then\n        sed -i '' \"$@\"\n    elif [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n        sed -i \"$@\"\n    elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n        error \"    * For Windows users, please run this script in WSL.\"\n        exit 1\n    else\n        error \"    * Only support Linux, MacOS and Windows.\"\n        exit 1\n    fi\n}\n\n# check the validity of the config.json file\ncheck_config_options() {\n\n    # check if config.json exists or not\n    if [ ! -f \"$gaianet_base_dir/config.json\" ]; then\n        error \"Not found config.json file in $gaianet_base_dir\"\n        exit 1\n    fi\n\n    # check if the `address` field exists or not\n    if ! grep -q '\"address\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'address' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `chat` field exists or not\n    if ! grep -q '\"chat\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'chat' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `prompt_template` field exists or not\n    if ! grep -q '\"prompt_template\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'prompt_template' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `chat_ctx_size` field exists or not\n    if ! grep -q '\"chat_ctx_size\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'chat_ctx_size' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `system_prompt` field exists or not\n    if ! grep -q '\"system_prompt\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'system_prompt' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `embedding` field exists or not\n    if ! grep -q '\"embedding\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'embedding' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `embedding_ctx_size` field exists or not\n    if ! grep -q '\"embedding_ctx_size\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'embedding_ctx_size' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `snapshot` field exists or not\n    if ! grep -q '\"snapshot\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'snapshot' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `embedding_collection_name` field exists or not\n    if ! grep -q '\"embedding_collection_name\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'embedding_collection_name' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `qdrant_limit` field exists or not\n    if ! grep -q '\"qdrant_limit\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'qdrant_limit' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `qdrant_score_threshold` field exists or not\n    if ! grep -q '\"qdrant_score_threshold\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'qdrant_score_threshold' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `rag_prompt` field exists or not\n    if ! grep -q '\"rag_prompt\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'rag_prompt' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `rag_policy` field exists or not\n    if ! grep -q '\"rag_policy\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'rag_policy' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `domain` field exists or not\n    if ! grep -q '\"domain\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'domain' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n    # check if the `llamaedge_port` field exists or not\n    if ! grep -q '\"llamaedge_port\":' $gaianet_base_dir/config.json; then\n        error \"Not found the 'llamaedge_port' field in $gaianet_base_dir/config.json\\n\"\n        exit 1\n    fi\n\n}\n\n# create or recover a qdrant collection\ncreate_collection() {\n    printf \"[+] Creating 'default' collection in the Qdrant instance ...\\n\"\n\n    qdrant_pid=0\n    qdrant_already_running=false\n    if [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n        if lsof -Pi :6333 -sTCP:LISTEN -t >/dev/null ; then\n            warning \"    * A Qdrant instance is already running\"\n            qdrant_already_running=true\n        fi\n    elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n        printf \"For Windows users, please run this script in WSL.\\n\"\n        exit 1\n    else\n        printf \"Only support Linux, MacOS and Windows.\\n\"\n        exit 1\n    fi\n\n    if [ \"$qdrant_already_running\" = false ]; then\n        printf \"    * Start a Qdrant instance ...\\n\\n\"\n        # start qdrant\n        cd $gaianet_base_dir/qdrant\n\n        # check if `log` directory exists or not\n        if [ ! -d \"$gaianet_base_dir/log\" ]; then\n            mkdir -p -m777 $gaianet_base_dir/log\n        fi\n        log_dir=$gaianet_base_dir/log\n\n        nohup $gaianet_base_dir/bin/qdrant > $log_dir/init-qdrant.log 2>&1 &\n        sleep 10\n        qdrant_pid=$!\n    fi\n\n    cd $gaianet_base_dir\n    url_snapshot=$(awk -F'\"' '/\"snapshot\":/ {print $4}' config.json)\n    url_document=$(awk -F'\"' '/\"document\":/ {print $4}' config.json)\n    embedding_collection_name=$(awk -F'\"' '/\"embedding_collection_name\":/ {print $4}' config.json)\n    if [[ -z \"$embedding_collection_name\" ]]; then\n        embedding_collection_name=\"default\"\n    fi\n\n    printf \"    * Remove the existed 'default' Qdrant collection ...\\n\\n\"\n    cd $gaianet_base_dir\n    # remove the collection if it exists\n    del_response=$(curl -s -X DELETE http://localhost:6333/collections/$embedding_collection_name \\\n        -H \"Content-Type: application/json\")\n\n    curl_exit_status=$?\n\n    if [ $curl_exit_status -ne 0 ]; then\n        error \"      Failed to remove the $embedding_collection_name collection. Exit.\"\n\n        if [ \"$qdrant_already_running\" = false ]; then\n            kill $qdrant_pid\n        fi\n\n        exit 1\n    fi\n\n    status=$(echo \"$del_response\" | grep -o '\"status\":\"[^\"]*\"' | cut -d':' -f2 | tr -d '\"')\n    if [ \"$status\" != \"ok\" ]; then\n        error \"      Failed to remove the $embedding_collection_name collection. $del_response\"\n\n        if [ \"$qdrant_already_running\" = false ]; then\n            kill $qdrant_pid\n        fi\n\n        exit 1\n    fi\n\n    # 10.1 recover from the given qdrant collection snapshot\n    if [ -n \"$url_snapshot\" ]; then\n        # Regular expression for URL validation\n        regex='(https?|ftp)://[-[:alnum:]\\+&@#/%?=~_|!:,.;]+'\n\n        # Check if $url_snapshot is a valid URL\n        if [[ $url_snapshot =~ $regex ]]; then\n            printf \"    * Download Qdrant collection snapshot ...\\n\"\n            if [[ $url_snapshot == *.tar.gz ]]; then\n                filename=$(basename $url_snapshot)\n                check_curl $url_snapshot $gaianet_base_dir/$filename\n                tar -xzOf $gaianet_base_dir/$filename > $gaianet_base_dir/default.snapshot\n                rm $gaianet_base_dir/$filename\n            else\n                check_curl $url_snapshot $gaianet_base_dir/default.snapshot\n            fi\n            info \"      The snapshot is downloaded in $gaianet_base_dir\"\n\n        # Check if $url_snapshot is a local file\n        elif [ -f \"$gaianet_base_dir/$url_snapshot\" ]; then\n            info \"      * Use local snapshot: $url_snapshot\"\n            if [[ $url_snapshot == *.tar.gz ]]; then\n                tar -xzOf $gaianet_base_dir/$url_snapshot > $gaianet_base_dir/default.snapshot\n            else\n                # make a copy of the original snapshot file\n                cp $gaianet_base_dir/$url_snapshot $gaianet_base_dir/default.snapshot\n            fi\n\n        else\n            echo \"$url_snapshot is neither a valid URL nor a local file.\"\n        fi\n\n        printf \"    * Import the Qdrant collection snapshot ...\\n\"\n        printf \"      The process may take a few minutes. Please wait ...\\n\"\n        # Import the default.snapshot file\n        cd $gaianet_base_dir\n        response=$(curl -s -X POST http://localhost:6333/collections/$embedding_collection_name/snapshots/upload?priority=snapshot \\\n            -H 'Content-Type:multipart/form-data' \\\n            -F 'snapshot=@default.snapshot')\n        sleep 5\n\n        if echo \"$response\" | grep -q '\"status\":\"ok\"'; then\n            rm $gaianet_base_dir/default.snapshot\n            info \"      Recovery is done!\"\n        else\n            error \"    * [Error] Failed to recover from the collection snapshot. $response\"\n\n            if [ \"$qdrant_already_running\" = false ]; then\n                info \"    * Stop the Qdrant instance ...\"\n                kill -9 $qdrant_pid\n            fi\n\n            exit 1\n        fi\n\n    # 10.2 generate a Qdrant collection from the given document\n    elif [ -n \"$url_document\" ]; then\n        printf \"    * Create 'default' Qdrant collection from the given document ...\\n\\n\"\n\n        # Start LlamaEdge API Server\n        printf \"    * Start LlamaEdge-RAG API Server ...\\n\\n\"\n\n        # parse cli options for chat model\n        cd $gaianet_base_dir\n\n        url_chat_model=$(awk -F'\"' '/\"chat\":/ {print $4}' config.json)\n        # gguf filename\n        chat_model_name=$(basename $url_chat_model)\n        # Directly attempt to extract \"chat_name\" and fallback to extracting from \"chat\" if empty\n        chat_name=$(grep '\"chat_name\":' config.json | sed -E 's/.*\"chat_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$chat_name\" ]; then\n            chat_model_stem=$(basename \"${url_chat_model%.*}\")\n        else\n            chat_model_stem=$chat_name\n        fi\n\n        # parse context size for chat model\n        chat_ctx_size=$(awk -F'\"' '/\"chat_ctx_size\":/ {print $4}' config.json)\n        # parse prompt type for chat model\n        prompt_type=$(awk -F'\"' '/\"prompt_template\":/ {print $4}' config.json)\n        # parse reverse prompt for chat model\n        reverse_prompt=$(awk -F'\"' '/\"reverse_prompt\":/ {print $4}' config.json)\n\n        url_embedding_model=$(awk -F'\"' '/\"embedding\":/ {print $4}' config.json)\n        # gguf filename\n        embedding_model_name=$(basename $url_embedding_model)\n        # Directly attempt to extract \"embedding_name\" and fallback to extracting from \"embedding\" if empty\n        embedding_name=$(grep '\"embedding_name\":' config.json | sed -E 's/.*\"embedding_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$embedding_name\" ]; then\n            embedding_model_stem=$(basename \"${url_embedding_model%.*}\")\n        else\n            embedding_model_stem=$embedding_name\n        fi\n\n        # parse context size for embedding model\n        embedding_ctx_size=$(awk -F'\"' '/\"embedding_ctx_size\":/ {print $4}' config.json)\n        # parse cli options for embedding vector collection name\n        embedding_collection_name=$(awk -F'\"' '/\"embedding_collection_name\":/ {print $4}' config.json)\n        if [[ -z \"$embedding_collection_name\" ]]; then\n            embedding_collection_name=\"default\"\n        fi\n        # parse port for LlamaEdge API Server\n        llamaedge_port=$(awk -F'\"' '/\"llamaedge_port\":/ {print $4}' config.json)\n\n        if [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n            if lsof -Pi :$llamaedge_port -sTCP:LISTEN -t >/dev/null ; then\n                error \"      It appears that the GaiaNet node is running. Please stop it first.\"\n\n                if [ \"$qdrant_already_running\" = false ]; then\n                    kill $qdrant_pid\n                fi\n\n                exit 1\n            fi\n        elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n            error \"      For Windows users, please run this script in WSL.\"\n\n            if [ \"$qdrant_already_running\" = false ]; then\n                kill $qdrant_pid\n            fi\n\n            exit 1\n        else\n            error \"      Only support Linux, MacOS and Windows.\"\n\n            if [ \"$qdrant_already_running\" = false ]; then\n                kill $qdrant_pid\n            fi\n\n            exit 1\n        fi\n\n        # command to start LlamaEdge API Server\n        cd $gaianet_base_dir\n        cmd=\"wasmedge --dir .:. \\\n        --env NODE_VERSION=$installer_version \\\n        --nn-preload default:GGML:AUTO:$chat_model_name \\\n        --nn-preload embedding:GGML:AUTO:$embedding_model_name \\\n        rag-api-server.wasm \\\n        --prompt-template $prompt_type,embedding \\\n        --model-name $chat_model_stem,$embedding_model_stem \\\n        --ctx-size $chat_ctx_size,$embedding_ctx_size \\\n        --qdrant-collection-name $embedding_collection_name \\\n        --web-ui ./dashboard \\\n        --socket-addr 0.0.0.0:$llamaedge_port\"\n\n        nohup $cmd > $log_dir/init-qdrant-gen-collection.log 2>&1 &\n        sleep 5\n        llamaedge_pid=$!\n        echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid\n\n        printf \"    * Convert document to embeddings ...\\n\"\n        printf \"      The process may take a few minutes. Please wait ...\\n\\n\"\n        cd $gaianet_base_dir\n        doc_filename=$(basename $url_document)\n        check_curl_silent $url_document $gaianet_base_dir/$doc_filename\n\n        if [[ $doc_filename != *.txt ]] && [[ $doc_filename != *.md ]]; then\n            error \"The document to upload should be a file with 'txt' or 'md' extension.\"\n\n            # stop the api-server\n            if [ -f \"$gaianet_base_dir/llamaedge.pid\" ]; then\n                kill $(cat $gaianet_base_dir/llamaedge.pid)\n                rm $gaianet_base_dir/llamaedge.pid\n            fi\n\n            if [ \"$qdrant_already_running\" = false ]; then\n                kill $qdrant_pid\n            fi\n\n            exit 1\n        fi\n\n        # compute embeddings\n        embedding_response=$(curl -s -X POST http://127.0.0.1:$llamaedge_port/v1/create/rag -F \"file=@$doc_filename\")\n\n        # remove the downloaded document\n        rm -f $gaianet_base_dir/$doc_filename\n\n        # stop the api-server\n        if [ -f \"$gaianet_base_dir/llamaedge.pid\" ]; then\n            # stop API server\n            kill $(cat $gaianet_base_dir/llamaedge.pid)\n            rm $gaianet_base_dir/llamaedge.pid\n        fi\n\n        if [ -z \"$embedding_response\" ]; then\n            error \"      Failed to compute embeddings. Exit.\"\n\n            if [ \"$qdrant_already_running\" = false ]; then\n                kill $qdrant_pid\n            fi\n\n            exit 1\n        else\n            info \"    * Embeddings are computed successfully\"\n        fi\n\n    else\n        error \"Please set 'snapshot' or 'document' field in config.json. Exit.\"\n\n        if [ \"$qdrant_already_running\" = false ]; then\n            kill $qdrant_pid\n        fi\n\n        exit 1\n    fi\n\n    if [ \"$qdrant_already_running\" = false ]; then\n        # stop qdrant\n        kill $qdrant_pid\n    fi\n\n    # sleep for a while to make sure the qdrant instance is stopped\n    sleep 10\n}\n\n# * init subcommand\n\ninit() {\n\n    # check if config.json exists or not\n    printf \"[+] Checking the config.json file ...\\n\"\n    check_config_options\n    printf \"\\n\"\n\n    # download GGUF chat model file to $gaianet_base_dir\n    url_chat_model=$(awk -F'\"' '/\"chat\":/ {print $4}' $gaianet_base_dir/config.json)\n    chat_model=$(basename $url_chat_model)\n    if [[ $url_chat_model =~ ^http[s]?://.* ]]; then\n        printf \"[+] Downloading $chat_model ...\\n\"\n        if [ -f \"$gaianet_base_dir/$chat_model\" ]; then\n            warning \"    * Using the cached $chat_model in $gaianet_base_dir\"\n        else\n            check_curl $url_chat_model $gaianet_base_dir/$chat_model\n            info \"    * $chat_model is downloaded in $gaianet_base_dir\"\n        fi\n    elif [[ $url_chat_model =~ .*\\.gguf$ ]]; then\n        printf \"[+] Using local $chat_model ...\\n\"\n        if [ -f \"$gaianet_base_dir/$chat_model\" ]; then\n            warning \"    * Found $chat_model in $gaianet_base_dir\"\n        else\n            error \"    * Not found $chat_model in $gaianet_base_dir. Exit ...\"\n            exit 1\n        fi\n    else\n        error \"Error: The 'chat' field in $gaianet_base_dir/config.json should be a url or a gguf model file. Exit ...\"\n        exit 1\n    fi\n\n    # download GGUF embedding model file to $gaianet_base_dir\n    url_embedding_model=$(awk -F'\"' '/\"embedding\":/ {print $4}' $gaianet_base_dir/config.json)\n    embedding_model=$(basename $url_embedding_model)\n    if [[ $url_embedding_model =~ ^http[s]?://.* ]]; then\n        printf \"[+] Downloading $embedding_model ...\\n\"\n        if [ -f \"$gaianet_base_dir/$embedding_model\" ]; then\n            warning \"    * Using the cached $embedding_model in $gaianet_base_dir\"\n        else\n            check_curl $url_embedding_model $gaianet_base_dir/$embedding_model\n            info \"    * $embedding_model is downloaded in $gaianet_base_dir\"\n        fi\n    elif [[ $url_embedding_model =~ .*\\.gguf$ ]]; then\n        printf \"[+] Using local $embedding_model ...\\n\"\n        if [ -f \"$gaianet_base_dir/$embedding_model\" ]; then\n            warning \"    * Found $embedding_model in $gaianet_base_dir\"\n        else\n            error \"    * Not found $embedding_model in $gaianet_base_dir. Exit ...\"\n            exit 1\n        fi\n    else\n        error \"Error: The 'embedding' field in $gaianet_base_dir/config.json should be a url or a gguf model file. Exit ...\"\n        exit 1\n    fi\n\n    snapshot=$(awk -F'\"' '/\"snapshot\":/ {print $4}' $gaianet_base_dir/config.json)\n    if [ -n \"$snapshot\" ]; then\n        # create or recover a qdrant collection\n        create_collection\n    fi\n\n    # Copy config to dashboard\n    if [ ! -f \"$gaianet_base_dir/registry.wasm\" ] ; then\n        printf \"[+] Downloading the registry.wasm ...\\n\"\n\n        check_curl_silent https://github.com/GaiaNet-AI/gaianet-node/raw/main/utils/registry/registry.wasm $gaianet_base_dir/registry.wasm\n\n        printf \"\\n\"\n    fi\n    printf \"[+] Preparing the dashboard ...\\n\"\n    cd $gaianet_base_dir\n    wasmedge --dir .:. registry.wasm\n    printf \"\\n\"\n\n    printf \"[+] Preparing the GaiaNet domain ...\\n\"\n    # Update frpc.toml\n    address=$(awk -F'\"' '/\"address\":/ {print $4}' $gaianet_base_dir/config.json)\n    domain=$(awk -F'\"' '/\"domain\":/ {print $4}' $gaianet_base_dir/config.json)\n    llamaedge_port=$(awk -F'\"' '/\"llamaedge_port\":/ {print $4}' $gaianet_base_dir/config.json)\n\n    sed_in_place \"s/subdomain = \\\".*\\\"/subdomain = \\\"$address\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\n    sed_in_place \"s/name = \\\".*\\\"/name = \\\"$address.$domain\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\n    sed_in_place \"s/localPort = .*/localPort = $llamaedge_port/g\" $gaianet_base_dir/gaia-frp/frpc.toml\n    sed_in_place \"s/serverAddr = \\\".*\\\"/serverAddr = \\\"$domain\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\n\n    # Remove all files in the directory except for frpc and frpc.toml\n    find $gaianet_base_dir/gaia-frp -type f -not -name 'frpc' -not -name 'frpc.toml' -exec rm -f {} \\;\n\n    printf \"\\n\"\n\n    printf \"[+] COMPLETED! GaiaNet node is initialized successfully.\\n\\n\"\n\n    info \">>> To start the GaiaNet node, run the command: gaianet start <<<\"\n}\n\n# * config subcommand\nupdate_config() {\n    key=$1\n    new_value=$2\n    file=$gaianet_base_dir/config.json\n\n    # update in place\n    if [ -z \"$new_value\" ]; then\n        sed_in_place \"s/\\(\\\"$key\\\": \\s*\\).*\\,/\\1\\\"$new_value\\\",/\" $file\n    else\n        sed_in_place \"/\\\"$key\\\":/ s#: \\\".*\\\"#: \\\"$new_value\\\"#\" $file\n    fi\n}\n\n# * start subcommand\n\n# start rag-api-server and a qdrant instance\nstart() {\n    local_only=$1\n    force_rag=$2\n    log_dir=$gaianet_base_dir/log\n    if ! [ -d \"$log_dir\" ]; then\n        mkdir -p -m777 $log_dir\n    fi\n\n    local_log_storage=1\n    if command -v vector > /dev/null 2>&1 && [ -f $gaianet_base_dir/vector.toml ]; then\n        local_log_storage=0\n    fi\n\n    # check if config.json exists or not\n    printf \"[+] Checking the config.json file ...\\n\"\n    check_config_options\n    printf \"\\n\"\n\n    # sync the config.json to dashboard/config_pub.json\n    cd $gaianet_base_dir\n    wasmedge --dir .:. registry.wasm\n\n    # check if supervise is installed or not\n    use_supervise=true\n    if ! command -v supervise &> /dev/null; then\n        use_supervise=false\n    fi\n\n    snapshot=$(awk -F'\"' '/\"snapshot\":/ {print $4}' $gaianet_base_dir/config.json)\n    if [ -n \"$snapshot\" ] || [ \"$force_rag\" = true ]; then\n        # 1. start a Qdrant instance\n        printf \"[+] Starting Qdrant instance ...\\n\"\n\n        qdrant_already_running=false\n        if [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n            if lsof -Pi :6333 -sTCP:LISTEN -t >/dev/null ; then\n                qdrant_already_running=true\n            fi\n        elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n            printf \"For Windows users, please run this script in WSL.\\n\"\n            exit 1\n        else\n            printf \"Only support Linux, MacOS and Windows.\\n\"\n            exit 1\n        fi\n\n        if [ \"$qdrant_already_running\" = false ]; then\n            qdrant_executable=\"$gaianet_base_dir/bin/qdrant\"\n            if [ -f \"$qdrant_executable\" ]; then\n                cd $gaianet_base_dir/qdrant\n                nohup $qdrant_executable > $log_dir/start-qdrant.log 2>&1 &\n                sleep 2\n                qdrant_pid=$!\n                echo $qdrant_pid > $gaianet_base_dir/qdrant.pid\n                info \"\\n    Qdrant instance started with pid: $qdrant_pid\"\n            else\n                error \"    Qdrant binary not found at $qdrant_executable\\n\\n\"\n                exit 1\n            fi\n        fi\n\n        # 2. start rag-api-server\n        printf \"[+] Starting LlamaEdge API Server ...\\n\\n\"\n\n        # parse cli options for chat model\n        cd $gaianet_base_dir\n\n        url_chat_model=$(awk -F'\"' '/\"chat\":/ {print $4}' config.json)\n        # gguf filename\n        chat_model_name=$(basename $url_chat_model)\n        # Directly attempt to extract \"chat_name\" and fallback to extracting from \"chat\" if empty\n        chat_name=$(grep '\"chat_name\":' config.json | sed -E 's/.*\"chat_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$chat_name\" ]; then\n            chat_model_stem=$(basename \"${url_chat_model%.*}\")\n        else\n            chat_model_stem=$chat_name\n        fi\n\n        # parse context size for chat model\n        chat_ctx_size=$(awk -F'\"' '/\"chat_ctx_size\":/ {print $4}' config.json)\n        # parse batch size for chat model\n        chat_batch_size=$(awk -F'\"' '/\"chat_batch_size\":/ {print $4}' config.json)\n        # parse prompt type for chat model\n        prompt_type=$(awk -F'\"' '/\"prompt_template\":/ {print $4}' config.json)\n        # parse system prompt for chat model\n        rag_prompt=$(awk -F'\"' '/\"rag_prompt\":/ {print $4}' config.json)\n        # parse reverse prompt for chat model\n        reverse_prompt=$(awk -F'\"' '/\"reverse_prompt\":/ {print $4}' config.json)\n        # parse rag policy\n        if grep -q '\"rag_policy\":' config.json; then\n            rag_policy=$(awk -F'\"' '/\"rag_policy\":/ {print $4}' config.json)\n        else\n            rag_policy=\"system-message\"\n        fi\n\n        url_embedding_model=$(awk -F'\"' '/\"embedding\":/ {print $4}' config.json)\n        # gguf filename\n        embedding_model_name=$(basename $url_embedding_model)\n        # Directly attempt to extract \"embedding_name\" and fallback to extracting from \"embedding\" if empty\n        embedding_name=$(grep '\"embedding_name\":' config.json | sed -E 's/.*\"embedding_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$embedding_name\" ]; then\n            embedding_model_stem=$(basename \"${url_embedding_model%.*}\")\n        else\n            embedding_model_stem=$embedding_name\n        fi\n\n        # parse cli options for embedding vector collection name\n        embedding_collection_name=$(awk -F'\"' '/\"embedding_collection_name\":/ {print $4}' config.json)\n        if [[ -z \"$embedding_collection_name\" ]]; then\n            embedding_collection_name=\"default\"\n        fi\n        # parse context size for embedding model\n        embedding_ctx_size=$(awk -F'\"' '/\"embedding_ctx_size\":/ {print $4}' config.json)\n        # parse batch size for embedding model\n        embedding_batch_size=$(awk -F'\"' '/\"embedding_batch_size\":/ {print $4}' config.json)\n        # parse port for LlamaEdge API Server\n        llamaedge_port=$(awk -F'\"' '/\"llamaedge_port\":/ {print $4}' config.json)\n        # parse qdrant limit\n        qdrant_limit=$(awk -F'\"' '/\"qdrant_limit\":/ {print $4}' config.json)\n        # parse qdrant score threshold\n        qdrant_score_threshold=$(awk -F'\"' '/\"qdrant_score_threshold\":/ {print $4}' config.json)\n        # parse context window\n        # check if context window is present in config.json\n        if grep -q '\"context_window\":' config.json; then\n            context_window=$(awk -F'\"' '/\"context_window\":/ {print $4}' config.json)\n        else\n            context_window=1\n        fi\n\n        if [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n            if lsof -Pi :$llamaedge_port -sTCP:LISTEN -t >/dev/null ; then\n                printf \"    Port $llamaedge_port is in use. Exit ...\\n\\n\"\n\n                # stop the qdrant instance\n                if [ \"$qdrant_already_running\" = false ]; then\n\n                    # stop the Qdrant instance\n                    qdrant_pid=$gaianet_base_dir/qdrant.pid\n                    if [ -f $qdrant_pid ]; then\n                        printf \"    Stopping Qdrant instance ...\\n\"\n                        kill -9 $(cat $qdrant_pid)\n                        rm $qdrant_pid\n                    fi\n\n                fi\n\n                exit 1\n            fi\n        elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n            printf \"For Windows users, please run this script in WSL.\\n\"\n            exit 1\n        else\n            printf \"Only support Linux, MacOS and Windows.\\n\"\n            exit 1\n        fi\n\n        cd $gaianet_base_dir\n        llamaedge_wasm=\"$gaianet_base_dir/rag-api-server.wasm\"\n        if [ ! -f \"$llamaedge_wasm\" ]; then\n            error \"Not found rag-api-server.wasm at $$gaianet_base_dir\"\n            exit 1\n        fi\n\n        # command to start LlamaEdge API Server\n        cd $gaianet_base_dir\n        cmd=(wasmedge --dir .:./dashboard \\\n        --env NODE_VERSION=$installer_version \\\n        --nn-preload default:GGML:AUTO:$chat_model_name \\\n        --nn-preload embedding:GGML:AUTO:$embedding_model_name \\\n        rag-api-server.wasm \\\n        --model-name $chat_model_stem,$embedding_model_stem \\\n        --ctx-size $chat_ctx_size,$embedding_ctx_size \\\n        --batch-size $chat_batch_size,$embedding_batch_size \\\n        --prompt-template $prompt_type,embedding \\\n        --rag-policy $rag_policy \\\n        --qdrant-collection-name $embedding_collection_name \\\n        --qdrant-limit $qdrant_limit \\\n        --qdrant-score-threshold $qdrant_score_threshold \\\n        --context-window $context_window \\\n        --web-ui ./ \\\n        --socket-addr 0.0.0.0:$llamaedge_port)\n\n        if $use_supervise; then\n            cmd_string=\"\"\n            for i in \"${cmd[@]}\"; do\n                if [[ $i == *\" \"* ]]; then\n                    cmd_string+=\\\"\"$i\"\\\"\n                else\n                    cmd_string+=\"$i\"\n                fi\n                cmd_string+=\" \"\n            done\n        fi\n\n        # Add rag prompt if it exists\n        if [ -n \"$rag_prompt\" ]; then\n            cmd+=(\"--rag-prompt\" \"$rag_prompt\")\n\n            if $use_supervise; then\n                cmd_string+=\"--rag-prompt \\\"$rag_prompt\\\" \"\n            fi\n        fi\n\n        # Add reverse prompt if it exists\n        if [ -n \"$reverse_prompt\" ]; then\n            cmd+=(\"--reverse-prompt\" \"$reverse_prompt\")\n\n            if $use_supervise; then\n                cmd_string+=\"--reverse-prompt \\\"$reverse_prompt\\\" \"\n            fi\n        fi\n\n        printf \"    Run the following command to start the LlamaEdge API Server:\\n\\n\"\n        for i in \"${cmd[@]}\"; do\n            if [[ $i == *\" \"* ]]; then\n                printf \"\\\"%s\\\" \" \"$i\"\n            else\n                printf \"%s \" \"$i\"\n            fi\n        done\n        printf \"\\n\\n\"\n\n        if $use_supervise; then\n            # create `run` file for supervise\n            echo '#!/bin/bash' > $gaianet_base_dir/run\n            echo $cmd_string >> $gaianet_base_dir/run\n            chmod u+x $gaianet_base_dir/run\n        fi\n\n        # start api-server\n        retry_count=0\n        start_retry_cout=0\n        max_retries=3\n        while true; do\n\n            # start api-server\n            if $use_supervise; then\n                # start LlamaEdge API Server with supervise\n                if [ \"$local_log_storage\" -eq 1 ]; then\n                    nohup supervise $gaianet_base_dir > $log_dir/start-llamaedge.log 2>&1 &\n                else\n                    nohup supervise $gaianet_base_dir | vector --config $gaianet_base_dir/vector.toml > $log_dir/start-vector.log 2>&1 &\n                fi\n                sleep 2\n                supervise_pid=$!\n                echo $supervise_pid > $gaianet_base_dir/supervise.pid\n                printf \"\\n    Daemotools-Supervise started with pid: $supervise_pid\\n\"\n\n                # Get the status of the service\n                status=$(svstat $gaianet_base_dir)\n                # Extract the PID from the status\n                llamaedge_pid=$(echo $status | awk '{print $4}' | tr -d ')')\n                # The reason of incrementing the PID by 1 is that the PID returned by `svstat` is less 1 than the PID returned by `pgrep`\n                llamaedge_pid=$((llamaedge_pid + 1))\n                echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid\n                info \"\\n    LlamaEdge-RAG API Server started with pid: $llamaedge_pid\"\n\n            else\n                # start LlamaEdge API Server with nohup\n                if [ \"$local_log_storage\" -eq 1 ]; then\n                    nohup \"${cmd[@]}\" > $log_dir/start-llamaedge.log 2>&1 &\n                else\n                    nohup \"${cmd[@]}\" | vector --config $gaianet_base_dir/vector.toml > $log_dir/start-vector.log 2>&1 &\n                fi\n                sleep 2\n                llamaedge_pid=$!\n                echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid\n                info \"    LlamaEdge API Server started with pid: $llamaedge_pid\"\n            fi\n\n            sleep 10\n            info \"    Verify the LlamaEdge-RAG API Server. Please wait seconds ...\"\n            if [[ \"$prompt_type\" == *\"tool\"* ]]; then\n                status_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \\\n                    -X POST http://localhost:$llamaedge_port/v1/chat/completions \\\n                    -H 'accept:application/json' \\\n                    -H 'Content-Type: application/json' \\\n                    -d \"{\\\"messages\\\":[{\\\"role\\\":\\\"user\\\", \\\"content\\\": \\\"What is your name?\\\"}], \\\"tools\\\":[{\\\"type\\\":\\\"function\\\",\\\"function\\\":{\\\"name\\\":\\\"get_name\\\",\\\"description\\\":\\\"Return your name\\\"}}], \\\"model\\\":\\\"$chat_model_stem\\\"}\")\n            else\n                status_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \\\n                    -X POST http://localhost:$llamaedge_port/v1/chat/completions \\\n                    -H 'accept:application/json' \\\n                    -H 'Content-Type: application/json' \\\n                    -d \"{\\\"messages\\\":[{\\\"role\\\":\\\"user\\\", \\\"content\\\": \\\"What is your name?\\\"}], \\\"model\\\":\\\"$chat_model_stem\\\"}\")\n            fi\n\n            curl_exit_status=$?\n\n            if [ $curl_exit_status -eq 0 ] && [ \"$status_code\" -eq 200 ]; then\n                info \"    * LlamaEdge-RAG API Server is ready.\"\n                break\n            else\n                tail -2 $log_dir/start-llamaedge.log\n\n                # stop the api-server\n                pkill -9 wasmedge || true\n\n                # stop supervise if it is running\n                if svok $gaianet_base_dir > /dev/null 2>&1; then\n                    svc -d $gaianet_base_dir\n                    svc -k $gaianet_base_dir\n                    svc -x $gaianet_base_dir\n                    supervise_pid=$gaianet_base_dir/supervise.pid\n                    if [ -f $supervise_pid ]; then\n                        rm $supervise_pid\n                    fi\n                    rm $gaianet_base_dir/run\n                    rm -rf $gaianet_base_dir/supervise\n                fi\n\n                # remove the pid file\n                llamaedge_pid=$gaianet_base_dir/llamaedge.pid\n                if [ -f $llamaedge_pid ]; then\n                    rm $llamaedge_pid\n                fi\n\n                sleep 10  # wait for 10 seconds before retrying\n\n                ((start_retry_cout++))\n                if [ $start_retry_cout -ge $((max_retries + 1)) ]; then\n                    error \"    * Failed to start LlamaEdge API Server after $max_retries retries. Exiting ...\"\n\n                    # stop the Qdrant instance\n                    pkill -9 qdrant || true\n                    qdrant_pid=$gaianet_base_dir/qdrant.pid\n                    if [ -f $qdrant_pid ]; then\n                        rm $qdrant_pid\n                    fi\n\n                    # wait for 3 seconds before exiting\n                    sleep 3\n\n                    exit 1\n                else\n                    error \"    * LlamaEdge API Server is not ready. Retrying ($start_retry_cout)...\"\n                fi\n            fi\n\n        done\n\n    else\n\n        # 2. start llama-api-server\n        printf \"[+] Starting LlamaEdge API Server ...\\n\\n\"\n\n        # parse cli options for chat model\n        cd $gaianet_base_dir\n\n        url_chat_model=$(awk -F'\"' '/\"chat\":/ {print $4}' config.json)\n        # gguf filename\n        chat_model_name=$(basename $url_chat_model)\n        # Directly attempt to extract \"chat_name\" and fallback to extracting from \"chat\" if empty\n        chat_name=$(grep '\"chat_name\":' config.json | sed -E 's/.*\"chat_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$chat_name\" ]; then\n            chat_model_stem=$(basename \"${url_chat_model%.*}\")\n        else\n            chat_model_stem=$chat_name\n        fi\n\n        # parse context size for chat model\n        chat_ctx_size=$(awk -F'\"' '/\"chat_ctx_size\":/ {print $4}' config.json)\n        # parse batch size for chat model\n        chat_batch_size=$(awk -F'\"' '/\"chat_batch_size\":/ {print $4}' config.json)\n        # parse prompt type for chat model\n        prompt_type=$(awk -F'\"' '/\"prompt_template\":/ {print $4}' config.json)\n        # parse reverse prompt for chat model\n        reverse_prompt=$(awk -F'\"' '/\"reverse_prompt\":/ {print $4}' config.json)\n\n        url_embedding_model=$(awk -F'\"' '/\"embedding\":/ {print $4}' config.json)\n        # gguf filename\n        embedding_model_name=$(basename $url_embedding_model)\n        # Directly attempt to extract \"embedding_name\" and fallback to extracting from \"embedding\" if empty\n        embedding_name=$(grep '\"embedding_name\":' config.json | sed -E 's/.*\"embedding_name\": *\"([^\"]*)\".*/\\1/')\n        if [ -z \"$embedding_name\" ]; then\n            embedding_model_stem=$(basename \"${url_embedding_model%.*}\")\n        else\n            embedding_model_stem=$embedding_name\n        fi\n\n        # parse cli options for embedding vector collection name\n        embedding_collection_name=$(awk -F'\"' '/\"embedding_collection_name\":/ {print $4}' config.json)\n        if [[ -z \"$embedding_collection_name\" ]]; then\n            embedding_collection_name=\"default\"\n        fi\n        # parse context size for embedding model\n        embedding_ctx_size=$(awk -F'\"' '/\"embedding_ctx_size\":/ {print $4}' config.json)\n        # parse batch size for embedding model\n        embedding_batch_size=$(awk -F'\"' '/\"embedding_batch_size\":/ {print $4}' config.json)\n        # parse port for LlamaEdge API Server\n        llamaedge_port=$(awk -F'\"' '/\"llamaedge_port\":/ {print $4}' config.json)\n        # check port\n        if [ \"$(uname)\" == \"Darwin\" ] || [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n            if lsof -Pi :$llamaedge_port -sTCP:LISTEN -t >/dev/null ; then\n                error \"    Port $llamaedge_port is in use. Exit ...\"\n                exit 1\n            fi\n        elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n            error \"For Windows users, please run this script in WSL. Exit ...\"\n            exit 1\n        else\n            error \"Only support Linux, MacOS and Windows. Exit ...\"\n            exit 1\n        fi\n\n        cd $gaianet_base_dir\n        llamaedge_wasm=\"$gaianet_base_dir/llama-api-server.wasm\"\n        if [ ! -f \"$llamaedge_wasm\" ]; then\n            error \"Not found llama-api-server.wasm in $gaianet_base_dir\\n\"\n            exit 1\n        fi\n\n        # command to start LlamaEdge API Server\n        cd $gaianet_base_dir\n        cmd=(wasmedge --dir .:./dashboard \\\n        --env NODE_VERSION=$installer_version \\\n        --nn-preload default:GGML:AUTO:$chat_model_name \\\n        --nn-preload embedding:GGML:AUTO:$embedding_model_name \\\n        llama-api-server.wasm \\\n        --model-name $chat_model_stem,$embedding_model_stem \\\n        --ctx-size $chat_ctx_size,$embedding_ctx_size \\\n        --batch-size $chat_batch_size,$embedding_batch_size \\\n        --prompt-template $prompt_type,embedding \\\n        --web-ui ./ \\\n        --socket-addr 0.0.0.0:$llamaedge_port)\n\n        if $use_supervise; then\n            cmd_string=\"\"\n            for i in \"${cmd[@]}\"; do\n                if [[ $i == *\" \"* ]]; then\n                    cmd_string+=\\\"\"$i\"\\\"\n                else\n                    cmd_string+=\"$i\"\n                fi\n                cmd_string+=\" \"\n            done\n        fi\n\n        # Add reverse prompt if it exists\n        if [ -n \"$reverse_prompt\" ]; then\n            cmd+=(\"--reverse-prompt\" \"$reverse_prompt\")\n\n            if $use_supervise; then\n                cmd_string+=\"--reverse-prompt \\\"$reverse_prompt\\\" \"\n            fi\n        fi\n\n        printf \"    Run the following command to start the LlamaEdge API Server:\\n\\n\"\n        for i in \"${cmd[@]}\"; do\n            if [[ $i == *\" \"* ]]; then\n                printf \"\\\"%s\\\" \" \"$i\"\n            else\n                printf \"%s \" \"$i\"\n            fi\n        done\n        printf \"\\n\\n\"\n\n        if $use_supervise; then\n            # create `run` file for supervise\n            echo '#!/bin/bash' > $gaianet_base_dir/run\n            echo $cmd_string >> $gaianet_base_dir/run\n            chmod u+x $gaianet_base_dir/run\n        fi\n\n        # start api-server\n        retry_count=0\n        max_retries=3\n        while true; do\n\n            # start api-server\n            if $use_supervise; then\n                # start LlamaEdge API Server with supervise\n                if [ \"$local_log_storage\" -eq 1 ]; then\n                    nohup supervise $gaianet_base_dir > $log_dir/start-llamaedge.log 2>&1 &\n                else\n                    nohup supervise $gaianet_base_dir | vector --config $gaianet_base_dir/vector.toml > $log_dir/vector.log 2>&1 &\n                fi\n                sleep 2\n                supervise_pid=$!\n                echo $supervise_pid > $gaianet_base_dir/supervise.pid\n                info \"    Daemotools-Supervise started with pid: $supervise_pid\"\n\n                # Get the status of the service\n                status=$(svstat $gaianet_base_dir)\n                # Extract the PID from the status\n                llamaedge_pid=$(echo $status | awk '{print $4}' | tr -d ')')\n                # The reason of incrementing the PID by 1 is that the PID returned by `svstat` is less 1 than the PID returned by `pgrep`\n                llamaedge_pid=$((llamaedge_pid + 1))\n                echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid\n                info \"    LlamaEdge-RAG API Server started with pid: $llamaedge_pid\"\n\n            else\n                # start LlamaEdge API Server with nohup\n                if [ \"$local_log_storage\" -eq 1 ]; then\n                    nohup \"${cmd[@]}\" > $log_dir/start-llamaedge.log 2>&1 &\n                else\n                    nohup \"${cmd[@]}\" | vector --config $gaianet_base_dir/vector.toml > $log_dir/vector.log 2>&1 &\n                fi\n                sleep 2\n                llamaedge_pid=$!\n                echo $llamaedge_pid > $gaianet_base_dir/llamaedge.pid\n                info \"    LlamaEdge API Server started with pid: $llamaedge_pid\"\n            fi\n\n            sleep 10\n            info \"    Verify the LlamaEdge API Server. Please wait seconds ...\"\n            if [[ \"$prompt_type\" == *\"tool\"* ]]; then\n                status_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \\\n                    -X POST http://localhost:$llamaedge_port/v1/chat/completions \\\n                    -H 'accept:application/json' \\\n                    -H 'Content-Type: application/json' \\\n                    -d \"{\\\"messages\\\":[{\\\"role\\\":\\\"user\\\", \\\"content\\\": \\\"What is your name?\\\"}], \\\"tools\\\":[{\\\"type\\\":\\\"function\\\",\\\"function\\\":{\\\"name\\\":\\\"get_name\\\",\\\"description\\\":\\\"Return your name\\\"}}], \\\"model\\\":\\\"$chat_model_stem\\\"}\")\n            else\n                status_code=$(curl -o /dev/null -s -w \"%{http_code}\\n\" \\\n                    -X POST http://localhost:$llamaedge_port/v1/chat/completions \\\n                    -H 'accept:application/json' \\\n                    -H 'Content-Type: application/json' \\\n                    -d \"{\\\"messages\\\":[{\\\"role\\\":\\\"user\\\", \\\"content\\\": \\\"What is your name?\\\"}], \\\"model\\\":\\\"$chat_model_stem\\\"}\")\n            fi\n\n            curl_exit_status=$?\n\n            if [ $curl_exit_status -eq 0 ] && [ \"$status_code\" -eq 200 ]; then\n                info \"    * LlamaEdge API Server is ready.\"\n                break\n            else\n                tail -2 $log_dir/start-llamaedge.log\n\n                # stop supervise if it is running\n                if svok $gaianet_base_dir > /dev/null 2>&1; then\n                    svc -d $gaianet_base_dir\n                    svc -k $gaianet_base_dir\n                    svc -x $gaianet_base_dir\n                    supervise_pid=$gaianet_base_dir/supervise.pid\n                    if [ -f $supervise_pid ]; then\n                        rm $supervise_pid\n                    fi\n                    rm $gaianet_base_dir/run\n                    rm -rf $gaianet_base_dir/supervise\n                fi\n\n                # stop the api-server\n                pkill -9 wasmedge || true\n\n                # remove the pid file\n                llamaedge_pid=$gaianet_base_dir/llamaedge.pid\n                if [ -f $llamaedge_pid ]; then\n                    rm $llamaedge_pid\n                fi\n\n                sleep 10  # wait for 10 seconds before retrying\n\n                ((retry_count++))\n                if [ $retry_count -ge $((max_retries + 1)) ]; then\n                    error \"    * Failed to start LlamaEdge API Server after $max_retries retries. Exiting ...\"\n\n                    # wait for 3 seconds before exiting\n                    sleep 3\n\n                    exit 1\n                else\n                    error \"    * Failed to start LlamaEdge API Server. Retrying ($retry_count)...\"\n                fi\n            fi\n\n        done\n\n    fi\n\n    # 3. start gaia-frp\n    if [ \"$local_only\" -eq 0 ]; then\n        # start gaia-frp\n        printf \"[+] Starting gaia-frp ...\\n\\n\"\n        nohup $gaianet_base_dir/bin/frpc -c $gaianet_base_dir/gaia-frp/frpc.toml > $log_dir/start-gaia-frp.log 2>&1 &\n        sleep 2\n        gaia_frp_pid=$!\n        echo $gaia_frp_pid > $gaianet_base_dir/gaia-frp.pid\n        info \"    gaia-frp started with pid: $gaia_frp_pid\"\n\n        # Extract the subdomain from frpc.toml\n        subdomain=$(grep \"subdomain\" $gaianet_base_dir/gaia-frp/frpc.toml | cut -d'=' -f2 | tr -d ' \"')\n\n        domain=$(awk -F'\"' '/\"domain\":/ {print $4}' $gaianet_base_dir/config.json)\n        info \"    The GaiaNet node is started at: https://$subdomain.$domain\"\n    fi\n    if [ \"$local_only\" -eq 1 ]; then\n        printf \"    The GaiaNet node is started in local mode at: http://localhost:$llamaedge_port\\n\\n\"\n    fi\n\n\n    # 4. start server assistant\n    printf \"[+] Starting Server Assistant ...\\n\\n\"\n    sleep 2\n\n    # parse system prompt\n    system_prompt=$(awk -F'\"' '/\"system_prompt\":/ {print $4}' $gaianet_base_dir/config.json)\n    # parse rag prompt\n    rag_prompt=$(awk -F'\"' '/\"rag_prompt\":/ {print $4}' $gaianet_base_dir/config.json)\n\n    # start assistant\n    export RUST_LOG=info\n    nohup $gaianet_base_dir/bin/gaias --server-socket-addr 0.0.0.0:$llamaedge_port --server-log-file $gaianet_base_dir/log/start-llamaedge.log --gaianet-dir $gaianet_base_dir --system-prompt \"$system_prompt\" --rag-prompt \"$rag_prompt\" --log $gaianet_base_dir/log/assistant.log > /dev/null 2>&1 &\n\n    sleep 2\n\n    # capture the pid of the assistant\n    gaias_pid=$!\n\n    # capture the exit status\n    status=$?\n\n    echo $gaias_pid > $gaianet_base_dir/gaias.pid\n\n    # check if the assistant has started successfully\n    if [ $status -ne 0 ]; then\n        error \"    * Failed to start Server Assistant. Exiting ...\"\n\n        # stop the running services\n        stop_force\n\n        exit 1\n    else\n        info \"    Server assistant started with pid: $gaias_pid\"\n    fi\n\n    info \">>> To stop the GaiaNet node, run the command: gaianet stop <<<\"\n    info \">>> You can close this terminal window safely now <<<\"\n\n    exit 0\n}\n\n# * stop subcommand\n\n# deprecated: stop the Qdrant instance, rag-api-server, and gaia-frp\nstop() {\n    # Check if \"gaianet\" directory exists in $HOME\n    if [ ! -d \"$gaianet_base_dir\" ]; then\n        printf \"Not found $gaianet_base_dir\\n\"\n        exit 1\n    fi\n\n    # stop the Qdrant instance\n    qdrant_pid=$gaianet_base_dir/qdrant.pid\n    if [ -f $qdrant_pid ]; then\n        printf \"[+] Stopping Qdrant instance ...\\n\"\n        kill -9 $(cat $qdrant_pid)\n        rm $qdrant_pid\n    fi\n\n    # stop api-server\n    if svok $gaianet_base_dir > /dev/null 2>&1; then\n        # stop supervise\n        printf \"[+] Stopping Daemontools-Supervise ...\\n\"\n        svc -d $gaianet_base_dir\n        svc -k $gaianet_base_dir\n        svc -x $gaianet_base_dir\n        supervise_pid=$gaianet_base_dir/supervise.pid\n        if [ -f $supervise_pid ]; then\n            # kill -9 $(cat $supervise_pid)\n            rm $supervise_pid\n        fi\n        rm $gaianet_base_dir/run\n        rm -rf $gaianet_base_dir/supervise\n\n        # stop api-server\n        llamaedge_pid=$gaianet_base_dir/llamaedge.pid\n        if [ -f $llamaedge_pid ]; then\n            printf \"[+] Stopping API server ...\\n\"\n            kill -9 $(cat $llamaedge_pid)\n            rm $llamaedge_pid\n        fi\n\n    else\n        # stop api-server\n        llamaedge_pid=$gaianet_base_dir/llamaedge.pid\n        if [ -f $llamaedge_pid ]; then\n            printf \"[+] Stopping API server ...\\n\"\n            kill -9 $(cat $llamaedge_pid)\n            rm $llamaedge_pid\n        fi\n    fi\n\n    # stop gaia-frp\n    gaia_frp_pid=$gaianet_base_dir/gaia-frp.pid\n    if [ -f $gaia_frp_pid ]; then\n        printf \"[+] Stopping gaia-frp ...\\n\"\n        kill -9 $(cat $gaia_frp_pid)\n        rm $gaia_frp_pid\n    fi\n\n    exit 0\n}\n\n# force stop the Qdrant instance, rag-api-server, and gaia-frp\nstop_force() {\n    local_log_storage=1\n    if command -v vector > /dev/null 2>&1 && [ -f $gaianet_base_dir/vector.toml ]; then\n        local_log_storage=0\n    fi\n\n    printf \"[+] Stopping WasmEdge, Qdrant and frpc ...\\n\"\n\n    if command -v supervise &> /dev/null; then\n        # stop supervise if it is running\n        if svok $gaianet_base_dir > /dev/null 2>&1; then\n            svc -d $gaianet_base_dir\n            svc -k $gaianet_base_dir\n            svc -x $gaianet_base_dir\n            supervise_pid=$gaianet_base_dir/supervise.pid\n            if [ -f $supervise_pid ]; then\n                rm $supervise_pid\n            fi\n            rm $gaianet_base_dir/run\n            rm -rf $gaianet_base_dir/supervise\n        fi\n    fi\n\n    pkill -9 qdrant || true\n    pkill -9 gaias || true\n    pkill -9 wasmedge || true\n    if [ \"$local_log_storage\" -eq 0 ]; then\n        pkill -9 vector || true\n    fi\n    pkill -9 frpc || true\n\n    qdrant_pid=$gaianet_base_dir/qdrant.pid\n    if [ -f $qdrant_pid ]; then\n        rm $qdrant_pid\n    fi\n\n    gaias_pid=$gaianet_base_dir/gaias.pid\n    if [ -f $gaias_pid ]; then\n        rm $gaias_pid\n    fi\n\n    llamaedge_pid=$gaianet_base_dir/llamaedge.pid\n    if [ -f $llamaedge_pid ]; then\n        rm $llamaedge_pid\n    fi\n\n    vector_pid=$gaianet_base_dir/vector.pid\n    if [ -f $vector_pid ]; then\n        rm $vector_pid\n    fi\n\n    gaia_frp_pid=$gaianet_base_dir/gaia-frp.pid\n    if [ -f $gaia_frp_pid ]; then\n        rm $gaia_frp_pid\n    fi\n\n    exit 0\n}\n\n# * info subcommand\n\n# show device_id and node_id\nshow_info() {\n    # check the validity of the config.json file\n    check_config_options\n\n    # print node_id\n    node_id=$(awk -F'\"' '/\"address\":/ {print $4}' $gaianet_base_dir/config.json)\n    if [ -z \"$node_id\" ]; then\n        warning \"Node id is not assigned. Please run 'gaianet init' command first.\"\n    else\n        info \"Node ID: $node_id\"\n    fi\n\n    frpc_toml=$gaianet_base_dir/gaia-frp/frpc.toml\n    # check if frpc.toml exists or not\n    if [ ! -f \"$frpc_toml\" ]; then\n        error \"Not found frpc.toml file in $gaianet_base_dir/gaia-frp\"\n        exit 1\n    fi\n    # print device_id\n    device_id=$(grep 'metadatas.deviceId' \"$frpc_toml\" | awk -F' = ' '{print $2}' | tr -d '\"')\n    if [ -z \"$device_id\" ]; then\n        warning \"Devide id is not assigned. Please run 'gaianet init' command first.\"\n    else\n        info \"Device ID: $device_id\"\n    fi\n\n}\n\n# * help option\n\nshow_help() {\n    printf \"Usage: gaianet {config|init|run|stop|OPTIONS} \\n\\n\"\n    printf \"Subcommands:\\n\"\n    printf \"  config             Update the configuration.\\n\"\n    printf \"  init               Initialize the GaiaNet node.\\n\"\n    printf \"  run|start          Start the GaiaNet node.\\n\"\n    printf \"  stop               Stop the GaiaNet node.\\n\"\n    printf \"  info               Show the device_id and node_id.\\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --version          Show the version of GaiaNet CLI Tool.\\n\"\n    printf \"  --help             Show this help message\\n\\n\"\n}\n\nshow_config_help() {\n    printf \"Usage: gaianet config [OPTIONS] \\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --chat-url <url>               Update the url of chat model.\\n\"\n    printf \"  --chat-ctx-size <val>          Update the context size of chat model.\\n\"\n    printf \"  --chat-batch-size <val>        Update the batch size of chat model.\\n\"\n    printf \"  --embedding-url <url>          Update the url of embedding model.\\n\"\n    printf \"  --embedding-ctx-size <val>     Update the context size of embedding model.\\n\"\n    printf \"  --embedding-batch-size <val>   Update the batch size of embedding model.\\n\"\n    printf \"  --prompt-template <val>        Update the prompt template of chat model.\\n\"\n    printf \"  --port <val>                   Update the port of LlamaEdge API Server.\\n\"\n    printf \"  --system-prompt <val>          Update the system prompt.\\n\"\n    printf \"  --rag-prompt <val>             Update the rag prompt.\\n\"\n    printf \"  --rag-policy <val>             Update the rag policy [Possible values: system-message, last-user-message].\\n\"\n    printf \"  --reverse-prompt <val>         Update the reverse prompt.\\n\"\n    printf \"  --domain <val>                 Update the domain of GaiaNet node.\\n\"\n    printf \"  --snapshot <url>               Update the Qdrant snapshot.\\n\"\n    printf \"  --qdrant-limit <val>           Update the max number of result to return.\\n\"\n    printf \"  --qdrant-score-threshold <val> Update the minimal score threshold for the result.\\n\"\n    printf \"  --context-window <val>         Update the context window.\\n\"\n    printf \"  --base <path>                  The base directory of GaiaNet node.\\n\"\n    printf \"  --help                         Show this help message\\n\\n\"\n}\n\nshow_init_help() {\n    printf \"Usage: gaianet init [OPTIONS] \\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --config <val|url>         Name of a pre-defined GaiaNet config or a url. Possible values: default, paris_guide, mua, gaia.\\n\"\n    printf \"  --base <path>              The base directory of GaiaNet.\\n\"\n    printf \"  --help                     Show this help message\\n\\n\"\n}\n\nshow_start_help() {\n    printf \"Usage: gaianet start|run [OPTIONS] \\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --local-only               Start the program in local mode.\\n\"\n    printf \"  --base <path>              The base directory of GaiaNet.\\n\"\n    printf \"  --force-rag                Force start rag-api-server even if the 'snapshot' field of config.json is empty. Users should ensure the qdrant has been initialized with the desired snapshot.\\n\"\n    printf \"  --help                     Show this help message\\n\\n\"\n}\n\nshow_stop_help() {\n    printf \"Usage: gaianet stop [OPTIONS] \\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --base <path>              The base directory of GaiaNet.\\n\"\n    printf \"  --help                     Show this help message\\n\\n\"\n}\n\nshow_info_help() {\n    printf \"Usage: gaianet info [OPTIONS] \\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --base <path>              The base directory of GaiaNet.\\n\"\n    printf \"  --help                     Show this help message\\n\\n\"\n}\n\n# * main\nif [ $# -eq 0 ]; then\n    show_help\n    exit 0\nfi\n\nsubcommand=$1\nshift\n\ncase $subcommand in\n    --help)\n        show_help\n        ;;\n    --version)\n        echo \"GaiaNet CLI Tool v$version\"\n        ;;\n    config)\n        chat_ctx_size=\"\"\n        chat_url=\"\"\n        chat_batch_size=\"\"\n        embedding_ctx_size=\"\"\n        embedding_url=\"\"\n        embedding_batch_size=\"\"\n        prompt_template=\"\"\n        port=\"\"\n        system_prompt=\"\"\n        rag_prompt=\"\"\n        rag_policy=\"\"\n        reverse_prompt=\"\"\n        domain=\"\"\n        snapshot=\"placeholder\"\n        qdrant_limit=\"\"\n        qdrant_score_threshold=\"\"\n        context_window=\"\"\n\n        while (( \"$#\" )); do\n            case \"$1\" in\n                --chat-url)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        chat_url=$2\n                        shift 2\n                    fi\n                    ;;\n                --chat-ctx-size)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        chat_ctx_size=$2\n                        shift 2\n                    fi\n                    ;;\n                --chat-batch-size)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        chat_batch_size=$2\n                        shift 2\n                    fi\n                    ;;\n                --embedding-url)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        embedding_url=$2\n                        shift 2\n                    fi\n                    ;;\n                --embedding-ctx-size)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        embedding_ctx_size=$2\n                        shift 2\n                    fi\n                    ;;\n                --embedding-batch-size)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        embedding_batch_size=$2\n                        shift 2\n                    fi\n                    ;;\n                --prompt-template)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        prompt_template=$2\n                        shift 2\n                    fi\n                    ;;\n                --port)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        port=$2\n                        shift 2\n                    fi\n                    ;;\n                --system-prompt)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        system_prompt=$2\n                        shift 2\n                    fi\n                    ;;\n                --rag-prompt)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        rag_prompt=$2\n                        shift 2\n                    fi\n                    ;;\n                --rag-policy)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        rag_policy=$2\n                        shift 2\n                    fi\n                    ;;\n                --reverse-prompt)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        reverse_prompt=$2\n                        shift 2\n                    fi\n                    ;;\n                --domain)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        domain=$2\n                        shift 2\n                    fi\n                    ;;\n                --snapshot)\n                    new_value=$2\n                    # Check if new_value is empty\n                    if [ -z \"$new_value\" ]; then\n                        snapshot=\"\"\n                        shift 2\n                    elif [ ${2:0:1} != \"-\" ]; then\n                        snapshot=$2\n                        shift 2\n                    fi\n                    ;;\n                --qdrant-limit)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        qdrant_limit=$2\n                        shift 2\n                    fi\n                    ;;\n                --qdrant-score-threshold)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        qdrant_score_threshold=$2\n                        shift 2\n                    fi\n                    ;;\n                --context-window)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        context_window=$2\n                        shift 2\n                    fi\n                    ;;\n                --base)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        gaianet_base_dir=$2\n                        shift 2\n                        check_base_dir\n                    fi\n                    ;;\n                *)\n                    show_config_help\n                    exit 1\n                    ;;\n            esac\n        done\n\n        printf \"\\n\"\n\n        # update url of chat model\n        if [ -n \"$chat_url\" ]; then\n            printf \"[+] Updating the url of chat model ...\\n\"\n            printf \"    * Old url: $(awk -F'\"' '/\"chat\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New url: $chat_url\"\n\n            # update\n            update_config chat $chat_url\n        fi\n\n        # update context size of chat model\n        if [ -n \"$chat_ctx_size\" ]; then\n            printf \"[+] Updating the context size of chat model ...\\n\"\n            printf \"    * Old size: $(awk -F'\"' '/\"chat_ctx_size\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New size: $chat_ctx_size\"\n\n            # update\n            update_config chat_ctx_size $chat_ctx_size\n        fi\n\n        # update batch size of chat model\n        if [ -n \"$chat_batch_size\" ]; then\n            printf \"[+] Updating the batch size of chat model ...\\n\"\n            printf \"    * Old size: $(awk -F'\"' '/\"chat_batch_size\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New size: $chat_batch_size\"\n\n            # update\n            update_config chat_batch_size $chat_batch_size\n        fi\n\n        # update url of embedding model\n        if [ -n \"$embedding_url\" ]; then\n            printf \"[+] Updating the url of embedding model ...\\n\"\n            printf \"    * Old url: $(awk -F'\"' '/\"embedding\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New url: $embedding_url\"\n\n            # update\n            update_config embedding $embedding_url\n        fi\n\n        # update context size of embedding model\n        if [ -n \"$embedding_ctx_size\" ]; then\n            printf \"[+] Updating the context size of embedding model ...\\n\"\n            printf \"    * Old size: $(awk -F'\"' '/\"embedding_ctx_size\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New size: $embedding_ctx_size\"\n\n            # update\n            update_config embedding_ctx_size $embedding_ctx_size\n        fi\n\n        # update batch size of embedding model\n        if [ -n \"$embedding_batch_size\" ]; then\n            printf \"[+] Updating the batch size of embedding model ...\\n\"\n            printf \"    * Old size: $(awk -F'\"' '/\"embedding_batch_size\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New size: $embedding_batch_size\"\n\n            # update\n            update_config embedding_batch_size $embedding_batch_size\n        fi\n\n        # update prompt template\n        if [ -n \"$prompt_template\" ]; then\n            printf \"[+] Updating the prompt template of chat model ...\\n\"\n            printf \"    * Old template: $(awk -F'\"' '/\"prompt_template\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New template: $prompt_template\"\n\n            # update\n            update_config prompt_template $prompt_template\n        fi\n\n        # update prompt template\n        if [ -n \"$reverse_prompt\" ]; then\n            printf \"[+] Updating the reverse prompt of chat model ...\\n\"\n            printf \"    * Old template: $(awk -F'\"' '/\"reverse_prompt\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New template: $reverse_prompt\"\n\n            # update\n            update_config reverse_prompt $reverse_prompt\n        fi\n\n        # update port\n        if [ -n \"$port\" ]; then\n            printf \"[+] Updating the port of LlamaEdge API Server ...\\n\"\n            printf \"    * Old port: $(awk -F'\"' '/\"llamaedge_port\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New port: $port\"\n\n            # update\n            update_config llamaedge_port $port\n        fi\n\n        # update system prompt\n        if [ -n \"$system_prompt\" ]; then\n            printf \"[+] Updating the system prompt of chat model ...\\n\"\n            printf \"    * Old system prompt: $(awk -F'\"' '/\"system_prompt\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New system prompt: $system_prompt\"\n            # The new value for system_prompt\n            new_value=\"$system_prompt\"\n\n            # Escape ampersands and backslashes in the new value\n            new_value_escaped=$(echo \"$new_value\" | sed 's/[&\\\\/]/\\\\&/g')\n\n            # Update the value of system_prompt in config.json\n            sed_in_place \"s|\\\"system_prompt\\\": \\\".*\\\"|\\\"system_prompt\\\": \\\"$new_value_escaped\\\"|\" $gaianet_base_dir/config.json\n        fi\n\n        # update rag prompt\n        if [ -n \"$rag_prompt\" ]; then\n            printf \"[+] Updating the rag prompt of chat model ...\\n\"\n            printf \"    * Old port: $(awk -F'\"' '/\"rag_prompt\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New rag prompt: $rag_prompt\"\n\n            # The new value for rag_prompt\n            new_value=\"$rag_prompt\"\n\n            # Escape ampersands and backslashes in the new value\n            new_value_escaped=$(echo \"$new_value\" | sed 's/[&\\\\/]/\\\\&/g')\n\n            # Update the value of rag_prompt in config.json\n            sed_in_place \"s|\\\"rag_prompt\\\": \\\".*\\\"|\\\"rag_prompt\\\": \\\"$new_value_escaped\\\"|\" $gaianet_base_dir/config.json\n        fi\n\n        # update rag policy\n        if [ -n \"$rag_policy\" ]; then\n            printf \"[+] Updating the rag policy of GaiaNet node ...\\n\"\n            printf \"    * Old rag policy: $(awk -F'\"' '/\"rag_policy\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New rag policy: $rag_policy\"\n\n            # update\n            update_config rag_policy $rag_policy\n        fi\n\n        # update domain\n        if [ -n \"$domain\" ]; then\n            printf \"[+] Updating the domain of GaiaNet node ...\\n\"\n            printf \"    * Old domain: $(awk -F'\"' '/\"domain\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New domain: $domain\"\n\n            # update\n            update_config domain $domain\n        fi\n\n        # update url of snapshot\n        if [ -z \"$snapshot\" ] || [ \"$snapshot\" != \"placeholder\" ]; then\n            printf \"[+] Updating the url of snapshot ...\\n\"\n            printf \"    * Old url: $(awk -F'\"' '/\"snapshot\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New url: $snapshot\"\n\n            # update\n            update_config snapshot $snapshot\n        fi\n\n        # update qdrant limit\n        if [ -n \"$qdrant_limit\" ]; then\n            printf \"[+] Updating the qdrant limit ...\\n\"\n            printf \"    * Old limit: $(awk -F'\"' '/\"qdrant_limit\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New limit: $qdrant_limit\"\n\n            # update\n            update_config qdrant_limit $qdrant_limit\n        fi\n\n        # update qdrant score threshold\n        if [ -n \"$qdrant_score_threshold\" ]; then\n            printf \"[+] Updating the qdrant score threshold ...\\n\"\n            printf \"    * Old threshold: $(awk -F'\"' '/\"qdrant_score_threshold\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New threshold: $qdrant_score_threshold\"\n\n            # update\n            update_config qdrant_score_threshold $qdrant_score_threshold\n        fi\n\n        # update context window\n        if [ -n \"$context_window\" ]; then\n            printf \"[+] Updating the context window ...\\n\"\n            printf \"    * Old window: $(awk -F'\"' '/\"context_window\":/ {print $4}' $gaianet_base_dir/config.json)\\n\"\n            info \"    * New window: $context_window\"\n\n            # update\n            update_config context_window $context_window\n        fi\n\n        printf \"[+] COMPLETED! The config.json is updated successfully.\\n\\n\"\n\n        exit 0\n        ;;\n\n    init)\n        config=\"\"\n\n        while (( \"$#\" )); do\n            case \"$1\" in\n                --config)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        config=$2\n                        shift 2\n                    fi\n                    ;;\n                --base)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        gaianet_base_dir=$2\n                        shift 2\n                        check_base_dir\n                    fi\n                    ;;\n                *)\n                    show_init_help\n                    exit 1\n                    ;;\n            esac\n        done\n\n        case $config in\n            \"\")\n                init\n                ;;\n            paris_guide)\n                printf \"[+] Downloading config.json ...\\n\"\n                config_url=\"https://raw.githubusercontent.com/GaiaNet-AI/gaianet-node/main/config.json\"\n                printf \"    Url: $config_url\\n\"\n                curl --retry 3 --progress-bar -L $config_url -o $gaianet_base_dir/config.json\n                info \"    The config.json of Paris Guide is downloaded in $gaianet_base_dir\"\n\n                # init\n                init\n                ;;\n            mua)\n                printf \"[+] Downloading config.json ...\\n\"\n                config_url=\"https://raw.githubusercontent.com/alabulei1/test-ports/main/mua/config.json\"\n                printf \"    Url: $config_url\\n\"\n                curl --retry 3 --progress-bar -L $config_url -o $gaianet_base_dir/config.json\n                info \"    The config.json of mua is downloaded in $gaianet_base_dir\"\n\n                # init\n                init\n                ;;\n            gaia)\n                printf \"[+] Downloading config.json ...\\n\"\n                config_url=\"https://raw.githubusercontent.com/alabulei1/test-ports/main/gaianet/config.json\"\n                printf \"    Url: $config_url\\n\"\n                curl --retry 3 --progress-bar -L $config_url -o $gaianet_base_dir/config.json\n                info \"    The config.json of gaia is downloaded in $gaianet_base_dir\"\n\n                # init\n                init\n                ;;\n            *)\n                # if config is a url\n                if [[ $config == http* ]]; then\n                    printf \"[+] Downloading config.json ...\\n\"\n                    printf \"    Url: $config\\n\"\n                    curl --retry 3 --progress-bar -L $config -o $gaianet_base_dir/config.json\n                    info \"    The config.json is downloaded in $gaianet_base_dir\"\n\n                    # init\n                    init\n                else\n                    show_init_help\n                    exit 1\n                fi\n                ;;\n        esac\n\n        ;;\n    run|start)\n        local=0\n\n\tforce_rag=false\n\n        while (( \"$#\" )); do\n            case \"$1\" in\n                --local-only)\n                    local=1\n                    shift\n                    ;;\n                --base)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        gaianet_base_dir=$2\n                        shift 2\n                        check_base_dir\n                    fi\n                    ;;\n                --force-rag)\n                    force_rag=true\n                    shift\n                    ;;\n                *)\n                    show_start_help\n                    exit 1\n                    ;;\n            esac\n        done\n\n        start $local $force_rag\n\n        ;;\n\n    stop)\n        while (( \"$#\" )); do\n            case \"$1\" in\n                --base)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        gaianet_base_dir=$2\n                        shift 2\n                        check_base_dir\n                    fi\n                    ;;\n                *)\n                    show_stop_help\n                    exit 1\n                    ;;\n            esac\n        done\n\n        stop_force\n\n        ;;\n    info)\n        while (( \"$#\" )); do\n            case \"$1\" in\n                --base)\n                    if [ -n \"$2\" ] && [ ${2:0:1} != \"-\" ]; then\n                        gaianet_base_dir=$2\n                        shift 2\n                        check_base_dir\n                    fi\n                    ;;\n                *)\n                    show_info_help\n                    exit 1\n                    ;;\n            esac\n        done\n\n        show_info\n\n        ;;\n    *)\n        show_help\n        exit 1\nesac\n\nexit 0\n"
        },
        {
          "name": "install.sh",
          "type": "blob",
          "size": 33.095703125,
          "content": "#!/bin/bash\n\nset -e\n\n# target name\ntarget=$(uname -m)\n\n# represents the directory where the script is located\ncwd=$(pwd)\n\nrepo_branch=\"main\"\nversion=\"0.4.16\"\nrag_api_server_version=\"0.12.0\"\nllama_api_server_version=\"0.16.0\"\nwasmedge_version=\"0.14.1\"\nggml_bn=\"b4419\"\nvector_version=\"0.38.0\"\ndashboard_version=\"v3.1\"\nassistant_version=\"0.3.5\"\nqdrant_version=\"v1.11.4\"\n\n# 0: do not reinstall, 1: reinstall\nreinstall=0\n# 0: do not upgrade, 1: upgrade\nupgrade=0\n# file path to be backed up\nbackup_to_file=\"\"\n# file path to be migrated from\nmigrated_from_file=\"\"\n# 0: must be root or sudo, 1: regular unprivileged user\nunprivileged=0\n# url to the config file\nconfig_url=\"\"\n# path to the gaianet base directory\ngaianet_base_dir=\"$HOME/gaianet\"\n# tmp directory\ntmp_dir=\"$gaianet_base_dir/tmp\"\ntmp_dir_updated=0\n# specific CUDA enabled GGML plugin\nggmlcuda=\"\"\n# 0: disable vector, 1: enable vector\nenable_vector=0\n\n# print in red color\nRED=$'\\e[0;31m'\n# print in green color\nGREEN=$'\\e[0;32m'\n# print in yellow color\nYELLOW=$'\\e[0;33m'\n# No Color\nNC=$'\\e[0m'\n\nfunction print_usage {\n    printf \"Usage:\\n\"\n    printf \"  ./install.sh [Options]\\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --config <Url>     Specify a url to the config file\\n\"\n    printf \"  --base <Path>      Specify a path to the gaianet base directory\\n\"\n    printf \"  --reinstall        Install and download all required deps\\n\"\n    printf \"  --upgrade          Upgrade the gaianet node\\n\"\n    printf \"  --backup <File>    Backup the config to the specified file\\n\"\n    printf \"  --migrate <File>   Install and migrate the config from the specified backup file\\n\"\n    printf \"  --tmpdir <Path>    Specify a path to the temporary directory [default: $gaianet_base_dir/tmp]\\n\"\n    printf \"  --ggmlcuda [11/12] Install a specific CUDA enabled GGML plugin version [Possible values: 11, 12].\\n\"\n    # printf \"  --unprivileged: install the gaianet CLI tool into base directory instead of system directory\\n\"\n    printf \"  --enable-vector:   Install vector log aggregator\\n\"\n    printf \"  --version          Print version\\n\"\n    printf \"  --help             Print usage\\n\"\n}\n\nwhile [[ $# -gt 0 ]]; do\n    key=\"$1\"\n    case $key in\n        --config)\n            config_url=\"$2\"\n            shift 2\n            ;;\n        --base)\n            gaianet_base_dir=\"$2\"\n\n            if [ ! -n \"$gaianet_base_dir\" ]; then\n                echo \"$gaianet_base_dir should be a valid directory\"\n                exit 1\n            fi\n            gaianet_base_dir=$(cd \"$gaianet_base_dir\" && pwd)\n            if [ \"$tmp_dir_updated\" -eq 0 ]; then\n                tmp_dir=\"$gaianet_base_dir/tmp\"\n            fi\n            shift 2\n            ;;\n        --reinstall)\n            reinstall=1\n            shift\n            ;;\n        --upgrade)\n            upgrade=1\n            shift\n            ;;\n        --backup)\n            backup_to_file=\"$2\"\n\n            if [ ! -n \"$backup_to_file\" ]; then\n                echo \"Please specify the backup file\"\n                exit 1\n            fi\n            backup_to_file=$(cd \"$backup_to_file\" && pwd)\n            shift 2\n            ;;\n        --migrate)\n            migrated_from_file=\"$2\"\n\n            if [ ! -f \"$migrated_from_file\" ]; then\n                echo \"Cannot find the backup file: $migrated_from_file\"\n                exit 1\n            fi\n            migrated_from_file=$(cd \"$migrated_from_file\" && pwd)\n            shift 2\n            ;;\n        --tmpdir)\n            tmp_dir=\"$2\"\n            tmp_dir_updated=1\n            shift 2\n            ;;\n        --ggmlcuda)\n            ggmlcuda=\"$2\"\n            shift 2\n            ;;\n        # --unprivileged)\n        #     unprivileged=1\n        #     shift\n        #     ;;\n        --enable-vector)\n            enable_vector=1\n            shift\n            ;;\n        --version)\n            echo \"Gaianet-node Installer v$version\"\n            exit 0\n            ;;\n        --help)\n            print_usage\n            exit 0\n            ;;\n        *)\n            echo \"Unknown argument: $key\"\n            print_usage\n            exit 1\n            ;;\n    esac\ndone\n\ninfo() {\n    printf \"${GREEN}$1${NC}\\n\\n\"\n}\n\nerror() {\n    printf \"${RED}$1${NC}\\n\\n\"\n}\n\nwarning() {\n    printf \"${YELLOW}$1${NC}\\n\\n\"\n}\n\n# download target file to destination. If failed, then exit\ncheck_curl() {\n    curl --retry 3 --progress-bar -L \"$1\" -o \"$2\"\n\n    if [ $? -ne 0 ]; then\n        error \"    * Failed to download $1\"\n        exit 1\n    fi\n}\n\ncheck_curl_silent() {\n    curl --retry 3 -s --progress-bar -L \"$1\" -o \"$2\"\n\n    if [ $? -ne 0 ]; then\n        error \"    * Failed to download $1\"\n        exit 1\n    fi\n}\n\nsed_in_place() {\n    if [ \"$(uname)\" == \"Darwin\" ]; then\n        sed -i '' \"$@\"\n    elif [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n        sed -i \"$@\"\n    elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n        error \"    * For Windows users, please run this script in WSL.\"\n        exit 1\n    else\n        error \"    * Only support Linux, MacOS and Windows.\"\n        exit 1\n    fi\n}\n\n# Upgrade and migrate cannot coexist\nif [ \"$upgrade\" -eq 1 ] && [ -n \"$migrated_from_file\" ]; then\n    error \"    Cannot use both --upgrade and --migrate\"\n    exit 1\nfi\n\n# Do backup\nif [ -n \"$backup_to_file\" ]; then\n    if [ ! -d $gaianet_base_dir ]; then\n        error \"    Cannot backup because the directory $gaianet_base_dir does not exist\"\n        exit 1\n    fi\n\n    backup_keystore_filename=$(grep '\"keystore\":' $gaianet_base_dir/nodeid.json | awk -F'\"' '{print $4}')\n    cd $gaianet_base_dir\n    if [ -f gaia-frp/frpc.toml ]; then\n        tar -cf $backup_to_file config.json nodeid.json gaia-frp/frpc.toml $backup_keystore_filename\n    else\n        tar -cf $backup_to_file config.json nodeid.json gaianet-domain/frpc.toml $backup_keystore_filename\n    fi\n    info \"Config from $gaianet_base_dir has been backed up to $backup_to_file.\"\n    info \"Pass it as the value of '--migrate' option to install your new GaiaNet node\"\n    exit 0\nfi\n\n\nprintf \"\\n\"\ncat <<EOF\n ██████╗  █████╗ ██╗ █████╗ ███╗   ██╗███████╗████████╗\n██╔════╝ ██╔══██╗██║██╔══██╗████╗  ██║██╔════╝╚══██╔══╝\n██║  ███╗███████║██║███████║██╔██╗ ██║█████╗     ██║\n██║   ██║██╔══██║██║██╔══██║██║╚██╗██║██╔══╝     ██║\n╚██████╔╝██║  ██║██║██║  ██║██║ ╚████║███████╗   ██║\n ╚═════╝ ╚═╝  ╚═╝╚═╝╚═╝  ╚═╝╚═╝  ╚═══╝╚══════╝   ╚═╝\nEOF\n\nprintf \"\\n\\n\"\n\n# check nvidia-smi if NVIDIA GPU is detected on Linux\nos_name=$(uname -s)\nif [[ \"$os_name\" == \"Linux\" ]]; then\n    info \"Operating System: Linux\"\n\n    # check if NVIDIA GPU is present\n    if lspci | grep -iq nvidia; then\n        info \"NVIDIA GPU detected!\"\n\n        # check if nvidia-smi is installed\n        if ! command -v nvidia-smi &> /dev/null; then\n            warning \"nvidia-smi is not detected. You can install it manually after the node installation is complete.\\n\\nInstalling nvidia-smi will enable the system to efficiently allocate resources to nodes, increasing the potential for higher rewards.\"\n        fi\n    fi\nfi\n\n# If need to upgrade, remove the all existing files and subdirectories in the base directory, except for the backup subdirectory and its contents\n# If need to reinstall, remove the $gaianet_base_dir directory\nif [ -d \"$gaianet_base_dir\" ]; then\n    if [ \"$upgrade\" -eq 1 ]; then\n\n        # check version\n        if ! command -v gaianet &> /dev/null; then\n            current_version=\"\"\n        else\n            current_version=$(gaianet --version)\n        fi\n\n        if [ -n \"$current_version\" ] && [ \"GaiaNet CLI Tool v$version\" = \"$current_version\" ]; then\n            info \"The current version ($current_version) is the same as the target version (GaiaNet CLI Tool v$version). Skip the upgrade process.\"\n            exit 0\n\n        else\n            info \"The gaianet node will be upgraded to v$version.\"\n        fi\n\n        printf \"[+] Performing backup before upgrading to v$version ...\\n\\n\"\n\n        if [ ! -d \"$gaianet_base_dir/backup\" ]; then\n            printf \"    * Create $gaianet_base_dir/backup\\n\"\n            mkdir -p \"$gaianet_base_dir/backup\"\n        fi\n\n        # backup keystore file\n        keystore_filename=$(grep '\"keystore\":' $gaianet_base_dir/nodeid.json | awk -F'\"' '{print $4}')\n        if [ -z \"$keystore_filename\" ]; then\n            error \"Failed to read the 'keystore' field from $gaianet_base_dir/nodeid.json.\"\n            exit 1\n        else\n            if [ -f \"$gaianet_base_dir/$keystore_filename\" ]; then\n                printf \"    * Copy $keystore_filename to $gaianet_base_dir/backup/\\n\"\n                cp $gaianet_base_dir/$keystore_filename $gaianet_base_dir/backup/\n            else\n                error \"Failed to copy the keystore file. Reason: the keystore file does not exist in $gaianet_base_dir.\"\n                exit 1\n            fi\n        fi\n        # backup config.json\n        if [ -f \"$gaianet_base_dir/config.json\" ]; then\n            printf \"    * Copy config.json to $gaianet_base_dir/backup/\\n\"\n\n            # check if context_window is present in config.json\n            if ! grep -q '\"context_window\":' $gaianet_base_dir/config.json; then\n                sed_in_place '2i\\\n  \"context_window\": \"1\",\n                ' \"$gaianet_base_dir/config.json\"\n            fi\n\n            cp $gaianet_base_dir/config.json $gaianet_base_dir/backup/\n\n        else\n            error \"Failed to copy the config.json. Reason: the config.json does not exist in $gaianet_base_dir.\"\n            exit 1\n        fi\n        # backup nodeid.json\n        if [ -f \"$gaianet_base_dir/nodeid.json\" ]; then\n            printf \"    * Copy nodeid.json to $gaianet_base_dir/backup/\\n\"\n            cp $gaianet_base_dir/nodeid.json $gaianet_base_dir/backup/\n        else\n            error \"Failed to copy the nodeid.json. Reason: the nodeid.json does not exist in $gaianet_base_dir.\"\n            exit 1\n        fi\n        # backup frpc.toml\n        if [ -f \"$gaianet_base_dir/gaia-frp/frpc.toml\" ]; then\n            printf \"    * Copy frpc.toml to $gaianet_base_dir/backup/\\n\"\n            cp $gaianet_base_dir/gaia-frp/frpc.toml $gaianet_base_dir/backup/\n        elif [ -f \"$gaianet_base_dir/gaianet-domain/frpc.toml\" ]; then\n            printf \"    * Copy frpc.toml to $gaianet_base_dir/backup/\\n\"\n            cp $gaianet_base_dir/gaianet-domain/frpc.toml $gaianet_base_dir/backup/\n        else\n            error \"Failed to copy the frpc.toml. Reason: the frpc.toml does not exist in $gaianet_base_dir/gaia-frp.\"\n            exit 1\n        fi\n        # backup deviceid.txt\n        if [ -f \"$gaianet_base_dir/deviceid.txt\" ]; then\n            printf \"    * Copy deviceid.txt to $gaianet_base_dir/backup/\\n\"\n            cp $gaianet_base_dir/deviceid.txt $gaianet_base_dir/backup/\n        else\n            warning \"    * The deviceid.txt does not exist in $gaianet_base_dir.\"\n        fi\n\n        # remove the all existing files and subdirectories in the base directory, except for the backup subdirectory and its contents\n        find \"$gaianet_base_dir\" -mindepth 1 -not -name 'backup' -not -path '*/backup/*' -not -name '*.gguf' -exec rm -rf {} +\n\n        printf \"    * Backup done\\n\\n\"\n\n    elif [ \"$reinstall\" -eq 1 ]; then\n        printf \"[+] Removing the existing $gaianet_base_dir directory ...\\n\\n\"\n        rm -rf $gaianet_base_dir\n    fi\nfi\n\n# Check if $gaianet_base_dir directory exists\nif [ ! -d $gaianet_base_dir ]; then\n    mkdir -p -m777 $gaianet_base_dir\nfi\ncd $gaianet_base_dir\n\n# check if `log` directory exists or not. It needs to allow `gaianet` to write into it\nif [ ! -d \"$gaianet_base_dir/log\" ]; then\n    mkdir -p -m777 $gaianet_base_dir/log\nfi\nlog_dir=$gaianet_base_dir/log\n\n# Check if \"$gaianet_base_dir/bin\" directory exists\nif [ ! -d \"$gaianet_base_dir/bin\" ]; then\n    # If not, create it\n    mkdir -p -m777 $gaianet_base_dir/bin\nfi\nbin_dir=$gaianet_base_dir/bin\n\n# 1. Install `gaianet` CLI tool.\nprintf \"[+] Installing gaianet CLI tool ...\\n\"\ncheck_curl https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/gaianet $bin_dir/gaianet\n\nif [ \"$repo_branch\" = \"main\" ]; then\n    check_curl https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/gaianet $bin_dir/gaianet\nelse\n    check_curl https://github.com/GaiaNet-AI/gaianet-node/raw/$repo_branch/gaianet $bin_dir/gaianet\nfi\n\nchmod u+x $bin_dir/gaianet\ninfo \"    * gaianet CLI tool is installed in $bin_dir\"\n\n# 2. Download default `config.json`\nif [ \"$upgrade\" -eq 1 ]; then\n    printf \"[+] Recovering config.json ...\\n\"\n\n    # recover config.json\n    if [ -f \"$gaianet_base_dir/backup/config.json\" ]; then\n        cp $gaianet_base_dir/backup/config.json $gaianet_base_dir/config.json\n\n        if ! grep -q '\"chat_batch_size\":' $gaianet_base_dir/config.json; then\n            # Prepend the field to the beginning of the JSON object\n            sed_in_place '2i\\\n            \"chat_batch_size\": \"16\",\n            ' \"$gaianet_base_dir/config.json\"\n        fi\n\n        if ! grep -q '\"embedding_batch_size\":' $gaianet_base_dir/config.json; then\n            # Prepend the field to the beginning of the JSON object\n            sed_in_place '2i\\\n            \"embedding_batch_size\": \"512\",\n            ' \"$gaianet_base_dir/config.json\"\n        fi\n\n        info \"    * The config.json is recovered in $gaianet_base_dir\"\n    else\n        error \"    * Failed to recover the config.json. Reason: the config.json does not exist in $gaianet_base_dir/backup/.\"\n        exit 1\n    fi\nelif [ -f \"$migrated_from_file\" ] && tar -tf \"$migrated_from_file\" | grep -q \"config.json\"; then\n    tar -xf \"$migrated_from_file\" -C $gaianet_base_dir config.json\nelse\n    printf \"[+] Downloading default config.json ...\\n\"\n\n    if [ ! -f \"$gaianet_base_dir/config.json\" ]; then\n        if [ \"$repo_branch\" = \"main\" ]; then\n            check_curl https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/config.json $gaianet_base_dir/config.json\n        else\n            check_curl https://github.com/GaiaNet-AI/gaianet-node/raw/$repo_branch/config.json $gaianet_base_dir/config.json\n        fi\n\n        info \"    * The default config file is downloaded in $gaianet_base_dir\"\n    else\n        warning \"    * Use the cached config file in $gaianet_base_dir\"\n    fi\nfi\n\n# 4. Install vector and download vector config file\nif [ \"$enable_vector\" -eq 1 ]; then\n    # Check if vector is installed\n    if ! command -v vector &> /dev/null; then\n        printf \"[+] Installing vector ...\\n\"\n        if curl --proto '=https' --tlsv1.2 -sSfL https://sh.vector.dev | VECTOR_VERSION=$vector_version bash -s -- -y; then\n            info \"    * The vector is installed.\"\n        else\n            error \"    * Failed to install vector\"\n            exit 1\n        fi\n    fi\n    # Check if vector.toml exists\n    if [ ! -f \"$gaianet_base_dir/vector.toml\" ]; then\n        printf \"[+] Downloading vector config file ...\\n\"\n\n        check_curl https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/vector.toml $gaianet_base_dir/vector.toml\n\n        info \"    * The vector.toml is downloaded in $gaianet_base_dir\"\n    fi\nfi\n\n# 5. Install WasmEdge and ggml plugin\nprintf \"[+] Installing WasmEdge with wasi-nn_ggml plugin ...\\n\"\nif [ -n \"$ggmlcuda\" ]; then\n    if [ \"$ggmlcuda\" != \"11\" ] && [ \"$ggmlcuda\" != \"12\" ]; then\n        error \"Invalid argument to '--ggmlcuda' option. Possible values: 11, 12.\"\n        exit 1\n    fi\n\n    if curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- -v $wasmedge_version --tmpdir=$tmp_dir --ggmlcuda=$ggmlcuda; then\n        source $HOME/.wasmedge/env\n        wasmedge_path=$(which wasmedge)\n        info \"    * The $wasmedge_version is installed in $wasmedge_path.\"\n    else\n        error \"    * Failed to install WasmEdge\"\n        exit 1\n    fi\nelse\n    if curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/install_v2.sh | bash -s -- -v $wasmedge_version --ggmlbn=$ggml_bn --tmpdir=$tmp_dir; then\n        source $HOME/.wasmedge/env\n        wasmedge_path=$(which wasmedge)\n        info \"    * The $wasmedge_version is installed in $wasmedge_path.\"\n    else\n        error \"    * Failed to install WasmEdge\"\n        exit 1\n    fi\nfi\n\n# 6. Install Qdrant binary and prepare directories\n\n# 6.1 Inatall Qdrant binary\nprintf \"[+] Installing Qdrant binary...\\n\"\nif [ ! -f \"$gaianet_base_dir/bin/qdrant\" ] || [ \"$reinstall\" -eq 1 ]; then\n    printf \"    * Download Qdrant binary\\n\"\n    if [ \"$(uname)\" == \"Darwin\" ]; then\n        # download qdrant binary\n        if [ \"$target\" = \"x86_64\" ]; then\n            check_curl https://github.com/qdrant/qdrant/releases/download/$qdrant_version/qdrant-x86_64-apple-darwin.tar.gz $gaianet_base_dir/qdrant-x86_64-apple-darwin.tar.gz\n\n            tar -xzf $gaianet_base_dir/qdrant-x86_64-apple-darwin.tar.gz -C $bin_dir\n            rm $gaianet_base_dir/qdrant-x86_64-apple-darwin.tar.gz\n\n            info \"      The Qdrant binary is downloaded in $bin_dir\"\n\n        elif [ \"$target\" = \"arm64\" ]; then\n            check_curl https://github.com/qdrant/qdrant/releases/download/$qdrant_version/qdrant-aarch64-apple-darwin.tar.gz $gaianet_base_dir/qdrant-aarch64-apple-darwin.tar.gz\n\n            tar -xzf $gaianet_base_dir/qdrant-aarch64-apple-darwin.tar.gz -C $bin_dir\n            rm $gaianet_base_dir/qdrant-aarch64-apple-darwin.tar.gz\n            info \"      The Qdrant binary is downloaded in $bin_dir\"\n        else\n            error \" * Unsupported architecture: $target, only support x86_64 and arm64 on MacOS\"\n            exit 1\n        fi\n\n    elif [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n        # download qdrant statically linked binary\n        if [ \"$target\" = \"x86_64\" ]; then\n            check_curl https://github.com/qdrant/qdrant/releases/download/$qdrant_version/qdrant-x86_64-unknown-linux-musl.tar.gz $gaianet_base_dir/qdrant-x86_64-unknown-linux-musl.tar.gz\n\n            tar -xzf $gaianet_base_dir/qdrant-x86_64-unknown-linux-musl.tar.gz -C $bin_dir\n            rm $gaianet_base_dir/qdrant-x86_64-unknown-linux-musl.tar.gz\n\n            info \"      The Qdrant binary is downloaded in $bin_dir\"\n\n        elif [ \"$target\" = \"aarch64\" ]; then\n            check_curl https://github.com/qdrant/qdrant/releases/download/$qdrant_version/qdrant-aarch64-unknown-linux-musl.tar.gz $gaianet_base_dir/qdrant-aarch64-unknown-linux-musl.tar.gz\n\n            tar -xzf $gaianet_base_dir/qdrant-aarch64-unknown-linux-musl.tar.gz -C $bin_dir\n            rm $gaianet_base_dir/qdrant-aarch64-unknown-linux-musl.tar.gz\n            info \"      The Qdrant binary is downloaded in $bin_dir\"\n        else\n            error \" * Unsupported architecture: $target, only support x86_64 and aarch64 on Linux\"\n            exit 1\n        fi\n\n    elif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n        error \"    * For Windows users, please run this script in WSL.\"\n        exit 1\n    else\n        error \"    * Only support Linux, MacOS and Windows.\"\n        exit 1\n    fi\n\nelse\n    warning \"    * Use the cached Qdrant binary in $gaianet_base_dir/bin\"\nfi\n\n# 6.2 Init qdrant directory\nif [ ! -d \"$gaianet_base_dir/qdrant\" ]; then\n    printf \"    * Initialize Qdrant directory\\n\"\n    mkdir -p -m777 $gaianet_base_dir/qdrant && cd $gaianet_base_dir/qdrant\n\n    # download qdrant binary\n    check_curl_silent https://github.com/qdrant/qdrant/archive/refs/tags/$qdrant_version.tar.gz $gaianet_base_dir/qdrant/$qdrant_version.tar.gz\n\n    mkdir -p \"$qdrant_version\"\n    tar -xzf \"$gaianet_base_dir/qdrant/$qdrant_version.tar.gz\" -C \"$qdrant_version\" --strip-components 1\n    rm $gaianet_base_dir/qdrant/$qdrant_version.tar.gz\n\n    cp -r $qdrant_version/config .\n    rm -rf $qdrant_version\n\n    printf \"\\n\"\n\n    # disable telemetry in the `config.yaml` file\n    printf \"    * Disable telemetry\\n\"\n    config_file=\"$gaianet_base_dir/qdrant/config/config.yaml\"\n\n    if [ -f \"$config_file\" ]; then\n        sed_in_place 's/telemetry_disabled: false/telemetry_disabled: true/' \"$config_file\"\n    fi\n\n    printf \"\\n\"\nfi\n\n# 7. Download LlamaEdge API server\nprintf \"[+] Downloading LlamaEdge API server ...\\n\"\n# download rag-api-server.wasm\ncheck_curl https://github.com/LlamaEdge/rag-api-server/releases/download/$rag_api_server_version/rag-api-server.wasm $gaianet_base_dir/rag-api-server.wasm\n# download llama-api-server.wasm\ncheck_curl https://github.com/LlamaEdge/LlamaEdge/releases/download/$llama_api_server_version/llama-api-server.wasm $gaianet_base_dir/llama-api-server.wasm\n\ninfo \"    * The rag-api-server.wasm and llama-api-server.wasm are downloaded in $gaianet_base_dir\"\n\n# 8. Download dashboard to $gaianet_base_dir\nif ! command -v tar &> /dev/null; then\n    echo \"tar could not be found, please install it.\"\n    exit 1\nfi\nprintf \"[+] Downloading dashboard ...\\n\"\nif [ ! -d \"$gaianet_base_dir/dashboard\" ] || [ \"$reinstall\" -eq 1 ]; then\n    if [ -d \"$gaianet_base_dir/gaianet-node\" ]; then\n        rm -rf $gaianet_base_dir/gaianet-node\n    fi\n\n    check_curl https://github.com/GaiaNet-AI/chatbot-ui/releases/download/$dashboard_version/dashboard.tar.gz $gaianet_base_dir/dashboard.tar.gz\n    tar xzf $gaianet_base_dir/dashboard.tar.gz -C $gaianet_base_dir\n    rm -rf $gaianet_base_dir/dashboard.tar.gz\n\n    info \"    * The dashboard is downloaded in $gaianet_base_dir\"\nelse\n    warning \"    * Use the cached dashboard in $gaianet_base_dir\"\nfi\n\n# 9. Download registry.wasm\nif [ ! -f \"$gaianet_base_dir/registry.wasm\" ] || [ \"$reinstall\" -eq 1 ]; then\n    printf \"[+] Downloading registry.wasm ...\\n\"\n    check_curl https://github.com/GaiaNet-AI/gaianet-node/raw/main/utils/registry/registry.wasm $gaianet_base_dir/registry.wasm\n    info \"    * The registry.wasm is downloaded in $gaianet_base_dir\"\nelse\n    warning \"    * Use the cached registry.wasm in $gaianet_base_dir\"\nfi\n\n# 10. Generate node ID\nif [ \"$upgrade\" -eq 1 ]; then\n    printf \"[+] Recovering node ID ...\\n\"\n\n    # recover the keystore file\n    if [ -f \"$gaianet_base_dir/backup/$keystore_filename\" ]; then\n        cp $gaianet_base_dir/backup/$keystore_filename $gaianet_base_dir/\n        info \"    * The keystore file is recovered in $gaianet_base_dir\"\n    else\n        error \"Failed to recover the keystore file. Reason: the keystore file does not exist in $gaianet_base_dir/backup/.\"\n        exit 1\n    fi\n\n    # recover the nodeid.json\n    if [ -f \"$gaianet_base_dir/backup/nodeid.json\" ]; then\n        cp $gaianet_base_dir/backup/nodeid.json $gaianet_base_dir/nodeid.json\n        info \"    * The node ID is recovered in $gaianet_base_dir\"\n    else\n        error \"Failed to recover the node ID. Reason: the nodeid.json does not exist in $gaianet_base_dir/backup/.\"\n        exit 1\n    fi\nelif [ -f \"$migrated_from_file\" ] && tar -tf \"$migrated_from_file\" | grep -q \"nodeid.json\"; then\n    tar -xf \"$migrated_from_file\" -C $gaianet_base_dir nodeid.json\n    migrate_keystore_filename=$(grep '\"keystore\":' $gaianet_base_dir/nodeid.json | awk -F'\"' '{print $4}')\n    if [ -z \"$migrate_keystore_filename\" ]; then\n        error \"Failed to read the 'keystore' field from backup nodeid.json.\"\n        exit 1\n    else\n        if tar -tf \"$migrated_from_file\" | grep -q \"$migrate_keystore_filename\"; then\n            tar -xf \"$migrated_from_file\" -C $gaianet_base_dir $migrate_keystore_filename\n        else\n            error \"Failed to copy the keystore file. Reason: the keystore file does not exist in backup file.\"\n            exit 1\n        fi\n    fi\nelse\n    # download the default nodeid.json\n    if [ ! -f \"$gaianet_base_dir/nodeid.json\" ]; then\n        check_curl https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/nodeid.json $gaianet_base_dir/nodeid.json\n    fi\n\n    printf \"[+] Generating node ID ...\\n\"\n    cd $gaianet_base_dir\n    wasmedge --dir .:. registry.wasm\n    printf \"\\n\"\nfi\n\n# 11. Install gaia-frp\nprintf \"[+] Installing gaia-frp...\\n\"\n# Check if the directory exists, if not, create it\nif [ ! -d \"$gaianet_base_dir/gaia-frp\" ]; then\n    mkdir -p -m777 $gaianet_base_dir/gaia-frp\nfi\ncd $gaianet_base_dir\ngaia_frp_version=\"v0.1.2\"\nprintf \"    * Download gaia-frp binary\\n\"\nif [ \"$(uname)\" == \"Darwin\" ]; then\n    if [ \"$target\" = \"x86_64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/gaia-frp/releases/download/$gaia_frp_version/gaia_frp_${gaia_frp_version}_darwin_amd64.tar.gz $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_amd64.tar.gz\n\n        tar -xzf $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_amd64.tar.gz --strip-components=1 -C $gaianet_base_dir/gaia-frp\n        rm $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_amd64.tar.gz\n\n        info \"      gaia-frp is downloaded in $gaianet_base_dir\"\n    elif [ \"$target\" = \"arm64\" ] || [ \"$target\" = \"aarch64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/gaia-frp/releases/download/$gaia_frp_version/gaia_frp_${gaia_frp_version}_darwin_arm64.tar.gz $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_arm64.tar.gz\n\n        tar -xzf $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_arm64.tar.gz --strip-components=1 -C $gaianet_base_dir/gaia-frp\n        rm $gaianet_base_dir/gaia_frp_${gaia_frp_version}_darwin_arm64.tar.gz\n\n        info \"      gaia-frp is downloaded in $gaianet_base_dir\"\n    else\n        error \" * Unsupported architecture: $target, only support x86_64 and arm64 on MacOS\"\n        exit 1\n    fi\n\nelif [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n    # download gaia-frp statically linked binary\n    if [ \"$target\" = \"x86_64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/gaia-frp/releases/download/$gaia_frp_version/gaia_frp_${gaia_frp_version}_linux_amd64.tar.gz $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_amd64.tar.gz\n\n        tar --warning=no-unknown-keyword -xzf $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_amd64.tar.gz --strip-components=1 -C $gaianet_base_dir/gaia-frp\n        rm $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_amd64.tar.gz\n\n        info \"      gaia-frp is downloaded in $gaianet_base_dir\"\n    elif [ \"$target\" = \"arm64\" ] || [ \"$target\" = \"aarch64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/gaia-frp/releases/download/$gaia_frp_version/gaia_frp_${gaia_frp_version}_linux_arm64.tar.gz $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_arm64.tar.gz\n\n        tar --warning=no-unknown-keyword -xzf $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_arm64.tar.gz --strip-components=1 -C $gaianet_base_dir/gaia-frp\n        rm $gaianet_base_dir/gaia_frp_${gaia_frp_version}_linux_arm64.tar.gz\n\n        info \"      gaia-frp is downloaded in $gaianet_base_dir\"\n    else\n        error \" * Unsupported architecture: $target, only support x86_64 and arm64 on Linux\"\n        exit 1\n    fi\n\nelif [ \"$(expr substr $(uname -s) 1 10)\" == \"MINGW32_NT\" ]; then\n    error \"For Windows users, please run this script in WSL.\"\n    exit 1\nelse\n    error \"Only support Linux, MacOS and Windows.\"\n    exit 1\nfi\n\n# Copy frpc binary from $gaianet_base_dir/gaia-frp to $gaianet_base_dir/bin\nprintf \"    * Install frpc binary\\n\"\ncp $gaianet_base_dir/gaia-frp/frpc $gaianet_base_dir/bin/\ninfo \"      frpc binary is installed in $gaianet_base_dir/bin\"\n\n# 12. Download frpc.toml, generate a subdomain and print it\nif [ \"$upgrade\" -eq 1 ]; then\n    # recover the frpc.toml\n    if [ -f \"$gaianet_base_dir/backup/frpc.toml\" ]; then\n        printf \"    * Recover frpc.toml\\n\"\n        cp $gaianet_base_dir/backup/frpc.toml $gaianet_base_dir/gaia-frp/frpc.toml\n        info \"      frpc.toml is recovered in $gaianet_base_dir/gaia-frp\"\n    else\n        error \"Failed to recover the frpc.toml. Reason: the frpc.toml does not exist in $gaianet_base_dir/backup/.\"\n        exit 1\n    fi\nelif [ -f \"$migrated_from_file\" ] && ( tar -tf \"$migrated_from_file\" | grep -q \"gaianet-domain/frpc.toml\" || tar -tf \"$migrated_from_file\" | grep -q \"gaia-frp/frpc.toml\" ); then\n    if tar -tf \"$migrated_from_file\" | grep -q \"gaianet-domain/frpc.toml\"; then\n        tar -xf \"$migrated_from_file\" --strip-components=1 -C $gaianet_base_dir/gaia-frp gaianet-domain/frpc.toml\n    else\n        tar -xf \"$migrated_from_file\" --strip-components=1 -C $gaianet_base_dir/gaia-frp gaia-frp/frpc.toml\n    fi\nelse\n    printf \"    * Download frpc.toml\\n\"\n    check_curl_silent https://github.com/GaiaNet-AI/gaianet-node/releases/download/$version/frpc.toml $gaianet_base_dir/gaia-frp/frpc.toml\n    info \"      frpc.toml is downloaded in $gaianet_base_dir/gaia-frp\"\nfi\n\n# Read address from config.json as node subdomain\nsubdomain=$(awk -F'\"' '/\"address\":/ {print $4}' $gaianet_base_dir/config.json)\n\n# Check if the subdomain was read correctly\nif [ -z \"$subdomain\" ]; then\n    error \"Failed to read the address from config.json.\"\n    exit 1\nfi\n\n# Read domain from config.json\ngaia_frp=$(awk -F'\"' '/\"domain\":/ {print $4}' $gaianet_base_dir/config.json)\n\n\nif [ \"$upgrade\" -eq 1 ]; then\n    # recover deviceid.txt\n    if [ -f \"$gaianet_base_dir/backup/deviceid.txt\" ]; then\n        cp $gaianet_base_dir/backup/deviceid.txt $gaianet_base_dir/deviceid.txt\n\n        info \"    * The deviceid.txt is recovered in $gaianet_base_dir\"\n    else\n        warning \"    * The deviceid.txt does not exist in $gaianet_base_dir/backup/. Will generate a new one.\"\n    fi\nfi\n\ndevice_id_file=\"$gaianet_base_dir/deviceid.txt\"\n\n# Check if the device_id file exists\nif [ -f \"$device_id_file\" ]; then\n    # The file exists, read device_id from the file\n    device_id=$(cat \"$device_id_file\")\n    # Check if the device_id is empty\n    if [ -z \"$device_id\" ]; then\n        # device_id is empty, generate a new one\n        device_id=\"device-$(openssl rand -hex 12)\"\n        echo \"$device_id\" > \"$device_id_file\"\n    fi\nelse\n    # The file does not exist, generate a new device_id and save it to the file\n    device_id=\"device-$(openssl rand -hex 12)\"\n    echo \"$device_id\" > \"$device_id_file\"\nfi\ninfo \"    * The device ID is $device_id\"\n\nsed_in_place \"s/subdomain = \\\".*\\\"/subdomain = \\\"$subdomain\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\nsed_in_place \"s/serverAddr = \\\".*\\\"/serverAddr = \\\"$gaia_frp\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\nsed_in_place \"s/name = \\\".*\\\"/name = \\\"$subdomain.$gaia_frp\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\nsed_in_place \"s/metadatas.deviceId = \\\".*\\\"/metadatas.deviceId = \\\"$device_id\\\"/g\" $gaianet_base_dir/gaia-frp/frpc.toml\n\n# Remove all files in the directory except for frpc and frpc.toml\nfind $gaianet_base_dir/gaia-frp -type f -not -name 'frpc.toml' -exec rm -f {} \\;\n\n# 13. Install server assistant\nprintf \"[+] Installing server assistant...\\n\"\nif [ \"$(uname)\" == \"Darwin\" ]; then\n\n    if [ \"$target\" = \"x86_64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/server-assistant/releases/download/$assistant_version/server-assistant-x86_64-apple-darwin.tar.gz $bin_dir/server-assistant.tar.gz\n\n    elif [ \"$target\" = \"arm64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/server-assistant/releases/download/$assistant_version/server-assistant-aarch64-apple-darwin.tar.gz $bin_dir/server-assistant.tar.gz\n\n    else\n        error \" * Unsupported architecture: $target, only support x86_64 and arm64 on MacOS\"\n        exit 1\n    fi\n\nelif [ \"$(expr substr $(uname -s) 1 5)\" == \"Linux\" ]; then\n\n    if [ \"$target\" = \"x86_64\" ]; then\n        check_curl https://github.com/GaiaNet-AI/server-assistant/releases/download/$assistant_version/server-assistant-x86_64-unknown-linux-gnu.tar.gz $bin_dir/server-assistant.tar.gz\n    else\n        error \" * Unsupported architecture: $target, only support x86_64 on Linux\"\n        exit 1\n    fi\n\nelse\n    error \"Only support Linux, MacOS and Windows(WSL).\"\n    exit 1\nfi\n\ntar -xzf $bin_dir/server-assistant.tar.gz -C $bin_dir\nrm $bin_dir/server-assistant.tar.gz\nif [ -f $bin_dir/SHA256SUM ]; then\n    rm $bin_dir/SHA256SUM\nfi\n\ninfo \"    * server assistant is installed in $bin_dir\"\n\n\nif [ \"$upgrade\" -eq 1 ]; then\n\n    printf \"✅ COMPLETED! The gaianet node has been upgraded to v$version.\\n\\n\"\n\n    info \"👉 Next, you should run the command 'gaianet init' to initialize the GaiaNet node.\"\n\nelse\n    printf \"✅ COMPLETED! The gaianet node has been installed successfully.\\n\\n\"\n\n    info \"✨ Your node ID is $subdomain. 🌟 Please register it in your portal account to receive rewards!\"\n\n    # Command to append\n    cmd=\"export PATH=\\\"$bin_dir:\\$PATH\\\"\"\n\n    shell=\"${SHELL#${SHELL%/*}/}\"\n    shell_rc=\".\"\"$shell\"\"rc\"\n\n    # Check if the shell is zsh or bash\n    if [[ $shell == *'zsh'* ]]; then\n        # If zsh, append to .zprofile\n        if ! grep -Fxq \"$cmd\" $HOME/.zprofile\n        then\n            echo \"$cmd\" >> $HOME/.zprofile\n        fi\n\n        # If zsh, append to .zshrc\n        if ! grep -Fxq \"$cmd\" $HOME/.zshrc\n        then\n            echo \"$cmd\" >> $HOME/.zshrc\n        fi\n\n    elif [[ $shell == *'bash'* ]]; then\n\n        # If bash, append to .bash_profile\n        if ! grep -Fxq \"$cmd\" $HOME/.bash_profile\n        then\n            echo \"$cmd\" >> $HOME/.bash_profile\n        fi\n\n        # If bash, append to .bashrc\n        if ! grep -Fxq \"$cmd\" $HOME/.bashrc\n        then\n            echo \"$cmd\" >> $HOME/.bashrc\n        fi\n    fi\n\n    info \">>> Next, you should initialize the GaiaNet node with the LLM and knowledge base. To initialize the GaiaNet node, you need to\\n>>> * Run the command 'source $HOME/$shell_rc' to make the gaianet CLI tool available in the current shell;\\n>>> * Run the command 'gaianet init' to initialize the GaiaNet node.\"\n\nfi\n\nexit 0\n"
        },
        {
          "name": "nodeid.json",
          "type": "blob",
          "size": 0.00390625,
          "content": "{\n}\n"
        },
        {
          "name": "uninstall.sh",
          "type": "blob",
          "size": 2.9033203125,
          "content": "#!/bin/bash\n\nset -e\n\n# path to the default gaianet base directory. It could be changed by the --base option\ngaianet_base_dir=\"$HOME/gaianet\"\n\nversion=\"v0.4.16\"\n\n# print in red color\nRED=$'\\e[0;31m'\n# print in green color\nGREEN=$'\\e[0;32m'\n# print in yellow color\nYELLOW=$'\\e[0;33m'\n# No Color\nNC=$'\\e[0m'\n\ninfo() {\n    printf \"${GREEN}$1${NC}\\n\\n\"\n}\n\nerror() {\n    printf \"${RED}$1${NC}\\n\\n\"\n}\n\nwarning() {\n    printf \"${YELLOW}$1${NC}\\n\\n\"\n}\n\nfunction print_usage {\n    printf \"Usage:\\n\"\n    printf \"  ./uninstall.sh [Options]\\n\\n\"\n    printf \"Options:\\n\"\n    printf \"  --base <Path>     Specify a path to the gaianet base directory\\n\"\n    printf \"  --version         Print version\\n\"\n    printf \"  --help            Print usage\\n\"\n}\n\nwhile [[ $# -gt 0 ]]; do\n    key=\"$1\"\n    case $key in\n        --base)\n            gaianet_base_dir=\"$2\"\n            shift\n            shift\n            ;;\n        --version)\n            echo \"Gaianet-node Uninstaller $version\"\n            exit 0\n            ;;\n        --help)\n            print_usage\n            exit 0\n            ;;\n        *)\n            echo \"Unknown argument: $key\"\n            print_usage\n            exit 1\n            ;;\n    esac\ndone\n\n\n# 1. Stop WasmEdge, Qdrant and frpc\nif command -v gaianet > /dev/null 2>&1; then\n    gaianet stop\n    printf \"\\n\"\nfi\n\n\n# 2. Remove the gaianet base directory\nif [ -d \"$gaianet_base_dir\" ]; then\n    printf \"[+] Removing the gaianet base directory ...\\n\"\n    rm -rf $gaianet_base_dir\n    printf \"\\n\"\nfi\n\nif [ -f \"/usr/local/bin/gaianet\" ]; then\n    printf \"[+] Removing gaianet binary from /usr/local/bin ...\\n\"\n    sudo rm \"/usr/local/bin/gaianet\"\n    printf \"\\n\"\nfi\n\n\n# 3. Remove WasmEdge\nif command -v wasmedge > /dev/null 2>&1; then\n    printf \"[+] Uninstall WasmEdge ...\\n\"\n    bash <(curl -sSf https://raw.githubusercontent.com/WasmEdge/WasmEdge/master/utils/uninstall.sh) -q\n    printf \"\\n\"\nfi\n\n\n# 4. Clean up the environment variables\nprintf \"[+] Remove the path from the shell rc file ...\\n\"\n\nshell=\"${SHELL#${SHELL%/*}/}\"\nshell_rc=\".\"\"$shell\"\"rc\"\n\ninfo \"shell: $shell\"\ninfo \"shell_rc: $HOME/$shell_rc\"\n\nif [[ -f \"${HOME}/${shell_rc}\" ]]; then\n    line_num=$(grep -n \"export PATH=\\\"$gaianet_base_dir/bin:\\$PATH\\\"\" \"$HOME/${shell_rc}\" | cut -d : -f 1)\n\n    [ \"$line_num\" != \"\" ] && sed -i.gaianet_backup -e \"${line_num}\"'d' \"${HOME}/${shell_rc}\"\nfi\n\nif [[ -f \"${HOME}/.zprofile\" ]]; then\n    line_num=\"$(grep -n \"export PATH=\\\"$gaianet_base_dir/bin:\\$PATH\\\"\" \"${HOME}/.zprofile\" | cut -d : -f 1)\"\n\n    [ \"$line_num\" != \"\" ] && sed -i.gaianet_backup -e \"${line_num}\"'d' \"${HOME}/.zprofile\"\nfi\n\nif [[ -f \"${HOME}/.bash_profile\" ]]; then\n    line_num=\"$(grep -n \"export PATH=\\\"$gaianet_base_dir/bin:\\$PATH\\\"\" \"${HOME}/.bash_profile\" | cut -d : -f 1)\"\n\n    [ \"$line_num\" != \"\" ] && sed -i.gaianet_backup -e \"${line_num}\"'d' \"${HOME}/.bash_profile\"\nfi\n\n\ninfo \">>> Next, run the command 'source $HOME/$shell_rc' to make the uninstallation effective in the current shell.\"\n\n\n"
        },
        {
          "name": "utils",
          "type": "tree",
          "content": null
        },
        {
          "name": "vector.toml",
          "type": "blob",
          "size": 0.8037109375,
          "content": "\n[api]\nenabled = false\n\n[sources.api_server_logs]\ntype = \"stdin\"\n\n# [sinks.console]\n# inputs = [\"api_server_logs\"]\n# target = \"stdout\"\n# type = \"console\"\n# encoding.codec = \"json\"\n\n[sinks.log_file]\ntype = \"file\"\ninputs = [\"api_server_logs\"]\npath = \"log/start-llamaedge.log\"\nencoding.codec = \"json\"\n\n# The following is a sample configuration for a AWS S3 sink.\n# Reference: https://vector.dev/docs/reference/configuration/sinks/aws_s3/\n# [sinks.aws_s3]\n# type = \"aws_s3\"\n# inputs = [ \"api_server_logs\" ]\n# bucket = \"my-bucket\"\n\n# The following is a sample configuration for a Kafka sink.\n# Reference: https://vector.dev/docs/reference/configuration/sinks/kafka/\n# [sinks.my_kafka]\n# type = \"kafka\"\n# inputs = [ \"my-source-or-transform-id\" ]\n# bootstrap_servers = \"10.14.22.123:9092,10.14.23.332:9092\"\n# topic = \"topic-1234\"\n"
        }
      ]
    }
  ]
}