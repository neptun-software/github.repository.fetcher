{
  "metadata": {
    "timestamp": 1736568385177,
    "page": 327,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "go-nv/goenv",
      "stars": 2148,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".agignore",
          "type": "blob",
          "size": 0.0185546875,
          "content": "./versions\n./cache\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.126953125,
          "content": "root = true\n\n[*]\nend_of_line = lf\ninsert_final_newline = true\nindent_size = 2\nindent_style = space\n\n[Makefile]\nindent_style = tab\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.5517578125,
          "content": "# GitHub \"Languages\" statistics only consider file extensions, not contents\n# https://github.com/github-linguist/linguist/blob/master/docs/overrides.md\n# Reclassify files as Shell for proper statistics (instead of \"Roff\")\nlibexec/* linguist-language=Shell\nplugins/go-build/bin/* linguist-language=Shell\nplugins/go-build/share/go-build/* linguist-language=Shell\nplugins/go-build/test/fixtures/definitions/* linguist-language=Shell\nplugins/go-build/test/stubs/* linguist-language=Shell\nsrc/shobj-conf/* linguist-language=Shell\ntest/libexec/* linguist-language=Shell\n\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.140625,
          "content": ".DS_Store\n/shims\n/version\n/versions\n/sources\n/cache\n/libexec/*.dylib\n/src/Makefile\n/src/*.o\n/bats/\n/bats-core/\n.idea\nplugins/go-build/test/tmp/\n"
        },
        {
          "name": "ADVANCED_CONFIGURATION.md",
          "type": "blob",
          "size": 1.2841796875,
          "content": "# Advanced Configuration\n\nFor hobbyists this might be interesting.\n\n`goenv init` is the only command that crosses the line of loading\nextra commands into your shell. Coming from rvm, some of you might be\nopposed to this idea. Here's what `goenv init` actually does:\n\n1. **Sets up your shims path.** This is the only requirement for goenv to\n   function properly. You can do this by hand by prepending\n   `~/.goenv/shims` to your `$PATH`.\n\n2. **Installs autocompletion.** This is entirely optional but pretty\n   useful. Sourcing `~/.goenv/completions/goenv.bash` will set that\n   up. There is also a `~/.goenv/completions/goenv.zsh` for Zsh\n   users.\n\n3. **Rehashes shims.** From time to time you'll need to rebuild your\n   shim files. Doing this on init makes sure everything is up to\n   date. You can always run `goenv rehash` manually.\n\n4. **Installs the sh dispatcher.** This bit is also optional, but allows\n   goenv and plugins to change variables in your current shell, making\n   commands like `goenv shell` possible. The sh dispatcher doesn't do\n   anything crazy like override `cd` or hack your shell prompt, but if\n   for some reason you need `goenv` to be a real script rather than a\n   shell function, you can safely skip it.\n\nTo see exactly what happens under the hood for yourself, run `goenv init -`.\n"
        },
        {
          "name": "APP_VERSION",
          "type": "blob",
          "size": 0.0068359375,
          "content": "2.2.17\n"
        },
        {
          "name": "Brewfile",
          "type": "blob",
          "size": 0.0625,
          "content": "brew 'make'\nbrew 'bash'\nbrew 'coreutils'\nbrew 'go', link: false\n"
        },
        {
          "name": "CHANGELOG.md",
          "type": "blob",
          "size": 36.05078125,
          "content": "# Version History\n\n## Intro\n\nThe version history is motivated by https://semver.org/ and https://keepachangelog.com/en/1.0.0/ .\n\nNOTE: This project went from non-standard versioning to semver at some point.\n\n## Structure\n\nTypes of changes that can be seen in the changelog\n\n```\nAdded: for new features/functionality.\nChanged: for changes in existing features/functionality.\nDeprecated: for soon-to-be removed features. Removed in the\nRemoved: for now removed features.\nFixed: for any bug fixes.\nSecurity: in case of vulnerabilities.\n```\n\n## How deprecation of functionality is handled?\n\ntl;dr 1 minor release stating that the functionality is going to be deprecated. Then in the next major - removed.\n\n```\nDeprecating existing functionality is a normal part of software development and\nis often required to make forward progress.\n\nWhen you deprecate part of your public API, you should do two things:\n\n(1) update your documentation to let users know about the change,\n(2) issue a new minor release with the deprecation in place.\nBefore you completely remove the functionality in a new major\nrelease there should be at least one minor release\nthat contains the deprecation so that users can smoothly transition to the new API\n```\n\nAs per https://semver.org/ .\n\nAs per rule-of-thumb, moving the project forward is very important,\nbut providing stability is the most important thing to anyone using `goenv`.\n\nIntroducing breaking changes under a feature flag can be ok in some cases where new functionality needs user feedback before being introduced in next major release.\n\n## Changelog\n\nChange line format:\n\n```\n* <Change title/PR title/content> ; Ref: <pr link>\n```\n\n## Unreleased (master)\n\n## 2.1.4\n\n### Added\n- Golang 1.21.0 (#335)\n- Support for FreeBSD ARM installers (#339)\n\n## 2.1.3\n- Fix application version (#334)\n\n## 2.1.2\n\n### Added\n- Golang 1.19.12 and 1.20.7 (#333)\n\n## 2.1.1\n\n### Added\n- Fix Goenv Auto Installer bug (#330)\n\n## 2.1.0\n\n### Added\n- Silent install option (#327)\n- GOENV_AUTO_INSTALL support (#327)\n- Updated all stale references to the old repo organization\n\n## 2.0.9\n\n### Added\n\n- Golang 1.19.11 and 1.20.6 (#309)\n\n## 2.0.8\n\n### Added\n\n- Golang 1.19.10 and 1.20.5 (#304)\n\n## 2.0.7\n\n### Added\n\n- Golang version 1.19.7 and 1.20.2 (#292)\n- Golang Version 1.19.8 and 1.20.3 (#295)\n- Add codeowners file by (#300)\n- Support go 1.20.4 and go 1.19.9 (#299)\n\n### Removed\n\n- Delete the travis config file (#301)\n\n## 2.0.6\n\n### Added\n\n- Add support for go 1.19.6 and 1.20.1 (#288)\n- Add support for 1.20 (#284)\n\n## 2.0.5\n\n### Added\n\n- Support Golang 1.18.9 and 1.19.4 https://github.com/go-nv/goenv/pull/277\n- Support 1.20rc1 https://github.com/go-nv/goenv/pull/278\n- Support 1.18.10, 1.19.5, 1.20rc2: https://github.com/go-nv/goenv/pull/282\n\n## 2.0.4\n\n### Added\n\n- Resolve init rehash issue Ref: https://github.com/go-nv/goenv/pull/275\n\n## 2.0.3\n\n### Added\n\n- Make it so tests dont look at real definitions; fix flaky test Ref: https://github.com/go-nv/goenv/pull/269\n- [goenv-bot]: Add 1.19.3 1.18.8 definition to goenv Ref: https://github.com/go-nv/goenv/pull/268\n- move latest patch code below once definition path is set by goenv local Ref: https://github.com/go-nv/goenv/pull/272\n- Ensure install doesn't exit silently when no installable definition found Ref: https://github.com/go-nv/goenv/pull/273\n\n## 2.0.2\n\n### Added\n\n- fix version printout for `goenv --version`; update changelog Ref: https://github.com/go-nv/goenv/pull/260\n\n## 2.0.1\n\n### Added\n\n- install latest patch in go-build script Ref: https://github.com/go-nv/goenv/pull/258\n- Download all packages from go.dev Ref: https://github.com/go-nv/goenv/pull/218\n- move shims to end of $PATH Ref: https://github.com/go-nv/goenv/pull/248\n- fix tests Ref: https://github.com/go-nv/goenv/pull/259\n\n## 2.0.0\n\n### Added\n\n- Prepare goenv 2.0.0beta1 Ref: https://github.com/go-nv/goenv/pull/62\n- Follow up of PR #56 Ref: https://github.com/go-nv/goenv/pull/63\n- :tada: add 1.12beta2 Ref: https://github.com/go-nv/goenv/pull/64\n- add 1.11.5 and 1.10.8 Ref: https://github.com/go-nv/goenv/pull/65\n- add 1.12rc1 Ref: https://github.com/go-nv/goenv/pull/66\n- add 1.12.0 Ref: https://github.com/go-nv/goenv/pull/68\n- [GH-30][gh-50] Improve GOPATH and GOROOT env var management Ref: https://github.com/go-nv/goenv/pull/70\n- add 1.12.1 and 1.11.6 Ref: https://github.com/go-nv/goenv/pull/71\n- add 1.12.2, 1.12.3, 1.11.7 and 1.11.8 Ref: https://github.com/go-nv/goenv/pull/73\n- Prepare 2.0.0beta8 Ref: https://github.com/go-nv/goenv/pull/74\n- [GH-76] Fix docs values Ref: https://github.com/go-nv/goenv/pull/77\n- add 1.12.4 and 1.11.9 Ref: https://github.com/go-nv/goenv/pull/78\n- [GH-54] Fix golang releases without patch version not being installed Ref: https://github.com/go-nv/goenv/pull/75\n- Prepare 2.0.0beta9 Ref: https://github.com/go-nv/goenv/pull/79\n- add 1.12.5 and 1.11.10 Ref: https://github.com/go-nv/goenv/pull/83\n- add 1.12.6 and 1.11.11 Ref: https://github.com/go-nv/goenv/pull/84\n- add 1.13beta1 Ref: https://github.com/go-nv/goenv/pull/86\n- add 1.12.7 and 1.11.12 Ref: https://github.com/go-nv/goenv/pull/88\n- add 1.12.8 and 1.11.13 Ref: https://github.com/go-nv/goenv/pull/90\n- add 1.12.9 Ref: https://github.com/go-nv/goenv/pull/91\n- :tada: add 1.13rc1 Ref: https://github.com/go-nv/goenv/pull/92\n- add 1.13 Ref: https://github.com/go-nv/goenv/pull/95\n- add 1.13rc2 Ref: https://github.com/go-nv/goenv/pull/94\n- `go-build` fails if curl or wget does not exist, but no error message is displayed. Ref: https://github.com/go-nv/goenv/pull/93\n- Fixed typo Ref: https://github.com/go-nv/goenv/pull/96\n- add 1.13.1 and 1.12.10 Ref: https://github.com/go-nv/goenv/pull/97\n- move $GOPATH/bin to end of $PATH Ref: https://github.com/go-nv/goenv/pull/100\n- add 1.13.3 and 1.12.12 Ref: https://github.com/go-nv/goenv/pull/102\n- add 1.13.2 and 1.12.11 Ref: https://github.com/go-nv/goenv/pull/101\n- add 1.13.4 and 1.12.13 Ref: https://github.com/go-nv/goenv/pull/103\n- add 1.13.5 and 1.12.14 Ref: https://github.com/go-nv/goenv/pull/104\n- add 1.14beta1 Ref: https://github.com/go-nv/goenv/pull/105\n- 1.13.6 and 1.12.15 Ref: https://github.com/go-nv/goenv/pull/107\n- add 1.13.7 and 1.12.16 Ref: https://github.com/go-nv/goenv/pull/108\n- add 1.14rc1 Ref: https://github.com/go-nv/goenv/pull/109\n- add 1.13.8 and 1.12.17 Ref: https://github.com/go-nv/goenv/pull/110\n- add macos testing Ref: https://github.com/go-nv/goenv/pull/111\n- add 1.14.0 Ref: https://github.com/go-nv/goenv/pull/113\n- add 1.14.1 and 1.13.9 Ref: https://github.com/go-nv/goenv/pull/116\n- add 1.14.2 and 1.13.10 Ref: https://github.com/go-nv/goenv/pull/120\n- Add ZPlug installation instructions Ref: https://github.com/go-nv/goenv/pull/122\n- add 1.14.3 and 1.13.11 Ref: https://github.com/go-nv/goenv/pull/124\n- automatic shims Ref: https://github.com/go-nv/goenv/pull/119\n- add 1.14.4 and 1.13.12 Ref: https://github.com/go-nv/goenv/pull/125\n- add 1.15beta1 Ref: https://github.com/go-nv/goenv/pull/126\n- Remove duplicate test Ref: https://github.com/go-nv/goenv/pull/128\n- add 1.14.5 and 1.13.13 Ref: https://github.com/go-nv/goenv/pull/127\n- add 1.14.6 and 1.13.14 Ref: https://github.com/go-nv/goenv/pull/129\n- add 1.15rc2 Ref: https://github.com/go-nv/goenv/pull/134\n- add 1.13.15 Ref: https://github.com/go-nv/goenv/pull/137\n- add 1.15.0 Ref: https://github.com/go-nv/goenv/pull/138\n- add 1.14.7 Ref: https://github.com/go-nv/goenv/pull/135\n- Add 1.15.1 and 1.14.8 Ref: https://github.com/go-nv/goenv/pull/139\n- support go1.15.2 Ref: https://github.com/go-nv/goenv/pull/142\n- add 1.14.9 Ref: https://github.com/go-nv/goenv/pull/141\n- Add 1.15.3 and 1.14.10 Ref: https://github.com/go-nv/goenv/pull/149\n- search relative to bin_path for plugins Ref: https://github.com/go-nv/goenv/pull/146\n- Add 1.15.4 and 1.14.11 Ref: https://github.com/go-nv/goenv/pull/152\n- Add 1.15.5 and 1.14.12 Ref: https://github.com/go-nv/goenv/pull/153\n- Add 1.15.6 and 1.14.13 Ref: https://github.com/go-nv/goenv/pull/154\n- Add 1.16beta1 Ref: https://github.com/go-nv/goenv/pull/155\n- Support darwin-arm64 arch on 1.16beta1 Ref: https://github.com/go-nv/goenv/pull/158\n- Add Linux arm 64bit Ref: https://github.com/go-nv/goenv/pull/159\n- Add 1.15.7 and 1.14.14 Ref: https://github.com/go-nv/goenv/pull/160\n- add GOENV_APPEND_GOPATH and GOENV_PREPEND_GOPATH options Ref: https://github.com/go-nv/goenv/pull/148\n- clean up init function Ref: https://github.com/go-nv/goenv/pull/161\n- Add 1.15.8 and 1.14.15 Ref: https://github.com/go-nv/goenv/pull/162\n- Add Go 1.16 Ref: https://github.com/go-nv/goenv/pull/164\n- Fix linux arm 64bit version in link Ref: https://github.com/go-nv/goenv/pull/166\n- Add 1.15.9 and 1.16.1 Ref: https://github.com/go-nv/goenv/pull/165\n- Add go 1.15.10 and 1.16.2 Ref: https://github.com/go-nv/goenv/pull/167\n- ISSUE-169: GOENV_GOPATH_PREFIX does not work as expected Ref: https://github.com/go-nv/goenv/pull/170\n- Add go1.16.3 (#173) Ref: https://github.com/go-nv/goenv/pull/174\n- Add 1.15.11 Ref: https://github.com/go-nv/goenv/pull/175\n- Use a POSIX-compatible regex in goenv-version-file-read Ref: https://github.com/go-nv/goenv/pull/176\n- Add 1.16.4 and 1.15.12 Ref: https://github.com/go-nv/goenv/pull/178\n- Add 1.16.5 and 1.15.13 Ref: https://github.com/go-nv/goenv/pull/181\n- Add 1.16.6, 1.15.14 and 1.17beta1 Ref: https://github.com/go-nv/goenv/pull/183\n- Add 1.17rc1 Ref: https://github.com/go-nv/goenv/pull/185\n- Show progress bar during download tarball Ref: https://github.com/go-nv/goenv/pull/187\n- Add 1.15.15, 1.16.7 and 1.17rc2 Ref: https://github.com/go-nv/goenv/pull/189\n- Add 1.17 Ref: https://github.com/go-nv/goenv/pull/193\n- Add 1.17.1 and 1.16.8 Ref: https://github.com/go-nv/goenv/pull/195\n- Add 1.17.2 and 1.16.9 Ref: https://github.com/go-nv/goenv/pull/196\n- Use correct checksum for Go Darwin arm 1.17.2 Ref: https://github.com/go-nv/goenv/pull/197\n- Add 1.17.3 and 1.16.10 Ref: https://github.com/go-nv/goenv/pull/199\n- test_assert_helper: use type -aP instead of which -a Ref: https://github.com/go-nv/goenv/pull/201\n- Add 1.17.4, 1.17.5, 1.16.11 and 1.16.12 Ref: https://github.com/go-nv/goenv/pull/204\n- Add 1.18beta1 Ref: https://github.com/go-nv/goenv/pull/208\n- Add 1.17.6 and 1.16.13 Ref: https://github.com/go-nv/goenv/pull/211\n- Update realpath extension source with upstream changes Ref: https://github.com/go-nv/goenv/pull/206\n- Add 1.18beta2 Ref: https://github.com/go-nv/goenv/pull/212\n- Add 1.16.14 & 1.17.7 Ref: https://github.com/go-nv/goenv/pull/213\n- Adds support for 1.18rc1 release Ref: https://github.com/go-nv/goenv/pull/214\n- add 1.17.8 and 1.16.15 Ref: https://github.com/go-nv/goenv/pull/216\n- Support 1.18.0 Ref: https://github.com/go-nv/goenv/pull/217\n- support 1.18.1 Ref: https://github.com/go-nv/goenv/pull/219\n- Support go 1.17.9 Ref: https://github.com/go-nv/goenv/pull/221\n- feat: suport force darwin arch Ref: https://github.com/go-nv/goenv/pull/220\n- Go 1.18.2 Ref: https://github.com/go-nv/goenv/pull/224\n- Add Go 1.17.10 Ref: https://github.com/go-nv/goenv/pull/225\n- Support Go 1.18.3 Ref: https://github.com/go-nv/goenv/pull/228\n- Go 1.18.3 Fix tar.gz MacOS checksum Ref: https://github.com/go-nv/goenv/pull/229\n- Support go 1.17.11 Ref: https://github.com/go-nv/goenv/pull/231\n- Add go1.19beta1 support Ref: https://github.com/go-nv/goenv/pull/232\n- Support Go 1.18.4 and 1.17.12 Ref: https://github.com/go-nv/goenv/pull/236\n- Remove redundant command prompts Ref: https://github.com/go-nv/goenv/pull/235\n- Support Go 1.18.5 and 1.17.13 Ref: https://github.com/go-nv/goenv/pull/239\n- Support Go 1.19 Ref: https://github.com/go-nv/goenv/pull/240\n- Doc: simplify git cmd for upgrade & checkout version Ref: https://github.com/go-nv/goenv/pull/242\n- Support Go 1.19.1 and 1.18.6 Ref: https://github.com/go-nv/goenv/pull/245\n- If `.go-version` is missing, fallback on `go.mod` Ref: https://github.com/go-nv/goenv/pull/227\n- Support 1.19.2 and 1.18.7 Ref: https://github.com/go-nv/goenv/pull/250\n- Install latest patch version if major.minor semantic version provided; Add latest command to install Ref: https://github.com/go-nv/goenv/pull/252\n\n## 2.0.0beta11\n\n### Added\n\n- Add golang installations of 1.12.6 and 1.11.11 ; Ref: https://github.com/go-nv/goenv/pull/84\n\n## 2.0.0beta10\n\n### Added\n\n- Add golang installations of 1.12.5 and 1.11.10 ; Ref: https://github.com/go-nv/goenv/pull/83\n\n## 2.0.0beta9\n\n### Added\n\n- Add golang installations of 1.12.4 and 1.11.9 ; Ref: https://github.com/go-nv/goenv/pull/78\n\n### Fixed\n\n- Golang releases without patch version not being installed ; Ref: https://github.com/go-nv/goenv/pull/75\n\n## 2.0.0beta8\n\n### Added\n\n- Add golang installations of 1.12.2, 1.12.3, 1.11.7 and 1.11.8 ; Ref: https://github.com/go-nv/goenv/pull/73\n\n### Fixed\n\n- Lack of environment variables configuration documentation after https://github.com/go-nv/goenv/pull/70.\n  Also fixed lack of Contributing guidelines ; Ref https://github.com/go-nv/goenv/pull/74\n\n## 2.0.0beta7\n\n### Added\n\n- Add golang installations of 1.12.1. and 1.11.6 ; Ref: https://github.com/go-nv/goenv/pull/71\n\n## 2.0.0beta6\n\n### Added\n\n- Add management of env variable `GOROOT` that can be disabled with env var `GOENV_DISABLE_GOROOT=1`,\n  when calling `goenv-sh-rehash` (`goenv rehash` when `eval $(goenv init -)` was previously executed).\n  It does not attempt to manage when version is `system`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n- Add management of env variable `GOPATH` that can be disabled with env var `GOENV_DISABLE_GOPATH=1`,\n  when calling `goenv-sh-rehash` (`goenv rehash` when `eval $(goenv init -)` was previously executed).\n  It does not attempt to manage when version is `system`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n- Add configurable managed `GOPATH` prefix for `goenv-sh-rehash`\n  (`goenv rehash` when `eval $(goenv init -)` was previously executed).\n  Configured via `GOENV_GOPATH_PREFIX=<your prefix>`.\n  E.g `GOENV_GOPATH_PREFIX=/tmp`.\n  Default managed `GOPATH` is `$HOME/go`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n- Add `--only-manage-paths` option to `goenv-sh-rehash` (`goenv rehash` when `eval $(goenv init -)` was previously executed) to skip calling `goenv-rehash` and update shims.\n  Instead it only updates managed `GOPATH` and `GOROOT` env variables.\n  It does not attempt to manage when version is `system`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n\n### Changed\n\n- Changed `goenv`'s bootstrap (`eval $(goenv init -)`) now to call `goenv-sh-rehash --only-manage-paths`.\n  This means that it'll export and manage `GOROOT` and `GOPATH` env vars.\n  It does not attempt to manage when version is `system`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n- Changed `goenv-exec` now to set `GOPATH` and `GOROOT` environment variables before\n  executing specified cmd and args. Can be disable via `GOENV_DISABLE_GOPATH=1` and `GOENV_DISABLE_GOROOT=1`.\n  `GOPATH` can be configured with `GOENV_GOPATH_PREFIX`. E.g `GOENV_GOPATH_PREFIX=/tmp/goenv`.\n  Default managed `GOPATH` is `$HOME/go`.\n  ; Ref: https://github.com/go-nv/goenv/pull/70\n\n## 2.0.0beta5\n\n### Added\n\n- Add installation definitions for Golang 1.12.0.\n  ; Ref: https://github.com/go-nv/goenv/pull/68\n\n## 2.0.0beta4\n\n### Added\n\n- Add installation definitions for Golang 1.12rc1.\n  ; Ref: https://github.com/go-nv/goenv/pull/66\n\n## 2.0.0beta3\n\n### Added\n\n- Add installation definitions for Golang 1.11.5 and 1.10.8.\n  ; Ref: https://github.com/go-nv/goenv/pull/65\n\n## 2.0.0beta2\n\n### Added\n\n- Add installation definitions for Golang 1.12beta2.\n  ; Ref: https://github.com/go-nv/goenv/pull/64\n\n## 2.0.0beta1\n\n### Added\n\n- `make test-goenv-go-build` to test the `go-build` plugin.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- For tests, fake Python-based HTTP file server to download definitions.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `make test=<target_test_suite_path>.bats test-goenv{-go-build,}` functionality to execute a single test suite\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv rehash` via `goenv help --usage rehash`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv root` via `goenv help --usage root`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv sh-rehash` via `goenv help --usage sh-rehash`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv version` via `goenv help --usage version`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Summary for `goenv version-file-read` via `goenv help version-file-read`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Summary for `goenv completions` via `goenv help completions`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv version-name` via `goenv help --usage version-name`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Usage instructions for `goenv version-origin` via `goenv help --usage version-origin`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Debugging support via `GOENV_DEBUG=1` for `goenv uninstall`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n\n### Changed\n\n- `goenv shell` now fails and prints more helpful instructions when the former command is run without proper shell setup via `eval $(goenv init -)`.\n  ; Ref: https://github.com/go-nv/goenv/pull/56\n  https://github.com/go-nv/goenv/pull/63\n- Re-enabled, greatly refactored and made the test suite pass again.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Travis CI test suite to run against `xenial` Ubuntu.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Use https://github.com/bats-core/bats-core instead of https://github.com/sstephenson/bats for test suite runner and replace links.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Backfilled the CHANGELOG.md\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv` error message when `GOENV_NATIVE_EXT=1`, but native extension is not present, to quote `realpath` with single quotes. It's now `failed to load 'realpath' builtin`\n- `goenv` error message when `GOENV_DIR` (e.g `/home/go-nv/.goenv`), but it's not writable, to quote `$GOENV_DIR` with single quotes. It's now `cannot change working directory to '$GOENV_DIR'`.\n- `goenv` error message when unknown command is given (e.g `goenv potato`), to quote `$command` with single quotes. It's now `no such command '$command'`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv` and `goenv help` is called to quote `goenv help <command>` with single quotes. It's now `'goenv help <command>'`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv init` and `goenv init <shell>` are more explicit now that the given shell is unknown. E.g `profile=\"<unknown shell: <shell>, replace with your profile path>\"`\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv init` and `goenv init <shell>` now return exit status 0.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv prefix <version>` error message when not installed version is given, to quote `$version` with single quotes. It's now `goenv: version '${version}' not installed`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv version-name <version>` error message when not installed version is given, to quote `$version` with single quotes. It's now `goenv: version '${version}' is not installed (set by $(goenv-version-origin))`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv versions` error message when `GOENV_NATIVE_EXT=1`, but native extension is not present, to quote `realpath` with single quotes. It's now `goenv: failed to load 'realpath' builtin`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv which <command>` error message when current version (specified by `GOENV_VERSION` env var or `.go-version` file) is not installed, to quote now with single quotes. It's now `goenv: version '$version' is not installed (set by $(goenv-version-origin))`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv which <command>` error message when `$command` is not a binary executable present in current version, but it's found in other versions, to quote `$command` in single quotes. It's now `The '$command' command exists in these Go versions:`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv which <command>` error message when `$command` is not a binary executable present in $PATH, to quote `$command`in single quotes. It's now`goenv: '$GOENV_COMMAND' command not found`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed `go-build` and `goenv install`'s error message when no `curl` or `wget` are present to now quote using single quotes. It's now `error: please install 'curl' or 'wget' and try again`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed mentions of `pyenv` to `goenv` when no `go` executable is found after installation of definition.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `goenv --version` now returns only goenv version. Previous format of `goenv <version>-<num_commits>-<git_sha>`, now just `<version>`. E.g `goenv 1.23.3`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `go-build --version` now returns only go-build version. Previous format of `go-build <version>-<num_commits>-<git_sha>`, now just `<version>`. E.g `go-build 1.23.3`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed `goenv install <version>`'s error message when `version` is not a known installable definition, but other similar ones are found to be quoted with single quotes. It's now `The following versions contain '$DEFINITION' in the name:` and `See all available versions with 'goenv install --list'.`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed `goenv uninstall <version>`'s error message when `version` is not installed to be quoted using single quotes. It's now `goenv: version '$VERSION_NAME' not installed`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed `goenv uninstall <version>`'s to fail regardless whether `--force` or `-f` is used when version is not installed. This also means that `before_uninstall` hooks won't be triggered.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Changed the `README.md` to be easier to navigate and read by extracting \"how it works\" to HOW_IT_WORKS.md, \"advanced config\" to ADVANCED_CONFIGURATION.md, \"installation\" to INSTALL.md, move Homebrew installation instructions from \"advanced config\" to INSTALL.md.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n\n### Removed\n\n- `goenv versions` does not look for versions in `{GOENV_ROOT}/versions/*/envs/*` anymore. This was legacy from pyenv.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed `--enable-shared` support in `go-build`. This was legacy from pyenv.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed mentions of default golang download mirrors in README.md. This was legacy from pyenv.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed default golang download mirrors in `go-build`. This was legacy from pyenv.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed `make_args` from `go-build`. This was legacy from pyenv.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed installation definition functions `configured_with_package_dir`, `needs_yaml`, `try_go_module`, `verify_go_module` and `use_homebrew_yaml`. This was legacy from pyenv and it's not useful since we're not compiling.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed logic to determine `go` suffix after installation of definition. It's legacy from pyenv. It's always `go`.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed `unset`-ing of `GOHOME` environment variable after installation. It's not used nowadays in Go.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- Removed `GOENV_BOOTSTRAP_VERSION` support in `goenv install`. Legacy from pyenv and not useful in Go.\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n\n### Fixed\n\n- Bad table formatting in the README.md\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n- `make bats` failing when `bats` already exists locally\n  ; Ref: https://github.com/go-nv/goenv/pull/62\n\n## 1.23.3\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.12beta1\n  ; Ref: https://github.com/go-nv/goenv/pull/61\n\n## 1.23.2\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11.4\n  ; Ref: https://github.com/go-nv/goenv/pull/60\n- Add installation definition for unix and ARM Golang 1.10.7\n  ; Ref: https://github.com/go-nv/goenv/pull/60\n\n## 1.23.1\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11.3\n  ; Ref: https://github.com/go-nv/goenv/pull/59\n- Add installation definition for unix and ARM Golang 1.10.6\n  ; Ref: https://github.com/go-nv/goenv/pull/59\n\n## 1.23.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11.2\n  ; Ref: https://github.com/go-nv/goenv/pull/58\n- Add installation definition for unix and ARM Golang 1.10.5\n  ; Ref: https://github.com/go-nv/goenv/pull/58\n\n## 1.22.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11.1\n  ; Ref: https://github.com/go-nv/goenv/pull/55\n\n## 1.21.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11.0\n  ; Ref: https://github.com/go-nv/goenv/pull/53\n- Add installation definition for unix and ARM Golang 1.10.4\n  ; Ref: https://github.com/go-nv/goenv/pull/53\n\n## 1.20.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11rc2\n  ; Ref: https://github.com/go-nv/goenv/pull/52\n\n## 1.19.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11rc1\n  ; Ref: https://github.com/go-nv/goenv/pull/49\n\n## 1.18.0\n\n### Added\n\n- Add installation definition for unix and ARM Golang 1.11beta3\n  ; Ref: https://github.com/go-nv/goenv/pull/48\n\n## 1.17.0\n\n### Added\n\n- Add ARM installation definition for Golang 1.10.3\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10.2\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10.1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10.0\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10rc2\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10rc1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.10beta2\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.7\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.6\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.5\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.4\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.3\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.2\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.9.0\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.7\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.5\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.4\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.3\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.8.0\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.7.5\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.7.4\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.7.3\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.7.1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.7.0\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.6.4\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.6.3\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.6.2\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.6.1\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add ARM installation definition for Golang 1.6.0\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n- Add installation support for ARM builds of Golang\n  ; Ref: https://github.com/go-nv/goenv/pull/47\n\n## 1.16.0\n\n### Added\n\n- Add installation support for Golang 1.11beta2\n  ; Ref: https://github.com/go-nv/goenv/pull/46\n\n## 1.15.0\n\n### Added\n\n- Add installation support for Golang 1.10.3\n  ; Ref: https://github.com/go-nv/goenv/pull/45\n- Add installation support for Golang 1.9.7\n  ; Ref: https://github.com/go-nv/goenv/pull/45\n\n## 1.14.0\n\n### Added\n\n- Installation support for BSD `amd64` architectures as 64bit\n  ; Ref: https://github.com/go-nv/goenv/pull/44\n\n### Fixed\n\n- Installation on BSD `i686` architectures failing due to invalid bash code\n  ; Ref: https://github.com/go-nv/goenv/pull/44\n\n## 1.13.0\n\n### Added\n\n- Add support for Golang 1.10.2\n  ; Ref: https://github.com/go-nv/goenv/pull/43\n- Add support for Golang 1.9.6\n  ; Ref: https://github.com/go-nv/goenv/pull/43\n\n## 1.12.0\n\n### Added\n\n- Add support for Golang 1.10.1\n  ; Ref: https://github.com/go-nv/goenv/pull/42\n- Add support for Golang 1.9.5\n  ; Ref: https://github.com/go-nv/goenv/pull/42\n\n## 1.11.0\n\n### Added\n\n- Add support for Golang 1.10\n  ; Ref: https://github.com/go-nv/goenv/pull/41\n\n## 1.10.0\n\n### Added\n\n- Add support for Golang 1.10rc2\n  ; Ref: https://github.com/go-nv/goenv/pull/40\n- Add support for Golang 1.9.4\n  ; Ref: https://github.com/go-nv/goenv/pull/40\n- Add support for Golang 1.8.7\n  ; Ref: https://github.com/go-nv/goenv/pull/40\n\n## 1.9.0\n\n### Added\n\n- Add support for Golang 1.11rc1\n  ; Ref: https://github.com/go-nv/goenv/pull/39\n\n## 1.8.0\n\n### Added\n\n- Add support for Golang 1.10beta2\n  ; Ref: https://github.com/go-nv/goenv/pull/36\n- Add support for Golang 1.9.3\n  ; Ref: https://github.com/go-nv/goenv/pull/36\n\n## 1.7.0\n\n### Added\n\n- Add support for Golang 1.9.2\n  ; Ref: https://github.com/go-nv/goenv/pull/35\n- Add support for Golang 1.8.5\n  ; Ref: https://github.com/go-nv/goenv/pull/35\n\n## 1.6.0\n\n### Removed\n\n- Remove `GOROOT` environment variable setup for `goenv-init`\n  ; Ref: https://github.com/go-nv/goenv/pull/34\n- Remove `GOROOT` environment variable setup when `GOENV_VERSION` is `system` for `goenv-exec`\n  ; Ref: https://github.com/go-nv/goenv/pull/34\n\n## 1.5.0\n\n### Added\n\n- Add support for Golang 1.9.1\n  ; Ref: https://github.com/go-nv/goenv/pull/33\n\n## 1.4.0\n\n### Added\n\n- Add support for Golang 1.6.4\n  ; Ref: https://github.com/go-nv/goenv/pull/32\n\n## 1.3.0\n\n### Added\n\n- Add support for Golang 1.9.0\n  ; Ref: https://github.com/go-nv/goenv/pull/31\n\n## 1.2.1\n\n### Fixed\n\n- Replace usage of `setenv` with `set -gx` for fish shells\n  ; Ref: https://github.com/go-nv/goenv/pull/28\n\n## 1.2.0\n\n### Added\n\n- Add support for Golang 1.8.1\n  ; Ref: https://github.com/go-nv/goenv/pull/25\n- Add support for Golang 1.8.3\n  ; Ref: https://github.com/go-nv/goenv/pull/27\n\n## 1.1.0\n\n### Changed\n\n- Update goenv homebrew installation instructions in README.md, since it's available as a core formula\n  ; Ref: https://github.com/go-nv/goenv/pull/19\n- Update COMMANDS.md and remove duplicate command examples\n  ; Ref: https://github.com/go-nv/goenv/pull/20\n\n### Fixed\n\n- Fix `goenv init` for fish shells\n  ; Ref: https://github.com/go-nv/goenv/pull/22\n  https://github.com/go-nv/goenv/commit/80fb488d01baef3b4d262e5b4828175c7ed44289\n\n## 1.0.0\n\n### Fixed\n\n- Switch to semver release versioning\n\n## 1.8 (I have no idea why this release exists)\n\n### Added\n\n- Add support for Golang 1.8.0\n  ; Ref: https://github.com/go-nv/goenv/pull/16\n- Add support for Golang 1.7.5\n  ; Ref: https://github.com/go-nv/goenv/pull/14\n  https://github.com/go-nv/goenv/pull/15\n\n## v20161215\n\n### Added\n\n- Add support for Golang 1.7.4\n  ; Ref: https://github.com/go-nv/goenv/pull/11\n- Travis CI support\n  ; Ref: https://github.com/go-nv/goenv/pull/10\n\n### Fixed\n\n- Test command `pyenv echo` => `goenv echo`\n  ; Ref: https://github.com/go-nv/goenv/pull/9\n\n## v20161028\n\n### Added\n\n- Add support for Golang 1.7.3\n  ; Ref: https://github.com/go-nv/goenv/pull/5\n- Add support for Golang 1.7.1\n  ; Ref: https://github.com/go-nv/goenv/pull/5\n- Add support for Golang 1.7.0\n  ; Ref: https://github.com/go-nv/goenv/pull/5\n- Add support for Golang 1.6.3\n  ; Ref: https://github.com/go-nv/goenv/pull/4\n\n### Removed\n\n- Remove some more `pyenv` and `python-build` references in README.md\n  ; Ref: https://github.com/go-nv/goenv/pull/7\n\n### Fixed\n\n- Fix bash auto-completion trying to use `pyenv` instead of `goenv`\n  ; Ref: https://github.com/go-nv/goenv/pull/6\n\n## v20160814\n\n### Changed\n\n- Updated comparison with other golang environment management projects\n  ; Ref: https://github.com/go-nv/goenv/commit/68a5a18d493dc9f6d9ab45f7c4bc4b52a10557e2\n- Update homebrew installation instructions\n  ; Ref: https://github.com/go-nv/goenv/pull/1\n\n### Fixed\n\n- Installation on Linux `i686` architectures failing due to invalid bash code\n  ; Ref: https://github.com/go-nv/goenv/pull/3\n\n- Wrong checksum for 64bit Linux release of Golang 1.2.2\n  ; Ref: https://github.com/go-nv/goenv/pull/2\n\n## v20160424\n\n### Added\n\n- Add support for unix Go 1.6.2\n  ; Ref: https://github.com/go-nv/goenv/commit/fc211b1b78370f7e679872c6cebbffa92dd0017f\n- Add support for unix Go versions 1.6.1\n  ; Ref: https://github.com/go-nv/goenv/commit/8f2171d4014bff3ba15faf7d784965a8a7590205\n  https://github.com/go-nv/goenv/commit/61689d52e9d23a46ab12c5195ac32452dea3ef75\n- Add support for unix Go versions 1.6.0\n  ; Ref: https://github.com/go-nv/goenv/commit/8f2171d4014bff3ba15faf7d784965a8a7590205\n  https://github.com/go-nv/goenv/commit/61689d52e9d23a46ab12c5195ac32452dea3ef75\n- Add support for unix Go 1.5.4\n  ; Ref: https://github.com/go-nv/goenv/commit/15e9863b33aa23f6794261fbdf247f9760cc43e1\n- Add support for unix Go 1.5.3\n  ; Ref: https://github.com/go-nv/goenv/commit/a099796aafa70da932e9cd8aa0a6a99f64f49904\n- Add support for unix Go 1.5.2\n  ; Ref: https://github.com/go-nv/goenv/commit/01ec11c3fd4058eb55d57f61d494233e37c233a6\n- Add support for unix Go 1.5.1\n  ; Ref: https://github.com/go-nv/goenv/commit/0745eb7243afc9a41997acc0080ca4e292ecdbe4\n- Add support for unix Go 1.5.0\n  ; Ref: https://github.com/go-nv/goenv/commit/f527101285c32b1abd3726d535ccf2f87d4a2447\n- Add support for unix Go 1.4.3\n  ; Ref: https://github.com/go-nv/goenv/commit/fa5856a476a0d32674e26cd9e7283806ef9f78b8\n- Add support for unix Go 1.4.2\n  ; Ref: https://github.com/go-nv/goenv/commit/87a123c682e00bb024a0a5ddf2c0a2d6e9fe18a3\n- Add support for unix Go 1.4.1\n  ; Ref: https://github.com/go-nv/goenv/commit/9bb9168555d38376f5251c01f51f8c84ea3cf4e4\n- Add support for unix Go 1.4.0\n  ; Ref: https://github.com/go-nv/goenv/commit/02e3aea3f1222e21b67d41696cc0eb65485e106f\n- Add support for unix Go 1.3.3\n  ; Ref: https://github.com/go-nv/goenv/commit/2543028c389311a66db26d39a4e674eae326549d\n- Add support for unix Go 1.3.2\n  ; Ref: https://github.com/go-nv/goenv/commit/bc48eda1a77d89b844fa4d920e68a2207d85c72c\n- Add support for unix Go 1.3.1\n  ; Ref: https://github.com/go-nv/goenv/commit/63537895c87d4db2d76bb1c99bb0a4c3b0e44442\n- Add support for unix Go 1.3.0\n  ; Ref: https://github.com/go-nv/goenv/commit/b8fc6e7013028daf78080fda86a1afa2fa3ef590\n- Add support support for unix Go 1.2.2\n  ; Ref: https://github.com/go-nv/goenv/commit/fe1db9bfc8f2dc0fb3f3e0eb0d02192fd596b046\n- Installation definition functions for Darwin 10.6 32/64bit, Darwin 10.8 32/64bit\n  ; Ref: https://github.com/go-nv/goenv/commit/4e810f8afd5086ef4fa618a0800d50dec54e6418\n- Add SHA1 checksum verification support\n  ; Ref: https://github.com/go-nv/goenv/commit/d38c5875f7aaa559b1dfc9976f5f52309953a023\n\n### Changed\n\n- Update documentation to fix usage where `pyenv` is specified instead of `goenv`.\n  ; Ref: https://github.com/go-nv/goenv/commit/807520548ae6e2727a87ab04d2993522ae0e76d0\n\n### Removed\n\n- Obsolete compilation functionality for gcc and similar\n  ; Ref: https://github.com/go-nv/goenv/commit/4e810f8afd5086ef4fa618a0800d50dec54e6418\n- Obsolete MacOS build functionality\n  ; Ref: https://github.com/go-nv/goenv/commit/4e810f8afd5086ef4fa618a0800d50dec54e6418\n- Obsolete compilation tests\n  ; Ref: https://github.com/go-nv/goenv/commit/4e810f8afd5086ef4fa618a0800d50dec54e6418\n\n## v20160417\n\n### Added\n\n- `goenv` basic functionality cloned from https://github.com/pyenv/pyenv\n"
        },
        {
          "name": "CODE_OF_CONDUCT.md",
          "type": "blob",
          "size": 3.2275390625,
          "content": "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as\ncontributors and maintainers pledge to making participation in our project and\nour community a harassment-free experience for everyone, regardless of age, body\nsize, disability, ethnicity, gender identity and expression, level of experience,\nnationality, personal appearance, race, religion, or sexual identity and\norientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment\ninclude:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or\nadvances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic\n  address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a\n  professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable\nbehavior and are expected to take appropriate and fair corrective action in\nresponse to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or\nreject comments, commits, code, wiki edits, issues, and other contributions\nthat are not aligned to this Code of Conduct, or to ban temporarily or\npermanently any contributor for other behaviors that they deem inappropriate,\nthreatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces\nwhen an individual is representing the project or its community. Examples of\nrepresenting a project or community include using an official project e-mail\naddress, posting via an official social media account, or acting as an appointed\nrepresentative at an online or offline event. Representation of a project may be\nfurther defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be\nreported by contacting one of the project maintainers listed below. All\ncomplaints will be reviewed and investigated and will result in a response that\nis deemed necessary and appropriate to the circumstances. The project team is\nobligated to maintain confidentiality with regard to the reporter of an incident.\nFurther details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good\nfaith may face temporary or permanent repercussions as determined by other\nmembers of the project's leadership.\n\n## Project Maintainers\n\n* Anton Antonov <<anton.synd.antonov@gmail.com>>\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4,\navailable at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
        },
        {
          "name": "COMMANDS.md",
          "type": "blob",
          "size": 7.4287109375,
          "content": "# Command Reference\n\nLike `git`, the `goenv` command delegates to subcommands based on its\nfirst argument. \n\nAll subcommands are:\n\n* [`goenv commands`](#goenv-commands)\n* [`goenv completions`](#goenv-completions)\n* [`goenv exec`](#goenv-exec)\n* [`goenv global`](#goenv-global)\n* [`goenv help`](#goenv-help)\n* [`goenv hooks`](#goenv-hooks)\n* [`goenv init`](#goenv-init)\n* [`goenv install`](#goenv-install)\n* [`goenv local`](#goenv-local)\n* [`goenv prefix`](#goenv-prefix)\n* [`goenv rehash`](#goenv-rehash)\n* [`goenv root`](#goenv-root)\n* [`goenv shell`](#goenv-shell)\n* [`goenv shims`](#goenv-shims)\n* [`goenv uninstall`](#goenv-uninstall)\n* [`goenv version`](#goenv-version)\n* [`goenv --version`](#goenv---version)\n* [`goenv version-file`](#goenv-version-file)\n* [`goenv version-file-read`](#goenv-version-file-read)\n* [`goenv version-file-write`](#goenv-version-file-write)\n* [`goenv version-name`](#goenv-version-name)\n* [`goenv version-origin`](#goenv-version-origin)\n* [`goenv versions`](#goenv-versions)\n* [`goenv whence`](#goenv-whence)\n* [`goenv which`](#goenv-which)\n\n## `goenv commands`\n\nLists all available goenv commands.\n\n## `goenv completions`\n\nProvides auto-completion for itself and other commands by calling them with `--complete`.\n\n## `goenv exec`\n\nRun an executable with the selected Go version.\n\nAssuming there's an already installed golang by e.g `goenv install 1.11.1` and \n  selected by e.g `goenv global 1.11.1`,\n\n```shell\n> goenv exec go run main.go\n```\n\n## `goenv global`\n\nSets the global version of Go to be used in all shells by writing\nthe version name to the `~/.goenv/version` file. This version can be\noverridden by an application-specific `.go-version` file, or by\nsetting the `GOENV_VERSION` environment variable.\n\n```shell\n> goenv global 1.5.4\n\n# Showcase\n> goenv versions\n  system\n  * 1.5.4 (set by /Users/go-nv/.goenv/version)\n\n> goenv version\n1.5.4 (set by /Users/go-nv/.goenv/version)\n\n> go version\ngo version go1.5.4 darwin/amd64\n```\n\nThe special version name `system` tells goenv to use the system Go\n(detected by searching your `$PATH`).\n\nWhen run without a version number, `goenv global` reports the\ncurrently configured global version.\n\n## `goenv help`\n\nParses and displays help contents from a command's source file.\n\nA command is considered documented if it starts with a comment block\nthat has a `Summary:` or `Usage:` section. Usage instructions can\nspan multiple lines as long as subsequent lines are indented.\nThe remainder of the comment block is displayed as extended\ndocumentation.\n\n\n```shell\n> goenv help help\n```\n\n```shell\n> goenv help install\n```\n\n## `goenv hooks`\n\nList hook scripts for a given goenv command\n\n```shell\n> goenv hooks uninstall\n```\n\n## `goenv init`\n\nConfigure the shell environment for goenv. Must have if you want to integrate `goenv` with your shell.\n\nThe following displays how to integrate `goenv` with your user's shell:\n\n```shell\n> goenv init\n```\n\nUsually it boils down to adding to your `.bashrc` or `.zshrc` the following:\n\n```\neval \"$(goenv init -)\"\n```\n\n## `goenv install`\n\nInstall a Go version (using `go-build`). It's required that the version is a known installable definition by `go-build`. Alternatively, supply `latest` as an argument to install the latest version available to goenv.\n\n```shell\n> goenv install 1.11.1\n\n```\n\n## `goenv local`\n\nSets a local application-specific Go version by writing the version\nname to a `.go-version` file in the current directory. This version\noverrides the global version, and can be overridden itself by setting\nthe `GOENV_VERSION` environment variable or with the `goenv shell`\ncommand.\n\n```shell\n> goenv local 1.6.1\n```\n\nWhen run without a version number, `goenv local` reports the currently\nconfigured local version. You can also unset the local version:\n\n\n```shell\n> goenv local --unset\n```\n\nPrevious versions of goenv stored local version specifications in a\nfile named `.goenv-version`. For backwards compatibility, goenv will\nread a local version specified in an `.goenv-version` file, but a\n`.go-version` file in the same directory will take precedence.\n\n### `goenv local` (advanced)\n\nYou can specify local Go version. \n\n```shell\n> goenv local 1.5.4\n\n# Showcase\n> goenv versions\n  system\n  * 1.5.4 (set by /Users/syndbg/path/to/project/.go-version)\n\n> goenv version\n1.5.4 (set by /Users/syndbg/path/to/project/.go-version)\n\n> go version\n\ngo version go1.5.4 darwin/amd64\n```\n\n## `goenv prefix`\n\nDisplays the directory where a Go version is installed. If no\nversion is given, `goenv prefix' displays the location of the\ncurrently selected version.\n\n```shell\n> goenv prefix\n/home/go-nv/.goenv/versions/1.11.1\n```\n\n## `goenv rehash`\n\nInstalls shims for all Go binaries known to goenv (i.e.,\n`~/.goenv/versions/*/bin/*`).\nRun this command after you install a new\nversion of Go, or install a package that provides binaries.\n\n```shell\n> goenv rehash\n```\n\n## `goenv root`\n\nDisplay the root directory where versions and shims are kept\n\n```shell\n> goenv root\n/home/go-nv/.goenv\n```\n\n## `goenv shell`\n\nSets a shell-specific Go version by setting the `GOENV_VERSION`\nenvironment variable in your shell. This version overrides\napplication-specific versions and the global version.\n\n```shell\n> goenv shell 1.5.4\n```\n\nWhen run without a version number, `goenv shell` reports the current\nvalue of `GOENV_VERSION`. You can also unset the shell version:\n\n```shell\n> goenv shell --unset\n```\n\nNote that you'll need goenv's shell integration enabled (refer to [Installation](./INSTALL.md]) in order to use this command. If you\nprefer not to use shell integration, you may simply set the\n`GOENV_VERSION` variable yourself:\n\n```shell\n> export GOENV_VERSION=1.5.4\n```\n\n## `goenv shims`\n\nList existing goenv shims\n\n```shell\n> goenv shims\n/home/go-nv/.goenv/shims/go\n/home/go-nv/.goenv/shims/godoc\n/home/go-nv/.goenv/shims/gofmt\n```\n\n## `goenv uninstall`\n\nUninstalls the specified version if it exists, otherwise - error.\n\n```shell\n> goenv uninstall 1.6.3\n```\n\n## `goenv version`\n\nDisplays the currently active Go version, along with information on\nhow it was set.\n\n```shell\n> goenv version\n1.11.1 (set by /home/syndbg/work/go-nv/goenv/.go-version)\n```\n\n## `goenv --version`\n\nShow version of `goenv` in format of `goenv <version>`.\n\n## `goenv version-file`\n\nDetect the file that sets the current goenv version\n\n\n```shell\n> goenv version-file\n/home/syndbg/work/go-nv/goenv/.go-version\n```\n\n## `goenv version-file-read`\n\nReads specified version file if it exists\n\n```shell\n> goenv version-file-read ./go-version \n1.11.1\n```\n\n## `goenv version-file-write`\n\nWrites specified version(s) to the specified file if the version(s) exist\n\n```shell\n> goenv version-file-write ./go-version 1.11.1\n```\n\n## `goenv version-name`\n\nShows the current Go version\n\n```shell\n> goenv version-name\n1.11.1\n```\n\n## `goenv version-origin`\n\nExplain how the current Go version is set.\n\n```shell\n> goenv version-origin\n/home/go-nv/.goenv/version)\n```\n\n## `goenv versions`\n\nLists all Go versions known to goenv, and shows an asterisk next to\nthe currently active version.\n\n```shell\n> goenv versions\n  1.4.0\n  1.4.1\n  1.4.2\n  1.4.3\n  1.5.0\n  1.5.1\n  1.5.2\n  1.5.3\n  1.5.4\n  1.6.0\n* 1.6.1 (set by /home/go-nv/.goenv/version)\n  1.6.2\n```\n\n## `goenv whence`\n\nLists all Go versions with the given command installed.\n\n```shell\n> goenv whence go\n1.3.0\n1.3.1\n1.3.2\n1.3.3\n1.4.0\n1.4.1\n1.4.2\n1.4.3\n1.5.0\n1.5.1\n1.5.2\n1.5.3\n1.5.4\n1.6.0\n1.6.1\n1.6.2\n```\n\n## `goenv which`\n\nDisplays the full path to the executable that goenv will invoke when\nyou run the given command.\n\n```shell\n> goenv which gofmt\n/home/go-nv/.goenv/versions/1.6.1/bin/gofmt\n```\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.80078125,
          "content": "# Contributing\n\nThe goenv source code is [hosted on GitHub](https://github.com/go-nv/goenv).\nIt's clean, modular, and easy to understand, even if you're not a shell hacker. (I hope)\n\nTests are executed using [Bats](https://github.com/bats-core/bats-core).\n\nPlease feel free to submit pull requests and file bugs on the [issue tracker](https://github.com/go-nv/goenv/issues).\n\n## Prerequisites\n\n- Linux with any (or more than 1) of `zsh`, `bash`, `zsh`.\n\n## Common commands\n\n### Running the tests for both `goenv` and `goenv-go-build`\n\n```shell\n> make test\n```\n\n### Running the tests only for `goenv`\n\n```shell\n> make test-goenv\n```\n\n### Running the tests only for `goenv-go-build`\n\n```shell\n> make test-goenv-go-build\n```\n\n### Others\n\nCheck the [Makefile](./Makefile)\n\n## Workflows\n\n### Submitting an issue\n\n1. Check existing issues and verify that your issue is not already submitted.\n   If it is, it's highly recommended to add to that issue with your reports.\n2. Open issue\n3. Be as detailed as possible - Linux distribution, shell, what did you do,\n   what did you expect to happen, what actually happened.\n\n### Submitting a PR\n\n1. Find an existing issue to work on or follow `Submitting an issue` to create one\n   that you're also going to fix.\n   Make sure to notify that you're working on a fix for the issue you picked.\n1. Branch out from latest `master`.\n1. Code, add, commit and push your changes in your branch.\n1. Make sure that tests (or let the CI do the heavy work for you).\n1. Submit a PR.\n1. Make sure to clarify if the PR is ready for review or work-in-progress.\n   A simple `[WIP]` (in any form) is a good indicator whether the PR is still being actively developed.\n1. Collaborate with the codeowners/reviewers to merge this in `master`.\n\n### Release process\n\nDescribed in details at [RELEASE_PROCESS](./RELEASE_PROCESS.md).\n"
        },
        {
          "name": "ENVIRONMENT_VARIABLES.md",
          "type": "blob",
          "size": 2.279296875,
          "content": "## Environment variables\n\nYou can configure how `goenv` operates with the following settings:\n\nname | default | description\n-----|---------|------------\n`GOENV_VERSION` | | Specifies the Go version to be used.<br>Also see `goenv help shell`.\n`GOENV_ROOT` | `~/.goenv` | Defines the directory under which Go versions and shims reside.<br> Current value shown by `goenv root`.\n`GOENV_DEBUG` | | Outputs debug information.<br>Also as: `goenv --debug <subcommand>`\n`GOENV_HOOK_PATH` | | Colon-separated list of paths searched for goenv hooks.\n`GOENV_DIR` | `$PWD` | Directory to start searching for `.go-version` files.\n`GOENV_DISABLE_GOROOT` | `0` | Disables management of `GOROOT`.<br> Set this to `1` if you want to use a `GOROOT` that you export.\n`GOENV_DISABLE_GOPATH` | `0` | Disables management of `GOPATH`.<br> Set this to `1`  if you want to use a `GOPATH` that you export. It's recommend that you use this (as set to `0`) to avoid mixing multiple versions of golang packages at `GOPATH` when using different versions of golang. See https://github.com/go-nv/goenv/issues/72#issuecomment-478011438\n`GOENV_GOPATH_PREFIX` | `$HOME/go` | `GOPATH` prefix that's exported when `GOENV_DISABLE_GOPATH` is not `1`.<br> E.g in practice it can be `$HOME/go/1.12.0` if you currently use `1.12.0` version of go.\n`GOENV_APPEND_GOPATH` | | If `GOPATH` is set, it will be appended to the computed `GOPATH`.\n`GOENV_PREPEND_GOPATH` | | If `GOPATH` is set, it will be prepended to the computed `GOPATH`.\n`GOENV_GOMOD_VERSION_ENABLE` | | if `GOENV_GOMOD_VERSION_ENABLE` is set to 1, it will try to use the project's `go.mod` file to get the version.\n`GOENV_AUTO_INSTALL` | | if `GOENV_AUTO_INSTALL` is set to 1, it will automatically run install if no command arguments specified (just run `goenv`!)\n`GOENV_AUTO_INSTALL_FLAGS` | | (Note: only works if `GOENV_AUTO_INSTALL` is set to 1) Appends flags to the auto install command (see `goenv install --help` for all available flags)\n`GOENV_RC_FILE` | `$HOME/.goenvrc` | If `GOENV_RC_FILE` is set, it will be modified accordingly.\n`GOENV_PATH_ORDER` | | If `GOENV_PATH_ORDER` is set to `front`, `$GOENV_ROOT/shims` will be prepended to the existing `PATH`.Set `GOENV_PATH_ORDER` to a configuration file named by `GOENV_RC_FILE`(e.g. `~/.goenvrc`), for example `GOENV_PATH_ORDER=front` in `~/.goenvrc`.\n"
        },
        {
          "name": "HOW_IT_WORKS.md",
          "type": "blob",
          "size": 3.23046875,
          "content": "# How It Works\n\nAt a high level, goenv intercepts Go commands using shim\nexecutables injected into your `PATH`, determines which Go version\nhas been specified by your application, and passes your commands along\nto the correct Go installation.\n\n## Understanding PATH\n\nWhen you run all the variety of Go commands using  `go`, your operating system\nsearches through a list of directories to find an executable file with\nthat name. This list of directories lives in an environment variable\ncalled `PATH`, with each directory in the list separated by a colon:\n\n    /usr/local/bin:/usr/bin:/bin\n\nDirectories in `PATH` are searched from left to right, so a matching\nexecutable in a directory at the beginning of the list takes\nprecedence over another one at the end. In this example, the\n`/usr/local/bin` directory will be searched first, then `/usr/bin`,\nthen `/bin`.\n\n## Understanding Shims\n\ngoenv works by inserting a directory of _shims_ at the end of your\n`PATH`, so if you have `go` in `/usr/bin` it will be found first:\n\n    /usr/local/bin:/usr/bin:/bin:~/.goenv/shims\n\nThrough a process called _rehashing_, goenv maintains shims in that\ndirectory to match every `go` command across every installed version\nof Go.\n\nShims are lightweight executables that simply pass your command along\nto goenv. So with goenv installed, when you run `go` your\noperating system will do the following:\n\n* Search your `PATH` for an executable file named `go`\n* Find the goenv shim named `go` at the beginning of your `PATH`\n* Run the shim named `go`, which in turn passes the command along to\n  goenv\n\n## Choosing the Go Version\n\nWhen you execute a shim, goenv determines which Go version to use by\nreading it from the following sources, in this order:\n\n1. The `GOENV_VERSION` environment variable (if specified). You can use\n   the [`goenv shell`](https://github.com/go-nv/goenv/blob/master/COMMANDS.md#goenv-shell) command to set this environment\n   variable in your current shell session.\n\n2. The application-specific `.go-version` file in the current\n   directory (if present). You can modify the current directory's\n   `.go-version` file with the [`goenv local`](https://github.com/go-nv/goenv/blob/master/COMMANDS.md#goenv-local)\n   command.\n\n3. The first `.go-version` file found (if any) by searching each parent\n   directory, until reaching the root of your filesystem.\n\n4. The global `~/.goenv/version` file. You can modify this file using\n   the [`goenv global`](https://github.com/go-nv/goenv/blob/master/COMMANDS.md#goenv-global) command. If the global version\n   file is not present, goenv assumes you want to use the \"system\"\n   Go. (In other words, whatever version would run if goenv isn't present in\n   `PATH`.)\n\n**NOTE:** You can activate multiple versions at the same time, including multiple\nversions of Go simultaneously or per project.\n\n## Locating the Go Installation\n\nOnce goenv has determined which version of Go your application has\nspecified, it passes the command along to the corresponding Go\ninstallation.\n\nEach Go version is installed into its own directory under\n`~/.goenv/versions`.\n\nFor example, you might have these versions installed:\n\n* `~/.goenv/versions/1.6.1/`\n* `~/.goenv/versions/1.6.2/`\n\nAs far as goenv is concerned, version names are simply the directories in\n`~/.goenv/versions`.\n\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 6.171875,
          "content": "# Installation\n\n## Basic GitHub Checkout\n\nThis will get you going with the latest version of goenv and make it\neasy to fork and contribute any changes back upstream.\n\n1. **Check out goenv where you want it installed.**\n   A good place to choose is `$HOME/.goenv` (but you can install it somewhere else).\n\n       git clone https://github.com/go-nv/goenv.git ~/.goenv\n\n2. **Define environment variable `GOENV_ROOT`** to point to the path where\n   goenv repo is cloned and add `$GOENV_ROOT/bin` to your `$PATH` for access\n   to the `goenv` command-line utility.\n\n       echo 'export GOENV_ROOT=\"$HOME/.goenv\"' >> ~/.bash_profile\n       echo 'export PATH=\"$GOENV_ROOT/bin:$PATH\"' >> ~/.bash_profile\n\n    **Zsh note**: Modify your `~/.zshenv` file instead of `~/.bash_profile`.\n\n    **Ubuntu note**: Modify your `~/.bashrc` file instead of `~/.bash_profile`.\n\n3. **Add `goenv init` to your shell** to enable shims, management of `GOPATH` and `GOROOT` and auto-completion.\n   Please make sure `eval \"$(goenv init -)\"` is placed toward the end of the shell\n   configuration file since it manipulates `PATH` during the initialization.\n\n       echo 'eval \"$(goenv init -)\"' >> ~/.bash_profile\n\n    **Zsh note**: Modify your `~/.zshenv` or `~/.zshrc` file instead of `~/.bash_profile`.\n    \n    **Ubuntu note**: Modify your `~/.bashrc` file instead of `~/.bash_profile`.\n    \n    **General warning**: There are some systems where the `BASH_ENV` variable is configured\n    to point to `.bashrc`. On such systems you should almost certainly put the abovementioned line\n    `eval \"$(goenv init -)` into `.bash_profile`, and **not** into `.bashrc`. Otherwise you\n    may observe strange behaviour, such as `goenv` getting into an infinite loop.\n    See pyenv's issue [#264](https://github.com/pyenv/pyenv/issues/264) for details.\n    \n4. **If you want  `goenv` to manage `GOPATH` and `GOROOT` (recommended)**, \n  add `GOPATH` and `GOROOT` to your shell **after `eval \"$(goenv init -)\"`**.\n  \n       echo 'export PATH=\"$GOROOT/bin:$PATH\"' >> ~/.bash_profile\n       echo 'export PATH=\"$PATH:$GOPATH/bin\"' >> ~/.bash_profile\n        \n    **Zsh note**: Modify your `~/.zshenv` or `~/.zshrc` file instead of `~/.bash_profile`.\n    \n    **Ubuntu note**: Modify your `~/.bashrc` file instead of `~/.bash_profile`.\n\n    **General warning**: There are some systems where the `BASH_ENV` variable is configured\n    to point to `.bashrc`. On such systems you should almost certainly put the abovementioned line\n    `eval \"$(goenv init -)` into `.bash_profile`, and **not** into `.bashrc`. Otherwise you\n    may observe strange behaviour, such as `goenv` getting into an infinite loop.\n    See pyenv's issue [#264](https://github.com/pyenv/pyenv/issues/264) for details.\n\n    **Security warning**: You likely want to keep $GOPATH/bin at the end\n    of your $PATH as shown above, rather than at the beginning.  See\n    [#99](https://github.com/go-nv/goenv/issues/99) for details and\n    discussion.\n  \n\n5. **Restart your shell so the path changes take effect.**\n   You can now begin using goenv.\n\n       exec $SHELL\n\n6. **Install Go versions into `$GOENV_ROOT/versions`.**\n   For example, to download and install Go 1.12.0, run:\n\n       goenv install 1.12.0\n\n   **NOTE:** It downloads and places the prebuilt Go binaries provided by Google.\n\n7. **Set goenv global version.**\n   For example, to set the version to Go 1.12.0, run:\n\n       goenv global 1.12.0\n   \nAn example `.zshrc` that is properly configured may look like\n\n```shell\nexport GOENV_ROOT=\"$HOME/.goenv\"\nexport PATH=\"$GOENV_ROOT/bin:$PATH\"\neval \"$(goenv init -)\"\nexport PATH=\"$GOROOT/bin:$PATH\"\nexport PATH=\"$PATH:$GOPATH/bin\"\n```\n   \n## via ZPlug plugin manager for Zsh\n\nAdd the following line to your `.zshrc`:\n\n```zplug \"RiverGlide/zsh-goenv\", from:gitlab```\nThen install the plugin\n~~~ zsh\n  source ~/.zshrc\n  zplug install\n~~~\nThe ZPlug plugin will install and initialise `goenv` and add `goenv` and `goenv-install` to your `PATH`\n   \n## Homebrew on Mac OS X\n\nYou can also install goenv using the [Homebrew](http://brew.sh)\npackage manager for Mac OS X.\n\n    brew update\n    brew install goenv\n\nTo upgrade goenv in the future, use `upgrade` instead of `install`.\n\nAfter installation, you'll need to add `eval \"$(goenv init -)\"` to your profile (as stated in the caveats displayed by Homebrew — to display them again, use `brew info goenv`). You only need to add that to your profile once.\n\nThen follow the rest of the post-installation steps under \"Basic GitHub Checkout\" above, starting with #5 (\"restart your shell so the path changes take effect\").\n\n## Upgrading\n\nIf you've installed goenv using the instructions above, you can\nupgrade your installation at any time using git.\n\nTo upgrade to the latest development version of goenv, use `git pull`:\n\n    cd ~/.goenv && git fetch --all && git pull\n\nTo upgrade to a specific release of goenv, check out the corresponding tag:\n\n    cd ~/.goenv\n    git fetch --all\n    git tag\n    v20160417\n    git checkout v20160417\n\n## Uninstalling goenv\n\nThe simplicity of goenv makes it easy to temporarily disable it, or\nuninstall from the system.\n\n1. To **disable** goenv managing your Go versions, simply remove the\n  `goenv init` line from your shell startup configuration. This will\n  remove goenv shims directory from PATH, and future invocations like\n  `goenv` will execute the system Go version, as before goenv.\n\n  `goenv` will still be accessible on the command line, but your Go\n  apps won't be affected by version switching.\n\n2. To completely **uninstall** goenv, perform step (1) and then remove\n   its root directory. This will **delete all Go versions** that were\n   installed under `` `goenv root`/versions/ `` directory:\n\n        rm -rf `goenv root`\n\n   If you've installed goenv using a package manager, as a final step\n   perform the goenv package removal. For instance, for Homebrew:\n\n        brew uninstall goenv\n        \n## Uninstalling Go Versions\n\nAs time goes on, you will accumulate Go versions in your\n`~/.goenv/versions` directory.\n\nTo remove old Go versions, `goenv uninstall` command to automate\nthe removal process.\n\nAlternatively, simply `rm -rf` the directory of the version you want\nto remove. You can find the directory of a particular Go version\nwith the `goenv prefix` command, e.g. `goenv prefix 1.6.2`.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0986328125,
          "content": "Copyright (c) 2016 Anton Antonov\nCopyright (c) 2013 Yamashita, Yuu\nCopyright (c) 2013 Sam Stephenson\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 2,
          "content": "SHELL:=/bin/bash\n.ONESHELL:\n.PHONY: test test-goenv test-goenv-go-build bats start-fake-go-build-http-server stop-fake-go-build-http-server run-goenv-go-build-tests\nMAKEFLAGS += -s\n\nifeq (test-target,$(firstword $(MAKECMDGOALS)))\n  # use the rest as arguments for \"test-target\"\n  TEST_TARGET_ARGS := $(wordlist 2,$(words $(MAKECMDGOALS)),$(MAKECMDGOALS))\n  # ...and turn them into do-nothing targets\n  $(shell echo $(TEST_TARGET_ARGS):;@:)\n  $(eval $(TEST_TARGET_ARGS):;@:)\nendif\n\ndefault: test\n\ntest: test-goenv test-goenv-go-build\n\n# USAGE: make -- test-target [args..]\ntest-target: bats\n\tset -e; \\\n\tPATH=\"./bats-core/bin:$$PATH\"; \\\n\tif [ -n \"$$GOENV_NATIVE_EXT\" ]; then \\\n\t\tsrc/configure; \\\n\t\tmake -C src; \\\n\tfi; \\\n\tunset $${!GOENV_*}; \\\n\ttest_target=$${test_target:-test}; \\\n\texec bats $(TEST_TARGET_ARGS);\n\ntest-goenv: bats\n\tset -e; \\\n\tPATH=\"./bats-core/bin:$$PATH\"; \\\n\tif [ -n \"$$GOENV_NATIVE_EXT\" ]; then \\\n\t\tsrc/configure; \\\n\t\tmake -C src; \\\n\tfi; \\\n\tunset $${!GOENV_*}; \\\n\ttest_target=$${test_target:-test}; \\\n\texec bats $${CI:+--tap} $$test_target;\n\ntest-goenv-go-build: bats stop-fake-go-build-http-server start-fake-go-build-http-server run-goenv-go-build-tests stop-fake-go-build-http-server\n\nstop-fake-go-build-http-server:\n\tpkill fake_file_server || true\n\nrun-goenv-go-build-tests:\n\tset -e; \\\n\tPATH=\"$$(pwd)/bats-core/bin:$$PATH\"; \\\n\tif [ -n \"$$GOENV_NATIVE_EXT\" ]; then \\\n\t\tsrc/configure; \\\n\t\tmake -C src; \\\n\tfi; \\\n\tunset $${!GOENV_*}; \\\n\ttest_target=$${test_target:-test}; \\\n\tcd plugins/go-build; \\\n\texec bats $${CI:+--tap} $$test_target;\n\nstart-fake-go-build-http-server:\n\tset -e; \\\n\tport=$${port:-8090}; \\\n\tcd plugins/go-build/test; \\\n\t(bash -c \"exec -a fake_file_server python3 fake_file_server.py $$port\") & \\\n\tuntil lsof -Pi :$${port} -sTCP:LISTEN -t >/dev/null; do \\\n\t\techo \"wait\"; \\\n\t\tsleep 2; \\\n\tdone;\n\nbats:\n\tset -e; \\\n\tif [ -d \"$(PWD)/bats-core\" ]; then \\\n\t\techo \"bats-core already exists. Nothing to do\"; \\\n\telse \\\n\t\tgit clone --depth 1 --single-branch --branch=v1.10.0 https://github.com/bats-core/bats-core.git; \\\n\tfi;\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.4873046875,
          "content": "# Go Version Management: goenv\n\n[![PR Checks Status](https://github.com/go-nv/goenv/actions/workflows/pr_checks.yml/badge.svg)](https://github.com/go-nv/goenv/actions/workflows/pr_checks.yml)\n[![Latest Release](https://img.shields.io/github/v/release/go-nv/goenv.svg)](https://github.com/go-nv/goenv/releases/latest)\n[![License](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/go-nv/goenv/blob/main/LICENSE)\n[![Go](https://img.shields.io/badge/Go-%2300ADD8.svg?&logo=go&logoColor=white)](https://go.dev/)\n[![Bash](https://img.shields.io/badge/Bash-4EAA25?logo=gnubash&logoColor=fff)](https://github.com/go-nv/goenv)\n[![Linux](https://img.shields.io/badge/Linux-FCC624?logo=linux&logoColor=black)](https://github.com/go-nv/goenv)\n[![macOS](https://img.shields.io/badge/macOS-000000?logo=macos&logoColor=F0F0F0)](https://github.com/go-nv/goenv)\n\ngoenv aims to be as simple as possible and follow the already established\nsuccessful version management model of [pyenv](https://github.com/pyenv/pyenv) and [rbenv](https://github.com/rbenv/rbenv).\n\nNew go versions are added automatically on a daily CRON schedule.\n\nThis project was cloned from [pyenv](https://github.com/pyenv/pyenv) and modified for Go.\n\n[![asciicast](https://asciinema.org/a/17IT3YiQ56hiJsb2iHpGHlJqj.svg)](https://asciinema.org/a/17IT3YiQ56hiJsb2iHpGHlJqj)\n\n### goenv _does..._\n\n- Let you **change the global Go version** on a per-user basis.\n- Provide support for **per-project Go versions**.\n- Allow you to **override the Go version** with an environment\n  variable.\n- Search commands from **multiple versions of Go at a time**.\n\n### goenv compared to others:\n\n- https://github.com/crsmithdev/goenv depends on Go,\n- https://github.com/moovweb/gvm is a different approach to the problem that's modeled after `nvm`.\n  `goenv` is more simplified.\n\n---\n\n### Hints\n\n#### AWS CodeBuild\n\nThe following snippet can be inserted in your buildspec.yml (or buildspec definition) for AWS CodeBuild. It's recommended to do this during the `pre_build` phase.\n    \n**Side Note:** if you use the below steps, please unset your golang version in the buildspec and run the installer manually.\n\n```yaml\n- BUILD_DIR=$PWD\n- cd /root/.goenv/plugins/go-build/../.. && git pull && cd -\n- cd $BUILD_DIR\n```\n\n---\n\n## Links\n\n- **[How It Works](./HOW_IT_WORKS.md)**\n- **[Installation](./INSTALL.md)**\n- **[Command Reference](./COMMANDS.md)**\n- **[Environment variables](./ENVIRONMENT_VARIABLES.md)**\n- **[Contributing](./CONTRIBUTING.md)**\n- **[Code-of-Conduct](./CODE_OF_CONDUCT.md)**\n"
        },
        {
          "name": "RELEASE_PROCESS.md",
          "type": "blob",
          "size": 0.9404296875,
          "content": "# Release process\n\nReleases are done **automatically** via GitHub actions and Release Drafter.\n \n## Rules\n\n1. Releases are only created from `master`.\n1. `master` is meant to be stable, so before tagging and create a new release, make sure that the CI checks pass.\n1. Releases are GitHub releases.\n1. Releases are following *semantic versioning*.\n1. Releases are to be named in pattern of `X.Y.Z`. The produced binary artifacts contain the `X.Y.Z` in their names.\n1. Changelog must up-to-date with what's going to be released. Check [CHANGELOG](./CHANGELOG.md).\n1. APP_VERSION file **must be updated** to match the draft version to be released (Please run the Pre Release action to create a PR update).\n\n## Flow\n\n1. Create a new GitHub release using https://github.com/go-nv/goenv\n1. `Tag Version` and `Release Title` are going to be in pattern of `vX.Y.Z`.\n1. `Describe this release` (content) is going to link the appropriate [CHANGELOG](./CHANGELOG.md) entry.\n"
        },
        {
          "name": "bin",
          "type": "tree",
          "content": null
        },
        {
          "name": "completions",
          "type": "tree",
          "content": null
        },
        {
          "name": "libexec",
          "type": "tree",
          "content": null
        },
        {
          "name": "plugins",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "src",
          "type": "tree",
          "content": null
        },
        {
          "name": "test",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}