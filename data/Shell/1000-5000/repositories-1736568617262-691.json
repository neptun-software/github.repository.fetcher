{
  "metadata": {
    "timestamp": 1736568617262,
    "page": 691,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjY5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pi-hole/PADD",
      "stars": 1376,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".codespellignore",
          "type": "blob",
          "size": 0.0048828125,
          "content": "padd\n"
        },
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.3134765625,
          "content": "# EditorConfig is awesome: https://editorconfig.org/\n\n# top-most EditorConfig file\nroot = true\n\n[*]\ninsert_final_newline = true\nindent_style = space\nindent_size = tab\ntab_width = 4\ncharset = utf-8\ntrim_trailing_whitespace = true\n\n[*.yml]\nindent_style = space\nindent_size = 2\n\n[*.md]\nindent_style = space\nindent_size = 2\n\n"
        },
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.369140625,
          "content": "# Auto detect text files and perform LF normalization\n* text=auto\n\n# Custom for Visual Studio\n*.cs     diff=csharp\n\n# Standard to msysgit\n*.doc\t diff=astextplain\n*.DOC\t diff=astextplain\n*.docx diff=astextplain\n*.DOCX diff=astextplain\n*.dot  diff=astextplain\n*.DOT  diff=astextplain\n*.pdf  diff=astextplain\n*.PDF\t diff=astextplain\n*.rtf\t diff=astextplain\n*.RTF\t diff=astextplain\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.697265625,
          "content": "# Temporary files generated by padd.sh #\n########################################\npiHoleVersion\n\n# Compiled source #\n###################\n*.com\n*.class\n*.dll\n*.exe\n*.o\n*.so\n\n# Packages #\n############\n# it's better to unpack these files and commit the raw source\n# git has its own built in compression methods\n*.7z\n*.dmg\n*.gz\n*.iso\n*.jar\n*.rar\n*.tar\n*.zip\n\n# Logs and databases #\n######################\n*.log\n*.sql\n*.sqlite\n\n# OS generated files #\n######################\n.DS_Store\n.DS_Store?\n._*\n.Spotlight-V100\n.Trashes\nehthumbs.db\nThumbs.db\n\n# Web / Atom Files #\n####################\n*.ini\n.remote-sync.json\nsftp-config.json\n.vscode\nold\n*.sublime-*\n\n# Testing Files #\n#################\nnew\\.sh\nnet-test.sh\npadd.py\n"
        },
        {
          "name": ".yamllint.conf",
          "type": "blob",
          "size": 0.0546875,
          "content": "rules:\n  line-length: disable\n  document-start: disable\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.6982421875,
          "content": "# PADD\n\nPADD (formerly Chronometer2) is a more expansive version of the original chronometer.sh that is included with [Pi-Hole](https://pi-hole.net). PADD provides in-depth information about your Pi-hole.\n\n![PADD Screenshot](https://pi-hole.github.io/graphics/Screenshots/padd.png)\n\n***Note:** PADD has been adopted by the Pi-hole team, thanks to JPMCK for creating this helpful tool!\n\n## Setup PADD\n*More in-depth information about setting up PADD can be found in this repo’s [wiki](https://github.com/pi-hole/PADD/wiki/Setup).*\n\n- Get a copy of PADD by running:\n\n```bash\ncd ~\nwget -O padd.sh https://install.padd.sh\n```\nor\n```bash\ncd ~\ncurl -sSL https://install.padd.sh -o padd.sh\n```\n\n- Make PADD executable by running\n\n```bash\nsudo chmod +x padd.sh\n```\n\n- Set PADD to auto run by adding the following to the end of `~/.bashrc`:\n\n```bash\n# Run PADD\n# If we’re on the PiTFT screen (ssh is xterm)\nif [ \"$TERM\" == \"linux\" ] ; then\n  while :\n  do\n    ./padd.sh\n    sleep 1\n  done\nfi\n```\n\nOne line version\n\n```bash\ncd ~ ; echo \"if [ \\\"\\$TERM\\\" == \\\"linux\\\" ] ; then\\n  while :\\n  do\\n    ./padd.sh\\n    sleep 1\\n  done\\nfi\" | tee ~/.bashrc -a\n```\n\n- Reboot your Pi-Hole by running `sudo reboot`. PADD should now run when your Pi-Hole has completed booting.\n\n## Updating PADD\n- Simply run\n\n```bash\n./padd.sh -u\n```\n\n- or run the same commands you used to install\n\n```bash\ncd ~\nwget -O padd.sh https://install.padd.sh\n```\n```bash\ncd ~\ncurl -sSL https://install.padd.sh -o padd.sh\n```\n\n## Running Pi-hole in a Docker Container\nIf you're running Pi-hole in the official Docker Container, `padd.sh` is pre-installed and named `padd`. It can be used with the following command:\n```bash\ndocker exec -it <container_name> padd [padd_options]\n```\n"
        },
        {
          "name": "padd.sh",
          "type": "blob",
          "size": 65.2666015625,
          "content": "#!/usr/bin/env sh\n# shellcheck disable=SC1091\n\n# Ignore warning about `local` being undefinded in POSIX\n# shellcheck disable=SC3043\n# https://github.com/koalaman/shellcheck/wiki/SC3043#exceptions\n\n# PADD\n# A more advanced version of the chronometer provided with Pihole\n\n# SETS LOCALE\nexport LC_ALL=C\nexport LC_NUMERIC=C\n\n############################################ VARIABLES #############################################\n\n# VERSION\npadd_version=\"v3.11.1\"\n\n# LastChecks\nLastCheckVersionInformation=$(date +%s)\nLastCheckNetworkInformation=$(date +%s)\nLastCheckSummaryInformation=$(date +%s)\nLastCheckPiholeInformation=$(date +%s)\nLastCheckSystemInformation=$(date +%s)\nLastCheckPADDInformation=$(date +%s)\n\n# CORES\ncore_count=$(nproc --all 2> /dev/null)\n\n# COLORS\nCSI=\"$(printf '\\033')[\"  # Control Sequence Introducer\nred_text=\"${CSI}91m\"     # Red\ngreen_text=\"${CSI}92m\"   # Green\nyellow_text=\"${CSI}93m\"  # Yellow\nblue_text=\"${CSI}94m\"    # Blue\nmagenta_text=\"${CSI}95m\" # Magenta\ncyan_text=\"${CSI}96m\"    # Cyan\nreset_text=\"${CSI}0m\"    # Reset to default\nclear_line=\"${CSI}0K\"    # Clear the current line to the right to wipe any artifacts remaining from last print\n\n# STYLES\nbold_text=\"${CSI}1m\"\nblinking_text=\"${CSI}5m\"\ndim_text=\"${CSI}2m\"\n\n# CHECK BOXES\ncheck_box_good=\"[${green_text}✓${reset_text}]\"       # Good\ncheck_box_bad=\"[${red_text}✗${reset_text}]\"          # Bad\ncheck_box_question=\"[${yellow_text}?${reset_text}]\"  # Question / ?\ncheck_box_info=\"[${yellow_text}i${reset_text}]\"      # Info / i\n\n# PICO STATUSES\npico_status_ok=\"${check_box_good} Sys. OK\"\npico_status_update=\"${check_box_info} Update\"\npico_status_hot=\"${check_box_bad} Sys. Hot!\"\npico_status_off=\"${check_box_info} No blck\"\npico_status_ftl_down=\"${check_box_bad} FTL Down\"\npico_status_dns_down=\"${check_box_bad} DNS Down\"\npico_status_unknown=\"${check_box_question} Stat. Unk.\"\n\n# MINI STATUS\nmini_status_ok=\"${check_box_good} System OK\"\nmini_status_update=\"${check_box_info} Update avail.\"\nmini_status_hot=\"${check_box_bad} System is hot!\"\nmini_status_off=\"${check_box_info} No blocking!\"\nmini_status_ftl_down=\"${check_box_bad} FTL down!\"\nmini_status_dns_down=\"${check_box_bad} DNS off!\"\nmini_status_unknown=\"${check_box_question} Status unknown\"\n\n# REGULAR STATUS\nfull_status_ok=\"${check_box_good} System is healthy\"\nfull_status_update=\"${check_box_info} Updates are available\"\nfull_status_hot=\"${check_box_bad} System is hot!\"\nfull_status_off=\"${check_box_info} Blocking is disabled\"\nfull_status_ftl_down=\"${check_box_bad} FTL is down!\"\nfull_status_dns_down=\"${check_box_bad} DNS is off!\"\nfull_status_unknown=\"${check_box_question} Status unknown!\"\n\n# MEGA STATUS\nmega_status_ok=\"${check_box_good} Your system is healthy\"\nmega_status_update=\"${check_box_info} Updates are available\"\nmega_status_hot=\"${check_box_bad} Your system is hot!\"\nmega_status_off=\"${check_box_info} Blocking is disabled!\"\nmega_status_ftl_down=\"${check_box_bad} FTLDNS service is not running!\"\nmega_status_dns_down=\"${check_box_bad} Pi-hole's DNS server is off!\"\nmega_status_unknown=\"${check_box_question} Unable to determine Pi-hole status!\"\n\n# TINY STATUS\ntiny_status_ok=\"${check_box_good} System is healthy\"\ntiny_status_update=\"${check_box_info} Updates are available\"\ntiny_status_hot=\"${check_box_bad} System is hot!\"\ntiny_status_off=\"${check_box_info} Blocking is disabled\"\ntiny_status_ftl_down=\"${check_box_bad} FTL is down!\"\ntiny_status_dns_down=\"${check_box_bad} DNS is off!\"\ntiny_status_unknown=\"${check_box_question} Status unknown!\"\n\n# Text only \"logos\"\npadd_text=\"${green_text}${bold_text}PADD${reset_text}\"\n\n# PADD logos - regular and retro\npadd_logo_1=\"${bold_text}${green_text} __      __  __   ${reset_text}\"\npadd_logo_2=\"${bold_text}${green_text}|__) /\\\\ |  \\\\|  \\\\  ${reset_text}\"\npadd_logo_3=\"${bold_text}${green_text}|   /--\\\\|__/|__/  ${reset_text}\"\npadd_logo_retro_1=\"${bold_text} ${yellow_text}_${green_text}_      ${blue_text}_${magenta_text}_  ${yellow_text}_${green_text}_   ${reset_text}\"\npadd_logo_retro_2=\"${bold_text}${yellow_text}|${green_text}_${blue_text}_${cyan_text}) ${red_text}/${yellow_text}\\\\ ${blue_text}|  ${red_text}\\\\${yellow_text}|  ${cyan_text}\\\\  ${reset_text}\"\npadd_logo_retro_3=\"${bold_text}${green_text}|   ${red_text}/${yellow_text}-${green_text}-${blue_text}\\\\${cyan_text}|${magenta_text}_${red_text}_${yellow_text}/${green_text}|${blue_text}_${cyan_text}_${magenta_text}/  ${reset_text}\"\n\n\n############################################# GETTERS ##############################################\n\nGetFTLData() {\n    local ftl_port data\n    ftl_port=$(getFTLAPIPort)\n    if [ -n \"$ftl_port\" ]; then\n      # Send command to FTL and ask to quit when finished\n      data=\"$(echo \">$1 >quit\" | nc 127.0.0.1 \"${ftl_port}\")\"\n      echo \"${data}\"\n    fi\n}\n\nGetSummaryInformation() {\n  summary=$(GetFTLData \"stats\")\n  cache_info=$(GetFTLData \"cacheinfo\")\n\n  clients=$(echo \"${summary}\" | grep \"unique_clients\" | grep -Eo \"[0-9]+$\")\n\n  blocking_status=$(echo \"${summary}\" | grep \"status\" | grep -Eo \"enabled|disabled|unknown\" )\n\n  domains_being_blocked_raw=$(echo \"${summary}\" | grep \"domains_being_blocked\" | grep -Eo \"[0-9]+$\")\n  domains_being_blocked=$(printf \"%.f\" \"${domains_being_blocked_raw}\")\n\n  dns_queries_today_raw=$(echo \"$summary\" | grep \"dns_queries_today\" | grep -Eo \"[0-9]+$\")\n  dns_queries_today=$(printf \"%.f\" \"${dns_queries_today_raw}\")\n\n  ads_blocked_today_raw=$(echo \"$summary\" | grep \"ads_blocked_today\" | grep -Eo \"[0-9]+$\")\n  ads_blocked_today=$(printf \"%.f\" \"${ads_blocked_today_raw}\")\n\n  ads_percentage_today_raw=$(echo \"$summary\" | grep \"ads_percentage_today\" | grep -Eo \"[0-9.]+$\")\n  ads_percentage_today=$(printf \"%.1f\" \"${ads_percentage_today_raw}\")\n\n  cache_size=$(echo \"$cache_info\" | grep \"cache-size\" | grep -Eo \"[0-9.]+$\")\n  cache_deletes=$(echo \"$cache_info\" | grep \"cache-live-freed\" | grep -Eo \"[0-9.]+$\")\n  cache_inserts=$(echo \"$cache_info\"| grep \"cache-inserted\" | grep -Eo \"[0-9.]+$\")\n\n  latest_blocked_raw=$(GetFTLData recentBlocked)\n\n  top_blocked_raw=$(GetFTLData \"top-ads (1)\" | awk '{print $3}')\n\n  top_domain_raw=$(GetFTLData \"top-domains (1)\" | awk '{print $3}')\n\n  top_client_raw=$(GetFTLData \"top-clients (1)\" | awk '{print $4}')\n  if [ -z \"${top_client_raw}\" ]; then\n    # if no hostname was supplied, use IP\n    top_client_raw=$(GetFTLData \"top-clients (1)\" | awk '{print $3}')\n  fi\n}\n\nGetSystemInformation() {\n  # System uptime\n    system_uptime_raw=$(uptime)\n\n  # reset $cpu variable\n  unset cpu\n\n  # CPU temperature\n  if [ -d \"/sys/devices/platform/coretemp.0/hwmon/\" ]; then\n    cpu=$(cat \"$(find /sys/devices/platform/coretemp.0/hwmon/ -maxdepth 2 -name \"temp1_input\" 2>/dev/null | head -1)\" 2>/dev/null)\n  fi\n  if [ -z \"${cpu}\" ] && [ -f /sys/class/thermal/thermal_zone0/temp ]; then\n    cpu=$(cat /sys/class/thermal/thermal_zone0/temp)\n  fi\n  if [ -z \"${cpu}\" ] && [ -f /sys/class/hwmon/hwmon0/temp1_input ]; then\n    cpu=$(cat /sys/class/hwmon/hwmon0/temp1_input)\n  fi\n  if [ -z \"${cpu}\" ]; then\n    cpu=0\n  fi\n\n  # Convert CPU temperature to correct unit\n  if [ \"${TEMPERATUREUNIT}\" = \"F\" ]; then\n    temperature=\"$(printf %.1f \"$(echo \"${cpu}\" | awk '{print $1 * 9 / 5000 + 32}')\")°F\"\n  elif [ \"${TEMPERATUREUNIT}\" = \"K\" ]; then\n    temperature=\"$(printf %.1f \"$(echo \"${cpu}\" | awk '{print $1 / 1000 + 273.15}')\")°K\"\n  else\n    temperature=\"$(printf %.1f \"$(echo \"${cpu}\" | awk '{print $1 / 1000}')\")°C\"\n  fi\n\n  # CPU load, heatmap\n  cpu_load_1=$(awk '{print $1}' < /proc/loadavg)\n  cpu_load_5=$(awk '{print $2}' < /proc/loadavg)\n  cpu_load_15=$(awk '{print $3}' < /proc/loadavg)\n  cpu_load_1_heatmap=$(HeatmapGenerator \"${cpu_load_1}\" \"${core_count}\")\n  cpu_load_5_heatmap=$(HeatmapGenerator \"${cpu_load_5}\" \"${core_count}\")\n  cpu_load_15_heatmap=$(HeatmapGenerator \"${cpu_load_15}\" \"${core_count}\")\n  cpu_percent=$(printf %.1f \"$(echo \"${cpu_load_1} ${core_count}\" | awk '{print ($1 / $2) * 100}')\")\n\n  # CPU temperature heatmap\n  hot_flag=false\n  # If we're getting close to 85°C... (https://www.raspberrypi.org/blog/introducing-turbo-mode-up-to-50-more-performance-for-free/)\n  if [ ${cpu} -gt 80000 ]; then\n    temp_heatmap=${blinking_text}${red_text}\n    # set flag to change the status message in SetStatusMessage()\n    hot_flag=true\n  elif [ ${cpu} -gt 70000 ]; then\n    temp_heatmap=${magenta_text}\n  elif [ ${cpu} -gt 60000 ]; then\n    temp_heatmap=${blue_text}\n  else\n    temp_heatmap=${cyan_text}\n  fi\n\n  # Memory use, heatmap and bar\n  memory_percent=$(awk '/MemTotal:/{total=$2} /MemFree:/{free=$2} /Buffers:/{buffers=$2} /^Cached:/{cached=$2} END {printf \"%.1f\", (total-free-buffers-cached)*100/total}' '/proc/meminfo')\n  memory_heatmap=$(HeatmapGenerator \"${memory_percent}\")\n\n  # Get product name and family\n  product_name=\n  product_family=\n  if [ -f /sys/devices/virtual/dmi/id/product_name ]; then\n    # Get product name, remove possible null byte\n    product_name=$(tr -d '\\0' < /sys/devices/virtual/dmi/id/product_name)\n  fi\n  if [ -f /sys/devices/virtual/dmi/id/product_family ]; then\n    # Get product family, remove possible null byte\n    product_family=$(tr -d '\\0' < /sys/devices/virtual/dmi/id/product_family)\n  fi\n\n  board_vendor=\n  board_name=\n  if [ -f /sys/devices/virtual/dmi/id/board_vendor ]; then\n    board_vendor=$(tr -d '\\0' < /sys/devices/virtual/dmi/id/board_vendor)\n  fi\n  if [ -f /sys/devices/virtual/dmi/id/board_name ]; then\n    board_name=\"$(tr -d '\\0' < /sys/devices/virtual/dmi/id/board_name)\"\n  fi\n\n\n  if [ -n \"$product_name\" ] || [ -n \"$product_family\" ]; then\n    if echo \"$product_family\" | grep -q \"$product_name\"; then\n      # If product_name is contained in product_family, only show product_family\n      sys_model=\"${product_family}\"\n    else\n      # If product_name is not contained in product_family, both are shown\n      sys_model=\"${product_family} ${product_name}\"\n    fi\n  elif [ -f /sys/firmware/devicetree/base/model ]; then\n    sys_model=$(tr -d '\\0' < /sys/firmware/devicetree/base/model)\n  elif [ -n \"$board_vendor\" ] || [ -n \"$board_name\" ]; then\n    sys_model=\"${board_vendor} ${board_name}\"\n  elif [ -f /tmp/sysinfo/model ]; then\n    sys_model=$(tr -d '\\0' < /tmp/sysinfo/model)\n  elif [ -n \"${DOCKER_VERSION}\" ]; then\n    # Docker image. DOCKER_VERSION is read from /etc/pihole/versions\n    sys_model=\"Container\"\n  fi\n\n  # Cleaning device model from useless OEM information\n  sys_model=$(filterModel \"${sys_model}\")\n\n  if [  -z \"$sys_model\" ]; then\n    sys_model=\"Unknown\"\n  fi\n}\n\nGetNetworkInformation() {\n  # Get pi IPv4 address\n  pi_ip4_addrs=\"$(ip addr | grep 'inet ' | grep -v '127.0.0.1/8' | awk '{print $2}' | cut -f1 -d'/' |wc -l)\"\n  if [ \"${pi_ip4_addrs}\" -eq 0 ]; then\n    # No IPv4 address available\n    pi_ip4_addr=\"N/A\"\n  elif [ \"${pi_ip4_addrs}\" -eq 1 ]; then\n    # One IPv4 address available\n    pi_ip4_addr=\"$(ip addr | grep 'inet ' | grep -v '127.0.0.1/8' | awk '{print $2}' | cut -f1 -d'/' | head -n 1)\"\n  else\n    # More than one IPv4 address available\n    pi_ip4_addr=\"$(ip addr | grep 'inet ' | grep -v '127.0.0.1/8' | awk '{print $2}' | cut -f1 -d'/' | head -n 1)+\"\n  fi\n\n  # Get pi IPv6 address\n  pi_ip6_addrs=\"$(ip addr | grep 'inet6 ' | grep -v '::1/128' | awk '{print $2}' | cut -f1 -d'/' | wc -l)\"\n  if [ \"${pi_ip6_addrs}\" -eq 0 ]; then\n    # No IPv6 address available\n    pi_ip6_addr=\"N/A\"\n    ipv6_check_box=${check_box_bad}\n  elif [ \"${pi_ip6_addrs}\" -eq 1 ]; then\n    # One IPv6 address available\n    pi_ip6_addr=\"$(ip addr | grep 'inet6 ' | grep -v '::1/128' | awk '{print $2}' | cut -f1 -d'/' | head -n 1)\"\n    ipv6_check_box=${check_box_good}\n  else\n    # More than one IPv6 address available\n    pi_ip6_addr=\"$(ip addr | grep 'inet6 ' | grep -v '::1/128' | awk '{print $2}' | cut -f1 -d'/' | head -n 1)+\"\n    ipv6_check_box=${check_box_good}\n  fi\n\n  # Get hostname and gateway\n  pi_hostname=$(hostname)\n\n  full_hostname=${pi_hostname}\n  # does the Pi-hole have a domain set?\n  if [ -n \"${PIHOLE_DOMAIN+x}\" ]; then\n    # is Pi-hole acting as DHCP server?\n    if [ \"${DHCP_ACTIVE}\" = \"true\" ]; then\n      count=${pi_hostname}\".\"${PIHOLE_DOMAIN}\n      count=${#count}\n      if [ \"${count}\" -lt \"18\" ]; then\n        full_hostname=${pi_hostname}\".\"${PIHOLE_DOMAIN}\n      fi\n    fi\n  fi\n\n  # Get the DNS count (from pihole -c)\n  dns_count=\"0\"\n  [ -n \"${PIHOLE_DNS_1}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_2}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_3}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_4}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_5}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_6}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_7}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_8}\" ] && dns_count=$((dns_count+1))\n  [ -n \"${PIHOLE_DNS_9}\" ] && dns_count=$((dns_count+1))\n\n  # if there's only one DNS server\n  if [ ${dns_count} -eq 1 ]; then\n      dns_information=\"1 server\"\n  else\n    dns_information=\"${dns_count} servers\"\n  fi\n\n  # Is Pi-Hole acting as the DHCP server?\n  if [ \"${DHCP_ACTIVE}\" = \"true\" ]; then\n    dhcp_status=\"Enabled\"\n    dhcp_info=\" Range:    ${DHCP_START} - ${DHCP_END}\"\n    dhcp_heatmap=${green_text}\n    dhcp_check_box=${check_box_good}\n\n    # Is DHCP handling IPv6?\n    # DHCP_IPv6 is set in setupVars.conf\n    # shellcheck disable=SC2154\n    if [ \"${DHCP_IPv6}\" = \"true\" ]; then\n      dhcp_ipv6_status=\"Enabled\"\n      dhcp_ipv6_heatmap=${green_text}\n      dhcp_ipv6_check_box=${check_box_good}\n    else\n      dhcp_ipv6_status=\"Disabled\"\n      dhcp_ipv6_heatmap=${red_text}\n      dhcp_ipv6_check_box=${check_box_bad}\n    fi\n  else\n    dhcp_status=\"Disabled\"\n    dhcp_heatmap=${red_text}\n    dhcp_check_box=${check_box_bad}\n\n    # if the DHCP Router variable isn't set\n    if [ -z ${DHCP_ROUTER+x} ]; then\n      DHCP_ROUTER=$(GetFTLData \"gateway\" | awk '{ printf $1 }')\n    fi\n\n    dhcp_info=\" Router:   ${DHCP_ROUTER}\"\n    dhcp_heatmap=${red_text}\n    dhcp_check_box=${check_box_bad}\n\n    dhcp_ipv6_status=\"N/A\"\n    dhcp_ipv6_heatmap=${yellow_text}\n    dhcp_ipv6_check_box=${check_box_question}\n  fi\n\n  # DNSSEC\n  if [ \"${DNSSEC}\" = \"true\" ]; then\n    dnssec_status=\"Enabled\"\n    dnssec_heatmap=${green_text}\n  else\n    dnssec_status=\"Disabled\"\n    dnssec_heatmap=${red_text}\n  fi\n\n  # Conditional forwarding\n  if [ \"${CONDITIONAL_FORWARDING}\" = \"true\" ] || [ \"${REV_SERVER}\" = \"true\" ]; then\n    conditional_forwarding_status=\"Enabled\"\n    conditional_forwarding_heatmap=${green_text}\n  else\n    conditional_forwarding_status=\"Disabled\"\n    conditional_forwarding_heatmap=${red_text}\n  fi\n\n  #Default interface data\n  def_iface_data=$(GetFTLData \"interfaces\" | head -n1)\n  iface_name=\"$(echo \"$def_iface_data\" | awk '{print $1}')\"\n  tx_bytes=\"$(echo \"$def_iface_data\" | awk '{print $4}')\"\n  rx_bytes=\"$(echo \"$def_iface_data\" | awk '{print $5}')\"\n}\n\nGetPiholeInformation() {\n  # Get FTL status\n\n  # Get FTL's current PID\n  ftlPID=\"$(getFTLPID)\"\n\n  # If FTL is not running (getFTLPID returns -1), set all variables to \"not running\"\n  ftl_down_flag=false\n  if [ \"${ftlPID}\" = \"-1\" ]; then\n    ftl_status=\"Not running\"\n    ftl_heatmap=${red_text}\n    ftl_check_box=${check_box_bad}\n    # set flag to change the status message in SetStatusMessage()\n    ftl_down_flag=true\n    ftl_cpu=\"N/A\"\n    ftl_mem_percentage=\"N/A\"\n  else\n    ftl_status=\"Running\"\n    ftl_heatmap=${green_text}\n    ftl_check_box=${check_box_good}\n    # Get FTL CPU and memory usage\n    ftl_cpu=\"$(ps h -p \"${ftlPID}\" -o %cpu | tr -d '[:space:]')%\"\n    ftl_mem_percentage=\"$(ps h -p \"${ftlPID}\" -o %mem | tr -d '[:space:]')%\"\n    # Get Pi-hole (blocking) status\n    ftl_dns_port=$(GetFTLData \"dns-port\")\n  fi\n\n  # ${ftl_dns_port} == 0 DNS server part of dnsmasq disabled, ${ftl_status} == \"Not running\" no ftlPID found\n  dns_down_flag=false\n  if [ \"${ftl_dns_port}\" = 0 ] || [ \"${ftl_status}\" = \"Not running\" ]; then\n    dns_status=\"DNS offline\"\n    dns_heatmap=${red_text}\n    dns_check_box=${check_box_bad}\n    # set flag to change the status message in SetStatusMessage()\n    dns_down_flag=true\n  else\n    dns_check_box=${check_box_good}\n    dns_status=\"Active\"\n    dns_heatmap=${green_text}\nfi\n}\n\nGetVersionInformation() {\n  # Check if version status has been saved\n  # all info is sourced from /etc/pihole/versions\n\n  out_of_date_flag=false\n\n  # If PADD is running inside docker, immediately return without checking for updated component versions\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    docker_version_converted=\"$(VersionConverter \"${DOCKER_VERSION}\")\"\n    docker_version_latest_converted=\"$(VersionConverter \"${GITHUB_DOCKER_VERSION}\")\"\n\n    # Note: the version comparison will fail for any Docker tag not following a 'YYYY.MM.VV' scheme\n    #       e.g. 'nightly', 'beta', 'v6-pre-alpha' and might set a false out_of_date_flag\n    #       As those versions are not meant to be used in production, we ignore this small bug\n    if [ \"${docker_version_converted}\" -lt \"${docker_version_latest_converted}\" ]; then\n      out_of_date_flag=\"true\"\n      docker_version_heatmap=${red_text}\n    else\n      docker_version_heatmap=${green_text}\n    fi\n    return\n  fi\n\n  # Gather CORE version information...\n  # Extract vx.xx or vx.xx.xxx version\n  CORE_VERSION=\"$(echo \"${CORE_VERSION}\" | grep -oE '^v[0-9]+([.][0-9]+){1,2}')\"\n  if [ \"${CORE_BRANCH}\" = \"master\" ]; then\n    core_version_converted=\"$(VersionConverter \"${CORE_VERSION}\")\"\n    core_version_latest_converted=$(VersionConverter \"${GITHUB_CORE_VERSION}\")\n\n    if [ \"${core_version_converted}\" -lt \"${core_version_latest_converted}\" ]; then\n      out_of_date_flag=\"true\"\n      core_version_heatmap=${red_text}\n    else\n      core_version_heatmap=${green_text}\n    fi\n\n  else\n    # Custom branch\n    if [ -z \"${CORE_BRANCH}\"  ]; then\n      # Branch name is empty, something went wrong\n      core_version_heatmap=${red_text}\n      CORE_VERSION=\"?\"\n    else\n      if [ \"${CORE_HASH}\" = \"${GITHUB_CORE_HASH}\" ]; then\n        # up-to-date\n        core_version_heatmap=${green_text}\n      else\n        # out-of-date\n        out_of_date_flag=\"true\"\n        core_version_heatmap=${red_text}\n      fi\n      # shorten common branch names (fix/, tweak/, new/)\n      # use the first 7 characters of the branch name as version\n      CORE_VERSION=\"$(printf '%s' \"$CORE_BRANCH\" | sed 's/fix\\//f\\//;s/new\\//n\\//;s/tweak\\//t\\//' | cut -c 1-7)\"\n    fi\n  fi\n\n  # Gather web version information...\n  # Extract vx.xx or vx.xx.xxx version\n  if [ \"$INSTALL_WEB_INTERFACE\" = true ]; then\n    WEB_VERSION=\"$(echo \"${WEB_VERSION}\" | grep -oE '^v[0-9]+([.][0-9]+){1,2}')\"\n    if [ \"${WEB_BRANCH}\" = \"master\" ]; then\n      web_version_converted=\"$(VersionConverter \"${WEB_VERSION}\")\"\n      web_version_latest_converted=$(VersionConverter \"${GITHUB_WEB_VERSION}\")\n\n      if [ \"${web_version_converted}\" -lt \"${web_version_latest_converted}\" ]; then\n        out_of_date_flag=\"true\"\n        web_version_heatmap=${red_text}\n      else\n        web_version_heatmap=${green_text}\n      fi\n\n    else\n    # Custom branch\n      if [ -z \"${WEB_BRANCH}\"  ]; then\n        # Branch name is empty, something went wrong\n        web_version_heatmap=${red_text}\n        WEB_VERSION=\"?\"\n      else\n        if [ \"${WEB_HASH}\" = \"${GITHUB_WEB_HASH}\" ]; then\n          # up-to-date\n          web_version_heatmap=${green_text}\n        else\n          # out-of-date\n          out_of_date_flag=\"true\"\n          web_version_heatmap=${red_text}\n        fi\n        # shorten common branch names (fix/, tweak/, new/)\n        # use the first 7 characters of the branch name as version\n        WEB_VERSION=\"$(printf '%s' \"$WEB_BRANCH\" | sed 's/fix\\//f\\//;s/new\\//n\\//;s/tweak\\//t\\//' | cut -c 1-7)\"\n      fi\n    fi\n  else\n    # Web interface not installed\n    WEB_VERSION=\"N/A\"\n    web_version_heatmap=${yellow_text}\n  fi\n\n  # Gather FTL version information...\n  # Extract vx.xx or vx.xx.xxx version\n  FTL_VERSION=\"$(echo \"${FTL_VERSION}\" | grep -oE '^v[0-9]+([.][0-9]+){1,2}')\"\n  if [ \"${FTL_BRANCH}\" = \"master\" ]; then\n    ftl_version_converted=\"$(VersionConverter \"${FTL_VERSION}\")\"\n    ftl_version_latest_converted=$(VersionConverter \"${GITHUB_FTL_VERSION}\")\n\n    if [ \"${ftl_version_converted}\" -lt \"${ftl_version_latest_converted}\" ]; then\n      out_of_date_flag=\"true\"\n      ftl_version_heatmap=${red_text}\n    else\n      ftl_version_heatmap=${green_text}\n    fi\n  else\n    # Custom branch\n    if [ -z \"${FTL_BRANCH}\"  ]; then\n      # Branch name is empty, something went wrong\n      ftl_version_heatmap=${red_text}\n      FTL_VERSION=\"?\"\n    else\n      if [ \"${FTL_HASH}\" = \"${GITHUB_FTL_HASH}\" ]; then\n        # up-to-date\n        ftl_version_heatmap=${green_text}\n      else\n        # out-of-date\n        out_of_date_flag=\"true\"\n        ftl_version_heatmap=${red_text}\n      fi\n      # shorten common branch names (fix/, tweak/, new/)\n      # use the first 7 characters of the branch name as version\n      FTL_VERSION=\"$(printf '%s' \"$FTL_BRANCH\" | sed 's/fix\\//f\\//;s/new\\//n\\//;s/tweak\\//t\\//' | cut -c 1-7)\"\n    fi\n  fi\n\n}\n\nGetPADDInformation() {\n  # If PADD is running inside docker, immediately return without checking for an update\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    return\n  fi\n\n  # PADD version information...\n  padd_version_latest=\"$(curl --silent https://api.github.com/repos/pi-hole/PADD/releases/latest | grep '\"tag_name\":' | awk -F \\\" '{print $4}')\"\n  # is PADD up-to-date?\n  padd_out_of_date_flag=false\n  if [ -z \"${padd_version_latest}\" ]; then\n    padd_version_heatmap=${yellow_text}\n  else\n    padd_version_latest_converted=\"$(VersionConverter \"${padd_version_latest}\")\"\n    padd_version_converted=$(VersionConverter \"${padd_version}\")\n\n    if [ \"${padd_version_converted}\" -lt \"${padd_version_latest_converted}\" ]; then\n      padd_out_of_date_flag=\"true\"\n      padd_version_heatmap=${red_text}\n    else\n      # local and remote PADD version match or local is newer\n      padd_version_heatmap=${green_text}\n    fi\n  fi\n}\n\nGenerateSizeDependendOutput() {\n  if [ \"$1\" = \"pico\" ] || [ \"$1\" = \"nano\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 9 \"color\")\n\n  elif  [ \"$1\" = \"micro\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 10 \"color\")\n\n  elif [ \"$1\" = \"mini\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 20 \"color\")\n\n    latest_blocked=$(truncateString \"$latest_blocked_raw\" 29)\n    top_blocked=$(truncateString \"$top_blocked_raw\" 29)\n\n  elif [ \"$1\" = \"tiny\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 30 \"color\")\n\n    latest_blocked=$(truncateString \"$latest_blocked_raw\" 41)\n    top_blocked=$(truncateString \"$top_blocked_raw\" 41)\n    top_domain=$(truncateString \"$top_domain_raw\" 41)\n    top_client=$(truncateString \"$top_client_raw\" 41)\n\n  elif [ \"$1\" = \"regular\" ] || [ \"$1\" = \"slim\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 40 \"color\")\n\n    latest_blocked=$(truncateString \"$latest_blocked_raw\" 48)\n    top_blocked=$(truncateString \"$top_blocked_raw\" 48)\n    top_domain=$(truncateString \"$top_domain_raw\" 48)\n    top_client=$(truncateString \"$top_client_raw\" 48)\n\n\n  elif [ \"$1\" = \"mega\" ]; then\n    ads_blocked_bar=$(BarGenerator \"$ads_percentage_today\" 30 \"color\")\n\n    latest_blocked=$(truncateString \"$latest_blocked_raw\" 68)\n    top_blocked=$(truncateString \"$top_blocked_raw\" 68)\n    top_domain=$(truncateString \"$top_domain_raw\" 68)\n    top_client=$(truncateString \"$top_client_raw\" 68)\n\n  fi\n\n  # System uptime\n  if [ \"$1\" = \"pico\" ] || [ \"$1\" = \"nano\" ] || [ \"$1\" = \"micro\" ]; then\n    system_uptime=$(echo \"${system_uptime_raw}\" | awk -F'( |,|:)+' '{if ($7==\"min\") m=$6; else {if ($7~/^day/){if ($9==\"min\") {d=$6;m=$8} else {d=$6;h=$8;m=$9}} else {h=$6;m=$7}}} {print d+0,\"days,\",h+0,\"hours\"}')\n  else\n    system_uptime=$(echo \"${system_uptime_raw}\" | awk -F'( |,|:)+' '{if ($7==\"min\") m=$6; else {if ($7~/^day/){if ($9==\"min\") {d=$6;m=$8} else {d=$6;h=$8;m=$9}} else {h=$6;m=$7}}} {print d+0,\"days,\",h+0,\"hours,\",m+0,\"minutes\"}')\n  fi\n\n  #  Bar generations\n  if [ \"$1\" = \"mini\" ]; then\n    cpu_bar=$(BarGenerator \"${cpu_percent}\" 20)\n    memory_bar=$(BarGenerator \"${memory_percent}\" 20)\n  elif [ \"$1\" = \"tiny\" ]; then\n    cpu_bar=$(BarGenerator \"${cpu_percent}\" 7)\n    memory_bar=$(BarGenerator \"${memory_percent}\" 7)\n  else\n    cpu_bar=$(BarGenerator \"${cpu_percent}\" 10)\n    memory_bar=$(BarGenerator \"${memory_percent}\" 10)\n  fi\n}\n\nSetStatusMessage() {\n    # depending on which flags are set, the \"message field\" shows a different output\n    # 7 messages are possible (from highest to lowest priority):\n\n    #   - System is hot\n    #   - FTLDNS service is not running\n    #   - Pi-hole's DNS server is off (FTL running, but not providing DNS)\n    #   - Unable to determine Pi-hole blocking status\n    #   - Pi-hole blocking disabled\n    #   - Updates are available\n    #   - Everything is fine\n\n\n    if [ \"${hot_flag}\" = true ]; then\n        # Check if CPU temperature is high\n        pico_status=\"${pico_status_hot}\"\n        mini_status=\"${mini_status_hot} ${blinking_text}${red_text}${temperature}${reset_text}\"\n        tiny_status=\"${tiny_status_hot} ${blinking_text}${red_text}${temperature}${reset_text}\"\n        full_status=\"${full_status_hot} ${blinking_text}${red_text}${temperature}${reset_text}\"\n        mega_status=\"${mega_status_hot} ${blinking_text}${red_text}${temperature}${reset_text}\"\n\n    elif [ \"${ftl_down_flag}\" = true ]; then\n        # Check if FTL is down\n        pico_status=${pico_status_ftl_down}\n        mini_status=${mini_status_ftl_down}\n        tiny_status=${tiny_status_ftl_down}\n        full_status=${full_status_ftl_down}\n        mega_status=${mega_status_ftl_down}\n\n    elif [ \"${dns_down_flag}\" = true ]; then\n        # Check if DNS is down\n        pico_status=${pico_status_dns_down}\n        mini_status=${mini_status_dns_down}\n        tiny_status=${tiny_status_dns_down}\n        full_status=${full_status_dns_down}\n        mega_status=${mega_status_dns_down}\n\n    elif [ \"${blocking_status}\" = \"unknown\" ]; then\n        # Check if blocking status is unknown\n        pico_status=${pico_status_unknown}\n        mini_status=${mini_status_unknown}\n        tiny_status=${tiny_status_unknown}\n        full_status=${full_status_unknown}\n        mega_status=${mega_status_unknown}\n\n    elif [ \"${blocking_status}\" = \"disabled\" ]; then\n        # Check if blocking status is disabled\n        pico_status=${pico_status_off}\n        mini_status=${mini_status_off}\n        tiny_status=${tiny_status_off}\n        full_status=${full_status_off}\n        mega_status=${mega_status_off}\n\n    elif [ \"${out_of_date_flag}\" = \"true\" ] || [ \"${padd_out_of_date_flag}\" = \"true\" ]; then\n        # Check if one of the components of Pi-hole (or PADD itself) is out of date\n        pico_status=${pico_status_update}\n        mini_status=${mini_status_update}\n        tiny_status=${tiny_status_update}\n        full_status=${full_status_update}\n        mega_status=${mega_status_update}\n\n    elif [ \"${blocking_status}\" = \"enabled\" ]; then\n        # if we reach this point and blocking is enabled, everything is fine\n        pico_status=${pico_status_ok}\n        mini_status=${mini_status_ok}\n        tiny_status=${tiny_status_ok}\n        full_status=${full_status_ok}\n        mega_status=${mega_status_ok}\n    fi\n}\n\n############################################# PRINTERS #############################################\n\nPrintLogo() {\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n      version_info=\"Docker ${docker_version_heatmap}${DOCKER_VERSION}${reset_text}\"\n    else\n      version_info=\"Pi-hole® ${core_version_heatmap}${CORE_VERSION}${reset_text}, Web ${web_version_heatmap}${WEB_VERSION}${reset_text}, FTL ${ftl_version_heatmap}${FTL_VERSION}${reset_text}\"\n  fi\n\n  # Screen size checks\n  if [ \"$1\" = \"pico\" ]; then\n    printf \"%s${clear_line}\\n\" \"p${padd_text} ${pico_status}\"\n  elif [ \"$1\" = \"nano\" ]; then\n    printf \"%s${clear_line}\\n\" \"n${padd_text} ${mini_status}\"\n  elif [ \"$1\" = \"micro\" ]; then\n    printf \"%s${clear_line}\\n${clear_line}\\n\" \"µ${padd_text}     ${mini_status}\"\n  elif [ \"$1\" = \"mini\" ]; then\n    printf \"%s${clear_line}\\n${clear_line}\\n\" \"${padd_text}${dim_text}mini${reset_text}  ${mini_status}\"\n  elif [ \"$1\" = \"tiny\" ]; then\n    printf \"%s${clear_line}\\n\" \"${padd_text}${dim_text}tiny${reset_text}   ${version_info}${reset_text}\"\n    printf \"%s${clear_line}\\n\" \"           PADD ${padd_version_heatmap}${padd_version}${reset_text} ${tiny_status}${reset_text}\"\n  elif [ \"$1\" = \"slim\" ]; then\n    printf \"%s${clear_line}\\n${clear_line}\\n\" \"${padd_text}${dim_text}slim${reset_text}   ${full_status}\"\n  elif [ \"$1\" = \"regular\" ] || [ \"$1\" = \"slim\" ]; then\n    printf \"%s${clear_line}\\n\" \"${padd_logo_1}\"\n    printf \"%s${clear_line}\\n\" \"${padd_logo_2}${version_info}${reset_text}\"\n    printf \"%s${clear_line}\\n${clear_line}\\n\" \"${padd_logo_3}PADD ${padd_version_heatmap}${padd_version}${reset_text}   ${full_status}${reset_text}\"\n  # normal or not defined\n  else\n    printf \"%s${clear_line}\\n\" \"${padd_logo_retro_1}\"\n    printf \"%s${clear_line}\\n\" \"${padd_logo_retro_2}   ${version_info}, PADD ${padd_version_heatmap}${padd_version}${reset_text}\"\n    printf \"%s${clear_line}\\n${clear_line}\\n\" \"${padd_logo_retro_3}   ${dns_check_box} DNS   ${ftl_check_box} FTL   ${mega_status}${reset_text}\"\n  fi\n}\n\nPrintDashboard() {\n    if [ -n \"${DOCKER_VERSION}\" ]; then\n      version_info=\"Docker ${docker_version_heatmap}${DOCKER_VERSION}${reset_text}\"\n    else\n      version_info=\"Pi-hole® ${core_version_heatmap}${CORE_VERSION}${reset_text}, Web ${web_version_heatmap}${WEB_VERSION}${reset_text}, FTL ${ftl_version_heatmap}${FTL_VERSION}${reset_text}\"\n    fi\n    # Move cursor to (0,0).\n    printf '\\e[H'\n\n    # adds the y-offset\n    moveYOffset\n\n    if [ \"$1\" = \"pico\" ]; then\n        # pico is a screen at least 20x10 (columns x lines)\n        moveXOffset; printf \"%s${clear_line}\\n\" \"p${padd_text} ${pico_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE ============${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" [${ads_blocked_bar}] ${ads_percentage_today}%\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" ${ads_blocked_today} / ${dns_queries_today}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ============${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Hst: ${pi_hostname}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" IP:  ${pi_ip4_addr}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" DHCP ${dhcp_check_box} IPv6 ${dhcp_ipv6_check_box}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}CPU ================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\" \" [${cpu_load_1_heatmap}${cpu_bar}${reset_text}] ${cpu_percent}%\"\n    elif [ \"$1\" = \"nano\" ]; then\n        # nano is a screen at least 24x12 (columns x lines)\n        moveXOffset; printf \"%s${clear_line}\\n\" \"n${padd_text} ${mini_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE ================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" DNS: ${dns_check_box}      FTL: ${ftl_check_box}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Blk: [${ads_blocked_bar}] ${ads_percentage_today}%\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Blk: ${ads_blocked_today} / ${dns_queries_today}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Host: ${pi_hostname}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" IP:   ${pi_ip4_addr}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" DHCP: ${dhcp_check_box}    IPv6: ${dhcp_ipv6_check_box}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM =================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Up:  ${system_uptime}\"\n        moveXOffset; printf \"%s${clear_line}\"  \" CPU: [${cpu_load_1_heatmap}${cpu_bar}${reset_text}] ${cpu_percent}%\"\n    elif [ \"$1\" = \"micro\" ]; then\n        # micro is a screen at least 30x16 (columns x lines)\n        moveXOffset; printf \"%s${clear_line}\\n\" \"µ${padd_text}     ${mini_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE ======================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" DNS:  ${dns_check_box}      FTL:  ${ftl_check_box}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}STATS ========================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Blckng:  ${domains_being_blocked} domains\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Piholed: [${ads_blocked_bar}] ${ads_percentage_today}%\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Piholed: ${ads_blocked_today} / ${dns_queries_today}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ======================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Host:    ${full_hostname}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" IP:      ${pi_ip4_addr}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" DHCP:    ${dhcp_check_box}     IPv6:  ${dhcp_ipv6_check_box}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM =======================${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Uptime:  ${system_uptime}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Load:    [${cpu_load_1_heatmap}${cpu_bar}${reset_text}] ${cpu_percent}%\"\n        moveXOffset; printf \"%s${clear_line}\" \" Memory:  [${memory_heatmap}${memory_bar}${reset_text}] ${memory_percent}%\"\n    elif [ \"$1\" = \"mini\" ]; then\n        # mini is a screen at least 40x18 (columns x lines)\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_text}${dim_text}mini${reset_text}  ${mini_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE ================================${reset_text}\"\n        moveXOffset; printf \" %-9s${dns_heatmap}%-10s${reset_text} %-5s${ftl_heatmap}%-10s${reset_text}${clear_line}\\n\" \"DNS:\" \"${dns_status}\" \"FTL:\" \"${ftl_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}STATS ==================================${reset_text}\"\n        moveXOffset; printf \" %-9s%-29s${clear_line}\\n\" \"Blckng:\" \"${domains_being_blocked} domains\"\n        moveXOffset; printf \" %-9s[%-20s] %-5s${clear_line}\\n\" \"Piholed:\" \"${ads_blocked_bar}\" \"${ads_percentage_today}%\"\n        moveXOffset; printf \" %-9s%-29s${clear_line}\\n\" \"Piholed:\" \"${ads_blocked_today} out of ${dns_queries_today}\"\n        moveXOffset; printf \" %-9s%-29s${clear_line}\\n\" \"Latest:\" \"${latest_blocked}\"\n        if [ \"${DHCP_ACTIVE}\" != \"true\" ]; then\n            moveXOffset; printf \" %-9s%-29s${clear_line}\\n\" \"Top Ad:\" \"${top_blocked}\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ================================${reset_text}\"\n        moveXOffset; printf \" %-9s%-16s%-5s%-9s${clear_line}\\n\" \"Host:\" \"${full_hostname}\" \"DNS:\" \"${dns_information}\"\n        moveXOffset; printf \" %-9s%s${clear_line}\\n\" \"IP:\" \"${pi_ip4_addr} (${iface_name})\"\n        moveXOffset; printf \" %-9s%-4s%-12s%-4s%-5s${clear_line}\\n\" \"Traffic:\" \"TX:\" \"${tx_bytes}\" \"RX:\" \"${rx_bytes}\"\n        if [ \"${DHCP_ACTIVE}\" = \"true\" ]; then\n            moveXOffset; printf \" %-9s${dhcp_heatmap}%-10s${reset_text} %-9s${dhcp_ipv6_heatmap}%-10s${reset_text}${clear_line}\\n\" \"DHCP:\" \"${dhcp_status}\" \"IPv6:\" ${dhcp_ipv6_status}\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM =================================${reset_text}\"\n        moveXOffset; printf \" %-9s%-29s${clear_line}\\n\" \"Uptime:\" \"${system_uptime}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \" Load:    [${cpu_load_1_heatmap}${cpu_bar}${reset_text}] ${cpu_percent}%\"\n        moveXOffset; printf \"%s${clear_line}\" \" Memory:  [${memory_heatmap}${memory_bar}${reset_text}] ${memory_percent}%\"\n    elif [ \"$1\" = \"tiny\" ]; then\n         # tiny is a screen at least 53x20 (columns x lines)\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_text}${dim_text}tiny${reset_text}   ${version_info}${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"           PADD ${padd_version_heatmap}${padd_version}${reset_text} ${tiny_status}${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE =============================================${reset_text}\"\n        moveXOffset; printf \" %-10s${dns_heatmap}%-16s${reset_text} %-8s${ftl_heatmap}%-10s${reset_text}${clear_line}\\n\" \"DNS:\" \"${dns_status}\" \"FTL:\" \"${ftl_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}STATS ===============================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-29s${clear_line}\\n\" \"Blocking:\" \"${domains_being_blocked} domains\"\n        moveXOffset; printf \" %-10s[%-30s] %-5s${clear_line}\\n\" \"Pi-holed:\" \"${ads_blocked_bar}\" \"${ads_percentage_today}%\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Pi-holed:\" \"${ads_blocked_today} out of ${dns_queries_today}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Latest:\" \"${latest_blocked}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Ad:\" \"${top_blocked}\"\n        if [ \"${DHCP_ACTIVE}\" != \"true\" ]; then\n            moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Dmn:\" \"${top_domain}\"\n            moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Clnt:\" \"${top_client}\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK =============================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-16s %-8s%-16s${clear_line}\\n\" \"Hostname:\" \"${full_hostname}\" \"IP:  \" \"${pi_ip4_addr}\"\n        moveXOffset; printf \" %-10s%-16s %-4s%-7s %-4s%-5s${clear_line}\\n\" \"Interfce:\" \"${iface_name}\" \"TX:\" \"${tx_bytes}\" \"RX:\" \"${rx_bytes}\"\n        moveXOffset; printf \" %-10s%-16s %-8s${dnssec_heatmap}%-16s${reset_text}${clear_line}\\n\" \"DNS:\" \"${dns_information}\" \"DNSSEC:\" \"${dnssec_status}\"\n        if [ \"${DHCP_ACTIVE}\" = \"true\" ]; then\n            moveXOffset; printf \" %-10s${dhcp_heatmap}%-16s${reset_text} %-8s${dhcp_ipv6_heatmap}%-10s${reset_text}${clear_line}\\n\" \"DHCP:\" \"${dhcp_status}\" \"IPv6:\" ${dhcp_ipv6_status}\n            moveXOffset; printf \"%s${clear_line}\\n\" \"${dhcp_info}\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM ==============================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-29s${clear_line}\\n\" \"Uptime:\" \"${system_uptime}\"\n        moveXOffset; printf \" %-10s${temp_heatmap}%-17s${reset_text} %-8s${cpu_load_1_heatmap}%-4s${reset_text}, ${cpu_load_5_heatmap}%-4s${reset_text}, ${cpu_load_15_heatmap}%-4s${reset_text}${clear_line}\\n\" \"CPU Temp:\" \"${temperature}\" \"Load:\" \"${cpu_load_1}\" \"${cpu_load_5}\" \"${cpu_load_15}\"\n        moveXOffset; printf \" %-10s[${memory_heatmap}%-7s${reset_text}] %-6s %-8s[${cpu_load_1_heatmap}%-7s${reset_text}] %-5s${clear_line}\" \"Memory:\" \"${memory_bar}\" \"${memory_percent}%\" \"CPU:\" \"${cpu_bar}\" \"${cpu_percent}%\"\n    elif [ \"$1\" = \"regular\" ] || [ \"$1\" = \"slim\" ]; then\n        # slim is a screen with at least 60 columns and exactly 21 lines\n        # regular is a screen at least 60x22 (columns x lines)\n        if [ \"$1\" = \"slim\" ]; then\n           moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_text}${dim_text}slim${reset_text}   ${version_info}${reset_text}\"\n           moveXOffset; printf \"%s${clear_line}\\n\" \"           PADD ${padd_version_heatmap}${padd_version}${reset_text}   ${full_status}${reset_text}\"\n           moveXOffset; printf \"%s${clear_line}\\n\" \"\"\n        else\n            moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_1}\"\n            moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_2}${version_info}${reset_text}\"\n            moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_3}PADD ${padd_version_heatmap}${padd_version}${reset_text}   ${full_status}${reset_text}\"\n            moveXOffset; printf \"%s${clear_line}\\n\" \"\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}PI-HOLE ====================================================${reset_text}\"\n        moveXOffset; printf \" %-10s${dns_heatmap}%-19s${reset_text} %-10s${ftl_heatmap}%-19s${reset_text}${clear_line}\\n\" \"DNS:\" \"${dns_status}\" \"FTL:\" \"${ftl_status}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}STATS ======================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-49s${clear_line}\\n\" \"Blocking:\" \"${domains_being_blocked} domains\"\n        moveXOffset; printf \" %-10s[%-40s] %-5s${clear_line}\\n\" \"Pi-holed:\" \"${ads_blocked_bar}\" \"${ads_percentage_today}%\"\n        moveXOffset; printf \" %-10s%-49s${clear_line}\\n\" \"Pi-holed:\" \"${ads_blocked_today} out of ${dns_queries_today} queries\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Latest:\" \"${latest_blocked}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Ad:\" \"${top_blocked}\"\n        if [ \"${DHCP_ACTIVE}\" != \"true\" ]; then\n            moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Dmn:\" \"${top_domain}\"\n            moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Clnt:\" \"${top_client}\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ====================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-15s %-4s%-17s%-6s%s${clear_line}\\n\" \"Hostname:\" \"${full_hostname}\" \"IP:\" \"${pi_ip4_addr}\" \"IPv6:\" \"${ipv6_check_box}\"\n        moveXOffset; printf \" %-10s%-15s %-4s%-17s%-4s%s${clear_line}\\n\" \"Interfce:\" \"${iface_name}\" \"TX:\" \"${tx_bytes}\" \"RX:\" \"${rx_bytes}\"\n        moveXOffset; printf \" %-10s%-15s %-10s${dnssec_heatmap}%-19s${reset_text}${clear_line}\\n\" \"DNS:\" \"${dns_information}\" \"DNSSEC:\" \"${dnssec_status}\"\n        if [ \"${DHCP_ACTIVE}\" = \"true\" ]; then\n            moveXOffset; printf \" %-10s${dhcp_heatmap}%-15s${reset_text} %-10s${dhcp_ipv6_heatmap}%-19s${reset_text}${clear_line}\\n\" \"DHCP:\" \"${dhcp_status}\" \"IPv6:\" ${dhcp_ipv6_status}\n            moveXOffset; printf \"%s${clear_line}\\n\" \"${dhcp_info}\"\n        fi\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM =====================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Uptime:\" \"${system_uptime}\"\n        moveXOffset; printf \" %-10s${temp_heatmap}%-21s${reset_text}%-10s${cpu_load_1_heatmap}%-4s${reset_text}, ${cpu_load_5_heatmap}%-4s${reset_text}, ${cpu_load_15_heatmap}%-4s${reset_text}${clear_line}\\n\" \"CPU Temp:\" \"${temperature}\" \"CPU Load:\" \"${cpu_load_1}\" \"${cpu_load_5}\" \"${cpu_load_15}\"\n        moveXOffset; printf \" %-10s[${memory_heatmap}%-10s${reset_text}] %-6s %-10s[${cpu_load_1_heatmap}%-10s${reset_text}] %-5s${clear_line}\" \"Memory:\" \"${memory_bar}\" \"${memory_percent}%\" \"CPU Load:\" \"${cpu_bar}\" \"${cpu_percent}%\"\n    else # ${padd_size} = mega\n         # mega is a screen with at least 80 columns and 26 lines\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_retro_1}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_retro_2}   ${version_info}, PADD ${padd_version_heatmap}${padd_version}${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${padd_logo_retro_3}   ${dns_check_box} DNS   ${ftl_check_box} FTL   ${mega_status}${reset_text}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}STATS ==========================================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-19s %-10s[%-40s] %-5s${clear_line}\\n\" \"Blocking:\" \"${domains_being_blocked} domains\" \"Piholed:\" \"${ads_blocked_bar}\" \"${ads_percentage_today}%\"\n        moveXOffset; printf \" %-10s%-30s%-29s${clear_line}\\n\" \"Clients:\" \"${clients}\" \" ${ads_blocked_today} out of ${dns_queries_today} queries\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Latest:\" \"${latest_blocked}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Ad:\" \"${top_blocked}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Dmn:\" \"${top_domain}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Top Clnt:\" \"${top_client}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}FTL ============================================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-9s %-10s%-9s %-10s%-9s${clear_line}\\n\" \"PID:\" \"${ftlPID}\" \"CPU Use:\" \"${ftl_cpu}\" \"Mem. Use:\" \"${ftl_mem_percentage}\"\n        moveXOffset; printf \" %-10s%-69s${clear_line}\\n\" \"DNSCache:\" \"${cache_inserts} insertions, ${cache_deletes} deletions, ${cache_size} total entries\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}NETWORK ========================================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-19s${clear_line}\\n\" \"Hostname:\" \"${full_hostname}\"\n        moveXOffset; printf \" %-10s%-15s %-4s%-9s %-4s%-9s${clear_line}\\n\" \"Interfce:\" \"${iface_name}\" \"TX:\" \"${tx_bytes}\" \"RX:\" \"${rx_bytes}\"\n        moveXOffset; printf \" %-6s%-19s %-10s%-29s${clear_line}\\n\" \"IPv4:\" \"${pi_ip4_addr}\" \"IPv6:\" \"${pi_ip6_addr}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}DNS ==========================DHCP==============================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-19s %-6s${dhcp_heatmap}%-19s${reset_text}${clear_line}\\n\" \"Servers:\" \"${dns_information}\" \"DHCP:\" \"${dhcp_status}\"\n        moveXOffset; printf \" %-10s${dnssec_heatmap}%-19s${reset_text} %-10s${dhcp_ipv6_heatmap}%-9s${reset_text}${clear_line}\\n\" \"DNSSEC:\" \"${dnssec_status}\" \"IPv6 Spt:\" \"${dhcp_ipv6_status}\"\n        moveXOffset; printf \" %-10s${conditional_forwarding_heatmap}%-19s${reset_text}%s${clear_line}\\n\" \"CdFwding:\" \"${conditional_forwarding_status}\" \"${dhcp_info}\"\n        moveXOffset; printf \"%s${clear_line}\\n\" \"${bold_text}SYSTEM =========================================================================${reset_text}\"\n        moveXOffset; printf \" %-10s%-39s${clear_line}\\n\" \"Device:\" \"${sys_model}\"\n        moveXOffset; printf \" %-10s%-39s %-10s[${memory_heatmap}%-10s${reset_text}] %-6s${clear_line}\\n\" \"Uptime:\" \"${system_uptime}\" \"Memory:\" \"${memory_bar}\" \"${memory_percent}%\"\n        moveXOffset; printf \" %-10s${temp_heatmap}%-10s${reset_text} %-10s${cpu_load_1_heatmap}%-4s${reset_text}, ${cpu_load_5_heatmap}%-4s${reset_text}, ${cpu_load_15_heatmap}%-7s${reset_text} %-10s[${memory_heatmap}%-10s${reset_text}] %-6s${clear_line}\" \"CPU Temp:\" \"${temperature}\" \"CPU Load:\" \"${cpu_load_1}\" \"${cpu_load_5}\" \"${cpu_load_15}\" \"CPU Load:\" \"${cpu_bar}\" \"${cpu_percent}%\"\n    fi\n\n    # Clear to end of screen (below the drawn dashboard)\n    # https://vt100.net/docs/vt510-rm/ED.html\n    printf '\\e[0J'\n}\n\n############################################# HELPERS ##############################################\n\n# Provides a color based on a provided percentage\n# takes in one or two parameters\nHeatmapGenerator () {\n  # if one number is provided, just use that percentage to figure out the colors\n  if [ -z \"$2\" ]; then\n    load=$(printf \"%.0f\" \"$1\")\n  # if two numbers are provided, do some math to make a percentage to figure out the colors\n  else\n    load=$(printf \"%.0f\" \"$(echo \"$1 $2\" | awk '{print ($1 / $2) * 100}')\")\n  fi\n\n  # Color logic\n  #  |<-                 green                  ->| yellow |  red ->\n  #  0  5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100\n  if [ \"${load}\" -lt 75 ]; then\n    out=${green_text}\n  elif [ \"${load}\" -lt 90 ]; then\n    out=${yellow_text}\n  else\n    out=${red_text}\n  fi\n\n  echo \"$out\"\n}\n\n# Provides a \"bar graph\"\n# takes in two or three parameters\n# $1: percentage filled\n# $2: max length of the bar\n# $3: colored flag, if \"color\" backfill with color\nBarGenerator() {\n  # number of filled in cells in the bar\n  barNumber=$(printf %.f \"$(echo \"$1 $2\" | awk '{print ($1 / 100) * $2}')\")\n  frontFill=$(for i in $(seq \"$barNumber\"); do printf \"%b\" \"■\"; done)\n\n  # remaining \"unfilled\" cells in the bar\n  backfillNumber=$(($2-barNumber))\n\n  # if the filled in cells is less than the max length of the bar, fill it\n  if [ \"$barNumber\" -lt \"$2\" ]; then\n    # if the bar should be colored\n    if [ \"$3\" = \"color\" ]; then\n      # fill the rest in color\n      backFill=$(for i in $(seq $backfillNumber); do printf \"%b\" \"■\"; done)\n      out=\"${red_text}${frontFill}${green_text}${backFill}${reset_text}\"\n    # else, it shouldn't be colored in\n    else\n      # fill the rest with \"space\"\n      backFill=$(for i in $(seq $backfillNumber); do printf \"%b\" \"·\"; done)\n      out=\"${frontFill}${reset_text}${backFill}\"\n    fi\n  # else, fill it all the way\n  else\n    out=$(for i in $(seq \"$2\"); do printf \"%b\" \"■\"; done)\n  fi\n\n  echo \"$out\"\n}\n\n# Checks the size of the screen and sets the value of $padd_size\nSizeChecker(){\n    # adding a tiny delay here to to give the kernel a bit time to\n    # report new sizes correctly after a terminal resize\n    # this reduces \"flickering\" of GenerateSizeDependendOutput() items\n    # after a terminal re-size\n    sleep 0.1\n    console_width=$(tput cols)\n    console_height=$(tput lines)\n\n    # Mega\n    if [ \"$console_width\" -ge \"80\" ] && [ \"$console_height\" -ge \"26\" ]; then\n        padd_size=\"mega\"\n        width=80\n        height=26\n    # Below Mega. Gives you Regular.\n    elif [ \"$console_width\" -ge \"60\" ] && [ \"$console_height\" -ge \"22\" ]; then\n        padd_size=\"regular\"\n        width=60\n        height=22\n    # Below Regular. Gives you Slim.\n    elif [ \"$console_width\" -ge \"60\" ] && [ \"$console_height\" -ge \"21\" ]; then\n        padd_size=\"slim\"\n        width=60\n        height=21\n    # Below Slim. Gives you Tiny.\n    elif [ \"$console_width\" -ge \"53\" ] && [ \"$console_height\" -ge \"20\" ]; then\n        padd_size=\"tiny\"\n        width=53\n        height=20\n    # Below Tiny. Gives you Mini.\n    elif [ \"$console_width\" -ge \"40\" ] && [ \"$console_height\" -ge \"18\" ]; then\n        padd_size=\"mini\"\n        width=40\n        height=18\n    # Below Mini. Gives you Micro.\n    elif [ \"$console_width\" -ge \"30\" ] && [ \"$console_height\" -ge \"16\" ]; then\n        padd_size=\"micro\"\n        width=30\n        height=16\n    # Below Micro, Gives you Nano.\n    elif [ \"$console_width\" -ge \"24\" ] && [ \"$console_height\" -ge \"12\" ]; then\n        padd_size=\"nano\"\n        width=24\n        height=12\n    # Below Nano. Gives you Pico.\n    elif [ \"$console_width\" -ge \"20\" ] && [ \"$console_height\" -ge \"10\" ]; then\n        padd_size=\"pico\"\n        width=20\n        height=10\n    # Below Pico. Gives you nothing...\n    else\n        # Nothing is this small, sorry\n        printf \"%b\" \"${check_box_bad} Error!\\n    PADD isn't\\n    for ants!\\n\"\n        exit 1\n    fi\n\n    # Center the output (default position)\n    xOffset=\"$(( (console_width - width) / 2 ))\"\n    yOffset=\"$(( (console_height - height) / 2 ))\"\n\n    # If the user sets an offset option, use it.\n    if [ -n \"$xOffOrig\" ]; then\n        xOffset=$xOffOrig\n\n        # Limit the offset to avoid breaks\n        xMaxOffset=$((console_width - width))\n        if [ \"$xOffset\" -gt \"$xMaxOffset\" ]; then\n            xOffset=\"$xMaxOffset\"\n        fi\n    fi\n    if [ -n \"$yOffOrig\" ]; then\n        yOffset=$yOffOrig\n\n        # Limit the offset to avoid breaks\n        yMaxOffset=$((console_height - height))\n        if [ \"$yOffset\" -gt \"$yMaxOffset\" ]; then\n            yOffset=\"$yMaxOffset\"\n        fi\n    fi\n}\n\n# converts a given version string e.g. v3.7.1 to 3007001000 to allow for easier comparison of multi digit version numbers\n# credits https://apple.stackexchange.com/a/123408\nVersionConverter() {\n  echo \"$@\" | tr -d '[:alpha:]' | awk -F. '{ printf(\"%d%03d%03d%03d\\n\", $1,$2,$3,$4); }';\n}\n\n# get the Telnet API Port FTL is using by parsing `pihole-FTL.conf`\n# same implementation as https://github.com/pi-hole/pi-hole/pull/4945\ngetFTLAPIPort(){\n    local FTLCONFFILE=\"/etc/pihole/pihole-FTL.conf\"\n    local DEFAULT_FTL_PORT=4711\n    local ftl_api_port\n\n    if [ -s \"$FTLCONFFILE\" ]; then\n        # if FTLPORT is not set in pihole-FTL.conf, use the default port\n        ftl_api_port=\"$({ grep '^FTLPORT=' \"${FTLCONFFILE}\" || echo \"${DEFAULT_FTL_PORT}\"; } | cut -d'=' -f2-)\"\n        # Exploit prevention: set the port to the default port if there is malicious (non-numeric)\n        # content set in pihole-FTL.conf\n        expr \"${ftl_api_port}\" : \"[^[:digit:]]\" > /dev/null && ftl_api_port=\"${DEFAULT_FTL_PORT}\"\n    else\n        # if there is no pihole-FTL.conf, use the default port\n        ftl_api_port=\"${DEFAULT_FTL_PORT}\"\n    fi\n\n    echo \"${ftl_api_port}\"\n\n}\n\n# returns FTL's PID based on the content of the pihole-FTL.pid file\n# honor PIDFILE setting in `pihole-FTL.conf`\ngetFTLPID() {\n    local FTLCONFFILE=\"/etc/pihole/pihole-FTL.conf\"\n    local DEFAULT_PID_FILE=\"/run/pihole-FTL.pid\"\n    local FTL_PID_FILE\n    local FTL_PID\n\n    if [ -s \"${FTLCONFFILE}\" ]; then\n      # if PIDFILE is not set in pihole-FTL.conf, use the default path\n      FTL_PID_FILE=\"$({ grep '^PIDFILE=' \"${FTLCONFFILE}\" || echo \"${DEFAULT_PID_FILE}\"; } | cut -d'=' -f2-)\"\n    else\n      # if there is no pihole-FTL.conf, use the default path\n      FTL_PID_FILE=\"${DEFAULT_PID_FILE}\"\n    fi\n\n    if [ -s \"${FTL_PID_FILE}\" ]; then\n        # -s: FILE exists and has a size greater than zero\n        FTL_PID=\"$(cat \"${FTL_PID_FILE}\")\"\n        # Exploit prevention: unset the variable if there is malicious content\n        # Verify that the value read from the file is numeric\n        expr \"${FTL_PID}\" : \"[^[:digit:]]\" > /dev/null && unset FTL_PID\n    fi\n\n    # If FTL is not running, or the PID file contains malicious stuff, substitute\n    # negative PID to signal this\n    FTL_PID=${FTL_PID:=-1}\n    echo  \"${FTL_PID}\"\n}\n\n\nmoveYOffset(){\n    # moves the cursor yOffset-times down\n    # https://vt100.net/docs/vt510-rm/CUD.html\n    # this needs to be guarded, because if the amount is 0, it is adjusted to 1\n    # https://terminalguide.namepad.de/seq/csi_cb/\n\n    if [ \"${yOffset}\" -gt 0 ]; then\n        printf '\\e[%sB' \"${yOffset}\"\n    fi\n}\n\nmoveXOffset(){\n    # moves the cursor xOffset-times to the right\n    # https://vt100.net/docs/vt510-rm/CUF.html\n    # this needs to be guarded, because if the amount is 0, it is adjusted to 1\n    # https://terminalguide.namepad.de/seq/csi_cb/\n\n    if [ \"${xOffset}\" -gt 0 ]; then\n        printf '\\e[%sC' \"${xOffset}\"\n    fi\n}\n\n# Remove undesired strings from sys_model variable - used in GetSystemInformation() function\nfilterModel() {\n    FILTERLIST=\"To be filled by O.E.M.|Not Applicable|System Product Name|System Version|Undefined|Default string|Not Specified|Type1ProductConfigId|INVALID|All Series|�\"\n\n    # Description:\n    #    `-v`      : set $FILTERLIST into a variable called `list`\n    #    `gsub()`  : replace all list items (ignoring case) with an empty string, deleting them\n    #    `{$1=$1}1`: remove all extra spaces. The last \"1\" evaluates as true, printing the result\n    echo \"$1\" | awk -v list=\"$FILTERLIST\" '{IGNORECASE=1; gsub(list,\"\")}; {$1=$1}1'\n}\n\n# Truncates a given string and appends three '...'\n# takes two parameters\n# $1: string to truncate\n# $2: max length of the string\ntruncateString() {\n    local truncatedString length shorted\n\n    length=${#1}\n    shorted=$(($2-3)) # shorten max allowed length by 3 to make room for the dots\n    if [ \"${length}\" -gt \"$2\" ]; then\n        # if length of the string is larger then the specified max length\n        # cut every char from the string exceeding length $shorted and add three dots\n        truncatedString=$(echo \"$1\" | cut -c1-$shorted)\"...\"\n        echo \"${truncatedString}\"\n    else\n        echo \"$1\"\n    fi\n}\n\n\n\n########################################## MAIN FUNCTIONS ##########################################\n\nOutputJSON() {\n  GetSummaryInformation\n  echo \"{\\\"domains_being_blocked\\\":${domains_being_blocked_raw},\\\"dns_queries_today\\\":${dns_queries_today_raw},\\\"ads_blocked_today\\\":${ads_blocked_today_raw},\\\"ads_percentage_today\\\":${ads_percentage_today_raw},\\\"clients\\\": ${clients}}\"\n}\n\nShowVersion() {\n  # source version file to check if $DOCKER_VERSION is set\n  . /etc/pihole/versions\n  GetPADDInformation\n  if [ -z \"${padd_version_latest}\" ]; then\n    padd_version_latest=\"N/A\"\n  fi\n  if [ -n \"${DOCKER_VERSION}\" ]; then\n    # Check for latest Docker version\n    GetVersionInformation\n    printf \"%s${clear_line}\\n\" \"  PADD version is ${padd_version} as part of Docker ${docker_version_heatmap}${DOCKER_VERSION}${reset_text} (Latest Docker: ${GITHUB_DOCKER_VERSION})\"\n    version_info=\"Docker ${docker_version_heatmap}${DOCKER_VERSION}${reset_text}\"\n  else\n    printf \"%s${clear_line}\\n\" \"  PADD version is ${padd_version_heatmap}${padd_version}${reset_text} (Latest: ${padd_version_latest})\"\n  fi\n}\n\nStartupRoutine(){\n  # Get config variables\n  . /etc/pihole/setupVars.conf\n\n  # Clear the screen and move cursor to (0,0).\n  # This mimics the 'clear' command.\n  # https://vt100.net/docs/vt510-rm/ED.html\n  # https://vt100.net/docs/vt510-rm/CUP.html\n  # E3 extension `\\e[3J` to clear the scrollback buffer see 'man clear'\n  printf '\\e[H\\e[2J\\e[3J'\n\n  # adds the y-offset\n  moveYOffset\n\n  # Get versions information\n  . /etc/pihole/versions\n\n  if [ \"$1\" = \"pico\" ] || [ \"$1\" = \"nano\" ] || [ \"$1\" = \"micro\" ]; then\n    moveXOffset; PrintLogo \"$1\"\n    moveXOffset; printf \"%b\" \"START-UP ===========\\n\"\n\n    moveXOffset; printf \"%b\" \" [■·········]  10%\\r\"\n\n    # Check for updates\n    moveXOffset; printf \"%b\" \" [■■········]  20%\\r\"\n    moveXOffset; printf \"%b\" \" [■■■·······]  30%\\r\"\n\n    # Get our information for the first time\n    moveXOffset; printf \"%b\" \" [■■■■······]  40%\\r\"\n    GetSystemInformation\n    moveXOffset; printf \"%b\" \" [■■■■■·····]  50%\\r\"\n    GetSummaryInformation\n    moveXOffset; printf \"%b\" \" [■■■■■■····]  60%\\r\"\n    GetPiholeInformation\n    moveXOffset; printf \"%b\" \" [■■■■■■■···]  70%\\r\"\n    GetNetworkInformation\n    moveXOffset; printf \"%b\" \" [■■■■■■■■··]  80%\\r\"\n    GetVersionInformation\n    moveXOffset; printf \"%b\" \" [■■■■■■■■■·]  90%\\r\"\n    GetPADDInformation\n    moveXOffset; printf \"%b\" \" [■■■■■■■■■■] 100%\\n\"\n\n  elif [ \"$1\" = \"mini\" ]; then\n    moveXOffset; PrintLogo \"$1\"\n    moveXOffset; echo \"START UP =====================\"\n\n    # Get our information for the first time\n    moveXOffset; echo \"- Gathering system info.\"\n    GetSystemInformation\n    moveXOffset; echo \"- Gathering Pi-hole info.\"\n    GetPiholeInformation\n    GetSummaryInformation\n    moveXOffset; echo \"- Gathering network info.\"\n    GetNetworkInformation\n    moveXOffset; echo \"- Gathering version info.\"\n    GetVersionInformation\n    GetPADDInformation\n    if [ -n \"${DOCKER_VERSION}\" ]; then\n      moveXOffset; echo \"  - Docker Tag ${DOCKER_VERSION}\"\n    else\n      moveXOffset; echo \"  - Core $CORE_VERSION, Web $WEB_VERSION\"\n      moveXOffset; echo \"  - FTL $FTL_VERSION, PADD $padd_version\"\n    fi\n\n  else\n    moveXOffset; printf \"%b\" \"${padd_logo_retro_1}\\n\"\n    moveXOffset; printf \"%b\" \"${padd_logo_retro_2}Pi-hole® Ad Detection Display\\n\"\n    moveXOffset; printf \"%b\" \"${padd_logo_retro_3}A client for Pi-hole\\n\\n\"\n    if [ \"$1\" = \"tiny\" ]; then\n      moveXOffset; echo \"START UP ============================================\"\n    else\n      moveXOffset; echo \"START UP ===================================================\"\n    fi\n\n    # Get our information for the first time\n    moveXOffset; echo \"- Gathering system information...\"\n    GetSystemInformation\n    moveXOffset; echo \"- Gathering Pi-hole information...\"\n    GetSummaryInformation\n    GetPiholeInformation\n    moveXOffset; echo \"- Gathering network information...\"\n    GetNetworkInformation\n    moveXOffset; echo \"- Gathering version information...\"\n    GetVersionInformation\n    GetPADDInformation\n    if [ -n \"${DOCKER_VERSION}\" ]; then\n      moveXOffset; echo \"  - Docker Tag ${DOCKER_VERSION}\"\n    else\n      moveXOffset; echo \"  - Pi-hole Core $CORE_VERSION\"\n      moveXOffset; echo \"  - Web Admin $WEB_VERSION\"\n      moveXOffset; echo \"  - FTL $FTL_VERSION\"\n      moveXOffset; echo \"  - PADD $padd_version\"\n    fi\n  fi\n\n  moveXOffset; printf \"%s\" \"- Starting in \"\n  for i in 3 2 1\n  do\n    printf \"%s...\" \"$i\"\n    sleep 1\n  done\n}\n\nNormalPADD() {\n\n    # Trap the window resize signal (handle window resize events)\n    trap 'TerminalResize' WINCH\n\n    while true; do\n\n    # Generate output that depends on the terminal size\n    # e.g. Heatmap and barchart\n    GenerateSizeDependendOutput ${padd_size}\n\n    # Sets the message displayed in the \"status field\" depending on the set flags\n    SetStatusMessage\n\n    # Output everything to the screen\n    PrintDashboard ${padd_size}\n\n    # Sleep for 5 seconds\n    # sending sleep in the background and wait for it\n    # this way the TerminalResize trap can kill the sleep\n    # and force a instant re-draw of the dashboard\n    # https://stackoverflow.com/questions/32041674/linux-how-to-kill-sleep\n    #\n    # saving the PID of the background sleep process to kill it on exit and resize\n    sleep 5 &\n    sleepPID=$!\n    wait $!\n\n    # Start getting our information for next round\n    now=$(date +%s)\n\n    # Get uptime, CPU load, temp, etc. every 5 seconds\n    if [ $((now - LastCheckSystemInformation)) -ge 5 ]; then\n      . /etc/pihole/setupVars.conf\n      GetSystemInformation\n      LastCheckSystemInformation=\"${now}\"\n    fi\n\n    # Get cache info, last ad domain, blocking percentage, etc. every 5 seconds\n    if [ $((now - LastCheckSummaryInformation)) -ge 5 ]; then\n      GetSummaryInformation\n      LastCheckSummaryInformation=\"${now}\"\n    fi\n\n    # Get FTL status every 5 seconds\n    if [ $((now - LastCheckPiholeInformation)) -ge 5 ]; then\n      GetPiholeInformation\n      LastCheckPiholeInformation=\"${now}\"\n    fi\n\n    # Get IPv4 address, DNS servers, DNSSEC, hostname, DHCP status, interface traffic, etc. every 30 seconds\n    if [ $((now - LastCheckNetworkInformation)) -ge 30 ]; then\n      GetNetworkInformation\n      LastCheckNetworkInformation=\"${now}\"\n    fi\n\n    # Get Pi-hole components version information every 30 seconds\n    if [ $((now - LastCheckVersionInformation)) -ge 30 ]; then\n      . /etc/pihole/versions\n      GetVersionInformation\n      LastCheckVersionInformation=\"${now}\"\n    fi\n\n    # Get PADD version information every 24hours\n    if [ $((now - LastCheckPADDInformation)) -ge 86400 ]; then\n      GetPADDInformation\n      LastCheckPADDInformation=\"${now}\"\n    fi\n\n  done\n}\n\nUpdate() {\n    # source version file to check if $DOCKER_VERSION is set\n    . /etc/pihole/versions\n\n    if [ -n \"${DOCKER_VERSION}\" ]; then\n        echo \"${check_box_info} Update is not supported for Docker\"\n        exit 1\n    fi\n\n    GetPADDInformation\n\n    if [ \"${padd_out_of_date_flag}\" = \"true\" ]; then\n        echo \"${check_box_info} Updating PADD from ${padd_version} to ${padd_version_latest}\"\n\n        padd_script_path=$(realpath \"$0\")\n\n        if which wget > /dev/null 2>&1; then\n            echo \"${check_box_info} Downloading PADD update via wget ...\"\n            if wget -qO \"${padd_script_path}\" https://install.padd.sh > /dev/null 2>&1; then\n                echo \"${check_box_good} ... done. Restart PADD for the update to take effect\"\n            else\n                echo \"${check_box_bad} Cannot download PADD update via wget\"\n                echo \"${check_box_info} Go to https://install.padd.sh to download the update manually\"\n                exit 1\n            fi\n        elif which curl > /dev/null 2>&1; then\n            echo \"${check_box_info} Downloading PADD update via curl ...\"\n            if  curl -sSL https://install.padd.sh -o \"${padd_script_path}\" > /dev/null 2>&1; then\n                echo \"${check_box_good} ... done. Restart PADD for the update to take effect\"\n            else\n                echo \"${check_box_bad} Cannot download PADD update via curl\"\n                echo \"${check_box_info} Go to https://install.padd.sh to download the update manually\"\n                exit 1\n            fi\n        else\n            echo \"${check_box_bad} Cannot download, neither wget nor curl are available\"\n            echo \"${check_box_info} Go to https://install.padd.sh to download the update manually\"\n            exit 1\n        fi\n    else\n        echo \"${check_box_good} You are already using the latest PADD version ${padd_version}\"\n    fi\n\n    exit 0\n}\n\nDisplayHelp() {\n    cat << EOM\n\n::: PADD displays stats about your Pi-hole!\n:::\n::: Note: If no option is passed, then stats are displayed on screen, updated every 5 seconds\n:::\n::: Options:\n:::  -xoff [num]    set the x-offset, reference is the upper left corner, disables auto-centering\n:::  -yoff [num]    set the y-offset, reference is the upper left corner, disables auto-centering\n:::  -j, --json     output stats as JSON formatted string and exit\n:::  -u, --update   update to the latest version\n:::  -v, --version  show PADD version info\n:::  -h, --help     display this help text\n\nEOM\n}\n\nCleanExit(){\n    # save the return code of the script\n    err=$?\n    #clear the line\n    printf '\\e[0K\\n'\n\n    # Show the cursor\n    # https://vt100.net/docs/vt510-rm/DECTCEM.html\n    printf '\\e[?25h'\n\n    # if background sleep is running, kill it\n    # http://mywiki.wooledge.org/SignalTrap#When_is_the_signal_handled.3F\n    kill $sleepPID > /dev/null 2>&1\n\n    exit $err # exit the script with saved $?\n}\n\nTerminalResize(){\n    # if a terminal resize is trapped, check the new terminal size and\n    # kill the sleep function within NormalPADD() to trigger redrawing\n    # of the Dashboard\n    SizeChecker\n\n    # Clear the screen and move cursor to (0,0).\n    # This mimics the 'clear' command.\n    # https://vt100.net/docs/vt510-rm/ED.html\n    # https://vt100.net/docs/vt510-rm/CUP.html\n    # E3 extension `\\e[3J` to clear the scrollback buffer (see 'man clear')\n\n    printf '\\e[H\\e[2J\\e[3J'\n\n    kill $sleepPID > /dev/null 2>&1\n}\n\nmain(){\n    # Hiding the cursor.\n    # https://vt100.net/docs/vt510-rm/DECTCEM.html\n    printf '\\e[?25l'\n\n    # Trap on exit\n    trap 'CleanExit' INT TERM EXIT\n\n    # If setupVars.conf is not present, then PADD is not running on a Pi-hole\n    # and we are not able to start as StartupRoutine() will fail below\n    if [ ! -f /etc/pihole/setupVars.conf ]; then\n      printf \"%b\" \"${check_box_bad} Error!\\n    PADD only works in conjunction with Pi-hole!\\n\"\n      exit 1\n    fi\n\n    SizeChecker\n\n    StartupRoutine ${padd_size}\n\n    # Run PADD\n    NormalPADD\n}\n\n# Process all options (if present)\nwhile [ \"$#\" -gt 0 ]; do\n  case \"$1\" in\n    \"-j\" | \"--json\"     ) OutputJSON; exit 0;;\n    \"-u\" | \"--update\"   ) Update;;\n    \"-h\" | \"--help\"     ) DisplayHelp; exit 0;;\n    \"-v\" | \"--version\"  ) ShowVersion; exit 0;;\n    \"-xoff\"             ) xOffset=\"$2\"; xOffOrig=\"$2\"; shift;;\n    \"-yoff\"             ) yOffset=\"$2\"; yOffOrig=\"$2\"; shift;;\n    *                   ) DisplayHelp; exit 1;;\n  esac\n  shift\ndone\n\nmain\n"
        }
      ]
    }
  ]
}