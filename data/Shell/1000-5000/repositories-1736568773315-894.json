{
  "metadata": {
    "timestamp": 1736568773315,
    "page": 894,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg5OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "yuru7/PlemolJP",
      "stars": 1108,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.056640625,
          "content": "bak/*\n!bak/.gitkeep\nwork/\nerror.log\nbuild/\nrelease_files/\n"
        },
        {
          "name": ".vscode",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 5.66796875,
          "content": "# Licensing\n\n- Source fonts are licensed under SIL OPEN FONT LICENSE Version 1.1.\n  For more information, see \"LICENSE_<FontName>\" file contained in the \"source\" directory.\n- \"PlemolJP\" are licensed under SIL OPEN FONT LICENSE Version 1.1.\n- Other source code, such as generating scripts, will use the MIT license.\n\n## \"PlemolJP\" licensing\n\nCopyright (c) 2021, Yuko OTAWARA. with Reserved Font Name \"PlemolJP\"\n\nThis Font Software is licensed under the SIL Open Font License, Version 1.1.\nThis license is copied below, and is also available with a FAQ at:\nhttps://scripts.sil.org/OFL\n\n\n-----------------------------------------------------------\nSIL OPEN FONT LICENSE Version 1.1 - 26 February 2007\n-----------------------------------------------------------\n\nPREAMBLE\nThe goals of the Open Font License (OFL) are to stimulate worldwide\ndevelopment of collaborative font projects, to support the font creation\nefforts of academic and linguistic communities, and to provide a free and\nopen framework in which fonts may be shared and improved in partnership\nwith others.\n\nThe OFL allows the licensed fonts to be used, studied, modified and\nredistributed freely as long as they are not sold by themselves. The\nfonts, including any derivative works, can be bundled, embedded, \nredistributed and/or sold with any software provided that any reserved\nnames are not used by derivative works. The fonts and derivatives,\nhowever, cannot be released under any other type of license. The\nrequirement for fonts to remain under this license does not apply\nto any document created using the fonts or their derivatives.\n\nDEFINITIONS\n\"Font Software\" refers to the set of files released by the Copyright\nHolder(s) under this license and clearly marked as such. This may\ninclude source files, build scripts and documentation.\n\n\"Reserved Font Name\" refers to any names specified as such after the\ncopyright statement(s).\n\n\"Original Version\" refers to the collection of Font Software components as\ndistributed by the Copyright Holder(s).\n\n\"Modified Version\" refers to any derivative made by adding to, deleting,\nor substituting -- in part or in whole -- any of the components of the\nOriginal Version, by changing formats or by porting the Font Software to a\nnew environment.\n\n\"Author\" refers to any designer, engineer, programmer, technical\nwriter or other person who contributed to the Font Software.\n\nPERMISSION & CONDITIONS\nPermission is hereby granted, free of charge, to any person obtaining\na copy of the Font Software, to use, study, copy, merge, embed, modify,\nredistribute, and sell modified and unmodified copies of the Font\nSoftware, subject to the following conditions:\n\n1) Neither the Font Software nor any of its individual components,\nin Original or Modified Versions, may be sold by itself.\n\n2) Original or Modified Versions of the Font Software may be bundled,\nredistributed and/or sold with any software, provided that each copy\ncontains the above copyright notice and this license. These can be\nincluded either as stand-alone text files, human-readable headers or\nin the appropriate machine-readable metadata fields within text or\nbinary files as long as those fields can be easily viewed by the user.\n\n3) No Modified Version of the Font Software may use the Reserved Font\nName(s) unless explicit written permission is granted by the corresponding\nCopyright Holder. This restriction only applies to the primary font name as\npresented to the users.\n\n4) The name(s) of the Copyright Holder(s) or the Author(s) of the Font\nSoftware shall not be used to promote, endorse or advertise any\nModified Version, except to acknowledge the contribution(s) of the\nCopyright Holder(s) and the Author(s) or with their explicit written\npermission.\n\n5) The Font Software, modified or unmodified, in part or in whole,\nmust be distributed entirely under this license, and must not be\ndistributed under any other license. The requirement for fonts to\nremain under this license does not apply to any document created\nusing the Font Software.\n\nTERMINATION\nThis license becomes null and void if any of the above conditions are\nnot met.\n\nDISCLAIMER\nTHE FONT SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT\nOF COPYRIGHT, PATENT, TRADEMARK, OR OTHER RIGHT. IN NO EVENT SHALL THE\nCOPYRIGHT HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nINCLUDING ANY GENERAL, SPECIAL, INDIRECT, INCIDENTAL, OR CONSEQUENTIAL\nDAMAGES, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF THE USE OR INABILITY TO USE THE FONT SOFTWARE OR FROM\nOTHER DEALINGS IN THE FONT SOFTWARE.\n\n## Other source licensing (MIT)\n\nCopyright (c) 2021 Yuko OTAWARA\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8408203125,
          "content": "# PlemolJP („Éó„É¨„É¢„É´ „Ç∏„Çß„Ç§„Éî„Éº)\n\n***Ple***x ***Mo***no ***L***anguage ***JP***\n\nIBM Plex Mono „Å® IBM Plex Sans JP „ÇíÂêàÊàê„Åó„ÅüÊó•Êú¨Ë™û„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Éï„Ç©„É≥„Éà PlemolJP („Éó„É¨„É¢„É´ „Ç∏„Çß„Ç§„Éî„Éº)\n\n**„ÉÄ„Ç¶„É≥„É≠„Éº„Éâ„ÅØ„Åì„Å°„Çâ ‚û° [Releases](https://github.com/yuru7/PlemolJP/releases/latest)**\n\n> üí° [Homebrew (Mac) „Åß„ÅÆ„Ç§„É≥„Çπ„Éà„Éº„É´ÊñπÊ≥ï](doc/install_via_homebrew.md)\n\n![image](https://github.com/yuru7/PlemolJP/raw/images/beer.jpg)\n\nPlemolJP „Åß„ÅØÂêàÊàêÂÖÉ„ÅÆ [IBM Plex Mono](https://github.com/IBM/plex) „Ç∑„É™„Éº„Ç∫„Å®ÂêåÊßò„Å´„ÄÅ„Éé„Éº„Éû„É´„Éª„Ç§„Çø„É™„ÉÉ„ÇØ„ÅÆ‰∏°„Çπ„Çø„Ç§„É´„Å´ÂØæÂøú„Åó„Åæ„Åó„Åü„ÄÇ„Åæ„Åü„ÄÅÂêÑ„Çπ„Çø„Ç§„É´„Åî„Å®„Å´8Á®Æ„ÅÆ„Ç¶„Çß„Ç§„Éà (Thin~Bold) „Çí„ÅîÁî®ÊÑè„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇ  \n\n„Åï„Çâ„Å´Êó•Êú¨Ë™ûÁí∞Â¢É„Åß„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Åß„Å§„Åæ„Åö„Åç„Åå„Å°„Å™ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÅÆË™§ÂÖ•Âäõ„Å´Ê∞ó„Å•„Åë„Çã„Çà„ÅÜ„ÄÅÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÇíÂèØË¶ñÂåñ„Åô„Çã‰øÆÊ≠£„ÇíÂä†„Åà„Å¶„ÅÑ„Åæ„Åô„ÄÇ  \n\n> üí° ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÅÆÂèØË¶ñÂåñ„Åå‰∏çË¶Å„Å™Â†¥Âêà„ÅØ„ÄÅ„É™„É™„Éº„Çπ„ÅÆ Assets „Çà„Çä `PlemolJP_HS_vx.x.x.zip` „ÅÆÂêçÂâçÂΩ¢Âºè„Å´„Å™„Å£„Å¶„ÅÑ„Çã zip „Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ(HS: Hidden Space)\n\n> üí° Powerline Ë®òÂè∑Á≠â„ÅåÂê´„Åæ„Çå„Çã Nerd Fonts ÂØæÂøúÁâà„ÅØ„ÄÅ„É™„É™„Éº„Çπ„ÅÆ Assets „Çà„Çä `PlemolJP_NF_vx.x.x.zip` „ÅÆÂêçÂâçÂΩ¢Âºè„Å´„Å™„Å£„Å¶„ÅÑ„Çã zip „Éï„Ç°„Ç§„É´„ÇíÈÅ∏Êäû„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ(NF: Nerd Fonts)\n\n|**„Éï„Ç©„É≥„Éà „Éï„Ç°„Éü„É™„Éº**|**Ë™¨Êòé**|\n|:------------:|:---|\n|**PlemolJP**|ÊñáÂ≠óÂπÖÊØîÁéá„ÄåÂçäËßí1:ÂÖ®Ëßí2„Äç„ÅÆÈÄöÂ∏∏Áâà„ÅÆ PlemolJP„ÄÇ‰∏ª„Å´ASCII„Ç≥„Éº„Éâ„ÅÆËã±Êï∞Â≠óË®òÂè∑„Å´ IBM Plex Mono „ÅÆÂ≠ó‰Ωì„Çí‰Ωø„ÅÑ„ÄÅ„Åù„ÅÆ‰ªñ„ÅÆÊó•Êú¨Ë™ûÊñáÂ≠ó„ÇÑË®òÂè∑È°û„Å´ IBM Plex Sans JP „Çí‰Ωø„Å£„Å¶„ÅÑ„Çã„ÄÇ|\n|**PlemolJP Console**|IBM Plex Mono „ÅÆÂ≠ó‰Ωì„ÇíÈô§Â§ñ„Åõ„Åö„Å´ÂÖ®„Å¶ÈÅ©Áî®„Åó„Åü„Éï„Ç©„É≥„Éà„Éï„Ç°„Éü„É™„Éº„ÄÇÁü¢Âç∞Ë®òÂè∑„Å™„Å©„ÅÆÂ§ö„Åè„ÅÆË®òÂè∑„ÅåÂçäËßí„ÅßË°®Á§∫„Åï„Çå„Çã„Åü„ÇÅ„ÄÅ„Ç≥„É≥„ÇΩ„Éº„É´„Åß„ÅÆÂà©Áî®„ÇÑË®òÂè∑È°û„ÅØÂèØËÉΩ„Å™Èôê„ÇäÂçäËßí„ÅßË°®Á§∫„Åó„Åü„ÅÑ‰∫∫„Å´„Ç™„Çπ„Çπ„É°„ÄÇ|\n|**PlemolJP35**|ÈÄöÂ∏∏Áâà„ÅÆ PlemolJP „ÅÆÊñáÂ≠óÂπÖÊØîÁéá„Çí„ÄåÂçäËßí3:ÂÖ®Ëßí5„Äç„Å´„Åó„Åü„Éï„Ç©„É≥„Éà„Éï„Ç°„Éü„É™„Éº„ÄÇËã±Êï∞Â≠ó„ÅåÈÄöÂ∏∏Áâà„ÅÆ PlemolJP „Çà„Çä„ÇÇÂ§ß„Åç„ÅèË°®Á§∫„Åï„Çå„Çã„ÄÇÊó•Êú¨Ë™û„ÅåÂ∞ë„Å™„ÅÑÊñáÊõ∏„ÇÑ„Ç≥„Éº„Éâ„ÅÆÂ†¥Âêà„Å´„ÅØ„Åì„Å°„Çâ„ÅÆÊñπ„ÅåË™≠„Åø„ÇÑ„Åô„ÅÑ„Å®ÊÑü„Åò„Çã„Åã„ÇÇ„Åó„Çå„Å™„ÅÑ„ÄÇ|\n|**PlemolJP35 Console**|PlemolJP Console „ÅÆÊñáÂ≠óÂπÖÊØîÁéá„Çí ÂçäËßí3:ÂÖ®Ëßí5 „Å´„Åó„Åü„Éï„Ç©„É≥„Éà„Éï„Ç°„Éü„É™„Éº|\n\n> üí° „Åù„ÅÆ‰ªñ„ÄÅÂÖ¨Èñã‰∏≠„ÅÆ„Éó„É≠„Ç∞„É©„Éü„É≥„Ç∞„Éï„Ç©„É≥„Éà\n> - Êó•Êú¨Ë™ûÊñáÂ≠ó„Å´Ê∫êÊüî„Ç¥„Ç∑„ÉÉ„ÇØ„ÄÅËã±Êï∞Â≠óÈÉ®ÂàÜ„Å´ Hack „Çí‰Ωø„Å£„Åü [**ÁôΩÊ∫ê („ÅØ„Åè„Åí„ÇìÔºèHackGen)**](https://github.com/yuru7/HackGen)\n> - Êó•Êú¨Ë™ûÊñáÂ≠ó„Å´Ê∫êÁúü„Ç¥„Ç∑„ÉÉ„ÇØ„ÄÅËã±Êï∞Â≠óÈÉ®ÂàÜ„Å´ Fira Mono „Çí‰Ωø„Å£„Åü [**Firge („Éï„Ç°„Éº„Ç∏)**](https://github.com/yuru7/Firge)\n> - Êó•Êú¨Ë™ûÊñáÂ≠ó„Å´BIZ UD„Ç¥„Ç∑„ÉÉ„ÇØ„ÄÅËã±Êï∞Â≠óÈÉ®ÂàÜ„Å´ JetBrains Mono „Çí‰Ωø„Å£„Åü [**UDEV Gothic**](https://github.com/yuru7/udev-gothic)\n\n|Thin|ExtraLight|Light|Regular|\n|:---:|:---:|:---:|:---:|\n|![Thin](https://user-images.githubusercontent.com/13458509/133928702-21f1f391-e83a-4825-9059-36cf3d35f6f7.png)|![ExtraLight](https://user-images.githubusercontent.com/13458509/133928717-f5e17c66-b4e1-47fe-950f-ca3bc574a874.png)|![Light](https://user-images.githubusercontent.com/13458509/133928734-3ca98395-97b9-417b-96a1-ef83f614739a.png)|![Regular](https://user-images.githubusercontent.com/13458509/133928745-fe85ba2e-0d5e-406c-9d23-c832e11bc7b4.png)|\n\n|Text|Medium|SemiBold|Bold|\n|:---:|:---:|:---:|:---:|\n|![Text](https://user-images.githubusercontent.com/13458509/133928757-af5b6b82-5e1f-41bb-a925-f03769bdad00.png)|![Medium](https://user-images.githubusercontent.com/13458509/133928766-a4b22651-cc1c-48d7-b729-15a6a4070f44.png)|![SemiBold](https://user-images.githubusercontent.com/13458509/133928774-d8467d02-c301-4bef-84e5-1702f9f9645d.png)|![Bold](https://user-images.githubusercontent.com/13458509/133928784-7cc5f571-1161-41de-81b8-b97573e3f524.png)|\n"
        },
        {
          "name": "bak",
          "type": "tree",
          "content": null
        },
        {
          "name": "build.ini",
          "type": "blob",
          "size": 0.6220703125,
          "content": "[DEFAULT]\nVERSION = v2.0.2\nFONT_NAME = PlemolJP\nJP_FONT = IBM-Plex-Sans-JP/unhinted/IBMPlexSansJP-{style}.ttf\nENG_FONT = IBM-Plex-Mono/IBMPlexMono-{style}.ttf\nHACK_FONT = hack/Hack-{style}.ttf\nSOURCE_FONTS_DIR = source\nBUILD_FONTS_DIR = build\nVENDER_NAME = TWR\nFONTFORGE_PREFIX = fontforge_\nFONTTOOLS_PREFIX = fonttools_\nIDEOGRAPHIC_SPACE = AdjustedGlyphs/ideographic_space.sfd\nADJUST_R = AdjustedGlyphs/r-{style}.sfd\nCONSOLE_STR = Console\nWIDTH_35_STR = 35\nNERD_FONTS_STR = NF\nINVISIBLE_ZENKAKU_SPACE_STR = HS\nEM_ASCENT = 880\nEM_DESCENT = 120\nOS2_ASCENT = 950\nOS2_DESCENT = 225\nHALF_WIDTH_12 = 528\nFULL_WIDTH_35 = 1000\nITALIC_ANGLE = 9\n"
        },
        {
          "name": "doc",
          "type": "tree",
          "content": null
        },
        {
          "name": "fontforge_script.py",
          "type": "blob",
          "size": 41.15625,
          "content": "#!fontforge --lang=py -script\n\n# 2„Å§„ÅÆ„Éï„Ç©„É≥„Éà„ÇíÂêàÊàê„Åô„Çã\n\nimport configparser\nimport math\nimport os\nimport shutil\nimport sys\nimport uuid\nfrom decimal import ROUND_HALF_UP, Decimal\n\nimport fontforge\nimport psMat\n\n# ini„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ\nsettings = configparser.ConfigParser()\nsettings.read(\"build.ini\", encoding=\"utf-8\")\n\nVERSION = settings.get(\"DEFAULT\", \"VERSION\")\nFONT_NAME = settings.get(\"DEFAULT\", \"FONT_NAME\")\nJP_FONT = settings.get(\"DEFAULT\", \"JP_FONT\")\nENG_FONT = settings.get(\"DEFAULT\", \"ENG_FONT\")\nHACK_FONT = settings.get(\"DEFAULT\", \"HACK_FONT\")\nSOURCE_FONTS_DIR = settings.get(\"DEFAULT\", \"SOURCE_FONTS_DIR\")\nBUILD_FONTS_DIR = settings.get(\"DEFAULT\", \"BUILD_FONTS_DIR\")\nVENDER_NAME = settings.get(\"DEFAULT\", \"VENDER_NAME\")\nFONTFORGE_PREFIX = settings.get(\"DEFAULT\", \"FONTFORGE_PREFIX\")\nIDEOGRAPHIC_SPACE = settings.get(\"DEFAULT\", \"IDEOGRAPHIC_SPACE\")\nADJUST_R = settings.get(\"DEFAULT\", \"ADJUST_R\")\nCONSOLE_STR = settings.get(\"DEFAULT\", \"CONSOLE_STR\")\nWIDTH_35_STR = settings.get(\"DEFAULT\", \"WIDTH_35_STR\")\nINVISIBLE_ZENKAKU_SPACE_STR = settings.get(\"DEFAULT\", \"INVISIBLE_ZENKAKU_SPACE_STR\")\nNERD_FONTS_STR = settings.get(\"DEFAULT\", \"NERD_FONTS_STR\")\nEM_ASCENT = int(settings.get(\"DEFAULT\", \"EM_ASCENT\"))\nEM_DESCENT = int(settings.get(\"DEFAULT\", \"EM_DESCENT\"))\nOS2_ASCENT = int(settings.get(\"DEFAULT\", \"OS2_ASCENT\"))\nOS2_DESCENT = int(settings.get(\"DEFAULT\", \"OS2_DESCENT\"))\nHALF_WIDTH_12 = int(settings.get(\"DEFAULT\", \"HALF_WIDTH_12\"))\nFULL_WIDTH_35 = int(settings.get(\"DEFAULT\", \"FULL_WIDTH_35\"))\nITALIC_ANGLE = int(settings.get(\"DEFAULT\", \"ITALIC_ANGLE\"))\n\nCOPYRIGHT = \"\"\"[IBM Plex]\nCopyright (c) 2017 IBM Corp. https://github.com/IBM/plex\n\n[Hack]\nCopyright 2018 Source Foundry Authors https://github.com/source-foundry/Hack\n\n[Nerd Fonts]\nCopyright (c) 2014, Ryan L McIntyre https://ryanlmcintyre.com\n\n[PlemolJP]\nCopyright (c) 2021, Yuko Otawara\n\"\"\"  # noqa: E501\n\noptions = {}\nnerd_font = None\n\n\ndef main():\n    # „Ç™„Éó„Ç∑„Éß„É≥Âà§ÂÆö\n    get_options()\n    if options.get(\"unknown-option\"):\n        usage()\n        return\n\n    # build„Éá„Ç£„É¨„ÇØ„Éà„É™„Çí‰ΩúÊàê„Åô„Çã\n    if os.path.exists(BUILD_FONTS_DIR) and not options.get(\"do-not-delete-build-dir\"):\n        shutil.rmtree(BUILD_FONTS_DIR)\n        os.mkdir(BUILD_FONTS_DIR)\n    if not os.path.exists(BUILD_FONTS_DIR):\n        os.mkdir(BUILD_FONTS_DIR)\n\n    generate_font(\n        jp_style=\"Regular\",\n        eng_style=\"Regular\",\n        merged_style=\"Regular\",\n    )\n\n    # „Éá„Éê„ÉÉ„Ç∞„É¢„Éº„Éâ„ÅÆÂ†¥Âêà„ÅØ„Åì„Åì„ÅßÁµÇ‰∫Ü\n    if options.get(\"debug\"):\n        return\n\n    generate_font(\n        jp_style=\"Bold\",\n        eng_style=\"Bold\",\n        merged_style=\"Bold\",\n    )\n\n    generate_font(\n        jp_style=\"Thin\",\n        eng_style=\"Thin\",\n        merged_style=\"Thin\",\n    )\n    generate_font(\n        jp_style=\"ExtraLight\",\n        eng_style=\"ExtraLight\",\n        merged_style=\"ExtraLight\",\n    )\n    generate_font(\n        jp_style=\"Light\",\n        eng_style=\"Light\",\n        merged_style=\"Light\",\n    )\n    generate_font(\n        jp_style=\"Text\",\n        eng_style=\"Text\",\n        merged_style=\"Text\",\n    )\n    generate_font(\n        jp_style=\"Medium\",\n        eng_style=\"Medium\",\n        merged_style=\"Medium\",\n    )\n    generate_font(\n        jp_style=\"SemiBold\",\n        eng_style=\"SemiBold\",\n        merged_style=\"SemiBold\",\n    )\n\n    generate_font(\n        jp_style=\"Regular\",\n        eng_style=\"Italic\",\n        merged_style=\"Italic\",\n    )\n    generate_font(\n        jp_style=\"Bold\",\n        eng_style=\"BoldItalic\",\n        merged_style=\"BoldItalic\",\n    )\n    generate_font(\n        jp_style=\"Thin\",\n        eng_style=\"ThinItalic\",\n        merged_style=\"ThinItalic\",\n    )\n    generate_font(\n        jp_style=\"ExtraLight\",\n        eng_style=\"ExtraLightItalic\",\n        merged_style=\"ExtraLightItalic\",\n    )\n    generate_font(\n        jp_style=\"Light\",\n        eng_style=\"LightItalic\",\n        merged_style=\"LightItalic\",\n    )\n    generate_font(\n        jp_style=\"Text\",\n        eng_style=\"TextItalic\",\n        merged_style=\"TextItalic\",\n    )\n    generate_font(\n        jp_style=\"Medium\",\n        eng_style=\"MediumItalic\",\n        merged_style=\"MediumItalic\",\n    )\n    generate_font(\n        jp_style=\"SemiBold\",\n        eng_style=\"SemiBoldItalic\",\n        merged_style=\"SemiBoldItalic\",\n    )\n\n\ndef usage():\n    print(\n        f\"Usage: {sys.argv[0]} \"\n        \"[--hidden-zenkaku-space] [--35] [--console] [--nerd-font]\"\n    )\n\n\ndef get_options():\n    \"\"\"„Ç™„Éó„Ç∑„Éß„É≥„ÇíÂèñÂæó„Åô„Çã\"\"\"\n\n    global options\n\n    # „Ç™„Éó„Ç∑„Éß„É≥„Å™„Åó„ÅÆÂ†¥Âêà„ÅØ‰Ωï„ÇÇ„Åó„Å™„ÅÑ\n    if len(sys.argv) == 1:\n        return\n\n    for arg in sys.argv[1:]:\n        # „Ç™„Éó„Ç∑„Éß„É≥Âà§ÂÆö\n        if arg == \"--do-not-delete-build-dir\":\n            options[\"do-not-delete-build-dir\"] = True\n        elif arg == \"--debug\":\n            options[\"debug\"] = True\n        elif arg == \"--hidden-zenkaku-space\":\n            options[\"hidden-zenkaku-space\"] = True\n        elif arg == \"--35\":\n            options[\"35\"] = True\n        elif arg == \"--console\":\n            options[\"console\"] = True\n        elif arg == \"--nerd-font\":\n            options[\"nerd-font\"] = True\n        else:\n            options[\"unknown-option\"] = True\n            return\n\n\ndef generate_font(jp_style, eng_style, merged_style):\n    print(f\"=== Generate {merged_style} ===\")\n\n    # ÂêàÊàê„Åô„Çã„Éï„Ç©„É≥„Éà„ÇíÈñã„Åè\n    jp_font, eng_font = open_fonts(jp_style, eng_style)\n\n    # „Éï„Ç©„É≥„Éà„ÅÆEM„ÇíÊèÉ„Åà„Çã\n    adjust_em(eng_font)\n\n    # Hack „Éï„Ç©„É≥„Éà„Çí„Éû„Éº„Ç∏„Åô„Çã\n    merge_hack(jp_font, eng_font, merged_style)\n\n    if options.get(\"console\"):\n        # East Asian Ambiguous Width ÊñáÂ≠ó„ÅÆÂçäËßíÂåñ\n        eaaw_width_to_half(jp_font)\n        # „Ç≥„É≥„ÇΩ„Éº„É´Áî®„Ç∞„É™„Éï„ÇíËøΩÂä†„Åô„Çã\n        add_console_glyphs(eng_font)\n\n    if not options.get(\"console\"):\n        delete_not_console_glyphs(eng_font)\n\n    # ÈáçË§á„Åô„Çã„Ç∞„É™„Éï„ÇíÂâäÈô§„Åô„Çã\n    jp_font = delete_duplicate_glyphs(jp_font, eng_font)\n\n    # „ÅÑ„Åè„Å§„Åã„ÅÆ„Ç∞„É™„ÉïÂΩ¢Áä∂„Å´Ë™øÊï¥„ÇíÂä†„Åà„Çã\n    adjust_some_glyph(jp_font, eng_font, merged_style)\n\n    # Êó•Êú¨Ë™û„Ç∞„É™„Éï„ÅÆÊñú‰Ωì„ÇíÁîüÊàê„Åô„Çã\n    if \"Italic\" in merged_style:\n        transform_italic_glyphs(jp_font)\n\n    # ÂçäËßíÂπÖ„ÅãÂÖ®ËßíÂπÖ„Å´„Å™„Çã„Çà„ÅÜ„Å´Â§âÊèõ„Åô„Çã\n    set_width_600_or_1000(jp_font)\n\n    if options.get(\"35\"):\n        # eng_font„Çí3:5ÂπÖ„Å´„Åô„Çã\n        adjust_width_35_eng(eng_font)\n        # jp_font„Çí3:5ÂπÖ„Å´„Åô„Çã\n        adjust_width_35_jp(jp_font)\n    else:\n        # 1:2 ÂπÖ„Å´„Åô„Çã\n        transform_half_width(jp_font, eng_font)\n        # Ë¶èÂÆö„ÅÆÂπÖ„Åã„Çâ„ÅØ„ÅøÂá∫„Åó„Åü„Ç∞„É™„Éï„Çµ„Ç§„Ç∫„ÇíÁ∏ÆÂ∞è„Åô„Çã\n        down_scale_redundant_size_glyph(eng_font)\n\n    # GPOS„ÉÜ„Éº„Éñ„É´„ÇíÂâäÈô§„Åô„Çã\n    remove_lookups(jp_font, remove_gsub=False, remove_gpos=True)\n\n    # ÁΩ´Á∑ö„ÇíÂÖ®Ëßí„Å´„Åô„Çã\n    if not options.get(\"console\"):\n        make_box_drawing_full_width(eng_font, jp_font)\n\n    # ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÇíÂèØË¶ñÂåñ„Åô„Çã\n    if not options.get(\"hidden-zenkaku-space\"):\n        visualize_zenkaku_space(jp_font)\n\n    # Nerd Font„ÅÆ„Ç∞„É™„Éï„ÇíËøΩÂä†„Åô„Çã\n    if options.get(\"nerd-font\"):\n        add_nerd_font_glyphs(jp_font, eng_font)\n\n    # „Ç™„Éó„Ç∑„Éß„É≥ÊØé„ÅÆ‰øÆÈ£æÂ≠ê„ÇíËøΩÂä†„Åô„Çã\n    variant = f\"{WIDTH_35_STR} \" if options.get(\"35\") else \"\"\n    variant += f\"{CONSOLE_STR} \" if options.get(\"console\") else \"\"\n    variant += (\n        INVISIBLE_ZENKAKU_SPACE_STR if options.get(\"hidden-zenkaku-space\") else \"\"\n    )\n    variant += NERD_FONTS_STR if options.get(\"nerd-font\") else \"\"\n    variant = variant.strip()\n\n    # macOS„Åß„ÅÆpost„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩøÁî®ÊÄß„Ç®„É©„ÉºÂØæÁ≠ñ\n    # ÈáçË§á„Åô„Çã„Ç∞„É™„ÉïÂêç„ÇíÊåÅ„Å§„Ç∞„É™„Éï„Çí„É™„Éç„Éº„É†„Åô„Çã\n    delete_glyphs_with_duplicate_glyph_names(eng_font)\n    delete_glyphs_with_duplicate_glyph_names(jp_font)\n\n    # „É°„Çø„Éá„Éº„Çø„ÇíÁ∑®ÈõÜ„Åô„Çã\n    cap_height = int(\n        Decimal(str(eng_font[0x0048].boundingBox()[3])).quantize(\n            Decimal(\"0\"), ROUND_HALF_UP\n        )\n    )\n    x_height = int(\n        Decimal(str(eng_font[0x0078].boundingBox()[3])).quantize(\n            Decimal(\"0\"), ROUND_HALF_UP\n        )\n    )\n    edit_meta_data(eng_font, merged_style, variant, cap_height, x_height)\n    edit_meta_data(jp_font, merged_style, variant, cap_height, x_height)\n\n    # ttf„Éï„Ç°„Ç§„É´„Å´‰øùÂ≠ò\n    # „Éí„É≥„ÉÜ„Ç£„É≥„Ç∞„ÅåÊÆã„Å£„Å¶„ÅÑ„Çã„Å®‰∏çÂÖ∑Âêà„Å´Áπã„Åå„Çä„Åå„Å°„Å™„ÅÆ„ÅßÂ§ñ„Åô„ÄÇ\n    # „Éí„É≥„ÉÜ„Ç£„É≥„Ç∞„ÅØ„ÅÇ„Å®„Åß ttfautohint „ÅßË°å„ÅÜ„ÄÇ\n    # flags=(\"no-hints\", \"omit-instructions\") „Çí‰Ωø„ÅÜ„Å®„Éí„É≥„ÉÜ„Ç£„É≥„Ç∞„Å†„Åë„Åß„Å™„Åè GPOS „ÇÑ GSUB „ÇÇÂâäÈô§„Åï„Çå„Å¶„Åó„Åæ„ÅÜ„ÅÆ„Åß‰Ωø„Çè„Å™„ÅÑ\n    font_name = f\"{FONT_NAME}{variant}\".replace(\" \", \"\")\n    eng_font.generate(\n        f\"{BUILD_FONTS_DIR}/{FONTFORGE_PREFIX}{font_name}-{merged_style}-eng.ttf\",\n    )\n    jp_font.generate(\n        f\"{BUILD_FONTS_DIR}/{FONTFORGE_PREFIX}{font_name}-{merged_style}-jp.ttf\",\n    )\n\n    # ttf„ÇíÈñâ„Åò„Çã\n    jp_font.close()\n    eng_font.close()\n\n\ndef open_fonts(jp_style: str, eng_style: str):\n    \"\"\"„Éï„Ç©„É≥„Éà„ÇíÈñã„Åè\"\"\"\n    jp_font = fontforge.open(\n        SOURCE_FONTS_DIR + \"/\" + JP_FONT.replace(\"{style}\", jp_style)\n    )\n    eng_font = fontforge.open(\n        SOURCE_FONTS_DIR + \"/\" + ENG_FONT.replace(\"{style}\", eng_style)\n    )\n\n    # „Éï„Ç©„É≥„ÉàÂèÇÁÖß„ÇíËß£Èô§„Åô„Çã\n    for glyph in jp_font.glyphs():\n        if glyph.isWorthOutputting():\n            jp_font.selection.select((\"more\", None), glyph)\n    jp_font.unlinkReferences()\n    for glyph in eng_font.glyphs():\n        if glyph.isWorthOutputting():\n            eng_font.selection.select((\"more\", None), glyph)\n    eng_font.unlinkReferences()\n    jp_font.selection.none()\n    eng_font.selection.none()\n\n    return jp_font, eng_font\n\n\ndef adjust_some_glyph(jp_font, eng_font, style=\"Regular\"):\n    \"\"\"„ÅÑ„Åè„Å§„Åã„ÅÆ„Ç∞„É™„ÉïÂΩ¢Áä∂„Å´Ë™øÊï¥„ÇíÂä†„Åà„Çã\"\"\"\n    eng_glyph_width = eng_font[0x0020].width\n    full_width = jp_font[0x3042].width\n    if options.get(\"35\"):\n        half_width = eng_glyph_width\n    else:\n        half_width = int(full_width / 2)\n\n    # „ÇØ„Ç©„Éº„ÉÜ„Éº„Ç∑„Éß„É≥„ÅÆÊã°Â§ß\n    eng_font.selection.select((\"unicode\", None), 0x0060)\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.transform(psMat.rotate(math.radians(-25)))\n        glyph.transform(psMat.scale(1.08, 1.2))\n        glyph.transform(psMat.rotate(math.radians(33)))\n        glyph.transform(psMat.translate(110, -135))\n        glyph.width = eng_glyph_width\n    eng_font.selection.select((\"unicode\", None), 0x0027)\n    eng_font.selection.select((\"unicode\", \"more\"), 0x0022)\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.transform(psMat.scale(1.09, 1.06))\n        glyph.transform(psMat.translate((eng_glyph_width - glyph.width) / 2, 0))\n        glyph.width = eng_glyph_width\n    # ; : , . „ÅÆÊã°Â§ß\n    eng_font.selection.select((\"unicode\", None), 0x003A)\n    eng_font.selection.select((\"unicode\", \"more\"), 0x003B)\n    eng_font.selection.select((\"unicode\", \"more\"), 0x002C)\n    eng_font.selection.select((\"unicode\", \"more\"), 0x002E)\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.transform(psMat.scale(1.08, 1.08))\n        glyph.transform(psMat.translate((eng_glyph_width - glyph.width) / 2, 0))\n        glyph.width = eng_glyph_width\n    # Eclipse Pleiades ÂçäËßí„Çπ„Éö„Éº„ÇπË®òÂè∑ (U+1d1c) ÂØæÁ≠ñ\n    eng_font.selection.select((\"unicode\", None), 0x054D)\n    eng_font.copy()\n    eng_font.selection.select((\"unicode\", None), 0x1D1C)\n    eng_font.paste()\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.transform(psMat.scale(0.85, 0.6))\n        glyph.transform(psMat.translate((eng_glyph_width - glyph.width) / 2, 0))\n        glyph.width = eng_glyph_width\n\n    # ÂÖ®ËßíÊã¨Âºß„ÅÆÈñã„Åç„ÇíÂ∫É„Åè„Åô„Çã\n    for glyph_name in [0xFF08, 0xFF3B, 0xFF5B]:\n        glyph = jp_font[glyph_name]\n        glyph.transform(psMat.translate(-180, 0))\n        glyph.width = full_width\n    for glyph_name in [0xFF09, 0xFF3D, 0xFF5D]:\n        glyph = jp_font[glyph_name]\n        glyph.transform(psMat.translate(180, 0))\n        glyph.width = full_width\n    # ÂÖ®Ëßí„Éî„É™„Ç™„Éâ„ÄÅ„Ç´„É≥„Éû„ÇíÊã°Â§ß„Åô„Çã\n    for glyph in jp_font.selection.select((\"unicode\", None), 0xFF0E).byGlyphs:\n        glyph.transform(psMat.scale(1.45, 1.45))\n        glyph.width = full_width\n    for glyph in jp_font.selection.select((\"unicode\", None), 0xFF0C).byGlyphs:\n        glyph.transform(psMat.scale(1.40, 1.40))\n        glyph.width = full_width\n    # LEFT SINGLE QUOTATION MARK (U+2018) ÔΩû DOUBLE LOW-9 QUOTATION MARK (U+201E) „ÅÆÂπÖ„ÇíÂÖ®ËßíÂπÖ„Å´„Åô„Çã\n    for glyph in jp_font.selection.select(\n        (\"unicode\", \"ranges\"), 0x2018, 0x2019\n    ).byGlyphs:\n        glyph.transform(psMat.scale(1.25, 1.25))\n        glyph.transform(psMat.translate((full_width - glyph.width) / 2, -150))\n        glyph.width = full_width\n    for glyph in jp_font.selection.select(\n        (\"unicode\", \"ranges\"), 0x201C, 0x201D\n    ).byGlyphs:\n        glyph.transform(psMat.scale(1.25, 1.25))\n        glyph.transform(psMat.translate((full_width - glyph.width) / 2, -150))\n        glyph.width = full_width\n\n    # Cent Sign, Pound Sign, Yen Sign „ÅØÂçäËßíË®òÂè∑„Å´ IBM Plex Sans JP „Çí‰ΩøÁî®\n    jp_font.selection.select((\"unicode\", None), 0x00A2)\n    jp_font.selection.select((\"unicode\", \"more\"), 0x00A3)\n    jp_font.selection.select((\"unicode\", \"more\"), 0x00A5)\n    for glyph in jp_font.selection.byGlyphs:\n        x_scale = half_width / glyph.width\n        if x_scale < 1:\n            glyph.transform(psMat.scale(x_scale, 1))\n        # Âæå„Åã„ÇâËã±Ë™û„Éï„Ç©„É≥„Éà„Å®Âêå„ÅòÂπÖ„Å´„Åô„Çã„Åü„ÇÅ„Å´‰∏ÄÊó¶500ÂπÖ„Å®„Åó„Å¶Êâ±„ÅÜ\n        glyph.transform(psMat.translate((500 - glyph.width) / 2, 0))\n        glyph.width = 500\n\n    # r „Ç∞„É™„Éï„ÅÆË™øÊï¥\n    if \"Italic\" not in style:\n        eng_font[0x0072].clear()\n        eng_font[0x0155].clear()\n        eng_font[0x0157].clear()\n        eng_font[0x0159].clear()\n        eng_font.mergeFonts(f\"{SOURCE_FONTS_DIR}/\" + ADJUST_R.replace(\"{style}\", style))\n\n    # Áü¢Âç∞Ë®òÂè∑„ÅÆË™≠„Åø„Å•„Çâ„ÅïÂØæÁ≠ñ\n    for uni in [*range(0x21CD, 0x21CF + 1), 0x21D0, 0x21D2, 0x21D4, 0x21DA, 0x21DB]:\n        eng_font.selection.select((\"unicode\", None), uni)\n        for glyph in eng_font.selection.byGlyphs:\n            scale_glyph_from_center(glyph, 1, 1.3)\n    for uni in [0x21D1, 0x21D3]:\n        eng_font.selection.select((\"unicode\", None), uni)\n        for glyph in eng_font.selection.byGlyphs:\n            scale_glyph_from_center(glyph, 1.3, 1)\n    for uni in range(0x21D6, 0x21D9 + 1):\n        eng_font.selection.select((\"unicode\", None), uni)\n        for glyph in eng_font.selection.byGlyphs:\n            scale_glyph_from_center(glyph, 1.3, 1.3)\n\n    # ÈÅ∏ÊäûËß£Èô§\n    jp_font.selection.none()\n    eng_font.selection.none()\n\n\ndef adjust_em(font):\n    \"\"\"„Éï„Ç©„É≥„Éà„ÅÆEM„ÇíÊèÉ„Åà„Çã\"\"\"\n    font.em = EM_ASCENT + EM_DESCENT\n\n\ndef delete_duplicate_glyphs(jp_font, eng_font):\n    \"\"\"jp_font„Å®eng_font„ÅÆ„Ç∞„É™„Éï„ÇíÊØîËºÉ„Åó„ÄÅÈáçË§á„Åô„Çã„Ç∞„É™„Éï„ÇíÂâäÈô§„Åô„Çã\"\"\"\n\n    eng_font.selection.none()\n    jp_font.selection.none()\n\n    # IBM Plex Sans JP „Ç∞„É™„Éï„Çí‰ΩøÁî®\n    eng_font[0x00A2].clear()  # Cent Sign\n    eng_font[0x00A3].clear()  # Pound Sign\n    eng_font[0x00A5].clear()  # Yen Sign\n    eng_font[0x3000].clear()  # ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ\n    # U+274C (CROSS MARK) „ÇíÂâäÈô§ (OS„Å´Âê´„Åæ„Çå„ÇãÁµµÊñáÂ≠ó„Éï„Ç©„É≥„Éà„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Åï„Åõ„Çã„Åü„ÇÅ)\n    eng_font[0x274C].clear()\n    # LATIN Á≥ª„Ç∞„É™„Éï„Å´„ÅØ IBM Plex Mono „Çí‰ΩøÁî®\n    for glyph in jp_font.glyphs():\n        if 0x00C0 <= glyph.unicode <= 0x00D6:\n            glyph.clear()\n        elif 0x00D8 <= glyph.unicode <= 0x00F6:\n            glyph.clear()\n        elif 0x00F8 <= glyph.unicode <= 0x0259:\n            glyph.clear()\n\n    for glyph in jp_font.glyphs(\"encoding\"):\n        try:\n            if glyph.isWorthOutputting() and glyph.unicode > 0:\n                eng_font.selection.select((\"more\", \"unicode\"), glyph.unicode)\n        except ValueError:\n            # Encoding is out of range „ÅÆ„Å®„Åç„ÅØÁ∂ôÁ∂ö„Åô„Çã\n            continue\n\n    # ÂâäÈô§ÁÆáÊâÄ„Å´ altuni „ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÅØÂâäÈô§„Åô„ÇãÂâç„Å´„Ç≥„Éî„Éº„Åô„Çã\n    for glyph in eng_font.selection.byGlyphs:\n        jp_font.selection.select((\"more\", \"unicode\"), glyph.unicode)\n    altuni_glyph_list = []\n    for glyph in jp_font.selection.byGlyphs:\n        if glyph.altuni:\n            altuni_glyph_list.append(glyph.unicode)\n            for u in glyph.altuni:\n                print(f\"Copying glyph U+{glyph.unicode:04X} to U+{u[0]:04X}\")\n    jp_font = materialize_altuni_glyphs(jp_font, altuni_glyph_list)\n    jp_font.selection.none()\n\n    # ÈáçË§á„Åô„Çã„Ç∞„É™„Éï„ÇíÂâäÈô§\n    for glyph in eng_font.selection.byGlyphs:\n        jp_font.selection.select((\"more\", \"unicode\"), glyph.unicode)\n    for glyph in jp_font.selection.byGlyphs:\n        glyph.clear()\n\n    jp_font.selection.none()\n    eng_font.selection.none()\n\n    return jp_font\n\n\ndef materialize_altuni_glyphs(font, entity_glyph_unicode_list):\n    \"\"\"altuni „ÇíÊåáÂÆö„Åó„Å¶„ÅÑ„ÇãÂèÇÁÖßÂÖÉ„ÅÆ„Ç≥„Éº„Éâ„Éù„Ç§„É≥„Éà„Å´„Ç∞„É™„Éï„Çí„Ç≥„Éî„Éº„Åó„ÄÅ\n    ÂèÇÁÖßÂÖà (ÂÆü‰Ωì) „ÅÆ altuni „ÇíÂâäÈô§„Åô„Çã„ÄÇÁï∞‰ΩìÂ≠ó„Çª„É¨„ÇØ„ÇøÂàÜ„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Åô„Çã„ÄÇ\n    \"\"\"\n\n    for unicode in entity_glyph_unicode_list:\n        entity_glyph = font[unicode]\n        if not entity_glyph.altuni:\n            continue\n\n        # ‰ª•‰∏ãÂΩ¢Âºè„ÅÆ„Çø„Éó„É´„ÅßËøî„Å£„Å¶„Åè„Çã\n        # (unicode-value, variation-selector, reserved-field)\n        # Á¨¨3„Éï„Ç£„Éº„É´„Éâ„ÅØÂ∏∏„Å´0„Å™„ÅÆ„ÅßÁÑ°Ë¶ñ\n        altunis = entity_glyph.altuni\n\n        # ÂèÇÁÖßÂÖà„ÅÆ altuni „ÇíÂâäÈô§\n        # „Åì„Çå„Çí„ÇÑ„Çâ„Å™„ÅÑ„Å®„ÄÅ„Ç∞„É™„Éï„ÅÆ„Ç≥„Éî„ÉºÊôÇ„Å´ altuni „ÅåÂèÇÁÖß„Åï„Çå„Å¶„Åó„Åæ„ÅÑ„ÄÅ\n        # Âêå„Åò„Ç≥„Éº„Éâ„Éù„Ç§„É≥„Éà„Å´Ë≤º„Çä‰ªò„ÅÑ„Å¶„Åó„Åæ„Å£„Å¶ÊÑèÂë≥„Åå„Å™„ÅÑ\n        entity_glyph.altuni = None\n\n        processed = []\n        for altuni in altunis:\n            if altuni[0] in processed:\n                continue\n            if altuni[1] != -1:\n                # variation-selector „Åå -1 ‰ª•Â§ñ„ÅÆÂ†¥Âêà„ÅØÁï∞‰ΩìÂ≠ó„Çª„É¨„ÇØ„Çø„Å™„ÅÆ„Åß„Çπ„Ç≠„ÉÉ„Éó\n                continue\n            processed.append(altuni[0])\n            # altuni ÂèÇÁÖßÂÖÉ„Å´Á©∫„Ç∞„É™„Éï„Çí‰ΩúÊàê\n            copy_target_unicode = altuni[0]\n            try:\n                entity_glyph.glyphname = f\"uni{entity_glyph.unicode:04X}\"\n                copied_glyph_name = f\"uni{copy_target_unicode:04X}\"\n                if copied_glyph_name == entity_glyph.glyphname:\n                    copied_glyph_name += \"copy\"\n                copy_target_glyph = font.createChar(\n                    copy_target_unicode,\n                    copied_glyph_name,\n                )\n            except Exception:\n                copy_target_glyph = font[copy_target_unicode]\n            copy_target_glyph.width = entity_glyph.width\n            # altuni ÂèÇÁÖßÂÖÉ„Å∏„Ç∞„É™„Éï„Çí„Ç≥„Éî„Éº\n            font.selection.select(entity_glyph.glyphname)\n            font.copy()\n            font.selection.select(copy_target_glyph.glyphname)\n            font.paste()\n\n    # alt_uni Âá¶ÁêÜÂæå„ÄÅ„Ç®„É≥„Ç≥„Éº„Éá„Ç£„É≥„Ç∞„Åå„Åö„Çå„Çã„Åü„ÇÅ„Åã‰∏ÄÈÉ®„ÅÆ„Ç∞„É™„Éï„ÅÆ select() „Åå„ÅÜ„Åæ„Åè„ÅÑ„Åã„Å™„Åè„Å™„Çã„ÅÆ„ÅßÈñã„ÅçÁõ¥„Åô\n    font_path = f\"{BUILD_FONTS_DIR}/{font.fullname}_{uuid.uuid4()}.ttf\"\n    font.generate(font_path)\n    font.close()\n    font = fontforge.open(font_path)\n    # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§\n    os.remove(font_path)\n\n    return font\n\n\ndef delete_not_console_glyphs(eng_font):\n    eng_font.selection.none()\n\n    # Ë®òÂè∑\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x00A1, 0x00A5)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x00A7, 0x00AA)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x00AC, 0x00B8)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x00D7)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x00F7)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x0401)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x0410, 0x044F)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x0451)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2010, 0x2026)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2030)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2032, 0x2033)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x203B)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x203E)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2113, 0x2122)\n    # Áü¢Âç∞\n    # TODO: IBM Plex Sans JP v1.002 „Å∏„Éê„Éº„Ç∏„Éß„É≥„Ç¢„ÉÉ„Éó„Åô„Çã„Å®Áü¢Âç∞„ÅåÊã°Âºµ„Åï„Çå„ÇãË¶ãËæº„Åø„Å†„Åå„ÄÅÂΩìË©≤„Éê„Éº„Ç∏„Éß„É≥„Å´„ÅØ‰∏ÄÈÉ®„Ç∞„É™„ÉïÊ¨†„Åë„Åå„ÅÇ„Çã„Åü„ÇÅ„Åï„Çâ„Å´‰∏ä„ÅÆ„Éê„Éº„Ç∏„Éß„É≥„ÅåÂá∫„Å¶„Åç„ÅüÈöõ„Å´Âèñ„ÇäËæº„ÇÄ\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2190, 0x2193)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x21C4, 0x21C6)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x21D2)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x21D4)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x21E6, 0x21E9)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x21F5)\n\n    # Êï∞Â≠¶Ë®òÂè∑\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2200)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2202)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2211)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2219)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x221A)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x221D, 0x2220)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2227, 0x222E)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2234, 0x2235)\n    eng_font.selection.select((\"more\", \"unicode\"), 0x2252)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2260, 0x2261)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2266, 0x2267)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x226A, 0x226B)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2282, 0x2283)\n    eng_font.selection.select((\"more\", \"unicode\", \"ranges\"), 0x2286, 0x2287)\n\n    # ‰∏ÄÈÉ® IBMPlexMono „Éô„Éº„Çπ„Å´„Åô„Çã\n    # ÂêÑ„Ç®„Éá„Ç£„Çø„ÅÆÂèØË¶ñÂåñÊñáÂ≠óÂØæÁ≠ñ\n    eng_font.selection.select((\"less\", \"unicode\"), 0x2022)\n    eng_font.selection.select((\"less\", \"unicode\"), 0x00B7)\n    eng_font.selection.select((\"less\", \"unicode\"), 0x2024)\n    eng_font.selection.select((\"less\", \"unicode\"), 0x2219)\n    eng_font.selection.select((\"less\", \"unicode\"), 0x25D8)\n    eng_font.selection.select((\"less\", \"unicode\"), 0x25E6)\n\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.clear()\n\n    eng_font.selection.none()\n\n\ndef remove_lookups(font, remove_gsub=True, remove_gpos=True):\n    \"\"\"GSUB, GPOS„ÉÜ„Éº„Éñ„É´„ÇíÂâäÈô§„Åô„Çã\"\"\"\n    if remove_gsub:\n        for lookup in font.gsub_lookups:\n            font.removeLookup(lookup)\n    if remove_gpos:\n        for lookup in font.gpos_lookups:\n            font.removeLookup(lookup)\n\n\ndef transform_italic_glyphs(font):\n    \"\"\"Êó•Êú¨Ë™û„Éï„Ç©„É≥„Éà„ÅÆÊñú‰Ωì„ÇíÁîüÊàê„Åô„Çã\"\"\"\n    # ÂÇæ„Åç„ÇíË®≠ÂÆö„Åô„Çã\n    font.italicangle = -ITALIC_ANGLE\n    # ÂÖ®„Ç∞„É™„Éï„ÇíÊñú‰Ωì„Å´Â§âÊèõ\n    for glyph in font.glyphs():\n        orig_width = glyph.width\n        glyph.transform(psMat.skew(ITALIC_ANGLE * math.pi / 180))\n        glyph.transform(psMat.translate(-40, 0))\n        glyph.width = orig_width\n\n\ndef set_width_600_or_1000(jp_font):\n    \"\"\"ÂçäËßíÂπÖ„ÅãÂÖ®ËßíÂπÖ„Å´„Å™„Çã„Çà„ÅÜ„Å´Â§âÊèõ„Åô„Çã\"\"\"\n    for glyph in jp_font.glyphs():\n        if 0 < glyph.width < 500:\n            # „Ç∞„É™„Éï‰ΩçÁΩÆ„ÇíË™øÊï¥„Åó„Å¶„Åã„ÇâÂπÖ„ÇíË®≠ÂÆö\n            glyph.transform(psMat.translate((500 - glyph.width) / 2, 0))\n            glyph.width = 500\n        elif (\n            500 < glyph.width < 1000 or 0xC0 <= glyph.unicode <= 0x192\n        ):  # ÁâπÂÆö„ÅÆ„Ç¢„É´„Éï„Ç°„Éô„ÉÉ„ÉàÈñ¢ÈÄ£ÊñáÂ≠ó 0xC0 - 0x192 „ÅØÂÖ®ËßíÂπÖ„Å´„Åô„Çã\n            # „Ç∞„É™„Éï‰ΩçÁΩÆ„ÇíË™øÊï¥„Åó„Å¶„Åã„ÇâÂπÖ„ÇíË®≠ÂÆö\n            glyph.transform(psMat.translate((1000 - glyph.width) / 2, 0))\n            glyph.width = 1000\n\n        # 500ÂπÖ„ÅÆÂ†¥Âêà„ÅØ‰∏ÄÊó¶ 600 ÂπÖ„Å´„Åô„Çã\n        if glyph.width == 500:\n            glyph.transform(psMat.translate((600 - glyph.width) / 2, 0))\n            glyph.width = 600\n\n        # „Å™„Åú„ÅãÊ®ôÊ∫ñ„ÅÆÂπÖ„Åß„ÅØ„Å™„ÅÑ„Ç∞„É™„Éï„ÅÆÂÄãÂà•Ë™øÊï¥\n        if glyph.unicode == 0x51F0:\n            glyph.transform(psMat.translate((1000 - glyph.width) / 2, 0))\n            glyph.width = 1000\n        if glyph.glyphname == \"perthousand.full\":\n            glyph.width = 1000\n\n\ndef adjust_width_35_eng(eng_font):\n    \"\"\"Ëã±Ë™û„Éï„Ç©„É≥„Éà„ÇíÂçäËßí3:ÂÖ®Ëßí5ÂπÖ„Å´„Å™„Çã„Çà„ÅÜ„Å´Â§âÊèõ„Åô„Çã\"\"\"\n    original_half_width = eng_font[0x0030].width\n    after_width = int(FULL_WIDTH_35 * 3 / 5)\n    x_scale = after_width / original_half_width\n    for glyph in eng_font.glyphs():\n        if 0 < glyph.width < after_width:\n            # after_width „Çà„ÇäÂπÖ„ÅåÁã≠„ÅÑÂ†¥Âêà„ÅØ‰ΩçÁΩÆÂêà„Çè„Åõ„Åó„Å¶„Åã„ÇâÂπÖ„ÇíË®≠ÂÆö\n            glyph.transform(psMat.translate((after_width - glyph.width) / 2, 0))\n            glyph.width = after_width\n        elif after_width < glyph.width <= original_half_width:\n            # after_width „Çà„ÇäÂπÖ„ÅåÂ∫É„ÅÑ„ÄÅ„Åã„Å§ÂÖÉ„ÅÆÂçäËßíÂπÖ„Çà„ÇäÁã≠„ÅÑÂ†¥Âêà„ÅØÁ∏ÆÂ∞è„Åó„Å¶„Åã„ÇâÂπÖ„ÇíË®≠ÂÆö\n            glyph.transform(psMat.scale(x_scale, 1))\n            glyph.width = after_width\n        elif original_half_width < glyph.width:\n            # after_width „Çà„ÇäÂπÖ„ÅåÂ∫É„ÅÑ („Åä„Åù„Çâ„ÅèÂÖ®„Å¶„É™„Ç¨„ÉÅ„É£) „ÅÆÂ†¥Âêà„ÅØÂÄçÊï∞„Å´„Åô„Çã\n            multiply_number = round(glyph.width / original_half_width)\n            glyph.transform(psMat.scale(x_scale, 1))\n            glyph.width = after_width * multiply_number\n\n\ndef adjust_width_35_jp(jp_font):\n    \"\"\"Êó•Êú¨Ë™û„Éï„Ç©„É≥„Éà„ÇíÂçäËßí3:ÂÖ®Ëßí5ÂπÖ„Å´„Å™„Çã„Çà„ÅÜ„Å´Â§âÊèõ„Åô„Çã\"\"\"\n    after_width = int(FULL_WIDTH_35 * 3 / 5)\n    jp_half_width = jp_font[0x3000].width / 2\n    jp_full_width = jp_font[0x3000].width\n    for glyph in jp_font.glyphs():\n        if glyph.width == jp_half_width:\n            glyph.transform(psMat.translate((after_width - glyph.width) / 2, 0))\n            glyph.width = after_width\n        elif glyph.width == jp_full_width:\n            glyph.transform(psMat.translate((FULL_WIDTH_35 - glyph.width) / 2, 0))\n            glyph.width = FULL_WIDTH_35\n\n\ndef transform_half_width(jp_font, eng_font):\n    \"\"\"1:2ÂπÖ„Å´„Å™„Çã„Çà„ÅÜ„Å´Â§âÊèõ„Åô„Çã\"\"\"\n    before_width_eng = eng_font[0x0030].width\n    after_width_eng = HALF_WIDTH_12\n    # ÂçòÁ¥î„Å™ Á∏ÆÂ∞èÂæåÂπÖ / ÂÖÉ„ÅÆÂπÖ „Å†„Å®Áã≠„Åè„Å™„Çä„Åô„Çä„Åé„Çã„ÅÆ„Åß„ÄÅ\n    # ÂÄçÁéá„ÇíËÄÉÊÖÆ„Åó„Å¶ÂàÜÂ≠ê„ÅØÂ§ß„Åç„ÇÅ„Å´„Åó„Å¶„ÅÑ„Çã\n    x_scale = 546 / before_width_eng\n    for glyph in eng_font.glyphs():\n        if glyph.width > 0:\n            # „É™„Ç¨„ÉÅ„É£ËÄÉÊÖÆ\n            after_width_eng_multiply = after_width_eng * round(\n                glyph.width / before_width_eng\n            )\n            # Á∏ÆÂ∞è\n            glyph.transform(psMat.scale(x_scale, 0.97))\n            # ÂπÖ„ÇíË®≠ÂÆö\n            glyph.transform(\n                psMat.translate((after_width_eng_multiply - glyph.width) / 2, 0)\n            )\n            glyph.width = after_width_eng_multiply\n\n    for glyph in jp_font.glyphs():\n        if glyph.width == 600:\n            # Ëã±Êï∞Â≠ó„Ç∞„É™„Éï„Å®Âêå„ÅòÂπÖ„Å´„Åô„Çã\n            glyph.transform(psMat.translate((after_width_eng - glyph.width) / 2, 0))\n            glyph.width = after_width_eng\n        elif glyph.width == 1000:\n            # ÂÖ®Ëßí„ÅØ after_width_eng „ÅÆÂÄç„ÅÆÂπÖ„Å´„Åô„Çã\n            glyph.transform(psMat.translate((after_width_eng * 2 - glyph.width) / 2, 0))\n            glyph.width = after_width_eng * 2\n\n\ndef make_box_drawing_full_width(eng_font, jp_font):\n    \"\"\"ÁΩ´Á∑ö„ÇíÂÖ®Ëßí„Å´„Åô„Çã\"\"\"\n    # Ëã±Ë™û„Éï„Ç©„É≥„ÉàÂÅ¥„ÅØÂÆåÂÖ®„Å´ÂâäÈô§\n    eng_font.selection.select((\"unicode\", \"ranges\"), 0x2500, 0x257F)\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.clear()\n    eng_font.selection.none()\n    # Êó•Êú¨Ë™û„Éï„Ç©„É≥„ÉàÂÅ¥„ÅØÂâäÈô§„Åó„Å¶„Åã„ÇâÂÖ®ËßíÁî®„Ç∞„É™„Éï„Çí„Éû„Éº„Ç∏„Åô„Çã\n    jp_font.selection.select((\"unicode\", \"ranges\"), 0x2500, 0x257F)\n    for glyph in jp_font.selection.byGlyphs:\n        glyph.clear()\n    jp_font.selection.none()\n    jp_font.mergeFonts(fontforge.open(f\"{SOURCE_FONTS_DIR}/FullWidthBoxDrawings.sfd\"))\n    # ÂπÖË®≠ÂÆö„Å®‰ΩçÁΩÆË™øÊï¥\n    width_to = jp_font[0x3042].width\n    jp_font.selection.select((\"unicode\", \"ranges\"), 0x2500, 0x257F)\n    for glyph in jp_font.selection.byGlyphs:\n        # ÂπÖ„ÅåË™øÊï¥Ââç„Çà„ÇäÂ∫É„Åå„ÇãÂ†¥Âêà„ÅØÊã°Â§ß„Åô„Çã\n        width_from = glyph.width\n        if width_from < width_to:\n            glyph.transform(psMat.scale(width_to / width_from, 1))\n        width_from = glyph.width\n        glyph.transform(psMat.translate((width_to - width_from) / 2, 0))\n        glyph.width = width_to\n    jp_font.selection.none()\n\n\ndef visualize_zenkaku_space(jp_font):\n    \"\"\"ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÇíÂèØË¶ñÂåñ„Åô„Çã\"\"\"\n    # ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ„ÇíÂ∑Æ„ÅóÊõø„Åà\n    glyph = jp_font[0x3000]\n    width_to = glyph.width\n    glyph.clear()\n    jp_font.mergeFonts(fontforge.open(f\"{SOURCE_FONTS_DIR}/{IDEOGRAPHIC_SPACE}\"))\n    # ÂπÖ„ÇíË®≠ÂÆö„Åó‰ΩçÁΩÆË™øÊï¥\n    jp_font.selection.select(\"U+3000\")\n    for glyph in jp_font.selection.byGlyphs:\n        width_from = glyph.width\n        glyph.transform(psMat.translate((width_to - width_from) / 2, 0))\n        glyph.width = width_to\n    jp_font.selection.none()\n\n\ndef merge_hack(jp_font, eng_font, style):\n    \"\"\"Hack „Éï„Ç©„É≥„Éà„Çí„Éû„Éº„Ç∏„Åô„Çã\"\"\"\n    if \"Bold\" in style:\n        hack_font = fontforge.open(\n            f\"{SOURCE_FONTS_DIR}/\" + HACK_FONT.replace(\"{style}\", \"Bold\")\n        )\n    else:\n        hack_font = fontforge.open(\n            f\"{SOURCE_FONTS_DIR}/\" + HACK_FONT.replace(\"{style}\", \"Regular\")\n        )\n    hack_font.em = EM_ASCENT + EM_DESCENT\n    # Êó¢„Å´Ëã±Ë™û„Éï„Ç©„É≥„ÉàÂÅ¥„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØhack„Ç∞„É™„Éï„ÅØÂâäÈô§„Åô„Çã\n    for glyph in eng_font.glyphs():\n        if glyph.unicode != -1:\n            try:\n                for g in hack_font.selection.select(\n                    (\"unicode\", None), glyph.unicode\n                ).byGlyphs:\n                    g.clear()\n            except Exception:\n                pass\n    if options.get(\"console\"):\n        # ConsoleÁâà„Åß„ÅØ„ÄÅÊó•Êú¨Ë™û„Éï„Ç©„É≥„Éà„Çà„Çähack„Éï„Ç©„É≥„Éà„ÅÆ„Ç∞„É™„Éï„ÇíÂÑ™ÂÖà„Åô„Çã\n        for glyph in hack_font.glyphs():\n            if glyph.unicode != -1:\n                try:\n                    for g in jp_font.selection.select(\n                        (\"unicode\", None), glyph.unicode\n                    ).byGlyphs:\n                        g.clear()\n                except Exception:\n                    pass\n    else:\n        # Êó¢„Å´Êó•Êú¨Ë™û„Éï„Ç©„É≥„ÉàÂÅ¥„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØhack„Ç∞„É™„Éï„ÅØÂâäÈô§„Åô„Çã\n        for glyph in jp_font.glyphs():\n            if glyph.unicode != -1:\n                try:\n                    for g in hack_font.selection.select(\n                        (\"unicode\", None), glyph.unicode\n                    ).byGlyphs:\n                        g.clear()\n                except Exception:\n                    pass\n    # EM 1000 „Å´„Åó„Åü„Å®„Åç„ÅÆÂπÖ„Å´Âêà„Çè„Åõ„Å¶Ë™øÊï¥\n    half_width = int(FULL_WIDTH_35 * 3 / 5)\n    for glyph in hack_font.glyphs():\n        if glyph.width > 0:\n            glyph.transform(psMat.translate((half_width - glyph.width) / 2, 0))\n            glyph.width = half_width\n    # Hack „Éï„Ç©„É≥„Éà„Çí„Ç™„Éñ„Ç∏„Çß„ÇØ„Éà„Å®„Åó„Å¶Êâ±„ÅÑ„Åü„Åè„Å™„ÅÑ„ÅÆ„Åß„ÄÅ‰∏ÄÊó¶„Éï„Ç°„Ç§„É´‰øùÂ≠ò„Åó„Å¶Áõ¥Êé•„Éû„Éº„Ç∏„Åô„Çã\n    font_path = f\"{BUILD_FONTS_DIR}/tmp_hack_{uuid.uuid4()}.ttf\"\n    hack_font.generate(font_path)\n    hack_font.close()\n\n    eng_font.mergeFonts(font_path)\n    os.remove(font_path)\n\n\ndef eaaw_width_to_half(jp_font):\n    \"\"\"East Asian Ambiguous Width ÊñáÂ≠ó„ÅÆÂçäËßíÂåñ\"\"\"\n    # ref: https://www.unicode.org/Public/15.1.0/ucd/EastAsianWidth.txt\n\n    eaaw_unicode_list = (\n        0x203B,  # REFERENCE MARK\n        0x2103,\n        0x2109,\n        0x2121,\n        0x212B,\n        *range(0x2160, 0x216B + 1),\n        *range(0x2170, 0x217B + 1),\n        0x221F,\n        0x222E,\n        *range(0x226A, 0x226B + 1),\n        0x22A5,\n        0x22BF,\n        0x2312,\n        *range(0x2460, 0x2490 + 1),\n        *range(0x249C, 0x24B5 + 1),\n        *range(0x2605, 0x2606 + 1),\n        0x260E,\n        0x261C,\n        0x261E,\n        0x2640,\n        0x2642,\n        *range(0x2660, 0x2665 + 1),\n        0x2667,\n        0x266A,\n        0x266D,\n        0x266F,\n        0x1F100,\n    )\n    half_width = 500\n    for glyph in jp_font.glyphs():\n        if glyph.unicode in eaaw_unicode_list and glyph.width > half_width:\n            glyph.transform(psMat.scale(0.67, 0.9))\n            glyph.transform(psMat.translate((half_width - glyph.width) / 2, 0))\n            glyph.width = half_width\n\n\ndef add_console_glyphs(eng_font):\n    eng_width = eng_font[0x0030].width\n\n    # HEAVY CHECK MARK (U+2714) „ÇíËøΩÂä†\n    # „Åì„ÅÆË®òÂè∑„ÅØ Docker „Ç≥„Éû„É≥„Éâ„Å™„Å©„Åß‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Çã\n    eng_font.selection.select((\"unicode\", None), 0x2713)\n    eng_font.copy()\n    eng_font.selection.select((\"unicode\", None), 0x2714)\n    eng_font.paste()\n    for glyph in eng_font.selection.byGlyphs:\n        glyph.stroke(\"circular\", 35, removeinternal=True)\n        glyph.width = eng_width\n\n    eng_font.selection.none()\n\n\ndef scale_glyph_from_center(glyph, scale_x, scale_y):\n    \"\"\"„Ç∞„É™„Éï„ÅÆ‰∏≠ÂøÉ‰ΩçÁΩÆ„ÇíÂü∫ÁÇπ„Å®„Åó„Åü„Çπ„Ç±„Éº„É´Ë™øÊï¥\"\"\"\n    original_width = glyph.width\n    # „Çπ„Ç±„Éº„É´Ââç„ÅÆ‰∏≠ÂøÉ‰ΩçÁΩÆ„ÇíÊ±Ç„ÇÅ„Çã\n    before_bb = glyph.boundingBox()\n    before_center_x = (before_bb[0] + before_bb[2]) / 2\n    before_center_y = (before_bb[1] + before_bb[3]) / 2\n    # „Çπ„Ç±„Éº„É´Â§âÊèõ\n    glyph.transform(psMat.scale(scale_x, scale_y))\n    # „Çπ„Ç±„Éº„É´Âæå„ÅÆ‰∏≠ÂøÉ‰ΩçÁΩÆ„ÇíÊ±Ç„ÇÅ„Çã\n    after_bb = glyph.boundingBox()\n    after_center_x = (after_bb[0] + after_bb[2]) / 2\n    after_center_y = (after_bb[1] + after_bb[3]) / 2\n    # Êã°Â§ß„ÅßÂ¢ó„Åà„ÅüÂàÜ„ÇíËÄÉÊÖÆ„Åó„Å¶‰∏≠ÂøÉ‰ΩçÁΩÆ„ÇíË™øÊï¥\n    glyph.transform(\n        psMat.translate(\n            before_center_x - after_center_x,\n            before_center_y - after_center_y,\n        )\n    )\n    glyph.width = original_width\n\n\ndef down_scale_redundant_size_glyph(eng_font):\n    \"\"\"Ë¶èÂÆö„ÅÆÂπÖ„Åã„Çâ„ÅØ„ÅøÂá∫„Åó„Åü„Ç∞„É™„Éï„Çµ„Ç§„Ç∫„ÇíÁ∏ÆÂ∞è„Åô„Çã\"\"\"\n\n    for glyph in eng_font.glyphs():\n        xmin = glyph.boundingBox()[0]\n        xmax = glyph.boundingBox()[2]\n\n        if (\n            glyph.width > 0\n            and -15\n            < xmin\n            < 0  # ÁâπÂÆöÂπÖ„Çà„ÇäÂ∑¶„Å´„ÅØ„ÅøÂá∫„Åó„Å¶„ÅÑ„ÇãÂ†¥Âêà„ÄÅÊÑèÂõ≥ÁöÑ„Å´„ÅØ„ÅøÂá∫„Åó„Å¶„ÅÑ„Çã„ÇÇ„ÅÆ„Å®Ë¶ã„Å™„Åó„Å¶ÁÑ°Ë¶ñ\n            and abs(xmin) - 10\n            < xmax - glyph.width\n            < abs(xmin) + 10  # „ÅØ„ÅøÂá∫„ÅóÂπÖ„ÅåÂ∑¶ÂÅ¥„Å®Âè≥ÂÅ¥„ÅßÊ•µÁ´Ø„Å´Áï∞„Å™„ÇãÂ†¥Âêà„ÅØÁÑ°Ë¶ñ\n            and not (\n                0x0020 <= glyph.unicode <= 0x02AF\n            )  # latin Á≥ª„ÅÆ„Ç∞„É™„Éï 0x0020 - 0x0192 „ÅØÁÑ°Ë¶ñ\n            and not (\n                0xE0B0 <= glyph.unicode <= 0xE0D4\n            )  # PowerlineÁ≥ª„ÅÆ„Ç∞„É™„Éï 0xE0B0 - 0xE0D4 „ÅØÁÑ°Ë¶ñ\n            and not (\n                0x2500 <= glyph.unicode <= 0x257F\n            )  # ÁΩ´Á∑öÁ≥ª„ÅÆ„Ç∞„É™„Éï 0x2500 - 0x257F „ÅØÁÑ°Ë¶ñ\n            and not (\n                0x2591 <= glyph.unicode <= 0x2593\n            )  # SHADE „Ç∞„É™„Éï 0x2591 - 0x2593 „ÅØÁÑ°Ë¶ñ\n        ):\n            scale_glyph_from_center(glyph, 1 + (xmin / glyph.width) * 2, 1)\n\n\ndef add_nerd_font_glyphs(jp_font, eng_font):\n    \"\"\"Nerd Font„ÅÆ„Ç∞„É™„Éï„ÇíËøΩÂä†„Åô„Çã\"\"\"\n    global nerd_font\n    # Nerd Font„ÅÆ„Ç∞„É™„Éï„ÇíËøΩÂä†„Åô„Çã\n    if nerd_font is None:\n        nerd_font = fontforge.open(\n            f\"{SOURCE_FONTS_DIR}/nerd-fonts/SymbolsNerdFont-Regular.ttf\"\n        )\n        nerd_font.em = EM_ASCENT + EM_DESCENT\n        glyph_names = set()\n        for nerd_glyph in nerd_font.glyphs():\n            # Nerd Fonts„ÅÆ„Ç∞„É™„ÉïÂêç„Çí„É¶„Éã„Éº„ÇØ„Å´„Åô„Çã„Åü„ÇÅÊé•Â∞æËæû„Çí‰ªò„Åë„Çã\n            nerd_glyph.glyphname = f\"{nerd_glyph.glyphname}-nf\"\n            # post„ÉÜ„Éº„Éñ„É´„Åß„ÅÆ„Ç∞„É™„ÉïÂêçÈáçË§áÂØæÁ≠ñ\n            # fonttools merge „ÅßÂêàÊàê„Åó„ÅüÂæå„ÄÅMacOS„Åß `'post'„ÉÜ„Éº„Éñ„É´„ÅÆ‰ΩøÁî®ÊÄß` „Ç®„É©„Éº„ÅåÁô∫Áîü„Åô„Çã„Åì„Å®„Å∏„ÅÆÂØæÂá¶\n            if nerd_glyph.glyphname in glyph_names:\n                nerd_glyph.glyphname = f\"{nerd_glyph.glyphname}-{nerd_glyph.encoding}\"\n            glyph_names.add(nerd_glyph.glyphname)\n            # ÂπÖ„ÇíË™øÊï¥„Åô„Çã\n            half_width = eng_font[0x0030].width\n            # Powerline Symbols „ÅÆË™øÊï¥\n            if 0xE0B0 <= nerd_glyph.unicode <= 0xE0D7:\n                # ‰ΩçÁΩÆ„Å®ÂπÖÂêà„Çè„Åõ\n                if nerd_glyph.width < half_width:\n                    nerd_glyph.transform(\n                        psMat.translate((half_width - nerd_glyph.width) / 2, 0)\n                    )\n                elif nerd_glyph.width > half_width:\n                    nerd_glyph.transform(psMat.scale(half_width / nerd_glyph.width, 1))\n                # „Ç∞„É™„Éï„ÅÆÈ´ò„Åï„Éª‰ΩçÁΩÆ„ÇíË™øÊï¥„Åô„Çã\n                nerd_glyph.transform(psMat.scale(1, 1.14))\n                nerd_glyph.transform(psMat.translate(0, 21))\n            elif nerd_glyph.width < (EM_ASCENT + EM_DESCENT) * 0.6:\n                # ÂπÖ„ÅåÁã≠„ÅÑ„Ç∞„É™„Éï„ÅØ‰∏≠Â§ÆÂØÑ„Åõ„Å®„Åø„Å™„Åó„Å¶Ë™øÊï¥„Åô„Çã\n                nerd_glyph.transform(\n                    psMat.translate((half_width - nerd_glyph.width) / 2, 0)\n                )\n            # ÂπÖ„ÇíË®≠ÂÆö\n            nerd_glyph.width = half_width\n    # Êó•Êú¨Ë™û„Éï„Ç©„É≥„Éà„Å´„Éû„Éº„Ç∏„Åô„Çã„Åü„ÇÅ„ÄÅÊó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÂâäÈô§„Åô„Çã\n    for nerd_glyph in nerd_font.glyphs():\n        if nerd_glyph.unicode != -1:\n            # Êó¢„Å´Â≠òÂú®„Åô„ÇãÂ†¥Âêà„ÅØÂâäÈô§„Åô„Çã\n            try:\n                for glyph in jp_font.selection.select(\n                    (\"unicode\", None), nerd_glyph.unicode\n                ).byGlyphs:\n                    glyph.clear()\n            except Exception:\n                pass\n            try:\n                for glyph in eng_font.selection.select(\n                    (\"unicode\", None), nerd_glyph.unicode\n                ).byGlyphs:\n                    glyph.clear()\n            except Exception:\n                pass\n\n    jp_font.mergeFonts(nerd_font)\n\n    jp_font.selection.none()\n    eng_font.selection.none()\n\n\ndef delete_glyphs_with_duplicate_glyph_names(font):\n    \"\"\"ÈáçË§á„Åô„Çã„Ç∞„É™„ÉïÂêç„ÇíÊåÅ„Å§„Ç∞„É™„Éï„Çí„É™„Éç„Éº„É†„Åô„Çã\"\"\"\n    glyph_name_set = set()\n    for glyph in font.glyphs():\n        if glyph.glyphname in glyph_name_set:\n            glyph.glyphname = f\"{glyph.glyphname}_{glyph.encoding}\"\n        else:\n            glyph_name_set.add(glyph.glyphname)\n\n\ndef edit_meta_data(font, weight: str, variant: str, cap_height: int, x_height: int):\n    \"\"\"„Éï„Ç©„É≥„ÉàÂÜÖ„ÅÆ„É°„Çø„Éá„Éº„Çø„ÇíÁ∑®ÈõÜ„Åô„Çã\"\"\"\n    font.ascent = EM_ASCENT\n    font.descent = EM_DESCENT\n\n    if WIDTH_35_STR in variant and not options.get(\"nerd-font\"):\n        os2_ascent = OS2_ASCENT + 60\n        os2_descent = OS2_DESCENT + 60\n    else:\n        os2_ascent = OS2_ASCENT\n        os2_descent = OS2_DESCENT\n\n    font.os2_winascent = os2_ascent\n    font.os2_windescent = os2_descent\n\n    font.os2_typoascent = os2_ascent\n    font.os2_typodescent = -os2_descent\n    font.os2_typolinegap = 0\n\n    font.hhea_ascent = os2_ascent\n    font.hhea_descent = -os2_descent\n    font.hhea_linegap = 0\n\n    font.os2_xheight = x_height\n    font.os2_capheight = cap_height\n\n    # VSCode „ÅÆ„Çø„Éº„Éü„Éä„É´‰∏ä„ÅÆ„Éú„Éà„É†‰ΩçÁΩÆ„ÅÆË°®Á§∫„Åß g, j „Å™„Å©„ÅåË¶ãÂàá„Çå„ÇãÂïèÈ°å„Å∏„ÅÆÂØæÂá¶\n    # Ê∞¥Âπ≥„Éô„Éº„Çπ„ÉÜ„Éº„Éñ„É´„ÇíÂâäÈô§\n    font.horizontalBaseline = None\n\n    if \"Regular\" == weight or \"Italic\" == weight:\n        font.os2_weight = 400\n    elif \"Thin\" in weight:\n        font.os2_weight = 100\n    elif \"ExtraLight\" in weight:\n        font.os2_weight = 200\n    elif \"Light\" in weight:\n        font.os2_weight = 300\n    elif \"Text\" in weight:\n        font.os2_weight = 450\n    elif \"Medium\" in weight:\n        font.os2_weight = 500\n    elif \"SemiBold\" in weight:\n        font.os2_weight = 600\n    elif \"Bold\" in weight:\n        font.os2_weight = 700\n\n    font.os2_vendor = VENDER_NAME\n\n    font.sfnt_names = (\n        (\n            \"English (US)\",\n            \"License\",\n            \"\"\"This Font Software is licensed under the SIL Open Font License,\nVersion 1.1. This license is available with a FAQ\nat: http://scripts.sil.org/OFL\"\"\",\n        ),\n        (\"English (US)\", \"License URL\", \"http://scripts.sil.org/OFL\"),\n        (\"English (US)\", \"Version\", VERSION),\n        (\"English (US)\", \"Copyright\", COPYRIGHT),\n    )\n\n    # „Éï„Ç©„É≥„ÉàÂêç„ÇíË®≠ÂÆö„Åô„Çã\n    if (\n        \"Regular\" == weight\n        or \"Italic\" == weight\n        or \"Bold\" == weight\n        or \"BoldItalic\" == weight\n    ):\n        font_family = FONT_NAME\n        if variant != \"\":\n            font_family += f\" {variant}\".replace(\" 35\", \"35\")\n        font_weight = weight\n        if \"Italic\" in weight:\n            font_weight = font_weight.replace(\"Italic\", \" Italic\")\n        font.familyname = font_family\n        # „Éï„Ç©„É≥„Éà„Çµ„Éñ„Éï„Ç°„Éü„É™„ÉºÂêç\n        font.appendSFNTName(0x409, 2, font_weight)\n        font.fontname = f\"{font_family}-{font_weight}\".replace(\" \", \"\")\n        font.fullname = f\"{font_family} {font_weight}\"\n        font.weight = font_weight.split(\" \")[0]\n    else:\n        font_family = FONT_NAME\n        if variant != \"\":\n            font_family += f\" {variant}\".replace(\" 35\", \"35\")\n        font_weight = weight\n        if \"Italic\" in weight:\n            font_weight = font_weight.replace(\"Italic\", \" Italic\")\n        font.familyname = f\"{font_family} \" + font_weight.split(\" \")[0]\n        # „Éï„Ç©„É≥„Éà„Çµ„Éñ„Éï„Ç°„Éü„É™„ÉºÂêç\n        if \"Italic\" in weight:\n            font.appendSFNTName(0x409, 2, \"Italic\")\n        else:\n            font.appendSFNTName(0x409, 2, \"Regular\")\n        font.fontname = f\"{font_family}-{font_weight}\".replace(\" \", \"\")\n        font.fullname = f\"{font_family} {font_weight}\"\n        font.weight = font_weight.split(\" \")[0]\n        # ÂÑ™ÂÖà„Éï„Ç©„É≥„Éà„Éï„Ç°„Éü„É™„ÉºÂêç\n        font.appendSFNTName(0x409, 16, font_family)\n        # ÂÑ™ÂÖà„Éï„Ç©„É≥„Éà„Çπ„Çø„Ç§„É´\n        font.appendSFNTName(0x409, 17, font_weight)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "fonttools_script.py",
          "type": "blob",
          "size": 8.404296875,
          "content": "#!/bin/env python3\n\nimport configparser\nimport glob\nimport os\nimport sys\nimport xml.etree.ElementTree as ET\nfrom pathlib import Path\n\nfrom fontTools import merge, ttLib, ttx\nfrom ttfautohint import options, ttfautohint\n\n# ini„Éï„Ç°„Ç§„É´„ÇíË™≠„ÅøËæº„ÇÄ\nsettings = configparser.ConfigParser()\nsettings.read(\"build.ini\", encoding=\"utf-8\")\n\nFONT_NAME = settings.get(\"DEFAULT\", \"FONT_NAME\")\nFONTFORGE_PREFIX = settings.get(\"DEFAULT\", \"FONTFORGE_PREFIX\")\nFONTTOOLS_PREFIX = settings.get(\"DEFAULT\", \"FONTTOOLS_PREFIX\")\nBUILD_FONTS_DIR = settings.get(\"DEFAULT\", \"BUILD_FONTS_DIR\")\nHALF_WIDTH_12 = int(settings.get(\"DEFAULT\", \"HALF_WIDTH_12\"))\nFULL_WIDTH_35 = int(settings.get(\"DEFAULT\", \"FULL_WIDTH_35\"))\nWIDTH_35_STR = settings.get(\"DEFAULT\", \"WIDTH_35_STR\")\nCONSOLE_STR = settings.get(\"DEFAULT\", \"CONSOLE_STR\")\n\n\ndef main():\n    # Á¨¨‰∏ÄÂºïÊï∞„ÇíÂèñÂæó\n    # ÁâπÂÆö„ÅÆ„Éê„É™„Ç®„Éº„Ç∑„Éß„É≥„ÅÆ„Åø„ÇíÂá¶ÁêÜ„Åô„Çã„Åü„ÇÅ„ÅÆÊåáÂÆö\n    specific_variant = sys.argv[1] if len(sys.argv) > 1 else None\n\n    edit_fonts(specific_variant)\n\n\ndef edit_fonts(specific_variant: str):\n    \"\"\"„Éï„Ç©„É≥„Éà„ÇíÁ∑®ÈõÜ„Åô„Çã\"\"\"\n\n    if specific_variant is None:\n        specific_variant = \"\"\n\n    # „Éï„Ç°„Ç§„É´„Çí„Éë„Çø„Éº„É≥„ÅßÊåáÂÆö\n    file_pattern = f\"{FONTFORGE_PREFIX}{FONT_NAME}{specific_variant}*-eng.ttf\"\n    filenames = glob.glob(f\"{BUILD_FONTS_DIR}/{file_pattern}\")\n    # „Éï„Ç°„Ç§„É´„ÅåË¶ã„Å§„Åã„Çâ„Å™„ÅÑÂ†¥Âêà„ÅØ„Ç®„É©„Éº\n    if len(filenames) == 0:\n        print(f\"Error: {file_pattern} not found\")\n        return\n    paths = [Path(f) for f in filenames]\n    for path in paths:\n        print(f\"edit {str(path)}\")\n        style = path.stem.split(\"-\")[1]\n        variant = path.stem.split(\"-\")[0].replace(f\"{FONTFORGE_PREFIX}{FONT_NAME}\", \"\")\n        add_hinting(str(path), str(path).replace(\".ttf\", \"-hinted.ttf\"), variant, style)\n        merge_fonts(style, variant)\n        fix_font_tables(style, variant)\n\n    # ‰∏ÄÊôÇ„Éï„Ç°„Ç§„É´„ÇíÂâäÈô§\n    # „Çπ„Çø„Ç§„É´ÈÉ®ÂàÜ‰ª•Èôç„ÅØ„ÉØ„Ç§„É´„Éâ„Ç´„Éº„Éâ„ÅßÊåáÂÆö\n    for filename in glob.glob(\n        f\"{BUILD_FONTS_DIR}/{FONTTOOLS_PREFIX}{FONT_NAME}{specific_variant}*\"\n    ):\n        os.remove(filename)\n    for filename in glob.glob(\n        f\"{BUILD_FONTS_DIR}/{FONTFORGE_PREFIX}{FONT_NAME}{specific_variant}*\"\n    ):\n        os.remove(filename)\n\n\ndef add_hinting(input_font_path, output_font_path, variant, style):\n    \"\"\"„Éï„Ç©„É≥„Éà„Å´„Éí„É≥„ÉÜ„Ç£„É≥„Ç∞„Çí‰ªò„Åë„Çã\"\"\"\n    if \"Italic\" not in style:\n        width_variant = \"35\" if WIDTH_35_STR in variant else \"normal\"\n        ctrl_file = [\n            \"-m\",\n            f\"hinting_post_process/{width_variant}-{style}-ctrl.txt\",\n        ]\n    else:\n        ctrl_file = []\n\n    args = ctrl_file + [\n        \"-l\",\n        \"6\",\n        \"-r\",\n        \"45\",\n        \"-D\",\n        \"latn\",\n        \"-f\",\n        \"none\",\n        \"-S\",\n        \"-W\",\n        \"-X\",\n        \"13-\",\n        \"-I\",\n        input_font_path,\n        output_font_path,\n    ]\n    options_ = options.parse_args(args)\n    print(\"exec hinting\", options_)\n    ttfautohint(**options_)\n\n\ndef merge_fonts(style, variant):\n    \"\"\"„Éï„Ç©„É≥„Éà„ÇíÁµêÂêà„Åô„Çã\"\"\"\n    eng_font_path = f\"{BUILD_FONTS_DIR}/{FONTFORGE_PREFIX}{FONT_NAME}{variant}-{style}-eng-hinted.ttf\"\n    jp_font_path = (\n        f\"{BUILD_FONTS_DIR}/{FONTFORGE_PREFIX}{FONT_NAME}{variant}-{style}-jp.ttf\"\n    )\n    # vhea, vmtx„ÉÜ„Éº„Éñ„É´„ÇíÂâäÈô§\n    jp_font_object = ttLib.TTFont(jp_font_path)\n    if \"vhea\" in jp_font_object:\n        del jp_font_object[\"vhea\"]\n    if \"vmtx\" in jp_font_object:\n        del jp_font_object[\"vmtx\"]\n    jp_font_object.save(jp_font_path)\n    # „Éï„Ç©„É≥„Éà„ÇíÁµêÂêà\n    merger = merge.Merger()\n    merged_font = merger.merge([eng_font_path, jp_font_path])\n    merged_font.save(\n        f\"{BUILD_FONTS_DIR}/{FONTTOOLS_PREFIX}{FONT_NAME}{variant}-{style}_merged.ttf\"\n    )\n\n\ndef fix_font_tables(style, variant):\n    \"\"\"„Éï„Ç©„É≥„Éà„ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ„Åô„Çã\"\"\"\n\n    input_font_name = f\"{FONTTOOLS_PREFIX}{FONT_NAME}{variant}-{style}_merged.ttf\"\n    output_name_base = f\"{FONTTOOLS_PREFIX}{FONT_NAME}{variant}-{style}\"\n    completed_name_base = f\"{FONT_NAME.replace(' ', '')}{variant}-{style}\"\n\n    # OS/2, post „ÉÜ„Éº„Éñ„É´„ÅÆ„Åø„ÅÆttx„Éï„Ç°„Ç§„É´„ÇíÂá∫Âäõ\n    xml = dump_ttx(input_font_name, output_name_base)\n    # OS/2 „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ\n    fix_os2_table(xml, style, flag_35=WIDTH_35_STR in variant)\n    # post „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ\n    fix_post_table(xml, flag_35=WIDTH_35_STR in variant)\n    # name „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ\n    fix_name_table(xml)\n\n    # ttx„Éï„Ç°„Ç§„É´„Çí‰∏äÊõ∏„Åç‰øùÂ≠ò\n    xml.write(\n        f\"{BUILD_FONTS_DIR}/{output_name_base}.ttx\",\n        encoding=\"utf-8\",\n        xml_declaration=True,\n    )\n\n    # ttx„Éï„Ç°„Ç§„É´„Çíttf„Éï„Ç°„Ç§„É´„Å´ÈÅ©Áî®\n    ttx.main(\n        [\n            \"-o\",\n            f\"{BUILD_FONTS_DIR}/{output_name_base}_os2_post.ttf\",\n            \"-m\",\n            f\"{BUILD_FONTS_DIR}/{input_font_name}\",\n            f\"{BUILD_FONTS_DIR}/{output_name_base}.ttx\",\n        ]\n    )\n\n    # „Éï„Ç°„Ç§„É´Âêç„ÇíÂ§âÊõ¥\n    os.rename(\n        f\"{BUILD_FONTS_DIR}/{output_name_base}_os2_post.ttf\",\n        f\"{BUILD_FONTS_DIR}/{completed_name_base}.ttf\",\n    )\n\n\ndef dump_ttx(input_name_base, output_name_base) -> ET:\n    \"\"\"OS/2, post „ÉÜ„Éº„Éñ„É´„ÅÆ„Åø„ÅÆttx„Éï„Ç°„Ç§„É´„ÇíÂá∫Âäõ\"\"\"\n    ttx.main(\n        [\n            \"-t\",\n            \"OS/2\",\n            \"-t\",\n            \"post\",\n            \"-t\",\n            \"name\",\n            \"-f\",\n            \"-o\",\n            f\"{BUILD_FONTS_DIR}/{output_name_base}.ttx\",\n            f\"{BUILD_FONTS_DIR}/{input_name_base}\",\n        ]\n    )\n\n    return ET.parse(f\"{BUILD_FONTS_DIR}/{output_name_base}.ttx\")\n\n\ndef fix_os2_table(xml: ET, style: str, flag_35: bool = False):\n    \"\"\"OS/2 „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ„Åô„Çã\"\"\"\n    # xAvgCharWidth„ÇíÁ∑®ÈõÜ\n    # „Çø„Ç∞ÂΩ¢Âºè: <xAvgCharWidth value=\"1000\"/>\n    if flag_35:\n        x_avg_char_width = FULL_WIDTH_35\n    else:\n        x_avg_char_width = HALF_WIDTH_12\n    xml.find(\"OS_2/xAvgCharWidth\").set(\"value\", str(x_avg_char_width))\n\n    # fsSelection„ÇíÁ∑®ÈõÜ\n    # „Çø„Ç∞ÂΩ¢Âºè: <fsSelection value=\"00000000 11000000\" />\n    # „Çπ„Çø„Ç§„É´„Å´Âøú„Åò„Åü„Éì„ÉÉ„Éà„ÇíÁ´ã„Å¶„Çã\n    fs_selection = None\n    if style == \"Regular\":\n        fs_selection = \"00000001 01000000\"\n    elif style == \"Italic\":\n        fs_selection = \"00000001 00000001\"\n    elif style == \"Bold\":\n        fs_selection = \"00000001 00100000\"\n    elif style == \"BoldItalic\":\n        fs_selection = \"00000001 00100001\"\n\n    if fs_selection is not None:\n        xml.find(\"OS_2/fsSelection\").set(\"value\", fs_selection)\n\n    # panose„ÇíÁ∑®ÈõÜ\n    # „Çø„Ç∞ÂΩ¢Âºè:\n    # <panose>\n    #   <bFamilyType value=\"2\" />\n    #   <bSerifStyle value=\"11\" />\n    #   <bWeight value=\"6\" />\n    #   <bProportion value=\"9\" />\n    #   <bContrast value=\"6\" />\n    #   <bStrokeVariation value=\"3\" />\n    #   <bArmStyle value=\"0\" />\n    #   <bLetterForm value=\"2\" />\n    #   <bMidline value=\"0\" />\n    #   <bXHeight value=\"4\" />\n    # </panose>\n    if style == \"Regular\" or style == \"Italic\":\n        bWeight = 5\n    else:\n        bWeight = 8\n    if flag_35:\n        panose = {\n            \"bFamilyType\": 2,\n            \"bSerifStyle\": 11,\n            \"bWeight\": bWeight,\n            \"bProportion\": 3,\n            \"bContrast\": 5,\n            \"bStrokeVariation\": 2,\n            \"bArmStyle\": 3,\n            \"bLetterForm\": 0,\n            \"bMidline\": 2,\n            \"bXHeight\": 3,\n        }\n    else:\n        panose = {\n            \"bFamilyType\": 2,\n            \"bSerifStyle\": 11,\n            \"bWeight\": bWeight,\n            \"bProportion\": 9,\n            \"bContrast\": 5,\n            \"bStrokeVariation\": 2,\n            \"bArmStyle\": 3,\n            \"bLetterForm\": 0,\n            \"bMidline\": 2,\n            \"bXHeight\": 3,\n        }\n\n    for key, value in panose.items():\n        xml.find(f\"OS_2/panose/{key}\").set(\"value\", str(value))\n\n\ndef fix_post_table(xml: ET, flag_35):\n    \"\"\"post „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ„Åô„Çã\"\"\"\n    # isFixedPitch„ÇíÁ∑®ÈõÜ\n    # „Çø„Ç∞ÂΩ¢Âºè: <isFixedPitch value=\"0\"/>\n    is_fixed_pitch = 0 if flag_35 else 1\n    xml.find(\"post/isFixedPitch\").set(\"value\", str(is_fixed_pitch))\n\n\ndef fix_name_table(xml: ET):\n    \"\"\"name „ÉÜ„Éº„Éñ„É´„ÇíÁ∑®ÈõÜ„Åô„Çã\n    ‰ΩïÊïÖ„ÅãË¨é„ÅÆÂÜÖÂÆπ„ÅÆËëó‰ΩúÊ®©„Éï„Ç£„Éº„É´„Éâ„ÅåÂê´„Åæ„Çå„Å¶„Åó„Åæ„ÅÜ„ÅÆ„Åß„ÄÅÂâäÈô§„Åô„Çã„ÄÇ\n    \"\"\"\n    # „Çø„Ç∞ÂΩ¢Âºè: <namerecord nameID=\"0\" platformID=\"1\" platEncID=\"0\" langID=\"0x0\" unicode=\"True\">COPYLIGHT</namerecord>\n    parent = xml.find(\"name\")\n    for element in parent.findall(\"namerecord[@nameID='0']\"):\n        if \"PlemolJP\" not in element.text:\n            parent.remove(element)\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "hinting_post_process",
          "type": "tree",
          "content": null
        },
        {
          "name": "make.ps1",
          "type": "blob",
          "size": 2.9931640625,
          "content": "# ini „Åã„Çâ VERSION „ÇíÂèñÂæó\n$ini = Get-Content .\\build.ini\n$version = ($ini | Select-String -Pattern \"VERSION\").ToString().Split(\"=\")[1].Trim()\n\n# „Çπ„ÇØ„É™„Éó„Éà„Éï„Ç°„Ç§„É´„Åå„ÅÇ„ÇãÂ†¥ÊâÄ„Å´ÁßªÂãï„Åô„Çã\nSet-Location -Path $PSScriptRoot\n# ÂêÑ„Éï„Ç°„Ç§„É´„ÇíÁΩÆ„Åè„Éï„Ç©„É´„ÉÄ„Çí‰ΩúÊàê\nNew-Item -ItemType Directory -Force -Path \".\\release_files\\\"\n# „Éì„É´„Éâ„Éï„Ç©„É´„ÉÄ„ÇíÂâäÈô§\nRemove-Item -Path .\\build -Recurse -Force\n\n# ‰∏¶ÂàóÂá¶ÁêÜÂÜÖ„Åß„ÄÅÂá¶ÁêÜ„ÅåÈáç„ÅÑNerd Fonts„ÅÆ„Éì„É´„Éâ„ÇíÂÑ™ÂÖà„Åó„Å¶Âá¶ÁêÜ„Åô„Çã\n$option_and_output_folder = @(\n    @(\"--console --nerd-font\", \"ConsoleNF-\"), # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® ÈÄöÂ∏∏Áâà + Nerd Fonts\n    @(\"--console --35 --nerd-font\", \"35ConsoleNF-\"), # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® 3:5ÂπÖÁâà + Nerd Fonts\n    @(\"\", \"-\"), # „Éì„É´„Éâ ÈÄöÂ∏∏Áâà\n    @(\"--35\", \"35-\"), # „Éì„É´„Éâ 3:5ÂπÖÁâà\n    @(\"--console\", \"Console-\"), # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® ÈÄöÂ∏∏Áâà\n    @(\"--console --35\", \"35Console-\"), # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® 1:2ÂπÖÁâà\n    @(\"--hidden-zenkaku-space \", \"HS-\"), # „Éì„É´„Éâ ÈÄöÂ∏∏Áâà ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ‰∏çÂèØË¶ñ\n    @(\"--hidden-zenkaku-space --35\", \"35HS-\"), # „Éì„É´„Éâ 3:5ÂπÖÁâà ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ‰∏çÂèØË¶ñ\n    @(\"--hidden-zenkaku-space --console\", \"ConsoleHS-\"), # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® ÈÄöÂ∏∏Áâà ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ‰∏çÂèØË¶ñ\n    @(\"--hidden-zenkaku-space --console --35\", \"35ConsoleHS-\") # „Éì„É´„Éâ „Ç≥„É≥„ÇΩ„Éº„É´Áî® 1:2ÂπÖÁâà ÂÖ®Ëßí„Çπ„Éö„Éº„Çπ‰∏çÂèØË¶ñ\n)\n\n$option_and_output_folder | Foreach-Object -ThrottleLimit 4 -Parallel {\n    Write-Host \"fontforge script start. option: `\"$($_[0])`\"\"\n    Invoke-Expression \"& `\"C:\\Program Files (x86)\\FontForgeBuilds\\bin\\ffpython.exe`\" .\\fontforge_script.py --do-not-delete-build-dir $($_[0])\" `\n        && Write-Host \"fonttools script start. option: `\"$($_[1])`\"\" `\n        && python fonttools_script.py $_[1]\n}\n\n$move_file_src_dest = @(\n    @(\"PlemolJP*NF*-*.ttf\", \"PlemolJP_NF_$version\", \"NF\"),\n    @(\"PlemolJP*HS*-*.ttf\", \"PlemolJP_HS_$version\", \"HS\"),\n    @(\"PlemolJP*-*.ttf\", \"PlemolJP_$version\", \"\")\n)\n\n$timestamp = Get-Date -Format \"yyyyMMddHHmmss\"\n$move_dir = \".\\release_files\\build_$timestamp\"\n\n$move_file_src_dest | Foreach-Object {\n    $folder_path = \"$move_dir\\$($_[1])\"\n    New-Item -ItemType Directory -Force -Path $folder_path\n    Move-Item -Path \".\\build\\$($_[0])\" -Destination $folder_path -Force\n\n    $variant = \"\"\n    if ($_[2] -ne \"\") {\n        $variant = \"_$($_[2])\"\n    }\n    @(\n        @(\"*35Console*.ttf\", \"PlemolJP35Console$($variant)\"),\n        @(\"*Console*.ttf\", \"PlemolJPConsole$($variant)\"),\n        @(\"*35*.ttf\", \"PlemolJP35$($variant)\"),\n        @(\"*.ttf\", \"PlemolJP$($variant)\")\n    ) | Foreach-Object {\n        $individual_folder_path = \"$folder_path\\$($_[1])\"\n        # „Éï„Ç°„Ç§„É´‰ª∂Êï∞„Åå0‰ª∂„ÅÆÂ†¥Âêà„ÅØ„Éï„Ç©„É´„ÉÄ„Çí‰ΩúÊàê„Åó„Å™„ÅÑ\n        if ((Get-ChildItem -Path $folder_path\\$($_[0])).Count -eq 0) {\n            return\n        }\n        New-Item -ItemType Directory -Force -Path $individual_folder_path\n        Move-Item -Path $folder_path\\$($_[0]) -Destination $individual_folder_path -Force\n    }\n}\n\n"
        },
        {
          "name": "note.md",
          "type": "blob",
          "size": 0.1181640625,
          "content": "### r „Ç∞„É™„Éï„ÅÆÊâãÂãïË™øÊï¥\n\n- ‰∏≠Â§Æ‰ªòËøë„ÅÆ„Éù„Ç§„É≥„Éà„ÅØ x: -35\n- Â∫ïËæ∫„ÅÆÁ∑ö„ÅÆÂè≥Á´Ø„ÅÆ„Éù„Ç§„É≥„Éà„ÅØ x: -50\n"
        },
        {
          "name": "old_script",
          "type": "tree",
          "content": null
        },
        {
          "name": "source",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}