{
  "metadata": {
    "timestamp": 1736568688238,
    "page": 772,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc3OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Yenthe666/InstallScript",
      "stars": 1262,
      "defaultBranch": "16.0",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0205078125,
          "content": "*~\n*.swp\n*.tmp\n*.bak\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0419921875,
          "content": "MIT License\n\nCopyright (c) 2018 Yenthe V.G\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.8837890625,
          "content": "# [Odoo](https://www.odoo.com \"Odoo's Homepage\") Install Script\n\nThis script is based on the install script from Andr√© Schenkels (https://github.com/aschenkels-ictstudio/openerp-install-scripts)\nbut goes a bit further and has been improved. This script will also give you the ability to define an xmlrpc_port in the .conf file that is generated under /etc/\nThis script can be safely used in a multi-odoo code base server because the default Odoo port is changed BEFORE the Odoo is started.\n\n## Installing Nginx\nIf you set the parameter ```INSTALL_NGINX``` to ```True``` you should also configure workers. Without workers you will probably get connection loss issues. Look at [the deployment guide from Odoo](https://www.odoo.com/documentation/16.0/administration/install/deploy.html) on how to configure workers.\n\n## Installation procedure\n\n##### 1. Download the script:\n```\nsudo wget https://raw.githubusercontent.com/Yenthe666/InstallScript/16.0/odoo_install.sh\n```\n##### 2. Modify the parameters as you wish.\nThere are a few things you can configure, this is the most used list:<br/>\n```OE_USER``` will be the username for the system user.<br/>\n```GENERATE_RANDOM_PASSWORD``` if this is set to ```True``` the script will generate a random password, if set to ```False```we'll set the password that is configured in ```OE_SUPERADMIN```. By default the value is ```True``` and the script will generate a random and secure password.<br/>\n```INSTALL_WKHTMLTOPDF``` set to ```False``` if you do not want to install Wkhtmltopdf, if you want to install it you should set it to ```True```.<br/>\n```OE_PORT``` is the port where Odoo should run on, for example 8069.<br/>\n```OE_VERSION``` is the Odoo version to install, for example ```16.0``` for Odoo V16.<br/>\n```IS_ENTERPRISE``` will install the Enterprise version on top of ```16.0``` if you set it to ```True```, set it to ```False``` if you want the community version of Odoo 16.<br/>\n```OE_SUPERADMIN``` is the master password for this Odoo installation.<br/>\n```INSTALL_NGINX``` is set to ```False``` by default. Set this to ```True``` if you want to install Nginx.<br/>\n```WEBSITE_NAME``` Set the website name here for nginx configuration<br/>\n```ENABLE_SSL``` Set this to ```True``` to install [certbot](https://github.com/certbot/certbot) and configure nginx with https using a free Let's Encrypted certificate<br/>\n```ADMIN_EMAIL``` Email is needed to register for Let's Encrypt registration. Replace the default placeholder with an email of your organisation.<br/>\n```INSTALL_NGINX``` and ```ENABLE_SSL``` must be set to ```True``` and the placeholder in ```ADMIN_EMAIL``` must be replaced with a valid email address for certbot installation<br/>\n  _By enabling SSL though Let's Encrypt you agree to the following [policies](https://www.eff.org/code/privacy/policy)_ <br/>\n\n#### 3. Make the script executable\n```\nsudo chmod +x odoo_install.sh\n```\n##### 4. Execute the script:\n```\nsudo ./odoo_install.sh\n```\n\n## Where should I host Odoo?\nThere are plenty of great services that offer good hosting. The script has been tested with a few major players such as [Google Cloud](https://cloud.google.com/), [Hetzner](https://www.hetzner.com/), [Amazon AWS](https://aws.amazon.com/) and [DigitalOcean](https://www.digitalocean.com/products/droplets/).\nIf you'd like you can use my [DigitalOcean referral link](https://m.do.co/c/d605cc420682) which gives you a 200$ voucher for free for the first 60 days.\n\n## Minimal server requirements\nWhile technically you can run an Odoo instance on 1GB (1024MB) of RAM it is absolutely not advised. A Linux instance typically uses 300MB-500MB and the rest has to be split among Odoo, postgreSQL and others. If you install an Odoo you should make sure to use at least 2GB of RAM. This script might fail with less resources too.\nThere are known issues on DigitalOcean for example where the installation crashes on 1GB RAM machines. See https://github.com/Yenthe666/InstallScript/issues/243\n\n"
        },
        {
          "name": "odoo_install.sh",
          "type": "blob",
          "size": 16.421875,
          "content": "#!/bin/bash\n################################################################################\n# Script for installing Odoo on Ubuntu 16.04, 18.04, 20.04 and 22.04 (could be used for other version too)\n# Author: Yenthe Van Ginneken\n#-------------------------------------------------------------------------------\n# This script will install Odoo on your Ubuntu server. It can install multiple Odoo instances\n# in one Ubuntu because of the different xmlrpc_ports\n#-------------------------------------------------------------------------------\n# Make a new file:\n# sudo nano odoo-install.sh\n# Place this content in it and then make the file executable:\n# sudo chmod +x odoo-install.sh\n# Execute the script to install Odoo:\n# ./odoo-install\n################################################################################\n\nOE_USER=\"odoo\"\nOE_HOME=\"/$OE_USER\"\nOE_HOME_EXT=\"/$OE_USER/${OE_USER}-server\"\n# The default port where this Odoo instance will run under (provided you use the command -c in the terminal)\n# Set to true if you want to install it, false if you don't need it or have it already installed.\nINSTALL_WKHTMLTOPDF=\"True\"\n# Set the default Odoo port (you still have to use -c /etc/odoo-server.conf for example to use this.)\nOE_PORT=\"8069\"\n# Choose the Odoo version which you want to install. For example: 16.0, 15.0, 14.0 or saas-22. When using 'master' the master version will be installed.\n# IMPORTANT! This script contains extra libraries that are specifically needed for Odoo 16.0\nOE_VERSION=\"16.0\"\n# Set this to True if you want to install the Odoo enterprise version!\nIS_ENTERPRISE=\"False\"\n# Installs postgreSQL V14 instead of defaults (e.g V12 for Ubuntu 20/22) - this improves performance\nINSTALL_POSTGRESQL_FOURTEEN=\"True\"\n# Set this to True if you want to install Nginx!\nINSTALL_NGINX=\"False\"\n# Set the superadmin password - if GENERATE_RANDOM_PASSWORD is set to \"True\" we will automatically generate a random password, otherwise we use this one\nOE_SUPERADMIN=\"admin\"\n# Set to \"True\" to generate a random password, \"False\" to use the variable in OE_SUPERADMIN\nGENERATE_RANDOM_PASSWORD=\"True\"\nOE_CONFIG=\"${OE_USER}-server\"\n# Set the website name\nWEBSITE_NAME=\"_\"\n# Set the default Odoo longpolling port (you still have to use -c /etc/odoo-server.conf for example to use this.)\nLONGPOLLING_PORT=\"8072\"\n# Set to \"True\" to install certbot and have ssl enabled, \"False\" to use http\nENABLE_SSL=\"True\"\n# Provide Email to register ssl certificate\nADMIN_EMAIL=\"odoo@example.com\"\n##\n###  WKHTMLTOPDF download links\n## === Ubuntu Trusty x64 & x32 === (for other distributions please replace these two links,\n## in order to have correct version of wkhtmltopdf installed, for a danger note refer to\n## https://github.com/odoo/odoo/wiki/Wkhtmltopdf ):\n## https://www.odoo.com/documentation/16.0/administration/install.html\n\n# Check if the operating system is Ubuntu 22.04\nif [[ $(lsb_release -r -s) == \"22.04\" ]]; then\n    WKHTMLTOX_X64=\"https://packages.ubuntu.com/jammy/wkhtmltopdf\"\n    WKHTMLTOX_X32=\"https://packages.ubuntu.com/jammy/wkhtmltopdf\"\n    #No Same link works for both 64 and 32-bit on Ubuntu 22.04\nelse\n    # For older versions of Ubuntu\n    WKHTMLTOX_X64=\"https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.$(lsb_release -c -s)_amd64.deb\"\n    WKHTMLTOX_X32=\"https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.$(lsb_release -c -s)_i386.deb\"\nfi\n\n#--------------------------------------------------\n# Update Server\n#--------------------------------------------------\necho -e \"\\n---- Update Server ----\"\n# universe package is for Ubuntu 18.x\nsudo add-apt-repository universe\n# libpng12-0 dependency for wkhtmltopdf for older Ubuntu versions\nsudo add-apt-repository \"deb http://mirrors.kernel.org/ubuntu/ xenial main\"\nsudo apt-get update\nsudo apt-get upgrade -y\nsudo apt-get install libpq-dev\n\n#--------------------------------------------------\n# Install PostgreSQL Server\n#--------------------------------------------------\necho -e \"\\n---- Install PostgreSQL Server ----\"\nif [ $INSTALL_POSTGRESQL_FOURTEEN = \"True\" ]; then\n    echo -e \"\\n---- Installing postgreSQL V14 due to the user it's choise ----\"\n    sudo curl -fsSL https://www.postgresql.org/media/keys/ACCC4CF8.asc|sudo gpg --dearmor -o /etc/apt/trusted.gpg.d/postgresql.gpg\n    sudo sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list'\n    sudo apt-get update\n    sudo apt-get install postgresql-14\nelse\n    echo -e \"\\n---- Installing the default postgreSQL version based on Linux version ----\"\n    sudo apt-get install postgresql postgresql-server-dev-all -y\nfi\n\n\necho -e \"\\n---- Creating the ODOO PostgreSQL User  ----\"\nsudo su - postgres -c \"createuser -s $OE_USER\" 2> /dev/null || true\n\n#--------------------------------------------------\n# Install Dependencies\n#--------------------------------------------------\necho -e \"\\n--- Installing Python 3 + pip3 --\"\nsudo apt-get install python3 python3-pip\nsudo apt-get install git python3-cffi build-essential wget python3-dev python3-venv python3-wheel libxslt-dev libzip-dev libldap2-dev libsasl2-dev python3-setuptools node-less libpng-dev libjpeg-dev gdebi -y\n\necho -e \"\\n---- Install python packages/requirements ----\"\nsudo -H pip3 install -r https://github.com/odoo/odoo/raw/${OE_VERSION}/requirements.txt\n\necho -e \"\\n---- Installing nodeJS NPM and rtlcss for LTR support ----\"\nsudo apt-get install nodejs npm -y\nsudo npm install -g rtlcss\n\n#--------------------------------------------------\n# Install Wkhtmltopdf if needed\n#--------------------------------------------------\nif [ $INSTALL_WKHTMLTOPDF = \"True\" ]; then\n  echo -e \"\\n---- Install wkhtml and place shortcuts on correct place for ODOO 13 ----\"\n  #pick up correct one from x64 & x32 versions:\n  if [ \"`getconf LONG_BIT`\" == \"64\" ];then\n      _url=$WKHTMLTOX_X64\n  else\n      _url=$WKHTMLTOX_X32\n  fi\n  sudo wget $_url\n  \n\n  if [[ $(lsb_release -r -s) == \"22.04\" ]]; then\n    # Ubuntu 22.04 LTS\n    sudo apt install wkhtmltopdf -y\n  else\n      # For older versions of Ubuntu\n    sudo gdebi --n `basename $_url`\n  fi\n  \n  sudo ln -s /usr/local/bin/wkhtmltopdf /usr/bin\n  sudo ln -s /usr/local/bin/wkhtmltoimage /usr/bin\nelse\n  echo \"Wkhtmltopdf isn't installed due to the choice of the user!\"\nfi\n\necho -e \"\\n---- Create ODOO system user ----\"\nsudo adduser --system --quiet --shell=/bin/bash --home=$OE_HOME --gecos 'ODOO' --group $OE_USER\n#The user should also be added to the sudo'ers group.\nsudo adduser $OE_USER sudo\n\necho -e \"\\n---- Create Log directory ----\"\nsudo mkdir /var/log/$OE_USER\nsudo chown $OE_USER:$OE_USER /var/log/$OE_USER\n\n#--------------------------------------------------\n# Install ODOO\n#--------------------------------------------------\necho -e \"\\n==== Installing ODOO Server ====\"\nsudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/odoo $OE_HOME_EXT/\n\nif [ $IS_ENTERPRISE = \"True\" ]; then\n    # Odoo Enterprise install!\n    sudo pip3 install psycopg2-binary pdfminer.six\n    echo -e \"\\n--- Create symlink for node\"\n    sudo ln -s /usr/bin/nodejs /usr/bin/node\n    sudo su $OE_USER -c \"mkdir $OE_HOME/enterprise\"\n    sudo su $OE_USER -c \"mkdir $OE_HOME/enterprise/addons\"\n\n    GITHUB_RESPONSE=$(sudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/enterprise \"$OE_HOME/enterprise/addons\" 2>&1)\n    while [[ $GITHUB_RESPONSE == *\"Authentication\"* ]]; do\n        echo \"------------------------WARNING------------------------------\"\n        echo \"Your authentication with Github has failed! Please try again.\"\n        printf \"In order to clone and install the Odoo enterprise version you \\nneed to be an offical Odoo partner and you need access to\\nhttp://github.com/odoo/enterprise.\\n\"\n        echo \"TIP: Press ctrl+c to stop this script.\"\n        echo \"-------------------------------------------------------------\"\n        echo \" \"\n        GITHUB_RESPONSE=$(sudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/enterprise \"$OE_HOME/enterprise/addons\" 2>&1)\n    done\n\n    echo -e \"\\n---- Added Enterprise code under $OE_HOME/enterprise/addons ----\"\n    echo -e \"\\n---- Installing Enterprise specific libraries ----\"\n    sudo -H pip3 install num2words ofxparse dbfread ebaysdk firebase_admin pyOpenSSL\n    sudo npm install -g less\n    sudo npm install -g less-plugin-clean-css\nfi\n\necho -e \"\\n---- Create custom module directory ----\"\nsudo su $OE_USER -c \"mkdir $OE_HOME/custom\"\nsudo su $OE_USER -c \"mkdir $OE_HOME/custom/addons\"\n\necho -e \"\\n---- Setting permissions on home folder ----\"\nsudo chown -R $OE_USER:$OE_USER $OE_HOME/*\n\necho -e \"* Create server config file\"\n\n\nsudo touch /etc/${OE_CONFIG}.conf\necho -e \"* Creating server config file\"\nsudo su root -c \"printf '[options] \\n; This is the password that allows database operations:\\n' >> /etc/${OE_CONFIG}.conf\"\nif [ $GENERATE_RANDOM_PASSWORD = \"True\" ]; then\n    echo -e \"* Generating random admin password\"\n    OE_SUPERADMIN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)\nfi\nsudo su root -c \"printf 'admin_passwd = ${OE_SUPERADMIN}\\n' >> /etc/${OE_CONFIG}.conf\"\nif [ $OE_VERSION > \"11.0\" ];then\n    sudo su root -c \"printf 'http_port = ${OE_PORT}\\n' >> /etc/${OE_CONFIG}.conf\"\nelse\n    sudo su root -c \"printf 'xmlrpc_port = ${OE_PORT}\\n' >> /etc/${OE_CONFIG}.conf\"\nfi\nsudo su root -c \"printf 'logfile = /var/log/${OE_USER}/${OE_CONFIG}.log\\n' >> /etc/${OE_CONFIG}.conf\"\n\nif [ $IS_ENTERPRISE = \"True\" ]; then\n    sudo su root -c \"printf 'addons_path=${OE_HOME}/enterprise/addons,${OE_HOME_EXT}/addons\\n' >> /etc/${OE_CONFIG}.conf\"\nelse\n    sudo su root -c \"printf 'addons_path=${OE_HOME_EXT}/addons,${OE_HOME}/custom/addons\\n' >> /etc/${OE_CONFIG}.conf\"\nfi\nsudo chown $OE_USER:$OE_USER /etc/${OE_CONFIG}.conf\nsudo chmod 640 /etc/${OE_CONFIG}.conf\n\necho -e \"* Create startup file\"\nsudo su root -c \"echo '#!/bin/sh' >> $OE_HOME_EXT/start.sh\"\nsudo su root -c \"echo 'sudo -u $OE_USER $OE_HOME_EXT/odoo-bin --config=/etc/${OE_CONFIG}.conf' >> $OE_HOME_EXT/start.sh\"\nsudo chmod 755 $OE_HOME_EXT/start.sh\n\n#--------------------------------------------------\n# Adding ODOO as a deamon (initscript)\n#--------------------------------------------------\n\necho -e \"* Create init file\"\ncat <<EOF > ~/$OE_CONFIG\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides: $OE_CONFIG\n# Required-Start: \\$remote_fs \\$syslog\n# Required-Stop: \\$remote_fs \\$syslog\n# Should-Start: \\$network\n# Should-Stop: \\$network\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Enterprise Business Applications\n# Description: ODOO Business Applications\n### END INIT INFO\nPATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/bin\nDAEMON=$OE_HOME_EXT/odoo-bin\nNAME=$OE_CONFIG\nDESC=$OE_CONFIG\n# Specify the user name (Default: odoo).\nUSER=$OE_USER\n# Specify an alternate config file (Default: /etc/openerp-server.conf).\nCONFIGFILE=\"/etc/${OE_CONFIG}.conf\"\n# pidfile\nPIDFILE=/var/run/\\${NAME}.pid\n# Additional options that are passed to the Daemon.\nDAEMON_OPTS=\"-c \\$CONFIGFILE\"\n[ -x \\$DAEMON ] || exit 0\n[ -f \\$CONFIGFILE ] || exit 0\ncheckpid() {\n[ -f \\$PIDFILE ] || return 1\npid=\\`cat \\$PIDFILE\\`\n[ -d /proc/\\$pid ] && return 0\nreturn 1\n}\ncase \"\\${1}\" in\nstart)\necho -n \"Starting \\${DESC}: \"\nstart-stop-daemon --start --quiet --pidfile \\$PIDFILE \\\n--chuid \\$USER --background --make-pidfile \\\n--exec \\$DAEMON -- \\$DAEMON_OPTS\necho \"\\${NAME}.\"\n;;\nstop)\necho -n \"Stopping \\${DESC}: \"\nstart-stop-daemon --stop --quiet --pidfile \\$PIDFILE \\\n--oknodo\necho \"\\${NAME}.\"\n;;\nrestart|force-reload)\necho -n \"Restarting \\${DESC}: \"\nstart-stop-daemon --stop --quiet --pidfile \\$PIDFILE \\\n--oknodo\nsleep 1\nstart-stop-daemon --start --quiet --pidfile \\$PIDFILE \\\n--chuid \\$USER --background --make-pidfile \\\n--exec \\$DAEMON -- \\$DAEMON_OPTS\necho \"\\${NAME}.\"\n;;\n*)\nN=/etc/init.d/\\$NAME\necho \"Usage: \\$NAME {start|stop|restart|force-reload}\" >&2\nexit 1\n;;\nesac\nexit 0\nEOF\n\necho -e \"* Security Init File\"\nsudo mv ~/$OE_CONFIG /etc/init.d/$OE_CONFIG\nsudo chmod 755 /etc/init.d/$OE_CONFIG\nsudo chown root: /etc/init.d/$OE_CONFIG\n\necho -e \"* Start ODOO on Startup\"\nsudo update-rc.d $OE_CONFIG defaults\n\n#--------------------------------------------------\n# Install Nginx if needed\n#--------------------------------------------------\nif [ $INSTALL_NGINX = \"True\" ]; then\n  echo -e \"\\n---- Installing and setting up Nginx ----\"\n  sudo apt install nginx -y\n  cat <<EOF > ~/odoo\nserver {\n  listen 80;\n\n  # set proper server name after domain set\n  server_name $WEBSITE_NAME;\n\n  # Add Headers for odoo proxy mode\n  proxy_set_header X-Forwarded-Host \\$host;\n  proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto \\$scheme;\n  proxy_set_header X-Real-IP \\$remote_addr;\n  add_header X-Frame-Options \"SAMEORIGIN\";\n  add_header X-XSS-Protection \"1; mode=block\";\n  proxy_set_header X-Client-IP \\$remote_addr;\n  proxy_set_header HTTP_X_FORWARDED_HOST \\$remote_addr;\n\n  #   odoo    log files\n  access_log  /var/log/nginx/$OE_USER-access.log;\n  error_log       /var/log/nginx/$OE_USER-error.log;\n\n  #   increase    proxy   buffer  size\n  proxy_buffers   16  64k;\n  proxy_buffer_size   128k;\n\n  proxy_read_timeout 900s;\n  proxy_connect_timeout 900s;\n  proxy_send_timeout 900s;\n\n  #   force   timeouts    if  the backend dies\n  proxy_next_upstream error   timeout invalid_header  http_500    http_502\n  http_503;\n\n  types {\n    text/less less;\n    text/scss scss;\n  }\n\n  #   enable  data    compression\n  gzip    on;\n  gzip_min_length 1100;\n  gzip_buffers    4   32k;\n  gzip_types  text/css text/less text/plain text/xml application/xml application/json application/javascript application/pdf image/jpeg image/png;\n  gzip_vary   on;\n  client_header_buffer_size 4k;\n  large_client_header_buffers 4 64k;\n  client_max_body_size 0;\n\n  location / {\n    proxy_pass    http://127.0.0.1:$OE_PORT;\n    # by default, do not forward anything\n    proxy_redirect off;\n  }\n\n  location /longpolling {\n    proxy_pass http://127.0.0.1:$LONGPOLLING_PORT;\n  }\n\n  location ~* .(js|css|png|jpg|jpeg|gif|ico)$ {\n    expires 2d;\n    proxy_pass http://127.0.0.1:$OE_PORT;\n    add_header Cache-Control \"public, no-transform\";\n  }\n\n  # cache some static data in memory for 60mins.\n  location ~ /[a-zA-Z0-9_-]*/static/ {\n    proxy_cache_valid 200 302 60m;\n    proxy_cache_valid 404      1m;\n    proxy_buffering    on;\n    expires 864000;\n    proxy_pass    http://127.0.0.1:$OE_PORT;\n  }\n}\nEOF\n\n  sudo mv ~/odoo /etc/nginx/sites-available/$WEBSITE_NAME\n  sudo ln -s /etc/nginx/sites-available/$WEBSITE_NAME /etc/nginx/sites-enabled/$WEBSITE_NAME\n  sudo rm /etc/nginx/sites-enabled/default\n  sudo service nginx reload\n  sudo su root -c \"printf 'proxy_mode = True\\n' >> /etc/${OE_CONFIG}.conf\"\n  echo \"Done! The Nginx server is up and running. Configuration can be found at /etc/nginx/sites-available/$WEBSITE_NAME\"\nelse\n  echo \"Nginx isn't installed due to choice of the user!\"\nfi\n\n#--------------------------------------------------\n# Enable ssl with certbot\n#--------------------------------------------------\n\nif [ $INSTALL_NGINX = \"True\" ] && [ $ENABLE_SSL = \"True\" ] && [ $ADMIN_EMAIL != \"odoo@example.com\" ]  && [ $WEBSITE_NAME != \"_\" ];then\n  sudo apt-get update -y\n  sudo apt install snapd -y\n  sudo snap install core; snap refresh core\n  sudo snap install --classic certbot\n  sudo apt-get install python3-certbot-nginx -y\n  sudo certbot --nginx -d $WEBSITE_NAME --noninteractive --agree-tos --email $ADMIN_EMAIL --redirect\n  sudo service nginx reload\n  echo \"SSL/HTTPS is enabled!\"\nelse\n  echo \"SSL/HTTPS isn't enabled due to choice of the user or because of a misconfiguration!\"\n  if $ADMIN_EMAIL = \"odoo@example.com\";then \n    echo \"Certbot does not support registering odoo@example.com. You should use real e-mail address.\"\n  fi\n  if $WEBSITE_NAME = \"_\";then\n    echo \"Website name is set as _. Cannot obtain SSL Certificate for _. You should use real website address.\"\n  fi\nfi\n\necho -e \"* Starting Odoo Service\"\nsudo su root -c \"/etc/init.d/$OE_CONFIG start\"\necho \"-----------------------------------------------------------\"\necho \"Done! The Odoo server is up and running. Specifications:\"\necho \"Port: $OE_PORT\"\necho \"User service: $OE_USER\"\necho \"Configuraton file location: /etc/${OE_CONFIG}.conf\"\necho \"Logfile location: /var/log/$OE_USER\"\necho \"User PostgreSQL: $OE_USER\"\necho \"Code location: $OE_USER\"\necho \"Addons folder: $OE_USER/$OE_CONFIG/addons/\"\necho \"Password superadmin (database): $OE_SUPERADMIN\"\necho \"Start Odoo service: sudo service $OE_CONFIG start\"\necho \"Stop Odoo service: sudo service $OE_CONFIG stop\"\necho \"Restart Odoo service: sudo service $OE_CONFIG restart\"\nif [ $INSTALL_NGINX = \"True\" ]; then\n  echo \"Nginx configuration file: /etc/nginx/sites-available/$WEBSITE_NAME\"\nfi\necho \"-----------------------------------------------------------\"\n"
        },
        {
          "name": "odoo_install_debian.sh",
          "type": "blob",
          "size": 13.4853515625,
          "content": "#!/bin/bash\n################################################################################\n# Script for installing Odoo on Debian 10.0 (could be used for other version too)\n# Authors: Yenthe Van Ginneken, C√©sar Cordero Rodr√≠guez\n# Maintainers: Yenthe Van Ginneken, C√©sar Cordero Rodr√≠guez\n#-------------------------------------------------------------------------------\n# This script will install Odoo on your Debian 10.0 server. It can install multiple Odoo instances\n# in one Debian because of the different xmlrpc_ports\n#-------------------------------------------------------------------------------\n# Make a new file:\n# sudo nano odoo-install.sh\n# Place this content in it and then make the file executable:\n# sudo chmod +x odoo-install.sh\n# Execute the script to install Odoo:\n# ./odoo-install\n################################################################################\n\nOE_USER=\"odoo\"\nOE_HOME=\"/$OE_USER\"\nOE_HOME_EXT=\"/$OE_USER/${OE_USER}-server\"\n# The default port where this Odoo instance will run under (provided you use the command -c in the terminal)\n# Set to true if you want to install it, false if you don't need it or have it already installed.\nINSTALL_WKHTMLTOPDF=\"True\"\n# Set the default Odoo port (you still have to use -c /etc/odoo-server.conf for example to use this.)\nOE_PORT=\"8069\"\n# Choose the Odoo version which you want to install. For example: 13.0, 12.0, 11.0 or saas-18. When using 'master' the master version will be installed.\n# IMPORTANT! This script contains extra libraries that are specifically needed for Odoo 13.0\nOE_VERSION=\"14.0\"\n# Set this to True if you want to install the Odoo enterprise version!\nIS_ENTERPRISE=\"False\"\n# Set this to True if you want to install Nginx!\nINSTALL_NGINX=\"False\"\n# Set the superadmin password - if GENERATE_RANDOM_PASSWORD is set to \"True\" we will automatically generate a random password, otherwise we use this one\nOE_SUPERADMIN=\"admin\"\n# Set to \"True\" to generate a random password, \"False\" to use the variable in OE_SUPERADMIN\nGENERATE_RANDOM_PASSWORD=\"True\"\nOE_CONFIG=\"${OE_USER}-server\"\n# Set the website name\nWEBSITE_NAME=\"_\"\n# Set the default Odoo longpolling port (you still have to use -c /etc/odoo-server.conf for example to use this.)\nLONGPOLLING_PORT=\"8072\"\n\n##\n###  WKHTMLTOPDF download links\n## === Debian Buster x64 & x32 === (for other distributions please replace these two links,\n## in order to have correct version of wkhtmltopdf installed, for a danger note refer to\n## https://github.com/odoo/odoo/wiki/Wkhtmltopdf ):\n## https://www.odoo.com/documentation/12.0/setup/install.html#debian-ubuntu\n\nWKHTMLTOX_X64=https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.buster_amd64.deb\nWKHTMLTOX_X32=https://github.com/wkhtmltopdf/wkhtmltopdf/releases/download/0.12.5/wkhtmltox_0.12.5-1.buster_i386.deb\n#--------------------------------------------------\n# Update Server\n#--------------------------------------------------\necho -e \"\\n---- Update Server ----\"\nsudo apt-get update\nsudo apt-get upgrade -y\n\n#--------------------------------------------------\n# Install PostgreSQL Server\n#--------------------------------------------------\necho -e \"\\n---- Install PostgreSQL Server ----\"\nsudo apt-get install postgresql -y\n\necho -e \"\\n---- Creating the ODOO PostgreSQL User  ----\"\nsudo su - postgres -c \"createuser -s $OE_USER\" 2> /dev/null || true\n\n#--------------------------------------------------\n# Install Dependencies\n#--------------------------------------------------\necho -e \"\\n--- Installing Python 3 + pip3 --\"\nsudo apt-get install git python3 python3-pip build-essential wget python3-dev python3-venv python3-wheel libxslt1-dev -y\nsudo apt-get install libzip-dev libldap2-dev libsasl2-dev python3-setuptools node-less gdebi -y\n\necho -e \"\\n---- Install python packages/requirements ----\"\nsudo pip3 install -r https://github.com/odoo/odoo/raw/${OE_VERSION}/requirements.txt\n\necho -e \"\\n---- Installing nodeJS NPM and rtlcss for LTR support ----\"\nsudo apt-get install nodejs npm -y\nsudo npm install -g rtlcss\n\n#--------------------------------------------------\n# Install Wkhtmltopdf if needed\n#--------------------------------------------------\nif [ $INSTALL_WKHTMLTOPDF = \"True\" ]; then\n  echo -e \"\\n---- Install wkhtml and place shortcuts on correct place for ODOO 13 ----\"\n  #pick up correct one from x64 & x32 versions:\n  if [ \"`getconf LONG_BIT`\" == \"64\" ];then\n      _url=$WKHTMLTOX_X64\n  else\n      _url=$WKHTMLTOX_X32\n  fi\n  sudo wget $_url\n  sudo gdebi --n `basename $_url`\n  sudo ln -s /usr/local/bin/wkhtmltopdf /usr/bin\n  sudo ln -s /usr/local/bin/wkhtmltoimage /usr/bin\nelse\n  echo \"Wkhtmltopdf isn't installed due to the choice of the user!\"\nfi\n\necho -e \"\\n---- Create ODOO system user ----\"\nsudo adduser --system --quiet --shell=/bin/bash --home=$OE_HOME --gecos 'ODOO' --group $OE_USER\n#The user should also be added to the sudo'ers group.\nsudo adduser $OE_USER sudo\n\necho -e \"\\n---- Create Log directory ----\"\nsudo mkdir /var/log/$OE_USER\nsudo chown $OE_USER:$OE_USER /var/log/$OE_USER\n\n#--------------------------------------------------\n# Install ODOO\n#--------------------------------------------------\necho -e \"\\n==== Installing ODOO Server ====\"\nsudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/odoo $OE_HOME_EXT/\n\nif [ $IS_ENTERPRISE = \"True\" ]; then\n    # Odoo Enterprise install!\n    echo -e \"\\n--- Create symlink for node\"\n    sudo ln -s /usr/bin/nodejs /usr/bin/node\n    sudo su $OE_USER -c \"mkdir $OE_HOME/enterprise\"\n    sudo su $OE_USER -c \"mkdir $OE_HOME/enterprise/addons\"\n\n    GITHUB_RESPONSE=$(sudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/enterprise \"$OE_HOME/enterprise/addons\" 2>&1)\n    while [[ $GITHUB_RESPONSE == *\"Authentication\"* ]]; do\n        echo \"------------------------WARNING------------------------------\"\n        echo \"Your authentication with Github has failed! Please try again.\"\n        printf \"In order to clone and install the Odoo enterprise version you \\nneed to be an offical Odoo partner and you need access to\\nhttp://github.com/odoo/enterprise.\\n\"\n        echo \"TIP: Press ctrl+c to stop this script.\"\n        echo \"-------------------------------------------------------------\"\n        echo \" \"\n        GITHUB_RESPONSE=$(sudo git clone --depth 1 --branch $OE_VERSION https://www.github.com/odoo/enterprise \"$OE_HOME/enterprise/addons\" 2>&1)\n    done\n\n    echo -e \"\\n---- Added Enterprise code under $OE_HOME/enterprise/addons ----\"\n    echo -e \"\\n---- Installing Enterprise specific libraries ----\"\n    sudo pip3 install num2words ofxparse dbfread ebaysdk firebase_admin pyOpenSSL\n    sudo npm install -g less\n    sudo npm install -g less-plugin-clean-css\nfi\n\necho -e \"\\n---- Create custom module directory ----\"\nsudo su $OE_USER -c \"mkdir $OE_HOME/custom\"\nsudo su $OE_USER -c \"mkdir $OE_HOME/custom/addons\"\n\necho -e \"\\n---- Setting permissions on home folder ----\"\nsudo chown -R $OE_USER:$OE_USER $OE_HOME/*\n\necho -e \"* Create server config file\"\n\n\nsudo touch /etc/${OE_CONFIG}.conf\necho -e \"* Creating server config file\"\nsudo su root -c \"printf '[options] \\n; This is the password that allows database operations:\\n' >> /etc/${OE_CONFIG}.conf\"\nif [ $GENERATE_RANDOM_PASSWORD = \"True\" ]; then\n    echo -e \"* Generating random admin password\"\n    OE_SUPERADMIN=$(cat /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)\nfi\nsudo su root -c \"printf 'admin_passwd = ${OE_SUPERADMIN}\\n' >> /etc/${OE_CONFIG}.conf\"\nif [ $OE_VERSION >= \"12.0\" ]; then\n    sudo su root -c \"printf 'http_port = ${OE_PORT}\\n' >> /etc/${OE_CONFIG}.conf\"\nelse\n    sudo su root -c \"printf 'xmlrpc_port = ${OE_PORT}\\n' >> /etc/${OE_CONFIG}.conf\"\nfi\nsudo su root -c \"printf 'logfile = /var/log/${OE_USER}/${OE_CONFIG}.log\\n' >> /etc/${OE_CONFIG}.conf\"\n\nif [ $IS_ENTERPRISE = \"True\" ]; then\n    sudo su root -c \"printf 'addons_path=${OE_HOME}/enterprise/addons,${OE_HOME_EXT}/addons\\n' >> /etc/${OE_CONFIG}.conf\"\nelse\n    sudo su root -c \"printf 'addons_path=${OE_HOME_EXT}/addons,${OE_HOME}/custom/addons\\n' >> /etc/${OE_CONFIG}.conf\"\nfi\nsudo chown $OE_USER:$OE_USER /etc/${OE_CONFIG}.conf\nsudo chmod 640 /etc/${OE_CONFIG}.conf\n\necho -e \"* Create startup file\"\nsudo su root -c \"echo '#!/bin/sh' >> $OE_HOME_EXT/start.sh\"\nsudo su root -c \"echo 'sudo -u $OE_USER $OE_HOME_EXT/odoo-bin --config=/etc/${OE_CONFIG}.conf' >> $OE_HOME_EXT/start.sh\"\nsudo chmod 755 $OE_HOME_EXT/start.sh\n\n#--------------------------------------------------\n# Adding ODOO as a deamon (initscript)\n#--------------------------------------------------\n\necho -e \"* Create init file\"\ncat <<EOF > ~/$OE_CONFIG\n#!/bin/sh\n### BEGIN INIT INFO\n# Provides: $OE_CONFIG\n# Required-Start: \\$remote_fs \\$syslog\n# Required-Stop: \\$remote_fs \\$syslog\n# Should-Start: \\$network\n# Should-Stop: \\$network\n# Default-Start: 2 3 4 5\n# Default-Stop: 0 1 6\n# Short-Description: Enterprise Business Applications\n# Description: ODOO Business Applications\n### END INIT INFO\nPATH=/bin:/sbin:/usr/bin\nDAEMON=$OE_HOME_EXT/odoo-bin\nNAME=$OE_CONFIG\nDESC=$OE_CONFIG\n# Specify the user name (Default: odoo).\nUSER=$OE_USER\n# Specify an alternate config file (Default: /etc/openerp-server.conf).\nCONFIGFILE=\"/etc/${OE_CONFIG}.conf\"\n# pidfile\nPIDFILE=/var/run/\\${NAME}.pid\n# Additional options that are passed to the Daemon.\nDAEMON_OPTS=\"-c \\$CONFIGFILE\"\n[ -x \\$DAEMON ] || exit 0\n[ -f \\$CONFIGFILE ] || exit 0\ncheckpid() {\n[ -f \\$PIDFILE ] || return 1\npid=\\`cat \\$PIDFILE\\`\n[ -d /proc/\\$pid ] && return 0\nreturn 1\n}\ncase \"\\${1}\" in\nstart)\necho -n \"Starting \\${DESC}: \"\nstart-stop-daemon --start --quiet --pidfile \\$PIDFILE \\\n--chuid \\$USER --background --make-pidfile \\\n--exec \\$DAEMON -- \\$DAEMON_OPTS\necho \"\\${NAME}.\"\n;;\nstop)\necho -n \"Stopping \\${DESC}: \"\nstart-stop-daemon --stop --quiet --pidfile \\$PIDFILE \\\n--oknodo\necho \"\\${NAME}.\"\n;;\nrestart|force-reload)\necho -n \"Restarting \\${DESC}: \"\nstart-stop-daemon --stop --quiet --pidfile \\$PIDFILE \\\n--oknodo\nsleep 1\nstart-stop-daemon --start --quiet --pidfile \\$PIDFILE \\\n--chuid \\$USER --background --make-pidfile \\\n--exec \\$DAEMON -- \\$DAEMON_OPTS\necho \"\\${NAME}.\"\n;;\n*)\nN=/etc/init.d/\\$NAME\necho \"Usage: \\$NAME {start|stop|restart|force-reload}\" >&2\nexit 1\n;;\nesac\nexit 0\nEOF\n\necho -e \"* Security Init File\"\nsudo mv ~/$OE_CONFIG /etc/init.d/$OE_CONFIG\nsudo chmod 755 /etc/init.d/$OE_CONFIG\nsudo chown root: /etc/init.d/$OE_CONFIG\n\necho -e \"* Start ODOO on Startup\"\nsudo update-rc.d $OE_CONFIG defaults\n\n#--------------------------------------------------\n# Install Nginx if needed\n#--------------------------------------------------\nif [ $INSTALL_NGINX = \"True\" ]; then\n  echo -e \"\\n---- Installing and setting up Nginx ----\"\n  sudo apt install nginx -y\n  cat <<EOF > ~/odoo\n  server {\n  listen 80;\n\n  # set proper server name after domain set\n  server_name $WEBSITE_NAME;\n\n  # Add Headers for odoo proxy mode\n  proxy_set_header X-Forwarded-Host \\$host;\n  proxy_set_header X-Forwarded-For \\$proxy_add_x_forwarded_for;\n  proxy_set_header X-Forwarded-Proto \\$scheme;\n  proxy_set_header X-Real-IP \\$remote_addr;\n  add_header X-Frame-Options \"SAMEORIGIN\";\n  add_header X-XSS-Protection \"1; mode=block\";\n  proxy_set_header X-Client-IP \\$remote_addr;\n  proxy_set_header HTTP_X_FORWARDED_HOST \\$remote_addr;\n\n  #   odoo    log files\n  access_log  /var/log/nginx/$OE_USER-access.log;\n  error_log       /var/log/nginx/$OE_USER-error.log;\n\n  #   increase    proxy   buffer  size\n  proxy_buffers   16  64k;\n  proxy_buffer_size   128k;\n\n  proxy_read_timeout 900s;\n  proxy_connect_timeout 900s;\n  proxy_send_timeout 900s;\n\n  #   force   timeouts    if  the backend dies\n  proxy_next_upstream error   timeout invalid_header  http_500    http_502\n  http_503;\n\n  types {\n  text/less less;\n  text/scss scss;\n  }\n\n  #   enable  data    compression\n  gzip    on;\n  gzip_min_length 1100;\n  gzip_buffers    4   32k;\n  gzip_types  text/css text/less text/plain text/xml application/xml application/json application/javascript application/pdf image/jpeg image/png;\n  gzip_vary   on;\n  client_header_buffer_size 4k;\n  large_client_header_buffers 4 64k;\n  client_max_body_size 0;\n\n  location / {\n  proxy_pass    http://127.0.0.1:$OE_PORT;\n  # by default, do not forward anything\n  proxy_redirect off;\n  }\n\n  location /longpolling {\n  proxy_pass http://127.0.0.1:$LONGPOLLING_PORT;\n  }\n  location ~* .(js|css|png|jpg|jpeg|gif|ico)$ {\n  expires 2d;\n  proxy_pass http://127.0.0.1:$OE_PORT;\n  add_header Cache-Control \"public, no-transform\";\n  }\n  # cache some static data in memory for 60mins.\n  location ~ /[a-zA-Z0-9_-]*/static/ {\n  proxy_cache_valid 200 302 60m;\n  proxy_cache_valid 404      1m;\n  proxy_buffering    on;\n  expires 864000;\n  proxy_pass    http://127.0.0.1:$OE_PORT;\n  }\n  }\nEOF\n\n  sudo mv ~/odoo /etc/nginx/sites-available/\n  sudo ln -s /etc/nginx/sites-available/odoo /etc/nginx/sites-enabled/odoo\n  sudo rm /etc/nginx/sites-enabled/default\n  sudo service nginx reload\n  sudo su root -c \"printf 'proxy_mode = True\\n' >> /etc/${OE_CONFIG}.conf\"\n  echo \"Done! The Nginx server is up and running. Configuration can be found at /etc/nginx/sites-available/odoo\"\nelse\n  echo \"Nginx isn't installed due to choice of the user!\"\nfi\necho -e \"* Starting Odoo Service\"\nsudo su root -c \"/etc/init.d/$OE_CONFIG start\"\necho \"-----------------------------------------------------------\"\necho \"Done! The Odoo server is up and running. Specifications:\"\necho \"Port: $OE_PORT\"\necho \"User service: $OE_USER\"\necho \"User PostgreSQL: $OE_USER\"\necho \"Code location: $OE_USER\"\necho \"Addons folder: $OE_USER/$OE_CONFIG/addons/\"\necho \"Password superadmin (database): $OE_SUPERADMIN\"\necho \"Start Odoo service: sudo service $OE_CONFIG start\"\necho \"Stop Odoo service: sudo service $OE_CONFIG stop\"\necho \"Restart Odoo service: sudo service $OE_CONFIG restart\"\necho \"-----------------------------------------------------------\"\n"
        }
      ]
    }
  ]
}