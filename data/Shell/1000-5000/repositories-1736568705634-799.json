{
  "metadata": {
    "timestamp": 1736568705634,
    "page": 799,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgwOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tldr-devops/startpack",
      "stars": 1224,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0439453125,
          "content": "MIT License\n\nCopyright (c) 2022 TL;DR DevOps\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.3427734375,
          "content": "# startpack\n\n[![#StandWithBelarus](https://img.shields.io/badge/Belarus-red?label=%23%20Stand%20With&labelColor=white&color=red)\n<img src=\"https://upload.wikimedia.org/wikipedia/commons/thumb/e/ea/Presidential_Standard_of_Belarus_%28fictional%29.svg/240px-Presidential_Standard_of_Belarus_%28fictional%29.svg.png\" width=\"20\" height=\"20\" alt=\"Voices From Belarus\" />](https://bysol.org/en/) [![Stand With Ukraine](https://raw.githubusercontent.com/vshymanskyy/StandWithUkraine/main/badges/StandWithUkraine.svg)](https://vshymanskyy.github.io/StandWithUkraine)\n\nThis is a basic setup of services for faster startup development. You can run it via [docker-compose](https://docs.docker.com/compose/) or [docker swarm](https://docs.docker.com/engine/reference/commandline/stack/).\n\nWarning: This setup doesn't provide high level of security or any [high availability](https://www.digitalocean.com/community/tutorials/what-is-high-availability). You have to hire some skilled devops engineer (like me)) for close this gap after getting first round or sales.\n\nAlso you can check [Awesome Selfhosted](https://github.com/awesome-selfhosted/awesome-selfhosted), [Awesome Sysadmin](https://github.com/kahun/awesome-sysadmin) and [Free for Dev](https://free-for.dev/) for more options ;)\n\nAnd [Coolify](https://github.com/coollabsio/coolify) or [Dokku](https://dokku.com) - an open-source & self-hostable Heroku / Netlify alternative\n\n[Discuss on hacker news](https://news.ycombinator.com/item?id=30871211#30871600)\n\nTime track:\n- [Filipp Frizzy](https://github.com/Friz-zy/): 63h 30m for 15 days\n\n## Available and planned open source components\n\n### Platform\n* [DONE] [Docker Compose](https://docs.docker.com/compose/)\n* [DONE] [Docker Swarm](https://docs.docker.com/engine/reference/commandline/stack/)\n* [DONE] [Traefik](https://traefik.io) as web server with autodiscovery and [letsencrypt](https://letsencrypt.org) certs\n* [DONE] [NFS](https://hub.docker.com/r/itsthenetwork/nfs-server-alpine/) for docker swarm volumes\n* [DONE] [Portainer](https://www.portainer.io/) as admin panel for docker services\n* [DONE] [Docker registry](https://docs.docker.com/registry/) for store your docker images\n* [DONE] [Influxdb 2](https://www.influxdata.com/blog/influxdb-2-0-open-source-is-generally-available/) and [Telegraf](https://www.influxdata.com/time-series-platform/telegraf/) for monitoring services\n* [DONE] [Grafana](https://grafana.com/) and [Victoriametrics](https://victoriametrics.com) for monitoring services\n\n### Databases and Storage\n* [DONE] [Mariadb](https://mariadb.org/) as SQL database\n* [DONE] [Postgresql](https://www.postgresql.org/) as another popular SQL database\n* [DONE] [SQL Adminer](https://www.adminer.org/) as admin panel for SQL databases\n* [DONE] [Minio](https://minio.io/) as s3 storage\n\n### Management\n* [DONE] [Gitlab](https://about.gitlab.com/) as git hosting and devops platform\n* [DONE] [Nextcloud](https://nextcloud.com/) as cloud storage with plugins for email, task management, password storage, etc\n* [DONE] [Tuleap](https://www.tuleap.org/) as management software\n* [DONE] [Openproject](https://www.openproject.org/) as management software\n* [DONE] [Vaultwarden](https://github.com/dani-garcia/vaultwarden/wiki) as password manager for business\n* [Backlog] [Zentao](https://www.zentao.pm) as scrum management software\n* [Backlog] [Taiga](https://www.taiga.io/) as kanban board based management software\n* [Backlog] [Owncloud](https://owncloud.com/) as cloud storage\n\n### Chat\n* [DONE] [Rocket](https://rocket.chat/)\n* [Backlog] [Mattermost](https://mattermost.com/)\n* [Backlog] [Twake](https://twake.app/) as alternative to Microsoft Teams\n* [Backlog] [Wire](https://wire.com) as alternative to Microsoft Teams\n\n### Backend as a service\n* [DONE] [Nocodb](https://www.nocodb.com/) as airtable alternative\n* [DONE] [Strapi](https://strapi.io/) as headless CMS\n* [Backlog] [Appwrite](https://appwrite.io/) as firebase alternative\n\n### CMS\n* [Backlog] [Wordpress](https://wordpress.org) one of the most popular CMS\n* [Backlog] [Ghost](https://github.com/TryGhost/Ghost) as alternative to medium\n* [Backlog] [Webiny](https://www.webiny.com/) landing page builder with drag and drop features\n* [Backlog] [Grapedrop](https://grapedrop.com/) open source page builder\n\n### Low Code Platform\n* [Backlog] [Anvil](https://github.com/anvil-works/anvil-runtime) is a framework for building full-stack web apps with nothing but Python\n* [Backlog] [Budibase](https://budibase.com/) build modern business apps in under 5 minutes\n* [Backlog] [Appsmith](https://www.appsmith.com/) a powerful open source framework to build internal tools\n* [Backlog] [Tooljet](https://tooljet.com/) everything you need to build internal tools\n\n### CI & CD\n* [DONE] [Gitlab Runner](https://about.gitlab.com/) should be placed on separate host\n\n### Miss something? [Could you tell me more about how can I help you, please?](https://forms.gle/wSHs4C6pHXaxVm1a8)\n\n## About the Author\n\nHello, everyone! My name is Filipp, and I have been working with high load distribution systems and services, security, monitoring, continuous deployment and release management (DevOps domain) since 2012.\n\nOne of my passions is developing DevOps solutions and contributing to the open-source community. By sharing my knowledge and experiences, I strive to save time for both myself and others while fostering a culture of collaboration and learning.\n\nI had to leave my home country, Belarus, due to my participation in [protests against the oppressive regime of dictator Lukashenko](https://en.wikipedia.org/wiki/2020%E2%80%932021_Belarusian_protests), who maintains a close affiliation with Putin. Since then, I'm trying to build my life from zero in other countries.\n\nIf you are seeking a skilled DevOps lead or architect to enhance your project, I invite you to connect with me on [LinkedIn](https://www.linkedin.com/in/filipp-frizzy-289a0360/) or explore my valuable contributions on [GitHub](https://github.com/Friz-zy/). Let's collaborate and create some cool solutions together :)\n\n## Support\n\nYou can support this or any other of my projects\n  - [![ko-fi](https://ko-fi.com/img/githubbutton_sm.svg)](https://ko-fi.com/filipp_frizzy)\n  - [donationalerts.com/r/filipp_frizzy](https://www.donationalerts.com/r/filipp_frizzy)\n  - ETH 0xCD9fC1719b9E174E911f343CA2B391060F931ff7\n  - BTC bc1q8fhsj24f5ncv3995zk9v3jhwwmscecc6w0tdw3\n\n## Setup\n\nAll operations should be executed from root on target machine. You can use your laptop or some server. For running all services you need at least 2 cpu cores, 8gb memory and 20gb of free disk space. You can find cheap servers on [hetzner.com](https://www.hetzner.com/cloud) or compare small hosters on [vps.today](https://vps.today/).\n\nYou also need a valid domain name pointed to this server for automatically setting up https with [traefik](https://traefik.io) and [letsencrypt](https://letsencrypt.org). However, you can [hack your hosts file](https://docs.rackspace.com/support/how-to/modify-your-hosts-file/) for working without https.\n\nFor bying domain and configuring DNS I recommend you [Cloudflare](https://dash.cloudflare.com). You should create at least two DNS record type `A`:\n1) `your domain name` pointed to `your server IP`\n2) `*.your domain name` pointed to `your server IP`\n\nIf you run services with `docker-compose`, all service will be located on your single server. With `docker stack` (swarm) mode, you can [add addition servers](https://docs.docker.com/engine/swarm/swarm-tutorial/add-nodes/) in the same local network (the same network important for nfs volumes mounting unfortunately).\n\n#### 1) Install docker if it doesn't installed\n(run scripts from the internet is a bad practice, but if you don't know how to install docker with package managers - it's acceptable)\n```\ncurl -fsSL https://get.docker.com -o get-docker.sh\nDRY_RUN=1 sh ./get-docker.sh\nsh ./get-docker.sh\n```\n\nInstall docker-compose\n```\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n```\n\n#### 2) [Setup docker swarm](https://docs.docker.com/engine/reference/commandline/swarm_init/) if you choose using it.\n```\ndocker swarm init --advertise-addr $(hostname -I | awk '{print $1}')\n```\n\n#### 3) Get this repo\n```\ngit clone https://github.com/tldr-devops/startpack.git --depth=1\ncd startpack\n```\n\n#### 4) Fill necessary variables like domain name of your server, your email, passwords for basic auth and sql services.\n\nGenerate random passwords\n```\necho -e \"export TELEPORT_TOKEN=$(echo $RANDOM `date`|md5sum|base64)\\n$(cat env.sh)\" > env.sh\necho -e \"export NEXTCLOUD_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export TULEAP_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export STRAPI_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export GITLAB_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export OPENPROJECT_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export NOCODB_SQL_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export REGISTRY_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export SQL_ROOT_PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\necho -e \"export PASSWORD=$(echo $RANDOM `date`|md5sum|base64|head -c 25)\\n$(cat env.sh)\" > env.sh\n```\n\nYou should change this lines with your email and dns name\n```\necho -e \"export EMAIL='Type your email here'\\n$(cat env.sh)\" > env.sh\necho -e \"export DOMAIN='Type your domain here'\\n$(cat env.sh)\" > env.sh\n```\n\nThis is your credentials, store it in your password manager ;)\n```\ncat env.sh\n```\n\n#### 5) Prepare environment\n```\nsource env.sh\nbash setup.sh\n```\n\nIf you have docker swarm setup with more than one machine, you should start NFS server on main manager and [connect other nodes to it](https://linuxize.com/post/how-to-mount-an-nfs-share-in-linux/):\n\nA) On main machine\n```\n# Setup NFS server with compose as docker-swarm still doesn't support `privileged` mode\ndocker-compose -f nfs.yml up -d\n```\n\nB) On all other machines\n```\nexport MASTER_IP=\"your $MASTER_IP from step 4\"\nexport DATAPATH=\"your $DATAPATH from step 4\"\necho -e \"$MASTER_IP:$DATAPATH $DATAPATH nfs nfsvers=4,rw 0 0\" >> /etc/fstab\nmount $DATAPATH\n```\n\n#### 6) Run your new services\n\nAfter entering all commands below you'll able to login into your new services by addresses:\n* https://traefik.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://portainer.your_domain\n* https://registry.your_domain user `your $REGISTRY_USERNAME` password `your $REGISTRY_PASSWORD`\n* https://influxdb.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://grafana.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://victoriametrics.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://adminer.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://minio-console.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://gitlab.your_domain user `root` password `your $PASSWORD`\n* https://nextcloud.your_domain user `your $USERNAME` password `your $PASSWORD`\n* https://tuleap.your_domain user `admin` password `your $PASSWORD`\n* https://openproject.your_domain user `admin` password `admin`\n* https://rocketchat.your_domain\n* https://vaultwarden.your_domain/admin password `your $PASSWORD`\n* https://nocodb.your_domain\n* https://strapi.your_domain\n\n##### Docker Compose\n\nMandatory steps\n```\ndocker-compose -f setup-compose.yml up -d\ndocker-compose -f databases.yml up -d\n```\n\nfrom now on you can choose which services you need\n```\ndocker-compose -f monitoring.yml up -d\ndocker-compose -f registry.yml up -d\ndocker-compose -f minio.yml up -d\ndocker-compose -f vaultwarden.yml up -d\ndocker-compose -f tuleap.yml up -d\ndocker-compose -f nextcloud.yml up -d\ndocker-compose -f gitlab.yml up -d\n```\n\nAfter enabling portainer you should immediately go to portainer.your_domain and set admin password\n```\ndocker-compose -f portainer.yml up -d\n```\n\nAfter enabling rocketchat you should immediately go to rocketchat.your_domain/admin and set admin password\n```\ndocker-compose -f rocketchat.yml up -d\n```\n\nAfter enabling openproject you should immediately go to openproject.your_domain,\nlogin with `admin` user and `admin` password, change it and update settings on\nopenproject.your_domain/admin/settings/general\n```\ndocker-compose -f openproject.yml up -d\n```\n\nAfter enabling nocodb you should immediately go to nocodb.your_domain and set admin password\n```\ndocker-compose -f nocodb.yml up -d\n```\n\nAfter enabling strapi you should wait a minute and then go to strapi.your_domain/admin and set admin password\n```\ndocker-compose -f strapi.yml up -d\n```\n\n##### Docker Swarm\n\nMandatory steps\n```\ndocker stack deploy --compose-file setup-swarm.yml startpack\ndocker stack deploy --compose-file databases.yml startpack\n```\n\nFrom now on you can choose which services you need\n```\ndocker stack deploy --compose-file monitoring.yml startpack\ndocker stack deploy --compose-file registry.yml startpack\ndocker stack deploy --compose-file minio.yml startpack\ndocker stack deploy --compose-file vaultwarden.yml startpack\ndocker stack deploy --compose-file tuleap.yml startpack\ndocker stack deploy --compose-file nextcloud.yml startpack\ndocker stack deploy --compose-file gitlab.yml startpack\n```\n\nAfter enabling portainer you should immediately go to portainer.your_domain and set admin password\n```\ndocker stack deploy --compose-file portainer.yml startpack\n```\n\nAfter enabling rocketchat you should immediately go to rocketchat.your_domain/admin and set admin password\n```\ndocker stack deploy --compose-file rocketchat.yml startpack\n```\n\nAfter enabling openproject you should immediately go to openproject.your_domain,\nlogin with `admin` user and `admin` password, change it and update settings on\nopenproject.your_domain/admin/settings/general\n```\ndocker stack deploy --compose-file openproject.yml startpack\n```\n\nAfter enabling nocodb you should immediately go to nocodb.your_domain and set admin password\n```\ndocker stack deploy --compose-file nocodb.yml startpack\n```\n\nAfter enabling strapi you should immediately go to strapi.your_domain/admin and set admin password\n```\ndocker stack deploy --compose-file strapi.yml startpack\n```\n\n#### 7) Run gitlab-runner on separate machine with docker-compose\n```\n# Install docker\ncurl -fsSL https://get.docker.com -o get-docker.sh\nDRY_RUN=1 sh ./get-docker.sh\nsh ./get-docker.sh\n\n# Install docker-compose\ncurl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\nchmod +x /usr/local/bin/docker-compose\n\n# Get files\ngit checkout https://github.com/tldr-devops/startpack.git --depth=1\ncd startpack\n\n# Prepare environment\nmkdir -p {builds,cache}\nexport DOMAIN=\"Your domain\"\nexport HASHED_PASSWORD=\"HASHED_PASSWORD from step 4\"\nenvsubst < configs/gitlab-runner.toml > ./config.toml\n\n# Run runner in docker with docker-compose\ndocker-compose -f gitlab-runner.yml up -d\n\n# Check runners logs\ndocker-compose -f gitlab-runner.yml logs -f\n```\n\n#### 8) Login into your docker registry on all docker hosts\n```\ndocker login -u \"Your REGISTRY_USERNAME from step 4\" -p \"Your REGISTRY_PASSWORD from step 4\" registry.\"YOUR DOMAIN\"\n```\n\n#### 9) You should configure backups of your server, at least $DATAPATH directory\n"
        },
        {
          "name": "configs",
          "type": "tree",
          "content": null
        },
        {
          "name": "databases.yml",
          "type": "blob",
          "size": 3.3466796875,
          "content": "version: '3.8'\n\nx-adminer-labels: &adminer-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=database\n    - traefik.http.routers.adminer-http.rule=Host(`adminer.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.adminer-http.entrypoints=http\n    #- traefik.http.routers.adminer-http.middlewares=admin-auth\n    - traefik.http.routers.adminer-http.service=adminer\n    - traefik.http.routers.adminer-http.middlewares=https-redirect\n    - traefik.http.routers.adminer-https.rule=Host(`adminer.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.adminer-https.entrypoints=https\n    - traefik.http.routers.adminer-https.middlewares=admin-auth\n    - traefik.http.routers.adminer-https.tls=true\n    - traefik.http.routers.adminer-https.service=adminer\n    - traefik.http.routers.adminer-https.tls.certresolver=le\n    - traefik.http.services.adminer.loadbalancer.server.port=8080\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - database\n\nx-service-deploy: &service-deploy\n  mode: replicated\n  replicas: 1\n  placement:\n    constraints:\n      - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n\nservices:\n  # https://hub.docker.com/_/adminer\n  adminer:\n    container_name: adminer\n    image: adminer\n    deploy:\n      <<: *service-deploy\n      <<: *adminer-labels\n      placement: {}\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 5M\n    <<: *adminer-labels\n    <<: *service\n\n  # https://hub.docker.com/_/mariadb\n  mariadb:\n    container_name: mariadb\n    image: mariadb:10.7\n    deploy:\n      <<: *service-deploy\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 70M\n    <<: *service\n    environment:\n      MARIADB_ROOT_PASSWORD: ${SQL_ROOT_PASSWORD?Variable SQL_ROOT_PASSWORD not set}\n      #MARIADB_AUTO_UPGRADE: True\n    volumes:\n      - mariadb-data:/var/lib/mysql\n      - mariadb-entrypoint:/docker-entrypoint-initdb.d\n\n  # https://github.com/docker-library/docs/blob/master/postgres/README.md\n  postgres:\n    container_name: postgres\n    image: postgres:14\n    deploy:\n      <<: *service-deploy\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    environment:\n      POSTGRES_PASSWORD: ${SQL_ROOT_PASSWORD?Variable SQL_ROOT_PASSWORD not set}\n      PGDATA: \"/var/lib/postgresql/data\"\n    volumes:\n      - postgres-data:/var/lib/postgresql/data\n      - postgres-entrypoint:/docker-entrypoint-initdb.d\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  mariadb-data:\n    name: mariadb-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/mariadb/data\n  mariadb-entrypoint:\n    name: mariadb-entrypoint\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/mariadb/entrypoint\n  postgres-data:\n    name: postgres-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/postgres/data\n  postgres-entrypoint:\n    name: postgres-entrypoint\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/postgres/entrypoint\n\n\nnetworks:\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "env.sh",
          "type": "blob",
          "size": 0.4873046875,
          "content": "\nexport USERNAME=admin\nexport DATAPATH=/data\nexport REGISTRY_USERNAME=docker\n\nexport HASHED_PASSWORD=$(openssl passwd -apr1 $PASSWORD)\nexport REGISTRY_HASHED_PASSWORD=$(openssl passwd -apr1 $REGISTRY_PASSWORD)\nexport PORTAINER_HASHED_PASSWORD=$(echo $HASHED_PASSWORD|sed 's/\\$/$$/g')\nexport HOSTNAME=$(hostname)\nexport MASTER_IP=$(hostname -I | awk '{print $1}')\nexport MASTER_IP_MASK=$(ip -o -f inet addr show $(ip route list | awk '/^default/ {print $5}') | awk '{print $4}' | sed -e 's|/|\\\\/|g')\n"
        },
        {
          "name": "env.sh.test",
          "type": "blob",
          "size": 0.9501953125,
          "content": "export DOMAIN=example.com\nexport EMAIL=admin@example.com\nexport USERNAME=admin\nexport PASSWORD=Change_Me!!1\nexport SQL_ROOT_PASSWORD=Change_Me!!1\nexport DATAPATH=/mnt/sda1/tmp/data\nexport REGISTRY_USERNAME=docker\nexport REGISTRY_PASSWORD=Change_Me!!1\nexport NOCODB_SQL_PASSWORD=Change_Me!!1\nexport OPENPROJECT_SQL_PASSWORD=Change_Me!!1\nexport GITLAB_SQL_PASSWORD=Change_Me!!1\nexport STRAPI_SQL_PASSWORD=Change_Me!!1\nexport TULEAP_SQL_PASSWORD=N2IxMTY1NjMyOTkzZDZjNTY1MTNmMDQyMTg3Y2Y0YmMgIC0K\nexport NEXTCLOUD_SQL_PASSWORD=Change_Me!!1\n\nexport HASHED_PASSWORD=$(openssl passwd -apr1 $PASSWORD)\nexport REGISTRY_HASHED_PASSWORD=$(openssl passwd -apr1 $REGISTRY_PASSWORD)\nexport PORTAINER_HASHED_PASSWORD=$(echo $HASHED_PASSWORD|sed 's/\\$/$$/g')\nexport HOSTNAME=$(hostname)\nexport MASTER_IP=192.168.99.100 #$(hostname -I | awk '{print $1}')\nexport MASTER_IP_MASK=$(ip -o -f inet addr show $(ip route list | awk '/^default/ {print $5}') | awk '{print $4}' | sed -e 's|/|\\\\/|g')\n"
        },
        {
          "name": "gitlab-runner.yml",
          "type": "blob",
          "size": 0.6103515625,
          "content": "version: '3.8'\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n\nservices:\n  # https://docs.gitlab.com/runner/install/docker.html\n  # https://docs.gitlab.com/runner/configuration/advanced-configuration.html\n  gitlab-runner:\n    image: gitlab/gitlab-runner:alpine\n    <<: *service\n    volumes:\n      - ./config.toml:/etc/gitlab-runner/config.toml\n      - ./builds:/builds\n      - ./cache:/cache\n      - /root:/root\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - /usr/bin/docker:/usr/bin/docker:ro\n    shm_size: '256m'\n    user: root\n"
        },
        {
          "name": "gitlab.yml",
          "type": "blob",
          "size": 4.3056640625,
          "content": "version: '3.8'\n\nx-gitlab-labels: &gitlab-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=gitlab\n    - traefik.http.routers.gitlab-http.rule=Host(`gitlab.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.gitlab-http.entrypoints=http\n    - traefik.http.routers.gitlab-http.service=gitlab\n    - traefik.http.routers.gitlab-http.middlewares=https-redirect\n    - traefik.http.routers.gitlab-https.rule=Host(`gitlab.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.gitlab-https.entrypoints=https\n    - traefik.http.routers.gitlab-https.tls=true\n    - traefik.http.routers.gitlab-https.service=gitlab\n    - traefik.http.routers.gitlab-https.tls.certresolver=le\n    - traefik.http.services.gitlab.loadbalancer.server.port=80\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - gitlab\n    - database\n\nservices:\n  # https://hub.docker.com/r/gitlab/gitlab-ce\n  # https://docs.gitlab.com/ee/install/docker.html\n  # https://docs.gitlab.com/ee/administration/environment_variables.html\n  # https://github.com/gitlabhq/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template\n  # https://docs.gitlab.com/ee/administration/monitoring/prometheus/\n  gitlab:\n    container_name: gitlab\n    image: gitlab/gitlab-ce\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.10'\n          memory: 2900M\n      <<: *gitlab-labels\n    <<: *gitlab-labels\n    <<: *service\n    ports:\n      - '2222:22'\n    environment:\n      EXTERNAL_URL: https://gitlab.${DOMAIN?Variable DOMAIN not set}\n      GITLAB_HOST: https://gitlab.${DOMAIN?Variable DOMAIN not set}\n      DATABASE_URL: \"postgres://gitlab:${GITLAB_SQL_PASSWORD?Variable GITLAB_SQL_PASSWORD not set}@postgres:5432/gitlab\"\n      GITLAB_ROOT_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n      GITLAB_SHARED_RUNNERS_REGISTRATION_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n      GITLAB_OMNIBUS_CONFIG: |\n        # Add any other gitlab.rb configuration here, each on its own line\n        nginx['enable'] = true\n        nginx['listen_port'] = 80\n        nginx['listen_https'] = false\n\n        gitlab_rails['gitlab_shell_ssh_port'] = 2222\n\n        ### GitLab database settings\n        ###! Docs: https://docs.gitlab.com/omnibus/settings/database.html\n        gitlab_rails['db_adapter'] = \"postgresql\"\n        gitlab_rails['db_database'] = \"gitlab\"\n        gitlab_rails['db_username'] = \"gitlab\"\n        gitlab_rails['db_password'] = \"${GITLAB_SQL_PASSWORD?Variable GITLAB_SQL_PASSWORD not set}\"\n        gitlab_rails['db_host'] = \"postgres\"\n        gitlab_rails['db_port'] = 5432\n\n        #### Redis TCP connection\n        # gitlab_rails['redis_host'] = \"127.0.0.1\"\n        # gitlab_rails['redis_port'] = 6379\n        # gitlab_rails['redis_ssl'] = false\n        # gitlab_rails['redis_password'] = nil\n        # gitlab_rails['redis_database'] = 0\n        # gitlab_rails['redis_enable_client'] = true\n\n        letsencrypt['enable'] = false\n        registry['enable'] = false\n        postgresql['enable'] = false\n        prometheus['enable'] = false\n        alertmanager['enable'] = false\n        node_exporter['enable'] = false\n        redis_exporter['enable'] = false\n        postgres_exporter['enable'] = false\n        pgbouncer_exporter['enable'] = false\n        gitlab_exporter['enable'] = false\n        prometheus_monitoring['enable'] = false\n        grafana['enable'] = false\n    volumes:\n      - gitlab-configs:/etc/gitlab\n      - gitlab-logs:/var/log/gitlab\n      - gitlab-data:/var/opt/gitlab\n    shm_size: '256m'\n    user: root\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  gitlab-data:\n    name: gitlab-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/gitlab/data\n  gitlab-configs:\n    name: gitlab-configs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/gitlab/configs\n  gitlab-logs:\n    name: gitlab-logs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/gitlab/logs\n\nnetworks:\n  gitlab:\n    name: gitlab\n    external: true\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "minio.yml",
          "type": "blob",
          "size": 2.6494140625,
          "content": "version: '3.8'\n\nx-minio-labels: &minio-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=minio\n    - traefik.http.routers.minio-http.rule=Host(`minio.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.minio-http.entrypoints=http\n    - traefik.http.routers.minio-http.service=minio\n    #- traefik.http.routers.minio-http.middlewares=https-redirect\n    - traefik.http.routers.minio-https.rule=Host(`minio.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.minio-https.entrypoints=https\n    - traefik.http.routers.minio-https.tls=true\n    - traefik.http.routers.minio-https.service=minio\n    - traefik.http.routers.minio-https.tls.certresolver=le\n    - traefik.http.services.minio.loadbalancer.server.port=9000\n    - traefik.http.routers.minio-console-http.rule=Host(`minio-console.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.minio-console-http.entrypoints=http\n    - traefik.http.routers.minio-console-http.service=minio-console\n    #- traefik.http.routers.minio-console-http.middlewares=https-redirect\n    - traefik.http.routers.minio-console-https.rule=Host(`minio-console.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.minio-console-https.entrypoints=https\n    - traefik.http.routers.minio-console-https.tls=true\n    - traefik.http.routers.minio-console-https.service=minio-console\n    - traefik.http.routers.minio-console-https.tls.certresolver=le\n    - traefik.http.services.minio-console.loadbalancer.server.port=9001\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - minio\n\nservices:\n  # https://docs.docker.com/minio/configuration/\n  minio:\n    container_name: minio\n    image: quay.io/minio/minio\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.03'\n          memory: 70M\n      <<: *minio-labels\n    <<: *minio-labels\n    <<: *service\n    environment:\n      MINIO_ROOT_USER: ${USERNAME?Variable USERNAME not set}\n      MINIO_ROOT_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n    command: server /data --console-address \":9001\"\n    volumes:\n      - minio-data:/data\n    healthcheck:\n      test: [\"CMD\", \"curl\", \"-f\", \"http://localhost:9000/minio/health/live\"]\n      interval: 1s\n      timeout: 1s\n      retries: 120\n      start_period: 2s\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  minio-data:\n    name: minio-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/minio/data\n\nnetworks:\n  minio:\n    name: minio\n    external: true\n"
        },
        {
          "name": "monitoring.yml",
          "type": "blob",
          "size": 11.7705078125,
          "content": "version: '3.8'\n\nx-victoriametrics-labels: &victoriametrics-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=monitoring\n    - traefik.http.routers.victoriametrics-http.rule=Host(`victoriametrics.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.victoriametrics-http.entrypoints=http\n    #- traefik.http.routers.victoriametrics-http.middlewares=admin-auth\n    - traefik.http.routers.victoriametrics-http.service=victoriametrics\n    - traefik.http.routers.victoriametrics-http.middlewares=https-redirect\n    - traefik.http.routers.victoriametrics-https.rule=Host(`victoriametrics.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.victoriametrics-https.entrypoints=https\n    - traefik.http.routers.victoriametrics-https.middlewares=admin-auth\n    - traefik.http.routers.victoriametrics-https.tls=true\n    - traefik.http.routers.victoriametrics-https.service=victoriametrics\n    - traefik.http.routers.victoriametrics-https.tls.certresolver=le\n    - traefik.http.services.victoriametrics.loadbalancer.server.port=8428\n\nx-influxdb-labels: &influxdb-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=monitoring\n    - traefik.http.routers.influxdb-http.rule=Host(`influxdb.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.influxdb-http.entrypoints=http\n    #- traefik.http.routers.influxdb-http.middlewares=admin-auth\n    - traefik.http.routers.influxdb-http.service=influxdb\n    - traefik.http.routers.influxdb-http.middlewares=https-redirect\n    - traefik.http.routers.influxdb-https.rule=Host(`influxdb.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.influxdb-https.entrypoints=https\n    #- traefik.http.routers.influxdb-https.middlewares=admin-auth\n    - traefik.http.routers.influxdb-https.tls=true\n    - traefik.http.routers.influxdb-https.service=influxdb\n    - traefik.http.routers.influxdb-https.tls.certresolver=le\n    - traefik.http.services.influxdb.loadbalancer.server.port=8086\n\nx-grafana-labels: &grafana-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=monitoring\n    - traefik.http.routers.grafana-http.rule=Host(`grafana.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.grafana-http.entrypoints=http\n    #- traefik.http.routers.grafana-http.middlewares=admin-auth\n    - traefik.http.routers.grafana-http.service=grafana\n    - traefik.http.routers.grafana-http.middlewares=https-redirect\n    - traefik.http.routers.grafana-https.rule=Host(`grafana.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.grafana-https.entrypoints=https\n    #- traefik.http.routers.grafana-https.middlewares=admin-auth\n    - traefik.http.routers.grafana-https.tls=true\n    - traefik.http.routers.grafana-https.service=grafana\n    - traefik.http.routers.grafana-https.tls.certresolver=le\n    - traefik.http.services.grafana.loadbalancer.server.port=3000\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - monitoring\n\nservices:\n  # https://docs.victoriametrics.com\n  # https://github.com/VictoriaMetrics/VictoriaMetrics/blob/master/deployment/docker/docker-compose.yml\n  victoriametrics:\n    container_name: victoriametrics\n    image: victoriametrics/victoria-metrics\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 100M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n      <<: *victoriametrics-labels\n    <<: *victoriametrics-labels\n    <<: *service\n    volumes:\n      - victoriametrics-configs:/etc/victoriametrics\n      - victoriametrics-data:/storage\n    command:\n      - --storageDataPath=/storage/vmetrics\n      - --graphiteListenAddr=:2003\n      - --opentsdbListenAddr=:4242\n      - --httpListenAddr=:8428\n      - --influxListenAddr=:8089\n      - --retentionPeriod=2w\n    user: root\n\n  vmagent:\n    container_name: vmagent\n    image: victoriametrics/vmagent\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    volumes:\n      - victoriametrics-configs:/etc/victoriametrics\n      - victoriametrics-data:/storage\n    command:\n      - '--promscrape.config=/etc/victoriametrics/prometheus.yml'\n      - '--remoteWrite.url=http://victoriametrics:8428/api/v1/write'\n\n  vmalert:\n    container_name: vmalert\n    image: victoriametrics/vmalert\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    volumes:\n      - victoriametrics-configs:/etc/victoriametrics\n    command:\n      - '--datasource.url=http://victoriametrics:8428/'\n      - '--remoteRead.url=http://victoriametrics:8428/'\n      - '--remoteWrite.url=http://victoriametrics:8428/'\n      - '--notifier.url=http://alertmanager:9093/'\n      - '--rule=/etc/victoriametrics/alerts/*.yml'\n      # display source of alerts in grafana\n      - \"--external.url=http://grafana:3000\"\n      - '--external.alert.source=explore?orgId=1&left=[\"now-1h\",\"now\",\"VictoriaMetrics\",{\"expr\":\"{{$$expr|quotesEscape|crlfEscape|queryEscape}}\"},{\"mode\":\"Metrics\"},{\"ui\":[true,true,true,\"none\"]}]' ## when copypaste the line be aware of '$$' for escaping in '$expr'\n\n\n  # https://hub.docker.com/r/grafana/grafana\n  # https://grafana.com/docs/grafana/latest/administration/configure-docker/\n  # https://grafana.com/docs/grafana/latest/administration/configuration/#configure-with-environment-variables\n  # https://grafana.com/docs/grafana/latest/administration/provisioning/\n  # https://github.com/grafana/grafana/blob/main/devenv\n  grafana:\n    container_name: grafana\n    image: grafana/grafana\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      <<: *grafana-labels\n    <<: *grafana-labels\n    <<: *service\n    volumes:\n      - grafana-data:/var/lib/grafana\n      - grafana-provisioning:/etc/grafana/provisioning\n    environment:\n      GF_INSTALL_PLUGINS: grafana-clock-panel\n      GF_SECURITY_ADMIN_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n      GF_SECURITY_ADMIN_USER: ${USERNAME?Variable USERNAME not set}\n      GF_SECURITY_SECRET_KEY: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n      GF_SERVER_ROOT_URL: https://grafana.${DOMAIN?Variable not set}\n      GF_SERVER_ENABLE_GZIP: \"true\"\n      GF_SECURITY_COOKIE_SECURE: \"true\"\n      GF_SNAPSHOTS_EXTERNAL_ENABLED: \"false\"\n      INFLUXDB_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n      INFLUXDB_ORG: ${DOMAIN?Variable DOMAIN not set}\n      INFLUXDB_BUCKET: telegraf\n    user: root\n\n  # https://hub.docker.com/_/influxdb\n  # https://docs.influxdata.com/influxdb/v2.1/install/?t=Docker\n  # https://docs.influxdata.com/influxdb/v2.1/reference/config-options/\n  # https://github.com/influxdata/community-templates/blob/master/docs/use_a_template.md\n  influxdb:\n    container_name: influxdb\n    image: influxdb:2.1\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 130M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n      <<: *influxdb-labels\n    <<: *influxdb-labels\n    <<: *service\n    volumes:\n      - influxdb-data:/var/lib/influxdb2\n      - influxdb-entrypoint:/docker-entrypoint-initdb.d\n    environment:\n      DOCKER_INFLUXDB_INIT_MODE: setup\n      DOCKER_INFLUXDB_INIT_USERNAME: ${USERNAME?Variable USERNAME not set}\n      DOCKER_INFLUXDB_INIT_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n      DOCKER_INFLUXDB_INIT_ORG: ${DOMAIN?Variable DOMAIN not set}\n      DOCKER_INFLUXDB_INIT_BUCKET: telegraf\n      DOCKER_INFLUXDB_INIT_RETENTION: 2w\n      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n    user: root\n\n  # https://hub.docker.com/_/telegraf\n  # https://github.com/influxdata/telegraf/blob/master/docs/FAQ.md\n  # https://docs.influxdata.com/telegraf/v1.21/administration/commands/\n  telegraf-node:\n    container_name: telegraf-node\n    image: telegraf\n    deploy:\n      mode: global\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    volumes:\n      - telegraf-configs:/etc/telegraf\n      - /:/hostfs:ro\n    command:\n      - --config=/etc/telegraf/telegraf-node.conf\n    environment:\n      HOST_ETC: /hostfs/etc\n      HOST_PROC: /hostfs/proc\n      HOST_SYS: /hostfs/sys\n      HOST_VAR: /hostfs/var\n      HOST_RUN: /hostfs/run\n      HOST_MOUNT_PREFIX: /hostfs\n      INFLUXDB_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n      INFLUXDB_ORG: ${DOMAIN?Variable DOMAIN not set}\n      INFLUXDB_BUCKET: telegraf\n    user: root\n    entrypoint: \"telegraf\"\n\n  telegraf:\n    container_name: telegraf\n    image: telegraf\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    volumes:\n      - telegraf-configs:/etc/telegraf\n    environment:\n      SQL_ROOT_PASSWORD: ${SQL_ROOT_PASSWORD?Variable SQL_ROOT_PASSWORD not set}\n      TULEAP_SQL_PASSWORD: ${TULEAP_SQL_PASSWORD?Variable TULEAP_SQL_PASSWORD not set}\n      INFLUXDB_TOKEN: ${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n      INFLUXDB_ORG: ${DOMAIN?Variable DOMAIN not set}\n      INFLUXDB_BUCKET: telegraf\n    networks:\n      - database\n      - monitoring\n      - bitwarden\n      - gitlab\n      - registry\n      - minio\n      - nocodb\n      - openproject\n      - portainer\n      - strapi\n      - appwrite\n      - taiga\n      - rocketchat\n      - vaultwarden\n      - tuleap\n      - nextcloud\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  victoriametrics-data:\n    name: victoriametrics-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/victoriametrics/data\n  victoriametrics-configs:\n    name: victoriametrics-configs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/victoriametrics/configs\n  influxdb-data:\n    name: influxdb-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/influxdb/data\n  influxdb-entrypoint:\n    name: influxdb-entrypoint\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/influxdb/entrypoint\n  telegraf-configs:\n    name: telegraf-configs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/telegraf/configs\n  grafana-data:\n    name: grafana-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/grafana/data\n  grafana-provisioning:\n    name: grafana-provisioning\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/grafana/provisioning\n\nx-network: &network\n  external: true\n\nnetworks:\n  monitoring:\n    name: monitoring\n    <<: *network\n  bitwarden:\n    name: bitwarden\n    <<: *network\n  gitlab:\n    name: gitlab\n    <<: *network\n  registry:\n    name: registry\n    <<: *network\n  minio:\n    name: minio\n    <<: *network\n  database:\n    name: database\n    <<: *network\n  nocodb:\n    name: nocodb\n    <<: *network\n  openproject:\n    name: openproject\n    <<: *network\n  portainer:\n    name: portainer\n    <<: *network\n  strapi:\n    name: strapi\n    <<: *network\n  appwrite:\n    name: appwrite\n    <<: *network\n  taiga:\n    name: taiga\n    <<: *network\n  rocketchat:\n    name: rocketchat\n    <<: *network\n  rocketchat:\n    name: rocketchat\n    <<: *network\n  vaultwarden:\n    name: vaultwarden\n    <<: *network\n  twake:\n    name: twake\n    <<: *network\n  tuleap:\n    name: tuleap\n    <<: *network\n  nextcloud:\n    name: nextcloud\n    <<: *network\n"
        },
        {
          "name": "nextcloud.yml",
          "type": "blob",
          "size": 2.2265625,
          "content": "version: '3.8'\n\nx-nextcloud-labels: &nextcloud-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=nextcloud\n    - traefik.http.routers.nextcloud-http.rule=Host(`nextcloud.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.nextcloud-http.entrypoints=http\n    - traefik.http.routers.nextcloud-http.service=nextcloud\n    - traefik.http.routers.nextcloud-http.middlewares=https-redirect\n    - traefik.http.routers.nextcloud-https.rule=Host(`nextcloud.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.nextcloud-https.entrypoints=https\n    - traefik.http.routers.nextcloud-https.tls=true\n    - traefik.http.routers.nextcloud-https.service=nextcloud\n    - traefik.http.routers.nextcloud-https.tls.certresolver=le\n    - traefik.http.services.nextcloud.loadbalancer.server.port=80\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - nextcloud\n    - database\n\nservices:\n  # https://hub.docker.com/_/nextcloud\n  nextcloud:\n    container_name: nextcloud\n    image: nextcloud\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      <<: *nextcloud-labels\n    <<: *nextcloud-labels\n    <<: *service\n    environment:\n      POSTGRES_DB: nextcloud\n      POSTGRES_USER: nextcloud\n      POSTGRES_PASSWORD: ${NEXTCLOUD_SQL_PASSWORD?Variable NEXTCLOUD_SQL_PASSWORD not set}\n      POSTGRES_HOST: postgres\n      NEXTCLOUD_ADMIN_USER: ${USERNAME?Variable USERNAME not set}\n      NEXTCLOUD_ADMIN_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n      NEXTCLOUD_TRUSTED_DOMAINS: nextcloud.${DOMAIN?Variable DOMAIN not set}\n      VIRTUAL_HOST: nextcloud.${DOMAIN?Variable DOMAIN not set}\n      #NEXTCLOUD_UPDATE: \"true\"\n    volumes:\n      - nextcloud-data:/var/www/html\n    user: root\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  nextcloud-data:\n    name: nextcloud-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/nextcloud/data\n\nnetworks:\n  nextcloud:\n    name: nextcloud\n    external: true\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "nfs.yml",
          "type": "blob",
          "size": 0.751953125,
          "content": "version: '3.8'\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n\nservices:\n  # https://sysadmins.co.za/setup-a-nfs-server-with-docker/\n  nfs:\n    container_name: nfs\n    image: itsthenetwork/nfs-server-alpine:12\n    ports:\n      - 2049:2049\n    deploy:\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    environment:\n      SHARED_DIRECTORY: ${DATAPATH?Variable DATAPATH not set}\n      PERMITTED: ${MASTER_IP_MASK?Variable MASTER_IP_MASK not set}\n    volumes:\n      - ${DATAPATH?Variable DATAPATH not set}:${DATAPATH?Variable DATAPATH not set}\n    privileged: true\n    cap_add:\n      - ALL\n    entrypoint: /usr/bin/nfsd.sh\n    user: root\n"
        },
        {
          "name": "nocodb.yml",
          "type": "blob",
          "size": 1.904296875,
          "content": "version: '3.8'\n\nx-nocodb-labels: &nocodb-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=nocodb\n    - traefik.http.routers.nocodb-http.rule=Host(`nocodb.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.nocodb-http.entrypoints=http\n    - traefik.http.routers.nocodb-http.service=nocodb\n    - traefik.http.routers.nocodb-http.middlewares=https-redirect\n    - traefik.http.routers.nocodb-https.rule=Host(`nocodb.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.nocodb-https.entrypoints=https\n    - traefik.http.routers.nocodb-https.tls=true\n    - traefik.http.routers.nocodb-https.service=nocodb\n    - traefik.http.routers.nocodb-https.tls.certresolver=le\n    - traefik.http.services.nocodb.loadbalancer.server.port=8080\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - nocodb\n    - database\n\nservices:\n  # https://hub.docker.com/nocodb/nocodb-ce\n  nocodb:\n    container_name: nocodb\n    image: nocodb/nocodb\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 90M\n      <<: *nocodb-labels\n    <<: *nocodb-labels\n    <<: *service\n    environment:\n      NC_DB: pg://postgres:5432?u=nocodb&p=${NOCODB_SQL_PASSWORD?Variable NOCODB_SQL_PASSWORD not set}&d=nocodb\n      NC_PUBLIC_URL: https://nocodb.${DOMAIN?Variable DOMAIN not set}\n      NC_DISABLE_TELE: \"true\"\n      NC_INVITE_ONLY_SIGNUP: \"true\"\n    volumes:\n      - nocodb-data:/usr/app/data\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  nocodb-data:\n    name: nocodb-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/nocodb/data\n\nnetworks:\n  nocodb:\n    name: nocodb\n    external: true\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "openproject.yml",
          "type": "blob",
          "size": 2.1494140625,
          "content": "version: '3.8'\n\nx-openproject-labels: &openproject-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=openproject\n    - traefik.http.routers.openproject-http.rule=Host(`openproject.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.openproject-http.entrypoints=http\n    - traefik.http.routers.openproject-http.service=openproject\n    - traefik.http.routers.openproject-http.middlewares=https-redirect\n    - traefik.http.routers.openproject-https.rule=Host(`openproject.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.openproject-https.entrypoints=https\n    - traefik.http.routers.openproject-https.tls=true\n    - traefik.http.routers.openproject-https.service=openproject\n    - traefik.http.routers.openproject-https.tls.certresolver=le\n    - traefik.http.services.openproject.loadbalancer.server.port=80\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - openproject\n    - database\n\nservices:\n  # https://www.openproject.org/docs/installation-and-operations/installation/docker/\n  openproject:\n    container_name: openproject\n    image: openproject/community:12\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 1400M\n      <<: *openproject-labels\n    <<: *openproject-labels\n    <<: *service\n    environment:\n      DATABASE_URL: \"postgres://openproject:${OPENPROJECT_SQL_PASSWORD?Variable OPENPROJECT_SQL_PASSWORD not set}@postgres:5432/openproject\"\n      SERVER_HOSTNAME: openproject.${DOMAIN?Variable DOMAIN not set}\n      SECRET_KEY_BASE: ${MASTER_IP?Variable MASTER_IP not set} # just random unique data\n    volumes:\n      - openproject-data:/var/lib/openproject\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  openproject-data:\n    name: openproject-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/openproject/data\n\nnetworks:\n  openproject:\n    name: openproject\n    external: true\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "portainer.yml",
          "type": "blob",
          "size": 2.67578125,
          "content": "version: '3.8'\n\nx-portainer-labels: &portainer-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=portainer\n    - traefik.http.routers.portainer-http.rule=Host(`portainer.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.portainer-http.entrypoints=http\n    - traefik.http.routers.portainer-http.service=portainer\n    - traefik.http.routers.portainer-http.middlewares=https-redirect\n    - traefik.http.routers.portainer-https.rule=Host(`portainer.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.portainer-https.entrypoints=https\n    - traefik.http.routers.portainer-https.tls=true\n    - traefik.http.routers.portainer-https.service=portainer\n    - traefik.http.routers.portainer-https.tls.certresolver=le\n    - traefik.http.services.portainer.loadbalancer.server.port=9000\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - portainer\n\nservices:\n  # https://hub.docker.com/portainer/portainer-ce\n  portainer:\n    container_name: portainer\n    image: portainer/portainer-ce:alpine\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.03'\n          memory: 50M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n      <<: *portainer-labels\n    <<: *portainer-labels\n    <<: *service\n    command:\n      #- --admin-password=${PORTAINER_HASHED_PASSWORD?Variable PORTAINER_HASHED_PASSWORD not set} # doesn't work in any tried variant, with escaping $$, diff hashes...\n      - --host=tcp://portainer-agent:9001\n      - --tlsskipverify\n      - --no-analytics\n      - --http-enabled\n    volumes:\n      - portainer-data:/data\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n    healthcheck:\n      test: [\"CMD-SHELL\", \"wget --spider http://localhost:9000\"]\n      interval: 1s\n      timeout: 1s\n      retries: 120\n      start_period: 2s\n\n  portainer-agent:\n    container_name: portainer-agent\n    image: portainer/agent\n    deploy:\n      mode: global\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 10M\n      placement:\n        constraints:\n          - node.platform.os == linux\n    <<: *service\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock\n      - /var/lib/docker/volumes:/var/lib/docker/volumes\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  portainer-data:\n    name: portainer-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/portainer/data\n\nnetworks:\n  portainer:\n    name: portainer\n    external: true\n"
        },
        {
          "name": "registry.yml",
          "type": "blob",
          "size": 2.12109375,
          "content": "version: '3.8'\n\nx-registry-labels: &registry-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=registry\n    - traefik.http.middlewares.registry-auth.basicauth.users=${REGISTRY_USERNAME?Variable REGISTRY_USERNAME not set}:${REGISTRY_HASHED_PASSWORD?Variable REGISTRY_HASHED_PASSWORD not set}\n    - traefik.http.routers.registry-http.rule=Host(`registry.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.registry-http.entrypoints=http\n    - traefik.http.routers.registry-http.middlewares=registry-auth\n    - traefik.http.routers.registry-http.service=registry\n    #- traefik.http.routers.registry-http.middlewares=https-redirect\n    - traefik.http.routers.registry-https.rule=Host(`registry.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.registry-https.entrypoints=https\n    - traefik.http.routers.registry-https.middlewares=registry-auth\n    - traefik.http.routers.registry-https.tls=true\n    - traefik.http.routers.registry-https.service=registry\n    - traefik.http.routers.registry-https.tls.certresolver=le\n    - traefik.http.services.registry.loadbalancer.server.port=5000\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - registry\n\nservices:\n  # https://docs.docker.com/registry/configuration/\n  registry:\n    container_name: registry\n    image: registry:2\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 10M\n      <<: *registry-labels\n    <<: *registry-labels\n    <<: *service\n    environment:\n      REGISTRY_HTTP_DEBUG_PROMETHEUS_ENABLED: \"true\"\n      REGISTRY_HTTP_SECRET: ${MASTER_IP?Variable MASTER_IP not set} # just random unique data\n    volumes:\n      - registry-data:/var/lib/registry\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  registry-data:\n    name: registry-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/registry/data\n\nnetworks:\n  registry:\n    name: registry\n    external: true\n"
        },
        {
          "name": "rocketchat.yml",
          "type": "blob",
          "size": 4.2119140625,
          "content": "version: '3.8'\n\nx-rocketchat-labels: &rocketchat-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=monitoring\n    - traefik.http.routers.rocketchat-http.rule=Host(`rocketchat.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.rocketchat-http.entrypoints=http\n    #- traefik.http.routers.rocketchat-http.middlewares=admin-auth\n    - traefik.http.routers.rocketchat-http.service=rocketchat\n    - traefik.http.routers.rocketchat-http.middlewares=https-redirect\n    - traefik.http.routers.rocketchat-https.rule=Host(`rocketchat.${DOMAIN?Variable not set}`)\n    - traefik.http.routers.rocketchat-https.entrypoints=https\n    #- traefik.http.routers.rocketchat-https.middlewares=admin-auth\n    - traefik.http.routers.rocketchat-https.tls=true\n    - traefik.http.routers.rocketchat-https.service=rocketchat\n    - traefik.http.routers.rocketchat-https.tls.certresolver=le\n    - traefik.http.services.rocketchat.loadbalancer.server.port=3000\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - rocketchat\n\nservices:\n  # https://docs.rocket.chat/quick-start/installing-and-updating/rapid-deployment-methods/docker-and-docker-compose\n  # https://docs.rocket.chat/quick-start/accessing-your-workspace/creating-the-first-administrator\n  rocketchat:\n    container_name: rocketchat\n    image: registry.rocket.chat/rocketchat/rocket.chat\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 656M\n      <<: *rocketchat-labels\n    <<: *rocketchat-labels\n    <<: *service\n    environment:\n      PORT: 3000\n      ROOT_URL: \"https://rocketchat.${DOMAIN?Variable not set}\"\n      MONGO_URL: \"mongodb://rocketchat-mongodb:27017/rocketchat\"\n      MONGO_OPLOG_URL: \"mongodb://rocketchat-mongodb:27017/local\"\n      #REG_TOKEN: ${REG_TOKEN}\n      #MAIL_URL: smtp://smtp.email\n      #HTTP_PROXY: http://proxy.domain.com\n      #HTTPS_PROXY: http://proxy.domain.com\n    depends_on:\n      - rocketchat-mongodb\n    volumes:\n      - rocketchat-data:/app/uploads\n    command: >\n      bash -c\n        \"for i in `seq 1 30`; do\n          node main.js &&\n          s=$$? && break || s=$$?;\n          echo \\\"Tried $$i times. Waiting 5 secs...\\\";\n          sleep 5;\n        done; (exit $$s)\"\n    user: root\n\n  rocketchat-mongodb:\n    container_name: rocketchat-mongodb\n    image: mongo:4.0\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n    <<: *service\n    volumes:\n      - rocketchat-mongodb-data:/data/db\n    command: mongod --smallfiles --oplogSize 128 --replSet rs0 --storageEngine=mmapv1\n    user: root\n\n  rocketchat-mongodb-init:\n    container_name: rocketchat-mongodb-init\n    image: mongo:4.0\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n    <<: *service\n    restart: on-failure\n    volumes:\n      - rocketchat-mongodb-data:/data/db\n    command: >\n      bash -c\n        \"for i in `seq 1 30`; do\n          mongo rocketchat-mongodb/rocketchat --eval \\\"\n            rs.initiate({\n              _id: 'rs0',\n              members: [ { _id: 0, host: 'localhost:27017' } ]})\\\" &&\n          s=$$? && break || s=$$?;\n          echo \\\"Tried $$i times. Waiting 5 secs...\\\";\n          sleep 5;\n        done; (exit $$s)\"\n    depends_on:\n      - rocketchat-mongodb\n    user: root\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  rocketchat-mongodb-data:\n    name: rocketchat-mongodb-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/rocketchat-mongodb/data\n  rocketchat-data:\n    name: rocketchat-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/rocketchat/data\n\nx-network: &network\n  external: true\n\nnetworks:\n  rocketchat:\n    name: rocketchat\n    <<: *network\n"
        },
        {
          "name": "setup-compose.yml",
          "type": "blob",
          "size": 4.2275390625,
          "content": "version: '3.8'\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n\nservices:\n  # https://doc.traefik.io/traefik/getting-started/quick-start/\n  # https://dockerswarm.rocks/traefik/\n  traefik:\n    container_name: traefik\n    image: traefik:v2.6\n    ports:\n      - 80:80\n      - 443:443\n    deploy:\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n    <<: *service\n    labels:\n        - traefik.enable=true\n        - traefik.docker.network=monitoring\n        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable USERNAME not set}:${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https\n        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true\n        - traefik.http.routers.traefik-api-http.rule=Host(`traefik.${DOMAIN?Variable DOMAIN not set}`)\n        - traefik.http.routers.traefik-api-http.entrypoints=http\n        - traefik.http.routers.traefik-api-http.service=api@internal\n        #- traefik.http.routers.traefik-api-http.middlewares=https-redirect\n        - traefik.http.routers.traefik-api-http.middlewares=admin-auth\n        - traefik.http.routers.traefik-api-https.rule=Host(`traefik.${DOMAIN?Variable DOMAIN not set}`)\n        - traefik.http.routers.traefik-api-https.entrypoints=https\n        - traefik.http.routers.traefik-api-https.tls=true\n        - traefik.http.routers.traefik-api-https.service=api@internal\n        - traefik.http.routers.traefik-api-https.tls.certresolver=le\n        - traefik.http.routers.traefik-api-https.middlewares=admin-auth\n        - traefik.http.services.traefik.loadbalancer.server.port=8080\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - traefik-certs:/certificates\n    command:\n      - --providers.docker\n      - --providers.docker.exposedbydefault=false\n      - --providers.docker.defaultRule=Host(`{{ .Name }}.${DOMAIN?Variable DOMAIN not set}`)\n      - --entrypoints.http.address=:80\n      - --entrypoints.https.address=:443\n      - --certificatesresolvers.le.acme.email=${EMAIL?Variable EMAIL not set}\n      - --certificatesresolvers.le.acme.storage=/certificates/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      - --accesslog\n      - --log\n      - --api\n      - --api.dashboard=true\n      - --ping=true\n      - --ping.entryPoint=ping\n      - --entryPoints.ping.address=:8081\n      - --metrics.prometheus=true\n      - --entryPoints.metrics.address=:8082\n      - --metrics.prometheus.entryPoint=metrics\n      - --serverstransport.insecureskipverify=true\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-q\", \"-O\", \"/dev/null\", \"-c\", \"http://localhost:8081/ping\"]\n      interval: 1s\n      timeout: 1s\n      retries: 10\n      start_period: 2s\n    networks:\n      - database\n      - monitoring\n      - bitwarden\n      - gitlab\n      - registry\n      - minio\n      - nocodb\n      - openproject\n      - portainer\n      - strapi\n      - appwrite\n      - taiga\n      - rocketchat\n      - vaultwarden\n      - twake\n      - tuleap\n      - nextcloud\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  traefik-certs:\n    name: traefik-certs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/traefik/certificates\n\nx-network: &network\n  driver: bridge\n  attachable: true\n\nnetworks:\n  monitoring:\n    name: monitoring\n    <<: *network\n  bitwarden:\n    name: bitwarden\n    <<: *network\n  gitlab:\n    name: gitlab\n    <<: *network\n  registry:\n    name: registry\n    <<: *network\n  minio:\n    name: minio\n    <<: *network\n  database:\n    name: database\n    <<: *network\n  nocodb:\n    name: nocodb\n    <<: *network\n  openproject:\n    name: openproject\n    <<: *network\n  portainer:\n    name: portainer\n    <<: *network\n  strapi:\n    name: strapi\n    <<: *network\n  appwrite:\n    name: appwrite\n    <<: *network\n  taiga:\n    name: taiga\n    <<: *network\n  rocketchat:\n    name: rocketchat\n    <<: *network\n  vaultwarden:\n    name: vaultwarden\n    <<: *network\n  twake:\n    name: twake\n    <<: *network\n  tuleap:\n    name: tuleap\n    <<: *network\n  nextcloud:\n    name: nextcloud\n    <<: *network\n"
        },
        {
          "name": "setup-swarm.yml",
          "type": "blob",
          "size": 4.4091796875,
          "content": "version: '3.8'\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n\nservices:\n  # https://doc.traefik.io/traefik/getting-started/quick-start/\n  # https://dockerswarm.rocks/traefik/\n  traefik:\n    container_name: traefik\n    image: traefik:v2.6\n    ports:\n      - 80:80\n      - 443:443\n    deploy:\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      mode: replicated\n      replicas: 1\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n      labels:\n        - traefik.enable=true\n        - traefik.docker.network=monitoring\n        - traefik.http.middlewares.admin-auth.basicauth.users=${USERNAME?Variable USERNAME not set}:${HASHED_PASSWORD?Variable HASHED_PASSWORD not set}\n        - traefik.http.middlewares.https-redirect.redirectscheme.scheme=https\n        - traefik.http.middlewares.https-redirect.redirectscheme.permanent=true\n        - traefik.http.routers.traefik-api-http.rule=Host(`traefik.${DOMAIN?Variable DOMAIN not set}`)\n        - traefik.http.routers.traefik-api-http.entrypoints=http\n        - traefik.http.routers.traefik-api-http.service=api@internal\n        #- traefik.http.routers.traefik-api-http.middlewares=https-redirect\n        - traefik.http.routers.traefik-api-http.middlewares=admin-auth\n        - traefik.http.routers.traefik-api-https.rule=Host(`traefik.${DOMAIN?Variable DOMAIN not set}`)\n        - traefik.http.routers.traefik-api-https.entrypoints=https\n        - traefik.http.routers.traefik-api-https.tls=true\n        - traefik.http.routers.traefik-api-https.service=api@internal\n        - traefik.http.routers.traefik-api-https.tls.certresolver=le\n        - traefik.http.routers.traefik-api-https.middlewares=admin-auth\n        - traefik.http.services.traefik.loadbalancer.server.port=8080\n    <<: *service\n    volumes:\n      - /var/run/docker.sock:/var/run/docker.sock:ro\n      - traefik-certs:/certificates\n    command:\n      - --providers.docker\n      - --providers.docker.exposedbydefault=false\n      - --providers.docker.swarmmode\n      - --providers.docker.defaultRule=Host(`{{ .Name }}.${DOMAIN?Variable DOMAIN not set}`)\n      - --entrypoints.http.address=:80\n      - --entrypoints.https.address=:443\n      - --certificatesresolvers.le.acme.email=${EMAIL?Variable EMAIL not set}\n      - --certificatesresolvers.le.acme.storage=/certificates/acme.json\n      - --certificatesresolvers.le.acme.tlschallenge=true\n      - --accesslog\n      - --log\n      - --api\n      - --api.dashboard=true\n      - --ping=true\n      - --ping.entryPoint=ping\n      - --entryPoints.ping.address=:8081\n      - --metrics.prometheus=true\n      - --entryPoints.metrics.address=:8082\n      - --metrics.prometheus.entryPoint=metrics\n      - --serverstransport.insecureskipverify=true\n    healthcheck:\n      test: [\"CMD\", \"wget\", \"-q\", \"-O\", \"/dev/null\", \"-c\", \"http://localhost:8081/ping\"]\n      interval: 1s\n      timeout: 1s\n      retries: 10\n      start_period: 2s\n    networks:\n      - database\n      - monitoring\n      - bitwarden\n      - gitlab\n      - registry\n      - minio\n      - nocodb\n      - openproject\n      - portainer\n      - strapi\n      - appwrite\n      - taiga\n      - rocketchat\n      - vaultwarden\n      - twake\n      - tuleap\n      - nextcloud\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  traefik-certs:\n    name: traefik-certs\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/traefik/certificates\n\nx-network: &network\n  driver: overlay\n  attachable: true\n\nnetworks:\n  monitoring:\n    name: monitoring\n    <<: *network\n  bitwarden:\n    name: bitwarden\n    <<: *network\n  gitlab:\n    name: gitlab\n    <<: *network\n  registry:\n    name: registry\n    <<: *network\n  minio:\n    name: minio\n    <<: *network\n  database:\n    name: database\n    <<: *network\n  nocodb:\n    name: nocodb\n    <<: *network\n  openproject:\n    name: openproject\n    <<: *network\n  portainer:\n    name: portainer\n    <<: *network\n  strapi:\n    name: strapi\n    <<: *network\n  appwrite:\n    name: appwrite\n    <<: *network\n  taiga:\n    name: taiga\n    <<: *network\n  rocketchat:\n    name: rocketchat\n    <<: *network\n  vaultwarden:\n    name: vaultwarden\n    <<: *network\n  twake:\n    name: twake\n    <<: *network\n  tuleap:\n    name: tuleap\n    <<: *network\n  nextcloud:\n    name: nextcloud\n    <<: *network\n"
        },
        {
          "name": "setup.sh",
          "type": "blob",
          "size": 0.9619140625,
          "content": "mkdir -p ${DATAPATH?Variable DATAPATH not set}/{traefik,mariadb,postgres,portainer,registry,minio,nocodb,openproject,gitlab,strapi,telegraf,victoriametrics,influxdb,grafana,rocketchat,rocketchat-mongodb,gitlab,vaultwarden,twake,twake-mongodb,tuleap,tuleap-mysql,nextcloud}/{data,entrypoint,configs,certificates,logs}\n\nenvsubst < configs/postgres.sql > ${DATAPATH?Variable DATAPATH not set}/postgres/entrypoint/init.sql\nenvsubst < configs/mariadb.sql > ${DATAPATH?Variable DATAPATH not set}/mariadb/entrypoint/init.sql\ncp -r configs/victoriametrics/* ${DATAPATH?Variable DATAPATH not set}/victoriametrics/configs/\ncp configs/telegraf-node.conf ${DATAPATH?Variable DATAPATH not set}/telegraf/configs/telegraf-node.conf\ncp configs/telegraf.conf ${DATAPATH?Variable DATAPATH not set}/telegraf/configs/telegraf.conf\ncp configs/influxdb.sh ${DATAPATH?Variable DATAPATH not set}/influxdb/entrypoint/influxdb.sh\ncp -r configs/grafana ${DATAPATH?Variable DATAPATH not set}/grafana/provisioning\n"
        },
        {
          "name": "strapi.yml",
          "type": "blob",
          "size": 1.9228515625,
          "content": "version: '3.8'\n\nx-strapi-labels: &strapi-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=strapi\n    - traefik.http.routers.strapi-http.rule=Host(`strapi.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.strapi-http.entrypoints=http\n    - traefik.http.routers.strapi-http.service=strapi\n    - traefik.http.routers.strapi-http.middlewares=https-redirect\n    - traefik.http.routers.strapi-https.rule=Host(`strapi.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.strapi-https.entrypoints=https\n    - traefik.http.routers.strapi-https.tls=true\n    - traefik.http.routers.strapi-https.service=strapi\n    - traefik.http.routers.strapi-https.tls.certresolver=le\n    - traefik.http.services.strapi.loadbalancer.server.port=1337\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - strapi\n    - database\n\nservices:\n  # https://docs.strapi.io/developer-docs/latest/getting-started/quick-start.html\n  strapi:\n    container_name: strapi\n    image: strapi/strapi\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 160M\n      <<: *strapi-labels\n    <<: *strapi-labels\n    <<: *service\n    environment:\n      DATABASE_CLIENT: postgres\n      DATABASE_NAME: strapi\n      DATABASE_HOST: postgres\n      DATABASE_PORT: 5432\n      DATABASE_USERNAME: strapi\n      DATABASE_PASSWORD: ${STRAPI_SQL_PASSWORD?Variable STRAPI_SQL_PASSWORD not set}\n    volumes:\n      - strapi-data:/srv/app\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  strapi-data:\n    name: strapi-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/strapi/data\n\nnetworks:\n  strapi:\n    name: strapi\n    external: true\n  database:\n    name: database\n    external: true\n"
        },
        {
          "name": "tuleap.yml",
          "type": "blob",
          "size": 3.6298828125,
          "content": "version: '3.8'\n\nx-tuleap-labels: &tuleap-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=tuleap\n    - traefik.http.routers.tuleap-http.rule=Host(`tuleap.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.tuleap-http.entrypoints=http\n    - traefik.http.routers.tuleap-http.service=tuleap\n    - traefik.http.routers.tuleap-http.middlewares=https-redirect\n    - traefik.http.routers.tuleap-https.rule=Host(`tuleap.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.tuleap-https.entrypoints=https\n    - traefik.http.routers.tuleap-https.tls=true\n    - traefik.http.routers.tuleap-https.service=tuleap\n    - traefik.http.routers.tuleap-https.tls.certresolver=le\n    - traefik.http.services.tuleap.loadbalancer.server.port=443\n    - traefik.http.services.tuleap.loadbalancer.server.scheme=https\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - tuleap\n\nservices:\n  # https://tuleap.acms.asso.fr/doc/en/installation-guide/docker-image.html#docker-images-compose\n  # https://github.com/Enalean/tuleap/blob/master/tools/docker/tuleap-community-edition/Dockerfile\n  # passwords - \"we recommend at least 20 chars but only alphabetical & numbers\"\n  tuleap:\n    container_name: tuleap\n    image: tuleap/tuleap-community-edition\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 160M\n      <<: *tuleap-labels\n    <<: *tuleap-labels\n    <<: *service\n    ports:\n      - '2322:22'\n    environment:\n      TULEAP_FQDN: tuleap.${DOMAIN?Variable DOMAIN not set}\n      TULEAP_SYS_DBHOST: tuleap-mysql\n      TULEAP_SYS_DBPASSWD: ${TULEAP_SQL_PASSWORD?Variable TULEAP_SQL_PASSWORD not set}\n      SITE_ADMINISTRATOR_PASSWORD: ${PASSWORD?Variable PASSWORD not set}\n      #TULEAP_INSTALL_SKIP_DB: 1 # it doesn't work\n      DB_ADMIN_USER: root\n      DB_ADMIN_PASSWORD: ${TULEAP_SQL_PASSWORD?Variable TULEAP_SQL_PASSWORD not set}\n      #TULEAP_FPM_SESSION_MODE: redis\n      #TULEAP_REDIS_SERVER: redis\n      #TULEAP_EMAIL_RELAYHOST: mailhog:1025\n      #TULEAP_EMAIL_RELAYHOST: your-smtp.example.com:2025\n    volumes:\n      - tuleap-data:/data\n    depends_on:\n      - tuleap-mysql\n    healthcheck:\n      test: [\"CMD\", \"/usr/bin/tuleap\", \"healthcheck\"]\n      interval: 5s\n      timeout: 5s\n      retries: 10\n      start_period: 2s\n\n  tuleap-mysql:\n    container_name: tuleap-mysql\n    image: mysql:5.7\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.25'\n          memory: 300M\n      placement:\n        constraints:\n          - node.hostname == ${HOSTNAME?Variable HOSTNAME not set}\n    <<: *service\n    command: [\"--character-set-server=utf8mb4\", \"--collation-server=utf8mb4_unicode_ci\", \"--sql-mode=NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION\"]\n    environment:\n      MYSQL_ROOT_PASSWORD: ${TULEAP_SQL_PASSWORD?Variable TULEAP_SQL_PASSWORD not set}\n      #MYSQL_DATABASE: tuleap\n      #MYSQL_USER: tuleapadm\n      #MYSQL_PASSWORD: ${TULEAP_SQL_PASSWORD?Variable TULEAP_SQL_PASSWORD not set}\n    volumes:\n      - tuleap-mysql-data:/var/lib/mysql\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  tuleap-mysql-data:\n    name: tuleap-mysql-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/tuleap-mysql/data\n  tuleap-data:\n    name: tuleap-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/tuleap/data\n\nnetworks:\n  tuleap:\n    name: tuleap\n    external: true\n"
        },
        {
          "name": "vaultwarden.yml",
          "type": "blob",
          "size": 2.1357421875,
          "content": "version: '3.8'\n\nx-vaultwarden-labels: &vaultwarden-labels\n  labels:\n    - traefik.enable=true\n    - traefik.docker.network=vaultwarden\n    - traefik.http.routers.vaultwarden-http.rule=Host(`vaultwarden.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.vaultwarden-http.entrypoints=http\n    - traefik.http.routers.vaultwarden-http.service=vaultwarden\n    - traefik.http.routers.vaultwarden-http.middlewares=https-redirect\n    - traefik.http.routers.vaultwarden-https.rule=Host(`vaultwarden.${DOMAIN?Variable DOMAIN not set}`)\n    - traefik.http.routers.vaultwarden-https.entrypoints=https\n    - traefik.http.routers.vaultwarden-https.tls=true\n    - traefik.http.routers.vaultwarden-https.service=vaultwarden\n    - traefik.http.routers.vaultwarden-https.tls.certresolver=le\n    - traefik.http.services.vaultwarden.loadbalancer.server.port=80\n\nx-service: &service\n  logging:\n    driver: json-file\n    options:\n      max-size: \"100m\"\n      max-file: \"2\"\n  restart: always\n  networks:\n    - vaultwarden\n\nservices:\n  # https://github.com/dani-garcia/vaultwarden/wiki/Using-Docker-Compose\n  # https://github.com/dani-garcia/vaultwarden/wiki/Configuration-overview\n  # https://github.com/dani-garcia/vaultwarden/blob/main/.env.template\n  vaultwarden:\n    container_name: vaultwarden\n    image: vaultwarden/server\n    deploy:\n      mode: replicated\n      replicas: 1\n      resources:\n        reservations:\n          cpus: '0.01'\n          memory: 50M\n      <<: *vaultwarden-labels\n    <<: *vaultwarden-labels\n    <<: *service\n    environment:\n      WEBSOCKET_ENABLED: \"true\"\n      SIGNUPS_ALLOWED: \"false\"\n      ADMIN_TOKEN: ${PASSWORD?Variable PASSWORD not set}\n      DOMAIN: \"https://vaultwarden.${DOMAIN?Variable DOMAIN not set}\"\n    volumes:\n      - vaultwarden-data:/data\n\nx-volume: &volume\n  driver: local\nx-volume-driver-opts: &volume-driver-opts\n  type: none\n  o: bind\n\nvolumes:\n  vaultwarden-data:\n    name: vaultwarden-data\n    <<: *volume\n    driver_opts:\n      <<: *volume-driver-opts\n      device: ${DATAPATH?Variable DATAPATH not set}/vaultwarden/data\n\nnetworks:\n  vaultwarden:\n    name: vaultwarden\n    external: true\n  database:\n    name: database\n    external: true\n"
        }
      ]
    }
  ]
}