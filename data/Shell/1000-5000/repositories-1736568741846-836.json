{
  "metadata": {
    "timestamp": 1736568741846,
    "page": 836,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "pch/welder",
      "stars": 1173,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.056640625,
          "content": "The MIT License\n\nCopyright (c) 2008-2017 Piotr Chmolowski\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.017578125,
          "content": "# üë®‚Äçüè≠ Welder\n\nWelder allows you to set up a Linux server with plain shell scripts.\n\nI wrote it out of frustration with Ansible. Ansible is an amazing and powerful\ntool, but for my needs it's just too much. 90% of the time all I need is to\nbe able to run a shell script on the server, without extra dependencies.\n\nIn most basic terms, that's what welder does.\n\nBut there's some more.\n\n**‚ö†Ô∏è NOTE**: if you're looking for the previous version of welder, you'll\n[find it here](https://github.com/pch/welder/tree/classic).\n\n## Features\n\n- set up your server with a single command (`welder run <playbook> <server>`)\n- run a set of organized reusable shell scripts\n- use simple template syntax (`{{ VAR_NAME }}`) to substitute config variables\n\n### Directory structure\n\nAn example directory structure:\n\n```sh\n‚îú‚îÄ‚îÄ playbook.conf\n‚îú‚îÄ‚îÄ config.conf\n‚îú‚îÄ‚îÄ firewall\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ files\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ rules.v4\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ firewall.sh\n‚îú‚îÄ‚îÄ nginx\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ nginx.sh\n‚îú‚îÄ‚îÄ system\n‚îÇ¬†¬† ‚îú‚îÄ‚îÄ files\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 10periodic\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îú‚îÄ‚îÄ 50unattended-upgrades\n‚îÇ¬†¬† ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ ssh_key\n‚îÇ¬†¬† ‚îî‚îÄ‚îÄ system.sh\n‚îî‚îÄ‚îÄ website\n    ‚îú‚îÄ‚îÄ files\n    ‚îÇ¬†¬† ‚îî‚îÄ‚îÄ site.conf.template\n    ‚îî‚îÄ‚îÄ website.sh\n```\n\n### Playbook\n\nPlaybook is just a list of modules to execute. Example:\n\n```sh\n# playbook.conf\n\nsystem\nfirewall\nnginx\nwebsite\n```\n\n### Config\n\nConfig file:\n\n```sh\nSITE_DOMAIN = \"example.com\"\nSITE_DIR = \"/var/www\"\n```\n\nYou can reference config variables in your scripts like this:\n\n```sh\n#!/bin/sh\nset -xeu\n\n. ./config.conf\n\necho $SITE_DOMAIN\n```\n\n### Templates\n\nWelder offers simple `sed`-based templates that interpolate variables in double brackets\nwith values defined in config.\n\n```lua\n# website/files/nginx-site.conf.template\n\nserver {\n    listen 80;\n\n    server_name {{ SITE_DOMAIN }};\n    root {{ SITE_DIR }}/current/public;\n}\n```\n\n## Usage\n\nRun the playbook with the following command:\n\n```sh\nwelder run playbook.conf user@example.com\n```\n\n### How it works\n\nWelder goes through the modules defined in `playbook.conf`, copies them to a\ncache directory, compiles config files and templates, `rsync`s the directory to\nthe server. Then it runs the `setup` script that invokes all `*.sh` files\nwithin the playbook (all scripts will be called with `sudo`).\n\n### Example setup script\n\n```sh\n# nginx/nginx.sh\n\n# NOTE: sudo isn't necessary because the whole script will be\n#       invoked as `sudo nginx/nginx.sh`\n\nset -xeu # 'u' will give you warnings on unbound config variables\n\nadd-apt-repository -y ppa:nginx/stable\nsapt-get update && apt-get install -y nginx\n\nservice nginx start\n\ncp files/nginx.conf /etc/nginx/nginx.conf\n\n# Disable default site\nif [ -f /etc/nginx/sites-enabled/default ]; then\n  rm /etc/nginx/sites-enabled/default\nfi\n\nservice nginx restart\n```\n\n## Installation\n\nThe only dependency required by welder is `rsync` (which should be\npre-installed on your system in most cases).\n\n1. Check out welder into `~/.welder` (or whatever location you prefer):\n\n   ```sh\n   $ git clone https://github.com/pch/welder.git ~/.welder\n   ```\n\n2. Add `~/.welder/bin` to your `$PATH` for access to the `welder`\n   command-line utility.\n\n   ```sh\n   $ echo 'export PATH=\"$PATH:$HOME/.welder/bin\"' >> ~/.bash_profile\n   ```\n\n   **Ubuntu Desktop note**: Modify your `~/.bashrc` instead of `~/.bash_profile`.\n\n   **Zsh note**: Modify your `~/.zshrc` file instead of `~/.bash_profile`.\n\n3. Restart your shell so that PATH changes take effect. (Opening a new\n   terminal tab will usually do it.) Now check if welder was set up:\n\n   ```sh\n   $  which welder\n   /Users/my-user/Code/welder/bin/welder\n   ```\n\n## Caveats\n\nSince welder allows you to run **anything** on the server, you should use it\nwith caution. It won't protect you from screw-ups, like\n`rm -rf \"/$undefined_variable\"`.\n\nUse at your own risk.\n\n## Alternatives\n\nThere's an [alternative version](https://gitlab.com/welder-cm/welder) of welder\n(the classic version), re-implemented in Python by\n[@thomas-mc-work](https://github.com/thomas-mc-work).\n"
        },
        {
          "name": "setup",
          "type": "blob",
          "size": 0.3701171875,
          "content": "#!/bin/sh\nset -eu\n\ninfo() {\n  printf \"[ \\033[00;34m..\\033[0m ] %s\\n\" \"$1\"\n}\n\nif [ -z \"${1+x}\" ]; then\n  echo \"run.sh: playbook argument missing\"\n  exit 1\nfi\n\nplaybook_file=\"$1\"\n\nwhile read -r module; do\n  info \"running module $module\"\n\n  find \"$module\" -name \"*.sh\" | while IFS= read -r script; do\n    info \"    script: $script\"\n    sudo \"$script\"\n  done\ndone < \"$playbook_file\"\n"
        },
        {
          "name": "welder",
          "type": "blob",
          "size": 2.310546875,
          "content": "#!/bin/sh\n\n[ -n \"$DEBUG\" ] && set -x\nset -eu\n\ninfo() {\n  printf \"[ \\033[00;34m..\\033[0m ] %s\" \"$1\"\n}\n\nsuccess() {\n  printf \"\\r\\033[2K[ \\033[00;32mOK\\033[0m ] %s\\n\" \"$1\"\n}\n\nfail() {\n  printf \"\\r\\033[2K  [\\033[0;31mFAIL\\033[0m] %s\\n\" \"$1\"\n  echo ''\n  exit 1\n}\n\nhelp() {\n  echo \"Usage:\"\n  echo \"    welder run <playbook> <ssh-url>\"\n  echo \"\"\n  echo \"Example:\"\n  echo \"    welder run playbook.conf user@example.com\"\n  exit 1\n}\n\nif ! command -v rsync > /dev/null; then\n  fail \"Please install rsync first\"\nfi\n\n[ $# -lt 3 ] && help\n\ncommand=$1\ncase $command in\n\"-h\" | \"--help\")\n  help\n  ;;\n*)\n\n  if [ \"$1\" != \"run\" ]; then\n    help\n  fi\n  ;;\nesac\nshift 1\n\nplaybook_file=$1\nssh_url=$2\nconfig_file=\"config.conf\"\n\n[ ! -f \"$playbook_file\" ] && fail \"Playbook file $playbook_file not found\"\n[ ! -f \"$config_file\" ]   && fail \"Config file $config_file not found\"\n\nWELDER_ROOT=\"$( cd -- \"$(dirname \"$0\")\" >/dev/null 2>&1 && pwd -P )\"\n\noutput_dir=\"welder-cache\"\nmkdir -p $output_dir\ncp -p \"$WELDER_ROOT\"/setup $output_dir\n\n# Clean up playbook file (comments, empty lines)\ngrep -v -s -e '^#' -e '^$' \"$playbook_file\" > \"$output_dir/$playbook_file\"\n\n# Clean up config: remove comments, empty lines and spaces around =\ngrep -v -s -e '^#' -e '^$' \"$config_file\" \\\n  | sed -e 's/[[:space:]]=[[:space:]]/=/' > \"$output_dir/$config_file\"\n\n# Prepare config for *.template files, turn it into a sed command file\n# First sed escapes variables so they can be used as... a sed pattern\n# Source: https://stackoverflow.com/a/2705678\n#\n# Turns FOO=\"BAR\" into s/FOO/BAR/g\nsed -e 's/[]\\/$*.^[]/\\\\&/g'  \\\n  -e 's/=\"/=/;s/\"$//' \\\n  -e 's/^/s\\/{{ /' \\\n  -e 's/=/ }}\\//' \\\n  -e 's/$/\\/g/' \"$output_dir/$config_file\" > \"$output_dir/templates-$config_file\"\n\n# Go through all modules listed in $playbook_file, copy them to $output_dir\nwhile read -r module; do\n  cp -R \"$module\" \"$output_dir\"\ndone < \"$output_dir/$playbook_file\"\n\n# Interpolate templates\nfind $output_dir -type f -name \"*.template\" | while IFS= read -r template; do\n  template_output=${template%.*}\n  sed -f \"$output_dir/templates-$config_file\" \"$template\" > \"$template_output\"\n  rm \"$template\"\ndone\n\n# Copy files to the server and run everything\nrsync -a --delete --ignore-times --quiet \"$output_dir\"/ \"$ssh_url\":\"$output_dir\"\nssh -t \"$ssh_url\" \"cd $output_dir && ./setup $playbook_file && cd .. && rm -r $output_dir\"\n\nsuccess \"All done!\"\n"
        }
      ]
    }
  ]
}