{
  "metadata": {
    "timestamp": 1736568425503,
    "page": 381,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "lloesche/valheim-server-docker",
      "stars": 1991,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.240234375,
          "content": "this\n.idea/\ntmp/\nrunner.env\nartifacts/\n*~\n*backups\n.cache\ndocker-tag\n.tox/\n.*.swp\n*.egg-info\nwheelhouse/\ntest/build/*\nPASSED\nFAILED\ntest/.vagrant/*\n# Container image specific\n.gitignore\n.git\n.dockerignore\nDockerfile\n**/__pycache__\nvenv*\n.vscode/\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.228515625,
          "content": "__pycache__\nthis\n.idea/\ntmp/\nrunner.env\nartifacts/\n*~\n*backups\n.cache\ndocker-tag\n.tox/\n.*.swp\n*.egg-info\nwheelhouse/\ntest/build/*\nPASSED\nFAILED\ntest/.vagrant/*\n.pytest_cache\n.eggs/\nvenv*\n.vscode/\n/config/\n*.code-workspace\nvalheim.env\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 7.0087890625,
          "content": "FROM debian:bullseye-slim as build-env\nENV DEBIAN_FRONTEND=noninteractive\nARG TESTS\nARG SOURCE_COMMIT\nARG BUSYBOX_VERSION=1.34.1\nARG SUPERVISOR_VERSION=4.2.4\n\nRUN apt-get update\nRUN apt-get -y install apt-utils\nRUN apt-get -y install build-essential curl git python3 python3-pip golang shellcheck\n\nWORKDIR /build/busybox\nRUN curl -L -o /tmp/busybox.tar.bz2 https://busybox.net/downloads/busybox-${BUSYBOX_VERSION}.tar.bz2 \\\n    && tar xjvf /tmp/busybox.tar.bz2 --strip-components=1 -C /build/busybox \\\n    && make defconfig \\\n    && sed -i -e \"s/^CONFIG_FEATURE_SYSLOGD_READ_BUFFER_SIZE=.*/CONFIG_FEATURE_SYSLOGD_READ_BUFFER_SIZE=2048/\" .config \\\n    && make \\\n    && cp busybox /usr/local/bin/\n\nWORKDIR /build/env2cfg\nCOPY ./env2cfg/ /build/env2cfg/\nRUN if [ \"${TESTS:-true}\" = true ]; then \\\n        pip3 install tox \\\n        && tox \\\n        ; \\\n    fi\nRUN python3 setup.py bdist --format=gztar\n\nWORKDIR /build/valheim-logfilter\nCOPY ./valheim-logfilter/ /build/valheim-logfilter/\nRUN go build -ldflags=\"-s -w\" \\\n    && mv valheim-logfilter /usr/local/bin/\n\nWORKDIR /build\nRUN git clone https://github.com/Yepoleb/python-a2s.git \\\n    && cd python-a2s \\\n    && python3 setup.py bdist --format=gztar\n\nWORKDIR /build/supervisor\nRUN curl -L -o /tmp/supervisor.tar.gz https://github.com/Supervisor/supervisor/archive/${SUPERVISOR_VERSION}.tar.gz \\\n    && tar xzvf /tmp/supervisor.tar.gz --strip-components=1 -C /build/supervisor \\\n    && python3 setup.py bdist --format=gztar\n\nCOPY bootstrap /usr/local/sbin/\nCOPY valheim-status /usr/local/bin/\nCOPY valheim-is-idle /usr/local/bin/\nCOPY valheim-bootstrap /usr/local/bin/\nCOPY valheim-backup /usr/local/bin/\nCOPY valheim-updater /usr/local/bin/\nCOPY valheim-plus-updater /usr/local/bin/\nCOPY bepinex-updater /usr/local/bin/\nCOPY valheim-server /usr/local/bin/\nCOPY defaults /usr/local/etc/valheim/\nCOPY common /usr/local/etc/valheim/\nCOPY contrib/* /usr/local/share/valheim/contrib/\nRUN chmod 755 /usr/local/sbin/bootstrap /usr/local/bin/valheim-*\nRUN if [ \"${TESTS:-true}\" = true ]; then \\\n        shellcheck -a -x -s bash -e SC2034 \\\n            /usr/local/sbin/bootstrap \\\n            /usr/local/bin/valheim-backup \\\n            /usr/local/bin/valheim-is-idle \\\n            /usr/local/bin/valheim-bootstrap \\\n            /usr/local/bin/valheim-server \\\n            /usr/local/bin/valheim-updater \\\n            /usr/local/bin/valheim-plus-updater \\\n            /usr/local/bin/bepinex-updater \\\n            /usr/local/share/valheim/contrib/*.sh \\\n        ; \\\n    fi\nWORKDIR /\nRUN rm -rf /usr/local/lib/\nRUN tar xzvf /build/supervisor/dist/supervisor-*.linux-x86_64.tar.gz\nRUN tar xzvf /build/env2cfg/dist/env2cfg-*.linux-x86_64.tar.gz\nRUN tar xzvf /build/python-a2s/dist/python-a2s-*.linux-x86_64.tar.gz\nCOPY supervisord.conf /usr/local/etc/supervisord.conf\nRUN mkdir -p /usr/local/etc/supervisor/conf.d/ \\\n    && chmod 640 /usr/local/etc/supervisord.conf\nRUN echo \"${SOURCE_COMMIT:-unknown}\" > /usr/local/etc/git-commit.HEAD\n\n\nFROM --platform=linux/386 debian:buster-slim as i386-libs\nENV DEBIAN_FRONTEND=noninteractive\nRUN apt-get update \\\n    && apt-get -y --no-install-recommends install \\\n        libc6-dev \\\n        libstdc++6 \\\n        libsdl2-2.0-0 \\\n        libcurl4 \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*\n\n\nFROM debian:bullseye-slim\nENV DEBIAN_FRONTEND=noninteractive\nCOPY --from=build-env /usr/local/ /usr/local/\nCOPY --from=i386-libs /lib/ld-linux.so.2 /lib/ld-linux.so.2\nCOPY --from=i386-libs /lib/i386-linux-gnu /lib/i386-linux-gnu\nCOPY --from=i386-libs /usr/lib/i386-linux-gnu /usr/lib/i386-linux-gnu\nCOPY fake-supervisord /usr/bin/supervisord\n\nRUN groupadd -g \"${PGID:-0}\" -o valheim \\\n    && useradd -g \"${PGID:-0}\" -u \"${PUID:-0}\" -o --create-home valheim \\\n    && apt-get update \\\n    && apt-get -y --no-install-recommends install apt-utils \\\n    && apt-get -y dist-upgrade \\\n    && apt-get -y --no-install-recommends install \\\n        libc6-dev \\\n        libsdl2-2.0-0 \\\n        cron \\\n        curl \\\n        iproute2 \\\n        libcurl4 \\\n        ca-certificates \\\n        procps \\\n        locales \\\n        unzip \\\n        zip \\\n        rsync \\\n        openssh-client \\\n        jq \\\n        python3-minimal \\\n        python3-pkg-resources \\\n        python3-setuptools \\\n        libpulse-dev \\\n        libatomic1 \\\n        libc6 \\\n    && echo 'LANG=\"en_US.UTF-8\"' > /etc/default/locale \\\n    && echo \"en_US.UTF-8 UTF-8\" >> /etc/locale.gen \\\n    && rm -f /bin/sh \\\n    && ln -s /bin/bash /bin/sh \\\n    && locale-gen \\\n    && update-alternatives --install /usr/bin/python python /usr/bin/python3 1 \\\n    && usermod -a -G crontab valheim \\\n    && apt-get clean \\\n    && mkdir -p /var/spool/cron/crontabs /var/log/supervisor /opt/valheim /opt/steamcmd /home/valheim/.config/unity3d/IronGate /config /var/run/valheim \\\n    && ln -s /config /home/valheim/.config/unity3d/IronGate/Valheim \\\n    && ln -s /usr/local/bin/busybox /usr/local/sbin/syslogd \\\n    && ln -s /usr/local/bin/busybox /usr/local/sbin/mkpasswd \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/vi \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/patch \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/unix2dos \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/dos2unix \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/makemime \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/xxd \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/wget \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/less \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/lsof \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/httpd \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ssl_client \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ip \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ipcalc \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ping \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ping6 \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/iostat \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/setuidgid \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ftpget \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/ftpput \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/bzip2 \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/xz \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/pstree \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/killall \\\n    && ln -s /usr/local/bin/busybox /usr/local/bin/bc \\\n    && curl -L -o /tmp/steamcmd_linux.tar.gz https://steamcdn-a.akamaihd.net/client/installer/steamcmd_linux.tar.gz \\\n    && tar xzvf /tmp/steamcmd_linux.tar.gz -C /opt/steamcmd/ \\\n    && chown valheim:valheim /var/run/valheim \\\n    && chown -R root:root /opt/steamcmd \\\n    && chmod 755 /opt/steamcmd/steamcmd.sh \\\n        /opt/steamcmd/linux32/steamcmd \\\n        /opt/steamcmd/linux32/steamerrorreporter \\\n        /usr/bin/supervisord \\\n    && cd \"/opt/steamcmd\" \\\n    && su - valheim -c \"/opt/steamcmd/steamcmd.sh +login anonymous +quit\" \\\n    && rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* \\\n    && date --utc --iso-8601=seconds > /usr/local/etc/build.date\n\nEXPOSE 2456-2457/udp\nEXPOSE 9001/tcp\nEXPOSE 80/tcp\nWORKDIR /\nCMD [\"/usr/local/sbin/bootstrap\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.1005859375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2021 Lukas Lösche <lukas@opensourcery.de>\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 49.8154296875,
          "content": "# lloesche/valheim-server Docker image\n![Valheim](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/Logo_valheim.png \"Valheim\")\n\nValheim Server in a Docker Container (with [BepInEx](#bepinexpack-valheim) and [ValheimPlus](#valheimplus) support)  \nThis project is hosted at [https://github.com/lloesche/valheim-server-docker](https://github.com/lloesche/valheim-server-docker)  \n\n\n# Table of contents\n<!-- vim-markdown-toc GFM -->\n\n* [Basic Docker Usage](#basic-docker-usage)\n* [Environment Variables](#environment-variables)\n\t* [Log filters](#log-filters)\n\t\t* [Log filter event hooks](#log-filter-event-hooks)\n\t\t\t* [Discord log filter event hook example](#discord-log-filter-event-hook-example)\n\t* [Event hooks](#event-hooks)\n\t\t* [Event hook examples](#event-hook-examples)\n\t\t\t* [Install extra packages](#install-extra-packages)\n\t\t\t* [Copy backups to another location](#copy-backups-to-another-location)\n\t\t\t* [Notify on Discord](#notify-on-discord)\n\t* [Mod config from Environment Variables](#mod-config-from-environment-variables)\n* [System requirements](#system-requirements)\n* [Deployment](#deployment)\n\t* [Deploying with Docker and systemd](#deploying-with-docker-and-systemd)\n\t* [Deploying with docker compose](#deploying-with-docker-compose)\n\t* [Deploying to Kubernetes](#deploying-to-kubernetes)\n\t* [Deploying to AWS ECS](#deploying-to-aws-ecs)\n\t* [Deploying to Nomad](#deploying-to-nomad)\n* [Updates](#updates)\n* [Backups](#backups)\n  * [Manual backup](#manual-backup)\n* [Finding Your Server](#finding-your-server)\n\t* [In-game](#in-game)\n\t\t* [Joining Directly via Hostname/IP](#joining-directly-via-hostnameip)\n\t* [Steam Server Browser](#steam-server-browser)\n\t* [Steam Server Favorites & LAN Play](#steam-server-favorites--lan-play)\n* [Admin Commands](#admin-commands)\n  * [Enable Admin Console](#enable-admin-console)\n* [Supervisor](#supervisor)\n  * [Supervisor API](#supervisor-api)\n* [Status web server](#status-web-server)\n* [Modding](#modding)\n  * [BepInExPack Valheim](#bepinexpack-valheim)\n    * [Configuration](#configuration)\n  * [ValheimPlus](#valheimplus)\n    * [Updates](#updates-1)\n    * [Configuration](#configuration-1)\n      * [Disable server password](#disable-server-password)\n* [Changing startup CMD in Portainer](#changing-startup-cmd-in-portainer)\n* [Synology Help](#synology-help)\n\t* [First install](#first-install)\n\t* [Updating the container image to the latest version](#updating-the-container-image-to-the-latest-version)\n\t\t* [Error after download of new container image](#error-after-download-of-new-container-image)\n* [QNAP NAS Help](#qnap-nas-help)\n\t* [Creating container](#creating-container)\n\t* [Updating image](#updating-image)\n\t* [QNAP ZFS issue](#qnap-zfs-issue)\n* [OpenMediaVault Help](#openmediavault-help)\n  * [Permission denied error](#permission-denied-error)\n* [License](#license)\n* [Legal disclaimer](#legal-disclaimer)\n<!-- vim-markdown-toc -->\n\n\n# Basic Docker Usage\n\nThe name of the Docker image is `ghcr.io/lloesche/valheim-server`.\n\nVolume mount the server config directory to `/config` within the Docker container.\n\nIf you have an existing world on a Windows system you can copy it from e.g.  \n  `C:\\Users\\Lukas\\AppData\\LocalLow\\IronGate\\Valheim\\worlds_local`\nto e.g.  \n  `$HOME/valheim-server/config/worlds_local`\nand run the image with `$HOME/valheim-server/config` volume mounted to `/config` inside the container.\nThe container directory `/opt/valheim` contains the downloaded server. It can optionally be volume mounted to avoid having to download the server on each fresh start.\n\n```\n$ mkdir -p $HOME/valheim-server/config/worlds_local $HOME/valheim-server/data\n# copy existing world\n$ docker run -d \\\n    --name valheim-server \\\n    --cap-add=sys_nice \\\n    --stop-timeout 120 \\\n    -p 2456-2457:2456-2457/udp \\\n    -v $HOME/valheim-server/config:/config \\\n    -v $HOME/valheim-server/data:/opt/valheim \\\n    -e SERVER_NAME=\"My Server\" \\\n    -e WORLD_NAME=\"Neotopia\" \\\n    -e SERVER_PASS=\"secret\" \\\n    ghcr.io/lloesche/valheim-server\n```\n\nWarning: `SERVER_PASS` must be at least 5 characters long. Otherwise `valheim_server.x86_64` will refuse to start!\n\nA fresh start will take several minutes depending on your Internet connection speed as the container will download the Valheim dedicated server from Steam (~1 GB).\n\nDo not forget to modify `WORLD_NAME` to reflect the name of your world! For existing worlds that is the filename in the `worlds_local/` folder without the `.db/.fwl` extension.\n\nIf you want to play with friends over the Internet and are behind NAT make sure that UDP ports 2456-2457 are forwarded to the container host. (Remark: If you use crossplay, you don't need port forwarding! See official Valheim Dedicated Server Manual.pdf in the data/server folder.)\nAlso ensure they are publicly accessible in any firewall.\n\n**Crossplay:** To enable crossplay between different platforms add -crossplay to SERVER_ARGS:\n\n```\n    -e SERVER_ARGS=\"-crossplay\"\n```\n\nThere is more info in section [Finding Your Server](#finding-your-server).\n\nFor LAN-only play see section [Steam Server Favorites & LAN Play](#steam-server-favorites--lan-play)\n\nFor more deployment options see the [Deployment section](#deployment). \n\nGranting `CAP_SYS_NICE` to the container is optional. It allows the Steam library that Valheim uses to give itself more CPU cycles.\nWithout it you will see a message `Warning: failed to set thread priority` in the startup log.\n\n\n# Environment Variables\n**All variable names and values are case-sensitive!**\n\n| Name | Default | Purpose |\n|----------|----------|-------|\n| `SERVER_NAME` | `My Server` | Name that will be shown in the server browser |\n| `SERVER_PORT` | `2456` | UDP start port that the server will listen on |\n| `WORLD_NAME` | `Dedicated` | Name of the world without `.db/.fwl` file extension |\n| `SERVER_PASS` | `secret` | Password for logging into the server - min. 5 characters! |\n| `SERVER_PUBLIC` | `true` | Whether the server should be listed in the server browser (`true`) or not (`false`) |\n| `SERVER_ARGS` |  | Additional Valheim server CLI arguments |\n| `ADMINLIST_IDS` |  | Space separated list of admin SteamIDs in SteamID64 format. Overrides any existing adminlist.txt entries! |\n| `BANNEDLIST_IDS` |  | Space separated list of banned SteamIDs in SteamID64 format. Overrides any existing bannedlist.txt entries! |\n| `PERMITTEDLIST_IDS` |  | Space separated list of whitelisted SteamIDs in SteamID64 format. Overrides any existing permittedlist.txt entries! |\n| `UPDATE_CRON` | `*/15 * * * *` | [Cron schedule](https://en.wikipedia.org/wiki/Cron#Overview) for update checks (disabled if set to an empty string or if the legacy `UPDATE_INTERVAL` is set) |\n| `IDLE_DATAGRAM_WINDOW` | `3` | The time window, in seconds, to wait for incoming UDP datagrams on non-public servers before determining if the server is idle |\n| `IDLE_DATAGRAM_MAX_COUNT` | `30` | The number of incoming UDP datagrams the container should tolerate (including useless datagrams such as mDNS, as well as useful datagrams like queries against the UDP query port and active connections by players) on non-public servers before deciding that the server is not idle |\n| `UPDATE_IF_IDLE` | `true` | Only run update check if no players are connected to the server (`true` or `false`) |\n| `RESTART_CRON` | `0 5 * * *` | [Cron schedule](https://en.wikipedia.org/wiki/Cron#Overview) for server restarts (disabled if set to an empty string) |\n| `RESTART_IF_IDLE` | `true` | Only run daily restart if no players are connected to the server (`true` or `false`) |\n| `TZ` | `Etc/UTC` | Container [time zone](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones) |\n| `BACKUPS` | `true` | Whether the server should create periodic backups (`true` or `false`) |\n| `BACKUPS_CRON` | `0 * * * *` | [Cron schedule](https://en.wikipedia.org/wiki/Cron#Overview) for world backups (disabled if set to an empty string or if the legacy `BACKUPS_INTERVAL` is set) |\n| `BACKUPS_DIRECTORY` | `/config/backups` | Path to the backups directory |\n| `BACKUPS_MAX_AGE` | `3` | Age in days after which old backups are flushed |\n| `BACKUPS_MAX_COUNT` | `0` | Maximum number of backups kept, 0 means infinity |\n| `BACKUPS_IF_IDLE` | `true` | Backup even when no players have been connected for a while |\n| `BACKUPS_IDLE_GRACE_PERIOD` | `3600` | Grace period in seconds after the last player has disconnected in which we will still create backups when `BACKUPS_IF_IDLE=false` |\n| `BACKUPS_ZIP` | `true` | Compress Backups with `zip`. If set to `false` Backups will be stored uncompressed. |\n| `PERMISSIONS_UMASK` | `022` | [Umask](https://en.wikipedia.org/wiki/Umask) to use for backups, config files and directories |\n| `STEAMCMD_ARGS` | `validate` | Additional steamcmd CLI arguments |\n| `PUBLIC_TEST` | `false` | Run the Public Test Beta version of Valheim server. Note that this simply extends existing `STEAMCMD_ARGS` by adding the appropriate beta flags to it. |\n| `VALHEIM_PLUS` | `false` | Whether [ValheimPlus](https://github.com/valheimPlus/ValheimPlus) mod should be loaded (config in `/config/valheimplus`, additional plugins in `/config/valheimplus/plugins`). Can not be used together with `BEPINEX`. |\n| `VALHEIM_PLUS_REPO` | `Grantapher/ValheimPlus` | Which ValheimPlus Github repo to use. Useful for switching to forks. |\n| `VALHEIM_PLUS_RELEASE` | `latest` | Which version of [ValheimPlus](https://github.com/valheimPlus/ValheimPlus) to download. Will default to latest available. To specify a specific tag set to `tags/0.9.9.8` |\n| `BEPINEX` | `false` | Whether [BepInExPack Valheim](https://valheim.thunderstore.io/package/denikson/BepInExPack_Valheim/) mod should be loaded (config in `/config/bepinex`, plugins in `/config/bepinex/plugins`). Can not be used together with `VALHEIM_PLUS`. |\n| `SUPERVISOR_HTTP` | `false` | Turn on supervisor's http server |\n| `SUPERVISOR_HTTP_PORT` | `9001` | Set supervisor's http server port |\n| `SUPERVISOR_HTTP_USER` | `admin` | Supervisor http server username |\n| `SUPERVISOR_HTTP_PASS` |  | Supervisor http server password |\n| `STATUS_HTTP` | `false` | Turn on the status http server. Only useful on public servers (`SERVER_PUBLIC=true`). |\n| `STATUS_HTTP_PORT` | `80` | Status http server tcp port |\n| `STATUS_HTTP_CONF` | `/config/httpd.conf` | Path to the [busybox httpd config](https://git.busybox.net/busybox/tree/networking/httpd.c) |\n| `STATUS_HTTP_HTDOCS` | `/opt/valheim/htdocs` | Path to the status httpd htdocs where `status.json` is written |\n| `SYSLOG_REMOTE_HOST` |  | Remote syslog host or IP to send logs to |\n| `SYSLOG_REMOTE_PORT` | `514` | Remote syslog UDP port to send logs to |\n| `SYSLOG_REMOTE_AND_LOCAL` | `true` | When sending logs to a remote syslog server also log local |\n| `PUID` | `0` | UID to run valheim-server as |\n| `PGID` | `0` | GID to run valheim-server as |\n\nThere are a few undocumented environment variables that could break things if configured wrong. They can be found in [`defaults`](defaults).\n\n\n## Log filters\nValheim server by default logs a lot of noise. These env variables allow users to remove unwanted lines from the log.\n\n| Prefix | Default | Purpose |\n|----------|----------|-------|\n| `VALHEIM_LOG_FILTER_EMPTY` | `true` | Filter empty log lines |\n| `VALHEIM_LOG_FILTER_UTF8` | `true` | Filter invalid UTF-8 characters |\n| `VALHEIM_LOG_FILTER_MATCH` | ` ` | Filter log lines exactly matching |\n| `VALHEIM_LOG_FILTER_STARTSWITH` | `(Filename:` | Filter log lines starting with |\n| `VALHEIM_LOG_FILTER_ENDSWITH` |  | Filter log lines ending with |\n| `VALHEIM_LOG_FILTER_CONTAINS` |  | Filter log lines containing |\n| `VALHEIM_LOG_FILTER_REGEXP` |  | Filter log lines matching regexp |\n\nThe default filter removes:\n- Empty log lines\n- Log lines consisting of a single space (wtf?)\n- A repeating line saying `(Filename: ./Runtime/Export/Debug/Debug.bindings.h Line: 35)`\n- Lines flooding the log with `Assertion Failed` warnings on packet processing timeouts (See [#104](https://github.com/lloesche/valheim-server-docker/discussions/104))\n- If ValheimPlus is turned on lines starting with `Fallback handler could not load library`\n\n\n### Log filter event hooks\nIf an environment variable prefixed with `ON_` exists for an identically named log filter, instead of removing the log line the contents of the variable will be executed when the filter matches with the log line piped on stdin.\n\n| Prefix | Purpose |\n|----------|-------|\n| `ON_VALHEIM_LOG_FILTER_MATCH` | Run command hook on log lines exactly matching |\n| `ON_VALHEIM_LOG_FILTER_STARTSWITH` | Run command hook on log lines starting with |\n| `ON_VALHEIM_LOG_FILTER_ENDSWITH` | Run command hook on log lines ending with |\n| `ON_VALHEIM_LOG_FILTER_CONTAINS` | Run command hook on log lines containing |\n| `ON_VALHEIM_LOG_FILTER_REGEXP` | Run command hook on regexp match |\n\nAll environment variables except for `VALHEIM_LOG_FILTER_EMPTY` and `VALHEIM_LOG_FILTER_UTF8` are prefixes. Meaning you can define multiple matches like so:\n```\n-e VALHEIM_LOG_FILTER_STARTSWITH=foo \\\n-e VALHEIM_LOG_FILTER_STARTSWITH_BAR=bar \\\n-e VALHEIM_LOG_FILTER_STARTSWITH_SOMETHING_ELSE=\"some other filter\"\n-e VALHEIM_LOG_FILTER_CONTAINS_Connected=\"Got character ZDOID from\"\n-e ON_VALHEIM_LOG_FILTER_CONTAINS_Connected=\"cat >> /tmp/character_login\"\n```\n\n#### Discord log filter event hook example\nSends a Discord message whenever a player spawns\n```\n-e DISCORD_WEBHOOK=\"https://discord.com/api/webhooks/8171522530...\" \\\n-e VALHEIM_LOG_FILTER_CONTAINS_Spawned=\"Got character ZDOID from\" \\\n-e ON_VALHEIM_LOG_FILTER_CONTAINS_Spawned='{ read l; l=${l//*ZDOID from /}; l=${l// :*/}; msg=\"Player $l spawned into the world\"; curl -sfSL -X POST -H \"Content-Type: application/json\" -d \"{\\\"username\\\":\\\"Valheim\\\",\\\"content\\\":\\\"$msg\\\"}\" \"$DISCORD_WEBHOOK\"; }'\n```\n\nSee [Notify on Discord](#notify-on-discord) below for proper quoting in env and compose files.\n\nIf you are running ValheimPlus and this filter triggers twice, check [this ValheimPlus issue](https://github.com/valheimPlus/ValheimPlus/issues/318).\nThe cause is a misconfigured `BepInEx.cfg` that causes all log lines to be duplicated.\n\n\n## Event hooks\nThe following environment variables can be populated to run commands whenever specific events happen.\n\n| Name | Default | Purpose |\n|----------|----------|-------|\n| `PRE_SUPERVISOR_HOOK` |  | Command to be executed before supervisord is run. Startup is blocked until this command returns. |\n| `PRE_BOOTSTRAP_HOOK` |  | Command to be executed before bootstrapping is done. Startup is blocked until this command returns. |\n| `POST_BOOTSTRAP_HOOK` |  | Command to be executed after bootstrapping is done and before the server or any services are started. Can be used to install additional packages or perform additional system setup. Startup is blocked until this command returns. |\n| `PRE_BACKUP_HOOK` |  | Command to be executed before a backup is created. The string `@BACKUP_FILE@` will be replaced by the full path of the future backup zip file. Backups are blocked until this command returns. |\n| `POST_BACKUP_HOOK` |  | Command to be executed after a backup is created. The string `@BACKUP_FILE@` will be replaced by the full path of the backup zip file. Backups are blocked until this command returns. See [Copy backups to another location](#copy-backups-to-another-location) for details. |\n| `PRE_UPDATE_CHECK_HOOK` |  | Command to be executed before an update check is performed. Current update is blocked until this command returns. |\n| `POST_UPDATE_CHECK_HOOK` |  | Command to be executed after an update check was performed. Future updates are blocked until this command returns. |\n| `PRE_START_HOOK` |  | Command to be executed before the first server start is performed by the valheim-updater. Current start is blocked until this command returns. |\n| `POST_START_HOOK` |  | Command to be executed after the first server start was performed by the valheim-updater. Future restarts and update checks are blocked until this command returns. |\n| `PRE_RESTART_HOOK` |  | Command to be executed before a server restart is performed by the valheim-updater. Current restart is blocked until this command returns. |\n| `PRE_SERVER_LISTENING_HOOK` |  | Command to be executed after the server runs, but before it's able to accept connections. The loop that checks connection status will be blocked until this command returns. |\n| `POST_SERVER_LISTENING_HOOK` |  | Command to be executed once the server is available for players to connect! The hook only fires after status is updated to `running`. |\n| `POST_RESTART_HOOK` |  | Command to be executed after a server restart was performed by the valheim-updater. Future restarts and update checks are blocked until this command returns. |\n| `PRE_SERVER_RUN_HOOK` |  | Command to be executed before the server is started. Server startup is blocked until this command returns. |\n| `POST_SERVER_RUN_HOOK` |  | Command to be executed after the server has finished running. Server shutdown is blocked until this command returns or a shutdown timeout is triggered after 29 seconds. |\n| `PRE_SERVER_SHUTDOWN_HOOK` |  | Command to be executed before the server is shut down. Server shutdown is blocked until this command returns. If `PRE_SERVER_SHUTDOWN_HOOK` holds the shutdown process for more than 90 seconds, the entire process will be hard-killed by `supervisord`. |\n| `POST_SERVER_SHUTDOWN_HOOK` |  | Command to be executed after the server has finished shutting down. |\n| `PRE_BEPINEX_CONFIG_HOOK` |  | Command to be executed before writing BepInEx.cfg. |\n| `POST_BEPINEX_CONFIG_HOOK` |  | Command to be executed after writing BepInEx.cfg. Can be used to write your own mod config using [`env2cfg`](#mod-config-from-environment-variables). |\n\n\n### Event hook examples\n#### Install extra packages\n```\n-e POST_BOOTSTRAP_HOOK=\"apt-get update && DEBIAN_FRONTEND=noninteractive apt-get -y install awscli\"\n```\n\n#### Copy backups to another location\nAfter a backup ZIP has been created the command specified by `$POST_BACKUP_HOOK` will be executed if set to a non-zero string.\nWithin that command the string `@BACKUP_FILE@` will be replaced by the full path to the just created ZIP file.\n\n```\n-v $HOME/.ssh/id_rsa:/root/.ssh/id_rsa \\\n-v $HOME/.ssh/known_hosts:/root/.ssh/known_hosts \\\n-e POST_BACKUP_HOOK='timeout 300 scp @BACKUP_FILE@ myself@example.com:~/backups/$(basename @BACKUP_FILE@)'\n```\n\n#### Notify on Discord\nBecause proper string quoting on the shell vs. inside a `docker-compose.yaml` vs. an `env_file` can be challenging, here are examples for each use case.\n\n##### Using the commandline\nDelay restarts by 1 minute and notify on Discord\n```\n-e DISCORD_WEBHOOK=\"https://discord.com/api/webhooks/8171522530...\" \\\n-e DISCORD_MESSAGE=\"Restarting Valheim server in one minute!\" \\\n-e PRE_RESTART_HOOK='curl -sfSL -X POST -H \"Content-Type: application/json\" -d \"{\\\"username\\\":\\\"Valheim\\\",\\\"content\\\":\\\"$DISCORD_MESSAGE\\\"}\" \"$DISCORD_WEBHOOK\" && sleep 60'\n```\n\n##### Inside docker-compose.yaml\nNotify on Discord with server's name in the message\n```\n    environment:\n      - DISCORD_WEBHOOK=https://discord.com/api/webhooks/8171522530...\n      - DISCORD_MESSAGE=Starting Valheim server $$SERVER_NAME\n      - 'PRE_BOOTSTRAP_HOOK=curl -sfSL -X POST -H \"Content-Type: application/json\" -d \"{\\\"username\\\":\\\"Valheim\\\",\\\"content\\\":\\\"$$(eval echo $$DISCORD_MESSAGE)\\\"}\" \"$$DISCORD_WEBHOOK\"'\n```\n\n##### Inside an env_file\n```\nDISCORD_WEBHOOK=https://discord.com/api/webhooks/8171522530...\nDISCORD_MESSAGE=Starting Valheim server\nPRE_BOOTSTRAP_HOOK=curl -sfSL -X POST -H \"Content-Type: application/json\" -d \"{\\\"username\\\":\\\"Valheim\\\",\\\"content\\\":\\\"$DISCORD_MESSAGE\\\"}\" \"$DISCORD_WEBHOOK\"\n```\n\n#### Notify on Matrix, inside an env_file\nCreate an account for your bot, log in and join the room you want to post to. The room ID is noted in the room's settings.\n```\nMATRIX_BOT_SERVER=https://matrix...\nMATRIX_BOT_ROOM_ID=!...\nMATRIX_BOT_ACCESS_TOKEN=...\nPRE_RESTART_HOOK=curl -sfSL -X PUT -d \"{\\\"msgtype\\\":\\\"m.notice\\\",\\\"body\\\":\\\"Valheim is being updated\\\"}\" \"$MATRIX_BOT_SERVER/_matrix/client/r0/rooms/$MATRIX_BOT_ROOM_ID/send/m.room.message/$(date +%s-%N)?access_token=$MATRIX_BOT_ACCESS_TOKEN\"\n```\nNote the `$(date +%s-%N)` is used for the required unique txnId.\n\n\n## Mod config from Environment Variables\nMod config can be specified in environment variables using the syntax `<prefix>_<section>_<variable>=<value>`.\n\n**Predefined prefix list**\n| Prefix | Mod | File |\n|----------|----------|----------|\n| `VPCFG` | ValheimPlus | `/config/valheimplus/valheim_plus.cfg` |\n| `BEPINEXCFG` | BepInEx | `/config/valheimplus/BepInEx.cfg` or `/config/bepinex/BepInEx.cfg` depending on whether `VALHEIM_PLUS=true` or `BEPINEX=true` |\n\n\n**Translation table**  \nSome characters that are allowed as section names in the config files are not allowed as environment variable names. They can be encoded using the following translation table.\n| Variable name string | Replacement |\n|----------|----------|\n| `_DOT_` | `.` |\n| `_HYPHEN_` | `-` |\n| `_UNDERSCORE_` | `_` |\n| `_PLUS_` | `+` |\n| `_SPACE_` | ` ` |\n\nExample:\n```\n-e VALHEIM_PLUS=true \\\n-e VPCFG_Server_enabled=true \\\n-e VPCFG_Server_enforceMod=false \\\n-e VPCFG_Server_dataRate=500 \\\n-e BEPINEXCFG_Logging_DOT_Console_Enabled=true\n```\n\nturns into `/config/valheimplus/valheim_plus.cfg`\n```\n[Server]\nenabled=true\nenforceMod=false\ndataRate=500\n```\n\nand `/config/valheimplus/BepInEx.cfg`\n```\n[Logging.Console]\nEnabled=true\n```\n\nAll existing configuration in those files is retained and a backup of the old config is created as e.g. `/config/valheimplus/valheim_plus.cfg.old` before writing the new config file.\n\nYou could generate your own custom plugin config from environment variables using [the `POST_BEPINEX_CONFIG_HOOK` event hook](#event-hooks) and [`env2cfg`](https://github.com/lloesche/valheim-server-docker/tree/main/env2cfg).\n\n\n# System requirements\nOn our system while idle with no players connected Valheim server consumes around 2.8 GB RSS. All the while using around 30% of one CPU Core on a 2.40 GHz Intel Xeon E5-2620 v3. Valheim server is making use of many threads with two of them seemingly doing the bulk of the work each responsible for around 8-10% of the 30% of idle load.\n\nThe picture changes when players connect. The first player increased overall load to 42%, the second player to 53%. In the thread view we see that a thread that was previously consuming 10% is now hovering around 38%. Meaning while Valheim server creates 50 threads on our system it looks like there is a single thread doing the bulk of all work (~70%) with no way for the Kernel to distribute the load to many cores.\n\nTherefore our minimum requirements would be a dual core system with 4 GB of RAM and our recommended system would be a high clocked 4 core server with 8 GB of RAM. A few very high clocked cores will be more beneficial than having many cores. I.e. two 5 GHz cores will yield better performance than six 2 GHz cores.\nThis holds especially true the more players are connected to the system.\n\n\n# Deployment\n\n## Deploying with Docker and systemd\nCreate a config file `/etc/sysconfig/valheim-server`\n```\nSERVER_NAME=My Server\nSERVER_PORT=2456\nWORLD_NAME=Dedicated\nSERVER_PASS=secret\nSERVER_PUBLIC=true\n```\n\nThen enable the Docker container on system boot\n```\n$ sudo mkdir -p /etc/valheim /opt/valheim\n$ sudo curl -o /etc/systemd/system/valheim.service https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/valheim.service\n$ sudo systemctl daemon-reload\n$ sudo systemctl enable valheim.service\n$ sudo systemctl start valheim.service\n```\n\n## Deploying with docker compose\nCopy and paste the following into your shell\n```\nmkdir -p $HOME/valheim-server/config $HOME/valheim-server/data\ncd $HOME/valheim-server/\ncat > $HOME/valheim-server/valheim.env << EOF\nSERVER_NAME=My Server\nWORLD_NAME=Dedicated\nSERVER_PASS=secret\nSERVER_PUBLIC=true\nEOF\ncurl -o $HOME/valheim-server/docker-compose.yaml https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/docker-compose.yaml\ndocker compose up -d\n```\n\n## Deploying to Kubernetes\nKubernetes manifests using this container image, along with a helm chart, are available from the following repository:\n[https://github.com/Addyvan/valheim-k8s](https://github.com/Addyvan/valheim-k8s)\n\nThe chart is also available directly using:\n```bash\nhelm repo add valheim-k8s https://addyvan.github.io/valheim-k8s/\nhelm repo update\nhelm install valheim-server valheim-k8s/valheim-k8s # see repo for full config\n```\n\n## Deploying to AWS ECS\nCDK Project for spinning up a Valheim game server on AWS Using ECS Fargate and Amazon EFS is available here:\n[https://github.com/rileydakota/valheim-ecs-fargate-cdk](https://github.com/rileydakota/valheim-ecs-fargate-cdk)\n\n## Deploying to Nomad\n```\n$ sudo mkdir -p /var/lib/valheim/{config,data}\n$ sudo curl -o /var/lib/valheim/valheim.nomad https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/valheim.nomad\n$ sudo nomad job run /var/lib/valheim/valheim.nomad\n```\n\n# Updates\nBy default the container will check for Valheim server updates every 15 minutes if no players are currently connected to the server.\nIf an update is found it is downloaded and the server restarted.\nThis update schedule can be changed using the `UPDATE_CRON` environment variable.\n\n\n# Backups\nThe container will on startup and periodically create a backup of the `worlds_local/` directory.\n\nThe default is once per hour but can be changed using the `BACKUPS_CRON` environment variable.\n\nDefault backup directory is `/config/backups/` within the container. A different directory can be set using the `BACKUPS_DIRECTORY` environment variable.\nIt makes sense to have this directory be a volume mount from the host.\nWarning: do not make the backup directory a subfolder of `/config/worlds_local/`. Otherwise each backup will backup all previous backups.\n\nBy default 3 days worth of backups will be kept. A different number can be configured using `BACKUPS_MAX_AGE`. The value is in days.\n\nIt is possible to configure a maximum number of to-be-kept backup files with `BACKUPS_MAX_COUNT`. When going over this limit, the oldest file(s) will be deleted. The default is `0` which means no limit. Note that `BACKUPS_MAX_AGE` will always be respected: if backups get too old, they will be deleted even if `BACKUPS_MAX_COUNT` was not yet reached (or is `0`).\n\nBeware that backups are performed while the server is running. As such files might be in an open state when the backup runs.\nHowever the `worlds_local/` directory also contains a `.db.old` file for each world which should always be closed and in a consistent state.\n\nSee [Copy backups to another location](#copy-backups-to-another-location) for an example of how to copy backups offsite.\n\nIf `BACKUPS_IF_IDLE=false` then backups are only created if there has been recent player activity. Once the last player disconnects\nthere is a grace period `BACKUPS_IDLE_GRACE_PERIOD` in seconds after which backups are still being created. The reason for this is that Valheim\ndedicated server only saves the world in 20 minute intervals and on shutdown. So to make sure that we have a consistent world file backup of\nthe most recent changes we want to wait out one world save. This grace period also needs to be long enough so that our `BACKUPS_CRON` had a chance to run.\n\n`BACKUPS_ZIP=false` can be used to store backups uncompressed in the backup directory. Please note that this will increase the filesize of the backups, due to no compression.\n\n## Manual backup\nSending `SIGHUP` to the `valheim-backup` service or restarting the service will create a backup.\nIf `BACKUPS_IF_IDLE=false` sending `SIGHUP` only creates a backup if there has been recent player activity.\nRestarting `valheim-backup` will always create a backup.\n\nThe PID of the running service can be found in `/var/run/valheim-backup.pid`\n\nAssuming your container's name is `valheim-server` here's how both would work:\n\nSending SIGHUP using `supervisorctl`\n```\ndocker exec -it valheim-server supervisorctl signal HUP valheim-backup\n```\n\nSending SIGHUP manually\n```\ndocker exec -it valheim-server bash -c 'kill -HUP $(< /var/run/valheim-backup.pid)'\n```\n\nRestarting `valheim-backup`\n```\ndocker exec -it valheim-server supervisorctl restart valheim-backup\n```\n\nThe restart can also be done from [the Supervisor web UI](#supervisor).\n![Backup Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/backup1.png \"Backup Step 1\")\n\n\n# Finding Your Server\nOnce the server is up and running and the log says something like\n```\n02/09/2021 10:42:24: Game server connected\n```\nit can still be challenging to actually find the server.\n\nThere are three ways of getting to your server. Either using the Steam server browser, adding the IP manually or using the in-game `Community` server list.\n\n## In-game\nWhen in-game, click on `Join Game` and select `Community`. Wait for the game to load the list of all 4000+ servers.\nOnly 200 servers will be shown at a time so we will have to enter part of our server name to filter the view.\n![in-game server browser](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/find1.png \"in-game server browser\")\n\n### Joining Directly via Hostname/IP\n\nValheim has since added the `Join IP` button to the `Join Game` tab. If you click the `Join IP` button, you are prompted to enter your server's IP address and port number.\nIf you left the `SERVER_PORT` at its default value of `2456`, you do not have to enter the port. The hostname or IP of your server will suffice.\nIf you changed the port, you have to specify it like this: `example.com:3333`.\n\nThis method of connecting to your server will work even if your server is not public (i.e., you set `SERVER_PUBLIC` to `false`).\n\n![in-game server browser with join ip button](./misc/find5.png \"in-game server browser with join ip button\")\n![join ip dialog](./misc/find6.png \"join ip dialog\")\n\n## Steam Server Browser\nWhen using the Steam server browser, in Steam go to `View -> Servers`. Click on `CHANGE FILTERS` and select Game `Valheim`.\nWait for Steam to load all 4000+ Servers then sort the `SERVERS` column by clicking on its title. Scroll down until you find your server.\n![Steam server browser](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/find2.png \"Steam server browser\")\nFrom there you can right-click it and add as a favourite.\n\nNote that in my tests when connecting to the server via the Steam server browser I had to enter the server password twice. Once in Steam and once in-game.\n\n## Steam Server Favorites & LAN Play\nA third option within Steam is to add the server manually by IP. This also allows for LAN play without the need to open or forward any firewall ports.\n\nRemark: LAN-Play is only available for Steam-Version without CrossPlay enabled! See official Valheim Dedicated Server Manual.pdf in the data/server folder.\n\nSteps:\n1) Within Steam click on `View -> Servers`\n2) `FAVORITES`\n3) `ADD SERVER`\n4) Enter Server IP and port+1. So if the server is running on UDP port `2456` enter `ip:2457`\n5) `FIND GAMES AT THIS ADDRESS...`\n6) `ADD SELECTED GAME SERVER TO FAV...`\n\n![Add server manually](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/find3.png \"Add server manually\")\n\nDo not use the `ADD THIS ADDRESS TO FAVORITES` button at this point.\n\nNOTE: Sometimes I will get the following error when trying to connect to a LAN server:\n![Steam Server Browser Error](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/find4.png \"Steam Server Browser Error\")\n\nIn those cases it sometimes helped to add the server again, but this time using port `2456` and now pressing the `ADD THIS ADDRESS TO FAVORITES` button.\nIt will not generate a new entry in the favourites list but seemingly just update the existing one that was originally discovered on port `2457`.\n\nSometimes it also helps to press the `REFRESH` button and then immediately double click on the Server.\n\nOverall LAN play via the Steam Server Browser has been a bit hit and miss for me while online play using the in-game search has resulted in the most consistent success.\n\nNOTE 2: You will only find your Valheim game server using this method if your server is public (`SERVER_PUBLIC` is NOT set to `false`).\nIf you started your server with `SERVER_PUBLIC` set to `false`, you will get the error message: `Server is not responding.` in the list where the servers are supposed to appear.\n\n# Admin Commands\nUpon startup the server will create a file `/config/adminlist.txt`. In it you can list the IDs of all administrator users.\n\nThe ID of a user can be gotten either in-game by pressing ***F2***\n![User ID in-game](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/admin2.png \"User ID in-game\")\n\nor in the server logs when a user connects.\n![User ID in logs](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/admin1.png \"User ID in logs\")\n\nAdministrators can press ***F5*** to open the in-game console and use commands like `ban` and `kick`.\n![Kick a user](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/admin3.png \"Kick a user\")\n\n\n## Enable Admin Console\nIn recent versions of Valheim the game client has to be started with the `-console` flag for ***F5*** to work.\n![Enable Admin Console](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/admin_console1.png \"Enable Admin Console\")\n\n\n# Supervisor\nThis container uses a process supervisor aptly named [`supervisor`](http://supervisord.org/).\nWithin the container processes can be started and restarted using the command `supervisorctl`. For instance `supervisorctl restart valheim-server` would restart the server.\n\nSupervisor provides a very simple http interface which can be optionally turned on by supplying `SUPERVISOR_HTTP=true` and a password in `SUPERVISOR_HTTP_PASS`.\nThe default `SUPERVISOR_HTTP_USER` is `admin` but can be changed to anything else. Once activated the http server will listen on tcp port `9001` which has to be exposed (`-p 9001:9001/tcp`).\n\n![Supervisor](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/supervisor.png \"Supervisor\")\n\n\n## Supervisor API\nIf Supervisor's http server is enabled it also provides an XML-RPC API at `/RPC2`. Details can be found in [the official documentation](http://supervisord.org/api.html).\n\n\n# Status web server\nIf `STATUS_HTTP` is set to `true` the status web server will be started.\nBy default it runs on container port `80` but can be customized using `STATUS_HTTP_PORT`.\n\nThis only works for public Valheim servers (`SERVER_PUBLIC=true`) because private ones do not answer to [Steam server queries](https://developer.valvesoftware.com/wiki/Server_queries).\n\nA `/status.json` will be updated every 10 seconds.\n\nWhenever Valheim server is not yet running the status will contain an error like\n```\n{\n  \"last_status_update\": \"2021-03-07T21:42:46.307232+00:00\",\n  \"error\": \"timeout('timed out')\"\n}\n```\nThe error is just a string representation of whatever Python exception was thrown when trying to connect to the query port (`2457/udp` by default).\n\nOnce the server is running and listening on its UDP ports `/status.json` will contain something like this\n```\n{\n  \"last_status_update\": \"2021-03-07T21:42:16.076662+00:00\",\n  \"error\": null,\n  \"server_name\": \"My Docker based server\",\n  \"server_type\": \"d\",\n  \"platform\": \"l\",\n  \"player_count\": 1,\n  \"password_protected\": true,\n  \"vac_enabled\": false,\n  \"port\": 2456,\n  \"steam_id\": 90143789459088380,\n  \"keywords\": \"0.147.3@0.9.4\",\n  \"game_id\": 892970,\n  \"players\": [\n    {\n      \"name\": \"\",\n      \"score\": 0,\n      \"duration\": 7.000421047210693\n    }\n  ]\n}\n```\nAll the information in `status.json` is fetched from Valheim servers public query port. You will notice that some of the fields like player name or player score currently contain no information. However for completeness the entire query response is left intact.\n\nWithin the container `status.json` is written to `STATUS_HTTP_HTDOCS` which by default is `/opt/valheim/htdocs`. It can either be consumed directly or the user can add their own html/css/js to this directory to read the json data and present it in whichever style they prefer. A file named `index.html` will be shown on `/` if it exists.\n\nAs mentioned all the information is publicly available on the Valheim server query port. However the option is there to configure a `STATUS_HTTP_CONF` (`/config/httpd.conf` by default) containing [busybox httpd config](https://git.busybox.net/busybox/tree/networking/httpd.c) to limit access to the status web server by IP/subnet or login/password.\n\n# Modding\n\nRemark: Some Mods are using RPC commands, which needs gameport+2 for communication (e.g. if you're using gamport 2456, you have to open port 2458 too for the network: 2456-2458:2456-2458/udp) and in your firewall rules (if defined).\n\n## BepInExPack Valheim\n**Enable with**\n| Variable | Value |\n|----------|----------|\n| `BEPINEX` | `true` |\n\n[BepInExPack Valheim](https://valheim.thunderstore.io/package/denikson/BepInExPack_Valheim/) packages [BepInEx](https://github.com/BepInEx/BepInEx) for Valheim. BepInEx is a plugin / modding framework for Unity Mono, IL2CPP and .NET framework games.\nTo enable BepInExPack provide the env variable `BEPINEX=true`. This can not be specified together with `VALHEIM_PLUS=true`.\nJust like Valheim Server this mod is automatically updated using the `UPDATE_CRON` schedule.\n\nUpon first start BepInExPack will create a new directory `/config/bepinex` where its config files are located.\nBepInEx plugins must be copied into the `/config/bepinex/plugins/` directory. From there they will be automatically copied into `/opt/valheim/bepinex/BepInEx/plugins/` on install/update.\n\n### Configuration\nSee [Mod config from Environment Variables](#mod-config-from-environment-variables)\n\n\n## ValheimPlus\n**Enable with**\n| Variable | Value |\n|----------|----------|\n| `VALHEIM_PLUS` | `true` |\n\n[ValheimPlus](https://github.com/valheimPlus/ValheimPlus) is a popular Valheim mod based on BepInEx.\nIt has been incorporated into this container. To enable V+ provide the env variable `VALHEIM_PLUS=true`. This can not be specified together with `BEPINEX=true`.\nUpon first start V+ will create a new directory `/config/valheimplus` where its config files are located.\nAs a user you are mainly concerned with the values in `/config/valheimplus/valheim_plus.cfg`.\nFor most modifications the mod has to be installed both, on the server as well as all the clients that connect to the server.\nA few modifications, like for example changing the `dataRate` can be done server only.\n\n### Updates\nValheimPlus is automatically being updated using the same `UPDATE_CRON` schedule the Valheim server uses to check for updates. If an update of either\nValheim server or ValheimPlus is found it is being downloaded, configured and the server automatically restarted.\nThis also means your clients always need to run the latest ValheimPlus version or will not be able to connect. If this is undesired the schedule could be changed to only check for updates once per day. Example  `UPDATE_CRON='0 6 * * *'` would only check at 6 AM.\n\n### Configuration\nSee [Mod config from Environment Variables](#mod-config-from-environment-variables)\n\n#### Disable server password\nAnother popular mod for LAN play that does not require the clients to run ValheimPlus is to turn off password authentication.\n\nTo do so enable ValheimPlus (`VALHEIM_PLUS=true`), set an empty password (`SERVER_PASS=\"\"`), make the server non-public (`SERVER_PUBLIC=false`) and configure the following section in `/config/valheimplus/valheim_plus.cfg`\n```\n[Server]\nenabled=true\nenforceMod=false\ndisableServerPassword=true\n```\nAlternatively start with `-e VPCFG_Server_enabled=true -e VPCFG_Server_enforceMod=false -e VPCFG_Server_disableServerPassword=true`.\n\nEnsure that the server can not be accessed from the public Internet. If you like to have the LAN experience but over the Internet I can highly recommend [ZeroTier](https://www.zerotier.com/). It is an open source VPN service where you can create a virtual network switch that you and your friends can join. It is like Hamachi but free and open source. They do have a paid product for Businesses with more than 50 users. So for more than 50 users you could either get their Business product or alternatively would have to host the VPN controller yourself.\n\n\n# Changing startup CMD in Portainer\n\nPortainer retains the startup CMD from the first time the container ist deployed. This is also true if the container is updated using \"Recreate\" in combination with \"Pull latest image\".\n\nRecent changes made it so that the startup CMD of the image was changed. To avoid recreating the container from scratch you can use the \"Duplicate/Edit\" function of Portainer by following the instructions outlined below.\n\n![Portainer Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/portainer_step1.png \"Portainer Step 1\")\n\nStop the old container (1) and edit the name (2)\n\n![Portainer Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/portainer_step2.png \"Portainer Step 2\")\n\nAppend `_old` or similar to the name (3) save the change (4) and click \"Duplicate/Edit\" (5)\n\n![Portainer Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/portainer_step3.png \"Portainer Step 3\")\n\nChange the name back to original name (2) (3) (4).\n\nUnter Advanced container settings override (6) the command and enter `/usr/local/sbin/bootstrap` (7)\n\nMake sure \"Always pull the image\" is enabled.\n\nclick \"Deploy the container\" to finish.\n\nIf your server starts and is working delete the old unused image and the old container.\n\n# Synology Help\n## First install\nThis is not an extensive tutorial, but I hope these screenshots can be helpful.\nBeware that the server can use multiple GB of RAM and produces a lot of CPU load.\n\n![Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step1.png \"Step 1\")\n![Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step2.png \"Step 2\")\n![Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step3.png \"Step 3\")\n![Step 4](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step4.png \"Step 4\")\n![Step 5](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step5.png \"Step 5\")\n![Step 6](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step6.png \"Step 6\")\n![Step 7](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step7.png \"Step 7\")\n![Step 8](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/step8.png \"Step 8\")\n\n## Updating the container image to the latest version\nThe process of updating the image clears all data stored inside the container. So before doing a container image upgrade, make absolutely sure that `/config`, which contains your world, is an external volume stored on your NAS (Step 4 of the [First install](#first-install) process). It is also a good idea to copy the latest version of the world backup to another location, like your PC.\n![Update Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update1.png \"Update Step 1\")\n![Update Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update2.png \"Update Step 2\")\n![Update Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update3.png \"Update Step 3\")\n![Update Step 4](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update4.png \"Update Step 4\")\n![Update Step 5](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update5.png \"Update Step 5\")\n![Update Step 6](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/update6.png \"Update Step 6\")\n\n### Error after download of new container image\nIf you are getting the following error after an Update:\n![Error Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/synology_upgrade_error1.png \"Error Step 1\")\n\n![Error Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/synology_upgrade_error2.png \"Error Step 2\")\n```\n\"Failure: OCI runtime create failed: container_linux.go:367: [...]\"\n```\n\nYou will need to remove the container completely and perform the [First install](#first-install) steps again.\n![Error Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/synology_upgrade_error3.png \"Error Step 3\")\n\nMake sure to use the same folder settings as before so the existing `/config` and `/opt/valheim` directories are used.\n\nThe error is caused by Synology using the old image's `CMD` with the newly downloaded image. By removing the container and recreating it we're forcing Synology to use the new images `CMD`.\n\n# QNAP NAS Help\n## Creating container\n\nAs a prerequisite you need to create a folder where you will keep your saves, backups and configuration.\n\nHere is an example `docker-compose.yaml` file that we will use in the next steps.\n```yaml\nservices:\n  valheim:\n    image: lloesche/valheim-server\n    cap_add:\n      - sys_nice\n    volumes:\n      - /share/CACHEDEV1_DATA/{path_to_folder}/config:/config\n      - /share/CACHEDEV1_DATA/{path_to_folder}/data:/opt/valheim\n    ports:\n      - \"2456-2457:2456-2457/udp\"\n      - \"9001:9001/tcp\"\n    env_file:\n      - /share/CACHEDEV1_DATA/{path_to_folder}/valheim.env\n    restart: always\n    stop_grace_period: 2m\n    deploy:\n      resources:\n        limits:\n          cpus: '0.70'\n          memory: 4gb\n```\n\nThe most important part is `/share/CACHEDEV1_DATA/{path_to_folder}/config`. You need to replace **{path_to_folder}** with the folder path where you want to store data and configuration for your Valheim server.\n\nChange your memory and cpu limit according to your available resources on QNAP. Current settings are 70% of single CPU and 4gb of RAM.\n\nIn this folder you need to create a file `valheim.env` to store configuration variables. \n\nExample `valheim.env`:\n\n```\nSERVER_NAME=My Server\nWORLD_NAME=Dedicated\nSERVER_PASS=secret\nSERVER_PUBLIC=true\n```\n\n\n![Qnap Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_create_button.png \"Qnap Step 1\")\n\n![Qnap Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_create_application.png \"Qnap Step 2\")\n\n![Qnap Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_create_yaml.png \"Qnap Step 3\")\n\n\n\n## Updating image\n\n![Qnap update Step 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_update_resources.png \"Qnap update Step 1\")\n\n![Qnap update Step 2](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_update_button.png \"Qnap update Step 2\")\n\nIn the image name you have to specify the image from the container definition `lloesche/valheim-server`.\n\n![Qnap update Step 3](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_update_pull.png \"Qnap update Step 3\")\n\nAfter the image is downloaded restart the container. As you can see the old image is now unused and the new one is in use by the container. You can now safely delete the old image.\n\n![Qnap update Step 4](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/qnap_update_images.png \"Qnap update Step 4\")\n\n\n## QNAP ZFS issue\nWe have had [a report from a QNAP user](https://github.com/lloesche/valheim-server-docker/issues/275) where Steam failed when using ZFS as the backing filesystem with the following error\n```\nvalheim-updater [ 0%] !!! Fatal Error: Steamcmd needs 250MB of free disk space to update.\nvalheim-updater src/tier0/threadtools.cpp (3553) : Assertion Failed: Illegal termination of worker thread 'Thread(0x0x58a1d8f0/0x0xf7780b'\n```\nThis appears to be due to a bad Steam/ZFS interaction akin to [this Steam bug](https://github.com/ValveSoftware/steam-for-linux/issues/4982) where very large ZFS volumes get interpreted as very small due to bad overflow handling. There are two workarounds available. Use a non-ZFS volume, or set a quota on the volume, e.g.:\n\n1. Connect to the QNAP SSH console.\n2. Get the ZFS volume ID from within the container\n```\ndf /opt/valheim | tail -n 1 | awk '{ print $1 }'\n```\n3. Set the quota to 2TB or less from the QNAP SSH console:\n```\nzfs set quota=1TB \"volume_id_here\"\n```\n\nYou could also try this one-liner from the SSH console:\n```\nCONTAINER=\"your_valheim_container name/id\" \\\n  docker exec -t \"$CONTAINER\" df /opt/valheim | tail -n 1 | awk '{ print $1 }' | \\\n  xargs -I zfs_id sudo zfs set quota=1TB zfs_id\n```\n\nIf you have access to a QNAP NAS running ZFS and can reproduce/debug this issue further, please open a new issue with your findings so we can update this section and provide more information here.\n\n\n# OpenMediaVault Help\n## Permission denied error\nIf you are running this container in Portainer on a OpenMediaVault NAS and getting the following error\n```\nvalheim-server /usr/local/bin/valheim-server: line 110: /opt/valheim/server/valheim_server.x86_64: Permission denied\n```\n\nthe cause is that the container's filesystem is mounted with the `noexec` flag. Meaning no files are allowed to be executed on that filesystem.\n\nSee [this page](https://openmediavault.readthedocs.io/en/5.x/various/fs_env_vars.html) for detailed information on how to disable noexec for newly created and existing filesystems.\n\nFor existing filesystems edit `/etc/openmediavault/config.xml` and remove the `noexec` option from the filesystem in question. The file should look something like this\n\n![OMV 1](https://raw.githubusercontent.com/lloesche/valheim-server-docker/main/misc/omv1.png \"OMV Step 1\")\n\n\n# License\nCopyright 2021 [Lukas Lösche](mailto:lukas@opensourcery.de)  \n  \nLicensed under the Apache License, Version 2.0 (the \"License\");  \nyou may not use this file except in compliance with the License.  \nYou may obtain a copy of the License at  \n  \n&nbsp;&nbsp;&nbsp;&nbsp;[http://www.apache.org/licenses/LICENSE-2.0](http://www.apache.org/licenses/LICENSE-2.0)  \n  \nUnless required by applicable law or agreed to in writing, software  \ndistributed under the License is distributed on an \"AS IS\" BASIS,  \nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  \nSee the License for the specific language governing permissions and  \nlimitations under the License.\n\n# Legal disclaimer\nThis Docker container is not endorsed by, directly affiliated with, maintained, authorized, or sponsored by [Iron Gate Studio](https://irongatestudio.se/).  \n[Valheim](https://www.valheimgame.com/), [Valheim dedicated server](https://steamcommunity.com/app/896660/) and [the Valheim Logo](https://irongatestudio.se/onewebmedia/ValheimPresskit.zip) are © 2021 Iron Gate Studio.\n"
        },
        {
          "name": "bepinex-updater",
          "type": "blob",
          "size": 1.087890625,
          "content": "#!/bin/bash\n# bepinex-updater is being called by\n# valheim-updater when $BEPINEX=true\n# It downloads the BepInExPack mod and merges\n# the downloaded archive with the vanilla\n# Valheim server into /opt/valheim/bepinex\n\n# Include defaults and common functions\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\n\nmain() {\n    local api_response\n    local download_url\n    local remote_updated_at\n\n    if ! api_response=$(curl -sfSL -H \"accept: application/json\" \"https://thunderstore.io/api/experimental/package/denikson/BepInExPack_Valheim/\"); then\n        fatal \"Error: could not retrieve BepInEx release info from Thunderstore.io API\"\n    fi\n    download_url=$(jq -r  \".latest.download_url\" <<< \"$api_response\" )\n    remote_updated_at=$(jq -r  \".date_updated\" <<< \"$api_response\" )\n\n    check_for_mod_update \\\n        \"$download_url\" \\\n        \"$remote_updated_at\" \\\n        \"$bepinex_zipfile\" \\\n        \"$bepinex_mergefile\" \\\n        \"$bepinex_download_path\" \\\n        \"$bepinex_config_path\" \\\n        \"extracted/BepInExPack_Valheim\" \\\n        \"$bepinex_install_path\" \\\n        \"BepInEx\"\n}\n\n\nmain\n"
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 4.3125,
          "content": "#!/bin/bash\n# Bootstraps supervisor config\n\n# Include defaults\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\n\nmain() {\n    apply_permissions\n    configure_timezone\n    setup_syslog\n    setup_supervisor_http_server\n    setup_status_http_server\n    pre_supervisor_hook\n    exec /usr/local/bin/supervisord -c /usr/local/etc/supervisord.conf\n}\n\n\n# Apply user id and group id\napply_permissions() {\n    info \"Setting uid:gid of valheim to $PUID:$PGID\"\n    groupmod -g \"${PGID}\" -o valheim\n    #usermod -u \"${PUID}\" -o -g valheim valheim\n    sed -i -E \"s/^(valheim:x):[0-9]+:[0-9]+:(.*)/\\\\1:$PUID:$PGID:\\\\2/\" /etc/passwd\n\n    touch \"$SERVER_STATUS_FILE\"\n\n    chown -R valheim:valheim \\\n        /config \\\n        /opt/valheim \\\n        /opt/steamcmd \\\n        /home/valheim \\\n        /var/run/valheim \\\n        \"$SERVER_STATUS_FILE\"\n    chgrp valheim /usr/local/etc/supervisord.conf\n}\n\n\n# Configure timezone\nconfigure_timezone() {\n    export TZ\n    if [ ! -f \"/usr/share/zoneinfo/$TZ\" ]; then\n        warn \"Unknown timezone $TZ - defaulting to Etc/UTC\"\n        TZ=\"Etc/UTC\"\n    fi\n    ln -snf \"/usr/share/zoneinfo/$TZ\" /etc/localtime\n    echo \"$TZ\" > /etc/timezone\n    info \"Setting timezone $TZ\"\n}\n\n\n# Configure syslog\nsetup_syslog() {\n    local SYSLOG_ARGS\n    local log_msg\n    SYSLOG_ARGS=\"-S -t -O -\"\n\n    log_target_msg=\"stdout\"\n    if [ -n \"$SYSLOG_REMOTE_HOST\" ]; then\n        SYSLOG_ARGS=\"$SYSLOG_ARGS -R $SYSLOG_REMOTE_HOST:$SYSLOG_REMOTE_PORT\"\n        log_target_msg=\"$SYSLOG_REMOTE_HOST:$SYSLOG_REMOTE_PORT\"\n        if [ \"$SYSLOG_REMOTE_AND_LOCAL\" = true ]; then\n            SYSLOG_ARGS=\"$SYSLOG_ARGS -L\"\n            log_target_msg=\"$log_target_msg and stdout\"\n        fi\n    fi\n    info \"Setting up syslogd - logging to $log_target_msg\"\n    cat > \"$supervisor_syslog_conf\" <<EOF\n[program:syslogd]\nuser=root\nenvironment=HOME=\"/root\",USER=\"root\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/sbin/syslogd -n $SYSLOG_ARGS\nstdout_logfile=/dev/stdout\nstdout_logfile_maxbytes=0\nstderr_logfile=/dev/stderr\nstderr_logfile_maxbytes=0\nautostart=true\nautorestart=true\npriority=10\nEOF\n}\n\n\n# Enable/disable supervisor http server\nsetup_supervisor_http_server() {\n    rm -f \"$supervisor_http_server_conf\"\n    if [ \"$SUPERVISOR_HTTP\" = true ]; then\n        info \"Supervisor http server activated\"\n        cat > \"$supervisor_http_server_conf\" <<EOF\n[inet_http_server]\nport = :$SUPERVISOR_HTTP_PORT\nEOF\n        chmod 600 \"$supervisor_http_server_conf\"\n        if [ -n \"$SUPERVISOR_HTTP_USER\" ] && [ -n \"$SUPERVISOR_HTTP_PASS\" ]; then\n            cat >> \"$supervisor_http_server_conf\" <<EOF\nusername = $SUPERVISOR_HTTP_USER\npassword = $SUPERVISOR_HTTP_PASS\nEOF\n        fi\n    fi\n}\n\n\n# Enable/disable status http server\nsetup_status_http_server() {\n    rm -f \"$status_http_server_conf\"\n    rm -f \"$status_http_server_updater_conf\"\n    if [ \"$STATUS_HTTP\" = true ]; then\n        info \"Status http server activated\"\n        touch \"$STATUS_HTTP_CONF\"\n        mkdir -p \"$STATUS_HTTP_HTDOCS\"\n        if [ ! -d \"$STATUS_HTTP_HTDOCS\" ]; then\n            error \"Could not create directory $STATUS_HTTP_HTDOCS\"\n            return\n        fi\n        cat > \"$status_http_server_conf\" <<EOF\n[program:valheim-status-httpd]\nuser=root\nenvironment=HOME=\"/root\",USER=\"root\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/httpd -f -p \"$STATUS_HTTP_PORT\" -h \"$STATUS_HTTP_HTDOCS\" -c \"$STATUS_HTTP_CONF\"\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=0\npriority=80\nEOF\n        chmod 600 \"$status_http_server_conf\"\n        cat > \"$status_http_server_updater_conf\" <<EOF\n[program:valheim-status-updater]\nuser=root\nenvironment=HOME=\"/root\",USER=\"root\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/valheim-status --update\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=true\nautorestart=true\nstartsecs=10\nstartretries=0\npriority=70\nEOF\n        chmod 600 \"$status_http_server_updater_conf\"\n    fi\n}\n\n\npre_supervisor_hook() {\n    if [ -n \"$PRE_SUPERVISOR_HOOK\" ]; then\n        info \"Running pre supervisor hook: $PRE_SUPERVISOR_HOOK\"\n        eval \"$PRE_SUPERVISOR_HOOK\"\n    fi\n}\n\n\nmain\n"
        },
        {
          "name": "common",
          "type": "blob",
          "size": 17.0556640625,
          "content": "#!/bin/bash\n# trap SIGUSR1 as it is being used to check\n# for process aliveness when an existing\n# pidfile is found\ntrap ':' USR1\njust_started=${just_started:-true}\n\n# We are creating the following directory structure\n# /opt/valheim/\n#         |___/dl/            <= downloads happen in here\n#         |     |___/server/  <= vanilla server download\n#         |     |___/plus/    <= ValheimPlus mod download\n#         |___/server/        <= vanilla server installation\n#         |___/plus/          <= merge of vanilla server and ValheimPlus mod\n#\nvalheim_download_path=/opt/valheim/dl/server    # Valheim server download directory\nvalheim_install_path=/opt/valheim/server        # Valheim server installation directory\nvalheim_restartfile=\"/tmp/valheim.restart\"      # Signaling file created by valheim-updater\n                                                # or valheim-plus-updater that describes\n                                                # if and how to restart the server\n\n# ValheimPlus Mod\nvp_updater=/usr/local/bin/valheim-plus-updater\nvp_download_path=/opt/valheim/dl/plus           # ValheimPlus download directory\nvp_install_path=/opt/valheim/plus               # ValheimPlus installation directory\nvp_zipfile=UnixServer.zip                       # Name of the ValheimPlus archive\nvp_mergefile=\"$vp_download_path/merge\"          # Signaling file created by valheim-updater\n                                                # that tells valheim-plus-updater that Valheim\n                                                # server was updated and needs to be merged\n                                                # with ValheimPlus\nvp_config_path=\"/config/valheimplus\"\n\n# BepInEx Mod\nbepinex_updater=/usr/local/bin/bepinex-updater\nbepinex_download_path=/opt/valheim/dl/bepinex    # BepInEx download directory\nbepinex_install_path=/opt/valheim/bepinex        # BepInEx installation directory\nbepinex_config_path=\"/config/bepinex\"\nbepinex_mergefile=\"$bepinex_download_path/merge\" # Signaling file created by valheim-updater\n                                                 # that tells bepinex-updater that Valheim\n                                                 # server was updated and needs to be merged\n                                                 # with BepInEx\nbepinex_zipfile=BepInEx.zip                      # Name of the BepInEx archive\n\n# Collection of PID files\nvalheim_server_pidfile=/var/run/valheim/valheim-server.pid\nvalheim_updater_pidfile=/var/run/valheim/valheim-updater.pid\nvalheim_backup_pidfile=/var/run/valheim/valheim-backup.pid\n\n# Supervisor config files\nsupervisor_http_server_conf=/usr/local/etc/supervisor/conf.d/http_server.conf\n\n# Status httpd config files\nstatus_http_server_conf=/usr/local/etc/supervisor/conf.d/status_http_server.conf\nstatus_http_server_updater_conf=/usr/local/etc/supervisor/conf.d/status_http_server_updater.conf\n\n# Commands\ncmd_valheim_status=/usr/local/bin/valheim-status\ncmd_valheim_is_idle=/usr/local/bin/valheim-is-idle\ncmd_valheim_logfilter=/usr/local/bin/valheim-logfilter\ncmd_supervisorctl=/usr/local/bin/supervisorctl\n\n# Syslog supervisor config file\nsupervisor_syslog_conf=/usr/local/etc/supervisor/conf.d/syslog.conf\n\n\n# File containing the git commit shasum this image was build with\ngit_commit_file=/usr/local/etc/git-commit.HEAD\n\n# Worlds directories\nold_worlds_dir=\"/config/worlds\"\nworlds_dir=\"/config/worlds_local\"\n\n# log levels\ndebug=50\ninfo=40\nwarn=30\nerror=20\ncritical=10\nfatal=5\nlog_level=${log_level:-$debug}\n\n\ndebug()    { logstd $debug    \"DEBUG - [$$] - $*\"; }\ninfo()     { logstd $info     \"INFO - $*\"; }\nwarn()     { logstd $warn     \"WARN - $*\"; }\nerror()    { logerr $error    \"ERROR - $*\"; }\ncritical() { logerr $critical \"CRITIAL - $*\"; }\nfatal()    { logerr $fatal    \"FATAL - $*\"; exit 1; }\n\n\nlogstd() {\n    local log_at_level\n    log_at_level=\"$1\"; shift\n    printline \"$log_at_level\" \"$*\"\n}\n\n\nlogerr() {\n    local log_at_level\n    log_at_level=\"$1\"; shift\n    printline \"$log_at_level\" \"$*\" >&2\n}\n\n\nprintline() {\n    local log_at_level\n    local log_data\n    log_at_level=\"$1\"; shift\n    log_data=\"$*\"\n\n    if [ \"$log_at_level\" -le \"$log_level\" ]; then\n        echo \"$log_data\"\n    fi\n}\n\n\nensure_permissions() {\n    local restore_errexit=false\n    if [ -o errexit ]; then\n        restore_errexit=true\n        set +e\n    fi\n    chmod \"$CONFIG_DIRECTORY_PERMISSIONS\" /config\n    chmod -f \"$CONFIG_FILE_PERMISSIONS\" /config/*.txt\n    # Legacy worlds directory\n    if [ -d \"$old_worlds_dir\" ]; then\n        chmod \"$WORLDS_DIRECTORY_PERMISSIONS\" \"$old_worlds_dir\"\n        chmod \"$WORLDS_FILE_PERMISSIONS\" \"${old_worlds_dir}/\"*\n    fi\n    if [ -d \"$worlds_dir\" ]; then\n        chmod \"$WORLDS_DIRECTORY_PERMISSIONS\" \"$worlds_dir\"\n        chmod \"$WORLDS_FILE_PERMISSIONS\" \"${worlds_dir}/\"*\n    fi\n    if [ \"$VALHEIM_PLUS\" = true ] && [ -d /config/valheimplus ]; then\n        find /config/valheimplus -type d -exec chmod \"$VALHEIM_PLUS_CONFIG_DIRECTORY_PERMISSIONS\" \"{}\" +\n        find /config/valheimplus -type f -exec chmod \"$VALHEIM_PLUS_CONFIG_FILE_PERMISSIONS\" \"{}\" +\n    fi\n    if [ \"$BEPINEX\" = true ] && [ -d /config/bepinex ]; then\n        find /config/bepinex -type d -exec chmod \"$BEPINEX_CONFIG_DIRECTORY_PERMISSIONS\" \"{}\" +\n        find /config/bepinex -type f -exec chmod \"$BEPINEX_CONFIG_FILE_PERMISSIONS\" \"{}\" +\n    fi\n    if [ \"$restore_errexit\" = true ]; then\n        set -e\n    fi\n}\n\n\n_udp_datagram_count() {\n    local datagram_count\n    datagram_count=\"$(nstat | awk '/UdpInDatagrams/{print $2}' | tr -d ' ')\"\n    echo \"${datagram_count:-0}\"\n}\n\n\nserver_is_crossplay() {\n    [[ \"${SERVER_ARGS,,}\" =~ \"-crossplay\" ]];\n}\n\n\nserver_is_idle() {\n    # If server has crossplay enabled, A2S query performed by valheim-status always\n    # returns 0 players online. So we use nstat to count UDP datagrams instead.\n    if server_is_crossplay || [ \"$SERVER_PUBLIC\" = 0 ]; then\n        # Throw away datagram statistics since last run\n        _udp_datagram_count &>/dev/null\n        # Wait to track datagrams over window\n        sleep \"$IDLE_DATAGRAM_WINDOW\"\n        if [ \"$(_udp_datagram_count)\" -gt \"$IDLE_DATAGRAM_MAX_COUNT\" ]; then\n            return 1\n        else\n            return 0\n        fi\n    else\n        \"$cmd_valheim_status\" > /dev/null 2>&1\n    fi\n}\n\n\nserver_is_running() {\n    test \"$(supervisorctl status valheim-server | awk '{print $2}')\" = RUNNING\n}\n\n\nserver_is_listening() {\n    # Check if server is listening on either server or query port\n    # since crossplay-enabled servers don't listen on $SERVER_PORT\n    \n    awk -v server_port=\"$SERVER_PORT\" -v server_query_port=\"$SERVER_QUERY_PORT\" '\n        BEGIN {\n            exit_code = 1\n        }\n        {\n            if ($1 ~ /^[0-9]/) {\n                split($2, local_bind, \":\")\n                listening_port = sprintf(\"%d\", \"0x\" local_bind[2])\n                if (listening_port == server_query_port || listening_port == server_port) {\n                    exit_code = 0\n                    exit\n                }\n            }\n        }\n        END {\n            exit exit_code\n        }\n    ' /proc/net/udp*\n}\n\n\ncheck_lock() {\n    local pidfile\n    local predecessor_pid\n    local numre\n    pidfile=$1\n    predecessor_pid=$(<\"$pidfile\")\n    numre='^[0-9]+$'\n    if [[ \"$predecessor_pid\" =~ $numre ]] ; then\n        debug \"Sending SIGUSR1 to PID $predecessor_pid\"\n        if kill -USR1 \"$predecessor_pid\" &> /dev/null; then\n            fatal \"Process with PID $predecessor_pid already running - exiting\"\n        else\n            info \"Removing stale PID file and starting run\"\n            clear_lock_and_run \"$pidfile\"\n        fi\n    else\n        warn \"Predecessor PID is corrupt - clearing lock and running\"\n        clear_lock_and_run \"$pidfile\"\n    fi\n}\n\n\nclear_lock_and_run() {\n    local pidfile\n    pidfile=$1\n    clear_lock \"$pidfile\"\n    main\n}\n\n\nclear_lock() {\n    local pidfile\n    pidfile=$1\n    info \"Releasing PID file $pidfile\"\n    rm -f \"$1\"\n}\n\n\nerror_handler() {\n    local ec\n    local line_no\n    local func_call_line\n    local command\n    local stack\n    ec=$1\n    line_no=$2\n    func_call_line=$3\n    command=\"$4\"\n    stack=\"$5\"\n    error \"Error in line $line_no command '$command' exited with code $ec in $stack called in line $func_call_line\"\n    return \"$ec\"\n}\n\n\nwrite_valheim_plus_config() {\n    if [ -d \"$vp_config_path\" ]; then\n        debug \"Writing ValheimPlus config\"\n        if env | grep \"^$VALHEIM_PLUS_CFG_ENV_PREFIX\" > /dev/null; then\n            /usr/local/bin/env2cfg --verbose --config \"$vp_config_path/valheim_plus.cfg\" --env-prefix \"$VALHEIM_PLUS_CFG_ENV_PREFIX\"\n        fi\n    fi\n}\n\n\nwrite_bepinex_config() {\n    local config_path=$1\n    local plugins_path=$2\n    if [ -n \"$PRE_BEPINEX_CONFIG_HOOK\" ]; then\n        info \"Running pre BepInEx config hook: $PRE_BEPINEX_CONFIG_HOOK\"\n        eval \"$PRE_BEPINEX_CONFIG_HOOK\"\n    fi\n    if [ -d \"$config_path\" ]; then\n        debug \"Writing BepInEx config\"\n        if env | grep \"^$BEPINEX_CFG_ENV_PREFIX\" > /dev/null; then\n            /usr/local/bin/env2cfg --verbose --config \"$config_path/BepInEx.cfg\" --env-prefix \"$BEPINEX_CFG_ENV_PREFIX\"\n        fi\n        if [ -d \"$config_path/plugins\" ] && [ -d \"$plugins_path\" ]; then\n            info \"Syncing BepInEx plugins from $config_path/plugins/ -> $plugins_path\"\n            rsync -a --itemize-changes \"$config_path/plugins/\" \"$plugins_path\"\n        fi\n    fi\n    if [ -n \"$POST_BEPINEX_CONFIG_HOOK\" ]; then\n        info \"Running post BepInEx config hook: $POST_BEPINEX_CONFIG_HOOK\"\n        eval \"$POST_BEPINEX_CONFIG_HOOK\"\n    fi\n}\n\n\nwrite_restart_file() {\n    local mode\n    local reason\n    reason=$1\n    if [ \"$just_started\" = true ] && [ \"$reason\" = just_started ]; then\n        mode=\"start\"\n    else\n        mode=\"restart\"\n    fi\n    if [ ! -f \"$valheim_restartfile\" ]; then\n        debug \"Writing file to $mode Valheim server\"\n        echo \"$mode\" > \"$valheim_restartfile\"\n    fi\n}\n\n\nupdate_server_status() {\n    local status\n    status=$1\n    echo \"$status\" > \"$SERVER_STATUS_FILE\"\n}\n\n\nwrite_bannedlist() {\n    write_serverlist banned \"$BANNEDLIST_IDS\"\n}\n\n\nwrite_adminlist() {\n    write_serverlist admin \"$ADMINLIST_IDS\"\n}\n\n\nwrite_permittedlist() {\n    write_serverlist permitted \"$PERMITTEDLIST_IDS\"\n}\n\n\nwrite_serverlist() {\n    local type\n    local id_list\n    local list_file\n    type=$1\n    id_list=$2\n    list_file=\"/config/${type}list.txt\"\n\n    if [ -n \"$id_list\" ]; then\n        debug \"Writing $list_file\"\n        # Retain original file comment, including weird double space\n        echo \"// List $type players ID  ONE per line\" > \"$list_file\"\n        # shellcheck disable=SC2001\n        echo \"$id_list\" | sed -e \"s/ \\\\+/\\\\n/g\" >> \"$list_file\"\n    fi\n}\n\n\nextract_archive() {\n    local archive_path=\"$1\"\n    local archive_file=\"$2\"\n    cd \"$archive_path\" || fatal \"Could not cd $archive_path\"\n    debug \"Extracting downloaded ZIP archive\"\n    rm -rf extracted\n    mkdir -p extracted\n    unzip -d extracted/ \"$archive_file\"\n}\n\n\ndownload_mod() {\n    local download_url=\"$1\"\n    local updated_at=\"$2\"\n    local download_path=\"$3\"\n    debug \"Downloading $download_url to $download_path\"\n    curl -sfSL -o \"$download_path\" \"$download_url\" \\\n        && echo \"$updated_at\" > \"$download_path.updated_at\"\n}\n\n\ncheck_merge() {\n    local mergefile=$1\n    local download_path=$2\n    local zipfile=$3\n    local install_path=$4\n    local config_path=$5\n    local extraction_path=$6\n    local mod_name=$7\n\n    # The control file $mergefile is either created\n    # in prepare_mod() if the mod is being installed for\n    # the first time or an update is available, or\n    # it is created by valheim-updater if a Valheim server update\n    # was downloaded and the mod needs to be applied to it.\n    if [ -f \"$mergefile\" ]; then\n        info \"Valheim dedicated server or $mod_name mod got updated - extracting and merging installation files\"\n        (set -e; extract_archive \"$download_path\" \"$zipfile\" && merge_mod \"$install_path\" \"$config_path\" \"$download_path/$extraction_path\")\n        # shellcheck disable=SC2181\n        if [ $? -eq 0 ]; then\n            debug \"Successfully installed $mod_name mod\"\n            cp -f \"$zipfile.updated_at\" \"$zipfile.installed_at\"\n            rm -f \"$mergefile\"\n        else\n            error \"Failed to extract and install $mod_name - retrying later\"\n        fi\n    fi\n}\n\n\nprepare_mod() {\n    local download_url=\"$1\"\n    local updated_at=\"$2\"\n    local mergefile=\"$3\"\n    local zipfile=\"$4\"\n    download_mod \"$download_url\" \"$updated_at\" \"$zipfile\" \\\n    && touch \"$mergefile\"\n}\n\n\nmerge_mod() {\n    local mod_install_path=\"$1\"\n    local mod_config_path=\"$2\"\n    local mod_download_path=\"$3\"\n    local config_file\n    local pkg_config_dir\n    local dest_file\n    mod_config_path=${mod_config_path%/}\n    mod_download_path=${mod_download_path%/}\n    debug \"Merging Valheim server and mod\"\n    # remove any old install directories\n    rm -rf \"$mod_install_path.tmp\" \"$mod_install_path.old\"\n    # create a new install directory where we will stage the new version\n    mkdir -p \"$mod_install_path.tmp\"\n    # rsync all Valheim dedicated server files\n    rsync -a --itemize-changes --exclude server_exit.drp --exclude steamapps \"$valheim_download_path/\" \"$mod_install_path.tmp\"\n    # rsync all mod files on top of the dedicated server files\n    rsync -a --itemize-changes \"$mod_download_path/\" \"$mod_install_path.tmp\"\n    # if /config/<modname>/ does not exist copy the default config from the ZIP archive\n    debug \"Ensuring $mod_config_path/plugins exists\"\n    mkdir -p \"$mod_config_path/plugins\"\n    pkg_config_dir=\"$mod_install_path.tmp/BepInEx/config\"\n    if [ -d \"$pkg_config_dir\" ]; then\n        cd \"$pkg_config_dir\" || fatal \"Could not cd $pkg_config_dir\"\n        for config_file in *; do\n            dest_file=\"$mod_config_path/$config_file\"\n            debug \"Storing $config_file as $dest_file.default\"\n            # always copy the configs that came with the latest ZIP archive to .cfg.default\n            cp -f \"$config_file\" \"$dest_file.default\"\n            if [ ! -f \"$dest_file\" ]; then\n                debug \"Config $dest_file does not exist - copying from archive\"\n                cp -f \"$config_file\" \"$dest_file\"\n            fi\n            if [ \"$config_file\" = \"valheim_plus.cfg\" ]; then\n                write_valheim_plus_config\n            elif [ \"$config_file\" = \"BepInEx.cfg\" ]; then\n                write_bepinex_config \"$mod_config_path\" \"$mod_install_path.tmp/BepInEx/plugins\"\n            fi\n        done\n        cd - || fatal \"Could not cd -\"\n    fi\n    # ensure config file permissions\n    ensure_permissions\n    # remove the config folder within the server directory and symlink it to /config\n    debug \"Removing $pkg_config_dir and symlinking from $mod_config_path\"\n    rm -rf \"$pkg_config_dir\"\n    ln -s \"$mod_config_path\" \"$pkg_config_dir\"\n    # move an existing copy of ValheimPlus to the .old extension\n    if [ -d \"$mod_install_path\" ]; then\n        debug \"Moving old $mod_install_path -> $mod_install_path.old\"\n        mv -f \"$mod_install_path\" \"$mod_install_path.old\"\n    fi\n    # move the staging folder to the live folder and signal valheim-updater to restart the server\n    debug \"Moving $mod_install_path.tmp -> $mod_install_path\"\n    mv \"$mod_install_path.tmp\" \"$mod_install_path\"\n    write_restart_file updated\n}\n\n\ncheck_for_mod_update() {\n    local download_url=\"$1\"\n    local remote_updated_at=\"$2\"\n    local zipfile=\"$3\"\n    local mergefile=\"$4\"\n    local download_path=\"$5\"\n    local config_path=\"$6\"\n    local extraction_path=\"$7\"\n    local install_path=\"$8\"\n    local mod_name=\"$9\"\n    local local_updated_at\n    local local_installed_at\n\n    mkdir -p \"$download_path\" \"$install_path\"\n    cd \"$download_path\" || fatal \"Could not cd $download_path\"\n    if [ -f \"$zipfile\" ] && [ -f \"$zipfile.updated_at\" ] && [ -f \"$zipfile.installed_at\" ]; then\n        local_updated_at=$(< \"$zipfile.updated_at\")\n        local_installed_at=$(< \"$zipfile.installed_at\")\n        if [ \"$local_updated_at\" = \"$remote_updated_at\" ] && [ \"$local_updated_at\" = \"$local_installed_at\" ]; then\n            debug \"Local $mod_name archive is identical to remote archive and was successfully installed - no update required\"\n        else\n            info \"Local $mod_name archive with update date $local_updated_at differs from remote date $remote_updated_at or failed to successfully install - updating\"\n            prepare_mod \"$download_url\" \"$remote_updated_at\" \"$mergefile\" \"$download_path/$zipfile\"\n        fi\n    else\n        info \"Fresh $mod_name install\"\n        prepare_mod \"$download_url\" \"$remote_updated_at\" \"$mergefile\" \"$download_path/$zipfile\"\n    fi\n\n    check_merge \"$mergefile\" \"$download_path\" \"$zipfile\" \"$install_path\" \"$config_path\" \"$extraction_path\" \"$mod_name\"\n}\n\n\niec_size_format() {\n    local byte_size=$1\n    local use_bc=false\n    local float_regex=\"^([0-9]+\\\\.?[0-9]*)\\$\"\n\n    if [ -z \"$byte_size\" ] || ! [[ \"$byte_size\" =~ $float_regex ]]; then\n        error \"Input $byte_size is no valid float\"\n        return 1\n    fi\n    if command -v bc > /dev/null 2>&1; then\n        use_bc=true\n    fi\n    for unit in B KiB MiB GiB TiB PiB EiB ZiB; do\n        if [ \"${byte_size%.*}\" -lt 1024 ]; then\n            printf \"%.2f %s\\\\n\" \"$byte_size\" \"$unit\"\n            return\n        fi\n        if [ \"$use_bc\" = true ]; then\n            byte_size=$(echo \"$byte_size/1024\" | bc -l)\n        else\n            byte_size=$((byte_size/1024))\n        fi\n    done\n    printf \"%.2f YiB\\\\n\" $byte_size\n}\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "defaults",
          "type": "blob",
          "size": 6.90625,
          "content": "#!/bin/bash\n# The following are default values.\n# They can be overridden by supplying the -e VAR=value option to the containerizer.\n\n# The timezone this container is running in\nTZ=${TZ:-Etc/UTC}\n\n# User and group id for the user running valheim-server\nPUID=${PUID:-0}\nPGID=${PGID:-0}\n\n# Valheim dedicated server related values\nWORLD_NAME=${WORLD_NAME:-Dedicated}\nSERVER_NAME=${SERVER_NAME:-My Server}\nSERVER_PORT=${SERVER_PORT:-2456}\nSERVER_QUERY_PORT=$((SERVER_PORT + 1))\nSERVER_PASS=${SERVER_PASS-secret}\nif [ \"${VPCFG_Server_disableServerPassword:-}\" = true ]; then\n\tSERVER_PASS=\"\"\nfi\n\nSERVER_ARGS=${SERVER_ARGS:-}\nSERVER_PUBLIC=${SERVER_PUBLIC:-1}\n[ \"$SERVER_PUBLIC\" = true  ] && SERVER_PUBLIC=1\n[ \"$SERVER_PUBLIC\" = false ] && SERVER_PUBLIC=0\n\n# steamcmd.sh arguments\nSTEAMCMD_ARGS=${STEAMCMD_ARGS-validate}\n\n# Public Test\nPUBLIC_TEST=${PUBLIC_TEST:-false}\nif [ \"$PUBLIC_TEST\" = true ]; then\n    STEAMCMD_ARGS=\"$STEAMCMD_ARGS -beta public-test -betapassword yesimadebackups\"\nfi\n\n# Debug Flags\n# Flag to wipe all downloaded server data on startup (config is untouched)\nDEBUG_START_FRESH=${DEBUG_START_FRESH:-false}\n# Flat to make valheim-plus-updater reinstall the V+ ZIP over vanilla server\nDEBUG_REINSTALL_VALHEIM_PLUS=${DEBUG_REINSTALL_VALHEIM_PLUS:-false}\n# Flat to make bepinex-updater reinstall the BepInEx ZIP over vanilla server\nDEBUG_REINSTALL_BEPINEX=${DEBUG_REINSTALL_BEPINEX:-false}\n\n# How we behave when checking for whether the server is idle, if it is not\n# public (which would mean that we could just query for user activity).\n# How long to wait for incoming UDP datagrams, in seconds\nIDLE_DATAGRAM_WINDOW=3\n# How many incoming UDP datagrams we can tolerate before declaring the server\n# as un-idle (allows some buffer for UDP querying or random UDP pings)\nIDLE_DATAGRAM_MAX_COUNT=30\n\n# How often we check for Valheim server updates\n# This used to be 900 (15 min) and is here for backwards\n# compatibility reasons. We now set it to 10 years by default\n# and use a cron that sends SIGHUP instead\nUPDATE_INTERVAL=${UPDATE_INTERVAL:-315360000}\n# When we check for updates\nUPDATE_CRON=${UPDATE_CRON-*/15 * * * *}\nUPDATE_IF_IDLE=${UPDATE_IF_IDLE:-true}\n\n# What time we restart the valheim-server\n# This is usful to mitigate the effects of memory/resource leaks\nRESTART_CRON=${RESTART_CRON-0 5 * * *}\nRESTART_IF_IDLE=${RESTART_IF_IDLE:-true}\n\n# World backup related settings\nBACKUPS=${BACKUPS:-true}\n# Legacy interval variable used to be 3600 (1h)\nBACKUPS_INTERVAL=${BACKUPS_INTERVAL:-315360000}\nBACKUPS_CRON=${BACKUPS_CRON-0 * * * *}\nBACKUPS_DIRECTORY=${BACKUPS_DIRECTORY:-/config/backups}\nBACKUPS_MAX_AGE=${BACKUPS_MAX_AGE:-3}\nBACKUPS_MAX_COUNT=${BACKUPS_MAX_COUNT:-0}\nBACKUPS_IF_IDLE=${BACKUPS_IF_IDLE:-true}\nBACKUPS_IDLE_GRACE_PERIOD=${BACKUPS_IDLE_GRACE_PERIOD:-3600}\nBACKUPS_ZIP=${BACKUPS_ZIP:-true}\n\n# Supervisor http\nSUPERVISOR_HTTP=${SUPERVISOR_HTTP:-false}\nSUPERVISOR_HTTP_PORT=${SUPERVISOR_HTTP_PORT:-9001}\nSUPERVISOR_HTTP_USER=${SUPERVISOR_HTTP_USER:-admin}\nSUPERVISOR_HTTP_PASS=${SUPERVISOR_HTTP_PASS:-}\n\n# Status http\nSTATUS_HTTP=${STATUS_HTTP:-false}\nSTATUS_HTTP_PORT=${STATUS_HTTP_PORT:-80}\nSTATUS_HTTP_CONF=${STATUS_HTTP_CONF:-/config/httpd.conf}\nSTATUS_HTTP_HTDOCS=${STATUS_HTTP_HTDOCS:-/opt/valheim/htdocs}\nSTATUS_HTTP_HTDOCS=${STATUS_HTTP_HTDOCS%/}\n\n# Mod support\nVALHEIM_PLUS=${VALHEIM_PLUS:-false}\nVALHEIM_PLUS_REPO=${VALHEIM_PLUS_REPO:-Grantapher/ValheimPlus}\nVALHEIM_PLUS_RELEASE=${VALHEIM_PLUS_RELEASE:-latest}\nVALHEIM_PLUS_CFG_ENV_PREFIX=${VALHEIM_PLUS_CFG_ENV_PREFIX:-VPCFG_}\nBEPINEX=${BEPINEX:-false}\nBEPINEX_CFG_ENV_PREFIX=${BEPINEX_CFG_ENV_PREFIX:-BEPINEXCFG_}\n\n# Permissions\nPERMISSIONS_UMASK=${PERMISSIONS_UMASK:-022}\nDEFAULT_DIRECTORY_PERMISSIONS=${DEFAULT_DIRECTORY_PERMISSIONS:-$(printf \"%#o\" $(( 8#0777-8#$PERMISSIONS_UMASK )))}\nDEFAULT_FILE_PERMISSIONS=${DEFAULT_FILE_PERMISSIONS:-$(printf \"%#o\" $(( 8#0666-8#$PERMISSIONS_UMASK )))}\nCONFIG_DIRECTORY_PERMISSIONS=${CONFIG_DIRECTORY_PERMISSIONS:-$DEFAULT_DIRECTORY_PERMISSIONS}\nCONFIG_FILE_PERMISSIONS=${CONFIG_FILE_PERMISSIONS:-$DEFAULT_FILE_PERMISSIONS}\nWORLDS_DIRECTORY_PERMISSIONS=${WORLDS_DIRECTORY_PERMISSIONS:-$DEFAULT_DIRECTORY_PERMISSIONS}\nWORLDS_FILE_PERMISSIONS=${WORLDS_FILE_PERMISSIONS:-$DEFAULT_FILE_PERMISSIONS}\nBACKUPS_DIRECTORY_PERMISSIONS=${BACKUPS_DIRECTORY_PERMISSIONS:-$DEFAULT_DIRECTORY_PERMISSIONS}\nBACKUPS_FILE_PERMISSIONS=${BACKUPS_FILE_PERMISSIONS:-$DEFAULT_FILE_PERMISSIONS}\nVALHEIM_PLUS_CONFIG_DIRECTORY_PERMISSIONS=${VALHEIM_PLUS_CONFIG_DIRECTORY_PERMISSIONS:-$DEFAULT_DIRECTORY_PERMISSIONS}\nVALHEIM_PLUS_CONFIG_FILE_PERMISSIONS=${VALHEIM_PLUS_CONFIG_FILE_PERMISSIONS:-$DEFAULT_FILE_PERMISSIONS}\nBEPINEX_CONFIG_DIRECTORY_PERMISSIONS=${BEPINEX_CONFIG_DIRECTORY_PERMISSIONS:-$DEFAULT_DIRECTORY_PERMISSIONS}\nBEPINEX_CONFIG_FILE_PERMISSIONS=${BEPINEX_CONFIG_FILE_PERMISSIONS:-$DEFAULT_FILE_PERMISSIONS}\n\n# Server log filter\n# Valheim server logs empty lines as well as lines containing a single space.\n# It also logs a repeating line \"(Filename: ./Runtime/Export/Debug/Debug.bindings.h Line: 35)\".\n# We filter all of this by default.\nVALHEIM_LOG_FILTER_VERBOSE=${VALHEIM_LOG_FILTER_VERBOSE:-2}\nexport VALHEIM_LOG_FILTER_EMPTY=${VALHEIM_LOG_FILTER_EMPTY:-true}\nexport VALHEIM_LOG_FILTER_UTF8=${VALHEIM_LOG_FILTER_UTF8:-true}\nexport VALHEIM_LOG_FILTER_MATCH=${VALHEIM_LOG_FILTER_MATCH- }\nexport VALHEIM_LOG_FILTER_STARTSWITH=${VALHEIM_LOG_FILTER_STARTSWITH-(Filename:}\nexport VALHEIM_LOG_FILTER_STARTSWITH_AssertionFailed=${VALHEIM_LOG_FILTER_STARTSWITH_AssertionFailed-src/steamnetworkingsockets/clientlib/steamnetworkingsockets_lowlevel.cpp}\nif [ \"$VALHEIM_PLUS\" = true ] || [ \"$BEPINEX\" = true ]; then\n    export VALHEIM_LOG_FILTER_STARTSWITH_BepInEx=${VALHEIM_LOG_FILTER_STARTSWITH_BepInEx-Fallback handler could not load library}\nfi\n\n# Syslog settings\nSYSLOG_REMOTE_HOST=${SYSLOG_REMOTE_HOST:-}\nSYSLOG_REMOTE_PORT=${SYSLOG_REMOTE_PORT:-514}\nSYSLOG_REMOTE_AND_LOCAL=${SYSLOG_REMOTE_AND_LOCAL:-true}\n\n# Server status\nSERVER_STATUS_FILE=${SERVER_STATUS_FILE:-/var/run/valheim/valheim-server.status}\n\n# Hooks\nPRE_SUPERVISOR_HOOK=${PRE_SUPERVISOR_HOOK:-}\nPRE_BOOTSTRAP_HOOK=${PRE_BOOTSTRAP_HOOK:-}\nPOST_BOOTSTRAP_HOOK=${POST_BOOTSTRAP_HOOK:-}\nPRE_BACKUP_HOOK=${PRE_BACKUP_HOOK:-}\nPOST_BACKUP_HOOK=${POST_BACKUP_HOOK:-}\nPRE_UPDATE_CHECK_HOOK=${PRE_UPDATE_CHECK_HOOK:-}\nPOST_UPDATE_CHECK_HOOK=${POST_UPDATE_CHECK_HOOK:-}\nPRE_START_HOOK=${PRE_START_HOOK:-}\nPOST_START_HOOK=${POST_START_HOOK:-}\nPRE_RESTART_HOOK=${PRE_RESTART_HOOK:-}\nPOST_RESTART_HOOK=${POST_RESTART_HOOK:-}\nPRE_SERVER_LISTENING_HOOK=${PRE_SERVER_LISTENING_HOOK:-}\nPOST_SERVER_LISTENING_HOOK=${POST_SERVER_LISTENING_HOOK:-}\nPRE_SERVER_RUN_HOOK=${PRE_SERVER_RUN_HOOK:-}\nPOST_SERVER_RUN_HOOK=${POST_SERVER_RUN_HOOK:-}\nPRE_SERVER_SHUTDOWN_HOOK=${PRE_SERVER_SHUTDOWN_HOOK:-}\nPOST_SERVER_SHUTDOWN_HOOK=${POST_SERVER_SHUTDOWN_HOOK:-}\nPRE_BEPINEX_CONFIG_HOOK=${PRE_BEPINEX_CONFIG_HOOK:-}\nPOST_BEPINEX_CONFIG_HOOK=${POST_BEPINEX_CONFIG_HOOK:-}\n\n# Adminlist/Bannedlist/Permittedlist IDs\nADMINLIST_IDS=${ADMINLIST_IDS:-}\nBANNEDLIST_IDS=${BANNEDLIST_IDS:-}\nPERMITTEDLIST_IDS=${PERMITTEDLIST_IDS:-}\n"
        },
        {
          "name": "docker-compose.yaml",
          "type": "blob",
          "size": 0.359375,
          "content": "services:\n  valheim:\n    image: ghcr.io/lloesche/valheim-server\n    cap_add:\n      - sys_nice\n    volumes:\n      - $HOME/valheim-server/config:/config\n      - $HOME/valheim-server/data:/opt/valheim\n    ports:\n      - \"2456-2458:2456-2458/udp\"\n      - \"9001:9001/tcp\"\n    env_file:\n      - $HOME/valheim-server/valheim.env\n    restart: always\n    stop_grace_period: 2m\n"
        },
        {
          "name": "env2cfg",
          "type": "tree",
          "content": null
        },
        {
          "name": "fake-supervisord",
          "type": "blob",
          "size": 0.7978515625,
          "content": "#!/bin/bash\n\ncat <<EOF\n!!! ATTENTION !!!\n\nYou are seeing this message because your container manager is executing the wrong startup CMD.\n\nIt is running the CMD from an old version of lloesche/valheim-server on a new version of lloesche/valheim-server\n\nIf you are using a Synology NAS check this help page:\nhttps://github.com/lloesche/valheim-server-docker#error-after-download-of-new-container-image\n\nIf you are using Portainer read this for information on updating the CMD:\nhttps://github.com/lloesche/valheim-server-docker#changing-startup-cmd-in-portainer\n\nIf you are on a different system the safest way to resolve this issue is to delete the container and re-create it from scratch.\n\nAll the files in `/config` and `/opt/valheim` can be retained of course!\n\n!!! ATTENTION !!!\nEOF\n\nexec /usr/local/sbin/bootstrap\n"
        },
        {
          "name": "hooks",
          "type": "tree",
          "content": null
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "supervisord.conf",
          "type": "blob",
          "size": 2.2587890625,
          "content": "[supervisord]\nuser=root\nnodaemon=true\npidfile=/var/run/supervisord.pid\nlogfile=/var/log/supervisor/supervisord.log\nchildlogdir=/var/log/supervisor\n\n[unix_http_server]\nfile=/var/run/supervisor.sock\nchmod=0770\nchown=valheim:valheim\nusername=dummy\npassword=dummy\n\n[supervisorctl]\nserverurl=unix:///var/run/supervisor.sock\nusername=dummy\npassword=dummy\n\n[rpcinterface:supervisor]\nsupervisor.rpcinterface_factory=supervisor.rpcinterface:make_main_rpcinterface\n\n[program:crond]\nuser=root\nenvironment=HOME=\"/root\",USER=\"root\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/sbin/cron -f\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=true\nautorestart=true\npriority=20\n\n[program:valheim-bootstrap]\nuser=valheim\nenvironment=HOME=\"/home/valheim\",USER=\"valheim\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/valheim-bootstrap\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=true\nautorestart=false\nstartsecs=0\nstartretries=0\npriority=30\n\n[program:valheim-server]\nuser=valheim\nenvironment=HOME=\"/home/valheim\",USER=\"valheim\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/valheim-server\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=false\nautorestart=true\nstartsecs=10\nstartretries=10\nstopwaitsecs=90\npriority=90\n\n[program:valheim-updater]\nuser=valheim\nenvironment=HOME=\"/home/valheim\",USER=\"valheim\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/valheim-updater\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=false\nautorestart=true\npriority=50\n\n[program:valheim-backup]\nuser=valheim\nenvironment=HOME=\"/home/valheim\",USER=\"valheim\",LANG=\"en_US.UTF-8\",PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\ncommand=/usr/local/bin/valheim-backup\nstdout_syslog=true\nstderr_syslog=true\nstdout_logfile_maxbytes=1MB\nstderr_logfile_maxbytes=1MB\nautostart=false\nautorestart=true\npriority=50\n\n[include]\nfiles = /usr/local/etc/supervisor/conf.d/*.conf\n"
        },
        {
          "name": "valheim-backup",
          "type": "blob",
          "size": 5.142578125,
          "content": "#!/bin/bash\n# valheim-backups runs permanently if BACKUPS=true\n# and creates backups of the /config/worlds_local directory.\n\n# Include defaults\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\n# Remove trailing slash if any\nBACKUPS_DIRECTORY=${BACKUPS_DIRECTORY%/}\npidfile=$valheim_backup_pidfile\nnext_backup=$(date +%s)\nrun=true\n\n\nmain() {\n    local last_activity\n    last_activity=$(date +%s)\n    if (set -o noclobber; echo $$ > \"$pidfile\") 2> /dev/null; then\n        trap backup_now SIGHUP\n        trap shutdown SIGINT SIGTERM\n        trap 'error_handler $? $LINENO $BASH_LINENO \"$BASH_COMMAND\" $(printf \"::%s\" ${FUNCNAME[@]}); trap - ERR' ERR\n\n        cd /config || fatal \"Could not cd /config\"\n        while [ $run = true ]; do\n            if [ \"$BACKUPS_IF_IDLE\" = true ] || [ \"$(date +%s)\" -le $((last_activity+BACKUPS_IDLE_GRACE_PERIOD)) ]; then\n                backup\n                flush_old\n            else\n                debug \"Not running backup as there has been no server activity since $(date -d @\"$last_activity\")\"\n            fi\n            next_backup=$(($(date +%s)+BACKUPS_INTERVAL))\n            while [ $run = true ] && [ \"$(date +%s)\" -lt $next_backup ]; do\n                sleep 20\n                if [ \"$BACKUPS_IF_IDLE\" = false ] && ! server_is_idle; then\n                    last_activity=$(date +%s)\n                fi\n            done\n        done\n    else\n        info \"Found existing pid file - checking process\"\n        check_lock \"$pidfile\"\n    fi\n}\n\n\nbackup() {\n    local backup_file\n    local WORLDS_DIR\n    if [ -d \"$worlds_dir\" ]; then\n        WORLDS_DIR=$worlds_dir\n    elif [ -d \"$old_worlds_dir\" ]; then\n        WORLDS_DIR=$old_worlds_dir\n    else\n        info \"No worlds to backup\"\n        return\n    fi\n\n    mkdir -p \"$BACKUPS_DIRECTORY\"\n    chmod \"$BACKUPS_DIRECTORY_PERMISSIONS\" \"$BACKUPS_DIRECTORY\"\n\n    if [ \"${BACKUPS_ZIP}\" = true ]; then\n        backup_file=\"$BACKUPS_DIRECTORY/worlds-$(date +%Y%m%d-%H%M%S).zip\"\n        pre_backup_hook \"$backup_file\"\n        info \"Backing up Valheim server worlds to $backup_file\"\n        zip -r \"$backup_file\" \"$WORLDS_DIR/\"\n        chmod \"$BACKUPS_FILE_PERMISSIONS\" \"$backup_file\"\n        post_backup_hook \"$backup_file\"\n    else\n        local world_file\n        local backup_suffix\n        backup_suffix=$(date +%Y%m%d-%H%M%S)\n\n        for extension in {db,fwl,db.old,fwl.old}; do\n            world_file=\"$WORLDS_DIR/$WORLD_NAME.$extension\"\n            if [ ! -f \"$world_file\" ]; then\n                debug \"World file $world_file not found - skipping\"\n                continue\n            fi\n            backup_file=\"$BACKUPS_DIRECTORY/AUTOBACKUP-${WORLD_NAME}-$backup_suffix.$extension\"\n            pre_backup_hook \"$backup_file\"\n            info \"Backing up Valheim server world file $world_file to $backup_file\"\n            cp -v \"$world_file\" \"$backup_file\"\n            chmod \"$BACKUPS_FILE_PERMISSIONS\" \"$backup_file\"\n            post_backup_hook \"$backup_file\"\n        done\n    fi\n}\n\n\npre_backup_hook() {\n    local backup_file\n    local pre_hook_cmd\n    if [ -n \"$PRE_BACKUP_HOOK\" ]; then\n        backup_file=$1\n        pre_hook_cmd=${PRE_BACKUP_HOOK//@BACKUP_FILE@/$backup_file}\n        info \"Running pre backup hook: $pre_hook_cmd\"\n        eval \"$pre_hook_cmd\"\n    fi\n}\n\n\npost_backup_hook() {\n    local backup_file\n    local post_hook_cmd\n    if [ -n \"$POST_BACKUP_HOOK\" ]; then\n        backup_file=$1\n        post_hook_cmd=${POST_BACKUP_HOOK//@BACKUP_FILE@/$backup_file}\n        info \"Running post backup hook: $post_hook_cmd\"\n        eval \"$post_hook_cmd\"\n    fi\n}\n\n\nflush_old() {\n    if [ ! -d \"$BACKUPS_DIRECTORY\" ]; then\n        debug \"No old backups to remove\"\n        return\n    fi\n\n    if [ \"$BACKUPS_MAX_COUNT\" -gt 0 ]; then\n        info \"Removing all but the newest $BACKUPS_MAX_COUNT backups\"\n        if [ \"${BACKUPS_ZIP}\" = true ]; then\n            find \"$BACKUPS_DIRECTORY\" -type f -name \"worlds-*.zip\" -printf '%T@ %p\\0' | sort -z -n -r | cut -z -s -d \" \" -f \"2-\" | tail -z -n +$((BACKUPS_MAX_COUNT+1)) | xargs -0 rm -fv -- 2>/dev/null\n        else\n            for extension in {db,fwl,db.old,fwl.old}; do\n                find \"$BACKUPS_DIRECTORY\" -type f -name \"AUTOBACKUP-${WORLD_NAME}-*.${extension}\" -printf '%T@ %p\\0' | sort -z -n -r | cut -z -s -d \" \" -f \"2-\" | tail -z -n +$((BACKUPS_MAX_COUNT+1)) | xargs -0 rm -v -- 2>/dev/null\n            done\n        fi\n    fi\n\n    info \"Removing backups older than $BACKUPS_MAX_AGE days\"\n    if [ \"${BACKUPS_ZIP}\" = true ]; then\n        find \"$BACKUPS_DIRECTORY\" -type f -mmin \"+$((BACKUPS_MAX_AGE*60*24))\" -name \"worlds-*.zip\" -print -exec rm -f \"{}\" \\;\n    else\n        for extension in {db,fwl,db.old,fwl.old}; do\n            find \"$BACKUPS_DIRECTORY\" -type f -mmin \"+$((BACKUPS_MAX_AGE*60*24))\" -name \"AUTOBACKUP-${WORLD_NAME}-*.${extension}\" -print -exec rm -f \"{}\" \\;\n        done\n    fi\n}\n\n\n# This is a signal handler registered to SIGHUP\nbackup_now() {\n    debug \"Received signal to backup world\"\n    next_backup=0\n}\n\n\nshutdown() {\n    debug \"Received signal to shut down valheim-backup\"\n    clear_lock \"$pidfile\"\n    run=false\n}\n\n\nif [ \"$BACKUPS\" = true ]; then\n    main\nelse\n    info \"Backups have been turned off by env BACKUPS=$BACKUPS\"\n    supervisorctl stop valheim-backup\nfi\n"
        },
        {
          "name": "valheim-bootstrap",
          "type": "blob",
          "size": 4.443359375,
          "content": "#!/bin/bash\n# valheim-bootstrap is the first of the valheim-* scripts\n# that runs and prepares the system based on\n# environment variables.\n\n# Include defaults\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\n\n# Update server status before anything else\nupdate_server_status bootstrapping\n\n\nif [ -n \"$PRE_BOOTSTRAP_HOOK\" ]; then\n    info \"Running pre bootstrap hook: $PRE_BOOTSTRAP_HOOK\"\n    eval \"$PRE_BOOTSTRAP_HOOK\"\nfi\n\n\n# check if we are supposed to wipe our data directories\nif [ \"$DEBUG_START_FRESH\" = true ]; then\n    warn \"Wiping all data directories (DEBUG_START_FRESH: $DEBUG_START_FRESH)\"\n    rm -rf \"/opt/valheim/*\"\nfi\n\n# check if we are supposed to reinstall ValheimPlus\nif [ \"$DEBUG_REINSTALL_VALHEIM_PLUS\" = true ]; then\n    warn \"Reinstalling ValheimPlus mod (DEBUG_REINSTALL_VALHEIM_PLUS: $DEBUG_REINSTALL_VALHEIM_PLUS)\"\n    rm -rf \"$vp_download_path\"\n    rm -rf \"$vp_install_path\"\nfi\n\n# check if we are supposed to reinstall BepInEx\nif [ \"$DEBUG_REINSTALL_BEPINEX\" = true ]; then\n    warn \"Reinstalling BepInEx mod (DEBUG_REINSTALL_BEPINEX: $DEBUG_REINSTALL_BEPINEX)\"\n    rm -rf \"$bepinex_download_path\"\n    rm -rf \"$bepinex_install_path\"\nfi\n\n# Output image commit version on startup\nif [ -f \"$git_commit_file\" ]; then\n    commit=$(< \"$git_commit_file\")\n    debug \"Running commit $commit\"\nfi\n\n\n# Create paths\nmkdir -p \"$valheim_download_path\"\nmkdir -p \"$valheim_install_path\"\n\n# Mod support\nif [ \"$VALHEIM_PLUS\" = true ] && [ \"$BEPINEX\" = true ]; then\n    error \"Configuration error: enable ValheimPlus or BepInEx mod support but not both - aborting startup\"\n    supervisorctl shutdown\n    exit 1\nfi\n\nif [ \"$VALHEIM_PLUS\" = true ]; then\n    mkdir -p \"$vp_download_path\"\n    mkdir -p \"$vp_install_path\"\n    if [ -d \"$vp_config_path\" ]; then\n        write_valheim_plus_config\n        write_bepinex_config \"$vp_config_path\" \"$vp_install_path/BepInEx/plugins\"\n    fi\nfi\n\nif [ \"$BEPINEX\" = true ]; then\n    mkdir -p \"$bepinex_download_path\"\n    mkdir -p \"$bepinex_install_path\"\n    if [ -d \"$bepinex_config_path\" ]; then\n        write_bepinex_config \"$bepinex_config_path\" \"$bepinex_install_path/BepInEx/plugins\"\n    fi\nfi\n\n# Write server's adminlist.txt / bannedlist / permittedlist.txt\nwrite_adminlist\nwrite_bannedlist\nwrite_permittedlist\n\n# Create crontabs\ncrontab=$(mktemp)\n\n{ echo \"SERVER_PUBLIC=$SERVER_PUBLIC\"; \\\n    echo \"SERVER_PORT=$SERVER_PORT\"; \\\n    echo \"STATUS_HTTP_HTDOCS=$STATUS_HTTP_HTDOCS\"; } >> \"$crontab\"\n\nif [ \"$BACKUPS\" = true ] && [ -n \"$BACKUPS_CRON\" ] && [ \"$BACKUPS_INTERVAL\" = \"315360000\" ]; then\n    debug \"Creating cron to do world backups using schedule $BACKUPS_CRON\"\n    echo \"$BACKUPS_CRON [ -f \\\"$valheim_backup_pidfile\\\" ] && kill -HUP \\$(cat $valheim_backup_pidfile)\" >> \"$crontab\"\nfi\n\nif [ -n \"$UPDATE_CRON\" ] && [ \"$UPDATE_INTERVAL\" = \"315360000\" ]; then\n    debug \"Creating cron to check for updates using schedule $UPDATE_CRON\"\n    echo \"$UPDATE_CRON [ -f \\\"$valheim_updater_pidfile\\\" ] && kill -HUP \\$(cat $valheim_updater_pidfile)\" >> \"$crontab\"\nfi\n\nif [ -n \"$RESTART_CRON\" ]; then\n    debug \"Creating cron to restart valheim-server using schedule $RESTART_CRON\"\n    if [ \"$RESTART_IF_IDLE\" = true ]; then\n        echo \"$RESTART_CRON $cmd_valheim_is_idle && $cmd_supervisorctl restart valheim-server\" >> \"$crontab\"\n    else\n        echo \"$RESTART_CRON $cmd_supervisorctl restart valheim-server\" >> \"$crontab\"\n    fi\nelse\n    debug \"Environment variable RESTART_CRON is empty - no automatic valheim-server restart scheduled\"\nfi\ncrontab \"$crontab\"\nrm -f \"$crontab\"\n\n\n# Notify users of new data paths\nif [ -d \"/opt/valheim_dl\" ] || [ -f \"/opt/valheim/valheim_server.x86_64\" ]; then\n    cat <<EOF\n!!! ATTENTION !!!\n\nYou have /opt/valheim_dl mounted or old server files in /opt/valheim.\n\nThe /opt/valheim_dl volume is no longer required and has been unified under\n    /opt/valheim\n\nDirectories have been moved in the following way:\n    /opt/valheim/    -> /opt/valheim/server/\n    /opt/valheim_dl/ -> /opt/valheim/dl/server/\n\nYou might want to (re)move existing files or create a fresh volume mount under /opt/valheim to clean things up.\n\nNothing is going to break though if you don't. It will just consume some extra disk space.\nIf required we'll download a fresh copy of the server in the new directory structure.\n\n!!! ATTENTION !!!\nEOF\nfi\n\n\nif [ -n \"$POST_BOOTSTRAP_HOOK\" ]; then\n    info \"Running post bootstrap hook: $POST_BOOTSTRAP_HOOK\"\n    eval \"$POST_BOOTSTRAP_HOOK\"\nfi\n\n\n# Start all services\nsupervisorctl start valheim-updater\nsupervisorctl start valheim-backup\n\nexit 0\n"
        },
        {
          "name": "valheim-is-idle",
          "type": "blob",
          "size": 0.384765625,
          "content": "#!/bin/bash\n# valheim-is-idle returns 0 if the server is idle or 1 if players are connected\n# For private servers this check is not 100% reliable as it relies on watching\n# the network traffic for player activity.\n# For public servers this queries the Steam query port (2457/udp by default).\n\n# Include defaults\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\nserver_is_idle\n"
        },
        {
          "name": "valheim-logfilter",
          "type": "tree",
          "content": null
        },
        {
          "name": "valheim-plus-updater",
          "type": "blob",
          "size": 1.111328125,
          "content": "#!/bin/bash\n# valheim-plus-updater is being called by\n# valheim-updater when $VALHEIM_PLUS=true\n# It downloads the ValheimPlus mod and merges\n# the downloaded archive with the vanilla\n# Valheim server into /opt/valheim/plus\n\n# Include defaults and common functions\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\n\nmain() {\n    local api_response\n    local download_url\n    local remote_updated_at\n\n    if ! api_response=$(curl -sfSL \"https://api.github.com/repos/$VALHEIM_PLUS_REPO/releases/$VALHEIM_PLUS_RELEASE\"); then\n        fatal \"Error: could not retrieve ValheimPlus release info from Github API\"\n    fi\n    api_response=$(jq -r \".assets[] | select(.name == \\\"$vp_zipfile\\\")\" <<< \"$api_response\" )\n    download_url=$(jq -r  \".browser_download_url\" <<< \"$api_response\" )\n    remote_updated_at=$(jq -r  \".updated_at\" <<< \"$api_response\" )\n\n    check_for_mod_update \\\n        \"$download_url\" \\\n        \"$remote_updated_at\" \\\n        \"$vp_zipfile\" \\\n        \"$vp_mergefile\" \\\n        \"$vp_download_path\" \\\n        \"$vp_config_path\" \\\n        \"extracted\" \\\n        \"$vp_install_path\" \\\n        \"ValheimPlus\"\n}\n\n\nmain\n"
        },
        {
          "name": "valheim-server",
          "type": "blob",
          "size": 6.7744140625,
          "content": "#!/bin/bash\n# valheim-server starts the Valheim server\n# binary either vanilla from /opt/valheim/server\n# or if VALHEIM_PLUS=true with the ValheimPlus mod\n# from /opt/valheim/plus\n\n# Include defaults and common functions\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\nexport SteamAppId=892970\n\nvalheim_server_pid=-1\ntimeout=29\nkill_signal=TERM\npassword_args=(-password \"$SERVER_PASS\")\nmod_name=none\n\nif [ \"$VALHEIM_PLUS\" = true ]; then\n    cd \"$vp_install_path\" || fatal \"Could not cd $vp_install_path\"\n    rm -rf \"$vp_install_path.old\"\n    export DOORSTOP_ENABLE=TRUE\n    export DOORSTOP_INVOKE_DLL_PATH=\"./BepInEx/core/BepInEx.Preloader.dll\"\n    export DOORSTOP_CORLIB_OVERRIDE_PATH=\"./unstripped_corlib\"\n    export LD_LIBRARY_PATH=\"$vp_install_path/linux64/:$vp_install_path/doorstop_libs/\"\n    SERVER_LD_PRELOAD=libdoorstop_x64.so\n    valheim_server=\"$vp_install_path/valheim_server.x86_64\"\n    if [ -z \"$SERVER_PASS\" ]; then\n        password_args=()\n    fi\n    mod_name=\"ValheimPlus\"\nelif [ \"$BEPINEX\" = true ]; then\n    cd \"$bepinex_install_path\" || fatal \"Could not cd $bepinex_install_path\"\n    rm -rf \"$bepinex_install_path.old\"\n    export DOORSTOP_ENABLE=TRUE\n    export DOORSTOP_INVOKE_DLL_PATH=\"./BepInEx/core/BepInEx.Preloader.dll\"\n    export DOORSTOP_CORLIB_OVERRIDE_PATH=\"./unstripped_corlib\"\n    export LD_LIBRARY_PATH=\"$bepinex_install_path/linux64/:$bepinex_install_path/doorstop_libs/\"\n    SERVER_LD_PRELOAD=libdoorstop_x64.so\n    valheim_server=\"$bepinex_install_path/valheim_server.x86_64\"\n    if [ -z \"$SERVER_PASS\" ]; then\n        password_args=()\n    fi\n    mod_name=\"BepInEx\"\nelse\n    cd \"$valheim_install_path\" || fatal \"Could not cd $valheim_install_path\"\n    export LD_LIBRARY_PATH=\"$valheim_install_path/linux64/\"\n    SERVER_LD_PRELOAD=\"\"\n    valheim_server=\"$valheim_install_path/valheim_server.x86_64\"\nfi\n\n\nmain() {\n    wait_for_server_download\n    run_server\n}\n\n\nwait_for_server_download() {\n    while :; do\n        if [ -f \"$valheim_server\" ]; then\n            break\n        else\n            debug \"Valheim Server is not yet downloaded - waiting\"\n            sleep 7\n        fi\n    done\n}\n\n\n# This runs after server start and waits for the\n# config files to either exist or for the server\n# to create them so their access permissions can\n# be adjusted to the proper values.\nensure_permissions_after_start() {\n    while :; do\n        if [ -f \"/config/adminlist.txt\" ]; then\n            ensure_permissions\n            break\n        else\n            sleep 4\n        fi\n    done\n}\n\n\nwait_for_server_listening() {\n    pre_server_listening_hook\n\n    while :; do\n        if server_is_listening; then\n            update_server_status running\n            debug \"Server is now listening on UDP query port $SERVER_QUERY_PORT\"\n            post_server_listening_hook\n            break\n        else\n            debug \"Waiting for server to listen on UDP query port $SERVER_QUERY_PORT\"\n            sleep 5\n        fi\n    done\n}\n\n\nrun_server() {\n    pre_server_run_hook\n    info \"Running Valheim Server\"\n    debug \"Server config is name: $SERVER_NAME, port: $SERVER_PORT/udp, world: $WORLD_NAME, public: $SERVER_PUBLIC, mod: $mod_name\"\n    update_server_status starting\n\n    chmod +x \"$valheim_server\"\n    # shellcheck disable=SC2086\n    LD_PRELOAD=$SERVER_LD_PRELOAD \"$valheim_server\" -nographics -batchmode -name \"$SERVER_NAME\" -port \"$SERVER_PORT\" -world \"$WORLD_NAME\" -public \"$SERVER_PUBLIC\" \"${password_args[@]}\" $SERVER_ARGS > >(filter) 2>&1 &\n    valheim_server_pid=$!\n    unset LD_LIBRARY_PATH\n    unset LD_PRELOAD\n    echo $valheim_server_pid > \"$valheim_server_pidfile\"\n\n    ensure_permissions_after_start &\n    permissions_wait_pid=$!\n    wait_for_server_listening &\n    wait_for_server_listening_pid=$!\n\n    wait $valheim_server_pid\n    debug \"Valheim server with PID $valheim_server_pid stopped\"\n    update_server_status stopped\n    post_server_run_hook\n\n    cleanup\n    post_server_shutdown_hook\n    info \"Shutdown complete\"\n    exit 0\n}\n\n\ncleanup() {\n    if [ -n \"${permissions_wait_pid:-}\" ] && [ -d \"/proc/$permissions_wait_pid\" ]; then\n        kill -TERM $permissions_wait_pid\n    fi\n    if [ -n \"${wait_for_server_listening_pid:-}\" ] && [ -d \"/proc/$wait_for_server_listening_pid\" ]; then\n        kill -TERM $wait_for_server_listening_pid\n    fi\n    clear_lock \"$valheim_server_pidfile\"\n}\n\n\n# This function gets the servers stdout/stderr\n# output piped into. It allows for filtering\n# of unwanted debug log messages.\nfilter() {\n    unset LD_LIBRARY_PATH\n    unset LD_PRELOAD\n    \"$cmd_valheim_logfilter\" -logtostderr -v \"$VALHEIM_LOG_FILTER_VERBOSE\"\n}\n\n\npre_server_run_hook() {\n    if [ -n \"$PRE_SERVER_RUN_HOOK\" ]; then\n        info \"Running pre server run hook: $PRE_SERVER_RUN_HOOK\"\n        eval \"$PRE_SERVER_RUN_HOOK\"\n    fi\n}\n\n\npost_server_run_hook() {\n    if [ -n \"$POST_SERVER_RUN_HOOK\" ]; then\n        info \"Running post server run hook: $POST_SERVER_RUN_HOOK\"\n        eval \"$POST_SERVER_RUN_HOOK\"\n    fi\n}\n\npre_server_listening_hook() {\n     if [ -n \"$PRE_SERVER_LISTENING_HOOK\" ]; then\n        info \"Running pre server listening hook: $PRE_SERVER_LISTENING_HOOK\"\n        eval \"$PRE_SERVER_LISTENING_HOOK\"\n    fi\n}\n\npost_server_listening_hook() {\n    if [ -n \"$POST_SERVER_LISTENING_HOOK\" ]; then\n        info \"Running post server listening hook: $POST_SERVER_LISTENING_HOOK\"\n        eval \"$POST_SERVER_LISTENING_HOOK\"\n    fi\n}\n\n\nshutdown() {\n    debug \"Received signal to shut down valheim-server\"\n    update_server_status stopping\n    if [ $valheim_server_pid -eq -1 ]; then\n        debug \"Valheim server is not running yet - aborting startup\"\n        update_server_status stopped\n        exit\n    fi\n    pre_server_shutdown_hook\n    info \"Shutting down Valheim server with PID $valheim_server_pid\"\n    kill -INT $valheim_server_pid\n    shutdown_timeout=$(($(date +%s)+timeout))\n    while [ -d \"/proc/$valheim_server_pid\" ]; do\n        if [ \"$(date +%s)\" -gt $shutdown_timeout ]; then\n            shutdown_timeout=$(($(date +%s)+timeout))\n            warn \"Timeout while waiting for server to shut down - sending SIG$kill_signal to PID $valheim_server_pid\"\n            kill -$kill_signal $valheim_server_pid\n            case \"$kill_signal\" in\n                INT)\n                    kill_signal=TERM\n                    ;;\n                *)\n                    kill_signal=KILL\n            esac\n        fi\n        debug \"Waiting for Valheim Server with PID $valheim_server_pid to shut down\"\n        sleep 6\n    done\n}\n\n\npre_server_shutdown_hook() {\n    if [ -n \"$PRE_SERVER_SHUTDOWN_HOOK\" ]; then\n        info \"Running pre server shutdown hook: $PRE_SERVER_SHUTDOWN_HOOK\"\n        eval \"$PRE_SERVER_SHUTDOWN_HOOK\"\n    fi\n}\n\n\npost_server_shutdown_hook() {\n    if [ -n \"$POST_SERVER_SHUTDOWN_HOOK\" ]; then\n        info \"Running post server shutdown hook: $POST_SERVER_SHUTDOWN_HOOK\"\n        eval \"$POST_SERVER_SHUTDOWN_HOOK\"\n    fi\n}\n\n\ntrap shutdown SIGINT SIGTERM\nmain\n"
        },
        {
          "name": "valheim-status",
          "type": "blob",
          "size": 5.4794921875,
          "content": "#!/usr/bin/env python3\n#\n#    Copyright 2021 Lukas Lösche\n#\n#    Licensed under the Apache License, Version 2.0 (the \"License\");\n#    you may not use this file except in compliance with the License.\n#    You may obtain a copy of the License at\n#\n#        http://www.apache.org/licenses/LICENSE-2.0\n#\n#    Unless required by applicable law or agreed to in writing, software\n#    distributed under the License is distributed on an \"AS IS\" BASIS,\n#    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#    See the License for the specific language governing permissions and\n#    limitations under the License.\nimport os\nimport sys\nimport a2s\nimport json\nimport socket\nimport time\nimport logging\nfrom typing import Dict\nfrom signal import signal, SIGTERM, SIGINT\nfrom argparse import ArgumentParser\nfrom datetime import datetime, timezone\nfrom pprint import pformat\n\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"%(asctime)s - %(levelname)s - %(message)s\",\n)\nlog = logging.getLogger(\"status-updater\")\nlog.setLevel(logging.INFO)\n\nrun = True\n\n\ndef main() -> None:\n    parser = get_arg_parser()\n    args = parser.parse_args()\n    if args.verbose:\n        log.setLevel(logging.DEBUG)\n\n    query_host = args.host\n    query_port = args.port + 1\n    status_file = args.status_file\n\n    if not args.update:\n        status = get_status(query_host, query_port)\n        num_players = len(status.get(\"players\", []))\n        if status.get(\"error\") is not None:\n            exit_code = 125 if args.timeout_is_error else 0\n        else:\n            exit_code = num_players\n        json_output = json.dumps(\n            status, default=json_default, skipkeys=True, indent=4, sort_keys=True\n        )\n        print(json_output)\n        sys.exit(exit_code)\n\n    signal(SIGINT, handler)\n    signal(SIGTERM, handler)\n    log.info(\"Valheim status updater started\")\n    log.debug(\n        (\n            f\"Writing status from {query_host}:{query_port}\"\n            f\" to {status_file} every {args.frequency}s\"\n        )\n    )\n    while run:\n        status = get_status(query_host, query_port)\n        write_status(status, status_file)\n        time.sleep(args.frequency)\n\n\ndef write_status(status: str, status_file: str) -> None:\n    tmp_status_file = status_file + \".tmp\"\n    json_output = json.dumps(status, default=json_default, skipkeys=True)\n    with open(tmp_status_file, \"w\") as json_file:\n        json_file.write(json_output)\n    os.replace(tmp_status_file, status_file)\n\n\ndef get_status(query_host: str, query_port: int) -> Dict:\n    status = {\n        \"last_status_update\": datetime.utcnow().replace(tzinfo=timezone.utc),\n        \"error\": None,\n    }\n    try:\n        info = a2s.info((query_host, query_port))\n        players = a2s.players((query_host, query_port))\n    except Exception as e:\n        status.update({\"error\": e})\n    else:\n        status.update(\n            {\n                \"server_name\": info.server_name,\n                \"server_type\": info.server_type,\n                \"platform\": info.platform,\n                \"player_count\": len(players),\n                \"password_protected\": info.password_protected,\n                \"vac_enabled\": info.vac_enabled,\n                \"port\": info.port,\n                \"steam_id\": info.steam_id,\n                \"keywords\": info.keywords,\n                \"game_id\": info.game_id,\n                \"players\": [\n                    {\"name\": pl.name, \"score\": pl.score, \"duration\": pl.duration}\n                    for pl in players\n                ],\n            }\n        )\n    return status\n\n\ndef handler(sig, frame) -> None:\n    global run\n    run = False\n\n\ndef json_default(o):\n    if hasattr(o, \"to_json\"):\n        return o.to_json()\n    elif isinstance(o, datetime):\n        return o.isoformat()\n    elif isinstance(o, Exception):\n        return pformat(o)\n    raise TypeError(f\"Object of type {o.__class__.__name__} is not JSON serializable\")\n\n\ndef get_arg_parser() -> ArgumentParser:\n    parser = ArgumentParser(description=\"Valheim status updater\")\n    parser.add_argument(\n        \"--verbose\",\n        \"-v\",\n        help=\"Verbose logging\",\n        dest=\"verbose\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"--update\",\n        help=\"Update status continuously and write to status.json.\",\n        dest=\"update\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"--timeout-is-error\",\n        help=\"Consider timeout to be an error and exit 125 instead of 0\",\n        dest=\"timeout_is_error\",\n        action=\"store_true\",\n        default=False,\n    )\n    parser.add_argument(\n        \"--host\",\n        help=\"Valheim Server Hostname (default: localhost)\",\n        dest=\"host\",\n        type=str,\n        default=\"localhost\",\n    )\n    default_port = int(os.getenv(\"SERVER_PORT\", 2456))\n    parser.add_argument(\n        \"--port\",\n        help=f\"Valheim Server Port (default: {default_port})\",\n        dest=\"port\",\n        type=int,\n        default=default_port,\n    )\n    default_htdocs = os.getenv(\"STATUS_HTTP_HTDOCS\", \"/opt/valheim/htdocs\")\n    default_status_file = f\"{default_htdocs}/status.json\"\n    parser.add_argument(\n        \"--status-file\",\n        help=f\"Server status file (default: {default_status_file})\",\n        dest=\"status_file\",\n        type=str,\n        default=default_status_file,\n    )\n    parser.add_argument(\n        \"--frequency\",\n        help=f\"Update frequency in seconds (default: 10)\",\n        dest=\"frequency\",\n        type=int,\n        default=10,\n    )\n\n    return parser\n\n\nif __name__ == \"__main__\":\n    main()\n"
        },
        {
          "name": "valheim-updater",
          "type": "blob",
          "size": 8.931640625,
          "content": "#!/bin/bash\n# valheim-updater runs on startup and\n# periodically checks for server updates.\n# It is also responsible for (re)starting\n# the valheim-server service.\n\n# Include defaults\n. /usr/local/etc/valheim/defaults\n. /usr/local/etc/valheim/common\n\ndebug \"Running Valheim Server updater as user $USER uid $UID\"\ncd /opt/steamcmd || fatal \"Could not cd /opt/steamcmd\"\npidfile=$valheim_updater_pidfile\nnext_update=$(date +%s)\nrun=true\n\n\nmain() {\n    if (set -o noclobber; echo $$ > \"$pidfile\") 2> /dev/null; then\n        trap update_now SIGHUP\n        trap shutdown SIGINT SIGTERM\n        trap 'error_handler $? $LINENO $BASH_LINENO \"$BASH_COMMAND\" $(printf \"::%s\" ${FUNCNAME[@]}); trap - ERR' ERR\n        while [ $run = true ]; do\n            ensure_permissions\n            verify_kernel\n            verify_cpu_mhz\n            verify_memory\n            verify_storage\n            update\n            check_server_restart\n            next_update=$(($(date +%s)+UPDATE_INTERVAL))\n            while [ $run = true ] && [ \"$(date +%s)\" -lt $next_update ]; do\n                sleep 9\n            done\n        done\n    else\n        info \"Found existing PID file - checking process\"\n        check_lock $pidfile\n    fi\n}\n\n\nupdate() {\n    local logfile\n    if ! is_idle; then\n        return\n    fi\n    pre_update_check_hook\n    logfile=\"$(mktemp)\"\n    info \"Downloading/updating/validating Valheim server from Steam\"\n    if ! download_valheim; then\n        if [ -f \"$valheim_download_path/valheim_server.x86_64\" ]; then\n            error \"Failed to update Valheim server from Steam - however an existing version was found locally - using it\"\n        else\n            error \"Failed to download Valheim server from Steam - retrying later - check your networking and volume access permissions\"\n            return\n        fi\n    fi\n    rsync -a --itemize-changes --delete --exclude server_exit.drp --exclude steamapps \"$valheim_download_path/\" \"$valheim_install_path\" | tee \"$logfile\"\n    if grep '^[*>]' \"$logfile\" > /dev/null 2>&1; then\n        info \"Valheim Server was updated - restarting\"\n        if ! check_mods updated; then\n            return\n        fi\n        write_restart_file updated\n    else\n        info \"Valheim Server is already the latest version\"\n        if ! check_mods uptodate; then\n            return\n        fi\n        if [ \"$just_started\" = true ]; then\n            write_restart_file just_started\n        fi\n    fi\n    just_started=false\n    rm -f \"$logfile\"\n    post_update_check_hook\n}\n\n\ncheck_mods() {\n    local valheim_server_update_status=$1\n    local ret=0\n    check_mod \"$valheim_server_update_status\" \"ValheimPlus\" \"$VALHEIM_PLUS\" \"$vp_mergefile\" \"$vp_install_path\" \"$vp_updater\"\n    local mod_vp_status=$?\n    check_mod \"$valheim_server_update_status\" \"BepInEx\" \"$BEPINEX\" \"$bepinex_mergefile\" \"$bepinex_install_path\" \"$bepinex_updater\"\n    local mod_bepinex_status=$?\n\n    if [ $mod_vp_status -ne 0 ] || [ $mod_bepinex_status -ne 0 ]; then\n        ret=1\n    fi\n    return $ret\n}\n\n\ncheck_mod() {\n    local valheim_server_update_status=$1\n    local mod_name=$2\n    local mod_enabled=$3\n    local mod_mergefile=$4\n    local mod_install_path=$5\n    local mod_updater=$6\n\n    if [ \"$mod_enabled\" = true ]; then\n        debug \"$mod_name is enabled - running updater\"\n        if [ \"$valheim_server_update_status\" = updated ]; then\n            info \"Valheim Server was updated from Steam - signaling $mod_name updater to merge updated files\"\n            touch \"$mod_mergefile\"\n        fi\n        if ! just_started=$just_started \"$mod_updater\"; then\n            error \"Failed to run $mod_name updater - retrying later - check your networking and volume access permissions\"\n            return 1\n        fi\n    else\n        if [ \"$valheim_server_update_status\" = updated ] && [ -d \"$mod_install_path\" ]; then\n            debug \"$mod_name currently disabled but previously installed - keeping installation fresh\"\n            debug \"If this is unwanted remove $mod_install_path\"\n            touch \"$mod_mergefile\"\n            if ! just_started=$just_started \"$mod_updater\"; then\n                error \"Failed to run $mod_name updater - retrying later - check your networking and volume access permissions\"\n                return 1\n            fi\n        fi\n    fi\n    return 0\n}\n\n\ndownload_valheim() {\n    # Kill any hung steamcmd processes\n    pkill -TERM steamcmd || true\n    sleep 1\n    pkill -KILL steamcmd || true\n    # shellcheck disable=SC2086\n    /opt/steamcmd/steamcmd.sh +force_install_dir \"$valheim_download_path\" +login anonymous +app_update 896660 $STEAMCMD_ARGS +quit\n}\n\n\n# This works around the `Unable to determine CPU Frequency. Try defining CPU_MHZ.` steamcmd issue (#184).\nverify_cpu_mhz() {\n    local float_regex\n    local cpu_mhz\n    float_regex=\"^([0-9]+\\\\.?[0-9]*)\\$\"\n    cpu_mhz=$(grep \"^cpu MHz\" /proc/cpuinfo | head -1 | cut -d : -f 2 | xargs)\n    if [ -n \"$cpu_mhz\" ] && [[ \"$cpu_mhz\" =~ $float_regex ]] && [ \"${cpu_mhz%.*}\" -gt 0 ]; then\n        debug \"Found CPU with $cpu_mhz MHz\"\n        unset CPU_MHZ\n    else\n        debug \"Unable to determine CPU Frequency - setting a default of 1.5 GHz so steamcmd won't complain\"\n        export CPU_MHZ=\"1500.000\"\n    fi\n}\n\n\nverify_memory() {\n    local mem_info\n    local mem_total\n    local mem_min=4000000\n    mem_info=$(awk '\n        BEGIN {\n            total=0\n            free=0\n            available=0\n        }\n        {\n            if($1 ~ /^MemTotal/)\n                total=$2\n            else if($1 ~ /^MemFree/)\n                free=$2\n            else if($1 ~ /^MemAvailable/)\n                available=$2\n        }\n        END {\n            print total\"/\"free\"/\"available\n        }\n    ' /proc/meminfo)\n    debug \"Memory total/free/available: $mem_info\"\n    mem_total=${mem_info//\\/*}\n    if [ \"$mem_total\" -lt $mem_min ]; then\n        mem_total=$(iec_size_format \"$((mem_total*1024))\")\n        error \"$mem_total is not enough memory - read https://github.com/lloesche/valheim-server-docker#system-requirements\"\n    fi\n}\n\n\nverify_storage() {\n    debug \"Storage configuration:\"\n    df -h | grep -v -E \"^(tmpfs|shm)\" | grep -v -E \"(/sys/|/etc/|/run/)\"\n    grep -v -E \"^(proc|tmpfs|devpts|shm|mqueue|sysfs)\" /etc/mtab | grep -v -E \"(/sys/|/etc/|/run/)\"\n}\n\n\nverify_kernel() {\n    debug \"Kernel: $(uname -a)\"\n}\n\n\ncheck_server_restart() {\n    local mode\n    # The control file $valheim_restartfile is either created\n    # by update() if Valheim is being installed for the first\n    # time or has been updated, or by valheim-plus-updater if\n    # a new version of the mod has been downloaded.\n    if [ -f \"$valheim_restartfile\" ]; then\n        mode=$(< \"$valheim_restartfile\")\n        rm -f \"$valheim_restartfile\"\n\n        case \"$mode\" in\n                start)\n                    if server_is_running; then\n                        debug \"Valheim server is already running - no need to start it\"\n                        return\n                    fi\n                    ;;\n                restart)\n                    if ! server_is_running; then\n                        mode=start\n                    fi\n                    ;;\n                *)\n                    mode=restart\n        esac\n\n        pre_hook \"$mode\"\n        supervisorctl \"$mode\" valheim-server\n        post_hook \"$mode\"\n    fi\n}\n\n\nis_idle() {\n    if [ \"$UPDATE_IF_IDLE\" = true ]; then\n        if [ \"$just_started\" = true ] && ! server_is_running; then\n            debug \"Valheim updater was just started - skipping connected players check\"\n            return 0\n        fi\n        if server_is_idle; then\n            debug \"No players connected to Valheim server\"\n            return 0\n        else\n            debug \"Players connected to Valheim server - skipping update check\"\n            return 1\n        fi\n\n    fi\n    return 0\n}\n\n\npre_hook() {\n    local mode\n    mode=$1\n    if [ \"$mode\" = restart ] && [ -n \"$PRE_RESTART_HOOK\" ]; then\n        info \"Running pre restart hook: $PRE_RESTART_HOOK\"\n        eval \"$PRE_RESTART_HOOK\"\n    elif [ \"$mode\" = start ] && [ -n \"$PRE_START_HOOK\" ]; then\n        info \"Running pre start hook: $PRE_START_HOOK\"\n        eval \"$PRE_START_HOOK\"\n    fi\n}\n\n\npost_hook() {\n    local mode\n    mode=$1\n    if [ \"$mode\" = restart ] && [ -n \"$POST_RESTART_HOOK\" ]; then\n        info \"Running post restart hook: $POST_RESTART_HOOK\"\n        eval \"$POST_RESTART_HOOK\"\n    elif [ \"$mode\" = start ] && [ -n \"$POST_START_HOOK\" ]; then\n        info \"Running post start hook: $POST_START_HOOK\"\n        eval \"$POST_START_HOOK\"\n    fi\n}\n\n\npre_update_check_hook() {\n    if [ -n \"$PRE_UPDATE_CHECK_HOOK\" ]; then\n        info \"Running pre update check hook: $PRE_UPDATE_CHECK_HOOK\"\n        eval \"$PRE_UPDATE_CHECK_HOOK\"\n    fi\n}\n\n\npost_update_check_hook() {\n    if [ -n \"$POST_UPDATE_CHECK_HOOK\" ]; then\n        info \"Running post update check hook: $POST_UPDATE_CHECK_HOOK\"\n        eval \"$POST_UPDATE_CHECK_HOOK\"\n    fi\n}\n\n\n# This is a signal handler registered to SIGHUP\nupdate_now() {\n    debug \"Received signal to check for update\"\n    next_update=0\n}\n\n\nshutdown() {\n    debug \"Received signal to shut down valheim-updater\"\n    clear_lock \"$pidfile\"\n    run=false\n}\n\n\nmain\n"
        },
        {
          "name": "valheim.env.example",
          "type": "blob",
          "size": 0.5537109375,
          "content": "PUID=1000\nPGID=1000\nTZ=America/Toronto\nSERVER_NAME=\nWORLD_NAME=\nSERVER_PASS=\"SomeDifficultPasswordToGuess!\"\nSERVER_PUBLIC=0\nBACKUPS_MAX_AGE=30\n#SUPERVISOR_HTTP=true\n\n#Mods\n#VALHEIM_PLUS=true\n\nDISCORD_WEBHOOK=https://discord.com/api/webhooks/...........\n\nVALHEIM_LOG_FILTER_CONTAINS_Spawned=Got character ZDOID from\nON_VALHEIM_LOG_FILTER_CONTAINS_Spawned={ read l; l=${l:46}; l=${l// :*/}; msg=\"[$(date +'%b %d %T')] Player $l connected.\"; curl -sfSL -X POST -H \"Content-Type: application/json\" -d \"{\\\"username\\\":\\\"Hugin\\\",\\\"content\\\":\\\"$msg\\\"}\" \"$DISCORD_WEBHOOK\"; }\n"
        },
        {
          "name": "valheim.nomad",
          "type": "blob",
          "size": 0.751953125,
          "content": "job \"valheim\" {\n  datacenters = [\"dc1\"]\n\n  group \"valheim\" {\n    network {\n      mode = \"bridge\"\n      port \"game1\" {\n        static = 2456\n        to = 2456\n      }\n      port \"game2\" {\n        static = 2457\n        to = 2457\n      }\n      port \"supervisor\" {\n        static = 9001\n        to = 9001\n      }\n    }\n\n    task \"valheim-server\" {\n      driver = \"docker\"\n      env {\n        SERVER_NAME = \"Testserver_Nomad\"\n        WORLD_NAME = \"testworld\"\n        SERVER_PASS = \"secret\"\n      }\n      config {\n        image = \"ghcr.io/lloesche/valheim-server\"\n        volumes = [\n          \"/var/lib/valheim/config:/config\",\n          \"/var/lib/valheim/data:/opt/valheim\"\n        ]\n      }\n      resources {\n        cpu    = 6000\n        memory = 4096\n      }\n    }\n  }\n}\n"
        },
        {
          "name": "valheim.service",
          "type": "blob",
          "size": 0.6904296875,
          "content": "[Unit]\nDescription=Valheim Server\nAfter=docker.service\nRequires=docker.service\nConditionPathExists=/etc/sysconfig/valheim-server\n\n[Service]\nTimeoutStartSec=0\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStart=/usr/bin/docker run \\\n          --name %n \\\n          --pull=always \\\n          --rm \\\n          --cap-add=sys_nice \\\n          --stop-timeout 120 \\\n          -v /etc/valheim:/config:Z \\\n          -v /opt/valheim:/opt/valheim:Z \\\n          -p 2456-2457:2456-2457/udp \\\n          --env-file /etc/sysconfig/valheim-server \\\n          ghcr.io/lloesche/valheim-server\nExecStop=/usr/bin/docker stop %n\nRestart=always\nRestartSec=10s\n\n[Install]\nWantedBy=multi-user.target\n"
        }
      ]
    }
  ]
}