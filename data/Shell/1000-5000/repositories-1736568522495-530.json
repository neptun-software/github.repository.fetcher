{
  "metadata": {
    "timestamp": 1736568522495,
    "page": 530,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjUzOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "enki/libev",
      "stars": 1646,
      "defaultBranch": "master",
      "files": [
        {
          "name": "Changes",
          "type": "blob",
          "size": 27.060546875,
          "content": "Revision history for libev, a high-performance and full-featured event loop.\n\nTODO: ev_loop_wakeup\nTODO: EV_STANDALONE == NO_HASSEL (do not use clock_gettime in ev_standalone)\nTODO: faq, process a thing in each iteration\nTODO: dbeugging tips, ev_verify, ev_init twice\nTODO: ev_break for immediate exit (EVBREAK_NOW?)\nTODO: ev_feed_child_event\nTODO: document the special problem of signals around fork.\nTODO: store pid for each signal\nTODO: document file descriptor usage per loop\nTODO: store loop pid_t and compare isndie signal handler,store 1 for same, 2 for differign pid, clean up in loop_fork\nTODO: embed watchers need updating when fd changes\nTODO: document portability requirements for atomic pointer access\nTODO: document requirements for function pointers and calling conventions.\n\n4.22 Sun Dec 20 22:11:50 CET 2015\n\t- when epoll detects unremovable fds in the fd set, rebuild\n          only the epoll descriptor, not the signal pipe, to avoid\n          SIGPIPE in ev_async_send. This doesn't solve it on fork,\n          so document what needs to be done in ev_loop_fork\n          (analyzed by Benjamin Mahler).\n\t- remove superfluous sys/timeb.h include on win32\n          (analyzed by Jason Madden).\n        - updated libecb.\n\n4.20 Sat Jun 20 13:01:43 CEST 2015\n\t- prefer noexcept over throw () with C++ 11.\n        - update ecb.h due to incompatibilities with c11.\n        - fix a potential aliasing issue when reading and writing\n          watcher callbacks.\n\n4.19 Thu Sep 25 08:18:25 CEST 2014\n\t- ev.h wasn't valid C++ anymore, which tripped compilers other than\n          clang, msvc or gcc (analyzed by Raphael 'kena' Poss). Unfortunately,\n          C++ doesn't support typedefs for function pointers fully, so the affected\n          declarations have to spell out the types each time.\n\t- when not using autoconf, tighten the check for clock_gettime and related\n          functionality.\n\n4.18 Fri Sep  5 17:55:26 CEST 2014\n\t- events on files were not always generated properly with the\n          epoll backend (testcase by Assaf Inbal).\n\t- mark event pipe fd as cloexec after a fork (analyzed by Sami Farin).\n        - (ecb) support m68k, m88k and sh (patch by Miod Vallat).\n        - use a reasonable fallback for EV_NSIG instead of erroring out\n          when we can't detect the signal set size.\n        - in the absence of autoconf, do not use the clock syscall\n          on glibc >= 2.17 (avoids the syscall AND -lrt on systems\n          doing clock_gettime in userspace).\n        - ensure extern \"C\" function pointers are used for externally-visible\n          loop callbacks (not watcher callbacks yet).\n        - (ecb) work around memory barriers and volatile apparently both being\n          broken in visual studio 2008 and later (analysed and patch by Nicolas Noble).\n\n4.15 Fri Mar  1 12:04:50 CET 2013\n        - destroying a non-default loop would stop the global waitpid\n          watcher (Denis Bilenko).\n\t- queueing pending watchers of higher priority from a watcher now invokes\n          them in a timely fashion (reported by Denis Bilenko).\n\t- add throw() to all libev functions that cannot throw exceptions, for\n          further code size decrease when compiling for C++.\n        - add throw () to callbacks that must not throw exceptions (allocator,\n          syserr, loop acquire/release, periodic reschedule cbs).\n\t- fix event_base_loop return code, add event_get_callback, event_base_new,\n          event_base_get_method calls to improve libevent 1.x emulation and add\n          some libevent 2.x functionality (based on a patch by Jeff Davey).\n        - add more memory fences to fix a bug reported by Jeff Davey. Better\n          be overfenced than underprotected.\n\t- ev_run now returns a boolean status (true meaning watchers are\n          still active).\n\t- ev_once: undef EV_ERROR in ev_kqueue.c, to avoid clashing with\n          libev's EV_ERROR (reported by 191919).\n\t- (ecb) add memory fence support for xlC (Darin McBride).\n\t- (ecb) add memory fence support for gcc-mips (Anton Kirilov).\n\t- (ecb) add memory fence support for gcc-alpha (Christian Weisgerber).\n        - work around some kernels losing file descriptors by leaking\n          the kqueue descriptor in the child.\n        - work around linux inotify not reporting IN_ATTRIB changes for directories\n          in many cases.\n        - include sys/syscall.h instead of plain syscall.h.\n        - check for io watcher loops in ev_verify, check for the most\n          common reported usage bug in ev_io_start.\n        - choose socket vs. WSASocket at compiletime using EV_USE_WSASOCKET.\n        - always use WSASend/WSARecv directly on windows, hoping that this\n          works in all cases (unlike read/write/send/recv...).\n        - try to detect signals around a fork faster (test program by\n          Denis Bilenko).\n        - work around recent glibc versions that leak memory in realloc.\n        - rename ev::embed::set to ev::embed::set_embed to avoid clashing\n          the watcher base set (loop) method.\n        - rewrite the async/signal pipe logic to always keep a valid fd, which\n          simplifies (and hopefully correctifies :) the race checking\n          on fork, at the cost of one extra fd.\n        - add fat, msdos, jffs2, ramfs, ntfs and btrfs to the list of\n          inotify-supporting filesystems.\n        - move orig_CFLAGS assignment to after AC_INIT, as newer autoconf\n          versions ignore it before\n          (https://bugzilla.redhat.com/show_bug.cgi?id=908096).\n        - add some untested android support.\n        - enum expressions must be of type int (reported by Juan Pablo L).\n\n4.11 Sat Feb  4 19:52:39 CET 2012\n\t- INCOMPATIBLE CHANGE: ev_timer_again now clears the pending status, as\n          was documented already, but not implemented in the repeating case.\n        - new compiletime symbols: EV_NO_SMP and EV_NO_THREADS.\n\t- fix a race where the workaround against the epoll fork bugs\n          caused signals to not be handled anymore.\n\t- correct backend_fudge for most backends, and implement a windows\n          specific workaround to avoid looping because we call both\n          select and Sleep, both with different time resolutions.\n        - document range and guarantees of ev_sleep.\n        - document reasonable ranges for periodics interval and offset.\n        - rename backend_fudge to backend_mintime to avoid future confusion :)\n\t- change the default periodic reschedule function to hopefully be more\n          exact and correct even in corner cases or in the far future.\n        - do not rely on -lm anymore: use it when available but use our\n          own floor () if it is missing. This should make it easier to embed,\n          as no external libraries are required.\n        - strategically import macros from libecb and mark rarely-used functions\n          as cache-cold (saving almost 2k code size on typical amd64 setups).\n        - add Symbols.ev and Symbols.event files, that were missing.\n        - fix backend_mintime value for epoll (was 1/1024, is 1/1000 now).\n        - fix #3 \"be smart about timeouts\" to not \"deadlock\" when\n          timeout == now, also improve the section overall.\n        - avoid \"AVOIDING FINISHING BEFORE RETURNING\" idiom.\n        - support new EV_API_STATIC mode to make all libev symbols\n          static.\n        - supply default CFLAGS of -g -O3 with gcc when original CFLAGS\n          were empty.\n\n4.04 Wed Feb 16 09:01:51 CET 2011\n\t- fix two problems in the native win32 backend, where reuse of fd's\n          with different underlying handles caused handles not to be removed\n          or added to the select set (analyzed and tested by Bert Belder).\n\t- do no rely on ceil() in ev_e?poll.c.\n        - backport libev to HP-UX versions before 11 v3.\n        - configure did not detect nanosleep and clock_gettime properly when\n          they are available in the libc (as opposed to -lrt).\n\n4.03 Tue Jan 11 14:37:25 CET 2011\n\t- officially support polling files with all backends.\n\t- support files, /dev/zero etc. the same way as select in the epoll\n          backend, by generating events on our own.\n        - ports backend: work around solaris bug 6874410 and many related ones\n          (EINTR, maybe more), with no performance loss (note that the solaris\n          bug report is actually wrong, reality is far more bizarre and broken\n          than that).\n\t- define EV_READ/EV_WRITE as macros in event.h, as some programs use\n          #ifdef to test for them.\n        - new (experimental) function: ev_feed_signal.\n        - new (to become default) EVFLAG_NOSIGMASK flag.\n        - new EVBACKEND_MASK symbol.\n        - updated COMMON IDIOMS SECTION.\n\n4.01 Fri Nov  5 21:51:29 CET 2010\n        - automake fucked it up, apparently, --add-missing -f is not quite enough\n          to make it update its files, so 4.00 didn't install ev++.h and\n          event.h on make install. grrr.\n        - ev_loop(count|depth) didn't return anything (Robin Haberkorn).\n        - change EV_UNDEF to 0xffffffff to silence some overzealous compilers.\n        - use \"(libev) \" prefix for all libev error messages now.\n\n4.00 Mon Oct 25 12:32:12 CEST 2010\n\t- \"PORTING FROM LIBEV 3.X TO 4.X\" (in ev.pod) is recommended reading.\n\t- ev_embed_stop did not correctly stop the watcher (very good\n          testcase by Vladimir Timofeev).\n        - ev_run will now always update the current loop time - it erroneously\n          didn't when idle watchers were active, causing timers not to fire.\n        - fix a bug where a timeout of zero caused the timer not to fire\n          in the libevent emulation (testcase by Péter Szabó).\n\t- applied win32 fixes by Michael Lenaghan (also James Mansion).\n\t- replace EV_MINIMAL by EV_FEATURES.\n        - prefer EPOLL_CTL_ADD over EPOLL_CTL_MOD in some more cases, as it\n          seems the former is *much* faster than the latter.\n        - linux kernel version detection (for inotify bug workarounds)\n          did not work properly.\n        - reduce the number of spurious wake-ups with the ports backend.\n        - remove dependency on sys/queue.h on freebsd (patch by Vanilla Hsu).\n        - do async init within ev_async_start, not ev_async_set, which avoids\n          an API quirk where the set function must be called in the C++ API\n          even when there is nothing to set.\n        - add (undocumented) EV_ENABLE when adding events with kqueue,\n          this might help with OS X, which seems to need it despite documenting\n          not to need it (helpfully pointed out by Tilghman Lesher).\n        - do not use poll by default on freebsd, it's broken (what isn't\n          on freebsd...).\n        - allow to embed epoll on kernels >= 2.6.32.\n        - configure now prepends -O3, not appends it, so one can still\n          override it.\n        - ev.pod: greatly expanded the portability section, added a porting\n          section, a description of watcher states and made lots of minor fixes.\n        - disable poll backend on AIX, the poll header spams the namespace\n          and it's not worth working around dead platforms (reported\n          and analyzed by Aivars Kalvans).\n        - improve header file compatibility of the standalone eventfd code\n          in an obscure case.\n        - implement EV_AVOID_STDIO option.\n        - do not use sscanf to parse linux version number (smaller, faster,\n          no sscanf dependency).\n        - new EV_CHILD_ENABLE and EV_SIGNAL_ENABLE configurable settings.\n        - update libev.m4 HAVE_CLOCK_SYSCALL test for newer glibcs.\n        - add section on accept() problems to the manpage.\n        - rename EV_TIMEOUT to EV_TIMER.\n        - rename ev_loop_count/depth/verify/loop/unloop.\n        - remove ev_default_destroy and ev_default_fork.\n        - switch to two-digit minor version.\n        - work around an apparent gentoo compiler bug.\n        - define _DARWIN_UNLIMITED_SELECT. just so.\n        - use enum instead of #define for most constants.\n        - improve compatibility to older C++ compilers.\n        - (experimental) ev_run/ev_default_loop/ev_break/ev_loop_new have now\n          default arguments when compiled as C++.\n        - enable automake dependency tracking.\n        - ev_loop_new no longer leaks memory when loop creation failed.\n        - new ev_cleanup watcher type.\n\n3.9  Thu Dec 31 07:59:59 CET 2009\n\t- signalfd is no longer used by default and has to be requested\n          explicitly - this means that easy to catch bugs become hard to\n          catch race conditions, but the users have spoken.\n        - point out the unspecified signal mask in the documentation, and\n          that this is a race condition regardless of EV_SIGNALFD.\n\t- backport inotify code to C89.\n        - inotify file descriptors could leak into child processes.\n        - ev_stat watchers could keep an erroneous extra ref on the loop,\n          preventing exit when unregistering all watchers (testcases\n          provided by ry@tinyclouds.org).\n        - implement EV_WIN32_HANDLE_TO_FD and EV_WIN32_CLOSE_FD configuration\n          symbols to make it easier for apps to do their own fd management.\n        - support EV_IDLE_ENABLE being disabled in ev++.h\n          (patch by Didier Spezia).\n        - take advantage of inotify_init1, if available, to set cloexec/nonblock\n          on fd creation, to avoid races.\n        - the signal handling pipe wasn't always initialised under windows\n          (analysed by lekma).\n        - changed minimum glibc requirement from glibc 2.9 to 2.7, for\n          signalfd.\n        - add missing string.h include (Denis F. Latypoff).\n        - only replace ev_stat.prev when we detect an actual difference,\n          so prev is (almost) always different to attr. this might\n          have caused the problems with 04_stat.t.\n        - add ev::timer->remaining () method to C++ API.\n\n3.8  Sun Aug  9 14:30:45 CEST 2009\n\t- incompatible change: do not necessarily reset signal handler\n          to SIG_DFL when a sighandler is stopped.\n        - ev_default_destroy did not properly free or zero some members,\n          potentially causing crashes and memory corruption on repeated\n          ev_default_destroy/ev_default_loop calls.\n\t- take advantage of signalfd on GNU/Linux systems.\n\t- document that the signal mask might be in an unspecified\n          state when using libev's signal handling.\n        - take advantage of some GNU/Linux calls to set cloexec/nonblock\n          on fd creation, to avoid race conditions.\n\n3.7  Fri Jul 17 16:36:32 CEST 2009\n\t- ev_unloop and ev_loop wrongly used a global variable to exit loops,\n          instead of using a per-loop variable (bug caught by accident...).\n\t- the ev_set_io_collect_interval interpretation has changed.\n        - add new functionality: ev_set_userdata, ev_userdata,\n          ev_set_invoke_pending_cb, ev_set_loop_release_cb,\n          ev_invoke_pending, ev_pending_count, together with a long example\n          about thread locking.\n        - add ev_timer_remaining (as requested by Denis F. Latypoff).\n        - add ev_loop_depth.\n        - calling ev_unloop in fork/prepare watchers will no longer poll\n          for new events.\n\t- Denis F. Latypoff corrected many typos in example code snippets.\n        - honor autoconf detection of EV_USE_CLOCK_SYSCALL, also double-\n          check that the syscall number is available before trying to\n          use it (reported by ry@tinyclouds).\n        - use GetSystemTimeAsFileTime instead of _timeb on windows, for\n          slightly higher accuracy.\n        - properly declare ev_loop_verify and ev_now_update even when\n          !EV_MULTIPLICITY.\n        - do not compile in any priority code when EV_MAXPRI == EV_MINPRI.\n        - support EV_MINIMAL==2 for a reduced API.\n        - actually 0-initialise struct sigaction when installing signals.\n        - add section on hibernate and stopped processes to ev_timer docs.\n\n3.6  Tue Apr 28 02:49:30 CEST 2009\n\t- multiple timers becoming ready within an event loop iteration\n          will be invoked in the \"correct\" order now.\n\t- do not leave the event loop early just because we have no active\n          watchers, fixing a problem when embedding a kqueue loop\n          that has active kernel events but no registered watchers\n          (reported by blacksand blacksand).\n\t- correctly zero the idx values for arrays, so destroying and\n          reinitialising the default loop actually works (patch by\n          Malek Hadj-Ali).\n        - implement ev_suspend and ev_resume.\n        - new EV_CUSTOM revents flag for use by applications.\n        - add documentation section about priorities.\n        - add a glossary to the documentation.\n        - extend the ev_fork description slightly.\n        - optimize a jump out of call_pending.\n\n3.53 Sun Feb 15 02:38:20 CET 2009\n\t- fix a bug in event pipe creation on win32 that would cause a\n          failed assertion on event loop creation (patch by Malek Hadj-Ali).\n\t- probe for CLOCK_REALTIME support at runtime as well and fall\n          back to gettimeofday if there is an error, to support older\n          operating systems with newer header files/libraries.\n        - prefer gettimeofday over clock_gettime with USE_CLOCK_SYSCALL\n          (default most everywhere), otherwise not.\n\n3.52 Wed Jan  7 21:43:02 CET 2009\n\t- fix compilation of select backend in fd_set mode when NFDBITS is\n          missing (to get it to compile on QNX, reported by Rodrigo Campos).\n        - better select-nfds handling when select backend is in fd_set mode.\n        - diagnose fd_set overruns when select backend is in fd_set mode.\n        - due to a thinko, instead of disabling everything but\n          select on the borked OS X platform, everything but select was\n          allowed (reported by Emanuele Giaquinta).\n        - actually verify that local and remote port are matching in\n          libev's socketpair emulation, which makes denial-of-service\n          attacks harder (but not impossible - it's windows). Make sure\n          it even works under vista, which thinks that getpeer/sockname\n          should return fantasy port numbers.\n        - include \"libev\" in all assertion messages for potentially\n          clearer diagnostics.\n        - event_get_version (libevent compatibility) returned\n          a useless string instead of the expected version string\n          (patch by W.C.A. Wijngaards).\n\n3.51 Wed Dec 24 23:00:11 CET 2008\n        - fix a bug where an inotify watcher was added twice, causing\n          freezes on hash collisions (reported and analysed by Graham Leggett).\n\t- new config symbol, EV_USE_CLOCK_SYSCALL, to make libev use\n          a direct syscall - slower, but no dependency on librt et al.\n        - assume negative return values != -1 signals success of port_getn\n          (http://cvs.epicsol.org/cgi/viewcvs.cgi/epic5/source/newio.c?rev=1.52)\n          (no known failure reports, but it doesn't hurt).\n        - fork detection in ev_embed now stops and restarts the watcher\n          automatically.\n        - EXPERIMENTAL: default the method to operator () in ev++.h,\n          to make it nicer to use functors (requested by Benedek László).\n        - fixed const object callbacks in ev++.h.\n        - replaced loop_ref argument of watcher.set (loop) by a direct\n          ev_loop * in ev++.h, to avoid clashes with functor patch.\n        - do not try to watch the empty string via inotify.\n        - inotify watchers could be leaked under certain circumstances.\n        - OS X 10.5 is actually even more broken than earlier versions,\n          so fall back to select on that piece of garbage.\n        - fixed some weirdness in the ev_embed documentation.\n\n3.49 Wed Nov 19 11:26:53 CET 2008\n\t- ev_stat watchers will now use inotify as a mere hint on\n          kernels <2.6.25, or if the filesystem is not in the\n          \"known to be good\" list.\n        - better mingw32 compatibility (it's not as borked as native win32)\n          (analysed by Roger Pack).\n        - include stdio.h in the example program, as too many people are\n          confused by the weird C language otherwise. I guess the next thing\n          I get told is that the \"...\" ellipses in the examples don't compile\n          with their C compiler.\n\n3.48 Thu Oct 30 09:02:37 CET 2008\n\t- further optimise away the EPOLL_CTL_ADD/MOD combo in the epoll\n          backend by assuming the kernel event mask hasn't changed if\n          ADD fails with EEXIST.\n        - work around spurious event notification bugs in epoll by using\n          a 32-bit generation counter. recreate kernel state if we receive\n          spurious notifications or unwanted events. this is very costly,\n          but I didn't come up with this horrible design.\n        - use memset to initialise most arrays now and do away with the\n          init functions.\n        - expand time-out strategies into a \"Be smart about timeouts\" section.\n        - drop the \"struct\" from all ev_watcher declarations in the\n          documentation and did other clarifications (yeah, it was a mistake\n          to have a struct AND a function called ev_loop).\n\t- fix a bug where ev_default would not initialise the default\n          loop again after it was destroyed with ev_default_destroy.\n        - rename syserr to ev_syserr to avoid name clashes when embedding,\n          do similar changes for event.c.\n\n3.45 Tue Oct 21 21:59:26 CEST 2008\n\t- disable inotify usage on linux <2.6.25, as it is broken\n          (reported by Yoann Vandoorselaere).\n        - ev_stat erroneously would try to add inotify watchers\n          even when inotify wasn't available (this should only\n          have a performance impact).\n\t- ev_once now passes both timeout and io to the callback if both\n          occur concurrently, instead of giving timeouts precedence.\n\t- disable EV_USE_INOTIFY when sys/inotify.h is too old.\n\n3.44 Mon Sep 29 05:18:39 CEST 2008\n\t- embed watchers now automatically invoke ev_loop_fork on the\n          embedded loop when the parent loop forks.\n\t- new function: ev_now_update (loop).\n\t- verify_watcher was not marked static.\n        - improve the \"associating...\" manpage section.\n        - documentation tweaks here and there.\n\n3.43 Sun Jul  6 05:34:41 CEST 2008\n\t- include more include files on windows to get struct _stati64\n          (reported by Chris Hulbert, but doesn't quite fix his issue).\n\t- add missing #include <io.h> in ev.c on windows (reported by\n          Matt Tolton).\n\n3.42 Tue Jun 17 12:12:07 CEST 2008\n\t- work around yet another windows bug: FD_SET actually adds fd's\n          multiple times to the fd_*SET*, despite official MSN docs claiming\n          otherwise. Reported and well-analysed by Matt Tolton.\n\t- define NFDBITS to 0 when EV_SELECT_IS_WINSOCKET to make it compile\n          (reported any analysed by Chris Hulbert).\n        - fix a bug in ev_ebadf (this function is only used to catch\n          programming errors in the libev user). reported by Matt Tolton.\n        - fix a bug in fd_intern on win32 (could lead to compile errors\n          under some circumstances, but would work correctly if it compiles).\n          reported by Matt Tolton.\n        - (try to) work around missing lstat on windows.\n\t- pass in the write fd set as except fd set under windows. windows\n          is so uncontrollably lame that it requires this. this means that\n          switching off oobinline is not supported (but tcp/ip doesn't\n          have oob, so that would be stupid anyways.\n        - use posix module symbol to auto-detect monotonic clock presence\n          and some other default values.\n\n3.41 Fri May 23 18:42:54 CEST 2008\n\t- work around an obscure bug in winsocket select: if you\n          provide only empty fd sets then select returns WSAEINVAL. how sucky.\n        - improve timer scheduling stability and reduce use of time_epsilon.\n        - use 1-based 2-heap for EV_MINIMAL, simplifies code, reduces\n          codesize and makes for better cache-efficiency.\n        - use 3-based 4-heap for !EV_MINIMAL. this makes better use\n          of cpu cache lines and gives better growth behaviour than\n          2-based heaps.\n        - cache timestamp within heap for !EV_MINIMAL, to avoid random\n          memory accesses.\n        - document/add EV_USE_4HEAP and EV_HEAP_CACHE_AT.\n        - fix a potential aliasing issue in ev_timer_again.\n        - add/document ev_periodic_at, retract direct access to ->at.\n        - improve ev_stat docs.\n        - add portability requirements section.\n\t- fix manpage headers etc.\n        - normalise WSA error codes to lower range on windows.\n        - add consistency check code that can be called automatically\n          or on demand to check for internal structures (ev_loop_verify).\n\n3.31 Wed Apr 16 20:45:04 CEST 2008\n\t- added last minute fix for ev_poll.c by Brandon Black.\n\n3.3  Wed Apr 16 19:04:10 CEST 2008\n        - event_base_loopexit should return 0 on success\n          (W.C.A. Wijngaards).\n\t- added linux eventfd support.\n        - try to autodetect epoll and inotify support\n          by libc header version if not using autoconf.\n        - new symbols: EV_DEFAULT_UC and EV_DEFAULT_UC_.\n        - declare functions defined in ev.h as inline if\n          C99 or gcc are available.\n        - enable inlining with gcc versions 2 and 3.\n        - work around broken poll implementations potentially\n          not clearing revents field in ev_poll (Brandon Black)\n          (no such systems are known at this time).\n        - work around a bug in realloc on openbsd and darwin,\n          also makes the erroneous valgrind complaints\n          go away (noted by various people).\n        - fix ev_async_pending, add c++ wrapper for ev_async\n          (based on patch sent by Johannes Deisenhofer).\n        - add sensible set method to ev::embed.\n        - made integer constants type int in ev.h.\n\n3.2  Wed Apr  2 17:11:19 CEST 2008\n\t- fix a 64 bit overflow issue in the select backend,\n          by using fd_mask instead of int for the mask.\n        - rename internal sighandler to avoid clash with very old perls.\n        - entering ev_loop will not clear the ONESHOT or NONBLOCKING\n          flags of any outer loops anymore.\n        - add ev_async_pending.\n\n3.1  Thu Mar 13 13:45:22 CET 2008\n\t- implement ev_async watchers.\n        - only initialise signal pipe on demand.\n\t- make use of sig_atomic_t configurable.\n        - improved documentation.\n\n3.0  Mon Jan 28 13:14:47 CET 2008\n\t- API/ABI bump to version 3.0.\n\t- ev++.h includes \"ev.h\" by default now, not <ev.h>.\n\t- slightly improved documentation.\n\t- speed up signal detection after a fork.\n        - only optionally return trace status changed in ev_child\n          watchers.\n        - experimental (and undocumented) loop wrappers for ev++.h.\n\n2.01 Tue Dec 25 08:04:41 CET 2007\n\t- separate Changes file.\n\t- fix ev_path_set => ev_stat_set typo.\n        - remove event_compat.h from the libev tarball.\n        - change how include files are found.\n        - doc updates.\n        - update licenses, explicitly allow for GPL relicensing.\n\n2.0  Sat Dec 22 17:47:03 CET 2007\n        - new ev_sleep, ev_set_(io|timeout)_collect_interval.\n        - removed epoll from embeddable fd set.\n        - fix embed watchers.\n\t- renamed ev_embed.loop to other.\n\t- added exported Symbol tables.\n        - undefine member wrapper macros at the end of ev.c.\n        - respect EV_H in ev++.h.\n\n1.86 Tue Dec 18 02:36:57 CET 2007\n\t- fix memleak on loop destroy (not relevant for perl).\n\n1.85 Fri Dec 14 20:32:40 CET 2007\n        - fix some aliasing issues w.r.t. timers and periodics\n          (not relevant for perl).\n\n(for historic versions refer to EV/Changes, found in the Perl interface)\n\n0.1  Wed Oct 31 21:31:48 CET 2007\n\t- original version; hacked together in <24h.\n\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 2.0068359375,
          "content": "All files in libev are\nCopyright (c)2007,2008,2009,2010,2011,2012,2013 Marc Alexander Lehmann.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are\nmet:\n\n    * Redistributions of source code must retain the above copyright\n      notice, this list of conditions and the following disclaimer.\n\n    * Redistributions in binary form must reproduce the above\n      copyright notice, this list of conditions and the following\n      disclaimer in the documentation and/or other materials provided\n      with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n\"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\nLIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\nA PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\nOWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\nSPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\nLIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\nDATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\nTHEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\nAlternatively, the contents of this package may be used under the terms\nof the GNU General Public License (\"GPL\") version 2 or any later version,\nin which case the provisions of the GPL are applicable instead of the\nabove. If you wish to allow the use of your version of this package only\nunder the terms of the GPL and not to allow others to use your version of\nthis file under the BSD license, indicate your decision by deleting the\nprovisions above and replace them with the notice and other provisions\nrequired by the GPL in this and the other files of this package. If you do\nnot delete the provisions above, a recipient may use your version of this\nfile under either the BSD or the GPL.\n"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 0.5205078125,
          "content": "AUTOMAKE_OPTIONS = foreign\n\nVERSION_INFO = 4:0:0\n\nEXTRA_DIST = LICENSE Changes libev.m4 autogen.sh \\\n\t     ev_vars.h ev_wrap.h \\\n\t     ev_epoll.c ev_select.c ev_poll.c ev_kqueue.c ev_port.c ev_win32.c \\\n\t     ev.3 ev.pod Symbols.ev Symbols.event\n\nman_MANS = ev.3\n\ninclude_HEADERS = ev.h ev++.h event.h\n\nlib_LTLIBRARIES = libev.la\n\nlibev_la_SOURCES = ev.c event.c\nlibev_la_LDFLAGS = -version-info $(VERSION_INFO)\n\nev.3: ev.pod\n\tpod2man -n LIBEV -r \"libev-$(VERSION)\" -c \"libev - high performance full featured event loop\" -s3 <$< >$@\n"
        },
        {
          "name": "Makefile.in",
          "type": "blob",
          "size": 29.25390625,
          "content": "# Makefile.in generated by automake 1.14.1 from Makefile.am.\n# @configure_input@\n\n# Copyright (C) 1994-2013 Free Software Foundation, Inc.\n\n# This Makefile.in is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\n@SET_MAKE@\n\n\nVPATH = @srcdir@\nam__is_gnu_make = test -n '$(MAKEFILE_LIST)' && test -n '$(MAKELEVEL)'\nam__make_running_with_option = \\\n  case $${target_option-} in \\\n      ?) ;; \\\n      *) echo \"am__make_running_with_option: internal error: invalid\" \\\n              \"target option '$${target_option-}' specified\" >&2; \\\n         exit 1;; \\\n  esac; \\\n  has_opt=no; \\\n  sane_makeflags=$$MAKEFLAGS; \\\n  if $(am__is_gnu_make); then \\\n    sane_makeflags=$$MFLAGS; \\\n  else \\\n    case $$MAKEFLAGS in \\\n      *\\\\[\\ \\\t]*) \\\n        bs=\\\\; \\\n        sane_makeflags=`printf '%s\\n' \"$$MAKEFLAGS\" \\\n          | sed \"s/$$bs$$bs[$$bs $$bs\t]*//g\"`;; \\\n    esac; \\\n  fi; \\\n  skip_next=no; \\\n  strip_trailopt () \\\n  { \\\n    flg=`printf '%s\\n' \"$$flg\" | sed \"s/$$1.*$$//\"`; \\\n  }; \\\n  for flg in $$sane_makeflags; do \\\n    test $$skip_next = yes && { skip_next=no; continue; }; \\\n    case $$flg in \\\n      *=*|--*) continue;; \\\n        -*I) strip_trailopt 'I'; skip_next=yes;; \\\n      -*I?*) strip_trailopt 'I';; \\\n        -*O) strip_trailopt 'O'; skip_next=yes;; \\\n      -*O?*) strip_trailopt 'O';; \\\n        -*l) strip_trailopt 'l'; skip_next=yes;; \\\n      -*l?*) strip_trailopt 'l';; \\\n      -[dEDm]) skip_next=yes;; \\\n      -[JT]) skip_next=yes;; \\\n    esac; \\\n    case $$flg in \\\n      *$$target_option*) has_opt=yes; break;; \\\n    esac; \\\n  done; \\\n  test $$has_opt = yes\nam__make_dryrun = (target_option=n; $(am__make_running_with_option))\nam__make_keepgoing = (target_option=k; $(am__make_running_with_option))\npkgdatadir = $(datadir)/@PACKAGE@\npkgincludedir = $(includedir)/@PACKAGE@\npkglibdir = $(libdir)/@PACKAGE@\npkglibexecdir = $(libexecdir)/@PACKAGE@\nam__cd = CDPATH=\"$${ZSH_VERSION+.}$(PATH_SEPARATOR)\" && cd\ninstall_sh_DATA = $(install_sh) -c -m 644\ninstall_sh_PROGRAM = $(install_sh) -c\ninstall_sh_SCRIPT = $(install_sh) -c\nINSTALL_HEADER = $(INSTALL_DATA)\ntransform = $(program_transform_name)\nNORMAL_INSTALL = :\nPRE_INSTALL = :\nPOST_INSTALL = :\nNORMAL_UNINSTALL = :\nPRE_UNINSTALL = :\nPOST_UNINSTALL = :\nbuild_triplet = @build@\nhost_triplet = @host@\nsubdir = .\nDIST_COMMON = $(srcdir)/Makefile.in $(srcdir)/Makefile.am \\\n\t$(top_srcdir)/configure $(am__configure_deps) \\\n\t$(srcdir)/config.h.in mkinstalldirs depcomp $(include_HEADERS) \\\n\tREADME compile config.guess config.sub install-sh missing \\\n\tltmain.sh\nACLOCAL_M4 = $(top_srcdir)/aclocal.m4\nam__aclocal_m4_deps = $(top_srcdir)/libev.m4 \\\n\t$(top_srcdir)/configure.ac\nam__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \\\n\t$(ACLOCAL_M4)\nam__CONFIG_DISTCLEAN_FILES = config.status config.cache config.log \\\n configure.lineno config.status.lineno\nmkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs\nCONFIG_HEADER = config.h\nCONFIG_CLEAN_FILES =\nCONFIG_CLEAN_VPATH_FILES =\nam__vpath_adj_setup = srcdirstrip=`echo \"$(srcdir)\" | sed 's|.|.|g'`;\nam__vpath_adj = case $$p in \\\n    $(srcdir)/*) f=`echo \"$$p\" | sed \"s|^$$srcdirstrip/||\"`;; \\\n    *) f=$$p;; \\\n  esac;\nam__strip_dir = f=`echo $$p | sed -e 's|^.*/||'`;\nam__install_max = 40\nam__nobase_strip_setup = \\\n  srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*|]/\\\\\\\\&/g'`\nam__nobase_strip = \\\n  for p in $$list; do echo \"$$p\"; done | sed -e \"s|$$srcdirstrip/||\"\nam__nobase_list = $(am__nobase_strip_setup); \\\n  for p in $$list; do echo \"$$p $$p\"; done | \\\n  sed \"s| $$srcdirstrip/| |;\"' / .*\\//!s/ .*/ ./; s,\\( .*\\)/[^/]*$$,\\1,' | \\\n  $(AWK) 'BEGIN { files[\".\"] = \"\" } { files[$$2] = files[$$2] \" \" $$1; \\\n    if (++n[$$2] == $(am__install_max)) \\\n      { print $$2, files[$$2]; n[$$2] = 0; files[$$2] = \"\" } } \\\n    END { for (dir in files) print dir, files[dir] }'\nam__base_list = \\\n  sed '$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;$$!N;s/\\n/ /g' | \\\n  sed '$$!N;$$!N;$$!N;$$!N;s/\\n/ /g'\nam__uninstall_files_from_dir = { \\\n  test -z \"$$files\" \\\n    || { test ! -d \"$$dir\" && test ! -f \"$$dir\" && test ! -r \"$$dir\"; } \\\n    || { echo \" ( cd '$$dir' && rm -f\" $$files \")\"; \\\n         $(am__cd) \"$$dir\" && rm -f $$files; }; \\\n  }\nam__installdirs = \"$(DESTDIR)$(libdir)\" \"$(DESTDIR)$(man3dir)\" \\\n\t\"$(DESTDIR)$(includedir)\"\nLTLIBRARIES = $(lib_LTLIBRARIES)\nlibev_la_LIBADD =\nam_libev_la_OBJECTS = ev.lo event.lo\nlibev_la_OBJECTS = $(am_libev_la_OBJECTS)\nAM_V_lt = $(am__v_lt_@AM_V@)\nam__v_lt_ = $(am__v_lt_@AM_DEFAULT_V@)\nam__v_lt_0 = --silent\nam__v_lt_1 = \nlibev_la_LINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n\t$(libev_la_LDFLAGS) $(LDFLAGS) -o $@\nAM_V_P = $(am__v_P_@AM_V@)\nam__v_P_ = $(am__v_P_@AM_DEFAULT_V@)\nam__v_P_0 = false\nam__v_P_1 = :\nAM_V_GEN = $(am__v_GEN_@AM_V@)\nam__v_GEN_ = $(am__v_GEN_@AM_DEFAULT_V@)\nam__v_GEN_0 = @echo \"  GEN     \" $@;\nam__v_GEN_1 = \nAM_V_at = $(am__v_at_@AM_V@)\nam__v_at_ = $(am__v_at_@AM_DEFAULT_V@)\nam__v_at_0 = @\nam__v_at_1 = \nDEFAULT_INCLUDES = -I.@am__isrc@\ndepcomp = $(SHELL) $(top_srcdir)/depcomp\nam__depfiles_maybe = depfiles\nam__mv = mv -f\nCOMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \\\n\t$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)\nLTCOMPILE = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n\t$(LIBTOOLFLAGS) --mode=compile $(CC) $(DEFS) \\\n\t$(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) \\\n\t$(AM_CFLAGS) $(CFLAGS)\nAM_V_CC = $(am__v_CC_@AM_V@)\nam__v_CC_ = $(am__v_CC_@AM_DEFAULT_V@)\nam__v_CC_0 = @echo \"  CC      \" $@;\nam__v_CC_1 = \nCCLD = $(CC)\nLINK = $(LIBTOOL) $(AM_V_lt) --tag=CC $(AM_LIBTOOLFLAGS) \\\n\t$(LIBTOOLFLAGS) --mode=link $(CCLD) $(AM_CFLAGS) $(CFLAGS) \\\n\t$(AM_LDFLAGS) $(LDFLAGS) -o $@\nAM_V_CCLD = $(am__v_CCLD_@AM_V@)\nam__v_CCLD_ = $(am__v_CCLD_@AM_DEFAULT_V@)\nam__v_CCLD_0 = @echo \"  CCLD    \" $@;\nam__v_CCLD_1 = \nSOURCES = $(libev_la_SOURCES)\nDIST_SOURCES = $(libev_la_SOURCES)\nam__can_run_installinfo = \\\n  case $$AM_UPDATE_INFO_DIR in \\\n    n|no|NO) false;; \\\n    *) (install-info --version) >/dev/null 2>&1;; \\\n  esac\nman3dir = $(mandir)/man3\nNROFF = nroff\nMANS = $(man_MANS)\nHEADERS = $(include_HEADERS)\nam__tagged_files = $(HEADERS) $(SOURCES) $(TAGS_FILES) \\\n\t$(LISP)config.h.in\n# Read a list of newline-separated strings from the standard input,\n# and print each of them once, without duplicates.  Input order is\n# *not* preserved.\nam__uniquify_input = $(AWK) '\\\n  BEGIN { nonempty = 0; } \\\n  { items[$$0] = 1; nonempty = 1; } \\\n  END { if (nonempty) { for (i in items) print i; }; } \\\n'\n# Make sure the list of sources is unique.  This is necessary because,\n# e.g., the same source file might be shared among _SOURCES variables\n# for different programs/libraries.\nam__define_uniq_tagged_files = \\\n  list='$(am__tagged_files)'; \\\n  unique=`for i in $$list; do \\\n    if test -f \"$$i\"; then echo $$i; else echo $(srcdir)/$$i; fi; \\\n  done | $(am__uniquify_input)`\nETAGS = etags\nCTAGS = ctags\nCSCOPE = cscope\nAM_RECURSIVE_TARGETS = cscope\nDISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)\ndistdir = $(PACKAGE)-$(VERSION)\ntop_distdir = $(distdir)\nam__remove_distdir = \\\n  if test -d \"$(distdir)\"; then \\\n    find \"$(distdir)\" -type d ! -perm -200 -exec chmod u+w {} ';' \\\n      && rm -rf \"$(distdir)\" \\\n      || { sleep 5 && rm -rf \"$(distdir)\"; }; \\\n  else :; fi\nam__post_remove_distdir = $(am__remove_distdir)\nDIST_ARCHIVES = $(distdir).tar.gz\nGZIP_ENV = --best\nDIST_TARGETS = dist-gzip\ndistuninstallcheck_listfiles = find . -type f -print\nam__distuninstallcheck_listfiles = $(distuninstallcheck_listfiles) \\\n  | sed 's|^\\./|$(prefix)/|' | grep -v '$(infodir)/dir$$'\ndistcleancheck_listfiles = find . -type f -print\nACLOCAL = @ACLOCAL@\nAMTAR = @AMTAR@\nAM_DEFAULT_VERBOSITY = @AM_DEFAULT_VERBOSITY@\nAR = @AR@\nAUTOCONF = @AUTOCONF@\nAUTOHEADER = @AUTOHEADER@\nAUTOMAKE = @AUTOMAKE@\nAWK = @AWK@\nCC = @CC@\nCCDEPMODE = @CCDEPMODE@\nCFLAGS = @CFLAGS@\nCPP = @CPP@\nCPPFLAGS = @CPPFLAGS@\nCYGPATH_W = @CYGPATH_W@\nDEFS = @DEFS@\nDEPDIR = @DEPDIR@\nDLLTOOL = @DLLTOOL@\nDSYMUTIL = @DSYMUTIL@\nDUMPBIN = @DUMPBIN@\nECHO_C = @ECHO_C@\nECHO_N = @ECHO_N@\nECHO_T = @ECHO_T@\nEGREP = @EGREP@\nEXEEXT = @EXEEXT@\nFGREP = @FGREP@\nGREP = @GREP@\nINSTALL = @INSTALL@\nINSTALL_DATA = @INSTALL_DATA@\nINSTALL_PROGRAM = @INSTALL_PROGRAM@\nINSTALL_SCRIPT = @INSTALL_SCRIPT@\nINSTALL_STRIP_PROGRAM = @INSTALL_STRIP_PROGRAM@\nLD = @LD@\nLDFLAGS = @LDFLAGS@\nLIBOBJS = @LIBOBJS@\nLIBS = @LIBS@\nLIBTOOL = @LIBTOOL@\nLIPO = @LIPO@\nLN_S = @LN_S@\nLTLIBOBJS = @LTLIBOBJS@\nMAINT = @MAINT@\nMAKEINFO = @MAKEINFO@\nMANIFEST_TOOL = @MANIFEST_TOOL@\nMKDIR_P = @MKDIR_P@\nNM = @NM@\nNMEDIT = @NMEDIT@\nOBJDUMP = @OBJDUMP@\nOBJEXT = @OBJEXT@\nOTOOL = @OTOOL@\nOTOOL64 = @OTOOL64@\nPACKAGE = @PACKAGE@\nPACKAGE_BUGREPORT = @PACKAGE_BUGREPORT@\nPACKAGE_NAME = @PACKAGE_NAME@\nPACKAGE_STRING = @PACKAGE_STRING@\nPACKAGE_TARNAME = @PACKAGE_TARNAME@\nPACKAGE_URL = @PACKAGE_URL@\nPACKAGE_VERSION = @PACKAGE_VERSION@\nPATH_SEPARATOR = @PATH_SEPARATOR@\nRANLIB = @RANLIB@\nSED = @SED@\nSET_MAKE = @SET_MAKE@\nSHELL = @SHELL@\nSTRIP = @STRIP@\nVERSION = @VERSION@\nabs_builddir = @abs_builddir@\nabs_srcdir = @abs_srcdir@\nabs_top_builddir = @abs_top_builddir@\nabs_top_srcdir = @abs_top_srcdir@\nac_ct_AR = @ac_ct_AR@\nac_ct_CC = @ac_ct_CC@\nac_ct_DUMPBIN = @ac_ct_DUMPBIN@\nam__include = @am__include@\nam__leading_dot = @am__leading_dot@\nam__quote = @am__quote@\nam__tar = @am__tar@\nam__untar = @am__untar@\nbindir = @bindir@\nbuild = @build@\nbuild_alias = @build_alias@\nbuild_cpu = @build_cpu@\nbuild_os = @build_os@\nbuild_vendor = @build_vendor@\nbuilddir = @builddir@\ndatadir = @datadir@\ndatarootdir = @datarootdir@\ndocdir = @docdir@\ndvidir = @dvidir@\nexec_prefix = @exec_prefix@\nhost = @host@\nhost_alias = @host_alias@\nhost_cpu = @host_cpu@\nhost_os = @host_os@\nhost_vendor = @host_vendor@\nhtmldir = @htmldir@\nincludedir = @includedir@\ninfodir = @infodir@\ninstall_sh = @install_sh@\nlibdir = @libdir@\nlibexecdir = @libexecdir@\nlocaledir = @localedir@\nlocalstatedir = @localstatedir@\nmandir = @mandir@\nmkdir_p = @mkdir_p@\noldincludedir = @oldincludedir@\npdfdir = @pdfdir@\nprefix = @prefix@\nprogram_transform_name = @program_transform_name@\npsdir = @psdir@\nsbindir = @sbindir@\nsharedstatedir = @sharedstatedir@\nsrcdir = @srcdir@\nsysconfdir = @sysconfdir@\ntarget_alias = @target_alias@\ntop_build_prefix = @top_build_prefix@\ntop_builddir = @top_builddir@\ntop_srcdir = @top_srcdir@\nAUTOMAKE_OPTIONS = foreign\nVERSION_INFO = 4:0:0\nEXTRA_DIST = LICENSE Changes libev.m4 autogen.sh \\\n\t     ev_vars.h ev_wrap.h \\\n\t     ev_epoll.c ev_select.c ev_poll.c ev_kqueue.c ev_port.c ev_win32.c \\\n\t     ev.3 ev.pod Symbols.ev Symbols.event\n\nman_MANS = ev.3\ninclude_HEADERS = ev.h ev++.h event.h\nlib_LTLIBRARIES = libev.la\nlibev_la_SOURCES = ev.c event.c\nlibev_la_LDFLAGS = -version-info $(VERSION_INFO)\nall: config.h\n\t$(MAKE) $(AM_MAKEFLAGS) all-am\n\n.SUFFIXES:\n.SUFFIXES: .c .lo .o .obj\nam--refresh: Makefile\n\t@:\n$(srcdir)/Makefile.in: @MAINTAINER_MODE_TRUE@ $(srcdir)/Makefile.am  $(am__configure_deps)\n\t@for dep in $?; do \\\n\t  case '$(am__configure_deps)' in \\\n\t    *$$dep*) \\\n\t      echo ' cd $(srcdir) && $(AUTOMAKE) --foreign'; \\\n\t      $(am__cd) $(srcdir) && $(AUTOMAKE) --foreign \\\n\t\t&& exit 0; \\\n\t      exit 1;; \\\n\t  esac; \\\n\tdone; \\\n\techo ' cd $(top_srcdir) && $(AUTOMAKE) --foreign Makefile'; \\\n\t$(am__cd) $(top_srcdir) && \\\n\t  $(AUTOMAKE) --foreign Makefile\n.PRECIOUS: Makefile\nMakefile: $(srcdir)/Makefile.in $(top_builddir)/config.status\n\t@case '$?' in \\\n\t  *config.status*) \\\n\t    echo ' $(SHELL) ./config.status'; \\\n\t    $(SHELL) ./config.status;; \\\n\t  *) \\\n\t    echo ' cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe)'; \\\n\t    cd $(top_builddir) && $(SHELL) ./config.status $@ $(am__depfiles_maybe);; \\\n\tesac;\n\n$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)\n\t$(SHELL) ./config.status --recheck\n\n$(top_srcdir)/configure: @MAINTAINER_MODE_TRUE@ $(am__configure_deps)\n\t$(am__cd) $(srcdir) && $(AUTOCONF)\n$(ACLOCAL_M4): @MAINTAINER_MODE_TRUE@ $(am__aclocal_m4_deps)\n\t$(am__cd) $(srcdir) && $(ACLOCAL) $(ACLOCAL_AMFLAGS)\n$(am__aclocal_m4_deps):\n\nconfig.h: stamp-h1\n\t@test -f $@ || rm -f stamp-h1\n\t@test -f $@ || $(MAKE) $(AM_MAKEFLAGS) stamp-h1\n\nstamp-h1: $(srcdir)/config.h.in $(top_builddir)/config.status\n\t@rm -f stamp-h1\n\tcd $(top_builddir) && $(SHELL) ./config.status config.h\n$(srcdir)/config.h.in: @MAINTAINER_MODE_TRUE@ $(am__configure_deps) \n\t($(am__cd) $(top_srcdir) && $(AUTOHEADER))\n\trm -f stamp-h1\n\ttouch $@\n\ndistclean-hdr:\n\t-rm -f config.h stamp-h1\n\ninstall-libLTLIBRARIES: $(lib_LTLIBRARIES)\n\t@$(NORMAL_INSTALL)\n\t@list='$(lib_LTLIBRARIES)'; test -n \"$(libdir)\" || list=; \\\n\tlist2=; for p in $$list; do \\\n\t  if test -f $$p; then \\\n\t    list2=\"$$list2 $$p\"; \\\n\t  else :; fi; \\\n\tdone; \\\n\ttest -z \"$$list2\" || { \\\n\t  echo \" $(MKDIR_P) '$(DESTDIR)$(libdir)'\"; \\\n\t  $(MKDIR_P) \"$(DESTDIR)$(libdir)\" || exit 1; \\\n\t  echo \" $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 '$(DESTDIR)$(libdir)'\"; \\\n\t  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=install $(INSTALL) $(INSTALL_STRIP_FLAG) $$list2 \"$(DESTDIR)$(libdir)\"; \\\n\t}\n\nuninstall-libLTLIBRARIES:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(lib_LTLIBRARIES)'; test -n \"$(libdir)\" || list=; \\\n\tfor p in $$list; do \\\n\t  $(am__strip_dir) \\\n\t  echo \" $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f '$(DESTDIR)$(libdir)/$$f'\"; \\\n\t  $(LIBTOOL) $(AM_LIBTOOLFLAGS) $(LIBTOOLFLAGS) --mode=uninstall rm -f \"$(DESTDIR)$(libdir)/$$f\"; \\\n\tdone\n\nclean-libLTLIBRARIES:\n\t-test -z \"$(lib_LTLIBRARIES)\" || rm -f $(lib_LTLIBRARIES)\n\t@list='$(lib_LTLIBRARIES)'; \\\n\tlocs=`for p in $$list; do echo $$p; done | \\\n\t      sed 's|^[^/]*$$|.|; s|/[^/]*$$||; s|$$|/so_locations|' | \\\n\t      sort -u`; \\\n\ttest -z \"$$locs\" || { \\\n\t  echo rm -f $${locs}; \\\n\t  rm -f $${locs}; \\\n\t}\n\nlibev.la: $(libev_la_OBJECTS) $(libev_la_DEPENDENCIES) $(EXTRA_libev_la_DEPENDENCIES) \n\t$(AM_V_CCLD)$(libev_la_LINK) -rpath $(libdir) $(libev_la_OBJECTS) $(libev_la_LIBADD) $(LIBS)\n\nmostlyclean-compile:\n\t-rm -f *.$(OBJEXT)\n\ndistclean-compile:\n\t-rm -f *.tab.c\n\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/ev.Plo@am__quote@\n@AMDEP_TRUE@@am__include@ @am__quote@./$(DEPDIR)/event.Plo@am__quote@\n\n.c.o:\n@am__fastdepCC_TRUE@\t$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ $<\n\n.c.obj:\n@am__fastdepCC_TRUE@\t$(AM_V_CC)$(COMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ `$(CYGPATH_W) '$<'`\n@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Po\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='$<' object='$@' libtool=no @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(COMPILE) -c -o $@ `$(CYGPATH_W) '$<'`\n\n.c.lo:\n@am__fastdepCC_TRUE@\t$(AM_V_CC)$(LTCOMPILE) -MT $@ -MD -MP -MF $(DEPDIR)/$*.Tpo -c -o $@ $<\n@am__fastdepCC_TRUE@\t$(AM_V_at)$(am__mv) $(DEPDIR)/$*.Tpo $(DEPDIR)/$*.Plo\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\t$(AM_V_CC)source='$<' object='$@' libtool=yes @AMDEPBACKSLASH@\n@AMDEP_TRUE@@am__fastdepCC_FALSE@\tDEPDIR=$(DEPDIR) $(CCDEPMODE) $(depcomp) @AMDEPBACKSLASH@\n@am__fastdepCC_FALSE@\t$(AM_V_CC@am__nodep@)$(LTCOMPILE) -c -o $@ $<\n\nmostlyclean-libtool:\n\t-rm -f *.lo\n\nclean-libtool:\n\t-rm -rf .libs _libs\n\ndistclean-libtool:\n\t-rm -f libtool config.lt\ninstall-man3: $(man_MANS)\n\t@$(NORMAL_INSTALL)\n\t@list1=''; \\\n\tlist2='$(man_MANS)'; \\\n\ttest -n \"$(man3dir)\" \\\n\t  && test -n \"`echo $$list1$$list2`\" \\\n\t  || exit 0; \\\n\techo \" $(MKDIR_P) '$(DESTDIR)$(man3dir)'\"; \\\n\t$(MKDIR_P) \"$(DESTDIR)$(man3dir)\" || exit 1; \\\n\t{ for i in $$list1; do echo \"$$i\"; done;  \\\n\tif test -n \"$$list2\"; then \\\n\t  for i in $$list2; do echo \"$$i\"; done \\\n\t    | sed -n '/\\.3[a-z]*$$/p'; \\\n\tfi; \\\n\t} | while read p; do \\\n\t  if test -f $$p; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  echo \"$$d$$p\"; echo \"$$p\"; \\\n\tdone | \\\n\tsed -e 'n;s,.*/,,;p;h;s,.*\\.,,;s,^[^3][0-9a-z]*$$,3,;x' \\\n\t      -e 's,\\.[0-9a-z]*$$,,;$(transform);G;s,\\n,.,' | \\\n\tsed 'N;N;s,\\n, ,g' | { \\\n\tlist=; while read file base inst; do \\\n\t  if test \"$$base\" = \"$$inst\"; then list=\"$$list $$file\"; else \\\n\t    echo \" $(INSTALL_DATA) '$$file' '$(DESTDIR)$(man3dir)/$$inst'\"; \\\n\t    $(INSTALL_DATA) \"$$file\" \"$(DESTDIR)$(man3dir)/$$inst\" || exit $$?; \\\n\t  fi; \\\n\tdone; \\\n\tfor i in $$list; do echo \"$$i\"; done | $(am__base_list) | \\\n\twhile read files; do \\\n\t  test -z \"$$files\" || { \\\n\t    echo \" $(INSTALL_DATA) $$files '$(DESTDIR)$(man3dir)'\"; \\\n\t    $(INSTALL_DATA) $$files \"$(DESTDIR)$(man3dir)\" || exit $$?; }; \\\n\tdone; }\n\nuninstall-man3:\n\t@$(NORMAL_UNINSTALL)\n\t@list=''; test -n \"$(man3dir)\" || exit 0; \\\n\tfiles=`{ for i in $$list; do echo \"$$i\"; done; \\\n\tl2='$(man_MANS)'; for i in $$l2; do echo \"$$i\"; done | \\\n\t  sed -n '/\\.3[a-z]*$$/p'; \\\n\t} | sed -e 's,.*/,,;h;s,.*\\.,,;s,^[^3][0-9a-z]*$$,3,;x' \\\n\t      -e 's,\\.[0-9a-z]*$$,,;$(transform);G;s,\\n,.,'`; \\\n\tdir='$(DESTDIR)$(man3dir)'; $(am__uninstall_files_from_dir)\ninstall-includeHEADERS: $(include_HEADERS)\n\t@$(NORMAL_INSTALL)\n\t@list='$(include_HEADERS)'; test -n \"$(includedir)\" || list=; \\\n\tif test -n \"$$list\"; then \\\n\t  echo \" $(MKDIR_P) '$(DESTDIR)$(includedir)'\"; \\\n\t  $(MKDIR_P) \"$(DESTDIR)$(includedir)\" || exit 1; \\\n\tfi; \\\n\tfor p in $$list; do \\\n\t  if test -f \"$$p\"; then d=; else d=\"$(srcdir)/\"; fi; \\\n\t  echo \"$$d$$p\"; \\\n\tdone | $(am__base_list) | \\\n\twhile read files; do \\\n\t  echo \" $(INSTALL_HEADER) $$files '$(DESTDIR)$(includedir)'\"; \\\n\t  $(INSTALL_HEADER) $$files \"$(DESTDIR)$(includedir)\" || exit $$?; \\\n\tdone\n\nuninstall-includeHEADERS:\n\t@$(NORMAL_UNINSTALL)\n\t@list='$(include_HEADERS)'; test -n \"$(includedir)\" || list=; \\\n\tfiles=`for p in $$list; do echo $$p; done | sed -e 's|^.*/||'`; \\\n\tdir='$(DESTDIR)$(includedir)'; $(am__uninstall_files_from_dir)\n\nID: $(am__tagged_files)\n\t$(am__define_uniq_tagged_files); mkid -fID $$unique\ntags: tags-am\nTAGS: tags\n\ntags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)\n\tset x; \\\n\there=`pwd`; \\\n\t$(am__define_uniq_tagged_files); \\\n\tshift; \\\n\tif test -z \"$(ETAGS_ARGS)$$*$$unique\"; then :; else \\\n\t  test -n \"$$unique\" || unique=$$empty_fix; \\\n\t  if test $$# -gt 0; then \\\n\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n\t      \"$$@\" $$unique; \\\n\t  else \\\n\t    $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \\\n\t      $$unique; \\\n\t  fi; \\\n\tfi\nctags: ctags-am\n\nCTAGS: ctags\nctags-am: $(TAGS_DEPENDENCIES) $(am__tagged_files)\n\t$(am__define_uniq_tagged_files); \\\n\ttest -z \"$(CTAGS_ARGS)$$unique\" \\\n\t  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \\\n\t     $$unique\n\nGTAGS:\n\there=`$(am__cd) $(top_builddir) && pwd` \\\n\t  && $(am__cd) $(top_srcdir) \\\n\t  && gtags -i $(GTAGS_ARGS) \"$$here\"\ncscope: cscope.files\n\ttest ! -s cscope.files \\\n\t  || $(CSCOPE) -b -q $(AM_CSCOPEFLAGS) $(CSCOPEFLAGS) -i cscope.files $(CSCOPE_ARGS)\nclean-cscope:\n\t-rm -f cscope.files\ncscope.files: clean-cscope cscopelist\ncscopelist: cscopelist-am\n\ncscopelist-am: $(am__tagged_files)\n\tlist='$(am__tagged_files)'; \\\n\tcase \"$(srcdir)\" in \\\n\t  [\\\\/]* | ?:[\\\\/]*) sdir=\"$(srcdir)\" ;; \\\n\t  *) sdir=$(subdir)/$(srcdir) ;; \\\n\tesac; \\\n\tfor i in $$list; do \\\n\t  if test -f \"$$i\"; then \\\n\t    echo \"$(subdir)/$$i\"; \\\n\t  else \\\n\t    echo \"$$sdir/$$i\"; \\\n\t  fi; \\\n\tdone >> $(top_builddir)/cscope.files\n\ndistclean-tags:\n\t-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags\n\t-rm -f cscope.out cscope.in.out cscope.po.out cscope.files\n\ndistdir: $(DISTFILES)\n\t$(am__remove_distdir)\n\ttest -d \"$(distdir)\" || mkdir \"$(distdir)\"\n\t@srcdirstrip=`echo \"$(srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n\ttopsrcdirstrip=`echo \"$(top_srcdir)\" | sed 's/[].[^$$\\\\*]/\\\\\\\\&/g'`; \\\n\tlist='$(DISTFILES)'; \\\n\t  dist_files=`for file in $$list; do echo $$file; done | \\\n\t  sed -e \"s|^$$srcdirstrip/||;t\" \\\n\t      -e \"s|^$$topsrcdirstrip/|$(top_builddir)/|;t\"`; \\\n\tcase $$dist_files in \\\n\t  */*) $(MKDIR_P) `echo \"$$dist_files\" | \\\n\t\t\t   sed '/\\//!d;s|^|$(distdir)/|;s,/[^/]*$$,,' | \\\n\t\t\t   sort -u` ;; \\\n\tesac; \\\n\tfor file in $$dist_files; do \\\n\t  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \\\n\t  if test -d $$d/$$file; then \\\n\t    dir=`echo \"/$$file\" | sed -e 's,/[^/]*$$,,'`; \\\n\t    if test -d \"$(distdir)/$$file\"; then \\\n\t      find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\\n\t    fi; \\\n\t    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \\\n\t      cp -fpR $(srcdir)/$$file \"$(distdir)$$dir\" || exit 1; \\\n\t      find \"$(distdir)/$$file\" -type d ! -perm -700 -exec chmod u+rwx {} \\;; \\\n\t    fi; \\\n\t    cp -fpR $$d/$$file \"$(distdir)$$dir\" || exit 1; \\\n\t  else \\\n\t    test -f \"$(distdir)/$$file\" \\\n\t    || cp -p $$d/$$file \"$(distdir)/$$file\" \\\n\t    || exit 1; \\\n\t  fi; \\\n\tdone\n\t-test -n \"$(am__skip_mode_fix)\" \\\n\t|| find \"$(distdir)\" -type d ! -perm -755 \\\n\t\t-exec chmod u+rwx,go+rx {} \\; -o \\\n\t  ! -type d ! -perm -444 -links 1 -exec chmod a+r {} \\; -o \\\n\t  ! -type d ! -perm -400 -exec chmod a+r {} \\; -o \\\n\t  ! -type d ! -perm -444 -exec $(install_sh) -c -m a+r {} {} \\; \\\n\t|| chmod -R a+r \"$(distdir)\"\ndist-gzip: distdir\n\ttardir=$(distdir) && $(am__tar) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).tar.gz\n\t$(am__post_remove_distdir)\n\ndist-bzip2: distdir\n\ttardir=$(distdir) && $(am__tar) | BZIP2=$${BZIP2--9} bzip2 -c >$(distdir).tar.bz2\n\t$(am__post_remove_distdir)\n\ndist-lzip: distdir\n\ttardir=$(distdir) && $(am__tar) | lzip -c $${LZIP_OPT--9} >$(distdir).tar.lz\n\t$(am__post_remove_distdir)\n\ndist-xz: distdir\n\ttardir=$(distdir) && $(am__tar) | XZ_OPT=$${XZ_OPT--e} xz -c >$(distdir).tar.xz\n\t$(am__post_remove_distdir)\n\ndist-tarZ: distdir\n\t@echo WARNING: \"Support for shar distribution archives is\" \\\n\t               \"deprecated.\" >&2\n\t@echo WARNING: \"It will be removed altogether in Automake 2.0\" >&2\n\ttardir=$(distdir) && $(am__tar) | compress -c >$(distdir).tar.Z\n\t$(am__post_remove_distdir)\n\ndist-shar: distdir\n\t@echo WARNING: \"Support for distribution archives compressed with\" \\\n\t\t       \"legacy program 'compress' is deprecated.\" >&2\n\t@echo WARNING: \"It will be removed altogether in Automake 2.0\" >&2\n\tshar $(distdir) | GZIP=$(GZIP_ENV) gzip -c >$(distdir).shar.gz\n\t$(am__post_remove_distdir)\n\ndist-zip: distdir\n\t-rm -f $(distdir).zip\n\tzip -rq $(distdir).zip $(distdir)\n\t$(am__post_remove_distdir)\n\ndist dist-all:\n\t$(MAKE) $(AM_MAKEFLAGS) $(DIST_TARGETS) am__post_remove_distdir='@:'\n\t$(am__post_remove_distdir)\n\n# This target untars the dist file and tries a VPATH configuration.  Then\n# it guarantees that the distribution is self-contained by making another\n# tarfile.\ndistcheck: dist\n\tcase '$(DIST_ARCHIVES)' in \\\n\t*.tar.gz*) \\\n\t  GZIP=$(GZIP_ENV) gzip -dc $(distdir).tar.gz | $(am__untar) ;;\\\n\t*.tar.bz2*) \\\n\t  bzip2 -dc $(distdir).tar.bz2 | $(am__untar) ;;\\\n\t*.tar.lz*) \\\n\t  lzip -dc $(distdir).tar.lz | $(am__untar) ;;\\\n\t*.tar.xz*) \\\n\t  xz -dc $(distdir).tar.xz | $(am__untar) ;;\\\n\t*.tar.Z*) \\\n\t  uncompress -c $(distdir).tar.Z | $(am__untar) ;;\\\n\t*.shar.gz*) \\\n\t  GZIP=$(GZIP_ENV) gzip -dc $(distdir).shar.gz | unshar ;;\\\n\t*.zip*) \\\n\t  unzip $(distdir).zip ;;\\\n\tesac\n\tchmod -R a-w $(distdir)\n\tchmod u+w $(distdir)\n\tmkdir $(distdir)/_build $(distdir)/_inst\n\tchmod a-w $(distdir)\n\ttest -d $(distdir)/_build || exit 0; \\\n\tdc_install_base=`$(am__cd) $(distdir)/_inst && pwd | sed -e 's,^[^:\\\\/]:[\\\\/],/,'` \\\n\t  && dc_destdir=\"$${TMPDIR-/tmp}/am-dc-$$$$/\" \\\n\t  && am__cwd=`pwd` \\\n\t  && $(am__cd) $(distdir)/_build \\\n\t  && ../configure \\\n\t    $(AM_DISTCHECK_CONFIGURE_FLAGS) \\\n\t    $(DISTCHECK_CONFIGURE_FLAGS) \\\n\t    --srcdir=.. --prefix=\"$$dc_install_base\" \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) dvi \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) check \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) install \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) installcheck \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) uninstall \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) distuninstallcheck_dir=\"$$dc_install_base\" \\\n\t        distuninstallcheck \\\n\t  && chmod -R a-w \"$$dc_install_base\" \\\n\t  && ({ \\\n\t       (cd ../.. && umask 077 && mkdir \"$$dc_destdir\") \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" install \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" uninstall \\\n\t       && $(MAKE) $(AM_MAKEFLAGS) DESTDIR=\"$$dc_destdir\" \\\n\t            distuninstallcheck_dir=\"$$dc_destdir\" distuninstallcheck; \\\n\t      } || { rm -rf \"$$dc_destdir\"; exit 1; }) \\\n\t  && rm -rf \"$$dc_destdir\" \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) dist \\\n\t  && rm -rf $(DIST_ARCHIVES) \\\n\t  && $(MAKE) $(AM_MAKEFLAGS) distcleancheck \\\n\t  && cd \"$$am__cwd\" \\\n\t  || exit 1\n\t$(am__post_remove_distdir)\n\t@(echo \"$(distdir) archives ready for distribution: \"; \\\n\t  list='$(DIST_ARCHIVES)'; for i in $$list; do echo $$i; done) | \\\n\t  sed -e 1h -e 1s/./=/g -e 1p -e 1x -e '$$p' -e '$$x'\ndistuninstallcheck:\n\t@test -n '$(distuninstallcheck_dir)' || { \\\n\t  echo 'ERROR: trying to run $@ with an empty' \\\n\t       '$$(distuninstallcheck_dir)' >&2; \\\n\t  exit 1; \\\n\t}; \\\n\t$(am__cd) '$(distuninstallcheck_dir)' || { \\\n\t  echo 'ERROR: cannot chdir into $(distuninstallcheck_dir)' >&2; \\\n\t  exit 1; \\\n\t}; \\\n\ttest `$(am__distuninstallcheck_listfiles) | wc -l` -eq 0 \\\n\t   || { echo \"ERROR: files left after uninstall:\" ; \\\n\t        if test -n \"$(DESTDIR)\"; then \\\n\t          echo \"  (check DESTDIR support)\"; \\\n\t        fi ; \\\n\t        $(distuninstallcheck_listfiles) ; \\\n\t        exit 1; } >&2\ndistcleancheck: distclean\n\t@if test '$(srcdir)' = . ; then \\\n\t  echo \"ERROR: distcleancheck can only run from a VPATH build\" ; \\\n\t  exit 1 ; \\\n\tfi\n\t@test `$(distcleancheck_listfiles) | wc -l` -eq 0 \\\n\t  || { echo \"ERROR: files left in build directory after distclean:\" ; \\\n\t       $(distcleancheck_listfiles) ; \\\n\t       exit 1; } >&2\ncheck-am: all-am\ncheck: check-am\nall-am: Makefile $(LTLIBRARIES) $(MANS) $(HEADERS) config.h\ninstalldirs:\n\tfor dir in \"$(DESTDIR)$(libdir)\" \"$(DESTDIR)$(man3dir)\" \"$(DESTDIR)$(includedir)\"; do \\\n\t  test -z \"$$dir\" || $(MKDIR_P) \"$$dir\"; \\\n\tdone\ninstall: install-am\ninstall-exec: install-exec-am\ninstall-data: install-data-am\nuninstall: uninstall-am\n\ninstall-am: all-am\n\t@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am\n\ninstallcheck: installcheck-am\ninstall-strip:\n\tif test -z '$(STRIP)'; then \\\n\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n\t      install; \\\n\telse \\\n\t  $(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" \\\n\t    install_sh_PROGRAM=\"$(INSTALL_STRIP_PROGRAM)\" INSTALL_STRIP_FLAG=-s \\\n\t    \"INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'\" install; \\\n\tfi\nmostlyclean-generic:\n\nclean-generic:\n\ndistclean-generic:\n\t-test -z \"$(CONFIG_CLEAN_FILES)\" || rm -f $(CONFIG_CLEAN_FILES)\n\t-test . = \"$(srcdir)\" || test -z \"$(CONFIG_CLEAN_VPATH_FILES)\" || rm -f $(CONFIG_CLEAN_VPATH_FILES)\n\nmaintainer-clean-generic:\n\t@echo \"This command is intended for maintainers to use\"\n\t@echo \"it deletes files that may require special tools to rebuild.\"\nclean: clean-am\n\nclean-am: clean-generic clean-libLTLIBRARIES clean-libtool \\\n\tmostlyclean-am\n\ndistclean: distclean-am\n\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n\t-rm -rf ./$(DEPDIR)\n\t-rm -f Makefile\ndistclean-am: clean-am distclean-compile distclean-generic \\\n\tdistclean-hdr distclean-libtool distclean-tags\n\ndvi: dvi-am\n\ndvi-am:\n\nhtml: html-am\n\nhtml-am:\n\ninfo: info-am\n\ninfo-am:\n\ninstall-data-am: install-includeHEADERS install-man\n\ninstall-dvi: install-dvi-am\n\ninstall-dvi-am:\n\ninstall-exec-am: install-libLTLIBRARIES\n\ninstall-html: install-html-am\n\ninstall-html-am:\n\ninstall-info: install-info-am\n\ninstall-info-am:\n\ninstall-man: install-man3\n\ninstall-pdf: install-pdf-am\n\ninstall-pdf-am:\n\ninstall-ps: install-ps-am\n\ninstall-ps-am:\n\ninstallcheck-am:\n\nmaintainer-clean: maintainer-clean-am\n\t-rm -f $(am__CONFIG_DISTCLEAN_FILES)\n\t-rm -rf $(top_srcdir)/autom4te.cache\n\t-rm -rf ./$(DEPDIR)\n\t-rm -f Makefile\nmaintainer-clean-am: distclean-am maintainer-clean-generic\n\nmostlyclean: mostlyclean-am\n\nmostlyclean-am: mostlyclean-compile mostlyclean-generic \\\n\tmostlyclean-libtool\n\npdf: pdf-am\n\npdf-am:\n\nps: ps-am\n\nps-am:\n\nuninstall-am: uninstall-includeHEADERS uninstall-libLTLIBRARIES \\\n\tuninstall-man\n\nuninstall-man: uninstall-man3\n\n.MAKE: all install-am install-strip\n\n.PHONY: CTAGS GTAGS TAGS all all-am am--refresh check check-am clean \\\n\tclean-cscope clean-generic clean-libLTLIBRARIES clean-libtool \\\n\tcscope cscopelist-am ctags ctags-am dist dist-all dist-bzip2 \\\n\tdist-gzip dist-lzip dist-shar dist-tarZ dist-xz dist-zip \\\n\tdistcheck distclean distclean-compile distclean-generic \\\n\tdistclean-hdr distclean-libtool distclean-tags distcleancheck \\\n\tdistdir distuninstallcheck dvi dvi-am html html-am info \\\n\tinfo-am install install-am install-data install-data-am \\\n\tinstall-dvi install-dvi-am install-exec install-exec-am \\\n\tinstall-html install-html-am install-includeHEADERS \\\n\tinstall-info install-info-am install-libLTLIBRARIES \\\n\tinstall-man install-man3 install-pdf install-pdf-am install-ps \\\n\tinstall-ps-am install-strip installcheck installcheck-am \\\n\tinstalldirs maintainer-clean maintainer-clean-generic \\\n\tmostlyclean mostlyclean-compile mostlyclean-generic \\\n\tmostlyclean-libtool pdf pdf-am ps ps-am tags tags-am uninstall \\\n\tuninstall-am uninstall-includeHEADERS uninstall-libLTLIBRARIES \\\n\tuninstall-man uninstall-man3\n\n\nev.3: ev.pod\n\tpod2man -n LIBEV -r \"libev-$(VERSION)\" -c \"libev - high performance full featured event loop\" -s3 <$< >$@\n\n# Tell versions [3.59,3.63) of GNU make to not export all variables.\n# Otherwise a system limit (for SysV at least) may be exceeded.\n.NOEXPORT:\n"
        },
        {
          "name": "README",
          "type": "blob",
          "size": 2.49609375,
          "content": "libev is a high-performance event loop/event model with lots of features.\n(see benchmark at http://libev.schmorp.de/bench.html)\n\n\nABOUT\n\n   Homepage: http://software.schmorp.de/pkg/libev\n   Mailinglist: libev@lists.schmorp.de\n                http://lists.schmorp.de/cgi-bin/mailman/listinfo/libev\n   Library Documentation: http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod\n\n   Libev is modelled (very losely) after libevent and the Event perl\n   module, but is faster, scales better and is more correct, and also more\n   featureful. And also smaller. Yay.\n\n   Some of the specialties of libev not commonly found elsewhere are:\n   \n   - extensive and detailed, readable documentation (not doxygen garbage).\n   - fully supports fork, can detect fork in various ways and automatically\n     re-arms kernel mechanisms that do not support fork.\n   - highly optimised select, poll, epoll, kqueue and event ports backends.\n   - filesystem object (path) watching (with optional linux inotify support).\n   - wallclock-based times (using absolute time, cron-like).\n   - relative timers/timeouts (handle time jumps).\n   - fast intra-thread communication between multiple\n     event loops (with optional fast linux eventfd backend).\n   - extremely easy to embed (fully documented, no dependencies,\n     autoconf supported but optional).\n   - very small codebase, no bloated library, simple code.\n   - fully extensible by being able to plug into the event loop,\n     integrate other event loops, integrate other event loop users.\n   - very little memory use (small watchers, small event loop data).\n   - optional C++ interface allowing method and function callbacks\n     at no extra memory or runtime overhead.\n   - optional Perl interface with similar characteristics (capable\n     of running Glib/Gtk2 on libev).\n   - support for other languages (multiple C++ interfaces, D, Ruby,\n     Python) available from third-parties.\n\n   Examples of programs that embed libev: the EV perl module, node.js,\n   auditd, rxvt-unicode, gvpe (GNU Virtual Private Ethernet), the\n   Deliantra MMORPG server (http://www.deliantra.net/), Rubinius (a\n   next-generation Ruby VM), the Ebb web server, the Rev event toolkit.\n\n\nCONTRIBUTORS\n\n   libev was written and designed by Marc Lehmann and Emanuele Giaquinta.\n\n   The following people sent in patches or made other noteworthy\n   contributions to the design (for minor patches, see the Changes\n   file. If I forgot to include you, please shout at me, it was an\n   accident):\n\n   W.C.A. Wijngaards\n   Christopher Layne\n   Chris Brody\n\n"
        },
        {
          "name": "Symbols.ev",
          "type": "blob",
          "size": 1.0693359375,
          "content": "ev_async_send\nev_async_start\nev_async_stop\nev_backend\nev_break\nev_check_start\nev_check_stop\nev_child_start\nev_child_stop\nev_cleanup_start\nev_cleanup_stop\nev_clear_pending\nev_default_loop\nev_default_loop_ptr\nev_depth\nev_embed_start\nev_embed_stop\nev_embed_sweep\nev_embeddable_backends\nev_feed_event\nev_feed_fd_event\nev_feed_signal\nev_feed_signal_event\nev_fork_start\nev_fork_stop\nev_idle_start\nev_idle_stop\nev_invoke\nev_invoke_pending\nev_io_start\nev_io_stop\nev_iteration\nev_loop_destroy\nev_loop_fork\nev_loop_new\nev_now\nev_now_update\nev_once\nev_pending_count\nev_periodic_again\nev_periodic_start\nev_periodic_stop\nev_prepare_start\nev_prepare_stop\nev_recommended_backends\nev_ref\nev_resume\nev_run\nev_set_allocator\nev_set_invoke_pending_cb\nev_set_io_collect_interval\nev_set_loop_release_cb\nev_set_syserr_cb\nev_set_timeout_collect_interval\nev_set_userdata\nev_signal_start\nev_signal_stop\nev_sleep\nev_stat_start\nev_stat_stat\nev_stat_stop\nev_supported_backends\nev_suspend\nev_time\nev_timer_again\nev_timer_remaining\nev_timer_start\nev_timer_stop\nev_unref\nev_userdata\nev_verify\nev_version_major\nev_version_minor\n"
        },
        {
          "name": "Symbols.event",
          "type": "blob",
          "size": 0.369140625,
          "content": "event_active\nevent_add\nevent_base_dispatch\nevent_base_free\nevent_base_get_method\nevent_base_loop\nevent_base_loopexit\nevent_base_new\nevent_base_once\nevent_base_priority_init\nevent_base_set\nevent_del\nevent_dispatch\nevent_get_callback\nevent_get_method\nevent_get_version\nevent_init\nevent_loop\nevent_loopexit\nevent_once\nevent_pending\nevent_priority_init\nevent_priority_set\nevent_set\n"
        },
        {
          "name": "aclocal.m4",
          "type": "blob",
          "size": 344.3984375,
          "content": "# generated automatically by aclocal 1.14.1 -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY, to the extent permitted by law; without\n# even the implied warranty of MERCHANTABILITY or FITNESS FOR A\n# PARTICULAR PURPOSE.\n\nm4_ifndef([AC_CONFIG_MACRO_DIRS], [m4_defun([_AM_CONFIG_MACRO_DIRS], [])m4_defun([AC_CONFIG_MACRO_DIRS], [_AM_CONFIG_MACRO_DIRS($@)])])\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\nm4_if(m4_defn([AC_AUTOCONF_VERSION]), [2.69],,\n[m4_warning([this file was generated for autoconf 2.69.\nYou have another version of autoconf.  It may work, but is not guaranteed to.\nIf you have problems, you may need to regenerate the build system entirely.\nTo do so, use the procedure documented by the package, typically 'autoreconf'.])])\n\n# libtool.m4 - Configure libtool for the host system. -*-Autoconf-*-\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\nm4_define([_LT_COPYING], [dnl\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n])\n\n# serial 57 LT_INIT\n\n\n# LT_PREREQ(VERSION)\n# ------------------\n# Complain and exit if this libtool version is less that VERSION.\nm4_defun([LT_PREREQ],\n[m4_if(m4_version_compare(m4_defn([LT_PACKAGE_VERSION]), [$1]), -1,\n       [m4_default([$3],\n\t\t   [m4_fatal([Libtool version $1 or higher is required],\n\t\t             63)])],\n       [$2])])\n\n\n# _LT_CHECK_BUILDDIR\n# ------------------\n# Complain if the absolute build directory name contains unusual characters\nm4_defun([_LT_CHECK_BUILDDIR],\n[case `pwd` in\n  *\\ * | *\\\t*)\n    AC_MSG_WARN([Libtool does not cope well with whitespace in `pwd`]) ;;\nesac\n])\n\n\n# LT_INIT([OPTIONS])\n# ------------------\nAC_DEFUN([LT_INIT],\n[AC_PREREQ([2.58])dnl We use AC_INCLUDES_DEFAULT\nAC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\nAC_BEFORE([$0], [LT_LANG])dnl\nAC_BEFORE([$0], [LT_OUTPUT])dnl\nAC_BEFORE([$0], [LTDL_INIT])dnl\nm4_require([_LT_CHECK_BUILDDIR])dnl\n\ndnl Autoconf doesn't catch unexpanded LT_ macros by default:\nm4_pattern_forbid([^_?LT_[A-Z_]+$])dnl\nm4_pattern_allow([^(_LT_EOF|LT_DLGLOBAL|LT_DLLAZY_OR_NOW|LT_MULTI_MODULE)$])dnl\ndnl aclocal doesn't pull ltoptions.m4, ltsugar.m4, or ltversion.m4\ndnl unless we require an AC_DEFUNed macro:\nAC_REQUIRE([LTOPTIONS_VERSION])dnl\nAC_REQUIRE([LTSUGAR_VERSION])dnl\nAC_REQUIRE([LTVERSION_VERSION])dnl\nAC_REQUIRE([LTOBSOLETE_VERSION])dnl\nm4_require([_LT_PROG_LTMAIN])dnl\n\n_LT_SHELL_INIT([SHELL=${CONFIG_SHELL-/bin/sh}])\n\ndnl Parse OPTIONS\n_LT_SET_OPTIONS([$0], [$1])\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\nAC_SUBST(LIBTOOL)dnl\n\n_LT_SETUP\n\n# Only expand once:\nm4_define([LT_INIT])\n])# LT_INIT\n\n# Old names:\nAU_ALIAS([AC_PROG_LIBTOOL], [LT_INIT])\nAU_ALIAS([AM_PROG_LIBTOOL], [LT_INIT])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PROG_LIBTOOL], [])\ndnl AC_DEFUN([AM_PROG_LIBTOOL], [])\n\n\n# _LT_CC_BASENAME(CC)\n# -------------------\n# Calculate cc_basename.  Skip known compiler wrappers and cross-prefix.\nm4_defun([_LT_CC_BASENAME],\n[for cc_temp in $1\"\"; do\n  case $cc_temp in\n    compile | *[[\\\\/]]compile | ccache | *[[\\\\/]]ccache ) ;;\n    distcc | *[[\\\\/]]distcc | purify | *[[\\\\/]]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n])\n\n\n# _LT_FILEUTILS_DEFAULTS\n# ----------------------\n# It is okay to use these file commands and assume they have been set\n# sensibly after `m4_require([_LT_FILEUTILS_DEFAULTS])'.\nm4_defun([_LT_FILEUTILS_DEFAULTS],\n[: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n])# _LT_FILEUTILS_DEFAULTS\n\n\n# _LT_SETUP\n# ---------\nm4_defun([_LT_SETUP],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_REQUIRE([_LT_PREPARE_SED_QUOTE_VARS])dnl\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])dnl\n\n_LT_DECL([], [PATH_SEPARATOR], [1], [The PATH separator for the build system])dnl\ndnl\n_LT_DECL([], [host_alias], [0], [The host system])dnl\n_LT_DECL([], [host], [0])dnl\n_LT_DECL([], [host_os], [0])dnl\ndnl\n_LT_DECL([], [build_alias], [0], [The build system])dnl\n_LT_DECL([], [build], [0])dnl\n_LT_DECL([], [build_os], [0])dnl\ndnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\ndnl\nAC_REQUIRE([AC_PROG_LN_S])dnl\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n_LT_DECL([], [LN_S], [1], [Whether we need soft or hard links])dnl\ndnl\nAC_REQUIRE([LT_CMD_MAX_LEN])dnl\n_LT_DECL([objext], [ac_objext], [0], [Object file suffix (normally \"o\")])dnl\n_LT_DECL([], [exeext], [0], [Executable file suffix (normally \"\")])dnl\ndnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nm4_require([_LT_PATH_CONVERSION_FUNCTIONS])dnl\nm4_require([_LT_CMD_RELOAD])dnl\nm4_require([_LT_CHECK_MAGIC_METHOD])dnl\nm4_require([_LT_CHECK_SHAREDLIB_FROM_LINKLIB])dnl\nm4_require([_LT_CMD_OLD_ARCHIVE])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_WITH_SYSROOT])dnl\n\n_LT_CONFIG_LIBTOOL_INIT([\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n])\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n_LT_CHECK_OBJDIR\n\nm4_require([_LT_TAG_COMPILER])dnl\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\n_LT_CC_BASENAME([$compiler])\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    _LT_PATH_MAGIC\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\nLT_SUPPORTED_TAG([CC])\n_LT_LANG_C_CONFIG\n_LT_LANG_DEFAULT_CONFIG\n_LT_CONFIG_COMMANDS\n])# _LT_SETUP\n\n\n# _LT_PREPARE_SED_QUOTE_VARS\n# --------------------------\n# Define a few sed substitution that help us do robust quoting.\nm4_defun([_LT_PREPARE_SED_QUOTE_VARS],\n[# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([[\"`$\\\\]]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([[\"`\\\\]]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n])\n\n# _LT_PROG_LTMAIN\n# ---------------\n# Note that this code is called both from `configure', and `config.status'\n# now that we use AC_CONFIG_COMMANDS to generate libtool.  Notably,\n# `config.status' has no value for ac_aux_dir unless we are using Automake,\n# so we pass a copy along to make sure it has a sensible value anyway.\nm4_defun([_LT_PROG_LTMAIN],\n[m4_ifdef([AC_REQUIRE_AUX_FILE], [AC_REQUIRE_AUX_FILE([ltmain.sh])])dnl\n_LT_CONFIG_LIBTOOL_INIT([ac_aux_dir='$ac_aux_dir'])\nltmain=\"$ac_aux_dir/ltmain.sh\"\n])# _LT_PROG_LTMAIN\n\n\n\n# So that we can recreate a full libtool script including additional\n# tags, we accumulate the chunks of code to send to AC_CONFIG_COMMANDS\n# in macros and then make a single call at the end using the `libtool'\n# label.\n\n\n# _LT_CONFIG_LIBTOOL_INIT([INIT-COMMANDS])\n# ----------------------------------------\n# Register INIT-COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL_INIT],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_INIT],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_INIT])\n\n\n# _LT_CONFIG_LIBTOOL([COMMANDS])\n# ------------------------------\n# Register COMMANDS to be passed to AC_CONFIG_COMMANDS later.\nm4_define([_LT_CONFIG_LIBTOOL],\n[m4_ifval([$1],\n          [m4_append([_LT_OUTPUT_LIBTOOL_COMMANDS],\n                     [$1\n])])])\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS])\n\n\n# _LT_CONFIG_SAVE_COMMANDS([COMMANDS], [INIT_COMMANDS])\n# -----------------------------------------------------\nm4_defun([_LT_CONFIG_SAVE_COMMANDS],\n[_LT_CONFIG_LIBTOOL([$1])\n_LT_CONFIG_LIBTOOL_INIT([$2])\n])\n\n\n# _LT_FORMAT_COMMENT([COMMENT])\n# -----------------------------\n# Add leading comment marks to the start of each line, and a trailing\n# full-stop to the whole comment if one is not present already.\nm4_define([_LT_FORMAT_COMMENT],\n[m4_ifval([$1], [\nm4_bpatsubst([m4_bpatsubst([$1], [^ *], [# ])],\n              [['`$\\]], [\\\\\\&])]m4_bmatch([$1], [[!?.]$], [], [.])\n)])\n\n\n\n\n\n# _LT_DECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION], [IS-TAGGED?])\n# -------------------------------------------------------------------\n# CONFIGNAME is the name given to the value in the libtool script.\n# VARNAME is the (base) name used in the configure script.\n# VALUE may be 0, 1 or 2 for a computed quote escaped value based on\n# VARNAME.  Any other value will be used directly.\nm4_define([_LT_DECL],\n[lt_if_append_uniq([lt_decl_varnames], [$2], [, ],\n    [lt_dict_add_subkey([lt_decl_dict], [$2], [libtool_name],\n\t[m4_ifval([$1], [$1], [$2])])\n    lt_dict_add_subkey([lt_decl_dict], [$2], [value], [$3])\n    m4_ifval([$4],\n\t[lt_dict_add_subkey([lt_decl_dict], [$2], [description], [$4])])\n    lt_dict_add_subkey([lt_decl_dict], [$2],\n\t[tagged?], [m4_ifval([$5], [yes], [no])])])\n])\n\n\n# _LT_TAGDECL([CONFIGNAME], VARNAME, VALUE, [DESCRIPTION])\n# --------------------------------------------------------\nm4_define([_LT_TAGDECL], [_LT_DECL([$1], [$2], [$3], [$4], [yes])])\n\n\n# lt_decl_tag_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_tag_varnames],\n[_lt_decl_filter([tagged?], [yes], $@)])\n\n\n# _lt_decl_filter(SUBKEY, VALUE, [SEPARATOR], [VARNAME1..])\n# ---------------------------------------------------------\nm4_define([_lt_decl_filter],\n[m4_case([$#],\n  [0], [m4_fatal([$0: too few arguments: $#])],\n  [1], [m4_fatal([$0: too few arguments: $#: $1])],\n  [2], [lt_dict_filter([lt_decl_dict], [$1], [$2], [], lt_decl_varnames)],\n  [3], [lt_dict_filter([lt_decl_dict], [$1], [$2], [$3], lt_decl_varnames)],\n  [lt_dict_filter([lt_decl_dict], $@)])[]dnl\n])\n\n\n# lt_decl_quote_varnames([SEPARATOR], [VARNAME1...])\n# --------------------------------------------------\nm4_define([lt_decl_quote_varnames],\n[_lt_decl_filter([value], [1], $@)])\n\n\n# lt_decl_dquote_varnames([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_dquote_varnames],\n[_lt_decl_filter([value], [2], $@)])\n\n\n# lt_decl_varnames_tagged([SEPARATOR], [VARNAME1...])\n# ---------------------------------------------------\nm4_define([lt_decl_varnames_tagged],\n[m4_assert([$# <= 2])dnl\n_$0(m4_quote(m4_default([$1], [[, ]])),\n    m4_ifval([$2], [[$2]], [m4_dquote(lt_decl_tag_varnames)]),\n    m4_split(m4_normalize(m4_quote(_LT_TAGS)), [ ]))])\nm4_define([_lt_decl_varnames_tagged],\n[m4_ifval([$3], [lt_combine([$1], [$2], [_], $3)])])\n\n\n# lt_decl_all_varnames([SEPARATOR], [VARNAME1...])\n# ------------------------------------------------\nm4_define([lt_decl_all_varnames],\n[_$0(m4_quote(m4_default([$1], [[, ]])),\n     m4_if([$2], [],\n\t   m4_quote(lt_decl_varnames),\n\tm4_quote(m4_shift($@))))[]dnl\n])\nm4_define([_lt_decl_all_varnames],\n[lt_join($@, lt_decl_varnames_tagged([$1],\n\t\t\tlt_decl_tag_varnames([[, ]], m4_shift($@))))dnl\n])\n\n\n# _LT_CONFIG_STATUS_DECLARE([VARNAME])\n# ------------------------------------\n# Quote a variable value, and forward it to `config.status' so that its\n# declaration there will have the same value as in `configure'.  VARNAME\n# must have a single quote delimited value for this to work.\nm4_define([_LT_CONFIG_STATUS_DECLARE],\n[$1='`$ECHO \"$][$1\" | $SED \"$delay_single_quote_subst\"`'])\n\n\n# _LT_CONFIG_STATUS_DECLARATIONS\n# ------------------------------\n# We delimit libtool config variables with single quotes, so when\n# we write them to config.status, we have to be sure to quote all\n# embedded single quotes properly.  In configure, this macro expands\n# each variable declared with _LT_DECL (and _LT_TAGDECL) into:\n#\n#    <var>='`$ECHO \"$<var>\" | $SED \"$delay_single_quote_subst\"`'\nm4_defun([_LT_CONFIG_STATUS_DECLARATIONS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_all_varnames),\n    [m4_n([_LT_CONFIG_STATUS_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAGS\n# ----------------\n# Output comment and list of tags supported by the script\nm4_defun([_LT_LIBTOOL_TAGS],\n[_LT_FORMAT_COMMENT([The names of the tagged configurations supported by this script])dnl\navailable_tags=\"_LT_TAGS\"dnl\n])\n\n\n# _LT_LIBTOOL_DECLARE(VARNAME, [TAG])\n# -----------------------------------\n# Extract the dictionary values for VARNAME (optionally with TAG) and\n# expand to a commented shell variable setting:\n#\n#    # Some comment about what VAR is for.\n#    visible_name=$lt_internal_name\nm4_define([_LT_LIBTOOL_DECLARE],\n[_LT_FORMAT_COMMENT(m4_quote(lt_dict_fetch([lt_decl_dict], [$1],\n\t\t\t\t\t   [description])))[]dnl\nm4_pushdef([_libtool_name],\n    m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [libtool_name])))[]dnl\nm4_case(m4_quote(lt_dict_fetch([lt_decl_dict], [$1], [value])),\n    [0], [_libtool_name=[$]$1],\n    [1], [_libtool_name=$lt_[]$1],\n    [2], [_libtool_name=$lt_[]$1],\n    [_libtool_name=lt_dict_fetch([lt_decl_dict], [$1], [value])])[]dnl\nm4_ifval([$2], [_$2])[]m4_popdef([_libtool_name])[]dnl\n])\n\n\n# _LT_LIBTOOL_CONFIG_VARS\n# -----------------------\n# Produce commented declarations of non-tagged libtool config variables\n# suitable for insertion in the LIBTOOL CONFIG section of the `libtool'\n# script.  Tagged libtool config variables (even for the LIBTOOL CONFIG\n# section) are produced by _LT_LIBTOOL_TAG_VARS.\nm4_defun([_LT_LIBTOOL_CONFIG_VARS],\n[m4_foreach([_lt_var],\n    m4_quote(_lt_decl_filter([tagged?], [no], [], lt_decl_varnames)),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var)])])])\n\n\n# _LT_LIBTOOL_TAG_VARS(TAG)\n# -------------------------\nm4_define([_LT_LIBTOOL_TAG_VARS],\n[m4_foreach([_lt_var], m4_quote(lt_decl_tag_varnames),\n    [m4_n([_LT_LIBTOOL_DECLARE(_lt_var, [$1])])])])\n\n\n# _LT_TAGVAR(VARNAME, [TAGNAME])\n# ------------------------------\nm4_define([_LT_TAGVAR], [m4_ifval([$2], [$1_$2], [$1])])\n\n\n# _LT_CONFIG_COMMANDS\n# -------------------\n# Send accumulated output to $CONFIG_STATUS.  Thanks to the lists of\n# variables for single and double quote escaping we saved from calls\n# to _LT_DECL, we can put quote escaped variables declarations\n# into `config.status', and then the shell code to quote escape them in\n# for loops in `config.status'.  Finally, any additional code accumulated\n# from calls to _LT_CONFIG_LIBTOOL_INIT is expanded.\nm4_defun([_LT_CONFIG_COMMANDS],\n[AC_PROVIDE_IFELSE([LT_OUTPUT],\n\tdnl If the libtool generation code has been placed in $CONFIG_LT,\n\tdnl instead of duplicating it all over again into config.status,\n\tdnl then we will have config.status run $CONFIG_LT later, so it\n\tdnl needs to know what name is stored there:\n        [AC_CONFIG_COMMANDS([libtool],\n            [$SHELL $CONFIG_LT || AS_EXIT(1)], [CONFIG_LT='$CONFIG_LT'])],\n    dnl If the libtool generation code is destined for config.status,\n    dnl expand the accumulated commands and init code now:\n    [AC_CONFIG_COMMANDS([libtool],\n        [_LT_OUTPUT_LIBTOOL_COMMANDS], [_LT_OUTPUT_LIBTOOL_COMMANDS_INIT])])\n])#_LT_CONFIG_COMMANDS\n\n\n# Initialize.\nm4_define([_LT_OUTPUT_LIBTOOL_COMMANDS_INIT],\n[\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\n_LT_CONFIG_STATUS_DECLARATIONS\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$[]1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_quote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in lt_decl_all_varnames([[ \\\n]], lt_decl_dquote_varnames); do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n_LT_OUTPUT_LIBTOOL_INIT\n])\n\n# _LT_GENERATED_FILE_INIT(FILE, [COMMENT])\n# ------------------------------------\n# Generate a child script FILE with all initialization necessary to\n# reuse the environment learned by the parent script, and make the\n# file executable.  If COMMENT is supplied, it is inserted after the\n# `#!' sequence but before initialization text begins.  After this\n# macro, additional text can be appended to FILE to form the body of\n# the child script.  The macro ends with non-zero status if the\n# file could not be fully written (such as if the disk is full).\nm4_ifdef([AS_INIT_GENERATED],\n[m4_defun([_LT_GENERATED_FILE_INIT],[AS_INIT_GENERATED($@)])],\n[m4_defun([_LT_GENERATED_FILE_INIT],\n[m4_require([AS_PREPARE])]dnl\n[m4_pushdef([AS_MESSAGE_LOG_FD])]dnl\n[lt_write_fail=0\ncat >$1 <<_ASEOF || lt_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n$2\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$1 <<\\_ASEOF || lt_write_fail=1\nAS_SHELL_SANITIZE\n_AS_PREPARE\nexec AS_MESSAGE_FD>&1\n_ASEOF\ntest $lt_write_fail = 0 && chmod +x $1[]dnl\nm4_popdef([AS_MESSAGE_LOG_FD])])])# _LT_GENERATED_FILE_INIT\n\n# LT_OUTPUT\n# ---------\n# This macro allows early generation of the libtool script (before\n# AC_OUTPUT is called), incase it is used in configure for compilation\n# tests.\nAC_DEFUN([LT_OUTPUT],\n[: ${CONFIG_LT=./config.lt}\nAC_MSG_NOTICE([creating $CONFIG_LT])\n_LT_GENERATED_FILE_INIT([\"$CONFIG_LT\"],\n[# Run this file to recreate a libtool stub with the current configuration.])\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nlt_cl_silent=false\nexec AS_MESSAGE_LOG_FD>>config.log\n{\n  echo\n  AS_BOX([Running $as_me.])\n} >&AS_MESSAGE_LOG_FD\n\nlt_cl_help=\"\\\n\\`$as_me' creates a local libtool stub from the current configuration,\nfor use in further configure time tests before the real libtool is\ngenerated.\n\nUsage: $[0] [[OPTIONS]]\n\n  -h, --help      print this help, then exit\n  -V, --version   print version number, then exit\n  -q, --quiet     do not print progress messages\n  -d, --debug     don't remove temporary files\n\nReport bugs to <bug-libtool@gnu.org>.\"\n\nlt_cl_version=\"\\\nm4_ifset([AC_PACKAGE_NAME], [AC_PACKAGE_NAME ])config.lt[]dnl\nm4_ifset([AC_PACKAGE_VERSION], [ AC_PACKAGE_VERSION])\nconfigured by $[0], generated by m4_PACKAGE_STRING.\n\nCopyright (C) 2011 Free Software Foundation, Inc.\nThis config.lt script is free software; the Free Software Foundation\ngives unlimited permision to copy, distribute and modify it.\"\n\nwhile test $[#] != 0\ndo\n  case $[1] in\n    --version | --v* | -V )\n      echo \"$lt_cl_version\"; exit 0 ;;\n    --help | --h* | -h )\n      echo \"$lt_cl_help\"; exit 0 ;;\n    --debug | --d* | -d )\n      debug=: ;;\n    --quiet | --q* | --silent | --s* | -q )\n      lt_cl_silent=: ;;\n\n    -*) AC_MSG_ERROR([unrecognized option: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n\n    *) AC_MSG_ERROR([unrecognized argument: $[1]\nTry \\`$[0] --help' for more information.]) ;;\n  esac\n  shift\ndone\n\nif $lt_cl_silent; then\n  exec AS_MESSAGE_FD>/dev/null\nfi\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<_LTEOF\n_LT_OUTPUT_LIBTOOL_COMMANDS_INIT\n_LTEOF\n\ncat >>\"$CONFIG_LT\" <<\\_LTEOF\nAC_MSG_NOTICE([creating $ofile])\n_LT_OUTPUT_LIBTOOL_COMMANDS\nAS_EXIT(0)\n_LTEOF\nchmod +x \"$CONFIG_LT\"\n\n# configure is writing to config.log, but config.lt does its own redirection,\n# appending to config.log, which fails on DOS, as config.log is still kept\n# open by configure.  Here we exec the FD to /dev/null, effectively closing\n# config.log, so it can be properly (re)opened and appended to by config.lt.\nlt_cl_success=:\ntest \"$silent\" = yes &&\n  lt_config_lt_args=\"$lt_config_lt_args --quiet\"\nexec AS_MESSAGE_LOG_FD>/dev/null\n$SHELL \"$CONFIG_LT\" $lt_config_lt_args || lt_cl_success=false\nexec AS_MESSAGE_LOG_FD>>config.log\n$lt_cl_success || AS_EXIT(1)\n])# LT_OUTPUT\n\n\n# _LT_CONFIG(TAG)\n# ---------------\n# If TAG is the built-in tag, create an initial libtool script with a\n# default configuration from the untagged config vars.  Otherwise add code\n# to config.status for appending the configuration named by TAG from the\n# matching tagged config vars.\nm4_defun([_LT_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_CONFIG_SAVE_COMMANDS([\n  m4_define([_LT_TAG], m4_if([$1], [], [C], [$1]))dnl\n  m4_if(_LT_TAG, [C], [\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n_LT_COPYING\n_LT_LIBTOOL_TAGS\n\n# ### BEGIN LIBTOOL CONFIG\n_LT_LIBTOOL_CONFIG_VARS\n_LT_LIBTOOL_TAG_VARS\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n  _LT_PROG_LTMAIN\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  _LT_PROG_REPLACE_SHELLFNS\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n],\n[cat <<_LT_EOF >> \"$ofile\"\n\ndnl Unfortunately we have to use $1 here, since _LT_TAG is not expanded\ndnl in a comment (ie after a #).\n# ### BEGIN LIBTOOL TAG CONFIG: $1\n_LT_LIBTOOL_TAG_VARS(_LT_TAG)\n# ### END LIBTOOL TAG CONFIG: $1\n_LT_EOF\n])dnl /m4_if\n],\n[m4_if([$1], [], [\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'], [])\n])dnl /_LT_CONFIG_SAVE_COMMANDS\n])# _LT_CONFIG\n\n\n# LT_SUPPORTED_TAG(TAG)\n# ---------------------\n# Trace this macro to discover what tags are supported by the libtool\n# --tag option, using:\n#    autoconf --trace 'LT_SUPPORTED_TAG:$1'\nAC_DEFUN([LT_SUPPORTED_TAG], [])\n\n\n# C support is built-in for now\nm4_define([_LT_LANG_C_enabled], [])\nm4_define([_LT_TAGS], [])\n\n\n# LT_LANG(LANG)\n# -------------\n# Enable libtool support for the given language if not already enabled.\nAC_DEFUN([LT_LANG],\n[AC_BEFORE([$0], [LT_OUTPUT])dnl\nm4_case([$1],\n  [C],\t\t\t[_LT_LANG(C)],\n  [C++],\t\t[_LT_LANG(CXX)],\n  [Go],\t\t\t[_LT_LANG(GO)],\n  [Java],\t\t[_LT_LANG(GCJ)],\n  [Fortran 77],\t\t[_LT_LANG(F77)],\n  [Fortran],\t\t[_LT_LANG(FC)],\n  [Windows Resource],\t[_LT_LANG(RC)],\n  [m4_ifdef([_LT_LANG_]$1[_CONFIG],\n    [_LT_LANG($1)],\n    [m4_fatal([$0: unsupported language: \"$1\"])])])dnl\n])# LT_LANG\n\n\n# _LT_LANG(LANGNAME)\n# ------------------\nm4_defun([_LT_LANG],\n[m4_ifdef([_LT_LANG_]$1[_enabled], [],\n  [LT_SUPPORTED_TAG([$1])dnl\n  m4_append([_LT_TAGS], [$1 ])dnl\n  m4_define([_LT_LANG_]$1[_enabled], [])dnl\n  _LT_LANG_$1_CONFIG($1)])dnl\n])# _LT_LANG\n\n\nm4_ifndef([AC_PROG_GO], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_GO.  When it is available in    #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\nm4_defun([AC_PROG_GO],\n[AC_LANG_PUSH(Go)dnl\nAC_ARG_VAR([GOC],     [Go compiler command])dnl\nAC_ARG_VAR([GOFLAGS], [Go compiler flags])dnl\n_AC_ARG_VAR_LDFLAGS()dnl\nAC_CHECK_TOOL(GOC, gccgo)\nif test -z \"$GOC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    AC_CHECK_PROG(GOC, [${ac_tool_prefix}gccgo], [${ac_tool_prefix}gccgo])\n  fi\nfi\nif test -z \"$GOC\"; then\n  AC_CHECK_PROG(GOC, gccgo, gccgo, false)\nfi\n])#m4_defun\n])#m4_ifndef\n\n\n# _LT_LANG_DEFAULT_CONFIG\n# -----------------------\nm4_defun([_LT_LANG_DEFAULT_CONFIG],\n[AC_PROVIDE_IFELSE([AC_PROG_CXX],\n  [LT_LANG(CXX)],\n  [m4_define([AC_PROG_CXX], defn([AC_PROG_CXX])[LT_LANG(CXX)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_F77],\n  [LT_LANG(F77)],\n  [m4_define([AC_PROG_F77], defn([AC_PROG_F77])[LT_LANG(F77)])])\n\nAC_PROVIDE_IFELSE([AC_PROG_FC],\n  [LT_LANG(FC)],\n  [m4_define([AC_PROG_FC], defn([AC_PROG_FC])[LT_LANG(FC)])])\n\ndnl The call to [A][M_PROG_GCJ] is quoted like that to stop aclocal\ndnl pulling things in needlessly.\nAC_PROVIDE_IFELSE([AC_PROG_GCJ],\n  [LT_LANG(GCJ)],\n  [AC_PROVIDE_IFELSE([A][M_PROG_GCJ],\n    [LT_LANG(GCJ)],\n    [AC_PROVIDE_IFELSE([LT_PROG_GCJ],\n      [LT_LANG(GCJ)],\n      [m4_ifdef([AC_PROG_GCJ],\n\t[m4_define([AC_PROG_GCJ], defn([AC_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([A][M_PROG_GCJ],\n\t[m4_define([A][M_PROG_GCJ], defn([A][M_PROG_GCJ])[LT_LANG(GCJ)])])\n       m4_ifdef([LT_PROG_GCJ],\n\t[m4_define([LT_PROG_GCJ], defn([LT_PROG_GCJ])[LT_LANG(GCJ)])])])])])\n\nAC_PROVIDE_IFELSE([AC_PROG_GO],\n  [LT_LANG(GO)],\n  [m4_define([AC_PROG_GO], defn([AC_PROG_GO])[LT_LANG(GO)])])\n\nAC_PROVIDE_IFELSE([LT_PROG_RC],\n  [LT_LANG(RC)],\n  [m4_define([LT_PROG_RC], defn([LT_PROG_RC])[LT_LANG(RC)])])\n])# _LT_LANG_DEFAULT_CONFIG\n\n# Obsolete macros:\nAU_DEFUN([AC_LIBTOOL_CXX], [LT_LANG(C++)])\nAU_DEFUN([AC_LIBTOOL_F77], [LT_LANG(Fortran 77)])\nAU_DEFUN([AC_LIBTOOL_FC], [LT_LANG(Fortran)])\nAU_DEFUN([AC_LIBTOOL_GCJ], [LT_LANG(Java)])\nAU_DEFUN([AC_LIBTOOL_RC], [LT_LANG(Windows Resource)])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_CXX], [])\ndnl AC_DEFUN([AC_LIBTOOL_F77], [])\ndnl AC_DEFUN([AC_LIBTOOL_FC], [])\ndnl AC_DEFUN([AC_LIBTOOL_GCJ], [])\ndnl AC_DEFUN([AC_LIBTOOL_RC], [])\n\n\n# _LT_TAG_COMPILER\n# ----------------\nm4_defun([_LT_TAG_COMPILER],\n[AC_REQUIRE([AC_PROG_CC])dnl\n\n_LT_DECL([LTCC], [CC], [1], [A C compiler])dnl\n_LT_DECL([LTCFLAGS], [CFLAGS], [1], [LTCC compiler flags])dnl\n_LT_TAGDECL([CC], [compiler], [1], [A language specific compiler])dnl\n_LT_TAGDECL([with_gcc], [GCC], [0], [Is the compiler the GNU compiler?])dnl\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n])# _LT_TAG_COMPILER\n\n\n# _LT_COMPILER_BOILERPLATE\n# ------------------------\n# Check for compiler boilerplate output or warnings with\n# the simple compiler test code.\nm4_defun([_LT_COMPILER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n])# _LT_COMPILER_BOILERPLATE\n\n\n# _LT_LINKER_BOILERPLATE\n# ----------------------\n# Check for linker boilerplate output or warnings with\n# the simple link test code.\nm4_defun([_LT_LINKER_BOILERPLATE],\n[m4_require([_LT_DECL_SED])dnl\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n])# _LT_LINKER_BOILERPLATE\n\n# _LT_REQUIRED_DARWIN_CHECKS\n# -------------------------\nm4_defun_once([_LT_REQUIRED_DARWIN_CHECKS],[\n  case $host_os in\n    rhapsody* | darwin*)\n    AC_CHECK_TOOL([DSYMUTIL], [dsymutil], [:])\n    AC_CHECK_TOOL([NMEDIT], [nmedit], [:])\n    AC_CHECK_TOOL([LIPO], [lipo], [:])\n    AC_CHECK_TOOL([OTOOL], [otool], [:])\n    AC_CHECK_TOOL([OTOOL64], [otool64], [:])\n    _LT_DECL([], [DSYMUTIL], [1],\n      [Tool to manipulate archived DWARF debug symbol files on Mac OS X])\n    _LT_DECL([], [NMEDIT], [1],\n      [Tool to change global to local symbols on Mac OS X])\n    _LT_DECL([], [LIPO], [1],\n      [Tool to manipulate fat objects and archives on Mac OS X])\n    _LT_DECL([], [OTOOL], [1],\n      [ldd/readelf like tool for Mach-O binaries on Mac OS X])\n    _LT_DECL([], [OTOOL64], [1],\n      [ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4])\n\n    AC_CACHE_CHECK([for -single_module linker flag],[lt_cv_apple_cc_single_mod],\n      [lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&AS_MESSAGE_LOG_FD\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&AS_MESSAGE_LOG_FD\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi])\n\n    AC_CACHE_CHECK([for -exported_symbols_list linker flag],\n      [lt_cv_ld_exported_symbols_list],\n      [lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n\t[lt_cv_ld_exported_symbols_list=yes],\n\t[lt_cv_ld_exported_symbols_list=no])\n\tLDFLAGS=\"$save_LDFLAGS\"\n    ])\n\n    AC_CACHE_CHECK([for -force_load linker flag],[lt_cv_ld_force_load],\n      [lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&AS_MESSAGE_LOG_FD\n      echo \"$AR cru libconftest.a conftest.o\" >&AS_MESSAGE_LOG_FD\n      $AR cru libconftest.a conftest.o 2>&AS_MESSAGE_LOG_FD\n      echo \"$RANLIB libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $RANLIB libconftest.a 2>&AS_MESSAGE_LOG_FD\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&AS_MESSAGE_LOG_FD\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&AS_MESSAGE_LOG_FD\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n    ])\n    case $host_os in\n    rhapsody* | darwin1.[[012]])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[[91]]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[[012]]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n])\n\n\n# _LT_DARWIN_LINKER_FEATURES([TAG])\n# ---------------------------------\n# Checks for linker and compiler features on darwin\nm4_defun([_LT_DARWIN_LINKER_FEATURES],\n[\n  m4_require([_LT_REQUIRED_DARWIN_CHECKS])\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_automatic, $1)=yes\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    _LT_TAGVAR(whole_archive_flag_spec, $1)='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n    m4_case([$1], [F77], [_LT_TAGVAR(compiler_needs_object, $1)=yes],\n                  [FC],  [_LT_TAGVAR(compiler_needs_object, $1)=yes])\n  else\n    _LT_TAGVAR(whole_archive_flag_spec, $1)=''\n  fi\n  _LT_TAGVAR(link_all_deplibs, $1)=yes\n  _LT_TAGVAR(allow_undefined_flag, $1)=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    _LT_TAGVAR(module_cmds, $1)=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    _LT_TAGVAR(module_expsym_cmds, $1)=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n    m4_if([$1], [CXX],\n[   if test \"$lt_cv_apple_cc_single_mod\" != \"yes\"; then\n      _LT_TAGVAR(archive_cmds, $1)=\"\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dsymutil}\"\n      _LT_TAGVAR(archive_expsym_cmds, $1)=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -r -keep_private_externs -nostdlib -o \\${lib}-master.o \\$libobjs~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\${lib}-master.o \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring${_lt_dar_export_syms}${_lt_dsymutil}\"\n    fi\n],[])\n  else\n  _LT_TAGVAR(ld_shlibs, $1)=no\n  fi\n])\n\n# _LT_SYS_MODULE_PATH_AIX([TAGNAME])\n# ----------------------------------\n# Links a minimal program and checks the executable\n# for the system default hardcoded library path. In most cases,\n# this is /usr/lib:/lib, but when the MPI compilers are used\n# the location of the communication and MPI libs are included too.\n# If we don't find anything, use the default library path according\n# to the aix ld manual.\n# Store the results from the different compilers for each TAGNAME.\n# Allow to override them for all tags through lt_cv_aix_libpath.\nm4_defun([_LT_SYS_MODULE_PATH_AIX],\n[m4_require([_LT_DECL_SED])dnl\nif test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  AC_CACHE_VAL([_LT_TAGVAR([lt_cv_aix_libpath_], [$1])],\n  [AC_LINK_IFELSE([AC_LANG_PROGRAM],[\n  lt_aix_libpath_sed='[\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }]'\n  _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi],[])\n  if test -z \"$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\"; then\n    _LT_TAGVAR([lt_cv_aix_libpath_], [$1])=\"/usr/lib:/lib\"\n  fi\n  ])\n  aix_libpath=$_LT_TAGVAR([lt_cv_aix_libpath_], [$1])\nfi\n])# _LT_SYS_MODULE_PATH_AIX\n\n\n# _LT_SHELL_INIT(ARG)\n# -------------------\nm4_define([_LT_SHELL_INIT],\n[m4_divert_text([M4SH-INIT], [$1\n])])# _LT_SHELL_INIT\n\n\n\n# _LT_PROG_ECHO_BACKSLASH\n# -----------------------\n# Find how we can fake an echo command that does not interpret backslash.\n# In particular, with Autoconf 2.60 or later we add some code to the start\n# of the generated configure script which will find a shell with a builtin\n# printf (which we can use as an echo command).\nm4_defun([_LT_PROG_ECHO_BACKSLASH],\n[ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\nAC_MSG_CHECKING([how to print strings])\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$[]1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\" \n}\n\ncase \"$ECHO\" in\n  printf*) AC_MSG_RESULT([printf]) ;;\n  print*) AC_MSG_RESULT([print -r]) ;;\n  *) AC_MSG_RESULT([cat]) ;;\nesac\n\nm4_ifdef([_AS_DETECT_SUGGESTED],\n[_AS_DETECT_SUGGESTED([\n  test -n \"${ZSH_VERSION+set}${BASH_VERSION+set}\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\n    ECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \"X`printf %s $ECHO`\" = \"X$ECHO\" \\\n      || test \"X`print -r -- $ECHO`\" = \"X$ECHO\" )])])\n\n_LT_DECL([], [SHELL], [1], [Shell to use when invoking shell scripts])\n_LT_DECL([], [ECHO], [1], [An echo program that protects backslashes])\n])# _LT_PROG_ECHO_BACKSLASH\n\n\n# _LT_WITH_SYSROOT\n# ----------------\nAC_DEFUN([_LT_WITH_SYSROOT],\n[AC_MSG_CHECKING([for sysroot])\nAC_ARG_WITH([sysroot],\n[  --with-sysroot[=DIR] Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).],\n[], [with_sysroot=no])\n\ndnl lt_sysroot will always be passed unquoted.  We quote it here\ndnl in case the user passed a directory name.\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   AC_MSG_RESULT([${with_sysroot}])\n   AC_MSG_ERROR([The sysroot must be an absolute path.])\n   ;;\nesac\n\n AC_MSG_RESULT([${lt_sysroot:-no}])\n_LT_DECL([], [lt_sysroot], [0], [The root where to search for ]dnl\n[dependent libraries, and in which our libraries should be installed.])])\n\n# _LT_ENABLE_LOCK\n# ---------------\nm4_defun([_LT_ENABLE_LOCK],\n[AC_ARG_ENABLE([libtool-lock],\n  [AS_HELP_STRING([--disable-libtool-lock],\n    [avoid locking (might break parallel builds)])])\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '[#]line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  AC_CACHE_CHECK([whether the C compiler needs -belf], lt_cv_cc_needs_belf,\n    [AC_LANG_PUSH(C)\n     AC_LINK_IFELSE([AC_LANG_PROGRAM([[]],[[]])],[lt_cv_cc_needs_belf=yes],[lt_cv_cc_needs_belf=no])\n     AC_LANG_POP])\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if AC_TRY_EVAL(ac_compile); then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n])# _LT_ENABLE_LOCK\n\n\n# _LT_PROG_AR\n# -----------\nm4_defun([_LT_PROG_AR],\n[AC_CHECK_TOOLS(AR, [ar], false)\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n_LT_DECL([], [AR], [1], [The archiver])\n_LT_DECL([], [AR_FLAGS], [1], [Flags to create an archive])\n\nAC_CACHE_CHECK([for archiver @FILE support], [lt_cv_ar_at_file],\n  [lt_cv_ar_at_file=no\n   AC_COMPILE_IFELSE([AC_LANG_PROGRAM],\n     [echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&AS_MESSAGE_LOG_FD'\n      AC_TRY_EVAL([lt_ar_try])\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\tAC_TRY_EVAL([lt_ar_try])\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n     ])\n  ])\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n_LT_DECL([], [archiver_list_spec], [1],\n  [How to feed a file listing to the archiver])\n])# _LT_PROG_AR\n\n\n# _LT_CMD_OLD_ARCHIVE\n# -------------------\nm4_defun([_LT_CMD_OLD_ARCHIVE],\n[_LT_PROG_AR\n\nAC_CHECK_TOOL(STRIP, strip, :)\ntest -z \"$STRIP\" && STRIP=:\n_LT_DECL([], [STRIP], [1], [A symbol stripping program])\n\nAC_CHECK_TOOL(RANLIB, ranlib, :)\ntest -z \"$RANLIB\" && RANLIB=:\n_LT_DECL([], [RANLIB], [1],\n    [Commands used to install an old-style archive])\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n_LT_DECL([], [old_postinstall_cmds], [2])\n_LT_DECL([], [old_postuninstall_cmds], [2])\n_LT_TAGDECL([], [old_archive_cmds], [2],\n    [Commands used to build an old-style archive])\n_LT_DECL([], [lock_old_archive_extraction], [0],\n    [Whether to use a lock for old archive extraction])\n])# _LT_CMD_OLD_ARCHIVE\n\n\n# _LT_COMPILER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#\t\t[OUTPUT-FILE], [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------------------\n# Check whether the given compiler option works\nAC_DEFUN([_LT_COMPILER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   m4_if([$4], , [ac_outfile=conftest.$ac_objext], [ac_outfile=$4])\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$3\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       $2=yes\n     fi\n   fi\n   $RM conftest*\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$5], , :, [$5])\nelse\n    m4_if([$6], , :, [$6])\nfi\n])# _LT_COMPILER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_COMPILER_OPTION], [_LT_COMPILER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_COMPILER_OPTION], [])\n\n\n# _LT_LINKER_OPTION(MESSAGE, VARIABLE-NAME, FLAGS,\n#                  [ACTION-SUCCESS], [ACTION-FAILURE])\n# ----------------------------------------------------\n# Check whether the given linker option works\nAC_DEFUN([_LT_LINKER_OPTION],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_SED])dnl\nAC_CACHE_CHECK([$1], [$2],\n  [$2=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $3\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&AS_MESSAGE_LOG_FD\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         $2=yes\n       fi\n     else\n       $2=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n])\n\nif test x\"[$]$2\" = xyes; then\n    m4_if([$4], , :, [$4])\nelse\n    m4_if([$5], , :, [$5])\nfi\n])# _LT_LINKER_OPTION\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_LINKER_OPTION], [_LT_LINKER_OPTION])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_LINKER_OPTION], [])\n\n\n# LT_CMD_MAX_LEN\n#---------------\nAC_DEFUN([LT_CMD_MAX_LEN],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n# find the maximum length of command line arguments\nAC_MSG_CHECKING([the maximum length of command line arguments])\nAC_CACHE_VAL([lt_cv_sys_max_cmd_len], [dnl\n  i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[[\t ]]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n\ttest undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n])\nif test -n $lt_cv_sys_max_cmd_len ; then\n  AC_MSG_RESULT($lt_cv_sys_max_cmd_len)\nelse\n  AC_MSG_RESULT(none)\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n_LT_DECL([], [max_cmd_len], [0],\n    [What is the maximum length of a command?])\n])# LT_CMD_MAX_LEN\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_SYS_MAX_CMD_LEN], [LT_CMD_MAX_LEN])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_SYS_MAX_CMD_LEN], [])\n\n\n# _LT_HEADER_DLFCN\n# ----------------\nm4_defun([_LT_HEADER_DLFCN],\n[AC_CHECK_HEADERS([dlfcn.h], [], [], [AC_INCLUDES_DEFAULT])dnl\n])# _LT_HEADER_DLFCN\n\n\n# _LT_TRY_DLOPEN_SELF (ACTION-IF-TRUE, ACTION-IF-TRUE-W-USCORE,\n#                      ACTION-IF-FALSE, ACTION-IF-CROSS-COMPILING)\n# ----------------------------------------------------------------\nm4_defun([_LT_TRY_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"$cross_compiling\" = yes; then :\n  [$4]\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n[#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}]\n_LT_EOF\n  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&AS_MESSAGE_LOG_FD 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) $1 ;;\n      x$lt_dlneed_uscore) $2 ;;\n      x$lt_dlunknown|x*) $3 ;;\n    esac\n  else :\n    # compilation failed\n    $3\n  fi\nfi\nrm -fr conftest*\n])# _LT_TRY_DLOPEN_SELF\n\n\n# LT_SYS_DLOPEN_SELF\n# ------------------\nAC_DEFUN([LT_SYS_DLOPEN_SELF],\n[m4_require([_LT_HEADER_DLFCN])dnl\nif test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],[\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ])\n    ;;\n\n  *)\n    AC_CHECK_FUNC([shl_load],\n\t  [lt_cv_dlopen=\"shl_load\"],\n      [AC_CHECK_LIB([dld], [shl_load],\n\t    [lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"],\n\t[AC_CHECK_FUNC([dlopen],\n\t      [lt_cv_dlopen=\"dlopen\"],\n\t  [AC_CHECK_LIB([dl], [dlopen],\n\t\t[lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"],\n\t    [AC_CHECK_LIB([svld], [dlopen],\n\t\t  [lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"],\n\t      [AC_CHECK_LIB([dld], [dld_link],\n\t\t    [lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"])\n\t      ])\n\t    ])\n\t  ])\n\t])\n      ])\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    AC_CACHE_CHECK([whether a program can dlopen itself],\n\t  lt_cv_dlopen_self, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self=yes, lt_cv_dlopen_self=yes,\n\t    lt_cv_dlopen_self=no, lt_cv_dlopen_self=cross)\n    ])\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      AC_CACHE_CHECK([whether a statically linked program can dlopen itself],\n\t  lt_cv_dlopen_self_static, [dnl\n\t  _LT_TRY_DLOPEN_SELF(\n\t    lt_cv_dlopen_self_static=yes, lt_cv_dlopen_self_static=yes,\n\t    lt_cv_dlopen_self_static=no,  lt_cv_dlopen_self_static=cross)\n      ])\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n_LT_DECL([dlopen_support], [enable_dlopen], [0],\n\t [Whether dlopen is supported])\n_LT_DECL([dlopen_self], [enable_dlopen_self], [0],\n\t [Whether dlopen of programs is supported])\n_LT_DECL([dlopen_self_static], [enable_dlopen_self_static], [0],\n\t [Whether dlopen of statically linked programs is supported])\n])# LT_SYS_DLOPEN_SELF\n\n# Old name:\nAU_ALIAS([AC_LIBTOOL_DLOPEN_SELF], [LT_SYS_DLOPEN_SELF])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN_SELF], [])\n\n\n# _LT_COMPILER_C_O([TAGNAME])\n# ---------------------------\n# Check to see if options -c and -o are simultaneously supported by compiler.\n# This macro does not hard code the compiler like AC_PROG_CC_C_O.\nm4_defun([_LT_COMPILER_C_O],\n[m4_require([_LT_DECL_SED])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_CACHE_CHECK([if $compiler supports -c -o file.$ac_objext],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [[^ ]]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&AS_MESSAGE_LOG_FD\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       _LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n     fi\n   fi\n   chmod u+w . 2>&AS_MESSAGE_LOG_FD\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n])\n_LT_TAGDECL([compiler_c_o], [lt_cv_prog_compiler_c_o], [1],\n\t[Does compiler simultaneously support -c and -o options?])\n])# _LT_COMPILER_C_O\n\n\n# _LT_COMPILER_FILE_LOCKS([TAGNAME])\n# ----------------------------------\n# Check to see if we can do hard links to lock some files if needed\nm4_defun([_LT_COMPILER_FILE_LOCKS],\n[m4_require([_LT_ENABLE_LOCK])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\n_LT_COMPILER_C_O([$1])\n\nhard_links=\"nottested\"\nif test \"$_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  AC_MSG_CHECKING([if we can lock with hard links])\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  AC_MSG_RESULT([$hard_links])\n  if test \"$hard_links\" = no; then\n    AC_MSG_WARN([`$CC' does not support `-c -o', so `make -j' may be unsafe])\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n_LT_DECL([], [need_locks], [1], [Must we lock files when doing compilation?])\n])# _LT_COMPILER_FILE_LOCKS\n\n\n# _LT_CHECK_OBJDIR\n# ----------------\nm4_defun([_LT_CHECK_OBJDIR],\n[AC_CACHE_CHECK([for objdir], [lt_cv_objdir],\n[rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null])\nobjdir=$lt_cv_objdir\n_LT_DECL([], [objdir], [0],\n         [The name of the directory that contains temporary libtool files])dnl\nm4_pattern_allow([LT_OBJDIR])dnl\nAC_DEFINE_UNQUOTED(LT_OBJDIR, \"$lt_cv_objdir/\",\n  [Define to the sub-directory in which libtool stores uninstalled libraries.])\n])# _LT_CHECK_OBJDIR\n\n\n# _LT_LINKER_HARDCODE_LIBPATH([TAGNAME])\n# --------------------------------------\n# Check hardcoding attributes.\nm4_defun([_LT_LINKER_HARDCODE_LIBPATH],\n[AC_MSG_CHECKING([how to hardcode library paths into programs])\n_LT_TAGVAR(hardcode_action, $1)=\nif test -n \"$_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\" ||\n   test -n \"$_LT_TAGVAR(runpath_var, $1)\" ||\n   test \"X$_LT_TAGVAR(hardcode_automatic, $1)\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$_LT_TAGVAR(hardcode_direct, $1)\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, $1)\" != no &&\n     test \"$_LT_TAGVAR(hardcode_minus_L, $1)\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    _LT_TAGVAR(hardcode_action, $1)=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    _LT_TAGVAR(hardcode_action, $1)=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  _LT_TAGVAR(hardcode_action, $1)=unsupported\nfi\nAC_MSG_RESULT([$_LT_TAGVAR(hardcode_action, $1)])\n\nif test \"$_LT_TAGVAR(hardcode_action, $1)\" = relink ||\n   test \"$_LT_TAGVAR(inherit_rpath, $1)\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n_LT_TAGDECL([], [hardcode_action], [0],\n    [How to hardcode a shared library path into an executable])\n])# _LT_LINKER_HARDCODE_LIBPATH\n\n\n# _LT_CMD_STRIPLIB\n# ----------------\nm4_defun([_LT_CMD_STRIPLIB],\n[m4_require([_LT_DECL_EGREP])\nstriplib=\nold_striplib=\nAC_MSG_CHECKING([whether stripping libraries is possible])\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  AC_MSG_RESULT([yes])\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      AC_MSG_RESULT([yes])\n    else\n      AC_MSG_RESULT([no])\n    fi\n    ;;\n  *)\n    AC_MSG_RESULT([no])\n    ;;\n  esac\nfi\n_LT_DECL([], [old_striplib], [1], [Commands to strip libraries])\n_LT_DECL([], [striplib], [1])\n])# _LT_CMD_STRIPLIB\n\n\n# _LT_SYS_DYNAMIC_LINKER([TAG])\n# -----------------------------\n# PORTME Fill in your ld.so characteristics\nm4_defun([_LT_SYS_DYNAMIC_LINKER],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_OBJDUMP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CHECK_SHELL_FEATURES])dnl\nAC_MSG_CHECKING([dynamic linker characteristics])\nm4_if([$1],\n\t[], [\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([[A-Za-z]]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[[lt_foo]]++; }\n  if (lt_freq[[lt_foo]] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([[A-Za-z]]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi])\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[[4-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[[01]] | aix4.[[01]].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([[^/]]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[[45]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\nm4_if([$1], [],[\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"])\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([[a-zA-Z]]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | [$GREP ';[c-zC-Z]:/' >/dev/null]; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[[.]]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\nm4_if([$1], [],[\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"])\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[[23]].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[[01]]* | freebsdelf3.[[01]]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[[2-9]]* | freebsdelf3.[[2-9]]* | \\\n  freebsd4.[[0-5]] | freebsdelf4.[[0-5]] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[[3-9]]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  AC_CACHE_VAL([lt_cv_shlibpath_overrides_runpath],\n    [lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$_LT_TAGVAR(lt_prog_compiler_wl, $1)\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $_LT_TAGVAR(hardcode_libdir_flag_spec, $1)\\\"\"\n    AC_LINK_IFELSE([AC_LANG_PROGRAM([],[])],\n      [AS_IF([ ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null],\n\t [lt_cv_shlibpath_overrides_runpath=yes])])\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n    ])\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\[$]2)); skip = 1; } { if (!skip) print \\[$]0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[[89]] | openbsd2.[[89]].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\nAC_MSG_RESULT([$dynamic_linker])\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n_LT_DECL([], [variables_saved_for_relink], [1],\n    [Variables whose values should be saved in libtool wrapper scripts and\n    restored at link time])\n_LT_DECL([], [need_lib_prefix], [0],\n    [Do we need the \"lib\" prefix for modules?])\n_LT_DECL([], [need_version], [0], [Do we need a version for libraries?])\n_LT_DECL([], [version_type], [0], [Library versioning type])\n_LT_DECL([], [runpath_var], [0],  [Shared library runtime path variable])\n_LT_DECL([], [shlibpath_var], [0],[Shared library path variable])\n_LT_DECL([], [shlibpath_overrides_runpath], [0],\n    [Is shlibpath searched before the hard-coded library search path?])\n_LT_DECL([], [libname_spec], [1], [Format of library name prefix])\n_LT_DECL([], [library_names_spec], [1],\n    [[List of archive names.  First name is the real one, the rest are links.\n    The last name is the one that the linker finds with -lNAME]])\n_LT_DECL([], [soname_spec], [1],\n    [[The coded name of the library, if different from the real name]])\n_LT_DECL([], [install_override_mode], [1],\n    [Permission mode override for installation of shared libraries])\n_LT_DECL([], [postinstall_cmds], [2],\n    [Command to use after installation of a shared archive])\n_LT_DECL([], [postuninstall_cmds], [2],\n    [Command to use after uninstallation of a shared archive])\n_LT_DECL([], [finish_cmds], [2],\n    [Commands used to finish a libtool library installation in a directory])\n_LT_DECL([], [finish_eval], [1],\n    [[As \"finish_cmds\", except a single script fragment to be evaled but\n    not shown]])\n_LT_DECL([], [hardcode_into_libs], [0],\n    [Whether we should hardcode library paths into libraries])\n_LT_DECL([], [sys_lib_search_path_spec], [2],\n    [Compile-time system search path for libraries])\n_LT_DECL([], [sys_lib_dlsearch_path_spec], [2],\n    [Run-time system search path for libraries])\n])# _LT_SYS_DYNAMIC_LINKER\n\n\n# _LT_PATH_TOOL_PREFIX(TOOL)\n# --------------------------\n# find a file program which can recognize shared library\nAC_DEFUN([_LT_PATH_TOOL_PREFIX],\n[m4_require([_LT_DECL_EGREP])dnl\nAC_MSG_CHECKING([for $1])\nAC_CACHE_VAL(lt_cv_path_MAGIC_CMD,\n[case $MAGIC_CMD in\n[[\\\\/*] |  ?:[\\\\/]*])\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\ndnl $ac_dummy forces splitting on constant user-supplied paths.\ndnl POSIX.2 word splitting is done only on the output of word expansions,\ndnl not every word.  This closes a longstanding sh security hole.\n  ac_dummy=\"m4_if([$2], , $PATH, [$2])\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/$1; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/$1\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac])\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  AC_MSG_RESULT($MAGIC_CMD)\nelse\n  AC_MSG_RESULT(no)\nfi\n_LT_DECL([], [MAGIC_CMD], [0],\n\t [Used to examine libraries when file_magic_cmd begins with \"file\"])dnl\n])# _LT_PATH_TOOL_PREFIX\n\n# Old name:\nAU_ALIAS([AC_PATH_TOOL_PREFIX], [_LT_PATH_TOOL_PREFIX])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_PATH_TOOL_PREFIX], [])\n\n\n# _LT_PATH_MAGIC\n# --------------\n# find a file program which can recognize a shared library\nm4_defun([_LT_PATH_MAGIC],\n[_LT_PATH_TOOL_PREFIX(${ac_tool_prefix}file, /usr/bin$PATH_SEPARATOR$PATH)\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    _LT_PATH_TOOL_PREFIX(file, /usr/bin$PATH_SEPARATOR$PATH)\n  else\n    MAGIC_CMD=:\n  fi\nfi\n])# _LT_PATH_MAGIC\n\n\n# LT_PATH_LD\n# ----------\n# find the pathname to the GNU or non-GNU linker\nAC_DEFUN([LT_PATH_LD],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PROG_ECHO_BACKSLASH])dnl\n\nAC_ARG_WITH([gnu-ld],\n    [AS_HELP_STRING([--with-gnu-ld],\n\t[assume the C compiler uses GNU ld @<:@default=no@:>@])],\n    [test \"$withval\" = no || with_gnu_ld=yes],\n    [with_gnu_ld=no])dnl\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  AC_MSG_CHECKING([for ld used by $CC])\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [[\\\\/]]* | ?:[[\\\\/]]*)\n      re_direlt='/[[^/]][[^/]]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  AC_MSG_CHECKING([for GNU ld])\nelse\n  AC_MSG_CHECKING([for non-GNU ld])\nfi\nAC_CACHE_VAL(lt_cv_path_LD,\n[if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi])\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  AC_MSG_RESULT($LD)\nelse\n  AC_MSG_RESULT(no)\nfi\ntest -z \"$LD\" && AC_MSG_ERROR([no acceptable ld found in \\$PATH])\n_LT_PATH_LD_GNU\nAC_SUBST([LD])\n\n_LT_TAGDECL([], [LD], [1], [The linker used to build libraries])\n])# LT_PATH_LD\n\n# Old names:\nAU_ALIAS([AM_PROG_LD], [LT_PATH_LD])\nAU_ALIAS([AC_PROG_LD], [LT_PATH_LD])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_LD], [])\ndnl AC_DEFUN([AC_PROG_LD], [])\n\n\n# _LT_PATH_LD_GNU\n#- --------------\nm4_defun([_LT_PATH_LD_GNU],\n[AC_CACHE_CHECK([if the linker ($LD) is GNU ld], lt_cv_prog_gnu_ld,\n[# I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac])\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n])# _LT_PATH_LD_GNU\n\n\n# _LT_CMD_RELOAD\n# --------------\n# find reload flag for linker\n#   -- PORTME Some linkers may need a different reload flag.\nm4_defun([_LT_CMD_RELOAD],\n[AC_CACHE_CHECK([for $LD option to reload object files],\n  lt_cv_ld_reload_flag,\n  [lt_cv_ld_reload_flag='-r'])\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n_LT_TAGDECL([], [reload_flag], [1], [How to create reloadable object files])dnl\n_LT_TAGDECL([], [reload_cmds], [2])dnl\n])# _LT_CMD_RELOAD\n\n\n# _LT_CHECK_MAGIC_METHOD\n# ----------------------\n# how to check for library dependencies\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_MAGIC_METHOD],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nAC_CACHE_CHECK([how to recognize dependent libraries],\nlt_cv_deplibs_check_method,\n[lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[[4-9]]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[[45]]*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[[3-9]]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|ELF-[[0-9]][[0-9]]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    [lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]']\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[[0-9]][[0-9]][[0-9]]|PA-RISC[[0-9]]\\.[[0-9]]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[[3-9]]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[[^/]]+(\\.so\\.[[0-9]]+\\.[[0-9]]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[ML]]SB (shared object|dynamic lib) M[[0-9]][[0-9]]* Version [[0-9]]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [[0-9]][[0-9]]*-bit [[LM]]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n])\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[[\\1]]\\/[[\\1]]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n_LT_DECL([], [deplibs_check_method], [1],\n    [Method to check whether dependent libraries are shared objects])\n_LT_DECL([], [file_magic_cmd], [1],\n    [Command to use when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [file_magic_glob], [1],\n    [How to find potential files when deplibs_check_method = \"file_magic\"])\n_LT_DECL([], [want_nocaseglob], [1],\n    [Find potential files using nocaseglob when deplibs_check_method = \"file_magic\"])\n])# _LT_CHECK_MAGIC_METHOD\n\n\n# LT_PATH_NM\n# ----------\n# find the pathname to a BSD- or MS-compatible name lister\nAC_DEFUN([LT_PATH_NM],\n[AC_REQUIRE([AC_PROG_CC])dnl\nAC_CACHE_CHECK([for BSD- or MS-compatible name lister (nm)], lt_cv_path_NM,\n[if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi])\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    AC_CHECK_TOOLS(DUMPBIN, [dumpbin \"link -dump\"], :)\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n  AC_SUBST([DUMPBIN])\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\nAC_SUBST([NM])\n_LT_DECL([], [NM], [1], [A BSD- or MS-compatible name lister])dnl\n\nAC_CACHE_CHECK([the name lister ($NM) interface], [lt_cv_nm_interface],\n  [lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&AS_MESSAGE_LOG_FD)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&AS_MESSAGE_LOG_FD)\n  cat conftest.out >&AS_MESSAGE_LOG_FD\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*])\n])# LT_PATH_NM\n\n# Old names:\nAU_ALIAS([AM_PROG_NM], [LT_PATH_NM])\nAU_ALIAS([AC_PROG_NM], [LT_PATH_NM])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_PROG_NM], [])\ndnl AC_DEFUN([AC_PROG_NM], [])\n\n# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n# --------------------------------\n# how to determine the name of the shared library\n# associated with a specific link library.\n#  -- PORTME fill in with the dynamic library characteristics\nm4_defun([_LT_CHECK_SHAREDLIB_FROM_LINKLIB],\n[m4_require([_LT_DECL_EGREP])\nm4_require([_LT_DECL_OBJDUMP])\nm4_require([_LT_DECL_DLLTOOL])\nAC_CACHE_CHECK([how to associate runtime and link libraries],\nlt_cv_sharedlib_from_linklib_cmd,\n[lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n])\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n_LT_DECL([], [sharedlib_from_linklib_cmd], [1],\n    [Command to associate shared and link libraries])\n])# _LT_CHECK_SHAREDLIB_FROM_LINKLIB\n\n\n# _LT_PATH_MANIFEST_TOOL\n# ----------------------\n# locate the manifest tool\nm4_defun([_LT_PATH_MANIFEST_TOOL],\n[AC_CHECK_TOOL(MANIFEST_TOOL, mt, :)\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\nAC_CACHE_CHECK([if $MANIFEST_TOOL is a manifest tool], [lt_cv_path_mainfest_tool],\n  [lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&AS_MESSAGE_LOG_FD\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&AS_MESSAGE_LOG_FD\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*])\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n_LT_DECL([], [MANIFEST_TOOL], [1], [Manifest tool])dnl\n])# _LT_PATH_MANIFEST_TOOL\n\n\n# LT_LIB_M\n# --------\n# check for math library\nAC_DEFUN([LT_LIB_M],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nLIBM=\ncase $host in\n*-*-beos* | *-*-cegcc* | *-*-cygwin* | *-*-haiku* | *-*-pw32* | *-*-darwin*)\n  # These system don't have libm, or don't need it\n  ;;\n*-ncr-sysv4.3*)\n  AC_CHECK_LIB(mw, _mwvalidcheckl, LIBM=\"-lmw\")\n  AC_CHECK_LIB(m, cos, LIBM=\"$LIBM -lm\")\n  ;;\n*)\n  AC_CHECK_LIB(m, cos, LIBM=\"-lm\")\n  ;;\nesac\nAC_SUBST([LIBM])\n])# LT_LIB_M\n\n# Old name:\nAU_ALIAS([AC_CHECK_LIBM], [LT_LIB_M])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_CHECK_LIBM], [])\n\n\n# _LT_COMPILER_NO_RTTI([TAGNAME])\n# -------------------------------\nm4_defun([_LT_COMPILER_NO_RTTI],\n[m4_require([_LT_TAG_COMPILER])dnl\n\n_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -Xcompiler -fno-builtin' ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin' ;;\n  esac\n\n  _LT_COMPILER_OPTION([if $compiler supports -fno-rtti -fno-exceptions],\n    lt_cv_prog_compiler_rtti_exceptions,\n    [-fno-rtti -fno-exceptions], [],\n    [_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\"$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1) -fno-rtti -fno-exceptions\"])\nfi\n_LT_TAGDECL([no_builtin_flag], [lt_prog_compiler_no_builtin_flag], [1],\n\t[Compiler flag to turn off builtin functions])\n])# _LT_COMPILER_NO_RTTI\n\n\n# _LT_CMD_GLOBAL_SYMBOLS\n# ----------------------\nm4_defun([_LT_CMD_GLOBAL_SYMBOLS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_PROG_CC])dnl\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nAC_REQUIRE([LT_PATH_LD])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_TAG_COMPILER])dnl\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\nAC_MSG_CHECKING([command to parse $NM output from $compiler object])\nAC_CACHE_VAL([lt_cv_sys_global_symbol_pipe],\n[\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[[BCDEGRST]]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([[_A-Za-z]][[_A-Za-z0-9]]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[[BCDT]]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[[ABCDGISTW]]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[[ABCDEGRST]]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[[BCDEGRST]]'\n  ;;\nosf*)\n  symcode='[[BCDEGQRST]]'\n  ;;\nsolaris*)\n  symcode='[[BDRT]]'\n  ;;\nsco3.2v5*)\n  symcode='[[DT]]'\n  ;;\nsysv4.2uw2*)\n  symcode='[[DT]]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[[ABDT]]'\n  ;;\nsysv4)\n  symcode='[[DFNSTU]]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[[ABCDGIRSTW]]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([[^ ]]*\\)[[ ]]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\(lib[[^ ]]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([[^ ]]*\\) \\([[^ ]]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK ['\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx]\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[[\t ]]\\($symcode$symcode*\\)[[\t ]][[\t ]]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if AC_TRY_EVAL(ac_compile); then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if AC_TRY_EVAL(NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT@&t@_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT@&t@_DLSYM_CONST\n#else\n# define LT@&t@_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT@&t@_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[[]] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$_LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)\"\n\t  if AC_TRY_EVAL(ac_link) && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&AS_MESSAGE_LOG_FD\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&AS_MESSAGE_LOG_FD\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&AS_MESSAGE_LOG_FD\n    fi\n  else\n    echo \"$progname: failed program was:\" >&AS_MESSAGE_LOG_FD\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n])\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  AC_MSG_RESULT(failed)\nelse\n  AC_MSG_RESULT(ok)\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[[@]]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n_LT_DECL([global_symbol_pipe], [lt_cv_sys_global_symbol_pipe], [1],\n    [Take the output of nm and produce a listing of raw symbols and C names])\n_LT_DECL([global_symbol_to_cdecl], [lt_cv_sys_global_symbol_to_cdecl], [1],\n    [Transform the output of nm in a proper C declaration])\n_LT_DECL([global_symbol_to_c_name_address],\n    [lt_cv_sys_global_symbol_to_c_name_address], [1],\n    [Transform the output of nm in a C name address pair])\n_LT_DECL([global_symbol_to_c_name_address_lib_prefix],\n    [lt_cv_sys_global_symbol_to_c_name_address_lib_prefix], [1],\n    [Transform the output of nm in a C name address pair when lib prefix is needed])\n_LT_DECL([], [nm_file_list_spec], [1],\n    [Specify filename containing input files for $NM])\n]) # _LT_CMD_GLOBAL_SYMBOLS\n\n\n# _LT_COMPILER_PIC([TAGNAME])\n# ---------------------------\nm4_defun([_LT_COMPILER_PIC],\n[m4_require([_LT_TAG_COMPILER])dnl\n_LT_TAGVAR(lt_prog_compiler_wl, $1)=\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n_LT_TAGVAR(lt_prog_compiler_static, $1)=\n\nm4_if([$1], [CXX], [\n  # C++ specific cases for pic, static, wl, etc.\n  if test \"$GXX\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n    aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n    mingw* | cygwin* | os2* | pw32* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n    *djgpp*)\n      # DJGPP does not support shared libraries at all\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n      ;;\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n    *qnx* | *nto*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n  else\n    case $host_os in\n      aix[[4-9]]*)\n\t# All AIX code is PIC.\n\tif test \"$host_cpu\" = ia64; then\n\t  # AIX 5 now supports IA64 processor\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\telse\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n\tfi\n\t;;\n      chorus*)\n\tcase $cc_basename in\n\tcxch68*)\n\t  # Green Hills C++ Compiler\n\t  # _LT_TAGVAR(lt_prog_compiler_static, $1)=\"--no_auto_instantiation -u __main -u __premain -u _abort -r $COOL_DIR/lib/libOrb.a $MVME_DIR/lib/CC/libC.a $MVME_DIR/lib/classix/libcx.s.a\"\n\t  ;;\n\tesac\n\t;;\n      mingw* | cygwin* | os2* | pw32* | cegcc*)\n\t# This hack is so that the source file can tell whether it is being\n\t# built for inclusion in a dll (and should export symbols for example).\n\tm4_if([$1], [GCJ], [],\n\t  [_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n\t;;\n      dgux*)\n\tcase $cc_basename in\n\t  ec++*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  ghcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      freebsd* | dragonfly*)\n\t# FreeBSD uses GNU C++\n\t;;\n      hpux9* | hpux10* | hpux11*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    if test \"$host_cpu\" != ia64; then\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t    fi\n\t    ;;\n\t  aCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n\t    case $host_cpu in\n\t    hppa*64*|ia64*)\n\t      # +Z the default\n\t      ;;\n\t    *)\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t      ;;\n\t    esac\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      interix*)\n\t# This is c89, which is MS Visual C++ (no shared libs)\n\t# Anyone wants to do a port?\n\t;;\n      irix5* | irix6* | nonstopux*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    # CC pic flag -KPIC is the default.\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    # KAI C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    ;;\n\t  ecpc* )\n\t    # old Intel C++ for x86_64 which still supported -KPIC.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  icpc* )\n\t    # Intel C++, used to be incompatible with GCC.\n\t    # ICC 10 doesn't accept -KPIC any more.\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t    ;;\n\t  pgCC* | pgcpp*)\n\t    # Portland Group C++ compiler\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  xlc* | xlC* | bgxl[[cC]]* | mpixl[[cC]]*)\n\t    # IBM XL 8.0, 9.0 on PPC and BlueGene\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n      lynxos*)\n\t;;\n      m88k*)\n\t;;\n      mvs*)\n\tcase $cc_basename in\n\t  cxx*)\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-W c,exportall'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      netbsd* | netbsdelf*-gnu)\n\t;;\n      *qnx* | *nto*)\n        # QNX uses GNU C++, but need to define -shared option too, otherwise\n        # it will coredump.\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n        ;;\n      osf3* | osf4* | osf5*)\n\tcase $cc_basename in\n\t  KCC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='--backend -Wl,'\n\t    ;;\n\t  RCC*)\n\t    # Rational C++ 2.4.1\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  cxx*)\n\t    # Digital/Compaq C++\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    # Make sure the PIC flag is empty.  It appears that all Alpha\n\t    # Linux and Compaq Tru64 Unix objects are PIC.\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      psos*)\n\t;;\n      solaris*)\n\tcase $cc_basename in\n\t  CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t    ;;\n\t  gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sunos4*)\n\tcase $cc_basename in\n\t  CC*)\n\t    # Sun C++ 4.x\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\t  lcc*)\n\t    # Lucid\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n\tcase $cc_basename in\n\t  CC*)\n\t    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t    ;;\n\tesac\n\t;;\n      tandem*)\n\tcase $cc_basename in\n\t  NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t    ;;\n\t  *)\n\t    ;;\n\tesac\n\t;;\n      vxworks*)\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n\t;;\n    esac\n  fi\n],\n[\n  if test \"$GCC\" = yes; then\n    _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n    _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            _LT_TAGVAR(lt_prog_compiler_pic, $1)='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[[3-9]]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Xlinker '\n      if test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n        _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"-Xcompiler $_LT_TAGVAR(lt_prog_compiler_pic, $1)\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      else\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      m4_if([$1], [GCJ], [],\n\t[_LT_TAGVAR(lt_prog_compiler_pic, $1)='-DDLL_EXPORT'])\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # PIC (with -KPIC) is the default.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='--shared'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,-Wl,,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n        ;;\n      ccc*)\n        _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n        # All Alpha code is PIC.\n        _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-qpic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [[1-7]].* | *Sun*Fortran*\\ 8.[[0-3]]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  ;;\n        *Intel*\\ [[CF]]*Compiler*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n\t  _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fpic'\n\t  _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      # All OSF/1 code is PIC.\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    rdos*)\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-non_shared'\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld ';;\n      *)\n\t_LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Qoption ld '\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-PIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\t_LT_TAGVAR(lt_prog_compiler_pic, $1)='-Kconform_pic'\n\t_LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-KPIC'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    unicos*)\n      _LT_TAGVAR(lt_prog_compiler_wl, $1)='-Wl,'\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(lt_prog_compiler_pic, $1)='-pic'\n      _LT_TAGVAR(lt_prog_compiler_static, $1)='-Bstatic'\n      ;;\n\n    *)\n      _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no\n      ;;\n    esac\n  fi\n])\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\n    ;;\n  *)\n    _LT_TAGVAR(lt_prog_compiler_pic, $1)=\"$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])\"\n    ;;\nesac\n\nAC_CACHE_CHECK([for $compiler option to produce PIC],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)],\n  [_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_prog_compiler_pic, $1)])\n_LT_TAGVAR(lt_prog_compiler_pic, $1)=$_LT_TAGVAR(lt_cv_prog_compiler_pic, $1)\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$_LT_TAGVAR(lt_prog_compiler_pic, $1)\"; then\n  _LT_COMPILER_OPTION([if $compiler PIC flag $_LT_TAGVAR(lt_prog_compiler_pic, $1) works],\n    [_LT_TAGVAR(lt_cv_prog_compiler_pic_works, $1)],\n    [$_LT_TAGVAR(lt_prog_compiler_pic, $1)@&t@m4_if([$1],[],[ -DPIC],[m4_if([$1],[CXX],[ -DPIC],[])])], [],\n    [case $_LT_TAGVAR(lt_prog_compiler_pic, $1) in\n     \"\" | \" \"*) ;;\n     *) _LT_TAGVAR(lt_prog_compiler_pic, $1)=\" $_LT_TAGVAR(lt_prog_compiler_pic, $1)\" ;;\n     esac],\n    [_LT_TAGVAR(lt_prog_compiler_pic, $1)=\n     _LT_TAGVAR(lt_prog_compiler_can_build_shared, $1)=no])\nfi\n_LT_TAGDECL([pic_flag], [lt_prog_compiler_pic], [1],\n\t[Additional compiler flags for building library objects])\n\n_LT_TAGDECL([wl], [lt_prog_compiler_wl], [1],\n\t[How to pass a linker flag through the compiler])\n#\n# Check to make sure the static flag actually works.\n#\nwl=$_LT_TAGVAR(lt_prog_compiler_wl, $1) eval lt_tmp_static_flag=\\\"$_LT_TAGVAR(lt_prog_compiler_static, $1)\\\"\n_LT_LINKER_OPTION([if $compiler static flag $lt_tmp_static_flag works],\n  _LT_TAGVAR(lt_cv_prog_compiler_static_works, $1),\n  $lt_tmp_static_flag,\n  [],\n  [_LT_TAGVAR(lt_prog_compiler_static, $1)=])\n_LT_TAGDECL([link_static_flag], [lt_prog_compiler_static], [1],\n\t[Compiler flag to prevent dynamic linking])\n])# _LT_COMPILER_PIC\n\n\n# _LT_LINKER_SHLIBS([TAGNAME])\n# ----------------------------\n# See if the linker supports building shared libraries.\nm4_defun([_LT_LINKER_SHLIBS],\n[AC_REQUIRE([LT_PATH_LD])dnl\nAC_REQUIRE([LT_PATH_NM])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nm4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_DECL_SED])dnl\nm4_require([_LT_CMD_GLOBAL_SYMBOLS])dnl\nm4_require([_LT_TAG_COMPILER])dnl\nAC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\nm4_if([$1], [CXX], [\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  case $host_os in\n  aix[[4-9]]*)\n    # If we're using GNU nm, then we don't want the \"-C\" option.\n    # -C means demangle to AIX nm, but means don't demangle with GNU nm\n    # Also, AIX nm treats weak defined symbols like other global defined\n    # symbols, whereas GNU nm marks them as \"W\".\n    if $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    else\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n    fi\n    ;;\n  pw32*)\n    _LT_TAGVAR(export_symbols_cmds, $1)=\"$ltdll_cmds\"\n    ;;\n  cygwin* | mingw* | cegcc*)\n    case $cc_basename in\n    cl*)\n      _LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n      ;;\n    *)\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n      ;;\n    esac\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  *)\n    _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n    ;;\n  esac\n], [\n  runpath_var=\n  _LT_TAGVAR(allow_undefined_flag, $1)=\n  _LT_TAGVAR(always_export_symbols, $1)=no\n  _LT_TAGVAR(archive_cmds, $1)=\n  _LT_TAGVAR(archive_expsym_cmds, $1)=\n  _LT_TAGVAR(compiler_needs_object, $1)=no\n  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n  _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n  _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  _LT_TAGVAR(hardcode_automatic, $1)=no\n  _LT_TAGVAR(hardcode_direct, $1)=no\n  _LT_TAGVAR(hardcode_direct_absolute, $1)=no\n  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n  _LT_TAGVAR(hardcode_minus_L, $1)=no\n  _LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n  _LT_TAGVAR(inherit_rpath, $1)=no\n  _LT_TAGVAR(link_all_deplibs, $1)=unknown\n  _LT_TAGVAR(module_cmds, $1)=\n  _LT_TAGVAR(module_expsym_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_new_cmds, $1)=\n  _LT_TAGVAR(old_archive_from_expsyms_cmds, $1)=\n  _LT_TAGVAR(thread_safe_flag_spec, $1)=\n  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  _LT_TAGVAR(include_expsyms, $1)=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  _LT_TAGVAR(exclude_expsyms, $1)=['_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*']\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\ndnl Note also adjust exclude_expsyms for C++ above.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    _LT_TAGVAR(link_all_deplibs, $1)=no\n    ;;\n  esac\n\n  _LT_TAGVAR(ld_shlibs, $1)=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[[2-9]]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [[3-9]]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[[3-9]]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n      # as there is no search path for DLLs.\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=no\n      _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n      _LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1 DATA/;s/^.*[[ ]]__nm__\\([[^ ]]*\\)[[ ]][[^ ]]*/\\1 DATA/;/^I[[ ]]/d;/^[[AITW]][[ ]]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      _LT_TAGVAR(exclude_expsyms, $1)=['[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname']\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    haiku*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    interix[[3-9]]*)\n      _LT_TAGVAR(hardcode_direct, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      _LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)=\n\t  tmp_sharedflag='--shared' ;;\n\txl[[cC]]* | bgxl[[cC]]* | mpixl[[cC]]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  _LT_TAGVAR(compiler_needs_object, $1)=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\t_LT_TAGVAR(archive_cmds, $1)='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='--whole-archive$convenience --no-whole-archive'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        _LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [[01]].* | *\\ 2.[[0-9]].* | *\\ 2.1[[0-5]].*)\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n    esac\n\n    if test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no; then\n      runpath_var=\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=\n      _LT_TAGVAR(whole_archive_flag_spec, $1)=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      _LT_TAGVAR(archive_expsym_cmds, $1)='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\t_LT_TAGVAR(hardcode_direct, $1)=unsupported\n      fi\n      ;;\n\n    aix[[4-9]]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  _LT_TAGVAR(export_symbols_cmds, $1)='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && ([substr](\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      _LT_TAGVAR(archive_cmds, $1)=''\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[[012]]|aix4.[[012]].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n\t_LT_TAGVAR(link_all_deplibs, $1)=no\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      _LT_TAGVAR(always_export_symbols, $1)=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\t_LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        _LT_SYS_MODULE_PATH_AIX([$1])\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t _LT_SYS_MODULE_PATH_AIX([$1])\n\t _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t  fi\n\t  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            _LT_TAGVAR(archive_expsym_cmds, $1)=''\n        ;;\n      m68k)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[[45]]*)\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t_LT_TAGVAR(always_export_symbols, $1)=yes\n\t_LT_TAGVAR(file_list_spec, $1)='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t_LT_TAGVAR(exclude_expsyms, $1)='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\t_LT_TAGVAR(export_symbols_cmds, $1)='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[[BCDGRS]][[ ]]/s/.*[[ ]]\\([[^ ]]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[[AITW]][[ ]]/s/.*[[ ]]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\t_LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t_LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t_LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\t_LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t# FIXME: Should let the user specify the lib program.\n\t_LT_TAGVAR(old_archive_cmds, $1)='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\t_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n      _LT_DARWIN_LINKER_FEATURES($1)\n      ;;\n\n    dgux*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\t_LT_TAGVAR(hardcode_minus_L, $1)=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\tm4_if($1, [], [\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  _LT_LINKER_OPTION([if $CC understands -b],\n\t    _LT_TAGVAR(lt_cv_prog_compiler__b, $1), [-b],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'],\n\t    [_LT_TAGVAR(archive_cmds, $1)='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'])],\n\t  [_LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'])\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\tAC_CACHE_CHECK([whether the $host_os linker accepts -exported_symbol],\n\t  [lt_cv_irix_exported_symbol],\n\t  [save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   AC_LINK_IFELSE(\n\t     [AC_LANG_SOURCE(\n\t        [AC_LANG_CASE([C], [[int foo (void) { return 0; }]],\n\t\t\t      [C++], [[int foo (void) { return 0; }]],\n\t\t\t      [Fortran 77], [[\n      subroutine foo\n      end]],\n\t\t\t      [Fortran], [[\n      subroutine foo\n      end]])])],\n\t      [lt_cv_irix_exported_symbol=yes],\n\t      [lt_cv_irix_exported_symbol=no])\n           LDFLAGS=\"$save_LDFLAGS\"])\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(inherit_rpath, $1)=yes\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    newsos6)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\t_LT_TAGVAR(hardcode_direct, $1)=yes\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[[01]].* | openbsd2.[[0-7]] | openbsd2.[[0-7]].*)\n\t     _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t     ;;\n\t   *)\n\t     _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n      fi\n      ;;\n\n    os2*)\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n      _LT_TAGVAR(archive_cmds, $1)='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      _LT_TAGVAR(old_archive_from_new_cmds, $1)='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n      else\n\t_LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n      fi\n      _LT_TAGVAR(archive_cmds_need_lc, $1)='no'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n      ;;\n\n    solaris*)\n      _LT_TAGVAR(no_undefined_flag, $1)=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      case $host_os in\n      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_direct, $1)=yes\n      _LT_TAGVAR(hardcode_minus_L, $1)=yes\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(reload_cmds, $1)='$CC -r -o $output$reload_objs'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no\n        ;;\n\tmotorola)\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  _LT_TAGVAR(hardcode_direct, $1)=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    sysv4.3*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\t_LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\t_LT_TAGVAR(ld_shlibs, $1)=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n      _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n      _LT_TAGVAR(link_all_deplibs, $1)=yes\n      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      _LT_TAGVAR(archive_cmds, $1)='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      ;;\n\n    *)\n      _LT_TAGVAR(ld_shlibs, $1)=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n])\nAC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\ntest \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n_LT_TAGVAR(with_gnu_ld, $1)=$with_gnu_ld\n\n_LT_DECL([], [libext], [0], [Old archive suffix (normally \"a\")])dnl\n_LT_DECL([], [shrext_cmds], [1], [Shared library suffix (normally \".so\")])dnl\n_LT_DECL([], [extract_expsyms_cmds], [2],\n    [The commands to extract the exported symbol list from a shared archive])\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$_LT_TAGVAR(archive_cmds_need_lc, $1)\" in\nx|xyes)\n  # Assume -lc should be added\n  _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $_LT_TAGVAR(archive_cmds, $1) in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      AC_CACHE_CHECK([whether -lc should be explicitly linked in],\n\t[lt_cv_]_LT_TAGVAR(archive_cmds_need_lc, $1),\n\t[$RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif AC_TRY_EVAL(ac_compile) 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$_LT_TAGVAR(lt_prog_compiler_wl, $1)\n\t  pic_flag=$_LT_TAGVAR(lt_prog_compiler_pic, $1)\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$_LT_TAGVAR(allow_undefined_flag, $1)\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=\n\t  if AC_TRY_EVAL(_LT_TAGVAR(archive_cmds, $1) 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1)\n\t  then\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t  else\n\t    lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t  fi\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\t])\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=$lt_cv_[]_LT_TAGVAR(archive_cmds_need_lc, $1)\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n_LT_TAGDECL([build_libtool_need_lc], [archive_cmds_need_lc], [0],\n    [Whether or not to add -lc for building shared libraries])\n_LT_TAGDECL([allow_libtool_libs_with_static_runtimes],\n    [enable_shared_with_static_runtimes], [0],\n    [Whether or not to disallow shared libs when runtime libs are static])\n_LT_TAGDECL([], [export_dynamic_flag_spec], [1],\n    [Compiler flag to allow reflexive dlopens])\n_LT_TAGDECL([], [whole_archive_flag_spec], [1],\n    [Compiler flag to generate shared objects directly from archives])\n_LT_TAGDECL([], [compiler_needs_object], [1],\n    [Whether the compiler copes with passing no objects directly])\n_LT_TAGDECL([], [old_archive_from_new_cmds], [2],\n    [Create an old-style archive from a shared archive])\n_LT_TAGDECL([], [old_archive_from_expsyms_cmds], [2],\n    [Create a temporary old-style archive to link instead of a shared archive])\n_LT_TAGDECL([], [archive_cmds], [2], [Commands used to build a shared archive])\n_LT_TAGDECL([], [archive_expsym_cmds], [2])\n_LT_TAGDECL([], [module_cmds], [2],\n    [Commands used to build a loadable module if different from building\n    a shared archive.])\n_LT_TAGDECL([], [module_expsym_cmds], [2])\n_LT_TAGDECL([], [with_gnu_ld], [1],\n    [Whether we are building with GNU ld or not])\n_LT_TAGDECL([], [allow_undefined_flag], [1],\n    [Flag that allows shared libraries with undefined symbols to be built])\n_LT_TAGDECL([], [no_undefined_flag], [1],\n    [Flag that enforces no undefined symbols])\n_LT_TAGDECL([], [hardcode_libdir_flag_spec], [1],\n    [Flag to hardcode $libdir into a binary during linking.\n    This must work even if $libdir does not exist])\n_LT_TAGDECL([], [hardcode_libdir_separator], [1],\n    [Whether we need a single \"-rpath\" flag with a separated argument])\n_LT_TAGDECL([], [hardcode_direct], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary])\n_LT_TAGDECL([], [hardcode_direct_absolute], [0],\n    [Set to \"yes\" if using DIR/libNAME${shared_ext} during linking hardcodes\n    DIR into the resulting binary and the resulting library dependency is\n    \"absolute\", i.e impossible to change by setting ${shlibpath_var} if the\n    library is relocated])\n_LT_TAGDECL([], [hardcode_minus_L], [0],\n    [Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_shlibpath_var], [0],\n    [Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n    into the resulting binary])\n_LT_TAGDECL([], [hardcode_automatic], [0],\n    [Set to \"yes\" if building a shared library automatically hardcodes DIR\n    into the library and all subsequent libraries and executables linked\n    against it])\n_LT_TAGDECL([], [inherit_rpath], [0],\n    [Set to yes if linker adds runtime paths of dependent libraries\n    to runtime path list])\n_LT_TAGDECL([], [link_all_deplibs], [0],\n    [Whether libtool must link a program against all its dependency libraries])\n_LT_TAGDECL([], [always_export_symbols], [0],\n    [Set to \"yes\" if exported symbols are required])\n_LT_TAGDECL([], [export_symbols_cmds], [2],\n    [The commands to list exported symbols])\n_LT_TAGDECL([], [exclude_expsyms], [1],\n    [Symbols that should not be listed in the preloaded symbols])\n_LT_TAGDECL([], [include_expsyms], [1],\n    [Symbols that must always be exported])\n_LT_TAGDECL([], [prelink_cmds], [2],\n    [Commands necessary for linking programs (against libraries) with templates])\n_LT_TAGDECL([], [postlink_cmds], [2],\n    [Commands necessary for finishing linking programs])\n_LT_TAGDECL([], [file_list_spec], [1],\n    [Specify filename containing input files])\ndnl FIXME: Not yet implemented\ndnl _LT_TAGDECL([], [thread_safe_flag_spec], [1],\ndnl    [Compiler flag to generate thread safe objects])\n])# _LT_LINKER_SHLIBS\n\n\n# _LT_LANG_C_CONFIG([TAG])\n# ------------------------\n# Ensure that the configuration variables for a C compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_C_CONFIG],\n[m4_require([_LT_DECL_EGREP])dnl\nlt_save_CC=\"$CC\"\nAC_LANG_PUSH(C)\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n_LT_TAG_COMPILER\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_SYS_DYNAMIC_LINKER($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n  LT_SYS_DLOPEN_SELF\n  _LT_CMD_STRIPLIB\n\n  # Report which library types will actually be built\n  AC_MSG_CHECKING([if libtool supports shared libraries])\n  AC_MSG_RESULT([$can_build_shared])\n\n  AC_MSG_CHECKING([whether to build shared libraries])\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[[4-9]]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  AC_MSG_RESULT([$enable_shared])\n\n  AC_MSG_CHECKING([whether to build static libraries])\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  AC_MSG_RESULT([$enable_static])\n\n  _LT_CONFIG($1)\nfi\nAC_LANG_POP\nCC=\"$lt_save_CC\"\n])# _LT_LANG_C_CONFIG\n\n\n# _LT_LANG_CXX_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a C++ compiler are suitably\n# defined.  These variables are subsequently used by _LT_CONFIG to write\n# the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_CXX_CONFIG],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nm4_require([_LT_DECL_EGREP])dnl\nm4_require([_LT_PATH_MANIFEST_TOOL])dnl\nif test -n \"$CXX\" && ( test \"X$CXX\" != \"Xno\" &&\n    ( (test \"X$CXX\" = \"Xg++\" && `g++ -v >/dev/null 2>&1` ) ||\n    (test \"X$CXX\" != \"Xg++\"))) ; then\n  AC_PROG_CXXCPP\nelse\n  _lt_caught_CXX_error=yes\nfi\n\nAC_LANG_PUSH(C++)\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(compiler_needs_object, $1)=no\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_shlibpath_var, $1)=unsupported\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for C++ test sources.\nac_ext=cpp\n\n# Object file extension for compiled C++ test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the CXX compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_caught_CXX_error\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"int some_variable = 0;\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code='int main(int, char *[[]]) { return(0); }'\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=$CC\n  lt_save_CFLAGS=$CFLAGS\n  lt_save_LD=$LD\n  lt_save_GCC=$GCC\n  GCC=$GXX\n  lt_save_with_gnu_ld=$with_gnu_ld\n  lt_save_path_LD=$lt_cv_path_LD\n  if test -n \"${lt_cv_prog_gnu_ldcxx+set}\"; then\n    lt_cv_prog_gnu_ld=$lt_cv_prog_gnu_ldcxx\n  else\n    $as_unset lt_cv_prog_gnu_ld\n  fi\n  if test -n \"${lt_cv_path_LDCXX+set}\"; then\n    lt_cv_path_LD=$lt_cv_path_LDCXX\n  else\n    $as_unset lt_cv_path_LD\n  fi\n  test -z \"${LDCXX+set}\" || LD=$LDCXX\n  CC=${CXX-\"c++\"}\n  CFLAGS=$CXXFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    # We don't want -fno-exception when compiling C++ code, so set the\n    # no_builtin_flag separately\n    if test \"$GXX\" = yes; then\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=' -fno-builtin'\n    else\n      _LT_TAGVAR(lt_prog_compiler_no_builtin_flag, $1)=\n    fi\n\n    if test \"$GXX\" = yes; then\n      # Set up default GNU C++ configuration\n\n      LT_PATH_LD\n\n      # Check if GNU C++ uses GNU ld as the underlying linker, since the\n      # archiving commands below assume that GNU ld is being used.\n      if test \"$with_gnu_ld\" = yes; then\n        _LT_TAGVAR(archive_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(archive_expsym_cmds, $1)='$CC $pic_flag -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n        # If archive_cmds runs LD, not CC, wlarc should be empty\n        # XXX I think wlarc can be eliminated in ltcf-cxx, but I need to\n        #     investigate it a little bit more. (MM)\n        wlarc='${wl}'\n\n        # ancient GNU ld didn't support --whole-archive et. al.\n        if eval \"`$CC -print-prog-name=ld` --help 2>&1\" |\n\t  $GREP 'no-whole-archive' > /dev/null; then\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n        else\n          _LT_TAGVAR(whole_archive_flag_spec, $1)=\n        fi\n      else\n        with_gnu_ld=no\n        wlarc=\n\n        # A generic and very simple default shared library creation\n        # command for GNU C++ for the case where it uses the native\n        # linker, instead of GNU ld.  If possible, this setting should\n        # overridden to take advantage of the native linker features on\n        # the platform it is being used on.\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n      fi\n\n      # Commands to make compiler produce verbose output that lists\n      # what \"hidden\" libraries, object files and flags are used when\n      # linking a shared library.\n      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n    else\n      GXX=no\n      with_gnu_ld=no\n      wlarc=\n    fi\n\n    # PORTME: fill in a description of your system's C++ link characteristics\n    AC_MSG_CHECKING([whether the $compiler linker ($LD) supports shared libraries])\n    _LT_TAGVAR(ld_shlibs, $1)=yes\n    case $host_os in\n      aix3*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n      aix[[4-9]]*)\n        if test \"$host_cpu\" = ia64; then\n          # On IA64, the linker does run time linking by default, so we don't\n          # have to do anything special.\n          aix_use_runtimelinking=no\n          exp_sym_flag='-Bexport'\n          no_entry_flag=\"\"\n        else\n          aix_use_runtimelinking=no\n\n          # Test if we are trying to use run time linking or normal\n          # AIX style linking. If -brtl is somewhere in LDFLAGS, we\n          # need to do runtime linking.\n          case $host_os in aix4.[[23]]|aix4.[[23]].*|aix[[5-9]]*)\n\t    for ld_flag in $LDFLAGS; do\n\t      case $ld_flag in\n\t      *-brtl*)\n\t        aix_use_runtimelinking=yes\n\t        break\n\t        ;;\n\t      esac\n\t    done\n\t    ;;\n          esac\n\n          exp_sym_flag='-bexport'\n          no_entry_flag='-bnoentry'\n        fi\n\n        # When large executables or shared objects are built, AIX ld can\n        # have problems creating the table of contents.  If linking a library\n        # or program results in \"error TOC overflow\" add -mminimal-toc to\n        # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n        # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n        _LT_TAGVAR(archive_cmds, $1)=''\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        _LT_TAGVAR(file_list_spec, $1)='${wl}-f,'\n\n        if test \"$GXX\" = yes; then\n          case $host_os in aix4.[[012]]|aix4.[[012]].*)\n          # We only want to do this on AIX 4.2 and lower, the check\n          # below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t     strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t    # We have reworked collect2\n\t    :\n\t  else\n\t    # We have old collect2\n\t    _LT_TAGVAR(hardcode_direct, $1)=unsupported\n\t    # It fails to find uninstalled libraries when the uninstalled\n\t    # path is not listed in the libpath.  Setting hardcode_minus_L\n\t    # to unsupported forces relinking\n\t    _LT_TAGVAR(hardcode_minus_L, $1)=yes\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=\n\t  fi\n          esac\n          shared_flag='-shared'\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag=\"$shared_flag \"'${wl}-G'\n\t  fi\n        else\n          # not using gcc\n          if test \"$host_cpu\" = ia64; then\n\t  # VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t  # chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n          else\n\t    if test \"$aix_use_runtimelinking\" = yes; then\n\t      shared_flag='${wl}-G'\n\t    else\n\t      shared_flag='${wl}-bM:SRE'\n\t    fi\n          fi\n        fi\n\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-bexpall'\n        # It seems that -bexpall does not export symbols beginning with\n        # underscore (_), so it is better to generate a list of symbols to\n\t# export.\n        _LT_TAGVAR(always_export_symbols, $1)=yes\n        if test \"$aix_use_runtimelinking\" = yes; then\n          # Warning - without using the other runtime loading flags (-brtl),\n          # -berok will link without error, but may produce a broken library.\n          _LT_TAGVAR(allow_undefined_flag, $1)='-berok'\n          # Determine the default libpath from the value encoded in an empty\n          # executable.\n          _LT_SYS_MODULE_PATH_AIX([$1])\n          _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\n          _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n        else\n          if test \"$host_cpu\" = ia64; then\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $libdir:/usr/lib:/lib'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=\"-z nodefs\"\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n          else\n\t    # Determine the default libpath from the value encoded in an\n\t    # empty executable.\n\t    _LT_SYS_MODULE_PATH_AIX([$1])\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t    # Warning - without using the other run time loading flags,\n\t    # -berok will link without error, but may produce a broken library.\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-bernotok'\n\t    _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-berok'\n\t    if test \"$with_gnu_ld\" = yes; then\n\t      # We only use this code for GNU lds that support --whole-archive.\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    else\n\t      # Exported symbols can be pulled into shared objects from archives\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='$convenience'\n\t    fi\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=yes\n\t    # This is similar to how AIX traditionally builds its shared\n\t    # libraries.\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n          fi\n        fi\n        ;;\n\n      beos*)\n\tif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  # Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t  # support --undefined.  This deserves some investigation.  FIXME\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      chorus*)\n        case $cc_basename in\n          *)\n\t  # FIXME: insert proper C++ library support\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\t  ;;\n        esac\n        ;;\n\n      cygwin* | mingw* | pw32* | cegcc*)\n\tcase $GXX,$cc_basename in\n\t,cl* | no,cl*)\n\t  # Native MSVC\n\t  # hardcode_libdir_flag_spec is actually meaningless, as there is\n\t  # no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)=' '\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=yes\n\t  _LT_TAGVAR(file_list_spec, $1)='@'\n\t  # Tell ltmain to make .lib files, not .a files.\n\t  libext=lib\n\t  # Tell ltmain to make .dll files, not .so files.\n\t  shrext_cmds=\".dll\"\n\t  # FIXME: Setting linknames here is a bad hack.\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      $SED -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t    else\n\t      $SED -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t    fi~\n\t    $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t    linknames='\n\t  # The linker will not automatically build a static lib if we build a DLL.\n\t  # _LT_TAGVAR(old_archive_from_new_cmds, $1)='true'\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\t  # Don't use ranlib\n\t  _LT_TAGVAR(old_postinstall_cmds, $1)='chmod 644 $oldlib'\n\t  _LT_TAGVAR(postlink_cmds, $1)='lt_outputfile=\"@OUTPUT@\"~\n\t    lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t    case $lt_outputfile in\n\t      *.exe|*.EXE) ;;\n\t      *)\n\t\tlt_outputfile=\"$lt_outputfile.exe\"\n\t\tlt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t\t;;\n\t    esac~\n\t    func_to_tool_file \"$lt_outputfile\"~\n\t    if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t      $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t      $RM \"$lt_outputfile.manifest\";\n\t    fi'\n\t  ;;\n\t*)\n\t  # g++\n\t  # _LT_TAGVAR(hardcode_libdir_flag_spec, $1) is actually meaningless,\n\t  # as there is no search path for DLLs.\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-L$libdir'\n\t  _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-all-symbols'\n\t  _LT_TAGVAR(allow_undefined_flag, $1)=unsupported\n\t  _LT_TAGVAR(always_export_symbols, $1)=no\n\t  _LT_TAGVAR(enable_shared_with_static_runtimes, $1)=yes\n\n\t  if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t    # If the export-symbols file already is a .def file (1st line\n\t    # is EXPORTS), use it as is; otherwise, prepend...\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t      cp $export_symbols $output_objdir/$soname.def;\n\t    else\n\t      echo EXPORTS > $output_objdir/$soname.def;\n\t      cat $export_symbols >> $output_objdir/$soname.def;\n\t    fi~\n\t    $CC -shared -nostdlib $output_objdir/$soname.def $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t  else\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t  fi\n\t  ;;\n\tesac\n\t;;\n      darwin* | rhapsody*)\n        _LT_DARWIN_LINKER_FEATURES($1)\n\t;;\n\n      dgux*)\n        case $cc_basename in\n          ec++*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          ghcx*)\n\t    # Green Hills C++ Compiler\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      freebsd2.*)\n        # C++ shared libraries reported to be fairly broken before\n\t# switch to ELF\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      freebsd-elf*)\n        _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n        ;;\n\n      freebsd* | dragonfly*)\n        # FreeBSD 3 and later use GNU C++ and GNU ld with standard ELF\n        # conventions\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n        ;;\n\n      haiku*)\n        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n        _LT_TAGVAR(link_all_deplibs, $1)=yes\n        ;;\n\n      hpux9*)\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n        _LT_TAGVAR(hardcode_direct, $1)=yes\n        _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t             # but as the default\n\t\t\t\t             # location of the library.\n\n        case $cc_basename in\n          CC*)\n            # FIXME: insert proper C++ library support\n            _LT_TAGVAR(ld_shlibs, $1)=no\n            ;;\n          aCC*)\n            _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -b ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            # Commands to make compiler produce verbose output that lists\n            # what \"hidden\" libraries, object files and flags are used when\n            # linking a shared library.\n            #\n            # There doesn't appear to be a way to prevent this compiler from\n            # explicitly linking system object files so we need to strip them\n            # from the output so that they don't get included in the library\n            # dependencies.\n            output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $EGREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n            ;;\n          *)\n            if test \"$GXX\" = yes; then\n              _LT_TAGVAR(archive_cmds, $1)='$RM $output_objdir/$soname~$CC -shared -nostdlib $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n            else\n              # FIXME: insert proper C++ library support\n              _LT_TAGVAR(ld_shlibs, $1)=no\n            fi\n            ;;\n        esac\n        ;;\n\n      hpux10*|hpux11*)\n        if test $with_gnu_ld = no; then\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}+b ${wl}$libdir'\n\t  _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n          case $host_cpu in\n            hppa*64*|ia64*)\n              ;;\n            *)\n\t      _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n              ;;\n          esac\n        fi\n        case $host_cpu in\n          hppa*64*|ia64*)\n            _LT_TAGVAR(hardcode_direct, $1)=no\n            _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n            ;;\n          *)\n            _LT_TAGVAR(hardcode_direct, $1)=yes\n            _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n            _LT_TAGVAR(hardcode_minus_L, $1)=yes # Not in the search PATH,\n\t\t\t\t\t         # but as the default\n\t\t\t\t\t         # location of the library.\n            ;;\n        esac\n\n        case $cc_basename in\n          CC*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          aCC*)\n\t    case $host_cpu in\n\t      hppa*64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      ia64*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t      *)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t        ;;\n\t    esac\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`($CC -b $CFLAGS -v conftest.$objext 2>&1) | $GREP \"\\-L\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test $with_gnu_ld = no; then\n\t        case $host_cpu in\n\t          hppa*64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib -fPIC ${wl}+h ${wl}$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          ia64*)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t          *)\n\t            _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t            ;;\n\t        esac\n\t      fi\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      interix[[3-9]]*)\n\t_LT_TAGVAR(hardcode_direct, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t# Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n\t# Instead, shared libraries are loaded at an image base (0x10000000 by\n\t# default) and relocated if they conflict, which is a slow very memory\n\t# consuming and fragmenting process.  To avoid this, we pick a random,\n\t# 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n\t# time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n\t_LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t_LT_TAGVAR(archive_expsym_cmds, $1)='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n\t;;\n      irix5* | irix6*)\n        case $cc_basename in\n          CC*)\n\t    # SGI C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared -all -multigot $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -ar\", where \"CC\" is the IRIX C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -ar -WR,-u -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    if test \"$GXX\" = yes; then\n\t      if test \"$with_gnu_ld\" = no; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t      else\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` -o $lib'\n\t      fi\n\t    fi\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\t    ;;\n        esac\n        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n        _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n        _LT_TAGVAR(inherit_rpath, $1)=yes\n        ;;\n\n      linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo $lib | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib ${wl}-retain-symbols-file,$export_symbols; mv \\$templib $lib'\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1 | $GREP \"ld\"`; rm -f libconftest$shared_ext; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -Bstatic\", where \"CC\" is the KAI C++ compiler.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs'\n\t    ;;\n\t  icpc* | ecpc* )\n\t    # Intel C++\n\t    with_gnu_ld=yes\n\t    # version 8.0 and above of icpc choke on multiply defined symbols\n\t    # if we add $predep_objects and $postdep_objects, however 7.1 and\n\t    # earlier do not add the objects themselves.\n\t    case `$CC -V 2>&1` in\n\t      *\"Version 7.\"*)\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t      *)  # Version 8.0 or newer\n\t        tmp_idyn=\n\t        case $host_cpu in\n\t\t  ia64*) tmp_idyn=' -i_dynamic';;\n\t\tesac\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t\t_LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared'\"$tmp_idyn\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t\t;;\n\t    esac\n\t    _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t    ;;\n          pgCC* | pgcpp*)\n            # Portland Group C++ compiler\n\t    case `$CC -V` in\n\t    *pgCC\\ [[1-5]].* | *pgcpp\\ [[1-5]].*)\n\t      _LT_TAGVAR(prelink_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $objs $libobjs $compile_deplibs~\n\t\tcompile_command=\"$compile_command `find $tpldir -name \\*.o | sort | $NL2SP`\"'\n\t      _LT_TAGVAR(old_archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $oldobjs$old_deplibs~\n\t\t$AR $AR_FLAGS $oldlib$oldobjs$old_deplibs `find $tpldir -name \\*.o | sort | $NL2SP`~\n\t\t$RANLIB $oldlib'\n\t      _LT_TAGVAR(archive_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='tpldir=Template.dir~\n\t\trm -rf $tpldir~\n\t\t$CC --prelink_objects --instantiation_dir $tpldir $predep_objects $libobjs $deplibs $convenience $postdep_objects~\n\t\t$CC -shared $pic_flag $predep_objects $libobjs $deplibs `find $tpldir -name \\*.o | sort | $NL2SP` $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    *) # Version 6 and above use weak symbols\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname -o $lib'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname ${wl}-retain-symbols-file ${wl}$export_symbols -o $lib'\n\t      ;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}--rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n            ;;\n\t  cxx*)\n\t    # Compaq C++\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $wl$soname  -o $lib ${wl}-retain-symbols-file $wl$export_symbols'\n\n\t    runpath_var=LD_RUN_PATH\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld .*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"X$list\" | $Xsed'\n\t    ;;\n\t  xl* | mpixl* | bgxl*)\n\t    # IBM XL 8.0 on PPC, with GNU ld\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}--export-dynamic'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    if test \"x$supports_anon_versioning\" = xyes; then\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t\tcat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t\techo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t\t$CC -qmkshrobj $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n\t    fi\n\t    ;;\n\t  *)\n\t    case `$CC -V 2>&1 | sed 5q` in\n\t    *Sun\\ C*)\n\t      # Sun C++ 5.9\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t      _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t      _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G${allow_undefined_flag} -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file ${wl}$export_symbols'\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t      _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t      _LT_TAGVAR(compiler_needs_object, $1)=yes\n\n\t      # Not sure whether something based on\n\t      # $CC $CFLAGS -v conftest.$objext -o libconftest$shared_ext 2>&1\n\t      # would be better.\n\t      output_verbose_link_cmd='func_echo_all'\n\n\t      # Archives containing C++ object files must be created using\n\t      # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t      # necessary to make sure instantiated templates are included\n\t      # in the archive.\n\t      _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t      ;;\n\t    esac\n\t    ;;\n\tesac\n\t;;\n\n      lynxos*)\n        # FIXME: insert proper C++ library support\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      m88k*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      mvs*)\n        case $cc_basename in\n          cxx*)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\t  *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n\tesac\n\t;;\n\n      netbsd*)\n        if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\t  _LT_TAGVAR(archive_cmds, $1)='$LD -Bshareable  -o $lib $predep_objects $libobjs $deplibs $postdep_objects $linker_flags'\n\t  wlarc=\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\tfi\n\t# Workaround some broken pre-1.5 toolchains\n\toutput_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP conftest.$objext | $SED -e \"s:-lgcc -lc -lgcc::\"'\n\t;;\n\n      *nto* | *qnx*)\n        _LT_TAGVAR(ld_shlibs, $1)=yes\n\t;;\n\n      openbsd2*)\n        # C++ shared libraries are fairly broken\n\t_LT_TAGVAR(ld_shlibs, $1)=no\n\t;;\n\n      openbsd*)\n\tif test -f /usr/libexec/ld.so; then\n\t  _LT_TAGVAR(hardcode_direct, $1)=yes\n\t  _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t  _LT_TAGVAR(hardcode_direct_absolute, $1)=yes\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -o $lib'\n\t  _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t  if test -z \"`echo __ELF__ | $CC -E - | grep __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared $pic_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-retain-symbols-file,$export_symbols -o $lib'\n\t    _LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-E'\n\t    _LT_TAGVAR(whole_archive_flag_spec, $1)=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n\t  fi\n\t  output_verbose_link_cmd=func_echo_all\n\telse\n\t  _LT_TAGVAR(ld_shlibs, $1)=no\n\tfi\n\t;;\n\n      osf3* | osf4* | osf5*)\n        case $cc_basename in\n          KCC*)\n\t    # Kuck and Associates, Inc. (KAI) C++ Compiler\n\n\t    # KCC will only create a shared library if the output file\n\t    # ends with \".so\" (or \".sl\" for HP-UX), so rename the library\n\t    # to its proper name (with version) after linking.\n\t    _LT_TAGVAR(archive_cmds, $1)='tempext=`echo $shared_ext | $SED -e '\\''s/\\([[^()0-9A-Za-z{}]]\\)/\\\\\\\\\\1/g'\\''`; templib=`echo \"$lib\" | $SED -e \"s/\\${tempext}\\..*/.so/\"`; $CC $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags --soname $soname -o \\$templib; mv \\$templib $lib'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath,$libdir'\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Archives containing C++ object files must be created using\n\t    # the KAI C++ compiler.\n\t    case $host in\n\t      osf3*) _LT_TAGVAR(old_archive_cmds, $1)='$CC -Bstatic -o $oldlib $oldobjs' ;;\n\t      *) _LT_TAGVAR(old_archive_cmds, $1)='$CC -o $oldlib $oldobjs' ;;\n\t    esac\n\t    ;;\n          RCC*)\n\t    # Rational C++ 2.4.1\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          cxx*)\n\t    case $host in\n\t      osf3*)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname $soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t\t;;\n\t      *)\n\t        _LT_TAGVAR(allow_undefined_flag, $1)=' -expect_unresolved \\*'\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done~\n\t          echo \"-hidden\">> $lib.exp~\n\t          $CC -shared$allow_undefined_flag $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags -msym -soname $soname ${wl}-input ${wl}$lib.exp  `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~\n\t          $RM $lib.exp'\n\t        _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-rpath $libdir'\n\t\t;;\n\t    esac\n\n\t    _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t    # Commands to make compiler produce verbose output that lists\n\t    # what \"hidden\" libraries, object files and flags are used when\n\t    # linking a shared library.\n\t    #\n\t    # There doesn't appear to be a way to prevent this compiler from\n\t    # explicitly linking system object files so we need to strip them\n\t    # from the output so that they don't get included in the library\n\t    # dependencies.\n\t    output_verbose_link_cmd='templist=`$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP \"ld\" | $GREP -v \"ld:\"`; templist=`func_echo_all \"$templist\" | $SED \"s/\\(^.*ld.*\\)\\( .*ld.*$\\)/\\1/\"`; list=\"\"; for z in $templist; do case $z in conftest.$objext) list=\"$list $z\";; *.$objext);; *) list=\"$list $z\";;esac; done; func_echo_all \"$list\"'\n\t    ;;\n\t  *)\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(allow_undefined_flag, $1)=' ${wl}-expect_unresolved ${wl}\\*'\n\t      case $host in\n\t        osf3*)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t        *)\n\t          _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib ${allow_undefined_flag} $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t\t  ;;\n\t      esac\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-rpath ${wl}$libdir'\n\t      _LT_TAGVAR(hardcode_libdir_separator, $1)=:\n\n\t      # Commands to make compiler produce verbose output that lists\n\t      # what \"hidden\" libraries, object files and flags are used when\n\t      # linking a shared library.\n\t      output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\n\t    else\n\t      # FIXME: insert proper C++ library support\n\t      _LT_TAGVAR(ld_shlibs, $1)=no\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n      psos*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      sunos4*)\n        case $cc_basename in\n          CC*)\n\t    # Sun C++ 4.x\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          lcc*)\n\t    # Lucid\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      solaris*)\n        case $cc_basename in\n          CC* | sunCC*)\n\t    # Sun C++ 4.2, 5.x and Centerline C++\n            _LT_TAGVAR(archive_cmds_need_lc,$1)=yes\n\t    _LT_TAGVAR(no_undefined_flag, $1)=' -zdefs'\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G${allow_undefined_flag}  -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t      $CC -G${allow_undefined_flag} ${wl}-M ${wl}$lib.exp -h$soname -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t    _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='-R$libdir'\n\t    _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t    case $host_os in\n\t      solaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t      *)\n\t\t# The compiler driver will combine and reorder linker options,\n\t\t# but understands `-z linker_flag'.\n\t        # Supported since Solaris 2.6 (maybe 2.5.1?)\n\t\t_LT_TAGVAR(whole_archive_flag_spec, $1)='-z allextract$convenience -z defaultextract'\n\t        ;;\n\t    esac\n\t    _LT_TAGVAR(link_all_deplibs, $1)=yes\n\n\t    output_verbose_link_cmd='func_echo_all'\n\n\t    # Archives containing C++ object files must be created using\n\t    # \"CC -xar\", where \"CC\" is the Sun C++ compiler.  This is\n\t    # necessary to make sure instantiated templates are included\n\t    # in the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -xar -o $oldlib $oldobjs'\n\t    ;;\n          gcx*)\n\t    # Green Hills C++ Compiler\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\n\t    # The C++ compiler must be used to create the archive.\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC $LDFLAGS -archive -o $oldlib $oldobjs'\n\t    ;;\n          *)\n\t    # GNU C++ compiler with Solaris linker\n\t    if test \"$GXX\" = yes && test \"$with_gnu_ld\" = no; then\n\t      _LT_TAGVAR(no_undefined_flag, $1)=' ${wl}-z ${wl}defs'\n\t      if $CC --version | $GREP -v '^2\\.7' > /dev/null; then\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -shared $pic_flag -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -shared $pic_flag -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -shared $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      else\n\t        # g++ 2.7 appears to require `-G' NOT `-shared' on this\n\t        # platform.\n\t        _LT_TAGVAR(archive_cmds, $1)='$CC -G -nostdlib $LDFLAGS $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags ${wl}-h $wl$soname -o $lib'\n\t        _LT_TAGVAR(archive_expsym_cmds, $1)='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t\t  $CC -G -nostdlib ${wl}-M $wl$lib.exp -o $lib $predep_objects $libobjs $deplibs $postdep_objects $compiler_flags~$RM $lib.exp'\n\n\t        # Commands to make compiler produce verbose output that lists\n\t        # what \"hidden\" libraries, object files and flags are used when\n\t        # linking a shared library.\n\t        output_verbose_link_cmd='$CC -G $CFLAGS -v conftest.$objext 2>&1 | $GREP -v \"^Configured with:\" | $GREP \"\\-L\"'\n\t      fi\n\n\t      _LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R $wl$libdir'\n\t      case $host_os in\n\t\tsolaris2.[[0-5]] | solaris2.[[0-5]].*) ;;\n\t\t*)\n\t\t  _LT_TAGVAR(whole_archive_flag_spec, $1)='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\t\t  ;;\n\t      esac\n\t    fi\n\t    ;;\n        esac\n        ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[[01]].[[10]]* | unixware7* | sco3.2v5.0.[[024]]*)\n      _LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n      _LT_TAGVAR(archive_cmds_need_lc, $1)=no\n      _LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n      runpath_var='LD_RUN_PATH'\n\n      case $cc_basename in\n        CC*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n      esac\n      ;;\n\n      sysv5* | sco3.2v5* | sco5v6*)\n\t# Note: We can NOT use -z defs as we might desire, because we do not\n\t# link with -lc, and that would cause any symbols used from libc to\n\t# always be unresolved, which means just about no library would\n\t# ever link correctly.  If we're not using GNU ld we use -z text\n\t# though, which does catch some bad symbols but isn't as heavy-handed\n\t# as -z defs.\n\t_LT_TAGVAR(no_undefined_flag, $1)='${wl}-z,text'\n\t_LT_TAGVAR(allow_undefined_flag, $1)='${wl}-z,nodefs'\n\t_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\t_LT_TAGVAR(hardcode_shlibpath_var, $1)=no\n\t_LT_TAGVAR(hardcode_libdir_flag_spec, $1)='${wl}-R,$libdir'\n\t_LT_TAGVAR(hardcode_libdir_separator, $1)=':'\n\t_LT_TAGVAR(link_all_deplibs, $1)=yes\n\t_LT_TAGVAR(export_dynamic_flag_spec, $1)='${wl}-Bexport'\n\trunpath_var='LD_RUN_PATH'\n\n\tcase $cc_basename in\n          CC*)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(old_archive_cmds, $1)='$CC -Tprelink_objects $oldobjs~\n\t      '\"$_LT_TAGVAR(old_archive_cmds, $1)\"\n\t    _LT_TAGVAR(reload_cmds, $1)='$CC -Tprelink_objects $reload_objs~\n\t      '\"$_LT_TAGVAR(reload_cmds, $1)\"\n\t    ;;\n\t  *)\n\t    _LT_TAGVAR(archive_cmds, $1)='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    _LT_TAGVAR(archive_expsym_cmds, $1)='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t    ;;\n\tesac\n      ;;\n\n      tandem*)\n        case $cc_basename in\n          NCC*)\n\t    # NonStop-UX NCC 3.20\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n          *)\n\t    # FIXME: insert proper C++ library support\n\t    _LT_TAGVAR(ld_shlibs, $1)=no\n\t    ;;\n        esac\n        ;;\n\n      vxworks*)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n\n      *)\n        # FIXME: insert proper C++ library support\n        _LT_TAGVAR(ld_shlibs, $1)=no\n        ;;\n    esac\n\n    AC_MSG_RESULT([$_LT_TAGVAR(ld_shlibs, $1)])\n    test \"$_LT_TAGVAR(ld_shlibs, $1)\" = no && can_build_shared=no\n\n    _LT_TAGVAR(GCC, $1)=\"$GXX\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\n  LDCXX=$LD\n  LD=$lt_save_LD\n  GCC=$lt_save_GCC\n  with_gnu_ld=$lt_save_with_gnu_ld\n  lt_cv_path_LDCXX=$lt_cv_path_LD\n  lt_cv_path_LD=$lt_save_path_LD\n  lt_cv_prog_gnu_ldcxx=$lt_cv_prog_gnu_ld\n  lt_cv_prog_gnu_ld=$lt_save_with_gnu_ld\nfi # test \"$_lt_caught_CXX_error\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_CXX_CONFIG\n\n\n# _LT_FUNC_STRIPNAME_CNF\n# ----------------------\n# func_stripname_cnf prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n#\n# This function is identical to the (non-XSI) version of func_stripname,\n# except this one can be used by m4 code that may be executed by configure,\n# rather than the libtool script.\nm4_defun([_LT_FUNC_STRIPNAME_CNF],[dnl\nAC_REQUIRE([_LT_DECL_SED])\nAC_REQUIRE([_LT_PROG_ECHO_BACKSLASH])\nfunc_stripname_cnf ()\n{\n  case ${2} in\n  .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n  *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n  esac\n} # func_stripname_cnf\n])# _LT_FUNC_STRIPNAME_CNF\n\n# _LT_SYS_HIDDEN_LIBDEPS([TAGNAME])\n# ---------------------------------\n# Figure out \"hidden\" library dependencies from verbose\n# compiler output when linking a shared library.\n# Parse the compiler output and extract the necessary\n# objects, libraries and library flags.\nm4_defun([_LT_SYS_HIDDEN_LIBDEPS],\n[m4_require([_LT_FILEUTILS_DEFAULTS])dnl\nAC_REQUIRE([_LT_FUNC_STRIPNAME_CNF])dnl\n# Dependencies to place before and after the object being linked:\n_LT_TAGVAR(predep_objects, $1)=\n_LT_TAGVAR(postdep_objects, $1)=\n_LT_TAGVAR(predeps, $1)=\n_LT_TAGVAR(postdeps, $1)=\n_LT_TAGVAR(compiler_lib_search_path, $1)=\n\ndnl we can't use the lt_simple_compile_test_code here,\ndnl because it contains code intended for an executable,\ndnl not a library.  It's possible we should let each\ndnl tag define a new lt_????_link_test_code variable,\ndnl but it's only used here...\nm4_if([$1], [], [cat > conftest.$ac_ext <<_LT_EOF\nint a;\nvoid foo (void) { a = 0; }\n_LT_EOF\n], [$1], [CXX], [cat > conftest.$ac_ext <<_LT_EOF\nclass Foo\n{\npublic:\n  Foo (void) { a = 0; }\nprivate:\n  int a;\n};\n_LT_EOF\n], [$1], [F77], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer*4 a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [FC], [cat > conftest.$ac_ext <<_LT_EOF\n      subroutine foo\n      implicit none\n      integer a\n      a=0\n      return\n      end\n_LT_EOF\n], [$1], [GCJ], [cat > conftest.$ac_ext <<_LT_EOF\npublic class foo {\n  private int a;\n  public void bar (void) {\n    a = 0;\n  }\n};\n_LT_EOF\n], [$1], [GO], [cat > conftest.$ac_ext <<_LT_EOF\npackage foo\nfunc foo() {\n}\n_LT_EOF\n])\n\n_lt_libdeps_save_CFLAGS=$CFLAGS\ncase \"$CC $CFLAGS \" in #(\n*\\ -flto*\\ *) CFLAGS=\"$CFLAGS -fno-lto\" ;;\n*\\ -fwhopr*\\ *) CFLAGS=\"$CFLAGS -fno-whopr\" ;;\n*\\ -fuse-linker-plugin*\\ *) CFLAGS=\"$CFLAGS -fno-use-linker-plugin\" ;;\nesac\n\ndnl Parse the compiler output and extract the necessary\ndnl objects, libraries and library flags.\nif AC_TRY_EVAL(ac_compile); then\n  # Parse the compiler output and extract the necessary\n  # objects, libraries and library flags.\n\n  # Sentinel used to keep track of whether or not we are before\n  # the conftest object file.\n  pre_test_object_deps_done=no\n\n  for p in `eval \"$output_verbose_link_cmd\"`; do\n    case ${prev}${p} in\n\n    -L* | -R* | -l*)\n       # Some compilers place space between \"-{L,R}\" and the path.\n       # Remove the space.\n       if test $p = \"-L\" ||\n          test $p = \"-R\"; then\n\t prev=$p\n\t continue\n       fi\n\n       # Expand the sysroot to ease extracting the directories later.\n       if test -z \"$prev\"; then\n         case $p in\n         -L*) func_stripname_cnf '-L' '' \"$p\"; prev=-L; p=$func_stripname_result ;;\n         -R*) func_stripname_cnf '-R' '' \"$p\"; prev=-R; p=$func_stripname_result ;;\n         -l*) func_stripname_cnf '-l' '' \"$p\"; prev=-l; p=$func_stripname_result ;;\n         esac\n       fi\n       case $p in\n       =*) func_stripname_cnf '=' '' \"$p\"; p=$lt_sysroot$func_stripname_result ;;\n       esac\n       if test \"$pre_test_object_deps_done\" = no; then\n\t case ${prev} in\n\t -L | -R)\n\t   # Internal compiler library paths should come after those\n\t   # provided the user.  The postdeps already come after the\n\t   # user supplied libs so there is no need to process them.\n\t   if test -z \"$_LT_TAGVAR(compiler_lib_search_path, $1)\"; then\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${prev}${p}\"\n\t   else\n\t     _LT_TAGVAR(compiler_lib_search_path, $1)=\"${_LT_TAGVAR(compiler_lib_search_path, $1)} ${prev}${p}\"\n\t   fi\n\t   ;;\n\t # The \"-l\" case would never come before the object being\n\t # linked, so don't bother handling this case.\n\t esac\n       else\n\t if test -z \"$_LT_TAGVAR(postdeps, $1)\"; then\n\t   _LT_TAGVAR(postdeps, $1)=\"${prev}${p}\"\n\t else\n\t   _LT_TAGVAR(postdeps, $1)=\"${_LT_TAGVAR(postdeps, $1)} ${prev}${p}\"\n\t fi\n       fi\n       prev=\n       ;;\n\n    *.lto.$objext) ;; # Ignore GCC LTO objects\n    *.$objext)\n       # This assumes that the test object file only shows up\n       # once in the compiler output.\n       if test \"$p\" = \"conftest.$objext\"; then\n\t pre_test_object_deps_done=yes\n\t continue\n       fi\n\n       if test \"$pre_test_object_deps_done\" = no; then\n\t if test -z \"$_LT_TAGVAR(predep_objects, $1)\"; then\n\t   _LT_TAGVAR(predep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(predep_objects, $1)=\"$_LT_TAGVAR(predep_objects, $1) $p\"\n\t fi\n       else\n\t if test -z \"$_LT_TAGVAR(postdep_objects, $1)\"; then\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$p\"\n\t else\n\t   _LT_TAGVAR(postdep_objects, $1)=\"$_LT_TAGVAR(postdep_objects, $1) $p\"\n\t fi\n       fi\n       ;;\n\n    *) ;; # Ignore the rest.\n\n    esac\n  done\n\n  # Clean up.\n  rm -f a.out a.exe\nelse\n  echo \"libtool.m4: error: problem compiling $1 test program\"\nfi\n\n$RM -f confest.$objext\nCFLAGS=$_lt_libdeps_save_CFLAGS\n\n# PORTME: override above test on systems where it is broken\nm4_if([$1], [CXX],\n[case $host_os in\ninterix[[3-9]]*)\n  # Interix 3.5 installs completely hosed .la files for C++, so rather than\n  # hack all around it, let's just trust \"g++\" to DTRT.\n  _LT_TAGVAR(predep_objects,$1)=\n  _LT_TAGVAR(postdep_objects,$1)=\n  _LT_TAGVAR(postdeps,$1)=\n  ;;\n\nlinux*)\n  case `$CC -V 2>&1 | sed 5q` in\n  *Sun\\ C*)\n    # Sun C++ 5.9\n\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\n\nsolaris*)\n  case $cc_basename in\n  CC* | sunCC*)\n    # The more standards-conforming stlport4 library is\n    # incompatible with the Cstd library. Avoid specifying\n    # it if it's in CXXFLAGS. Ignore libCrun as\n    # -library=stlport4 depends on it.\n    case \" $CXX $CXXFLAGS \" in\n    *\" -library=stlport4 \"*)\n      solaris_use_stlport4=yes\n      ;;\n    esac\n\n    # Adding this requires a known-good setup of shared libraries for\n    # Sun compiler versions before 5.6, else PIC objects from an old\n    # archive will be linked into the output, leading to subtle bugs.\n    if test \"$solaris_use_stlport4\" != yes; then\n      _LT_TAGVAR(postdeps,$1)='-library=Cstd -library=Crun'\n    fi\n    ;;\n  esac\n  ;;\nesac\n])\n\ncase \" $_LT_TAGVAR(postdeps, $1) \" in\n*\" -lc \"*) _LT_TAGVAR(archive_cmds_need_lc, $1)=no ;;\nesac\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=\nif test -n \"${_LT_TAGVAR(compiler_lib_search_path, $1)}\"; then\n _LT_TAGVAR(compiler_lib_search_dirs, $1)=`echo \" ${_LT_TAGVAR(compiler_lib_search_path, $1)}\" | ${SED} -e 's! -L! !g' -e 's!^ !!'`\nfi\n_LT_TAGDECL([], [compiler_lib_search_dirs], [1],\n    [The directories searched by this compiler when creating a shared library])\n_LT_TAGDECL([], [predep_objects], [1],\n    [Dependencies to place before and after the objects being linked to\n    create a shared library])\n_LT_TAGDECL([], [postdep_objects], [1])\n_LT_TAGDECL([], [predeps], [1])\n_LT_TAGDECL([], [postdeps], [1])\n_LT_TAGDECL([], [compiler_lib_search_path], [1],\n    [The library search path used internally by the compiler when linking\n    a shared library])\n])# _LT_SYS_HIDDEN_LIBDEPS\n\n\n# _LT_LANG_F77_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for a Fortran 77 compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_F77_CONFIG],\n[AC_LANG_PUSH(Fortran 77)\nif test -z \"$F77\" || test \"X$F77\" = \"Xno\"; then\n  _lt_disable_F77=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for f77 test sources.\nac_ext=f\n\n# Object file extension for compiled f77 test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the F77 compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_F77\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${F77-\"f77\"}\n  CFLAGS=$FFLAGS\n  compiler=$CC\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n  GCC=$G77\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$G77\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=\"$lt_save_CC\"\n  CFLAGS=\"$lt_save_CFLAGS\"\nfi # test \"$_lt_disable_F77\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_F77_CONFIG\n\n\n# _LT_LANG_FC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for a Fortran compiler are\n# suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_FC_CONFIG],\n[AC_LANG_PUSH(Fortran)\n\nif test -z \"$FC\" || test \"X$FC\" = \"Xno\"; then\n  _lt_disable_FC=yes\nfi\n\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n_LT_TAGVAR(allow_undefined_flag, $1)=\n_LT_TAGVAR(always_export_symbols, $1)=no\n_LT_TAGVAR(archive_expsym_cmds, $1)=\n_LT_TAGVAR(export_dynamic_flag_spec, $1)=\n_LT_TAGVAR(hardcode_direct, $1)=no\n_LT_TAGVAR(hardcode_direct_absolute, $1)=no\n_LT_TAGVAR(hardcode_libdir_flag_spec, $1)=\n_LT_TAGVAR(hardcode_libdir_separator, $1)=\n_LT_TAGVAR(hardcode_minus_L, $1)=no\n_LT_TAGVAR(hardcode_automatic, $1)=no\n_LT_TAGVAR(inherit_rpath, $1)=no\n_LT_TAGVAR(module_cmds, $1)=\n_LT_TAGVAR(module_expsym_cmds, $1)=\n_LT_TAGVAR(link_all_deplibs, $1)=unknown\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n_LT_TAGVAR(no_undefined_flag, $1)=\n_LT_TAGVAR(whole_archive_flag_spec, $1)=\n_LT_TAGVAR(enable_shared_with_static_runtimes, $1)=no\n\n# Source file extension for fc test sources.\nac_ext=${ac_fc_srcext-f}\n\n# Object file extension for compiled fc test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# No sense in running all these tests if we already determined that\n# the FC compiler isn't working.  Some variables (like enable_shared)\n# are currently assumed to apply to all compilers on this platform,\n# and will be corrupted by setting them based on a non-working compiler.\nif test \"$_lt_disable_FC\" != yes; then\n  # Code to be used in simple compile tests\n  lt_simple_compile_test_code=\"\\\n      subroutine t\n      return\n      end\n\"\n\n  # Code to be used in simple link tests\n  lt_simple_link_test_code=\"\\\n      program t\n      end\n\"\n\n  # ltmain only uses $CC for tagged configurations so make sure $CC is set.\n  _LT_TAG_COMPILER\n\n  # save warnings/boilerplate of simple test code\n  _LT_COMPILER_BOILERPLATE\n  _LT_LINKER_BOILERPLATE\n\n  # Allow CC to be a program name with arguments.\n  lt_save_CC=\"$CC\"\n  lt_save_GCC=$GCC\n  lt_save_CFLAGS=$CFLAGS\n  CC=${FC-\"f95\"}\n  CFLAGS=$FCFLAGS\n  compiler=$CC\n  GCC=$ac_cv_fc_compiler_gnu\n\n  _LT_TAGVAR(compiler, $1)=$CC\n  _LT_CC_BASENAME([$compiler])\n\n  if test -n \"$compiler\"; then\n    AC_MSG_CHECKING([if libtool supports shared libraries])\n    AC_MSG_RESULT([$can_build_shared])\n\n    AC_MSG_CHECKING([whether to build shared libraries])\n    test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n    # On AIX, shared libraries and static libraries use the same namespace, and\n    # are all built from PIC.\n    case $host_os in\n      aix3*)\n        test \"$enable_shared\" = yes && enable_static=no\n        if test -n \"$RANLIB\"; then\n          archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n          postinstall_cmds='$RANLIB $lib'\n        fi\n        ;;\n      aix[[4-9]]*)\n\tif test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n\t  test \"$enable_shared\" = yes && enable_static=no\n\tfi\n        ;;\n    esac\n    AC_MSG_RESULT([$enable_shared])\n\n    AC_MSG_CHECKING([whether to build static libraries])\n    # Make sure either enable_shared or enable_static is yes.\n    test \"$enable_shared\" = yes || enable_static=yes\n    AC_MSG_RESULT([$enable_static])\n\n    _LT_TAGVAR(GCC, $1)=\"$ac_cv_fc_compiler_gnu\"\n    _LT_TAGVAR(LD, $1)=\"$LD\"\n\n    ## CAVEAT EMPTOR:\n    ## There is no encapsulation within the following macros, do not change\n    ## the running order or otherwise move them around unless you know exactly\n    ## what you are doing...\n    _LT_SYS_HIDDEN_LIBDEPS($1)\n    _LT_COMPILER_PIC($1)\n    _LT_COMPILER_C_O($1)\n    _LT_COMPILER_FILE_LOCKS($1)\n    _LT_LINKER_SHLIBS($1)\n    _LT_SYS_DYNAMIC_LINKER($1)\n    _LT_LINKER_HARDCODE_LIBPATH($1)\n\n    _LT_CONFIG($1)\n  fi # test -n \"$compiler\"\n\n  GCC=$lt_save_GCC\n  CC=$lt_save_CC\n  CFLAGS=$lt_save_CFLAGS\nfi # test \"$_lt_disable_FC\" != yes\n\nAC_LANG_POP\n])# _LT_LANG_FC_CONFIG\n\n\n# _LT_LANG_GCJ_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Java Compiler compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GCJ_CONFIG],\n[AC_REQUIRE([LT_PROG_GCJ])dnl\nAC_LANG_SAVE\n\n# Source file extension for Java test sources.\nac_ext=java\n\n# Object file extension for compiled Java test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"class foo {}\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='public class conftest { public static void main(String[[]] argv) {}; }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GCJ-\"gcj\"}\nCFLAGS=$GCJFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# GCJ did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GCJ_CONFIG\n\n\n# _LT_LANG_GO_CONFIG([TAG])\n# --------------------------\n# Ensure that the configuration variables for the GNU Go compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_GO_CONFIG],\n[AC_REQUIRE([LT_PROG_GO])dnl\nAC_LANG_SAVE\n\n# Source file extension for Go test sources.\nac_ext=go\n\n# Object file extension for compiled Go test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"package main; func main() { }\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='package main; func main() { }'\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=$CC\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=yes\nCC=${GOC-\"gccgo\"}\nCFLAGS=$GOFLAGS\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_TAGVAR(LD, $1)=\"$LD\"\n_LT_CC_BASENAME([$compiler])\n\n# Go did not exist at the time GCC didn't implicitly link libc in.\n_LT_TAGVAR(archive_cmds_need_lc, $1)=no\n\n_LT_TAGVAR(old_archive_cmds, $1)=$old_archive_cmds\n_LT_TAGVAR(reload_flag, $1)=$reload_flag\n_LT_TAGVAR(reload_cmds, $1)=$reload_cmds\n\nif test -n \"$compiler\"; then\n  _LT_COMPILER_NO_RTTI($1)\n  _LT_COMPILER_PIC($1)\n  _LT_COMPILER_C_O($1)\n  _LT_COMPILER_FILE_LOCKS($1)\n  _LT_LINKER_SHLIBS($1)\n  _LT_LINKER_HARDCODE_LIBPATH($1)\n\n  _LT_CONFIG($1)\nfi\n\nAC_LANG_RESTORE\n\nGCC=$lt_save_GCC\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_GO_CONFIG\n\n\n# _LT_LANG_RC_CONFIG([TAG])\n# -------------------------\n# Ensure that the configuration variables for the Windows resource compiler\n# are suitably defined.  These variables are subsequently used by _LT_CONFIG\n# to write the compiler configuration to `libtool'.\nm4_defun([_LT_LANG_RC_CONFIG],\n[AC_REQUIRE([LT_PROG_RC])dnl\nAC_LANG_SAVE\n\n# Source file extension for RC test sources.\nac_ext=rc\n\n# Object file extension for compiled RC test sources.\nobjext=o\n_LT_TAGVAR(objext, $1)=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code='sample MENU { MENUITEM \"&Soup\", 100, CHECKED }'\n\n# Code to be used in simple link tests\nlt_simple_link_test_code=\"$lt_simple_compile_test_code\"\n\n# ltmain only uses $CC for tagged configurations so make sure $CC is set.\n_LT_TAG_COMPILER\n\n# save warnings/boilerplate of simple test code\n_LT_COMPILER_BOILERPLATE\n_LT_LINKER_BOILERPLATE\n\n# Allow CC to be a program name with arguments.\nlt_save_CC=\"$CC\"\nlt_save_CFLAGS=$CFLAGS\nlt_save_GCC=$GCC\nGCC=\nCC=${RC-\"windres\"}\nCFLAGS=\ncompiler=$CC\n_LT_TAGVAR(compiler, $1)=$CC\n_LT_CC_BASENAME([$compiler])\n_LT_TAGVAR(lt_cv_prog_compiler_c_o, $1)=yes\n\nif test -n \"$compiler\"; then\n  :\n  _LT_CONFIG($1)\nfi\n\nGCC=$lt_save_GCC\nAC_LANG_RESTORE\nCC=$lt_save_CC\nCFLAGS=$lt_save_CFLAGS\n])# _LT_LANG_RC_CONFIG\n\n\n# LT_PROG_GCJ\n# -----------\nAC_DEFUN([LT_PROG_GCJ],\n[m4_ifdef([AC_PROG_GCJ], [AC_PROG_GCJ],\n  [m4_ifdef([A][M_PROG_GCJ], [A][M_PROG_GCJ],\n    [AC_CHECK_TOOL(GCJ, gcj,)\n      test \"x${GCJFLAGS+set}\" = xset || GCJFLAGS=\"-g -O2\"\n      AC_SUBST(GCJFLAGS)])])[]dnl\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_GCJ], [LT_PROG_GCJ])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_GCJ], [])\n\n\n# LT_PROG_GO\n# ----------\nAC_DEFUN([LT_PROG_GO],\n[AC_CHECK_TOOL(GOC, gccgo,)\n])\n\n\n# LT_PROG_RC\n# ----------\nAC_DEFUN([LT_PROG_RC],\n[AC_CHECK_TOOL(RC, windres,)\n])\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_RC], [LT_PROG_RC])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_RC], [])\n\n\n# _LT_DECL_EGREP\n# --------------\n# If we don't have a new enough Autoconf to choose the best grep\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_EGREP],\n[AC_REQUIRE([AC_PROG_EGREP])dnl\nAC_REQUIRE([AC_PROG_FGREP])dnl\ntest -z \"$GREP\" && GREP=grep\n_LT_DECL([], [GREP], [1], [A grep program that handles long lines])\n_LT_DECL([], [EGREP], [1], [An ERE matcher])\n_LT_DECL([], [FGREP], [1], [A literal string matcher])\ndnl Non-bleeding-edge autoconf doesn't subst GREP, so do it here too\nAC_SUBST([GREP])\n])\n\n\n# _LT_DECL_OBJDUMP\n# --------------\n# If we don't have a new enough Autoconf to choose the best objdump\n# available, choose the one first in the user's PATH.\nm4_defun([_LT_DECL_OBJDUMP],\n[AC_CHECK_TOOL(OBJDUMP, objdump, false)\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [An object symbol dumper])\nAC_SUBST([OBJDUMP])\n])\n\n# _LT_DECL_DLLTOOL\n# ----------------\n# Ensure DLLTOOL variable is set.\nm4_defun([_LT_DECL_DLLTOOL],\n[AC_CHECK_TOOL(DLLTOOL, dlltool, false)\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])\nAC_SUBST([DLLTOOL])\n])\n\n# _LT_DECL_SED\n# ------------\n# Check for a fully-functional sed program, that truncates\n# as few characters as possible.  Prefer GNU sed if found.\nm4_defun([_LT_DECL_SED],\n[AC_PROG_SED\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n_LT_DECL([], [SED], [1], [A sed program that does not truncate output])\n_LT_DECL([], [Xsed], [\"\\$SED -e 1s/^X//\"],\n    [Sed that helps us avoid accidentally triggering echo(1) options like -n])\n])# _LT_DECL_SED\n\nm4_ifndef([AC_PROG_SED], [\n# NOTE: This macro has been submitted for inclusion into   #\n#  GNU Autoconf as AC_PROG_SED.  When it is available in   #\n#  a released version of Autoconf we should remove this    #\n#  macro and use it instead.                               #\n\nm4_defun([AC_PROG_SED],\n[AC_MSG_CHECKING([for a sed that does not truncate output])\nAC_CACHE_VAL(lt_cv_path_SED,\n[# Loop through the user's path and test for sed and gsed.\n# Then use that list of sed's as ones to test for truncation.\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  for lt_ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      if $as_executable_p \"$as_dir/$lt_ac_prog$ac_exec_ext\"; then\n        lt_ac_sed_list=\"$lt_ac_sed_list $as_dir/$lt_ac_prog$ac_exec_ext\"\n      fi\n    done\n  done\ndone\nIFS=$as_save_IFS\nlt_ac_max=0\nlt_ac_count=0\n# Add /usr/xpg4/bin/sed as it is typically found on Solaris\n# along with /bin/sed that truncates output.\nfor lt_ac_sed in $lt_ac_sed_list /usr/xpg4/bin/sed; do\n  test ! -f $lt_ac_sed && continue\n  cat /dev/null > conftest.in\n  lt_ac_count=0\n  echo $ECHO_N \"0123456789$ECHO_C\" >conftest.in\n  # Check for GNU sed and select it if it is found.\n  if \"$lt_ac_sed\" --version 2>&1 < /dev/null | grep 'GNU' > /dev/null; then\n    lt_cv_path_SED=$lt_ac_sed\n    break\n  fi\n  while true; do\n    cat conftest.in conftest.in >conftest.tmp\n    mv conftest.tmp conftest.in\n    cp conftest.in conftest.nl\n    echo >>conftest.nl\n    $lt_ac_sed -e 's/a$//' < conftest.nl >conftest.out || break\n    cmp -s conftest.out conftest.nl || break\n    # 10000 chars as input seems more than enough\n    test $lt_ac_count -gt 10 && break\n    lt_ac_count=`expr $lt_ac_count + 1`\n    if test $lt_ac_count -gt $lt_ac_max; then\n      lt_ac_max=$lt_ac_count\n      lt_cv_path_SED=$lt_ac_sed\n    fi\n  done\ndone\n])\nSED=$lt_cv_path_SED\nAC_SUBST([SED])\nAC_MSG_RESULT([$SED])\n])#AC_PROG_SED\n])#m4_ifndef\n\n# Old name:\nAU_ALIAS([LT_AC_PROG_SED], [AC_PROG_SED])\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([LT_AC_PROG_SED], [])\n\n\n# _LT_CHECK_SHELL_FEATURES\n# ------------------------\n# Find out whether the shell is Bourne or XSI compatible,\n# or has some other useful features.\nm4_defun([_LT_CHECK_SHELL_FEATURES],\n[AC_MSG_CHECKING([whether the shell understands some XSI constructs])\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\nAC_MSG_RESULT([$xsi_shell])\n_LT_CONFIG_LIBTOOL_INIT([xsi_shell='$xsi_shell'])\n\nAC_MSG_CHECKING([whether the shell understands \"+=\"])\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$[1]+=\\$[2]\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\nAC_MSG_RESULT([$lt_shell_append])\n_LT_CONFIG_LIBTOOL_INIT([lt_shell_append='$lt_shell_append'])\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n_LT_DECL([], [lt_unset], [0], [whether the shell understands \"unset\"])dnl\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n_LT_DECL([SP2NL], [lt_SP2NL], [1], [turn spaces into newlines])dnl\n_LT_DECL([NL2SP], [lt_NL2SP], [1], [turn newlines into spaces])dnl\n])# _LT_CHECK_SHELL_FEATURES\n\n\n# _LT_PROG_FUNCTION_REPLACE (FUNCNAME, REPLACEMENT-BODY)\n# ------------------------------------------------------\n# In `$cfgfile', look for function FUNCNAME delimited by `^FUNCNAME ()$' and\n# '^} FUNCNAME ', and replace its body with REPLACEMENT-BODY.\nm4_defun([_LT_PROG_FUNCTION_REPLACE],\n[dnl {\nsed -e '/^$1 ()$/,/^} # $1 /c\\\n$1 ()\\\n{\\\nm4_bpatsubsts([$2], [$], [\\\\], [^\\([\t ]\\)], [\\\\\\1])\n} # Extended-shell $1 implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n])\n\n\n# _LT_PROG_REPLACE_SHELLFNS\n# -------------------------\n# Replace existing portable implementations of several shell functions with\n# equivalent extended shell implementations where those features are available..\nm4_defun([_LT_PROG_REPLACE_SHELLFNS],\n[if test x\"$xsi_shell\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_dirname], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_basename], [dnl\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_dirname_and_basename], [dnl\n    case ${1} in\n      */*) func_dirname_result=\"${1%/*}${2}\" ;;\n      *  ) func_dirname_result=\"${3}\" ;;\n    esac\n    func_basename_result=\"${1##*/}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_stripname], [dnl\n    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\n    # positional parameters, so assign one to ordinary parameter first.\n    func_stripname_result=${3}\n    func_stripname_result=${func_stripname_result#\"${1}\"}\n    func_stripname_result=${func_stripname_result%\"${2}\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_long_opt], [dnl\n    func_split_long_opt_name=${1%%=*}\n    func_split_long_opt_arg=${1#*=}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_split_short_opt], [dnl\n    func_split_short_opt_arg=${1#??}\n    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}])\n\n  _LT_PROG_FUNCTION_REPLACE([func_lo2o], [dnl\n    case ${1} in\n      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\n      *)    func_lo2o_result=${1} ;;\n    esac])\n\n  _LT_PROG_FUNCTION_REPLACE([func_xform], [    func_xform_result=${1%.*}.lo])\n\n  _LT_PROG_FUNCTION_REPLACE([func_arith], [    func_arith_result=$(( $[*] ))])\n\n  _LT_PROG_FUNCTION_REPLACE([func_len], [    func_len_result=${#1}])\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  _LT_PROG_FUNCTION_REPLACE([func_append], [    eval \"${1}+=\\\\${2}\"])\n\n  _LT_PROG_FUNCTION_REPLACE([func_append_quoted], [dnl\n    func_quote_for_eval \"${2}\"\ndnl m4 expansion turns \\\\\\\\ into \\\\, and then the shell eval turns that into \\\n    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"])\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([[a-zA-Z_]]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  AC_MSG_WARN([Unable to substitute extended shell functions in $ofile])\nfi\n])\n\n# _LT_PATH_CONVERSION_FUNCTIONS\n# -----------------------------\n# Determine which file name conversion functions should be used by\n# func_to_host_file (and, implicitly, by func_to_host_path).  These are needed\n# for certain cross-compile configurations and native mingw.\nm4_defun([_LT_PATH_CONVERSION_FUNCTIONS],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\nAC_REQUIRE([AC_CANONICAL_BUILD])dnl\nAC_MSG_CHECKING([how to convert $build file names to $host format])\nAC_CACHE_VAL(lt_cv_to_host_file_cmd,\n[case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n])\nto_host_file_cmd=$lt_cv_to_host_file_cmd\nAC_MSG_RESULT([$lt_cv_to_host_file_cmd])\n_LT_DECL([to_host_file_cmd], [lt_cv_to_host_file_cmd],\n         [0], [convert $build file names to $host format])dnl\n\nAC_MSG_CHECKING([how to convert $build file names to toolchain format])\nAC_CACHE_VAL(lt_cv_to_tool_file_cmd,\n[#assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n])\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\nAC_MSG_RESULT([$lt_cv_to_tool_file_cmd])\n_LT_DECL([to_tool_file_cmd], [lt_cv_to_tool_file_cmd],\n         [0], [convert $build files to toolchain format])dnl\n])# _LT_PATH_CONVERSION_FUNCTIONS\n\n# Helper functions for option handling.                    -*- Autoconf -*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2008, 2009 Free Software Foundation,\n#   Inc.\n#   Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 7 ltoptions.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOPTIONS_VERSION], [m4_if([1])])\n\n\n# _LT_MANGLE_OPTION(MACRO-NAME, OPTION-NAME)\n# ------------------------------------------\nm4_define([_LT_MANGLE_OPTION],\n[[_LT_OPTION_]m4_bpatsubst($1__$2, [[^a-zA-Z0-9_]], [_])])\n\n\n# _LT_SET_OPTION(MACRO-NAME, OPTION-NAME)\n# ---------------------------------------\n# Set option OPTION-NAME for macro MACRO-NAME, and if there is a\n# matching handler defined, dispatch to it.  Other OPTION-NAMEs are\n# saved as a flag.\nm4_define([_LT_SET_OPTION],\n[m4_define(_LT_MANGLE_OPTION([$1], [$2]))dnl\nm4_ifdef(_LT_MANGLE_DEFUN([$1], [$2]),\n        _LT_MANGLE_DEFUN([$1], [$2]),\n    [m4_warning([Unknown $1 option `$2'])])[]dnl\n])\n\n\n# _LT_IF_OPTION(MACRO-NAME, OPTION-NAME, IF-SET, [IF-NOT-SET])\n# ------------------------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nm4_define([_LT_IF_OPTION],\n[m4_ifdef(_LT_MANGLE_OPTION([$1], [$2]), [$3], [$4])])\n\n\n# _LT_UNLESS_OPTIONS(MACRO-NAME, OPTION-LIST, IF-NOT-SET)\n# -------------------------------------------------------\n# Execute IF-NOT-SET unless all options in OPTION-LIST for MACRO-NAME\n# are set.\nm4_define([_LT_UNLESS_OPTIONS],\n[m4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n\t    [m4_ifdef(_LT_MANGLE_OPTION([$1], _LT_Option),\n\t\t      [m4_define([$0_found])])])[]dnl\nm4_ifdef([$0_found], [m4_undefine([$0_found])], [$3\n])[]dnl\n])\n\n\n# _LT_SET_OPTIONS(MACRO-NAME, OPTION-LIST)\n# ----------------------------------------\n# OPTION-LIST is a space-separated list of Libtool options associated\n# with MACRO-NAME.  If any OPTION has a matching handler declared with\n# LT_OPTION_DEFINE, dispatch to that macro; otherwise complain about\n# the unknown option and exit.\nm4_defun([_LT_SET_OPTIONS],\n[# Set options\nm4_foreach([_LT_Option], m4_split(m4_normalize([$2])),\n    [_LT_SET_OPTION([$1], _LT_Option)])\n\nm4_if([$1],[LT_INIT],[\n  dnl\n  dnl Simply set some default values (i.e off) if boolean options were not\n  dnl specified:\n  _LT_UNLESS_OPTIONS([LT_INIT], [dlopen], [enable_dlopen=no\n  ])\n  _LT_UNLESS_OPTIONS([LT_INIT], [win32-dll], [enable_win32_dll=no\n  ])\n  dnl\n  dnl If no reference was made to various pairs of opposing options, then\n  dnl we run the default mode handler for the pair.  For example, if neither\n  dnl `shared' nor `disable-shared' was passed, we enable building of shared\n  dnl archives by default:\n  _LT_UNLESS_OPTIONS([LT_INIT], [shared disable-shared], [_LT_ENABLE_SHARED])\n  _LT_UNLESS_OPTIONS([LT_INIT], [static disable-static], [_LT_ENABLE_STATIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [pic-only no-pic], [_LT_WITH_PIC])\n  _LT_UNLESS_OPTIONS([LT_INIT], [fast-install disable-fast-install],\n  \t\t   [_LT_ENABLE_FAST_INSTALL])\n  ])\n])# _LT_SET_OPTIONS\n\n\n\n# _LT_MANGLE_DEFUN(MACRO-NAME, OPTION-NAME)\n# -----------------------------------------\nm4_define([_LT_MANGLE_DEFUN],\n[[_LT_OPTION_DEFUN_]m4_bpatsubst(m4_toupper([$1__$2]), [[^A-Z0-9_]], [_])])\n\n\n# LT_OPTION_DEFINE(MACRO-NAME, OPTION-NAME, CODE)\n# -----------------------------------------------\nm4_define([LT_OPTION_DEFINE],\n[m4_define(_LT_MANGLE_DEFUN([$1], [$2]), [$3])[]dnl\n])# LT_OPTION_DEFINE\n\n\n# dlopen\n# ------\nLT_OPTION_DEFINE([LT_INIT], [dlopen], [enable_dlopen=yes\n])\n\nAU_DEFUN([AC_LIBTOOL_DLOPEN],\n[_LT_SET_OPTION([LT_INIT], [dlopen])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `dlopen' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_DLOPEN], [])\n\n\n# win32-dll\n# ---------\n# Declare package support for building win32 dll's.\nLT_OPTION_DEFINE([LT_INIT], [win32-dll],\n[enable_win32_dll=yes\n\ncase $host in\n*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-cegcc*)\n  AC_CHECK_TOOL(AS, as, false)\n  AC_CHECK_TOOL(DLLTOOL, dlltool, false)\n  AC_CHECK_TOOL(OBJDUMP, objdump, false)\n  ;;\nesac\n\ntest -z \"$AS\" && AS=as\n_LT_DECL([], [AS],      [1], [Assembler program])dnl\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n_LT_DECL([], [DLLTOOL], [1], [DLL creation program])dnl\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n_LT_DECL([], [OBJDUMP], [1], [Object dumper program])dnl\n])# win32-dll\n\nAU_DEFUN([AC_LIBTOOL_WIN32_DLL],\n[AC_REQUIRE([AC_CANONICAL_HOST])dnl\n_LT_SET_OPTION([LT_INIT], [win32-dll])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `win32-dll' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_WIN32_DLL], [])\n\n\n# _LT_ENABLE_SHARED([DEFAULT])\n# ----------------------------\n# implement the --enable-shared flag, and supports the `shared' and\n# `disable-shared' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_SHARED],\n[m4_define([_LT_ENABLE_SHARED_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([shared],\n    [AS_HELP_STRING([--enable-shared@<:@=PKGS@:>@],\n\t[build shared libraries @<:@default=]_LT_ENABLE_SHARED_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_shared=]_LT_ENABLE_SHARED_DEFAULT)\n\n    _LT_DECL([build_libtool_libs], [enable_shared], [0],\n\t[Whether or not to build shared libraries])\n])# _LT_ENABLE_SHARED\n\nLT_OPTION_DEFINE([LT_INIT], [shared], [_LT_ENABLE_SHARED([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-shared], [_LT_ENABLE_SHARED([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[shared])\n])\n\nAC_DEFUN([AC_DISABLE_SHARED],\n[_LT_SET_OPTION([LT_INIT], [disable-shared])\n])\n\nAU_DEFUN([AM_ENABLE_SHARED], [AC_ENABLE_SHARED($@)])\nAU_DEFUN([AM_DISABLE_SHARED], [AC_DISABLE_SHARED($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_SHARED], [])\ndnl AC_DEFUN([AM_DISABLE_SHARED], [])\n\n\n\n# _LT_ENABLE_STATIC([DEFAULT])\n# ----------------------------\n# implement the --enable-static flag, and support the `static' and\n# `disable-static' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_STATIC],\n[m4_define([_LT_ENABLE_STATIC_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([static],\n    [AS_HELP_STRING([--enable-static@<:@=PKGS@:>@],\n\t[build static libraries @<:@default=]_LT_ENABLE_STATIC_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_static=]_LT_ENABLE_STATIC_DEFAULT)\n\n    _LT_DECL([build_old_libs], [enable_static], [0],\n\t[Whether or not to build static libraries])\n])# _LT_ENABLE_STATIC\n\nLT_OPTION_DEFINE([LT_INIT], [static], [_LT_ENABLE_STATIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-static], [_LT_ENABLE_STATIC([no])])\n\n# Old names:\nAC_DEFUN([AC_ENABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[static])\n])\n\nAC_DEFUN([AC_DISABLE_STATIC],\n[_LT_SET_OPTION([LT_INIT], [disable-static])\n])\n\nAU_DEFUN([AM_ENABLE_STATIC], [AC_ENABLE_STATIC($@)])\nAU_DEFUN([AM_DISABLE_STATIC], [AC_DISABLE_STATIC($@)])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AM_ENABLE_STATIC], [])\ndnl AC_DEFUN([AM_DISABLE_STATIC], [])\n\n\n\n# _LT_ENABLE_FAST_INSTALL([DEFAULT])\n# ----------------------------------\n# implement the --enable-fast-install flag, and support the `fast-install'\n# and `disable-fast-install' LT_INIT options.\n# DEFAULT is either `yes' or `no'.  If omitted, it defaults to `yes'.\nm4_define([_LT_ENABLE_FAST_INSTALL],\n[m4_define([_LT_ENABLE_FAST_INSTALL_DEFAULT], [m4_if($1, no, no, yes)])dnl\nAC_ARG_ENABLE([fast-install],\n    [AS_HELP_STRING([--enable-fast-install@<:@=PKGS@:>@],\n    [optimize for fast installation @<:@default=]_LT_ENABLE_FAST_INSTALL_DEFAULT[@:>@])],\n    [p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [enable_fast_install=]_LT_ENABLE_FAST_INSTALL_DEFAULT)\n\n_LT_DECL([fast_install], [enable_fast_install], [0],\n\t [Whether or not to optimize for fast installation])dnl\n])# _LT_ENABLE_FAST_INSTALL\n\nLT_OPTION_DEFINE([LT_INIT], [fast-install], [_LT_ENABLE_FAST_INSTALL([yes])])\nLT_OPTION_DEFINE([LT_INIT], [disable-fast-install], [_LT_ENABLE_FAST_INSTALL([no])])\n\n# Old names:\nAU_DEFUN([AC_ENABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], m4_if([$1], [no], [disable-])[fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `fast-install' option into LT_INIT's first parameter.])\n])\n\nAU_DEFUN([AC_DISABLE_FAST_INSTALL],\n[_LT_SET_OPTION([LT_INIT], [disable-fast-install])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you put\nthe `disable-fast-install' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_ENABLE_FAST_INSTALL], [])\ndnl AC_DEFUN([AM_DISABLE_FAST_INSTALL], [])\n\n\n# _LT_WITH_PIC([MODE])\n# --------------------\n# implement the --with-pic flag, and support the `pic-only' and `no-pic'\n# LT_INIT options.\n# MODE is either `yes' or `no'.  If omitted, it defaults to `both'.\nm4_define([_LT_WITH_PIC],\n[AC_ARG_WITH([pic],\n    [AS_HELP_STRING([--with-pic@<:@=PKGS@:>@],\n\t[try to use only PIC/non-PIC objects @<:@default=use both@:>@])],\n    [lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for lt_pkg in $withval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac],\n    [pic_mode=default])\n\ntest -z \"$pic_mode\" && pic_mode=m4_default([$1], [default])\n\n_LT_DECL([], [pic_mode], [0], [What type of objects to build])dnl\n])# _LT_WITH_PIC\n\nLT_OPTION_DEFINE([LT_INIT], [pic-only], [_LT_WITH_PIC([yes])])\nLT_OPTION_DEFINE([LT_INIT], [no-pic], [_LT_WITH_PIC([no])])\n\n# Old name:\nAU_DEFUN([AC_LIBTOOL_PICMODE],\n[_LT_SET_OPTION([LT_INIT], [pic-only])\nAC_DIAGNOSE([obsolete],\n[$0: Remove this warning and the call to _LT_SET_OPTION when you\nput the `pic-only' option into LT_INIT's first parameter.])\n])\n\ndnl aclocal-1.4 backwards compatibility:\ndnl AC_DEFUN([AC_LIBTOOL_PICMODE], [])\n\n\nm4_define([_LTDL_MODE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [nonrecursive],\n\t\t [m4_define([_LTDL_MODE], [nonrecursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [recursive],\n\t\t [m4_define([_LTDL_MODE], [recursive])])\nLT_OPTION_DEFINE([LTDL_INIT], [subproject],\n\t\t [m4_define([_LTDL_MODE], [subproject])])\n\nm4_define([_LTDL_TYPE], [])\nLT_OPTION_DEFINE([LTDL_INIT], [installable],\n\t\t [m4_define([_LTDL_TYPE], [installable])])\nLT_OPTION_DEFINE([LTDL_INIT], [convenience],\n\t\t [m4_define([_LTDL_TYPE], [convenience])])\n\n# ltsugar.m4 -- libtool m4 base layer.                         -*-Autoconf-*-\n#\n# Copyright (C) 2004, 2005, 2007, 2008 Free Software Foundation, Inc.\n# Written by Gary V. Vaughan, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 6 ltsugar.m4\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTSUGAR_VERSION], [m4_if([0.1])])\n\n\n# lt_join(SEP, ARG1, [ARG2...])\n# -----------------------------\n# Produce ARG1SEPARG2...SEPARGn, omitting [] arguments and their\n# associated separator.\n# Needed until we can rely on m4_join from Autoconf 2.62, since all earlier\n# versions in m4sugar had bugs.\nm4_define([lt_join],\n[m4_if([$#], [1], [],\n       [$#], [2], [[$2]],\n       [m4_if([$2], [], [], [[$2]_])$0([$1], m4_shift(m4_shift($@)))])])\nm4_define([_lt_join],\n[m4_if([$#$2], [2], [],\n       [m4_if([$2], [], [], [[$1$2]])$0([$1], m4_shift(m4_shift($@)))])])\n\n\n# lt_car(LIST)\n# lt_cdr(LIST)\n# ------------\n# Manipulate m4 lists.\n# These macros are necessary as long as will still need to support\n# Autoconf-2.59 which quotes differently.\nm4_define([lt_car], [[$1]])\nm4_define([lt_cdr],\n[m4_if([$#], 0, [m4_fatal([$0: cannot be called without arguments])],\n       [$#], 1, [],\n       [m4_dquote(m4_shift($@))])])\nm4_define([lt_unquote], $1)\n\n\n# lt_append(MACRO-NAME, STRING, [SEPARATOR])\n# ------------------------------------------\n# Redefine MACRO-NAME to hold its former content plus `SEPARATOR'`STRING'.\n# Note that neither SEPARATOR nor STRING are expanded; they are appended\n# to MACRO-NAME as is (leaving the expansion for when MACRO-NAME is invoked).\n# No SEPARATOR is output if MACRO-NAME was previously undefined (different\n# than defined and empty).\n#\n# This macro is needed until we can rely on Autoconf 2.62, since earlier\n# versions of m4sugar mistakenly expanded SEPARATOR but not STRING.\nm4_define([lt_append],\n[m4_define([$1],\n\t   m4_ifdef([$1], [m4_defn([$1])[$3]])[$2])])\n\n\n\n# lt_combine(SEP, PREFIX-LIST, INFIX, SUFFIX1, [SUFFIX2...])\n# ----------------------------------------------------------\n# Produce a SEP delimited list of all paired combinations of elements of\n# PREFIX-LIST with SUFFIX1 through SUFFIXn.  Each element of the list\n# has the form PREFIXmINFIXSUFFIXn.\n# Needed until we can rely on m4_combine added in Autoconf 2.62.\nm4_define([lt_combine],\n[m4_if(m4_eval([$# > 3]), [1],\n       [m4_pushdef([_Lt_sep], [m4_define([_Lt_sep], m4_defn([lt_car]))])]]dnl\n[[m4_foreach([_Lt_prefix], [$2],\n\t     [m4_foreach([_Lt_suffix],\n\t\t]m4_dquote(m4_dquote(m4_shift(m4_shift(m4_shift($@)))))[,\n\t[_Lt_sep([$1])[]m4_defn([_Lt_prefix])[$3]m4_defn([_Lt_suffix])])])])])\n\n\n# lt_if_append_uniq(MACRO-NAME, VARNAME, [SEPARATOR], [UNIQ], [NOT-UNIQ])\n# -----------------------------------------------------------------------\n# Iff MACRO-NAME does not yet contain VARNAME, then append it (delimited\n# by SEPARATOR if supplied) and expand UNIQ, else NOT-UNIQ.\nm4_define([lt_if_append_uniq],\n[m4_ifdef([$1],\n\t  [m4_if(m4_index([$3]m4_defn([$1])[$3], [$3$2$3]), [-1],\n\t\t [lt_append([$1], [$2], [$3])$4],\n\t\t [$5])],\n\t  [lt_append([$1], [$2], [$3])$4])])\n\n\n# lt_dict_add(DICT, KEY, VALUE)\n# -----------------------------\nm4_define([lt_dict_add],\n[m4_define([$1($2)], [$3])])\n\n\n# lt_dict_add_subkey(DICT, KEY, SUBKEY, VALUE)\n# --------------------------------------------\nm4_define([lt_dict_add_subkey],\n[m4_define([$1($2:$3)], [$4])])\n\n\n# lt_dict_fetch(DICT, KEY, [SUBKEY])\n# ----------------------------------\nm4_define([lt_dict_fetch],\n[m4_ifval([$3],\n\tm4_ifdef([$1($2:$3)], [m4_defn([$1($2:$3)])]),\n    m4_ifdef([$1($2)], [m4_defn([$1($2)])]))])\n\n\n# lt_if_dict_fetch(DICT, KEY, [SUBKEY], VALUE, IF-TRUE, [IF-FALSE])\n# -----------------------------------------------------------------\nm4_define([lt_if_dict_fetch],\n[m4_if(lt_dict_fetch([$1], [$2], [$3]), [$4],\n\t[$5],\n    [$6])])\n\n\n# lt_dict_filter(DICT, [SUBKEY], VALUE, [SEPARATOR], KEY, [...])\n# --------------------------------------------------------------\nm4_define([lt_dict_filter],\n[m4_if([$5], [], [],\n  [lt_join(m4_quote(m4_default([$4], [[, ]])),\n           lt_unquote(m4_split(m4_normalize(m4_foreach(_Lt_key, lt_car([m4_shiftn(4, $@)]),\n\t\t      [lt_if_dict_fetch([$1], _Lt_key, [$2], [$3], [_Lt_key ])])))))])[]dnl\n])\n\n# ltversion.m4 -- version numbers\t\t\t-*- Autoconf -*-\n#\n#   Copyright (C) 2004 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# @configure_input@\n\n# serial 3337 ltversion.m4\n# This file is part of GNU Libtool\n\nm4_define([LT_PACKAGE_VERSION], [2.4.2])\nm4_define([LT_PACKAGE_REVISION], [1.3337])\n\nAC_DEFUN([LTVERSION_VERSION],\n[macro_version='2.4.2'\nmacro_revision='1.3337'\n_LT_DECL(, macro_version, 0, [Which release of libtool.m4 was used?])\n_LT_DECL(, macro_revision, 0)\n])\n\n# lt~obsolete.m4 -- aclocal satisfying obsolete definitions.    -*-Autoconf-*-\n#\n#   Copyright (C) 2004, 2005, 2007, 2009 Free Software Foundation, Inc.\n#   Written by Scott James Remnant, 2004.\n#\n# This file is free software; the Free Software Foundation gives\n# unlimited permission to copy and/or distribute it, with or without\n# modifications, as long as this notice is preserved.\n\n# serial 5 lt~obsolete.m4\n\n# These exist entirely to fool aclocal when bootstrapping libtool.\n#\n# In the past libtool.m4 has provided macros via AC_DEFUN (or AU_DEFUN)\n# which have later been changed to m4_define as they aren't part of the\n# exported API, or moved to Autoconf or Automake where they belong.\n#\n# The trouble is, aclocal is a bit thick.  It'll see the old AC_DEFUN\n# in /usr/share/aclocal/libtool.m4 and remember it, then when it sees us\n# using a macro with the same name in our local m4/libtool.m4 it'll\n# pull the old libtool.m4 in (it doesn't see our shiny new m4_define\n# and doesn't know about Autoconf macros at all.)\n#\n# So we provide this file, which has a silly filename so it's always\n# included after everything else.  This provides aclocal with the\n# AC_DEFUNs it wants, but when m4 processes it, it doesn't do anything\n# because those macros already exist, or will be overwritten later.\n# We use AC_DEFUN over AU_DEFUN for compatibility with aclocal-1.6. \n#\n# Anytime we withdraw an AC_DEFUN or AU_DEFUN, remember to add it here.\n# Yes, that means every name once taken will need to remain here until\n# we give up compatibility with versions before 1.7, at which point\n# we need to keep only those names which we still refer to.\n\n# This is to help aclocal find these macros, as it can't see m4_define.\nAC_DEFUN([LTOBSOLETE_VERSION], [m4_if([1])])\n\nm4_ifndef([AC_LIBTOOL_LINKER_OPTION],\t[AC_DEFUN([AC_LIBTOOL_LINKER_OPTION])])\nm4_ifndef([AC_PROG_EGREP],\t\t[AC_DEFUN([AC_PROG_EGREP])])\nm4_ifndef([_LT_AC_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_AC_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_AC_SHELL_INIT],\t\t[AC_DEFUN([_LT_AC_SHELL_INIT])])\nm4_ifndef([_LT_AC_SYS_LIBPATH_AIX],\t[AC_DEFUN([_LT_AC_SYS_LIBPATH_AIX])])\nm4_ifndef([_LT_PROG_LTMAIN],\t\t[AC_DEFUN([_LT_PROG_LTMAIN])])\nm4_ifndef([_LT_AC_TAGVAR],\t\t[AC_DEFUN([_LT_AC_TAGVAR])])\nm4_ifndef([AC_LTDL_ENABLE_INSTALL],\t[AC_DEFUN([AC_LTDL_ENABLE_INSTALL])])\nm4_ifndef([AC_LTDL_PREOPEN],\t\t[AC_DEFUN([AC_LTDL_PREOPEN])])\nm4_ifndef([_LT_AC_SYS_COMPILER],\t[AC_DEFUN([_LT_AC_SYS_COMPILER])])\nm4_ifndef([_LT_AC_LOCK],\t\t[AC_DEFUN([_LT_AC_LOCK])])\nm4_ifndef([AC_LIBTOOL_SYS_OLD_ARCHIVE],\t[AC_DEFUN([AC_LIBTOOL_SYS_OLD_ARCHIVE])])\nm4_ifndef([_LT_AC_TRY_DLOPEN_SELF],\t[AC_DEFUN([_LT_AC_TRY_DLOPEN_SELF])])\nm4_ifndef([AC_LIBTOOL_PROG_CC_C_O],\t[AC_DEFUN([AC_LIBTOOL_PROG_CC_C_O])])\nm4_ifndef([AC_LIBTOOL_SYS_HARD_LINK_LOCKS], [AC_DEFUN([AC_LIBTOOL_SYS_HARD_LINK_LOCKS])])\nm4_ifndef([AC_LIBTOOL_OBJDIR],\t\t[AC_DEFUN([AC_LIBTOOL_OBJDIR])])\nm4_ifndef([AC_LTDL_OBJDIR],\t\t[AC_DEFUN([AC_LTDL_OBJDIR])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH], [AC_DEFUN([AC_LIBTOOL_PROG_LD_HARDCODE_LIBPATH])])\nm4_ifndef([AC_LIBTOOL_SYS_LIB_STRIP],\t[AC_DEFUN([AC_LIBTOOL_SYS_LIB_STRIP])])\nm4_ifndef([AC_PATH_MAGIC],\t\t[AC_DEFUN([AC_PATH_MAGIC])])\nm4_ifndef([AC_PROG_LD_GNU],\t\t[AC_DEFUN([AC_PROG_LD_GNU])])\nm4_ifndef([AC_PROG_LD_RELOAD_FLAG],\t[AC_DEFUN([AC_PROG_LD_RELOAD_FLAG])])\nm4_ifndef([AC_DEPLIBS_CHECK_METHOD],\t[AC_DEFUN([AC_DEPLIBS_CHECK_METHOD])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_NO_RTTI], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_NO_RTTI])])\nm4_ifndef([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE], [AC_DEFUN([AC_LIBTOOL_SYS_GLOBAL_SYMBOL_PIPE])])\nm4_ifndef([AC_LIBTOOL_PROG_COMPILER_PIC], [AC_DEFUN([AC_LIBTOOL_PROG_COMPILER_PIC])])\nm4_ifndef([AC_LIBTOOL_PROG_LD_SHLIBS],\t[AC_DEFUN([AC_LIBTOOL_PROG_LD_SHLIBS])])\nm4_ifndef([AC_LIBTOOL_POSTDEP_PREDEP],\t[AC_DEFUN([AC_LIBTOOL_POSTDEP_PREDEP])])\nm4_ifndef([LT_AC_PROG_EGREP],\t\t[AC_DEFUN([LT_AC_PROG_EGREP])])\nm4_ifndef([LT_AC_PROG_SED],\t\t[AC_DEFUN([LT_AC_PROG_SED])])\nm4_ifndef([_LT_CC_BASENAME],\t\t[AC_DEFUN([_LT_CC_BASENAME])])\nm4_ifndef([_LT_COMPILER_BOILERPLATE],\t[AC_DEFUN([_LT_COMPILER_BOILERPLATE])])\nm4_ifndef([_LT_LINKER_BOILERPLATE],\t[AC_DEFUN([_LT_LINKER_BOILERPLATE])])\nm4_ifndef([_AC_PROG_LIBTOOL],\t\t[AC_DEFUN([_AC_PROG_LIBTOOL])])\nm4_ifndef([AC_LIBTOOL_SETUP],\t\t[AC_DEFUN([AC_LIBTOOL_SETUP])])\nm4_ifndef([_LT_AC_CHECK_DLFCN],\t\t[AC_DEFUN([_LT_AC_CHECK_DLFCN])])\nm4_ifndef([AC_LIBTOOL_SYS_DYNAMIC_LINKER],\t[AC_DEFUN([AC_LIBTOOL_SYS_DYNAMIC_LINKER])])\nm4_ifndef([_LT_AC_TAGCONFIG],\t\t[AC_DEFUN([_LT_AC_TAGCONFIG])])\nm4_ifndef([AC_DISABLE_FAST_INSTALL],\t[AC_DEFUN([AC_DISABLE_FAST_INSTALL])])\nm4_ifndef([_LT_AC_LANG_CXX],\t\t[AC_DEFUN([_LT_AC_LANG_CXX])])\nm4_ifndef([_LT_AC_LANG_F77],\t\t[AC_DEFUN([_LT_AC_LANG_F77])])\nm4_ifndef([_LT_AC_LANG_GCJ],\t\t[AC_DEFUN([_LT_AC_LANG_GCJ])])\nm4_ifndef([AC_LIBTOOL_LANG_C_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_C_CONFIG])])\nm4_ifndef([_LT_AC_LANG_C_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_C_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_CXX_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_CXX_CONFIG])])\nm4_ifndef([_LT_AC_LANG_CXX_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_CXX_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_F77_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_F77_CONFIG])])\nm4_ifndef([_LT_AC_LANG_F77_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_F77_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_GCJ_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_GCJ_CONFIG])])\nm4_ifndef([_LT_AC_LANG_GCJ_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_GCJ_CONFIG])])\nm4_ifndef([AC_LIBTOOL_LANG_RC_CONFIG],\t[AC_DEFUN([AC_LIBTOOL_LANG_RC_CONFIG])])\nm4_ifndef([_LT_AC_LANG_RC_CONFIG],\t[AC_DEFUN([_LT_AC_LANG_RC_CONFIG])])\nm4_ifndef([AC_LIBTOOL_CONFIG],\t\t[AC_DEFUN([AC_LIBTOOL_CONFIG])])\nm4_ifndef([_LT_AC_FILE_LTDLL_C],\t[AC_DEFUN([_LT_AC_FILE_LTDLL_C])])\nm4_ifndef([_LT_REQUIRED_DARWIN_CHECKS],\t[AC_DEFUN([_LT_REQUIRED_DARWIN_CHECKS])])\nm4_ifndef([_LT_AC_PROG_CXXCPP],\t\t[AC_DEFUN([_LT_AC_PROG_CXXCPP])])\nm4_ifndef([_LT_PREPARE_SED_QUOTE_VARS],\t[AC_DEFUN([_LT_PREPARE_SED_QUOTE_VARS])])\nm4_ifndef([_LT_PROG_ECHO_BACKSLASH],\t[AC_DEFUN([_LT_PROG_ECHO_BACKSLASH])])\nm4_ifndef([_LT_PROG_F77],\t\t[AC_DEFUN([_LT_PROG_F77])])\nm4_ifndef([_LT_PROG_FC],\t\t[AC_DEFUN([_LT_PROG_FC])])\nm4_ifndef([_LT_PROG_CXX],\t\t[AC_DEFUN([_LT_PROG_CXX])])\n\n# Copyright (C) 2002-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_AUTOMAKE_VERSION(VERSION)\n# ----------------------------\n# Automake X.Y traces this macro to ensure aclocal.m4 has been\n# generated from the m4 files accompanying Automake X.Y.\n# (This private macro should not be called outside this file.)\nAC_DEFUN([AM_AUTOMAKE_VERSION],\n[am__api_version='1.14'\ndnl Some users find AM_AUTOMAKE_VERSION and mistake it for a way to\ndnl require some minimum version.  Point them to the right macro.\nm4_if([$1], [1.14.1], [],\n      [AC_FATAL([Do not call $0, use AM_INIT_AUTOMAKE([$1]).])])dnl\n])\n\n# _AM_AUTOCONF_VERSION(VERSION)\n# -----------------------------\n# aclocal traces this macro to find the Autoconf version.\n# This is a private macro too.  Using m4_define simplifies\n# the logic in aclocal, which can simply ignore this definition.\nm4_define([_AM_AUTOCONF_VERSION], [])\n\n# AM_SET_CURRENT_AUTOMAKE_VERSION\n# -------------------------------\n# Call AM_AUTOMAKE_VERSION and AM_AUTOMAKE_VERSION so they can be traced.\n# This function is AC_REQUIREd by AM_INIT_AUTOMAKE.\nAC_DEFUN([AM_SET_CURRENT_AUTOMAKE_VERSION],\n[AM_AUTOMAKE_VERSION([1.14.1])dnl\nm4_ifndef([AC_AUTOCONF_VERSION],\n  [m4_copy([m4_PACKAGE_VERSION], [AC_AUTOCONF_VERSION])])dnl\n_AM_AUTOCONF_VERSION(m4_defn([AC_AUTOCONF_VERSION]))])\n\n# AM_AUX_DIR_EXPAND                                         -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# For projects using AC_CONFIG_AUX_DIR([foo]), Autoconf sets\n# $ac_aux_dir to '$srcdir/foo'.  In other projects, it is set to\n# '$srcdir', '$srcdir/..', or '$srcdir/../..'.\n#\n# Of course, Automake must honor this variable whenever it calls a\n# tool from the auxiliary directory.  The problem is that $srcdir (and\n# therefore $ac_aux_dir as well) can be either absolute or relative,\n# depending on how configure is run.  This is pretty annoying, since\n# it makes $ac_aux_dir quite unusable in subdirectories: in the top\n# source directory, any form will work fine, but in subdirectories a\n# relative path needs to be adjusted first.\n#\n# $ac_aux_dir/missing\n#    fails when called from a subdirectory if $ac_aux_dir is relative\n# $top_srcdir/$ac_aux_dir/missing\n#    fails if $ac_aux_dir is absolute,\n#    fails when called from a subdirectory in a VPATH build with\n#          a relative $ac_aux_dir\n#\n# The reason of the latter failure is that $top_srcdir and $ac_aux_dir\n# are both prefixed by $srcdir.  In an in-source build this is usually\n# harmless because $srcdir is '.', but things will broke when you\n# start a VPATH build or use an absolute $srcdir.\n#\n# So we could use something similar to $top_srcdir/$ac_aux_dir/missing,\n# iff we strip the leading $srcdir from $ac_aux_dir.  That would be:\n#   am_aux_dir='\\$(top_srcdir)/'`expr \"$ac_aux_dir\" : \"$srcdir//*\\(.*\\)\"`\n# and then we would define $MISSING as\n#   MISSING=\"\\${SHELL} $am_aux_dir/missing\"\n# This will work as long as MISSING is not called from configure, because\n# unfortunately $(top_srcdir) has no meaning in configure.\n# However there are other variables, like CC, which are often used in\n# configure, and could therefore not use this \"fixed\" $ac_aux_dir.\n#\n# Another solution, used here, is to always expand $ac_aux_dir to an\n# absolute PATH.  The drawback is that using absolute paths prevent a\n# configured tree to be moved without reconfiguration.\n\nAC_DEFUN([AM_AUX_DIR_EXPAND],\n[AC_REQUIRE([AC_CONFIG_AUX_DIR_DEFAULT])dnl\n# Expand $ac_aux_dir to an absolute path.\nam_aux_dir=`cd \"$ac_aux_dir\" && pwd`\n])\n\n# AM_CONDITIONAL                                            -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_CONDITIONAL(NAME, SHELL-CONDITION)\n# -------------------------------------\n# Define a conditional.\nAC_DEFUN([AM_CONDITIONAL],\n[AC_PREREQ([2.52])dnl\n m4_if([$1], [TRUE],  [AC_FATAL([$0: invalid condition: $1])],\n       [$1], [FALSE], [AC_FATAL([$0: invalid condition: $1])])dnl\nAC_SUBST([$1_TRUE])dnl\nAC_SUBST([$1_FALSE])dnl\n_AM_SUBST_NOTMAKE([$1_TRUE])dnl\n_AM_SUBST_NOTMAKE([$1_FALSE])dnl\nm4_define([_AM_COND_VALUE_$1], [$2])dnl\nif $2; then\n  $1_TRUE=\n  $1_FALSE='#'\nelse\n  $1_TRUE='#'\n  $1_FALSE=\nfi\nAC_CONFIG_COMMANDS_PRE(\n[if test -z \"${$1_TRUE}\" && test -z \"${$1_FALSE}\"; then\n  AC_MSG_ERROR([[conditional \"$1\" was never defined.\nUsually this means the macro was only invoked conditionally.]])\nfi])])\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# There are a few dirty hacks below to avoid letting 'AC_PROG_CC' be\n# written in clear, in which case automake, when reading aclocal.m4,\n# will think it sees a *use*, and therefore will trigger all it's\n# C support machinery.  Also note that it means that autoscan, seeing\n# CC etc. in the Makefile, will ask for an AC_PROG_CC use...\n\n\n# _AM_DEPENDENCIES(NAME)\n# ----------------------\n# See how the compiler implements dependency checking.\n# NAME is \"CC\", \"CXX\", \"OBJC\", \"OBJCXX\", \"UPC\", or \"GJC\".\n# We try a few techniques and use that to set a single cache variable.\n#\n# We don't AC_REQUIRE the corresponding AC_PROG_CC since the latter was\n# modified to invoke _AM_DEPENDENCIES(CC); we would have a circular\n# dependency, and given that the user is not expected to run this macro,\n# just rely on AC_PROG_CC.\nAC_DEFUN([_AM_DEPENDENCIES],\n[AC_REQUIRE([AM_SET_DEPDIR])dnl\nAC_REQUIRE([AM_OUTPUT_DEPENDENCY_COMMANDS])dnl\nAC_REQUIRE([AM_MAKE_INCLUDE])dnl\nAC_REQUIRE([AM_DEP_TRACK])dnl\n\nm4_if([$1], [CC],   [depcc=\"$CC\"   am_compiler_list=],\n      [$1], [CXX],  [depcc=\"$CXX\"  am_compiler_list=],\n      [$1], [OBJC], [depcc=\"$OBJC\" am_compiler_list='gcc3 gcc'],\n      [$1], [OBJCXX], [depcc=\"$OBJCXX\" am_compiler_list='gcc3 gcc'],\n      [$1], [UPC],  [depcc=\"$UPC\"  am_compiler_list=],\n      [$1], [GCJ],  [depcc=\"$GCJ\"  am_compiler_list='gcc3 gcc'],\n                    [depcc=\"$$1\"   am_compiler_list=])\n\nAC_CACHE_CHECK([dependency style of $depcc],\n               [am_cv_$1_dependencies_compiler_type],\n[if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named 'D' -- because '-MD' means \"put the output\n  # in D\".\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_$1_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n ['s/^#*\\([a-zA-Z0-9]*\\))$/\\1/p'] < ./depcomp`\n  fi\n  am__universal=false\n  m4_case([$1], [CC],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac],\n    [CXX],\n    [case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac])\n\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n      # Solaris 10 /bin/sh.\n      echo '/* dummy */' > sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle '-M -o', and we need to detect this.  Also, some Intel\n    # versions had trouble with output in subdirs.\n    am__obj=sub/conftest.${OBJEXT-o}\n    am__minus_obj=\"-o $am__obj\"\n    case $depmode in\n    gcc)\n      # This depmode causes a compiler race in universal mode.\n      test \"$am__universal\" = false || continue\n      ;;\n    nosideeffect)\n      # After this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested.\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n      # This compiler won't grok '-c -o', but also, the minuso test has\n      # not run yet.  These depmodes are late enough in the game, and\n      # so weak that their functioning should not be impacted.\n      am__obj=conftest.${OBJEXT-o}\n      am__minus_obj=\n      ;;\n    none) break ;;\n    esac\n    if depmode=$depmode \\\n       source=sub/conftest.c object=$am__obj \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_$1_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_$1_dependencies_compiler_type=none\nfi\n])\nAC_SUBST([$1DEPMODE], [depmode=$am_cv_$1_dependencies_compiler_type])\nAM_CONDITIONAL([am__fastdep$1], [\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_$1_dependencies_compiler_type\" = gcc3])\n])\n\n\n# AM_SET_DEPDIR\n# -------------\n# Choose a directory name for dependency files.\n# This macro is AC_REQUIREd in _AM_DEPENDENCIES.\nAC_DEFUN([AM_SET_DEPDIR],\n[AC_REQUIRE([AM_SET_LEADING_DOT])dnl\nAC_SUBST([DEPDIR], [\"${am__leading_dot}deps\"])dnl\n])\n\n\n# AM_DEP_TRACK\n# ------------\nAC_DEFUN([AM_DEP_TRACK],\n[AC_ARG_ENABLE([dependency-tracking], [dnl\nAS_HELP_STRING(\n  [--enable-dependency-tracking],\n  [do not reject slow dependency extractors])\nAS_HELP_STRING(\n  [--disable-dependency-tracking],\n  [speeds up one-time build])])\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\n  am__nodep='_no'\nfi\nAM_CONDITIONAL([AMDEP], [test \"x$enable_dependency_tracking\" != xno])\nAC_SUBST([AMDEPBACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AMDEPBACKSLASH])dnl\nAC_SUBST([am__nodep])dnl\n_AM_SUBST_NOTMAKE([am__nodep])dnl\n])\n\n# Generate code to set up dependency tracking.              -*- Autoconf -*-\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n\n# _AM_OUTPUT_DEPENDENCY_COMMANDS\n# ------------------------------\nAC_DEFUN([_AM_OUTPUT_DEPENDENCY_COMMANDS],\n[{\n  # Older Autoconf quotes --file arguments for eval, but not when files\n  # are listed without --file.  Let's play safe and only enable the eval\n  # if we detect the quoting.\n  case $CONFIG_FILES in\n  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n  *)   set x $CONFIG_FILES ;;\n  esac\n  shift\n  for mf\n  do\n    # Strip MF so we end up with the name of the file.\n    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n    # Check whether this is an Automake generated Makefile or not.\n    # We used to match only the files named 'Makefile.in', but\n    # some people rename them; so instead we look at the file content.\n    # Grep'ing the first line is not enough: some people post-process\n    # each Makefile.in and add a new line on top of each file to say so.\n    # Grep'ing the whole file is not good either: AIX grep has a line\n    # limit of 2048, but all sed's we know have understand at least 4000.\n    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n      dirpart=`AS_DIRNAME(\"$mf\")`\n    else\n      continue\n    fi\n    # Extract the definition of DEPDIR, am__include, and am__quote\n    # from the Makefile without running 'make'.\n    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n    test -z \"$DEPDIR\" && continue\n    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n    test -z \"$am__include\" && continue\n    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n    # Find all dependency output files, they are included files with\n    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n    # simplest approach to changing $(DEPDIR) to its actual value in the\n    # expansion.\n    for file in `sed -n \"\n      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g'`; do\n      # Make sure the directory exists.\n      test -f \"$dirpart/$file\" && continue\n      fdir=`AS_DIRNAME([\"$file\"])`\n      AS_MKDIR_P([$dirpart/$fdir])\n      # echo \"creating $dirpart/$file\"\n      echo '# dummy' > \"$dirpart/$file\"\n    done\n  done\n}\n])# _AM_OUTPUT_DEPENDENCY_COMMANDS\n\n\n# AM_OUTPUT_DEPENDENCY_COMMANDS\n# -----------------------------\n# This macro should only be invoked once -- use via AC_REQUIRE.\n#\n# This code is only required when automatic dependency tracking\n# is enabled.  FIXME.  This creates each '.P' file that we will\n# need in order to bootstrap the dependency handling code.\nAC_DEFUN([AM_OUTPUT_DEPENDENCY_COMMANDS],\n[AC_CONFIG_COMMANDS([depfiles],\n     [test x\"$AMDEP_TRUE\" != x\"\" || _AM_OUTPUT_DEPENDENCY_COMMANDS],\n     [AMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"])\n])\n\n# Do all the work for Automake.                             -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# This macro actually does too much.  Some checks are only needed if\n# your package does certain things.  But this isn't really a big deal.\n\ndnl Redefine AC_PROG_CC to automatically invoke _AM_PROG_CC_C_O.\nm4_define([AC_PROG_CC],\nm4_defn([AC_PROG_CC])\n[_AM_PROG_CC_C_O\n])\n\n# AM_INIT_AUTOMAKE(PACKAGE, VERSION, [NO-DEFINE])\n# AM_INIT_AUTOMAKE([OPTIONS])\n# -----------------------------------------------\n# The call with PACKAGE and VERSION arguments is the old style\n# call (pre autoconf-2.50), which is being phased out.  PACKAGE\n# and VERSION should now be passed to AC_INIT and removed from\n# the call to AM_INIT_AUTOMAKE.\n# We support both call styles for the transition.  After\n# the next Automake release, Autoconf can make the AC_INIT\n# arguments mandatory, and then we can depend on a new Autoconf\n# release and drop the old call support.\nAC_DEFUN([AM_INIT_AUTOMAKE],\n[AC_PREREQ([2.65])dnl\ndnl Autoconf wants to disallow AM_ names.  We explicitly allow\ndnl the ones we care about.\nm4_pattern_allow([^AM_[A-Z]+FLAGS$])dnl\nAC_REQUIRE([AM_SET_CURRENT_AUTOMAKE_VERSION])dnl\nAC_REQUIRE([AC_PROG_INSTALL])dnl\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  AC_SUBST([am__isrc], [' -I$(srcdir)'])_AM_SUBST_NOTMAKE([am__isrc])dnl\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    AC_MSG_ERROR([source directory already configured; run \"make distclean\" there first])\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\nAC_SUBST([CYGPATH_W])\n\n# Define the identity of the package.\ndnl Distinguish between old-style and new-style calls.\nm4_ifval([$2],\n[AC_DIAGNOSE([obsolete],\n             [$0: two- and three-arguments forms are deprecated.])\nm4_ifval([$3], [_AM_SET_OPTION([no-define])])dnl\n AC_SUBST([PACKAGE], [$1])dnl\n AC_SUBST([VERSION], [$2])],\n[_AM_SET_OPTIONS([$1])dnl\ndnl Diagnose old-style AC_INIT with new-style AM_AUTOMAKE_INIT.\nm4_if(\n  m4_ifdef([AC_PACKAGE_NAME], [ok]):m4_ifdef([AC_PACKAGE_VERSION], [ok]),\n  [ok:ok],,\n  [m4_fatal([AC_INIT should be called with package and version arguments])])dnl\n AC_SUBST([PACKAGE], ['AC_PACKAGE_TARNAME'])dnl\n AC_SUBST([VERSION], ['AC_PACKAGE_VERSION'])])dnl\n\n_AM_IF_OPTION([no-define],,\n[AC_DEFINE_UNQUOTED([PACKAGE], [\"$PACKAGE\"], [Name of package])\n AC_DEFINE_UNQUOTED([VERSION], [\"$VERSION\"], [Version number of package])])dnl\n\n# Some tools Automake needs.\nAC_REQUIRE([AM_SANITY_CHECK])dnl\nAC_REQUIRE([AC_ARG_PROGRAM])dnl\nAM_MISSING_PROG([ACLOCAL], [aclocal-${am__api_version}])\nAM_MISSING_PROG([AUTOCONF], [autoconf])\nAM_MISSING_PROG([AUTOMAKE], [automake-${am__api_version}])\nAM_MISSING_PROG([AUTOHEADER], [autoheader])\nAM_MISSING_PROG([MAKEINFO], [makeinfo])\nAC_REQUIRE([AM_PROG_INSTALL_SH])dnl\nAC_REQUIRE([AM_PROG_INSTALL_STRIP])dnl\nAC_REQUIRE([AC_PROG_MKDIR_P])dnl\n# For better backward compatibility.  To be removed once Automake 1.9.x\n# dies out for good.  For more background, see:\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>\nAC_SUBST([mkdir_p], ['$(MKDIR_P)'])\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\nAC_REQUIRE([AC_PROG_AWK])dnl\nAC_REQUIRE([AC_PROG_MAKE_SET])dnl\nAC_REQUIRE([AM_SET_LEADING_DOT])dnl\n_AM_IF_OPTION([tar-ustar], [_AM_PROG_TAR([ustar])],\n\t      [_AM_IF_OPTION([tar-pax], [_AM_PROG_TAR([pax])],\n\t\t\t     [_AM_PROG_TAR([v7])])])\n_AM_IF_OPTION([no-dependencies],,\n[AC_PROVIDE_IFELSE([AC_PROG_CC],\n\t\t  [_AM_DEPENDENCIES([CC])],\n\t\t  [m4_define([AC_PROG_CC],\n\t\t\t     m4_defn([AC_PROG_CC])[_AM_DEPENDENCIES([CC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_CXX],\n\t\t  [_AM_DEPENDENCIES([CXX])],\n\t\t  [m4_define([AC_PROG_CXX],\n\t\t\t     m4_defn([AC_PROG_CXX])[_AM_DEPENDENCIES([CXX])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJC],\n\t\t  [_AM_DEPENDENCIES([OBJC])],\n\t\t  [m4_define([AC_PROG_OBJC],\n\t\t\t     m4_defn([AC_PROG_OBJC])[_AM_DEPENDENCIES([OBJC])])])dnl\nAC_PROVIDE_IFELSE([AC_PROG_OBJCXX],\n\t\t  [_AM_DEPENDENCIES([OBJCXX])],\n\t\t  [m4_define([AC_PROG_OBJCXX],\n\t\t\t     m4_defn([AC_PROG_OBJCXX])[_AM_DEPENDENCIES([OBJCXX])])])dnl\n])\nAC_REQUIRE([AM_SILENT_RULES])dnl\ndnl The testsuite driver may need to know about EXEEXT, so add the\ndnl 'am__EXEEXT' conditional if _AM_COMPILER_EXEEXT was seen.  This\ndnl macro is hooked onto _AC_COMPILER_EXEEXT early, see below.\nAC_CONFIG_COMMANDS_PRE(dnl\n[m4_provide_if([_AM_COMPILER_EXEEXT],\n  [AM_CONDITIONAL([am__EXEEXT], [test -n \"$EXEEXT\"])])])dnl\n\n# POSIX will say in a future version that running \"rm -f\" with no argument\n# is OK; and we want to be able to make that assumption in our Makefile\n# recipes.  So use an aggressive probe to check that the usage we want is\n# actually supported \"in the wild\" to an acceptable degree.\n# See automake bug#10828.\n# To make any issue more visible, cause the running configure to be aborted\n# by default if the 'rm' program in use doesn't match our expectations; the\n# user can still override this though.\nif rm -f && rm -fr && rm -rf; then : OK; else\n  cat >&2 <<'END'\nOops!\n\nYour 'rm' program seems unable to run without file operands specified\non the command line, even when the '-f' option is present.  This is contrary\nto the behaviour of most rm programs out there, and not conforming with\nthe upcoming POSIX standard: <http://austingroupbugs.net/view.php?id=542>\n\nPlease tell bug-automake@gnu.org about your system, including the value\nof your $PATH and any error possibly output before this message.  This\ncan help us improve future automake versions.\n\nEND\n  if test x\"$ACCEPT_INFERIOR_RM_PROGRAM\" = x\"yes\"; then\n    echo 'Configuration will proceed anyway, since you have set the' >&2\n    echo 'ACCEPT_INFERIOR_RM_PROGRAM variable to \"yes\"' >&2\n    echo >&2\n  else\n    cat >&2 <<'END'\nAborting the configuration process, to ensure you take notice of the issue.\n\nYou can download and install GNU coreutils to get an 'rm' implementation\nthat behaves properly: <http://www.gnu.org/software/coreutils/>.\n\nIf you want to complete the configuration process using your problematic\n'rm' anyway, export the environment variable ACCEPT_INFERIOR_RM_PROGRAM\nto \"yes\", and re-run configure.\n\nEND\n    AC_MSG_ERROR([Your 'rm' program is bad, sorry.])\n  fi\nfi\n])\n\ndnl Hook into '_AC_COMPILER_EXEEXT' early to learn its expansion.  Do not\ndnl add the conditional right here, as _AC_COMPILER_EXEEXT may be further\ndnl mangled by Autoconf and run in a shell conditional statement.\nm4_define([_AC_COMPILER_EXEEXT],\nm4_defn([_AC_COMPILER_EXEEXT])[m4_provide([_AM_COMPILER_EXEEXT])])\n\n# When config.status generates a header, we must update the stamp-h file.\n# This file resides in the same directory as the config header\n# that is generated.  The stamp files are numbered to have different names.\n\n# Autoconf calls _AC_AM_CONFIG_HEADER_HOOK (when defined) in the\n# loop where config.status creates the headers, so we can generate\n# our stamp files there.\nAC_DEFUN([_AC_AM_CONFIG_HEADER_HOOK],\n[# Compute $1's index in $config_headers.\n_am_arg=$1\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $_am_arg | $_am_arg:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $_am_arg\" >`AS_DIRNAME([\"$_am_arg\"])`/stamp-h[]$_am_stamp_count])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_SH\n# ------------------\n# Define $install_sh.\nAC_DEFUN([AM_PROG_INSTALL_SH],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nif test x\"${install_sh}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n  *)\n    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n  esac\nfi\nAC_SUBST([install_sh])])\n\n# Copyright (C) 2003-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# Check whether the underlying file-system supports filenames\n# with a leading dot.  For instance MS-DOS doesn't.\nAC_DEFUN([AM_SET_LEADING_DOT],\n[rm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\nAC_SUBST([am__leading_dot])])\n\n# Add --enable-maintainer-mode option to configure.         -*- Autoconf -*-\n# From Jim Meyering\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MAINTAINER_MODE([DEFAULT-MODE])\n# ----------------------------------\n# Control maintainer-specific portions of Makefiles.\n# Default is to disable them, unless 'enable' is passed literally.\n# For symmetry, 'disable' may be passed as well.  Anyway, the user\n# can override the default with the --enable/--disable switch.\nAC_DEFUN([AM_MAINTAINER_MODE],\n[m4_case(m4_default([$1], [disable]),\n       [enable], [m4_define([am_maintainer_other], [disable])],\n       [disable], [m4_define([am_maintainer_other], [enable])],\n       [m4_define([am_maintainer_other], [enable])\n        m4_warn([syntax], [unexpected argument to AM@&t@_MAINTAINER_MODE: $1])])\nAC_MSG_CHECKING([whether to enable maintainer-specific portions of Makefiles])\n  dnl maintainer-mode's default is 'disable' unless 'enable' is passed\n  AC_ARG_ENABLE([maintainer-mode],\n    [AS_HELP_STRING([--]am_maintainer_other[-maintainer-mode],\n      am_maintainer_other[ make rules and dependencies not useful\n      (and sometimes confusing) to the casual installer])],\n    [USE_MAINTAINER_MODE=$enableval],\n    [USE_MAINTAINER_MODE=]m4_if(am_maintainer_other, [enable], [no], [yes]))\n  AC_MSG_RESULT([$USE_MAINTAINER_MODE])\n  AM_CONDITIONAL([MAINTAINER_MODE], [test $USE_MAINTAINER_MODE = yes])\n  MAINT=$MAINTAINER_MODE_TRUE\n  AC_SUBST([MAINT])dnl\n]\n)\n\n# Check to see how 'make' treats includes.\t            -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MAKE_INCLUDE()\n# -----------------\n# Check to see how make treats includes.\nAC_DEFUN([AM_MAKE_INCLUDE],\n[am_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo this is the am__doit target\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\nAC_MSG_CHECKING([for style of include used by $am_make])\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# Ignore all kinds of additional output from 'make'.\ncase `$am_make -s -f confmf 2> /dev/null` in #(\n*the\\ am__doit\\ target*)\n  am__include=include\n  am__quote=\n  _am_result=GNU\n  ;;\nesac\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   case `$am_make -s -f confmf 2> /dev/null` in #(\n   *the\\ am__doit\\ target*)\n     am__include=.include\n     am__quote=\"\\\"\"\n     _am_result=BSD\n     ;;\n   esac\nfi\nAC_SUBST([am__include])\nAC_SUBST([am__quote])\nAC_MSG_RESULT([$_am_result])\nrm -f confinc confmf\n])\n\n# Fake the existence of programs that GNU maintainers use.  -*- Autoconf -*-\n\n# Copyright (C) 1997-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_MISSING_PROG(NAME, PROGRAM)\n# ------------------------------\nAC_DEFUN([AM_MISSING_PROG],\n[AC_REQUIRE([AM_MISSING_HAS_RUN])\n$1=${$1-\"${am_missing_run}$2\"}\nAC_SUBST($1)])\n\n# AM_MISSING_HAS_RUN\n# ------------------\n# Define MISSING if not defined so far and test if it is modern enough.\n# If it is, set am_missing_run to use it, otherwise, to nothing.\nAC_DEFUN([AM_MISSING_HAS_RUN],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([missing])dnl\nif test x\"${MISSING+set}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n  *)\n    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n  esac\nfi\n# Use eval to expand $SHELL\nif eval \"$MISSING --is-lightweight\"; then\n  am_missing_run=\"$MISSING \"\nelse\n  am_missing_run=\n  AC_MSG_WARN(['missing' script is too old or missing])\nfi\n])\n\n# Helper functions for option handling.                     -*- Autoconf -*-\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_MANGLE_OPTION(NAME)\n# -----------------------\nAC_DEFUN([_AM_MANGLE_OPTION],\n[[_AM_OPTION_]m4_bpatsubst($1, [[^a-zA-Z0-9_]], [_])])\n\n# _AM_SET_OPTION(NAME)\n# --------------------\n# Set option NAME.  Presently that only means defining a flag for this option.\nAC_DEFUN([_AM_SET_OPTION],\n[m4_define(_AM_MANGLE_OPTION([$1]), [1])])\n\n# _AM_SET_OPTIONS(OPTIONS)\n# ------------------------\n# OPTIONS is a space-separated list of Automake options.\nAC_DEFUN([_AM_SET_OPTIONS],\n[m4_foreach_w([_AM_Option], [$1], [_AM_SET_OPTION(_AM_Option)])])\n\n# _AM_IF_OPTION(OPTION, IF-SET, [IF-NOT-SET])\n# -------------------------------------------\n# Execute IF-SET if OPTION is set, IF-NOT-SET otherwise.\nAC_DEFUN([_AM_IF_OPTION],\n[m4_ifset(_AM_MANGLE_OPTION([$1]), [$2], [$3])])\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_PROG_CC_C_O\n# ---------------\n# Like AC_PROG_CC_C_O, but changed for automake.  We rewrite AC_PROG_CC\n# to automatically call this.\nAC_DEFUN([_AM_PROG_CC_C_O],\n[AC_REQUIRE([AM_AUX_DIR_EXPAND])dnl\nAC_REQUIRE_AUX_FILE([compile])dnl\nAC_LANG_PUSH([C])dnl\nAC_CACHE_CHECK(\n  [whether $CC understands -c and -o together],\n  [am_cv_prog_cc_c_o],\n  [AC_LANG_CONFTEST([AC_LANG_PROGRAM([])])\n  # Make sure it works both with $CC and with simple cc.\n  # Following AC_PROG_CC_C_O, we do the test twice because some\n  # compilers refuse to overwrite an existing .o file with -o,\n  # though they will create one.\n  am_cv_prog_cc_c_o=yes\n  for am_i in 1 2; do\n    if AM_RUN_LOG([$CC -c conftest.$ac_ext -o conftest2.$ac_objext]) \\\n         && test -f conftest2.$ac_objext; then\n      : OK\n    else\n      am_cv_prog_cc_c_o=no\n      break\n    fi\n  done\n  rm -f core conftest*\n  unset am_i])\nif test \"$am_cv_prog_cc_c_o\" != yes; then\n   # Losing compiler, so override with the script.\n   # FIXME: It is wrong to rewrite CC.\n   # But if we don't then we get into trouble of one sort or another.\n   # A longer-term fix would be to have automake use am__CC in this case,\n   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n   CC=\"$am_aux_dir/compile $CC\"\nfi\nAC_LANG_POP([C])])\n\n# For backward compatibility.\nAC_DEFUN_ONCE([AM_PROG_CC_C_O], [AC_REQUIRE([AC_PROG_CC])])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_RUN_LOG(COMMAND)\n# -------------------\n# Run COMMAND, save the exit status in ac_status, and log it.\n# (This has been adapted from Autoconf's _AC_RUN_LOG macro.)\nAC_DEFUN([AM_RUN_LOG],\n[{ echo \"$as_me:$LINENO: $1\" >&AS_MESSAGE_LOG_FD\n   ($1) >&AS_MESSAGE_LOG_FD 2>&AS_MESSAGE_LOG_FD\n   ac_status=$?\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&AS_MESSAGE_LOG_FD\n   (exit $ac_status); }])\n\n# Check to make sure that the build environment is sane.    -*- Autoconf -*-\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SANITY_CHECK\n# ---------------\nAC_DEFUN([AM_SANITY_CHECK],\n[AC_MSG_CHECKING([whether build environment is sane])\n# Reject unsafe characters in $srcdir or the absolute working directory\n# name.  Accept space and tab only in the latter.\nam_lf='\n'\ncase `pwd` in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]]*)\n    AC_MSG_ERROR([unsafe absolute working directory name]);;\nesac\ncase $srcdir in\n  *[[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]]*)\n    AC_MSG_ERROR([unsafe srcdir value: '$srcdir']);;\nesac\n\n# Do 'set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   am_has_slept=no\n   for am_try in 1 2; do\n     echo \"timestamp, slept: $am_has_slept\" > conftest.file\n     set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n     if test \"$[*]\" = \"X\"; then\n\t# -L didn't work.\n\tset X `ls -t \"$srcdir/configure\" conftest.file`\n     fi\n     if test \"$[*]\" != \"X $srcdir/configure conftest.file\" \\\n\t&& test \"$[*]\" != \"X conftest.file $srcdir/configure\"; then\n\n\t# If neither matched, then we have a broken ls.  This can happen\n\t# if, for instance, CONFIG_SHELL is bash and it inherits a\n\t# broken ls alias from the environment.  This has actually\n\t# happened.  Such a system could not be considered \"sane\".\n\tAC_MSG_ERROR([ls -t appears to fail.  Make sure there is not a broken\n  alias in your environment])\n     fi\n     if test \"$[2]\" = conftest.file || test $am_try -eq 2; then\n       break\n     fi\n     # Just in case.\n     sleep 1\n     am_has_slept=yes\n   done\n   test \"$[2]\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   AC_MSG_ERROR([newly created file is older than distributed files!\nCheck your system clock])\nfi\nAC_MSG_RESULT([yes])\n# If we didn't sleep, we still need to ensure time stamps of config.status and\n# generated files are strictly newer.\nam_sleep_pid=\nif grep 'slept: no' conftest.file >/dev/null 2>&1; then\n  ( sleep 1 ) &\n  am_sleep_pid=$!\nfi\nAC_CONFIG_COMMANDS_PRE(\n  [AC_MSG_CHECKING([that generated files are newer than configure])\n   if test -n \"$am_sleep_pid\"; then\n     # Hide warnings about reused PIDs.\n     wait $am_sleep_pid 2>/dev/null\n   fi\n   AC_MSG_RESULT([done])])\nrm -f conftest.file\n])\n\n# Copyright (C) 2009-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_SILENT_RULES([DEFAULT])\n# --------------------------\n# Enable less verbose build rules; with the default set to DEFAULT\n# (\"yes\" being less verbose, \"no\" or empty being verbose).\nAC_DEFUN([AM_SILENT_RULES],\n[AC_ARG_ENABLE([silent-rules], [dnl\nAS_HELP_STRING(\n  [--enable-silent-rules],\n  [less verbose build output (undo: \"make V=1\")])\nAS_HELP_STRING(\n  [--disable-silent-rules],\n  [verbose build output (undo: \"make V=0\")])dnl\n])\ncase $enable_silent_rules in @%:@ (((\n  yes) AM_DEFAULT_VERBOSITY=0;;\n   no) AM_DEFAULT_VERBOSITY=1;;\n    *) AM_DEFAULT_VERBOSITY=m4_if([$1], [yes], [0], [1]);;\nesac\ndnl\ndnl A few 'make' implementations (e.g., NonStop OS and NextStep)\ndnl do not support nested variable expansions.\ndnl See automake bug#9928 and bug#10237.\nam_make=${MAKE-make}\nAC_CACHE_CHECK([whether $am_make supports nested variables],\n   [am_cv_make_support_nested_variables],\n   [if AS_ECHO([['TRUE=$(BAR$(V))\nBAR0=false\nBAR1=true\nV=1\nam__doit:\n\t@$(TRUE)\n.PHONY: am__doit']]) | $am_make -f - >/dev/null 2>&1; then\n  am_cv_make_support_nested_variables=yes\nelse\n  am_cv_make_support_nested_variables=no\nfi])\nif test $am_cv_make_support_nested_variables = yes; then\n  dnl Using '$V' instead of '$(V)' breaks IRIX make.\n  AM_V='$(V)'\n  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nelse\n  AM_V=$AM_DEFAULT_VERBOSITY\n  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY\nfi\nAC_SUBST([AM_V])dnl\nAM_SUBST_NOTMAKE([AM_V])dnl\nAC_SUBST([AM_DEFAULT_V])dnl\nAM_SUBST_NOTMAKE([AM_DEFAULT_V])dnl\nAC_SUBST([AM_DEFAULT_VERBOSITY])dnl\nAM_BACKSLASH='\\'\nAC_SUBST([AM_BACKSLASH])dnl\n_AM_SUBST_NOTMAKE([AM_BACKSLASH])dnl\n])\n\n# Copyright (C) 2001-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# AM_PROG_INSTALL_STRIP\n# ---------------------\n# One issue with vendor 'install' (even GNU) is that you can't\n# specify the program used to strip binaries.  This is especially\n# annoying in cross-compiling environments, where the build's strip\n# is unlikely to handle the host's binaries.\n# Fortunately install-sh will honor a STRIPPROG variable, so we\n# always use install-sh in \"make install-strip\", and initialize\n# STRIPPROG with the value of the STRIP variable (set by the user).\nAC_DEFUN([AM_PROG_INSTALL_STRIP],\n[AC_REQUIRE([AM_PROG_INSTALL_SH])dnl\n# Installed binaries are usually stripped using 'strip' when the user\n# run \"make install-strip\".  However 'strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the 'STRIP' environment variable to overrule this program.\ndnl Don't test for $cross_compiling = yes, because it might be 'maybe'.\nif test \"$cross_compiling\" != no; then\n  AC_CHECK_TOOL([STRIP], [strip], :)\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\nAC_SUBST([INSTALL_STRIP_PROGRAM])])\n\n# Copyright (C) 2006-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_SUBST_NOTMAKE(VARIABLE)\n# ---------------------------\n# Prevent Automake from outputting VARIABLE = @VARIABLE@ in Makefile.in.\n# This macro is traced by Automake.\nAC_DEFUN([_AM_SUBST_NOTMAKE])\n\n# AM_SUBST_NOTMAKE(VARIABLE)\n# --------------------------\n# Public sister of _AM_SUBST_NOTMAKE.\nAC_DEFUN([AM_SUBST_NOTMAKE], [_AM_SUBST_NOTMAKE($@)])\n\n# Check how to create a tarball.                            -*- Autoconf -*-\n\n# Copyright (C) 2004-2013 Free Software Foundation, Inc.\n#\n# This file is free software; the Free Software Foundation\n# gives unlimited permission to copy and/or distribute it,\n# with or without modifications, as long as this notice is preserved.\n\n# _AM_PROG_TAR(FORMAT)\n# --------------------\n# Check how to create a tarball in format FORMAT.\n# FORMAT should be one of 'v7', 'ustar', or 'pax'.\n#\n# Substitute a variable $(am__tar) that is a command\n# writing to stdout a FORMAT-tarball containing the directory\n# $tardir.\n#     tardir=directory && $(am__tar) > result.tar\n#\n# Substitute a variable $(am__untar) that extract such\n# a tarball read from stdin.\n#     $(am__untar) < result.tar\n#\nAC_DEFUN([_AM_PROG_TAR],\n[# Always define AMTAR for backward compatibility.  Yes, it's still used\n# in the wild :-(  We should find a proper way to deprecate it ...\nAC_SUBST([AMTAR], ['$${TAR-tar}'])\n\n# We'll loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar m4_if([$1], [ustar], [plaintar]) pax cpio none'\n\nm4_if([$1], [v7],\n  [am__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'],\n\n  [m4_case([$1],\n    [ustar],\n     [# The POSIX 1988 'ustar' format is defined with fixed-size fields.\n      # There is notably a 21 bits limit for the UID and the GID.  In fact,\n      # the 'pax' utility can hang on bigger UID/GID (see automake bug#8343\n      # and bug#13588).\n      am_max_uid=2097151 # 2^21 - 1\n      am_max_gid=$am_max_uid\n      # The $UID and $GID variables are not portable, so we need to resort\n      # to the POSIX-mandated id(1) utility.  Errors in the 'id' calls\n      # below are definitely unexpected, so allow the users to see them\n      # (that is, avoid stderr redirection).\n      am_uid=`id -u || echo unknown`\n      am_gid=`id -g || echo unknown`\n      AC_MSG_CHECKING([whether UID '$am_uid' is supported by ustar format])\n      if test $am_uid -le $am_max_uid; then\n         AC_MSG_RESULT([yes])\n      else\n         AC_MSG_RESULT([no])\n         _am_tools=none\n      fi\n      AC_MSG_CHECKING([whether GID '$am_gid' is supported by ustar format])\n      if test $am_gid -le $am_max_gid; then\n         AC_MSG_RESULT([yes])\n      else\n        AC_MSG_RESULT([no])\n        _am_tools=none\n      fi],\n\n  [pax],\n    [],\n\n  [m4_fatal([Unknown tar format])])\n\n  AC_MSG_CHECKING([how to create a $1 tar archive])\n\n  # Go ahead even if we have the value already cached.  We do so because we\n  # need to set the values for the 'am__tar' and 'am__untar' variables.\n  _am_tools=${am_cv_prog_tar_$1-$_am_tools}\n\n  for _am_tool in $_am_tools; do\n    case $_am_tool in\n    gnutar)\n      for _am_tar in tar gnutar gtar; do\n        AM_RUN_LOG([$_am_tar --version]) && break\n      done\n      am__tar=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$$tardir\"'\n      am__tar_=\"$_am_tar --format=m4_if([$1], [pax], [posix], [$1]) -chf - \"'\"$tardir\"'\n      am__untar=\"$_am_tar -xf -\"\n      ;;\n    plaintar)\n      # Must skip GNU tar: if it does not support --format= it doesn't create\n      # ustar tarball either.\n      (tar --version) >/dev/null 2>&1 && continue\n      am__tar='tar chf - \"$$tardir\"'\n      am__tar_='tar chf - \"$tardir\"'\n      am__untar='tar xf -'\n      ;;\n    pax)\n      am__tar='pax -L -x $1 -w \"$$tardir\"'\n      am__tar_='pax -L -x $1 -w \"$tardir\"'\n      am__untar='pax -r'\n      ;;\n    cpio)\n      am__tar='find \"$$tardir\" -print | cpio -o -H $1 -L'\n      am__tar_='find \"$tardir\" -print | cpio -o -H $1 -L'\n      am__untar='cpio -i -H $1 -d'\n      ;;\n    none)\n      am__tar=false\n      am__tar_=false\n      am__untar=false\n      ;;\n    esac\n\n    # If the value was cached, stop now.  We just wanted to have am__tar\n    # and am__untar set.\n    test -n \"${am_cv_prog_tar_$1}\" && break\n\n    # tar/untar a dummy directory, and stop if the command works.\n    rm -rf conftest.dir\n    mkdir conftest.dir\n    echo GrepMe > conftest.dir/file\n    AM_RUN_LOG([tardir=conftest.dir && eval $am__tar_ >conftest.tar])\n    rm -rf conftest.dir\n    if test -s conftest.tar; then\n      AM_RUN_LOG([$am__untar <conftest.tar])\n      AM_RUN_LOG([cat conftest.dir/file])\n      grep GrepMe conftest.dir/file >/dev/null 2>&1 && break\n    fi\n  done\n  rm -rf conftest.dir\n\n  AC_CACHE_VAL([am_cv_prog_tar_$1], [am_cv_prog_tar_$1=$_am_tool])\n  AC_MSG_RESULT([$am_cv_prog_tar_$1])])\n\nAC_SUBST([am__tar])\nAC_SUBST([am__untar])\n]) # _AM_PROG_TAR\n\n"
        },
        {
          "name": "autogen.sh",
          "type": "blob",
          "size": 0.048828125,
          "content": "#!/bin/sh\n\nautoreconf --install --symlink --force\n"
        },
        {
          "name": "compile",
          "type": "blob",
          "size": 7.1611328125,
          "content": "#! /bin/sh\n# Wrapper for compilers which do not understand '-c -o'.\n\nscriptversion=2012-10-14.11; # UTC\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n# Written by Tom Tromey <tromey@cygnus.com>.\n#\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# This file is maintained in Automake, please report\n# bugs to <bug-automake@gnu.org> or send patches to\n# <automake-patches@gnu.org>.\n\nnl='\n'\n\n# We need space, tab and new line, in precisely that order.  Quoting is\n# there to prevent tools from complaining about whitespace usage.\nIFS=\" \"\"\t$nl\"\n\nfile_conv=\n\n# func_file_conv build_file lazy\n# Convert a $build file to $host form and store it in $file\n# Currently only supports Windows hosts. If the determined conversion\n# type is listed in (the comma separated) LAZY, no conversion will\n# take place.\nfunc_file_conv ()\n{\n  file=$1\n  case $file in\n    / | /[!/]*) # absolute file, and not a UNC file\n      if test -z \"$file_conv\"; then\n\t# lazily determine how to convert abs files\n\tcase `uname -s` in\n\t  MINGW*)\n\t    file_conv=mingw\n\t    ;;\n\t  CYGWIN*)\n\t    file_conv=cygwin\n\t    ;;\n\t  *)\n\t    file_conv=wine\n\t    ;;\n\tesac\n      fi\n      case $file_conv/,$2, in\n\t*,$file_conv,*)\n\t  ;;\n\tmingw/*)\n\t  file=`cmd //C echo \"$file \" | sed -e 's/\"\\(.*\\) \" *$/\\1/'`\n\t  ;;\n\tcygwin/*)\n\t  file=`cygpath -m \"$file\" || echo \"$file\"`\n\t  ;;\n\twine/*)\n\t  file=`winepath -w \"$file\" || echo \"$file\"`\n\t  ;;\n      esac\n      ;;\n  esac\n}\n\n# func_cl_dashL linkdir\n# Make cl look for libraries in LINKDIR\nfunc_cl_dashL ()\n{\n  func_file_conv \"$1\"\n  if test -z \"$lib_path\"; then\n    lib_path=$file\n  else\n    lib_path=\"$lib_path;$file\"\n  fi\n  linker_opts=\"$linker_opts -LIBPATH:$file\"\n}\n\n# func_cl_dashl library\n# Do a library search-path lookup for cl\nfunc_cl_dashl ()\n{\n  lib=$1\n  found=no\n  save_IFS=$IFS\n  IFS=';'\n  for dir in $lib_path $LIB\n  do\n    IFS=$save_IFS\n    if $shared && test -f \"$dir/$lib.dll.lib\"; then\n      found=yes\n      lib=$dir/$lib.dll.lib\n      break\n    fi\n    if test -f \"$dir/$lib.lib\"; then\n      found=yes\n      lib=$dir/$lib.lib\n      break\n    fi\n    if test -f \"$dir/lib$lib.a\"; then\n      found=yes\n      lib=$dir/lib$lib.a\n      break\n    fi\n  done\n  IFS=$save_IFS\n\n  if test \"$found\" != yes; then\n    lib=$lib.lib\n  fi\n}\n\n# func_cl_wrapper cl arg...\n# Adjust compile command to suit cl\nfunc_cl_wrapper ()\n{\n  # Assume a capable shell\n  lib_path=\n  shared=:\n  linker_opts=\n  for arg\n  do\n    if test -n \"$eat\"; then\n      eat=\n    else\n      case $1 in\n\t-o)\n\t  # configure might choose to run compile as 'compile cc -o foo foo.c'.\n\t  eat=1\n\t  case $2 in\n\t    *.o | *.[oO][bB][jJ])\n\t      func_file_conv \"$2\"\n\t      set x \"$@\" -Fo\"$file\"\n\t      shift\n\t      ;;\n\t    *)\n\t      func_file_conv \"$2\"\n\t      set x \"$@\" -Fe\"$file\"\n\t      shift\n\t      ;;\n\t  esac\n\t  ;;\n\t-I)\n\t  eat=1\n\t  func_file_conv \"$2\" mingw\n\t  set x \"$@\" -I\"$file\"\n\t  shift\n\t  ;;\n\t-I*)\n\t  func_file_conv \"${1#-I}\" mingw\n\t  set x \"$@\" -I\"$file\"\n\t  shift\n\t  ;;\n\t-l)\n\t  eat=1\n\t  func_cl_dashl \"$2\"\n\t  set x \"$@\" \"$lib\"\n\t  shift\n\t  ;;\n\t-l*)\n\t  func_cl_dashl \"${1#-l}\"\n\t  set x \"$@\" \"$lib\"\n\t  shift\n\t  ;;\n\t-L)\n\t  eat=1\n\t  func_cl_dashL \"$2\"\n\t  ;;\n\t-L*)\n\t  func_cl_dashL \"${1#-L}\"\n\t  ;;\n\t-static)\n\t  shared=false\n\t  ;;\n\t-Wl,*)\n\t  arg=${1#-Wl,}\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for flag in $arg; do\n\t    IFS=\"$save_ifs\"\n\t    linker_opts=\"$linker_opts $flag\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  ;;\n\t-Xlinker)\n\t  eat=1\n\t  linker_opts=\"$linker_opts $2\"\n\t  ;;\n\t-*)\n\t  set x \"$@\" \"$1\"\n\t  shift\n\t  ;;\n\t*.cc | *.CC | *.cxx | *.CXX | *.[cC]++)\n\t  func_file_conv \"$1\"\n\t  set x \"$@\" -Tp\"$file\"\n\t  shift\n\t  ;;\n\t*.c | *.cpp | *.CPP | *.lib | *.LIB | *.Lib | *.OBJ | *.obj | *.[oO])\n\t  func_file_conv \"$1\" mingw\n\t  set x \"$@\" \"$file\"\n\t  shift\n\t  ;;\n\t*)\n\t  set x \"$@\" \"$1\"\n\t  shift\n\t  ;;\n      esac\n    fi\n    shift\n  done\n  if test -n \"$linker_opts\"; then\n    linker_opts=\"-link$linker_opts\"\n  fi\n  exec \"$@\" $linker_opts\n  exit 1\n}\n\neat=\n\ncase $1 in\n  '')\n     echo \"$0: No command.  Try '$0 --help' for more information.\" 1>&2\n     exit 1;\n     ;;\n  -h | --h*)\n    cat <<\\EOF\nUsage: compile [--help] [--version] PROGRAM [ARGS]\n\nWrapper for compilers which do not understand '-c -o'.\nRemove '-o dest.o' from ARGS, run PROGRAM with the remaining\narguments, and rename the output as expected.\n\nIf you are trying to build a whole package this is not the\nright script to run: please start by reading the file 'INSTALL'.\n\nReport bugs to <bug-automake@gnu.org>.\nEOF\n    exit $?\n    ;;\n  -v | --v*)\n    echo \"compile $scriptversion\"\n    exit $?\n    ;;\n  cl | *[/\\\\]cl | cl.exe | *[/\\\\]cl.exe )\n    func_cl_wrapper \"$@\"      # Doesn't return...\n    ;;\nesac\n\nofile=\ncfile=\n\nfor arg\ndo\n  if test -n \"$eat\"; then\n    eat=\n  else\n    case $1 in\n      -o)\n\t# configure might choose to run compile as 'compile cc -o foo foo.c'.\n\t# So we strip '-o arg' only if arg is an object.\n\teat=1\n\tcase $2 in\n\t  *.o | *.obj)\n\t    ofile=$2\n\t    ;;\n\t  *)\n\t    set x \"$@\" -o \"$2\"\n\t    shift\n\t    ;;\n\tesac\n\t;;\n      *.c)\n\tcfile=$1\n\tset x \"$@\" \"$1\"\n\tshift\n\t;;\n      *)\n\tset x \"$@\" \"$1\"\n\tshift\n\t;;\n    esac\n  fi\n  shift\ndone\n\nif test -z \"$ofile\" || test -z \"$cfile\"; then\n  # If no '-o' option was seen then we might have been invoked from a\n  # pattern rule where we don't need one.  That is ok -- this is a\n  # normal compilation that the losing compiler can handle.  If no\n  # '.c' file was seen then we are probably linking.  That is also\n  # ok.\n  exec \"$@\"\nfi\n\n# Name of file we expect compiler to create.\ncofile=`echo \"$cfile\" | sed 's|^.*[\\\\/]||; s|^[a-zA-Z]:||; s/\\.c$/.o/'`\n\n# Create the lock directory.\n# Note: use '[/\\\\:.-]' here to ensure that we don't use the same name\n# that we are using for the .o file.  Also, base the name on the expected\n# object file name, since that is what matters with a parallel build.\nlockdir=`echo \"$cofile\" | sed -e 's|[/\\\\:.-]|_|g'`.d\nwhile true; do\n  if mkdir \"$lockdir\" >/dev/null 2>&1; then\n    break\n  fi\n  sleep 1\ndone\n# FIXME: race condition here if user kills between mkdir and trap.\ntrap \"rmdir '$lockdir'; exit 1\" 1 2 15\n\n# Run the compile.\n\"$@\"\nret=$?\n\nif test -f \"$cofile\"; then\n  test \"$cofile\" = \"$ofile\" || mv \"$cofile\" \"$ofile\"\nelif test -f \"${cofile}bj\"; then\n  test \"${cofile}bj\" = \"$ofile\" || mv \"${cofile}bj\" \"$ofile\"\nfi\n\nrmdir \"$lockdir\"\nexit $ret\n\n# Local Variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "config.guess",
          "type": "blob",
          "size": 41.8515625,
          "content": "#! /bin/sh\n# Attempt to guess a canonical system name.\n#   Copyright 1992-2014 Free Software Foundation, Inc.\n\ntimestamp='2014-03-23'\n\n# This file is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <http://www.gnu.org/licenses/>.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n#\n# Originally written by Per Bothner.\n#\n# You can get the latest version of this script from:\n# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\n#\n# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION]\n\nOutput the configuration name of the system \\`$me' is run on.\n\nOperation modes:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.guess ($timestamp)\n\nOriginally written by Per Bothner.\nCopyright 1992-2014 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit ;;\n    --version | -v )\n       echo \"$version\" ; exit ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\" >&2\n       exit 1 ;;\n    * )\n       break ;;\n  esac\ndone\n\nif test $# != 0; then\n  echo \"$me: too many arguments$help\" >&2\n  exit 1\nfi\n\ntrap 'exit 1' 1 2 15\n\n# CC_FOR_BUILD -- compiler used by this script. Note that the use of a\n# compiler to aid in system detection is discouraged as it requires\n# temporary files to be created and, as you can see below, it is a\n# headache to deal with in a portable fashion.\n\n# Historically, `CC_FOR_BUILD' used to be named `HOST_CC'. We still\n# use `HOST_CC' if defined, but it is deprecated.\n\n# Portable tmp directory creation inspired by the Autoconf team.\n\nset_cc_for_build='\ntrap \"exitcode=\\$?; (rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null) && exit \\$exitcode\" 0 ;\ntrap \"rm -f \\$tmpfiles 2>/dev/null; rmdir \\$tmp 2>/dev/null; exit 1\" 1 2 13 15 ;\n: ${TMPDIR=/tmp} ;\n { tmp=`(umask 077 && mktemp -d \"$TMPDIR/cgXXXXXX\") 2>/dev/null` && test -n \"$tmp\" && test -d \"$tmp\" ; } ||\n { test -n \"$RANDOM\" && tmp=$TMPDIR/cg$$-$RANDOM && (umask 077 && mkdir $tmp) ; } ||\n { tmp=$TMPDIR/cg-$$ && (umask 077 && mkdir $tmp) && echo \"Warning: creating insecure temp directory\" >&2 ; } ||\n { echo \"$me: cannot create a temporary directory in $TMPDIR\" >&2 ; exit 1 ; } ;\ndummy=$tmp/dummy ;\ntmpfiles=\"$dummy.c $dummy.o $dummy.rel $dummy\" ;\ncase $CC_FOR_BUILD,$HOST_CC,$CC in\n ,,)    echo \"int x;\" > $dummy.c ;\n\tfor c in cc gcc c89 c99 ; do\n\t  if ($c -c -o $dummy.o $dummy.c) >/dev/null 2>&1 ; then\n\t     CC_FOR_BUILD=\"$c\"; break ;\n\t  fi ;\n\tdone ;\n\tif test x\"$CC_FOR_BUILD\" = x ; then\n\t  CC_FOR_BUILD=no_compiler_found ;\n\tfi\n\t;;\n ,,*)   CC_FOR_BUILD=$CC ;;\n ,*,*)  CC_FOR_BUILD=$HOST_CC ;;\nesac ; set_cc_for_build= ;'\n\n# This is needed to find uname on a Pyramid OSx when run in the BSD universe.\n# (ghazi@noc.rutgers.edu 1994-08-24)\nif (test -f /.attbin/uname) >/dev/null 2>&1 ; then\n\tPATH=$PATH:/.attbin ; export PATH\nfi\n\nUNAME_MACHINE=`(uname -m) 2>/dev/null` || UNAME_MACHINE=unknown\nUNAME_RELEASE=`(uname -r) 2>/dev/null` || UNAME_RELEASE=unknown\nUNAME_SYSTEM=`(uname -s) 2>/dev/null`  || UNAME_SYSTEM=unknown\nUNAME_VERSION=`(uname -v) 2>/dev/null` || UNAME_VERSION=unknown\n\ncase \"${UNAME_SYSTEM}\" in\nLinux|GNU|GNU/*)\n\t# If the system lacks a compiler, then just pick glibc.\n\t# We could probably try harder.\n\tLIBC=gnu\n\n\teval $set_cc_for_build\n\tcat <<-EOF > $dummy.c\n\t#include <features.h>\n\t#if defined(__UCLIBC__)\n\tLIBC=uclibc\n\t#elif defined(__dietlibc__)\n\tLIBC=dietlibc\n\t#else\n\tLIBC=gnu\n\t#endif\n\tEOF\n\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^LIBC' | sed 's, ,,g'`\n\t;;\nesac\n\n# Note: order is significant - the case branches are not exclusive.\n\ncase \"${UNAME_MACHINE}:${UNAME_SYSTEM}:${UNAME_RELEASE}:${UNAME_VERSION}\" in\n    *:NetBSD:*:*)\n\t# NetBSD (nbsd) targets should (where applicable) match one or\n\t# more of the tuples: *-*-netbsdelf*, *-*-netbsdaout*,\n\t# *-*-netbsdecoff* and *-*-netbsd*.  For targets that recently\n\t# switched to ELF, *-*-netbsd* would select the old\n\t# object file format.  This provides both forward\n\t# compatibility and a consistent mechanism for selecting the\n\t# object file format.\n\t#\n\t# Note: NetBSD doesn't particularly care about the vendor\n\t# portion of the name.  We always set it to \"unknown\".\n\tsysctl=\"sysctl -n hw.machine_arch\"\n\tUNAME_MACHINE_ARCH=`(/sbin/$sysctl 2>/dev/null || \\\n\t    /usr/sbin/$sysctl 2>/dev/null || echo unknown)`\n\tcase \"${UNAME_MACHINE_ARCH}\" in\n\t    armeb) machine=armeb-unknown ;;\n\t    arm*) machine=arm-unknown ;;\n\t    sh3el) machine=shl-unknown ;;\n\t    sh3eb) machine=sh-unknown ;;\n\t    sh5el) machine=sh5le-unknown ;;\n\t    *) machine=${UNAME_MACHINE_ARCH}-unknown ;;\n\tesac\n\t# The Operating System including object format, if it has switched\n\t# to ELF recently, or will in the future.\n\tcase \"${UNAME_MACHINE_ARCH}\" in\n\t    arm*|i386|m68k|ns32k|sh3*|sparc|vax)\n\t\teval $set_cc_for_build\n\t\tif echo __ELF__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t\t| grep -q __ELF__\n\t\tthen\n\t\t    # Once all utilities can be ECOFF (netbsdecoff) or a.out (netbsdaout).\n\t\t    # Return netbsd for either.  FIX?\n\t\t    os=netbsd\n\t\telse\n\t\t    os=netbsdelf\n\t\tfi\n\t\t;;\n\t    *)\n\t\tos=netbsd\n\t\t;;\n\tesac\n\t# The OS release\n\t# Debian GNU/NetBSD machines have a different userland, and\n\t# thus, need a distinct triplet. However, they do not need\n\t# kernel version information, so it can be replaced with a\n\t# suitable tag, in the style of linux-gnu.\n\tcase \"${UNAME_VERSION}\" in\n\t    Debian*)\n\t\trelease='-gnu'\n\t\t;;\n\t    *)\n\t\trelease=`echo ${UNAME_RELEASE}|sed -e 's/[-_].*/\\./'`\n\t\t;;\n\tesac\n\t# Since CPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM:\n\t# contains redundant information, the shorter form:\n\t# CPU_TYPE-MANUFACTURER-OPERATING_SYSTEM is used.\n\techo \"${machine}-${os}${release}\"\n\texit ;;\n    *:Bitrig:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/Bitrig.//'`\n\techo ${UNAME_MACHINE_ARCH}-unknown-bitrig${UNAME_RELEASE}\n\texit ;;\n    *:OpenBSD:*:*)\n\tUNAME_MACHINE_ARCH=`arch | sed 's/OpenBSD.//'`\n\techo ${UNAME_MACHINE_ARCH}-unknown-openbsd${UNAME_RELEASE}\n\texit ;;\n    *:ekkoBSD:*:*)\n\techo ${UNAME_MACHINE}-unknown-ekkobsd${UNAME_RELEASE}\n\texit ;;\n    *:SolidBSD:*:*)\n\techo ${UNAME_MACHINE}-unknown-solidbsd${UNAME_RELEASE}\n\texit ;;\n    macppc:MirBSD:*:*)\n\techo powerpc-unknown-mirbsd${UNAME_RELEASE}\n\texit ;;\n    *:MirBSD:*:*)\n\techo ${UNAME_MACHINE}-unknown-mirbsd${UNAME_RELEASE}\n\texit ;;\n    alpha:OSF1:*:*)\n\tcase $UNAME_RELEASE in\n\t*4.0)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $3}'`\n\t\t;;\n\t*5.*)\n\t\tUNAME_RELEASE=`/usr/sbin/sizer -v | awk '{print $4}'`\n\t\t;;\n\tesac\n\t# According to Compaq, /usr/sbin/psrinfo has been available on\n\t# OSF/1 and Tru64 systems produced since 1995.  I hope that\n\t# covers most systems running today.  This code pipes the CPU\n\t# types through head -n 1, so we only detect the type of CPU 0.\n\tALPHA_CPU_TYPE=`/usr/sbin/psrinfo -v | sed -n -e 's/^  The alpha \\(.*\\) processor.*$/\\1/p' | head -n 1`\n\tcase \"$ALPHA_CPU_TYPE\" in\n\t    \"EV4 (21064)\")\n\t\tUNAME_MACHINE=\"alpha\" ;;\n\t    \"EV4.5 (21064)\")\n\t\tUNAME_MACHINE=\"alpha\" ;;\n\t    \"LCA4 (21066/21068)\")\n\t\tUNAME_MACHINE=\"alpha\" ;;\n\t    \"EV5 (21164)\")\n\t\tUNAME_MACHINE=\"alphaev5\" ;;\n\t    \"EV5.6 (21164A)\")\n\t\tUNAME_MACHINE=\"alphaev56\" ;;\n\t    \"EV5.6 (21164PC)\")\n\t\tUNAME_MACHINE=\"alphapca56\" ;;\n\t    \"EV5.7 (21164PC)\")\n\t\tUNAME_MACHINE=\"alphapca57\" ;;\n\t    \"EV6 (21264)\")\n\t\tUNAME_MACHINE=\"alphaev6\" ;;\n\t    \"EV6.7 (21264A)\")\n\t\tUNAME_MACHINE=\"alphaev67\" ;;\n\t    \"EV6.8CB (21264C)\")\n\t\tUNAME_MACHINE=\"alphaev68\" ;;\n\t    \"EV6.8AL (21264B)\")\n\t\tUNAME_MACHINE=\"alphaev68\" ;;\n\t    \"EV6.8CX (21264D)\")\n\t\tUNAME_MACHINE=\"alphaev68\" ;;\n\t    \"EV6.9A (21264/EV69A)\")\n\t\tUNAME_MACHINE=\"alphaev69\" ;;\n\t    \"EV7 (21364)\")\n\t\tUNAME_MACHINE=\"alphaev7\" ;;\n\t    \"EV7.9 (21364A)\")\n\t\tUNAME_MACHINE=\"alphaev79\" ;;\n\tesac\n\t# A Pn.n version is a patched version.\n\t# A Vn.n version is a released version.\n\t# A Tn.n version is a released field test version.\n\t# A Xn.n version is an unreleased experimental baselevel.\n\t# 1.2 uses \"1.2\" for uname -r.\n\techo ${UNAME_MACHINE}-dec-osf`echo ${UNAME_RELEASE} | sed -e 's/^[PVTX]//' | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n\t# Reset EXIT trap before exiting to avoid spurious non-zero exit code.\n\texitcode=$?\n\ttrap '' 0\n\texit $exitcode ;;\n    Alpha\\ *:Windows_NT*:*)\n\t# How do we know it's Interix rather than the generic POSIX subsystem?\n\t# Should we change UNAME_MACHINE based on the output of uname instead\n\t# of the specific Alpha model?\n\techo alpha-pc-interix\n\texit ;;\n    21064:Windows_NT:50:3)\n\techo alpha-dec-winnt3.5\n\texit ;;\n    Amiga*:UNIX_System_V:4.0:*)\n\techo m68k-unknown-sysv4\n\texit ;;\n    *:[Aa]miga[Oo][Ss]:*:*)\n\techo ${UNAME_MACHINE}-unknown-amigaos\n\texit ;;\n    *:[Mm]orph[Oo][Ss]:*:*)\n\techo ${UNAME_MACHINE}-unknown-morphos\n\texit ;;\n    *:OS/390:*:*)\n\techo i370-ibm-openedition\n\texit ;;\n    *:z/VM:*:*)\n\techo s390-ibm-zvmoe\n\texit ;;\n    *:OS400:*:*)\n\techo powerpc-ibm-os400\n\texit ;;\n    arm:RISC*:1.[012]*:*|arm:riscix:1.[012]*:*)\n\techo arm-acorn-riscix${UNAME_RELEASE}\n\texit ;;\n    arm*:riscos:*:*|arm*:RISCOS:*:*)\n\techo arm-unknown-riscos\n\texit ;;\n    SR2?01:HI-UX/MPP:*:* | SR8000:HI-UX/MPP:*:*)\n\techo hppa1.1-hitachi-hiuxmpp\n\texit ;;\n    Pyramid*:OSx*:*:* | MIS*:OSx*:*:* | MIS*:SMP_DC-OSx*:*:*)\n\t# akee@wpdis03.wpafb.af.mil (Earle F. Ake) contributed MIS and NILE.\n\tif test \"`(/bin/universe) 2>/dev/null`\" = att ; then\n\t\techo pyramid-pyramid-sysv3\n\telse\n\t\techo pyramid-pyramid-bsd\n\tfi\n\texit ;;\n    NILE*:*:*:dcosx)\n\techo pyramid-pyramid-svr4\n\texit ;;\n    DRS?6000:unix:4.0:6*)\n\techo sparc-icl-nx6\n\texit ;;\n    DRS?6000:UNIX_SV:4.2*:7* | DRS?6000:isis:4.2*:7*)\n\tcase `/usr/bin/uname -p` in\n\t    sparc) echo sparc-icl-nx7; exit ;;\n\tesac ;;\n    s390x:SunOS:*:*)\n\techo ${UNAME_MACHINE}-ibm-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    sun4H:SunOS:5.*:*)\n\techo sparc-hal-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    sun4*:SunOS:5.*:* | tadpole*:SunOS:5.*:*)\n\techo sparc-sun-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    i86pc:AuroraUX:5.*:* | i86xen:AuroraUX:5.*:*)\n\techo i386-pc-auroraux${UNAME_RELEASE}\n\texit ;;\n    i86pc:SunOS:5.*:* | i86xen:SunOS:5.*:*)\n\teval $set_cc_for_build\n\tSUN_ARCH=\"i386\"\n\t# If there is a compiler, see if it is configured for 64-bit objects.\n\t# Note that the Sun cc does not turn __LP64__ into 1 like gcc does.\n\t# This test works for both compilers.\n\tif [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n\t    if (echo '#ifdef __amd64'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t(CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\tgrep IS_64BIT_ARCH >/dev/null\n\t    then\n\t\tSUN_ARCH=\"x86_64\"\n\t    fi\n\tfi\n\techo ${SUN_ARCH}-pc-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    sun4*:SunOS:6*:*)\n\t# According to config.sub, this is the proper way to canonicalize\n\t# SunOS6.  Hard to guess exactly what SunOS6 will be like, but\n\t# it's likely to be more like Solaris than SunOS4.\n\techo sparc-sun-solaris3`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    sun4*:SunOS:*:*)\n\tcase \"`/usr/bin/arch -k`\" in\n\t    Series*|S4*)\n\t\tUNAME_RELEASE=`uname -v`\n\t\t;;\n\tesac\n\t# Japanese Language versions have a version number like `4.1.3-JL'.\n\techo sparc-sun-sunos`echo ${UNAME_RELEASE}|sed -e 's/-/_/'`\n\texit ;;\n    sun3*:SunOS:*:*)\n\techo m68k-sun-sunos${UNAME_RELEASE}\n\texit ;;\n    sun*:*:4.2BSD:*)\n\tUNAME_RELEASE=`(sed 1q /etc/motd | awk '{print substr($5,1,3)}') 2>/dev/null`\n\ttest \"x${UNAME_RELEASE}\" = \"x\" && UNAME_RELEASE=3\n\tcase \"`/bin/arch`\" in\n\t    sun3)\n\t\techo m68k-sun-sunos${UNAME_RELEASE}\n\t\t;;\n\t    sun4)\n\t\techo sparc-sun-sunos${UNAME_RELEASE}\n\t\t;;\n\tesac\n\texit ;;\n    aushp:SunOS:*:*)\n\techo sparc-auspex-sunos${UNAME_RELEASE}\n\texit ;;\n    # The situation for MiNT is a little confusing.  The machine name\n    # can be virtually everything (everything which is not\n    # \"atarist\" or \"atariste\" at least should have a processor\n    # > m68000).  The system name ranges from \"MiNT\" over \"FreeMiNT\"\n    # to the lowercase version \"mint\" (or \"freemint\").  Finally\n    # the system name \"TOS\" denotes a system which is actually not\n    # MiNT.  But MiNT is downward compatible to TOS, so this should\n    # be no problem.\n    atarist[e]:*MiNT:*:* | atarist[e]:*mint:*:* | atarist[e]:*TOS:*:*)\n\techo m68k-atari-mint${UNAME_RELEASE}\n\texit ;;\n    atari*:*MiNT:*:* | atari*:*mint:*:* | atarist[e]:*TOS:*:*)\n\techo m68k-atari-mint${UNAME_RELEASE}\n\texit ;;\n    *falcon*:*MiNT:*:* | *falcon*:*mint:*:* | *falcon*:*TOS:*:*)\n\techo m68k-atari-mint${UNAME_RELEASE}\n\texit ;;\n    milan*:*MiNT:*:* | milan*:*mint:*:* | *milan*:*TOS:*:*)\n\techo m68k-milan-mint${UNAME_RELEASE}\n\texit ;;\n    hades*:*MiNT:*:* | hades*:*mint:*:* | *hades*:*TOS:*:*)\n\techo m68k-hades-mint${UNAME_RELEASE}\n\texit ;;\n    *:*MiNT:*:* | *:*mint:*:* | *:*TOS:*:*)\n\techo m68k-unknown-mint${UNAME_RELEASE}\n\texit ;;\n    m68k:machten:*:*)\n\techo m68k-apple-machten${UNAME_RELEASE}\n\texit ;;\n    powerpc:machten:*:*)\n\techo powerpc-apple-machten${UNAME_RELEASE}\n\texit ;;\n    RISC*:Mach:*:*)\n\techo mips-dec-mach_bsd4.3\n\texit ;;\n    RISC*:ULTRIX:*:*)\n\techo mips-dec-ultrix${UNAME_RELEASE}\n\texit ;;\n    VAX*:ULTRIX*:*:*)\n\techo vax-dec-ultrix${UNAME_RELEASE}\n\texit ;;\n    2020:CLIX:*:* | 2430:CLIX:*:*)\n\techo clipper-intergraph-clix${UNAME_RELEASE}\n\texit ;;\n    mips:*:*:UMIPS | mips:*:*:RISCos)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n#ifdef __cplusplus\n#include <stdio.h>  /* for printf() prototype */\n\tint main (int argc, char *argv[]) {\n#else\n\tint main (argc, argv) int argc; char *argv[]; {\n#endif\n\t#if defined (host_mips) && defined (MIPSEB)\n\t#if defined (SYSTYPE_SYSV)\n\t  printf (\"mips-mips-riscos%ssysv\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_SVR4)\n\t  printf (\"mips-mips-riscos%ssvr4\\n\", argv[1]); exit (0);\n\t#endif\n\t#if defined (SYSTYPE_BSD43) || defined(SYSTYPE_BSD)\n\t  printf (\"mips-mips-riscos%sbsd\\n\", argv[1]); exit (0);\n\t#endif\n\t#endif\n\t  exit (-1);\n\t}\nEOF\n\t$CC_FOR_BUILD -o $dummy $dummy.c &&\n\t  dummyarg=`echo \"${UNAME_RELEASE}\" | sed -n 's/\\([0-9]*\\).*/\\1/p'` &&\n\t  SYSTEM_NAME=`$dummy $dummyarg` &&\n\t    { echo \"$SYSTEM_NAME\"; exit; }\n\techo mips-mips-riscos${UNAME_RELEASE}\n\texit ;;\n    Motorola:PowerMAX_OS:*:*)\n\techo powerpc-motorola-powermax\n\texit ;;\n    Motorola:*:4.3:PL8-*)\n\techo powerpc-harris-powermax\n\texit ;;\n    Night_Hawk:*:*:PowerMAX_OS | Synergy:PowerMAX_OS:*:*)\n\techo powerpc-harris-powermax\n\texit ;;\n    Night_Hawk:Power_UNIX:*:*)\n\techo powerpc-harris-powerunix\n\texit ;;\n    m88k:CX/UX:7*:*)\n\techo m88k-harris-cxux7\n\texit ;;\n    m88k:*:4*:R4*)\n\techo m88k-motorola-sysv4\n\texit ;;\n    m88k:*:3*:R3*)\n\techo m88k-motorola-sysv3\n\texit ;;\n    AViiON:dgux:*:*)\n\t# DG/UX returns AViiON for all architectures\n\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n\tif [ $UNAME_PROCESSOR = mc88100 ] || [ $UNAME_PROCESSOR = mc88110 ]\n\tthen\n\t    if [ ${TARGET_BINARY_INTERFACE}x = m88kdguxelfx ] || \\\n\t       [ ${TARGET_BINARY_INTERFACE}x = x ]\n\t    then\n\t\techo m88k-dg-dgux${UNAME_RELEASE}\n\t    else\n\t\techo m88k-dg-dguxbcs${UNAME_RELEASE}\n\t    fi\n\telse\n\t    echo i586-dg-dgux${UNAME_RELEASE}\n\tfi\n\texit ;;\n    M88*:DolphinOS:*:*)\t# DolphinOS (SVR3)\n\techo m88k-dolphin-sysv3\n\texit ;;\n    M88*:*:R3*:*)\n\t# Delta 88k system running SVR3\n\techo m88k-motorola-sysv3\n\texit ;;\n    XD88*:*:*:*) # Tektronix XD88 system running UTekV (SVR3)\n\techo m88k-tektronix-sysv3\n\texit ;;\n    Tek43[0-9][0-9]:UTek:*:*) # Tektronix 4300 system running UTek (BSD)\n\techo m68k-tektronix-bsd\n\texit ;;\n    *:IRIX*:*:*)\n\techo mips-sgi-irix`echo ${UNAME_RELEASE}|sed -e 's/-/_/g'`\n\texit ;;\n    ????????:AIX?:[12].1:2)   # AIX 2.2.1 or AIX 2.1.1 is RT/PC AIX.\n\techo romp-ibm-aix     # uname -m gives an 8 hex-code CPU id\n\texit ;;               # Note that: echo \"'`uname -s`'\" gives 'AIX '\n    i*86:AIX:*:*)\n\techo i386-ibm-aix\n\texit ;;\n    ia64:AIX:*:*)\n\tif [ -x /usr/bin/oslevel ] ; then\n\t\tIBM_REV=`/usr/bin/oslevel`\n\telse\n\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n\tfi\n\techo ${UNAME_MACHINE}-ibm-aix${IBM_REV}\n\texit ;;\n    *:AIX:2:3)\n\tif grep bos325 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\teval $set_cc_for_build\n\t\tsed 's/^\t\t//' << EOF >$dummy.c\n\t\t#include <sys/systemcfg.h>\n\n\t\tmain()\n\t\t\t{\n\t\t\tif (!__power_pc())\n\t\t\t\texit(1);\n\t\t\tputs(\"powerpc-ibm-aix3.2.5\");\n\t\t\texit(0);\n\t\t\t}\nEOF\n\t\tif $CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy`\n\t\tthen\n\t\t\techo \"$SYSTEM_NAME\"\n\t\telse\n\t\t\techo rs6000-ibm-aix3.2.5\n\t\tfi\n\telif grep bos324 /usr/include/stdio.h >/dev/null 2>&1; then\n\t\techo rs6000-ibm-aix3.2.4\n\telse\n\t\techo rs6000-ibm-aix3.2\n\tfi\n\texit ;;\n    *:AIX:*:[4567])\n\tIBM_CPU_ID=`/usr/sbin/lsdev -C -c processor -S available | sed 1q | awk '{ print $1 }'`\n\tif /usr/sbin/lsattr -El ${IBM_CPU_ID} | grep ' POWER' >/dev/null 2>&1; then\n\t\tIBM_ARCH=rs6000\n\telse\n\t\tIBM_ARCH=powerpc\n\tfi\n\tif [ -x /usr/bin/oslevel ] ; then\n\t\tIBM_REV=`/usr/bin/oslevel`\n\telse\n\t\tIBM_REV=${UNAME_VERSION}.${UNAME_RELEASE}\n\tfi\n\techo ${IBM_ARCH}-ibm-aix${IBM_REV}\n\texit ;;\n    *:AIX:*:*)\n\techo rs6000-ibm-aix\n\texit ;;\n    ibmrt:4.4BSD:*|romp-ibm:BSD:*)\n\techo romp-ibm-bsd4.4\n\texit ;;\n    ibmrt:*BSD:*|romp-ibm:BSD:*)            # covers RT/PC BSD and\n\techo romp-ibm-bsd${UNAME_RELEASE}   # 4.3 with uname added to\n\texit ;;                             # report: romp-ibm BSD 4.3\n    *:BOSX:*:*)\n\techo rs6000-bull-bosx\n\texit ;;\n    DPX/2?00:B.O.S.:*:*)\n\techo m68k-bull-sysv3\n\texit ;;\n    9000/[34]??:4.3bsd:1.*:*)\n\techo m68k-hp-bsd\n\texit ;;\n    hp300:4.4BSD:*:* | 9000/[34]??:4.3bsd:2.*:*)\n\techo m68k-hp-bsd4.4\n\texit ;;\n    9000/[34678]??:HP-UX:*:*)\n\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n\tcase \"${UNAME_MACHINE}\" in\n\t    9000/31? )            HP_ARCH=m68000 ;;\n\t    9000/[34]?? )         HP_ARCH=m68k ;;\n\t    9000/[678][0-9][0-9])\n\t\tif [ -x /usr/bin/getconf ]; then\n\t\t    sc_cpu_version=`/usr/bin/getconf SC_CPU_VERSION 2>/dev/null`\n\t\t    sc_kernel_bits=`/usr/bin/getconf SC_KERNEL_BITS 2>/dev/null`\n\t\t    case \"${sc_cpu_version}\" in\n\t\t      523) HP_ARCH=\"hppa1.0\" ;; # CPU_PA_RISC1_0\n\t\t      528) HP_ARCH=\"hppa1.1\" ;; # CPU_PA_RISC1_1\n\t\t      532)                      # CPU_PA_RISC2_0\n\t\t\tcase \"${sc_kernel_bits}\" in\n\t\t\t  32) HP_ARCH=\"hppa2.0n\" ;;\n\t\t\t  64) HP_ARCH=\"hppa2.0w\" ;;\n\t\t\t  '') HP_ARCH=\"hppa2.0\" ;;   # HP-UX 10.20\n\t\t\tesac ;;\n\t\t    esac\n\t\tfi\n\t\tif [ \"${HP_ARCH}\" = \"\" ]; then\n\t\t    eval $set_cc_for_build\n\t\t    sed 's/^\t\t//' << EOF >$dummy.c\n\n\t\t#define _HPUX_SOURCE\n\t\t#include <stdlib.h>\n\t\t#include <unistd.h>\n\n\t\tint main ()\n\t\t{\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t    long bits = sysconf(_SC_KERNEL_BITS);\n\t\t#endif\n\t\t    long cpu  = sysconf (_SC_CPU_VERSION);\n\n\t\t    switch (cpu)\n\t\t\t{\n\t\t\tcase CPU_PA_RISC1_0: puts (\"hppa1.0\"); break;\n\t\t\tcase CPU_PA_RISC1_1: puts (\"hppa1.1\"); break;\n\t\t\tcase CPU_PA_RISC2_0:\n\t\t#if defined(_SC_KERNEL_BITS)\n\t\t\t    switch (bits)\n\t\t\t\t{\n\t\t\t\tcase 64: puts (\"hppa2.0w\"); break;\n\t\t\t\tcase 32: puts (\"hppa2.0n\"); break;\n\t\t\t\tdefault: puts (\"hppa2.0\"); break;\n\t\t\t\t} break;\n\t\t#else  /* !defined(_SC_KERNEL_BITS) */\n\t\t\t    puts (\"hppa2.0\"); break;\n\t\t#endif\n\t\t\tdefault: puts (\"hppa1.0\"); break;\n\t\t\t}\n\t\t    exit (0);\n\t\t}\nEOF\n\t\t    (CCOPTS= $CC_FOR_BUILD -o $dummy $dummy.c 2>/dev/null) && HP_ARCH=`$dummy`\n\t\t    test -z \"$HP_ARCH\" && HP_ARCH=hppa\n\t\tfi ;;\n\tesac\n\tif [ ${HP_ARCH} = \"hppa2.0w\" ]\n\tthen\n\t    eval $set_cc_for_build\n\n\t    # hppa2.0w-hp-hpux* has a 64-bit kernel and a compiler generating\n\t    # 32-bit code.  hppa64-hp-hpux* has the same kernel and a compiler\n\t    # generating 64-bit code.  GNU and HP use different nomenclature:\n\t    #\n\t    # $ CC_FOR_BUILD=cc ./config.guess\n\t    # => hppa2.0w-hp-hpux11.23\n\t    # $ CC_FOR_BUILD=\"cc +DA2.0w\" ./config.guess\n\t    # => hppa64-hp-hpux11.23\n\n\t    if echo __LP64__ | (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) |\n\t\tgrep -q __LP64__\n\t    then\n\t\tHP_ARCH=\"hppa2.0w\"\n\t    else\n\t\tHP_ARCH=\"hppa64\"\n\t    fi\n\tfi\n\techo ${HP_ARCH}-hp-hpux${HPUX_REV}\n\texit ;;\n    ia64:HP-UX:*:*)\n\tHPUX_REV=`echo ${UNAME_RELEASE}|sed -e 's/[^.]*.[0B]*//'`\n\techo ia64-hp-hpux${HPUX_REV}\n\texit ;;\n    3050*:HI-UX:*:*)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#include <unistd.h>\n\tint\n\tmain ()\n\t{\n\t  long cpu = sysconf (_SC_CPU_VERSION);\n\t  /* The order matters, because CPU_IS_HP_MC68K erroneously returns\n\t     true for CPU_PA_RISC1_0.  CPU_IS_PA_RISC returns correct\n\t     results, however.  */\n\t  if (CPU_IS_PA_RISC (cpu))\n\t    {\n\t      switch (cpu)\n\t\t{\n\t\t  case CPU_PA_RISC1_0: puts (\"hppa1.0-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC1_1: puts (\"hppa1.1-hitachi-hiuxwe2\"); break;\n\t\t  case CPU_PA_RISC2_0: puts (\"hppa2.0-hitachi-hiuxwe2\"); break;\n\t\t  default: puts (\"hppa-hitachi-hiuxwe2\"); break;\n\t\t}\n\t    }\n\t  else if (CPU_IS_HP_MC68K (cpu))\n\t    puts (\"m68k-hitachi-hiuxwe2\");\n\t  else puts (\"unknown-hitachi-hiuxwe2\");\n\t  exit (0);\n\t}\nEOF\n\t$CC_FOR_BUILD -o $dummy $dummy.c && SYSTEM_NAME=`$dummy` &&\n\t\t{ echo \"$SYSTEM_NAME\"; exit; }\n\techo unknown-hitachi-hiuxwe2\n\texit ;;\n    9000/7??:4.3bsd:*:* | 9000/8?[79]:4.3bsd:*:* )\n\techo hppa1.1-hp-bsd\n\texit ;;\n    9000/8??:4.3bsd:*:*)\n\techo hppa1.0-hp-bsd\n\texit ;;\n    *9??*:MPE/iX:*:* | *3000*:MPE/iX:*:*)\n\techo hppa1.0-hp-mpeix\n\texit ;;\n    hp7??:OSF1:*:* | hp8?[79]:OSF1:*:* )\n\techo hppa1.1-hp-osf\n\texit ;;\n    hp8??:OSF1:*:*)\n\techo hppa1.0-hp-osf\n\texit ;;\n    i*86:OSF1:*:*)\n\tif [ -x /usr/sbin/sysversion ] ; then\n\t    echo ${UNAME_MACHINE}-unknown-osf1mk\n\telse\n\t    echo ${UNAME_MACHINE}-unknown-osf1\n\tfi\n\texit ;;\n    parisc*:Lites*:*:*)\n\techo hppa1.1-hp-lites\n\texit ;;\n    C1*:ConvexOS:*:* | convex:ConvexOS:C1*:*)\n\techo c1-convex-bsd\n\texit ;;\n    C2*:ConvexOS:*:* | convex:ConvexOS:C2*:*)\n\tif getsysinfo -f scalar_acc\n\tthen echo c32-convex-bsd\n\telse echo c2-convex-bsd\n\tfi\n\texit ;;\n    C34*:ConvexOS:*:* | convex:ConvexOS:C34*:*)\n\techo c34-convex-bsd\n\texit ;;\n    C38*:ConvexOS:*:* | convex:ConvexOS:C38*:*)\n\techo c38-convex-bsd\n\texit ;;\n    C4*:ConvexOS:*:* | convex:ConvexOS:C4*:*)\n\techo c4-convex-bsd\n\texit ;;\n    CRAY*Y-MP:*:*:*)\n\techo ymp-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*[A-Z]90:*:*:*)\n\techo ${UNAME_MACHINE}-cray-unicos${UNAME_RELEASE} \\\n\t| sed -e 's/CRAY.*\\([A-Z]90\\)/\\1/' \\\n\t      -e y/ABCDEFGHIJKLMNOPQRSTUVWXYZ/abcdefghijklmnopqrstuvwxyz/ \\\n\t      -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*TS:*:*:*)\n\techo t90-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*T3E:*:*:*)\n\techo alphaev5-cray-unicosmk${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    CRAY*SV1:*:*:*)\n\techo sv1-cray-unicos${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    *:UNICOS/mp:*:*)\n\techo craynv-cray-unicosmp${UNAME_RELEASE} | sed -e 's/\\.[^.]*$/.X/'\n\texit ;;\n    F30[01]:UNIX_System_V:*:* | F700:UNIX_System_V:*:*)\n\tFUJITSU_PROC=`uname -m | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz'`\n\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo ${UNAME_RELEASE} | sed -e 's/ /_/'`\n\techo \"${FUJITSU_PROC}-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n\texit ;;\n    5000:UNIX_System_V:4.*:*)\n\tFUJITSU_SYS=`uname -p | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/\\///'`\n\tFUJITSU_REL=`echo ${UNAME_RELEASE} | tr 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' 'abcdefghijklmnopqrstuvwxyz' | sed -e 's/ /_/'`\n\techo \"sparc-fujitsu-${FUJITSU_SYS}${FUJITSU_REL}\"\n\texit ;;\n    i*86:BSD/386:*:* | i*86:BSD/OS:*:* | *:Ascend\\ Embedded/OS:*:*)\n\techo ${UNAME_MACHINE}-pc-bsdi${UNAME_RELEASE}\n\texit ;;\n    sparc*:BSD/OS:*:*)\n\techo sparc-unknown-bsdi${UNAME_RELEASE}\n\texit ;;\n    *:BSD/OS:*:*)\n\techo ${UNAME_MACHINE}-unknown-bsdi${UNAME_RELEASE}\n\texit ;;\n    *:FreeBSD:*:*)\n\tUNAME_PROCESSOR=`/usr/bin/uname -p`\n\tcase ${UNAME_PROCESSOR} in\n\t    amd64)\n\t\techo x86_64-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;\n\t    *)\n\t\techo ${UNAME_PROCESSOR}-unknown-freebsd`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'` ;;\n\tesac\n\texit ;;\n    i*:CYGWIN*:*)\n\techo ${UNAME_MACHINE}-pc-cygwin\n\texit ;;\n    *:MINGW64*:*)\n\techo ${UNAME_MACHINE}-pc-mingw64\n\texit ;;\n    *:MINGW*:*)\n\techo ${UNAME_MACHINE}-pc-mingw32\n\texit ;;\n    *:MSYS*:*)\n\techo ${UNAME_MACHINE}-pc-msys\n\texit ;;\n    i*:windows32*:*)\n\t# uname -m includes \"-pc\" on this system.\n\techo ${UNAME_MACHINE}-mingw32\n\texit ;;\n    i*:PW*:*)\n\techo ${UNAME_MACHINE}-pc-pw32\n\texit ;;\n    *:Interix*:*)\n\tcase ${UNAME_MACHINE} in\n\t    x86)\n\t\techo i586-pc-interix${UNAME_RELEASE}\n\t\texit ;;\n\t    authenticamd | genuineintel | EM64T)\n\t\techo x86_64-unknown-interix${UNAME_RELEASE}\n\t\texit ;;\n\t    IA64)\n\t\techo ia64-unknown-interix${UNAME_RELEASE}\n\t\texit ;;\n\tesac ;;\n    [345]86:Windows_95:* | [345]86:Windows_98:* | [345]86:Windows_NT:*)\n\techo i${UNAME_MACHINE}-pc-mks\n\texit ;;\n    8664:Windows_NT:*)\n\techo x86_64-pc-mks\n\texit ;;\n    i*:Windows_NT*:* | Pentium*:Windows_NT*:*)\n\t# How do we know it's Interix rather than the generic POSIX subsystem?\n\t# It also conflicts with pre-2.0 versions of AT&T UWIN. Should we\n\t# UNAME_MACHINE based on the output of uname instead of i386?\n\techo i586-pc-interix\n\texit ;;\n    i*:UWIN*:*)\n\techo ${UNAME_MACHINE}-pc-uwin\n\texit ;;\n    amd64:CYGWIN*:*:* | x86_64:CYGWIN*:*:*)\n\techo x86_64-unknown-cygwin\n\texit ;;\n    p*:CYGWIN*:*)\n\techo powerpcle-unknown-cygwin\n\texit ;;\n    prep*:SunOS:5.*:*)\n\techo powerpcle-unknown-solaris2`echo ${UNAME_RELEASE}|sed -e 's/[^.]*//'`\n\texit ;;\n    *:GNU:*:*)\n\t# the GNU system\n\techo `echo ${UNAME_MACHINE}|sed -e 's,[-/].*$,,'`-unknown-${LIBC}`echo ${UNAME_RELEASE}|sed -e 's,/.*$,,'`\n\texit ;;\n    *:GNU/*:*:*)\n\t# other systems with GNU libc and userland\n\techo ${UNAME_MACHINE}-unknown-`echo ${UNAME_SYSTEM} | sed 's,^[^/]*/,,' | tr '[A-Z]' '[a-z]'``echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`-${LIBC}\n\texit ;;\n    i*86:Minix:*:*)\n\techo ${UNAME_MACHINE}-pc-minix\n\texit ;;\n    aarch64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    aarch64_be:Linux:*:*)\n\tUNAME_MACHINE=aarch64_be\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    alpha:Linux:*:*)\n\tcase `sed -n '/^cpu model/s/^.*: \\(.*\\)/\\1/p' < /proc/cpuinfo` in\n\t  EV5)   UNAME_MACHINE=alphaev5 ;;\n\t  EV56)  UNAME_MACHINE=alphaev56 ;;\n\t  PCA56) UNAME_MACHINE=alphapca56 ;;\n\t  PCA57) UNAME_MACHINE=alphapca56 ;;\n\t  EV6)   UNAME_MACHINE=alphaev6 ;;\n\t  EV67)  UNAME_MACHINE=alphaev67 ;;\n\t  EV68*) UNAME_MACHINE=alphaev68 ;;\n\tesac\n\tobjdump --private-headers /bin/sh | grep -q ld.so.1\n\tif test \"$?\" = 0 ; then LIBC=\"gnulibc1\" ; fi\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    arc:Linux:*:* | arceb:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    arm*:Linux:*:*)\n\teval $set_cc_for_build\n\tif echo __ARM_EABI__ | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t    | grep -q __ARM_EABI__\n\tthen\n\t    echo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\telse\n\t    if echo __ARM_PCS_VFP | $CC_FOR_BUILD -E - 2>/dev/null \\\n\t\t| grep -q __ARM_PCS_VFP\n\t    then\n\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabi\n\t    else\n\t\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}eabihf\n\t    fi\n\tfi\n\texit ;;\n    avr32*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    cris:Linux:*:*)\n\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n\texit ;;\n    crisv32:Linux:*:*)\n\techo ${UNAME_MACHINE}-axis-linux-${LIBC}\n\texit ;;\n    frv:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    hexagon:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    i*86:Linux:*:*)\n\techo ${UNAME_MACHINE}-pc-linux-${LIBC}\n\texit ;;\n    ia64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    m32r*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    m68*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    mips:Linux:*:* | mips64:Linux:*:*)\n\teval $set_cc_for_build\n\tsed 's/^\t//' << EOF >$dummy.c\n\t#undef CPU\n\t#undef ${UNAME_MACHINE}\n\t#undef ${UNAME_MACHINE}el\n\t#if defined(__MIPSEL__) || defined(__MIPSEL) || defined(_MIPSEL) || defined(MIPSEL)\n\tCPU=${UNAME_MACHINE}el\n\t#else\n\t#if defined(__MIPSEB__) || defined(__MIPSEB) || defined(_MIPSEB) || defined(MIPSEB)\n\tCPU=${UNAME_MACHINE}\n\t#else\n\tCPU=\n\t#endif\n\t#endif\nEOF\n\teval `$CC_FOR_BUILD -E $dummy.c 2>/dev/null | grep '^CPU'`\n\ttest x\"${CPU}\" != x && { echo \"${CPU}-unknown-linux-${LIBC}\"; exit; }\n\t;;\n    openrisc*:Linux:*:*)\n\techo or1k-unknown-linux-${LIBC}\n\texit ;;\n    or32:Linux:*:* | or1k*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    padre:Linux:*:*)\n\techo sparc-unknown-linux-${LIBC}\n\texit ;;\n    parisc64:Linux:*:* | hppa64:Linux:*:*)\n\techo hppa64-unknown-linux-${LIBC}\n\texit ;;\n    parisc:Linux:*:* | hppa:Linux:*:*)\n\t# Look for CPU level\n\tcase `grep '^cpu[^a-z]*:' /proc/cpuinfo 2>/dev/null | cut -d' ' -f2` in\n\t  PA7*) echo hppa1.1-unknown-linux-${LIBC} ;;\n\t  PA8*) echo hppa2.0-unknown-linux-${LIBC} ;;\n\t  *)    echo hppa-unknown-linux-${LIBC} ;;\n\tesac\n\texit ;;\n    ppc64:Linux:*:*)\n\techo powerpc64-unknown-linux-${LIBC}\n\texit ;;\n    ppc:Linux:*:*)\n\techo powerpc-unknown-linux-${LIBC}\n\texit ;;\n    ppc64le:Linux:*:*)\n\techo powerpc64le-unknown-linux-${LIBC}\n\texit ;;\n    ppcle:Linux:*:*)\n\techo powerpcle-unknown-linux-${LIBC}\n\texit ;;\n    s390:Linux:*:* | s390x:Linux:*:*)\n\techo ${UNAME_MACHINE}-ibm-linux-${LIBC}\n\texit ;;\n    sh64*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    sh*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    sparc:Linux:*:* | sparc64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    tile*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    vax:Linux:*:*)\n\techo ${UNAME_MACHINE}-dec-linux-${LIBC}\n\texit ;;\n    x86_64:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    xtensa*:Linux:*:*)\n\techo ${UNAME_MACHINE}-unknown-linux-${LIBC}\n\texit ;;\n    i*86:DYNIX/ptx:4*:*)\n\t# ptx 4.0 does uname -s correctly, with DYNIX/ptx in there.\n\t# earlier versions are messed up and put the nodename in both\n\t# sysname and nodename.\n\techo i386-sequent-sysv4\n\texit ;;\n    i*86:UNIX_SV:4.2MP:2.*)\n\t# Unixware is an offshoot of SVR4, but it has its own version\n\t# number series starting with 2...\n\t# I am not positive that other SVR4 systems won't match this,\n\t# I just have to hope.  -- rms.\n\t# Use sysv4.2uw... so that sysv4* matches it.\n\techo ${UNAME_MACHINE}-pc-sysv4.2uw${UNAME_VERSION}\n\texit ;;\n    i*86:OS/2:*:*)\n\t# If we were able to find `uname', then EMX Unix compatibility\n\t# is probably installed.\n\techo ${UNAME_MACHINE}-pc-os2-emx\n\texit ;;\n    i*86:XTS-300:*:STOP)\n\techo ${UNAME_MACHINE}-unknown-stop\n\texit ;;\n    i*86:atheos:*:*)\n\techo ${UNAME_MACHINE}-unknown-atheos\n\texit ;;\n    i*86:syllable:*:*)\n\techo ${UNAME_MACHINE}-pc-syllable\n\texit ;;\n    i*86:LynxOS:2.*:* | i*86:LynxOS:3.[01]*:* | i*86:LynxOS:4.[02]*:*)\n\techo i386-unknown-lynxos${UNAME_RELEASE}\n\texit ;;\n    i*86:*DOS:*:*)\n\techo ${UNAME_MACHINE}-pc-msdosdjgpp\n\texit ;;\n    i*86:*:4.*:* | i*86:SYSTEM_V:4.*:*)\n\tUNAME_REL=`echo ${UNAME_RELEASE} | sed 's/\\/MP$//'`\n\tif grep Novell /usr/include/link.h >/dev/null 2>/dev/null; then\n\t\techo ${UNAME_MACHINE}-univel-sysv${UNAME_REL}\n\telse\n\t\techo ${UNAME_MACHINE}-pc-sysv${UNAME_REL}\n\tfi\n\texit ;;\n    i*86:*:5:[678]*)\n\t# UnixWare 7.x, OpenUNIX and OpenServer 6.\n\tcase `/bin/uname -X | grep \"^Machine\"` in\n\t    *486*)\t     UNAME_MACHINE=i486 ;;\n\t    *Pentium)\t     UNAME_MACHINE=i586 ;;\n\t    *Pent*|*Celeron) UNAME_MACHINE=i686 ;;\n\tesac\n\techo ${UNAME_MACHINE}-unknown-sysv${UNAME_RELEASE}${UNAME_SYSTEM}${UNAME_VERSION}\n\texit ;;\n    i*86:*:3.2:*)\n\tif test -f /usr/options/cb.name; then\n\t\tUNAME_REL=`sed -n 's/.*Version //p' </usr/options/cb.name`\n\t\techo ${UNAME_MACHINE}-pc-isc$UNAME_REL\n\telif /bin/uname -X 2>/dev/null >/dev/null ; then\n\t\tUNAME_REL=`(/bin/uname -X|grep Release|sed -e 's/.*= //')`\n\t\t(/bin/uname -X|grep i80486 >/dev/null) && UNAME_MACHINE=i486\n\t\t(/bin/uname -X|grep '^Machine.*Pentium' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i586\n\t\t(/bin/uname -X|grep '^Machine.*Pent *II' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\t(/bin/uname -X|grep '^Machine.*Pentium Pro' >/dev/null) \\\n\t\t\t&& UNAME_MACHINE=i686\n\t\techo ${UNAME_MACHINE}-pc-sco$UNAME_REL\n\telse\n\t\techo ${UNAME_MACHINE}-pc-sysv32\n\tfi\n\texit ;;\n    pc:*:*:*)\n\t# Left here for compatibility:\n\t# uname -m prints for DJGPP always 'pc', but it prints nothing about\n\t# the processor, so we play safe by assuming i586.\n\t# Note: whatever this is, it MUST be the same as what config.sub\n\t# prints for the \"djgpp\" host, or else GDB configury will decide that\n\t# this is a cross-build.\n\techo i586-pc-msdosdjgpp\n\texit ;;\n    Intel:Mach:3*:*)\n\techo i386-pc-mach3\n\texit ;;\n    paragon:*:*:*)\n\techo i860-intel-osf1\n\texit ;;\n    i860:*:4.*:*) # i860-SVR4\n\tif grep Stardent /usr/include/sys/uadmin.h >/dev/null 2>&1 ; then\n\t  echo i860-stardent-sysv${UNAME_RELEASE} # Stardent Vistra i860-SVR4\n\telse # Add other i860-SVR4 vendors below as they are discovered.\n\t  echo i860-unknown-sysv${UNAME_RELEASE}  # Unknown i860-SVR4\n\tfi\n\texit ;;\n    mini*:CTIX:SYS*5:*)\n\t# \"miniframe\"\n\techo m68010-convergent-sysv\n\texit ;;\n    mc68k:UNIX:SYSTEM5:3.51m)\n\techo m68k-convergent-sysv\n\texit ;;\n    M680?0:D-NIX:5.3:*)\n\techo m68k-diab-dnix\n\texit ;;\n    M68*:*:R3V[5678]*:*)\n\ttest -r /sysV68 && { echo 'm68k-motorola-sysv'; exit; } ;;\n    3[345]??:*:4.0:3.0 | 3[34]??A:*:4.0:3.0 | 3[34]??,*:*:4.0:3.0 | 3[34]??/*:*:4.0:3.0 | 4400:*:4.0:3.0 | 4850:*:4.0:3.0 | SKA40:*:4.0:3.0 | SDS2:*:4.0:3.0 | SHG2:*:4.0:3.0 | S7501*:*:4.0:3.0)\n\tOS_REL=''\n\ttest -r /etc/.relid \\\n\t&& OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t  && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n    3[34]??:*:4.0:* | 3[34]??,*:*:4.0:*)\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t  && { echo i486-ncr-sysv4; exit; } ;;\n    NCR*:*:4.2:* | MPRAS*:*:4.2:*)\n\tOS_REL='.3'\n\ttest -r /etc/.relid \\\n\t    && OS_REL=.`sed -n 's/[^ ]* [^ ]* \\([0-9][0-9]\\).*/\\1/p' < /etc/.relid`\n\t/bin/uname -p 2>/dev/null | grep 86 >/dev/null \\\n\t    && { echo i486-ncr-sysv4.3${OS_REL}; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep entium >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; }\n\t/bin/uname -p 2>/dev/null | /bin/grep pteron >/dev/null \\\n\t    && { echo i586-ncr-sysv4.3${OS_REL}; exit; } ;;\n    m68*:LynxOS:2.*:* | m68*:LynxOS:3.0*:*)\n\techo m68k-unknown-lynxos${UNAME_RELEASE}\n\texit ;;\n    mc68030:UNIX_System_V:4.*:*)\n\techo m68k-atari-sysv4\n\texit ;;\n    TSUNAMI:LynxOS:2.*:*)\n\techo sparc-unknown-lynxos${UNAME_RELEASE}\n\texit ;;\n    rs6000:LynxOS:2.*:*)\n\techo rs6000-unknown-lynxos${UNAME_RELEASE}\n\texit ;;\n    PowerPC:LynxOS:2.*:* | PowerPC:LynxOS:3.[01]*:* | PowerPC:LynxOS:4.[02]*:*)\n\techo powerpc-unknown-lynxos${UNAME_RELEASE}\n\texit ;;\n    SM[BE]S:UNIX_SV:*:*)\n\techo mips-dde-sysv${UNAME_RELEASE}\n\texit ;;\n    RM*:ReliantUNIX-*:*:*)\n\techo mips-sni-sysv4\n\texit ;;\n    RM*:SINIX-*:*:*)\n\techo mips-sni-sysv4\n\texit ;;\n    *:SINIX-*:*:*)\n\tif uname -p 2>/dev/null >/dev/null ; then\n\t\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n\t\techo ${UNAME_MACHINE}-sni-sysv4\n\telse\n\t\techo ns32k-sni-sysv\n\tfi\n\texit ;;\n    PENTIUM:*:4.0*:*)\t# Unisys `ClearPath HMP IX 4000' SVR4/MP effort\n\t\t\t# says <Richard.M.Bartel@ccMail.Census.GOV>\n\techo i586-unisys-sysv4\n\texit ;;\n    *:UNIX_System_V:4*:FTX*)\n\t# From Gerald Hewes <hewes@openmarket.com>.\n\t# How about differentiating between stratus architectures? -djm\n\techo hppa1.1-stratus-sysv4\n\texit ;;\n    *:*:*:FTX*)\n\t# From seanf@swdc.stratus.com.\n\techo i860-stratus-sysv4\n\texit ;;\n    i*86:VOS:*:*)\n\t# From Paul.Green@stratus.com.\n\techo ${UNAME_MACHINE}-stratus-vos\n\texit ;;\n    *:VOS:*:*)\n\t# From Paul.Green@stratus.com.\n\techo hppa1.1-stratus-vos\n\texit ;;\n    mc68*:A/UX:*:*)\n\techo m68k-apple-aux${UNAME_RELEASE}\n\texit ;;\n    news*:NEWS-OS:6*:*)\n\techo mips-sony-newsos6\n\texit ;;\n    R[34]000:*System_V*:*:* | R4000:UNIX_SYSV:*:* | R*000:UNIX_SV:*:*)\n\tif [ -d /usr/nec ]; then\n\t\techo mips-nec-sysv${UNAME_RELEASE}\n\telse\n\t\techo mips-unknown-sysv${UNAME_RELEASE}\n\tfi\n\texit ;;\n    BeBox:BeOS:*:*)\t# BeOS running on hardware made by Be, PPC only.\n\techo powerpc-be-beos\n\texit ;;\n    BeMac:BeOS:*:*)\t# BeOS running on Mac or Mac clone, PPC only.\n\techo powerpc-apple-beos\n\texit ;;\n    BePC:BeOS:*:*)\t# BeOS running on Intel PC compatible.\n\techo i586-pc-beos\n\texit ;;\n    BePC:Haiku:*:*)\t# Haiku running on Intel PC compatible.\n\techo i586-pc-haiku\n\texit ;;\n    x86_64:Haiku:*:*)\n\techo x86_64-unknown-haiku\n\texit ;;\n    SX-4:SUPER-UX:*:*)\n\techo sx4-nec-superux${UNAME_RELEASE}\n\texit ;;\n    SX-5:SUPER-UX:*:*)\n\techo sx5-nec-superux${UNAME_RELEASE}\n\texit ;;\n    SX-6:SUPER-UX:*:*)\n\techo sx6-nec-superux${UNAME_RELEASE}\n\texit ;;\n    SX-7:SUPER-UX:*:*)\n\techo sx7-nec-superux${UNAME_RELEASE}\n\texit ;;\n    SX-8:SUPER-UX:*:*)\n\techo sx8-nec-superux${UNAME_RELEASE}\n\texit ;;\n    SX-8R:SUPER-UX:*:*)\n\techo sx8r-nec-superux${UNAME_RELEASE}\n\texit ;;\n    Power*:Rhapsody:*:*)\n\techo powerpc-apple-rhapsody${UNAME_RELEASE}\n\texit ;;\n    *:Rhapsody:*:*)\n\techo ${UNAME_MACHINE}-apple-rhapsody${UNAME_RELEASE}\n\texit ;;\n    *:Darwin:*:*)\n\tUNAME_PROCESSOR=`uname -p` || UNAME_PROCESSOR=unknown\n\teval $set_cc_for_build\n\tif test \"$UNAME_PROCESSOR\" = unknown ; then\n\t    UNAME_PROCESSOR=powerpc\n\tfi\n\tif test `echo \"$UNAME_RELEASE\" | sed -e 's/\\..*//'` -le 10 ; then\n\t    if [ \"$CC_FOR_BUILD\" != 'no_compiler_found' ]; then\n\t\tif (echo '#ifdef __LP64__'; echo IS_64BIT_ARCH; echo '#endif') | \\\n\t\t    (CCOPTS= $CC_FOR_BUILD -E - 2>/dev/null) | \\\n\t\t    grep IS_64BIT_ARCH >/dev/null\n\t\tthen\n\t\t    case $UNAME_PROCESSOR in\n\t\t\ti386) UNAME_PROCESSOR=x86_64 ;;\n\t\t\tpowerpc) UNAME_PROCESSOR=powerpc64 ;;\n\t\t    esac\n\t\tfi\n\t    fi\n\telif test \"$UNAME_PROCESSOR\" = i386 ; then\n\t    # Avoid executing cc on OS X 10.9, as it ships with a stub\n\t    # that puts up a graphical alert prompting to install\n\t    # developer tools.  Any system running Mac OS X 10.7 or\n\t    # later (Darwin 11 and later) is required to have a 64-bit\n\t    # processor. This is not true of the ARM version of Darwin\n\t    # that Apple uses in portable devices.\n\t    UNAME_PROCESSOR=x86_64\n\tfi\n\techo ${UNAME_PROCESSOR}-apple-darwin${UNAME_RELEASE}\n\texit ;;\n    *:procnto*:*:* | *:QNX:[0123456789]*:*)\n\tUNAME_PROCESSOR=`uname -p`\n\tif test \"$UNAME_PROCESSOR\" = \"x86\"; then\n\t\tUNAME_PROCESSOR=i386\n\t\tUNAME_MACHINE=pc\n\tfi\n\techo ${UNAME_PROCESSOR}-${UNAME_MACHINE}-nto-qnx${UNAME_RELEASE}\n\texit ;;\n    *:QNX:*:4*)\n\techo i386-pc-qnx\n\texit ;;\n    NEO-?:NONSTOP_KERNEL:*:*)\n\techo neo-tandem-nsk${UNAME_RELEASE}\n\texit ;;\n    NSE-*:NONSTOP_KERNEL:*:*)\n\techo nse-tandem-nsk${UNAME_RELEASE}\n\texit ;;\n    NSR-?:NONSTOP_KERNEL:*:*)\n\techo nsr-tandem-nsk${UNAME_RELEASE}\n\texit ;;\n    *:NonStop-UX:*:*)\n\techo mips-compaq-nonstopux\n\texit ;;\n    BS2000:POSIX*:*:*)\n\techo bs2000-siemens-sysv\n\texit ;;\n    DS/*:UNIX_System_V:*:*)\n\techo ${UNAME_MACHINE}-${UNAME_SYSTEM}-${UNAME_RELEASE}\n\texit ;;\n    *:Plan9:*:*)\n\t# \"uname -m\" is not consistent, so use $cputype instead. 386\n\t# is converted to i386 for consistency with other x86\n\t# operating systems.\n\tif test \"$cputype\" = \"386\"; then\n\t    UNAME_MACHINE=i386\n\telse\n\t    UNAME_MACHINE=\"$cputype\"\n\tfi\n\techo ${UNAME_MACHINE}-unknown-plan9\n\texit ;;\n    *:TOPS-10:*:*)\n\techo pdp10-unknown-tops10\n\texit ;;\n    *:TENEX:*:*)\n\techo pdp10-unknown-tenex\n\texit ;;\n    KS10:TOPS-20:*:* | KL10:TOPS-20:*:* | TYPE4:TOPS-20:*:*)\n\techo pdp10-dec-tops20\n\texit ;;\n    XKL-1:TOPS-20:*:* | TYPE5:TOPS-20:*:*)\n\techo pdp10-xkl-tops20\n\texit ;;\n    *:TOPS-20:*:*)\n\techo pdp10-unknown-tops20\n\texit ;;\n    *:ITS:*:*)\n\techo pdp10-unknown-its\n\texit ;;\n    SEI:*:*:SEIUX)\n\techo mips-sei-seiux${UNAME_RELEASE}\n\texit ;;\n    *:DragonFly:*:*)\n\techo ${UNAME_MACHINE}-unknown-dragonfly`echo ${UNAME_RELEASE}|sed -e 's/[-(].*//'`\n\texit ;;\n    *:*VMS:*:*)\n\tUNAME_MACHINE=`(uname -p) 2>/dev/null`\n\tcase \"${UNAME_MACHINE}\" in\n\t    A*) echo alpha-dec-vms ; exit ;;\n\t    I*) echo ia64-dec-vms ; exit ;;\n\t    V*) echo vax-dec-vms ; exit ;;\n\tesac ;;\n    *:XENIX:*:SysV)\n\techo i386-pc-xenix\n\texit ;;\n    i*86:skyos:*:*)\n\techo ${UNAME_MACHINE}-pc-skyos`echo ${UNAME_RELEASE}` | sed -e 's/ .*$//'\n\texit ;;\n    i*86:rdos:*:*)\n\techo ${UNAME_MACHINE}-pc-rdos\n\texit ;;\n    i*86:AROS:*:*)\n\techo ${UNAME_MACHINE}-pc-aros\n\texit ;;\n    x86_64:VMkernel:*:*)\n\techo ${UNAME_MACHINE}-unknown-esx\n\texit ;;\nesac\n\ncat >&2 <<EOF\n$0: unable to guess system type\n\nThis script, last modified $timestamp, has failed to recognize\nthe operating system you are using. It is advised that you\ndownload the most up to date version of the config scripts from\n\n  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.guess;hb=HEAD\nand\n  http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n\nIf the version you run ($0) is already up to date, please\nsend the following data and any information you think might be\npertinent to <config-patches@gnu.org> in order to provide the needed\ninformation to handle your system.\n\nconfig.guess timestamp = $timestamp\n\nuname -m = `(uname -m) 2>/dev/null || echo unknown`\nuname -r = `(uname -r) 2>/dev/null || echo unknown`\nuname -s = `(uname -s) 2>/dev/null || echo unknown`\nuname -v = `(uname -v) 2>/dev/null || echo unknown`\n\n/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null`\n/bin/uname -X     = `(/bin/uname -X) 2>/dev/null`\n\nhostinfo               = `(hostinfo) 2>/dev/null`\n/bin/universe          = `(/bin/universe) 2>/dev/null`\n/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null`\n/bin/arch              = `(/bin/arch) 2>/dev/null`\n/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null`\n/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null`\n\nUNAME_MACHINE = ${UNAME_MACHINE}\nUNAME_RELEASE = ${UNAME_RELEASE}\nUNAME_SYSTEM  = ${UNAME_SYSTEM}\nUNAME_VERSION = ${UNAME_VERSION}\nEOF\n\nexit 1\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "config.h.in",
          "type": "blob",
          "size": 3.2412109375,
          "content": "/* config.h.in.  Generated from configure.ac by autoheader.  */\n\n/* Define to 1 if you have the `clock_gettime' function. */\n#undef HAVE_CLOCK_GETTIME\n\n/* Define to 1 to use the syscall interface for clock_gettime */\n#undef HAVE_CLOCK_SYSCALL\n\n/* Define to 1 if you have the <dlfcn.h> header file. */\n#undef HAVE_DLFCN_H\n\n/* Define to 1 if you have the `epoll_ctl' function. */\n#undef HAVE_EPOLL_CTL\n\n/* Define to 1 if you have the `eventfd' function. */\n#undef HAVE_EVENTFD\n\n/* Define to 1 if the floor function is available */\n#undef HAVE_FLOOR\n\n/* Define to 1 if you have the `inotify_init' function. */\n#undef HAVE_INOTIFY_INIT\n\n/* Define to 1 if you have the <inttypes.h> header file. */\n#undef HAVE_INTTYPES_H\n\n/* Define to 1 if you have the `kqueue' function. */\n#undef HAVE_KQUEUE\n\n/* Define to 1 if you have the `rt' library (-lrt). */\n#undef HAVE_LIBRT\n\n/* Define to 1 if you have the <memory.h> header file. */\n#undef HAVE_MEMORY_H\n\n/* Define to 1 if you have the `nanosleep' function. */\n#undef HAVE_NANOSLEEP\n\n/* Define to 1 if you have the `poll' function. */\n#undef HAVE_POLL\n\n/* Define to 1 if you have the <poll.h> header file. */\n#undef HAVE_POLL_H\n\n/* Define to 1 if you have the `port_create' function. */\n#undef HAVE_PORT_CREATE\n\n/* Define to 1 if you have the <port.h> header file. */\n#undef HAVE_PORT_H\n\n/* Define to 1 if you have the `select' function. */\n#undef HAVE_SELECT\n\n/* Define to 1 if you have the `signalfd' function. */\n#undef HAVE_SIGNALFD\n\n/* Define to 1 if you have the <stdint.h> header file. */\n#undef HAVE_STDINT_H\n\n/* Define to 1 if you have the <stdlib.h> header file. */\n#undef HAVE_STDLIB_H\n\n/* Define to 1 if you have the <strings.h> header file. */\n#undef HAVE_STRINGS_H\n\n/* Define to 1 if you have the <string.h> header file. */\n#undef HAVE_STRING_H\n\n/* Define to 1 if you have the <sys/epoll.h> header file. */\n#undef HAVE_SYS_EPOLL_H\n\n/* Define to 1 if you have the <sys/eventfd.h> header file. */\n#undef HAVE_SYS_EVENTFD_H\n\n/* Define to 1 if you have the <sys/event.h> header file. */\n#undef HAVE_SYS_EVENT_H\n\n/* Define to 1 if you have the <sys/inotify.h> header file. */\n#undef HAVE_SYS_INOTIFY_H\n\n/* Define to 1 if you have the <sys/select.h> header file. */\n#undef HAVE_SYS_SELECT_H\n\n/* Define to 1 if you have the <sys/signalfd.h> header file. */\n#undef HAVE_SYS_SIGNALFD_H\n\n/* Define to 1 if you have the <sys/stat.h> header file. */\n#undef HAVE_SYS_STAT_H\n\n/* Define to 1 if you have the <sys/types.h> header file. */\n#undef HAVE_SYS_TYPES_H\n\n/* Define to 1 if you have the <unistd.h> header file. */\n#undef HAVE_UNISTD_H\n\n/* Define to the sub-directory in which libtool stores uninstalled libraries.\n   */\n#undef LT_OBJDIR\n\n/* Name of package */\n#undef PACKAGE\n\n/* Define to the address where bug reports for this package should be sent. */\n#undef PACKAGE_BUGREPORT\n\n/* Define to the full name of this package. */\n#undef PACKAGE_NAME\n\n/* Define to the full name and version of this package. */\n#undef PACKAGE_STRING\n\n/* Define to the one symbol short name of this package. */\n#undef PACKAGE_TARNAME\n\n/* Define to the home page for this package. */\n#undef PACKAGE_URL\n\n/* Define to the version of this package. */\n#undef PACKAGE_VERSION\n\n/* Define to 1 if you have the ANSI C header files. */\n#undef STDC_HEADERS\n\n/* Version number of package */\n#undef VERSION\n"
        },
        {
          "name": "config.sub",
          "type": "blob",
          "size": 34.9970703125,
          "content": "#! /bin/sh\n# Configuration validation subroutine script.\n#   Copyright 1992-2014 Free Software Foundation, Inc.\n\ntimestamp='2014-09-11'\n\n# This file is free software; you can redistribute it and/or modify it\n# under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program; if not, see <http://www.gnu.org/licenses/>.\n#\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that\n# program.  This Exception is an additional permission under section 7\n# of the GNU General Public License, version 3 (\"GPLv3\").\n\n\n# Please send patches with a ChangeLog entry to config-patches@gnu.org.\n#\n# Configuration subroutine to validate and canonicalize a configuration type.\n# Supply the specified configuration type as an argument.\n# If it is invalid, we print an error message on stderr and exit with code 1.\n# Otherwise, we print the canonical config type on stdout and succeed.\n\n# You can get the latest version of this script from:\n# http://git.savannah.gnu.org/gitweb/?p=config.git;a=blob_plain;f=config.sub;hb=HEAD\n\n# This file is supposed to be the same for all GNU packages\n# and recognize all the CPU types, system types and aliases\n# that are meaningful with *any* GNU software.\n# Each package is responsible for reporting which valid configurations\n# it does not support.  The user should be able to distinguish\n# a failure to support a valid configuration from a meaningless\n# configuration.\n\n# The goal of this file is to map all the various variations of a given\n# machine specification into a single specification in the form:\n#\tCPU_TYPE-MANUFACTURER-OPERATING_SYSTEM\n# or in some cases, the newer four-part form:\n#\tCPU_TYPE-MANUFACTURER-KERNEL-OPERATING_SYSTEM\n# It is wrong to echo any other type of specification.\n\nme=`echo \"$0\" | sed -e 's,.*/,,'`\n\nusage=\"\\\nUsage: $0 [OPTION] CPU-MFR-OPSYS\n       $0 [OPTION] ALIAS\n\nCanonicalize a configuration name.\n\nOperation modes:\n  -h, --help         print this help, then exit\n  -t, --time-stamp   print date of last modification, then exit\n  -v, --version      print version number, then exit\n\nReport bugs and patches to <config-patches@gnu.org>.\"\n\nversion=\"\\\nGNU config.sub ($timestamp)\n\nCopyright 1992-2014 Free Software Foundation, Inc.\n\nThis is free software; see the source for copying conditions.  There is NO\nwarranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\"\n\nhelp=\"\nTry \\`$me --help' for more information.\"\n\n# Parse command line\nwhile test $# -gt 0 ; do\n  case $1 in\n    --time-stamp | --time* | -t )\n       echo \"$timestamp\" ; exit ;;\n    --version | -v )\n       echo \"$version\" ; exit ;;\n    --help | --h* | -h )\n       echo \"$usage\"; exit ;;\n    -- )     # Stop option processing\n       shift; break ;;\n    - )\t# Use stdin as input.\n       break ;;\n    -* )\n       echo \"$me: invalid option $1$help\"\n       exit 1 ;;\n\n    *local*)\n       # First pass through any local machine types.\n       echo $1\n       exit ;;\n\n    * )\n       break ;;\n  esac\ndone\n\ncase $# in\n 0) echo \"$me: missing argument$help\" >&2\n    exit 1;;\n 1) ;;\n *) echo \"$me: too many arguments$help\" >&2\n    exit 1;;\nesac\n\n# Separate what the user gave into CPU-COMPANY and OS or KERNEL-OS (if any).\n# Here we must recognize all the valid KERNEL-OS combinations.\nmaybe_os=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\2/'`\ncase $maybe_os in\n  nto-qnx* | linux-gnu* | linux-android* | linux-dietlibc | linux-newlib* | \\\n  linux-musl* | linux-uclibc* | uclinux-uclibc* | uclinux-gnu* | kfreebsd*-gnu* | \\\n  knetbsd*-gnu* | netbsd*-gnu* | \\\n  kopensolaris*-gnu* | \\\n  storm-chaos* | os2-emx* | rtmk-nova*)\n    os=-$maybe_os\n    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`\n    ;;\n  android-linux)\n    os=-linux-android\n    basic_machine=`echo $1 | sed 's/^\\(.*\\)-\\([^-]*-[^-]*\\)$/\\1/'`-unknown\n    ;;\n  *)\n    basic_machine=`echo $1 | sed 's/-[^-]*$//'`\n    if [ $basic_machine != $1 ]\n    then os=`echo $1 | sed 's/.*-/-/'`\n    else os=; fi\n    ;;\nesac\n\n### Let's recognize common machines as not being operating systems so\n### that things like config.sub decstation-3100 work.  We also\n### recognize some manufacturers as not being operating systems, so we\n### can provide default operating systems below.\ncase $os in\n\t-sun*os*)\n\t\t# Prevent following clause from handling this invalid input.\n\t\t;;\n\t-dec* | -mips* | -sequent* | -encore* | -pc532* | -sgi* | -sony* | \\\n\t-att* | -7300* | -3300* | -delta* | -motorola* | -sun[234]* | \\\n\t-unicom* | -ibm* | -next | -hp | -isi* | -apollo | -altos* | \\\n\t-convergent* | -ncr* | -news | -32* | -3600* | -3100* | -hitachi* |\\\n\t-c[123]* | -convex* | -sun | -crds | -omron* | -dg | -ultra | -tti* | \\\n\t-harris | -dolphin | -highlevel | -gould | -cbm | -ns | -masscomp | \\\n\t-apple | -axis | -knuth | -cray | -microblaze*)\n\t\tos=\n\t\tbasic_machine=$1\n\t\t;;\n\t-bluegene*)\n\t\tos=-cnk\n\t\t;;\n\t-sim | -cisco | -oki | -wec | -winbond)\n\t\tos=\n\t\tbasic_machine=$1\n\t\t;;\n\t-scout)\n\t\t;;\n\t-wrs)\n\t\tos=-vxworks\n\t\tbasic_machine=$1\n\t\t;;\n\t-chorusos*)\n\t\tos=-chorusos\n\t\tbasic_machine=$1\n\t\t;;\n\t-chorusrdb)\n\t\tos=-chorusrdb\n\t\tbasic_machine=$1\n\t\t;;\n\t-hiux*)\n\t\tos=-hiuxwe2\n\t\t;;\n\t-sco6)\n\t\tos=-sco5v6\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco5)\n\t\tos=-sco3.2v5\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco4)\n\t\tos=-sco3.2v4\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco3.2.[4-9]*)\n\t\tos=`echo $os | sed -e 's/sco3.2./sco3.2v/'`\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco3.2v[4-9]*)\n\t\t# Don't forget version if it is 3.2v4 or newer.\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco5v6*)\n\t\t# Don't forget version if it is 3.2v4 or newer.\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-sco*)\n\t\tos=-sco3.2v2\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-udk*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-isc)\n\t\tos=-isc2.2\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-clix*)\n\t\tbasic_machine=clipper-intergraph\n\t\t;;\n\t-isc*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-pc/'`\n\t\t;;\n\t-lynx*178)\n\t\tos=-lynxos178\n\t\t;;\n\t-lynx*5)\n\t\tos=-lynxos5\n\t\t;;\n\t-lynx*)\n\t\tos=-lynxos\n\t\t;;\n\t-ptx*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86-.*/86-sequent/'`\n\t\t;;\n\t-windowsnt*)\n\t\tos=`echo $os | sed -e 's/windowsnt/winnt/'`\n\t\t;;\n\t-psos*)\n\t\tos=-psos\n\t\t;;\n\t-mint | -mint[0-9]*)\n\t\tbasic_machine=m68k-atari\n\t\tos=-mint\n\t\t;;\nesac\n\n# Decode aliases for certain CPU-COMPANY combinations.\ncase $basic_machine in\n\t# Recognize the basic CPU types without company name.\n\t# Some are omitted here because they have special meanings below.\n\t1750a | 580 \\\n\t| a29k \\\n\t| aarch64 | aarch64_be \\\n\t| alpha | alphaev[4-8] | alphaev56 | alphaev6[78] | alphapca5[67] \\\n\t| alpha64 | alpha64ev[4-8] | alpha64ev56 | alpha64ev6[78] | alpha64pca5[67] \\\n\t| am33_2.0 \\\n\t| arc | arceb \\\n\t| arm | arm[bl]e | arme[lb] | armv[2-8] | armv[3-8][lb] | armv7[arm] \\\n\t| avr | avr32 \\\n\t| be32 | be64 \\\n\t| bfin \\\n\t| c4x | c8051 | clipper \\\n\t| d10v | d30v | dlx | dsp16xx \\\n\t| epiphany \\\n\t| fido | fr30 | frv \\\n\t| h8300 | h8500 | hppa | hppa1.[01] | hppa2.0 | hppa2.0[nw] | hppa64 \\\n\t| hexagon \\\n\t| i370 | i860 | i960 | ia64 \\\n\t| ip2k | iq2000 \\\n\t| k1om \\\n\t| le32 | le64 \\\n\t| lm32 \\\n\t| m32c | m32r | m32rle | m68000 | m68k | m88k \\\n\t| maxq | mb | microblaze | microblazeel | mcore | mep | metag \\\n\t| mips | mipsbe | mipseb | mipsel | mipsle \\\n\t| mips16 \\\n\t| mips64 | mips64el \\\n\t| mips64octeon | mips64octeonel \\\n\t| mips64orion | mips64orionel \\\n\t| mips64r5900 | mips64r5900el \\\n\t| mips64vr | mips64vrel \\\n\t| mips64vr4100 | mips64vr4100el \\\n\t| mips64vr4300 | mips64vr4300el \\\n\t| mips64vr5000 | mips64vr5000el \\\n\t| mips64vr5900 | mips64vr5900el \\\n\t| mipsisa32 | mipsisa32el \\\n\t| mipsisa32r2 | mipsisa32r2el \\\n\t| mipsisa32r6 | mipsisa32r6el \\\n\t| mipsisa64 | mipsisa64el \\\n\t| mipsisa64r2 | mipsisa64r2el \\\n\t| mipsisa64r6 | mipsisa64r6el \\\n\t| mipsisa64sb1 | mipsisa64sb1el \\\n\t| mipsisa64sr71k | mipsisa64sr71kel \\\n\t| mipsr5900 | mipsr5900el \\\n\t| mipstx39 | mipstx39el \\\n\t| mn10200 | mn10300 \\\n\t| moxie \\\n\t| mt \\\n\t| msp430 \\\n\t| nds32 | nds32le | nds32be \\\n\t| nios | nios2 | nios2eb | nios2el \\\n\t| ns16k | ns32k \\\n\t| open8 | or1k | or1knd | or32 \\\n\t| pdp10 | pdp11 | pj | pjl \\\n\t| powerpc | powerpc64 | powerpc64le | powerpcle \\\n\t| pyramid \\\n\t| riscv32 | riscv64 \\\n\t| rl78 | rx \\\n\t| score \\\n\t| sh | sh[1234] | sh[24]a | sh[24]aeb | sh[23]e | sh[34]eb | sheb | shbe | shle | sh[1234]le | sh3ele \\\n\t| sh64 | sh64le \\\n\t| sparc | sparc64 | sparc64b | sparc64v | sparc86x | sparclet | sparclite \\\n\t| sparcv8 | sparcv9 | sparcv9b | sparcv9v \\\n\t| spu \\\n\t| tahoe | tic4x | tic54x | tic55x | tic6x | tic80 | tron \\\n\t| ubicom32 \\\n\t| v850 | v850e | v850e1 | v850e2 | v850es | v850e2v3 \\\n\t| we32k \\\n\t| x86 | xc16x | xstormy16 | xtensa \\\n\t| z8k | z80)\n\t\tbasic_machine=$basic_machine-unknown\n\t\t;;\n\tc54x)\n\t\tbasic_machine=tic54x-unknown\n\t\t;;\n\tc55x)\n\t\tbasic_machine=tic55x-unknown\n\t\t;;\n\tc6x)\n\t\tbasic_machine=tic6x-unknown\n\t\t;;\n\tm6811 | m68hc11 | m6812 | m68hc12 | m68hcs12x | nvptx | picochip)\n\t\tbasic_machine=$basic_machine-unknown\n\t\tos=-none\n\t\t;;\n\tm88110 | m680[12346]0 | m683?2 | m68360 | m5200 | v70 | w65 | z8k)\n\t\t;;\n\tms1)\n\t\tbasic_machine=mt-unknown\n\t\t;;\n\n\tstrongarm | thumb | xscale)\n\t\tbasic_machine=arm-unknown\n\t\t;;\n\txgate)\n\t\tbasic_machine=$basic_machine-unknown\n\t\tos=-none\n\t\t;;\n\txscaleeb)\n\t\tbasic_machine=armeb-unknown\n\t\t;;\n\n\txscaleel)\n\t\tbasic_machine=armel-unknown\n\t\t;;\n\n\t# We use `pc' rather than `unknown'\n\t# because (1) that's what they normally are, and\n\t# (2) the word \"unknown\" tends to confuse beginning users.\n\ti*86 | x86_64)\n\t  basic_machine=$basic_machine-pc\n\t  ;;\n\t# Object if more than one company name word.\n\t*-*-*)\n\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\n\t# Recognize the basic CPU types with company name.\n\t580-* \\\n\t| a29k-* \\\n\t| aarch64-* | aarch64_be-* \\\n\t| alpha-* | alphaev[4-8]-* | alphaev56-* | alphaev6[78]-* \\\n\t| alpha64-* | alpha64ev[4-8]-* | alpha64ev56-* | alpha64ev6[78]-* \\\n\t| alphapca5[67]-* | alpha64pca5[67]-* | arc-* | arceb-* \\\n\t| arm-*  | armbe-* | armle-* | armeb-* | armv*-* \\\n\t| avr-* | avr32-* \\\n\t| be32-* | be64-* \\\n\t| bfin-* | bs2000-* \\\n\t| c[123]* | c30-* | [cjt]90-* | c4x-* \\\n\t| c8051-* | clipper-* | craynv-* | cydra-* \\\n\t| d10v-* | d30v-* | dlx-* \\\n\t| elxsi-* \\\n\t| f30[01]-* | f700-* | fido-* | fr30-* | frv-* | fx80-* \\\n\t| h8300-* | h8500-* \\\n\t| hppa-* | hppa1.[01]-* | hppa2.0-* | hppa2.0[nw]-* | hppa64-* \\\n\t| hexagon-* \\\n\t| i*86-* | i860-* | i960-* | ia64-* \\\n\t| ip2k-* | iq2000-* \\\n\t| k1om-* \\\n\t| le32-* | le64-* \\\n\t| lm32-* \\\n\t| m32c-* | m32r-* | m32rle-* \\\n\t| m68000-* | m680[012346]0-* | m68360-* | m683?2-* | m68k-* \\\n\t| m88110-* | m88k-* | maxq-* | mcore-* | metag-* \\\n\t| microblaze-* | microblazeel-* \\\n\t| mips-* | mipsbe-* | mipseb-* | mipsel-* | mipsle-* \\\n\t| mips16-* \\\n\t| mips64-* | mips64el-* \\\n\t| mips64octeon-* | mips64octeonel-* \\\n\t| mips64orion-* | mips64orionel-* \\\n\t| mips64r5900-* | mips64r5900el-* \\\n\t| mips64vr-* | mips64vrel-* \\\n\t| mips64vr4100-* | mips64vr4100el-* \\\n\t| mips64vr4300-* | mips64vr4300el-* \\\n\t| mips64vr5000-* | mips64vr5000el-* \\\n\t| mips64vr5900-* | mips64vr5900el-* \\\n\t| mipsisa32-* | mipsisa32el-* \\\n\t| mipsisa32r2-* | mipsisa32r2el-* \\\n\t| mipsisa32r6-* | mipsisa32r6el-* \\\n\t| mipsisa64-* | mipsisa64el-* \\\n\t| mipsisa64r2-* | mipsisa64r2el-* \\\n\t| mipsisa64r6-* | mipsisa64r6el-* \\\n\t| mipsisa64sb1-* | mipsisa64sb1el-* \\\n\t| mipsisa64sr71k-* | mipsisa64sr71kel-* \\\n\t| mipsr5900-* | mipsr5900el-* \\\n\t| mipstx39-* | mipstx39el-* \\\n\t| mmix-* \\\n\t| mt-* \\\n\t| msp430-* \\\n\t| nds32-* | nds32le-* | nds32be-* \\\n\t| nios-* | nios2-* | nios2eb-* | nios2el-* \\\n\t| none-* | np1-* | ns16k-* | ns32k-* \\\n\t| open8-* \\\n\t| or1k*-* \\\n\t| orion-* \\\n\t| pdp10-* | pdp11-* | pj-* | pjl-* | pn-* | power-* \\\n\t| powerpc-* | powerpc64-* | powerpc64le-* | powerpcle-* \\\n\t| pyramid-* \\\n\t| rl78-* | romp-* | rs6000-* | rx-* \\\n\t| sh-* | sh[1234]-* | sh[24]a-* | sh[24]aeb-* | sh[23]e-* | sh[34]eb-* | sheb-* | shbe-* \\\n\t| shle-* | sh[1234]le-* | sh3ele-* | sh64-* | sh64le-* \\\n\t| sparc-* | sparc64-* | sparc64b-* | sparc64v-* | sparc86x-* | sparclet-* \\\n\t| sparclite-* \\\n\t| sparcv8-* | sparcv9-* | sparcv9b-* | sparcv9v-* | sv1-* | sx?-* \\\n\t| tahoe-* \\\n\t| tic30-* | tic4x-* | tic54x-* | tic55x-* | tic6x-* | tic80-* \\\n\t| tile*-* \\\n\t| tron-* \\\n\t| ubicom32-* \\\n\t| v850-* | v850e-* | v850e1-* | v850es-* | v850e2-* | v850e2v3-* \\\n\t| vax-* \\\n\t| we32k-* \\\n\t| x86-* | x86_64-* | xc16x-* | xps100-* \\\n\t| xstormy16-* | xtensa*-* \\\n\t| ymp-* \\\n\t| z8k-* | z80-*)\n\t\t;;\n\t# Recognize the basic CPU types without company name, with glob match.\n\txtensa*)\n\t\tbasic_machine=$basic_machine-unknown\n\t\t;;\n\t# Recognize the various machine names and aliases which stand\n\t# for a CPU type and a company and sometimes even an OS.\n\t386bsd)\n\t\tbasic_machine=i386-unknown\n\t\tos=-bsd\n\t\t;;\n\t3b1 | 7300 | 7300-att | att-7300 | pc7300 | safari | unixpc)\n\t\tbasic_machine=m68000-att\n\t\t;;\n\t3b*)\n\t\tbasic_machine=we32k-att\n\t\t;;\n\ta29khif)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tabacus)\n\t\tbasic_machine=abacus-unknown\n\t\t;;\n\tadobe68k)\n\t\tbasic_machine=m68010-adobe\n\t\tos=-scout\n\t\t;;\n\talliant | fx80)\n\t\tbasic_machine=fx80-alliant\n\t\t;;\n\taltos | altos3068)\n\t\tbasic_machine=m68k-altos\n\t\t;;\n\tam29k)\n\t\tbasic_machine=a29k-none\n\t\tos=-bsd\n\t\t;;\n\tamd64)\n\t\tbasic_machine=x86_64-pc\n\t\t;;\n\tamd64-*)\n\t\tbasic_machine=x86_64-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tamdahl)\n\t\tbasic_machine=580-amdahl\n\t\tos=-sysv\n\t\t;;\n\tamiga | amiga-*)\n\t\tbasic_machine=m68k-unknown\n\t\t;;\n\tamigaos | amigados)\n\t\tbasic_machine=m68k-unknown\n\t\tos=-amigaos\n\t\t;;\n\tamigaunix | amix)\n\t\tbasic_machine=m68k-unknown\n\t\tos=-sysv4\n\t\t;;\n\tapollo68)\n\t\tbasic_machine=m68k-apollo\n\t\tos=-sysv\n\t\t;;\n\tapollo68bsd)\n\t\tbasic_machine=m68k-apollo\n\t\tos=-bsd\n\t\t;;\n\taros)\n\t\tbasic_machine=i386-pc\n\t\tos=-aros\n\t\t;;\n\taux)\n\t\tbasic_machine=m68k-apple\n\t\tos=-aux\n\t\t;;\n\tbalance)\n\t\tbasic_machine=ns32k-sequent\n\t\tos=-dynix\n\t\t;;\n\tblackfin)\n\t\tbasic_machine=bfin-unknown\n\t\tos=-linux\n\t\t;;\n\tblackfin-*)\n\t\tbasic_machine=bfin-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\tos=-linux\n\t\t;;\n\tbluegene*)\n\t\tbasic_machine=powerpc-ibm\n\t\tos=-cnk\n\t\t;;\n\tc54x-*)\n\t\tbasic_machine=tic54x-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tc55x-*)\n\t\tbasic_machine=tic55x-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tc6x-*)\n\t\tbasic_machine=tic6x-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tc90)\n\t\tbasic_machine=c90-cray\n\t\tos=-unicos\n\t\t;;\n\tcegcc)\n\t\tbasic_machine=arm-unknown\n\t\tos=-cegcc\n\t\t;;\n\tconvex-c1)\n\t\tbasic_machine=c1-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c2)\n\t\tbasic_machine=c2-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c32)\n\t\tbasic_machine=c32-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c34)\n\t\tbasic_machine=c34-convex\n\t\tos=-bsd\n\t\t;;\n\tconvex-c38)\n\t\tbasic_machine=c38-convex\n\t\tos=-bsd\n\t\t;;\n\tcray | j90)\n\t\tbasic_machine=j90-cray\n\t\tos=-unicos\n\t\t;;\n\tcraynv)\n\t\tbasic_machine=craynv-cray\n\t\tos=-unicosmp\n\t\t;;\n\tcr16 | cr16-*)\n\t\tbasic_machine=cr16-unknown\n\t\tos=-elf\n\t\t;;\n\tcrds | unos)\n\t\tbasic_machine=m68k-crds\n\t\t;;\n\tcrisv32 | crisv32-* | etraxfs*)\n\t\tbasic_machine=crisv32-axis\n\t\t;;\n\tcris | cris-* | etrax*)\n\t\tbasic_machine=cris-axis\n\t\t;;\n\tcrx)\n\t\tbasic_machine=crx-unknown\n\t\tos=-elf\n\t\t;;\n\tda30 | da30-*)\n\t\tbasic_machine=m68k-da30\n\t\t;;\n\tdecstation | decstation-3100 | pmax | pmax-* | pmin | dec3100 | decstatn)\n\t\tbasic_machine=mips-dec\n\t\t;;\n\tdecsystem10* | dec10*)\n\t\tbasic_machine=pdp10-dec\n\t\tos=-tops10\n\t\t;;\n\tdecsystem20* | dec20*)\n\t\tbasic_machine=pdp10-dec\n\t\tos=-tops20\n\t\t;;\n\tdelta | 3300 | motorola-3300 | motorola-delta \\\n\t      | 3300-motorola | delta-motorola)\n\t\tbasic_machine=m68k-motorola\n\t\t;;\n\tdelta88)\n\t\tbasic_machine=m88k-motorola\n\t\tos=-sysv3\n\t\t;;\n\tdicos)\n\t\tbasic_machine=i686-pc\n\t\tos=-dicos\n\t\t;;\n\tdjgpp)\n\t\tbasic_machine=i586-pc\n\t\tos=-msdosdjgpp\n\t\t;;\n\tdpx20 | dpx20-*)\n\t\tbasic_machine=rs6000-bull\n\t\tos=-bosx\n\t\t;;\n\tdpx2* | dpx2*-bull)\n\t\tbasic_machine=m68k-bull\n\t\tos=-sysv3\n\t\t;;\n\tebmon29k)\n\t\tbasic_machine=a29k-amd\n\t\tos=-ebmon\n\t\t;;\n\telxsi)\n\t\tbasic_machine=elxsi-elxsi\n\t\tos=-bsd\n\t\t;;\n\tencore | umax | mmax)\n\t\tbasic_machine=ns32k-encore\n\t\t;;\n\tes1800 | OSE68k | ose68k | ose | OSE)\n\t\tbasic_machine=m68k-ericsson\n\t\tos=-ose\n\t\t;;\n\tfx2800)\n\t\tbasic_machine=i860-alliant\n\t\t;;\n\tgenix)\n\t\tbasic_machine=ns32k-ns\n\t\t;;\n\tgmicro)\n\t\tbasic_machine=tron-gmicro\n\t\tos=-sysv\n\t\t;;\n\tgo32)\n\t\tbasic_machine=i386-pc\n\t\tos=-go32\n\t\t;;\n\th3050r* | hiux*)\n\t\tbasic_machine=hppa1.1-hitachi\n\t\tos=-hiuxwe2\n\t\t;;\n\th8300hms)\n\t\tbasic_machine=h8300-hitachi\n\t\tos=-hms\n\t\t;;\n\th8300xray)\n\t\tbasic_machine=h8300-hitachi\n\t\tos=-xray\n\t\t;;\n\th8500hms)\n\t\tbasic_machine=h8500-hitachi\n\t\tos=-hms\n\t\t;;\n\tharris)\n\t\tbasic_machine=m88k-harris\n\t\tos=-sysv3\n\t\t;;\n\thp300-*)\n\t\tbasic_machine=m68k-hp\n\t\t;;\n\thp300bsd)\n\t\tbasic_machine=m68k-hp\n\t\tos=-bsd\n\t\t;;\n\thp300hpux)\n\t\tbasic_machine=m68k-hp\n\t\tos=-hpux\n\t\t;;\n\thp3k9[0-9][0-9] | hp9[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thp9k2[0-9][0-9] | hp9k31[0-9])\n\t\tbasic_machine=m68000-hp\n\t\t;;\n\thp9k3[2-9][0-9])\n\t\tbasic_machine=m68k-hp\n\t\t;;\n\thp9k6[0-9][0-9] | hp6[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thp9k7[0-79][0-9] | hp7[0-79][0-9])\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k78[0-9] | hp78[0-9])\n\t\t# FIXME: really hppa2.0-hp\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[67]1 | hp8[67]1 | hp9k80[24] | hp80[24] | hp9k8[78]9 | hp8[78]9 | hp9k893 | hp893)\n\t\t# FIXME: really hppa2.0-hp\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[0-9][13679] | hp8[0-9][13679])\n\t\tbasic_machine=hppa1.1-hp\n\t\t;;\n\thp9k8[0-9][0-9] | hp8[0-9][0-9])\n\t\tbasic_machine=hppa1.0-hp\n\t\t;;\n\thppa-next)\n\t\tos=-nextstep3\n\t\t;;\n\thppaosf)\n\t\tbasic_machine=hppa1.1-hp\n\t\tos=-osf\n\t\t;;\n\thppro)\n\t\tbasic_machine=hppa1.1-hp\n\t\tos=-proelf\n\t\t;;\n\ti370-ibm* | ibm*)\n\t\tbasic_machine=i370-ibm\n\t\t;;\n\ti*86v32)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv32\n\t\t;;\n\ti*86v4*)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv4\n\t\t;;\n\ti*86v)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-sysv\n\t\t;;\n\ti*86sol2)\n\t\tbasic_machine=`echo $1 | sed -e 's/86.*/86-pc/'`\n\t\tos=-solaris2\n\t\t;;\n\ti386mach)\n\t\tbasic_machine=i386-mach\n\t\tos=-mach\n\t\t;;\n\ti386-vsta | vsta)\n\t\tbasic_machine=i386-unknown\n\t\tos=-vsta\n\t\t;;\n\tiris | iris4d)\n\t\tbasic_machine=mips-sgi\n\t\tcase $os in\n\t\t    -irix*)\n\t\t\t;;\n\t\t    *)\n\t\t\tos=-irix4\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tisi68 | isi)\n\t\tbasic_machine=m68k-isi\n\t\tos=-sysv\n\t\t;;\n\tm68knommu)\n\t\tbasic_machine=m68k-unknown\n\t\tos=-linux\n\t\t;;\n\tm68knommu-*)\n\t\tbasic_machine=m68k-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\tos=-linux\n\t\t;;\n\tm88k-omron*)\n\t\tbasic_machine=m88k-omron\n\t\t;;\n\tmagnum | m3230)\n\t\tbasic_machine=mips-mips\n\t\tos=-sysv\n\t\t;;\n\tmerlin)\n\t\tbasic_machine=ns32k-utek\n\t\tos=-sysv\n\t\t;;\n\tmicroblaze*)\n\t\tbasic_machine=microblaze-xilinx\n\t\t;;\n\tmingw64)\n\t\tbasic_machine=x86_64-pc\n\t\tos=-mingw64\n\t\t;;\n\tmingw32)\n\t\tbasic_machine=i686-pc\n\t\tos=-mingw32\n\t\t;;\n\tmingw32ce)\n\t\tbasic_machine=arm-unknown\n\t\tos=-mingw32ce\n\t\t;;\n\tminiframe)\n\t\tbasic_machine=m68000-convergent\n\t\t;;\n\t*mint | -mint[0-9]* | *MiNT | *MiNT[0-9]*)\n\t\tbasic_machine=m68k-atari\n\t\tos=-mint\n\t\t;;\n\tmips3*-*)\n\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`\n\t\t;;\n\tmips3*)\n\t\tbasic_machine=`echo $basic_machine | sed -e 's/mips3/mips64/'`-unknown\n\t\t;;\n\tmonitor)\n\t\tbasic_machine=m68k-rom68k\n\t\tos=-coff\n\t\t;;\n\tmorphos)\n\t\tbasic_machine=powerpc-unknown\n\t\tos=-morphos\n\t\t;;\n\tmoxiebox)\n\t\tbasic_machine=moxie-unknown\n\t\tos=-moxiebox\n\t\t;;\n\tmsdos)\n\t\tbasic_machine=i386-pc\n\t\tos=-msdos\n\t\t;;\n\tms1-*)\n\t\tbasic_machine=`echo $basic_machine | sed -e 's/ms1-/mt-/'`\n\t\t;;\n\tmsys)\n\t\tbasic_machine=i686-pc\n\t\tos=-msys\n\t\t;;\n\tmvs)\n\t\tbasic_machine=i370-ibm\n\t\tos=-mvs\n\t\t;;\n\tnacl)\n\t\tbasic_machine=le32-unknown\n\t\tos=-nacl\n\t\t;;\n\tncr3000)\n\t\tbasic_machine=i486-ncr\n\t\tos=-sysv4\n\t\t;;\n\tnetbsd386)\n\t\tbasic_machine=i386-unknown\n\t\tos=-netbsd\n\t\t;;\n\tnetwinder)\n\t\tbasic_machine=armv4l-rebel\n\t\tos=-linux\n\t\t;;\n\tnews | news700 | news800 | news900)\n\t\tbasic_machine=m68k-sony\n\t\tos=-newsos\n\t\t;;\n\tnews1000)\n\t\tbasic_machine=m68030-sony\n\t\tos=-newsos\n\t\t;;\n\tnews-3600 | risc-news)\n\t\tbasic_machine=mips-sony\n\t\tos=-newsos\n\t\t;;\n\tnecv70)\n\t\tbasic_machine=v70-nec\n\t\tos=-sysv\n\t\t;;\n\tnext | m*-next )\n\t\tbasic_machine=m68k-next\n\t\tcase $os in\n\t\t    -nextstep* )\n\t\t\t;;\n\t\t    -ns2*)\n\t\t      os=-nextstep2\n\t\t\t;;\n\t\t    *)\n\t\t      os=-nextstep3\n\t\t\t;;\n\t\tesac\n\t\t;;\n\tnh3000)\n\t\tbasic_machine=m68k-harris\n\t\tos=-cxux\n\t\t;;\n\tnh[45]000)\n\t\tbasic_machine=m88k-harris\n\t\tos=-cxux\n\t\t;;\n\tnindy960)\n\t\tbasic_machine=i960-intel\n\t\tos=-nindy\n\t\t;;\n\tmon960)\n\t\tbasic_machine=i960-intel\n\t\tos=-mon960\n\t\t;;\n\tnonstopux)\n\t\tbasic_machine=mips-compaq\n\t\tos=-nonstopux\n\t\t;;\n\tnp1)\n\t\tbasic_machine=np1-gould\n\t\t;;\n\tneo-tandem)\n\t\tbasic_machine=neo-tandem\n\t\t;;\n\tnse-tandem)\n\t\tbasic_machine=nse-tandem\n\t\t;;\n\tnsr-tandem)\n\t\tbasic_machine=nsr-tandem\n\t\t;;\n\top50n-* | op60c-*)\n\t\tbasic_machine=hppa1.1-oki\n\t\tos=-proelf\n\t\t;;\n\topenrisc | openrisc-*)\n\t\tbasic_machine=or32-unknown\n\t\t;;\n\tos400)\n\t\tbasic_machine=powerpc-ibm\n\t\tos=-os400\n\t\t;;\n\tOSE68000 | ose68000)\n\t\tbasic_machine=m68000-ericsson\n\t\tos=-ose\n\t\t;;\n\tos68k)\n\t\tbasic_machine=m68k-none\n\t\tos=-os68k\n\t\t;;\n\tpa-hitachi)\n\t\tbasic_machine=hppa1.1-hitachi\n\t\tos=-hiuxwe2\n\t\t;;\n\tparagon)\n\t\tbasic_machine=i860-intel\n\t\tos=-osf\n\t\t;;\n\tparisc)\n\t\tbasic_machine=hppa-unknown\n\t\tos=-linux\n\t\t;;\n\tparisc-*)\n\t\tbasic_machine=hppa-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\tos=-linux\n\t\t;;\n\tpbd)\n\t\tbasic_machine=sparc-tti\n\t\t;;\n\tpbb)\n\t\tbasic_machine=m68k-tti\n\t\t;;\n\tpc532 | pc532-*)\n\t\tbasic_machine=ns32k-pc532\n\t\t;;\n\tpc98)\n\t\tbasic_machine=i386-pc\n\t\t;;\n\tpc98-*)\n\t\tbasic_machine=i386-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentium | p5 | k5 | k6 | nexgen | viac3)\n\t\tbasic_machine=i586-pc\n\t\t;;\n\tpentiumpro | p6 | 6x86 | athlon | athlon_*)\n\t\tbasic_machine=i686-pc\n\t\t;;\n\tpentiumii | pentium2 | pentiumiii | pentium3)\n\t\tbasic_machine=i686-pc\n\t\t;;\n\tpentium4)\n\t\tbasic_machine=i786-pc\n\t\t;;\n\tpentium-* | p5-* | k5-* | k6-* | nexgen-* | viac3-*)\n\t\tbasic_machine=i586-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentiumpro-* | p6-* | 6x86-* | athlon-*)\n\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentiumii-* | pentium2-* | pentiumiii-* | pentium3-*)\n\t\tbasic_machine=i686-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpentium4-*)\n\t\tbasic_machine=i786-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tpn)\n\t\tbasic_machine=pn-gould\n\t\t;;\n\tpower)\tbasic_machine=power-ibm\n\t\t;;\n\tppc | ppcbe)\tbasic_machine=powerpc-unknown\n\t\t;;\n\tppc-* | ppcbe-*)\n\t\tbasic_machine=powerpc-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppcle | powerpclittle | ppc-le | powerpc-little)\n\t\tbasic_machine=powerpcle-unknown\n\t\t;;\n\tppcle-* | powerpclittle-*)\n\t\tbasic_machine=powerpcle-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppc64)\tbasic_machine=powerpc64-unknown\n\t\t;;\n\tppc64-*) basic_machine=powerpc64-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tppc64le | powerpc64little | ppc64-le | powerpc64-little)\n\t\tbasic_machine=powerpc64le-unknown\n\t\t;;\n\tppc64le-* | powerpc64little-*)\n\t\tbasic_machine=powerpc64le-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tps2)\n\t\tbasic_machine=i386-ibm\n\t\t;;\n\tpw32)\n\t\tbasic_machine=i586-unknown\n\t\tos=-pw32\n\t\t;;\n\trdos | rdos64)\n\t\tbasic_machine=x86_64-pc\n\t\tos=-rdos\n\t\t;;\n\trdos32)\n\t\tbasic_machine=i386-pc\n\t\tos=-rdos\n\t\t;;\n\trom68k)\n\t\tbasic_machine=m68k-rom68k\n\t\tos=-coff\n\t\t;;\n\trm[46]00)\n\t\tbasic_machine=mips-siemens\n\t\t;;\n\trtpc | rtpc-*)\n\t\tbasic_machine=romp-ibm\n\t\t;;\n\ts390 | s390-*)\n\t\tbasic_machine=s390-ibm\n\t\t;;\n\ts390x | s390x-*)\n\t\tbasic_machine=s390x-ibm\n\t\t;;\n\tsa29200)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tsb1)\n\t\tbasic_machine=mipsisa64sb1-unknown\n\t\t;;\n\tsb1el)\n\t\tbasic_machine=mipsisa64sb1el-unknown\n\t\t;;\n\tsde)\n\t\tbasic_machine=mipsisa32-sde\n\t\tos=-elf\n\t\t;;\n\tsei)\n\t\tbasic_machine=mips-sei\n\t\tos=-seiux\n\t\t;;\n\tsequent)\n\t\tbasic_machine=i386-sequent\n\t\t;;\n\tsh)\n\t\tbasic_machine=sh-hitachi\n\t\tos=-hms\n\t\t;;\n\tsh5el)\n\t\tbasic_machine=sh5le-unknown\n\t\t;;\n\tsh64)\n\t\tbasic_machine=sh64-unknown\n\t\t;;\n\tsparclite-wrs | simso-wrs)\n\t\tbasic_machine=sparclite-wrs\n\t\tos=-vxworks\n\t\t;;\n\tsps7)\n\t\tbasic_machine=m68k-bull\n\t\tos=-sysv2\n\t\t;;\n\tspur)\n\t\tbasic_machine=spur-unknown\n\t\t;;\n\tst2000)\n\t\tbasic_machine=m68k-tandem\n\t\t;;\n\tstratus)\n\t\tbasic_machine=i860-stratus\n\t\tos=-sysv4\n\t\t;;\n\tstrongarm-* | thumb-*)\n\t\tbasic_machine=arm-`echo $basic_machine | sed 's/^[^-]*-//'`\n\t\t;;\n\tsun2)\n\t\tbasic_machine=m68000-sun\n\t\t;;\n\tsun2os3)\n\t\tbasic_machine=m68000-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun2os4)\n\t\tbasic_machine=m68000-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun3os3)\n\t\tbasic_machine=m68k-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun3os4)\n\t\tbasic_machine=m68k-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun4os3)\n\t\tbasic_machine=sparc-sun\n\t\tos=-sunos3\n\t\t;;\n\tsun4os4)\n\t\tbasic_machine=sparc-sun\n\t\tos=-sunos4\n\t\t;;\n\tsun4sol2)\n\t\tbasic_machine=sparc-sun\n\t\tos=-solaris2\n\t\t;;\n\tsun3 | sun3-*)\n\t\tbasic_machine=m68k-sun\n\t\t;;\n\tsun4)\n\t\tbasic_machine=sparc-sun\n\t\t;;\n\tsun386 | sun386i | roadrunner)\n\t\tbasic_machine=i386-sun\n\t\t;;\n\tsv1)\n\t\tbasic_machine=sv1-cray\n\t\tos=-unicos\n\t\t;;\n\tsymmetry)\n\t\tbasic_machine=i386-sequent\n\t\tos=-dynix\n\t\t;;\n\tt3e)\n\t\tbasic_machine=alphaev5-cray\n\t\tos=-unicos\n\t\t;;\n\tt90)\n\t\tbasic_machine=t90-cray\n\t\tos=-unicos\n\t\t;;\n\ttile*)\n\t\tbasic_machine=$basic_machine-unknown\n\t\tos=-linux-gnu\n\t\t;;\n\ttx39)\n\t\tbasic_machine=mipstx39-unknown\n\t\t;;\n\ttx39el)\n\t\tbasic_machine=mipstx39el-unknown\n\t\t;;\n\ttoad1)\n\t\tbasic_machine=pdp10-xkl\n\t\tos=-tops20\n\t\t;;\n\ttower | tower-32)\n\t\tbasic_machine=m68k-ncr\n\t\t;;\n\ttpf)\n\t\tbasic_machine=s390x-ibm\n\t\tos=-tpf\n\t\t;;\n\tudi29k)\n\t\tbasic_machine=a29k-amd\n\t\tos=-udi\n\t\t;;\n\tultra3)\n\t\tbasic_machine=a29k-nyu\n\t\tos=-sym1\n\t\t;;\n\tv810 | necv810)\n\t\tbasic_machine=v810-nec\n\t\tos=-none\n\t\t;;\n\tvaxv)\n\t\tbasic_machine=vax-dec\n\t\tos=-sysv\n\t\t;;\n\tvms)\n\t\tbasic_machine=vax-dec\n\t\tos=-vms\n\t\t;;\n\tvpp*|vx|vx-*)\n\t\tbasic_machine=f301-fujitsu\n\t\t;;\n\tvxworks960)\n\t\tbasic_machine=i960-wrs\n\t\tos=-vxworks\n\t\t;;\n\tvxworks68)\n\t\tbasic_machine=m68k-wrs\n\t\tos=-vxworks\n\t\t;;\n\tvxworks29k)\n\t\tbasic_machine=a29k-wrs\n\t\tos=-vxworks\n\t\t;;\n\tw65*)\n\t\tbasic_machine=w65-wdc\n\t\tos=-none\n\t\t;;\n\tw89k-*)\n\t\tbasic_machine=hppa1.1-winbond\n\t\tos=-proelf\n\t\t;;\n\txbox)\n\t\tbasic_machine=i686-pc\n\t\tos=-mingw32\n\t\t;;\n\txps | xps100)\n\t\tbasic_machine=xps100-honeywell\n\t\t;;\n\txscale-* | xscalee[bl]-*)\n\t\tbasic_machine=`echo $basic_machine | sed 's/^xscale/arm/'`\n\t\t;;\n\tymp)\n\t\tbasic_machine=ymp-cray\n\t\tos=-unicos\n\t\t;;\n\tz8k-*-coff)\n\t\tbasic_machine=z8k-unknown\n\t\tos=-sim\n\t\t;;\n\tz80-*-coff)\n\t\tbasic_machine=z80-unknown\n\t\tos=-sim\n\t\t;;\n\tnone)\n\t\tbasic_machine=none-none\n\t\tos=-none\n\t\t;;\n\n# Here we handle the default manufacturer of certain CPU types.  It is in\n# some cases the only manufacturer, in others, it is the most popular.\n\tw89k)\n\t\tbasic_machine=hppa1.1-winbond\n\t\t;;\n\top50n)\n\t\tbasic_machine=hppa1.1-oki\n\t\t;;\n\top60c)\n\t\tbasic_machine=hppa1.1-oki\n\t\t;;\n\tromp)\n\t\tbasic_machine=romp-ibm\n\t\t;;\n\tmmix)\n\t\tbasic_machine=mmix-knuth\n\t\t;;\n\trs6000)\n\t\tbasic_machine=rs6000-ibm\n\t\t;;\n\tvax)\n\t\tbasic_machine=vax-dec\n\t\t;;\n\tpdp10)\n\t\t# there are many clones, so DEC is not a safe bet\n\t\tbasic_machine=pdp10-unknown\n\t\t;;\n\tpdp11)\n\t\tbasic_machine=pdp11-dec\n\t\t;;\n\twe32k)\n\t\tbasic_machine=we32k-att\n\t\t;;\n\tsh[1234] | sh[24]a | sh[24]aeb | sh[34]eb | sh[1234]le | sh[23]ele)\n\t\tbasic_machine=sh-unknown\n\t\t;;\n\tsparc | sparcv8 | sparcv9 | sparcv9b | sparcv9v)\n\t\tbasic_machine=sparc-sun\n\t\t;;\n\tcydra)\n\t\tbasic_machine=cydra-cydrome\n\t\t;;\n\torion)\n\t\tbasic_machine=orion-highlevel\n\t\t;;\n\torion105)\n\t\tbasic_machine=clipper-highlevel\n\t\t;;\n\tmac | mpw | mac-mpw)\n\t\tbasic_machine=m68k-apple\n\t\t;;\n\tpmac | pmac-mpw)\n\t\tbasic_machine=powerpc-apple\n\t\t;;\n\t*-unknown)\n\t\t# Make sure to match an already-canonicalized machine name.\n\t\t;;\n\t*)\n\t\techo Invalid configuration \\`$1\\': machine \\`$basic_machine\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\nesac\n\n# Here we canonicalize certain aliases for manufacturers.\ncase $basic_machine in\n\t*-digital*)\n\t\tbasic_machine=`echo $basic_machine | sed 's/digital.*/dec/'`\n\t\t;;\n\t*-commodore*)\n\t\tbasic_machine=`echo $basic_machine | sed 's/commodore.*/cbm/'`\n\t\t;;\n\t*)\n\t\t;;\nesac\n\n# Decode manufacturer-specific aliases for certain operating systems.\n\nif [ x\"$os\" != x\"\" ]\nthen\ncase $os in\n\t# First match some system type aliases\n\t# that might get confused with valid system types.\n\t# -solaris* is a basic system type, with this one exception.\n\t-auroraux)\n\t\tos=-auroraux\n\t\t;;\n\t-solaris1 | -solaris1.*)\n\t\tos=`echo $os | sed -e 's|solaris1|sunos4|'`\n\t\t;;\n\t-solaris)\n\t\tos=-solaris2\n\t\t;;\n\t-svr4*)\n\t\tos=-sysv4\n\t\t;;\n\t-unixware*)\n\t\tos=-sysv4.2uw\n\t\t;;\n\t-gnu/linux*)\n\t\tos=`echo $os | sed -e 's|gnu/linux|linux-gnu|'`\n\t\t;;\n\t# First accept the basic system types.\n\t# The portable systems comes first.\n\t# Each alternative MUST END IN A *, to match a version number.\n\t# -sysv* is not here because it comes later, after sysvr4.\n\t-gnu* | -bsd* | -mach* | -minix* | -genix* | -ultrix* | -irix* \\\n\t      | -*vms* | -sco* | -esix* | -isc* | -aix* | -cnk* | -sunos | -sunos[34]*\\\n\t      | -hpux* | -unos* | -osf* | -luna* | -dgux* | -auroraux* | -solaris* \\\n\t      | -sym* | -kopensolaris* | -plan9* \\\n\t      | -amigaos* | -amigados* | -msdos* | -newsos* | -unicos* | -aof* \\\n\t      | -aos* | -aros* \\\n\t      | -nindy* | -vxsim* | -vxworks* | -ebmon* | -hms* | -mvs* \\\n\t      | -clix* | -riscos* | -uniplus* | -iris* | -rtu* | -xenix* \\\n\t      | -hiux* | -386bsd* | -knetbsd* | -mirbsd* | -netbsd* \\\n\t      | -bitrig* | -openbsd* | -solidbsd* \\\n\t      | -ekkobsd* | -kfreebsd* | -freebsd* | -riscix* | -lynxos* \\\n\t      | -bosx* | -nextstep* | -cxux* | -aout* | -elf* | -oabi* \\\n\t      | -ptx* | -coff* | -ecoff* | -winnt* | -domain* | -vsta* \\\n\t      | -udi* | -eabi* | -lites* | -ieee* | -go32* | -aux* \\\n\t      | -chorusos* | -chorusrdb* | -cegcc* \\\n\t      | -cygwin* | -msys* | -pe* | -psos* | -moss* | -proelf* | -rtems* \\\n\t      | -mingw32* | -mingw64* | -linux-gnu* | -linux-android* \\\n\t      | -linux-newlib* | -linux-musl* | -linux-uclibc* \\\n\t      | -uxpv* | -beos* | -mpeix* | -udk* | -moxiebox* \\\n\t      | -interix* | -uwin* | -mks* | -rhapsody* | -darwin* | -opened* \\\n\t      | -openstep* | -oskit* | -conix* | -pw32* | -nonstopux* \\\n\t      | -storm-chaos* | -tops10* | -tenex* | -tops20* | -its* \\\n\t      | -os2* | -vos* | -palmos* | -uclinux* | -nucleus* \\\n\t      | -morphos* | -superux* | -rtmk* | -rtmk-nova* | -windiss* \\\n\t      | -powermax* | -dnix* | -nx6 | -nx7 | -sei* | -dragonfly* \\\n\t      | -skyos* | -haiku* | -rdos* | -toppers* | -drops* | -es* | -tirtos*)\n\t# Remember, each alternative MUST END IN *, to match a version number.\n\t\t;;\n\t-qnx*)\n\t\tcase $basic_machine in\n\t\t    x86-* | i*86-*)\n\t\t\t;;\n\t\t    *)\n\t\t\tos=-nto$os\n\t\t\t;;\n\t\tesac\n\t\t;;\n\t-nto-qnx*)\n\t\t;;\n\t-nto*)\n\t\tos=`echo $os | sed -e 's|nto|nto-qnx|'`\n\t\t;;\n\t-sim | -es1800* | -hms* | -xray | -os68k* | -none* | -v88r* \\\n\t      | -windows* | -osx | -abug | -netware* | -os9* | -beos* | -haiku* \\\n\t      | -macos* | -mpw* | -magic* | -mmixware* | -mon960* | -lnews*)\n\t\t;;\n\t-mac*)\n\t\tos=`echo $os | sed -e 's|mac|macos|'`\n\t\t;;\n\t-linux-dietlibc)\n\t\tos=-linux-dietlibc\n\t\t;;\n\t-linux*)\n\t\tos=`echo $os | sed -e 's|linux|linux-gnu|'`\n\t\t;;\n\t-sunos5*)\n\t\tos=`echo $os | sed -e 's|sunos5|solaris2|'`\n\t\t;;\n\t-sunos6*)\n\t\tos=`echo $os | sed -e 's|sunos6|solaris3|'`\n\t\t;;\n\t-opened*)\n\t\tos=-openedition\n\t\t;;\n\t-os400*)\n\t\tos=-os400\n\t\t;;\n\t-wince*)\n\t\tos=-wince\n\t\t;;\n\t-osfrose*)\n\t\tos=-osfrose\n\t\t;;\n\t-osf*)\n\t\tos=-osf\n\t\t;;\n\t-utek*)\n\t\tos=-bsd\n\t\t;;\n\t-dynix*)\n\t\tos=-bsd\n\t\t;;\n\t-acis*)\n\t\tos=-aos\n\t\t;;\n\t-atheos*)\n\t\tos=-atheos\n\t\t;;\n\t-syllable*)\n\t\tos=-syllable\n\t\t;;\n\t-386bsd)\n\t\tos=-bsd\n\t\t;;\n\t-ctix* | -uts*)\n\t\tos=-sysv\n\t\t;;\n\t-nova*)\n\t\tos=-rtmk-nova\n\t\t;;\n\t-ns2 )\n\t\tos=-nextstep2\n\t\t;;\n\t-nsk*)\n\t\tos=-nsk\n\t\t;;\n\t# Preserve the version number of sinix5.\n\t-sinix5.*)\n\t\tos=`echo $os | sed -e 's|sinix|sysv|'`\n\t\t;;\n\t-sinix*)\n\t\tos=-sysv4\n\t\t;;\n\t-tpf*)\n\t\tos=-tpf\n\t\t;;\n\t-triton*)\n\t\tos=-sysv3\n\t\t;;\n\t-oss*)\n\t\tos=-sysv3\n\t\t;;\n\t-svr4)\n\t\tos=-sysv4\n\t\t;;\n\t-svr3)\n\t\tos=-sysv3\n\t\t;;\n\t-sysvr4)\n\t\tos=-sysv4\n\t\t;;\n\t# This must come after -sysvr4.\n\t-sysv*)\n\t\t;;\n\t-ose*)\n\t\tos=-ose\n\t\t;;\n\t-es1800*)\n\t\tos=-ose\n\t\t;;\n\t-xenix)\n\t\tos=-xenix\n\t\t;;\n\t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n\t\tos=-mint\n\t\t;;\n\t-aros*)\n\t\tos=-aros\n\t\t;;\n\t-zvmoe)\n\t\tos=-zvmoe\n\t\t;;\n\t-dicos*)\n\t\tos=-dicos\n\t\t;;\n\t-nacl*)\n\t\t;;\n\t-none)\n\t\t;;\n\t*)\n\t\t# Get rid of the `-' at the beginning of $os.\n\t\tos=`echo $os | sed 's/[^-]*-//'`\n\t\techo Invalid configuration \\`$1\\': system \\`$os\\' not recognized 1>&2\n\t\texit 1\n\t\t;;\nesac\nelse\n\n# Here we handle the default operating systems that come with various machines.\n# The value should be what the vendor currently ships out the door with their\n# machine or put another way, the most popular os provided with the machine.\n\n# Note that if you're going to try to match \"-MANUFACTURER\" here (say,\n# \"-sun\"), then you have to tell the case statement up towards the top\n# that MANUFACTURER isn't an operating system.  Otherwise, code above\n# will signal an error saying that MANUFACTURER isn't an operating\n# system, and we'll never get to this point.\n\ncase $basic_machine in\n\tscore-*)\n\t\tos=-elf\n\t\t;;\n\tspu-*)\n\t\tos=-elf\n\t\t;;\n\t*-acorn)\n\t\tos=-riscix1.2\n\t\t;;\n\tarm*-rebel)\n\t\tos=-linux\n\t\t;;\n\tarm*-semi)\n\t\tos=-aout\n\t\t;;\n\tc4x-* | tic4x-*)\n\t\tos=-coff\n\t\t;;\n\tc8051-*)\n\t\tos=-elf\n\t\t;;\n\thexagon-*)\n\t\tos=-elf\n\t\t;;\n\ttic54x-*)\n\t\tos=-coff\n\t\t;;\n\ttic55x-*)\n\t\tos=-coff\n\t\t;;\n\ttic6x-*)\n\t\tos=-coff\n\t\t;;\n\t# This must come before the *-dec entry.\n\tpdp10-*)\n\t\tos=-tops20\n\t\t;;\n\tpdp11-*)\n\t\tos=-none\n\t\t;;\n\t*-dec | vax-*)\n\t\tos=-ultrix4.2\n\t\t;;\n\tm68*-apollo)\n\t\tos=-domain\n\t\t;;\n\ti386-sun)\n\t\tos=-sunos4.0.2\n\t\t;;\n\tm68000-sun)\n\t\tos=-sunos3\n\t\t;;\n\tm68*-cisco)\n\t\tos=-aout\n\t\t;;\n\tmep-*)\n\t\tos=-elf\n\t\t;;\n\tmips*-cisco)\n\t\tos=-elf\n\t\t;;\n\tmips*-*)\n\t\tos=-elf\n\t\t;;\n\tor32-*)\n\t\tos=-coff\n\t\t;;\n\t*-tti)\t# must be before sparc entry or we get the wrong os.\n\t\tos=-sysv3\n\t\t;;\n\tsparc-* | *-sun)\n\t\tos=-sunos4.1.1\n\t\t;;\n\t*-be)\n\t\tos=-beos\n\t\t;;\n\t*-haiku)\n\t\tos=-haiku\n\t\t;;\n\t*-ibm)\n\t\tos=-aix\n\t\t;;\n\t*-knuth)\n\t\tos=-mmixware\n\t\t;;\n\t*-wec)\n\t\tos=-proelf\n\t\t;;\n\t*-winbond)\n\t\tos=-proelf\n\t\t;;\n\t*-oki)\n\t\tos=-proelf\n\t\t;;\n\t*-hp)\n\t\tos=-hpux\n\t\t;;\n\t*-hitachi)\n\t\tos=-hiux\n\t\t;;\n\ti860-* | *-att | *-ncr | *-altos | *-motorola | *-convergent)\n\t\tos=-sysv\n\t\t;;\n\t*-cbm)\n\t\tos=-amigaos\n\t\t;;\n\t*-dg)\n\t\tos=-dgux\n\t\t;;\n\t*-dolphin)\n\t\tos=-sysv3\n\t\t;;\n\tm68k-ccur)\n\t\tos=-rtu\n\t\t;;\n\tm88k-omron*)\n\t\tos=-luna\n\t\t;;\n\t*-next )\n\t\tos=-nextstep\n\t\t;;\n\t*-sequent)\n\t\tos=-ptx\n\t\t;;\n\t*-crds)\n\t\tos=-unos\n\t\t;;\n\t*-ns)\n\t\tos=-genix\n\t\t;;\n\ti370-*)\n\t\tos=-mvs\n\t\t;;\n\t*-next)\n\t\tos=-nextstep3\n\t\t;;\n\t*-gould)\n\t\tos=-sysv\n\t\t;;\n\t*-highlevel)\n\t\tos=-bsd\n\t\t;;\n\t*-encore)\n\t\tos=-bsd\n\t\t;;\n\t*-sgi)\n\t\tos=-irix\n\t\t;;\n\t*-siemens)\n\t\tos=-sysv4\n\t\t;;\n\t*-masscomp)\n\t\tos=-rtu\n\t\t;;\n\tf30[01]-fujitsu | f700-fujitsu)\n\t\tos=-uxpv\n\t\t;;\n\t*-rom68k)\n\t\tos=-coff\n\t\t;;\n\t*-*bug)\n\t\tos=-coff\n\t\t;;\n\t*-apple)\n\t\tos=-macos\n\t\t;;\n\t*-atari*)\n\t\tos=-mint\n\t\t;;\n\t*)\n\t\tos=-none\n\t\t;;\nesac\nfi\n\n# Here we handle the case where we know the os, and the CPU type, but not the\n# manufacturer.  We pick the logical manufacturer.\nvendor=unknown\ncase $basic_machine in\n\t*-unknown)\n\t\tcase $os in\n\t\t\t-riscix*)\n\t\t\t\tvendor=acorn\n\t\t\t\t;;\n\t\t\t-sunos*)\n\t\t\t\tvendor=sun\n\t\t\t\t;;\n\t\t\t-cnk*|-aix*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-beos*)\n\t\t\t\tvendor=be\n\t\t\t\t;;\n\t\t\t-hpux*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t-mpeix*)\n\t\t\t\tvendor=hp\n\t\t\t\t;;\n\t\t\t-hiux*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t-unos*)\n\t\t\t\tvendor=crds\n\t\t\t\t;;\n\t\t\t-dgux*)\n\t\t\t\tvendor=dg\n\t\t\t\t;;\n\t\t\t-luna*)\n\t\t\t\tvendor=omron\n\t\t\t\t;;\n\t\t\t-genix*)\n\t\t\t\tvendor=ns\n\t\t\t\t;;\n\t\t\t-mvs* | -opened*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-os400*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-ptx*)\n\t\t\t\tvendor=sequent\n\t\t\t\t;;\n\t\t\t-tpf*)\n\t\t\t\tvendor=ibm\n\t\t\t\t;;\n\t\t\t-vxsim* | -vxworks* | -windiss*)\n\t\t\t\tvendor=wrs\n\t\t\t\t;;\n\t\t\t-aux*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t-hms*)\n\t\t\t\tvendor=hitachi\n\t\t\t\t;;\n\t\t\t-mpw* | -macos*)\n\t\t\t\tvendor=apple\n\t\t\t\t;;\n\t\t\t-*mint | -mint[0-9]* | -*MiNT | -MiNT[0-9]*)\n\t\t\t\tvendor=atari\n\t\t\t\t;;\n\t\t\t-vos*)\n\t\t\t\tvendor=stratus\n\t\t\t\t;;\n\t\tesac\n\t\tbasic_machine=`echo $basic_machine | sed \"s/unknown/$vendor/\"`\n\t\t;;\nesac\n\necho $basic_machine$os\nexit\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"timestamp='\"\n# time-stamp-format: \"%:y-%02m-%02d\"\n# time-stamp-end: \"'\"\n# End:\n"
        },
        {
          "name": "configure",
          "type": "blob",
          "size": 410.224609375,
          "content": "#! /bin/sh\n# Guess values for system-dependent variables and create Makefiles.\n# Generated by GNU Autoconf 2.69.\n#\n#\n# Copyright (C) 1992-1996, 1998-2012 Free Software Foundation, Inc.\n#\n#\n# This configure script is free software; the Free Software Foundation\n# gives unlimited permission to copy, distribute and modify it.\n## -------------------- ##\n## M4sh Initialization. ##\n## -------------------- ##\n\n# Be more Bourne compatible\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in #(\n  *posix*) :\n    set -o posix ;; #(\n  *) :\n     ;;\nesac\nfi\n\n\nas_nl='\n'\nexport as_nl\n# Printing a long string crashes Solaris 7 /usr/bin/printf.\nas_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nas_echo=$as_echo$as_echo$as_echo$as_echo$as_echo\nas_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo\n# Prefer a ksh shell builtin over an external printf program on Solaris,\n# but without wasting forks for bash or zsh.\nif test -z \"$BASH_VERSION$ZSH_VERSION\" \\\n    && (test \"X`print -r -- $as_echo`\" = \"X$as_echo\") 2>/dev/null; then\n  as_echo='print -r --'\n  as_echo_n='print -rn --'\nelif (test \"X`printf %s $as_echo`\" = \"X$as_echo\") 2>/dev/null; then\n  as_echo='printf %s\\n'\n  as_echo_n='printf %s'\nelse\n  if test \"X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`\" = \"X-n $as_echo\"; then\n    as_echo_body='eval /usr/ucb/echo -n \"$1$as_nl\"'\n    as_echo_n='/usr/ucb/echo -n'\n  else\n    as_echo_body='eval expr \"X$1\" : \"X\\\\(.*\\\\)\"'\n    as_echo_n_body='eval\n      arg=$1;\n      case $arg in #(\n      *\"$as_nl\"*)\n\texpr \"X$arg\" : \"X\\\\(.*\\\\)$as_nl\";\n\targ=`expr \"X$arg\" : \".*$as_nl\\\\(.*\\\\)\"`;;\n      esac;\n      expr \"X$arg\" : \"X\\\\(.*\\\\)\" | tr -d \"$as_nl\"\n    '\n    export as_echo_n_body\n    as_echo_n='sh -c $as_echo_n_body as_echo'\n  fi\n  export as_echo_body\n  as_echo='sh -c $as_echo_body as_echo'\nfi\n\n# The user is always right.\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n# IFS\n# We need space, tab and new line, in precisely that order.  Quoting is\n# there to prevent editors from complaining about space-tab.\n# (If _AS_PATH_WALK were called with IFS unset, it would disable word\n# splitting by setting IFS to empty value.)\nIFS=\" \"\"\t$as_nl\"\n\n# Find who we are.  Look in the path if we contain no directory separator.\nas_myself=\ncase $0 in #((\n  *[\\\\/]* ) as_myself=$0 ;;\n  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    test -r \"$as_dir/$0\" && as_myself=$as_dir/$0 && break\n  done\nIFS=$as_save_IFS\n\n     ;;\nesac\n# We did not find ourselves, most probably we were run as `sh COMMAND'\n# in which case we are not to be found in the path.\nif test \"x$as_myself\" = x; then\n  as_myself=$0\nfi\nif test ! -f \"$as_myself\"; then\n  $as_echo \"$as_myself: error: cannot find myself; rerun with an absolute file name\" >&2\n  exit 1\nfi\n\n# Unset variables that we do not need and which cause bugs (e.g. in\n# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the \"|| exit 1\"\n# suppresses any \"Segmentation fault\" message there.  '((' could\n# trigger a bug in pdksh 5.2.14.\nfor as_var in BASH_ENV ENV MAIL MAILPATH\ndo eval test x\\${$as_var+set} = xset \\\n  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :\ndone\nPS1='$ '\nPS2='> '\nPS4='+ '\n\n# NLS nuisances.\nLC_ALL=C\nexport LC_ALL\nLANGUAGE=C\nexport LANGUAGE\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n# Use a proper internal environment variable to ensure we don't fall\n  # into an infinite loop, continuously re-executing ourselves.\n  if test x\"${_as_can_reexec}\" != xno && test \"x$CONFIG_SHELL\" != x; then\n    _as_can_reexec=no; export _as_can_reexec;\n    # We cannot yet assume a decent shell, so we have to provide a\n# neutralization value for shells without unset; and this also\n# works around shells that cannot unset nonexistent variables.\n# Preserve -v and -x to the replacement shell.\nBASH_ENV=/dev/null\nENV=/dev/null\n(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV\ncase $- in # ((((\n  *v*x* | *x*v* ) as_opts=-vx ;;\n  *v* ) as_opts=-v ;;\n  *x* ) as_opts=-x ;;\n  * ) as_opts= ;;\nesac\nexec $CONFIG_SHELL $as_opts \"$as_myself\" ${1+\"$@\"}\n# Admittedly, this is quite paranoid, since all the known shells bail\n# out after a failed `exec'.\n$as_echo \"$0: could not re-execute with $CONFIG_SHELL\" >&2\nas_fn_exit 255\n  fi\n  # We don't want this to propagate to other subprocesses.\n          { _as_can_reexec=; unset _as_can_reexec;}\nif test \"x$CONFIG_SHELL\" = x; then\n  as_bourne_compatible=\"if test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in #(\n  *posix*) :\n    set -o posix ;; #(\n  *) :\n     ;;\nesac\nfi\n\"\n  as_required=\"as_fn_return () { (exit \\$1); }\nas_fn_success () { as_fn_return 0; }\nas_fn_failure () { as_fn_return 1; }\nas_fn_ret_success () { return 0; }\nas_fn_ret_failure () { return 1; }\n\nexitcode=0\nas_fn_success || { exitcode=1; echo as_fn_success failed.; }\nas_fn_failure && { exitcode=1; echo as_fn_failure succeeded.; }\nas_fn_ret_success || { exitcode=1; echo as_fn_ret_success failed.; }\nas_fn_ret_failure && { exitcode=1; echo as_fn_ret_failure succeeded.; }\nif ( set x; as_fn_ret_success y && test x = \\\"\\$1\\\" ); then :\n\nelse\n  exitcode=1; echo positional parameters were not saved.\nfi\ntest x\\$exitcode = x0 || exit 1\ntest -x / || exit 1\"\n  as_suggested=\"  as_lineno_1=\";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested\" as_lineno_1a=\\$LINENO\n  as_lineno_2=\";as_suggested=$as_suggested$LINENO;as_suggested=$as_suggested\" as_lineno_2a=\\$LINENO\n  eval 'test \\\"x\\$as_lineno_1'\\$as_run'\\\" != \\\"x\\$as_lineno_2'\\$as_run'\\\" &&\n  test \\\"x\\`expr \\$as_lineno_1'\\$as_run' + 1\\`\\\" = \\\"x\\$as_lineno_2'\\$as_run'\\\"' || exit 1\n\n  test -n \\\"\\${ZSH_VERSION+set}\\${BASH_VERSION+set}\\\" || (\n    ECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\n    ECHO=\\$ECHO\\$ECHO\\$ECHO\\$ECHO\\$ECHO\n    ECHO=\\$ECHO\\$ECHO\\$ECHO\\$ECHO\\$ECHO\\$ECHO\n    PATH=/empty FPATH=/empty; export PATH FPATH\n    test \\\"X\\`printf %s \\$ECHO\\`\\\" = \\\"X\\$ECHO\\\" \\\\\n      || test \\\"X\\`print -r -- \\$ECHO\\`\\\" = \\\"X\\$ECHO\\\" ) || exit 1\ntest \\$(( 1 + 1 )) = 2 || exit 1\"\n  if (eval \"$as_required\") 2>/dev/null; then :\n  as_have_required=yes\nelse\n  as_have_required=no\nfi\n  if test x$as_have_required = xyes && (eval \"$as_suggested\") 2>/dev/null; then :\n\nelse\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nas_found=false\nfor as_dir in /bin$PATH_SEPARATOR/usr/bin$PATH_SEPARATOR$PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n  as_found=:\n  case $as_dir in #(\n\t /*)\n\t   for as_base in sh bash ksh sh5; do\n\t     # Try only shells that exist, to save several forks.\n\t     as_shell=$as_dir/$as_base\n\t     if { test -f \"$as_shell\" || test -f \"$as_shell.exe\"; } &&\n\t\t    { $as_echo \"$as_bourne_compatible\"\"$as_required\" | as_run=a \"$as_shell\"; } 2>/dev/null; then :\n  CONFIG_SHELL=$as_shell as_have_required=yes\n\t\t   if { $as_echo \"$as_bourne_compatible\"\"$as_suggested\" | as_run=a \"$as_shell\"; } 2>/dev/null; then :\n  break 2\nfi\nfi\n\t   done;;\n       esac\n  as_found=false\ndone\n$as_found || { if { test -f \"$SHELL\" || test -f \"$SHELL.exe\"; } &&\n\t      { $as_echo \"$as_bourne_compatible\"\"$as_required\" | as_run=a \"$SHELL\"; } 2>/dev/null; then :\n  CONFIG_SHELL=$SHELL as_have_required=yes\nfi; }\nIFS=$as_save_IFS\n\n\n      if test \"x$CONFIG_SHELL\" != x; then :\n  export CONFIG_SHELL\n             # We cannot yet assume a decent shell, so we have to provide a\n# neutralization value for shells without unset; and this also\n# works around shells that cannot unset nonexistent variables.\n# Preserve -v and -x to the replacement shell.\nBASH_ENV=/dev/null\nENV=/dev/null\n(unset BASH_ENV) >/dev/null 2>&1 && unset BASH_ENV ENV\ncase $- in # ((((\n  *v*x* | *x*v* ) as_opts=-vx ;;\n  *v* ) as_opts=-v ;;\n  *x* ) as_opts=-x ;;\n  * ) as_opts= ;;\nesac\nexec $CONFIG_SHELL $as_opts \"$as_myself\" ${1+\"$@\"}\n# Admittedly, this is quite paranoid, since all the known shells bail\n# out after a failed `exec'.\n$as_echo \"$0: could not re-execute with $CONFIG_SHELL\" >&2\nexit 255\nfi\n\n    if test x$as_have_required = xno; then :\n  $as_echo \"$0: This script requires a shell more modern than all\"\n  $as_echo \"$0: the shells that I found on your system.\"\n  if test x${ZSH_VERSION+set} = xset ; then\n    $as_echo \"$0: In particular, zsh $ZSH_VERSION has bugs and should\"\n    $as_echo \"$0: be upgraded to zsh 4.3.4 or later.\"\n  else\n    $as_echo \"$0: Please tell bug-autoconf@gnu.org about your system,\n$0: including any error possibly output before this\n$0: message. Then install a modern shell, or manually run\n$0: the script under such a shell if you do have one.\"\n  fi\n  exit 1\nfi\nfi\nfi\nSHELL=${CONFIG_SHELL-/bin/sh}\nexport SHELL\n# Unset more variables known to interfere with behavior of common tools.\nCLICOLOR_FORCE= GREP_OPTIONS=\nunset CLICOLOR_FORCE GREP_OPTIONS\n\n## --------------------- ##\n## M4sh Shell Functions. ##\n## --------------------- ##\n# as_fn_unset VAR\n# ---------------\n# Portably unset VAR.\nas_fn_unset ()\n{\n  { eval $1=; unset $1;}\n}\nas_unset=as_fn_unset\n\n# as_fn_set_status STATUS\n# -----------------------\n# Set $? to STATUS, without forking.\nas_fn_set_status ()\n{\n  return $1\n} # as_fn_set_status\n\n# as_fn_exit STATUS\n# -----------------\n# Exit the shell with STATUS, even in a \"trap 0\" or \"set -e\" context.\nas_fn_exit ()\n{\n  set +e\n  as_fn_set_status $1\n  exit $1\n} # as_fn_exit\n\n# as_fn_mkdir_p\n# -------------\n# Create \"$as_dir\" as a directory, including parents if necessary.\nas_fn_mkdir_p ()\n{\n\n  case $as_dir in #(\n  -*) as_dir=./$as_dir;;\n  esac\n  test -d \"$as_dir\" || eval $as_mkdir_p || {\n    as_dirs=\n    while :; do\n      case $as_dir in #(\n      *\\'*) as_qdir=`$as_echo \"$as_dir\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;; #'(\n      *) as_qdir=$as_dir;;\n      esac\n      as_dirs=\"'$as_qdir' $as_dirs\"\n      as_dir=`$as_dirname -- \"$as_dir\" ||\n$as_expr X\"$as_dir\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$as_dir\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$as_dir\" : 'X\\(//\\)$' \\| \\\n\t X\"$as_dir\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$as_dir\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n      test -d \"$as_dir\" && break\n    done\n    test -z \"$as_dirs\" || eval \"mkdir $as_dirs\"\n  } || test -d \"$as_dir\" || as_fn_error $? \"cannot create directory $as_dir\"\n\n\n} # as_fn_mkdir_p\n\n# as_fn_executable_p FILE\n# -----------------------\n# Test if FILE is an executable regular file.\nas_fn_executable_p ()\n{\n  test -f \"$1\" && test -x \"$1\"\n} # as_fn_executable_p\n# as_fn_append VAR VALUE\n# ----------------------\n# Append the text in VALUE to the end of the definition contained in VAR. Take\n# advantage of any shell optimizations that allow amortized linear growth over\n# repeated appends, instead of the typical quadratic growth present in naive\n# implementations.\nif (eval \"as_var=1; as_var+=2; test x\\$as_var = x12\") 2>/dev/null; then :\n  eval 'as_fn_append ()\n  {\n    eval $1+=\\$2\n  }'\nelse\n  as_fn_append ()\n  {\n    eval $1=\\$$1\\$2\n  }\nfi # as_fn_append\n\n# as_fn_arith ARG...\n# ------------------\n# Perform arithmetic evaluation on the ARGs, and store the result in the\n# global $as_val. Take advantage of shells that can avoid forks. The arguments\n# must be portable across $(()) and expr.\nif (eval \"test \\$(( 1 + 1 )) = 2\") 2>/dev/null; then :\n  eval 'as_fn_arith ()\n  {\n    as_val=$(( $* ))\n  }'\nelse\n  as_fn_arith ()\n  {\n    as_val=`expr \"$@\" || test $? -eq 1`\n  }\nfi # as_fn_arith\n\n\n# as_fn_error STATUS ERROR [LINENO LOG_FD]\n# ----------------------------------------\n# Output \"`basename $0`: error: ERROR\" to stderr. If LINENO and LOG_FD are\n# provided, also output the error to LOG_FD, referencing LINENO. Then exit the\n# script with STATUS, using 1 if that was 0.\nas_fn_error ()\n{\n  as_status=$1; test $as_status -eq 0 && as_status=1\n  if test \"$4\"; then\n    as_lineno=${as_lineno-\"$3\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n    $as_echo \"$as_me:${as_lineno-$LINENO}: error: $2\" >&$4\n  fi\n  $as_echo \"$as_me: error: $2\" >&2\n  as_fn_exit $as_status\n} # as_fn_error\n\nif expr a : '\\(a\\)' >/dev/null 2>&1 &&\n   test \"X`expr 00001 : '.*\\(...\\)'`\" = X001; then\n  as_expr=expr\nelse\n  as_expr=false\nfi\n\nif (basename -- /) >/dev/null 2>&1 && test \"X`basename -- / 2>&1`\" = \"X/\"; then\n  as_basename=basename\nelse\n  as_basename=false\nfi\n\nif (as_dir=`dirname -- /` && test \"X$as_dir\" = X/) >/dev/null 2>&1; then\n  as_dirname=dirname\nelse\n  as_dirname=false\nfi\n\nas_me=`$as_basename -- \"$0\" ||\n$as_expr X/\"$0\" : '.*/\\([^/][^/]*\\)/*$' \\| \\\n\t X\"$0\" : 'X\\(//\\)$' \\| \\\n\t X\"$0\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X/\"$0\" |\n    sed '/^.*\\/\\([^/][^/]*\\)\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\/\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\/\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n\n# Avoid depending upon Character Ranges.\nas_cr_letters='abcdefghijklmnopqrstuvwxyz'\nas_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nas_cr_Letters=$as_cr_letters$as_cr_LETTERS\nas_cr_digits='0123456789'\nas_cr_alnum=$as_cr_Letters$as_cr_digits\n\n\n  as_lineno_1=$LINENO as_lineno_1a=$LINENO\n  as_lineno_2=$LINENO as_lineno_2a=$LINENO\n  eval 'test \"x$as_lineno_1'$as_run'\" != \"x$as_lineno_2'$as_run'\" &&\n  test \"x`expr $as_lineno_1'$as_run' + 1`\" = \"x$as_lineno_2'$as_run'\"' || {\n  # Blame Lee E. McMahon (1931-1989) for sed's syntax.  :-)\n  sed -n '\n    p\n    /[$]LINENO/=\n  ' <$as_myself |\n    sed '\n      s/[$]LINENO.*/&-/\n      t lineno\n      b\n      :lineno\n      N\n      :loop\n      s/[$]LINENO\\([^'$as_cr_alnum'_].*\\n\\)\\(.*\\)/\\2\\1\\2/\n      t loop\n      s/-\\n.*//\n    ' >$as_me.lineno &&\n  chmod +x \"$as_me.lineno\" ||\n    { $as_echo \"$as_me: error: cannot create $as_me.lineno; rerun with a POSIX shell\" >&2; as_fn_exit 1; }\n\n  # If we had to re-execute with $CONFIG_SHELL, we're ensured to have\n  # already done that, so ensure we don't try to do so again and fall\n  # in an infinite loop.  This has already happened in practice.\n  _as_can_reexec=no; export _as_can_reexec\n  # Don't try to exec as it changes $[0], causing all sort of problems\n  # (the dirname of $[0] is not the place where we might find the\n  # original and so on.  Autoconf is especially sensitive to this).\n  . \"./$as_me.lineno\"\n  # Exit status is that of the last command.\n  exit\n}\n\nECHO_C= ECHO_N= ECHO_T=\ncase `echo -n x` in #(((((\n-n*)\n  case `echo 'xy\\c'` in\n  *c*) ECHO_T='\t';;\t# ECHO_T is single tab character.\n  xy)  ECHO_C='\\c';;\n  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null\n       ECHO_T='\t';;\n  esac;;\n*)\n  ECHO_N='-n';;\nesac\n\nrm -f conf$$ conf$$.exe conf$$.file\nif test -d conf$$.dir; then\n  rm -f conf$$.dir/conf$$.file\nelse\n  rm -f conf$$.dir\n  mkdir conf$$.dir 2>/dev/null\nfi\nif (echo >conf$$.file) 2>/dev/null; then\n  if ln -s conf$$.file conf$$ 2>/dev/null; then\n    as_ln_s='ln -s'\n    # ... but there are two gotchas:\n    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.\n    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.\n    # In both cases, we have to default to `cp -pR'.\n    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||\n      as_ln_s='cp -pR'\n  elif ln conf$$.file conf$$ 2>/dev/null; then\n    as_ln_s=ln\n  else\n    as_ln_s='cp -pR'\n  fi\nelse\n  as_ln_s='cp -pR'\nfi\nrm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file\nrmdir conf$$.dir 2>/dev/null\n\nif mkdir -p . 2>/dev/null; then\n  as_mkdir_p='mkdir -p \"$as_dir\"'\nelse\n  test -d ./-p && rmdir ./-p\n  as_mkdir_p=false\nfi\n\nas_test_x='test -x'\nas_executable_p=as_fn_executable_p\n\n# Sed expression to map a string onto a valid CPP name.\nas_tr_cpp=\"eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'\"\n\n# Sed expression to map a string onto a valid variable name.\nas_tr_sh=\"eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'\"\n\nSHELL=${CONFIG_SHELL-/bin/sh}\n\n\ntest -n \"$DJDIR\" || exec 7<&0 </dev/null\nexec 6>&1\n\n# Name of the host.\n# hostname on some systems (SVR3.2, old GNU/Linux) returns a bogus exit status,\n# so uname gets run too.\nac_hostname=`(hostname || uname -n) 2>/dev/null | sed 1q`\n\n#\n# Initializations.\n#\nac_default_prefix=/usr/local\nac_clean_files=\nac_config_libobj_dir=.\nLIBOBJS=\ncross_compiling=no\nsubdirs=\nMFLAGS=\nMAKEFLAGS=\n\n# Identity of this package.\nPACKAGE_NAME=\nPACKAGE_TARNAME=\nPACKAGE_VERSION=\nPACKAGE_STRING=\nPACKAGE_BUGREPORT=\nPACKAGE_URL=\n\nac_unique_file=\"ev_epoll.c\"\n# Factoring default headers for most tests.\nac_includes_default=\"\\\n#include <stdio.h>\n#ifdef HAVE_SYS_TYPES_H\n# include <sys/types.h>\n#endif\n#ifdef HAVE_SYS_STAT_H\n# include <sys/stat.h>\n#endif\n#ifdef STDC_HEADERS\n# include <stdlib.h>\n# include <stddef.h>\n#else\n# ifdef HAVE_STDLIB_H\n#  include <stdlib.h>\n# endif\n#endif\n#ifdef HAVE_STRING_H\n# if !defined STDC_HEADERS && defined HAVE_MEMORY_H\n#  include <memory.h>\n# endif\n# include <string.h>\n#endif\n#ifdef HAVE_STRINGS_H\n# include <strings.h>\n#endif\n#ifdef HAVE_INTTYPES_H\n# include <inttypes.h>\n#endif\n#ifdef HAVE_STDINT_H\n# include <stdint.h>\n#endif\n#ifdef HAVE_UNISTD_H\n# include <unistd.h>\n#endif\"\n\nac_subst_vars='am__EXEEXT_FALSE\nam__EXEEXT_TRUE\nLTLIBOBJS\nLIBOBJS\nCPP\nOTOOL64\nOTOOL\nLIPO\nNMEDIT\nDSYMUTIL\nMANIFEST_TOOL\nRANLIB\nac_ct_AR\nAR\nDLLTOOL\nOBJDUMP\nLN_S\nNM\nac_ct_DUMPBIN\nDUMPBIN\nLD\nFGREP\nEGREP\nGREP\nSED\nhost_os\nhost_vendor\nhost_cpu\nhost\nbuild_os\nbuild_vendor\nbuild_cpu\nbuild\nLIBTOOL\nam__fastdepCC_FALSE\nam__fastdepCC_TRUE\nCCDEPMODE\nam__nodep\nAMDEPBACKSLASH\nAMDEP_FALSE\nAMDEP_TRUE\nam__quote\nam__include\nDEPDIR\nOBJEXT\nEXEEXT\nac_ct_CC\nCPPFLAGS\nLDFLAGS\nCFLAGS\nCC\nMAINT\nMAINTAINER_MODE_FALSE\nMAINTAINER_MODE_TRUE\nAM_BACKSLASH\nAM_DEFAULT_VERBOSITY\nAM_DEFAULT_V\nAM_V\nam__untar\nam__tar\nAMTAR\nam__leading_dot\nSET_MAKE\nAWK\nmkdir_p\nMKDIR_P\nINSTALL_STRIP_PROGRAM\nSTRIP\ninstall_sh\nMAKEINFO\nAUTOHEADER\nAUTOMAKE\nAUTOCONF\nACLOCAL\nVERSION\nPACKAGE\nCYGPATH_W\nam__isrc\nINSTALL_DATA\nINSTALL_SCRIPT\nINSTALL_PROGRAM\ntarget_alias\nhost_alias\nbuild_alias\nLIBS\nECHO_T\nECHO_N\nECHO_C\nDEFS\nmandir\nlocaledir\nlibdir\npsdir\npdfdir\ndvidir\nhtmldir\ninfodir\ndocdir\noldincludedir\nincludedir\nlocalstatedir\nsharedstatedir\nsysconfdir\ndatadir\ndatarootdir\nlibexecdir\nsbindir\nbindir\nprogram_transform_name\nprefix\nexec_prefix\nPACKAGE_URL\nPACKAGE_BUGREPORT\nPACKAGE_STRING\nPACKAGE_VERSION\nPACKAGE_TARNAME\nPACKAGE_NAME\nPATH_SEPARATOR\nSHELL'\nac_subst_files=''\nac_user_opts='\nenable_option_checking\nenable_silent_rules\nenable_maintainer_mode\nenable_dependency_tracking\nenable_shared\nenable_static\nwith_pic\nenable_fast_install\nwith_gnu_ld\nwith_sysroot\nenable_libtool_lock\n'\n      ac_precious_vars='build_alias\nhost_alias\ntarget_alias\nCC\nCFLAGS\nLDFLAGS\nLIBS\nCPPFLAGS\nCPP'\n\n\n# Initialize some variables set by options.\nac_init_help=\nac_init_version=false\nac_unrecognized_opts=\nac_unrecognized_sep=\n# The variables have the same names as the options, with\n# dashes changed to underlines.\ncache_file=/dev/null\nexec_prefix=NONE\nno_create=\nno_recursion=\nprefix=NONE\nprogram_prefix=NONE\nprogram_suffix=NONE\nprogram_transform_name=s,x,x,\nsilent=\nsite=\nsrcdir=\nverbose=\nx_includes=NONE\nx_libraries=NONE\n\n# Installation directory options.\n# These are left unexpanded so users can \"make install exec_prefix=/foo\"\n# and all the variables that are supposed to be based on exec_prefix\n# by default will actually change.\n# Use braces instead of parens because sh, perl, etc. also accept them.\n# (The list follows the same order as the GNU Coding Standards.)\nbindir='${exec_prefix}/bin'\nsbindir='${exec_prefix}/sbin'\nlibexecdir='${exec_prefix}/libexec'\ndatarootdir='${prefix}/share'\ndatadir='${datarootdir}'\nsysconfdir='${prefix}/etc'\nsharedstatedir='${prefix}/com'\nlocalstatedir='${prefix}/var'\nincludedir='${prefix}/include'\noldincludedir='/usr/include'\ndocdir='${datarootdir}/doc/${PACKAGE}'\ninfodir='${datarootdir}/info'\nhtmldir='${docdir}'\ndvidir='${docdir}'\npdfdir='${docdir}'\npsdir='${docdir}'\nlibdir='${exec_prefix}/lib'\nlocaledir='${datarootdir}/locale'\nmandir='${datarootdir}/man'\n\nac_prev=\nac_dashdash=\nfor ac_option\ndo\n  # If the previous option needs an argument, assign it.\n  if test -n \"$ac_prev\"; then\n    eval $ac_prev=\\$ac_option\n    ac_prev=\n    continue\n  fi\n\n  case $ac_option in\n  *=?*) ac_optarg=`expr \"X$ac_option\" : '[^=]*=\\(.*\\)'` ;;\n  *=)   ac_optarg= ;;\n  *)    ac_optarg=yes ;;\n  esac\n\n  # Accept the important Cygnus configure options, so we can diagnose typos.\n\n  case $ac_dashdash$ac_option in\n  --)\n    ac_dashdash=yes ;;\n\n  -bindir | --bindir | --bindi | --bind | --bin | --bi)\n    ac_prev=bindir ;;\n  -bindir=* | --bindir=* | --bindi=* | --bind=* | --bin=* | --bi=*)\n    bindir=$ac_optarg ;;\n\n  -build | --build | --buil | --bui | --bu)\n    ac_prev=build_alias ;;\n  -build=* | --build=* | --buil=* | --bui=* | --bu=*)\n    build_alias=$ac_optarg ;;\n\n  -cache-file | --cache-file | --cache-fil | --cache-fi \\\n  | --cache-f | --cache- | --cache | --cach | --cac | --ca | --c)\n    ac_prev=cache_file ;;\n  -cache-file=* | --cache-file=* | --cache-fil=* | --cache-fi=* \\\n  | --cache-f=* | --cache-=* | --cache=* | --cach=* | --cac=* | --ca=* | --c=*)\n    cache_file=$ac_optarg ;;\n\n  --config-cache | -C)\n    cache_file=config.cache ;;\n\n  -datadir | --datadir | --datadi | --datad)\n    ac_prev=datadir ;;\n  -datadir=* | --datadir=* | --datadi=* | --datad=*)\n    datadir=$ac_optarg ;;\n\n  -datarootdir | --datarootdir | --datarootdi | --datarootd | --dataroot \\\n  | --dataroo | --dataro | --datar)\n    ac_prev=datarootdir ;;\n  -datarootdir=* | --datarootdir=* | --datarootdi=* | --datarootd=* \\\n  | --dataroot=* | --dataroo=* | --dataro=* | --datar=*)\n    datarootdir=$ac_optarg ;;\n\n  -disable-* | --disable-*)\n    ac_useropt=`expr \"x$ac_option\" : 'x-*disable-\\(.*\\)'`\n    # Reject names that are not valid shell variable names.\n    expr \"x$ac_useropt\" : \".*[^-+._$as_cr_alnum]\" >/dev/null &&\n      as_fn_error $? \"invalid feature name: $ac_useropt\"\n    ac_useropt_orig=$ac_useropt\n    ac_useropt=`$as_echo \"$ac_useropt\" | sed 's/[-+.]/_/g'`\n    case $ac_user_opts in\n      *\"\n\"enable_$ac_useropt\"\n\"*) ;;\n      *) ac_unrecognized_opts=\"$ac_unrecognized_opts$ac_unrecognized_sep--disable-$ac_useropt_orig\"\n\t ac_unrecognized_sep=', ';;\n    esac\n    eval enable_$ac_useropt=no ;;\n\n  -docdir | --docdir | --docdi | --doc | --do)\n    ac_prev=docdir ;;\n  -docdir=* | --docdir=* | --docdi=* | --doc=* | --do=*)\n    docdir=$ac_optarg ;;\n\n  -dvidir | --dvidir | --dvidi | --dvid | --dvi | --dv)\n    ac_prev=dvidir ;;\n  -dvidir=* | --dvidir=* | --dvidi=* | --dvid=* | --dvi=* | --dv=*)\n    dvidir=$ac_optarg ;;\n\n  -enable-* | --enable-*)\n    ac_useropt=`expr \"x$ac_option\" : 'x-*enable-\\([^=]*\\)'`\n    # Reject names that are not valid shell variable names.\n    expr \"x$ac_useropt\" : \".*[^-+._$as_cr_alnum]\" >/dev/null &&\n      as_fn_error $? \"invalid feature name: $ac_useropt\"\n    ac_useropt_orig=$ac_useropt\n    ac_useropt=`$as_echo \"$ac_useropt\" | sed 's/[-+.]/_/g'`\n    case $ac_user_opts in\n      *\"\n\"enable_$ac_useropt\"\n\"*) ;;\n      *) ac_unrecognized_opts=\"$ac_unrecognized_opts$ac_unrecognized_sep--enable-$ac_useropt_orig\"\n\t ac_unrecognized_sep=', ';;\n    esac\n    eval enable_$ac_useropt=\\$ac_optarg ;;\n\n  -exec-prefix | --exec_prefix | --exec-prefix | --exec-prefi \\\n  | --exec-pref | --exec-pre | --exec-pr | --exec-p | --exec- \\\n  | --exec | --exe | --ex)\n    ac_prev=exec_prefix ;;\n  -exec-prefix=* | --exec_prefix=* | --exec-prefix=* | --exec-prefi=* \\\n  | --exec-pref=* | --exec-pre=* | --exec-pr=* | --exec-p=* | --exec-=* \\\n  | --exec=* | --exe=* | --ex=*)\n    exec_prefix=$ac_optarg ;;\n\n  -gas | --gas | --ga | --g)\n    # Obsolete; use --with-gas.\n    with_gas=yes ;;\n\n  -help | --help | --hel | --he | -h)\n    ac_init_help=long ;;\n  -help=r* | --help=r* | --hel=r* | --he=r* | -hr*)\n    ac_init_help=recursive ;;\n  -help=s* | --help=s* | --hel=s* | --he=s* | -hs*)\n    ac_init_help=short ;;\n\n  -host | --host | --hos | --ho)\n    ac_prev=host_alias ;;\n  -host=* | --host=* | --hos=* | --ho=*)\n    host_alias=$ac_optarg ;;\n\n  -htmldir | --htmldir | --htmldi | --htmld | --html | --htm | --ht)\n    ac_prev=htmldir ;;\n  -htmldir=* | --htmldir=* | --htmldi=* | --htmld=* | --html=* | --htm=* \\\n  | --ht=*)\n    htmldir=$ac_optarg ;;\n\n  -includedir | --includedir | --includedi | --included | --include \\\n  | --includ | --inclu | --incl | --inc)\n    ac_prev=includedir ;;\n  -includedir=* | --includedir=* | --includedi=* | --included=* | --include=* \\\n  | --includ=* | --inclu=* | --incl=* | --inc=*)\n    includedir=$ac_optarg ;;\n\n  -infodir | --infodir | --infodi | --infod | --info | --inf)\n    ac_prev=infodir ;;\n  -infodir=* | --infodir=* | --infodi=* | --infod=* | --info=* | --inf=*)\n    infodir=$ac_optarg ;;\n\n  -libdir | --libdir | --libdi | --libd)\n    ac_prev=libdir ;;\n  -libdir=* | --libdir=* | --libdi=* | --libd=*)\n    libdir=$ac_optarg ;;\n\n  -libexecdir | --libexecdir | --libexecdi | --libexecd | --libexec \\\n  | --libexe | --libex | --libe)\n    ac_prev=libexecdir ;;\n  -libexecdir=* | --libexecdir=* | --libexecdi=* | --libexecd=* | --libexec=* \\\n  | --libexe=* | --libex=* | --libe=*)\n    libexecdir=$ac_optarg ;;\n\n  -localedir | --localedir | --localedi | --localed | --locale)\n    ac_prev=localedir ;;\n  -localedir=* | --localedir=* | --localedi=* | --localed=* | --locale=*)\n    localedir=$ac_optarg ;;\n\n  -localstatedir | --localstatedir | --localstatedi | --localstated \\\n  | --localstate | --localstat | --localsta | --localst | --locals)\n    ac_prev=localstatedir ;;\n  -localstatedir=* | --localstatedir=* | --localstatedi=* | --localstated=* \\\n  | --localstate=* | --localstat=* | --localsta=* | --localst=* | --locals=*)\n    localstatedir=$ac_optarg ;;\n\n  -mandir | --mandir | --mandi | --mand | --man | --ma | --m)\n    ac_prev=mandir ;;\n  -mandir=* | --mandir=* | --mandi=* | --mand=* | --man=* | --ma=* | --m=*)\n    mandir=$ac_optarg ;;\n\n  -nfp | --nfp | --nf)\n    # Obsolete; use --without-fp.\n    with_fp=no ;;\n\n  -no-create | --no-create | --no-creat | --no-crea | --no-cre \\\n  | --no-cr | --no-c | -n)\n    no_create=yes ;;\n\n  -no-recursion | --no-recursion | --no-recursio | --no-recursi \\\n  | --no-recurs | --no-recur | --no-recu | --no-rec | --no-re | --no-r)\n    no_recursion=yes ;;\n\n  -oldincludedir | --oldincludedir | --oldincludedi | --oldincluded \\\n  | --oldinclude | --oldinclud | --oldinclu | --oldincl | --oldinc \\\n  | --oldin | --oldi | --old | --ol | --o)\n    ac_prev=oldincludedir ;;\n  -oldincludedir=* | --oldincludedir=* | --oldincludedi=* | --oldincluded=* \\\n  | --oldinclude=* | --oldinclud=* | --oldinclu=* | --oldincl=* | --oldinc=* \\\n  | --oldin=* | --oldi=* | --old=* | --ol=* | --o=*)\n    oldincludedir=$ac_optarg ;;\n\n  -prefix | --prefix | --prefi | --pref | --pre | --pr | --p)\n    ac_prev=prefix ;;\n  -prefix=* | --prefix=* | --prefi=* | --pref=* | --pre=* | --pr=* | --p=*)\n    prefix=$ac_optarg ;;\n\n  -program-prefix | --program-prefix | --program-prefi | --program-pref \\\n  | --program-pre | --program-pr | --program-p)\n    ac_prev=program_prefix ;;\n  -program-prefix=* | --program-prefix=* | --program-prefi=* \\\n  | --program-pref=* | --program-pre=* | --program-pr=* | --program-p=*)\n    program_prefix=$ac_optarg ;;\n\n  -program-suffix | --program-suffix | --program-suffi | --program-suff \\\n  | --program-suf | --program-su | --program-s)\n    ac_prev=program_suffix ;;\n  -program-suffix=* | --program-suffix=* | --program-suffi=* \\\n  | --program-suff=* | --program-suf=* | --program-su=* | --program-s=*)\n    program_suffix=$ac_optarg ;;\n\n  -program-transform-name | --program-transform-name \\\n  | --program-transform-nam | --program-transform-na \\\n  | --program-transform-n | --program-transform- \\\n  | --program-transform | --program-transfor \\\n  | --program-transfo | --program-transf \\\n  | --program-trans | --program-tran \\\n  | --progr-tra | --program-tr | --program-t)\n    ac_prev=program_transform_name ;;\n  -program-transform-name=* | --program-transform-name=* \\\n  | --program-transform-nam=* | --program-transform-na=* \\\n  | --program-transform-n=* | --program-transform-=* \\\n  | --program-transform=* | --program-transfor=* \\\n  | --program-transfo=* | --program-transf=* \\\n  | --program-trans=* | --program-tran=* \\\n  | --progr-tra=* | --program-tr=* | --program-t=*)\n    program_transform_name=$ac_optarg ;;\n\n  -pdfdir | --pdfdir | --pdfdi | --pdfd | --pdf | --pd)\n    ac_prev=pdfdir ;;\n  -pdfdir=* | --pdfdir=* | --pdfdi=* | --pdfd=* | --pdf=* | --pd=*)\n    pdfdir=$ac_optarg ;;\n\n  -psdir | --psdir | --psdi | --psd | --ps)\n    ac_prev=psdir ;;\n  -psdir=* | --psdir=* | --psdi=* | --psd=* | --ps=*)\n    psdir=$ac_optarg ;;\n\n  -q | -quiet | --quiet | --quie | --qui | --qu | --q \\\n  | -silent | --silent | --silen | --sile | --sil)\n    silent=yes ;;\n\n  -sbindir | --sbindir | --sbindi | --sbind | --sbin | --sbi | --sb)\n    ac_prev=sbindir ;;\n  -sbindir=* | --sbindir=* | --sbindi=* | --sbind=* | --sbin=* \\\n  | --sbi=* | --sb=*)\n    sbindir=$ac_optarg ;;\n\n  -sharedstatedir | --sharedstatedir | --sharedstatedi \\\n  | --sharedstated | --sharedstate | --sharedstat | --sharedsta \\\n  | --sharedst | --shareds | --shared | --share | --shar \\\n  | --sha | --sh)\n    ac_prev=sharedstatedir ;;\n  -sharedstatedir=* | --sharedstatedir=* | --sharedstatedi=* \\\n  | --sharedstated=* | --sharedstate=* | --sharedstat=* | --sharedsta=* \\\n  | --sharedst=* | --shareds=* | --shared=* | --share=* | --shar=* \\\n  | --sha=* | --sh=*)\n    sharedstatedir=$ac_optarg ;;\n\n  -site | --site | --sit)\n    ac_prev=site ;;\n  -site=* | --site=* | --sit=*)\n    site=$ac_optarg ;;\n\n  -srcdir | --srcdir | --srcdi | --srcd | --src | --sr)\n    ac_prev=srcdir ;;\n  -srcdir=* | --srcdir=* | --srcdi=* | --srcd=* | --src=* | --sr=*)\n    srcdir=$ac_optarg ;;\n\n  -sysconfdir | --sysconfdir | --sysconfdi | --sysconfd | --sysconf \\\n  | --syscon | --sysco | --sysc | --sys | --sy)\n    ac_prev=sysconfdir ;;\n  -sysconfdir=* | --sysconfdir=* | --sysconfdi=* | --sysconfd=* | --sysconf=* \\\n  | --syscon=* | --sysco=* | --sysc=* | --sys=* | --sy=*)\n    sysconfdir=$ac_optarg ;;\n\n  -target | --target | --targe | --targ | --tar | --ta | --t)\n    ac_prev=target_alias ;;\n  -target=* | --target=* | --targe=* | --targ=* | --tar=* | --ta=* | --t=*)\n    target_alias=$ac_optarg ;;\n\n  -v | -verbose | --verbose | --verbos | --verbo | --verb)\n    verbose=yes ;;\n\n  -version | --version | --versio | --versi | --vers | -V)\n    ac_init_version=: ;;\n\n  -with-* | --with-*)\n    ac_useropt=`expr \"x$ac_option\" : 'x-*with-\\([^=]*\\)'`\n    # Reject names that are not valid shell variable names.\n    expr \"x$ac_useropt\" : \".*[^-+._$as_cr_alnum]\" >/dev/null &&\n      as_fn_error $? \"invalid package name: $ac_useropt\"\n    ac_useropt_orig=$ac_useropt\n    ac_useropt=`$as_echo \"$ac_useropt\" | sed 's/[-+.]/_/g'`\n    case $ac_user_opts in\n      *\"\n\"with_$ac_useropt\"\n\"*) ;;\n      *) ac_unrecognized_opts=\"$ac_unrecognized_opts$ac_unrecognized_sep--with-$ac_useropt_orig\"\n\t ac_unrecognized_sep=', ';;\n    esac\n    eval with_$ac_useropt=\\$ac_optarg ;;\n\n  -without-* | --without-*)\n    ac_useropt=`expr \"x$ac_option\" : 'x-*without-\\(.*\\)'`\n    # Reject names that are not valid shell variable names.\n    expr \"x$ac_useropt\" : \".*[^-+._$as_cr_alnum]\" >/dev/null &&\n      as_fn_error $? \"invalid package name: $ac_useropt\"\n    ac_useropt_orig=$ac_useropt\n    ac_useropt=`$as_echo \"$ac_useropt\" | sed 's/[-+.]/_/g'`\n    case $ac_user_opts in\n      *\"\n\"with_$ac_useropt\"\n\"*) ;;\n      *) ac_unrecognized_opts=\"$ac_unrecognized_opts$ac_unrecognized_sep--without-$ac_useropt_orig\"\n\t ac_unrecognized_sep=', ';;\n    esac\n    eval with_$ac_useropt=no ;;\n\n  --x)\n    # Obsolete; use --with-x.\n    with_x=yes ;;\n\n  -x-includes | --x-includes | --x-include | --x-includ | --x-inclu \\\n  | --x-incl | --x-inc | --x-in | --x-i)\n    ac_prev=x_includes ;;\n  -x-includes=* | --x-includes=* | --x-include=* | --x-includ=* | --x-inclu=* \\\n  | --x-incl=* | --x-inc=* | --x-in=* | --x-i=*)\n    x_includes=$ac_optarg ;;\n\n  -x-libraries | --x-libraries | --x-librarie | --x-librari \\\n  | --x-librar | --x-libra | --x-libr | --x-lib | --x-li | --x-l)\n    ac_prev=x_libraries ;;\n  -x-libraries=* | --x-libraries=* | --x-librarie=* | --x-librari=* \\\n  | --x-librar=* | --x-libra=* | --x-libr=* | --x-lib=* | --x-li=* | --x-l=*)\n    x_libraries=$ac_optarg ;;\n\n  -*) as_fn_error $? \"unrecognized option: \\`$ac_option'\nTry \\`$0 --help' for more information\"\n    ;;\n\n  *=*)\n    ac_envvar=`expr \"x$ac_option\" : 'x\\([^=]*\\)='`\n    # Reject names that are not valid shell variable names.\n    case $ac_envvar in #(\n      '' | [0-9]* | *[!_$as_cr_alnum]* )\n      as_fn_error $? \"invalid variable name: \\`$ac_envvar'\" ;;\n    esac\n    eval $ac_envvar=\\$ac_optarg\n    export $ac_envvar ;;\n\n  *)\n    # FIXME: should be removed in autoconf 3.0.\n    $as_echo \"$as_me: WARNING: you should use --build, --host, --target\" >&2\n    expr \"x$ac_option\" : \".*[^-._$as_cr_alnum]\" >/dev/null &&\n      $as_echo \"$as_me: WARNING: invalid host type: $ac_option\" >&2\n    : \"${build_alias=$ac_option} ${host_alias=$ac_option} ${target_alias=$ac_option}\"\n    ;;\n\n  esac\ndone\n\nif test -n \"$ac_prev\"; then\n  ac_option=--`echo $ac_prev | sed 's/_/-/g'`\n  as_fn_error $? \"missing argument to $ac_option\"\nfi\n\nif test -n \"$ac_unrecognized_opts\"; then\n  case $enable_option_checking in\n    no) ;;\n    fatal) as_fn_error $? \"unrecognized options: $ac_unrecognized_opts\" ;;\n    *)     $as_echo \"$as_me: WARNING: unrecognized options: $ac_unrecognized_opts\" >&2 ;;\n  esac\nfi\n\n# Check all directory arguments for consistency.\nfor ac_var in\texec_prefix prefix bindir sbindir libexecdir datarootdir \\\n\t\tdatadir sysconfdir sharedstatedir localstatedir includedir \\\n\t\toldincludedir docdir infodir htmldir dvidir pdfdir psdir \\\n\t\tlibdir localedir mandir\ndo\n  eval ac_val=\\$$ac_var\n  # Remove trailing slashes.\n  case $ac_val in\n    */ )\n      ac_val=`expr \"X$ac_val\" : 'X\\(.*[^/]\\)' \\| \"X$ac_val\" : 'X\\(.*\\)'`\n      eval $ac_var=\\$ac_val;;\n  esac\n  # Be sure to have absolute directory names.\n  case $ac_val in\n    [\\\\/$]* | ?:[\\\\/]* )  continue;;\n    NONE | '' ) case $ac_var in *prefix ) continue;; esac;;\n  esac\n  as_fn_error $? \"expected an absolute directory name for --$ac_var: $ac_val\"\ndone\n\n# There might be people who depend on the old broken behavior: `$host'\n# used to hold the argument of --host etc.\n# FIXME: To remove some day.\nbuild=$build_alias\nhost=$host_alias\ntarget=$target_alias\n\n# FIXME: To remove some day.\nif test \"x$host_alias\" != x; then\n  if test \"x$build_alias\" = x; then\n    cross_compiling=maybe\n  elif test \"x$build_alias\" != \"x$host_alias\"; then\n    cross_compiling=yes\n  fi\nfi\n\nac_tool_prefix=\ntest -n \"$host_alias\" && ac_tool_prefix=$host_alias-\n\ntest \"$silent\" = yes && exec 6>/dev/null\n\n\nac_pwd=`pwd` && test -n \"$ac_pwd\" &&\nac_ls_di=`ls -di .` &&\nac_pwd_ls_di=`cd \"$ac_pwd\" && ls -di .` ||\n  as_fn_error $? \"working directory cannot be determined\"\ntest \"X$ac_ls_di\" = \"X$ac_pwd_ls_di\" ||\n  as_fn_error $? \"pwd does not report name of working directory\"\n\n\n# Find the source files, if location was not specified.\nif test -z \"$srcdir\"; then\n  ac_srcdir_defaulted=yes\n  # Try the directory containing this script, then the parent directory.\n  ac_confdir=`$as_dirname -- \"$as_myself\" ||\n$as_expr X\"$as_myself\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$as_myself\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$as_myself\" : 'X\\(//\\)$' \\| \\\n\t X\"$as_myself\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$as_myself\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n  srcdir=$ac_confdir\n  if test ! -r \"$srcdir/$ac_unique_file\"; then\n    srcdir=..\n  fi\nelse\n  ac_srcdir_defaulted=no\nfi\nif test ! -r \"$srcdir/$ac_unique_file\"; then\n  test \"$ac_srcdir_defaulted\" = yes && srcdir=\"$ac_confdir or ..\"\n  as_fn_error $? \"cannot find sources ($ac_unique_file) in $srcdir\"\nfi\nac_msg=\"sources are in $srcdir, but \\`cd $srcdir' does not work\"\nac_abs_confdir=`(\n\tcd \"$srcdir\" && test -r \"./$ac_unique_file\" || as_fn_error $? \"$ac_msg\"\n\tpwd)`\n# When building in place, set srcdir=.\nif test \"$ac_abs_confdir\" = \"$ac_pwd\"; then\n  srcdir=.\nfi\n# Remove unnecessary trailing slashes from srcdir.\n# Double slashes in file names in object file debugging info\n# mess up M-x gdb in Emacs.\ncase $srcdir in\n*/) srcdir=`expr \"X$srcdir\" : 'X\\(.*[^/]\\)' \\| \"X$srcdir\" : 'X\\(.*\\)'`;;\nesac\nfor ac_var in $ac_precious_vars; do\n  eval ac_env_${ac_var}_set=\\${${ac_var}+set}\n  eval ac_env_${ac_var}_value=\\$${ac_var}\n  eval ac_cv_env_${ac_var}_set=\\${${ac_var}+set}\n  eval ac_cv_env_${ac_var}_value=\\$${ac_var}\ndone\n\n#\n# Report the --help message.\n#\nif test \"$ac_init_help\" = \"long\"; then\n  # Omit some internal or obsolete options to make the list less imposing.\n  # This message is too long to be a string in the A/UX 3.1 sh.\n  cat <<_ACEOF\n\\`configure' configures this package to adapt to many kinds of systems.\n\nUsage: $0 [OPTION]... [VAR=VALUE]...\n\nTo assign environment variables (e.g., CC, CFLAGS...), specify them as\nVAR=VALUE.  See below for descriptions of some of the useful variables.\n\nDefaults for the options are specified in brackets.\n\nConfiguration:\n  -h, --help              display this help and exit\n      --help=short        display options specific to this package\n      --help=recursive    display the short help of all the included packages\n  -V, --version           display version information and exit\n  -q, --quiet, --silent   do not print \\`checking ...' messages\n      --cache-file=FILE   cache test results in FILE [disabled]\n  -C, --config-cache      alias for \\`--cache-file=config.cache'\n  -n, --no-create         do not create output files\n      --srcdir=DIR        find the sources in DIR [configure dir or \\`..']\n\nInstallation directories:\n  --prefix=PREFIX         install architecture-independent files in PREFIX\n                          [$ac_default_prefix]\n  --exec-prefix=EPREFIX   install architecture-dependent files in EPREFIX\n                          [PREFIX]\n\nBy default, \\`make install' will install all the files in\n\\`$ac_default_prefix/bin', \\`$ac_default_prefix/lib' etc.  You can specify\nan installation prefix other than \\`$ac_default_prefix' using \\`--prefix',\nfor instance \\`--prefix=\\$HOME'.\n\nFor better control, use the options below.\n\nFine tuning of the installation directories:\n  --bindir=DIR            user executables [EPREFIX/bin]\n  --sbindir=DIR           system admin executables [EPREFIX/sbin]\n  --libexecdir=DIR        program executables [EPREFIX/libexec]\n  --sysconfdir=DIR        read-only single-machine data [PREFIX/etc]\n  --sharedstatedir=DIR    modifiable architecture-independent data [PREFIX/com]\n  --localstatedir=DIR     modifiable single-machine data [PREFIX/var]\n  --libdir=DIR            object code libraries [EPREFIX/lib]\n  --includedir=DIR        C header files [PREFIX/include]\n  --oldincludedir=DIR     C header files for non-gcc [/usr/include]\n  --datarootdir=DIR       read-only arch.-independent data root [PREFIX/share]\n  --datadir=DIR           read-only architecture-independent data [DATAROOTDIR]\n  --infodir=DIR           info documentation [DATAROOTDIR/info]\n  --localedir=DIR         locale-dependent data [DATAROOTDIR/locale]\n  --mandir=DIR            man documentation [DATAROOTDIR/man]\n  --docdir=DIR            documentation root [DATAROOTDIR/doc/PACKAGE]\n  --htmldir=DIR           html documentation [DOCDIR]\n  --dvidir=DIR            dvi documentation [DOCDIR]\n  --pdfdir=DIR            pdf documentation [DOCDIR]\n  --psdir=DIR             ps documentation [DOCDIR]\n_ACEOF\n\n  cat <<\\_ACEOF\n\nProgram names:\n  --program-prefix=PREFIX            prepend PREFIX to installed program names\n  --program-suffix=SUFFIX            append SUFFIX to installed program names\n  --program-transform-name=PROGRAM   run sed PROGRAM on installed program names\n\nSystem types:\n  --build=BUILD     configure for building on BUILD [guessed]\n  --host=HOST       cross-compile to build programs to run on HOST [BUILD]\n_ACEOF\nfi\n\nif test -n \"$ac_init_help\"; then\n\n  cat <<\\_ACEOF\n\nOptional Features:\n  --disable-option-checking  ignore unrecognized --enable/--with options\n  --disable-FEATURE       do not include FEATURE (same as --enable-FEATURE=no)\n  --enable-FEATURE[=ARG]  include FEATURE [ARG=yes]\n  --enable-silent-rules   less verbose build output (undo: \"make V=1\")\n  --disable-silent-rules  verbose build output (undo: \"make V=0\")\n  --enable-maintainer-mode\n                          enable make rules and dependencies not useful (and\n                          sometimes confusing) to the casual installer\n  --enable-dependency-tracking\n                          do not reject slow dependency extractors\n  --disable-dependency-tracking\n                          speeds up one-time build\n  --enable-shared[=PKGS]  build shared libraries [default=yes]\n  --enable-static[=PKGS]  build static libraries [default=yes]\n  --enable-fast-install[=PKGS]\n                          optimize for fast installation [default=yes]\n  --disable-libtool-lock  avoid locking (might break parallel builds)\n\nOptional Packages:\n  --with-PACKAGE[=ARG]    use PACKAGE [ARG=yes]\n  --without-PACKAGE       do not use PACKAGE (same as --with-PACKAGE=no)\n  --with-pic[=PKGS]       try to use only PIC/non-PIC objects [default=use\n                          both]\n  --with-gnu-ld           assume the C compiler uses GNU ld [default=no]\n  --with-sysroot=DIR Search for dependent libraries within DIR\n                        (or the compiler's sysroot if not specified).\n\nSome influential environment variables:\n  CC          C compiler command\n  CFLAGS      C compiler flags\n  LDFLAGS     linker flags, e.g. -L<lib dir> if you have libraries in a\n              nonstandard directory <lib dir>\n  LIBS        libraries to pass to the linker, e.g. -l<library>\n  CPPFLAGS    (Objective) C/C++ preprocessor flags, e.g. -I<include dir> if\n              you have headers in a nonstandard directory <include dir>\n  CPP         C preprocessor\n\nUse these variables to override the choices made by `configure' or to help\nit to find libraries and programs with nonstandard names/locations.\n\nReport bugs to the package provider.\n_ACEOF\nac_status=$?\nfi\n\nif test \"$ac_init_help\" = \"recursive\"; then\n  # If there are subdirs, report their specific --help.\n  for ac_dir in : $ac_subdirs_all; do test \"x$ac_dir\" = x: && continue\n    test -d \"$ac_dir\" ||\n      { cd \"$srcdir\" && ac_pwd=`pwd` && srcdir=. && test -d \"$ac_dir\"; } ||\n      continue\n    ac_builddir=.\n\ncase \"$ac_dir\" in\n.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;\n*)\n  ac_dir_suffix=/`$as_echo \"$ac_dir\" | sed 's|^\\.[\\\\/]||'`\n  # A \"..\" for each directory in $ac_dir_suffix.\n  ac_top_builddir_sub=`$as_echo \"$ac_dir_suffix\" | sed 's|/[^\\\\/]*|/..|g;s|/||'`\n  case $ac_top_builddir_sub in\n  \"\") ac_top_builddir_sub=. ac_top_build_prefix= ;;\n  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;\n  esac ;;\nesac\nac_abs_top_builddir=$ac_pwd\nac_abs_builddir=$ac_pwd$ac_dir_suffix\n# for backward compatibility:\nac_top_builddir=$ac_top_build_prefix\n\ncase $srcdir in\n  .)  # We are building in place.\n    ac_srcdir=.\n    ac_top_srcdir=$ac_top_builddir_sub\n    ac_abs_top_srcdir=$ac_pwd ;;\n  [\\\\/]* | ?:[\\\\/]* )  # Absolute name.\n    ac_srcdir=$srcdir$ac_dir_suffix;\n    ac_top_srcdir=$srcdir\n    ac_abs_top_srcdir=$srcdir ;;\n  *) # Relative name.\n    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix\n    ac_top_srcdir=$ac_top_build_prefix$srcdir\n    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;\nesac\nac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix\n\n    cd \"$ac_dir\" || { ac_status=$?; continue; }\n    # Check for guested configure.\n    if test -f \"$ac_srcdir/configure.gnu\"; then\n      echo &&\n      $SHELL \"$ac_srcdir/configure.gnu\" --help=recursive\n    elif test -f \"$ac_srcdir/configure\"; then\n      echo &&\n      $SHELL \"$ac_srcdir/configure\" --help=recursive\n    else\n      $as_echo \"$as_me: WARNING: no configuration information is in $ac_dir\" >&2\n    fi || ac_status=$?\n    cd \"$ac_pwd\" || { ac_status=$?; break; }\n  done\nfi\n\ntest -n \"$ac_init_help\" && exit $ac_status\nif $ac_init_version; then\n  cat <<\\_ACEOF\nconfigure\ngenerated by GNU Autoconf 2.69\n\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis configure script is free software; the Free Software Foundation\ngives unlimited permission to copy, distribute and modify it.\n_ACEOF\n  exit\nfi\n\n## ------------------------ ##\n## Autoconf initialization. ##\n## ------------------------ ##\n\n# ac_fn_c_try_compile LINENO\n# --------------------------\n# Try to compile conftest.$ac_ext, and return whether this succeeded.\nac_fn_c_try_compile ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  rm -f conftest.$ac_objext\n  if { { ac_try=\"$ac_compile\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_compile\") 2>conftest.err\n  ac_status=$?\n  if test -s conftest.err; then\n    grep -v '^ *+' conftest.err >conftest.er1\n    cat conftest.er1 >&5\n    mv -f conftest.er1 conftest.err\n  fi\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && {\n\t test -z \"$ac_c_werror_flag\" ||\n\t test ! -s conftest.err\n       } && test -s conftest.$ac_objext; then :\n  ac_retval=0\nelse\n  $as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n\tac_retval=1\nfi\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n  as_fn_set_status $ac_retval\n\n} # ac_fn_c_try_compile\n\n# ac_fn_c_try_link LINENO\n# -----------------------\n# Try to link conftest.$ac_ext, and return whether this succeeded.\nac_fn_c_try_link ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  rm -f conftest.$ac_objext conftest$ac_exeext\n  if { { ac_try=\"$ac_link\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_link\") 2>conftest.err\n  ac_status=$?\n  if test -s conftest.err; then\n    grep -v '^ *+' conftest.err >conftest.er1\n    cat conftest.er1 >&5\n    mv -f conftest.er1 conftest.err\n  fi\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && {\n\t test -z \"$ac_c_werror_flag\" ||\n\t test ! -s conftest.err\n       } && test -s conftest$ac_exeext && {\n\t test \"$cross_compiling\" = yes ||\n\t test -x conftest$ac_exeext\n       }; then :\n  ac_retval=0\nelse\n  $as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n\tac_retval=1\nfi\n  # Delete the IPA/IPO (Inter Procedural Analysis/Optimization) information\n  # created by the PGI compiler (conftest_ipa8_conftest.oo), as it would\n  # interfere with the next link command; also delete a directory that is\n  # left behind by Apple's compiler.  We do this before executing the actions.\n  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n  as_fn_set_status $ac_retval\n\n} # ac_fn_c_try_link\n\n# ac_fn_c_check_header_compile LINENO HEADER VAR INCLUDES\n# -------------------------------------------------------\n# Tests whether HEADER exists and can be compiled using the include files in\n# INCLUDES, setting the cache variable VAR accordingly.\nac_fn_c_check_header_compile ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n$as_echo_n \"checking for $2... \" >&6; }\nif eval \\${$3+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n$4\n#include <$2>\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  eval \"$3=yes\"\nelse\n  eval \"$3=no\"\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\nfi\neval ac_res=\\$$3\n\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n$as_echo \"$ac_res\" >&6; }\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n\n} # ac_fn_c_check_header_compile\n\n# ac_fn_c_try_cpp LINENO\n# ----------------------\n# Try to preprocess conftest.$ac_ext, and return whether this succeeded.\nac_fn_c_try_cpp ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  if { { ac_try=\"$ac_cpp conftest.$ac_ext\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_cpp conftest.$ac_ext\") 2>conftest.err\n  ac_status=$?\n  if test -s conftest.err; then\n    grep -v '^ *+' conftest.err >conftest.er1\n    cat conftest.er1 >&5\n    mv -f conftest.er1 conftest.err\n  fi\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } > conftest.i && {\n\t test -z \"$ac_c_preproc_warn_flag$ac_c_werror_flag\" ||\n\t test ! -s conftest.err\n       }; then :\n  ac_retval=0\nelse\n  $as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n    ac_retval=1\nfi\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n  as_fn_set_status $ac_retval\n\n} # ac_fn_c_try_cpp\n\n# ac_fn_c_try_run LINENO\n# ----------------------\n# Try to link conftest.$ac_ext, and return whether this succeeded. Assumes\n# that executables *can* be run.\nac_fn_c_try_run ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  if { { ac_try=\"$ac_link\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_link\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && { ac_try='./conftest$ac_exeext'\n  { { case \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_try\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; }; then :\n  ac_retval=0\nelse\n  $as_echo \"$as_me: program exited with status $ac_status\" >&5\n       $as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n       ac_retval=$ac_status\nfi\n  rm -rf conftest.dSYM conftest_ipa8_conftest.oo\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n  as_fn_set_status $ac_retval\n\n} # ac_fn_c_try_run\n\n# ac_fn_c_check_func LINENO FUNC VAR\n# ----------------------------------\n# Tests whether FUNC exists, setting the cache variable VAR accordingly\nac_fn_c_check_func ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n$as_echo_n \"checking for $2... \" >&6; }\nif eval \\${$3+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n/* Define $2 to an innocuous variant, in case <limits.h> declares $2.\n   For example, HP-UX 11i <limits.h> declares gettimeofday.  */\n#define $2 innocuous_$2\n\n/* System header to define __stub macros and hopefully few prototypes,\n    which can conflict with char $2 (); below.\n    Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n    <limits.h> exists even on freestanding compilers.  */\n\n#ifdef __STDC__\n# include <limits.h>\n#else\n# include <assert.h>\n#endif\n\n#undef $2\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar $2 ();\n/* The GNU C library defines this for functions which it implements\n    to always fail with ENOSYS.  Some functions are actually named\n    something starting with __ and the normal name is an alias.  */\n#if defined __stub_$2 || defined __stub___$2\nchoke me\n#endif\n\nint\nmain ()\n{\nreturn $2 ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  eval \"$3=yes\"\nelse\n  eval \"$3=no\"\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nfi\neval ac_res=\\$$3\n\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n$as_echo \"$ac_res\" >&6; }\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n\n} # ac_fn_c_check_func\n\n# ac_fn_c_check_header_mongrel LINENO HEADER VAR INCLUDES\n# -------------------------------------------------------\n# Tests whether HEADER exists, giving a warning if it cannot be compiled using\n# the include files in INCLUDES and setting the cache variable VAR\n# accordingly.\nac_fn_c_check_header_mongrel ()\n{\n  as_lineno=${as_lineno-\"$1\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n  if eval \\${$3+:} false; then :\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n$as_echo_n \"checking for $2... \" >&6; }\nif eval \\${$3+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nfi\neval ac_res=\\$$3\n\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n$as_echo \"$ac_res\" >&6; }\nelse\n  # Is the header compilable?\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking $2 usability\" >&5\n$as_echo_n \"checking $2 usability... \" >&6; }\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n$4\n#include <$2>\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_header_compiler=yes\nelse\n  ac_header_compiler=no\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_header_compiler\" >&5\n$as_echo \"$ac_header_compiler\" >&6; }\n\n# Is the header present?\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking $2 presence\" >&5\n$as_echo_n \"checking $2 presence... \" >&6; }\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <$2>\n_ACEOF\nif ac_fn_c_try_cpp \"$LINENO\"; then :\n  ac_header_preproc=yes\nelse\n  ac_header_preproc=no\nfi\nrm -f conftest.err conftest.i conftest.$ac_ext\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_header_preproc\" >&5\n$as_echo \"$ac_header_preproc\" >&6; }\n\n# So?  What about this header?\ncase $ac_header_compiler:$ac_header_preproc:$ac_c_preproc_warn_flag in #((\n  yes:no: )\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: accepted by the compiler, rejected by the preprocessor!\" >&5\n$as_echo \"$as_me: WARNING: $2: accepted by the compiler, rejected by the preprocessor!\" >&2;}\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result\" >&5\n$as_echo \"$as_me: WARNING: $2: proceeding with the compiler's result\" >&2;}\n    ;;\n  no:yes:* )\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: present but cannot be compiled\" >&5\n$as_echo \"$as_me: WARNING: $2: present but cannot be compiled\" >&2;}\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2:     check for missing prerequisite headers?\" >&5\n$as_echo \"$as_me: WARNING: $2:     check for missing prerequisite headers?\" >&2;}\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: see the Autoconf documentation\" >&5\n$as_echo \"$as_me: WARNING: $2: see the Autoconf documentation\" >&2;}\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2:     section \\\"Present But Cannot Be Compiled\\\"\" >&5\n$as_echo \"$as_me: WARNING: $2:     section \\\"Present But Cannot Be Compiled\\\"\" >&2;}\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $2: proceeding with the compiler's result\" >&5\n$as_echo \"$as_me: WARNING: $2: proceeding with the compiler's result\" >&2;}\n    ;;\nesac\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $2\" >&5\n$as_echo_n \"checking for $2... \" >&6; }\nif eval \\${$3+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  eval \"$3=\\$ac_header_compiler\"\nfi\neval ac_res=\\$$3\n\t       { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_res\" >&5\n$as_echo \"$ac_res\" >&6; }\nfi\n  eval $as_lineno_stack; ${as_lineno_stack:+:} unset as_lineno\n\n} # ac_fn_c_check_header_mongrel\ncat >config.log <<_ACEOF\nThis file contains any messages produced by compilers while\nrunning configure, to aid debugging if configure makes a mistake.\n\nIt was created by $as_me, which was\ngenerated by GNU Autoconf 2.69.  Invocation command line was\n\n  $ $0 $@\n\n_ACEOF\nexec 5>>config.log\n{\ncat <<_ASUNAME\n## --------- ##\n## Platform. ##\n## --------- ##\n\nhostname = `(hostname || uname -n) 2>/dev/null | sed 1q`\nuname -m = `(uname -m) 2>/dev/null || echo unknown`\nuname -r = `(uname -r) 2>/dev/null || echo unknown`\nuname -s = `(uname -s) 2>/dev/null || echo unknown`\nuname -v = `(uname -v) 2>/dev/null || echo unknown`\n\n/usr/bin/uname -p = `(/usr/bin/uname -p) 2>/dev/null || echo unknown`\n/bin/uname -X     = `(/bin/uname -X) 2>/dev/null     || echo unknown`\n\n/bin/arch              = `(/bin/arch) 2>/dev/null              || echo unknown`\n/usr/bin/arch -k       = `(/usr/bin/arch -k) 2>/dev/null       || echo unknown`\n/usr/convex/getsysinfo = `(/usr/convex/getsysinfo) 2>/dev/null || echo unknown`\n/usr/bin/hostinfo      = `(/usr/bin/hostinfo) 2>/dev/null      || echo unknown`\n/bin/machine           = `(/bin/machine) 2>/dev/null           || echo unknown`\n/usr/bin/oslevel       = `(/usr/bin/oslevel) 2>/dev/null       || echo unknown`\n/bin/universe          = `(/bin/universe) 2>/dev/null          || echo unknown`\n\n_ASUNAME\n\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    $as_echo \"PATH: $as_dir\"\n  done\nIFS=$as_save_IFS\n\n} >&5\n\ncat >&5 <<_ACEOF\n\n\n## ----------- ##\n## Core tests. ##\n## ----------- ##\n\n_ACEOF\n\n\n# Keep a trace of the command line.\n# Strip out --no-create and --no-recursion so they do not pile up.\n# Strip out --silent because we don't want to record it for future runs.\n# Also quote any args containing shell meta-characters.\n# Make two passes to allow for proper duplicate-argument suppression.\nac_configure_args=\nac_configure_args0=\nac_configure_args1=\nac_must_keep_next=false\nfor ac_pass in 1 2\ndo\n  for ac_arg\n  do\n    case $ac_arg in\n    -no-create | --no-c* | -n | -no-recursion | --no-r*) continue ;;\n    -q | -quiet | --quiet | --quie | --qui | --qu | --q \\\n    | -silent | --silent | --silen | --sile | --sil)\n      continue ;;\n    *\\'*)\n      ac_arg=`$as_echo \"$ac_arg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n    esac\n    case $ac_pass in\n    1) as_fn_append ac_configure_args0 \" '$ac_arg'\" ;;\n    2)\n      as_fn_append ac_configure_args1 \" '$ac_arg'\"\n      if test $ac_must_keep_next = true; then\n\tac_must_keep_next=false # Got value, back to normal.\n      else\n\tcase $ac_arg in\n\t  *=* | --config-cache | -C | -disable-* | --disable-* \\\n\t  | -enable-* | --enable-* | -gas | --g* | -nfp | --nf* \\\n\t  | -q | -quiet | --q* | -silent | --sil* | -v | -verb* \\\n\t  | -with-* | --with-* | -without-* | --without-* | --x)\n\t    case \"$ac_configure_args0 \" in\n\t      \"$ac_configure_args1\"*\" '$ac_arg' \"* ) continue ;;\n\t    esac\n\t    ;;\n\t  -* ) ac_must_keep_next=true ;;\n\tesac\n      fi\n      as_fn_append ac_configure_args \" '$ac_arg'\"\n      ;;\n    esac\n  done\ndone\n{ ac_configure_args0=; unset ac_configure_args0;}\n{ ac_configure_args1=; unset ac_configure_args1;}\n\n# When interrupted or exit'd, cleanup temporary files, and complete\n# config.log.  We remove comments because anyway the quotes in there\n# would cause problems or look ugly.\n# WARNING: Use '\\'' to represent an apostrophe within the trap.\n# WARNING: Do not start the trap code with a newline, due to a FreeBSD 4.0 bug.\ntrap 'exit_status=$?\n  # Save into config.log some information that might help in debugging.\n  {\n    echo\n\n    $as_echo \"## ---------------- ##\n## Cache variables. ##\n## ---------------- ##\"\n    echo\n    # The following way of writing the cache mishandles newlines in values,\n(\n  for ac_var in `(set) 2>&1 | sed -n '\\''s/^\\([a-zA-Z_][a-zA-Z0-9_]*\\)=.*/\\1/p'\\''`; do\n    eval ac_val=\\$$ac_var\n    case $ac_val in #(\n    *${as_nl}*)\n      case $ac_var in #(\n      *_cv_*) { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline\" >&5\n$as_echo \"$as_me: WARNING: cache variable $ac_var contains a newline\" >&2;} ;;\n      esac\n      case $ac_var in #(\n      _ | IFS | as_nl) ;; #(\n      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(\n      *) { eval $ac_var=; unset $ac_var;} ;;\n      esac ;;\n    esac\n  done\n  (set) 2>&1 |\n    case $as_nl`(ac_space='\\'' '\\''; set) 2>&1` in #(\n    *${as_nl}ac_space=\\ *)\n      sed -n \\\n\t\"s/'\\''/'\\''\\\\\\\\'\\'''\\''/g;\n\t  s/^\\\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\\\)=\\\\(.*\\\\)/\\\\1='\\''\\\\2'\\''/p\"\n      ;; #(\n    *)\n      sed -n \"/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p\"\n      ;;\n    esac |\n    sort\n)\n    echo\n\n    $as_echo \"## ----------------- ##\n## Output variables. ##\n## ----------------- ##\"\n    echo\n    for ac_var in $ac_subst_vars\n    do\n      eval ac_val=\\$$ac_var\n      case $ac_val in\n      *\\'\\''*) ac_val=`$as_echo \"$ac_val\" | sed \"s/'\\''/'\\''\\\\\\\\\\\\\\\\'\\'''\\''/g\"`;;\n      esac\n      $as_echo \"$ac_var='\\''$ac_val'\\''\"\n    done | sort\n    echo\n\n    if test -n \"$ac_subst_files\"; then\n      $as_echo \"## ------------------- ##\n## File substitutions. ##\n## ------------------- ##\"\n      echo\n      for ac_var in $ac_subst_files\n      do\n\teval ac_val=\\$$ac_var\n\tcase $ac_val in\n\t*\\'\\''*) ac_val=`$as_echo \"$ac_val\" | sed \"s/'\\''/'\\''\\\\\\\\\\\\\\\\'\\'''\\''/g\"`;;\n\tesac\n\t$as_echo \"$ac_var='\\''$ac_val'\\''\"\n      done | sort\n      echo\n    fi\n\n    if test -s confdefs.h; then\n      $as_echo \"## ----------- ##\n## confdefs.h. ##\n## ----------- ##\"\n      echo\n      cat confdefs.h\n      echo\n    fi\n    test \"$ac_signal\" != 0 &&\n      $as_echo \"$as_me: caught signal $ac_signal\"\n    $as_echo \"$as_me: exit $exit_status\"\n  } >&5\n  rm -f core *.core core.conftest.* &&\n    rm -f -r conftest* confdefs* conf$$* $ac_clean_files &&\n    exit $exit_status\n' 0\nfor ac_signal in 1 2 13 15; do\n  trap 'ac_signal='$ac_signal'; as_fn_exit 1' $ac_signal\ndone\nac_signal=0\n\n# confdefs.h avoids OS command line length limits that DEFS can exceed.\nrm -f -r conftest* confdefs.h\n\n$as_echo \"/* confdefs.h */\" > confdefs.h\n\n# Predefined preprocessor variables.\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_NAME \"$PACKAGE_NAME\"\n_ACEOF\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_TARNAME \"$PACKAGE_TARNAME\"\n_ACEOF\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_VERSION \"$PACKAGE_VERSION\"\n_ACEOF\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_STRING \"$PACKAGE_STRING\"\n_ACEOF\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_BUGREPORT \"$PACKAGE_BUGREPORT\"\n_ACEOF\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE_URL \"$PACKAGE_URL\"\n_ACEOF\n\n\n# Let the site file select an alternate cache file if it wants to.\n# Prefer an explicitly selected file to automatically selected ones.\nac_site_file1=NONE\nac_site_file2=NONE\nif test -n \"$CONFIG_SITE\"; then\n  # We do not want a PATH search for config.site.\n  case $CONFIG_SITE in #((\n    -*)  ac_site_file1=./$CONFIG_SITE;;\n    */*) ac_site_file1=$CONFIG_SITE;;\n    *)   ac_site_file1=./$CONFIG_SITE;;\n  esac\nelif test \"x$prefix\" != xNONE; then\n  ac_site_file1=$prefix/share/config.site\n  ac_site_file2=$prefix/etc/config.site\nelse\n  ac_site_file1=$ac_default_prefix/share/config.site\n  ac_site_file2=$ac_default_prefix/etc/config.site\nfi\nfor ac_site_file in \"$ac_site_file1\" \"$ac_site_file2\"\ndo\n  test \"x$ac_site_file\" = xNONE && continue\n  if test /dev/null != \"$ac_site_file\" && test -r \"$ac_site_file\"; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: loading site script $ac_site_file\" >&5\n$as_echo \"$as_me: loading site script $ac_site_file\" >&6;}\n    sed 's/^/| /' \"$ac_site_file\" >&5\n    . \"$ac_site_file\" \\\n      || { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"failed to load site script $ac_site_file\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\n  fi\ndone\n\nif test -r \"$cache_file\"; then\n  # Some versions of bash will fail to source /dev/null (special files\n  # actually), so we avoid doing that.  DJGPP emulates it as a regular file.\n  if test /dev/null != \"$cache_file\" && test -f \"$cache_file\"; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: loading cache $cache_file\" >&5\n$as_echo \"$as_me: loading cache $cache_file\" >&6;}\n    case $cache_file in\n      [\\\\/]* | ?:[\\\\/]* ) . \"$cache_file\";;\n      *)                      . \"./$cache_file\";;\n    esac\n  fi\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: creating cache $cache_file\" >&5\n$as_echo \"$as_me: creating cache $cache_file\" >&6;}\n  >$cache_file\nfi\n\n# Check that the precious variables saved in the cache have kept the same\n# value.\nac_cache_corrupted=false\nfor ac_var in $ac_precious_vars; do\n  eval ac_old_set=\\$ac_cv_env_${ac_var}_set\n  eval ac_new_set=\\$ac_env_${ac_var}_set\n  eval ac_old_val=\\$ac_cv_env_${ac_var}_value\n  eval ac_new_val=\\$ac_env_${ac_var}_value\n  case $ac_old_set,$ac_new_set in\n    set,)\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: error: \\`$ac_var' was set to \\`$ac_old_val' in the previous run\" >&5\n$as_echo \"$as_me: error: \\`$ac_var' was set to \\`$ac_old_val' in the previous run\" >&2;}\n      ac_cache_corrupted=: ;;\n    ,set)\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: error: \\`$ac_var' was not set in the previous run\" >&5\n$as_echo \"$as_me: error: \\`$ac_var' was not set in the previous run\" >&2;}\n      ac_cache_corrupted=: ;;\n    ,);;\n    *)\n      if test \"x$ac_old_val\" != \"x$ac_new_val\"; then\n\t# differences in whitespace do not lead to failure.\n\tac_old_val_w=`echo x $ac_old_val`\n\tac_new_val_w=`echo x $ac_new_val`\n\tif test \"$ac_old_val_w\" != \"$ac_new_val_w\"; then\n\t  { $as_echo \"$as_me:${as_lineno-$LINENO}: error: \\`$ac_var' has changed since the previous run:\" >&5\n$as_echo \"$as_me: error: \\`$ac_var' has changed since the previous run:\" >&2;}\n\t  ac_cache_corrupted=:\n\telse\n\t  { $as_echo \"$as_me:${as_lineno-$LINENO}: warning: ignoring whitespace changes in \\`$ac_var' since the previous run:\" >&5\n$as_echo \"$as_me: warning: ignoring whitespace changes in \\`$ac_var' since the previous run:\" >&2;}\n\t  eval $ac_var=\\$ac_old_val\n\tfi\n\t{ $as_echo \"$as_me:${as_lineno-$LINENO}:   former value:  \\`$ac_old_val'\" >&5\n$as_echo \"$as_me:   former value:  \\`$ac_old_val'\" >&2;}\n\t{ $as_echo \"$as_me:${as_lineno-$LINENO}:   current value: \\`$ac_new_val'\" >&5\n$as_echo \"$as_me:   current value: \\`$ac_new_val'\" >&2;}\n      fi;;\n  esac\n  # Pass precious variables to config.status.\n  if test \"$ac_new_set\" = set; then\n    case $ac_new_val in\n    *\\'*) ac_arg=$ac_var=`$as_echo \"$ac_new_val\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n    *) ac_arg=$ac_var=$ac_new_val ;;\n    esac\n    case \" $ac_configure_args \" in\n      *\" '$ac_arg' \"*) ;; # Avoid dups.  Use of quotes ensures accuracy.\n      *) as_fn_append ac_configure_args \" '$ac_arg'\" ;;\n    esac\n  fi\ndone\nif $ac_cache_corrupted; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: error: changes in the environment can compromise the build\" >&5\n$as_echo \"$as_me: error: changes in the environment can compromise the build\" >&2;}\n  as_fn_error $? \"run \\`make distclean' and/or \\`rm $cache_file' and start over\" \"$LINENO\" 5\nfi\n## -------------------- ##\n## Main body of script. ##\n## -------------------- ##\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\n\n\norig_CFLAGS=\"$CFLAGS\"\n\n\n\nam__api_version='1.14'\n\nac_aux_dir=\nfor ac_dir in \"$srcdir\" \"$srcdir/..\" \"$srcdir/../..\"; do\n  if test -f \"$ac_dir/install-sh\"; then\n    ac_aux_dir=$ac_dir\n    ac_install_sh=\"$ac_aux_dir/install-sh -c\"\n    break\n  elif test -f \"$ac_dir/install.sh\"; then\n    ac_aux_dir=$ac_dir\n    ac_install_sh=\"$ac_aux_dir/install.sh -c\"\n    break\n  elif test -f \"$ac_dir/shtool\"; then\n    ac_aux_dir=$ac_dir\n    ac_install_sh=\"$ac_aux_dir/shtool install -c\"\n    break\n  fi\ndone\nif test -z \"$ac_aux_dir\"; then\n  as_fn_error $? \"cannot find install-sh, install.sh, or shtool in \\\"$srcdir\\\" \\\"$srcdir/..\\\" \\\"$srcdir/../..\\\"\" \"$LINENO\" 5\nfi\n\n# These three variables are undocumented and unsupported,\n# and are intended to be withdrawn in a future Autoconf release.\n# They can cause serious problems if a builder's source tree is in a directory\n# whose full name contains unusual characters.\nac_config_guess=\"$SHELL $ac_aux_dir/config.guess\"  # Please don't use this var.\nac_config_sub=\"$SHELL $ac_aux_dir/config.sub\"  # Please don't use this var.\nac_configure=\"$SHELL $ac_aux_dir/configure\"  # Please don't use this var.\n\n\n# Find a good install program.  We prefer a C program (faster),\n# so one script is as good as another.  But avoid the broken or\n# incompatible versions:\n# SysV /etc/install, /usr/sbin/install\n# SunOS /usr/etc/install\n# IRIX /sbin/install\n# AIX /bin/install\n# AmigaOS /C/install, which installs bootblocks on floppy discs\n# AIX 4 /usr/bin/installbsd, which doesn't work without a -g flag\n# AFS /usr/afsws/bin/install, which mishandles nonexistent args\n# SVR4 /usr/ucb/install, which tries to use the nonexistent group \"staff\"\n# OS/2's system install, which has a completely different semantic\n# ./install, which can be erroneously created by make from ./install.sh.\n# Reject install programs that cannot install multiple files.\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for a BSD-compatible install\" >&5\n$as_echo_n \"checking for a BSD-compatible install... \" >&6; }\nif test -z \"$INSTALL\"; then\nif ${ac_cv_path_install+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    # Account for people who put trailing slashes in PATH elements.\ncase $as_dir/ in #((\n  ./ | .// | /[cC]/* | \\\n  /etc/* | /usr/sbin/* | /usr/etc/* | /sbin/* | /usr/afsws/bin/* | \\\n  ?:[\\\\/]os2[\\\\/]install[\\\\/]* | ?:[\\\\/]OS2[\\\\/]INSTALL[\\\\/]* | \\\n  /usr/ucb/* ) ;;\n  *)\n    # OSF1 and SCO ODT 3.0 have their own names for install.\n    # Don't use installbsd from OSF since it installs stuff as root\n    # by default.\n    for ac_prog in ginstall scoinst install; do\n      for ac_exec_ext in '' $ac_executable_extensions; do\n\tif as_fn_executable_p \"$as_dir/$ac_prog$ac_exec_ext\"; then\n\t  if test $ac_prog = install &&\n\t    grep dspmsg \"$as_dir/$ac_prog$ac_exec_ext\" >/dev/null 2>&1; then\n\t    # AIX install.  It has an incompatible calling convention.\n\t    :\n\t  elif test $ac_prog = install &&\n\t    grep pwplus \"$as_dir/$ac_prog$ac_exec_ext\" >/dev/null 2>&1; then\n\t    # program-specific install script used by HP pwplus--don't use.\n\t    :\n\t  else\n\t    rm -rf conftest.one conftest.two conftest.dir\n\t    echo one > conftest.one\n\t    echo two > conftest.two\n\t    mkdir conftest.dir\n\t    if \"$as_dir/$ac_prog$ac_exec_ext\" -c conftest.one conftest.two \"`pwd`/conftest.dir\" &&\n\t      test -s conftest.one && test -s conftest.two &&\n\t      test -s conftest.dir/conftest.one &&\n\t      test -s conftest.dir/conftest.two\n\t    then\n\t      ac_cv_path_install=\"$as_dir/$ac_prog$ac_exec_ext -c\"\n\t      break 3\n\t    fi\n\t  fi\n\tfi\n      done\n    done\n    ;;\nesac\n\n  done\nIFS=$as_save_IFS\n\nrm -rf conftest.one conftest.two conftest.dir\n\nfi\n  if test \"${ac_cv_path_install+set}\" = set; then\n    INSTALL=$ac_cv_path_install\n  else\n    # As a last resort, use the slow shell script.  Don't cache a\n    # value for INSTALL within a source directory, because that will\n    # break other packages using the cache if that directory is\n    # removed, or if the value is a relative name.\n    INSTALL=$ac_install_sh\n  fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $INSTALL\" >&5\n$as_echo \"$INSTALL\" >&6; }\n\n# Use test -z because SunOS4 sh mishandles braces in ${var-val}.\n# It thinks the first close brace ends the variable substitution.\ntest -z \"$INSTALL_PROGRAM\" && INSTALL_PROGRAM='${INSTALL}'\n\ntest -z \"$INSTALL_SCRIPT\" && INSTALL_SCRIPT='${INSTALL}'\n\ntest -z \"$INSTALL_DATA\" && INSTALL_DATA='${INSTALL} -m 644'\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether build environment is sane\" >&5\n$as_echo_n \"checking whether build environment is sane... \" >&6; }\n# Reject unsafe characters in $srcdir or the absolute working directory\n# name.  Accept space and tab only in the latter.\nam_lf='\n'\ncase `pwd` in\n  *[\\\\\\\"\\#\\$\\&\\'\\`$am_lf]*)\n    as_fn_error $? \"unsafe absolute working directory name\" \"$LINENO\" 5;;\nesac\ncase $srcdir in\n  *[\\\\\\\"\\#\\$\\&\\'\\`$am_lf\\ \\\t]*)\n    as_fn_error $? \"unsafe srcdir value: '$srcdir'\" \"$LINENO\" 5;;\nesac\n\n# Do 'set' in a subshell so we don't clobber the current shell's\n# arguments.  Must try -L first in case configure is actually a\n# symlink; some systems play weird games with the mod time of symlinks\n# (eg FreeBSD returns the mod time of the symlink's containing\n# directory).\nif (\n   am_has_slept=no\n   for am_try in 1 2; do\n     echo \"timestamp, slept: $am_has_slept\" > conftest.file\n     set X `ls -Lt \"$srcdir/configure\" conftest.file 2> /dev/null`\n     if test \"$*\" = \"X\"; then\n\t# -L didn't work.\n\tset X `ls -t \"$srcdir/configure\" conftest.file`\n     fi\n     if test \"$*\" != \"X $srcdir/configure conftest.file\" \\\n\t&& test \"$*\" != \"X conftest.file $srcdir/configure\"; then\n\n\t# If neither matched, then we have a broken ls.  This can happen\n\t# if, for instance, CONFIG_SHELL is bash and it inherits a\n\t# broken ls alias from the environment.  This has actually\n\t# happened.  Such a system could not be considered \"sane\".\n\tas_fn_error $? \"ls -t appears to fail.  Make sure there is not a broken\n  alias in your environment\" \"$LINENO\" 5\n     fi\n     if test \"$2\" = conftest.file || test $am_try -eq 2; then\n       break\n     fi\n     # Just in case.\n     sleep 1\n     am_has_slept=yes\n   done\n   test \"$2\" = conftest.file\n   )\nthen\n   # Ok.\n   :\nelse\n   as_fn_error $? \"newly created file is older than distributed files!\nCheck your system clock\" \"$LINENO\" 5\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\n# If we didn't sleep, we still need to ensure time stamps of config.status and\n# generated files are strictly newer.\nam_sleep_pid=\nif grep 'slept: no' conftest.file >/dev/null 2>&1; then\n  ( sleep 1 ) &\n  am_sleep_pid=$!\nfi\n\nrm -f conftest.file\n\ntest \"$program_prefix\" != NONE &&\n  program_transform_name=\"s&^&$program_prefix&;$program_transform_name\"\n# Use a double $ so make ignores it.\ntest \"$program_suffix\" != NONE &&\n  program_transform_name=\"s&\\$&$program_suffix&;$program_transform_name\"\n# Double any \\ or $.\n# By default was `s,x,x', remove it if useless.\nac_script='s/[\\\\$]/&&/g;s/;s,x,x,$//'\nprogram_transform_name=`$as_echo \"$program_transform_name\" | sed \"$ac_script\"`\n\n# Expand $ac_aux_dir to an absolute path.\nam_aux_dir=`cd \"$ac_aux_dir\" && pwd`\n\nif test x\"${MISSING+set}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    MISSING=\"\\${SHELL} \\\"$am_aux_dir/missing\\\"\" ;;\n  *)\n    MISSING=\"\\${SHELL} $am_aux_dir/missing\" ;;\n  esac\nfi\n# Use eval to expand $SHELL\nif eval \"$MISSING --is-lightweight\"; then\n  am_missing_run=\"$MISSING \"\nelse\n  am_missing_run=\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: 'missing' script is too old or missing\" >&5\n$as_echo \"$as_me: WARNING: 'missing' script is too old or missing\" >&2;}\nfi\n\nif test x\"${install_sh}\" != xset; then\n  case $am_aux_dir in\n  *\\ * | *\\\t*)\n    install_sh=\"\\${SHELL} '$am_aux_dir/install-sh'\" ;;\n  *)\n    install_sh=\"\\${SHELL} $am_aux_dir/install-sh\"\n  esac\nfi\n\n# Installed binaries are usually stripped using 'strip' when the user\n# run \"make install-strip\".  However 'strip' might not be the right\n# tool to use in cross-compilation environments, therefore Automake\n# will honor the 'STRIP' environment variable to overrule this program.\nif test \"$cross_compiling\" != no; then\n  if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}strip\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}strip; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_STRIP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$STRIP\"; then\n  ac_cv_prog_STRIP=\"$STRIP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_STRIP=\"${ac_tool_prefix}strip\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nSTRIP=$ac_cv_prog_STRIP\nif test -n \"$STRIP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $STRIP\" >&5\n$as_echo \"$STRIP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_STRIP\"; then\n  ac_ct_STRIP=$STRIP\n  # Extract the first word of \"strip\", so it can be a program name with args.\nset dummy strip; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_STRIP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_STRIP\"; then\n  ac_cv_prog_ac_ct_STRIP=\"$ac_ct_STRIP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_STRIP=\"strip\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP\nif test -n \"$ac_ct_STRIP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_STRIP\" >&5\n$as_echo \"$ac_ct_STRIP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_STRIP\" = x; then\n    STRIP=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    STRIP=$ac_ct_STRIP\n  fi\nelse\n  STRIP=\"$ac_cv_prog_STRIP\"\nfi\n\nfi\nINSTALL_STRIP_PROGRAM=\"\\$(install_sh) -c -s\"\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for a thread-safe mkdir -p\" >&5\n$as_echo_n \"checking for a thread-safe mkdir -p... \" >&6; }\nif test -z \"$MKDIR_P\"; then\n  if ${ac_cv_path_mkdir+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH$PATH_SEPARATOR/opt/sfw/bin\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_prog in mkdir gmkdir; do\n\t for ac_exec_ext in '' $ac_executable_extensions; do\n\t   as_fn_executable_p \"$as_dir/$ac_prog$ac_exec_ext\" || continue\n\t   case `\"$as_dir/$ac_prog$ac_exec_ext\" --version 2>&1` in #(\n\t     'mkdir (GNU coreutils) '* | \\\n\t     'mkdir (coreutils) '* | \\\n\t     'mkdir (fileutils) '4.1*)\n\t       ac_cv_path_mkdir=$as_dir/$ac_prog$ac_exec_ext\n\t       break 3;;\n\t   esac\n\t done\n       done\n  done\nIFS=$as_save_IFS\n\nfi\n\n  test -d ./--version && rmdir ./--version\n  if test \"${ac_cv_path_mkdir+set}\" = set; then\n    MKDIR_P=\"$ac_cv_path_mkdir -p\"\n  else\n    # As a last resort, use the slow shell script.  Don't cache a\n    # value for MKDIR_P within a source directory, because that will\n    # break other packages using the cache if that directory is\n    # removed, or if the value is a relative name.\n    MKDIR_P=\"$ac_install_sh -d\"\n  fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MKDIR_P\" >&5\n$as_echo \"$MKDIR_P\" >&6; }\n\nfor ac_prog in gawk mawk nawk awk\ndo\n  # Extract the first word of \"$ac_prog\", so it can be a program name with args.\nset dummy $ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_AWK+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$AWK\"; then\n  ac_cv_prog_AWK=\"$AWK\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_AWK=\"$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nAWK=$ac_cv_prog_AWK\nif test -n \"$AWK\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $AWK\" >&5\n$as_echo \"$AWK\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  test -n \"$AWK\" && break\ndone\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether ${MAKE-make} sets \\$(MAKE)\" >&5\n$as_echo_n \"checking whether ${MAKE-make} sets \\$(MAKE)... \" >&6; }\nset x ${MAKE-make}\nac_make=`$as_echo \"$2\" | sed 's/+/p/g; s/[^a-zA-Z0-9_]/_/g'`\nif eval \\${ac_cv_prog_make_${ac_make}_set+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat >conftest.make <<\\_ACEOF\nSHELL = /bin/sh\nall:\n\t@echo '@@@%%%=$(MAKE)=@@@%%%'\n_ACEOF\n# GNU make sometimes prints \"make[1]: Entering ...\", which would confuse us.\ncase `${MAKE-make} -f conftest.make 2>/dev/null` in\n  *@@@%%%=?*=@@@%%%*)\n    eval ac_cv_prog_make_${ac_make}_set=yes;;\n  *)\n    eval ac_cv_prog_make_${ac_make}_set=no;;\nesac\nrm -f conftest.make\nfi\nif eval test \\$ac_cv_prog_make_${ac_make}_set = yes; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\n  SET_MAKE=\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\n  SET_MAKE=\"MAKE=${MAKE-make}\"\nfi\n\nrm -rf .tst 2>/dev/null\nmkdir .tst 2>/dev/null\nif test -d .tst; then\n  am__leading_dot=.\nelse\n  am__leading_dot=_\nfi\nrmdir .tst 2>/dev/null\n\n# Check whether --enable-silent-rules was given.\nif test \"${enable_silent_rules+set}\" = set; then :\n  enableval=$enable_silent_rules;\nfi\n\ncase $enable_silent_rules in # (((\n  yes) AM_DEFAULT_VERBOSITY=0;;\n   no) AM_DEFAULT_VERBOSITY=1;;\n    *) AM_DEFAULT_VERBOSITY=1;;\nesac\nam_make=${MAKE-make}\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $am_make supports nested variables\" >&5\n$as_echo_n \"checking whether $am_make supports nested variables... \" >&6; }\nif ${am_cv_make_support_nested_variables+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if $as_echo 'TRUE=$(BAR$(V))\nBAR0=false\nBAR1=true\nV=1\nam__doit:\n\t@$(TRUE)\n.PHONY: am__doit' | $am_make -f - >/dev/null 2>&1; then\n  am_cv_make_support_nested_variables=yes\nelse\n  am_cv_make_support_nested_variables=no\nfi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $am_cv_make_support_nested_variables\" >&5\n$as_echo \"$am_cv_make_support_nested_variables\" >&6; }\nif test $am_cv_make_support_nested_variables = yes; then\n    AM_V='$(V)'\n  AM_DEFAULT_V='$(AM_DEFAULT_VERBOSITY)'\nelse\n  AM_V=$AM_DEFAULT_VERBOSITY\n  AM_DEFAULT_V=$AM_DEFAULT_VERBOSITY\nfi\nAM_BACKSLASH='\\'\n\nif test \"`cd $srcdir && pwd`\" != \"`pwd`\"; then\n  # Use -I$(srcdir) only when $(srcdir) != ., so that make's output\n  # is not polluted with repeated \"-I.\"\n  am__isrc=' -I$(srcdir)'\n  # test to see if srcdir already configured\n  if test -f $srcdir/config.status; then\n    as_fn_error $? \"source directory already configured; run \\\"make distclean\\\" there first\" \"$LINENO\" 5\n  fi\nfi\n\n# test whether we have cygpath\nif test -z \"$CYGPATH_W\"; then\n  if (cygpath --version) >/dev/null 2>/dev/null; then\n    CYGPATH_W='cygpath -w'\n  else\n    CYGPATH_W=echo\n  fi\nfi\n\n\n# Define the identity of the package.\n\n PACKAGE=libev\n VERSION=4.22\n\n\ncat >>confdefs.h <<_ACEOF\n#define PACKAGE \"$PACKAGE\"\n_ACEOF\n\n\ncat >>confdefs.h <<_ACEOF\n#define VERSION \"$VERSION\"\n_ACEOF\n\n# Some tools Automake needs.\n\nACLOCAL=${ACLOCAL-\"${am_missing_run}aclocal-${am__api_version}\"}\n\n\nAUTOCONF=${AUTOCONF-\"${am_missing_run}autoconf\"}\n\n\nAUTOMAKE=${AUTOMAKE-\"${am_missing_run}automake-${am__api_version}\"}\n\n\nAUTOHEADER=${AUTOHEADER-\"${am_missing_run}autoheader\"}\n\n\nMAKEINFO=${MAKEINFO-\"${am_missing_run}makeinfo\"}\n\n# For better backward compatibility.  To be removed once Automake 1.9.x\n# dies out for good.  For more background, see:\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00001.html>\n# <http://lists.gnu.org/archive/html/automake/2012-07/msg00014.html>\nmkdir_p='$(MKDIR_P)'\n\n# We need awk for the \"check\" target.  The system \"awk\" is bad on\n# some platforms.\n# Always define AMTAR for backward compatibility.  Yes, it's still used\n# in the wild :-(  We should find a proper way to deprecate it ...\nAMTAR='$${TAR-tar}'\n\n\n# We'll loop over all known methods to create a tar archive until one works.\n_am_tools='gnutar  pax cpio none'\n\nam__tar='$${TAR-tar} chof - \"$$tardir\"' am__untar='$${TAR-tar} xf -'\n\n\n\n\n\n\n# POSIX will say in a future version that running \"rm -f\" with no argument\n# is OK; and we want to be able to make that assumption in our Makefile\n# recipes.  So use an aggressive probe to check that the usage we want is\n# actually supported \"in the wild\" to an acceptable degree.\n# See automake bug#10828.\n# To make any issue more visible, cause the running configure to be aborted\n# by default if the 'rm' program in use doesn't match our expectations; the\n# user can still override this though.\nif rm -f && rm -fr && rm -rf; then : OK; else\n  cat >&2 <<'END'\nOops!\n\nYour 'rm' program seems unable to run without file operands specified\non the command line, even when the '-f' option is present.  This is contrary\nto the behaviour of most rm programs out there, and not conforming with\nthe upcoming POSIX standard: <http://austingroupbugs.net/view.php?id=542>\n\nPlease tell bug-automake@gnu.org about your system, including the value\nof your $PATH and any error possibly output before this message.  This\ncan help us improve future automake versions.\n\nEND\n  if test x\"$ACCEPT_INFERIOR_RM_PROGRAM\" = x\"yes\"; then\n    echo 'Configuration will proceed anyway, since you have set the' >&2\n    echo 'ACCEPT_INFERIOR_RM_PROGRAM variable to \"yes\"' >&2\n    echo >&2\n  else\n    cat >&2 <<'END'\nAborting the configuration process, to ensure you take notice of the issue.\n\nYou can download and install GNU coreutils to get an 'rm' implementation\nthat behaves properly: <http://www.gnu.org/software/coreutils/>.\n\nIf you want to complete the configuration process using your problematic\n'rm' anyway, export the environment variable ACCEPT_INFERIOR_RM_PROGRAM\nto \"yes\", and re-run configure.\n\nEND\n    as_fn_error $? \"Your 'rm' program is bad, sorry.\" \"$LINENO\" 5\n  fi\nfi\n\nac_config_headers=\"$ac_config_headers config.h\"\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to enable maintainer-specific portions of Makefiles\" >&5\n$as_echo_n \"checking whether to enable maintainer-specific portions of Makefiles... \" >&6; }\n    # Check whether --enable-maintainer-mode was given.\nif test \"${enable_maintainer_mode+set}\" = set; then :\n  enableval=$enable_maintainer_mode; USE_MAINTAINER_MODE=$enableval\nelse\n  USE_MAINTAINER_MODE=no\nfi\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $USE_MAINTAINER_MODE\" >&5\n$as_echo \"$USE_MAINTAINER_MODE\" >&6; }\n   if test $USE_MAINTAINER_MODE = yes; then\n  MAINTAINER_MODE_TRUE=\n  MAINTAINER_MODE_FALSE='#'\nelse\n  MAINTAINER_MODE_TRUE='#'\n  MAINTAINER_MODE_FALSE=\nfi\n\n  MAINT=$MAINTAINER_MODE_TRUE\n\n\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}gcc\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}gcc; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$CC\"; then\n  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_CC=\"${ac_tool_prefix}gcc\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nCC=$ac_cv_prog_CC\nif test -n \"$CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CC\" >&5\n$as_echo \"$CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_CC\"; then\n  ac_ct_CC=$CC\n  # Extract the first word of \"gcc\", so it can be a program name with args.\nset dummy gcc; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_CC\"; then\n  ac_cv_prog_ac_ct_CC=\"$ac_ct_CC\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_CC=\"gcc\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_CC=$ac_cv_prog_ac_ct_CC\nif test -n \"$ac_ct_CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC\" >&5\n$as_echo \"$ac_ct_CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_CC\" = x; then\n    CC=\"\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    CC=$ac_ct_CC\n  fi\nelse\n  CC=\"$ac_cv_prog_CC\"\nfi\n\nif test -z \"$CC\"; then\n          if test -n \"$ac_tool_prefix\"; then\n    # Extract the first word of \"${ac_tool_prefix}cc\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}cc; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$CC\"; then\n  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_CC=\"${ac_tool_prefix}cc\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nCC=$ac_cv_prog_CC\nif test -n \"$CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CC\" >&5\n$as_echo \"$CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  fi\nfi\nif test -z \"$CC\"; then\n  # Extract the first word of \"cc\", so it can be a program name with args.\nset dummy cc; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$CC\"; then\n  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\nelse\n  ac_prog_rejected=no\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    if test \"$as_dir/$ac_word$ac_exec_ext\" = \"/usr/ucb/cc\"; then\n       ac_prog_rejected=yes\n       continue\n     fi\n    ac_cv_prog_CC=\"cc\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nif test $ac_prog_rejected = yes; then\n  # We found a bogon in the path, so make sure we never use it.\n  set dummy $ac_cv_prog_CC\n  shift\n  if test $# != 0; then\n    # We chose a different compiler from the bogus one.\n    # However, it has the same basename, so the bogon will be chosen\n    # first if we set CC to just the basename; use the full file name.\n    shift\n    ac_cv_prog_CC=\"$as_dir/$ac_word${1+' '}$@\"\n  fi\nfi\nfi\nfi\nCC=$ac_cv_prog_CC\nif test -n \"$CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CC\" >&5\n$as_echo \"$CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$CC\"; then\n  if test -n \"$ac_tool_prefix\"; then\n  for ac_prog in cl.exe\n  do\n    # Extract the first word of \"$ac_tool_prefix$ac_prog\", so it can be a program name with args.\nset dummy $ac_tool_prefix$ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$CC\"; then\n  ac_cv_prog_CC=\"$CC\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_CC=\"$ac_tool_prefix$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nCC=$ac_cv_prog_CC\nif test -n \"$CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CC\" >&5\n$as_echo \"$CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n    test -n \"$CC\" && break\n  done\nfi\nif test -z \"$CC\"; then\n  ac_ct_CC=$CC\n  for ac_prog in cl.exe\ndo\n  # Extract the first word of \"$ac_prog\", so it can be a program name with args.\nset dummy $ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_CC+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_CC\"; then\n  ac_cv_prog_ac_ct_CC=\"$ac_ct_CC\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_CC=\"$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_CC=$ac_cv_prog_ac_ct_CC\nif test -n \"$ac_ct_CC\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_CC\" >&5\n$as_echo \"$ac_ct_CC\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  test -n \"$ac_ct_CC\" && break\ndone\n\n  if test \"x$ac_ct_CC\" = x; then\n    CC=\"\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    CC=$ac_ct_CC\n  fi\nfi\n\nfi\n\n\ntest -z \"$CC\" && { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"no acceptable C compiler found in \\$PATH\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\n\n# Provide some information about the compiler.\n$as_echo \"$as_me:${as_lineno-$LINENO}: checking for C compiler version\" >&5\nset X $ac_compile\nac_compiler=$2\nfor ac_option in --version -v -V -qversion; do\n  { { ac_try=\"$ac_compiler $ac_option >&5\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_compiler $ac_option >&5\") 2>conftest.err\n  ac_status=$?\n  if test -s conftest.err; then\n    sed '10a\\\n... rest of stderr output deleted ...\n         10q' conftest.err >conftest.er1\n    cat conftest.er1 >&5\n  fi\n  rm -f conftest.er1 conftest.err\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }\ndone\n\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nac_clean_files_save=$ac_clean_files\nac_clean_files=\"$ac_clean_files a.out a.out.dSYM a.exe b.out\"\n# Try to create an executable without -o first, disregard a.out.\n# It will help us diagnose broken compilers, and finding out an intuition\n# of exeext.\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the C compiler works\" >&5\n$as_echo_n \"checking whether the C compiler works... \" >&6; }\nac_link_default=`$as_echo \"$ac_link\" | sed 's/ -o *conftest[^ ]*//'`\n\n# The possible output files:\nac_files=\"a.out conftest.exe conftest a.exe a_out.exe b.out conftest.*\"\n\nac_rmfiles=\nfor ac_file in $ac_files\ndo\n  case $ac_file in\n    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;\n    * ) ac_rmfiles=\"$ac_rmfiles $ac_file\";;\n  esac\ndone\nrm -f $ac_rmfiles\n\nif { { ac_try=\"$ac_link_default\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_link_default\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then :\n  # Autoconf-2.13 could set the ac_cv_exeext variable to `no'.\n# So ignore a value of `no', otherwise this would lead to `EXEEXT = no'\n# in a Makefile.  We should not override ac_cv_exeext if it was cached,\n# so that the user can short-circuit this test for compilers unknown to\n# Autoconf.\nfor ac_file in $ac_files ''\ndo\n  test -f \"$ac_file\" || continue\n  case $ac_file in\n    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj )\n\t;;\n    [ab].out )\n\t# We found the default executable, but exeext='' is most\n\t# certainly right.\n\tbreak;;\n    *.* )\n\tif test \"${ac_cv_exeext+set}\" = set && test \"$ac_cv_exeext\" != no;\n\tthen :; else\n\t   ac_cv_exeext=`expr \"$ac_file\" : '[^.]*\\(\\..*\\)'`\n\tfi\n\t# We set ac_cv_exeext here because the later test for it is not\n\t# safe: cross compilers may not add the suffix if given an `-o'\n\t# argument, so we may need to know it at that point already.\n\t# Even if this section looks crufty: it has the advantage of\n\t# actually working.\n\tbreak;;\n    * )\n\tbreak;;\n  esac\ndone\ntest \"$ac_cv_exeext\" = no && ac_cv_exeext=\n\nelse\n  ac_file=''\nfi\nif test -z \"$ac_file\"; then :\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\n$as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n{ { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error 77 \"C compiler cannot create executables\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for C compiler default output file name\" >&5\n$as_echo_n \"checking for C compiler default output file name... \" >&6; }\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_file\" >&5\n$as_echo \"$ac_file\" >&6; }\nac_exeext=$ac_cv_exeext\n\nrm -f -r a.out a.out.dSYM a.exe conftest$ac_cv_exeext b.out\nac_clean_files=$ac_clean_files_save\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for suffix of executables\" >&5\n$as_echo_n \"checking for suffix of executables... \" >&6; }\nif { { ac_try=\"$ac_link\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_link\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then :\n  # If both `conftest.exe' and `conftest' are `present' (well, observable)\n# catch `conftest.exe'.  For instance with Cygwin, `ls conftest' will\n# work properly (i.e., refer to `conftest.exe'), while it won't with\n# `rm'.\nfor ac_file in conftest.exe conftest conftest.*; do\n  test -f \"$ac_file\" || continue\n  case $ac_file in\n    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM | *.o | *.obj ) ;;\n    *.* ) ac_cv_exeext=`expr \"$ac_file\" : '[^.]*\\(\\..*\\)'`\n\t  break;;\n    * ) break;;\n  esac\ndone\nelse\n  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"cannot compute suffix of executables: cannot compile and link\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\nfi\nrm -f conftest conftest$ac_cv_exeext\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_exeext\" >&5\n$as_echo \"$ac_cv_exeext\" >&6; }\n\nrm -f conftest.$ac_ext\nEXEEXT=$ac_cv_exeext\nac_exeext=$EXEEXT\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <stdio.h>\nint\nmain ()\n{\nFILE *f = fopen (\"conftest.out\", \"w\");\n return ferror (f) || fclose (f) != 0;\n\n  ;\n  return 0;\n}\n_ACEOF\nac_clean_files=\"$ac_clean_files conftest.out\"\n# Check that the compiler produces executables we can run.  If not, either\n# the compiler is broken, or we cross compile.\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether we are cross compiling\" >&5\n$as_echo_n \"checking whether we are cross compiling... \" >&6; }\nif test \"$cross_compiling\" != yes; then\n  { { ac_try=\"$ac_link\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_link\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }\n  if { ac_try='./conftest$ac_cv_exeext'\n  { { case \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_try\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; }; then\n    cross_compiling=no\n  else\n    if test \"$cross_compiling\" = maybe; then\n\tcross_compiling=yes\n    else\n\t{ { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"cannot run C compiled programs.\nIf you meant to cross compile, use \\`--host'.\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\n    fi\n  fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $cross_compiling\" >&5\n$as_echo \"$cross_compiling\" >&6; }\n\nrm -f conftest.$ac_ext conftest$ac_cv_exeext conftest.out\nac_clean_files=$ac_clean_files_save\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for suffix of object files\" >&5\n$as_echo_n \"checking for suffix of object files... \" >&6; }\nif ${ac_cv_objext+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nrm -f conftest.o conftest.obj\nif { { ac_try=\"$ac_compile\"\ncase \"(($ac_try\" in\n  *\\\"* | *\\`* | *\\\\*) ac_try_echo=\\$ac_try;;\n  *) ac_try_echo=$ac_try;;\nesac\neval ac_try_echo=\"\\\"\\$as_me:${as_lineno-$LINENO}: $ac_try_echo\\\"\"\n$as_echo \"$ac_try_echo\"; } >&5\n  (eval \"$ac_compile\") 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then :\n  for ac_file in conftest.o conftest.obj conftest.*; do\n  test -f \"$ac_file\" || continue;\n  case $ac_file in\n    *.$ac_ext | *.xcoff | *.tds | *.d | *.pdb | *.xSYM | *.bb | *.bbg | *.map | *.inf | *.dSYM ) ;;\n    *) ac_cv_objext=`expr \"$ac_file\" : '.*\\.\\(.*\\)'`\n       break;;\n  esac\ndone\nelse\n  $as_echo \"$as_me: failed program was:\" >&5\nsed 's/^/| /' conftest.$ac_ext >&5\n\n{ { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"cannot compute suffix of object files: cannot compile\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\nfi\nrm -f conftest.$ac_cv_objext conftest.$ac_ext\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_objext\" >&5\n$as_echo \"$ac_cv_objext\" >&6; }\nOBJEXT=$ac_cv_objext\nac_objext=$OBJEXT\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether we are using the GNU C compiler\" >&5\n$as_echo_n \"checking whether we are using the GNU C compiler... \" >&6; }\nif ${ac_cv_c_compiler_gnu+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n#ifndef __GNUC__\n       choke me\n#endif\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_compiler_gnu=yes\nelse\n  ac_compiler_gnu=no\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\nac_cv_c_compiler_gnu=$ac_compiler_gnu\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_c_compiler_gnu\" >&5\n$as_echo \"$ac_cv_c_compiler_gnu\" >&6; }\nif test $ac_compiler_gnu = yes; then\n  GCC=yes\nelse\n  GCC=\nfi\nac_test_CFLAGS=${CFLAGS+set}\nac_save_CFLAGS=$CFLAGS\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CC accepts -g\" >&5\n$as_echo_n \"checking whether $CC accepts -g... \" >&6; }\nif ${ac_cv_prog_cc_g+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_save_c_werror_flag=$ac_c_werror_flag\n   ac_c_werror_flag=yes\n   ac_cv_prog_cc_g=no\n   CFLAGS=\"-g\"\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_cv_prog_cc_g=yes\nelse\n  CFLAGS=\"\"\n      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n\nelse\n  ac_c_werror_flag=$ac_save_c_werror_flag\n\t CFLAGS=\"-g\"\n\t cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_cv_prog_cc_g=yes\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n   ac_c_werror_flag=$ac_save_c_werror_flag\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_g\" >&5\n$as_echo \"$ac_cv_prog_cc_g\" >&6; }\nif test \"$ac_test_CFLAGS\" = set; then\n  CFLAGS=$ac_save_CFLAGS\nelif test $ac_cv_prog_cc_g = yes; then\n  if test \"$GCC\" = yes; then\n    CFLAGS=\"-g -O2\"\n  else\n    CFLAGS=\"-g\"\n  fi\nelse\n  if test \"$GCC\" = yes; then\n    CFLAGS=\"-O2\"\n  else\n    CFLAGS=\n  fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $CC option to accept ISO C89\" >&5\n$as_echo_n \"checking for $CC option to accept ISO C89... \" >&6; }\nif ${ac_cv_prog_cc_c89+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_cv_prog_cc_c89=no\nac_save_CC=$CC\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <stdarg.h>\n#include <stdio.h>\nstruct stat;\n/* Most of the following tests are stolen from RCS 5.7's src/conf.sh.  */\nstruct buf { int x; };\nFILE * (*rcsopen) (struct buf *, struct stat *, int);\nstatic char *e (p, i)\n     char **p;\n     int i;\n{\n  return p[i];\n}\nstatic char *f (char * (*g) (char **, int), char **p, ...)\n{\n  char *s;\n  va_list v;\n  va_start (v,p);\n  s = g (p, va_arg (v,int));\n  va_end (v);\n  return s;\n}\n\n/* OSF 4.0 Compaq cc is some sort of almost-ANSI by default.  It has\n   function prototypes and stuff, but not '\\xHH' hex character constants.\n   These don't provoke an error unfortunately, instead are silently treated\n   as 'x'.  The following induces an error, until -std is added to get\n   proper ANSI mode.  Curiously '\\x00'!='x' always comes out true, for an\n   array size at least.  It's necessary to write '\\x00'==0 to get something\n   that's true only with -std.  */\nint osf4_cc_array ['\\x00' == 0 ? 1 : -1];\n\n/* IBM C 6 for AIX is almost-ANSI by default, but it replaces macro parameters\n   inside strings and character constants.  */\n#define FOO(x) 'x'\nint xlc6_cc_array[FOO(a) == 'x' ? 1 : -1];\n\nint test (int i, double x);\nstruct s1 {int (*f) (int a);};\nstruct s2 {int (*f) (double a);};\nint pairnames (int, char **, FILE *(*)(struct buf *, struct stat *, int), int, int);\nint argc;\nchar **argv;\nint\nmain ()\n{\nreturn f (e, argv, 0) != argv[0]  ||  f (e, argv, 1) != argv[1];\n  ;\n  return 0;\n}\n_ACEOF\nfor ac_arg in '' -qlanglvl=extc89 -qlanglvl=ansi -std \\\n\t-Ae \"-Aa -D_HPUX_SOURCE\" \"-Xc -D__EXTENSIONS__\"\ndo\n  CC=\"$ac_save_CC $ac_arg\"\n  if ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_cv_prog_cc_c89=$ac_arg\nfi\nrm -f core conftest.err conftest.$ac_objext\n  test \"x$ac_cv_prog_cc_c89\" != \"xno\" && break\ndone\nrm -f conftest.$ac_ext\nCC=$ac_save_CC\n\nfi\n# AC_CACHE_VAL\ncase \"x$ac_cv_prog_cc_c89\" in\n  x)\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: none needed\" >&5\n$as_echo \"none needed\" >&6; } ;;\n  xno)\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: unsupported\" >&5\n$as_echo \"unsupported\" >&6; } ;;\n  *)\n    CC=\"$CC $ac_cv_prog_cc_c89\"\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_prog_cc_c89\" >&5\n$as_echo \"$ac_cv_prog_cc_c89\" >&6; } ;;\nesac\nif test \"x$ac_cv_prog_cc_c89\" != xno; then :\n\nfi\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether $CC understands -c and -o together\" >&5\n$as_echo_n \"checking whether $CC understands -c and -o together... \" >&6; }\nif ${am_cv_prog_cc_c_o+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\n  # Make sure it works both with $CC and with simple cc.\n  # Following AC_PROG_CC_C_O, we do the test twice because some\n  # compilers refuse to overwrite an existing .o file with -o,\n  # though they will create one.\n  am_cv_prog_cc_c_o=yes\n  for am_i in 1 2; do\n    if { echo \"$as_me:$LINENO: $CC -c conftest.$ac_ext -o conftest2.$ac_objext\" >&5\n   ($CC -c conftest.$ac_ext -o conftest2.$ac_objext) >&5 2>&5\n   ac_status=$?\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   (exit $ac_status); } \\\n         && test -f conftest2.$ac_objext; then\n      : OK\n    else\n      am_cv_prog_cc_c_o=no\n      break\n    fi\n  done\n  rm -f core conftest*\n  unset am_i\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $am_cv_prog_cc_c_o\" >&5\n$as_echo \"$am_cv_prog_cc_c_o\" >&6; }\nif test \"$am_cv_prog_cc_c_o\" != yes; then\n   # Losing compiler, so override with the script.\n   # FIXME: It is wrong to rewrite CC.\n   # But if we don't then we get into trouble of one sort or another.\n   # A longer-term fix would be to have automake use am__CC in this case,\n   # and then we could set am__CC=\"\\$(top_srcdir)/compile \\$(CC)\"\n   CC=\"$am_aux_dir/compile $CC\"\nfi\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\nDEPDIR=\"${am__leading_dot}deps\"\n\nac_config_commands=\"$ac_config_commands depfiles\"\n\n\nam_make=${MAKE-make}\ncat > confinc << 'END'\nam__doit:\n\t@echo this is the am__doit target\n.PHONY: am__doit\nEND\n# If we don't find an include directive, just comment out the code.\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for style of include used by $am_make\" >&5\n$as_echo_n \"checking for style of include used by $am_make... \" >&6; }\nam__include=\"#\"\nam__quote=\n_am_result=none\n# First try GNU make style include.\necho \"include confinc\" > confmf\n# Ignore all kinds of additional output from 'make'.\ncase `$am_make -s -f confmf 2> /dev/null` in #(\n*the\\ am__doit\\ target*)\n  am__include=include\n  am__quote=\n  _am_result=GNU\n  ;;\nesac\n# Now try BSD make style include.\nif test \"$am__include\" = \"#\"; then\n   echo '.include \"confinc\"' > confmf\n   case `$am_make -s -f confmf 2> /dev/null` in #(\n   *the\\ am__doit\\ target*)\n     am__include=.include\n     am__quote=\"\\\"\"\n     _am_result=BSD\n     ;;\n   esac\nfi\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $_am_result\" >&5\n$as_echo \"$_am_result\" >&6; }\nrm -f confinc confmf\n\n# Check whether --enable-dependency-tracking was given.\nif test \"${enable_dependency_tracking+set}\" = set; then :\n  enableval=$enable_dependency_tracking;\nfi\n\nif test \"x$enable_dependency_tracking\" != xno; then\n  am_depcomp=\"$ac_aux_dir/depcomp\"\n  AMDEPBACKSLASH='\\'\n  am__nodep='_no'\nfi\n if test \"x$enable_dependency_tracking\" != xno; then\n  AMDEP_TRUE=\n  AMDEP_FALSE='#'\nelse\n  AMDEP_TRUE='#'\n  AMDEP_FALSE=\nfi\n\n\n\ndepcc=\"$CC\"   am_compiler_list=\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking dependency style of $depcc\" >&5\n$as_echo_n \"checking dependency style of $depcc... \" >&6; }\nif ${am_cv_CC_dependencies_compiler_type+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -z \"$AMDEP_TRUE\" && test -f \"$am_depcomp\"; then\n  # We make a subdir and do the tests there.  Otherwise we can end up\n  # making bogus files that we don't know about and never remove.  For\n  # instance it was reported that on HP-UX the gcc test will end up\n  # making a dummy file named 'D' -- because '-MD' means \"put the output\n  # in D\".\n  rm -rf conftest.dir\n  mkdir conftest.dir\n  # Copy depcomp to subdir because otherwise we won't find it if we're\n  # using a relative directory.\n  cp \"$am_depcomp\" conftest.dir\n  cd conftest.dir\n  # We will build objects and dependencies in a subdirectory because\n  # it helps to detect inapplicable dependency modes.  For instance\n  # both Tru64's cc and ICC support -MD to output dependencies as a\n  # side effect of compilation, but ICC will put the dependencies in\n  # the current directory while Tru64 will put them in the object\n  # directory.\n  mkdir sub\n\n  am_cv_CC_dependencies_compiler_type=none\n  if test \"$am_compiler_list\" = \"\"; then\n     am_compiler_list=`sed -n 's/^#*\\([a-zA-Z0-9]*\\))$/\\1/p' < ./depcomp`\n  fi\n  am__universal=false\n  case \" $depcc \" in #(\n     *\\ -arch\\ *\\ -arch\\ *) am__universal=true ;;\n     esac\n\n  for depmode in $am_compiler_list; do\n    # Setup a source with many dependencies, because some compilers\n    # like to wrap large dependency lists on column 80 (with \\), and\n    # we should not choose a depcomp mode which is confused by this.\n    #\n    # We need to recreate these files for each test, as the compiler may\n    # overwrite some of them when testing with obscure command lines.\n    # This happens at least with the AIX C compiler.\n    : > sub/conftest.c\n    for i in 1 2 3 4 5 6; do\n      echo '#include \"conftst'$i'.h\"' >> sub/conftest.c\n      # Using \": > sub/conftst$i.h\" creates only sub/conftst1.h with\n      # Solaris 10 /bin/sh.\n      echo '/* dummy */' > sub/conftst$i.h\n    done\n    echo \"${am__include} ${am__quote}sub/conftest.Po${am__quote}\" > confmf\n\n    # We check with '-c' and '-o' for the sake of the \"dashmstdout\"\n    # mode.  It turns out that the SunPro C++ compiler does not properly\n    # handle '-M -o', and we need to detect this.  Also, some Intel\n    # versions had trouble with output in subdirs.\n    am__obj=sub/conftest.${OBJEXT-o}\n    am__minus_obj=\"-o $am__obj\"\n    case $depmode in\n    gcc)\n      # This depmode causes a compiler race in universal mode.\n      test \"$am__universal\" = false || continue\n      ;;\n    nosideeffect)\n      # After this tag, mechanisms are not by side-effect, so they'll\n      # only be used when explicitly requested.\n      if test \"x$enable_dependency_tracking\" = xyes; then\n\tcontinue\n      else\n\tbreak\n      fi\n      ;;\n    msvc7 | msvc7msys | msvisualcpp | msvcmsys)\n      # This compiler won't grok '-c -o', but also, the minuso test has\n      # not run yet.  These depmodes are late enough in the game, and\n      # so weak that their functioning should not be impacted.\n      am__obj=conftest.${OBJEXT-o}\n      am__minus_obj=\n      ;;\n    none) break ;;\n    esac\n    if depmode=$depmode \\\n       source=sub/conftest.c object=$am__obj \\\n       depfile=sub/conftest.Po tmpdepfile=sub/conftest.TPo \\\n       $SHELL ./depcomp $depcc -c $am__minus_obj sub/conftest.c \\\n         >/dev/null 2>conftest.err &&\n       grep sub/conftst1.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep sub/conftst6.h sub/conftest.Po > /dev/null 2>&1 &&\n       grep $am__obj sub/conftest.Po > /dev/null 2>&1 &&\n       ${MAKE-make} -s -f confmf > /dev/null 2>&1; then\n      # icc doesn't choke on unknown options, it will just issue warnings\n      # or remarks (even with -Werror).  So we grep stderr for any message\n      # that says an option was ignored or not supported.\n      # When given -MP, icc 7.0 and 7.1 complain thusly:\n      #   icc: Command line warning: ignoring option '-M'; no argument required\n      # The diagnosis changed in icc 8.0:\n      #   icc: Command line remark: option '-MP' not supported\n      if (grep 'ignoring option' conftest.err ||\n          grep 'not supported' conftest.err) >/dev/null 2>&1; then :; else\n        am_cv_CC_dependencies_compiler_type=$depmode\n        break\n      fi\n    fi\n  done\n\n  cd ..\n  rm -rf conftest.dir\nelse\n  am_cv_CC_dependencies_compiler_type=none\nfi\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $am_cv_CC_dependencies_compiler_type\" >&5\n$as_echo \"$am_cv_CC_dependencies_compiler_type\" >&6; }\nCCDEPMODE=depmode=$am_cv_CC_dependencies_compiler_type\n\n if\n  test \"x$enable_dependency_tracking\" != xno \\\n  && test \"$am_cv_CC_dependencies_compiler_type\" = gcc3; then\n  am__fastdepCC_TRUE=\n  am__fastdepCC_FALSE='#'\nelse\n  am__fastdepCC_TRUE='#'\n  am__fastdepCC_FALSE=\nfi\n\n\n\nif test -z \"$orig_CFLAGS\"; then\n  if test x$GCC = xyes; then\n    CFLAGS=\"-g -O3\"\n  fi\nfi\n\n\ncase `pwd` in\n  *\\ * | *\\\t*)\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&5\n$as_echo \"$as_me: WARNING: Libtool does not cope well with whitespace in \\`pwd\\`\" >&2;} ;;\nesac\n\n\n\nmacro_version='2.4.2'\nmacro_revision='1.3337'\n\n\n\n\n\n\n\n\n\n\n\n\n\nltmain=\"$ac_aux_dir/ltmain.sh\"\n\n# Make sure we can run config.sub.\n$SHELL \"$ac_aux_dir/config.sub\" sun4 >/dev/null 2>&1 ||\n  as_fn_error $? \"cannot run $SHELL $ac_aux_dir/config.sub\" \"$LINENO\" 5\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking build system type\" >&5\n$as_echo_n \"checking build system type... \" >&6; }\nif ${ac_cv_build+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_build_alias=$build_alias\ntest \"x$ac_build_alias\" = x &&\n  ac_build_alias=`$SHELL \"$ac_aux_dir/config.guess\"`\ntest \"x$ac_build_alias\" = x &&\n  as_fn_error $? \"cannot guess build type; you must specify one\" \"$LINENO\" 5\nac_cv_build=`$SHELL \"$ac_aux_dir/config.sub\" $ac_build_alias` ||\n  as_fn_error $? \"$SHELL $ac_aux_dir/config.sub $ac_build_alias failed\" \"$LINENO\" 5\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_build\" >&5\n$as_echo \"$ac_cv_build\" >&6; }\ncase $ac_cv_build in\n*-*-*) ;;\n*) as_fn_error $? \"invalid value of canonical build\" \"$LINENO\" 5;;\nesac\nbuild=$ac_cv_build\nac_save_IFS=$IFS; IFS='-'\nset x $ac_cv_build\nshift\nbuild_cpu=$1\nbuild_vendor=$2\nshift; shift\n# Remember, the first character of IFS is used to create $*,\n# except with old shells:\nbuild_os=$*\nIFS=$ac_save_IFS\ncase $build_os in *\\ *) build_os=`echo \"$build_os\" | sed 's/ /-/g'`;; esac\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking host system type\" >&5\n$as_echo_n \"checking host system type... \" >&6; }\nif ${ac_cv_host+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test \"x$host_alias\" = x; then\n  ac_cv_host=$ac_cv_build\nelse\n  ac_cv_host=`$SHELL \"$ac_aux_dir/config.sub\" $host_alias` ||\n    as_fn_error $? \"$SHELL $ac_aux_dir/config.sub $host_alias failed\" \"$LINENO\" 5\nfi\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_host\" >&5\n$as_echo \"$ac_cv_host\" >&6; }\ncase $ac_cv_host in\n*-*-*) ;;\n*) as_fn_error $? \"invalid value of canonical host\" \"$LINENO\" 5;;\nesac\nhost=$ac_cv_host\nac_save_IFS=$IFS; IFS='-'\nset x $ac_cv_host\nshift\nhost_cpu=$1\nhost_vendor=$2\nshift; shift\n# Remember, the first character of IFS is used to create $*,\n# except with old shells:\nhost_os=$*\nIFS=$ac_save_IFS\ncase $host_os in *\\ *) host_os=`echo \"$host_os\" | sed 's/ /-/g'`;; esac\n\n\n# Backslashify metacharacters that are still active within\n# double-quoted strings.\nsed_quote_subst='s/\\([\"`$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution to delay expansion of an escaped shell variable in a\n# double_quote_subst'ed string.\ndelay_variable_subst='s/\\\\\\\\\\\\\\\\\\\\\\$/\\\\\\\\\\\\$/g'\n\n# Sed substitution to delay expansion of an escaped single quote.\ndelay_single_quote_subst='s/'\\''/'\\'\\\\\\\\\\\\\\'\\''/g'\n\n# Sed substitution to avoid accidental globbing in evaled expressions\nno_glob_subst='s/\\*/\\\\\\*/g'\n\nECHO='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO\nECHO=$ECHO$ECHO$ECHO$ECHO$ECHO$ECHO\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to print strings\" >&5\n$as_echo_n \"checking how to print strings... \" >&6; }\n# Test print first, because it will be a builtin if present.\nif test \"X`( print -r -- -n ) 2>/dev/null`\" = X-n && \\\n   test \"X`print -r -- $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='print -r --'\nelif test \"X`printf %s $ECHO 2>/dev/null`\" = \"X$ECHO\"; then\n  ECHO='printf %s\\n'\nelse\n  # Use this function as a fallback that always works.\n  func_fallback_echo ()\n  {\n    eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n  }\n  ECHO='func_fallback_echo'\nfi\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"\"\n}\n\ncase \"$ECHO\" in\n  printf*) { $as_echo \"$as_me:${as_lineno-$LINENO}: result: printf\" >&5\n$as_echo \"printf\" >&6; } ;;\n  print*) { $as_echo \"$as_me:${as_lineno-$LINENO}: result: print -r\" >&5\n$as_echo \"print -r\" >&6; } ;;\n  *) { $as_echo \"$as_me:${as_lineno-$LINENO}: result: cat\" >&5\n$as_echo \"cat\" >&6; } ;;\nesac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for a sed that does not truncate output\" >&5\n$as_echo_n \"checking for a sed that does not truncate output... \" >&6; }\nif ${ac_cv_path_SED+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n            ac_script=s/aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa/bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb/\n     for ac_i in 1 2 3 4 5 6 7; do\n       ac_script=\"$ac_script$as_nl$ac_script\"\n     done\n     echo \"$ac_script\" 2>/dev/null | sed 99q >conftest.sed\n     { ac_script=; unset ac_script;}\n     if test -z \"$SED\"; then\n  ac_path_SED_found=false\n  # Loop through the user's path and test for each of PROGNAME-LIST\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_prog in sed gsed; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      ac_path_SED=\"$as_dir/$ac_prog$ac_exec_ext\"\n      as_fn_executable_p \"$ac_path_SED\" || continue\n# Check for GNU ac_path_SED and select it if it is found.\n  # Check for GNU $ac_path_SED\ncase `\"$ac_path_SED\" --version 2>&1` in\n*GNU*)\n  ac_cv_path_SED=\"$ac_path_SED\" ac_path_SED_found=:;;\n*)\n  ac_count=0\n  $as_echo_n 0123456789 >\"conftest.in\"\n  while :\n  do\n    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n    mv \"conftest.tmp\" \"conftest.in\"\n    cp \"conftest.in\" \"conftest.nl\"\n    $as_echo '' >> \"conftest.nl\"\n    \"$ac_path_SED\" -f conftest.sed < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n    as_fn_arith $ac_count + 1 && ac_count=$as_val\n    if test $ac_count -gt ${ac_path_SED_max-0}; then\n      # Best one so far, save it but keep looking for a better one\n      ac_cv_path_SED=\"$ac_path_SED\"\n      ac_path_SED_max=$ac_count\n    fi\n    # 10*(2^10) chars as input seems more than enough\n    test $ac_count -gt 10 && break\n  done\n  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\nesac\n\n      $ac_path_SED_found && break 3\n    done\n  done\n  done\nIFS=$as_save_IFS\n  if test -z \"$ac_cv_path_SED\"; then\n    as_fn_error $? \"no acceptable sed could be found in \\$PATH\" \"$LINENO\" 5\n  fi\nelse\n  ac_cv_path_SED=$SED\nfi\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_SED\" >&5\n$as_echo \"$ac_cv_path_SED\" >&6; }\n SED=\"$ac_cv_path_SED\"\n  rm -f conftest.sed\n\ntest -z \"$SED\" && SED=sed\nXsed=\"$SED -e 1s/^X//\"\n\n\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for grep that handles long lines and -e\" >&5\n$as_echo_n \"checking for grep that handles long lines and -e... \" >&6; }\nif ${ac_cv_path_GREP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -z \"$GREP\"; then\n  ac_path_GREP_found=false\n  # Loop through the user's path and test for each of PROGNAME-LIST\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_prog in grep ggrep; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      ac_path_GREP=\"$as_dir/$ac_prog$ac_exec_ext\"\n      as_fn_executable_p \"$ac_path_GREP\" || continue\n# Check for GNU ac_path_GREP and select it if it is found.\n  # Check for GNU $ac_path_GREP\ncase `\"$ac_path_GREP\" --version 2>&1` in\n*GNU*)\n  ac_cv_path_GREP=\"$ac_path_GREP\" ac_path_GREP_found=:;;\n*)\n  ac_count=0\n  $as_echo_n 0123456789 >\"conftest.in\"\n  while :\n  do\n    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n    mv \"conftest.tmp\" \"conftest.in\"\n    cp \"conftest.in\" \"conftest.nl\"\n    $as_echo 'GREP' >> \"conftest.nl\"\n    \"$ac_path_GREP\" -e 'GREP$' -e '-(cannot match)-' < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n    as_fn_arith $ac_count + 1 && ac_count=$as_val\n    if test $ac_count -gt ${ac_path_GREP_max-0}; then\n      # Best one so far, save it but keep looking for a better one\n      ac_cv_path_GREP=\"$ac_path_GREP\"\n      ac_path_GREP_max=$ac_count\n    fi\n    # 10*(2^10) chars as input seems more than enough\n    test $ac_count -gt 10 && break\n  done\n  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\nesac\n\n      $ac_path_GREP_found && break 3\n    done\n  done\n  done\nIFS=$as_save_IFS\n  if test -z \"$ac_cv_path_GREP\"; then\n    as_fn_error $? \"no acceptable grep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin\" \"$LINENO\" 5\n  fi\nelse\n  ac_cv_path_GREP=$GREP\nfi\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_GREP\" >&5\n$as_echo \"$ac_cv_path_GREP\" >&6; }\n GREP=\"$ac_cv_path_GREP\"\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for egrep\" >&5\n$as_echo_n \"checking for egrep... \" >&6; }\nif ${ac_cv_path_EGREP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if echo a | $GREP -E '(a|b)' >/dev/null 2>&1\n   then ac_cv_path_EGREP=\"$GREP -E\"\n   else\n     if test -z \"$EGREP\"; then\n  ac_path_EGREP_found=false\n  # Loop through the user's path and test for each of PROGNAME-LIST\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_prog in egrep; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      ac_path_EGREP=\"$as_dir/$ac_prog$ac_exec_ext\"\n      as_fn_executable_p \"$ac_path_EGREP\" || continue\n# Check for GNU ac_path_EGREP and select it if it is found.\n  # Check for GNU $ac_path_EGREP\ncase `\"$ac_path_EGREP\" --version 2>&1` in\n*GNU*)\n  ac_cv_path_EGREP=\"$ac_path_EGREP\" ac_path_EGREP_found=:;;\n*)\n  ac_count=0\n  $as_echo_n 0123456789 >\"conftest.in\"\n  while :\n  do\n    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n    mv \"conftest.tmp\" \"conftest.in\"\n    cp \"conftest.in\" \"conftest.nl\"\n    $as_echo 'EGREP' >> \"conftest.nl\"\n    \"$ac_path_EGREP\" 'EGREP$' < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n    as_fn_arith $ac_count + 1 && ac_count=$as_val\n    if test $ac_count -gt ${ac_path_EGREP_max-0}; then\n      # Best one so far, save it but keep looking for a better one\n      ac_cv_path_EGREP=\"$ac_path_EGREP\"\n      ac_path_EGREP_max=$ac_count\n    fi\n    # 10*(2^10) chars as input seems more than enough\n    test $ac_count -gt 10 && break\n  done\n  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\nesac\n\n      $ac_path_EGREP_found && break 3\n    done\n  done\n  done\nIFS=$as_save_IFS\n  if test -z \"$ac_cv_path_EGREP\"; then\n    as_fn_error $? \"no acceptable egrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin\" \"$LINENO\" 5\n  fi\nelse\n  ac_cv_path_EGREP=$EGREP\nfi\n\n   fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_EGREP\" >&5\n$as_echo \"$ac_cv_path_EGREP\" >&6; }\n EGREP=\"$ac_cv_path_EGREP\"\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for fgrep\" >&5\n$as_echo_n \"checking for fgrep... \" >&6; }\nif ${ac_cv_path_FGREP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if echo 'ab*c' | $GREP -F 'ab*c' >/dev/null 2>&1\n   then ac_cv_path_FGREP=\"$GREP -F\"\n   else\n     if test -z \"$FGREP\"; then\n  ac_path_FGREP_found=false\n  # Loop through the user's path and test for each of PROGNAME-LIST\n  as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH$PATH_SEPARATOR/usr/xpg4/bin\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_prog in fgrep; do\n    for ac_exec_ext in '' $ac_executable_extensions; do\n      ac_path_FGREP=\"$as_dir/$ac_prog$ac_exec_ext\"\n      as_fn_executable_p \"$ac_path_FGREP\" || continue\n# Check for GNU ac_path_FGREP and select it if it is found.\n  # Check for GNU $ac_path_FGREP\ncase `\"$ac_path_FGREP\" --version 2>&1` in\n*GNU*)\n  ac_cv_path_FGREP=\"$ac_path_FGREP\" ac_path_FGREP_found=:;;\n*)\n  ac_count=0\n  $as_echo_n 0123456789 >\"conftest.in\"\n  while :\n  do\n    cat \"conftest.in\" \"conftest.in\" >\"conftest.tmp\"\n    mv \"conftest.tmp\" \"conftest.in\"\n    cp \"conftest.in\" \"conftest.nl\"\n    $as_echo 'FGREP' >> \"conftest.nl\"\n    \"$ac_path_FGREP\" FGREP < \"conftest.nl\" >\"conftest.out\" 2>/dev/null || break\n    diff \"conftest.out\" \"conftest.nl\" >/dev/null 2>&1 || break\n    as_fn_arith $ac_count + 1 && ac_count=$as_val\n    if test $ac_count -gt ${ac_path_FGREP_max-0}; then\n      # Best one so far, save it but keep looking for a better one\n      ac_cv_path_FGREP=\"$ac_path_FGREP\"\n      ac_path_FGREP_max=$ac_count\n    fi\n    # 10*(2^10) chars as input seems more than enough\n    test $ac_count -gt 10 && break\n  done\n  rm -f conftest.in conftest.tmp conftest.nl conftest.out;;\nesac\n\n      $ac_path_FGREP_found && break 3\n    done\n  done\n  done\nIFS=$as_save_IFS\n  if test -z \"$ac_cv_path_FGREP\"; then\n    as_fn_error $? \"no acceptable fgrep could be found in $PATH$PATH_SEPARATOR/usr/xpg4/bin\" \"$LINENO\" 5\n  fi\nelse\n  ac_cv_path_FGREP=$FGREP\nfi\n\n   fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_path_FGREP\" >&5\n$as_echo \"$ac_cv_path_FGREP\" >&6; }\n FGREP=\"$ac_cv_path_FGREP\"\n\n\ntest -z \"$GREP\" && GREP=grep\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Check whether --with-gnu-ld was given.\nif test \"${with_gnu_ld+set}\" = set; then :\n  withval=$with_gnu_ld; test \"$withval\" = no || with_gnu_ld=yes\nelse\n  with_gnu_ld=no\nfi\n\nac_prog=ld\nif test \"$GCC\" = yes; then\n  # Check if gcc -print-prog-name=ld gives a path.\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ld used by $CC\" >&5\n$as_echo_n \"checking for ld used by $CC... \" >&6; }\n  case $host in\n  *-*-mingw*)\n    # gcc leaves a trailing carriage return which upsets mingw\n    ac_prog=`($CC -print-prog-name=ld) 2>&5 | tr -d '\\015'` ;;\n  *)\n    ac_prog=`($CC -print-prog-name=ld) 2>&5` ;;\n  esac\n  case $ac_prog in\n    # Accept absolute paths.\n    [\\\\/]* | ?:[\\\\/]*)\n      re_direlt='/[^/][^/]*/\\.\\./'\n      # Canonicalize the pathname of ld\n      ac_prog=`$ECHO \"$ac_prog\"| $SED 's%\\\\\\\\%/%g'`\n      while $ECHO \"$ac_prog\" | $GREP \"$re_direlt\" > /dev/null 2>&1; do\n\tac_prog=`$ECHO $ac_prog| $SED \"s%$re_direlt%/%\"`\n      done\n      test -z \"$LD\" && LD=\"$ac_prog\"\n      ;;\n  \"\")\n    # If it fails, then pretend we aren't using GCC.\n    ac_prog=ld\n    ;;\n  *)\n    # If it is relative, then search for the first ld in PATH.\n    with_gnu_ld=unknown\n    ;;\n  esac\nelif test \"$with_gnu_ld\" = yes; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for GNU ld\" >&5\n$as_echo_n \"checking for GNU ld... \" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for non-GNU ld\" >&5\n$as_echo_n \"checking for non-GNU ld... \" >&6; }\nfi\nif ${lt_cv_path_LD+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -z \"$LD\"; then\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  for ac_dir in $PATH; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f \"$ac_dir/$ac_prog\" || test -f \"$ac_dir/$ac_prog$ac_exeext\"; then\n      lt_cv_path_LD=\"$ac_dir/$ac_prog\"\n      # Check to see if the program is GNU ld.  I'd rather use --version,\n      # but apparently some variants of GNU ld only accept -v.\n      # Break only if it was the GNU/non-GNU ld that we prefer.\n      case `\"$lt_cv_path_LD\" -v 2>&1 </dev/null` in\n      *GNU* | *'with BFD'*)\n\ttest \"$with_gnu_ld\" != no && break\n\t;;\n      *)\n\ttest \"$with_gnu_ld\" != yes && break\n\t;;\n      esac\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\nelse\n  lt_cv_path_LD=\"$LD\" # Let the user override the test with a path.\nfi\nfi\n\nLD=\"$lt_cv_path_LD\"\nif test -n \"$LD\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $LD\" >&5\n$as_echo \"$LD\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\ntest -z \"$LD\" && as_fn_error $? \"no acceptable ld found in \\$PATH\" \"$LINENO\" 5\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if the linker ($LD) is GNU ld\" >&5\n$as_echo_n \"checking if the linker ($LD) is GNU ld... \" >&6; }\nif ${lt_cv_prog_gnu_ld+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  # I'd rather use --version here, but apparently some GNU lds only accept -v.\ncase `$LD -v 2>&1 </dev/null` in\n*GNU* | *'with BFD'*)\n  lt_cv_prog_gnu_ld=yes\n  ;;\n*)\n  lt_cv_prog_gnu_ld=no\n  ;;\nesac\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_gnu_ld\" >&5\n$as_echo \"$lt_cv_prog_gnu_ld\" >&6; }\nwith_gnu_ld=$lt_cv_prog_gnu_ld\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for BSD- or MS-compatible name lister (nm)\" >&5\n$as_echo_n \"checking for BSD- or MS-compatible name lister (nm)... \" >&6; }\nif ${lt_cv_path_NM+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$NM\"; then\n  # Let the user override the test.\n  lt_cv_path_NM=\"$NM\"\nelse\n  lt_nm_to_check=\"${ac_tool_prefix}nm\"\n  if test -n \"$ac_tool_prefix\" && test \"$build\" = \"$host\"; then\n    lt_nm_to_check=\"$lt_nm_to_check nm\"\n  fi\n  for lt_tmp_nm in $lt_nm_to_check; do\n    lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n    for ac_dir in $PATH /usr/ccs/bin/elf /usr/ccs/bin /usr/ucb /bin; do\n      IFS=\"$lt_save_ifs\"\n      test -z \"$ac_dir\" && ac_dir=.\n      tmp_nm=\"$ac_dir/$lt_tmp_nm\"\n      if test -f \"$tmp_nm\" || test -f \"$tmp_nm$ac_exeext\" ; then\n\t# Check to see if the nm accepts a BSD-compat flag.\n\t# Adding the `sed 1q' prevents false positives on HP-UX, which says:\n\t#   nm: unknown option \"B\" ignored\n\t# Tru64's nm complains that /dev/null is an invalid object file\n\tcase `\"$tmp_nm\" -B /dev/null 2>&1 | sed '1q'` in\n\t*/dev/null* | *'Invalid file or object type'*)\n\t  lt_cv_path_NM=\"$tmp_nm -B\"\n\t  break\n\t  ;;\n\t*)\n\t  case `\"$tmp_nm\" -p /dev/null 2>&1 | sed '1q'` in\n\t  */dev/null*)\n\t    lt_cv_path_NM=\"$tmp_nm -p\"\n\t    break\n\t    ;;\n\t  *)\n\t    lt_cv_path_NM=${lt_cv_path_NM=\"$tmp_nm\"} # keep the first match, but\n\t    continue # so that we can try to find one that supports BSD flags\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n      fi\n    done\n    IFS=\"$lt_save_ifs\"\n  done\n  : ${lt_cv_path_NM=no}\nfi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_path_NM\" >&5\n$as_echo \"$lt_cv_path_NM\" >&6; }\nif test \"$lt_cv_path_NM\" != \"no\"; then\n  NM=\"$lt_cv_path_NM\"\nelse\n  # Didn't find any BSD compatible name lister, look for dumpbin.\n  if test -n \"$DUMPBIN\"; then :\n    # Let the user override the test.\n  else\n    if test -n \"$ac_tool_prefix\"; then\n  for ac_prog in dumpbin \"link -dump\"\n  do\n    # Extract the first word of \"$ac_tool_prefix$ac_prog\", so it can be a program name with args.\nset dummy $ac_tool_prefix$ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_DUMPBIN+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$DUMPBIN\"; then\n  ac_cv_prog_DUMPBIN=\"$DUMPBIN\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_DUMPBIN=\"$ac_tool_prefix$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nDUMPBIN=$ac_cv_prog_DUMPBIN\nif test -n \"$DUMPBIN\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $DUMPBIN\" >&5\n$as_echo \"$DUMPBIN\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n    test -n \"$DUMPBIN\" && break\n  done\nfi\nif test -z \"$DUMPBIN\"; then\n  ac_ct_DUMPBIN=$DUMPBIN\n  for ac_prog in dumpbin \"link -dump\"\ndo\n  # Extract the first word of \"$ac_prog\", so it can be a program name with args.\nset dummy $ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_DUMPBIN+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_DUMPBIN\"; then\n  ac_cv_prog_ac_ct_DUMPBIN=\"$ac_ct_DUMPBIN\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_DUMPBIN=\"$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_DUMPBIN=$ac_cv_prog_ac_ct_DUMPBIN\nif test -n \"$ac_ct_DUMPBIN\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_DUMPBIN\" >&5\n$as_echo \"$ac_ct_DUMPBIN\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  test -n \"$ac_ct_DUMPBIN\" && break\ndone\n\n  if test \"x$ac_ct_DUMPBIN\" = x; then\n    DUMPBIN=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    DUMPBIN=$ac_ct_DUMPBIN\n  fi\nfi\n\n    case `$DUMPBIN -symbols /dev/null 2>&1 | sed '1q'` in\n    *COFF*)\n      DUMPBIN=\"$DUMPBIN -symbols\"\n      ;;\n    *)\n      DUMPBIN=:\n      ;;\n    esac\n  fi\n\n  if test \"$DUMPBIN\" != \":\"; then\n    NM=\"$DUMPBIN\"\n  fi\nfi\ntest -z \"$NM\" && NM=nm\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking the name lister ($NM) interface\" >&5\n$as_echo_n \"checking the name lister ($NM) interface... \" >&6; }\nif ${lt_cv_nm_interface+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_nm_interface=\"BSD nm\"\n  echo \"int some_variable = 0;\" > conftest.$ac_ext\n  (eval echo \"\\\"\\$as_me:$LINENO: $ac_compile\\\"\" >&5)\n  (eval \"$ac_compile\" 2>conftest.err)\n  cat conftest.err >&5\n  (eval echo \"\\\"\\$as_me:$LINENO: $NM \\\\\\\"conftest.$ac_objext\\\\\\\"\\\"\" >&5)\n  (eval \"$NM \\\"conftest.$ac_objext\\\"\" 2>conftest.err > conftest.out)\n  cat conftest.err >&5\n  (eval echo \"\\\"\\$as_me:$LINENO: output\\\"\" >&5)\n  cat conftest.out >&5\n  if $GREP 'External.*some_variable' conftest.out > /dev/null; then\n    lt_cv_nm_interface=\"MS dumpbin\"\n  fi\n  rm -f conftest*\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_nm_interface\" >&5\n$as_echo \"$lt_cv_nm_interface\" >&6; }\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether ln -s works\" >&5\n$as_echo_n \"checking whether ln -s works... \" >&6; }\nLN_S=$as_ln_s\nif test \"$LN_S\" = \"ln -s\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no, using $LN_S\" >&5\n$as_echo \"no, using $LN_S\" >&6; }\nfi\n\n# find the maximum length of command line arguments\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking the maximum length of command line arguments\" >&5\n$as_echo_n \"checking the maximum length of command line arguments... \" >&6; }\nif ${lt_cv_sys_max_cmd_len+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n    i=0\n  teststring=\"ABCD\"\n\n  case $build_os in\n  msdosdjgpp*)\n    # On DJGPP, this test can blow up pretty badly due to problems in libc\n    # (any single argument exceeding 2000 bytes causes a buffer overrun\n    # during glob expansion).  Even if it were fixed, the result of this\n    # check would be larger than it should be.\n    lt_cv_sys_max_cmd_len=12288;    # 12K is about right\n    ;;\n\n  gnu*)\n    # Under GNU Hurd, this test is not required because there is\n    # no limit to the length of command line arguments.\n    # Libtool will interpret -1 as no limit whatsoever\n    lt_cv_sys_max_cmd_len=-1;\n    ;;\n\n  cygwin* | mingw* | cegcc*)\n    # On Win9x/ME, this test blows up -- it succeeds, but takes\n    # about 5 minutes as the teststring grows exponentially.\n    # Worse, since 9x/ME are not pre-emptively multitasking,\n    # you end up with a \"frozen\" computer, even though with patience\n    # the test eventually succeeds (with a max line length of 256k).\n    # Instead, let's just punt: use the minimum linelength reported by\n    # all of the supported platforms: 8192 (on NT/2K/XP).\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  mint*)\n    # On MiNT this can take a long time and run out of memory.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  amigaos*)\n    # On AmigaOS with pdksh, this test takes hours, literally.\n    # So we just punt and use a minimum line length of 8192.\n    lt_cv_sys_max_cmd_len=8192;\n    ;;\n\n  netbsd* | freebsd* | openbsd* | darwin* | dragonfly*)\n    # This has been around since 386BSD, at least.  Likely further.\n    if test -x /sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/sbin/sysctl -n kern.argmax`\n    elif test -x /usr/sbin/sysctl; then\n      lt_cv_sys_max_cmd_len=`/usr/sbin/sysctl -n kern.argmax`\n    else\n      lt_cv_sys_max_cmd_len=65536\t# usable default for all BSDs\n    fi\n    # And add a safety zone\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n    lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    ;;\n\n  interix*)\n    # We know the value 262144 and hardcode it with a safety zone (like BSD)\n    lt_cv_sys_max_cmd_len=196608\n    ;;\n\n  os2*)\n    # The test takes a long time on OS/2.\n    lt_cv_sys_max_cmd_len=8192\n    ;;\n\n  osf*)\n    # Dr. Hans Ekkehard Plesser reports seeing a kernel panic running configure\n    # due to this test when exec_disable_arg_limit is 1 on Tru64. It is not\n    # nice to cause kernel panics so lets avoid the loop below.\n    # First set a reasonable default.\n    lt_cv_sys_max_cmd_len=16384\n    #\n    if test -x /sbin/sysconfig; then\n      case `/sbin/sysconfig -q proc exec_disable_arg_limit` in\n        *1*) lt_cv_sys_max_cmd_len=-1 ;;\n      esac\n    fi\n    ;;\n  sco3.2v5*)\n    lt_cv_sys_max_cmd_len=102400\n    ;;\n  sysv5* | sco5v6* | sysv4.2uw2*)\n    kargmax=`grep ARG_MAX /etc/conf/cf.d/stune 2>/dev/null`\n    if test -n \"$kargmax\"; then\n      lt_cv_sys_max_cmd_len=`echo $kargmax | sed 's/.*[\t ]//'`\n    else\n      lt_cv_sys_max_cmd_len=32768\n    fi\n    ;;\n  *)\n    lt_cv_sys_max_cmd_len=`(getconf ARG_MAX) 2> /dev/null`\n    if test -n \"$lt_cv_sys_max_cmd_len\" && \\\n\ttest undefined != \"$lt_cv_sys_max_cmd_len\"; then\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 4`\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\* 3`\n    else\n      # Make teststring a little bigger before we do anything with it.\n      # a 1K string should be a reasonable start.\n      for i in 1 2 3 4 5 6 7 8 ; do\n        teststring=$teststring$teststring\n      done\n      SHELL=${SHELL-${CONFIG_SHELL-/bin/sh}}\n      # If test is not a shell built-in, we'll probably end up computing a\n      # maximum length that is only half of the actual maximum length, but\n      # we can't tell.\n      while { test \"X\"`env echo \"$teststring$teststring\" 2>/dev/null` \\\n\t         = \"X$teststring$teststring\"; } >/dev/null 2>&1 &&\n\t      test $i != 17 # 1/2 MB should be enough\n      do\n        i=`expr $i + 1`\n        teststring=$teststring$teststring\n      done\n      # Only check the string length outside the loop.\n      lt_cv_sys_max_cmd_len=`expr \"X$teststring\" : \".*\" 2>&1`\n      teststring=\n      # Add a significant safety factor because C++ compilers can tack on\n      # massive amounts of additional arguments before passing them to the\n      # linker.  It appears as though 1/2 is a usable value.\n      lt_cv_sys_max_cmd_len=`expr $lt_cv_sys_max_cmd_len \\/ 2`\n    fi\n    ;;\n  esac\n\nfi\n\nif test -n $lt_cv_sys_max_cmd_len ; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_sys_max_cmd_len\" >&5\n$as_echo \"$lt_cv_sys_max_cmd_len\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: none\" >&5\n$as_echo \"none\" >&6; }\nfi\nmax_cmd_len=$lt_cv_sys_max_cmd_len\n\n\n\n\n\n\n: ${CP=\"cp -f\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the shell understands some XSI constructs\" >&5\n$as_echo_n \"checking whether the shell understands some XSI constructs... \" >&6; }\n# Try some XSI features\nxsi_shell=no\n( _lt_dummy=\"a/b/c\"\n  test \"${_lt_dummy##*/},${_lt_dummy%/*},${_lt_dummy#??}\"${_lt_dummy%\"$_lt_dummy\"}, \\\n      = c,a/b,b/c, \\\n    && eval 'test $(( 1 + 1 )) -eq 2 \\\n    && test \"${#_lt_dummy}\" -eq 5' ) >/dev/null 2>&1 \\\n  && xsi_shell=yes\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $xsi_shell\" >&5\n$as_echo \"$xsi_shell\" >&6; }\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the shell understands \\\"+=\\\"\" >&5\n$as_echo_n \"checking whether the shell understands \\\"+=\\\"... \" >&6; }\nlt_shell_append=no\n( foo=bar; set foo baz; eval \"$1+=\\$2\" && test \"$foo\" = barbaz ) \\\n    >/dev/null 2>&1 \\\n  && lt_shell_append=yes\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_shell_append\" >&5\n$as_echo \"$lt_shell_append\" >&6; }\n\n\nif ( (MAIL=60; unset MAIL) || exit) >/dev/null 2>&1; then\n  lt_unset=unset\nelse\n  lt_unset=false\nfi\n\n\n\n\n\n# test EBCDIC or ASCII\ncase `echo X|tr X '\\101'` in\n A) # ASCII based system\n    # \\n is not interpreted correctly by Solaris 8 /usr/ucb/tr\n  lt_SP2NL='tr \\040 \\012'\n  lt_NL2SP='tr \\015\\012 \\040\\040'\n  ;;\n *) # EBCDIC based system\n  lt_SP2NL='tr \\100 \\n'\n  lt_NL2SP='tr \\r\\n \\100\\100'\n  ;;\nesac\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to convert $build file names to $host format\" >&5\n$as_echo_n \"checking how to convert $build file names to $host format... \" >&6; }\nif ${lt_cv_to_host_file_cmd+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  case $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_w32\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_cygwin_to_w32\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_w32\n        ;;\n    esac\n    ;;\n  *-*-cygwin* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_host_file_cmd=func_convert_file_msys_to_cygwin\n        ;;\n      *-*-cygwin* )\n        lt_cv_to_host_file_cmd=func_convert_file_noop\n        ;;\n      * ) # otherwise, assume *nix\n        lt_cv_to_host_file_cmd=func_convert_file_nix_to_cygwin\n        ;;\n    esac\n    ;;\n  * ) # unhandled hosts (and \"normal\" native builds)\n    lt_cv_to_host_file_cmd=func_convert_file_noop\n    ;;\nesac\n\nfi\n\nto_host_file_cmd=$lt_cv_to_host_file_cmd\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_to_host_file_cmd\" >&5\n$as_echo \"$lt_cv_to_host_file_cmd\" >&6; }\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to convert $build file names to toolchain format\" >&5\n$as_echo_n \"checking how to convert $build file names to toolchain format... \" >&6; }\nif ${lt_cv_to_tool_file_cmd+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  #assume ordinary cross tools, or native build.\nlt_cv_to_tool_file_cmd=func_convert_file_noop\ncase $host in\n  *-*-mingw* )\n    case $build in\n      *-*-mingw* ) # actually msys\n        lt_cv_to_tool_file_cmd=func_convert_file_msys_to_w32\n        ;;\n    esac\n    ;;\nesac\n\nfi\n\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_to_tool_file_cmd\" >&5\n$as_echo \"$lt_cv_to_tool_file_cmd\" >&6; }\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $LD option to reload object files\" >&5\n$as_echo_n \"checking for $LD option to reload object files... \" >&6; }\nif ${lt_cv_ld_reload_flag+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_ld_reload_flag='-r'\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_reload_flag\" >&5\n$as_echo \"$lt_cv_ld_reload_flag\" >&6; }\nreload_flag=$lt_cv_ld_reload_flag\ncase $reload_flag in\n\"\" | \" \"*) ;;\n*) reload_flag=\" $reload_flag\" ;;\nesac\nreload_cmds='$LD$reload_flag -o $output$reload_objs'\ncase $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    if test \"$GCC\" != yes; then\n      reload_cmds=false\n    fi\n    ;;\n  darwin*)\n    if test \"$GCC\" = yes; then\n      reload_cmds='$LTCC $LTCFLAGS -nostdlib ${wl}-r -o $output$reload_objs'\n    else\n      reload_cmds='$LD$reload_flag -o $output$reload_objs'\n    fi\n    ;;\nesac\n\n\n\n\n\n\n\n\n\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}objdump\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}objdump; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_OBJDUMP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$OBJDUMP\"; then\n  ac_cv_prog_OBJDUMP=\"$OBJDUMP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_OBJDUMP=\"${ac_tool_prefix}objdump\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nOBJDUMP=$ac_cv_prog_OBJDUMP\nif test -n \"$OBJDUMP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $OBJDUMP\" >&5\n$as_echo \"$OBJDUMP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_OBJDUMP\"; then\n  ac_ct_OBJDUMP=$OBJDUMP\n  # Extract the first word of \"objdump\", so it can be a program name with args.\nset dummy objdump; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_OBJDUMP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_OBJDUMP\"; then\n  ac_cv_prog_ac_ct_OBJDUMP=\"$ac_ct_OBJDUMP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_OBJDUMP=\"objdump\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_OBJDUMP=$ac_cv_prog_ac_ct_OBJDUMP\nif test -n \"$ac_ct_OBJDUMP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_OBJDUMP\" >&5\n$as_echo \"$ac_ct_OBJDUMP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_OBJDUMP\" = x; then\n    OBJDUMP=\"false\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    OBJDUMP=$ac_ct_OBJDUMP\n  fi\nelse\n  OBJDUMP=\"$ac_cv_prog_OBJDUMP\"\nfi\n\ntest -z \"$OBJDUMP\" && OBJDUMP=objdump\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to recognize dependent libraries\" >&5\n$as_echo_n \"checking how to recognize dependent libraries... \" >&6; }\nif ${lt_cv_deplibs_check_method+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_file_magic_cmd='$MAGIC_CMD'\nlt_cv_file_magic_test_file=\nlt_cv_deplibs_check_method='unknown'\n# Need to set the preceding variable on all platforms that support\n# interlibrary dependencies.\n# 'none' -- dependencies not supported.\n# `unknown' -- same as none, but documents that we really don't know.\n# 'pass_all' -- all dependencies passed with no checks.\n# 'test_compile' -- check by making test program.\n# 'file_magic [[regex]]' -- check by looking for files in library path\n# which responds to the $file_magic_cmd with a given extended regex.\n# If you have `file' or equivalent on your system and you're not sure\n# whether `pass_all' will *always* work, you probably want this one.\n\ncase $host_os in\naix[4-9]*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbeos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nbsdi[45]*)\n  lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib)'\n  lt_cv_file_magic_cmd='/usr/bin/file -L'\n  lt_cv_file_magic_test_file=/shlib/libc.so\n  ;;\n\ncygwin*)\n  # func_win32_libid is a shell function defined in ltmain.sh\n  lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n  lt_cv_file_magic_cmd='func_win32_libid'\n  ;;\n\nmingw* | pw32*)\n  # Base MSYS/MinGW do not provide the 'file' command needed by\n  # func_win32_libid shell function, so use a weaker test based on 'objdump',\n  # unless we find 'file', for example because we are cross-compiling.\n  # func_win32_libid assumes BSD nm, so disallow it if using MS dumpbin.\n  if ( test \"$lt_cv_nm_interface\" = \"BSD nm\" && file / ) >/dev/null 2>&1; then\n    lt_cv_deplibs_check_method='file_magic ^x86 archive import|^x86 DLL'\n    lt_cv_file_magic_cmd='func_win32_libid'\n  else\n    # Keep this pattern in sync with the one in func_win32_libid.\n    lt_cv_deplibs_check_method='file_magic file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)'\n    lt_cv_file_magic_cmd='$OBJDUMP -f'\n  fi\n  ;;\n\ncegcc*)\n  # use the weaker test based on 'objdump'. See mingw*.\n  lt_cv_deplibs_check_method='file_magic file format pe-arm-.*little(.*architecture: arm)?'\n  lt_cv_file_magic_cmd='$OBJDUMP -f'\n  ;;\n\ndarwin* | rhapsody*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nfreebsd* | dragonfly*)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    case $host_cpu in\n    i*86 )\n      # Not sure whether the presence of OpenBSD here was a mistake.\n      # Let's accept both of them until this is cleared up.\n      lt_cv_deplibs_check_method='file_magic (FreeBSD|OpenBSD|DragonFly)/i[3-9]86 (compact )?demand paged shared library'\n      lt_cv_file_magic_cmd=/usr/bin/file\n      lt_cv_file_magic_test_file=`echo /usr/lib/libc.so.*`\n      ;;\n    esac\n  else\n    lt_cv_deplibs_check_method=pass_all\n  fi\n  ;;\n\nhaiku*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nhpux10.20* | hpux11*)\n  lt_cv_file_magic_cmd=/usr/bin/file\n  case $host_cpu in\n  ia64*)\n    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF-[0-9][0-9]) shared object file - IA64'\n    lt_cv_file_magic_test_file=/usr/lib/hpux32/libc.so\n    ;;\n  hppa*64*)\n    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|ELF[ -][0-9][0-9])(-bit)?( [LM]SB)? shared object( file)?[, -]* PA-RISC [0-9]\\.[0-9]'\n    lt_cv_file_magic_test_file=/usr/lib/pa20_64/libc.sl\n    ;;\n  *)\n    lt_cv_deplibs_check_method='file_magic (s[0-9][0-9][0-9]|PA-RISC[0-9]\\.[0-9]) shared library'\n    lt_cv_file_magic_test_file=/usr/lib/libc.sl\n    ;;\n  esac\n  ;;\n\ninterix[3-9]*)\n  # PIC code is broken on Interix 3.x, that's why |\\.a not |_pic\\.a here\n  lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\\.so|\\.a)$'\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $LD in\n  *-32|*\"-32 \") libmagic=32-bit;;\n  *-n32|*\"-n32 \") libmagic=N32;;\n  *-64|*\"-64 \") libmagic=64-bit;;\n  *) libmagic=never-match;;\n  esac\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nnetbsd* | netbsdelf*-gnu)\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ > /dev/null; then\n    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\\.so\\.[0-9]+\\.[0-9]+|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\\.so|_pic\\.a)$'\n  fi\n  ;;\n\nnewos6*)\n  lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (executable|dynamic lib)'\n  lt_cv_file_magic_cmd=/usr/bin/file\n  lt_cv_file_magic_test_file=/usr/lib/libnls.so\n  ;;\n\n*nto* | *qnx*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nopenbsd*)\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\\.so\\.[0-9]+\\.[0-9]+|\\.so|_pic\\.a)$'\n  else\n    lt_cv_deplibs_check_method='match_pattern /lib[^/]+(\\.so\\.[0-9]+\\.[0-9]+|_pic\\.a)$'\n  fi\n  ;;\n\nosf3* | osf4* | osf5*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nrdos*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsolaris*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\n\nsysv4 | sysv4.3*)\n  case $host_vendor in\n  motorola)\n    lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [ML]SB (shared object|dynamic lib) M[0-9][0-9]* Version [0-9]'\n    lt_cv_file_magic_test_file=`echo /usr/lib/libc.so*`\n    ;;\n  ncr)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  sequent)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method='file_magic ELF [0-9][0-9]*-bit [LM]SB (shared object|dynamic lib )'\n    ;;\n  sni)\n    lt_cv_file_magic_cmd='/bin/file'\n    lt_cv_deplibs_check_method=\"file_magic ELF [0-9][0-9]*-bit [LM]SB dynamic lib\"\n    lt_cv_file_magic_test_file=/lib/libc.so\n    ;;\n  siemens)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  pc)\n    lt_cv_deplibs_check_method=pass_all\n    ;;\n  esac\n  ;;\n\ntpf*)\n  lt_cv_deplibs_check_method=pass_all\n  ;;\nesac\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_deplibs_check_method\" >&5\n$as_echo \"$lt_cv_deplibs_check_method\" >&6; }\n\nfile_magic_glob=\nwant_nocaseglob=no\nif test \"$build\" = \"$host\"; then\n  case $host_os in\n  mingw* | pw32*)\n    if ( shopt | grep nocaseglob ) >/dev/null 2>&1; then\n      want_nocaseglob=yes\n    else\n      file_magic_glob=`echo aAbBcCdDeEfFgGhHiIjJkKlLmMnNoOpPqQrRsStTuUvVwWxXyYzZ | $SED -e \"s/\\(..\\)/s\\/[\\1]\\/[\\1]\\/g;/g\"`\n    fi\n    ;;\n  esac\nfi\n\nfile_magic_cmd=$lt_cv_file_magic_cmd\ndeplibs_check_method=$lt_cv_deplibs_check_method\ntest -z \"$deplibs_check_method\" && deplibs_check_method=unknown\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}dlltool\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}dlltool; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_DLLTOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$DLLTOOL\"; then\n  ac_cv_prog_DLLTOOL=\"$DLLTOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_DLLTOOL=\"${ac_tool_prefix}dlltool\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nDLLTOOL=$ac_cv_prog_DLLTOOL\nif test -n \"$DLLTOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $DLLTOOL\" >&5\n$as_echo \"$DLLTOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_DLLTOOL\"; then\n  ac_ct_DLLTOOL=$DLLTOOL\n  # Extract the first word of \"dlltool\", so it can be a program name with args.\nset dummy dlltool; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_DLLTOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_DLLTOOL\"; then\n  ac_cv_prog_ac_ct_DLLTOOL=\"$ac_ct_DLLTOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_DLLTOOL=\"dlltool\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_DLLTOOL=$ac_cv_prog_ac_ct_DLLTOOL\nif test -n \"$ac_ct_DLLTOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_DLLTOOL\" >&5\n$as_echo \"$ac_ct_DLLTOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_DLLTOOL\" = x; then\n    DLLTOOL=\"false\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    DLLTOOL=$ac_ct_DLLTOOL\n  fi\nelse\n  DLLTOOL=\"$ac_cv_prog_DLLTOOL\"\nfi\n\ntest -z \"$DLLTOOL\" && DLLTOOL=dlltool\n\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to associate runtime and link libraries\" >&5\n$as_echo_n \"checking how to associate runtime and link libraries... \" >&6; }\nif ${lt_cv_sharedlib_from_linklib_cmd+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_sharedlib_from_linklib_cmd='unknown'\n\ncase $host_os in\ncygwin* | mingw* | pw32* | cegcc*)\n  # two different shell functions defined in ltmain.sh\n  # decide which to use based on capabilities of $DLLTOOL\n  case `$DLLTOOL --help 2>&1` in\n  *--identify-strict*)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib\n    ;;\n  *)\n    lt_cv_sharedlib_from_linklib_cmd=func_cygming_dll_for_implib_fallback\n    ;;\n  esac\n  ;;\n*)\n  # fallback: assume linklib IS sharedlib\n  lt_cv_sharedlib_from_linklib_cmd=\"$ECHO\"\n  ;;\nesac\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_sharedlib_from_linklib_cmd\" >&5\n$as_echo \"$lt_cv_sharedlib_from_linklib_cmd\" >&6; }\nsharedlib_from_linklib_cmd=$lt_cv_sharedlib_from_linklib_cmd\ntest -z \"$sharedlib_from_linklib_cmd\" && sharedlib_from_linklib_cmd=$ECHO\n\n\n\n\n\n\n\n\nif test -n \"$ac_tool_prefix\"; then\n  for ac_prog in ar\n  do\n    # Extract the first word of \"$ac_tool_prefix$ac_prog\", so it can be a program name with args.\nset dummy $ac_tool_prefix$ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_AR+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$AR\"; then\n  ac_cv_prog_AR=\"$AR\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_AR=\"$ac_tool_prefix$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nAR=$ac_cv_prog_AR\nif test -n \"$AR\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $AR\" >&5\n$as_echo \"$AR\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n    test -n \"$AR\" && break\n  done\nfi\nif test -z \"$AR\"; then\n  ac_ct_AR=$AR\n  for ac_prog in ar\ndo\n  # Extract the first word of \"$ac_prog\", so it can be a program name with args.\nset dummy $ac_prog; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_AR+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_AR\"; then\n  ac_cv_prog_ac_ct_AR=\"$ac_ct_AR\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_AR=\"$ac_prog\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_AR=$ac_cv_prog_ac_ct_AR\nif test -n \"$ac_ct_AR\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_AR\" >&5\n$as_echo \"$ac_ct_AR\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  test -n \"$ac_ct_AR\" && break\ndone\n\n  if test \"x$ac_ct_AR\" = x; then\n    AR=\"false\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    AR=$ac_ct_AR\n  fi\nfi\n\n: ${AR=ar}\n: ${AR_FLAGS=cru}\n\n\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for archiver @FILE support\" >&5\n$as_echo_n \"checking for archiver @FILE support... \" >&6; }\nif ${lt_cv_ar_at_file+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_ar_at_file=no\n   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  echo conftest.$ac_objext > conftest.lst\n      lt_ar_try='$AR $AR_FLAGS libconftest.a @conftest.lst >&5'\n      { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$lt_ar_try\\\"\"; } >&5\n  (eval $lt_ar_try) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }\n      if test \"$ac_status\" -eq 0; then\n\t# Ensure the archiver fails upon bogus file names.\n\trm -f conftest.$ac_objext libconftest.a\n\t{ { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$lt_ar_try\\\"\"; } >&5\n  (eval $lt_ar_try) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }\n\tif test \"$ac_status\" -ne 0; then\n          lt_cv_ar_at_file=@\n        fi\n      fi\n      rm -f conftest.* libconftest.a\n\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ar_at_file\" >&5\n$as_echo \"$lt_cv_ar_at_file\" >&6; }\n\nif test \"x$lt_cv_ar_at_file\" = xno; then\n  archiver_list_spec=\nelse\n  archiver_list_spec=$lt_cv_ar_at_file\nfi\n\n\n\n\n\n\n\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}strip\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}strip; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_STRIP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$STRIP\"; then\n  ac_cv_prog_STRIP=\"$STRIP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_STRIP=\"${ac_tool_prefix}strip\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nSTRIP=$ac_cv_prog_STRIP\nif test -n \"$STRIP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $STRIP\" >&5\n$as_echo \"$STRIP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_STRIP\"; then\n  ac_ct_STRIP=$STRIP\n  # Extract the first word of \"strip\", so it can be a program name with args.\nset dummy strip; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_STRIP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_STRIP\"; then\n  ac_cv_prog_ac_ct_STRIP=\"$ac_ct_STRIP\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_STRIP=\"strip\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_STRIP=$ac_cv_prog_ac_ct_STRIP\nif test -n \"$ac_ct_STRIP\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_STRIP\" >&5\n$as_echo \"$ac_ct_STRIP\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_STRIP\" = x; then\n    STRIP=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    STRIP=$ac_ct_STRIP\n  fi\nelse\n  STRIP=\"$ac_cv_prog_STRIP\"\nfi\n\ntest -z \"$STRIP\" && STRIP=:\n\n\n\n\n\n\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}ranlib\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}ranlib; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_RANLIB+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$RANLIB\"; then\n  ac_cv_prog_RANLIB=\"$RANLIB\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_RANLIB=\"${ac_tool_prefix}ranlib\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nRANLIB=$ac_cv_prog_RANLIB\nif test -n \"$RANLIB\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $RANLIB\" >&5\n$as_echo \"$RANLIB\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_RANLIB\"; then\n  ac_ct_RANLIB=$RANLIB\n  # Extract the first word of \"ranlib\", so it can be a program name with args.\nset dummy ranlib; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_RANLIB+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_RANLIB\"; then\n  ac_cv_prog_ac_ct_RANLIB=\"$ac_ct_RANLIB\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_RANLIB=\"ranlib\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_RANLIB=$ac_cv_prog_ac_ct_RANLIB\nif test -n \"$ac_ct_RANLIB\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_RANLIB\" >&5\n$as_echo \"$ac_ct_RANLIB\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_RANLIB\" = x; then\n    RANLIB=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    RANLIB=$ac_ct_RANLIB\n  fi\nelse\n  RANLIB=\"$ac_cv_prog_RANLIB\"\nfi\n\ntest -z \"$RANLIB\" && RANLIB=:\n\n\n\n\n\n\n# Determine commands to create old-style static archives.\nold_archive_cmds='$AR $AR_FLAGS $oldlib$oldobjs'\nold_postinstall_cmds='chmod 644 $oldlib'\nold_postuninstall_cmds=\n\nif test -n \"$RANLIB\"; then\n  case $host_os in\n  openbsd*)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB -t \\$tool_oldlib\"\n    ;;\n  *)\n    old_postinstall_cmds=\"$old_postinstall_cmds~\\$RANLIB \\$tool_oldlib\"\n    ;;\n  esac\n  old_archive_cmds=\"$old_archive_cmds~\\$RANLIB \\$tool_oldlib\"\nfi\n\ncase $host_os in\n  darwin*)\n    lock_old_archive_extraction=yes ;;\n  *)\n    lock_old_archive_extraction=no ;;\nesac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n\n\n# Check for command to grab the raw symbol name followed by C symbol from nm.\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking command to parse $NM output from $compiler object\" >&5\n$as_echo_n \"checking command to parse $NM output from $compiler object... \" >&6; }\nif ${lt_cv_sys_global_symbol_pipe+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n\n# These are sane defaults that work on at least a few old systems.\n# [They come from Ultrix.  What could be older than Ultrix?!! ;)]\n\n# Character class describing NM global symbol codes.\nsymcode='[BCDEGRST]'\n\n# Regexp to match symbols that can be accessed directly from C.\nsympat='\\([_A-Za-z][_A-Za-z0-9]*\\)'\n\n# Define system-specific variables.\ncase $host_os in\naix*)\n  symcode='[BCDT]'\n  ;;\ncygwin* | mingw* | pw32* | cegcc*)\n  symcode='[ABCDGISTW]'\n  ;;\nhpux*)\n  if test \"$host_cpu\" = ia64; then\n    symcode='[ABCDEGRST]'\n  fi\n  ;;\nirix* | nonstopux*)\n  symcode='[BCDEGRST]'\n  ;;\nosf*)\n  symcode='[BCDEGQRST]'\n  ;;\nsolaris*)\n  symcode='[BDRT]'\n  ;;\nsco3.2v5*)\n  symcode='[DT]'\n  ;;\nsysv4.2uw2*)\n  symcode='[DT]'\n  ;;\nsysv5* | sco5v6* | unixware* | OpenUNIX*)\n  symcode='[ABDT]'\n  ;;\nsysv4)\n  symcode='[DFNSTU]'\n  ;;\nesac\n\n# If we're using GNU nm, then use its standard symbol codes.\ncase `$NM -V 2>&1` in\n*GNU* | *'with BFD'*)\n  symcode='[ABCDGIRSTW]' ;;\nesac\n\n# Transform an extracted symbol line into a proper C declaration.\n# Some systems (esp. on ia64) link data and code symbols differently,\n# so use this general approach.\nlt_cv_sys_global_symbol_to_cdecl=\"sed -n -e 's/^T .* \\(.*\\)$/extern int \\1();/p' -e 's/^$symcode* .* \\(.*\\)$/extern char \\1;/p'\"\n\n# Transform an extracted symbol line into symbol name and symbol address\nlt_cv_sys_global_symbol_to_c_name_address=\"sed -n -e 's/^: \\([^ ]*\\)[ ]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([^ ]*\\) \\([^ ]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p'\"\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix=\"sed -n -e 's/^: \\([^ ]*\\)[ ]*$/  {\\\\\\\"\\1\\\\\\\", (void *) 0},/p' -e 's/^$symcode* \\([^ ]*\\) \\(lib[^ ]*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/p' -e 's/^$symcode* \\([^ ]*\\) \\([^ ]*\\)$/  {\\\"lib\\2\\\", (void *) \\&\\2},/p'\"\n\n# Handle CRLF in mingw tool chain\nopt_cr=\ncase $build_os in\nmingw*)\n  opt_cr=`$ECHO 'x\\{0,1\\}' | tr x '\\015'` # option cr in regexp\n  ;;\nesac\n\n# Try without a prefix underscore, then with it.\nfor ac_symprfx in \"\" \"_\"; do\n\n  # Transform symcode, sympat, and symprfx into a raw symbol and a C symbol.\n  symxfrm=\"\\\\1 $ac_symprfx\\\\2 \\\\2\"\n\n  # Write the raw and C identifiers.\n  if test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n    # Fake it for dumpbin and say T for any non-static function\n    # and D for any global variable.\n    # Also find C++ and __fastcall symbols from MSVC++,\n    # which start with @ or ?.\n    lt_cv_sys_global_symbol_pipe=\"$AWK '\"\\\n\"     {last_section=section; section=\\$ 3};\"\\\n\"     /^COFF SYMBOL TABLE/{for(i in hide) delete hide[i]};\"\\\n\"     /Section length .*#relocs.*(pick any)/{hide[last_section]=1};\"\\\n\"     \\$ 0!~/External *\\|/{next};\"\\\n\"     / 0+ UNDEF /{next}; / UNDEF \\([^|]\\)*()/{next};\"\\\n\"     {if(hide[section]) next};\"\\\n\"     {f=0}; \\$ 0~/\\(\\).*\\|/{f=1}; {printf f ? \\\"T \\\" : \\\"D \\\"};\"\\\n\"     {split(\\$ 0, a, /\\||\\r/); split(a[2], s)};\"\\\n\"     s[1]~/^[@?]/{print s[1], s[1]; next};\"\\\n\"     s[1]~prfx {split(s[1],t,\\\"@\\\"); print t[1], substr(t[1],length(prfx))}\"\\\n\"     ' prfx=^$ac_symprfx\"\n  else\n    lt_cv_sys_global_symbol_pipe=\"sed -n -e 's/^.*[\t ]\\($symcode$symcode*\\)[\t ][\t ]*$ac_symprfx$sympat$opt_cr$/$symxfrm/p'\"\n  fi\n  lt_cv_sys_global_symbol_pipe=\"$lt_cv_sys_global_symbol_pipe | sed '/ __gnu_lto/d'\"\n\n  # Check to see that the pipe works correctly.\n  pipe_works=no\n\n  rm -f conftest*\n  cat > conftest.$ac_ext <<_LT_EOF\n#ifdef __cplusplus\nextern \"C\" {\n#endif\nchar nm_test_var;\nvoid nm_test_func(void);\nvoid nm_test_func(void){}\n#ifdef __cplusplus\n}\n#endif\nint main(){nm_test_var='a';nm_test_func();return(0);}\n_LT_EOF\n\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then\n    # Now try to grab the symbols.\n    nlist=conftest.nm\n    if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist\\\"\"; } >&5\n  (eval $NM conftest.$ac_objext \\| \"$lt_cv_sys_global_symbol_pipe\" \\> $nlist) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && test -s \"$nlist\"; then\n      # Try sorting and uniquifying the output.\n      if sort \"$nlist\" | uniq > \"$nlist\"T; then\n\tmv -f \"$nlist\"T \"$nlist\"\n      else\n\trm -f \"$nlist\"T\n      fi\n\n      # Make sure that we snagged all the symbols we need.\n      if $GREP ' nm_test_var$' \"$nlist\" >/dev/null; then\n\tif $GREP ' nm_test_func$' \"$nlist\" >/dev/null; then\n\t  cat <<_LT_EOF > conftest.$ac_ext\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n_LT_EOF\n\t  # Now generate the symbol file.\n\t  eval \"$lt_cv_sys_global_symbol_to_cdecl\"' < \"$nlist\" | $GREP -v main >> conftest.$ac_ext'\n\n\t  cat <<_LT_EOF >> conftest.$ac_ext\n\n/* The mapping between symbol names and symbols.  */\nLT_DLSYM_CONST struct {\n  const char *name;\n  void       *address;\n}\nlt__PROGRAM__LTX_preloaded_symbols[] =\n{\n  { \"@PROGRAM@\", (void *) 0 },\n_LT_EOF\n\t  $SED \"s/^$symcode$symcode* \\(.*\\) \\(.*\\)$/  {\\\"\\2\\\", (void *) \\&\\2},/\" < \"$nlist\" | $GREP -v main >> conftest.$ac_ext\n\t  cat <<\\_LT_EOF >> conftest.$ac_ext\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt__PROGRAM__LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\n_LT_EOF\n\t  # Now try linking the two files.\n\t  mv conftest.$ac_objext conftstm.$ac_objext\n\t  lt_globsym_save_LIBS=$LIBS\n\t  lt_globsym_save_CFLAGS=$CFLAGS\n\t  LIBS=\"conftstm.$ac_objext\"\n\t  CFLAGS=\"$CFLAGS$lt_prog_compiler_no_builtin_flag\"\n\t  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_link\\\"\"; } >&5\n  (eval $ac_link) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && test -s conftest${ac_exeext}; then\n\t    pipe_works=yes\n\t  fi\n\t  LIBS=$lt_globsym_save_LIBS\n\t  CFLAGS=$lt_globsym_save_CFLAGS\n\telse\n\t  echo \"cannot find nm_test_func in $nlist\" >&5\n\tfi\n      else\n\techo \"cannot find nm_test_var in $nlist\" >&5\n      fi\n    else\n      echo \"cannot run $lt_cv_sys_global_symbol_pipe\" >&5\n    fi\n  else\n    echo \"$progname: failed program was:\" >&5\n    cat conftest.$ac_ext >&5\n  fi\n  rm -rf conftest* conftst*\n\n  # Do not use the global_symbol_pipe unless it works.\n  if test \"$pipe_works\" = yes; then\n    break\n  else\n    lt_cv_sys_global_symbol_pipe=\n  fi\ndone\n\nfi\n\nif test -z \"$lt_cv_sys_global_symbol_pipe\"; then\n  lt_cv_sys_global_symbol_to_cdecl=\nfi\nif test -z \"$lt_cv_sys_global_symbol_pipe$lt_cv_sys_global_symbol_to_cdecl\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: failed\" >&5\n$as_echo \"failed\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ok\" >&5\n$as_echo \"ok\" >&6; }\nfi\n\n# Response file support.\nif test \"$lt_cv_nm_interface\" = \"MS dumpbin\"; then\n  nm_file_list_spec='@'\nelif $NM --help 2>/dev/null | grep '[@]FILE' >/dev/null; then\n  nm_file_list_spec='@'\nfi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for sysroot\" >&5\n$as_echo_n \"checking for sysroot... \" >&6; }\n\n# Check whether --with-sysroot was given.\nif test \"${with_sysroot+set}\" = set; then :\n  withval=$with_sysroot;\nelse\n  with_sysroot=no\nfi\n\n\nlt_sysroot=\ncase ${with_sysroot} in #(\n yes)\n   if test \"$GCC\" = yes; then\n     lt_sysroot=`$CC --print-sysroot 2>/dev/null`\n   fi\n   ;; #(\n /*)\n   lt_sysroot=`echo \"$with_sysroot\" | sed -e \"$sed_quote_subst\"`\n   ;; #(\n no|'')\n   ;; #(\n *)\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${with_sysroot}\" >&5\n$as_echo \"${with_sysroot}\" >&6; }\n   as_fn_error $? \"The sysroot must be an absolute path.\" \"$LINENO\" 5\n   ;;\nesac\n\n { $as_echo \"$as_me:${as_lineno-$LINENO}: result: ${lt_sysroot:-no}\" >&5\n$as_echo \"${lt_sysroot:-no}\" >&6; }\n\n\n\n\n\n# Check whether --enable-libtool-lock was given.\nif test \"${enable_libtool_lock+set}\" = set; then :\n  enableval=$enable_libtool_lock;\nfi\n\ntest \"x$enable_libtool_lock\" != xno && enable_libtool_lock=yes\n\n# Some flags need to be propagated to the compiler or linker for good\n# libtool support.\ncase $host in\nia64-*-hpux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then\n    case `/usr/bin/file conftest.$ac_objext` in\n      *ELF-32*)\n\tHPUX_IA64_MODE=\"32\"\n\t;;\n      *ELF-64*)\n\tHPUX_IA64_MODE=\"64\"\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n*-*-irix6*)\n  # Find out which ABI we are using.\n  echo '#line '$LINENO' \"configure\"' > conftest.$ac_ext\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then\n    if test \"$lt_cv_prog_gnu_ld\" = yes; then\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -melf32bsmip\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -melf32bmipn32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -melf64bmip\"\n\t;;\n      esac\n    else\n      case `/usr/bin/file conftest.$ac_objext` in\n\t*32-bit*)\n\t  LD=\"${LD-ld} -32\"\n\t  ;;\n\t*N32*)\n\t  LD=\"${LD-ld} -n32\"\n\t  ;;\n\t*64-bit*)\n\t  LD=\"${LD-ld} -64\"\n\t  ;;\n      esac\n    fi\n  fi\n  rm -rf conftest*\n  ;;\n\nx86_64-*kfreebsd*-gnu|x86_64-*linux*|powerpc*-*linux*| \\\ns390*-*linux*|s390*-*tpf*|sparc*-*linux*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then\n    case `/usr/bin/file conftest.o` in\n      *32-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_i386_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    case `/usr/bin/file conftest.o` in\n\t      *x86-64*)\n\t\tLD=\"${LD-ld} -m elf32_x86_64\"\n\t\t;;\n\t      *)\n\t\tLD=\"${LD-ld} -m elf_i386\"\n\t\t;;\n\t    esac\n\t    ;;\n\t  powerpc64le-*)\n\t    LD=\"${LD-ld} -m elf32lppclinux\"\n\t    ;;\n\t  powerpc64-*)\n\t    LD=\"${LD-ld} -m elf32ppclinux\"\n\t    ;;\n\t  s390x-*linux*)\n\t    LD=\"${LD-ld} -m elf_s390\"\n\t    ;;\n\t  sparc64-*linux*)\n\t    LD=\"${LD-ld} -m elf32_sparc\"\n\t    ;;\n\tesac\n\t;;\n      *64-bit*)\n\tcase $host in\n\t  x86_64-*kfreebsd*-gnu)\n\t    LD=\"${LD-ld} -m elf_x86_64_fbsd\"\n\t    ;;\n\t  x86_64-*linux*)\n\t    LD=\"${LD-ld} -m elf_x86_64\"\n\t    ;;\n\t  powerpcle-*)\n\t    LD=\"${LD-ld} -m elf64lppc\"\n\t    ;;\n\t  powerpc-*)\n\t    LD=\"${LD-ld} -m elf64ppc\"\n\t    ;;\n\t  s390*-*linux*|s390*-*tpf*)\n\t    LD=\"${LD-ld} -m elf64_s390\"\n\t    ;;\n\t  sparc*-*linux*)\n\t    LD=\"${LD-ld} -m elf64_sparc\"\n\t    ;;\n\tesac\n\t;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\n\n*-*-sco3.2v5*)\n  # On SCO OpenServer 5, we need -belf to get full-featured binaries.\n  SAVE_CFLAGS=\"$CFLAGS\"\n  CFLAGS=\"$CFLAGS -belf\"\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the C compiler needs -belf\" >&5\n$as_echo_n \"checking whether the C compiler needs -belf... \" >&6; }\nif ${lt_cv_cc_needs_belf+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\n     cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  lt_cv_cc_needs_belf=yes\nelse\n  lt_cv_cc_needs_belf=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n     ac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_cc_needs_belf\" >&5\n$as_echo \"$lt_cv_cc_needs_belf\" >&6; }\n  if test x\"$lt_cv_cc_needs_belf\" != x\"yes\"; then\n    # this is probably gcc 2.8.0, egcs 1.0 or newer; no need for -belf\n    CFLAGS=\"$SAVE_CFLAGS\"\n  fi\n  ;;\n*-*solaris*)\n  # Find out which ABI we are using.\n  echo 'int i;' > conftest.$ac_ext\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }; then\n    case `/usr/bin/file conftest.o` in\n    *64-bit*)\n      case $lt_cv_prog_gnu_ld in\n      yes*)\n        case $host in\n        i?86-*-solaris*)\n          LD=\"${LD-ld} -m elf_x86_64\"\n          ;;\n        sparc*-*-solaris*)\n          LD=\"${LD-ld} -m elf64_sparc\"\n          ;;\n        esac\n        # GNU ld 2.21 introduced _sol2 emulations.  Use them if available.\n        if ${LD-ld} -V | grep _sol2 >/dev/null 2>&1; then\n          LD=\"${LD-ld}_sol2\"\n        fi\n        ;;\n      *)\n\tif ${LD-ld} -64 -r -o conftest2.o conftest.o >/dev/null 2>&1; then\n\t  LD=\"${LD-ld} -64\"\n\tfi\n\t;;\n      esac\n      ;;\n    esac\n  fi\n  rm -rf conftest*\n  ;;\nesac\n\nneed_locks=\"$enable_libtool_lock\"\n\nif test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}mt\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}mt; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_MANIFEST_TOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$MANIFEST_TOOL\"; then\n  ac_cv_prog_MANIFEST_TOOL=\"$MANIFEST_TOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_MANIFEST_TOOL=\"${ac_tool_prefix}mt\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nMANIFEST_TOOL=$ac_cv_prog_MANIFEST_TOOL\nif test -n \"$MANIFEST_TOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MANIFEST_TOOL\" >&5\n$as_echo \"$MANIFEST_TOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_MANIFEST_TOOL\"; then\n  ac_ct_MANIFEST_TOOL=$MANIFEST_TOOL\n  # Extract the first word of \"mt\", so it can be a program name with args.\nset dummy mt; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_MANIFEST_TOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_MANIFEST_TOOL\"; then\n  ac_cv_prog_ac_ct_MANIFEST_TOOL=\"$ac_ct_MANIFEST_TOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_MANIFEST_TOOL=\"mt\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_MANIFEST_TOOL=$ac_cv_prog_ac_ct_MANIFEST_TOOL\nif test -n \"$ac_ct_MANIFEST_TOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_MANIFEST_TOOL\" >&5\n$as_echo \"$ac_ct_MANIFEST_TOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_MANIFEST_TOOL\" = x; then\n    MANIFEST_TOOL=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    MANIFEST_TOOL=$ac_ct_MANIFEST_TOOL\n  fi\nelse\n  MANIFEST_TOOL=\"$ac_cv_prog_MANIFEST_TOOL\"\nfi\n\ntest -z \"$MANIFEST_TOOL\" && MANIFEST_TOOL=mt\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $MANIFEST_TOOL is a manifest tool\" >&5\n$as_echo_n \"checking if $MANIFEST_TOOL is a manifest tool... \" >&6; }\nif ${lt_cv_path_mainfest_tool+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_path_mainfest_tool=no\n  echo \"$as_me:$LINENO: $MANIFEST_TOOL '-?'\" >&5\n  $MANIFEST_TOOL '-?' 2>conftest.err > conftest.out\n  cat conftest.err >&5\n  if $GREP 'Manifest Tool' conftest.out > /dev/null; then\n    lt_cv_path_mainfest_tool=yes\n  fi\n  rm -f conftest*\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_path_mainfest_tool\" >&5\n$as_echo \"$lt_cv_path_mainfest_tool\" >&6; }\nif test \"x$lt_cv_path_mainfest_tool\" != xyes; then\n  MANIFEST_TOOL=:\nfi\n\n\n\n\n\n\n  case $host_os in\n    rhapsody* | darwin*)\n    if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}dsymutil\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}dsymutil; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_DSYMUTIL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$DSYMUTIL\"; then\n  ac_cv_prog_DSYMUTIL=\"$DSYMUTIL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_DSYMUTIL=\"${ac_tool_prefix}dsymutil\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nDSYMUTIL=$ac_cv_prog_DSYMUTIL\nif test -n \"$DSYMUTIL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $DSYMUTIL\" >&5\n$as_echo \"$DSYMUTIL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_DSYMUTIL\"; then\n  ac_ct_DSYMUTIL=$DSYMUTIL\n  # Extract the first word of \"dsymutil\", so it can be a program name with args.\nset dummy dsymutil; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_DSYMUTIL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_DSYMUTIL\"; then\n  ac_cv_prog_ac_ct_DSYMUTIL=\"$ac_ct_DSYMUTIL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_DSYMUTIL=\"dsymutil\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_DSYMUTIL=$ac_cv_prog_ac_ct_DSYMUTIL\nif test -n \"$ac_ct_DSYMUTIL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_DSYMUTIL\" >&5\n$as_echo \"$ac_ct_DSYMUTIL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_DSYMUTIL\" = x; then\n    DSYMUTIL=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    DSYMUTIL=$ac_ct_DSYMUTIL\n  fi\nelse\n  DSYMUTIL=\"$ac_cv_prog_DSYMUTIL\"\nfi\n\n    if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}nmedit\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}nmedit; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_NMEDIT+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$NMEDIT\"; then\n  ac_cv_prog_NMEDIT=\"$NMEDIT\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_NMEDIT=\"${ac_tool_prefix}nmedit\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nNMEDIT=$ac_cv_prog_NMEDIT\nif test -n \"$NMEDIT\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $NMEDIT\" >&5\n$as_echo \"$NMEDIT\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_NMEDIT\"; then\n  ac_ct_NMEDIT=$NMEDIT\n  # Extract the first word of \"nmedit\", so it can be a program name with args.\nset dummy nmedit; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_NMEDIT+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_NMEDIT\"; then\n  ac_cv_prog_ac_ct_NMEDIT=\"$ac_ct_NMEDIT\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_NMEDIT=\"nmedit\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_NMEDIT=$ac_cv_prog_ac_ct_NMEDIT\nif test -n \"$ac_ct_NMEDIT\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_NMEDIT\" >&5\n$as_echo \"$ac_ct_NMEDIT\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_NMEDIT\" = x; then\n    NMEDIT=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    NMEDIT=$ac_ct_NMEDIT\n  fi\nelse\n  NMEDIT=\"$ac_cv_prog_NMEDIT\"\nfi\n\n    if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}lipo\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}lipo; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_LIPO+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$LIPO\"; then\n  ac_cv_prog_LIPO=\"$LIPO\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_LIPO=\"${ac_tool_prefix}lipo\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nLIPO=$ac_cv_prog_LIPO\nif test -n \"$LIPO\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $LIPO\" >&5\n$as_echo \"$LIPO\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_LIPO\"; then\n  ac_ct_LIPO=$LIPO\n  # Extract the first word of \"lipo\", so it can be a program name with args.\nset dummy lipo; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_LIPO+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_LIPO\"; then\n  ac_cv_prog_ac_ct_LIPO=\"$ac_ct_LIPO\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_LIPO=\"lipo\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_LIPO=$ac_cv_prog_ac_ct_LIPO\nif test -n \"$ac_ct_LIPO\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_LIPO\" >&5\n$as_echo \"$ac_ct_LIPO\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_LIPO\" = x; then\n    LIPO=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    LIPO=$ac_ct_LIPO\n  fi\nelse\n  LIPO=\"$ac_cv_prog_LIPO\"\nfi\n\n    if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}otool\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}otool; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_OTOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$OTOOL\"; then\n  ac_cv_prog_OTOOL=\"$OTOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_OTOOL=\"${ac_tool_prefix}otool\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nOTOOL=$ac_cv_prog_OTOOL\nif test -n \"$OTOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $OTOOL\" >&5\n$as_echo \"$OTOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_OTOOL\"; then\n  ac_ct_OTOOL=$OTOOL\n  # Extract the first word of \"otool\", so it can be a program name with args.\nset dummy otool; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_OTOOL+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_OTOOL\"; then\n  ac_cv_prog_ac_ct_OTOOL=\"$ac_ct_OTOOL\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_OTOOL=\"otool\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_OTOOL=$ac_cv_prog_ac_ct_OTOOL\nif test -n \"$ac_ct_OTOOL\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_OTOOL\" >&5\n$as_echo \"$ac_ct_OTOOL\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_OTOOL\" = x; then\n    OTOOL=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    OTOOL=$ac_ct_OTOOL\n  fi\nelse\n  OTOOL=\"$ac_cv_prog_OTOOL\"\nfi\n\n    if test -n \"$ac_tool_prefix\"; then\n  # Extract the first word of \"${ac_tool_prefix}otool64\", so it can be a program name with args.\nset dummy ${ac_tool_prefix}otool64; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_OTOOL64+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$OTOOL64\"; then\n  ac_cv_prog_OTOOL64=\"$OTOOL64\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_OTOOL64=\"${ac_tool_prefix}otool64\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nOTOOL64=$ac_cv_prog_OTOOL64\nif test -n \"$OTOOL64\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $OTOOL64\" >&5\n$as_echo \"$OTOOL64\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\nfi\nif test -z \"$ac_cv_prog_OTOOL64\"; then\n  ac_ct_OTOOL64=$OTOOL64\n  # Extract the first word of \"otool64\", so it can be a program name with args.\nset dummy otool64; ac_word=$2\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $ac_word\" >&5\n$as_echo_n \"checking for $ac_word... \" >&6; }\nif ${ac_cv_prog_ac_ct_OTOOL64+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  if test -n \"$ac_ct_OTOOL64\"; then\n  ac_cv_prog_ac_ct_OTOOL64=\"$ac_ct_OTOOL64\" # Let the user override the test.\nelse\nas_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    for ac_exec_ext in '' $ac_executable_extensions; do\n  if as_fn_executable_p \"$as_dir/$ac_word$ac_exec_ext\"; then\n    ac_cv_prog_ac_ct_OTOOL64=\"otool64\"\n    $as_echo \"$as_me:${as_lineno-$LINENO}: found $as_dir/$ac_word$ac_exec_ext\" >&5\n    break 2\n  fi\ndone\n  done\nIFS=$as_save_IFS\n\nfi\nfi\nac_ct_OTOOL64=$ac_cv_prog_ac_ct_OTOOL64\nif test -n \"$ac_ct_OTOOL64\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_ct_OTOOL64\" >&5\n$as_echo \"$ac_ct_OTOOL64\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n  if test \"x$ac_ct_OTOOL64\" = x; then\n    OTOOL64=\":\"\n  else\n    case $cross_compiling:$ac_tool_warned in\nyes:)\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: using cross tools not prefixed with host triplet\" >&5\n$as_echo \"$as_me: WARNING: using cross tools not prefixed with host triplet\" >&2;}\nac_tool_warned=yes ;;\nesac\n    OTOOL64=$ac_ct_OTOOL64\n  fi\nelse\n  OTOOL64=\"$ac_cv_prog_OTOOL64\"\nfi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for -single_module linker flag\" >&5\n$as_echo_n \"checking for -single_module linker flag... \" >&6; }\nif ${lt_cv_apple_cc_single_mod+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_apple_cc_single_mod=no\n      if test -z \"${LT_MULTI_MODULE}\"; then\n\t# By default we will add the -single_module flag. You can override\n\t# by either setting the environment variable LT_MULTI_MODULE\n\t# non-empty at configure time, or by adding -multi_module to the\n\t# link flags.\n\trm -rf libconftest.dylib*\n\techo \"int foo(void){return 1;}\" > conftest.c\n\techo \"$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n-dynamiclib -Wl,-single_module conftest.c\" >&5\n\t$LTCC $LTCFLAGS $LDFLAGS -o libconftest.dylib \\\n\t  -dynamiclib -Wl,-single_module conftest.c 2>conftest.err\n        _lt_result=$?\n\t# If there is a non-empty error log, and \"single_module\"\n\t# appears in it, assume the flag caused a linker warning\n        if test -s conftest.err && $GREP single_module conftest.err; then\n\t  cat conftest.err >&5\n\t# Otherwise, if the output was created with a 0 exit code from\n\t# the compiler, it worked.\n\telif test -f libconftest.dylib && test $_lt_result -eq 0; then\n\t  lt_cv_apple_cc_single_mod=yes\n\telse\n\t  cat conftest.err >&5\n\tfi\n\trm -rf libconftest.dylib*\n\trm -f conftest.*\n      fi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_apple_cc_single_mod\" >&5\n$as_echo \"$lt_cv_apple_cc_single_mod\" >&6; }\n\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for -exported_symbols_list linker flag\" >&5\n$as_echo_n \"checking for -exported_symbols_list linker flag... \" >&6; }\nif ${lt_cv_ld_exported_symbols_list+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_ld_exported_symbols_list=no\n      save_LDFLAGS=$LDFLAGS\n      echo \"_main\" > conftest.sym\n      LDFLAGS=\"$LDFLAGS -Wl,-exported_symbols_list,conftest.sym\"\n      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  lt_cv_ld_exported_symbols_list=yes\nelse\n  lt_cv_ld_exported_symbols_list=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n\tLDFLAGS=\"$save_LDFLAGS\"\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_exported_symbols_list\" >&5\n$as_echo \"$lt_cv_ld_exported_symbols_list\" >&6; }\n\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for -force_load linker flag\" >&5\n$as_echo_n \"checking for -force_load linker flag... \" >&6; }\nif ${lt_cv_ld_force_load+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_ld_force_load=no\n      cat > conftest.c << _LT_EOF\nint forced_loaded() { return 2;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS -c -o conftest.o conftest.c\" >&5\n      $LTCC $LTCFLAGS -c -o conftest.o conftest.c 2>&5\n      echo \"$AR cru libconftest.a conftest.o\" >&5\n      $AR cru libconftest.a conftest.o 2>&5\n      echo \"$RANLIB libconftest.a\" >&5\n      $RANLIB libconftest.a 2>&5\n      cat > conftest.c << _LT_EOF\nint main() { return 0;}\n_LT_EOF\n      echo \"$LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a\" >&5\n      $LTCC $LTCFLAGS $LDFLAGS -o conftest conftest.c -Wl,-force_load,./libconftest.a 2>conftest.err\n      _lt_result=$?\n      if test -s conftest.err && $GREP force_load conftest.err; then\n\tcat conftest.err >&5\n      elif test -f conftest && test $_lt_result -eq 0 && $GREP forced_load conftest >/dev/null 2>&1 ; then\n\tlt_cv_ld_force_load=yes\n      else\n\tcat conftest.err >&5\n      fi\n        rm -f conftest.err libconftest.a conftest conftest.c\n        rm -rf conftest.dSYM\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_ld_force_load\" >&5\n$as_echo \"$lt_cv_ld_force_load\" >&6; }\n    case $host_os in\n    rhapsody* | darwin1.[012])\n      _lt_dar_allow_undefined='${wl}-undefined ${wl}suppress' ;;\n    darwin1.*)\n      _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n    darwin*) # darwin 5.x on\n      # if running on 10.5 or later, the deployment target defaults\n      # to the OS version, if on x86, and 10.4, the deployment\n      # target defaults to 10.4. Don't you love it?\n      case ${MACOSX_DEPLOYMENT_TARGET-10.0},$host in\n\t10.0,*86*-darwin8*|10.0,*-darwin[91]*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n\t10.[012]*)\n\t  _lt_dar_allow_undefined='${wl}-flat_namespace ${wl}-undefined ${wl}suppress' ;;\n\t10.*)\n\t  _lt_dar_allow_undefined='${wl}-undefined ${wl}dynamic_lookup' ;;\n      esac\n    ;;\n  esac\n    if test \"$lt_cv_apple_cc_single_mod\" = \"yes\"; then\n      _lt_dar_single_mod='$single_module'\n    fi\n    if test \"$lt_cv_ld_exported_symbols_list\" = \"yes\"; then\n      _lt_dar_export_syms=' ${wl}-exported_symbols_list,$output_objdir/${libname}-symbols.expsym'\n    else\n      _lt_dar_export_syms='~$NMEDIT -s $output_objdir/${libname}-symbols.expsym ${lib}'\n    fi\n    if test \"$DSYMUTIL\" != \":\" && test \"$lt_cv_ld_force_load\" = \"no\"; then\n      _lt_dsymutil='~$DSYMUTIL $lib || :'\n    else\n      _lt_dsymutil=\n    fi\n    ;;\n  esac\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to run the C preprocessor\" >&5\n$as_echo_n \"checking how to run the C preprocessor... \" >&6; }\n# On Suns, sometimes $CPP names a directory.\nif test -n \"$CPP\" && test -d \"$CPP\"; then\n  CPP=\nfi\nif test -z \"$CPP\"; then\n  if ${ac_cv_prog_CPP+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n      # Double quotes because CPP needs to be expanded\n    for CPP in \"$CC -E\" \"$CC -E -traditional-cpp\" \"/lib/cpp\"\n    do\n      ac_preproc_ok=false\nfor ac_c_preproc_warn_flag in '' yes\ndo\n  # Use a header file that comes with gcc, so configuring glibc\n  # with a fresh cross-compiler works.\n  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n  # <limits.h> exists even on freestanding compilers.\n  # On the NeXT, cc -E runs the code through the compiler's parser,\n  # not just through cpp. \"Syntax error\" is here to catch this case.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#ifdef __STDC__\n# include <limits.h>\n#else\n# include <assert.h>\n#endif\n\t\t     Syntax error\n_ACEOF\nif ac_fn_c_try_cpp \"$LINENO\"; then :\n\nelse\n  # Broken: fails on valid input.\ncontinue\nfi\nrm -f conftest.err conftest.i conftest.$ac_ext\n\n  # OK, works on sane cases.  Now check whether nonexistent headers\n  # can be detected and how.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <ac_nonexistent.h>\n_ACEOF\nif ac_fn_c_try_cpp \"$LINENO\"; then :\n  # Broken: success on invalid input.\ncontinue\nelse\n  # Passes both tests.\nac_preproc_ok=:\nbreak\nfi\nrm -f conftest.err conftest.i conftest.$ac_ext\n\ndone\n# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.\nrm -f conftest.i conftest.err conftest.$ac_ext\nif $ac_preproc_ok; then :\n  break\nfi\n\n    done\n    ac_cv_prog_CPP=$CPP\n\nfi\n  CPP=$ac_cv_prog_CPP\nelse\n  ac_cv_prog_CPP=$CPP\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $CPP\" >&5\n$as_echo \"$CPP\" >&6; }\nac_preproc_ok=false\nfor ac_c_preproc_warn_flag in '' yes\ndo\n  # Use a header file that comes with gcc, so configuring glibc\n  # with a fresh cross-compiler works.\n  # Prefer <limits.h> to <assert.h> if __STDC__ is defined, since\n  # <limits.h> exists even on freestanding compilers.\n  # On the NeXT, cc -E runs the code through the compiler's parser,\n  # not just through cpp. \"Syntax error\" is here to catch this case.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#ifdef __STDC__\n# include <limits.h>\n#else\n# include <assert.h>\n#endif\n\t\t     Syntax error\n_ACEOF\nif ac_fn_c_try_cpp \"$LINENO\"; then :\n\nelse\n  # Broken: fails on valid input.\ncontinue\nfi\nrm -f conftest.err conftest.i conftest.$ac_ext\n\n  # OK, works on sane cases.  Now check whether nonexistent headers\n  # can be detected and how.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <ac_nonexistent.h>\n_ACEOF\nif ac_fn_c_try_cpp \"$LINENO\"; then :\n  # Broken: success on invalid input.\ncontinue\nelse\n  # Passes both tests.\nac_preproc_ok=:\nbreak\nfi\nrm -f conftest.err conftest.i conftest.$ac_ext\n\ndone\n# Because of `break', _AC_PREPROC_IFELSE's cleaning code was skipped.\nrm -f conftest.i conftest.err conftest.$ac_ext\nif $ac_preproc_ok; then :\n\nelse\n  { { $as_echo \"$as_me:${as_lineno-$LINENO}: error: in \\`$ac_pwd':\" >&5\n$as_echo \"$as_me: error: in \\`$ac_pwd':\" >&2;}\nas_fn_error $? \"C preprocessor \\\"$CPP\\\" fails sanity check\nSee \\`config.log' for more details\" \"$LINENO\" 5; }\nfi\n\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ANSI C header files\" >&5\n$as_echo_n \"checking for ANSI C header files... \" >&6; }\nif ${ac_cv_header_stdc+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <stdlib.h>\n#include <stdarg.h>\n#include <string.h>\n#include <float.h>\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_compile \"$LINENO\"; then :\n  ac_cv_header_stdc=yes\nelse\n  ac_cv_header_stdc=no\nfi\nrm -f core conftest.err conftest.$ac_objext conftest.$ac_ext\n\nif test $ac_cv_header_stdc = yes; then\n  # SunOS 4.x string.h does not declare mem*, contrary to ANSI.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <string.h>\n\n_ACEOF\nif (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n  $EGREP \"memchr\" >/dev/null 2>&1; then :\n\nelse\n  ac_cv_header_stdc=no\nfi\nrm -f conftest*\n\nfi\n\nif test $ac_cv_header_stdc = yes; then\n  # ISC 2.0.2 stdlib.h does not declare free, contrary to ANSI.\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <stdlib.h>\n\n_ACEOF\nif (eval \"$ac_cpp conftest.$ac_ext\") 2>&5 |\n  $EGREP \"free\" >/dev/null 2>&1; then :\n\nelse\n  ac_cv_header_stdc=no\nfi\nrm -f conftest*\n\nfi\n\nif test $ac_cv_header_stdc = yes; then\n  # /bin/cc in Irix-4.0.5 gets non-ANSI ctype macros unless using -ansi.\n  if test \"$cross_compiling\" = yes; then :\n  :\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <ctype.h>\n#include <stdlib.h>\n#if ((' ' & 0x0FF) == 0x020)\n# define ISLOWER(c) ('a' <= (c) && (c) <= 'z')\n# define TOUPPER(c) (ISLOWER(c) ? 'A' + ((c) - 'a') : (c))\n#else\n# define ISLOWER(c) \\\n\t\t   (('a' <= (c) && (c) <= 'i') \\\n\t\t     || ('j' <= (c) && (c) <= 'r') \\\n\t\t     || ('s' <= (c) && (c) <= 'z'))\n# define TOUPPER(c) (ISLOWER(c) ? ((c) | 0x40) : (c))\n#endif\n\n#define XOR(e, f) (((e) && !(f)) || (!(e) && (f)))\nint\nmain ()\n{\n  int i;\n  for (i = 0; i < 256; i++)\n    if (XOR (islower (i), ISLOWER (i))\n\t|| toupper (i) != TOUPPER (i))\n      return 2;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_run \"$LINENO\"; then :\n\nelse\n  ac_cv_header_stdc=no\nfi\nrm -f core *.core core.conftest.* gmon.out bb.out conftest$ac_exeext \\\n  conftest.$ac_objext conftest.beam conftest.$ac_ext\nfi\n\nfi\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_header_stdc\" >&5\n$as_echo \"$ac_cv_header_stdc\" >&6; }\nif test $ac_cv_header_stdc = yes; then\n\n$as_echo \"#define STDC_HEADERS 1\" >>confdefs.h\n\nfi\n\n# On IRIX 5.3, sys/types and inttypes.h are conflicting.\nfor ac_header in sys/types.h sys/stat.h stdlib.h string.h memory.h strings.h \\\n\t\t  inttypes.h stdint.h unistd.h\ndo :\n  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\nac_fn_c_check_header_compile \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\n\"\nif eval test \\\"x\\$\"$as_ac_Header\"\\\" = x\"yes\"; then :\n  cat >>confdefs.h <<_ACEOF\n#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n_ACEOF\n\nfi\n\ndone\n\n\nfor ac_header in dlfcn.h\ndo :\n  ac_fn_c_check_header_compile \"$LINENO\" \"dlfcn.h\" \"ac_cv_header_dlfcn_h\" \"$ac_includes_default\n\"\nif test \"x$ac_cv_header_dlfcn_h\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_DLFCN_H 1\n_ACEOF\n\nfi\n\ndone\n\n\n\n\n\n# Set options\n\n\n\n        enable_dlopen=no\n\n\n  enable_win32_dll=no\n\n\n            # Check whether --enable-shared was given.\nif test \"${enable_shared+set}\" = set; then :\n  enableval=$enable_shared; p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_shared=yes ;;\n    no) enable_shared=no ;;\n    *)\n      enable_shared=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_shared=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac\nelse\n  enable_shared=yes\nfi\n\n\n\n\n\n\n\n\n\n  # Check whether --enable-static was given.\nif test \"${enable_static+set}\" = set; then :\n  enableval=$enable_static; p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_static=yes ;;\n    no) enable_static=no ;;\n    *)\n     enable_static=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_static=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac\nelse\n  enable_static=yes\nfi\n\n\n\n\n\n\n\n\n\n\n# Check whether --with-pic was given.\nif test \"${with_pic+set}\" = set; then :\n  withval=$with_pic; lt_p=${PACKAGE-default}\n    case $withval in\n    yes|no) pic_mode=$withval ;;\n    *)\n      pic_mode=default\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for lt_pkg in $withval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$lt_pkg\" = \"X$lt_p\"; then\n\t  pic_mode=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac\nelse\n  pic_mode=default\nfi\n\n\ntest -z \"$pic_mode\" && pic_mode=default\n\n\n\n\n\n\n\n  # Check whether --enable-fast-install was given.\nif test \"${enable_fast_install+set}\" = set; then :\n  enableval=$enable_fast_install; p=${PACKAGE-default}\n    case $enableval in\n    yes) enable_fast_install=yes ;;\n    no) enable_fast_install=no ;;\n    *)\n      enable_fast_install=no\n      # Look at the argument we got.  We use all the common list separators.\n      lt_save_ifs=\"$IFS\"; IFS=\"${IFS}$PATH_SEPARATOR,\"\n      for pkg in $enableval; do\n\tIFS=\"$lt_save_ifs\"\n\tif test \"X$pkg\" = \"X$p\"; then\n\t  enable_fast_install=yes\n\tfi\n      done\n      IFS=\"$lt_save_ifs\"\n      ;;\n    esac\nelse\n  enable_fast_install=yes\nfi\n\n\n\n\n\n\n\n\n\n\n\n# This can be used to rebuild libtool when needed\nLIBTOOL_DEPS=\"$ltmain\"\n\n# Always use our own libtool.\nLIBTOOL='$(SHELL) $(top_builddir)/libtool'\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntest -z \"$LN_S\" && LN_S=\"ln -s\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nif test -n \"${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for objdir\" >&5\n$as_echo_n \"checking for objdir... \" >&6; }\nif ${lt_cv_objdir+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  rm -f .libs 2>/dev/null\nmkdir .libs 2>/dev/null\nif test -d .libs; then\n  lt_cv_objdir=.libs\nelse\n  # MS-DOS does not allow filenames that begin with a dot.\n  lt_cv_objdir=_libs\nfi\nrmdir .libs 2>/dev/null\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_objdir\" >&5\n$as_echo \"$lt_cv_objdir\" >&6; }\nobjdir=$lt_cv_objdir\n\n\n\n\n\ncat >>confdefs.h <<_ACEOF\n#define LT_OBJDIR \"$lt_cv_objdir/\"\n_ACEOF\n\n\n\n\ncase $host_os in\naix3*)\n  # AIX sometimes has problems with the GCC collect2 program.  For some\n  # reason, if we set the COLLECT_NAMES environment variable, the problems\n  # vanish in a puff of smoke.\n  if test \"X${COLLECT_NAMES+set}\" != Xset; then\n    COLLECT_NAMES=\n    export COLLECT_NAMES\n  fi\n  ;;\nesac\n\n# Global variables:\nofile=libtool\ncan_build_shared=yes\n\n# All known linkers require a `.a' archive for static linking (except MSVC,\n# which needs '.lib').\nlibext=a\n\nwith_gnu_ld=\"$lt_cv_prog_gnu_ld\"\n\nold_CC=\"$CC\"\nold_CFLAGS=\"$CFLAGS\"\n\n# Set sane defaults for various variables\ntest -z \"$CC\" && CC=cc\ntest -z \"$LTCC\" && LTCC=$CC\ntest -z \"$LTCFLAGS\" && LTCFLAGS=$CFLAGS\ntest -z \"$LD\" && LD=ld\ntest -z \"$ac_objext\" && ac_objext=o\n\nfor cc_temp in $compiler\"\"; do\n  case $cc_temp in\n    compile | *[\\\\/]compile | ccache | *[\\\\/]ccache ) ;;\n    distcc | *[\\\\/]distcc | purify | *[\\\\/]purify ) ;;\n    \\-*) ;;\n    *) break;;\n  esac\ndone\ncc_basename=`$ECHO \"$cc_temp\" | $SED \"s%.*/%%; s%^$host_alias-%%\"`\n\n\n# Only perform the check for file, if the check method requires it\ntest -z \"$MAGIC_CMD\" && MAGIC_CMD=file\ncase $deplibs_check_method in\nfile_magic*)\n  if test \"$file_magic_cmd\" = '$MAGIC_CMD'; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for ${ac_tool_prefix}file\" >&5\n$as_echo_n \"checking for ${ac_tool_prefix}file... \" >&6; }\nif ${lt_cv_path_MAGIC_CMD+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  case $MAGIC_CMD in\n[\\\\/*] |  ?:[\\\\/]*)\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  ac_dummy=\"/usr/bin$PATH_SEPARATOR$PATH\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/${ac_tool_prefix}file; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/${ac_tool_prefix}file\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac\nfi\n\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MAGIC_CMD\" >&5\n$as_echo \"$MAGIC_CMD\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n\n\n\nif test -z \"$lt_cv_path_MAGIC_CMD\"; then\n  if test -n \"$ac_tool_prefix\"; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for file\" >&5\n$as_echo_n \"checking for file... \" >&6; }\nif ${lt_cv_path_MAGIC_CMD+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  case $MAGIC_CMD in\n[\\\\/*] |  ?:[\\\\/]*)\n  lt_cv_path_MAGIC_CMD=\"$MAGIC_CMD\" # Let the user override the test with a path.\n  ;;\n*)\n  lt_save_MAGIC_CMD=\"$MAGIC_CMD\"\n  lt_save_ifs=\"$IFS\"; IFS=$PATH_SEPARATOR\n  ac_dummy=\"/usr/bin$PATH_SEPARATOR$PATH\"\n  for ac_dir in $ac_dummy; do\n    IFS=\"$lt_save_ifs\"\n    test -z \"$ac_dir\" && ac_dir=.\n    if test -f $ac_dir/file; then\n      lt_cv_path_MAGIC_CMD=\"$ac_dir/file\"\n      if test -n \"$file_magic_test_file\"; then\n\tcase $deplibs_check_method in\n\t\"file_magic \"*)\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"file_magic \\(.*\\)\"`\n\t  MAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\n\t  if eval $file_magic_cmd \\$file_magic_test_file 2> /dev/null |\n\t    $EGREP \"$file_magic_regex\" > /dev/null; then\n\t    :\n\t  else\n\t    cat <<_LT_EOF 1>&2\n\n*** Warning: the command libtool uses to detect shared libraries,\n*** $file_magic_cmd, produces output that libtool cannot recognize.\n*** The result is that libtool may fail to recognize shared libraries\n*** as such.  This will affect the creation of libtool libraries that\n*** depend on shared libraries, but programs linked with such libtool\n*** libraries will work regardless of this problem.  Nevertheless, you\n*** may want to report the problem to your system manager and/or to\n*** bug-libtool@gnu.org\n\n_LT_EOF\n\t  fi ;;\n\tesac\n      fi\n      break\n    fi\n  done\n  IFS=\"$lt_save_ifs\"\n  MAGIC_CMD=\"$lt_save_MAGIC_CMD\"\n  ;;\nesac\nfi\n\nMAGIC_CMD=\"$lt_cv_path_MAGIC_CMD\"\nif test -n \"$MAGIC_CMD\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $MAGIC_CMD\" >&5\n$as_echo \"$MAGIC_CMD\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\n\n\n  else\n    MAGIC_CMD=:\n  fi\nfi\n\n  fi\n  ;;\nesac\n\n# Use C for the default configuration in the libtool script\n\nlt_save_CC=\"$CC\"\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\n\n# Source file extension for C test sources.\nac_ext=c\n\n# Object file extension for compiled C test sources.\nobjext=o\nobjext=$objext\n\n# Code to be used in simple compile tests\nlt_simple_compile_test_code=\"int some_variable = 0;\"\n\n# Code to be used in simple link tests\nlt_simple_link_test_code='int main(){return(0);}'\n\n\n\n\n\n\n\n# If no C compiler was specified, use CC.\nLTCC=${LTCC-\"$CC\"}\n\n# If no C compiler flags were specified, use CFLAGS.\nLTCFLAGS=${LTCFLAGS-\"$CFLAGS\"}\n\n# Allow CC to be a program name with arguments.\ncompiler=$CC\n\n# Save the default compiler, since it gets overwritten when the other\n# tags are being tested, and _LT_TAGVAR(compiler, []) is a NOP.\ncompiler_DEFAULT=$CC\n\n# save warnings/boilerplate of simple test code\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_compile_test_code\" >conftest.$ac_ext\neval \"$ac_compile\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_compiler_boilerplate=`cat conftest.err`\n$RM conftest*\n\nac_outfile=conftest.$ac_objext\necho \"$lt_simple_link_test_code\" >conftest.$ac_ext\neval \"$ac_link\" 2>&1 >/dev/null | $SED '/^$/d; /^ *+/d' >conftest.err\n_lt_linker_boilerplate=`cat conftest.err`\n$RM -r conftest*\n\n\nif test -n \"$compiler\"; then\n\nlt_prog_compiler_no_builtin_flag=\n\nif test \"$GCC\" = yes; then\n  case $cc_basename in\n  nvcc*)\n    lt_prog_compiler_no_builtin_flag=' -Xcompiler -fno-builtin' ;;\n  *)\n    lt_prog_compiler_no_builtin_flag=' -fno-builtin' ;;\n  esac\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $compiler supports -fno-rtti -fno-exceptions\" >&5\n$as_echo_n \"checking if $compiler supports -fno-rtti -fno-exceptions... \" >&6; }\nif ${lt_cv_prog_compiler_rtti_exceptions+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_rtti_exceptions=no\n   ac_outfile=conftest.$ac_objext\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"-fno-rtti -fno-exceptions\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&5)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       lt_cv_prog_compiler_rtti_exceptions=yes\n     fi\n   fi\n   $RM conftest*\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_rtti_exceptions\" >&5\n$as_echo \"$lt_cv_prog_compiler_rtti_exceptions\" >&6; }\n\nif test x\"$lt_cv_prog_compiler_rtti_exceptions\" = xyes; then\n    lt_prog_compiler_no_builtin_flag=\"$lt_prog_compiler_no_builtin_flag -fno-rtti -fno-exceptions\"\nelse\n    :\nfi\n\nfi\n\n\n\n\n\n\n  lt_prog_compiler_wl=\nlt_prog_compiler_pic=\nlt_prog_compiler_static=\n\n\n  if test \"$GCC\" = yes; then\n    lt_prog_compiler_wl='-Wl,'\n    lt_prog_compiler_static='-static'\n\n    case $host_os in\n      aix*)\n      # All AIX code is PIC.\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\tlt_prog_compiler_static='-Bstatic'\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            lt_prog_compiler_pic='-fPIC'\n        ;;\n      m68k)\n            # FIXME: we need at least 68020 code to build shared libraries, but\n            # adding the `-m68020' flag to GCC prevents building anything better,\n            # like `-m68040'.\n            lt_prog_compiler_pic='-m68020 -resident32 -malways-restore-a4'\n        ;;\n      esac\n      ;;\n\n    beos* | irix5* | irix6* | nonstopux* | osf3* | osf4* | osf5*)\n      # PIC is the default for these OSes.\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      # Although the cygwin gcc ignores -fPIC, still need this for old-style\n      # (--disable-auto-import) libraries\n      lt_prog_compiler_pic='-DDLL_EXPORT'\n      ;;\n\n    darwin* | rhapsody*)\n      # PIC is the default on this platform\n      # Common symbols not allowed in MH_DYLIB files\n      lt_prog_compiler_pic='-fno-common'\n      ;;\n\n    haiku*)\n      # PIC is the default for Haiku.\n      # The \"-static\" flag exists, but is broken.\n      lt_prog_compiler_static=\n      ;;\n\n    hpux*)\n      # PIC is the default for 64-bit PA HP-UX, but not for 32-bit\n      # PA HP-UX.  On IA64 HP-UX, PIC is the default but the pic flag\n      # sets the default TLS model and affects inlining.\n      case $host_cpu in\n      hppa*64*)\n\t# +Z the default\n\t;;\n      *)\n\tlt_prog_compiler_pic='-fPIC'\n\t;;\n      esac\n      ;;\n\n    interix[3-9]*)\n      # Interix 3.x gcc -fpic/-fPIC options generate broken code.\n      # Instead, we relocate shared libraries at runtime.\n      ;;\n\n    msdosdjgpp*)\n      # Just because we use GCC doesn't mean we suddenly get shared libraries\n      # on systems that don't support them.\n      lt_prog_compiler_can_build_shared=no\n      enable_shared=no\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      lt_prog_compiler_pic='-fPIC -shared'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\tlt_prog_compiler_pic=-Kconform_pic\n      fi\n      ;;\n\n    *)\n      lt_prog_compiler_pic='-fPIC'\n      ;;\n    esac\n\n    case $cc_basename in\n    nvcc*) # Cuda Compiler Driver 2.2\n      lt_prog_compiler_wl='-Xlinker '\n      if test -n \"$lt_prog_compiler_pic\"; then\n        lt_prog_compiler_pic=\"-Xcompiler $lt_prog_compiler_pic\"\n      fi\n      ;;\n    esac\n  else\n    # PORTME Check for flag to pass linker flags through the system compiler.\n    case $host_os in\n    aix*)\n      lt_prog_compiler_wl='-Wl,'\n      if test \"$host_cpu\" = ia64; then\n\t# AIX 5 now supports IA64 processor\n\tlt_prog_compiler_static='-Bstatic'\n      else\n\tlt_prog_compiler_static='-bnso -bI:/lib/syscalls.exp'\n      fi\n      ;;\n\n    mingw* | cygwin* | pw32* | os2* | cegcc*)\n      # This hack is so that the source file can tell whether it is being\n      # built for inclusion in a dll (and should export symbols for example).\n      lt_prog_compiler_pic='-DDLL_EXPORT'\n      ;;\n\n    hpux9* | hpux10* | hpux11*)\n      lt_prog_compiler_wl='-Wl,'\n      # PIC is the default for IA64 HP-UX and 64-bit HP-UX, but\n      # not for PA HP-UX.\n      case $host_cpu in\n      hppa*64*|ia64*)\n\t# +Z the default\n\t;;\n      *)\n\tlt_prog_compiler_pic='+Z'\n\t;;\n      esac\n      # Is there a better lt_prog_compiler_static that works with the bundled CC?\n      lt_prog_compiler_static='${wl}-a ${wl}archive'\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      lt_prog_compiler_wl='-Wl,'\n      # PIC (with -KPIC) is the default.\n      lt_prog_compiler_static='-non_shared'\n      ;;\n\n    linux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n      case $cc_basename in\n      # old Intel for x86_64 which still supported -KPIC.\n      ecc*)\n\tlt_prog_compiler_wl='-Wl,'\n\tlt_prog_compiler_pic='-KPIC'\n\tlt_prog_compiler_static='-static'\n        ;;\n      # icc used to be incompatible with GCC.\n      # ICC 10 doesn't accept -KPIC any more.\n      icc* | ifort*)\n\tlt_prog_compiler_wl='-Wl,'\n\tlt_prog_compiler_pic='-fPIC'\n\tlt_prog_compiler_static='-static'\n        ;;\n      # Lahey Fortran 8.1.\n      lf95*)\n\tlt_prog_compiler_wl='-Wl,'\n\tlt_prog_compiler_pic='--shared'\n\tlt_prog_compiler_static='--static'\n\t;;\n      nagfor*)\n\t# NAG Fortran compiler\n\tlt_prog_compiler_wl='-Wl,-Wl,,'\n\tlt_prog_compiler_pic='-PIC'\n\tlt_prog_compiler_static='-Bstatic'\n\t;;\n      pgcc* | pgf77* | pgf90* | pgf95* | pgfortran*)\n        # Portland Group compilers (*not* the Pentium gcc compiler,\n\t# which looks to be a dead project)\n\tlt_prog_compiler_wl='-Wl,'\n\tlt_prog_compiler_pic='-fpic'\n\tlt_prog_compiler_static='-Bstatic'\n        ;;\n      ccc*)\n        lt_prog_compiler_wl='-Wl,'\n        # All Alpha code is PIC.\n        lt_prog_compiler_static='-non_shared'\n        ;;\n      xl* | bgxl* | bgf* | mpixl*)\n\t# IBM XL C 8.0/Fortran 10.1, 11.1 on PPC and BlueGene\n\tlt_prog_compiler_wl='-Wl,'\n\tlt_prog_compiler_pic='-qpic'\n\tlt_prog_compiler_static='-qstaticlink'\n\t;;\n      *)\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ Ceres\\ Fortran* | *Sun*Fortran*\\ [1-7].* | *Sun*Fortran*\\ 8.[0-3]*)\n\t  # Sun Fortran 8.3 passes all unrecognized flags to the linker\n\t  lt_prog_compiler_pic='-KPIC'\n\t  lt_prog_compiler_static='-Bstatic'\n\t  lt_prog_compiler_wl=''\n\t  ;;\n\t*Sun\\ F* | *Sun*Fortran*)\n\t  lt_prog_compiler_pic='-KPIC'\n\t  lt_prog_compiler_static='-Bstatic'\n\t  lt_prog_compiler_wl='-Qoption ld '\n\t  ;;\n\t*Sun\\ C*)\n\t  # Sun C 5.9\n\t  lt_prog_compiler_pic='-KPIC'\n\t  lt_prog_compiler_static='-Bstatic'\n\t  lt_prog_compiler_wl='-Wl,'\n\t  ;;\n        *Intel*\\ [CF]*Compiler*)\n\t  lt_prog_compiler_wl='-Wl,'\n\t  lt_prog_compiler_pic='-fPIC'\n\t  lt_prog_compiler_static='-static'\n\t  ;;\n\t*Portland\\ Group*)\n\t  lt_prog_compiler_wl='-Wl,'\n\t  lt_prog_compiler_pic='-fpic'\n\t  lt_prog_compiler_static='-Bstatic'\n\t  ;;\n\tesac\n\t;;\n      esac\n      ;;\n\n    newsos6)\n      lt_prog_compiler_pic='-KPIC'\n      lt_prog_compiler_static='-Bstatic'\n      ;;\n\n    *nto* | *qnx*)\n      # QNX uses GNU C++, but need to define -shared option too, otherwise\n      # it will coredump.\n      lt_prog_compiler_pic='-fPIC -shared'\n      ;;\n\n    osf3* | osf4* | osf5*)\n      lt_prog_compiler_wl='-Wl,'\n      # All OSF/1 code is PIC.\n      lt_prog_compiler_static='-non_shared'\n      ;;\n\n    rdos*)\n      lt_prog_compiler_static='-non_shared'\n      ;;\n\n    solaris*)\n      lt_prog_compiler_pic='-KPIC'\n      lt_prog_compiler_static='-Bstatic'\n      case $cc_basename in\n      f77* | f90* | f95* | sunf77* | sunf90* | sunf95*)\n\tlt_prog_compiler_wl='-Qoption ld ';;\n      *)\n\tlt_prog_compiler_wl='-Wl,';;\n      esac\n      ;;\n\n    sunos4*)\n      lt_prog_compiler_wl='-Qoption ld '\n      lt_prog_compiler_pic='-PIC'\n      lt_prog_compiler_static='-Bstatic'\n      ;;\n\n    sysv4 | sysv4.2uw2* | sysv4.3*)\n      lt_prog_compiler_wl='-Wl,'\n      lt_prog_compiler_pic='-KPIC'\n      lt_prog_compiler_static='-Bstatic'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec ;then\n\tlt_prog_compiler_pic='-Kconform_pic'\n\tlt_prog_compiler_static='-Bstatic'\n      fi\n      ;;\n\n    sysv5* | unixware* | sco3.2v5* | sco5v6* | OpenUNIX*)\n      lt_prog_compiler_wl='-Wl,'\n      lt_prog_compiler_pic='-KPIC'\n      lt_prog_compiler_static='-Bstatic'\n      ;;\n\n    unicos*)\n      lt_prog_compiler_wl='-Wl,'\n      lt_prog_compiler_can_build_shared=no\n      ;;\n\n    uts4*)\n      lt_prog_compiler_pic='-pic'\n      lt_prog_compiler_static='-Bstatic'\n      ;;\n\n    *)\n      lt_prog_compiler_can_build_shared=no\n      ;;\n    esac\n  fi\n\ncase $host_os in\n  # For platforms which do not support PIC, -DPIC is meaningless:\n  *djgpp*)\n    lt_prog_compiler_pic=\n    ;;\n  *)\n    lt_prog_compiler_pic=\"$lt_prog_compiler_pic -DPIC\"\n    ;;\nesac\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for $compiler option to produce PIC\" >&5\n$as_echo_n \"checking for $compiler option to produce PIC... \" >&6; }\nif ${lt_cv_prog_compiler_pic+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_pic=$lt_prog_compiler_pic\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_pic\" >&5\n$as_echo \"$lt_cv_prog_compiler_pic\" >&6; }\nlt_prog_compiler_pic=$lt_cv_prog_compiler_pic\n\n#\n# Check to make sure the PIC flag actually works.\n#\nif test -n \"$lt_prog_compiler_pic\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $compiler PIC flag $lt_prog_compiler_pic works\" >&5\n$as_echo_n \"checking if $compiler PIC flag $lt_prog_compiler_pic works... \" >&6; }\nif ${lt_cv_prog_compiler_pic_works+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_pic_works=no\n   ac_outfile=conftest.$ac_objext\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n   lt_compiler_flag=\"$lt_prog_compiler_pic -DPIC\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   # The option is referenced via a variable to avoid confusing sed.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&5)\n   (eval \"$lt_compile\" 2>conftest.err)\n   ac_status=$?\n   cat conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   if (exit $ac_status) && test -s \"$ac_outfile\"; then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings other than the usual output.\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' >conftest.exp\n     $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n     if test ! -s conftest.er2 || diff conftest.exp conftest.er2 >/dev/null; then\n       lt_cv_prog_compiler_pic_works=yes\n     fi\n   fi\n   $RM conftest*\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_pic_works\" >&5\n$as_echo \"$lt_cv_prog_compiler_pic_works\" >&6; }\n\nif test x\"$lt_cv_prog_compiler_pic_works\" = xyes; then\n    case $lt_prog_compiler_pic in\n     \"\" | \" \"*) ;;\n     *) lt_prog_compiler_pic=\" $lt_prog_compiler_pic\" ;;\n     esac\nelse\n    lt_prog_compiler_pic=\n     lt_prog_compiler_can_build_shared=no\nfi\n\nfi\n\n\n\n\n\n\n\n\n\n\n\n#\n# Check to make sure the static flag actually works.\n#\nwl=$lt_prog_compiler_wl eval lt_tmp_static_flag=\\\"$lt_prog_compiler_static\\\"\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $compiler static flag $lt_tmp_static_flag works\" >&5\n$as_echo_n \"checking if $compiler static flag $lt_tmp_static_flag works... \" >&6; }\nif ${lt_cv_prog_compiler_static_works+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_static_works=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS $lt_tmp_static_flag\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&5\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         lt_cv_prog_compiler_static_works=yes\n       fi\n     else\n       lt_cv_prog_compiler_static_works=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_static_works\" >&5\n$as_echo \"$lt_cv_prog_compiler_static_works\" >&6; }\n\nif test x\"$lt_cv_prog_compiler_static_works\" = xyes; then\n    :\nelse\n    lt_prog_compiler_static=\nfi\n\n\n\n\n\n\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext\" >&5\n$as_echo_n \"checking if $compiler supports -c -o file.$ac_objext... \" >&6; }\nif ${lt_cv_prog_compiler_c_o+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_c_o=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&5)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       lt_cv_prog_compiler_c_o=yes\n     fi\n   fi\n   chmod u+w . 2>&5\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o\" >&5\n$as_echo \"$lt_cv_prog_compiler_c_o\" >&6; }\n\n\n\n\n\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $compiler supports -c -o file.$ac_objext\" >&5\n$as_echo_n \"checking if $compiler supports -c -o file.$ac_objext... \" >&6; }\nif ${lt_cv_prog_compiler_c_o+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler_c_o=no\n   $RM -r conftest 2>/dev/null\n   mkdir conftest\n   cd conftest\n   mkdir out\n   echo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n   lt_compiler_flag=\"-o out/conftest2.$ac_objext\"\n   # Insert the option either (1) after the last *FLAGS variable, or\n   # (2) before a word containing \"conftest.\", or (3) at the end.\n   # Note that $ac_compile itself does not contain backslashes and begins\n   # with a dollar sign (not a hyphen), so the echo should work correctly.\n   lt_compile=`echo \"$ac_compile\" | $SED \\\n   -e 's:.*FLAGS}\\{0,1\\} :&$lt_compiler_flag :; t' \\\n   -e 's: [^ ]*conftest\\.: $lt_compiler_flag&:; t' \\\n   -e 's:$: $lt_compiler_flag:'`\n   (eval echo \"\\\"\\$as_me:$LINENO: $lt_compile\\\"\" >&5)\n   (eval \"$lt_compile\" 2>out/conftest.err)\n   ac_status=$?\n   cat out/conftest.err >&5\n   echo \"$as_me:$LINENO: \\$? = $ac_status\" >&5\n   if (exit $ac_status) && test -s out/conftest2.$ac_objext\n   then\n     # The compiler can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     $ECHO \"$_lt_compiler_boilerplate\" | $SED '/^$/d' > out/conftest.exp\n     $SED '/^$/d; /^ *+/d' out/conftest.err >out/conftest.er2\n     if test ! -s out/conftest.er2 || diff out/conftest.exp out/conftest.er2 >/dev/null; then\n       lt_cv_prog_compiler_c_o=yes\n     fi\n   fi\n   chmod u+w . 2>&5\n   $RM conftest*\n   # SGI C++ compiler will create directory out/ii_files/ for\n   # template instantiation\n   test -d out/ii_files && $RM out/ii_files/* && rmdir out/ii_files\n   $RM out/* && rmdir out\n   cd ..\n   $RM -r conftest\n   $RM conftest*\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler_c_o\" >&5\n$as_echo \"$lt_cv_prog_compiler_c_o\" >&6; }\n\n\n\n\nhard_links=\"nottested\"\nif test \"$lt_cv_prog_compiler_c_o\" = no && test \"$need_locks\" != no; then\n  # do not overwrite the value of need_locks provided by the user\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if we can lock with hard links\" >&5\n$as_echo_n \"checking if we can lock with hard links... \" >&6; }\n  hard_links=yes\n  $RM conftest*\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  touch conftest.a\n  ln conftest.a conftest.b 2>&5 || hard_links=no\n  ln conftest.a conftest.b 2>/dev/null && hard_links=no\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $hard_links\" >&5\n$as_echo \"$hard_links\" >&6; }\n  if test \"$hard_links\" = no; then\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: \\`$CC' does not support \\`-c -o', so \\`make -j' may be unsafe\" >&5\n$as_echo \"$as_me: WARNING: \\`$CC' does not support \\`-c -o', so \\`make -j' may be unsafe\" >&2;}\n    need_locks=warn\n  fi\nelse\n  need_locks=no\nfi\n\n\n\n\n\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the $compiler linker ($LD) supports shared libraries\" >&5\n$as_echo_n \"checking whether the $compiler linker ($LD) supports shared libraries... \" >&6; }\n\n  runpath_var=\n  allow_undefined_flag=\n  always_export_symbols=no\n  archive_cmds=\n  archive_expsym_cmds=\n  compiler_needs_object=no\n  enable_shared_with_static_runtimes=no\n  export_dynamic_flag_spec=\n  export_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED '\\''s/.* //'\\'' | sort | uniq > $export_symbols'\n  hardcode_automatic=no\n  hardcode_direct=no\n  hardcode_direct_absolute=no\n  hardcode_libdir_flag_spec=\n  hardcode_libdir_separator=\n  hardcode_minus_L=no\n  hardcode_shlibpath_var=unsupported\n  inherit_rpath=no\n  link_all_deplibs=unknown\n  module_cmds=\n  module_expsym_cmds=\n  old_archive_from_new_cmds=\n  old_archive_from_expsyms_cmds=\n  thread_safe_flag_spec=\n  whole_archive_flag_spec=\n  # include_expsyms should be a list of space-separated symbols to be *always*\n  # included in the symbol list\n  include_expsyms=\n  # exclude_expsyms can be an extended regexp of symbols to exclude\n  # it will be wrapped by ` (' and `)$', so one must not match beginning or\n  # end of line.  Example: `a|bc|.*d.*' will exclude the symbols `a' and `bc',\n  # as well as any symbol that contains `d'.\n  exclude_expsyms='_GLOBAL_OFFSET_TABLE_|_GLOBAL__F[ID]_.*'\n  # Although _GLOBAL_OFFSET_TABLE_ is a valid symbol C name, most a.out\n  # platforms (ab)use it in PIC code, but their linkers get confused if\n  # the symbol is explicitly referenced.  Since portable code cannot\n  # rely on this symbol name, it's probably fine to never include it in\n  # preloaded symbol tables.\n  # Exclude shared library initialization/finalization symbols.\n  extract_expsyms_cmds=\n\n  case $host_os in\n  cygwin* | mingw* | pw32* | cegcc*)\n    # FIXME: the MSVC++ port hasn't been tested in a loooong time\n    # When not using gcc, we currently assume that we are using\n    # Microsoft Visual C++.\n    if test \"$GCC\" != yes; then\n      with_gnu_ld=no\n    fi\n    ;;\n  interix*)\n    # we just hope/assume this is gcc and not c89 (= MSVC++)\n    with_gnu_ld=yes\n    ;;\n  openbsd*)\n    with_gnu_ld=no\n    ;;\n  linux* | k*bsd*-gnu | gnu*)\n    link_all_deplibs=no\n    ;;\n  esac\n\n  ld_shlibs=yes\n\n  # On some targets, GNU ld is compatible enough with the native linker\n  # that we're better off using the native interface for both.\n  lt_use_gnu_ld_interface=no\n  if test \"$with_gnu_ld\" = yes; then\n    case $host_os in\n      aix*)\n\t# The AIX port of GNU ld has always aspired to compatibility\n\t# with the native linker.  However, as the warning in the GNU ld\n\t# block says, versions before 2.19.5* couldn't really create working\n\t# shared libraries, regardless of the interface used.\n\tcase `$LD -v 2>&1` in\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.19.5*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ 2.[2-9]*) ;;\n\t  *\\ \\(GNU\\ Binutils\\)\\ [3-9]*) ;;\n\t  *)\n\t    lt_use_gnu_ld_interface=yes\n\t    ;;\n\tesac\n\t;;\n      *)\n\tlt_use_gnu_ld_interface=yes\n\t;;\n    esac\n  fi\n\n  if test \"$lt_use_gnu_ld_interface\" = yes; then\n    # If archive_cmds runs LD, not CC, wlarc should be empty\n    wlarc='${wl}'\n\n    # Set some defaults for GNU ld with shared library support. These\n    # are reset later if shared libraries are not supported. Putting them\n    # here allows them to be overridden if necessary.\n    runpath_var=LD_RUN_PATH\n    hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n    export_dynamic_flag_spec='${wl}--export-dynamic'\n    # ancient GNU ld didn't support --whole-archive et. al.\n    if $LD --help 2>&1 | $GREP 'no-whole-archive' > /dev/null; then\n      whole_archive_flag_spec=\"$wlarc\"'--whole-archive$convenience '\"$wlarc\"'--no-whole-archive'\n    else\n      whole_archive_flag_spec=\n    fi\n    supports_anon_versioning=no\n    case `$LD -v 2>&1` in\n      *GNU\\ gold*) supports_anon_versioning=yes ;;\n      *\\ [01].* | *\\ 2.[0-9].* | *\\ 2.10.*) ;; # catch versions < 2.11\n      *\\ 2.11.93.0.2\\ *) supports_anon_versioning=yes ;; # RH7.3 ...\n      *\\ 2.11.92.0.12\\ *) supports_anon_versioning=yes ;; # Mandrake 8.2 ...\n      *\\ 2.11.*) ;; # other 2.11 versions\n      *) supports_anon_versioning=yes ;;\n    esac\n\n    # See if GNU ld supports shared libraries.\n    case $host_os in\n    aix[3-9]*)\n      # On AIX/PPC, the GNU linker is very broken\n      if test \"$host_cpu\" != ia64; then\n\tld_shlibs=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: the GNU linker, at least up to release 2.19, is reported\n*** to be unable to reliably create shared libraries on AIX.\n*** Therefore, libtool is disabling shared libraries support.  If you\n*** really care for shared libraries, you may want to install binutils\n*** 2.20 or above, or modify your PATH so that a non-GNU linker is found.\n*** You will then need to restart the configuration process.\n\n_LT_EOF\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            archive_expsym_cmds=''\n        ;;\n      m68k)\n            archive_cmds='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            hardcode_libdir_flag_spec='-L$libdir'\n            hardcode_minus_L=yes\n        ;;\n      esac\n      ;;\n\n    beos*)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\tallow_undefined_flag=unsupported\n\t# Joseph Beckenbach <jrb3@best.com> says some releases of gcc\n\t# support --undefined.  This deserves some investigation.  FIXME\n\tarchive_cmds='$CC -nostart $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      else\n\tld_shlibs=no\n      fi\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # _LT_TAGVAR(hardcode_libdir_flag_spec, ) is actually meaningless,\n      # as there is no search path for DLLs.\n      hardcode_libdir_flag_spec='-L$libdir'\n      export_dynamic_flag_spec='${wl}--export-all-symbols'\n      allow_undefined_flag=unsupported\n      always_export_symbols=no\n      enable_shared_with_static_runtimes=yes\n      export_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[BCDGRS][ ]/s/.*[ ]\\([^ ]*\\)/\\1 DATA/;s/^.*[ ]__nm__\\([^ ]*\\)[ ][^ ]*/\\1 DATA/;/^I[ ]/d;/^[AITW][ ]/s/.* //'\\'' | sort | uniq > $export_symbols'\n      exclude_expsyms='[_]+GLOBAL_OFFSET_TABLE_|[_]+GLOBAL__[FID]_.*|[_]+head_[A-Za-z0-9_]+_dll|[A-Za-z0-9_]+_dll_iname'\n\n      if $LD --help 2>&1 | $GREP 'auto-import' > /dev/null; then\n        archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n\t# If the export-symbols file already is a .def file (1st line\n\t# is EXPORTS), use it as is; otherwise, prepend...\n\tarchive_expsym_cmds='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t  cp $export_symbols $output_objdir/$soname.def;\n\telse\n\t  echo EXPORTS > $output_objdir/$soname.def;\n\t  cat $export_symbols >> $output_objdir/$soname.def;\n\tfi~\n\t$CC -shared $output_objdir/$soname.def $libobjs $deplibs $compiler_flags -o $output_objdir/$soname ${wl}--enable-auto-image-base -Xlinker --out-implib -Xlinker $lib'\n      else\n\tld_shlibs=no\n      fi\n      ;;\n\n    haiku*)\n      archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n      link_all_deplibs=yes\n      ;;\n\n    interix[3-9]*)\n      hardcode_direct=no\n      hardcode_shlibpath_var=no\n      hardcode_libdir_flag_spec='${wl}-rpath,$libdir'\n      export_dynamic_flag_spec='${wl}-E'\n      # Hack: On Interix 3.x, we cannot compile PIC because of a broken gcc.\n      # Instead, shared libraries are loaded at an image base (0x10000000 by\n      # default) and relocated if they conflict, which is a slow very memory\n      # consuming and fragmenting process.  To avoid this, we pick a random,\n      # 256 KiB-aligned image base between 0x50000000 and 0x6FFC0000 at link\n      # time.  Moving up from 0x10000000 also allows more sbrk(2) space.\n      archive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      archive_expsym_cmds='sed \"s,^,_,\" $export_symbols >$output_objdir/$soname.expsym~$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-h,$soname ${wl}--retain-symbols-file,$output_objdir/$soname.expsym ${wl}--image-base,`expr ${RANDOM-$$} % 4096 / 2 \\* 262144 + 1342177280` -o $lib'\n      ;;\n\n    gnu* | linux* | tpf* | k*bsd*-gnu | kopensolaris*-gnu)\n      tmp_diet=no\n      if test \"$host_os\" = linux-dietlibc; then\n\tcase $cc_basename in\n\t  diet\\ *) tmp_diet=yes;;\t# linux-dietlibc with static linking (!diet-dyn)\n\tesac\n      fi\n      if $LD --help 2>&1 | $EGREP ': supported targets:.* elf' > /dev/null \\\n\t && test \"$tmp_diet\" = no\n      then\n\ttmp_addflag=' $pic_flag'\n\ttmp_sharedflag='-shared'\n\tcase $cc_basename,$host_cpu in\n        pgcc*)\t\t\t\t# Portland Group C compiler\n\t  whole_archive_flag_spec='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag'\n\t  ;;\n\tpgf77* | pgf90* | pgf95* | pgfortran*)\n\t\t\t\t\t# Portland Group f77 and f90 compilers\n\t  whole_archive_flag_spec='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  tmp_addflag=' $pic_flag -Mnomain' ;;\n\tecc*,ia64* | icc*,ia64*)\t# Intel C compiler on ia64\n\t  tmp_addflag=' -i_dynamic' ;;\n\tefc*,ia64* | ifort*,ia64*)\t# Intel Fortran compiler on ia64\n\t  tmp_addflag=' -i_dynamic -nofor_main' ;;\n\tifc* | ifort*)\t\t\t# Intel Fortran compiler\n\t  tmp_addflag=' -nofor_main' ;;\n\tlf95*)\t\t\t\t# Lahey Fortran 8.1\n\t  whole_archive_flag_spec=\n\t  tmp_sharedflag='--shared' ;;\n\txl[cC]* | bgxl[cC]* | mpixl[cC]*) # IBM XL C 8.0 on PPC (deal with xlf below)\n\t  tmp_sharedflag='-qmkshrobj'\n\t  tmp_addflag= ;;\n\tnvcc*)\t# Cuda Compiler Driver 2.2\n\t  whole_archive_flag_spec='${wl}--whole-archive`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  compiler_needs_object=yes\n\t  ;;\n\tesac\n\tcase `$CC -V 2>&1 | sed 5q` in\n\t*Sun\\ C*)\t\t\t# Sun C 5.9\n\t  whole_archive_flag_spec='${wl}--whole-archive`new_convenience=; for conv in $convenience\\\"\\\"; do test -z \\\"$conv\\\" || new_convenience=\\\"$new_convenience,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"` ${wl}--no-whole-archive'\n\t  compiler_needs_object=yes\n\t  tmp_sharedflag='-G' ;;\n\t*Sun\\ F*)\t\t\t# Sun Fortran 8.3\n\t  tmp_sharedflag='-G' ;;\n\tesac\n\tarchive_cmds='$CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\n        if test \"x$supports_anon_versioning\" = xyes; then\n          archive_expsym_cmds='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t    cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t    echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t    $CC '\"$tmp_sharedflag\"\"$tmp_addflag\"' $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-version-script ${wl}$output_objdir/$libname.ver -o $lib'\n        fi\n\n\tcase $cc_basename in\n\txlf* | bgf* | bgxlf* | mpixlf*)\n\t  # IBM XL Fortran 10.1 on PPC cannot create shared libs itself\n\t  whole_archive_flag_spec='--whole-archive$convenience --no-whole-archive'\n\t  hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n\t  archive_cmds='$LD -shared $libobjs $deplibs $linker_flags -soname $soname -o $lib'\n\t  if test \"x$supports_anon_versioning\" = xyes; then\n\t    archive_expsym_cmds='echo \"{ global:\" > $output_objdir/$libname.ver~\n\t      cat $export_symbols | sed -e \"s/\\(.*\\)/\\1;/\" >> $output_objdir/$libname.ver~\n\t      echo \"local: *; };\" >> $output_objdir/$libname.ver~\n\t      $LD -shared $libobjs $deplibs $linker_flags -soname $soname -version-script $output_objdir/$libname.ver -o $lib'\n\t  fi\n\t  ;;\n\tesac\n      else\n        ld_shlibs=no\n      fi\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\tarchive_cmds='$LD -Bshareable $libobjs $deplibs $linker_flags -o $lib'\n\twlarc=\n      else\n\tarchive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\tarchive_expsym_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      fi\n      ;;\n\n    solaris*)\n      if $LD -v 2>&1 | $GREP 'BFD 2\\.8' > /dev/null; then\n\tld_shlibs=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: The releases 2.8.* of the GNU linker cannot reliably\n*** create shared libraries on Solaris systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.9.1 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n      elif $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\tarchive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\tarchive_expsym_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\tld_shlibs=no\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX*)\n      case `$LD -v 2>&1` in\n        *\\ [01].* | *\\ 2.[0-9].* | *\\ 2.1[0-5].*)\n\tld_shlibs=no\n\tcat <<_LT_EOF 1>&2\n\n*** Warning: Releases of the GNU linker prior to 2.16.91.0.3 can not\n*** reliably create shared libraries on SCO systems.  Therefore, libtool\n*** is disabling shared libraries support.  We urge you to upgrade GNU\n*** binutils to release 2.16.91.0.3 or newer.  Another option is to modify\n*** your PATH or compiler configuration so that the native linker is\n*** used, and then restart.\n\n_LT_EOF\n\t;;\n\t*)\n\t  # For security reasons, it is highly recommended that you always\n\t  # use absolute paths for naming shared libraries, and exclude the\n\t  # DT_RUNPATH tag from executables and libraries.  But doing so\n\t  # requires that you compile everything twice, which is a pain.\n\t  if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\t    hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n\t    archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\t    archive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n\t  else\n\t    ld_shlibs=no\n\t  fi\n\t;;\n      esac\n      ;;\n\n    sunos4*)\n      archive_cmds='$LD -assert pure-text -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      wlarc=\n      hardcode_direct=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    *)\n      if $LD --help 2>&1 | $GREP ': supported targets:.* elf' > /dev/null; then\n\tarchive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n\tarchive_expsym_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname ${wl}-retain-symbols-file $wl$export_symbols -o $lib'\n      else\n\tld_shlibs=no\n      fi\n      ;;\n    esac\n\n    if test \"$ld_shlibs\" = no; then\n      runpath_var=\n      hardcode_libdir_flag_spec=\n      export_dynamic_flag_spec=\n      whole_archive_flag_spec=\n    fi\n  else\n    # PORTME fill in a description of your system's linker (not GNU ld)\n    case $host_os in\n    aix3*)\n      allow_undefined_flag=unsupported\n      always_export_symbols=yes\n      archive_expsym_cmds='$LD -o $output_objdir/$soname $libobjs $deplibs $linker_flags -bE:$export_symbols -T512 -H512 -bM:SRE~$AR $AR_FLAGS $lib $output_objdir/$soname'\n      # Note: this linker hardcodes the directories in LIBPATH if there\n      # are no directories specified by -L.\n      hardcode_minus_L=yes\n      if test \"$GCC\" = yes && test -z \"$lt_prog_compiler_static\"; then\n\t# Neither direct hardcoding nor static linking is supported with a\n\t# broken collect2.\n\thardcode_direct=unsupported\n      fi\n      ;;\n\n    aix[4-9]*)\n      if test \"$host_cpu\" = ia64; then\n\t# On IA64, the linker does run time linking by default, so we don't\n\t# have to do anything special.\n\taix_use_runtimelinking=no\n\texp_sym_flag='-Bexport'\n\tno_entry_flag=\"\"\n      else\n\t# If we're using GNU nm, then we don't want the \"-C\" option.\n\t# -C means demangle to AIX nm, but means don't demangle with GNU nm\n\t# Also, AIX nm treats weak defined symbols like other global\n\t# defined symbols, whereas GNU nm marks them as \"W\".\n\tif $NM -V 2>&1 | $GREP 'GNU' > /dev/null; then\n\t  export_symbols_cmds='$NM -Bpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\") || (\\$ 2 == \"W\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\telse\n\t  export_symbols_cmds='$NM -BCpg $libobjs $convenience | awk '\\''{ if (((\\$ 2 == \"T\") || (\\$ 2 == \"D\") || (\\$ 2 == \"B\")) && (substr(\\$ 3,1,1) != \".\")) { print \\$ 3 } }'\\'' | sort -u > $export_symbols'\n\tfi\n\taix_use_runtimelinking=no\n\n\t# Test if we are trying to use run time linking or normal\n\t# AIX style linking. If -brtl is somewhere in LDFLAGS, we\n\t# need to do runtime linking.\n\tcase $host_os in aix4.[23]|aix4.[23].*|aix[5-9]*)\n\t  for ld_flag in $LDFLAGS; do\n\t  if (test $ld_flag = \"-brtl\" || test $ld_flag = \"-Wl,-brtl\"); then\n\t    aix_use_runtimelinking=yes\n\t    break\n\t  fi\n\t  done\n\t  ;;\n\tesac\n\n\texp_sym_flag='-bexport'\n\tno_entry_flag='-bnoentry'\n      fi\n\n      # When large executables or shared objects are built, AIX ld can\n      # have problems creating the table of contents.  If linking a library\n      # or program results in \"error TOC overflow\" add -mminimal-toc to\n      # CXXFLAGS/CFLAGS for g++/gcc.  In the cases where that is not\n      # enough to fix the problem, add -Wl,-bbigtoc to LDFLAGS.\n\n      archive_cmds=''\n      hardcode_direct=yes\n      hardcode_direct_absolute=yes\n      hardcode_libdir_separator=':'\n      link_all_deplibs=yes\n      file_list_spec='${wl}-f,'\n\n      if test \"$GCC\" = yes; then\n\tcase $host_os in aix4.[012]|aix4.[012].*)\n\t# We only want to do this on AIX 4.2 and lower, the check\n\t# below for broken collect2 doesn't work under 4.3+\n\t  collect2name=`${CC} -print-prog-name=collect2`\n\t  if test -f \"$collect2name\" &&\n\t   strings \"$collect2name\" | $GREP resolve_lib_name >/dev/null\n\t  then\n\t  # We have reworked collect2\n\t  :\n\t  else\n\t  # We have old collect2\n\t  hardcode_direct=unsupported\n\t  # It fails to find uninstalled libraries when the uninstalled\n\t  # path is not listed in the libpath.  Setting hardcode_minus_L\n\t  # to unsupported forces relinking\n\t  hardcode_minus_L=yes\n\t  hardcode_libdir_flag_spec='-L$libdir'\n\t  hardcode_libdir_separator=\n\t  fi\n\t  ;;\n\tesac\n\tshared_flag='-shared'\n\tif test \"$aix_use_runtimelinking\" = yes; then\n\t  shared_flag=\"$shared_flag \"'${wl}-G'\n\tfi\n\tlink_all_deplibs=no\n      else\n\t# not using gcc\n\tif test \"$host_cpu\" = ia64; then\n\t# VisualAge C++, Version 5.5 for AIX 5L for IA-64, Beta 3 Release\n\t# chokes on -Wl,-G. The following line is correct:\n\t  shared_flag='-G'\n\telse\n\t  if test \"$aix_use_runtimelinking\" = yes; then\n\t    shared_flag='${wl}-G'\n\t  else\n\t    shared_flag='${wl}-bM:SRE'\n\t  fi\n\tfi\n      fi\n\n      export_dynamic_flag_spec='${wl}-bexpall'\n      # It seems that -bexpall does not export symbols beginning with\n      # underscore (_), so it is better to generate a list of symbols to export.\n      always_export_symbols=yes\n      if test \"$aix_use_runtimelinking\" = yes; then\n\t# Warning - without using the other runtime loading flags (-brtl),\n\t# -berok will link without error, but may produce a broken library.\n\tallow_undefined_flag='-berok'\n        # Determine the default libpath from the value encoded in an\n        # empty executable.\n        if test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  if ${lt_cv_aix_libpath_+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n\n  lt_aix_libpath_sed='\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }'\n  lt_cv_aix_libpath_=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$lt_cv_aix_libpath_\"; then\n    lt_cv_aix_libpath_=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n  if test -z \"$lt_cv_aix_libpath_\"; then\n    lt_cv_aix_libpath_=\"/usr/lib:/lib\"\n  fi\n\nfi\n\n  aix_libpath=$lt_cv_aix_libpath_\nfi\n\n        hardcode_libdir_flag_spec='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n        archive_expsym_cmds='$CC -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags `if test \"x${allow_undefined_flag}\" != \"x\"; then func_echo_all \"${wl}${allow_undefined_flag}\"; else :; fi` '\"\\${wl}$exp_sym_flag:\\$export_symbols $shared_flag\"\n      else\n\tif test \"$host_cpu\" = ia64; then\n\t  hardcode_libdir_flag_spec='${wl}-R $libdir:/usr/lib:/lib'\n\t  allow_undefined_flag=\"-z nodefs\"\n\t  archive_expsym_cmds=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs '\"\\${wl}$no_entry_flag\"' $compiler_flags ${wl}${allow_undefined_flag} '\"\\${wl}$exp_sym_flag:\\$export_symbols\"\n\telse\n\t # Determine the default libpath from the value encoded in an\n\t # empty executable.\n\t if test \"${lt_cv_aix_libpath+set}\" = set; then\n  aix_libpath=$lt_cv_aix_libpath\nelse\n  if ${lt_cv_aix_libpath_+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n\n  lt_aix_libpath_sed='\n      /Import File Strings/,/^$/ {\n\t  /^0/ {\n\t      s/^0  *\\([^ ]*\\) *$/\\1/\n\t      p\n\t  }\n      }'\n  lt_cv_aix_libpath_=`dump -H conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  # Check for a 64-bit object if we didn't find anything.\n  if test -z \"$lt_cv_aix_libpath_\"; then\n    lt_cv_aix_libpath_=`dump -HX64 conftest$ac_exeext 2>/dev/null | $SED -n -e \"$lt_aix_libpath_sed\"`\n  fi\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n  if test -z \"$lt_cv_aix_libpath_\"; then\n    lt_cv_aix_libpath_=\"/usr/lib:/lib\"\n  fi\n\nfi\n\n  aix_libpath=$lt_cv_aix_libpath_\nfi\n\n\t hardcode_libdir_flag_spec='${wl}-blibpath:$libdir:'\"$aix_libpath\"\n\t  # Warning - without using the other run time loading flags,\n\t  # -berok will link without error, but may produce a broken library.\n\t  no_undefined_flag=' ${wl}-bernotok'\n\t  allow_undefined_flag=' ${wl}-berok'\n\t  if test \"$with_gnu_ld\" = yes; then\n\t    # We only use this code for GNU lds that support --whole-archive.\n\t    whole_archive_flag_spec='${wl}--whole-archive$convenience ${wl}--no-whole-archive'\n\t  else\n\t    # Exported symbols can be pulled into shared objects from archives\n\t    whole_archive_flag_spec='$convenience'\n\t  fi\n\t  archive_cmds_need_lc=yes\n\t  # This is similar to how AIX traditionally builds its shared libraries.\n\t  archive_expsym_cmds=\"\\$CC $shared_flag\"' -o $output_objdir/$soname $libobjs $deplibs ${wl}-bnoentry $compiler_flags ${wl}-bE:$export_symbols${allow_undefined_flag}~$AR $AR_FLAGS $output_objdir/$libname$release.a $output_objdir/$soname'\n\tfi\n      fi\n      ;;\n\n    amigaos*)\n      case $host_cpu in\n      powerpc)\n            # see comment about AmigaOS4 .so support\n            archive_cmds='$CC -shared $libobjs $deplibs $compiler_flags ${wl}-soname $wl$soname -o $lib'\n            archive_expsym_cmds=''\n        ;;\n      m68k)\n            archive_cmds='$RM $output_objdir/a2ixlibrary.data~$ECHO \"#define NAME $libname\" > $output_objdir/a2ixlibrary.data~$ECHO \"#define LIBRARY_ID 1\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define VERSION $major\" >> $output_objdir/a2ixlibrary.data~$ECHO \"#define REVISION $revision\" >> $output_objdir/a2ixlibrary.data~$AR $AR_FLAGS $lib $libobjs~$RANLIB $lib~(cd $output_objdir && a2ixlibrary -32)'\n            hardcode_libdir_flag_spec='-L$libdir'\n            hardcode_minus_L=yes\n        ;;\n      esac\n      ;;\n\n    bsdi[45]*)\n      export_dynamic_flag_spec=-rdynamic\n      ;;\n\n    cygwin* | mingw* | pw32* | cegcc*)\n      # When not using gcc, we currently assume that we are using\n      # Microsoft Visual C++.\n      # hardcode_libdir_flag_spec is actually meaningless, as there is\n      # no search path for DLLs.\n      case $cc_basename in\n      cl*)\n\t# Native MSVC\n\thardcode_libdir_flag_spec=' '\n\tallow_undefined_flag=unsupported\n\talways_export_symbols=yes\n\tfile_list_spec='@'\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\tarchive_cmds='$CC -o $output_objdir/$soname $libobjs $compiler_flags $deplibs -Wl,-dll~linknames='\n\tarchive_expsym_cmds='if test \"x`$SED 1q $export_symbols`\" = xEXPORTS; then\n\t    sed -n -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' -e '1\\\\\\!p' < $export_symbols > $output_objdir/$soname.exp;\n\t  else\n\t    sed -e 's/\\\\\\\\\\\\\\(.*\\\\\\\\\\\\\\)/-link\\\\\\ -EXPORT:\\\\\\\\\\\\\\1/' < $export_symbols > $output_objdir/$soname.exp;\n\t  fi~\n\t  $CC -o $tool_output_objdir$soname $libobjs $compiler_flags $deplibs \"@$tool_output_objdir$soname.exp\" -Wl,-DLL,-IMPLIB:\"$tool_output_objdir$libname.dll.lib\"~\n\t  linknames='\n\t# The linker will not automatically build a static lib if we build a DLL.\n\t# _LT_TAGVAR(old_archive_from_new_cmds, )='true'\n\tenable_shared_with_static_runtimes=yes\n\texclude_expsyms='_NULL_IMPORT_DESCRIPTOR|_IMPORT_DESCRIPTOR_.*'\n\texport_symbols_cmds='$NM $libobjs $convenience | $global_symbol_pipe | $SED -e '\\''/^[BCDGRS][ ]/s/.*[ ]\\([^ ]*\\)/\\1,DATA/'\\'' | $SED -e '\\''/^[AITW][ ]/s/.*[ ]//'\\'' | sort | uniq > $export_symbols'\n\t# Don't use ranlib\n\told_postinstall_cmds='chmod 644 $oldlib'\n\tpostlink_cmds='lt_outputfile=\"@OUTPUT@\"~\n\t  lt_tool_outputfile=\"@TOOL_OUTPUT@\"~\n\t  case $lt_outputfile in\n\t    *.exe|*.EXE) ;;\n\t    *)\n\t      lt_outputfile=\"$lt_outputfile.exe\"\n\t      lt_tool_outputfile=\"$lt_tool_outputfile.exe\"\n\t      ;;\n\t  esac~\n\t  if test \"$MANIFEST_TOOL\" != \":\" && test -f \"$lt_outputfile.manifest\"; then\n\t    $MANIFEST_TOOL -manifest \"$lt_tool_outputfile.manifest\" -outputresource:\"$lt_tool_outputfile\" || exit 1;\n\t    $RM \"$lt_outputfile.manifest\";\n\t  fi'\n\t;;\n      *)\n\t# Assume MSVC wrapper\n\thardcode_libdir_flag_spec=' '\n\tallow_undefined_flag=unsupported\n\t# Tell ltmain to make .lib files, not .a files.\n\tlibext=lib\n\t# Tell ltmain to make .dll files, not .so files.\n\tshrext_cmds=\".dll\"\n\t# FIXME: Setting linknames here is a bad hack.\n\tarchive_cmds='$CC -o $lib $libobjs $compiler_flags `func_echo_all \"$deplibs\" | $SED '\\''s/ -lc$//'\\''` -link -dll~linknames='\n\t# The linker will automatically build a .lib file if we build a DLL.\n\told_archive_from_new_cmds='true'\n\t# FIXME: Should let the user specify the lib program.\n\told_archive_cmds='lib -OUT:$oldlib$oldobjs$old_deplibs'\n\tenable_shared_with_static_runtimes=yes\n\t;;\n      esac\n      ;;\n\n    darwin* | rhapsody*)\n\n\n  archive_cmds_need_lc=no\n  hardcode_direct=no\n  hardcode_automatic=yes\n  hardcode_shlibpath_var=unsupported\n  if test \"$lt_cv_ld_force_load\" = \"yes\"; then\n    whole_archive_flag_spec='`for conv in $convenience\\\"\\\"; do test  -n \\\"$conv\\\" && new_convenience=\\\"$new_convenience ${wl}-force_load,$conv\\\"; done; func_echo_all \\\"$new_convenience\\\"`'\n\n  else\n    whole_archive_flag_spec=''\n  fi\n  link_all_deplibs=yes\n  allow_undefined_flag=\"$_lt_dar_allow_undefined\"\n  case $cc_basename in\n     ifort*) _lt_dar_can_shared=yes ;;\n     *) _lt_dar_can_shared=$GCC ;;\n  esac\n  if test \"$_lt_dar_can_shared\" = \"yes\"; then\n    output_verbose_link_cmd=func_echo_all\n    archive_cmds=\"\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring $_lt_dar_single_mod${_lt_dsymutil}\"\n    module_cmds=\"\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dsymutil}\"\n    archive_expsym_cmds=\"sed 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC -dynamiclib \\$allow_undefined_flag -o \\$lib \\$libobjs \\$deplibs \\$compiler_flags -install_name \\$rpath/\\$soname \\$verstring ${_lt_dar_single_mod}${_lt_dar_export_syms}${_lt_dsymutil}\"\n    module_expsym_cmds=\"sed -e 's,^,_,' < \\$export_symbols > \\$output_objdir/\\${libname}-symbols.expsym~\\$CC \\$allow_undefined_flag -o \\$lib -bundle \\$libobjs \\$deplibs \\$compiler_flags${_lt_dar_export_syms}${_lt_dsymutil}\"\n\n  else\n  ld_shlibs=no\n  fi\n\n      ;;\n\n    dgux*)\n      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      hardcode_libdir_flag_spec='-L$libdir'\n      hardcode_shlibpath_var=no\n      ;;\n\n    # FreeBSD 2.2.[012] allows us to include c++rt0.o to get C++ constructor\n    # support.  Future versions do this automatically, but an explicit c++rt0.o\n    # does not break anything, and helps significantly (at the cost of a little\n    # extra space).\n    freebsd2.2*)\n      archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags /usr/lib/c++rt0.o'\n      hardcode_libdir_flag_spec='-R$libdir'\n      hardcode_direct=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    # Unfortunately, older versions of FreeBSD 2 do not have this feature.\n    freebsd2.*)\n      archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n      hardcode_direct=yes\n      hardcode_minus_L=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    # FreeBSD 3 and greater uses gcc -shared to do shared libraries.\n    freebsd* | dragonfly*)\n      archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n      hardcode_libdir_flag_spec='-R$libdir'\n      hardcode_direct=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    hpux9*)\n      if test \"$GCC\" = yes; then\n\tarchive_cmds='$RM $output_objdir/$soname~$CC -shared $pic_flag ${wl}+b ${wl}$install_libdir -o $output_objdir/$soname $libobjs $deplibs $compiler_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      else\n\tarchive_cmds='$RM $output_objdir/$soname~$LD -b +b $install_libdir -o $output_objdir/$soname $libobjs $deplibs $linker_flags~test $output_objdir/$soname = $lib || mv $output_objdir/$soname $lib'\n      fi\n      hardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'\n      hardcode_libdir_separator=:\n      hardcode_direct=yes\n\n      # hardcode_minus_L: Not really in the search PATH,\n      # but as the default location of the library.\n      hardcode_minus_L=yes\n      export_dynamic_flag_spec='${wl}-E'\n      ;;\n\n    hpux10*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tarchive_cmds='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\tarchive_cmds='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\thardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'\n\thardcode_libdir_separator=:\n\thardcode_direct=yes\n\thardcode_direct_absolute=yes\n\texport_dynamic_flag_spec='${wl}-E'\n\t# hardcode_minus_L: Not really in the search PATH,\n\t# but as the default location of the library.\n\thardcode_minus_L=yes\n      fi\n      ;;\n\n    hpux11*)\n      if test \"$GCC\" = yes && test \"$with_gnu_ld\" = no; then\n\tcase $host_cpu in\n\thppa*64*)\n\t  archive_cmds='$CC -shared ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  archive_cmds='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\t  archive_cmds='$CC -shared $pic_flag ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tesac\n      else\n\tcase $host_cpu in\n\thppa*64*)\n\t  archive_cmds='$CC -b ${wl}+h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\tia64*)\n\t  archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+nodefaultrpath -o $lib $libobjs $deplibs $compiler_flags'\n\t  ;;\n\t*)\n\n\t  # Older versions of the 11.00 compiler do not understand -b yet\n\t  # (HP92453-01 A.11.01.20 doesn't, HP92453-01 B.11.X.35175-35176.GP does)\n\t  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if $CC understands -b\" >&5\n$as_echo_n \"checking if $CC understands -b... \" >&6; }\nif ${lt_cv_prog_compiler__b+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_prog_compiler__b=no\n   save_LDFLAGS=\"$LDFLAGS\"\n   LDFLAGS=\"$LDFLAGS -b\"\n   echo \"$lt_simple_link_test_code\" > conftest.$ac_ext\n   if (eval $ac_link 2>conftest.err) && test -s conftest$ac_exeext; then\n     # The linker can only warn and ignore the option if not recognized\n     # So say no if there are warnings\n     if test -s conftest.err; then\n       # Append any errors to the config.log.\n       cat conftest.err 1>&5\n       $ECHO \"$_lt_linker_boilerplate\" | $SED '/^$/d' > conftest.exp\n       $SED '/^$/d; /^ *+/d' conftest.err >conftest.er2\n       if diff conftest.exp conftest.er2 >/dev/null; then\n         lt_cv_prog_compiler__b=yes\n       fi\n     else\n       lt_cv_prog_compiler__b=yes\n     fi\n   fi\n   $RM -r conftest*\n   LDFLAGS=\"$save_LDFLAGS\"\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_prog_compiler__b\" >&5\n$as_echo \"$lt_cv_prog_compiler__b\" >&6; }\n\nif test x\"$lt_cv_prog_compiler__b\" = xyes; then\n    archive_cmds='$CC -b ${wl}+h ${wl}$soname ${wl}+b ${wl}$install_libdir -o $lib $libobjs $deplibs $compiler_flags'\nelse\n    archive_cmds='$LD -b +h $soname +b $install_libdir -o $lib $libobjs $deplibs $linker_flags'\nfi\n\n\t  ;;\n\tesac\n      fi\n      if test \"$with_gnu_ld\" = no; then\n\thardcode_libdir_flag_spec='${wl}+b ${wl}$libdir'\n\thardcode_libdir_separator=:\n\n\tcase $host_cpu in\n\thppa*64*|ia64*)\n\t  hardcode_direct=no\n\t  hardcode_shlibpath_var=no\n\t  ;;\n\t*)\n\t  hardcode_direct=yes\n\t  hardcode_direct_absolute=yes\n\t  export_dynamic_flag_spec='${wl}-E'\n\n\t  # hardcode_minus_L: Not really in the search PATH,\n\t  # but as the default location of the library.\n\t  hardcode_minus_L=yes\n\t  ;;\n\tesac\n      fi\n      ;;\n\n    irix5* | irix6* | nonstopux*)\n      if test \"$GCC\" = yes; then\n\tarchive_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\t# Try to use the -exported_symbol ld option, if it does not\n\t# work, assume that -exports_file does not work either and\n\t# implicitly export all symbols.\n\t# This should be the same for all languages, so no per-tag cache variable.\n\t{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether the $host_os linker accepts -exported_symbol\" >&5\n$as_echo_n \"checking whether the $host_os linker accepts -exported_symbol... \" >&6; }\nif ${lt_cv_irix_exported_symbol+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  save_LDFLAGS=\"$LDFLAGS\"\n\t   LDFLAGS=\"$LDFLAGS -shared ${wl}-exported_symbol ${wl}foo ${wl}-update_registry ${wl}/dev/null\"\n\t   cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\nint foo (void) { return 0; }\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  lt_cv_irix_exported_symbol=yes\nelse\n  lt_cv_irix_exported_symbol=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n           LDFLAGS=\"$save_LDFLAGS\"\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_irix_exported_symbol\" >&5\n$as_echo \"$lt_cv_irix_exported_symbol\" >&6; }\n\tif test \"$lt_cv_irix_exported_symbol\" = yes; then\n          archive_expsym_cmds='$CC -shared $pic_flag $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations ${wl}-exports_file ${wl}$export_symbols -o $lib'\n\tfi\n      else\n\tarchive_cmds='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\tarchive_expsym_cmds='$CC -shared $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -exports_file $export_symbols -o $lib'\n      fi\n      archive_cmds_need_lc='no'\n      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n      hardcode_libdir_separator=:\n      inherit_rpath=yes\n      link_all_deplibs=yes\n      ;;\n\n    netbsd* | netbsdelf*-gnu)\n      if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n\tarchive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'  # a.out\n      else\n\tarchive_cmds='$LD -shared -o $lib $libobjs $deplibs $linker_flags'      # ELF\n      fi\n      hardcode_libdir_flag_spec='-R$libdir'\n      hardcode_direct=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    newsos6)\n      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      hardcode_direct=yes\n      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n      hardcode_libdir_separator=:\n      hardcode_shlibpath_var=no\n      ;;\n\n    *nto* | *qnx*)\n      ;;\n\n    openbsd*)\n      if test -f /usr/libexec/ld.so; then\n\thardcode_direct=yes\n\thardcode_shlibpath_var=no\n\thardcode_direct_absolute=yes\n\tif test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n\t  archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t  archive_expsym_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags ${wl}-retain-symbols-file,$export_symbols'\n\t  hardcode_libdir_flag_spec='${wl}-rpath,$libdir'\n\t  export_dynamic_flag_spec='${wl}-E'\n\telse\n\t  case $host_os in\n\t   openbsd[01].* | openbsd2.[0-7] | openbsd2.[0-7].*)\n\t     archive_cmds='$LD -Bshareable -o $lib $libobjs $deplibs $linker_flags'\n\t     hardcode_libdir_flag_spec='-R$libdir'\n\t     ;;\n\t   *)\n\t     archive_cmds='$CC -shared $pic_flag -o $lib $libobjs $deplibs $compiler_flags'\n\t     hardcode_libdir_flag_spec='${wl}-rpath,$libdir'\n\t     ;;\n\t  esac\n\tfi\n      else\n\tld_shlibs=no\n      fi\n      ;;\n\n    os2*)\n      hardcode_libdir_flag_spec='-L$libdir'\n      hardcode_minus_L=yes\n      allow_undefined_flag=unsupported\n      archive_cmds='$ECHO \"LIBRARY $libname INITINSTANCE\" > $output_objdir/$libname.def~$ECHO \"DESCRIPTION \\\"$libname\\\"\" >> $output_objdir/$libname.def~echo DATA >> $output_objdir/$libname.def~echo \" SINGLE NONSHARED\" >> $output_objdir/$libname.def~echo EXPORTS >> $output_objdir/$libname.def~emxexp $libobjs >> $output_objdir/$libname.def~$CC -Zdll -Zcrtdll -o $lib $libobjs $deplibs $compiler_flags $output_objdir/$libname.def'\n      old_archive_from_new_cmds='emximp -o $output_objdir/$libname.a $output_objdir/$libname.def'\n      ;;\n\n    osf3*)\n      if test \"$GCC\" = yes; then\n\tallow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n\tarchive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n      else\n\tallow_undefined_flag=' -expect_unresolved \\*'\n\tarchive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n      fi\n      archive_cmds_need_lc='no'\n      hardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n      hardcode_libdir_separator=:\n      ;;\n\n    osf4* | osf5*)\t# as osf3* with the addition of -msym flag\n      if test \"$GCC\" = yes; then\n\tallow_undefined_flag=' ${wl}-expect_unresolved ${wl}\\*'\n\tarchive_cmds='$CC -shared${allow_undefined_flag} $pic_flag $libobjs $deplibs $compiler_flags ${wl}-msym ${wl}-soname ${wl}$soname `test -n \"$verstring\" && func_echo_all \"${wl}-set_version ${wl}$verstring\"` ${wl}-update_registry ${wl}${output_objdir}/so_locations -o $lib'\n\thardcode_libdir_flag_spec='${wl}-rpath ${wl}$libdir'\n      else\n\tallow_undefined_flag=' -expect_unresolved \\*'\n\tarchive_cmds='$CC -shared${allow_undefined_flag} $libobjs $deplibs $compiler_flags -msym -soname $soname `test -n \"$verstring\" && func_echo_all \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib'\n\tarchive_expsym_cmds='for i in `cat $export_symbols`; do printf \"%s %s\\\\n\" -exported_symbol \"\\$i\" >> $lib.exp; done; printf \"%s\\\\n\" \"-hidden\">> $lib.exp~\n\t$CC -shared${allow_undefined_flag} ${wl}-input ${wl}$lib.exp $compiler_flags $libobjs $deplibs -soname $soname `test -n \"$verstring\" && $ECHO \"-set_version $verstring\"` -update_registry ${output_objdir}/so_locations -o $lib~$RM $lib.exp'\n\n\t# Both c and cxx compiler support -rpath directly\n\thardcode_libdir_flag_spec='-rpath $libdir'\n      fi\n      archive_cmds_need_lc='no'\n      hardcode_libdir_separator=:\n      ;;\n\n    solaris*)\n      no_undefined_flag=' -z defs'\n      if test \"$GCC\" = yes; then\n\twlarc='${wl}'\n\tarchive_cmds='$CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags'\n\tarchive_expsym_cmds='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -shared $pic_flag ${wl}-z ${wl}text ${wl}-M ${wl}$lib.exp ${wl}-h ${wl}$soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n      else\n\tcase `$CC -V 2>&1` in\n\t*\"Compilers 5.0\"*)\n\t  wlarc=''\n\t  archive_cmds='$LD -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  archive_expsym_cmds='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $LD -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $linker_flags~$RM $lib.exp'\n\t  ;;\n\t*)\n\t  wlarc='${wl}'\n\t  archive_cmds='$CC -G${allow_undefined_flag} -h $soname -o $lib $libobjs $deplibs $compiler_flags'\n\t  archive_expsym_cmds='echo \"{ global:\" > $lib.exp~cat $export_symbols | $SED -e \"s/\\(.*\\)/\\1;/\" >> $lib.exp~echo \"local: *; };\" >> $lib.exp~\n\t  $CC -G${allow_undefined_flag} -M $lib.exp -h $soname -o $lib $libobjs $deplibs $compiler_flags~$RM $lib.exp'\n\t  ;;\n\tesac\n      fi\n      hardcode_libdir_flag_spec='-R$libdir'\n      hardcode_shlibpath_var=no\n      case $host_os in\n      solaris2.[0-5] | solaris2.[0-5].*) ;;\n      *)\n\t# The compiler driver will combine and reorder linker options,\n\t# but understands `-z linker_flag'.  GCC discards it without `$wl',\n\t# but is careful enough not to reorder.\n\t# Supported since Solaris 2.6 (maybe 2.5.1?)\n\tif test \"$GCC\" = yes; then\n\t  whole_archive_flag_spec='${wl}-z ${wl}allextract$convenience ${wl}-z ${wl}defaultextract'\n\telse\n\t  whole_archive_flag_spec='-z allextract$convenience -z defaultextract'\n\tfi\n\t;;\n      esac\n      link_all_deplibs=yes\n      ;;\n\n    sunos4*)\n      if test \"x$host_vendor\" = xsequent; then\n\t# Use $CC to link under sequent, because it throws in some extra .o\n\t# files that make .init and .fini sections work.\n\tarchive_cmds='$CC -G ${wl}-h $soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\tarchive_cmds='$LD -assert pure-text -Bstatic -o $lib $libobjs $deplibs $linker_flags'\n      fi\n      hardcode_libdir_flag_spec='-L$libdir'\n      hardcode_direct=yes\n      hardcode_minus_L=yes\n      hardcode_shlibpath_var=no\n      ;;\n\n    sysv4)\n      case $host_vendor in\n\tsni)\n\t  archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  hardcode_direct=yes # is this really true???\n\t;;\n\tsiemens)\n\t  ## LD is ld it makes a PLAMLIB\n\t  ## CC just makes a GrossModule.\n\t  archive_cmds='$LD -G -o $lib $libobjs $deplibs $linker_flags'\n\t  reload_cmds='$CC -r -o $output$reload_objs'\n\t  hardcode_direct=no\n        ;;\n\tmotorola)\n\t  archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\t  hardcode_direct=no #Motorola manual says yes, but my tests say they lie\n\t;;\n      esac\n      runpath_var='LD_RUN_PATH'\n      hardcode_shlibpath_var=no\n      ;;\n\n    sysv4.3*)\n      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      hardcode_shlibpath_var=no\n      export_dynamic_flag_spec='-Bexport'\n      ;;\n\n    sysv4*MP*)\n      if test -d /usr/nec; then\n\tarchive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n\thardcode_shlibpath_var=no\n\trunpath_var=LD_RUN_PATH\n\thardcode_runpath_var=yes\n\tld_shlibs=yes\n      fi\n      ;;\n\n    sysv4*uw2* | sysv5OpenUNIX* | sysv5UnixWare7.[01].[10]* | unixware7* | sco3.2v5.0.[024]*)\n      no_undefined_flag='${wl}-z,text'\n      archive_cmds_need_lc=no\n      hardcode_shlibpath_var=no\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\tarchive_cmds='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\tarchive_expsym_cmds='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\tarchive_cmds='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\tarchive_expsym_cmds='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    sysv5* | sco3.2v5* | sco5v6*)\n      # Note: We can NOT use -z defs as we might desire, because we do not\n      # link with -lc, and that would cause any symbols used from libc to\n      # always be unresolved, which means just about no library would\n      # ever link correctly.  If we're not using GNU ld we use -z text\n      # though, which does catch some bad symbols but isn't as heavy-handed\n      # as -z defs.\n      no_undefined_flag='${wl}-z,text'\n      allow_undefined_flag='${wl}-z,nodefs'\n      archive_cmds_need_lc=no\n      hardcode_shlibpath_var=no\n      hardcode_libdir_flag_spec='${wl}-R,$libdir'\n      hardcode_libdir_separator=':'\n      link_all_deplibs=yes\n      export_dynamic_flag_spec='${wl}-Bexport'\n      runpath_var='LD_RUN_PATH'\n\n      if test \"$GCC\" = yes; then\n\tarchive_cmds='$CC -shared ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\tarchive_expsym_cmds='$CC -shared ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      else\n\tarchive_cmds='$CC -G ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n\tarchive_expsym_cmds='$CC -G ${wl}-Bexport:$export_symbols ${wl}-h,$soname -o $lib $libobjs $deplibs $compiler_flags'\n      fi\n      ;;\n\n    uts4*)\n      archive_cmds='$LD -G -h $soname -o $lib $libobjs $deplibs $linker_flags'\n      hardcode_libdir_flag_spec='-L$libdir'\n      hardcode_shlibpath_var=no\n      ;;\n\n    *)\n      ld_shlibs=no\n      ;;\n    esac\n\n    if test x$host_vendor = xsni; then\n      case $host in\n      sysv4 | sysv4.2uw2* | sysv4.3* | sysv5*)\n\texport_dynamic_flag_spec='${wl}-Blargedynsym'\n\t;;\n      esac\n    fi\n  fi\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ld_shlibs\" >&5\n$as_echo \"$ld_shlibs\" >&6; }\ntest \"$ld_shlibs\" = no && can_build_shared=no\n\nwith_gnu_ld=$with_gnu_ld\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#\n# Do we need to explicitly link libc?\n#\ncase \"x$archive_cmds_need_lc\" in\nx|xyes)\n  # Assume -lc should be added\n  archive_cmds_need_lc=yes\n\n  if test \"$enable_shared\" = yes && test \"$GCC\" = yes; then\n    case $archive_cmds in\n    *'~'*)\n      # FIXME: we may have to deal with multi-command sequences.\n      ;;\n    '$CC '*)\n      # Test whether the compiler implicitly links with -lc since on some\n      # systems, -lgcc has to come before -lc. If gcc already passes -lc\n      # to ld, don't add -lc before -lgcc.\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether -lc should be explicitly linked in\" >&5\n$as_echo_n \"checking whether -lc should be explicitly linked in... \" >&6; }\nif ${lt_cv_archive_cmds_need_lc+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  $RM conftest*\n\techo \"$lt_simple_compile_test_code\" > conftest.$ac_ext\n\n\tif { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_compile\\\"\"; } >&5\n  (eval $ac_compile) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } 2>conftest.err; then\n\t  soname=conftest\n\t  lib=conftest\n\t  libobjs=conftest.$ac_objext\n\t  deplibs=\n\t  wl=$lt_prog_compiler_wl\n\t  pic_flag=$lt_prog_compiler_pic\n\t  compiler_flags=-v\n\t  linker_flags=-v\n\t  verstring=\n\t  output_objdir=.\n\t  libname=conftest\n\t  lt_save_allow_undefined_flag=$allow_undefined_flag\n\t  allow_undefined_flag=\n\t  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$archive_cmds 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1\\\"\"; } >&5\n  (eval $archive_cmds 2\\>\\&1 \\| $GREP \\\" -lc \\\" \\>/dev/null 2\\>\\&1) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; }\n\t  then\n\t    lt_cv_archive_cmds_need_lc=no\n\t  else\n\t    lt_cv_archive_cmds_need_lc=yes\n\t  fi\n\t  allow_undefined_flag=$lt_save_allow_undefined_flag\n\telse\n\t  cat conftest.err 1>&5\n\tfi\n\t$RM conftest*\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_archive_cmds_need_lc\" >&5\n$as_echo \"$lt_cv_archive_cmds_need_lc\" >&6; }\n      archive_cmds_need_lc=$lt_cv_archive_cmds_need_lc\n      ;;\n    esac\n  fi\n  ;;\nesac\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking dynamic linker characteristics\" >&5\n$as_echo_n \"checking dynamic linker characteristics... \" >&6; }\n\nif test \"$GCC\" = yes; then\n  case $host_os in\n    darwin*) lt_awk_arg=\"/^libraries:/,/LR/\" ;;\n    *) lt_awk_arg=\"/^libraries:/\" ;;\n  esac\n  case $host_os in\n    mingw* | cegcc*) lt_sed_strip_eq=\"s,=\\([A-Za-z]:\\),\\1,g\" ;;\n    *) lt_sed_strip_eq=\"s,=/,/,g\" ;;\n  esac\n  lt_search_path_spec=`$CC -print-search-dirs | awk $lt_awk_arg | $SED -e \"s/^libraries://\" -e $lt_sed_strip_eq`\n  case $lt_search_path_spec in\n  *\\;*)\n    # if the path contains \";\" then we assume it to be the separator\n    # otherwise default to the standard path separator (i.e. \":\") - it is\n    # assumed that no part of a normal pathname contains \";\" but that should\n    # okay in the real world where \";\" in dirpaths is itself problematic.\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED 's/;/ /g'`\n    ;;\n  *)\n    lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $SED \"s/$PATH_SEPARATOR/ /g\"`\n    ;;\n  esac\n  # Ok, now we have the path, separated by spaces, we can step through it\n  # and add multilib dir if necessary.\n  lt_tmp_lt_search_path_spec=\n  lt_multi_os_dir=`$CC $CPPFLAGS $CFLAGS $LDFLAGS -print-multi-os-directory 2>/dev/null`\n  for lt_sys_path in $lt_search_path_spec; do\n    if test -d \"$lt_sys_path/$lt_multi_os_dir\"; then\n      lt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path/$lt_multi_os_dir\"\n    else\n      test -d \"$lt_sys_path\" && \\\n\tlt_tmp_lt_search_path_spec=\"$lt_tmp_lt_search_path_spec $lt_sys_path\"\n    fi\n  done\n  lt_search_path_spec=`$ECHO \"$lt_tmp_lt_search_path_spec\" | awk '\nBEGIN {RS=\" \"; FS=\"/|\\n\";} {\n  lt_foo=\"\";\n  lt_count=0;\n  for (lt_i = NF; lt_i > 0; lt_i--) {\n    if ($lt_i != \"\" && $lt_i != \".\") {\n      if ($lt_i == \"..\") {\n        lt_count++;\n      } else {\n        if (lt_count == 0) {\n          lt_foo=\"/\" $lt_i lt_foo;\n        } else {\n          lt_count--;\n        }\n      }\n    }\n  }\n  if (lt_foo != \"\") { lt_freq[lt_foo]++; }\n  if (lt_freq[lt_foo] == 1) { print lt_foo; }\n}'`\n  # AWK program above erroneously prepends '/' to C:/dos/paths\n  # for these hosts.\n  case $host_os in\n    mingw* | cegcc*) lt_search_path_spec=`$ECHO \"$lt_search_path_spec\" |\\\n      $SED 's,/\\([A-Za-z]:\\),\\1,g'` ;;\n  esac\n  sys_lib_search_path_spec=`$ECHO \"$lt_search_path_spec\" | $lt_NL2SP`\nelse\n  sys_lib_search_path_spec=\"/lib /usr/lib /usr/local/lib\"\nfi\nlibrary_names_spec=\nlibname_spec='lib$name'\nsoname_spec=\nshrext_cmds=\".so\"\npostinstall_cmds=\npostuninstall_cmds=\nfinish_cmds=\nfinish_eval=\nshlibpath_var=\nshlibpath_overrides_runpath=unknown\nversion_type=none\ndynamic_linker=\"$host_os ld.so\"\nsys_lib_dlsearch_path_spec=\"/lib /usr/lib\"\nneed_lib_prefix=unknown\nhardcode_into_libs=no\n\n# when you set need_version to no, make sure it does not cause -set_version\n# flags to be left without arguments\nneed_version=unknown\n\ncase $host_os in\naix3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix $libname.a'\n  shlibpath_var=LIBPATH\n\n  # AIX 3 has no versioning support, so we append a major version to the name.\n  soname_spec='${libname}${release}${shared_ext}$major'\n  ;;\n\naix[4-9]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  hardcode_into_libs=yes\n  if test \"$host_cpu\" = ia64; then\n    # AIX 5 supports IA64\n    library_names_spec='${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext}$versuffix $libname${shared_ext}'\n    shlibpath_var=LD_LIBRARY_PATH\n  else\n    # With GCC up to 2.95.x, collect2 would create an import file\n    # for dependence libraries.  The import file would start with\n    # the line `#! .'.  This would cause the generated library to\n    # depend on `.', always an invalid library.  This was fixed in\n    # development snapshots of GCC prior to 3.0.\n    case $host_os in\n      aix4 | aix4.[01] | aix4.[01].*)\n      if { echo '#if __GNUC__ > 2 || (__GNUC__ == 2 && __GNUC_MINOR__ >= 97)'\n\t   echo ' yes '\n\t   echo '#endif'; } | ${CC} -E - | $GREP yes > /dev/null; then\n\t:\n      else\n\tcan_build_shared=no\n      fi\n      ;;\n    esac\n    # AIX (on Power*) has no versioning support, so currently we can not hardcode correct\n    # soname into executable. Probably we can add versioning support to\n    # collect2, so additional links can be useful in future.\n    if test \"$aix_use_runtimelinking\" = yes; then\n      # If using run time linking (on AIX 4.2 or later) use lib<name>.so\n      # instead of lib<name>.a to let people know that these are not\n      # typical AIX shared libraries.\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    else\n      # We preserve .a as extension for shared libraries through AIX4.2\n      # and later when we are not doing run time linking.\n      library_names_spec='${libname}${release}.a $libname.a'\n      soname_spec='${libname}${release}${shared_ext}$major'\n    fi\n    shlibpath_var=LIBPATH\n  fi\n  ;;\n\namigaos*)\n  case $host_cpu in\n  powerpc)\n    # Since July 2007 AmigaOS4 officially supports .so libraries.\n    # When compiling the executable, add -use-dynld -Lsobjs: to the compileline.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    ;;\n  m68k)\n    library_names_spec='$libname.ixlibrary $libname.a'\n    # Create ${libname}_ixlibrary.a entries in /sys/libs.\n    finish_eval='for lib in `ls $libdir/*.ixlibrary 2>/dev/null`; do libname=`func_echo_all \"$lib\" | $SED '\\''s%^.*/\\([^/]*\\)\\.ixlibrary$%\\1%'\\''`; test $RM /sys/libs/${libname}_ixlibrary.a; $show \"cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a\"; cd /sys/libs && $LN_S $lib ${libname}_ixlibrary.a || exit 1; done'\n    ;;\n  esac\n  ;;\n\nbeos*)\n  library_names_spec='${libname}${shared_ext}'\n  dynamic_linker=\"$host_os ld.so\"\n  shlibpath_var=LIBRARY_PATH\n  ;;\n\nbsdi[45]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/shlib /usr/lib /usr/X11/lib /usr/contrib/lib /lib /usr/local/lib\"\n  sys_lib_dlsearch_path_spec=\"/shlib /usr/lib /usr/local/lib\"\n  # the default ld.so.conf also contains /usr/contrib/lib and\n  # /usr/X11R6/lib (/usr/X11 is a link to /usr/X11R6), but let us allow\n  # libtool to hard-code these into programs\n  ;;\n\ncygwin* | mingw* | pw32* | cegcc*)\n  version_type=windows\n  shrext_cmds=\".dll\"\n  need_version=no\n  need_lib_prefix=no\n\n  case $GCC,$cc_basename in\n  yes,*)\n    # gcc\n    library_names_spec='$libname.dll.a'\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname~\n      chmod a+x \\$dldir/$dlname~\n      if test -n '\\''$stripme'\\'' && test -n '\\''$striplib'\\''; then\n        eval '\\''$striplib \\$dldir/$dlname'\\'' || exit \\$?;\n      fi'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n\n    case $host_os in\n    cygwin*)\n      # Cygwin DLLs use 'cyg' prefix rather than 'lib'\n      soname_spec='`echo ${libname} | sed -e 's/^lib/cyg/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'\n\n      sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/lib/w32api\"\n      ;;\n    mingw* | cegcc*)\n      # MinGW DLLs use traditional 'lib' prefix\n      soname_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    pw32*)\n      # pw32 DLLs use 'pw' prefix rather than 'lib'\n      library_names_spec='`echo ${libname} | sed -e 's/^lib/pw/'``echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'\n      ;;\n    esac\n    dynamic_linker='Win32 ld.exe'\n    ;;\n\n  *,cl*)\n    # Native MSVC\n    libname_spec='$name'\n    soname_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext}'\n    library_names_spec='${libname}.dll.lib'\n\n    case $build_os in\n    mingw*)\n      sys_lib_search_path_spec=\n      lt_save_ifs=$IFS\n      IFS=';'\n      for lt_path in $LIB\n      do\n        IFS=$lt_save_ifs\n        # Let DOS variable expansion print the short 8.3 style file name.\n        lt_path=`cd \"$lt_path\" 2>/dev/null && cmd //C \"for %i in (\".\") do @echo %~si\"`\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec $lt_path\"\n      done\n      IFS=$lt_save_ifs\n      # Convert to MSYS style.\n      sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | sed -e 's|\\\\\\\\|/|g' -e 's| \\\\([a-zA-Z]\\\\):| /\\\\1|g' -e 's|^ ||'`\n      ;;\n    cygwin*)\n      # Convert to unix form, then to dos form, then back to unix form\n      # but this time dos style (no spaces!) so that the unix form looks\n      # like /cygdrive/c/PROGRA~1:/cygdr...\n      sys_lib_search_path_spec=`cygpath --path --unix \"$LIB\"`\n      sys_lib_search_path_spec=`cygpath --path --dos \"$sys_lib_search_path_spec\" 2>/dev/null`\n      sys_lib_search_path_spec=`cygpath --path --unix \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      ;;\n    *)\n      sys_lib_search_path_spec=\"$LIB\"\n      if $ECHO \"$sys_lib_search_path_spec\" | $GREP ';[c-zC-Z]:/' >/dev/null; then\n        # It is most probably a Windows format PATH.\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e 's/;/ /g'`\n      else\n        sys_lib_search_path_spec=`$ECHO \"$sys_lib_search_path_spec\" | $SED -e \"s/$PATH_SEPARATOR/ /g\"`\n      fi\n      # FIXME: find the short name or the path components, as spaces are\n      # common. (e.g. \"Program Files\" -> \"PROGRA~1\")\n      ;;\n    esac\n\n    # DLL is installed to $(libdir)/../bin by postinstall_cmds\n    postinstall_cmds='base_file=`basename \\${file}`~\n      dlpath=`$SHELL 2>&1 -c '\\''. $dir/'\\''\\${base_file}'\\''i; echo \\$dlname'\\''`~\n      dldir=$destdir/`dirname \\$dlpath`~\n      test -d \\$dldir || mkdir -p \\$dldir~\n      $install_prog $dir/$dlname \\$dldir/$dlname'\n    postuninstall_cmds='dldll=`$SHELL 2>&1 -c '\\''. $file; echo \\$dlname'\\''`~\n      dlpath=$dir/\\$dldll~\n       $RM \\$dlpath'\n    shlibpath_overrides_runpath=yes\n    dynamic_linker='Win32 link.exe'\n    ;;\n\n  *)\n    # Assume MSVC wrapper\n    library_names_spec='${libname}`echo ${release} | $SED -e 's/[.]/-/g'`${versuffix}${shared_ext} $libname.lib'\n    dynamic_linker='Win32 ld.exe'\n    ;;\n  esac\n  # FIXME: first we should search . and the directory the executable is in\n  shlibpath_var=PATH\n  ;;\n\ndarwin* | rhapsody*)\n  dynamic_linker=\"$host_os dyld\"\n  version_type=darwin\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${major}$shared_ext ${libname}$shared_ext'\n  soname_spec='${libname}${release}${major}$shared_ext'\n  shlibpath_overrides_runpath=yes\n  shlibpath_var=DYLD_LIBRARY_PATH\n  shrext_cmds='`test .$module = .yes && echo .so || echo .dylib`'\n\n  sys_lib_search_path_spec=\"$sys_lib_search_path_spec /usr/local/lib\"\n  sys_lib_dlsearch_path_spec='/usr/local/lib /lib /usr/lib'\n  ;;\n\ndgux*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname$shared_ext'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\nfreebsd* | dragonfly*)\n  # DragonFly does not have aout.  When/if they implement a new\n  # versioning mechanism, adjust this.\n  if test -x /usr/bin/objformat; then\n    objformat=`/usr/bin/objformat`\n  else\n    case $host_os in\n    freebsd[23].*) objformat=aout ;;\n    *) objformat=elf ;;\n    esac\n  fi\n  version_type=freebsd-$objformat\n  case $version_type in\n    freebsd-elf*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n      need_version=no\n      need_lib_prefix=no\n      ;;\n    freebsd-*)\n      library_names_spec='${libname}${release}${shared_ext}$versuffix $libname${shared_ext}$versuffix'\n      need_version=yes\n      ;;\n  esac\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_os in\n  freebsd2.*)\n    shlibpath_overrides_runpath=yes\n    ;;\n  freebsd3.[01]* | freebsdelf3.[01]*)\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  freebsd3.[2-9]* | freebsdelf3.[2-9]* | \\\n  freebsd4.[0-5] | freebsdelf4.[0-5] | freebsd4.1.1 | freebsdelf4.1.1)\n    shlibpath_overrides_runpath=no\n    hardcode_into_libs=yes\n    ;;\n  *) # from 4.6 on, and DragonFly\n    shlibpath_overrides_runpath=yes\n    hardcode_into_libs=yes\n    ;;\n  esac\n  ;;\n\nhaiku*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  dynamic_linker=\"$host_os runtime_loader\"\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}${major} ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  sys_lib_dlsearch_path_spec='/boot/home/config/lib /boot/common/lib /boot/system/lib'\n  hardcode_into_libs=yes\n  ;;\n\nhpux9* | hpux10* | hpux11*)\n  # Give a soname corresponding to the major version so that dld.sl refuses to\n  # link against other versions.\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  case $host_cpu in\n  ia64*)\n    shrext_cmds='.so'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.so\"\n    shlibpath_var=LD_LIBRARY_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    if test \"X$HPUX_IA64_MODE\" = X32; then\n      sys_lib_search_path_spec=\"/usr/lib/hpux32 /usr/local/lib/hpux32 /usr/local/lib\"\n    else\n      sys_lib_search_path_spec=\"/usr/lib/hpux64 /usr/local/lib/hpux64\"\n    fi\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  hppa*64*)\n    shrext_cmds='.sl'\n    hardcode_into_libs=yes\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=LD_LIBRARY_PATH # How should we handle SHLIB_PATH\n    shlibpath_overrides_runpath=yes # Unless +noenvvar is specified.\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    sys_lib_search_path_spec=\"/usr/lib/pa20_64 /usr/ccs/lib/pa20_64\"\n    sys_lib_dlsearch_path_spec=$sys_lib_search_path_spec\n    ;;\n  *)\n    shrext_cmds='.sl'\n    dynamic_linker=\"$host_os dld.sl\"\n    shlibpath_var=SHLIB_PATH\n    shlibpath_overrides_runpath=no # +s is required to enable SHLIB_PATH\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    ;;\n  esac\n  # HP-UX runs *really* slowly unless shared libraries are mode 555, ...\n  postinstall_cmds='chmod 555 $lib'\n  # or fails outright, so override atomically:\n  install_override_mode=555\n  ;;\n\ninterix[3-9]*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  dynamic_linker='Interix 3.x ld.so.1 (PE, like ELF)'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nirix5* | irix6* | nonstopux*)\n  case $host_os in\n    nonstopux*) version_type=nonstopux ;;\n    *)\n\tif test \"$lt_cv_prog_gnu_ld\" = yes; then\n\t\tversion_type=linux # correct to gnu/linux during the next big refactor\n\telse\n\t\tversion_type=irix\n\tfi ;;\n  esac\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${release}${shared_ext} $libname${shared_ext}'\n  case $host_os in\n  irix5* | nonstopux*)\n    libsuff= shlibsuff=\n    ;;\n  *)\n    case $LD in # libtool.m4 will add one of these switches to LD\n    *-32|*\"-32 \"|*-melf32bsmip|*\"-melf32bsmip \")\n      libsuff= shlibsuff= libmagic=32-bit;;\n    *-n32|*\"-n32 \"|*-melf32bmipn32|*\"-melf32bmipn32 \")\n      libsuff=32 shlibsuff=N32 libmagic=N32;;\n    *-64|*\"-64 \"|*-melf64bmip|*\"-melf64bmip \")\n      libsuff=64 shlibsuff=64 libmagic=64-bit;;\n    *) libsuff= shlibsuff= libmagic=never-match;;\n    esac\n    ;;\n  esac\n  shlibpath_var=LD_LIBRARY${shlibsuff}_PATH\n  shlibpath_overrides_runpath=no\n  sys_lib_search_path_spec=\"/usr/lib${libsuff} /lib${libsuff} /usr/local/lib${libsuff}\"\n  sys_lib_dlsearch_path_spec=\"/usr/lib${libsuff} /lib${libsuff}\"\n  hardcode_into_libs=yes\n  ;;\n\n# No shared lib support for Linux oldld, aout, or coff.\nlinux*oldld* | linux*aout* | linux*coff*)\n  dynamic_linker=no\n  ;;\n\n# This must be glibc/ELF.\nlinux* | k*bsd*-gnu | kopensolaris*-gnu | gnu*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -n $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n\n  # Some binutils ld are patched to set DT_RUNPATH\n  if ${lt_cv_shlibpath_overrides_runpath+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  lt_cv_shlibpath_overrides_runpath=no\n    save_LDFLAGS=$LDFLAGS\n    save_libdir=$libdir\n    eval \"libdir=/foo; wl=\\\"$lt_prog_compiler_wl\\\"; \\\n\t LDFLAGS=\\\"\\$LDFLAGS $hardcode_libdir_flag_spec\\\"\"\n    cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\nint\nmain ()\n{\n\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  if  ($OBJDUMP -p conftest$ac_exeext) 2>/dev/null | grep \"RUNPATH.*$libdir\" >/dev/null; then :\n  lt_cv_shlibpath_overrides_runpath=yes\nfi\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n    LDFLAGS=$save_LDFLAGS\n    libdir=$save_libdir\n\nfi\n\n  shlibpath_overrides_runpath=$lt_cv_shlibpath_overrides_runpath\n\n  # This implies no fast_install, which is unacceptable.\n  # Some rework will be needed to allow for fast_install\n  # before this can be enabled.\n  hardcode_into_libs=yes\n\n  # Append ld.so.conf contents to the search path\n  if test -f /etc/ld.so.conf; then\n    lt_ld_extra=`awk '/^include / { system(sprintf(\"cd /etc; cat %s 2>/dev/null\", \\$2)); skip = 1; } { if (!skip) print \\$0; skip = 0; }' < /etc/ld.so.conf | $SED -e 's/#.*//;/^[\t ]*hwcap[\t ]/d;s/[:,\t]/ /g;s/=[^=]*$//;s/=[^= ]* / /g;s/\"//g;/^$/d' | tr '\\n' ' '`\n    sys_lib_dlsearch_path_spec=\"/lib /usr/lib $lt_ld_extra\"\n  fi\n\n  # We used to test for /lib/ld.so.1 and disable shared libraries on\n  # powerpc, because MkLinux only supported shared libraries with the\n  # GNU dynamic linker.  Since this was broken with cross compilers,\n  # most powerpc-linux boxes support dynamic linking these days and\n  # people can always --disable-shared, the test was removed, and we\n  # assume the GNU/Linux dynamic linker is in use.\n  dynamic_linker='GNU/Linux ld.so'\n  ;;\n\nnetbsdelf*-gnu)\n  version_type=linux\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='NetBSD ld.elf_so'\n  ;;\n\nnetbsd*)\n  version_type=sunos\n  need_lib_prefix=no\n  need_version=no\n  if echo __ELF__ | $CC -E - | $GREP __ELF__ >/dev/null; then\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n    finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n    dynamic_linker='NetBSD (a.out) ld.so'\n  else\n    library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major ${libname}${shared_ext}'\n    soname_spec='${libname}${release}${shared_ext}$major'\n    dynamic_linker='NetBSD ld.elf_so'\n  fi\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  ;;\n\nnewsos6)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  ;;\n\n*nto* | *qnx*)\n  version_type=qnx\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  dynamic_linker='ldqnx.so'\n  ;;\n\nopenbsd*)\n  version_type=sunos\n  sys_lib_dlsearch_path_spec=\"/usr/lib\"\n  need_lib_prefix=no\n  # Some older versions of OpenBSD (3.3 at least) *do* need versioned libs.\n  case $host_os in\n    openbsd3.3 | openbsd3.3.*)\tneed_version=yes ;;\n    *)\t\t\t\tneed_version=no  ;;\n  esac\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/sbin\" ldconfig -m $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  if test -z \"`echo __ELF__ | $CC -E - | $GREP __ELF__`\" || test \"$host_os-$host_cpu\" = \"openbsd2.8-powerpc\"; then\n    case $host_os in\n      openbsd2.[89] | openbsd2.[89].*)\n\tshlibpath_overrides_runpath=no\n\t;;\n      *)\n\tshlibpath_overrides_runpath=yes\n\t;;\n      esac\n  else\n    shlibpath_overrides_runpath=yes\n  fi\n  ;;\n\nos2*)\n  libname_spec='$name'\n  shrext_cmds=\".dll\"\n  need_lib_prefix=no\n  library_names_spec='$libname${shared_ext} $libname.a'\n  dynamic_linker='OS/2 ld.exe'\n  shlibpath_var=LIBPATH\n  ;;\n\nosf3* | osf4* | osf5*)\n  version_type=osf\n  need_lib_prefix=no\n  need_version=no\n  soname_spec='${libname}${release}${shared_ext}$major'\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  sys_lib_search_path_spec=\"/usr/shlib /usr/ccs/lib /usr/lib/cmplrs/cc /usr/lib /usr/local/lib /var/shlib\"\n  sys_lib_dlsearch_path_spec=\"$sys_lib_search_path_spec\"\n  ;;\n\nrdos*)\n  dynamic_linker=no\n  ;;\n\nsolaris*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  # ldd complains unless libraries are executable\n  postinstall_cmds='chmod +x $lib'\n  ;;\n\nsunos4*)\n  version_type=sunos\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${shared_ext}$versuffix'\n  finish_cmds='PATH=\"\\$PATH:/usr/etc\" ldconfig $libdir'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  if test \"$with_gnu_ld\" = yes; then\n    need_lib_prefix=no\n  fi\n  need_version=yes\n  ;;\n\nsysv4 | sysv4.3*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  case $host_vendor in\n    sni)\n      shlibpath_overrides_runpath=no\n      need_lib_prefix=no\n      runpath_var=LD_RUN_PATH\n      ;;\n    siemens)\n      need_lib_prefix=no\n      ;;\n    motorola)\n      need_lib_prefix=no\n      need_version=no\n      shlibpath_overrides_runpath=no\n      sys_lib_search_path_spec='/lib /usr/lib /usr/ccs/lib'\n      ;;\n  esac\n  ;;\n\nsysv4*MP*)\n  if test -d /usr/nec ;then\n    version_type=linux # correct to gnu/linux during the next big refactor\n    library_names_spec='$libname${shared_ext}.$versuffix $libname${shared_ext}.$major $libname${shared_ext}'\n    soname_spec='$libname${shared_ext}.$major'\n    shlibpath_var=LD_LIBRARY_PATH\n  fi\n  ;;\n\nsysv5* | sco3.2v5* | sco5v6* | unixware* | OpenUNIX* | sysv4*uw2*)\n  version_type=freebsd-elf\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext} $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=yes\n  hardcode_into_libs=yes\n  if test \"$with_gnu_ld\" = yes; then\n    sys_lib_search_path_spec='/usr/local/lib /usr/gnu/lib /usr/ccs/lib /usr/lib /lib'\n  else\n    sys_lib_search_path_spec='/usr/ccs/lib /usr/lib'\n    case $host_os in\n      sco3.2v5*)\n        sys_lib_search_path_spec=\"$sys_lib_search_path_spec /lib\"\n\t;;\n    esac\n  fi\n  sys_lib_dlsearch_path_spec='/usr/lib'\n  ;;\n\ntpf*)\n  # TPF is a cross-target only.  Preferred cross-host = GNU/Linux.\n  version_type=linux # correct to gnu/linux during the next big refactor\n  need_lib_prefix=no\n  need_version=no\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  shlibpath_var=LD_LIBRARY_PATH\n  shlibpath_overrides_runpath=no\n  hardcode_into_libs=yes\n  ;;\n\nuts4*)\n  version_type=linux # correct to gnu/linux during the next big refactor\n  library_names_spec='${libname}${release}${shared_ext}$versuffix ${libname}${release}${shared_ext}$major $libname${shared_ext}'\n  soname_spec='${libname}${release}${shared_ext}$major'\n  shlibpath_var=LD_LIBRARY_PATH\n  ;;\n\n*)\n  dynamic_linker=no\n  ;;\nesac\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $dynamic_linker\" >&5\n$as_echo \"$dynamic_linker\" >&6; }\ntest \"$dynamic_linker\" = no && can_build_shared=no\n\nvariables_saved_for_relink=\"PATH $shlibpath_var $runpath_var\"\nif test \"$GCC\" = yes; then\n  variables_saved_for_relink=\"$variables_saved_for_relink GCC_EXEC_PREFIX COMPILER_PATH LIBRARY_PATH\"\nfi\n\nif test \"${lt_cv_sys_lib_search_path_spec+set}\" = set; then\n  sys_lib_search_path_spec=\"$lt_cv_sys_lib_search_path_spec\"\nfi\nif test \"${lt_cv_sys_lib_dlsearch_path_spec+set}\" = set; then\n  sys_lib_dlsearch_path_spec=\"$lt_cv_sys_lib_dlsearch_path_spec\"\nfi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking how to hardcode library paths into programs\" >&5\n$as_echo_n \"checking how to hardcode library paths into programs... \" >&6; }\nhardcode_action=\nif test -n \"$hardcode_libdir_flag_spec\" ||\n   test -n \"$runpath_var\" ||\n   test \"X$hardcode_automatic\" = \"Xyes\" ; then\n\n  # We can hardcode non-existent directories.\n  if test \"$hardcode_direct\" != no &&\n     # If the only mechanism to avoid hardcoding is shlibpath_var, we\n     # have to relink, otherwise we might link with an installed library\n     # when we should be linking with a yet-to-be-installed one\n     ## test \"$_LT_TAGVAR(hardcode_shlibpath_var, )\" != no &&\n     test \"$hardcode_minus_L\" != no; then\n    # Linking always hardcodes the temporary library directory.\n    hardcode_action=relink\n  else\n    # We can link without hardcoding, and we can hardcode nonexisting dirs.\n    hardcode_action=immediate\n  fi\nelse\n  # We cannot hardcode anything, or else we can only hardcode existing\n  # directories.\n  hardcode_action=unsupported\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $hardcode_action\" >&5\n$as_echo \"$hardcode_action\" >&6; }\n\nif test \"$hardcode_action\" = relink ||\n   test \"$inherit_rpath\" = yes; then\n  # Fast installation is not supported\n  enable_fast_install=no\nelif test \"$shlibpath_overrides_runpath\" = yes ||\n     test \"$enable_shared\" = no; then\n  # Fast installation is not necessary\n  enable_fast_install=needless\nfi\n\n\n\n\n\n\n  if test \"x$enable_dlopen\" != xyes; then\n  enable_dlopen=unknown\n  enable_dlopen_self=unknown\n  enable_dlopen_self_static=unknown\nelse\n  lt_cv_dlopen=no\n  lt_cv_dlopen_libs=\n\n  case $host_os in\n  beos*)\n    lt_cv_dlopen=\"load_add_on\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n    ;;\n\n  mingw* | pw32* | cegcc*)\n    lt_cv_dlopen=\"LoadLibrary\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  cygwin*)\n    lt_cv_dlopen=\"dlopen\"\n    lt_cv_dlopen_libs=\n    ;;\n\n  darwin*)\n  # if libdl is installed we need to link against it\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dlopen in -ldl\" >&5\n$as_echo_n \"checking for dlopen in -ldl... \" >&6; }\nif ${ac_cv_lib_dl_dlopen+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-ldl  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar dlopen ();\nint\nmain ()\n{\nreturn dlopen ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_dl_dlopen=yes\nelse\n  ac_cv_lib_dl_dlopen=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dlopen\" >&5\n$as_echo \"$ac_cv_lib_dl_dlopen\" >&6; }\nif test \"x$ac_cv_lib_dl_dlopen\" = xyes; then :\n  lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"\nelse\n\n    lt_cv_dlopen=\"dyld\"\n    lt_cv_dlopen_libs=\n    lt_cv_dlopen_self=yes\n\nfi\n\n    ;;\n\n  *)\n    ac_fn_c_check_func \"$LINENO\" \"shl_load\" \"ac_cv_func_shl_load\"\nif test \"x$ac_cv_func_shl_load\" = xyes; then :\n  lt_cv_dlopen=\"shl_load\"\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for shl_load in -ldld\" >&5\n$as_echo_n \"checking for shl_load in -ldld... \" >&6; }\nif ${ac_cv_lib_dld_shl_load+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-ldld  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar shl_load ();\nint\nmain ()\n{\nreturn shl_load ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_dld_shl_load=yes\nelse\n  ac_cv_lib_dld_shl_load=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dld_shl_load\" >&5\n$as_echo \"$ac_cv_lib_dld_shl_load\" >&6; }\nif test \"x$ac_cv_lib_dld_shl_load\" = xyes; then :\n  lt_cv_dlopen=\"shl_load\" lt_cv_dlopen_libs=\"-ldld\"\nelse\n  ac_fn_c_check_func \"$LINENO\" \"dlopen\" \"ac_cv_func_dlopen\"\nif test \"x$ac_cv_func_dlopen\" = xyes; then :\n  lt_cv_dlopen=\"dlopen\"\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dlopen in -ldl\" >&5\n$as_echo_n \"checking for dlopen in -ldl... \" >&6; }\nif ${ac_cv_lib_dl_dlopen+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-ldl  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar dlopen ();\nint\nmain ()\n{\nreturn dlopen ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_dl_dlopen=yes\nelse\n  ac_cv_lib_dl_dlopen=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dl_dlopen\" >&5\n$as_echo \"$ac_cv_lib_dl_dlopen\" >&6; }\nif test \"x$ac_cv_lib_dl_dlopen\" = xyes; then :\n  lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-ldl\"\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dlopen in -lsvld\" >&5\n$as_echo_n \"checking for dlopen in -lsvld... \" >&6; }\nif ${ac_cv_lib_svld_dlopen+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-lsvld  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar dlopen ();\nint\nmain ()\n{\nreturn dlopen ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_svld_dlopen=yes\nelse\n  ac_cv_lib_svld_dlopen=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_svld_dlopen\" >&5\n$as_echo \"$ac_cv_lib_svld_dlopen\" >&6; }\nif test \"x$ac_cv_lib_svld_dlopen\" = xyes; then :\n  lt_cv_dlopen=\"dlopen\" lt_cv_dlopen_libs=\"-lsvld\"\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for dld_link in -ldld\" >&5\n$as_echo_n \"checking for dld_link in -ldld... \" >&6; }\nif ${ac_cv_lib_dld_dld_link+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-ldld  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar dld_link ();\nint\nmain ()\n{\nreturn dld_link ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_dld_dld_link=yes\nelse\n  ac_cv_lib_dld_dld_link=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_dld_dld_link\" >&5\n$as_echo \"$ac_cv_lib_dld_dld_link\" >&6; }\nif test \"x$ac_cv_lib_dld_dld_link\" = xyes; then :\n  lt_cv_dlopen=\"dld_link\" lt_cv_dlopen_libs=\"-ldld\"\nfi\n\n\nfi\n\n\nfi\n\n\nfi\n\n\nfi\n\n\nfi\n\n    ;;\n  esac\n\n  if test \"x$lt_cv_dlopen\" != xno; then\n    enable_dlopen=yes\n  else\n    enable_dlopen=no\n  fi\n\n  case $lt_cv_dlopen in\n  dlopen)\n    save_CPPFLAGS=\"$CPPFLAGS\"\n    test \"x$ac_cv_header_dlfcn_h\" = xyes && CPPFLAGS=\"$CPPFLAGS -DHAVE_DLFCN_H\"\n\n    save_LDFLAGS=\"$LDFLAGS\"\n    wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $export_dynamic_flag_spec\\\"\n\n    save_LIBS=\"$LIBS\"\n    LIBS=\"$lt_cv_dlopen_libs $LIBS\"\n\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether a program can dlopen itself\" >&5\n$as_echo_n \"checking whether a program can dlopen itself... \" >&6; }\nif ${lt_cv_dlopen_self+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  \t  if test \"$cross_compiling\" = yes; then :\n  lt_cv_dlopen_self=cross\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}\n_LT_EOF\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_link\\\"\"; } >&5\n  (eval $ac_link) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&5 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) lt_cv_dlopen_self=yes ;;\n      x$lt_dlneed_uscore) lt_cv_dlopen_self=yes ;;\n      x$lt_dlunknown|x*) lt_cv_dlopen_self=no ;;\n    esac\n  else :\n    # compilation failed\n    lt_cv_dlopen_self=no\n  fi\nfi\nrm -fr conftest*\n\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_dlopen_self\" >&5\n$as_echo \"$lt_cv_dlopen_self\" >&6; }\n\n    if test \"x$lt_cv_dlopen_self\" = xyes; then\n      wl=$lt_prog_compiler_wl eval LDFLAGS=\\\"\\$LDFLAGS $lt_prog_compiler_static\\\"\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether a statically linked program can dlopen itself\" >&5\n$as_echo_n \"checking whether a statically linked program can dlopen itself... \" >&6; }\nif ${lt_cv_dlopen_self_static+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  \t  if test \"$cross_compiling\" = yes; then :\n  lt_cv_dlopen_self_static=cross\nelse\n  lt_dlunknown=0; lt_dlno_uscore=1; lt_dlneed_uscore=2\n  lt_status=$lt_dlunknown\n  cat > conftest.$ac_ext <<_LT_EOF\n#line $LINENO \"configure\"\n#include \"confdefs.h\"\n\n#if HAVE_DLFCN_H\n#include <dlfcn.h>\n#endif\n\n#include <stdio.h>\n\n#ifdef RTLD_GLOBAL\n#  define LT_DLGLOBAL\t\tRTLD_GLOBAL\n#else\n#  ifdef DL_GLOBAL\n#    define LT_DLGLOBAL\t\tDL_GLOBAL\n#  else\n#    define LT_DLGLOBAL\t\t0\n#  endif\n#endif\n\n/* We may have to define LT_DLLAZY_OR_NOW in the command line if we\n   find out it does not work in some platform. */\n#ifndef LT_DLLAZY_OR_NOW\n#  ifdef RTLD_LAZY\n#    define LT_DLLAZY_OR_NOW\t\tRTLD_LAZY\n#  else\n#    ifdef DL_LAZY\n#      define LT_DLLAZY_OR_NOW\t\tDL_LAZY\n#    else\n#      ifdef RTLD_NOW\n#        define LT_DLLAZY_OR_NOW\tRTLD_NOW\n#      else\n#        ifdef DL_NOW\n#          define LT_DLLAZY_OR_NOW\tDL_NOW\n#        else\n#          define LT_DLLAZY_OR_NOW\t0\n#        endif\n#      endif\n#    endif\n#  endif\n#endif\n\n/* When -fvisbility=hidden is used, assume the code has been annotated\n   correspondingly for the symbols needed.  */\n#if defined(__GNUC__) && (((__GNUC__ == 3) && (__GNUC_MINOR__ >= 3)) || (__GNUC__ > 3))\nint fnord () __attribute__((visibility(\"default\")));\n#endif\n\nint fnord () { return 42; }\nint main ()\n{\n  void *self = dlopen (0, LT_DLGLOBAL|LT_DLLAZY_OR_NOW);\n  int status = $lt_dlunknown;\n\n  if (self)\n    {\n      if (dlsym (self,\"fnord\"))       status = $lt_dlno_uscore;\n      else\n        {\n\t  if (dlsym( self,\"_fnord\"))  status = $lt_dlneed_uscore;\n          else puts (dlerror ());\n\t}\n      /* dlclose (self); */\n    }\n  else\n    puts (dlerror ());\n\n  return status;\n}\n_LT_EOF\n  if { { eval echo \"\\\"\\$as_me\\\":${as_lineno-$LINENO}: \\\"$ac_link\\\"\"; } >&5\n  (eval $ac_link) 2>&5\n  ac_status=$?\n  $as_echo \"$as_me:${as_lineno-$LINENO}: \\$? = $ac_status\" >&5\n  test $ac_status = 0; } && test -s conftest${ac_exeext} 2>/dev/null; then\n    (./conftest; exit; ) >&5 2>/dev/null\n    lt_status=$?\n    case x$lt_status in\n      x$lt_dlno_uscore) lt_cv_dlopen_self_static=yes ;;\n      x$lt_dlneed_uscore) lt_cv_dlopen_self_static=yes ;;\n      x$lt_dlunknown|x*) lt_cv_dlopen_self_static=no ;;\n    esac\n  else :\n    # compilation failed\n    lt_cv_dlopen_self_static=no\n  fi\nfi\nrm -fr conftest*\n\n\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $lt_cv_dlopen_self_static\" >&5\n$as_echo \"$lt_cv_dlopen_self_static\" >&6; }\n    fi\n\n    CPPFLAGS=\"$save_CPPFLAGS\"\n    LDFLAGS=\"$save_LDFLAGS\"\n    LIBS=\"$save_LIBS\"\n    ;;\n  esac\n\n  case $lt_cv_dlopen_self in\n  yes|no) enable_dlopen_self=$lt_cv_dlopen_self ;;\n  *) enable_dlopen_self=unknown ;;\n  esac\n\n  case $lt_cv_dlopen_self_static in\n  yes|no) enable_dlopen_self_static=$lt_cv_dlopen_self_static ;;\n  *) enable_dlopen_self_static=unknown ;;\n  esac\nfi\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nstriplib=\nold_striplib=\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether stripping libraries is possible\" >&5\n$as_echo_n \"checking whether stripping libraries is possible... \" >&6; }\nif test -n \"$STRIP\" && $STRIP -V 2>&1 | $GREP \"GNU strip\" >/dev/null; then\n  test -z \"$old_striplib\" && old_striplib=\"$STRIP --strip-debug\"\n  test -z \"$striplib\" && striplib=\"$STRIP --strip-unneeded\"\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\nelse\n# FIXME - insert some real tests, host_os isn't really good enough\n  case $host_os in\n  darwin*)\n    if test -n \"$STRIP\" ; then\n      striplib=\"$STRIP -x\"\n      old_striplib=\"$STRIP -S\"\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\n    else\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\n    fi\n    ;;\n  *)\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\n    ;;\n  esac\nfi\n\n\n\n\n\n\n\n\n\n\n\n\n  # Report which library types will actually be built\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking if libtool supports shared libraries\" >&5\n$as_echo_n \"checking if libtool supports shared libraries... \" >&6; }\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $can_build_shared\" >&5\n$as_echo \"$can_build_shared\" >&6; }\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to build shared libraries\" >&5\n$as_echo_n \"checking whether to build shared libraries... \" >&6; }\n  test \"$can_build_shared\" = \"no\" && enable_shared=no\n\n  # On AIX, shared libraries and static libraries use the same namespace, and\n  # are all built from PIC.\n  case $host_os in\n  aix3*)\n    test \"$enable_shared\" = yes && enable_static=no\n    if test -n \"$RANLIB\"; then\n      archive_cmds=\"$archive_cmds~\\$RANLIB \\$lib\"\n      postinstall_cmds='$RANLIB $lib'\n    fi\n    ;;\n\n  aix[4-9]*)\n    if test \"$host_cpu\" != ia64 && test \"$aix_use_runtimelinking\" = no ; then\n      test \"$enable_shared\" = yes && enable_static=no\n    fi\n    ;;\n  esac\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_shared\" >&5\n$as_echo \"$enable_shared\" >&6; }\n\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: checking whether to build static libraries\" >&5\n$as_echo_n \"checking whether to build static libraries... \" >&6; }\n  # Make sure either enable_shared or enable_static is yes.\n  test \"$enable_shared\" = yes || enable_static=yes\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: $enable_static\" >&5\n$as_echo \"$enable_static\" >&6; }\n\n\n\n\nfi\nac_ext=c\nac_cpp='$CPP $CPPFLAGS'\nac_compile='$CC -c $CFLAGS $CPPFLAGS conftest.$ac_ext >&5'\nac_link='$CC -o conftest$ac_exeext $CFLAGS $CPPFLAGS $LDFLAGS conftest.$ac_ext $LIBS >&5'\nac_compiler_gnu=$ac_cv_c_compiler_gnu\n\nCC=\"$lt_save_CC\"\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n        ac_config_commands=\"$ac_config_commands libtool\"\n\n\n\n\n# Only expand once:\n\n\n\n\nfor ac_header in sys/inotify.h sys/epoll.h sys/event.h port.h poll.h sys/select.h sys/eventfd.h sys/signalfd.h\ndo :\n  as_ac_Header=`$as_echo \"ac_cv_header_$ac_header\" | $as_tr_sh`\nac_fn_c_check_header_mongrel \"$LINENO\" \"$ac_header\" \"$as_ac_Header\" \"$ac_includes_default\"\nif eval test \\\"x\\$\"$as_ac_Header\"\\\" = x\"yes\"; then :\n  cat >>confdefs.h <<_ACEOF\n#define `$as_echo \"HAVE_$ac_header\" | $as_tr_cpp` 1\n_ACEOF\n\nfi\n\ndone\n\n\nfor ac_func in inotify_init epoll_ctl kqueue port_create poll select eventfd signalfd\ndo :\n  as_ac_var=`$as_echo \"ac_cv_func_$ac_func\" | $as_tr_sh`\nac_fn_c_check_func \"$LINENO\" \"$ac_func\" \"$as_ac_var\"\nif eval test \\\"x\\$\"$as_ac_var\"\\\" = x\"yes\"; then :\n  cat >>confdefs.h <<_ACEOF\n#define `$as_echo \"HAVE_$ac_func\" | $as_tr_cpp` 1\n_ACEOF\n\nfi\ndone\n\n\nfor ac_func in clock_gettime\ndo :\n  ac_fn_c_check_func \"$LINENO\" \"clock_gettime\" \"ac_cv_func_clock_gettime\"\nif test \"x$ac_cv_func_clock_gettime\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_CLOCK_GETTIME 1\n_ACEOF\n\nelse\n\n      if test $(uname) = Linux; then\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime syscall\" >&5\n$as_echo_n \"checking for clock_gettime syscall... \" >&6; }\n      cat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n#include <unistd.h>\n                       #include <sys/syscall.h>\n                       #include <time.h>\nint\nmain ()\n{\nstruct timespec ts; int status = syscall (SYS_clock_gettime, CLOCK_REALTIME, &ts)\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_have_clock_syscall=1\n\n$as_echo \"#define HAVE_CLOCK_SYSCALL 1\" >>confdefs.h\n\n                      { $as_echo \"$as_me:${as_lineno-$LINENO}: result: yes\" >&5\n$as_echo \"yes\" >&6; }\nelse\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: result: no\" >&5\n$as_echo \"no\" >&6; }\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\n   fi\n   if test -z \"$LIBEV_M4_AVOID_LIBRT\" && test -z \"$ac_have_clock_syscall\"; then\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for clock_gettime in -lrt\" >&5\n$as_echo_n \"checking for clock_gettime in -lrt... \" >&6; }\nif ${ac_cv_lib_rt_clock_gettime+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-lrt  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar clock_gettime ();\nint\nmain ()\n{\nreturn clock_gettime ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_rt_clock_gettime=yes\nelse\n  ac_cv_lib_rt_clock_gettime=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_rt_clock_gettime\" >&5\n$as_echo \"$ac_cv_lib_rt_clock_gettime\" >&6; }\nif test \"x$ac_cv_lib_rt_clock_gettime\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_LIBRT 1\n_ACEOF\n\n  LIBS=\"-lrt $LIBS\"\n\nfi\n\n      unset ac_cv_func_clock_gettime\n      for ac_func in clock_gettime\ndo :\n  ac_fn_c_check_func \"$LINENO\" \"clock_gettime\" \"ac_cv_func_clock_gettime\"\nif test \"x$ac_cv_func_clock_gettime\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_CLOCK_GETTIME 1\n_ACEOF\n\nfi\ndone\n\n   fi\n\nfi\ndone\n\n\nfor ac_func in nanosleep\ndo :\n  ac_fn_c_check_func \"$LINENO\" \"nanosleep\" \"ac_cv_func_nanosleep\"\nif test \"x$ac_cv_func_nanosleep\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_NANOSLEEP 1\n_ACEOF\n\nelse\n\n   if test -z \"$LIBEV_M4_AVOID_LIBRT\"; then\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: checking for nanosleep in -lrt\" >&5\n$as_echo_n \"checking for nanosleep in -lrt... \" >&6; }\nif ${ac_cv_lib_rt_nanosleep+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_check_lib_save_LIBS=$LIBS\nLIBS=\"-lrt  $LIBS\"\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar nanosleep ();\nint\nmain ()\n{\nreturn nanosleep ();\n  ;\n  return 0;\n}\n_ACEOF\nif ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_lib_rt_nanosleep=yes\nelse\n  ac_cv_lib_rt_nanosleep=no\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext conftest.$ac_ext\nLIBS=$ac_check_lib_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_lib_rt_nanosleep\" >&5\n$as_echo \"$ac_cv_lib_rt_nanosleep\" >&6; }\nif test \"x$ac_cv_lib_rt_nanosleep\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_LIBRT 1\n_ACEOF\n\n  LIBS=\"-lrt $LIBS\"\n\nfi\n\n      unset ac_cv_func_nanosleep\n      for ac_func in nanosleep\ndo :\n  ac_fn_c_check_func \"$LINENO\" \"nanosleep\" \"ac_cv_func_nanosleep\"\nif test \"x$ac_cv_func_nanosleep\" = xyes; then :\n  cat >>confdefs.h <<_ACEOF\n#define HAVE_NANOSLEEP 1\n_ACEOF\n\nfi\ndone\n\n   fi\n\nfi\ndone\n\n\nif test -z \"$LIBEV_M4_AVOID_LIBM\"; then\n   LIBM=m\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking for library containing floor\" >&5\n$as_echo_n \"checking for library containing floor... \" >&6; }\nif ${ac_cv_search_floor+:} false; then :\n  $as_echo_n \"(cached) \" >&6\nelse\n  ac_func_search_save_LIBS=$LIBS\ncat confdefs.h - <<_ACEOF >conftest.$ac_ext\n/* end confdefs.h.  */\n\n/* Override any GCC internal prototype to avoid an error.\n   Use char because int might match the return type of a GCC\n   builtin and then its argument prototype would still apply.  */\n#ifdef __cplusplus\nextern \"C\"\n#endif\nchar floor ();\nint\nmain ()\n{\nreturn floor ();\n  ;\n  return 0;\n}\n_ACEOF\nfor ac_lib in '' $LIBM; do\n  if test -z \"$ac_lib\"; then\n    ac_res=\"none required\"\n  else\n    ac_res=-l$ac_lib\n    LIBS=\"-l$ac_lib  $ac_func_search_save_LIBS\"\n  fi\n  if ac_fn_c_try_link \"$LINENO\"; then :\n  ac_cv_search_floor=$ac_res\nfi\nrm -f core conftest.err conftest.$ac_objext \\\n    conftest$ac_exeext\n  if ${ac_cv_search_floor+:} false; then :\n  break\nfi\ndone\nif ${ac_cv_search_floor+:} false; then :\n\nelse\n  ac_cv_search_floor=no\nfi\nrm conftest.$ac_ext\nLIBS=$ac_func_search_save_LIBS\nfi\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: result: $ac_cv_search_floor\" >&5\n$as_echo \"$ac_cv_search_floor\" >&6; }\nac_res=$ac_cv_search_floor\nif test \"$ac_res\" != no; then :\n  test \"$ac_res\" = \"none required\" || LIBS=\"$ac_res $LIBS\"\n\n$as_echo \"#define HAVE_FLOOR 1\" >>confdefs.h\n\nfi\n\n\n\n\nac_config_files=\"$ac_config_files Makefile\"\n\ncat >confcache <<\\_ACEOF\n# This file is a shell script that caches the results of configure\n# tests run on this system so they can be shared between configure\n# scripts and configure runs, see configure's option --config-cache.\n# It is not useful on other systems.  If it contains results you don't\n# want to keep, you may remove or edit it.\n#\n# config.status only pays attention to the cache file if you give it\n# the --recheck option to rerun configure.\n#\n# `ac_cv_env_foo' variables (set or unset) will be overridden when\n# loading this file, other *unset* `ac_cv_foo' will be assigned the\n# following values.\n\n_ACEOF\n\n# The following way of writing the cache mishandles newlines in values,\n# but we know of no workaround that is simple, portable, and efficient.\n# So, we kill variables containing newlines.\n# Ultrix sh set writes to stderr and can't be redirected directly,\n# and sets the high bit in the cache file unless we assign to the vars.\n(\n  for ac_var in `(set) 2>&1 | sed -n 's/^\\([a-zA-Z_][a-zA-Z0-9_]*\\)=.*/\\1/p'`; do\n    eval ac_val=\\$$ac_var\n    case $ac_val in #(\n    *${as_nl}*)\n      case $ac_var in #(\n      *_cv_*) { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: cache variable $ac_var contains a newline\" >&5\n$as_echo \"$as_me: WARNING: cache variable $ac_var contains a newline\" >&2;} ;;\n      esac\n      case $ac_var in #(\n      _ | IFS | as_nl) ;; #(\n      BASH_ARGV | BASH_SOURCE) eval $ac_var= ;; #(\n      *) { eval $ac_var=; unset $ac_var;} ;;\n      esac ;;\n    esac\n  done\n\n  (set) 2>&1 |\n    case $as_nl`(ac_space=' '; set) 2>&1` in #(\n    *${as_nl}ac_space=\\ *)\n      # `set' does not quote correctly, so add quotes: double-quote\n      # substitution turns \\\\\\\\ into \\\\, and sed turns \\\\ into \\.\n      sed -n \\\n\t\"s/'/'\\\\\\\\''/g;\n\t  s/^\\\\([_$as_cr_alnum]*_cv_[_$as_cr_alnum]*\\\\)=\\\\(.*\\\\)/\\\\1='\\\\2'/p\"\n      ;; #(\n    *)\n      # `set' quotes correctly as required by POSIX, so do not add quotes.\n      sed -n \"/^[_$as_cr_alnum]*_cv_[_$as_cr_alnum]*=/p\"\n      ;;\n    esac |\n    sort\n) |\n  sed '\n     /^ac_cv_env_/b end\n     t clear\n     :clear\n     s/^\\([^=]*\\)=\\(.*[{}].*\\)$/test \"${\\1+set}\" = set || &/\n     t end\n     s/^\\([^=]*\\)=\\(.*\\)$/\\1=${\\1=\\2}/\n     :end' >>confcache\nif diff \"$cache_file\" confcache >/dev/null 2>&1; then :; else\n  if test -w \"$cache_file\"; then\n    if test \"x$cache_file\" != \"x/dev/null\"; then\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: updating cache $cache_file\" >&5\n$as_echo \"$as_me: updating cache $cache_file\" >&6;}\n      if test ! -f \"$cache_file\" || test -h \"$cache_file\"; then\n\tcat confcache >\"$cache_file\"\n      else\n        case $cache_file in #(\n        */* | ?:*)\n\t  mv -f confcache \"$cache_file\"$$ &&\n\t  mv -f \"$cache_file\"$$ \"$cache_file\" ;; #(\n        *)\n\t  mv -f confcache \"$cache_file\" ;;\n\tesac\n      fi\n    fi\n  else\n    { $as_echo \"$as_me:${as_lineno-$LINENO}: not updating unwritable cache $cache_file\" >&5\n$as_echo \"$as_me: not updating unwritable cache $cache_file\" >&6;}\n  fi\nfi\nrm -f confcache\n\ntest \"x$prefix\" = xNONE && prefix=$ac_default_prefix\n# Let make expand exec_prefix.\ntest \"x$exec_prefix\" = xNONE && exec_prefix='${prefix}'\n\nDEFS=-DHAVE_CONFIG_H\n\nac_libobjs=\nac_ltlibobjs=\nU=\nfor ac_i in : $LIBOBJS; do test \"x$ac_i\" = x: && continue\n  # 1. Remove the extension, and $U if already installed.\n  ac_script='s/\\$U\\././;s/\\.o$//;s/\\.obj$//'\n  ac_i=`$as_echo \"$ac_i\" | sed \"$ac_script\"`\n  # 2. Prepend LIBOBJDIR.  When used with automake>=1.10 LIBOBJDIR\n  #    will be set to the directory where LIBOBJS objects are built.\n  as_fn_append ac_libobjs \" \\${LIBOBJDIR}$ac_i\\$U.$ac_objext\"\n  as_fn_append ac_ltlibobjs \" \\${LIBOBJDIR}$ac_i\"'$U.lo'\ndone\nLIBOBJS=$ac_libobjs\n\nLTLIBOBJS=$ac_ltlibobjs\n\n\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: checking that generated files are newer than configure\" >&5\n$as_echo_n \"checking that generated files are newer than configure... \" >&6; }\n   if test -n \"$am_sleep_pid\"; then\n     # Hide warnings about reused PIDs.\n     wait $am_sleep_pid 2>/dev/null\n   fi\n   { $as_echo \"$as_me:${as_lineno-$LINENO}: result: done\" >&5\n$as_echo \"done\" >&6; }\n if test -n \"$EXEEXT\"; then\n  am__EXEEXT_TRUE=\n  am__EXEEXT_FALSE='#'\nelse\n  am__EXEEXT_TRUE='#'\n  am__EXEEXT_FALSE=\nfi\n\nif test -z \"${MAINTAINER_MODE_TRUE}\" && test -z \"${MAINTAINER_MODE_FALSE}\"; then\n  as_fn_error $? \"conditional \\\"MAINTAINER_MODE\\\" was never defined.\nUsually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\nfi\nif test -z \"${AMDEP_TRUE}\" && test -z \"${AMDEP_FALSE}\"; then\n  as_fn_error $? \"conditional \\\"AMDEP\\\" was never defined.\nUsually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\nfi\nif test -z \"${am__fastdepCC_TRUE}\" && test -z \"${am__fastdepCC_FALSE}\"; then\n  as_fn_error $? \"conditional \\\"am__fastdepCC\\\" was never defined.\nUsually this means the macro was only invoked conditionally.\" \"$LINENO\" 5\nfi\n\n: \"${CONFIG_STATUS=./config.status}\"\nac_write_fail=0\nac_clean_files_save=$ac_clean_files\nac_clean_files=\"$ac_clean_files $CONFIG_STATUS\"\n{ $as_echo \"$as_me:${as_lineno-$LINENO}: creating $CONFIG_STATUS\" >&5\n$as_echo \"$as_me: creating $CONFIG_STATUS\" >&6;}\nas_write_fail=0\ncat >$CONFIG_STATUS <<_ASEOF || as_write_fail=1\n#! $SHELL\n# Generated by $as_me.\n# Run this file to recreate the current configuration.\n# Compiler output produced by configure, useful for debugging\n# configure, is in config.log if it exists.\n\ndebug=false\nac_cs_recheck=false\nac_cs_silent=false\n\nSHELL=\\${CONFIG_SHELL-$SHELL}\nexport SHELL\n_ASEOF\ncat >>$CONFIG_STATUS <<\\_ASEOF || as_write_fail=1\n## -------------------- ##\n## M4sh Initialization. ##\n## -------------------- ##\n\n# Be more Bourne compatible\nDUALCASE=1; export DUALCASE # for MKS sh\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then :\n  emulate sh\n  NULLCMD=:\n  # Pre-4.2 versions of Zsh do word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in #(\n  *posix*) :\n    set -o posix ;; #(\n  *) :\n     ;;\nesac\nfi\n\n\nas_nl='\n'\nexport as_nl\n# Printing a long string crashes Solaris 7 /usr/bin/printf.\nas_echo='\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\\'\nas_echo=$as_echo$as_echo$as_echo$as_echo$as_echo\nas_echo=$as_echo$as_echo$as_echo$as_echo$as_echo$as_echo\n# Prefer a ksh shell builtin over an external printf program on Solaris,\n# but without wasting forks for bash or zsh.\nif test -z \"$BASH_VERSION$ZSH_VERSION\" \\\n    && (test \"X`print -r -- $as_echo`\" = \"X$as_echo\") 2>/dev/null; then\n  as_echo='print -r --'\n  as_echo_n='print -rn --'\nelif (test \"X`printf %s $as_echo`\" = \"X$as_echo\") 2>/dev/null; then\n  as_echo='printf %s\\n'\n  as_echo_n='printf %s'\nelse\n  if test \"X`(/usr/ucb/echo -n -n $as_echo) 2>/dev/null`\" = \"X-n $as_echo\"; then\n    as_echo_body='eval /usr/ucb/echo -n \"$1$as_nl\"'\n    as_echo_n='/usr/ucb/echo -n'\n  else\n    as_echo_body='eval expr \"X$1\" : \"X\\\\(.*\\\\)\"'\n    as_echo_n_body='eval\n      arg=$1;\n      case $arg in #(\n      *\"$as_nl\"*)\n\texpr \"X$arg\" : \"X\\\\(.*\\\\)$as_nl\";\n\targ=`expr \"X$arg\" : \".*$as_nl\\\\(.*\\\\)\"`;;\n      esac;\n      expr \"X$arg\" : \"X\\\\(.*\\\\)\" | tr -d \"$as_nl\"\n    '\n    export as_echo_n_body\n    as_echo_n='sh -c $as_echo_n_body as_echo'\n  fi\n  export as_echo_body\n  as_echo='sh -c $as_echo_body as_echo'\nfi\n\n# The user is always right.\nif test \"${PATH_SEPARATOR+set}\" != set; then\n  PATH_SEPARATOR=:\n  (PATH='/bin;/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 && {\n    (PATH='/bin:/bin'; FPATH=$PATH; sh -c :) >/dev/null 2>&1 ||\n      PATH_SEPARATOR=';'\n  }\nfi\n\n\n# IFS\n# We need space, tab and new line, in precisely that order.  Quoting is\n# there to prevent editors from complaining about space-tab.\n# (If _AS_PATH_WALK were called with IFS unset, it would disable word\n# splitting by setting IFS to empty value.)\nIFS=\" \"\"\t$as_nl\"\n\n# Find who we are.  Look in the path if we contain no directory separator.\nas_myself=\ncase $0 in #((\n  *[\\\\/]* ) as_myself=$0 ;;\n  *) as_save_IFS=$IFS; IFS=$PATH_SEPARATOR\nfor as_dir in $PATH\ndo\n  IFS=$as_save_IFS\n  test -z \"$as_dir\" && as_dir=.\n    test -r \"$as_dir/$0\" && as_myself=$as_dir/$0 && break\n  done\nIFS=$as_save_IFS\n\n     ;;\nesac\n# We did not find ourselves, most probably we were run as `sh COMMAND'\n# in which case we are not to be found in the path.\nif test \"x$as_myself\" = x; then\n  as_myself=$0\nfi\nif test ! -f \"$as_myself\"; then\n  $as_echo \"$as_myself: error: cannot find myself; rerun with an absolute file name\" >&2\n  exit 1\nfi\n\n# Unset variables that we do not need and which cause bugs (e.g. in\n# pre-3.0 UWIN ksh).  But do not cause bugs in bash 2.01; the \"|| exit 1\"\n# suppresses any \"Segmentation fault\" message there.  '((' could\n# trigger a bug in pdksh 5.2.14.\nfor as_var in BASH_ENV ENV MAIL MAILPATH\ndo eval test x\\${$as_var+set} = xset \\\n  && ( (unset $as_var) || exit 1) >/dev/null 2>&1 && unset $as_var || :\ndone\nPS1='$ '\nPS2='> '\nPS4='+ '\n\n# NLS nuisances.\nLC_ALL=C\nexport LC_ALL\nLANGUAGE=C\nexport LANGUAGE\n\n# CDPATH.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\n\n# as_fn_error STATUS ERROR [LINENO LOG_FD]\n# ----------------------------------------\n# Output \"`basename $0`: error: ERROR\" to stderr. If LINENO and LOG_FD are\n# provided, also output the error to LOG_FD, referencing LINENO. Then exit the\n# script with STATUS, using 1 if that was 0.\nas_fn_error ()\n{\n  as_status=$1; test $as_status -eq 0 && as_status=1\n  if test \"$4\"; then\n    as_lineno=${as_lineno-\"$3\"} as_lineno_stack=as_lineno_stack=$as_lineno_stack\n    $as_echo \"$as_me:${as_lineno-$LINENO}: error: $2\" >&$4\n  fi\n  $as_echo \"$as_me: error: $2\" >&2\n  as_fn_exit $as_status\n} # as_fn_error\n\n\n# as_fn_set_status STATUS\n# -----------------------\n# Set $? to STATUS, without forking.\nas_fn_set_status ()\n{\n  return $1\n} # as_fn_set_status\n\n# as_fn_exit STATUS\n# -----------------\n# Exit the shell with STATUS, even in a \"trap 0\" or \"set -e\" context.\nas_fn_exit ()\n{\n  set +e\n  as_fn_set_status $1\n  exit $1\n} # as_fn_exit\n\n# as_fn_unset VAR\n# ---------------\n# Portably unset VAR.\nas_fn_unset ()\n{\n  { eval $1=; unset $1;}\n}\nas_unset=as_fn_unset\n# as_fn_append VAR VALUE\n# ----------------------\n# Append the text in VALUE to the end of the definition contained in VAR. Take\n# advantage of any shell optimizations that allow amortized linear growth over\n# repeated appends, instead of the typical quadratic growth present in naive\n# implementations.\nif (eval \"as_var=1; as_var+=2; test x\\$as_var = x12\") 2>/dev/null; then :\n  eval 'as_fn_append ()\n  {\n    eval $1+=\\$2\n  }'\nelse\n  as_fn_append ()\n  {\n    eval $1=\\$$1\\$2\n  }\nfi # as_fn_append\n\n# as_fn_arith ARG...\n# ------------------\n# Perform arithmetic evaluation on the ARGs, and store the result in the\n# global $as_val. Take advantage of shells that can avoid forks. The arguments\n# must be portable across $(()) and expr.\nif (eval \"test \\$(( 1 + 1 )) = 2\") 2>/dev/null; then :\n  eval 'as_fn_arith ()\n  {\n    as_val=$(( $* ))\n  }'\nelse\n  as_fn_arith ()\n  {\n    as_val=`expr \"$@\" || test $? -eq 1`\n  }\nfi # as_fn_arith\n\n\nif expr a : '\\(a\\)' >/dev/null 2>&1 &&\n   test \"X`expr 00001 : '.*\\(...\\)'`\" = X001; then\n  as_expr=expr\nelse\n  as_expr=false\nfi\n\nif (basename -- /) >/dev/null 2>&1 && test \"X`basename -- / 2>&1`\" = \"X/\"; then\n  as_basename=basename\nelse\n  as_basename=false\nfi\n\nif (as_dir=`dirname -- /` && test \"X$as_dir\" = X/) >/dev/null 2>&1; then\n  as_dirname=dirname\nelse\n  as_dirname=false\nfi\n\nas_me=`$as_basename -- \"$0\" ||\n$as_expr X/\"$0\" : '.*/\\([^/][^/]*\\)/*$' \\| \\\n\t X\"$0\" : 'X\\(//\\)$' \\| \\\n\t X\"$0\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X/\"$0\" |\n    sed '/^.*\\/\\([^/][^/]*\\)\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\/\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\/\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n\n# Avoid depending upon Character Ranges.\nas_cr_letters='abcdefghijklmnopqrstuvwxyz'\nas_cr_LETTERS='ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nas_cr_Letters=$as_cr_letters$as_cr_LETTERS\nas_cr_digits='0123456789'\nas_cr_alnum=$as_cr_Letters$as_cr_digits\n\nECHO_C= ECHO_N= ECHO_T=\ncase `echo -n x` in #(((((\n-n*)\n  case `echo 'xy\\c'` in\n  *c*) ECHO_T='\t';;\t# ECHO_T is single tab character.\n  xy)  ECHO_C='\\c';;\n  *)   echo `echo ksh88 bug on AIX 6.1` > /dev/null\n       ECHO_T='\t';;\n  esac;;\n*)\n  ECHO_N='-n';;\nesac\n\nrm -f conf$$ conf$$.exe conf$$.file\nif test -d conf$$.dir; then\n  rm -f conf$$.dir/conf$$.file\nelse\n  rm -f conf$$.dir\n  mkdir conf$$.dir 2>/dev/null\nfi\nif (echo >conf$$.file) 2>/dev/null; then\n  if ln -s conf$$.file conf$$ 2>/dev/null; then\n    as_ln_s='ln -s'\n    # ... but there are two gotchas:\n    # 1) On MSYS, both `ln -s file dir' and `ln file dir' fail.\n    # 2) DJGPP < 2.04 has no symlinks; `ln -s' creates a wrapper executable.\n    # In both cases, we have to default to `cp -pR'.\n    ln -s conf$$.file conf$$.dir 2>/dev/null && test ! -f conf$$.exe ||\n      as_ln_s='cp -pR'\n  elif ln conf$$.file conf$$ 2>/dev/null; then\n    as_ln_s=ln\n  else\n    as_ln_s='cp -pR'\n  fi\nelse\n  as_ln_s='cp -pR'\nfi\nrm -f conf$$ conf$$.exe conf$$.dir/conf$$.file conf$$.file\nrmdir conf$$.dir 2>/dev/null\n\n\n# as_fn_mkdir_p\n# -------------\n# Create \"$as_dir\" as a directory, including parents if necessary.\nas_fn_mkdir_p ()\n{\n\n  case $as_dir in #(\n  -*) as_dir=./$as_dir;;\n  esac\n  test -d \"$as_dir\" || eval $as_mkdir_p || {\n    as_dirs=\n    while :; do\n      case $as_dir in #(\n      *\\'*) as_qdir=`$as_echo \"$as_dir\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;; #'(\n      *) as_qdir=$as_dir;;\n      esac\n      as_dirs=\"'$as_qdir' $as_dirs\"\n      as_dir=`$as_dirname -- \"$as_dir\" ||\n$as_expr X\"$as_dir\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$as_dir\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$as_dir\" : 'X\\(//\\)$' \\| \\\n\t X\"$as_dir\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$as_dir\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n      test -d \"$as_dir\" && break\n    done\n    test -z \"$as_dirs\" || eval \"mkdir $as_dirs\"\n  } || test -d \"$as_dir\" || as_fn_error $? \"cannot create directory $as_dir\"\n\n\n} # as_fn_mkdir_p\nif mkdir -p . 2>/dev/null; then\n  as_mkdir_p='mkdir -p \"$as_dir\"'\nelse\n  test -d ./-p && rmdir ./-p\n  as_mkdir_p=false\nfi\n\n\n# as_fn_executable_p FILE\n# -----------------------\n# Test if FILE is an executable regular file.\nas_fn_executable_p ()\n{\n  test -f \"$1\" && test -x \"$1\"\n} # as_fn_executable_p\nas_test_x='test -x'\nas_executable_p=as_fn_executable_p\n\n# Sed expression to map a string onto a valid CPP name.\nas_tr_cpp=\"eval sed 'y%*$as_cr_letters%P$as_cr_LETTERS%;s%[^_$as_cr_alnum]%_%g'\"\n\n# Sed expression to map a string onto a valid variable name.\nas_tr_sh=\"eval sed 'y%*+%pp%;s%[^_$as_cr_alnum]%_%g'\"\n\n\nexec 6>&1\n## ----------------------------------- ##\n## Main body of $CONFIG_STATUS script. ##\n## ----------------------------------- ##\n_ASEOF\ntest $as_write_fail = 0 && chmod +x $CONFIG_STATUS || ac_write_fail=1\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n# Save the log message, to keep $0 and so on meaningful, and to\n# report actual input values of CONFIG_FILES etc. instead of their\n# values after options handling.\nac_log=\"\nThis file was extended by $as_me, which was\ngenerated by GNU Autoconf 2.69.  Invocation command line was\n\n  CONFIG_FILES    = $CONFIG_FILES\n  CONFIG_HEADERS  = $CONFIG_HEADERS\n  CONFIG_LINKS    = $CONFIG_LINKS\n  CONFIG_COMMANDS = $CONFIG_COMMANDS\n  $ $0 $@\n\non `(hostname || uname -n) 2>/dev/null | sed 1q`\n\"\n\n_ACEOF\n\ncase $ac_config_files in *\"\n\"*) set x $ac_config_files; shift; ac_config_files=$*;;\nesac\n\ncase $ac_config_headers in *\"\n\"*) set x $ac_config_headers; shift; ac_config_headers=$*;;\nesac\n\n\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n# Files that config.status was made for.\nconfig_files=\"$ac_config_files\"\nconfig_headers=\"$ac_config_headers\"\nconfig_commands=\"$ac_config_commands\"\n\n_ACEOF\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\nac_cs_usage=\"\\\n\\`$as_me' instantiates files and other configuration actions\nfrom templates according to the current configuration.  Unless the files\nand actions are specified as TAGs, all are instantiated by default.\n\nUsage: $0 [OPTION]... [TAG]...\n\n  -h, --help       print this help, then exit\n  -V, --version    print version number and configuration settings, then exit\n      --config     print configuration, then exit\n  -q, --quiet, --silent\n                   do not print progress messages\n  -d, --debug      don't remove temporary files\n      --recheck    update $as_me by reconfiguring in the same conditions\n      --file=FILE[:TEMPLATE]\n                   instantiate the configuration file FILE\n      --header=FILE[:TEMPLATE]\n                   instantiate the configuration header FILE\n\nConfiguration files:\n$config_files\n\nConfiguration headers:\n$config_headers\n\nConfiguration commands:\n$config_commands\n\nReport bugs to the package provider.\"\n\n_ACEOF\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\nac_cs_config=\"`$as_echo \"$ac_configure_args\" | sed 's/^ //; s/[\\\\\"\"\\`\\$]/\\\\\\\\&/g'`\"\nac_cs_version=\"\\\\\nconfig.status\nconfigured by $0, generated by GNU Autoconf 2.69,\n  with options \\\\\"\\$ac_cs_config\\\\\"\n\nCopyright (C) 2012 Free Software Foundation, Inc.\nThis config.status script is free software; the Free Software Foundation\ngives unlimited permission to copy, distribute and modify it.\"\n\nac_pwd='$ac_pwd'\nsrcdir='$srcdir'\nINSTALL='$INSTALL'\nMKDIR_P='$MKDIR_P'\nAWK='$AWK'\ntest -n \"\\$AWK\" || AWK=awk\n_ACEOF\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n# The default lists apply if the user does not specify any file.\nac_need_defaults=:\nwhile test $# != 0\ndo\n  case $1 in\n  --*=?*)\n    ac_option=`expr \"X$1\" : 'X\\([^=]*\\)='`\n    ac_optarg=`expr \"X$1\" : 'X[^=]*=\\(.*\\)'`\n    ac_shift=:\n    ;;\n  --*=)\n    ac_option=`expr \"X$1\" : 'X\\([^=]*\\)='`\n    ac_optarg=\n    ac_shift=:\n    ;;\n  *)\n    ac_option=$1\n    ac_optarg=$2\n    ac_shift=shift\n    ;;\n  esac\n\n  case $ac_option in\n  # Handling of the options.\n  -recheck | --recheck | --rechec | --reche | --rech | --rec | --re | --r)\n    ac_cs_recheck=: ;;\n  --version | --versio | --versi | --vers | --ver | --ve | --v | -V )\n    $as_echo \"$ac_cs_version\"; exit ;;\n  --config | --confi | --conf | --con | --co | --c )\n    $as_echo \"$ac_cs_config\"; exit ;;\n  --debug | --debu | --deb | --de | --d | -d )\n    debug=: ;;\n  --file | --fil | --fi | --f )\n    $ac_shift\n    case $ac_optarg in\n    *\\'*) ac_optarg=`$as_echo \"$ac_optarg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n    '') as_fn_error $? \"missing file argument\" ;;\n    esac\n    as_fn_append CONFIG_FILES \" '$ac_optarg'\"\n    ac_need_defaults=false;;\n  --header | --heade | --head | --hea )\n    $ac_shift\n    case $ac_optarg in\n    *\\'*) ac_optarg=`$as_echo \"$ac_optarg\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"` ;;\n    esac\n    as_fn_append CONFIG_HEADERS \" '$ac_optarg'\"\n    ac_need_defaults=false;;\n  --he | --h)\n    # Conflict between --help and --header\n    as_fn_error $? \"ambiguous option: \\`$1'\nTry \\`$0 --help' for more information.\";;\n  --help | --hel | -h )\n    $as_echo \"$ac_cs_usage\"; exit ;;\n  -q | -quiet | --quiet | --quie | --qui | --qu | --q \\\n  | -silent | --silent | --silen | --sile | --sil | --si | --s)\n    ac_cs_silent=: ;;\n\n  # This is an error.\n  -*) as_fn_error $? \"unrecognized option: \\`$1'\nTry \\`$0 --help' for more information.\" ;;\n\n  *) as_fn_append ac_config_targets \" $1\"\n     ac_need_defaults=false ;;\n\n  esac\n  shift\ndone\n\nac_configure_extra_args=\n\nif $ac_cs_silent; then\n  exec 6>/dev/null\n  ac_configure_extra_args=\"$ac_configure_extra_args --silent\"\nfi\n\n_ACEOF\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\nif \\$ac_cs_recheck; then\n  set X $SHELL '$0' $ac_configure_args \\$ac_configure_extra_args --no-create --no-recursion\n  shift\n  \\$as_echo \"running CONFIG_SHELL=$SHELL \\$*\" >&6\n  CONFIG_SHELL='$SHELL'\n  export CONFIG_SHELL\n  exec \"\\$@\"\nfi\n\n_ACEOF\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\nexec 5>>config.log\n{\n  echo\n  sed 'h;s/./-/g;s/^.../## /;s/...$/ ##/;p;x;p;x' <<_ASBOX\n## Running $as_me. ##\n_ASBOX\n  $as_echo \"$ac_log\"\n} >&5\n\n_ACEOF\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n#\n# INIT-COMMANDS\n#\nAMDEP_TRUE=\"$AMDEP_TRUE\" ac_aux_dir=\"$ac_aux_dir\"\n\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nsed_quote_subst='$sed_quote_subst'\ndouble_quote_subst='$double_quote_subst'\ndelay_variable_subst='$delay_variable_subst'\nmacro_version='`$ECHO \"$macro_version\" | $SED \"$delay_single_quote_subst\"`'\nmacro_revision='`$ECHO \"$macro_revision\" | $SED \"$delay_single_quote_subst\"`'\nenable_shared='`$ECHO \"$enable_shared\" | $SED \"$delay_single_quote_subst\"`'\nenable_static='`$ECHO \"$enable_static\" | $SED \"$delay_single_quote_subst\"`'\npic_mode='`$ECHO \"$pic_mode\" | $SED \"$delay_single_quote_subst\"`'\nenable_fast_install='`$ECHO \"$enable_fast_install\" | $SED \"$delay_single_quote_subst\"`'\nSHELL='`$ECHO \"$SHELL\" | $SED \"$delay_single_quote_subst\"`'\nECHO='`$ECHO \"$ECHO\" | $SED \"$delay_single_quote_subst\"`'\nPATH_SEPARATOR='`$ECHO \"$PATH_SEPARATOR\" | $SED \"$delay_single_quote_subst\"`'\nhost_alias='`$ECHO \"$host_alias\" | $SED \"$delay_single_quote_subst\"`'\nhost='`$ECHO \"$host\" | $SED \"$delay_single_quote_subst\"`'\nhost_os='`$ECHO \"$host_os\" | $SED \"$delay_single_quote_subst\"`'\nbuild_alias='`$ECHO \"$build_alias\" | $SED \"$delay_single_quote_subst\"`'\nbuild='`$ECHO \"$build\" | $SED \"$delay_single_quote_subst\"`'\nbuild_os='`$ECHO \"$build_os\" | $SED \"$delay_single_quote_subst\"`'\nSED='`$ECHO \"$SED\" | $SED \"$delay_single_quote_subst\"`'\nXsed='`$ECHO \"$Xsed\" | $SED \"$delay_single_quote_subst\"`'\nGREP='`$ECHO \"$GREP\" | $SED \"$delay_single_quote_subst\"`'\nEGREP='`$ECHO \"$EGREP\" | $SED \"$delay_single_quote_subst\"`'\nFGREP='`$ECHO \"$FGREP\" | $SED \"$delay_single_quote_subst\"`'\nLD='`$ECHO \"$LD\" | $SED \"$delay_single_quote_subst\"`'\nNM='`$ECHO \"$NM\" | $SED \"$delay_single_quote_subst\"`'\nLN_S='`$ECHO \"$LN_S\" | $SED \"$delay_single_quote_subst\"`'\nmax_cmd_len='`$ECHO \"$max_cmd_len\" | $SED \"$delay_single_quote_subst\"`'\nac_objext='`$ECHO \"$ac_objext\" | $SED \"$delay_single_quote_subst\"`'\nexeext='`$ECHO \"$exeext\" | $SED \"$delay_single_quote_subst\"`'\nlt_unset='`$ECHO \"$lt_unset\" | $SED \"$delay_single_quote_subst\"`'\nlt_SP2NL='`$ECHO \"$lt_SP2NL\" | $SED \"$delay_single_quote_subst\"`'\nlt_NL2SP='`$ECHO \"$lt_NL2SP\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_to_host_file_cmd='`$ECHO \"$lt_cv_to_host_file_cmd\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_to_tool_file_cmd='`$ECHO \"$lt_cv_to_tool_file_cmd\" | $SED \"$delay_single_quote_subst\"`'\nreload_flag='`$ECHO \"$reload_flag\" | $SED \"$delay_single_quote_subst\"`'\nreload_cmds='`$ECHO \"$reload_cmds\" | $SED \"$delay_single_quote_subst\"`'\nOBJDUMP='`$ECHO \"$OBJDUMP\" | $SED \"$delay_single_quote_subst\"`'\ndeplibs_check_method='`$ECHO \"$deplibs_check_method\" | $SED \"$delay_single_quote_subst\"`'\nfile_magic_cmd='`$ECHO \"$file_magic_cmd\" | $SED \"$delay_single_quote_subst\"`'\nfile_magic_glob='`$ECHO \"$file_magic_glob\" | $SED \"$delay_single_quote_subst\"`'\nwant_nocaseglob='`$ECHO \"$want_nocaseglob\" | $SED \"$delay_single_quote_subst\"`'\nDLLTOOL='`$ECHO \"$DLLTOOL\" | $SED \"$delay_single_quote_subst\"`'\nsharedlib_from_linklib_cmd='`$ECHO \"$sharedlib_from_linklib_cmd\" | $SED \"$delay_single_quote_subst\"`'\nAR='`$ECHO \"$AR\" | $SED \"$delay_single_quote_subst\"`'\nAR_FLAGS='`$ECHO \"$AR_FLAGS\" | $SED \"$delay_single_quote_subst\"`'\narchiver_list_spec='`$ECHO \"$archiver_list_spec\" | $SED \"$delay_single_quote_subst\"`'\nSTRIP='`$ECHO \"$STRIP\" | $SED \"$delay_single_quote_subst\"`'\nRANLIB='`$ECHO \"$RANLIB\" | $SED \"$delay_single_quote_subst\"`'\nold_postinstall_cmds='`$ECHO \"$old_postinstall_cmds\" | $SED \"$delay_single_quote_subst\"`'\nold_postuninstall_cmds='`$ECHO \"$old_postuninstall_cmds\" | $SED \"$delay_single_quote_subst\"`'\nold_archive_cmds='`$ECHO \"$old_archive_cmds\" | $SED \"$delay_single_quote_subst\"`'\nlock_old_archive_extraction='`$ECHO \"$lock_old_archive_extraction\" | $SED \"$delay_single_quote_subst\"`'\nCC='`$ECHO \"$CC\" | $SED \"$delay_single_quote_subst\"`'\nCFLAGS='`$ECHO \"$CFLAGS\" | $SED \"$delay_single_quote_subst\"`'\ncompiler='`$ECHO \"$compiler\" | $SED \"$delay_single_quote_subst\"`'\nGCC='`$ECHO \"$GCC\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_sys_global_symbol_pipe='`$ECHO \"$lt_cv_sys_global_symbol_pipe\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_sys_global_symbol_to_cdecl='`$ECHO \"$lt_cv_sys_global_symbol_to_cdecl\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_sys_global_symbol_to_c_name_address='`$ECHO \"$lt_cv_sys_global_symbol_to_c_name_address\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix='`$ECHO \"$lt_cv_sys_global_symbol_to_c_name_address_lib_prefix\" | $SED \"$delay_single_quote_subst\"`'\nnm_file_list_spec='`$ECHO \"$nm_file_list_spec\" | $SED \"$delay_single_quote_subst\"`'\nlt_sysroot='`$ECHO \"$lt_sysroot\" | $SED \"$delay_single_quote_subst\"`'\nobjdir='`$ECHO \"$objdir\" | $SED \"$delay_single_quote_subst\"`'\nMAGIC_CMD='`$ECHO \"$MAGIC_CMD\" | $SED \"$delay_single_quote_subst\"`'\nlt_prog_compiler_no_builtin_flag='`$ECHO \"$lt_prog_compiler_no_builtin_flag\" | $SED \"$delay_single_quote_subst\"`'\nlt_prog_compiler_pic='`$ECHO \"$lt_prog_compiler_pic\" | $SED \"$delay_single_quote_subst\"`'\nlt_prog_compiler_wl='`$ECHO \"$lt_prog_compiler_wl\" | $SED \"$delay_single_quote_subst\"`'\nlt_prog_compiler_static='`$ECHO \"$lt_prog_compiler_static\" | $SED \"$delay_single_quote_subst\"`'\nlt_cv_prog_compiler_c_o='`$ECHO \"$lt_cv_prog_compiler_c_o\" | $SED \"$delay_single_quote_subst\"`'\nneed_locks='`$ECHO \"$need_locks\" | $SED \"$delay_single_quote_subst\"`'\nMANIFEST_TOOL='`$ECHO \"$MANIFEST_TOOL\" | $SED \"$delay_single_quote_subst\"`'\nDSYMUTIL='`$ECHO \"$DSYMUTIL\" | $SED \"$delay_single_quote_subst\"`'\nNMEDIT='`$ECHO \"$NMEDIT\" | $SED \"$delay_single_quote_subst\"`'\nLIPO='`$ECHO \"$LIPO\" | $SED \"$delay_single_quote_subst\"`'\nOTOOL='`$ECHO \"$OTOOL\" | $SED \"$delay_single_quote_subst\"`'\nOTOOL64='`$ECHO \"$OTOOL64\" | $SED \"$delay_single_quote_subst\"`'\nlibext='`$ECHO \"$libext\" | $SED \"$delay_single_quote_subst\"`'\nshrext_cmds='`$ECHO \"$shrext_cmds\" | $SED \"$delay_single_quote_subst\"`'\nextract_expsyms_cmds='`$ECHO \"$extract_expsyms_cmds\" | $SED \"$delay_single_quote_subst\"`'\narchive_cmds_need_lc='`$ECHO \"$archive_cmds_need_lc\" | $SED \"$delay_single_quote_subst\"`'\nenable_shared_with_static_runtimes='`$ECHO \"$enable_shared_with_static_runtimes\" | $SED \"$delay_single_quote_subst\"`'\nexport_dynamic_flag_spec='`$ECHO \"$export_dynamic_flag_spec\" | $SED \"$delay_single_quote_subst\"`'\nwhole_archive_flag_spec='`$ECHO \"$whole_archive_flag_spec\" | $SED \"$delay_single_quote_subst\"`'\ncompiler_needs_object='`$ECHO \"$compiler_needs_object\" | $SED \"$delay_single_quote_subst\"`'\nold_archive_from_new_cmds='`$ECHO \"$old_archive_from_new_cmds\" | $SED \"$delay_single_quote_subst\"`'\nold_archive_from_expsyms_cmds='`$ECHO \"$old_archive_from_expsyms_cmds\" | $SED \"$delay_single_quote_subst\"`'\narchive_cmds='`$ECHO \"$archive_cmds\" | $SED \"$delay_single_quote_subst\"`'\narchive_expsym_cmds='`$ECHO \"$archive_expsym_cmds\" | $SED \"$delay_single_quote_subst\"`'\nmodule_cmds='`$ECHO \"$module_cmds\" | $SED \"$delay_single_quote_subst\"`'\nmodule_expsym_cmds='`$ECHO \"$module_expsym_cmds\" | $SED \"$delay_single_quote_subst\"`'\nwith_gnu_ld='`$ECHO \"$with_gnu_ld\" | $SED \"$delay_single_quote_subst\"`'\nallow_undefined_flag='`$ECHO \"$allow_undefined_flag\" | $SED \"$delay_single_quote_subst\"`'\nno_undefined_flag='`$ECHO \"$no_undefined_flag\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_libdir_flag_spec='`$ECHO \"$hardcode_libdir_flag_spec\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_libdir_separator='`$ECHO \"$hardcode_libdir_separator\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_direct='`$ECHO \"$hardcode_direct\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_direct_absolute='`$ECHO \"$hardcode_direct_absolute\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_minus_L='`$ECHO \"$hardcode_minus_L\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_shlibpath_var='`$ECHO \"$hardcode_shlibpath_var\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_automatic='`$ECHO \"$hardcode_automatic\" | $SED \"$delay_single_quote_subst\"`'\ninherit_rpath='`$ECHO \"$inherit_rpath\" | $SED \"$delay_single_quote_subst\"`'\nlink_all_deplibs='`$ECHO \"$link_all_deplibs\" | $SED \"$delay_single_quote_subst\"`'\nalways_export_symbols='`$ECHO \"$always_export_symbols\" | $SED \"$delay_single_quote_subst\"`'\nexport_symbols_cmds='`$ECHO \"$export_symbols_cmds\" | $SED \"$delay_single_quote_subst\"`'\nexclude_expsyms='`$ECHO \"$exclude_expsyms\" | $SED \"$delay_single_quote_subst\"`'\ninclude_expsyms='`$ECHO \"$include_expsyms\" | $SED \"$delay_single_quote_subst\"`'\nprelink_cmds='`$ECHO \"$prelink_cmds\" | $SED \"$delay_single_quote_subst\"`'\npostlink_cmds='`$ECHO \"$postlink_cmds\" | $SED \"$delay_single_quote_subst\"`'\nfile_list_spec='`$ECHO \"$file_list_spec\" | $SED \"$delay_single_quote_subst\"`'\nvariables_saved_for_relink='`$ECHO \"$variables_saved_for_relink\" | $SED \"$delay_single_quote_subst\"`'\nneed_lib_prefix='`$ECHO \"$need_lib_prefix\" | $SED \"$delay_single_quote_subst\"`'\nneed_version='`$ECHO \"$need_version\" | $SED \"$delay_single_quote_subst\"`'\nversion_type='`$ECHO \"$version_type\" | $SED \"$delay_single_quote_subst\"`'\nrunpath_var='`$ECHO \"$runpath_var\" | $SED \"$delay_single_quote_subst\"`'\nshlibpath_var='`$ECHO \"$shlibpath_var\" | $SED \"$delay_single_quote_subst\"`'\nshlibpath_overrides_runpath='`$ECHO \"$shlibpath_overrides_runpath\" | $SED \"$delay_single_quote_subst\"`'\nlibname_spec='`$ECHO \"$libname_spec\" | $SED \"$delay_single_quote_subst\"`'\nlibrary_names_spec='`$ECHO \"$library_names_spec\" | $SED \"$delay_single_quote_subst\"`'\nsoname_spec='`$ECHO \"$soname_spec\" | $SED \"$delay_single_quote_subst\"`'\ninstall_override_mode='`$ECHO \"$install_override_mode\" | $SED \"$delay_single_quote_subst\"`'\npostinstall_cmds='`$ECHO \"$postinstall_cmds\" | $SED \"$delay_single_quote_subst\"`'\npostuninstall_cmds='`$ECHO \"$postuninstall_cmds\" | $SED \"$delay_single_quote_subst\"`'\nfinish_cmds='`$ECHO \"$finish_cmds\" | $SED \"$delay_single_quote_subst\"`'\nfinish_eval='`$ECHO \"$finish_eval\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_into_libs='`$ECHO \"$hardcode_into_libs\" | $SED \"$delay_single_quote_subst\"`'\nsys_lib_search_path_spec='`$ECHO \"$sys_lib_search_path_spec\" | $SED \"$delay_single_quote_subst\"`'\nsys_lib_dlsearch_path_spec='`$ECHO \"$sys_lib_dlsearch_path_spec\" | $SED \"$delay_single_quote_subst\"`'\nhardcode_action='`$ECHO \"$hardcode_action\" | $SED \"$delay_single_quote_subst\"`'\nenable_dlopen='`$ECHO \"$enable_dlopen\" | $SED \"$delay_single_quote_subst\"`'\nenable_dlopen_self='`$ECHO \"$enable_dlopen_self\" | $SED \"$delay_single_quote_subst\"`'\nenable_dlopen_self_static='`$ECHO \"$enable_dlopen_self_static\" | $SED \"$delay_single_quote_subst\"`'\nold_striplib='`$ECHO \"$old_striplib\" | $SED \"$delay_single_quote_subst\"`'\nstriplib='`$ECHO \"$striplib\" | $SED \"$delay_single_quote_subst\"`'\n\nLTCC='$LTCC'\nLTCFLAGS='$LTCFLAGS'\ncompiler='$compiler_DEFAULT'\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n\n# Quote evaled strings.\nfor var in SHELL \\\nECHO \\\nPATH_SEPARATOR \\\nSED \\\nGREP \\\nEGREP \\\nFGREP \\\nLD \\\nNM \\\nLN_S \\\nlt_SP2NL \\\nlt_NL2SP \\\nreload_flag \\\nOBJDUMP \\\ndeplibs_check_method \\\nfile_magic_cmd \\\nfile_magic_glob \\\nwant_nocaseglob \\\nDLLTOOL \\\nsharedlib_from_linklib_cmd \\\nAR \\\nAR_FLAGS \\\narchiver_list_spec \\\nSTRIP \\\nRANLIB \\\nCC \\\nCFLAGS \\\ncompiler \\\nlt_cv_sys_global_symbol_pipe \\\nlt_cv_sys_global_symbol_to_cdecl \\\nlt_cv_sys_global_symbol_to_c_name_address \\\nlt_cv_sys_global_symbol_to_c_name_address_lib_prefix \\\nnm_file_list_spec \\\nlt_prog_compiler_no_builtin_flag \\\nlt_prog_compiler_pic \\\nlt_prog_compiler_wl \\\nlt_prog_compiler_static \\\nlt_cv_prog_compiler_c_o \\\nneed_locks \\\nMANIFEST_TOOL \\\nDSYMUTIL \\\nNMEDIT \\\nLIPO \\\nOTOOL \\\nOTOOL64 \\\nshrext_cmds \\\nexport_dynamic_flag_spec \\\nwhole_archive_flag_spec \\\ncompiler_needs_object \\\nwith_gnu_ld \\\nallow_undefined_flag \\\nno_undefined_flag \\\nhardcode_libdir_flag_spec \\\nhardcode_libdir_separator \\\nexclude_expsyms \\\ninclude_expsyms \\\nfile_list_spec \\\nvariables_saved_for_relink \\\nlibname_spec \\\nlibrary_names_spec \\\nsoname_spec \\\ninstall_override_mode \\\nfinish_eval \\\nold_striplib \\\nstriplib; do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED \\\\\"\\\\\\$sed_quote_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\n# Double-quote double-evaled strings.\nfor var in reload_cmds \\\nold_postinstall_cmds \\\nold_postuninstall_cmds \\\nold_archive_cmds \\\nextract_expsyms_cmds \\\nold_archive_from_new_cmds \\\nold_archive_from_expsyms_cmds \\\narchive_cmds \\\narchive_expsym_cmds \\\nmodule_cmds \\\nmodule_expsym_cmds \\\nexport_symbols_cmds \\\nprelink_cmds \\\npostlink_cmds \\\npostinstall_cmds \\\npostuninstall_cmds \\\nfinish_cmds \\\nsys_lib_search_path_spec \\\nsys_lib_dlsearch_path_spec; do\n    case \\`eval \\\\\\\\\\$ECHO \\\\\\\\\"\"\\\\\\\\\\$\\$var\"\\\\\\\\\"\\` in\n    *[\\\\\\\\\\\\\\`\\\\\"\\\\\\$]*)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\`\\\\\\$ECHO \\\\\"\\\\\\$\\$var\\\\\" | \\\\\\$SED -e \\\\\"\\\\\\$double_quote_subst\\\\\" -e \\\\\"\\\\\\$sed_quote_subst\\\\\" -e \\\\\"\\\\\\$delay_variable_subst\\\\\"\\\\\\`\\\\\\\\\\\\\"\"\n      ;;\n    *)\n      eval \"lt_\\$var=\\\\\\\\\\\\\"\\\\\\$\\$var\\\\\\\\\\\\\"\"\n      ;;\n    esac\ndone\n\nac_aux_dir='$ac_aux_dir'\nxsi_shell='$xsi_shell'\nlt_shell_append='$lt_shell_append'\n\n# See if we are running on zsh, and set the options which allow our\n# commands through without removal of \\ escapes INIT.\nif test -n \"\\${ZSH_VERSION+set}\" ; then\n   setopt NO_GLOB_SUBST\nfi\n\n\n    PACKAGE='$PACKAGE'\n    VERSION='$VERSION'\n    TIMESTAMP='$TIMESTAMP'\n    RM='$RM'\n    ofile='$ofile'\n\n\n\n\n_ACEOF\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n\n# Handling of arguments.\nfor ac_config_target in $ac_config_targets\ndo\n  case $ac_config_target in\n    \"config.h\") CONFIG_HEADERS=\"$CONFIG_HEADERS config.h\" ;;\n    \"depfiles\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS depfiles\" ;;\n    \"libtool\") CONFIG_COMMANDS=\"$CONFIG_COMMANDS libtool\" ;;\n    \"Makefile\") CONFIG_FILES=\"$CONFIG_FILES Makefile\" ;;\n\n  *) as_fn_error $? \"invalid argument: \\`$ac_config_target'\" \"$LINENO\" 5;;\n  esac\ndone\n\n\n# If the user did not use the arguments to specify the items to instantiate,\n# then the envvar interface is used.  Set only those that are not.\n# We use the long form for the default assignment because of an extremely\n# bizarre bug on SunOS 4.1.3.\nif $ac_need_defaults; then\n  test \"${CONFIG_FILES+set}\" = set || CONFIG_FILES=$config_files\n  test \"${CONFIG_HEADERS+set}\" = set || CONFIG_HEADERS=$config_headers\n  test \"${CONFIG_COMMANDS+set}\" = set || CONFIG_COMMANDS=$config_commands\nfi\n\n# Have a temporary directory for convenience.  Make it in the build tree\n# simply because there is no reason against having it here, and in addition,\n# creating and moving files from /tmp can sometimes cause problems.\n# Hook for its removal unless debugging.\n# Note that there is a small window in which the directory will not be cleaned:\n# after its creation but before its name has been assigned to `$tmp'.\n$debug ||\n{\n  tmp= ac_tmp=\n  trap 'exit_status=$?\n  : \"${ac_tmp:=$tmp}\"\n  { test ! -d \"$ac_tmp\" || rm -fr \"$ac_tmp\"; } && exit $exit_status\n' 0\n  trap 'as_fn_exit 1' 1 2 13 15\n}\n# Create a (secure) tmp directory for tmp files.\n\n{\n  tmp=`(umask 077 && mktemp -d \"./confXXXXXX\") 2>/dev/null` &&\n  test -d \"$tmp\"\n}  ||\n{\n  tmp=./conf$$-$RANDOM\n  (umask 077 && mkdir \"$tmp\")\n} || as_fn_error $? \"cannot create a temporary directory in .\" \"$LINENO\" 5\nac_tmp=$tmp\n\n# Set up the scripts for CONFIG_FILES section.\n# No need to generate them if there are no CONFIG_FILES.\n# This happens for instance with `./config.status config.h'.\nif test -n \"$CONFIG_FILES\"; then\n\n\nac_cr=`echo X | tr X '\\015'`\n# On cygwin, bash can eat \\r inside `` if the user requested igncr.\n# But we know of no other shell where ac_cr would be empty at this\n# point, so we can use a bashism as a fallback.\nif test \"x$ac_cr\" = x; then\n  eval ac_cr=\\$\\'\\\\r\\'\nfi\nac_cs_awk_cr=`$AWK 'BEGIN { print \"a\\rb\" }' </dev/null 2>/dev/null`\nif test \"$ac_cs_awk_cr\" = \"a${ac_cr}b\"; then\n  ac_cs_awk_cr='\\\\r'\nelse\n  ac_cs_awk_cr=$ac_cr\nfi\n\necho 'BEGIN {' >\"$ac_tmp/subs1.awk\" &&\n_ACEOF\n\n\n{\n  echo \"cat >conf$$subs.awk <<_ACEOF\" &&\n  echo \"$ac_subst_vars\" | sed 's/.*/&!$&$ac_delim/' &&\n  echo \"_ACEOF\"\n} >conf$$subs.sh ||\n  as_fn_error $? \"could not make $CONFIG_STATUS\" \"$LINENO\" 5\nac_delim_num=`echo \"$ac_subst_vars\" | grep -c '^'`\nac_delim='%!_!# '\nfor ac_last_try in false false false false false :; do\n  . ./conf$$subs.sh ||\n    as_fn_error $? \"could not make $CONFIG_STATUS\" \"$LINENO\" 5\n\n  ac_delim_n=`sed -n \"s/.*$ac_delim\\$/X/p\" conf$$subs.awk | grep -c X`\n  if test $ac_delim_n = $ac_delim_num; then\n    break\n  elif $ac_last_try; then\n    as_fn_error $? \"could not make $CONFIG_STATUS\" \"$LINENO\" 5\n  else\n    ac_delim=\"$ac_delim!$ac_delim _$ac_delim!! \"\n  fi\ndone\nrm -f conf$$subs.sh\n\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\ncat >>\"\\$ac_tmp/subs1.awk\" <<\\\\_ACAWK &&\n_ACEOF\nsed -n '\nh\ns/^/S[\"/; s/!.*/\"]=/\np\ng\ns/^[^!]*!//\n:repl\nt repl\ns/'\"$ac_delim\"'$//\nt delim\n:nl\nh\ns/\\(.\\{148\\}\\)..*/\\1/\nt more1\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\\\\n\"\\\\/\np\nn\nb repl\n:more1\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\"\\\\/\np\ng\ns/.\\{148\\}//\nt nl\n:delim\nh\ns/\\(.\\{148\\}\\)..*/\\1/\nt more2\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\"/\np\nb\n:more2\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\"\\\\/\np\ng\ns/.\\{148\\}//\nt delim\n' <conf$$subs.awk | sed '\n/^[^\"\"]/{\n  N\n  s/\\n//\n}\n' >>$CONFIG_STATUS || ac_write_fail=1\nrm -f conf$$subs.awk\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n_ACAWK\ncat >>\"\\$ac_tmp/subs1.awk\" <<_ACAWK &&\n  for (key in S) S_is_set[key] = 1\n  FS = \"\u0007\"\n\n}\n{\n  line = $ 0\n  nfields = split(line, field, \"@\")\n  substed = 0\n  len = length(field[1])\n  for (i = 2; i < nfields; i++) {\n    key = field[i]\n    keylen = length(key)\n    if (S_is_set[key]) {\n      value = S[key]\n      line = substr(line, 1, len) \"\" value \"\" substr(line, len + keylen + 3)\n      len += length(value) + length(field[++i])\n      substed = 1\n    } else\n      len += 1 + keylen\n  }\n\n  print line\n}\n\n_ACAWK\n_ACEOF\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\nif sed \"s/$ac_cr//\" < /dev/null > /dev/null 2>&1; then\n  sed \"s/$ac_cr\\$//; s/$ac_cr/$ac_cs_awk_cr/g\"\nelse\n  cat\nfi < \"$ac_tmp/subs1.awk\" > \"$ac_tmp/subs.awk\" \\\n  || as_fn_error $? \"could not setup config files machinery\" \"$LINENO\" 5\n_ACEOF\n\n# VPATH may cause trouble with some makes, so we remove sole $(srcdir),\n# ${srcdir} and @srcdir@ entries from VPATH if srcdir is \".\", strip leading and\n# trailing colons and then remove the whole line if VPATH becomes empty\n# (actually we leave an empty line to preserve line numbers).\nif test \"x$srcdir\" = x.; then\n  ac_vpsub='/^[\t ]*VPATH[\t ]*=[\t ]*/{\nh\ns///\ns/^/:/\ns/[\t ]*$/:/\ns/:\\$(srcdir):/:/g\ns/:\\${srcdir}:/:/g\ns/:@srcdir@:/:/g\ns/^:*//\ns/:*$//\nx\ns/\\(=[\t ]*\\).*/\\1/\nG\ns/\\n//\ns/^[^=]*=[\t ]*$//\n}'\nfi\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\nfi # test -n \"$CONFIG_FILES\"\n\n# Set up the scripts for CONFIG_HEADERS section.\n# No need to generate them if there are no CONFIG_HEADERS.\n# This happens for instance with `./config.status Makefile'.\nif test -n \"$CONFIG_HEADERS\"; then\ncat >\"$ac_tmp/defines.awk\" <<\\_ACAWK ||\nBEGIN {\n_ACEOF\n\n# Transform confdefs.h into an awk script `defines.awk', embedded as\n# here-document in config.status, that substitutes the proper values into\n# config.h.in to produce config.h.\n\n# Create a delimiter string that does not exist in confdefs.h, to ease\n# handling of long lines.\nac_delim='%!_!# '\nfor ac_last_try in false false :; do\n  ac_tt=`sed -n \"/$ac_delim/p\" confdefs.h`\n  if test -z \"$ac_tt\"; then\n    break\n  elif $ac_last_try; then\n    as_fn_error $? \"could not make $CONFIG_HEADERS\" \"$LINENO\" 5\n  else\n    ac_delim=\"$ac_delim!$ac_delim _$ac_delim!! \"\n  fi\ndone\n\n# For the awk script, D is an array of macro values keyed by name,\n# likewise P contains macro parameters if any.  Preserve backslash\n# newline sequences.\n\nac_word_re=[_$as_cr_Letters][_$as_cr_alnum]*\nsed -n '\ns/.\\{148\\}/&'\"$ac_delim\"'/g\nt rset\n:rset\ns/^[\t ]*#[\t ]*define[\t ][\t ]*/ /\nt def\nd\n:def\ns/\\\\$//\nt bsnl\ns/[\"\\\\]/\\\\&/g\ns/^ \\('\"$ac_word_re\"'\\)\\(([^()]*)\\)[\t ]*\\(.*\\)/P[\"\\1\"]=\"\\2\"\\\nD[\"\\1\"]=\" \\3\"/p\ns/^ \\('\"$ac_word_re\"'\\)[\t ]*\\(.*\\)/D[\"\\1\"]=\" \\2\"/p\nd\n:bsnl\ns/[\"\\\\]/\\\\&/g\ns/^ \\('\"$ac_word_re\"'\\)\\(([^()]*)\\)[\t ]*\\(.*\\)/P[\"\\1\"]=\"\\2\"\\\nD[\"\\1\"]=\" \\3\\\\\\\\\\\\n\"\\\\/p\nt cont\ns/^ \\('\"$ac_word_re\"'\\)[\t ]*\\(.*\\)/D[\"\\1\"]=\" \\2\\\\\\\\\\\\n\"\\\\/p\nt cont\nd\n:cont\nn\ns/.\\{148\\}/&'\"$ac_delim\"'/g\nt clear\n:clear\ns/\\\\$//\nt bsnlc\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\"/p\nd\n:bsnlc\ns/[\"\\\\]/\\\\&/g; s/^/\"/; s/$/\\\\\\\\\\\\n\"\\\\/p\nb cont\n' <confdefs.h | sed '\ns/'\"$ac_delim\"'/\"\\\\\\\n\"/g' >>$CONFIG_STATUS || ac_write_fail=1\n\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n  for (key in D) D_is_set[key] = 1\n  FS = \"\u0007\"\n}\n/^[\\t ]*#[\\t ]*(define|undef)[\\t ]+$ac_word_re([\\t (]|\\$)/ {\n  line = \\$ 0\n  split(line, arg, \" \")\n  if (arg[1] == \"#\") {\n    defundef = arg[2]\n    mac1 = arg[3]\n  } else {\n    defundef = substr(arg[1], 2)\n    mac1 = arg[2]\n  }\n  split(mac1, mac2, \"(\") #)\n  macro = mac2[1]\n  prefix = substr(line, 1, index(line, defundef) - 1)\n  if (D_is_set[macro]) {\n    # Preserve the white space surrounding the \"#\".\n    print prefix \"define\", macro P[macro] D[macro]\n    next\n  } else {\n    # Replace #undef with comments.  This is necessary, for example,\n    # in the case of _POSIX_SOURCE, which is predefined and required\n    # on some systems where configure will not decide to define it.\n    if (defundef == \"undef\") {\n      print \"/*\", prefix defundef, macro, \"*/\"\n      next\n    }\n  }\n}\n{ print }\n_ACAWK\n_ACEOF\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n  as_fn_error $? \"could not setup config headers machinery\" \"$LINENO\" 5\nfi # test -n \"$CONFIG_HEADERS\"\n\n\neval set X \"  :F $CONFIG_FILES  :H $CONFIG_HEADERS    :C $CONFIG_COMMANDS\"\nshift\nfor ac_tag\ndo\n  case $ac_tag in\n  :[FHLC]) ac_mode=$ac_tag; continue;;\n  esac\n  case $ac_mode$ac_tag in\n  :[FHL]*:*);;\n  :L* | :C*:*) as_fn_error $? \"invalid tag \\`$ac_tag'\" \"$LINENO\" 5;;\n  :[FH]-) ac_tag=-:-;;\n  :[FH]*) ac_tag=$ac_tag:$ac_tag.in;;\n  esac\n  ac_save_IFS=$IFS\n  IFS=:\n  set x $ac_tag\n  IFS=$ac_save_IFS\n  shift\n  ac_file=$1\n  shift\n\n  case $ac_mode in\n  :L) ac_source=$1;;\n  :[FH])\n    ac_file_inputs=\n    for ac_f\n    do\n      case $ac_f in\n      -) ac_f=\"$ac_tmp/stdin\";;\n      *) # Look for the file first in the build tree, then in the source tree\n\t # (if the path is not absolute).  The absolute path cannot be DOS-style,\n\t # because $ac_f cannot contain `:'.\n\t test -f \"$ac_f\" ||\n\t   case $ac_f in\n\t   [\\\\/$]*) false;;\n\t   *) test -f \"$srcdir/$ac_f\" && ac_f=\"$srcdir/$ac_f\";;\n\t   esac ||\n\t   as_fn_error 1 \"cannot find input file: \\`$ac_f'\" \"$LINENO\" 5;;\n      esac\n      case $ac_f in *\\'*) ac_f=`$as_echo \"$ac_f\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;; esac\n      as_fn_append ac_file_inputs \" '$ac_f'\"\n    done\n\n    # Let's still pretend it is `configure' which instantiates (i.e., don't\n    # use $as_me), people would be surprised to read:\n    #    /* config.h.  Generated by config.status.  */\n    configure_input='Generated from '`\n\t  $as_echo \"$*\" | sed 's|^[^:]*/||;s|:[^:]*/|, |g'\n\t`' by configure.'\n    if test x\"$ac_file\" != x-; then\n      configure_input=\"$ac_file.  $configure_input\"\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: creating $ac_file\" >&5\n$as_echo \"$as_me: creating $ac_file\" >&6;}\n    fi\n    # Neutralize special characters interpreted by sed in replacement strings.\n    case $configure_input in #(\n    *\\&* | *\\|* | *\\\\* )\n       ac_sed_conf_input=`$as_echo \"$configure_input\" |\n       sed 's/[\\\\\\\\&|]/\\\\\\\\&/g'`;; #(\n    *) ac_sed_conf_input=$configure_input;;\n    esac\n\n    case $ac_tag in\n    *:-:* | *:-) cat >\"$ac_tmp/stdin\" \\\n      || as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5 ;;\n    esac\n    ;;\n  esac\n\n  ac_dir=`$as_dirname -- \"$ac_file\" ||\n$as_expr X\"$ac_file\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$ac_file\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$ac_file\" : 'X\\(//\\)$' \\| \\\n\t X\"$ac_file\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$ac_file\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n  as_dir=\"$ac_dir\"; as_fn_mkdir_p\n  ac_builddir=.\n\ncase \"$ac_dir\" in\n.) ac_dir_suffix= ac_top_builddir_sub=. ac_top_build_prefix= ;;\n*)\n  ac_dir_suffix=/`$as_echo \"$ac_dir\" | sed 's|^\\.[\\\\/]||'`\n  # A \"..\" for each directory in $ac_dir_suffix.\n  ac_top_builddir_sub=`$as_echo \"$ac_dir_suffix\" | sed 's|/[^\\\\/]*|/..|g;s|/||'`\n  case $ac_top_builddir_sub in\n  \"\") ac_top_builddir_sub=. ac_top_build_prefix= ;;\n  *)  ac_top_build_prefix=$ac_top_builddir_sub/ ;;\n  esac ;;\nesac\nac_abs_top_builddir=$ac_pwd\nac_abs_builddir=$ac_pwd$ac_dir_suffix\n# for backward compatibility:\nac_top_builddir=$ac_top_build_prefix\n\ncase $srcdir in\n  .)  # We are building in place.\n    ac_srcdir=.\n    ac_top_srcdir=$ac_top_builddir_sub\n    ac_abs_top_srcdir=$ac_pwd ;;\n  [\\\\/]* | ?:[\\\\/]* )  # Absolute name.\n    ac_srcdir=$srcdir$ac_dir_suffix;\n    ac_top_srcdir=$srcdir\n    ac_abs_top_srcdir=$srcdir ;;\n  *) # Relative name.\n    ac_srcdir=$ac_top_build_prefix$srcdir$ac_dir_suffix\n    ac_top_srcdir=$ac_top_build_prefix$srcdir\n    ac_abs_top_srcdir=$ac_pwd/$srcdir ;;\nesac\nac_abs_srcdir=$ac_abs_top_srcdir$ac_dir_suffix\n\n\n  case $ac_mode in\n  :F)\n  #\n  # CONFIG_FILE\n  #\n\n  case $INSTALL in\n  [\\\\/$]* | ?:[\\\\/]* ) ac_INSTALL=$INSTALL ;;\n  *) ac_INSTALL=$ac_top_build_prefix$INSTALL ;;\n  esac\n  ac_MKDIR_P=$MKDIR_P\n  case $MKDIR_P in\n  [\\\\/$]* | ?:[\\\\/]* ) ;;\n  */*) ac_MKDIR_P=$ac_top_build_prefix$MKDIR_P ;;\n  esac\n_ACEOF\n\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n# If the template does not know about datarootdir, expand it.\n# FIXME: This hack should be removed a few years after 2.60.\nac_datarootdir_hack=; ac_datarootdir_seen=\nac_sed_dataroot='\n/datarootdir/ {\n  p\n  q\n}\n/@datadir@/p\n/@docdir@/p\n/@infodir@/p\n/@localedir@/p\n/@mandir@/p'\ncase `eval \"sed -n \\\"\\$ac_sed_dataroot\\\" $ac_file_inputs\"` in\n*datarootdir*) ac_datarootdir_seen=yes;;\n*@datadir@*|*@docdir@*|*@infodir@*|*@localedir@*|*@mandir@*)\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting\" >&5\n$as_echo \"$as_me: WARNING: $ac_file_inputs seems to ignore the --datarootdir setting\" >&2;}\n_ACEOF\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\n  ac_datarootdir_hack='\n  s&@datadir@&$datadir&g\n  s&@docdir@&$docdir&g\n  s&@infodir@&$infodir&g\n  s&@localedir@&$localedir&g\n  s&@mandir@&$mandir&g\n  s&\\\\\\${datarootdir}&$datarootdir&g' ;;\nesac\n_ACEOF\n\n# Neutralize VPATH when `$srcdir' = `.'.\n# Shell code in configure.ac might set extrasub.\n# FIXME: do we really want to maintain this feature?\ncat >>$CONFIG_STATUS <<_ACEOF || ac_write_fail=1\nac_sed_extra=\"$ac_vpsub\n$extrasub\n_ACEOF\ncat >>$CONFIG_STATUS <<\\_ACEOF || ac_write_fail=1\n:t\n/@[a-zA-Z_][a-zA-Z_0-9]*@/!b\ns|@configure_input@|$ac_sed_conf_input|;t t\ns&@top_builddir@&$ac_top_builddir_sub&;t t\ns&@top_build_prefix@&$ac_top_build_prefix&;t t\ns&@srcdir@&$ac_srcdir&;t t\ns&@abs_srcdir@&$ac_abs_srcdir&;t t\ns&@top_srcdir@&$ac_top_srcdir&;t t\ns&@abs_top_srcdir@&$ac_abs_top_srcdir&;t t\ns&@builddir@&$ac_builddir&;t t\ns&@abs_builddir@&$ac_abs_builddir&;t t\ns&@abs_top_builddir@&$ac_abs_top_builddir&;t t\ns&@INSTALL@&$ac_INSTALL&;t t\ns&@MKDIR_P@&$ac_MKDIR_P&;t t\n$ac_datarootdir_hack\n\"\neval sed \\\"\\$ac_sed_extra\\\" \"$ac_file_inputs\" | $AWK -f \"$ac_tmp/subs.awk\" \\\n  >$ac_tmp/out || as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5\n\ntest -z \"$ac_datarootdir_hack$ac_datarootdir_seen\" &&\n  { ac_out=`sed -n '/\\${datarootdir}/p' \"$ac_tmp/out\"`; test -n \"$ac_out\"; } &&\n  { ac_out=`sed -n '/^[\t ]*datarootdir[\t ]*:*=/p' \\\n      \"$ac_tmp/out\"`; test -z \"$ac_out\"; } &&\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: $ac_file contains a reference to the variable \\`datarootdir'\nwhich seems to be undefined.  Please make sure it is defined\" >&5\n$as_echo \"$as_me: WARNING: $ac_file contains a reference to the variable \\`datarootdir'\nwhich seems to be undefined.  Please make sure it is defined\" >&2;}\n\n  rm -f \"$ac_tmp/stdin\"\n  case $ac_file in\n  -) cat \"$ac_tmp/out\" && rm -f \"$ac_tmp/out\";;\n  *) rm -f \"$ac_file\" && mv \"$ac_tmp/out\" \"$ac_file\";;\n  esac \\\n  || as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5\n ;;\n  :H)\n  #\n  # CONFIG_HEADER\n  #\n  if test x\"$ac_file\" != x-; then\n    {\n      $as_echo \"/* $configure_input  */\" \\\n      && eval '$AWK -f \"$ac_tmp/defines.awk\"' \"$ac_file_inputs\"\n    } >\"$ac_tmp/config.h\" \\\n      || as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5\n    if diff \"$ac_file\" \"$ac_tmp/config.h\" >/dev/null 2>&1; then\n      { $as_echo \"$as_me:${as_lineno-$LINENO}: $ac_file is unchanged\" >&5\n$as_echo \"$as_me: $ac_file is unchanged\" >&6;}\n    else\n      rm -f \"$ac_file\"\n      mv \"$ac_tmp/config.h\" \"$ac_file\" \\\n\t|| as_fn_error $? \"could not create $ac_file\" \"$LINENO\" 5\n    fi\n  else\n    $as_echo \"/* $configure_input  */\" \\\n      && eval '$AWK -f \"$ac_tmp/defines.awk\"' \"$ac_file_inputs\" \\\n      || as_fn_error $? \"could not create -\" \"$LINENO\" 5\n  fi\n# Compute \"$ac_file\"'s index in $config_headers.\n_am_arg=\"$ac_file\"\n_am_stamp_count=1\nfor _am_header in $config_headers :; do\n  case $_am_header in\n    $_am_arg | $_am_arg:* )\n      break ;;\n    * )\n      _am_stamp_count=`expr $_am_stamp_count + 1` ;;\n  esac\ndone\necho \"timestamp for $_am_arg\" >`$as_dirname -- \"$_am_arg\" ||\n$as_expr X\"$_am_arg\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$_am_arg\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$_am_arg\" : 'X\\(//\\)$' \\| \\\n\t X\"$_am_arg\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$_am_arg\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`/stamp-h$_am_stamp_count\n ;;\n\n  :C)  { $as_echo \"$as_me:${as_lineno-$LINENO}: executing $ac_file commands\" >&5\n$as_echo \"$as_me: executing $ac_file commands\" >&6;}\n ;;\n  esac\n\n\n  case $ac_file$ac_mode in\n    \"depfiles\":C) test x\"$AMDEP_TRUE\" != x\"\" || {\n  # Older Autoconf quotes --file arguments for eval, but not when files\n  # are listed without --file.  Let's play safe and only enable the eval\n  # if we detect the quoting.\n  case $CONFIG_FILES in\n  *\\'*) eval set x \"$CONFIG_FILES\" ;;\n  *)   set x $CONFIG_FILES ;;\n  esac\n  shift\n  for mf\n  do\n    # Strip MF so we end up with the name of the file.\n    mf=`echo \"$mf\" | sed -e 's/:.*$//'`\n    # Check whether this is an Automake generated Makefile or not.\n    # We used to match only the files named 'Makefile.in', but\n    # some people rename them; so instead we look at the file content.\n    # Grep'ing the first line is not enough: some people post-process\n    # each Makefile.in and add a new line on top of each file to say so.\n    # Grep'ing the whole file is not good either: AIX grep has a line\n    # limit of 2048, but all sed's we know have understand at least 4000.\n    if sed -n 's,^#.*generated by automake.*,X,p' \"$mf\" | grep X >/dev/null 2>&1; then\n      dirpart=`$as_dirname -- \"$mf\" ||\n$as_expr X\"$mf\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$mf\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$mf\" : 'X\\(//\\)$' \\| \\\n\t X\"$mf\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$mf\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n    else\n      continue\n    fi\n    # Extract the definition of DEPDIR, am__include, and am__quote\n    # from the Makefile without running 'make'.\n    DEPDIR=`sed -n 's/^DEPDIR = //p' < \"$mf\"`\n    test -z \"$DEPDIR\" && continue\n    am__include=`sed -n 's/^am__include = //p' < \"$mf\"`\n    test -z \"$am__include\" && continue\n    am__quote=`sed -n 's/^am__quote = //p' < \"$mf\"`\n    # Find all dependency output files, they are included files with\n    # $(DEPDIR) in their names.  We invoke sed twice because it is the\n    # simplest approach to changing $(DEPDIR) to its actual value in the\n    # expansion.\n    for file in `sed -n \"\n      s/^$am__include $am__quote\\(.*(DEPDIR).*\\)$am__quote\"'$/\\1/p' <\"$mf\" | \\\n\t sed -e 's/\\$(DEPDIR)/'\"$DEPDIR\"'/g'`; do\n      # Make sure the directory exists.\n      test -f \"$dirpart/$file\" && continue\n      fdir=`$as_dirname -- \"$file\" ||\n$as_expr X\"$file\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t X\"$file\" : 'X\\(//\\)[^/]' \\| \\\n\t X\"$file\" : 'X\\(//\\)$' \\| \\\n\t X\"$file\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n$as_echo X\"$file\" |\n    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)[^/].*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\/\\)$/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  /^X\\(\\/\\).*/{\n\t    s//\\1/\n\t    q\n\t  }\n\t  s/.*/./; q'`\n      as_dir=$dirpart/$fdir; as_fn_mkdir_p\n      # echo \"creating $dirpart/$file\"\n      echo '# dummy' > \"$dirpart/$file\"\n    done\n  done\n}\n ;;\n    \"libtool\":C)\n\n    # See if we are running on zsh, and set the options which allow our\n    # commands through without removal of \\ escapes.\n    if test -n \"${ZSH_VERSION+set}\" ; then\n      setopt NO_GLOB_SUBST\n    fi\n\n    cfgfile=\"${ofile}T\"\n    trap \"$RM \\\"$cfgfile\\\"; exit 1\" 1 2 15\n    $RM \"$cfgfile\"\n\n    cat <<_LT_EOF >> \"$cfgfile\"\n#! $SHELL\n\n# `$ECHO \"$ofile\" | sed 's%^.*/%%'` - Provide generalized library-building support services.\n# Generated automatically by $as_me ($PACKAGE$TIMESTAMP) $VERSION\n# Libtool was configured on host `(hostname || uname -n) 2>/dev/null | sed 1q`:\n# NOTE: Changes made to this file will be lost: look at ltmain.sh.\n#\n#   Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005,\n#                 2006, 2007, 2008, 2009, 2010, 2011 Free Software\n#                 Foundation, Inc.\n#   Written by Gordon Matzigkeit, 1996\n#\n#   This file is part of GNU Libtool.\n#\n# GNU Libtool is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License as\n# published by the Free Software Foundation; either version 2 of\n# the License, or (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html, or\n# obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n\n# The names of the tagged configurations supported by this script.\navailable_tags=\"\"\n\n# ### BEGIN LIBTOOL CONFIG\n\n# Which release of libtool.m4 was used?\nmacro_version=$macro_version\nmacro_revision=$macro_revision\n\n# Whether or not to build shared libraries.\nbuild_libtool_libs=$enable_shared\n\n# Whether or not to build static libraries.\nbuild_old_libs=$enable_static\n\n# What type of objects to build.\npic_mode=$pic_mode\n\n# Whether or not to optimize for fast installation.\nfast_install=$enable_fast_install\n\n# Shell to use when invoking shell scripts.\nSHELL=$lt_SHELL\n\n# An echo program that protects backslashes.\nECHO=$lt_ECHO\n\n# The PATH separator for the build system.\nPATH_SEPARATOR=$lt_PATH_SEPARATOR\n\n# The host system.\nhost_alias=$host_alias\nhost=$host\nhost_os=$host_os\n\n# The build system.\nbuild_alias=$build_alias\nbuild=$build\nbuild_os=$build_os\n\n# A sed program that does not truncate output.\nSED=$lt_SED\n\n# Sed that helps us avoid accidentally triggering echo(1) options like -n.\nXsed=\"\\$SED -e 1s/^X//\"\n\n# A grep program that handles long lines.\nGREP=$lt_GREP\n\n# An ERE matcher.\nEGREP=$lt_EGREP\n\n# A literal string matcher.\nFGREP=$lt_FGREP\n\n# A BSD- or MS-compatible name lister.\nNM=$lt_NM\n\n# Whether we need soft or hard links.\nLN_S=$lt_LN_S\n\n# What is the maximum length of a command?\nmax_cmd_len=$max_cmd_len\n\n# Object file suffix (normally \"o\").\nobjext=$ac_objext\n\n# Executable file suffix (normally \"\").\nexeext=$exeext\n\n# whether the shell understands \"unset\".\nlt_unset=$lt_unset\n\n# turn spaces into newlines.\nSP2NL=$lt_lt_SP2NL\n\n# turn newlines into spaces.\nNL2SP=$lt_lt_NL2SP\n\n# convert \\$build file names to \\$host format.\nto_host_file_cmd=$lt_cv_to_host_file_cmd\n\n# convert \\$build files to toolchain format.\nto_tool_file_cmd=$lt_cv_to_tool_file_cmd\n\n# An object symbol dumper.\nOBJDUMP=$lt_OBJDUMP\n\n# Method to check whether dependent libraries are shared objects.\ndeplibs_check_method=$lt_deplibs_check_method\n\n# Command to use when deplibs_check_method = \"file_magic\".\nfile_magic_cmd=$lt_file_magic_cmd\n\n# How to find potential files when deplibs_check_method = \"file_magic\".\nfile_magic_glob=$lt_file_magic_glob\n\n# Find potential files using nocaseglob when deplibs_check_method = \"file_magic\".\nwant_nocaseglob=$lt_want_nocaseglob\n\n# DLL creation program.\nDLLTOOL=$lt_DLLTOOL\n\n# Command to associate shared and link libraries.\nsharedlib_from_linklib_cmd=$lt_sharedlib_from_linklib_cmd\n\n# The archiver.\nAR=$lt_AR\n\n# Flags to create an archive.\nAR_FLAGS=$lt_AR_FLAGS\n\n# How to feed a file listing to the archiver.\narchiver_list_spec=$lt_archiver_list_spec\n\n# A symbol stripping program.\nSTRIP=$lt_STRIP\n\n# Commands used to install an old-style archive.\nRANLIB=$lt_RANLIB\nold_postinstall_cmds=$lt_old_postinstall_cmds\nold_postuninstall_cmds=$lt_old_postuninstall_cmds\n\n# Whether to use a lock for old archive extraction.\nlock_old_archive_extraction=$lock_old_archive_extraction\n\n# A C compiler.\nLTCC=$lt_CC\n\n# LTCC compiler flags.\nLTCFLAGS=$lt_CFLAGS\n\n# Take the output of nm and produce a listing of raw symbols and C names.\nglobal_symbol_pipe=$lt_lt_cv_sys_global_symbol_pipe\n\n# Transform the output of nm in a proper C declaration.\nglobal_symbol_to_cdecl=$lt_lt_cv_sys_global_symbol_to_cdecl\n\n# Transform the output of nm in a C name address pair.\nglobal_symbol_to_c_name_address=$lt_lt_cv_sys_global_symbol_to_c_name_address\n\n# Transform the output of nm in a C name address pair when lib prefix is needed.\nglobal_symbol_to_c_name_address_lib_prefix=$lt_lt_cv_sys_global_symbol_to_c_name_address_lib_prefix\n\n# Specify filename containing input files for \\$NM.\nnm_file_list_spec=$lt_nm_file_list_spec\n\n# The root where to search for dependent libraries,and in which our libraries should be installed.\nlt_sysroot=$lt_sysroot\n\n# The name of the directory that contains temporary libtool files.\nobjdir=$objdir\n\n# Used to examine libraries when file_magic_cmd begins with \"file\".\nMAGIC_CMD=$MAGIC_CMD\n\n# Must we lock files when doing compilation?\nneed_locks=$lt_need_locks\n\n# Manifest tool.\nMANIFEST_TOOL=$lt_MANIFEST_TOOL\n\n# Tool to manipulate archived DWARF debug symbol files on Mac OS X.\nDSYMUTIL=$lt_DSYMUTIL\n\n# Tool to change global to local symbols on Mac OS X.\nNMEDIT=$lt_NMEDIT\n\n# Tool to manipulate fat objects and archives on Mac OS X.\nLIPO=$lt_LIPO\n\n# ldd/readelf like tool for Mach-O binaries on Mac OS X.\nOTOOL=$lt_OTOOL\n\n# ldd/readelf like tool for 64 bit Mach-O binaries on Mac OS X 10.4.\nOTOOL64=$lt_OTOOL64\n\n# Old archive suffix (normally \"a\").\nlibext=$libext\n\n# Shared library suffix (normally \".so\").\nshrext_cmds=$lt_shrext_cmds\n\n# The commands to extract the exported symbol list from a shared archive.\nextract_expsyms_cmds=$lt_extract_expsyms_cmds\n\n# Variables whose values should be saved in libtool wrapper scripts and\n# restored at link time.\nvariables_saved_for_relink=$lt_variables_saved_for_relink\n\n# Do we need the \"lib\" prefix for modules?\nneed_lib_prefix=$need_lib_prefix\n\n# Do we need a version for libraries?\nneed_version=$need_version\n\n# Library versioning type.\nversion_type=$version_type\n\n# Shared library runtime path variable.\nrunpath_var=$runpath_var\n\n# Shared library path variable.\nshlibpath_var=$shlibpath_var\n\n# Is shlibpath searched before the hard-coded library search path?\nshlibpath_overrides_runpath=$shlibpath_overrides_runpath\n\n# Format of library name prefix.\nlibname_spec=$lt_libname_spec\n\n# List of archive names.  First name is the real one, the rest are links.\n# The last name is the one that the linker finds with -lNAME\nlibrary_names_spec=$lt_library_names_spec\n\n# The coded name of the library, if different from the real name.\nsoname_spec=$lt_soname_spec\n\n# Permission mode override for installation of shared libraries.\ninstall_override_mode=$lt_install_override_mode\n\n# Command to use after installation of a shared archive.\npostinstall_cmds=$lt_postinstall_cmds\n\n# Command to use after uninstallation of a shared archive.\npostuninstall_cmds=$lt_postuninstall_cmds\n\n# Commands used to finish a libtool library installation in a directory.\nfinish_cmds=$lt_finish_cmds\n\n# As \"finish_cmds\", except a single script fragment to be evaled but\n# not shown.\nfinish_eval=$lt_finish_eval\n\n# Whether we should hardcode library paths into libraries.\nhardcode_into_libs=$hardcode_into_libs\n\n# Compile-time system search path for libraries.\nsys_lib_search_path_spec=$lt_sys_lib_search_path_spec\n\n# Run-time system search path for libraries.\nsys_lib_dlsearch_path_spec=$lt_sys_lib_dlsearch_path_spec\n\n# Whether dlopen is supported.\ndlopen_support=$enable_dlopen\n\n# Whether dlopen of programs is supported.\ndlopen_self=$enable_dlopen_self\n\n# Whether dlopen of statically linked programs is supported.\ndlopen_self_static=$enable_dlopen_self_static\n\n# Commands to strip libraries.\nold_striplib=$lt_old_striplib\nstriplib=$lt_striplib\n\n\n# The linker used to build libraries.\nLD=$lt_LD\n\n# How to create reloadable object files.\nreload_flag=$lt_reload_flag\nreload_cmds=$lt_reload_cmds\n\n# Commands used to build an old-style archive.\nold_archive_cmds=$lt_old_archive_cmds\n\n# A language specific compiler.\nCC=$lt_compiler\n\n# Is the compiler the GNU compiler?\nwith_gcc=$GCC\n\n# Compiler flag to turn off builtin functions.\nno_builtin_flag=$lt_lt_prog_compiler_no_builtin_flag\n\n# Additional compiler flags for building library objects.\npic_flag=$lt_lt_prog_compiler_pic\n\n# How to pass a linker flag through the compiler.\nwl=$lt_lt_prog_compiler_wl\n\n# Compiler flag to prevent dynamic linking.\nlink_static_flag=$lt_lt_prog_compiler_static\n\n# Does compiler simultaneously support -c and -o options?\ncompiler_c_o=$lt_lt_cv_prog_compiler_c_o\n\n# Whether or not to add -lc for building shared libraries.\nbuild_libtool_need_lc=$archive_cmds_need_lc\n\n# Whether or not to disallow shared libs when runtime libs are static.\nallow_libtool_libs_with_static_runtimes=$enable_shared_with_static_runtimes\n\n# Compiler flag to allow reflexive dlopens.\nexport_dynamic_flag_spec=$lt_export_dynamic_flag_spec\n\n# Compiler flag to generate shared objects directly from archives.\nwhole_archive_flag_spec=$lt_whole_archive_flag_spec\n\n# Whether the compiler copes with passing no objects directly.\ncompiler_needs_object=$lt_compiler_needs_object\n\n# Create an old-style archive from a shared archive.\nold_archive_from_new_cmds=$lt_old_archive_from_new_cmds\n\n# Create a temporary old-style archive to link instead of a shared archive.\nold_archive_from_expsyms_cmds=$lt_old_archive_from_expsyms_cmds\n\n# Commands used to build a shared archive.\narchive_cmds=$lt_archive_cmds\narchive_expsym_cmds=$lt_archive_expsym_cmds\n\n# Commands used to build a loadable module if different from building\n# a shared archive.\nmodule_cmds=$lt_module_cmds\nmodule_expsym_cmds=$lt_module_expsym_cmds\n\n# Whether we are building with GNU ld or not.\nwith_gnu_ld=$lt_with_gnu_ld\n\n# Flag that allows shared libraries with undefined symbols to be built.\nallow_undefined_flag=$lt_allow_undefined_flag\n\n# Flag that enforces no undefined symbols.\nno_undefined_flag=$lt_no_undefined_flag\n\n# Flag to hardcode \\$libdir into a binary during linking.\n# This must work even if \\$libdir does not exist\nhardcode_libdir_flag_spec=$lt_hardcode_libdir_flag_spec\n\n# Whether we need a single \"-rpath\" flag with a separated argument.\nhardcode_libdir_separator=$lt_hardcode_libdir_separator\n\n# Set to \"yes\" if using DIR/libNAME\\${shared_ext} during linking hardcodes\n# DIR into the resulting binary.\nhardcode_direct=$hardcode_direct\n\n# Set to \"yes\" if using DIR/libNAME\\${shared_ext} during linking hardcodes\n# DIR into the resulting binary and the resulting library dependency is\n# \"absolute\",i.e impossible to change by setting \\${shlibpath_var} if the\n# library is relocated.\nhardcode_direct_absolute=$hardcode_direct_absolute\n\n# Set to \"yes\" if using the -LDIR flag during linking hardcodes DIR\n# into the resulting binary.\nhardcode_minus_L=$hardcode_minus_L\n\n# Set to \"yes\" if using SHLIBPATH_VAR=DIR during linking hardcodes DIR\n# into the resulting binary.\nhardcode_shlibpath_var=$hardcode_shlibpath_var\n\n# Set to \"yes\" if building a shared library automatically hardcodes DIR\n# into the library and all subsequent libraries and executables linked\n# against it.\nhardcode_automatic=$hardcode_automatic\n\n# Set to yes if linker adds runtime paths of dependent libraries\n# to runtime path list.\ninherit_rpath=$inherit_rpath\n\n# Whether libtool must link a program against all its dependency libraries.\nlink_all_deplibs=$link_all_deplibs\n\n# Set to \"yes\" if exported symbols are required.\nalways_export_symbols=$always_export_symbols\n\n# The commands to list exported symbols.\nexport_symbols_cmds=$lt_export_symbols_cmds\n\n# Symbols that should not be listed in the preloaded symbols.\nexclude_expsyms=$lt_exclude_expsyms\n\n# Symbols that must always be exported.\ninclude_expsyms=$lt_include_expsyms\n\n# Commands necessary for linking programs (against libraries) with templates.\nprelink_cmds=$lt_prelink_cmds\n\n# Commands necessary for finishing linking programs.\npostlink_cmds=$lt_postlink_cmds\n\n# Specify filename containing input files.\nfile_list_spec=$lt_file_list_spec\n\n# How to hardcode a shared library path into an executable.\nhardcode_action=$hardcode_action\n\n# ### END LIBTOOL CONFIG\n\n_LT_EOF\n\n  case $host_os in\n  aix3*)\n    cat <<\\_LT_EOF >> \"$cfgfile\"\n# AIX sometimes has problems with the GCC collect2 program.  For some\n# reason, if we set the COLLECT_NAMES environment variable, the problems\n# vanish in a puff of smoke.\nif test \"X${COLLECT_NAMES+set}\" != Xset; then\n  COLLECT_NAMES=\n  export COLLECT_NAMES\nfi\n_LT_EOF\n    ;;\n  esac\n\n\nltmain=\"$ac_aux_dir/ltmain.sh\"\n\n\n  # We use sed instead of cat because bash on DJGPP gets confused if\n  # if finds mixed CR/LF and LF-only lines.  Since sed operates in\n  # text mode, it properly converts lines to CR/LF.  This bash problem\n  # is reportedly fixed, but why not run on old versions too?\n  sed '$q' \"$ltmain\" >> \"$cfgfile\" \\\n     || (rm -f \"$cfgfile\"; exit 1)\n\n  if test x\"$xsi_shell\" = xyes; then\n  sed -e '/^func_dirname ()$/,/^} # func_dirname /c\\\nfunc_dirname ()\\\n{\\\n\\    case ${1} in\\\n\\      */*) func_dirname_result=\"${1%/*}${2}\" ;;\\\n\\      *  ) func_dirname_result=\"${3}\" ;;\\\n\\    esac\\\n} # Extended-shell func_dirname implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_basename ()$/,/^} # func_basename /c\\\nfunc_basename ()\\\n{\\\n\\    func_basename_result=\"${1##*/}\"\\\n} # Extended-shell func_basename implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_dirname_and_basename ()$/,/^} # func_dirname_and_basename /c\\\nfunc_dirname_and_basename ()\\\n{\\\n\\    case ${1} in\\\n\\      */*) func_dirname_result=\"${1%/*}${2}\" ;;\\\n\\      *  ) func_dirname_result=\"${3}\" ;;\\\n\\    esac\\\n\\    func_basename_result=\"${1##*/}\"\\\n} # Extended-shell func_dirname_and_basename implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_stripname ()$/,/^} # func_stripname /c\\\nfunc_stripname ()\\\n{\\\n\\    # pdksh 5.2.14 does not do ${X%$Y} correctly if both X and Y are\\\n\\    # positional parameters, so assign one to ordinary parameter first.\\\n\\    func_stripname_result=${3}\\\n\\    func_stripname_result=${func_stripname_result#\"${1}\"}\\\n\\    func_stripname_result=${func_stripname_result%\"${2}\"}\\\n} # Extended-shell func_stripname implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_split_long_opt ()$/,/^} # func_split_long_opt /c\\\nfunc_split_long_opt ()\\\n{\\\n\\    func_split_long_opt_name=${1%%=*}\\\n\\    func_split_long_opt_arg=${1#*=}\\\n} # Extended-shell func_split_long_opt implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_split_short_opt ()$/,/^} # func_split_short_opt /c\\\nfunc_split_short_opt ()\\\n{\\\n\\    func_split_short_opt_arg=${1#??}\\\n\\    func_split_short_opt_name=${1%\"$func_split_short_opt_arg\"}\\\n} # Extended-shell func_split_short_opt implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_lo2o ()$/,/^} # func_lo2o /c\\\nfunc_lo2o ()\\\n{\\\n\\    case ${1} in\\\n\\      *.lo) func_lo2o_result=${1%.lo}.${objext} ;;\\\n\\      *)    func_lo2o_result=${1} ;;\\\n\\    esac\\\n} # Extended-shell func_lo2o implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_xform ()$/,/^} # func_xform /c\\\nfunc_xform ()\\\n{\\\n    func_xform_result=${1%.*}.lo\\\n} # Extended-shell func_xform implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_arith ()$/,/^} # func_arith /c\\\nfunc_arith ()\\\n{\\\n    func_arith_result=$(( $* ))\\\n} # Extended-shell func_arith implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_len ()$/,/^} # func_len /c\\\nfunc_len ()\\\n{\\\n    func_len_result=${#1}\\\n} # Extended-shell func_len implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\nfi\n\nif test x\"$lt_shell_append\" = xyes; then\n  sed -e '/^func_append ()$/,/^} # func_append /c\\\nfunc_append ()\\\n{\\\n    eval \"${1}+=\\\\${2}\"\\\n} # Extended-shell func_append implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  sed -e '/^func_append_quoted ()$/,/^} # func_append_quoted /c\\\nfunc_append_quoted ()\\\n{\\\n\\    func_quote_for_eval \"${2}\"\\\n\\    eval \"${1}+=\\\\\\\\ \\\\$func_quote_for_eval_result\"\\\n} # Extended-shell func_append_quoted implementation' \"$cfgfile\" > $cfgfile.tmp \\\n  && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n    || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\ntest 0 -eq $? || _lt_function_replace_fail=:\n\n\n  # Save a `func_append' function call where possible by direct use of '+='\n  sed -e 's%func_append \\([a-zA-Z_]\\{1,\\}\\) \"%\\1+=\"%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nelse\n  # Save a `func_append' function call even when '+=' is not available\n  sed -e 's%func_append \\([a-zA-Z_]\\{1,\\}\\) \"%\\1=\"$\\1%g' $cfgfile > $cfgfile.tmp \\\n    && mv -f \"$cfgfile.tmp\" \"$cfgfile\" \\\n      || (rm -f \"$cfgfile\" && cp \"$cfgfile.tmp\" \"$cfgfile\" && rm -f \"$cfgfile.tmp\")\n  test 0 -eq $? || _lt_function_replace_fail=:\nfi\n\nif test x\"$_lt_function_replace_fail\" = x\":\"; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: Unable to substitute extended shell functions in $ofile\" >&5\n$as_echo \"$as_me: WARNING: Unable to substitute extended shell functions in $ofile\" >&2;}\nfi\n\n\n   mv -f \"$cfgfile\" \"$ofile\" ||\n    (rm -f \"$ofile\" && cp \"$cfgfile\" \"$ofile\" && rm -f \"$cfgfile\")\n  chmod +x \"$ofile\"\n\n ;;\n\n  esac\ndone # for ac_tag\n\n\nas_fn_exit 0\n_ACEOF\nac_clean_files=$ac_clean_files_save\n\ntest $ac_write_fail = 0 ||\n  as_fn_error $? \"write failure creating $CONFIG_STATUS\" \"$LINENO\" 5\n\n\n# configure is writing to config.log, and then calls config.status.\n# config.status does its own redirection, appending to config.log.\n# Unfortunately, on DOS this fails, as config.log is still kept open\n# by configure, so config.status won't be able to write to it; its\n# output is simply discarded.  So we exec the FD to /dev/null,\n# effectively closing config.log, so it can be properly (re)opened and\n# appended to by config.status.  When coming back to configure, we\n# need to make the FD available again.\nif test \"$no_create\" != yes; then\n  ac_cs_success=:\n  ac_config_status_args=\n  test \"$silent\" = yes &&\n    ac_config_status_args=\"$ac_config_status_args --quiet\"\n  exec 5>/dev/null\n  $SHELL $CONFIG_STATUS $ac_config_status_args || ac_cs_success=false\n  exec 5>>config.log\n  # Use ||, not &&, to avoid exiting from the if with $? = 1, which\n  # would make configure fail if this is the last instruction.\n  $ac_cs_success || as_fn_exit 1\nfi\nif test -n \"$ac_unrecognized_opts\" && test \"$enable_option_checking\" != no; then\n  { $as_echo \"$as_me:${as_lineno-$LINENO}: WARNING: unrecognized options: $ac_unrecognized_opts\" >&5\n$as_echo \"$as_me: WARNING: unrecognized options: $ac_unrecognized_opts\" >&2;}\nfi\n\n"
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 0.396484375,
          "content": "AC_INIT\n\norig_CFLAGS=\"$CFLAGS\"\n\nAC_CONFIG_SRCDIR([ev_epoll.c])\n\ndnl also update ev.h!\nAM_INIT_AUTOMAKE(libev,4.22)\nAC_CONFIG_HEADERS([config.h])\nAM_MAINTAINER_MODE\n\nAC_PROG_CC\n\ndnl Supply default CFLAGS, if not specified\nif test -z \"$orig_CFLAGS\"; then\n  if test x$GCC = xyes; then\n    CFLAGS=\"-g -O3\"\n  fi\nfi\n\nAC_PROG_INSTALL\nAC_PROG_LIBTOOL\n\nm4_include([libev.m4])\n\nAC_CONFIG_FILES([Makefile])\nAC_OUTPUT\n"
        },
        {
          "name": "depcomp",
          "type": "blob",
          "size": 23.013671875,
          "content": "#! /bin/sh\n# depcomp - compile a program generating dependencies as side-effects\n\nscriptversion=2013-05-30.07; # UTC\n\n# Copyright (C) 1999-2013 Free Software Foundation, Inc.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\n# Originally written by Alexandre Oliva <oliva@dcc.unicamp.br>.\n\ncase $1 in\n  '')\n    echo \"$0: No command.  Try '$0 --help' for more information.\" 1>&2\n    exit 1;\n    ;;\n  -h | --h*)\n    cat <<\\EOF\nUsage: depcomp [--help] [--version] PROGRAM [ARGS]\n\nRun PROGRAMS ARGS to compile a file, generating dependencies\nas side-effects.\n\nEnvironment variables:\n  depmode     Dependency tracking mode.\n  source      Source file read by 'PROGRAMS ARGS'.\n  object      Object file output by 'PROGRAMS ARGS'.\n  DEPDIR      directory where to store dependencies.\n  depfile     Dependency file to output.\n  tmpdepfile  Temporary file to use when outputting dependencies.\n  libtool     Whether libtool is used (yes/no).\n\nReport bugs to <bug-automake@gnu.org>.\nEOF\n    exit $?\n    ;;\n  -v | --v*)\n    echo \"depcomp $scriptversion\"\n    exit $?\n    ;;\nesac\n\n# Get the directory component of the given path, and save it in the\n# global variables '$dir'.  Note that this directory component will\n# be either empty or ending with a '/' character.  This is deliberate.\nset_dir_from ()\n{\n  case $1 in\n    */*) dir=`echo \"$1\" | sed -e 's|/[^/]*$|/|'`;;\n      *) dir=;;\n  esac\n}\n\n# Get the suffix-stripped basename of the given path, and save it the\n# global variable '$base'.\nset_base_from ()\n{\n  base=`echo \"$1\" | sed -e 's|^.*/||' -e 's/\\.[^.]*$//'`\n}\n\n# If no dependency file was actually created by the compiler invocation,\n# we still have to create a dummy depfile, to avoid errors with the\n# Makefile \"include basename.Plo\" scheme.\nmake_dummy_depfile ()\n{\n  echo \"#dummy\" > \"$depfile\"\n}\n\n# Factor out some common post-processing of the generated depfile.\n# Requires the auxiliary global variable '$tmpdepfile' to be set.\naix_post_process_depfile ()\n{\n  # If the compiler actually managed to produce a dependency file,\n  # post-process it.\n  if test -f \"$tmpdepfile\"; then\n    # Each line is of the form 'foo.o: dependency.h'.\n    # Do two passes, one to just change these to\n    #   $object: dependency.h\n    # and one to simply output\n    #   dependency.h:\n    # which is needed to avoid the deleted-header problem.\n    { sed -e \"s,^.*\\.[$lower]*:,$object:,\" < \"$tmpdepfile\"\n      sed -e \"s,^.*\\.[$lower]*:[$tab ]*,,\" -e 's,$,:,' < \"$tmpdepfile\"\n    } > \"$depfile\"\n    rm -f \"$tmpdepfile\"\n  else\n    make_dummy_depfile\n  fi\n}\n\n# A tabulation character.\ntab='\t'\n# A newline character.\nnl='\n'\n# Character ranges might be problematic outside the C locale.\n# These definitions help.\nupper=ABCDEFGHIJKLMNOPQRSTUVWXYZ\nlower=abcdefghijklmnopqrstuvwxyz\ndigits=0123456789\nalpha=${upper}${lower}\n\nif test -z \"$depmode\" || test -z \"$source\" || test -z \"$object\"; then\n  echo \"depcomp: Variables source, object and depmode must be set\" 1>&2\n  exit 1\nfi\n\n# Dependencies for sub/bar.o or sub/bar.obj go into sub/.deps/bar.Po.\ndepfile=${depfile-`echo \"$object\" |\n  sed 's|[^\\\\/]*$|'${DEPDIR-.deps}'/&|;s|\\.\\([^.]*\\)$|.P\\1|;s|Pobj$|Po|'`}\ntmpdepfile=${tmpdepfile-`echo \"$depfile\" | sed 's/\\.\\([^.]*\\)$/.T\\1/'`}\n\nrm -f \"$tmpdepfile\"\n\n# Avoid interferences from the environment.\ngccflag= dashmflag=\n\n# Some modes work just like other modes, but use different flags.  We\n# parameterize here, but still list the modes in the big case below,\n# to make depend.m4 easier to write.  Note that we *cannot* use a case\n# here, because this file can only contain one case statement.\nif test \"$depmode\" = hp; then\n  # HP compiler uses -M and no extra arg.\n  gccflag=-M\n  depmode=gcc\nfi\n\nif test \"$depmode\" = dashXmstdout; then\n  # This is just like dashmstdout with a different argument.\n  dashmflag=-xM\n  depmode=dashmstdout\nfi\n\ncygpath_u=\"cygpath -u -f -\"\nif test \"$depmode\" = msvcmsys; then\n  # This is just like msvisualcpp but w/o cygpath translation.\n  # Just convert the backslash-escaped backslashes to single forward\n  # slashes to satisfy depend.m4\n  cygpath_u='sed s,\\\\\\\\,/,g'\n  depmode=msvisualcpp\nfi\n\nif test \"$depmode\" = msvc7msys; then\n  # This is just like msvc7 but w/o cygpath translation.\n  # Just convert the backslash-escaped backslashes to single forward\n  # slashes to satisfy depend.m4\n  cygpath_u='sed s,\\\\\\\\,/,g'\n  depmode=msvc7\nfi\n\nif test \"$depmode\" = xlc; then\n  # IBM C/C++ Compilers xlc/xlC can output gcc-like dependency information.\n  gccflag=-qmakedep=gcc,-MF\n  depmode=gcc\nfi\n\ncase \"$depmode\" in\ngcc3)\n## gcc 3 implements dependency tracking that does exactly what\n## we want.  Yay!  Note: for some reason libtool 1.4 doesn't like\n## it if -MD -MP comes after the -MF stuff.  Hmm.\n## Unfortunately, FreeBSD c89 acceptance of flags depends upon\n## the command line argument order; so add the flags where they\n## appear in depend2.am.  Note that the slowdown incurred here\n## affects only configure: in makefiles, %FASTDEP% shortcuts this.\n  for arg\n  do\n    case $arg in\n    -c) set fnord \"$@\" -MT \"$object\" -MD -MP -MF \"$tmpdepfile\" \"$arg\" ;;\n    *)  set fnord \"$@\" \"$arg\" ;;\n    esac\n    shift # fnord\n    shift # $arg\n  done\n  \"$@\"\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  mv \"$tmpdepfile\" \"$depfile\"\n  ;;\n\ngcc)\n## Note that this doesn't just cater to obsosete pre-3.x GCC compilers.\n## but also to in-use compilers like IMB xlc/xlC and the HP C compiler.\n## (see the conditional assignment to $gccflag above).\n## There are various ways to get dependency output from gcc.  Here's\n## why we pick this rather obscure method:\n## - Don't want to use -MD because we'd like the dependencies to end\n##   up in a subdir.  Having to rename by hand is ugly.\n##   (We might end up doing this anyway to support other compilers.)\n## - The DEPENDENCIES_OUTPUT environment variable makes gcc act like\n##   -MM, not -M (despite what the docs say).  Also, it might not be\n##   supported by the other compilers which use the 'gcc' depmode.\n## - Using -M directly means running the compiler twice (even worse\n##   than renaming).\n  if test -z \"$gccflag\"; then\n    gccflag=-MD,\n  fi\n  \"$@\" -Wp,\"$gccflag$tmpdepfile\"\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  rm -f \"$depfile\"\n  echo \"$object : \\\\\" > \"$depfile\"\n  # The second -e expression handles DOS-style file names with drive\n  # letters.\n  sed -e 's/^[^:]*: / /' \\\n      -e 's/^['$alpha']:\\/[^:]*: / /' < \"$tmpdepfile\" >> \"$depfile\"\n## This next piece of magic avoids the \"deleted header file\" problem.\n## The problem is that when a header file which appears in a .P file\n## is deleted, the dependency causes make to die (because there is\n## typically no way to rebuild the header).  We avoid this by adding\n## dummy dependencies for each header file.  Too bad gcc doesn't do\n## this for us directly.\n## Some versions of gcc put a space before the ':'.  On the theory\n## that the space means something, we add a space to the output as\n## well.  hp depmode also adds that space, but also prefixes the VPATH\n## to the object.  Take care to not repeat it in the output.\n## Some versions of the HPUX 10.20 sed can't process this invocation\n## correctly.  Breaking it into two sed invocations is a workaround.\n  tr ' ' \"$nl\" < \"$tmpdepfile\" \\\n    | sed -e 's/^\\\\$//' -e '/^$/d' -e \"s|.*$object$||\" -e '/:$/d' \\\n    | sed -e 's/$/ :/' >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\nhp)\n  # This case exists only to let depend.m4 do its work.  It works by\n  # looking at the text of this script.  This case will never be run,\n  # since it is checked for above.\n  exit 1\n  ;;\n\nsgi)\n  if test \"$libtool\" = yes; then\n    \"$@\" \"-Wp,-MDupdate,$tmpdepfile\"\n  else\n    \"$@\" -MDupdate \"$tmpdepfile\"\n  fi\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  rm -f \"$depfile\"\n\n  if test -f \"$tmpdepfile\"; then  # yes, the sourcefile depend on other files\n    echo \"$object : \\\\\" > \"$depfile\"\n    # Clip off the initial element (the dependent).  Don't try to be\n    # clever and replace this with sed code, as IRIX sed won't handle\n    # lines with more than a fixed number of characters (4096 in\n    # IRIX 6.2 sed, 8192 in IRIX 6.5).  We also remove comment lines;\n    # the IRIX cc adds comments like '#:fec' to the end of the\n    # dependency line.\n    tr ' ' \"$nl\" < \"$tmpdepfile\" \\\n      | sed -e 's/^.*\\.o://' -e 's/#.*$//' -e '/^$/ d' \\\n      | tr \"$nl\" ' ' >> \"$depfile\"\n    echo >> \"$depfile\"\n    # The second pass generates a dummy entry for each header file.\n    tr ' ' \"$nl\" < \"$tmpdepfile\" \\\n      | sed -e 's/^.*\\.o://' -e 's/#.*$//' -e '/^$/ d' -e 's/$/:/' \\\n      >> \"$depfile\"\n  else\n    make_dummy_depfile\n  fi\n  rm -f \"$tmpdepfile\"\n  ;;\n\nxlc)\n  # This case exists only to let depend.m4 do its work.  It works by\n  # looking at the text of this script.  This case will never be run,\n  # since it is checked for above.\n  exit 1\n  ;;\n\naix)\n  # The C for AIX Compiler uses -M and outputs the dependencies\n  # in a .u file.  In older versions, this file always lives in the\n  # current directory.  Also, the AIX compiler puts '$object:' at the\n  # start of each line; $object doesn't have directory information.\n  # Version 6 uses the directory in both cases.\n  set_dir_from \"$object\"\n  set_base_from \"$object\"\n  if test \"$libtool\" = yes; then\n    tmpdepfile1=$dir$base.u\n    tmpdepfile2=$base.u\n    tmpdepfile3=$dir.libs/$base.u\n    \"$@\" -Wc,-M\n  else\n    tmpdepfile1=$dir$base.u\n    tmpdepfile2=$dir$base.u\n    tmpdepfile3=$dir$base.u\n    \"$@\" -M\n  fi\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile1\" \"$tmpdepfile2\" \"$tmpdepfile3\"\n    exit $stat\n  fi\n\n  for tmpdepfile in \"$tmpdepfile1\" \"$tmpdepfile2\" \"$tmpdepfile3\"\n  do\n    test -f \"$tmpdepfile\" && break\n  done\n  aix_post_process_depfile\n  ;;\n\ntcc)\n  # tcc (Tiny C Compiler) understand '-MD -MF file' since version 0.9.26\n  # FIXME: That version still under development at the moment of writing.\n  #        Make that this statement remains true also for stable, released\n  #        versions.\n  # It will wrap lines (doesn't matter whether long or short) with a\n  # trailing '\\', as in:\n  #\n  #   foo.o : \\\n  #    foo.c \\\n  #    foo.h \\\n  #\n  # It will put a trailing '\\' even on the last line, and will use leading\n  # spaces rather than leading tabs (at least since its commit 0394caf7\n  # \"Emit spaces for -MD\").\n  \"$@\" -MD -MF \"$tmpdepfile\"\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  rm -f \"$depfile\"\n  # Each non-empty line is of the form 'foo.o : \\' or ' dep.h \\'.\n  # We have to change lines of the first kind to '$object: \\'.\n  sed -e \"s|.*:|$object :|\" < \"$tmpdepfile\" > \"$depfile\"\n  # And for each line of the second kind, we have to emit a 'dep.h:'\n  # dummy dependency, to avoid the deleted-header problem.\n  sed -n -e 's|^  *\\(.*\\) *\\\\$|\\1:|p' < \"$tmpdepfile\" >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\n## The order of this option in the case statement is important, since the\n## shell code in configure will try each of these formats in the order\n## listed in this file.  A plain '-MD' option would be understood by many\n## compilers, so we must ensure this comes after the gcc and icc options.\npgcc)\n  # Portland's C compiler understands '-MD'.\n  # Will always output deps to 'file.d' where file is the root name of the\n  # source file under compilation, even if file resides in a subdirectory.\n  # The object file name does not affect the name of the '.d' file.\n  # pgcc 10.2 will output\n  #    foo.o: sub/foo.c sub/foo.h\n  # and will wrap long lines using '\\' :\n  #    foo.o: sub/foo.c ... \\\n  #     sub/foo.h ... \\\n  #     ...\n  set_dir_from \"$object\"\n  # Use the source, not the object, to determine the base name, since\n  # that's sadly what pgcc will do too.\n  set_base_from \"$source\"\n  tmpdepfile=$base.d\n\n  # For projects that build the same source file twice into different object\n  # files, the pgcc approach of using the *source* file root name can cause\n  # problems in parallel builds.  Use a locking strategy to avoid stomping on\n  # the same $tmpdepfile.\n  lockdir=$base.d-lock\n  trap \"\n    echo '$0: caught signal, cleaning up...' >&2\n    rmdir '$lockdir'\n    exit 1\n  \" 1 2 13 15\n  numtries=100\n  i=$numtries\n  while test $i -gt 0; do\n    # mkdir is a portable test-and-set.\n    if mkdir \"$lockdir\" 2>/dev/null; then\n      # This process acquired the lock.\n      \"$@\" -MD\n      stat=$?\n      # Release the lock.\n      rmdir \"$lockdir\"\n      break\n    else\n      # If the lock is being held by a different process, wait\n      # until the winning process is done or we timeout.\n      while test -d \"$lockdir\" && test $i -gt 0; do\n        sleep 1\n        i=`expr $i - 1`\n      done\n    fi\n    i=`expr $i - 1`\n  done\n  trap - 1 2 13 15\n  if test $i -le 0; then\n    echo \"$0: failed to acquire lock after $numtries attempts\" >&2\n    echo \"$0: check lockdir '$lockdir'\" >&2\n    exit 1\n  fi\n\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  rm -f \"$depfile\"\n  # Each line is of the form `foo.o: dependent.h',\n  # or `foo.o: dep1.h dep2.h \\', or ` dep3.h dep4.h \\'.\n  # Do two passes, one to just change these to\n  # `$object: dependent.h' and one to simply `dependent.h:'.\n  sed \"s,^[^:]*:,$object :,\" < \"$tmpdepfile\" > \"$depfile\"\n  # Some versions of the HPUX 10.20 sed can't process this invocation\n  # correctly.  Breaking it into two sed invocations is a workaround.\n  sed 's,^[^:]*: \\(.*\\)$,\\1,;s/^\\\\$//;/^$/d;/:$/d' < \"$tmpdepfile\" \\\n    | sed -e 's/$/ :/' >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\nhp2)\n  # The \"hp\" stanza above does not work with aCC (C++) and HP's ia64\n  # compilers, which have integrated preprocessors.  The correct option\n  # to use with these is +Maked; it writes dependencies to a file named\n  # 'foo.d', which lands next to the object file, wherever that\n  # happens to be.\n  # Much of this is similar to the tru64 case; see comments there.\n  set_dir_from  \"$object\"\n  set_base_from \"$object\"\n  if test \"$libtool\" = yes; then\n    tmpdepfile1=$dir$base.d\n    tmpdepfile2=$dir.libs/$base.d\n    \"$@\" -Wc,+Maked\n  else\n    tmpdepfile1=$dir$base.d\n    tmpdepfile2=$dir$base.d\n    \"$@\" +Maked\n  fi\n  stat=$?\n  if test $stat -ne 0; then\n     rm -f \"$tmpdepfile1\" \"$tmpdepfile2\"\n     exit $stat\n  fi\n\n  for tmpdepfile in \"$tmpdepfile1\" \"$tmpdepfile2\"\n  do\n    test -f \"$tmpdepfile\" && break\n  done\n  if test -f \"$tmpdepfile\"; then\n    sed -e \"s,^.*\\.[$lower]*:,$object:,\" \"$tmpdepfile\" > \"$depfile\"\n    # Add 'dependent.h:' lines.\n    sed -ne '2,${\n               s/^ *//\n               s/ \\\\*$//\n               s/$/:/\n               p\n             }' \"$tmpdepfile\" >> \"$depfile\"\n  else\n    make_dummy_depfile\n  fi\n  rm -f \"$tmpdepfile\" \"$tmpdepfile2\"\n  ;;\n\ntru64)\n  # The Tru64 compiler uses -MD to generate dependencies as a side\n  # effect.  'cc -MD -o foo.o ...' puts the dependencies into 'foo.o.d'.\n  # At least on Alpha/Redhat 6.1, Compaq CCC V6.2-504 seems to put\n  # dependencies in 'foo.d' instead, so we check for that too.\n  # Subdirectories are respected.\n  set_dir_from  \"$object\"\n  set_base_from \"$object\"\n\n  if test \"$libtool\" = yes; then\n    # Libtool generates 2 separate objects for the 2 libraries.  These\n    # two compilations output dependencies in $dir.libs/$base.o.d and\n    # in $dir$base.o.d.  We have to check for both files, because\n    # one of the two compilations can be disabled.  We should prefer\n    # $dir$base.o.d over $dir.libs/$base.o.d because the latter is\n    # automatically cleaned when .libs/ is deleted, while ignoring\n    # the former would cause a distcleancheck panic.\n    tmpdepfile1=$dir$base.o.d          # libtool 1.5\n    tmpdepfile2=$dir.libs/$base.o.d    # Likewise.\n    tmpdepfile3=$dir.libs/$base.d      # Compaq CCC V6.2-504\n    \"$@\" -Wc,-MD\n  else\n    tmpdepfile1=$dir$base.d\n    tmpdepfile2=$dir$base.d\n    tmpdepfile3=$dir$base.d\n    \"$@\" -MD\n  fi\n\n  stat=$?\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile1\" \"$tmpdepfile2\" \"$tmpdepfile3\"\n    exit $stat\n  fi\n\n  for tmpdepfile in \"$tmpdepfile1\" \"$tmpdepfile2\" \"$tmpdepfile3\"\n  do\n    test -f \"$tmpdepfile\" && break\n  done\n  # Same post-processing that is required for AIX mode.\n  aix_post_process_depfile\n  ;;\n\nmsvc7)\n  if test \"$libtool\" = yes; then\n    showIncludes=-Wc,-showIncludes\n  else\n    showIncludes=-showIncludes\n  fi\n  \"$@\" $showIncludes > \"$tmpdepfile\"\n  stat=$?\n  grep -v '^Note: including file: ' \"$tmpdepfile\"\n  if test $stat -ne 0; then\n    rm -f \"$tmpdepfile\"\n    exit $stat\n  fi\n  rm -f \"$depfile\"\n  echo \"$object : \\\\\" > \"$depfile\"\n  # The first sed program below extracts the file names and escapes\n  # backslashes for cygpath.  The second sed program outputs the file\n  # name when reading, but also accumulates all include files in the\n  # hold buffer in order to output them again at the end.  This only\n  # works with sed implementations that can handle large buffers.\n  sed < \"$tmpdepfile\" -n '\n/^Note: including file:  *\\(.*\\)/ {\n  s//\\1/\n  s/\\\\/\\\\\\\\/g\n  p\n}' | $cygpath_u | sort -u | sed -n '\ns/ /\\\\ /g\ns/\\(.*\\)/'\"$tab\"'\\1 \\\\/p\ns/.\\(.*\\) \\\\/\\1:/\nH\n$ {\n  s/.*/'\"$tab\"'/\n  G\n  p\n}' >> \"$depfile\"\n  echo >> \"$depfile\" # make sure the fragment doesn't end with a backslash\n  rm -f \"$tmpdepfile\"\n  ;;\n\nmsvc7msys)\n  # This case exists only to let depend.m4 do its work.  It works by\n  # looking at the text of this script.  This case will never be run,\n  # since it is checked for above.\n  exit 1\n  ;;\n\n#nosideeffect)\n  # This comment above is used by automake to tell side-effect\n  # dependency tracking mechanisms from slower ones.\n\ndashmstdout)\n  # Important note: in order to support this mode, a compiler *must*\n  # always write the preprocessed file to stdout, regardless of -o.\n  \"$@\" || exit $?\n\n  # Remove the call to Libtool.\n  if test \"$libtool\" = yes; then\n    while test \"X$1\" != 'X--mode=compile'; do\n      shift\n    done\n    shift\n  fi\n\n  # Remove '-o $object'.\n  IFS=\" \"\n  for arg\n  do\n    case $arg in\n    -o)\n      shift\n      ;;\n    $object)\n      shift\n      ;;\n    *)\n      set fnord \"$@\" \"$arg\"\n      shift # fnord\n      shift # $arg\n      ;;\n    esac\n  done\n\n  test -z \"$dashmflag\" && dashmflag=-M\n  # Require at least two characters before searching for ':'\n  # in the target name.  This is to cope with DOS-style filenames:\n  # a dependency such as 'c:/foo/bar' could be seen as target 'c' otherwise.\n  \"$@\" $dashmflag |\n    sed \"s|^[$tab ]*[^:$tab ][^:][^:]*:[$tab ]*|$object: |\" > \"$tmpdepfile\"\n  rm -f \"$depfile\"\n  cat < \"$tmpdepfile\" > \"$depfile\"\n  # Some versions of the HPUX 10.20 sed can't process this sed invocation\n  # correctly.  Breaking it into two sed invocations is a workaround.\n  tr ' ' \"$nl\" < \"$tmpdepfile\" \\\n    | sed -e 's/^\\\\$//' -e '/^$/d' -e '/:$/d' \\\n    | sed -e 's/$/ :/' >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\ndashXmstdout)\n  # This case only exists to satisfy depend.m4.  It is never actually\n  # run, as this mode is specially recognized in the preamble.\n  exit 1\n  ;;\n\nmakedepend)\n  \"$@\" || exit $?\n  # Remove any Libtool call\n  if test \"$libtool\" = yes; then\n    while test \"X$1\" != 'X--mode=compile'; do\n      shift\n    done\n    shift\n  fi\n  # X makedepend\n  shift\n  cleared=no eat=no\n  for arg\n  do\n    case $cleared in\n    no)\n      set \"\"; shift\n      cleared=yes ;;\n    esac\n    if test $eat = yes; then\n      eat=no\n      continue\n    fi\n    case \"$arg\" in\n    -D*|-I*)\n      set fnord \"$@\" \"$arg\"; shift ;;\n    # Strip any option that makedepend may not understand.  Remove\n    # the object too, otherwise makedepend will parse it as a source file.\n    -arch)\n      eat=yes ;;\n    -*|$object)\n      ;;\n    *)\n      set fnord \"$@\" \"$arg\"; shift ;;\n    esac\n  done\n  obj_suffix=`echo \"$object\" | sed 's/^.*\\././'`\n  touch \"$tmpdepfile\"\n  ${MAKEDEPEND-makedepend} -o\"$obj_suffix\" -f\"$tmpdepfile\" \"$@\"\n  rm -f \"$depfile\"\n  # makedepend may prepend the VPATH from the source file name to the object.\n  # No need to regex-escape $object, excess matching of '.' is harmless.\n  sed \"s|^.*\\($object *:\\)|\\1|\" \"$tmpdepfile\" > \"$depfile\"\n  # Some versions of the HPUX 10.20 sed can't process the last invocation\n  # correctly.  Breaking it into two sed invocations is a workaround.\n  sed '1,2d' \"$tmpdepfile\" \\\n    | tr ' ' \"$nl\" \\\n    | sed -e 's/^\\\\$//' -e '/^$/d' -e '/:$/d' \\\n    | sed -e 's/$/ :/' >> \"$depfile\"\n  rm -f \"$tmpdepfile\" \"$tmpdepfile\".bak\n  ;;\n\ncpp)\n  # Important note: in order to support this mode, a compiler *must*\n  # always write the preprocessed file to stdout.\n  \"$@\" || exit $?\n\n  # Remove the call to Libtool.\n  if test \"$libtool\" = yes; then\n    while test \"X$1\" != 'X--mode=compile'; do\n      shift\n    done\n    shift\n  fi\n\n  # Remove '-o $object'.\n  IFS=\" \"\n  for arg\n  do\n    case $arg in\n    -o)\n      shift\n      ;;\n    $object)\n      shift\n      ;;\n    *)\n      set fnord \"$@\" \"$arg\"\n      shift # fnord\n      shift # $arg\n      ;;\n    esac\n  done\n\n  \"$@\" -E \\\n    | sed -n -e '/^# [0-9][0-9]* \"\\([^\"]*\\)\".*/ s:: \\1 \\\\:p' \\\n             -e '/^#line [0-9][0-9]* \"\\([^\"]*\\)\".*/ s:: \\1 \\\\:p' \\\n    | sed '$ s: \\\\$::' > \"$tmpdepfile\"\n  rm -f \"$depfile\"\n  echo \"$object : \\\\\" > \"$depfile\"\n  cat < \"$tmpdepfile\" >> \"$depfile\"\n  sed < \"$tmpdepfile\" '/^$/d;s/^ //;s/ \\\\$//;s/$/ :/' >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\nmsvisualcpp)\n  # Important note: in order to support this mode, a compiler *must*\n  # always write the preprocessed file to stdout.\n  \"$@\" || exit $?\n\n  # Remove the call to Libtool.\n  if test \"$libtool\" = yes; then\n    while test \"X$1\" != 'X--mode=compile'; do\n      shift\n    done\n    shift\n  fi\n\n  IFS=\" \"\n  for arg\n  do\n    case \"$arg\" in\n    -o)\n      shift\n      ;;\n    $object)\n      shift\n      ;;\n    \"-Gm\"|\"/Gm\"|\"-Gi\"|\"/Gi\"|\"-ZI\"|\"/ZI\")\n        set fnord \"$@\"\n        shift\n        shift\n        ;;\n    *)\n        set fnord \"$@\" \"$arg\"\n        shift\n        shift\n        ;;\n    esac\n  done\n  \"$@\" -E 2>/dev/null |\n  sed -n '/^#line [0-9][0-9]* \"\\([^\"]*\\)\"/ s::\\1:p' | $cygpath_u | sort -u > \"$tmpdepfile\"\n  rm -f \"$depfile\"\n  echo \"$object : \\\\\" > \"$depfile\"\n  sed < \"$tmpdepfile\" -n -e 's% %\\\\ %g' -e '/^\\(.*\\)$/ s::'\"$tab\"'\\1 \\\\:p' >> \"$depfile\"\n  echo \"$tab\" >> \"$depfile\"\n  sed < \"$tmpdepfile\" -n -e 's% %\\\\ %g' -e '/^\\(.*\\)$/ s::\\1\\::p' >> \"$depfile\"\n  rm -f \"$tmpdepfile\"\n  ;;\n\nmsvcmsys)\n  # This case exists only to let depend.m4 do its work.  It works by\n  # looking at the text of this script.  This case will never be run,\n  # since it is checked for above.\n  exit 1\n  ;;\n\nnone)\n  exec \"$@\"\n  ;;\n\n*)\n  echo \"Unknown depmode $depmode\" 1>&2\n  exit 1\n  ;;\nesac\n\nexit 0\n\n# Local Variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "ev++.h",
          "type": "blob",
          "size": 19.9677734375,
          "content": "/*\n * libev simple C++ wrapper classes\n *\n * Copyright (c) 2007,2008,2010 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifndef EVPP_H__\n#define EVPP_H__\n\n#ifdef EV_H\n# include EV_H\n#else\n# include \"ev.h\"\n#endif\n\n#ifndef EV_USE_STDEXCEPT\n# define EV_USE_STDEXCEPT 1\n#endif\n\n#if EV_USE_STDEXCEPT\n# include <stdexcept>\n#endif\n\nnamespace ev {\n\n  typedef ev_tstamp tstamp;\n\n  enum {\n    UNDEF    = EV_UNDEF,\n    NONE     = EV_NONE,\n    READ     = EV_READ,\n    WRITE    = EV_WRITE,\n#if EV_COMPAT3\n    TIMEOUT  = EV_TIMEOUT,\n#endif\n    TIMER    = EV_TIMER,\n    PERIODIC = EV_PERIODIC,\n    SIGNAL   = EV_SIGNAL,\n    CHILD    = EV_CHILD,\n    STAT     = EV_STAT,\n    IDLE     = EV_IDLE,\n    CHECK    = EV_CHECK,\n    PREPARE  = EV_PREPARE,\n    FORK     = EV_FORK,\n    ASYNC    = EV_ASYNC,\n    EMBED    = EV_EMBED,\n#   undef ERROR // some systems stupidly #define ERROR\n    ERROR    = EV_ERROR\n  };\n\n  enum\n  {\n    AUTO      = EVFLAG_AUTO,\n    NOENV     = EVFLAG_NOENV,\n    FORKCHECK = EVFLAG_FORKCHECK,\n\n    SELECT    = EVBACKEND_SELECT,\n    POLL      = EVBACKEND_POLL,\n    EPOLL     = EVBACKEND_EPOLL,\n    KQUEUE    = EVBACKEND_KQUEUE,\n    DEVPOLL   = EVBACKEND_DEVPOLL,\n    PORT      = EVBACKEND_PORT\n  };\n\n  enum\n  {\n#if EV_COMPAT3\n    NONBLOCK = EVLOOP_NONBLOCK,\n    ONESHOT  = EVLOOP_ONESHOT,\n#endif\n    NOWAIT   = EVRUN_NOWAIT,\n    ONCE     = EVRUN_ONCE\n  };\n\n  enum how_t\n  {\n    ONE = EVBREAK_ONE,\n    ALL = EVBREAK_ALL\n  };\n\n  struct bad_loop\n#if EV_USE_STDEXCEPT\n  : std::runtime_error\n#endif\n  {\n#if EV_USE_STDEXCEPT\n    bad_loop ()\n    : std::runtime_error (\"libev event loop cannot be initialized, bad value of LIBEV_FLAGS?\")\n    {\n    }\n#endif\n  };\n\n#ifdef EV_AX\n#  undef EV_AX\n#endif\n\n#ifdef EV_AX_\n#  undef EV_AX_\n#endif\n\n#if EV_MULTIPLICITY\n#  define EV_AX  raw_loop\n#  define EV_AX_ raw_loop,\n#else\n#  define EV_AX\n#  define EV_AX_\n#endif\n\n  struct loop_ref\n  {\n    loop_ref (EV_P) throw ()\n#if EV_MULTIPLICITY\n    : EV_AX (EV_A)\n#endif\n    {\n    }\n\n    bool operator == (const loop_ref &other) const throw ()\n    {\n#if EV_MULTIPLICITY\n      return EV_AX == other.EV_AX;\n#else\n      return true;\n#endif\n    }\n\n    bool operator != (const loop_ref &other) const throw ()\n    {\n#if EV_MULTIPLICITY\n      return ! (*this == other);\n#else\n      return false;\n#endif\n    }\n\n#if EV_MULTIPLICITY\n    bool operator == (const EV_P) const throw ()\n    {\n      return this->EV_AX == EV_A;\n    }\n\n    bool operator != (const EV_P) const throw ()\n    {\n      return (*this == EV_A);\n    }\n\n    operator struct ev_loop * () const throw ()\n    {\n      return EV_AX;\n    }\n\n    operator const struct ev_loop * () const throw ()\n    {\n      return EV_AX;\n    }\n\n    bool is_default () const throw ()\n    {\n      return EV_AX == ev_default_loop (0);\n    }\n#endif\n\n#if EV_COMPAT3\n    void loop (int flags = 0)\n    {\n      ev_run (EV_AX_ flags);\n    }\n\n    void unloop (how_t how = ONE) throw ()\n    {\n      ev_break (EV_AX_ how);\n    }\n#endif\n\n    void run (int flags = 0)\n    {\n      ev_run (EV_AX_ flags);\n    }\n\n    void break_loop (how_t how = ONE) throw ()\n    {\n      ev_break (EV_AX_ how);\n    }\n\n    void post_fork () throw ()\n    {\n      ev_loop_fork (EV_AX);\n    }\n\n    unsigned int backend () const throw ()\n    {\n      return ev_backend (EV_AX);\n    }\n\n    tstamp now () const throw ()\n    {\n      return ev_now (EV_AX);\n    }\n\n    void ref () throw ()\n    {\n      ev_ref (EV_AX);\n    }\n\n    void unref () throw ()\n    {\n      ev_unref (EV_AX);\n    }\n\n#if EV_FEATURE_API\n    unsigned int iteration () const throw ()\n    {\n      return ev_iteration (EV_AX);\n    }\n\n    unsigned int depth () const throw ()\n    {\n      return ev_depth (EV_AX);\n    }\n\n    void set_io_collect_interval (tstamp interval) throw ()\n    {\n      ev_set_io_collect_interval (EV_AX_ interval);\n    }\n\n    void set_timeout_collect_interval (tstamp interval) throw ()\n    {\n      ev_set_timeout_collect_interval (EV_AX_ interval);\n    }\n#endif\n\n    // function callback\n    void once (int fd, int events, tstamp timeout, void (*cb)(int, void *), void *arg = 0) throw ()\n    {\n      ev_once (EV_AX_ fd, events, timeout, cb, arg);\n    }\n\n    // method callback\n    template<class K, void (K::*method)(int)>\n    void once (int fd, int events, tstamp timeout, K *object) throw ()\n    {\n      once (fd, events, timeout, method_thunk<K, method>, object);\n    }\n\n    // default method == operator ()\n    template<class K>\n    void once (int fd, int events, tstamp timeout, K *object) throw ()\n    {\n      once (fd, events, timeout, method_thunk<K, &K::operator ()>, object);\n    }\n\n    template<class K, void (K::*method)(int)>\n    static void method_thunk (int revents, void *arg)\n    {\n      (static_cast<K *>(arg)->*method)\n        (revents);\n    }\n\n    // no-argument method callback\n    template<class K, void (K::*method)()>\n    void once (int fd, int events, tstamp timeout, K *object) throw ()\n    {\n      once (fd, events, timeout, method_noargs_thunk<K, method>, object);\n    }\n\n    template<class K, void (K::*method)()>\n    static void method_noargs_thunk (int revents, void *arg)\n    {\n      (static_cast<K *>(arg)->*method)\n        ();\n    }\n\n    // simpler function callback\n    template<void (*cb)(int)>\n    void once (int fd, int events, tstamp timeout) throw ()\n    {\n      once (fd, events, timeout, simpler_func_thunk<cb>);\n    }\n\n    template<void (*cb)(int)>\n    static void simpler_func_thunk (int revents, void *arg)\n    {\n      (*cb)\n        (revents);\n    }\n\n    // simplest function callback\n    template<void (*cb)()>\n    void once (int fd, int events, tstamp timeout) throw ()\n    {\n      once (fd, events, timeout, simplest_func_thunk<cb>);\n    }\n\n    template<void (*cb)()>\n    static void simplest_func_thunk (int revents, void *arg)\n    {\n      (*cb)\n        ();\n    }\n\n    void feed_fd_event (int fd, int revents) throw ()\n    {\n      ev_feed_fd_event (EV_AX_ fd, revents);\n    }\n\n    void feed_signal_event (int signum) throw ()\n    {\n      ev_feed_signal_event (EV_AX_ signum);\n    }\n\n#if EV_MULTIPLICITY\n    struct ev_loop* EV_AX;\n#endif\n\n  };\n\n#if EV_MULTIPLICITY\n  struct dynamic_loop : loop_ref\n  {\n\n    dynamic_loop (unsigned int flags = AUTO) throw (bad_loop)\n    : loop_ref (ev_loop_new (flags))\n    {\n      if (!EV_AX)\n        throw bad_loop ();\n    }\n\n    ~dynamic_loop () throw ()\n    {\n      ev_loop_destroy (EV_AX);\n      EV_AX = 0;\n    }\n\n  private:\n\n    dynamic_loop (const dynamic_loop &);\n\n    dynamic_loop & operator= (const dynamic_loop &);\n\n  };\n#endif\n\n  struct default_loop : loop_ref\n  {\n    default_loop (unsigned int flags = AUTO) throw (bad_loop)\n#if EV_MULTIPLICITY\n    : loop_ref (ev_default_loop (flags))\n#endif\n    {\n      if (\n#if EV_MULTIPLICITY\n          !EV_AX\n#else\n          !ev_default_loop (flags)\n#endif\n      )\n        throw bad_loop ();\n    }\n\n  private:\n    default_loop (const default_loop &);\n    default_loop &operator = (const default_loop &);\n  };\n\n  inline loop_ref get_default_loop () throw ()\n  {\n#if EV_MULTIPLICITY\n    return ev_default_loop (0);\n#else\n    return loop_ref ();\n#endif\n  }\n\n#undef EV_AX\n#undef EV_AX_\n\n#undef EV_PX\n#undef EV_PX_\n#if EV_MULTIPLICITY\n#  define EV_PX  loop_ref EV_A\n#  define EV_PX_ loop_ref EV_A_\n#else\n#  define EV_PX\n#  define EV_PX_\n#endif\n\n  template<class ev_watcher, class watcher>\n  struct base : ev_watcher\n  {\n    #if EV_MULTIPLICITY\n      EV_PX;\n\n      // loop set\n      void set (EV_P) throw ()\n      {\n        this->EV_A = EV_A;\n      }\n    #endif\n\n    base (EV_PX) throw ()\n    #if EV_MULTIPLICITY\n      : EV_A (EV_A)\n    #endif\n    {\n      ev_init (this, 0);\n    }\n\n    void set_ (const void *data, void (*cb)(EV_P_ ev_watcher *w, int revents)) throw ()\n    {\n      this->data = (void *)data;\n      ev_set_cb (static_cast<ev_watcher *>(this), cb);\n    }\n\n    // function callback\n    template<void (*function)(watcher &w, int)>\n    void set (void *data = 0) throw ()\n    {\n      set_ (data, function_thunk<function>);\n    }\n\n    template<void (*function)(watcher &w, int)>\n    static void function_thunk (EV_P_ ev_watcher *w, int revents)\n    {\n      function\n        (*static_cast<watcher *>(w), revents);\n    }\n\n    // method callback\n    template<class K, void (K::*method)(watcher &w, int)>\n    void set (K *object) throw ()\n    {\n      set_ (object, method_thunk<K, method>);\n    }\n\n    // default method == operator ()\n    template<class K>\n    void set (K *object) throw ()\n    {\n      set_ (object, method_thunk<K, &K::operator ()>);\n    }\n\n    template<class K, void (K::*method)(watcher &w, int)>\n    static void method_thunk (EV_P_ ev_watcher *w, int revents)\n    {\n      (static_cast<K *>(w->data)->*method)\n        (*static_cast<watcher *>(w), revents);\n    }\n\n    // no-argument callback\n    template<class K, void (K::*method)()>\n    void set (K *object) throw ()\n    {\n      set_ (object, method_noargs_thunk<K, method>);\n    }\n\n    template<class K, void (K::*method)()>\n    static void method_noargs_thunk (EV_P_ ev_watcher *w, int revents)\n    {\n      (static_cast<K *>(w->data)->*method)\n        ();\n    }\n\n    void operator ()(int events = EV_UNDEF)\n    {\n      return\n        ev_cb (static_cast<ev_watcher *>(this))\n          (static_cast<ev_watcher *>(this), events);\n    }\n\n    bool is_active () const throw ()\n    {\n      return ev_is_active (static_cast<const ev_watcher *>(this));\n    }\n\n    bool is_pending () const throw ()\n    {\n      return ev_is_pending (static_cast<const ev_watcher *>(this));\n    }\n\n    void feed_event (int revents) throw ()\n    {\n      ev_feed_event (EV_A_ static_cast<ev_watcher *>(this), revents);\n    }\n  };\n\n  inline tstamp now (EV_P) throw ()\n  {\n    return ev_now (EV_A);\n  }\n\n  inline void delay (tstamp interval) throw ()\n  {\n    ev_sleep (interval);\n  }\n\n  inline int version_major () throw ()\n  {\n    return ev_version_major ();\n  }\n\n  inline int version_minor () throw ()\n  {\n    return ev_version_minor ();\n  }\n\n  inline unsigned int supported_backends () throw ()\n  {\n    return ev_supported_backends ();\n  }\n\n  inline unsigned int recommended_backends () throw ()\n  {\n    return ev_recommended_backends ();\n  }\n\n  inline unsigned int embeddable_backends () throw ()\n  {\n    return ev_embeddable_backends ();\n  }\n\n  inline void set_allocator (void *(*cb)(void *ptr, long size) throw ()) throw ()\n  {\n    ev_set_allocator (cb);\n  }\n\n  inline void set_syserr_cb (void (*cb)(const char *msg) throw ()) throw ()\n  {\n    ev_set_syserr_cb (cb);\n  }\n\n  #if EV_MULTIPLICITY\n    #define EV_CONSTRUCT(cppstem,cstem)\t                                                \\\n      (EV_PX = get_default_loop ()) throw ()                                            \\\n        : base<ev_ ## cstem, cppstem> (EV_A)                                            \\\n      {                                                                                 \\\n      }\n  #else\n    #define EV_CONSTRUCT(cppstem,cstem)                                                 \\\n      () throw ()                                                                       \\\n      {                                                                                 \\\n      }\n  #endif\n\n  /* using a template here would require quite a few more lines,\n   * so a macro solution was chosen */\n  #define EV_BEGIN_WATCHER(cppstem,cstem)\t                                        \\\n                                                                                        \\\n  struct cppstem : base<ev_ ## cstem, cppstem>                                          \\\n  {                                                                                     \\\n    void start () throw ()                                                              \\\n    {                                                                                   \\\n      ev_ ## cstem ## _start (EV_A_ static_cast<ev_ ## cstem *>(this));                 \\\n    }                                                                                   \\\n                                                                                        \\\n    void stop () throw ()                                                               \\\n    {                                                                                   \\\n      ev_ ## cstem ## _stop (EV_A_ static_cast<ev_ ## cstem *>(this));                  \\\n    }                                                                                   \\\n                                                                                        \\\n    cppstem EV_CONSTRUCT(cppstem,cstem)                                                 \\\n                                                                                        \\\n    ~cppstem () throw ()                                                                \\\n    {                                                                                   \\\n      stop ();                                                                          \\\n    }                                                                                   \\\n                                                                                        \\\n    using base<ev_ ## cstem, cppstem>::set;                                             \\\n                                                                                        \\\n  private:                                                                              \\\n                                                                                        \\\n    cppstem (const cppstem &o);                                                         \\\n                                                                                        \\\n    cppstem &operator =(const cppstem &o);                                              \\\n                                                                                        \\\n  public:\n\n  #define EV_END_WATCHER(cppstem,cstem)\t                                                \\\n  };\n\n  EV_BEGIN_WATCHER (io, io)\n    void set (int fd, int events) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_io_set (static_cast<ev_io *>(this), fd, events);\n      if (active) start ();\n    }\n\n    void set (int events) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_io_set (static_cast<ev_io *>(this), fd, events);\n      if (active) start ();\n    }\n\n    void start (int fd, int events) throw ()\n    {\n      set (fd, events);\n      start ();\n    }\n  EV_END_WATCHER (io, io)\n\n  EV_BEGIN_WATCHER (timer, timer)\n    void set (ev_tstamp after, ev_tstamp repeat = 0.) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_timer_set (static_cast<ev_timer *>(this), after, repeat);\n      if (active) start ();\n    }\n\n    void start (ev_tstamp after, ev_tstamp repeat = 0.) throw ()\n    {\n      set (after, repeat);\n      start ();\n    }\n\n    void again () throw ()\n    {\n      ev_timer_again (EV_A_ static_cast<ev_timer *>(this));\n    }\n\n    ev_tstamp remaining ()\n    {\n      return ev_timer_remaining (EV_A_ static_cast<ev_timer *>(this));\n    }\n  EV_END_WATCHER (timer, timer)\n\n  #if EV_PERIODIC_ENABLE\n  EV_BEGIN_WATCHER (periodic, periodic)\n    void set (ev_tstamp at, ev_tstamp interval = 0.) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_periodic_set (static_cast<ev_periodic *>(this), at, interval, 0);\n      if (active) start ();\n    }\n\n    void start (ev_tstamp at, ev_tstamp interval = 0.) throw ()\n    {\n      set (at, interval);\n      start ();\n    }\n\n    void again () throw ()\n    {\n      ev_periodic_again (EV_A_ static_cast<ev_periodic *>(this));\n    }\n  EV_END_WATCHER (periodic, periodic)\n  #endif\n\n  #if EV_SIGNAL_ENABLE\n  EV_BEGIN_WATCHER (sig, signal)\n    void set (int signum) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_signal_set (static_cast<ev_signal *>(this), signum);\n      if (active) start ();\n    }\n\n    void start (int signum) throw ()\n    {\n      set (signum);\n      start ();\n    }\n  EV_END_WATCHER (sig, signal)\n  #endif\n\n  #if EV_CHILD_ENABLE\n  EV_BEGIN_WATCHER (child, child)\n    void set (int pid, int trace = 0) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_child_set (static_cast<ev_child *>(this), pid, trace);\n      if (active) start ();\n    }\n\n    void start (int pid, int trace = 0) throw ()\n    {\n      set (pid, trace);\n      start ();\n    }\n  EV_END_WATCHER (child, child)\n  #endif\n\n  #if EV_STAT_ENABLE\n  EV_BEGIN_WATCHER (stat, stat)\n    void set (const char *path, ev_tstamp interval = 0.) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_stat_set (static_cast<ev_stat *>(this), path, interval);\n      if (active) start ();\n    }\n\n    void start (const char *path, ev_tstamp interval = 0.) throw ()\n    {\n      stop ();\n      set (path, interval);\n      start ();\n    }\n\n    void update () throw ()\n    {\n      ev_stat_stat (EV_A_ static_cast<ev_stat *>(this));\n    }\n  EV_END_WATCHER (stat, stat)\n  #endif\n\n  #if EV_IDLE_ENABLE\n  EV_BEGIN_WATCHER (idle, idle)\n    void set () throw () { }\n  EV_END_WATCHER (idle, idle)\n  #endif\n\n  #if EV_PREPARE_ENABLE\n  EV_BEGIN_WATCHER (prepare, prepare)\n    void set () throw () { }\n  EV_END_WATCHER (prepare, prepare)\n  #endif\n\n  #if EV_CHECK_ENABLE\n  EV_BEGIN_WATCHER (check, check)\n    void set () throw () { }\n  EV_END_WATCHER (check, check)\n  #endif\n\n  #if EV_EMBED_ENABLE\n  EV_BEGIN_WATCHER (embed, embed)\n    void set_embed (struct ev_loop *embedded_loop) throw ()\n    {\n      int active = is_active ();\n      if (active) stop ();\n      ev_embed_set (static_cast<ev_embed *>(this), embedded_loop);\n      if (active) start ();\n    }\n\n    void start (struct ev_loop *embedded_loop) throw ()\n    {\n      set (embedded_loop);\n      start ();\n    }\n\n    void sweep ()\n    {\n      ev_embed_sweep (EV_A_ static_cast<ev_embed *>(this));\n    }\n  EV_END_WATCHER (embed, embed)\n  #endif\n\n  #if EV_FORK_ENABLE\n  EV_BEGIN_WATCHER (fork, fork)\n    void set () throw () { }\n  EV_END_WATCHER (fork, fork)\n  #endif\n\n  #if EV_ASYNC_ENABLE\n  EV_BEGIN_WATCHER (async, async)\n    void send () throw ()\n    {\n      ev_async_send (EV_A_ static_cast<ev_async *>(this));\n    }\n\n    bool async_pending () throw ()\n    {\n      return ev_async_pending (static_cast<ev_async *>(this));\n    }\n  EV_END_WATCHER (async, async)\n  #endif\n\n  #undef EV_PX\n  #undef EV_PX_\n  #undef EV_CONSTRUCT\n  #undef EV_BEGIN_WATCHER\n  #undef EV_END_WATCHER\n}\n\n#endif\n\n"
        },
        {
          "name": "ev.3",
          "type": "blob",
          "size": 258.4501953125,
          "content": ".\\\" Automatically generated by Pod::Man 2.28 (Pod::Simple 3.30)\n.\\\"\n.\\\" Standard preamble:\n.\\\" ========================================================================\n.de Sp \\\" Vertical space (when we can't use .PP)\n.if t .sp .5v\n.if n .sp\n..\n.de Vb \\\" Begin verbatim text\n.ft CW\n.nf\n.ne \\\\$1\n..\n.de Ve \\\" End verbatim text\n.ft R\n.fi\n..\n.\\\" Set up some character translations and predefined strings.  \\*(-- will\n.\\\" give an unbreakable dash, \\*(PI will give pi, \\*(L\" will give a left\n.\\\" double quote, and \\*(R\" will give a right double quote.  \\*(C+ will\n.\\\" give a nicer C++.  Capital omega is used to do unbreakable dashes and\n.\\\" therefore won't be available.  \\*(C` and \\*(C' expand to `' in nroff,\n.\\\" nothing in troff, for use with C<>.\n.tr \\(*W-\n.ds C+ C\\v'-.1v'\\h'-1p'\\s-2+\\h'-1p'+\\s0\\v'.1v'\\h'-1p'\n.ie n \\{\\\n.    ds -- \\(*W-\n.    ds PI pi\n.    if (\\n(.H=4u)&(1m=24u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-12u'-\\\" diablo 10 pitch\n.    if (\\n(.H=4u)&(1m=20u) .ds -- \\(*W\\h'-12u'\\(*W\\h'-8u'-\\\"  diablo 12 pitch\n.    ds L\" \"\"\n.    ds R\" \"\"\n.    ds C` \"\"\n.    ds C' \"\"\n'br\\}\n.el\\{\\\n.    ds -- \\|\\(em\\|\n.    ds PI \\(*p\n.    ds L\" ``\n.    ds R\" ''\n.    ds C`\n.    ds C'\n'br\\}\n.\\\"\n.\\\" Escape single quotes in literal strings from groff's Unicode transform.\n.ie \\n(.g .ds Aq \\(aq\n.el       .ds Aq '\n.\\\"\n.\\\" If the F register is turned on, we'll generate index entries on stderr for\n.\\\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index\n.\\\" entries marked with X<> in POD.  Of course, you'll have to process the\n.\\\" output yourself in some meaningful fashion.\n.\\\"\n.\\\" Avoid warning from groff about undefined register 'F'.\n.de IX\n..\n.nr rF 0\n.if \\n(.g .if rF .nr rF 1\n.if (\\n(rF:(\\n(.g==0)) \\{\n.    if \\nF \\{\n.        de IX\n.        tm Index:\\\\$1\\t\\\\n%\\t\"\\\\$2\"\n..\n.        if !\\nF==2 \\{\n.            nr % 0\n.            nr F 2\n.        \\}\n.    \\}\n.\\}\n.rr rF\n.\\\"\n.\\\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).\n.\\\" Fear.  Run.  Save yourself.  No user-serviceable parts.\n.    \\\" fudge factors for nroff and troff\n.if n \\{\\\n.    ds #H 0\n.    ds #V .8m\n.    ds #F .3m\n.    ds #[ \\f1\n.    ds #] \\fP\n.\\}\n.if t \\{\\\n.    ds #H ((1u-(\\\\\\\\n(.fu%2u))*.13m)\n.    ds #V .6m\n.    ds #F 0\n.    ds #[ \\&\n.    ds #] \\&\n.\\}\n.    \\\" simple accents for nroff and troff\n.if n \\{\\\n.    ds ' \\&\n.    ds ` \\&\n.    ds ^ \\&\n.    ds , \\&\n.    ds ~ ~\n.    ds /\n.\\}\n.if t \\{\\\n.    ds ' \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\'\\h\"|\\\\n:u\"\n.    ds ` \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\`\\h'|\\\\n:u'\n.    ds ^ \\\\k:\\h'-(\\\\n(.wu*10/11-\\*(#H)'^\\h'|\\\\n:u'\n.    ds , \\\\k:\\h'-(\\\\n(.wu*8/10)',\\h'|\\\\n:u'\n.    ds ~ \\\\k:\\h'-(\\\\n(.wu-\\*(#H-.1m)'~\\h'|\\\\n:u'\n.    ds / \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H)'\\z\\(sl\\h'|\\\\n:u'\n.\\}\n.    \\\" troff and (daisy-wheel) nroff accents\n.ds : \\\\k:\\h'-(\\\\n(.wu*8/10-\\*(#H+.1m+\\*(#F)'\\v'-\\*(#V'\\z.\\h'.2m+\\*(#F'.\\h'|\\\\n:u'\\v'\\*(#V'\n.ds 8 \\h'\\*(#H'\\(*b\\h'-\\*(#H'\n.ds o \\\\k:\\h'-(\\\\n(.wu+\\w'\\(de'u-\\*(#H)/2u'\\v'-.3n'\\*(#[\\z\\(de\\v'.3n'\\h'|\\\\n:u'\\*(#]\n.ds d- \\h'\\*(#H'\\(pd\\h'-\\w'~'u'\\v'-.25m'\\f2\\(hy\\fP\\v'.25m'\\h'-\\*(#H'\n.ds D- D\\\\k:\\h'-\\w'D'u'\\v'-.11m'\\z\\(hy\\v'.11m'\\h'|\\\\n:u'\n.ds th \\*(#[\\v'.3m'\\s+1I\\s-1\\v'-.3m'\\h'-(\\w'I'u*2/3)'\\s-1o\\s+1\\*(#]\n.ds Th \\*(#[\\s+2I\\s-2\\h'-\\w'I'u*3/5'\\v'-.3m'o\\v'.3m'\\*(#]\n.ds ae a\\h'-(\\w'a'u*4/10)'e\n.ds Ae A\\h'-(\\w'A'u*4/10)'E\n.    \\\" corrections for vroff\n.if v .ds ~ \\\\k:\\h'-(\\\\n(.wu*9/10-\\*(#H)'\\s-2\\u~\\d\\s+2\\h'|\\\\n:u'\n.if v .ds ^ \\\\k:\\h'-(\\\\n(.wu*10/11-\\*(#H)'\\v'-.4m'^\\v'.4m'\\h'|\\\\n:u'\n.    \\\" for low resolution devices (crt and lpr)\n.if \\n(.H>23 .if \\n(.V>19 \\\n\\{\\\n.    ds : e\n.    ds 8 ss\n.    ds o a\n.    ds d- d\\h'-1'\\(ga\n.    ds D- D\\h'-1'\\(hy\n.    ds th \\o'bp'\n.    ds Th \\o'LP'\n.    ds ae ae\n.    ds Ae AE\n.\\}\n.rm #[ #] #H #V #F C\n.\\\" ========================================================================\n.\\\"\n.IX Title \"LIBEV 3\"\n.TH LIBEV 3 \"2015-12-20\" \"libev-4.20\" \"libev - high performance full featured event loop\"\n.\\\" For nroff, turn off justification.  Always turn off hyphenation; it makes\n.\\\" way too many mistakes in technical documents.\n.if n .ad l\n.nh\n.SH \"NAME\"\nlibev \\- a high performance full\\-featured event loop written in C\n.SH \"SYNOPSIS\"\n.IX Header \"SYNOPSIS\"\n.Vb 1\n\\&   #include <ev.h>\n.Ve\n.SS \"\\s-1EXAMPLE PROGRAM\\s0\"\n.IX Subsection \"EXAMPLE PROGRAM\"\n.Vb 2\n\\&   // a single header file is required\n\\&   #include <ev.h>\n\\&\n\\&   #include <stdio.h> // for puts\n\\&\n\\&   // every watcher type has its own typedef\\*(Aqd struct\n\\&   // with the name ev_TYPE\n\\&   ev_io stdin_watcher;\n\\&   ev_timer timeout_watcher;\n\\&\n\\&   // all watcher callbacks have a similar signature\n\\&   // this callback is called when data is readable on stdin\n\\&   static void\n\\&   stdin_cb (EV_P_ ev_io *w, int revents)\n\\&   {\n\\&     puts (\"stdin ready\");\n\\&     // for one\\-shot events, one must manually stop the watcher\n\\&     // with its corresponding stop function.\n\\&     ev_io_stop (EV_A_ w);\n\\&\n\\&     // this causes all nested ev_run\\*(Aqs to stop iterating\n\\&     ev_break (EV_A_ EVBREAK_ALL);\n\\&   }\n\\&\n\\&   // another callback, this time for a time\\-out\n\\&   static void\n\\&   timeout_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     puts (\"timeout\");\n\\&     // this causes the innermost ev_run to stop iterating\n\\&     ev_break (EV_A_ EVBREAK_ONE);\n\\&   }\n\\&\n\\&   int\n\\&   main (void)\n\\&   {\n\\&     // use the default event loop unless you have special needs\n\\&     struct ev_loop *loop = EV_DEFAULT;\n\\&\n\\&     // initialise an io watcher, then start it\n\\&     // this one will watch for stdin to become readable\n\\&     ev_io_init (&stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0, EV_READ);\n\\&     ev_io_start (loop, &stdin_watcher);\n\\&\n\\&     // initialise a timer watcher, then start it\n\\&     // simple non\\-repeating 5.5 second timeout\n\\&     ev_timer_init (&timeout_watcher, timeout_cb, 5.5, 0.);\n\\&     ev_timer_start (loop, &timeout_watcher);\n\\&\n\\&     // now wait for events to arrive\n\\&     ev_run (loop, 0);\n\\&\n\\&     // break was called, so exit\n\\&     return 0;\n\\&   }\n.Ve\n.SH \"ABOUT THIS DOCUMENT\"\n.IX Header \"ABOUT THIS DOCUMENT\"\nThis document documents the libev software package.\n.PP\nThe newest version of this document is also available as an html-formatted\nweb page you might find easier to navigate when reading it for the first\ntime: <http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod>.\n.PP\nWhile this document tries to be as complete as possible in documenting\nlibev, its usage and the rationale behind its design, it is not a tutorial\non event-based programming, nor will it introduce event-based programming\nwith libev.\n.PP\nFamiliarity with event based programming techniques in general is assumed\nthroughout this document.\n.SH \"WHAT TO READ WHEN IN A HURRY\"\n.IX Header \"WHAT TO READ WHEN IN A HURRY\"\nThis manual tries to be very detailed, but unfortunately, this also makes\nit very long. If you just want to know the basics of libev, I suggest\nreading \\*(L\"\\s-1ANATOMY OF A WATCHER\\*(R\"\\s0, then the \\*(L\"\\s-1EXAMPLE PROGRAM\\*(R\"\\s0 above and\nlook up the missing functions in \\*(L\"\\s-1GLOBAL FUNCTIONS\\*(R\"\\s0 and the \\f(CW\\*(C`ev_io\\*(C'\\fR and\n\\&\\f(CW\\*(C`ev_timer\\*(C'\\fR sections in \\*(L\"\\s-1WATCHER TYPES\\*(R\"\\s0.\n.SH \"ABOUT LIBEV\"\n.IX Header \"ABOUT LIBEV\"\nLibev is an event loop: you register interest in certain events (such as a\nfile descriptor being readable or a timeout occurring), and it will manage\nthese event sources and provide your program with events.\n.PP\nTo do this, it must take more or less complete control over your process\n(or thread) by executing the \\fIevent loop\\fR handler, and will then\ncommunicate events via a callback mechanism.\n.PP\nYou register interest in certain events by registering so-called \\fIevent\nwatchers\\fR, which are relatively small C structures you initialise with the\ndetails of the event, and then hand it over to libev by \\fIstarting\\fR the\nwatcher.\n.SS \"\\s-1FEATURES\\s0\"\n.IX Subsection \"FEATURES\"\nLibev supports \\f(CW\\*(C`select\\*(C'\\fR, \\f(CW\\*(C`poll\\*(C'\\fR, the Linux-specific \\f(CW\\*(C`epoll\\*(C'\\fR, the\nBSD-specific \\f(CW\\*(C`kqueue\\*(C'\\fR and the Solaris-specific event port mechanisms\nfor file descriptor events (\\f(CW\\*(C`ev_io\\*(C'\\fR), the Linux \\f(CW\\*(C`inotify\\*(C'\\fR interface\n(for \\f(CW\\*(C`ev_stat\\*(C'\\fR), Linux eventfd/signalfd (for faster and cleaner\ninter-thread wakeup (\\f(CW\\*(C`ev_async\\*(C'\\fR)/signal handling (\\f(CW\\*(C`ev_signal\\*(C'\\fR)) relative\ntimers (\\f(CW\\*(C`ev_timer\\*(C'\\fR), absolute timers with customised rescheduling\n(\\f(CW\\*(C`ev_periodic\\*(C'\\fR), synchronous signals (\\f(CW\\*(C`ev_signal\\*(C'\\fR), process status\nchange events (\\f(CW\\*(C`ev_child\\*(C'\\fR), and event watchers dealing with the event\nloop mechanism itself (\\f(CW\\*(C`ev_idle\\*(C'\\fR, \\f(CW\\*(C`ev_embed\\*(C'\\fR, \\f(CW\\*(C`ev_prepare\\*(C'\\fR and\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watchers) as well as file watchers (\\f(CW\\*(C`ev_stat\\*(C'\\fR) and even\nlimited support for fork events (\\f(CW\\*(C`ev_fork\\*(C'\\fR).\n.PP\nIt also is quite fast (see this\nbenchmark <http://libev.schmorp.de/bench.html> comparing it to libevent\nfor example).\n.SS \"\\s-1CONVENTIONS\\s0\"\n.IX Subsection \"CONVENTIONS\"\nLibev is very configurable. In this manual the default (and most common)\nconfiguration will be described, which supports multiple event loops. For\nmore info about various configuration options please have a look at\n\\&\\fB\\s-1EMBED\\s0\\fR section in this manual. If libev was configured without support\nfor multiple event loops, then all functions taking an initial argument of\nname \\f(CW\\*(C`loop\\*(C'\\fR (which is always of type \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR) will not have\nthis argument.\n.SS \"\\s-1TIME REPRESENTATION\\s0\"\n.IX Subsection \"TIME REPRESENTATION\"\nLibev represents time as a single floating point number, representing\nthe (fractional) number of seconds since the (\\s-1POSIX\\s0) epoch (in practice\nsomewhere near the beginning of 1970, details are complicated, don't\nask). This type is called \\f(CW\\*(C`ev_tstamp\\*(C'\\fR, which is what you should use\ntoo. It usually aliases to the \\f(CW\\*(C`double\\*(C'\\fR type in C. When you need to do\nany calculations on it, you should treat it as some floating point value.\n.PP\nUnlike the name component \\f(CW\\*(C`stamp\\*(C'\\fR might indicate, it is also used for\ntime differences (e.g. delays) throughout libev.\n.SH \"ERROR HANDLING\"\n.IX Header \"ERROR HANDLING\"\nLibev knows three classes of errors: operating system errors, usage errors\nand internal errors (bugs).\n.PP\nWhen libev catches an operating system error it cannot handle (for example\na system call indicating a condition libev cannot fix), it calls the callback\nset via \\f(CW\\*(C`ev_set_syserr_cb\\*(C'\\fR, which is supposed to fix the problem or\nabort. The default is to print a diagnostic message and to call \\f(CW\\*(C`abort\n()\\*(C'\\fR.\n.PP\nWhen libev detects a usage error such as a negative timer interval, then\nit will print a diagnostic message and abort (via the \\f(CW\\*(C`assert\\*(C'\\fR mechanism,\nso \\f(CW\\*(C`NDEBUG\\*(C'\\fR will disable this checking): these are programming errors in\nthe libev caller and need to be fixed there.\n.PP\nLibev also has a few internal error-checking \\f(CW\\*(C`assert\\*(C'\\fRions, and also has\nextensive consistency checking code. These do not trigger under normal\ncircumstances, as they indicate either a bug in libev or worse.\n.SH \"GLOBAL FUNCTIONS\"\n.IX Header \"GLOBAL FUNCTIONS\"\nThese functions can be called anytime, even before initialising the\nlibrary in any way.\n.IP \"ev_tstamp ev_time ()\" 4\n.IX Item \"ev_tstamp ev_time ()\"\nReturns the current time as libev would use it. Please note that the\n\\&\\f(CW\\*(C`ev_now\\*(C'\\fR function is usually faster and also often returns the timestamp\nyou actually want to know. Also interesting is the combination of\n\\&\\f(CW\\*(C`ev_now_update\\*(C'\\fR and \\f(CW\\*(C`ev_now\\*(C'\\fR.\n.IP \"ev_sleep (ev_tstamp interval)\" 4\n.IX Item \"ev_sleep (ev_tstamp interval)\"\nSleep for the given interval: The current thread will be blocked\nuntil either it is interrupted or the given time interval has\npassed (approximately \\- it might return a bit earlier even if not\ninterrupted). Returns immediately if \\f(CW\\*(C`interval <= 0\\*(C'\\fR.\n.Sp\nBasically this is a sub-second-resolution \\f(CW\\*(C`sleep ()\\*(C'\\fR.\n.Sp\nThe range of the \\f(CW\\*(C`interval\\*(C'\\fR is limited \\- libev only guarantees to work\nwith sleep times of up to one day (\\f(CW\\*(C`interval <= 86400\\*(C'\\fR).\n.IP \"int ev_version_major ()\" 4\n.IX Item \"int ev_version_major ()\"\n.PD 0\n.IP \"int ev_version_minor ()\" 4\n.IX Item \"int ev_version_minor ()\"\n.PD\nYou can find out the major and minor \\s-1ABI\\s0 version numbers of the library\nyou linked against by calling the functions \\f(CW\\*(C`ev_version_major\\*(C'\\fR and\n\\&\\f(CW\\*(C`ev_version_minor\\*(C'\\fR. If you want, you can compare against the global\nsymbols \\f(CW\\*(C`EV_VERSION_MAJOR\\*(C'\\fR and \\f(CW\\*(C`EV_VERSION_MINOR\\*(C'\\fR, which specify the\nversion of the library your program was compiled against.\n.Sp\nThese version numbers refer to the \\s-1ABI\\s0 version of the library, not the\nrelease version.\n.Sp\nUsually, it's a good idea to terminate if the major versions mismatch,\nas this indicates an incompatible change. Minor versions are usually\ncompatible to older versions, so a larger minor version alone is usually\nnot a problem.\n.Sp\nExample: Make sure we haven't accidentally been linked against the wrong\nversion (note, however, that this will not detect other \\s-1ABI\\s0 mismatches,\nsuch as \\s-1LFS\\s0 or reentrancy).\n.Sp\n.Vb 3\n\\&   assert ((\"libev version mismatch\",\n\\&            ev_version_major () == EV_VERSION_MAJOR\n\\&            && ev_version_minor () >= EV_VERSION_MINOR));\n.Ve\n.IP \"unsigned int ev_supported_backends ()\" 4\n.IX Item \"unsigned int ev_supported_backends ()\"\nReturn the set of all backends (i.e. their corresponding \\f(CW\\*(C`EV_BACKEND_*\\*(C'\\fR\nvalue) compiled into this binary of libev (independent of their\navailability on the system you are running on). See \\f(CW\\*(C`ev_default_loop\\*(C'\\fR for\na description of the set values.\n.Sp\nExample: make sure we have the epoll method, because yeah this is cool and\na must have and can we have a torrent of it please!!!11\n.Sp\n.Vb 2\n\\&   assert ((\"sorry, no epoll, no sex\",\n\\&            ev_supported_backends () & EVBACKEND_EPOLL));\n.Ve\n.IP \"unsigned int ev_recommended_backends ()\" 4\n.IX Item \"unsigned int ev_recommended_backends ()\"\nReturn the set of all backends compiled into this binary of libev and\nalso recommended for this platform, meaning it will work for most file\ndescriptor types. This set is often smaller than the one returned by\n\\&\\f(CW\\*(C`ev_supported_backends\\*(C'\\fR, as for example kqueue is broken on most BSDs\nand will not be auto-detected unless you explicitly request it (assuming\nyou know what you are doing). This is the set of backends that libev will\nprobe for if you specify no backends explicitly.\n.IP \"unsigned int ev_embeddable_backends ()\" 4\n.IX Item \"unsigned int ev_embeddable_backends ()\"\nReturns the set of backends that are embeddable in other event loops. This\nvalue is platform-specific but can include backends not available on the\ncurrent system. To find which embeddable backends might be supported on\nthe current system, you would need to look at \\f(CW\\*(C`ev_embeddable_backends ()\n& ev_supported_backends ()\\*(C'\\fR, likewise for recommended ones.\n.Sp\nSee the description of \\f(CW\\*(C`ev_embed\\*(C'\\fR watchers for more info.\n.IP \"ev_set_allocator (void *(*cb)(void *ptr, long size) throw ())\" 4\n.IX Item \"ev_set_allocator (void *(*cb)(void *ptr, long size) throw ())\"\nSets the allocation function to use (the prototype is similar \\- the\nsemantics are identical to the \\f(CW\\*(C`realloc\\*(C'\\fR C89/SuS/POSIX function). It is\nused to allocate and free memory (no surprises here). If it returns zero\nwhen memory needs to be allocated (\\f(CW\\*(C`size != 0\\*(C'\\fR), the library might abort\nor take some potentially destructive action.\n.Sp\nSince some systems (at least OpenBSD and Darwin) fail to implement\ncorrect \\f(CW\\*(C`realloc\\*(C'\\fR semantics, libev will use a wrapper around the system\n\\&\\f(CW\\*(C`realloc\\*(C'\\fR and \\f(CW\\*(C`free\\*(C'\\fR functions by default.\n.Sp\nYou could override this function in high-availability programs to, say,\nfree some memory if it cannot allocate memory, to use a special allocator,\nor even to sleep a while and retry until some memory is available.\n.Sp\nExample: Replace the libev allocator with one that waits a bit and then\nretries (example requires a standards-compliant \\f(CW\\*(C`realloc\\*(C'\\fR).\n.Sp\n.Vb 6\n\\&   static void *\n\\&   persistent_realloc (void *ptr, size_t size)\n\\&   {\n\\&     for (;;)\n\\&       {\n\\&         void *newptr = realloc (ptr, size);\n\\&\n\\&         if (newptr)\n\\&           return newptr;\n\\&\n\\&         sleep (60);\n\\&       }\n\\&   }\n\\&\n\\&   ...\n\\&   ev_set_allocator (persistent_realloc);\n.Ve\n.IP \"ev_set_syserr_cb (void (*cb)(const char *msg) throw ())\" 4\n.IX Item \"ev_set_syserr_cb (void (*cb)(const char *msg) throw ())\"\nSet the callback function to call on a retryable system call error (such\nas failed select, poll, epoll_wait). The message is a printable string\nindicating the system call or subsystem causing the problem. If this\ncallback is set, then libev will expect it to remedy the situation, no\nmatter what, when it returns. That is, libev will generally retry the\nrequested operation, or, if the condition doesn't go away, do bad stuff\n(such as abort).\n.Sp\nExample: This is basically the same thing that libev does internally, too.\n.Sp\n.Vb 6\n\\&   static void\n\\&   fatal_error (const char *msg)\n\\&   {\n\\&     perror (msg);\n\\&     abort ();\n\\&   }\n\\&\n\\&   ...\n\\&   ev_set_syserr_cb (fatal_error);\n.Ve\n.IP \"ev_feed_signal (int signum)\" 4\n.IX Item \"ev_feed_signal (int signum)\"\nThis function can be used to \\*(L\"simulate\\*(R\" a signal receive. It is completely\nsafe to call this function at any time, from any context, including signal\nhandlers or random threads.\n.Sp\nIts main use is to customise signal handling in your process, especially\nin the presence of threads. For example, you could block signals\nby default in all threads (and specifying \\f(CW\\*(C`EVFLAG_NOSIGMASK\\*(C'\\fR when\ncreating any loops), and in one thread, use \\f(CW\\*(C`sigwait\\*(C'\\fR or any other\nmechanism to wait for signals, then \\*(L\"deliver\\*(R\" them to libev by calling\n\\&\\f(CW\\*(C`ev_feed_signal\\*(C'\\fR.\n.SH \"FUNCTIONS CONTROLLING EVENT LOOPS\"\n.IX Header \"FUNCTIONS CONTROLLING EVENT LOOPS\"\nAn event loop is described by a \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR (the \\f(CW\\*(C`struct\\*(C'\\fR is\n\\&\\fInot\\fR optional in this case unless libev 3 compatibility is disabled, as\nlibev 3 had an \\f(CW\\*(C`ev_loop\\*(C'\\fR function colliding with the struct name).\n.PP\nThe library knows two types of such loops, the \\fIdefault\\fR loop, which\nsupports child process events, and dynamically created event loops which\ndo not.\n.IP \"struct ev_loop *ev_default_loop (unsigned int flags)\" 4\n.IX Item \"struct ev_loop *ev_default_loop (unsigned int flags)\"\nThis returns the \\*(L\"default\\*(R\" event loop object, which is what you should\nnormally use when you just need \\*(L\"the event loop\\*(R\". Event loop objects and\nthe \\f(CW\\*(C`flags\\*(C'\\fR parameter are described in more detail in the entry for\n\\&\\f(CW\\*(C`ev_loop_new\\*(C'\\fR.\n.Sp\nIf the default loop is already initialised then this function simply\nreturns it (and ignores the flags. If that is troubling you, check\n\\&\\f(CW\\*(C`ev_backend ()\\*(C'\\fR afterwards). Otherwise it will create it with the given\nflags, which should almost always be \\f(CW0\\fR, unless the caller is also the\none calling \\f(CW\\*(C`ev_run\\*(C'\\fR or otherwise qualifies as \\*(L\"the main program\\*(R\".\n.Sp\nIf you don't know what event loop to use, use the one returned from this\nfunction (or via the \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR macro).\n.Sp\nNote that this function is \\fInot\\fR thread-safe, so if you want to use it\nfrom multiple threads, you have to employ some kind of mutex (note also\nthat this case is unlikely, as loops cannot be shared easily between\nthreads anyway).\n.Sp\nThe default loop is the only loop that can handle \\f(CW\\*(C`ev_child\\*(C'\\fR watchers,\nand to do this, it always registers a handler for \\f(CW\\*(C`SIGCHLD\\*(C'\\fR. If this is\na problem for your application you can either create a dynamic loop with\n\\&\\f(CW\\*(C`ev_loop_new\\*(C'\\fR which doesn't do that, or you can simply overwrite the\n\\&\\f(CW\\*(C`SIGCHLD\\*(C'\\fR signal handler \\fIafter\\fR calling \\f(CW\\*(C`ev_default_init\\*(C'\\fR.\n.Sp\nExample: This is the most typical usage.\n.Sp\n.Vb 2\n\\&   if (!ev_default_loop (0))\n\\&     fatal (\"could not initialise libev, bad $LIBEV_FLAGS in environment?\");\n.Ve\n.Sp\nExample: Restrict libev to the select and poll backends, and do not allow\nenvironment settings to be taken into account:\n.Sp\n.Vb 1\n\\&   ev_default_loop (EVBACKEND_POLL | EVBACKEND_SELECT | EVFLAG_NOENV);\n.Ve\n.IP \"struct ev_loop *ev_loop_new (unsigned int flags)\" 4\n.IX Item \"struct ev_loop *ev_loop_new (unsigned int flags)\"\nThis will create and initialise a new event loop object. If the loop\ncould not be initialised, returns false.\n.Sp\nThis function is thread-safe, and one common way to use libev with\nthreads is indeed to create one loop per thread, and using the default\nloop in the \\*(L\"main\\*(R\" or \\*(L\"initial\\*(R\" thread.\n.Sp\nThe flags argument can be used to specify special behaviour or specific\nbackends to use, and is usually specified as \\f(CW0\\fR (or \\f(CW\\*(C`EVFLAG_AUTO\\*(C'\\fR).\n.Sp\nThe following flags are supported:\n.RS 4\n.ie n .IP \"\"\"EVFLAG_AUTO\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_AUTO\\fR\" 4\n.IX Item \"EVFLAG_AUTO\"\nThe default flags value. Use this if you have no clue (it's the right\nthing, believe me).\n.ie n .IP \"\"\"EVFLAG_NOENV\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_NOENV\\fR\" 4\n.IX Item \"EVFLAG_NOENV\"\nIf this flag bit is or'ed into the flag value (or the program runs setuid\nor setgid) then libev will \\fInot\\fR look at the environment variable\n\\&\\f(CW\\*(C`LIBEV_FLAGS\\*(C'\\fR. Otherwise (the default), this environment variable will\noverride the flags completely if it is found in the environment. This is\nuseful to try out specific backends to test their performance, to work\naround bugs, or to make libev threadsafe (accessing environment variables\ncannot be done in a threadsafe way, but usually it works if no other\nthread modifies them).\n.ie n .IP \"\"\"EVFLAG_FORKCHECK\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_FORKCHECK\\fR\" 4\n.IX Item \"EVFLAG_FORKCHECK\"\nInstead of calling \\f(CW\\*(C`ev_loop_fork\\*(C'\\fR manually after a fork, you can also\nmake libev check for a fork in each iteration by enabling this flag.\n.Sp\nThis works by calling \\f(CW\\*(C`getpid ()\\*(C'\\fR on every iteration of the loop,\nand thus this might slow down your event loop if you do a lot of loop\niterations and little real work, but is usually not noticeable (on my\nGNU/Linux system for example, \\f(CW\\*(C`getpid\\*(C'\\fR is actually a simple 5\\-insn sequence\nwithout a system call and thus \\fIvery\\fR fast, but my GNU/Linux system also has\n\\&\\f(CW\\*(C`pthread_atfork\\*(C'\\fR which is even faster).\n.Sp\nThe big advantage of this flag is that you can forget about fork (and\nforget about forgetting to tell libev about forking, although you still\nhave to ignore \\f(CW\\*(C`SIGPIPE\\*(C'\\fR) when you use this flag.\n.Sp\nThis flag setting cannot be overridden or specified in the \\f(CW\\*(C`LIBEV_FLAGS\\*(C'\\fR\nenvironment variable.\n.ie n .IP \"\"\"EVFLAG_NOINOTIFY\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_NOINOTIFY\\fR\" 4\n.IX Item \"EVFLAG_NOINOTIFY\"\nWhen this flag is specified, then libev will not attempt to use the\n\\&\\fIinotify\\fR \\s-1API\\s0 for its \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers. Apart from debugging and\ntesting, this flag can be useful to conserve inotify file descriptors, as\notherwise each loop using \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers consumes one inotify handle.\n.ie n .IP \"\"\"EVFLAG_SIGNALFD\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_SIGNALFD\\fR\" 4\n.IX Item \"EVFLAG_SIGNALFD\"\nWhen this flag is specified, then libev will attempt to use the\n\\&\\fIsignalfd\\fR \\s-1API\\s0 for its \\f(CW\\*(C`ev_signal\\*(C'\\fR (and \\f(CW\\*(C`ev_child\\*(C'\\fR) watchers. This \\s-1API\\s0\ndelivers signals synchronously, which makes it both faster and might make\nit possible to get the queued signal data. It can also simplify signal\nhandling with threads, as long as you properly block signals in your\nthreads that are not interested in handling them.\n.Sp\nSignalfd will not be used by default as this changes your signal mask, and\nthere are a lot of shoddy libraries and programs (glib's threadpool for\nexample) that can't properly initialise their signal masks.\n.ie n .IP \"\"\"EVFLAG_NOSIGMASK\"\"\" 4\n.el .IP \"\\f(CWEVFLAG_NOSIGMASK\\fR\" 4\n.IX Item \"EVFLAG_NOSIGMASK\"\nWhen this flag is specified, then libev will avoid to modify the signal\nmask. Specifically, this means you have to make sure signals are unblocked\nwhen you want to receive them.\n.Sp\nThis behaviour is useful when you want to do your own signal handling, or\nwant to handle signals only in specific threads and want to avoid libev\nunblocking the signals.\n.Sp\nIt's also required by \\s-1POSIX\\s0 in a threaded program, as libev calls\n\\&\\f(CW\\*(C`sigprocmask\\*(C'\\fR, whose behaviour is officially unspecified.\n.Sp\nThis flag's behaviour will become the default in future versions of libev.\n.ie n .IP \"\"\"EVBACKEND_SELECT\"\"  (value 1, portable select backend)\" 4\n.el .IP \"\\f(CWEVBACKEND_SELECT\\fR  (value 1, portable select backend)\" 4\n.IX Item \"EVBACKEND_SELECT (value 1, portable select backend)\"\nThis is your standard \\fIselect\\fR\\|(2) backend. Not \\fIcompletely\\fR standard, as\nlibev tries to roll its own fd_set with no limits on the number of fds,\nbut if that fails, expect a fairly low limit on the number of fds when\nusing this backend. It doesn't scale too well (O(highest_fd)), but its\nusually the fastest backend for a low number of (low-numbered :) fds.\n.Sp\nTo get good performance out of this backend you need a high amount of\nparallelism (most of the file descriptors should be busy). If you are\nwriting a server, you should \\f(CW\\*(C`accept ()\\*(C'\\fR in a loop to accept as many\nconnections as possible during one iteration. You might also want to have\na look at \\f(CW\\*(C`ev_set_io_collect_interval ()\\*(C'\\fR to increase the amount of\nreadiness notifications you get per iteration.\n.Sp\nThis backend maps \\f(CW\\*(C`EV_READ\\*(C'\\fR to the \\f(CW\\*(C`readfds\\*(C'\\fR set and \\f(CW\\*(C`EV_WRITE\\*(C'\\fR to the\n\\&\\f(CW\\*(C`writefds\\*(C'\\fR set (and to work around Microsoft Windows bugs, also onto the\n\\&\\f(CW\\*(C`exceptfds\\*(C'\\fR set on that platform).\n.ie n .IP \"\"\"EVBACKEND_POLL\"\"    (value 2, poll backend, available everywhere except on windows)\" 4\n.el .IP \"\\f(CWEVBACKEND_POLL\\fR    (value 2, poll backend, available everywhere except on windows)\" 4\n.IX Item \"EVBACKEND_POLL (value 2, poll backend, available everywhere except on windows)\"\nAnd this is your standard \\fIpoll\\fR\\|(2) backend. It's more complicated\nthan select, but handles sparse fds better and has no artificial\nlimit on the number of fds you can use (except it will slow down\nconsiderably with a lot of inactive fds). It scales similarly to select,\ni.e. O(total_fds). See the entry for \\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR, above, for\nperformance tips.\n.Sp\nThis backend maps \\f(CW\\*(C`EV_READ\\*(C'\\fR to \\f(CW\\*(C`POLLIN | POLLERR | POLLHUP\\*(C'\\fR, and\n\\&\\f(CW\\*(C`EV_WRITE\\*(C'\\fR to \\f(CW\\*(C`POLLOUT | POLLERR | POLLHUP\\*(C'\\fR.\n.ie n .IP \"\"\"EVBACKEND_EPOLL\"\"   (value 4, Linux)\" 4\n.el .IP \"\\f(CWEVBACKEND_EPOLL\\fR   (value 4, Linux)\" 4\n.IX Item \"EVBACKEND_EPOLL (value 4, Linux)\"\nUse the linux-specific \\fIepoll\\fR\\|(7) interface (for both pre\\- and post\\-2.6.9\nkernels).\n.Sp\nFor few fds, this backend is a bit little slower than poll and select, but\nit scales phenomenally better. While poll and select usually scale like\nO(total_fds) where total_fds is the total number of fds (or the highest\nfd), epoll scales either O(1) or O(active_fds).\n.Sp\nThe epoll mechanism deserves honorable mention as the most misdesigned\nof the more advanced event mechanisms: mere annoyances include silently\ndropping file descriptors, requiring a system call per change per file\ndescriptor (and unnecessary guessing of parameters), problems with dup,\nreturning before the timeout value, resulting in additional iterations\n(and only giving 5ms accuracy while select on the same platform gives\n0.1ms) and so on. The biggest issue is fork races, however \\- if a program\nforks then \\fIboth\\fR parent and child process have to recreate the epoll\nset, which can take considerable time (one syscall per file descriptor)\nand is of course hard to detect.\n.Sp\nEpoll is also notoriously buggy \\- embedding epoll fds \\fIshould\\fR work,\nbut of course \\fIdoesn't\\fR, and epoll just loves to report events for\ntotally \\fIdifferent\\fR file descriptors (even already closed ones, so\none cannot even remove them from the set) than registered in the set\n(especially on \\s-1SMP\\s0 systems). Libev tries to counter these spurious\nnotifications by employing an additional generation counter and comparing\nthat against the events to filter out spurious ones, recreating the set\nwhen required. Epoll also erroneously rounds down timeouts, but gives you\nno way to know when and by how much, so sometimes you have to busy-wait\nbecause epoll returns immediately despite a nonzero timeout. And last\nnot least, it also refuses to work with some file descriptors which work\nperfectly fine with \\f(CW\\*(C`select\\*(C'\\fR (files, many character devices...).\n.Sp\nEpoll is truly the train wreck among event poll mechanisms, a frankenpoll,\ncobbled together in a hurry, no thought to design or interaction with\nothers. Oh, the pain, will it ever stop...\n.Sp\nWhile stopping, setting and starting an I/O watcher in the same iteration\nwill result in some caching, there is still a system call per such\nincident (because the same \\fIfile descriptor\\fR could point to a different\n\\&\\fIfile description\\fR now), so its best to avoid that. Also, \\f(CW\\*(C`dup ()\\*(C'\\fR'ed\nfile descriptors might not work very well if you register events for both\nfile descriptors.\n.Sp\nBest performance from this backend is achieved by not unregistering all\nwatchers for a file descriptor until it has been closed, if possible,\ni.e. keep at least one watcher active per fd at all times. Stopping and\nstarting a watcher (without re-setting it) also usually doesn't cause\nextra overhead. A fork can both result in spurious notifications as well\nas in libev having to destroy and recreate the epoll object, which can\ntake considerable time and thus should be avoided.\n.Sp\nAll this means that, in practice, \\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR can be as fast or\nfaster than epoll for maybe up to a hundred file descriptors, depending on\nthe usage. So sad.\n.Sp\nWhile nominally embeddable in other event loops, this feature is broken in\nall kernel versions tested so far.\n.Sp\nThis backend maps \\f(CW\\*(C`EV_READ\\*(C'\\fR and \\f(CW\\*(C`EV_WRITE\\*(C'\\fR in the same way as\n\\&\\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR.\n.ie n .IP \"\"\"EVBACKEND_KQUEUE\"\"  (value 8, most \\s-1BSD\\s0 clones)\" 4\n.el .IP \"\\f(CWEVBACKEND_KQUEUE\\fR  (value 8, most \\s-1BSD\\s0 clones)\" 4\n.IX Item \"EVBACKEND_KQUEUE (value 8, most BSD clones)\"\nKqueue deserves special mention, as at the time of this writing, it\nwas broken on all BSDs except NetBSD (usually it doesn't work reliably\nwith anything but sockets and pipes, except on Darwin, where of course\nit's completely useless). Unlike epoll, however, whose brokenness\nis by design, these kqueue bugs can (and eventually will) be fixed\nwithout \\s-1API\\s0 changes to existing programs. For this reason it's not being\n\\&\\*(L\"auto-detected\\*(R\" unless you explicitly specify it in the flags (i.e. using\n\\&\\f(CW\\*(C`EVBACKEND_KQUEUE\\*(C'\\fR) or libev was compiled on a known-to-be-good (\\-enough)\nsystem like NetBSD.\n.Sp\nYou still can embed kqueue into a normal poll or select backend and use it\nonly for sockets (after having made sure that sockets work with kqueue on\nthe target platform). See \\f(CW\\*(C`ev_embed\\*(C'\\fR watchers for more info.\n.Sp\nIt scales in the same way as the epoll backend, but the interface to the\nkernel is more efficient (which says nothing about its actual speed, of\ncourse). While stopping, setting and starting an I/O watcher does never\ncause an extra system call as with \\f(CW\\*(C`EVBACKEND_EPOLL\\*(C'\\fR, it still adds up to\ntwo event changes per incident. Support for \\f(CW\\*(C`fork ()\\*(C'\\fR is very bad (you\nmight have to leak fd's on fork, but it's more sane than epoll) and it\ndrops fds silently in similarly hard-to-detect cases.\n.Sp\nThis backend usually performs well under most conditions.\n.Sp\nWhile nominally embeddable in other event loops, this doesn't work\neverywhere, so you might need to test for this. And since it is broken\nalmost everywhere, you should only use it when you have a lot of sockets\n(for which it usually works), by embedding it into another event loop\n(e.g. \\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR or \\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR (but \\f(CW\\*(C`poll\\*(C'\\fR is of course\nalso broken on \\s-1OS X\\s0)) and, did I mention it, using it only for sockets.\n.Sp\nThis backend maps \\f(CW\\*(C`EV_READ\\*(C'\\fR into an \\f(CW\\*(C`EVFILT_READ\\*(C'\\fR kevent with\n\\&\\f(CW\\*(C`NOTE_EOF\\*(C'\\fR, and \\f(CW\\*(C`EV_WRITE\\*(C'\\fR into an \\f(CW\\*(C`EVFILT_WRITE\\*(C'\\fR kevent with\n\\&\\f(CW\\*(C`NOTE_EOF\\*(C'\\fR.\n.ie n .IP \"\"\"EVBACKEND_DEVPOLL\"\" (value 16, Solaris 8)\" 4\n.el .IP \"\\f(CWEVBACKEND_DEVPOLL\\fR (value 16, Solaris 8)\" 4\n.IX Item \"EVBACKEND_DEVPOLL (value 16, Solaris 8)\"\nThis is not implemented yet (and might never be, unless you send me an\nimplementation). According to reports, \\f(CW\\*(C`/dev/poll\\*(C'\\fR only supports sockets\nand is not embeddable, which would limit the usefulness of this backend\nimmensely.\n.ie n .IP \"\"\"EVBACKEND_PORT\"\"    (value 32, Solaris 10)\" 4\n.el .IP \"\\f(CWEVBACKEND_PORT\\fR    (value 32, Solaris 10)\" 4\n.IX Item \"EVBACKEND_PORT (value 32, Solaris 10)\"\nThis uses the Solaris 10 event port mechanism. As with everything on Solaris,\nit's really slow, but it still scales very well (O(active_fds)).\n.Sp\nWhile this backend scales well, it requires one system call per active\nfile descriptor per loop iteration. For small and medium numbers of file\ndescriptors a \\*(L\"slow\\*(R\" \\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR or \\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR backend\nmight perform better.\n.Sp\nOn the positive side, this backend actually performed fully to\nspecification in all tests and is fully embeddable, which is a rare feat\namong the OS-specific backends (I vastly prefer correctness over speed\nhacks).\n.Sp\nOn the negative side, the interface is \\fIbizarre\\fR \\- so bizarre that\neven sun itself gets it wrong in their code examples: The event polling\nfunction sometimes returns events to the caller even though an error\noccurred, but with no indication whether it has done so or not (yes, it's\neven documented that way) \\- deadly for edge-triggered interfaces where you\nabsolutely have to know whether an event occurred or not because you have\nto re-arm the watcher.\n.Sp\nFortunately libev seems to be able to work around these idiocies.\n.Sp\nThis backend maps \\f(CW\\*(C`EV_READ\\*(C'\\fR and \\f(CW\\*(C`EV_WRITE\\*(C'\\fR in the same way as\n\\&\\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR.\n.ie n .IP \"\"\"EVBACKEND_ALL\"\"\" 4\n.el .IP \"\\f(CWEVBACKEND_ALL\\fR\" 4\n.IX Item \"EVBACKEND_ALL\"\nTry all backends (even potentially broken ones that wouldn't be tried\nwith \\f(CW\\*(C`EVFLAG_AUTO\\*(C'\\fR). Since this is a mask, you can do stuff such as\n\\&\\f(CW\\*(C`EVBACKEND_ALL & ~EVBACKEND_KQUEUE\\*(C'\\fR.\n.Sp\nIt is definitely not recommended to use this flag, use whatever\n\\&\\f(CW\\*(C`ev_recommended_backends ()\\*(C'\\fR returns, or simply do not specify a backend\nat all.\n.ie n .IP \"\"\"EVBACKEND_MASK\"\"\" 4\n.el .IP \"\\f(CWEVBACKEND_MASK\\fR\" 4\n.IX Item \"EVBACKEND_MASK\"\nNot a backend at all, but a mask to select all backend bits from a\n\\&\\f(CW\\*(C`flags\\*(C'\\fR value, in case you want to mask out any backends from a flags\nvalue (e.g. when modifying the \\f(CW\\*(C`LIBEV_FLAGS\\*(C'\\fR environment variable).\n.RE\n.RS 4\n.Sp\nIf one or more of the backend flags are or'ed into the flags value,\nthen only these backends will be tried (in the reverse order as listed\nhere). If none are specified, all backends in \\f(CW\\*(C`ev_recommended_backends\n()\\*(C'\\fR will be tried.\n.Sp\nExample: Try to create a event loop that uses epoll and nothing else.\n.Sp\n.Vb 3\n\\&   struct ev_loop *epoller = ev_loop_new (EVBACKEND_EPOLL | EVFLAG_NOENV);\n\\&   if (!epoller)\n\\&     fatal (\"no epoll found here, maybe it hides under your chair\");\n.Ve\n.Sp\nExample: Use whatever libev has to offer, but make sure that kqueue is\nused if available.\n.Sp\n.Vb 1\n\\&   struct ev_loop *loop = ev_loop_new (ev_recommended_backends () | EVBACKEND_KQUEUE);\n.Ve\n.RE\n.IP \"ev_loop_destroy (loop)\" 4\n.IX Item \"ev_loop_destroy (loop)\"\nDestroys an event loop object (frees all memory and kernel state\netc.). None of the active event watchers will be stopped in the normal\nsense, so e.g. \\f(CW\\*(C`ev_is_active\\*(C'\\fR might still return true. It is your\nresponsibility to either stop all watchers cleanly yourself \\fIbefore\\fR\ncalling this function, or cope with the fact afterwards (which is usually\nthe easiest thing, you can just ignore the watchers and/or \\f(CW\\*(C`free ()\\*(C'\\fR them\nfor example).\n.Sp\nNote that certain global state, such as signal state (and installed signal\nhandlers), will not be freed by this function, and related watchers (such\nas signal and child watchers) would need to be stopped manually.\n.Sp\nThis function is normally used on loop objects allocated by\n\\&\\f(CW\\*(C`ev_loop_new\\*(C'\\fR, but it can also be used on the default loop returned by\n\\&\\f(CW\\*(C`ev_default_loop\\*(C'\\fR, in which case it is not thread-safe.\n.Sp\nNote that it is not advisable to call this function on the default loop\nexcept in the rare occasion where you really need to free its resources.\nIf you need dynamically allocated loops it is better to use \\f(CW\\*(C`ev_loop_new\\*(C'\\fR\nand \\f(CW\\*(C`ev_loop_destroy\\*(C'\\fR.\n.IP \"ev_loop_fork (loop)\" 4\n.IX Item \"ev_loop_fork (loop)\"\nThis function sets a flag that causes subsequent \\f(CW\\*(C`ev_run\\*(C'\\fR iterations\nto reinitialise the kernel state for backends that have one. Despite\nthe name, you can call it anytime you are allowed to start or stop\nwatchers (except inside an \\f(CW\\*(C`ev_prepare\\*(C'\\fR callback), but it makes most\nsense after forking, in the child process. You \\fImust\\fR call it (or use\n\\&\\f(CW\\*(C`EVFLAG_FORKCHECK\\*(C'\\fR) in the child before resuming or calling \\f(CW\\*(C`ev_run\\*(C'\\fR.\n.Sp\nIn addition, if you want to reuse a loop (via this function or\n\\&\\f(CW\\*(C`EVFLAG_FORKCHECK\\*(C'\\fR), you \\fIalso\\fR have to ignore \\f(CW\\*(C`SIGPIPE\\*(C'\\fR.\n.Sp\nAgain, you \\fIhave\\fR to call it on \\fIany\\fR loop that you want to re-use after\na fork, \\fIeven if you do not plan to use the loop in the parent\\fR. This is\nbecause some kernel interfaces *cough* \\fIkqueue\\fR *cough* do funny things\nduring fork.\n.Sp\nOn the other hand, you only need to call this function in the child\nprocess if and only if you want to use the event loop in the child. If\nyou just fork+exec or create a new loop in the child, you don't have to\ncall it at all (in fact, \\f(CW\\*(C`epoll\\*(C'\\fR is so badly broken that it makes a\ndifference, but libev will usually detect this case on its own and do a\ncostly reset of the backend).\n.Sp\nThe function itself is quite fast and it's usually not a problem to call\nit just in case after a fork.\n.Sp\nExample: Automate calling \\f(CW\\*(C`ev_loop_fork\\*(C'\\fR on the default loop when\nusing pthreads.\n.Sp\n.Vb 5\n\\&   static void\n\\&   post_fork_child (void)\n\\&   {\n\\&     ev_loop_fork (EV_DEFAULT);\n\\&   }\n\\&\n\\&   ...\n\\&   pthread_atfork (0, 0, post_fork_child);\n.Ve\n.IP \"int ev_is_default_loop (loop)\" 4\n.IX Item \"int ev_is_default_loop (loop)\"\nReturns true when the given loop is, in fact, the default loop, and false\notherwise.\n.IP \"unsigned int ev_iteration (loop)\" 4\n.IX Item \"unsigned int ev_iteration (loop)\"\nReturns the current iteration count for the event loop, which is identical\nto the number of times libev did poll for new events. It starts at \\f(CW0\\fR\nand happily wraps around with enough iterations.\n.Sp\nThis value can sometimes be useful as a generation counter of sorts (it\n\\&\\*(L\"ticks\\*(R\" the number of loop iterations), as it roughly corresponds with\n\\&\\f(CW\\*(C`ev_prepare\\*(C'\\fR and \\f(CW\\*(C`ev_check\\*(C'\\fR calls \\- and is incremented between the\nprepare and check phases.\n.IP \"unsigned int ev_depth (loop)\" 4\n.IX Item \"unsigned int ev_depth (loop)\"\nReturns the number of times \\f(CW\\*(C`ev_run\\*(C'\\fR was entered minus the number of\ntimes \\f(CW\\*(C`ev_run\\*(C'\\fR was exited normally, in other words, the recursion depth.\n.Sp\nOutside \\f(CW\\*(C`ev_run\\*(C'\\fR, this number is zero. In a callback, this number is\n\\&\\f(CW1\\fR, unless \\f(CW\\*(C`ev_run\\*(C'\\fR was invoked recursively (or from another thread),\nin which case it is higher.\n.Sp\nLeaving \\f(CW\\*(C`ev_run\\*(C'\\fR abnormally (setjmp/longjmp, cancelling the thread,\nthrowing an exception etc.), doesn't count as \\*(L\"exit\\*(R\" \\- consider this\nas a hint to avoid such ungentleman-like behaviour unless it's really\nconvenient, in which case it is fully supported.\n.IP \"unsigned int ev_backend (loop)\" 4\n.IX Item \"unsigned int ev_backend (loop)\"\nReturns one of the \\f(CW\\*(C`EVBACKEND_*\\*(C'\\fR flags indicating the event backend in\nuse.\n.IP \"ev_tstamp ev_now (loop)\" 4\n.IX Item \"ev_tstamp ev_now (loop)\"\nReturns the current \\*(L\"event loop time\\*(R\", which is the time the event loop\nreceived events and started processing them. This timestamp does not\nchange as long as callbacks are being processed, and this is also the base\ntime used for relative timers. You can treat it as the timestamp of the\nevent occurring (or more correctly, libev finding out about it).\n.IP \"ev_now_update (loop)\" 4\n.IX Item \"ev_now_update (loop)\"\nEstablishes the current time by querying the kernel, updating the time\nreturned by \\f(CW\\*(C`ev_now ()\\*(C'\\fR in the progress. This is a costly operation and\nis usually done automatically within \\f(CW\\*(C`ev_run ()\\*(C'\\fR.\n.Sp\nThis function is rarely useful, but when some event callback runs for a\nvery long time without entering the event loop, updating libev's idea of\nthe current time is a good idea.\n.Sp\nSee also \\*(L\"The special problem of time updates\\*(R\" in the \\f(CW\\*(C`ev_timer\\*(C'\\fR section.\n.IP \"ev_suspend (loop)\" 4\n.IX Item \"ev_suspend (loop)\"\n.PD 0\n.IP \"ev_resume (loop)\" 4\n.IX Item \"ev_resume (loop)\"\n.PD\nThese two functions suspend and resume an event loop, for use when the\nloop is not used for a while and timeouts should not be processed.\n.Sp\nA typical use case would be an interactive program such as a game:  When\nthe user presses \\f(CW\\*(C`^Z\\*(C'\\fR to suspend the game and resumes it an hour later it\nwould be best to handle timeouts as if no time had actually passed while\nthe program was suspended. This can be achieved by calling \\f(CW\\*(C`ev_suspend\\*(C'\\fR\nin your \\f(CW\\*(C`SIGTSTP\\*(C'\\fR handler, sending yourself a \\f(CW\\*(C`SIGSTOP\\*(C'\\fR and calling\n\\&\\f(CW\\*(C`ev_resume\\*(C'\\fR directly afterwards to resume timer processing.\n.Sp\nEffectively, all \\f(CW\\*(C`ev_timer\\*(C'\\fR watchers will be delayed by the time spend\nbetween \\f(CW\\*(C`ev_suspend\\*(C'\\fR and \\f(CW\\*(C`ev_resume\\*(C'\\fR, and all \\f(CW\\*(C`ev_periodic\\*(C'\\fR watchers\nwill be rescheduled (that is, they will lose any events that would have\noccurred while suspended).\n.Sp\nAfter calling \\f(CW\\*(C`ev_suspend\\*(C'\\fR you \\fBmust not\\fR call \\fIany\\fR function on the\ngiven loop other than \\f(CW\\*(C`ev_resume\\*(C'\\fR, and you \\fBmust not\\fR call \\f(CW\\*(C`ev_resume\\*(C'\\fR\nwithout a previous call to \\f(CW\\*(C`ev_suspend\\*(C'\\fR.\n.Sp\nCalling \\f(CW\\*(C`ev_suspend\\*(C'\\fR/\\f(CW\\*(C`ev_resume\\*(C'\\fR has the side effect of updating the\nevent loop time (see \\f(CW\\*(C`ev_now_update\\*(C'\\fR).\n.IP \"bool ev_run (loop, int flags)\" 4\n.IX Item \"bool ev_run (loop, int flags)\"\nFinally, this is it, the event handler. This function usually is called\nafter you have initialised all your watchers and you want to start\nhandling events. It will ask the operating system for any new events, call\nthe watcher callbacks, and then repeat the whole process indefinitely: This\nis why event loops are called \\fIloops\\fR.\n.Sp\nIf the flags argument is specified as \\f(CW0\\fR, it will keep handling events\nuntil either no event watchers are active anymore or \\f(CW\\*(C`ev_break\\*(C'\\fR was\ncalled.\n.Sp\nThe return value is false if there are no more active watchers (which\nusually means \\*(L\"all jobs done\\*(R\" or \\*(L\"deadlock\\*(R\"), and true in all other cases\n(which usually means \" you should call \\f(CW\\*(C`ev_run\\*(C'\\fR again\").\n.Sp\nPlease note that an explicit \\f(CW\\*(C`ev_break\\*(C'\\fR is usually better than\nrelying on all watchers to be stopped when deciding when a program has\nfinished (especially in interactive programs), but having a program\nthat automatically loops as long as it has to and no longer by virtue\nof relying on its watchers stopping correctly, that is truly a thing of\nbeauty.\n.Sp\nThis function is \\fImostly\\fR exception-safe \\- you can break out of a\n\\&\\f(CW\\*(C`ev_run\\*(C'\\fR call by calling \\f(CW\\*(C`longjmp\\*(C'\\fR in a callback, throwing a \\*(C+\nexception and so on. This does not decrement the \\f(CW\\*(C`ev_depth\\*(C'\\fR value, nor\nwill it clear any outstanding \\f(CW\\*(C`EVBREAK_ONE\\*(C'\\fR breaks.\n.Sp\nA flags value of \\f(CW\\*(C`EVRUN_NOWAIT\\*(C'\\fR will look for new events, will handle\nthose events and any already outstanding ones, but will not wait and\nblock your process in case there are no events and will return after one\niteration of the loop. This is sometimes useful to poll and handle new\nevents while doing lengthy calculations, to keep the program responsive.\n.Sp\nA flags value of \\f(CW\\*(C`EVRUN_ONCE\\*(C'\\fR will look for new events (waiting if\nnecessary) and will handle those and any already outstanding ones. It\nwill block your process until at least one new event arrives (which could\nbe an event internal to libev itself, so there is no guarantee that a\nuser-registered callback will be called), and will return after one\niteration of the loop.\n.Sp\nThis is useful if you are waiting for some external event in conjunction\nwith something not expressible using other libev watchers (i.e. \"roll your\nown \\f(CW\\*(C`ev_run\\*(C'\\fR\"). However, a pair of \\f(CW\\*(C`ev_prepare\\*(C'\\fR/\\f(CW\\*(C`ev_check\\*(C'\\fR watchers is\nusually a better approach for this kind of thing.\n.Sp\nHere are the gory details of what \\f(CW\\*(C`ev_run\\*(C'\\fR does (this is for your\nunderstanding, not a guarantee that things will work exactly like this in\nfuture versions):\n.Sp\n.Vb 10\n\\&   \\- Increment loop depth.\n\\&   \\- Reset the ev_break status.\n\\&   \\- Before the first iteration, call any pending watchers.\n\\&   LOOP:\n\\&   \\- If EVFLAG_FORKCHECK was used, check for a fork.\n\\&   \\- If a fork was detected (by any means), queue and call all fork watchers.\n\\&   \\- Queue and call all prepare watchers.\n\\&   \\- If ev_break was called, goto FINISH.\n\\&   \\- If we have been forked, detach and recreate the kernel state\n\\&     as to not disturb the other process.\n\\&   \\- Update the kernel state with all outstanding changes.\n\\&   \\- Update the \"event loop time\" (ev_now ()).\n\\&   \\- Calculate for how long to sleep or block, if at all\n\\&     (active idle watchers, EVRUN_NOWAIT or not having\n\\&     any active watchers at all will result in not sleeping).\n\\&   \\- Sleep if the I/O and timer collect interval say so.\n\\&   \\- Increment loop iteration counter.\n\\&   \\- Block the process, waiting for any events.\n\\&   \\- Queue all outstanding I/O (fd) events.\n\\&   \\- Update the \"event loop time\" (ev_now ()), and do time jump adjustments.\n\\&   \\- Queue all expired timers.\n\\&   \\- Queue all expired periodics.\n\\&   \\- Queue all idle watchers with priority higher than that of pending events.\n\\&   \\- Queue all check watchers.\n\\&   \\- Call all queued watchers in reverse order (i.e. check watchers first).\n\\&     Signals and child watchers are implemented as I/O watchers, and will\n\\&     be handled here by queueing them when their watcher gets executed.\n\\&   \\- If ev_break has been called, or EVRUN_ONCE or EVRUN_NOWAIT\n\\&     were used, or there are no active watchers, goto FINISH, otherwise\n\\&     continue with step LOOP.\n\\&   FINISH:\n\\&   \\- Reset the ev_break status iff it was EVBREAK_ONE.\n\\&   \\- Decrement the loop depth.\n\\&   \\- Return.\n.Ve\n.Sp\nExample: Queue some jobs and then loop until no events are outstanding\nanymore.\n.Sp\n.Vb 4\n\\&   ... queue jobs here, make sure they register event watchers as long\n\\&   ... as they still have work to do (even an idle watcher will do..)\n\\&   ev_run (my_loop, 0);\n\\&   ... jobs done or somebody called break. yeah!\n.Ve\n.IP \"ev_break (loop, how)\" 4\n.IX Item \"ev_break (loop, how)\"\nCan be used to make a call to \\f(CW\\*(C`ev_run\\*(C'\\fR return early (but only after it\nhas processed all outstanding events). The \\f(CW\\*(C`how\\*(C'\\fR argument must be either\n\\&\\f(CW\\*(C`EVBREAK_ONE\\*(C'\\fR, which will make the innermost \\f(CW\\*(C`ev_run\\*(C'\\fR call return, or\n\\&\\f(CW\\*(C`EVBREAK_ALL\\*(C'\\fR, which will make all nested \\f(CW\\*(C`ev_run\\*(C'\\fR calls return.\n.Sp\nThis \\*(L\"break state\\*(R\" will be cleared on the next call to \\f(CW\\*(C`ev_run\\*(C'\\fR.\n.Sp\nIt is safe to call \\f(CW\\*(C`ev_break\\*(C'\\fR from outside any \\f(CW\\*(C`ev_run\\*(C'\\fR calls, too, in\nwhich case it will have no effect.\n.IP \"ev_ref (loop)\" 4\n.IX Item \"ev_ref (loop)\"\n.PD 0\n.IP \"ev_unref (loop)\" 4\n.IX Item \"ev_unref (loop)\"\n.PD\nRef/unref can be used to add or remove a reference count on the event\nloop: Every watcher keeps one reference, and as long as the reference\ncount is nonzero, \\f(CW\\*(C`ev_run\\*(C'\\fR will not return on its own.\n.Sp\nThis is useful when you have a watcher that you never intend to\nunregister, but that nevertheless should not keep \\f(CW\\*(C`ev_run\\*(C'\\fR from\nreturning. In such a case, call \\f(CW\\*(C`ev_unref\\*(C'\\fR after starting, and \\f(CW\\*(C`ev_ref\\*(C'\\fR\nbefore stopping it.\n.Sp\nAs an example, libev itself uses this for its internal signal pipe: It\nis not visible to the libev user and should not keep \\f(CW\\*(C`ev_run\\*(C'\\fR from\nexiting if no event watchers registered by it are active. It is also an\nexcellent way to do this for generic recurring timers or from within\nthird-party libraries. Just remember to \\fIunref after start\\fR and \\fIref\nbefore stop\\fR (but only if the watcher wasn't active before, or was active\nbefore, respectively. Note also that libev might stop watchers itself\n(e.g. non-repeating timers) in which case you have to \\f(CW\\*(C`ev_ref\\*(C'\\fR\nin the callback).\n.Sp\nExample: Create a signal watcher, but keep it from keeping \\f(CW\\*(C`ev_run\\*(C'\\fR\nrunning when nothing else is active.\n.Sp\n.Vb 4\n\\&   ev_signal exitsig;\n\\&   ev_signal_init (&exitsig, sig_cb, SIGINT);\n\\&   ev_signal_start (loop, &exitsig);\n\\&   ev_unref (loop);\n.Ve\n.Sp\nExample: For some weird reason, unregister the above signal handler again.\n.Sp\n.Vb 2\n\\&   ev_ref (loop);\n\\&   ev_signal_stop (loop, &exitsig);\n.Ve\n.IP \"ev_set_io_collect_interval (loop, ev_tstamp interval)\" 4\n.IX Item \"ev_set_io_collect_interval (loop, ev_tstamp interval)\"\n.PD 0\n.IP \"ev_set_timeout_collect_interval (loop, ev_tstamp interval)\" 4\n.IX Item \"ev_set_timeout_collect_interval (loop, ev_tstamp interval)\"\n.PD\nThese advanced functions influence the time that libev will spend waiting\nfor events. Both time intervals are by default \\f(CW0\\fR, meaning that libev\nwill try to invoke timer/periodic callbacks and I/O callbacks with minimum\nlatency.\n.Sp\nSetting these to a higher value (the \\f(CW\\*(C`interval\\*(C'\\fR \\fImust\\fR be >= \\f(CW0\\fR)\nallows libev to delay invocation of I/O and timer/periodic callbacks\nto increase efficiency of loop iterations (or to increase power-saving\nopportunities).\n.Sp\nThe idea is that sometimes your program runs just fast enough to handle\none (or very few) event(s) per loop iteration. While this makes the\nprogram responsive, it also wastes a lot of \\s-1CPU\\s0 time to poll for new\nevents, especially with backends like \\f(CW\\*(C`select ()\\*(C'\\fR which have a high\noverhead for the actual polling but can deliver many events at once.\n.Sp\nBy setting a higher \\fIio collect interval\\fR you allow libev to spend more\ntime collecting I/O events, so you can handle more events per iteration,\nat the cost of increasing latency. Timeouts (both \\f(CW\\*(C`ev_periodic\\*(C'\\fR and\n\\&\\f(CW\\*(C`ev_timer\\*(C'\\fR) will not be affected. Setting this to a non-null value will\nintroduce an additional \\f(CW\\*(C`ev_sleep ()\\*(C'\\fR call into most loop iterations. The\nsleep time ensures that libev will not poll for I/O events more often then\nonce per this interval, on average (as long as the host time resolution is\ngood enough).\n.Sp\nLikewise, by setting a higher \\fItimeout collect interval\\fR you allow libev\nto spend more time collecting timeouts, at the expense of increased\nlatency/jitter/inexactness (the watcher callback will be called\nlater). \\f(CW\\*(C`ev_io\\*(C'\\fR watchers will not be affected. Setting this to a non-null\nvalue will not introduce any overhead in libev.\n.Sp\nMany (busy) programs can usually benefit by setting the I/O collect\ninterval to a value near \\f(CW0.1\\fR or so, which is often enough for\ninteractive servers (of course not for games), likewise for timeouts. It\nusually doesn't make much sense to set it to a lower value than \\f(CW0.01\\fR,\nas this approaches the timing granularity of most systems. Note that if\nyou do transactions with the outside world and you can't increase the\nparallelity, then this setting will limit your transaction rate (if you\nneed to poll once per transaction and the I/O collect interval is 0.01,\nthen you can't do more than 100 transactions per second).\n.Sp\nSetting the \\fItimeout collect interval\\fR can improve the opportunity for\nsaving power, as the program will \\*(L\"bundle\\*(R\" timer callback invocations that\nare \\*(L\"near\\*(R\" in time together, by delaying some, thus reducing the number of\ntimes the process sleeps and wakes up again. Another useful technique to\nreduce iterations/wake\\-ups is to use \\f(CW\\*(C`ev_periodic\\*(C'\\fR watchers and make sure\nthey fire on, say, one-second boundaries only.\n.Sp\nExample: we only need 0.1s timeout granularity, and we wish not to poll\nmore often than 100 times per second:\n.Sp\n.Vb 2\n\\&   ev_set_timeout_collect_interval (EV_DEFAULT_UC_ 0.1);\n\\&   ev_set_io_collect_interval (EV_DEFAULT_UC_ 0.01);\n.Ve\n.IP \"ev_invoke_pending (loop)\" 4\n.IX Item \"ev_invoke_pending (loop)\"\nThis call will simply invoke all pending watchers while resetting their\npending state. Normally, \\f(CW\\*(C`ev_run\\*(C'\\fR does this automatically when required,\nbut when overriding the invoke callback this call comes handy. This\nfunction can be invoked from a watcher \\- this can be useful for example\nwhen you want to do some lengthy calculation and want to pass further\nevent handling to another thread (you still have to make sure only one\nthread executes within \\f(CW\\*(C`ev_invoke_pending\\*(C'\\fR or \\f(CW\\*(C`ev_run\\*(C'\\fR of course).\n.IP \"int ev_pending_count (loop)\" 4\n.IX Item \"int ev_pending_count (loop)\"\nReturns the number of pending watchers \\- zero indicates that no watchers\nare pending.\n.IP \"ev_set_invoke_pending_cb (loop, void (*invoke_pending_cb)(\\s-1EV_P\\s0))\" 4\n.IX Item \"ev_set_invoke_pending_cb (loop, void (*invoke_pending_cb)(EV_P))\"\nThis overrides the invoke pending functionality of the loop: Instead of\ninvoking all pending watchers when there are any, \\f(CW\\*(C`ev_run\\*(C'\\fR will call\nthis callback instead. This is useful, for example, when you want to\ninvoke the actual watchers inside another context (another thread etc.).\n.Sp\nIf you want to reset the callback, use \\f(CW\\*(C`ev_invoke_pending\\*(C'\\fR as new\ncallback.\n.IP \"ev_set_loop_release_cb (loop, void (*release)(\\s-1EV_P\\s0) throw (), void (*acquire)(\\s-1EV_P\\s0) throw ())\" 4\n.IX Item \"ev_set_loop_release_cb (loop, void (*release)(EV_P) throw (), void (*acquire)(EV_P) throw ())\"\nSometimes you want to share the same loop between multiple threads. This\ncan be done relatively simply by putting mutex_lock/unlock calls around\neach call to a libev function.\n.Sp\nHowever, \\f(CW\\*(C`ev_run\\*(C'\\fR can run an indefinite time, so it is not feasible\nto wait for it to return. One way around this is to wake up the event\nloop via \\f(CW\\*(C`ev_break\\*(C'\\fR and \\f(CW\\*(C`ev_async_send\\*(C'\\fR, another way is to set these\n\\&\\fIrelease\\fR and \\fIacquire\\fR callbacks on the loop.\n.Sp\nWhen set, then \\f(CW\\*(C`release\\*(C'\\fR will be called just before the thread is\nsuspended waiting for new events, and \\f(CW\\*(C`acquire\\*(C'\\fR is called just\nafterwards.\n.Sp\nIdeally, \\f(CW\\*(C`release\\*(C'\\fR will just call your mutex_unlock function, and\n\\&\\f(CW\\*(C`acquire\\*(C'\\fR will just call the mutex_lock function again.\n.Sp\nWhile event loop modifications are allowed between invocations of\n\\&\\f(CW\\*(C`release\\*(C'\\fR and \\f(CW\\*(C`acquire\\*(C'\\fR (that's their only purpose after all), no\nmodifications done will affect the event loop, i.e. adding watchers will\nhave no effect on the set of file descriptors being watched, or the time\nwaited. Use an \\f(CW\\*(C`ev_async\\*(C'\\fR watcher to wake up \\f(CW\\*(C`ev_run\\*(C'\\fR when you want it\nto take note of any changes you made.\n.Sp\nIn theory, threads executing \\f(CW\\*(C`ev_run\\*(C'\\fR will be async-cancel safe between\ninvocations of \\f(CW\\*(C`release\\*(C'\\fR and \\f(CW\\*(C`acquire\\*(C'\\fR.\n.Sp\nSee also the locking example in the \\f(CW\\*(C`THREADS\\*(C'\\fR section later in this\ndocument.\n.IP \"ev_set_userdata (loop, void *data)\" 4\n.IX Item \"ev_set_userdata (loop, void *data)\"\n.PD 0\n.IP \"void *ev_userdata (loop)\" 4\n.IX Item \"void *ev_userdata (loop)\"\n.PD\nSet and retrieve a single \\f(CW\\*(C`void *\\*(C'\\fR associated with a loop. When\n\\&\\f(CW\\*(C`ev_set_userdata\\*(C'\\fR has never been called, then \\f(CW\\*(C`ev_userdata\\*(C'\\fR returns\n\\&\\f(CW0\\fR.\n.Sp\nThese two functions can be used to associate arbitrary data with a loop,\nand are intended solely for the \\f(CW\\*(C`invoke_pending_cb\\*(C'\\fR, \\f(CW\\*(C`release\\*(C'\\fR and\n\\&\\f(CW\\*(C`acquire\\*(C'\\fR callbacks described above, but of course can be (ab\\-)used for\nany other purpose as well.\n.IP \"ev_verify (loop)\" 4\n.IX Item \"ev_verify (loop)\"\nThis function only does something when \\f(CW\\*(C`EV_VERIFY\\*(C'\\fR support has been\ncompiled in, which is the default for non-minimal builds. It tries to go\nthrough all internal structures and checks them for validity. If anything\nis found to be inconsistent, it will print an error message to standard\nerror and call \\f(CW\\*(C`abort ()\\*(C'\\fR.\n.Sp\nThis can be used to catch bugs inside libev itself: under normal\ncircumstances, this function will never abort as of course libev keeps its\ndata structures consistent.\n.SH \"ANATOMY OF A WATCHER\"\n.IX Header \"ANATOMY OF A WATCHER\"\nIn the following description, uppercase \\f(CW\\*(C`TYPE\\*(C'\\fR in names stands for the\nwatcher type, e.g. \\f(CW\\*(C`ev_TYPE_start\\*(C'\\fR can mean \\f(CW\\*(C`ev_timer_start\\*(C'\\fR for timer\nwatchers and \\f(CW\\*(C`ev_io_start\\*(C'\\fR for I/O watchers.\n.PP\nA watcher is an opaque structure that you allocate and register to record\nyour interest in some event. To make a concrete example, imagine you want\nto wait for \\s-1STDIN\\s0 to become readable, you would create an \\f(CW\\*(C`ev_io\\*(C'\\fR watcher\nfor that:\n.PP\n.Vb 5\n\\&   static void my_cb (struct ev_loop *loop, ev_io *w, int revents)\n\\&   {\n\\&     ev_io_stop (w);\n\\&     ev_break (loop, EVBREAK_ALL);\n\\&   }\n\\&\n\\&   struct ev_loop *loop = ev_default_loop (0);\n\\&\n\\&   ev_io stdin_watcher;\n\\&\n\\&   ev_init (&stdin_watcher, my_cb);\n\\&   ev_io_set (&stdin_watcher, STDIN_FILENO, EV_READ);\n\\&   ev_io_start (loop, &stdin_watcher);\n\\&\n\\&   ev_run (loop, 0);\n.Ve\n.PP\nAs you can see, you are responsible for allocating the memory for your\nwatcher structures (and it is \\fIusually\\fR a bad idea to do this on the\nstack).\n.PP\nEach watcher has an associated watcher structure (called \\f(CW\\*(C`struct ev_TYPE\\*(C'\\fR\nor simply \\f(CW\\*(C`ev_TYPE\\*(C'\\fR, as typedefs are provided for all watcher structs).\n.PP\nEach watcher structure must be initialised by a call to \\f(CW\\*(C`ev_init (watcher\n*, callback)\\*(C'\\fR, which expects a callback to be provided. This callback is\ninvoked each time the event occurs (or, in the case of I/O watchers, each\ntime the event loop detects that the file descriptor given is readable\nand/or writable).\n.PP\nEach watcher type further has its own \\f(CW\\*(C`ev_TYPE_set (watcher *, ...)\\*(C'\\fR\nmacro to configure it, with arguments specific to the watcher type. There\nis also a macro to combine initialisation and setting in one call: \\f(CW\\*(C`ev_TYPE_init (watcher *, callback, ...)\\*(C'\\fR.\n.PP\nTo make the watcher actually watch out for events, you have to start it\nwith a watcher-specific start function (\\f(CW\\*(C`ev_TYPE_start (loop, watcher\n*)\\*(C'\\fR), and you can stop watching for events at any time by calling the\ncorresponding stop function (\\f(CW\\*(C`ev_TYPE_stop (loop, watcher *)\\*(C'\\fR.\n.PP\nAs long as your watcher is active (has been started but not stopped) you\nmust not touch the values stored in it. Most specifically you must never\nreinitialise it or call its \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR macro.\n.PP\nEach and every callback receives the event loop pointer as first, the\nregistered watcher structure as second, and a bitset of received events as\nthird argument.\n.PP\nThe received events usually include a single bit per event type received\n(you can receive multiple events at the same time). The possible bit masks\nare:\n.ie n .IP \"\"\"EV_READ\"\"\" 4\n.el .IP \"\\f(CWEV_READ\\fR\" 4\n.IX Item \"EV_READ\"\n.PD 0\n.ie n .IP \"\"\"EV_WRITE\"\"\" 4\n.el .IP \"\\f(CWEV_WRITE\\fR\" 4\n.IX Item \"EV_WRITE\"\n.PD\nThe file descriptor in the \\f(CW\\*(C`ev_io\\*(C'\\fR watcher has become readable and/or\nwritable.\n.ie n .IP \"\"\"EV_TIMER\"\"\" 4\n.el .IP \"\\f(CWEV_TIMER\\fR\" 4\n.IX Item \"EV_TIMER\"\nThe \\f(CW\\*(C`ev_timer\\*(C'\\fR watcher has timed out.\n.ie n .IP \"\"\"EV_PERIODIC\"\"\" 4\n.el .IP \"\\f(CWEV_PERIODIC\\fR\" 4\n.IX Item \"EV_PERIODIC\"\nThe \\f(CW\\*(C`ev_periodic\\*(C'\\fR watcher has timed out.\n.ie n .IP \"\"\"EV_SIGNAL\"\"\" 4\n.el .IP \"\\f(CWEV_SIGNAL\\fR\" 4\n.IX Item \"EV_SIGNAL\"\nThe signal specified in the \\f(CW\\*(C`ev_signal\\*(C'\\fR watcher has been received by a thread.\n.ie n .IP \"\"\"EV_CHILD\"\"\" 4\n.el .IP \"\\f(CWEV_CHILD\\fR\" 4\n.IX Item \"EV_CHILD\"\nThe pid specified in the \\f(CW\\*(C`ev_child\\*(C'\\fR watcher has received a status change.\n.ie n .IP \"\"\"EV_STAT\"\"\" 4\n.el .IP \"\\f(CWEV_STAT\\fR\" 4\n.IX Item \"EV_STAT\"\nThe path specified in the \\f(CW\\*(C`ev_stat\\*(C'\\fR watcher changed its attributes somehow.\n.ie n .IP \"\"\"EV_IDLE\"\"\" 4\n.el .IP \"\\f(CWEV_IDLE\\fR\" 4\n.IX Item \"EV_IDLE\"\nThe \\f(CW\\*(C`ev_idle\\*(C'\\fR watcher has determined that you have nothing better to do.\n.ie n .IP \"\"\"EV_PREPARE\"\"\" 4\n.el .IP \"\\f(CWEV_PREPARE\\fR\" 4\n.IX Item \"EV_PREPARE\"\n.PD 0\n.ie n .IP \"\"\"EV_CHECK\"\"\" 4\n.el .IP \"\\f(CWEV_CHECK\\fR\" 4\n.IX Item \"EV_CHECK\"\n.PD\nAll \\f(CW\\*(C`ev_prepare\\*(C'\\fR watchers are invoked just \\fIbefore\\fR \\f(CW\\*(C`ev_run\\*(C'\\fR starts to\ngather new events, and all \\f(CW\\*(C`ev_check\\*(C'\\fR watchers are queued (not invoked)\njust after \\f(CW\\*(C`ev_run\\*(C'\\fR has gathered them, but before it queues any callbacks\nfor any received events. That means \\f(CW\\*(C`ev_prepare\\*(C'\\fR watchers are the last\nwatchers invoked before the event loop sleeps or polls for new events, and\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watchers will be invoked before any other watchers of the same\nor lower priority within an event loop iteration.\n.Sp\nCallbacks of both watcher types can start and stop as many watchers as\nthey want, and all of them will be taken into account (for example, a\n\\&\\f(CW\\*(C`ev_prepare\\*(C'\\fR watcher might start an idle watcher to keep \\f(CW\\*(C`ev_run\\*(C'\\fR from\nblocking).\n.ie n .IP \"\"\"EV_EMBED\"\"\" 4\n.el .IP \"\\f(CWEV_EMBED\\fR\" 4\n.IX Item \"EV_EMBED\"\nThe embedded event loop specified in the \\f(CW\\*(C`ev_embed\\*(C'\\fR watcher needs attention.\n.ie n .IP \"\"\"EV_FORK\"\"\" 4\n.el .IP \"\\f(CWEV_FORK\\fR\" 4\n.IX Item \"EV_FORK\"\nThe event loop has been resumed in the child process after fork (see\n\\&\\f(CW\\*(C`ev_fork\\*(C'\\fR).\n.ie n .IP \"\"\"EV_CLEANUP\"\"\" 4\n.el .IP \"\\f(CWEV_CLEANUP\\fR\" 4\n.IX Item \"EV_CLEANUP\"\nThe event loop is about to be destroyed (see \\f(CW\\*(C`ev_cleanup\\*(C'\\fR).\n.ie n .IP \"\"\"EV_ASYNC\"\"\" 4\n.el .IP \"\\f(CWEV_ASYNC\\fR\" 4\n.IX Item \"EV_ASYNC\"\nThe given async watcher has been asynchronously notified (see \\f(CW\\*(C`ev_async\\*(C'\\fR).\n.ie n .IP \"\"\"EV_CUSTOM\"\"\" 4\n.el .IP \"\\f(CWEV_CUSTOM\\fR\" 4\n.IX Item \"EV_CUSTOM\"\nNot ever sent (or otherwise used) by libev itself, but can be freely used\nby libev users to signal watchers (e.g. via \\f(CW\\*(C`ev_feed_event\\*(C'\\fR).\n.ie n .IP \"\"\"EV_ERROR\"\"\" 4\n.el .IP \"\\f(CWEV_ERROR\\fR\" 4\n.IX Item \"EV_ERROR\"\nAn unspecified error has occurred, the watcher has been stopped. This might\nhappen because the watcher could not be properly started because libev\nran out of memory, a file descriptor was found to be closed or any other\nproblem. Libev considers these application bugs.\n.Sp\nYou best act on it by reporting the problem and somehow coping with the\nwatcher being stopped. Note that well-written programs should not receive\nan error ever, so when your watcher receives it, this usually indicates a\nbug in your program.\n.Sp\nLibev will usually signal a few \\*(L\"dummy\\*(R\" events together with an error, for\nexample it might indicate that a fd is readable or writable, and if your\ncallbacks is well-written it can just attempt the operation and cope with\nthe error from \\fIread()\\fR or \\fIwrite()\\fR. This will not work in multi-threaded\nprograms, though, as the fd could already be closed and reused for another\nthing, so beware.\n.SS \"\\s-1GENERIC WATCHER FUNCTIONS\\s0\"\n.IX Subsection \"GENERIC WATCHER FUNCTIONS\"\n.ie n .IP \"\"\"ev_init\"\" (ev_TYPE *watcher, callback)\" 4\n.el .IP \"\\f(CWev_init\\fR (ev_TYPE *watcher, callback)\" 4\n.IX Item \"ev_init (ev_TYPE *watcher, callback)\"\nThis macro initialises the generic portion of a watcher. The contents\nof the watcher object can be arbitrary (so \\f(CW\\*(C`malloc\\*(C'\\fR will do). Only\nthe generic parts of the watcher are initialised, you \\fIneed\\fR to call\nthe type-specific \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR macro afterwards to initialise the\ntype-specific parts. For each type there is also a \\f(CW\\*(C`ev_TYPE_init\\*(C'\\fR macro\nwhich rolls both calls into one.\n.Sp\nYou can reinitialise a watcher at any time as long as it has been stopped\n(or never started) and there are no pending events outstanding.\n.Sp\nThe callback is always of type \\f(CW\\*(C`void (*)(struct ev_loop *loop, ev_TYPE *watcher,\nint revents)\\*(C'\\fR.\n.Sp\nExample: Initialise an \\f(CW\\*(C`ev_io\\*(C'\\fR watcher in two steps.\n.Sp\n.Vb 3\n\\&   ev_io w;\n\\&   ev_init (&w, my_cb);\n\\&   ev_io_set (&w, STDIN_FILENO, EV_READ);\n.Ve\n.ie n .IP \"\"\"ev_TYPE_set\"\" (ev_TYPE *watcher, [args])\" 4\n.el .IP \"\\f(CWev_TYPE_set\\fR (ev_TYPE *watcher, [args])\" 4\n.IX Item \"ev_TYPE_set (ev_TYPE *watcher, [args])\"\nThis macro initialises the type-specific parts of a watcher. You need to\ncall \\f(CW\\*(C`ev_init\\*(C'\\fR at least once before you call this macro, but you can\ncall \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR any number of times. You must not, however, call this\nmacro on a watcher that is active (it can be pending, however, which is a\ndifference to the \\f(CW\\*(C`ev_init\\*(C'\\fR macro).\n.Sp\nAlthough some watcher types do not have type-specific arguments\n(e.g. \\f(CW\\*(C`ev_prepare\\*(C'\\fR) you still need to call its \\f(CW\\*(C`set\\*(C'\\fR macro.\n.Sp\nSee \\f(CW\\*(C`ev_init\\*(C'\\fR, above, for an example.\n.ie n .IP \"\"\"ev_TYPE_init\"\" (ev_TYPE *watcher, callback, [args])\" 4\n.el .IP \"\\f(CWev_TYPE_init\\fR (ev_TYPE *watcher, callback, [args])\" 4\n.IX Item \"ev_TYPE_init (ev_TYPE *watcher, callback, [args])\"\nThis convenience macro rolls both \\f(CW\\*(C`ev_init\\*(C'\\fR and \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR macro\ncalls into a single call. This is the most convenient method to initialise\na watcher. The same limitations apply, of course.\n.Sp\nExample: Initialise and set an \\f(CW\\*(C`ev_io\\*(C'\\fR watcher in one step.\n.Sp\n.Vb 1\n\\&   ev_io_init (&w, my_cb, STDIN_FILENO, EV_READ);\n.Ve\n.ie n .IP \"\"\"ev_TYPE_start\"\" (loop, ev_TYPE *watcher)\" 4\n.el .IP \"\\f(CWev_TYPE_start\\fR (loop, ev_TYPE *watcher)\" 4\n.IX Item \"ev_TYPE_start (loop, ev_TYPE *watcher)\"\nStarts (activates) the given watcher. Only active watchers will receive\nevents. If the watcher is already active nothing will happen.\n.Sp\nExample: Start the \\f(CW\\*(C`ev_io\\*(C'\\fR watcher that is being abused as example in this\nwhole section.\n.Sp\n.Vb 1\n\\&   ev_io_start (EV_DEFAULT_UC, &w);\n.Ve\n.ie n .IP \"\"\"ev_TYPE_stop\"\" (loop, ev_TYPE *watcher)\" 4\n.el .IP \"\\f(CWev_TYPE_stop\\fR (loop, ev_TYPE *watcher)\" 4\n.IX Item \"ev_TYPE_stop (loop, ev_TYPE *watcher)\"\nStops the given watcher if active, and clears the pending status (whether\nthe watcher was active or not).\n.Sp\nIt is possible that stopped watchers are pending \\- for example,\nnon-repeating timers are being stopped when they become pending \\- but\ncalling \\f(CW\\*(C`ev_TYPE_stop\\*(C'\\fR ensures that the watcher is neither active nor\npending. If you want to free or reuse the memory used by the watcher it is\ntherefore a good idea to always call its \\f(CW\\*(C`ev_TYPE_stop\\*(C'\\fR function.\n.IP \"bool ev_is_active (ev_TYPE *watcher)\" 4\n.IX Item \"bool ev_is_active (ev_TYPE *watcher)\"\nReturns a true value iff the watcher is active (i.e. it has been started\nand not yet been stopped). As long as a watcher is active you must not modify\nit.\n.IP \"bool ev_is_pending (ev_TYPE *watcher)\" 4\n.IX Item \"bool ev_is_pending (ev_TYPE *watcher)\"\nReturns a true value iff the watcher is pending, (i.e. it has outstanding\nevents but its callback has not yet been invoked). As long as a watcher\nis pending (but not active) you must not call an init function on it (but\n\\&\\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR is safe), you must not change its priority, and you must\nmake sure the watcher is available to libev (e.g. you cannot \\f(CW\\*(C`free ()\\*(C'\\fR\nit).\n.IP \"callback ev_cb (ev_TYPE *watcher)\" 4\n.IX Item \"callback ev_cb (ev_TYPE *watcher)\"\nReturns the callback currently set on the watcher.\n.IP \"ev_set_cb (ev_TYPE *watcher, callback)\" 4\n.IX Item \"ev_set_cb (ev_TYPE *watcher, callback)\"\nChange the callback. You can change the callback at virtually any time\n(modulo threads).\n.IP \"ev_set_priority (ev_TYPE *watcher, int priority)\" 4\n.IX Item \"ev_set_priority (ev_TYPE *watcher, int priority)\"\n.PD 0\n.IP \"int ev_priority (ev_TYPE *watcher)\" 4\n.IX Item \"int ev_priority (ev_TYPE *watcher)\"\n.PD\nSet and query the priority of the watcher. The priority is a small\ninteger between \\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR (default: \\f(CW2\\fR) and \\f(CW\\*(C`EV_MINPRI\\*(C'\\fR\n(default: \\f(CW\\*(C`\\-2\\*(C'\\fR). Pending watchers with higher priority will be invoked\nbefore watchers with lower priority, but priority will not keep watchers\nfrom being executed (except for \\f(CW\\*(C`ev_idle\\*(C'\\fR watchers).\n.Sp\nIf you need to suppress invocation when higher priority events are pending\nyou need to look at \\f(CW\\*(C`ev_idle\\*(C'\\fR watchers, which provide this functionality.\n.Sp\nYou \\fImust not\\fR change the priority of a watcher as long as it is active or\npending.\n.Sp\nSetting a priority outside the range of \\f(CW\\*(C`EV_MINPRI\\*(C'\\fR to \\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR is\nfine, as long as you do not mind that the priority value you query might\nor might not have been clamped to the valid range.\n.Sp\nThe default priority used by watchers when no priority has been set is\nalways \\f(CW0\\fR, which is supposed to not be too high and not be too low :).\n.Sp\nSee \\*(L\"\\s-1WATCHER PRIORITY MODELS\\*(R\"\\s0, below, for a more thorough treatment of\npriorities.\n.IP \"ev_invoke (loop, ev_TYPE *watcher, int revents)\" 4\n.IX Item \"ev_invoke (loop, ev_TYPE *watcher, int revents)\"\nInvoke the \\f(CW\\*(C`watcher\\*(C'\\fR with the given \\f(CW\\*(C`loop\\*(C'\\fR and \\f(CW\\*(C`revents\\*(C'\\fR. Neither\n\\&\\f(CW\\*(C`loop\\*(C'\\fR nor \\f(CW\\*(C`revents\\*(C'\\fR need to be valid as long as the watcher callback\ncan deal with that fact, as both are simply passed through to the\ncallback.\n.IP \"int ev_clear_pending (loop, ev_TYPE *watcher)\" 4\n.IX Item \"int ev_clear_pending (loop, ev_TYPE *watcher)\"\nIf the watcher is pending, this function clears its pending status and\nreturns its \\f(CW\\*(C`revents\\*(C'\\fR bitset (as if its callback was invoked). If the\nwatcher isn't pending it does nothing and returns \\f(CW0\\fR.\n.Sp\nSometimes it can be useful to \\*(L\"poll\\*(R\" a watcher instead of waiting for its\ncallback to be invoked, which can be accomplished with this function.\n.IP \"ev_feed_event (loop, ev_TYPE *watcher, int revents)\" 4\n.IX Item \"ev_feed_event (loop, ev_TYPE *watcher, int revents)\"\nFeeds the given event set into the event loop, as if the specified event\nhad happened for the specified watcher (which must be a pointer to an\ninitialised but not necessarily started event watcher). Obviously you must\nnot free the watcher as long as it has pending events.\n.Sp\nStopping the watcher, letting libev invoke it, or calling\n\\&\\f(CW\\*(C`ev_clear_pending\\*(C'\\fR will clear the pending event, even if the watcher was\nnot started in the first place.\n.Sp\nSee also \\f(CW\\*(C`ev_feed_fd_event\\*(C'\\fR and \\f(CW\\*(C`ev_feed_signal_event\\*(C'\\fR for related\nfunctions that do not need a watcher.\n.PP\nSee also the \\*(L\"\\s-1ASSOCIATING CUSTOM DATA WITH A WATCHER\\*(R\"\\s0 and \\*(L\"\\s-1BUILDING YOUR\nOWN COMPOSITE WATCHERS\\*(R\"\\s0 idioms.\n.SS \"\\s-1WATCHER STATES\\s0\"\n.IX Subsection \"WATCHER STATES\"\nThere are various watcher states mentioned throughout this manual \\-\nactive, pending and so on. In this section these states and the rules to\ntransition between them will be described in more detail \\- and while these\nrules might look complicated, they usually do \\*(L\"the right thing\\*(R\".\n.IP \"initialised\" 4\n.IX Item \"initialised\"\nBefore a watcher can be registered with the event loop it has to be\ninitialised. This can be done with a call to \\f(CW\\*(C`ev_TYPE_init\\*(C'\\fR, or calls to\n\\&\\f(CW\\*(C`ev_init\\*(C'\\fR followed by the watcher-specific \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR function.\n.Sp\nIn this state it is simply some block of memory that is suitable for\nuse in an event loop. It can be moved around, freed, reused etc. at\nwill \\- as long as you either keep the memory contents intact, or call\n\\&\\f(CW\\*(C`ev_TYPE_init\\*(C'\\fR again.\n.IP \"started/running/active\" 4\n.IX Item \"started/running/active\"\nOnce a watcher has been started with a call to \\f(CW\\*(C`ev_TYPE_start\\*(C'\\fR it becomes\nproperty of the event loop, and is actively waiting for events. While in\nthis state it cannot be accessed (except in a few documented ways), moved,\nfreed or anything else \\- the only legal thing is to keep a pointer to it,\nand call libev functions on it that are documented to work on active watchers.\n.IP \"pending\" 4\n.IX Item \"pending\"\nIf a watcher is active and libev determines that an event it is interested\nin has occurred (such as a timer expiring), it will become pending. It will\nstay in this pending state until either it is stopped or its callback is\nabout to be invoked, so it is not normally pending inside the watcher\ncallback.\n.Sp\nThe watcher might or might not be active while it is pending (for example,\nan expired non-repeating timer can be pending but no longer active). If it\nis stopped, it can be freely accessed (e.g. by calling \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR),\nbut it is still property of the event loop at this time, so cannot be\nmoved, freed or reused. And if it is active the rules described in the\nprevious item still apply.\n.Sp\nIt is also possible to feed an event on a watcher that is not active (e.g.\nvia \\f(CW\\*(C`ev_feed_event\\*(C'\\fR), in which case it becomes pending without being\nactive.\n.IP \"stopped\" 4\n.IX Item \"stopped\"\nA watcher can be stopped implicitly by libev (in which case it might still\nbe pending), or explicitly by calling its \\f(CW\\*(C`ev_TYPE_stop\\*(C'\\fR function. The\nlatter will clear any pending state the watcher might be in, regardless\nof whether it was active or not, so stopping a watcher explicitly before\nfreeing it is often a good idea.\n.Sp\nWhile stopped (and not pending) the watcher is essentially in the\ninitialised state, that is, it can be reused, moved, modified in any way\nyou wish (but when you trash the memory block, you need to \\f(CW\\*(C`ev_TYPE_init\\*(C'\\fR\nit again).\n.SS \"\\s-1WATCHER PRIORITY MODELS\\s0\"\n.IX Subsection \"WATCHER PRIORITY MODELS\"\nMany event loops support \\fIwatcher priorities\\fR, which are usually small\nintegers that influence the ordering of event callback invocation\nbetween watchers in some way, all else being equal.\n.PP\nIn libev, Watcher priorities can be set using \\f(CW\\*(C`ev_set_priority\\*(C'\\fR. See its\ndescription for the more technical details such as the actual priority\nrange.\n.PP\nThere are two common ways how these these priorities are being interpreted\nby event loops:\n.PP\nIn the more common lock-out model, higher priorities \\*(L\"lock out\\*(R\" invocation\nof lower priority watchers, which means as long as higher priority\nwatchers receive events, lower priority watchers are not being invoked.\n.PP\nThe less common only-for-ordering model uses priorities solely to order\ncallback invocation within a single event loop iteration: Higher priority\nwatchers are invoked before lower priority ones, but they all get invoked\nbefore polling for new events.\n.PP\nLibev uses the second (only-for-ordering) model for all its watchers\nexcept for idle watchers (which use the lock-out model).\n.PP\nThe rationale behind this is that implementing the lock-out model for\nwatchers is not well supported by most kernel interfaces, and most event\nlibraries will just poll for the same events again and again as long as\ntheir callbacks have not been executed, which is very inefficient in the\ncommon case of one high-priority watcher locking out a mass of lower\npriority ones.\n.PP\nStatic (ordering) priorities are most useful when you have two or more\nwatchers handling the same resource: a typical usage example is having an\n\\&\\f(CW\\*(C`ev_io\\*(C'\\fR watcher to receive data, and an associated \\f(CW\\*(C`ev_timer\\*(C'\\fR to handle\ntimeouts. Under load, data might be received while the program handles\nother jobs, but since timers normally get invoked first, the timeout\nhandler will be executed before checking for data. In that case, giving\nthe timer a lower priority than the I/O watcher ensures that I/O will be\nhandled first even under adverse conditions (which is usually, but not\nalways, what you want).\n.PP\nSince idle watchers use the \\*(L\"lock-out\\*(R\" model, meaning that idle watchers\nwill only be executed when no same or higher priority watchers have\nreceived events, they can be used to implement the \\*(L\"lock-out\\*(R\" model when\nrequired.\n.PP\nFor example, to emulate how many other event libraries handle priorities,\nyou can associate an \\f(CW\\*(C`ev_idle\\*(C'\\fR watcher to each such watcher, and in\nthe normal watcher callback, you just start the idle watcher. The real\nprocessing is done in the idle watcher callback. This causes libev to\ncontinuously poll and process kernel event data for the watcher, but when\nthe lock-out case is known to be rare (which in turn is rare :), this is\nworkable.\n.PP\nUsually, however, the lock-out model implemented that way will perform\nmiserably under the type of load it was designed to handle. In that case,\nit might be preferable to stop the real watcher before starting the\nidle watcher, so the kernel will not have to process the event in case\nthe actual processing will be delayed for considerable time.\n.PP\nHere is an example of an I/O watcher that should run at a strictly lower\npriority than the default, and which should only process data when no\nother events are pending:\n.PP\n.Vb 2\n\\&   ev_idle idle; // actual processing watcher\n\\&   ev_io io;     // actual event watcher\n\\&\n\\&   static void\n\\&   io_cb (EV_P_ ev_io *w, int revents)\n\\&   {\n\\&     // stop the I/O watcher, we received the event, but\n\\&     // are not yet ready to handle it.\n\\&     ev_io_stop (EV_A_ w);\n\\&\n\\&     // start the idle watcher to handle the actual event.\n\\&     // it will not be executed as long as other watchers\n\\&     // with the default priority are receiving events.\n\\&     ev_idle_start (EV_A_ &idle);\n\\&   }\n\\&\n\\&   static void\n\\&   idle_cb (EV_P_ ev_idle *w, int revents)\n\\&   {\n\\&     // actual processing\n\\&     read (STDIN_FILENO, ...);\n\\&\n\\&     // have to start the I/O watcher again, as\n\\&     // we have handled the event\n\\&     ev_io_start (EV_P_ &io);\n\\&   }\n\\&\n\\&   // initialisation\n\\&   ev_idle_init (&idle, idle_cb);\n\\&   ev_io_init (&io, io_cb, STDIN_FILENO, EV_READ);\n\\&   ev_io_start (EV_DEFAULT_ &io);\n.Ve\n.PP\nIn the \\*(L\"real\\*(R\" world, it might also be beneficial to start a timer, so that\nlow-priority connections can not be locked out forever under load. This\nenables your program to keep a lower latency for important connections\nduring short periods of high load, while not completely locking out less\nimportant ones.\n.SH \"WATCHER TYPES\"\n.IX Header \"WATCHER TYPES\"\nThis section describes each watcher in detail, but will not repeat\ninformation given in the last section. Any initialisation/set macros,\nfunctions and members specific to the watcher type are explained.\n.PP\nMembers are additionally marked with either \\fI[read\\-only]\\fR, meaning that,\nwhile the watcher is active, you can look at the member and expect some\nsensible content, but you must not modify it (you can modify it while the\nwatcher is stopped to your hearts content), or \\fI[read\\-write]\\fR, which\nmeans you can expect it to have some sensible content while the watcher\nis active, but you can also modify it. Modifying it may not do something\nsensible or take immediate effect (or do anything at all), but libev will\nnot crash or malfunction in any way.\n.ie n .SS \"\"\"ev_io\"\" \\- is this file descriptor readable or writable?\"\n.el .SS \"\\f(CWev_io\\fP \\- is this file descriptor readable or writable?\"\n.IX Subsection \"ev_io - is this file descriptor readable or writable?\"\nI/O watchers check whether a file descriptor is readable or writable\nin each iteration of the event loop, or, more precisely, when reading\nwould not block the process and writing would at least be able to write\nsome data. This behaviour is called level-triggering because you keep\nreceiving events as long as the condition persists. Remember you can stop\nthe watcher if you don't want to act on the event and neither want to\nreceive future events.\n.PP\nIn general you can register as many read and/or write event watchers per\nfd as you want (as long as you don't confuse yourself). Setting all file\ndescriptors to non-blocking mode is also usually a good idea (but not\nrequired if you know what you are doing).\n.PP\nAnother thing you have to watch out for is that it is quite easy to\nreceive \\*(L\"spurious\\*(R\" readiness notifications, that is, your callback might\nbe called with \\f(CW\\*(C`EV_READ\\*(C'\\fR but a subsequent \\f(CW\\*(C`read\\*(C'\\fR(2) will actually block\nbecause there is no data. It is very easy to get into this situation even\nwith a relatively standard program structure. Thus it is best to always\nuse non-blocking I/O: An extra \\f(CW\\*(C`read\\*(C'\\fR(2) returning \\f(CW\\*(C`EAGAIN\\*(C'\\fR is far\npreferable to a program hanging until some data arrives.\n.PP\nIf you cannot run the fd in non-blocking mode (for example you should\nnot play around with an Xlib connection), then you have to separately\nre-test whether a file descriptor is really ready with a known-to-be good\ninterface such as poll (fortunately in the case of Xlib, it already does\nthis on its own, so its quite safe to use). Some people additionally\nuse \\f(CW\\*(C`SIGALRM\\*(C'\\fR and an interval timer, just to be sure you won't block\nindefinitely.\n.PP\nBut really, best use non-blocking mode.\n.PP\n\\fIThe special problem of disappearing file descriptors\\fR\n.IX Subsection \"The special problem of disappearing file descriptors\"\n.PP\nSome backends (e.g. kqueue, epoll) need to be told about closing a file\ndescriptor (either due to calling \\f(CW\\*(C`close\\*(C'\\fR explicitly or any other means,\nsuch as \\f(CW\\*(C`dup2\\*(C'\\fR). The reason is that you register interest in some file\ndescriptor, but when it goes away, the operating system will silently drop\nthis interest. If another file descriptor with the same number then is\nregistered with libev, there is no efficient way to see that this is, in\nfact, a different file descriptor.\n.PP\nTo avoid having to explicitly tell libev about such cases, libev follows\nthe following policy:  Each time \\f(CW\\*(C`ev_io_set\\*(C'\\fR is being called, libev\nwill assume that this is potentially a new file descriptor, otherwise\nit is assumed that the file descriptor stays the same. That means that\nyou \\fIhave\\fR to call \\f(CW\\*(C`ev_io_set\\*(C'\\fR (or \\f(CW\\*(C`ev_io_init\\*(C'\\fR) when you change the\ndescriptor even if the file descriptor number itself did not change.\n.PP\nThis is how one would do it normally anyway, the important point is that\nthe libev application should not optimise around libev but should leave\noptimisations to libev.\n.PP\n\\fIThe special problem of dup'ed file descriptors\\fR\n.IX Subsection \"The special problem of dup'ed file descriptors\"\n.PP\nSome backends (e.g. epoll), cannot register events for file descriptors,\nbut only events for the underlying file descriptions. That means when you\nhave \\f(CW\\*(C`dup ()\\*(C'\\fR'ed file descriptors or weirder constellations, and register\nevents for them, only one file descriptor might actually receive events.\n.PP\nThere is no workaround possible except not registering events\nfor potentially \\f(CW\\*(C`dup ()\\*(C'\\fR'ed file descriptors, or to resort to\n\\&\\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR or \\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR.\n.PP\n\\fIThe special problem of files\\fR\n.IX Subsection \"The special problem of files\"\n.PP\nMany people try to use \\f(CW\\*(C`select\\*(C'\\fR (or libev) on file descriptors\nrepresenting files, and expect it to become ready when their program\ndoesn't block on disk accesses (which can take a long time on their own).\n.PP\nHowever, this cannot ever work in the \\*(L\"expected\\*(R\" way \\- you get a readiness\nnotification as soon as the kernel knows whether and how much data is\nthere, and in the case of open files, that's always the case, so you\nalways get a readiness notification instantly, and your read (or possibly\nwrite) will still block on the disk I/O.\n.PP\nAnother way to view it is that in the case of sockets, pipes, character\ndevices and so on, there is another party (the sender) that delivers data\non its own, but in the case of files, there is no such thing: the disk\nwill not send data on its own, simply because it doesn't know what you\nwish to read \\- you would first have to request some data.\n.PP\nSince files are typically not-so-well supported by advanced notification\nmechanism, libev tries hard to emulate \\s-1POSIX\\s0 behaviour with respect\nto files, even though you should not use it. The reason for this is\nconvenience: sometimes you want to watch \\s-1STDIN\\s0 or \\s-1STDOUT,\\s0 which is\nusually a tty, often a pipe, but also sometimes files or special devices\n(for example, \\f(CW\\*(C`epoll\\*(C'\\fR on Linux works with \\fI/dev/random\\fR but not with\n\\&\\fI/dev/urandom\\fR), and even though the file might better be served with\nasynchronous I/O instead of with non-blocking I/O, it is still useful when\nit \\*(L\"just works\\*(R\" instead of freezing.\n.PP\nSo avoid file descriptors pointing to files when you know it (e.g. use\nlibeio), but use them when it is convenient, e.g. for \\s-1STDIN/STDOUT,\\s0 or\nwhen you rarely read from a file instead of from a socket, and want to\nreuse the same code path.\n.PP\n\\fIThe special problem of fork\\fR\n.IX Subsection \"The special problem of fork\"\n.PP\nSome backends (epoll, kqueue) do not support \\f(CW\\*(C`fork ()\\*(C'\\fR at all or exhibit\nuseless behaviour. Libev fully supports fork, but needs to be told about\nit in the child if you want to continue to use it in the child.\n.PP\nTo support fork in your child processes, you have to call \\f(CW\\*(C`ev_loop_fork\n()\\*(C'\\fR after a fork in the child, enable \\f(CW\\*(C`EVFLAG_FORKCHECK\\*(C'\\fR, or resort to\n\\&\\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR or \\f(CW\\*(C`EVBACKEND_POLL\\*(C'\\fR.\n.PP\n\\fIThe special problem of \\s-1SIGPIPE\\s0\\fR\n.IX Subsection \"The special problem of SIGPIPE\"\n.PP\nWhile not really specific to libev, it is easy to forget about \\f(CW\\*(C`SIGPIPE\\*(C'\\fR:\nwhen writing to a pipe whose other end has been closed, your program gets\nsent a \\s-1SIGPIPE,\\s0 which, by default, aborts your program. For most programs\nthis is sensible behaviour, for daemons, this is usually undesirable.\n.PP\nSo when you encounter spurious, unexplained daemon exits, make sure you\nignore \\s-1SIGPIPE \\s0(and maybe make sure you log the exit status of your daemon\nsomewhere, as that would have given you a big clue).\n.PP\n\\fIThe special problem of \\fIaccept()\\fIing when you can't\\fR\n.IX Subsection \"The special problem of accept()ing when you can't\"\n.PP\nMany implementations of the \\s-1POSIX \\s0\\f(CW\\*(C`accept\\*(C'\\fR function (for example,\nfound in post\\-2004 Linux) have the peculiar behaviour of not removing a\nconnection from the pending queue in all error cases.\n.PP\nFor example, larger servers often run out of file descriptors (because\nof resource limits), causing \\f(CW\\*(C`accept\\*(C'\\fR to fail with \\f(CW\\*(C`ENFILE\\*(C'\\fR but not\nrejecting the connection, leading to libev signalling readiness on\nthe next iteration again (the connection still exists after all), and\ntypically causing the program to loop at 100% \\s-1CPU\\s0 usage.\n.PP\nUnfortunately, the set of errors that cause this issue differs between\noperating systems, there is usually little the app can do to remedy the\nsituation, and no known thread-safe method of removing the connection to\ncope with overload is known (to me).\n.PP\nOne of the easiest ways to handle this situation is to just ignore it\n\\&\\- when the program encounters an overload, it will just loop until the\nsituation is over. While this is a form of busy waiting, no \\s-1OS\\s0 offers an\nevent-based way to handle this situation, so it's the best one can do.\n.PP\nA better way to handle the situation is to log any errors other than\n\\&\\f(CW\\*(C`EAGAIN\\*(C'\\fR and \\f(CW\\*(C`EWOULDBLOCK\\*(C'\\fR, making sure not to flood the log with such\nmessages, and continue as usual, which at least gives the user an idea of\nwhat could be wrong (\\*(L\"raise the ulimit!\\*(R\"). For extra points one could stop\nthe \\f(CW\\*(C`ev_io\\*(C'\\fR watcher on the listening fd \\*(L\"for a while\\*(R\", which reduces \\s-1CPU\\s0\nusage.\n.PP\nIf your program is single-threaded, then you could also keep a dummy file\ndescriptor for overload situations (e.g. by opening \\fI/dev/null\\fR), and\nwhen you run into \\f(CW\\*(C`ENFILE\\*(C'\\fR or \\f(CW\\*(C`EMFILE\\*(C'\\fR, close it, run \\f(CW\\*(C`accept\\*(C'\\fR,\nclose that fd, and create a new dummy fd. This will gracefully refuse\nclients under typical overload conditions.\n.PP\nThe last way to handle it is to simply log the error and \\f(CW\\*(C`exit\\*(C'\\fR, as\nis often done with \\f(CW\\*(C`malloc\\*(C'\\fR failures, but this results in an easy\nopportunity for a DoS attack.\n.PP\n\\fIWatcher-Specific Functions\\fR\n.IX Subsection \"Watcher-Specific Functions\"\n.IP \"ev_io_init (ev_io *, callback, int fd, int events)\" 4\n.IX Item \"ev_io_init (ev_io *, callback, int fd, int events)\"\n.PD 0\n.IP \"ev_io_set (ev_io *, int fd, int events)\" 4\n.IX Item \"ev_io_set (ev_io *, int fd, int events)\"\n.PD\nConfigures an \\f(CW\\*(C`ev_io\\*(C'\\fR watcher. The \\f(CW\\*(C`fd\\*(C'\\fR is the file descriptor to\nreceive events for and \\f(CW\\*(C`events\\*(C'\\fR is either \\f(CW\\*(C`EV_READ\\*(C'\\fR, \\f(CW\\*(C`EV_WRITE\\*(C'\\fR or\n\\&\\f(CW\\*(C`EV_READ | EV_WRITE\\*(C'\\fR, to express the desire to receive the given events.\n.IP \"int fd [read\\-only]\" 4\n.IX Item \"int fd [read-only]\"\nThe file descriptor being watched.\n.IP \"int events [read\\-only]\" 4\n.IX Item \"int events [read-only]\"\nThe events being watched.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Call \\f(CW\\*(C`stdin_readable_cb\\*(C'\\fR when \\s-1STDIN_FILENO\\s0 has become, well\nreadable, but only once. Since it is likely line-buffered, you could\nattempt to read a whole line in the callback.\n.PP\n.Vb 6\n\\&   static void\n\\&   stdin_readable_cb (struct ev_loop *loop, ev_io *w, int revents)\n\\&   {\n\\&      ev_io_stop (loop, w);\n\\&     .. read from stdin here (or from w\\->fd) and handle any I/O errors\n\\&   }\n\\&\n\\&   ...\n\\&   struct ev_loop *loop = ev_default_init (0);\n\\&   ev_io stdin_readable;\n\\&   ev_io_init (&stdin_readable, stdin_readable_cb, STDIN_FILENO, EV_READ);\n\\&   ev_io_start (loop, &stdin_readable);\n\\&   ev_run (loop, 0);\n.Ve\n.ie n .SS \"\"\"ev_timer\"\" \\- relative and optionally repeating timeouts\"\n.el .SS \"\\f(CWev_timer\\fP \\- relative and optionally repeating timeouts\"\n.IX Subsection \"ev_timer - relative and optionally repeating timeouts\"\nTimer watchers are simple relative timers that generate an event after a\ngiven time, and optionally repeating in regular intervals after that.\n.PP\nThe timers are based on real time, that is, if you register an event that\ntimes out after an hour and you reset your system clock to January last\nyear, it will still time out after (roughly) one hour. \\*(L\"Roughly\\*(R\" because\ndetecting time jumps is hard, and some inaccuracies are unavoidable (the\nmonotonic clock option helps a lot here).\n.PP\nThe callback is guaranteed to be invoked only \\fIafter\\fR its timeout has\npassed (not \\fIat\\fR, so on systems with very low-resolution clocks this\nmight introduce a small delay, see \\*(L\"the special problem of being too\nearly\\*(R\", below). If multiple timers become ready during the same loop\niteration then the ones with earlier time-out values are invoked before\nones of the same priority with later time-out values (but this is no\nlonger true when a callback calls \\f(CW\\*(C`ev_run\\*(C'\\fR recursively).\n.PP\n\\fIBe smart about timeouts\\fR\n.IX Subsection \"Be smart about timeouts\"\n.PP\nMany real-world problems involve some kind of timeout, usually for error\nrecovery. A typical example is an \\s-1HTTP\\s0 request \\- if the other side hangs,\nyou want to raise some error after a while.\n.PP\nWhat follows are some ways to handle this problem, from obvious and\ninefficient to smart and efficient.\n.PP\nIn the following, a 60 second activity timeout is assumed \\- a timeout that\ngets reset to 60 seconds each time there is activity (e.g. each time some\ndata or other life sign was received).\n.IP \"1. Use a timer and stop, reinitialise and start it on activity.\" 4\n.IX Item \"1. Use a timer and stop, reinitialise and start it on activity.\"\nThis is the most obvious, but not the most simple way: In the beginning,\nstart the watcher:\n.Sp\n.Vb 2\n\\&   ev_timer_init (timer, callback, 60., 0.);\n\\&   ev_timer_start (loop, timer);\n.Ve\n.Sp\nThen, each time there is some activity, \\f(CW\\*(C`ev_timer_stop\\*(C'\\fR it, initialise it\nand start it again:\n.Sp\n.Vb 3\n\\&   ev_timer_stop (loop, timer);\n\\&   ev_timer_set (timer, 60., 0.);\n\\&   ev_timer_start (loop, timer);\n.Ve\n.Sp\nThis is relatively simple to implement, but means that each time there is\nsome activity, libev will first have to remove the timer from its internal\ndata structure and then add it again. Libev tries to be fast, but it's\nstill not a constant-time operation.\n.ie n .IP \"2. Use a timer and re-start it with \"\"ev_timer_again\"\" inactivity.\" 4\n.el .IP \"2. Use a timer and re-start it with \\f(CWev_timer_again\\fR inactivity.\" 4\n.IX Item \"2. Use a timer and re-start it with ev_timer_again inactivity.\"\nThis is the easiest way, and involves using \\f(CW\\*(C`ev_timer_again\\*(C'\\fR instead of\n\\&\\f(CW\\*(C`ev_timer_start\\*(C'\\fR.\n.Sp\nTo implement this, configure an \\f(CW\\*(C`ev_timer\\*(C'\\fR with a \\f(CW\\*(C`repeat\\*(C'\\fR value\nof \\f(CW60\\fR and then call \\f(CW\\*(C`ev_timer_again\\*(C'\\fR at start and each time you\nsuccessfully read or write some data. If you go into an idle state where\nyou do not expect data to travel on the socket, you can \\f(CW\\*(C`ev_timer_stop\\*(C'\\fR\nthe timer, and \\f(CW\\*(C`ev_timer_again\\*(C'\\fR will automatically restart it if need be.\n.Sp\nThat means you can ignore both the \\f(CW\\*(C`ev_timer_start\\*(C'\\fR function and the\n\\&\\f(CW\\*(C`after\\*(C'\\fR argument to \\f(CW\\*(C`ev_timer_set\\*(C'\\fR, and only ever use the \\f(CW\\*(C`repeat\\*(C'\\fR\nmember and \\f(CW\\*(C`ev_timer_again\\*(C'\\fR.\n.Sp\nAt start:\n.Sp\n.Vb 3\n\\&   ev_init (timer, callback);\n\\&   timer\\->repeat = 60.;\n\\&   ev_timer_again (loop, timer);\n.Ve\n.Sp\nEach time there is some activity:\n.Sp\n.Vb 1\n\\&   ev_timer_again (loop, timer);\n.Ve\n.Sp\nIt is even possible to change the time-out on the fly, regardless of\nwhether the watcher is active or not:\n.Sp\n.Vb 2\n\\&   timer\\->repeat = 30.;\n\\&   ev_timer_again (loop, timer);\n.Ve\n.Sp\nThis is slightly more efficient then stopping/starting the timer each time\nyou want to modify its timeout value, as libev does not have to completely\nremove and re-insert the timer from/into its internal data structure.\n.Sp\nIt is, however, even simpler than the \\*(L\"obvious\\*(R\" way to do it.\n.IP \"3. Let the timer time out, but then re-arm it as required.\" 4\n.IX Item \"3. Let the timer time out, but then re-arm it as required.\"\nThis method is more tricky, but usually most efficient: Most timeouts are\nrelatively long compared to the intervals between other activity \\- in\nour example, within 60 seconds, there are usually many I/O events with\nassociated activity resets.\n.Sp\nIn this case, it would be more efficient to leave the \\f(CW\\*(C`ev_timer\\*(C'\\fR alone,\nbut remember the time of last activity, and check for a real timeout only\nwithin the callback:\n.Sp\n.Vb 3\n\\&   ev_tstamp timeout = 60.;\n\\&   ev_tstamp last_activity; // time of last activity\n\\&   ev_timer timer;\n\\&\n\\&   static void\n\\&   callback (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     // calculate when the timeout would happen\n\\&     ev_tstamp after = last_activity \\- ev_now (EV_A) + timeout;\n\\&\n\\&     // if negative, it means we the timeout already occurred\n\\&     if (after < 0.)\n\\&       {\n\\&         // timeout occurred, take action\n\\&       }\n\\&     else\n\\&       {\n\\&         // callback was invoked, but there was some recent \n\\&         // activity. simply restart the timer to time out\n\\&         // after \"after\" seconds, which is the earliest time\n\\&         // the timeout can occur.\n\\&         ev_timer_set (w, after, 0.);\n\\&         ev_timer_start (EV_A_ w);\n\\&       }\n\\&   }\n.Ve\n.Sp\nTo summarise the callback: first calculate in how many seconds the\ntimeout will occur (by calculating the absolute time when it would occur,\n\\&\\f(CW\\*(C`last_activity + timeout\\*(C'\\fR, and subtracting the current time, \\f(CW\\*(C`ev_now\n(EV_A)\\*(C'\\fR from that).\n.Sp\nIf this value is negative, then we are already past the timeout, i.e. we\ntimed out, and need to do whatever is needed in this case.\n.Sp\nOtherwise, we now the earliest time at which the timeout would trigger,\nand simply start the timer with this timeout value.\n.Sp\nIn other words, each time the callback is invoked it will check whether\nthe timeout occurred. If not, it will simply reschedule itself to check\nagain at the earliest time it could time out. Rinse. Repeat.\n.Sp\nThis scheme causes more callback invocations (about one every 60 seconds\nminus half the average time between activity), but virtually no calls to\nlibev to change the timeout.\n.Sp\nTo start the machinery, simply initialise the watcher and set\n\\&\\f(CW\\*(C`last_activity\\*(C'\\fR to the current time (meaning there was some activity just\nnow), then call the callback, which will \\*(L\"do the right thing\\*(R\" and start\nthe timer:\n.Sp\n.Vb 3\n\\&   last_activity = ev_now (EV_A);\n\\&   ev_init (&timer, callback);\n\\&   callback (EV_A_ &timer, 0);\n.Ve\n.Sp\nWhen there is some activity, simply store the current time in\n\\&\\f(CW\\*(C`last_activity\\*(C'\\fR, no libev calls at all:\n.Sp\n.Vb 2\n\\&   if (activity detected)\n\\&     last_activity = ev_now (EV_A);\n.Ve\n.Sp\nWhen your timeout value changes, then the timeout can be changed by simply\nproviding a new value, stopping the timer and calling the callback, which\nwill again do the right thing (for example, time out immediately :).\n.Sp\n.Vb 3\n\\&   timeout = new_value;\n\\&   ev_timer_stop (EV_A_ &timer);\n\\&   callback (EV_A_ &timer, 0);\n.Ve\n.Sp\nThis technique is slightly more complex, but in most cases where the\ntime-out is unlikely to be triggered, much more efficient.\n.IP \"4. Wee, just use a double-linked list for your timeouts.\" 4\n.IX Item \"4. Wee, just use a double-linked list for your timeouts.\"\nIf there is not one request, but many thousands (millions...), all\nemploying some kind of timeout with the same timeout value, then one can\ndo even better:\n.Sp\nWhen starting the timeout, calculate the timeout value and put the timeout\nat the \\fIend\\fR of the list.\n.Sp\nThen use an \\f(CW\\*(C`ev_timer\\*(C'\\fR to fire when the timeout at the \\fIbeginning\\fR of\nthe list is expected to fire (for example, using the technique #3).\n.Sp\nWhen there is some activity, remove the timer from the list, recalculate\nthe timeout, append it to the end of the list again, and make sure to\nupdate the \\f(CW\\*(C`ev_timer\\*(C'\\fR if it was taken from the beginning of the list.\n.Sp\nThis way, one can manage an unlimited number of timeouts in O(1) time for\nstarting, stopping and updating the timers, at the expense of a major\ncomplication, and having to use a constant timeout. The constant timeout\nensures that the list stays sorted.\n.PP\nSo which method the best?\n.PP\nMethod #2 is a simple no-brain-required solution that is adequate in most\nsituations. Method #3 requires a bit more thinking, but handles many cases\nbetter, and isn't very complicated either. In most case, choosing either\none is fine, with #3 being better in typical situations.\n.PP\nMethod #1 is almost always a bad idea, and buys you nothing. Method #4 is\nrather complicated, but extremely efficient, something that really pays\noff after the first million or so of active timers, i.e. it's usually\noverkill :)\n.PP\n\\fIThe special problem of being too early\\fR\n.IX Subsection \"The special problem of being too early\"\n.PP\nIf you ask a timer to call your callback after three seconds, then\nyou expect it to be invoked after three seconds \\- but of course, this\ncannot be guaranteed to infinite precision. Less obviously, it cannot be\nguaranteed to any precision by libev \\- imagine somebody suspending the\nprocess with a \\s-1STOP\\s0 signal for a few hours for example.\n.PP\nSo, libev tries to invoke your callback as soon as possible \\fIafter\\fR the\ndelay has occurred, but cannot guarantee this.\n.PP\nA less obvious failure mode is calling your callback too early: many event\nloops compare timestamps with a \\*(L\"elapsed delay >= requested delay\\*(R\", but\nthis can cause your callback to be invoked much earlier than you would\nexpect.\n.PP\nTo see why, imagine a system with a clock that only offers full second\nresolution (think windows if you can't come up with a broken enough \\s-1OS\\s0\nyourself). If you schedule a one-second timer at the time 500.9, then the\nevent loop will schedule your timeout to elapse at a system time of 500\n(500.9 truncated to the resolution) + 1, or 501.\n.PP\nIf an event library looks at the timeout 0.1s later, it will see \\*(L\"501 >=\n501\\*(R\" and invoke the callback 0.1s after it was started, even though a\none-second delay was requested \\- this is being \\*(L\"too early\\*(R\", despite best\nintentions.\n.PP\nThis is the reason why libev will never invoke the callback if the elapsed\ndelay equals the requested delay, but only when the elapsed delay is\nlarger than the requested delay. In the example above, libev would only invoke\nthe callback at system time 502, or 1.1s after the timer was started.\n.PP\nSo, while libev cannot guarantee that your callback will be invoked\nexactly when requested, it \\fIcan\\fR and \\fIdoes\\fR guarantee that the requested\ndelay has actually elapsed, or in other words, it always errs on the \\*(L\"too\nlate\\*(R\" side of things.\n.PP\n\\fIThe special problem of time updates\\fR\n.IX Subsection \"The special problem of time updates\"\n.PP\nEstablishing the current time is a costly operation (it usually takes\nat least one system call): \\s-1EV\\s0 therefore updates its idea of the current\ntime only before and after \\f(CW\\*(C`ev_run\\*(C'\\fR collects new events, which causes a\ngrowing difference between \\f(CW\\*(C`ev_now ()\\*(C'\\fR and \\f(CW\\*(C`ev_time ()\\*(C'\\fR when handling\nlots of events in one iteration.\n.PP\nThe relative timeouts are calculated relative to the \\f(CW\\*(C`ev_now ()\\*(C'\\fR\ntime. This is usually the right thing as this timestamp refers to the time\nof the event triggering whatever timeout you are modifying/starting. If\nyou suspect event processing to be delayed and you \\fIneed\\fR to base the\ntimeout on the current time, use something like the following to adjust\nfor it:\n.PP\n.Vb 1\n\\&   ev_timer_set (&timer, after + (ev_time () \\- ev_now ()), 0.);\n.Ve\n.PP\nIf the event loop is suspended for a long time, you can also force an\nupdate of the time returned by \\f(CW\\*(C`ev_now ()\\*(C'\\fR by calling \\f(CW\\*(C`ev_now_update\n()\\*(C'\\fR, although that will push the event time of all outstanding events\nfurther into the future.\n.PP\n\\fIThe special problem of unsynchronised clocks\\fR\n.IX Subsection \"The special problem of unsynchronised clocks\"\n.PP\nModern systems have a variety of clocks \\- libev itself uses the normal\n\\&\\*(L\"wall clock\\*(R\" clock and, if available, the monotonic clock (to avoid time\njumps).\n.PP\nNeither of these clocks is synchronised with each other or any other clock\non the system, so \\f(CW\\*(C`ev_time ()\\*(C'\\fR might return a considerably different time\nthan \\f(CW\\*(C`gettimeofday ()\\*(C'\\fR or \\f(CW\\*(C`time ()\\*(C'\\fR. On a GNU/Linux system, for example,\na call to \\f(CW\\*(C`gettimeofday\\*(C'\\fR might return a second count that is one higher\nthan a directly following call to \\f(CW\\*(C`time\\*(C'\\fR.\n.PP\nThe moral of this is to only compare libev-related timestamps with\n\\&\\f(CW\\*(C`ev_time ()\\*(C'\\fR and \\f(CW\\*(C`ev_now ()\\*(C'\\fR, at least if you want better precision than\na second or so.\n.PP\nOne more problem arises due to this lack of synchronisation: if libev uses\nthe system monotonic clock and you compare timestamps from \\f(CW\\*(C`ev_time\\*(C'\\fR\nor \\f(CW\\*(C`ev_now\\*(C'\\fR from when you started your timer and when your callback is\ninvoked, you will find that sometimes the callback is a bit \\*(L\"early\\*(R\".\n.PP\nThis is because \\f(CW\\*(C`ev_timer\\*(C'\\fRs work in real time, not wall clock time, so\nlibev makes sure your callback is not invoked before the delay happened,\n\\&\\fImeasured according to the real time\\fR, not the system clock.\n.PP\nIf your timeouts are based on a physical timescale (e.g. \\*(L\"time out this\nconnection after 100 seconds\\*(R\") then this shouldn't bother you as it is\nexactly the right behaviour.\n.PP\nIf you want to compare wall clock/system timestamps to your timers, then\nyou need to use \\f(CW\\*(C`ev_periodic\\*(C'\\fRs, as these are based on the wall clock\ntime, where your comparisons will always generate correct results.\n.PP\n\\fIThe special problems of suspended animation\\fR\n.IX Subsection \"The special problems of suspended animation\"\n.PP\nWhen you leave the server world it is quite customary to hit machines that\ncan suspend/hibernate \\- what happens to the clocks during such a suspend?\n.PP\nSome quick tests made with a Linux 2.6.28 indicate that a suspend freezes\nall processes, while the clocks (\\f(CW\\*(C`times\\*(C'\\fR, \\f(CW\\*(C`CLOCK_MONOTONIC\\*(C'\\fR) continue\nto run until the system is suspended, but they will not advance while the\nsystem is suspended. That means, on resume, it will be as if the program\nwas frozen for a few seconds, but the suspend time will not be counted\ntowards \\f(CW\\*(C`ev_timer\\*(C'\\fR when a monotonic clock source is used. The real time\nclock advanced as expected, but if it is used as sole clocksource, then a\nlong suspend would be detected as a time jump by libev, and timers would\nbe adjusted accordingly.\n.PP\nI would not be surprised to see different behaviour in different between\noperating systems, \\s-1OS\\s0 versions or even different hardware.\n.PP\nThe other form of suspend (job control, or sending a \\s-1SIGSTOP\\s0) will see a\ntime jump in the monotonic clocks and the realtime clock. If the program\nis suspended for a very long time, and monotonic clock sources are in use,\nthen you can expect \\f(CW\\*(C`ev_timer\\*(C'\\fRs to expire as the full suspension time\nwill be counted towards the timers. When no monotonic clock source is in\nuse, then libev will again assume a timejump and adjust accordingly.\n.PP\nIt might be beneficial for this latter case to call \\f(CW\\*(C`ev_suspend\\*(C'\\fR\nand \\f(CW\\*(C`ev_resume\\*(C'\\fR in code that handles \\f(CW\\*(C`SIGTSTP\\*(C'\\fR, to at least get\ndeterministic behaviour in this case (you can do nothing against\n\\&\\f(CW\\*(C`SIGSTOP\\*(C'\\fR).\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat)\" 4\n.IX Item \"ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat)\"\n.PD 0\n.IP \"ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat)\" 4\n.IX Item \"ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat)\"\n.PD\nConfigure the timer to trigger after \\f(CW\\*(C`after\\*(C'\\fR seconds. If \\f(CW\\*(C`repeat\\*(C'\\fR\nis \\f(CW0.\\fR, then it will automatically be stopped once the timeout is\nreached. If it is positive, then the timer will automatically be\nconfigured to trigger again \\f(CW\\*(C`repeat\\*(C'\\fR seconds later, again, and again,\nuntil stopped manually.\n.Sp\nThe timer itself will do a best-effort at avoiding drift, that is, if\nyou configure a timer to trigger every 10 seconds, then it will normally\ntrigger at exactly 10 second intervals. If, however, your program cannot\nkeep up with the timer (because it takes longer than those 10 seconds to\ndo stuff) the timer will not fire more than once per event loop iteration.\n.IP \"ev_timer_again (loop, ev_timer *)\" 4\n.IX Item \"ev_timer_again (loop, ev_timer *)\"\nThis will act as if the timer timed out, and restarts it again if it is\nrepeating. It basically works like calling \\f(CW\\*(C`ev_timer_stop\\*(C'\\fR, updating the\ntimeout to the \\f(CW\\*(C`repeat\\*(C'\\fR value and calling \\f(CW\\*(C`ev_timer_start\\*(C'\\fR.\n.Sp\nThe exact semantics are as in the following rules, all of which will be\napplied to the watcher:\n.RS 4\n.IP \"If the timer is pending, the pending status is always cleared.\" 4\n.IX Item \"If the timer is pending, the pending status is always cleared.\"\n.PD 0\n.IP \"If the timer is started but non-repeating, stop it (as if it timed out, without invoking it).\" 4\n.IX Item \"If the timer is started but non-repeating, stop it (as if it timed out, without invoking it).\"\n.ie n .IP \"If the timer is repeating, make the \"\"repeat\"\" value the new timeout and start the timer, if necessary.\" 4\n.el .IP \"If the timer is repeating, make the \\f(CWrepeat\\fR value the new timeout and start the timer, if necessary.\" 4\n.IX Item \"If the timer is repeating, make the repeat value the new timeout and start the timer, if necessary.\"\n.RE\n.RS 4\n.PD\n.Sp\nThis sounds a bit complicated, see \\*(L\"Be smart about timeouts\\*(R\", above, for a\nusage example.\n.RE\n.IP \"ev_tstamp ev_timer_remaining (loop, ev_timer *)\" 4\n.IX Item \"ev_tstamp ev_timer_remaining (loop, ev_timer *)\"\nReturns the remaining time until a timer fires. If the timer is active,\nthen this time is relative to the current event loop time, otherwise it's\nthe timeout value currently configured.\n.Sp\nThat is, after an \\f(CW\\*(C`ev_timer_set (w, 5, 7)\\*(C'\\fR, \\f(CW\\*(C`ev_timer_remaining\\*(C'\\fR returns\n\\&\\f(CW5\\fR. When the timer is started and one second passes, \\f(CW\\*(C`ev_timer_remaining\\*(C'\\fR\nwill return \\f(CW4\\fR. When the timer expires and is restarted, it will return\nroughly \\f(CW7\\fR (likely slightly less as callback invocation takes some time,\ntoo), and so on.\n.IP \"ev_tstamp repeat [read\\-write]\" 4\n.IX Item \"ev_tstamp repeat [read-write]\"\nThe current \\f(CW\\*(C`repeat\\*(C'\\fR value. Will be used each time the watcher times out\nor \\f(CW\\*(C`ev_timer_again\\*(C'\\fR is called, and determines the next timeout (if any),\nwhich is also when any modifications are taken into account.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Create a timer that fires after 60 seconds.\n.PP\n.Vb 5\n\\&   static void\n\\&   one_minute_cb (struct ev_loop *loop, ev_timer *w, int revents)\n\\&   {\n\\&     .. one minute over, w is actually stopped right here\n\\&   }\n\\&\n\\&   ev_timer mytimer;\n\\&   ev_timer_init (&mytimer, one_minute_cb, 60., 0.);\n\\&   ev_timer_start (loop, &mytimer);\n.Ve\n.PP\nExample: Create a timeout timer that times out after 10 seconds of\ninactivity.\n.PP\n.Vb 5\n\\&   static void\n\\&   timeout_cb (struct ev_loop *loop, ev_timer *w, int revents)\n\\&   {\n\\&     .. ten seconds without any activity\n\\&   }\n\\&\n\\&   ev_timer mytimer;\n\\&   ev_timer_init (&mytimer, timeout_cb, 0., 10.); /* note, only repeat used */\n\\&   ev_timer_again (&mytimer); /* start timer */\n\\&   ev_run (loop, 0);\n\\&\n\\&   // and in some piece of code that gets executed on any \"activity\":\n\\&   // reset the timeout to start ticking again at 10 seconds\n\\&   ev_timer_again (&mytimer);\n.Ve\n.ie n .SS \"\"\"ev_periodic\"\" \\- to cron or not to cron?\"\n.el .SS \"\\f(CWev_periodic\\fP \\- to cron or not to cron?\"\n.IX Subsection \"ev_periodic - to cron or not to cron?\"\nPeriodic watchers are also timers of a kind, but they are very versatile\n(and unfortunately a bit complex).\n.PP\nUnlike \\f(CW\\*(C`ev_timer\\*(C'\\fR, periodic watchers are not based on real time (or\nrelative time, the physical time that passes) but on wall clock time\n(absolute time, the thing you can read on your calender or clock). The\ndifference is that wall clock time can run faster or slower than real\ntime, and time jumps are not uncommon (e.g. when you adjust your\nwrist-watch).\n.PP\nYou can tell a periodic watcher to trigger after some specific point\nin time: for example, if you tell a periodic watcher to trigger \\*(L\"in 10\nseconds\\*(R\" (by specifying e.g. \\f(CW\\*(C`ev_now () + 10.\\*(C'\\fR, that is, an absolute time\nnot a delay) and then reset your system clock to January of the previous\nyear, then it will take a year or more to trigger the event (unlike an\n\\&\\f(CW\\*(C`ev_timer\\*(C'\\fR, which would still trigger roughly 10 seconds after starting\nit, as it uses a relative timeout).\n.PP\n\\&\\f(CW\\*(C`ev_periodic\\*(C'\\fR watchers can also be used to implement vastly more complex\ntimers, such as triggering an event on each \\*(L\"midnight, local time\\*(R\", or\nother complicated rules. This cannot be done with \\f(CW\\*(C`ev_timer\\*(C'\\fR watchers, as\nthose cannot react to time jumps.\n.PP\nAs with timers, the callback is guaranteed to be invoked only when the\npoint in time where it is supposed to trigger has passed. If multiple\ntimers become ready during the same loop iteration then the ones with\nearlier time-out values are invoked before ones with later time-out values\n(but this is no longer true when a callback calls \\f(CW\\*(C`ev_run\\*(C'\\fR recursively).\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_periodic_init (ev_periodic *, callback, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\" 4\n.IX Item \"ev_periodic_init (ev_periodic *, callback, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\"\n.PD 0\n.IP \"ev_periodic_set (ev_periodic *, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\" 4\n.IX Item \"ev_periodic_set (ev_periodic *, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\"\n.PD\nLots of arguments, let's sort it out... There are basically three modes of\noperation, and we will explain them from simplest to most complex:\n.RS 4\n.IP \"\\(bu\" 4\nabsolute timer (offset = absolute time, interval = 0, reschedule_cb = 0)\n.Sp\nIn this configuration the watcher triggers an event after the wall clock\ntime \\f(CW\\*(C`offset\\*(C'\\fR has passed. It will not repeat and will not adjust when a\ntime jump occurs, that is, if it is to be run at January 1st 2011 then it\nwill be stopped and invoked when the system clock reaches or surpasses\nthis point in time.\n.IP \"\\(bu\" 4\nrepeating interval timer (offset = offset within interval, interval > 0, reschedule_cb = 0)\n.Sp\nIn this mode the watcher will always be scheduled to time out at the next\n\\&\\f(CW\\*(C`offset + N * interval\\*(C'\\fR time (for some integer N, which can also be\nnegative) and then repeat, regardless of any time jumps. The \\f(CW\\*(C`offset\\*(C'\\fR\nargument is merely an offset into the \\f(CW\\*(C`interval\\*(C'\\fR periods.\n.Sp\nThis can be used to create timers that do not drift with respect to the\nsystem clock, for example, here is an \\f(CW\\*(C`ev_periodic\\*(C'\\fR that triggers each\nhour, on the hour (with respect to \\s-1UTC\\s0):\n.Sp\n.Vb 1\n\\&   ev_periodic_set (&periodic, 0., 3600., 0);\n.Ve\n.Sp\nThis doesn't mean there will always be 3600 seconds in between triggers,\nbut only that the callback will be called when the system time shows a\nfull hour (\\s-1UTC\\s0), or more correctly, when the system time is evenly divisible\nby 3600.\n.Sp\nAnother way to think about it (for the mathematically inclined) is that\n\\&\\f(CW\\*(C`ev_periodic\\*(C'\\fR will try to run the callback in this mode at the next possible\ntime where \\f(CW\\*(C`time = offset (mod interval)\\*(C'\\fR, regardless of any time jumps.\n.Sp\nThe \\f(CW\\*(C`interval\\*(C'\\fR \\fI\\s-1MUST\\s0\\fR be positive, and for numerical stability, the\ninterval value should be higher than \\f(CW\\*(C`1/8192\\*(C'\\fR (which is around 100\nmicroseconds) and \\f(CW\\*(C`offset\\*(C'\\fR should be higher than \\f(CW0\\fR and should have\nat most a similar magnitude as the current time (say, within a factor of\nten). Typical values for offset are, in fact, \\f(CW0\\fR or something between\n\\&\\f(CW0\\fR and \\f(CW\\*(C`interval\\*(C'\\fR, which is also the recommended range.\n.Sp\nNote also that there is an upper limit to how often a timer can fire (\\s-1CPU\\s0\nspeed for example), so if \\f(CW\\*(C`interval\\*(C'\\fR is very small then timing stability\nwill of course deteriorate. Libev itself tries to be exact to be about one\nmillisecond (if the \\s-1OS\\s0 supports it and the machine is fast enough).\n.IP \"\\(bu\" 4\nmanual reschedule mode (offset ignored, interval ignored, reschedule_cb = callback)\n.Sp\nIn this mode the values for \\f(CW\\*(C`interval\\*(C'\\fR and \\f(CW\\*(C`offset\\*(C'\\fR are both being\nignored. Instead, each time the periodic watcher gets scheduled, the\nreschedule callback will be called with the watcher as first, and the\ncurrent time as second argument.\n.Sp\n\\&\\s-1NOTE: \\s0\\fIThis callback \\s-1MUST NOT\\s0 stop or destroy any periodic watcher, ever,\nor make \\s-1ANY\\s0 other event loop modifications whatsoever, unless explicitly\nallowed by documentation here\\fR.\n.Sp\nIf you need to stop it, return \\f(CW\\*(C`now + 1e30\\*(C'\\fR (or so, fudge fudge) and stop\nit afterwards (e.g. by starting an \\f(CW\\*(C`ev_prepare\\*(C'\\fR watcher, which is the\nonly event loop modification you are allowed to do).\n.Sp\nThe callback prototype is \\f(CW\\*(C`ev_tstamp (*reschedule_cb)(ev_periodic\n*w, ev_tstamp now)\\*(C'\\fR, e.g.:\n.Sp\n.Vb 5\n\\&   static ev_tstamp\n\\&   my_rescheduler (ev_periodic *w, ev_tstamp now)\n\\&   {\n\\&     return now + 60.;\n\\&   }\n.Ve\n.Sp\nIt must return the next time to trigger, based on the passed time value\n(that is, the lowest time value larger than to the second argument). It\nwill usually be called just before the callback will be triggered, but\nmight be called at other times, too.\n.Sp\n\\&\\s-1NOTE: \\s0\\fIThis callback must always return a time that is higher than or\nequal to the passed \\f(CI\\*(C`now\\*(C'\\fI value\\fR.\n.Sp\nThis can be used to create very complex timers, such as a timer that\ntriggers on \\*(L\"next midnight, local time\\*(R\". To do this, you would calculate the\nnext midnight after \\f(CW\\*(C`now\\*(C'\\fR and return the timestamp value for this. How\nyou do this is, again, up to you (but it is not trivial, which is the main\nreason I omitted it as an example).\n.RE\n.RS 4\n.RE\n.IP \"ev_periodic_again (loop, ev_periodic *)\" 4\n.IX Item \"ev_periodic_again (loop, ev_periodic *)\"\nSimply stops and restarts the periodic watcher again. This is only useful\nwhen you changed some parameters or the reschedule callback would return\na different time than the last time it was called (e.g. in a crond like\nprogram when the crontabs have changed).\n.IP \"ev_tstamp ev_periodic_at (ev_periodic *)\" 4\n.IX Item \"ev_tstamp ev_periodic_at (ev_periodic *)\"\nWhen active, returns the absolute time that the watcher is supposed\nto trigger next. This is not the same as the \\f(CW\\*(C`offset\\*(C'\\fR argument to\n\\&\\f(CW\\*(C`ev_periodic_set\\*(C'\\fR, but indeed works even in interval and manual\nrescheduling modes.\n.IP \"ev_tstamp offset [read\\-write]\" 4\n.IX Item \"ev_tstamp offset [read-write]\"\nWhen repeating, this contains the offset value, otherwise this is the\nabsolute point in time (the \\f(CW\\*(C`offset\\*(C'\\fR value passed to \\f(CW\\*(C`ev_periodic_set\\*(C'\\fR,\nalthough libev might modify this value for better numerical stability).\n.Sp\nCan be modified any time, but changes only take effect when the periodic\ntimer fires or \\f(CW\\*(C`ev_periodic_again\\*(C'\\fR is being called.\n.IP \"ev_tstamp interval [read\\-write]\" 4\n.IX Item \"ev_tstamp interval [read-write]\"\nThe current interval value. Can be modified any time, but changes only\ntake effect when the periodic timer fires or \\f(CW\\*(C`ev_periodic_again\\*(C'\\fR is being\ncalled.\n.IP \"ev_tstamp (*reschedule_cb)(ev_periodic *w, ev_tstamp now) [read\\-write]\" 4\n.IX Item \"ev_tstamp (*reschedule_cb)(ev_periodic *w, ev_tstamp now) [read-write]\"\nThe current reschedule callback, or \\f(CW0\\fR, if this functionality is\nswitched off. Can be changed any time, but changes only take effect when\nthe periodic timer fires or \\f(CW\\*(C`ev_periodic_again\\*(C'\\fR is being called.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Call a callback every hour, or, more precisely, whenever the\nsystem time is divisible by 3600. The callback invocation times have\npotentially a lot of jitter, but good long-term stability.\n.PP\n.Vb 5\n\\&   static void\n\\&   clock_cb (struct ev_loop *loop, ev_periodic *w, int revents)\n\\&   {\n\\&     ... its now a full hour (UTC, or TAI or whatever your clock follows)\n\\&   }\n\\&\n\\&   ev_periodic hourly_tick;\n\\&   ev_periodic_init (&hourly_tick, clock_cb, 0., 3600., 0);\n\\&   ev_periodic_start (loop, &hourly_tick);\n.Ve\n.PP\nExample: The same as above, but use a reschedule callback to do it:\n.PP\n.Vb 1\n\\&   #include <math.h>\n\\&\n\\&   static ev_tstamp\n\\&   my_scheduler_cb (ev_periodic *w, ev_tstamp now)\n\\&   {\n\\&     return now + (3600. \\- fmod (now, 3600.));\n\\&   }\n\\&\n\\&   ev_periodic_init (&hourly_tick, clock_cb, 0., 0., my_scheduler_cb);\n.Ve\n.PP\nExample: Call a callback every hour, starting now:\n.PP\n.Vb 4\n\\&   ev_periodic hourly_tick;\n\\&   ev_periodic_init (&hourly_tick, clock_cb,\n\\&                     fmod (ev_now (loop), 3600.), 3600., 0);\n\\&   ev_periodic_start (loop, &hourly_tick);\n.Ve\n.ie n .SS \"\"\"ev_signal\"\" \\- signal me when a signal gets signalled!\"\n.el .SS \"\\f(CWev_signal\\fP \\- signal me when a signal gets signalled!\"\n.IX Subsection \"ev_signal - signal me when a signal gets signalled!\"\nSignal watchers will trigger an event when the process receives a specific\nsignal one or more times. Even though signals are very asynchronous, libev\nwill try its best to deliver signals synchronously, i.e. as part of the\nnormal event processing, like any other event.\n.PP\nIf you want signals to be delivered truly asynchronously, just use\n\\&\\f(CW\\*(C`sigaction\\*(C'\\fR as you would do without libev and forget about sharing\nthe signal. You can even use \\f(CW\\*(C`ev_async\\*(C'\\fR from a signal handler to\nsynchronously wake up an event loop.\n.PP\nYou can configure as many watchers as you like for the same signal, but\nonly within the same loop, i.e. you can watch for \\f(CW\\*(C`SIGINT\\*(C'\\fR in your\ndefault loop and for \\f(CW\\*(C`SIGIO\\*(C'\\fR in another loop, but you cannot watch for\n\\&\\f(CW\\*(C`SIGINT\\*(C'\\fR in both the default loop and another loop at the same time. At\nthe moment, \\f(CW\\*(C`SIGCHLD\\*(C'\\fR is permanently tied to the default loop.\n.PP\nOnly after the first watcher for a signal is started will libev actually\nregister something with the kernel. It thus coexists with your own signal\nhandlers as long as you don't register any with libev for the same signal.\n.PP\nIf possible and supported, libev will install its handlers with\n\\&\\f(CW\\*(C`SA_RESTART\\*(C'\\fR (or equivalent) behaviour enabled, so system calls should\nnot be unduly interrupted. If you have a problem with system calls getting\ninterrupted by signals you can block all signals in an \\f(CW\\*(C`ev_check\\*(C'\\fR watcher\nand unblock them in an \\f(CW\\*(C`ev_prepare\\*(C'\\fR watcher.\n.PP\n\\fIThe special problem of inheritance over fork/execve/pthread_create\\fR\n.IX Subsection \"The special problem of inheritance over fork/execve/pthread_create\"\n.PP\nBoth the signal mask (\\f(CW\\*(C`sigprocmask\\*(C'\\fR) and the signal disposition\n(\\f(CW\\*(C`sigaction\\*(C'\\fR) are unspecified after starting a signal watcher (and after\nstopping it again), that is, libev might or might not block the signal,\nand might or might not set or restore the installed signal handler (but\nsee \\f(CW\\*(C`EVFLAG_NOSIGMASK\\*(C'\\fR).\n.PP\nWhile this does not matter for the signal disposition (libev never\nsets signals to \\f(CW\\*(C`SIG_IGN\\*(C'\\fR, so handlers will be reset to \\f(CW\\*(C`SIG_DFL\\*(C'\\fR on\n\\&\\f(CW\\*(C`execve\\*(C'\\fR), this matters for the signal mask: many programs do not expect\ncertain signals to be blocked.\n.PP\nThis means that before calling \\f(CW\\*(C`exec\\*(C'\\fR (from the child) you should reset\nthe signal mask to whatever \\*(L\"default\\*(R\" you expect (all clear is a good\nchoice usually).\n.PP\nThe simplest way to ensure that the signal mask is reset in the child is\nto install a fork handler with \\f(CW\\*(C`pthread_atfork\\*(C'\\fR that resets it. That will\ncatch fork calls done by libraries (such as the libc) as well.\n.PP\nIn current versions of libev, the signal will not be blocked indefinitely\nunless you use the \\f(CW\\*(C`signalfd\\*(C'\\fR \\s-1API \\s0(\\f(CW\\*(C`EV_SIGNALFD\\*(C'\\fR). While this reduces\nthe window of opportunity for problems, it will not go away, as libev\n\\&\\fIhas\\fR to modify the signal mask, at least temporarily.\n.PP\nSo I can't stress this enough: \\fIIf you do not reset your signal mask when\nyou expect it to be empty, you have a race condition in your code\\fR. This\nis not a libev-specific thing, this is true for most event libraries.\n.PP\n\\fIThe special problem of threads signal handling\\fR\n.IX Subsection \"The special problem of threads signal handling\"\n.PP\n\\&\\s-1POSIX\\s0 threads has problematic signal handling semantics, specifically,\na lot of functionality (sigfd, sigwait etc.) only really works if all\nthreads in a process block signals, which is hard to achieve.\n.PP\nWhen you want to use sigwait (or mix libev signal handling with your own\nfor the same signals), you can tackle this problem by globally blocking\nall signals before creating any threads (or creating them with a fully set\nsigprocmask) and also specifying the \\f(CW\\*(C`EVFLAG_NOSIGMASK\\*(C'\\fR when creating\nloops. Then designate one thread as \\*(L\"signal receiver thread\\*(R\" which handles\nthese signals. You can pass on any signals that libev might be interested\nin by calling \\f(CW\\*(C`ev_feed_signal\\*(C'\\fR.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_signal_init (ev_signal *, callback, int signum)\" 4\n.IX Item \"ev_signal_init (ev_signal *, callback, int signum)\"\n.PD 0\n.IP \"ev_signal_set (ev_signal *, int signum)\" 4\n.IX Item \"ev_signal_set (ev_signal *, int signum)\"\n.PD\nConfigures the watcher to trigger on the given signal number (usually one\nof the \\f(CW\\*(C`SIGxxx\\*(C'\\fR constants).\n.IP \"int signum [read\\-only]\" 4\n.IX Item \"int signum [read-only]\"\nThe signal the watcher watches out for.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Try to exit cleanly on \\s-1SIGINT.\\s0\n.PP\n.Vb 5\n\\&   static void\n\\&   sigint_cb (struct ev_loop *loop, ev_signal *w, int revents)\n\\&   {\n\\&     ev_break (loop, EVBREAK_ALL);\n\\&   }\n\\&\n\\&   ev_signal signal_watcher;\n\\&   ev_signal_init (&signal_watcher, sigint_cb, SIGINT);\n\\&   ev_signal_start (loop, &signal_watcher);\n.Ve\n.ie n .SS \"\"\"ev_child\"\" \\- watch out for process status changes\"\n.el .SS \"\\f(CWev_child\\fP \\- watch out for process status changes\"\n.IX Subsection \"ev_child - watch out for process status changes\"\nChild watchers trigger when your process receives a \\s-1SIGCHLD\\s0 in response to\nsome child status changes (most typically when a child of yours dies or\nexits). It is permissible to install a child watcher \\fIafter\\fR the child\nhas been forked (which implies it might have already exited), as long\nas the event loop isn't entered (or is continued from a watcher), i.e.,\nforking and then immediately registering a watcher for the child is fine,\nbut forking and registering a watcher a few event loop iterations later or\nin the next callback invocation is not.\n.PP\nOnly the default event loop is capable of handling signals, and therefore\nyou can only register child watchers in the default event loop.\n.PP\nDue to some design glitches inside libev, child watchers will always be\nhandled at maximum priority (their priority is set to \\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR by\nlibev)\n.PP\n\\fIProcess Interaction\\fR\n.IX Subsection \"Process Interaction\"\n.PP\nLibev grabs \\f(CW\\*(C`SIGCHLD\\*(C'\\fR as soon as the default event loop is\ninitialised. This is necessary to guarantee proper behaviour even if the\nfirst child watcher is started after the child exits. The occurrence\nof \\f(CW\\*(C`SIGCHLD\\*(C'\\fR is recorded asynchronously, but child reaping is done\nsynchronously as part of the event loop processing. Libev always reaps all\nchildren, even ones not watched.\n.PP\n\\fIOverriding the Built-In Processing\\fR\n.IX Subsection \"Overriding the Built-In Processing\"\n.PP\nLibev offers no special support for overriding the built-in child\nprocessing, but if your application collides with libev's default child\nhandler, you can override it easily by installing your own handler for\n\\&\\f(CW\\*(C`SIGCHLD\\*(C'\\fR after initialising the default loop, and making sure the\ndefault loop never gets destroyed. You are encouraged, however, to use an\nevent-based approach to child reaping and thus use libev's support for\nthat, so other libev users can use \\f(CW\\*(C`ev_child\\*(C'\\fR watchers freely.\n.PP\n\\fIStopping the Child Watcher\\fR\n.IX Subsection \"Stopping the Child Watcher\"\n.PP\nCurrently, the child watcher never gets stopped, even when the\nchild terminates, so normally one needs to stop the watcher in the\ncallback. Future versions of libev might stop the watcher automatically\nwhen a child exit is detected (calling \\f(CW\\*(C`ev_child_stop\\*(C'\\fR twice is not a\nproblem).\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_child_init (ev_child *, callback, int pid, int trace)\" 4\n.IX Item \"ev_child_init (ev_child *, callback, int pid, int trace)\"\n.PD 0\n.IP \"ev_child_set (ev_child *, int pid, int trace)\" 4\n.IX Item \"ev_child_set (ev_child *, int pid, int trace)\"\n.PD\nConfigures the watcher to wait for status changes of process \\f(CW\\*(C`pid\\*(C'\\fR (or\n\\&\\fIany\\fR process if \\f(CW\\*(C`pid\\*(C'\\fR is specified as \\f(CW0\\fR). The callback can look\nat the \\f(CW\\*(C`rstatus\\*(C'\\fR member of the \\f(CW\\*(C`ev_child\\*(C'\\fR watcher structure to see\nthe status word (use the macros from \\f(CW\\*(C`sys/wait.h\\*(C'\\fR and see your systems\n\\&\\f(CW\\*(C`waitpid\\*(C'\\fR documentation). The \\f(CW\\*(C`rpid\\*(C'\\fR member contains the pid of the\nprocess causing the status change. \\f(CW\\*(C`trace\\*(C'\\fR must be either \\f(CW0\\fR (only\nactivate the watcher when the process terminates) or \\f(CW1\\fR (additionally\nactivate the watcher when the process is stopped or continued).\n.IP \"int pid [read\\-only]\" 4\n.IX Item \"int pid [read-only]\"\nThe process id this watcher watches out for, or \\f(CW0\\fR, meaning any process id.\n.IP \"int rpid [read\\-write]\" 4\n.IX Item \"int rpid [read-write]\"\nThe process id that detected a status change.\n.IP \"int rstatus [read\\-write]\" 4\n.IX Item \"int rstatus [read-write]\"\nThe process exit/trace status caused by \\f(CW\\*(C`rpid\\*(C'\\fR (see your systems\n\\&\\f(CW\\*(C`waitpid\\*(C'\\fR and \\f(CW\\*(C`sys/wait.h\\*(C'\\fR documentation for details).\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: \\f(CW\\*(C`fork()\\*(C'\\fR a new process and install a child handler to wait for\nits completion.\n.PP\n.Vb 1\n\\&   ev_child cw;\n\\&\n\\&   static void\n\\&   child_cb (EV_P_ ev_child *w, int revents)\n\\&   {\n\\&     ev_child_stop (EV_A_ w);\n\\&     printf (\"process %d exited with status %x\\en\", w\\->rpid, w\\->rstatus);\n\\&   }\n\\&\n\\&   pid_t pid = fork ();\n\\&\n\\&   if (pid < 0)\n\\&     // error\n\\&   else if (pid == 0)\n\\&     {\n\\&       // the forked child executes here\n\\&       exit (1);\n\\&     }\n\\&   else\n\\&     {\n\\&       ev_child_init (&cw, child_cb, pid, 0);\n\\&       ev_child_start (EV_DEFAULT_ &cw);\n\\&     }\n.Ve\n.ie n .SS \"\"\"ev_stat\"\" \\- did the file attributes just change?\"\n.el .SS \"\\f(CWev_stat\\fP \\- did the file attributes just change?\"\n.IX Subsection \"ev_stat - did the file attributes just change?\"\nThis watches a file system path for attribute changes. That is, it calls\n\\&\\f(CW\\*(C`stat\\*(C'\\fR on that path in regular intervals (or when the \\s-1OS\\s0 says it changed)\nand sees if it changed compared to the last time, invoking the callback\nif it did. Starting the watcher \\f(CW\\*(C`stat\\*(C'\\fR's the file, so only changes that\nhappen after the watcher has been started will be reported.\n.PP\nThe path does not need to exist: changing from \\*(L\"path exists\\*(R\" to \\*(L\"path does\nnot exist\\*(R\" is a status change like any other. The condition \\*(L\"path does not\nexist\\*(R\" (or more correctly \\*(L\"path cannot be stat'ed\\*(R\") is signified by the\n\\&\\f(CW\\*(C`st_nlink\\*(C'\\fR field being zero (which is otherwise always forced to be at\nleast one) and all the other fields of the stat buffer having unspecified\ncontents.\n.PP\nThe path \\fImust not\\fR end in a slash or contain special components such as\n\\&\\f(CW\\*(C`.\\*(C'\\fR or \\f(CW\\*(C`..\\*(C'\\fR. The path \\fIshould\\fR be absolute: If it is relative and\nyour working directory changes, then the behaviour is undefined.\n.PP\nSince there is no portable change notification interface available, the\nportable implementation simply calls \\f(CWstat(2)\\fR regularly on the path\nto see if it changed somehow. You can specify a recommended polling\ninterval for this case. If you specify a polling interval of \\f(CW0\\fR (highly\nrecommended!) then a \\fIsuitable, unspecified default\\fR value will be used\n(which you can expect to be around five seconds, although this might\nchange dynamically). Libev will also impose a minimum interval which is\ncurrently around \\f(CW0.1\\fR, but that's usually overkill.\n.PP\nThis watcher type is not meant for massive numbers of stat watchers,\nas even with OS-supported change notifications, this can be\nresource-intensive.\n.PP\nAt the time of this writing, the only OS-specific interface implemented\nis the Linux inotify interface (implementing kqueue support is left as an\nexercise for the reader. Note, however, that the author sees no way of\nimplementing \\f(CW\\*(C`ev_stat\\*(C'\\fR semantics with kqueue, except as a hint).\n.PP\n\\fI\\s-1ABI\\s0 Issues (Largefile Support)\\fR\n.IX Subsection \"ABI Issues (Largefile Support)\"\n.PP\nLibev by default (unless the user overrides this) uses the default\ncompilation environment, which means that on systems with large file\nsupport disabled by default, you get the 32 bit version of the stat\nstructure. When using the library from programs that change the \\s-1ABI\\s0 to\nuse 64 bit file offsets the programs will fail. In that case you have to\ncompile libev with the same flags to get binary compatibility. This is\nobviously the case with any flags that change the \\s-1ABI,\\s0 but the problem is\nmost noticeably displayed with ev_stat and large file support.\n.PP\nThe solution for this is to lobby your distribution maker to make large\nfile interfaces available by default (as e.g. FreeBSD does) and not\noptional. Libev cannot simply switch on large file support because it has\nto exchange stat structures with application programs compiled using the\ndefault compilation environment.\n.PP\n\\fIInotify and Kqueue\\fR\n.IX Subsection \"Inotify and Kqueue\"\n.PP\nWhen \\f(CW\\*(C`inotify (7)\\*(C'\\fR support has been compiled into libev and present at\nruntime, it will be used to speed up change detection where possible. The\ninotify descriptor will be created lazily when the first \\f(CW\\*(C`ev_stat\\*(C'\\fR\nwatcher is being started.\n.PP\nInotify presence does not change the semantics of \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers\nexcept that changes might be detected earlier, and in some cases, to avoid\nmaking regular \\f(CW\\*(C`stat\\*(C'\\fR calls. Even in the presence of inotify support\nthere are many cases where libev has to resort to regular \\f(CW\\*(C`stat\\*(C'\\fR polling,\nbut as long as kernel 2.6.25 or newer is used (2.6.24 and older have too\nmany bugs), the path exists (i.e. stat succeeds), and the path resides on\na local filesystem (libev currently assumes only ext2/3, jfs, reiserfs and\nxfs are fully working) libev usually gets away without polling.\n.PP\nThere is no support for kqueue, as apparently it cannot be used to\nimplement this functionality, due to the requirement of having a file\ndescriptor open on the object at all times, and detecting renames, unlinks\netc. is difficult.\n.PP\n\\fI\\f(CI\\*(C`stat ()\\*(C'\\fI is a synchronous operation\\fR\n.IX Subsection \"stat () is a synchronous operation\"\n.PP\nLibev doesn't normally do any kind of I/O itself, and so is not blocking\nthe process. The exception are \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers \\- those call \\f(CW\\*(C`stat\n()\\*(C'\\fR, which is a synchronous operation.\n.PP\nFor local paths, this usually doesn't matter: unless the system is very\nbusy or the intervals between stat's are large, a stat call will be fast,\nas the path data is usually in memory already (except when starting the\nwatcher).\n.PP\nFor networked file systems, calling \\f(CW\\*(C`stat ()\\*(C'\\fR can block an indefinite\ntime due to network issues, and even under good conditions, a stat call\noften takes multiple milliseconds.\n.PP\nTherefore, it is best to avoid using \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers on networked\npaths, although this is fully supported by libev.\n.PP\n\\fIThe special problem of stat time resolution\\fR\n.IX Subsection \"The special problem of stat time resolution\"\n.PP\nThe \\f(CW\\*(C`stat ()\\*(C'\\fR system call only supports full-second resolution portably,\nand even on systems where the resolution is higher, most file systems\nstill only support whole seconds.\n.PP\nThat means that, if the time is the only thing that changes, you can\neasily miss updates: on the first update, \\f(CW\\*(C`ev_stat\\*(C'\\fR detects a change and\ncalls your callback, which does something. When there is another update\nwithin the same second, \\f(CW\\*(C`ev_stat\\*(C'\\fR will be unable to detect unless the\nstat data does change in other ways (e.g. file size).\n.PP\nThe solution to this is to delay acting on a change for slightly more\nthan a second (or till slightly after the next full second boundary), using\na roughly one-second-delay \\f(CW\\*(C`ev_timer\\*(C'\\fR (e.g. \\f(CW\\*(C`ev_timer_set (w, 0., 1.02);\nev_timer_again (loop, w)\\*(C'\\fR).\n.PP\nThe \\f(CW.02\\fR offset is added to work around small timing inconsistencies\nof some operating systems (where the second counter of the current time\nmight be be delayed. One such system is the Linux kernel, where a call to\n\\&\\f(CW\\*(C`gettimeofday\\*(C'\\fR might return a timestamp with a full second later than\na subsequent \\f(CW\\*(C`time\\*(C'\\fR call \\- if the equivalent of \\f(CW\\*(C`time ()\\*(C'\\fR is used to\nupdate file times then there will be a small window where the kernel uses\nthe previous second to update file times but libev might already execute\nthe timer callback).\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_stat_init (ev_stat *, callback, const char *path, ev_tstamp interval)\" 4\n.IX Item \"ev_stat_init (ev_stat *, callback, const char *path, ev_tstamp interval)\"\n.PD 0\n.IP \"ev_stat_set (ev_stat *, const char *path, ev_tstamp interval)\" 4\n.IX Item \"ev_stat_set (ev_stat *, const char *path, ev_tstamp interval)\"\n.PD\nConfigures the watcher to wait for status changes of the given\n\\&\\f(CW\\*(C`path\\*(C'\\fR. The \\f(CW\\*(C`interval\\*(C'\\fR is a hint on how quickly a change is expected to\nbe detected and should normally be specified as \\f(CW0\\fR to let libev choose\na suitable value. The memory pointed to by \\f(CW\\*(C`path\\*(C'\\fR must point to the same\npath for as long as the watcher is active.\n.Sp\nThe callback will receive an \\f(CW\\*(C`EV_STAT\\*(C'\\fR event when a change was detected,\nrelative to the attributes at the time the watcher was started (or the\nlast change was detected).\n.IP \"ev_stat_stat (loop, ev_stat *)\" 4\n.IX Item \"ev_stat_stat (loop, ev_stat *)\"\nUpdates the stat buffer immediately with new values. If you change the\nwatched path in your callback, you could call this function to avoid\ndetecting this change (while introducing a race condition if you are not\nthe only one changing the path). Can also be useful simply to find out the\nnew values.\n.IP \"ev_statdata attr [read\\-only]\" 4\n.IX Item \"ev_statdata attr [read-only]\"\nThe most-recently detected attributes of the file. Although the type is\n\\&\\f(CW\\*(C`ev_statdata\\*(C'\\fR, this is usually the (or one of the) \\f(CW\\*(C`struct stat\\*(C'\\fR types\nsuitable for your system, but you can only rely on the POSIX-standardised\nmembers to be present. If the \\f(CW\\*(C`st_nlink\\*(C'\\fR member is \\f(CW0\\fR, then there was\nsome error while \\f(CW\\*(C`stat\\*(C'\\fRing the file.\n.IP \"ev_statdata prev [read\\-only]\" 4\n.IX Item \"ev_statdata prev [read-only]\"\nThe previous attributes of the file. The callback gets invoked whenever\n\\&\\f(CW\\*(C`prev\\*(C'\\fR != \\f(CW\\*(C`attr\\*(C'\\fR, or, more precisely, one or more of these members\ndiffer: \\f(CW\\*(C`st_dev\\*(C'\\fR, \\f(CW\\*(C`st_ino\\*(C'\\fR, \\f(CW\\*(C`st_mode\\*(C'\\fR, \\f(CW\\*(C`st_nlink\\*(C'\\fR, \\f(CW\\*(C`st_uid\\*(C'\\fR,\n\\&\\f(CW\\*(C`st_gid\\*(C'\\fR, \\f(CW\\*(C`st_rdev\\*(C'\\fR, \\f(CW\\*(C`st_size\\*(C'\\fR, \\f(CW\\*(C`st_atime\\*(C'\\fR, \\f(CW\\*(C`st_mtime\\*(C'\\fR, \\f(CW\\*(C`st_ctime\\*(C'\\fR.\n.IP \"ev_tstamp interval [read\\-only]\" 4\n.IX Item \"ev_tstamp interval [read-only]\"\nThe specified interval.\n.IP \"const char *path [read\\-only]\" 4\n.IX Item \"const char *path [read-only]\"\nThe file system path that is being watched.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Watch \\f(CW\\*(C`/etc/passwd\\*(C'\\fR for attribute changes.\n.PP\n.Vb 10\n\\&   static void\n\\&   passwd_cb (struct ev_loop *loop, ev_stat *w, int revents)\n\\&   {\n\\&     /* /etc/passwd changed in some way */\n\\&     if (w\\->attr.st_nlink)\n\\&       {\n\\&         printf (\"passwd current size  %ld\\en\", (long)w\\->attr.st_size);\n\\&         printf (\"passwd current atime %ld\\en\", (long)w\\->attr.st_mtime);\n\\&         printf (\"passwd current mtime %ld\\en\", (long)w\\->attr.st_mtime);\n\\&       }\n\\&     else\n\\&       /* you shalt not abuse printf for puts */\n\\&       puts (\"wow, /etc/passwd is not there, expect problems. \"\n\\&             \"if this is windows, they already arrived\\en\");\n\\&   }\n\\&\n\\&   ...\n\\&   ev_stat passwd;\n\\&\n\\&   ev_stat_init (&passwd, passwd_cb, \"/etc/passwd\", 0.);\n\\&   ev_stat_start (loop, &passwd);\n.Ve\n.PP\nExample: Like above, but additionally use a one-second delay so we do not\nmiss updates (however, frequent updates will delay processing, too, so\none might do the work both on \\f(CW\\*(C`ev_stat\\*(C'\\fR callback invocation \\fIand\\fR on\n\\&\\f(CW\\*(C`ev_timer\\*(C'\\fR callback invocation).\n.PP\n.Vb 2\n\\&   static ev_stat passwd;\n\\&   static ev_timer timer;\n\\&\n\\&   static void\n\\&   timer_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     ev_timer_stop (EV_A_ w);\n\\&\n\\&     /* now it\\*(Aqs one second after the most recent passwd change */\n\\&   }\n\\&\n\\&   static void\n\\&   stat_cb (EV_P_ ev_stat *w, int revents)\n\\&   {\n\\&     /* reset the one\\-second timer */\n\\&     ev_timer_again (EV_A_ &timer);\n\\&   }\n\\&\n\\&   ...\n\\&   ev_stat_init (&passwd, stat_cb, \"/etc/passwd\", 0.);\n\\&   ev_stat_start (loop, &passwd);\n\\&   ev_timer_init (&timer, timer_cb, 0., 1.02);\n.Ve\n.ie n .SS \"\"\"ev_idle\"\" \\- when you've got nothing better to do...\"\n.el .SS \"\\f(CWev_idle\\fP \\- when you've got nothing better to do...\"\n.IX Subsection \"ev_idle - when you've got nothing better to do...\"\nIdle watchers trigger events when no other events of the same or higher\npriority are pending (prepare, check and other idle watchers do not count\nas receiving \\*(L\"events\\*(R\").\n.PP\nThat is, as long as your process is busy handling sockets or timeouts\n(or even signals, imagine) of the same or higher priority it will not be\ntriggered. But when your process is idle (or only lower-priority watchers\nare pending), the idle watchers are being called once per event loop\niteration \\- until stopped, that is, or your process receives more events\nand becomes busy again with higher priority stuff.\n.PP\nThe most noteworthy effect is that as long as any idle watchers are\nactive, the process will not block when waiting for new events.\n.PP\nApart from keeping your process non-blocking (which is a useful\neffect on its own sometimes), idle watchers are a good place to do\n\\&\\*(L\"pseudo-background processing\\*(R\", or delay processing stuff to after the\nevent loop has handled all outstanding events.\n.PP\n\\fIAbusing an \\f(CI\\*(C`ev_idle\\*(C'\\fI watcher for its side-effect\\fR\n.IX Subsection \"Abusing an ev_idle watcher for its side-effect\"\n.PP\nAs long as there is at least one active idle watcher, libev will never\nsleep unnecessarily. Or in other words, it will loop as fast as possible.\nFor this to work, the idle watcher doesn't need to be invoked at all \\- the\nlowest priority will do.\n.PP\nThis mode of operation can be useful together with an \\f(CW\\*(C`ev_check\\*(C'\\fR watcher,\nto do something on each event loop iteration \\- for example to balance load\nbetween different connections.\n.PP\nSee \\*(L\"Abusing an ev_check watcher for its side-effect\\*(R\" for a longer\nexample.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_idle_init (ev_idle *, callback)\" 4\n.IX Item \"ev_idle_init (ev_idle *, callback)\"\nInitialises and configures the idle watcher \\- it has no parameters of any\nkind. There is a \\f(CW\\*(C`ev_idle_set\\*(C'\\fR macro, but using it is utterly pointless,\nbelieve me.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Dynamically allocate an \\f(CW\\*(C`ev_idle\\*(C'\\fR watcher, start it, and in the\ncallback, free it. Also, use no error checking, as usual.\n.PP\n.Vb 5\n\\&   static void\n\\&   idle_cb (struct ev_loop *loop, ev_idle *w, int revents)\n\\&   {\n\\&     // stop the watcher\n\\&     ev_idle_stop (loop, w);\n\\&\n\\&     // now we can free it\n\\&     free (w);\n\\&\n\\&     // now do something you wanted to do when the program has\n\\&     // no longer anything immediate to do.\n\\&   }\n\\&\n\\&   ev_idle *idle_watcher = malloc (sizeof (ev_idle));\n\\&   ev_idle_init (idle_watcher, idle_cb);\n\\&   ev_idle_start (loop, idle_watcher);\n.Ve\n.ie n .SS \"\"\"ev_prepare\"\" and \"\"ev_check\"\" \\- customise your event loop!\"\n.el .SS \"\\f(CWev_prepare\\fP and \\f(CWev_check\\fP \\- customise your event loop!\"\n.IX Subsection \"ev_prepare and ev_check - customise your event loop!\"\nPrepare and check watchers are often (but not always) used in pairs:\nprepare watchers get invoked before the process blocks and check watchers\nafterwards.\n.PP\nYou \\fImust not\\fR call \\f(CW\\*(C`ev_run\\*(C'\\fR (or similar functions that enter the\ncurrent event loop) or \\f(CW\\*(C`ev_loop_fork\\*(C'\\fR from either \\f(CW\\*(C`ev_prepare\\*(C'\\fR or\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watchers. Other loops than the current one are fine,\nhowever. The rationale behind this is that you do not need to check\nfor recursion in those watchers, i.e. the sequence will always be\n\\&\\f(CW\\*(C`ev_prepare\\*(C'\\fR, blocking, \\f(CW\\*(C`ev_check\\*(C'\\fR so if you have one watcher of each\nkind they will always be called in pairs bracketing the blocking call.\n.PP\nTheir main purpose is to integrate other event mechanisms into libev and\ntheir use is somewhat advanced. They could be used, for example, to track\nvariable changes, implement your own watchers, integrate net-snmp or a\ncoroutine library and lots more. They are also occasionally useful if\nyou cache some data and want to flush it before blocking (for example,\nin X programs you might want to do an \\f(CW\\*(C`XFlush ()\\*(C'\\fR in an \\f(CW\\*(C`ev_prepare\\*(C'\\fR\nwatcher).\n.PP\nThis is done by examining in each prepare call which file descriptors\nneed to be watched by the other library, registering \\f(CW\\*(C`ev_io\\*(C'\\fR watchers\nfor them and starting an \\f(CW\\*(C`ev_timer\\*(C'\\fR watcher for any timeouts (many\nlibraries provide exactly this functionality). Then, in the check watcher,\nyou check for any events that occurred (by checking the pending status\nof all watchers and stopping them) and call back into the library. The\nI/O and timer callbacks will never actually be called (but must be valid\nnevertheless, because you never know, you know?).\n.PP\nAs another example, the Perl Coro module uses these hooks to integrate\ncoroutines into libev programs, by yielding to other active coroutines\nduring each prepare and only letting the process block if no coroutines\nare ready to run (it's actually more complicated: it only runs coroutines\nwith priority higher than or equal to the event loop and one coroutine\nof lower priority, but only once, using idle watchers to keep the event\nloop from blocking if lower-priority coroutines are active, thus mapping\nlow-priority coroutines to idle/background tasks).\n.PP\nWhen used for this purpose, it is recommended to give \\f(CW\\*(C`ev_check\\*(C'\\fR watchers\nhighest (\\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR) priority, to ensure that they are being run before\nany other watchers after the poll (this doesn't matter for \\f(CW\\*(C`ev_prepare\\*(C'\\fR\nwatchers).\n.PP\nAlso, \\f(CW\\*(C`ev_check\\*(C'\\fR watchers (and \\f(CW\\*(C`ev_prepare\\*(C'\\fR watchers, too) should not\nactivate (\\*(L\"feed\\*(R\") events into libev. While libev fully supports this, they\nmight get executed before other \\f(CW\\*(C`ev_check\\*(C'\\fR watchers did their job. As\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watchers are often used to embed other (non-libev) event\nloops those other event loops might be in an unusable state until their\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watcher ran (always remind yourself to coexist peacefully with\nothers).\n.PP\n\\fIAbusing an \\f(CI\\*(C`ev_check\\*(C'\\fI watcher for its side-effect\\fR\n.IX Subsection \"Abusing an ev_check watcher for its side-effect\"\n.PP\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR (and less often also \\f(CW\\*(C`ev_prepare\\*(C'\\fR) watchers can also be\nuseful because they are called once per event loop iteration. For\nexample, if you want to handle a large number of connections fairly, you\nnormally only do a bit of work for each active connection, and if there\nis more work to do, you wait for the next event loop iteration, so other\nconnections have a chance of making progress.\n.PP\nUsing an \\f(CW\\*(C`ev_check\\*(C'\\fR watcher is almost enough: it will be called on the\nnext event loop iteration. However, that isn't as soon as possible \\-\nwithout external events, your \\f(CW\\*(C`ev_check\\*(C'\\fR watcher will not be invoked.\n.PP\nThis is where \\f(CW\\*(C`ev_idle\\*(C'\\fR watchers come in handy \\- all you need is a\nsingle global idle watcher that is active as long as you have one active\n\\&\\f(CW\\*(C`ev_check\\*(C'\\fR watcher. The \\f(CW\\*(C`ev_idle\\*(C'\\fR watcher makes sure the event loop\nwill not sleep, and the \\f(CW\\*(C`ev_check\\*(C'\\fR watcher makes sure a callback gets\ninvoked. Neither watcher alone can do that.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_prepare_init (ev_prepare *, callback)\" 4\n.IX Item \"ev_prepare_init (ev_prepare *, callback)\"\n.PD 0\n.IP \"ev_check_init (ev_check *, callback)\" 4\n.IX Item \"ev_check_init (ev_check *, callback)\"\n.PD\nInitialises and configures the prepare or check watcher \\- they have no\nparameters of any kind. There are \\f(CW\\*(C`ev_prepare_set\\*(C'\\fR and \\f(CW\\*(C`ev_check_set\\*(C'\\fR\nmacros, but using them is utterly, utterly, utterly and completely\npointless.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nThere are a number of principal ways to embed other event loops or modules\ninto libev. Here are some ideas on how to include libadns into libev\n(there is a Perl module named \\f(CW\\*(C`EV::ADNS\\*(C'\\fR that does this, which you could\nuse as a working example. Another Perl module named \\f(CW\\*(C`EV::Glib\\*(C'\\fR embeds a\nGlib main context into libev, and finally, \\f(CW\\*(C`Glib::EV\\*(C'\\fR embeds \\s-1EV\\s0 into the\nGlib event loop).\n.PP\nMethod 1: Add \\s-1IO\\s0 watchers and a timeout watcher in a prepare handler,\nand in a check watcher, destroy them and call into libadns. What follows\nis pseudo-code only of course. This requires you to either use a low\npriority for the check watcher or use \\f(CW\\*(C`ev_clear_pending\\*(C'\\fR explicitly, as\nthe callbacks for the IO/timeout watchers might not have been called yet.\n.PP\n.Vb 2\n\\&   static ev_io iow [nfd];\n\\&   static ev_timer tw;\n\\&\n\\&   static void\n\\&   io_cb (struct ev_loop *loop, ev_io *w, int revents)\n\\&   {\n\\&   }\n\\&\n\\&   // create io watchers for each fd and a timer before blocking\n\\&   static void\n\\&   adns_prepare_cb (struct ev_loop *loop, ev_prepare *w, int revents)\n\\&   {\n\\&     int timeout = 3600000;\n\\&     struct pollfd fds [nfd];\n\\&     // actual code will need to loop here and realloc etc.\n\\&     adns_beforepoll (ads, fds, &nfd, &timeout, timeval_from (ev_time ()));\n\\&\n\\&     /* the callback is illegal, but won\\*(Aqt be called as we stop during check */\n\\&     ev_timer_init (&tw, 0, timeout * 1e\\-3, 0.);\n\\&     ev_timer_start (loop, &tw);\n\\&\n\\&     // create one ev_io per pollfd\n\\&     for (int i = 0; i < nfd; ++i)\n\\&       {\n\\&         ev_io_init (iow + i, io_cb, fds [i].fd,\n\\&           ((fds [i].events & POLLIN ? EV_READ : 0)\n\\&            | (fds [i].events & POLLOUT ? EV_WRITE : 0)));\n\\&\n\\&         fds [i].revents = 0;\n\\&         ev_io_start (loop, iow + i);\n\\&       }\n\\&   }\n\\&\n\\&   // stop all watchers after blocking\n\\&   static void\n\\&   adns_check_cb (struct ev_loop *loop, ev_check *w, int revents)\n\\&   {\n\\&     ev_timer_stop (loop, &tw);\n\\&\n\\&     for (int i = 0; i < nfd; ++i)\n\\&       {\n\\&         // set the relevant poll flags\n\\&         // could also call adns_processreadable etc. here\n\\&         struct pollfd *fd = fds + i;\n\\&         int revents = ev_clear_pending (iow + i);\n\\&         if (revents & EV_READ ) fd\\->revents |= fd\\->events & POLLIN;\n\\&         if (revents & EV_WRITE) fd\\->revents |= fd\\->events & POLLOUT;\n\\&\n\\&         // now stop the watcher\n\\&         ev_io_stop (loop, iow + i);\n\\&       }\n\\&\n\\&     adns_afterpoll (adns, fds, nfd, timeval_from (ev_now (loop));\n\\&   }\n.Ve\n.PP\nMethod 2: This would be just like method 1, but you run \\f(CW\\*(C`adns_afterpoll\\*(C'\\fR\nin the prepare watcher and would dispose of the check watcher.\n.PP\nMethod 3: If the module to be embedded supports explicit event\nnotification (libadns does), you can also make use of the actual watcher\ncallbacks, and only destroy/create the watchers in the prepare watcher.\n.PP\n.Vb 5\n\\&   static void\n\\&   timer_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     adns_state ads = (adns_state)w\\->data;\n\\&     update_now (EV_A);\n\\&\n\\&     adns_processtimeouts (ads, &tv_now);\n\\&   }\n\\&\n\\&   static void\n\\&   io_cb (EV_P_ ev_io *w, int revents)\n\\&   {\n\\&     adns_state ads = (adns_state)w\\->data;\n\\&     update_now (EV_A);\n\\&\n\\&     if (revents & EV_READ ) adns_processreadable  (ads, w\\->fd, &tv_now);\n\\&     if (revents & EV_WRITE) adns_processwriteable (ads, w\\->fd, &tv_now);\n\\&   }\n\\&\n\\&   // do not ever call adns_afterpoll\n.Ve\n.PP\nMethod 4: Do not use a prepare or check watcher because the module you\nwant to embed is not flexible enough to support it. Instead, you can\noverride their poll function. The drawback with this solution is that the\nmain loop is now no longer controllable by \\s-1EV.\\s0 The \\f(CW\\*(C`Glib::EV\\*(C'\\fR module uses\nthis approach, effectively embedding \\s-1EV\\s0 as a client into the horrible\nlibglib event loop.\n.PP\n.Vb 4\n\\&   static gint\n\\&   event_poll_func (GPollFD *fds, guint nfds, gint timeout)\n\\&   {\n\\&     int got_events = 0;\n\\&\n\\&     for (n = 0; n < nfds; ++n)\n\\&       // create/start io watcher that sets the relevant bits in fds[n] and increment got_events\n\\&\n\\&     if (timeout >= 0)\n\\&       // create/start timer\n\\&\n\\&     // poll\n\\&     ev_run (EV_A_ 0);\n\\&\n\\&     // stop timer again\n\\&     if (timeout >= 0)\n\\&       ev_timer_stop (EV_A_ &to);\n\\&\n\\&     // stop io watchers again \\- their callbacks should have set\n\\&     for (n = 0; n < nfds; ++n)\n\\&       ev_io_stop (EV_A_ iow [n]);\n\\&\n\\&     return got_events;\n\\&   }\n.Ve\n.ie n .SS \"\"\"ev_embed\"\" \\- when one backend isn't enough...\"\n.el .SS \"\\f(CWev_embed\\fP \\- when one backend isn't enough...\"\n.IX Subsection \"ev_embed - when one backend isn't enough...\"\nThis is a rather advanced watcher type that lets you embed one event loop\ninto another (currently only \\f(CW\\*(C`ev_io\\*(C'\\fR events are supported in the embedded\nloop, other types of watchers might be handled in a delayed or incorrect\nfashion and must not be used).\n.PP\nThere are primarily two reasons you would want that: work around bugs and\nprioritise I/O.\n.PP\nAs an example for a bug workaround, the kqueue backend might only support\nsockets on some platform, so it is unusable as generic backend, but you\nstill want to make use of it because you have many sockets and it scales\nso nicely. In this case, you would create a kqueue-based loop and embed\nit into your default loop (which might use e.g. poll). Overall operation\nwill be a bit slower because first libev has to call \\f(CW\\*(C`poll\\*(C'\\fR and then\n\\&\\f(CW\\*(C`kevent\\*(C'\\fR, but at least you can use both mechanisms for what they are\nbest: \\f(CW\\*(C`kqueue\\*(C'\\fR for scalable sockets and \\f(CW\\*(C`poll\\*(C'\\fR if you want it to work :)\n.PP\nAs for prioritising I/O: under rare circumstances you have the case where\nsome fds have to be watched and handled very quickly (with low latency),\nand even priorities and idle watchers might have too much overhead. In\nthis case you would put all the high priority stuff in one loop and all\nthe rest in a second one, and embed the second one in the first.\n.PP\nAs long as the watcher is active, the callback will be invoked every\ntime there might be events pending in the embedded loop. The callback\nmust then call \\f(CW\\*(C`ev_embed_sweep (mainloop, watcher)\\*(C'\\fR to make a single\nsweep and invoke their callbacks (the callback doesn't need to invoke the\n\\&\\f(CW\\*(C`ev_embed_sweep\\*(C'\\fR function directly, it could also start an idle watcher\nto give the embedded loop strictly lower priority for example).\n.PP\nYou can also set the callback to \\f(CW0\\fR, in which case the embed watcher\nwill automatically execute the embedded loop sweep whenever necessary.\n.PP\nFork detection will be handled transparently while the \\f(CW\\*(C`ev_embed\\*(C'\\fR watcher\nis active, i.e., the embedded loop will automatically be forked when the\nembedding loop forks. In other cases, the user is responsible for calling\n\\&\\f(CW\\*(C`ev_loop_fork\\*(C'\\fR on the embedded loop.\n.PP\nUnfortunately, not all backends are embeddable: only the ones returned by\n\\&\\f(CW\\*(C`ev_embeddable_backends\\*(C'\\fR are, which, unfortunately, does not include any\nportable one.\n.PP\nSo when you want to use this feature you will always have to be prepared\nthat you cannot get an embeddable loop. The recommended way to get around\nthis is to have a separate variables for your embeddable loop, try to\ncreate it, and if that fails, use the normal loop for everything.\n.PP\n\\fI\\f(CI\\*(C`ev_embed\\*(C'\\fI and fork\\fR\n.IX Subsection \"ev_embed and fork\"\n.PP\nWhile the \\f(CW\\*(C`ev_embed\\*(C'\\fR watcher is running, forks in the embedding loop will\nautomatically be applied to the embedded loop as well, so no special\nfork handling is required in that case. When the watcher is not running,\nhowever, it is still the task of the libev user to call \\f(CW\\*(C`ev_loop_fork ()\\*(C'\\fR\nas applicable.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_embed_init (ev_embed *, callback, struct ev_loop *embedded_loop)\" 4\n.IX Item \"ev_embed_init (ev_embed *, callback, struct ev_loop *embedded_loop)\"\n.PD 0\n.IP \"ev_embed_set (ev_embed *, struct ev_loop *embedded_loop)\" 4\n.IX Item \"ev_embed_set (ev_embed *, struct ev_loop *embedded_loop)\"\n.PD\nConfigures the watcher to embed the given loop, which must be\nembeddable. If the callback is \\f(CW0\\fR, then \\f(CW\\*(C`ev_embed_sweep\\*(C'\\fR will be\ninvoked automatically, otherwise it is the responsibility of the callback\nto invoke it (it will continue to be called until the sweep has been done,\nif you do not want that, you need to temporarily stop the embed watcher).\n.IP \"ev_embed_sweep (loop, ev_embed *)\" 4\n.IX Item \"ev_embed_sweep (loop, ev_embed *)\"\nMake a single, non-blocking sweep over the embedded loop. This works\nsimilarly to \\f(CW\\*(C`ev_run (embedded_loop, EVRUN_NOWAIT)\\*(C'\\fR, but in the most\nappropriate way for embedded loops.\n.IP \"struct ev_loop *other [read\\-only]\" 4\n.IX Item \"struct ev_loop *other [read-only]\"\nThe embedded event loop.\n.PP\n\\fIExamples\\fR\n.IX Subsection \"Examples\"\n.PP\nExample: Try to get an embeddable event loop and embed it into the default\nevent loop. If that is not possible, use the default loop. The default\nloop is stored in \\f(CW\\*(C`loop_hi\\*(C'\\fR, while the embeddable loop is stored in\n\\&\\f(CW\\*(C`loop_lo\\*(C'\\fR (which is \\f(CW\\*(C`loop_hi\\*(C'\\fR in the case no embeddable loop can be\nused).\n.PP\n.Vb 3\n\\&   struct ev_loop *loop_hi = ev_default_init (0);\n\\&   struct ev_loop *loop_lo = 0;\n\\&   ev_embed embed;\n\\&\n\\&   // see if there is a chance of getting one that works\n\\&   // (remember that a flags value of 0 means autodetection)\n\\&   loop_lo = ev_embeddable_backends () & ev_recommended_backends ()\n\\&     ? ev_loop_new (ev_embeddable_backends () & ev_recommended_backends ())\n\\&     : 0;\n\\&\n\\&   // if we got one, then embed it, otherwise default to loop_hi\n\\&   if (loop_lo)\n\\&     {\n\\&       ev_embed_init (&embed, 0, loop_lo);\n\\&       ev_embed_start (loop_hi, &embed);\n\\&     }\n\\&   else\n\\&     loop_lo = loop_hi;\n.Ve\n.PP\nExample: Check if kqueue is available but not recommended and create\na kqueue backend for use with sockets (which usually work with any\nkqueue implementation). Store the kqueue/socket\\-only event loop in\n\\&\\f(CW\\*(C`loop_socket\\*(C'\\fR. (One might optionally use \\f(CW\\*(C`EVFLAG_NOENV\\*(C'\\fR, too).\n.PP\n.Vb 3\n\\&   struct ev_loop *loop = ev_default_init (0);\n\\&   struct ev_loop *loop_socket = 0;\n\\&   ev_embed embed;\n\\&\n\\&   if (ev_supported_backends () & ~ev_recommended_backends () & EVBACKEND_KQUEUE)\n\\&     if ((loop_socket = ev_loop_new (EVBACKEND_KQUEUE))\n\\&       {\n\\&         ev_embed_init (&embed, 0, loop_socket);\n\\&         ev_embed_start (loop, &embed);\n\\&       }\n\\&\n\\&   if (!loop_socket)\n\\&     loop_socket = loop;\n\\&\n\\&   // now use loop_socket for all sockets, and loop for everything else\n.Ve\n.ie n .SS \"\"\"ev_fork\"\" \\- the audacity to resume the event loop after a fork\"\n.el .SS \"\\f(CWev_fork\\fP \\- the audacity to resume the event loop after a fork\"\n.IX Subsection \"ev_fork - the audacity to resume the event loop after a fork\"\nFork watchers are called when a \\f(CW\\*(C`fork ()\\*(C'\\fR was detected (usually because\nwhoever is a good citizen cared to tell libev about it by calling\n\\&\\f(CW\\*(C`ev_loop_fork\\*(C'\\fR). The invocation is done before the event loop blocks next\nand before \\f(CW\\*(C`ev_check\\*(C'\\fR watchers are being called, and only in the child\nafter the fork. If whoever good citizen calling \\f(CW\\*(C`ev_default_fork\\*(C'\\fR cheats\nand calls it in the wrong process, the fork handlers will be invoked, too,\nof course.\n.PP\n\\fIThe special problem of life after fork \\- how is it possible?\\fR\n.IX Subsection \"The special problem of life after fork - how is it possible?\"\n.PP\nMost uses of \\f(CW\\*(C`fork ()\\*(C'\\fR consist of forking, then some simple calls to set\nup/change the process environment, followed by a call to \\f(CW\\*(C`exec()\\*(C'\\fR. This\nsequence should be handled by libev without any problems.\n.PP\nThis changes when the application actually wants to do event handling\nin the child, or both parent in child, in effect \\*(L\"continuing\\*(R\" after the\nfork.\n.PP\nThe default mode of operation (for libev, with application help to detect\nforks) is to duplicate all the state in the child, as would be expected\nwhen \\fIeither\\fR the parent \\fIor\\fR the child process continues.\n.PP\nWhen both processes want to continue using libev, then this is usually the\nwrong result. In that case, usually one process (typically the parent) is\nsupposed to continue with all watchers in place as before, while the other\nprocess typically wants to start fresh, i.e. without any active watchers.\n.PP\nThe cleanest and most efficient way to achieve that with libev is to\nsimply create a new event loop, which of course will be \\*(L\"empty\\*(R\", and\nuse that for new watchers. This has the advantage of not touching more\nmemory than necessary, and thus avoiding the copy-on-write, and the\ndisadvantage of having to use multiple event loops (which do not support\nsignal watchers).\n.PP\nWhen this is not possible, or you want to use the default loop for\nother reasons, then in the process that wants to start \\*(L\"fresh\\*(R\", call\n\\&\\f(CW\\*(C`ev_loop_destroy (EV_DEFAULT)\\*(C'\\fR followed by \\f(CW\\*(C`ev_default_loop (...)\\*(C'\\fR.\nDestroying the default loop will \\*(L\"orphan\\*(R\" (not stop) all registered\nwatchers, so you have to be careful not to execute code that modifies\nthose watchers. Note also that in that case, you have to re-register any\nsignal watchers.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_fork_init (ev_fork *, callback)\" 4\n.IX Item \"ev_fork_init (ev_fork *, callback)\"\nInitialises and configures the fork watcher \\- it has no parameters of any\nkind. There is a \\f(CW\\*(C`ev_fork_set\\*(C'\\fR macro, but using it is utterly pointless,\nreally.\n.ie n .SS \"\"\"ev_cleanup\"\" \\- even the best things end\"\n.el .SS \"\\f(CWev_cleanup\\fP \\- even the best things end\"\n.IX Subsection \"ev_cleanup - even the best things end\"\nCleanup watchers are called just before the event loop is being destroyed\nby a call to \\f(CW\\*(C`ev_loop_destroy\\*(C'\\fR.\n.PP\nWhile there is no guarantee that the event loop gets destroyed, cleanup\nwatchers provide a convenient method to install cleanup hooks for your\nprogram, worker threads and so on \\- you just to make sure to destroy the\nloop when you want them to be invoked.\n.PP\nCleanup watchers are invoked in the same way as any other watcher. Unlike\nall other watchers, they do not keep a reference to the event loop (which\nmakes a lot of sense if you think about it). Like all other watchers, you\ncan call libev functions in the callback, except \\f(CW\\*(C`ev_cleanup_start\\*(C'\\fR.\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_cleanup_init (ev_cleanup *, callback)\" 4\n.IX Item \"ev_cleanup_init (ev_cleanup *, callback)\"\nInitialises and configures the cleanup watcher \\- it has no parameters of\nany kind. There is a \\f(CW\\*(C`ev_cleanup_set\\*(C'\\fR macro, but using it is utterly\npointless, I assure you.\n.PP\nExample: Register an atexit handler to destroy the default loop, so any\ncleanup functions are called.\n.PP\n.Vb 5\n\\&   static void\n\\&   program_exits (void)\n\\&   {\n\\&     ev_loop_destroy (EV_DEFAULT_UC);\n\\&   }\n\\&\n\\&   ...\n\\&   atexit (program_exits);\n.Ve\n.ie n .SS \"\"\"ev_async\"\" \\- how to wake up an event loop\"\n.el .SS \"\\f(CWev_async\\fP \\- how to wake up an event loop\"\n.IX Subsection \"ev_async - how to wake up an event loop\"\nIn general, you cannot use an \\f(CW\\*(C`ev_loop\\*(C'\\fR from multiple threads or other\nasynchronous sources such as signal handlers (as opposed to multiple event\nloops \\- those are of course safe to use in different threads).\n.PP\nSometimes, however, you need to wake up an event loop you do not control,\nfor example because it belongs to another thread. This is what \\f(CW\\*(C`ev_async\\*(C'\\fR\nwatchers do: as long as the \\f(CW\\*(C`ev_async\\*(C'\\fR watcher is active, you can signal\nit by calling \\f(CW\\*(C`ev_async_send\\*(C'\\fR, which is thread\\- and signal safe.\n.PP\nThis functionality is very similar to \\f(CW\\*(C`ev_signal\\*(C'\\fR watchers, as signals,\ntoo, are asynchronous in nature, and signals, too, will be compressed\n(i.e. the number of callback invocations may be less than the number of\n\\&\\f(CW\\*(C`ev_async_send\\*(C'\\fR calls). In fact, you could use signal watchers as a kind\nof \\*(L\"global async watchers\\*(R\" by using a watcher on an otherwise unused\nsignal, and \\f(CW\\*(C`ev_feed_signal\\*(C'\\fR to signal this watcher from another thread,\neven without knowing which loop owns the signal.\n.PP\n\\fIQueueing\\fR\n.IX Subsection \"Queueing\"\n.PP\n\\&\\f(CW\\*(C`ev_async\\*(C'\\fR does not support queueing of data in any way. The reason\nis that the author does not know of a simple (or any) algorithm for a\nmultiple-writer-single-reader queue that works in all cases and doesn't\nneed elaborate support such as pthreads or unportable memory access\nsemantics.\n.PP\nThat means that if you want to queue data, you have to provide your own\nqueue. But at least I can tell you how to implement locking around your\nqueue:\n.IP \"queueing from a signal handler context\" 4\n.IX Item \"queueing from a signal handler context\"\nTo implement race-free queueing, you simply add to the queue in the signal\nhandler but you block the signal handler in the watcher callback. Here is\nan example that does that for some fictitious \\s-1SIGUSR1\\s0 handler:\n.Sp\n.Vb 1\n\\&   static ev_async mysig;\n\\&\n\\&   static void\n\\&   sigusr1_handler (void)\n\\&   {\n\\&     sometype data;\n\\&\n\\&     // no locking etc.\n\\&     queue_put (data);\n\\&     ev_async_send (EV_DEFAULT_ &mysig);\n\\&   }\n\\&\n\\&   static void\n\\&   mysig_cb (EV_P_ ev_async *w, int revents)\n\\&   {\n\\&     sometype data;\n\\&     sigset_t block, prev;\n\\&\n\\&     sigemptyset (&block);\n\\&     sigaddset (&block, SIGUSR1);\n\\&     sigprocmask (SIG_BLOCK, &block, &prev);\n\\&\n\\&     while (queue_get (&data))\n\\&       process (data);\n\\&\n\\&     if (sigismember (&prev, SIGUSR1)\n\\&       sigprocmask (SIG_UNBLOCK, &block, 0);\n\\&   }\n.Ve\n.Sp\n(Note: pthreads in theory requires you to use \\f(CW\\*(C`pthread_setmask\\*(C'\\fR\ninstead of \\f(CW\\*(C`sigprocmask\\*(C'\\fR when you use threads, but libev doesn't do it\neither...).\n.IP \"queueing from a thread context\" 4\n.IX Item \"queueing from a thread context\"\nThe strategy for threads is different, as you cannot (easily) block\nthreads but you can easily preempt them, so to queue safely you need to\nemploy a traditional mutex lock, such as in this pthread example:\n.Sp\n.Vb 2\n\\&   static ev_async mysig;\n\\&   static pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER;\n\\&\n\\&   static void\n\\&   otherthread (void)\n\\&   {\n\\&     // only need to lock the actual queueing operation\n\\&     pthread_mutex_lock (&mymutex);\n\\&     queue_put (data);\n\\&     pthread_mutex_unlock (&mymutex);\n\\&\n\\&     ev_async_send (EV_DEFAULT_ &mysig);\n\\&   }\n\\&\n\\&   static void\n\\&   mysig_cb (EV_P_ ev_async *w, int revents)\n\\&   {\n\\&     pthread_mutex_lock (&mymutex);\n\\&\n\\&     while (queue_get (&data))\n\\&       process (data);\n\\&\n\\&     pthread_mutex_unlock (&mymutex);\n\\&   }\n.Ve\n.PP\n\\fIWatcher-Specific Functions and Data Members\\fR\n.IX Subsection \"Watcher-Specific Functions and Data Members\"\n.IP \"ev_async_init (ev_async *, callback)\" 4\n.IX Item \"ev_async_init (ev_async *, callback)\"\nInitialises and configures the async watcher \\- it has no parameters of any\nkind. There is a \\f(CW\\*(C`ev_async_set\\*(C'\\fR macro, but using it is utterly pointless,\ntrust me.\n.IP \"ev_async_send (loop, ev_async *)\" 4\n.IX Item \"ev_async_send (loop, ev_async *)\"\nSends/signals/activates the given \\f(CW\\*(C`ev_async\\*(C'\\fR watcher, that is, feeds\nan \\f(CW\\*(C`EV_ASYNC\\*(C'\\fR event on the watcher into the event loop, and instantly\nreturns.\n.Sp\nUnlike \\f(CW\\*(C`ev_feed_event\\*(C'\\fR, this call is safe to do from other threads,\nsignal or similar contexts (see the discussion of \\f(CW\\*(C`EV_ATOMIC_T\\*(C'\\fR in the\nembedding section below on what exactly this means).\n.Sp\nNote that, as with other watchers in libev, multiple events might get\ncompressed into a single callback invocation (another way to look at\nthis is that \\f(CW\\*(C`ev_async\\*(C'\\fR watchers are level-triggered: they are set on\n\\&\\f(CW\\*(C`ev_async_send\\*(C'\\fR, reset when the event loop detects that).\n.Sp\nThis call incurs the overhead of at most one extra system call per event\nloop iteration, if the event loop is blocked, and no syscall at all if\nthe event loop (or your program) is processing events. That means that\nrepeated calls are basically free (there is no need to avoid calls for\nperformance reasons) and that the overhead becomes smaller (typically\nzero) under load.\n.IP \"bool = ev_async_pending (ev_async *)\" 4\n.IX Item \"bool = ev_async_pending (ev_async *)\"\nReturns a non-zero value when \\f(CW\\*(C`ev_async_send\\*(C'\\fR has been called on the\nwatcher but the event has not yet been processed (or even noted) by the\nevent loop.\n.Sp\n\\&\\f(CW\\*(C`ev_async_send\\*(C'\\fR sets a flag in the watcher and wakes up the loop. When\nthe loop iterates next and checks for the watcher to have become active,\nit will reset the flag again. \\f(CW\\*(C`ev_async_pending\\*(C'\\fR can be used to very\nquickly check whether invoking the loop might be a good idea.\n.Sp\nNot that this does \\fInot\\fR check whether the watcher itself is pending,\nonly whether it has been requested to make this watcher pending: there\nis a time window between the event loop checking and resetting the async\nnotification, and the callback being invoked.\n.SH \"OTHER FUNCTIONS\"\n.IX Header \"OTHER FUNCTIONS\"\nThere are some other functions of possible interest. Described. Here. Now.\n.IP \"ev_once (loop, int fd, int events, ev_tstamp timeout, callback)\" 4\n.IX Item \"ev_once (loop, int fd, int events, ev_tstamp timeout, callback)\"\nThis function combines a simple timer and an I/O watcher, calls your\ncallback on whichever event happens first and automatically stops both\nwatchers. This is useful if you want to wait for a single event on an fd\nor timeout without having to allocate/configure/start/stop/free one or\nmore watchers yourself.\n.Sp\nIf \\f(CW\\*(C`fd\\*(C'\\fR is less than 0, then no I/O watcher will be started and the\n\\&\\f(CW\\*(C`events\\*(C'\\fR argument is being ignored. Otherwise, an \\f(CW\\*(C`ev_io\\*(C'\\fR watcher for\nthe given \\f(CW\\*(C`fd\\*(C'\\fR and \\f(CW\\*(C`events\\*(C'\\fR set will be created and started.\n.Sp\nIf \\f(CW\\*(C`timeout\\*(C'\\fR is less than 0, then no timeout watcher will be\nstarted. Otherwise an \\f(CW\\*(C`ev_timer\\*(C'\\fR watcher with after = \\f(CW\\*(C`timeout\\*(C'\\fR (and\nrepeat = 0) will be started. \\f(CW0\\fR is a valid timeout.\n.Sp\nThe callback has the type \\f(CW\\*(C`void (*cb)(int revents, void *arg)\\*(C'\\fR and is\npassed an \\f(CW\\*(C`revents\\*(C'\\fR set like normal event callbacks (a combination of\n\\&\\f(CW\\*(C`EV_ERROR\\*(C'\\fR, \\f(CW\\*(C`EV_READ\\*(C'\\fR, \\f(CW\\*(C`EV_WRITE\\*(C'\\fR or \\f(CW\\*(C`EV_TIMER\\*(C'\\fR) and the \\f(CW\\*(C`arg\\*(C'\\fR\nvalue passed to \\f(CW\\*(C`ev_once\\*(C'\\fR. Note that it is possible to receive \\fIboth\\fR\na timeout and an io event at the same time \\- you probably should give io\nevents precedence.\n.Sp\nExample: wait up to ten seconds for data to appear on \\s-1STDIN_FILENO.\\s0\n.Sp\n.Vb 7\n\\&   static void stdin_ready (int revents, void *arg)\n\\&   {\n\\&     if (revents & EV_READ)\n\\&       /* stdin might have data for us, joy! */;\n\\&     else if (revents & EV_TIMER)\n\\&       /* doh, nothing entered */;\n\\&   }\n\\&\n\\&   ev_once (STDIN_FILENO, EV_READ, 10., stdin_ready, 0);\n.Ve\n.IP \"ev_feed_fd_event (loop, int fd, int revents)\" 4\n.IX Item \"ev_feed_fd_event (loop, int fd, int revents)\"\nFeed an event on the given fd, as if a file descriptor backend detected\nthe given events.\n.IP \"ev_feed_signal_event (loop, int signum)\" 4\n.IX Item \"ev_feed_signal_event (loop, int signum)\"\nFeed an event as if the given signal occurred. See also \\f(CW\\*(C`ev_feed_signal\\*(C'\\fR,\nwhich is async-safe.\n.SH \"COMMON OR USEFUL IDIOMS (OR BOTH)\"\n.IX Header \"COMMON OR USEFUL IDIOMS (OR BOTH)\"\nThis section explains some common idioms that are not immediately\nobvious. Note that examples are sprinkled over the whole manual, and this\nsection only contains stuff that wouldn't fit anywhere else.\n.SS \"\\s-1ASSOCIATING CUSTOM DATA WITH A WATCHER\\s0\"\n.IX Subsection \"ASSOCIATING CUSTOM DATA WITH A WATCHER\"\nEach watcher has, by default, a \\f(CW\\*(C`void *data\\*(C'\\fR member that you can read\nor modify at any time: libev will completely ignore it. This can be used\nto associate arbitrary data with your watcher. If you need more data and\ndon't want to allocate memory separately and store a pointer to it in that\ndata member, you can also \\*(L\"subclass\\*(R\" the watcher type and provide your own\ndata:\n.PP\n.Vb 7\n\\&   struct my_io\n\\&   {\n\\&     ev_io io;\n\\&     int otherfd;\n\\&     void *somedata;\n\\&     struct whatever *mostinteresting;\n\\&   };\n\\&\n\\&   ...\n\\&   struct my_io w;\n\\&   ev_io_init (&w.io, my_cb, fd, EV_READ);\n.Ve\n.PP\nAnd since your callback will be called with a pointer to the watcher, you\ncan cast it back to your own type:\n.PP\n.Vb 5\n\\&   static void my_cb (struct ev_loop *loop, ev_io *w_, int revents)\n\\&   {\n\\&     struct my_io *w = (struct my_io *)w_;\n\\&     ...\n\\&   }\n.Ve\n.PP\nMore interesting and less C\\-conformant ways of casting your callback\nfunction type instead have been omitted.\n.SS \"\\s-1BUILDING YOUR OWN COMPOSITE WATCHERS\\s0\"\n.IX Subsection \"BUILDING YOUR OWN COMPOSITE WATCHERS\"\nAnother common scenario is to use some data structure with multiple\nembedded watchers, in effect creating your own watcher that combines\nmultiple libev event sources into one \\*(L\"super-watcher\\*(R\":\n.PP\n.Vb 6\n\\&   struct my_biggy\n\\&   {\n\\&     int some_data;\n\\&     ev_timer t1;\n\\&     ev_timer t2;\n\\&   }\n.Ve\n.PP\nIn this case getting the pointer to \\f(CW\\*(C`my_biggy\\*(C'\\fR is a bit more\ncomplicated: Either you store the address of your \\f(CW\\*(C`my_biggy\\*(C'\\fR struct in\nthe \\f(CW\\*(C`data\\*(C'\\fR member of the watcher (for woozies or \\*(C+ coders), or you need\nto use some pointer arithmetic using \\f(CW\\*(C`offsetof\\*(C'\\fR inside your watchers (for\nreal programmers):\n.PP\n.Vb 1\n\\&   #include <stddef.h>\n\\&\n\\&   static void\n\\&   t1_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     struct my_biggy big = (struct my_biggy *)\n\\&       (((char *)w) \\- offsetof (struct my_biggy, t1));\n\\&   }\n\\&\n\\&   static void\n\\&   t2_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     struct my_biggy big = (struct my_biggy *)\n\\&       (((char *)w) \\- offsetof (struct my_biggy, t2));\n\\&   }\n.Ve\n.SS \"\\s-1AVOIDING FINISHING BEFORE RETURNING\\s0\"\n.IX Subsection \"AVOIDING FINISHING BEFORE RETURNING\"\nOften you have structures like this in event-based programs:\n.PP\n.Vb 4\n\\&  callback ()\n\\&  {\n\\&    free (request);\n\\&  }\n\\&\n\\&  request = start_new_request (..., callback);\n.Ve\n.PP\nThe intent is to start some \\*(L\"lengthy\\*(R\" operation. The \\f(CW\\*(C`request\\*(C'\\fR could be\nused to cancel the operation, or do other things with it.\n.PP\nIt's not uncommon to have code paths in \\f(CW\\*(C`start_new_request\\*(C'\\fR that\nimmediately invoke the callback, for example, to report errors. Or you add\nsome caching layer that finds that it can skip the lengthy aspects of the\noperation and simply invoke the callback with the result.\n.PP\nThe problem here is that this will happen \\fIbefore\\fR \\f(CW\\*(C`start_new_request\\*(C'\\fR\nhas returned, so \\f(CW\\*(C`request\\*(C'\\fR is not set.\n.PP\nEven if you pass the request by some safer means to the callback, you\nmight want to do something to the request after starting it, such as\ncanceling it, which probably isn't working so well when the callback has\nalready been invoked.\n.PP\nA common way around all these issues is to make sure that\n\\&\\f(CW\\*(C`start_new_request\\*(C'\\fR \\fIalways\\fR returns before the callback is invoked. If\n\\&\\f(CW\\*(C`start_new_request\\*(C'\\fR immediately knows the result, it can artificially\ndelay invoking the callback by using a \\f(CW\\*(C`prepare\\*(C'\\fR or \\f(CW\\*(C`idle\\*(C'\\fR watcher for\nexample, or more sneakily, by reusing an existing (stopped) watcher and\npushing it into the pending queue:\n.PP\n.Vb 2\n\\&   ev_set_cb (watcher, callback);\n\\&   ev_feed_event (EV_A_ watcher, 0);\n.Ve\n.PP\nThis way, \\f(CW\\*(C`start_new_request\\*(C'\\fR can safely return before the callback is\ninvoked, while not delaying callback invocation too much.\n.SS \"\\s-1MODEL/NESTED EVENT LOOP INVOCATIONS AND EXIT CONDITIONS\\s0\"\n.IX Subsection \"MODEL/NESTED EVENT LOOP INVOCATIONS AND EXIT CONDITIONS\"\nOften (especially in \\s-1GUI\\s0 toolkits) there are places where you have\n\\&\\fImodal\\fR interaction, which is most easily implemented by recursively\ninvoking \\f(CW\\*(C`ev_run\\*(C'\\fR.\n.PP\nThis brings the problem of exiting \\- a callback might want to finish the\nmain \\f(CW\\*(C`ev_run\\*(C'\\fR call, but not the nested one (e.g. user clicked \\*(L\"Quit\\*(R\", but\na modal \\*(L\"Are you sure?\\*(R\" dialog is still waiting), or just the nested one\nand not the main one (e.g. user clocked \\*(L\"Ok\\*(R\" in a modal dialog), or some\nother combination: In these cases, a simple \\f(CW\\*(C`ev_break\\*(C'\\fR will not work.\n.PP\nThe solution is to maintain \\*(L\"break this loop\\*(R\" variable for each \\f(CW\\*(C`ev_run\\*(C'\\fR\ninvocation, and use a loop around \\f(CW\\*(C`ev_run\\*(C'\\fR until the condition is\ntriggered, using \\f(CW\\*(C`EVRUN_ONCE\\*(C'\\fR:\n.PP\n.Vb 2\n\\&   // main loop\n\\&   int exit_main_loop = 0;\n\\&\n\\&   while (!exit_main_loop)\n\\&     ev_run (EV_DEFAULT_ EVRUN_ONCE);\n\\&\n\\&   // in a modal watcher\n\\&   int exit_nested_loop = 0;\n\\&\n\\&   while (!exit_nested_loop)\n\\&     ev_run (EV_A_ EVRUN_ONCE);\n.Ve\n.PP\nTo exit from any of these loops, just set the corresponding exit variable:\n.PP\n.Vb 2\n\\&   // exit modal loop\n\\&   exit_nested_loop = 1;\n\\&\n\\&   // exit main program, after modal loop is finished\n\\&   exit_main_loop = 1;\n\\&\n\\&   // exit both\n\\&   exit_main_loop = exit_nested_loop = 1;\n.Ve\n.SS \"\\s-1THREAD LOCKING EXAMPLE\\s0\"\n.IX Subsection \"THREAD LOCKING EXAMPLE\"\nHere is a fictitious example of how to run an event loop in a different\nthread from where callbacks are being invoked and watchers are\ncreated/added/removed.\n.PP\nFor a real-world example, see the \\f(CW\\*(C`EV::Loop::Async\\*(C'\\fR perl module,\nwhich uses exactly this technique (which is suited for many high-level\nlanguages).\n.PP\nThe example uses a pthread mutex to protect the loop data, a condition\nvariable to wait for callback invocations, an async watcher to notify the\nevent loop thread and an unspecified mechanism to wake up the main thread.\n.PP\nFirst, you need to associate some data with the event loop:\n.PP\n.Vb 6\n\\&   typedef struct {\n\\&     mutex_t lock; /* global loop lock */\n\\&     ev_async async_w;\n\\&     thread_t tid;\n\\&     cond_t invoke_cv;\n\\&   } userdata;\n\\&\n\\&   void prepare_loop (EV_P)\n\\&   {\n\\&      // for simplicity, we use a static userdata struct.\n\\&      static userdata u;\n\\&\n\\&      ev_async_init (&u\\->async_w, async_cb);\n\\&      ev_async_start (EV_A_ &u\\->async_w);\n\\&\n\\&      pthread_mutex_init (&u\\->lock, 0);\n\\&      pthread_cond_init (&u\\->invoke_cv, 0);\n\\&\n\\&      // now associate this with the loop\n\\&      ev_set_userdata (EV_A_ u);\n\\&      ev_set_invoke_pending_cb (EV_A_ l_invoke);\n\\&      ev_set_loop_release_cb (EV_A_ l_release, l_acquire);\n\\&\n\\&      // then create the thread running ev_run\n\\&      pthread_create (&u\\->tid, 0, l_run, EV_A);\n\\&   }\n.Ve\n.PP\nThe callback for the \\f(CW\\*(C`ev_async\\*(C'\\fR watcher does nothing: the watcher is used\nsolely to wake up the event loop so it takes notice of any new watchers\nthat might have been added:\n.PP\n.Vb 5\n\\&   static void\n\\&   async_cb (EV_P_ ev_async *w, int revents)\n\\&   {\n\\&      // just used for the side effects\n\\&   }\n.Ve\n.PP\nThe \\f(CW\\*(C`l_release\\*(C'\\fR and \\f(CW\\*(C`l_acquire\\*(C'\\fR callbacks simply unlock/lock the mutex\nprotecting the loop data, respectively.\n.PP\n.Vb 6\n\\&   static void\n\\&   l_release (EV_P)\n\\&   {\n\\&     userdata *u = ev_userdata (EV_A);\n\\&     pthread_mutex_unlock (&u\\->lock);\n\\&   }\n\\&\n\\&   static void\n\\&   l_acquire (EV_P)\n\\&   {\n\\&     userdata *u = ev_userdata (EV_A);\n\\&     pthread_mutex_lock (&u\\->lock);\n\\&   }\n.Ve\n.PP\nThe event loop thread first acquires the mutex, and then jumps straight\ninto \\f(CW\\*(C`ev_run\\*(C'\\fR:\n.PP\n.Vb 4\n\\&   void *\n\\&   l_run (void *thr_arg)\n\\&   {\n\\&     struct ev_loop *loop = (struct ev_loop *)thr_arg;\n\\&\n\\&     l_acquire (EV_A);\n\\&     pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS, 0);\n\\&     ev_run (EV_A_ 0);\n\\&     l_release (EV_A);\n\\&\n\\&     return 0;\n\\&   }\n.Ve\n.PP\nInstead of invoking all pending watchers, the \\f(CW\\*(C`l_invoke\\*(C'\\fR callback will\nsignal the main thread via some unspecified mechanism (signals? pipe\nwrites? \\f(CW\\*(C`Async::Interrupt\\*(C'\\fR?) and then waits until all pending watchers\nhave been called (in a while loop because a) spurious wakeups are possible\nand b) skipping inter-thread-communication when there are no pending\nwatchers is very beneficial):\n.PP\n.Vb 4\n\\&   static void\n\\&   l_invoke (EV_P)\n\\&   {\n\\&     userdata *u = ev_userdata (EV_A);\n\\&\n\\&     while (ev_pending_count (EV_A))\n\\&       {\n\\&         wake_up_other_thread_in_some_magic_or_not_so_magic_way ();\n\\&         pthread_cond_wait (&u\\->invoke_cv, &u\\->lock);\n\\&       }\n\\&   }\n.Ve\n.PP\nNow, whenever the main thread gets told to invoke pending watchers, it\nwill grab the lock, call \\f(CW\\*(C`ev_invoke_pending\\*(C'\\fR and then signal the loop\nthread to continue:\n.PP\n.Vb 4\n\\&   static void\n\\&   real_invoke_pending (EV_P)\n\\&   {\n\\&     userdata *u = ev_userdata (EV_A);\n\\&\n\\&     pthread_mutex_lock (&u\\->lock);\n\\&     ev_invoke_pending (EV_A);\n\\&     pthread_cond_signal (&u\\->invoke_cv);\n\\&     pthread_mutex_unlock (&u\\->lock);\n\\&   }\n.Ve\n.PP\nWhenever you want to start/stop a watcher or do other modifications to an\nevent loop, you will now have to lock:\n.PP\n.Vb 2\n\\&   ev_timer timeout_watcher;\n\\&   userdata *u = ev_userdata (EV_A);\n\\&\n\\&   ev_timer_init (&timeout_watcher, timeout_cb, 5.5, 0.);\n\\&\n\\&   pthread_mutex_lock (&u\\->lock);\n\\&   ev_timer_start (EV_A_ &timeout_watcher);\n\\&   ev_async_send (EV_A_ &u\\->async_w);\n\\&   pthread_mutex_unlock (&u\\->lock);\n.Ve\n.PP\nNote that sending the \\f(CW\\*(C`ev_async\\*(C'\\fR watcher is required because otherwise\nan event loop currently blocking in the kernel will have no knowledge\nabout the newly added timer. By waking up the loop it will pick up any new\nwatchers in the next event loop iteration.\n.SS \"\\s-1THREADS, COROUTINES, CONTINUATIONS, QUEUES... INSTEAD OF CALLBACKS\\s0\"\n.IX Subsection \"THREADS, COROUTINES, CONTINUATIONS, QUEUES... INSTEAD OF CALLBACKS\"\nWhile the overhead of a callback that e.g. schedules a thread is small, it\nis still an overhead. If you embed libev, and your main usage is with some\nkind of threads or coroutines, you might want to customise libev so that\ndoesn't need callbacks anymore.\n.PP\nImagine you have coroutines that you can switch to using a function\n\\&\\f(CW\\*(C`switch_to (coro)\\*(C'\\fR, that libev runs in a coroutine called \\f(CW\\*(C`libev_coro\\*(C'\\fR\nand that due to some magic, the currently active coroutine is stored in a\nglobal called \\f(CW\\*(C`current_coro\\*(C'\\fR. Then you can build your own \\*(L\"wait for libev\nevent\\*(R\" primitive by changing \\f(CW\\*(C`EV_CB_DECLARE\\*(C'\\fR and \\f(CW\\*(C`EV_CB_INVOKE\\*(C'\\fR (note\nthe differing \\f(CW\\*(C`;\\*(C'\\fR conventions):\n.PP\n.Vb 2\n\\&   #define EV_CB_DECLARE(type)   struct my_coro *cb;\n\\&   #define EV_CB_INVOKE(watcher) switch_to ((watcher)\\->cb)\n.Ve\n.PP\nThat means instead of having a C callback function, you store the\ncoroutine to switch to in each watcher, and instead of having libev call\nyour callback, you instead have it switch to that coroutine.\n.PP\nA coroutine might now wait for an event with a function called\n\\&\\f(CW\\*(C`wait_for_event\\*(C'\\fR. (the watcher needs to be started, as always, but it doesn't\nmatter when, or whether the watcher is active or not when this function is\ncalled):\n.PP\n.Vb 6\n\\&   void\n\\&   wait_for_event (ev_watcher *w)\n\\&   {\n\\&     ev_set_cb (w, current_coro);\n\\&     switch_to (libev_coro);\n\\&   }\n.Ve\n.PP\nThat basically suspends the coroutine inside \\f(CW\\*(C`wait_for_event\\*(C'\\fR and\ncontinues the libev coroutine, which, when appropriate, switches back to\nthis or any other coroutine.\n.PP\nYou can do similar tricks if you have, say, threads with an event queue \\-\ninstead of storing a coroutine, you store the queue object and instead of\nswitching to a coroutine, you push the watcher onto the queue and notify\nany waiters.\n.PP\nTo embed libev, see \\*(L\"\\s-1EMBEDDING\\*(R\"\\s0, but in short, it's easiest to create two\nfiles, \\fImy_ev.h\\fR and \\fImy_ev.c\\fR that include the respective libev files:\n.PP\n.Vb 4\n\\&   // my_ev.h\n\\&   #define EV_CB_DECLARE(type)   struct my_coro *cb;\n\\&   #define EV_CB_INVOKE(watcher) switch_to ((watcher)\\->cb)\n\\&   #include \"../libev/ev.h\"\n\\&\n\\&   // my_ev.c\n\\&   #define EV_H \"my_ev.h\"\n\\&   #include \"../libev/ev.c\"\n.Ve\n.PP\nAnd then use \\fImy_ev.h\\fR when you would normally use \\fIev.h\\fR, and compile\n\\&\\fImy_ev.c\\fR into your project. When properly specifying include paths, you\ncan even use \\fIev.h\\fR as header file name directly.\n.SH \"LIBEVENT EMULATION\"\n.IX Header \"LIBEVENT EMULATION\"\nLibev offers a compatibility emulation layer for libevent. It cannot\nemulate the internals of libevent, so here are some usage hints:\n.IP \"\\(bu\" 4\nOnly the libevent\\-1.4.1\\-beta \\s-1API\\s0 is being emulated.\n.Sp\nThis was the newest libevent version available when libev was implemented,\nand is still mostly unchanged in 2010.\n.IP \"\\(bu\" 4\nUse it by including <event.h>, as usual.\n.IP \"\\(bu\" 4\nThe following members are fully supported: ev_base, ev_callback,\nev_arg, ev_fd, ev_res, ev_events.\n.IP \"\\(bu\" 4\nAvoid using ev_flags and the EVLIST_*\\-macros, while it is\nmaintained by libev, it does not work exactly the same way as in libevent (consider\nit a private \\s-1API\\s0).\n.IP \"\\(bu\" 4\nPriorities are not currently supported. Initialising priorities\nwill fail and all watchers will have the same priority, even though there\nis an ev_pri field.\n.IP \"\\(bu\" 4\nIn libevent, the last base created gets the signals, in libev, the\nbase that registered the signal gets the signals.\n.IP \"\\(bu\" 4\nOther members are not supported.\n.IP \"\\(bu\" 4\nThe libev emulation is \\fInot\\fR \\s-1ABI\\s0 compatible to libevent, you need\nto use the libev header file and library.\n.SH \"\\*(C+ SUPPORT\"\n.IX Header \" SUPPORT\"\n.SS \"C \\s-1API\\s0\"\n.IX Subsection \"C API\"\nThe normal C \\s-1API\\s0 should work fine when used from \\*(C+: both ev.h and the\nlibev sources can be compiled as \\*(C+. Therefore, code that uses the C \\s-1API\\s0\nwill work fine.\n.PP\nProper exception specifications might have to be added to callbacks passed\nto libev: exceptions may be thrown only from watcher callbacks, all\nother callbacks (allocator, syserr, loop acquire/release and periodic\nreschedule callbacks) must not throw exceptions, and might need a \\f(CW\\*(C`throw\n()\\*(C'\\fR specification. If you have code that needs to be compiled as both C\nand \\*(C+ you can use the \\f(CW\\*(C`EV_THROW\\*(C'\\fR macro for this:\n.PP\n.Vb 6\n\\&   static void\n\\&   fatal_error (const char *msg) EV_THROW\n\\&   {\n\\&     perror (msg);\n\\&     abort ();\n\\&   }\n\\&\n\\&   ...\n\\&   ev_set_syserr_cb (fatal_error);\n.Ve\n.PP\nThe only \\s-1API\\s0 functions that can currently throw exceptions are \\f(CW\\*(C`ev_run\\*(C'\\fR,\n\\&\\f(CW\\*(C`ev_invoke\\*(C'\\fR, \\f(CW\\*(C`ev_invoke_pending\\*(C'\\fR and \\f(CW\\*(C`ev_loop_destroy\\*(C'\\fR (the latter\nbecause it runs cleanup watchers).\n.PP\nThrowing exceptions in watcher callbacks is only supported if libev itself\nis compiled with a \\*(C+ compiler or your C and \\*(C+ environments allow\nthrowing exceptions through C libraries (most do).\n.SS \"\\*(C+ \\s-1API\\s0\"\n.IX Subsection \" API\"\nLibev comes with some simplistic wrapper classes for \\*(C+ that mainly allow\nyou to use some convenience methods to start/stop watchers and also change\nthe callback model to a model using method callbacks on objects.\n.PP\nTo use it,\n.PP\n.Vb 1\n\\&   #include <ev++.h>\n.Ve\n.PP\nThis automatically includes \\fIev.h\\fR and puts all of its definitions (many\nof them macros) into the global namespace. All \\*(C+ specific things are\nput into the \\f(CW\\*(C`ev\\*(C'\\fR namespace. It should support all the same embedding\noptions as \\fIev.h\\fR, most notably \\f(CW\\*(C`EV_MULTIPLICITY\\*(C'\\fR.\n.PP\nCare has been taken to keep the overhead low. The only data member the \\*(C+\nclasses add (compared to plain C\\-style watchers) is the event loop pointer\nthat the watcher is associated with (or no additional members at all if\nyou disable \\f(CW\\*(C`EV_MULTIPLICITY\\*(C'\\fR when embedding libev).\n.PP\nCurrently, functions, static and non-static member functions and classes\nwith \\f(CW\\*(C`operator ()\\*(C'\\fR can be used as callbacks. Other types should be easy\nto add as long as they only need one additional pointer for context. If\nyou need support for other types of functors please contact the author\n(preferably after implementing it).\n.PP\nFor all this to work, your \\*(C+ compiler either has to use the same calling\nconventions as your C compiler (for static member functions), or you have\nto embed libev and compile libev itself as \\*(C+.\n.PP\nHere is a list of things available in the \\f(CW\\*(C`ev\\*(C'\\fR namespace:\n.ie n .IP \"\"\"ev::READ\"\", \"\"ev::WRITE\"\" etc.\" 4\n.el .IP \"\\f(CWev::READ\\fR, \\f(CWev::WRITE\\fR etc.\" 4\n.IX Item \"ev::READ, ev::WRITE etc.\"\nThese are just enum values with the same values as the \\f(CW\\*(C`EV_READ\\*(C'\\fR etc.\nmacros from \\fIev.h\\fR.\n.ie n .IP \"\"\"ev::tstamp\"\", \"\"ev::now\"\"\" 4\n.el .IP \"\\f(CWev::tstamp\\fR, \\f(CWev::now\\fR\" 4\n.IX Item \"ev::tstamp, ev::now\"\nAliases to the same types/functions as with the \\f(CW\\*(C`ev_\\*(C'\\fR prefix.\n.ie n .IP \"\"\"ev::io\"\", \"\"ev::timer\"\", \"\"ev::periodic\"\", \"\"ev::idle\"\", \"\"ev::sig\"\" etc.\" 4\n.el .IP \"\\f(CWev::io\\fR, \\f(CWev::timer\\fR, \\f(CWev::periodic\\fR, \\f(CWev::idle\\fR, \\f(CWev::sig\\fR etc.\" 4\n.IX Item \"ev::io, ev::timer, ev::periodic, ev::idle, ev::sig etc.\"\nFor each \\f(CW\\*(C`ev_TYPE\\*(C'\\fR watcher in \\fIev.h\\fR there is a corresponding class of\nthe same name in the \\f(CW\\*(C`ev\\*(C'\\fR namespace, with the exception of \\f(CW\\*(C`ev_signal\\*(C'\\fR\nwhich is called \\f(CW\\*(C`ev::sig\\*(C'\\fR to avoid clashes with the \\f(CW\\*(C`signal\\*(C'\\fR macro\ndefined by many implementations.\n.Sp\nAll of those classes have these methods:\n.RS 4\n.IP \"ev::TYPE::TYPE ()\" 4\n.IX Item \"ev::TYPE::TYPE ()\"\n.PD 0\n.IP \"ev::TYPE::TYPE (loop)\" 4\n.IX Item \"ev::TYPE::TYPE (loop)\"\n.IP \"ev::TYPE::~TYPE\" 4\n.IX Item \"ev::TYPE::~TYPE\"\n.PD\nThe constructor (optionally) takes an event loop to associate the watcher\nwith. If it is omitted, it will use \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR.\n.Sp\nThe constructor calls \\f(CW\\*(C`ev_init\\*(C'\\fR for you, which means you have to call the\n\\&\\f(CW\\*(C`set\\*(C'\\fR method before starting it.\n.Sp\nIt will not set a callback, however: You have to call the templated \\f(CW\\*(C`set\\*(C'\\fR\nmethod to set a callback before you can start the watcher.\n.Sp\n(The reason why you have to use a method is a limitation in \\*(C+ which does\nnot allow explicit template arguments for constructors).\n.Sp\nThe destructor automatically stops the watcher if it is active.\n.IP \"w\\->set<class, &class::method> (object *)\" 4\n.IX Item \"w->set<class, &class::method> (object *)\"\nThis method sets the callback method to call. The method has to have a\nsignature of \\f(CW\\*(C`void (*)(ev_TYPE &, int)\\*(C'\\fR, it receives the watcher as\nfirst argument and the \\f(CW\\*(C`revents\\*(C'\\fR as second. The object must be given as\nparameter and is stored in the \\f(CW\\*(C`data\\*(C'\\fR member of the watcher.\n.Sp\nThis method synthesizes efficient thunking code to call your method from\nthe C callback that libev requires. If your compiler can inline your\ncallback (i.e. it is visible to it at the place of the \\f(CW\\*(C`set\\*(C'\\fR call and\nyour compiler is good :), then the method will be fully inlined into the\nthunking function, making it as fast as a direct C callback.\n.Sp\nExample: simple class declaration and watcher initialisation\n.Sp\n.Vb 4\n\\&   struct myclass\n\\&   {\n\\&     void io_cb (ev::io &w, int revents) { }\n\\&   }\n\\&\n\\&   myclass obj;\n\\&   ev::io iow;\n\\&   iow.set <myclass, &myclass::io_cb> (&obj);\n.Ve\n.IP \"w\\->set (object *)\" 4\n.IX Item \"w->set (object *)\"\nThis is a variation of a method callback \\- leaving out the method to call\nwill default the method to \\f(CW\\*(C`operator ()\\*(C'\\fR, which makes it possible to use\nfunctor objects without having to manually specify the \\f(CW\\*(C`operator ()\\*(C'\\fR all\nthe time. Incidentally, you can then also leave out the template argument\nlist.\n.Sp\nThe \\f(CW\\*(C`operator ()\\*(C'\\fR method prototype must be \\f(CW\\*(C`void operator ()(watcher &w,\nint revents)\\*(C'\\fR.\n.Sp\nSee the method\\-\\f(CW\\*(C`set\\*(C'\\fR above for more details.\n.Sp\nExample: use a functor object as callback.\n.Sp\n.Vb 7\n\\&   struct myfunctor\n\\&   {\n\\&     void operator() (ev::io &w, int revents)\n\\&     {\n\\&       ...\n\\&     }\n\\&   }\n\\&\n\\&   myfunctor f;\n\\&\n\\&   ev::io w;\n\\&   w.set (&f);\n.Ve\n.IP \"w\\->set<function> (void *data = 0)\" 4\n.IX Item \"w->set<function> (void *data = 0)\"\nAlso sets a callback, but uses a static method or plain function as\ncallback. The optional \\f(CW\\*(C`data\\*(C'\\fR argument will be stored in the watcher's\n\\&\\f(CW\\*(C`data\\*(C'\\fR member and is free for you to use.\n.Sp\nThe prototype of the \\f(CW\\*(C`function\\*(C'\\fR must be \\f(CW\\*(C`void (*)(ev::TYPE &w, int)\\*(C'\\fR.\n.Sp\nSee the method\\-\\f(CW\\*(C`set\\*(C'\\fR above for more details.\n.Sp\nExample: Use a plain function as callback.\n.Sp\n.Vb 2\n\\&   static void io_cb (ev::io &w, int revents) { }\n\\&   iow.set <io_cb> ();\n.Ve\n.IP \"w\\->set (loop)\" 4\n.IX Item \"w->set (loop)\"\nAssociates a different \\f(CW\\*(C`struct ev_loop\\*(C'\\fR with this watcher. You can only\ndo this when the watcher is inactive (and not pending either).\n.IP \"w\\->set ([arguments])\" 4\n.IX Item \"w->set ([arguments])\"\nBasically the same as \\f(CW\\*(C`ev_TYPE_set\\*(C'\\fR (except for \\f(CW\\*(C`ev::embed\\*(C'\\fR watchers>),\nwith the same arguments. Either this method or a suitable start method\nmust be called at least once. Unlike the C counterpart, an active watcher\ngets automatically stopped and restarted when reconfiguring it with this\nmethod.\n.Sp\nFor \\f(CW\\*(C`ev::embed\\*(C'\\fR watchers this method is called \\f(CW\\*(C`set_embed\\*(C'\\fR, to avoid\nclashing with the \\f(CW\\*(C`set (loop)\\*(C'\\fR method.\n.IP \"w\\->start ()\" 4\n.IX Item \"w->start ()\"\nStarts the watcher. Note that there is no \\f(CW\\*(C`loop\\*(C'\\fR argument, as the\nconstructor already stores the event loop.\n.IP \"w\\->start ([arguments])\" 4\n.IX Item \"w->start ([arguments])\"\nInstead of calling \\f(CW\\*(C`set\\*(C'\\fR and \\f(CW\\*(C`start\\*(C'\\fR methods separately, it is often\nconvenient to wrap them in one call. Uses the same type of arguments as\nthe configure \\f(CW\\*(C`set\\*(C'\\fR method of the watcher.\n.IP \"w\\->stop ()\" 4\n.IX Item \"w->stop ()\"\nStops the watcher if it is active. Again, no \\f(CW\\*(C`loop\\*(C'\\fR argument.\n.ie n .IP \"w\\->again () (\"\"ev::timer\"\", \"\"ev::periodic\"\" only)\" 4\n.el .IP \"w\\->again () (\\f(CWev::timer\\fR, \\f(CWev::periodic\\fR only)\" 4\n.IX Item \"w->again () (ev::timer, ev::periodic only)\"\nFor \\f(CW\\*(C`ev::timer\\*(C'\\fR and \\f(CW\\*(C`ev::periodic\\*(C'\\fR, this invokes the corresponding\n\\&\\f(CW\\*(C`ev_TYPE_again\\*(C'\\fR function.\n.ie n .IP \"w\\->sweep () (\"\"ev::embed\"\" only)\" 4\n.el .IP \"w\\->sweep () (\\f(CWev::embed\\fR only)\" 4\n.IX Item \"w->sweep () (ev::embed only)\"\nInvokes \\f(CW\\*(C`ev_embed_sweep\\*(C'\\fR.\n.ie n .IP \"w\\->update () (\"\"ev::stat\"\" only)\" 4\n.el .IP \"w\\->update () (\\f(CWev::stat\\fR only)\" 4\n.IX Item \"w->update () (ev::stat only)\"\nInvokes \\f(CW\\*(C`ev_stat_stat\\*(C'\\fR.\n.RE\n.RS 4\n.RE\n.PP\nExample: Define a class with two I/O and idle watchers, start the I/O\nwatchers in the constructor.\n.PP\n.Vb 5\n\\&   class myclass\n\\&   {\n\\&     ev::io   io  ; void io_cb   (ev::io   &w, int revents);\n\\&     ev::io   io2 ; void io2_cb  (ev::io   &w, int revents);\n\\&     ev::idle idle; void idle_cb (ev::idle &w, int revents);\n\\&\n\\&     myclass (int fd)\n\\&     {\n\\&       io  .set <myclass, &myclass::io_cb  > (this);\n\\&       io2 .set <myclass, &myclass::io2_cb > (this);\n\\&       idle.set <myclass, &myclass::idle_cb> (this);\n\\&\n\\&       io.set (fd, ev::WRITE); // configure the watcher\n\\&       io.start ();            // start it whenever convenient\n\\&\n\\&       io2.start (fd, ev::READ); // set + start in one call\n\\&     }\n\\&   };\n.Ve\n.SH \"OTHER LANGUAGE BINDINGS\"\n.IX Header \"OTHER LANGUAGE BINDINGS\"\nLibev does not offer other language bindings itself, but bindings for a\nnumber of languages exist in the form of third-party packages. If you know\nany interesting language binding in addition to the ones listed here, drop\nme a note.\n.IP \"Perl\" 4\n.IX Item \"Perl\"\nThe \\s-1EV\\s0 module implements the full libev \\s-1API\\s0 and is actually used to test\nlibev. \\s-1EV\\s0 is developed together with libev. Apart from the \\s-1EV\\s0 core module,\nthere are additional modules that implement libev-compatible interfaces\nto \\f(CW\\*(C`libadns\\*(C'\\fR (\\f(CW\\*(C`EV::ADNS\\*(C'\\fR, but \\f(CW\\*(C`AnyEvent::DNS\\*(C'\\fR is preferred nowadays),\n\\&\\f(CW\\*(C`Net::SNMP\\*(C'\\fR (\\f(CW\\*(C`Net::SNMP::EV\\*(C'\\fR) and the \\f(CW\\*(C`libglib\\*(C'\\fR event core (\\f(CW\\*(C`Glib::EV\\*(C'\\fR\nand \\f(CW\\*(C`EV::Glib\\*(C'\\fR).\n.Sp\nIt can be found and installed via \\s-1CPAN,\\s0 its homepage is at\n<http://software.schmorp.de/pkg/EV>.\n.IP \"Python\" 4\n.IX Item \"Python\"\nPython bindings can be found at <http://code.google.com/p/pyev/>. It\nseems to be quite complete and well-documented.\n.IP \"Ruby\" 4\n.IX Item \"Ruby\"\nTony Arcieri has written a ruby extension that offers access to a subset\nof the libev \\s-1API\\s0 and adds file handle abstractions, asynchronous \\s-1DNS\\s0 and\nmore on top of it. It can be found via gem servers. Its homepage is at\n<http://rev.rubyforge.org/>.\n.Sp\nRoger Pack reports that using the link order \\f(CW\\*(C`\\-lws2_32 \\-lmsvcrt\\-ruby\\-190\\*(C'\\fR\nmakes rev work even on mingw.\n.IP \"Haskell\" 4\n.IX Item \"Haskell\"\nA haskell binding to libev is available at\n<http://hackage.haskell.org/cgi\\-bin/hackage\\-scripts/package/hlibev>.\n.IP \"D\" 4\n.IX Item \"D\"\nLeandro Lucarella has written a D language binding (\\fIev.d\\fR) for libev, to\nbe found at <http://www.llucax.com.ar/proj/ev.d/index.html>.\n.IP \"Ocaml\" 4\n.IX Item \"Ocaml\"\nErkki Seppala has written Ocaml bindings for libev, to be found at\n<http://modeemi.cs.tut.fi/~flux/software/ocaml\\-ev/>.\n.IP \"Lua\" 4\n.IX Item \"Lua\"\nBrian Maher has written a partial interface to libev for lua (at the\ntime of this writing, only \\f(CW\\*(C`ev_io\\*(C'\\fR and \\f(CW\\*(C`ev_timer\\*(C'\\fR), to be found at\n<http://github.com/brimworks/lua\\-ev>.\n.IP \"Javascript\" 4\n.IX Item \"Javascript\"\nNode.js (<http://nodejs.org>) uses libev as the underlying event library.\n.IP \"Others\" 4\n.IX Item \"Others\"\nThere are others, and I stopped counting.\n.SH \"MACRO MAGIC\"\n.IX Header \"MACRO MAGIC\"\nLibev can be compiled with a variety of options, the most fundamental\nof which is \\f(CW\\*(C`EV_MULTIPLICITY\\*(C'\\fR. This option determines whether (most)\nfunctions and callbacks have an initial \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR argument.\n.PP\nTo make it easier to write programs that cope with either variant, the\nfollowing macros are defined:\n.ie n .IP \"\"\"EV_A\"\", \"\"EV_A_\"\"\" 4\n.el .IP \"\\f(CWEV_A\\fR, \\f(CWEV_A_\\fR\" 4\n.IX Item \"EV_A, EV_A_\"\nThis provides the loop \\fIargument\\fR for functions, if one is required (\\*(L\"ev\nloop argument\\*(R\"). The \\f(CW\\*(C`EV_A\\*(C'\\fR form is used when this is the sole argument,\n\\&\\f(CW\\*(C`EV_A_\\*(C'\\fR is used when other arguments are following. Example:\n.Sp\n.Vb 3\n\\&   ev_unref (EV_A);\n\\&   ev_timer_add (EV_A_ watcher);\n\\&   ev_run (EV_A_ 0);\n.Ve\n.Sp\nIt assumes the variable \\f(CW\\*(C`loop\\*(C'\\fR of type \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR is in scope,\nwhich is often provided by the following macro.\n.ie n .IP \"\"\"EV_P\"\", \"\"EV_P_\"\"\" 4\n.el .IP \"\\f(CWEV_P\\fR, \\f(CWEV_P_\\fR\" 4\n.IX Item \"EV_P, EV_P_\"\nThis provides the loop \\fIparameter\\fR for functions, if one is required (\\*(L\"ev\nloop parameter\\*(R\"). The \\f(CW\\*(C`EV_P\\*(C'\\fR form is used when this is the sole parameter,\n\\&\\f(CW\\*(C`EV_P_\\*(C'\\fR is used when other parameters are following. Example:\n.Sp\n.Vb 2\n\\&   // this is how ev_unref is being declared\n\\&   static void ev_unref (EV_P);\n\\&\n\\&   // this is how you can declare your typical callback\n\\&   static void cb (EV_P_ ev_timer *w, int revents)\n.Ve\n.Sp\nIt declares a parameter \\f(CW\\*(C`loop\\*(C'\\fR of type \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR, quite\nsuitable for use with \\f(CW\\*(C`EV_A\\*(C'\\fR.\n.ie n .IP \"\"\"EV_DEFAULT\"\", \"\"EV_DEFAULT_\"\"\" 4\n.el .IP \"\\f(CWEV_DEFAULT\\fR, \\f(CWEV_DEFAULT_\\fR\" 4\n.IX Item \"EV_DEFAULT, EV_DEFAULT_\"\nSimilar to the other two macros, this gives you the value of the default\nloop, if multiple loops are supported (\\*(L\"ev loop default\\*(R\"). The default loop\nwill be initialised if it isn't already initialised.\n.Sp\nFor non-multiplicity builds, these macros do nothing, so you always have\nto initialise the loop somewhere.\n.ie n .IP \"\"\"EV_DEFAULT_UC\"\", \"\"EV_DEFAULT_UC_\"\"\" 4\n.el .IP \"\\f(CWEV_DEFAULT_UC\\fR, \\f(CWEV_DEFAULT_UC_\\fR\" 4\n.IX Item \"EV_DEFAULT_UC, EV_DEFAULT_UC_\"\nUsage identical to \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR and \\f(CW\\*(C`EV_DEFAULT_\\*(C'\\fR, but requires that the\ndefault loop has been initialised (\\f(CW\\*(C`UC\\*(C'\\fR == unchecked). Their behaviour\nis undefined when the default loop has not been initialised by a previous\nexecution of \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR, \\f(CW\\*(C`EV_DEFAULT_\\*(C'\\fR or \\f(CW\\*(C`ev_default_init (...)\\*(C'\\fR.\n.Sp\nIt is often prudent to use \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR when initialising the first\nwatcher in a function but use \\f(CW\\*(C`EV_DEFAULT_UC\\*(C'\\fR afterwards.\n.PP\nExample: Declare and initialise a check watcher, utilising the above\nmacros so it will work regardless of whether multiple loops are supported\nor not.\n.PP\n.Vb 5\n\\&   static void\n\\&   check_cb (EV_P_ ev_timer *w, int revents)\n\\&   {\n\\&     ev_check_stop (EV_A_ w);\n\\&   }\n\\&\n\\&   ev_check check;\n\\&   ev_check_init (&check, check_cb);\n\\&   ev_check_start (EV_DEFAULT_ &check);\n\\&   ev_run (EV_DEFAULT_ 0);\n.Ve\n.SH \"EMBEDDING\"\n.IX Header \"EMBEDDING\"\nLibev can (and often is) directly embedded into host\napplications. Examples of applications that embed it include the Deliantra\nGame Server, the \\s-1EV\\s0 perl module, the \\s-1GNU\\s0 Virtual Private Ethernet (gvpe)\nand rxvt-unicode.\n.PP\nThe goal is to enable you to just copy the necessary files into your\nsource directory without having to change even a single line in them, so\nyou can easily upgrade by simply copying (or having a checked-out copy of\nlibev somewhere in your source tree).\n.SS \"\\s-1FILESETS\\s0\"\n.IX Subsection \"FILESETS\"\nDepending on what features you need you need to include one or more sets of files\nin your application.\n.PP\n\\fI\\s-1CORE EVENT LOOP\\s0\\fR\n.IX Subsection \"CORE EVENT LOOP\"\n.PP\nTo include only the libev core (all the \\f(CW\\*(C`ev_*\\*(C'\\fR functions), with manual\nconfiguration (no autoconf):\n.PP\n.Vb 2\n\\&   #define EV_STANDALONE 1\n\\&   #include \"ev.c\"\n.Ve\n.PP\nThis will automatically include \\fIev.h\\fR, too, and should be done in a\nsingle C source file only to provide the function implementations. To use\nit, do the same for \\fIev.h\\fR in all files wishing to use this \\s-1API \\s0(best\ndone by writing a wrapper around \\fIev.h\\fR that you can include instead and\nwhere you can put other configuration options):\n.PP\n.Vb 2\n\\&   #define EV_STANDALONE 1\n\\&   #include \"ev.h\"\n.Ve\n.PP\nBoth header files and implementation files can be compiled with a \\*(C+\ncompiler (at least, that's a stated goal, and breakage will be treated\nas a bug).\n.PP\nYou need the following files in your source tree, or in a directory\nin your include path (e.g. in libev/ when using \\-Ilibev):\n.PP\n.Vb 4\n\\&   ev.h\n\\&   ev.c\n\\&   ev_vars.h\n\\&   ev_wrap.h\n\\&\n\\&   ev_win32.c      required on win32 platforms only\n\\&\n\\&   ev_select.c     only when select backend is enabled (which is enabled by default)\n\\&   ev_poll.c       only when poll backend is enabled (disabled by default)\n\\&   ev_epoll.c      only when the epoll backend is enabled (disabled by default)\n\\&   ev_kqueue.c     only when the kqueue backend is enabled (disabled by default)\n\\&   ev_port.c       only when the solaris port backend is enabled (disabled by default)\n.Ve\n.PP\n\\&\\fIev.c\\fR includes the backend files directly when enabled, so you only need\nto compile this single file.\n.PP\n\\fI\\s-1LIBEVENT COMPATIBILITY API\\s0\\fR\n.IX Subsection \"LIBEVENT COMPATIBILITY API\"\n.PP\nTo include the libevent compatibility \\s-1API,\\s0 also include:\n.PP\n.Vb 1\n\\&   #include \"event.c\"\n.Ve\n.PP\nin the file including \\fIev.c\\fR, and:\n.PP\n.Vb 1\n\\&   #include \"event.h\"\n.Ve\n.PP\nin the files that want to use the libevent \\s-1API.\\s0 This also includes \\fIev.h\\fR.\n.PP\nYou need the following additional files for this:\n.PP\n.Vb 2\n\\&   event.h\n\\&   event.c\n.Ve\n.PP\n\\fI\\s-1AUTOCONF SUPPORT\\s0\\fR\n.IX Subsection \"AUTOCONF SUPPORT\"\n.PP\nInstead of using \\f(CW\\*(C`EV_STANDALONE=1\\*(C'\\fR and providing your configuration in\nwhatever way you want, you can also \\f(CW\\*(C`m4_include([libev.m4])\\*(C'\\fR in your\n\\&\\fIconfigure.ac\\fR and leave \\f(CW\\*(C`EV_STANDALONE\\*(C'\\fR undefined. \\fIev.c\\fR will then\ninclude \\fIconfig.h\\fR and configure itself accordingly.\n.PP\nFor this of course you need the m4 file:\n.PP\n.Vb 1\n\\&   libev.m4\n.Ve\n.SS \"\\s-1PREPROCESSOR SYMBOLS/MACROS\\s0\"\n.IX Subsection \"PREPROCESSOR SYMBOLS/MACROS\"\nLibev can be configured via a variety of preprocessor symbols you have to\ndefine before including (or compiling) any of its files. The default in\nthe absence of autoconf is documented for every option.\n.PP\nSymbols marked with \\*(L\"(h)\\*(R\" do not change the \\s-1ABI,\\s0 and can have different\nvalues when compiling libev vs. including \\fIev.h\\fR, so it is permissible\nto redefine them before including \\fIev.h\\fR without breaking compatibility\nto a compiled library. All other symbols change the \\s-1ABI,\\s0 which means all\nusers of libev and the libev code itself must be compiled with compatible\nsettings.\n.IP \"\\s-1EV_COMPAT3 \\s0(h)\" 4\n.IX Item \"EV_COMPAT3 (h)\"\nBackwards compatibility is a major concern for libev. This is why this\nrelease of libev comes with wrappers for the functions and symbols that\nhave been renamed between libev version 3 and 4.\n.Sp\nYou can disable these wrappers (to test compatibility with future\nversions) by defining \\f(CW\\*(C`EV_COMPAT3\\*(C'\\fR to \\f(CW0\\fR when compiling your\nsources. This has the additional advantage that you can drop the \\f(CW\\*(C`struct\\*(C'\\fR\nfrom \\f(CW\\*(C`struct ev_loop\\*(C'\\fR declarations, as libev will provide an \\f(CW\\*(C`ev_loop\\*(C'\\fR\ntypedef in that case.\n.Sp\nIn some future version, the default for \\f(CW\\*(C`EV_COMPAT3\\*(C'\\fR will become \\f(CW0\\fR,\nand in some even more future version the compatibility code will be\nremoved completely.\n.IP \"\\s-1EV_STANDALONE \\s0(h)\" 4\n.IX Item \"EV_STANDALONE (h)\"\nMust always be \\f(CW1\\fR if you do not use autoconf configuration, which\nkeeps libev from including \\fIconfig.h\\fR, and it also defines dummy\nimplementations for some libevent functions (such as logging, which is not\nsupported). It will also not define any of the structs usually found in\n\\&\\fIevent.h\\fR that are not directly supported by the libev core alone.\n.Sp\nIn standalone mode, libev will still try to automatically deduce the\nconfiguration, but has to be more conservative.\n.IP \"\\s-1EV_USE_FLOOR\\s0\" 4\n.IX Item \"EV_USE_FLOOR\"\nIf defined to be \\f(CW1\\fR, libev will use the \\f(CW\\*(C`floor ()\\*(C'\\fR function for its\nperiodic reschedule calculations, otherwise libev will fall back on a\nportable (slower) implementation. If you enable this, you usually have to\nlink against libm or something equivalent. Enabling this when the \\f(CW\\*(C`floor\\*(C'\\fR\nfunction is not available will fail, so the safe default is to not enable\nthis.\n.IP \"\\s-1EV_USE_MONOTONIC\\s0\" 4\n.IX Item \"EV_USE_MONOTONIC\"\nIf defined to be \\f(CW1\\fR, libev will try to detect the availability of the\nmonotonic clock option at both compile time and runtime. Otherwise no\nuse of the monotonic clock option will be attempted. If you enable this,\nyou usually have to link against librt or something similar. Enabling it\nwhen the functionality isn't available is safe, though, although you have\nto make sure you link against any libraries where the \\f(CW\\*(C`clock_gettime\\*(C'\\fR\nfunction is hiding in (often \\fI\\-lrt\\fR). See also \\f(CW\\*(C`EV_USE_CLOCK_SYSCALL\\*(C'\\fR.\n.IP \"\\s-1EV_USE_REALTIME\\s0\" 4\n.IX Item \"EV_USE_REALTIME\"\nIf defined to be \\f(CW1\\fR, libev will try to detect the availability of the\nreal-time clock option at compile time (and assume its availability\nat runtime if successful). Otherwise no use of the real-time clock\noption will be attempted. This effectively replaces \\f(CW\\*(C`gettimeofday\\*(C'\\fR\nby \\f(CW\\*(C`clock_get (CLOCK_REALTIME, ...)\\*(C'\\fR and will not normally affect\ncorrectness. See the note about libraries in the description of\n\\&\\f(CW\\*(C`EV_USE_MONOTONIC\\*(C'\\fR, though. Defaults to the opposite value of\n\\&\\f(CW\\*(C`EV_USE_CLOCK_SYSCALL\\*(C'\\fR.\n.IP \"\\s-1EV_USE_CLOCK_SYSCALL\\s0\" 4\n.IX Item \"EV_USE_CLOCK_SYSCALL\"\nIf defined to be \\f(CW1\\fR, libev will try to use a direct syscall instead\nof calling the system-provided \\f(CW\\*(C`clock_gettime\\*(C'\\fR function. This option\nexists because on GNU/Linux, \\f(CW\\*(C`clock_gettime\\*(C'\\fR is in \\f(CW\\*(C`librt\\*(C'\\fR, but \\f(CW\\*(C`librt\\*(C'\\fR\nunconditionally pulls in \\f(CW\\*(C`libpthread\\*(C'\\fR, slowing down single-threaded\nprograms needlessly. Using a direct syscall is slightly slower (in\ntheory), because no optimised vdso implementation can be used, but avoids\nthe pthread dependency. Defaults to \\f(CW1\\fR on GNU/Linux with glibc 2.x or\nhigher, as it simplifies linking (no need for \\f(CW\\*(C`\\-lrt\\*(C'\\fR).\n.IP \"\\s-1EV_USE_NANOSLEEP\\s0\" 4\n.IX Item \"EV_USE_NANOSLEEP\"\nIf defined to be \\f(CW1\\fR, libev will assume that \\f(CW\\*(C`nanosleep ()\\*(C'\\fR is available\nand will use it for delays. Otherwise it will use \\f(CW\\*(C`select ()\\*(C'\\fR.\n.IP \"\\s-1EV_USE_EVENTFD\\s0\" 4\n.IX Item \"EV_USE_EVENTFD\"\nIf defined to be \\f(CW1\\fR, then libev will assume that \\f(CW\\*(C`eventfd ()\\*(C'\\fR is\navailable and will probe for kernel support at runtime. This will improve\n\\&\\f(CW\\*(C`ev_signal\\*(C'\\fR and \\f(CW\\*(C`ev_async\\*(C'\\fR performance and reduce resource consumption.\nIf undefined, it will be enabled if the headers indicate GNU/Linux + Glibc\n2.7 or newer, otherwise disabled.\n.IP \"\\s-1EV_USE_SELECT\\s0\" 4\n.IX Item \"EV_USE_SELECT\"\nIf undefined or defined to be \\f(CW1\\fR, libev will compile in support for the\n\\&\\f(CW\\*(C`select\\*(C'\\fR(2) backend. No attempt at auto-detection will be done: if no\nother method takes over, select will be it. Otherwise the select backend\nwill not be compiled in.\n.IP \"\\s-1EV_SELECT_USE_FD_SET\\s0\" 4\n.IX Item \"EV_SELECT_USE_FD_SET\"\nIf defined to \\f(CW1\\fR, then the select backend will use the system \\f(CW\\*(C`fd_set\\*(C'\\fR\nstructure. This is useful if libev doesn't compile due to a missing\n\\&\\f(CW\\*(C`NFDBITS\\*(C'\\fR or \\f(CW\\*(C`fd_mask\\*(C'\\fR definition or it mis-guesses the bitset layout\non exotic systems. This usually limits the range of file descriptors to\nsome low limit such as 1024 or might have other limitations (winsocket\nonly allows 64 sockets). The \\f(CW\\*(C`FD_SETSIZE\\*(C'\\fR macro, set before compilation,\nconfigures the maximum size of the \\f(CW\\*(C`fd_set\\*(C'\\fR.\n.IP \"\\s-1EV_SELECT_IS_WINSOCKET\\s0\" 4\n.IX Item \"EV_SELECT_IS_WINSOCKET\"\nWhen defined to \\f(CW1\\fR, the select backend will assume that\nselect/socket/connect etc. don't understand file descriptors but\nwants osf handles on win32 (this is the case when the select to\nbe used is the winsock select). This means that it will call\n\\&\\f(CW\\*(C`_get_osfhandle\\*(C'\\fR on the fd to convert it to an \\s-1OS\\s0 handle. Otherwise,\nit is assumed that all these functions actually work on fds, even\non win32. Should not be defined on non\\-win32 platforms.\n.IP \"\\s-1EV_FD_TO_WIN32_HANDLE\\s0(fd)\" 4\n.IX Item \"EV_FD_TO_WIN32_HANDLE(fd)\"\nIf \\f(CW\\*(C`EV_SELECT_IS_WINSOCKET\\*(C'\\fR is enabled, then libev needs a way to map\nfile descriptors to socket handles. When not defining this symbol (the\ndefault), then libev will call \\f(CW\\*(C`_get_osfhandle\\*(C'\\fR, which is usually\ncorrect. In some cases, programs use their own file descriptor management,\nin which case they can provide this function to map fds to socket handles.\n.IP \"\\s-1EV_WIN32_HANDLE_TO_FD\\s0(handle)\" 4\n.IX Item \"EV_WIN32_HANDLE_TO_FD(handle)\"\nIf \\f(CW\\*(C`EV_SELECT_IS_WINSOCKET\\*(C'\\fR then libev maps handles to file descriptors\nusing the standard \\f(CW\\*(C`_open_osfhandle\\*(C'\\fR function. For programs implementing\ntheir own fd to handle mapping, overwriting this function makes it easier\nto do so. This can be done by defining this macro to an appropriate value.\n.IP \"\\s-1EV_WIN32_CLOSE_FD\\s0(fd)\" 4\n.IX Item \"EV_WIN32_CLOSE_FD(fd)\"\nIf programs implement their own fd to handle mapping on win32, then this\nmacro can be used to override the \\f(CW\\*(C`close\\*(C'\\fR function, useful to unregister\nfile descriptors again. Note that the replacement function has to close\nthe underlying \\s-1OS\\s0 handle.\n.IP \"\\s-1EV_USE_WSASOCKET\\s0\" 4\n.IX Item \"EV_USE_WSASOCKET\"\nIf defined to be \\f(CW1\\fR, libev will use \\f(CW\\*(C`WSASocket\\*(C'\\fR to create its internal\ncommunication socket, which works better in some environments. Otherwise,\nthe normal \\f(CW\\*(C`socket\\*(C'\\fR function will be used, which works better in other\nenvironments.\n.IP \"\\s-1EV_USE_POLL\\s0\" 4\n.IX Item \"EV_USE_POLL\"\nIf defined to be \\f(CW1\\fR, libev will compile in support for the \\f(CW\\*(C`poll\\*(C'\\fR(2)\nbackend. Otherwise it will be enabled on non\\-win32 platforms. It\ntakes precedence over select.\n.IP \"\\s-1EV_USE_EPOLL\\s0\" 4\n.IX Item \"EV_USE_EPOLL\"\nIf defined to be \\f(CW1\\fR, libev will compile in support for the Linux\n\\&\\f(CW\\*(C`epoll\\*(C'\\fR(7) backend. Its availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for GNU/Linux systems. If undefined, it will be enabled if the\nheaders indicate GNU/Linux + Glibc 2.4 or newer, otherwise disabled.\n.IP \"\\s-1EV_USE_KQUEUE\\s0\" 4\n.IX Item \"EV_USE_KQUEUE\"\nIf defined to be \\f(CW1\\fR, libev will compile in support for the \\s-1BSD\\s0 style\n\\&\\f(CW\\*(C`kqueue\\*(C'\\fR(2) backend. Its actual availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for \\s-1BSD\\s0 and BSD-like systems, although on most BSDs kqueue only\nsupports some types of fds correctly (the only platform we found that\nsupports ptys for example was NetBSD), so kqueue might be compiled in, but\nnot be used unless explicitly requested. The best way to use it is to find\nout whether kqueue supports your type of fd properly and use an embedded\nkqueue loop.\n.IP \"\\s-1EV_USE_PORT\\s0\" 4\n.IX Item \"EV_USE_PORT\"\nIf defined to be \\f(CW1\\fR, libev will compile in support for the Solaris\n10 port style backend. Its availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for Solaris 10 systems.\n.IP \"\\s-1EV_USE_DEVPOLL\\s0\" 4\n.IX Item \"EV_USE_DEVPOLL\"\nReserved for future expansion, works like the \\s-1USE\\s0 symbols above.\n.IP \"\\s-1EV_USE_INOTIFY\\s0\" 4\n.IX Item \"EV_USE_INOTIFY\"\nIf defined to be \\f(CW1\\fR, libev will compile in support for the Linux inotify\ninterface to speed up \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers. Its actual availability will\nbe detected at runtime. If undefined, it will be enabled if the headers\nindicate GNU/Linux + Glibc 2.4 or newer, otherwise disabled.\n.IP \"\\s-1EV_NO_SMP\\s0\" 4\n.IX Item \"EV_NO_SMP\"\nIf defined to be \\f(CW1\\fR, libev will assume that memory is always coherent\nbetween threads, that is, threads can be used, but threads never run on\ndifferent cpus (or different cpu cores). This reduces dependencies\nand makes libev faster.\n.IP \"\\s-1EV_NO_THREADS\\s0\" 4\n.IX Item \"EV_NO_THREADS\"\nIf defined to be \\f(CW1\\fR, libev will assume that it will never be called from\ndifferent threads (that includes signal handlers), which is a stronger\nassumption than \\f(CW\\*(C`EV_NO_SMP\\*(C'\\fR, above. This reduces dependencies and makes\nlibev faster.\n.IP \"\\s-1EV_ATOMIC_T\\s0\" 4\n.IX Item \"EV_ATOMIC_T\"\nLibev requires an integer type (suitable for storing \\f(CW0\\fR or \\f(CW1\\fR) whose\naccess is atomic with respect to other threads or signal contexts. No\nsuch type is easily found in the C language, so you can provide your own\ntype that you know is safe for your purposes. It is used both for signal\nhandler \\*(L\"locking\\*(R\" as well as for signal and thread safety in \\f(CW\\*(C`ev_async\\*(C'\\fR\nwatchers.\n.Sp\nIn the absence of this define, libev will use \\f(CW\\*(C`sig_atomic_t volatile\\*(C'\\fR\n(from \\fIsignal.h\\fR), which is usually good enough on most platforms.\n.IP \"\\s-1EV_H \\s0(h)\" 4\n.IX Item \"EV_H (h)\"\nThe name of the \\fIev.h\\fR header file used to include it. The default if\nundefined is \\f(CW\"ev.h\"\\fR in \\fIevent.h\\fR, \\fIev.c\\fR and \\fIev++.h\\fR. This can be\nused to virtually rename the \\fIev.h\\fR header file in case of conflicts.\n.IP \"\\s-1EV_CONFIG_H \\s0(h)\" 4\n.IX Item \"EV_CONFIG_H (h)\"\nIf \\f(CW\\*(C`EV_STANDALONE\\*(C'\\fR isn't \\f(CW1\\fR, this variable can be used to override\n\\&\\fIev.c\\fR's idea of where to find the \\fIconfig.h\\fR file, similarly to\n\\&\\f(CW\\*(C`EV_H\\*(C'\\fR, above.\n.IP \"\\s-1EV_EVENT_H \\s0(h)\" 4\n.IX Item \"EV_EVENT_H (h)\"\nSimilarly to \\f(CW\\*(C`EV_H\\*(C'\\fR, this macro can be used to override \\fIevent.c\\fR's idea\nof how the \\fIevent.h\\fR header can be found, the default is \\f(CW\"event.h\"\\fR.\n.IP \"\\s-1EV_PROTOTYPES \\s0(h)\" 4\n.IX Item \"EV_PROTOTYPES (h)\"\nIf defined to be \\f(CW0\\fR, then \\fIev.h\\fR will not define any function\nprototypes, but still define all the structs and other symbols. This is\noccasionally useful if you want to provide your own wrapper functions\naround libev functions.\n.IP \"\\s-1EV_MULTIPLICITY\\s0\" 4\n.IX Item \"EV_MULTIPLICITY\"\nIf undefined or defined to \\f(CW1\\fR, then all event-loop-specific functions\nwill have the \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR as first argument, and you can create\nadditional independent event loops. Otherwise there will be no support\nfor multiple event loops and there is no first event loop pointer\nargument. Instead, all functions act on the single default loop.\n.Sp\nNote that \\f(CW\\*(C`EV_DEFAULT\\*(C'\\fR and \\f(CW\\*(C`EV_DEFAULT_\\*(C'\\fR will no longer provide a\ndefault loop when multiplicity is switched off \\- you always have to\ninitialise the loop manually in this case.\n.IP \"\\s-1EV_MINPRI\\s0\" 4\n.IX Item \"EV_MINPRI\"\n.PD 0\n.IP \"\\s-1EV_MAXPRI\\s0\" 4\n.IX Item \"EV_MAXPRI\"\n.PD\nThe range of allowed priorities. \\f(CW\\*(C`EV_MINPRI\\*(C'\\fR must be smaller or equal to\n\\&\\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR, but otherwise there are no non-obvious limitations. You can\nprovide for more priorities by overriding those symbols (usually defined\nto be \\f(CW\\*(C`\\-2\\*(C'\\fR and \\f(CW2\\fR, respectively).\n.Sp\nWhen doing priority-based operations, libev usually has to linearly search\nall the priorities, so having many of them (hundreds) uses a lot of space\nand time, so using the defaults of five priorities (\\-2 .. +2) is usually\nfine.\n.Sp\nIf your embedding application does not need any priorities, defining these\nboth to \\f(CW0\\fR will save some memory and \\s-1CPU.\\s0\n.IP \"\\s-1EV_PERIODIC_ENABLE, EV_IDLE_ENABLE, EV_EMBED_ENABLE, EV_STAT_ENABLE, EV_PREPARE_ENABLE, EV_CHECK_ENABLE, EV_FORK_ENABLE, EV_SIGNAL_ENABLE, EV_ASYNC_ENABLE, EV_CHILD_ENABLE.\\s0\" 4\n.IX Item \"EV_PERIODIC_ENABLE, EV_IDLE_ENABLE, EV_EMBED_ENABLE, EV_STAT_ENABLE, EV_PREPARE_ENABLE, EV_CHECK_ENABLE, EV_FORK_ENABLE, EV_SIGNAL_ENABLE, EV_ASYNC_ENABLE, EV_CHILD_ENABLE.\"\nIf undefined or defined to be \\f(CW1\\fR (and the platform supports it), then\nthe respective watcher type is supported. If defined to be \\f(CW0\\fR, then it\nis not. Disabling watcher types mainly saves code size.\n.IP \"\\s-1EV_FEATURES\\s0\" 4\n.IX Item \"EV_FEATURES\"\nIf you need to shave off some kilobytes of code at the expense of some\nspeed (but with the full \\s-1API\\s0), you can define this symbol to request\ncertain subsets of functionality. The default is to enable all features\nthat can be enabled on the platform.\n.Sp\nA typical way to use this symbol is to define it to \\f(CW0\\fR (or to a bitset\nwith some broad features you want) and then selectively re-enable\nadditional parts you want, for example if you want everything minimal,\nbut multiple event loop support, async and child watchers and the poll\nbackend, use this:\n.Sp\n.Vb 5\n\\&   #define EV_FEATURES 0\n\\&   #define EV_MULTIPLICITY 1\n\\&   #define EV_USE_POLL 1\n\\&   #define EV_CHILD_ENABLE 1\n\\&   #define EV_ASYNC_ENABLE 1\n.Ve\n.Sp\nThe actual value is a bitset, it can be a combination of the following\nvalues (by default, all of these are enabled):\n.RS 4\n.ie n .IP \"1 \\- faster/larger code\" 4\n.el .IP \"\\f(CW1\\fR \\- faster/larger code\" 4\n.IX Item \"1 - faster/larger code\"\nUse larger code to speed up some operations.\n.Sp\nCurrently this is used to override some inlining decisions (enlarging the\ncode size by roughly 30% on amd64).\n.Sp\nWhen optimising for size, use of compiler flags such as \\f(CW\\*(C`\\-Os\\*(C'\\fR with\ngcc is recommended, as well as \\f(CW\\*(C`\\-DNDEBUG\\*(C'\\fR, as libev contains a number of\nassertions.\n.Sp\nThe default is off when \\f(CW\\*(C`_\\|_OPTIMIZE_SIZE_\\|_\\*(C'\\fR is defined by your compiler\n(e.g. gcc with \\f(CW\\*(C`\\-Os\\*(C'\\fR).\n.ie n .IP \"2 \\- faster/larger data structures\" 4\n.el .IP \"\\f(CW2\\fR \\- faster/larger data structures\" 4\n.IX Item \"2 - faster/larger data structures\"\nReplaces the small 2\\-heap for timer management by a faster 4\\-heap, larger\nhash table sizes and so on. This will usually further increase code size\nand can additionally have an effect on the size of data structures at\nruntime.\n.Sp\nThe default is off when \\f(CW\\*(C`_\\|_OPTIMIZE_SIZE_\\|_\\*(C'\\fR is defined by your compiler\n(e.g. gcc with \\f(CW\\*(C`\\-Os\\*(C'\\fR).\n.ie n .IP \"4 \\- full \\s-1API\\s0 configuration\" 4\n.el .IP \"\\f(CW4\\fR \\- full \\s-1API\\s0 configuration\" 4\n.IX Item \"4 - full API configuration\"\nThis enables priorities (sets \\f(CW\\*(C`EV_MAXPRI\\*(C'\\fR=2 and \\f(CW\\*(C`EV_MINPRI\\*(C'\\fR=\\-2), and\nenables multiplicity (\\f(CW\\*(C`EV_MULTIPLICITY\\*(C'\\fR=1).\n.ie n .IP \"8 \\- full \\s-1API\\s0\" 4\n.el .IP \"\\f(CW8\\fR \\- full \\s-1API\\s0\" 4\n.IX Item \"8 - full API\"\nThis enables a lot of the \\*(L\"lesser used\\*(R\" \\s-1API\\s0 functions. See \\f(CW\\*(C`ev.h\\*(C'\\fR for\ndetails on which parts of the \\s-1API\\s0 are still available without this\nfeature, and do not complain if this subset changes over time.\n.ie n .IP \"16 \\- enable all optional watcher types\" 4\n.el .IP \"\\f(CW16\\fR \\- enable all optional watcher types\" 4\n.IX Item \"16 - enable all optional watcher types\"\nEnables all optional watcher types.  If you want to selectively enable\nonly some watcher types other than I/O and timers (e.g. prepare,\nembed, async, child...) you can enable them manually by defining\n\\&\\f(CW\\*(C`EV_watchertype_ENABLE\\*(C'\\fR to \\f(CW1\\fR instead.\n.ie n .IP \"32 \\- enable all backends\" 4\n.el .IP \"\\f(CW32\\fR \\- enable all backends\" 4\n.IX Item \"32 - enable all backends\"\nThis enables all backends \\- without this feature, you need to enable at\nleast one backend manually (\\f(CW\\*(C`EV_USE_SELECT\\*(C'\\fR is a good choice).\n.ie n .IP \"64 \\- enable OS-specific \"\"helper\"\" APIs\" 4\n.el .IP \"\\f(CW64\\fR \\- enable OS-specific ``helper'' APIs\" 4\n.IX Item \"64 - enable OS-specific helper APIs\"\nEnable inotify, eventfd, signalfd and similar OS-specific helper APIs by\ndefault.\n.RE\n.RS 4\n.Sp\nCompiling with \\f(CW\\*(C`gcc \\-Os \\-DEV_STANDALONE \\-DEV_USE_EPOLL=1 \\-DEV_FEATURES=0\\*(C'\\fR\nreduces the compiled size of libev from 24.7Kb code/2.8Kb data to 6.5Kb\ncode/0.3Kb data on my GNU/Linux amd64 system, while still giving you I/O\nwatchers, timers and monotonic clock support.\n.Sp\nWith an intelligent-enough linker (gcc+binutils are intelligent enough\nwhen you use \\f(CW\\*(C`\\-Wl,\\-\\-gc\\-sections \\-ffunction\\-sections\\*(C'\\fR) functions unused by\nyour program might be left out as well \\- a binary starting a timer and an\nI/O watcher then might come out at only 5Kb.\n.RE\n.IP \"\\s-1EV_API_STATIC\\s0\" 4\n.IX Item \"EV_API_STATIC\"\nIf this symbol is defined (by default it is not), then all identifiers\nwill have static linkage. This means that libev will not export any\nidentifiers, and you cannot link against libev anymore. This can be useful\nwhen you embed libev, only want to use libev functions in a single file,\nand do not want its identifiers to be visible.\n.Sp\nTo use this, define \\f(CW\\*(C`EV_API_STATIC\\*(C'\\fR and include \\fIev.c\\fR in the file that\nwants to use libev.\n.Sp\nThis option only works when libev is compiled with a C compiler, as \\*(C+\ndoesn't support the required declaration syntax.\n.IP \"\\s-1EV_AVOID_STDIO\\s0\" 4\n.IX Item \"EV_AVOID_STDIO\"\nIf this is set to \\f(CW1\\fR at compiletime, then libev will avoid using stdio\nfunctions (printf, scanf, perror etc.). This will increase the code size\nsomewhat, but if your program doesn't otherwise depend on stdio and your\nlibc allows it, this avoids linking in the stdio library which is quite\nbig.\n.Sp\nNote that error messages might become less precise when this option is\nenabled.\n.IP \"\\s-1EV_NSIG\\s0\" 4\n.IX Item \"EV_NSIG\"\nThe highest supported signal number, +1 (or, the number of\nsignals): Normally, libev tries to deduce the maximum number of signals\nautomatically, but sometimes this fails, in which case it can be\nspecified. Also, using a lower number than detected (\\f(CW32\\fR should be\ngood for about any system in existence) can save some memory, as libev\nstatically allocates some 12\\-24 bytes per signal number.\n.IP \"\\s-1EV_PID_HASHSIZE\\s0\" 4\n.IX Item \"EV_PID_HASHSIZE\"\n\\&\\f(CW\\*(C`ev_child\\*(C'\\fR watchers use a small hash table to distribute workload by\npid. The default size is \\f(CW16\\fR (or \\f(CW1\\fR with \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR disabled),\nusually more than enough. If you need to manage thousands of children you\nmight want to increase this value (\\fImust\\fR be a power of two).\n.IP \"\\s-1EV_INOTIFY_HASHSIZE\\s0\" 4\n.IX Item \"EV_INOTIFY_HASHSIZE\"\n\\&\\f(CW\\*(C`ev_stat\\*(C'\\fR watchers use a small hash table to distribute workload by\ninotify watch id. The default size is \\f(CW16\\fR (or \\f(CW1\\fR with \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR\ndisabled), usually more than enough. If you need to manage thousands of\n\\&\\f(CW\\*(C`ev_stat\\*(C'\\fR watchers you might want to increase this value (\\fImust\\fR be a\npower of two).\n.IP \"\\s-1EV_USE_4HEAP\\s0\" 4\n.IX Item \"EV_USE_4HEAP\"\nHeaps are not very cache-efficient. To improve the cache-efficiency of the\ntimer and periodics heaps, libev uses a 4\\-heap when this symbol is defined\nto \\f(CW1\\fR. The 4\\-heap uses more complicated (longer) code but has noticeably\nfaster performance with many (thousands) of watchers.\n.Sp\nThe default is \\f(CW1\\fR, unless \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR overrides it, in which case it\nwill be \\f(CW0\\fR.\n.IP \"\\s-1EV_HEAP_CACHE_AT\\s0\" 4\n.IX Item \"EV_HEAP_CACHE_AT\"\nHeaps are not very cache-efficient. To improve the cache-efficiency of the\ntimer and periodics heaps, libev can cache the timestamp (\\fIat\\fR) within\nthe heap structure (selected by defining \\f(CW\\*(C`EV_HEAP_CACHE_AT\\*(C'\\fR to \\f(CW1\\fR),\nwhich uses 8\\-12 bytes more per watcher and a few hundred bytes more code,\nbut avoids random read accesses on heap changes. This improves performance\nnoticeably with many (hundreds) of watchers.\n.Sp\nThe default is \\f(CW1\\fR, unless \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR overrides it, in which case it\nwill be \\f(CW0\\fR.\n.IP \"\\s-1EV_VERIFY\\s0\" 4\n.IX Item \"EV_VERIFY\"\nControls how much internal verification (see \\f(CW\\*(C`ev_verify ()\\*(C'\\fR) will\nbe done: If set to \\f(CW0\\fR, no internal verification code will be compiled\nin. If set to \\f(CW1\\fR, then verification code will be compiled in, but not\ncalled. If set to \\f(CW2\\fR, then the internal verification code will be\ncalled once per loop, which can slow down libev. If set to \\f(CW3\\fR, then the\nverification code will be called very frequently, which will slow down\nlibev considerably.\n.Sp\nThe default is \\f(CW1\\fR, unless \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR overrides it, in which case it\nwill be \\f(CW0\\fR.\n.IP \"\\s-1EV_COMMON\\s0\" 4\n.IX Item \"EV_COMMON\"\nBy default, all watchers have a \\f(CW\\*(C`void *data\\*(C'\\fR member. By redefining\nthis macro to something else you can include more and other types of\nmembers. You have to define it each time you include one of the files,\nthough, and it must be identical each time.\n.Sp\nFor example, the perl \\s-1EV\\s0 module uses something like this:\n.Sp\n.Vb 3\n\\&   #define EV_COMMON                       \\e\n\\&     SV *self; /* contains this struct */  \\e\n\\&     SV *cb_sv, *fh /* note no trailing \";\" */\n.Ve\n.IP \"\\s-1EV_CB_DECLARE \\s0(type)\" 4\n.IX Item \"EV_CB_DECLARE (type)\"\n.PD 0\n.IP \"\\s-1EV_CB_INVOKE \\s0(watcher, revents)\" 4\n.IX Item \"EV_CB_INVOKE (watcher, revents)\"\n.IP \"ev_set_cb (ev, cb)\" 4\n.IX Item \"ev_set_cb (ev, cb)\"\n.PD\nCan be used to change the callback member declaration in each watcher,\nand the way callbacks are invoked and set. Must expand to a struct member\ndefinition and a statement, respectively. See the \\fIev.h\\fR header file for\ntheir default definitions. One possible use for overriding these is to\navoid the \\f(CW\\*(C`struct ev_loop *\\*(C'\\fR as first argument in all cases, or to use\nmethod calls instead of plain function calls in \\*(C+.\n.SS \"\\s-1EXPORTED API SYMBOLS\\s0\"\n.IX Subsection \"EXPORTED API SYMBOLS\"\nIf you need to re-export the \\s-1API \\s0(e.g. via a \\s-1DLL\\s0) and you need a list of\nexported symbols, you can use the provided \\fISymbol.*\\fR files which list\nall public symbols, one per line:\n.PP\n.Vb 2\n\\&   Symbols.ev      for libev proper\n\\&   Symbols.event   for the libevent emulation\n.Ve\n.PP\nThis can also be used to rename all public symbols to avoid clashes with\nmultiple versions of libev linked together (which is obviously bad in\nitself, but sometimes it is inconvenient to avoid this).\n.PP\nA sed command like this will create wrapper \\f(CW\\*(C`#define\\*(C'\\fR's that you need to\ninclude before including \\fIev.h\\fR:\n.PP\n.Vb 1\n\\&   <Symbols.ev sed \\-e \"s/.*/#define & myprefix_&/\" >wrap.h\n.Ve\n.PP\nThis would create a file \\fIwrap.h\\fR which essentially looks like this:\n.PP\n.Vb 4\n\\&   #define ev_backend     myprefix_ev_backend\n\\&   #define ev_check_start myprefix_ev_check_start\n\\&   #define ev_check_stop  myprefix_ev_check_stop\n\\&   ...\n.Ve\n.SS \"\\s-1EXAMPLES\\s0\"\n.IX Subsection \"EXAMPLES\"\nFor a real-world example of a program the includes libev\nverbatim, you can have a look at the \\s-1EV\\s0 perl module\n(<http://software.schmorp.de/pkg/EV.html>). It has the libev files in\nthe \\fIlibev/\\fR subdirectory and includes them in the \\fI\\s-1EV/EVAPI\\s0.h\\fR (public\ninterface) and \\fI\\s-1EV\\s0.xs\\fR (implementation) files. Only the \\fI\\s-1EV\\s0.xs\\fR file\nwill be compiled. It is pretty complex because it provides its own header\nfile.\n.PP\nThe usage in rxvt-unicode is simpler. It has a \\fIev_cpp.h\\fR header file\nthat everybody includes and which overrides some configure choices:\n.PP\n.Vb 8\n\\&   #define EV_FEATURES 8\n\\&   #define EV_USE_SELECT 1\n\\&   #define EV_PREPARE_ENABLE 1\n\\&   #define EV_IDLE_ENABLE 1\n\\&   #define EV_SIGNAL_ENABLE 1\n\\&   #define EV_CHILD_ENABLE 1\n\\&   #define EV_USE_STDEXCEPT 0\n\\&   #define EV_CONFIG_H <config.h>\n\\&\n\\&   #include \"ev++.h\"\n.Ve\n.PP\nAnd a \\fIev_cpp.C\\fR implementation file that contains libev proper and is compiled:\n.PP\n.Vb 2\n\\&   #include \"ev_cpp.h\"\n\\&   #include \"ev.c\"\n.Ve\n.SH \"INTERACTION WITH OTHER PROGRAMS, LIBRARIES OR THE ENVIRONMENT\"\n.IX Header \"INTERACTION WITH OTHER PROGRAMS, LIBRARIES OR THE ENVIRONMENT\"\n.SS \"\\s-1THREADS AND COROUTINES\\s0\"\n.IX Subsection \"THREADS AND COROUTINES\"\n\\fI\\s-1THREADS\\s0\\fR\n.IX Subsection \"THREADS\"\n.PP\nAll libev functions are reentrant and thread-safe unless explicitly\ndocumented otherwise, but libev implements no locking itself. This means\nthat you can use as many loops as you want in parallel, as long as there\nare no concurrent calls into any libev function with the same loop\nparameter (\\f(CW\\*(C`ev_default_*\\*(C'\\fR calls have an implicit default loop parameter,\nof course): libev guarantees that different event loops share no data\nstructures that need any locking.\n.PP\nOr to put it differently: calls with different loop parameters can be done\nconcurrently from multiple threads, calls with the same loop parameter\nmust be done serially (but can be done from different threads, as long as\nonly one thread ever is inside a call at any point in time, e.g. by using\na mutex per loop).\n.PP\nSpecifically to support threads (and signal handlers), libev implements\nso-called \\f(CW\\*(C`ev_async\\*(C'\\fR watchers, which allow some limited form of\nconcurrency on the same event loop, namely waking it up \\*(L\"from the\noutside\\*(R\".\n.PP\nIf you want to know which design (one loop, locking, or multiple loops\nwithout or something else still) is best for your problem, then I cannot\nhelp you, but here is some generic advice:\n.IP \"\\(bu\" 4\nmost applications have a main thread: use the default libev loop\nin that thread, or create a separate thread running only the default loop.\n.Sp\nThis helps integrating other libraries or software modules that use libev\nthemselves and don't care/know about threading.\n.IP \"\\(bu\" 4\none loop per thread is usually a good model.\n.Sp\nDoing this is almost never wrong, sometimes a better-performance model\nexists, but it is always a good start.\n.IP \"\\(bu\" 4\nother models exist, such as the leader/follower pattern, where one\nloop is handed through multiple threads in a kind of round-robin fashion.\n.Sp\nChoosing a model is hard \\- look around, learn, know that usually you can do\nbetter than you currently do :\\-)\n.IP \"\\(bu\" 4\noften you need to talk to some other thread which blocks in the\nevent loop.\n.Sp\n\\&\\f(CW\\*(C`ev_async\\*(C'\\fR watchers can be used to wake them up from other threads safely\n(or from signal contexts...).\n.Sp\nAn example use would be to communicate signals or other events that only\nwork in the default loop by registering the signal watcher with the\ndefault loop and triggering an \\f(CW\\*(C`ev_async\\*(C'\\fR watcher from the default loop\nwatcher callback into the event loop interested in the signal.\n.PP\nSee also \\*(L\"\\s-1THREAD LOCKING EXAMPLE\\*(R\"\\s0.\n.PP\n\\fI\\s-1COROUTINES\\s0\\fR\n.IX Subsection \"COROUTINES\"\n.PP\nLibev is very accommodating to coroutines (\\*(L\"cooperative threads\\*(R\"):\nlibev fully supports nesting calls to its functions from different\ncoroutines (e.g. you can call \\f(CW\\*(C`ev_run\\*(C'\\fR on the same loop from two\ndifferent coroutines, and switch freely between both coroutines running\nthe loop, as long as you don't confuse yourself). The only exception is\nthat you must not do this from \\f(CW\\*(C`ev_periodic\\*(C'\\fR reschedule callbacks.\n.PP\nCare has been taken to ensure that libev does not keep local state inside\n\\&\\f(CW\\*(C`ev_run\\*(C'\\fR, and other calls do not usually allow for coroutine switches as\nthey do not call any callbacks.\n.SS \"\\s-1COMPILER WARNINGS\\s0\"\n.IX Subsection \"COMPILER WARNINGS\"\nDepending on your compiler and compiler settings, you might get no or a\nlot of warnings when compiling libev code. Some people are apparently\nscared by this.\n.PP\nHowever, these are unavoidable for many reasons. For one, each compiler\nhas different warnings, and each user has different tastes regarding\nwarning options. \\*(L\"Warn-free\\*(R\" code therefore cannot be a goal except when\ntargeting a specific compiler and compiler-version.\n.PP\nAnother reason is that some compiler warnings require elaborate\nworkarounds, or other changes to the code that make it less clear and less\nmaintainable.\n.PP\nAnd of course, some compiler warnings are just plain stupid, or simply\nwrong (because they don't actually warn about the condition their message\nseems to warn about). For example, certain older gcc versions had some\nwarnings that resulted in an extreme number of false positives. These have\nbeen fixed, but some people still insist on making code warn-free with\nsuch buggy versions.\n.PP\nWhile libev is written to generate as few warnings as possible,\n\\&\\*(L\"warn-free\\*(R\" code is not a goal, and it is recommended not to build libev\nwith any compiler warnings enabled unless you are prepared to cope with\nthem (e.g. by ignoring them). Remember that warnings are just that:\nwarnings, not errors, or proof of bugs.\n.SS \"\\s-1VALGRIND\\s0\"\n.IX Subsection \"VALGRIND\"\nValgrind has a special section here because it is a popular tool that is\nhighly useful. Unfortunately, valgrind reports are very hard to interpret.\n.PP\nIf you think you found a bug (memory leak, uninitialised data access etc.)\nin libev, then check twice: If valgrind reports something like:\n.PP\n.Vb 3\n\\&   ==2274==    definitely lost: 0 bytes in 0 blocks.\n\\&   ==2274==      possibly lost: 0 bytes in 0 blocks.\n\\&   ==2274==    still reachable: 256 bytes in 1 blocks.\n.Ve\n.PP\nThen there is no memory leak, just as memory accounted to global variables\nis not a memleak \\- the memory is still being referenced, and didn't leak.\n.PP\nSimilarly, under some circumstances, valgrind might report kernel bugs\nas if it were a bug in libev (e.g. in realloc or in the poll backend,\nalthough an acceptable workaround has been found here), or it might be\nconfused.\n.PP\nKeep in mind that valgrind is a very good tool, but only a tool. Don't\nmake it into some kind of religion.\n.PP\nIf you are unsure about something, feel free to contact the mailing list\nwith the full valgrind report and an explanation on why you think this\nis a bug in libev (best check the archives, too :). However, don't be\nannoyed when you get a brisk \\*(L\"this is no bug\\*(R\" answer and take the chance\nof learning how to interpret valgrind properly.\n.PP\nIf you need, for some reason, empty reports from valgrind for your project\nI suggest using suppression lists.\n.SH \"PORTABILITY NOTES\"\n.IX Header \"PORTABILITY NOTES\"\n.SS \"\\s-1GNU/LINUX 32 BIT LIMITATIONS\\s0\"\n.IX Subsection \"GNU/LINUX 32 BIT LIMITATIONS\"\nGNU/Linux is the only common platform that supports 64 bit file/large file\ninterfaces but \\fIdisables\\fR them by default.\n.PP\nThat means that libev compiled in the default environment doesn't support\nfiles larger than 2GiB or so, which mainly affects \\f(CW\\*(C`ev_stat\\*(C'\\fR watchers.\n.PP\nUnfortunately, many programs try to work around this GNU/Linux issue\nby enabling the large file \\s-1API,\\s0 which makes them incompatible with the\nstandard libev compiled for their system.\n.PP\nLikewise, libev cannot enable the large file \\s-1API\\s0 itself as this would\nsuddenly make it incompatible to the default compile time environment,\ni.e. all programs not using special compile switches.\n.SS \"\\s-1OS/X AND DARWIN BUGS\\s0\"\n.IX Subsection \"OS/X AND DARWIN BUGS\"\nThe whole thing is a bug if you ask me \\- basically any system interface\nyou touch is broken, whether it is locales, poll, kqueue or even the\nOpenGL drivers.\n.PP\n\\fI\\f(CI\\*(C`kqueue\\*(C'\\fI is buggy\\fR\n.IX Subsection \"kqueue is buggy\"\n.PP\nThe kqueue syscall is broken in all known versions \\- most versions support\nonly sockets, many support pipes.\n.PP\nLibev tries to work around this by not using \\f(CW\\*(C`kqueue\\*(C'\\fR by default on this\nrotten platform, but of course you can still ask for it when creating a\nloop \\- embedding a socket-only kqueue loop into a select-based one is\nprobably going to work well.\n.PP\n\\fI\\f(CI\\*(C`poll\\*(C'\\fI is buggy\\fR\n.IX Subsection \"poll is buggy\"\n.PP\nInstead of fixing \\f(CW\\*(C`kqueue\\*(C'\\fR, Apple replaced their (working) \\f(CW\\*(C`poll\\*(C'\\fR\nimplementation by something calling \\f(CW\\*(C`kqueue\\*(C'\\fR internally around the 10.5.6\nrelease, so now \\f(CW\\*(C`kqueue\\*(C'\\fR \\fIand\\fR \\f(CW\\*(C`poll\\*(C'\\fR are broken.\n.PP\nLibev tries to work around this by not using \\f(CW\\*(C`poll\\*(C'\\fR by default on\nthis rotten platform, but of course you can still ask for it when creating\na loop.\n.PP\n\\fI\\f(CI\\*(C`select\\*(C'\\fI is buggy\\fR\n.IX Subsection \"select is buggy\"\n.PP\nAll that's left is \\f(CW\\*(C`select\\*(C'\\fR, and of course Apple found a way to fuck this\none up as well: On \\s-1OS/X, \\s0\\f(CW\\*(C`select\\*(C'\\fR actively limits the number of file\ndescriptors you can pass in to 1024 \\- your program suddenly crashes when\nyou use more.\n.PP\nThere is an undocumented \\*(L\"workaround\\*(R\" for this \\- defining\n\\&\\f(CW\\*(C`_DARWIN_UNLIMITED_SELECT\\*(C'\\fR, which libev tries to use, so select \\fIshould\\fR\nwork on \\s-1OS/X.\\s0\n.SS \"\\s-1SOLARIS PROBLEMS AND WORKAROUNDS\\s0\"\n.IX Subsection \"SOLARIS PROBLEMS AND WORKAROUNDS\"\n\\fI\\f(CI\\*(C`errno\\*(C'\\fI reentrancy\\fR\n.IX Subsection \"errno reentrancy\"\n.PP\nThe default compile environment on Solaris is unfortunately so\nthread-unsafe that you can't even use components/libraries compiled\nwithout \\f(CW\\*(C`\\-D_REENTRANT\\*(C'\\fR in a threaded program, which, of course, isn't\ndefined by default. A valid, if stupid, implementation choice.\n.PP\nIf you want to use libev in threaded environments you have to make sure\nit's compiled with \\f(CW\\*(C`_REENTRANT\\*(C'\\fR defined.\n.PP\n\\fIEvent port backend\\fR\n.IX Subsection \"Event port backend\"\n.PP\nThe scalable event interface for Solaris is called \\*(L\"event\nports\\*(R\". Unfortunately, this mechanism is very buggy in all major\nreleases. If you run into high \\s-1CPU\\s0 usage, your program freezes or you get\na large number of spurious wakeups, make sure you have all the relevant\nand latest kernel patches applied. No, I don't know which ones, but there\nare multiple ones to apply, and afterwards, event ports actually work\ngreat.\n.PP\nIf you can't get it to work, you can try running the program by setting\nthe environment variable \\f(CW\\*(C`LIBEV_FLAGS=3\\*(C'\\fR to only allow \\f(CW\\*(C`poll\\*(C'\\fR and\n\\&\\f(CW\\*(C`select\\*(C'\\fR backends.\n.SS \"\\s-1AIX POLL BUG\\s0\"\n.IX Subsection \"AIX POLL BUG\"\n\\&\\s-1AIX\\s0 unfortunately has a broken \\f(CW\\*(C`poll.h\\*(C'\\fR header. Libev works around\nthis by trying to avoid the poll backend altogether (i.e. it's not even\ncompiled in), which normally isn't a big problem as \\f(CW\\*(C`select\\*(C'\\fR works fine\nwith large bitsets on \\s-1AIX,\\s0 and \\s-1AIX\\s0 is dead anyway.\n.SS \"\\s-1WIN32 PLATFORM LIMITATIONS AND WORKAROUNDS\\s0\"\n.IX Subsection \"WIN32 PLATFORM LIMITATIONS AND WORKAROUNDS\"\n\\fIGeneral issues\\fR\n.IX Subsection \"General issues\"\n.PP\nWin32 doesn't support any of the standards (e.g. \\s-1POSIX\\s0) that libev\nrequires, and its I/O model is fundamentally incompatible with the \\s-1POSIX\\s0\nmodel. Libev still offers limited functionality on this platform in\nthe form of the \\f(CW\\*(C`EVBACKEND_SELECT\\*(C'\\fR backend, and only supports socket\ndescriptors. This only applies when using Win32 natively, not when using\ne.g. cygwin. Actually, it only applies to the microsofts own compilers,\nas every compiler comes with a slightly differently broken/incompatible\nenvironment.\n.PP\nLifting these limitations would basically require the full\nre-implementation of the I/O system. If you are into this kind of thing,\nthen note that glib does exactly that for you in a very portable way (note\nalso that glib is the slowest event library known to man).\n.PP\nThere is no supported compilation method available on windows except\nembedding it into other applications.\n.PP\nSensible signal handling is officially unsupported by Microsoft \\- libev\ntries its best, but under most conditions, signals will simply not work.\n.PP\nNot a libev limitation but worth mentioning: windows apparently doesn't\naccept large writes: instead of resulting in a partial write, windows will\neither accept everything or return \\f(CW\\*(C`ENOBUFS\\*(C'\\fR if the buffer is too large,\nso make sure you only write small amounts into your sockets (less than a\nmegabyte seems safe, but this apparently depends on the amount of memory\navailable).\n.PP\nDue to the many, low, and arbitrary limits on the win32 platform and\nthe abysmal performance of winsockets, using a large number of sockets\nis not recommended (and not reasonable). If your program needs to use\nmore than a hundred or so sockets, then likely it needs to use a totally\ndifferent implementation for windows, as libev offers the \\s-1POSIX\\s0 readiness\nnotification model, which cannot be implemented efficiently on windows\n(due to Microsoft monopoly games).\n.PP\nA typical way to use libev under windows is to embed it (see the embedding\nsection for details) and use the following \\fIevwrap.h\\fR header file instead\nof \\fIev.h\\fR:\n.PP\n.Vb 2\n\\&   #define EV_STANDALONE              /* keeps ev from requiring config.h */\n\\&   #define EV_SELECT_IS_WINSOCKET 1   /* configure libev for windows select */\n\\&\n\\&   #include \"ev.h\"\n.Ve\n.PP\nAnd compile the following \\fIevwrap.c\\fR file into your project (make sure\nyou do \\fInot\\fR compile the \\fIev.c\\fR or any other embedded source files!):\n.PP\n.Vb 2\n\\&   #include \"evwrap.h\"\n\\&   #include \"ev.c\"\n.Ve\n.PP\n\\fIThe winsocket \\f(CI\\*(C`select\\*(C'\\fI function\\fR\n.IX Subsection \"The winsocket select function\"\n.PP\nThe winsocket \\f(CW\\*(C`select\\*(C'\\fR function doesn't follow \\s-1POSIX\\s0 in that it\nrequires socket \\fIhandles\\fR and not socket \\fIfile descriptors\\fR (it is\nalso extremely buggy). This makes select very inefficient, and also\nrequires a mapping from file descriptors to socket handles (the Microsoft\nC runtime provides the function \\f(CW\\*(C`_open_osfhandle\\*(C'\\fR for this). See the\ndiscussion of the \\f(CW\\*(C`EV_SELECT_USE_FD_SET\\*(C'\\fR, \\f(CW\\*(C`EV_SELECT_IS_WINSOCKET\\*(C'\\fR and\n\\&\\f(CW\\*(C`EV_FD_TO_WIN32_HANDLE\\*(C'\\fR preprocessor symbols for more info.\n.PP\nThe configuration for a \\*(L\"naked\\*(R\" win32 using the Microsoft runtime\nlibraries and raw winsocket select is:\n.PP\n.Vb 2\n\\&   #define EV_USE_SELECT 1\n\\&   #define EV_SELECT_IS_WINSOCKET 1   /* forces EV_SELECT_USE_FD_SET, too */\n.Ve\n.PP\nNote that winsockets handling of fd sets is O(n), so you can easily get a\ncomplexity in the O(nX) range when using win32.\n.PP\n\\fILimited number of file descriptors\\fR\n.IX Subsection \"Limited number of file descriptors\"\n.PP\nWindows has numerous arbitrary (and low) limits on things.\n.PP\nEarly versions of winsocket's select only supported waiting for a maximum\nof \\f(CW64\\fR handles (probably owning to the fact that all windows kernels\ncan only wait for \\f(CW64\\fR things at the same time internally; Microsoft\nrecommends spawning a chain of threads and wait for 63 handles and the\nprevious thread in each. Sounds great!).\n.PP\nNewer versions support more handles, but you need to define \\f(CW\\*(C`FD_SETSIZE\\*(C'\\fR\nto some high number (e.g. \\f(CW2048\\fR) before compiling the winsocket select\ncall (which might be in libev or elsewhere, for example, perl and many\nother interpreters do their own select emulation on windows).\n.PP\nAnother limit is the number of file descriptors in the Microsoft runtime\nlibraries, which by default is \\f(CW64\\fR (there must be a hidden \\fI64\\fR\nfetish or something like this inside Microsoft). You can increase this\nby calling \\f(CW\\*(C`_setmaxstdio\\*(C'\\fR, which can increase this limit to \\f(CW2048\\fR\n(another arbitrary limit), but is broken in many versions of the Microsoft\nruntime libraries. This might get you to about \\f(CW512\\fR or \\f(CW2048\\fR sockets\n(depending on windows version and/or the phase of the moon). To get more,\nyou need to wrap all I/O functions and provide your own fd management, but\nthe cost of calling select (O(nX)) will likely make this unworkable.\n.SS \"\\s-1PORTABILITY REQUIREMENTS\\s0\"\n.IX Subsection \"PORTABILITY REQUIREMENTS\"\nIn addition to a working ISO-C implementation and of course the\nbackend-specific APIs, libev relies on a few additional extensions:\n.ie n .IP \"\"\"void (*)(ev_watcher_type *, int revents)\"\" must have compatible calling conventions regardless of \"\"ev_watcher_type *\"\".\" 4\n.el .IP \"\\f(CWvoid (*)(ev_watcher_type *, int revents)\\fR must have compatible calling conventions regardless of \\f(CWev_watcher_type *\\fR.\" 4\n.IX Item \"void (*)(ev_watcher_type *, int revents) must have compatible calling conventions regardless of ev_watcher_type *.\"\nLibev assumes not only that all watcher pointers have the same internal\nstructure (guaranteed by \\s-1POSIX\\s0 but not by \\s-1ISO C\\s0 for example), but it also\nassumes that the same (machine) code can be used to call any watcher\ncallback: The watcher callbacks have different type signatures, but libev\ncalls them using an \\f(CW\\*(C`ev_watcher *\\*(C'\\fR internally.\n.IP \"pointer accesses must be thread-atomic\" 4\n.IX Item \"pointer accesses must be thread-atomic\"\nAccessing a pointer value must be atomic, it must both be readable and\nwritable in one piece \\- this is the case on all current architectures.\n.ie n .IP \"\"\"sig_atomic_t volatile\"\" must be thread-atomic as well\" 4\n.el .IP \"\\f(CWsig_atomic_t volatile\\fR must be thread-atomic as well\" 4\n.IX Item \"sig_atomic_t volatile must be thread-atomic as well\"\nThe type \\f(CW\\*(C`sig_atomic_t volatile\\*(C'\\fR (or whatever is defined as\n\\&\\f(CW\\*(C`EV_ATOMIC_T\\*(C'\\fR) must be atomic with respect to accesses from different\nthreads. This is not part of the specification for \\f(CW\\*(C`sig_atomic_t\\*(C'\\fR, but is\nbelieved to be sufficiently portable.\n.ie n .IP \"\"\"sigprocmask\"\" must work in a threaded environment\" 4\n.el .IP \"\\f(CWsigprocmask\\fR must work in a threaded environment\" 4\n.IX Item \"sigprocmask must work in a threaded environment\"\nLibev uses \\f(CW\\*(C`sigprocmask\\*(C'\\fR to temporarily block signals. This is not\nallowed in a threaded program (\\f(CW\\*(C`pthread_sigmask\\*(C'\\fR has to be used). Typical\npthread implementations will either allow \\f(CW\\*(C`sigprocmask\\*(C'\\fR in the \\*(L\"main\nthread\\*(R\" or will block signals process-wide, both behaviours would\nbe compatible with libev. Interaction between \\f(CW\\*(C`sigprocmask\\*(C'\\fR and\n\\&\\f(CW\\*(C`pthread_sigmask\\*(C'\\fR could complicate things, however.\n.Sp\nThe most portable way to handle signals is to block signals in all threads\nexcept the initial one, and run the signal handling loop in the initial\nthread as well.\n.ie n .IP \"\"\"long\"\" must be large enough for common memory allocation sizes\" 4\n.el .IP \"\\f(CWlong\\fR must be large enough for common memory allocation sizes\" 4\n.IX Item \"long must be large enough for common memory allocation sizes\"\nTo improve portability and simplify its \\s-1API,\\s0 libev uses \\f(CW\\*(C`long\\*(C'\\fR internally\ninstead of \\f(CW\\*(C`size_t\\*(C'\\fR when allocating its data structures. On non-POSIX\nsystems (Microsoft...) this might be unexpectedly low, but is still at\nleast 31 bits everywhere, which is enough for hundreds of millions of\nwatchers.\n.ie n .IP \"\"\"double\"\" must hold a time value in seconds with enough accuracy\" 4\n.el .IP \"\\f(CWdouble\\fR must hold a time value in seconds with enough accuracy\" 4\n.IX Item \"double must hold a time value in seconds with enough accuracy\"\nThe type \\f(CW\\*(C`double\\*(C'\\fR is used to represent timestamps. It is required to\nhave at least 51 bits of mantissa (and 9 bits of exponent), which is\ngood enough for at least into the year 4000 with millisecond accuracy\n(the design goal for libev). This requirement is overfulfilled by\nimplementations using \\s-1IEEE 754,\\s0 which is basically all existing ones.\n.Sp\nWith \\s-1IEEE 754\\s0 doubles, you get microsecond accuracy until at least the\nyear 2255 (and millisecond accuracy till the year 287396 \\- by then, libev\nis either obsolete or somebody patched it to use \\f(CW\\*(C`long double\\*(C'\\fR or\nsomething like that, just kidding).\n.PP\nIf you know of other additional requirements drop me a note.\n.SH \"ALGORITHMIC COMPLEXITIES\"\n.IX Header \"ALGORITHMIC COMPLEXITIES\"\nIn this section the complexities of (many of) the algorithms used inside\nlibev will be documented. For complexity discussions about backends see\nthe documentation for \\f(CW\\*(C`ev_default_init\\*(C'\\fR.\n.PP\nAll of the following are about amortised time: If an array needs to be\nextended, libev needs to realloc and move the whole array, but this\nhappens asymptotically rarer with higher number of elements, so O(1) might\nmean that libev does a lengthy realloc operation in rare cases, but on\naverage it is much faster and asymptotically approaches constant time.\n.IP \"Starting and stopping timer/periodic watchers: O(log skipped_other_timers)\" 4\n.IX Item \"Starting and stopping timer/periodic watchers: O(log skipped_other_timers)\"\nThis means that, when you have a watcher that triggers in one hour and\nthere are 100 watchers that would trigger before that, then inserting will\nhave to skip roughly seven (\\f(CW\\*(C`ld 100\\*(C'\\fR) of these watchers.\n.IP \"Changing timer/periodic watchers (by autorepeat or calling again): O(log skipped_other_timers)\" 4\n.IX Item \"Changing timer/periodic watchers (by autorepeat or calling again): O(log skipped_other_timers)\"\nThat means that changing a timer costs less than removing/adding them,\nas only the relative motion in the event queue has to be paid for.\n.IP \"Starting io/check/prepare/idle/signal/child/fork/async watchers: O(1)\" 4\n.IX Item \"Starting io/check/prepare/idle/signal/child/fork/async watchers: O(1)\"\nThese just add the watcher into an array or at the head of a list.\n.IP \"Stopping check/prepare/idle/fork/async watchers: O(1)\" 4\n.IX Item \"Stopping check/prepare/idle/fork/async watchers: O(1)\"\n.PD 0\n.IP \"Stopping an io/signal/child watcher: O(number_of_watchers_for_this_(fd/signal/pid % \\s-1EV_PID_HASHSIZE\\s0))\" 4\n.IX Item \"Stopping an io/signal/child watcher: O(number_of_watchers_for_this_(fd/signal/pid % EV_PID_HASHSIZE))\"\n.PD\nThese watchers are stored in lists, so they need to be walked to find the\ncorrect watcher to remove. The lists are usually short (you don't usually\nhave many watchers waiting for the same fd or signal: one is typical, two\nis rare).\n.IP \"Finding the next timer in each loop iteration: O(1)\" 4\n.IX Item \"Finding the next timer in each loop iteration: O(1)\"\nBy virtue of using a binary or 4\\-heap, the next timer is always found at a\nfixed position in the storage array.\n.IP \"Each change on a file descriptor per loop iteration: O(number_of_watchers_for_this_fd)\" 4\n.IX Item \"Each change on a file descriptor per loop iteration: O(number_of_watchers_for_this_fd)\"\nA change means an I/O watcher gets started or stopped, which requires\nlibev to recalculate its status (and possibly tell the kernel, depending\non backend and whether \\f(CW\\*(C`ev_io_set\\*(C'\\fR was used).\n.IP \"Activating one watcher (putting it into the pending state): O(1)\" 4\n.IX Item \"Activating one watcher (putting it into the pending state): O(1)\"\n.PD 0\n.IP \"Priority handling: O(number_of_priorities)\" 4\n.IX Item \"Priority handling: O(number_of_priorities)\"\n.PD\nPriorities are implemented by allocating some space for each\npriority. When doing priority-based operations, libev usually has to\nlinearly search all the priorities, but starting/stopping and activating\nwatchers becomes O(1) with respect to priority handling.\n.IP \"Sending an ev_async: O(1)\" 4\n.IX Item \"Sending an ev_async: O(1)\"\n.PD 0\n.IP \"Processing ev_async_send: O(number_of_async_watchers)\" 4\n.IX Item \"Processing ev_async_send: O(number_of_async_watchers)\"\n.IP \"Processing signals: O(max_signal_number)\" 4\n.IX Item \"Processing signals: O(max_signal_number)\"\n.PD\nSending involves a system call \\fIiff\\fR there were no other \\f(CW\\*(C`ev_async_send\\*(C'\\fR\ncalls in the current loop iteration and the loop is currently\nblocked. Checking for async and signal events involves iterating over all\nrunning async watchers or all signal numbers.\n.SH \"PORTING FROM LIBEV 3.X TO 4.X\"\n.IX Header \"PORTING FROM LIBEV 3.X TO 4.X\"\nThe major version 4 introduced some incompatible changes to the \\s-1API.\\s0\n.PP\nAt the moment, the \\f(CW\\*(C`ev.h\\*(C'\\fR header file provides compatibility definitions\nfor all changes, so most programs should still compile. The compatibility\nlayer might be removed in later versions of libev, so better update to the\nnew \\s-1API\\s0 early than late.\n.ie n .IP \"\"\"EV_COMPAT3\"\" backwards compatibility mechanism\" 4\n.el .IP \"\\f(CWEV_COMPAT3\\fR backwards compatibility mechanism\" 4\n.IX Item \"EV_COMPAT3 backwards compatibility mechanism\"\nThe backward compatibility mechanism can be controlled by\n\\&\\f(CW\\*(C`EV_COMPAT3\\*(C'\\fR. See \\*(L\"\\s-1PREPROCESSOR SYMBOLS/MACROS\\*(R\"\\s0 in the \\*(L\"\\s-1EMBEDDING\\*(R\"\\s0\nsection.\n.ie n .IP \"\"\"ev_default_destroy\"\" and \"\"ev_default_fork\"\" have been removed\" 4\n.el .IP \"\\f(CWev_default_destroy\\fR and \\f(CWev_default_fork\\fR have been removed\" 4\n.IX Item \"ev_default_destroy and ev_default_fork have been removed\"\nThese calls can be replaced easily by their \\f(CW\\*(C`ev_loop_xxx\\*(C'\\fR counterparts:\n.Sp\n.Vb 2\n\\&   ev_loop_destroy (EV_DEFAULT_UC);\n\\&   ev_loop_fork (EV_DEFAULT);\n.Ve\n.IP \"function/symbol renames\" 4\n.IX Item \"function/symbol renames\"\nA number of functions and symbols have been renamed:\n.Sp\n.Vb 3\n\\&  ev_loop         => ev_run\n\\&  EVLOOP_NONBLOCK => EVRUN_NOWAIT\n\\&  EVLOOP_ONESHOT  => EVRUN_ONCE\n\\&\n\\&  ev_unloop       => ev_break\n\\&  EVUNLOOP_CANCEL => EVBREAK_CANCEL\n\\&  EVUNLOOP_ONE    => EVBREAK_ONE\n\\&  EVUNLOOP_ALL    => EVBREAK_ALL\n\\&\n\\&  EV_TIMEOUT      => EV_TIMER\n\\&\n\\&  ev_loop_count   => ev_iteration\n\\&  ev_loop_depth   => ev_depth\n\\&  ev_loop_verify  => ev_verify\n.Ve\n.Sp\nMost functions working on \\f(CW\\*(C`struct ev_loop\\*(C'\\fR objects don't have an\n\\&\\f(CW\\*(C`ev_loop_\\*(C'\\fR prefix, so it was removed; \\f(CW\\*(C`ev_loop\\*(C'\\fR, \\f(CW\\*(C`ev_unloop\\*(C'\\fR and\nassociated constants have been renamed to not collide with the \\f(CW\\*(C`struct\nev_loop\\*(C'\\fR anymore and \\f(CW\\*(C`EV_TIMER\\*(C'\\fR now follows the same naming scheme\nas all other watcher types. Note that \\f(CW\\*(C`ev_loop_fork\\*(C'\\fR is still called\n\\&\\f(CW\\*(C`ev_loop_fork\\*(C'\\fR because it would otherwise clash with the \\f(CW\\*(C`ev_fork\\*(C'\\fR\ntypedef.\n.ie n .IP \"\"\"EV_MINIMAL\"\" mechanism replaced by \"\"EV_FEATURES\"\"\" 4\n.el .IP \"\\f(CWEV_MINIMAL\\fR mechanism replaced by \\f(CWEV_FEATURES\\fR\" 4\n.IX Item \"EV_MINIMAL mechanism replaced by EV_FEATURES\"\nThe preprocessor symbol \\f(CW\\*(C`EV_MINIMAL\\*(C'\\fR has been replaced by a different\nmechanism, \\f(CW\\*(C`EV_FEATURES\\*(C'\\fR. Programs using \\f(CW\\*(C`EV_MINIMAL\\*(C'\\fR usually compile\nand work, but the library code will of course be larger.\n.SH \"GLOSSARY\"\n.IX Header \"GLOSSARY\"\n.IP \"active\" 4\n.IX Item \"active\"\nA watcher is active as long as it has been started and not yet stopped.\nSee \\*(L\"\\s-1WATCHER STATES\\*(R\"\\s0 for details.\n.IP \"application\" 4\n.IX Item \"application\"\nIn this document, an application is whatever is using libev.\n.IP \"backend\" 4\n.IX Item \"backend\"\nThe part of the code dealing with the operating system interfaces.\n.IP \"callback\" 4\n.IX Item \"callback\"\nThe address of a function that is called when some event has been\ndetected. Callbacks are being passed the event loop, the watcher that\nreceived the event, and the actual event bitset.\n.IP \"callback/watcher invocation\" 4\n.IX Item \"callback/watcher invocation\"\nThe act of calling the callback associated with a watcher.\n.IP \"event\" 4\n.IX Item \"event\"\nA change of state of some external event, such as data now being available\nfor reading on a file descriptor, time having passed or simply not having\nany other events happening anymore.\n.Sp\nIn libev, events are represented as single bits (such as \\f(CW\\*(C`EV_READ\\*(C'\\fR or\n\\&\\f(CW\\*(C`EV_TIMER\\*(C'\\fR).\n.IP \"event library\" 4\n.IX Item \"event library\"\nA software package implementing an event model and loop.\n.IP \"event loop\" 4\n.IX Item \"event loop\"\nAn entity that handles and processes external events and converts them\ninto callback invocations.\n.IP \"event model\" 4\n.IX Item \"event model\"\nThe model used to describe how an event loop handles and processes\nwatchers and events.\n.IP \"pending\" 4\n.IX Item \"pending\"\nA watcher is pending as soon as the corresponding event has been\ndetected. See \\*(L\"\\s-1WATCHER STATES\\*(R\"\\s0 for details.\n.IP \"real time\" 4\n.IX Item \"real time\"\nThe physical time that is observed. It is apparently strictly monotonic :)\n.IP \"wall-clock time\" 4\n.IX Item \"wall-clock time\"\nThe time and date as shown on clocks. Unlike real time, it can actually\nbe wrong and jump forwards and backwards, e.g. when you adjust your\nclock.\n.IP \"watcher\" 4\n.IX Item \"watcher\"\nA data structure that describes interest in certain events. Watchers need\nto be started (attached to an event loop) before they can receive events.\n.SH \"AUTHOR\"\n.IX Header \"AUTHOR\"\nMarc Lehmann <libev@schmorp.de>, with repeated corrections by Mikael\nMagnusson and Emanuele Giaquinta, and minor corrections by many others.\n"
        },
        {
          "name": "ev.c",
          "type": "blob",
          "size": 126.4462890625,
          "content": "/*\n * libev event processing core, watcher management\n *\n * Copyright (c) 2007,2008,2009,2010,2011,2012,2013 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n/* this big block deduces configuration from config.h */\n#ifndef EV_STANDALONE\n# ifdef EV_CONFIG_H\n#  include EV_CONFIG_H\n# else\n#  include \"config.h\"\n# endif\n\n# if HAVE_FLOOR\n#  ifndef EV_USE_FLOOR\n#   define EV_USE_FLOOR 1\n#  endif\n# endif\n\n# if HAVE_CLOCK_SYSCALL\n#  ifndef EV_USE_CLOCK_SYSCALL\n#   define EV_USE_CLOCK_SYSCALL 1\n#   ifndef EV_USE_REALTIME\n#    define EV_USE_REALTIME  0\n#   endif\n#   ifndef EV_USE_MONOTONIC\n#    define EV_USE_MONOTONIC 1\n#   endif\n#  endif\n# elif !defined EV_USE_CLOCK_SYSCALL\n#  define EV_USE_CLOCK_SYSCALL 0\n# endif\n\n# if HAVE_CLOCK_GETTIME\n#  ifndef EV_USE_MONOTONIC\n#   define EV_USE_MONOTONIC 1\n#  endif\n#  ifndef EV_USE_REALTIME\n#   define EV_USE_REALTIME  0\n#  endif\n# else\n#  ifndef EV_USE_MONOTONIC\n#   define EV_USE_MONOTONIC 0\n#  endif\n#  ifndef EV_USE_REALTIME\n#   define EV_USE_REALTIME  0\n#  endif\n# endif\n\n# if HAVE_NANOSLEEP\n#  ifndef EV_USE_NANOSLEEP\n#    define EV_USE_NANOSLEEP EV_FEATURE_OS\n#  endif\n# else\n#   undef EV_USE_NANOSLEEP\n#   define EV_USE_NANOSLEEP 0\n# endif\n\n# if HAVE_SELECT && HAVE_SYS_SELECT_H\n#  ifndef EV_USE_SELECT\n#   define EV_USE_SELECT EV_FEATURE_BACKENDS\n#  endif\n# else\n#  undef EV_USE_SELECT\n#  define EV_USE_SELECT 0\n# endif\n\n# if HAVE_POLL && HAVE_POLL_H\n#  ifndef EV_USE_POLL\n#   define EV_USE_POLL EV_FEATURE_BACKENDS\n#  endif\n# else\n#  undef EV_USE_POLL\n#  define EV_USE_POLL 0\n# endif\n   \n# if HAVE_EPOLL_CTL && HAVE_SYS_EPOLL_H\n#  ifndef EV_USE_EPOLL\n#   define EV_USE_EPOLL EV_FEATURE_BACKENDS\n#  endif\n# else\n#  undef EV_USE_EPOLL\n#  define EV_USE_EPOLL 0\n# endif\n   \n# if HAVE_KQUEUE && HAVE_SYS_EVENT_H\n#  ifndef EV_USE_KQUEUE\n#   define EV_USE_KQUEUE EV_FEATURE_BACKENDS\n#  endif\n# else\n#  undef EV_USE_KQUEUE\n#  define EV_USE_KQUEUE 0\n# endif\n   \n# if HAVE_PORT_H && HAVE_PORT_CREATE\n#  ifndef EV_USE_PORT\n#   define EV_USE_PORT EV_FEATURE_BACKENDS\n#  endif\n# else\n#  undef EV_USE_PORT\n#  define EV_USE_PORT 0\n# endif\n\n# if HAVE_INOTIFY_INIT && HAVE_SYS_INOTIFY_H\n#  ifndef EV_USE_INOTIFY\n#   define EV_USE_INOTIFY EV_FEATURE_OS\n#  endif\n# else\n#  undef EV_USE_INOTIFY\n#  define EV_USE_INOTIFY 0\n# endif\n\n# if HAVE_SIGNALFD && HAVE_SYS_SIGNALFD_H\n#  ifndef EV_USE_SIGNALFD\n#   define EV_USE_SIGNALFD EV_FEATURE_OS\n#  endif\n# else\n#  undef EV_USE_SIGNALFD\n#  define EV_USE_SIGNALFD 0\n# endif\n\n# if HAVE_EVENTFD\n#  ifndef EV_USE_EVENTFD\n#   define EV_USE_EVENTFD EV_FEATURE_OS\n#  endif\n# else\n#  undef EV_USE_EVENTFD\n#  define EV_USE_EVENTFD 0\n# endif\n \n#endif\n\n#include <stdlib.h>\n#include <string.h>\n#include <fcntl.h>\n#include <stddef.h>\n\n#include <stdio.h>\n\n#include <assert.h>\n#include <errno.h>\n#include <sys/types.h>\n#include <time.h>\n#include <limits.h>\n\n#include <signal.h>\n\n#ifdef EV_H\n# include EV_H\n#else\n# include \"ev.h\"\n#endif\n\n#if EV_NO_THREADS\n# undef EV_NO_SMP\n# define EV_NO_SMP 1\n# undef ECB_NO_THREADS\n# define ECB_NO_THREADS 1\n#endif\n#if EV_NO_SMP\n# undef EV_NO_SMP\n# define ECB_NO_SMP 1\n#endif\n\n#ifndef _WIN32\n# include <sys/time.h>\n# include <sys/wait.h>\n# include <unistd.h>\n#else\n# include <io.h>\n# define WIN32_LEAN_AND_MEAN\n# include <winsock2.h>\n# include <windows.h>\n# ifndef EV_SELECT_IS_WINSOCKET\n#  define EV_SELECT_IS_WINSOCKET 1\n# endif\n# undef EV_AVOID_STDIO\n#endif\n\n/* OS X, in its infinite idiocy, actually HARDCODES\n * a limit of 1024 into their select. Where people have brains,\n * OS X engineers apparently have a vacuum. Or maybe they were\n * ordered to have a vacuum, or they do anything for money.\n * This might help. Or not.\n */\n#define _DARWIN_UNLIMITED_SELECT 1\n\n/* this block tries to deduce configuration from header-defined symbols and defaults */\n\n/* try to deduce the maximum number of signals on this platform */\n#if defined EV_NSIG\n/* use what's provided */\n#elif defined NSIG\n# define EV_NSIG (NSIG)\n#elif defined _NSIG\n# define EV_NSIG (_NSIG)\n#elif defined SIGMAX\n# define EV_NSIG (SIGMAX+1)\n#elif defined SIG_MAX\n# define EV_NSIG (SIG_MAX+1)\n#elif defined _SIG_MAX\n# define EV_NSIG (_SIG_MAX+1)\n#elif defined MAXSIG\n# define EV_NSIG (MAXSIG+1)\n#elif defined MAX_SIG\n# define EV_NSIG (MAX_SIG+1)\n#elif defined SIGARRAYSIZE\n# define EV_NSIG (SIGARRAYSIZE) /* Assume ary[SIGARRAYSIZE] */\n#elif defined _sys_nsig\n# define EV_NSIG (_sys_nsig) /* Solaris 2.5 */\n#else\n# define EV_NSIG (8 * sizeof (sigset_t) + 1)\n#endif\n\n#ifndef EV_USE_FLOOR\n# define EV_USE_FLOOR 0\n#endif\n\n#ifndef EV_USE_CLOCK_SYSCALL\n# if __linux && __GLIBC__ == 2 && __GLIBC_MINOR__ < 17\n#  define EV_USE_CLOCK_SYSCALL EV_FEATURE_OS\n# else\n#  define EV_USE_CLOCK_SYSCALL 0\n# endif\n#endif\n\n#if !(_POSIX_TIMERS > 0)\n# ifndef EV_USE_MONOTONIC\n#  define EV_USE_MONOTONIC 0\n# endif\n# ifndef EV_USE_REALTIME\n#  define EV_USE_REALTIME 0\n# endif\n#endif\n\n#ifndef EV_USE_MONOTONIC\n# if defined _POSIX_MONOTONIC_CLOCK && _POSIX_MONOTONIC_CLOCK >= 0\n#  define EV_USE_MONOTONIC EV_FEATURE_OS\n# else\n#  define EV_USE_MONOTONIC 0\n# endif\n#endif\n\n#ifndef EV_USE_REALTIME\n# define EV_USE_REALTIME !EV_USE_CLOCK_SYSCALL\n#endif\n\n#ifndef EV_USE_NANOSLEEP\n# if _POSIX_C_SOURCE >= 199309L\n#  define EV_USE_NANOSLEEP EV_FEATURE_OS\n# else\n#  define EV_USE_NANOSLEEP 0\n# endif\n#endif\n\n#ifndef EV_USE_SELECT\n# define EV_USE_SELECT EV_FEATURE_BACKENDS\n#endif\n\n#ifndef EV_USE_POLL\n# ifdef _WIN32\n#  define EV_USE_POLL 0\n# else\n#  define EV_USE_POLL EV_FEATURE_BACKENDS\n# endif\n#endif\n\n#ifndef EV_USE_EPOLL\n# if __linux && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 4))\n#  define EV_USE_EPOLL EV_FEATURE_BACKENDS\n# else\n#  define EV_USE_EPOLL 0\n# endif\n#endif\n\n#ifndef EV_USE_KQUEUE\n# define EV_USE_KQUEUE 0\n#endif\n\n#ifndef EV_USE_PORT\n# define EV_USE_PORT 0\n#endif\n\n#ifndef EV_USE_INOTIFY\n# if __linux && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 4))\n#  define EV_USE_INOTIFY EV_FEATURE_OS\n# else\n#  define EV_USE_INOTIFY 0\n# endif\n#endif\n\n#ifndef EV_PID_HASHSIZE\n# define EV_PID_HASHSIZE EV_FEATURE_DATA ? 16 : 1\n#endif\n\n#ifndef EV_INOTIFY_HASHSIZE\n# define EV_INOTIFY_HASHSIZE EV_FEATURE_DATA ? 16 : 1\n#endif\n\n#ifndef EV_USE_EVENTFD\n# if __linux && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 7))\n#  define EV_USE_EVENTFD EV_FEATURE_OS\n# else\n#  define EV_USE_EVENTFD 0\n# endif\n#endif\n\n#ifndef EV_USE_SIGNALFD\n# if __linux && (__GLIBC__ > 2 || (__GLIBC__ == 2 && __GLIBC_MINOR__ >= 7))\n#  define EV_USE_SIGNALFD EV_FEATURE_OS\n# else\n#  define EV_USE_SIGNALFD 0\n# endif\n#endif\n\n#if 0 /* debugging */\n# define EV_VERIFY 3\n# define EV_USE_4HEAP 1\n# define EV_HEAP_CACHE_AT 1\n#endif\n\n#ifndef EV_VERIFY\n# define EV_VERIFY (EV_FEATURE_API ? 1 : 0)\n#endif\n\n#ifndef EV_USE_4HEAP\n# define EV_USE_4HEAP EV_FEATURE_DATA\n#endif\n\n#ifndef EV_HEAP_CACHE_AT\n# define EV_HEAP_CACHE_AT EV_FEATURE_DATA\n#endif\n\n#ifdef ANDROID\n/* supposedly, android doesn't typedef fd_mask */\n# undef EV_USE_SELECT\n# define EV_USE_SELECT 0\n/* supposedly, we need to include syscall.h, not sys/syscall.h, so just disable */\n# undef EV_USE_CLOCK_SYSCALL\n# define EV_USE_CLOCK_SYSCALL 0\n#endif\n\n/* aix's poll.h seems to cause lots of trouble */\n#ifdef _AIX\n/* AIX has a completely broken poll.h header */\n# undef EV_USE_POLL\n# define EV_USE_POLL 0\n#endif\n\n/* on linux, we can use a (slow) syscall to avoid a dependency on pthread, */\n/* which makes programs even slower. might work on other unices, too. */\n#if EV_USE_CLOCK_SYSCALL\n# include <sys/syscall.h>\n# ifdef SYS_clock_gettime\n#  define clock_gettime(id, ts) syscall (SYS_clock_gettime, (id), (ts))\n#  undef EV_USE_MONOTONIC\n#  define EV_USE_MONOTONIC 1\n# else\n#  undef EV_USE_CLOCK_SYSCALL\n#  define EV_USE_CLOCK_SYSCALL 0\n# endif\n#endif\n\n/* this block fixes any misconfiguration where we know we run into trouble otherwise */\n\n#ifndef CLOCK_MONOTONIC\n# undef EV_USE_MONOTONIC\n# define EV_USE_MONOTONIC 0\n#endif\n\n#ifndef CLOCK_REALTIME\n# undef EV_USE_REALTIME\n# define EV_USE_REALTIME 0\n#endif\n\n#if !EV_STAT_ENABLE\n# undef EV_USE_INOTIFY\n# define EV_USE_INOTIFY 0\n#endif\n\n#if !EV_USE_NANOSLEEP\n/* hp-ux has it in sys/time.h, which we unconditionally include above */\n# if !defined _WIN32 && !defined __hpux\n#  include <sys/select.h>\n# endif\n#endif\n\n#if EV_USE_INOTIFY\n# include <sys/statfs.h>\n# include <sys/inotify.h>\n/* some very old inotify.h headers don't have IN_DONT_FOLLOW */\n# ifndef IN_DONT_FOLLOW\n#  undef EV_USE_INOTIFY\n#  define EV_USE_INOTIFY 0\n# endif\n#endif\n\n#if EV_USE_EVENTFD\n/* our minimum requirement is glibc 2.7 which has the stub, but not the header */\n# include <stdint.h>\n# ifndef EFD_NONBLOCK\n#  define EFD_NONBLOCK O_NONBLOCK\n# endif\n# ifndef EFD_CLOEXEC\n#  ifdef O_CLOEXEC\n#   define EFD_CLOEXEC O_CLOEXEC\n#  else\n#   define EFD_CLOEXEC 02000000\n#  endif\n# endif\nEV_CPP(extern \"C\") int (eventfd) (unsigned int initval, int flags);\n#endif\n\n#if EV_USE_SIGNALFD\n/* our minimum requirement is glibc 2.7 which has the stub, but not the header */\n# include <stdint.h>\n# ifndef SFD_NONBLOCK\n#  define SFD_NONBLOCK O_NONBLOCK\n# endif\n# ifndef SFD_CLOEXEC\n#  ifdef O_CLOEXEC\n#   define SFD_CLOEXEC O_CLOEXEC\n#  else\n#   define SFD_CLOEXEC 02000000\n#  endif\n# endif\nEV_CPP (extern \"C\") int signalfd (int fd, const sigset_t *mask, int flags);\n\nstruct signalfd_siginfo\n{\n  uint32_t ssi_signo;\n  char pad[128 - sizeof (uint32_t)];\n};\n#endif\n\n/**/\n\n#if EV_VERIFY >= 3\n# define EV_FREQUENT_CHECK ev_verify (EV_A)\n#else\n# define EV_FREQUENT_CHECK do { } while (0)\n#endif\n\n/*\n * This is used to work around floating point rounding problems.\n * This value is good at least till the year 4000.\n */\n#define MIN_INTERVAL  0.0001220703125 /* 1/2**13, good till 4000 */\n/*#define MIN_INTERVAL  0.00000095367431640625 /* 1/2**20, good till 2200 */\n\n#define MIN_TIMEJUMP  1. /* minimum timejump that gets detected (if monotonic clock available) */\n#define MAX_BLOCKTIME 59.743 /* never wait longer than this time (to detect time jumps) */\n\n#define EV_TV_SET(tv,t) do { tv.tv_sec = (long)t; tv.tv_usec = (long)((t - tv.tv_sec) * 1e6); } while (0)\n#define EV_TS_SET(ts,t) do { ts.tv_sec = (long)t; ts.tv_nsec = (long)((t - ts.tv_sec) * 1e9); } while (0)\n\n/* the following is ecb.h embedded into libev - use update_ev_c to update from an external copy */\n/* ECB.H BEGIN */\n/*\n * libecb - http://software.schmorp.de/pkg/libecb\n *\n * Copyright (©) 2009-2015 Marc Alexander Lehmann <libecb@schmorp.de>\n * Copyright (©) 2011 Emanuele Giaquinta\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifndef ECB_H\n#define ECB_H\n\n/* 16 bits major, 16 bits minor */\n#define ECB_VERSION 0x00010005\n\n#ifdef _WIN32\n  typedef   signed char   int8_t;\n  typedef unsigned char  uint8_t;\n  typedef   signed short  int16_t;\n  typedef unsigned short uint16_t;\n  typedef   signed int    int32_t;\n  typedef unsigned int   uint32_t;\n  #if __GNUC__\n    typedef   signed long long int64_t;\n    typedef unsigned long long uint64_t;\n  #else /* _MSC_VER || __BORLANDC__ */\n    typedef   signed __int64   int64_t;\n    typedef unsigned __int64   uint64_t;\n  #endif\n  #ifdef _WIN64\n    #define ECB_PTRSIZE 8\n    typedef uint64_t uintptr_t;\n    typedef  int64_t  intptr_t;\n  #else\n    #define ECB_PTRSIZE 4\n    typedef uint32_t uintptr_t;\n    typedef  int32_t  intptr_t;\n  #endif\n#else\n  #include <inttypes.h>\n  #if (defined INTPTR_MAX ? INTPTR_MAX : ULONG_MAX) > 0xffffffffU\n    #define ECB_PTRSIZE 8\n  #else\n    #define ECB_PTRSIZE 4\n  #endif\n#endif\n\n#define ECB_GCC_AMD64 (__amd64 || __amd64__ || __x86_64 || __x86_64__)\n#define ECB_MSVC_AMD64 (_M_AMD64 || _M_X64)\n\n/* work around x32 idiocy by defining proper macros */\n#if ECB_GCC_AMD64 || ECB_MSVC_AMD64\n  #if _ILP32\n    #define ECB_AMD64_X32 1\n  #else\n    #define ECB_AMD64 1\n  #endif\n#endif\n\n/* many compilers define _GNUC_ to some versions but then only implement\n * what their idiot authors think are the \"more important\" extensions,\n * causing enormous grief in return for some better fake benchmark numbers.\n * or so.\n * we try to detect these and simply assume they are not gcc - if they have\n * an issue with that they should have done it right in the first place.\n */\n#if !defined __GNUC_MINOR__ || defined __INTEL_COMPILER || defined __SUNPRO_C || defined __SUNPRO_CC || defined __llvm__ || defined __clang__\n  #define ECB_GCC_VERSION(major,minor) 0\n#else\n  #define ECB_GCC_VERSION(major,minor) (__GNUC__ > (major) || (__GNUC__ == (major) && __GNUC_MINOR__ >= (minor)))\n#endif\n\n#define ECB_CLANG_VERSION(major,minor) (__clang_major__ > (major) || (__clang_major__ == (major) && __clang_minor__ >= (minor)))\n\n#if __clang__ && defined __has_builtin\n  #define ECB_CLANG_BUILTIN(x) __has_builtin (x)\n#else\n  #define ECB_CLANG_BUILTIN(x) 0\n#endif\n\n#if __clang__ && defined __has_extension\n  #define ECB_CLANG_EXTENSION(x) __has_extension (x)\n#else\n  #define ECB_CLANG_EXTENSION(x) 0\n#endif\n\n#define ECB_CPP   (__cplusplus+0)\n#define ECB_CPP11 (__cplusplus >= 201103L)\n\n#if ECB_CPP\n  #define ECB_C            0\n  #define ECB_STDC_VERSION 0\n#else\n  #define ECB_C            1\n  #define ECB_STDC_VERSION __STDC_VERSION__\n#endif\n\n#define ECB_C99   (ECB_STDC_VERSION >= 199901L)\n#define ECB_C11   (ECB_STDC_VERSION >= 201112L)\n\n#if ECB_CPP\n  #define ECB_EXTERN_C extern \"C\"\n  #define ECB_EXTERN_C_BEG ECB_EXTERN_C {\n  #define ECB_EXTERN_C_END }\n#else\n  #define ECB_EXTERN_C extern\n  #define ECB_EXTERN_C_BEG\n  #define ECB_EXTERN_C_END\n#endif\n\n/*****************************************************************************/\n\n/* ECB_NO_THREADS - ecb is not used by multiple threads, ever */\n/* ECB_NO_SMP     - ecb might be used in multiple threads, but only on a single cpu */\n\n#if ECB_NO_THREADS\n  #define ECB_NO_SMP 1\n#endif\n\n#if ECB_NO_SMP\n  #define ECB_MEMORY_FENCE do { } while (0)\n#endif\n\n/* http://www-01.ibm.com/support/knowledgecenter/SSGH3R_13.1.0/com.ibm.xlcpp131.aix.doc/compiler_ref/compiler_builtins.html */\n#if __xlC__ && ECB_CPP\n  #include <builtins.h>\n#endif\n\n#if 1400 <= _MSC_VER\n  #include <intrin.h> /* fence functions _ReadBarrier, also bit search functions _BitScanReverse */\n#endif\n\n#ifndef ECB_MEMORY_FENCE\n  #if ECB_GCC_VERSION(2,5) || defined __INTEL_COMPILER || (__llvm__ && __GNUC__) || __SUNPRO_C >= 0x5110 || __SUNPRO_CC >= 0x5110\n    #if __i386 || __i386__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"lock; orb $0, -1(%%esp)\" : : : \"memory\")\n      #define ECB_MEMORY_FENCE_ACQUIRE __asm__ __volatile__ (\"\"                        : : : \"memory\")\n      #define ECB_MEMORY_FENCE_RELEASE __asm__ __volatile__ (\"\")\n    #elif ECB_GCC_AMD64\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"mfence\"   : : : \"memory\")\n      #define ECB_MEMORY_FENCE_ACQUIRE __asm__ __volatile__ (\"\"         : : : \"memory\")\n      #define ECB_MEMORY_FENCE_RELEASE __asm__ __volatile__ (\"\")\n    #elif __powerpc__ || __ppc__ || __powerpc64__ || __ppc64__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"sync\"     : : : \"memory\")\n    #elif defined __ARM_ARCH_2__ \\\n      || defined __ARM_ARCH_3__  || defined __ARM_ARCH_3M__  \\\n      || defined __ARM_ARCH_4__  || defined __ARM_ARCH_4T__  \\\n      || defined __ARM_ARCH_5__  || defined __ARM_ARCH_5E__  \\\n      || defined __ARM_ARCH_5T__ || defined __ARM_ARCH_5TE__ \\\n      || defined __ARM_ARCH_5TEJ__\n      /* should not need any, unless running old code on newer cpu - arm doesn't support that */\n    #elif defined __ARM_ARCH_6__  || defined __ARM_ARCH_6J__  \\\n       || defined __ARM_ARCH_6K__ || defined __ARM_ARCH_6ZK__ \\\n       || defined __ARM_ARCH_6T2__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"mcr p15,0,%0,c7,c10,5\" : : \"r\" (0) : \"memory\")\n    #elif defined __ARM_ARCH_7__  || defined __ARM_ARCH_7A__  \\\n       || defined __ARM_ARCH_7R__ || defined __ARM_ARCH_7M__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"dmb\"      : : : \"memory\")\n    #elif __aarch64__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"dmb ish\"  : : : \"memory\")\n    #elif (__sparc || __sparc__) && !(__sparc_v8__ || defined __sparcv8)\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"membar #LoadStore | #LoadLoad | #StoreStore | #StoreLoad\" : : : \"memory\")\n      #define ECB_MEMORY_FENCE_ACQUIRE __asm__ __volatile__ (\"membar #LoadStore | #LoadLoad\"                            : : : \"memory\")\n      #define ECB_MEMORY_FENCE_RELEASE __asm__ __volatile__ (\"membar #LoadStore             | #StoreStore\")\n    #elif defined __s390__ || defined __s390x__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"bcr 15,0\" : : : \"memory\")\n    #elif defined __mips__\n      /* GNU/Linux emulates sync on mips1 architectures, so we force its use */\n      /* anybody else who still uses mips1 is supposed to send in their version, with detection code. */\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\".set mips2; sync; .set mips0\" : : : \"memory\")\n    #elif defined __alpha__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"mb\"       : : : \"memory\")\n    #elif defined __hppa__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"\"         : : : \"memory\")\n      #define ECB_MEMORY_FENCE_RELEASE __asm__ __volatile__ (\"\")\n    #elif defined __ia64__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"mf\"       : : : \"memory\")\n    #elif defined __m68k__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"\"         : : : \"memory\")\n    #elif defined __m88k__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"tb1 0,%%r0,128\" : : : \"memory\")\n    #elif defined __sh__\n      #define ECB_MEMORY_FENCE         __asm__ __volatile__ (\"\"         : : : \"memory\")\n    #endif\n  #endif\n#endif\n\n#ifndef ECB_MEMORY_FENCE\n  #if ECB_GCC_VERSION(4,7)\n    /* see comment below (stdatomic.h) about the C11 memory model. */\n    #define ECB_MEMORY_FENCE         __atomic_thread_fence (__ATOMIC_SEQ_CST)\n    #define ECB_MEMORY_FENCE_ACQUIRE __atomic_thread_fence (__ATOMIC_ACQUIRE)\n    #define ECB_MEMORY_FENCE_RELEASE __atomic_thread_fence (__ATOMIC_RELEASE)\n\n  #elif ECB_CLANG_EXTENSION(c_atomic)\n    /* see comment below (stdatomic.h) about the C11 memory model. */\n    #define ECB_MEMORY_FENCE         __c11_atomic_thread_fence (__ATOMIC_SEQ_CST)\n    #define ECB_MEMORY_FENCE_ACQUIRE __c11_atomic_thread_fence (__ATOMIC_ACQUIRE)\n    #define ECB_MEMORY_FENCE_RELEASE __c11_atomic_thread_fence (__ATOMIC_RELEASE)\n\n  #elif ECB_GCC_VERSION(4,4) || defined __INTEL_COMPILER || defined __clang__\n    #define ECB_MEMORY_FENCE         __sync_synchronize ()\n  #elif _MSC_VER >= 1500 /* VC++ 2008 */\n    /* apparently, microsoft broke all the memory barrier stuff in Visual Studio 2008... */\n    #pragma intrinsic(_ReadBarrier,_WriteBarrier,_ReadWriteBarrier)\n    #define ECB_MEMORY_FENCE         _ReadWriteBarrier (); MemoryBarrier()\n    #define ECB_MEMORY_FENCE_ACQUIRE _ReadWriteBarrier (); MemoryBarrier() /* according to msdn, _ReadBarrier is not a load fence */\n    #define ECB_MEMORY_FENCE_RELEASE _WriteBarrier (); MemoryBarrier()\n  #elif _MSC_VER >= 1400 /* VC++ 2005 */\n    #pragma intrinsic(_ReadBarrier,_WriteBarrier,_ReadWriteBarrier)\n    #define ECB_MEMORY_FENCE         _ReadWriteBarrier ()\n    #define ECB_MEMORY_FENCE_ACQUIRE _ReadWriteBarrier () /* according to msdn, _ReadBarrier is not a load fence */\n    #define ECB_MEMORY_FENCE_RELEASE _WriteBarrier ()\n  #elif defined _WIN32\n    #include <WinNT.h>\n    #define ECB_MEMORY_FENCE         MemoryBarrier () /* actually just xchg on x86... scary */\n  #elif __SUNPRO_C >= 0x5110 || __SUNPRO_CC >= 0x5110\n    #include <mbarrier.h>\n    #define ECB_MEMORY_FENCE         __machine_rw_barrier ()\n    #define ECB_MEMORY_FENCE_ACQUIRE __machine_r_barrier  ()\n    #define ECB_MEMORY_FENCE_RELEASE __machine_w_barrier  ()\n  #elif __xlC__\n    #define ECB_MEMORY_FENCE         __sync ()\n  #endif\n#endif\n\n#ifndef ECB_MEMORY_FENCE\n  #if ECB_C11 && !defined __STDC_NO_ATOMICS__\n    /* we assume that these memory fences work on all variables/all memory accesses, */\n    /* not just C11 atomics and atomic accesses */\n    #include <stdatomic.h>\n    /* Unfortunately, neither gcc 4.7 nor clang 3.1 generate any instructions for */\n    /* any fence other than seq_cst, which isn't very efficient for us. */\n    /* Why that is, we don't know - either the C11 memory model is quite useless */\n    /* for most usages, or gcc and clang have a bug */\n    /* I *currently* lean towards the latter, and inefficiently implement */\n    /* all three of ecb's fences as a seq_cst fence */\n    /* Update, gcc-4.8 generates mfence for all c++ fences, but nothing */\n    /* for all __atomic_thread_fence's except seq_cst */\n    #define ECB_MEMORY_FENCE         atomic_thread_fence (memory_order_seq_cst)\n  #endif\n#endif\n\n#ifndef ECB_MEMORY_FENCE\n  #if !ECB_AVOID_PTHREADS\n    /*\n     * if you get undefined symbol references to pthread_mutex_lock,\n     * or failure to find pthread.h, then you should implement\n     * the ECB_MEMORY_FENCE operations for your cpu/compiler\n     * OR provide pthread.h and link against the posix thread library\n     * of your system.\n     */\n    #include <pthread.h>\n    #define ECB_NEEDS_PTHREADS 1\n    #define ECB_MEMORY_FENCE_NEEDS_PTHREADS 1\n\n    static pthread_mutex_t ecb_mf_lock = PTHREAD_MUTEX_INITIALIZER;\n    #define ECB_MEMORY_FENCE do { pthread_mutex_lock (&ecb_mf_lock); pthread_mutex_unlock (&ecb_mf_lock); } while (0)\n  #endif\n#endif\n\n#if !defined ECB_MEMORY_FENCE_ACQUIRE && defined ECB_MEMORY_FENCE\n  #define ECB_MEMORY_FENCE_ACQUIRE ECB_MEMORY_FENCE\n#endif\n\n#if !defined ECB_MEMORY_FENCE_RELEASE && defined ECB_MEMORY_FENCE\n  #define ECB_MEMORY_FENCE_RELEASE ECB_MEMORY_FENCE\n#endif\n\n/*****************************************************************************/\n\n#if ECB_CPP\n  #define ecb_inline static inline\n#elif ECB_GCC_VERSION(2,5)\n  #define ecb_inline static __inline__\n#elif ECB_C99\n  #define ecb_inline static inline\n#else\n  #define ecb_inline static\n#endif\n\n#if ECB_GCC_VERSION(3,3)\n  #define ecb_restrict __restrict__\n#elif ECB_C99\n  #define ecb_restrict restrict\n#else\n  #define ecb_restrict\n#endif\n\ntypedef int ecb_bool;\n\n#define ECB_CONCAT_(a, b) a ## b\n#define ECB_CONCAT(a, b) ECB_CONCAT_(a, b)\n#define ECB_STRINGIFY_(a) # a\n#define ECB_STRINGIFY(a) ECB_STRINGIFY_(a)\n#define ECB_STRINGIFY_EXPR(expr) ((expr), ECB_STRINGIFY_ (expr))\n\n#define ecb_function_ ecb_inline\n\n#if ECB_GCC_VERSION(3,1) || ECB_CLANG_VERSION(2,8)\n  #define ecb_attribute(attrlist)        __attribute__ (attrlist)\n#else\n  #define ecb_attribute(attrlist)\n#endif\n\n#if ECB_GCC_VERSION(3,1) || ECB_CLANG_BUILTIN(__builtin_constant_p)\n  #define ecb_is_constant(expr)          __builtin_constant_p (expr)\n#else\n  /* possible C11 impl for integral types\n  typedef struct ecb_is_constant_struct ecb_is_constant_struct;\n  #define ecb_is_constant(expr)          _Generic ((1 ? (struct ecb_is_constant_struct *)0 : (void *)((expr) - (expr)), ecb_is_constant_struct *: 0, default: 1)) */\n\n  #define ecb_is_constant(expr)          0\n#endif\n\n#if ECB_GCC_VERSION(3,1) || ECB_CLANG_BUILTIN(__builtin_expect)\n  #define ecb_expect(expr,value)         __builtin_expect ((expr),(value))\n#else\n  #define ecb_expect(expr,value)         (expr)\n#endif\n\n#if ECB_GCC_VERSION(3,1) || ECB_CLANG_BUILTIN(__builtin_prefetch)\n  #define ecb_prefetch(addr,rw,locality) __builtin_prefetch (addr, rw, locality)\n#else\n  #define ecb_prefetch(addr,rw,locality)\n#endif\n\n/* no emulation for ecb_decltype */\n#if ECB_CPP11\n  // older implementations might have problems with decltype(x)::type, work around it\n  template<class T> struct ecb_decltype_t { typedef T type; };\n  #define ecb_decltype(x) ecb_decltype_t<decltype (x)>::type\n#elif ECB_GCC_VERSION(3,0) || ECB_CLANG_VERSION(2,8)\n  #define ecb_decltype(x) __typeof__ (x)\n#endif\n\n#if _MSC_VER >= 1300\n  #define ecb_deprecated __declspec (deprecated)\n#else\n  #define ecb_deprecated ecb_attribute ((__deprecated__))\n#endif\n\n#if _MSC_VER >= 1500\n  #define ecb_deprecated_message(msg) __declspec (deprecated (msg))\n#elif ECB_GCC_VERSION(4,5)\n  #define ecb_deprecated_message(msg) ecb_attribute ((__deprecated__ (msg))\n#else\n  #define ecb_deprecated_message(msg) ecb_deprecated\n#endif\n\n#if _MSC_VER >= 1400\n  #define ecb_noinline __declspec (noinline)\n#else\n  #define ecb_noinline ecb_attribute ((__noinline__))\n#endif\n\n#define ecb_unused     ecb_attribute ((__unused__))\n#define ecb_const      ecb_attribute ((__const__))\n#define ecb_pure       ecb_attribute ((__pure__))\n\n#if ECB_C11 || __IBMC_NORETURN\n  /* http://www-01.ibm.com/support/knowledgecenter/SSGH3R_13.1.0/com.ibm.xlcpp131.aix.doc/language_ref/noreturn.html */\n  #define ecb_noreturn   _Noreturn\n#elif ECB_CPP11\n  #define ecb_noreturn   [[noreturn]]\n#elif _MSC_VER >= 1200\n  /* http://msdn.microsoft.com/en-us/library/k6ktzx3s.aspx */\n  #define ecb_noreturn   __declspec (noreturn)\n#else\n  #define ecb_noreturn   ecb_attribute ((__noreturn__))\n#endif\n\n#if ECB_GCC_VERSION(4,3)\n  #define ecb_artificial ecb_attribute ((__artificial__))\n  #define ecb_hot        ecb_attribute ((__hot__))\n  #define ecb_cold       ecb_attribute ((__cold__))\n#else\n  #define ecb_artificial\n  #define ecb_hot\n  #define ecb_cold\n#endif\n\n/* put around conditional expressions if you are very sure that the  */\n/* expression is mostly true or mostly false. note that these return */\n/* booleans, not the expression.                                     */\n#define ecb_expect_false(expr) ecb_expect (!!(expr), 0)\n#define ecb_expect_true(expr)  ecb_expect (!!(expr), 1)\n/* for compatibility to the rest of the world */\n#define ecb_likely(expr)   ecb_expect_true  (expr)\n#define ecb_unlikely(expr) ecb_expect_false (expr)\n\n/* count trailing zero bits and count # of one bits */\n#if ECB_GCC_VERSION(3,4) \\\n    || (ECB_CLANG_BUILTIN(__builtin_clz) && ECB_CLANG_BUILTIN(__builtin_clzll) \\\n        && ECB_CLANG_BUILTIN(__builtin_ctz) && ECB_CLANG_BUILTIN(__builtin_ctzll) \\\n        && ECB_CLANG_BUILTIN(__builtin_popcount))\n  /* we assume int == 32 bit, long == 32 or 64 bit and long long == 64 bit */\n  #define ecb_ld32(x)      (__builtin_clz      (x) ^ 31)\n  #define ecb_ld64(x)      (__builtin_clzll    (x) ^ 63)\n  #define ecb_ctz32(x)      __builtin_ctz      (x)\n  #define ecb_ctz64(x)      __builtin_ctzll    (x)\n  #define ecb_popcount32(x) __builtin_popcount (x)\n  /* no popcountll */\n#else\n  ecb_function_ ecb_const int ecb_ctz32 (uint32_t x);\n  ecb_function_ ecb_const int\n  ecb_ctz32 (uint32_t x)\n  {\n#if 1400 <= _MSC_VER && (_M_IX86 || _M_X64 || _M_IA64 || _M_ARM)\n    unsigned long r;\n    _BitScanForward (&r, x);\n    return (int)r;\n#else\n    int r = 0;\n\n    x &= ~x + 1; /* this isolates the lowest bit */\n\n#if ECB_branchless_on_i386\n    r += !!(x & 0xaaaaaaaa) << 0;\n    r += !!(x & 0xcccccccc) << 1;\n    r += !!(x & 0xf0f0f0f0) << 2;\n    r += !!(x & 0xff00ff00) << 3;\n    r += !!(x & 0xffff0000) << 4;\n#else\n    if (x & 0xaaaaaaaa) r +=  1;\n    if (x & 0xcccccccc) r +=  2;\n    if (x & 0xf0f0f0f0) r +=  4;\n    if (x & 0xff00ff00) r +=  8;\n    if (x & 0xffff0000) r += 16;\n#endif\n\n    return r;\n#endif\n  }\n\n  ecb_function_ ecb_const int ecb_ctz64 (uint64_t x);\n  ecb_function_ ecb_const int\n  ecb_ctz64 (uint64_t x)\n  {\n#if 1400 <= _MSC_VER && (_M_X64 || _M_IA64 || _M_ARM)\n    unsigned long r;\n    _BitScanForward64 (&r, x);\n    return (int)r;\n#else\n    int shift = x & 0xffffffff ? 0 : 32;\n    return ecb_ctz32 (x >> shift) + shift;\n#endif\n  }\n\n  ecb_function_ ecb_const int ecb_popcount32 (uint32_t x);\n  ecb_function_ ecb_const int\n  ecb_popcount32 (uint32_t x)\n  {\n    x -=  (x >> 1) & 0x55555555;\n    x  = ((x >> 2) & 0x33333333) + (x & 0x33333333);\n    x  = ((x >> 4) + x) & 0x0f0f0f0f;\n    x *= 0x01010101;\n\n    return x >> 24;\n  }\n\n  ecb_function_ ecb_const int ecb_ld32 (uint32_t x);\n  ecb_function_ ecb_const int ecb_ld32 (uint32_t x)\n  {\n#if 1400 <= _MSC_VER && (_M_IX86 || _M_X64 || _M_IA64 || _M_ARM)\n    unsigned long r;\n    _BitScanReverse (&r, x);\n    return (int)r;\n#else\n    int r = 0;\n\n    if (x >> 16) { x >>= 16; r += 16; }\n    if (x >>  8) { x >>=  8; r +=  8; }\n    if (x >>  4) { x >>=  4; r +=  4; }\n    if (x >>  2) { x >>=  2; r +=  2; }\n    if (x >>  1) {           r +=  1; }\n\n    return r;\n#endif\n  }\n\n  ecb_function_ ecb_const int ecb_ld64 (uint64_t x);\n  ecb_function_ ecb_const int ecb_ld64 (uint64_t x)\n  {\n#if 1400 <= _MSC_VER && (_M_X64 || _M_IA64 || _M_ARM)\n    unsigned long r;\n    _BitScanReverse64 (&r, x);\n    return (int)r;\n#else\n    int r = 0;\n\n    if (x >> 32) { x >>= 32; r += 32; }\n\n    return r + ecb_ld32 (x);\n#endif\n  }\n#endif\n\necb_function_ ecb_const ecb_bool ecb_is_pot32 (uint32_t x);\necb_function_ ecb_const ecb_bool ecb_is_pot32 (uint32_t x) { return !(x & (x - 1)); }\necb_function_ ecb_const ecb_bool ecb_is_pot64 (uint64_t x);\necb_function_ ecb_const ecb_bool ecb_is_pot64 (uint64_t x) { return !(x & (x - 1)); }\n\necb_function_ ecb_const uint8_t  ecb_bitrev8  (uint8_t  x);\necb_function_ ecb_const uint8_t  ecb_bitrev8  (uint8_t  x)\n{\n  return (  (x * 0x0802U & 0x22110U)\n          | (x * 0x8020U & 0x88440U)) * 0x10101U >> 16;\n}\n\necb_function_ ecb_const uint16_t ecb_bitrev16 (uint16_t x);\necb_function_ ecb_const uint16_t ecb_bitrev16 (uint16_t x)\n{\n  x = ((x >>  1) &     0x5555) | ((x &     0x5555) <<  1);\n  x = ((x >>  2) &     0x3333) | ((x &     0x3333) <<  2);\n  x = ((x >>  4) &     0x0f0f) | ((x &     0x0f0f) <<  4);\n  x = ( x >>  8              ) | ( x               <<  8);\n\n  return x;\n}\n\necb_function_ ecb_const uint32_t ecb_bitrev32 (uint32_t x);\necb_function_ ecb_const uint32_t ecb_bitrev32 (uint32_t x)\n{\n  x = ((x >>  1) & 0x55555555) | ((x & 0x55555555) <<  1);\n  x = ((x >>  2) & 0x33333333) | ((x & 0x33333333) <<  2);\n  x = ((x >>  4) & 0x0f0f0f0f) | ((x & 0x0f0f0f0f) <<  4);\n  x = ((x >>  8) & 0x00ff00ff) | ((x & 0x00ff00ff) <<  8);\n  x = ( x >> 16              ) | ( x               << 16);\n\n  return x;\n}\n\n/* popcount64 is only available on 64 bit cpus as gcc builtin */\n/* so for this version we are lazy */\necb_function_ ecb_const int ecb_popcount64 (uint64_t x);\necb_function_ ecb_const int\necb_popcount64 (uint64_t x)\n{\n  return ecb_popcount32 (x) + ecb_popcount32 (x >> 32);\n}\n\necb_inline ecb_const uint8_t  ecb_rotl8  (uint8_t  x, unsigned int count);\necb_inline ecb_const uint8_t  ecb_rotr8  (uint8_t  x, unsigned int count);\necb_inline ecb_const uint16_t ecb_rotl16 (uint16_t x, unsigned int count);\necb_inline ecb_const uint16_t ecb_rotr16 (uint16_t x, unsigned int count);\necb_inline ecb_const uint32_t ecb_rotl32 (uint32_t x, unsigned int count);\necb_inline ecb_const uint32_t ecb_rotr32 (uint32_t x, unsigned int count);\necb_inline ecb_const uint64_t ecb_rotl64 (uint64_t x, unsigned int count);\necb_inline ecb_const uint64_t ecb_rotr64 (uint64_t x, unsigned int count);\n\necb_inline ecb_const uint8_t  ecb_rotl8  (uint8_t  x, unsigned int count) { return (x >> ( 8 - count)) | (x << count); }\necb_inline ecb_const uint8_t  ecb_rotr8  (uint8_t  x, unsigned int count) { return (x << ( 8 - count)) | (x >> count); }\necb_inline ecb_const uint16_t ecb_rotl16 (uint16_t x, unsigned int count) { return (x >> (16 - count)) | (x << count); }\necb_inline ecb_const uint16_t ecb_rotr16 (uint16_t x, unsigned int count) { return (x << (16 - count)) | (x >> count); }\necb_inline ecb_const uint32_t ecb_rotl32 (uint32_t x, unsigned int count) { return (x >> (32 - count)) | (x << count); }\necb_inline ecb_const uint32_t ecb_rotr32 (uint32_t x, unsigned int count) { return (x << (32 - count)) | (x >> count); }\necb_inline ecb_const uint64_t ecb_rotl64 (uint64_t x, unsigned int count) { return (x >> (64 - count)) | (x << count); }\necb_inline ecb_const uint64_t ecb_rotr64 (uint64_t x, unsigned int count) { return (x << (64 - count)) | (x >> count); }\n\n#if ECB_GCC_VERSION(4,3) || (ECB_CLANG_BUILTIN(__builtin_bswap32) && ECB_CLANG_BUILTIN(__builtin_bswap64))\n  #if ECB_GCC_VERSION(4,8) || ECB_CLANG_BUILTIN(__builtin_bswap16)\n  #define ecb_bswap16(x)  __builtin_bswap16 (x)\n  #else\n  #define ecb_bswap16(x) (__builtin_bswap32 (x) >> 16)\n  #endif\n  #define ecb_bswap32(x)  __builtin_bswap32 (x)\n  #define ecb_bswap64(x)  __builtin_bswap64 (x)\n#elif _MSC_VER\n  #include <stdlib.h>\n  #define ecb_bswap16(x) ((uint16_t)_byteswap_ushort ((uint16_t)(x)))\n  #define ecb_bswap32(x) ((uint32_t)_byteswap_ulong  ((uint32_t)(x)))\n  #define ecb_bswap64(x) ((uint64_t)_byteswap_uint64 ((uint64_t)(x)))\n#else\n  ecb_function_ ecb_const uint16_t ecb_bswap16 (uint16_t x);\n  ecb_function_ ecb_const uint16_t\n  ecb_bswap16 (uint16_t x)\n  {\n    return ecb_rotl16 (x, 8);\n  }\n\n  ecb_function_ ecb_const uint32_t ecb_bswap32 (uint32_t x);\n  ecb_function_ ecb_const uint32_t\n  ecb_bswap32 (uint32_t x)\n  {\n    return (((uint32_t)ecb_bswap16 (x)) << 16) | ecb_bswap16 (x >> 16);\n  }\n\n  ecb_function_ ecb_const uint64_t ecb_bswap64 (uint64_t x);\n  ecb_function_ ecb_const uint64_t\n  ecb_bswap64 (uint64_t x)\n  {\n    return (((uint64_t)ecb_bswap32 (x)) << 32) | ecb_bswap32 (x >> 32);\n  }\n#endif\n\n#if ECB_GCC_VERSION(4,5) || ECB_CLANG_BUILTIN(__builtin_unreachable)\n  #define ecb_unreachable() __builtin_unreachable ()\n#else\n  /* this seems to work fine, but gcc always emits a warning for it :/ */\n  ecb_inline ecb_noreturn void ecb_unreachable (void);\n  ecb_inline ecb_noreturn void ecb_unreachable (void) { }\n#endif\n\n/* try to tell the compiler that some condition is definitely true */\n#define ecb_assume(cond) if (!(cond)) ecb_unreachable (); else 0\n\necb_inline ecb_const uint32_t ecb_byteorder_helper (void);\necb_inline ecb_const uint32_t\necb_byteorder_helper (void)\n{\n  /* the union code still generates code under pressure in gcc, */\n  /* but less than using pointers, and always seems to */\n  /* successfully return a constant. */\n  /* the reason why we have this horrible preprocessor mess */\n  /* is to avoid it in all cases, at least on common architectures */\n  /* or when using a recent enough gcc version (>= 4.6) */\n#if (defined __BYTE_ORDER__ && __BYTE_ORDER__ == __ORDER_LITTLE_ENDIAN__) \\\n    || ((__i386 || __i386__ || _M_IX86 || ECB_GCC_AMD64 || ECB_MSVC_AMD64) && !__VOS__)\n  #define ECB_LITTLE_ENDIAN 1\n  return 0x44332211;\n#elif (defined __BYTE_ORDER__ && __BYTE_ORDER__ == __ORDER_BIG_ENDIAN__) \\\n      || ((__AARCH64EB__ || __MIPSEB__ || __ARMEB__) && !__VOS__)\n  #define ECB_BIG_ENDIAN 1\n  return 0x11223344;\n#else\n  union\n  {\n    uint8_t c[4];\n    uint32_t u;\n  } u = { 0x11, 0x22, 0x33, 0x44 };\n  return u.u;\n#endif\n}\n\necb_inline ecb_const ecb_bool ecb_big_endian    (void);\necb_inline ecb_const ecb_bool ecb_big_endian    (void) { return ecb_byteorder_helper () == 0x11223344; }\necb_inline ecb_const ecb_bool ecb_little_endian (void);\necb_inline ecb_const ecb_bool ecb_little_endian (void) { return ecb_byteorder_helper () == 0x44332211; }\n\n#if ECB_GCC_VERSION(3,0) || ECB_C99\n  #define ecb_mod(m,n) ((m) % (n) + ((m) % (n) < 0 ? (n) : 0))\n#else\n  #define ecb_mod(m,n) ((m) < 0 ? ((n) - 1 - ((-1 - (m)) % (n))) : ((m) % (n)))\n#endif\n\n#if ECB_CPP\n  template<typename T>\n  static inline T ecb_div_rd (T val, T div)\n  {\n    return val < 0 ? - ((-val + div - 1) / div) : (val          ) / div;\n  }\n  template<typename T>\n  static inline T ecb_div_ru (T val, T div)\n  {\n    return val < 0 ? - ((-val          ) / div) : (val + div - 1) / div;\n  }\n#else\n  #define ecb_div_rd(val,div) ((val) < 0 ? - ((-(val) + (div) - 1) / (div)) : ((val)            ) / (div))\n  #define ecb_div_ru(val,div) ((val) < 0 ? - ((-(val)            ) / (div)) : ((val) + (div) - 1) / (div))\n#endif\n\n#if ecb_cplusplus_does_not_suck\n  /* does not work for local types (http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2008/n2657.htm) */\n  template<typename T, int N>\n  static inline int ecb_array_length (const T (&arr)[N])\n  {\n    return N;\n  }\n#else\n  #define ecb_array_length(name) (sizeof (name) / sizeof (name [0]))\n#endif\n\necb_function_ ecb_const uint32_t ecb_binary16_to_binary32 (uint32_t x);\necb_function_ ecb_const uint32_t\necb_binary16_to_binary32 (uint32_t x)\n{\n  unsigned int s = (x & 0x8000) << (31 - 15);\n  int          e = (x >> 10) & 0x001f;\n  unsigned int m =  x        & 0x03ff;\n\n  if (ecb_expect_false (e == 31))\n    /* infinity or NaN */\n    e = 255 - (127 - 15);\n  else if (ecb_expect_false (!e))\n    {\n      if (ecb_expect_true (!m))\n        /* zero, handled by code below by forcing e to 0 */\n        e = 0 - (127 - 15);\n      else\n        {\n          /* subnormal, renormalise */\n          unsigned int s = 10 - ecb_ld32 (m);\n\n          m = (m << s) & 0x3ff; /* mask implicit bit */\n          e -= s - 1;\n        }\n    }\n\n  /* e and m now are normalised, or zero, (or inf or nan) */\n  e += 127 - 15;\n\n  return s | (e << 23) | (m << (23 - 10));\n}\n\necb_function_ ecb_const uint16_t ecb_binary32_to_binary16 (uint32_t x);\necb_function_ ecb_const uint16_t\necb_binary32_to_binary16 (uint32_t x)\n{\n  unsigned int s =  (x >> 16) & 0x00008000; /* sign bit, the easy part */\n  unsigned int e = ((x >> 23) & 0x000000ff) - (127 - 15); /* the desired exponent */\n  unsigned int m =   x        & 0x007fffff;\n\n  x &= 0x7fffffff;\n\n  /* if it's within range of binary16 normals, use fast path */\n  if (ecb_expect_true (0x38800000 <= x && x <= 0x477fefff))\n    {\n      /* mantissa round-to-even */\n      m += 0x00000fff + ((m >> (23 - 10)) & 1);\n\n      /* handle overflow */\n      if (ecb_expect_false (m >= 0x00800000))\n        {\n          m >>= 1;\n          e +=  1;\n        }\n\n      return s | (e << 10) | (m >> (23 - 10));\n    }\n\n  /* handle large numbers and infinity */\n  if (ecb_expect_true (0x477fefff < x && x <= 0x7f800000))\n    return s | 0x7c00;\n\n  /* handle zero, subnormals and small numbers */\n  if (ecb_expect_true (x < 0x38800000))\n    {\n      /* zero */\n      if (ecb_expect_true (!x))\n        return s;\n\n      /* handle subnormals */\n\n      /* too small, will be zero */\n      if (e < (14 - 24)) /* might not be sharp, but is good enough */\n        return s;\n\n      m |= 0x00800000; /* make implicit bit explicit */\n\n      /* very tricky - we need to round to the nearest e (+10) bit value */\n      {\n        unsigned int bits = 14 - e;\n        unsigned int half = (1 << (bits - 1)) - 1;\n        unsigned int even = (m >> bits) & 1;\n\n        /* if this overflows, we will end up with a normalised number */\n        m = (m + half + even) >> bits;\n      }\n\n      return s | m;\n    }\n\n  /* handle NaNs, preserve leftmost nan bits, but make sure we don't turn them into infinities */\n  m >>= 13;\n\n  return s | 0x7c00 | m | !m;\n}\n\n/*******************************************************************************/\n/* floating point stuff, can be disabled by defining ECB_NO_LIBM */\n\n/* basically, everything uses \"ieee pure-endian\" floating point numbers */\n/* the only noteworthy exception is ancient armle, which uses order 43218765 */\n#if 0 \\\n    || __i386 || __i386__ \\\n    || ECB_GCC_AMD64 \\\n    || __powerpc__ || __ppc__ || __powerpc64__ || __ppc64__ \\\n    || defined __s390__ || defined __s390x__ \\\n    || defined __mips__ \\\n    || defined __alpha__ \\\n    || defined __hppa__ \\\n    || defined __ia64__ \\\n    || defined __m68k__ \\\n    || defined __m88k__ \\\n    || defined __sh__ \\\n    || defined _M_IX86 || defined ECB_MSVC_AMD64 || defined _M_IA64 \\\n    || (defined __arm__ && (defined __ARM_EABI__ || defined __EABI__ || defined __VFP_FP__ || defined _WIN32_WCE || defined __ANDROID__)) \\\n    || defined __aarch64__\n  #define ECB_STDFP 1\n  #include <string.h> /* for memcpy */\n#else\n  #define ECB_STDFP 0\n#endif\n\n#ifndef ECB_NO_LIBM\n\n  #include <math.h> /* for frexp*, ldexp*, INFINITY, NAN */\n\n  /* only the oldest of old doesn't have this one. solaris. */\n  #ifdef INFINITY\n    #define ECB_INFINITY INFINITY\n  #else\n    #define ECB_INFINITY HUGE_VAL\n  #endif\n\n  #ifdef NAN\n    #define ECB_NAN NAN\n  #else\n    #define ECB_NAN ECB_INFINITY\n  #endif\n\n  #if ECB_C99 || _XOPEN_VERSION >= 600 || _POSIX_VERSION >= 200112L\n    #define ecb_ldexpf(x,e) ldexpf ((x), (e))\n    #define ecb_frexpf(x,e) frexpf ((x), (e))\n  #else\n    #define ecb_ldexpf(x,e) (float) ldexp ((double) (x), (e))\n    #define ecb_frexpf(x,e) (float) frexp ((double) (x), (e))\n  #endif\n\n  /* convert a float to ieee single/binary32 */\n  ecb_function_ ecb_const uint32_t ecb_float_to_binary32 (float x);\n  ecb_function_ ecb_const uint32_t\n  ecb_float_to_binary32 (float x)\n  {\n    uint32_t r;\n\n    #if ECB_STDFP\n      memcpy (&r, &x, 4);\n    #else\n      /* slow emulation, works for anything but -0 */\n      uint32_t m;\n      int e;\n\n      if (x == 0e0f                    ) return 0x00000000U;\n      if (x > +3.40282346638528860e+38f) return 0x7f800000U;\n      if (x < -3.40282346638528860e+38f) return 0xff800000U;\n      if (x != x                       ) return 0x7fbfffffU;\n\n      m = ecb_frexpf (x, &e) * 0x1000000U;\n\n      r = m & 0x80000000U;\n\n      if (r)\n        m = -m;\n\n      if (e <= -126)\n        {\n          m &= 0xffffffU;\n          m >>= (-125 - e);\n          e = -126;\n        }\n\n      r |= (e + 126) << 23;\n      r |= m & 0x7fffffU;\n    #endif\n\n    return r;\n  }\n\n  /* converts an ieee single/binary32 to a float */\n  ecb_function_ ecb_const float ecb_binary32_to_float (uint32_t x);\n  ecb_function_ ecb_const float\n  ecb_binary32_to_float (uint32_t x)\n  {\n    float r;\n\n    #if ECB_STDFP\n      memcpy (&r, &x, 4);\n    #else\n      /* emulation, only works for normals and subnormals and +0 */\n      int neg = x >> 31;\n      int e = (x >> 23) & 0xffU;\n\n      x &= 0x7fffffU;\n\n      if (e)\n        x |= 0x800000U;\n      else\n        e = 1;\n\n      /* we distrust ldexpf a bit and do the 2**-24 scaling by an extra multiply */\n      r = ecb_ldexpf (x * (0.5f / 0x800000U), e - 126);\n\n      r = neg ? -r : r;\n    #endif\n\n    return r;\n  }\n\n  /* convert a double to ieee double/binary64 */\n  ecb_function_ ecb_const uint64_t ecb_double_to_binary64 (double x);\n  ecb_function_ ecb_const uint64_t\n  ecb_double_to_binary64 (double x)\n  {\n    uint64_t r;\n\n    #if ECB_STDFP\n      memcpy (&r, &x, 8);\n    #else\n      /* slow emulation, works for anything but -0 */\n      uint64_t m;\n      int e;\n\n      if (x == 0e0                     ) return 0x0000000000000000U;\n      if (x > +1.79769313486231470e+308) return 0x7ff0000000000000U;\n      if (x < -1.79769313486231470e+308) return 0xfff0000000000000U;\n      if (x != x                       ) return 0X7ff7ffffffffffffU;\n\n      m = frexp (x, &e) * 0x20000000000000U;\n\n      r = m & 0x8000000000000000;;\n\n      if (r)\n        m = -m;\n\n      if (e <= -1022)\n        {\n          m &= 0x1fffffffffffffU;\n          m >>= (-1021 - e);\n          e = -1022;\n        }\n\n      r |= ((uint64_t)(e + 1022)) << 52;\n      r |= m & 0xfffffffffffffU;\n    #endif\n\n    return r;\n  }\n\n  /* converts an ieee double/binary64 to a double */\n  ecb_function_ ecb_const double ecb_binary64_to_double (uint64_t x);\n  ecb_function_ ecb_const double\n  ecb_binary64_to_double (uint64_t x)\n  {\n    double r;\n\n    #if ECB_STDFP\n      memcpy (&r, &x, 8);\n    #else\n      /* emulation, only works for normals and subnormals and +0 */\n      int neg = x >> 63;\n      int e = (x >> 52) & 0x7ffU;\n\n      x &= 0xfffffffffffffU;\n\n      if (e)\n        x |= 0x10000000000000U;\n      else\n        e = 1;\n\n      /* we distrust ldexp a bit and do the 2**-53 scaling by an extra multiply */\n      r = ldexp (x * (0.5 / 0x10000000000000U), e - 1022);\n\n      r = neg ? -r : r;\n    #endif\n\n    return r;\n  }\n\n  /* convert a float to ieee half/binary16 */\n  ecb_function_ ecb_const uint16_t ecb_float_to_binary16 (float x);\n  ecb_function_ ecb_const uint16_t\n  ecb_float_to_binary16 (float x)\n  {\n    return ecb_binary32_to_binary16 (ecb_float_to_binary32 (x));\n  }\n\n  /* convert an ieee half/binary16 to float */\n  ecb_function_ ecb_const float ecb_binary16_to_float (uint16_t x);\n  ecb_function_ ecb_const float\n  ecb_binary16_to_float (uint16_t x)\n  {\n    return ecb_binary32_to_float (ecb_binary16_to_binary32 (x));\n  }\n\n#endif\n\n#endif\n\n/* ECB.H END */\n\n#if ECB_MEMORY_FENCE_NEEDS_PTHREADS\n/* if your architecture doesn't need memory fences, e.g. because it is\n * single-cpu/core, or if you use libev in a project that doesn't use libev\n * from multiple threads, then you can define ECB_AVOID_PTHREADS when compiling\n * libev, in which cases the memory fences become nops.\n * alternatively, you can remove this #error and link against libpthread,\n * which will then provide the memory fences.\n */\n# error \"memory fences not defined for your architecture, please report\"\n#endif\n\n#ifndef ECB_MEMORY_FENCE\n# define ECB_MEMORY_FENCE do { } while (0)\n# define ECB_MEMORY_FENCE_ACQUIRE ECB_MEMORY_FENCE\n# define ECB_MEMORY_FENCE_RELEASE ECB_MEMORY_FENCE\n#endif\n\n#define expect_false(cond) ecb_expect_false (cond)\n#define expect_true(cond)  ecb_expect_true  (cond)\n#define noinline           ecb_noinline\n\n#define inline_size        ecb_inline\n\n#if EV_FEATURE_CODE\n# define inline_speed      ecb_inline\n#else\n# define inline_speed      static noinline\n#endif\n\n#define NUMPRI (EV_MAXPRI - EV_MINPRI + 1)\n\n#if EV_MINPRI == EV_MAXPRI\n# define ABSPRI(w) (((W)w), 0)\n#else\n# define ABSPRI(w) (((W)w)->priority - EV_MINPRI)\n#endif\n\n#define EMPTY       /* required for microsofts broken pseudo-c compiler */\n#define EMPTY2(a,b) /* used to suppress some warnings */\n\ntypedef ev_watcher *W;\ntypedef ev_watcher_list *WL;\ntypedef ev_watcher_time *WT;\n\n#define ev_active(w) ((W)(w))->active\n#define ev_at(w) ((WT)(w))->at\n\n#if EV_USE_REALTIME\n/* sig_atomic_t is used to avoid per-thread variables or locking but still */\n/* giving it a reasonably high chance of working on typical architectures */\nstatic EV_ATOMIC_T have_realtime; /* did clock_gettime (CLOCK_REALTIME) work? */\n#endif\n\n#if EV_USE_MONOTONIC\nstatic EV_ATOMIC_T have_monotonic; /* did clock_gettime (CLOCK_MONOTONIC) work? */\n#endif\n\n#ifndef EV_FD_TO_WIN32_HANDLE\n# define EV_FD_TO_WIN32_HANDLE(fd) _get_osfhandle (fd)\n#endif\n#ifndef EV_WIN32_HANDLE_TO_FD\n# define EV_WIN32_HANDLE_TO_FD(handle) _open_osfhandle (handle, 0)\n#endif\n#ifndef EV_WIN32_CLOSE_FD\n# define EV_WIN32_CLOSE_FD(fd) close (fd)\n#endif\n\n#ifdef _WIN32\n# include \"ev_win32.c\"\n#endif\n\n/*****************************************************************************/\n\n/* define a suitable floor function (only used by periodics atm) */\n\n#if EV_USE_FLOOR\n# include <math.h>\n# define ev_floor(v) floor (v)\n#else\n\n#include <float.h>\n\n/* a floor() replacement function, should be independent of ev_tstamp type */\nstatic ev_tstamp noinline\nev_floor (ev_tstamp v)\n{\n  /* the choice of shift factor is not terribly important */\n#if FLT_RADIX != 2 /* assume FLT_RADIX == 10 */\n  const ev_tstamp shift = sizeof (unsigned long) >= 8 ? 10000000000000000000. : 1000000000.;\n#else\n  const ev_tstamp shift = sizeof (unsigned long) >= 8 ? 18446744073709551616. : 4294967296.;\n#endif\n\n  /* argument too large for an unsigned long? */\n  if (expect_false (v >= shift))\n    {\n      ev_tstamp f;\n\n      if (v == v - 1.)\n        return v; /* very large number */\n\n      f = shift * ev_floor (v * (1. / shift));\n      return f + ev_floor (v - f);\n    }\n\n  /* special treatment for negative args? */\n  if (expect_false (v < 0.))\n    {\n      ev_tstamp f = -ev_floor (-v);\n\n      return f - (f == v ? 0 : 1);\n    }\n\n  /* fits into an unsigned long */\n  return (unsigned long)v;\n}\n\n#endif\n\n/*****************************************************************************/\n\n#ifdef __linux\n# include <sys/utsname.h>\n#endif\n\nstatic unsigned int noinline ecb_cold\nev_linux_version (void)\n{\n#ifdef __linux\n  unsigned int v = 0;\n  struct utsname buf;\n  int i;\n  char *p = buf.release;\n\n  if (uname (&buf))\n    return 0;\n\n  for (i = 3+1; --i; )\n    {\n      unsigned int c = 0;\n\n      for (;;)\n        {\n          if (*p >= '0' && *p <= '9')\n            c = c * 10 + *p++ - '0';\n          else\n            {\n              p += *p == '.';\n              break;\n            }\n        }\n\n      v = (v << 8) | c;\n    }\n\n  return v;\n#else\n  return 0;\n#endif\n}\n\n/*****************************************************************************/\n\n#if EV_AVOID_STDIO\nstatic void noinline ecb_cold\nev_printerr (const char *msg)\n{\n  write (STDERR_FILENO, msg, strlen (msg));\n}\n#endif\n\nstatic void (*syserr_cb)(const char *msg) EV_THROW;\n\nvoid ecb_cold\nev_set_syserr_cb (void (*cb)(const char *msg) EV_THROW) EV_THROW\n{\n  syserr_cb = cb;\n}\n\nstatic void noinline ecb_cold\nev_syserr (const char *msg)\n{\n  if (!msg)\n    msg = \"(libev) system error\";\n\n  if (syserr_cb)\n    syserr_cb (msg);\n  else\n    {\n#if EV_AVOID_STDIO\n      ev_printerr (msg);\n      ev_printerr (\": \");\n      ev_printerr (strerror (errno));\n      ev_printerr (\"\\n\");\n#else\n      perror (msg);\n#endif\n      abort ();\n    }\n}\n\nstatic void *\nev_realloc_emul (void *ptr, long size) EV_THROW\n{\n  /* some systems, notably openbsd and darwin, fail to properly\n   * implement realloc (x, 0) (as required by both ansi c-89 and\n   * the single unix specification, so work around them here.\n   * recently, also (at least) fedora and debian started breaking it,\n   * despite documenting it otherwise.\n   */\n\n  if (size)\n    return realloc (ptr, size);\n\n  free (ptr);\n  return 0;\n}\n\nstatic void *(*alloc)(void *ptr, long size) EV_THROW = ev_realloc_emul;\n\nvoid ecb_cold\nev_set_allocator (void *(*cb)(void *ptr, long size) EV_THROW) EV_THROW\n{\n  alloc = cb;\n}\n\ninline_speed void *\nev_realloc (void *ptr, long size)\n{\n  ptr = alloc (ptr, size);\n\n  if (!ptr && size)\n    {\n#if EV_AVOID_STDIO\n      ev_printerr (\"(libev) memory allocation failed, aborting.\\n\");\n#else\n      fprintf (stderr, \"(libev) cannot allocate %ld bytes, aborting.\", size);\n#endif\n      abort ();\n    }\n\n  return ptr;\n}\n\n#define ev_malloc(size) ev_realloc (0, (size))\n#define ev_free(ptr)    ev_realloc ((ptr), 0)\n\n/*****************************************************************************/\n\n/* set in reify when reification needed */\n#define EV_ANFD_REIFY 1\n\n/* file descriptor info structure */\ntypedef struct\n{\n  WL head;\n  unsigned char events; /* the events watched for */\n  unsigned char reify;  /* flag set when this ANFD needs reification (EV_ANFD_REIFY, EV__IOFDSET) */\n  unsigned char emask;  /* the epoll backend stores the actual kernel mask in here */\n  unsigned char unused;\n#if EV_USE_EPOLL\n  unsigned int egen;    /* generation counter to counter epoll bugs */\n#endif\n#if EV_SELECT_IS_WINSOCKET || EV_USE_IOCP\n  SOCKET handle;\n#endif\n#if EV_USE_IOCP\n  OVERLAPPED or, ow;\n#endif\n} ANFD;\n\n/* stores the pending event set for a given watcher */\ntypedef struct\n{\n  W w;\n  int events; /* the pending event set for the given watcher */\n} ANPENDING;\n\n#if EV_USE_INOTIFY\n/* hash table entry per inotify-id */\ntypedef struct\n{\n  WL head;\n} ANFS;\n#endif\n\n/* Heap Entry */\n#if EV_HEAP_CACHE_AT\n  /* a heap element */\n  typedef struct {\n    ev_tstamp at;\n    WT w;\n  } ANHE;\n\n  #define ANHE_w(he)        (he).w     /* access watcher, read-write */\n  #define ANHE_at(he)       (he).at    /* access cached at, read-only */\n  #define ANHE_at_cache(he) (he).at = (he).w->at /* update at from watcher */\n#else\n  /* a heap element */\n  typedef WT ANHE;\n\n  #define ANHE_w(he)        (he)\n  #define ANHE_at(he)       (he)->at\n  #define ANHE_at_cache(he)\n#endif\n\n#if EV_MULTIPLICITY\n\n  struct ev_loop\n  {\n    ev_tstamp ev_rt_now;\n    #define ev_rt_now ((loop)->ev_rt_now)\n    #define VAR(name,decl) decl;\n      #include \"ev_vars.h\"\n    #undef VAR\n  };\n  #include \"ev_wrap.h\"\n\n  static struct ev_loop default_loop_struct;\n  EV_API_DECL struct ev_loop *ev_default_loop_ptr = 0; /* needs to be initialised to make it a definition despite extern */\n\n#else\n\n  EV_API_DECL ev_tstamp ev_rt_now = 0; /* needs to be initialised to make it a definition despite extern */\n  #define VAR(name,decl) static decl;\n    #include \"ev_vars.h\"\n  #undef VAR\n\n  static int ev_default_loop_ptr;\n\n#endif\n\n#if EV_FEATURE_API\n# define EV_RELEASE_CB if (expect_false (release_cb)) release_cb (EV_A)\n# define EV_ACQUIRE_CB if (expect_false (acquire_cb)) acquire_cb (EV_A)\n# define EV_INVOKE_PENDING invoke_cb (EV_A)\n#else\n# define EV_RELEASE_CB (void)0\n# define EV_ACQUIRE_CB (void)0\n# define EV_INVOKE_PENDING ev_invoke_pending (EV_A)\n#endif\n\n#define EVBREAK_RECURSE 0x80\n\n/*****************************************************************************/\n\n#ifndef EV_HAVE_EV_TIME\nev_tstamp\nev_time (void) EV_THROW\n{\n#if EV_USE_REALTIME\n  if (expect_true (have_realtime))\n    {\n      struct timespec ts;\n      clock_gettime (CLOCK_REALTIME, &ts);\n      return ts.tv_sec + ts.tv_nsec * 1e-9;\n    }\n#endif\n\n  struct timeval tv;\n  gettimeofday (&tv, 0);\n  return tv.tv_sec + tv.tv_usec * 1e-6;\n}\n#endif\n\ninline_size ev_tstamp\nget_clock (void)\n{\n#if EV_USE_MONOTONIC\n  if (expect_true (have_monotonic))\n    {\n      struct timespec ts;\n      clock_gettime (CLOCK_MONOTONIC, &ts);\n      return ts.tv_sec + ts.tv_nsec * 1e-9;\n    }\n#endif\n\n  return ev_time ();\n}\n\n#if EV_MULTIPLICITY\nev_tstamp\nev_now (EV_P) EV_THROW\n{\n  return ev_rt_now;\n}\n#endif\n\nvoid\nev_sleep (ev_tstamp delay) EV_THROW\n{\n  if (delay > 0.)\n    {\n#if EV_USE_NANOSLEEP\n      struct timespec ts;\n\n      EV_TS_SET (ts, delay);\n      nanosleep (&ts, 0);\n#elif defined _WIN32\n      Sleep ((unsigned long)(delay * 1e3));\n#else\n      struct timeval tv;\n\n      /* here we rely on sys/time.h + sys/types.h + unistd.h providing select */\n      /* something not guaranteed by newer posix versions, but guaranteed */\n      /* by older ones */\n      EV_TV_SET (tv, delay);\n      select (0, 0, 0, 0, &tv);\n#endif\n    }\n}\n\n/*****************************************************************************/\n\n#define MALLOC_ROUND 4096 /* prefer to allocate in chunks of this size, must be 2**n and >> 4 longs */\n\n/* find a suitable new size for the given array, */\n/* hopefully by rounding to a nice-to-malloc size */\ninline_size int\narray_nextsize (int elem, int cur, int cnt)\n{\n  int ncur = cur + 1;\n\n  do\n    ncur <<= 1;\n  while (cnt > ncur);\n\n  /* if size is large, round to MALLOC_ROUND - 4 * longs to accommodate malloc overhead */\n  if (elem * ncur > MALLOC_ROUND - sizeof (void *) * 4)\n    {\n      ncur *= elem;\n      ncur = (ncur + elem + (MALLOC_ROUND - 1) + sizeof (void *) * 4) & ~(MALLOC_ROUND - 1);\n      ncur = ncur - sizeof (void *) * 4;\n      ncur /= elem;\n    }\n\n  return ncur;\n}\n\nstatic void * noinline ecb_cold\narray_realloc (int elem, void *base, int *cur, int cnt)\n{\n  *cur = array_nextsize (elem, *cur, cnt);\n  return ev_realloc (base, elem * *cur);\n}\n\n#define array_init_zero(base,count)\t\\\n  memset ((void *)(base), 0, sizeof (*(base)) * (count))\n\n#define array_needsize(type,base,cur,cnt,init)\t\t\t\\\n  if (expect_false ((cnt) > (cur)))\t\t\t\t\\\n    {\t\t\t\t\t\t\t\t\\\n      int ecb_unused ocur_ = (cur);\t\t\t\t\t\\\n      (base) = (type *)array_realloc\t\t\t\t\\\n         (sizeof (type), (base), &(cur), (cnt));\t\t\\\n      init ((base) + (ocur_), (cur) - ocur_);\t\t\t\\\n    }\n\n#if 0\n#define array_slim(type,stem)\t\t\t\t\t\\\n  if (stem ## max < array_roundsize (stem ## cnt >> 2))\t\t\\\n    {\t\t\t\t\t\t\t\t\\\n      stem ## max = array_roundsize (stem ## cnt >> 1);\t\t\\\n      base = (type *)ev_realloc (base, sizeof (type) * (stem ## max));\\\n      fprintf (stderr, \"slimmed down \" # stem \" to %d\\n\", stem ## max);/*D*/\\\n    }\n#endif\n\n#define array_free(stem, idx) \\\n  ev_free (stem ## s idx); stem ## cnt idx = stem ## max idx = 0; stem ## s idx = 0\n\n/*****************************************************************************/\n\n/* dummy callback for pending events */\nstatic void noinline\npendingcb (EV_P_ ev_prepare *w, int revents)\n{\n}\n\nvoid noinline\nev_feed_event (EV_P_ void *w, int revents) EV_THROW\n{\n  W w_ = (W)w;\n  int pri = ABSPRI (w_);\n\n  if (expect_false (w_->pending))\n    pendings [pri][w_->pending - 1].events |= revents;\n  else\n    {\n      w_->pending = ++pendingcnt [pri];\n      array_needsize (ANPENDING, pendings [pri], pendingmax [pri], w_->pending, EMPTY2);\n      pendings [pri][w_->pending - 1].w      = w_;\n      pendings [pri][w_->pending - 1].events = revents;\n    }\n\n  pendingpri = NUMPRI - 1;\n}\n\ninline_speed void\nfeed_reverse (EV_P_ W w)\n{\n  array_needsize (W, rfeeds, rfeedmax, rfeedcnt + 1, EMPTY2);\n  rfeeds [rfeedcnt++] = w;\n}\n\ninline_size void\nfeed_reverse_done (EV_P_ int revents)\n{\n  do\n    ev_feed_event (EV_A_ rfeeds [--rfeedcnt], revents);\n  while (rfeedcnt);\n}\n\ninline_speed void\nqueue_events (EV_P_ W *events, int eventcnt, int type)\n{\n  int i;\n\n  for (i = 0; i < eventcnt; ++i)\n    ev_feed_event (EV_A_ events [i], type);\n}\n\n/*****************************************************************************/\n\ninline_speed void\nfd_event_nocheck (EV_P_ int fd, int revents)\n{\n  ANFD *anfd = anfds + fd;\n  ev_io *w;\n\n  for (w = (ev_io *)anfd->head; w; w = (ev_io *)((WL)w)->next)\n    {\n      int ev = w->events & revents;\n\n      if (ev)\n        ev_feed_event (EV_A_ (W)w, ev);\n    }\n}\n\n/* do not submit kernel events for fds that have reify set */\n/* because that means they changed while we were polling for new events */\ninline_speed void\nfd_event (EV_P_ int fd, int revents)\n{\n  ANFD *anfd = anfds + fd;\n\n  if (expect_true (!anfd->reify))\n    fd_event_nocheck (EV_A_ fd, revents);\n}\n\nvoid\nev_feed_fd_event (EV_P_ int fd, int revents) EV_THROW\n{\n  if (fd >= 0 && fd < anfdmax)\n    fd_event_nocheck (EV_A_ fd, revents);\n}\n\n/* make sure the external fd watch events are in-sync */\n/* with the kernel/libev internal state */\ninline_size void\nfd_reify (EV_P)\n{\n  int i;\n\n#if EV_SELECT_IS_WINSOCKET || EV_USE_IOCP\n  for (i = 0; i < fdchangecnt; ++i)\n    {\n      int fd = fdchanges [i];\n      ANFD *anfd = anfds + fd;\n\n      if (anfd->reify & EV__IOFDSET && anfd->head)\n        {\n          SOCKET handle = EV_FD_TO_WIN32_HANDLE (fd);\n\n          if (handle != anfd->handle)\n            {\n              unsigned long arg;\n\n              assert ((\"libev: only socket fds supported in this configuration\", ioctlsocket (handle, FIONREAD, &arg) == 0));\n\n              /* handle changed, but fd didn't - we need to do it in two steps */\n              backend_modify (EV_A_ fd, anfd->events, 0);\n              anfd->events = 0;\n              anfd->handle = handle;\n            }\n        }\n    }\n#endif\n\n  for (i = 0; i < fdchangecnt; ++i)\n    {\n      int fd = fdchanges [i];\n      ANFD *anfd = anfds + fd;\n      ev_io *w;\n\n      unsigned char o_events = anfd->events;\n      unsigned char o_reify  = anfd->reify;\n\n      anfd->reify  = 0;\n\n      /*if (expect_true (o_reify & EV_ANFD_REIFY)) probably a deoptimisation */\n        {\n          anfd->events = 0;\n\n          for (w = (ev_io *)anfd->head; w; w = (ev_io *)((WL)w)->next)\n            anfd->events |= (unsigned char)w->events;\n\n          if (o_events != anfd->events)\n            o_reify = EV__IOFDSET; /* actually |= */\n        }\n\n      if (o_reify & EV__IOFDSET)\n        backend_modify (EV_A_ fd, o_events, anfd->events);\n    }\n\n  fdchangecnt = 0;\n}\n\n/* something about the given fd changed */\ninline_size void\nfd_change (EV_P_ int fd, int flags)\n{\n  unsigned char reify = anfds [fd].reify;\n  anfds [fd].reify |= flags;\n\n  if (expect_true (!reify))\n    {\n      ++fdchangecnt;\n      array_needsize (int, fdchanges, fdchangemax, fdchangecnt, EMPTY2);\n      fdchanges [fdchangecnt - 1] = fd;\n    }\n}\n\n/* the given fd is invalid/unusable, so make sure it doesn't hurt us anymore */\ninline_speed void ecb_cold\nfd_kill (EV_P_ int fd)\n{\n  ev_io *w;\n\n  while ((w = (ev_io *)anfds [fd].head))\n    {\n      ev_io_stop (EV_A_ w);\n      ev_feed_event (EV_A_ (W)w, EV_ERROR | EV_READ | EV_WRITE);\n    }\n}\n\n/* check whether the given fd is actually valid, for error recovery */\ninline_size int ecb_cold\nfd_valid (int fd)\n{\n#ifdef _WIN32\n  return EV_FD_TO_WIN32_HANDLE (fd) != -1;\n#else\n  return fcntl (fd, F_GETFD) != -1;\n#endif\n}\n\n/* called on EBADF to verify fds */\nstatic void noinline ecb_cold\nfd_ebadf (EV_P)\n{\n  int fd;\n\n  for (fd = 0; fd < anfdmax; ++fd)\n    if (anfds [fd].events)\n      if (!fd_valid (fd) && errno == EBADF)\n        fd_kill (EV_A_ fd);\n}\n\n/* called on ENOMEM in select/poll to kill some fds and retry */\nstatic void noinline ecb_cold\nfd_enomem (EV_P)\n{\n  int fd;\n\n  for (fd = anfdmax; fd--; )\n    if (anfds [fd].events)\n      {\n        fd_kill (EV_A_ fd);\n        break;\n      }\n}\n\n/* usually called after fork if backend needs to re-arm all fds from scratch */\nstatic void noinline\nfd_rearm_all (EV_P)\n{\n  int fd;\n\n  for (fd = 0; fd < anfdmax; ++fd)\n    if (anfds [fd].events)\n      {\n        anfds [fd].events = 0;\n        anfds [fd].emask  = 0;\n        fd_change (EV_A_ fd, EV__IOFDSET | EV_ANFD_REIFY);\n      }\n}\n\n/* used to prepare libev internal fd's */\n/* this is not fork-safe */\ninline_speed void\nfd_intern (int fd)\n{\n#ifdef _WIN32\n  unsigned long arg = 1;\n  ioctlsocket (EV_FD_TO_WIN32_HANDLE (fd), FIONBIO, &arg);\n#else\n  fcntl (fd, F_SETFD, FD_CLOEXEC);\n  fcntl (fd, F_SETFL, O_NONBLOCK);\n#endif\n}\n\n/*****************************************************************************/\n\n/*\n * the heap functions want a real array index. array index 0 is guaranteed to not\n * be in-use at any time. the first heap entry is at array [HEAP0]. DHEAP gives\n * the branching factor of the d-tree.\n */\n\n/*\n * at the moment we allow libev the luxury of two heaps,\n * a small-code-size 2-heap one and a ~1.5kb larger 4-heap\n * which is more cache-efficient.\n * the difference is about 5% with 50000+ watchers.\n */\n#if EV_USE_4HEAP\n\n#define DHEAP 4\n#define HEAP0 (DHEAP - 1) /* index of first element in heap */\n#define HPARENT(k) ((((k) - HEAP0 - 1) / DHEAP) + HEAP0)\n#define UPHEAP_DONE(p,k) ((p) == (k))\n\n/* away from the root */\ninline_speed void\ndownheap (ANHE *heap, int N, int k)\n{\n  ANHE he = heap [k];\n  ANHE *E = heap + N + HEAP0;\n\n  for (;;)\n    {\n      ev_tstamp minat;\n      ANHE *minpos;\n      ANHE *pos = heap + DHEAP * (k - HEAP0) + HEAP0 + 1;\n\n      /* find minimum child */\n      if (expect_true (pos + DHEAP - 1 < E))\n        {\n          /* fast path */                               (minpos = pos + 0), (minat = ANHE_at (*minpos));\n          if (               ANHE_at (pos [1]) < minat) (minpos = pos + 1), (minat = ANHE_at (*minpos));\n          if (               ANHE_at (pos [2]) < minat) (minpos = pos + 2), (minat = ANHE_at (*minpos));\n          if (               ANHE_at (pos [3]) < minat) (minpos = pos + 3), (minat = ANHE_at (*minpos));\n        }\n      else if (pos < E)\n        {\n          /* slow path */                               (minpos = pos + 0), (minat = ANHE_at (*minpos));\n          if (pos + 1 < E && ANHE_at (pos [1]) < minat) (minpos = pos + 1), (minat = ANHE_at (*minpos));\n          if (pos + 2 < E && ANHE_at (pos [2]) < minat) (minpos = pos + 2), (minat = ANHE_at (*minpos));\n          if (pos + 3 < E && ANHE_at (pos [3]) < minat) (minpos = pos + 3), (minat = ANHE_at (*minpos));\n        }\n      else\n        break;\n\n      if (ANHE_at (he) <= minat)\n        break;\n\n      heap [k] = *minpos;\n      ev_active (ANHE_w (*minpos)) = k;\n\n      k = minpos - heap;\n    }\n\n  heap [k] = he;\n  ev_active (ANHE_w (he)) = k;\n}\n\n#else /* 4HEAP */\n\n#define HEAP0 1\n#define HPARENT(k) ((k) >> 1)\n#define UPHEAP_DONE(p,k) (!(p))\n\n/* away from the root */\ninline_speed void\ndownheap (ANHE *heap, int N, int k)\n{\n  ANHE he = heap [k];\n\n  for (;;)\n    {\n      int c = k << 1;\n\n      if (c >= N + HEAP0)\n        break;\n\n      c += c + 1 < N + HEAP0 && ANHE_at (heap [c]) > ANHE_at (heap [c + 1])\n           ? 1 : 0;\n\n      if (ANHE_at (he) <= ANHE_at (heap [c]))\n        break;\n\n      heap [k] = heap [c];\n      ev_active (ANHE_w (heap [k])) = k;\n      \n      k = c;\n    }\n\n  heap [k] = he;\n  ev_active (ANHE_w (he)) = k;\n}\n#endif\n\n/* towards the root */\ninline_speed void\nupheap (ANHE *heap, int k)\n{\n  ANHE he = heap [k];\n\n  for (;;)\n    {\n      int p = HPARENT (k);\n\n      if (UPHEAP_DONE (p, k) || ANHE_at (heap [p]) <= ANHE_at (he))\n        break;\n\n      heap [k] = heap [p];\n      ev_active (ANHE_w (heap [k])) = k;\n      k = p;\n    }\n\n  heap [k] = he;\n  ev_active (ANHE_w (he)) = k;\n}\n\n/* move an element suitably so it is in a correct place */\ninline_size void\nadjustheap (ANHE *heap, int N, int k)\n{\n  if (k > HEAP0 && ANHE_at (heap [k]) <= ANHE_at (heap [HPARENT (k)]))\n    upheap (heap, k);\n  else\n    downheap (heap, N, k);\n}\n\n/* rebuild the heap: this function is used only once and executed rarely */\ninline_size void\nreheap (ANHE *heap, int N)\n{\n  int i;\n\n  /* we don't use floyds algorithm, upheap is simpler and is more cache-efficient */\n  /* also, this is easy to implement and correct for both 2-heaps and 4-heaps */\n  for (i = 0; i < N; ++i)\n    upheap (heap, i + HEAP0);\n}\n\n/*****************************************************************************/\n\n/* associate signal watchers to a signal signal */\ntypedef struct\n{\n  EV_ATOMIC_T pending;\n#if EV_MULTIPLICITY\n  EV_P;\n#endif\n  WL head;\n} ANSIG;\n\nstatic ANSIG signals [EV_NSIG - 1];\n\n/*****************************************************************************/\n\n#if EV_SIGNAL_ENABLE || EV_ASYNC_ENABLE\n\nstatic void noinline ecb_cold\nevpipe_init (EV_P)\n{\n  if (!ev_is_active (&pipe_w))\n    {\n      int fds [2];\n\n# if EV_USE_EVENTFD\n      fds [0] = -1;\n      fds [1] = eventfd (0, EFD_NONBLOCK | EFD_CLOEXEC);\n      if (fds [1] < 0 && errno == EINVAL)\n        fds [1] = eventfd (0, 0);\n\n      if (fds [1] < 0)\n# endif\n        {\n          while (pipe (fds))\n            ev_syserr (\"(libev) error creating signal/async pipe\");\n\n          fd_intern (fds [0]);\n        }\n\n      evpipe [0] = fds [0];\n\n      if (evpipe [1] < 0)\n        evpipe [1] = fds [1]; /* first call, set write fd */\n      else\n        {\n          /* on subsequent calls, do not change evpipe [1] */\n          /* so that evpipe_write can always rely on its value. */\n          /* this branch does not do anything sensible on windows, */\n          /* so must not be executed on windows */\n\n          dup2 (fds [1], evpipe [1]);\n          close (fds [1]);\n        }\n\n      fd_intern (evpipe [1]);\n\n      ev_io_set (&pipe_w, evpipe [0] < 0 ? evpipe [1] : evpipe [0], EV_READ);\n      ev_io_start (EV_A_ &pipe_w);\n      ev_unref (EV_A); /* watcher should not keep loop alive */\n    }\n}\n\ninline_speed void\nevpipe_write (EV_P_ EV_ATOMIC_T *flag)\n{\n  ECB_MEMORY_FENCE; /* push out the write before this function was called, acquire flag */\n\n  if (expect_true (*flag))\n    return;\n\n  *flag = 1;\n  ECB_MEMORY_FENCE_RELEASE; /* make sure flag is visible before the wakeup */\n\n  pipe_write_skipped = 1;\n\n  ECB_MEMORY_FENCE; /* make sure pipe_write_skipped is visible before we check pipe_write_wanted */\n\n  if (pipe_write_wanted)\n    {\n      int old_errno;\n\n      pipe_write_skipped = 0;\n      ECB_MEMORY_FENCE_RELEASE;\n\n      old_errno = errno; /* save errno because write will clobber it */\n\n#if EV_USE_EVENTFD\n      if (evpipe [0] < 0)\n        {\n          uint64_t counter = 1;\n          write (evpipe [1], &counter, sizeof (uint64_t));\n        }\n      else\n#endif\n        {\n#ifdef _WIN32\n          WSABUF buf;\n          DWORD sent;\n          buf.buf = &buf;\n          buf.len = 1;\n          WSASend (EV_FD_TO_WIN32_HANDLE (evpipe [1]), &buf, 1, &sent, 0, 0, 0);\n#else\n          write (evpipe [1], &(evpipe [1]), 1);\n#endif\n        }\n\n      errno = old_errno;\n    }\n}\n\n/* called whenever the libev signal pipe */\n/* got some events (signal, async) */\nstatic void\npipecb (EV_P_ ev_io *iow, int revents)\n{\n  int i;\n\n  if (revents & EV_READ)\n    {\n#if EV_USE_EVENTFD\n      if (evpipe [0] < 0)\n        {\n          uint64_t counter;\n          read (evpipe [1], &counter, sizeof (uint64_t));\n        }\n      else\n#endif\n        {\n          char dummy[4];\n#ifdef _WIN32\n          WSABUF buf;\n          DWORD recvd;\n          DWORD flags = 0;\n          buf.buf = dummy;\n          buf.len = sizeof (dummy);\n          WSARecv (EV_FD_TO_WIN32_HANDLE (evpipe [0]), &buf, 1, &recvd, &flags, 0, 0);\n#else\n          read (evpipe [0], &dummy, sizeof (dummy));\n#endif\n        }\n    }\n\n  pipe_write_skipped = 0;\n\n  ECB_MEMORY_FENCE; /* push out skipped, acquire flags */\n\n#if EV_SIGNAL_ENABLE\n  if (sig_pending)\n    {\n      sig_pending = 0;\n\n      ECB_MEMORY_FENCE;\n\n      for (i = EV_NSIG - 1; i--; )\n        if (expect_false (signals [i].pending))\n          ev_feed_signal_event (EV_A_ i + 1);\n    }\n#endif\n\n#if EV_ASYNC_ENABLE\n  if (async_pending)\n    {\n      async_pending = 0;\n\n      ECB_MEMORY_FENCE;\n\n      for (i = asynccnt; i--; )\n        if (asyncs [i]->sent)\n          {\n            asyncs [i]->sent = 0;\n            ECB_MEMORY_FENCE_RELEASE;\n            ev_feed_event (EV_A_ asyncs [i], EV_ASYNC);\n          }\n    }\n#endif\n}\n\n/*****************************************************************************/\n\nvoid\nev_feed_signal (int signum) EV_THROW\n{\n#if EV_MULTIPLICITY\n  EV_P;\n  ECB_MEMORY_FENCE_ACQUIRE;\n  EV_A = signals [signum - 1].loop;\n\n  if (!EV_A)\n    return;\n#endif\n\n  signals [signum - 1].pending = 1;\n  evpipe_write (EV_A_ &sig_pending);\n}\n\nstatic void\nev_sighandler (int signum)\n{\n#ifdef _WIN32\n  signal (signum, ev_sighandler);\n#endif\n\n  ev_feed_signal (signum);\n}\n\nvoid noinline\nev_feed_signal_event (EV_P_ int signum) EV_THROW\n{\n  WL w;\n\n  if (expect_false (signum <= 0 || signum >= EV_NSIG))\n    return;\n\n  --signum;\n\n#if EV_MULTIPLICITY\n  /* it is permissible to try to feed a signal to the wrong loop */\n  /* or, likely more useful, feeding a signal nobody is waiting for */\n\n  if (expect_false (signals [signum].loop != EV_A))\n    return;\n#endif\n\n  signals [signum].pending = 0;\n  ECB_MEMORY_FENCE_RELEASE;\n\n  for (w = signals [signum].head; w; w = w->next)\n    ev_feed_event (EV_A_ (W)w, EV_SIGNAL);\n}\n\n#if EV_USE_SIGNALFD\nstatic void\nsigfdcb (EV_P_ ev_io *iow, int revents)\n{\n  struct signalfd_siginfo si[2], *sip; /* these structs are big */\n\n  for (;;)\n    {\n      ssize_t res = read (sigfd, si, sizeof (si));\n\n      /* not ISO-C, as res might be -1, but works with SuS */\n      for (sip = si; (char *)sip < (char *)si + res; ++sip)\n        ev_feed_signal_event (EV_A_ sip->ssi_signo);\n\n      if (res < (ssize_t)sizeof (si))\n        break;\n    }\n}\n#endif\n\n#endif\n\n/*****************************************************************************/\n\n#if EV_CHILD_ENABLE\nstatic WL childs [EV_PID_HASHSIZE];\n\nstatic ev_signal childev;\n\n#ifndef WIFCONTINUED\n# define WIFCONTINUED(status) 0\n#endif\n\n/* handle a single child status event */\ninline_speed void\nchild_reap (EV_P_ int chain, int pid, int status)\n{\n  ev_child *w;\n  int traced = WIFSTOPPED (status) || WIFCONTINUED (status);\n\n  for (w = (ev_child *)childs [chain & ((EV_PID_HASHSIZE) - 1)]; w; w = (ev_child *)((WL)w)->next)\n    {\n      if ((w->pid == pid || !w->pid)\n          && (!traced || (w->flags & 1)))\n        {\n          ev_set_priority (w, EV_MAXPRI); /* need to do it *now*, this *must* be the same prio as the signal watcher itself */\n          w->rpid    = pid;\n          w->rstatus = status;\n          ev_feed_event (EV_A_ (W)w, EV_CHILD);\n        }\n    }\n}\n\n#ifndef WCONTINUED\n# define WCONTINUED 0\n#endif\n\n/* called on sigchld etc., calls waitpid */\nstatic void\nchildcb (EV_P_ ev_signal *sw, int revents)\n{\n  int pid, status;\n\n  /* some systems define WCONTINUED but then fail to support it (linux 2.4) */\n  if (0 >= (pid = waitpid (-1, &status, WNOHANG | WUNTRACED | WCONTINUED)))\n    if (!WCONTINUED\n        || errno != EINVAL\n        || 0 >= (pid = waitpid (-1, &status, WNOHANG | WUNTRACED)))\n      return;\n\n  /* make sure we are called again until all children have been reaped */\n  /* we need to do it this way so that the callback gets called before we continue */\n  ev_feed_event (EV_A_ (W)sw, EV_SIGNAL);\n\n  child_reap (EV_A_ pid, pid, status);\n  if ((EV_PID_HASHSIZE) > 1)\n    child_reap (EV_A_ 0, pid, status); /* this might trigger a watcher twice, but feed_event catches that */\n}\n\n#endif\n\n/*****************************************************************************/\n\n#if EV_USE_IOCP\n# include \"ev_iocp.c\"\n#endif\n#if EV_USE_PORT\n# include \"ev_port.c\"\n#endif\n#if EV_USE_KQUEUE\n# include \"ev_kqueue.c\"\n#endif\n#if EV_USE_EPOLL\n# include \"ev_epoll.c\"\n#endif\n#if EV_USE_POLL\n# include \"ev_poll.c\"\n#endif\n#if EV_USE_SELECT\n# include \"ev_select.c\"\n#endif\n\nint ecb_cold\nev_version_major (void) EV_THROW\n{\n  return EV_VERSION_MAJOR;\n}\n\nint ecb_cold\nev_version_minor (void) EV_THROW\n{\n  return EV_VERSION_MINOR;\n}\n\n/* return true if we are running with elevated privileges and should ignore env variables */\nint inline_size ecb_cold\nenable_secure (void)\n{\n#ifdef _WIN32\n  return 0;\n#else\n  return getuid () != geteuid ()\n      || getgid () != getegid ();\n#endif\n}\n\nunsigned int ecb_cold\nev_supported_backends (void) EV_THROW\n{\n  unsigned int flags = 0;\n\n  if (EV_USE_PORT  ) flags |= EVBACKEND_PORT;\n  if (EV_USE_KQUEUE) flags |= EVBACKEND_KQUEUE;\n  if (EV_USE_EPOLL ) flags |= EVBACKEND_EPOLL;\n  if (EV_USE_POLL  ) flags |= EVBACKEND_POLL;\n  if (EV_USE_SELECT) flags |= EVBACKEND_SELECT;\n  \n  return flags;\n}\n\nunsigned int ecb_cold\nev_recommended_backends (void) EV_THROW\n{\n  unsigned int flags = ev_supported_backends ();\n\n#ifndef __NetBSD__\n  /* kqueue is borked on everything but netbsd apparently */\n  /* it usually doesn't work correctly on anything but sockets and pipes */\n  flags &= ~EVBACKEND_KQUEUE;\n#endif\n#ifdef __APPLE__\n  /* only select works correctly on that \"unix-certified\" platform */\n  flags &= ~EVBACKEND_KQUEUE; /* horribly broken, even for sockets */\n  flags &= ~EVBACKEND_POLL;   /* poll is based on kqueue from 10.5 onwards */\n#endif\n#ifdef __FreeBSD__\n  flags &= ~EVBACKEND_POLL;   /* poll return value is unusable (http://forums.freebsd.org/archive/index.php/t-10270.html) */\n#endif\n\n  return flags;\n}\n\nunsigned int ecb_cold\nev_embeddable_backends (void) EV_THROW\n{\n  int flags = EVBACKEND_EPOLL | EVBACKEND_KQUEUE | EVBACKEND_PORT;\n\n  /* epoll embeddability broken on all linux versions up to at least 2.6.23 */\n  if (ev_linux_version () < 0x020620) /* disable it on linux < 2.6.32 */\n    flags &= ~EVBACKEND_EPOLL;\n\n  return flags;\n}\n\nunsigned int\nev_backend (EV_P) EV_THROW\n{\n  return backend;\n}\n\n#if EV_FEATURE_API\nunsigned int\nev_iteration (EV_P) EV_THROW\n{\n  return loop_count;\n}\n\nunsigned int\nev_depth (EV_P) EV_THROW\n{\n  return loop_depth;\n}\n\nvoid\nev_set_io_collect_interval (EV_P_ ev_tstamp interval) EV_THROW\n{\n  io_blocktime = interval;\n}\n\nvoid\nev_set_timeout_collect_interval (EV_P_ ev_tstamp interval) EV_THROW\n{\n  timeout_blocktime = interval;\n}\n\nvoid\nev_set_userdata (EV_P_ void *data) EV_THROW\n{\n  userdata = data;\n}\n\nvoid *\nev_userdata (EV_P) EV_THROW\n{\n  return userdata;\n}\n\nvoid\nev_set_invoke_pending_cb (EV_P_ ev_loop_callback invoke_pending_cb) EV_THROW\n{\n  invoke_cb = invoke_pending_cb;\n}\n\nvoid\nev_set_loop_release_cb (EV_P_ void (*release)(EV_P) EV_THROW, void (*acquire)(EV_P) EV_THROW) EV_THROW\n{\n  release_cb = release;\n  acquire_cb = acquire;\n}\n#endif\n\n/* initialise a loop structure, must be zero-initialised */\nstatic void noinline ecb_cold\nloop_init (EV_P_ unsigned int flags) EV_THROW\n{\n  if (!backend)\n    {\n      origflags = flags;\n\n#if EV_USE_REALTIME\n      if (!have_realtime)\n        {\n          struct timespec ts;\n\n          if (!clock_gettime (CLOCK_REALTIME, &ts))\n            have_realtime = 1;\n        }\n#endif\n\n#if EV_USE_MONOTONIC\n      if (!have_monotonic)\n        {\n          struct timespec ts;\n\n          if (!clock_gettime (CLOCK_MONOTONIC, &ts))\n            have_monotonic = 1;\n        }\n#endif\n\n      /* pid check not overridable via env */\n#ifndef _WIN32\n      if (flags & EVFLAG_FORKCHECK)\n        curpid = getpid ();\n#endif\n\n      if (!(flags & EVFLAG_NOENV)\n          && !enable_secure ()\n          && getenv (\"LIBEV_FLAGS\"))\n        flags = atoi (getenv (\"LIBEV_FLAGS\"));\n\n      ev_rt_now          = ev_time ();\n      mn_now             = get_clock ();\n      now_floor          = mn_now;\n      rtmn_diff          = ev_rt_now - mn_now;\n#if EV_FEATURE_API\n      invoke_cb          = ev_invoke_pending;\n#endif\n\n      io_blocktime       = 0.;\n      timeout_blocktime  = 0.;\n      backend            = 0;\n      backend_fd         = -1;\n      sig_pending        = 0;\n#if EV_ASYNC_ENABLE\n      async_pending      = 0;\n#endif\n      pipe_write_skipped = 0;\n      pipe_write_wanted  = 0;\n      evpipe [0]         = -1;\n      evpipe [1]         = -1;\n#if EV_USE_INOTIFY\n      fs_fd              = flags & EVFLAG_NOINOTIFY ? -1 : -2;\n#endif\n#if EV_USE_SIGNALFD\n      sigfd              = flags & EVFLAG_SIGNALFD  ? -2 : -1;\n#endif\n\n      if (!(flags & EVBACKEND_MASK))\n        flags |= ev_recommended_backends ();\n\n#if EV_USE_IOCP\n      if (!backend && (flags & EVBACKEND_IOCP  )) backend = iocp_init   (EV_A_ flags);\n#endif\n#if EV_USE_PORT\n      if (!backend && (flags & EVBACKEND_PORT  )) backend = port_init   (EV_A_ flags);\n#endif\n#if EV_USE_KQUEUE\n      if (!backend && (flags & EVBACKEND_KQUEUE)) backend = kqueue_init (EV_A_ flags);\n#endif\n#if EV_USE_EPOLL\n      if (!backend && (flags & EVBACKEND_EPOLL )) backend = epoll_init  (EV_A_ flags);\n#endif\n#if EV_USE_POLL\n      if (!backend && (flags & EVBACKEND_POLL  )) backend = poll_init   (EV_A_ flags);\n#endif\n#if EV_USE_SELECT\n      if (!backend && (flags & EVBACKEND_SELECT)) backend = select_init (EV_A_ flags);\n#endif\n\n      ev_prepare_init (&pending_w, pendingcb);\n\n#if EV_SIGNAL_ENABLE || EV_ASYNC_ENABLE\n      ev_init (&pipe_w, pipecb);\n      ev_set_priority (&pipe_w, EV_MAXPRI);\n#endif\n    }\n}\n\n/* free up a loop structure */\nvoid ecb_cold\nev_loop_destroy (EV_P)\n{\n  int i;\n\n#if EV_MULTIPLICITY\n  /* mimic free (0) */\n  if (!EV_A)\n    return;\n#endif\n\n#if EV_CLEANUP_ENABLE\n  /* queue cleanup watchers (and execute them) */\n  if (expect_false (cleanupcnt))\n    {\n      queue_events (EV_A_ (W *)cleanups, cleanupcnt, EV_CLEANUP);\n      EV_INVOKE_PENDING;\n    }\n#endif\n\n#if EV_CHILD_ENABLE\n  if (ev_is_default_loop (EV_A) && ev_is_active (&childev))\n    {\n      ev_ref (EV_A); /* child watcher */\n      ev_signal_stop (EV_A_ &childev);\n    }\n#endif\n\n  if (ev_is_active (&pipe_w))\n    {\n      /*ev_ref (EV_A);*/\n      /*ev_io_stop (EV_A_ &pipe_w);*/\n\n      if (evpipe [0] >= 0) EV_WIN32_CLOSE_FD (evpipe [0]);\n      if (evpipe [1] >= 0) EV_WIN32_CLOSE_FD (evpipe [1]);\n    }\n\n#if EV_USE_SIGNALFD\n  if (ev_is_active (&sigfd_w))\n    close (sigfd);\n#endif\n\n#if EV_USE_INOTIFY\n  if (fs_fd >= 0)\n    close (fs_fd);\n#endif\n\n  if (backend_fd >= 0)\n    close (backend_fd);\n\n#if EV_USE_IOCP\n  if (backend == EVBACKEND_IOCP  ) iocp_destroy   (EV_A);\n#endif\n#if EV_USE_PORT\n  if (backend == EVBACKEND_PORT  ) port_destroy   (EV_A);\n#endif\n#if EV_USE_KQUEUE\n  if (backend == EVBACKEND_KQUEUE) kqueue_destroy (EV_A);\n#endif\n#if EV_USE_EPOLL\n  if (backend == EVBACKEND_EPOLL ) epoll_destroy  (EV_A);\n#endif\n#if EV_USE_POLL\n  if (backend == EVBACKEND_POLL  ) poll_destroy   (EV_A);\n#endif\n#if EV_USE_SELECT\n  if (backend == EVBACKEND_SELECT) select_destroy (EV_A);\n#endif\n\n  for (i = NUMPRI; i--; )\n    {\n      array_free (pending, [i]);\n#if EV_IDLE_ENABLE\n      array_free (idle, [i]);\n#endif\n    }\n\n  ev_free (anfds); anfds = 0; anfdmax = 0;\n\n  /* have to use the microsoft-never-gets-it-right macro */\n  array_free (rfeed, EMPTY);\n  array_free (fdchange, EMPTY);\n  array_free (timer, EMPTY);\n#if EV_PERIODIC_ENABLE\n  array_free (periodic, EMPTY);\n#endif\n#if EV_FORK_ENABLE\n  array_free (fork, EMPTY);\n#endif\n#if EV_CLEANUP_ENABLE\n  array_free (cleanup, EMPTY);\n#endif\n  array_free (prepare, EMPTY);\n  array_free (check, EMPTY);\n#if EV_ASYNC_ENABLE\n  array_free (async, EMPTY);\n#endif\n\n  backend = 0;\n\n#if EV_MULTIPLICITY\n  if (ev_is_default_loop (EV_A))\n#endif\n    ev_default_loop_ptr = 0;\n#if EV_MULTIPLICITY\n  else\n    ev_free (EV_A);\n#endif\n}\n\n#if EV_USE_INOTIFY\ninline_size void infy_fork (EV_P);\n#endif\n\ninline_size void\nloop_fork (EV_P)\n{\n#if EV_USE_PORT\n  if (backend == EVBACKEND_PORT  ) port_fork   (EV_A);\n#endif\n#if EV_USE_KQUEUE\n  if (backend == EVBACKEND_KQUEUE) kqueue_fork (EV_A);\n#endif\n#if EV_USE_EPOLL\n  if (backend == EVBACKEND_EPOLL ) epoll_fork  (EV_A);\n#endif\n#if EV_USE_INOTIFY\n  infy_fork (EV_A);\n#endif\n\n#if EV_SIGNAL_ENABLE || EV_ASYNC_ENABLE\n  if (ev_is_active (&pipe_w) && postfork != 2)\n    {\n      /* pipe_write_wanted must be false now, so modifying fd vars should be safe */\n\n      ev_ref (EV_A);\n      ev_io_stop (EV_A_ &pipe_w);\n\n      if (evpipe [0] >= 0)\n        EV_WIN32_CLOSE_FD (evpipe [0]);\n\n      evpipe_init (EV_A);\n      /* iterate over everything, in case we missed something before */\n      ev_feed_event (EV_A_ &pipe_w, EV_CUSTOM);\n    }\n#endif\n\n  postfork = 0;\n}\n\n#if EV_MULTIPLICITY\n\nstruct ev_loop * ecb_cold\nev_loop_new (unsigned int flags) EV_THROW\n{\n  EV_P = (struct ev_loop *)ev_malloc (sizeof (struct ev_loop));\n\n  memset (EV_A, 0, sizeof (struct ev_loop));\n  loop_init (EV_A_ flags);\n\n  if (ev_backend (EV_A))\n    return EV_A;\n\n  ev_free (EV_A);\n  return 0;\n}\n\n#endif /* multiplicity */\n\n#if EV_VERIFY\nstatic void noinline ecb_cold\nverify_watcher (EV_P_ W w)\n{\n  assert ((\"libev: watcher has invalid priority\", ABSPRI (w) >= 0 && ABSPRI (w) < NUMPRI));\n\n  if (w->pending)\n    assert ((\"libev: pending watcher not on pending queue\", pendings [ABSPRI (w)][w->pending - 1].w == w));\n}\n\nstatic void noinline ecb_cold\nverify_heap (EV_P_ ANHE *heap, int N)\n{\n  int i;\n\n  for (i = HEAP0; i < N + HEAP0; ++i)\n    {\n      assert ((\"libev: active index mismatch in heap\", ev_active (ANHE_w (heap [i])) == i));\n      assert ((\"libev: heap condition violated\", i == HEAP0 || ANHE_at (heap [HPARENT (i)]) <= ANHE_at (heap [i])));\n      assert ((\"libev: heap at cache mismatch\", ANHE_at (heap [i]) == ev_at (ANHE_w (heap [i]))));\n\n      verify_watcher (EV_A_ (W)ANHE_w (heap [i]));\n    }\n}\n\nstatic void noinline ecb_cold\narray_verify (EV_P_ W *ws, int cnt)\n{\n  while (cnt--)\n    {\n      assert ((\"libev: active index mismatch\", ev_active (ws [cnt]) == cnt + 1));\n      verify_watcher (EV_A_ ws [cnt]);\n    }\n}\n#endif\n\n#if EV_FEATURE_API\nvoid ecb_cold\nev_verify (EV_P) EV_THROW\n{\n#if EV_VERIFY\n  int i;\n  WL w, w2;\n\n  assert (activecnt >= -1);\n\n  assert (fdchangemax >= fdchangecnt);\n  for (i = 0; i < fdchangecnt; ++i)\n    assert ((\"libev: negative fd in fdchanges\", fdchanges [i] >= 0));\n\n  assert (anfdmax >= 0);\n  for (i = 0; i < anfdmax; ++i)\n    {\n      int j = 0;\n\n      for (w = w2 = anfds [i].head; w; w = w->next)\n        {\n          verify_watcher (EV_A_ (W)w);\n\n          if (j++ & 1)\n            {\n              assert ((\"libev: io watcher list contains a loop\", w != w2));\n              w2 = w2->next;\n            }\n\n          assert ((\"libev: inactive fd watcher on anfd list\", ev_active (w) == 1));\n          assert ((\"libev: fd mismatch between watcher and anfd\", ((ev_io *)w)->fd == i));\n        }\n    }\n\n  assert (timermax >= timercnt);\n  verify_heap (EV_A_ timers, timercnt);\n\n#if EV_PERIODIC_ENABLE\n  assert (periodicmax >= periodiccnt);\n  verify_heap (EV_A_ periodics, periodiccnt);\n#endif\n\n  for (i = NUMPRI; i--; )\n    {\n      assert (pendingmax [i] >= pendingcnt [i]);\n#if EV_IDLE_ENABLE\n      assert (idleall >= 0);\n      assert (idlemax [i] >= idlecnt [i]);\n      array_verify (EV_A_ (W *)idles [i], idlecnt [i]);\n#endif\n    }\n\n#if EV_FORK_ENABLE\n  assert (forkmax >= forkcnt);\n  array_verify (EV_A_ (W *)forks, forkcnt);\n#endif\n\n#if EV_CLEANUP_ENABLE\n  assert (cleanupmax >= cleanupcnt);\n  array_verify (EV_A_ (W *)cleanups, cleanupcnt);\n#endif\n\n#if EV_ASYNC_ENABLE\n  assert (asyncmax >= asynccnt);\n  array_verify (EV_A_ (W *)asyncs, asynccnt);\n#endif\n\n#if EV_PREPARE_ENABLE\n  assert (preparemax >= preparecnt);\n  array_verify (EV_A_ (W *)prepares, preparecnt);\n#endif\n\n#if EV_CHECK_ENABLE\n  assert (checkmax >= checkcnt);\n  array_verify (EV_A_ (W *)checks, checkcnt);\n#endif\n\n# if 0\n#if EV_CHILD_ENABLE\n  for (w = (ev_child *)childs [chain & ((EV_PID_HASHSIZE) - 1)]; w; w = (ev_child *)((WL)w)->next)\n  for (signum = EV_NSIG; signum--; ) if (signals [signum].pending)\n#endif\n# endif\n#endif\n}\n#endif\n\n#if EV_MULTIPLICITY\nstruct ev_loop * ecb_cold\n#else\nint\n#endif\nev_default_loop (unsigned int flags) EV_THROW\n{\n  if (!ev_default_loop_ptr)\n    {\n#if EV_MULTIPLICITY\n      EV_P = ev_default_loop_ptr = &default_loop_struct;\n#else\n      ev_default_loop_ptr = 1;\n#endif\n\n      loop_init (EV_A_ flags);\n\n      if (ev_backend (EV_A))\n        {\n#if EV_CHILD_ENABLE\n          ev_signal_init (&childev, childcb, SIGCHLD);\n          ev_set_priority (&childev, EV_MAXPRI);\n          ev_signal_start (EV_A_ &childev);\n          ev_unref (EV_A); /* child watcher should not keep loop alive */\n#endif\n        }\n      else\n        ev_default_loop_ptr = 0;\n    }\n\n  return ev_default_loop_ptr;\n}\n\nvoid\nev_loop_fork (EV_P) EV_THROW\n{\n  postfork = 1;\n}\n\n/*****************************************************************************/\n\nvoid\nev_invoke (EV_P_ void *w, int revents)\n{\n  EV_CB_INVOKE ((W)w, revents);\n}\n\nunsigned int\nev_pending_count (EV_P) EV_THROW\n{\n  int pri;\n  unsigned int count = 0;\n\n  for (pri = NUMPRI; pri--; )\n    count += pendingcnt [pri];\n\n  return count;\n}\n\nvoid noinline\nev_invoke_pending (EV_P)\n{\n  pendingpri = NUMPRI;\n\n  while (pendingpri) /* pendingpri possibly gets modified in the inner loop */\n    {\n      --pendingpri;\n\n      while (pendingcnt [pendingpri])\n        {\n          ANPENDING *p = pendings [pendingpri] + --pendingcnt [pendingpri];\n\n          p->w->pending = 0;\n          EV_CB_INVOKE (p->w, p->events);\n          EV_FREQUENT_CHECK;\n        }\n    }\n}\n\n#if EV_IDLE_ENABLE\n/* make idle watchers pending. this handles the \"call-idle */\n/* only when higher priorities are idle\" logic */\ninline_size void\nidle_reify (EV_P)\n{\n  if (expect_false (idleall))\n    {\n      int pri;\n\n      for (pri = NUMPRI; pri--; )\n        {\n          if (pendingcnt [pri])\n            break;\n\n          if (idlecnt [pri])\n            {\n              queue_events (EV_A_ (W *)idles [pri], idlecnt [pri], EV_IDLE);\n              break;\n            }\n        }\n    }\n}\n#endif\n\n/* make timers pending */\ninline_size void\ntimers_reify (EV_P)\n{\n  EV_FREQUENT_CHECK;\n\n  if (timercnt && ANHE_at (timers [HEAP0]) < mn_now)\n    {\n      do\n        {\n          ev_timer *w = (ev_timer *)ANHE_w (timers [HEAP0]);\n\n          /*assert ((\"libev: inactive timer on timer heap detected\", ev_is_active (w)));*/\n\n          /* first reschedule or stop timer */\n          if (w->repeat)\n            {\n              ev_at (w) += w->repeat;\n              if (ev_at (w) < mn_now)\n                ev_at (w) = mn_now;\n\n              assert ((\"libev: negative ev_timer repeat value found while processing timers\", w->repeat > 0.));\n\n              ANHE_at_cache (timers [HEAP0]);\n              downheap (timers, timercnt, HEAP0);\n            }\n          else\n            ev_timer_stop (EV_A_ w); /* nonrepeating: stop timer */\n\n          EV_FREQUENT_CHECK;\n          feed_reverse (EV_A_ (W)w);\n        }\n      while (timercnt && ANHE_at (timers [HEAP0]) < mn_now);\n\n      feed_reverse_done (EV_A_ EV_TIMER);\n    }\n}\n\n#if EV_PERIODIC_ENABLE\n\nstatic void noinline\nperiodic_recalc (EV_P_ ev_periodic *w)\n{\n  ev_tstamp interval = w->interval > MIN_INTERVAL ? w->interval : MIN_INTERVAL;\n  ev_tstamp at = w->offset + interval * ev_floor ((ev_rt_now - w->offset) / interval);\n\n  /* the above almost always errs on the low side */\n  while (at <= ev_rt_now)\n    {\n      ev_tstamp nat = at + w->interval;\n\n      /* when resolution fails us, we use ev_rt_now */\n      if (expect_false (nat == at))\n        {\n          at = ev_rt_now;\n          break;\n        }\n\n      at = nat;\n    }\n\n  ev_at (w) = at;\n}\n\n/* make periodics pending */\ninline_size void\nperiodics_reify (EV_P)\n{\n  EV_FREQUENT_CHECK;\n\n  while (periodiccnt && ANHE_at (periodics [HEAP0]) < ev_rt_now)\n    {\n      do\n        {\n          ev_periodic *w = (ev_periodic *)ANHE_w (periodics [HEAP0]);\n\n          /*assert ((\"libev: inactive timer on periodic heap detected\", ev_is_active (w)));*/\n\n          /* first reschedule or stop timer */\n          if (w->reschedule_cb)\n            {\n              ev_at (w) = w->reschedule_cb (w, ev_rt_now);\n\n              assert ((\"libev: ev_periodic reschedule callback returned time in the past\", ev_at (w) >= ev_rt_now));\n\n              ANHE_at_cache (periodics [HEAP0]);\n              downheap (periodics, periodiccnt, HEAP0);\n            }\n          else if (w->interval)\n            {\n              periodic_recalc (EV_A_ w);\n              ANHE_at_cache (periodics [HEAP0]);\n              downheap (periodics, periodiccnt, HEAP0);\n            }\n          else\n            ev_periodic_stop (EV_A_ w); /* nonrepeating: stop timer */\n\n          EV_FREQUENT_CHECK;\n          feed_reverse (EV_A_ (W)w);\n        }\n      while (periodiccnt && ANHE_at (periodics [HEAP0]) < ev_rt_now);\n\n      feed_reverse_done (EV_A_ EV_PERIODIC);\n    }\n}\n\n/* simply recalculate all periodics */\n/* TODO: maybe ensure that at least one event happens when jumping forward? */\nstatic void noinline ecb_cold\nperiodics_reschedule (EV_P)\n{\n  int i;\n\n  /* adjust periodics after time jump */\n  for (i = HEAP0; i < periodiccnt + HEAP0; ++i)\n    {\n      ev_periodic *w = (ev_periodic *)ANHE_w (periodics [i]);\n\n      if (w->reschedule_cb)\n        ev_at (w) = w->reschedule_cb (w, ev_rt_now);\n      else if (w->interval)\n        periodic_recalc (EV_A_ w);\n\n      ANHE_at_cache (periodics [i]);\n    }\n\n  reheap (periodics, periodiccnt);\n}\n#endif\n\n/* adjust all timers by a given offset */\nstatic void noinline ecb_cold\ntimers_reschedule (EV_P_ ev_tstamp adjust)\n{\n  int i;\n\n  for (i = 0; i < timercnt; ++i)\n    {\n      ANHE *he = timers + i + HEAP0;\n      ANHE_w (*he)->at += adjust;\n      ANHE_at_cache (*he);\n    }\n}\n\n/* fetch new monotonic and realtime times from the kernel */\n/* also detect if there was a timejump, and act accordingly */\ninline_speed void\ntime_update (EV_P_ ev_tstamp max_block)\n{\n#if EV_USE_MONOTONIC\n  if (expect_true (have_monotonic))\n    {\n      int i;\n      ev_tstamp odiff = rtmn_diff;\n\n      mn_now = get_clock ();\n\n      /* only fetch the realtime clock every 0.5*MIN_TIMEJUMP seconds */\n      /* interpolate in the meantime */\n      if (expect_true (mn_now - now_floor < MIN_TIMEJUMP * .5))\n        {\n          ev_rt_now = rtmn_diff + mn_now;\n          return;\n        }\n\n      now_floor = mn_now;\n      ev_rt_now = ev_time ();\n\n      /* loop a few times, before making important decisions.\n       * on the choice of \"4\": one iteration isn't enough,\n       * in case we get preempted during the calls to\n       * ev_time and get_clock. a second call is almost guaranteed\n       * to succeed in that case, though. and looping a few more times\n       * doesn't hurt either as we only do this on time-jumps or\n       * in the unlikely event of having been preempted here.\n       */\n      for (i = 4; --i; )\n        {\n          ev_tstamp diff;\n          rtmn_diff = ev_rt_now - mn_now;\n\n          diff = odiff - rtmn_diff;\n\n          if (expect_true ((diff < 0. ? -diff : diff) < MIN_TIMEJUMP))\n            return; /* all is well */\n\n          ev_rt_now = ev_time ();\n          mn_now    = get_clock ();\n          now_floor = mn_now;\n        }\n\n      /* no timer adjustment, as the monotonic clock doesn't jump */\n      /* timers_reschedule (EV_A_ rtmn_diff - odiff) */\n# if EV_PERIODIC_ENABLE\n      periodics_reschedule (EV_A);\n# endif\n    }\n  else\n#endif\n    {\n      ev_rt_now = ev_time ();\n\n      if (expect_false (mn_now > ev_rt_now || ev_rt_now > mn_now + max_block + MIN_TIMEJUMP))\n        {\n          /* adjust timers. this is easy, as the offset is the same for all of them */\n          timers_reschedule (EV_A_ ev_rt_now - mn_now);\n#if EV_PERIODIC_ENABLE\n          periodics_reschedule (EV_A);\n#endif\n        }\n\n      mn_now = ev_rt_now;\n    }\n}\n\nint\nev_run (EV_P_ int flags)\n{\n#if EV_FEATURE_API\n  ++loop_depth;\n#endif\n\n  assert ((\"libev: ev_loop recursion during release detected\", loop_done != EVBREAK_RECURSE));\n\n  loop_done = EVBREAK_CANCEL;\n\n  EV_INVOKE_PENDING; /* in case we recurse, ensure ordering stays nice and clean */\n\n  do\n    {\n#if EV_VERIFY >= 2\n      ev_verify (EV_A);\n#endif\n\n#ifndef _WIN32\n      if (expect_false (curpid)) /* penalise the forking check even more */\n        if (expect_false (getpid () != curpid))\n          {\n            curpid = getpid ();\n            postfork = 1;\n          }\n#endif\n\n#if EV_FORK_ENABLE\n      /* we might have forked, so queue fork handlers */\n      if (expect_false (postfork))\n        if (forkcnt)\n          {\n            queue_events (EV_A_ (W *)forks, forkcnt, EV_FORK);\n            EV_INVOKE_PENDING;\n          }\n#endif\n\n#if EV_PREPARE_ENABLE\n      /* queue prepare watchers (and execute them) */\n      if (expect_false (preparecnt))\n        {\n          queue_events (EV_A_ (W *)prepares, preparecnt, EV_PREPARE);\n          EV_INVOKE_PENDING;\n        }\n#endif\n\n      if (expect_false (loop_done))\n        break;\n\n      /* we might have forked, so reify kernel state if necessary */\n      if (expect_false (postfork))\n        loop_fork (EV_A);\n\n      /* update fd-related kernel structures */\n      fd_reify (EV_A);\n\n      /* calculate blocking time */\n      {\n        ev_tstamp waittime  = 0.;\n        ev_tstamp sleeptime = 0.;\n\n        /* remember old timestamp for io_blocktime calculation */\n        ev_tstamp prev_mn_now = mn_now;\n\n        /* update time to cancel out callback processing overhead */\n        time_update (EV_A_ 1e100);\n\n        /* from now on, we want a pipe-wake-up */\n        pipe_write_wanted = 1;\n\n        ECB_MEMORY_FENCE; /* make sure pipe_write_wanted is visible before we check for potential skips */\n\n        if (expect_true (!(flags & EVRUN_NOWAIT || idleall || !activecnt || pipe_write_skipped)))\n          {\n            waittime = MAX_BLOCKTIME;\n\n            if (timercnt)\n              {\n                ev_tstamp to = ANHE_at (timers [HEAP0]) - mn_now;\n                if (waittime > to) waittime = to;\n              }\n\n#if EV_PERIODIC_ENABLE\n            if (periodiccnt)\n              {\n                ev_tstamp to = ANHE_at (periodics [HEAP0]) - ev_rt_now;\n                if (waittime > to) waittime = to;\n              }\n#endif\n\n            /* don't let timeouts decrease the waittime below timeout_blocktime */\n            if (expect_false (waittime < timeout_blocktime))\n              waittime = timeout_blocktime;\n\n            /* at this point, we NEED to wait, so we have to ensure */\n            /* to pass a minimum nonzero value to the backend */\n            if (expect_false (waittime < backend_mintime))\n              waittime = backend_mintime;\n\n            /* extra check because io_blocktime is commonly 0 */\n            if (expect_false (io_blocktime))\n              {\n                sleeptime = io_blocktime - (mn_now - prev_mn_now);\n\n                if (sleeptime > waittime - backend_mintime)\n                  sleeptime = waittime - backend_mintime;\n\n                if (expect_true (sleeptime > 0.))\n                  {\n                    ev_sleep (sleeptime);\n                    waittime -= sleeptime;\n                  }\n              }\n          }\n\n#if EV_FEATURE_API\n        ++loop_count;\n#endif\n        assert ((loop_done = EVBREAK_RECURSE, 1)); /* assert for side effect */\n        backend_poll (EV_A_ waittime);\n        assert ((loop_done = EVBREAK_CANCEL, 1)); /* assert for side effect */\n\n        pipe_write_wanted = 0; /* just an optimisation, no fence needed */\n\n        ECB_MEMORY_FENCE_ACQUIRE;\n        if (pipe_write_skipped)\n          {\n            assert ((\"libev: pipe_w not active, but pipe not written\", ev_is_active (&pipe_w)));\n            ev_feed_event (EV_A_ &pipe_w, EV_CUSTOM);\n          }\n\n\n        /* update ev_rt_now, do magic */\n        time_update (EV_A_ waittime + sleeptime);\n      }\n\n      /* queue pending timers and reschedule them */\n      timers_reify (EV_A); /* relative timers called last */\n#if EV_PERIODIC_ENABLE\n      periodics_reify (EV_A); /* absolute timers called first */\n#endif\n\n#if EV_IDLE_ENABLE\n      /* queue idle watchers unless other events are pending */\n      idle_reify (EV_A);\n#endif\n\n#if EV_CHECK_ENABLE\n      /* queue check watchers, to be executed first */\n      if (expect_false (checkcnt))\n        queue_events (EV_A_ (W *)checks, checkcnt, EV_CHECK);\n#endif\n\n      EV_INVOKE_PENDING;\n    }\n  while (expect_true (\n    activecnt\n    && !loop_done\n    && !(flags & (EVRUN_ONCE | EVRUN_NOWAIT))\n  ));\n\n  if (loop_done == EVBREAK_ONE)\n    loop_done = EVBREAK_CANCEL;\n\n#if EV_FEATURE_API\n  --loop_depth;\n#endif\n\n  return activecnt;\n}\n\nvoid\nev_break (EV_P_ int how) EV_THROW\n{\n  loop_done = how;\n}\n\nvoid\nev_ref (EV_P) EV_THROW\n{\n  ++activecnt;\n}\n\nvoid\nev_unref (EV_P) EV_THROW\n{\n  --activecnt;\n}\n\nvoid\nev_now_update (EV_P) EV_THROW\n{\n  time_update (EV_A_ 1e100);\n}\n\nvoid\nev_suspend (EV_P) EV_THROW\n{\n  ev_now_update (EV_A);\n}\n\nvoid\nev_resume (EV_P) EV_THROW\n{\n  ev_tstamp mn_prev = mn_now;\n\n  ev_now_update (EV_A);\n  timers_reschedule (EV_A_ mn_now - mn_prev);\n#if EV_PERIODIC_ENABLE\n  /* TODO: really do this? */\n  periodics_reschedule (EV_A);\n#endif\n}\n\n/*****************************************************************************/\n/* singly-linked list management, used when the expected list length is short */\n\ninline_size void\nwlist_add (WL *head, WL elem)\n{\n  elem->next = *head;\n  *head = elem;\n}\n\ninline_size void\nwlist_del (WL *head, WL elem)\n{\n  while (*head)\n    {\n      if (expect_true (*head == elem))\n        {\n          *head = elem->next;\n          break;\n        }\n\n      head = &(*head)->next;\n    }\n}\n\n/* internal, faster, version of ev_clear_pending */\ninline_speed void\nclear_pending (EV_P_ W w)\n{\n  if (w->pending)\n    {\n      pendings [ABSPRI (w)][w->pending - 1].w = (W)&pending_w;\n      w->pending = 0;\n    }\n}\n\nint\nev_clear_pending (EV_P_ void *w) EV_THROW\n{\n  W w_ = (W)w;\n  int pending = w_->pending;\n\n  if (expect_true (pending))\n    {\n      ANPENDING *p = pendings [ABSPRI (w_)] + pending - 1;\n      p->w = (W)&pending_w;\n      w_->pending = 0;\n      return p->events;\n    }\n  else\n    return 0;\n}\n\ninline_size void\npri_adjust (EV_P_ W w)\n{\n  int pri = ev_priority (w);\n  pri = pri < EV_MINPRI ? EV_MINPRI : pri;\n  pri = pri > EV_MAXPRI ? EV_MAXPRI : pri;\n  ev_set_priority (w, pri);\n}\n\ninline_speed void\nev_start (EV_P_ W w, int active)\n{\n  pri_adjust (EV_A_ w);\n  w->active = active;\n  ev_ref (EV_A);\n}\n\ninline_size void\nev_stop (EV_P_ W w)\n{\n  ev_unref (EV_A);\n  w->active = 0;\n}\n\n/*****************************************************************************/\n\nvoid noinline\nev_io_start (EV_P_ ev_io *w) EV_THROW\n{\n  int fd = w->fd;\n\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  assert ((\"libev: ev_io_start called with negative fd\", fd >= 0));\n  assert ((\"libev: ev_io_start called with illegal event mask\", !(w->events & ~(EV__IOFDSET | EV_READ | EV_WRITE))));\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, 1);\n  array_needsize (ANFD, anfds, anfdmax, fd + 1, array_init_zero);\n  wlist_add (&anfds[fd].head, (WL)w);\n\n  /* common bug, apparently */\n  assert ((\"libev: ev_io_start called with corrupted watcher\", ((WL)w)->next != (WL)w));\n\n  fd_change (EV_A_ fd, w->events & EV__IOFDSET | EV_ANFD_REIFY);\n  w->events &= ~EV__IOFDSET;\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid noinline\nev_io_stop (EV_P_ ev_io *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  assert ((\"libev: ev_io_stop called with illegal fd (must stay constant after start!)\", w->fd >= 0 && w->fd < anfdmax));\n\n  EV_FREQUENT_CHECK;\n\n  wlist_del (&anfds[w->fd].head, (WL)w);\n  ev_stop (EV_A_ (W)w);\n\n  fd_change (EV_A_ w->fd, EV_ANFD_REIFY);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid noinline\nev_timer_start (EV_P_ ev_timer *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  ev_at (w) += mn_now;\n\n  assert ((\"libev: ev_timer_start called with negative timer repeat value\", w->repeat >= 0.));\n\n  EV_FREQUENT_CHECK;\n\n  ++timercnt;\n  ev_start (EV_A_ (W)w, timercnt + HEAP0 - 1);\n  array_needsize (ANHE, timers, timermax, ev_active (w) + 1, EMPTY2);\n  ANHE_w (timers [ev_active (w)]) = (WT)w;\n  ANHE_at_cache (timers [ev_active (w)]);\n  upheap (timers, ev_active (w));\n\n  EV_FREQUENT_CHECK;\n\n  /*assert ((\"libev: internal timer heap corruption\", timers [ev_active (w)] == (WT)w));*/\n}\n\nvoid noinline\nev_timer_stop (EV_P_ ev_timer *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    assert ((\"libev: internal timer heap corruption\", ANHE_w (timers [active]) == (WT)w));\n\n    --timercnt;\n\n    if (expect_true (active < timercnt + HEAP0))\n      {\n        timers [active] = timers [timercnt + HEAP0];\n        adjustheap (timers, timercnt, active);\n      }\n  }\n\n  ev_at (w) -= mn_now;\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid noinline\nev_timer_again (EV_P_ ev_timer *w) EV_THROW\n{\n  EV_FREQUENT_CHECK;\n\n  clear_pending (EV_A_ (W)w);\n\n  if (ev_is_active (w))\n    {\n      if (w->repeat)\n        {\n          ev_at (w) = mn_now + w->repeat;\n          ANHE_at_cache (timers [ev_active (w)]);\n          adjustheap (timers, timercnt, ev_active (w));\n        }\n      else\n        ev_timer_stop (EV_A_ w);\n    }\n  else if (w->repeat)\n    {\n      ev_at (w) = w->repeat;\n      ev_timer_start (EV_A_ w);\n    }\n\n  EV_FREQUENT_CHECK;\n}\n\nev_tstamp\nev_timer_remaining (EV_P_ ev_timer *w) EV_THROW\n{\n  return ev_at (w) - (ev_is_active (w) ? mn_now : 0.);\n}\n\n#if EV_PERIODIC_ENABLE\nvoid noinline\nev_periodic_start (EV_P_ ev_periodic *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  if (w->reschedule_cb)\n    ev_at (w) = w->reschedule_cb (w, ev_rt_now);\n  else if (w->interval)\n    {\n      assert ((\"libev: ev_periodic_start called with negative interval value\", w->interval >= 0.));\n      periodic_recalc (EV_A_ w);\n    }\n  else\n    ev_at (w) = w->offset;\n\n  EV_FREQUENT_CHECK;\n\n  ++periodiccnt;\n  ev_start (EV_A_ (W)w, periodiccnt + HEAP0 - 1);\n  array_needsize (ANHE, periodics, periodicmax, ev_active (w) + 1, EMPTY2);\n  ANHE_w (periodics [ev_active (w)]) = (WT)w;\n  ANHE_at_cache (periodics [ev_active (w)]);\n  upheap (periodics, ev_active (w));\n\n  EV_FREQUENT_CHECK;\n\n  /*assert ((\"libev: internal periodic heap corruption\", ANHE_w (periodics [ev_active (w)]) == (WT)w));*/\n}\n\nvoid noinline\nev_periodic_stop (EV_P_ ev_periodic *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    assert ((\"libev: internal periodic heap corruption\", ANHE_w (periodics [active]) == (WT)w));\n\n    --periodiccnt;\n\n    if (expect_true (active < periodiccnt + HEAP0))\n      {\n        periodics [active] = periodics [periodiccnt + HEAP0];\n        adjustheap (periodics, periodiccnt, active);\n      }\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid noinline\nev_periodic_again (EV_P_ ev_periodic *w) EV_THROW\n{\n  /* TODO: use adjustheap and recalculation */\n  ev_periodic_stop (EV_A_ w);\n  ev_periodic_start (EV_A_ w);\n}\n#endif\n\n#ifndef SA_RESTART\n# define SA_RESTART 0\n#endif\n\n#if EV_SIGNAL_ENABLE\n\nvoid noinline\nev_signal_start (EV_P_ ev_signal *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  assert ((\"libev: ev_signal_start called with illegal signal number\", w->signum > 0 && w->signum < EV_NSIG));\n\n#if EV_MULTIPLICITY\n  assert ((\"libev: a signal must not be attached to two different loops\",\n           !signals [w->signum - 1].loop || signals [w->signum - 1].loop == loop));\n\n  signals [w->signum - 1].loop = EV_A;\n  ECB_MEMORY_FENCE_RELEASE;\n#endif\n\n  EV_FREQUENT_CHECK;\n\n#if EV_USE_SIGNALFD\n  if (sigfd == -2)\n    {\n      sigfd = signalfd (-1, &sigfd_set, SFD_NONBLOCK | SFD_CLOEXEC);\n      if (sigfd < 0 && errno == EINVAL)\n        sigfd = signalfd (-1, &sigfd_set, 0); /* retry without flags */\n\n      if (sigfd >= 0)\n        {\n          fd_intern (sigfd); /* doing it twice will not hurt */\n\n          sigemptyset (&sigfd_set);\n\n          ev_io_init (&sigfd_w, sigfdcb, sigfd, EV_READ);\n          ev_set_priority (&sigfd_w, EV_MAXPRI);\n          ev_io_start (EV_A_ &sigfd_w);\n          ev_unref (EV_A); /* signalfd watcher should not keep loop alive */\n        }\n    }\n\n  if (sigfd >= 0)\n    {\n      /* TODO: check .head */\n      sigaddset (&sigfd_set, w->signum);\n      sigprocmask (SIG_BLOCK, &sigfd_set, 0);\n\n      signalfd (sigfd, &sigfd_set, 0);\n    }\n#endif\n\n  ev_start (EV_A_ (W)w, 1);\n  wlist_add (&signals [w->signum - 1].head, (WL)w);\n\n  if (!((WL)w)->next)\n# if EV_USE_SIGNALFD\n    if (sigfd < 0) /*TODO*/\n# endif\n      {\n# ifdef _WIN32\n        evpipe_init (EV_A);\n\n        signal (w->signum, ev_sighandler);\n# else\n        struct sigaction sa;\n\n        evpipe_init (EV_A);\n\n        sa.sa_handler = ev_sighandler;\n        sigfillset (&sa.sa_mask);\n        sa.sa_flags = SA_RESTART; /* if restarting works we save one iteration */\n        sigaction (w->signum, &sa, 0);\n\n        if (origflags & EVFLAG_NOSIGMASK)\n          {\n            sigemptyset (&sa.sa_mask);\n            sigaddset (&sa.sa_mask, w->signum);\n            sigprocmask (SIG_UNBLOCK, &sa.sa_mask, 0);\n          }\n#endif\n      }\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid noinline\nev_signal_stop (EV_P_ ev_signal *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  wlist_del (&signals [w->signum - 1].head, (WL)w);\n  ev_stop (EV_A_ (W)w);\n\n  if (!signals [w->signum - 1].head)\n    {\n#if EV_MULTIPLICITY\n      signals [w->signum - 1].loop = 0; /* unattach from signal */\n#endif\n#if EV_USE_SIGNALFD\n      if (sigfd >= 0)\n        {\n          sigset_t ss;\n\n          sigemptyset (&ss);\n          sigaddset (&ss, w->signum);\n          sigdelset (&sigfd_set, w->signum);\n\n          signalfd (sigfd, &sigfd_set, 0);\n          sigprocmask (SIG_UNBLOCK, &ss, 0);\n        }\n      else\n#endif\n        signal (w->signum, SIG_DFL);\n    }\n\n  EV_FREQUENT_CHECK;\n}\n\n#endif\n\n#if EV_CHILD_ENABLE\n\nvoid\nev_child_start (EV_P_ ev_child *w) EV_THROW\n{\n#if EV_MULTIPLICITY\n  assert ((\"libev: child watchers are only supported in the default loop\", loop == ev_default_loop_ptr));\n#endif\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, 1);\n  wlist_add (&childs [w->pid & ((EV_PID_HASHSIZE) - 1)], (WL)w);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_child_stop (EV_P_ ev_child *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  wlist_del (&childs [w->pid & ((EV_PID_HASHSIZE) - 1)], (WL)w);\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n\n#endif\n\n#if EV_STAT_ENABLE\n\n# ifdef _WIN32\n#  undef lstat\n#  define lstat(a,b) _stati64 (a,b)\n# endif\n\n#define DEF_STAT_INTERVAL  5.0074891\n#define NFS_STAT_INTERVAL 30.1074891 /* for filesystems potentially failing inotify */\n#define MIN_STAT_INTERVAL  0.1074891\n\nstatic void noinline stat_timer_cb (EV_P_ ev_timer *w_, int revents);\n\n#if EV_USE_INOTIFY\n\n/* the * 2 is to allow for alignment padding, which for some reason is >> 8 */\n# define EV_INOTIFY_BUFSIZE (sizeof (struct inotify_event) * 2 + NAME_MAX)\n\nstatic void noinline\ninfy_add (EV_P_ ev_stat *w)\n{\n  w->wd = inotify_add_watch (fs_fd, w->path,\n                             IN_ATTRIB | IN_DELETE_SELF | IN_MOVE_SELF | IN_MODIFY\n                             | IN_CREATE | IN_DELETE | IN_MOVED_FROM | IN_MOVED_TO\n                             | IN_DONT_FOLLOW | IN_MASK_ADD);\n\n  if (w->wd >= 0)\n    {\n      struct statfs sfs;\n\n      /* now local changes will be tracked by inotify, but remote changes won't */\n      /* unless the filesystem is known to be local, we therefore still poll */\n      /* also do poll on <2.6.25, but with normal frequency */\n\n      if (!fs_2625)\n        w->timer.repeat = w->interval ? w->interval : DEF_STAT_INTERVAL;\n      else if (!statfs (w->path, &sfs)\n               && (sfs.f_type == 0x1373 /* devfs */\n                   || sfs.f_type == 0x4006 /* fat */\n                   || sfs.f_type == 0x4d44 /* msdos */\n                   || sfs.f_type == 0xEF53 /* ext2/3 */\n                   || sfs.f_type == 0x72b6 /* jffs2 */\n                   || sfs.f_type == 0x858458f6 /* ramfs */\n                   || sfs.f_type == 0x5346544e /* ntfs */\n                   || sfs.f_type == 0x3153464a /* jfs */\n                   || sfs.f_type == 0x9123683e /* btrfs */\n                   || sfs.f_type == 0x52654973 /* reiser3 */\n                   || sfs.f_type == 0x01021994 /* tmpfs */\n                   || sfs.f_type == 0x58465342 /* xfs */))\n        w->timer.repeat = 0.; /* filesystem is local, kernel new enough */\n      else\n        w->timer.repeat = w->interval ? w->interval : NFS_STAT_INTERVAL; /* remote, use reduced frequency */\n    }\n  else\n    {\n      /* can't use inotify, continue to stat */\n      w->timer.repeat = w->interval ? w->interval : DEF_STAT_INTERVAL;\n\n      /* if path is not there, monitor some parent directory for speedup hints */\n      /* note that exceeding the hardcoded path limit is not a correctness issue, */\n      /* but an efficiency issue only */\n      if ((errno == ENOENT || errno == EACCES) && strlen (w->path) < 4096)\n        {\n          char path [4096];\n          strcpy (path, w->path);\n\n          do\n            {\n              int mask = IN_MASK_ADD | IN_DELETE_SELF | IN_MOVE_SELF\n                       | (errno == EACCES ? IN_ATTRIB : IN_CREATE | IN_MOVED_TO);\n\n              char *pend = strrchr (path, '/');\n\n              if (!pend || pend == path)\n                break;\n\n              *pend = 0;\n              w->wd = inotify_add_watch (fs_fd, path, mask);\n            }\n          while (w->wd < 0 && (errno == ENOENT || errno == EACCES));\n        }\n    }\n\n  if (w->wd >= 0)\n    wlist_add (&fs_hash [w->wd & ((EV_INOTIFY_HASHSIZE) - 1)].head, (WL)w);\n\n  /* now re-arm timer, if required */\n  if (ev_is_active (&w->timer)) ev_ref (EV_A);\n  ev_timer_again (EV_A_ &w->timer);\n  if (ev_is_active (&w->timer)) ev_unref (EV_A);\n}\n\nstatic void noinline\ninfy_del (EV_P_ ev_stat *w)\n{\n  int slot;\n  int wd = w->wd;\n\n  if (wd < 0)\n    return;\n\n  w->wd = -2;\n  slot = wd & ((EV_INOTIFY_HASHSIZE) - 1);\n  wlist_del (&fs_hash [slot].head, (WL)w);\n\n  /* remove this watcher, if others are watching it, they will rearm */\n  inotify_rm_watch (fs_fd, wd);\n}\n\nstatic void noinline\ninfy_wd (EV_P_ int slot, int wd, struct inotify_event *ev)\n{\n  if (slot < 0)\n    /* overflow, need to check for all hash slots */\n    for (slot = 0; slot < (EV_INOTIFY_HASHSIZE); ++slot)\n      infy_wd (EV_A_ slot, wd, ev);\n  else\n    {\n      WL w_;\n\n      for (w_ = fs_hash [slot & ((EV_INOTIFY_HASHSIZE) - 1)].head; w_; )\n        {\n          ev_stat *w = (ev_stat *)w_;\n          w_ = w_->next; /* lets us remove this watcher and all before it */\n\n          if (w->wd == wd || wd == -1)\n            {\n              if (ev->mask & (IN_IGNORED | IN_UNMOUNT | IN_DELETE_SELF))\n                {\n                  wlist_del (&fs_hash [slot & ((EV_INOTIFY_HASHSIZE) - 1)].head, (WL)w);\n                  w->wd = -1;\n                  infy_add (EV_A_ w); /* re-add, no matter what */\n                }\n\n              stat_timer_cb (EV_A_ &w->timer, 0);\n            }\n        }\n    }\n}\n\nstatic void\ninfy_cb (EV_P_ ev_io *w, int revents)\n{\n  char buf [EV_INOTIFY_BUFSIZE];\n  int ofs;\n  int len = read (fs_fd, buf, sizeof (buf));\n\n  for (ofs = 0; ofs < len; )\n    {\n      struct inotify_event *ev = (struct inotify_event *)(buf + ofs);\n      infy_wd (EV_A_ ev->wd, ev->wd, ev);\n      ofs += sizeof (struct inotify_event) + ev->len;\n    }\n}\n\ninline_size void ecb_cold\nev_check_2625 (EV_P)\n{\n  /* kernels < 2.6.25 are borked\n   * http://www.ussg.indiana.edu/hypermail/linux/kernel/0711.3/1208.html\n   */\n  if (ev_linux_version () < 0x020619)\n    return;\n\n  fs_2625 = 1;\n}\n\ninline_size int\ninfy_newfd (void)\n{\n#if defined IN_CLOEXEC && defined IN_NONBLOCK\n  int fd = inotify_init1 (IN_CLOEXEC | IN_NONBLOCK);\n  if (fd >= 0)\n    return fd;\n#endif\n  return inotify_init ();\n}\n\ninline_size void\ninfy_init (EV_P)\n{\n  if (fs_fd != -2)\n    return;\n\n  fs_fd = -1;\n\n  ev_check_2625 (EV_A);\n\n  fs_fd = infy_newfd ();\n\n  if (fs_fd >= 0)\n    {\n      fd_intern (fs_fd);\n      ev_io_init (&fs_w, infy_cb, fs_fd, EV_READ);\n      ev_set_priority (&fs_w, EV_MAXPRI);\n      ev_io_start (EV_A_ &fs_w);\n      ev_unref (EV_A);\n    }\n}\n\ninline_size void\ninfy_fork (EV_P)\n{\n  int slot;\n\n  if (fs_fd < 0)\n    return;\n\n  ev_ref (EV_A);\n  ev_io_stop (EV_A_ &fs_w);\n  close (fs_fd);\n  fs_fd = infy_newfd ();\n\n  if (fs_fd >= 0)\n    {\n      fd_intern (fs_fd);\n      ev_io_set (&fs_w, fs_fd, EV_READ);\n      ev_io_start (EV_A_ &fs_w);\n      ev_unref (EV_A);\n    }\n\n  for (slot = 0; slot < (EV_INOTIFY_HASHSIZE); ++slot)\n    {\n      WL w_ = fs_hash [slot].head;\n      fs_hash [slot].head = 0;\n\n      while (w_)\n        {\n          ev_stat *w = (ev_stat *)w_;\n          w_ = w_->next; /* lets us add this watcher */\n\n          w->wd = -1;\n\n          if (fs_fd >= 0)\n            infy_add (EV_A_ w); /* re-add, no matter what */\n          else\n            {\n              w->timer.repeat = w->interval ? w->interval : DEF_STAT_INTERVAL;\n              if (ev_is_active (&w->timer)) ev_ref (EV_A);\n              ev_timer_again (EV_A_ &w->timer);\n              if (ev_is_active (&w->timer)) ev_unref (EV_A);\n            }\n        }\n    }\n}\n\n#endif\n\n#ifdef _WIN32\n# define EV_LSTAT(p,b) _stati64 (p, b)\n#else\n# define EV_LSTAT(p,b) lstat (p, b)\n#endif\n\nvoid\nev_stat_stat (EV_P_ ev_stat *w) EV_THROW\n{\n  if (lstat (w->path, &w->attr) < 0)\n    w->attr.st_nlink = 0;\n  else if (!w->attr.st_nlink)\n    w->attr.st_nlink = 1;\n}\n\nstatic void noinline\nstat_timer_cb (EV_P_ ev_timer *w_, int revents)\n{\n  ev_stat *w = (ev_stat *)(((char *)w_) - offsetof (ev_stat, timer));\n\n  ev_statdata prev = w->attr;\n  ev_stat_stat (EV_A_ w);\n\n  /* memcmp doesn't work on netbsd, they.... do stuff to their struct stat */\n  if (\n    prev.st_dev      != w->attr.st_dev\n    || prev.st_ino   != w->attr.st_ino\n    || prev.st_mode  != w->attr.st_mode\n    || prev.st_nlink != w->attr.st_nlink\n    || prev.st_uid   != w->attr.st_uid\n    || prev.st_gid   != w->attr.st_gid\n    || prev.st_rdev  != w->attr.st_rdev\n    || prev.st_size  != w->attr.st_size\n    || prev.st_atime != w->attr.st_atime\n    || prev.st_mtime != w->attr.st_mtime\n    || prev.st_ctime != w->attr.st_ctime\n  ) {\n      /* we only update w->prev on actual differences */\n      /* in case we test more often than invoke the callback, */\n      /* to ensure that prev is always different to attr */\n      w->prev = prev;\n\n      #if EV_USE_INOTIFY\n        if (fs_fd >= 0)\n          {\n            infy_del (EV_A_ w);\n            infy_add (EV_A_ w);\n            ev_stat_stat (EV_A_ w); /* avoid race... */\n          }\n      #endif\n\n      ev_feed_event (EV_A_ w, EV_STAT);\n    }\n}\n\nvoid\nev_stat_start (EV_P_ ev_stat *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  ev_stat_stat (EV_A_ w);\n\n  if (w->interval < MIN_STAT_INTERVAL && w->interval)\n    w->interval = MIN_STAT_INTERVAL;\n\n  ev_timer_init (&w->timer, stat_timer_cb, 0., w->interval ? w->interval : DEF_STAT_INTERVAL);\n  ev_set_priority (&w->timer, ev_priority (w));\n\n#if EV_USE_INOTIFY\n  infy_init (EV_A);\n\n  if (fs_fd >= 0)\n    infy_add (EV_A_ w);\n  else\n#endif\n    {\n      ev_timer_again (EV_A_ &w->timer);\n      ev_unref (EV_A);\n    }\n\n  ev_start (EV_A_ (W)w, 1);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_stat_stop (EV_P_ ev_stat *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n#if EV_USE_INOTIFY\n  infy_del (EV_A_ w);\n#endif\n\n  if (ev_is_active (&w->timer))\n    {\n      ev_ref (EV_A);\n      ev_timer_stop (EV_A_ &w->timer);\n    }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_IDLE_ENABLE\nvoid\nev_idle_start (EV_P_ ev_idle *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  pri_adjust (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ++idlecnt [ABSPRI (w)];\n\n    ++idleall;\n    ev_start (EV_A_ (W)w, active);\n\n    array_needsize (ev_idle *, idles [ABSPRI (w)], idlemax [ABSPRI (w)], active, EMPTY2);\n    idles [ABSPRI (w)][active - 1] = w;\n  }\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_idle_stop (EV_P_ ev_idle *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    idles [ABSPRI (w)][active - 1] = idles [ABSPRI (w)][--idlecnt [ABSPRI (w)]];\n    ev_active (idles [ABSPRI (w)][active - 1]) = active;\n\n    ev_stop (EV_A_ (W)w);\n    --idleall;\n  }\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_PREPARE_ENABLE\nvoid\nev_prepare_start (EV_P_ ev_prepare *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, ++preparecnt);\n  array_needsize (ev_prepare *, prepares, preparemax, preparecnt, EMPTY2);\n  prepares [preparecnt - 1] = w;\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_prepare_stop (EV_P_ ev_prepare *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    prepares [active - 1] = prepares [--preparecnt];\n    ev_active (prepares [active - 1]) = active;\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_CHECK_ENABLE\nvoid\nev_check_start (EV_P_ ev_check *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, ++checkcnt);\n  array_needsize (ev_check *, checks, checkmax, checkcnt, EMPTY2);\n  checks [checkcnt - 1] = w;\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_check_stop (EV_P_ ev_check *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    checks [active - 1] = checks [--checkcnt];\n    ev_active (checks [active - 1]) = active;\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_EMBED_ENABLE\nvoid noinline\nev_embed_sweep (EV_P_ ev_embed *w) EV_THROW\n{\n  ev_run (w->other, EVRUN_NOWAIT);\n}\n\nstatic void\nembed_io_cb (EV_P_ ev_io *io, int revents)\n{\n  ev_embed *w = (ev_embed *)(((char *)io) - offsetof (ev_embed, io));\n\n  if (ev_cb (w))\n    ev_feed_event (EV_A_ (W)w, EV_EMBED);\n  else\n    ev_run (w->other, EVRUN_NOWAIT);\n}\n\nstatic void\nembed_prepare_cb (EV_P_ ev_prepare *prepare, int revents)\n{\n  ev_embed *w = (ev_embed *)(((char *)prepare) - offsetof (ev_embed, prepare));\n\n  {\n    EV_P = w->other;\n\n    while (fdchangecnt)\n      {\n        fd_reify (EV_A);\n        ev_run (EV_A_ EVRUN_NOWAIT);\n      }\n  }\n}\n\nstatic void\nembed_fork_cb (EV_P_ ev_fork *fork_w, int revents)\n{\n  ev_embed *w = (ev_embed *)(((char *)fork_w) - offsetof (ev_embed, fork));\n\n  ev_embed_stop (EV_A_ w);\n\n  {\n    EV_P = w->other;\n\n    ev_loop_fork (EV_A);\n    ev_run (EV_A_ EVRUN_NOWAIT);\n  }\n\n  ev_embed_start (EV_A_ w);\n}\n\n#if 0\nstatic void\nembed_idle_cb (EV_P_ ev_idle *idle, int revents)\n{\n  ev_idle_stop (EV_A_ idle);\n}\n#endif\n\nvoid\nev_embed_start (EV_P_ ev_embed *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  {\n    EV_P = w->other;\n    assert ((\"libev: loop to be embedded is not embeddable\", backend & ev_embeddable_backends ()));\n    ev_io_init (&w->io, embed_io_cb, backend_fd, EV_READ);\n  }\n\n  EV_FREQUENT_CHECK;\n\n  ev_set_priority (&w->io, ev_priority (w));\n  ev_io_start (EV_A_ &w->io);\n\n  ev_prepare_init (&w->prepare, embed_prepare_cb);\n  ev_set_priority (&w->prepare, EV_MINPRI);\n  ev_prepare_start (EV_A_ &w->prepare);\n\n  ev_fork_init (&w->fork, embed_fork_cb);\n  ev_fork_start (EV_A_ &w->fork);\n\n  /*ev_idle_init (&w->idle, e,bed_idle_cb);*/\n\n  ev_start (EV_A_ (W)w, 1);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_embed_stop (EV_P_ ev_embed *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_io_stop      (EV_A_ &w->io);\n  ev_prepare_stop (EV_A_ &w->prepare);\n  ev_fork_stop    (EV_A_ &w->fork);\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_FORK_ENABLE\nvoid\nev_fork_start (EV_P_ ev_fork *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, ++forkcnt);\n  array_needsize (ev_fork *, forks, forkmax, forkcnt, EMPTY2);\n  forks [forkcnt - 1] = w;\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_fork_stop (EV_P_ ev_fork *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    forks [active - 1] = forks [--forkcnt];\n    ev_active (forks [active - 1]) = active;\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_CLEANUP_ENABLE\nvoid\nev_cleanup_start (EV_P_ ev_cleanup *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, ++cleanupcnt);\n  array_needsize (ev_cleanup *, cleanups, cleanupmax, cleanupcnt, EMPTY2);\n  cleanups [cleanupcnt - 1] = w;\n\n  /* cleanup watchers should never keep a refcount on the loop */\n  ev_unref (EV_A);\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_cleanup_stop (EV_P_ ev_cleanup *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n  ev_ref (EV_A);\n\n  {\n    int active = ev_active (w);\n\n    cleanups [active - 1] = cleanups [--cleanupcnt];\n    ev_active (cleanups [active - 1]) = active;\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n#endif\n\n#if EV_ASYNC_ENABLE\nvoid\nev_async_start (EV_P_ ev_async *w) EV_THROW\n{\n  if (expect_false (ev_is_active (w)))\n    return;\n\n  w->sent = 0;\n\n  evpipe_init (EV_A);\n\n  EV_FREQUENT_CHECK;\n\n  ev_start (EV_A_ (W)w, ++asynccnt);\n  array_needsize (ev_async *, asyncs, asyncmax, asynccnt, EMPTY2);\n  asyncs [asynccnt - 1] = w;\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_async_stop (EV_P_ ev_async *w) EV_THROW\n{\n  clear_pending (EV_A_ (W)w);\n  if (expect_false (!ev_is_active (w)))\n    return;\n\n  EV_FREQUENT_CHECK;\n\n  {\n    int active = ev_active (w);\n\n    asyncs [active - 1] = asyncs [--asynccnt];\n    ev_active (asyncs [active - 1]) = active;\n  }\n\n  ev_stop (EV_A_ (W)w);\n\n  EV_FREQUENT_CHECK;\n}\n\nvoid\nev_async_send (EV_P_ ev_async *w) EV_THROW\n{\n  w->sent = 1;\n  evpipe_write (EV_A_ &async_pending);\n}\n#endif\n\n/*****************************************************************************/\n\nstruct ev_once\n{\n  ev_io io;\n  ev_timer to;\n  void (*cb)(int revents, void *arg);\n  void *arg;\n};\n\nstatic void\nonce_cb (EV_P_ struct ev_once *once, int revents)\n{\n  void (*cb)(int revents, void *arg) = once->cb;\n  void *arg = once->arg;\n\n  ev_io_stop    (EV_A_ &once->io);\n  ev_timer_stop (EV_A_ &once->to);\n  ev_free (once);\n\n  cb (revents, arg);\n}\n\nstatic void\nonce_cb_io (EV_P_ ev_io *w, int revents)\n{\n  struct ev_once *once = (struct ev_once *)(((char *)w) - offsetof (struct ev_once, io));\n\n  once_cb (EV_A_ once, revents | ev_clear_pending (EV_A_ &once->to));\n}\n\nstatic void\nonce_cb_to (EV_P_ ev_timer *w, int revents)\n{\n  struct ev_once *once = (struct ev_once *)(((char *)w) - offsetof (struct ev_once, to));\n\n  once_cb (EV_A_ once, revents | ev_clear_pending (EV_A_ &once->io));\n}\n\nvoid\nev_once (EV_P_ int fd, int events, ev_tstamp timeout, void (*cb)(int revents, void *arg), void *arg) EV_THROW\n{\n  struct ev_once *once = (struct ev_once *)ev_malloc (sizeof (struct ev_once));\n\n  if (expect_false (!once))\n    {\n      cb (EV_ERROR | EV_READ | EV_WRITE | EV_TIMER, arg);\n      return;\n    }\n\n  once->cb  = cb;\n  once->arg = arg;\n\n  ev_init (&once->io, once_cb_io);\n  if (fd >= 0)\n    {\n      ev_io_set (&once->io, fd, events);\n      ev_io_start (EV_A_ &once->io);\n    }\n\n  ev_init (&once->to, once_cb_to);\n  if (timeout >= 0.)\n    {\n      ev_timer_set (&once->to, timeout, 0.);\n      ev_timer_start (EV_A_ &once->to);\n    }\n}\n\n/*****************************************************************************/\n\n#if EV_WALK_ENABLE\nvoid ecb_cold\nev_walk (EV_P_ int types, void (*cb)(EV_P_ int type, void *w)) EV_THROW\n{\n  int i, j;\n  ev_watcher_list *wl, *wn;\n\n  if (types & (EV_IO | EV_EMBED))\n    for (i = 0; i < anfdmax; ++i)\n      for (wl = anfds [i].head; wl; )\n        {\n          wn = wl->next;\n\n#if EV_EMBED_ENABLE\n          if (ev_cb ((ev_io *)wl) == embed_io_cb)\n            {\n              if (types & EV_EMBED)\n                cb (EV_A_ EV_EMBED, ((char *)wl) - offsetof (struct ev_embed, io));\n            }\n          else\n#endif\n#if EV_USE_INOTIFY\n          if (ev_cb ((ev_io *)wl) == infy_cb)\n            ;\n          else\n#endif\n          if ((ev_io *)wl != &pipe_w)\n            if (types & EV_IO)\n              cb (EV_A_ EV_IO, wl);\n\n          wl = wn;\n        }\n\n  if (types & (EV_TIMER | EV_STAT))\n    for (i = timercnt + HEAP0; i-- > HEAP0; )\n#if EV_STAT_ENABLE\n      /*TODO: timer is not always active*/\n      if (ev_cb ((ev_timer *)ANHE_w (timers [i])) == stat_timer_cb)\n        {\n          if (types & EV_STAT)\n            cb (EV_A_ EV_STAT, ((char *)ANHE_w (timers [i])) - offsetof (struct ev_stat, timer));\n        }\n      else\n#endif\n      if (types & EV_TIMER)\n        cb (EV_A_ EV_TIMER, ANHE_w (timers [i]));\n\n#if EV_PERIODIC_ENABLE\n  if (types & EV_PERIODIC)\n    for (i = periodiccnt + HEAP0; i-- > HEAP0; )\n      cb (EV_A_ EV_PERIODIC, ANHE_w (periodics [i]));\n#endif\n\n#if EV_IDLE_ENABLE\n  if (types & EV_IDLE)\n    for (j = NUMPRI; j--; )\n      for (i = idlecnt [j]; i--; )\n        cb (EV_A_ EV_IDLE, idles [j][i]);\n#endif\n\n#if EV_FORK_ENABLE\n  if (types & EV_FORK)\n    for (i = forkcnt; i--; )\n      if (ev_cb (forks [i]) != embed_fork_cb)\n        cb (EV_A_ EV_FORK, forks [i]);\n#endif\n\n#if EV_ASYNC_ENABLE\n  if (types & EV_ASYNC)\n    for (i = asynccnt; i--; )\n      cb (EV_A_ EV_ASYNC, asyncs [i]);\n#endif\n\n#if EV_PREPARE_ENABLE\n  if (types & EV_PREPARE)\n    for (i = preparecnt; i--; )\n# if EV_EMBED_ENABLE\n      if (ev_cb (prepares [i]) != embed_prepare_cb)\n# endif\n        cb (EV_A_ EV_PREPARE, prepares [i]);\n#endif\n\n#if EV_CHECK_ENABLE\n  if (types & EV_CHECK)\n    for (i = checkcnt; i--; )\n      cb (EV_A_ EV_CHECK, checks [i]);\n#endif\n\n#if EV_SIGNAL_ENABLE\n  if (types & EV_SIGNAL)\n    for (i = 0; i < EV_NSIG - 1; ++i)\n      for (wl = signals [i].head; wl; )\n        {\n          wn = wl->next;\n          cb (EV_A_ EV_SIGNAL, wl);\n          wl = wn;\n        }\n#endif\n\n#if EV_CHILD_ENABLE\n  if (types & EV_CHILD)\n    for (i = (EV_PID_HASHSIZE); i--; )\n      for (wl = childs [i]; wl; )\n        {\n          wn = wl->next;\n          cb (EV_A_ EV_CHILD, wl);\n          wl = wn;\n        }\n#endif\n/* EV_STAT     0x00001000 /* stat data changed */\n/* EV_EMBED    0x00010000 /* embedded event loop needs sweep */\n}\n#endif\n\n#if EV_MULTIPLICITY\n  #include \"ev_wrap.h\"\n#endif\n\n"
        },
        {
          "name": "ev.h",
          "type": "blob",
          "size": 28.7470703125,
          "content": "/*\n * libev native API header\n *\n * Copyright (c) 2007,2008,2009,2010,2011,2012,2015 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifndef EV_H_\n#define EV_H_\n\n#ifdef __cplusplus\n# define EV_CPP(x) x\n# if __cplusplus >= 201103L\n#  define EV_THROW noexcept\n# else\n#  define EV_THROW throw ()\n# endif\n#else\n# define EV_CPP(x)\n# define EV_THROW\n#endif\n\nEV_CPP(extern \"C\" {)\n\n/*****************************************************************************/\n\n/* pre-4.0 compatibility */\n#ifndef EV_COMPAT3\n# define EV_COMPAT3 1\n#endif\n\n#ifndef EV_FEATURES\n# if defined __OPTIMIZE_SIZE__\n#  define EV_FEATURES 0x7c\n# else\n#  define EV_FEATURES 0x7f\n# endif\n#endif\n\n#define EV_FEATURE_CODE     ((EV_FEATURES) &  1)\n#define EV_FEATURE_DATA     ((EV_FEATURES) &  2)\n#define EV_FEATURE_CONFIG   ((EV_FEATURES) &  4)\n#define EV_FEATURE_API      ((EV_FEATURES) &  8)\n#define EV_FEATURE_WATCHERS ((EV_FEATURES) & 16)\n#define EV_FEATURE_BACKENDS ((EV_FEATURES) & 32)\n#define EV_FEATURE_OS       ((EV_FEATURES) & 64)\n\n/* these priorities are inclusive, higher priorities will be invoked earlier */\n#ifndef EV_MINPRI\n# define EV_MINPRI (EV_FEATURE_CONFIG ? -2 : 0)\n#endif\n#ifndef EV_MAXPRI\n# define EV_MAXPRI (EV_FEATURE_CONFIG ? +2 : 0)\n#endif\n\n#ifndef EV_MULTIPLICITY\n# define EV_MULTIPLICITY EV_FEATURE_CONFIG\n#endif\n\n#ifndef EV_PERIODIC_ENABLE\n# define EV_PERIODIC_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_STAT_ENABLE\n# define EV_STAT_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_PREPARE_ENABLE\n# define EV_PREPARE_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_CHECK_ENABLE\n# define EV_CHECK_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_IDLE_ENABLE\n# define EV_IDLE_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_FORK_ENABLE\n# define EV_FORK_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_CLEANUP_ENABLE\n# define EV_CLEANUP_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_SIGNAL_ENABLE\n# define EV_SIGNAL_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_CHILD_ENABLE\n# ifdef _WIN32\n#  define EV_CHILD_ENABLE 0\n# else\n#  define EV_CHILD_ENABLE EV_FEATURE_WATCHERS\n#endif\n#endif\n\n#ifndef EV_ASYNC_ENABLE\n# define EV_ASYNC_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_EMBED_ENABLE\n# define EV_EMBED_ENABLE EV_FEATURE_WATCHERS\n#endif\n\n#ifndef EV_WALK_ENABLE\n# define EV_WALK_ENABLE 0 /* not yet */\n#endif\n\n/*****************************************************************************/\n\n#if EV_CHILD_ENABLE && !EV_SIGNAL_ENABLE\n# undef EV_SIGNAL_ENABLE\n# define EV_SIGNAL_ENABLE 1\n#endif\n\n/*****************************************************************************/\n\ntypedef double ev_tstamp;\n\n#include <string.h> /* for memmove */\n\n#ifndef EV_ATOMIC_T\n# include <signal.h>\n# define EV_ATOMIC_T sig_atomic_t volatile\n#endif\n\n#if EV_STAT_ENABLE\n# ifdef _WIN32\n#  include <time.h>\n#  include <sys/types.h>\n# endif\n# include <sys/stat.h>\n#endif\n\n/* support multiple event loops? */\n#if EV_MULTIPLICITY\nstruct ev_loop;\n# define EV_P  struct ev_loop *loop               /* a loop as sole parameter in a declaration */\n# define EV_P_ EV_P,                              /* a loop as first of multiple parameters */\n# define EV_A  loop                               /* a loop as sole argument to a function call */\n# define EV_A_ EV_A,                              /* a loop as first of multiple arguments */\n# define EV_DEFAULT_UC  ev_default_loop_uc_ ()    /* the default loop, if initialised, as sole arg */\n# define EV_DEFAULT_UC_ EV_DEFAULT_UC,            /* the default loop as first of multiple arguments */\n# define EV_DEFAULT  ev_default_loop (0)          /* the default loop as sole arg */\n# define EV_DEFAULT_ EV_DEFAULT,                  /* the default loop as first of multiple arguments */\n#else\n# define EV_P void\n# define EV_P_\n# define EV_A\n# define EV_A_\n# define EV_DEFAULT\n# define EV_DEFAULT_\n# define EV_DEFAULT_UC\n# define EV_DEFAULT_UC_\n# undef EV_EMBED_ENABLE\n#endif\n\n/* EV_INLINE is used for functions in header files */\n#if __STDC_VERSION__ >= 199901L || __GNUC__ >= 3\n# define EV_INLINE static inline\n#else\n# define EV_INLINE static\n#endif\n\n#ifdef EV_API_STATIC\n# define EV_API_DECL static\n#else\n# define EV_API_DECL extern\n#endif\n\n/* EV_PROTOTYPES can be used to switch of prototype declarations */\n#ifndef EV_PROTOTYPES\n# define EV_PROTOTYPES 1\n#endif\n\n/*****************************************************************************/\n\n#define EV_VERSION_MAJOR 4\n#define EV_VERSION_MINOR 22\n\n/* eventmask, revents, events... */\nenum {\n  EV_UNDEF    = (int)0xFFFFFFFF, /* guaranteed to be invalid */\n  EV_NONE     =            0x00, /* no events */\n  EV_READ     =            0x01, /* ev_io detected read will not block */\n  EV_WRITE    =            0x02, /* ev_io detected write will not block */\n  EV__IOFDSET =            0x80, /* internal use only */\n  EV_IO       =         EV_READ, /* alias for type-detection */\n  EV_TIMER    =      0x00000100, /* timer timed out */\n#if EV_COMPAT3\n  EV_TIMEOUT  =        EV_TIMER, /* pre 4.0 API compatibility */\n#endif\n  EV_PERIODIC =      0x00000200, /* periodic timer timed out */\n  EV_SIGNAL   =      0x00000400, /* signal was received */\n  EV_CHILD    =      0x00000800, /* child/pid had status change */\n  EV_STAT     =      0x00001000, /* stat data changed */\n  EV_IDLE     =      0x00002000, /* event loop is idling */\n  EV_PREPARE  =      0x00004000, /* event loop about to poll */\n  EV_CHECK    =      0x00008000, /* event loop finished poll */\n  EV_EMBED    =      0x00010000, /* embedded event loop needs sweep */\n  EV_FORK     =      0x00020000, /* event loop resumed in child */\n  EV_CLEANUP  =      0x00040000, /* event loop resumed in child */\n  EV_ASYNC    =      0x00080000, /* async intra-loop signal */\n  EV_CUSTOM   =      0x01000000, /* for use by user code */\n  EV_ERROR    = (int)0x80000000  /* sent when an error occurs */\n};\n\n/* can be used to add custom fields to all watchers, while losing binary compatibility */\n#ifndef EV_COMMON\n# define EV_COMMON void *data;\n#endif\n\n#ifndef EV_CB_DECLARE\n# define EV_CB_DECLARE(type) void (*cb)(EV_P_ struct type *w, int revents);\n#endif\n#ifndef EV_CB_INVOKE\n# define EV_CB_INVOKE(watcher,revents) (watcher)->cb (EV_A_ (watcher), (revents))\n#endif\n\n/* not official, do not use */\n#define EV_CB(type,name) void name (EV_P_ struct ev_ ## type *w, int revents)\n\n/*\n * struct member types:\n * private: you may look at them, but not change them,\n *          and they might not mean anything to you.\n * ro: can be read anytime, but only changed when the watcher isn't active.\n * rw: can be read and modified anytime, even when the watcher is active.\n *\n * some internal details that might be helpful for debugging:\n *\n * active is either 0, which means the watcher is not active,\n *           or the array index of the watcher (periodics, timers)\n *           or the array index + 1 (most other watchers)\n *           or simply 1 for watchers that aren't in some array.\n * pending is either 0, in which case the watcher isn't,\n *           or the array index + 1 in the pendings array.\n */\n\n#if EV_MINPRI == EV_MAXPRI\n# define EV_DECL_PRIORITY\n#elif !defined (EV_DECL_PRIORITY)\n# define EV_DECL_PRIORITY int priority;\n#endif\n\n/* shared by all watchers */\n#define EV_WATCHER(type)\t\t\t\\\n  int active; /* private */\t\t\t\\\n  int pending; /* private */\t\t\t\\\n  EV_DECL_PRIORITY /* private */\t\t\\\n  EV_COMMON /* rw */\t\t\t\t\\\n  EV_CB_DECLARE (type) /* private */\n\n#define EV_WATCHER_LIST(type)\t\t\t\\\n  EV_WATCHER (type)\t\t\t\t\\\n  struct ev_watcher_list *next; /* private */\n\n#define EV_WATCHER_TIME(type)\t\t\t\\\n  EV_WATCHER (type)\t\t\t\t\\\n  ev_tstamp at;     /* private */\n\n/* base class, nothing to see here unless you subclass */\ntypedef struct ev_watcher\n{\n  EV_WATCHER (ev_watcher)\n} ev_watcher;\n\n/* base class, nothing to see here unless you subclass */\ntypedef struct ev_watcher_list\n{\n  EV_WATCHER_LIST (ev_watcher_list)\n} ev_watcher_list;\n\n/* base class, nothing to see here unless you subclass */\ntypedef struct ev_watcher_time\n{\n  EV_WATCHER_TIME (ev_watcher_time)\n} ev_watcher_time;\n\n/* invoked when fd is either EV_READable or EV_WRITEable */\n/* revent EV_READ, EV_WRITE */\ntypedef struct ev_io\n{\n  EV_WATCHER_LIST (ev_io)\n\n  int fd;     /* ro */\n  int events; /* ro */\n} ev_io;\n\n/* invoked after a specific time, repeatable (based on monotonic clock) */\n/* revent EV_TIMEOUT */\ntypedef struct ev_timer\n{\n  EV_WATCHER_TIME (ev_timer)\n\n  ev_tstamp repeat; /* rw */\n} ev_timer;\n\n/* invoked at some specific time, possibly repeating at regular intervals (based on UTC) */\n/* revent EV_PERIODIC */\ntypedef struct ev_periodic\n{\n  EV_WATCHER_TIME (ev_periodic)\n\n  ev_tstamp offset; /* rw */\n  ev_tstamp interval; /* rw */\n  ev_tstamp (*reschedule_cb)(struct ev_periodic *w, ev_tstamp now) EV_THROW; /* rw */\n} ev_periodic;\n\n/* invoked when the given signal has been received */\n/* revent EV_SIGNAL */\ntypedef struct ev_signal\n{\n  EV_WATCHER_LIST (ev_signal)\n\n  int signum; /* ro */\n} ev_signal;\n\n/* invoked when sigchld is received and waitpid indicates the given pid */\n/* revent EV_CHILD */\n/* does not support priorities */\ntypedef struct ev_child\n{\n  EV_WATCHER_LIST (ev_child)\n\n  int flags;   /* private */\n  int pid;     /* ro */\n  int rpid;    /* rw, holds the received pid */\n  int rstatus; /* rw, holds the exit status, use the macros from sys/wait.h */\n} ev_child;\n\n#if EV_STAT_ENABLE\n/* st_nlink = 0 means missing file or other error */\n# ifdef _WIN32\ntypedef struct _stati64 ev_statdata;\n# else\ntypedef struct stat ev_statdata;\n# endif\n\n/* invoked each time the stat data changes for a given path */\n/* revent EV_STAT */\ntypedef struct ev_stat\n{\n  EV_WATCHER_LIST (ev_stat)\n\n  ev_timer timer;     /* private */\n  ev_tstamp interval; /* ro */\n  const char *path;   /* ro */\n  ev_statdata prev;   /* ro */\n  ev_statdata attr;   /* ro */\n\n  int wd; /* wd for inotify, fd for kqueue */\n} ev_stat;\n#endif\n\n#if EV_IDLE_ENABLE\n/* invoked when the nothing else needs to be done, keeps the process from blocking */\n/* revent EV_IDLE */\ntypedef struct ev_idle\n{\n  EV_WATCHER (ev_idle)\n} ev_idle;\n#endif\n\n/* invoked for each run of the mainloop, just before the blocking call */\n/* you can still change events in any way you like */\n/* revent EV_PREPARE */\ntypedef struct ev_prepare\n{\n  EV_WATCHER (ev_prepare)\n} ev_prepare;\n\n/* invoked for each run of the mainloop, just after the blocking call */\n/* revent EV_CHECK */\ntypedef struct ev_check\n{\n  EV_WATCHER (ev_check)\n} ev_check;\n\n#if EV_FORK_ENABLE\n/* the callback gets invoked before check in the child process when a fork was detected */\n/* revent EV_FORK */\ntypedef struct ev_fork\n{\n  EV_WATCHER (ev_fork)\n} ev_fork;\n#endif\n\n#if EV_CLEANUP_ENABLE\n/* is invoked just before the loop gets destroyed */\n/* revent EV_CLEANUP */\ntypedef struct ev_cleanup\n{\n  EV_WATCHER (ev_cleanup)\n} ev_cleanup;\n#endif\n\n#if EV_EMBED_ENABLE\n/* used to embed an event loop inside another */\n/* the callback gets invoked when the event loop has handled events, and can be 0 */\ntypedef struct ev_embed\n{\n  EV_WATCHER (ev_embed)\n\n  struct ev_loop *other; /* ro */\n  ev_io io;              /* private */\n  ev_prepare prepare;    /* private */\n  ev_check check;        /* unused */\n  ev_timer timer;        /* unused */\n  ev_periodic periodic;  /* unused */\n  ev_idle idle;          /* unused */\n  ev_fork fork;          /* private */\n#if EV_CLEANUP_ENABLE\n  ev_cleanup cleanup;    /* unused */\n#endif\n} ev_embed;\n#endif\n\n#if EV_ASYNC_ENABLE\n/* invoked when somebody calls ev_async_send on the watcher */\n/* revent EV_ASYNC */\ntypedef struct ev_async\n{\n  EV_WATCHER (ev_async)\n\n  EV_ATOMIC_T sent; /* private */\n} ev_async;\n\n# define ev_async_pending(w) (+(w)->sent)\n#endif\n\n/* the presence of this union forces similar struct layout */\nunion ev_any_watcher\n{\n  struct ev_watcher w;\n  struct ev_watcher_list wl;\n\n  struct ev_io io;\n  struct ev_timer timer;\n  struct ev_periodic periodic;\n  struct ev_signal signal;\n  struct ev_child child;\n#if EV_STAT_ENABLE\n  struct ev_stat stat;\n#endif\n#if EV_IDLE_ENABLE\n  struct ev_idle idle;\n#endif\n  struct ev_prepare prepare;\n  struct ev_check check;\n#if EV_FORK_ENABLE\n  struct ev_fork fork;\n#endif\n#if EV_CLEANUP_ENABLE\n  struct ev_cleanup cleanup;\n#endif\n#if EV_EMBED_ENABLE\n  struct ev_embed embed;\n#endif\n#if EV_ASYNC_ENABLE\n  struct ev_async async;\n#endif\n};\n\n/* flag bits for ev_default_loop and ev_loop_new */\nenum {\n  /* the default */\n  EVFLAG_AUTO      = 0x00000000U, /* not quite a mask */\n  /* flag bits */\n  EVFLAG_NOENV     = 0x01000000U, /* do NOT consult environment */\n  EVFLAG_FORKCHECK = 0x02000000U, /* check for a fork in each iteration */\n  /* debugging/feature disable */\n  EVFLAG_NOINOTIFY = 0x00100000U, /* do not attempt to use inotify */\n#if EV_COMPAT3\n  EVFLAG_NOSIGFD   = 0, /* compatibility to pre-3.9 */\n#endif\n  EVFLAG_SIGNALFD  = 0x00200000U, /* attempt to use signalfd */\n  EVFLAG_NOSIGMASK = 0x00400000U  /* avoid modifying the signal mask */\n};\n\n/* method bits to be ored together */\nenum {\n  EVBACKEND_SELECT  = 0x00000001U, /* about anywhere */\n  EVBACKEND_POLL    = 0x00000002U, /* !win */\n  EVBACKEND_EPOLL   = 0x00000004U, /* linux */\n  EVBACKEND_KQUEUE  = 0x00000008U, /* bsd */\n  EVBACKEND_DEVPOLL = 0x00000010U, /* solaris 8 */ /* NYI */\n  EVBACKEND_PORT    = 0x00000020U, /* solaris 10 */\n  EVBACKEND_ALL     = 0x0000003FU, /* all known backends */\n  EVBACKEND_MASK    = 0x0000FFFFU  /* all future backends */\n};\n\n#if EV_PROTOTYPES\nEV_API_DECL int ev_version_major (void) EV_THROW;\nEV_API_DECL int ev_version_minor (void) EV_THROW;\n\nEV_API_DECL unsigned int ev_supported_backends (void) EV_THROW;\nEV_API_DECL unsigned int ev_recommended_backends (void) EV_THROW;\nEV_API_DECL unsigned int ev_embeddable_backends (void) EV_THROW;\n\nEV_API_DECL ev_tstamp ev_time (void) EV_THROW;\nEV_API_DECL void ev_sleep (ev_tstamp delay) EV_THROW; /* sleep for a while */\n\n/* Sets the allocation function to use, works like realloc.\n * It is used to allocate and free memory.\n * If it returns zero when memory needs to be allocated, the library might abort\n * or take some potentially destructive action.\n * The default is your system realloc function.\n */\nEV_API_DECL void ev_set_allocator (void *(*cb)(void *ptr, long size) EV_THROW) EV_THROW;\n\n/* set the callback function to call on a\n * retryable syscall error\n * (such as failed select, poll, epoll_wait)\n */\nEV_API_DECL void ev_set_syserr_cb (void (*cb)(const char *msg) EV_THROW) EV_THROW;\n\n#if EV_MULTIPLICITY\n\n/* the default loop is the only one that handles signals and child watchers */\n/* you can call this as often as you like */\nEV_API_DECL struct ev_loop *ev_default_loop (unsigned int flags EV_CPP (= 0)) EV_THROW;\n\n#ifdef EV_API_STATIC\nEV_API_DECL struct ev_loop *ev_default_loop_ptr;\n#endif\n\nEV_INLINE struct ev_loop *\nev_default_loop_uc_ (void) EV_THROW\n{\n  extern struct ev_loop *ev_default_loop_ptr;\n\n  return ev_default_loop_ptr;\n}\n\nEV_INLINE int\nev_is_default_loop (EV_P) EV_THROW\n{\n  return EV_A == EV_DEFAULT_UC;\n}\n\n/* create and destroy alternative loops that don't handle signals */\nEV_API_DECL struct ev_loop *ev_loop_new (unsigned int flags EV_CPP (= 0)) EV_THROW;\n\nEV_API_DECL ev_tstamp ev_now (EV_P) EV_THROW; /* time w.r.t. timers and the eventloop, updated after each poll */\n\n#else\n\nEV_API_DECL int ev_default_loop (unsigned int flags EV_CPP (= 0)) EV_THROW; /* returns true when successful */\n\nEV_API_DECL ev_tstamp ev_rt_now;\n\nEV_INLINE ev_tstamp\nev_now (void) EV_THROW\n{\n  return ev_rt_now;\n}\n\n/* looks weird, but ev_is_default_loop (EV_A) still works if this exists */\nEV_INLINE int\nev_is_default_loop (void) EV_THROW\n{\n  return 1;\n}\n\n#endif /* multiplicity */\n\n/* destroy event loops, also works for the default loop */\nEV_API_DECL void ev_loop_destroy (EV_P);\n\n/* this needs to be called after fork, to duplicate the loop */\n/* when you want to re-use it in the child */\n/* you can call it in either the parent or the child */\n/* you can actually call it at any time, anywhere :) */\nEV_API_DECL void ev_loop_fork (EV_P) EV_THROW;\n\nEV_API_DECL unsigned int ev_backend (EV_P) EV_THROW; /* backend in use by loop */\n\nEV_API_DECL void ev_now_update (EV_P) EV_THROW; /* update event loop time */\n\n#if EV_WALK_ENABLE\n/* walk (almost) all watchers in the loop of a given type, invoking the */\n/* callback on every such watcher. The callback might stop the watcher, */\n/* but do nothing else with the loop */\nEV_API_DECL void ev_walk (EV_P_ int types, void (*cb)(EV_P_ int type, void *w)) EV_THROW;\n#endif\n\n#endif /* prototypes */\n\n/* ev_run flags values */\nenum {\n  EVRUN_NOWAIT = 1, /* do not block/wait */\n  EVRUN_ONCE   = 2  /* block *once* only */\n};\n\n/* ev_break how values */\nenum {\n  EVBREAK_CANCEL = 0, /* undo unloop */\n  EVBREAK_ONE    = 1, /* unloop once */\n  EVBREAK_ALL    = 2  /* unloop all loops */\n};\n\n#if EV_PROTOTYPES\nEV_API_DECL int  ev_run (EV_P_ int flags EV_CPP (= 0));\nEV_API_DECL void ev_break (EV_P_ int how EV_CPP (= EVBREAK_ONE)) EV_THROW; /* break out of the loop */\n\n/*\n * ref/unref can be used to add or remove a refcount on the mainloop. every watcher\n * keeps one reference. if you have a long-running watcher you never unregister that\n * should not keep ev_loop from running, unref() after starting, and ref() before stopping.\n */\nEV_API_DECL void ev_ref   (EV_P) EV_THROW;\nEV_API_DECL void ev_unref (EV_P) EV_THROW;\n\n/*\n * convenience function, wait for a single event, without registering an event watcher\n * if timeout is < 0, do wait indefinitely\n */\nEV_API_DECL void ev_once (EV_P_ int fd, int events, ev_tstamp timeout, void (*cb)(int revents, void *arg), void *arg) EV_THROW;\n\n# if EV_FEATURE_API\nEV_API_DECL unsigned int ev_iteration (EV_P) EV_THROW; /* number of loop iterations */\nEV_API_DECL unsigned int ev_depth     (EV_P) EV_THROW; /* #ev_loop enters - #ev_loop leaves */\nEV_API_DECL void         ev_verify    (EV_P) EV_THROW; /* abort if loop data corrupted */\n\nEV_API_DECL void ev_set_io_collect_interval (EV_P_ ev_tstamp interval) EV_THROW; /* sleep at least this time, default 0 */\nEV_API_DECL void ev_set_timeout_collect_interval (EV_P_ ev_tstamp interval) EV_THROW; /* sleep at least this time, default 0 */\n\n/* advanced stuff for threading etc. support, see docs */\nEV_API_DECL void ev_set_userdata (EV_P_ void *data) EV_THROW;\nEV_API_DECL void *ev_userdata (EV_P) EV_THROW;\ntypedef void (*ev_loop_callback)(EV_P);\nEV_API_DECL void ev_set_invoke_pending_cb (EV_P_ ev_loop_callback invoke_pending_cb) EV_THROW;\n/* C++ doesn't allow the use of the ev_loop_callback typedef here, so we need to spell it out */\nEV_API_DECL void ev_set_loop_release_cb (EV_P_ void (*release)(EV_P) EV_THROW, void (*acquire)(EV_P) EV_THROW) EV_THROW;\n\nEV_API_DECL unsigned int ev_pending_count (EV_P) EV_THROW; /* number of pending events, if any */\nEV_API_DECL void ev_invoke_pending (EV_P); /* invoke all pending watchers */\n\n/*\n * stop/start the timer handling.\n */\nEV_API_DECL void ev_suspend (EV_P) EV_THROW;\nEV_API_DECL void ev_resume  (EV_P) EV_THROW;\n#endif\n\n#endif\n\n/* these may evaluate ev multiple times, and the other arguments at most once */\n/* either use ev_init + ev_TYPE_set, or the ev_TYPE_init macro, below, to first initialise a watcher */\n#define ev_init(ev,cb_) do {\t\t\t\\\n  ((ev_watcher *)(void *)(ev))->active  =\t\\\n  ((ev_watcher *)(void *)(ev))->pending = 0;\t\\\n  ev_set_priority ((ev), 0);\t\t\t\\\n  ev_set_cb ((ev), cb_);\t\t\t\\\n} while (0)\n\n#define ev_io_set(ev,fd_,events_)            do { (ev)->fd = (fd_); (ev)->events = (events_) | EV__IOFDSET; } while (0)\n#define ev_timer_set(ev,after_,repeat_)      do { ((ev_watcher_time *)(ev))->at = (after_); (ev)->repeat = (repeat_); } while (0)\n#define ev_periodic_set(ev,ofs_,ival_,rcb_)  do { (ev)->offset = (ofs_); (ev)->interval = (ival_); (ev)->reschedule_cb = (rcb_); } while (0)\n#define ev_signal_set(ev,signum_)            do { (ev)->signum = (signum_); } while (0)\n#define ev_child_set(ev,pid_,trace_)         do { (ev)->pid = (pid_); (ev)->flags = !!(trace_); } while (0)\n#define ev_stat_set(ev,path_,interval_)      do { (ev)->path = (path_); (ev)->interval = (interval_); (ev)->wd = -2; } while (0)\n#define ev_idle_set(ev)                      /* nop, yes, this is a serious in-joke */\n#define ev_prepare_set(ev)                   /* nop, yes, this is a serious in-joke */\n#define ev_check_set(ev)                     /* nop, yes, this is a serious in-joke */\n#define ev_embed_set(ev,other_)              do { (ev)->other = (other_); } while (0)\n#define ev_fork_set(ev)                      /* nop, yes, this is a serious in-joke */\n#define ev_cleanup_set(ev)                   /* nop, yes, this is a serious in-joke */\n#define ev_async_set(ev)                     /* nop, yes, this is a serious in-joke */\n\n#define ev_io_init(ev,cb,fd,events)          do { ev_init ((ev), (cb)); ev_io_set ((ev),(fd),(events)); } while (0)\n#define ev_timer_init(ev,cb,after,repeat)    do { ev_init ((ev), (cb)); ev_timer_set ((ev),(after),(repeat)); } while (0)\n#define ev_periodic_init(ev,cb,ofs,ival,rcb) do { ev_init ((ev), (cb)); ev_periodic_set ((ev),(ofs),(ival),(rcb)); } while (0)\n#define ev_signal_init(ev,cb,signum)         do { ev_init ((ev), (cb)); ev_signal_set ((ev), (signum)); } while (0)\n#define ev_child_init(ev,cb,pid,trace)       do { ev_init ((ev), (cb)); ev_child_set ((ev),(pid),(trace)); } while (0)\n#define ev_stat_init(ev,cb,path,interval)    do { ev_init ((ev), (cb)); ev_stat_set ((ev),(path),(interval)); } while (0)\n#define ev_idle_init(ev,cb)                  do { ev_init ((ev), (cb)); ev_idle_set ((ev)); } while (0)\n#define ev_prepare_init(ev,cb)               do { ev_init ((ev), (cb)); ev_prepare_set ((ev)); } while (0)\n#define ev_check_init(ev,cb)                 do { ev_init ((ev), (cb)); ev_check_set ((ev)); } while (0)\n#define ev_embed_init(ev,cb,other)           do { ev_init ((ev), (cb)); ev_embed_set ((ev),(other)); } while (0)\n#define ev_fork_init(ev,cb)                  do { ev_init ((ev), (cb)); ev_fork_set ((ev)); } while (0)\n#define ev_cleanup_init(ev,cb)               do { ev_init ((ev), (cb)); ev_cleanup_set ((ev)); } while (0)\n#define ev_async_init(ev,cb)                 do { ev_init ((ev), (cb)); ev_async_set ((ev)); } while (0)\n\n#define ev_is_pending(ev)                    (0 + ((ev_watcher *)(void *)(ev))->pending) /* ro, true when watcher is waiting for callback invocation */\n#define ev_is_active(ev)                     (0 + ((ev_watcher *)(void *)(ev))->active) /* ro, true when the watcher has been started */\n\n#define ev_cb_(ev)                           (ev)->cb /* rw */\n#define ev_cb(ev)                            (memmove (&ev_cb_ (ev), &((ev_watcher *)(ev))->cb, sizeof (ev_cb_ (ev))), (ev)->cb)\n\n#if EV_MINPRI == EV_MAXPRI\n# define ev_priority(ev)                     ((ev), EV_MINPRI)\n# define ev_set_priority(ev,pri)             ((ev), (pri))\n#else\n# define ev_priority(ev)                     (+(((ev_watcher *)(void *)(ev))->priority))\n# define ev_set_priority(ev,pri)             (   (ev_watcher *)(void *)(ev))->priority = (pri)\n#endif\n\n#define ev_periodic_at(ev)                   (+((ev_watcher_time *)(ev))->at)\n\n#ifndef ev_set_cb\n# define ev_set_cb(ev,cb_)                   (ev_cb_ (ev) = (cb_), memmove (&((ev_watcher *)(ev))->cb, &ev_cb_ (ev), sizeof (ev_cb_ (ev))))\n#endif\n\n/* stopping (enabling, adding) a watcher does nothing if it is already running */\n/* stopping (disabling, deleting) a watcher does nothing unless it's already running */\n#if EV_PROTOTYPES\n\n/* feeds an event into a watcher as if the event actually occurred */\n/* accepts any ev_watcher type */\nEV_API_DECL void ev_feed_event     (EV_P_ void *w, int revents) EV_THROW;\nEV_API_DECL void ev_feed_fd_event  (EV_P_ int fd, int revents) EV_THROW;\n#if EV_SIGNAL_ENABLE\nEV_API_DECL void ev_feed_signal    (int signum) EV_THROW;\nEV_API_DECL void ev_feed_signal_event (EV_P_ int signum) EV_THROW;\n#endif\nEV_API_DECL void ev_invoke         (EV_P_ void *w, int revents);\nEV_API_DECL int  ev_clear_pending  (EV_P_ void *w) EV_THROW;\n\nEV_API_DECL void ev_io_start       (EV_P_ ev_io *w) EV_THROW;\nEV_API_DECL void ev_io_stop        (EV_P_ ev_io *w) EV_THROW;\n\nEV_API_DECL void ev_timer_start    (EV_P_ ev_timer *w) EV_THROW;\nEV_API_DECL void ev_timer_stop     (EV_P_ ev_timer *w) EV_THROW;\n/* stops if active and no repeat, restarts if active and repeating, starts if inactive and repeating */\nEV_API_DECL void ev_timer_again    (EV_P_ ev_timer *w) EV_THROW;\n/* return remaining time */\nEV_API_DECL ev_tstamp ev_timer_remaining (EV_P_ ev_timer *w) EV_THROW;\n\n#if EV_PERIODIC_ENABLE\nEV_API_DECL void ev_periodic_start (EV_P_ ev_periodic *w) EV_THROW;\nEV_API_DECL void ev_periodic_stop  (EV_P_ ev_periodic *w) EV_THROW;\nEV_API_DECL void ev_periodic_again (EV_P_ ev_periodic *w) EV_THROW;\n#endif\n\n/* only supported in the default loop */\n#if EV_SIGNAL_ENABLE\nEV_API_DECL void ev_signal_start   (EV_P_ ev_signal *w) EV_THROW;\nEV_API_DECL void ev_signal_stop    (EV_P_ ev_signal *w) EV_THROW;\n#endif\n\n/* only supported in the default loop */\n# if EV_CHILD_ENABLE\nEV_API_DECL void ev_child_start    (EV_P_ ev_child *w) EV_THROW;\nEV_API_DECL void ev_child_stop     (EV_P_ ev_child *w) EV_THROW;\n# endif\n\n# if EV_STAT_ENABLE\nEV_API_DECL void ev_stat_start     (EV_P_ ev_stat *w) EV_THROW;\nEV_API_DECL void ev_stat_stop      (EV_P_ ev_stat *w) EV_THROW;\nEV_API_DECL void ev_stat_stat      (EV_P_ ev_stat *w) EV_THROW;\n# endif\n\n# if EV_IDLE_ENABLE\nEV_API_DECL void ev_idle_start     (EV_P_ ev_idle *w) EV_THROW;\nEV_API_DECL void ev_idle_stop      (EV_P_ ev_idle *w) EV_THROW;\n# endif\n\n#if EV_PREPARE_ENABLE\nEV_API_DECL void ev_prepare_start  (EV_P_ ev_prepare *w) EV_THROW;\nEV_API_DECL void ev_prepare_stop   (EV_P_ ev_prepare *w) EV_THROW;\n#endif\n\n#if EV_CHECK_ENABLE\nEV_API_DECL void ev_check_start    (EV_P_ ev_check *w) EV_THROW;\nEV_API_DECL void ev_check_stop     (EV_P_ ev_check *w) EV_THROW;\n#endif\n\n# if EV_FORK_ENABLE\nEV_API_DECL void ev_fork_start     (EV_P_ ev_fork *w) EV_THROW;\nEV_API_DECL void ev_fork_stop      (EV_P_ ev_fork *w) EV_THROW;\n# endif\n\n# if EV_CLEANUP_ENABLE\nEV_API_DECL void ev_cleanup_start  (EV_P_ ev_cleanup *w) EV_THROW;\nEV_API_DECL void ev_cleanup_stop   (EV_P_ ev_cleanup *w) EV_THROW;\n# endif\n\n# if EV_EMBED_ENABLE\n/* only supported when loop to be embedded is in fact embeddable */\nEV_API_DECL void ev_embed_start    (EV_P_ ev_embed *w) EV_THROW;\nEV_API_DECL void ev_embed_stop     (EV_P_ ev_embed *w) EV_THROW;\nEV_API_DECL void ev_embed_sweep    (EV_P_ ev_embed *w) EV_THROW;\n# endif\n\n# if EV_ASYNC_ENABLE\nEV_API_DECL void ev_async_start    (EV_P_ ev_async *w) EV_THROW;\nEV_API_DECL void ev_async_stop     (EV_P_ ev_async *w) EV_THROW;\nEV_API_DECL void ev_async_send     (EV_P_ ev_async *w) EV_THROW;\n# endif\n\n#if EV_COMPAT3\n  #define EVLOOP_NONBLOCK EVRUN_NOWAIT\n  #define EVLOOP_ONESHOT  EVRUN_ONCE\n  #define EVUNLOOP_CANCEL EVBREAK_CANCEL\n  #define EVUNLOOP_ONE    EVBREAK_ONE\n  #define EVUNLOOP_ALL    EVBREAK_ALL\n  #if EV_PROTOTYPES\n    EV_INLINE void ev_loop   (EV_P_ int flags) { ev_run   (EV_A_ flags); }\n    EV_INLINE void ev_unloop (EV_P_ int how  ) { ev_break (EV_A_ how  ); }\n    EV_INLINE void ev_default_destroy (void) { ev_loop_destroy (EV_DEFAULT); }\n    EV_INLINE void ev_default_fork    (void) { ev_loop_fork    (EV_DEFAULT); }\n    #if EV_FEATURE_API\n      EV_INLINE unsigned int ev_loop_count  (EV_P) { return ev_iteration  (EV_A); }\n      EV_INLINE unsigned int ev_loop_depth  (EV_P) { return ev_depth      (EV_A); }\n      EV_INLINE void         ev_loop_verify (EV_P) {        ev_verify     (EV_A); }\n    #endif\n  #endif\n#else\n  typedef struct ev_loop ev_loop;\n#endif\n\n#endif\n\nEV_CPP(})\n\n#endif\n\n"
        },
        {
          "name": "ev.pod",
          "type": "blob",
          "size": 212.80859375,
          "content": "=encoding utf-8\n\n=head1 NAME\n\nlibev - a high performance full-featured event loop written in C\n\n=head1 SYNOPSIS\n\n   #include <ev.h>\n\n=head2 EXAMPLE PROGRAM\n\n   // a single header file is required\n   #include <ev.h>\n\n   #include <stdio.h> // for puts\n\n   // every watcher type has its own typedef'd struct\n   // with the name ev_TYPE\n   ev_io stdin_watcher;\n   ev_timer timeout_watcher;\n\n   // all watcher callbacks have a similar signature\n   // this callback is called when data is readable on stdin\n   static void\n   stdin_cb (EV_P_ ev_io *w, int revents)\n   {\n     puts (\"stdin ready\");\n     // for one-shot events, one must manually stop the watcher\n     // with its corresponding stop function.\n     ev_io_stop (EV_A_ w);\n\n     // this causes all nested ev_run's to stop iterating\n     ev_break (EV_A_ EVBREAK_ALL);\n   }\n\n   // another callback, this time for a time-out\n   static void\n   timeout_cb (EV_P_ ev_timer *w, int revents)\n   {\n     puts (\"timeout\");\n     // this causes the innermost ev_run to stop iterating\n     ev_break (EV_A_ EVBREAK_ONE);\n   }\n\n   int\n   main (void)\n   {\n     // use the default event loop unless you have special needs\n     struct ev_loop *loop = EV_DEFAULT;\n\n     // initialise an io watcher, then start it\n     // this one will watch for stdin to become readable\n     ev_io_init (&stdin_watcher, stdin_cb, /*STDIN_FILENO*/ 0, EV_READ);\n     ev_io_start (loop, &stdin_watcher);\n\n     // initialise a timer watcher, then start it\n     // simple non-repeating 5.5 second timeout\n     ev_timer_init (&timeout_watcher, timeout_cb, 5.5, 0.);\n     ev_timer_start (loop, &timeout_watcher);\n\n     // now wait for events to arrive\n     ev_run (loop, 0);\n\n     // break was called, so exit\n     return 0;\n   }\n\n=head1 ABOUT THIS DOCUMENT\n\nThis document documents the libev software package.\n\nThe newest version of this document is also available as an html-formatted\nweb page you might find easier to navigate when reading it for the first\ntime: L<http://pod.tst.eu/http://cvs.schmorp.de/libev/ev.pod>.\n\nWhile this document tries to be as complete as possible in documenting\nlibev, its usage and the rationale behind its design, it is not a tutorial\non event-based programming, nor will it introduce event-based programming\nwith libev.\n\nFamiliarity with event based programming techniques in general is assumed\nthroughout this document.\n\n=head1 WHAT TO READ WHEN IN A HURRY\n\nThis manual tries to be very detailed, but unfortunately, this also makes\nit very long. If you just want to know the basics of libev, I suggest\nreading L</ANATOMY OF A WATCHER>, then the L</EXAMPLE PROGRAM> above and\nlook up the missing functions in L</GLOBAL FUNCTIONS> and the C<ev_io> and\nC<ev_timer> sections in L</WATCHER TYPES>.\n\n=head1 ABOUT LIBEV\n\nLibev is an event loop: you register interest in certain events (such as a\nfile descriptor being readable or a timeout occurring), and it will manage\nthese event sources and provide your program with events.\n\nTo do this, it must take more or less complete control over your process\n(or thread) by executing the I<event loop> handler, and will then\ncommunicate events via a callback mechanism.\n\nYou register interest in certain events by registering so-called I<event\nwatchers>, which are relatively small C structures you initialise with the\ndetails of the event, and then hand it over to libev by I<starting> the\nwatcher.\n\n=head2 FEATURES\n\nLibev supports C<select>, C<poll>, the Linux-specific C<epoll>, the\nBSD-specific C<kqueue> and the Solaris-specific event port mechanisms\nfor file descriptor events (C<ev_io>), the Linux C<inotify> interface\n(for C<ev_stat>), Linux eventfd/signalfd (for faster and cleaner\ninter-thread wakeup (C<ev_async>)/signal handling (C<ev_signal>)) relative\ntimers (C<ev_timer>), absolute timers with customised rescheduling\n(C<ev_periodic>), synchronous signals (C<ev_signal>), process status\nchange events (C<ev_child>), and event watchers dealing with the event\nloop mechanism itself (C<ev_idle>, C<ev_embed>, C<ev_prepare> and\nC<ev_check> watchers) as well as file watchers (C<ev_stat>) and even\nlimited support for fork events (C<ev_fork>).\n\nIt also is quite fast (see this\nL<benchmark|http://libev.schmorp.de/bench.html> comparing it to libevent\nfor example).\n\n=head2 CONVENTIONS\n\nLibev is very configurable. In this manual the default (and most common)\nconfiguration will be described, which supports multiple event loops. For\nmore info about various configuration options please have a look at\nB<EMBED> section in this manual. If libev was configured without support\nfor multiple event loops, then all functions taking an initial argument of\nname C<loop> (which is always of type C<struct ev_loop *>) will not have\nthis argument.\n\n=head2 TIME REPRESENTATION\n\nLibev represents time as a single floating point number, representing\nthe (fractional) number of seconds since the (POSIX) epoch (in practice\nsomewhere near the beginning of 1970, details are complicated, don't\nask). This type is called C<ev_tstamp>, which is what you should use\ntoo. It usually aliases to the C<double> type in C. When you need to do\nany calculations on it, you should treat it as some floating point value.\n\nUnlike the name component C<stamp> might indicate, it is also used for\ntime differences (e.g. delays) throughout libev.\n\n=head1 ERROR HANDLING\n\nLibev knows three classes of errors: operating system errors, usage errors\nand internal errors (bugs).\n\nWhen libev catches an operating system error it cannot handle (for example\na system call indicating a condition libev cannot fix), it calls the callback\nset via C<ev_set_syserr_cb>, which is supposed to fix the problem or\nabort. The default is to print a diagnostic message and to call C<abort\n()>.\n\nWhen libev detects a usage error such as a negative timer interval, then\nit will print a diagnostic message and abort (via the C<assert> mechanism,\nso C<NDEBUG> will disable this checking): these are programming errors in\nthe libev caller and need to be fixed there.\n\nLibev also has a few internal error-checking C<assert>ions, and also has\nextensive consistency checking code. These do not trigger under normal\ncircumstances, as they indicate either a bug in libev or worse.\n\n\n=head1 GLOBAL FUNCTIONS\n\nThese functions can be called anytime, even before initialising the\nlibrary in any way.\n\n=over 4\n\n=item ev_tstamp ev_time ()\n\nReturns the current time as libev would use it. Please note that the\nC<ev_now> function is usually faster and also often returns the timestamp\nyou actually want to know. Also interesting is the combination of\nC<ev_now_update> and C<ev_now>.\n\n=item ev_sleep (ev_tstamp interval)\n\nSleep for the given interval: The current thread will be blocked\nuntil either it is interrupted or the given time interval has\npassed (approximately - it might return a bit earlier even if not\ninterrupted). Returns immediately if C<< interval <= 0 >>.\n\nBasically this is a sub-second-resolution C<sleep ()>.\n\nThe range of the C<interval> is limited - libev only guarantees to work\nwith sleep times of up to one day (C<< interval <= 86400 >>).\n\n=item int ev_version_major ()\n\n=item int ev_version_minor ()\n\nYou can find out the major and minor ABI version numbers of the library\nyou linked against by calling the functions C<ev_version_major> and\nC<ev_version_minor>. If you want, you can compare against the global\nsymbols C<EV_VERSION_MAJOR> and C<EV_VERSION_MINOR>, which specify the\nversion of the library your program was compiled against.\n\nThese version numbers refer to the ABI version of the library, not the\nrelease version.\n\nUsually, it's a good idea to terminate if the major versions mismatch,\nas this indicates an incompatible change. Minor versions are usually\ncompatible to older versions, so a larger minor version alone is usually\nnot a problem.\n\nExample: Make sure we haven't accidentally been linked against the wrong\nversion (note, however, that this will not detect other ABI mismatches,\nsuch as LFS or reentrancy).\n\n   assert ((\"libev version mismatch\",\n            ev_version_major () == EV_VERSION_MAJOR\n            && ev_version_minor () >= EV_VERSION_MINOR));\n\n=item unsigned int ev_supported_backends ()\n\nReturn the set of all backends (i.e. their corresponding C<EV_BACKEND_*>\nvalue) compiled into this binary of libev (independent of their\navailability on the system you are running on). See C<ev_default_loop> for\na description of the set values.\n\nExample: make sure we have the epoll method, because yeah this is cool and\na must have and can we have a torrent of it please!!!11\n\n   assert ((\"sorry, no epoll, no sex\",\n            ev_supported_backends () & EVBACKEND_EPOLL));\n\n=item unsigned int ev_recommended_backends ()\n\nReturn the set of all backends compiled into this binary of libev and\nalso recommended for this platform, meaning it will work for most file\ndescriptor types. This set is often smaller than the one returned by\nC<ev_supported_backends>, as for example kqueue is broken on most BSDs\nand will not be auto-detected unless you explicitly request it (assuming\nyou know what you are doing). This is the set of backends that libev will\nprobe for if you specify no backends explicitly.\n\n=item unsigned int ev_embeddable_backends ()\n\nReturns the set of backends that are embeddable in other event loops. This\nvalue is platform-specific but can include backends not available on the\ncurrent system. To find which embeddable backends might be supported on\nthe current system, you would need to look at C<ev_embeddable_backends ()\n& ev_supported_backends ()>, likewise for recommended ones.\n\nSee the description of C<ev_embed> watchers for more info.\n\n=item ev_set_allocator (void *(*cb)(void *ptr, long size) throw ())\n\nSets the allocation function to use (the prototype is similar - the\nsemantics are identical to the C<realloc> C89/SuS/POSIX function). It is\nused to allocate and free memory (no surprises here). If it returns zero\nwhen memory needs to be allocated (C<size != 0>), the library might abort\nor take some potentially destructive action.\n\nSince some systems (at least OpenBSD and Darwin) fail to implement\ncorrect C<realloc> semantics, libev will use a wrapper around the system\nC<realloc> and C<free> functions by default.\n\nYou could override this function in high-availability programs to, say,\nfree some memory if it cannot allocate memory, to use a special allocator,\nor even to sleep a while and retry until some memory is available.\n\nExample: Replace the libev allocator with one that waits a bit and then\nretries (example requires a standards-compliant C<realloc>).\n\n   static void *\n   persistent_realloc (void *ptr, size_t size)\n   {\n     for (;;)\n       {\n         void *newptr = realloc (ptr, size);\n\n         if (newptr)\n           return newptr;\n\n         sleep (60);\n       }\n   }\n\n   ...\n   ev_set_allocator (persistent_realloc);\n\n=item ev_set_syserr_cb (void (*cb)(const char *msg) throw ())\n\nSet the callback function to call on a retryable system call error (such\nas failed select, poll, epoll_wait). The message is a printable string\nindicating the system call or subsystem causing the problem. If this\ncallback is set, then libev will expect it to remedy the situation, no\nmatter what, when it returns. That is, libev will generally retry the\nrequested operation, or, if the condition doesn't go away, do bad stuff\n(such as abort).\n\nExample: This is basically the same thing that libev does internally, too.\n\n   static void\n   fatal_error (const char *msg)\n   {\n     perror (msg);\n     abort ();\n   }\n\n   ...\n   ev_set_syserr_cb (fatal_error);\n\n=item ev_feed_signal (int signum)\n\nThis function can be used to \"simulate\" a signal receive. It is completely\nsafe to call this function at any time, from any context, including signal\nhandlers or random threads.\n\nIts main use is to customise signal handling in your process, especially\nin the presence of threads. For example, you could block signals\nby default in all threads (and specifying C<EVFLAG_NOSIGMASK> when\ncreating any loops), and in one thread, use C<sigwait> or any other\nmechanism to wait for signals, then \"deliver\" them to libev by calling\nC<ev_feed_signal>.\n\n=back\n\n=head1 FUNCTIONS CONTROLLING EVENT LOOPS\n\nAn event loop is described by a C<struct ev_loop *> (the C<struct> is\nI<not> optional in this case unless libev 3 compatibility is disabled, as\nlibev 3 had an C<ev_loop> function colliding with the struct name).\n\nThe library knows two types of such loops, the I<default> loop, which\nsupports child process events, and dynamically created event loops which\ndo not.\n\n=over 4\n\n=item struct ev_loop *ev_default_loop (unsigned int flags)\n\nThis returns the \"default\" event loop object, which is what you should\nnormally use when you just need \"the event loop\". Event loop objects and\nthe C<flags> parameter are described in more detail in the entry for\nC<ev_loop_new>.\n\nIf the default loop is already initialised then this function simply\nreturns it (and ignores the flags. If that is troubling you, check\nC<ev_backend ()> afterwards). Otherwise it will create it with the given\nflags, which should almost always be C<0>, unless the caller is also the\none calling C<ev_run> or otherwise qualifies as \"the main program\".\n\nIf you don't know what event loop to use, use the one returned from this\nfunction (or via the C<EV_DEFAULT> macro).\n\nNote that this function is I<not> thread-safe, so if you want to use it\nfrom multiple threads, you have to employ some kind of mutex (note also\nthat this case is unlikely, as loops cannot be shared easily between\nthreads anyway).\n\nThe default loop is the only loop that can handle C<ev_child> watchers,\nand to do this, it always registers a handler for C<SIGCHLD>. If this is\na problem for your application you can either create a dynamic loop with\nC<ev_loop_new> which doesn't do that, or you can simply overwrite the\nC<SIGCHLD> signal handler I<after> calling C<ev_default_init>.\n\nExample: This is the most typical usage.\n\n   if (!ev_default_loop (0))\n     fatal (\"could not initialise libev, bad $LIBEV_FLAGS in environment?\");\n\nExample: Restrict libev to the select and poll backends, and do not allow\nenvironment settings to be taken into account:\n\n   ev_default_loop (EVBACKEND_POLL | EVBACKEND_SELECT | EVFLAG_NOENV);\n\n=item struct ev_loop *ev_loop_new (unsigned int flags)\n\nThis will create and initialise a new event loop object. If the loop\ncould not be initialised, returns false.\n\nThis function is thread-safe, and one common way to use libev with\nthreads is indeed to create one loop per thread, and using the default\nloop in the \"main\" or \"initial\" thread.\n\nThe flags argument can be used to specify special behaviour or specific\nbackends to use, and is usually specified as C<0> (or C<EVFLAG_AUTO>).\n\nThe following flags are supported:\n\n=over 4\n\n=item C<EVFLAG_AUTO>\n\nThe default flags value. Use this if you have no clue (it's the right\nthing, believe me).\n\n=item C<EVFLAG_NOENV>\n\nIf this flag bit is or'ed into the flag value (or the program runs setuid\nor setgid) then libev will I<not> look at the environment variable\nC<LIBEV_FLAGS>. Otherwise (the default), this environment variable will\noverride the flags completely if it is found in the environment. This is\nuseful to try out specific backends to test their performance, to work\naround bugs, or to make libev threadsafe (accessing environment variables\ncannot be done in a threadsafe way, but usually it works if no other\nthread modifies them).\n\n=item C<EVFLAG_FORKCHECK>\n\nInstead of calling C<ev_loop_fork> manually after a fork, you can also\nmake libev check for a fork in each iteration by enabling this flag.\n\nThis works by calling C<getpid ()> on every iteration of the loop,\nand thus this might slow down your event loop if you do a lot of loop\niterations and little real work, but is usually not noticeable (on my\nGNU/Linux system for example, C<getpid> is actually a simple 5-insn sequence\nwithout a system call and thus I<very> fast, but my GNU/Linux system also has\nC<pthread_atfork> which is even faster).\n\nThe big advantage of this flag is that you can forget about fork (and\nforget about forgetting to tell libev about forking, although you still\nhave to ignore C<SIGPIPE>) when you use this flag.\n\nThis flag setting cannot be overridden or specified in the C<LIBEV_FLAGS>\nenvironment variable.\n\n=item C<EVFLAG_NOINOTIFY>\n\nWhen this flag is specified, then libev will not attempt to use the\nI<inotify> API for its C<ev_stat> watchers. Apart from debugging and\ntesting, this flag can be useful to conserve inotify file descriptors, as\notherwise each loop using C<ev_stat> watchers consumes one inotify handle.\n\n=item C<EVFLAG_SIGNALFD>\n\nWhen this flag is specified, then libev will attempt to use the\nI<signalfd> API for its C<ev_signal> (and C<ev_child>) watchers. This API\ndelivers signals synchronously, which makes it both faster and might make\nit possible to get the queued signal data. It can also simplify signal\nhandling with threads, as long as you properly block signals in your\nthreads that are not interested in handling them.\n\nSignalfd will not be used by default as this changes your signal mask, and\nthere are a lot of shoddy libraries and programs (glib's threadpool for\nexample) that can't properly initialise their signal masks.\n\n=item C<EVFLAG_NOSIGMASK>\n\nWhen this flag is specified, then libev will avoid to modify the signal\nmask. Specifically, this means you have to make sure signals are unblocked\nwhen you want to receive them.\n\nThis behaviour is useful when you want to do your own signal handling, or\nwant to handle signals only in specific threads and want to avoid libev\nunblocking the signals.\n\nIt's also required by POSIX in a threaded program, as libev calls\nC<sigprocmask>, whose behaviour is officially unspecified.\n\nThis flag's behaviour will become the default in future versions of libev.\n\n=item C<EVBACKEND_SELECT>  (value 1, portable select backend)\n\nThis is your standard select(2) backend. Not I<completely> standard, as\nlibev tries to roll its own fd_set with no limits on the number of fds,\nbut if that fails, expect a fairly low limit on the number of fds when\nusing this backend. It doesn't scale too well (O(highest_fd)), but its\nusually the fastest backend for a low number of (low-numbered :) fds.\n\nTo get good performance out of this backend you need a high amount of\nparallelism (most of the file descriptors should be busy). If you are\nwriting a server, you should C<accept ()> in a loop to accept as many\nconnections as possible during one iteration. You might also want to have\na look at C<ev_set_io_collect_interval ()> to increase the amount of\nreadiness notifications you get per iteration.\n\nThis backend maps C<EV_READ> to the C<readfds> set and C<EV_WRITE> to the\nC<writefds> set (and to work around Microsoft Windows bugs, also onto the\nC<exceptfds> set on that platform).\n\n=item C<EVBACKEND_POLL>    (value 2, poll backend, available everywhere except on windows)\n\nAnd this is your standard poll(2) backend. It's more complicated\nthan select, but handles sparse fds better and has no artificial\nlimit on the number of fds you can use (except it will slow down\nconsiderably with a lot of inactive fds). It scales similarly to select,\ni.e. O(total_fds). See the entry for C<EVBACKEND_SELECT>, above, for\nperformance tips.\n\nThis backend maps C<EV_READ> to C<POLLIN | POLLERR | POLLHUP>, and\nC<EV_WRITE> to C<POLLOUT | POLLERR | POLLHUP>.\n\n=item C<EVBACKEND_EPOLL>   (value 4, Linux)\n\nUse the linux-specific epoll(7) interface (for both pre- and post-2.6.9\nkernels).\n\nFor few fds, this backend is a bit little slower than poll and select, but\nit scales phenomenally better. While poll and select usually scale like\nO(total_fds) where total_fds is the total number of fds (or the highest\nfd), epoll scales either O(1) or O(active_fds).\n\nThe epoll mechanism deserves honorable mention as the most misdesigned\nof the more advanced event mechanisms: mere annoyances include silently\ndropping file descriptors, requiring a system call per change per file\ndescriptor (and unnecessary guessing of parameters), problems with dup,\nreturning before the timeout value, resulting in additional iterations\n(and only giving 5ms accuracy while select on the same platform gives\n0.1ms) and so on. The biggest issue is fork races, however - if a program\nforks then I<both> parent and child process have to recreate the epoll\nset, which can take considerable time (one syscall per file descriptor)\nand is of course hard to detect.\n\nEpoll is also notoriously buggy - embedding epoll fds I<should> work,\nbut of course I<doesn't>, and epoll just loves to report events for\ntotally I<different> file descriptors (even already closed ones, so\none cannot even remove them from the set) than registered in the set\n(especially on SMP systems). Libev tries to counter these spurious\nnotifications by employing an additional generation counter and comparing\nthat against the events to filter out spurious ones, recreating the set\nwhen required. Epoll also erroneously rounds down timeouts, but gives you\nno way to know when and by how much, so sometimes you have to busy-wait\nbecause epoll returns immediately despite a nonzero timeout. And last\nnot least, it also refuses to work with some file descriptors which work\nperfectly fine with C<select> (files, many character devices...).\n\nEpoll is truly the train wreck among event poll mechanisms, a frankenpoll,\ncobbled together in a hurry, no thought to design or interaction with\nothers. Oh, the pain, will it ever stop...\n\nWhile stopping, setting and starting an I/O watcher in the same iteration\nwill result in some caching, there is still a system call per such\nincident (because the same I<file descriptor> could point to a different\nI<file description> now), so its best to avoid that. Also, C<dup ()>'ed\nfile descriptors might not work very well if you register events for both\nfile descriptors.\n\nBest performance from this backend is achieved by not unregistering all\nwatchers for a file descriptor until it has been closed, if possible,\ni.e. keep at least one watcher active per fd at all times. Stopping and\nstarting a watcher (without re-setting it) also usually doesn't cause\nextra overhead. A fork can both result in spurious notifications as well\nas in libev having to destroy and recreate the epoll object, which can\ntake considerable time and thus should be avoided.\n\nAll this means that, in practice, C<EVBACKEND_SELECT> can be as fast or\nfaster than epoll for maybe up to a hundred file descriptors, depending on\nthe usage. So sad.\n\nWhile nominally embeddable in other event loops, this feature is broken in\nall kernel versions tested so far.\n\nThis backend maps C<EV_READ> and C<EV_WRITE> in the same way as\nC<EVBACKEND_POLL>.\n\n=item C<EVBACKEND_KQUEUE>  (value 8, most BSD clones)\n\nKqueue deserves special mention, as at the time of this writing, it\nwas broken on all BSDs except NetBSD (usually it doesn't work reliably\nwith anything but sockets and pipes, except on Darwin, where of course\nit's completely useless). Unlike epoll, however, whose brokenness\nis by design, these kqueue bugs can (and eventually will) be fixed\nwithout API changes to existing programs. For this reason it's not being\n\"auto-detected\" unless you explicitly specify it in the flags (i.e. using\nC<EVBACKEND_KQUEUE>) or libev was compiled on a known-to-be-good (-enough)\nsystem like NetBSD.\n\nYou still can embed kqueue into a normal poll or select backend and use it\nonly for sockets (after having made sure that sockets work with kqueue on\nthe target platform). See C<ev_embed> watchers for more info.\n\nIt scales in the same way as the epoll backend, but the interface to the\nkernel is more efficient (which says nothing about its actual speed, of\ncourse). While stopping, setting and starting an I/O watcher does never\ncause an extra system call as with C<EVBACKEND_EPOLL>, it still adds up to\ntwo event changes per incident. Support for C<fork ()> is very bad (you\nmight have to leak fd's on fork, but it's more sane than epoll) and it\ndrops fds silently in similarly hard-to-detect cases.\n\nThis backend usually performs well under most conditions.\n\nWhile nominally embeddable in other event loops, this doesn't work\neverywhere, so you might need to test for this. And since it is broken\nalmost everywhere, you should only use it when you have a lot of sockets\n(for which it usually works), by embedding it into another event loop\n(e.g. C<EVBACKEND_SELECT> or C<EVBACKEND_POLL> (but C<poll> is of course\nalso broken on OS X)) and, did I mention it, using it only for sockets.\n\nThis backend maps C<EV_READ> into an C<EVFILT_READ> kevent with\nC<NOTE_EOF>, and C<EV_WRITE> into an C<EVFILT_WRITE> kevent with\nC<NOTE_EOF>.\n\n=item C<EVBACKEND_DEVPOLL> (value 16, Solaris 8)\n\nThis is not implemented yet (and might never be, unless you send me an\nimplementation). According to reports, C</dev/poll> only supports sockets\nand is not embeddable, which would limit the usefulness of this backend\nimmensely.\n\n=item C<EVBACKEND_PORT>    (value 32, Solaris 10)\n\nThis uses the Solaris 10 event port mechanism. As with everything on Solaris,\nit's really slow, but it still scales very well (O(active_fds)).\n\nWhile this backend scales well, it requires one system call per active\nfile descriptor per loop iteration. For small and medium numbers of file\ndescriptors a \"slow\" C<EVBACKEND_SELECT> or C<EVBACKEND_POLL> backend\nmight perform better.\n\nOn the positive side, this backend actually performed fully to\nspecification in all tests and is fully embeddable, which is a rare feat\namong the OS-specific backends (I vastly prefer correctness over speed\nhacks).\n\nOn the negative side, the interface is I<bizarre> - so bizarre that\neven sun itself gets it wrong in their code examples: The event polling\nfunction sometimes returns events to the caller even though an error\noccurred, but with no indication whether it has done so or not (yes, it's\neven documented that way) - deadly for edge-triggered interfaces where you\nabsolutely have to know whether an event occurred or not because you have\nto re-arm the watcher.\n\nFortunately libev seems to be able to work around these idiocies.\n\nThis backend maps C<EV_READ> and C<EV_WRITE> in the same way as\nC<EVBACKEND_POLL>.\n\n=item C<EVBACKEND_ALL>\n\nTry all backends (even potentially broken ones that wouldn't be tried\nwith C<EVFLAG_AUTO>). Since this is a mask, you can do stuff such as\nC<EVBACKEND_ALL & ~EVBACKEND_KQUEUE>.\n\nIt is definitely not recommended to use this flag, use whatever\nC<ev_recommended_backends ()> returns, or simply do not specify a backend\nat all.\n\n=item C<EVBACKEND_MASK>\n\nNot a backend at all, but a mask to select all backend bits from a\nC<flags> value, in case you want to mask out any backends from a flags\nvalue (e.g. when modifying the C<LIBEV_FLAGS> environment variable).\n\n=back\n\nIf one or more of the backend flags are or'ed into the flags value,\nthen only these backends will be tried (in the reverse order as listed\nhere). If none are specified, all backends in C<ev_recommended_backends\n()> will be tried.\n\nExample: Try to create a event loop that uses epoll and nothing else.\n\n   struct ev_loop *epoller = ev_loop_new (EVBACKEND_EPOLL | EVFLAG_NOENV);\n   if (!epoller)\n     fatal (\"no epoll found here, maybe it hides under your chair\");\n\nExample: Use whatever libev has to offer, but make sure that kqueue is\nused if available.\n\n   struct ev_loop *loop = ev_loop_new (ev_recommended_backends () | EVBACKEND_KQUEUE);\n\n=item ev_loop_destroy (loop)\n\nDestroys an event loop object (frees all memory and kernel state\netc.). None of the active event watchers will be stopped in the normal\nsense, so e.g. C<ev_is_active> might still return true. It is your\nresponsibility to either stop all watchers cleanly yourself I<before>\ncalling this function, or cope with the fact afterwards (which is usually\nthe easiest thing, you can just ignore the watchers and/or C<free ()> them\nfor example).\n\nNote that certain global state, such as signal state (and installed signal\nhandlers), will not be freed by this function, and related watchers (such\nas signal and child watchers) would need to be stopped manually.\n\nThis function is normally used on loop objects allocated by\nC<ev_loop_new>, but it can also be used on the default loop returned by\nC<ev_default_loop>, in which case it is not thread-safe.\n\nNote that it is not advisable to call this function on the default loop\nexcept in the rare occasion where you really need to free its resources.\nIf you need dynamically allocated loops it is better to use C<ev_loop_new>\nand C<ev_loop_destroy>.\n\n=item ev_loop_fork (loop)\n\nThis function sets a flag that causes subsequent C<ev_run> iterations\nto reinitialise the kernel state for backends that have one. Despite\nthe name, you can call it anytime you are allowed to start or stop\nwatchers (except inside an C<ev_prepare> callback), but it makes most\nsense after forking, in the child process. You I<must> call it (or use\nC<EVFLAG_FORKCHECK>) in the child before resuming or calling C<ev_run>.\n\nIn addition, if you want to reuse a loop (via this function or\nC<EVFLAG_FORKCHECK>), you I<also> have to ignore C<SIGPIPE>.\n\nAgain, you I<have> to call it on I<any> loop that you want to re-use after\na fork, I<even if you do not plan to use the loop in the parent>. This is\nbecause some kernel interfaces *cough* I<kqueue> *cough* do funny things\nduring fork.\n\nOn the other hand, you only need to call this function in the child\nprocess if and only if you want to use the event loop in the child. If\nyou just fork+exec or create a new loop in the child, you don't have to\ncall it at all (in fact, C<epoll> is so badly broken that it makes a\ndifference, but libev will usually detect this case on its own and do a\ncostly reset of the backend).\n\nThe function itself is quite fast and it's usually not a problem to call\nit just in case after a fork.\n\nExample: Automate calling C<ev_loop_fork> on the default loop when\nusing pthreads.\n\n   static void\n   post_fork_child (void)\n   {\n     ev_loop_fork (EV_DEFAULT);\n   }\n\n   ...\n   pthread_atfork (0, 0, post_fork_child);\n\n=item int ev_is_default_loop (loop)\n\nReturns true when the given loop is, in fact, the default loop, and false\notherwise.\n\n=item unsigned int ev_iteration (loop)\n\nReturns the current iteration count for the event loop, which is identical\nto the number of times libev did poll for new events. It starts at C<0>\nand happily wraps around with enough iterations.\n\nThis value can sometimes be useful as a generation counter of sorts (it\n\"ticks\" the number of loop iterations), as it roughly corresponds with\nC<ev_prepare> and C<ev_check> calls - and is incremented between the\nprepare and check phases.\n\n=item unsigned int ev_depth (loop)\n\nReturns the number of times C<ev_run> was entered minus the number of\ntimes C<ev_run> was exited normally, in other words, the recursion depth.\n\nOutside C<ev_run>, this number is zero. In a callback, this number is\nC<1>, unless C<ev_run> was invoked recursively (or from another thread),\nin which case it is higher.\n\nLeaving C<ev_run> abnormally (setjmp/longjmp, cancelling the thread,\nthrowing an exception etc.), doesn't count as \"exit\" - consider this\nas a hint to avoid such ungentleman-like behaviour unless it's really\nconvenient, in which case it is fully supported.\n\n=item unsigned int ev_backend (loop)\n\nReturns one of the C<EVBACKEND_*> flags indicating the event backend in\nuse.\n\n=item ev_tstamp ev_now (loop)\n\nReturns the current \"event loop time\", which is the time the event loop\nreceived events and started processing them. This timestamp does not\nchange as long as callbacks are being processed, and this is also the base\ntime used for relative timers. You can treat it as the timestamp of the\nevent occurring (or more correctly, libev finding out about it).\n\n=item ev_now_update (loop)\n\nEstablishes the current time by querying the kernel, updating the time\nreturned by C<ev_now ()> in the progress. This is a costly operation and\nis usually done automatically within C<ev_run ()>.\n\nThis function is rarely useful, but when some event callback runs for a\nvery long time without entering the event loop, updating libev's idea of\nthe current time is a good idea.\n\nSee also L</The special problem of time updates> in the C<ev_timer> section.\n\n=item ev_suspend (loop)\n\n=item ev_resume (loop)\n\nThese two functions suspend and resume an event loop, for use when the\nloop is not used for a while and timeouts should not be processed.\n\nA typical use case would be an interactive program such as a game:  When\nthe user presses C<^Z> to suspend the game and resumes it an hour later it\nwould be best to handle timeouts as if no time had actually passed while\nthe program was suspended. This can be achieved by calling C<ev_suspend>\nin your C<SIGTSTP> handler, sending yourself a C<SIGSTOP> and calling\nC<ev_resume> directly afterwards to resume timer processing.\n\nEffectively, all C<ev_timer> watchers will be delayed by the time spend\nbetween C<ev_suspend> and C<ev_resume>, and all C<ev_periodic> watchers\nwill be rescheduled (that is, they will lose any events that would have\noccurred while suspended).\n\nAfter calling C<ev_suspend> you B<must not> call I<any> function on the\ngiven loop other than C<ev_resume>, and you B<must not> call C<ev_resume>\nwithout a previous call to C<ev_suspend>.\n\nCalling C<ev_suspend>/C<ev_resume> has the side effect of updating the\nevent loop time (see C<ev_now_update>).\n\n=item bool ev_run (loop, int flags)\n\nFinally, this is it, the event handler. This function usually is called\nafter you have initialised all your watchers and you want to start\nhandling events. It will ask the operating system for any new events, call\nthe watcher callbacks, and then repeat the whole process indefinitely: This\nis why event loops are called I<loops>.\n\nIf the flags argument is specified as C<0>, it will keep handling events\nuntil either no event watchers are active anymore or C<ev_break> was\ncalled.\n\nThe return value is false if there are no more active watchers (which\nusually means \"all jobs done\" or \"deadlock\"), and true in all other cases\n(which usually means \" you should call C<ev_run> again\").\n\nPlease note that an explicit C<ev_break> is usually better than\nrelying on all watchers to be stopped when deciding when a program has\nfinished (especially in interactive programs), but having a program\nthat automatically loops as long as it has to and no longer by virtue\nof relying on its watchers stopping correctly, that is truly a thing of\nbeauty.\n\nThis function is I<mostly> exception-safe - you can break out of a\nC<ev_run> call by calling C<longjmp> in a callback, throwing a C++\nexception and so on. This does not decrement the C<ev_depth> value, nor\nwill it clear any outstanding C<EVBREAK_ONE> breaks.\n\nA flags value of C<EVRUN_NOWAIT> will look for new events, will handle\nthose events and any already outstanding ones, but will not wait and\nblock your process in case there are no events and will return after one\niteration of the loop. This is sometimes useful to poll and handle new\nevents while doing lengthy calculations, to keep the program responsive.\n\nA flags value of C<EVRUN_ONCE> will look for new events (waiting if\nnecessary) and will handle those and any already outstanding ones. It\nwill block your process until at least one new event arrives (which could\nbe an event internal to libev itself, so there is no guarantee that a\nuser-registered callback will be called), and will return after one\niteration of the loop.\n\nThis is useful if you are waiting for some external event in conjunction\nwith something not expressible using other libev watchers (i.e. \"roll your\nown C<ev_run>\"). However, a pair of C<ev_prepare>/C<ev_check> watchers is\nusually a better approach for this kind of thing.\n\nHere are the gory details of what C<ev_run> does (this is for your\nunderstanding, not a guarantee that things will work exactly like this in\nfuture versions):\n\n   - Increment loop depth.\n   - Reset the ev_break status.\n   - Before the first iteration, call any pending watchers.\n   LOOP:\n   - If EVFLAG_FORKCHECK was used, check for a fork.\n   - If a fork was detected (by any means), queue and call all fork watchers.\n   - Queue and call all prepare watchers.\n   - If ev_break was called, goto FINISH.\n   - If we have been forked, detach and recreate the kernel state\n     as to not disturb the other process.\n   - Update the kernel state with all outstanding changes.\n   - Update the \"event loop time\" (ev_now ()).\n   - Calculate for how long to sleep or block, if at all\n     (active idle watchers, EVRUN_NOWAIT or not having\n     any active watchers at all will result in not sleeping).\n   - Sleep if the I/O and timer collect interval say so.\n   - Increment loop iteration counter.\n   - Block the process, waiting for any events.\n   - Queue all outstanding I/O (fd) events.\n   - Update the \"event loop time\" (ev_now ()), and do time jump adjustments.\n   - Queue all expired timers.\n   - Queue all expired periodics.\n   - Queue all idle watchers with priority higher than that of pending events.\n   - Queue all check watchers.\n   - Call all queued watchers in reverse order (i.e. check watchers first).\n     Signals and child watchers are implemented as I/O watchers, and will\n     be handled here by queueing them when their watcher gets executed.\n   - If ev_break has been called, or EVRUN_ONCE or EVRUN_NOWAIT\n     were used, or there are no active watchers, goto FINISH, otherwise\n     continue with step LOOP.\n   FINISH:\n   - Reset the ev_break status iff it was EVBREAK_ONE.\n   - Decrement the loop depth.\n   - Return.\n\nExample: Queue some jobs and then loop until no events are outstanding\nanymore.\n\n   ... queue jobs here, make sure they register event watchers as long\n   ... as they still have work to do (even an idle watcher will do..)\n   ev_run (my_loop, 0);\n   ... jobs done or somebody called break. yeah!\n\n=item ev_break (loop, how)\n\nCan be used to make a call to C<ev_run> return early (but only after it\nhas processed all outstanding events). The C<how> argument must be either\nC<EVBREAK_ONE>, which will make the innermost C<ev_run> call return, or\nC<EVBREAK_ALL>, which will make all nested C<ev_run> calls return.\n\nThis \"break state\" will be cleared on the next call to C<ev_run>.\n\nIt is safe to call C<ev_break> from outside any C<ev_run> calls, too, in\nwhich case it will have no effect.\n\n=item ev_ref (loop)\n\n=item ev_unref (loop)\n\nRef/unref can be used to add or remove a reference count on the event\nloop: Every watcher keeps one reference, and as long as the reference\ncount is nonzero, C<ev_run> will not return on its own.\n\nThis is useful when you have a watcher that you never intend to\nunregister, but that nevertheless should not keep C<ev_run> from\nreturning. In such a case, call C<ev_unref> after starting, and C<ev_ref>\nbefore stopping it.\n\nAs an example, libev itself uses this for its internal signal pipe: It\nis not visible to the libev user and should not keep C<ev_run> from\nexiting if no event watchers registered by it are active. It is also an\nexcellent way to do this for generic recurring timers or from within\nthird-party libraries. Just remember to I<unref after start> and I<ref\nbefore stop> (but only if the watcher wasn't active before, or was active\nbefore, respectively. Note also that libev might stop watchers itself\n(e.g. non-repeating timers) in which case you have to C<ev_ref>\nin the callback).\n\nExample: Create a signal watcher, but keep it from keeping C<ev_run>\nrunning when nothing else is active.\n\n   ev_signal exitsig;\n   ev_signal_init (&exitsig, sig_cb, SIGINT);\n   ev_signal_start (loop, &exitsig);\n   ev_unref (loop);\n\nExample: For some weird reason, unregister the above signal handler again.\n\n   ev_ref (loop);\n   ev_signal_stop (loop, &exitsig);\n\n=item ev_set_io_collect_interval (loop, ev_tstamp interval)\n\n=item ev_set_timeout_collect_interval (loop, ev_tstamp interval)\n\nThese advanced functions influence the time that libev will spend waiting\nfor events. Both time intervals are by default C<0>, meaning that libev\nwill try to invoke timer/periodic callbacks and I/O callbacks with minimum\nlatency.\n\nSetting these to a higher value (the C<interval> I<must> be >= C<0>)\nallows libev to delay invocation of I/O and timer/periodic callbacks\nto increase efficiency of loop iterations (or to increase power-saving\nopportunities).\n\nThe idea is that sometimes your program runs just fast enough to handle\none (or very few) event(s) per loop iteration. While this makes the\nprogram responsive, it also wastes a lot of CPU time to poll for new\nevents, especially with backends like C<select ()> which have a high\noverhead for the actual polling but can deliver many events at once.\n\nBy setting a higher I<io collect interval> you allow libev to spend more\ntime collecting I/O events, so you can handle more events per iteration,\nat the cost of increasing latency. Timeouts (both C<ev_periodic> and\nC<ev_timer>) will not be affected. Setting this to a non-null value will\nintroduce an additional C<ev_sleep ()> call into most loop iterations. The\nsleep time ensures that libev will not poll for I/O events more often then\nonce per this interval, on average (as long as the host time resolution is\ngood enough).\n\nLikewise, by setting a higher I<timeout collect interval> you allow libev\nto spend more time collecting timeouts, at the expense of increased\nlatency/jitter/inexactness (the watcher callback will be called\nlater). C<ev_io> watchers will not be affected. Setting this to a non-null\nvalue will not introduce any overhead in libev.\n\nMany (busy) programs can usually benefit by setting the I/O collect\ninterval to a value near C<0.1> or so, which is often enough for\ninteractive servers (of course not for games), likewise for timeouts. It\nusually doesn't make much sense to set it to a lower value than C<0.01>,\nas this approaches the timing granularity of most systems. Note that if\nyou do transactions with the outside world and you can't increase the\nparallelity, then this setting will limit your transaction rate (if you\nneed to poll once per transaction and the I/O collect interval is 0.01,\nthen you can't do more than 100 transactions per second).\n\nSetting the I<timeout collect interval> can improve the opportunity for\nsaving power, as the program will \"bundle\" timer callback invocations that\nare \"near\" in time together, by delaying some, thus reducing the number of\ntimes the process sleeps and wakes up again. Another useful technique to\nreduce iterations/wake-ups is to use C<ev_periodic> watchers and make sure\nthey fire on, say, one-second boundaries only.\n\nExample: we only need 0.1s timeout granularity, and we wish not to poll\nmore often than 100 times per second:\n\n   ev_set_timeout_collect_interval (EV_DEFAULT_UC_ 0.1);\n   ev_set_io_collect_interval (EV_DEFAULT_UC_ 0.01);\n\n=item ev_invoke_pending (loop)\n\nThis call will simply invoke all pending watchers while resetting their\npending state. Normally, C<ev_run> does this automatically when required,\nbut when overriding the invoke callback this call comes handy. This\nfunction can be invoked from a watcher - this can be useful for example\nwhen you want to do some lengthy calculation and want to pass further\nevent handling to another thread (you still have to make sure only one\nthread executes within C<ev_invoke_pending> or C<ev_run> of course).\n\n=item int ev_pending_count (loop)\n\nReturns the number of pending watchers - zero indicates that no watchers\nare pending.\n\n=item ev_set_invoke_pending_cb (loop, void (*invoke_pending_cb)(EV_P))\n\nThis overrides the invoke pending functionality of the loop: Instead of\ninvoking all pending watchers when there are any, C<ev_run> will call\nthis callback instead. This is useful, for example, when you want to\ninvoke the actual watchers inside another context (another thread etc.).\n\nIf you want to reset the callback, use C<ev_invoke_pending> as new\ncallback.\n\n=item ev_set_loop_release_cb (loop, void (*release)(EV_P) throw (), void (*acquire)(EV_P) throw ())\n\nSometimes you want to share the same loop between multiple threads. This\ncan be done relatively simply by putting mutex_lock/unlock calls around\neach call to a libev function.\n\nHowever, C<ev_run> can run an indefinite time, so it is not feasible\nto wait for it to return. One way around this is to wake up the event\nloop via C<ev_break> and C<ev_async_send>, another way is to set these\nI<release> and I<acquire> callbacks on the loop.\n\nWhen set, then C<release> will be called just before the thread is\nsuspended waiting for new events, and C<acquire> is called just\nafterwards.\n\nIdeally, C<release> will just call your mutex_unlock function, and\nC<acquire> will just call the mutex_lock function again.\n\nWhile event loop modifications are allowed between invocations of\nC<release> and C<acquire> (that's their only purpose after all), no\nmodifications done will affect the event loop, i.e. adding watchers will\nhave no effect on the set of file descriptors being watched, or the time\nwaited. Use an C<ev_async> watcher to wake up C<ev_run> when you want it\nto take note of any changes you made.\n\nIn theory, threads executing C<ev_run> will be async-cancel safe between\ninvocations of C<release> and C<acquire>.\n\nSee also the locking example in the C<THREADS> section later in this\ndocument.\n\n=item ev_set_userdata (loop, void *data)\n\n=item void *ev_userdata (loop)\n\nSet and retrieve a single C<void *> associated with a loop. When\nC<ev_set_userdata> has never been called, then C<ev_userdata> returns\nC<0>.\n\nThese two functions can be used to associate arbitrary data with a loop,\nand are intended solely for the C<invoke_pending_cb>, C<release> and\nC<acquire> callbacks described above, but of course can be (ab-)used for\nany other purpose as well.\n\n=item ev_verify (loop)\n\nThis function only does something when C<EV_VERIFY> support has been\ncompiled in, which is the default for non-minimal builds. It tries to go\nthrough all internal structures and checks them for validity. If anything\nis found to be inconsistent, it will print an error message to standard\nerror and call C<abort ()>.\n\nThis can be used to catch bugs inside libev itself: under normal\ncircumstances, this function will never abort as of course libev keeps its\ndata structures consistent.\n\n=back\n\n\n=head1 ANATOMY OF A WATCHER\n\nIn the following description, uppercase C<TYPE> in names stands for the\nwatcher type, e.g. C<ev_TYPE_start> can mean C<ev_timer_start> for timer\nwatchers and C<ev_io_start> for I/O watchers.\n\nA watcher is an opaque structure that you allocate and register to record\nyour interest in some event. To make a concrete example, imagine you want\nto wait for STDIN to become readable, you would create an C<ev_io> watcher\nfor that:\n\n   static void my_cb (struct ev_loop *loop, ev_io *w, int revents)\n   {\n     ev_io_stop (w);\n     ev_break (loop, EVBREAK_ALL);\n   }\n\n   struct ev_loop *loop = ev_default_loop (0);\n\n   ev_io stdin_watcher;\n\n   ev_init (&stdin_watcher, my_cb);\n   ev_io_set (&stdin_watcher, STDIN_FILENO, EV_READ);\n   ev_io_start (loop, &stdin_watcher);\n\n   ev_run (loop, 0);\n\nAs you can see, you are responsible for allocating the memory for your\nwatcher structures (and it is I<usually> a bad idea to do this on the\nstack).\n\nEach watcher has an associated watcher structure (called C<struct ev_TYPE>\nor simply C<ev_TYPE>, as typedefs are provided for all watcher structs).\n\nEach watcher structure must be initialised by a call to C<ev_init (watcher\n*, callback)>, which expects a callback to be provided. This callback is\ninvoked each time the event occurs (or, in the case of I/O watchers, each\ntime the event loop detects that the file descriptor given is readable\nand/or writable).\n\nEach watcher type further has its own C<< ev_TYPE_set (watcher *, ...) >>\nmacro to configure it, with arguments specific to the watcher type. There\nis also a macro to combine initialisation and setting in one call: C<<\nev_TYPE_init (watcher *, callback, ...) >>.\n\nTo make the watcher actually watch out for events, you have to start it\nwith a watcher-specific start function (C<< ev_TYPE_start (loop, watcher\n*) >>), and you can stop watching for events at any time by calling the\ncorresponding stop function (C<< ev_TYPE_stop (loop, watcher *) >>.\n\nAs long as your watcher is active (has been started but not stopped) you\nmust not touch the values stored in it. Most specifically you must never\nreinitialise it or call its C<ev_TYPE_set> macro.\n\nEach and every callback receives the event loop pointer as first, the\nregistered watcher structure as second, and a bitset of received events as\nthird argument.\n\nThe received events usually include a single bit per event type received\n(you can receive multiple events at the same time). The possible bit masks\nare:\n\n=over 4\n\n=item C<EV_READ>\n\n=item C<EV_WRITE>\n\nThe file descriptor in the C<ev_io> watcher has become readable and/or\nwritable.\n\n=item C<EV_TIMER>\n\nThe C<ev_timer> watcher has timed out.\n\n=item C<EV_PERIODIC>\n\nThe C<ev_periodic> watcher has timed out.\n\n=item C<EV_SIGNAL>\n\nThe signal specified in the C<ev_signal> watcher has been received by a thread.\n\n=item C<EV_CHILD>\n\nThe pid specified in the C<ev_child> watcher has received a status change.\n\n=item C<EV_STAT>\n\nThe path specified in the C<ev_stat> watcher changed its attributes somehow.\n\n=item C<EV_IDLE>\n\nThe C<ev_idle> watcher has determined that you have nothing better to do.\n\n=item C<EV_PREPARE>\n\n=item C<EV_CHECK>\n\nAll C<ev_prepare> watchers are invoked just I<before> C<ev_run> starts to\ngather new events, and all C<ev_check> watchers are queued (not invoked)\njust after C<ev_run> has gathered them, but before it queues any callbacks\nfor any received events. That means C<ev_prepare> watchers are the last\nwatchers invoked before the event loop sleeps or polls for new events, and\nC<ev_check> watchers will be invoked before any other watchers of the same\nor lower priority within an event loop iteration.\n\nCallbacks of both watcher types can start and stop as many watchers as\nthey want, and all of them will be taken into account (for example, a\nC<ev_prepare> watcher might start an idle watcher to keep C<ev_run> from\nblocking).\n\n=item C<EV_EMBED>\n\nThe embedded event loop specified in the C<ev_embed> watcher needs attention.\n\n=item C<EV_FORK>\n\nThe event loop has been resumed in the child process after fork (see\nC<ev_fork>).\n\n=item C<EV_CLEANUP>\n\nThe event loop is about to be destroyed (see C<ev_cleanup>).\n\n=item C<EV_ASYNC>\n\nThe given async watcher has been asynchronously notified (see C<ev_async>).\n\n=item C<EV_CUSTOM>\n\nNot ever sent (or otherwise used) by libev itself, but can be freely used\nby libev users to signal watchers (e.g. via C<ev_feed_event>).\n\n=item C<EV_ERROR>\n\nAn unspecified error has occurred, the watcher has been stopped. This might\nhappen because the watcher could not be properly started because libev\nran out of memory, a file descriptor was found to be closed or any other\nproblem. Libev considers these application bugs.\n\nYou best act on it by reporting the problem and somehow coping with the\nwatcher being stopped. Note that well-written programs should not receive\nan error ever, so when your watcher receives it, this usually indicates a\nbug in your program.\n\nLibev will usually signal a few \"dummy\" events together with an error, for\nexample it might indicate that a fd is readable or writable, and if your\ncallbacks is well-written it can just attempt the operation and cope with\nthe error from read() or write(). This will not work in multi-threaded\nprograms, though, as the fd could already be closed and reused for another\nthing, so beware.\n\n=back\n\n=head2 GENERIC WATCHER FUNCTIONS\n\n=over 4\n\n=item C<ev_init> (ev_TYPE *watcher, callback)\n\nThis macro initialises the generic portion of a watcher. The contents\nof the watcher object can be arbitrary (so C<malloc> will do). Only\nthe generic parts of the watcher are initialised, you I<need> to call\nthe type-specific C<ev_TYPE_set> macro afterwards to initialise the\ntype-specific parts. For each type there is also a C<ev_TYPE_init> macro\nwhich rolls both calls into one.\n\nYou can reinitialise a watcher at any time as long as it has been stopped\n(or never started) and there are no pending events outstanding.\n\nThe callback is always of type C<void (*)(struct ev_loop *loop, ev_TYPE *watcher,\nint revents)>.\n\nExample: Initialise an C<ev_io> watcher in two steps.\n\n   ev_io w;\n   ev_init (&w, my_cb);\n   ev_io_set (&w, STDIN_FILENO, EV_READ);\n\n=item C<ev_TYPE_set> (ev_TYPE *watcher, [args])\n\nThis macro initialises the type-specific parts of a watcher. You need to\ncall C<ev_init> at least once before you call this macro, but you can\ncall C<ev_TYPE_set> any number of times. You must not, however, call this\nmacro on a watcher that is active (it can be pending, however, which is a\ndifference to the C<ev_init> macro).\n\nAlthough some watcher types do not have type-specific arguments\n(e.g. C<ev_prepare>) you still need to call its C<set> macro.\n\nSee C<ev_init>, above, for an example.\n\n=item C<ev_TYPE_init> (ev_TYPE *watcher, callback, [args])\n\nThis convenience macro rolls both C<ev_init> and C<ev_TYPE_set> macro\ncalls into a single call. This is the most convenient method to initialise\na watcher. The same limitations apply, of course.\n\nExample: Initialise and set an C<ev_io> watcher in one step.\n\n   ev_io_init (&w, my_cb, STDIN_FILENO, EV_READ);\n\n=item C<ev_TYPE_start> (loop, ev_TYPE *watcher)\n\nStarts (activates) the given watcher. Only active watchers will receive\nevents. If the watcher is already active nothing will happen.\n\nExample: Start the C<ev_io> watcher that is being abused as example in this\nwhole section.\n\n   ev_io_start (EV_DEFAULT_UC, &w);\n\n=item C<ev_TYPE_stop> (loop, ev_TYPE *watcher)\n\nStops the given watcher if active, and clears the pending status (whether\nthe watcher was active or not).\n\nIt is possible that stopped watchers are pending - for example,\nnon-repeating timers are being stopped when they become pending - but\ncalling C<ev_TYPE_stop> ensures that the watcher is neither active nor\npending. If you want to free or reuse the memory used by the watcher it is\ntherefore a good idea to always call its C<ev_TYPE_stop> function.\n\n=item bool ev_is_active (ev_TYPE *watcher)\n\nReturns a true value iff the watcher is active (i.e. it has been started\nand not yet been stopped). As long as a watcher is active you must not modify\nit.\n\n=item bool ev_is_pending (ev_TYPE *watcher)\n\nReturns a true value iff the watcher is pending, (i.e. it has outstanding\nevents but its callback has not yet been invoked). As long as a watcher\nis pending (but not active) you must not call an init function on it (but\nC<ev_TYPE_set> is safe), you must not change its priority, and you must\nmake sure the watcher is available to libev (e.g. you cannot C<free ()>\nit).\n\n=item callback ev_cb (ev_TYPE *watcher)\n\nReturns the callback currently set on the watcher.\n\n=item ev_set_cb (ev_TYPE *watcher, callback)\n\nChange the callback. You can change the callback at virtually any time\n(modulo threads).\n\n=item ev_set_priority (ev_TYPE *watcher, int priority)\n\n=item int ev_priority (ev_TYPE *watcher)\n\nSet and query the priority of the watcher. The priority is a small\ninteger between C<EV_MAXPRI> (default: C<2>) and C<EV_MINPRI>\n(default: C<-2>). Pending watchers with higher priority will be invoked\nbefore watchers with lower priority, but priority will not keep watchers\nfrom being executed (except for C<ev_idle> watchers).\n\nIf you need to suppress invocation when higher priority events are pending\nyou need to look at C<ev_idle> watchers, which provide this functionality.\n\nYou I<must not> change the priority of a watcher as long as it is active or\npending.\n\nSetting a priority outside the range of C<EV_MINPRI> to C<EV_MAXPRI> is\nfine, as long as you do not mind that the priority value you query might\nor might not have been clamped to the valid range.\n\nThe default priority used by watchers when no priority has been set is\nalways C<0>, which is supposed to not be too high and not be too low :).\n\nSee L</WATCHER PRIORITY MODELS>, below, for a more thorough treatment of\npriorities.\n\n=item ev_invoke (loop, ev_TYPE *watcher, int revents)\n\nInvoke the C<watcher> with the given C<loop> and C<revents>. Neither\nC<loop> nor C<revents> need to be valid as long as the watcher callback\ncan deal with that fact, as both are simply passed through to the\ncallback.\n\n=item int ev_clear_pending (loop, ev_TYPE *watcher)\n\nIf the watcher is pending, this function clears its pending status and\nreturns its C<revents> bitset (as if its callback was invoked). If the\nwatcher isn't pending it does nothing and returns C<0>.\n\nSometimes it can be useful to \"poll\" a watcher instead of waiting for its\ncallback to be invoked, which can be accomplished with this function.\n\n=item ev_feed_event (loop, ev_TYPE *watcher, int revents)\n\nFeeds the given event set into the event loop, as if the specified event\nhad happened for the specified watcher (which must be a pointer to an\ninitialised but not necessarily started event watcher). Obviously you must\nnot free the watcher as long as it has pending events.\n\nStopping the watcher, letting libev invoke it, or calling\nC<ev_clear_pending> will clear the pending event, even if the watcher was\nnot started in the first place.\n\nSee also C<ev_feed_fd_event> and C<ev_feed_signal_event> for related\nfunctions that do not need a watcher.\n\n=back\n\nSee also the L</ASSOCIATING CUSTOM DATA WITH A WATCHER> and L</BUILDING YOUR\nOWN COMPOSITE WATCHERS> idioms.\n\n=head2 WATCHER STATES\n\nThere are various watcher states mentioned throughout this manual -\nactive, pending and so on. In this section these states and the rules to\ntransition between them will be described in more detail - and while these\nrules might look complicated, they usually do \"the right thing\".\n\n=over 4\n\n=item initialised\n\nBefore a watcher can be registered with the event loop it has to be\ninitialised. This can be done with a call to C<ev_TYPE_init>, or calls to\nC<ev_init> followed by the watcher-specific C<ev_TYPE_set> function.\n\nIn this state it is simply some block of memory that is suitable for\nuse in an event loop. It can be moved around, freed, reused etc. at\nwill - as long as you either keep the memory contents intact, or call\nC<ev_TYPE_init> again.\n\n=item started/running/active\n\nOnce a watcher has been started with a call to C<ev_TYPE_start> it becomes\nproperty of the event loop, and is actively waiting for events. While in\nthis state it cannot be accessed (except in a few documented ways), moved,\nfreed or anything else - the only legal thing is to keep a pointer to it,\nand call libev functions on it that are documented to work on active watchers.\n\n=item pending\n\nIf a watcher is active and libev determines that an event it is interested\nin has occurred (such as a timer expiring), it will become pending. It will\nstay in this pending state until either it is stopped or its callback is\nabout to be invoked, so it is not normally pending inside the watcher\ncallback.\n\nThe watcher might or might not be active while it is pending (for example,\nan expired non-repeating timer can be pending but no longer active). If it\nis stopped, it can be freely accessed (e.g. by calling C<ev_TYPE_set>),\nbut it is still property of the event loop at this time, so cannot be\nmoved, freed or reused. And if it is active the rules described in the\nprevious item still apply.\n\nIt is also possible to feed an event on a watcher that is not active (e.g.\nvia C<ev_feed_event>), in which case it becomes pending without being\nactive.\n\n=item stopped\n\nA watcher can be stopped implicitly by libev (in which case it might still\nbe pending), or explicitly by calling its C<ev_TYPE_stop> function. The\nlatter will clear any pending state the watcher might be in, regardless\nof whether it was active or not, so stopping a watcher explicitly before\nfreeing it is often a good idea.\n\nWhile stopped (and not pending) the watcher is essentially in the\ninitialised state, that is, it can be reused, moved, modified in any way\nyou wish (but when you trash the memory block, you need to C<ev_TYPE_init>\nit again).\n\n=back\n\n=head2 WATCHER PRIORITY MODELS\n\nMany event loops support I<watcher priorities>, which are usually small\nintegers that influence the ordering of event callback invocation\nbetween watchers in some way, all else being equal.\n\nIn libev, Watcher priorities can be set using C<ev_set_priority>. See its\ndescription for the more technical details such as the actual priority\nrange.\n\nThere are two common ways how these these priorities are being interpreted\nby event loops:\n\nIn the more common lock-out model, higher priorities \"lock out\" invocation\nof lower priority watchers, which means as long as higher priority\nwatchers receive events, lower priority watchers are not being invoked.\n\nThe less common only-for-ordering model uses priorities solely to order\ncallback invocation within a single event loop iteration: Higher priority\nwatchers are invoked before lower priority ones, but they all get invoked\nbefore polling for new events.\n\nLibev uses the second (only-for-ordering) model for all its watchers\nexcept for idle watchers (which use the lock-out model).\n\nThe rationale behind this is that implementing the lock-out model for\nwatchers is not well supported by most kernel interfaces, and most event\nlibraries will just poll for the same events again and again as long as\ntheir callbacks have not been executed, which is very inefficient in the\ncommon case of one high-priority watcher locking out a mass of lower\npriority ones.\n\nStatic (ordering) priorities are most useful when you have two or more\nwatchers handling the same resource: a typical usage example is having an\nC<ev_io> watcher to receive data, and an associated C<ev_timer> to handle\ntimeouts. Under load, data might be received while the program handles\nother jobs, but since timers normally get invoked first, the timeout\nhandler will be executed before checking for data. In that case, giving\nthe timer a lower priority than the I/O watcher ensures that I/O will be\nhandled first even under adverse conditions (which is usually, but not\nalways, what you want).\n\nSince idle watchers use the \"lock-out\" model, meaning that idle watchers\nwill only be executed when no same or higher priority watchers have\nreceived events, they can be used to implement the \"lock-out\" model when\nrequired.\n\nFor example, to emulate how many other event libraries handle priorities,\nyou can associate an C<ev_idle> watcher to each such watcher, and in\nthe normal watcher callback, you just start the idle watcher. The real\nprocessing is done in the idle watcher callback. This causes libev to\ncontinuously poll and process kernel event data for the watcher, but when\nthe lock-out case is known to be rare (which in turn is rare :), this is\nworkable.\n\nUsually, however, the lock-out model implemented that way will perform\nmiserably under the type of load it was designed to handle. In that case,\nit might be preferable to stop the real watcher before starting the\nidle watcher, so the kernel will not have to process the event in case\nthe actual processing will be delayed for considerable time.\n\nHere is an example of an I/O watcher that should run at a strictly lower\npriority than the default, and which should only process data when no\nother events are pending:\n\n   ev_idle idle; // actual processing watcher\n   ev_io io;     // actual event watcher\n\n   static void\n   io_cb (EV_P_ ev_io *w, int revents)\n   {\n     // stop the I/O watcher, we received the event, but\n     // are not yet ready to handle it.\n     ev_io_stop (EV_A_ w);\n\n     // start the idle watcher to handle the actual event.\n     // it will not be executed as long as other watchers\n     // with the default priority are receiving events.\n     ev_idle_start (EV_A_ &idle);\n   }\n\n   static void\n   idle_cb (EV_P_ ev_idle *w, int revents)\n   {\n     // actual processing\n     read (STDIN_FILENO, ...);\n\n     // have to start the I/O watcher again, as\n     // we have handled the event\n     ev_io_start (EV_P_ &io);\n   }\n\n   // initialisation\n   ev_idle_init (&idle, idle_cb);\n   ev_io_init (&io, io_cb, STDIN_FILENO, EV_READ);\n   ev_io_start (EV_DEFAULT_ &io);\n\nIn the \"real\" world, it might also be beneficial to start a timer, so that\nlow-priority connections can not be locked out forever under load. This\nenables your program to keep a lower latency for important connections\nduring short periods of high load, while not completely locking out less\nimportant ones.\n\n\n=head1 WATCHER TYPES\n\nThis section describes each watcher in detail, but will not repeat\ninformation given in the last section. Any initialisation/set macros,\nfunctions and members specific to the watcher type are explained.\n\nMembers are additionally marked with either I<[read-only]>, meaning that,\nwhile the watcher is active, you can look at the member and expect some\nsensible content, but you must not modify it (you can modify it while the\nwatcher is stopped to your hearts content), or I<[read-write]>, which\nmeans you can expect it to have some sensible content while the watcher\nis active, but you can also modify it. Modifying it may not do something\nsensible or take immediate effect (or do anything at all), but libev will\nnot crash or malfunction in any way.\n\n\n=head2 C<ev_io> - is this file descriptor readable or writable?\n\nI/O watchers check whether a file descriptor is readable or writable\nin each iteration of the event loop, or, more precisely, when reading\nwould not block the process and writing would at least be able to write\nsome data. This behaviour is called level-triggering because you keep\nreceiving events as long as the condition persists. Remember you can stop\nthe watcher if you don't want to act on the event and neither want to\nreceive future events.\n\nIn general you can register as many read and/or write event watchers per\nfd as you want (as long as you don't confuse yourself). Setting all file\ndescriptors to non-blocking mode is also usually a good idea (but not\nrequired if you know what you are doing).\n\nAnother thing you have to watch out for is that it is quite easy to\nreceive \"spurious\" readiness notifications, that is, your callback might\nbe called with C<EV_READ> but a subsequent C<read>(2) will actually block\nbecause there is no data. It is very easy to get into this situation even\nwith a relatively standard program structure. Thus it is best to always\nuse non-blocking I/O: An extra C<read>(2) returning C<EAGAIN> is far\npreferable to a program hanging until some data arrives.\n\nIf you cannot run the fd in non-blocking mode (for example you should\nnot play around with an Xlib connection), then you have to separately\nre-test whether a file descriptor is really ready with a known-to-be good\ninterface such as poll (fortunately in the case of Xlib, it already does\nthis on its own, so its quite safe to use). Some people additionally\nuse C<SIGALRM> and an interval timer, just to be sure you won't block\nindefinitely.\n\nBut really, best use non-blocking mode.\n\n=head3 The special problem of disappearing file descriptors\n\nSome backends (e.g. kqueue, epoll) need to be told about closing a file\ndescriptor (either due to calling C<close> explicitly or any other means,\nsuch as C<dup2>). The reason is that you register interest in some file\ndescriptor, but when it goes away, the operating system will silently drop\nthis interest. If another file descriptor with the same number then is\nregistered with libev, there is no efficient way to see that this is, in\nfact, a different file descriptor.\n\nTo avoid having to explicitly tell libev about such cases, libev follows\nthe following policy:  Each time C<ev_io_set> is being called, libev\nwill assume that this is potentially a new file descriptor, otherwise\nit is assumed that the file descriptor stays the same. That means that\nyou I<have> to call C<ev_io_set> (or C<ev_io_init>) when you change the\ndescriptor even if the file descriptor number itself did not change.\n\nThis is how one would do it normally anyway, the important point is that\nthe libev application should not optimise around libev but should leave\noptimisations to libev.\n\n=head3 The special problem of dup'ed file descriptors\n\nSome backends (e.g. epoll), cannot register events for file descriptors,\nbut only events for the underlying file descriptions. That means when you\nhave C<dup ()>'ed file descriptors or weirder constellations, and register\nevents for them, only one file descriptor might actually receive events.\n\nThere is no workaround possible except not registering events\nfor potentially C<dup ()>'ed file descriptors, or to resort to\nC<EVBACKEND_SELECT> or C<EVBACKEND_POLL>.\n\n=head3 The special problem of files\n\nMany people try to use C<select> (or libev) on file descriptors\nrepresenting files, and expect it to become ready when their program\ndoesn't block on disk accesses (which can take a long time on their own).\n\nHowever, this cannot ever work in the \"expected\" way - you get a readiness\nnotification as soon as the kernel knows whether and how much data is\nthere, and in the case of open files, that's always the case, so you\nalways get a readiness notification instantly, and your read (or possibly\nwrite) will still block on the disk I/O.\n\nAnother way to view it is that in the case of sockets, pipes, character\ndevices and so on, there is another party (the sender) that delivers data\non its own, but in the case of files, there is no such thing: the disk\nwill not send data on its own, simply because it doesn't know what you\nwish to read - you would first have to request some data.\n\nSince files are typically not-so-well supported by advanced notification\nmechanism, libev tries hard to emulate POSIX behaviour with respect\nto files, even though you should not use it. The reason for this is\nconvenience: sometimes you want to watch STDIN or STDOUT, which is\nusually a tty, often a pipe, but also sometimes files or special devices\n(for example, C<epoll> on Linux works with F</dev/random> but not with\nF</dev/urandom>), and even though the file might better be served with\nasynchronous I/O instead of with non-blocking I/O, it is still useful when\nit \"just works\" instead of freezing.\n\nSo avoid file descriptors pointing to files when you know it (e.g. use\nlibeio), but use them when it is convenient, e.g. for STDIN/STDOUT, or\nwhen you rarely read from a file instead of from a socket, and want to\nreuse the same code path.\n\n=head3 The special problem of fork\n\nSome backends (epoll, kqueue) do not support C<fork ()> at all or exhibit\nuseless behaviour. Libev fully supports fork, but needs to be told about\nit in the child if you want to continue to use it in the child.\n\nTo support fork in your child processes, you have to call C<ev_loop_fork\n()> after a fork in the child, enable C<EVFLAG_FORKCHECK>, or resort to\nC<EVBACKEND_SELECT> or C<EVBACKEND_POLL>.\n\n=head3 The special problem of SIGPIPE\n\nWhile not really specific to libev, it is easy to forget about C<SIGPIPE>:\nwhen writing to a pipe whose other end has been closed, your program gets\nsent a SIGPIPE, which, by default, aborts your program. For most programs\nthis is sensible behaviour, for daemons, this is usually undesirable.\n\nSo when you encounter spurious, unexplained daemon exits, make sure you\nignore SIGPIPE (and maybe make sure you log the exit status of your daemon\nsomewhere, as that would have given you a big clue).\n\n=head3 The special problem of accept()ing when you can't\n\nMany implementations of the POSIX C<accept> function (for example,\nfound in post-2004 Linux) have the peculiar behaviour of not removing a\nconnection from the pending queue in all error cases.\n\nFor example, larger servers often run out of file descriptors (because\nof resource limits), causing C<accept> to fail with C<ENFILE> but not\nrejecting the connection, leading to libev signalling readiness on\nthe next iteration again (the connection still exists after all), and\ntypically causing the program to loop at 100% CPU usage.\n\nUnfortunately, the set of errors that cause this issue differs between\noperating systems, there is usually little the app can do to remedy the\nsituation, and no known thread-safe method of removing the connection to\ncope with overload is known (to me).\n\nOne of the easiest ways to handle this situation is to just ignore it\n- when the program encounters an overload, it will just loop until the\nsituation is over. While this is a form of busy waiting, no OS offers an\nevent-based way to handle this situation, so it's the best one can do.\n\nA better way to handle the situation is to log any errors other than\nC<EAGAIN> and C<EWOULDBLOCK>, making sure not to flood the log with such\nmessages, and continue as usual, which at least gives the user an idea of\nwhat could be wrong (\"raise the ulimit!\"). For extra points one could stop\nthe C<ev_io> watcher on the listening fd \"for a while\", which reduces CPU\nusage.\n\nIf your program is single-threaded, then you could also keep a dummy file\ndescriptor for overload situations (e.g. by opening F</dev/null>), and\nwhen you run into C<ENFILE> or C<EMFILE>, close it, run C<accept>,\nclose that fd, and create a new dummy fd. This will gracefully refuse\nclients under typical overload conditions.\n\nThe last way to handle it is to simply log the error and C<exit>, as\nis often done with C<malloc> failures, but this results in an easy\nopportunity for a DoS attack.\n\n=head3 Watcher-Specific Functions\n\n=over 4\n\n=item ev_io_init (ev_io *, callback, int fd, int events)\n\n=item ev_io_set (ev_io *, int fd, int events)\n\nConfigures an C<ev_io> watcher. The C<fd> is the file descriptor to\nreceive events for and C<events> is either C<EV_READ>, C<EV_WRITE> or\nC<EV_READ | EV_WRITE>, to express the desire to receive the given events.\n\n=item int fd [read-only]\n\nThe file descriptor being watched.\n\n=item int events [read-only]\n\nThe events being watched.\n\n=back\n\n=head3 Examples\n\nExample: Call C<stdin_readable_cb> when STDIN_FILENO has become, well\nreadable, but only once. Since it is likely line-buffered, you could\nattempt to read a whole line in the callback.\n\n   static void\n   stdin_readable_cb (struct ev_loop *loop, ev_io *w, int revents)\n   {\n      ev_io_stop (loop, w);\n     .. read from stdin here (or from w->fd) and handle any I/O errors\n   }\n\n   ...\n   struct ev_loop *loop = ev_default_init (0);\n   ev_io stdin_readable;\n   ev_io_init (&stdin_readable, stdin_readable_cb, STDIN_FILENO, EV_READ);\n   ev_io_start (loop, &stdin_readable);\n   ev_run (loop, 0);\n\n\n=head2 C<ev_timer> - relative and optionally repeating timeouts\n\nTimer watchers are simple relative timers that generate an event after a\ngiven time, and optionally repeating in regular intervals after that.\n\nThe timers are based on real time, that is, if you register an event that\ntimes out after an hour and you reset your system clock to January last\nyear, it will still time out after (roughly) one hour. \"Roughly\" because\ndetecting time jumps is hard, and some inaccuracies are unavoidable (the\nmonotonic clock option helps a lot here).\n\nThe callback is guaranteed to be invoked only I<after> its timeout has\npassed (not I<at>, so on systems with very low-resolution clocks this\nmight introduce a small delay, see \"the special problem of being too\nearly\", below). If multiple timers become ready during the same loop\niteration then the ones with earlier time-out values are invoked before\nones of the same priority with later time-out values (but this is no\nlonger true when a callback calls C<ev_run> recursively).\n\n=head3 Be smart about timeouts\n\nMany real-world problems involve some kind of timeout, usually for error\nrecovery. A typical example is an HTTP request - if the other side hangs,\nyou want to raise some error after a while.\n\nWhat follows are some ways to handle this problem, from obvious and\ninefficient to smart and efficient.\n\nIn the following, a 60 second activity timeout is assumed - a timeout that\ngets reset to 60 seconds each time there is activity (e.g. each time some\ndata or other life sign was received).\n\n=over 4\n\n=item 1. Use a timer and stop, reinitialise and start it on activity.\n\nThis is the most obvious, but not the most simple way: In the beginning,\nstart the watcher:\n\n   ev_timer_init (timer, callback, 60., 0.);\n   ev_timer_start (loop, timer);\n\nThen, each time there is some activity, C<ev_timer_stop> it, initialise it\nand start it again:\n\n   ev_timer_stop (loop, timer);\n   ev_timer_set (timer, 60., 0.);\n   ev_timer_start (loop, timer);\n\nThis is relatively simple to implement, but means that each time there is\nsome activity, libev will first have to remove the timer from its internal\ndata structure and then add it again. Libev tries to be fast, but it's\nstill not a constant-time operation.\n\n=item 2. Use a timer and re-start it with C<ev_timer_again> inactivity.\n\nThis is the easiest way, and involves using C<ev_timer_again> instead of\nC<ev_timer_start>.\n\nTo implement this, configure an C<ev_timer> with a C<repeat> value\nof C<60> and then call C<ev_timer_again> at start and each time you\nsuccessfully read or write some data. If you go into an idle state where\nyou do not expect data to travel on the socket, you can C<ev_timer_stop>\nthe timer, and C<ev_timer_again> will automatically restart it if need be.\n\nThat means you can ignore both the C<ev_timer_start> function and the\nC<after> argument to C<ev_timer_set>, and only ever use the C<repeat>\nmember and C<ev_timer_again>.\n\nAt start:\n\n   ev_init (timer, callback);\n   timer->repeat = 60.;\n   ev_timer_again (loop, timer);\n\nEach time there is some activity:\n\n   ev_timer_again (loop, timer);\n\nIt is even possible to change the time-out on the fly, regardless of\nwhether the watcher is active or not:\n\n   timer->repeat = 30.;\n   ev_timer_again (loop, timer);\n\nThis is slightly more efficient then stopping/starting the timer each time\nyou want to modify its timeout value, as libev does not have to completely\nremove and re-insert the timer from/into its internal data structure.\n\nIt is, however, even simpler than the \"obvious\" way to do it.\n\n=item 3. Let the timer time out, but then re-arm it as required.\n\nThis method is more tricky, but usually most efficient: Most timeouts are\nrelatively long compared to the intervals between other activity - in\nour example, within 60 seconds, there are usually many I/O events with\nassociated activity resets.\n\nIn this case, it would be more efficient to leave the C<ev_timer> alone,\nbut remember the time of last activity, and check for a real timeout only\nwithin the callback:\n\n   ev_tstamp timeout = 60.;\n   ev_tstamp last_activity; // time of last activity\n   ev_timer timer;\n\n   static void\n   callback (EV_P_ ev_timer *w, int revents)\n   {\n     // calculate when the timeout would happen\n     ev_tstamp after = last_activity - ev_now (EV_A) + timeout;\n\n     // if negative, it means we the timeout already occurred\n     if (after < 0.)\n       {\n         // timeout occurred, take action\n       }\n     else\n       {\n         // callback was invoked, but there was some recent \n         // activity. simply restart the timer to time out\n         // after \"after\" seconds, which is the earliest time\n         // the timeout can occur.\n         ev_timer_set (w, after, 0.);\n         ev_timer_start (EV_A_ w);\n       }\n   }\n\nTo summarise the callback: first calculate in how many seconds the\ntimeout will occur (by calculating the absolute time when it would occur,\nC<last_activity + timeout>, and subtracting the current time, C<ev_now\n(EV_A)> from that).\n\nIf this value is negative, then we are already past the timeout, i.e. we\ntimed out, and need to do whatever is needed in this case.\n\nOtherwise, we now the earliest time at which the timeout would trigger,\nand simply start the timer with this timeout value.\n\nIn other words, each time the callback is invoked it will check whether\nthe timeout occurred. If not, it will simply reschedule itself to check\nagain at the earliest time it could time out. Rinse. Repeat.\n\nThis scheme causes more callback invocations (about one every 60 seconds\nminus half the average time between activity), but virtually no calls to\nlibev to change the timeout.\n\nTo start the machinery, simply initialise the watcher and set\nC<last_activity> to the current time (meaning there was some activity just\nnow), then call the callback, which will \"do the right thing\" and start\nthe timer:\n\n   last_activity = ev_now (EV_A);\n   ev_init (&timer, callback);\n   callback (EV_A_ &timer, 0);\n\nWhen there is some activity, simply store the current time in\nC<last_activity>, no libev calls at all:\n\n   if (activity detected)\n     last_activity = ev_now (EV_A);\n\nWhen your timeout value changes, then the timeout can be changed by simply\nproviding a new value, stopping the timer and calling the callback, which\nwill again do the right thing (for example, time out immediately :).\n\n   timeout = new_value;\n   ev_timer_stop (EV_A_ &timer);\n   callback (EV_A_ &timer, 0);\n\nThis technique is slightly more complex, but in most cases where the\ntime-out is unlikely to be triggered, much more efficient.\n\n=item 4. Wee, just use a double-linked list for your timeouts.\n\nIf there is not one request, but many thousands (millions...), all\nemploying some kind of timeout with the same timeout value, then one can\ndo even better:\n\nWhen starting the timeout, calculate the timeout value and put the timeout\nat the I<end> of the list.\n\nThen use an C<ev_timer> to fire when the timeout at the I<beginning> of\nthe list is expected to fire (for example, using the technique #3).\n\nWhen there is some activity, remove the timer from the list, recalculate\nthe timeout, append it to the end of the list again, and make sure to\nupdate the C<ev_timer> if it was taken from the beginning of the list.\n\nThis way, one can manage an unlimited number of timeouts in O(1) time for\nstarting, stopping and updating the timers, at the expense of a major\ncomplication, and having to use a constant timeout. The constant timeout\nensures that the list stays sorted.\n\n=back\n\nSo which method the best?\n\nMethod #2 is a simple no-brain-required solution that is adequate in most\nsituations. Method #3 requires a bit more thinking, but handles many cases\nbetter, and isn't very complicated either. In most case, choosing either\none is fine, with #3 being better in typical situations.\n\nMethod #1 is almost always a bad idea, and buys you nothing. Method #4 is\nrather complicated, but extremely efficient, something that really pays\noff after the first million or so of active timers, i.e. it's usually\noverkill :)\n\n=head3 The special problem of being too early\n\nIf you ask a timer to call your callback after three seconds, then\nyou expect it to be invoked after three seconds - but of course, this\ncannot be guaranteed to infinite precision. Less obviously, it cannot be\nguaranteed to any precision by libev - imagine somebody suspending the\nprocess with a STOP signal for a few hours for example.\n\nSo, libev tries to invoke your callback as soon as possible I<after> the\ndelay has occurred, but cannot guarantee this.\n\nA less obvious failure mode is calling your callback too early: many event\nloops compare timestamps with a \"elapsed delay >= requested delay\", but\nthis can cause your callback to be invoked much earlier than you would\nexpect.\n\nTo see why, imagine a system with a clock that only offers full second\nresolution (think windows if you can't come up with a broken enough OS\nyourself). If you schedule a one-second timer at the time 500.9, then the\nevent loop will schedule your timeout to elapse at a system time of 500\n(500.9 truncated to the resolution) + 1, or 501.\n\nIf an event library looks at the timeout 0.1s later, it will see \"501 >=\n501\" and invoke the callback 0.1s after it was started, even though a\none-second delay was requested - this is being \"too early\", despite best\nintentions.\n\nThis is the reason why libev will never invoke the callback if the elapsed\ndelay equals the requested delay, but only when the elapsed delay is\nlarger than the requested delay. In the example above, libev would only invoke\nthe callback at system time 502, or 1.1s after the timer was started.\n\nSo, while libev cannot guarantee that your callback will be invoked\nexactly when requested, it I<can> and I<does> guarantee that the requested\ndelay has actually elapsed, or in other words, it always errs on the \"too\nlate\" side of things.\n\n=head3 The special problem of time updates\n\nEstablishing the current time is a costly operation (it usually takes\nat least one system call): EV therefore updates its idea of the current\ntime only before and after C<ev_run> collects new events, which causes a\ngrowing difference between C<ev_now ()> and C<ev_time ()> when handling\nlots of events in one iteration.\n\nThe relative timeouts are calculated relative to the C<ev_now ()>\ntime. This is usually the right thing as this timestamp refers to the time\nof the event triggering whatever timeout you are modifying/starting. If\nyou suspect event processing to be delayed and you I<need> to base the\ntimeout on the current time, use something like the following to adjust\nfor it:\n\n   ev_timer_set (&timer, after + (ev_time () - ev_now ()), 0.);\n\nIf the event loop is suspended for a long time, you can also force an\nupdate of the time returned by C<ev_now ()> by calling C<ev_now_update\n()>, although that will push the event time of all outstanding events\nfurther into the future.\n\n=head3 The special problem of unsynchronised clocks\n\nModern systems have a variety of clocks - libev itself uses the normal\n\"wall clock\" clock and, if available, the monotonic clock (to avoid time\njumps).\n\nNeither of these clocks is synchronised with each other or any other clock\non the system, so C<ev_time ()> might return a considerably different time\nthan C<gettimeofday ()> or C<time ()>. On a GNU/Linux system, for example,\na call to C<gettimeofday> might return a second count that is one higher\nthan a directly following call to C<time>.\n\nThe moral of this is to only compare libev-related timestamps with\nC<ev_time ()> and C<ev_now ()>, at least if you want better precision than\na second or so.\n\nOne more problem arises due to this lack of synchronisation: if libev uses\nthe system monotonic clock and you compare timestamps from C<ev_time>\nor C<ev_now> from when you started your timer and when your callback is\ninvoked, you will find that sometimes the callback is a bit \"early\".\n\nThis is because C<ev_timer>s work in real time, not wall clock time, so\nlibev makes sure your callback is not invoked before the delay happened,\nI<measured according to the real time>, not the system clock.\n\nIf your timeouts are based on a physical timescale (e.g. \"time out this\nconnection after 100 seconds\") then this shouldn't bother you as it is\nexactly the right behaviour.\n\nIf you want to compare wall clock/system timestamps to your timers, then\nyou need to use C<ev_periodic>s, as these are based on the wall clock\ntime, where your comparisons will always generate correct results.\n\n=head3 The special problems of suspended animation\n\nWhen you leave the server world it is quite customary to hit machines that\ncan suspend/hibernate - what happens to the clocks during such a suspend?\n\nSome quick tests made with a Linux 2.6.28 indicate that a suspend freezes\nall processes, while the clocks (C<times>, C<CLOCK_MONOTONIC>) continue\nto run until the system is suspended, but they will not advance while the\nsystem is suspended. That means, on resume, it will be as if the program\nwas frozen for a few seconds, but the suspend time will not be counted\ntowards C<ev_timer> when a monotonic clock source is used. The real time\nclock advanced as expected, but if it is used as sole clocksource, then a\nlong suspend would be detected as a time jump by libev, and timers would\nbe adjusted accordingly.\n\nI would not be surprised to see different behaviour in different between\noperating systems, OS versions or even different hardware.\n\nThe other form of suspend (job control, or sending a SIGSTOP) will see a\ntime jump in the monotonic clocks and the realtime clock. If the program\nis suspended for a very long time, and monotonic clock sources are in use,\nthen you can expect C<ev_timer>s to expire as the full suspension time\nwill be counted towards the timers. When no monotonic clock source is in\nuse, then libev will again assume a timejump and adjust accordingly.\n\nIt might be beneficial for this latter case to call C<ev_suspend>\nand C<ev_resume> in code that handles C<SIGTSTP>, to at least get\ndeterministic behaviour in this case (you can do nothing against\nC<SIGSTOP>).\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_timer_init (ev_timer *, callback, ev_tstamp after, ev_tstamp repeat)\n\n=item ev_timer_set (ev_timer *, ev_tstamp after, ev_tstamp repeat)\n\nConfigure the timer to trigger after C<after> seconds. If C<repeat>\nis C<0.>, then it will automatically be stopped once the timeout is\nreached. If it is positive, then the timer will automatically be\nconfigured to trigger again C<repeat> seconds later, again, and again,\nuntil stopped manually.\n\nThe timer itself will do a best-effort at avoiding drift, that is, if\nyou configure a timer to trigger every 10 seconds, then it will normally\ntrigger at exactly 10 second intervals. If, however, your program cannot\nkeep up with the timer (because it takes longer than those 10 seconds to\ndo stuff) the timer will not fire more than once per event loop iteration.\n\n=item ev_timer_again (loop, ev_timer *)\n\nThis will act as if the timer timed out, and restarts it again if it is\nrepeating. It basically works like calling C<ev_timer_stop>, updating the\ntimeout to the C<repeat> value and calling C<ev_timer_start>.\n\nThe exact semantics are as in the following rules, all of which will be\napplied to the watcher:\n\n=over 4\n\n=item If the timer is pending, the pending status is always cleared.\n\n=item If the timer is started but non-repeating, stop it (as if it timed\nout, without invoking it).\n\n=item If the timer is repeating, make the C<repeat> value the new timeout\nand start the timer, if necessary.\n\n=back\n\nThis sounds a bit complicated, see L</Be smart about timeouts>, above, for a\nusage example.\n\n=item ev_tstamp ev_timer_remaining (loop, ev_timer *)\n\nReturns the remaining time until a timer fires. If the timer is active,\nthen this time is relative to the current event loop time, otherwise it's\nthe timeout value currently configured.\n\nThat is, after an C<ev_timer_set (w, 5, 7)>, C<ev_timer_remaining> returns\nC<5>. When the timer is started and one second passes, C<ev_timer_remaining>\nwill return C<4>. When the timer expires and is restarted, it will return\nroughly C<7> (likely slightly less as callback invocation takes some time,\ntoo), and so on.\n\n=item ev_tstamp repeat [read-write]\n\nThe current C<repeat> value. Will be used each time the watcher times out\nor C<ev_timer_again> is called, and determines the next timeout (if any),\nwhich is also when any modifications are taken into account.\n\n=back\n\n=head3 Examples\n\nExample: Create a timer that fires after 60 seconds.\n\n   static void\n   one_minute_cb (struct ev_loop *loop, ev_timer *w, int revents)\n   {\n     .. one minute over, w is actually stopped right here\n   }\n\n   ev_timer mytimer;\n   ev_timer_init (&mytimer, one_minute_cb, 60., 0.);\n   ev_timer_start (loop, &mytimer);\n\nExample: Create a timeout timer that times out after 10 seconds of\ninactivity.\n\n   static void\n   timeout_cb (struct ev_loop *loop, ev_timer *w, int revents)\n   {\n     .. ten seconds without any activity\n   }\n\n   ev_timer mytimer;\n   ev_timer_init (&mytimer, timeout_cb, 0., 10.); /* note, only repeat used */\n   ev_timer_again (&mytimer); /* start timer */\n   ev_run (loop, 0);\n\n   // and in some piece of code that gets executed on any \"activity\":\n   // reset the timeout to start ticking again at 10 seconds\n   ev_timer_again (&mytimer);\n\n\n=head2 C<ev_periodic> - to cron or not to cron?\n\nPeriodic watchers are also timers of a kind, but they are very versatile\n(and unfortunately a bit complex).\n\nUnlike C<ev_timer>, periodic watchers are not based on real time (or\nrelative time, the physical time that passes) but on wall clock time\n(absolute time, the thing you can read on your calender or clock). The\ndifference is that wall clock time can run faster or slower than real\ntime, and time jumps are not uncommon (e.g. when you adjust your\nwrist-watch).\n\nYou can tell a periodic watcher to trigger after some specific point\nin time: for example, if you tell a periodic watcher to trigger \"in 10\nseconds\" (by specifying e.g. C<ev_now () + 10.>, that is, an absolute time\nnot a delay) and then reset your system clock to January of the previous\nyear, then it will take a year or more to trigger the event (unlike an\nC<ev_timer>, which would still trigger roughly 10 seconds after starting\nit, as it uses a relative timeout).\n\nC<ev_periodic> watchers can also be used to implement vastly more complex\ntimers, such as triggering an event on each \"midnight, local time\", or\nother complicated rules. This cannot be done with C<ev_timer> watchers, as\nthose cannot react to time jumps.\n\nAs with timers, the callback is guaranteed to be invoked only when the\npoint in time where it is supposed to trigger has passed. If multiple\ntimers become ready during the same loop iteration then the ones with\nearlier time-out values are invoked before ones with later time-out values\n(but this is no longer true when a callback calls C<ev_run> recursively).\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_periodic_init (ev_periodic *, callback, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\n\n=item ev_periodic_set (ev_periodic *, ev_tstamp offset, ev_tstamp interval, reschedule_cb)\n\nLots of arguments, let's sort it out... There are basically three modes of\noperation, and we will explain them from simplest to most complex:\n\n=over 4\n\n=item * absolute timer (offset = absolute time, interval = 0, reschedule_cb = 0)\n\nIn this configuration the watcher triggers an event after the wall clock\ntime C<offset> has passed. It will not repeat and will not adjust when a\ntime jump occurs, that is, if it is to be run at January 1st 2011 then it\nwill be stopped and invoked when the system clock reaches or surpasses\nthis point in time.\n\n=item * repeating interval timer (offset = offset within interval, interval > 0, reschedule_cb = 0)\n\nIn this mode the watcher will always be scheduled to time out at the next\nC<offset + N * interval> time (for some integer N, which can also be\nnegative) and then repeat, regardless of any time jumps. The C<offset>\nargument is merely an offset into the C<interval> periods.\n\nThis can be used to create timers that do not drift with respect to the\nsystem clock, for example, here is an C<ev_periodic> that triggers each\nhour, on the hour (with respect to UTC):\n\n   ev_periodic_set (&periodic, 0., 3600., 0);\n\nThis doesn't mean there will always be 3600 seconds in between triggers,\nbut only that the callback will be called when the system time shows a\nfull hour (UTC), or more correctly, when the system time is evenly divisible\nby 3600.\n\nAnother way to think about it (for the mathematically inclined) is that\nC<ev_periodic> will try to run the callback in this mode at the next possible\ntime where C<time = offset (mod interval)>, regardless of any time jumps.\n\nThe C<interval> I<MUST> be positive, and for numerical stability, the\ninterval value should be higher than C<1/8192> (which is around 100\nmicroseconds) and C<offset> should be higher than C<0> and should have\nat most a similar magnitude as the current time (say, within a factor of\nten). Typical values for offset are, in fact, C<0> or something between\nC<0> and C<interval>, which is also the recommended range.\n\nNote also that there is an upper limit to how often a timer can fire (CPU\nspeed for example), so if C<interval> is very small then timing stability\nwill of course deteriorate. Libev itself tries to be exact to be about one\nmillisecond (if the OS supports it and the machine is fast enough).\n\n=item * manual reschedule mode (offset ignored, interval ignored, reschedule_cb = callback)\n\nIn this mode the values for C<interval> and C<offset> are both being\nignored. Instead, each time the periodic watcher gets scheduled, the\nreschedule callback will be called with the watcher as first, and the\ncurrent time as second argument.\n\nNOTE: I<This callback MUST NOT stop or destroy any periodic watcher, ever,\nor make ANY other event loop modifications whatsoever, unless explicitly\nallowed by documentation here>.\n\nIf you need to stop it, return C<now + 1e30> (or so, fudge fudge) and stop\nit afterwards (e.g. by starting an C<ev_prepare> watcher, which is the\nonly event loop modification you are allowed to do).\n\nThe callback prototype is C<ev_tstamp (*reschedule_cb)(ev_periodic\n*w, ev_tstamp now)>, e.g.:\n\n   static ev_tstamp\n   my_rescheduler (ev_periodic *w, ev_tstamp now)\n   {\n     return now + 60.;\n   }\n\nIt must return the next time to trigger, based on the passed time value\n(that is, the lowest time value larger than to the second argument). It\nwill usually be called just before the callback will be triggered, but\nmight be called at other times, too.\n\nNOTE: I<< This callback must always return a time that is higher than or\nequal to the passed C<now> value >>.\n\nThis can be used to create very complex timers, such as a timer that\ntriggers on \"next midnight, local time\". To do this, you would calculate the\nnext midnight after C<now> and return the timestamp value for this. How\nyou do this is, again, up to you (but it is not trivial, which is the main\nreason I omitted it as an example).\n\n=back\n\n=item ev_periodic_again (loop, ev_periodic *)\n\nSimply stops and restarts the periodic watcher again. This is only useful\nwhen you changed some parameters or the reschedule callback would return\na different time than the last time it was called (e.g. in a crond like\nprogram when the crontabs have changed).\n\n=item ev_tstamp ev_periodic_at (ev_periodic *)\n\nWhen active, returns the absolute time that the watcher is supposed\nto trigger next. This is not the same as the C<offset> argument to\nC<ev_periodic_set>, but indeed works even in interval and manual\nrescheduling modes.\n\n=item ev_tstamp offset [read-write]\n\nWhen repeating, this contains the offset value, otherwise this is the\nabsolute point in time (the C<offset> value passed to C<ev_periodic_set>,\nalthough libev might modify this value for better numerical stability).\n\nCan be modified any time, but changes only take effect when the periodic\ntimer fires or C<ev_periodic_again> is being called.\n\n=item ev_tstamp interval [read-write]\n\nThe current interval value. Can be modified any time, but changes only\ntake effect when the periodic timer fires or C<ev_periodic_again> is being\ncalled.\n\n=item ev_tstamp (*reschedule_cb)(ev_periodic *w, ev_tstamp now) [read-write]\n\nThe current reschedule callback, or C<0>, if this functionality is\nswitched off. Can be changed any time, but changes only take effect when\nthe periodic timer fires or C<ev_periodic_again> is being called.\n\n=back\n\n=head3 Examples\n\nExample: Call a callback every hour, or, more precisely, whenever the\nsystem time is divisible by 3600. The callback invocation times have\npotentially a lot of jitter, but good long-term stability.\n\n   static void\n   clock_cb (struct ev_loop *loop, ev_periodic *w, int revents)\n   {\n     ... its now a full hour (UTC, or TAI or whatever your clock follows)\n   }\n\n   ev_periodic hourly_tick;\n   ev_periodic_init (&hourly_tick, clock_cb, 0., 3600., 0);\n   ev_periodic_start (loop, &hourly_tick);\n\nExample: The same as above, but use a reschedule callback to do it:\n\n   #include <math.h>\n\n   static ev_tstamp\n   my_scheduler_cb (ev_periodic *w, ev_tstamp now)\n   {\n     return now + (3600. - fmod (now, 3600.));\n   }\n\n   ev_periodic_init (&hourly_tick, clock_cb, 0., 0., my_scheduler_cb);\n\nExample: Call a callback every hour, starting now:\n\n   ev_periodic hourly_tick;\n   ev_periodic_init (&hourly_tick, clock_cb,\n                     fmod (ev_now (loop), 3600.), 3600., 0);\n   ev_periodic_start (loop, &hourly_tick);\n\n\n=head2 C<ev_signal> - signal me when a signal gets signalled!\n\nSignal watchers will trigger an event when the process receives a specific\nsignal one or more times. Even though signals are very asynchronous, libev\nwill try its best to deliver signals synchronously, i.e. as part of the\nnormal event processing, like any other event.\n\nIf you want signals to be delivered truly asynchronously, just use\nC<sigaction> as you would do without libev and forget about sharing\nthe signal. You can even use C<ev_async> from a signal handler to\nsynchronously wake up an event loop.\n\nYou can configure as many watchers as you like for the same signal, but\nonly within the same loop, i.e. you can watch for C<SIGINT> in your\ndefault loop and for C<SIGIO> in another loop, but you cannot watch for\nC<SIGINT> in both the default loop and another loop at the same time. At\nthe moment, C<SIGCHLD> is permanently tied to the default loop.\n\nOnly after the first watcher for a signal is started will libev actually\nregister something with the kernel. It thus coexists with your own signal\nhandlers as long as you don't register any with libev for the same signal.\n\nIf possible and supported, libev will install its handlers with\nC<SA_RESTART> (or equivalent) behaviour enabled, so system calls should\nnot be unduly interrupted. If you have a problem with system calls getting\ninterrupted by signals you can block all signals in an C<ev_check> watcher\nand unblock them in an C<ev_prepare> watcher.\n\n=head3 The special problem of inheritance over fork/execve/pthread_create\n\nBoth the signal mask (C<sigprocmask>) and the signal disposition\n(C<sigaction>) are unspecified after starting a signal watcher (and after\nstopping it again), that is, libev might or might not block the signal,\nand might or might not set or restore the installed signal handler (but\nsee C<EVFLAG_NOSIGMASK>).\n\nWhile this does not matter for the signal disposition (libev never\nsets signals to C<SIG_IGN>, so handlers will be reset to C<SIG_DFL> on\nC<execve>), this matters for the signal mask: many programs do not expect\ncertain signals to be blocked.\n\nThis means that before calling C<exec> (from the child) you should reset\nthe signal mask to whatever \"default\" you expect (all clear is a good\nchoice usually).\n\nThe simplest way to ensure that the signal mask is reset in the child is\nto install a fork handler with C<pthread_atfork> that resets it. That will\ncatch fork calls done by libraries (such as the libc) as well.\n\nIn current versions of libev, the signal will not be blocked indefinitely\nunless you use the C<signalfd> API (C<EV_SIGNALFD>). While this reduces\nthe window of opportunity for problems, it will not go away, as libev\nI<has> to modify the signal mask, at least temporarily.\n\nSo I can't stress this enough: I<If you do not reset your signal mask when\nyou expect it to be empty, you have a race condition in your code>. This\nis not a libev-specific thing, this is true for most event libraries.\n\n=head3 The special problem of threads signal handling\n\nPOSIX threads has problematic signal handling semantics, specifically,\na lot of functionality (sigfd, sigwait etc.) only really works if all\nthreads in a process block signals, which is hard to achieve.\n\nWhen you want to use sigwait (or mix libev signal handling with your own\nfor the same signals), you can tackle this problem by globally blocking\nall signals before creating any threads (or creating them with a fully set\nsigprocmask) and also specifying the C<EVFLAG_NOSIGMASK> when creating\nloops. Then designate one thread as \"signal receiver thread\" which handles\nthese signals. You can pass on any signals that libev might be interested\nin by calling C<ev_feed_signal>.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_signal_init (ev_signal *, callback, int signum)\n\n=item ev_signal_set (ev_signal *, int signum)\n\nConfigures the watcher to trigger on the given signal number (usually one\nof the C<SIGxxx> constants).\n\n=item int signum [read-only]\n\nThe signal the watcher watches out for.\n\n=back\n\n=head3 Examples\n\nExample: Try to exit cleanly on SIGINT.\n\n   static void\n   sigint_cb (struct ev_loop *loop, ev_signal *w, int revents)\n   {\n     ev_break (loop, EVBREAK_ALL);\n   }\n\n   ev_signal signal_watcher;\n   ev_signal_init (&signal_watcher, sigint_cb, SIGINT);\n   ev_signal_start (loop, &signal_watcher);\n\n\n=head2 C<ev_child> - watch out for process status changes\n\nChild watchers trigger when your process receives a SIGCHLD in response to\nsome child status changes (most typically when a child of yours dies or\nexits). It is permissible to install a child watcher I<after> the child\nhas been forked (which implies it might have already exited), as long\nas the event loop isn't entered (or is continued from a watcher), i.e.,\nforking and then immediately registering a watcher for the child is fine,\nbut forking and registering a watcher a few event loop iterations later or\nin the next callback invocation is not.\n\nOnly the default event loop is capable of handling signals, and therefore\nyou can only register child watchers in the default event loop.\n\nDue to some design glitches inside libev, child watchers will always be\nhandled at maximum priority (their priority is set to C<EV_MAXPRI> by\nlibev)\n\n=head3 Process Interaction\n\nLibev grabs C<SIGCHLD> as soon as the default event loop is\ninitialised. This is necessary to guarantee proper behaviour even if the\nfirst child watcher is started after the child exits. The occurrence\nof C<SIGCHLD> is recorded asynchronously, but child reaping is done\nsynchronously as part of the event loop processing. Libev always reaps all\nchildren, even ones not watched.\n\n=head3 Overriding the Built-In Processing\n\nLibev offers no special support for overriding the built-in child\nprocessing, but if your application collides with libev's default child\nhandler, you can override it easily by installing your own handler for\nC<SIGCHLD> after initialising the default loop, and making sure the\ndefault loop never gets destroyed. You are encouraged, however, to use an\nevent-based approach to child reaping and thus use libev's support for\nthat, so other libev users can use C<ev_child> watchers freely.\n\n=head3 Stopping the Child Watcher\n\nCurrently, the child watcher never gets stopped, even when the\nchild terminates, so normally one needs to stop the watcher in the\ncallback. Future versions of libev might stop the watcher automatically\nwhen a child exit is detected (calling C<ev_child_stop> twice is not a\nproblem).\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_child_init (ev_child *, callback, int pid, int trace)\n\n=item ev_child_set (ev_child *, int pid, int trace)\n\nConfigures the watcher to wait for status changes of process C<pid> (or\nI<any> process if C<pid> is specified as C<0>). The callback can look\nat the C<rstatus> member of the C<ev_child> watcher structure to see\nthe status word (use the macros from C<sys/wait.h> and see your systems\nC<waitpid> documentation). The C<rpid> member contains the pid of the\nprocess causing the status change. C<trace> must be either C<0> (only\nactivate the watcher when the process terminates) or C<1> (additionally\nactivate the watcher when the process is stopped or continued).\n\n=item int pid [read-only]\n\nThe process id this watcher watches out for, or C<0>, meaning any process id.\n\n=item int rpid [read-write]\n\nThe process id that detected a status change.\n\n=item int rstatus [read-write]\n\nThe process exit/trace status caused by C<rpid> (see your systems\nC<waitpid> and C<sys/wait.h> documentation for details).\n\n=back\n\n=head3 Examples\n\nExample: C<fork()> a new process and install a child handler to wait for\nits completion.\n\n   ev_child cw;\n\n   static void\n   child_cb (EV_P_ ev_child *w, int revents)\n   {\n     ev_child_stop (EV_A_ w);\n     printf (\"process %d exited with status %x\\n\", w->rpid, w->rstatus);\n   }\n\n   pid_t pid = fork ();\n\n   if (pid < 0)\n     // error\n   else if (pid == 0)\n     {\n       // the forked child executes here\n       exit (1);\n     }\n   else\n     {\n       ev_child_init (&cw, child_cb, pid, 0);\n       ev_child_start (EV_DEFAULT_ &cw);\n     }\n\n\n=head2 C<ev_stat> - did the file attributes just change?\n\nThis watches a file system path for attribute changes. That is, it calls\nC<stat> on that path in regular intervals (or when the OS says it changed)\nand sees if it changed compared to the last time, invoking the callback\nif it did. Starting the watcher C<stat>'s the file, so only changes that\nhappen after the watcher has been started will be reported.\n\nThe path does not need to exist: changing from \"path exists\" to \"path does\nnot exist\" is a status change like any other. The condition \"path does not\nexist\" (or more correctly \"path cannot be stat'ed\") is signified by the\nC<st_nlink> field being zero (which is otherwise always forced to be at\nleast one) and all the other fields of the stat buffer having unspecified\ncontents.\n\nThe path I<must not> end in a slash or contain special components such as\nC<.> or C<..>. The path I<should> be absolute: If it is relative and\nyour working directory changes, then the behaviour is undefined.\n\nSince there is no portable change notification interface available, the\nportable implementation simply calls C<stat(2)> regularly on the path\nto see if it changed somehow. You can specify a recommended polling\ninterval for this case. If you specify a polling interval of C<0> (highly\nrecommended!) then a I<suitable, unspecified default> value will be used\n(which you can expect to be around five seconds, although this might\nchange dynamically). Libev will also impose a minimum interval which is\ncurrently around C<0.1>, but that's usually overkill.\n\nThis watcher type is not meant for massive numbers of stat watchers,\nas even with OS-supported change notifications, this can be\nresource-intensive.\n\nAt the time of this writing, the only OS-specific interface implemented\nis the Linux inotify interface (implementing kqueue support is left as an\nexercise for the reader. Note, however, that the author sees no way of\nimplementing C<ev_stat> semantics with kqueue, except as a hint).\n\n=head3 ABI Issues (Largefile Support)\n\nLibev by default (unless the user overrides this) uses the default\ncompilation environment, which means that on systems with large file\nsupport disabled by default, you get the 32 bit version of the stat\nstructure. When using the library from programs that change the ABI to\nuse 64 bit file offsets the programs will fail. In that case you have to\ncompile libev with the same flags to get binary compatibility. This is\nobviously the case with any flags that change the ABI, but the problem is\nmost noticeably displayed with ev_stat and large file support.\n\nThe solution for this is to lobby your distribution maker to make large\nfile interfaces available by default (as e.g. FreeBSD does) and not\noptional. Libev cannot simply switch on large file support because it has\nto exchange stat structures with application programs compiled using the\ndefault compilation environment.\n\n=head3 Inotify and Kqueue\n\nWhen C<inotify (7)> support has been compiled into libev and present at\nruntime, it will be used to speed up change detection where possible. The\ninotify descriptor will be created lazily when the first C<ev_stat>\nwatcher is being started.\n\nInotify presence does not change the semantics of C<ev_stat> watchers\nexcept that changes might be detected earlier, and in some cases, to avoid\nmaking regular C<stat> calls. Even in the presence of inotify support\nthere are many cases where libev has to resort to regular C<stat> polling,\nbut as long as kernel 2.6.25 or newer is used (2.6.24 and older have too\nmany bugs), the path exists (i.e. stat succeeds), and the path resides on\na local filesystem (libev currently assumes only ext2/3, jfs, reiserfs and\nxfs are fully working) libev usually gets away without polling.\n\nThere is no support for kqueue, as apparently it cannot be used to\nimplement this functionality, due to the requirement of having a file\ndescriptor open on the object at all times, and detecting renames, unlinks\netc. is difficult.\n\n=head3 C<stat ()> is a synchronous operation\n\nLibev doesn't normally do any kind of I/O itself, and so is not blocking\nthe process. The exception are C<ev_stat> watchers - those call C<stat\n()>, which is a synchronous operation.\n\nFor local paths, this usually doesn't matter: unless the system is very\nbusy or the intervals between stat's are large, a stat call will be fast,\nas the path data is usually in memory already (except when starting the\nwatcher).\n\nFor networked file systems, calling C<stat ()> can block an indefinite\ntime due to network issues, and even under good conditions, a stat call\noften takes multiple milliseconds.\n\nTherefore, it is best to avoid using C<ev_stat> watchers on networked\npaths, although this is fully supported by libev.\n\n=head3 The special problem of stat time resolution\n\nThe C<stat ()> system call only supports full-second resolution portably,\nand even on systems where the resolution is higher, most file systems\nstill only support whole seconds.\n\nThat means that, if the time is the only thing that changes, you can\neasily miss updates: on the first update, C<ev_stat> detects a change and\ncalls your callback, which does something. When there is another update\nwithin the same second, C<ev_stat> will be unable to detect unless the\nstat data does change in other ways (e.g. file size).\n\nThe solution to this is to delay acting on a change for slightly more\nthan a second (or till slightly after the next full second boundary), using\na roughly one-second-delay C<ev_timer> (e.g. C<ev_timer_set (w, 0., 1.02);\nev_timer_again (loop, w)>).\n\nThe C<.02> offset is added to work around small timing inconsistencies\nof some operating systems (where the second counter of the current time\nmight be be delayed. One such system is the Linux kernel, where a call to\nC<gettimeofday> might return a timestamp with a full second later than\na subsequent C<time> call - if the equivalent of C<time ()> is used to\nupdate file times then there will be a small window where the kernel uses\nthe previous second to update file times but libev might already execute\nthe timer callback).\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_stat_init (ev_stat *, callback, const char *path, ev_tstamp interval)\n\n=item ev_stat_set (ev_stat *, const char *path, ev_tstamp interval)\n\nConfigures the watcher to wait for status changes of the given\nC<path>. The C<interval> is a hint on how quickly a change is expected to\nbe detected and should normally be specified as C<0> to let libev choose\na suitable value. The memory pointed to by C<path> must point to the same\npath for as long as the watcher is active.\n\nThe callback will receive an C<EV_STAT> event when a change was detected,\nrelative to the attributes at the time the watcher was started (or the\nlast change was detected).\n\n=item ev_stat_stat (loop, ev_stat *)\n\nUpdates the stat buffer immediately with new values. If you change the\nwatched path in your callback, you could call this function to avoid\ndetecting this change (while introducing a race condition if you are not\nthe only one changing the path). Can also be useful simply to find out the\nnew values.\n\n=item ev_statdata attr [read-only]\n\nThe most-recently detected attributes of the file. Although the type is\nC<ev_statdata>, this is usually the (or one of the) C<struct stat> types\nsuitable for your system, but you can only rely on the POSIX-standardised\nmembers to be present. If the C<st_nlink> member is C<0>, then there was\nsome error while C<stat>ing the file.\n\n=item ev_statdata prev [read-only]\n\nThe previous attributes of the file. The callback gets invoked whenever\nC<prev> != C<attr>, or, more precisely, one or more of these members\ndiffer: C<st_dev>, C<st_ino>, C<st_mode>, C<st_nlink>, C<st_uid>,\nC<st_gid>, C<st_rdev>, C<st_size>, C<st_atime>, C<st_mtime>, C<st_ctime>.\n\n=item ev_tstamp interval [read-only]\n\nThe specified interval.\n\n=item const char *path [read-only]\n\nThe file system path that is being watched.\n\n=back\n\n=head3 Examples\n\nExample: Watch C</etc/passwd> for attribute changes.\n\n   static void\n   passwd_cb (struct ev_loop *loop, ev_stat *w, int revents)\n   {\n     /* /etc/passwd changed in some way */\n     if (w->attr.st_nlink)\n       {\n         printf (\"passwd current size  %ld\\n\", (long)w->attr.st_size);\n         printf (\"passwd current atime %ld\\n\", (long)w->attr.st_mtime);\n         printf (\"passwd current mtime %ld\\n\", (long)w->attr.st_mtime);\n       }\n     else\n       /* you shalt not abuse printf for puts */\n       puts (\"wow, /etc/passwd is not there, expect problems. \"\n             \"if this is windows, they already arrived\\n\");\n   }\n\n   ...\n   ev_stat passwd;\n\n   ev_stat_init (&passwd, passwd_cb, \"/etc/passwd\", 0.);\n   ev_stat_start (loop, &passwd);\n\nExample: Like above, but additionally use a one-second delay so we do not\nmiss updates (however, frequent updates will delay processing, too, so\none might do the work both on C<ev_stat> callback invocation I<and> on\nC<ev_timer> callback invocation).\n\n   static ev_stat passwd;\n   static ev_timer timer;\n\n   static void\n   timer_cb (EV_P_ ev_timer *w, int revents)\n   {\n     ev_timer_stop (EV_A_ w);\n\n     /* now it's one second after the most recent passwd change */\n   }\n\n   static void\n   stat_cb (EV_P_ ev_stat *w, int revents)\n   {\n     /* reset the one-second timer */\n     ev_timer_again (EV_A_ &timer);\n   }\n\n   ...\n   ev_stat_init (&passwd, stat_cb, \"/etc/passwd\", 0.);\n   ev_stat_start (loop, &passwd);\n   ev_timer_init (&timer, timer_cb, 0., 1.02);\n\n\n=head2 C<ev_idle> - when you've got nothing better to do...\n\nIdle watchers trigger events when no other events of the same or higher\npriority are pending (prepare, check and other idle watchers do not count\nas receiving \"events\").\n\nThat is, as long as your process is busy handling sockets or timeouts\n(or even signals, imagine) of the same or higher priority it will not be\ntriggered. But when your process is idle (or only lower-priority watchers\nare pending), the idle watchers are being called once per event loop\niteration - until stopped, that is, or your process receives more events\nand becomes busy again with higher priority stuff.\n\nThe most noteworthy effect is that as long as any idle watchers are\nactive, the process will not block when waiting for new events.\n\nApart from keeping your process non-blocking (which is a useful\neffect on its own sometimes), idle watchers are a good place to do\n\"pseudo-background processing\", or delay processing stuff to after the\nevent loop has handled all outstanding events.\n\n=head3 Abusing an C<ev_idle> watcher for its side-effect\n\nAs long as there is at least one active idle watcher, libev will never\nsleep unnecessarily. Or in other words, it will loop as fast as possible.\nFor this to work, the idle watcher doesn't need to be invoked at all - the\nlowest priority will do.\n\nThis mode of operation can be useful together with an C<ev_check> watcher,\nto do something on each event loop iteration - for example to balance load\nbetween different connections.\n\nSee L</Abusing an ev_check watcher for its side-effect> for a longer\nexample.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_idle_init (ev_idle *, callback)\n\nInitialises and configures the idle watcher - it has no parameters of any\nkind. There is a C<ev_idle_set> macro, but using it is utterly pointless,\nbelieve me.\n\n=back\n\n=head3 Examples\n\nExample: Dynamically allocate an C<ev_idle> watcher, start it, and in the\ncallback, free it. Also, use no error checking, as usual.\n\n   static void\n   idle_cb (struct ev_loop *loop, ev_idle *w, int revents)\n   {\n     // stop the watcher\n     ev_idle_stop (loop, w);\n\n     // now we can free it\n     free (w);\n\n     // now do something you wanted to do when the program has\n     // no longer anything immediate to do.\n   }\n\n   ev_idle *idle_watcher = malloc (sizeof (ev_idle));\n   ev_idle_init (idle_watcher, idle_cb);\n   ev_idle_start (loop, idle_watcher);\n\n\n=head2 C<ev_prepare> and C<ev_check> - customise your event loop!\n\nPrepare and check watchers are often (but not always) used in pairs:\nprepare watchers get invoked before the process blocks and check watchers\nafterwards.\n\nYou I<must not> call C<ev_run> (or similar functions that enter the\ncurrent event loop) or C<ev_loop_fork> from either C<ev_prepare> or\nC<ev_check> watchers. Other loops than the current one are fine,\nhowever. The rationale behind this is that you do not need to check\nfor recursion in those watchers, i.e. the sequence will always be\nC<ev_prepare>, blocking, C<ev_check> so if you have one watcher of each\nkind they will always be called in pairs bracketing the blocking call.\n\nTheir main purpose is to integrate other event mechanisms into libev and\ntheir use is somewhat advanced. They could be used, for example, to track\nvariable changes, implement your own watchers, integrate net-snmp or a\ncoroutine library and lots more. They are also occasionally useful if\nyou cache some data and want to flush it before blocking (for example,\nin X programs you might want to do an C<XFlush ()> in an C<ev_prepare>\nwatcher).\n\nThis is done by examining in each prepare call which file descriptors\nneed to be watched by the other library, registering C<ev_io> watchers\nfor them and starting an C<ev_timer> watcher for any timeouts (many\nlibraries provide exactly this functionality). Then, in the check watcher,\nyou check for any events that occurred (by checking the pending status\nof all watchers and stopping them) and call back into the library. The\nI/O and timer callbacks will never actually be called (but must be valid\nnevertheless, because you never know, you know?).\n\nAs another example, the Perl Coro module uses these hooks to integrate\ncoroutines into libev programs, by yielding to other active coroutines\nduring each prepare and only letting the process block if no coroutines\nare ready to run (it's actually more complicated: it only runs coroutines\nwith priority higher than or equal to the event loop and one coroutine\nof lower priority, but only once, using idle watchers to keep the event\nloop from blocking if lower-priority coroutines are active, thus mapping\nlow-priority coroutines to idle/background tasks).\n\nWhen used for this purpose, it is recommended to give C<ev_check> watchers\nhighest (C<EV_MAXPRI>) priority, to ensure that they are being run before\nany other watchers after the poll (this doesn't matter for C<ev_prepare>\nwatchers).\n\nAlso, C<ev_check> watchers (and C<ev_prepare> watchers, too) should not\nactivate (\"feed\") events into libev. While libev fully supports this, they\nmight get executed before other C<ev_check> watchers did their job. As\nC<ev_check> watchers are often used to embed other (non-libev) event\nloops those other event loops might be in an unusable state until their\nC<ev_check> watcher ran (always remind yourself to coexist peacefully with\nothers).\n\n=head3 Abusing an C<ev_check> watcher for its side-effect\n\nC<ev_check> (and less often also C<ev_prepare>) watchers can also be\nuseful because they are called once per event loop iteration. For\nexample, if you want to handle a large number of connections fairly, you\nnormally only do a bit of work for each active connection, and if there\nis more work to do, you wait for the next event loop iteration, so other\nconnections have a chance of making progress.\n\nUsing an C<ev_check> watcher is almost enough: it will be called on the\nnext event loop iteration. However, that isn't as soon as possible -\nwithout external events, your C<ev_check> watcher will not be invoked.\n\nThis is where C<ev_idle> watchers come in handy - all you need is a\nsingle global idle watcher that is active as long as you have one active\nC<ev_check> watcher. The C<ev_idle> watcher makes sure the event loop\nwill not sleep, and the C<ev_check> watcher makes sure a callback gets\ninvoked. Neither watcher alone can do that.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_prepare_init (ev_prepare *, callback)\n\n=item ev_check_init (ev_check *, callback)\n\nInitialises and configures the prepare or check watcher - they have no\nparameters of any kind. There are C<ev_prepare_set> and C<ev_check_set>\nmacros, but using them is utterly, utterly, utterly and completely\npointless.\n\n=back\n\n=head3 Examples\n\nThere are a number of principal ways to embed other event loops or modules\ninto libev. Here are some ideas on how to include libadns into libev\n(there is a Perl module named C<EV::ADNS> that does this, which you could\nuse as a working example. Another Perl module named C<EV::Glib> embeds a\nGlib main context into libev, and finally, C<Glib::EV> embeds EV into the\nGlib event loop).\n\nMethod 1: Add IO watchers and a timeout watcher in a prepare handler,\nand in a check watcher, destroy them and call into libadns. What follows\nis pseudo-code only of course. This requires you to either use a low\npriority for the check watcher or use C<ev_clear_pending> explicitly, as\nthe callbacks for the IO/timeout watchers might not have been called yet.\n\n   static ev_io iow [nfd];\n   static ev_timer tw;\n\n   static void\n   io_cb (struct ev_loop *loop, ev_io *w, int revents)\n   {\n   }\n\n   // create io watchers for each fd and a timer before blocking\n   static void\n   adns_prepare_cb (struct ev_loop *loop, ev_prepare *w, int revents)\n   {\n     int timeout = 3600000;\n     struct pollfd fds [nfd];\n     // actual code will need to loop here and realloc etc.\n     adns_beforepoll (ads, fds, &nfd, &timeout, timeval_from (ev_time ()));\n\n     /* the callback is illegal, but won't be called as we stop during check */\n     ev_timer_init (&tw, 0, timeout * 1e-3, 0.);\n     ev_timer_start (loop, &tw);\n\n     // create one ev_io per pollfd\n     for (int i = 0; i < nfd; ++i)\n       {\n         ev_io_init (iow + i, io_cb, fds [i].fd,\n           ((fds [i].events & POLLIN ? EV_READ : 0)\n            | (fds [i].events & POLLOUT ? EV_WRITE : 0)));\n\n         fds [i].revents = 0;\n         ev_io_start (loop, iow + i);\n       }\n   }\n\n   // stop all watchers after blocking\n   static void\n   adns_check_cb (struct ev_loop *loop, ev_check *w, int revents)\n   {\n     ev_timer_stop (loop, &tw);\n\n     for (int i = 0; i < nfd; ++i)\n       {\n         // set the relevant poll flags\n         // could also call adns_processreadable etc. here\n         struct pollfd *fd = fds + i;\n         int revents = ev_clear_pending (iow + i);\n         if (revents & EV_READ ) fd->revents |= fd->events & POLLIN;\n         if (revents & EV_WRITE) fd->revents |= fd->events & POLLOUT;\n\n         // now stop the watcher\n         ev_io_stop (loop, iow + i);\n       }\n\n     adns_afterpoll (adns, fds, nfd, timeval_from (ev_now (loop));\n   }\n\nMethod 2: This would be just like method 1, but you run C<adns_afterpoll>\nin the prepare watcher and would dispose of the check watcher.\n\nMethod 3: If the module to be embedded supports explicit event\nnotification (libadns does), you can also make use of the actual watcher\ncallbacks, and only destroy/create the watchers in the prepare watcher.\n\n   static void\n   timer_cb (EV_P_ ev_timer *w, int revents)\n   {\n     adns_state ads = (adns_state)w->data;\n     update_now (EV_A);\n\n     adns_processtimeouts (ads, &tv_now);\n   }\n\n   static void\n   io_cb (EV_P_ ev_io *w, int revents)\n   {\n     adns_state ads = (adns_state)w->data;\n     update_now (EV_A);\n\n     if (revents & EV_READ ) adns_processreadable  (ads, w->fd, &tv_now);\n     if (revents & EV_WRITE) adns_processwriteable (ads, w->fd, &tv_now);\n   }\n\n   // do not ever call adns_afterpoll\n\nMethod 4: Do not use a prepare or check watcher because the module you\nwant to embed is not flexible enough to support it. Instead, you can\noverride their poll function. The drawback with this solution is that the\nmain loop is now no longer controllable by EV. The C<Glib::EV> module uses\nthis approach, effectively embedding EV as a client into the horrible\nlibglib event loop.\n\n   static gint\n   event_poll_func (GPollFD *fds, guint nfds, gint timeout)\n   {\n     int got_events = 0;\n\n     for (n = 0; n < nfds; ++n)\n       // create/start io watcher that sets the relevant bits in fds[n] and increment got_events\n\n     if (timeout >= 0)\n       // create/start timer\n\n     // poll\n     ev_run (EV_A_ 0);\n\n     // stop timer again\n     if (timeout >= 0)\n       ev_timer_stop (EV_A_ &to);\n\n     // stop io watchers again - their callbacks should have set\n     for (n = 0; n < nfds; ++n)\n       ev_io_stop (EV_A_ iow [n]);\n\n     return got_events;\n   }\n\n\n=head2 C<ev_embed> - when one backend isn't enough...\n\nThis is a rather advanced watcher type that lets you embed one event loop\ninto another (currently only C<ev_io> events are supported in the embedded\nloop, other types of watchers might be handled in a delayed or incorrect\nfashion and must not be used).\n\nThere are primarily two reasons you would want that: work around bugs and\nprioritise I/O.\n\nAs an example for a bug workaround, the kqueue backend might only support\nsockets on some platform, so it is unusable as generic backend, but you\nstill want to make use of it because you have many sockets and it scales\nso nicely. In this case, you would create a kqueue-based loop and embed\nit into your default loop (which might use e.g. poll). Overall operation\nwill be a bit slower because first libev has to call C<poll> and then\nC<kevent>, but at least you can use both mechanisms for what they are\nbest: C<kqueue> for scalable sockets and C<poll> if you want it to work :)\n\nAs for prioritising I/O: under rare circumstances you have the case where\nsome fds have to be watched and handled very quickly (with low latency),\nand even priorities and idle watchers might have too much overhead. In\nthis case you would put all the high priority stuff in one loop and all\nthe rest in a second one, and embed the second one in the first.\n\nAs long as the watcher is active, the callback will be invoked every\ntime there might be events pending in the embedded loop. The callback\nmust then call C<ev_embed_sweep (mainloop, watcher)> to make a single\nsweep and invoke their callbacks (the callback doesn't need to invoke the\nC<ev_embed_sweep> function directly, it could also start an idle watcher\nto give the embedded loop strictly lower priority for example).\n\nYou can also set the callback to C<0>, in which case the embed watcher\nwill automatically execute the embedded loop sweep whenever necessary.\n\nFork detection will be handled transparently while the C<ev_embed> watcher\nis active, i.e., the embedded loop will automatically be forked when the\nembedding loop forks. In other cases, the user is responsible for calling\nC<ev_loop_fork> on the embedded loop.\n\nUnfortunately, not all backends are embeddable: only the ones returned by\nC<ev_embeddable_backends> are, which, unfortunately, does not include any\nportable one.\n\nSo when you want to use this feature you will always have to be prepared\nthat you cannot get an embeddable loop. The recommended way to get around\nthis is to have a separate variables for your embeddable loop, try to\ncreate it, and if that fails, use the normal loop for everything.\n\n=head3 C<ev_embed> and fork\n\nWhile the C<ev_embed> watcher is running, forks in the embedding loop will\nautomatically be applied to the embedded loop as well, so no special\nfork handling is required in that case. When the watcher is not running,\nhowever, it is still the task of the libev user to call C<ev_loop_fork ()>\nas applicable.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_embed_init (ev_embed *, callback, struct ev_loop *embedded_loop)\n\n=item ev_embed_set (ev_embed *, struct ev_loop *embedded_loop)\n\nConfigures the watcher to embed the given loop, which must be\nembeddable. If the callback is C<0>, then C<ev_embed_sweep> will be\ninvoked automatically, otherwise it is the responsibility of the callback\nto invoke it (it will continue to be called until the sweep has been done,\nif you do not want that, you need to temporarily stop the embed watcher).\n\n=item ev_embed_sweep (loop, ev_embed *)\n\nMake a single, non-blocking sweep over the embedded loop. This works\nsimilarly to C<ev_run (embedded_loop, EVRUN_NOWAIT)>, but in the most\nappropriate way for embedded loops.\n\n=item struct ev_loop *other [read-only]\n\nThe embedded event loop.\n\n=back\n\n=head3 Examples\n\nExample: Try to get an embeddable event loop and embed it into the default\nevent loop. If that is not possible, use the default loop. The default\nloop is stored in C<loop_hi>, while the embeddable loop is stored in\nC<loop_lo> (which is C<loop_hi> in the case no embeddable loop can be\nused).\n\n   struct ev_loop *loop_hi = ev_default_init (0);\n   struct ev_loop *loop_lo = 0;\n   ev_embed embed;\n\n   // see if there is a chance of getting one that works\n   // (remember that a flags value of 0 means autodetection)\n   loop_lo = ev_embeddable_backends () & ev_recommended_backends ()\n     ? ev_loop_new (ev_embeddable_backends () & ev_recommended_backends ())\n     : 0;\n\n   // if we got one, then embed it, otherwise default to loop_hi\n   if (loop_lo)\n     {\n       ev_embed_init (&embed, 0, loop_lo);\n       ev_embed_start (loop_hi, &embed);\n     }\n   else\n     loop_lo = loop_hi;\n\nExample: Check if kqueue is available but not recommended and create\na kqueue backend for use with sockets (which usually work with any\nkqueue implementation). Store the kqueue/socket-only event loop in\nC<loop_socket>. (One might optionally use C<EVFLAG_NOENV>, too).\n\n   struct ev_loop *loop = ev_default_init (0);\n   struct ev_loop *loop_socket = 0;\n   ev_embed embed;\n\n   if (ev_supported_backends () & ~ev_recommended_backends () & EVBACKEND_KQUEUE)\n     if ((loop_socket = ev_loop_new (EVBACKEND_KQUEUE))\n       {\n         ev_embed_init (&embed, 0, loop_socket);\n         ev_embed_start (loop, &embed);\n       }\n\n   if (!loop_socket)\n     loop_socket = loop;\n\n   // now use loop_socket for all sockets, and loop for everything else\n\n\n=head2 C<ev_fork> - the audacity to resume the event loop after a fork\n\nFork watchers are called when a C<fork ()> was detected (usually because\nwhoever is a good citizen cared to tell libev about it by calling\nC<ev_loop_fork>). The invocation is done before the event loop blocks next\nand before C<ev_check> watchers are being called, and only in the child\nafter the fork. If whoever good citizen calling C<ev_default_fork> cheats\nand calls it in the wrong process, the fork handlers will be invoked, too,\nof course.\n\n=head3 The special problem of life after fork - how is it possible?\n\nMost uses of C<fork ()> consist of forking, then some simple calls to set\nup/change the process environment, followed by a call to C<exec()>. This\nsequence should be handled by libev without any problems.\n\nThis changes when the application actually wants to do event handling\nin the child, or both parent in child, in effect \"continuing\" after the\nfork.\n\nThe default mode of operation (for libev, with application help to detect\nforks) is to duplicate all the state in the child, as would be expected\nwhen I<either> the parent I<or> the child process continues.\n\nWhen both processes want to continue using libev, then this is usually the\nwrong result. In that case, usually one process (typically the parent) is\nsupposed to continue with all watchers in place as before, while the other\nprocess typically wants to start fresh, i.e. without any active watchers.\n\nThe cleanest and most efficient way to achieve that with libev is to\nsimply create a new event loop, which of course will be \"empty\", and\nuse that for new watchers. This has the advantage of not touching more\nmemory than necessary, and thus avoiding the copy-on-write, and the\ndisadvantage of having to use multiple event loops (which do not support\nsignal watchers).\n\nWhen this is not possible, or you want to use the default loop for\nother reasons, then in the process that wants to start \"fresh\", call\nC<ev_loop_destroy (EV_DEFAULT)> followed by C<ev_default_loop (...)>.\nDestroying the default loop will \"orphan\" (not stop) all registered\nwatchers, so you have to be careful not to execute code that modifies\nthose watchers. Note also that in that case, you have to re-register any\nsignal watchers.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_fork_init (ev_fork *, callback)\n\nInitialises and configures the fork watcher - it has no parameters of any\nkind. There is a C<ev_fork_set> macro, but using it is utterly pointless,\nreally.\n\n=back\n\n\n=head2 C<ev_cleanup> - even the best things end\n\nCleanup watchers are called just before the event loop is being destroyed\nby a call to C<ev_loop_destroy>.\n\nWhile there is no guarantee that the event loop gets destroyed, cleanup\nwatchers provide a convenient method to install cleanup hooks for your\nprogram, worker threads and so on - you just to make sure to destroy the\nloop when you want them to be invoked.\n\nCleanup watchers are invoked in the same way as any other watcher. Unlike\nall other watchers, they do not keep a reference to the event loop (which\nmakes a lot of sense if you think about it). Like all other watchers, you\ncan call libev functions in the callback, except C<ev_cleanup_start>.\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_cleanup_init (ev_cleanup *, callback)\n\nInitialises and configures the cleanup watcher - it has no parameters of\nany kind. There is a C<ev_cleanup_set> macro, but using it is utterly\npointless, I assure you.\n\n=back\n\nExample: Register an atexit handler to destroy the default loop, so any\ncleanup functions are called.\n\n   static void\n   program_exits (void)\n   {\n     ev_loop_destroy (EV_DEFAULT_UC);\n   }\n\n   ...\n   atexit (program_exits);\n\n\n=head2 C<ev_async> - how to wake up an event loop\n\nIn general, you cannot use an C<ev_loop> from multiple threads or other\nasynchronous sources such as signal handlers (as opposed to multiple event\nloops - those are of course safe to use in different threads).\n\nSometimes, however, you need to wake up an event loop you do not control,\nfor example because it belongs to another thread. This is what C<ev_async>\nwatchers do: as long as the C<ev_async> watcher is active, you can signal\nit by calling C<ev_async_send>, which is thread- and signal safe.\n\nThis functionality is very similar to C<ev_signal> watchers, as signals,\ntoo, are asynchronous in nature, and signals, too, will be compressed\n(i.e. the number of callback invocations may be less than the number of\nC<ev_async_send> calls). In fact, you could use signal watchers as a kind\nof \"global async watchers\" by using a watcher on an otherwise unused\nsignal, and C<ev_feed_signal> to signal this watcher from another thread,\neven without knowing which loop owns the signal.\n\n=head3 Queueing\n\nC<ev_async> does not support queueing of data in any way. The reason\nis that the author does not know of a simple (or any) algorithm for a\nmultiple-writer-single-reader queue that works in all cases and doesn't\nneed elaborate support such as pthreads or unportable memory access\nsemantics.\n\nThat means that if you want to queue data, you have to provide your own\nqueue. But at least I can tell you how to implement locking around your\nqueue:\n\n=over 4\n\n=item queueing from a signal handler context\n\nTo implement race-free queueing, you simply add to the queue in the signal\nhandler but you block the signal handler in the watcher callback. Here is\nan example that does that for some fictitious SIGUSR1 handler:\n\n   static ev_async mysig;\n\n   static void\n   sigusr1_handler (void)\n   {\n     sometype data;\n\n     // no locking etc.\n     queue_put (data);\n     ev_async_send (EV_DEFAULT_ &mysig);\n   }\n\n   static void\n   mysig_cb (EV_P_ ev_async *w, int revents)\n   {\n     sometype data;\n     sigset_t block, prev;\n\n     sigemptyset (&block);\n     sigaddset (&block, SIGUSR1);\n     sigprocmask (SIG_BLOCK, &block, &prev);\n\n     while (queue_get (&data))\n       process (data);\n\n     if (sigismember (&prev, SIGUSR1)\n       sigprocmask (SIG_UNBLOCK, &block, 0);\n   }\n\n(Note: pthreads in theory requires you to use C<pthread_setmask>\ninstead of C<sigprocmask> when you use threads, but libev doesn't do it\neither...).\n\n=item queueing from a thread context\n\nThe strategy for threads is different, as you cannot (easily) block\nthreads but you can easily preempt them, so to queue safely you need to\nemploy a traditional mutex lock, such as in this pthread example:\n\n   static ev_async mysig;\n   static pthread_mutex_t mymutex = PTHREAD_MUTEX_INITIALIZER;\n\n   static void\n   otherthread (void)\n   {\n     // only need to lock the actual queueing operation\n     pthread_mutex_lock (&mymutex);\n     queue_put (data);\n     pthread_mutex_unlock (&mymutex);\n\n     ev_async_send (EV_DEFAULT_ &mysig);\n   }\n\n   static void\n   mysig_cb (EV_P_ ev_async *w, int revents)\n   {\n     pthread_mutex_lock (&mymutex);\n\n     while (queue_get (&data))\n       process (data);\n\n     pthread_mutex_unlock (&mymutex);\n   }\n\n=back\n\n\n=head3 Watcher-Specific Functions and Data Members\n\n=over 4\n\n=item ev_async_init (ev_async *, callback)\n\nInitialises and configures the async watcher - it has no parameters of any\nkind. There is a C<ev_async_set> macro, but using it is utterly pointless,\ntrust me.\n\n=item ev_async_send (loop, ev_async *)\n\nSends/signals/activates the given C<ev_async> watcher, that is, feeds\nan C<EV_ASYNC> event on the watcher into the event loop, and instantly\nreturns.\n\nUnlike C<ev_feed_event>, this call is safe to do from other threads,\nsignal or similar contexts (see the discussion of C<EV_ATOMIC_T> in the\nembedding section below on what exactly this means).\n\nNote that, as with other watchers in libev, multiple events might get\ncompressed into a single callback invocation (another way to look at\nthis is that C<ev_async> watchers are level-triggered: they are set on\nC<ev_async_send>, reset when the event loop detects that).\n\nThis call incurs the overhead of at most one extra system call per event\nloop iteration, if the event loop is blocked, and no syscall at all if\nthe event loop (or your program) is processing events. That means that\nrepeated calls are basically free (there is no need to avoid calls for\nperformance reasons) and that the overhead becomes smaller (typically\nzero) under load.\n\n=item bool = ev_async_pending (ev_async *)\n\nReturns a non-zero value when C<ev_async_send> has been called on the\nwatcher but the event has not yet been processed (or even noted) by the\nevent loop.\n\nC<ev_async_send> sets a flag in the watcher and wakes up the loop. When\nthe loop iterates next and checks for the watcher to have become active,\nit will reset the flag again. C<ev_async_pending> can be used to very\nquickly check whether invoking the loop might be a good idea.\n\nNot that this does I<not> check whether the watcher itself is pending,\nonly whether it has been requested to make this watcher pending: there\nis a time window between the event loop checking and resetting the async\nnotification, and the callback being invoked.\n\n=back\n\n\n=head1 OTHER FUNCTIONS\n\nThere are some other functions of possible interest. Described. Here. Now.\n\n=over 4\n\n=item ev_once (loop, int fd, int events, ev_tstamp timeout, callback)\n\nThis function combines a simple timer and an I/O watcher, calls your\ncallback on whichever event happens first and automatically stops both\nwatchers. This is useful if you want to wait for a single event on an fd\nor timeout without having to allocate/configure/start/stop/free one or\nmore watchers yourself.\n\nIf C<fd> is less than 0, then no I/O watcher will be started and the\nC<events> argument is being ignored. Otherwise, an C<ev_io> watcher for\nthe given C<fd> and C<events> set will be created and started.\n\nIf C<timeout> is less than 0, then no timeout watcher will be\nstarted. Otherwise an C<ev_timer> watcher with after = C<timeout> (and\nrepeat = 0) will be started. C<0> is a valid timeout.\n\nThe callback has the type C<void (*cb)(int revents, void *arg)> and is\npassed an C<revents> set like normal event callbacks (a combination of\nC<EV_ERROR>, C<EV_READ>, C<EV_WRITE> or C<EV_TIMER>) and the C<arg>\nvalue passed to C<ev_once>. Note that it is possible to receive I<both>\na timeout and an io event at the same time - you probably should give io\nevents precedence.\n\nExample: wait up to ten seconds for data to appear on STDIN_FILENO.\n\n   static void stdin_ready (int revents, void *arg)\n   {\n     if (revents & EV_READ)\n       /* stdin might have data for us, joy! */;\n     else if (revents & EV_TIMER)\n       /* doh, nothing entered */;\n   }\n\n   ev_once (STDIN_FILENO, EV_READ, 10., stdin_ready, 0);\n\n=item ev_feed_fd_event (loop, int fd, int revents)\n\nFeed an event on the given fd, as if a file descriptor backend detected\nthe given events.\n\n=item ev_feed_signal_event (loop, int signum)\n\nFeed an event as if the given signal occurred. See also C<ev_feed_signal>,\nwhich is async-safe.\n\n=back\n\n\n=head1 COMMON OR USEFUL IDIOMS (OR BOTH)\n\nThis section explains some common idioms that are not immediately\nobvious. Note that examples are sprinkled over the whole manual, and this\nsection only contains stuff that wouldn't fit anywhere else.\n\n=head2 ASSOCIATING CUSTOM DATA WITH A WATCHER\n\nEach watcher has, by default, a C<void *data> member that you can read\nor modify at any time: libev will completely ignore it. This can be used\nto associate arbitrary data with your watcher. If you need more data and\ndon't want to allocate memory separately and store a pointer to it in that\ndata member, you can also \"subclass\" the watcher type and provide your own\ndata:\n\n   struct my_io\n   {\n     ev_io io;\n     int otherfd;\n     void *somedata;\n     struct whatever *mostinteresting;\n   };\n\n   ...\n   struct my_io w;\n   ev_io_init (&w.io, my_cb, fd, EV_READ);\n\nAnd since your callback will be called with a pointer to the watcher, you\ncan cast it back to your own type:\n\n   static void my_cb (struct ev_loop *loop, ev_io *w_, int revents)\n   {\n     struct my_io *w = (struct my_io *)w_;\n     ...\n   }\n\nMore interesting and less C-conformant ways of casting your callback\nfunction type instead have been omitted.\n\n=head2 BUILDING YOUR OWN COMPOSITE WATCHERS\n\nAnother common scenario is to use some data structure with multiple\nembedded watchers, in effect creating your own watcher that combines\nmultiple libev event sources into one \"super-watcher\":\n\n   struct my_biggy\n   {\n     int some_data;\n     ev_timer t1;\n     ev_timer t2;\n   }\n\nIn this case getting the pointer to C<my_biggy> is a bit more\ncomplicated: Either you store the address of your C<my_biggy> struct in\nthe C<data> member of the watcher (for woozies or C++ coders), or you need\nto use some pointer arithmetic using C<offsetof> inside your watchers (for\nreal programmers):\n\n   #include <stddef.h>\n\n   static void\n   t1_cb (EV_P_ ev_timer *w, int revents)\n   {\n     struct my_biggy big = (struct my_biggy *)\n       (((char *)w) - offsetof (struct my_biggy, t1));\n   }\n\n   static void\n   t2_cb (EV_P_ ev_timer *w, int revents)\n   {\n     struct my_biggy big = (struct my_biggy *)\n       (((char *)w) - offsetof (struct my_biggy, t2));\n   }\n\n=head2 AVOIDING FINISHING BEFORE RETURNING\n\nOften you have structures like this in event-based programs:\n\n  callback ()\n  {\n    free (request);\n  }\n\n  request = start_new_request (..., callback);\n\nThe intent is to start some \"lengthy\" operation. The C<request> could be\nused to cancel the operation, or do other things with it.\n\nIt's not uncommon to have code paths in C<start_new_request> that\nimmediately invoke the callback, for example, to report errors. Or you add\nsome caching layer that finds that it can skip the lengthy aspects of the\noperation and simply invoke the callback with the result.\n\nThe problem here is that this will happen I<before> C<start_new_request>\nhas returned, so C<request> is not set.\n\nEven if you pass the request by some safer means to the callback, you\nmight want to do something to the request after starting it, such as\ncanceling it, which probably isn't working so well when the callback has\nalready been invoked.\n\nA common way around all these issues is to make sure that\nC<start_new_request> I<always> returns before the callback is invoked. If\nC<start_new_request> immediately knows the result, it can artificially\ndelay invoking the callback by using a C<prepare> or C<idle> watcher for\nexample, or more sneakily, by reusing an existing (stopped) watcher and\npushing it into the pending queue:\n\n   ev_set_cb (watcher, callback);\n   ev_feed_event (EV_A_ watcher, 0);\n\nThis way, C<start_new_request> can safely return before the callback is\ninvoked, while not delaying callback invocation too much.\n\n=head2 MODEL/NESTED EVENT LOOP INVOCATIONS AND EXIT CONDITIONS\n\nOften (especially in GUI toolkits) there are places where you have\nI<modal> interaction, which is most easily implemented by recursively\ninvoking C<ev_run>.\n\nThis brings the problem of exiting - a callback might want to finish the\nmain C<ev_run> call, but not the nested one (e.g. user clicked \"Quit\", but\na modal \"Are you sure?\" dialog is still waiting), or just the nested one\nand not the main one (e.g. user clocked \"Ok\" in a modal dialog), or some\nother combination: In these cases, a simple C<ev_break> will not work.\n\nThe solution is to maintain \"break this loop\" variable for each C<ev_run>\ninvocation, and use a loop around C<ev_run> until the condition is\ntriggered, using C<EVRUN_ONCE>:\n\n   // main loop\n   int exit_main_loop = 0;\n\n   while (!exit_main_loop)\n     ev_run (EV_DEFAULT_ EVRUN_ONCE);\n\n   // in a modal watcher\n   int exit_nested_loop = 0;\n\n   while (!exit_nested_loop)\n     ev_run (EV_A_ EVRUN_ONCE);\n\nTo exit from any of these loops, just set the corresponding exit variable:\n\n   // exit modal loop\n   exit_nested_loop = 1;\n\n   // exit main program, after modal loop is finished\n   exit_main_loop = 1;\n\n   // exit both\n   exit_main_loop = exit_nested_loop = 1;\n\n=head2 THREAD LOCKING EXAMPLE\n\nHere is a fictitious example of how to run an event loop in a different\nthread from where callbacks are being invoked and watchers are\ncreated/added/removed.\n\nFor a real-world example, see the C<EV::Loop::Async> perl module,\nwhich uses exactly this technique (which is suited for many high-level\nlanguages).\n\nThe example uses a pthread mutex to protect the loop data, a condition\nvariable to wait for callback invocations, an async watcher to notify the\nevent loop thread and an unspecified mechanism to wake up the main thread.\n\nFirst, you need to associate some data with the event loop:\n\n   typedef struct {\n     mutex_t lock; /* global loop lock */\n     ev_async async_w;\n     thread_t tid;\n     cond_t invoke_cv;\n   } userdata;\n\n   void prepare_loop (EV_P)\n   {\n      // for simplicity, we use a static userdata struct.\n      static userdata u;\n\n      ev_async_init (&u->async_w, async_cb);\n      ev_async_start (EV_A_ &u->async_w);\n\n      pthread_mutex_init (&u->lock, 0);\n      pthread_cond_init (&u->invoke_cv, 0);\n\n      // now associate this with the loop\n      ev_set_userdata (EV_A_ u);\n      ev_set_invoke_pending_cb (EV_A_ l_invoke);\n      ev_set_loop_release_cb (EV_A_ l_release, l_acquire);\n\n      // then create the thread running ev_run\n      pthread_create (&u->tid, 0, l_run, EV_A);\n   }\n\nThe callback for the C<ev_async> watcher does nothing: the watcher is used\nsolely to wake up the event loop so it takes notice of any new watchers\nthat might have been added:\n\n   static void\n   async_cb (EV_P_ ev_async *w, int revents)\n   {\n      // just used for the side effects\n   }\n\nThe C<l_release> and C<l_acquire> callbacks simply unlock/lock the mutex\nprotecting the loop data, respectively.\n\n   static void\n   l_release (EV_P)\n   {\n     userdata *u = ev_userdata (EV_A);\n     pthread_mutex_unlock (&u->lock);\n   }\n\n   static void\n   l_acquire (EV_P)\n   {\n     userdata *u = ev_userdata (EV_A);\n     pthread_mutex_lock (&u->lock);\n   }\n\nThe event loop thread first acquires the mutex, and then jumps straight\ninto C<ev_run>:\n\n   void *\n   l_run (void *thr_arg)\n   {\n     struct ev_loop *loop = (struct ev_loop *)thr_arg;\n\n     l_acquire (EV_A);\n     pthread_setcanceltype (PTHREAD_CANCEL_ASYNCHRONOUS, 0);\n     ev_run (EV_A_ 0);\n     l_release (EV_A);\n\n     return 0;\n   }\n\nInstead of invoking all pending watchers, the C<l_invoke> callback will\nsignal the main thread via some unspecified mechanism (signals? pipe\nwrites? C<Async::Interrupt>?) and then waits until all pending watchers\nhave been called (in a while loop because a) spurious wakeups are possible\nand b) skipping inter-thread-communication when there are no pending\nwatchers is very beneficial):\n\n   static void\n   l_invoke (EV_P)\n   {\n     userdata *u = ev_userdata (EV_A);\n\n     while (ev_pending_count (EV_A))\n       {\n         wake_up_other_thread_in_some_magic_or_not_so_magic_way ();\n         pthread_cond_wait (&u->invoke_cv, &u->lock);\n       }\n   }\n\nNow, whenever the main thread gets told to invoke pending watchers, it\nwill grab the lock, call C<ev_invoke_pending> and then signal the loop\nthread to continue:\n\n   static void\n   real_invoke_pending (EV_P)\n   {\n     userdata *u = ev_userdata (EV_A);\n\n     pthread_mutex_lock (&u->lock);\n     ev_invoke_pending (EV_A);\n     pthread_cond_signal (&u->invoke_cv);\n     pthread_mutex_unlock (&u->lock);\n   }\n\nWhenever you want to start/stop a watcher or do other modifications to an\nevent loop, you will now have to lock:\n\n   ev_timer timeout_watcher;\n   userdata *u = ev_userdata (EV_A);\n\n   ev_timer_init (&timeout_watcher, timeout_cb, 5.5, 0.);\n\n   pthread_mutex_lock (&u->lock);\n   ev_timer_start (EV_A_ &timeout_watcher);\n   ev_async_send (EV_A_ &u->async_w);\n   pthread_mutex_unlock (&u->lock);\n\nNote that sending the C<ev_async> watcher is required because otherwise\nan event loop currently blocking in the kernel will have no knowledge\nabout the newly added timer. By waking up the loop it will pick up any new\nwatchers in the next event loop iteration.\n\n=head2 THREADS, COROUTINES, CONTINUATIONS, QUEUES... INSTEAD OF CALLBACKS\n\nWhile the overhead of a callback that e.g. schedules a thread is small, it\nis still an overhead. If you embed libev, and your main usage is with some\nkind of threads or coroutines, you might want to customise libev so that\ndoesn't need callbacks anymore.\n\nImagine you have coroutines that you can switch to using a function\nC<switch_to (coro)>, that libev runs in a coroutine called C<libev_coro>\nand that due to some magic, the currently active coroutine is stored in a\nglobal called C<current_coro>. Then you can build your own \"wait for libev\nevent\" primitive by changing C<EV_CB_DECLARE> and C<EV_CB_INVOKE> (note\nthe differing C<;> conventions):\n\n   #define EV_CB_DECLARE(type)   struct my_coro *cb;\n   #define EV_CB_INVOKE(watcher) switch_to ((watcher)->cb)\n\nThat means instead of having a C callback function, you store the\ncoroutine to switch to in each watcher, and instead of having libev call\nyour callback, you instead have it switch to that coroutine.\n\nA coroutine might now wait for an event with a function called\nC<wait_for_event>. (the watcher needs to be started, as always, but it doesn't\nmatter when, or whether the watcher is active or not when this function is\ncalled):\n\n   void\n   wait_for_event (ev_watcher *w)\n   {\n     ev_set_cb (w, current_coro);\n     switch_to (libev_coro);\n   }\n\nThat basically suspends the coroutine inside C<wait_for_event> and\ncontinues the libev coroutine, which, when appropriate, switches back to\nthis or any other coroutine.\n\nYou can do similar tricks if you have, say, threads with an event queue -\ninstead of storing a coroutine, you store the queue object and instead of\nswitching to a coroutine, you push the watcher onto the queue and notify\nany waiters.\n\nTo embed libev, see L</EMBEDDING>, but in short, it's easiest to create two\nfiles, F<my_ev.h> and F<my_ev.c> that include the respective libev files:\n\n   // my_ev.h\n   #define EV_CB_DECLARE(type)   struct my_coro *cb;\n   #define EV_CB_INVOKE(watcher) switch_to ((watcher)->cb)\n   #include \"../libev/ev.h\"\n\n   // my_ev.c\n   #define EV_H \"my_ev.h\"\n   #include \"../libev/ev.c\"\n\nAnd then use F<my_ev.h> when you would normally use F<ev.h>, and compile\nF<my_ev.c> into your project. When properly specifying include paths, you\ncan even use F<ev.h> as header file name directly.\n\n\n=head1 LIBEVENT EMULATION\n\nLibev offers a compatibility emulation layer for libevent. It cannot\nemulate the internals of libevent, so here are some usage hints:\n\n=over 4\n\n=item * Only the libevent-1.4.1-beta API is being emulated.\n\nThis was the newest libevent version available when libev was implemented,\nand is still mostly unchanged in 2010.\n\n=item * Use it by including <event.h>, as usual.\n\n=item * The following members are fully supported: ev_base, ev_callback,\nev_arg, ev_fd, ev_res, ev_events.\n\n=item * Avoid using ev_flags and the EVLIST_*-macros, while it is\nmaintained by libev, it does not work exactly the same way as in libevent (consider\nit a private API).\n\n=item * Priorities are not currently supported. Initialising priorities\nwill fail and all watchers will have the same priority, even though there\nis an ev_pri field.\n\n=item * In libevent, the last base created gets the signals, in libev, the\nbase that registered the signal gets the signals.\n\n=item * Other members are not supported.\n\n=item * The libev emulation is I<not> ABI compatible to libevent, you need\nto use the libev header file and library.\n\n=back\n\n=head1 C++ SUPPORT\n\n=head2 C API\n\nThe normal C API should work fine when used from C++: both ev.h and the\nlibev sources can be compiled as C++. Therefore, code that uses the C API\nwill work fine.\n\nProper exception specifications might have to be added to callbacks passed\nto libev: exceptions may be thrown only from watcher callbacks, all\nother callbacks (allocator, syserr, loop acquire/release and periodic\nreschedule callbacks) must not throw exceptions, and might need a C<throw\n()> specification. If you have code that needs to be compiled as both C\nand C++ you can use the C<EV_THROW> macro for this:\n\n   static void\n   fatal_error (const char *msg) EV_THROW\n   {\n     perror (msg);\n     abort ();\n   }\n\n   ...\n   ev_set_syserr_cb (fatal_error);\n\nThe only API functions that can currently throw exceptions are C<ev_run>,\nC<ev_invoke>, C<ev_invoke_pending> and C<ev_loop_destroy> (the latter\nbecause it runs cleanup watchers).\n\nThrowing exceptions in watcher callbacks is only supported if libev itself\nis compiled with a C++ compiler or your C and C++ environments allow\nthrowing exceptions through C libraries (most do).\n\n=head2 C++ API\n\nLibev comes with some simplistic wrapper classes for C++ that mainly allow\nyou to use some convenience methods to start/stop watchers and also change\nthe callback model to a model using method callbacks on objects.\n\nTo use it,\n\n   #include <ev++.h>\n\nThis automatically includes F<ev.h> and puts all of its definitions (many\nof them macros) into the global namespace. All C++ specific things are\nput into the C<ev> namespace. It should support all the same embedding\noptions as F<ev.h>, most notably C<EV_MULTIPLICITY>.\n\nCare has been taken to keep the overhead low. The only data member the C++\nclasses add (compared to plain C-style watchers) is the event loop pointer\nthat the watcher is associated with (or no additional members at all if\nyou disable C<EV_MULTIPLICITY> when embedding libev).\n\nCurrently, functions, static and non-static member functions and classes\nwith C<operator ()> can be used as callbacks. Other types should be easy\nto add as long as they only need one additional pointer for context. If\nyou need support for other types of functors please contact the author\n(preferably after implementing it).\n\nFor all this to work, your C++ compiler either has to use the same calling\nconventions as your C compiler (for static member functions), or you have\nto embed libev and compile libev itself as C++.\n\nHere is a list of things available in the C<ev> namespace:\n\n=over 4\n\n=item C<ev::READ>, C<ev::WRITE> etc.\n\nThese are just enum values with the same values as the C<EV_READ> etc.\nmacros from F<ev.h>.\n\n=item C<ev::tstamp>, C<ev::now>\n\nAliases to the same types/functions as with the C<ev_> prefix.\n\n=item C<ev::io>, C<ev::timer>, C<ev::periodic>, C<ev::idle>, C<ev::sig> etc.\n\nFor each C<ev_TYPE> watcher in F<ev.h> there is a corresponding class of\nthe same name in the C<ev> namespace, with the exception of C<ev_signal>\nwhich is called C<ev::sig> to avoid clashes with the C<signal> macro\ndefined by many implementations.\n\nAll of those classes have these methods:\n\n=over 4\n\n=item ev::TYPE::TYPE ()\n\n=item ev::TYPE::TYPE (loop)\n\n=item ev::TYPE::~TYPE\n\nThe constructor (optionally) takes an event loop to associate the watcher\nwith. If it is omitted, it will use C<EV_DEFAULT>.\n\nThe constructor calls C<ev_init> for you, which means you have to call the\nC<set> method before starting it.\n\nIt will not set a callback, however: You have to call the templated C<set>\nmethod to set a callback before you can start the watcher.\n\n(The reason why you have to use a method is a limitation in C++ which does\nnot allow explicit template arguments for constructors).\n\nThe destructor automatically stops the watcher if it is active.\n\n=item w->set<class, &class::method> (object *)\n\nThis method sets the callback method to call. The method has to have a\nsignature of C<void (*)(ev_TYPE &, int)>, it receives the watcher as\nfirst argument and the C<revents> as second. The object must be given as\nparameter and is stored in the C<data> member of the watcher.\n\nThis method synthesizes efficient thunking code to call your method from\nthe C callback that libev requires. If your compiler can inline your\ncallback (i.e. it is visible to it at the place of the C<set> call and\nyour compiler is good :), then the method will be fully inlined into the\nthunking function, making it as fast as a direct C callback.\n\nExample: simple class declaration and watcher initialisation\n\n   struct myclass\n   {\n     void io_cb (ev::io &w, int revents) { }\n   }\n\n   myclass obj;\n   ev::io iow;\n   iow.set <myclass, &myclass::io_cb> (&obj);\n\n=item w->set (object *)\n\nThis is a variation of a method callback - leaving out the method to call\nwill default the method to C<operator ()>, which makes it possible to use\nfunctor objects without having to manually specify the C<operator ()> all\nthe time. Incidentally, you can then also leave out the template argument\nlist.\n\nThe C<operator ()> method prototype must be C<void operator ()(watcher &w,\nint revents)>.\n\nSee the method-C<set> above for more details.\n\nExample: use a functor object as callback.\n\n   struct myfunctor\n   {\n     void operator() (ev::io &w, int revents)\n     {\n       ...\n     }\n   }\n\n   myfunctor f;\n\n   ev::io w;\n   w.set (&f);\n\n=item w->set<function> (void *data = 0)\n\nAlso sets a callback, but uses a static method or plain function as\ncallback. The optional C<data> argument will be stored in the watcher's\nC<data> member and is free for you to use.\n\nThe prototype of the C<function> must be C<void (*)(ev::TYPE &w, int)>.\n\nSee the method-C<set> above for more details.\n\nExample: Use a plain function as callback.\n\n   static void io_cb (ev::io &w, int revents) { }\n   iow.set <io_cb> ();\n\n=item w->set (loop)\n\nAssociates a different C<struct ev_loop> with this watcher. You can only\ndo this when the watcher is inactive (and not pending either).\n\n=item w->set ([arguments])\n\nBasically the same as C<ev_TYPE_set> (except for C<ev::embed> watchers>),\nwith the same arguments. Either this method or a suitable start method\nmust be called at least once. Unlike the C counterpart, an active watcher\ngets automatically stopped and restarted when reconfiguring it with this\nmethod.\n\nFor C<ev::embed> watchers this method is called C<set_embed>, to avoid\nclashing with the C<set (loop)> method.\n\n=item w->start ()\n\nStarts the watcher. Note that there is no C<loop> argument, as the\nconstructor already stores the event loop.\n\n=item w->start ([arguments])\n\nInstead of calling C<set> and C<start> methods separately, it is often\nconvenient to wrap them in one call. Uses the same type of arguments as\nthe configure C<set> method of the watcher.\n\n=item w->stop ()\n\nStops the watcher if it is active. Again, no C<loop> argument.\n\n=item w->again () (C<ev::timer>, C<ev::periodic> only)\n\nFor C<ev::timer> and C<ev::periodic>, this invokes the corresponding\nC<ev_TYPE_again> function.\n\n=item w->sweep () (C<ev::embed> only)\n\nInvokes C<ev_embed_sweep>.\n\n=item w->update () (C<ev::stat> only)\n\nInvokes C<ev_stat_stat>.\n\n=back\n\n=back\n\nExample: Define a class with two I/O and idle watchers, start the I/O\nwatchers in the constructor.\n\n   class myclass\n   {\n     ev::io   io  ; void io_cb   (ev::io   &w, int revents);\n     ev::io   io2 ; void io2_cb  (ev::io   &w, int revents);\n     ev::idle idle; void idle_cb (ev::idle &w, int revents);\n\n     myclass (int fd)\n     {\n       io  .set <myclass, &myclass::io_cb  > (this);\n       io2 .set <myclass, &myclass::io2_cb > (this);\n       idle.set <myclass, &myclass::idle_cb> (this);\n\n       io.set (fd, ev::WRITE); // configure the watcher\n       io.start ();            // start it whenever convenient\n\n       io2.start (fd, ev::READ); // set + start in one call\n     }\n   };\n\n\n=head1 OTHER LANGUAGE BINDINGS\n\nLibev does not offer other language bindings itself, but bindings for a\nnumber of languages exist in the form of third-party packages. If you know\nany interesting language binding in addition to the ones listed here, drop\nme a note.\n\n=over 4\n\n=item Perl\n\nThe EV module implements the full libev API and is actually used to test\nlibev. EV is developed together with libev. Apart from the EV core module,\nthere are additional modules that implement libev-compatible interfaces\nto C<libadns> (C<EV::ADNS>, but C<AnyEvent::DNS> is preferred nowadays),\nC<Net::SNMP> (C<Net::SNMP::EV>) and the C<libglib> event core (C<Glib::EV>\nand C<EV::Glib>).\n\nIt can be found and installed via CPAN, its homepage is at\nL<http://software.schmorp.de/pkg/EV>.\n\n=item Python\n\nPython bindings can be found at L<http://code.google.com/p/pyev/>. It\nseems to be quite complete and well-documented.\n\n=item Ruby\n\nTony Arcieri has written a ruby extension that offers access to a subset\nof the libev API and adds file handle abstractions, asynchronous DNS and\nmore on top of it. It can be found via gem servers. Its homepage is at\nL<http://rev.rubyforge.org/>.\n\nRoger Pack reports that using the link order C<-lws2_32 -lmsvcrt-ruby-190>\nmakes rev work even on mingw.\n\n=item Haskell\n\nA haskell binding to libev is available at\nL<http://hackage.haskell.org/cgi-bin/hackage-scripts/package/hlibev>.\n\n=item D\n\nLeandro Lucarella has written a D language binding (F<ev.d>) for libev, to\nbe found at L<http://www.llucax.com.ar/proj/ev.d/index.html>.\n\n=item Ocaml\n\nErkki Seppala has written Ocaml bindings for libev, to be found at\nL<http://modeemi.cs.tut.fi/~flux/software/ocaml-ev/>.\n\n=item Lua\n\nBrian Maher has written a partial interface to libev for lua (at the\ntime of this writing, only C<ev_io> and C<ev_timer>), to be found at\nL<http://github.com/brimworks/lua-ev>.\n\n=item Javascript\n\nNode.js (L<http://nodejs.org>) uses libev as the underlying event library.\n\n=item Others\n\nThere are others, and I stopped counting.\n\n=back\n\n\n=head1 MACRO MAGIC\n\nLibev can be compiled with a variety of options, the most fundamental\nof which is C<EV_MULTIPLICITY>. This option determines whether (most)\nfunctions and callbacks have an initial C<struct ev_loop *> argument.\n\nTo make it easier to write programs that cope with either variant, the\nfollowing macros are defined:\n\n=over 4\n\n=item C<EV_A>, C<EV_A_>\n\nThis provides the loop I<argument> for functions, if one is required (\"ev\nloop argument\"). The C<EV_A> form is used when this is the sole argument,\nC<EV_A_> is used when other arguments are following. Example:\n\n   ev_unref (EV_A);\n   ev_timer_add (EV_A_ watcher);\n   ev_run (EV_A_ 0);\n\nIt assumes the variable C<loop> of type C<struct ev_loop *> is in scope,\nwhich is often provided by the following macro.\n\n=item C<EV_P>, C<EV_P_>\n\nThis provides the loop I<parameter> for functions, if one is required (\"ev\nloop parameter\"). The C<EV_P> form is used when this is the sole parameter,\nC<EV_P_> is used when other parameters are following. Example:\n\n   // this is how ev_unref is being declared\n   static void ev_unref (EV_P);\n\n   // this is how you can declare your typical callback\n   static void cb (EV_P_ ev_timer *w, int revents)\n\nIt declares a parameter C<loop> of type C<struct ev_loop *>, quite\nsuitable for use with C<EV_A>.\n\n=item C<EV_DEFAULT>, C<EV_DEFAULT_>\n\nSimilar to the other two macros, this gives you the value of the default\nloop, if multiple loops are supported (\"ev loop default\"). The default loop\nwill be initialised if it isn't already initialised.\n\nFor non-multiplicity builds, these macros do nothing, so you always have\nto initialise the loop somewhere.\n\n=item C<EV_DEFAULT_UC>, C<EV_DEFAULT_UC_>\n\nUsage identical to C<EV_DEFAULT> and C<EV_DEFAULT_>, but requires that the\ndefault loop has been initialised (C<UC> == unchecked). Their behaviour\nis undefined when the default loop has not been initialised by a previous\nexecution of C<EV_DEFAULT>, C<EV_DEFAULT_> or C<ev_default_init (...)>.\n\nIt is often prudent to use C<EV_DEFAULT> when initialising the first\nwatcher in a function but use C<EV_DEFAULT_UC> afterwards.\n\n=back\n\nExample: Declare and initialise a check watcher, utilising the above\nmacros so it will work regardless of whether multiple loops are supported\nor not.\n\n   static void\n   check_cb (EV_P_ ev_timer *w, int revents)\n   {\n     ev_check_stop (EV_A_ w);\n   }\n\n   ev_check check;\n   ev_check_init (&check, check_cb);\n   ev_check_start (EV_DEFAULT_ &check);\n   ev_run (EV_DEFAULT_ 0);\n\n=head1 EMBEDDING\n\nLibev can (and often is) directly embedded into host\napplications. Examples of applications that embed it include the Deliantra\nGame Server, the EV perl module, the GNU Virtual Private Ethernet (gvpe)\nand rxvt-unicode.\n\nThe goal is to enable you to just copy the necessary files into your\nsource directory without having to change even a single line in them, so\nyou can easily upgrade by simply copying (or having a checked-out copy of\nlibev somewhere in your source tree).\n\n=head2 FILESETS\n\nDepending on what features you need you need to include one or more sets of files\nin your application.\n\n=head3 CORE EVENT LOOP\n\nTo include only the libev core (all the C<ev_*> functions), with manual\nconfiguration (no autoconf):\n\n   #define EV_STANDALONE 1\n   #include \"ev.c\"\n\nThis will automatically include F<ev.h>, too, and should be done in a\nsingle C source file only to provide the function implementations. To use\nit, do the same for F<ev.h> in all files wishing to use this API (best\ndone by writing a wrapper around F<ev.h> that you can include instead and\nwhere you can put other configuration options):\n\n   #define EV_STANDALONE 1\n   #include \"ev.h\"\n\nBoth header files and implementation files can be compiled with a C++\ncompiler (at least, that's a stated goal, and breakage will be treated\nas a bug).\n\nYou need the following files in your source tree, or in a directory\nin your include path (e.g. in libev/ when using -Ilibev):\n\n   ev.h\n   ev.c\n   ev_vars.h\n   ev_wrap.h\n\n   ev_win32.c      required on win32 platforms only\n\n   ev_select.c     only when select backend is enabled (which is enabled by default)\n   ev_poll.c       only when poll backend is enabled (disabled by default)\n   ev_epoll.c      only when the epoll backend is enabled (disabled by default)\n   ev_kqueue.c     only when the kqueue backend is enabled (disabled by default)\n   ev_port.c       only when the solaris port backend is enabled (disabled by default)\n\nF<ev.c> includes the backend files directly when enabled, so you only need\nto compile this single file.\n\n=head3 LIBEVENT COMPATIBILITY API\n\nTo include the libevent compatibility API, also include:\n\n   #include \"event.c\"\n\nin the file including F<ev.c>, and:\n\n   #include \"event.h\"\n\nin the files that want to use the libevent API. This also includes F<ev.h>.\n\nYou need the following additional files for this:\n\n   event.h\n   event.c\n\n=head3 AUTOCONF SUPPORT\n\nInstead of using C<EV_STANDALONE=1> and providing your configuration in\nwhatever way you want, you can also C<m4_include([libev.m4])> in your\nF<configure.ac> and leave C<EV_STANDALONE> undefined. F<ev.c> will then\ninclude F<config.h> and configure itself accordingly.\n\nFor this of course you need the m4 file:\n\n   libev.m4\n\n=head2 PREPROCESSOR SYMBOLS/MACROS\n\nLibev can be configured via a variety of preprocessor symbols you have to\ndefine before including (or compiling) any of its files. The default in\nthe absence of autoconf is documented for every option.\n\nSymbols marked with \"(h)\" do not change the ABI, and can have different\nvalues when compiling libev vs. including F<ev.h>, so it is permissible\nto redefine them before including F<ev.h> without breaking compatibility\nto a compiled library. All other symbols change the ABI, which means all\nusers of libev and the libev code itself must be compiled with compatible\nsettings.\n\n=over 4\n\n=item EV_COMPAT3 (h)\n\nBackwards compatibility is a major concern for libev. This is why this\nrelease of libev comes with wrappers for the functions and symbols that\nhave been renamed between libev version 3 and 4.\n\nYou can disable these wrappers (to test compatibility with future\nversions) by defining C<EV_COMPAT3> to C<0> when compiling your\nsources. This has the additional advantage that you can drop the C<struct>\nfrom C<struct ev_loop> declarations, as libev will provide an C<ev_loop>\ntypedef in that case.\n\nIn some future version, the default for C<EV_COMPAT3> will become C<0>,\nand in some even more future version the compatibility code will be\nremoved completely.\n\n=item EV_STANDALONE (h)\n\nMust always be C<1> if you do not use autoconf configuration, which\nkeeps libev from including F<config.h>, and it also defines dummy\nimplementations for some libevent functions (such as logging, which is not\nsupported). It will also not define any of the structs usually found in\nF<event.h> that are not directly supported by the libev core alone.\n\nIn standalone mode, libev will still try to automatically deduce the\nconfiguration, but has to be more conservative.\n\n=item EV_USE_FLOOR\n\nIf defined to be C<1>, libev will use the C<floor ()> function for its\nperiodic reschedule calculations, otherwise libev will fall back on a\nportable (slower) implementation. If you enable this, you usually have to\nlink against libm or something equivalent. Enabling this when the C<floor>\nfunction is not available will fail, so the safe default is to not enable\nthis.\n\n=item EV_USE_MONOTONIC\n\nIf defined to be C<1>, libev will try to detect the availability of the\nmonotonic clock option at both compile time and runtime. Otherwise no\nuse of the monotonic clock option will be attempted. If you enable this,\nyou usually have to link against librt or something similar. Enabling it\nwhen the functionality isn't available is safe, though, although you have\nto make sure you link against any libraries where the C<clock_gettime>\nfunction is hiding in (often F<-lrt>). See also C<EV_USE_CLOCK_SYSCALL>.\n\n=item EV_USE_REALTIME\n\nIf defined to be C<1>, libev will try to detect the availability of the\nreal-time clock option at compile time (and assume its availability\nat runtime if successful). Otherwise no use of the real-time clock\noption will be attempted. This effectively replaces C<gettimeofday>\nby C<clock_get (CLOCK_REALTIME, ...)> and will not normally affect\ncorrectness. See the note about libraries in the description of\nC<EV_USE_MONOTONIC>, though. Defaults to the opposite value of\nC<EV_USE_CLOCK_SYSCALL>.\n\n=item EV_USE_CLOCK_SYSCALL\n\nIf defined to be C<1>, libev will try to use a direct syscall instead\nof calling the system-provided C<clock_gettime> function. This option\nexists because on GNU/Linux, C<clock_gettime> is in C<librt>, but C<librt>\nunconditionally pulls in C<libpthread>, slowing down single-threaded\nprograms needlessly. Using a direct syscall is slightly slower (in\ntheory), because no optimised vdso implementation can be used, but avoids\nthe pthread dependency. Defaults to C<1> on GNU/Linux with glibc 2.x or\nhigher, as it simplifies linking (no need for C<-lrt>).\n\n=item EV_USE_NANOSLEEP\n\nIf defined to be C<1>, libev will assume that C<nanosleep ()> is available\nand will use it for delays. Otherwise it will use C<select ()>.\n\n=item EV_USE_EVENTFD\n\nIf defined to be C<1>, then libev will assume that C<eventfd ()> is\navailable and will probe for kernel support at runtime. This will improve\nC<ev_signal> and C<ev_async> performance and reduce resource consumption.\nIf undefined, it will be enabled if the headers indicate GNU/Linux + Glibc\n2.7 or newer, otherwise disabled.\n\n=item EV_USE_SELECT\n\nIf undefined or defined to be C<1>, libev will compile in support for the\nC<select>(2) backend. No attempt at auto-detection will be done: if no\nother method takes over, select will be it. Otherwise the select backend\nwill not be compiled in.\n\n=item EV_SELECT_USE_FD_SET\n\nIf defined to C<1>, then the select backend will use the system C<fd_set>\nstructure. This is useful if libev doesn't compile due to a missing\nC<NFDBITS> or C<fd_mask> definition or it mis-guesses the bitset layout\non exotic systems. This usually limits the range of file descriptors to\nsome low limit such as 1024 or might have other limitations (winsocket\nonly allows 64 sockets). The C<FD_SETSIZE> macro, set before compilation,\nconfigures the maximum size of the C<fd_set>.\n\n=item EV_SELECT_IS_WINSOCKET\n\nWhen defined to C<1>, the select backend will assume that\nselect/socket/connect etc. don't understand file descriptors but\nwants osf handles on win32 (this is the case when the select to\nbe used is the winsock select). This means that it will call\nC<_get_osfhandle> on the fd to convert it to an OS handle. Otherwise,\nit is assumed that all these functions actually work on fds, even\non win32. Should not be defined on non-win32 platforms.\n\n=item EV_FD_TO_WIN32_HANDLE(fd)\n\nIf C<EV_SELECT_IS_WINSOCKET> is enabled, then libev needs a way to map\nfile descriptors to socket handles. When not defining this symbol (the\ndefault), then libev will call C<_get_osfhandle>, which is usually\ncorrect. In some cases, programs use their own file descriptor management,\nin which case they can provide this function to map fds to socket handles.\n\n=item EV_WIN32_HANDLE_TO_FD(handle)\n\nIf C<EV_SELECT_IS_WINSOCKET> then libev maps handles to file descriptors\nusing the standard C<_open_osfhandle> function. For programs implementing\ntheir own fd to handle mapping, overwriting this function makes it easier\nto do so. This can be done by defining this macro to an appropriate value.\n\n=item EV_WIN32_CLOSE_FD(fd)\n\nIf programs implement their own fd to handle mapping on win32, then this\nmacro can be used to override the C<close> function, useful to unregister\nfile descriptors again. Note that the replacement function has to close\nthe underlying OS handle.\n\n=item EV_USE_WSASOCKET\n\nIf defined to be C<1>, libev will use C<WSASocket> to create its internal\ncommunication socket, which works better in some environments. Otherwise,\nthe normal C<socket> function will be used, which works better in other\nenvironments.\n\n=item EV_USE_POLL\n\nIf defined to be C<1>, libev will compile in support for the C<poll>(2)\nbackend. Otherwise it will be enabled on non-win32 platforms. It\ntakes precedence over select.\n\n=item EV_USE_EPOLL\n\nIf defined to be C<1>, libev will compile in support for the Linux\nC<epoll>(7) backend. Its availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for GNU/Linux systems. If undefined, it will be enabled if the\nheaders indicate GNU/Linux + Glibc 2.4 or newer, otherwise disabled.\n\n=item EV_USE_KQUEUE\n\nIf defined to be C<1>, libev will compile in support for the BSD style\nC<kqueue>(2) backend. Its actual availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for BSD and BSD-like systems, although on most BSDs kqueue only\nsupports some types of fds correctly (the only platform we found that\nsupports ptys for example was NetBSD), so kqueue might be compiled in, but\nnot be used unless explicitly requested. The best way to use it is to find\nout whether kqueue supports your type of fd properly and use an embedded\nkqueue loop.\n\n=item EV_USE_PORT\n\nIf defined to be C<1>, libev will compile in support for the Solaris\n10 port style backend. Its availability will be detected at runtime,\notherwise another method will be used as fallback. This is the preferred\nbackend for Solaris 10 systems.\n\n=item EV_USE_DEVPOLL\n\nReserved for future expansion, works like the USE symbols above.\n\n=item EV_USE_INOTIFY\n\nIf defined to be C<1>, libev will compile in support for the Linux inotify\ninterface to speed up C<ev_stat> watchers. Its actual availability will\nbe detected at runtime. If undefined, it will be enabled if the headers\nindicate GNU/Linux + Glibc 2.4 or newer, otherwise disabled.\n\n=item EV_NO_SMP\n\nIf defined to be C<1>, libev will assume that memory is always coherent\nbetween threads, that is, threads can be used, but threads never run on\ndifferent cpus (or different cpu cores). This reduces dependencies\nand makes libev faster.\n\n=item EV_NO_THREADS\n\nIf defined to be C<1>, libev will assume that it will never be called from\ndifferent threads (that includes signal handlers), which is a stronger\nassumption than C<EV_NO_SMP>, above. This reduces dependencies and makes\nlibev faster.\n\n=item EV_ATOMIC_T\n\nLibev requires an integer type (suitable for storing C<0> or C<1>) whose\naccess is atomic with respect to other threads or signal contexts. No\nsuch type is easily found in the C language, so you can provide your own\ntype that you know is safe for your purposes. It is used both for signal\nhandler \"locking\" as well as for signal and thread safety in C<ev_async>\nwatchers.\n\nIn the absence of this define, libev will use C<sig_atomic_t volatile>\n(from F<signal.h>), which is usually good enough on most platforms.\n\n=item EV_H (h)\n\nThe name of the F<ev.h> header file used to include it. The default if\nundefined is C<\"ev.h\"> in F<event.h>, F<ev.c> and F<ev++.h>. This can be\nused to virtually rename the F<ev.h> header file in case of conflicts.\n\n=item EV_CONFIG_H (h)\n\nIf C<EV_STANDALONE> isn't C<1>, this variable can be used to override\nF<ev.c>'s idea of where to find the F<config.h> file, similarly to\nC<EV_H>, above.\n\n=item EV_EVENT_H (h)\n\nSimilarly to C<EV_H>, this macro can be used to override F<event.c>'s idea\nof how the F<event.h> header can be found, the default is C<\"event.h\">.\n\n=item EV_PROTOTYPES (h)\n\nIf defined to be C<0>, then F<ev.h> will not define any function\nprototypes, but still define all the structs and other symbols. This is\noccasionally useful if you want to provide your own wrapper functions\naround libev functions.\n\n=item EV_MULTIPLICITY\n\nIf undefined or defined to C<1>, then all event-loop-specific functions\nwill have the C<struct ev_loop *> as first argument, and you can create\nadditional independent event loops. Otherwise there will be no support\nfor multiple event loops and there is no first event loop pointer\nargument. Instead, all functions act on the single default loop.\n\nNote that C<EV_DEFAULT> and C<EV_DEFAULT_> will no longer provide a\ndefault loop when multiplicity is switched off - you always have to\ninitialise the loop manually in this case.\n\n=item EV_MINPRI\n\n=item EV_MAXPRI\n\nThe range of allowed priorities. C<EV_MINPRI> must be smaller or equal to\nC<EV_MAXPRI>, but otherwise there are no non-obvious limitations. You can\nprovide for more priorities by overriding those symbols (usually defined\nto be C<-2> and C<2>, respectively).\n\nWhen doing priority-based operations, libev usually has to linearly search\nall the priorities, so having many of them (hundreds) uses a lot of space\nand time, so using the defaults of five priorities (-2 .. +2) is usually\nfine.\n\nIf your embedding application does not need any priorities, defining these\nboth to C<0> will save some memory and CPU.\n\n=item EV_PERIODIC_ENABLE, EV_IDLE_ENABLE, EV_EMBED_ENABLE, EV_STAT_ENABLE,\nEV_PREPARE_ENABLE, EV_CHECK_ENABLE, EV_FORK_ENABLE, EV_SIGNAL_ENABLE,\nEV_ASYNC_ENABLE, EV_CHILD_ENABLE.\n\nIf undefined or defined to be C<1> (and the platform supports it), then\nthe respective watcher type is supported. If defined to be C<0>, then it\nis not. Disabling watcher types mainly saves code size.\n\n=item EV_FEATURES\n\nIf you need to shave off some kilobytes of code at the expense of some\nspeed (but with the full API), you can define this symbol to request\ncertain subsets of functionality. The default is to enable all features\nthat can be enabled on the platform.\n\nA typical way to use this symbol is to define it to C<0> (or to a bitset\nwith some broad features you want) and then selectively re-enable\nadditional parts you want, for example if you want everything minimal,\nbut multiple event loop support, async and child watchers and the poll\nbackend, use this:\n\n   #define EV_FEATURES 0\n   #define EV_MULTIPLICITY 1\n   #define EV_USE_POLL 1\n   #define EV_CHILD_ENABLE 1\n   #define EV_ASYNC_ENABLE 1\n\nThe actual value is a bitset, it can be a combination of the following\nvalues (by default, all of these are enabled):\n\n=over 4\n\n=item C<1> - faster/larger code\n\nUse larger code to speed up some operations.\n\nCurrently this is used to override some inlining decisions (enlarging the\ncode size by roughly 30% on amd64).\n\nWhen optimising for size, use of compiler flags such as C<-Os> with\ngcc is recommended, as well as C<-DNDEBUG>, as libev contains a number of\nassertions.\n\nThe default is off when C<__OPTIMIZE_SIZE__> is defined by your compiler\n(e.g. gcc with C<-Os>).\n\n=item C<2> - faster/larger data structures\n\nReplaces the small 2-heap for timer management by a faster 4-heap, larger\nhash table sizes and so on. This will usually further increase code size\nand can additionally have an effect on the size of data structures at\nruntime.\n\nThe default is off when C<__OPTIMIZE_SIZE__> is defined by your compiler\n(e.g. gcc with C<-Os>).\n\n=item C<4> - full API configuration\n\nThis enables priorities (sets C<EV_MAXPRI>=2 and C<EV_MINPRI>=-2), and\nenables multiplicity (C<EV_MULTIPLICITY>=1).\n\n=item C<8> - full API\n\nThis enables a lot of the \"lesser used\" API functions. See C<ev.h> for\ndetails on which parts of the API are still available without this\nfeature, and do not complain if this subset changes over time.\n\n=item C<16> - enable all optional watcher types\n\nEnables all optional watcher types.  If you want to selectively enable\nonly some watcher types other than I/O and timers (e.g. prepare,\nembed, async, child...) you can enable them manually by defining\nC<EV_watchertype_ENABLE> to C<1> instead.\n\n=item C<32> - enable all backends\n\nThis enables all backends - without this feature, you need to enable at\nleast one backend manually (C<EV_USE_SELECT> is a good choice).\n\n=item C<64> - enable OS-specific \"helper\" APIs\n\nEnable inotify, eventfd, signalfd and similar OS-specific helper APIs by\ndefault.\n\n=back\n\nCompiling with C<gcc -Os -DEV_STANDALONE -DEV_USE_EPOLL=1 -DEV_FEATURES=0>\nreduces the compiled size of libev from 24.7Kb code/2.8Kb data to 6.5Kb\ncode/0.3Kb data on my GNU/Linux amd64 system, while still giving you I/O\nwatchers, timers and monotonic clock support.\n\nWith an intelligent-enough linker (gcc+binutils are intelligent enough\nwhen you use C<-Wl,--gc-sections -ffunction-sections>) functions unused by\nyour program might be left out as well - a binary starting a timer and an\nI/O watcher then might come out at only 5Kb.\n\n=item EV_API_STATIC\n\nIf this symbol is defined (by default it is not), then all identifiers\nwill have static linkage. This means that libev will not export any\nidentifiers, and you cannot link against libev anymore. This can be useful\nwhen you embed libev, only want to use libev functions in a single file,\nand do not want its identifiers to be visible.\n\nTo use this, define C<EV_API_STATIC> and include F<ev.c> in the file that\nwants to use libev.\n\nThis option only works when libev is compiled with a C compiler, as C++\ndoesn't support the required declaration syntax.\n\n=item EV_AVOID_STDIO\n\nIf this is set to C<1> at compiletime, then libev will avoid using stdio\nfunctions (printf, scanf, perror etc.). This will increase the code size\nsomewhat, but if your program doesn't otherwise depend on stdio and your\nlibc allows it, this avoids linking in the stdio library which is quite\nbig.\n\nNote that error messages might become less precise when this option is\nenabled.\n\n=item EV_NSIG\n\nThe highest supported signal number, +1 (or, the number of\nsignals): Normally, libev tries to deduce the maximum number of signals\nautomatically, but sometimes this fails, in which case it can be\nspecified. Also, using a lower number than detected (C<32> should be\ngood for about any system in existence) can save some memory, as libev\nstatically allocates some 12-24 bytes per signal number.\n\n=item EV_PID_HASHSIZE\n\nC<ev_child> watchers use a small hash table to distribute workload by\npid. The default size is C<16> (or C<1> with C<EV_FEATURES> disabled),\nusually more than enough. If you need to manage thousands of children you\nmight want to increase this value (I<must> be a power of two).\n\n=item EV_INOTIFY_HASHSIZE\n\nC<ev_stat> watchers use a small hash table to distribute workload by\ninotify watch id. The default size is C<16> (or C<1> with C<EV_FEATURES>\ndisabled), usually more than enough. If you need to manage thousands of\nC<ev_stat> watchers you might want to increase this value (I<must> be a\npower of two).\n\n=item EV_USE_4HEAP\n\nHeaps are not very cache-efficient. To improve the cache-efficiency of the\ntimer and periodics heaps, libev uses a 4-heap when this symbol is defined\nto C<1>. The 4-heap uses more complicated (longer) code but has noticeably\nfaster performance with many (thousands) of watchers.\n\nThe default is C<1>, unless C<EV_FEATURES> overrides it, in which case it\nwill be C<0>.\n\n=item EV_HEAP_CACHE_AT\n\nHeaps are not very cache-efficient. To improve the cache-efficiency of the\ntimer and periodics heaps, libev can cache the timestamp (I<at>) within\nthe heap structure (selected by defining C<EV_HEAP_CACHE_AT> to C<1>),\nwhich uses 8-12 bytes more per watcher and a few hundred bytes more code,\nbut avoids random read accesses on heap changes. This improves performance\nnoticeably with many (hundreds) of watchers.\n\nThe default is C<1>, unless C<EV_FEATURES> overrides it, in which case it\nwill be C<0>.\n\n=item EV_VERIFY\n\nControls how much internal verification (see C<ev_verify ()>) will\nbe done: If set to C<0>, no internal verification code will be compiled\nin. If set to C<1>, then verification code will be compiled in, but not\ncalled. If set to C<2>, then the internal verification code will be\ncalled once per loop, which can slow down libev. If set to C<3>, then the\nverification code will be called very frequently, which will slow down\nlibev considerably.\n\nThe default is C<1>, unless C<EV_FEATURES> overrides it, in which case it\nwill be C<0>.\n\n=item EV_COMMON\n\nBy default, all watchers have a C<void *data> member. By redefining\nthis macro to something else you can include more and other types of\nmembers. You have to define it each time you include one of the files,\nthough, and it must be identical each time.\n\nFor example, the perl EV module uses something like this:\n\n   #define EV_COMMON                       \\\n     SV *self; /* contains this struct */  \\\n     SV *cb_sv, *fh /* note no trailing \";\" */\n\n=item EV_CB_DECLARE (type)\n\n=item EV_CB_INVOKE (watcher, revents)\n\n=item ev_set_cb (ev, cb)\n\nCan be used to change the callback member declaration in each watcher,\nand the way callbacks are invoked and set. Must expand to a struct member\ndefinition and a statement, respectively. See the F<ev.h> header file for\ntheir default definitions. One possible use for overriding these is to\navoid the C<struct ev_loop *> as first argument in all cases, or to use\nmethod calls instead of plain function calls in C++.\n\n=back\n\n=head2 EXPORTED API SYMBOLS\n\nIf you need to re-export the API (e.g. via a DLL) and you need a list of\nexported symbols, you can use the provided F<Symbol.*> files which list\nall public symbols, one per line:\n\n   Symbols.ev      for libev proper\n   Symbols.event   for the libevent emulation\n\nThis can also be used to rename all public symbols to avoid clashes with\nmultiple versions of libev linked together (which is obviously bad in\nitself, but sometimes it is inconvenient to avoid this).\n\nA sed command like this will create wrapper C<#define>'s that you need to\ninclude before including F<ev.h>:\n\n   <Symbols.ev sed -e \"s/.*/#define & myprefix_&/\" >wrap.h\n\nThis would create a file F<wrap.h> which essentially looks like this:\n\n   #define ev_backend     myprefix_ev_backend\n   #define ev_check_start myprefix_ev_check_start\n   #define ev_check_stop  myprefix_ev_check_stop\n   ...\n\n=head2 EXAMPLES\n\nFor a real-world example of a program the includes libev\nverbatim, you can have a look at the EV perl module\n(L<http://software.schmorp.de/pkg/EV.html>). It has the libev files in\nthe F<libev/> subdirectory and includes them in the F<EV/EVAPI.h> (public\ninterface) and F<EV.xs> (implementation) files. Only the F<EV.xs> file\nwill be compiled. It is pretty complex because it provides its own header\nfile.\n\nThe usage in rxvt-unicode is simpler. It has a F<ev_cpp.h> header file\nthat everybody includes and which overrides some configure choices:\n\n   #define EV_FEATURES 8\n   #define EV_USE_SELECT 1\n   #define EV_PREPARE_ENABLE 1\n   #define EV_IDLE_ENABLE 1\n   #define EV_SIGNAL_ENABLE 1\n   #define EV_CHILD_ENABLE 1\n   #define EV_USE_STDEXCEPT 0\n   #define EV_CONFIG_H <config.h>\n\n   #include \"ev++.h\"\n\nAnd a F<ev_cpp.C> implementation file that contains libev proper and is compiled:\n\n   #include \"ev_cpp.h\"\n   #include \"ev.c\"\n\n=head1 INTERACTION WITH OTHER PROGRAMS, LIBRARIES OR THE ENVIRONMENT\n\n=head2 THREADS AND COROUTINES\n\n=head3 THREADS\n\nAll libev functions are reentrant and thread-safe unless explicitly\ndocumented otherwise, but libev implements no locking itself. This means\nthat you can use as many loops as you want in parallel, as long as there\nare no concurrent calls into any libev function with the same loop\nparameter (C<ev_default_*> calls have an implicit default loop parameter,\nof course): libev guarantees that different event loops share no data\nstructures that need any locking.\n\nOr to put it differently: calls with different loop parameters can be done\nconcurrently from multiple threads, calls with the same loop parameter\nmust be done serially (but can be done from different threads, as long as\nonly one thread ever is inside a call at any point in time, e.g. by using\na mutex per loop).\n\nSpecifically to support threads (and signal handlers), libev implements\nso-called C<ev_async> watchers, which allow some limited form of\nconcurrency on the same event loop, namely waking it up \"from the\noutside\".\n\nIf you want to know which design (one loop, locking, or multiple loops\nwithout or something else still) is best for your problem, then I cannot\nhelp you, but here is some generic advice:\n\n=over 4\n\n=item * most applications have a main thread: use the default libev loop\nin that thread, or create a separate thread running only the default loop.\n\nThis helps integrating other libraries or software modules that use libev\nthemselves and don't care/know about threading.\n\n=item * one loop per thread is usually a good model.\n\nDoing this is almost never wrong, sometimes a better-performance model\nexists, but it is always a good start.\n\n=item * other models exist, such as the leader/follower pattern, where one\nloop is handed through multiple threads in a kind of round-robin fashion.\n\nChoosing a model is hard - look around, learn, know that usually you can do\nbetter than you currently do :-)\n\n=item * often you need to talk to some other thread which blocks in the\nevent loop.\n\nC<ev_async> watchers can be used to wake them up from other threads safely\n(or from signal contexts...).\n\nAn example use would be to communicate signals or other events that only\nwork in the default loop by registering the signal watcher with the\ndefault loop and triggering an C<ev_async> watcher from the default loop\nwatcher callback into the event loop interested in the signal.\n\n=back\n\nSee also L</THREAD LOCKING EXAMPLE>.\n\n=head3 COROUTINES\n\nLibev is very accommodating to coroutines (\"cooperative threads\"):\nlibev fully supports nesting calls to its functions from different\ncoroutines (e.g. you can call C<ev_run> on the same loop from two\ndifferent coroutines, and switch freely between both coroutines running\nthe loop, as long as you don't confuse yourself). The only exception is\nthat you must not do this from C<ev_periodic> reschedule callbacks.\n\nCare has been taken to ensure that libev does not keep local state inside\nC<ev_run>, and other calls do not usually allow for coroutine switches as\nthey do not call any callbacks.\n\n=head2 COMPILER WARNINGS\n\nDepending on your compiler and compiler settings, you might get no or a\nlot of warnings when compiling libev code. Some people are apparently\nscared by this.\n\nHowever, these are unavoidable for many reasons. For one, each compiler\nhas different warnings, and each user has different tastes regarding\nwarning options. \"Warn-free\" code therefore cannot be a goal except when\ntargeting a specific compiler and compiler-version.\n\nAnother reason is that some compiler warnings require elaborate\nworkarounds, or other changes to the code that make it less clear and less\nmaintainable.\n\nAnd of course, some compiler warnings are just plain stupid, or simply\nwrong (because they don't actually warn about the condition their message\nseems to warn about). For example, certain older gcc versions had some\nwarnings that resulted in an extreme number of false positives. These have\nbeen fixed, but some people still insist on making code warn-free with\nsuch buggy versions.\n\nWhile libev is written to generate as few warnings as possible,\n\"warn-free\" code is not a goal, and it is recommended not to build libev\nwith any compiler warnings enabled unless you are prepared to cope with\nthem (e.g. by ignoring them). Remember that warnings are just that:\nwarnings, not errors, or proof of bugs.\n\n\n=head2 VALGRIND\n\nValgrind has a special section here because it is a popular tool that is\nhighly useful. Unfortunately, valgrind reports are very hard to interpret.\n\nIf you think you found a bug (memory leak, uninitialised data access etc.)\nin libev, then check twice: If valgrind reports something like:\n\n   ==2274==    definitely lost: 0 bytes in 0 blocks.\n   ==2274==      possibly lost: 0 bytes in 0 blocks.\n   ==2274==    still reachable: 256 bytes in 1 blocks.\n\nThen there is no memory leak, just as memory accounted to global variables\nis not a memleak - the memory is still being referenced, and didn't leak.\n\nSimilarly, under some circumstances, valgrind might report kernel bugs\nas if it were a bug in libev (e.g. in realloc or in the poll backend,\nalthough an acceptable workaround has been found here), or it might be\nconfused.\n\nKeep in mind that valgrind is a very good tool, but only a tool. Don't\nmake it into some kind of religion.\n\nIf you are unsure about something, feel free to contact the mailing list\nwith the full valgrind report and an explanation on why you think this\nis a bug in libev (best check the archives, too :). However, don't be\nannoyed when you get a brisk \"this is no bug\" answer and take the chance\nof learning how to interpret valgrind properly.\n\nIf you need, for some reason, empty reports from valgrind for your project\nI suggest using suppression lists.\n\n\n=head1 PORTABILITY NOTES\n\n=head2 GNU/LINUX 32 BIT LIMITATIONS\n\nGNU/Linux is the only common platform that supports 64 bit file/large file\ninterfaces but I<disables> them by default.\n\nThat means that libev compiled in the default environment doesn't support\nfiles larger than 2GiB or so, which mainly affects C<ev_stat> watchers.\n\nUnfortunately, many programs try to work around this GNU/Linux issue\nby enabling the large file API, which makes them incompatible with the\nstandard libev compiled for their system.\n\nLikewise, libev cannot enable the large file API itself as this would\nsuddenly make it incompatible to the default compile time environment,\ni.e. all programs not using special compile switches.\n\n=head2 OS/X AND DARWIN BUGS\n\nThe whole thing is a bug if you ask me - basically any system interface\nyou touch is broken, whether it is locales, poll, kqueue or even the\nOpenGL drivers.\n\n=head3 C<kqueue> is buggy\n\nThe kqueue syscall is broken in all known versions - most versions support\nonly sockets, many support pipes.\n\nLibev tries to work around this by not using C<kqueue> by default on this\nrotten platform, but of course you can still ask for it when creating a\nloop - embedding a socket-only kqueue loop into a select-based one is\nprobably going to work well.\n\n=head3 C<poll> is buggy\n\nInstead of fixing C<kqueue>, Apple replaced their (working) C<poll>\nimplementation by something calling C<kqueue> internally around the 10.5.6\nrelease, so now C<kqueue> I<and> C<poll> are broken.\n\nLibev tries to work around this by not using C<poll> by default on\nthis rotten platform, but of course you can still ask for it when creating\na loop.\n\n=head3 C<select> is buggy\n\nAll that's left is C<select>, and of course Apple found a way to fuck this\none up as well: On OS/X, C<select> actively limits the number of file\ndescriptors you can pass in to 1024 - your program suddenly crashes when\nyou use more.\n\nThere is an undocumented \"workaround\" for this - defining\nC<_DARWIN_UNLIMITED_SELECT>, which libev tries to use, so select I<should>\nwork on OS/X.\n\n=head2 SOLARIS PROBLEMS AND WORKAROUNDS\n\n=head3 C<errno> reentrancy\n\nThe default compile environment on Solaris is unfortunately so\nthread-unsafe that you can't even use components/libraries compiled\nwithout C<-D_REENTRANT> in a threaded program, which, of course, isn't\ndefined by default. A valid, if stupid, implementation choice.\n\nIf you want to use libev in threaded environments you have to make sure\nit's compiled with C<_REENTRANT> defined.\n\n=head3 Event port backend\n\nThe scalable event interface for Solaris is called \"event\nports\". Unfortunately, this mechanism is very buggy in all major\nreleases. If you run into high CPU usage, your program freezes or you get\na large number of spurious wakeups, make sure you have all the relevant\nand latest kernel patches applied. No, I don't know which ones, but there\nare multiple ones to apply, and afterwards, event ports actually work\ngreat.\n\nIf you can't get it to work, you can try running the program by setting\nthe environment variable C<LIBEV_FLAGS=3> to only allow C<poll> and\nC<select> backends.\n\n=head2 AIX POLL BUG\n\nAIX unfortunately has a broken C<poll.h> header. Libev works around\nthis by trying to avoid the poll backend altogether (i.e. it's not even\ncompiled in), which normally isn't a big problem as C<select> works fine\nwith large bitsets on AIX, and AIX is dead anyway.\n\n=head2 WIN32 PLATFORM LIMITATIONS AND WORKAROUNDS\n\n=head3 General issues\n\nWin32 doesn't support any of the standards (e.g. POSIX) that libev\nrequires, and its I/O model is fundamentally incompatible with the POSIX\nmodel. Libev still offers limited functionality on this platform in\nthe form of the C<EVBACKEND_SELECT> backend, and only supports socket\ndescriptors. This only applies when using Win32 natively, not when using\ne.g. cygwin. Actually, it only applies to the microsofts own compilers,\nas every compiler comes with a slightly differently broken/incompatible\nenvironment.\n\nLifting these limitations would basically require the full\nre-implementation of the I/O system. If you are into this kind of thing,\nthen note that glib does exactly that for you in a very portable way (note\nalso that glib is the slowest event library known to man).\n\nThere is no supported compilation method available on windows except\nembedding it into other applications.\n\nSensible signal handling is officially unsupported by Microsoft - libev\ntries its best, but under most conditions, signals will simply not work.\n\nNot a libev limitation but worth mentioning: windows apparently doesn't\naccept large writes: instead of resulting in a partial write, windows will\neither accept everything or return C<ENOBUFS> if the buffer is too large,\nso make sure you only write small amounts into your sockets (less than a\nmegabyte seems safe, but this apparently depends on the amount of memory\navailable).\n\nDue to the many, low, and arbitrary limits on the win32 platform and\nthe abysmal performance of winsockets, using a large number of sockets\nis not recommended (and not reasonable). If your program needs to use\nmore than a hundred or so sockets, then likely it needs to use a totally\ndifferent implementation for windows, as libev offers the POSIX readiness\nnotification model, which cannot be implemented efficiently on windows\n(due to Microsoft monopoly games).\n\nA typical way to use libev under windows is to embed it (see the embedding\nsection for details) and use the following F<evwrap.h> header file instead\nof F<ev.h>:\n\n   #define EV_STANDALONE              /* keeps ev from requiring config.h */\n   #define EV_SELECT_IS_WINSOCKET 1   /* configure libev for windows select */\n\n   #include \"ev.h\"\n\nAnd compile the following F<evwrap.c> file into your project (make sure\nyou do I<not> compile the F<ev.c> or any other embedded source files!):\n\n   #include \"evwrap.h\"\n   #include \"ev.c\"\n\n=head3 The winsocket C<select> function\n\nThe winsocket C<select> function doesn't follow POSIX in that it\nrequires socket I<handles> and not socket I<file descriptors> (it is\nalso extremely buggy). This makes select very inefficient, and also\nrequires a mapping from file descriptors to socket handles (the Microsoft\nC runtime provides the function C<_open_osfhandle> for this). See the\ndiscussion of the C<EV_SELECT_USE_FD_SET>, C<EV_SELECT_IS_WINSOCKET> and\nC<EV_FD_TO_WIN32_HANDLE> preprocessor symbols for more info.\n\nThe configuration for a \"naked\" win32 using the Microsoft runtime\nlibraries and raw winsocket select is:\n\n   #define EV_USE_SELECT 1\n   #define EV_SELECT_IS_WINSOCKET 1   /* forces EV_SELECT_USE_FD_SET, too */\n\nNote that winsockets handling of fd sets is O(n), so you can easily get a\ncomplexity in the O(n²) range when using win32.\n\n=head3 Limited number of file descriptors\n\nWindows has numerous arbitrary (and low) limits on things.\n\nEarly versions of winsocket's select only supported waiting for a maximum\nof C<64> handles (probably owning to the fact that all windows kernels\ncan only wait for C<64> things at the same time internally; Microsoft\nrecommends spawning a chain of threads and wait for 63 handles and the\nprevious thread in each. Sounds great!).\n\nNewer versions support more handles, but you need to define C<FD_SETSIZE>\nto some high number (e.g. C<2048>) before compiling the winsocket select\ncall (which might be in libev or elsewhere, for example, perl and many\nother interpreters do their own select emulation on windows).\n\nAnother limit is the number of file descriptors in the Microsoft runtime\nlibraries, which by default is C<64> (there must be a hidden I<64>\nfetish or something like this inside Microsoft). You can increase this\nby calling C<_setmaxstdio>, which can increase this limit to C<2048>\n(another arbitrary limit), but is broken in many versions of the Microsoft\nruntime libraries. This might get you to about C<512> or C<2048> sockets\n(depending on windows version and/or the phase of the moon). To get more,\nyou need to wrap all I/O functions and provide your own fd management, but\nthe cost of calling select (O(n²)) will likely make this unworkable.\n\n=head2 PORTABILITY REQUIREMENTS\n\nIn addition to a working ISO-C implementation and of course the\nbackend-specific APIs, libev relies on a few additional extensions:\n\n=over 4\n\n=item C<void (*)(ev_watcher_type *, int revents)> must have compatible\ncalling conventions regardless of C<ev_watcher_type *>.\n\nLibev assumes not only that all watcher pointers have the same internal\nstructure (guaranteed by POSIX but not by ISO C for example), but it also\nassumes that the same (machine) code can be used to call any watcher\ncallback: The watcher callbacks have different type signatures, but libev\ncalls them using an C<ev_watcher *> internally.\n\n=item pointer accesses must be thread-atomic\n\nAccessing a pointer value must be atomic, it must both be readable and\nwritable in one piece - this is the case on all current architectures.\n\n=item C<sig_atomic_t volatile> must be thread-atomic as well\n\nThe type C<sig_atomic_t volatile> (or whatever is defined as\nC<EV_ATOMIC_T>) must be atomic with respect to accesses from different\nthreads. This is not part of the specification for C<sig_atomic_t>, but is\nbelieved to be sufficiently portable.\n\n=item C<sigprocmask> must work in a threaded environment\n\nLibev uses C<sigprocmask> to temporarily block signals. This is not\nallowed in a threaded program (C<pthread_sigmask> has to be used). Typical\npthread implementations will either allow C<sigprocmask> in the \"main\nthread\" or will block signals process-wide, both behaviours would\nbe compatible with libev. Interaction between C<sigprocmask> and\nC<pthread_sigmask> could complicate things, however.\n\nThe most portable way to handle signals is to block signals in all threads\nexcept the initial one, and run the signal handling loop in the initial\nthread as well.\n\n=item C<long> must be large enough for common memory allocation sizes\n\nTo improve portability and simplify its API, libev uses C<long> internally\ninstead of C<size_t> when allocating its data structures. On non-POSIX\nsystems (Microsoft...) this might be unexpectedly low, but is still at\nleast 31 bits everywhere, which is enough for hundreds of millions of\nwatchers.\n\n=item C<double> must hold a time value in seconds with enough accuracy\n\nThe type C<double> is used to represent timestamps. It is required to\nhave at least 51 bits of mantissa (and 9 bits of exponent), which is\ngood enough for at least into the year 4000 with millisecond accuracy\n(the design goal for libev). This requirement is overfulfilled by\nimplementations using IEEE 754, which is basically all existing ones.\n\nWith IEEE 754 doubles, you get microsecond accuracy until at least the\nyear 2255 (and millisecond accuracy till the year 287396 - by then, libev\nis either obsolete or somebody patched it to use C<long double> or\nsomething like that, just kidding).\n\n=back\n\nIf you know of other additional requirements drop me a note.\n\n\n=head1 ALGORITHMIC COMPLEXITIES\n\nIn this section the complexities of (many of) the algorithms used inside\nlibev will be documented. For complexity discussions about backends see\nthe documentation for C<ev_default_init>.\n\nAll of the following are about amortised time: If an array needs to be\nextended, libev needs to realloc and move the whole array, but this\nhappens asymptotically rarer with higher number of elements, so O(1) might\nmean that libev does a lengthy realloc operation in rare cases, but on\naverage it is much faster and asymptotically approaches constant time.\n\n=over 4\n\n=item Starting and stopping timer/periodic watchers: O(log skipped_other_timers)\n\nThis means that, when you have a watcher that triggers in one hour and\nthere are 100 watchers that would trigger before that, then inserting will\nhave to skip roughly seven (C<ld 100>) of these watchers.\n\n=item Changing timer/periodic watchers (by autorepeat or calling again): O(log skipped_other_timers)\n\nThat means that changing a timer costs less than removing/adding them,\nas only the relative motion in the event queue has to be paid for.\n\n=item Starting io/check/prepare/idle/signal/child/fork/async watchers: O(1)\n\nThese just add the watcher into an array or at the head of a list.\n\n=item Stopping check/prepare/idle/fork/async watchers: O(1)\n\n=item Stopping an io/signal/child watcher: O(number_of_watchers_for_this_(fd/signal/pid % EV_PID_HASHSIZE))\n\nThese watchers are stored in lists, so they need to be walked to find the\ncorrect watcher to remove. The lists are usually short (you don't usually\nhave many watchers waiting for the same fd or signal: one is typical, two\nis rare).\n\n=item Finding the next timer in each loop iteration: O(1)\n\nBy virtue of using a binary or 4-heap, the next timer is always found at a\nfixed position in the storage array.\n\n=item Each change on a file descriptor per loop iteration: O(number_of_watchers_for_this_fd)\n\nA change means an I/O watcher gets started or stopped, which requires\nlibev to recalculate its status (and possibly tell the kernel, depending\non backend and whether C<ev_io_set> was used).\n\n=item Activating one watcher (putting it into the pending state): O(1)\n\n=item Priority handling: O(number_of_priorities)\n\nPriorities are implemented by allocating some space for each\npriority. When doing priority-based operations, libev usually has to\nlinearly search all the priorities, but starting/stopping and activating\nwatchers becomes O(1) with respect to priority handling.\n\n=item Sending an ev_async: O(1)\n\n=item Processing ev_async_send: O(number_of_async_watchers)\n\n=item Processing signals: O(max_signal_number)\n\nSending involves a system call I<iff> there were no other C<ev_async_send>\ncalls in the current loop iteration and the loop is currently\nblocked. Checking for async and signal events involves iterating over all\nrunning async watchers or all signal numbers.\n\n=back\n\n\n=head1 PORTING FROM LIBEV 3.X TO 4.X\n\nThe major version 4 introduced some incompatible changes to the API.\n\nAt the moment, the C<ev.h> header file provides compatibility definitions\nfor all changes, so most programs should still compile. The compatibility\nlayer might be removed in later versions of libev, so better update to the\nnew API early than late.\n\n=over 4\n\n=item C<EV_COMPAT3> backwards compatibility mechanism\n\nThe backward compatibility mechanism can be controlled by\nC<EV_COMPAT3>. See L</\"PREPROCESSOR SYMBOLS/MACROS\"> in the L</EMBEDDING>\nsection.\n\n=item C<ev_default_destroy> and C<ev_default_fork> have been removed\n\nThese calls can be replaced easily by their C<ev_loop_xxx> counterparts:\n\n   ev_loop_destroy (EV_DEFAULT_UC);\n   ev_loop_fork (EV_DEFAULT);\n\n=item function/symbol renames\n\nA number of functions and symbols have been renamed:\n\n  ev_loop         => ev_run\n  EVLOOP_NONBLOCK => EVRUN_NOWAIT\n  EVLOOP_ONESHOT  => EVRUN_ONCE\n\n  ev_unloop       => ev_break\n  EVUNLOOP_CANCEL => EVBREAK_CANCEL\n  EVUNLOOP_ONE    => EVBREAK_ONE\n  EVUNLOOP_ALL    => EVBREAK_ALL\n\n  EV_TIMEOUT      => EV_TIMER\n\n  ev_loop_count   => ev_iteration\n  ev_loop_depth   => ev_depth\n  ev_loop_verify  => ev_verify\n\nMost functions working on C<struct ev_loop> objects don't have an\nC<ev_loop_> prefix, so it was removed; C<ev_loop>, C<ev_unloop> and\nassociated constants have been renamed to not collide with the C<struct\nev_loop> anymore and C<EV_TIMER> now follows the same naming scheme\nas all other watcher types. Note that C<ev_loop_fork> is still called\nC<ev_loop_fork> because it would otherwise clash with the C<ev_fork>\ntypedef.\n\n=item C<EV_MINIMAL> mechanism replaced by C<EV_FEATURES>\n\nThe preprocessor symbol C<EV_MINIMAL> has been replaced by a different\nmechanism, C<EV_FEATURES>. Programs using C<EV_MINIMAL> usually compile\nand work, but the library code will of course be larger.\n\n=back\n\n\n=head1 GLOSSARY\n\n=over 4\n\n=item active\n\nA watcher is active as long as it has been started and not yet stopped.\nSee L</WATCHER STATES> for details.\n\n=item application\n\nIn this document, an application is whatever is using libev.\n\n=item backend\n\nThe part of the code dealing with the operating system interfaces.\n\n=item callback\n\nThe address of a function that is called when some event has been\ndetected. Callbacks are being passed the event loop, the watcher that\nreceived the event, and the actual event bitset.\n\n=item callback/watcher invocation\n\nThe act of calling the callback associated with a watcher.\n\n=item event\n\nA change of state of some external event, such as data now being available\nfor reading on a file descriptor, time having passed or simply not having\nany other events happening anymore.\n\nIn libev, events are represented as single bits (such as C<EV_READ> or\nC<EV_TIMER>).\n\n=item event library\n\nA software package implementing an event model and loop.\n\n=item event loop\n\nAn entity that handles and processes external events and converts them\ninto callback invocations.\n\n=item event model\n\nThe model used to describe how an event loop handles and processes\nwatchers and events.\n\n=item pending\n\nA watcher is pending as soon as the corresponding event has been\ndetected. See L</WATCHER STATES> for details.\n\n=item real time\n\nThe physical time that is observed. It is apparently strictly monotonic :)\n\n=item wall-clock time\n\nThe time and date as shown on clocks. Unlike real time, it can actually\nbe wrong and jump forwards and backwards, e.g. when you adjust your\nclock.\n\n=item watcher\n\nA data structure that describes interest in certain events. Watchers need\nto be started (attached to an event loop) before they can receive events.\n\n=back\n\n=head1 AUTHOR\n\nMarc Lehmann <libev@schmorp.de>, with repeated corrections by Mikael\nMagnusson and Emanuele Giaquinta, and minor corrections by many others.\n\n"
        },
        {
          "name": "ev_epoll.c",
          "type": "blob",
          "size": 9.638671875,
          "content": "/*\n * libev epoll fd activity backend\n *\n * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n/*\n * general notes about epoll:\n *\n * a) epoll silently removes fds from the fd set. as nothing tells us\n *    that an fd has been removed otherwise, we have to continually\n *    \"rearm\" fds that we suspect *might* have changed (same\n *    problem with kqueue, but much less costly there).\n * b) the fact that ADD != MOD creates a lot of extra syscalls due to a)\n *    and seems not to have any advantage.\n * c) the inability to handle fork or file descriptors (think dup)\n *    limits the applicability over poll, so this is not a generic\n *    poll replacement.\n * d) epoll doesn't work the same as select with many file descriptors\n *    (such as files). while not critical, no other advanced interface\n *    seems to share this (rather non-unixy) limitation.\n * e) epoll claims to be embeddable, but in practise you never get\n *    a ready event for the epoll fd (broken: <=2.6.26, working: >=2.6.32).\n * f) epoll_ctl returning EPERM means the fd is always ready.\n *\n * lots of \"weird code\" and complication handling in this file is due\n * to these design problems with epoll, as we try very hard to avoid\n * epoll_ctl syscalls for common usage patterns and handle the breakage\n * ensuing from receiving events for closed and otherwise long gone\n * file descriptors.\n */\n\n#include <sys/epoll.h>\n\n#define EV_EMASK_EPERM 0x80\n\nstatic void\nepoll_modify (EV_P_ int fd, int oev, int nev)\n{\n  struct epoll_event ev;\n  unsigned char oldmask;\n\n  /*\n   * we handle EPOLL_CTL_DEL by ignoring it here\n   * on the assumption that the fd is gone anyways\n   * if that is wrong, we have to handle the spurious\n   * event in epoll_poll.\n   * if the fd is added again, we try to ADD it, and, if that\n   * fails, we assume it still has the same eventmask.\n   */\n  if (!nev)\n    return;\n\n  oldmask = anfds [fd].emask;\n  anfds [fd].emask = nev;\n\n  /* store the generation counter in the upper 32 bits, the fd in the lower 32 bits */\n  ev.data.u64 = (uint64_t)(uint32_t)fd\n              | ((uint64_t)(uint32_t)++anfds [fd].egen << 32);\n  ev.events   = (nev & EV_READ  ? EPOLLIN  : 0)\n              | (nev & EV_WRITE ? EPOLLOUT : 0);\n\n  if (expect_true (!epoll_ctl (backend_fd, oev && oldmask != nev ? EPOLL_CTL_MOD : EPOLL_CTL_ADD, fd, &ev)))\n    return;\n\n  if (expect_true (errno == ENOENT))\n    {\n      /* if ENOENT then the fd went away, so try to do the right thing */\n      if (!nev)\n        goto dec_egen;\n\n      if (!epoll_ctl (backend_fd, EPOLL_CTL_ADD, fd, &ev))\n        return;\n    }\n  else if (expect_true (errno == EEXIST))\n    {\n      /* EEXIST means we ignored a previous DEL, but the fd is still active */\n      /* if the kernel mask is the same as the new mask, we assume it hasn't changed */\n      if (oldmask == nev)\n        goto dec_egen;\n\n      if (!epoll_ctl (backend_fd, EPOLL_CTL_MOD, fd, &ev))\n        return;\n    }\n  else if (expect_true (errno == EPERM))\n    {\n      /* EPERM means the fd is always ready, but epoll is too snobbish */\n      /* to handle it, unlike select or poll. */\n      anfds [fd].emask = EV_EMASK_EPERM;\n\n      /* add fd to epoll_eperms, if not already inside */\n      if (!(oldmask & EV_EMASK_EPERM))\n        {\n          array_needsize (int, epoll_eperms, epoll_epermmax, epoll_epermcnt + 1, EMPTY2);\n          epoll_eperms [epoll_epermcnt++] = fd;\n        }\n\n      return;\n    }\n\n  fd_kill (EV_A_ fd);\n\ndec_egen:\n  /* we didn't successfully call epoll_ctl, so decrement the generation counter again */\n  --anfds [fd].egen;\n}\n\nstatic void\nepoll_poll (EV_P_ ev_tstamp timeout)\n{\n  int i;\n  int eventcnt;\n\n  if (expect_false (epoll_epermcnt))\n    timeout = 0.;\n\n  /* epoll wait times cannot be larger than (LONG_MAX - 999UL) / HZ msecs, which is below */\n  /* the default libev max wait time, however. */\n  EV_RELEASE_CB;\n  eventcnt = epoll_wait (backend_fd, epoll_events, epoll_eventmax, timeout * 1e3);\n  EV_ACQUIRE_CB;\n\n  if (expect_false (eventcnt < 0))\n    {\n      if (errno != EINTR)\n        ev_syserr (\"(libev) epoll_wait\");\n\n      return;\n    }\n\n  for (i = 0; i < eventcnt; ++i)\n    {\n      struct epoll_event *ev = epoll_events + i;\n\n      int fd = (uint32_t)ev->data.u64; /* mask out the lower 32 bits */\n      int want = anfds [fd].events;\n      int got  = (ev->events & (EPOLLOUT | EPOLLERR | EPOLLHUP) ? EV_WRITE : 0)\n               | (ev->events & (EPOLLIN  | EPOLLERR | EPOLLHUP) ? EV_READ  : 0);\n\n      /*\n       * check for spurious notification.\n       * this only finds spurious notifications on egen updates\n       * other spurious notifications will be found by epoll_ctl, below\n       * we assume that fd is always in range, as we never shrink the anfds array\n       */\n      if (expect_false ((uint32_t)anfds [fd].egen != (uint32_t)(ev->data.u64 >> 32)))\n        {\n          /* recreate kernel state */\n          postfork |= 2;\n          continue;\n        }\n\n      if (expect_false (got & ~want))\n        {\n          anfds [fd].emask = want;\n\n          /*\n           * we received an event but are not interested in it, try mod or del\n           * this often happens because we optimistically do not unregister fds\n           * when we are no longer interested in them, but also when we get spurious\n           * notifications for fds from another process. this is partially handled\n           * above with the gencounter check (== our fd is not the event fd), and\n           * partially here, when epoll_ctl returns an error (== a child has the fd\n           * but we closed it).\n           */\n          ev->events = (want & EV_READ  ? EPOLLIN  : 0)\n                     | (want & EV_WRITE ? EPOLLOUT : 0);\n\n          /* pre-2.6.9 kernels require a non-null pointer with EPOLL_CTL_DEL, */\n          /* which is fortunately easy to do for us. */\n          if (epoll_ctl (backend_fd, want ? EPOLL_CTL_MOD : EPOLL_CTL_DEL, fd, ev))\n            {\n              postfork |= 2; /* an error occurred, recreate kernel state */\n              continue;\n            }\n        }\n\n      fd_event (EV_A_ fd, got);\n    }\n\n  /* if the receive array was full, increase its size */\n  if (expect_false (eventcnt == epoll_eventmax))\n    {\n      ev_free (epoll_events);\n      epoll_eventmax = array_nextsize (sizeof (struct epoll_event), epoll_eventmax, epoll_eventmax + 1);\n      epoll_events = (struct epoll_event *)ev_malloc (sizeof (struct epoll_event) * epoll_eventmax);\n    }\n\n  /* now synthesize events for all fds where epoll fails, while select works... */\n  for (i = epoll_epermcnt; i--; )\n    {\n      int fd = epoll_eperms [i];\n      unsigned char events = anfds [fd].events & (EV_READ | EV_WRITE);\n\n      if (anfds [fd].emask & EV_EMASK_EPERM && events)\n        fd_event (EV_A_ fd, events);\n      else\n        {\n          epoll_eperms [i] = epoll_eperms [--epoll_epermcnt];\n          anfds [fd].emask = 0;\n        }\n    }\n}\n\nint inline_size\nepoll_init (EV_P_ int flags)\n{\n#ifdef EPOLL_CLOEXEC\n  backend_fd = epoll_create1 (EPOLL_CLOEXEC);\n\n  if (backend_fd < 0 && (errno == EINVAL || errno == ENOSYS))\n#endif\n    backend_fd = epoll_create (256);\n\n  if (backend_fd < 0)\n    return 0;\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC);\n\n  backend_mintime = 1e-3; /* epoll does sometimes return early, this is just to avoid the worst */\n  backend_modify  = epoll_modify;\n  backend_poll    = epoll_poll;\n\n  epoll_eventmax = 64; /* initial number of events receivable per poll */\n  epoll_events = (struct epoll_event *)ev_malloc (sizeof (struct epoll_event) * epoll_eventmax);\n\n  return EVBACKEND_EPOLL;\n}\n\nvoid inline_size\nepoll_destroy (EV_P)\n{\n  ev_free (epoll_events);\n  array_free (epoll_eperm, EMPTY);\n}\n\nvoid inline_size\nepoll_fork (EV_P)\n{\n  close (backend_fd);\n\n  while ((backend_fd = epoll_create (256)) < 0)\n    ev_syserr (\"(libev) epoll_create\");\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC);\n\n  fd_rearm_all (EV_A);\n}\n\n"
        },
        {
          "name": "ev_kqueue.c",
          "type": "blob",
          "size": 6.650390625,
          "content": "/*\n * libev kqueue backend\n *\n * Copyright (c) 2007,2008,2009,2010,2011,2012,2013 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#include <sys/types.h>\n#include <sys/time.h>\n#include <sys/event.h>\n#include <string.h>\n#include <errno.h>\n\nvoid inline_speed\nkqueue_change (EV_P_ int fd, int filter, int flags, int fflags)\n{\n  ++kqueue_changecnt;\n  array_needsize (struct kevent, kqueue_changes, kqueue_changemax, kqueue_changecnt, EMPTY2);\n\n  EV_SET (&kqueue_changes [kqueue_changecnt - 1], fd, filter, flags, fflags, 0, 0);\n}\n\n/* OS X at least needs this */\n#ifndef EV_ENABLE\n# define EV_ENABLE 0\n#endif\n#ifndef NOTE_EOF\n# define NOTE_EOF 0\n#endif\n\nstatic void\nkqueue_modify (EV_P_ int fd, int oev, int nev)\n{\n  if (oev != nev)\n    {\n      if (oev & EV_READ)\n        kqueue_change (EV_A_ fd, EVFILT_READ , EV_DELETE, 0);\n\n      if (oev & EV_WRITE)\n        kqueue_change (EV_A_ fd, EVFILT_WRITE, EV_DELETE, 0);\n    }\n\n  /* to detect close/reopen reliably, we have to re-add */\n  /* event requests even when oev == nev */\n\n  if (nev & EV_READ)\n    kqueue_change (EV_A_ fd, EVFILT_READ , EV_ADD | EV_ENABLE, NOTE_EOF);\n\n  if (nev & EV_WRITE)\n    kqueue_change (EV_A_ fd, EVFILT_WRITE, EV_ADD | EV_ENABLE, NOTE_EOF);\n}\n\nstatic void\nkqueue_poll (EV_P_ ev_tstamp timeout)\n{\n  int res, i;\n  struct timespec ts;\n\n  /* need to resize so there is enough space for errors */\n  if (kqueue_changecnt > kqueue_eventmax)\n    {\n      ev_free (kqueue_events);\n      kqueue_eventmax = array_nextsize (sizeof (struct kevent), kqueue_eventmax, kqueue_changecnt);\n      kqueue_events = (struct kevent *)ev_malloc (sizeof (struct kevent) * kqueue_eventmax);\n    }\n\n  EV_RELEASE_CB;\n  EV_TS_SET (ts, timeout);\n  res = kevent (backend_fd, kqueue_changes, kqueue_changecnt, kqueue_events, kqueue_eventmax, &ts);\n  EV_ACQUIRE_CB;\n  kqueue_changecnt = 0;\n\n  if (expect_false (res < 0))\n    {\n      if (errno != EINTR)\n        ev_syserr (\"(libev) kevent\");\n\n      return;\n    }\n\n  for (i = 0; i < res; ++i)\n    {\n      int fd = kqueue_events [i].ident;\n\n      if (expect_false (kqueue_events [i].flags & EV_ERROR))\n        {\n          int err = kqueue_events [i].data;\n\n          /* we are only interested in errors for fds that we are interested in :) */\n          if (anfds [fd].events)\n            {\n              if (err == ENOENT) /* resubmit changes on ENOENT */\n                kqueue_modify (EV_A_ fd, 0, anfds [fd].events);\n              else if (err == EBADF) /* on EBADF, we re-check the fd */\n                {\n                  if (fd_valid (fd))\n                    kqueue_modify (EV_A_ fd, 0, anfds [fd].events);\n                  else\n                    fd_kill (EV_A_ fd);\n                }\n              else /* on all other errors, we error out on the fd */\n                fd_kill (EV_A_ fd);\n            }\n        }\n      else\n        fd_event (\n          EV_A_\n          fd,\n          kqueue_events [i].filter == EVFILT_READ ? EV_READ\n          : kqueue_events [i].filter == EVFILT_WRITE ? EV_WRITE\n          : 0\n        );\n    }\n\n  if (expect_false (res == kqueue_eventmax))\n    {\n      ev_free (kqueue_events);\n      kqueue_eventmax = array_nextsize (sizeof (struct kevent), kqueue_eventmax, kqueue_eventmax + 1);\n      kqueue_events = (struct kevent *)ev_malloc (sizeof (struct kevent) * kqueue_eventmax);\n    }\n}\n\nint inline_size\nkqueue_init (EV_P_ int flags)\n{\n  /* initialize the kernel queue */\n  kqueue_fd_pid = getpid ();\n  if ((backend_fd = kqueue ()) < 0)\n    return 0;\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC); /* not sure if necessary, hopefully doesn't hurt */\n\n  backend_mintime = 1e-9; /* apparently, they did the right thing in freebsd */\n  backend_modify  = kqueue_modify;\n  backend_poll    = kqueue_poll;\n\n  kqueue_eventmax = 64; /* initial number of events receivable per poll */\n  kqueue_events = (struct kevent *)ev_malloc (sizeof (struct kevent) * kqueue_eventmax);\n\n  kqueue_changes   = 0;\n  kqueue_changemax = 0;\n  kqueue_changecnt = 0;\n\n  return EVBACKEND_KQUEUE;\n}\n\nvoid inline_size\nkqueue_destroy (EV_P)\n{\n  ev_free (kqueue_events);\n  ev_free (kqueue_changes);\n}\n\nvoid inline_size\nkqueue_fork (EV_P)\n{\n  /* some BSD kernels don't just destroy the kqueue itself,\n   * but also close the fd, which isn't documented, and\n   * impossible to support properly.\n   * we remember the pid of the kqueue call and only close\n   * the fd if the pid is still the same.\n   * this leaks fds on sane kernels, but BSD interfaces are\n   * notoriously buggy and rarely get fixed.\n   */\n  pid_t newpid = getpid ();\n\n  if (newpid == kqueue_fd_pid)\n    close (backend_fd);\n\n  kqueue_fd_pid = newpid;\n  while ((backend_fd = kqueue ()) < 0)\n    ev_syserr (\"(libev) kqueue\");\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC);\n\n  /* re-register interest in fds */\n  fd_rearm_all (EV_A);\n}\n\n/* sys/event.h defines EV_ERROR */\n#undef EV_ERROR\n\n"
        },
        {
          "name": "ev_poll.c",
          "type": "blob",
          "size": 4.3388671875,
          "content": "/*\n * libev poll fd activity backend\n *\n * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#include <poll.h>\n\nvoid inline_size\npollidx_init (int *base, int count)\n{\n  /* consider using memset (.., -1, ...), which is practically guaranteed\n   * to work on all systems implementing poll */\n  while (count--)\n    *base++ = -1;\n}\n\nstatic void\npoll_modify (EV_P_ int fd, int oev, int nev)\n{\n  int idx;\n\n  if (oev == nev)\n    return;\n\n  array_needsize (int, pollidxs, pollidxmax, fd + 1, pollidx_init);\n\n  idx = pollidxs [fd];\n\n  if (idx < 0) /* need to allocate a new pollfd */\n    {\n      pollidxs [fd] = idx = pollcnt++;\n      array_needsize (struct pollfd, polls, pollmax, pollcnt, EMPTY2);\n      polls [idx].fd = fd;\n    }\n\n  assert (polls [idx].fd == fd);\n\n  if (nev)\n    polls [idx].events =\n        (nev & EV_READ ? POLLIN : 0)\n        | (nev & EV_WRITE ? POLLOUT : 0);\n  else /* remove pollfd */\n    {\n      pollidxs [fd] = -1;\n\n      if (expect_true (idx < --pollcnt))\n        {\n          polls [idx] = polls [pollcnt];\n          pollidxs [polls [idx].fd] = idx;\n        }\n    }\n}\n\nstatic void\npoll_poll (EV_P_ ev_tstamp timeout)\n{\n  struct pollfd *p;\n  int res;\n  \n  EV_RELEASE_CB;\n  res = poll (polls, pollcnt, timeout * 1e3);\n  EV_ACQUIRE_CB;\n\n  if (expect_false (res < 0))\n    {\n      if (errno == EBADF)\n        fd_ebadf (EV_A);\n      else if (errno == ENOMEM && !syserr_cb)\n        fd_enomem (EV_A);\n      else if (errno != EINTR)\n        ev_syserr (\"(libev) poll\");\n    }\n  else\n    for (p = polls; res; ++p)\n      {\n        assert ((\"libev: poll() returned illegal result, broken BSD kernel?\", p < polls + pollcnt));\n\n        if (expect_false (p->revents)) /* this expect is debatable */\n          {\n            --res;\n\n            if (expect_false (p->revents & POLLNVAL))\n              fd_kill (EV_A_ p->fd);\n            else\n              fd_event (\n                EV_A_\n                p->fd,\n                (p->revents & (POLLOUT | POLLERR | POLLHUP) ? EV_WRITE : 0)\n                | (p->revents & (POLLIN | POLLERR | POLLHUP) ? EV_READ : 0)\n              );\n          }\n      }\n}\n\nint inline_size\npoll_init (EV_P_ int flags)\n{\n  backend_mintime = 1e-3;\n  backend_modify  = poll_modify;\n  backend_poll    = poll_poll;\n\n  pollidxs = 0; pollidxmax = 0;\n  polls    = 0; pollmax    = 0; pollcnt = 0;\n\n  return EVBACKEND_POLL;\n}\n\nvoid inline_size\npoll_destroy (EV_P)\n{\n  ev_free (pollidxs);\n  ev_free (polls);\n}\n\n"
        },
        {
          "name": "ev_port.c",
          "type": "blob",
          "size": 6.25390625,
          "content": "/*\n * libev solaris event port backend\n *\n * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n/* useful reading:\n *\n * http://bugs.opensolaris.org/view_bug.do?bug_id=6268715 (random results)\n * http://bugs.opensolaris.org/view_bug.do?bug_id=6455223 (just totally broken)\n * http://bugs.opensolaris.org/view_bug.do?bug_id=6873782 (manpage ETIME)\n * http://bugs.opensolaris.org/view_bug.do?bug_id=6874410 (implementation ETIME)\n * http://www.mail-archive.com/networking-discuss@opensolaris.org/msg11898.html ETIME vs. nget\n * http://src.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/lib/libc/port/gen/event_port.c (libc)\n * http://cvs.opensolaris.org/source/xref/onnv/onnv-gate/usr/src/uts/common/fs/portfs/port.c#1325 (kernel)\n */\n\n#include <sys/types.h>\n#include <sys/time.h>\n#include <poll.h>\n#include <port.h>\n#include <string.h>\n#include <errno.h>\n\nvoid inline_speed\nport_associate_and_check (EV_P_ int fd, int ev)\n{\n  if (0 >\n      port_associate (\n         backend_fd, PORT_SOURCE_FD, fd,\n         (ev & EV_READ ? POLLIN : 0)\n         | (ev & EV_WRITE ? POLLOUT : 0),\n         0\n      )\n  )\n    {\n      if (errno == EBADFD)\n        fd_kill (EV_A_ fd);\n      else\n        ev_syserr (\"(libev) port_associate\");\n    }\n}\n\nstatic void\nport_modify (EV_P_ int fd, int oev, int nev)\n{\n  /* we need to reassociate no matter what, as closes are\n   * once more silently being discarded.\n   */\n  if (!nev)\n    {\n      if (oev)\n        port_dissociate (backend_fd, PORT_SOURCE_FD, fd);\n    }\n  else\n    port_associate_and_check (EV_A_ fd, nev);\n}\n\nstatic void\nport_poll (EV_P_ ev_tstamp timeout)\n{\n  int res, i;\n  struct timespec ts;\n  uint_t nget = 1;\n\n  /* we initialise this to something we will skip in the loop, as */\n  /* port_getn can return with nget unchanged, but no indication */\n  /* whether it was the original value or has been updated :/ */\n  port_events [0].portev_source = 0;\n\n  EV_RELEASE_CB;\n  EV_TS_SET (ts, timeout);\n  res = port_getn (backend_fd, port_events, port_eventmax, &nget, &ts);\n  EV_ACQUIRE_CB;\n\n  /* port_getn may or may not set nget on error */\n  /* so we rely on port_events [0].portev_source not being updated */\n  if (res == -1 && errno != ETIME && errno != EINTR)\n    ev_syserr (\"(libev) port_getn (see http://bugs.opensolaris.org/view_bug.do?bug_id=6268715, try LIBEV_FLAGS=3 env variable)\");\n\n  for (i = 0; i < nget; ++i)\n    {\n      if (port_events [i].portev_source == PORT_SOURCE_FD)\n        {\n          int fd = port_events [i].portev_object;\n\n          fd_event (\n            EV_A_\n            fd,\n            (port_events [i].portev_events & (POLLOUT | POLLERR | POLLHUP) ? EV_WRITE : 0)\n            | (port_events [i].portev_events & (POLLIN | POLLERR | POLLHUP) ? EV_READ : 0)\n          );\n\n          fd_change (EV_A_ fd, EV__IOFDSET);\n        }\n    }\n\n  if (expect_false (nget == port_eventmax))\n    {\n      ev_free (port_events);\n      port_eventmax = array_nextsize (sizeof (port_event_t), port_eventmax, port_eventmax + 1);\n      port_events = (port_event_t *)ev_malloc (sizeof (port_event_t) * port_eventmax);\n    }\n}\n\nint inline_size\nport_init (EV_P_ int flags)\n{\n  /* Initialize the kernel queue */\n  if ((backend_fd = port_create ()) < 0)\n    return 0;\n\n  assert ((\"libev: PORT_SOURCE_FD must not be zero\", PORT_SOURCE_FD));\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC); /* not sure if necessary, hopefully doesn't hurt */\n\n  /* if my reading of the opensolaris kernel sources are correct, then\n   * opensolaris does something very stupid: it checks if the time has already\n   * elapsed and doesn't round up if that is the case,m otherwise it DOES round\n   * up. Since we can't know what the case is, we need to guess by using a\n   * \"large enough\" timeout. Normally, 1e-9 would be correct.\n   */\n  backend_mintime = 1e-3; /* needed to compensate for port_getn returning early */\n  backend_modify  = port_modify;\n  backend_poll    = port_poll;\n\n  port_eventmax = 64; /* initial number of events receivable per poll */\n  port_events = (port_event_t *)ev_malloc (sizeof (port_event_t) * port_eventmax);\n\n  return EVBACKEND_PORT;\n}\n\nvoid inline_size\nport_destroy (EV_P)\n{\n  ev_free (port_events);\n}\n\nvoid inline_size\nport_fork (EV_P)\n{\n  close (backend_fd);\n\n  while ((backend_fd = port_create ()) < 0)\n    ev_syserr (\"(libev) port\");\n\n  fcntl (backend_fd, F_SETFD, FD_CLOEXEC);\n\n  /* re-register interest in fds */\n  fd_rearm_all (EV_A);\n}\n\n"
        },
        {
          "name": "ev_select.c",
          "type": "blob",
          "size": 8.6064453125,
          "content": "/*\n * libev select fd activity backend\n *\n * Copyright (c) 2007,2008,2009,2010,2011 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifndef _WIN32\n/* for unix systems */\n# include <inttypes.h>\n# ifndef __hpux\n/* for REAL unix systems */\n#  include <sys/select.h>\n# endif\n#endif\n\n#ifndef EV_SELECT_USE_FD_SET\n# ifdef NFDBITS\n#  define EV_SELECT_USE_FD_SET 0\n# else\n#  define EV_SELECT_USE_FD_SET 1\n# endif\n#endif\n\n#if EV_SELECT_IS_WINSOCKET\n# undef EV_SELECT_USE_FD_SET\n# define EV_SELECT_USE_FD_SET 1\n# undef NFDBITS\n# define NFDBITS 0\n#endif\n\n#if !EV_SELECT_USE_FD_SET\n# define NFDBYTES (NFDBITS / 8)\n#endif\n\n#include <string.h>\n\nstatic void\nselect_modify (EV_P_ int fd, int oev, int nev)\n{\n  if (oev == nev)\n    return;\n\n  {\n#if EV_SELECT_USE_FD_SET\n\n    #if EV_SELECT_IS_WINSOCKET\n    SOCKET handle = anfds [fd].handle;\n    #else\n    int handle = fd;\n    #endif\n\n    assert ((\"libev: fd >= FD_SETSIZE passed to fd_set-based select backend\", fd < FD_SETSIZE));\n\n    /* FD_SET is broken on windows (it adds the fd to a set twice or more,\n     * which eventually leads to overflows). Need to call it only on changes.\n     */\n    #if EV_SELECT_IS_WINSOCKET\n    if ((oev ^ nev) & EV_READ)\n    #endif\n      if (nev & EV_READ)\n        FD_SET (handle, (fd_set *)vec_ri);\n      else\n        FD_CLR (handle, (fd_set *)vec_ri);\n\n    #if EV_SELECT_IS_WINSOCKET\n    if ((oev ^ nev) & EV_WRITE)\n    #endif\n      if (nev & EV_WRITE)\n        FD_SET (handle, (fd_set *)vec_wi);\n      else\n        FD_CLR (handle, (fd_set *)vec_wi);\n\n#else\n\n    int     word = fd / NFDBITS;\n    fd_mask mask = 1UL << (fd % NFDBITS);\n\n    if (expect_false (vec_max <= word))\n      {\n        int new_max = word + 1;\n\n        vec_ri = ev_realloc (vec_ri, new_max * NFDBYTES);\n        vec_ro = ev_realloc (vec_ro, new_max * NFDBYTES); /* could free/malloc */\n        vec_wi = ev_realloc (vec_wi, new_max * NFDBYTES);\n        vec_wo = ev_realloc (vec_wo, new_max * NFDBYTES); /* could free/malloc */\n        #ifdef _WIN32\n        vec_eo = ev_realloc (vec_eo, new_max * NFDBYTES); /* could free/malloc */\n        #endif\n\n        for (; vec_max < new_max; ++vec_max)\n          ((fd_mask *)vec_ri) [vec_max] =\n          ((fd_mask *)vec_wi) [vec_max] = 0;\n      }\n\n    ((fd_mask *)vec_ri) [word] |= mask;\n    if (!(nev & EV_READ))\n      ((fd_mask *)vec_ri) [word] &= ~mask;\n\n    ((fd_mask *)vec_wi) [word] |= mask;\n    if (!(nev & EV_WRITE))\n      ((fd_mask *)vec_wi) [word] &= ~mask;\n#endif\n  }\n}\n\nstatic void\nselect_poll (EV_P_ ev_tstamp timeout)\n{\n  struct timeval tv;\n  int res;\n  int fd_setsize;\n\n  EV_RELEASE_CB;\n  EV_TV_SET (tv, timeout);\n\n#if EV_SELECT_USE_FD_SET\n  fd_setsize = sizeof (fd_set);\n#else\n  fd_setsize = vec_max * NFDBYTES;\n#endif\n\n  memcpy (vec_ro, vec_ri, fd_setsize);\n  memcpy (vec_wo, vec_wi, fd_setsize);\n\n#ifdef _WIN32\n  /* pass in the write set as except set.\n   * the idea behind this is to work around a windows bug that causes\n   * errors to be reported as an exception and not by setting\n   * the writable bit. this is so uncontrollably lame.\n   */\n  memcpy (vec_eo, vec_wi, fd_setsize);\n  res = select (vec_max * NFDBITS, (fd_set *)vec_ro, (fd_set *)vec_wo, (fd_set *)vec_eo, &tv);\n#elif EV_SELECT_USE_FD_SET\n  fd_setsize = anfdmax < FD_SETSIZE ? anfdmax : FD_SETSIZE;\n  res = select (fd_setsize, (fd_set *)vec_ro, (fd_set *)vec_wo, 0, &tv);\n#else\n  res = select (vec_max * NFDBITS, (fd_set *)vec_ro, (fd_set *)vec_wo, 0, &tv);\n#endif\n  EV_ACQUIRE_CB;\n\n  if (expect_false (res < 0))\n    {\n      #if EV_SELECT_IS_WINSOCKET\n      errno = WSAGetLastError ();\n      #endif\n      #ifdef WSABASEERR\n      /* on windows, select returns incompatible error codes, fix this */\n      if (errno >= WSABASEERR && errno < WSABASEERR + 1000)\n        if (errno == WSAENOTSOCK)\n          errno = EBADF;\n        else\n          errno -= WSABASEERR;\n      #endif\n\n      #ifdef _WIN32\n      /* select on windows erroneously returns EINVAL when no fd sets have been\n       * provided (this is documented). what microsoft doesn't tell you that this bug\n       * exists even when the fd sets _are_ provided, so we have to check for this bug\n       * here and emulate by sleeping manually.\n       * we also get EINVAL when the timeout is invalid, but we ignore this case here\n       * and assume that EINVAL always means: you have to wait manually.\n       */\n      if (errno == EINVAL)\n        {\n          if (timeout)\n            {\n              unsigned long ms = timeout * 1e3;\n              Sleep (ms ? ms : 1);\n            }\n\n          return;\n        }\n      #endif\n\n      if (errno == EBADF)\n        fd_ebadf (EV_A);\n      else if (errno == ENOMEM && !syserr_cb)\n        fd_enomem (EV_A);\n      else if (errno != EINTR)\n        ev_syserr (\"(libev) select\");\n\n      return;\n    }\n\n#if EV_SELECT_USE_FD_SET\n\n  {\n    int fd;\n\n    for (fd = 0; fd < anfdmax; ++fd)\n      if (anfds [fd].events)\n        {\n          int events = 0;\n          #if EV_SELECT_IS_WINSOCKET\n          SOCKET handle = anfds [fd].handle;\n          #else\n          int handle = fd;\n          #endif\n\n          if (FD_ISSET (handle, (fd_set *)vec_ro)) events |= EV_READ;\n          if (FD_ISSET (handle, (fd_set *)vec_wo)) events |= EV_WRITE;\n          #ifdef _WIN32\n          if (FD_ISSET (handle, (fd_set *)vec_eo)) events |= EV_WRITE;\n          #endif\n\n          if (expect_true (events))\n            fd_event (EV_A_ fd, events);\n        }\n  }\n\n#else\n\n  {\n    int word, bit;\n    for (word = vec_max; word--; )\n      {\n        fd_mask word_r = ((fd_mask *)vec_ro) [word];\n        fd_mask word_w = ((fd_mask *)vec_wo) [word];\n        #ifdef _WIN32\n        word_w |= ((fd_mask *)vec_eo) [word];\n        #endif\n\n        if (word_r || word_w)\n          for (bit = NFDBITS; bit--; )\n            {\n              fd_mask mask = 1UL << bit;\n              int events = 0;\n\n              events |= word_r & mask ? EV_READ  : 0;\n              events |= word_w & mask ? EV_WRITE : 0;\n\n              if (expect_true (events))\n                fd_event (EV_A_ word * NFDBITS + bit, events);\n            }\n      }\n  }\n\n#endif\n}\n\nint inline_size\nselect_init (EV_P_ int flags)\n{\n  backend_mintime = 1e-6;\n  backend_modify  = select_modify;\n  backend_poll    = select_poll;\n\n#if EV_SELECT_USE_FD_SET\n  vec_ri  = ev_malloc (sizeof (fd_set)); FD_ZERO ((fd_set *)vec_ri);\n  vec_ro  = ev_malloc (sizeof (fd_set));\n  vec_wi  = ev_malloc (sizeof (fd_set)); FD_ZERO ((fd_set *)vec_wi);\n  vec_wo  = ev_malloc (sizeof (fd_set));\n  #ifdef _WIN32\n  vec_eo  = ev_malloc (sizeof (fd_set));\n  #endif\n#else\n  vec_max = 0;\n  vec_ri  = 0;\n  vec_ro  = 0;\n  vec_wi  = 0;\n  vec_wo  = 0;\n  #ifdef _WIN32\n  vec_eo  = 0;\n  #endif\n#endif\n\n  return EVBACKEND_SELECT;\n}\n\nvoid inline_size\nselect_destroy (EV_P)\n{\n  ev_free (vec_ri);\n  ev_free (vec_ro);\n  ev_free (vec_wi);\n  ev_free (vec_wo);\n  #ifdef _WIN32\n  ev_free (vec_eo);\n  #endif\n}\n\n"
        },
        {
          "name": "ev_vars.h",
          "type": "blob",
          "size": 6.0830078125,
          "content": "/*\n * loop member variable declarations\n *\n * Copyright (c) 2007,2008,2009,2010,2011,2012,2013 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#define VARx(type,name) VAR(name, type name)\n\nVARx(ev_tstamp, now_floor) /* last time we refreshed rt_time */\nVARx(ev_tstamp, mn_now)    /* monotonic clock \"now\" */\nVARx(ev_tstamp, rtmn_diff) /* difference realtime - monotonic time */\n\n/* for reverse feeding of events */\nVARx(W *, rfeeds)\nVARx(int, rfeedmax)\nVARx(int, rfeedcnt)\n\nVAR (pendings, ANPENDING *pendings [NUMPRI])\nVAR (pendingmax, int pendingmax [NUMPRI])\nVAR (pendingcnt, int pendingcnt [NUMPRI])\nVARx(int, pendingpri) /* highest priority currently pending */\nVARx(ev_prepare, pending_w) /* dummy pending watcher */\n\nVARx(ev_tstamp, io_blocktime)\nVARx(ev_tstamp, timeout_blocktime)\n\nVARx(int, backend)\nVARx(int, activecnt) /* total number of active events (\"refcount\") */\nVARx(EV_ATOMIC_T, loop_done)  /* signal by ev_break */\n\nVARx(int, backend_fd)\nVARx(ev_tstamp, backend_mintime) /* assumed typical timer resolution */\nVAR (backend_modify, void (*backend_modify)(EV_P_ int fd, int oev, int nev))\nVAR (backend_poll  , void (*backend_poll)(EV_P_ ev_tstamp timeout))\n\nVARx(ANFD *, anfds)\nVARx(int, anfdmax)\n\nVAR (evpipe, int evpipe [2])\nVARx(ev_io, pipe_w)\nVARx(EV_ATOMIC_T, pipe_write_wanted)\nVARx(EV_ATOMIC_T, pipe_write_skipped)\n\n#if !defined(_WIN32) || EV_GENWRAP\nVARx(pid_t, curpid)\n#endif\n\nVARx(char, postfork)  /* true if we need to recreate kernel state after fork */\n\n#if EV_USE_SELECT || EV_GENWRAP\nVARx(void *, vec_ri)\nVARx(void *, vec_ro)\nVARx(void *, vec_wi)\nVARx(void *, vec_wo)\n#if defined(_WIN32) || EV_GENWRAP\nVARx(void *, vec_eo)\n#endif\nVARx(int, vec_max)\n#endif\n\n#if EV_USE_POLL || EV_GENWRAP\nVARx(struct pollfd *, polls)\nVARx(int, pollmax)\nVARx(int, pollcnt)\nVARx(int *, pollidxs) /* maps fds into structure indices */\nVARx(int, pollidxmax)\n#endif\n\n#if EV_USE_EPOLL || EV_GENWRAP\nVARx(struct epoll_event *, epoll_events)\nVARx(int, epoll_eventmax)\nVARx(int *, epoll_eperms)\nVARx(int, epoll_epermcnt)\nVARx(int, epoll_epermmax)\n#endif\n\n#if EV_USE_KQUEUE || EV_GENWRAP\nVARx(pid_t, kqueue_fd_pid)\nVARx(struct kevent *, kqueue_changes)\nVARx(int, kqueue_changemax)\nVARx(int, kqueue_changecnt)\nVARx(struct kevent *, kqueue_events)\nVARx(int, kqueue_eventmax)\n#endif\n\n#if EV_USE_PORT || EV_GENWRAP\nVARx(struct port_event *, port_events)\nVARx(int, port_eventmax)\n#endif\n\n#if EV_USE_IOCP || EV_GENWRAP\nVARx(HANDLE, iocp)\n#endif\n\nVARx(int *, fdchanges)\nVARx(int, fdchangemax)\nVARx(int, fdchangecnt)\n\nVARx(ANHE *, timers)\nVARx(int, timermax)\nVARx(int, timercnt)\n\n#if EV_PERIODIC_ENABLE || EV_GENWRAP\nVARx(ANHE *, periodics)\nVARx(int, periodicmax)\nVARx(int, periodiccnt)\n#endif\n\n#if EV_IDLE_ENABLE || EV_GENWRAP\nVAR (idles, ev_idle **idles [NUMPRI])\nVAR (idlemax, int idlemax [NUMPRI])\nVAR (idlecnt, int idlecnt [NUMPRI])\n#endif\nVARx(int, idleall) /* total number */\n\nVARx(struct ev_prepare **, prepares)\nVARx(int, preparemax)\nVARx(int, preparecnt)\n\nVARx(struct ev_check **, checks)\nVARx(int, checkmax)\nVARx(int, checkcnt)\n\n#if EV_FORK_ENABLE || EV_GENWRAP\nVARx(struct ev_fork **, forks)\nVARx(int, forkmax)\nVARx(int, forkcnt)\n#endif\n\n#if EV_CLEANUP_ENABLE || EV_GENWRAP\nVARx(struct ev_cleanup **, cleanups)\nVARx(int, cleanupmax)\nVARx(int, cleanupcnt)\n#endif\n\n#if EV_ASYNC_ENABLE || EV_GENWRAP\nVARx(EV_ATOMIC_T, async_pending)\nVARx(struct ev_async **, asyncs)\nVARx(int, asyncmax)\nVARx(int, asynccnt)\n#endif\n\n#if EV_USE_INOTIFY || EV_GENWRAP\nVARx(int, fs_fd)\nVARx(ev_io, fs_w)\nVARx(char, fs_2625) /* whether we are running in linux 2.6.25 or newer */\nVAR (fs_hash, ANFS fs_hash [EV_INOTIFY_HASHSIZE])\n#endif\n\nVARx(EV_ATOMIC_T, sig_pending)\n#if EV_USE_SIGNALFD || EV_GENWRAP\nVARx(int, sigfd)\nVARx(ev_io, sigfd_w)\nVARx(sigset_t, sigfd_set)\n#endif\n\nVARx(unsigned int, origflags) /* original loop flags */\n\n#if EV_FEATURE_API || EV_GENWRAP\nVARx(unsigned int, loop_count) /* total number of loop iterations/blocks */\nVARx(unsigned int, loop_depth) /* #ev_run enters - #ev_run leaves */\n\nVARx(void *, userdata)\n/* C++ doesn't support the ev_loop_callback typedef here. stinks. */\nVAR (release_cb, void (*release_cb)(EV_P) EV_THROW)\nVAR (acquire_cb, void (*acquire_cb)(EV_P) EV_THROW)\nVAR (invoke_cb , ev_loop_callback invoke_cb)\n#endif\n\n#undef VARx\n\n"
        },
        {
          "name": "ev_win32.c",
          "type": "blob",
          "size": 5.1953125,
          "content": "/*\n * libev win32 compatibility cruft (_not_ a backend)\n *\n * Copyright (c) 2007,2008,2009 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifdef _WIN32\n\n/* note: the comment below could not be substantiated, but what would I care */\n/* MSDN says this is required to handle SIGFPE */\n/* my wild guess would be that using something floating-pointy is required */\n/* for the crt to do something about it */\nvolatile double SIGFPE_REQ = 0.0f;\n\nstatic SOCKET\nev_tcp_socket (void)\n{\n#if EV_USE_WSASOCKET\n  return WSASocket (AF_INET, SOCK_STREAM, 0, 0, 0, 0);\n#else\n  return socket (AF_INET, SOCK_STREAM, 0);\n#endif\n}\n\n/* oh, the humanity! */\nstatic int\nev_pipe (int filedes [2])\n{\n  struct sockaddr_in addr = { 0 };\n  int addr_size = sizeof (addr);\n  struct sockaddr_in adr2;\n  int adr2_size = sizeof (adr2);\n  SOCKET listener;\n  SOCKET sock [2] = { -1, -1 };\n\n  if ((listener = ev_tcp_socket ()) == INVALID_SOCKET)\n    return -1;\n\n  addr.sin_family = AF_INET;\n  addr.sin_addr.s_addr = htonl (INADDR_LOOPBACK);\n  addr.sin_port = 0;\n\n  if (bind (listener, (struct sockaddr *)&addr, addr_size))\n    goto fail;\n\n  if (getsockname (listener, (struct sockaddr *)&addr, &addr_size))\n    goto fail;\n\n  if (listen (listener, 1))\n    goto fail;\n\n  if ((sock [0] = ev_tcp_socket ()) == INVALID_SOCKET)\n    goto fail;\n\n  if (connect (sock [0], (struct sockaddr *)&addr, addr_size))\n    goto fail;\n\n  /* TODO: returns INVALID_SOCKET on winsock accept, not < 0. fix it */\n  /* when convenient, probably by just removing error checking altogether? */\n  if ((sock [1] = accept (listener, 0, 0)) < 0)\n    goto fail;\n\n  /* windows vista returns fantasy port numbers for sockets:\n   * example for two interconnected tcp sockets:\n   *\n   * (Socket::unpack_sockaddr_in getsockname $sock0)[0] == 53364\n   * (Socket::unpack_sockaddr_in getpeername $sock0)[0] == 53363\n   * (Socket::unpack_sockaddr_in getsockname $sock1)[0] == 53363\n   * (Socket::unpack_sockaddr_in getpeername $sock1)[0] == 53365\n   *\n   * wow! tridirectional sockets!\n   *\n   * this way of checking ports seems to work:\n   */\n  if (getpeername (sock [0], (struct sockaddr *)&addr, &addr_size))\n    goto fail;\n\n  if (getsockname (sock [1], (struct sockaddr *)&adr2, &adr2_size))\n    goto fail;\n\n  errno = WSAEINVAL;\n  if (addr_size != adr2_size\n      || addr.sin_addr.s_addr != adr2.sin_addr.s_addr /* just to be sure, I mean, it's windows */\n      || addr.sin_port        != adr2.sin_port)\n    goto fail;\n\n  closesocket (listener);\n\n#if EV_SELECT_IS_WINSOCKET\n  filedes [0] = EV_WIN32_HANDLE_TO_FD (sock [0]);\n  filedes [1] = EV_WIN32_HANDLE_TO_FD (sock [1]);\n#else\n  /* when select isn't winsocket, we also expect socket, connect, accept etc.\n   * to work on fds */\n  filedes [0] = sock [0];\n  filedes [1] = sock [1];\n#endif\n\n  return 0;\n\nfail:\n  closesocket (listener);\n\n  if (sock [0] != INVALID_SOCKET) closesocket (sock [0]);\n  if (sock [1] != INVALID_SOCKET) closesocket (sock [1]);\n\n  return -1;\n}\n\n#undef pipe\n#define pipe(filedes) ev_pipe (filedes)\n\n#define EV_HAVE_EV_TIME 1\nev_tstamp\nev_time (void)\n{\n  FILETIME ft;\n  ULARGE_INTEGER ui;\n\n  GetSystemTimeAsFileTime (&ft);\n  ui.u.LowPart  = ft.dwLowDateTime;\n  ui.u.HighPart = ft.dwHighDateTime;\n\n  /* msvc cannot convert ulonglong to double... yes, it is that sucky */\n  return (LONGLONG)(ui.QuadPart - 116444736000000000) * 1e-7;\n}\n\n#endif\n\n"
        },
        {
          "name": "ev_wrap.h",
          "type": "blob",
          "size": 5.380859375,
          "content": "/* DO NOT EDIT, automatically generated by update_ev_wrap */\n#ifndef EV_WRAP_H\n#define EV_WRAP_H\n#define acquire_cb ((loop)->acquire_cb)\n#define activecnt ((loop)->activecnt)\n#define anfdmax ((loop)->anfdmax)\n#define anfds ((loop)->anfds)\n#define async_pending ((loop)->async_pending)\n#define asynccnt ((loop)->asynccnt)\n#define asyncmax ((loop)->asyncmax)\n#define asyncs ((loop)->asyncs)\n#define backend ((loop)->backend)\n#define backend_fd ((loop)->backend_fd)\n#define backend_mintime ((loop)->backend_mintime)\n#define backend_modify ((loop)->backend_modify)\n#define backend_poll ((loop)->backend_poll)\n#define checkcnt ((loop)->checkcnt)\n#define checkmax ((loop)->checkmax)\n#define checks ((loop)->checks)\n#define cleanupcnt ((loop)->cleanupcnt)\n#define cleanupmax ((loop)->cleanupmax)\n#define cleanups ((loop)->cleanups)\n#define curpid ((loop)->curpid)\n#define epoll_epermcnt ((loop)->epoll_epermcnt)\n#define epoll_epermmax ((loop)->epoll_epermmax)\n#define epoll_eperms ((loop)->epoll_eperms)\n#define epoll_eventmax ((loop)->epoll_eventmax)\n#define epoll_events ((loop)->epoll_events)\n#define evpipe ((loop)->evpipe)\n#define fdchangecnt ((loop)->fdchangecnt)\n#define fdchangemax ((loop)->fdchangemax)\n#define fdchanges ((loop)->fdchanges)\n#define forkcnt ((loop)->forkcnt)\n#define forkmax ((loop)->forkmax)\n#define forks ((loop)->forks)\n#define fs_2625 ((loop)->fs_2625)\n#define fs_fd ((loop)->fs_fd)\n#define fs_hash ((loop)->fs_hash)\n#define fs_w ((loop)->fs_w)\n#define idleall ((loop)->idleall)\n#define idlecnt ((loop)->idlecnt)\n#define idlemax ((loop)->idlemax)\n#define idles ((loop)->idles)\n#define invoke_cb ((loop)->invoke_cb)\n#define io_blocktime ((loop)->io_blocktime)\n#define iocp ((loop)->iocp)\n#define kqueue_changecnt ((loop)->kqueue_changecnt)\n#define kqueue_changemax ((loop)->kqueue_changemax)\n#define kqueue_changes ((loop)->kqueue_changes)\n#define kqueue_eventmax ((loop)->kqueue_eventmax)\n#define kqueue_events ((loop)->kqueue_events)\n#define kqueue_fd_pid ((loop)->kqueue_fd_pid)\n#define loop_count ((loop)->loop_count)\n#define loop_depth ((loop)->loop_depth)\n#define loop_done ((loop)->loop_done)\n#define mn_now ((loop)->mn_now)\n#define now_floor ((loop)->now_floor)\n#define origflags ((loop)->origflags)\n#define pending_w ((loop)->pending_w)\n#define pendingcnt ((loop)->pendingcnt)\n#define pendingmax ((loop)->pendingmax)\n#define pendingpri ((loop)->pendingpri)\n#define pendings ((loop)->pendings)\n#define periodiccnt ((loop)->periodiccnt)\n#define periodicmax ((loop)->periodicmax)\n#define periodics ((loop)->periodics)\n#define pipe_w ((loop)->pipe_w)\n#define pipe_write_skipped ((loop)->pipe_write_skipped)\n#define pipe_write_wanted ((loop)->pipe_write_wanted)\n#define pollcnt ((loop)->pollcnt)\n#define pollidxmax ((loop)->pollidxmax)\n#define pollidxs ((loop)->pollidxs)\n#define pollmax ((loop)->pollmax)\n#define polls ((loop)->polls)\n#define port_eventmax ((loop)->port_eventmax)\n#define port_events ((loop)->port_events)\n#define postfork ((loop)->postfork)\n#define preparecnt ((loop)->preparecnt)\n#define preparemax ((loop)->preparemax)\n#define prepares ((loop)->prepares)\n#define release_cb ((loop)->release_cb)\n#define rfeedcnt ((loop)->rfeedcnt)\n#define rfeedmax ((loop)->rfeedmax)\n#define rfeeds ((loop)->rfeeds)\n#define rtmn_diff ((loop)->rtmn_diff)\n#define sig_pending ((loop)->sig_pending)\n#define sigfd ((loop)->sigfd)\n#define sigfd_set ((loop)->sigfd_set)\n#define sigfd_w ((loop)->sigfd_w)\n#define timeout_blocktime ((loop)->timeout_blocktime)\n#define timercnt ((loop)->timercnt)\n#define timermax ((loop)->timermax)\n#define timers ((loop)->timers)\n#define userdata ((loop)->userdata)\n#define vec_eo ((loop)->vec_eo)\n#define vec_max ((loop)->vec_max)\n#define vec_ri ((loop)->vec_ri)\n#define vec_ro ((loop)->vec_ro)\n#define vec_wi ((loop)->vec_wi)\n#define vec_wo ((loop)->vec_wo)\n#else\n#undef EV_WRAP_H\n#undef acquire_cb\n#undef activecnt\n#undef anfdmax\n#undef anfds\n#undef async_pending\n#undef asynccnt\n#undef asyncmax\n#undef asyncs\n#undef backend\n#undef backend_fd\n#undef backend_mintime\n#undef backend_modify\n#undef backend_poll\n#undef checkcnt\n#undef checkmax\n#undef checks\n#undef cleanupcnt\n#undef cleanupmax\n#undef cleanups\n#undef curpid\n#undef epoll_epermcnt\n#undef epoll_epermmax\n#undef epoll_eperms\n#undef epoll_eventmax\n#undef epoll_events\n#undef evpipe\n#undef fdchangecnt\n#undef fdchangemax\n#undef fdchanges\n#undef forkcnt\n#undef forkmax\n#undef forks\n#undef fs_2625\n#undef fs_fd\n#undef fs_hash\n#undef fs_w\n#undef idleall\n#undef idlecnt\n#undef idlemax\n#undef idles\n#undef invoke_cb\n#undef io_blocktime\n#undef iocp\n#undef kqueue_changecnt\n#undef kqueue_changemax\n#undef kqueue_changes\n#undef kqueue_eventmax\n#undef kqueue_events\n#undef kqueue_fd_pid\n#undef loop_count\n#undef loop_depth\n#undef loop_done\n#undef mn_now\n#undef now_floor\n#undef origflags\n#undef pending_w\n#undef pendingcnt\n#undef pendingmax\n#undef pendingpri\n#undef pendings\n#undef periodiccnt\n#undef periodicmax\n#undef periodics\n#undef pipe_w\n#undef pipe_write_skipped\n#undef pipe_write_wanted\n#undef pollcnt\n#undef pollidxmax\n#undef pollidxs\n#undef pollmax\n#undef polls\n#undef port_eventmax\n#undef port_events\n#undef postfork\n#undef preparecnt\n#undef preparemax\n#undef prepares\n#undef release_cb\n#undef rfeedcnt\n#undef rfeedmax\n#undef rfeeds\n#undef rtmn_diff\n#undef sig_pending\n#undef sigfd\n#undef sigfd_set\n#undef sigfd_w\n#undef timeout_blocktime\n#undef timercnt\n#undef timermax\n#undef timers\n#undef userdata\n#undef vec_eo\n#undef vec_max\n#undef vec_ri\n#undef vec_ro\n#undef vec_wi\n#undef vec_wo\n#endif\n"
        },
        {
          "name": "event.c",
          "type": "blob",
          "size": 9.716796875,
          "content": "/*\n * libevent compatibility layer\n *\n * Copyright (c) 2007,2008,2009,2010,2012 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#include <stddef.h>\n#include <stdlib.h>\n#include <assert.h>\n\n#ifdef EV_EVENT_H\n# include EV_EVENT_H\n#else\n# include \"event.h\"\n#endif\n\n#if EV_MULTIPLICITY\n# define dLOOPev struct ev_loop *loop = (struct ev_loop *)ev->ev_base\n# define dLOOPbase struct ev_loop *loop = (struct ev_loop *)base\n#else\n# define dLOOPev\n# define dLOOPbase\n#endif\n\n/* never accessed, will always be cast from/to ev_loop */\nstruct event_base\n{\n  int dummy;\n};\n\nstatic struct event_base *ev_x_cur;\n\nstatic ev_tstamp\nev_tv_get (struct timeval *tv)\n{\n  if (tv)\n    {\n      ev_tstamp after = tv->tv_sec + tv->tv_usec * 1e-6;\n      return after ? after : 1e-6;\n    }\n  else\n    return -1.;\n}\n\n#define EVENT_STRINGIFY(s) # s\n#define EVENT_VERSION(a,b) EVENT_STRINGIFY (a) \".\" EVENT_STRINGIFY (b)\n\nconst char *\nevent_get_version (void)\n{\n  /* returns ABI, not API or library, version */\n  return EVENT_VERSION (EV_VERSION_MAJOR, EV_VERSION_MINOR);\n}\n\nconst char *\nevent_get_method (void)\n{\n  return \"libev\";\n}\n\nvoid *event_init (void)\n{\n#if EV_MULTIPLICITY\n  if (ev_x_cur)\n    ev_x_cur = (struct event_base *)ev_loop_new (EVFLAG_AUTO);\n  else\n    ev_x_cur = (struct event_base *)ev_default_loop (EVFLAG_AUTO);\n#else\n  assert ((\"libev: multiple event bases not supported when not compiled with EV_MULTIPLICITY\", !ev_x_cur));\n\n  ev_x_cur = (struct event_base *)(long)ev_default_loop (EVFLAG_AUTO);\n#endif\n\n  return ev_x_cur;\n}\n\nconst char *\nevent_base_get_method (const struct event_base *base)\n{\n  return \"libev\";\n}\n\nstruct event_base *\nevent_base_new (void)\n{\n#if EV_MULTIPLICITY\n  return (struct event_base *)ev_loop_new (EVFLAG_AUTO);\n#else\n  assert ((\"libev: multiple event bases not supported when not compiled with EV_MULTIPLICITY\"));\n  return NULL;\n#endif\n}\n\nvoid event_base_free (struct event_base *base)\n{\n  dLOOPbase;\n\n#if EV_MULTIPLICITY\n  if (!ev_is_default_loop (loop))\n    ev_loop_destroy (loop);\n#endif\n}\n\nint event_dispatch (void)\n{\n  return event_base_dispatch (ev_x_cur);\n}\n\n#ifdef EV_STANDALONE\nvoid event_set_log_callback (event_log_cb cb)\n{\n  /* nop */\n}\n#endif\n\nint event_loop (int flags)\n{\n  return event_base_loop (ev_x_cur, flags);\n}\n\nint event_loopexit (struct timeval *tv)\n{\n  return event_base_loopexit (ev_x_cur, tv);\n}\n\nevent_callback_fn event_get_callback\n(const struct event *ev)\n{\n  return ev->ev_callback;\n}\n\nstatic void\nev_x_cb (struct event *ev, int revents)\n{\n  revents &= EV_READ | EV_WRITE | EV_TIMER | EV_SIGNAL;\n\n  ev->ev_res = revents;\n  ev->ev_callback (ev->ev_fd, (short)revents, ev->ev_arg);\n}\n\nstatic void\nev_x_cb_sig (EV_P_ struct ev_signal *w, int revents)\n{\n  struct event *ev = (struct event *)(((char *)w) - offsetof (struct event, iosig.sig));\n\n  if (revents & EV_ERROR)\n    event_del (ev);\n\n  ev_x_cb (ev, revents);\n}\n\nstatic void\nev_x_cb_io (EV_P_ struct ev_io *w, int revents)\n{\n  struct event *ev = (struct event *)(((char *)w) - offsetof (struct event, iosig.io));\n\n  if ((revents & EV_ERROR) || !(ev->ev_events & EV_PERSIST))\n    event_del (ev);\n\n  ev_x_cb (ev, revents);\n}\n\nstatic void\nev_x_cb_to (EV_P_ struct ev_timer *w, int revents)\n{\n  struct event *ev = (struct event *)(((char *)w) - offsetof (struct event, to));\n\n  event_del (ev);\n\n  ev_x_cb (ev, revents);\n}\n\nvoid event_set (struct event *ev, int fd, short events, void (*cb)(int, short, void *), void *arg)\n{\n  if (events & EV_SIGNAL)\n    ev_init (&ev->iosig.sig, ev_x_cb_sig);\n  else\n    ev_init (&ev->iosig.io, ev_x_cb_io);\n\n  ev_init (&ev->to, ev_x_cb_to);\n\n  ev->ev_base     = ev_x_cur; /* not threadsafe, but it's how libevent works */\n  ev->ev_fd       = fd;\n  ev->ev_events   = events;\n  ev->ev_pri      = 0;\n  ev->ev_callback = cb;\n  ev->ev_arg      = arg;\n  ev->ev_res      = 0;\n  ev->ev_flags    = EVLIST_INIT;\n}\n\nint event_once (int fd, short events, void (*cb)(int, short, void *), void *arg, struct timeval *tv)\n{\n  return event_base_once (ev_x_cur, fd, events, cb, arg, tv);\n}\n\nint event_add (struct event *ev, struct timeval *tv)\n{\n  dLOOPev;\n\n  if (ev->ev_events & EV_SIGNAL)\n    {\n      if (!ev_is_active (&ev->iosig.sig))\n        {\n          ev_signal_set (&ev->iosig.sig, ev->ev_fd);\n          ev_signal_start (EV_A_ &ev->iosig.sig);\n\n          ev->ev_flags |= EVLIST_SIGNAL;\n        }\n    }\n  else if (ev->ev_events & (EV_READ | EV_WRITE))\n    {\n      if (!ev_is_active (&ev->iosig.io))\n        {\n          ev_io_set (&ev->iosig.io, ev->ev_fd, ev->ev_events & (EV_READ | EV_WRITE));\n          ev_io_start (EV_A_ &ev->iosig.io);\n\n          ev->ev_flags |= EVLIST_INSERTED;\n        }\n    }\n\n  if (tv)\n    {\n      ev->to.repeat = ev_tv_get (tv);\n      ev_timer_again (EV_A_ &ev->to);\n      ev->ev_flags |= EVLIST_TIMEOUT;\n    }\n  else\n    {\n      ev_timer_stop (EV_A_ &ev->to);\n      ev->ev_flags &= ~EVLIST_TIMEOUT;\n    }\n\n  ev->ev_flags |= EVLIST_ACTIVE;\n\n  return 0;\n}\n\nint event_del (struct event *ev)\n{\n  dLOOPev;\n\n  if (ev->ev_events & EV_SIGNAL)\n    ev_signal_stop (EV_A_ &ev->iosig.sig);\n  else if (ev->ev_events & (EV_READ | EV_WRITE))\n    ev_io_stop (EV_A_ &ev->iosig.io);\n\n  if (ev_is_active (&ev->to))\n    ev_timer_stop (EV_A_ &ev->to);\n\n  ev->ev_flags = EVLIST_INIT;\n\n  return 0;\n}\n\nvoid event_active (struct event *ev, int res, short ncalls)\n{\n  dLOOPev;\n\n  if (res & EV_TIMEOUT)\n    ev_feed_event (EV_A_ &ev->to, res & EV_TIMEOUT);\n\n  if (res & EV_SIGNAL)\n    ev_feed_event (EV_A_ &ev->iosig.sig, res & EV_SIGNAL);\n\n  if (res & (EV_READ | EV_WRITE))\n    ev_feed_event (EV_A_ &ev->iosig.io, res & (EV_READ | EV_WRITE));\n}\n\nint event_pending (struct event *ev, short events, struct timeval *tv)\n{\n  short revents = 0;\n  dLOOPev;\n\n  if (ev->ev_events & EV_SIGNAL)\n    {\n      /* sig */\n      if (ev_is_active (&ev->iosig.sig) || ev_is_pending (&ev->iosig.sig))\n        revents |= EV_SIGNAL;\n    }\n  else if (ev->ev_events & (EV_READ | EV_WRITE))\n    {\n      /* io */\n      if (ev_is_active (&ev->iosig.io) || ev_is_pending (&ev->iosig.io))\n        revents |= ev->ev_events & (EV_READ | EV_WRITE);\n    }\n\n  if (ev->ev_events & EV_TIMEOUT || ev_is_active (&ev->to) || ev_is_pending (&ev->to))\n    {\n      revents |= EV_TIMEOUT;\n\n      if (tv)\n        {\n          ev_tstamp at = ev_now (EV_A);\n\n          tv->tv_sec  = (long)at;\n          tv->tv_usec = (long)((at - (ev_tstamp)tv->tv_sec) * 1e6);\n        }\n    }\n\n  return events & revents;\n}\n\nint event_priority_init (int npri)\n{\n  return event_base_priority_init (ev_x_cur, npri);\n}\n\nint event_priority_set (struct event *ev, int pri)\n{\n  ev->ev_pri = pri;\n\n  return 0;\n}\n\nint event_base_set (struct event_base *base, struct event *ev)\n{\n  ev->ev_base = base;\n\n  return 0;\n}\n\nint event_base_loop (struct event_base *base, int flags)\n{\n  dLOOPbase;\n\n  return !ev_run (EV_A_ flags);\n}\n\nint event_base_dispatch (struct event_base *base)\n{\n  return event_base_loop (base, 0);\n}\n\nstatic void\nev_x_loopexit_cb (int revents, void *base)\n{\n  dLOOPbase;\n\n  ev_break (EV_A_ EVBREAK_ONE);\n}\n\nint event_base_loopexit (struct event_base *base, struct timeval *tv)\n{\n  ev_tstamp after = ev_tv_get (tv);\n  dLOOPbase;\n\n  ev_once (EV_A_ -1, 0, after >= 0. ? after : 0., ev_x_loopexit_cb, (void *)base);\n\n  return 0;\n}\n\nstruct ev_x_once\n{\n  int fd;\n  void (*cb)(int, short, void *);\n  void *arg;\n};\n\nstatic void\nev_x_once_cb (int revents, void *arg)\n{\n  struct ev_x_once *once = (struct ev_x_once *)arg;\n\n  once->cb (once->fd, (short)revents, once->arg);\n  free (once);\n}\n\nint event_base_once (struct event_base *base, int fd, short events, void (*cb)(int, short, void *), void *arg, struct timeval *tv)\n{\n  struct ev_x_once *once = (struct ev_x_once *)malloc (sizeof (struct ev_x_once));\n  dLOOPbase;\n\n  if (!once)\n    return -1;\n\n  once->fd  = fd;\n  once->cb  = cb;\n  once->arg = arg;\n\n  ev_once (EV_A_ fd, events & (EV_READ | EV_WRITE), ev_tv_get (tv), ev_x_once_cb, (void *)once);\n\n  return 0;\n}\n\nint event_base_priority_init (struct event_base *base, int npri)\n{\n  /*dLOOPbase;*/\n\n  return 0;\n}\n\n"
        },
        {
          "name": "event.h",
          "type": "blob",
          "size": 6.10546875,
          "content": "/*\n * libevent compatibility header, only core events supported\n *\n * Copyright (c) 2007,2008,2010,2012 Marc Alexander Lehmann <libev@schmorp.de>\n * All rights reserved.\n *\n * Redistribution and use in source and binary forms, with or without modifica-\n * tion, are permitted provided that the following conditions are met:\n *\n *   1.  Redistributions of source code must retain the above copyright notice,\n *       this list of conditions and the following disclaimer.\n *\n *   2.  Redistributions in binary form must reproduce the above copyright\n *       notice, this list of conditions and the following disclaimer in the\n *       documentation and/or other materials provided with the distribution.\n *\n * THIS SOFTWARE IS PROVIDED BY THE AUTHOR ``AS IS'' AND ANY EXPRESS OR IMPLIED\n * WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MER-\n * CHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.  IN NO\n * EVENT SHALL THE AUTHOR BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPE-\n * CIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\n * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;\n * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,\n * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTH-\n * ERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED\n * OF THE POSSIBILITY OF SUCH DAMAGE.\n *\n * Alternatively, the contents of this file may be used under the terms of\n * the GNU General Public License (\"GPL\") version 2 or any later version,\n * in which case the provisions of the GPL are applicable instead of\n * the above. If you wish to allow the use of your version of this file\n * only under the terms of the GPL and not to allow others to use your\n * version of this file under the BSD license, indicate your decision\n * by deleting the provisions above and replace them with the notice\n * and other provisions required by the GPL. If you do not delete the\n * provisions above, a recipient may use your version of this file under\n * either the BSD or the GPL.\n */\n\n#ifndef EVENT_H_\n#define EVENT_H_\n\n#ifdef EV_H\n# include EV_H\n#else\n# include \"ev.h\"\n#endif\n\n#ifndef EVLOOP_NONBLOCK\n# define EVLOOP_NONBLOCK EVRUN_NOWAIT\n#endif\n#ifndef EVLOOP_ONESHOT\n# define EVLOOP_ONESHOT EVRUN_ONCE\n#endif\n#ifndef EV_TIMEOUT\n# define EV_TIMEOUT EV_TIMER\n#endif\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n/* we need sys/time.h for struct timeval only */\n#if !defined (WIN32) || defined (__MINGW32__)\n# include <time.h> /* mingw seems to need this, for whatever reason */\n# include <sys/time.h>\n#endif\n\nstruct event_base;\n\n#define EVLIST_TIMEOUT  0x01\n#define EVLIST_INSERTED 0x02\n#define EVLIST_SIGNAL   0x04\n#define EVLIST_ACTIVE   0x08\n#define EVLIST_INTERNAL 0x10\n#define EVLIST_INIT     0x80\n\ntypedef void (*event_callback_fn)(int, short, void *);\n\nstruct event\n{\n  /* libev watchers we map onto */\n  union {\n    struct ev_io io;\n    struct ev_signal sig;\n  } iosig;\n  struct ev_timer to;\n\n  /* compatibility slots */\n  struct event_base *ev_base;\n  event_callback_fn ev_callback;\n  void *ev_arg;\n  int ev_fd;\n  int ev_pri;\n  int ev_res;\n  int ev_flags;\n  short ev_events;\n};\n\nevent_callback_fn event_get_callback (const struct event *ev);\n\n#define EV_READ                    EV_READ\n#define EV_WRITE                   EV_WRITE\n#define EV_PERSIST                 0x10\n#define EV_ET                      0x20 /* nop */\n\n#define EVENT_SIGNAL(ev)           ((int) (ev)->ev_fd)\n#define EVENT_FD(ev)               ((int) (ev)->ev_fd)\n\n#define event_initialized(ev)      ((ev)->ev_flags & EVLIST_INIT)\n\n#define evtimer_add(ev,tv)         event_add (ev, tv)\n#define evtimer_set(ev,cb,data)    event_set (ev, -1, 0, cb, data)\n#define evtimer_del(ev)            event_del (ev)\n#define evtimer_pending(ev,tv)     event_pending (ev, EV_TIMEOUT, tv)\n#define evtimer_initialized(ev)    event_initialized (ev)\n\n#define timeout_add(ev,tv)         evtimer_add (ev, tv)\n#define timeout_set(ev,cb,data)    evtimer_set (ev, cb, data)\n#define timeout_del(ev)            evtimer_del (ev)\n#define timeout_pending(ev,tv)     evtimer_pending (ev, tv)\n#define timeout_initialized(ev)    evtimer_initialized (ev)\n\n#define signal_add(ev,tv)          event_add (ev, tv)\n#define signal_set(ev,sig,cb,data) event_set (ev, sig, EV_SIGNAL | EV_PERSIST, cb, data)\n#define signal_del(ev)             event_del (ev)\n#define signal_pending(ev,tv)      event_pending (ev, EV_SIGNAL, tv)\n#define signal_initialized(ev)     event_initialized (ev)\n\nconst char *event_get_version (void);\nconst char *event_get_method (void);\n\nvoid *event_init (void);\nvoid event_base_free (struct event_base *base);\n\n#define EVLOOP_ONCE      EVLOOP_ONESHOT\nint event_loop (int);\nint event_loopexit (struct timeval *tv);\nint event_dispatch (void);\n\n#define _EVENT_LOG_DEBUG 0\n#define _EVENT_LOG_MSG   1\n#define _EVENT_LOG_WARN  2\n#define _EVENT_LOG_ERR   3\ntypedef void (*event_log_cb)(int severity, const char *msg);\nvoid event_set_log_callback(event_log_cb cb);\n\nvoid event_set (struct event *ev, int fd, short events, void (*cb)(int, short, void *), void *arg);\nint event_once (int fd, short events, void (*cb)(int, short, void *), void *arg, struct timeval *tv);\n\nint event_add (struct event *ev, struct timeval *tv);\nint event_del (struct event *ev);\nvoid event_active (struct event *ev, int res, short ncalls); /* ncalls is being ignored */\n\nint event_pending (struct event *ev, short, struct timeval *tv);\n\nint event_priority_init (int npri);\nint event_priority_set (struct event *ev, int pri);\n\nstruct event_base *event_base_new (void);\nconst char *event_base_get_method (const struct event_base *);\nint event_base_set (struct event_base *base, struct event *ev);\nint event_base_loop (struct event_base *base, int);\nint event_base_loopexit (struct event_base *base, struct timeval *tv);\nint event_base_dispatch (struct event_base *base);\nint event_base_once (struct event_base *base, int fd, short events, void (*cb)(int, short, void *), void *arg, struct timeval *tv);\nint event_base_priority_init (struct event_base *base, int fd);\n\n/* next line is different in the libevent+libev version */\n/*libevent-include*/\n\n#ifdef __cplusplus\n}\n#endif\n\n#endif\n\n"
        },
        {
          "name": "install-sh",
          "type": "blob",
          "size": 13.6689453125,
          "content": "#!/bin/sh\n# install - install a program, script, or datafile\n\nscriptversion=2011-11-20.07; # UTC\n\n# This originates from X11R5 (mit/util/scripts/install.sh), which was\n# later released in X11R6 (xc/config/util/install.sh) with the\n# following copyright and license.\n#\n# Copyright (C) 1994 X Consortium\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to\n# deal in the Software without restriction, including without limitation the\n# rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n# sell copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE\n# X CONSORTIUM BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN\n# AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNEC-\n# TION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n#\n# Except as contained in this notice, the name of the X Consortium shall not\n# be used in advertising or otherwise to promote the sale, use or other deal-\n# ings in this Software without prior written authorization from the X Consor-\n# tium.\n#\n#\n# FSF changes to this file are in the public domain.\n#\n# Calling this script install-sh is preferred over install.sh, to prevent\n# 'make' implicit rules from creating a file called install from it\n# when there is no Makefile.\n#\n# This script is compatible with the BSD install script, but was written\n# from scratch.\n\nnl='\n'\nIFS=\" \"\"\t$nl\"\n\n# set DOITPROG to echo to test this script\n\n# Don't use :- since 4.3BSD and earlier shells don't like it.\ndoit=${DOITPROG-}\nif test -z \"$doit\"; then\n  doit_exec=exec\nelse\n  doit_exec=$doit\nfi\n\n# Put in absolute file names if you don't have them in your path;\n# or use environment vars.\n\nchgrpprog=${CHGRPPROG-chgrp}\nchmodprog=${CHMODPROG-chmod}\nchownprog=${CHOWNPROG-chown}\ncmpprog=${CMPPROG-cmp}\ncpprog=${CPPROG-cp}\nmkdirprog=${MKDIRPROG-mkdir}\nmvprog=${MVPROG-mv}\nrmprog=${RMPROG-rm}\nstripprog=${STRIPPROG-strip}\n\nposix_glob='?'\ninitialize_posix_glob='\n  test \"$posix_glob\" != \"?\" || {\n    if (set -f) 2>/dev/null; then\n      posix_glob=\n    else\n      posix_glob=:\n    fi\n  }\n'\n\nposix_mkdir=\n\n# Desired mode of installed file.\nmode=0755\n\nchgrpcmd=\nchmodcmd=$chmodprog\nchowncmd=\nmvcmd=$mvprog\nrmcmd=\"$rmprog -f\"\nstripcmd=\n\nsrc=\ndst=\ndir_arg=\ndst_arg=\n\ncopy_on_change=false\nno_target_directory=\n\nusage=\"\\\nUsage: $0 [OPTION]... [-T] SRCFILE DSTFILE\n   or: $0 [OPTION]... SRCFILES... DIRECTORY\n   or: $0 [OPTION]... -t DIRECTORY SRCFILES...\n   or: $0 [OPTION]... -d DIRECTORIES...\n\nIn the 1st form, copy SRCFILE to DSTFILE.\nIn the 2nd and 3rd, copy all SRCFILES to DIRECTORY.\nIn the 4th, create DIRECTORIES.\n\nOptions:\n     --help     display this help and exit.\n     --version  display version info and exit.\n\n  -c            (ignored)\n  -C            install only if different (preserve the last data modification time)\n  -d            create directories instead of installing files.\n  -g GROUP      $chgrpprog installed files to GROUP.\n  -m MODE       $chmodprog installed files to MODE.\n  -o USER       $chownprog installed files to USER.\n  -s            $stripprog installed files.\n  -t DIRECTORY  install into DIRECTORY.\n  -T            report an error if DSTFILE is a directory.\n\nEnvironment variables override the default commands:\n  CHGRPPROG CHMODPROG CHOWNPROG CMPPROG CPPROG MKDIRPROG MVPROG\n  RMPROG STRIPPROG\n\"\n\nwhile test $# -ne 0; do\n  case $1 in\n    -c) ;;\n\n    -C) copy_on_change=true;;\n\n    -d) dir_arg=true;;\n\n    -g) chgrpcmd=\"$chgrpprog $2\"\n\tshift;;\n\n    --help) echo \"$usage\"; exit $?;;\n\n    -m) mode=$2\n\tcase $mode in\n\t  *' '* | *'\t'* | *'\n'*\t  | *'*'* | *'?'* | *'['*)\n\t    echo \"$0: invalid mode: $mode\" >&2\n\t    exit 1;;\n\tesac\n\tshift;;\n\n    -o) chowncmd=\"$chownprog $2\"\n\tshift;;\n\n    -s) stripcmd=$stripprog;;\n\n    -t) dst_arg=$2\n\t# Protect names problematic for 'test' and other utilities.\n\tcase $dst_arg in\n\t  -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n\tesac\n\tshift;;\n\n    -T) no_target_directory=true;;\n\n    --version) echo \"$0 $scriptversion\"; exit $?;;\n\n    --)\tshift\n\tbreak;;\n\n    -*)\techo \"$0: invalid option: $1\" >&2\n\texit 1;;\n\n    *)  break;;\n  esac\n  shift\ndone\n\nif test $# -ne 0 && test -z \"$dir_arg$dst_arg\"; then\n  # When -d is used, all remaining arguments are directories to create.\n  # When -t is used, the destination is already specified.\n  # Otherwise, the last argument is the destination.  Remove it from $@.\n  for arg\n  do\n    if test -n \"$dst_arg\"; then\n      # $@ is not empty: it contains at least $arg.\n      set fnord \"$@\" \"$dst_arg\"\n      shift # fnord\n    fi\n    shift # arg\n    dst_arg=$arg\n    # Protect names problematic for 'test' and other utilities.\n    case $dst_arg in\n      -* | [=\\(\\)!]) dst_arg=./$dst_arg;;\n    esac\n  done\nfi\n\nif test $# -eq 0; then\n  if test -z \"$dir_arg\"; then\n    echo \"$0: no input file specified.\" >&2\n    exit 1\n  fi\n  # It's OK to call 'install-sh -d' without argument.\n  # This can happen when creating conditional directories.\n  exit 0\nfi\n\nif test -z \"$dir_arg\"; then\n  do_exit='(exit $ret); exit $ret'\n  trap \"ret=129; $do_exit\" 1\n  trap \"ret=130; $do_exit\" 2\n  trap \"ret=141; $do_exit\" 13\n  trap \"ret=143; $do_exit\" 15\n\n  # Set umask so as not to create temps with too-generous modes.\n  # However, 'strip' requires both read and write access to temps.\n  case $mode in\n    # Optimize common cases.\n    *644) cp_umask=133;;\n    *755) cp_umask=22;;\n\n    *[0-7])\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw='% 200'\n      fi\n      cp_umask=`expr '(' 777 - $mode % 1000 ')' $u_plus_rw`;;\n    *)\n      if test -z \"$stripcmd\"; then\n\tu_plus_rw=\n      else\n\tu_plus_rw=,u+rw\n      fi\n      cp_umask=$mode$u_plus_rw;;\n  esac\nfi\n\nfor src\ndo\n  # Protect names problematic for 'test' and other utilities.\n  case $src in\n    -* | [=\\(\\)!]) src=./$src;;\n  esac\n\n  if test -n \"$dir_arg\"; then\n    dst=$src\n    dstdir=$dst\n    test -d \"$dstdir\"\n    dstdir_status=$?\n  else\n\n    # Waiting for this to be detected by the \"$cpprog $src $dsttmp\" command\n    # might cause directories to be created, which would be especially bad\n    # if $src (and thus $dsttmp) contains '*'.\n    if test ! -f \"$src\" && test ! -d \"$src\"; then\n      echo \"$0: $src does not exist.\" >&2\n      exit 1\n    fi\n\n    if test -z \"$dst_arg\"; then\n      echo \"$0: no destination specified.\" >&2\n      exit 1\n    fi\n    dst=$dst_arg\n\n    # If destination is a directory, append the input filename; won't work\n    # if double slashes aren't ignored.\n    if test -d \"$dst\"; then\n      if test -n \"$no_target_directory\"; then\n\techo \"$0: $dst_arg: Is a directory\" >&2\n\texit 1\n      fi\n      dstdir=$dst\n      dst=$dstdir/`basename \"$src\"`\n      dstdir_status=0\n    else\n      # Prefer dirname, but fall back on a substitute if dirname fails.\n      dstdir=`\n\t(dirname \"$dst\") 2>/dev/null ||\n\texpr X\"$dst\" : 'X\\(.*[^/]\\)//*[^/][^/]*/*$' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)[^/]' \\| \\\n\t     X\"$dst\" : 'X\\(//\\)$' \\| \\\n\t     X\"$dst\" : 'X\\(/\\)' \\| . 2>/dev/null ||\n\techo X\"$dst\" |\n\t    sed '/^X\\(.*[^/]\\)\\/\\/*[^/][^/]*\\/*$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)[^/].*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\/\\)$/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t /^X\\(\\/\\).*/{\n\t\t   s//\\1/\n\t\t   q\n\t\t }\n\t\t s/.*/./; q'\n      `\n\n      test -d \"$dstdir\"\n      dstdir_status=$?\n    fi\n  fi\n\n  obsolete_mkdir_used=false\n\n  if test $dstdir_status != 0; then\n    case $posix_mkdir in\n      '')\n\t# Create intermediate dirs using mode 755 as modified by the umask.\n\t# This is like FreeBSD 'install' as of 1997-10-28.\n\tumask=`umask`\n\tcase $stripcmd.$umask in\n\t  # Optimize common cases.\n\t  *[2367][2367]) mkdir_umask=$umask;;\n\t  .*0[02][02] | .[02][02] | .[02]) mkdir_umask=22;;\n\n\t  *[0-7])\n\t    mkdir_umask=`expr $umask + 22 \\\n\t      - $umask % 100 % 40 + $umask % 20 \\\n\t      - $umask % 10 % 4 + $umask % 2\n\t    `;;\n\t  *) mkdir_umask=$umask,go-w;;\n\tesac\n\n\t# With -d, create the new directory with the user-specified mode.\n\t# Otherwise, rely on $mkdir_umask.\n\tif test -n \"$dir_arg\"; then\n\t  mkdir_mode=-m$mode\n\telse\n\t  mkdir_mode=\n\tfi\n\n\tposix_mkdir=false\n\tcase $umask in\n\t  *[123567][0-7][0-7])\n\t    # POSIX mkdir -p sets u+wx bits regardless of umask, which\n\t    # is incompatible with FreeBSD 'install' when (umask & 300) != 0.\n\t    ;;\n\t  *)\n\t    tmpdir=${TMPDIR-/tmp}/ins$RANDOM-$$\n\t    trap 'ret=$?; rmdir \"$tmpdir/d\" \"$tmpdir\" 2>/dev/null; exit $ret' 0\n\n\t    if (umask $mkdir_umask &&\n\t\texec $mkdirprog $mkdir_mode -p -- \"$tmpdir/d\") >/dev/null 2>&1\n\t    then\n\t      if test -z \"$dir_arg\" || {\n\t\t   # Check for POSIX incompatibilities with -m.\n\t\t   # HP-UX 11.23 and IRIX 6.5 mkdir -m -p sets group- or\n\t\t   # other-writable bit of parent directory when it shouldn't.\n\t\t   # FreeBSD 6.1 mkdir -m -p sets mode of existing directory.\n\t\t   ls_ld_tmpdir=`ls -ld \"$tmpdir\"`\n\t\t   case $ls_ld_tmpdir in\n\t\t     d????-?r-*) different_mode=700;;\n\t\t     d????-?--*) different_mode=755;;\n\t\t     *) false;;\n\t\t   esac &&\n\t\t   $mkdirprog -m$different_mode -p -- \"$tmpdir\" && {\n\t\t     ls_ld_tmpdir_1=`ls -ld \"$tmpdir\"`\n\t\t     test \"$ls_ld_tmpdir\" = \"$ls_ld_tmpdir_1\"\n\t\t   }\n\t\t }\n\t      then posix_mkdir=:\n\t      fi\n\t      rmdir \"$tmpdir/d\" \"$tmpdir\"\n\t    else\n\t      # Remove any dirs left behind by ancient mkdir implementations.\n\t      rmdir ./$mkdir_mode ./-p ./-- 2>/dev/null\n\t    fi\n\t    trap '' 0;;\n\tesac;;\n    esac\n\n    if\n      $posix_mkdir && (\n\tumask $mkdir_umask &&\n\t$doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\"\n      )\n    then :\n    else\n\n      # The umask is ridiculous, or mkdir does not conform to POSIX,\n      # or it failed possibly due to a race condition.  Create the\n      # directory the slow way, step by step, checking for races as we go.\n\n      case $dstdir in\n\t/*) prefix='/';;\n\t[-=\\(\\)!]*) prefix='./';;\n\t*)  prefix='';;\n      esac\n\n      eval \"$initialize_posix_glob\"\n\n      oIFS=$IFS\n      IFS=/\n      $posix_glob set -f\n      set fnord $dstdir\n      shift\n      $posix_glob set +f\n      IFS=$oIFS\n\n      prefixes=\n\n      for d\n      do\n\ttest X\"$d\" = X && continue\n\n\tprefix=$prefix$d\n\tif test -d \"$prefix\"; then\n\t  prefixes=\n\telse\n\t  if $posix_mkdir; then\n\t    (umask=$mkdir_umask &&\n\t     $doit_exec $mkdirprog $mkdir_mode -p -- \"$dstdir\") && break\n\t    # Don't fail if two instances are running concurrently.\n\t    test -d \"$prefix\" || exit 1\n\t  else\n\t    case $prefix in\n\t      *\\'*) qprefix=`echo \"$prefix\" | sed \"s/'/'\\\\\\\\\\\\\\\\''/g\"`;;\n\t      *) qprefix=$prefix;;\n\t    esac\n\t    prefixes=\"$prefixes '$qprefix'\"\n\t  fi\n\tfi\n\tprefix=$prefix/\n      done\n\n      if test -n \"$prefixes\"; then\n\t# Don't fail if two instances are running concurrently.\n\t(umask $mkdir_umask &&\n\t eval \"\\$doit_exec \\$mkdirprog $prefixes\") ||\n\t  test -d \"$dstdir\" || exit 1\n\tobsolete_mkdir_used=true\n      fi\n    fi\n  fi\n\n  if test -n \"$dir_arg\"; then\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dst\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dst\"; } &&\n    { test \"$obsolete_mkdir_used$chowncmd$chgrpcmd\" = false ||\n      test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dst\"; } || exit 1\n  else\n\n    # Make a couple of temp file names in the proper directory.\n    dsttmp=$dstdir/_inst.$$_\n    rmtmp=$dstdir/_rm.$$_\n\n    # Trap to clean up those temp files at exit.\n    trap 'ret=$?; rm -f \"$dsttmp\" \"$rmtmp\" && exit $ret' 0\n\n    # Copy the file name to the temp name.\n    (umask $cp_umask && $doit_exec $cpprog \"$src\" \"$dsttmp\") &&\n\n    # and set any options; do chmod last to preserve setuid bits.\n    #\n    # If any of these fail, we abort the whole thing.  If we want to\n    # ignore errors from any of these, just make sure not to ignore\n    # errors from the above \"$doit $cpprog $src $dsttmp\" command.\n    #\n    { test -z \"$chowncmd\" || $doit $chowncmd \"$dsttmp\"; } &&\n    { test -z \"$chgrpcmd\" || $doit $chgrpcmd \"$dsttmp\"; } &&\n    { test -z \"$stripcmd\" || $doit $stripcmd \"$dsttmp\"; } &&\n    { test -z \"$chmodcmd\" || $doit $chmodcmd $mode \"$dsttmp\"; } &&\n\n    # If -C, don't bother to copy if it wouldn't change the file.\n    if $copy_on_change &&\n       old=`LC_ALL=C ls -dlL \"$dst\"\t2>/dev/null` &&\n       new=`LC_ALL=C ls -dlL \"$dsttmp\"\t2>/dev/null` &&\n\n       eval \"$initialize_posix_glob\" &&\n       $posix_glob set -f &&\n       set X $old && old=:$2:$4:$5:$6 &&\n       set X $new && new=:$2:$4:$5:$6 &&\n       $posix_glob set +f &&\n\n       test \"$old\" = \"$new\" &&\n       $cmpprog \"$dst\" \"$dsttmp\" >/dev/null 2>&1\n    then\n      rm -f \"$dsttmp\"\n    else\n      # Rename the file to the real destination.\n      $doit $mvcmd -f \"$dsttmp\" \"$dst\" 2>/dev/null ||\n\n      # The rename failed, perhaps because mv can't rename something else\n      # to itself, or perhaps because mv is so ancient that it does not\n      # support -f.\n      {\n\t# Now remove or move aside any old file at destination location.\n\t# We try this two ways since rm can't unlink itself on some\n\t# systems and the destination file might be busy for other\n\t# reasons.  In this case, the final cleanup might fail but the new\n\t# file should still install successfully.\n\t{\n\t  test ! -f \"$dst\" ||\n\t  $doit $rmcmd -f \"$dst\" 2>/dev/null ||\n\t  { $doit $mvcmd -f \"$dst\" \"$rmtmp\" 2>/dev/null &&\n\t    { $doit $rmcmd -f \"$rmtmp\" 2>/dev/null; :; }\n\t  } ||\n\t  { echo \"$0: cannot unlink or rename $dst\" >&2\n\t    (exit 1); exit 1\n\t  }\n\t} &&\n\n\t# Now rename the file to the real destination.\n\t$doit $mvcmd \"$dsttmp\" \"$dst\"\n      }\n    fi || exit 1\n\n    trap '' 0\n  fi\ndone\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "libev.m4",
          "type": "blob",
          "size": 1.53125,
          "content": "dnl this file is part of libev, do not make local modifications\ndnl http://software.schmorp.de/pkg/libev\n\ndnl libev support\nAC_CHECK_HEADERS(sys/inotify.h sys/epoll.h sys/event.h port.h poll.h sys/select.h sys/eventfd.h sys/signalfd.h)\n \nAC_CHECK_FUNCS(inotify_init epoll_ctl kqueue port_create poll select eventfd signalfd)\n \nAC_CHECK_FUNCS(clock_gettime, [], [\n   dnl on linux, try syscall wrapper first\n   if test $(uname) = Linux; then\n      AC_MSG_CHECKING(for clock_gettime syscall)\n      AC_LINK_IFELSE([AC_LANG_PROGRAM(\n                      [#include <unistd.h>\n                       #include <sys/syscall.h>\n                       #include <time.h>],\n                      [struct timespec ts; int status = syscall (SYS_clock_gettime, CLOCK_REALTIME, &ts)])],\n                     [ac_have_clock_syscall=1\n                      AC_DEFINE(HAVE_CLOCK_SYSCALL, 1, Define to 1 to use the syscall interface for clock_gettime)\n                      AC_MSG_RESULT(yes)],\n                     [AC_MSG_RESULT(no)])\n   fi\n   if test -z \"$LIBEV_M4_AVOID_LIBRT\" && test -z \"$ac_have_clock_syscall\"; then\n      AC_CHECK_LIB(rt, clock_gettime)\n      unset ac_cv_func_clock_gettime\n      AC_CHECK_FUNCS(clock_gettime)\n   fi\n])\n\nAC_CHECK_FUNCS(nanosleep, [], [\n   if test -z \"$LIBEV_M4_AVOID_LIBRT\"; then\n      AC_CHECK_LIB(rt, nanosleep)\n      unset ac_cv_func_nanosleep\n      AC_CHECK_FUNCS(nanosleep)\n   fi\n])\n\nif test -z \"$LIBEV_M4_AVOID_LIBM\"; then\n   LIBM=m\nfi\nAC_SEARCH_LIBS(floor, $LIBM, [AC_DEFINE(HAVE_FLOOR, 1, Define to 1 if the floor function is available)])\n\n"
        },
        {
          "name": "ltmain.sh",
          "type": "blob",
          "size": 277.0234375,
          "content": "\n# libtool (GNU libtool) 2.4.2\n# Written by Gordon Matzigkeit <gord@gnu.ai.mit.edu>, 1996\n\n# Copyright (C) 1996, 1997, 1998, 1999, 2000, 2001, 2003, 2004, 2005, 2006,\n# 2007, 2008, 2009, 2010, 2011 Free Software Foundation, Inc.\n# This is free software; see the source for copying conditions.  There is NO\n# warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n\n# GNU Libtool is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2 of the License, or\n# (at your option) any later version.\n#\n# As a special exception to the GNU General Public License,\n# if you distribute this file as part of a program or library that\n# is built using GNU Libtool, you may include this file under the\n# same distribution terms that you use for the rest of that program.\n#\n# GNU Libtool is distributed in the hope that it will be useful, but\n# WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n# General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with GNU Libtool; see the file COPYING.  If not, a copy\n# can be downloaded from http://www.gnu.org/licenses/gpl.html,\n# or obtained by writing to the Free Software Foundation, Inc.,\n# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.\n\n# Usage: $progname [OPTION]... [MODE-ARG]...\n#\n# Provide generalized library-building support services.\n#\n#       --config             show all configuration variables\n#       --debug              enable verbose shell tracing\n#   -n, --dry-run            display commands without modifying any files\n#       --features           display basic configuration information and exit\n#       --mode=MODE          use operation mode MODE\n#       --preserve-dup-deps  don't remove duplicate dependency libraries\n#       --quiet, --silent    don't print informational messages\n#       --no-quiet, --no-silent\n#                            print informational messages (default)\n#       --no-warn            don't display warning messages\n#       --tag=TAG            use configuration variables from tag TAG\n#   -v, --verbose            print more informational messages than default\n#       --no-verbose         don't print the extra informational messages\n#       --version            print version information\n#   -h, --help, --help-all   print short, long, or detailed help message\n#\n# MODE must be one of the following:\n#\n#         clean              remove files from the build directory\n#         compile            compile a source file into a libtool object\n#         execute            automatically set library path, then run a program\n#         finish             complete the installation of libtool libraries\n#         install            install libraries or executables\n#         link               create a library or an executable\n#         uninstall          remove libraries from an installed directory\n#\n# MODE-ARGS vary depending on the MODE.  When passed as first option,\n# `--mode=MODE' may be abbreviated as `MODE' or a unique abbreviation of that.\n# Try `$progname --help --mode=MODE' for a more detailed description of MODE.\n#\n# When reporting a bug, please describe a test case to reproduce it and\n# include the following information:\n#\n#         host-triplet:\t$host\n#         shell:\t\t$SHELL\n#         compiler:\t\t$LTCC\n#         compiler flags:\t\t$LTCFLAGS\n#         linker:\t\t$LD (gnu? $with_gnu_ld)\n#         $progname:\t(GNU libtool) 2.4.2 Debian-2.4.2-1.11\n#         automake:\t$automake_version\n#         autoconf:\t$autoconf_version\n#\n# Report bugs to <bug-libtool@gnu.org>.\n# GNU libtool home page: <http://www.gnu.org/software/libtool/>.\n# General help using GNU software: <http://www.gnu.org/gethelp/>.\n\nPROGRAM=libtool\nPACKAGE=libtool\nVERSION=\"2.4.2 Debian-2.4.2-1.11\"\nTIMESTAMP=\"\"\npackage_revision=1.3337\n\n# Be Bourne compatible\nif test -n \"${ZSH_VERSION+set}\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on ${1+\"$@\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '${1+\"$@\"}'='\"$@\"'\n  setopt NO_GLOB_SUBST\nelse\n  case `(set -o) 2>/dev/null` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n$1\n_LTECHO_EOF'\n}\n\n# NLS nuisances: We save the old values to restore during execute mode.\nlt_user_locale=\nlt_safe_locale=\nfor lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\ndo\n  eval \"if test \\\"\\${$lt_var+set}\\\" = set; then\n          save_$lt_var=\\$$lt_var\n          $lt_var=C\n\t  export $lt_var\n\t  lt_user_locale=\\\"$lt_var=\\\\\\$save_\\$lt_var; \\$lt_user_locale\\\"\n\t  lt_safe_locale=\\\"$lt_var=C; \\$lt_safe_locale\\\"\n\tfi\"\ndone\nLC_ALL=C\nLANGUAGE=C\nexport LANGUAGE LC_ALL\n\n$lt_unset CDPATH\n\n\n# Work around backward compatibility issue on IRIX 6.5. On IRIX 6.4+, sh\n# is ksh but when the shell is invoked as \"sh\" and the current value of\n# the _XPG environment variable is not equal to 1 (one), the special\n# positional parameter $0, within a function call, is the name of the\n# function.\nprogpath=\"$0\"\n\n\n\n: ${CP=\"cp -f\"}\ntest \"${ECHO+set}\" = set || ECHO=${as_echo-'printf %s\\n'}\n: ${MAKE=\"make\"}\n: ${MKDIR=\"mkdir\"}\n: ${MV=\"mv -f\"}\n: ${RM=\"rm -f\"}\n: ${SHELL=\"${CONFIG_SHELL-/bin/sh}\"}\n: ${Xsed=\"$SED -e 1s/^X//\"}\n\n# Global variables:\nEXIT_SUCCESS=0\nEXIT_FAILURE=1\nEXIT_MISMATCH=63  # $? = 63 is used to indicate version mismatch to missing.\nEXIT_SKIP=77\t  # $? = 77 is used to indicate a skipped test to automake.\n\nexit_status=$EXIT_SUCCESS\n\n# Make sure IFS has a sensible default\nlt_nl='\n'\nIFS=\" \t$lt_nl\"\n\ndirname=\"s,/[^/]*$,,\"\nbasename=\"s,^.*/,,\"\n\n# func_dirname file append nondir_replacement\n# Compute the dirname of FILE.  If nonempty, add APPEND to the result,\n# otherwise set result to NONDIR_REPLACEMENT.\nfunc_dirname ()\n{\n    func_dirname_result=`$ECHO \"${1}\" | $SED \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n} # func_dirname may be replaced by extended shell implementation\n\n\n# func_basename file\nfunc_basename ()\n{\n    func_basename_result=`$ECHO \"${1}\" | $SED \"$basename\"`\n} # func_basename may be replaced by extended shell implementation\n\n\n# func_dirname_and_basename file append nondir_replacement\n# perform func_basename and func_dirname in a single function\n# call:\n#   dirname:  Compute the dirname of FILE.  If nonempty,\n#             add APPEND to the result, otherwise set result\n#             to NONDIR_REPLACEMENT.\n#             value returned in \"$func_dirname_result\"\n#   basename: Compute filename of FILE.\n#             value retuned in \"$func_basename_result\"\n# Implementation must be kept synchronized with func_dirname\n# and func_basename. For efficiency, we do not delegate to\n# those functions but instead duplicate the functionality here.\nfunc_dirname_and_basename ()\n{\n    # Extract subdirectory from the argument.\n    func_dirname_result=`$ECHO \"${1}\" | $SED -e \"$dirname\"`\n    if test \"X$func_dirname_result\" = \"X${1}\"; then\n      func_dirname_result=\"${3}\"\n    else\n      func_dirname_result=\"$func_dirname_result${2}\"\n    fi\n    func_basename_result=`$ECHO \"${1}\" | $SED -e \"$basename\"`\n} # func_dirname_and_basename may be replaced by extended shell implementation\n\n\n# func_stripname prefix suffix name\n# strip PREFIX and SUFFIX off of NAME.\n# PREFIX and SUFFIX must not contain globbing or regex special\n# characters, hashes, percent signs, but SUFFIX may contain a leading\n# dot (in which case that matches only a dot).\n# func_strip_suffix prefix name\nfunc_stripname ()\n{\n    case ${2} in\n      .*) func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%\\\\\\\\${2}\\$%%\"`;;\n      *)  func_stripname_result=`$ECHO \"${3}\" | $SED \"s%^${1}%%; s%${2}\\$%%\"`;;\n    esac\n} # func_stripname may be replaced by extended shell implementation\n\n\n# These SED scripts presuppose an absolute path with a trailing slash.\npathcar='s,^/\\([^/]*\\).*$,\\1,'\npathcdr='s,^/[^/]*,,'\nremovedotparts=':dotsl\n\t\ts@/\\./@/@g\n\t\tt dotsl\n\t\ts,/\\.$,/,'\ncollapseslashes='s@/\\{1,\\}@/@g'\nfinalslash='s,/*$,/,'\n\n# func_normal_abspath PATH\n# Remove doubled-up and trailing slashes, \".\" path components,\n# and cancel out any \"..\" path components in PATH after making\n# it an absolute path.\n#             value returned in \"$func_normal_abspath_result\"\nfunc_normal_abspath ()\n{\n  # Start from root dir and reassemble the path.\n  func_normal_abspath_result=\n  func_normal_abspath_tpath=$1\n  func_normal_abspath_altnamespace=\n  case $func_normal_abspath_tpath in\n    \"\")\n      # Empty path, that just means $cwd.\n      func_stripname '' '/' \"`pwd`\"\n      func_normal_abspath_result=$func_stripname_result\n      return\n    ;;\n    # The next three entries are used to spot a run of precisely\n    # two leading slashes without using negated character classes;\n    # we take advantage of case's first-match behaviour.\n    ///*)\n      # Unusual form of absolute path, do nothing.\n    ;;\n    //*)\n      # Not necessarily an ordinary path; POSIX reserves leading '//'\n      # and for example Cygwin uses it to access remote file shares\n      # over CIFS/SMB, so we conserve a leading double slash if found.\n      func_normal_abspath_altnamespace=/\n    ;;\n    /*)\n      # Absolute path, do nothing.\n    ;;\n    *)\n      # Relative path, prepend $cwd.\n      func_normal_abspath_tpath=`pwd`/$func_normal_abspath_tpath\n    ;;\n  esac\n  # Cancel out all the simple stuff to save iterations.  We also want\n  # the path to end with a slash for ease of parsing, so make sure\n  # there is one (and only one) here.\n  func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$removedotparts\" -e \"$collapseslashes\" -e \"$finalslash\"`\n  while :; do\n    # Processed it all yet?\n    if test \"$func_normal_abspath_tpath\" = / ; then\n      # If we ascended to the root using \"..\" the result may be empty now.\n      if test -z \"$func_normal_abspath_result\" ; then\n        func_normal_abspath_result=/\n      fi\n      break\n    fi\n    func_normal_abspath_tcomponent=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcar\"`\n    func_normal_abspath_tpath=`$ECHO \"$func_normal_abspath_tpath\" | $SED \\\n        -e \"$pathcdr\"`\n    # Figure out what to do with it\n    case $func_normal_abspath_tcomponent in\n      \"\")\n        # Trailing empty path component, ignore it.\n      ;;\n      ..)\n        # Parent dir; strip last assembled component from result.\n        func_dirname \"$func_normal_abspath_result\"\n        func_normal_abspath_result=$func_dirname_result\n      ;;\n      *)\n        # Actual path component, append it.\n        func_normal_abspath_result=$func_normal_abspath_result/$func_normal_abspath_tcomponent\n      ;;\n    esac\n  done\n  # Restore leading double-slash if one was found on entry.\n  func_normal_abspath_result=$func_normal_abspath_altnamespace$func_normal_abspath_result\n}\n\n# func_relative_path SRCDIR DSTDIR\n# generates a relative path from SRCDIR to DSTDIR, with a trailing\n# slash if non-empty, suitable for immediately appending a filename\n# without needing to append a separator.\n#             value returned in \"$func_relative_path_result\"\nfunc_relative_path ()\n{\n  func_relative_path_result=\n  func_normal_abspath \"$1\"\n  func_relative_path_tlibdir=$func_normal_abspath_result\n  func_normal_abspath \"$2\"\n  func_relative_path_tbindir=$func_normal_abspath_result\n\n  # Ascend the tree starting from libdir\n  while :; do\n    # check if we have found a prefix of bindir\n    case $func_relative_path_tbindir in\n      $func_relative_path_tlibdir)\n        # found an exact match\n        func_relative_path_tcancelled=\n        break\n        ;;\n      $func_relative_path_tlibdir*)\n        # found a matching prefix\n        func_stripname \"$func_relative_path_tlibdir\" '' \"$func_relative_path_tbindir\"\n        func_relative_path_tcancelled=$func_stripname_result\n        if test -z \"$func_relative_path_result\"; then\n          func_relative_path_result=.\n        fi\n        break\n        ;;\n      *)\n        func_dirname $func_relative_path_tlibdir\n        func_relative_path_tlibdir=${func_dirname_result}\n        if test \"x$func_relative_path_tlibdir\" = x ; then\n          # Have to descend all the way to the root!\n          func_relative_path_result=../$func_relative_path_result\n          func_relative_path_tcancelled=$func_relative_path_tbindir\n          break\n        fi\n        func_relative_path_result=../$func_relative_path_result\n        ;;\n    esac\n  done\n\n  # Now calculate path; take care to avoid doubling-up slashes.\n  func_stripname '' '/' \"$func_relative_path_result\"\n  func_relative_path_result=$func_stripname_result\n  func_stripname '/' '/' \"$func_relative_path_tcancelled\"\n  if test \"x$func_stripname_result\" != x ; then\n    func_relative_path_result=${func_relative_path_result}/${func_stripname_result}\n  fi\n\n  # Normalisation. If bindir is libdir, return empty string,\n  # else relative path ending with a slash; either way, target\n  # file name can be directly appended.\n  if test ! -z \"$func_relative_path_result\"; then\n    func_stripname './' '' \"$func_relative_path_result/\"\n    func_relative_path_result=$func_stripname_result\n  fi\n}\n\n# The name of this program:\nfunc_dirname_and_basename \"$progpath\"\nprogname=$func_basename_result\n\n# Make sure we have an absolute path for reexecution:\ncase $progpath in\n  [\\\\/]*|[A-Za-z]:\\\\*) ;;\n  *[\\\\/]*)\n     progdir=$func_dirname_result\n     progdir=`cd \"$progdir\" && pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\n  *)\n     save_IFS=\"$IFS\"\n     IFS=${PATH_SEPARATOR-:}\n     for progdir in $PATH; do\n       IFS=\"$save_IFS\"\n       test -x \"$progdir/$progname\" && break\n     done\n     IFS=\"$save_IFS\"\n     test -n \"$progdir\" || progdir=`pwd`\n     progpath=\"$progdir/$progname\"\n     ;;\nesac\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nXsed=\"${SED}\"' -e 1s/^X//'\nsed_quote_subst='s/\\([`\"$\\\\]\\)/\\\\\\1/g'\n\n# Same as above, but do not quote variable references.\ndouble_quote_subst='s/\\([\"`\\\\]\\)/\\\\\\1/g'\n\n# Sed substitution that turns a string into a regex matching for the\n# string literally.\nsed_make_literal_regex='s,[].[^$\\\\*\\/],\\\\&,g'\n\n# Sed substitution that converts a w32 file name or path\n# which contains forward slashes, into one that contains\n# (escaped) backslashes.  A very naive implementation.\nlt_sed_naive_backslashify='s|\\\\\\\\*|\\\\|g;s|/|\\\\|g;s|\\\\|\\\\\\\\|g'\n\n# Re-`\\' parameter expansions in output of double_quote_subst that were\n# `\\'-ed in input to the same.  If an odd number of `\\' preceded a '$'\n# in input to double_quote_subst, that '$' was protected from expansion.\n# Since each input `\\' is now two `\\'s, look for any number of runs of\n# four `\\'s followed by two `\\'s and then a '$'.  `\\' that '$'.\nbs='\\\\'\nbs2='\\\\\\\\'\nbs4='\\\\\\\\\\\\\\\\'\ndollar='\\$'\nsed_double_backslash=\"\\\n  s/$bs4/&\\\\\n/g\n  s/^$bs2$dollar/$bs&/\n  s/\\\\([^$bs]\\\\)$bs2$dollar/\\\\1$bs2$bs$dollar/g\n  s/\\n//g\"\n\n# Standard options:\nopt_dry_run=false\nopt_help=false\nopt_quiet=false\nopt_verbose=false\nopt_warning=:\n\n# func_echo arg...\n# Echo program name prefixed message, along with the current mode\n# name if it has been set yet.\nfunc_echo ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }$*\"\n}\n\n# func_verbose arg...\n# Echo program name prefixed message in verbose mode only.\nfunc_verbose ()\n{\n    $opt_verbose && func_echo ${1+\"$@\"}\n\n    # A bug in bash halts the script if the last line of a function\n    # fails when set -e is in force, so we need another command to\n    # work around that:\n    :\n}\n\n# func_echo_all arg...\n# Invoke $ECHO with all args, space-separated.\nfunc_echo_all ()\n{\n    $ECHO \"$*\"\n}\n\n# func_error arg...\n# Echo program name prefixed message to standard error.\nfunc_error ()\n{\n    $ECHO \"$progname: ${opt_mode+$opt_mode: }\"${1+\"$@\"} 1>&2\n}\n\n# func_warning arg...\n# Echo program name prefixed warning message to standard error.\nfunc_warning ()\n{\n    $opt_warning && $ECHO \"$progname: ${opt_mode+$opt_mode: }warning: \"${1+\"$@\"} 1>&2\n\n    # bash bug again:\n    :\n}\n\n# func_fatal_error arg...\n# Echo program name prefixed message to standard error, and exit.\nfunc_fatal_error ()\n{\n    func_error ${1+\"$@\"}\n    exit $EXIT_FAILURE\n}\n\n# func_fatal_help arg...\n# Echo program name prefixed message to standard error, followed by\n# a help hint, and exit.\nfunc_fatal_help ()\n{\n    func_error ${1+\"$@\"}\n    func_fatal_error \"$help\"\n}\nhelp=\"Try \\`$progname --help' for more information.\"  ## default\n\n\n# func_grep expression filename\n# Check whether EXPRESSION matches any line of FILENAME, without output.\nfunc_grep ()\n{\n    $GREP \"$1\" \"$2\" >/dev/null 2>&1\n}\n\n\n# func_mkdir_p directory-path\n# Make sure the entire path to DIRECTORY-PATH is available.\nfunc_mkdir_p ()\n{\n    my_directory_path=\"$1\"\n    my_dir_list=\n\n    if test -n \"$my_directory_path\" && test \"$opt_dry_run\" != \":\"; then\n\n      # Protect directory names starting with `-'\n      case $my_directory_path in\n        -*) my_directory_path=\"./$my_directory_path\" ;;\n      esac\n\n      # While some portion of DIR does not yet exist...\n      while test ! -d \"$my_directory_path\"; do\n        # ...make a list in topmost first order.  Use a colon delimited\n\t# list incase some portion of path contains whitespace.\n        my_dir_list=\"$my_directory_path:$my_dir_list\"\n\n        # If the last portion added has no slash in it, the list is done\n        case $my_directory_path in */*) ;; *) break ;; esac\n\n        # ...otherwise throw away the child directory and loop\n        my_directory_path=`$ECHO \"$my_directory_path\" | $SED -e \"$dirname\"`\n      done\n      my_dir_list=`$ECHO \"$my_dir_list\" | $SED 's,:*$,,'`\n\n      save_mkdir_p_IFS=\"$IFS\"; IFS=':'\n      for my_dir in $my_dir_list; do\n\tIFS=\"$save_mkdir_p_IFS\"\n        # mkdir can fail with a `File exist' error if two processes\n        # try to create one of the directories concurrently.  Don't\n        # stop in that case!\n        $MKDIR \"$my_dir\" 2>/dev/null || :\n      done\n      IFS=\"$save_mkdir_p_IFS\"\n\n      # Bail out if we (or some other process) failed to create a directory.\n      test -d \"$my_directory_path\" || \\\n        func_fatal_error \"Failed to create \\`$1'\"\n    fi\n}\n\n\n# func_mktempdir [string]\n# Make a temporary directory that won't clash with other running\n# libtool processes, and avoids race conditions if possible.  If\n# given, STRING is the basename for that directory.\nfunc_mktempdir ()\n{\n    my_template=\"${TMPDIR-/tmp}/${1-$progname}\"\n\n    if test \"$opt_dry_run\" = \":\"; then\n      # Return a directory name, but don't create it in dry-run mode\n      my_tmpdir=\"${my_template}-$$\"\n    else\n\n      # If mktemp works, use that first and foremost\n      my_tmpdir=`mktemp -d \"${my_template}-XXXXXXXX\" 2>/dev/null`\n\n      if test ! -d \"$my_tmpdir\"; then\n        # Failing that, at least try and use $RANDOM to avoid a race\n        my_tmpdir=\"${my_template}-${RANDOM-0}$$\"\n\n        save_mktempdir_umask=`umask`\n        umask 0077\n        $MKDIR \"$my_tmpdir\"\n        umask $save_mktempdir_umask\n      fi\n\n      # If we're not in dry-run mode, bomb out on failure\n      test -d \"$my_tmpdir\" || \\\n        func_fatal_error \"cannot create temporary directory \\`$my_tmpdir'\"\n    fi\n\n    $ECHO \"$my_tmpdir\"\n}\n\n\n# func_quote_for_eval arg\n# Aesthetically quote ARG to be evaled later.\n# This function returns two values: FUNC_QUOTE_FOR_EVAL_RESULT\n# is double-quoted, suitable for a subsequent eval, whereas\n# FUNC_QUOTE_FOR_EVAL_UNQUOTED_RESULT has merely all characters\n# which are still active within double quotes backslashified.\nfunc_quote_for_eval ()\n{\n    case $1 in\n      *[\\\\\\`\\\"\\$]*)\n\tfunc_quote_for_eval_unquoted_result=`$ECHO \"$1\" | $SED \"$sed_quote_subst\"` ;;\n      *)\n        func_quote_for_eval_unquoted_result=\"$1\" ;;\n    esac\n\n    case $func_quote_for_eval_unquoted_result in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting, command substitution and and variable\n      # expansion for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        func_quote_for_eval_result=\"\\\"$func_quote_for_eval_unquoted_result\\\"\"\n        ;;\n      *)\n        func_quote_for_eval_result=\"$func_quote_for_eval_unquoted_result\"\n    esac\n}\n\n\n# func_quote_for_expand arg\n# Aesthetically quote ARG to be evaled later; same as above,\n# but do not quote variable references.\nfunc_quote_for_expand ()\n{\n    case $1 in\n      *[\\\\\\`\\\"]*)\n\tmy_arg=`$ECHO \"$1\" | $SED \\\n\t    -e \"$double_quote_subst\" -e \"$sed_double_backslash\"` ;;\n      *)\n        my_arg=\"$1\" ;;\n    esac\n\n    case $my_arg in\n      # Double-quote args containing shell metacharacters to delay\n      # word splitting and command substitution for a subsequent eval.\n      # Many Bourne shells cannot handle close brackets correctly\n      # in scan sets, so we specify it separately.\n      *[\\[\\~\\#\\^\\&\\*\\(\\)\\{\\}\\|\\;\\<\\>\\?\\'\\ \\\t]*|*]*|\"\")\n        my_arg=\"\\\"$my_arg\\\"\"\n        ;;\n    esac\n\n    func_quote_for_expand_result=\"$my_arg\"\n}\n\n\n# func_show_eval cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.\nfunc_show_eval ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$my_cmd\"\n      my_status=$?\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n\n# func_show_eval_locale cmd [fail_exp]\n# Unless opt_silent is true, then output CMD.  Then, if opt_dryrun is\n# not true, evaluate CMD.  If the evaluation of CMD fails, and FAIL_EXP\n# is given, then evaluate it.  Use the saved locale for evaluation.\nfunc_show_eval_locale ()\n{\n    my_cmd=\"$1\"\n    my_fail_exp=\"${2-:}\"\n\n    ${opt_silent-false} || {\n      func_quote_for_expand \"$my_cmd\"\n      eval \"func_echo $func_quote_for_expand_result\"\n    }\n\n    if ${opt_dry_run-false}; then :; else\n      eval \"$lt_user_locale\n\t    $my_cmd\"\n      my_status=$?\n      eval \"$lt_safe_locale\"\n      if test \"$my_status\" -eq 0; then :; else\n\teval \"(exit $my_status); $my_fail_exp\"\n      fi\n    fi\n}\n\n# func_tr_sh\n# Turn $1 into a string suitable for a shell variable name.\n# Result is stored in $func_tr_sh_result.  All characters\n# not in the set a-zA-Z0-9_ are replaced with '_'. Further,\n# if $1 begins with a digit, a '_' is prepended as well.\nfunc_tr_sh ()\n{\n  case $1 in\n  [0-9]* | *[!a-zA-Z0-9_]*)\n    func_tr_sh_result=`$ECHO \"$1\" | $SED 's/^\\([0-9]\\)/_\\1/; s/[^a-zA-Z0-9_]/_/g'`\n    ;;\n  * )\n    func_tr_sh_result=$1\n    ;;\n  esac\n}\n\n\n# func_version\n# Echo version message to standard output and exit.\nfunc_version ()\n{\n    $opt_debug\n\n    $SED -n '/(C)/!b go\n\t:more\n\t/\\./!{\n\t  N\n\t  s/\\n# / /\n\t  b more\n\t}\n\t:go\n\t/^# '$PROGRAM' (GNU /,/# warranty; / {\n        s/^# //\n\ts/^# *$//\n        s/\\((C)\\)[ 0-9,-]*\\( [1-9][0-9]*\\)/\\1\\2/\n        p\n     }' < \"$progpath\"\n     exit $?\n}\n\n# func_usage\n# Echo short help message to standard output and exit.\nfunc_usage ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/^#  *.*--help/ {\n        s/^# //\n\ts/^# *$//\n\ts/\\$progname/'$progname'/\n\tp\n    }' < \"$progpath\"\n    echo\n    $ECHO \"run \\`$progname --help | more' for full usage\"\n    exit $?\n}\n\n# func_help [NOEXIT]\n# Echo long help message to standard output and exit,\n# unless 'noexit' is passed as argument.\nfunc_help ()\n{\n    $opt_debug\n\n    $SED -n '/^# Usage:/,/# Report bugs to/ {\n\t:print\n        s/^# //\n\ts/^# *$//\n\ts*\\$progname*'$progname'*\n\ts*\\$host*'\"$host\"'*\n\ts*\\$SHELL*'\"$SHELL\"'*\n\ts*\\$LTCC*'\"$LTCC\"'*\n\ts*\\$LTCFLAGS*'\"$LTCFLAGS\"'*\n\ts*\\$LD*'\"$LD\"'*\n\ts/\\$with_gnu_ld/'\"$with_gnu_ld\"'/\n\ts/\\$automake_version/'\"`(${AUTOMAKE-automake} --version) 2>/dev/null |$SED 1q`\"'/\n\ts/\\$autoconf_version/'\"`(${AUTOCONF-autoconf} --version) 2>/dev/null |$SED 1q`\"'/\n\tp\n\td\n     }\n     /^# .* home page:/b print\n     /^# General help using/b print\n     ' < \"$progpath\"\n    ret=$?\n    if test -z \"$1\"; then\n      exit $ret\n    fi\n}\n\n# func_missing_arg argname\n# Echo program name prefixed message to standard error and set global\n# exit_cmd.\nfunc_missing_arg ()\n{\n    $opt_debug\n\n    func_error \"missing argument for $1.\"\n    exit_cmd=exit\n}\n\n\n# func_split_short_opt shortopt\n# Set func_split_short_opt_name and func_split_short_opt_arg shell\n# variables after splitting SHORTOPT after the 2nd character.\nfunc_split_short_opt ()\n{\n    my_sed_short_opt='1s/^\\(..\\).*$/\\1/;q'\n    my_sed_short_rest='1s/^..\\(.*\\)$/\\1/;q'\n\n    func_split_short_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_short_opt\"`\n    func_split_short_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_short_rest\"`\n} # func_split_short_opt may be replaced by extended shell implementation\n\n\n# func_split_long_opt longopt\n# Set func_split_long_opt_name and func_split_long_opt_arg shell\n# variables after splitting LONGOPT at the `=' sign.\nfunc_split_long_opt ()\n{\n    my_sed_long_opt='1s/^\\(--[^=]*\\)=.*/\\1/;q'\n    my_sed_long_arg='1s/^--[^=]*=//'\n\n    func_split_long_opt_name=`$ECHO \"$1\" | $SED \"$my_sed_long_opt\"`\n    func_split_long_opt_arg=`$ECHO \"$1\" | $SED \"$my_sed_long_arg\"`\n} # func_split_long_opt may be replaced by extended shell implementation\n\nexit_cmd=:\n\n\n\n\n\nmagic=\"%%%MAGIC variable%%%\"\nmagic_exe=\"%%%MAGIC EXE variable%%%\"\n\n# Global variables.\nnonopt=\npreserve_args=\nlo2o=\"s/\\\\.lo\\$/.${objext}/\"\no2lo=\"s/\\\\.${objext}\\$/.lo/\"\nextracted_archives=\nextracted_serial=0\n\n# If this variable is set in any of the actions, the command in it\n# will be execed at the end.  This prevents here-documents from being\n# left over by shells.\nexec_cmd=\n\n# func_append var value\n# Append VALUE to the end of shell variable VAR.\nfunc_append ()\n{\n    eval \"${1}=\\$${1}\\${2}\"\n} # func_append may be replaced by extended shell implementation\n\n# func_append_quoted var value\n# Quote VALUE and append to the end of shell variable VAR, separated\n# by a space.\nfunc_append_quoted ()\n{\n    func_quote_for_eval \"${2}\"\n    eval \"${1}=\\$${1}\\\\ \\$func_quote_for_eval_result\"\n} # func_append_quoted may be replaced by extended shell implementation\n\n\n# func_arith arithmetic-term...\nfunc_arith ()\n{\n    func_arith_result=`expr \"${@}\"`\n} # func_arith may be replaced by extended shell implementation\n\n\n# func_len string\n# STRING may not start with a hyphen.\nfunc_len ()\n{\n    func_len_result=`expr \"${1}\" : \".*\" 2>/dev/null || echo $max_cmd_len`\n} # func_len may be replaced by extended shell implementation\n\n\n# func_lo2o object\nfunc_lo2o ()\n{\n    func_lo2o_result=`$ECHO \"${1}\" | $SED \"$lo2o\"`\n} # func_lo2o may be replaced by extended shell implementation\n\n\n# func_xform libobj-or-source\nfunc_xform ()\n{\n    func_xform_result=`$ECHO \"${1}\" | $SED 's/\\.[^.]*$/.lo/'`\n} # func_xform may be replaced by extended shell implementation\n\n\n# func_fatal_configuration arg...\n# Echo program name prefixed message to standard error, followed by\n# a configuration failure hint, and exit.\nfunc_fatal_configuration ()\n{\n    func_error ${1+\"$@\"}\n    func_error \"See the $PACKAGE documentation for more information.\"\n    func_fatal_error \"Fatal configuration error.\"\n}\n\n\n# func_config\n# Display the configuration for all the tags in this script.\nfunc_config ()\n{\n    re_begincf='^# ### BEGIN LIBTOOL'\n    re_endcf='^# ### END LIBTOOL'\n\n    # Default configuration.\n    $SED \"1,/$re_begincf CONFIG/d;/$re_endcf CONFIG/,\\$d\" < \"$progpath\"\n\n    # Now print the configurations for the tags.\n    for tagname in $taglist; do\n      $SED -n \"/$re_begincf TAG CONFIG: $tagname\\$/,/$re_endcf TAG CONFIG: $tagname\\$/p\" < \"$progpath\"\n    done\n\n    exit $?\n}\n\n# func_features\n# Display the features supported by this script.\nfunc_features ()\n{\n    echo \"host: $host\"\n    if test \"$build_libtool_libs\" = yes; then\n      echo \"enable shared libraries\"\n    else\n      echo \"disable shared libraries\"\n    fi\n    if test \"$build_old_libs\" = yes; then\n      echo \"enable static libraries\"\n    else\n      echo \"disable static libraries\"\n    fi\n\n    exit $?\n}\n\n# func_enable_tag tagname\n# Verify that TAGNAME is valid, and either flag an error and exit, or\n# enable the TAGNAME tag.  We also add TAGNAME to the global $taglist\n# variable here.\nfunc_enable_tag ()\n{\n  # Global variable:\n  tagname=\"$1\"\n\n  re_begincf=\"^# ### BEGIN LIBTOOL TAG CONFIG: $tagname\\$\"\n  re_endcf=\"^# ### END LIBTOOL TAG CONFIG: $tagname\\$\"\n  sed_extractcf=\"/$re_begincf/,/$re_endcf/p\"\n\n  # Validate tagname.\n  case $tagname in\n    *[!-_A-Za-z0-9,/]*)\n      func_fatal_error \"invalid tag name: $tagname\"\n      ;;\n  esac\n\n  # Don't test for the \"default\" C tag, as we know it's\n  # there but not specially marked.\n  case $tagname in\n    CC) ;;\n    *)\n      if $GREP \"$re_begincf\" \"$progpath\" >/dev/null 2>&1; then\n\ttaglist=\"$taglist $tagname\"\n\n\t# Evaluate the configuration.  Be careful to quote the path\n\t# and the sed script, to avoid splitting on whitespace, but\n\t# also don't use non-portable quotes within backquotes within\n\t# quotes we have to do it in 2 steps:\n\textractedcf=`$SED -n -e \"$sed_extractcf\" < \"$progpath\"`\n\teval \"$extractedcf\"\n      else\n\tfunc_error \"ignoring unknown tag $tagname\"\n      fi\n      ;;\n  esac\n}\n\n# func_check_version_match\n# Ensure that we are using m4 macros, and libtool script from the same\n# release of libtool.\nfunc_check_version_match ()\n{\n  if test \"$package_revision\" != \"$macro_revision\"; then\n    if test \"$VERSION\" != \"$macro_version\"; then\n      if test -z \"$macro_version\"; then\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from an older release.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      else\n        cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, but the\n$progname: definition of this LT_INIT comes from $PACKAGE $macro_version.\n$progname: You should recreate aclocal.m4 with macros from $PACKAGE $VERSION\n$progname: and run autoconf again.\n_LT_EOF\n      fi\n    else\n      cat >&2 <<_LT_EOF\n$progname: Version mismatch error.  This is $PACKAGE $VERSION, revision $package_revision,\n$progname: but the definition of this LT_INIT comes from revision $macro_revision.\n$progname: You should recreate aclocal.m4 with macros from revision $package_revision\n$progname: of $PACKAGE $VERSION and run autoconf again.\n_LT_EOF\n    fi\n\n    exit $EXIT_MISMATCH\n  fi\n}\n\n\n# Shorthand for --mode=foo, only valid as the first argument\ncase $1 in\nclean|clea|cle|cl)\n  shift; set dummy --mode clean ${1+\"$@\"}; shift\n  ;;\ncompile|compil|compi|comp|com|co|c)\n  shift; set dummy --mode compile ${1+\"$@\"}; shift\n  ;;\nexecute|execut|execu|exec|exe|ex|e)\n  shift; set dummy --mode execute ${1+\"$@\"}; shift\n  ;;\nfinish|finis|fini|fin|fi|f)\n  shift; set dummy --mode finish ${1+\"$@\"}; shift\n  ;;\ninstall|instal|insta|inst|ins|in|i)\n  shift; set dummy --mode install ${1+\"$@\"}; shift\n  ;;\nlink|lin|li|l)\n  shift; set dummy --mode link ${1+\"$@\"}; shift\n  ;;\nuninstall|uninstal|uninsta|uninst|unins|unin|uni|un|u)\n  shift; set dummy --mode uninstall ${1+\"$@\"}; shift\n  ;;\nesac\n\n\n\n# Option defaults:\nopt_debug=:\nopt_dry_run=false\nopt_config=false\nopt_preserve_dup_deps=false\nopt_features=false\nopt_finish=false\nopt_help=false\nopt_help_all=false\nopt_silent=:\nopt_warning=:\nopt_verbose=:\nopt_silent=false\nopt_verbose=false\n\n\n# Parse options once, thoroughly.  This comes as soon as possible in the\n# script to make things like `--version' happen as quickly as we can.\n{\n  # this just eases exit handling\n  while test $# -gt 0; do\n    opt=\"$1\"\n    shift\n    case $opt in\n      --debug|-x)\topt_debug='set -x'\n\t\t\tfunc_echo \"enabling shell trace mode\"\n\t\t\t$opt_debug\n\t\t\t;;\n      --dry-run|--dryrun|-n)\n\t\t\topt_dry_run=:\n\t\t\t;;\n      --config)\n\t\t\topt_config=:\nfunc_config\n\t\t\t;;\n      --dlopen|-dlopen)\n\t\t\toptarg=\"$1\"\n\t\t\topt_dlopen=\"${opt_dlopen+$opt_dlopen\n}$optarg\"\n\t\t\tshift\n\t\t\t;;\n      --preserve-dup-deps)\n\t\t\topt_preserve_dup_deps=:\n\t\t\t;;\n      --features)\n\t\t\topt_features=:\nfunc_features\n\t\t\t;;\n      --finish)\n\t\t\topt_finish=:\nset dummy --mode finish ${1+\"$@\"}; shift\n\t\t\t;;\n      --help)\n\t\t\topt_help=:\n\t\t\t;;\n      --help-all)\n\t\t\topt_help_all=:\nopt_help=': help-all'\n\t\t\t;;\n      --mode)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_mode=\"$optarg\"\ncase $optarg in\n  # Valid mode arguments:\n  clean|compile|execute|finish|install|link|relink|uninstall) ;;\n\n  # Catch anything else as an error\n  *) func_error \"invalid argument for $opt\"\n     exit_cmd=exit\n     break\n     ;;\nesac\n\t\t\tshift\n\t\t\t;;\n      --no-silent|--no-quiet)\n\t\t\topt_silent=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-warning|--no-warn)\n\t\t\topt_warning=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --no-verbose)\n\t\t\topt_verbose=false\nfunc_append preserve_args \" $opt\"\n\t\t\t;;\n      --silent|--quiet)\n\t\t\topt_silent=:\nfunc_append preserve_args \" $opt\"\n        opt_verbose=false\n\t\t\t;;\n      --verbose|-v)\n\t\t\topt_verbose=:\nfunc_append preserve_args \" $opt\"\nopt_silent=false\n\t\t\t;;\n      --tag)\n\t\t\ttest $# = 0 && func_missing_arg $opt && break\n\t\t\toptarg=\"$1\"\n\t\t\topt_tag=\"$optarg\"\nfunc_append preserve_args \" $opt $optarg\"\nfunc_enable_tag \"$optarg\"\n\t\t\tshift\n\t\t\t;;\n\n      -\\?|-h)\t\tfunc_usage\t\t\t\t;;\n      --help)\t\tfunc_help\t\t\t\t;;\n      --version)\tfunc_version\t\t\t\t;;\n\n      # Separate optargs to long options:\n      --*=*)\n\t\t\tfunc_split_long_opt \"$opt\"\n\t\t\tset dummy \"$func_split_long_opt_name\" \"$func_split_long_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      # Separate non-argument short options:\n      -\\?*|-h*|-n*|-v*)\n\t\t\tfunc_split_short_opt \"$opt\"\n\t\t\tset dummy \"$func_split_short_opt_name\" \"-$func_split_short_opt_arg\" ${1+\"$@\"}\n\t\t\tshift\n\t\t\t;;\n\n      --)\t\tbreak\t\t\t\t\t;;\n      -*)\t\tfunc_fatal_help \"unrecognized option \\`$opt'\" ;;\n      *)\t\tset dummy \"$opt\" ${1+\"$@\"};\tshift; break  ;;\n    esac\n  done\n\n  # Validate options:\n\n  # save first non-option argument\n  if test \"$#\" -gt 0; then\n    nonopt=\"$opt\"\n    shift\n  fi\n\n  # preserve --debug\n  test \"$opt_debug\" = : || func_append preserve_args \" --debug\"\n\n  case $host in\n    *cygwin* | *mingw* | *pw32* | *cegcc*)\n      # don't eliminate duplications in $postdeps and $predeps\n      opt_duplicate_compiler_generated_deps=:\n      ;;\n    *)\n      opt_duplicate_compiler_generated_deps=$opt_preserve_dup_deps\n      ;;\n  esac\n\n  $opt_help || {\n    # Sanity checks first:\n    func_check_version_match\n\n    if test \"$build_libtool_libs\" != yes && test \"$build_old_libs\" != yes; then\n      func_fatal_configuration \"not configured to build any kind of library\"\n    fi\n\n    # Darwin sucks\n    eval std_shrext=\\\"$shrext_cmds\\\"\n\n    # Only execute mode is allowed to have -dlopen flags.\n    if test -n \"$opt_dlopen\" && test \"$opt_mode\" != execute; then\n      func_error \"unrecognized option \\`-dlopen'\"\n      $ECHO \"$help\" 1>&2\n      exit $EXIT_FAILURE\n    fi\n\n    # Change the help message to a mode-specific one.\n    generic_help=\"$help\"\n    help=\"Try \\`$progname --help --mode=$opt_mode' for more information.\"\n  }\n\n\n  # Bail if the options were screwed\n  $exit_cmd $EXIT_FAILURE\n}\n\n\n\n\n## ----------- ##\n##    Main.    ##\n## ----------- ##\n\n# func_lalib_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_lalib_p ()\n{\n    test -f \"$1\" &&\n      $SED -e 4q \"$1\" 2>/dev/null \\\n        | $GREP \"^# Generated by .*$PACKAGE\" > /dev/null 2>&1\n}\n\n# func_lalib_unsafe_p file\n# True iff FILE is a libtool `.la' library or `.lo' object file.\n# This function implements the same check as func_lalib_p without\n# resorting to external programs.  To this end, it redirects stdin and\n# closes it afterwards, without saving the original file descriptor.\n# As a safety measure, use it only where a negative result would be\n# fatal anyway.  Works if `file' does not exist.\nfunc_lalib_unsafe_p ()\n{\n    lalib_p=no\n    if test -f \"$1\" && test -r \"$1\" && exec 5<&0 <\"$1\"; then\n\tfor lalib_p_l in 1 2 3 4\n\tdo\n\t    read lalib_p_line\n\t    case \"$lalib_p_line\" in\n\t\t\\#\\ Generated\\ by\\ *$PACKAGE* ) lalib_p=yes; break;;\n\t    esac\n\tdone\n\texec 0<&5 5<&-\n    fi\n    test \"$lalib_p\" = yes\n}\n\n# func_ltwrapper_script_p file\n# True iff FILE is a libtool wrapper script\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_script_p ()\n{\n    func_lalib_p \"$1\"\n}\n\n# func_ltwrapper_executable_p file\n# True iff FILE is a libtool wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_executable_p ()\n{\n    func_ltwrapper_exec_suffix=\n    case $1 in\n    *.exe) ;;\n    *) func_ltwrapper_exec_suffix=.exe ;;\n    esac\n    $GREP \"$magic_exe\" \"$1$func_ltwrapper_exec_suffix\" >/dev/null 2>&1\n}\n\n# func_ltwrapper_scriptname file\n# Assumes file is an ltwrapper_executable\n# uses $file to determine the appropriate filename for a\n# temporary ltwrapper_script.\nfunc_ltwrapper_scriptname ()\n{\n    func_dirname_and_basename \"$1\" \"\" \".\"\n    func_stripname '' '.exe' \"$func_basename_result\"\n    func_ltwrapper_scriptname_result=\"$func_dirname_result/$objdir/${func_stripname_result}_ltshwrapper\"\n}\n\n# func_ltwrapper_p file\n# True iff FILE is a libtool wrapper script or wrapper executable\n# This function is only a basic sanity check; it will hardly flush out\n# determined imposters.\nfunc_ltwrapper_p ()\n{\n    func_ltwrapper_script_p \"$1\" || func_ltwrapper_executable_p \"$1\"\n}\n\n\n# func_execute_cmds commands fail_cmd\n# Execute tilde-delimited COMMANDS.\n# If FAIL_CMD is given, eval that upon failure.\n# FAIL_CMD may read-access the current command in variable CMD!\nfunc_execute_cmds ()\n{\n    $opt_debug\n    save_ifs=$IFS; IFS='~'\n    for cmd in $1; do\n      IFS=$save_ifs\n      eval cmd=\\\"$cmd\\\"\n      func_show_eval \"$cmd\" \"${2-:}\"\n    done\n    IFS=$save_ifs\n}\n\n\n# func_source file\n# Source FILE, adding directory component if necessary.\n# Note that it is not necessary on cygwin/mingw to append a dot to\n# FILE even if both FILE and FILE.exe exist: automatic-append-.exe\n# behavior happens only for exec(3), not for open(2)!  Also, sourcing\n# `FILE.' does not work on cygwin managed mounts.\nfunc_source ()\n{\n    $opt_debug\n    case $1 in\n    */* | *\\\\*)\t. \"$1\" ;;\n    *)\t\t. \"./$1\" ;;\n    esac\n}\n\n\n# func_resolve_sysroot PATH\n# Replace a leading = in PATH with a sysroot.  Store the result into\n# func_resolve_sysroot_result\nfunc_resolve_sysroot ()\n{\n  func_resolve_sysroot_result=$1\n  case $func_resolve_sysroot_result in\n  =*)\n    func_stripname '=' '' \"$func_resolve_sysroot_result\"\n    func_resolve_sysroot_result=$lt_sysroot$func_stripname_result\n    ;;\n  esac\n}\n\n# func_replace_sysroot PATH\n# If PATH begins with the sysroot, replace it with = and\n# store the result into func_replace_sysroot_result.\nfunc_replace_sysroot ()\n{\n  case \"$lt_sysroot:$1\" in\n  ?*:\"$lt_sysroot\"*)\n    func_stripname \"$lt_sysroot\" '' \"$1\"\n    func_replace_sysroot_result=\"=$func_stripname_result\"\n    ;;\n  *)\n    # Including no sysroot.\n    func_replace_sysroot_result=$1\n    ;;\n  esac\n}\n\n# func_infer_tag arg\n# Infer tagged configuration to use if any are available and\n# if one wasn't chosen via the \"--tag\" command line option.\n# Only attempt this if the compiler in the base compile\n# command doesn't match the default compiler.\n# arg is usually of the form 'gcc ...'\nfunc_infer_tag ()\n{\n    $opt_debug\n    if test -n \"$available_tags\" && test -z \"$tagname\"; then\n      CC_quoted=\n      for arg in $CC; do\n\tfunc_append_quoted CC_quoted \"$arg\"\n      done\n      CC_expanded=`func_echo_all $CC`\n      CC_quoted_expanded=`func_echo_all $CC_quoted`\n      case $@ in\n      # Blanks in the command may have been stripped by the calling shell,\n      # but not from the CC environment variable when configure was run.\n      \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n      \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*) ;;\n      # Blanks at the start of $base_compile will cause this to fail\n      # if we don't check for them as well.\n      *)\n\tfor z in $available_tags; do\n\t  if $GREP \"^# ### BEGIN LIBTOOL TAG CONFIG: $z$\" < \"$progpath\" > /dev/null; then\n\t    # Evaluate the configuration.\n\t    eval \"`${SED} -n -e '/^# ### BEGIN LIBTOOL TAG CONFIG: '$z'$/,/^# ### END LIBTOOL TAG CONFIG: '$z'$/p' < $progpath`\"\n\t    CC_quoted=\n\t    for arg in $CC; do\n\t      # Double-quote args containing other shell metacharacters.\n\t      func_append_quoted CC_quoted \"$arg\"\n\t    done\n\t    CC_expanded=`func_echo_all $CC`\n\t    CC_quoted_expanded=`func_echo_all $CC_quoted`\n\t    case \"$@ \" in\n\t    \" $CC \"* | \"$CC \"* | \" $CC_expanded \"* | \"$CC_expanded \"* | \\\n\t    \" $CC_quoted\"* | \"$CC_quoted \"* | \" $CC_quoted_expanded \"* | \"$CC_quoted_expanded \"*)\n\t      # The compiler in the base compile command matches\n\t      # the one in the tagged configuration.\n\t      # Assume this is the tagged configuration we want.\n\t      tagname=$z\n\t      break\n\t      ;;\n\t    esac\n\t  fi\n\tdone\n\t# If $tagname still isn't set, then no tagged configuration\n\t# was found and let the user know that the \"--tag\" command\n\t# line option must be used.\n\tif test -z \"$tagname\"; then\n\t  func_echo \"unable to infer tagged configuration\"\n\t  func_fatal_error \"specify a tag with \\`--tag'\"\n#\telse\n#\t  func_verbose \"using $tagname tagged configuration\"\n\tfi\n\t;;\n      esac\n    fi\n}\n\n\n\n# func_write_libtool_object output_name pic_name nonpic_name\n# Create a libtool object file (analogous to a \".la\" file),\n# but don't create it if we're doing a dry run.\nfunc_write_libtool_object ()\n{\n    write_libobj=${1}\n    if test \"$build_libtool_libs\" = yes; then\n      write_lobj=\\'${2}\\'\n    else\n      write_lobj=none\n    fi\n\n    if test \"$build_old_libs\" = yes; then\n      write_oldobj=\\'${3}\\'\n    else\n      write_oldobj=none\n    fi\n\n    $opt_dry_run || {\n      cat >${write_libobj}T <<EOF\n# $write_libobj - a libtool object file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# Name of the PIC object.\npic_object=$write_lobj\n\n# Name of the non-PIC object\nnon_pic_object=$write_oldobj\n\nEOF\n      $MV \"${write_libobj}T\" \"${write_libobj}\"\n    }\n}\n\n\n##################################################\n# FILE NAME AND PATH CONVERSION HELPER FUNCTIONS #\n##################################################\n\n# func_convert_core_file_wine_to_w32 ARG\n# Helper function used by file name conversion functions when $build is *nix,\n# and $host is mingw, cygwin, or some other w32 environment. Relies on a\n# correctly configured wine environment available, with the winepath program\n# in $build's $PATH.\n#\n# ARG is the $build file name to be converted to w32 format.\n# Result is available in $func_convert_core_file_wine_to_w32_result, and will\n# be empty on error (or when ARG is empty)\nfunc_convert_core_file_wine_to_w32 ()\n{\n  $opt_debug\n  func_convert_core_file_wine_to_w32_result=\"$1\"\n  if test -n \"$1\"; then\n    # Unfortunately, winepath does not exit with a non-zero error code, so we\n    # are forced to check the contents of stdout. On the other hand, if the\n    # command is not found, the shell will set an exit code of 127 and print\n    # *an error message* to stdout. So we must check for both error code of\n    # zero AND non-empty stdout, which explains the odd construction:\n    func_convert_core_file_wine_to_w32_tmp=`winepath -w \"$1\" 2>/dev/null`\n    if test \"$?\" -eq 0 && test -n \"${func_convert_core_file_wine_to_w32_tmp}\"; then\n      func_convert_core_file_wine_to_w32_result=`$ECHO \"$func_convert_core_file_wine_to_w32_tmp\" |\n        $SED -e \"$lt_sed_naive_backslashify\"`\n    else\n      func_convert_core_file_wine_to_w32_result=\n    fi\n  fi\n}\n# end: func_convert_core_file_wine_to_w32\n\n\n# func_convert_core_path_wine_to_w32 ARG\n# Helper function used by path conversion functions when $build is *nix, and\n# $host is mingw, cygwin, or some other w32 environment. Relies on a correctly\n# configured wine environment available, with the winepath program in $build's\n# $PATH. Assumes ARG has no leading or trailing path separator characters.\n#\n# ARG is path to be converted from $build format to win32.\n# Result is available in $func_convert_core_path_wine_to_w32_result.\n# Unconvertible file (directory) names in ARG are skipped; if no directory names\n# are convertible, then the result may be empty.\nfunc_convert_core_path_wine_to_w32 ()\n{\n  $opt_debug\n  # unfortunately, winepath doesn't convert paths, only file names\n  func_convert_core_path_wine_to_w32_result=\"\"\n  if test -n \"$1\"; then\n    oldIFS=$IFS\n    IFS=:\n    for func_convert_core_path_wine_to_w32_f in $1; do\n      IFS=$oldIFS\n      func_convert_core_file_wine_to_w32 \"$func_convert_core_path_wine_to_w32_f\"\n      if test -n \"$func_convert_core_file_wine_to_w32_result\" ; then\n        if test -z \"$func_convert_core_path_wine_to_w32_result\"; then\n          func_convert_core_path_wine_to_w32_result=\"$func_convert_core_file_wine_to_w32_result\"\n        else\n          func_append func_convert_core_path_wine_to_w32_result \";$func_convert_core_file_wine_to_w32_result\"\n        fi\n      fi\n    done\n    IFS=$oldIFS\n  fi\n}\n# end: func_convert_core_path_wine_to_w32\n\n\n# func_cygpath ARGS...\n# Wrapper around calling the cygpath program via LT_CYGPATH. This is used when\n# when (1) $build is *nix and Cygwin is hosted via a wine environment; or (2)\n# $build is MSYS and $host is Cygwin, or (3) $build is Cygwin. In case (1) or\n# (2), returns the Cygwin file name or path in func_cygpath_result (input\n# file name or path is assumed to be in w32 format, as previously converted\n# from $build's *nix or MSYS format). In case (3), returns the w32 file name\n# or path in func_cygpath_result (input file name or path is assumed to be in\n# Cygwin format). Returns an empty string on error.\n#\n# ARGS are passed to cygpath, with the last one being the file name or path to\n# be converted.\n#\n# Specify the absolute *nix (or w32) name to cygpath in the LT_CYGPATH\n# environment variable; do not put it in $PATH.\nfunc_cygpath ()\n{\n  $opt_debug\n  if test -n \"$LT_CYGPATH\" && test -f \"$LT_CYGPATH\"; then\n    func_cygpath_result=`$LT_CYGPATH \"$@\" 2>/dev/null`\n    if test \"$?\" -ne 0; then\n      # on failure, ensure result is empty\n      func_cygpath_result=\n    fi\n  else\n    func_cygpath_result=\n    func_error \"LT_CYGPATH is empty or specifies non-existent file: \\`$LT_CYGPATH'\"\n  fi\n}\n#end: func_cygpath\n\n\n# func_convert_core_msys_to_w32 ARG\n# Convert file name or path ARG from MSYS format to w32 format.  Return\n# result in func_convert_core_msys_to_w32_result.\nfunc_convert_core_msys_to_w32 ()\n{\n  $opt_debug\n  # awkward: cmd appends spaces to result\n  func_convert_core_msys_to_w32_result=`( cmd //c echo \"$1\" ) 2>/dev/null |\n    $SED -e 's/[ ]*$//' -e \"$lt_sed_naive_backslashify\"`\n}\n#end: func_convert_core_msys_to_w32\n\n\n# func_convert_file_check ARG1 ARG2\n# Verify that ARG1 (a file name in $build format) was converted to $host\n# format in ARG2. Otherwise, emit an error message, but continue (resetting\n# func_to_host_file_result to ARG1).\nfunc_convert_file_check ()\n{\n  $opt_debug\n  if test -z \"$2\" && test -n \"$1\" ; then\n    func_error \"Could not determine host file name corresponding to\"\n    func_error \"  \\`$1'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback:\n    func_to_host_file_result=\"$1\"\n  fi\n}\n# end func_convert_file_check\n\n\n# func_convert_path_check FROM_PATHSEP TO_PATHSEP FROM_PATH TO_PATH\n# Verify that FROM_PATH (a path in $build format) was converted to $host\n# format in TO_PATH. Otherwise, emit an error message, but continue, resetting\n# func_to_host_file_result to a simplistic fallback value (see below).\nfunc_convert_path_check ()\n{\n  $opt_debug\n  if test -z \"$4\" && test -n \"$3\"; then\n    func_error \"Could not determine the host path corresponding to\"\n    func_error \"  \\`$3'\"\n    func_error \"Continuing, but uninstalled executables may not work.\"\n    # Fallback.  This is a deliberately simplistic \"conversion\" and\n    # should not be \"improved\".  See libtool.info.\n    if test \"x$1\" != \"x$2\"; then\n      lt_replace_pathsep_chars=\"s|$1|$2|g\"\n      func_to_host_path_result=`echo \"$3\" |\n        $SED -e \"$lt_replace_pathsep_chars\"`\n    else\n      func_to_host_path_result=\"$3\"\n    fi\n  fi\n}\n# end func_convert_path_check\n\n\n# func_convert_path_front_back_pathsep FRONTPAT BACKPAT REPL ORIG\n# Modifies func_to_host_path_result by prepending REPL if ORIG matches FRONTPAT\n# and appending REPL if ORIG matches BACKPAT.\nfunc_convert_path_front_back_pathsep ()\n{\n  $opt_debug\n  case $4 in\n  $1 ) func_to_host_path_result=\"$3$func_to_host_path_result\"\n    ;;\n  esac\n  case $4 in\n  $2 ) func_append func_to_host_path_result \"$3\"\n    ;;\n  esac\n}\n# end func_convert_path_front_back_pathsep\n\n\n##################################################\n# $build to $host FILE NAME CONVERSION FUNCTIONS #\n##################################################\n# invoked via `$to_host_file_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# Result will be available in $func_to_host_file_result.\n\n\n# func_to_host_file ARG\n# Converts the file name ARG from $build format to $host format. Return result\n# in func_to_host_file_result.\nfunc_to_host_file ()\n{\n  $opt_debug\n  $to_host_file_cmd \"$1\"\n}\n# end func_to_host_file\n\n\n# func_to_tool_file ARG LAZY\n# converts the file name ARG from $build format to toolchain format. Return\n# result in func_to_tool_file_result.  If the conversion in use is listed\n# in (the comma separated) LAZY, no conversion takes place.\nfunc_to_tool_file ()\n{\n  $opt_debug\n  case ,$2, in\n    *,\"$to_tool_file_cmd\",*)\n      func_to_tool_file_result=$1\n      ;;\n    *)\n      $to_tool_file_cmd \"$1\"\n      func_to_tool_file_result=$func_to_host_file_result\n      ;;\n  esac\n}\n# end func_to_tool_file\n\n\n# func_convert_file_noop ARG\n# Copy ARG to func_to_host_file_result.\nfunc_convert_file_noop ()\n{\n  func_to_host_file_result=\"$1\"\n}\n# end func_convert_file_noop\n\n\n# func_convert_file_msys_to_w32 ARG\n# Convert file name ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_msys_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_w32\n\n\n# func_convert_file_cygwin_to_w32 ARG\n# Convert file name ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_file_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # because $build is cygwin, we call \"the\" cygpath in $PATH; no need to use\n    # LT_CYGPATH in this case.\n    func_to_host_file_result=`cygpath -m \"$1\"`\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_cygwin_to_w32\n\n\n# func_convert_file_nix_to_w32 ARG\n# Convert file name ARG from *nix to w32 format.  Requires a wine environment\n# and a working winepath. Returns result in func_to_host_file_result.\nfunc_convert_file_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_to_host_file_result=\"$func_convert_core_file_wine_to_w32_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_w32\n\n\n# func_convert_file_msys_to_cygwin ARG\n# Convert file name ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_file_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    func_convert_core_msys_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_msys_to_cygwin\n\n\n# func_convert_file_nix_to_cygwin ARG\n# Convert file name ARG from *nix to Cygwin format.  Requires Cygwin installed\n# in a wine environment, working winepath, and LT_CYGPATH set.  Returns result\n# in func_to_host_file_result.\nfunc_convert_file_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_file_result=\"$1\"\n  if test -n \"$1\"; then\n    # convert from *nix to w32, then use cygpath to convert from w32 to cygwin.\n    func_convert_core_file_wine_to_w32 \"$1\"\n    func_cygpath -u \"$func_convert_core_file_wine_to_w32_result\"\n    func_to_host_file_result=\"$func_cygpath_result\"\n  fi\n  func_convert_file_check \"$1\" \"$func_to_host_file_result\"\n}\n# end func_convert_file_nix_to_cygwin\n\n\n#############################################\n# $build to $host PATH CONVERSION FUNCTIONS #\n#############################################\n# invoked via `$to_host_path_cmd ARG'\n#\n# In each case, ARG is the path to be converted from $build to $host format.\n# The result will be available in $func_to_host_path_result.\n#\n# Path separators are also converted from $build format to $host format.  If\n# ARG begins or ends with a path separator character, it is preserved (but\n# converted to $host format) on output.\n#\n# All path conversion functions are named using the following convention:\n#   file name conversion function    : func_convert_file_X_to_Y ()\n#   path conversion function         : func_convert_path_X_to_Y ()\n# where, for any given $build/$host combination the 'X_to_Y' value is the\n# same.  If conversion functions are added for new $build/$host combinations,\n# the two new functions must follow this pattern, or func_init_to_host_path_cmd\n# will break.\n\n\n# func_init_to_host_path_cmd\n# Ensures that function \"pointer\" variable $to_host_path_cmd is set to the\n# appropriate value, based on the value of $to_host_file_cmd.\nto_host_path_cmd=\nfunc_init_to_host_path_cmd ()\n{\n  $opt_debug\n  if test -z \"$to_host_path_cmd\"; then\n    func_stripname 'func_convert_file_' '' \"$to_host_file_cmd\"\n    to_host_path_cmd=\"func_convert_path_${func_stripname_result}\"\n  fi\n}\n\n\n# func_to_host_path ARG\n# Converts the path ARG from $build format to $host format. Return result\n# in func_to_host_path_result.\nfunc_to_host_path ()\n{\n  $opt_debug\n  func_init_to_host_path_cmd\n  $to_host_path_cmd \"$1\"\n}\n# end func_to_host_path\n\n\n# func_convert_path_noop ARG\n# Copy ARG to func_to_host_path_result.\nfunc_convert_path_noop ()\n{\n  func_to_host_path_result=\"$1\"\n}\n# end func_convert_path_noop\n\n\n# func_convert_path_msys_to_w32 ARG\n# Convert path ARG from (mingw) MSYS to (mingw) w32 format; automatic\n# conversion to w32 is not available inside the cwrapper.  Returns result in\n# func_to_host_path_result.\nfunc_convert_path_msys_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from ARG.  MSYS\n    # behavior is inconsistent here; cygpath turns them into '.;' and ';.';\n    # and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_msys_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_w32\n\n\n# func_convert_path_cygwin_to_w32 ARG\n# Convert path ARG from Cygwin to w32 format.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_cygwin_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_to_host_path_result=`cygpath -m -p \"$func_to_host_path_tmp1\"`\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_cygwin_to_w32\n\n\n# func_convert_path_nix_to_w32 ARG\n# Convert path ARG from *nix to w32 format.  Requires a wine environment and\n# a working winepath.  Returns result in func_to_host_file_result.\nfunc_convert_path_nix_to_w32 ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_to_host_path_result=\"$func_convert_core_path_wine_to_w32_result\"\n    func_convert_path_check : \";\" \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" \";\" \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_w32\n\n\n# func_convert_path_msys_to_cygwin ARG\n# Convert path ARG from MSYS to Cygwin format.  Requires LT_CYGPATH set.\n# Returns result in func_to_host_file_result.\nfunc_convert_path_msys_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # See func_convert_path_msys_to_w32:\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_msys_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_msys_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_msys_to_cygwin\n\n\n# func_convert_path_nix_to_cygwin ARG\n# Convert path ARG from *nix to Cygwin format.  Requires Cygwin installed in a\n# a wine environment, working winepath, and LT_CYGPATH set.  Returns result in\n# func_to_host_file_result.\nfunc_convert_path_nix_to_cygwin ()\n{\n  $opt_debug\n  func_to_host_path_result=\"$1\"\n  if test -n \"$1\"; then\n    # Remove leading and trailing path separator characters from\n    # ARG. msys behavior is inconsistent here, cygpath turns them\n    # into '.;' and ';.', and winepath ignores them completely.\n    func_stripname : : \"$1\"\n    func_to_host_path_tmp1=$func_stripname_result\n    func_convert_core_path_wine_to_w32 \"$func_to_host_path_tmp1\"\n    func_cygpath -u -p \"$func_convert_core_path_wine_to_w32_result\"\n    func_to_host_path_result=\"$func_cygpath_result\"\n    func_convert_path_check : : \\\n      \"$func_to_host_path_tmp1\" \"$func_to_host_path_result\"\n    func_convert_path_front_back_pathsep \":*\" \"*:\" : \"$1\"\n  fi\n}\n# end func_convert_path_nix_to_cygwin\n\n\n# func_mode_compile arg...\nfunc_mode_compile ()\n{\n    $opt_debug\n    # Get the compilation command and the source file.\n    base_compile=\n    srcfile=\"$nonopt\"  #  always keep a non-empty value in \"srcfile\"\n    suppress_opt=yes\n    suppress_output=\n    arg_mode=normal\n    libobj=\n    later=\n    pie_flag=\n\n    for arg\n    do\n      case $arg_mode in\n      arg  )\n\t# do not \"continue\".  Instead, add this to base_compile\n\tlastarg=\"$arg\"\n\targ_mode=normal\n\t;;\n\n      target )\n\tlibobj=\"$arg\"\n\targ_mode=normal\n\tcontinue\n\t;;\n\n      normal )\n\t# Accept any command-line options.\n\tcase $arg in\n\t-o)\n\t  test -n \"$libobj\" && \\\n\t    func_fatal_error \"you cannot specify \\`-o' more than once\"\n\t  arg_mode=target\n\t  continue\n\t  ;;\n\n\t-pie | -fpie | -fPIE)\n          func_append pie_flag \" $arg\"\n\t  continue\n\t  ;;\n\n\t-shared | -static | -prefer-pic | -prefer-non-pic)\n\t  func_append later \" $arg\"\n\t  continue\n\t  ;;\n\n\t-no-suppress)\n\t  suppress_opt=no\n\t  continue\n\t  ;;\n\n\t-Xcompiler)\n\t  arg_mode=arg  #  the next one goes into the \"base_compile\" arg list\n\t  continue      #  The current \"srcfile\" will either be retained or\n\t  ;;            #  replaced later.  I would guess that would be a bug.\n\n\t-Wc,*)\n\t  func_stripname '-Wc,' '' \"$arg\"\n\t  args=$func_stripname_result\n\t  lastarg=\n\t  save_ifs=\"$IFS\"; IFS=','\n\t  for arg in $args; do\n\t    IFS=\"$save_ifs\"\n\t    func_append_quoted lastarg \"$arg\"\n\t  done\n\t  IFS=\"$save_ifs\"\n\t  func_stripname ' ' '' \"$lastarg\"\n\t  lastarg=$func_stripname_result\n\n\t  # Add the arguments to base_compile.\n\t  func_append base_compile \" $lastarg\"\n\t  continue\n\t  ;;\n\n\t*)\n\t  # Accept the current argument as the source file.\n\t  # The previous \"srcfile\" becomes the current argument.\n\t  #\n\t  lastarg=\"$srcfile\"\n\t  srcfile=\"$arg\"\n\t  ;;\n\tesac  #  case $arg\n\t;;\n      esac    #  case $arg_mode\n\n      # Aesthetically quote the previous argument.\n      func_append_quoted base_compile \"$lastarg\"\n    done # for arg\n\n    case $arg_mode in\n    arg)\n      func_fatal_error \"you must specify an argument for -Xcompile\"\n      ;;\n    target)\n      func_fatal_error \"you must specify a target with \\`-o'\"\n      ;;\n    *)\n      # Get the name of the library object.\n      test -z \"$libobj\" && {\n\tfunc_basename \"$srcfile\"\n\tlibobj=\"$func_basename_result\"\n      }\n      ;;\n    esac\n\n    # Recognize several different file suffixes.\n    # If the user specifies -o file.o, it is replaced with file.lo\n    case $libobj in\n    *.[cCFSifmso] | \\\n    *.ada | *.adb | *.ads | *.asm | \\\n    *.c++ | *.cc | *.ii | *.class | *.cpp | *.cxx | \\\n    *.[fF][09]? | *.for | *.java | *.go | *.obj | *.sx | *.cu | *.cup)\n      func_xform \"$libobj\"\n      libobj=$func_xform_result\n      ;;\n    esac\n\n    case $libobj in\n    *.lo) func_lo2o \"$libobj\"; obj=$func_lo2o_result ;;\n    *)\n      func_fatal_error \"cannot determine name of library object from \\`$libobj'\"\n      ;;\n    esac\n\n    func_infer_tag $base_compile\n\n    for arg in $later; do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tcontinue\n\t;;\n\n      -static)\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tcontinue\n\t;;\n\n      -prefer-pic)\n\tpic_mode=yes\n\tcontinue\n\t;;\n\n      -prefer-non-pic)\n\tpic_mode=no\n\tcontinue\n\t;;\n      esac\n    done\n\n    func_quote_for_eval \"$libobj\"\n    test \"X$libobj\" != \"X$func_quote_for_eval_result\" \\\n      && $ECHO \"X$libobj\" | $GREP '[]~#^*{};<>?\"'\"'\"'\t &()|`$[]' \\\n      && func_warning \"libobj name \\`$libobj' may not contain shell special characters.\"\n    func_dirname_and_basename \"$obj\" \"/\" \"\"\n    objname=\"$func_basename_result\"\n    xdir=\"$func_dirname_result\"\n    lobj=${xdir}$objdir/$objname\n\n    test -z \"$base_compile\" && \\\n      func_fatal_help \"you must specify a compilation command\"\n\n    # Delete any leftover library objects.\n    if test \"$build_old_libs\" = yes; then\n      removelist=\"$obj $lobj $libobj ${libobj}T\"\n    else\n      removelist=\"$lobj $libobj ${libobj}T\"\n    fi\n\n    # On Cygwin there's no \"real\" PIC flag so we must build both object types\n    case $host_os in\n    cygwin* | mingw* | pw32* | os2* | cegcc*)\n      pic_mode=default\n      ;;\n    esac\n    if test \"$pic_mode\" = no && test \"$deplibs_check_method\" != pass_all; then\n      # non-PIC code in shared libraries is not supported\n      pic_mode=default\n    fi\n\n    # Calculate the filename of the output object if compiler does\n    # not support -o with -c\n    if test \"$compiler_c_o\" = no; then\n      output_obj=`$ECHO \"$srcfile\" | $SED 's%^.*/%%; s%\\.[^.]*$%%'`.${objext}\n      lockfile=\"$output_obj.lock\"\n    else\n      output_obj=\n      need_locks=no\n      lockfile=\n    fi\n\n    # Lock this critical section if it is needed\n    # We use this script file to make the link, it avoids creating a new file\n    if test \"$need_locks\" = yes; then\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    elif test \"$need_locks\" = warn; then\n      if test -f \"$lockfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile exists and contains:\n`cat $lockfile 2>/dev/null`\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n      func_append removelist \" $output_obj\"\n      $ECHO \"$srcfile\" > \"$lockfile\"\n    fi\n\n    $opt_dry_run || $RM $removelist\n    func_append removelist \" $lockfile\"\n    trap '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE' 1 2 15\n\n    func_to_tool_file \"$srcfile\" func_convert_file_msys_to_w32\n    srcfile=$func_to_tool_file_result\n    func_quote_for_eval \"$srcfile\"\n    qsrcfile=$func_quote_for_eval_result\n\n    # Only build a PIC object if we are building libtool libraries.\n    if test \"$build_libtool_libs\" = yes; then\n      # Without this assignment, base_compile gets emptied.\n      fbsd_hideous_sh_bug=$base_compile\n\n      if test \"$pic_mode\" != no; then\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      else\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile\"\n      fi\n\n      func_mkdir_p \"$xdir$objdir\"\n\n      if test -z \"$output_obj\"; then\n\t# Place PIC objects in $objdir\n\tfunc_append command \" -o $lobj\"\n      fi\n\n      func_show_eval_locale \"$command\"\t\\\n          'test -n \"$output_obj\" && $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed, then go on to compile the next one\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$lobj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$lobj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n\n      # Allow error messages only from the first compilation.\n      if test \"$suppress_opt\" = yes; then\n\tsuppress_output=' >/dev/null 2>&1'\n      fi\n    fi\n\n    # Only build a position-dependent object if we build old libraries.\n    if test \"$build_old_libs\" = yes; then\n      if test \"$pic_mode\" != yes; then\n\t# Don't build PIC code\n\tcommand=\"$base_compile $qsrcfile$pie_flag\"\n      else\n\tcommand=\"$base_compile $qsrcfile $pic_flag\"\n      fi\n      if test \"$compiler_c_o\" = yes; then\n\tfunc_append command \" -o $obj\"\n      fi\n\n      # Suppress compiler output if we already did a PIC compilation.\n      func_append command \"$suppress_output\"\n      func_show_eval_locale \"$command\" \\\n        '$opt_dry_run || $RM $removelist; exit $EXIT_FAILURE'\n\n      if test \"$need_locks\" = warn &&\n\t test \"X`cat $lockfile 2>/dev/null`\" != \"X$srcfile\"; then\n\t$ECHO \"\\\n*** ERROR, $lockfile contains:\n`cat $lockfile 2>/dev/null`\n\nbut it should contain:\n$srcfile\n\nThis indicates that another process is trying to use the same\ntemporary object file, and libtool could not work around it because\nyour compiler does not support \\`-c' and \\`-o' together.  If you\nrepeat this compilation, it may succeed, by chance, but you had better\navoid parallel builds (make -j) in this platform, or get a better\ncompiler.\"\n\n\t$opt_dry_run || $RM $removelist\n\texit $EXIT_FAILURE\n      fi\n\n      # Just move the object if needed\n      if test -n \"$output_obj\" && test \"X$output_obj\" != \"X$obj\"; then\n\tfunc_show_eval '$MV \"$output_obj\" \"$obj\"' \\\n\t  'error=$?; $opt_dry_run || $RM $removelist; exit $error'\n      fi\n    fi\n\n    $opt_dry_run || {\n      func_write_libtool_object \"$libobj\" \"$objdir/$objname\" \"$objname\"\n\n      # Unlock the critical section if it was locked\n      if test \"$need_locks\" != no; then\n\tremovelist=$lockfile\n        $RM \"$lockfile\"\n      fi\n    }\n\n    exit $EXIT_SUCCESS\n}\n\n$opt_help || {\n  test \"$opt_mode\" = compile && func_mode_compile ${1+\"$@\"}\n}\n\nfunc_mode_help ()\n{\n    # We need to display help for each of the modes.\n    case $opt_mode in\n      \"\")\n        # Generic help is extracted from the usage comments\n        # at the start of this file.\n        func_help\n        ;;\n\n      clean)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=clean RM [RM-OPTION]... FILE...\n\nRemove files from the build directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, object or program, all the files associated\nwith it are deleted. Otherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      compile)\n      $ECHO \\\n\"Usage: $progname [OPTION]... --mode=compile COMPILE-COMMAND... SOURCEFILE\n\nCompile a source file into a libtool library object.\n\nThis mode accepts the following additional options:\n\n  -o OUTPUT-FILE    set the output file name to OUTPUT-FILE\n  -no-suppress      do not suppress compiler output for multiple passes\n  -prefer-pic       try to build PIC objects only\n  -prefer-non-pic   try to build non-PIC objects only\n  -shared           do not build a \\`.o' file suitable for static linking\n  -static           only build a \\`.o' file suitable for static linking\n  -Wc,FLAG          pass FLAG directly to the compiler\n\nCOMPILE-COMMAND is a command to be used in creating a \\`standard' object file\nfrom the given SOURCEFILE.\n\nThe output file name is determined by removing the directory component from\nSOURCEFILE, then substituting the C source code suffix \\`.c' with the\nlibrary object suffix, \\`.lo'.\"\n        ;;\n\n      execute)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=execute COMMAND [ARGS]...\n\nAutomatically set library path, then run a program.\n\nThis mode accepts the following additional options:\n\n  -dlopen FILE      add the directory containing FILE to the library path\n\nThis mode sets the library path environment variable according to \\`-dlopen'\nflags.\n\nIf any of the ARGS are libtool executable wrappers, then they are translated\ninto their corresponding uninstalled binary, and any of their required library\ndirectories are added to the library path.\n\nThen, COMMAND is executed, with ARGS as arguments.\"\n        ;;\n\n      finish)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=finish [LIBDIR]...\n\nComplete the installation of libtool libraries.\n\nEach LIBDIR is a directory that contains libtool libraries.\n\nThe commands that this mode executes may require superuser privileges.  Use\nthe \\`--dry-run' option if you just want to see what would be executed.\"\n        ;;\n\n      install)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=install INSTALL-COMMAND...\n\nInstall executables or libraries.\n\nINSTALL-COMMAND is the installation command.  The first component should be\neither the \\`install' or \\`cp' program.\n\nThe following components of INSTALL-COMMAND are treated specially:\n\n  -inst-prefix-dir PREFIX-DIR  Use PREFIX-DIR as a staging area for installation\n\nThe rest of the components are interpreted as arguments to that command (only\nBSD-compatible install options are recognized).\"\n        ;;\n\n      link)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=link LINK-COMMAND...\n\nLink object files or libraries together to form another library, or to\ncreate an executable program.\n\nLINK-COMMAND is a command using the C compiler that you would use to create\na program from several object files.\n\nThe following components of LINK-COMMAND are treated specially:\n\n  -all-static       do not do any dynamic linking at all\n  -avoid-version    do not add a version suffix if possible\n  -bindir BINDIR    specify path to binaries directory (for systems where\n                    libraries must be found in the PATH setting at runtime)\n  -dlopen FILE      \\`-dlpreopen' FILE if it cannot be dlopened at runtime\n  -dlpreopen FILE   link in FILE and add its symbols to lt_preloaded_symbols\n  -export-dynamic   allow symbols from OUTPUT-FILE to be resolved with dlsym(3)\n  -export-symbols SYMFILE\n                    try to export only the symbols listed in SYMFILE\n  -export-symbols-regex REGEX\n                    try to export only the symbols matching REGEX\n  -LLIBDIR          search LIBDIR for required installed libraries\n  -lNAME            OUTPUT-FILE requires the installed library libNAME\n  -module           build a library that can dlopened\n  -no-fast-install  disable the fast-install mode\n  -no-install       link a not-installable executable\n  -no-undefined     declare that a library does not refer to external symbols\n  -o OUTPUT-FILE    create OUTPUT-FILE from the specified objects\n  -objectlist FILE  Use a list of object files found in FILE to specify objects\n  -precious-files-regex REGEX\n                    don't remove output files matching REGEX\n  -release RELEASE  specify package release information\n  -rpath LIBDIR     the created library will eventually be installed in LIBDIR\n  -R[ ]LIBDIR       add LIBDIR to the runtime path of programs and libraries\n  -shared           only do dynamic linking of libtool libraries\n  -shrext SUFFIX    override the standard shared library file extension\n  -static           do not do any dynamic linking of uninstalled libtool libraries\n  -static-libtool-libs\n                    do not do any dynamic linking of libtool libraries\n  -version-info CURRENT[:REVISION[:AGE]]\n                    specify library version info [each variable defaults to 0]\n  -weak LIBNAME     declare that the target provides the LIBNAME interface\n  -Wc,FLAG\n  -Xcompiler FLAG   pass linker-specific FLAG directly to the compiler\n  -Wl,FLAG\n  -Xlinker FLAG     pass linker-specific FLAG directly to the linker\n  -XCClinker FLAG   pass link-specific FLAG to the compiler driver (CC)\n\nAll other options (arguments beginning with \\`-') are ignored.\n\nEvery other argument is treated as a filename.  Files ending in \\`.la' are\ntreated as uninstalled libtool libraries, other files are standard or library\nobject files.\n\nIf the OUTPUT-FILE ends in \\`.la', then a libtool library is created,\nonly library objects (\\`.lo' files) may be specified, and \\`-rpath' is\nrequired, except when creating a convenience library.\n\nIf OUTPUT-FILE ends in \\`.a' or \\`.lib', then a standard library is created\nusing \\`ar' and \\`ranlib', or on Windows using \\`lib'.\n\nIf OUTPUT-FILE ends in \\`.lo' or \\`.${objext}', then a reloadable object file\nis created, otherwise an executable program is created.\"\n        ;;\n\n      uninstall)\n        $ECHO \\\n\"Usage: $progname [OPTION]... --mode=uninstall RM [RM-OPTION]... FILE...\n\nRemove libraries from an installation directory.\n\nRM is the name of the program to use to delete files associated with each FILE\n(typically \\`/bin/rm').  RM-OPTIONS are options (such as \\`-f') to be passed\nto RM.\n\nIf FILE is a libtool library, all the files associated with it are deleted.\nOtherwise, only FILE itself is deleted using RM.\"\n        ;;\n\n      *)\n        func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n        ;;\n    esac\n\n    echo\n    $ECHO \"Try \\`$progname --help' for more information about other modes.\"\n}\n\n# Now that we've collected a possible --mode arg, show help if necessary\nif $opt_help; then\n  if test \"$opt_help\" = :; then\n    func_mode_help\n  else\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\tfunc_mode_help\n      done\n    } | sed -n '1p; 2,$s/^Usage:/  or: /p'\n    {\n      func_help noexit\n      for opt_mode in compile link execute install finish uninstall clean; do\n\techo\n\tfunc_mode_help\n      done\n    } |\n    sed '1d\n      /^When reporting/,/^Report/{\n\tH\n\td\n      }\n      $x\n      /information about other modes/d\n      /more detailed .*MODE/d\n      s/^Usage:.*--mode=\\([^ ]*\\) .*/Description of \\1 mode:/'\n  fi\n  exit $?\nfi\n\n\n# func_mode_execute arg...\nfunc_mode_execute ()\n{\n    $opt_debug\n    # The first argument is the command name.\n    cmd=\"$nonopt\"\n    test -z \"$cmd\" && \\\n      func_fatal_help \"you must specify a COMMAND\"\n\n    # Handle -dlopen flags immediately.\n    for file in $opt_dlopen; do\n      test -f \"$file\" \\\n\t|| func_fatal_help \"\\`$file' is not a file\"\n\n      dir=\n      case $file in\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$lib' is not a valid libtool archive\"\n\n\t# Read the libtool library.\n\tdlname=\n\tlibrary_names=\n\tfunc_source \"$file\"\n\n\t# Skip this library if it cannot be dlopened.\n\tif test -z \"$dlname\"; then\n\t  # Warn if it was a shared library.\n\t  test -n \"$library_names\" && \\\n\t    func_warning \"\\`$file' was not linked with \\`-export-dynamic'\"\n\t  continue\n\tfi\n\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\n\tif test -f \"$dir/$objdir/$dlname\"; then\n\t  func_append dir \"/$objdir\"\n\telse\n\t  if test ! -f \"$dir/$dlname\"; then\n\t    func_fatal_error \"cannot find \\`$dlname' in \\`$dir' or \\`$dir/$objdir'\"\n\t  fi\n\tfi\n\t;;\n\n      *.lo)\n\t# Just add the directory containing the .lo file.\n\tfunc_dirname \"$file\" \"\" \".\"\n\tdir=\"$func_dirname_result\"\n\t;;\n\n      *)\n\tfunc_warning \"\\`-dlopen' is ignored for non-libtool libraries and objects\"\n\tcontinue\n\t;;\n      esac\n\n      # Get the absolute pathname.\n      absdir=`cd \"$dir\" && pwd`\n      test -n \"$absdir\" && dir=\"$absdir\"\n\n      # Now add the directory to shlibpath_var.\n      if eval \"test -z \\\"\\$$shlibpath_var\\\"\"; then\n\teval \"$shlibpath_var=\\\"\\$dir\\\"\"\n      else\n\teval \"$shlibpath_var=\\\"\\$dir:\\$$shlibpath_var\\\"\"\n      fi\n    done\n\n    # This variable tells wrapper scripts just to set shlibpath_var\n    # rather than running their programs.\n    libtool_execute_magic=\"$magic\"\n\n    # Check if any of the arguments is a wrapper script.\n    args=\n    for file\n    do\n      case $file in\n      -* | *.la | *.lo ) ;;\n      *)\n\t# Do a test to see if this is really a libtool program.\n\tif func_ltwrapper_script_p \"$file\"; then\n\t  func_source \"$file\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\telif func_ltwrapper_executable_p \"$file\"; then\n\t  func_ltwrapper_scriptname \"$file\"\n\t  func_source \"$func_ltwrapper_scriptname_result\"\n\t  # Transform arg to wrapped name.\n\t  file=\"$progdir/$program\"\n\tfi\n\t;;\n      esac\n      # Quote arguments (to preserve shell metacharacters).\n      func_append_quoted args \"$file\"\n    done\n\n    if test \"X$opt_dry_run\" = Xfalse; then\n      if test -n \"$shlibpath_var\"; then\n\t# Export the shlibpath_var.\n\teval \"export $shlibpath_var\"\n      fi\n\n      # Restore saved environment variables\n      for lt_var in LANG LANGUAGE LC_ALL LC_CTYPE LC_COLLATE LC_MESSAGES\n      do\n\teval \"if test \\\"\\${save_$lt_var+set}\\\" = set; then\n                $lt_var=\\$save_$lt_var; export $lt_var\n\t      else\n\t\t$lt_unset $lt_var\n\t      fi\"\n      done\n\n      # Now prepare to actually exec the command.\n      exec_cmd=\"\\$cmd$args\"\n    else\n      # Display what would be done.\n      if test -n \"$shlibpath_var\"; then\n\teval \"\\$ECHO \\\"\\$shlibpath_var=\\$$shlibpath_var\\\"\"\n\techo \"export $shlibpath_var\"\n      fi\n      $ECHO \"$cmd$args\"\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = execute && func_mode_execute ${1+\"$@\"}\n\n\n# func_mode_finish arg...\nfunc_mode_finish ()\n{\n    $opt_debug\n    libs=\n    libdirs=\n    admincmds=\n\n    for opt in \"$nonopt\" ${1+\"$@\"}\n    do\n      if test -d \"$opt\"; then\n\tfunc_append libdirs \" $opt\"\n\n      elif test -f \"$opt\"; then\n\tif func_lalib_unsafe_p \"$opt\"; then\n\t  func_append libs \" $opt\"\n\telse\n\t  func_warning \"\\`$opt' is not a valid libtool archive\"\n\tfi\n\n      else\n\tfunc_fatal_error \"invalid argument \\`$opt'\"\n      fi\n    done\n\n    if test -n \"$libs\"; then\n      if test -n \"$lt_sysroot\"; then\n        sysroot_regex=`$ECHO \"$lt_sysroot\" | $SED \"$sed_make_literal_regex\"`\n        sysroot_cmd=\"s/\\([ ']\\)$sysroot_regex/\\1/g;\"\n      else\n        sysroot_cmd=\n      fi\n\n      # Remove sysroot references\n      if $opt_dry_run; then\n        for lib in $libs; do\n          echo \"removing references to $lt_sysroot and \\`=' prefixes from $lib\"\n        done\n      else\n        tmpdir=`func_mktempdir`\n        for lib in $libs; do\n\t  sed -e \"${sysroot_cmd} s/\\([ ']-[LR]\\)=/\\1/g; s/\\([ ']\\)=/\\1/g\" $lib \\\n\t    > $tmpdir/tmp-la\n\t  mv -f $tmpdir/tmp-la $lib\n\tdone\n        ${RM}r \"$tmpdir\"\n      fi\n    fi\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      for libdir in $libdirs; do\n\tif test -n \"$finish_cmds\"; then\n\t  # Do each command in the finish commands.\n\t  func_execute_cmds \"$finish_cmds\" 'admincmds=\"$admincmds\n'\"$cmd\"'\"'\n\tfi\n\tif test -n \"$finish_eval\"; then\n\t  # Do the single finish_eval.\n\t  eval cmds=\\\"$finish_eval\\\"\n\t  $opt_dry_run || eval \"$cmds\" || func_append admincmds \"\n       $cmds\"\n\tfi\n      done\n    fi\n\n    # Exit here if they wanted silent mode.\n    $opt_silent && exit $EXIT_SUCCESS\n\n    if test -n \"$finish_cmds$finish_eval\" && test -n \"$libdirs\"; then\n      echo \"----------------------------------------------------------------------\"\n      echo \"Libraries have been installed in:\"\n      for libdir in $libdirs; do\n\t$ECHO \"   $libdir\"\n      done\n      echo\n      echo \"If you ever happen to want to link against installed libraries\"\n      echo \"in a given directory, LIBDIR, you must either use libtool, and\"\n      echo \"specify the full pathname of the library, or use the \\`-LLIBDIR'\"\n      echo \"flag during linking and do at least one of the following:\"\n      if test -n \"$shlibpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$shlibpath_var' environment variable\"\n\techo \"     during execution\"\n      fi\n      if test -n \"$runpath_var\"; then\n\techo \"   - add LIBDIR to the \\`$runpath_var' environment variable\"\n\techo \"     during linking\"\n      fi\n      if test -n \"$hardcode_libdir_flag_spec\"; then\n\tlibdir=LIBDIR\n\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\n\t$ECHO \"   - use the \\`$flag' linker flag\"\n      fi\n      if test -n \"$admincmds\"; then\n\t$ECHO \"   - have your system administrator run these commands:$admincmds\"\n      fi\n      if test -f /etc/ld.so.conf; then\n\techo \"   - have your system administrator add LIBDIR to \\`/etc/ld.so.conf'\"\n      fi\n      echo\n\n      echo \"See any operating system documentation about shared libraries for\"\n      case $host in\n\tsolaris2.[6789]|solaris2.1[0-9])\n\t  echo \"more information, such as the ld(1), crle(1) and ld.so(8) manual\"\n\t  echo \"pages.\"\n\t  ;;\n\t*)\n\t  echo \"more information, such as the ld(1) and ld.so(8) manual pages.\"\n\t  ;;\n      esac\n      echo \"----------------------------------------------------------------------\"\n    fi\n    exit $EXIT_SUCCESS\n}\n\ntest \"$opt_mode\" = finish && func_mode_finish ${1+\"$@\"}\n\n\n# func_mode_install arg...\nfunc_mode_install ()\n{\n    $opt_debug\n    # There may be an optional sh(1) argument at the beginning of\n    # install_prog (especially on Windows NT).\n    if test \"$nonopt\" = \"$SHELL\" || test \"$nonopt\" = /bin/sh ||\n       # Allow the use of GNU shtool's install command.\n       case $nonopt in *shtool*) :;; *) false;; esac; then\n      # Aesthetically quote it.\n      func_quote_for_eval \"$nonopt\"\n      install_prog=\"$func_quote_for_eval_result \"\n      arg=$1\n      shift\n    else\n      install_prog=\n      arg=$nonopt\n    fi\n\n    # The real first argument should be the name of the installation program.\n    # Aesthetically quote it.\n    func_quote_for_eval \"$arg\"\n    func_append install_prog \"$func_quote_for_eval_result\"\n    install_shared_prog=$install_prog\n    case \" $install_prog \" in\n      *[\\\\\\ /]cp\\ *) install_cp=: ;;\n      *) install_cp=false ;;\n    esac\n\n    # We need to accept at least all the BSD install flags.\n    dest=\n    files=\n    opts=\n    prev=\n    install_type=\n    isdir=no\n    stripme=\n    no_mode=:\n    for arg\n    do\n      arg2=\n      if test -n \"$dest\"; then\n\tfunc_append files \" $dest\"\n\tdest=$arg\n\tcontinue\n      fi\n\n      case $arg in\n      -d) isdir=yes ;;\n      -f)\n\tif $install_cp; then :; else\n\t  prev=$arg\n\tfi\n\t;;\n      -g | -m | -o)\n\tprev=$arg\n\t;;\n      -s)\n\tstripme=\" -s\"\n\tcontinue\n\t;;\n      -*)\n\t;;\n      *)\n\t# If the previous option needed an argument, then skip it.\n\tif test -n \"$prev\"; then\n\t  if test \"x$prev\" = x-m && test -n \"$install_override_mode\"; then\n\t    arg2=$install_override_mode\n\t    no_mode=false\n\t  fi\n\t  prev=\n\telse\n\t  dest=$arg\n\t  continue\n\tfi\n\t;;\n      esac\n\n      # Aesthetically quote the argument.\n      func_quote_for_eval \"$arg\"\n      func_append install_prog \" $func_quote_for_eval_result\"\n      if test -n \"$arg2\"; then\n\tfunc_quote_for_eval \"$arg2\"\n      fi\n      func_append install_shared_prog \" $func_quote_for_eval_result\"\n    done\n\n    test -z \"$install_prog\" && \\\n      func_fatal_help \"you must specify an install program\"\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prev' option requires an argument\"\n\n    if test -n \"$install_override_mode\" && $no_mode; then\n      if $install_cp; then :; else\n\tfunc_quote_for_eval \"$install_override_mode\"\n\tfunc_append install_shared_prog \" -m $func_quote_for_eval_result\"\n      fi\n    fi\n\n    if test -z \"$files\"; then\n      if test -z \"$dest\"; then\n\tfunc_fatal_help \"no file or destination specified\"\n      else\n\tfunc_fatal_help \"you must specify a destination\"\n      fi\n    fi\n\n    # Strip any trailing slash from the destination.\n    func_stripname '' '/' \"$dest\"\n    dest=$func_stripname_result\n\n    # Check to see that the destination is a directory.\n    test -d \"$dest\" && isdir=yes\n    if test \"$isdir\" = yes; then\n      destdir=\"$dest\"\n      destname=\n    else\n      func_dirname_and_basename \"$dest\" \"\" \".\"\n      destdir=\"$func_dirname_result\"\n      destname=\"$func_basename_result\"\n\n      # Not a directory, so check to see that there is only one file specified.\n      set dummy $files; shift\n      test \"$#\" -gt 1 && \\\n\tfunc_fatal_help \"\\`$dest' is not a directory\"\n    fi\n    case $destdir in\n    [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n    *)\n      for file in $files; do\n\tcase $file in\n\t*.lo) ;;\n\t*)\n\t  func_fatal_help \"\\`$destdir' must be an absolute directory name\"\n\t  ;;\n\tesac\n      done\n      ;;\n    esac\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    staticlibs=\n    future_libdirs=\n    current_libdirs=\n    for file in $files; do\n\n      # Do each installation.\n      case $file in\n      *.$libext)\n\t# Do the static libraries later.\n\tfunc_append staticlibs \" $file\"\n\t;;\n\n      *.la)\n\tfunc_resolve_sysroot \"$file\"\n\tfile=$func_resolve_sysroot_result\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$file\" \\\n\t  || func_fatal_help \"\\`$file' is not a valid libtool archive\"\n\n\tlibrary_names=\n\told_library=\n\trelink_command=\n\tfunc_source \"$file\"\n\n\t# Add the libdir to current_libdirs if it is the destination.\n\tif test \"X$destdir\" = \"X$libdir\"; then\n\t  case \"$current_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append current_libdirs \" $libdir\" ;;\n\t  esac\n\telse\n\t  # Note the libdir as a future libdir.\n\t  case \"$future_libdirs \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append future_libdirs \" $libdir\" ;;\n\t  esac\n\tfi\n\n\tfunc_dirname \"$file\" \"/\" \"\"\n\tdir=\"$func_dirname_result\"\n\tfunc_append dir \"$objdir\"\n\n\tif test -n \"$relink_command\"; then\n\t  # Determine the prefix the user has applied to our future dir.\n\t  inst_prefix_dir=`$ECHO \"$destdir\" | $SED -e \"s%$libdir\\$%%\"`\n\n\t  # Don't allow the user to place us outside of our expected\n\t  # location b/c this prevents finding dependent libraries that\n\t  # are installed to the same prefix.\n\t  # At present, this check doesn't affect windows .dll's that\n\t  # are installed into $libdir/../bin (currently, that works fine)\n\t  # but it's something to keep an eye on.\n\t  test \"$inst_prefix_dir\" = \"$destdir\" && \\\n\t    func_fatal_error \"error: cannot install \\`$file' to a directory not ending in $libdir\"\n\n\t  if test -n \"$inst_prefix_dir\"; then\n\t    # Stick the inst_prefix_dir data into the link command.\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%-inst-prefix-dir $inst_prefix_dir%\"`\n\t  else\n\t    relink_command=`$ECHO \"$relink_command\" | $SED \"s%@inst_prefix_dir@%%\"`\n\t  fi\n\n\t  func_warning \"relinking \\`$file'\"\n\t  func_show_eval \"$relink_command\" \\\n\t    'func_fatal_error \"error: relink \\`$file'\\'' with the above command before installing it\"'\n\tfi\n\n\t# See the names of the shared library.\n\tset dummy $library_names; shift\n\tif test -n \"$1\"; then\n\t  realname=\"$1\"\n\t  shift\n\n\t  srcname=\"$realname\"\n\t  test -n \"$relink_command\" && srcname=\"$realname\"T\n\n\t  # Install the shared library and build the symlinks.\n\t  func_show_eval \"$install_shared_prog $dir/$srcname $destdir/$realname\" \\\n\t      'exit $?'\n\t  tstripme=\"$stripme\"\n\t  case $host_os in\n\t  cygwin* | mingw* | pw32* | cegcc*)\n\t    case $realname in\n\t    *.dll.a)\n\t      tstripme=\"\"\n\t      ;;\n\t    esac\n\t    ;;\n\t  esac\n\t  if test -n \"$tstripme\" && test -n \"$striplib\"; then\n\t    func_show_eval \"$striplib $destdir/$realname\" 'exit $?'\n\t  fi\n\n\t  if test \"$#\" -gt 0; then\n\t    # Delete the old symlinks, and create new ones.\n\t    # Try `ln -sf' first, because the `ln' binary might depend on\n\t    # the symlink we replace!  Solaris /bin/ln does not understand -f,\n\t    # so we also need to try rm && ln -s.\n\t    for linkname\n\t    do\n\t      test \"$linkname\" != \"$realname\" \\\n\t\t&& func_show_eval \"(cd $destdir && { $LN_S -f $realname $linkname || { $RM $linkname && $LN_S $realname $linkname; }; })\"\n\t    done\n\t  fi\n\n\t  # Do each command in the postinstall commands.\n\t  lib=\"$destdir/$realname\"\n\t  func_execute_cmds \"$postinstall_cmds\" 'exit $?'\n\tfi\n\n\t# Install the pseudo-library for information purposes.\n\tfunc_basename \"$file\"\n\tname=\"$func_basename_result\"\n\tinstname=\"$dir/$name\"i\n\tfunc_show_eval \"$install_prog $instname $destdir/$name\" 'exit $?'\n\n\t# Maybe install the static library, too.\n\ttest -n \"$old_library\" && func_append staticlibs \" $dir/$old_library\"\n\t;;\n\n      *.lo)\n\t# Install (i.e. copy) a libtool object.\n\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# Deduce the name of the destination old-style object file.\n\tcase $destfile in\n\t*.lo)\n\t  func_lo2o \"$destfile\"\n\t  staticdest=$func_lo2o_result\n\t  ;;\n\t*.$objext)\n\t  staticdest=\"$destfile\"\n\t  destfile=\n\t  ;;\n\t*)\n\t  func_fatal_help \"cannot copy a libtool object to \\`$destfile'\"\n\t  ;;\n\tesac\n\n\t# Install the libtool object if requested.\n\ttest -n \"$destfile\" && \\\n\t  func_show_eval \"$install_prog $file $destfile\" 'exit $?'\n\n\t# Install the old object if enabled.\n\tif test \"$build_old_libs\" = yes; then\n\t  # Deduce the name of the old-style object file.\n\t  func_lo2o \"$file\"\n\t  staticobj=$func_lo2o_result\n\t  func_show_eval \"$install_prog \\$staticobj \\$staticdest\" 'exit $?'\n\tfi\n\texit $EXIT_SUCCESS\n\t;;\n\n      *)\n\t# Figure out destination file name, if it wasn't already specified.\n\tif test -n \"$destname\"; then\n\t  destfile=\"$destdir/$destname\"\n\telse\n\t  func_basename \"$file\"\n\t  destfile=\"$func_basename_result\"\n\t  destfile=\"$destdir/$destfile\"\n\tfi\n\n\t# If the file is missing, and there is a .exe on the end, strip it\n\t# because it is most likely a libtool script we actually want to\n\t# install\n\tstripped_ext=\"\"\n\tcase $file in\n\t  *.exe)\n\t    if test ! -f \"$file\"; then\n\t      func_stripname '' '.exe' \"$file\"\n\t      file=$func_stripname_result\n\t      stripped_ext=\".exe\"\n\t    fi\n\t    ;;\n\tesac\n\n\t# Do a test to see if this is really a libtool program.\n\tcase $host in\n\t*cygwin* | *mingw*)\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      wrapper=$func_ltwrapper_scriptname_result\n\t    else\n\t      func_stripname '' '.exe' \"$file\"\n\t      wrapper=$func_stripname_result\n\t    fi\n\t    ;;\n\t*)\n\t    wrapper=$file\n\t    ;;\n\tesac\n\tif func_ltwrapper_script_p \"$wrapper\"; then\n\t  notinst_deplibs=\n\t  relink_command=\n\n\t  func_source \"$wrapper\"\n\n\t  # Check the variables that should have been set.\n\t  test -z \"$generated_by_libtool_version\" && \\\n\t    func_fatal_error \"invalid libtool wrapper script \\`$wrapper'\"\n\n\t  finalize=yes\n\t  for lib in $notinst_deplibs; do\n\t    # Check to see that each library is installed.\n\t    libdir=\n\t    if test -f \"$lib\"; then\n\t      func_source \"$lib\"\n\t    fi\n\t    libfile=\"$libdir/\"`$ECHO \"$lib\" | $SED 's%^.*/%%g'` ### testsuite: skip nested quoting test\n\t    if test -n \"$libdir\" && test ! -f \"$libfile\"; then\n\t      func_warning \"\\`$lib' has not been installed in \\`$libdir'\"\n\t      finalize=no\n\t    fi\n\t  done\n\n\t  relink_command=\n\t  func_source \"$wrapper\"\n\n\t  outputname=\n\t  if test \"$fast_install\" = no && test -n \"$relink_command\"; then\n\t    $opt_dry_run || {\n\t      if test \"$finalize\" = yes; then\n\t        tmpdir=`func_mktempdir`\n\t\tfunc_basename \"$file$stripped_ext\"\n\t\tfile=\"$func_basename_result\"\n\t        outputname=\"$tmpdir/$file\"\n\t        # Replace the output file specification.\n\t        relink_command=`$ECHO \"$relink_command\" | $SED 's%@OUTPUT@%'\"$outputname\"'%g'`\n\n\t        $opt_silent || {\n\t          func_quote_for_expand \"$relink_command\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t        }\n\t        if eval \"$relink_command\"; then :\n\t          else\n\t\t  func_error \"error: relink \\`$file' with the above command before installing it\"\n\t\t  $opt_dry_run || ${RM}r \"$tmpdir\"\n\t\t  continue\n\t        fi\n\t        file=\"$outputname\"\n\t      else\n\t        func_warning \"cannot relink \\`$file'\"\n\t      fi\n\t    }\n\t  else\n\t    # Install the binary that we compiled earlier.\n\t    file=`$ECHO \"$file$stripped_ext\" | $SED \"s%\\([^/]*\\)$%$objdir/\\1%\"`\n\t  fi\n\tfi\n\n\t# remove .exe since cygwin /usr/bin/install will append another\n\t# one anyway\n\tcase $install_prog,$host in\n\t*/usr/bin/install*,*cygwin*)\n\t  case $file:$destfile in\n\t  *.exe:*.exe)\n\t    # this is ok\n\t    ;;\n\t  *.exe:*)\n\t    destfile=$destfile.exe\n\t    ;;\n\t  *:*.exe)\n\t    func_stripname '' '.exe' \"$destfile\"\n\t    destfile=$func_stripname_result\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tfunc_show_eval \"$install_prog\\$stripme \\$file \\$destfile\" 'exit $?'\n\t$opt_dry_run || if test -n \"$outputname\"; then\n\t  ${RM}r \"$tmpdir\"\n\tfi\n\t;;\n      esac\n    done\n\n    for file in $staticlibs; do\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n\n      # Set up the ranlib parameters.\n      oldlib=\"$destdir/$name\"\n      func_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n      tool_oldlib=$func_to_tool_file_result\n\n      func_show_eval \"$install_prog \\$file \\$oldlib\" 'exit $?'\n\n      if test -n \"$stripme\" && test -n \"$old_striplib\"; then\n\tfunc_show_eval \"$old_striplib $tool_oldlib\" 'exit $?'\n      fi\n\n      # Do each command in the postinstall commands.\n      func_execute_cmds \"$old_postinstall_cmds\" 'exit $?'\n    done\n\n    test -n \"$future_libdirs\" && \\\n      func_warning \"remember to run \\`$progname --finish$future_libdirs'\"\n\n    if test -n \"$current_libdirs\"; then\n      # Maybe just do a dry run.\n      $opt_dry_run && current_libdirs=\" -n$current_libdirs\"\n      exec_cmd='$SHELL $progpath $preserve_args --finish$current_libdirs'\n    else\n      exit $EXIT_SUCCESS\n    fi\n}\n\ntest \"$opt_mode\" = install && func_mode_install ${1+\"$@\"}\n\n\n# func_generate_dlsyms outputname originator pic_p\n# Extract symbols from dlprefiles and create ${outputname}S.o with\n# a dlpreopen symbol table.\nfunc_generate_dlsyms ()\n{\n    $opt_debug\n    my_outputname=\"$1\"\n    my_originator=\"$2\"\n    my_pic_p=\"${3-no}\"\n    my_prefix=`$ECHO \"$my_originator\" | sed 's%[^a-zA-Z0-9]%_%g'`\n    my_dlsyms=\n\n    if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n      if test -n \"$NM\" && test -n \"$global_symbol_pipe\"; then\n\tmy_dlsyms=\"${my_outputname}S.c\"\n      else\n\tfunc_error \"not configured to extract global symbols from dlpreopened files\"\n      fi\n    fi\n\n    if test -n \"$my_dlsyms\"; then\n      case $my_dlsyms in\n      \"\") ;;\n      *.c)\n\t# Discover the nlist of each of the dlfiles.\n\tnlist=\"$output_objdir/${my_outputname}.nm\"\n\n\tfunc_show_eval \"$RM $nlist ${nlist}S ${nlist}T\"\n\n\t# Parse the name list into a source file.\n\tfunc_verbose \"creating $output_objdir/$my_dlsyms\"\n\n\t$opt_dry_run || $ECHO > \"$output_objdir/$my_dlsyms\" \"\\\n/* $my_dlsyms - symbol resolution table for \\`$my_outputname' dlsym emulation. */\n/* Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION */\n\n#ifdef __cplusplus\nextern \\\"C\\\" {\n#endif\n\n#if defined(__GNUC__) && (((__GNUC__ == 4) && (__GNUC_MINOR__ >= 4)) || (__GNUC__ > 4))\n#pragma GCC diagnostic ignored \\\"-Wstrict-prototypes\\\"\n#endif\n\n/* Keep this code in sync between libtool.m4, ltmain, lt_system.h, and tests.  */\n#if defined(_WIN32) || defined(__CYGWIN__) || defined(_WIN32_WCE)\n/* DATA imports from DLLs on WIN32 con't be const, because runtime\n   relocations are performed -- see ld's documentation on pseudo-relocs.  */\n# define LT_DLSYM_CONST\n#elif defined(__osf__)\n/* This system does not cope well with relocations in const data.  */\n# define LT_DLSYM_CONST\n#else\n# define LT_DLSYM_CONST const\n#endif\n\n/* External symbol declarations for the compiler. */\\\n\"\n\n\tif test \"$dlself\" = yes; then\n\t  func_verbose \"generating symbol list for \\`$output'\"\n\n\t  $opt_dry_run || echo ': @PROGRAM@ ' > \"$nlist\"\n\n\t  # Add our own program objects to the symbol list.\n\t  progfiles=`$ECHO \"$objs$old_deplibs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\t  for progfile in $progfiles; do\n\t    func_to_tool_file \"$progfile\" func_convert_file_msys_to_w32\n\t    func_verbose \"extracting global C symbols from \\`$func_to_tool_file_result'\"\n\t    $opt_dry_run || eval \"$NM $func_to_tool_file_result | $global_symbol_pipe >> '$nlist'\"\n\t  done\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  if test -n \"$export_symbols_regex\"; then\n\t    $opt_dry_run || {\n\t      eval '$EGREP -e \"$export_symbols_regex\" \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t    }\n\t  fi\n\n\t  # Prepare the list of exported symbols\n\t  if test -z \"$export_symbols\"; then\n\t    export_symbols=\"$output_objdir/$outputname.exp\"\n\t    $opt_dry_run || {\n\t      $RM $export_symbols\n\t      eval \"${SED} -n -e '/^: @PROGRAM@ $/d' -e 's/^.* \\(.*\\)$/\\1/p' \"'< \"$nlist\" > \"$export_symbols\"'\n\t      case $host in\n\t      *cygwin* | *mingw* | *cegcc* )\n                eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n                eval 'cat \"$export_symbols\" >> \"$output_objdir/$outputname.def\"'\n\t        ;;\n\t      esac\n\t    }\n\t  else\n\t    $opt_dry_run || {\n\t      eval \"${SED} -e 's/\\([].[*^$]\\)/\\\\\\\\\\1/g' -e 's/^/ /' -e 's/$/$/'\"' < \"$export_symbols\" > \"$output_objdir/$outputname.exp\"'\n\t      eval '$GREP -f \"$output_objdir/$outputname.exp\" < \"$nlist\" > \"$nlist\"T'\n\t      eval '$MV \"$nlist\"T \"$nlist\"'\n\t      case $host in\n\t        *cygwin* | *mingw* | *cegcc* )\n\t          eval \"echo EXPORTS \"'> \"$output_objdir/$outputname.def\"'\n\t          eval 'cat \"$nlist\" >> \"$output_objdir/$outputname.def\"'\n\t          ;;\n\t      esac\n\t    }\n\t  fi\n\tfi\n\n\tfor dlprefile in $dlprefiles; do\n\t  func_verbose \"extracting global C symbols from \\`$dlprefile'\"\n\t  func_basename \"$dlprefile\"\n\t  name=\"$func_basename_result\"\n          case $host in\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # if an import library, we need to obtain dlname\n\t      if func_win32_import_lib_p \"$dlprefile\"; then\n\t        func_tr_sh \"$dlprefile\"\n\t        eval \"curr_lafile=\\$libfile_$func_tr_sh_result\"\n\t        dlprefile_dlbasename=\"\"\n\t        if test -n \"$curr_lafile\" && func_lalib_p \"$curr_lafile\"; then\n\t          # Use subshell, to avoid clobbering current variable values\n\t          dlprefile_dlname=`source \"$curr_lafile\" && echo \"$dlname\"`\n\t          if test -n \"$dlprefile_dlname\" ; then\n\t            func_basename \"$dlprefile_dlname\"\n\t            dlprefile_dlbasename=\"$func_basename_result\"\n\t          else\n\t            # no lafile. user explicitly requested -dlpreopen <import library>.\n\t            $sharedlib_from_linklib_cmd \"$dlprefile\"\n\t            dlprefile_dlbasename=$sharedlib_from_linklib_result\n\t          fi\n\t        fi\n\t        $opt_dry_run || {\n\t          if test -n \"$dlprefile_dlbasename\" ; then\n\t            eval '$ECHO \": $dlprefile_dlbasename\" >> \"$nlist\"'\n\t          else\n\t            func_warning \"Could not compute DLL name from $name\"\n\t            eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          fi\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe |\n\t            $SED -e '/I __imp/d' -e 's/I __nm_/D /;s/_nm__//' >> '$nlist'\"\n\t        }\n\t      else # not an import lib\n\t        $opt_dry_run || {\n\t          eval '$ECHO \": $name \" >> \"$nlist\"'\n\t          func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t          eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t        }\n\t      fi\n\t    ;;\n\t    *)\n\t      $opt_dry_run || {\n\t        eval '$ECHO \": $name \" >> \"$nlist\"'\n\t        func_to_tool_file \"$dlprefile\" func_convert_file_msys_to_w32\n\t        eval \"$NM \\\"$func_to_tool_file_result\\\" 2>/dev/null | $global_symbol_pipe >> '$nlist'\"\n\t      }\n\t    ;;\n          esac\n\tdone\n\n\t$opt_dry_run || {\n\t  # Make sure we have at least an empty file.\n\t  test -f \"$nlist\" || : > \"$nlist\"\n\n\t  if test -n \"$exclude_expsyms\"; then\n\t    $EGREP -v \" ($exclude_expsyms)$\" \"$nlist\" > \"$nlist\"T\n\t    $MV \"$nlist\"T \"$nlist\"\n\t  fi\n\n\t  # Try sorting and uniquifying the output.\n\t  if $GREP -v \"^: \" < \"$nlist\" |\n\t      if sort -k 3 </dev/null >/dev/null 2>&1; then\n\t\tsort -k 3\n\t      else\n\t\tsort +2\n\t      fi |\n\t      uniq > \"$nlist\"S; then\n\t    :\n\t  else\n\t    $GREP -v \"^: \" < \"$nlist\" > \"$nlist\"S\n\t  fi\n\n\t  if test -f \"$nlist\"S; then\n\t    eval \"$global_symbol_to_cdecl\"' < \"$nlist\"S >> \"$output_objdir/$my_dlsyms\"'\n\t  else\n\t    echo '/* NONE */' >> \"$output_objdir/$my_dlsyms\"\n\t  fi\n\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n\n/* The mapping between symbol names and symbols.  */\ntypedef struct {\n  const char *name;\n  void *address;\n} lt_dlsymlist;\nextern LT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[];\nLT_DLSYM_CONST lt_dlsymlist\nlt_${my_prefix}_LTX_preloaded_symbols[] =\n{\\\n  { \\\"$my_originator\\\", (void *) 0 },\"\n\n\t  case $need_lib_prefix in\n\t  no)\n\t    eval \"$global_symbol_to_c_name_address\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  *)\n\t    eval \"$global_symbol_to_c_name_address_lib_prefix\" < \"$nlist\" >> \"$output_objdir/$my_dlsyms\"\n\t    ;;\n\t  esac\n\t  echo >> \"$output_objdir/$my_dlsyms\" \"\\\n  {0, (void *) 0}\n};\n\n/* This works around a problem in FreeBSD linker */\n#ifdef FREEBSD_WORKAROUND\nstatic const void *lt_preloaded_setup() {\n  return lt_${my_prefix}_LTX_preloaded_symbols;\n}\n#endif\n\n#ifdef __cplusplus\n}\n#endif\\\n\"\n\t} # !$opt_dry_run\n\n\tpic_flag_for_symtable=\n\tcase \"$compile_command \" in\n\t*\" -static \"*) ;;\n\t*)\n\t  case $host in\n\t  # compiling the symbol table file with pic_flag works around\n\t  # a FreeBSD bug that causes programs to crash when -lm is\n\t  # linked before any other PIC object.  But we must not use\n\t  # pic_flag when linking with -static.  The problem exists in\n\t  # FreeBSD 2.2.6 and is fixed in FreeBSD 3.1.\n\t  *-*-freebsd2.*|*-*-freebsd3.0*|*-*-freebsdelf3.0*)\n\t    pic_flag_for_symtable=\" $pic_flag -DFREEBSD_WORKAROUND\" ;;\n\t  *-*-hpux*)\n\t    pic_flag_for_symtable=\" $pic_flag\"  ;;\n\t  *)\n\t    if test \"X$my_pic_p\" != Xno; then\n\t      pic_flag_for_symtable=\" $pic_flag\"\n\t    fi\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tsymtab_cflags=\n\tfor arg in $LTCFLAGS; do\n\t  case $arg in\n\t  -pie | -fpie | -fPIE) ;;\n\t  *) func_append symtab_cflags \" $arg\" ;;\n\t  esac\n\tdone\n\n\t# Now compile the dynamic symbol file.\n\tfunc_show_eval '(cd $output_objdir && $LTCC$symtab_cflags -c$no_builtin_flag$pic_flag_for_symtable \"$my_dlsyms\")' 'exit $?'\n\n\t# Clean up the generated files.\n\tfunc_show_eval '$RM \"$output_objdir/$my_dlsyms\" \"$nlist\" \"${nlist}S\" \"${nlist}T\"'\n\n\t# Transform the symbol file into the correct name.\n\tsymfileobj=\"$output_objdir/${my_outputname}S.$objext\"\n\tcase $host in\n\t*cygwin* | *mingw* | *cegcc* )\n\t  if test -f \"$output_objdir/$my_outputname.def\"; then\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$output_objdir/$my_outputname.def $symfileobj%\"`\n\t  else\n\t    compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t    finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  fi\n\t  ;;\n\t*)\n\t  compile_command=`$ECHO \"$compile_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  finalize_command=`$ECHO \"$finalize_command\" | $SED \"s%@SYMFILE@%$symfileobj%\"`\n\t  ;;\n\tesac\n\t;;\n      *)\n\tfunc_fatal_error \"unknown suffix for \\`$my_dlsyms'\"\n\t;;\n      esac\n    else\n      # We keep going just in case the user didn't refer to\n      # lt_preloaded_symbols.  The linker will fail if global_symbol_pipe\n      # really was required.\n\n      # Nullify the symbol file.\n      compile_command=`$ECHO \"$compile_command\" | $SED \"s% @SYMFILE@%%\"`\n      finalize_command=`$ECHO \"$finalize_command\" | $SED \"s% @SYMFILE@%%\"`\n    fi\n}\n\n# func_win32_libid arg\n# return the library type of file 'arg'\n#\n# Need a lot of goo to handle *both* DLLs and import libs\n# Has to be a shell function in order to 'eat' the argument\n# that is supplied when $file_magic_command is called.\n# Despite the name, also deal with 64 bit binaries.\nfunc_win32_libid ()\n{\n  $opt_debug\n  win32_libid_type=\"unknown\"\n  win32_fileres=`file -L $1 2>/dev/null`\n  case $win32_fileres in\n  *ar\\ archive\\ import\\ library*) # definitely import\n    win32_libid_type=\"x86 archive import\"\n    ;;\n  *ar\\ archive*) # could be an import, or static\n    # Keep the egrep pattern in sync with the one in _LT_CHECK_MAGIC_METHOD.\n    if eval $OBJDUMP -f $1 | $SED -e '10q' 2>/dev/null |\n       $EGREP 'file format (pei*-i386(.*architecture: i386)?|pe-arm-wince|pe-x86-64)' >/dev/null; then\n      func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n      win32_nmres=`eval $NM -f posix -A \\\"$func_to_tool_file_result\\\" |\n\t$SED -n -e '\n\t    1,100{\n\t\t/ I /{\n\t\t    s,.*,import,\n\t\t    p\n\t\t    q\n\t\t}\n\t    }'`\n      case $win32_nmres in\n      import*)  win32_libid_type=\"x86 archive import\";;\n      *)        win32_libid_type=\"x86 archive static\";;\n      esac\n    fi\n    ;;\n  *DLL*)\n    win32_libid_type=\"x86 DLL\"\n    ;;\n  *executable*) # but shell scripts are \"executable\" too...\n    case $win32_fileres in\n    *MS\\ Windows\\ PE\\ Intel*)\n      win32_libid_type=\"x86 DLL\"\n      ;;\n    esac\n    ;;\n  esac\n  $ECHO \"$win32_libid_type\"\n}\n\n# func_cygming_dll_for_implib ARG\n#\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib ()\n{\n  $opt_debug\n  sharedlib_from_linklib_result=`$DLLTOOL --identify-strict --identify \"$1\"`\n}\n\n# func_cygming_dll_for_implib_fallback_core SECTION_NAME LIBNAMEs\n#\n# The is the core of a fallback implementation of a\n# platform-specific function to extract the name of the\n# DLL associated with the specified import library LIBNAME.\n#\n# SECTION_NAME is either .idata$6 or .idata$7, depending\n# on the platform and compiler that created the implib.\n#\n# Echos the name of the DLL associated with the\n# specified import library.\nfunc_cygming_dll_for_implib_fallback_core ()\n{\n  $opt_debug\n  match_literal=`$ECHO \"$1\" | $SED \"$sed_make_literal_regex\"`\n  $OBJDUMP -s --section \"$1\" \"$2\" 2>/dev/null |\n    $SED '/^Contents of section '\"$match_literal\"':/{\n      # Place marker at beginning of archive member dllname section\n      s/.*/====MARK====/\n      p\n      d\n    }\n    # These lines can sometimes be longer than 43 characters, but\n    # are always uninteresting\n    /:[\t ]*file format pe[i]\\{,1\\}-/d\n    /^In archive [^:]*:/d\n    # Ensure marker is printed\n    /^====MARK====/p\n    # Remove all lines with less than 43 characters\n    /^.\\{43\\}/!d\n    # From remaining lines, remove first 43 characters\n    s/^.\\{43\\}//' |\n    $SED -n '\n      # Join marker and all lines until next marker into a single line\n      /^====MARK====/ b para\n      H\n      $ b para\n      b\n      :para\n      x\n      s/\\n//g\n      # Remove the marker\n      s/^====MARK====//\n      # Remove trailing dots and whitespace\n      s/[\\. \\t]*$//\n      # Print\n      /./p' |\n    # we now have a list, one entry per line, of the stringified\n    # contents of the appropriate section of all members of the\n    # archive which possess that section. Heuristic: eliminate\n    # all those which have a first or second character that is\n    # a '.' (that is, objdump's representation of an unprintable\n    # character.) This should work for all archives with less than\n    # 0x302f exports -- but will fail for DLLs whose name actually\n    # begins with a literal '.' or a single character followed by\n    # a '.'.\n    #\n    # Of those that remain, print the first one.\n    $SED -e '/^\\./d;/^.\\./d;q'\n}\n\n# func_cygming_gnu_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is a GNU/binutils-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_gnu_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_gnu_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $EGREP ' (_head_[A-Za-z0-9_]+_[ad]l*|[A-Za-z0-9_]+_[ad]l*_iname)$'`\n  test -n \"$func_cygming_gnu_implib_tmp\"\n}\n\n# func_cygming_ms_implib_p ARG\n# This predicate returns with zero status (TRUE) if\n# ARG is an MS-style import library. Returns\n# with nonzero status (FALSE) otherwise.\nfunc_cygming_ms_implib_p ()\n{\n  $opt_debug\n  func_to_tool_file \"$1\" func_convert_file_msys_to_w32\n  func_cygming_ms_implib_tmp=`$NM \"$func_to_tool_file_result\" | eval \"$global_symbol_pipe\" | $GREP '_NULL_IMPORT_DESCRIPTOR'`\n  test -n \"$func_cygming_ms_implib_tmp\"\n}\n\n# func_cygming_dll_for_implib_fallback ARG\n# Platform-specific function to extract the\n# name of the DLL associated with the specified\n# import library ARG.\n#\n# This fallback implementation is for use when $DLLTOOL\n# does not support the --identify-strict option.\n# Invoked by eval'ing the libtool variable\n#    $sharedlib_from_linklib_cmd\n# Result is available in the variable\n#    $sharedlib_from_linklib_result\nfunc_cygming_dll_for_implib_fallback ()\n{\n  $opt_debug\n  if func_cygming_gnu_implib_p \"$1\" ; then\n    # binutils import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$7' \"$1\"`\n  elif func_cygming_ms_implib_p \"$1\" ; then\n    # ms-generated import library\n    sharedlib_from_linklib_result=`func_cygming_dll_for_implib_fallback_core '.idata$6' \"$1\"`\n  else\n    # unknown\n    sharedlib_from_linklib_result=\"\"\n  fi\n}\n\n\n# func_extract_an_archive dir oldlib\nfunc_extract_an_archive ()\n{\n    $opt_debug\n    f_ex_an_ar_dir=\"$1\"; shift\n    f_ex_an_ar_oldlib=\"$1\"\n    if test \"$lock_old_archive_extraction\" = yes; then\n      lockfile=$f_ex_an_ar_oldlib.lock\n      until $opt_dry_run || ln \"$progpath\" \"$lockfile\" 2>/dev/null; do\n\tfunc_echo \"Waiting for $lockfile to be removed\"\n\tsleep 2\n      done\n    fi\n    func_show_eval \"(cd \\$f_ex_an_ar_dir && $AR x \\\"\\$f_ex_an_ar_oldlib\\\")\" \\\n\t\t   'stat=$?; rm -f \"$lockfile\"; exit $stat'\n    if test \"$lock_old_archive_extraction\" = yes; then\n      $opt_dry_run || rm -f \"$lockfile\"\n    fi\n    if ($AR t \"$f_ex_an_ar_oldlib\" | sort | sort -uc >/dev/null 2>&1); then\n     :\n    else\n      func_fatal_error \"object name conflicts in archive: $f_ex_an_ar_dir/$f_ex_an_ar_oldlib\"\n    fi\n}\n\n\n# func_extract_archives gentop oldlib ...\nfunc_extract_archives ()\n{\n    $opt_debug\n    my_gentop=\"$1\"; shift\n    my_oldlibs=${1+\"$@\"}\n    my_oldobjs=\"\"\n    my_xlib=\"\"\n    my_xabs=\"\"\n    my_xdir=\"\"\n\n    for my_xlib in $my_oldlibs; do\n      # Extract the objects.\n      case $my_xlib in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) my_xabs=\"$my_xlib\" ;;\n\t*) my_xabs=`pwd`\"/$my_xlib\" ;;\n      esac\n      func_basename \"$my_xlib\"\n      my_xlib=\"$func_basename_result\"\n      my_xlib_u=$my_xlib\n      while :; do\n        case \" $extracted_archives \" in\n\t*\" $my_xlib_u \"*)\n\t  func_arith $extracted_serial + 1\n\t  extracted_serial=$func_arith_result\n\t  my_xlib_u=lt$extracted_serial-$my_xlib ;;\n\t*) break ;;\n\tesac\n      done\n      extracted_archives=\"$extracted_archives $my_xlib_u\"\n      my_xdir=\"$my_gentop/$my_xlib_u\"\n\n      func_mkdir_p \"$my_xdir\"\n\n      case $host in\n      *-darwin*)\n\tfunc_verbose \"Extracting $my_xabs\"\n\t# Do not bother doing anything if just a dry run\n\t$opt_dry_run || {\n\t  darwin_orig_dir=`pwd`\n\t  cd $my_xdir || exit $?\n\t  darwin_archive=$my_xabs\n\t  darwin_curdir=`pwd`\n\t  darwin_base_archive=`basename \"$darwin_archive\"`\n\t  darwin_arches=`$LIPO -info \"$darwin_archive\" 2>/dev/null | $GREP Architectures 2>/dev/null || true`\n\t  if test -n \"$darwin_arches\"; then\n\t    darwin_arches=`$ECHO \"$darwin_arches\" | $SED -e 's/.*are://'`\n\t    darwin_arch=\n\t    func_verbose \"$darwin_base_archive has multiple architectures $darwin_arches\"\n\t    for darwin_arch in  $darwin_arches ; do\n\t      func_mkdir_p \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      $LIPO -thin $darwin_arch -output \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\" \"${darwin_archive}\"\n\t      cd \"unfat-$$/${darwin_base_archive}-${darwin_arch}\"\n\t      func_extract_an_archive \"`pwd`\" \"${darwin_base_archive}\"\n\t      cd \"$darwin_curdir\"\n\t      $RM \"unfat-$$/${darwin_base_archive}-${darwin_arch}/${darwin_base_archive}\"\n\t    done # $darwin_arches\n            ## Okay now we've a bunch of thin objects, gotta fatten them up :)\n\t    darwin_filelist=`find unfat-$$ -type f -name \\*.o -print -o -name \\*.lo -print | $SED -e \"$basename\" | sort -u`\n\t    darwin_file=\n\t    darwin_files=\n\t    for darwin_file in $darwin_filelist; do\n\t      darwin_files=`find unfat-$$ -name $darwin_file -print | sort | $NL2SP`\n\t      $LIPO -create -output \"$darwin_file\" $darwin_files\n\t    done # $darwin_filelist\n\t    $RM -rf unfat-$$\n\t    cd \"$darwin_orig_dir\"\n\t  else\n\t    cd $darwin_orig_dir\n\t    func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t  fi # $darwin_arches\n\t} # !$opt_dry_run\n\t;;\n      *)\n        func_extract_an_archive \"$my_xdir\" \"$my_xabs\"\n\t;;\n      esac\n      my_oldobjs=\"$my_oldobjs \"`find $my_xdir -name \\*.$objext -print -o -name \\*.lo -print | sort | $NL2SP`\n    done\n\n    func_extract_archives_result=\"$my_oldobjs\"\n}\n\n\n# func_emit_wrapper [arg=no]\n#\n# Emit a libtool wrapper script on stdout.\n# Don't directly open a file because we may want to\n# incorporate the script contents within a cygwin/mingw\n# wrapper executable.  Must ONLY be called from within\n# func_mode_link because it depends on a number of variables\n# set therein.\n#\n# ARG is the value that the WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\n# variable will take.  If 'yes', then the emitted script\n# will assume that the directory in which it is stored is\n# the $objdir directory.  This is a cygwin/mingw-specific\n# behavior.\nfunc_emit_wrapper ()\n{\n\tfunc_emit_wrapper_arg1=${1-no}\n\n\t$ECHO \"\\\n#! $SHELL\n\n# $output - temporary wrapper script for $objdir/$outputname\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# The $output program cannot be directly executed until all the libtool\n# libraries that it depends on are installed.\n#\n# This wrapper script should never be moved out of the build directory.\n# If it is, it will not operate correctly.\n\n# Sed substitution that helps us do robust quoting.  It backslashifies\n# metacharacters that are still active within double-quoted strings.\nsed_quote_subst='$sed_quote_subst'\n\n# Be Bourne compatible\nif test -n \\\"\\${ZSH_VERSION+set}\\\" && (emulate sh) >/dev/null 2>&1; then\n  emulate sh\n  NULLCMD=:\n  # Zsh 3.x and 4.x performs word splitting on \\${1+\\\"\\$@\\\"}, which\n  # is contrary to our usage.  Disable this feature.\n  alias -g '\\${1+\\\"\\$@\\\"}'='\\\"\\$@\\\"'\n  setopt NO_GLOB_SUBST\nelse\n  case \\`(set -o) 2>/dev/null\\` in *posix*) set -o posix;; esac\nfi\nBIN_SH=xpg4; export BIN_SH # for Tru64\nDUALCASE=1; export DUALCASE # for MKS sh\n\n# The HP-UX ksh and POSIX shell print the target directory to stdout\n# if CDPATH is set.\n(unset CDPATH) >/dev/null 2>&1 && unset CDPATH\n\nrelink_command=\\\"$relink_command\\\"\n\n# This environment variable determines our operation mode.\nif test \\\"\\$libtool_install_magic\\\" = \\\"$magic\\\"; then\n  # install mode needs the following variables:\n  generated_by_libtool_version='$macro_version'\n  notinst_deplibs='$notinst_deplibs'\nelse\n  # When we are sourced in execute mode, \\$file and \\$ECHO are already set.\n  if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n    file=\\\"\\$0\\\"\"\n\n    qECHO=`$ECHO \"$ECHO\" | $SED \"$sed_quote_subst\"`\n    $ECHO \"\\\n\n# A function that is used when there is no print builtin or printf.\nfunc_fallback_echo ()\n{\n  eval 'cat <<_LTECHO_EOF\n\\$1\n_LTECHO_EOF'\n}\n    ECHO=\\\"$qECHO\\\"\n  fi\n\n# Very basic option parsing. These options are (a) specific to\n# the libtool wrapper, (b) are identical between the wrapper\n# /script/ and the wrapper /executable/ which is used only on\n# windows platforms, and (c) all begin with the string \"--lt-\"\n# (application programs are unlikely to have options which match\n# this pattern).\n#\n# There are only two supported options: --lt-debug and\n# --lt-dump-script. There is, deliberately, no --lt-help.\n#\n# The first argument to this parsing function should be the\n# script's $0 value, followed by \"$@\".\nlt_option_debug=\nfunc_parse_lt_options ()\n{\n  lt_script_arg0=\\$0\n  shift\n  for lt_opt\n  do\n    case \\\"\\$lt_opt\\\" in\n    --lt-debug) lt_option_debug=1 ;;\n    --lt-dump-script)\n        lt_dump_D=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%/[^/]*$%%'\\`\n        test \\\"X\\$lt_dump_D\\\" = \\\"X\\$lt_script_arg0\\\" && lt_dump_D=.\n        lt_dump_F=\\`\\$ECHO \\\"X\\$lt_script_arg0\\\" | $SED -e 's/^X//' -e 's%^.*/%%'\\`\n        cat \\\"\\$lt_dump_D/\\$lt_dump_F\\\"\n        exit 0\n      ;;\n    --lt-*)\n        \\$ECHO \\\"Unrecognized --lt- option: '\\$lt_opt'\\\" 1>&2\n        exit 1\n      ;;\n    esac\n  done\n\n  # Print the debug banner immediately:\n  if test -n \\\"\\$lt_option_debug\\\"; then\n    echo \\\"${outputname}:${output}:\\${LINENO}: libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\\" 1>&2\n  fi\n}\n\n# Used when --lt-debug. Prints its arguments to stdout\n# (redirection is the responsibility of the caller)\nfunc_lt_dump_args ()\n{\n  lt_dump_args_N=1;\n  for lt_arg\n  do\n    \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[\\$lt_dump_args_N]: \\$lt_arg\\\"\n    lt_dump_args_N=\\`expr \\$lt_dump_args_N + 1\\`\n  done\n}\n\n# Core function for launching the target application\nfunc_exec_program_core ()\n{\n\"\n  case $host in\n  # Backslashes separate directories on plain windows\n  *-*-mingw | *-*-os2* | *-cegcc*)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir\\\\\\\\\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir\\\\\\\\\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n\n  *)\n    $ECHO \"\\\n      if test -n \\\"\\$lt_option_debug\\\"; then\n        \\$ECHO \\\"${outputname}:${output}:\\${LINENO}: newargv[0]: \\$progdir/\\$program\\\" 1>&2\n        func_lt_dump_args \\${1+\\\"\\$@\\\"} 1>&2\n      fi\n      exec \\\"\\$progdir/\\$program\\\" \\${1+\\\"\\$@\\\"}\n\"\n    ;;\n  esac\n  $ECHO \"\\\n      \\$ECHO \\\"\\$0: cannot exec \\$program \\$*\\\" 1>&2\n      exit 1\n}\n\n# A function to encapsulate launching the target application\n# Strips options in the --lt-* namespace from \\$@ and\n# launches target application with the remaining arguments.\nfunc_exec_program ()\n{\n  case \\\" \\$* \\\" in\n  *\\\\ --lt-*)\n    for lt_wr_arg\n    do\n      case \\$lt_wr_arg in\n      --lt-*) ;;\n      *) set x \\\"\\$@\\\" \\\"\\$lt_wr_arg\\\"; shift;;\n      esac\n      shift\n    done ;;\n  esac\n  func_exec_program_core \\${1+\\\"\\$@\\\"}\n}\n\n  # Parse options\n  func_parse_lt_options \\\"\\$0\\\" \\${1+\\\"\\$@\\\"}\n\n  # Find the directory that this script lives in.\n  thisdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*$%%'\\`\n  test \\\"x\\$thisdir\\\" = \\\"x\\$file\\\" && thisdir=.\n\n  # Follow symbolic links until we get to the real thisdir.\n  file=\\`ls -ld \\\"\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  while test -n \\\"\\$file\\\"; do\n    destdir=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%/[^/]*\\$%%'\\`\n\n    # If there was a directory component, then change thisdir.\n    if test \\\"x\\$destdir\\\" != \\\"x\\$file\\\"; then\n      case \\\"\\$destdir\\\" in\n      [\\\\\\\\/]* | [A-Za-z]:[\\\\\\\\/]*) thisdir=\\\"\\$destdir\\\" ;;\n      *) thisdir=\\\"\\$thisdir/\\$destdir\\\" ;;\n      esac\n    fi\n\n    file=\\`\\$ECHO \\\"\\$file\\\" | $SED 's%^.*/%%'\\`\n    file=\\`ls -ld \\\"\\$thisdir/\\$file\\\" | $SED -n 's/.*-> //p'\\`\n  done\n\n  # Usually 'no', except on cygwin/mingw when embedded into\n  # the cwrapper.\n  WRAPPER_SCRIPT_BELONGS_IN_OBJDIR=$func_emit_wrapper_arg1\n  if test \\\"\\$WRAPPER_SCRIPT_BELONGS_IN_OBJDIR\\\" = \\\"yes\\\"; then\n    # special case for '.'\n    if test \\\"\\$thisdir\\\" = \\\".\\\"; then\n      thisdir=\\`pwd\\`\n    fi\n    # remove .libs from thisdir\n    case \\\"\\$thisdir\\\" in\n    *[\\\\\\\\/]$objdir ) thisdir=\\`\\$ECHO \\\"\\$thisdir\\\" | $SED 's%[\\\\\\\\/][^\\\\\\\\/]*$%%'\\` ;;\n    $objdir )   thisdir=. ;;\n    esac\n  fi\n\n  # Try to get the absolute directory name.\n  absdir=\\`cd \\\"\\$thisdir\\\" && pwd\\`\n  test -n \\\"\\$absdir\\\" && thisdir=\\\"\\$absdir\\\"\n\"\n\n\tif test \"$fast_install\" = yes; then\n\t  $ECHO \"\\\n  program=lt-'$outputname'$exeext\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\n  if test ! -f \\\"\\$progdir/\\$program\\\" ||\n     { file=\\`ls -1dt \\\"\\$progdir/\\$program\\\" \\\"\\$progdir/../\\$program\\\" 2>/dev/null | ${SED} 1q\\`; \\\\\n       test \\\"X\\$file\\\" != \\\"X\\$progdir/\\$program\\\"; }; then\n\n    file=\\\"\\$\\$-\\$program\\\"\n\n    if test ! -d \\\"\\$progdir\\\"; then\n      $MKDIR \\\"\\$progdir\\\"\n    else\n      $RM \\\"\\$progdir/\\$file\\\"\n    fi\"\n\n\t  $ECHO \"\\\n\n    # relink executable if necessary\n    if test -n \\\"\\$relink_command\\\"; then\n      if relink_command_output=\\`eval \\$relink_command 2>&1\\`; then :\n      else\n\t$ECHO \\\"\\$relink_command_output\\\" >&2\n\t$RM \\\"\\$progdir/\\$file\\\"\n\texit 1\n      fi\n    fi\n\n    $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\" 2>/dev/null ||\n    { $RM \\\"\\$progdir/\\$program\\\";\n      $MV \\\"\\$progdir/\\$file\\\" \\\"\\$progdir/\\$program\\\"; }\n    $RM \\\"\\$progdir/\\$file\\\"\n  fi\"\n\telse\n\t  $ECHO \"\\\n  program='$outputname'\n  progdir=\\\"\\$thisdir/$objdir\\\"\n\"\n\tfi\n\n\t$ECHO \"\\\n\n  if test -f \\\"\\$progdir/\\$program\\\"; then\"\n\n\t# fixup the dll searchpath if we need to.\n\t#\n\t# Fix the DLL searchpath if we need to.  Do this before prepending\n\t# to shlibpath, because on Windows, both are PATH and uninstalled\n\t# libraries must come first.\n\tif test -n \"$dllsearchpath\"; then\n\t  $ECHO \"\\\n    # Add the dll search path components to the executable PATH\n    PATH=$dllsearchpath:\\$PATH\n\"\n\tfi\n\n\t# Export our shlibpath_var if we have one.\n\tif test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n\t  $ECHO \"\\\n    # Add our own library path to $shlibpath_var\n    $shlibpath_var=\\\"$temp_rpath\\$$shlibpath_var\\\"\n\n    # Some systems cannot cope with colon-terminated $shlibpath_var\n    # The second colon is a workaround for a bug in BeOS R4 sed\n    $shlibpath_var=\\`\\$ECHO \\\"\\$$shlibpath_var\\\" | $SED 's/::*\\$//'\\`\n\n    export $shlibpath_var\n\"\n\tfi\n\n\t$ECHO \"\\\n    if test \\\"\\$libtool_execute_magic\\\" != \\\"$magic\\\"; then\n      # Run the actual program with our arguments.\n      func_exec_program \\${1+\\\"\\$@\\\"}\n    fi\n  else\n    # The program doesn't exist.\n    \\$ECHO \\\"\\$0: error: \\\\\\`\\$progdir/\\$program' does not exist\\\" 1>&2\n    \\$ECHO \\\"This script is just a wrapper for \\$program.\\\" 1>&2\n    \\$ECHO \\\"See the $PACKAGE documentation for more information.\\\" 1>&2\n    exit 1\n  fi\nfi\\\n\"\n}\n\n\n# func_emit_cwrapperexe_src\n# emit the source code for a wrapper executable on stdout\n# Must ONLY be called from within func_mode_link because\n# it depends on a number of variable set therein.\nfunc_emit_cwrapperexe_src ()\n{\n\tcat <<EOF\n\n/* $cwrappersource - temporary wrapper executable for $objdir/$outputname\n   Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n\n   The $output program cannot be directly executed until all the libtool\n   libraries that it depends on are installed.\n\n   This wrapper executable should never be moved out of the build directory.\n   If it is, it will not operate correctly.\n*/\nEOF\n\t    cat <<\"EOF\"\n#ifdef _MSC_VER\n# define _CRT_SECURE_NO_DEPRECATE 1\n#endif\n#include <stdio.h>\n#include <stdlib.h>\n#ifdef _MSC_VER\n# include <direct.h>\n# include <process.h>\n# include <io.h>\n#else\n# include <unistd.h>\n# include <stdint.h>\n# ifdef __CYGWIN__\n#  include <io.h>\n# endif\n#endif\n#include <malloc.h>\n#include <stdarg.h>\n#include <assert.h>\n#include <string.h>\n#include <ctype.h>\n#include <errno.h>\n#include <fcntl.h>\n#include <sys/stat.h>\n\n/* declarations of non-ANSI functions */\n#if defined(__MINGW32__)\n# ifdef __STRICT_ANSI__\nint _putenv (const char *);\n# endif\n#elif defined(__CYGWIN__)\n# ifdef __STRICT_ANSI__\nchar *realpath (const char *, char *);\nint putenv (char *);\nint setenv (const char *, const char *, int);\n# endif\n/* #elif defined (other platforms) ... */\n#endif\n\n/* portability defines, excluding path handling macros */\n#if defined(_MSC_VER)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n# define S_IXUSR _S_IEXEC\n# ifndef _INTPTR_T_DEFINED\n#  define _INTPTR_T_DEFINED\n#  define intptr_t int\n# endif\n#elif defined(__MINGW32__)\n# define setmode _setmode\n# define stat    _stat\n# define chmod   _chmod\n# define getcwd  _getcwd\n# define putenv  _putenv\n#elif defined(__CYGWIN__)\n# define HAVE_SETENV\n# define FOPEN_WB \"wb\"\n/* #elif defined (other platforms) ... */\n#endif\n\n#if defined(PATH_MAX)\n# define LT_PATHMAX PATH_MAX\n#elif defined(MAXPATHLEN)\n# define LT_PATHMAX MAXPATHLEN\n#else\n# define LT_PATHMAX 1024\n#endif\n\n#ifndef S_IXOTH\n# define S_IXOTH 0\n#endif\n#ifndef S_IXGRP\n# define S_IXGRP 0\n#endif\n\n/* path handling portability macros */\n#ifndef DIR_SEPARATOR\n# define DIR_SEPARATOR '/'\n# define PATH_SEPARATOR ':'\n#endif\n\n#if defined (_WIN32) || defined (__MSDOS__) || defined (__DJGPP__) || \\\n  defined (__OS2__)\n# define HAVE_DOS_BASED_FILE_SYSTEM\n# define FOPEN_WB \"wb\"\n# ifndef DIR_SEPARATOR_2\n#  define DIR_SEPARATOR_2 '\\\\'\n# endif\n# ifndef PATH_SEPARATOR_2\n#  define PATH_SEPARATOR_2 ';'\n# endif\n#endif\n\n#ifndef DIR_SEPARATOR_2\n# define IS_DIR_SEPARATOR(ch) ((ch) == DIR_SEPARATOR)\n#else /* DIR_SEPARATOR_2 */\n# define IS_DIR_SEPARATOR(ch) \\\n\t(((ch) == DIR_SEPARATOR) || ((ch) == DIR_SEPARATOR_2))\n#endif /* DIR_SEPARATOR_2 */\n\n#ifndef PATH_SEPARATOR_2\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR)\n#else /* PATH_SEPARATOR_2 */\n# define IS_PATH_SEPARATOR(ch) ((ch) == PATH_SEPARATOR_2)\n#endif /* PATH_SEPARATOR_2 */\n\n#ifndef FOPEN_WB\n# define FOPEN_WB \"w\"\n#endif\n#ifndef _O_BINARY\n# define _O_BINARY 0\n#endif\n\n#define XMALLOC(type, num)      ((type *) xmalloc ((num) * sizeof(type)))\n#define XFREE(stale) do { \\\n  if (stale) { free ((void *) stale); stale = 0; } \\\n} while (0)\n\n#if defined(LT_DEBUGWRAPPER)\nstatic int lt_debug = 1;\n#else\nstatic int lt_debug = 0;\n#endif\n\nconst char *program_name = \"libtool-wrapper\"; /* in case xstrdup fails */\n\nvoid *xmalloc (size_t num);\nchar *xstrdup (const char *string);\nconst char *base_name (const char *name);\nchar *find_executable (const char *wrapper);\nchar *chase_symlinks (const char *pathspec);\nint make_executable (const char *path);\nint check_executable (const char *path);\nchar *strendzap (char *str, const char *pat);\nvoid lt_debugprintf (const char *file, int line, const char *fmt, ...);\nvoid lt_fatal (const char *file, int line, const char *message, ...);\nstatic const char *nonnull (const char *s);\nstatic const char *nonempty (const char *s);\nvoid lt_setenv (const char *name, const char *value);\nchar *lt_extend_str (const char *orig_value, const char *add, int to_end);\nvoid lt_update_exe_path (const char *name, const char *value);\nvoid lt_update_lib_path (const char *name, const char *value);\nchar **prepare_spawn (char **argv);\nvoid lt_dump_script (FILE *f);\nEOF\n\n\t    cat <<EOF\nvolatile const char * MAGIC_EXE = \"$magic_exe\";\nconst char * LIB_PATH_VARNAME = \"$shlibpath_var\";\nEOF\n\n\t    if test \"$shlibpath_overrides_runpath\" = yes && test -n \"$shlibpath_var\" && test -n \"$temp_rpath\"; then\n              func_to_host_path \"$temp_rpath\"\n\t      cat <<EOF\nconst char * LIB_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * LIB_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test -n \"$dllsearchpath\"; then\n              func_to_host_path \"$dllsearchpath:\"\n\t      cat <<EOF\nconst char * EXE_PATH_VARNAME = \"PATH\";\nconst char * EXE_PATH_VALUE   = \"$func_to_host_path_result\";\nEOF\n\t    else\n\t      cat <<\"EOF\"\nconst char * EXE_PATH_VARNAME = \"\";\nconst char * EXE_PATH_VALUE   = \"\";\nEOF\n\t    fi\n\n\t    if test \"$fast_install\" = yes; then\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"lt-$outputname\"; /* hopefully, no .exe */\nEOF\n\t    else\n\t      cat <<EOF\nconst char * TARGET_PROGRAM_NAME = \"$outputname\"; /* hopefully, no .exe */\nEOF\n\t    fi\n\n\n\t    cat <<\"EOF\"\n\n#define LTWRAPPER_OPTION_PREFIX         \"--lt-\"\n\nstatic const char *ltwrapper_option_prefix = LTWRAPPER_OPTION_PREFIX;\nstatic const char *dumpscript_opt       = LTWRAPPER_OPTION_PREFIX \"dump-script\";\nstatic const char *debug_opt            = LTWRAPPER_OPTION_PREFIX \"debug\";\n\nint\nmain (int argc, char *argv[])\n{\n  char **newargz;\n  int  newargc;\n  char *tmp_pathspec;\n  char *actual_cwrapper_path;\n  char *actual_cwrapper_name;\n  char *target_name;\n  char *lt_argv_zero;\n  intptr_t rval = 127;\n\n  int i;\n\n  program_name = (char *) xstrdup (base_name (argv[0]));\n  newargz = XMALLOC (char *, argc + 1);\n\n  /* very simple arg parsing; don't want to rely on getopt\n   * also, copy all non cwrapper options to newargz, except\n   * argz[0], which is handled differently\n   */\n  newargc=0;\n  for (i = 1; i < argc; i++)\n    {\n      if (strcmp (argv[i], dumpscript_opt) == 0)\n\t{\nEOF\n\t    case \"$host\" in\n\t      *mingw* | *cygwin* )\n\t\t# make stdout use \"unix\" line endings\n\t\techo \"          setmode(1,_O_BINARY);\"\n\t\t;;\n\t      esac\n\n\t    cat <<\"EOF\"\n\t  lt_dump_script (stdout);\n\t  return 0;\n\t}\n      if (strcmp (argv[i], debug_opt) == 0)\n\t{\n          lt_debug = 1;\n          continue;\n\t}\n      if (strcmp (argv[i], ltwrapper_option_prefix) == 0)\n        {\n          /* however, if there is an option in the LTWRAPPER_OPTION_PREFIX\n             namespace, but it is not one of the ones we know about and\n             have already dealt with, above (inluding dump-script), then\n             report an error. Otherwise, targets might begin to believe\n             they are allowed to use options in the LTWRAPPER_OPTION_PREFIX\n             namespace. The first time any user complains about this, we'll\n             need to make LTWRAPPER_OPTION_PREFIX a configure-time option\n             or a configure.ac-settable value.\n           */\n          lt_fatal (__FILE__, __LINE__,\n\t\t    \"unrecognized %s option: '%s'\",\n                    ltwrapper_option_prefix, argv[i]);\n        }\n      /* otherwise ... */\n      newargz[++newargc] = xstrdup (argv[i]);\n    }\n  newargz[++newargc] = NULL;\n\nEOF\n\t    cat <<EOF\n  /* The GNU banner must be the first non-error debug message */\n  lt_debugprintf (__FILE__, __LINE__, \"libtool wrapper (GNU $PACKAGE$TIMESTAMP) $VERSION\\n\");\nEOF\n\t    cat <<\"EOF\"\n  lt_debugprintf (__FILE__, __LINE__, \"(main) argv[0]: %s\\n\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__, \"(main) program_name: %s\\n\", program_name);\n\n  tmp_pathspec = find_executable (argv[0]);\n  if (tmp_pathspec == NULL)\n    lt_fatal (__FILE__, __LINE__, \"couldn't find %s\", argv[0]);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (before symlink chase) at: %s\\n\",\n\t\t  tmp_pathspec);\n\n  actual_cwrapper_path = chase_symlinks (tmp_pathspec);\n  lt_debugprintf (__FILE__, __LINE__,\n                  \"(main) found exe (after symlink chase) at: %s\\n\",\n\t\t  actual_cwrapper_path);\n  XFREE (tmp_pathspec);\n\n  actual_cwrapper_name = xstrdup (base_name (actual_cwrapper_path));\n  strendzap (actual_cwrapper_path, actual_cwrapper_name);\n\n  /* wrapper name transforms */\n  strendzap (actual_cwrapper_name, \".exe\");\n  tmp_pathspec = lt_extend_str (actual_cwrapper_name, \".exe\", 1);\n  XFREE (actual_cwrapper_name);\n  actual_cwrapper_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  /* target_name transforms -- use actual target program name; might have lt- prefix */\n  target_name = xstrdup (base_name (TARGET_PROGRAM_NAME));\n  strendzap (target_name, \".exe\");\n  tmp_pathspec = lt_extend_str (target_name, \".exe\", 1);\n  XFREE (target_name);\n  target_name = tmp_pathspec;\n  tmp_pathspec = 0;\n\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(main) libtool target name: %s\\n\",\n\t\t  target_name);\nEOF\n\n\t    cat <<EOF\n  newargz[0] =\n    XMALLOC (char, (strlen (actual_cwrapper_path) +\n\t\t    strlen (\"$objdir\") + 1 + strlen (actual_cwrapper_name) + 1));\n  strcpy (newargz[0], actual_cwrapper_path);\n  strcat (newargz[0], \"$objdir\");\n  strcat (newargz[0], \"/\");\nEOF\n\n\t    cat <<\"EOF\"\n  /* stop here, and copy so we don't have to do this twice */\n  tmp_pathspec = xstrdup (newargz[0]);\n\n  /* do NOT want the lt- prefix here, so use actual_cwrapper_name */\n  strcat (newargz[0], actual_cwrapper_name);\n\n  /* DO want the lt- prefix here if it exists, so use target_name */\n  lt_argv_zero = lt_extend_str (tmp_pathspec, target_name, 1);\n  XFREE (tmp_pathspec);\n  tmp_pathspec = NULL;\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t    cat <<\"EOF\"\n  {\n    char* p;\n    while ((p = strchr (newargz[0], '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n    while ((p = strchr (lt_argv_zero, '\\\\')) != NULL)\n      {\n\t*p = '/';\n      }\n  }\nEOF\n\t    ;;\n\t    esac\n\n\t    cat <<\"EOF\"\n  XFREE (target_name);\n  XFREE (actual_cwrapper_path);\n  XFREE (actual_cwrapper_name);\n\n  lt_setenv (\"BIN_SH\", \"xpg4\"); /* for Tru64 */\n  lt_setenv (\"DUALCASE\", \"1\");  /* for MSK sh */\n  /* Update the DLL searchpath.  EXE_PATH_VALUE ($dllsearchpath) must\n     be prepended before (that is, appear after) LIB_PATH_VALUE ($temp_rpath)\n     because on Windows, both *_VARNAMEs are PATH but uninstalled\n     libraries must come first. */\n  lt_update_exe_path (EXE_PATH_VARNAME, EXE_PATH_VALUE);\n  lt_update_lib_path (LIB_PATH_VARNAME, LIB_PATH_VALUE);\n\n  lt_debugprintf (__FILE__, __LINE__, \"(main) lt_argv_zero: %s\\n\",\n\t\t  nonnull (lt_argv_zero));\n  for (i = 0; i < newargc; i++)\n    {\n      lt_debugprintf (__FILE__, __LINE__, \"(main) newargz[%d]: %s\\n\",\n\t\t      i, nonnull (newargz[i]));\n    }\n\nEOF\n\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n  /* execv doesn't actually work on mingw as expected on unix */\n  newargz = prepare_spawn (newargz);\n  rval = _spawnv (_P_WAIT, lt_argv_zero, (const char * const *) newargz);\n  if (rval == -1)\n    {\n      /* failed to start process */\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"(main) failed to launch target \\\"%s\\\": %s\\n\",\n\t\t      lt_argv_zero, nonnull (strerror (errno)));\n      return 127;\n    }\n  return rval;\nEOF\n\t\t;;\n\t      *)\n\t\tcat <<\"EOF\"\n  execv (lt_argv_zero, newargz);\n  return rval; /* =127, but avoids unused variable warning */\nEOF\n\t\t;;\n\t    esac\n\n\t    cat <<\"EOF\"\n}\n\nvoid *\nxmalloc (size_t num)\n{\n  void *p = (void *) malloc (num);\n  if (!p)\n    lt_fatal (__FILE__, __LINE__, \"memory exhausted\");\n\n  return p;\n}\n\nchar *\nxstrdup (const char *string)\n{\n  return string ? strcpy ((char *) xmalloc (strlen (string) + 1),\n\t\t\t  string) : NULL;\n}\n\nconst char *\nbase_name (const char *name)\n{\n  const char *base;\n\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  /* Skip over the disk name in MSDOS pathnames. */\n  if (isalpha ((unsigned char) name[0]) && name[1] == ':')\n    name += 2;\n#endif\n\n  for (base = name; *name; name++)\n    if (IS_DIR_SEPARATOR (*name))\n      base = name + 1;\n  return base;\n}\n\nint\ncheck_executable (const char *path)\n{\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(check_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if ((stat (path, &st) >= 0)\n      && (st.st_mode & (S_IXUSR | S_IXGRP | S_IXOTH)))\n    return 1;\n  else\n    return 0;\n}\n\nint\nmake_executable (const char *path)\n{\n  int rval = 0;\n  struct stat st;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(make_executable): %s\\n\",\n                  nonempty (path));\n  if ((!path) || (!*path))\n    return 0;\n\n  if (stat (path, &st) >= 0)\n    {\n      rval = chmod (path, st.st_mode | S_IXOTH | S_IXGRP | S_IXUSR);\n    }\n  return rval;\n}\n\n/* Searches for the full path of the wrapper.  Returns\n   newly allocated full path name if found, NULL otherwise\n   Does not chase symlinks, even on platforms that support them.\n*/\nchar *\nfind_executable (const char *wrapper)\n{\n  int has_slash = 0;\n  const char *p;\n  const char *p_next;\n  /* static buffer for getcwd */\n  char tmp[LT_PATHMAX + 1];\n  int tmp_len;\n  char *concat_name;\n\n  lt_debugprintf (__FILE__, __LINE__, \"(find_executable): %s\\n\",\n                  nonempty (wrapper));\n\n  if ((wrapper == NULL) || (*wrapper == '\\0'))\n    return NULL;\n\n  /* Absolute path? */\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n  if (isalpha ((unsigned char) wrapper[0]) && wrapper[1] == ':')\n    {\n      concat_name = xstrdup (wrapper);\n      if (check_executable (concat_name))\n\treturn concat_name;\n      XFREE (concat_name);\n    }\n  else\n    {\n#endif\n      if (IS_DIR_SEPARATOR (wrapper[0]))\n\t{\n\t  concat_name = xstrdup (wrapper);\n\t  if (check_executable (concat_name))\n\t    return concat_name;\n\t  XFREE (concat_name);\n\t}\n#if defined (HAVE_DOS_BASED_FILE_SYSTEM)\n    }\n#endif\n\n  for (p = wrapper; *p; p++)\n    if (*p == '/')\n      {\n\thas_slash = 1;\n\tbreak;\n      }\n  if (!has_slash)\n    {\n      /* no slashes; search PATH */\n      const char *path = getenv (\"PATH\");\n      if (path != NULL)\n\t{\n\t  for (p = path; *p; p = p_next)\n\t    {\n\t      const char *q;\n\t      size_t p_len;\n\t      for (q = p; *q; q++)\n\t\tif (IS_PATH_SEPARATOR (*q))\n\t\t  break;\n\t      p_len = q - p;\n\t      p_next = (*q == '\\0' ? q : q + 1);\n\t      if (p_len == 0)\n\t\t{\n\t\t  /* empty path: current directory */\n\t\t  if (getcwd (tmp, LT_PATHMAX) == NULL)\n\t\t    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n                              nonnull (strerror (errno)));\n\t\t  tmp_len = strlen (tmp);\n\t\t  concat_name =\n\t\t    XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, tmp, tmp_len);\n\t\t  concat_name[tmp_len] = '/';\n\t\t  strcpy (concat_name + tmp_len + 1, wrapper);\n\t\t}\n\t      else\n\t\t{\n\t\t  concat_name =\n\t\t    XMALLOC (char, p_len + 1 + strlen (wrapper) + 1);\n\t\t  memcpy (concat_name, p, p_len);\n\t\t  concat_name[p_len] = '/';\n\t\t  strcpy (concat_name + p_len + 1, wrapper);\n\t\t}\n\t      if (check_executable (concat_name))\n\t\treturn concat_name;\n\t      XFREE (concat_name);\n\t    }\n\t}\n      /* not found in PATH; assume curdir */\n    }\n  /* Relative path | not found in path: prepend cwd */\n  if (getcwd (tmp, LT_PATHMAX) == NULL)\n    lt_fatal (__FILE__, __LINE__, \"getcwd failed: %s\",\n              nonnull (strerror (errno)));\n  tmp_len = strlen (tmp);\n  concat_name = XMALLOC (char, tmp_len + 1 + strlen (wrapper) + 1);\n  memcpy (concat_name, tmp, tmp_len);\n  concat_name[tmp_len] = '/';\n  strcpy (concat_name + tmp_len + 1, wrapper);\n\n  if (check_executable (concat_name))\n    return concat_name;\n  XFREE (concat_name);\n  return NULL;\n}\n\nchar *\nchase_symlinks (const char *pathspec)\n{\n#ifndef S_ISLNK\n  return xstrdup (pathspec);\n#else\n  char buf[LT_PATHMAX];\n  struct stat s;\n  char *tmp_pathspec = xstrdup (pathspec);\n  char *p;\n  int has_symlinks = 0;\n  while (strlen (tmp_pathspec) && !has_symlinks)\n    {\n      lt_debugprintf (__FILE__, __LINE__,\n\t\t      \"checking path component for symlinks: %s\\n\",\n\t\t      tmp_pathspec);\n      if (lstat (tmp_pathspec, &s) == 0)\n\t{\n\t  if (S_ISLNK (s.st_mode) != 0)\n\t    {\n\t      has_symlinks = 1;\n\t      break;\n\t    }\n\n\t  /* search backwards for last DIR_SEPARATOR */\n\t  p = tmp_pathspec + strlen (tmp_pathspec) - 1;\n\t  while ((p > tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    p--;\n\t  if ((p == tmp_pathspec) && (!IS_DIR_SEPARATOR (*p)))\n\t    {\n\t      /* no more DIR_SEPARATORS left */\n\t      break;\n\t    }\n\t  *p = '\\0';\n\t}\n      else\n\t{\n\t  lt_fatal (__FILE__, __LINE__,\n\t\t    \"error accessing file \\\"%s\\\": %s\",\n\t\t    tmp_pathspec, nonnull (strerror (errno)));\n\t}\n    }\n  XFREE (tmp_pathspec);\n\n  if (!has_symlinks)\n    {\n      return xstrdup (pathspec);\n    }\n\n  tmp_pathspec = realpath (pathspec, buf);\n  if (tmp_pathspec == 0)\n    {\n      lt_fatal (__FILE__, __LINE__,\n\t\t\"could not follow symlinks for %s\", pathspec);\n    }\n  return xstrdup (tmp_pathspec);\n#endif\n}\n\nchar *\nstrendzap (char *str, const char *pat)\n{\n  size_t len, patlen;\n\n  assert (str != NULL);\n  assert (pat != NULL);\n\n  len = strlen (str);\n  patlen = strlen (pat);\n\n  if (patlen <= len)\n    {\n      str += len - patlen;\n      if (strcmp (str, pat) == 0)\n\t*str = '\\0';\n    }\n  return str;\n}\n\nvoid\nlt_debugprintf (const char *file, int line, const char *fmt, ...)\n{\n  va_list args;\n  if (lt_debug)\n    {\n      (void) fprintf (stderr, \"%s:%s:%d: \", program_name, file, line);\n      va_start (args, fmt);\n      (void) vfprintf (stderr, fmt, args);\n      va_end (args);\n    }\n}\n\nstatic void\nlt_error_core (int exit_status, const char *file,\n\t       int line, const char *mode,\n\t       const char *message, va_list ap)\n{\n  fprintf (stderr, \"%s:%s:%d: %s: \", program_name, file, line, mode);\n  vfprintf (stderr, message, ap);\n  fprintf (stderr, \".\\n\");\n\n  if (exit_status >= 0)\n    exit (exit_status);\n}\n\nvoid\nlt_fatal (const char *file, int line, const char *message, ...)\n{\n  va_list ap;\n  va_start (ap, message);\n  lt_error_core (EXIT_FAILURE, file, line, \"FATAL\", message, ap);\n  va_end (ap);\n}\n\nstatic const char *\nnonnull (const char *s)\n{\n  return s ? s : \"(null)\";\n}\n\nstatic const char *\nnonempty (const char *s)\n{\n  return (s && !*s) ? \"(empty)\" : nonnull (s);\n}\n\nvoid\nlt_setenv (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_setenv) setting '%s' to '%s'\\n\",\n                  nonnull (name), nonnull (value));\n  {\n#ifdef HAVE_SETENV\n    /* always make a copy, for consistency with !HAVE_SETENV */\n    char *str = xstrdup (value);\n    setenv (name, str, 1);\n#else\n    int len = strlen (name) + 1 + strlen (value) + 1;\n    char *str = XMALLOC (char, len);\n    sprintf (str, \"%s=%s\", name, value);\n    if (putenv (str) != EXIT_SUCCESS)\n      {\n        XFREE (str);\n      }\n#endif\n  }\n}\n\nchar *\nlt_extend_str (const char *orig_value, const char *add, int to_end)\n{\n  char *new_value;\n  if (orig_value && *orig_value)\n    {\n      int orig_value_len = strlen (orig_value);\n      int add_len = strlen (add);\n      new_value = XMALLOC (char, add_len + orig_value_len + 1);\n      if (to_end)\n        {\n          strcpy (new_value, orig_value);\n          strcpy (new_value + orig_value_len, add);\n        }\n      else\n        {\n          strcpy (new_value, add);\n          strcpy (new_value + add_len, orig_value);\n        }\n    }\n  else\n    {\n      new_value = xstrdup (add);\n    }\n  return new_value;\n}\n\nvoid\nlt_update_exe_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_exe_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      /* some systems can't cope with a ':'-terminated path #' */\n      int len = strlen (new_value);\n      while (((len = strlen (new_value)) > 0) && IS_PATH_SEPARATOR (new_value[len-1]))\n        {\n          new_value[len-1] = '\\0';\n        }\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nvoid\nlt_update_lib_path (const char *name, const char *value)\n{\n  lt_debugprintf (__FILE__, __LINE__,\n\t\t  \"(lt_update_lib_path) modifying '%s' by prepending '%s'\\n\",\n                  nonnull (name), nonnull (value));\n\n  if (name && *name && value && *value)\n    {\n      char *new_value = lt_extend_str (getenv (name), value, 0);\n      lt_setenv (name, new_value);\n      XFREE (new_value);\n    }\n}\n\nEOF\n\t    case $host_os in\n\t      mingw*)\n\t\tcat <<\"EOF\"\n\n/* Prepares an argument vector before calling spawn().\n   Note that spawn() does not by itself call the command interpreter\n     (getenv (\"COMSPEC\") != NULL ? getenv (\"COMSPEC\") :\n      ({ OSVERSIONINFO v; v.dwOSVersionInfoSize = sizeof(OSVERSIONINFO);\n         GetVersionEx(&v);\n         v.dwPlatformId == VER_PLATFORM_WIN32_NT;\n      }) ? \"cmd.exe\" : \"command.com\").\n   Instead it simply concatenates the arguments, separated by ' ', and calls\n   CreateProcess().  We must quote the arguments since Win32 CreateProcess()\n   interprets characters like ' ', '\\t', '\\\\', '\"' (but not '<' and '>') in a\n   special way:\n   - Space and tab are interpreted as delimiters. They are not treated as\n     delimiters if they are surrounded by double quotes: \"...\".\n   - Unescaped double quotes are removed from the input. Their only effect is\n     that within double quotes, space and tab are treated like normal\n     characters.\n   - Backslashes not followed by double quotes are not special.\n   - But 2*n+1 backslashes followed by a double quote become\n     n backslashes followed by a double quote (n >= 0):\n       \\\" -> \"\n       \\\\\\\" -> \\\"\n       \\\\\\\\\\\" -> \\\\\"\n */\n#define SHELL_SPECIAL_CHARS \"\\\"\\\\ \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\n#define SHELL_SPACE_CHARS \" \\001\\002\\003\\004\\005\\006\\007\\010\\011\\012\\013\\014\\015\\016\\017\\020\\021\\022\\023\\024\\025\\026\\027\\030\\031\\032\\033\\034\\035\\036\\037\"\nchar **\nprepare_spawn (char **argv)\n{\n  size_t argc;\n  char **new_argv;\n  size_t i;\n\n  /* Count number of arguments.  */\n  for (argc = 0; argv[argc] != NULL; argc++)\n    ;\n\n  /* Allocate new argument vector.  */\n  new_argv = XMALLOC (char *, argc + 1);\n\n  /* Put quoted arguments into the new argument vector.  */\n  for (i = 0; i < argc; i++)\n    {\n      const char *string = argv[i];\n\n      if (string[0] == '\\0')\n\tnew_argv[i] = xstrdup (\"\\\"\\\"\");\n      else if (strpbrk (string, SHELL_SPECIAL_CHARS) != NULL)\n\t{\n\t  int quote_around = (strpbrk (string, SHELL_SPACE_CHARS) != NULL);\n\t  size_t length;\n\t  unsigned int backslashes;\n\t  const char *s;\n\t  char *quoted_string;\n\t  char *p;\n\n\t  length = 0;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    length++;\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\tlength += backslashes + 1;\n\t      length++;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    length += backslashes + 1;\n\n\t  quoted_string = XMALLOC (char, length + 1);\n\n\t  p = quoted_string;\n\t  backslashes = 0;\n\t  if (quote_around)\n\t    *p++ = '\"';\n\t  for (s = string; *s != '\\0'; s++)\n\t    {\n\t      char c = *s;\n\t      if (c == '\"')\n\t\t{\n\t\t  unsigned int j;\n\t\t  for (j = backslashes + 1; j > 0; j--)\n\t\t    *p++ = '\\\\';\n\t\t}\n\t      *p++ = c;\n\t      if (c == '\\\\')\n\t\tbackslashes++;\n\t      else\n\t\tbackslashes = 0;\n\t    }\n\t  if (quote_around)\n\t    {\n\t      unsigned int j;\n\t      for (j = backslashes; j > 0; j--)\n\t\t*p++ = '\\\\';\n\t      *p++ = '\"';\n\t    }\n\t  *p = '\\0';\n\n\t  new_argv[i] = quoted_string;\n\t}\n      else\n\tnew_argv[i] = (char *) string;\n    }\n  new_argv[argc] = NULL;\n\n  return new_argv;\n}\nEOF\n\t\t;;\n\t    esac\n\n            cat <<\"EOF\"\nvoid lt_dump_script (FILE* f)\n{\nEOF\n\t    func_emit_wrapper yes |\n\t      $SED -n -e '\ns/^\\(.\\{79\\}\\)\\(..*\\)/\\1\\\n\\2/\nh\ns/\\([\\\\\"]\\)/\\\\\\1/g\ns/$/\\\\n/\ns/\\([^\\n]*\\).*/  fputs (\"\\1\", f);/p\ng\nD'\n            cat <<\"EOF\"\n}\nEOF\n}\n# end: func_emit_cwrapperexe_src\n\n# func_win32_import_lib_p ARG\n# True if ARG is an import lib, as indicated by $file_magic_cmd\nfunc_win32_import_lib_p ()\n{\n    $opt_debug\n    case `eval $file_magic_cmd \\\"\\$1\\\" 2>/dev/null | $SED -e 10q` in\n    *import*) : ;;\n    *) false ;;\n    esac\n}\n\n# func_mode_link arg...\nfunc_mode_link ()\n{\n    $opt_debug\n    case $host in\n    *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n      # It is impossible to link a dll without this setting, and\n      # we shouldn't force the makefile maintainer to figure out\n      # which system we are compiling for in order to pass an extra\n      # flag for every libtool invocation.\n      # allow_undefined=no\n\n      # FIXME: Unfortunately, there are problems with the above when trying\n      # to make a dll which has undefined symbols, in which case not\n      # even a static library is built.  For now, we need to specify\n      # -no-undefined on the libtool link line when we can be certain\n      # that all symbols are satisfied, otherwise we get a static library.\n      allow_undefined=yes\n      ;;\n    *)\n      allow_undefined=yes\n      ;;\n    esac\n    libtool_args=$nonopt\n    base_compile=\"$nonopt $@\"\n    compile_command=$nonopt\n    finalize_command=$nonopt\n\n    compile_rpath=\n    finalize_rpath=\n    compile_shlibpath=\n    finalize_shlibpath=\n    convenience=\n    old_convenience=\n    deplibs=\n    old_deplibs=\n    compiler_flags=\n    linker_flags=\n    dllsearchpath=\n    lib_search_path=`pwd`\n    inst_prefix_dir=\n    new_inherited_linker_flags=\n\n    avoid_version=no\n    bindir=\n    dlfiles=\n    dlprefiles=\n    dlself=no\n    export_dynamic=no\n    export_symbols=\n    export_symbols_regex=\n    generated=\n    libobjs=\n    ltlibs=\n    module=no\n    no_install=no\n    objs=\n    non_pic_objects=\n    precious_files_regex=\n    prefer_static_libs=no\n    preload=no\n    prev=\n    prevarg=\n    release=\n    rpath=\n    xrpath=\n    perm_rpath=\n    temp_rpath=\n    thread_safe=no\n    vinfo=\n    vinfo_number=no\n    weak_libs=\n    single_module=\"${wl}-single_module\"\n    func_infer_tag $base_compile\n\n    # We need to know -static, to get the right output filenames.\n    for arg\n    do\n      case $arg in\n      -shared)\n\ttest \"$build_libtool_libs\" != yes && \\\n\t  func_fatal_configuration \"can not build a shared library\"\n\tbuild_old_libs=no\n\tbreak\n\t;;\n      -all-static | -static | -static-libtool-libs)\n\tcase $arg in\n\t-all-static)\n\t  if test \"$build_libtool_libs\" = yes && test -z \"$link_static_flag\"; then\n\t    func_warning \"complete static linking is impossible in this configuration\"\n\t  fi\n\t  if test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\t-static)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=built\n\t  ;;\n\t-static-libtool-libs)\n\t  if test -z \"$pic_flag\" && test -n \"$link_static_flag\"; then\n\t    dlopen_self=$dlopen_self_static\n\t  fi\n\t  prefer_static_libs=yes\n\t  ;;\n\tesac\n\tbuild_libtool_libs=no\n\tbuild_old_libs=yes\n\tbreak\n\t;;\n      esac\n    done\n\n    # See if our shared archives depend on static archives.\n    test -n \"$old_archive_from_new_cmds\" && build_old_libs=yes\n\n    # Go through the arguments, transforming them on the way.\n    while test \"$#\" -gt 0; do\n      arg=\"$1\"\n      shift\n      func_quote_for_eval \"$arg\"\n      qarg=$func_quote_for_eval_unquoted_result\n      func_append libtool_args \" $func_quote_for_eval_result\"\n\n      # If the previous option needs an argument, assign it.\n      if test -n \"$prev\"; then\n\tcase $prev in\n\toutput)\n\t  func_append compile_command \" @OUTPUT@\"\n\t  func_append finalize_command \" @OUTPUT@\"\n\t  ;;\n\tesac\n\n\tcase $prev in\n\tbindir)\n\t  bindir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tdlfiles|dlprefiles)\n\t  if test \"$preload\" = no; then\n\t    # Add the symbol object into the linking commands.\n\t    func_append compile_command \" @SYMFILE@\"\n\t    func_append finalize_command \" @SYMFILE@\"\n\t    preload=yes\n\t  fi\n\t  case $arg in\n\t  *.la | *.lo) ;;  # We handle these cases below.\n\t  force)\n\t    if test \"$dlself\" = no; then\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  self)\n\t    if test \"$prev\" = dlprefiles; then\n\t      dlself=yes\n\t    elif test \"$prev\" = dlfiles && test \"$dlopen_self\" != yes; then\n\t      dlself=yes\n\t    else\n\t      dlself=needless\n\t      export_dynamic=yes\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  *)\n\t    if test \"$prev\" = dlfiles; then\n\t      func_append dlfiles \" $arg\"\n\t    else\n\t      func_append dlprefiles \" $arg\"\n\t    fi\n\t    prev=\n\t    continue\n\t    ;;\n\t  esac\n\t  ;;\n\texpsyms)\n\t  export_symbols=\"$arg\"\n\t  test -f \"$arg\" \\\n\t    || func_fatal_error \"symbol file \\`$arg' does not exist\"\n\t  prev=\n\t  continue\n\t  ;;\n\texpsyms_regex)\n\t  export_symbols_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tframework)\n\t  case $host in\n\t    *-*-darwin*)\n\t      case \"$deplibs \" in\n\t\t*\" $qarg.ltframework \"*) ;;\n\t\t*) func_append deplibs \" $qarg.ltframework\" # this is fixed later\n\t\t   ;;\n\t      esac\n\t      ;;\n\t  esac\n\t  prev=\n\t  continue\n\t  ;;\n\tinst_prefix)\n\t  inst_prefix_dir=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tobjectlist)\n\t  if test -f \"$arg\"; then\n\t    save_arg=$arg\n\t    moreargs=\n\t    for fil in `cat \"$save_arg\"`\n\t    do\n#\t      func_append moreargs \" $fil\"\n\t      arg=$fil\n\t      # A libtool-controlled object.\n\n\t      # Check to see that this really is a libtool object.\n\t      if func_lalib_unsafe_p \"$arg\"; then\n\t\tpic_object=\n\t\tnon_pic_object=\n\n\t\t# Read the .lo file\n\t\tfunc_source \"$arg\"\n\n\t\tif test -z \"$pic_object\" ||\n\t\t   test -z \"$non_pic_object\" ||\n\t\t   test \"$pic_object\" = none &&\n\t\t   test \"$non_pic_object\" = none; then\n\t\t  func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t\tfi\n\n\t\t# Extract subdirectory from the argument.\n\t\tfunc_dirname \"$arg\" \"/\" \"\"\n\t\txdir=\"$func_dirname_result\"\n\n\t\tif test \"$pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  pic_object=\"$xdir$pic_object\"\n\n\t\t  if test \"$prev\" = dlfiles; then\n\t\t    if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\t      func_append dlfiles \" $pic_object\"\n\t\t      prev=\n\t\t      continue\n\t\t    else\n\t\t      # If libtool objects are unsupported, then we need to preload.\n\t\t      prev=dlprefiles\n\t\t    fi\n\t\t  fi\n\n\t\t  # CHECK ME:  I think I busted this.  -Ossama\n\t\t  if test \"$prev\" = dlprefiles; then\n\t\t    # Preload the old-style object.\n\t\t    func_append dlprefiles \" $pic_object\"\n\t\t    prev=\n\t\t  fi\n\n\t\t  # A PIC object.\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  arg=\"$pic_object\"\n\t\tfi\n\n\t\t# Non-PIC object.\n\t\tif test \"$non_pic_object\" != none; then\n\t\t  # Prepend the subdirectory the object is found in.\n\t\t  non_pic_object=\"$xdir$non_pic_object\"\n\n\t\t  # A standard non-PIC object\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\t  if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t\t    arg=\"$non_pic_object\"\n\t\t  fi\n\t\telse\n\t\t  # If the PIC object exists, use it instead.\n\t\t  # $xdir was prepended to $pic_object above.\n\t\t  non_pic_object=\"$pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t\tfi\n\t      else\n\t\t# Only an error if not doing a dry-run.\n\t\tif $opt_dry_run; then\n\t\t  # Extract subdirectory from the argument.\n\t\t  func_dirname \"$arg\" \"/\" \"\"\n\t\t  xdir=\"$func_dirname_result\"\n\n\t\t  func_lo2o \"$arg\"\n\t\t  pic_object=$xdir$objdir/$func_lo2o_result\n\t\t  non_pic_object=$xdir$func_lo2o_result\n\t\t  func_append libobjs \" $pic_object\"\n\t\t  func_append non_pic_objects \" $non_pic_object\"\n\t        else\n\t\t  func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t\tfi\n\t      fi\n\t    done\n\t  else\n\t    func_fatal_error \"link input file \\`$arg' does not exist\"\n\t  fi\n\t  arg=$save_arg\n\t  prev=\n\t  continue\n\t  ;;\n\tprecious_regex)\n\t  precious_files_regex=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trelease)\n\t  release=\"-$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\trpath | xrpath)\n\t  # We need an absolute path.\n\t  case $arg in\n\t  [\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t  *)\n\t    func_fatal_error \"only absolute run-paths are allowed\"\n\t    ;;\n\t  esac\n\t  if test \"$prev\" = rpath; then\n\t    case \"$rpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append rpath \" $arg\" ;;\n\t    esac\n\t  else\n\t    case \"$xrpath \" in\n\t    *\" $arg \"*) ;;\n\t    *) func_append xrpath \" $arg\" ;;\n\t    esac\n\t  fi\n\t  prev=\n\t  continue\n\t  ;;\n\tshrext)\n\t  shrext_cmds=\"$arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\tweak)\n\t  func_append weak_libs \" $arg\"\n\t  prev=\n\t  continue\n\t  ;;\n\txcclinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txcompiler)\n\t  func_append compiler_flags \" $qarg\"\n\t  prev=\n\t  func_append compile_command \" $qarg\"\n\t  func_append finalize_command \" $qarg\"\n\t  continue\n\t  ;;\n\txlinker)\n\t  func_append linker_flags \" $qarg\"\n\t  func_append compiler_flags \" $wl$qarg\"\n\t  prev=\n\t  func_append compile_command \" $wl$qarg\"\n\t  func_append finalize_command \" $wl$qarg\"\n\t  continue\n\t  ;;\n\t*)\n\t  eval \"$prev=\\\"\\$arg\\\"\"\n\t  prev=\n\t  continue\n\t  ;;\n\tesac\n      fi # test -n \"$prev\"\n\n      prevarg=\"$arg\"\n\n      case $arg in\n      -all-static)\n\tif test -n \"$link_static_flag\"; then\n\t  # See comment for -static flag below, for more details.\n\t  func_append compile_command \" $link_static_flag\"\n\t  func_append finalize_command \" $link_static_flag\"\n\tfi\n\tcontinue\n\t;;\n\n      -allow-undefined)\n\t# FIXME: remove this flag sometime in the future.\n\tfunc_fatal_error \"\\`-allow-undefined' must not be used because it is the default\"\n\t;;\n\n      -avoid-version)\n\tavoid_version=yes\n\tcontinue\n\t;;\n\n      -bindir)\n\tprev=bindir\n\tcontinue\n\t;;\n\n      -dlopen)\n\tprev=dlfiles\n\tcontinue\n\t;;\n\n      -dlpreopen)\n\tprev=dlprefiles\n\tcontinue\n\t;;\n\n      -export-dynamic)\n\texport_dynamic=yes\n\tcontinue\n\t;;\n\n      -export-symbols | -export-symbols-regex)\n\tif test -n \"$export_symbols\" || test -n \"$export_symbols_regex\"; then\n\t  func_fatal_error \"more than one -exported-symbols argument is not allowed\"\n\tfi\n\tif test \"X$arg\" = \"X-export-symbols\"; then\n\t  prev=expsyms\n\telse\n\t  prev=expsyms_regex\n\tfi\n\tcontinue\n\t;;\n\n      -framework)\n\tprev=framework\n\tcontinue\n\t;;\n\n      -inst-prefix-dir)\n\tprev=inst_prefix\n\tcontinue\n\t;;\n\n      # The native IRIX linker understands -LANG:*, -LIST:* and -LNO:*\n      # so, if we see these flags be careful not to treat them like -L\n      -L[A-Z][A-Z]*:*)\n\tcase $with_gcc/$host in\n\tno/*-*-irix* | /*-*-irix*)\n\t  func_append compile_command \" $arg\"\n\t  func_append finalize_command \" $arg\"\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -L*)\n\tfunc_stripname \"-L\" '' \"$arg\"\n\tif test -z \"$func_stripname_result\"; then\n\t  if test \"$#\" -gt 0; then\n\t    func_fatal_error \"require no space between \\`-L' and \\`$1'\"\n\t  else\n\t    func_fatal_error \"need path for \\`-L' option\"\n\t  fi\n\tfi\n\tfunc_resolve_sysroot \"$func_stripname_result\"\n\tdir=$func_resolve_sysroot_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t*)\n\t  absdir=`cd \"$dir\" && pwd`\n\t  test -z \"$absdir\" && \\\n\t    func_fatal_error \"cannot determine absolute directory name of \\`$dir'\"\n\t  dir=\"$absdir\"\n\t  ;;\n\tesac\n\tcase \"$deplibs \" in\n\t*\" -L$dir \"* | *\" $arg \"*)\n\t  # Will only happen for absolute or sysroot arguments\n\t  ;;\n\t*)\n\t  # Preserve sysroot, but never include relative directories\n\t  case $dir in\n\t    [\\\\/]* | [A-Za-z]:[\\\\/]* | =*) func_append deplibs \" $arg\" ;;\n\t    *) func_append deplibs \" -L$dir\" ;;\n\t  esac\n\t  func_append lib_search_path \" $dir\"\n\t  ;;\n\tesac\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`$ECHO \"$dir\" | $SED 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$dir:\"*) ;;\n\t  ::) dllsearchpath=$dir;;\n\t  *) func_append dllsearchpath \":$dir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n\tcontinue\n\t;;\n\n      -l*)\n\tif test \"X$arg\" = \"X-lc\" || test \"X$arg\" = \"X-lm\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # These systems don't actually have a C or math library (as such)\n\t    continue\n\t    ;;\n\t  *-*-os2*)\n\t    # These systems don't actually have a C library (as such)\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C and math libraries are in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    continue\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    test \"X$arg\" = \"X-lc\" && continue\n\t    ;;\n\t  esac\n\telif test \"X$arg\" = \"X-lc_r\"; then\n\t case $host in\n\t *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t   # Do not include libc_r directly, use -pthread flag.\n\t   continue\n\t   ;;\n\t esac\n\tfi\n\tfunc_append deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      -module)\n\tmodule=yes\n\tcontinue\n\t;;\n\n      # Tru64 UNIX uses -model [arg] to determine the layout of C++\n      # classes, name mangling, and exception handling.\n      # Darwin uses the -arch flag to determine output architecture.\n      -model|-arch|-isysroot|--sysroot)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n      |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\tfunc_append compiler_flags \" $arg\"\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n\tcase \"$new_inherited_linker_flags \" in\n\t    *\" $arg \"*) ;;\n\t    * ) func_append new_inherited_linker_flags \" $arg\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -multi_module)\n\tsingle_module=\"${wl}-multi_module\"\n\tcontinue\n\t;;\n\n      -no-fast-install)\n\tfast_install=no\n\tcontinue\n\t;;\n\n      -no-install)\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-darwin* | *-cegcc*)\n\t  # The PATH hackery in wrapper scripts is required on Windows\n\t  # and Darwin in order for the loader to find any dlls it needs.\n\t  func_warning \"\\`-no-install' is ignored for $host\"\n\t  func_warning \"assuming \\`-no-fast-install' instead\"\n\t  fast_install=no\n\t  ;;\n\t*) no_install=yes ;;\n\tesac\n\tcontinue\n\t;;\n\n      -no-undefined)\n\tallow_undefined=no\n\tcontinue\n\t;;\n\n      -objectlist)\n\tprev=objectlist\n\tcontinue\n\t;;\n\n      -o) prev=output ;;\n\n      -precious-files-regex)\n\tprev=precious_regex\n\tcontinue\n\t;;\n\n      -release)\n\tprev=release\n\tcontinue\n\t;;\n\n      -rpath)\n\tprev=rpath\n\tcontinue\n\t;;\n\n      -R)\n\tprev=xrpath\n\tcontinue\n\t;;\n\n      -R*)\n\tfunc_stripname '-R' '' \"$arg\"\n\tdir=$func_stripname_result\n\t# We need an absolute path.\n\tcase $dir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) ;;\n\t=*)\n\t  func_stripname '=' '' \"$dir\"\n\t  dir=$lt_sysroot$func_stripname_result\n\t  ;;\n\t*)\n\t  func_fatal_error \"only absolute run-paths are allowed\"\n\t  ;;\n\tesac\n\tcase \"$xrpath \" in\n\t*\" $dir \"*) ;;\n\t*) func_append xrpath \" $dir\" ;;\n\tesac\n\tcontinue\n\t;;\n\n      -shared)\n\t# The effects of -shared are defined in a previous loop.\n\tcontinue\n\t;;\n\n      -shrext)\n\tprev=shrext\n\tcontinue\n\t;;\n\n      -static | -static-libtool-libs)\n\t# The effects of -static are defined in a previous loop.\n\t# We used to do the same as -all-static on platforms that\n\t# didn't have a PIC flag, but the assumption that the effects\n\t# would be equivalent was wrong.  It would break on at least\n\t# Digital Unix and AIX.\n\tcontinue\n\t;;\n\n      -thread-safe)\n\tthread_safe=yes\n\tcontinue\n\t;;\n\n      -version-info)\n\tprev=vinfo\n\tcontinue\n\t;;\n\n      -version-number)\n\tprev=vinfo\n\tvinfo_number=yes\n\tcontinue\n\t;;\n\n      -weak)\n        prev=weak\n\tcontinue\n\t;;\n\n      -Wc,*)\n\tfunc_stripname '-Wc,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Wl,*)\n\tfunc_stripname '-Wl,' '' \"$arg\"\n\targs=$func_stripname_result\n\targ=\n\tsave_ifs=\"$IFS\"; IFS=','\n\tfor flag in $args; do\n\t  IFS=\"$save_ifs\"\n          func_quote_for_eval \"$flag\"\n\t  func_append arg \" $wl$func_quote_for_eval_result\"\n\t  func_append compiler_flags \" $wl$func_quote_for_eval_result\"\n\t  func_append linker_flags \" $func_quote_for_eval_result\"\n\tdone\n\tIFS=\"$save_ifs\"\n\tfunc_stripname ' ' '' \"$arg\"\n\targ=$func_stripname_result\n\t;;\n\n      -Xcompiler)\n\tprev=xcompiler\n\tcontinue\n\t;;\n\n      -Xlinker)\n\tprev=xlinker\n\tcontinue\n\t;;\n\n      -XCClinker)\n\tprev=xcclinker\n\tcontinue\n\t;;\n\n      # -msg_* for osf cc\n      -msg_*)\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      # Flags to be passed through unchanged, with rationale:\n      # -64, -mips[0-9]      enable 64-bit mode for the SGI compiler\n      # -r[0-9][0-9]*        specify processor for the SGI compiler\n      # -xarch=*, -xtarget=* enable 64-bit mode for the Sun compiler\n      # +DA*, +DD*           enable 64-bit mode for the HP compiler\n      # -q*                  compiler args for the IBM compiler\n      # -m*, -t[45]*, -txscale* architecture-specific flags for GCC\n      # -F/path              path to uninstalled frameworks, gcc on darwin\n      # -p, -pg, --coverage, -fprofile-*  profiling flags for GCC\n      # @file                GCC response files\n      # -tp=*                Portland pgcc target processor selection\n      # --sysroot=*          for sysroot support\n      # -O*, -flto*, -fwhopr*, -fuse-linker-plugin GCC link-time optimization\n      -64|-mips[0-9]|-r[0-9][0-9]*|-xarch=*|-xtarget=*|+DA*|+DD*|-q*|-m*| \\\n      -t[45]*|-txscale*|-p|-pg|--coverage|-fprofile-*|-F*|@*|-tp=*|--sysroot=*| \\\n      -O*|-flto*|-fwhopr*|-fuse-linker-plugin)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n        func_append compile_command \" $arg\"\n        func_append finalize_command \" $arg\"\n        func_append compiler_flags \" $arg\"\n        continue\n        ;;\n\n      # Some other compiler flag.\n      -* | +*)\n        func_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n\n      *.$objext)\n\t# A standard object.\n\tfunc_append objs \" $arg\"\n\t;;\n\n      *.lo)\n\t# A libtool-controlled object.\n\n\t# Check to see that this really is a libtool object.\n\tif func_lalib_unsafe_p \"$arg\"; then\n\t  pic_object=\n\t  non_pic_object=\n\n\t  # Read the .lo file\n\t  func_source \"$arg\"\n\n\t  if test -z \"$pic_object\" ||\n\t     test -z \"$non_pic_object\" ||\n\t     test \"$pic_object\" = none &&\n\t     test \"$non_pic_object\" = none; then\n\t    func_fatal_error \"cannot find name of object for \\`$arg'\"\n\t  fi\n\n\t  # Extract subdirectory from the argument.\n\t  func_dirname \"$arg\" \"/\" \"\"\n\t  xdir=\"$func_dirname_result\"\n\n\t  if test \"$pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    pic_object=\"$xdir$pic_object\"\n\n\t    if test \"$prev\" = dlfiles; then\n\t      if test \"$build_libtool_libs\" = yes && test \"$dlopen_support\" = yes; then\n\t\tfunc_append dlfiles \" $pic_object\"\n\t\tprev=\n\t\tcontinue\n\t      else\n\t\t# If libtool objects are unsupported, then we need to preload.\n\t\tprev=dlprefiles\n\t      fi\n\t    fi\n\n\t    # CHECK ME:  I think I busted this.  -Ossama\n\t    if test \"$prev\" = dlprefiles; then\n\t      # Preload the old-style object.\n\t      func_append dlprefiles \" $pic_object\"\n\t      prev=\n\t    fi\n\n\t    # A PIC object.\n\t    func_append libobjs \" $pic_object\"\n\t    arg=\"$pic_object\"\n\t  fi\n\n\t  # Non-PIC object.\n\t  if test \"$non_pic_object\" != none; then\n\t    # Prepend the subdirectory the object is found in.\n\t    non_pic_object=\"$xdir$non_pic_object\"\n\n\t    # A standard non-PIC object\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t    if test -z \"$pic_object\" || test \"$pic_object\" = none ; then\n\t      arg=\"$non_pic_object\"\n\t    fi\n\t  else\n\t    # If the PIC object exists, use it instead.\n\t    # $xdir was prepended to $pic_object above.\n\t    non_pic_object=\"$pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  fi\n\telse\n\t  # Only an error if not doing a dry-run.\n\t  if $opt_dry_run; then\n\t    # Extract subdirectory from the argument.\n\t    func_dirname \"$arg\" \"/\" \"\"\n\t    xdir=\"$func_dirname_result\"\n\n\t    func_lo2o \"$arg\"\n\t    pic_object=$xdir$objdir/$func_lo2o_result\n\t    non_pic_object=$xdir$func_lo2o_result\n\t    func_append libobjs \" $pic_object\"\n\t    func_append non_pic_objects \" $non_pic_object\"\n\t  else\n\t    func_fatal_error \"\\`$arg' is not a valid libtool object\"\n\t  fi\n\tfi\n\t;;\n\n      *.$libext)\n\t# An archive.\n\tfunc_append deplibs \" $arg\"\n\tfunc_append old_deplibs \" $arg\"\n\tcontinue\n\t;;\n\n      *.la)\n\t# A libtool-controlled library.\n\n\tfunc_resolve_sysroot \"$arg\"\n\tif test \"$prev\" = dlfiles; then\n\t  # This library was specified with -dlopen.\n\t  func_append dlfiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telif test \"$prev\" = dlprefiles; then\n\t  # The library was specified with -dlpreopen.\n\t  func_append dlprefiles \" $func_resolve_sysroot_result\"\n\t  prev=\n\telse\n\t  func_append deplibs \" $func_resolve_sysroot_result\"\n\tfi\n\tcontinue\n\t;;\n\n      # Some other compiler argument.\n      *)\n\t# Unknown arguments in both finalize_command and compile_command need\n\t# to be aesthetically quoted because they are evaled later.\n\tfunc_quote_for_eval \"$arg\"\n\targ=\"$func_quote_for_eval_result\"\n\t;;\n      esac # arg\n\n      # Now actually substitute the argument into the commands.\n      if test -n \"$arg\"; then\n\tfunc_append compile_command \" $arg\"\n\tfunc_append finalize_command \" $arg\"\n      fi\n    done # argument parsing loop\n\n    test -n \"$prev\" && \\\n      func_fatal_help \"the \\`$prevarg' option requires an argument\"\n\n    if test \"$export_dynamic\" = yes && test -n \"$export_dynamic_flag_spec\"; then\n      eval arg=\\\"$export_dynamic_flag_spec\\\"\n      func_append compile_command \" $arg\"\n      func_append finalize_command \" $arg\"\n    fi\n\n    oldlibs=\n    # calculate the name of the file, without its directory\n    func_basename \"$output\"\n    outputname=\"$func_basename_result\"\n    libobjs_save=\"$libobjs\"\n\n    if test -n \"$shlibpath_var\"; then\n      # get the directories listed in $shlibpath_var\n      eval shlib_search_path=\\`\\$ECHO \\\"\\${$shlibpath_var}\\\" \\| \\$SED \\'s/:/ /g\\'\\`\n    else\n      shlib_search_path=\n    fi\n    eval sys_lib_search_path=\\\"$sys_lib_search_path_spec\\\"\n    eval sys_lib_dlsearch_path=\\\"$sys_lib_dlsearch_path_spec\\\"\n\n    func_dirname \"$output\" \"/\" \"\"\n    output_objdir=\"$func_dirname_result$objdir\"\n    func_to_tool_file \"$output_objdir/\"\n    tool_output_objdir=$func_to_tool_file_result\n    # Create the object directory.\n    func_mkdir_p \"$output_objdir\"\n\n    # Determine the type of output\n    case $output in\n    \"\")\n      func_fatal_help \"you must specify an output file\"\n      ;;\n    *.$libext) linkmode=oldlib ;;\n    *.lo | *.$objext) linkmode=obj ;;\n    *.la) linkmode=lib ;;\n    *) linkmode=prog ;; # Anything else should be a program.\n    esac\n\n    specialdeplibs=\n\n    libs=\n    # Find all interdependent deplibs by searching for libraries\n    # that are linked more than once (e.g. -la -lb -la)\n    for deplib in $deplibs; do\n      if $opt_preserve_dup_deps ; then\n\tcase \"$libs \" in\n\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\tesac\n      fi\n      func_append libs \" $deplib\"\n    done\n\n    if test \"$linkmode\" = lib; then\n      libs=\"$predeps $libs $compiler_lib_search_path $postdeps\"\n\n      # Compute libraries that are listed more than once in $predeps\n      # $postdeps and mark them as special (i.e., whose duplicates are\n      # not to be eliminated).\n      pre_post_deps=\n      if $opt_duplicate_compiler_generated_deps; then\n\tfor pre_post_dep in $predeps $postdeps; do\n\t  case \"$pre_post_deps \" in\n\t  *\" $pre_post_dep \"*) func_append specialdeplibs \" $pre_post_deps\" ;;\n\t  esac\n\t  func_append pre_post_deps \" $pre_post_dep\"\n\tdone\n      fi\n      pre_post_deps=\n    fi\n\n    deplibs=\n    newdependency_libs=\n    newlib_search_path=\n    need_relink=no # whether we're linking any uninstalled libtool libraries\n    notinst_deplibs= # not-installed libtool libraries\n    notinst_path= # paths that contain not-installed libtool libraries\n\n    case $linkmode in\n    lib)\n\tpasses=\"conv dlpreopen link\"\n\tfor file in $dlfiles $dlprefiles; do\n\t  case $file in\n\t  *.la) ;;\n\t  *)\n\t    func_fatal_help \"libraries can \\`-dlopen' only libtool libraries: $file\"\n\t    ;;\n\t  esac\n\tdone\n\t;;\n    prog)\n\tcompile_deplibs=\n\tfinalize_deplibs=\n\talldeplibs=no\n\tnewdlfiles=\n\tnewdlprefiles=\n\tpasses=\"conv scan dlopen dlpreopen link\"\n\t;;\n    *)  passes=\"conv\"\n\t;;\n    esac\n\n    for pass in $passes; do\n      # The preopen pass in lib mode reverses $deplibs; put it back here\n      # so that -L comes before libs that need it for instance...\n      if test \"$linkmode,$pass\" = \"lib,link\"; then\n\t## FIXME: Find the place where the list is rebuilt in the wrong\n\t##        order, and fix it there properly\n        tmp_deplibs=\n\tfor deplib in $deplibs; do\n\t  tmp_deplibs=\"$deplib $tmp_deplibs\"\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n      fi\n\n      if test \"$linkmode,$pass\" = \"lib,link\" ||\n\t test \"$linkmode,$pass\" = \"prog,scan\"; then\n\tlibs=\"$deplibs\"\n\tdeplibs=\n      fi\n      if test \"$linkmode\" = prog; then\n\tcase $pass in\n\tdlopen) libs=\"$dlfiles\" ;;\n\tdlpreopen) libs=\"$dlprefiles\" ;;\n\tlink)\n\t  libs=\"$deplibs %DEPLIBS%\"\n\t  test \"X$link_all_deplibs\" != Xno && libs=\"$libs $dependency_libs\"\n\t  ;;\n\tesac\n      fi\n      if test \"$linkmode,$pass\" = \"lib,dlpreopen\"; then\n\t# Collect and forward deplibs of preopened libtool libs\n\tfor lib in $dlprefiles; do\n\t  # Ignore non-libtool-libs\n\t  dependency_libs=\n\t  func_resolve_sysroot \"$lib\"\n\t  case $lib in\n\t  *.la)\tfunc_source \"$func_resolve_sysroot_result\" ;;\n\t  esac\n\n\t  # Collect preopened libtool deplibs, except any this library\n\t  # has declared as weak libs\n\t  for deplib in $dependency_libs; do\n\t    func_basename \"$deplib\"\n            deplib_base=$func_basename_result\n\t    case \" $weak_libs \" in\n\t    *\" $deplib_base \"*) ;;\n\t    *) func_append deplibs \" $deplib\" ;;\n\t    esac\n\t  done\n\tdone\n\tlibs=\"$dlprefiles\"\n      fi\n      if test \"$pass\" = dlopen; then\n\t# Collect dlpreopened libraries\n\tsave_deplibs=\"$deplibs\"\n\tdeplibs=\n      fi\n\n      for deplib in $libs; do\n\tlib=\n\tfound=no\n\tcase $deplib in\n\t-mt|-mthreads|-kthread|-Kthread|-pthread|-pthreads|--thread-safe \\\n        |-threads|-fopenmp|-openmp|-mp|-xopenmp|-omp|-qsmp=*)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    func_append compiler_flags \" $deplib\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-l*)\n\t  if test \"$linkmode\" != lib && test \"$linkmode\" != prog; then\n\t    func_warning \"\\`-l' is ignored for archives/objects\"\n\t    continue\n\t  fi\n\t  func_stripname '-l' '' \"$deplib\"\n\t  name=$func_stripname_result\n\t  if test \"$linkmode\" = lib; then\n\t    searchdirs=\"$newlib_search_path $lib_search_path $compiler_lib_search_dirs $sys_lib_search_path $shlib_search_path\"\n\t  else\n\t    searchdirs=\"$newlib_search_path $lib_search_path $sys_lib_search_path $shlib_search_path\"\n\t  fi\n\t  for searchdir in $searchdirs; do\n\t    for search_ext in .la $std_shrext .so .a; do\n\t      # Search the libtool library\n\t      lib=\"$searchdir/lib${name}${search_ext}\"\n\t      if test -f \"$lib\"; then\n\t\tif test \"$search_ext\" = \".la\"; then\n\t\t  found=yes\n\t\telse\n\t\t  found=no\n\t\tfi\n\t\tbreak 2\n\t      fi\n\t    done\n\t  done\n\t  if test \"$found\" != yes; then\n\t    # deplib doesn't seem to be a libtool library\n\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      deplibs=\"$deplib $deplibs\"\n\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    continue\n\t  else # deplib is a libtool library\n\t    # If $allow_libtool_libs_with_static_runtimes && $deplib is a stdlib,\n\t    # We need to do some special things here, and not later.\n\t    if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t      case \" $predeps $postdeps \" in\n\t      *\" $deplib \"*)\n\t\tif func_lalib_p \"$lib\"; then\n\t\t  library_names=\n\t\t  old_library=\n\t\t  func_source \"$lib\"\n\t\t  for l in $old_library $library_names; do\n\t\t    ll=\"$l\"\n\t\t  done\n\t\t  if test \"X$ll\" = \"X$old_library\" ; then # only static version available\n\t\t    found=no\n\t\t    func_dirname \"$lib\" \"\" \".\"\n\t\t    ladir=\"$func_dirname_result\"\n\t\t    lib=$ladir/$old_library\n\t\t    if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t\t    else\n\t\t      deplibs=\"$deplib $deplibs\"\n\t\t      test \"$linkmode\" = lib && newdependency_libs=\"$deplib $newdependency_libs\"\n\t\t    fi\n\t\t    continue\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *) ;;\n\t      esac\n\t    fi\n\t  fi\n\t  ;; # -l\n\t*.ltframework)\n\t  if test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$deplib $compile_deplibs\"\n\t    finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$deplib $deplibs\"\n\t    if test \"$linkmode\" = lib ; then\n\t\tcase \"$new_inherited_linker_flags \" in\n\t\t    *\" $deplib \"*) ;;\n\t\t    * ) func_append new_inherited_linker_flags \" $deplib\" ;;\n\t\tesac\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t-L*)\n\t  case $linkmode in\n\t  lib)\n\t    deplibs=\"$deplib $deplibs\"\n\t    test \"$pass\" = conv && continue\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" = conv; then\n\t      deplibs=\"$deplib $deplibs\"\n\t      continue\n\t    fi\n\t    if test \"$pass\" = scan; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    func_stripname '-L' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t    ;;\n\t  *)\n\t    func_warning \"\\`-L' is ignored for archives/objects\"\n\t    ;;\n\t  esac # linkmode\n\t  continue\n\t  ;; # -L\n\t-R*)\n\t  if test \"$pass\" = link; then\n\t    func_stripname '-R' '' \"$deplib\"\n\t    func_resolve_sysroot \"$func_stripname_result\"\n\t    dir=$func_resolve_sysroot_result\n\t    # Make sure the xrpath contains only unique directories.\n\t    case \"$xrpath \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append xrpath \" $dir\" ;;\n\t    esac\n\t  fi\n\t  deplibs=\"$deplib $deplibs\"\n\t  continue\n\t  ;;\n\t*.la)\n\t  func_resolve_sysroot \"$deplib\"\n\t  lib=$func_resolve_sysroot_result\n\t  ;;\n\t*.$libext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t    continue\n\t  fi\n\t  case $linkmode in\n\t  lib)\n\t    # Linking convenience modules into shared libraries is allowed,\n\t    # but linking other static libraries is non-portable.\n\t    case \" $dlpreconveniencelibs \" in\n\t    *\" $deplib \"*) ;;\n\t    *)\n\t      valid_a_lib=no\n\t      case $deplibs_check_method in\n\t\tmatch_pattern*)\n\t\t  set dummy $deplibs_check_method; shift\n\t\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t\t  if eval \"\\$ECHO \\\"$deplib\\\"\" 2>/dev/null | $SED 10q \\\n\t\t    | $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t    valid_a_lib=yes\n\t\t  fi\n\t\t;;\n\t\tpass_all)\n\t\t  valid_a_lib=yes\n\t\t;;\n\t      esac\n\t      if test \"$valid_a_lib\" != yes; then\n\t\techo\n\t\t$ECHO \"*** Warning: Trying to link with static lib archive $deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because the file extensions .$libext of this argument makes me believe\"\n\t\techo \"*** that it is just a static archive that I should not use here.\"\n\t      else\n\t\techo\n\t\t$ECHO \"*** Warning: Linking the shared library $output against the\"\n\t\t$ECHO \"*** static library $deplib is not portable!\"\n\t\tdeplibs=\"$deplib $deplibs\"\n\t      fi\n\t      ;;\n\t    esac\n\t    continue\n\t    ;;\n\t  prog)\n\t    if test \"$pass\" != link; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    fi\n\t    continue\n\t    ;;\n\t  esac # linkmode\n\t  ;; # *.$libext\n\t*.lo | *.$objext)\n\t  if test \"$pass\" = conv; then\n\t    deplibs=\"$deplib $deplibs\"\n\t  elif test \"$linkmode\" = prog; then\n\t    if test \"$pass\" = dlpreopen || test \"$dlopen_support\" != yes || test \"$build_libtool_libs\" = no; then\n\t      # If there is no dlopen support or we're linking statically,\n\t      # we need to preload.\n\t      func_append newdlprefiles \" $deplib\"\n\t      compile_deplibs=\"$deplib $compile_deplibs\"\n\t      finalize_deplibs=\"$deplib $finalize_deplibs\"\n\t    else\n\t      func_append newdlfiles \" $deplib\"\n\t    fi\n\t  fi\n\t  continue\n\t  ;;\n\t%DEPLIBS%)\n\t  alldeplibs=yes\n\t  continue\n\t  ;;\n\tesac # case $deplib\n\n\tif test \"$found\" = yes || test -f \"$lib\"; then :\n\telse\n\t  func_fatal_error \"cannot find the library \\`$lib' or unhandled argument \\`$deplib'\"\n\tfi\n\n\t# Check to see that this really is a libtool archive.\n\tfunc_lalib_unsafe_p \"$lib\" \\\n\t  || func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\n\tfunc_dirname \"$lib\" \"\" \".\"\n\tladir=\"$func_dirname_result\"\n\n\tdlname=\n\tdlopen=\n\tdlpreopen=\n\tlibdir=\n\tlibrary_names=\n\told_library=\n\tinherited_linker_flags=\n\t# If the library was installed with an old release of libtool,\n\t# it will not redefine variables installed, or shouldnotlink\n\tinstalled=yes\n\tshouldnotlink=no\n\tavoidtemprpath=\n\n\n\t# Read the .la file\n\tfunc_source \"$lib\"\n\n\t# Convert \"-framework foo\" to \"foo.ltframework\"\n\tif test -n \"$inherited_linker_flags\"; then\n\t  tmp_inherited_linker_flags=`$ECHO \"$inherited_linker_flags\" | $SED 's/-framework \\([^ $]*\\)/\\1.ltframework/g'`\n\t  for tmp_inherited_linker_flag in $tmp_inherited_linker_flags; do\n\t    case \" $new_inherited_linker_flags \" in\n\t      *\" $tmp_inherited_linker_flag \"*) ;;\n\t      *) func_append new_inherited_linker_flags \" $tmp_inherited_linker_flag\";;\n\t    esac\n\t  done\n\tfi\n\tdependency_libs=`$ECHO \" $dependency_libs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tif test \"$linkmode,$pass\" = \"lib,link\" ||\n\t   test \"$linkmode,$pass\" = \"prog,scan\" ||\n\t   { test \"$linkmode\" != prog && test \"$linkmode\" != lib; }; then\n\t  test -n \"$dlopen\" && func_append dlfiles \" $dlopen\"\n\t  test -n \"$dlpreopen\" && func_append dlprefiles \" $dlpreopen\"\n\tfi\n\n\tif test \"$pass\" = conv; then\n\t  # Only check for convenience libraries\n\t  deplibs=\"$lib $deplibs\"\n\t  if test -z \"$libdir\"; then\n\t    if test -z \"$old_library\"; then\n\t      func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\t    fi\n\t    # It is a libtool convenience library, so add in its objects.\n\t    func_append convenience \" $ladir/$objdir/$old_library\"\n\t    func_append old_convenience \" $ladir/$objdir/$old_library\"\n\t    tmp_libs=\n\t    for deplib in $dependency_libs; do\n\t      deplibs=\"$deplib $deplibs\"\n\t      if $opt_preserve_dup_deps ; then\n\t\tcase \"$tmp_libs \" in\n\t\t*\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t\tesac\n\t      fi\n\t      func_append tmp_libs \" $deplib\"\n\t    done\n\t  elif test \"$linkmode\" != prog && test \"$linkmode\" != lib; then\n\t    func_fatal_error \"\\`$lib' is not a convenience library\"\n\t  fi\n\t  continue\n\tfi # $pass = conv\n\n\n\t# Get the name of the library we link against.\n\tlinklib=\n\tif test -n \"$old_library\" &&\n\t   { test \"$prefer_static_libs\" = yes ||\n\t     test \"$prefer_static_libs,$installed\" = \"built,no\"; }; then\n\t  linklib=$old_library\n\telse\n\t  for l in $old_library $library_names; do\n\t    linklib=\"$l\"\n\t  done\n\tfi\n\tif test -z \"$linklib\"; then\n\t  func_fatal_error \"cannot find name of link library for \\`$lib'\"\n\tfi\n\n\t# This library was specified with -dlopen.\n\tif test \"$pass\" = dlopen; then\n\t  if test -z \"$libdir\"; then\n\t    func_fatal_error \"cannot -dlopen a convenience library: \\`$lib'\"\n\t  fi\n\t  if test -z \"$dlname\" ||\n\t     test \"$dlopen_support\" != yes ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    # If there is no dlname, no dlopen support or we're linking\n\t    # statically, we need to preload.  We also need to preload any\n\t    # dependent libraries so libltdl's deplib preloader doesn't\n\t    # bomb out in the load deplibs phase.\n\t    func_append dlprefiles \" $lib $dependency_libs\"\n\t  else\n\t    func_append newdlfiles \" $lib\"\n\t  fi\n\t  continue\n\tfi # $pass = dlopen\n\n\t# We need an absolute path.\n\tcase $ladir in\n\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs_ladir=\"$ladir\" ;;\n\t*)\n\t  abs_ladir=`cd \"$ladir\" && pwd`\n\t  if test -z \"$abs_ladir\"; then\n\t    func_warning \"cannot determine absolute directory name of \\`$ladir'\"\n\t    func_warning \"passing it literally to the linker, although it might fail\"\n\t    abs_ladir=\"$ladir\"\n\t  fi\n\t  ;;\n\tesac\n\tfunc_basename \"$lib\"\n\tlaname=\"$func_basename_result\"\n\n\t# Find the relevant object directory and library name.\n\tif test \"X$installed\" = Xyes; then\n\t  if test ! -f \"$lt_sysroot$libdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    func_warning \"library \\`$lib' was moved.\"\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    libdir=\"$abs_ladir\"\n\t  else\n\t    dir=\"$lt_sysroot$libdir\"\n\t    absdir=\"$lt_sysroot$libdir\"\n\t  fi\n\t  test \"X$hardcode_automatic\" = Xyes && avoidtemprpath=yes\n\telse\n\t  if test ! -f \"$ladir/$objdir/$linklib\" && test -f \"$abs_ladir/$linklib\"; then\n\t    dir=\"$ladir\"\n\t    absdir=\"$abs_ladir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  else\n\t    dir=\"$ladir/$objdir\"\n\t    absdir=\"$abs_ladir/$objdir\"\n\t    # Remove this search path later\n\t    func_append notinst_path \" $abs_ladir\"\n\t  fi\n\tfi # $installed = yes\n\tfunc_stripname 'lib' '.la' \"$laname\"\n\tname=$func_stripname_result\n\n\t# This library was specified with -dlpreopen.\n\tif test \"$pass\" = dlpreopen; then\n\t  if test -z \"$libdir\" && test \"$linkmode\" = prog; then\n\t    func_fatal_error \"only libraries may -dlpreopen a convenience library: \\`$lib'\"\n\t  fi\n\t  case \"$host\" in\n\t    # special handling for platforms with PE-DLLs.\n\t    *cygwin* | *mingw* | *cegcc* )\n\t      # Linker will automatically link against shared library if both\n\t      # static and shared are present.  Therefore, ensure we extract\n\t      # symbols from the import library if a shared library is present\n\t      # (otherwise, the dlopen module name will be incorrect).  We do\n\t      # this by putting the import library name into $newdlprefiles.\n\t      # We recover the dlopen module name by 'saving' the la file\n\t      # name in a special purpose variable, and (later) extracting the\n\t      # dlname from the la file.\n\t      if test -n \"$dlname\"; then\n\t        func_tr_sh \"$dir/$linklib\"\n\t        eval \"libfile_$func_tr_sh_result=\\$abs_ladir/\\$laname\"\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      fi\n\t    ;;\n\t    * )\n\t      # Prefer using a static library (so that no silly _DYNAMIC symbols\n\t      # are required to link).\n\t      if test -n \"$old_library\"; then\n\t        func_append newdlprefiles \" $dir/$old_library\"\n\t        # Keep a list of preopened convenience libraries to check\n\t        # that they are being used correctly in the link pass.\n\t        test -z \"$libdir\" && \\\n\t          func_append dlpreconveniencelibs \" $dir/$old_library\"\n\t      # Otherwise, use the dlname, so that lt_dlopen finds it.\n\t      elif test -n \"$dlname\"; then\n\t        func_append newdlprefiles \" $dir/$dlname\"\n\t      else\n\t        func_append newdlprefiles \" $dir/$linklib\"\n\t      fi\n\t    ;;\n\t  esac\n\tfi # $pass = dlpreopen\n\n\tif test -z \"$libdir\"; then\n\t  # Link the convenience library\n\t  if test \"$linkmode\" = lib; then\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t  elif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t    compile_deplibs=\"$dir/$old_library $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$old_library $finalize_deplibs\"\n\t  else\n\t    deplibs=\"$lib $deplibs\" # used for prog,scan pass\n\t  fi\n\t  continue\n\tfi\n\n\n\tif test \"$linkmode\" = prog && test \"$pass\" != link; then\n\t  func_append newlib_search_path \" $ladir\"\n\t  deplibs=\"$lib $deplibs\"\n\n\t  linkalldeplibs=no\n\t  if test \"$link_all_deplibs\" != no || test -z \"$library_names\" ||\n\t     test \"$build_libtool_libs\" = no; then\n\t    linkalldeplibs=yes\n\t  fi\n\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    case $deplib in\n\t    -L*) func_stripname '-L' '' \"$deplib\"\n\t         func_resolve_sysroot \"$func_stripname_result\"\n\t         func_append newlib_search_path \" $func_resolve_sysroot_result\"\n\t\t ;;\n\t    esac\n\t    # Need to link against all dependency_libs?\n\t    if test \"$linkalldeplibs\" = yes; then\n\t      deplibs=\"$deplib $deplibs\"\n\t    else\n\t      # Need to hardcode shared library paths\n\t      # or/and link against static libraries\n\t      newdependency_libs=\"$deplib $newdependency_libs\"\n\t    fi\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $deplib \"*) func_append specialdeplibs \" $deplib\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $deplib\"\n\t  done # for deplib\n\t  continue\n\tfi # $linkmode = prog...\n\n\tif test \"$linkmode,$pass\" = \"prog,link\"; then\n\t  if test -n \"$library_names\" &&\n\t     { { test \"$prefer_static_libs\" = no ||\n\t         test \"$prefer_static_libs,$installed\" = \"built,yes\"; } ||\n\t       test -z \"$old_library\"; }; then\n\t    # We need to hardcode the library path\n\t    if test -n \"$shlibpath_var\" && test -z \"$avoidtemprpath\" ; then\n\t      # Make sure the rpath contains only unique directories.\n\t      case \"$temp_rpath:\" in\n\t      *\"$absdir:\"*) ;;\n\t      *) func_append temp_rpath \"$absdir:\" ;;\n\t      esac\n\t    fi\n\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi # $linkmode,$pass = prog,link...\n\n\t  if test \"$alldeplibs\" = yes &&\n\t     { test \"$deplibs_check_method\" = pass_all ||\n\t       { test \"$build_libtool_libs\" = yes &&\n\t\t test -n \"$library_names\"; }; }; then\n\t    # We only need to search for static libraries\n\t    continue\n\t  fi\n\tfi\n\n\tlink_static=no # Whether the deplib will be linked statically\n\tuse_static_libs=$prefer_static_libs\n\tif test \"$use_static_libs\" = built && test \"$installed\" = yes; then\n\t  use_static_libs=no\n\tfi\n\tif test -n \"$library_names\" &&\n\t   { test \"$use_static_libs\" = no || test -z \"$old_library\"; }; then\n\t  case $host in\n\t  *cygwin* | *mingw* | *cegcc*)\n\t      # No point in relinking DLLs because paths are not encoded\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=no\n\t    ;;\n\t  *)\n\t    if test \"$installed\" = no; then\n\t      func_append notinst_deplibs \" $lib\"\n\t      need_relink=yes\n\t    fi\n\t    ;;\n\t  esac\n\t  # This is a shared library\n\n\t  # Warn about portability, can't link against -module's on some\n\t  # systems (darwin).  Don't bleat about dlopened modules though!\n\t  dlopenmodule=\"\"\n\t  for dlpremoduletest in $dlprefiles; do\n\t    if test \"X$dlpremoduletest\" = \"X$lib\"; then\n\t      dlopenmodule=\"$dlpremoduletest\"\n\t      break\n\t    fi\n\t  done\n\t  if test -z \"$dlopenmodule\" && test \"$shouldnotlink\" = yes && test \"$pass\" = link; then\n\t    echo\n\t    if test \"$linkmode\" = prog; then\n\t      $ECHO \"*** Warning: Linking the executable $output against the loadable module\"\n\t    else\n\t      $ECHO \"*** Warning: Linking the shared library $output against the loadable module\"\n\t    fi\n\t    $ECHO \"*** $linklib is not portable!\"\n\t  fi\n\t  if test \"$linkmode\" = lib &&\n\t     test \"$hardcode_into_libs\" = yes; then\n\t    # Hardcode the library path.\n\t    # Skip directories that are in the system default run-time\n\t    # search path.\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $absdir \"*) ;;\n\t    *)\n\t      case \"$compile_rpath \" in\n\t      *\" $absdir \"*) ;;\n\t      *) func_append compile_rpath \" $absdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t    case \" $sys_lib_dlsearch_path \" in\n\t    *\" $libdir \"*) ;;\n\t    *)\n\t      case \"$finalize_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append finalize_rpath \" $libdir\" ;;\n\t      esac\n\t      ;;\n\t    esac\n\t  fi\n\n\t  if test -n \"$old_archive_from_expsyms_cmds\"; then\n\t    # figure out the soname\n\t    set dummy $library_names\n\t    shift\n\t    realname=\"$1\"\n\t    shift\n\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t    # use dlname if we got it. it's perfectly good, no?\n\t    if test -n \"$dlname\"; then\n\t      soname=\"$dlname\"\n\t    elif test -n \"$soname_spec\"; then\n\t      # bleh windows\n\t      case $host in\n\t      *cygwin* | mingw* | *cegcc*)\n\t        func_arith $current - $age\n\t\tmajor=$func_arith_result\n\t\tversuffix=\"-$major\"\n\t\t;;\n\t      esac\n\t      eval soname=\\\"$soname_spec\\\"\n\t    else\n\t      soname=\"$realname\"\n\t    fi\n\n\t    # Make a new name for the extract_expsyms_cmds to use\n\t    soroot=\"$soname\"\n\t    func_basename \"$soroot\"\n\t    soname=\"$func_basename_result\"\n\t    func_stripname 'lib' '.dll' \"$soname\"\n\t    newlib=libimp-$func_stripname_result.a\n\n\t    # If the library has no export list, then create one now\n\t    if test -f \"$output_objdir/$soname-def\"; then :\n\t    else\n\t      func_verbose \"extracting exported symbol list from \\`$soname'\"\n\t      func_execute_cmds \"$extract_expsyms_cmds\" 'exit $?'\n\t    fi\n\n\t    # Create $newlib\n\t    if test -f \"$output_objdir/$newlib\"; then :; else\n\t      func_verbose \"generating import library for \\`$soname'\"\n\t      func_execute_cmds \"$old_archive_from_expsyms_cmds\" 'exit $?'\n\t    fi\n\t    # make sure the library variables are pointing to the new library\n\t    dir=$output_objdir\n\t    linklib=$newlib\n\t  fi # test -n \"$old_archive_from_expsyms_cmds\"\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" != relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    lib_linked=yes\n\t    case $hardcode_action in\n\t    immediate | unsupported)\n\t      if test \"$hardcode_direct\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t\tcase $host in\n\t\t  *-*-sco3.2v5.0.[024]*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv4*uw2*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-sysv5OpenUNIX* | *-*-sysv5UnixWare7.[01].[10]* | \\\n\t\t    *-*-unixware7*) add_dir=\"-L$dir\" ;;\n\t\t  *-*-darwin* )\n\t\t    # if the lib is a (non-dlopened) module then we can not\n\t\t    # link against it, someone is ignoring the earlier warnings\n\t\t    if /usr/bin/file -L $add 2> /dev/null |\n\t\t\t $GREP \": [^:]* bundle\" >/dev/null ; then\n\t\t      if test \"X$dlopenmodule\" != \"X$lib\"; then\n\t\t\t$ECHO \"*** Warning: lib $linklib is a module, not a shared library\"\n\t\t\tif test -z \"$old_library\" ; then\n\t\t\t  echo\n\t\t\t  echo \"*** And there doesn't seem to be a static archive available\"\n\t\t\t  echo \"*** The link will probably fail, sorry\"\n\t\t\telse\n\t\t\t  add=\"$dir/$old_library\"\n\t\t\tfi\n\t\t      elif test -n \"$old_library\"; then\n\t\t\tadd=\"$dir/$old_library\"\n\t\t      fi\n\t\t    fi\n\t\tesac\n\t      elif test \"$hardcode_minus_L\" = no; then\n\t\tcase $host in\n\t\t*-*-sunos*) add_shlibpath=\"$dir\" ;;\n\t\tesac\n\t\tadd_dir=\"-L$dir\"\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = no; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    relink)\n\t      if test \"$hardcode_direct\" = yes &&\n\t         test \"$hardcode_direct_absolute\" = no; then\n\t\tadd=\"$dir/$linklib\"\n\t      elif test \"$hardcode_minus_L\" = yes; then\n\t\tadd_dir=\"-L$absdir\"\n\t\t# Try looking first in the location we're being installed to.\n\t\tif test -n \"$inst_prefix_dir\"; then\n\t\t  case $libdir in\n\t\t    [\\\\/]*)\n\t\t      func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t      ;;\n\t\t  esac\n\t\tfi\n\t\tadd=\"-l$name\"\n\t      elif test \"$hardcode_shlibpath_var\" = yes; then\n\t\tadd_shlibpath=\"$dir\"\n\t\tadd=\"-l$name\"\n\t      else\n\t\tlib_linked=no\n\t      fi\n\t      ;;\n\t    *) lib_linked=no ;;\n\t    esac\n\n\t    if test \"$lib_linked\" != yes; then\n\t      func_fatal_configuration \"unsupported hardcode properties\"\n\t    fi\n\n\t    if test -n \"$add_shlibpath\"; then\n\t      case :$compile_shlibpath: in\n\t      *\":$add_shlibpath:\"*) ;;\n\t      *) func_append compile_shlibpath \"$add_shlibpath:\" ;;\n\t      esac\n\t    fi\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && compile_deplibs=\"$add_dir $compile_deplibs\"\n\t      test -n \"$add\" && compile_deplibs=\"$add $compile_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t      if test \"$hardcode_direct\" != yes &&\n\t\t test \"$hardcode_minus_L\" != yes &&\n\t\t test \"$hardcode_shlibpath_var\" = yes; then\n\t\tcase :$finalize_shlibpath: in\n\t\t*\":$libdir:\"*) ;;\n\t\t*) func_append finalize_shlibpath \"$libdir:\" ;;\n\t\tesac\n\t      fi\n\t    fi\n\t  fi\n\n\t  if test \"$linkmode\" = prog || test \"$opt_mode\" = relink; then\n\t    add_shlibpath=\n\t    add_dir=\n\t    add=\n\t    # Finalize command for both is simple: just hardcode it.\n\t    if test \"$hardcode_direct\" = yes &&\n\t       test \"$hardcode_direct_absolute\" = no; then\n\t      add=\"$libdir/$linklib\"\n\t    elif test \"$hardcode_minus_L\" = yes; then\n\t      add_dir=\"-L$libdir\"\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_shlibpath_var\" = yes; then\n\t      case :$finalize_shlibpath: in\n\t      *\":$libdir:\"*) ;;\n\t      *) func_append finalize_shlibpath \"$libdir:\" ;;\n\t      esac\n\t      add=\"-l$name\"\n\t    elif test \"$hardcode_automatic\" = yes; then\n\t      if test -n \"$inst_prefix_dir\" &&\n\t\t test -f \"$inst_prefix_dir$libdir/$linklib\" ; then\n\t\tadd=\"$inst_prefix_dir$libdir/$linklib\"\n\t      else\n\t\tadd=\"$libdir/$linklib\"\n\t      fi\n\t    else\n\t      # We cannot seem to hardcode it, guess we'll fake it.\n\t      add_dir=\"-L$libdir\"\n\t      # Try looking first in the location we're being installed to.\n\t      if test -n \"$inst_prefix_dir\"; then\n\t\tcase $libdir in\n\t\t  [\\\\/]*)\n\t\t    func_append add_dir \" -L$inst_prefix_dir$libdir\"\n\t\t    ;;\n\t\tesac\n\t      fi\n\t      add=\"-l$name\"\n\t    fi\n\n\t    if test \"$linkmode\" = prog; then\n\t      test -n \"$add_dir\" && finalize_deplibs=\"$add_dir $finalize_deplibs\"\n\t      test -n \"$add\" && finalize_deplibs=\"$add $finalize_deplibs\"\n\t    else\n\t      test -n \"$add_dir\" && deplibs=\"$add_dir $deplibs\"\n\t      test -n \"$add\" && deplibs=\"$add $deplibs\"\n\t    fi\n\t  fi\n\telif test \"$linkmode\" = prog; then\n\t  # Here we assume that one of hardcode_direct or hardcode_minus_L\n\t  # is not unsupported.  This is valid on all known static and\n\t  # shared platforms.\n\t  if test \"$hardcode_direct\" != unsupported; then\n\t    test -n \"$old_library\" && linklib=\"$old_library\"\n\t    compile_deplibs=\"$dir/$linklib $compile_deplibs\"\n\t    finalize_deplibs=\"$dir/$linklib $finalize_deplibs\"\n\t  else\n\t    compile_deplibs=\"-l$name -L$dir $compile_deplibs\"\n\t    finalize_deplibs=\"-l$name -L$dir $finalize_deplibs\"\n\t  fi\n\telif test \"$build_libtool_libs\" = yes; then\n\t  # Not a shared library\n\t  if test \"$deplibs_check_method\" != pass_all; then\n\t    # We're trying link a shared library against a static one\n\t    # but the system doesn't support it.\n\n\t    # Just print a warning and add the library to dependency_libs so\n\t    # that the program can be linked against the static library.\n\t    echo\n\t    $ECHO \"*** Warning: This system can not link to static lib archive $lib.\"\n\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t    echo \"*** shared version of the library, which you do not appear to have.\"\n\t    if test \"$module\" = yes; then\n\t      echo \"*** But as you try to build a module library, libtool will still create \"\n\t      echo \"*** a static module, that should work as long as the dlopening application\"\n\t      echo \"*** is linked with the -dlopen flag to resolve symbols at runtime.\"\n\t      if test -z \"$global_symbol_pipe\"; then\n\t\techo\n\t\techo \"*** However, this would only work if libtool was able to extract symbol\"\n\t\techo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t\techo \"*** not find such a program.  So, this module is probably useless.\"\n\t\techo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t      fi\n\t      if test \"$build_old_libs\" = no; then\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  else\n\t    deplibs=\"$dir/$old_library $deplibs\"\n\t    link_static=yes\n\t  fi\n\tfi # link shared/static library?\n\n\tif test \"$linkmode\" = lib; then\n\t  if test -n \"$dependency_libs\" &&\n\t     { test \"$hardcode_into_libs\" != yes ||\n\t       test \"$build_old_libs\" = yes ||\n\t       test \"$link_static\" = yes; }; then\n\t    # Extract -R from dependency_libs\n\t    temp_deplibs=\n\t    for libdir in $dependency_libs; do\n\t      case $libdir in\n\t      -R*) func_stripname '-R' '' \"$libdir\"\n\t           temp_xrpath=$func_stripname_result\n\t\t   case \" $xrpath \" in\n\t\t   *\" $temp_xrpath \"*) ;;\n\t\t   *) func_append xrpath \" $temp_xrpath\";;\n\t\t   esac;;\n\t      *) func_append temp_deplibs \" $libdir\";;\n\t      esac\n\t    done\n\t    dependency_libs=\"$temp_deplibs\"\n\t  fi\n\n\t  func_append newlib_search_path \" $absdir\"\n\t  # Link against this library\n\t  test \"$link_static\" = no && newdependency_libs=\"$abs_ladir/$laname $newdependency_libs\"\n\t  # ... and its dependency_libs\n\t  tmp_libs=\n\t  for deplib in $dependency_libs; do\n\t    newdependency_libs=\"$deplib $newdependency_libs\"\n\t    case $deplib in\n              -L*) func_stripname '-L' '' \"$deplib\"\n                   func_resolve_sysroot \"$func_stripname_result\";;\n              *) func_resolve_sysroot \"$deplib\" ;;\n            esac\n\t    if $opt_preserve_dup_deps ; then\n\t      case \"$tmp_libs \" in\n\t      *\" $func_resolve_sysroot_result \"*)\n                func_append specialdeplibs \" $func_resolve_sysroot_result\" ;;\n\t      esac\n\t    fi\n\t    func_append tmp_libs \" $func_resolve_sysroot_result\"\n\t  done\n\n\t  if test \"$link_all_deplibs\" != no; then\n\t    # Add the search paths of all dependency libraries\n\t    for deplib in $dependency_libs; do\n\t      path=\n\t      case $deplib in\n\t      -L*) path=\"$deplib\" ;;\n\t      *.la)\n\t        func_resolve_sysroot \"$deplib\"\n\t        deplib=$func_resolve_sysroot_result\n\t        func_dirname \"$deplib\" \"\" \".\"\n\t\tdir=$func_dirname_result\n\t\t# We need an absolute path.\n\t\tcase $dir in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) absdir=\"$dir\" ;;\n\t\t*)\n\t\t  absdir=`cd \"$dir\" && pwd`\n\t\t  if test -z \"$absdir\"; then\n\t\t    func_warning \"cannot determine absolute directory name of \\`$dir'\"\n\t\t    absdir=\"$dir\"\n\t\t  fi\n\t\t  ;;\n\t\tesac\n\t\tif $GREP \"^installed=no\" $deplib > /dev/null; then\n\t\tcase $host in\n\t\t*-*-darwin*)\n\t\t  depdepl=\n\t\t  eval deplibrary_names=`${SED} -n -e 's/^library_names=\\(.*\\)$/\\1/p' $deplib`\n\t\t  if test -n \"$deplibrary_names\" ; then\n\t\t    for tmp in $deplibrary_names ; do\n\t\t      depdepl=$tmp\n\t\t    done\n\t\t    if test -f \"$absdir/$objdir/$depdepl\" ; then\n\t\t      depdepl=\"$absdir/$objdir/$depdepl\"\n\t\t      darwin_install_name=`${OTOOL} -L $depdepl | awk '{if (NR == 2) {print $1;exit}}'`\n                      if test -z \"$darwin_install_name\"; then\n                          darwin_install_name=`${OTOOL64} -L $depdepl  | awk '{if (NR == 2) {print $1;exit}}'`\n                      fi\n\t\t      func_append compiler_flags \" ${wl}-dylib_file ${wl}${darwin_install_name}:${depdepl}\"\n\t\t      func_append linker_flags \" -dylib_file ${darwin_install_name}:${depdepl}\"\n\t\t      path=\n\t\t    fi\n\t\t  fi\n\t\t  ;;\n\t\t*)\n\t\t  path=\"-L$absdir/$objdir\"\n\t\t  ;;\n\t\tesac\n\t\telse\n\t\t  eval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $deplib`\n\t\t  test -z \"$libdir\" && \\\n\t\t    func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\t  test \"$absdir\" != \"$libdir\" && \\\n\t\t    func_warning \"\\`$deplib' seems to be moved\"\n\n\t\t  path=\"-L$absdir\"\n\t\tfi\n\t\t;;\n\t      esac\n\t      case \" $deplibs \" in\n\t      *\" $path \"*) ;;\n\t      *) deplibs=\"$path $deplibs\" ;;\n\t      esac\n\t    done\n\t  fi # link_all_deplibs != no\n\tfi # linkmode = lib\n      done # for deplib in $libs\n      if test \"$pass\" = link; then\n\tif test \"$linkmode\" = \"prog\"; then\n\t  compile_deplibs=\"$new_inherited_linker_flags $compile_deplibs\"\n\t  finalize_deplibs=\"$new_inherited_linker_flags $finalize_deplibs\"\n\telse\n\t  compiler_flags=\"$compiler_flags \"`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfi\n      fi\n      dependency_libs=\"$newdependency_libs\"\n      if test \"$pass\" = dlpreopen; then\n\t# Link the dlpreopened libraries before other libraries\n\tfor deplib in $save_deplibs; do\n\t  deplibs=\"$deplib $deplibs\"\n\tdone\n      fi\n      if test \"$pass\" != dlopen; then\n\tif test \"$pass\" != conv; then\n\t  # Make sure lib_search_path contains only unique directories.\n\t  lib_search_path=\n\t  for dir in $newlib_search_path; do\n\t    case \"$lib_search_path \" in\n\t    *\" $dir \"*) ;;\n\t    *) func_append lib_search_path \" $dir\" ;;\n\t    esac\n\t  done\n\t  newlib_search_path=\n\tfi\n\n\tif test \"$linkmode,$pass\" != \"prog,link\"; then\n\t  vars=\"deplibs\"\n\telse\n\t  vars=\"compile_deplibs finalize_deplibs\"\n\tfi\n\tfor var in $vars dependency_libs; do\n\t  # Add libraries to $var in reverse order\n\t  eval tmp_libs=\\\"\\$$var\\\"\n\t  new_libs=\n\t  for deplib in $tmp_libs; do\n\t    # FIXME: Pedantically, this is the right thing to do, so\n\t    #        that some nasty dependency loop isn't accidentally\n\t    #        broken:\n\t    #new_libs=\"$deplib $new_libs\"\n\t    # Pragmatically, this seems to cause very few problems in\n\t    # practice:\n\t    case $deplib in\n\t    -L*) new_libs=\"$deplib $new_libs\" ;;\n\t    -R*) ;;\n\t    *)\n\t      # And here is the reason: when a library appears more\n\t      # than once as an explicit dependence of a library, or\n\t      # is implicitly linked in more than once by the\n\t      # compiler, it is considered special, and multiple\n\t      # occurrences thereof are not removed.  Compare this\n\t      # with having the same library being listed as a\n\t      # dependency of multiple other libraries: in this case,\n\t      # we know (pedantically, we assume) the library does not\n\t      # need to be listed more than once, so we keep only the\n\t      # last copy.  This is not always right, but it is rare\n\t      # enough that we require users that really mean to play\n\t      # such unportable linking tricks to link the library\n\t      # using -Wl,-lname, so that libtool does not consider it\n\t      # for duplicate removal.\n\t      case \" $specialdeplibs \" in\n\t      *\" $deplib \"*) new_libs=\"$deplib $new_libs\" ;;\n\t      *)\n\t\tcase \" $new_libs \" in\n\t\t*\" $deplib \"*) ;;\n\t\t*) new_libs=\"$deplib $new_libs\" ;;\n\t\tesac\n\t\t;;\n\t      esac\n\t      ;;\n\t    esac\n\t  done\n\t  tmp_libs=\n\t  for deplib in $new_libs; do\n\t    case $deplib in\n\t    -L*)\n\t      case \" $tmp_libs \" in\n\t      *\" $deplib \"*) ;;\n\t      *) func_append tmp_libs \" $deplib\" ;;\n\t      esac\n\t      ;;\n\t    *) func_append tmp_libs \" $deplib\" ;;\n\t    esac\n\t  done\n\t  eval $var=\\\"$tmp_libs\\\"\n\tdone # for var\n      fi\n      # Last step: remove runtime libs from dependency_libs\n      # (they stay in deplibs)\n      tmp_libs=\n      for i in $dependency_libs ; do\n\tcase \" $predeps $postdeps $compiler_lib_search_path \" in\n\t*\" $i \"*)\n\t  i=\"\"\n\t  ;;\n\tesac\n\tif test -n \"$i\" ; then\n\t  func_append tmp_libs \" $i\"\n\tfi\n      done\n      dependency_libs=$tmp_libs\n    done # for pass\n    if test \"$linkmode\" = prog; then\n      dlfiles=\"$newdlfiles\"\n    fi\n    if test \"$linkmode\" = prog || test \"$linkmode\" = lib; then\n      dlprefiles=\"$newdlprefiles\"\n    fi\n\n    case $linkmode in\n    oldlib)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for archives\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for archives\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for archives\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for archives\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info/-version-number' is ignored for archives\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for archives\"\n\n      test -n \"$export_symbols$export_symbols_regex\" && \\\n\tfunc_warning \"\\`-export-symbols' is ignored for archives\"\n\n      # Now set the variables for building old libraries.\n      build_libtool_libs=no\n      oldlibs=\"$output\"\n      func_append objs \"$old_deplibs\"\n      ;;\n\n    lib)\n      # Make sure we only generate libraries of the form `libNAME.la'.\n      case $outputname in\n      lib*)\n\tfunc_stripname 'lib' '.la' \"$outputname\"\n\tname=$func_stripname_result\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval libname=\\\"$libname_spec\\\"\n\t;;\n      *)\n\ttest \"$module\" = no && \\\n\t  func_fatal_help \"libtool library \\`$output' must begin with \\`lib'\"\n\n\tif test \"$need_lib_prefix\" != no; then\n\t  # Add the \"lib\" prefix for modules if required\n\t  func_stripname '' '.la' \"$outputname\"\n\t  name=$func_stripname_result\n\t  eval shared_ext=\\\"$shrext_cmds\\\"\n\t  eval libname=\\\"$libname_spec\\\"\n\telse\n\t  func_stripname '' '.la' \"$outputname\"\n\t  libname=$func_stripname_result\n\tfi\n\t;;\n      esac\n\n      if test -n \"$objs\"; then\n\tif test \"$deplibs_check_method\" != pass_all; then\n\t  func_fatal_error \"cannot build libtool library \\`$output' from non-libtool objects on this host:$objs\"\n\telse\n\t  echo\n\t  $ECHO \"*** Warning: Linking the shared library $output against the non-libtool\"\n\t  $ECHO \"*** objects $objs is not portable!\"\n\t  func_append libobjs \" $objs\"\n\tfi\n      fi\n\n      test \"$dlself\" != no && \\\n\tfunc_warning \"\\`-dlopen self' is ignored for libtool libraries\"\n\n      set dummy $rpath\n      shift\n      test \"$#\" -gt 1 && \\\n\tfunc_warning \"ignoring multiple \\`-rpath's for a libtool library\"\n\n      install_libdir=\"$1\"\n\n      oldlibs=\n      if test -z \"$rpath\"; then\n\tif test \"$build_libtool_libs\" = yes; then\n\t  # Building a libtool convenience library.\n\t  # Some compilers have problems with a `.al' extension so\n\t  # convenience libraries should have the same extension an\n\t  # archive normally would.\n\t  oldlibs=\"$output_objdir/$libname.$libext $oldlibs\"\n\t  build_libtool_libs=convenience\n\t  build_old_libs=yes\n\tfi\n\n\ttest -n \"$vinfo\" && \\\n\t  func_warning \"\\`-version-info/-version-number' is ignored for convenience libraries\"\n\n\ttest -n \"$release\" && \\\n\t  func_warning \"\\`-release' is ignored for convenience libraries\"\n      else\n\n\t# Parse the version information argument.\n\tsave_ifs=\"$IFS\"; IFS=':'\n\tset dummy $vinfo 0 0 0\n\tshift\n\tIFS=\"$save_ifs\"\n\n\ttest -n \"$7\" && \\\n\t  func_fatal_help \"too many parameters to \\`-version-info'\"\n\n\t# convert absolute version numbers to libtool ages\n\t# this retains compatibility with .la files and attempts\n\t# to make the code below a bit more comprehensible\n\n\tcase $vinfo_number in\n\tyes)\n\t  number_major=\"$1\"\n\t  number_minor=\"$2\"\n\t  number_revision=\"$3\"\n\t  #\n\t  # There are really only two kinds -- those that\n\t  # use the current revision as the major version\n\t  # and those that subtract age and use age as\n\t  # a minor version.  But, then there is irix\n\t  # which has an extra 1 added just for fun\n\t  #\n\t  case $version_type in\n\t  # correct linux to gnu/linux during the next big refactor\n\t  darwin|linux|osf|windows|none)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_revision\"\n\t    ;;\n\t  freebsd-aout|freebsd-elf|qnx|sunos)\n\t    current=\"$number_major\"\n\t    revision=\"$number_minor\"\n\t    age=\"0\"\n\t    ;;\n\t  irix|nonstopux)\n\t    func_arith $number_major + $number_minor\n\t    current=$func_arith_result\n\t    age=\"$number_minor\"\n\t    revision=\"$number_minor\"\n\t    lt_irix_increment=no\n\t    ;;\n\t  *)\n\t    func_fatal_configuration \"$modename: unknown library version type \\`$version_type'\"\n\t    ;;\n\t  esac\n\t  ;;\n\tno)\n\t  current=\"$1\"\n\t  revision=\"$2\"\n\t  age=\"$3\"\n\t  ;;\n\tesac\n\n\t# Check that each of the things are valid numbers.\n\tcase $current in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"CURRENT \\`$current' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $revision in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"REVISION \\`$revision' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tcase $age in\n\t0|[1-9]|[1-9][0-9]|[1-9][0-9][0-9]|[1-9][0-9][0-9][0-9]|[1-9][0-9][0-9][0-9][0-9]) ;;\n\t*)\n\t  func_error \"AGE \\`$age' must be a nonnegative integer\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\t  ;;\n\tesac\n\n\tif test \"$age\" -gt \"$current\"; then\n\t  func_error \"AGE \\`$age' is greater than the current interface number \\`$current'\"\n\t  func_fatal_error \"\\`$vinfo' is not valid version information\"\n\tfi\n\n\t# Calculate the version variables.\n\tmajor=\n\tversuffix=\n\tverstring=\n\tcase $version_type in\n\tnone) ;;\n\n\tdarwin)\n\t  # Like Linux, but with the current version available in\n\t  # verstring for coding it into the library header\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  # Darwin ld doesn't like 0 for these options...\n\t  func_arith $current + 1\n\t  minor_current=$func_arith_result\n\t  xlcverstring=\"${wl}-compatibility_version ${wl}$minor_current ${wl}-current_version ${wl}$minor_current.$revision\"\n\t  verstring=\"-compatibility_version $minor_current -current_version $minor_current.$revision\"\n\t  ;;\n\n\tfreebsd-aout)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\";\n\t  ;;\n\n\tfreebsd-elf)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tirix | nonstopux)\n\t  if test \"X$lt_irix_increment\" = \"Xno\"; then\n\t    func_arith $current - $age\n\t  else\n\t    func_arith $current - $age + 1\n\t  fi\n\t  major=$func_arith_result\n\n\t  case $version_type in\n\t    nonstopux) verstring_prefix=nonstopux ;;\n\t    *)         verstring_prefix=sgi ;;\n\t  esac\n\t  verstring=\"$verstring_prefix$major.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$revision\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $revision - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring_prefix$major.$iface:$verstring\"\n\t  done\n\n\t  # Before this point, $major must not contain `.'.\n\t  major=.$major\n\t  versuffix=\"$major.$revision\"\n\t  ;;\n\n\tlinux) # correct to gnu/linux during the next big refactor\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\"$major.$age.$revision\"\n\t  ;;\n\n\tosf)\n\t  func_arith $current - $age\n\t  major=.$func_arith_result\n\t  versuffix=\".$current.$age.$revision\"\n\t  verstring=\"$current.$age.$revision\"\n\n\t  # Add in all the interfaces that we are compatible with.\n\t  loop=$age\n\t  while test \"$loop\" -ne 0; do\n\t    func_arith $current - $loop\n\t    iface=$func_arith_result\n\t    func_arith $loop - 1\n\t    loop=$func_arith_result\n\t    verstring=\"$verstring:${iface}.0\"\n\t  done\n\n\t  # Make executables depend on our current version.\n\t  func_append verstring \":${current}.0\"\n\t  ;;\n\n\tqnx)\n\t  major=\".$current\"\n\t  versuffix=\".$current\"\n\t  ;;\n\n\tsunos)\n\t  major=\".$current\"\n\t  versuffix=\".$current.$revision\"\n\t  ;;\n\n\twindows)\n\t  # Use '-' rather than '.', since we only want one\n\t  # extension on DOS 8.3 filesystems.\n\t  func_arith $current - $age\n\t  major=$func_arith_result\n\t  versuffix=\"-$major\"\n\t  ;;\n\n\t*)\n\t  func_fatal_configuration \"unknown library version type \\`$version_type'\"\n\t  ;;\n\tesac\n\n\t# Clear the version info if we defaulted, and they specified a release.\n\tif test -z \"$vinfo\" && test -n \"$release\"; then\n\t  major=\n\t  case $version_type in\n\t  darwin)\n\t    # we can't check for \"0.0\" in archive_cmds due to quoting\n\t    # problems, so we reset it completely\n\t    verstring=\n\t    ;;\n\t  *)\n\t    verstring=\"0.0\"\n\t    ;;\n\t  esac\n\t  if test \"$need_version\" = no; then\n\t    versuffix=\n\t  else\n\t    versuffix=\".0.0\"\n\t  fi\n\tfi\n\n\t# Remove version info from name if versioning should be avoided\n\tif test \"$avoid_version\" = yes && test \"$need_version\" = no; then\n\t  major=\n\t  versuffix=\n\t  verstring=\"\"\n\tfi\n\n\t# Check to see if the archive will have undefined symbols.\n\tif test \"$allow_undefined\" = yes; then\n\t  if test \"$allow_undefined_flag\" = unsupported; then\n\t    func_warning \"undefined symbols not allowed in $host shared libraries\"\n\t    build_libtool_libs=no\n\t    build_old_libs=yes\n\t  fi\n\telse\n\t  # Don't allow undefined symbols.\n\t  allow_undefined_flag=\"$no_undefined_flag\"\n\tfi\n\n      fi\n\n      func_generate_dlsyms \"$libname\" \"$libname\" \"yes\"\n      func_append libobjs \" $symfileobj\"\n      test \"X$libobjs\" = \"X \" && libobjs=\n\n      if test \"$opt_mode\" != relink; then\n\t# Remove our outputs, but don't remove object files since they\n\t# may have been created when compiling PIC objects.\n\tremovelist=\n\ttempremovelist=`$ECHO \"$output_objdir/*\"`\n\tfor p in $tempremovelist; do\n\t  case $p in\n\t    *.$objext | *.gcno)\n\t       ;;\n\t    $output_objdir/$outputname | $output_objdir/$libname.* | $output_objdir/${libname}${release}.*)\n\t       if test \"X$precious_files_regex\" != \"X\"; then\n\t\t if $ECHO \"$p\" | $EGREP -e \"$precious_files_regex\" >/dev/null 2>&1\n\t\t then\n\t\t   continue\n\t\t fi\n\t       fi\n\t       func_append removelist \" $p\"\n\t       ;;\n\t    *) ;;\n\t  esac\n\tdone\n\ttest -n \"$removelist\" && \\\n\t  func_show_eval \"${RM}r \\$removelist\"\n      fi\n\n      # Now set the variables for building old libraries.\n      if test \"$build_old_libs\" = yes && test \"$build_libtool_libs\" != convenience ; then\n\tfunc_append oldlibs \" $output_objdir/$libname.$libext\"\n\n\t# Transform .lo files to .o files.\n\toldobjs=\"$objs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; $lo2o\" | $NL2SP`\n      fi\n\n      # Eliminate all temporary directories.\n      #for path in $notinst_path; do\n      #\tlib_search_path=`$ECHO \"$lib_search_path \" | $SED \"s% $path % %g\"`\n      #\tdeplibs=`$ECHO \"$deplibs \" | $SED \"s% -L$path % %g\"`\n      #\tdependency_libs=`$ECHO \"$dependency_libs \" | $SED \"s% -L$path % %g\"`\n      #done\n\n      if test -n \"$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\ttemp_xrpath=\n\tfor libdir in $xrpath; do\n\t  func_replace_sysroot \"$libdir\"\n\t  func_append temp_xrpath \" -R$func_replace_sysroot_result\"\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n\tif test \"$hardcode_into_libs\" != yes || test \"$build_old_libs\" = yes; then\n\t  dependency_libs=\"$temp_xrpath $dependency_libs\"\n\tfi\n      fi\n\n      # Make sure dlfiles contains only unique files that won't be dlpreopened\n      old_dlfiles=\"$dlfiles\"\n      dlfiles=\n      for lib in $old_dlfiles; do\n\tcase \" $dlprefiles $dlfiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlfiles \" $lib\" ;;\n\tesac\n      done\n\n      # Make sure dlprefiles contains only unique files\n      old_dlprefiles=\"$dlprefiles\"\n      dlprefiles=\n      for lib in $old_dlprefiles; do\n\tcase \"$dlprefiles \" in\n\t*\" $lib \"*) ;;\n\t*) func_append dlprefiles \" $lib\" ;;\n\tesac\n      done\n\n      if test \"$build_libtool_libs\" = yes; then\n\tif test -n \"$rpath\"; then\n\t  case $host in\n\t  *-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-*-beos* | *-cegcc* | *-*-haiku*)\n\t    # these systems don't actually have a c library (as such)!\n\t    ;;\n\t  *-*-rhapsody* | *-*-darwin1.[012])\n\t    # Rhapsody C library is in the System framework\n\t    func_append deplibs \" System.ltframework\"\n\t    ;;\n\t  *-*-netbsd*)\n\t    # Don't link with libc until the a.out ld.so is fixed.\n\t    ;;\n\t  *-*-openbsd* | *-*-freebsd* | *-*-dragonfly*)\n\t    # Do not include libc due to us having libc/libc_r.\n\t    ;;\n\t  *-*-sco3.2v5* | *-*-sco5v6*)\n\t    # Causes problems with __ctype\n\t    ;;\n\t  *-*-sysv4.2uw2* | *-*-sysv5* | *-*-unixware* | *-*-OpenUNIX*)\n\t    # Compiler inserts libc in the correct place for threads to work\n\t    ;;\n\t  *)\n\t    # Add libc to deplibs on all other systems if necessary.\n\t    if test \"$build_libtool_need_lc\" = \"yes\"; then\n\t      func_append deplibs \" -lc\"\n\t    fi\n\t    ;;\n\t  esac\n\tfi\n\n\t# Transform deplibs into only deplibs that can be linked in shared.\n\tname_save=$name\n\tlibname_save=$libname\n\trelease_save=$release\n\tversuffix_save=$versuffix\n\tmajor_save=$major\n\t# I'm not sure if I'm treating the release correctly.  I think\n\t# release should show up in the -l (ie -lgmp5) so we don't want to\n\t# add it in twice.  Is that correct?\n\trelease=\"\"\n\tversuffix=\"\"\n\tmajor=\"\"\n\tnewdeplibs=\n\tdroppeddeps=no\n\tcase $deplibs_check_method in\n\tpass_all)\n\t  # Don't check for shared/static.  Everything works.\n\t  # This might be a little naive.  We might want to check\n\t  # whether the library exists or not.  But this is on\n\t  # osf3 & osf4 and I'm not really sure... Just\n\t  # implementing what was already the behavior.\n\t  newdeplibs=$deplibs\n\t  ;;\n\ttest_compile)\n\t  # This code stresses the \"libraries are programs\" paradigm to its\n\t  # limits. Maybe even breaks it.  We compile a program, linking it\n\t  # against the deplibs as a proxy for the library.  Then we can check\n\t  # whether they linked in statically or dynamically with ldd.\n\t  $opt_dry_run || $RM conftest.c\n\t  cat > conftest.c <<EOF\n\t  int main() { return 0; }\nEOF\n\t  $opt_dry_run || $RM conftest\n\t  if $LTCC $LTCFLAGS -o conftest conftest.c $deplibs; then\n\t    ldd_output=`ldd conftest`\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\tif test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t  case \" $predeps $postdeps \" in\n\t\t  *\" $i \"*)\n\t\t    func_append newdeplibs \" $i\"\n\t\t    i=\"\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t\tif test -n \"$i\" ; then\n\t\t  libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t  deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t  set dummy $deplib_matches; shift\n\t\t  deplib_match=$1\n\t\t  if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t    func_append newdeplibs \" $i\"\n\t\t  else\n\t\t    droppeddeps=yes\n\t\t    echo\n\t\t    $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t    echo \"*** I have the capability to make that library automatically link in when\"\n\t\t    echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t    echo \"*** shared version of the library, which I believe you do not have\"\n\t\t    echo \"*** because a test_compile did reveal that the linker did not use it for\"\n\t\t    echo \"*** its dynamic dependency list that programs get resolved with at runtime.\"\n\t\t  fi\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  else\n\t    # Error occurred in the first compile.  Let's try to salvage\n\t    # the situation: Compile a separate program for each library.\n\t    for i in $deplibs; do\n\t      case $i in\n\t      -l*)\n\t\tfunc_stripname -l '' \"$i\"\n\t\tname=$func_stripname_result\n\t\t$opt_dry_run || $RM conftest\n\t\tif $LTCC $LTCFLAGS -o conftest conftest.c $i; then\n\t\t  ldd_output=`ldd conftest`\n\t\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\t    case \" $predeps $postdeps \" in\n\t\t    *\" $i \"*)\n\t\t      func_append newdeplibs \" $i\"\n\t\t      i=\"\"\n\t\t      ;;\n\t\t    esac\n\t\t  fi\n\t\t  if test -n \"$i\" ; then\n\t\t    libname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\t    deplib_matches=`eval \"\\\\$ECHO \\\"$library_names_spec\\\"\"`\n\t\t    set dummy $deplib_matches; shift\n\t\t    deplib_match=$1\n\t\t    if test `expr \"$ldd_output\" : \".*$deplib_match\"` -ne 0 ; then\n\t\t      func_append newdeplibs \" $i\"\n\t\t    else\n\t\t      droppeddeps=yes\n\t\t      echo\n\t\t      $ECHO \"*** Warning: dynamic linker does not accept needed library $i.\"\n\t\t      echo \"*** I have the capability to make that library automatically link in when\"\n\t\t      echo \"*** you link to this library.  But I can only do this if you have a\"\n\t\t      echo \"*** shared version of the library, which you do not appear to have\"\n\t\t      echo \"*** because a test_compile did reveal that the linker did not use this one\"\n\t\t      echo \"*** as a dynamic dependency that programs can get resolved with at runtime.\"\n\t\t    fi\n\t\t  fi\n\t\telse\n\t\t  droppeddeps=yes\n\t\t  echo\n\t\t  $ECHO \"*** Warning!  Library $i is needed by this library but I was not able to\"\n\t\t  echo \"*** make it link in!  You will probably need to install it or some\"\n\t\t  echo \"*** library that it depends on before this library will be fully\"\n\t\t  echo \"*** functional.  Installing it before continuing would be even better.\"\n\t\tfi\n\t\t;;\n\t      *)\n\t\tfunc_append newdeplibs \" $i\"\n\t\t;;\n\t      esac\n\t    done\n\t  fi\n\t  ;;\n\tfile_magic*)\n\t  set dummy $deplibs_check_method; shift\n\t  file_magic_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tif test -n \"$file_magic_glob\"; then\n\t\t  libnameglob=`func_echo_all \"$libname\" | $SED -e $file_magic_glob`\n\t\telse\n\t\t  libnameglob=$libname\n\t\tfi\n\t\ttest \"$want_nocaseglob\" = yes && nocaseglob=`shopt -p nocaseglob`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  if test \"$want_nocaseglob\" = yes; then\n\t\t    shopt -s nocaseglob\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t    $nocaseglob\n\t\t  else\n\t\t    potential_libs=`ls $i/$libnameglob[.-]* 2>/dev/null`\n\t\t  fi\n\t\t  for potent_lib in $potential_libs; do\n\t\t      # Follow soft links.\n\t\t      if ls -lLd \"$potent_lib\" 2>/dev/null |\n\t\t\t $GREP \" -> \" >/dev/null; then\n\t\t\tcontinue\n\t\t      fi\n\t\t      # The statement above tries to avoid entering an\n\t\t      # endless loop below, in case of cyclic links.\n\t\t      # We might still enter an endless loop, since a link\n\t\t      # loop can be closed while we follow links,\n\t\t      # but so what?\n\t\t      potlib=\"$potent_lib\"\n\t\t      while test -h \"$potlib\" 2>/dev/null; do\n\t\t\tpotliblink=`ls -ld $potlib | ${SED} 's/.* -> //'`\n\t\t\tcase $potliblink in\n\t\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) potlib=\"$potliblink\";;\n\t\t\t*) potlib=`$ECHO \"$potlib\" | $SED 's,[^/]*$,,'`\"$potliblink\";;\n\t\t\tesac\n\t\t      done\n\t\t      if eval $file_magic_cmd \\\"\\$potlib\\\" 2>/dev/null |\n\t\t\t $SED -e 10q |\n\t\t\t $EGREP \"$file_magic_regex\" > /dev/null; then\n\t\t\tfunc_append newdeplibs \" $a_deplib\"\n\t\t\ta_deplib=\"\"\n\t\t\tbreak 2\n\t\t      fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for file magic test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a file magic. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tmatch_pattern*)\n\t  set dummy $deplibs_check_method; shift\n\t  match_pattern_regex=`expr \"$deplibs_check_method\" : \"$1 \\(.*\\)\"`\n\t  for a_deplib in $deplibs; do\n\t    case $a_deplib in\n\t    -l*)\n\t      func_stripname -l '' \"$a_deplib\"\n\t      name=$func_stripname_result\n\t      if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t\tcase \" $predeps $postdeps \" in\n\t\t*\" $a_deplib \"*)\n\t\t  func_append newdeplibs \" $a_deplib\"\n\t\t  a_deplib=\"\"\n\t\t  ;;\n\t\tesac\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tlibname=`eval \"\\\\$ECHO \\\"$libname_spec\\\"\"`\n\t\tfor i in $lib_search_path $sys_lib_search_path $shlib_search_path; do\n\t\t  potential_libs=`ls $i/$libname[.-]* 2>/dev/null`\n\t\t  for potent_lib in $potential_libs; do\n\t\t    potlib=\"$potent_lib\" # see symlink-check above in file_magic test\n\t\t    if eval \"\\$ECHO \\\"$potent_lib\\\"\" 2>/dev/null | $SED 10q | \\\n\t\t       $EGREP \"$match_pattern_regex\" > /dev/null; then\n\t\t      func_append newdeplibs \" $a_deplib\"\n\t\t      a_deplib=\"\"\n\t\t      break 2\n\t\t    fi\n\t\t  done\n\t\tdone\n\t      fi\n\t      if test -n \"$a_deplib\" ; then\n\t\tdroppeddeps=yes\n\t\techo\n\t\t$ECHO \"*** Warning: linker path does not have real file for library $a_deplib.\"\n\t\techo \"*** I have the capability to make that library automatically link in when\"\n\t\techo \"*** you link to this library.  But I can only do this if you have a\"\n\t\techo \"*** shared version of the library, which you do not appear to have\"\n\t\techo \"*** because I did check the linker path looking for a file starting\"\n\t\tif test -z \"$potlib\" ; then\n\t\t  $ECHO \"*** with $libname but no candidates were found. (...for regex pattern test)\"\n\t\telse\n\t\t  $ECHO \"*** with $libname and none of the candidates passed a file format test\"\n\t\t  $ECHO \"*** using a regex pattern. Last file checked: $potlib\"\n\t\tfi\n\t      fi\n\t      ;;\n\t    *)\n\t      # Add a -L argument.\n\t      func_append newdeplibs \" $a_deplib\"\n\t      ;;\n\t    esac\n\t  done # Gone through all deplibs.\n\t  ;;\n\tnone | unknown | *)\n\t  newdeplibs=\"\"\n\t  tmp_deplibs=`$ECHO \" $deplibs\" | $SED 's/ -lc$//; s/ -[LR][^ ]*//g'`\n\t  if test \"X$allow_libtool_libs_with_static_runtimes\" = \"Xyes\" ; then\n\t    for i in $predeps $postdeps ; do\n\t      # can't use Xsed below, because $i might contain '/'\n\t      tmp_deplibs=`$ECHO \" $tmp_deplibs\" | $SED \"s,$i,,\"`\n\t    done\n\t  fi\n\t  case $tmp_deplibs in\n\t  *[!\\\t\\ ]*)\n\t    echo\n\t    if test \"X$deplibs_check_method\" = \"Xnone\"; then\n\t      echo \"*** Warning: inter-library dependencies are not supported in this platform.\"\n\t    else\n\t      echo \"*** Warning: inter-library dependencies are not known to be supported.\"\n\t    fi\n\t    echo \"*** All declared inter-library dependencies are being dropped.\"\n\t    droppeddeps=yes\n\t    ;;\n\t  esac\n\t  ;;\n\tesac\n\tversuffix=$versuffix_save\n\tmajor=$major_save\n\trelease=$release_save\n\tlibname=$libname_save\n\tname=$name_save\n\n\tcase $host in\n\t*-*-rhapsody* | *-*-darwin1.[012])\n\t  # On Rhapsody replace the C library with the System framework\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t  ;;\n\tesac\n\n\tif test \"$droppeddeps\" = yes; then\n\t  if test \"$module\" = yes; then\n\t    echo\n\t    echo \"*** Warning: libtool could not satisfy all declared inter-library\"\n\t    $ECHO \"*** dependencies of module $libname.  Therefore, libtool will create\"\n\t    echo \"*** a static module, that should work as long as the dlopening\"\n\t    echo \"*** application is linked with the -dlopen flag.\"\n\t    if test -z \"$global_symbol_pipe\"; then\n\t      echo\n\t      echo \"*** However, this would only work if libtool was able to extract symbol\"\n\t      echo \"*** lists from a program, using \\`nm' or equivalent, but libtool could\"\n\t      echo \"*** not find such a program.  So, this module is probably useless.\"\n\t      echo \"*** \\`nm' from GNU binutils and a full rebuild may help.\"\n\t    fi\n\t    if test \"$build_old_libs\" = no; then\n\t      oldlibs=\"$output_objdir/$libname.$libext\"\n\t      build_libtool_libs=module\n\t      build_old_libs=yes\n\t    else\n\t      build_libtool_libs=no\n\t    fi\n\t  else\n\t    echo \"*** The inter-library dependencies that have been dropped here will be\"\n\t    echo \"*** automatically added whenever a program is linked with this library\"\n\t    echo \"*** or is declared to -dlopen it.\"\n\n\t    if test \"$allow_undefined\" = no; then\n\t      echo\n\t      echo \"*** Since this library must not contain undefined symbols,\"\n\t      echo \"*** because either the platform does not support them or\"\n\t      echo \"*** it was explicitly requested with -no-undefined,\"\n\t      echo \"*** libtool will only create a static version of it.\"\n\t      if test \"$build_old_libs\" = no; then\n\t\toldlibs=\"$output_objdir/$libname.$libext\"\n\t\tbuild_libtool_libs=module\n\t\tbuild_old_libs=yes\n\t      else\n\t\tbuild_libtool_libs=no\n\t      fi\n\t    fi\n\t  fi\n\tfi\n\t# Done checking deplibs!\n\tdeplibs=$newdeplibs\n      fi\n      # Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n      case $host in\n\t*-*-darwin*)\n\t  newdeplibs=`$ECHO \" $newdeplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  new_inherited_linker_flags=`$ECHO \" $new_inherited_linker_flags\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  deplibs=`$ECHO \" $deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t  ;;\n      esac\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      deplibs=\"$new_libs\"\n\n      # All the library-specific variables (install_libdir is set above).\n      library_names=\n      old_library=\n      dlname=\n\n      # Test again, we may have decided not to build it any more\n      if test \"$build_libtool_libs\" = yes; then\n\t# Remove ${wl} instances when linking with ld.\n\t# FIXME: should test the right _cmds variable.\n\tcase $archive_cmds in\n\t  *\\$LD\\ *) wl= ;;\n        esac\n\tif test \"$hardcode_into_libs\" = yes; then\n\t  # Hardcode the library paths\n\t  hardcode_libdirs=\n\t  dep_rpath=\n\t  rpath=\"$finalize_rpath\"\n\t  test \"$opt_mode\" != relink && rpath=\"$compile_rpath$rpath\"\n\t  for libdir in $rpath; do\n\t    if test -n \"$hardcode_libdir_flag_spec\"; then\n\t      if test -n \"$hardcode_libdir_separator\"; then\n\t\tfunc_replace_sysroot \"$libdir\"\n\t\tlibdir=$func_replace_sysroot_result\n\t\tif test -z \"$hardcode_libdirs\"; then\n\t\t  hardcode_libdirs=\"$libdir\"\n\t\telse\n\t\t  # Just accumulate the unique libdirs.\n\t\t  case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t\t  *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t    ;;\n\t\t  *)\n\t\t    func_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t    ;;\n\t\t  esac\n\t\tfi\n\t      else\n\t\teval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t\tfunc_append dep_rpath \" $flag\"\n\t      fi\n\t    elif test -n \"$runpath_var\"; then\n\t      case \"$perm_rpath \" in\n\t      *\" $libdir \"*) ;;\n\t      *) func_append perm_rpath \" $libdir\" ;;\n\t      esac\n\t    fi\n\t  done\n\t  # Substitute the hardcoded libdirs into the rpath.\n\t  if test -n \"$hardcode_libdir_separator\" &&\n\t     test -n \"$hardcode_libdirs\"; then\n\t    libdir=\"$hardcode_libdirs\"\n\t    eval \"dep_rpath=\\\"$hardcode_libdir_flag_spec\\\"\"\n\t  fi\n\t  if test -n \"$runpath_var\" && test -n \"$perm_rpath\"; then\n\t    # We should set the runpath_var.\n\t    rpath=\n\t    for dir in $perm_rpath; do\n\t      func_append rpath \"$dir:\"\n\t    done\n\t    eval \"$runpath_var='$rpath\\$$runpath_var'; export $runpath_var\"\n\t  fi\n\t  test -n \"$dep_rpath\" && deplibs=\"$dep_rpath $deplibs\"\n\tfi\n\n\tshlibpath=\"$finalize_shlibpath\"\n\ttest \"$opt_mode\" != relink && shlibpath=\"$compile_shlibpath$shlibpath\"\n\tif test -n \"$shlibpath\"; then\n\t  eval \"$shlibpath_var='$shlibpath\\$$shlibpath_var'; export $shlibpath_var\"\n\tfi\n\n\t# Get the real and link names of the library.\n\teval shared_ext=\\\"$shrext_cmds\\\"\n\teval library_names=\\\"$library_names_spec\\\"\n\tset dummy $library_names\n\tshift\n\trealname=\"$1\"\n\tshift\n\n\tif test -n \"$soname_spec\"; then\n\t  eval soname=\\\"$soname_spec\\\"\n\telse\n\t  soname=\"$realname\"\n\tfi\n\tif test -z \"$dlname\"; then\n\t  dlname=$soname\n\tfi\n\n\tlib=\"$output_objdir/$realname\"\n\tlinknames=\n\tfor link\n\tdo\n\t  func_append linknames \" $link\"\n\tdone\n\n\t# Use standard objects if they are pic\n\ttest -z \"$pic_flag\" && libobjs=`$ECHO \"$libobjs\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\ttest \"X$libobjs\" = \"X \" && libobjs=\n\n\tdelfiles=\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  $opt_dry_run || cp \"$export_symbols\" \"$output_objdir/$libname.uexp\"\n\t  export_symbols=\"$output_objdir/$libname.uexp\"\n\t  func_append delfiles \" $export_symbols\"\n\tfi\n\n\torig_export_symbols=\n\tcase $host_os in\n\tcygwin* | mingw* | cegcc*)\n\t  if test -n \"$export_symbols\" && test -z \"$export_symbols_regex\"; then\n\t    # exporting using user supplied symfile\n\t    if test \"x`$SED 1q $export_symbols`\" != xEXPORTS; then\n\t      # and it's NOT already a .def file. Must figure out\n\t      # which of the given symbols are data symbols and tag\n\t      # them as such. So, trigger use of export_symbols_cmds.\n\t      # export_symbols gets reassigned inside the \"prepare\n\t      # the list of exported symbols\" if statement, so the\n\t      # include_expsyms logic still works.\n\t      orig_export_symbols=\"$export_symbols\"\n\t      export_symbols=\n\t      always_export_symbols=yes\n\t    fi\n\t  fi\n\t  ;;\n\tesac\n\n\t# Prepare the list of exported symbols\n\tif test -z \"$export_symbols\"; then\n\t  if test \"$always_export_symbols\" = yes || test -n \"$export_symbols_regex\"; then\n\t    func_verbose \"generating symbol list for \\`$libname.la'\"\n\t    export_symbols=\"$output_objdir/$libname.exp\"\n\t    $opt_dry_run || $RM $export_symbols\n\t    cmds=$export_symbols_cmds\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd1 in $cmds; do\n\t      IFS=\"$save_ifs\"\n\t      # Take the normal branch if the nm_file_list_spec branch\n\t      # doesn't work or if tool conversion is not needed.\n\t      case $nm_file_list_spec~$to_tool_file_cmd in\n\t\t*~func_convert_file_noop | *~func_convert_file_msys_to_w32 | ~*)\n\t\t  try_normal_branch=yes\n\t\t  eval cmd=\\\"$cmd1\\\"\n\t\t  func_len \" $cmd\"\n\t\t  len=$func_len_result\n\t\t  ;;\n\t\t*)\n\t\t  try_normal_branch=no\n\t\t  ;;\n\t      esac\n\t      if test \"$try_normal_branch\" = yes \\\n\t\t && { test \"$len\" -lt \"$max_cmd_len\" \\\n\t\t      || test \"$max_cmd_len\" -le -1; }\n\t      then\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\tskipped_export=false\n\t      elif test -n \"$nm_file_list_spec\"; then\n\t\tfunc_basename \"$output\"\n\t\toutput_la=$func_basename_result\n\t\tsave_libobjs=$libobjs\n\t\tsave_output=$output\n\t\toutput=${output_objdir}/${output_la}.nm\n\t\tfunc_to_tool_file \"$output\"\n\t\tlibobjs=$nm_file_list_spec$func_to_tool_file_result\n\t\tfunc_append delfiles \" $output\"\n\t\tfunc_verbose \"creating $NM input file list: $output\"\n\t\tfor obj in $save_libobjs; do\n\t\t  func_to_tool_file \"$obj\"\n\t\t  $ECHO \"$func_to_tool_file_result\"\n\t\tdone > \"$output\"\n\t\teval cmd=\\\"$cmd1\\\"\n\t\tfunc_show_eval \"$cmd\" 'exit $?'\n\t\toutput=$save_output\n\t\tlibobjs=$save_libobjs\n\t\tskipped_export=false\n\t      else\n\t\t# The command line is too long to execute in one step.\n\t\tfunc_verbose \"using reloadable object file for export list...\"\n\t\tskipped_export=:\n\t\t# Break out early, otherwise skipped_export may be\n\t\t# set to false by a later but shorter cmd.\n\t\tbreak\n\t      fi\n\t    done\n\t    IFS=\"$save_ifs\"\n\t    if test -n \"$export_symbols_regex\" && test \"X$skipped_export\" != \"X:\"; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t  tmp_export_symbols=\"$export_symbols\"\n\t  test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t  $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" && test -n \"$orig_export_symbols\"; then\n\t  # The given exports_symbols file has to be filtered, so filter it.\n\t  func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t  # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t  # 's' commands which not all seds can handle. GNU sed should be fine\n\t  # though. Also, the filter scales superlinearly with the number of\n\t  # global variables. join(1) would be nice here, but unfortunately\n\t  # isn't a blessed tool.\n\t  $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t  func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t  export_symbols=$output_objdir/$libname.def\n\t  $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\tfi\n\n\ttmp_deplibs=\n\tfor test_deplib in $deplibs; do\n\t  case \" $convenience \" in\n\t  *\" $test_deplib \"*) ;;\n\t  *)\n\t    func_append tmp_deplibs \" $test_deplib\"\n\t    ;;\n\t  esac\n\tdone\n\tdeplibs=\"$tmp_deplibs\"\n\n\tif test -n \"$convenience\"; then\n\t  if test -n \"$whole_archive_flag_spec\" &&\n\t    test \"$compiler_needs_object\" = yes &&\n\t    test -z \"$libobjs\"; then\n\t    # extract the archives, so we have objects to list.\n\t    # TODO: could optimize this to just extract one archive.\n\t    whole_archive_flag_spec=\n\t  fi\n\t  if test -n \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  else\n\t    gentop=\"$output_objdir/${outputname}x\"\n\t    func_append generated \" $gentop\"\n\n\t    func_extract_archives $gentop $convenience\n\t    func_append libobjs \" $func_extract_archives_result\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\tfi\n\n\tif test \"$thread_safe\" = yes && test -n \"$thread_safe_flag_spec\"; then\n\t  eval flag=\\\"$thread_safe_flag_spec\\\"\n\t  func_append linker_flags \" $flag\"\n\tfi\n\n\t# Make a backup of the uninstalled library when relinking\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}U && $MV $realname ${realname}U)' || exit $?\n\tfi\n\n\t# Do each of the archive commands.\n\tif test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t  if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$module_expsym_cmds\\\"\n\t    cmds=$module_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$module_cmds\\\"\n\t    cmds=$module_cmds\n\t  fi\n\telse\n\t  if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t    eval test_cmds=\\\"$archive_expsym_cmds\\\"\n\t    cmds=$archive_expsym_cmds\n\t  else\n\t    eval test_cmds=\\\"$archive_cmds\\\"\n\t    cmds=$archive_cmds\n\t  fi\n\tfi\n\n\tif test \"X$skipped_export\" != \"X:\" &&\n\t   func_len \" $test_cmds\" &&\n\t   len=$func_len_result &&\n\t   test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  :\n\telse\n\t  # The command line is too long to link in one step, link piecewise\n\t  # or, if using GNU ld and skipped_export is not :, use a linker\n\t  # script.\n\n\t  # Save the value of $output and $libobjs because we want to\n\t  # use them later.  If we have whole_archive_flag_spec, we\n\t  # want to use save_libobjs as it was before\n\t  # whole_archive_flag_spec was expanded, because we can't\n\t  # assume the linker understands whole_archive_flag_spec.\n\t  # This may have to be revisited, in case too many\n\t  # convenience libraries get linked in and end up exceeding\n\t  # the spec.\n\t  if test -z \"$convenience\" || test -z \"$whole_archive_flag_spec\"; then\n\t    save_libobjs=$libobjs\n\t  fi\n\t  save_output=$output\n\t  func_basename \"$output\"\n\t  output_la=$func_basename_result\n\n\t  # Clear the reloadable object creation command queue and\n\t  # initialize k to one.\n\t  test_cmds=\n\t  concat_cmds=\n\t  objlist=\n\t  last_robj=\n\t  k=1\n\n\t  if test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"$with_gnu_ld\" = yes; then\n\t    output=${output_objdir}/${output_la}.lnkscript\n\t    func_verbose \"creating GNU ld script: $output\"\n\t    echo 'INPUT (' > $output\n\t    for obj in $save_libobjs\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    echo ')' >> $output\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$func_to_tool_file_result\n\t  elif test -n \"$save_libobjs\" && test \"X$skipped_export\" != \"X:\" && test \"X$file_list_spec\" != X; then\n\t    output=${output_objdir}/${output_la}.lnk\n\t    func_verbose \"creating linker input file list: $output\"\n\t    : > $output\n\t    set x $save_libobjs\n\t    shift\n\t    firstobj=\n\t    if test \"$compiler_needs_object\" = yes; then\n\t      firstobj=\"$1 \"\n\t      shift\n\t    fi\n\t    for obj\n\t    do\n\t      func_to_tool_file \"$obj\"\n\t      $ECHO \"$func_to_tool_file_result\" >> $output\n\t    done\n\t    func_append delfiles \" $output\"\n\t    func_to_tool_file \"$output\"\n\t    output=$firstobj\\\"$file_list_spec$func_to_tool_file_result\\\"\n\t  else\n\t    if test -n \"$save_libobjs\"; then\n\t      func_verbose \"creating reloadable object files...\"\n\t      output=$output_objdir/$output_la-${k}.$objext\n\t      eval test_cmds=\\\"$reload_cmds\\\"\n\t      func_len \" $test_cmds\"\n\t      len0=$func_len_result\n\t      len=$len0\n\n\t      # Loop over the list of objects to be linked.\n\t      for obj in $save_libobjs\n\t      do\n\t\tfunc_len \" $obj\"\n\t\tfunc_arith $len + $func_len_result\n\t\tlen=$func_arith_result\n\t\tif test \"X$objlist\" = X ||\n\t\t   test \"$len\" -lt \"$max_cmd_len\"; then\n\t\t  func_append objlist \" $obj\"\n\t\telse\n\t\t  # The command $test_cmds is almost too long, add a\n\t\t  # command to the queue.\n\t\t  if test \"$k\" -eq 1 ; then\n\t\t    # The first file doesn't have a previous command to add.\n\t\t    reload_objs=$objlist\n\t\t    eval concat_cmds=\\\"$reload_cmds\\\"\n\t\t  else\n\t\t    # All subsequent reloadable object files will link in\n\t\t    # the last one created.\n\t\t    reload_objs=\"$objlist $last_robj\"\n\t\t    eval concat_cmds=\\\"\\$concat_cmds~$reload_cmds~\\$RM $last_robj\\\"\n\t\t  fi\n\t\t  last_robj=$output_objdir/$output_la-${k}.$objext\n\t\t  func_arith $k + 1\n\t\t  k=$func_arith_result\n\t\t  output=$output_objdir/$output_la-${k}.$objext\n\t\t  objlist=\" $obj\"\n\t\t  func_len \" $last_robj\"\n\t\t  func_arith $len0 + $func_len_result\n\t\t  len=$func_arith_result\n\t\tfi\n\t      done\n\t      # Handle the remaining objects by creating one last\n\t      # reloadable object file.  All subsequent reloadable object\n\t      # files will link in the last one created.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      reload_objs=\"$objlist $last_robj\"\n\t      eval concat_cmds=\\\"\\${concat_cmds}$reload_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t        eval concat_cmds=\\\"\\${concat_cmds}~\\$RM $last_robj\\\"\n\t      fi\n\t      func_append delfiles \" $output\"\n\n\t    else\n\t      output=\n\t    fi\n\n\t    if ${skipped_export-false}; then\n\t      func_verbose \"generating symbol list for \\`$libname.la'\"\n\t      export_symbols=\"$output_objdir/$libname.exp\"\n\t      $opt_dry_run || $RM $export_symbols\n\t      libobjs=$output\n\t      # Append the command to create the export file.\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\$concat_cmds$export_symbols_cmds\\\"\n\t      if test -n \"$last_robj\"; then\n\t\teval concat_cmds=\\\"\\$concat_cmds~\\$RM $last_robj\\\"\n\t      fi\n\t    fi\n\n\t    test -n \"$save_libobjs\" &&\n\t      func_verbose \"creating a temporary reloadable object file: $output\"\n\n\t    # Loop through the commands generated above and execute them.\n\t    save_ifs=\"$IFS\"; IFS='~'\n\t    for cmd in $concat_cmds; do\n\t      IFS=\"$save_ifs\"\n\t      $opt_silent || {\n\t\t  func_quote_for_expand \"$cmd\"\n\t\t  eval \"func_echo $func_quote_for_expand_result\"\n\t      }\n\t      $opt_dry_run || eval \"$cmd\" || {\n\t\tlt_exit=$?\n\n\t\t# Restore the uninstalled library and exit\n\t\tif test \"$opt_mode\" = relink; then\n\t\t  ( cd \"$output_objdir\" && \\\n\t\t    $RM \"${realname}T\" && \\\n\t\t    $MV \"${realname}U\" \"$realname\" )\n\t\tfi\n\n\t\texit $lt_exit\n\t      }\n\t    done\n\t    IFS=\"$save_ifs\"\n\n\t    if test -n \"$export_symbols_regex\" && ${skipped_export-false}; then\n\t      func_show_eval '$EGREP -e \"$export_symbols_regex\" \"$export_symbols\" > \"${export_symbols}T\"'\n\t      func_show_eval '$MV \"${export_symbols}T\" \"$export_symbols\"'\n\t    fi\n\t  fi\n\n          if ${skipped_export-false}; then\n\t    if test -n \"$export_symbols\" && test -n \"$include_expsyms\"; then\n\t      tmp_export_symbols=\"$export_symbols\"\n\t      test -n \"$orig_export_symbols\" && tmp_export_symbols=\"$orig_export_symbols\"\n\t      $opt_dry_run || eval '$ECHO \"$include_expsyms\" | $SP2NL >> \"$tmp_export_symbols\"'\n\t    fi\n\n\t    if test -n \"$orig_export_symbols\"; then\n\t      # The given exports_symbols file has to be filtered, so filter it.\n\t      func_verbose \"filter symbol list for \\`$libname.la' to tag DATA exports\"\n\t      # FIXME: $output_objdir/$libname.filter potentially contains lots of\n\t      # 's' commands which not all seds can handle. GNU sed should be fine\n\t      # though. Also, the filter scales superlinearly with the number of\n\t      # global variables. join(1) would be nice here, but unfortunately\n\t      # isn't a blessed tool.\n\t      $opt_dry_run || $SED -e '/[ ,]DATA/!d;s,\\(.*\\)\\([ \\,].*\\),s|^\\1$|\\1\\2|,' < $export_symbols > $output_objdir/$libname.filter\n\t      func_append delfiles \" $export_symbols $output_objdir/$libname.filter\"\n\t      export_symbols=$output_objdir/$libname.def\n\t      $opt_dry_run || $SED -f $output_objdir/$libname.filter < $orig_export_symbols > $export_symbols\n\t    fi\n\t  fi\n\n\t  libobjs=$output\n\t  # Restore the value of output.\n\t  output=$save_output\n\n\t  if test -n \"$convenience\" && test -n \"$whole_archive_flag_spec\"; then\n\t    eval libobjs=\\\"\\$libobjs $whole_archive_flag_spec\\\"\n\t    test \"X$libobjs\" = \"X \" && libobjs=\n\t  fi\n\t  # Expand the library linking commands again to reset the\n\t  # value of $libobjs for piecewise linking.\n\n\t  # Do each of the archive commands.\n\t  if test \"$module\" = yes && test -n \"$module_cmds\" ; then\n\t    if test -n \"$export_symbols\" && test -n \"$module_expsym_cmds\"; then\n\t      cmds=$module_expsym_cmds\n\t    else\n\t      cmds=$module_cmds\n\t    fi\n\t  else\n\t    if test -n \"$export_symbols\" && test -n \"$archive_expsym_cmds\"; then\n\t      cmds=$archive_expsym_cmds\n\t    else\n\t      cmds=$archive_cmds\n\t    fi\n\t  fi\n\tfi\n\n\tif test -n \"$delfiles\"; then\n\t  # Append the command to remove temporary files to $cmds.\n\t  eval cmds=\\\"\\$cmds~\\$RM $delfiles\\\"\n\tfi\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append libobjs \" $func_extract_archives_result\"\n\t  test \"X$libobjs\" = \"X \" && libobjs=\n\tfi\n\n\tsave_ifs=\"$IFS\"; IFS='~'\n\tfor cmd in $cmds; do\n\t  IFS=\"$save_ifs\"\n\t  eval cmd=\\\"$cmd\\\"\n\t  $opt_silent || {\n\t    func_quote_for_expand \"$cmd\"\n\t    eval \"func_echo $func_quote_for_expand_result\"\n\t  }\n\t  $opt_dry_run || eval \"$cmd\" || {\n\t    lt_exit=$?\n\n\t    # Restore the uninstalled library and exit\n\t    if test \"$opt_mode\" = relink; then\n\t      ( cd \"$output_objdir\" && \\\n\t        $RM \"${realname}T\" && \\\n\t\t$MV \"${realname}U\" \"$realname\" )\n\t    fi\n\n\t    exit $lt_exit\n\t  }\n\tdone\n\tIFS=\"$save_ifs\"\n\n\t# Restore the uninstalled library and exit\n\tif test \"$opt_mode\" = relink; then\n\t  $opt_dry_run || eval '(cd $output_objdir && $RM ${realname}T && $MV $realname ${realname}T && $MV ${realname}U $realname)' || exit $?\n\n\t  if test -n \"$convenience\"; then\n\t    if test -z \"$whole_archive_flag_spec\"; then\n\t      func_show_eval '${RM}r \"$gentop\"'\n\t    fi\n\t  fi\n\n\t  exit $EXIT_SUCCESS\n\tfi\n\n\t# Create links to the real library.\n\tfor linkname in $linknames; do\n\t  if test \"$realname\" != \"$linkname\"; then\n\t    func_show_eval '(cd \"$output_objdir\" && $RM \"$linkname\" && $LN_S \"$realname\" \"$linkname\")' 'exit $?'\n\t  fi\n\tdone\n\n\t# If -module or -export-dynamic was specified, set the dlname.\n\tif test \"$module\" = yes || test \"$export_dynamic\" = yes; then\n\t  # On all known operating systems, these are identical.\n\t  dlname=\"$soname\"\n\tfi\n      fi\n      ;;\n\n    obj)\n      if test -n \"$dlfiles$dlprefiles\" || test \"$dlself\" != no; then\n\tfunc_warning \"\\`-dlopen' is ignored for objects\"\n      fi\n\n      case \" $deplibs\" in\n      *\\ -l* | *\\ -L*)\n\tfunc_warning \"\\`-l' and \\`-L' are ignored for objects\" ;;\n      esac\n\n      test -n \"$rpath\" && \\\n\tfunc_warning \"\\`-rpath' is ignored for objects\"\n\n      test -n \"$xrpath\" && \\\n\tfunc_warning \"\\`-R' is ignored for objects\"\n\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for objects\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for objects\"\n\n      case $output in\n      *.lo)\n\ttest -n \"$objs$old_deplibs\" && \\\n\t  func_fatal_error \"cannot build library object \\`$output' from non-libtool objects\"\n\n\tlibobj=$output\n\tfunc_lo2o \"$libobj\"\n\tobj=$func_lo2o_result\n\t;;\n      *)\n\tlibobj=\n\tobj=\"$output\"\n\t;;\n      esac\n\n      # Delete the old objects.\n      $opt_dry_run || $RM $obj $libobj\n\n      # Objects from convenience libraries.  This assumes\n      # single-version convenience libraries.  Whenever we create\n      # different ones for PIC/non-PIC, this we'll have to duplicate\n      # the extraction.\n      reload_conv_objs=\n      gentop=\n      # reload_cmds runs $LD directly, so let us get rid of\n      # -Wl from whole_archive_flag_spec and hope we can get by with\n      # turning comma into space..\n      wl=\n\n      if test -n \"$convenience\"; then\n\tif test -n \"$whole_archive_flag_spec\"; then\n\t  eval tmp_whole_archive_flags=\\\"$whole_archive_flag_spec\\\"\n\t  reload_conv_objs=$reload_objs\\ `$ECHO \"$tmp_whole_archive_flags\" | $SED 's|,| |g'`\n\telse\n\t  gentop=\"$output_objdir/${obj}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $convenience\n\t  reload_conv_objs=\"$reload_objs $func_extract_archives_result\"\n\tfi\n      fi\n\n      # If we're not building shared, we need to use non_pic_objs\n      test \"$build_libtool_libs\" != yes && libobjs=\"$non_pic_objects\"\n\n      # Create the old-style object.\n      reload_objs=\"$objs$old_deplibs \"`$ECHO \"$libobjs\" | $SP2NL | $SED \"/\\.${libext}$/d; /\\.lib$/d; $lo2o\" | $NL2SP`\" $reload_conv_objs\" ### testsuite: skip nested quoting test\n\n      output=\"$obj\"\n      func_execute_cmds \"$reload_cmds\" 'exit $?'\n\n      # Exit if we aren't doing a library object file.\n      if test -z \"$libobj\"; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$build_libtool_libs\" != yes; then\n\tif test -n \"$gentop\"; then\n\t  func_show_eval '${RM}r \"$gentop\"'\n\tfi\n\n\t# Create an invalid libtool object if no PIC, so that we don't\n\t# accidentally link it into a program.\n\t# $show \"echo timestamp > $libobj\"\n\t# $opt_dry_run || eval \"echo timestamp > $libobj\" || exit $?\n\texit $EXIT_SUCCESS\n      fi\n\n      if test -n \"$pic_flag\" || test \"$pic_mode\" != default; then\n\t# Only do commands if we really have different PIC objects.\n\treload_objs=\"$libobjs $reload_conv_objs\"\n\toutput=\"$libobj\"\n\tfunc_execute_cmds \"$reload_cmds\" 'exit $?'\n      fi\n\n      if test -n \"$gentop\"; then\n\tfunc_show_eval '${RM}r \"$gentop\"'\n      fi\n\n      exit $EXIT_SUCCESS\n      ;;\n\n    prog)\n      case $host in\n\t*cygwin*) func_stripname '' '.exe' \"$output\"\n\t          output=$func_stripname_result.exe;;\n      esac\n      test -n \"$vinfo\" && \\\n\tfunc_warning \"\\`-version-info' is ignored for programs\"\n\n      test -n \"$release\" && \\\n\tfunc_warning \"\\`-release' is ignored for programs\"\n\n      test \"$preload\" = yes \\\n        && test \"$dlopen_support\" = unknown \\\n\t&& test \"$dlopen_self\" = unknown \\\n\t&& test \"$dlopen_self_static\" = unknown && \\\n\t  func_warning \"\\`LT_INIT([dlopen])' not used. Assuming no dlopen support.\"\n\n      case $host in\n      *-*-rhapsody* | *-*-darwin1.[012])\n\t# On Rhapsody replace the C library is the System framework\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's/ -lc / System.ltframework /'`\n\t;;\n      esac\n\n      case $host in\n      *-*-darwin*)\n\t# Don't allow lazy linking, it breaks C++ global constructors\n\t# But is supposedly fixed on 10.4 or later (yay!).\n\tif test \"$tagname\" = CXX ; then\n\t  case ${MACOSX_DEPLOYMENT_TARGET-10.0} in\n\t    10.[0123])\n\t      func_append compile_command \" ${wl}-bind_at_load\"\n\t      func_append finalize_command \" ${wl}-bind_at_load\"\n\t    ;;\n\t  esac\n\tfi\n\t# Time to change all our \"foo.ltframework\" stuff back to \"-framework foo\"\n\tcompile_deplibs=`$ECHO \" $compile_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\tfinalize_deplibs=`$ECHO \" $finalize_deplibs\" | $SED 's% \\([^ $]*\\).ltframework% -framework \\1%g'`\n\t;;\n      esac\n\n\n      # move library search paths that coincide with paths to not yet\n      # installed libraries to the beginning of the library search list\n      new_libs=\n      for path in $notinst_path; do\n\tcase \" $new_libs \" in\n\t*\" -L$path/$objdir \"*) ;;\n\t*)\n\t  case \" $compile_deplibs \" in\n\t  *\" -L$path/$objdir \"*)\n\t    func_append new_libs \" -L$path/$objdir\" ;;\n\t  esac\n\t  ;;\n\tesac\n      done\n      for deplib in $compile_deplibs; do\n\tcase $deplib in\n\t-L*)\n\t  case \" $new_libs \" in\n\t  *\" $deplib \"*) ;;\n\t  *) func_append new_libs \" $deplib\" ;;\n\t  esac\n\t  ;;\n\t*) func_append new_libs \" $deplib\" ;;\n\tesac\n      done\n      compile_deplibs=\"$new_libs\"\n\n\n      func_append compile_command \" $compile_deplibs\"\n      func_append finalize_command \" $finalize_deplibs\"\n\n      if test -n \"$rpath$xrpath\"; then\n\t# If the user specified any rpath flags, then add them.\n\tfor libdir in $rpath $xrpath; do\n\t  # This is the magic to use -rpath.\n\t  case \"$finalize_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_rpath \" $libdir\" ;;\n\t  esac\n\tdone\n      fi\n\n      # Now hardcode the library paths\n      rpath=\n      hardcode_libdirs=\n      for libdir in $compile_rpath $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n\tcase $host in\n\t*-*-cygwin* | *-*-mingw* | *-*-pw32* | *-*-os2* | *-cegcc*)\n\t  testbindir=`${ECHO} \"$libdir\" | ${SED} -e 's*/lib$*/bin*'`\n\t  case :$dllsearchpath: in\n\t  *\":$libdir:\"*) ;;\n\t  ::) dllsearchpath=$libdir;;\n\t  *) func_append dllsearchpath \":$libdir\";;\n\t  esac\n\t  case :$dllsearchpath: in\n\t  *\":$testbindir:\"*) ;;\n\t  ::) dllsearchpath=$testbindir;;\n\t  *) func_append dllsearchpath \":$testbindir\";;\n\t  esac\n\t  ;;\n\tesac\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      compile_rpath=\"$rpath\"\n\n      rpath=\n      hardcode_libdirs=\n      for libdir in $finalize_rpath; do\n\tif test -n \"$hardcode_libdir_flag_spec\"; then\n\t  if test -n \"$hardcode_libdir_separator\"; then\n\t    if test -z \"$hardcode_libdirs\"; then\n\t      hardcode_libdirs=\"$libdir\"\n\t    else\n\t      # Just accumulate the unique libdirs.\n\t      case $hardcode_libdir_separator$hardcode_libdirs$hardcode_libdir_separator in\n\t      *\"$hardcode_libdir_separator$libdir$hardcode_libdir_separator\"*)\n\t\t;;\n\t      *)\n\t\tfunc_append hardcode_libdirs \"$hardcode_libdir_separator$libdir\"\n\t\t;;\n\t      esac\n\t    fi\n\t  else\n\t    eval flag=\\\"$hardcode_libdir_flag_spec\\\"\n\t    func_append rpath \" $flag\"\n\t  fi\n\telif test -n \"$runpath_var\"; then\n\t  case \"$finalize_perm_rpath \" in\n\t  *\" $libdir \"*) ;;\n\t  *) func_append finalize_perm_rpath \" $libdir\" ;;\n\t  esac\n\tfi\n      done\n      # Substitute the hardcoded libdirs into the rpath.\n      if test -n \"$hardcode_libdir_separator\" &&\n\t test -n \"$hardcode_libdirs\"; then\n\tlibdir=\"$hardcode_libdirs\"\n\teval rpath=\\\" $hardcode_libdir_flag_spec\\\"\n      fi\n      finalize_rpath=\"$rpath\"\n\n      if test -n \"$libobjs\" && test \"$build_old_libs\" = yes; then\n\t# Transform all the library objects into standard objects.\n\tcompile_command=`$ECHO \"$compile_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n\tfinalize_command=`$ECHO \"$finalize_command\" | $SP2NL | $SED \"$lo2o\" | $NL2SP`\n      fi\n\n      func_generate_dlsyms \"$outputname\" \"@PROGRAM@\" \"no\"\n\n      # template prelinking step\n      if test -n \"$prelink_cmds\"; then\n\tfunc_execute_cmds \"$prelink_cmds\" 'exit $?'\n      fi\n\n      wrappers_required=yes\n      case $host in\n      *cegcc* | *mingw32ce*)\n        # Disable wrappers for cegcc and mingw32ce hosts, we are cross compiling anyway.\n        wrappers_required=no\n        ;;\n      *cygwin* | *mingw* )\n        if test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      *)\n        if test \"$need_relink\" = no || test \"$build_libtool_libs\" != yes; then\n          wrappers_required=no\n        fi\n        ;;\n      esac\n      if test \"$wrappers_required\" = no; then\n\t# Replace the output file specification.\n\tcompile_command=`$ECHO \"$compile_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\tlink_command=\"$compile_command$compile_rpath\"\n\n\t# We have no uninstalled library dependencies, so finalize right now.\n\texit_status=0\n\tfunc_show_eval \"$link_command\" 'exit_status=$?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\t# Delete the generated files.\n\tif test -f \"$output_objdir/${outputname}S.${objext}\"; then\n\t  func_show_eval '$RM \"$output_objdir/${outputname}S.${objext}\"'\n\tfi\n\n\texit $exit_status\n      fi\n\n      if test -n \"$compile_shlibpath$finalize_shlibpath\"; then\n\tcompile_command=\"$shlibpath_var=\\\"$compile_shlibpath$finalize_shlibpath\\$$shlibpath_var\\\" $compile_command\"\n      fi\n      if test -n \"$finalize_shlibpath\"; then\n\tfinalize_command=\"$shlibpath_var=\\\"$finalize_shlibpath\\$$shlibpath_var\\\" $finalize_command\"\n      fi\n\n      compile_var=\n      finalize_var=\n      if test -n \"$runpath_var\"; then\n\tif test -n \"$perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  compile_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n\tif test -n \"$finalize_perm_rpath\"; then\n\t  # We should set the runpath_var.\n\t  rpath=\n\t  for dir in $finalize_perm_rpath; do\n\t    func_append rpath \"$dir:\"\n\t  done\n\t  finalize_var=\"$runpath_var=\\\"$rpath\\$$runpath_var\\\" \"\n\tfi\n      fi\n\n      if test \"$no_install\" = yes; then\n\t# We don't need to create a wrapper script.\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\t# Replace the output file specification.\n\tlink_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output\"'%g'`\n\t# Delete the old output file.\n\t$opt_dry_run || $RM $output\n\t# Link the executable and exit\n\tfunc_show_eval \"$link_command\" 'exit $?'\n\n\tif test -n \"$postlink_cmds\"; then\n\t  func_to_tool_file \"$output\"\n\t  postlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\t  func_execute_cmds \"$postlink_cmds\" 'exit $?'\n\tfi\n\n\texit $EXIT_SUCCESS\n      fi\n\n      if test \"$hardcode_action\" = relink; then\n\t# Fast installation is not supported\n\tlink_command=\"$compile_var$compile_command$compile_rpath\"\n\trelink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\n\tfunc_warning \"this platform does not like uninstalled shared libraries\"\n\tfunc_warning \"\\`$output' will be relinked during installation\"\n      else\n\tif test \"$fast_install\" != no; then\n\t  link_command=\"$finalize_var$compile_command$finalize_rpath\"\n\t  if test \"$fast_install\" = yes; then\n\t    relink_command=`$ECHO \"$compile_var$compile_command$compile_rpath\" | $SED 's%@OUTPUT@%\\$progdir/\\$file%g'`\n\t  else\n\t    # fast_install is set to needless\n\t    relink_command=\n\t  fi\n\telse\n\t  link_command=\"$compile_var$compile_command$compile_rpath\"\n\t  relink_command=\"$finalize_var$finalize_command$finalize_rpath\"\n\tfi\n      fi\n\n      # Replace the output file specification.\n      link_command=`$ECHO \"$link_command\" | $SED 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g'`\n\n      # Delete the old output files.\n      $opt_dry_run || $RM $output $output_objdir/$outputname $output_objdir/lt-$outputname\n\n      func_show_eval \"$link_command\" 'exit $?'\n\n      if test -n \"$postlink_cmds\"; then\n\tfunc_to_tool_file \"$output_objdir/$outputname\"\n\tpostlink_cmds=`func_echo_all \"$postlink_cmds\" | $SED -e 's%@OUTPUT@%'\"$output_objdir/$outputname\"'%g' -e 's%@TOOL_OUTPUT@%'\"$func_to_tool_file_result\"'%g'`\n\tfunc_execute_cmds \"$postlink_cmds\" 'exit $?'\n      fi\n\n      # Now create the wrapper script.\n      func_verbose \"creating $output\"\n\n      # Quote the relink command for shipping.\n      if test -n \"$relink_command\"; then\n\t# Preserve any variables that may affect compiler behavior\n\tfor var in $variables_saved_for_relink; do\n\t  if eval test -z \\\"\\${$var+set}\\\"; then\n\t    relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\t  elif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t    relink_command=\"$var=; export $var; $relink_command\"\n\t  else\n\t    func_quote_for_eval \"$var_value\"\n\t    relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\t  fi\n\tdone\n\trelink_command=\"(cd `pwd`; $relink_command)\"\n\trelink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      fi\n\n      # Only actually do things if not in dry run mode.\n      $opt_dry_run || {\n\t# win32 will think the script is a binary if it has\n\t# a .exe suffix, so we strip it off here.\n\tcase $output in\n\t  *.exe) func_stripname '' '.exe' \"$output\"\n\t         output=$func_stripname_result ;;\n\tesac\n\t# test for cygwin because mv fails w/o .exe extensions\n\tcase $host in\n\t  *cygwin*)\n\t    exeext=.exe\n\t    func_stripname '' '.exe' \"$outputname\"\n\t    outputname=$func_stripname_result ;;\n\t  *) exeext= ;;\n\tesac\n\tcase $host in\n\t  *cygwin* | *mingw* )\n\t    func_dirname_and_basename \"$output\" \"\" \".\"\n\t    output_name=$func_basename_result\n\t    output_path=$func_dirname_result\n\t    cwrappersource=\"$output_path/$objdir/lt-$output_name.c\"\n\t    cwrapper=\"$output_path/$output_name.exe\"\n\t    $RM $cwrappersource $cwrapper\n\t    trap \"$RM $cwrappersource $cwrapper; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_cwrapperexe_src > $cwrappersource\n\n\t    # The wrapper executable is built using the $host compiler,\n\t    # because it contains $host paths and files. If cross-\n\t    # compiling, it, like the target executable, must be\n\t    # executed on the $host or under an emulation environment.\n\t    $opt_dry_run || {\n\t      $LTCC $LTCFLAGS -o $cwrapper $cwrappersource\n\t      $STRIP $cwrapper\n\t    }\n\n\t    # Now, create the wrapper script for func_source use:\n\t    func_ltwrapper_scriptname $cwrapper\n\t    $RM $func_ltwrapper_scriptname_result\n\t    trap \"$RM $func_ltwrapper_scriptname_result; exit $EXIT_FAILURE\" 1 2 15\n\t    $opt_dry_run || {\n\t      # note: this script will not be executed, so do not chmod.\n\t      if test \"x$build\" = \"x$host\" ; then\n\t\t$cwrapper --lt-dump-script > $func_ltwrapper_scriptname_result\n\t      else\n\t\tfunc_emit_wrapper no > $func_ltwrapper_scriptname_result\n\t      fi\n\t    }\n\t  ;;\n\t  * )\n\t    $RM $output\n\t    trap \"$RM $output; exit $EXIT_FAILURE\" 1 2 15\n\n\t    func_emit_wrapper no > $output\n\t    chmod +x $output\n\t  ;;\n\tesac\n      }\n      exit $EXIT_SUCCESS\n      ;;\n    esac\n\n    # See if we need to build an old-fashioned archive.\n    for oldlib in $oldlibs; do\n\n      if test \"$build_libtool_libs\" = convenience; then\n\toldobjs=\"$libobjs_save $symfileobj\"\n\taddlibs=\"$convenience\"\n\tbuild_libtool_libs=no\n      else\n\tif test \"$build_libtool_libs\" = module; then\n\t  oldobjs=\"$libobjs_save\"\n\t  build_libtool_libs=no\n\telse\n\t  oldobjs=\"$old_deplibs $non_pic_objects\"\n\t  if test \"$preload\" = yes && test -f \"$symfileobj\"; then\n\t    func_append oldobjs \" $symfileobj\"\n\t  fi\n\tfi\n\taddlibs=\"$old_convenience\"\n      fi\n\n      if test -n \"$addlibs\"; then\n\tgentop=\"$output_objdir/${outputname}x\"\n\tfunc_append generated \" $gentop\"\n\n\tfunc_extract_archives $gentop $addlibs\n\tfunc_append oldobjs \" $func_extract_archives_result\"\n      fi\n\n      # Do each command in the archive commands.\n      if test -n \"$old_archive_from_new_cmds\" && test \"$build_libtool_libs\" = yes; then\n\tcmds=$old_archive_from_new_cmds\n      else\n\n\t# Add any objects from preloaded convenience libraries\n\tif test -n \"$dlprefiles\"; then\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\n\t  func_extract_archives $gentop $dlprefiles\n\t  func_append oldobjs \" $func_extract_archives_result\"\n\tfi\n\n\t# POSIX demands no paths to be encoded in archives.  We have\n\t# to avoid creating archives with duplicate basenames if we\n\t# might have to extract them afterwards, e.g., when creating a\n\t# static archive out of a convenience library, or when linking\n\t# the entirety of a libtool archive into another (currently\n\t# not supported by libtool).\n\tif (for obj in $oldobjs\n\t    do\n\t      func_basename \"$obj\"\n\t      $ECHO \"$func_basename_result\"\n\t    done | sort | sort -uc >/dev/null 2>&1); then\n\t  :\n\telse\n\t  echo \"copying selected object files to avoid basename conflicts...\"\n\t  gentop=\"$output_objdir/${outputname}x\"\n\t  func_append generated \" $gentop\"\n\t  func_mkdir_p \"$gentop\"\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  counter=1\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_basename \"$obj\"\n\t    objbase=\"$func_basename_result\"\n\t    case \" $oldobjs \" in\n\t    \" \") oldobjs=$obj ;;\n\t    *[\\ /]\"$objbase \"*)\n\t      while :; do\n\t\t# Make sure we don't pick an alternate name that also\n\t\t# overlaps.\n\t\tnewobj=lt$counter-$objbase\n\t\tfunc_arith $counter + 1\n\t\tcounter=$func_arith_result\n\t\tcase \" $oldobjs \" in\n\t\t*[\\ /]\"$newobj \"*) ;;\n\t\t*) if test ! -f \"$gentop/$newobj\"; then break; fi ;;\n\t\tesac\n\t      done\n\t      func_show_eval \"ln $obj $gentop/$newobj || cp $obj $gentop/$newobj\"\n\t      func_append oldobjs \" $gentop/$newobj\"\n\t      ;;\n\t    *) func_append oldobjs \" $obj\" ;;\n\t    esac\n\t  done\n\tfi\n\tfunc_to_tool_file \"$oldlib\" func_convert_file_msys_to_w32\n\ttool_oldlib=$func_to_tool_file_result\n\teval cmds=\\\"$old_archive_cmds\\\"\n\n\tfunc_len \" $cmds\"\n\tlen=$func_len_result\n\tif test \"$len\" -lt \"$max_cmd_len\" || test \"$max_cmd_len\" -le -1; then\n\t  cmds=$old_archive_cmds\n\telif test -n \"$archiver_list_spec\"; then\n\t  func_verbose \"using command file archive linking...\"\n\t  for obj in $oldobjs\n\t  do\n\t    func_to_tool_file \"$obj\"\n\t    $ECHO \"$func_to_tool_file_result\"\n\t  done > $output_objdir/$libname.libcmd\n\t  func_to_tool_file \"$output_objdir/$libname.libcmd\"\n\t  oldobjs=\" $archiver_list_spec$func_to_tool_file_result\"\n\t  cmds=$old_archive_cmds\n\telse\n\t  # the command line is too long to link in one step, link in parts\n\t  func_verbose \"using piecewise archive linking...\"\n\t  save_RANLIB=$RANLIB\n\t  RANLIB=:\n\t  objlist=\n\t  concat_cmds=\n\t  save_oldobjs=$oldobjs\n\t  oldobjs=\n\t  # Is there a better way of finding the last object in the list?\n\t  for obj in $save_oldobjs\n\t  do\n\t    last_oldobj=$obj\n\t  done\n\t  eval test_cmds=\\\"$old_archive_cmds\\\"\n\t  func_len \" $test_cmds\"\n\t  len0=$func_len_result\n\t  len=$len0\n\t  for obj in $save_oldobjs\n\t  do\n\t    func_len \" $obj\"\n\t    func_arith $len + $func_len_result\n\t    len=$func_arith_result\n\t    func_append objlist \" $obj\"\n\t    if test \"$len\" -lt \"$max_cmd_len\"; then\n\t      :\n\t    else\n\t      # the above command should be used before it gets too long\n\t      oldobjs=$objlist\n\t      if test \"$obj\" = \"$last_oldobj\" ; then\n\t\tRANLIB=$save_RANLIB\n\t      fi\n\t      test -z \"$concat_cmds\" || concat_cmds=$concat_cmds~\n\t      eval concat_cmds=\\\"\\${concat_cmds}$old_archive_cmds\\\"\n\t      objlist=\n\t      len=$len0\n\t    fi\n\t  done\n\t  RANLIB=$save_RANLIB\n\t  oldobjs=$objlist\n\t  if test \"X$oldobjs\" = \"X\" ; then\n\t    eval cmds=\\\"\\$concat_cmds\\\"\n\t  else\n\t    eval cmds=\\\"\\$concat_cmds~\\$old_archive_cmds\\\"\n\t  fi\n\tfi\n      fi\n      func_execute_cmds \"$cmds\" 'exit $?'\n    done\n\n    test -n \"$generated\" && \\\n      func_show_eval \"${RM}r$generated\"\n\n    # Now create the libtool archive.\n    case $output in\n    *.la)\n      old_library=\n      test \"$build_old_libs\" = yes && old_library=\"$libname.$libext\"\n      func_verbose \"creating $output\"\n\n      # Preserve any variables that may affect compiler behavior\n      for var in $variables_saved_for_relink; do\n\tif eval test -z \\\"\\${$var+set}\\\"; then\n\t  relink_command=\"{ test -z \\\"\\${$var+set}\\\" || $lt_unset $var || { $var=; export $var; }; }; $relink_command\"\n\telif eval var_value=\\$$var; test -z \"$var_value\"; then\n\t  relink_command=\"$var=; export $var; $relink_command\"\n\telse\n\t  func_quote_for_eval \"$var_value\"\n\t  relink_command=\"$var=$func_quote_for_eval_result; export $var; $relink_command\"\n\tfi\n      done\n      # Quote the link command for shipping.\n      relink_command=\"(cd `pwd`; $SHELL $progpath $preserve_args --mode=relink $libtool_args @inst_prefix_dir@)\"\n      relink_command=`$ECHO \"$relink_command\" | $SED \"$sed_quote_subst\"`\n      if test \"$hardcode_automatic\" = yes ; then\n\trelink_command=\n      fi\n\n      # Only create the output if not a dry run.\n      $opt_dry_run || {\n\tfor installed in no yes; do\n\t  if test \"$installed\" = yes; then\n\t    if test -z \"$install_libdir\"; then\n\t      break\n\t    fi\n\t    output=\"$output_objdir/$outputname\"i\n\t    # Replace all uninstalled libtool libraries with the installed ones\n\t    newdependency_libs=\n\t    for deplib in $dependency_libs; do\n\t      case $deplib in\n\t      *.la)\n\t\tfunc_basename \"$deplib\"\n\t\tname=\"$func_basename_result\"\n\t\tfunc_resolve_sysroot \"$deplib\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $func_resolve_sysroot_result`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$deplib' is not a valid libtool archive\"\n\t\tfunc_append newdependency_libs \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      -L*)\n\t\tfunc_stripname -L '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -L$func_replace_sysroot_result\"\n\t\t;;\n\t      -R*)\n\t\tfunc_stripname -R '' \"$deplib\"\n\t\tfunc_replace_sysroot \"$func_stripname_result\"\n\t\tfunc_append newdependency_libs \" -R$func_replace_sysroot_result\"\n\t\t;;\n\t      *) func_append newdependency_libs \" $deplib\" ;;\n\t      esac\n\t    done\n\t    dependency_libs=\"$newdependency_libs\"\n\t    newdlfiles=\n\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t      *.la)\n\t        func_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlfiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      *) func_append newdlfiles \" $lib\" ;;\n\t      esac\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t      *.la)\n\t\t# Only pass preopened files to the pseudo-archive (for\n\t\t# eventual linking with the app. that links it) if we\n\t\t# didn't already link the preopened objects directly into\n\t\t# the library:\n\t\tfunc_basename \"$lib\"\n\t\tname=\"$func_basename_result\"\n\t\teval libdir=`${SED} -n -e 's/^libdir=\\(.*\\)$/\\1/p' $lib`\n\t\ttest -z \"$libdir\" && \\\n\t\t  func_fatal_error \"\\`$lib' is not a valid libtool archive\"\n\t\tfunc_append newdlprefiles \" ${lt_sysroot:+=}$libdir/$name\"\n\t\t;;\n\t      esac\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  else\n\t    newdlfiles=\n\t    for lib in $dlfiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlfiles \" $abs\"\n\t    done\n\t    dlfiles=\"$newdlfiles\"\n\t    newdlprefiles=\n\t    for lib in $dlprefiles; do\n\t      case $lib in\n\t\t[\\\\/]* | [A-Za-z]:[\\\\/]*) abs=\"$lib\" ;;\n\t\t*) abs=`pwd`\"/$lib\" ;;\n\t      esac\n\t      func_append newdlprefiles \" $abs\"\n\t    done\n\t    dlprefiles=\"$newdlprefiles\"\n\t  fi\n\t  $RM $output\n\t  # place dlname in correct position for cygwin\n\t  # In fact, it would be nice if we could use this code for all target\n\t  # systems that can't hard-code library paths into their executables\n\t  # and that have no shared library path variable independent of PATH,\n\t  # but it turns out we can't easily determine that from inspecting\n\t  # libtool variables, so we have to hard-code the OSs to which it\n\t  # applies here; at the moment, that means platforms that use the PE\n\t  # object format with DLL files.  See the long comment at the top of\n\t  # tests/bindir.at for full details.\n\t  tdlname=$dlname\n\t  case $host,$output,$installed,$module,$dlname in\n\t    *cygwin*,*lai,yes,no,*.dll | *mingw*,*lai,yes,no,*.dll | *cegcc*,*lai,yes,no,*.dll)\n\t      # If a -bindir argument was supplied, place the dll there.\n\t      if test \"x$bindir\" != x ;\n\t      then\n\t\tfunc_relative_path \"$install_libdir\" \"$bindir\"\n\t\ttdlname=$func_relative_path_result$dlname\n\t      else\n\t\t# Otherwise fall back on heuristic.\n\t\ttdlname=../bin/$dlname\n\t      fi\n\t      ;;\n\t  esac\n\t  $ECHO > $output \"\\\n# $outputname - a libtool library file\n# Generated by $PROGRAM (GNU $PACKAGE$TIMESTAMP) $VERSION\n#\n# Please DO NOT delete this file!\n# It is necessary for linking the library.\n\n# The name that we can dlopen(3).\ndlname='$tdlname'\n\n# Names of this library.\nlibrary_names='$library_names'\n\n# The name of the static archive.\nold_library='$old_library'\n\n# Linker flags that can not go in dependency_libs.\ninherited_linker_flags='$new_inherited_linker_flags'\n\n# Libraries that this one depends upon.\ndependency_libs='$dependency_libs'\n\n# Names of additional weak libraries provided by this library\nweak_library_names='$weak_libs'\n\n# Version information for $libname.\ncurrent=$current\nage=$age\nrevision=$revision\n\n# Is this an already installed library?\ninstalled=$installed\n\n# Should we warn about portability when linking against -modules?\nshouldnotlink=$module\n\n# Files to dlopen/dlpreopen\ndlopen='$dlfiles'\ndlpreopen='$dlprefiles'\n\n# Directory that this library needs to be installed in:\nlibdir='$install_libdir'\"\n\t  if test \"$installed\" = no && test \"$need_relink\" = yes; then\n\t    $ECHO >> $output \"\\\nrelink_command=\\\"$relink_command\\\"\"\n\t  fi\n\tdone\n      }\n\n      # Do a symbolic link so that the libtool archive can be found in\n      # LD_LIBRARY_PATH before the program is installed.\n      func_show_eval '( cd \"$output_objdir\" && $RM \"$outputname\" && $LN_S \"../$outputname\" \"$outputname\" )' 'exit $?'\n      ;;\n    esac\n    exit $EXIT_SUCCESS\n}\n\n{ test \"$opt_mode\" = link || test \"$opt_mode\" = relink; } &&\n    func_mode_link ${1+\"$@\"}\n\n\n# func_mode_uninstall arg...\nfunc_mode_uninstall ()\n{\n    $opt_debug\n    RM=\"$nonopt\"\n    files=\n    rmforce=\n    exit_status=0\n\n    # This variable tells wrapper scripts just to set variables rather\n    # than running their programs.\n    libtool_install_magic=\"$magic\"\n\n    for arg\n    do\n      case $arg in\n      -f) func_append RM \" $arg\"; rmforce=yes ;;\n      -*) func_append RM \" $arg\" ;;\n      *) func_append files \" $arg\" ;;\n      esac\n    done\n\n    test -z \"$RM\" && \\\n      func_fatal_help \"you must specify an RM program\"\n\n    rmdirs=\n\n    for file in $files; do\n      func_dirname \"$file\" \"\" \".\"\n      dir=\"$func_dirname_result\"\n      if test \"X$dir\" = X.; then\n\todir=\"$objdir\"\n      else\n\todir=\"$dir/$objdir\"\n      fi\n      func_basename \"$file\"\n      name=\"$func_basename_result\"\n      test \"$opt_mode\" = uninstall && odir=\"$dir\"\n\n      # Remember odir for removal later, being careful to avoid duplicates\n      if test \"$opt_mode\" = clean; then\n\tcase \" $rmdirs \" in\n\t  *\" $odir \"*) ;;\n\t  *) func_append rmdirs \" $odir\" ;;\n\tesac\n      fi\n\n      # Don't error if the file doesn't exist and rm -f was used.\n      if { test -L \"$file\"; } >/dev/null 2>&1 ||\n\t { test -h \"$file\"; } >/dev/null 2>&1 ||\n\t test -f \"$file\"; then\n\t:\n      elif test -d \"$file\"; then\n\texit_status=1\n\tcontinue\n      elif test \"$rmforce\" = yes; then\n\tcontinue\n      fi\n\n      rmfiles=\"$file\"\n\n      case $name in\n      *.la)\n\t# Possibly a libtool archive, so verify it.\n\tif func_lalib_p \"$file\"; then\n\t  func_source $dir/$name\n\n\t  # Delete the libtool libraries and symlinks.\n\t  for n in $library_names; do\n\t    func_append rmfiles \" $odir/$n\"\n\t  done\n\t  test -n \"$old_library\" && func_append rmfiles \" $odir/$old_library\"\n\n\t  case \"$opt_mode\" in\n\t  clean)\n\t    case \" $library_names \" in\n\t    *\" $dlname \"*) ;;\n\t    *) test -n \"$dlname\" && func_append rmfiles \" $odir/$dlname\" ;;\n\t    esac\n\t    test -n \"$libdir\" && func_append rmfiles \" $odir/$name $odir/${name}i\"\n\t    ;;\n\t  uninstall)\n\t    if test -n \"$library_names\"; then\n\t      # Do each command in the postuninstall commands.\n\t      func_execute_cmds \"$postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\n\t    if test -n \"$old_library\"; then\n\t      # Do each command in the old_postuninstall commands.\n\t      func_execute_cmds \"$old_postuninstall_cmds\" 'test \"$rmforce\" = yes || exit_status=1'\n\t    fi\n\t    # FIXME: should reinstall the best remaining shared library.\n\t    ;;\n\t  esac\n\tfi\n\t;;\n\n      *.lo)\n\t# Possibly a libtool object, so verify it.\n\tif func_lalib_p \"$file\"; then\n\n\t  # Read the .lo file\n\t  func_source $dir/$name\n\n\t  # Add PIC object to the list of files to remove.\n\t  if test -n \"$pic_object\" &&\n\t     test \"$pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$pic_object\"\n\t  fi\n\n\t  # Add non-PIC object to the list of files to remove.\n\t  if test -n \"$non_pic_object\" &&\n\t     test \"$non_pic_object\" != none; then\n\t    func_append rmfiles \" $dir/$non_pic_object\"\n\t  fi\n\tfi\n\t;;\n\n      *)\n\tif test \"$opt_mode\" = clean ; then\n\t  noexename=$name\n\t  case $file in\n\t  *.exe)\n\t    func_stripname '' '.exe' \"$file\"\n\t    file=$func_stripname_result\n\t    func_stripname '' '.exe' \"$name\"\n\t    noexename=$func_stripname_result\n\t    # $file with .exe has already been added to rmfiles,\n\t    # add $file without .exe\n\t    func_append rmfiles \" $file\"\n\t    ;;\n\t  esac\n\t  # Do a test to see if this is a libtool program.\n\t  if func_ltwrapper_p \"$file\"; then\n\t    if func_ltwrapper_executable_p \"$file\"; then\n\t      func_ltwrapper_scriptname \"$file\"\n\t      relink_command=\n\t      func_source $func_ltwrapper_scriptname_result\n\t      func_append rmfiles \" $func_ltwrapper_scriptname_result\"\n\t    else\n\t      relink_command=\n\t      func_source $dir/$noexename\n\t    fi\n\n\t    # note $name still contains .exe if it was in $file originally\n\t    # as does the version of $file that was added into $rmfiles\n\t    func_append rmfiles \" $odir/$name $odir/${name}S.${objext}\"\n\t    if test \"$fast_install\" = yes && test -n \"$relink_command\"; then\n\t      func_append rmfiles \" $odir/lt-$name\"\n\t    fi\n\t    if test \"X$noexename\" != \"X$name\" ; then\n\t      func_append rmfiles \" $odir/lt-${noexename}.c\"\n\t    fi\n\t  fi\n\tfi\n\t;;\n      esac\n      func_show_eval \"$RM $rmfiles\" 'exit_status=1'\n    done\n\n    # Try to remove the ${objdir}s in the directories where we deleted files\n    for dir in $rmdirs; do\n      if test -d \"$dir\"; then\n\tfunc_show_eval \"rmdir $dir >/dev/null 2>&1\"\n      fi\n    done\n\n    exit $exit_status\n}\n\n{ test \"$opt_mode\" = uninstall || test \"$opt_mode\" = clean; } &&\n    func_mode_uninstall ${1+\"$@\"}\n\ntest -z \"$opt_mode\" && {\n  help=\"$generic_help\"\n  func_fatal_help \"you must specify a MODE\"\n}\n\ntest -z \"$exec_cmd\" && \\\n  func_fatal_help \"invalid operation mode \\`$opt_mode'\"\n\nif test -n \"$exec_cmd\"; then\n  eval exec \"$exec_cmd\"\n  exit $EXIT_FAILURE\nfi\n\nexit $exit_status\n\n\n# The TAGs below are defined such that we never get into a situation\n# in which we disable both kinds of libraries.  Given conflicting\n# choices, we go for a static library, that is the most portable,\n# since we can't tell whether shared libraries were disabled because\n# the user asked for that or because the platform doesn't support\n# them.  This is particularly important on AIX, because we don't\n# support having both static and shared libraries enabled at the same\n# time on that platform, so we default to a shared-only configuration.\n# If a disable-shared tag is given, we'll fallback to a static-only\n# configuration.  But we'll never go from static-only to shared-only.\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-shared\nbuild_libtool_libs=no\nbuild_old_libs=yes\n# ### END LIBTOOL TAG CONFIG: disable-shared\n\n# ### BEGIN LIBTOOL TAG CONFIG: disable-static\nbuild_old_libs=`case $build_libtool_libs in yes) echo no;; *) echo yes;; esac`\n# ### END LIBTOOL TAG CONFIG: disable-static\n\n# Local Variables:\n# mode:shell-script\n# sh-indentation:2\n# End:\n# vi:sw=2\n\n"
        },
        {
          "name": "missing",
          "type": "blob",
          "size": 6.7109375,
          "content": "#! /bin/sh\n# Common wrapper for a few potentially missing GNU programs.\n\nscriptversion=2013-10-28.13; # UTC\n\n# Copyright (C) 1996-2013 Free Software Foundation, Inc.\n# Originally written by Fran,cois Pinard <pinard@iro.umontreal.ca>, 1996.\n\n# This program is free software; you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation; either version 2, or (at your option)\n# any later version.\n\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <http://www.gnu.org/licenses/>.\n\n# As a special exception to the GNU General Public License, if you\n# distribute this file as part of a program that contains a\n# configuration script generated by Autoconf, you may include it under\n# the same distribution terms that you use for the rest of that program.\n\nif test $# -eq 0; then\n  echo 1>&2 \"Try '$0 --help' for more information\"\n  exit 1\nfi\n\ncase $1 in\n\n  --is-lightweight)\n    # Used by our autoconf macros to check whether the available missing\n    # script is modern enough.\n    exit 0\n    ;;\n\n  --run)\n    # Back-compat with the calling convention used by older automake.\n    shift\n    ;;\n\n  -h|--h|--he|--hel|--help)\n    echo \"\\\n$0 [OPTION]... PROGRAM [ARGUMENT]...\n\nRun 'PROGRAM [ARGUMENT]...', returning a proper advice when this fails due\nto PROGRAM being missing or too old.\n\nOptions:\n  -h, --help      display this help and exit\n  -v, --version   output version information and exit\n\nSupported PROGRAM values:\n  aclocal   autoconf  autoheader   autom4te  automake  makeinfo\n  bison     yacc      flex         lex       help2man\n\nVersion suffixes to PROGRAM as well as the prefixes 'gnu-', 'gnu', and\n'g' are ignored when checking the name.\n\nSend bug reports to <bug-automake@gnu.org>.\"\n    exit $?\n    ;;\n\n  -v|--v|--ve|--ver|--vers|--versi|--versio|--version)\n    echo \"missing $scriptversion (GNU Automake)\"\n    exit $?\n    ;;\n\n  -*)\n    echo 1>&2 \"$0: unknown '$1' option\"\n    echo 1>&2 \"Try '$0 --help' for more information\"\n    exit 1\n    ;;\n\nesac\n\n# Run the given program, remember its exit status.\n\"$@\"; st=$?\n\n# If it succeeded, we are done.\ntest $st -eq 0 && exit 0\n\n# Also exit now if we it failed (or wasn't found), and '--version' was\n# passed; such an option is passed most likely to detect whether the\n# program is present and works.\ncase $2 in --version|--help) exit $st;; esac\n\n# Exit code 63 means version mismatch.  This often happens when the user\n# tries to use an ancient version of a tool on a file that requires a\n# minimum version.\nif test $st -eq 63; then\n  msg=\"probably too old\"\nelif test $st -eq 127; then\n  # Program was missing.\n  msg=\"missing on your system\"\nelse\n  # Program was found and executed, but failed.  Give up.\n  exit $st\nfi\n\nperl_URL=http://www.perl.org/\nflex_URL=http://flex.sourceforge.net/\ngnu_software_URL=http://www.gnu.org/software\n\nprogram_details ()\n{\n  case $1 in\n    aclocal|automake)\n      echo \"The '$1' program is part of the GNU Automake package:\"\n      echo \"<$gnu_software_URL/automake>\"\n      echo \"It also requires GNU Autoconf, GNU m4 and Perl in order to run:\"\n      echo \"<$gnu_software_URL/autoconf>\"\n      echo \"<$gnu_software_URL/m4/>\"\n      echo \"<$perl_URL>\"\n      ;;\n    autoconf|autom4te|autoheader)\n      echo \"The '$1' program is part of the GNU Autoconf package:\"\n      echo \"<$gnu_software_URL/autoconf/>\"\n      echo \"It also requires GNU m4 and Perl in order to run:\"\n      echo \"<$gnu_software_URL/m4/>\"\n      echo \"<$perl_URL>\"\n      ;;\n  esac\n}\n\ngive_advice ()\n{\n  # Normalize program name to check for.\n  normalized_program=`echo \"$1\" | sed '\n    s/^gnu-//; t\n    s/^gnu//; t\n    s/^g//; t'`\n\n  printf '%s\\n' \"'$1' is $msg.\"\n\n  configure_deps=\"'configure.ac' or m4 files included by 'configure.ac'\"\n  case $normalized_program in\n    autoconf*)\n      echo \"You should only need it if you modified 'configure.ac',\"\n      echo \"or m4 files included by it.\"\n      program_details 'autoconf'\n      ;;\n    autoheader*)\n      echo \"You should only need it if you modified 'acconfig.h' or\"\n      echo \"$configure_deps.\"\n      program_details 'autoheader'\n      ;;\n    automake*)\n      echo \"You should only need it if you modified 'Makefile.am' or\"\n      echo \"$configure_deps.\"\n      program_details 'automake'\n      ;;\n    aclocal*)\n      echo \"You should only need it if you modified 'acinclude.m4' or\"\n      echo \"$configure_deps.\"\n      program_details 'aclocal'\n      ;;\n   autom4te*)\n      echo \"You might have modified some maintainer files that require\"\n      echo \"the 'autom4te' program to be rebuilt.\"\n      program_details 'autom4te'\n      ;;\n    bison*|yacc*)\n      echo \"You should only need it if you modified a '.y' file.\"\n      echo \"You may want to install the GNU Bison package:\"\n      echo \"<$gnu_software_URL/bison/>\"\n      ;;\n    lex*|flex*)\n      echo \"You should only need it if you modified a '.l' file.\"\n      echo \"You may want to install the Fast Lexical Analyzer package:\"\n      echo \"<$flex_URL>\"\n      ;;\n    help2man*)\n      echo \"You should only need it if you modified a dependency\" \\\n           \"of a man page.\"\n      echo \"You may want to install the GNU Help2man package:\"\n      echo \"<$gnu_software_URL/help2man/>\"\n    ;;\n    makeinfo*)\n      echo \"You should only need it if you modified a '.texi' file, or\"\n      echo \"any other file indirectly affecting the aspect of the manual.\"\n      echo \"You might want to install the Texinfo package:\"\n      echo \"<$gnu_software_URL/texinfo/>\"\n      echo \"The spurious makeinfo call might also be the consequence of\"\n      echo \"using a buggy 'make' (AIX, DU, IRIX), in which case you might\"\n      echo \"want to install GNU make:\"\n      echo \"<$gnu_software_URL/make/>\"\n      ;;\n    *)\n      echo \"You might have modified some files without having the proper\"\n      echo \"tools for further handling them.  Check the 'README' file, it\"\n      echo \"often tells you about the needed prerequisites for installing\"\n      echo \"this package.  You may also peek at any GNU archive site, in\"\n      echo \"case some other package contains this missing '$1' program.\"\n      ;;\n  esac\n}\n\ngive_advice \"$1\" | sed -e '1s/^/WARNING: /' \\\n                       -e '2,$s/^/         /' >&2\n\n# Propagate the correct exit status (expected to be 127 for a program\n# not found, 63 for a program that failed due to version mismatch).\nexit $st\n\n# Local variables:\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        },
        {
          "name": "mkinstalldirs",
          "type": "blob",
          "size": 3.455078125,
          "content": "#! /bin/sh\n# mkinstalldirs --- make directory hierarchy\n\nscriptversion=2009-04-28.21; # UTC\n\n# Original author: Noah Friedman <friedman@prep.ai.mit.edu>\n# Created: 1993-05-16\n# Public domain.\n#\n# This file is maintained in Automake, please report\n# bugs to <bug-automake@gnu.org> or send patches to\n# <automake-patches@gnu.org>.\n\nnl='\n'\nIFS=\" \"\"\t$nl\"\nerrstatus=0\ndirmode=\n\nusage=\"\\\nUsage: mkinstalldirs [-h] [--help] [--version] [-m MODE] DIR ...\n\nCreate each directory DIR (with mode MODE, if specified), including all\nleading file name components.\n\nReport bugs to <bug-automake@gnu.org>.\"\n\n# process command line arguments\nwhile test $# -gt 0 ; do\n  case $1 in\n    -h | --help | --h*)         # -h for help\n      echo \"$usage\"\n      exit $?\n      ;;\n    -m)                         # -m PERM arg\n      shift\n      test $# -eq 0 && { echo \"$usage\" 1>&2; exit 1; }\n      dirmode=$1\n      shift\n      ;;\n    --version)\n      echo \"$0 $scriptversion\"\n      exit $?\n      ;;\n    --)                         # stop option processing\n      shift\n      break\n      ;;\n    -*)                         # unknown option\n      echo \"$usage\" 1>&2\n      exit 1\n      ;;\n    *)                          # first non-opt arg\n      break\n      ;;\n  esac\ndone\n\nfor file\ndo\n  if test -d \"$file\"; then\n    shift\n  else\n    break\n  fi\ndone\n\ncase $# in\n  0) exit 0 ;;\nesac\n\n# Solaris 8's mkdir -p isn't thread-safe.  If you mkdir -p a/b and\n# mkdir -p a/c at the same time, both will detect that a is missing,\n# one will create a, then the other will try to create a and die with\n# a \"File exists\" error.  This is a problem when calling mkinstalldirs\n# from a parallel make.  We use --version in the probe to restrict\n# ourselves to GNU mkdir, which is thread-safe.\ncase $dirmode in\n  '')\n    if mkdir -p --version . >/dev/null 2>&1 && test ! -d ./--version; then\n      echo \"mkdir -p -- $*\"\n      exec mkdir -p -- \"$@\"\n    else\n      # On NextStep and OpenStep, the 'mkdir' command does not\n      # recognize any option.  It will interpret all options as\n      # directories to create, and then abort because '.' already\n      # exists.\n      test -d ./-p && rmdir ./-p\n      test -d ./--version && rmdir ./--version\n    fi\n    ;;\n  *)\n    if mkdir -m \"$dirmode\" -p --version . >/dev/null 2>&1 &&\n       test ! -d ./--version; then\n      echo \"mkdir -m $dirmode -p -- $*\"\n      exec mkdir -m \"$dirmode\" -p -- \"$@\"\n    else\n      # Clean up after NextStep and OpenStep mkdir.\n      for d in ./-m ./-p ./--version \"./$dirmode\";\n      do\n        test -d $d && rmdir $d\n      done\n    fi\n    ;;\nesac\n\nfor file\ndo\n  case $file in\n    /*) pathcomp=/ ;;\n    *)  pathcomp= ;;\n  esac\n  oIFS=$IFS\n  IFS=/\n  set fnord $file\n  shift\n  IFS=$oIFS\n\n  for d\n  do\n    test \"x$d\" = x && continue\n\n    pathcomp=$pathcomp$d\n    case $pathcomp in\n      -*) pathcomp=./$pathcomp ;;\n    esac\n\n    if test ! -d \"$pathcomp\"; then\n      echo \"mkdir $pathcomp\"\n\n      mkdir \"$pathcomp\" || lasterr=$?\n\n      if test ! -d \"$pathcomp\"; then\n\terrstatus=$lasterr\n      else\n\tif test ! -z \"$dirmode\"; then\n\t  echo \"chmod $dirmode $pathcomp\"\n\t  lasterr=\n\t  chmod \"$dirmode\" \"$pathcomp\" || lasterr=$?\n\n\t  if test ! -z \"$lasterr\"; then\n\t    errstatus=$lasterr\n\t  fi\n\tfi\n      fi\n    fi\n\n    pathcomp=$pathcomp/\n  done\ndone\n\nexit $errstatus\n\n# Local Variables:\n# mode: shell-script\n# sh-indentation: 2\n# eval: (add-hook 'write-file-hooks 'time-stamp)\n# time-stamp-start: \"scriptversion=\"\n# time-stamp-format: \"%:y-%02m-%02d.%02H\"\n# time-stamp-time-zone: \"UTC\"\n# time-stamp-end: \"; # UTC\"\n# End:\n"
        }
      ]
    }
  ]
}