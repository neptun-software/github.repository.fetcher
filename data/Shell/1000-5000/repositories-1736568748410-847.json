{
  "metadata": {
    "timestamp": 1736568748410,
    "page": 847,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjg1OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "noctuid/tdrop",
      "stars": 1156,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "Changelog.org",
          "type": "blob",
          "size": 1.728515625,
          "content": "* 0.5.0\n- Add tmuxp support for =-s= / =--session=\n- Add herbstluftwm =-a= floating and =-m= / =--monitor-aware= support\n- Allow unmanaging geometry by setting =-x=, =-y=, =-w=, and =-h= to empty strings\n- Add =-N= / =--no-manage= as a shorthand for setting all geometry settings to empty strings\n- Improve debug logging\n- Add =-r= / =--remember= flag to save geometry when hiding and restore when showing\n- Add ~foreach~ command\n- Fix support for floating point geometry percentages\n- Fix long time issue where tdrop could incorrectly grab the wrong window if it had been reassigned the window id of a previously closed dropdown\n- Fix Openbox support on empty desktops\n- Error if dependencies are not installed\n- Allow using tdrop with multiple open X sessions\n- Make other minor bug fixes\n\n* 0.4.0\n- Deprecate -f flag and allow specifying program arguments after the program\n- Fix -a for emacslient\n- Add hide_all command\n- Add --timeout flag\n- Give more specific error message for unknown flags\n- Add github actions shellcheck workflow\n- Silence irrelevant errors\n- Allow specifying empty values for -w, -h, -x, and -y to not alter the window size\n- Add --debug flag\n- Add workaround for using flatpack applications\n- Add support for firefox and brave\n- Add --monitor flag to specify monitor name to create dropdown on\n- Fix -s flag for termite, xterm, etc.\n- Fix for latest alacritty\n- Fix for latest i3\n- Add support for tabbed\n- Add -A / --activate flag to always activate/show dropdown if it is unfocused\n\n* 0.3.0\n- Significant performance improvements, especially with -m\n- Optionally detect current screen for -m based on pointer position\n- Discord support\n- Emacsclient support\n- Qutebsrowser support\n- Trinity Konsole support\n- Other minor fixes/improvements\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.2646484375,
          "content": "Copyright (c) 2015, Fox Kiester\nAll rights reserved.\n\nRedistribution and use in source and binary forms, with or without\nmodification, are permitted provided that the following conditions are met:\n\n* Redistributions of source code must retain the above copyright notice, this\n  list of conditions and the following disclaimer.\n\n* Redistributions in binary form must reproduce the above copyright notice,\n  this list of conditions and the following disclaimer in the documentation\n  and/or other materials provided with the distribution.\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\nAND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\nIMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE\nFOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL\nDAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\nSERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\nCAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\nOR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\nOF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.439453125,
          "content": "PREFIX ?= /usr/local\nBINDIR = $(PREFIX)/bin\nMANDIR = $(PREFIX)/share/man\nLICENSEDIR = $(PREFIX)/share/licenses\n\ninstall:\n\t# 755 is default\n\tinstall -D -m 755 tdrop \"$(DESTDIR)$(BINDIR)\"/tdrop\n\tinstall -D -m 644 tdrop.1 \"$(DESTDIR)$(MANDIR)\"/man1/tdrop.1\n\tinstall -D -m 644 LICENSE \"$(DESTDIR)$(LICENSEDIR)\"/tdrop/LICENSE\n\nuninstall:\n\trm -f \"$(DESTDIR)$(BINDIR)\"/tdrop\n\trm -f \"$(DESTDIR)$(MANDIR)\"/man1/tdrop.1\n\trm -rf \"$(DESTDIR)$(LICENSEDIR)/tdrop\"\n"
        },
        {
          "name": "README.org",
          "type": "blob",
          "size": 18.1279296875,
          "content": "[[https://github.com/noctuid/tdrop/actions?query=workflow%3Alint][https://github.com/noctuid/tdrop/workflows/lint/badge.svg]]\n\n* Demos\nThis is a basic demo where tdrop is used to hide and show a terminal emulator on different desktops/workspaces:\n\n[[http://noctuid.github.io/tdrop/assets/termite.gif]]\n\nThis is a basic demo where tdrop is used to turn the current window (emacs) into a dropdown and then hide and show it on different desktops/workspaces:\n\n[[http://noctuid.github.io/tdrop/assets/current.gif]]\n\n* Advantages Over Other Dropdown Terminals\n- Supports essentially any terminal or other program of your choice\n- Supports many window managers\n- Supports turning any window into a dropdown on the fly\n- Supports enforcing dropdown sizing and placement (e.g. to prevent panels from being hidden)\n- Supports tiled and floating dropdowns\n- Supports floating dropdown instances without requiring the user to create a rule to float all program instances (for some window managers that support both tiling and floating)\n- Supports using multiple dropdowns of the same program (see =-n=)\n- Supports automatically hiding a dropdown when opening a new window from it and then optionally re-showing the dropdown when the window is closed (this is somewhat comparable to \"swallowing\", e.g. in dwm)\n- Supports automatically starting programs and tmux, tmuxinator, tmuxifier or tmuxp sessions\n- Supports automatically resizing dropdowns based on the current monitor's size\n- Has hooks for executing user commands\n\n* Requirements\n- bash\n- basic utilities (probably already installed on linux)\n  - GNU coreutils (for install, tee, cat, mkdir, head, etc.)\n  - gawk\n  - GNU grep\n  - procps-ng (for pgrep)\n- xprop\n- xwininfo\n- xdotool\n\nOptional:\n- xrandr (required for -m)\n- tmux (required for -s)\n- tmuxinator (optional for -s)\n- tmuxifier (optional for -s)\n- tmuxp (optional for -s)\n\n* Installation and Usage\n** Installation\nTdrop is in the AUR as =tdrop-git= and is packaged for Void Linux as =tdrop=. It can also be installed by cloning this repo and running ~sudo make install~. One can then bind a key to it (e.g. with sxhkd).\n\n** Basic Sxhkd Example\n#+BEGIN_EXAMPLE\n# negative -w arg to account for a border width (default: 100%)\nalt + s\n    tdrop -ma -w -4 -y \"$PANEL_HEIGHT\" -s dropdown kitty\n#+END_EXAMPLE\n\nThe positional argument should be the name of a program in =$PATH= (as opposed to the full path to a program). It should always come after any tdrop flags. Flags for the program can come after it (e.g. ~tdrop urxvt -title foo~).\n\n** Basic Flags\nFor a full list of flags and documentation, see the manpage.\n\n=-w= / =--width=, =-h= / =--height=, =-x= / =--xoff=, and =-y= / =--yoff= can be used to set the window size/position. The argument to any of these can be a number (e.g. =-w 800=) or a percentage (e.g. =-w 100%= or =-w 33.3%=) or empty (e.g. =-w \"\" -h \"\"= to prevent altering the window's size). Negative numbers correspond to that many pixels less than 100% of the screen width (e.g. =-w -4=). To unmanage all geometry settings, you can specify =-N= / =--no-manage=. This is the same as =-w \"\" -h \"\" -x \"\" -y \"\"= and should not be used with any other geometry flags.\n\nIf you want to be able to resize the dropdown after creating it, you can use the =-r= / =--remember= flag to store/restore the dropdown geometry when hiding/showing.\n\nBy default, tdrop will hide the dropdown if it is shown anywhere. =-A= / =--activate= can be used to always activate/show the dropdown if it is not focused.\n\n=-s= / =--session= should only be used for supported terminals and if the user wants to start/attach to a tmux, tmuxinator, tmuxifier or tmxup session.  Note that you do not need to use =-s= to start tmux.  You can always pass arguments/flags to the program that tdrop runs, e.g. =tdrop kitty tmux=.\n\nTdrop has basic checks to print errors for malformed commands (e.g. to require one positional argument). If a tdrop command does not work, please run it in a terminal or check =/tmp/tdrop/log= for error messages and consult the manpage before making an issue. For more information, see the [[#troubleshooting][Troubleshooting]] section.\n\n*** Changes\nLong options can now be used with whitespace instead of requiring a ~=~ (i.e. =--long-opt value= and ~--long-opt=value~ are both fine).\n\nOld users please note that =-W|--normal-window=, =-z|--sleep-terminal=, and =-Z|--sleep-window= are no longer necessary and have been removed. Similarly, the old hook flags (=-p=, =-P=, =-M=, and =-O= as well as =--create-hook= and =--map-hook=) have been replaced with more specific and useful versions.\n\n** Automatic Window Manager Detection (=-a=)\n=-a= / =--auto-detect-wm= can be specified to automatically set certain options (=-l=, =-L=, =-d=, and/or =-i=) based on the current window manager. These flags (whether automatically or manually set) may be necessary for tdrop to behave correctly (e.g. they are required for =-w=, =-h=, =-x=, and =-y= to work correctly for tiling window managers with floating support). See the manpage for further details about these flags.\n\nNote that if you've used [[https://tools.suckless.org/x/wmname][wmname]] to change your window manager's name, tdrop will use any settings for that name instead. In this case, you will generally need to specify the real name of your window manager using the =--wm= flag in order for =-a= to work correctly (e.g. if you are using bspwm and have run =wmname LG3D=, you will need to specify =--wm bspwm=).\n\n** Monitor Awareness (=-m=)\n =-m= / =--monitor-aware= can be specified to automatically resize the dropdown based on the current monitor's size when percentages are used for =-w= and/or =-h=. This may be helpful for users of multiple monitors who don't want dropdowns spanning across monitors.\n\nThis is particularly useful when using a percentage or negative value with =-w=, =-h=, =-x=, and/or =-y=. For example, =-w -4= normally corresponds to a width 4 pixels less than 100% of the screen width (potentially the combined width of multiple monitors). With =-m=, the pixel values are calculated using the dimensions of the current monitor alone. Negative values may be useful when the window manager (possibly due to window decorations) causes a dropdown with =-w 100%= to go over the edge of the screen. The =-m= option will also automatically resize and/or reposition the dropdown when opening it on a different monitor when one or more of the geometry arguments are negative or percentages.\n\nSome window managers allow querying what the current monitor is or directly for its geometry (e.g. bspwm, i3, and herbstluftwm), but for other window managers, tdrop determines the current monitor based on the position of the active window. For these window managers, if the desktop is empty, tdrop must wait for the dropdown to be created or mapped before getting the monitor info. This may cause a slight delay before the dropdown is properly resized. If =-m= does not work at all or there is a specific way to query for the current monitor in your window manager, please make an issue.\n\nSee the manpage for more information.\n\n** Wayland support\nTdrop does not support programs that use Wayland directly, but it does work under Wayland if the program uses XWayland. If your program defaults to using Wayland, you can generally force it to use XWayland by setting the environment variable =WAYLAND_DISPLAY=no=.\n\nAlso note that certain tdrop features don't work under Wayland due to limitations of =xdotool=. For instance, =-m= / =--monitor-aware= only works when combined with =-t= / =--pointer-monitor-detection=.\n\nExample:\n#+begin_example\nWAYLAND_DISPLAY=no tdrop -mta alacritty\n#+end_example\n\nThe following projects emulate the main features of =tdrop=:\n\n| Project | Window Manager |\n| [[https://github.com/Schweber/hdrop][hdrop]] | [[https://github.com/hyprwm/Hyprland][Hyprland]] |\n| [[https://github.com/Schweber/ndrop][ndrop]] | [[https://github.com/YaLTeR/niri][niri]] |\n\n** Flatpak\nAs [[https://www.flatpak.org/][Flatpak]] jails applications, the PID cannot be used to find the attached window. A class name has to be given in order to find it, with =--class=.\n\nAs Flatpak is considered by tdrop as the program to run, tdrop cannot differentiate 2 different flatpak applications. Use the =-n= option for this purpose.\n\nExample:\n#+begin_example\ntdrop -ma -n signal --class=signal flatpak run org.signal.Signal\ntdrop -ma -n firefox --class=firefox flatpak run org.mozilla.firefox\n#+end_example\n\n** Flicker\nFor some window managers that require a window to be repositioned after re-mapping it, some flicker may be noticeable. This flicker has been mostly fixed for some window managers (e.g. in the Gnome Shell and Cinnamon DEs) and improved for others. It is usually worse on tiling managers where the window must be re-floated every time it is mapped. The way around this is to use rules to either always have the class or name (see =--name=) floated or one-time rules to only float the next instance of a class. For example, since bspwm has oneshot rules and generally doesn't alter the size/position of a window, there isn't any movement flicker.\n\nA more consistent workaround to improve visual flickering regardless of the window manager is to enable fade-in for the compositor. For picom this can be done by setting =fading = true;= and adjusting the =fade-delta= in the =~/.config/picom.conf= accordingly.\n\n** Hooks\nTdrop provides hook flags that the user can specify to run commands at various stages during execution. These commands can make use of any global, internal tdrop variable, such as =$width=, =$height=, =$xoff=, =$yoff=, =$class=, and =$wid= (to prevent evaluation of these variables, the user can specify the hook command in single quotes). For example, to set a dropdown as always on top, the user could specify =-P 'wmctrl -i -r $wid -b add,above'=.\n\nNote that for =--pre-map-hook= and =--pre-map-float-command=, the window id is not guarunteed to be known (since the window may not have yet been created), so any script that makes use of these flags should first check if =$wid= is defined. The window id will not be defined for =--pre-create-hook= (even for =current=; I can change this if there is a use case for it).\n\n*** Pre Create\n=-c= / =--pre-create-hook=\n\n*Program* The command will run once before the program is started.\n\n*Current* The command will run once before unmapping the current window.\n\n*Hide and Show* No effect.\n\n*** Post Create\n=-C= / =--post-create-hook=\n\n*Program* The command will run once after the program is started and its window is active.\n\n*Current* The command will run once after unmapping the current window.\n\n*Hide and Show* No effect.\n\n*** Pre Map\n=-p= / =--pre-map-hook=\n\n*Program* / *Current* / *Show* The command will run before creating the window and before subsequently mapping the window.\n\n*Hide* No effect.\n\n*** Post Map\n=-P= / =--post-map-hook=\n\n*Program* / *Current* / *Show* The command will run after creating the window and after subsequently mapping the window. Note that unlike the pre-map hook, this will always run when showing the window, even if it was not previously unmapped (e.g. it is just being activated if =-A= is specified, or it is just being moved from another desktop). If you need different behavior (e.g. you need newly added distinct =--(pre|post)-show-hook= flags), please comment on [[https://github.com/noctuid/tdrop/issues/354][this issue]].\n\n*Hide* No effect.\n\n*** Pre Unmap\n=-u= / =--pre-unmap-hook=\n\n*Program* / *Current* / *Hide* The command will run before unmapping the window.\n\n*Show* No effect.\n\n*** Post Unmap\n=-U= / =--post-unmap-hook=\n\n*Program* / *Current* / *Hide* The command will run after unmapping the window.\n\n*Show* No effect.\n\n*** Pre Float\n=-l= / =--pre-map-float-command=\n\nA command specifically meant to float the window. Note that if you specify this, it will override any defaults from =-a=.\n\n*Program* / *Current* The command will run before mapping the window.\n\n*Hide* No effect.\n\n*Show* The command will run before mapping the window only if it was previously floating.\n\n*** Post Float\n=-L= / =--post-map-float-command=\n\nA command specifically meant to float the window. Note that if you specify this, it will override any defaults from =-a=.\n\n*Program* / *Current* The command will run after mapping the window.\n\n*Hide* No effect.\n\n*Show* The command will run after mapping the window only if it was previously floating.\n\n** Auto-hiding\nIn addition to creating dropdowns, tdrop can automatically hide a window and later un-hide it. For example, if gvim is opened to write a git commit message from the terminal, tdrop can automatically hide the terminal (dropdown or not) and restore it after the user is finished writing the commit message:\n\n#+BEGIN_EXAMPLE\nhide_on_open() {\n    tdrop -a auto_hide && \"$@\" && tdrop -a auto_show\n}\nalias gc='hide_on_open git commit'\n#+END_EXAMPLE\n\nThe most useful application of this functionality is probably when opening videos, images, etc. in an external program from a file manager like ranger. For example, in the =rifle.conf=:\n\n#+BEGIN_EXAMPLE\nmime ^video, has mpv, X, flag f = tdrop -a auto_hide && mpv -- \"$@\" && tdrop -a auto_show\n#+END_EXAMPLE\n\n** Other Commands\nIf =hide_all= is given instead of a program name, tdrop will hide all visible dropdowns.\n\nIf =foreach= is specified, tdrop will evaluate the following command for each dropdown. Here are some example commands:\n#+begin_src sh\n# same as hide_all \ntdrop foreach 'unmap $wid'\n\n# hide only floating dropdowns on herbstluftwm\ntdrop foreach 'herbstclient compare clients.$(printf 0x%x $wid).floating = on && unmap $wid'\n#+end_src\n\n* Tested With\n** Terminals\nThese terminals have been tested with tdrop and support the =-s= and =-a= flags unless otherwise specified:\n\n- Alacritty\n- cool-retro-term\n- GNOME terminal (GNOME, Unity, Cinnamon, etc.)\n- [[https://github.com/kovidgoyal/kitty][kitty]]\n- Konsole (KDE)\n- LilyTerm (requires =confirm_to_execute_command 0= in config for =-s= or =-f '-e...'=)\n- LXTerminal (LXDE)\n- MATE terminal (MATE)\n- QTerminal (LXDE)\n- Roxterm\n- Sakura\n- Terminology (Enlightenment)\n- Termite\n- Tilix (previously terminix)\n- tinyterm/minyterm\n- URxvt (including urxvtd)\n- Wezterm\n- Xfce4-terminal (XFCE)\n- xiate\n- XTerm\n\nIf your terminal doesn't work with tdrop, feel free to make an issue. Please follow the steps in the [[#troubleshooting][Troubleshooting]] section.\n\n** Other Programs\n- Chrome/chromium\n- Firefox\n- Brave\n- Emacs and emacsclient\n- Discord\n- Tabbed\n- Todoist\n- Postman\n- Spotify\n- Clementine and Strawberry\n- etc.\n\n** Window Managers\nThe primary goal of tdrop is to \"just work\" with any window manager. The primary differences between how tdrop deals with different window managers is the strategy it takes for floating only the dropdown (as opposed to all instances of the class that the dropdown is). There are three types of window managers as far as tdrop is concerned:\n\n*** Tiling without Floating Support\nIf your window manager does not support floating, there's nothing to worry about. Binding a key to =tdrop <flags> terminal= should work. Options for resizing and movement that work only with floating window managers are not supported. One can, however, add post-map and post-unmap commands to do something like change the layout to fullscreen when showing a dropdown then revert the layout when hiding the dropdown. Previously (=-a=) would automatically do this for herbstluftwm, but it now supports floating.\n\n*** Floating/Stacking\nFor floating window managers, tdrop should also generally \"just work\", but you may need to add the =-a= option for auto-showing to correctly restore the previous geometry.\n\nThat said, these are the floating window managers that currently have been tested:\n- mutter (gnome shell)\n- muffin (cinnamon)\n- xfwm4 (xfce)\n- metacity (gnome 2)\n- marco (mate)\n- kwin (kde)\n- openbox (lxde)\n- compiz (unity)\n- pekwm\n- fluxbox\n- blackbox\n- fvwm\n- sawfish\n- goomwwm\n\nIf your dropdown moves out of place when being shown, make an issue, and I will add settings for it.\n\n*** Tiling with Floating Support\nThese window managers currently will work with =-a= for a floating (instead of tiled) dropdown:\n- bspwm (support for versions prior to 0.9.1 was dropped on 2016/09/22)\n- herbstluftwm (v0.8.0 or higher)\n- i3\n- awesome\n\nAwesome support may be buggy; if you encounter problems, please report them.\n\n* Why Not Use wmctrl?\nNecessary features don't work on many window managers, including mine.\n\n* Why Not Use wmutils?\nMaybe in the future. The only advantage I can see over xdotool is that it can toggle mapping (=mapw -t=), but this wouldn't be used in this script anyway since different code is executed depending on whether or not the window is mapped or unmapped. Also the command names are somewhat cryptic.\n\n* Similar\n- [[https://github.com/lharding/lsh-bin/blob/master/drawer][drawer]]\n- [[https://github.com/Schweber/hdrop/tree/main][hdrop]]\n\n* Troubleshooting\n:PROPERTIES:\n:CUSTOM_ID: troubleshooting\n:END:\n\nYou can specify the =--debug= flag to have tdrop print more verbose debugging output.  Tdrop will automatically also save this output in =/tmp/tdrop_\"$USER\"_\"$DISPLAY\"/log=.  If tdrop does not appear at all, or there is some error, you can add the =--debug= flag and examine the log file or run the tdrop command in a terminal to see if the issue is obvious (e.g. tdrop will error if you do not have the required dependencies installed).\n\n** Tdrop does not work with some terminal/program\nPlease make an issue. Including the following information would help resolve the problem more quickly.\n\nBasic:\n- The incorrect behavior: Does the window appear at all? Is the problem that it is not floated correctly in a supported wm? Or is it a feature request for =-a= support?\n- Whether things work as expected with a basic =tdrop <terminal>= (no flags) or whether the issue occurs with a specific flag (probably =-s=)\n\nAdditional helpful information:\n- If the problem only occurs with the =-s= flag, the issue is likely due to the fact that not all terminals have compatible =-e= flags. It would be helpful if information on how the terminal's flag for executing a command works. Is it something other than =-e=? Are quotations required or incorrect (\"-e 'command -flags ...'\" vs \"-e command flags\")?\n- If the issue is with the dropdown behavior (e.g. tdrop keeps opening new windows for the program), does the program share a PID across all instances (e.g. open several windows and provide the output of =pgrep -l <program>=)? Does the program have a daemon and client?\n"
        },
        {
          "name": "tdrop",
          "type": "blob",
          "size": 34.94921875,
          "content": "#!/usr/bin/env bash\n\nMUTDROP_PATH=/tmp/tdrop_\"$USER\"_\"$DISPLAY\"\nLOG_FILE=\"$MUTDROP_PATH\"/log\nNOAUTOHIDE_FILE=\"$MUTDROP_PATH\"/no_autohide\nGEO_DIR=\"$MUTDROP_PATH\"/geometries\nWID_DIR=\"$MUTDROP_PATH\"/wids\nCLASS_DIR=\"$MUTDROP_PATH\"/classes\nHIDE_DIR=\"$MUTDROP_PATH\"/auto_hidden\n# shellcheck disable=SC2174\nmkdir -m 700 -p \"$MUTDROP_PATH\"/{auto_hidden,classes,geometries,wids}\n\nFLOATING_WMS_REGEXP='Openbox|pekwm|Fluxbox|Blackbox|xfwm4|Metacity|FVWM|Sawfish|GoomwW|Mutter|GNOME Shell|Mutter \\(Muffin\\)|KWin|Metacity \\(Marco\\)|[Cc]ompiz'\nGEO_REGEXP='^xoff=-?[0-9]+\nyoff=-?[0-9]+\nwidth=?[0-9]+\nheight=?[0-9]+$'\n\nprint_help() {\n\techo \"\nusage: tdrop [options] <program> [program options ...]\n                       or 'current'\n                       or one of 'auto_show'/'auto_hide'/'toggle_auto_hide'\n                       or 'hide_all'\n                       or 'foreach'\noptions:\n\t-h height\tspecify a height for a newly created term (default: 45%)\n\t-w width\tspecify a width for a newly created term (default: 100%)\n\t-x pos\t\tspecify x offset for a newly created term (default: 0)\n\t-y pos\t\tspecify y offset for a newly created term (default: 1, see man)\n\t-s name\t\tname for tmux/tmuxinator/tmuxifier/tmuxp session (supported\n\t\t\tterminal required)\n\t-n num\t\tnum or extra text; only needed if for the purpose of using\n\t\t\tmultiple dropdowns of same program\n\t-c cmd\t\tprovide a pre-create command\n\t-C cmd\t\tprovide a post-create command\n\t-l cmd\t\tprovide a command to float the window before it is mapped\n\t-L cmd\t\tprovide a command to float the window after it is mapped\n\t-p cmd\t\tprovide a pre-map command\n\t-P cmd\t\tprovide a post-map command\n\t-u cmd\t\tprovide a pre-unmap command\n\t-U cmd\t\tprovide a post-unmap command\n\t-d XxY\t\tgive decoration/border size to accurately restore window\n\t\t\tposition; only applicable with auto_show\n\t-S\t\tcan be used to fix saved geometry with auto_hide; see manpage\n\t-i cmd\t\tprovide a command to detect whether the current window is a\n\t\t\tfloating window; on applicable with auto_hide\n\t-f flags\tspecify flags/options to be used when creating the term or\n\t\t\twindow (e.g. -f '--title mytitle'; default: none).\n\t\t\tNOTE: This flag is deprecated. Specify flags after the program name\n\t\t\tinstead. This flag may be removed in the future.\n\t\t\tCaution: if there is a tmux session specified (with -s), the option\n\t\t\tto execute a program (usually -e for terminal programs) is\n\t\t\timplicitly added by tdrop\n\t-a\t\tautomatically detect window manager and set relevant options\n\t\t\t(e.g. this makes specifying -l/-L, -d, and -i unnecessary\n\t\t\tfor supported WMs) (default: false)\n\t-m\t\tfor use with multiple monitors and only with dropdowns\n\t\t\t(i.e. not for auto_show or auto_hide); convert percentages used\n\t\t\tfor width or height to values relative to the size of the\n\t\t\tcurrent monitor and force resizing of the dropdown when\n\t\t\tthe monitor changes (default: false)\n\t-t\t\tuse mouse pointer location for detecting which monitor is the current\n\t\t\tone\n\t-A\t\talways show/activate the window if it is not focused\n\t-r\t\tsave geometry when hiding, restore geometry when showing\n\t-N\t\tsame as -x '' -y '' -w '' -h '' (do not use with those options)\n\t--wm\t\tset the window manager name to mimic another window manager\n\t\t\t(for use with -a)\n\t--class name\tmanually specify the class of the window (can be obtained with xprop)\n\t--name name\tset a new name for the dropdown window\n\t--clear\t\tclear saved window id; useful after accidentally make a\n\t\t\twindow a dropdown (e.g. '$ tdrop --clear current')\n\t--no-cancel\tdon't cancel auto-showing (default is to prevent this when\n\t\t\tmanually toggling a window after it is auto-hidden)\n\t--timeout\tset the timeout (in seconds) that tdrop will wait for a window\n\t\t\tto appear before giving up in case the program fails to start\n\t\t\t(default: 10)\n\t--debug\t\tprint debugging information to /tmp/tdrop_<user>/log\n\t--help\t\tprint help\n\nSee man page for more options and details.\n\"\n}\n\nfirst_message=true\nmsg() {\n\tif $first_message; then\n\t\techo \"--------------------------------------------------\" >> \"$LOG_FILE\"\n\t\tfirst_message=false\n\tfi\n\techo \"$(date \"+%F %T\") $*\" > >(tee -a \"$LOG_FILE\" >&2)\n}\n\nerror() {\n\tmsg \"Error: $*\"\n\texit 1\n}\n\ndebug=false\ndebug() {\n\tif $debug; then\n\t\tmsg \"Debug $*\"\n\tfi\n}\n\ndebug \"command: tdrop $*\"\n\n# * Default Options and Option Parsing\n# xdotool can take percentages; cannot take decimal percentages though\nwidth=\"100%\"\nheight=\"45%\"\nxoff=0\nyoff=2\nsession_name=\nnum=\npre_create=\npost_create=\npre_float=\npost_float=\npre_map=\npost_map=\npre_unmap=\npost_unmap=\ndec_fix=\n# NOTE:\n# pekwm, xfwm4, sawfish, openbox need subtract_when_same to be true\n# for awesome, fluxbox, blackbox, mutter, fvwm, and metacity, the value\n# does not matter\n# set in decoration_settings\nsubtract_when_same=\nis_floating=\nprogram_flags=()\nclearwid=false\ncancel_auto_show=true\nauto_detect_wm=false\nalways_activate=false\nmonitor_aware=false\nmonitor=\npointer_monitor_detection=false\nwm=\nwm_wid=\nuser_set_wm=false\nclass=\nname=\ntimeout=10\nremember_geometry=false\nwhile getopts :h:w:x:y:s:n:c:C:l:L:p:P:u:U:d:S:i:f:-:aAmNtr opt\ndo\n\tcase $opt in\n\t\th) height=$OPTARG;;\n\t\tw) width=$OPTARG;;\n\t\tx) xoff=$OPTARG;;\n\t\ty) yoff=$OPTARG;;\n\t\ts) session_name=$OPTARG;;\n\t\tn) num=$OPTARG;;\n\t\tc) pre_create=$OPTARG;;\n\t\tC) post_create=$OPTARG;;\n\t\tl) pre_float=$OPTARG;;\n\t\tL) post_float=$OPTARG;;\n\t\tp) pre_map=$OPTARG;;\n\t\tP) post_map=$OPTARG;;\n\t\tu) pre_unmap=$OPTARG;;\n\t\tU) post_unmap=$OPTARG;;\n\t\td) dec_fix=$OPTARG;;\n\t\tS) subtract_when_same=false;;\n\t\ti) is_floating=$OPTARG;;\n\t\tf) eval \"program_flags=($OPTARG)\";;\n\t\ta) auto_detect_wm=true;;\n\t\tA) always_activate=true;;\n\t\tm) monitor_aware=true;;\n\t\tt) pointer_monitor_detection=true;;\n\t\tr) remember_geometry=true;;\n\t\tN) xoff=\n\t\t   yoff=\n\t\t   width=\n\t\t   height=;;\n\t\t-)\n\t\t\tif [[ $OPTARG =~ ^(auto-detect-wm|monitor-aware|pointer-monitor-detection|clear|no-cancel|debug|remember|no-manage|help)$ ]] || \\\n\t\t\t\t   [[ $OPTARG == *=* ]]; then\n\t\t\t\tOPTION=${OPTARG%%=*}\n\t\t\t\tOPTARG=${OPTARG#*=}\n\t\t\telse\n\t\t\t\tOPTION=$OPTARG\n\t\t\t\t# shellcheck disable=SC2124\n\t\t\t\tOPTARG=${@:$OPTIND:1}\n\t\t\t\t((OPTIND++))\n\t\t\tfi\n\t\t\tcase $OPTION in\n\t\t\t\theight) height=$OPTARG;;\n\t\t\t\twidth) width=$OPTARG;;\n\t\t\t\tx-offset) xoff=$OPTARG;;\n\t\t\t\ty-offset) yoff=$OPTARG;;\n\t\t\t\tsession) session_name=$OPTARG;;\n\t\t\t\tnumber) num=$OPTARG;;\n\t\t\t\tpre-create-hook) pre_create=$OPTARG;;\n\t\t\t\tpost-create-hook) post_create=$OPTARG;;\n\t\t\t\tpre-map-float-command) pre_float=$OPTARG;;\n\t\t\t\tpost-map-float-command) post_float=$OPTARG;;\n\t\t\t\tpre-map-hook) pre_map=$OPTARG;;\n\t\t\t\tpost-map-hook) post_map=$OPTARG;;\n\t\t\t\tpre-unmap-hook) pre_unmap=$OPTARG;;\n\t\t\t\tpost-unmap-hook) post_unmap=$OPTARG;;\n\t\t\t\tdecoration-fix) dec_fix=$OPTARG;;\n\t\t\t\tno-subtract-when-same) subtract_when_same=false;;\n\t\t\t\tis-floating) is_floating=$OPTARG;;\n\t\t\t\tprogram-flags) eval \"program_flags=($OPTARG)\";;\n\t\t\t\tauto-detect-wm) auto_detect_wm=true;;\n\t\t\t\tactivate) always_activate=true;;\n\t\t\t\tmonitor-aware) monitor_aware=true;;\n\t\t\t\tpointer-monitor-detection) pointer_monitor_detection=true;;\n\t\t\t\tmonitor) monitor=$OPTARG;;\n\t\t\t\twm) wm=$OPTARG\n\t\t\t\t\tuser_set_wm=true;;\n\t\t\t\tclass) class=$OPTARG;;\n\t\t\t\tname) name=$OPTARG;;\n\t\t\t\tclear) clearwid=true;;\n\t\t\t\tno-cancel) cancel_auto_show=false;;\n\t\t\t\ttimeout) timeout=$OPTARG;;\n\t\t\t\tdebug) debug=true;;\n\t\t\t\tremember) remember_geometry=true;;\n\t\t\t\tno-manage) xoff=\n\t\t\t\t\t\t   yoff=\n\t\t\t\t\t\t   width=\n\t\t\t\t\t\t   height=;;\n\t\t\t\thelp) print_help; exit;;\n\t\t\t\t*) error \"Unknown option --$OPTION.\" \\\n\t\t\t\t\t\t \"Use --help to see available flags.\";;\n\t\t\tesac;;\n\t\t*) error \"Unknown option -$OPTARG.\" \\\n\t\t\t\t \"Use --help to see available flags.\";;\n\tesac\ndone\nshift \"$((OPTIND-1))\"\nprogram=$1\n\nif [[ ${#program_flags[@]} -eq 0 ]]; then\n\tprogram_flags=(\"${@:2}\")\nfi\n\nif [[ -z $program ]]; then\n\terror \"Program to run is required as a positional argument.\" \\\n\t\t  \"For help use --help or see the manpage.\"\nfi\n\n# check that the program is in PATH\nif [[ ! $program =~ ^(current|auto_hide|auto_show|toggle_auto_hide|hide_all|foreach)$ ]] && \\\n\t   ! hash \"$program\" 2> /dev/null; then\n\terror \"The program ($program) should be in PATH.\"\nfi\n\n# validate options that require number values\nif [[ ! $height$width$xoff$yoff =~ ^[0-9%-]*$ ]]; then\n\terror \"The -h, -w, -x, and -y values must be numbers (or percentages).\"\nfi\nif [[ -n $dec_fix ]] && [[ ! $dec_fix =~ ^-?[0-9]+x-?[0-9]+$ ]]; then\n\terror \"The decoration fix value must have form 'num'x'num'.\" \\\n\t\t  \"The numbers can be negative or zero.\"\nfi\n\n# check that dependencies are installed\nif ! hash xprop xwininfo xdotool; then\n\terror \"Xprop, xwininfo, and xdotool must all be installed.\"\nfi\n\nif ! hash gawk; then\n\terror \"Gawk must be installed.\"\nfi\n\nif ! hash pgrep; then\n\terror \"Pgrep must be installed.\"\nfi\n\nif [[ -n $monitor_aware ]] && ! hash xrandr 2> /dev/null; then\n\terror \"Xrandr must be installed to use -m / --monitor-aware.\"\nfi\n\nif [[ -n $session_name ]] && ! hash tmux 2> /dev/null; then\n\terror \"Tmux must be installed to use -s / --session.\"\nfi\n\n# non-user-settable global vars\nwid=\n\n# * Multiple Monitor Automatic Re-Sizing\npercent_of_total() { # percent total\n\t# use gawk to allow floating point percentages\n\tgawk \"BEGIN {printf(\\\"%.0f\\\", 0.01*${1%\\%}*$2)}\"\n\t# echo $((${1%\\%} * ${2} / 100))\n}\n\n# acts on globals\nconvert_geometry_to_pixels() {\n\ttotal_width=$1\n\ttotal_height=$2\n\tlocal minus_width minus_height minus_xoff minus_yoff\n\tif [[ $width =~ %$ ]]; then\n\t\twidth=$(percent_of_total \"$width\" \"$total_width\")\n\telif [[ $width =~ ^- ]]; then\n\t\tminus_width=${width#-}\n\t\twidth=$((total_width-minus_width))\n\tfi\n\tif [[ $height =~ %$ ]]; then\n\t\theight=$(percent_of_total \"$height\" \"$total_height\")\n\telif [[ $height =~ ^- ]]; then\n\t\tminus_height=${height#-}\n\t\theight=$((total_height-minus_height))\n\tfi\n\tif [[ $xoff =~ %$ ]]; then\n\t\txoff=$(percent_of_total \"$xoff\" \"$total_width\")\n\telif [[ $xoff =~ ^- ]]; then\n\t\tminus_xoff=${xoff#-}\n\t\txoff=$((total_width-minus_xoff))\n\tfi\n\tif [[ $yoff =~ %$ ]]; then\n\t\tyoff=$(percent_of_total \"$yoff\" \"$total_height\")\n\telif [[ $yoff =~ ^- ]]; then\n\t\tminus_yoff=${yoff#-}\n\t\tyoff=$((total_height-minus_yoff))\n\tfi\n}\n\n# meant to set variables for calling function given geometry:\n# - x_begin\n# - y_begin\n# - x_width\n# - x_height\nsplit_geometry() { # <monitor geometry>\n\tmonitor_geo=$1\n\t# x_begin=$(echo \"$monitor_geo\" | gawk -F '+' '{print $2}')\n\tx_begin=${monitor_geo#*+}\n\tx_begin=${x_begin%+*}\n\t# y_begin=$(echo \"$monitor_geo\" | gawk -F '+' '{print $3}')\n\ty_begin=${monitor_geo##*+}\n\t# x_width=$(echo \"$monitor_geo\" | gawk -F 'x' '{print $1}')\n\tx_width=${monitor_geo%x*}\n\t# y_height=$(echo \"$monitor_geo\" | gawk -F 'x|+' '{print $2}')\n\ty_height=${monitor_geo#*x}\n\ty_height=${y_height%%+*}\n}\n\n# sets these variables for the calling function to use:\n# - x_begin\n# - y_begin\n# - x_width\n# - y_height\npopulate_current_monitor_geometry() {\n\t# it is conceivable that a user may want to use -m but not -a, so\n\t# get the wm from within this function\n\n    # get current monitor\n\tlocal current_monitor\n\tif [[ -n $monitor ]]; then\n\t\tcurrent_monitor=$monitor\n\telif [[ $wm == bspwm ]]; then\n\t\tcurrent_monitor=$(bspc query --names --monitors --monitor)\n\telif [[ $wm == i3 ]]; then\n\t\t# TODO use jq if installed\n\t\t# I'd rather not make jq a dependency\n\t\tcurrent_monitor=$(i3-msg -t get_workspaces | sed 's/\"num\"/\\n/g' | \\\n\t\t\t\t\t\t\t  gawk -F ',' '/focused\":true/ {sub(\".*output\",\"\"); gsub(\"[:\\\"]\",\"\"); print $1}')\n\telif [[ $wm != herbstluftwm ]]; then\n\t\tlocal current_x current_y monitors_info x_end y_end\n\t\tif ! $pointer_monitor_detection; then\n\t\t\t# determine current monitor using active window\n\t\t\tlocal wid wininfo\n\t\t\twid=$(get_active_wid_or_empty)\n\t\t\tif [[ -z $wid ]]; then\n\t\t\t\t# will try again after remapping or creating the dropdown\n\t\t\t\treturn 1\n\t\t\tfi\n\n\t\t\twininfo=$(xwininfo -id \"$wid\")\n\t\t\tcurrent_x=$(echo \"$wininfo\" | gawk '/Absolute.*X/ {print $4}')\n\t\t\tcurrent_y=$(echo \"$wininfo\" | gawk '/Absolute.*Y/ {print $4}')\n\t\telse\n\t\t\t# shellcheck disable=SC2034\n\t\t\tlocal X Y SCREEN WINDOW\n\t\t\t# determine current monitor using pointer location\n\t\t\teval \"$(xdotool getmouselocation --shell)\"\n\t\t\tcurrent_x=X\n\t\t\tcurrent_y=Y\n\t\tfi\n\t\tmonitors_info=$(xrandr --current | gawk '/ connected/ {gsub(\"primary \",\"\"); print}')\n\t\twhile read -r monitor; do\n\t\t\tmonitor_geo=$(echo \"$monitor\" | gawk '{print $3}')\n\t\t\tif [[ $monitor_geo =~ ^[0-9]+x[0-9]+\\+[0-9]+\\+[0-9]+$ ]]; then\n\t\t\t\tsplit_geometry \"$monitor_geo\"\n\t\t\t\tx_end=$((x_begin+x_width))\n\t\t\t\ty_end=$((y_begin+y_height))\n\t\t\t\tif [[ $current_x -ge $x_begin ]] && [[ $current_x -lt $x_end ]] && \\\n\t\t\t\t\t   [[ $current_y -ge $y_begin ]] && [[ $current_y -lt $y_end ]]; then\n\t\t\t\t\t# current_monitor=$(echo \"$monitor\" | gawk '{print $1}')\n\t\t\t\t\tcurrent_monitor=${monitor%% *}\n\t\t\t\t\tbreak\n\t\t\t\tfi\n\t\t\tfi\n\t\tdone <<< \"$monitors_info\"\n\tfi\n\n\tlocal monitor_geo\n\tif [[ $wm == herbstluftwm ]]; then\n\t\t# fine if no monitor; will use current\n\t\tmonitor_geo=$(herbstclient monitor_rect \"$monitor\")\n\t\t# not using read because behavior depends on bash version\n\t\tx_begin=${monitor_geo%% *}\n\t\ty_begin=${monitor_geo#* }\n\t\ty_begin=${y_begin%% *}\n\t\tx_width=${monitor_geo#* }\n\t\tx_width=${x_width#* }\n\t\tx_width=${x_width%% *}\n\t\ty_height=${monitor_geo##* }\n\telse\n\t\tmonitor_geo=$(xrandr --current | \\\n\t\t\t\t\t\t  gawk \"/^$current_monitor/ {gsub(\\\"primary \\\",\\\"\\\"); print \\$3}\")\n\t\tsplit_geometry \"$monitor_geo\"\n\tfi\n}\n\nupdate_geometry_settings_for_monitor() {\n\t# 1. Correctly interpret width/height percentages when there exist multiple\n\t#    monitors so an initially created dropdown is the correct size (xdotool\n\t#    would create a dropdown the width of all screens for 100% width)\n\t# 2. Force resize the dropdown to the correct percentage of the current\n\t#    monitor IF the monitor has changed since the last time the dropdown\n\t#    was used\n\n\tlocal x_begin y_begin x_width y_height\n\tpopulate_current_monitor_geometry\n\n\t# convert w/h/x/y percentages/negatives to pixels\n\tconvert_geometry_to_pixels \"$x_width\" \"$y_height\"\n\n\t# update x and y offsets, so that will appear on correct screen\n\t# (required for some WMs apparently, but not for others)\n\t[[ -n $xoff ]] && ((xoff+=x_begin))\n\t[[ -n $yoff ]] && ((yoff+=y_begin))\n}\n\nmap_and_reset_geometry() {\n\tif [[ -n $width ]] && [[ -n $height ]] && [[ -n $xoff ]] \\\n\t\t   && [[ -n $yoff ]]; then\n\t\txdotool windowmap --sync \"$wid\" windowmove \"$wid\" \"$xoff\" \"$yoff\" \\\n\t\t\t\twindowsize \"$wid\" \"$width\" \"$height\" 2> /dev/null\n\telif [[ -n $width ]] && [[ -n $height ]]; then\n\t\txdotool windowmap --sync \"$wid\" windowsize \"$wid\" \"$width\" \"$height\" \\\n\t\t\t\t2> /dev/null\n\telif [[ -n $xoff ]] && [[ -n $yoff ]]; then\n\t\txdotool windowmap --sync \"$wid\" windowmove \"$wid\" \"$xoff\" \"$yoff\" \\\n\t\t\t\t2> /dev/null\n\telse\n\t\txdotool windowmap --sync \"$wid\" 2> /dev/null\n\tfi\n\t# windowmap does not activate the window for all window managers;\n\t# windowactivate should be run separately after windowmap --sync or it can\n\t# activate a window on another desktop on some window managers (e.g. bspwm)\n\txdotool windowactivate \"$wid\" 2> /dev/null\n}\n\n# * WM Detection and Hooks\nset_wm() {\n\twm_wid=$(xprop -root -notype _NET_SUPPORTING_WM_CHECK)\n\twm_wid=${wm_wid##* }\n\tif ! $user_set_wm && $auto_detect_wm; then\n\t\t# xfwm4 and fvwm at least will give two names (hence piping into head)\n\t\twm=$(xprop -notype -id \"$wm_wid\" _NET_WM_NAME | head -n 1)\n\t\twm=${wm##* }\n\t\twm=${wm//\\\"/}\n\t\tdebug \"window manager: $wm\"\n\tfi\n}\n\ndecoration_settings() {\n\tif [[ -z $subtract_when_same ]]; then\n\t\tif $auto_detect_wm \\\n\t\t\t\t&& [[ $wm =~ ^(Mutter|GNOME Shell|bspwm|i3|GoomwW)$ ]]; then\n\t\t\tsubtract_when_same=false\n\t\telse\n\t\t\tsubtract_when_same=true\n\t\tfi\n\tfi\n\n\tif [[ -z $dec_fix ]] && $auto_detect_wm; then\n\t\t# settings for stacking/floating wms where can't get right position\n\t\t# easily from xwininfo; take borders into account\n\t\tif [[ $wm == Blackbox ]]; then\n\t\t\tdec_fix=\"1x22\"\n\t\telif [[ $wm =~ ^(Mutter|GNOME Shell)$ ]]; then\n\t\t\tdec_fix=\"-10x-8\"\n\t\telif [[ $wm =~ ^(Mutter \\(Muffin\\))$ ]]; then\n\t\t\tdec_fix=\"-9x-8\"\n\t\telif [[ $wm == herbstluftwm ]]; then\n\t\t\t# alternatively could just not subtract when storing (though this\n\t\t\t# will also work if border changes after hiding but before showing)\n\t\t\tborder_width=$(herbstclient get window_border_width)\n\t\t\tdec_fix=\"-${border_width}x-${border_width}\"\n\t\tfi\n\tfi\n}\n\nset_class() {\n\tif [[ -z $class ]]; then\n\t\tif [[ $program =~ ^emacsclient ]]; then\n\t\t\tclass=emacs\n\t\telif [[ $program =~ ^google-chrome ]]; then\n\t\t\tclass=google-chrome\n\t\telif [[ $program == st ]]; then\n\t\t\tclass=st-256color\n\t\telif [[ $program == gnome-terminal ]]; then\n\t\t\tclass=Gnome-terminal\n\t\telif [[ $program =~ ^urxvt.* ]]; then\n\t\t\tclass=urxvt\n\t\telif [[ $program == xiatec ]]; then\n\t\t\tclass=xiate\n\t\telif [[ $program == alacritty ]]; then\n\t\t\tclass=Alacritty\n\t\telif [[ $program == wezterm ]]; then\n\t\t\t# wezterm is normally installed through flatpak\n\t\t\tclass=org.wezfurlong.wezterm\n\t\telif [[ $program == flatpak ]]; then\n\t\t\t# flatpak jails the application, the PID cannot be used to find\n\t\t\t# the window. A specific class has to be given by the user.\n\t\t\terror \"--class is required with flatpak but was not given.\"\n\t\telif [[ $program == brave ]]; then\n\t\t\tclass=brave-browser\n\t\telif ! [[ $program =~ ^(current|auto_show)$ ]]; then\n\t\t\t# NOTE: current/auto_show will use restore_class to set class to the\n\t\t\t# recorded class later\n\t\t\tclass=$program\n\t\tfi\n\tfi\n}\n\nis_floating() {\n\tif [[ -n $is_floating ]]; then\n\t\teval \"$is_floating $1\"\n\telif [[ $wm =~ FLOATING_WMS_REGEXP ]]; then\n\t\treturn\n\telif $auto_detect_wm; then\n\t\tif [[ $wm == i3 ]]; then\n\t\t\t# TODO make sure this returns 1 on failure\n\t\t\ti3-msg -t get_tree | gawk 'gsub(/{\"id\"/, \"\\n{\\\"id\\\"\")' | \\\n\t\t\t\tgawk '/focused\":true.*floating\":\"user_on/ {print $1}'\n\t\telif [[ $wm == bspwm ]]; then\n\t\t\tbspc query -T -n | grep '\"state\":\"floating\"'\n\t\telif [[ $wm == herbstluftwm ]]; then\n\t\t\therbstclient or , compare tags.focus.floating = on , compare clients.focus.floating = on\n\t\tfi\n\telse\n\t\treturn 0\n\tfi\n}\n\npre_float() {\n\t# TODO why is this an exception?\n\tlowercase_classes=\"firefox\"\n\tif [[ $wm == bspwm ]]; then\n\t\t# newest (using \"instance\" names)\n\t\tif [[ $class =~ [A-Z] ]] || [[ $class =~ $lowercase_classes ]]; then\n\t\t\tbspc rule -a \"$class\" -o state=floating\n\t\telse\n\t\t\tbspc rule -a \\*:\"$class\" -o state=floating\n\t\tfi\n\telif [[ $wm == herbstluftwm ]]; then\n\t\tif [[ $class =~ [A-Z] ]] || [[ $class =~ $lowercase_classes ]]; then\n\t\t\therbstclient rule once class=\"$class\" floating=on\n\t\telse\n\t\t\therbstclient rule once instance=\"$class\" floating=on\n\t\tfi\n\tfi\n}\n\npost_float() {\n\tif [[ $wm == awesome ]]; then\n\t\techo 'local awful = require(\"awful\") ; awful.client.floating.set(c, true)' | \\\n\t\t\tawesome-client\n\telif [[ $wm == i3 ]]; then\n\t\ti3-msg \"[id=$wid] floating enable\" > /dev/null\n\tfi\n}\n\npre_create() {\n\tif [[ -n $pre_create ]]; then\n\t\teval \"$pre_create\"\n\tfi\n}\n\npost_create() {\n\tif [[ -n $post_create ]]; then\n\t\teval \"$post_create\"\n\tfi\n}\n\npre_map() { # float\n\tfloat=${1:-true}\n\tif [[ $float != false ]]; then\n\t\tif [[ -n $pre_float ]]; then\n\t\t\teval \"$pre_float\"\n\t\telif $auto_detect_wm; then\n\t\t\tpre_float\n\t\tfi\n\tfi\n\tif [[ -n $pre_map ]]; then\n\t\teval \"$pre_map\"\n\tfi\n}\n\nmap_and_post_map() { # float\n\t# always reset geometry\n\tmap_and_reset_geometry\n\tfloat=${1:-true}\n\tif [[ $float != false ]]; then\n\t\tif [[ -n $post_float ]]; then\n\t\t\teval \"$post_float\"\n\t\telif $auto_detect_wm; then\n\t\t\tpost_float\n\t\tfi\n\tfi\n\t# need to set geometry again if wasn't previously floating\n\tmap_and_reset_geometry\n\tif [[ -n $post_map ]]; then\n\t\teval \"$post_map\"\n\tfi\n}\n\npre_unmap() {\n\tif [[ -n $pre_unmap ]]; then\n\t\teval \"$pre_unmap\"\n\tfi\n}\n\npost_unmap() {\n\tif [[ -n $post_unmap ]]; then\n\t\teval \"$post_unmap\"\n\tfi\n}\n\nunmap() {\n\tif $remember_geometry; then\n\t\tstore_geometry true\n\tfi\n\tpre_unmap\n\txdotool windowunmap \"$wid\"\n\tpost_unmap\n}\n\n# Old notes:\n# floating WMs that may move a window after remapping it\n# pekwm|Fluxbox|Blackbox|xfwm4|Metacity|FVWM|Sawfish|GoomwW|Mutter|GNOME Shell|Mutter \\(Muffin\\)|KWin|Metacity \\(Marco\\)|[Cc]ompiz|bspwm\n# floating WMs that may both move and resize a window after remapping it\n# Openbox\n\n# * General Helper Functions\n# use when there may not be a focused window\nget_active_wid_or_empty() {\n\tif [[ $wm == Openbox ]]; then\n\t\t# on empty openbox desktop, getactivewindow will return the last active\n\t\t# window, and getwindowfocus will return the wm window id\n\t\tlocal wid\n\t\twid=$(xdotool getwindowfocus)\n\t\tif [[ \"$(printf 0x%x \"$wid\")\" == \"$wm_wid\" ]]; then\n\t\t\techo -n \"\"\n\t\telse\n\t\t\techo -n \"$wid\"\n\t\tfi\n\telse\n\t\txdotool getactivewindow\n\tfi\n}\n\nget_tdrop_name() {\n\tif tdrop_name=$(xprop -id \"$1\" TDROP_NAME 2> /dev/null); then\n\t\t# remove to first quote then remove closing quote\n\t\ttdrop_name=${tdrop_name#*\\\"}\n\t\techo -n \"${tdrop_name%\\\"*}\"\n\telse\n\t\techo -n \"\"\n\tfi\n}\n\n# check that the window is actually the correct tdrop dropdown instead of a\n# newly created window that is reusing the window id of a previously closed\n# tdrop window\ncheck_tdrop_name() { # wid\n\t[[ \"$(get_tdrop_name \"$1\")\" == \"tdrop $program$num\" ]]\n}\n\nstore_wid() {  # wid\n\twid=$1\n\t# give it a name to uniquely recognize the window (since window ids can be\n\t# reused later if the window is closed)\n\txprop -format TDROP_NAME 8u -id \"$wid\" -set TDROP_NAME \"tdrop $program$num\"\n\techo \"$wid\" > \"$WID_DIR/$program$num\"\n}\n\nget_class_name() { # wid\n\tlocal class\n\tclass=$(xprop -id \"$1\" WM_CLASS 2> /dev/null)\n\tclass=${class%\\\"}\n\tclass=${class##*\\\"}\n\techo -n \"$class\"\n}\n\nstore_class() {\n\tget_class_name \"$wid\" > \"$CLASS_DIR/$wid\"\n}\n\nrestore_class() {\n\tif [[ -z $class ]]; then\n\t\tclass=$(< \"$CLASS_DIR/$wid\")\n\tfi\n}\n\nget_visibility() {\n\txwininfo -id \"$1\" 2> /dev/null | gawk '/Map State/ {print $3}'\n}\n\nmaybe_cancel_auto_show() {\n\tif $cancel_auto_show && \\\n\t\t\t[[ $1 == $(cat \"$HIDE_DIR\"/wid 2> /dev/null) ]]; then\n\t\t# shellcheck disable=SC2188\n\t\t> \"$HIDE_DIR\"/wid\n\tfi\n}\n\nget_geometry() { # wid\n\t# so that won't float a tiled window later when showing\n\tif is_floating \"$1\" &> /dev/null; then\n\t\tlocal wininfo x y rel_x rel_y width height\n\t\twininfo=$(xwininfo -id \"$1\")\n\t\tx=$(echo \"$wininfo\" | gawk '/Absolute.*X/ {print $4}')\n\t\ty=$(echo \"$wininfo\" | gawk '/Absolute.*Y/ {print $4}')\n\t\trel_x=$(echo \"$wininfo\" | gawk '/Relative.*X/ {print $4}')\n\t\trel_y=$(echo \"$wininfo\" | gawk '/Relative.*Y/ {print $4}')\n\t\tif [[ $subtract_when_same != false ]]; then\n\t\t\t# behavior works for most WMs (at least floating ones)\n\t\t\tx=$((x-rel_x))\n\t\t\ty=$((y-rel_y))\n\t\telse\n\t\t\t# don't subtract when abs and rel values are the same\n\t\t\t# necessary for WMs like bspwm and i3\n\t\t\tif [[ $x -ne $rel_x ]]; then\n\t\t\t\tx=$((x-rel_x))\n\t\t\tfi\n\t\t\tif [[ $y -ne $rel_y ]]; then\n\t\t\t\ty=$((y-rel_y))\n\t\t\tfi\n\t\tfi\n\t\twidth=$(xwininfo -id \"$(xdotool getactivewindow)\" | \\\n\t\t\t\t\tgawk '/Width/ {print $2}')\n\t\theight=$(xwininfo -id \"$(xdotool getactivewindow)\" | \\\n\t\t\t\t\t gawk '/Height/ {print $2}')\n\n\t\tif $monitor_aware; then\n\t\t\tlocal x_begin y_begin x_width y_height\n\t\t\tpopulate_current_monitor_geometry\n\t\t\t((x-=x_begin))\n\t\t\t((y-=y_begin))\n\t\tfi\n\n\t\techo -n -e \"xoff=$x\\nyoff=$y\\nwidth=$width\\nheight=$height\"\n\telse\n\t\t# window is not floating; don't bother saving geometry\n\t\techo -n \"false\"\n\tfi\n}\n\nstore_geometry() {\n\tget_geometry \"$wid\" > \"$GEO_DIR/$wid\"\n}\n\n# set global xoff, yoff, width, and height based on stored values\nrestore_geometry() {\n\tlocal geo x_fix y_fix\n\tgeo=\"$(cat \"$GEO_DIR/$wid\" 2> /dev/null)\"\n\tif [[ $geo =~ $GEO_REGEXP ]]; then\n\t\teval \"$geo\"\n\tfi\n\tif [[ -n $dec_fix ]]; then\n\t\t# x_fix=$(echo \"$dec_fix\" | gawk -F \"x\" '{print $1}')\n\t\tx_fix=${dec_fix%x*}\n\t\t# y_fix=$(echo \"$dec_fix\" | gawk -F \"x\" '{print $2}')\n\t\ty_fix=${dec_fix#*x}\n\t\txoff=$((xoff-x_fix))\n\t\tyoff=$((yoff-y_fix))\n\tfi\n\tif $monitor_aware; then\n\t\tlocal x_begin y_begin x_width y_height\n\t\tpopulate_current_monitor_geometry\n\t\t((xoff+=x_begin))\n\t\t((yoff+=y_begin))\n\tfi\n}\n\n# * Dropdown Initialization\n# TODO ideally this function wouldn't be necessary and some external program\n# (something like xtoolwait) could be used to return the wid\ncreate_win_return_wid() {\n\tlocal blacklist program_command pid visible_wid wids wid program_wid\n\t# save blacklist all existing wids of program\n\t# change pid for programs where $! won't always work (e.g. one pid for all\n\t# windows)\n\tif [[ $program =~ ^(tilix|xfce4-terminal)$ ]]; then\n\t\tpid=$(pgrep -x \"$program\")\n\telif [[ $program == urxvtc ]]; then\n\t\tblacklist=$(xdotool search --classname urxvtd)\n\t\tpid=$(pgrep -x urxvtd)\n\telif [[ $program == wezterm ]]; then\n\t\tblacklist=$(xdotool search --classname wezterm)\n\telif [[ $program == xiatec ]]; then\n\t\tpid=$(pgrep -x xiate)\n\telif [[ $program == chromium ]]; then\n\t\t# this may work fine\n\t\t# pid=$(pgrep -xo chromium)\n\t\tpid=$(pgrep -xa chromium | gawk '!/--type/ {print $1}')\n\telif [[ $program == chromium-browser ]]; then\n\t\tpid=$(pgrep -xa chromium-browse | gawk '!/--type/ {print $1}')\n\telif [[ $program =~ ^google-chrome ]]; then\n\t\tpid=$(pgrep -xa chrome | gawk '!/--type/ {print $1}')\n\telif [[ $program == firefox ]]; then\n\t\tblacklist=$(xdotool search --name firefox)\n\telif [[ $program =~ ^emacsclient ]]; then\n\t\tblacklist=$(xdotool search --classname emacs)\n\telif [[ $program =~ ^(strawberry|clementine)$ ]]; then\n\t\tpid=$(pgrep -xa $program | gawk '!/--type/ {print $1}')\n\telse\n\t\tblacklist=$(xdotool search --classname \"$program\")\n\tfi\n\t# need to redirect stdout or function won't return\n\t\"$@\" > \"$MUTDROP_PATH/program-output\" &\n\tif [[ -z $pid ]]; then\n\t\t# for normal programs\n\t\t# also for when one of the programs above hadn't already been started\n\t\tpid=$!\n\tfi\n\tvisible_wid=false\n\tcounter=0\n\twhile : ; do\n\t\tif ((counter==0)); then\n\t\t\tdebug \"pid: $pid\"\n\t\tfi\n\t\tif [[ $program == gnome-terminal ]]; then\n\t\t\twids=\"\"\n\t\t\tfor pid in $(pgrep gnome-terminal); do\n\t\t\t\twids+=$(xdotool search --pid \"$pid\")\n\t\t\tdone\n\t\telif [[ $program == discord ]]; then\n\t\t\twids=$(xdotool search --classname discord)\n\t\t\tblacklist=\n\t\telif [[ $program =~ ^(qutebrowser|brave|spotify|wezterm)$ ]]; then\n\t\t\t# can't rely on pid for these programs\n\t\t\t# - wezterm - can have multiple processes with multiple windows each\n\t\t    #   $! is not correct, and pgrep would need to be delayed; easier to\n\t\t\t#   just search for new window ids\n\t\t\t# - spotify - pid gives extra incorrect wid (want main window)\n\t\t\t# - others - one pid, but can't use for getting wids with xdotool\n\t\t\twids=$(xdotool search --classname \"$program\")\n\t\telif [[ $program =~ ^emacsclient ]]; then\n\t\t\twids=$(xdotool search --classname emacs)\n\t\telif [[ $program == flatpak ]]; then\n\t\t\twids=$(xdotool search --classname \"$class\")\n\t\telif [[ $program == firefox ]]; then\n\t\t\twids=$(xdotool search --name firefox)\n\t\telif [[ $program == tabbed ]]; then\n\t\t\twids=$(head -n 1 \"$MUTDROP_PATH/program-output\")\n\t\telif [[ $program =~ ^(postman|todoist)$ ]]; then\n\t\t\t# postman has multiple wids for the correct pid\n\t\t\t# todoist also creates multiple wids\n\t\t\t# print only wids that are both are for the class and have the\n\t\t\t# browser-window role\n\t\t\twids=$(comm -12 \\\n\t\t\t\t\t\t<(xdotool search --classname \"$program\" | sort) \\\n\t\t\t\t\t\t<(xdotool search --role 'browser-window' | sort))\n\t\telif [[ $program == strawberry ]]; then\n\t\t\twids=$(xdotool search --all --pid \"$pid\" --name \"Strawberry Music Player\")\n\t\telse\n\t\t\twids=$(xdotool search --pid \"$pid\")\n\t\tfi\n\t\tif [[ -n $wids ]]; then\n\t\t\tdebug \"blacklist: $blacklist\"\n\t\t\tdebug \"wids: ${wids[*]}\"\n\t\t\twhile read -r wid; do\n\t\t\t\tif [[ ! $blacklist =~ (^|$'\\n')$wid($|$'\\n') ]] && \\\n\t\t\t\t\t   [[ $(get_visibility \"$wid\") == IsViewable ]]; then\n\t\t\t\t\tvisible_wid=true\n\t\t\t\t\tprogram_wid=$wid\n\t\t\t\tfi\n\t\t\tdone <<< \"$wids\"\n\t\tfi\n\t\tif $visible_wid; then\n\t\t\tbreak\n\t\tfi\n\t\t((counter=counter+1))\n\t\tif [[ $counter -gt $((timeout * 100)) ]]; then\n\t\t\terror \"Exceeded timeout of $timeout seconds waiting for program.\"\n\t\tfi\n\t\tsleep 0.01\n\tdone\n\t# workaround for urxvt tabbed plugin using -embed\n\tif [[ $program =~ urxvt ]] && [[ -n $program_wid ]]; then\n\t\tmaybe_program_wid=$(xprop -id \"$program_wid\" | \\\n\t\t\t\t\t\t\t\tgawk -F '\"' '/-embed/ {print $6}')\n\t\tif [[ -n $maybe_program_wid ]]; then\n\t\t\tprogram_wid=$maybe_program_wid\n\t\tfi\n\tfi\n\tdebug \"picked wid: $program_wid\"\n\techo -n \"$program_wid\"\n}\n\n# clear all stored wids matching wid; necessary if wid no longer exists to\n# prevent two dropdowns from getting thes same wid\ninvalidate_wid() { # wid\n\tshopt -s nullglob dotglob\n\tfor f in {\"$HIDE_DIR\"/wid,\"$WID_DIR\"/*}; do\n\t\tif [[ -f $f ]] && [[ $(< \"$f\") == \"$wid\" ]]; then\n\t\t\tdebug \"Clearing stored wid from $f since wid $wid no longer exists\"\n\t\t\trm \"$f\"\n\t\tfi\n\tdone\n\tfor f in {\"$CLASS_DIR\",\"$GEO_DIR\"}/*; do\n\t\tif [[ $(basename \"$f\") == \"$wid\" ]]; then\n\t\t\tdebug \"Removing $f since wid $wid no longer exists\"\n\t\t\trm \"$f\"\n\t\tfi\n\tdone\n\tshopt -u nullglob dotglob\n}\n\nprogram_start() {\n\tlocal program_command tmux_command wid\n\tprogram_command=(\"$program\")\n\tprogram_command+=(\"${program_flags[@]}\")\n\tif [[ -n $session_name ]]; then\n\t\tsession_name=$(printf \"%q\" \"$session_name\")\n\t\ttmux_command=\"tmux attach-session -dt $session_name 2> /dev/null || \\\n\t\t\ttmuxifier load-session $session_name 2> /dev/null || \\\n\t\t\ttmuxinator start $session_name 2> /dev/null || \\\n\t\t\ttmuxp load $session_name 2> /dev/null || \\\n\t\t\ttmux new-session -s $session_name\"\n\t\t# note: st will work with or without the -e flag (like kitty)\n\t\t# note: regular console works with or without quotes, but trinity's\n\t\t# konsole only works without quotes\n\t\tif [[ $program =~ ^(urxvt|alacritty|xiatec|st|lxterminal|qterminal|cool-retro-term|lilyterm|konsole$) ]]; then\n\t\t\tprogram_command+=(-e bash -c \"$tmux_command\")\n\t\telif [[ $program == kitty ]]; then\n\t\t\tprogram_command+=(bash -c \"$tmux_command\")\n\t\telif [[ $program == wezterm || $class =~ ^(org\\.wezfurlong\\.)?wezterm$ ]]; then\n\t\t\tprogram_command+=(start --always-new-process -- bash -c \"$tmux_command\")\n\t\telif [[ $program == gnome-terminal ]]; then\n\t\t\tprogram_command+=(-- bash -c \"$tmux_command\")\n\t\telse\n\t\t\tprogram_command+=(-e \"bash -c '$tmux_command'\")\n\t\tfi\n\tfi\n\twid=$(create_win_return_wid \"${program_command[@]}\")\n\tif [[ -n $name ]]; then\n\t\txdotool set_window --name \"$name\" \"$wid\"\n\tfi\n\tstore_wid \"$wid\"\n\techo -n \"$wid\"\n}\n\ncurrent_create() {\n\t# turns active window into a dropdown\n\tlocal wid\n\twid=$(xdotool getactivewindow)\n\tstore_wid \"$wid\"\n\tstore_class\n\tif [[ -n $name ]]; then\n\t\txdotool set_window --name \"$name\" \"$wid\"\n\tfi\n\techo -n \"$wid\"\n}\n\nwid_toggle() {\n\t# used for -m option; at first tdrop assumes that there is a focused window\n\t# on the current desktop; if there isn't (and the WM doesn't have some way\n\t# to query the current monitor), this will be set to false, and tdrop will\n\t# have to find out the current monitor info after opening the dropdown\n\t# (currently, using xwininfo to find the position of a window is the only\n\t# WM-independent way I know to find out what the current monitor is)\n\tlocal focused_window_exists\n\tfocused_window_exists=true\n\n\t# deal with percentages/negatives when no -m\n\tif ! $monitor_aware; then\n\t\tlocal total_geo total_width total_height\n\t\ttotal_geo=$(xwininfo -root | gawk '/geometry/ {gsub(\"+.*\",\"\"); print $2}')\n\t\t# total_width=$(echo \"$total_geo\" | gawk -F 'x' '{print $1}')\n\t\ttotal_width=${total_geo%x*}\n\t\t# total_height=$(echo \"$total_geo\" | gawk -F 'x' '{print $2}')\n\t\ttotal_height=${total_geo#*x}\n\t\tconvert_geometry_to_pixels \"$total_width\" \"$total_height\"\n\tfi\n\t# get saved window id if already created\n\tlocal exists visibility\n\t# cat to silence error\n\twid=$(cat \"$WID_DIR/$program$num\" 2> /dev/null)\n\texists=true\n\tif [[ -n $wid ]]; then\n\t\tvisibility=$(get_visibility \"$wid\")\n\t\t# sometimes xwininfo will still report a window as existing, so an xprop\n\t\t# check is required; check_tdrop_name ensures both that the window\n\t\t# actually exists (if xwininfo is wrong) and that it is the correct\n\t\t# window (by checking the TDROP_NAME window property)\n\t\tif [[ -z $visibility ]] || ! check_tdrop_name \"$wid\"; then\n\t\t\t# window no longer exists; clear all stored information about it\n\t\t\tinvalidate_wid \"$wid\"\n\t\t\texists=false\n\t\tfi\n\telse\n\t\texists=false\n\tfi\n\tif $exists; then\n\t\tdebug \"Window exists, visibility: $visibility\"\n\t\tif [[ $program == current ]]; then\n\t\t\trestore_class\n\t\tfi\n\t\tif [[ $visibility =~ ^(IsUnMapped|IsUnviewable)$ ]] \\\n\t\t\t   || { $always_activate \\\n\t\t\t\t\t\t&& [[ $(get_active_wid_or_empty) != \"$wid\" ]]; }\n\t\tthen\n\t\t\t# visibility will be IsUnMapped on most WMs if the dropdown is open\n\t\t\t# on another desktop; may also be IsUnviewable\n\t\t\txdotool set_desktop_for_window \"$wid\" \"$(xdotool get_desktop)\"\n\t\t\tif [[ $(get_visibility \"$wid\") == IsUnMapped ]]; then\n\t\t\t\tpre_map\n\t\t\tfi\n\t\t\tif $remember_geometry; then\n\t\t\t\trestore_geometry\n\t\t\telif $monitor_aware; then\n\t\t\t\t# update here if possible so this doesn't cause a delay\n\t\t\t\t# between the window being remapped and resized\n\t\t\t\tupdate_geometry_settings_for_monitor || \\\n\t\t\t\t\tfocused_window_exists=false\n\t\t\tfi\n\t\t\tmap_and_post_map\n\t\t\t# cancel auto-show for a window when manually remapping it\n\t\t\tmaybe_cancel_auto_show \"$wid\"\n\t\t\tif ! $focused_window_exists; then\n\t\t\t\t# need to use dropdown as active window to get monitor info\n\t\t\t\tupdate_geometry_settings_for_monitor\n\t\t\t\t# always resize/move; if monitor hasn't changed then it won't be\n\t\t\t\t# necessary, but it won't cause problems either\n\t\t\t\tmap_and_reset_geometry\n\t\t\tfi\n\t\telse\n\t\t\tunmap\n\t\tfi\n\telse\n\t\t# necessary to deal with negative width or height\n\t\t# if creating on an empty desktop and can't determine the monitor,\n\t\t# must set temporary values for negative width and/or height\n\t\tlocal original_width original_height\n\t\tif $monitor_aware && ! update_geometry_settings_for_monitor; then\n\t\t\tfocused_window_exists=false\n\t\t\tif [[ $width =~ ^- ]]; then\n\t\t\t\toriginal_width=$width\n\t\t\t\twidth=100%\n\t\t\tfi\n\t\t\tif [[ $height =~ ^- ]]; then\n\t\t\t\toriginal_height=$height\n\t\t\t\theight=100%\n\t\t\tfi\n\t\tfi\n\t\t# make it\n\t\tpre_create\n\t\tif [[ $program == current ]]; then\n\t\t\twid=$(current_create)\n\t\t\tunmap\n\t\telse\n\t\t\tpre_map\n\t\t\twid=$(program_start)\n\t\t\tmap_and_post_map\n\t\t\t# update window dimensions if necessary\n\t\t\tif ! $focused_window_exists; then\n\t\t\t\twidth=${original_width:-$width}\n\t\t\t\theight=${original_height:-$height}\n\t\t\t\tupdate_geometry_settings_for_monitor\n\t\t\t\tmap_and_reset_geometry\n\t\t\tfi\n\t\tfi\n\t\tpost_create\n\tfi\n}\n\n# * Helper Functions for Auto Hiding/Showing\ntoggle_auto_hide() {\n\tlocal no_hide\n\tno_hide=$(cat \"$NOAUTOHIDE_FILE\" 2> /dev/null)\n\tif [[ -z $no_hide ]]; then\n\t\techo \"true\" > \"$NOAUTOHIDE_FILE\"\n\telse\n\t\t# shellcheck disable=SC2188\n\t\t> \"$NOAUTOHIDE_FILE\"\n\tfi\n}\n\n# * Auto Hiding/Showing\n# TODO if considered useful, nesting auto_hide could be supported by having the\n# users pass a key as an extra argument to use to store the wid (e.g. script\n# that calls could use the time)\nauto_hide() {\n\tlocal no_hide\n\tno_hide=$(cat \"$NOAUTOHIDE_FILE\" 2> /dev/null)\n\tif [[ -z $no_hide ]]; then\n\t\twid=$(xdotool getactivewindow)\n\t\techo \"$wid\" > \"$HIDE_DIR\"/wid\n\t\tstore_class\n\t\tstore_geometry\n\t\tunmap\n\tfi\n}\n\nauto_show() {\n\tlocal no_hide\n\tno_hide=$(cat \"$MUTDROP_PATH\"/auto_hidden/no_hide 2> /dev/null)\n\tif [[ -z $no_hide ]]; then\n\t\tlocal was_floating\n\t\twid=$(< \"$HIDE_DIR\"/wid)\n\t\trestore_class \"$wid\"\n\t\trestore_geometry \"$wid\"\n\t\twas_floating=$(< \"$GEO_DIR/$wid\")\n\t\tpre_map \"$was_floating\"\n\t\tmap_and_post_map \"$was_floating\"\n\tfi\n}\n\n# * Hide All\nhide_all() {\n\tshopt -s nullglob dotglob\n\tlocal dropdowns\n\tdropdowns=(\"$WID_DIR\"/*)\n\tfor dropdown in \"${dropdowns[@]}\"; do\n\t\t# cat to silence errors\n\t\twid=$(cat \"$dropdown\" 2> /dev/null)\n\t\tunmap \"$wid\" 2> /dev/null\n\tdone\n\tshopt -u nullglob dotglob\n}\n\n# * Run Command For Each\nforeach() {\n\tshopt -s nullglob dotglob\n\tlocal dropdowns wid\n\tdropdowns=(\"$WID_DIR\"/*)\n\tfor dropdown in \"${dropdowns[@]}\"; do\n\t\t# cat to silence errors\n\t\twid=$(cat \"$dropdown\" 2> /dev/null)\n\t\teval \"$1\"\n\tdone\n}\n\n# * Main\n# ** Setup\nset_wm\ndecoration_settings\nset_class\n\n# ** Primary Action\nif $clearwid; then\n\tdebug \"command: clear wid for $program$num\"\n\t# shellcheck disable=SC2188\n\t> \"$WID_DIR/$program$num\"\nelif [[ $program == toggle_auto_hide ]]; then\n\tdebug \"command: toggle auto hide\"\n\ttoggle_auto_hide\nelif [[ $program == auto_hide ]]; then\n\tdebug \"command: auto hide\"\n\tauto_hide\nelif [[ $program == auto_show ]]; then\n\tdebug \"command: auto show\"\n\tauto_show\nelif [[ $program == hide_all ]]; then\n\tdebug \"command: hide all\"\n\thide_all\nelif [[ $program == foreach ]]; then\n\tdebug \"command: foreach\"\n\tforeach \"$2\"\nelse\n\tdebug \"command: toggle $program$num\"\n\twid_toggle\nfi\n\n# vim is dumb\n# vim: set ft=sh noet:\n"
        },
        {
          "name": "tdrop.1",
          "type": "blob",
          "size": 18.5966796875,
          "content": ".\\\" Man page for tdrop.\n.\\\" Please make an issue on the online repository if you find errors or typos.\n.TH TDROP 1 \"11 February 2015\" \"tdrop 0.5.0\" \"tdrop man page\"\n.SH NAME\nTdrop - make dropdown terminals and windows\n.SH SYNOPSIS\ntdrop [\\fIOPTIONS\\fR] [program name or cmd] [program options ...]\n.SH DESCRIPTION\n\tTdrop is used for hiding/unhiding programs to acheive quake/dropdown functionality. It can create a dropdown window if one does not already exist or turn the current window into a dropdown on the fly. It provides options to control the intial size and position of dropdowns, for example to leave panels visible or to deal with window borders. When used with a terminal, it provides an option to specify the name of a tmux session to automatically start. It also allows the user to specify arbitrary options/flags to be used when starting programs. It uses window IDs as opposed to classes, so it can be used with multiple windows of the same program.\n\n\tIt also has the ability to automatically hide and automatically show dropdowns. For example, it can be used to automatically hide a terminal when opening something from it, e.g. an image viewer, video player, etc. Tdrop can         then automatically bring back the terminal whenever the image view, video player, etc. is closed. See the Examples section for more information.\n.SH Commands\nTdrop expects the name of a program or 'current' (to use the current window) as the last argument to create a dropdown (optionally followed by any flags to that program). Alternatively, it can take one of auto_show, auto_hide, toggle_auto_hide, hide_all, or foreach. If hide_all is given instead of a program name, tdrop will hide all visible dropdowns.\n\nForeach will run a run a command for each dropdown. For example, you can do the equivalent of hide_all with the following:\n\ntdrop foreach 'unmap $wid'\n\nTo hide floating dropdowns only on herbstluftwm:\n\ntdrop foreach 'herbstclient compare clients.$(printf 0x%x $wid).floating = on && unmap $wid'\n\nTdrop's functionality (except potentially foreach) is not particularly useful called directly from the command line. Commands should either be bound to a key, used in shell functions/aliases, or used with a file opener (e.g. in the rifle.conf).\n\n.SH OPTIONS\n.br\nE.g.\n.br\n$ tdrop -y 15 termite\n.br\n$ tdrop --y-offset=15 termite\n.br\n$ tdrop --y-offset 15 termite\n.TP\nNote that all hook and command related options can make use of any tdrop variables (such as $width, $height, $xoff, $yoff, $class, $wid, etc.). Note that for some of the hooks, the window id is not guarunteed to be known (since the window may not have yet been created), so any scripts that make use of these should check if it is defined (pre-map and pre-float; wid will never be known for pre-create).\n.TP\n\\fB-w WIDTH\\fR, \\fB --width=WIDTH\\fR\nSpecify a width for a created window as a number or percentage. A negative number is allowed (e.g. '-w -4') in which case the width will be that many pixels less than 100% of the screen size (or monitor size if '-m' is being used). This fixes the problem where 100% width may actually go over the screen due to window borders/decoration. The other other geometry options also accept negative values ('-h', '-x', and '-y'). If both the width and height are specified as empty/\"\", do not alter the window's size. (default: 100%)\n.TP\n\\fB-h HEIGHT\\fR, \\fB --height=HEIGHT\\fR\nSpecify a height for a created window as a number or percentage. If both the width and height are specified as empty/\"\", do not alter the window's size. (default: 45%)\n.TP\n\\fB-x OFFSET\\fR, \\fB --x-offset=OFFSET\\fR\nSpecify the x position for a created window as a number or percentage. If both the x and y offsets are specified as empty/\"\", do not alter the window's position. (default: 0)\n.TP\n\\fB-y OFFSET\\fR, \\fB --y-offset=OFFSET\\fR\nSpecify the y position for a created window as a number or percentage. If both the x and y offsets are specified as empty/\"\", do not alter the window's position. (default: 1, see BUGS)\n.TP\n\\fB-s NAME\\fR, \\fB --session=NAME\\fR\nSpecify a tmuxinator, tmuxifier, or tmux session name to start. An existing tmux session has highest precedence and will be connected to with '-d', detaching other attached clients. If a there is no tmuxinator/tmuxifier/etc. session of the given name, a normal tmux session with the name will be created. If this option is not given, tmux will not be used. Note that this option requires that the program be a supported terminal. (default: none)\n.TP\n\\fB-n NUMBER\\fR, \\fB --number=NUMBER\\fR\nSpecify a number (or any extra text) to differentiate between dropdowns of the same program (this is only needed when using multiple dropdowns of the same program). This flag can also be used for creating multiple different dropdowns on the fly ('current'). Note that it is not necessary to use this to deal with multi-user systems as tdrop stores dropdown information separately for each user. (default: none)\n.TP\n\\fB-c COMMAND\\fR, \\fB --pre-create-hook=COMMAND\\fR\nSpecify a command to execute before first creating or initializing a dropdown (before mapping a normal dropdown or before unmapping the 'current' window). This flag has no effect for the auto_(hide|show) commands. (default: none)\n.TP\n\\fB-C\\fR, \\fB --post-create-hook=COMMAND\\fR\nSpecify a command to execute after first creating or initializing a dropdown (after mapping a normal dropdown or after unmapping the 'current' window). This flag has no effect for the auto_(hide|show) commands. (default: none)\n.TP\n\\fB-p COMMAND\\fR, \\fB --pre-map-hook=COMMAND\\fR\nSpecify a command to execute before showing/mapping a dropdown. Note that this will run when showing a dropdown for the first time even when --pre-create-hook is used. (default: none)\n.TP\n\\fB-P COMMAND\\fR, \\fB --post-map-hook=COMMAND\\fR\nSpecify a command to execute after showing/mapping a dropdown. Note that this will run when hiding a dropdown for the first time even when --post-create-hook is used. (default: none)\n.TP\n\\fB-u COMMAND\\fR, \\fB --pre-unmap-hook=COMMAND\\fR\nSpecify a command to execute before hiding/unmapping a dropdown. (default: none)\n.TP\n\\fB-U COMMAND\\fR, \\fB --post-unmap-hook=COMMAND\\fR\nSpecify a command to execute after hiding/unmapping a dropdown. (default: none)\n.TP\n\\fB-l COMMAND\\fR, \\fB --pre-map-float-command=COMMAND\\fR\nSpecify a command execute before showing/mapping a dropdown in order to float the dropdown (e.g. a bspwm oneshot rule). This may be useful if you don't want to float all windows of a given program and tdrop doesn't automatically support this for your window manager with the -a flag. This will override any default floating command when used with -a.\n.TP\n\\fB-L COMMAND\\fR, \\fB --post-map-float-command=COMMAND\\fR\nSpecify a command execute after showing/mapping a dropdown in order to float the dropdown. This may be useful if you don't want to float all windows of a given program and tdrop doesn't automatically support this for your window manager with the -a flag. This can be used if your window manager does not support floating rules at all; for example, it can be used to fake a key combination (e.g. using xdotool) that will float the current window. This will override any default floating command when used with -a.\n.TP\n\\fB-d DEC_SIZE\\fR, \\fB --decoration-fix=DEC_SIZE\\fR\nSpecify a window decoration/border size in the form <x decoration size>x<y decoration size> to be taken into account when saving window position. This should not be necessary for most window managers and is only used with 'auto_show', e.g. 'tdrop -d 1x22 auto_show' for blackbox. (default: none)\n.TP\n\\fB-S\\fR, \\fB --no-subtract-when-same\\fR\nThis option is a more complicated companion to -d that is also unlikely to be needed. This is used to determine how to calculate the X and Y position of a window using xwininfo when 'auto_hide' is used (if the absolute and relative X or Y values are reported as the same, this option determines the behavior). If you are sure you have the decoration size correct, but windows are still being restored in an incorrect position with 'auto_show', you may want to try using this. Takes no argument. (default: false)\n.TP\n\\fB-i\\fR, \\fB --is-floating\\fR\nSpecify a command that will determine whether the current window is floating ($wid can be used in the command instead). Only used for the auto_hide command. This will be used to save whether the current window is floating or not. When restoring the window, if there is a float command and the window was previously floating, it will be floated. (default: none)\n.TP\n\\fB-f\\fR, \\fB --program-flags\\fR\nNOTE: Using this flag is deprecated; it may be removed in the future. Instead, specify program flags after the program (e.g. \"tdrop kitty --name foo\").\n\nSpecify flags/options that the terminal or program should be called with. For example, to set the title of the terminal, something like 'tdrop -f \"--title mytitle\" <program>' can be used.\n\nCaution: If there is a tmux session specified (with -s), the option to execute a program (usually -e for terminal programs) is implicitly added by tdrop! (default: none)\n.TP\n\\fB-a\\fR, \\fB --auto-detect-wm\\fR\nIf there are available settings for the detected window manager for the -l, -L, -d, and/or -i options, automatically set them. Takes no argument. Manually specified settings take precedence. This can be used both for dropdowns and the auto_(hide|show) commands. Takes no argument. (default: false)\n.TP\n\\fB-m\\fR, \\fB --monitor-aware\\fR\nThis option only applies for dropdowns (not auto-hiding and auto-showing). Specify that geometry values should be relative to the current monitor. For example, if the width is a percentage or negative value, the pixel width will be calculated as a percentage of the current monitor's width (instead of the combined width of all monitors). If the monitor changes, this option will cause a dropdown to be resized to fit the given percentages. Note that this option assumes xrandr is being used and requires xrandr to work. (default: false)\n.TP\n\\fB-t\\fR, \\fB --pointer-monitor-detection\\fR\nUse mouse pointer location for detecting which monitor is the current one so terminal will be displayed on it. Without this option, the monitor with currently active window is considered the current one. This option is only effective if -m / --monitor-aware option is enabled.\n.TP\n\\fB-A\\fR, \\fB --activate\\fR\nAlways activate/show the dropdown if it is not currently focused. Only hide the dropdown if it is currently focused.\n.TP\n\\fB--monitor=NAME\\fR\nSpecify the monitor to base geometry calculations on when using -m / --monitor-aware instead of detecting the monitor by the actively focused window or mouse pointer.\n.TP\n\\fB --wm=NAME\\fR\nSpecify the window manager name (which determines the default settings when -a is specified). This may be useful if you've change the name of your window manager using wmname as this will prevent tdrop from correctly detecting the real window manager name. This could also potentially be useful if the all the default -a settings for another window manager work with the current one (e.g. if using a similar but differently named fork of some window manager). (default: automatically detected)\n.TP\n\\fB --class=NAME\\fR\nProviding this option lets tdrop know what the class (or classname) of the window is (it does not actually set the class for a window). This is used for window managers like bspwm that use the class for floating rules. For some commonly used programs, tdrop will already use the correct class. This option is useful when the program name and class are not the same and there is not already a default mapping between the two. (default: the program name or a known substitution)\n\nBoth the class and classname of a window can be obtained using xprop (see WM_CLASS). As for the difference, generally the class starts with an uppercase letter and the classname starts with a lowercase letter. The xprop output may only list one for some programs (e.g. urxvt only has \"urxvt\"). Currently this option is only useful for bspwm, and it does not matter whether the class or classname (which bspwm calls an instance name) is provided, so the user does not really need to worry about the distinction.\n.TP\n\\fB --name=NAME\\fR\nThis option only applies for dropdowns (not auto-hiding and auto-showing). Set a new name for the dropdown window (see _NET_WM_NAME and WM_NAME in xprop output). This option may be useful if you want to add specific rules just for dropdowns with a program like compton by giving them a common title. (default: none)\n.TP\n\\fB --clear\\fR\nUsed to clear a saved window id for the given program or 'current' instead of creating a dropdown. Takes no argument.\n.TP\n\\fB --no-cancel\\fR\nSpecifies that manually re-showing an auto-hidden window with tdrop should not cancel an auto_show. Takes no argument. See the examples.\n.TP\n\\fB --timeout\\fR\nSpecifies the timeout in to wait for a window to appear when starting a program before giving up. This prevents a tdrop process from sticking around forever if a program fails to start. (default: 10)\n.TP\n\\fB --debug\\fR\nPrint information for debugging to stdout and to /tmp/tdrop_<user>/log. Takes no argument. (default: false)\n.TP\n\\fB-r\\fR, \\fB --remember\\fR\nStore window geometry when hiding and restore geometry when showing instead of using the specified -x, -y, -w, and -h arguments. If used in combination with -m, the x and y positions will be shifted relative to the current monitor when storing/restoring. For example, if you close the dropdown on the leftmost monitor where x is 0 and restore on a monitor to the right, tdrop will offset x so it shows up on the right monitor. This option takes no argument. (default: false)\n.TP\n\\fB-N\\fR, \\fB --no-manage\\fR\nThis is shorthand for -x \"\", -y \"\", -w \"\", -h \"\" and is incompatible with them (do not set both). When specified, tdrop will not enforce any geometry on the dropdown. This can be useful in combination with --remember if you want to ignore the default geometry values and not have tdrop alter the window geometry when first creating the dropdown. Takes no argument. (default: false)\n.TP\n\\fB --help\\fR\nPrint basic help information. Takes no argument.\n\n.SH EXAMPLES\n.SS Making Dropdowns\nUse a key binding program such as sxhkd to bind keys to these commands.\n\nThe simplest example to make a dropdown for an xterm:\n.br\n$ tdrop xterm\n\nWhen using a tiling window manager like bspwm, dropdowns like guake will by default be tiled instead of floated. One can create a rule to float every instance of guake or another dropdown. However, one may not want to float every instance of a terminal used with tdrop. Tdrop allows the user to run their own commands at various points during execution, for example before mapping the window:\n.br\n$ tdrop -p \"bspc rule -a xterm -o floating=on\" xterm\n\nTdrop also provides tested settings for certain window managers. One can use the '-a' flag if settings exist for the current window manager. For example, if bspwm is the window manager, the following command is the same as the above command and will work for whatever terminal/program is specified and will also work with 'tdrop auto_show'. For a list of window managers with tested settings see the readme or the script itself.\n.br\n$ tdrop -a xterm\n\nTdrop supports controlling the initial size and placement of a terminal. The border of a window may need to be taken into an account. For example, I use a border size of 2, so I use 4 less than my screen size. I also use a y-offset of 14 so that the dropdown doesn't hide my panel:\n.br\n$ tdrop -a -w 1362 -y 14 xterm\n\nTdrop can also create a tmux session if it does not exist:\n.br\n$ tdrop -a -w 1362 -y 14 -s dropdown xterm\n\nTdrop allows for having multiple dropdowns of the same type:\n.br\n$ tdrop xterm\n.br\n$ tdrop -n 1 xterm\n.br\n$ tdrop -n 2 xterm\n.br\n...\n\nTdrop works with normal windows (with some potential visual annoyance, see BUGS):\n.br\n$ tdrop zathura\n.br\n# the current window\n.br\n$ tdrop current\n\nOnce a window is turned into a dropdown, the key bound to 'tdrop ... current' will continue to toggle that window until it is closed. Then the key can be used to create a new dropdown. '-n' can also be used to have multiple 'current' keys. If an active window is accidentally turned into a dropdown, it can be cleared:\n.br\n$ tdrop --clear current\n.br\n# clear a specific number\n.br\n$ tdrop -n 1 --clear current\n\n.SS Auto-hiding/showing\nThese example will work even for non-dropdown terminals.\n\nTdrop provides the functionality to get programs/terminals out of the way when opening other programs. For example, when opening an image viewer from a normal floating dropdown, the dropdown will be over the image viewer. This requires an extra hotkey press to hide the dropdown. If one wants to return to the dropdown after looking at images, the hotkey must be once again invoked. Tdrop allows for this process to be automated.\n\nFor example, this could be added to a shell's config/startup file:\n.br\nhide_on_open() { tdrop -a auto_hide; \"$@\" && tdrop -a auto_show }\n\nTo use it in an alias when writing a commit message in an graphical $EDITOR started from a terminal:\n.br\nalias gc='hide_on_open git commit'\n\nThis will hide the terminal window when opening the commit editor and then reshow the terminal once the editor is closed. It should also maintain the window's position and size when showing it. If the window moves down and to the right every time it is auto-hidden and then shown again, the user may need to specify a -d value. Alternatively, if one already exists for the user's window manager, -a can be used to automatically set it. The -l and -L options are also used with auto_show and can be set automatically with -a if default settings exist for the current window manager.\n\nNote that for tiling window managers that support 'tdrop -a auto_show', reshowing a window will always float the window (even if it was orignally tiled) if -i is not specified. To prevent this, also use 'tdrop -a auto_hide' if your window manager is supported. Otherwise, -i must be manually specified with auto_hide.\n\nThis functionality might lead to some unwanted \"re-shows\" of dropdown. Consider a situation in which one opens an image viewer from a dropdown and leaves it open for a while, resuming normal use of the dropdown. When the image viewer is closed, the dropdown appears, unwanted. Tdrop is smart about this and won't \"re-show\" a dropdown if it has been manually toggled since an auto-hide. If you don't want this check to happen, use '--no-cancel' in your dropdown key binding.\n\nAuto-hiding functionality is particularly nice to use with a file opener like rifle:\n.br\nmime ^image, has sxiv, X, flag f = tdrop auto_hide ; sxiv -a -- \"$@\" && tdrop -a auto_show\n\n.SH BUGS\nIf -y is set to 0, a window may be subsequently moved to the middle when showing/mapping it with xdotool. This may have to do with the window border.\n\n.SH AUTHOR\nFox Kiester <noct at posteo\\&.net>\n.br\nSource: https://github.com/noctuid/tdrop\n\n.SH SEE ALSO\nxdotool(1), sxhkd(1), xprop(1), xwininfo(1), tmux(1)\n\n"
        }
      ]
    }
  ]
}