{
  "metadata": {
    "timestamp": 1736568372029,
    "page": 306,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMxMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "docker-library/postgres",
      "stars": 2220,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitattributes",
          "type": "blob",
          "size": 0.205078125,
          "content": "/*/**/Dockerfile               linguist-generated\n/*/**/docker-ensure-initdb.sh  linguist-generated\n/*/**/docker-entrypoint.sh     linguist-generated\n/Dockerfile*.template          linguist-language=Dockerfile\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0166015625,
          "content": ".jq-template.awk\n"
        },
        {
          "name": "12",
          "type": "tree",
          "content": null
        },
        {
          "name": "13",
          "type": "tree",
          "content": null
        },
        {
          "name": "14",
          "type": "tree",
          "content": null
        },
        {
          "name": "15",
          "type": "tree",
          "content": null
        },
        {
          "name": "16",
          "type": "tree",
          "content": null
        },
        {
          "name": "17",
          "type": "tree",
          "content": null
        },
        {
          "name": "AUTHORS",
          "type": "blob",
          "size": 0.181640625,
          "content": "Docker PostgreSQL Authors <pgsql-pkg-docker@postgresql.org>\n\nTianon Gravi <admwiggin@gmail.com>\nJoseph Ferguson <yosifkit@gmail.com>\n\nAnd other contributors not specifically named here.\n"
        },
        {
          "name": "Dockerfile-alpine.template",
          "type": "blob",
          "size": 9.2158203125,
          "content": "{{\n\tdef alpine_version:\n\t\tenv.variant | ltrimstr(\"alpine\")\n-}}\nFROM alpine:{{ alpine_version }}\n\n# 70 is the standard uid/gid for \"postgres\" in Alpine\n# https://git.alpinelinux.org/aports/tree/main/postgresql/postgresql.pre-install?h=3.12-stable\nRUN set -eux; \\\n\taddgroup -g 70 -S postgres; \\\n\tadduser -u 70 -S -D -G postgres -H -h /var/lib/postgresql -s /bin/sh postgres; \\\n# also create the postgres user's home directory with appropriate permissions\n# see https://github.com/docker-library/postgres/issues/274\n\tinstall --verbose --directory --owner postgres --group postgres --mode 1777 /var/lib/postgresql\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.17\nRUN set -eux; \\\n\t\\\n\tapk add --no-cache --virtual .gosu-deps \\\n\t\tca-certificates \\\n\t\tdpkg \\\n\t\tgnupg \\\n\t; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n# clean up fetch dependencies\n\tapk del --no-network .gosu-deps; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n{{ if env.version | IN(\"12\", \"13\", \"14\", \"15\", \"16\") then ( -}}\nRUN set -eux; ln -svf gosu /usr/local/bin/su-exec; su-exec nobody true # backwards compatibility (removed in PostgreSQL 17+)\n{{ ) else \"\" end -}}\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\n# alpine doesn't require explicit locale-file generation\nENV LANG en_US.utf8\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nENV PG_MAJOR {{ env.version }}\nENV PG_VERSION {{ .version }}\nENV PG_SHA256 {{ .sha256 }}\n\n{{\n\tdef llvmver:\n\t\tif alpine_version | split(\".\") | map(tonumber) < [3, 21] then\n\t\t\t\"15\"\n\t\telse\n\t\t\t\"19\"\n\t\tend\n-}}\nENV DOCKER_PG_LLVM_DEPS \\\n\t\tllvm{{ llvmver }}-dev \\\n\t\tclang{{ llvmver }}\n\nRUN set -eux; \\\n\t\\\n\twget -O postgresql.tar.bz2 \"https://ftp.postgresql.org/pub/source/v$PG_VERSION/postgresql-$PG_VERSION.tar.bz2\"; \\\n\techo \"$PG_SHA256 *postgresql.tar.bz2\" | sha256sum -c -; \\\n\tmkdir -p /usr/src/postgresql; \\\n\ttar \\\n\t\t--extract \\\n\t\t--file postgresql.tar.bz2 \\\n\t\t--directory /usr/src/postgresql \\\n\t\t--strip-components 1 \\\n\t; \\\n\trm postgresql.tar.bz2; \\\n\t\\\n\tapk add --no-cache --virtual .build-deps \\\n\t\t$DOCKER_PG_LLVM_DEPS \\\n\t\tbison \\\n\t\tcoreutils \\\n\t\tdpkg-dev dpkg \\\n\t\tflex \\\n\t\tg++ \\\n\t\tgcc \\\n\t\tkrb5-dev \\\n\t\tlibc-dev \\\n\t\tlibedit-dev \\\n\t\tlibxml2-dev \\\n\t\tlibxslt-dev \\\n\t\tlinux-headers \\\n\t\tmake \\\n\t\topenldap-dev \\\n\t\topenssl-dev \\\n\t\tperl-dev \\\n\t\tperl-ipc-run \\\n\t\tperl-utils \\\n\t\tpython3-dev \\\n\t\ttcl-dev \\\n\t\tutil-linux-dev \\\n\t\tzlib-dev \\\n# https://www.postgresql.org/docs/10/static/release-10.html#id-1.11.6.9.5.13\n\t\ticu-dev \\\n{{ if .major >= 14 then ( -}}\n# https://www.postgresql.org/docs/14/release-14.html#id-1.11.6.5.5.3.7\n\t\tlz4-dev \\\n{{ ) else \"\" end -}}\n{{ if .major >= 15 then ( -}}\n# https://www.postgresql.org/docs/15/release-15.html \"--with-zstd to enable Zstandard builds\"\n\t\tzstd-dev \\\n{{ ) else \"\" end -}}\n\t; \\\n\t\\\n\tcd /usr/src/postgresql; \\\n# update \"DEFAULT_PGSOCKET_DIR\" to \"/var/run/postgresql\" (matching Debian)\n# see https://anonscm.debian.org/git/pkg-postgresql/postgresql.git/tree/debian/patches/51-default-sockets-in-var.patch?id=8b539fcb3e093a521c095e70bdfa76887217b89f\n\tawk '$1 == \"#define\" && $2 == \"DEFAULT_PGSOCKET_DIR\" && $3 == \"\\\"/tmp\\\"\" { $3 = \"\\\"/var/run/postgresql\\\"\"; print; next } { print }' src/include/pg_config_manual.h > src/include/pg_config_manual.h.new; \\\n\tgrep '/var/run/postgresql' src/include/pg_config_manual.h.new; \\\n\tmv src/include/pg_config_manual.h.new src/include/pg_config_manual.h; \\\n\tgnuArch=\"$(dpkg-architecture --query DEB_BUILD_GNU_TYPE)\"; \\\n# explicitly update autoconf config.guess and config.sub so they support more arches/libcs\n\twget -O config/config.guess 'https://git.savannah.gnu.org/cgit/config.git/plain/config.guess?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n\twget -O config/config.sub 'https://git.savannah.gnu.org/cgit/config.git/plain/config.sub?id=7d3d27baf8107b630586c962c057e22149653deb'; \\\n\t\\\n# https://git.alpinelinux.org/aports/tree/community/postgresql15/APKBUILD?h=3.21-stable&id=40544ade947bec1798edb0f749f4e967e842624b#n172\n\texport LLVM_CONFIG=\"/usr/lib/llvm{{ llvmver }}/bin/llvm-config\"; \\\n# https://git.alpinelinux.org/aports/tree/community/postgresql15/APKBUILD?h=3.21-stable&id=40544ade947bec1798edb0f749f4e967e842624b#n177\n\texport CLANG=clang-{{ llvmver }}; \\\n\t\\\n# configure options taken from:\n# https://anonscm.debian.org/cgit/pkg-postgresql/postgresql.git/tree/debian/rules?h=9.5\n\t./configure \\\n\t\t--enable-option-checking=fatal \\\n\t\t--build=\"$gnuArch\" \\\n# \"/usr/src/postgresql/src/backend/access/common/tupconvert.c:105: undefined reference to `libintl_gettext'\"\n#\t\t--enable-nls \\\n\t\t--enable-integer-datetimes \\\n{{ if .major <= 16 then ( -}}\n{{ # in 17: this option is reversed. you need to disable it -}}\n\t\t--enable-thread-safety \\\n{{ ) else \"\" end -}}\n\t\t--enable-tap-tests \\\n# skip debugging info -- we want tiny size instead\n#\t\t--enable-debug \\\n\t\t--disable-rpath \\\n\t\t--with-uuid=e2fs \\\n{{ # in 16: \"configure: error: unrecognized options: --with-gnu-ld\" -}}\n{{ # https://github.com/postgres/postgres/commit/9db49fc5bfdc0126be03f4b8986013e59d93b91d -}}\n{{ if .major <= 15 then ( -}}\n\t\t--with-gnu-ld \\\n{{ ) else \"\" end -}}\n\t\t--with-pgport=5432 \\\n\t\t--with-system-tzdata=/usr/share/zoneinfo \\\n\t\t--prefix=/usr/local \\\n\t\t--with-includes=/usr/local/include \\\n\t\t--with-libraries=/usr/local/lib \\\n\t\t--with-gssapi \\\n\t\t--with-ldap \\\n\t\t--with-tcl \\\n\t\t--with-perl \\\n\t\t--with-python \\\n#\t\t--with-pam \\\n\t\t--with-openssl \\\n\t\t--with-libxml \\\n\t\t--with-libxslt \\\n\t\t--with-icu \\\n\t\t--with-llvm \\\n{{ if .major >= 14 then ( -}}\n\t\t--with-lz4 \\\n{{ ) else \"\" end -}}\n{{ if .major >= 15 then ( -}}\n\t\t--with-zstd \\\n{{ ) else \"\" end -}}\n\t; \\\n\tmake -j \"$(nproc)\" world-bin; \\\n\tmake install-world-bin; \\\n\tmake -C contrib install; \\\n\t\\\n\trunDeps=\"$( \\\n\t\tscanelf --needed --nobanner --format '%n#p' --recursive /usr/local \\\n\t\t\t| tr ',' '\\n' \\\n\t\t\t| sort -u \\\n\t\t\t| awk 'system(\"[ -e /usr/local/lib/\" $1 \" ]\") == 0 { next } { print \"so:\" $1 }' \\\n# Remove plperl, plpython and pltcl dependencies by default to save image size\n# To use the pl extensions, those have to be installed in a derived image\n\t\t\t| grep -v -e perl -e python -e tcl \\\n\t)\"; \\\n\tapk add --no-cache --virtual .postgresql-rundeps \\\n\t\t$runDeps \\\n\t\tbash \\\n\t\ttzdata \\\n\t\tzstd \\\n# https://wiki.alpinelinux.org/wiki/Release_Notes_for_Alpine_3.16.0#ICU_data_split\n\t\ticu-data-full \\\n# nss_wrapper is not availble on ppc64le: \"test case segfaults in ppc64le\"\n# https://git.alpinelinux.org/aports/commit/testing/nss_wrapper/APKBUILD?h=3.17-stable&id=94d81ceeb58cff448d489bbcbe9a6d40c9991663\n\t\t$([ \"$(apk --print-arch)\" != 'ppc64le' ] && echo 'nss_wrapper') \\\n\t; \\\n\tapk del --no-network .build-deps; \\\n\tcd /; \\\n\trm -rf \\\n\t\t/usr/src/postgresql \\\n\t\t/usr/local/share/doc \\\n\t\t/usr/local/share/man \\\n\t; \\\n\t\\\n\tpostgres --version\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tcp -v /usr/local/share/postgresql/postgresql.conf.sample /usr/local/share/postgresql/postgresql.conf.sample.orig; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/local/share/postgresql/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/local/share/postgresql/postgresql.conf.sample\n\nRUN install --verbose --directory --owner postgres --group postgres --mode 3777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data\n# this 1777 will be replaced by 0700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN install --verbose --directory --owner postgres --group postgres --mode 1777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nCOPY docker-entrypoint.sh docker-ensure-initdb.sh /usr/local/bin/\nRUN ln -sT docker-ensure-initdb.sh /usr/local/bin/docker-enforce-initdb.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk.\n#\n# See https://www.postgresql.org/docs/current/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/current/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL.\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/current/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
        },
        {
          "name": "Dockerfile-debian.template",
          "type": "blob",
          "size": 9.75,
          "content": "FROM debian:{{ env.variant }}-slim\n\n# explicitly set user/group IDs\nRUN set -eux; \\\n\tgroupadd -r postgres --gid=999; \\\n# https://salsa.debian.org/postgresql/postgresql-common/blob/997d842ee744687d99a2b2d95c1083a2615c79e8/debian/postgresql-common.postinst#L32-35\n\tuseradd -r -g postgres --uid=999 --home-dir=/var/lib/postgresql --shell=/bin/bash postgres; \\\n# also create the postgres user's home directory with appropriate permissions\n# see https://github.com/docker-library/postgres/issues/274\n\tinstall --verbose --directory --owner postgres --group postgres --mode 1777 /var/lib/postgresql\n\nRUN set -ex; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tgnupg \\\n# https://www.postgresql.org/docs/16/app-psql.html#APP-PSQL-META-COMMAND-PSET-PAGER\n# https://github.com/postgres/postgres/blob/REL_16_1/src/include/fe_utils/print.h#L25\n# (if \"less\" is available, it gets used as the default pager for psql, and it only adds ~1.5MiB to our image size)\n\t\tless \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\n# grab gosu for easy step-down from root\n# https://github.com/tianon/gosu/releases\nENV GOSU_VERSION 1.17\nRUN set -eux; \\\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends ca-certificates wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark > /dev/null; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\tchmod +x /usr/local/bin/gosu; \\\n\tgosu --version; \\\n\tgosu nobody true\n\n# make the \"en_US.UTF-8\" locale so postgres will be utf-8 enabled by default\nRUN set -eux; \\\n\tif [ -f /etc/dpkg/dpkg.cfg.d/docker ]; then \\\n# if this file exists, we're likely in \"debian:xxx-slim\", and locales are thus being excluded so we need to remove that exclusion (since we need locales)\n\t\tgrep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \\\n\t\tsed -ri '/\\/usr\\/share\\/locale/d' /etc/dpkg/dpkg.cfg.d/docker; \\\n\t\t! grep -q '/usr/share/locale' /etc/dpkg/dpkg.cfg.d/docker; \\\n\tfi; \\\n\tapt-get update; apt-get install -y --no-install-recommends locales; rm -rf /var/lib/apt/lists/*; \\\n\techo 'en_US.UTF-8 UTF-8' >> /etc/locale.gen; \\\n\tlocale-gen; \\\n\tlocale -a | grep 'en_US.utf8'\nENV LANG en_US.utf8\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tlibnss-wrapper \\\n\t\txz-utils \\\n\t\tzstd \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\nRUN mkdir /docker-entrypoint-initdb.d\n\nRUN set -ex; \\\n# pub   4096R/ACCC4CF8 2011-10-13 [expires: 2019-07-02]\n#       Key fingerprint = B97B 0AFC AA1A 47F0 44F2  44A0 7FCC 7D46 ACCC 4CF8\n# uid                  PostgreSQL Debian Repository\n\tkey='B97B0AFCAA1A47F044F244A07FCC7D46ACCC4CF8'; \\\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tmkdir -p /usr/local/share/keyrings/; \\\n\tgpg --batch --keyserver keyserver.ubuntu.com --recv-keys \"$key\"; \\\n\tgpg --batch --export --armor \"$key\" > /usr/local/share/keyrings/postgres.gpg.asc; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\"\n\nENV PG_MAJOR {{ env.version }}\nENV PATH $PATH:/usr/lib/postgresql/$PG_MAJOR/bin\n\nENV PG_VERSION {{ .[env.variant].version }}\n\nRUN set -ex; \\\n\t\\\n# see note below about \"*.pyc\" files\n\texport PYTHONDONTWRITEBYTECODE=1; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture)\"; \\\n\taptRepo=\"[ signed-by=/usr/local/share/keyrings/postgres.gpg.asc ] http://apt.postgresql.org/pub/repos/apt/ {{ env.variant }}-pgdg main $PG_MAJOR\"; \\\n\tcase \"$dpkgArch\" in \\\n\t\t{{ .[env.variant].arches | join(\" | \") }}) \\\n# arches officialy built by upstream\n\t\t\techo \"deb $aptRepo\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\tapt-get update; \\\n\t\t\t;; \\\n\t\t*) \\\n# we're on an architecture upstream doesn't officially build for\n# let's build binaries from their published source packages\n\t\t\techo \"deb-src $aptRepo\" > /etc/apt/sources.list.d/pgdg.list; \\\n\t\t\t\\\n\t\t\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\t\t\t\\\n\t\t\ttempDir=\"$(mktemp -d)\"; \\\n\t\t\tcd \"$tempDir\"; \\\n\t\t\t\\\n# create a temporary local APT repo to install from (so that dependency resolution can be handled by APT, as it should be)\n\t\t\tapt-get update; \\\n\t\t\tapt-get install -y --no-install-recommends dpkg-dev; \\\n\t\t\techo \"deb [ trusted=yes ] file://$tempDir ./\" > /etc/apt/sources.list.d/temp.list; \\\n\t\t\t_update_repo() { \\\n\t\t\t\tdpkg-scanpackages . > Packages; \\\n# work around the following APT issue by using \"Acquire::GzipIndexes=false\" (overriding \"/etc/apt/apt.conf.d/docker-gzip-indexes\")\n#   Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n#   ...\n#   E: Failed to fetch store:/var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages  Could not open file /var/lib/apt/lists/partial/_tmp_tmp.ODWljpQfkE_._Packages - open (13: Permission denied)\n\t\t\t\tapt-get -o Acquire::GzipIndexes=false update; \\\n\t\t\t}; \\\n\t\t\t_update_repo; \\\n\t\t\t\\\n# build .deb files from upstream's source packages (which are verified by apt-get)\n\t\t\tnproc=\"$(nproc)\"; \\\n\t\t\texport DEB_BUILD_OPTIONS=\"nocheck parallel=$nproc\"; \\\n# we have to build postgresql-common first because postgresql-$PG_MAJOR shares \"debian/rules\" logic with it: https://salsa.debian.org/postgresql/postgresql/-/commit/99f44476e258cae6bf9e919219fa2c5414fa2876\n# (and it \"Depends: pgdg-keyring\")\n\t\t\tapt-get build-dep -y postgresql-common pgdg-keyring; \\\n\t\t\tapt-get source --compile postgresql-common pgdg-keyring; \\\n\t\t\t_update_repo; \\\n{{ if .major == 13 then ( -}}\n# we need DEBIAN_FRONTEND on postgresql-13 for slapd (\"Please enter the password for the admin entry in your LDAP directory.\"); see https://bugs.debian.org/929417\n\t\t\tDEBIAN_FRONTEND=noninteractive \\\n{{ ) else \"\" end -}}\n\t\t\tapt-get build-dep -y \"postgresql-$PG_MAJOR=$PG_VERSION\"; \\\n\t\t\tapt-get source --compile \"postgresql-$PG_MAJOR=$PG_VERSION\"; \\\n\t\t\t\\\n# we don't remove APT lists here because they get re-downloaded and removed later\n\t\t\t\\\n# reset apt-mark's \"manual\" list so that \"purge --auto-remove\" will remove all build dependencies\n# (which is done after we install the built packages so we don't have to redownload any overlapping dependencies)\n\t\t\tapt-mark showmanual | xargs apt-mark auto > /dev/null; \\\n\t\t\tapt-mark manual $savedAptMark; \\\n\t\t\t\\\n\t\t\tls -lAFh; \\\n\t\t\t_update_repo; \\\n\t\t\tgrep '^Package: ' Packages; \\\n\t\t\tcd /; \\\n\t\t\t;; \\\n\tesac; \\\n\t\\\n\tapt-get install -y --no-install-recommends postgresql-common; \\\n\tsed -ri 's/#(create_main_cluster) .*$/\\1 = false/' /etc/postgresql-common/createcluster.conf; \\\n\tapt-get install -y --no-install-recommends \\\n\t\t\"postgresql-$PG_MAJOR=$PG_VERSION\" \\\n\t; \\\n\t\\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tif [ -n \"$tempDir\" ]; then \\\n# if we have leftovers from building, let's purge them (including extra, unnecessary build deps)\n\t\tapt-get purge -y --auto-remove; \\\n\t\trm -rf \"$tempDir\" /etc/apt/sources.list.d/temp.list; \\\n\tfi; \\\n\t\\\n# some of the steps above generate a lot of \"*.pyc\" files (and setting \"PYTHONDONTWRITEBYTECODE\" beforehand doesn't propagate properly for some reason), so we clean them up manually (as long as they aren't owned by a package)\n\tfind /usr -name '*.pyc' -type f -exec bash -c 'for pyc; do dpkg -S \"$pyc\" &> /dev/null || rm -vf \"$pyc\"; done' -- '{}' +; \\\n\t\\\n\tpostgres --version\n\n# make the sample config easier to munge (and \"correct by default\")\nRUN set -eux; \\\n\tdpkg-divert --add --rename --divert \"/usr/share/postgresql/postgresql.conf.sample.dpkg\" \"/usr/share/postgresql/$PG_MAJOR/postgresql.conf.sample\"; \\\n\tcp -v /usr/share/postgresql/postgresql.conf.sample.dpkg /usr/share/postgresql/postgresql.conf.sample; \\\n\tln -sv ../postgresql.conf.sample \"/usr/share/postgresql/$PG_MAJOR/\"; \\\n\tsed -ri \"s!^#?(listen_addresses)\\s*=\\s*\\S+.*!\\1 = '*'!\" /usr/share/postgresql/postgresql.conf.sample; \\\n\tgrep -F \"listen_addresses = '*'\" /usr/share/postgresql/postgresql.conf.sample\n\nRUN install --verbose --directory --owner postgres --group postgres --mode 3777 /var/run/postgresql\n\nENV PGDATA /var/lib/postgresql/data\n# this 1777 will be replaced by 0700 at runtime (allows semi-arbitrary \"--user\" values)\nRUN install --verbose --directory --owner postgres --group postgres --mode 1777 \"$PGDATA\"\nVOLUME /var/lib/postgresql/data\n\nCOPY docker-entrypoint.sh docker-ensure-initdb.sh /usr/local/bin/\nRUN ln -sT docker-ensure-initdb.sh /usr/local/bin/docker-enforce-initdb.sh\nENTRYPOINT [\"docker-entrypoint.sh\"]\n\n# We set the default STOPSIGNAL to SIGINT, which corresponds to what PostgreSQL\n# calls \"Fast Shutdown mode\" wherein new connections are disallowed and any\n# in-progress transactions are aborted, allowing PostgreSQL to stop cleanly and\n# flush tables to disk.\n#\n# See https://www.postgresql.org/docs/current/server-shutdown.html for more details\n# about available PostgreSQL server shutdown signals.\n#\n# See also https://www.postgresql.org/docs/current/server-start.html for further\n# justification of this as the default value, namely that the example (and\n# shipped) systemd service files use the \"Fast Shutdown mode\" for service\n# termination.\n#\nSTOPSIGNAL SIGINT\n#\n# An additional setting that is recommended for all users regardless of this\n# value is the runtime \"--stop-timeout\" (or your orchestrator/runtime's\n# equivalent) for controlling how long to wait between sending the defined\n# STOPSIGNAL and sending SIGKILL.\n#\n# The default in most runtimes (such as Docker) is 10 seconds, and the\n# documentation at https://www.postgresql.org/docs/current/server-start.html notes\n# that even 90 seconds may not be long enough in many instances.\n\nEXPOSE 5432\nCMD [\"postgres\"]\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.05859375,
          "content": "Copyright (c) 2014, Docker PostgreSQL Authors (See AUTHORS)\n\nPermission is hereby granted, free of charge, to any person\nobtaining a copy of this software and associated documentation\nfiles (the \"Software\"), to deal in the Software without\nrestriction, including without limitation the rights to use,\ncopy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the\nSoftware is furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES\nOF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT\nHOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,\nWHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\nFROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 1.67578125,
          "content": "# https://github.com/docker-library/postgres\n\n## Maintained by: [the PostgreSQL Docker Community](https://github.com/docker-library/postgres)\n\nThis is the Git repo of the [Docker \"Official Image\"](https://github.com/docker-library/official-images#what-are-official-images) for [`postgres`](https://hub.docker.com/_/postgres/) (not to be confused with any official `postgres` image provided by `postgres` upstream). See [the Docker Hub page](https://hub.docker.com/_/postgres/) for the full readme on how to use this Docker image and for information regarding contributing and issues.\n\nThe [full image description on Docker Hub](https://hub.docker.com/_/postgres/) is generated/maintained over in [the docker-library/docs repository](https://github.com/docker-library/docs), specifically in [the `postgres` directory](https://github.com/docker-library/docs/tree/master/postgres).\n\n## See a change merged here that doesn't show up on Docker Hub yet?\n\nFor more information about the full official images change lifecycle, see [the \"An image's source changed in Git, now what?\" FAQ entry](https://github.com/docker-library/faq#an-images-source-changed-in-git-now-what).\n\nFor outstanding `postgres` image PRs, check [PRs with the \"library/postgres\" label on the official-images repository](https://github.com/docker-library/official-images/labels/library%2Fpostgres). For the current \"source of truth\" for [`postgres`](https://hub.docker.com/_/postgres/), see [the `library/postgres` file in the official-images repository](https://github.com/docker-library/official-images/blob/master/library/postgres).\n\n<!-- THIS FILE IS GENERATED BY https://github.com/docker-library/docs/blob/master/generate-repo-stub-readme.sh -->\n"
        },
        {
          "name": "apply-templates.sh",
          "type": "blob",
          "size": 1.390625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n[ -f versions.json ] # run \"versions.sh\" first\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\njqt='.jq-template.awk'\nif [ -n \"${BASHBREW_SCRIPTS:-}\" ]; then\n\tjqt=\"$BASHBREW_SCRIPTS/jq-template.awk\"\nelif [ \"$BASH_SOURCE\" -nt \"$jqt\" ]; then\n\t# https://github.com/docker-library/bashbrew/blob/master/scripts/jq-template.awk\n\twget -qO \"$jqt\" 'https://github.com/docker-library/bashbrew/raw/9f6a35772ac863a0241f147c820354e4008edf38/scripts/jq-template.awk'\nfi\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\ngenerated_warning() {\n\tcat <<-EOH\n\t\t#\n\t\t# NOTE: THIS DOCKERFILE IS GENERATED VIA \"apply-templates.sh\"\n\t\t#\n\t\t# PLEASE DO NOT EDIT IT DIRECTLY.\n\t\t#\n\n\tEOH\n}\n\nfor version; do\n\texport version\n\n\tmajor=\"$(jq -r '.[env.version].major' versions.json)\"\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\trm -rf \"$version\"\n\n\tfor variant in \"${variants[@]}\"; do\n\t\texport variant\n\n\t\tdir=\"$version/$variant\"\n\t\tmkdir -p \"$dir\"\n\n\t\techo \"processing $dir ...\"\n\n\t\tcase \"$variant\" in\n\t\t\talpine*)\n\t\t\t\ttemplate='Dockerfile-alpine.template'\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\ttemplate='Dockerfile-debian.template'\n\t\t\t\t;;\n\t\tesac\n\n\t\t{\n\t\t\tgenerated_warning\n\t\t\tgawk -f \"$jqt\" \"$template\"\n\t\t} > \"$dir/Dockerfile\"\n\n\t\tcp -a docker-entrypoint.sh docker-ensure-initdb.sh \"$dir/\"\n\tdone\ndone\n"
        },
        {
          "name": "docker-ensure-initdb.sh",
          "type": "blob",
          "size": 2.2353515625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n#\n# This script is intended for three main use cases:\n#\n#  1. (most importantly) as an example of how to use \"docker-entrypoint.sh\" to extend/reuse the initialization behavior\n#\n#  2. (\"docker-ensure-initdb.sh\") as a Kubernetes \"init container\" to ensure the provided database directory is initialized; see also \"startup probes\" for an alternative solution\n#       (no-op if database is already initialized)\n#\n#  3. (\"docker-enforce-initdb.sh\") as part of CI to ensure the database is fully initialized before use\n#       (error if database is already initialized)\n#\n\nsource /usr/local/bin/docker-entrypoint.sh\n\n# arguments to this script are assumed to be arguments to the \"postgres\" server (same as \"docker-entrypoint.sh\"), and most \"docker-entrypoint.sh\" functions assume \"postgres\" is the first argument (see \"_main\" over there)\nif [ \"$#\" -eq 0 ] || [ \"$1\" != 'postgres' ]; then\n\tset -- postgres \"$@\"\nfi\n\n# see also \"_main\" in \"docker-entrypoint.sh\"\n\ndocker_setup_env\n# setup data directories and permissions (when run as root)\ndocker_create_db_directories\nif [ \"$(id -u)\" = '0' ]; then\n\t# then restart script as postgres user\n\texec gosu postgres \"$BASH_SOURCE\" \"$@\"\nfi\n\n# only run initialization on an empty data directory\nif [ -z \"$DATABASE_ALREADY_EXISTS\" ]; then\n\tdocker_verify_minimum_env\n\n\t# check dir permissions to reduce likelihood of half-initialized database\n\tls /docker-entrypoint-initdb.d/ > /dev/null\n\n\tdocker_init_database_dir\n\tpg_setup_hba_conf \"$@\"\n\n\t# PGPASSWORD is required for psql when authentication is required for 'local' connections via pg_hba.conf and is otherwise harmless\n\t# e.g. when '--auth=md5' or '--auth-local=md5' is used in POSTGRES_INITDB_ARGS\n\texport PGPASSWORD=\"${PGPASSWORD:-$POSTGRES_PASSWORD}\"\n\tdocker_temp_server_start \"$@\"\n\n\tdocker_setup_db\n\tdocker_process_init_files /docker-entrypoint-initdb.d/*\n\n\tdocker_temp_server_stop\n\tunset PGPASSWORD\nelse\n\tself=\"$(basename \"$0\")\"\n\tcase \"$self\" in\n\t\tdocker-ensure-initdb.sh)\n\t\t\techo >&2 \"$self: note: database already initialized in '$PGDATA'!\"\n\t\t\texit 0\n\t\t\t;;\n\n\t\tdocker-enforce-initdb.sh)\n\t\t\techo >&2 \"$self: error: (unexpected) database found in '$PGDATA'!\"\n\t\t\texit 1\n\t\t\t;;\n\n\t\t*)\n\t\t\techo >&2 \"$self: error: unknown file name: $self\"\n\t\t\texit 99\n\t\t\t;;\n\tesac\nfi\n"
        },
        {
          "name": "docker-entrypoint.sh",
          "type": "blob",
          "size": 12.3759765625,
          "content": "#!/usr/bin/env bash\nset -Eeo pipefail\n# TODO swap to -Eeuo pipefail above (after handling all potentially-unset variables)\n\n# usage: file_env VAR [DEFAULT]\n#    ie: file_env 'XYZ_DB_PASSWORD' 'example'\n# (will allow for \"$XYZ_DB_PASSWORD_FILE\" to fill in the value of\n#  \"$XYZ_DB_PASSWORD\" from a file, especially for Docker's secrets feature)\nfile_env() {\n\tlocal var=\"$1\"\n\tlocal fileVar=\"${var}_FILE\"\n\tlocal def=\"${2:-}\"\n\tif [ \"${!var:-}\" ] && [ \"${!fileVar:-}\" ]; then\n\t\tprintf >&2 'error: both %s and %s are set (but are exclusive)\\n' \"$var\" \"$fileVar\"\n\t\texit 1\n\tfi\n\tlocal val=\"$def\"\n\tif [ \"${!var:-}\" ]; then\n\t\tval=\"${!var}\"\n\telif [ \"${!fileVar:-}\" ]; then\n\t\tval=\"$(< \"${!fileVar}\")\"\n\tfi\n\texport \"$var\"=\"$val\"\n\tunset \"$fileVar\"\n}\n\n# check to see if this file is being run or sourced from another script\n_is_sourced() {\n\t# https://unix.stackexchange.com/a/215279\n\t[ \"${#FUNCNAME[@]}\" -ge 2 ] \\\n\t\t&& [ \"${FUNCNAME[0]}\" = '_is_sourced' ] \\\n\t\t&& [ \"${FUNCNAME[1]}\" = 'source' ]\n}\n\n# used to create initial postgres directories and if run as root, ensure ownership to the \"postgres\" user\ndocker_create_db_directories() {\n\tlocal user; user=\"$(id -u)\"\n\n\tmkdir -p \"$PGDATA\"\n\t# ignore failure since there are cases where we can't chmod (and PostgreSQL might fail later anyhow - it's picky about permissions of this directory)\n\tchmod 00700 \"$PGDATA\" || :\n\n\t# ignore failure since it will be fine when using the image provided directory; see also https://github.com/docker-library/postgres/pull/289\n\tmkdir -p /var/run/postgresql || :\n\tchmod 03775 /var/run/postgresql || :\n\n\t# Create the transaction log directory before initdb is run so the directory is owned by the correct user\n\tif [ -n \"${POSTGRES_INITDB_WALDIR:-}\" ]; then\n\t\tmkdir -p \"$POSTGRES_INITDB_WALDIR\"\n\t\tif [ \"$user\" = '0' ]; then\n\t\t\tfind \"$POSTGRES_INITDB_WALDIR\" \\! -user postgres -exec chown postgres '{}' +\n\t\tfi\n\t\tchmod 700 \"$POSTGRES_INITDB_WALDIR\"\n\tfi\n\n\t# allow the container to be started with `--user`\n\tif [ \"$user\" = '0' ]; then\n\t\tfind \"$PGDATA\" \\! -user postgres -exec chown postgres '{}' +\n\t\tfind /var/run/postgresql \\! -user postgres -exec chown postgres '{}' +\n\tfi\n}\n\n# initialize empty PGDATA directory with new database via 'initdb'\n# arguments to `initdb` can be passed via POSTGRES_INITDB_ARGS or as arguments to this function\n# `initdb` automatically creates the \"postgres\", \"template0\", and \"template1\" dbnames\n# this is also where the database user is created, specified by `POSTGRES_USER` env\ndocker_init_database_dir() {\n\t# \"initdb\" is particular about the current user existing in \"/etc/passwd\", so we use \"nss_wrapper\" to fake that if necessary\n\t# see https://github.com/docker-library/postgres/pull/253, https://github.com/docker-library/postgres/issues/359, https://cwrap.org/nss_wrapper.html\n\tlocal uid; uid=\"$(id -u)\"\n\tif ! getent passwd \"$uid\" &> /dev/null; then\n\t\t# see if we can find a suitable \"libnss_wrapper.so\" (https://salsa.debian.org/sssd-team/nss-wrapper/-/commit/b9925a653a54e24d09d9b498a2d913729f7abb15)\n\t\tlocal wrapper\n\t\tfor wrapper in {/usr,}/lib{/*,}/libnss_wrapper.so; do\n\t\t\tif [ -s \"$wrapper\" ]; then\n\t\t\t\tNSS_WRAPPER_PASSWD=\"$(mktemp)\"\n\t\t\t\tNSS_WRAPPER_GROUP=\"$(mktemp)\"\n\t\t\t\texport LD_PRELOAD=\"$wrapper\" NSS_WRAPPER_PASSWD NSS_WRAPPER_GROUP\n\t\t\t\tlocal gid; gid=\"$(id -g)\"\n\t\t\t\tprintf 'postgres:x:%s:%s:PostgreSQL:%s:/bin/false\\n' \"$uid\" \"$gid\" \"$PGDATA\" > \"$NSS_WRAPPER_PASSWD\"\n\t\t\t\tprintf 'postgres:x:%s:\\n' \"$gid\" > \"$NSS_WRAPPER_GROUP\"\n\t\t\t\tbreak\n\t\t\tfi\n\t\tdone\n\tfi\n\n\tif [ -n \"${POSTGRES_INITDB_WALDIR:-}\" ]; then\n\t\tset -- --waldir \"$POSTGRES_INITDB_WALDIR\" \"$@\"\n\tfi\n\n\t# --pwfile refuses to handle a properly-empty file (hence the \"\\n\"): https://github.com/docker-library/postgres/issues/1025\n\teval 'initdb --username=\"$POSTGRES_USER\" --pwfile=<(printf \"%s\\n\" \"$POSTGRES_PASSWORD\") '\"$POSTGRES_INITDB_ARGS\"' \"$@\"'\n\n\t# unset/cleanup \"nss_wrapper\" bits\n\tif [[ \"${LD_PRELOAD:-}\" == */libnss_wrapper.so ]]; then\n\t\trm -f \"$NSS_WRAPPER_PASSWD\" \"$NSS_WRAPPER_GROUP\"\n\t\tunset LD_PRELOAD NSS_WRAPPER_PASSWD NSS_WRAPPER_GROUP\n\tfi\n}\n\n# print large warning if POSTGRES_PASSWORD is long\n# error if both POSTGRES_PASSWORD is empty and POSTGRES_HOST_AUTH_METHOD is not 'trust'\n# print large warning if POSTGRES_HOST_AUTH_METHOD is set to 'trust'\n# assumes database is not set up, ie: [ -z \"$DATABASE_ALREADY_EXISTS\" ]\ndocker_verify_minimum_env() {\n\tcase \"${PG_MAJOR:-}\" in\n\t\t12 | 13) # https://github.com/postgres/postgres/commit/67a472d71c98c3d2fa322a1b4013080b20720b98\n\t\t\t# check password first so we can output the warning before postgres\n\t\t\t# messes it up\n\t\t\tif [ \"${#POSTGRES_PASSWORD}\" -ge 100 ]; then\n\t\t\t\tcat >&2 <<-'EOWARN'\n\n\t\t\t\t\tWARNING: The supplied POSTGRES_PASSWORD is 100+ characters.\n\n\t\t\t\t\t  This will not work if used via PGPASSWORD with \"psql\".\n\n\t\t\t\t\t  https://www.postgresql.org/message-id/flat/E1Rqxp2-0004Qt-PL%40wrigleys.postgresql.org (BUG #6412)\n\t\t\t\t\t  https://github.com/docker-library/postgres/issues/507\n\n\t\t\t\tEOWARN\n\t\t\tfi\n\t\t\t;;\n\tesac\n\tif [ -z \"$POSTGRES_PASSWORD\" ] && [ 'trust' != \"$POSTGRES_HOST_AUTH_METHOD\" ]; then\n\t\t# The - option suppresses leading tabs but *not* spaces. :)\n\t\tcat >&2 <<-'EOE'\n\t\t\tError: Database is uninitialized and superuser password is not specified.\n\t\t\t       You must specify POSTGRES_PASSWORD to a non-empty value for the\n\t\t\t       superuser. For example, \"-e POSTGRES_PASSWORD=password\" on \"docker run\".\n\n\t\t\t       You may also use \"POSTGRES_HOST_AUTH_METHOD=trust\" to allow all\n\t\t\t       connections without a password. This is *not* recommended.\n\n\t\t\t       See PostgreSQL documentation about \"trust\":\n\t\t\t       https://www.postgresql.org/docs/current/auth-trust.html\n\t\tEOE\n\t\texit 1\n\tfi\n\tif [ 'trust' = \"$POSTGRES_HOST_AUTH_METHOD\" ]; then\n\t\tcat >&2 <<-'EOWARN'\n\t\t\t********************************************************************************\n\t\t\tWARNING: POSTGRES_HOST_AUTH_METHOD has been set to \"trust\". This will allow\n\t\t\t         anyone with access to the Postgres port to access your database without\n\t\t\t         a password, even if POSTGRES_PASSWORD is set. See PostgreSQL\n\t\t\t         documentation about \"trust\":\n\t\t\t         https://www.postgresql.org/docs/current/auth-trust.html\n\t\t\t         In Docker's default configuration, this is effectively any other\n\t\t\t         container on the same system.\n\n\t\t\t         It is not recommended to use POSTGRES_HOST_AUTH_METHOD=trust. Replace\n\t\t\t         it with \"-e POSTGRES_PASSWORD=password\" instead to set a password in\n\t\t\t         \"docker run\".\n\t\t\t********************************************************************************\n\t\tEOWARN\n\tfi\n}\n\n# usage: docker_process_init_files [file [file [...]]]\n#    ie: docker_process_init_files /always-initdb.d/*\n# process initializer files, based on file extensions and permissions\ndocker_process_init_files() {\n\t# psql here for backwards compatibility \"${psql[@]}\"\n\tpsql=( docker_process_sql )\n\n\tprintf '\\n'\n\tlocal f\n\tfor f; do\n\t\tcase \"$f\" in\n\t\t\t*.sh)\n\t\t\t\t# https://github.com/docker-library/postgres/issues/450#issuecomment-393167936\n\t\t\t\t# https://github.com/docker-library/postgres/pull/452\n\t\t\t\tif [ -x \"$f\" ]; then\n\t\t\t\t\tprintf '%s: running %s\\n' \"$0\" \"$f\"\n\t\t\t\t\t\"$f\"\n\t\t\t\telse\n\t\t\t\t\tprintf '%s: sourcing %s\\n' \"$0\" \"$f\"\n\t\t\t\t\t. \"$f\"\n\t\t\t\tfi\n\t\t\t\t;;\n\t\t\t*.sql)     printf '%s: running %s\\n' \"$0\" \"$f\"; docker_process_sql -f \"$f\"; printf '\\n' ;;\n\t\t\t*.sql.gz)  printf '%s: running %s\\n' \"$0\" \"$f\"; gunzip -c \"$f\" | docker_process_sql; printf '\\n' ;;\n\t\t\t*.sql.xz)  printf '%s: running %s\\n' \"$0\" \"$f\"; xzcat \"$f\" | docker_process_sql; printf '\\n' ;;\n\t\t\t*.sql.zst) printf '%s: running %s\\n' \"$0\" \"$f\"; zstd -dc \"$f\" | docker_process_sql; printf '\\n' ;;\n\t\t\t*)         printf '%s: ignoring %s\\n' \"$0\" \"$f\" ;;\n\t\tesac\n\t\tprintf '\\n'\n\tdone\n}\n\n# Execute sql script, passed via stdin (or -f flag of pqsl)\n# usage: docker_process_sql [psql-cli-args]\n#    ie: docker_process_sql --dbname=mydb <<<'INSERT ...'\n#    ie: docker_process_sql -f my-file.sql\n#    ie: docker_process_sql <my-file.sql\ndocker_process_sql() {\n\tlocal query_runner=( psql -v ON_ERROR_STOP=1 --username \"$POSTGRES_USER\" --no-password --no-psqlrc )\n\tif [ -n \"$POSTGRES_DB\" ]; then\n\t\tquery_runner+=( --dbname \"$POSTGRES_DB\" )\n\tfi\n\n\tPGHOST= PGHOSTADDR= \"${query_runner[@]}\" \"$@\"\n}\n\n# create initial database\n# uses environment variables for input: POSTGRES_DB\ndocker_setup_db() {\n\tlocal dbAlreadyExists\n\tdbAlreadyExists=\"$(\n\t\tPOSTGRES_DB= docker_process_sql --dbname postgres --set db=\"$POSTGRES_DB\" --tuples-only <<-'EOSQL'\n\t\t\tSELECT 1 FROM pg_database WHERE datname = :'db' ;\n\t\tEOSQL\n\t)\"\n\tif [ -z \"$dbAlreadyExists\" ]; then\n\t\tPOSTGRES_DB= docker_process_sql --dbname postgres --set db=\"$POSTGRES_DB\" <<-'EOSQL'\n\t\t\tCREATE DATABASE :\"db\" ;\n\t\tEOSQL\n\t\tprintf '\\n'\n\tfi\n}\n\n# Loads various settings that are used elsewhere in the script\n# This should be called before any other functions\ndocker_setup_env() {\n\tfile_env 'POSTGRES_PASSWORD'\n\n\tfile_env 'POSTGRES_USER' 'postgres'\n\tfile_env 'POSTGRES_DB' \"$POSTGRES_USER\"\n\tfile_env 'POSTGRES_INITDB_ARGS'\n\t: \"${POSTGRES_HOST_AUTH_METHOD:=}\"\n\n\tdeclare -g DATABASE_ALREADY_EXISTS\n\t: \"${DATABASE_ALREADY_EXISTS:=}\"\n\t# look specifically for PG_VERSION, as it is expected in the DB dir\n\tif [ -s \"$PGDATA/PG_VERSION\" ]; then\n\t\tDATABASE_ALREADY_EXISTS='true'\n\tfi\n}\n\n# append POSTGRES_HOST_AUTH_METHOD to pg_hba.conf for \"host\" connections\n# all arguments will be passed along as arguments to `postgres` for getting the value of 'password_encryption'\npg_setup_hba_conf() {\n\t# default authentication method is md5 on versions before 14\n\t# https://www.postgresql.org/about/news/postgresql-14-released-2318/\n\tif [ \"$1\" = 'postgres' ]; then\n\t\tshift\n\tfi\n\tlocal auth\n\t# check the default/configured encryption and use that as the auth method\n\tauth=\"$(postgres -C password_encryption \"$@\")\"\n\t: \"${POSTGRES_HOST_AUTH_METHOD:=$auth}\"\n\t{\n\t\tprintf '\\n'\n\t\tif [ 'trust' = \"$POSTGRES_HOST_AUTH_METHOD\" ]; then\n\t\t\tprintf '# warning trust is enabled for all connections\\n'\n\t\t\tprintf '# see https://www.postgresql.org/docs/12/auth-trust.html\\n'\n\t\tfi\n\t\tprintf 'host all all all %s\\n' \"$POSTGRES_HOST_AUTH_METHOD\"\n\t} >> \"$PGDATA/pg_hba.conf\"\n}\n\n# start socket-only postgresql server for setting up or running scripts\n# all arguments will be passed along as arguments to `postgres` (via pg_ctl)\ndocker_temp_server_start() {\n\tif [ \"$1\" = 'postgres' ]; then\n\t\tshift\n\tfi\n\n\t# internal start of server in order to allow setup using psql client\n\t# does not listen on external TCP/IP and waits until start finishes\n\tset -- \"$@\" -c listen_addresses='' -p \"${PGPORT:-5432}\"\n\n\tPGUSER=\"${PGUSER:-$POSTGRES_USER}\" \\\n\tpg_ctl -D \"$PGDATA\" \\\n\t\t-o \"$(printf '%q ' \"$@\")\" \\\n\t\t-w start\n}\n\n# stop postgresql server after done setting up user and running scripts\ndocker_temp_server_stop() {\n\tPGUSER=\"${PGUSER:-postgres}\" \\\n\tpg_ctl -D \"$PGDATA\" -m fast -w stop\n}\n\n# check arguments for an option that would cause postgres to stop\n# return true if there is one\n_pg_want_help() {\n\tlocal arg\n\tfor arg; do\n\t\tcase \"$arg\" in\n\t\t\t# postgres --help | grep 'then exit'\n\t\t\t# leaving out -C on purpose since it always fails and is unhelpful:\n\t\t\t# postgres: could not access the server configuration file \"/var/lib/postgresql/data/postgresql.conf\": No such file or directory\n\t\t\t-'?'|--help|--describe-config|-V|--version)\n\t\t\t\treturn 0\n\t\t\t\t;;\n\t\tesac\n\tdone\n\treturn 1\n}\n\n_main() {\n\t# if first arg looks like a flag, assume we want to run postgres server\n\tif [ \"${1:0:1}\" = '-' ]; then\n\t\tset -- postgres \"$@\"\n\tfi\n\n\tif [ \"$1\" = 'postgres' ] && ! _pg_want_help \"$@\"; then\n\t\tdocker_setup_env\n\t\t# setup data directories and permissions (when run as root)\n\t\tdocker_create_db_directories\n\t\tif [ \"$(id -u)\" = '0' ]; then\n\t\t\t# then restart script as postgres user\n\t\t\texec gosu postgres \"$BASH_SOURCE\" \"$@\"\n\t\tfi\n\n\t\t# only run initialization on an empty data directory\n\t\tif [ -z \"$DATABASE_ALREADY_EXISTS\" ]; then\n\t\t\tdocker_verify_minimum_env\n\n\t\t\t# check dir permissions to reduce likelihood of half-initialized database\n\t\t\tls /docker-entrypoint-initdb.d/ > /dev/null\n\n\t\t\tdocker_init_database_dir\n\t\t\tpg_setup_hba_conf \"$@\"\n\n\t\t\t# PGPASSWORD is required for psql when authentication is required for 'local' connections via pg_hba.conf and is otherwise harmless\n\t\t\t# e.g. when '--auth=md5' or '--auth-local=md5' is used in POSTGRES_INITDB_ARGS\n\t\t\texport PGPASSWORD=\"${PGPASSWORD:-$POSTGRES_PASSWORD}\"\n\t\t\tdocker_temp_server_start \"$@\"\n\n\t\t\tdocker_setup_db\n\t\t\tdocker_process_init_files /docker-entrypoint-initdb.d/*\n\n\t\t\tdocker_temp_server_stop\n\t\t\tunset PGPASSWORD\n\n\t\t\tcat <<-'EOM'\n\n\t\t\t\tPostgreSQL init process complete; ready for start up.\n\n\t\t\tEOM\n\t\telse\n\t\t\tcat <<-'EOM'\n\n\t\t\t\tPostgreSQL Database directory appears to contain a database; Skipping initialization\n\n\t\t\tEOM\n\t\tfi\n\tfi\n\n\texec \"$@\"\n}\n\nif ! _is_sourced; then\n\t_main \"$@\"\nfi\n"
        },
        {
          "name": "generate-stackbrew-library.sh",
          "type": "blob",
          "size": 3.3076171875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ndeclare -A aliases=(\n\t[17]='latest'\n)\n\nself=\"$(basename \"$BASH_SOURCE\")\"\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nif [ \"$#\" -eq 0 ]; then\n\tversions=\"$(jq -r 'keys | map(@sh) | join(\" \")' versions.json)\"\n\teval \"set -- $versions\"\nfi\n\n# sort version numbers with highest first\nIFS=$'\\n'; set -- $(sort -rV <<<\"$*\"); unset IFS\n\n# get the most recent commit which modified any of \"$@\"\nfileCommit() {\n\tgit log -1 --format='format:%H' HEAD -- \"$@\"\n}\n\n# get the most recent commit which modified \"$1/Dockerfile\" or any file COPY'd from \"$1/Dockerfile\"\ndirCommit() {\n\tlocal dir=\"$1\"; shift\n\t(\n\t\tcd \"$dir\"\n\t\tfiles=\"$(\n\t\t\tgit show HEAD:./Dockerfile | awk '\n\t\t\t\ttoupper($1) == \"COPY\" {\n\t\t\t\t\tfor (i = 2; i < NF; i++) {\n\t\t\t\t\t\tif ($i ~ /^--from=/) {\n\t\t\t\t\t\t\tnext\n\t\t\t\t\t\t}\n\t\t\t\t\t\tprint $i\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t'\n\t\t)\"\n\t\tfileCommit Dockerfile $files\n\t)\n}\n\ngetArches() {\n\tlocal repo=\"$1\"; shift\n\tlocal officialImagesBase=\"${BASHBREW_LIBRARY:-https://github.com/docker-library/official-images/raw/HEAD/library}/\"\n\n\tlocal parentRepoToArchesStr\n\tparentRepoToArchesStr=\"$(\n\t\tfind -name 'Dockerfile' -exec awk -v officialImagesBase=\"$officialImagesBase\" '\n\t\t\t\ttoupper($1) == \"FROM\" && $2 !~ /^('\"$repo\"'|scratch|.*\\/.*)(:|$)/ {\n\t\t\t\t\tprintf \"%s%s\\n\", officialImagesBase, $2\n\t\t\t\t}\n\t\t\t' '{}' + \\\n\t\t\t| sort -u \\\n\t\t\t| xargs -r bashbrew cat --format '[\"{{ .RepoName }}:{{ .TagName }}\"]=\"{{ join \" \" .TagEntry.Architectures }}\"'\n\t)\"\n\teval \"declare -g -A parentRepoToArches=( $parentRepoToArchesStr )\"\n}\ngetArches 'postgres'\n\ncat <<-EOH\n# this file is generated via https://github.com/docker-library/postgres/blob/$(fileCommit \"$self\")/$self\n\nMaintainers: Tianon Gravi <admwiggin@gmail.com> (@tianon),\n             Joseph Ferguson <yosifkit@gmail.com> (@yosifkit)\nGitRepo: https://github.com/docker-library/postgres.git\nEOH\n\n# prints \"$2$1$3$1...$N\"\njoin() {\n\tlocal sep=\"$1\"; shift\n\tlocal out; printf -v out \"${sep//%/%%}%s\" \"$@\"\n\techo \"${out#$sep}\"\n}\n\nfor version; do\n\texport version\n\n\tvariants=\"$(jq -r '.[env.version].variants | map(@sh) | join(\" \")' versions.json)\"\n\teval \"variants=( $variants )\"\n\n\talpine=\"$(jq -r '.[env.version].alpine' versions.json)\"\n\tdebian=\"$(jq -r '.[env.version].debian' versions.json)\"\n\n\tfullVersion=\"$(jq -r '.[env.version].version' versions.json)\"\n\n\t# ex: 9.6.22, 13.3, or 14beta2\n\tversionAliases=(\n\t\t$fullVersion\n\t)\n\t# skip unadorned \"version\" on prereleases: https://www.postgresql.org/developer/beta/\n\t# ex: 9.6, 13, or 14\n\tcase \"$fullVersion\" in\n\t\t*alpha* | *beta* | *rc*) ;;\n\t\t*) versionAliases+=( $version ) ;;\n\tesac\n\t# ex: 9 or latest\n\tversionAliases+=(\n\t\t${aliases[$version]:-}\n\t)\n\n\tfor variant in \"${variants[@]}\"; do\n\t\tdir=\"$version/$variant\"\n\t\tcommit=\"$(dirCommit \"$dir\")\"\n\n\t\tparent=\"$(awk 'toupper($1) == \"FROM\" { print $2 }' \"$dir/Dockerfile\")\"\n\t\tarches=\"${parentRepoToArches[$parent]}\"\n\n\t\tvariantAliases=( \"${versionAliases[@]/%/-$variant}\" )\n\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\n\t\tcase \"$variant\" in\n\t\t\t\"$debian\")\n\t\t\t\tvariantAliases=(\n\t\t\t\t\t\"${versionAliases[@]}\"\n\t\t\t\t\t\"${variantAliases[@]}\"\n\t\t\t\t)\n\t\t\t\t;;\n\t\t\talpine\"$alpine\")\n\t\t\t\tvariantAliases+=( \"${versionAliases[@]/%/-alpine}\" )\n\t\t\t\tvariantAliases=( \"${variantAliases[@]//latest-/}\" )\n\t\t\t\t;;\n\t\tesac\n\n\t\techo\n\t\tcat <<-EOE\n\t\t\tTags: $(join ', ' \"${variantAliases[@]}\")\n\t\t\tArchitectures: $(join ', ' $arches)\n\t\t\tGitCommit: $commit\n\t\t\tDirectory: $dir\n\t\tEOE\n\tdone\ndone\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.130859375,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\n./versions.sh \"$@\"\n./apply-templates.sh \"$@\"\n"
        },
        {
          "name": "versions.json",
          "type": "blob",
          "size": 3.5185546875,
          "content": "{\n  \"12\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"12.22-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"12.22-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 12,\n    \"sha256\": \"8df3c0474782589d3c6f374b5133b1bd14d168086edbc13c6e72e67dd4527a3b\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"12.22\"\n  },\n  \"13\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"13.18-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"13.18-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 13,\n    \"sha256\": \"ceea92abee2a8c19408d278b68de6a78b6bd3dbb4fa2d653fa7ca745d666aab1\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"13.18\"\n  },\n  \"14\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"14.15-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"14.15-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 14,\n    \"sha256\": \"02e891e314b4e9ee24cbd78028dab7c73f9c1ba3e30835bcbef71fe220401fc5\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"14.15\"\n  },\n  \"15\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"15.10-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"15.10-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 15,\n    \"sha256\": \"55abe738d441f0e58658b3ec6f88097a713b5e3b73139f6230d7b5c4c389e573\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"15.10\"\n  },\n  \"16\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"16.6-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"16.6-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 16,\n    \"sha256\": \"23369cdaccd45270ac5dcc30fa9da205d5be33fa505e1f17a0418d2caeca477b\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"16.6\"\n  },\n  \"17\": {\n    \"alpine\": \"3.21\",\n    \"bookworm\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"17.2-1.pgdg120+1\"\n    },\n    \"bullseye\": {\n      \"arches\": [\n        \"amd64\",\n        \"arm64\",\n        \"ppc64el\",\n        \"s390x\"\n      ],\n      \"version\": \"17.2-1.pgdg110+1\"\n    },\n    \"debian\": \"bookworm\",\n    \"major\": 17,\n    \"sha256\": \"82ef27c0af3751695d7f64e2d963583005fbb6a0c3df63d0e4b42211d7021164\",\n    \"variants\": [\n      \"bookworm\",\n      \"bullseye\",\n      \"alpine3.21\",\n      \"alpine3.20\"\n    ],\n    \"version\": \"17.2\"\n  }\n}\n"
        },
        {
          "name": "versions.sh",
          "type": "blob",
          "size": 4.5673828125,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# we will support at most two entries in each of these lists, and both should be in descending order\nsupportedDebianSuites=(\n\tbookworm\n\tbullseye\n)\nsupportedAlpineVersions=(\n\t3.21\n\t3.20\n)\ndefaultDebianSuite=\"${supportedDebianSuites[0]}\"\ndeclare -A debianSuites=(\n)\ndefaultAlpineVersion=\"${supportedAlpineVersions[0]}\"\ndeclare -A alpineVersions=(\n\t#[14]='3.16'\n)\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nversions=( \"$@\" )\nif [ ${#versions[@]} -eq 0 ]; then\n\tversions=( */ )\n\tjson='{}'\nelse\n\tjson=\"$(< versions.json)\"\nfi\nversions=( \"${versions[@]%/}\" )\n\npackagesBase='http://apt.postgresql.org/pub/repos/apt/dists/'\ndeclare -A suitePackageList=() suiteVersionPackageList=() suiteArches=()\n_raw_package_list() {\n\tlocal suite=\"$1\"; shift\n\tlocal component=\"$1\"; shift\n\tlocal arch=\"$1\"; shift\n\n\tcurl -fsSL \"$packagesBase/$suite-pgdg/$component/binary-$arch/Packages.bz2\" | bunzip2\n}\nfetch_suite_package_list() {\n\tlocal -; set +x # make sure running with \"set -x\" doesn't spam the terminal with the raw package lists\n\n\tlocal suite=\"$1\"; shift\n\tlocal version=\"$1\"; shift\n\tlocal arch=\"$1\"; shift\n\n\t# normal (GA) releases end up in the \"main\" component of upstream's repository\n\tif [ -z \"${suitePackageList[\"$suite-$arch\"]:+isset}\" ]; then\n\t\tlocal suiteArchPackageList\n\t\tsuiteArchPackageList=\"$(_raw_package_list \"$suite\" 'main' \"$arch\")\"\n\t\tsuitePackageList[\"$suite-$arch\"]=\"$suiteArchPackageList\"\n\tfi\n\n\t# ... but pre-release versions (betas, etc) end up in the \"PG_MAJOR\" component (so we need to check both)\n\tif [ -z \"${suiteVersionPackageList[\"$suite-$version-$arch\"]:+isset}\" ]; then\n\t\tlocal versionPackageList\n\t\tversionPackageList=\"$(_raw_package_list \"$suite\" \"$version\" \"$arch\")\"\n\t\tsuiteVersionPackageList[\"$suite-$version-$arch\"]=\"$versionPackageList\"\n\tfi\n}\nawk_package_list() {\n\tlocal suite=\"$1\"; shift\n\tlocal version=\"$1\"; shift\n\tlocal arch=\"$1\"; shift\n\n\tawk -F ': ' -v version=\"$version\" \"$@\" <<<\"${suitePackageList[\"$suite-$arch\"]}\"$'\\n'\"${suiteVersionPackageList[\"$suite-$version-$arch\"]}\"\n}\nfetch_suite_arches() {\n\tlocal suite=\"$1\"; shift\n\n\tif [ -z \"${suiteArches[\"$suite\"]:+isset}\" ]; then\n\t\tlocal suiteRelease\n\t\tsuiteRelease=\"$(curl -fsSL \"$packagesBase/$suite-pgdg/Release\")\"\n\t\tsuiteArches[\"$suite\"]=\"$(gawk <<<\"$suiteRelease\" -F ':[[:space:]]+' '$1 == \"Architectures\" { print $2; exit }')\"\n\tfi\n}\n\nfor version in \"${versions[@]}\"; do\n\texport version\n\n\tversionAlpineVersion=\"${alpineVersions[$version]:-$defaultAlpineVersion}\"\n\tversionDebianSuite=\"${debianSuites[$version]:-$defaultDebianSuite}\"\n\texport versionAlpineVersion versionDebianSuite\n\n\tdoc=\"$(jq -nc '{\n\t\talpine: env.versionAlpineVersion,\n\t\tdebian: env.versionDebianSuite,\n\t}')\"\n\n\tfullVersion=\n\tfor suite in \"${supportedDebianSuites[@]}\"; do\n\t\tfetch_suite_package_list \"$suite\" \"$version\" 'amd64'\n\t\tsuiteVersions=\"$(awk_package_list \"$suite\" \"$version\" 'amd64' '\n\t\t\t$1 == \"Package\" { pkg = $2 }\n\t\t\t$1 == \"Version\" && pkg == \"postgresql-\" version { print $2 }\n\t\t' | sort -V)\"\n\t\tsuiteVersion=\"$(tail -1 <<<\"$suiteVersions\")\" # \"15~beta4-1.pgdg110+1\"\n\t\tsrcVersion=\"${suiteVersion%%-*}\" # \"15~beta4\"\n\t\ttilde='~'\n\t\tsrcVersion=\"${srcVersion//$tilde/}\" # \"15beta4\"\n\t\t[ -n \"$fullVersion\" ] || fullVersion=\"$srcVersion\"\n\t\tif [ \"$fullVersion\" != \"$srcVersion\" ]; then\n\t\t\techo >&2 \"warning: $version should be '$fullVersion' but $suite has '$srcVersion' ($suiteVersion)\"\n\t\t\tcontinue\n\t\tfi\n\n\t\tversionArches='[]'\n\t\tfetch_suite_arches \"$suite\"\n\t\tfor arch in ${suiteArches[\"$suite\"]}; do\n\t\t\tfetch_suite_package_list \"$suite\" \"$version\" \"$arch\"\n\t\t\tarchVersion=\"$(awk_package_list \"$suite\" \"$version\" \"$arch\" '\n\t\t\t\t$1 == \"Package\" { pkg = $2 }\n\t\t\t\t$1 == \"Version\" && pkg == \"postgresql-\" version { print $2; exit }\n\t\t\t')\"\n\t\t\tif [ \"$archVersion\" = \"$suiteVersion\" ]; then\n\t\t\t\tversionArches=\"$(jq <<<\"$versionArches\" -c --arg arch \"$arch\" '. += [$arch]')\"\n\t\t\tfi\n\t\tdone\n\n\t\texport suite suiteVersion\n\t\tdoc=\"$(jq <<<\"$doc\" -c --argjson arches \"$versionArches\" '\n\t\t\t.[env.suite] = {\n\t\t\t\tversion: env.suiteVersion,\n\t\t\t\tarches: $arches,\n\t\t\t}\n\t\t\t| .variants += [ env.suite ]\n\t\t')\"\n\tdone\n\n\tfor alpineVersion in \"${supportedAlpineVersions[@]}\"; do\n\t\tdoc=\"$(jq <<<\"$doc\" -c --arg v \"$alpineVersion\" '\n\t\t\t.variants += [ \"alpine\" + $v ]\n\t\t')\"\n\tdone\n\n\tsha256=\"$(\n\t\tcurl -fsSL \"https://ftp.postgresql.org/pub/source/v${fullVersion}/postgresql-${fullVersion}.tar.bz2.sha256\" \\\n\t\t\t| cut -d' ' -f1\n\t)\"\n\n\techo \"$version: $fullVersion\"\n\n\texport fullVersion sha256 major=\"${version%%.*}\"\n\tjson=\"$(jq <<<\"$json\" -c --argjson doc \"$doc\" '\n\t\t.[env.version] = ($doc + {\n\t\t\tversion: env.fullVersion,\n\t\t\tsha256: env.sha256,\n\t\t\tmajor: (env.major | tonumber),\n\t\t})\n\t')\"\ndone\n\njq <<<\"$json\" -S . > versions.json\n"
        }
      ]
    }
  ]
}