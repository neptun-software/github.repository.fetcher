{
  "metadata": {
    "timestamp": 1736568380698,
    "page": 319,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjMyMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "crosstool-ng/crosstool-ng",
      "stars": 2179,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.623046875,
          "content": "# Backup files\n*.bak\n*~\n*.swp\n\n# Generated files\nconfigure\nautom4te.cache\naclocal.m4\nconfig.h*\nconfig.log\nconfig.status\nMakefile\nMakefile.in\nct-ng\n!ct-ng.comp\n!ct-ng.in\npaths.sh\nconfig/configure.in\nconfig/gen/\nconfig/versions/\n.config\n.config.*\ninclude/\nverbatim-data.mk\nmaintainer/package-versions\n\n# Compressed files\n*.tar*\n*.zip\n*.xz\n*.7zip\n\n# Temporaries\n.*.swp\nbuild.log\n.config.old\ntemp.*\nstamp-h1\n\n# MacOS\n.DS_Store\n\n# Testing\ntesting/docker/*/build\ntesting/docker/*/install\ntesting/docker/*/xtools\n\n# This is the place where toolchains are built\n.build/\n# .. and log for 'build-all'\n.build-all/\n# .. and release creation\nrelease/\n"
        },
        {
          "name": ".yamllint",
          "type": "blob",
          "size": 0.2197265625,
          "content": "---\nyaml-files:\n  - '*.yaml'\n  - '*.yml'\n  - '.yamllint'\n\nrules:\n  truthy:\n    allowed-values: ['TRUE', 'True', 'true', 'FALSE', 'False', 'false', 'YES', 'Yes', 'yes', 'NO', 'No', 'no', 'ON', 'On', 'on', 'OFF', 'Off', 'off']\n"
        },
        {
          "name": "COPYING",
          "type": "blob",
          "size": 2.4580078125,
          "content": "Unless otherwise stated in individual files, this work is licensed to you under\nthe following terms.\n\n- Files in docs/ are available under the Creative Commons Attribution, Share\n  Alike (by-sa), v2.5, to be found there:\n    licenses.d/by-sa/deed.en     (human-readable summary)\n    licenses.d/by-sa/legalcode   (legal code, the full license)\n    \n- Files found in patches/*/ are available under the same license as the\n  upstream software they apply to.\n\n  That means that you can't use those patches if you were licensed the\n  software under a specific license which is not the one the software is\n  commonly available under.\n\n  As an example, if you ever managed to get the Linux kernel under a license\n  other than the GPLv2, you are not allowed to use the Linux kernel patches\n  coming with crosstool-NG, as those are available under the GPLv2, which is\n  the license the Linux kernel is most commonly available under.\n\n  As a convenience, the GNU Lesser General Public License (LGPL) v2.1 (for the\n  patches against glibc, uClibc, and some other libraries) is available there:\n    licenses.d/lgpl.txt\n\n- Other files not covered by the above licenses, and not covered by an\n  individual license specified in the file itself, or an accompanying file,\n  are available under the GNU General Public License (GPL), v2, to be found\n  here:\n    licenses.d/gpl.txt\n\n- Also, I want to clarify one point. If you build a toolchain with crosstool-NG\n  and you happen to sell, deliver, or otherwise publish this toolchain to a\n  third party, I consider crosstool-NG as being part of the sources needed to\n  rebuild the afore-mentioned toolchain, alongside with all other source code\n  that third party is otherwise entitled to receive, due to other licenses of\n  the different components. See licenses.d/gpl.txt, section 3, which reads:\n   > For an executable work, complete source code means [...], plus the\n   > scripts used to control compilation and installation of the executable.\n\n  In short: crosstool-NG is the part refered to as \"the scripts to control\n  compilation and installation of the executable\", it being the toolchain in\n  our case; and as such you must make it available, in conformance to the\n  GPLv2, see above.\n\n  Also, if you have local patches that you apply to the different components\n  (either manualy, or by instructing crosstool-NG to do so), you will have to\n  make those patches available alongside with your toolchain, to comply with\n  the licenses of the components impacted by your patches.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.0068359375,
          "content": "COPYING"
        },
        {
          "name": "Makefile.am",
          "type": "blob",
          "size": 2.966796875,
          "content": "## Process this file with automake to produce Makefile.in\n## vim: set noet :\n\ninclude verbatim-data.mk\n\nSUBDIRS\t\t= kconfig\n\nbin_SCRIPTS\t\t= ct-ng\nCLEANFILES\t\t= ct-ng bash-completion/ct-ng docs/ct-ng.1\nEXTRA_DIST\t\t= bootstrap ct-ng.in bash-completion/ct-ng.in \\\n\t\t\t\t  docs/ct-ng.1.in maintainer testing\n\nif INSTALL_BASH_COMPLETION\ncompdir\t\t\t\t= @BASH_COMPLETION_DIR@\ncomp_SCRIPTS\t\t= bash-completion/ct-ng\nendif\n\nman1_MANS\t= docs/ct-ng.1\n\n# paths.sh and configure.in are generated by configure\nnobase_dist_pkgdata_DATA = $(verbatim_data)\nnobase_nodist_pkgdata_DATA = paths.sh config/configure.in\n\n# ct-ng, as renamed by the installation\nctng_progname\t\t= `echo ct-ng | sed '$(transform)'`\n\nUSER_MANUAL_FILES = \\\n\tdocs/manual/1_Introduction.md \\\n\tdocs/manual/2_Installation.md \\\n\tdocs/manual/3_Configuration.md \\\n\tdocs/manual/4_Building.md \\\n\tdocs/manual/5_Toolchain_Usage.md \\\n\tdocs/manual/6_Toolchain_Types.md \\\n\tdocs/manual/7_Contributing.md \\\n\tdocs/manual/8_Internals.md \\\n\tdocs/manual/9_Toolchain_Construction.md \\\n\tdocs/manual/A_Credits.md \\\n\tdocs/manual/B_Known_issues.md \\\n\tdocs/manual/C_Setup_OS.md \\\n\tdocs/manual/D_Tutorials_features.md\n\nif INSTALL_USER_MANUAL\ndoc_DATA\t\t= $(USER_MANUAL_FILES)\nelse\ndoc_DATA\t\t= docs/MANUAL_ONLINE\nendif\n\ndo_subst\t\t= ( @SED@ \\\n\t\t\t-e 's,[@]docdir[@],$(docdir),g' \\\n\t\t\t-e 's,[@]pkgdatadir[@],$(pkgdatadir),g' \\\n\t\t\t-e 's,[@]pkglibexecdir[@],$(pkglibexecdir),g' \\\n\t\t\t-e 's,[@]progname[@],'$(ctng_progname)',g' \\\n\t\t| $(SHELL) config.status --file=- )\n\nct-ng: ct-ng.in Makefile\n\t$(AM_V_GEN)$(do_subst) < $< >$@-t && chmod a-w,a+x $@-t && mv -f $@-t $@\n\ndocs/ct-ng.1: docs/ct-ng.1.in Makefile\n\t$(AM_V_GEN)$(MKDIR_P) docs && $(do_subst) < $< >$@-t && mv -f $@-t $@\n\nbash-completion/ct-ng: bash-completion/ct-ng.in Makefile\n\t$(AM_V_GEN)$(MKDIR_P) bash-completion && $(do_subst) < $< >$@-t && mv -f $@-t $@\n\n# automake doesn't offer an option to compress manpages, do it after installation\n# Also, lintian is picky about execute-bit on the scripts\ninstall-data-hook:\n\trm -f $(DESTDIR)$(man1dir)/$(ctng_progname).1.gz\n\tgzip -9 $(DESTDIR)$(man1dir)/$(ctng_progname).1\n\tchmod a+x $(DESTDIR)$(pkgdatadir)/scripts/config.guess\n\tchmod a+x $(DESTDIR)$(pkgdatadir)/scripts/config.sub\n\trm -f $(DESTDIR)$(pkgdatadir)/LICENSE\n\tln -s COPYING $(DESTDIR)$(pkgdatadir)/LICENSE\nif INSTALL_BASH_COMPLETION\n\tchmod a-x $(DESTDIR)$(compdir)/$(ctng_progname)\nendif\n\nuninstall-hook:\n\trm -f $(DESTDIR)$(man1dir)/$(ctng_progname).1.gz\n\ndist-hook: fetch-docs create-symlinks gen-tarball-version\n\n.PHONY: fetch-docs\nfetch-docs: maintainer/download-docs.sh\n\t$< $(top_distdir) $(USER_MANUAL_FILES)\n\n.PHONY: create-symlinks\ncreate-symlinks:\n\tln -s COPYING $(top_distdir)/LICENSE\n\n.PHONY: gen-tarball-version\ngen-tarball-version:\n\techo $(VERSION) > $(distdir)/.tarball-version\n\nDIGESTS\t\t?= md5 sha1 sha512\nUSE_GPG\t\t?= yes\n\ndist-create-release: distcheck\n\tfor a in $(DIST_ARCHIVES); do \\\n\t\tfor d in $(DIGESTS); do \\\n\t\t\t$${d}sum $${a} > $${a}.$${d}; \\\n\t\tdone; \\\n\t\tif [ \"$(USE_GPG)\" = \"yes\" ]; then \\\n\t\t\tgpg --detach-sign $${a}; \\\n\t\tfi; \\\n\tdone\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.5068359375,
          "content": "# Crosstool-NG\n\n## Introduction\n\nCrosstool-NG aims at building toolchains. Toolchains are an essential component in a software development project. It will compile, assemble and link the code that is being developed. Some pieces of the toolchain will eventually end up in the resulting binaries: static libraries are but an example.\n\n**Before reporting a bug**, please read [bug reporting guidelines](http://crosstool-ng.github.io/support/). Bugs that do not provide the required information will be closed without explanation.\n\nRefer to [documentation at crosstool-NG website](http://crosstool-ng.github.io/docs/) for more information on how to configure, install and use crosstool-NG.\n\n**Note 1:** If you elect to build a uClibc-based toolchain, you will have to prepare a config file for uClibc with <= crosstool-NG-1.21.0. In >= crosstool-NG-1.22.0 you only need to prepare a config file for uClibc(or uClibc-ng) if you really need a custom config for uClibc.\n\n**Note 2:** If you call `ct-ng --help` you will get help for `make(2)`. This is because ct-ng is in fact a `make(2)` script. There is no clean workaround for this.\n\n## Repository layout\n\nTo clone the crosstool-NG repository:\n\n```\ngit clone https://github.com/crosstool-ng/crosstool-ng\n```\n\n## Build Status\n- ![CI](https://github.com/crosstool-ng/crosstool-ng/workflows/CI/badge.svg)\n\n#### Old repositories\n\nThese are the old Mercurial repositories. They are now read-only: [http://crosstool-ng.org/hg/](http://crosstool-ng.org/hg/)\n\n### Pull Requests and Issues\n\nYou can find open Pull Requests on GitHub [here](https://github.com/crosstool-ng/crosstool-ng/pulls) and you can find open issues [here](https://github.com/crosstool-ng/crosstool-ng/issues).\n\n#### Contributing\n\nTo contribute to crosstool-NG it is helpful to provide as much information as you can about your change, including any updates to documentation (if appropriate), and test... test... test.\n\n- [Fork crosstool-ng on github](https://github.com/crosstool-ng/crosstool-ng#fork-destination-box)\n- Clone the fork you made to your computer\n\n```\ngit clone https://github.com/crosstool-ng/crosstool-ng\n```\n\n- Create a topic branch for your work\n\n```\ngit checkout -b fix_comment_typo\n```\n\n- Make changes\n - hack\n - test\n - hack\n - etc...\n- Add your changes\n\n```\ngit add [file(s) that changed, add -p if you want to be more specific]\n```\n\n- Verify you are happy with your changes to be commited\n\n```\ngit diff --cached\n```\n\n- Commit changes\n\n```\ngit commit -s\n```\n\nThe `-s` automatically adds your `Signed-off-by: [name] <email>` to your commit message. Your commit will be rejected without this.\n\nAlso, please explain what your change does. `\"Fix stuff\"` will be rejected. For examples of good commit messages, read the [changelog](https://github.com/crosstool-ng/crosstool-ng/commits/master).\n\n- Push your topic branch with your changes to your fork\n\n```\ngit push origin fix_comment_typo\n```\n\n- Go to the crosstool-ng project and click the `Compare & pull request` button for the branch you want to open a pull request with.\n- Review the pull request changes, and verify that you are opening a pull request for the appropriate branch. The title and message should reflect the nature/theme of the changes in the PR, say the title is `Fix comment typos` and the message details any specifics you can provide.\n - You might change the crosstool-ng branch, if you are opening a pull request that is intended for a different branch. For example, when you created your topic branch you could have done:\n\n```\ngit checkout -b fix_out_of_date_patch origin/1.22\n```\n Then when you get to this pull request screen change the base branch from `master` to `1.22`\n\n- By creating a pull request, the PR is entered into the [backlog](https://waffle.io/crosstool-ng/crosstool-ng). A [travis-ci](https://travis-ci.org/crosstool-ng/crosstool-ng/builds) job will run to test your changes against a select set of samples. As they start to get worked, they should be placed in the `Ready` state. PRs that are being worked are `In Progress`. If a questions come up about the commit that might involve changes to the commit then the PR is placed in `Waiting For Response`, you have two options:\n 1. Fix the issue with the commit by adding a new commit in the topic branch that fixes the code review. Then push your changes to your branch. This option keeps the comments in the PR, and allows for further code review. I personally dislike this, because people are lazy and fix reviews with `fix more review issues`. Please make good commit messages! All rules about commits from above apply! **THIS IS PREFERED**\n\n\nAdd your changes\n\n```\ngit add [file(s) that changed, add -p if you want to be more specific]\n```\n\nVerify you are happy with your changes to be commited\n\n```\ngit diff --cached\n```\n\nCommit changes\n\n```\ngit commit -s\n```\n\n- Push your topic branch with your changes to your fork\n\n```\ngit push origin fix_comment_typo\n```\n\nAt this point the PR will be updated to have the latest commit to that branch, and can be subsequently reviewed.\n \n 2. Interactively rebase the offending commit(s) to fix the code review. This option is slightly annoying on Github, as the comments are stored with the commits, and are hidden when new commits replace the old commits. They used to disappear completely; now Github shows a grey 'View outdated' link next to the old commits.\n\nThis recipe also comes handy with other issues, like your topic branch not being up-to-date with master:\n\n```\ngit fetch --all\ngit rebase --ignore-whitespace origin master\ngit rebase -i <offending-commit-id>^\n```\n\n**NOTE:** The `--ignore-whitespace` stops `git apply` (which is called by rebase) from changing any whitespace when it runs.\n\nReplace `pick` with `edit` or remove the line to delete a commit.\nFix the issue in the code review.\n\n```\ngit add [file(s)]\ngit rebase --continue\n<update commit comment if needed>\ngit push --force origin fix_comment_typo\n```\n\n### Patchwork\n\nWe previously used patchwork for development, but it is no longer used. I'd like to see patches that are still applicable turned into Pull Requests on GitHub.\n\nYou can find the [list of pending patches](http://patchwork.ozlabs.org/project/crosstool-ng/) available on [patchwork](http://jk.ozlabs.org/projects/patchwork/).\n\n## More Info\n\nYou can find *all* of this and more at [crosstool-ng.org](http://crosstool-ng.org/)\n\nReport issues at [the project site on GitHub](https://github.com/crosstool-ng/crosstool-ng).\n\nWe have a [mailing list](mailto:crossgcc@sourceware.org). Archive and subscription info can be found here: [https://sourceware.org/ml/crossgcc/](https://sourceware.org/ml/crossgcc/)\n\nAloha! :-)\n"
        },
        {
          "name": "TODO",
          "type": "blob",
          "size": 8.787109375,
          "content": "A (slightly) ordered set of tasks for crosstool-NG. Written in a cryptic language; contact me if you want to help with any of these :)\n\n-- Alexey Neyman (@stilor)\n\n[ ] Migrate .config and build.log into per-target directory, make top-level file into symlinks - this will allow to compare/debug multiple configs side-by-side without overwriting each other\n[ ] Need a variant of CT_DoExecLog that only captures stderr - for use where we need stdout for further processing but want to capture errors\n  [ ] Use in test-package.sh\n[ ] mirror: remove crosstool-ng.org mirroring of archives? Use the option only for local mirrors? Archives currently hosted are outdated.\n[ ] old mingw-w64 fails to build (with new gcc?) - the headers are installed into usr/x86_64-w64-mingw32/x86_64-w64-mingw32/include instead of usr/x86_64-w64-mingw32/include\n  [ ] fix or retire?\n[ ] test-packages.sh\n  [ ] FTP URLs always succeed in verification (wget bug) - how to work around?\n[ ] templates (bootstrap)\n  [ ] relevant pattern for Linaro releases - tie to the major version\n[ ] new packages\n  [ ] config.guess\n  [ ] gnulib\n    [ ] use gnulib in m4, gettext, libiconv, libtool\n  [ ] autoconf-archive\n    [ ] use to retrieve ax_pthread.m4 (gettext?)\n[ ] arm_neon.h - offer as a companion \"library\" for the target\n[ ] gdbinit (installed if CT_GDB_INSTALL_GDBINIT is set) is not relocatable, contains absolute paths\n[ ] Support alldefconfig/allnoconfig/other standard kconfig targets\n[ ] Xtensa\n  [ ] Merge from xtensa maintainer whatever applicable?\n    [ ] Newlib does not seem to be working\n  [ ] Avoid printing \"Using <overlay>\" if the sources are already prepared\n[ ] FreeBSD\n  [ ] Use 'cc' rather than 'gcc' on the host\n    [ ] Detect in configure what the default value is\n    [ ] Allow passing via CC=... to ct-ng\n    [ ] Same for ar/ld/ranlib/whatever we're using\n    [ ] Same for other utilities (patch, python, ...)\n  [ ] Allow using BSD patch\n  [ ] Set up 3 testing VMs: plain (using clang), using default 'gcc', using 'gcc6'\n[ ] GDB7.1 build fails on macOS\n  [ ] need 'cpp' in the list of symlinked tools\n  [ ] still fails at link due to multiple definitions of BC/UP/PC\n[ ] mingw.sh: create a hook for \"pre-checks\" for all libcs\n  [ ] move CT_DoMultilibList to this new hook?\n[ ] go over all config options and evaluate their applicability to cross/canadian/cross-native (i.e. WANTS_STATIC_LINK does not have to test build's support for static link)\n[ ] Update \"Internals\" chapter in the docs to match current state\n[ ] Integrate openrisc support\n[ ] Re-enable shared libraries - can it be done without wrapper scripts, e.g. via rpath?\n[ ] 'ct-ng source'\n  [ ] disregard FORBID_DOWNLOADS and to avoid clobbering .build and build.log\n  [ ] should not check/prepare environment (#776)\n  [ ] move download/patching/prepare into separate steps\n    [ ] beware of TBD - want to use autotools for all packages after they're built, so need to defer preparation of the sources from a repo\n[ ] 'ct-ng' source to disregard FORBID_DOWNLOADS and to avoid clobbering .build and build.log\n  [ ] Make ONLY_{DOWNLOAD,EXTRACT} options into steps\n  [ ] Create \"prepare\" state to make the environment checks, after \"download\"\n[ ] Restore blackfin/fdpic support?\n[ ] Install bash completion script - are there any default locations for it?\n[ ] Do we need \"HACK: we need to override SHLIB_LC from gcc/config/t-slibgcc-elf-ver\" block in 100-gcc.sh? We do create a dummy libc.so\n[ ] Follow up on -static -Wl,--dynamic-list=... weirdness\n[ ] xldd.in\n  [ ] Deduce root from the location of the script itself by default + option for multiroot selection (e.g. for SH)\n  [ ] Handle CT_LD_LIBRARY_PATH in lieu of LD_LIBRARY_PATH\n    [ ] Handle AT_SECURE\n  [ ] Handle DT_RPATH/DT_RUNPATH separately (they have different priority vs LD_LIBRARY_PATH)\n  [ ] Handle default ld_library_path after ld.so.conf cache\n[ ] Add optional removal of .build/src as part of build-all\n[ ] Add removal of non-precious toolchains (i.e. those that are not needed for canadian)\n  [ ] Or remove all *when* they are no longer needed?\n[ ] GMP select the right CC when not cross-compiling (https://github.com/crosstool-ng/crosstool-ng/pull/627)\n[ ] Default to arch=i686 on x86\n[ ] Run ct-ng oldconfig at the start, or detect if a different version of ct-ng has been used?\n[ ] Move fetching config.guess/config.sub to scripts/functions to use common wget/curl wrappers\n  [ ] Allow auto-update as part of the build\n  [ ] Do they have versions? Is it possible to request a specific version?\n[ ] Separate 'make check' for companion libs and companion tools?\n[ ] gettext - test internationalization\n  [ ] seems the DB is hardcoded into .build/<TARGET>/... location - is it possible to make it relocatable?\n  [ ] add passthrough to configure, for host/target\n[ ] Read/spellcheck configs & scripts\n[ ] 'ct-ng olddefconfig'\n[ ] Install a \"trap\" C++ compiler as ${CT_TARGET}-g++ during core compiler build to trap attempts to compile target code with g++ (currently glibc detects host g++ and warns that it uses g++ w/o target triplet)\n  [ ] Somehow it needs to be functional during the configure step - export env var while running in CT_DoExecLog with CFG level, and forward it to host compiler?\n[ ] elf2flt not compatible with multiple linkers enabled in binutils (ld.bfd + ld.gold) - fix upstream?\n[ ] Companion libs \n  [ ] Group options into submenus\n  [ ] Allow building [companion] target libs (and tools, like gdbserver or native gdb or strace) for all multilibs\n  [ ] Install companion libs into a multi-os-directory for the default multilib\n    [ ] Perhaps remove the distinction between multi_os_dir/multi_os_dir_gcc and use gcc-reported dir always, and rely on \"demultilib\" to combine them if possible\n[ ] Check for python-devel to enable cross-gdb python bindings\n[ ] Common location for sources provided by ctng - duma.in, gdbinit.in, uclibc{,-ng}-config.in ...\n[ ] CTNG_LD_IS=bfd has no effect on subsequent build steps, as each step runs in its own environment\n[ ] Enable other languages in some sample(s):\n  [ ] Ada (?) - requires gnatbind/gnatmake/gnatls/gnatlink on the host\n    [X] Seems to build\n    [ ] Try to run\n  [ ] Obj-C/C++\n    [X] Seems to build\n    [ ] Try to run - seems to crash, need to investigate\n  [ ] Go\n    [ ] Fix the build\n    [ ] Try to run\n[ ] #516 Building with GO support fails\n[ ] #521 gccgo - i586-unknown-linux-gnu - fails on missing version.go \n[ ] Smoke-test test suite - whatever is supported by a particular toolchain\n  [ ] Compile baremetal, shared, static, static-libgcc, static-libstdc, C++, Fortran, Ada, Obj-C, Obj-C++, multilibs\n[ ] Disallow libc selections that cannot handle the arch (e.g. aarch64-*-uclibc, aarch64-*-musl, ...)\n[ ] Support removal of .build/<TARGET>/build after each step (to save space while compiling in a VM; and to test restartability - since this directory is lost after restart)\n[ ] Configure enhancements\n  [ ] What is --host= in ct-ng's configure used for? should it set the default canadian cross?\n  [ ] CFLAGS/LDFLAGS from configure should probably be added into default build flags\n  [ ] Move tool checks from configure to runtime (i.e. if xz was installed after crosstool-ng, it should be usable)\n    [ ] Check for companion libs and allow using host's libraries for native/cross (need to check if the host has them) - but allow them to be selected for build\n[ ] Merge aggregator scripts like cc.sh, debug.sh etc\n[ ] #534 Merge gcc backends in 100-gcc.sh \n  [ ] Currently some options (e.g. plugins) are not supported in core backend, hence aren't available on baremetal configurations\n[ ] Support clang\n[ ] Add a script to poll for new releases\n[ ] Install a single lib/ directory with all the stuff needed - scripts, makefile fragments, etc\n  [ ] Separate maintainer's scripts from the scripts used by crosstool-ng itself\n  [ ] Commit testing.py to the new maintainer's dir\n  [ ] Add an ability to do a single run of testing.py? or just use build-all, when the branch for separate canadian install is done\n[ ] Extensibility to allow custom kernel headers and/or libc\n[ ] Support elfkickers\n[ ] Make cross-native toolchain non-experimental\n  [ ] Rework dependency order to suit xnative toolchain too\n[ ] Make native/cross-native toolchain non-experimental\n  [ ] Pick up libc from host for native\n  [ ] Optimize steps to not require simple-cross for cross-native\n[ ] Make supplemental commands like show-config leave .config and .build alone\n[ ] Test populate script\n[ ] 3rd party extensions to GCC\n  [ ] GHDL seems to be active and supports GCC6\n  [ ] COBOL? Cannot find which GCC version they need [http://cobolforgcc.sourceforge.net/]\n    [ ] At the very least they have an awesome guide to GCC internals: http://cobolforgcc.sourceforge.net/cobol_14.html; might just as well reference it in our docs\n  [ ] Modula-2 supports GCC 4.7 as the latest\n    [ ] Resurrect GCC4.7?\n[ ] readelf: DWARF parser does not handle DW_CFA_remember_state/DW_CFA_restore_state\n[ ] Support uClibc++?\n"
        },
        {
          "name": "bash-completion",
          "type": "tree",
          "content": null
        },
        {
          "name": "bootstrap",
          "type": "blob",
          "size": 22.3779296875,
          "content": "#!/usr/bin/env bash\n# -*- mode: bash; tab-width: 4 -*-\n# vi: ts=4:sw=4:et\n# vim: filetype=bash\n\nif [ \"${BASH_VERSINFO[0]}\" -lt 4 ]; then\n    echo \"Your BASH shell version (${BASH_VERSION}) is too old.\" >&2\n    echo \"Run bootstrap on a machine with BASH 4.x\" >&2\n    exit 1\nfi\n\n# see #849\nunset CDPATH\n\n########################################\n# Common meta-language implementation. Syntax:\n#\n# The template file is processed line by line, with @@VAR@@ placeholders\n# being replaced with a value of the VAR variable.\n# Special lines start with '#!' and a keyword:\n#\n# #!//\n#     Comment, the rest of the line is ignored\n# #!if COND\n#     Conditional: the lines until the matching #!end-if are processed\n#     only if the conditional COND evaluates to true.\n# #!foreach NAME\n#     Iterate over NAME entities (the iterator must be set up first\n#     using the set_iter function), processing the lines until the matching\n#     #!end-foreach line.\n#\n# Also, several forms of @@VAR@@ expansions are possible:\n#\n# @@VAR@@\n#     Just the value of the variable VAR\n# @@VAR|@@\n#     The value of VAR made into Kconfig-name: all non-alphanumeric character\n#     replaced with underscores; upper-cased.\n# @@VAR?val@@\n#     If VAR is non-empty, insert value \"val\". Otherwise, insert nothing.\n# @@*ITER@@\n#     Expands to a space separated list of values for the iterator ITER.\n#     Postprocess operations, if any, are applied to each value.\n\ndeclare -A info\n\ndebug()\n{\n    if [ -n \"${DEBUG}\" ]; then\n        echo \"DEBUG :: $@\" >&2\n    fi\n}\n\nmsg()\n{\n    if [ -z \"${QUIET}\" ]; then\n        echo \"INFO  :: $@\" >&2\n    fi\n}\n\nwarn()\n{\n    echo \"WARN  :: $@\" >&2\n}\n\nerror()\n{\n    echo \"ERROR :: $@\" >&2\n    exit 1\n}\n\nfind_end()\n{\n    local token=\"${1}\"\n    local count=1\n\n    # Skip first line, we know it has the proper '#!' command on it\n    endline=$[l + 1]\n    while [ \"${endline}\" -le \"${end}\" ]; do\n        case \"${tlines[${endline}]}\" in\n            \"#!${token} \"*)\n                count=$[count + 1]\n                ;;\n            \"#!end-${token}\")\n                count=$[count - 1]\n                ;;\n        esac\n        if [ \"${count}\" = 0 ]; then\n            return\n        fi\n        endline=$[endline + 1]\n    done\n    error \"${template}:${l}: '${token}' token is unpaired\"\n}\n\nset_iter()\n{\n    local name=\"${1}\"\n    local -a temp\n\n    if [ \"${info[iter_${name}]+set}\" = \"set\" ]; then\n        error \"Iterator over '${name}' is already set up\"\n    fi\n    shift\n    debug \"Setting iterator over '${name}' to '$*'\"\n    temp=(\"$@\")\n    info[iter_${name}]=\"$*\"\n    info[#${name}]=${#temp[@]}\n}\n\nrun_if()\n{\n    local cond=\"$*\"\n    local endline\n\n    find_end \"if\"\n    if eval \"${cond}\"; then\n        debug \"True conditional '${cond}' at lines ${l}..${endline}\"\n        run_lines $[l + 1] $[endline - 1]\n    else\n        debug \"False conditional '${cond}' at lines ${l}..${endline}\"\n    fi\n    lnext=$[endline + 1]\n    debug \"Continue at line ${lnext}\"\n}\n\ndo_foreach()\n{\n    local var=\"${1}\"\n    local -A saveinfo\n    local v k\n\n    shift\n    if [ \"`type -t enter_${var}`\" != \"function\" ]; then\n        error \"No parameter setup routine for iterator over '${var}'\"\n    fi\n    if [ \"x${info[iter_${var}]+set}\" != \"xset\" ]; then\n        error \"Iterator over '${var}' not configured\"\n    fi\n    for v in ${info[iter_${var}]}; do\n        # This works in bash 4.4, but not in bash 4.3:\n        # local saveinfo=`declare -p info`\n        # ...\n        # eval \"${saveinfo}\"\n        # Therefore, need to save key-by-key\n        saveinfo=()\n        for k in \"${!info[@]}\"; do\n            saveinfo[\"${k}\"]=${info[\"${k}\"]}\n        done\n        if eval \"enter_${var} ${v}\"; then\n            eval \"$@\"\n        fi\n        info=()\n        for k in \"${!saveinfo[@]}\"; do\n            info[\"${k}\"]=${saveinfo[\"${k}\"]}\n        done\n    done\n}\n\nrun_foreach()\n{\n    local endline\n    local var=\"${1}\"\n    shift\n\n    if [ \"${info[iter_${var}]+set}\" != \"set\" ]; then\n        error \"${template}:${l}: iterator over '${var}' is not defined\"\n    fi\n    find_end \"foreach\"\n    debug \"Loop over '${var}', lines ${l}..${endline}\"\n    do_foreach ${var} run_lines_if $[l + 1] $[endline - 1] \"$*\"\n    lnext=$[endline + 1]\n    debug \"Continue at line ${lnext}\"\n}\n\nrun_lines_if()\n{\n    local start=\"${1}\"\n    local end=\"${2}\"\n    shift 2\n    local cond=\"$*\"\n    local a prev\n\n    for a in ${cond}; do\n        if [ -n \"${prev}\" ]; then\n            case \"${prev}\" in\n                if-differs)\n                    if [ \"${info[${a}]}\" = \"${saveinfo[${a}]}\" ]; then\n                        return\n                    fi\n                    ;;\n                *)\n                    error \"${template}:${l}: unknown condition '${prev}' for loop\"\n                    ;;\n            esac\n            prev=\n        else\n            prev=${a}\n        fi\n    done\n    run_lines \"${start}\" \"${end}\"\n}\n\nrun_lines()\n{\n    local start=\"${1}\"\n    local end=\"${2}\"\n    local l lnext s s1 v vn vp pp p val val0 is_iter pp_saved\n    local -a vpl\n\n    debug \"Running lines ${start}..${end}\"\n    l=${start}\n    while [ \"${l}\" -le \"${end}\" ]; do\n        lnext=$[l+1]\n        s=\"${tlines[${l}]}\"\n        # Expand @@foo@@ to ${info[foo]}. First escape variables/backslashes for evals below.\n        s=\"${s//\\\\/\\\\\\\\}\"\n        s=\"${s//\\$/\\\\\\$}\"\n        s1=\n        while [ -n \"${s}\" ]; do\n            case \"${s}\" in\n                *@@*@@*)\n                    v=\"${s#*@@}\"\n                    v=\"${v%%@@*}\"\n                    # $v now has the complete reference. First check if it is cached already.\n                    if [ \"${info[${v}]+set}\" != \"set\" ]; then\n                        case \"${v}\" in\n                            \"*\"*) is_iter=y; vn=\"${v#\\*}\";;\n                            *) is_iter=n; vn=\"${v}\";;\n                        esac\n                        # $vn is now the reference without the preceding iterator\n                        vp=\"${vn%%[|?]*}\"\n                        pp=\"${vn#${vp}}\"\n                        # $vp is name of the variable proper, $pp is any postprocessing\n                        if [ \"${is_iter}\" = \"n\" ]; then\n                            if [ \"${info[${vp}]+set}\" != \"set\" ]; then\n                                error \"${template}:${l}: reference to undefined variable '${vp}'\"\n                            fi\n                            vpl=( \"${info[${vp}]}\" )\n                        else\n                            if [ \"${info[iter_${vp}]+set}\" != \"set\" ]; then\n                                error \"${template}:${l}: iterator over '${vp} is not defined\"\n                            fi\n                            vpl=( ${info[iter_${vp}]} )\n                        fi\n                        # ${vpl[@]} now is an array of values to be transformed.\n                        val=\n                        pp_saved=\"${pp}\"\n                        for val0 in \"${vpl[@]}\"; do\n                            debug \"val0 [${val0}]\"\n                            pp=\"${pp_saved}\"\n                            # Apply postprocessing(s)\n                            while [ -n \"${pp}\" ]; do\n                                case \"${pp}\" in\n                                    \"|\"*)\n                                        # Kconfigize\n                                        pp=\"${pp#|}\"\n                                        val0=${val0//[^0-9A-Za-z_]/_}\n                                        val0=${val0^^}\n                                        ;;\n                                    \"?\"*)\n                                        pp=\"${pp#?}\"\n                                        p=\"${pp%%[|?]*}\"\n                                        pp=\"${pp#${p}}\"\n                                        val0=\"${val0:+${p}}\"\n                                        ;;\n                                esac\n                            done\n                            val=\"${val:+${val} }${val0}\"\n                        done\n                        # Cache for future references.\n                        info[${v}]=\"${val}\"\n                    fi\n                    s1=\"${s1}${s%%@@*}\\${info[${v}]}\"\n                    s=\"${s#*@@*@@}\"\n                    ;;\n                *@@*)\n                    error \"${template}:${l}: non-paired @@ markers\"\n                    ;;\n                *)\n                    s1=\"${s1}${s}\"\n                    break\n                    ;;\n            esac\n        done\n        s=${s1}\n\n        debug \"Evaluate: ${s}\"\n        case \"${s}\" in\n            \"#!if \"*)\n                run_if ${s#* }\n                ;;\n            \"#!foreach \"*)\n                run_foreach ${s#* }\n                ;;\n            \"#!//\"*)\n                # Comment, do nothing\n                ;;\n            \"#!\"*)\n                error \"${template}:${l}: unrecognized command\"\n                ;;\n            *)\n                # Not a special command\n                eval \"echo \\\"${s//\\\"/\\\\\\\"}\\\"\"\n                ;;\n        esac\n        l=${lnext}\n    done\n}\n\nrun_template()\n{\n    local -a tlines\n    local src=\"${1}\"\n\n    if [ ! -r \"${src}\" ]; then\n        error \"Template '${src}' not found\"\n    fi\n    template=\"${src}\"\n    debug \"Running template ${src}\"\n    mapfile -O 1 -t tlines < \"${src}\"\n    run_lines 1 ${#tlines[@]}\n}\n\n########################################\n\n# Leave only relevant portion of the string\nrelevantize()\n{\n    local p pb pa vx\n    local v=\"${1}\"\n    shift\n\n    # Find the first match and contract to the matching portion.\n    for p in \"$@\"; do\n        pb=${p%|*}\n        pa=${p#*|}\n        eval \"vx=\\${v#${pb}${pa}}\"\n        if [ \"${v%${pa}${vx}}\" != \"${v}\" ]; then\n            v=${v%${pa}${vx}}\n            break\n        fi\n    done\n    echo \"${v}\"\n}\n\n# Helper for cmp_versions: compare an upstream/debian portion of\n# a version. Returns 0 if equal, otherwise echoes \"-1\" or \"1\" and\n# returns 1.\nequal_versions()\n{\n    local v1=\"${1}\"\n    local v2=\"${2}\"\n    local p1 p2\n\n    # Compare alternating non-numerical/numerical portions, until\n    # non-equal portion is found or either string is exhausted.\n    while [ -n \"${v1}\" -a -n \"${v2}\" ]; do\n        # Find non-numerical portions and compare lexicographically\n        p1=\"${v1%%[0-9]*}\"\n        p2=\"${v2%%[0-9]*}\"\n        v1=\"${v1#${p1}}\"\n        v2=\"${v2#${p2}}\"\n        #debug \"lex [${p1}] v [${p2}]\"\n        if [ \"${p1}\" \\< \"${p2}\" ]; then\n            echo \"-1\"\n            return 1\n        elif [ \"${p1}\" \\> \"${p2}\" ]; then\n            echo \"1\"\n            return 1\n        fi\n        #debug \"rem [${v1}] v [${v2}]\"\n        # Find numerical portions and compare numerically\n        p1=\"${v1%%[^0-9]*}\"\n        p2=\"${v2%%[^0-9]*}\"\n        v1=\"${v1#${p1}}\"\n        v2=\"${v2#${p2}}\"\n        #debug \"num [${p1}] v [${p2}]\"\n        if [ \"${p1:-0}\" -lt \"${p2:-0}\" ]; then\n            echo \"-1\"\n            return 1\n        elif [ \"${p1:-0}\" -gt \"${p2:-0}\" ]; then\n            echo \"1\"\n            return 1\n        fi\n        #debug \"rem [${v1}] v [${v2}]\"\n    done\n    if [ -n \"${v1}\" ]; then\n        echo \"1\"\n        return 1\n    elif [ -n \"${v2}\" ]; then\n        echo \"-1\"\n        return 1\n    fi\n    return 0\n}\n\n# Compare two version strings, similar to sort -V. But we don't\n# want to depend on GNU sort availability on the host.\n# See http://www.debian.org/doc/debian-policy/ch-controlfields.html\n# for description of what the version is expected to be.\n# Returns \"-1\", \"0\" or \"1\" if first version is earlier, same or\n# later than the second.\ncmp_versions()\n{\n    local v1=\"${1}\"\n    local v2=\"${2}\"\n    local e1=0 e2=0 d1=0 d2=0\n\n    # Case-insensitive comparison\n    v1=\"${v1^^}\"\n    v2=\"${v2^^}\"\n\n    # Find if the versions contain epoch part\n    case \"${v1}\" in\n        *:*)\n            e1=\"${v1%%:*}\"\n            v1=\"${v1#*:}\"\n            ;;\n    esac\n    case \"${v2}\" in\n        *:*)\n            e2=\"${v2%%:*}\"\n            v2=\"${v2#*:}\"\n            ;;\n    esac\n\n    # Compare epochs numerically\n    if [ \"${e1}\" -lt \"${e2}\" ]; then\n        echo \"-1\"\n        return\n    elif [ \"${e1}\" -gt \"${e2}\" ]; then\n        echo \"1\"\n        return\n    fi\n\n    # Find if the version contains a \"debian\" part.\n    # v1/v2 will now contain \"upstream\" part.\n    case \"${v1}\" in\n        *-*)\n            d1=${v1##*-}\n            v1=${v1%-*}\n            ;;\n    esac\n    case \"${v2}\" in\n        *-*)\n            d2=${v2##*-}\n            v2=${v2%-*}\n            ;;\n    esac\n\n    # Compare upstream\n    if equal_versions \"${v1}\" \"${v2}\" && equal_versions \"${d1}\" \"${d2}\"; then\n        echo \"0\"\n    fi\n}\n\n# Sort versions, descending\nsort_versions()\n{\n    local sorted\n    local remains=\"$*\"\n    local next_remains\n    local v vx found\n\n    while [ -n \"${remains}\" ]; do\n        #debug \"Sorting [${remains}]\"\n        for v in ${remains}; do\n            found=yes\n            next_remains=\n            #debug \"Candidate ${v}\"\n            for vx in ${remains}; do\n                #debug \"${v} vs ${vx} :: `cmp_versions ${v} ${vx}`\"\n                case `cmp_versions ${v} ${vx}` in\n                    1)\n                        next_remains+=\" ${vx}\"\n                        ;;\n                    0)\n                        ;;\n                    -1)\n                        found=no\n                        #debug \"Bad: earlier than ${vx}\"\n                        break\n                        ;;\n                esac\n            done\n            if [ \"${found}\" = \"yes\" ]; then\n                # $v is less than all other members in next_remains\n                sorted+=\" ${v}\"\n                remains=\"${next_remains}\"\n                #debug \"Good candidate ${v} sorted [${sorted}] remains [${remains}]\"\n                break\n            fi\n        done\n    done\n    echo \"${sorted}\"\n}\n\nread_file()\n{\n    local l p\n\n    while read l; do\n        l=\"${p}${l}\"\n        p=\n        case \"${l}\" in\n            \"\")\n                continue\n                ;;\n            *\\\\)\n                p=\"${l%\\\\}\"\n                continue\n                ;;\n            \"#\"*)\n                continue\n                ;;\n            *=*)\n                echo \"info[${l%%=*}]=${l#*=}\"\n                ;;\n            *)\n                error \"syntax error in '${1}': '${l}'\"\n                ;;\n        esac\n    done < \"${1}\"\n}\n\nread_package_desc()\n{\n    read_file \"packages/${1}/package.desc\"\n}\n\nread_version_desc()\n{\n    read_file \"packages/${1}/${2}/version.desc\"\n}\n\nfind_forks()\n{\n    local -A info\n\n    info[preferred]=${1}\n    eval `read_package_desc ${1}`\n\n    if [ -n \"${info[master]}\" ]; then\n        pkg_nforks[${info[master]}]=$[pkg_nforks[${info[master]}]+1]\n        pkg_forks[${info[master]}]+=\" ${1} \"\n    else\n        pkg_preferred[${1}]=${info[preferred]}\n        pkg_nforks[${1}]=$[pkg_nforks[${1}]+1]\n        pkg_forks[${1}]+=\" ${1} \"\n        pkg_milestones[${1}]=`sort_versions ${info[milestones]}`\n        pkg_relevantpattern[${1}]=${info[relevantpattern]}\n        pkg_masters+=( \"${1}\" )\n    fi\n    # Keep sorting so that preferred fork is first\n    if [ -n \"${pkg_preferred[${1}]}\" ]; then\n        pkg_forks[${1}]=\"${pkg_preferred[${1}]} ${pkg_forks[${1}]##* ${pkg_preferred[${1}]} } ${pkg_forks[${1}]%% ${pkg_preferred[${1}]} *}\"\n    fi\n}\n\nenter_fork()\n{\n    local fork=\"${1}\"\n    local versions\n    local only_obsolete only_experimental\n    local -A seen_selectors\n\n    # Set defaults\n    info[obsolete]=\n    info[experimental]=\n    info[repository]=\n    info[repository_branch]=\n    info[repository_cset]=\n    info[repository_subdir]=\n    info[bootstrap]=\n    info[fork]=${fork}\n    info[pkg_name]=${fork}\n    info[pkg_label]=${fork}\n    info[mirrors]=\n    info[src_release]=\n    info[src_devel]=\n    info[src_custom]=\n    info[archive_filename]='@{pkg_name}-@{version}'\n    info[archive_dirname]='@{pkg_name}-@{version}'\n    info[versionlocked]=\n    info[origin]=\n    info[signature_format]=\n\n    eval `read_package_desc ${fork}`\n\n    if [ -r \"packages/${info[origin]}.help\" ]; then\n        info[originhelp]=`sed 's/^/      /' \"packages/${info[origin]}.help\"`\n    else\n        info[originhelp]=\"      ${info[master]} from ${info[origin]}.\"\n    fi\n\n    if [ -n \"${info[repository]}\" ]; then\n        info[vcs]=${info[repository]%% *}\n        info[repository_url]=${info[repository]#* }\n    fi\n\n    info[mirrors]=${info[mirrors]//$\\(/\\\\$\\(}\n\n    versions=`cd packages/${fork} && \\\n        for f in */version.desc; do [ -r \"${f}\" ] && echo \"${f%/version.desc}\"; done`\n    versions=`sort_versions ${versions}`\n\n    set_iter version ${versions}\n    info[all_versions]=${versions}\n\n    check_relevant_pattern()\n    {\n        if [ \"x${seen_selectors[${info[ver_sel]}]+set}\" = \"xset\" ]; then\n            error \"${info[pkg_name]}: version ${info[ver]} conflicts with version ${seen_selectors[${info[ver_sel]}]} (${info[ver_sel]} selector)\"\n        else\n            seen_selectors[${info[ver_sel]}]=${info[ver]}\n        fi\n    }\n    do_foreach version check_relevant_pattern\n\n    # If a fork does not define any versions at all (\"rolling release\"), do not\n    # consider it obsolete/experimental unless it is so marked in the fork's\n    # description.\n    if [ -n \"${versions}\" ]; then\n        only_obsolete=yes\n        only_experimental=yes\n\n        check_obsolete_experimental()\n        {\n            [ -z \"${info[obsolete]}\" ] && only_obsolete=\n            [ -z \"${info[experimental]}\" ] && only_experimental=\n        }\n        do_foreach version check_obsolete_experimental\n        info[only_obsolete]=${only_obsolete}\n        info[only_experimental]=${only_experimental}\n    else\n        info[only_obsolete]=${info[obsolete]}\n        info[only_experimental]=${info[experimental]}\n    fi\n}\n\nenter_version()\n{\n    local version=\"${1}\"\n\n    eval `read_version_desc ${info[fork]} ${version}`\n    info[ver]=${version}\n    info[ver_sel]=`relevantize ${version} ${info[relevantpattern]}`\n}\n\nenter_milestone()\n{\n    local ms=\"${1}\"\n\n    info[ms]=${ms}\n    if [ -n \"${info[ver]}\" ]; then\n        if [ -n \"${info[version_number]}\" ]; then\n            info[version_cmp_milestone]=`cmp_versions ${info[version_number]} ${info[ms]}`\n        else\n            info[version_cmp_milestone]=`cmp_versions ${info[ver]} ${info[ms]}`\n        fi\n    fi\n}\n\ngen_packages()\n{\n    local -A pkg_forks pkg_milestones pkg_nforks pkg_relevantpattern\n    local -a pkg_masters pkg_all pkg_preferred\n\n    pkg_all=( `cd packages && \\\n        ls */package.desc 2>/dev/null | \\\n        while read f; do [ -r \"${f}\" ] && echo \"${f%/package.desc}\"; done | \\\n        xargs echo` )\n\n    debug \"Packages: ${pkg_all[@]}\"\n\n    # We need to group forks of the same package into the same\n    # config file. Discover such relationships and only iterate\n    # over \"master\" packages at the top.\n    for p in \"${pkg_all[@]}\"; do\n        find_forks \"${p}\"\n    done\n    msg \"Master packages: ${pkg_masters[@]}\"\n\n    # Now for each master, create its kconfig file with version\n    # definitions. As a byproduct, generate a list of all package\n    # versions for maintenance purposes.\n    exec 3>\"maintainer/package-versions\"\n    for p in \"${pkg_masters[@]}\"; do\n        msg \"Generating '${config_versions_dir}/${p}.in'\"\n        exec >\"${config_versions_dir}/${p}.in\"\n        # Base definitions for the whole config file\n        info=( \\\n            [master]=${p} \\\n            [nforks]=${pkg_nforks[${p}]} \\\n            [relevantpattern]=${pkg_relevantpattern[${p}]} \\\n            )\n        set_iter fork ${pkg_forks[${p}]}\n        set_iter milestone ${pkg_milestones[${p}]}\n\n        run_template \"maintainer/kconfig-versions.template\"\n        run_template \"maintainer/package-versions.template\" >&3\n    done\n}\n\nmsg \"*** Generating package version descriptions\"\nconfig_versions_dir=config/versions\nrm -rf \"${config_versions_dir}\"\nmkdir -p \"${config_versions_dir}\"\ngen_packages\n\nget_components()\n{\n    local dir=\"${1}\"\n    local f b\n\n    for f in ${dir}/*.in; do\n        b=${f#${dir}/}\n        echo ${b%.in}\n    done\n}\n\nenter_choice()\n{\n    local choice=\"${1}\"\n    local input=\"config/${info[dir]}/${choice}.in\"\n    local l ln\n\n    info[choice]=\"${choice}\"\n    info[pkg]=\"${choice}\"\n\n    # Not local, we need these arrays be set in enter_dependency/enter_help\n    deplines=( )\n    helplines=( )\n    ln=0\n    while read l; do\n        ln=$[ln+1]\n        case \"${l}\" in\n        \"## help \"*)\n            helplines+=( \"${l#\\#\\# help }\" )\n            ;;\n        \"## depends \"*|\"## select \"*|\"## default \"*)\n            deplines+=( \"${l#\\#\\# }\" )\n            ;;\n        \"## no-package\")\n            info[pkg]=\n            ;;\n        \"## package \"*)\n            info[pkg]=${l#\\#\\# package }\n            ;;\n        \"##\"|\"## help\")\n            # accept empty, for formatting\n            ;;\n        \"##\"*)\n            error \"${input}:${ln}: unrecognized command\"\n            ;;\n        esac\n    done < \"${input}\"\n    set_iter dependency \"${!deplines[@]}\"\n    set_iter help \"${!helplines[@]}\"\n}\n\nenter_dependency()\n{\n    info[depline]=\"${deplines[${1}]}\"\n}\n\nenter_help()\n{\n    info[helpline]=\"${helplines[${1}]}\"\n}\n\ngen_selection()\n{\n    local type=\"${1}\"\n    local dir=\"${2}\"\n    local label=\"${3}\"\n\n    msg \"Generating ${dir}.in (${type})\"\n    exec >\"${config_gen_dir}/${dir}.in\"\n    info=( \\\n        [dir]=${dir} \\\n        [label]=\"${label}\" \\\n        )\n    set_iter choice `get_components config/${dir}`\n    run_template \"maintainer/kconfig-${type}.template\"\n}\n\nmsg \"*** Generating menu/choice selections\"\nconfig_gen_dir=config/gen\nrm -rf \"${config_gen_dir}\"\nmkdir -p \"${config_gen_dir}\"\n\ngen_selection choice arch \"Target Architecture\"\ngen_selection choice kernel \"Target OS\"\ngen_selection choice cc \"Compiler\"\ngen_selection choice binutils \"Binutils\"\ngen_selection choice libc \"C library\"\ngen_selection menu linker \"Linkers\"\ngen_selection menu debug \"Debug facilities\"\ngen_selection menu comp_tools \"Companion tools\"\ngen_selection menu comp_libs \"Companion libraries\"\n\nmsg \"*** Gathering the list of data files to install\"\n{\n    declare -A seen_files\n    echo -n \"verbatim_data =\"\n    find -L COPYING config contrib licenses.d packages samples scripts -type f | LANG=C sort | while read f; do\n        # Implement some kind of .installignore for these files?\n        case \"${f}\" in\n            # Avoid temp files\n            *.sw[po])\n                continue\n                ;;\n            # And, some files automake insists we must have\n            scripts/compile | scripts/missing | scripts/depcomp | scripts/ltmain.sh | scripts/install-sh)\n                continue\n                ;;\n            #\n            # will produce. FIXME: create this file at the time of 'ct-ng build'.\n            config/configure.in.in | config/configure.in)\n                continue\n                ;;\n        esac\n        # Checks & substitutions above may result in duplicate files\n        if [ -n \"${seen_files[${f}]}\" ]; then\n            continue\n        fi\n        echo \" \\\\\"\n        echo -en \"\\t${f}\"\n        seen_files[${f}]=y\n    done\n} > verbatim-data.mk\n\nmsg \"*** Running autoreconf\"\nautoreconf -Wall --force -I m4\n\nmsg \"*** Done!\"\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "configure.ac",
          "type": "blob",
          "size": 11.005859375,
          "content": "#                                               -*- Autoconf -*-\n# Process this file with autoconf to produce a configure script.\n\nAC_PREREQ([2.69])\n\nAC_INIT(\n    [crosstool-NG],\n    [m4_esyscmd_s([maintainer/git-version-gen --prefix crosstool-ng- .tarball-version])],\n    [crossgcc@sourceware.org],\n    [crosstool-ng],\n    [http://crosstool-ng.org])\nAC_CONFIG_AUX_DIR([scripts])\nAC_CONFIG_MACRO_DIR([m4])\n\n# FIXME try to use gnu strictness? Just add the missing files?\n# Set automake defaults:\n# - Tarballs are compressed with xz and bzip2\n# - Object files are generated in a subdirectory (new default in automake)\n# - Request new tar format (old, tar-v7, breaks on long paths we have)\nAM_INIT_AUTOMAKE([-Wall -Werror foreign no-dist-gzip dist-xz dist-bzip2 subdir-objects tar-pax])\nAM_SILENT_RULES([yes])\n\n# To avoid stubbing autotools with missing script\nAM_MAINTAINER_MODE([enable])\n\n# Safety check per autoconf best practices\nAC_CONFIG_SRCDIR([ct-ng.in])\n\n#--------------------------------------------------------------------\n# Allow dummy --{en,dis}able-{static,shared}\nAC_ARG_ENABLE([local],\n    [AS_HELP_STRING([--enable-local],\n        [run ct-ng from the current directory; 'make install' unsupported])])\nAC_SUBST([enable_local], [${enable_local:-no}])\n\nAC_ARG_ENABLE([maintainer-mode],\n    [AS_HELP_STRING([--enable-maintainer-mode],\n        [Ignored; accepted to avoid a warning from debuild])])\n\nAC_ARG_WITH([bash-completion],\n    [AS_HELP_STRING([--with-bash-completion],\n        [install bash(1) command completion; can specify a path where it will be installed])],\n    [],\n    [with_bash_completion=yes])\nAS_IF([test \"${with_bash_completion}\" = \"no\"],\n    [BASH_COMPLETION_DIR=],\n    [test \"${with_bash_completion}\" != \"yes\"],\n    [BASH_COMPLETION_DIR=\"${with_bash_completion}\"],\n    [BASH_COMPLETION_DIR='${datadir}/bash-completion/completions'])\nAM_CONDITIONAL([INSTALL_BASH_COMPLETION], [test -n \"${BASH_COMPLETION_DIR}\"])\nAC_SUBST([BASH_COMPLETION_DIR])\n\n# Check for --build and --host...\nAC_CANONICAL_BUILD\nAC_CANONICAL_HOST\n# ... but refuse --target\nAS_IF([test -n \"$target_alias\"],\n      AC_MSG_ERROR([--target is not allowed]))\n\n# Allow program name tranformation (--program-{prefix,suffix,transform-name})\nAC_ARG_PROGRAM\n\nAC_PROG_MKDIR_P\nAC_PROG_LN_S\n\nCTNG_PROG_INSTALL\n\nCTNG_WITH_DEPRECATED([grep], [GREP])\nAC_ARG_VAR([GREP], [Specify the full path to GNU grep])\n\n# This is not a typo! Prefer GNU grep on macOS if it is installed.\nCTNG_PATH_TOOL_REQ([GREP], [ggrep grep], [grep])\nCTNG_PATH_TOOL_REQ([EGREP], [gegrep egrep], [egrep])\nAC_PROG_GREP\nAC_PROG_EGREP\n\n# FIXME: ct-ng assumes this in many places...\nAS_IF([test \"$EGREP\" != \"$GREP -E\"],\n    [AC_MSG_ERROR([egrep is not $GREP -E])])\n\nCTNG_PROG_VERSION_REQ_STRICT([SED],\n    [GNU sed >= 4.0],\n    [sed],\n    [gsed sed],\n    [GNU sed[^0-9]* [4-9]\\.])\nAC_ARG_VAR([SED], [Specify the full path to GNU sed])\n\nAC_CONFIG_HEADERS([config.h])\n\n# Modern GCC/GDB releases require C++ support in the compiler\nAC_PROG_CC\n# Add for legacy reasons (automake < 1.14)\nAM_PROG_CC_C_O\nAC_PROG_CXX\nAC_PROG_CPP\nAC_PROG_LEX([noyywrap])\nAX_PROG_BISON\nAS_IF([test -z \"$CC\" -o -z \"$CXX\"],\n      [AC_MSG_ERROR([no suitable compiler found])])\n\nAX_CXX_COMPILE_STDCXX([11],, [optional])\nCTNG_SET_KCONFIG_OPTION([has_cxx11], [${HAVE_CXX11}])\n\n# Check to see if the compiler can link statically\nAC_MSG_CHECKING([if $CC can static link])\necho \"int main() {}\" | ${CC} -static -o /dev/null -xc - > /dev/null 2>&1\nstatic_test=$?\nAS_IF([test $static_test -eq 0],\n          [static_link=y\n           AC_MSG_RESULT([yes])],\n      [test $static_test -ne 0],\n          [static_link=\n           AC_MSG_RESULT([no])])\nCTNG_SET_KCONFIG_OPTION([static_link])\n\nAC_PROG_RANLIB\nCTNG_PATH_TOOL_REQ([OBJCOPY], [gobjcopy objcopy], [objcopy])\nCTNG_PATH_TOOL_REQ([OBJDUMP], [gobjdump objdump], [objdump])\nCTNG_PATH_TOOL_REQ([READELF], [greadelf readelf], [readelf])\n\nCTNG_CHECK_PROGS_REQ([flex], [flex])\nCTNG_CHECK_PROGS_REQ([makeinfo], [makeinfo])\nCTNG_CHECK_PROGS_REQ([cut], [cut])\nCTNG_CHECK_PROGS_REQ([readlink], [readlink])\nCTNG_CHECK_PROGS_REQ([tar], [tar])\nCTNG_CHECK_PROGS_REQ([gzip], [gzip])\nCTNG_CHECK_PROGS_REQ([bzip2], [bzip2])\nCTNG_CHECK_PROGS_REQ([xz], [xz])\nCTNG_CHECK_PROGS_REQ([unzip], [unzip])\nCTNG_CHECK_PROGS_REQ([help2man], [help2man])\nCTNG_CHECK_PROGS_REQ([file], [file])\nCTNG_CHECK_PROGS_REQ([which], [which])\n\n# Lzip is optional; all the packages that provide tarballs in .tar.lz format\n# also provide them in some other format. All other formats are currently\n# mandatory as there is at least one package that has no fallback for each\n# of them.\n# FIXME: this configure.ac should be only used for detecting the dependencies\n# of the ct-ng framework itself; anything needed at build time should be\n# determined by crosstool-NG.sh - perhaps, through another 'configure' that\n# runs during `ct-ng build`.\nAC_CHECK_PROGS([lzip], [lzip])\nCTNG_SET_KCONFIG_OPTION([lzip])\nAC_SUBST([lzip])\n\n# Not a fatal failure even if we have neither - the tarballs may\n# be provided in a local directory.\nAC_CHECK_PROGS([wget], [wget])\nCTNG_SET_KCONFIG_OPTION([wget])\nAC_SUBST([wget])\n\nAC_CHECK_PROGS([curl], [curl])\nCTNG_SET_KCONFIG_OPTION([curl])\nAC_SUBST([curl])\n\nAC_CHECK_PROGS([meson], [meson])\nCTNG_SET_KCONFIG_OPTION([meson])\nAC_SUBST([meson])\n\nAC_CHECK_PROGS([ninja], [ninja])\nCTNG_SET_KCONFIG_OPTION([ninja])\nAC_SUBST([ninja])\n\nCTNG_CPU_COUNT\n\nCTNG_PATH_TOOL_REQ([PATCH], [gpatch patch], [patch])\n\n# Ensure the detected patch supports --no-backup-if-mismatch (BSD patch does not)\nAC_MSG_CHECKING([whether patch supports --no-backup-if-mismatch])\nAS_IF([$PATCH --no-backup-if-mismatch </dev/null >/dev/null 2>&1],\n      AC_MSG_RESULT([yes]),\n      AC_MSG_ERROR([$PATCH does not support --no-backup-if-mismatch]))\n\n# We need a bash that is >= 4.0\nCTNG_PROG_VERSION_REQ_STRICT([BASH_SHELL],\n    [GNU bash >= 4.0],\n    [bash],\n    [bash],\n    [^GNU bash, version (4|5)])\n\n# We need a awk that *is* GNU awk\nCTNG_PROG_VERSION_REQ_STRICT([AWK],\n    [GNU awk],\n    [awk],\n    [gawk awk],\n    [^GNU Awk ])\n\n# FIXME This checks for tools at the time configure runs. If a tool is later updated\n# to satisfy our version requirement, we still won't be able to see that. Or worse,\n# downgraded/removed. We should check this and update configure.in options right\n# before running kconfig. Our configure should only check for stuff needed to\n# build/install crosstool-ng itself.\n#----------------------------------------\n# Check for GNU make (want 3.81 or above, but will accept as long as any make is found)\nCTNG_PROG_VERSION_REQ_ANY([MAKE],\n    [GNU make >= 3.81],\n    [make],\n    [gmake make],\n    [^GNU Make (3\\.8[1-9]|3\\.9[0-9]|[4-9]\\.)],\n    [make_3_81_or_newer])\n\nCTNG_PROG_VERSION_REQ_ANY([MAKE],\n    [GNU make >= 4.0],\n    [make],\n    [gmake make],\n    [^GNU Make [4-9]\\.],\n    [make_4_0_or_newer])\n\nCTNG_PROG_VERSION_REQ_ANY([MAKE],\n    [GNU make >= 4.4],\n    [make],\n    [gmake make],\n    [^GNU Make (4\\.[4-9]|[5-9]\\.)],\n    [make_4_4_or_newer])\n\n# Check other companion tools that we may or may not build.\nCTNG_PROG_VERSION_REQ_ANY([LIBTOOL],\n    [GNU libtool >= 2.4],\n    [libtool],\n    [glibtool libtool],\n    [\\(GNU libtool\\) ([3-9]\\.|2.[4-9]|2.[1-3][0-9])],\n    [libtool_2_4_or_newer])\n\nCTNG_PROG_VERSION_REQ_ANY([LIBTOOLIZE],\n    [GNU libtoolize >= 2.4],\n    [libtoolize],\n    [glibtoolize libtoolize],\n    [\\(GNU libtool\\) ([3-9]\\.|2.[4-9]|2.[1-3][0-9])],\n    [libtoolize_2_4_or_newer])\n\nCTNG_PROG_VERSION([AUTOCONF],\n    [GNU autoconf >= 2.65],\n    [autoconf],\n    [autoconf],\n    [\\(GNU Autoconf\\) ([3-9]\\.|2\\.[7-9][0-9]|2\\.6[5-9])],\n    [autoconf_2_65_or_newer])\n\nCTNG_PROG_VERSION([AUTORECONF],\n    [GNU autoreconf >= 2.63],\n    [autoreconf],\n    [autoreconf],\n    [\\(GNU Autoconf\\) ([3-9]\\.|2\\.[7-9][0-9]|2\\.6[5-9])],\n    [autoreconf_2_65_or_newer])\n\nCTNG_PROG_VERSION([AUTOMAKE],\n    [GNU automake >= 1.15],\n    [automake],\n    [automake],\n    [\\(GNU automake\\) ([2-9]\\.|1\\.[2-9][0-9]|1\\.1[5-9])],\n    [automake_1_15_or_newer])\n\nCTNG_PROG_VERSION([M4],\n    [GNU m4 >= 1.4.12],\n    [m4],\n    [gm4 m4],\n    [\\(GNU M4\\) ([2-9]\\.|1\\.[5-9]|1\\.[1-4][0-9]|1\\.4\\.[2-9][0-9]|1\\.4\\.1[2-9])],\n    [gnu_m4_1_4_12_or_newer])\n\n# Check for Python\nCTNG_PYTHON\n\n# Check for Python 3.4 or newer\nCTNG_PYTHON_VERSION([3],[4])\n\nCTNG_PROG_VERSION_REQ_ANY([BISON],\n    [bison >= 2.7],\n    [bison],\n    [bison],\n    [\\(GNU Bison\\) (2\\.[7-9]|2\\.[1-9][0-9]|[3-9]\\.)],\n    [bison_2_7_or_newer])\n\nCTNG_PROG_VERSION_REQ_ANY([BISON],\n    [bison >= 3.0.4],\n    [bison],\n    [bison],\n    [\\(GNU Bison\\) (3\\.0\\.[4-9]|3\\.[1-9]|[4-9]\\.)],\n    [bison_3_0_4_or_newer])\n\nAC_SUBST([kconfig_options])\n\nAC_CHECK_PROGS([dtc], [dtc])\nCTNG_SET_KCONFIG_OPTION([dtc])\n\nAC_CHECK_PROGS([cvs], [cvs])\nCTNG_SET_KCONFIG_OPTION([cvs])\n\nAC_CHECK_PROGS([svn], [svn])\nCTNG_SET_KCONFIG_OPTION([svn])\n\nAC_CHECK_PROGS([git], [git])\nCTNG_SET_KCONFIG_OPTION([git])\n\n# Check which tools we have for verifying the digest\nAC_PATH_PROGS([md5sum], [gmd5sum md5sum])\nAC_PATH_PROGS([sha1sum], [gsha1sum sha1sum])\nAC_PATH_PROGS([sha256sum], [gsha256sum sha256sum])\nAC_PATH_PROGS([sha512sum], [gsha512sum sha512sum])\nCTNG_SET_KCONFIG_OPTION([md5sum])\nCTNG_SET_KCONFIG_OPTION([sha1sum])\nCTNG_SET_KCONFIG_OPTION([sha256sum])\nCTNG_SET_KCONFIG_OPTION([sha512sum])\n\n# FIXME why checking if not using the result? We don't provide replacemant malloc/alloca/...\nAC_C_INLINE\nAC_FUNC_MALLOC\nAC_FUNC_REALLOC\nAC_FUNC_ALLOCA\n\nAM_GNU_GETTEXT([external])\nAM_GNU_GETTEXT_VERSION([0.19.7])\n\n# For now, curses are needed to build kconfig. We may support a command-line\n# only configuration without curses later. For now, fail in configure but\n# consider it ok in config.h.\nAX_WITH_CURSES\nAS_IF([test \"x$ax_cv_curses\" != \"xyes\" ], [AC_MSG_ERROR([curses library not found])])\nAX_WITH_CURSES_PANEL\nAS_IF([test \"x$ax_cv_panel\" != \"xyes\" ], [AC_MSG_ERROR([panel library not found])])\nAX_WITH_CURSES_MENU\nAS_IF([test \"x$ax_cv_menu\" != \"xyes\" ], [AC_MSG_ERROR([menu library not found])])\n\nAH_BOTTOM([\n/* Select the correct curses/menu/panel headers */\n#if defined HAVE_NCURSESW_CURSES_H\n#  define CURSES_LOC <ncursesw/curses.h>\n#elif defined HAVE_NCURSESW_H\n#  define CURSES_LOC <ncursesw.h>\n#elif defined HAVE_NCURSES_CURSES_H\n#  define CURSES_LOC <ncurses/curses.h>\n#elif defined HAVE_NCURSES_H\n#  define CURSES_LOC <ncurses.h>\n#elif defined HAVE_CURSES_H\n#  define CURSES_LOC <curses.h>\n#else\n#  /* not an error - maybe a configuration didn't need curses */\n#endif\n\n#if defined HAVE_NCURSESW_PANEL_H\n#  define PANEL_LOC <ncursesw/panel.h>\n#elif defined HAVE_NCURSES_PANEL_H\n#  define PANEL_LOC <ncurses/panel.h>\n#elif defined HAVE_PANEL_H\n#  define PANEL_LOC <panel.h>\n#else\n#  /* not an error */\n#endif\n\n#if defined HAVE_NCURSESW_MENU_H\n#  define MENU_LOC <ncursesw/menu.h>\n#elif defined HAVE_NCURSES_MENU_H\n#  define MENU_LOC <ncurses/menu.h>\n#elif defined HAVE_MENU_H\n#  define MENU_LOC <menu.h>\n#else\n#  /* not an error */\n#endif\n])\n\nAX_BUILD_DATE_EPOCH(DATE, [%c])\nAC_SUBST([DATE])\n\nAM_CONDITIONAL([INSTALL_USER_MANUAL], [test ! -f \"${srcdir}/docs/MANUAL_ONLINE\"])\nAC_MSG_CHECKING([if the manual needs to be installed])\nAM_COND_IF([INSTALL_USER_MANUAL], [AC_MSG_RESULT([yes])], [AC_MSG_RESULT([no])])\n\nAC_CONFIG_FILES([\n    Makefile\n    paths.sh\n    kconfig/Makefile\n    config/configure.in\n])\n\nAC_OUTPUT\n"
        },
        {
          "name": "contrib",
          "type": "tree",
          "content": null
        },
        {
          "name": "ct-ng.in",
          "type": "blob",
          "size": 11.5859375,
          "content": "#!@MAKE@ -rf\n# vim: set filetype=make noet :\n# Makefile for crosstool-NG.\n# Copyright 2006 Yann E. MORIN <yann.morin.1998@free.fr>\n\n# Don't print directory as we descend into them\n# Don't use built-in rules, we know what we're doing\nMAKEFLAGS += --no-print-directory --no-builtin-rules\n\n# Don't go parallel\n.NOTPARALLEL:\n\n# This is where ct-ng is:\nexport CT_NG:=$(abspath $(lastword $(MAKEFILE_LIST)))\n# and this is where we're working in:\nexport CT_TOP_DIR:=$(shell pwd)\n\nifeq (@enable_local@,yes)\n# automake does not allow to set pkgxxxdir, they are always derived from\n# a respective xxxdir. So, for enable-local case, set them directly here.\nexport CT_LIB_DIR:=$(patsubst %/,%,$(dir $(CT_NG)))\nexport CT_LIBEXEC_DIR:=$(CT_LIB_DIR)/kconfig\nexport CT_DOC_DIR:=$(CT_LIB_DIR)/docs\nexport CT_LICENSE_DIR\nelse\n# Paths and values set by ./configure\n# Don't bother to change it other than with a new ./configure!\nexport CT_LIB_DIR:=@pkgdatadir@\nexport CT_LIBEXEC_DIR:=@pkglibexecdir@\nexport CT_DOC_DIR:=@docdir@\nendif\n\n# This is crosstool-NG version string\nexport CT_VERSION:=@PACKAGE_VERSION@\n\n# Export with an empty value: this masks the version detection variable in\n# user-visible configurators, and suppresses a warning from kconfig.\nexport CT_VCHECK=\n\n# Current version of the configuration file. Defined here, because we also\n# need to pass it to the upgrade script - which may receive an input that\n# was not preprocessed by kconfig, and hence have no string for \"up-to-date\"\n# version.\nexport CT_CONFIG_VERSION_CURRENT=4\n\n# Download agents used by scripts.mk\nCT_WGET     := @wget@\nCT_CURL     := @curl@\n\n# Paths found by ./configure\nexport install      = @INSTALL@\nexport bash         = @BASH_SHELL@\nexport awk          = @AWK@\nexport grep         = @GREP@\nexport make         = @MAKE@\nexport sed          = @SED@\nexport libtool      = @LIBTOOL@\nexport libtoolize   = @LIBTOOLIZE@\nexport objcopy      = @OBJCOPY@\nexport objdump      = @OBJDUMP@\nexport readelf      = @READELF@\nexport patch        = @PATCH@\n\n# Some distributions (eg. Ubuntu) thought it wise to point /bin/sh to\n# a truly POSIX-conforming shell, ash in this case. This is not so good\n# as we, smart (haha!) developers (as smart we ourselves think we are),\n# got used to bashisms, and are inclined to easiness... So force use of\n# bash.\nexport SHELL=$(bash)\n\n# Make the restart/stop steps available to scripts/crostool-NG.sh\nexport CT_STOP:=$(STOP)\nexport CT_RESTART:=$(RESTART)\n\nSILENT=@\nCT_ECHO=echo\nifeq ($(strip $(origin V)),command line)\n  ifeq ($(strip $(V)),0)\n    SILENT=@\n    CT_ECHO=:\n  else\n    ifeq ($(strip $(V)),1)\n      SILENT=\n      CT_ECHO=:\n    else\n      ifeq ($(strip $(V)),2)\n        SILENT=\n        CT_ECHO=echo\n      endif # V == 2\n    endif # V== 1\n  endif # V == 0\nendif # origin V\nexport V SILENT CT_ECHO\n\nall: help\n\n.PHONY: $(PHONY)\nPHONY += all\nFORCE:\n\n# Configuration rules. Currently, saveSample.sh uses some of the variables\n# below - they should be passed explicitly.\n\n# Top file of crosstool-NG configuration\nexport KCONFIG_TOP = $(CT_LIB_DIR)/config/config.in\n\nCONF            := $(CT_LIBEXEC_DIR)/conf\nCONF-menuconfig := $(CT_LIBEXEC_DIR)/mconf\nCONF-nconfig    := $(CT_LIBEXEC_DIR)/nconf\n\n# Used by conf/mconf/nconf to find the .in files\n# TBD needed? We do supply the defconfig name explicitly below\nexport srctree=$(CT_LIB_DIR)\n\n.PHONY: menuconfig nconfig oldconfig olddefconfig savedefconfig defconfig check-config extractconfig\n.PHONY: upgradeconfig\n\ncheck-config:\n\t@[ ! -e .config -o -f .config ] || { echo \".config is not a regular file:\"; ls -dl .config; exit 1; } >&2\n\nmenuconfig nconfig: check-config\n\t@$(CT_ECHO) \"  CONF  $@\"\n\t$(SILENT)if [ ! -f .config ] || CT_VCHECK=strict $(bash) $(CT_LIB_DIR)/scripts/version-check.sh .config; then \\\n\t\t$(CONF-$@) $(KCONFIG_TOP); \\\n\telse \\\n\t\tCT_VCHECK=warning $(CONF-$@) $(KCONFIG_TOP); \\\n\tfi\n\noldconfig: .config check-config\n\t@$(CT_ECHO) \"  CONF  $@\"\n\t@$(bash) $(CT_LIB_DIR)/scripts/version-check.sh .config\n\t$(SILENT)$(CONF) --syncconfig $(KCONFIG_TOP)\n\nolddefconfig: .config check-config\n\t@$(CT_ECHO) \"  CONF  $@\"\n\t@$(bash) $(CT_LIB_DIR)/scripts/version-check.sh .config\n\t$(SILENT)$(CONF) --$@ $(KCONFIG_TOP)\n\nsavedefconfig: .config check-config\n\t@$(CT_ECHO) '  GEN   $@'\n\t$(SILENT)CT_VCHECK=save $(CONF) --savedefconfig=$${DEFCONFIG-defconfig} $(KCONFIG_TOP)\n\ndefconfig: check-config\n\t@$(CT_ECHO) '  CONF  $@'\n\t$(SILENT)CT_VCHECK=save $(CONF) --defconfig=$${DEFCONFIG-defconfig} $(KCONFIG_TOP)\n\nupgradeconfig: .config check-config\n\t$(SILENT)cp .config .config.before-upgrade\n\t$(SILENT)CT_UPGRADECONFIG=yes $(bash) $(CT_LIB_DIR)/scripts/version-check.sh .config\n\t@$(CT_ECHO) \"Saving .config as .config.before-olddefconfig before running 'ct-ng olddefconfig'\"\n\t$(SILENT)cp .config .config.before-olddefconfig\n\t$(SILENT)$(CONF) --olddefconfig $(KCONFIG_TOP)\n\t@$(CT_ECHO) \"Done. You may now run 'ct-ng menuconfig' to edit the configuration.\"\n\n# Always be silent, the stdout an be >.config\nextractconfig:\n\t@$(awk) 'BEGIN { dump=0; }                                                  \\\n\t         dump==1 && $$0~/^\\[.....\\][[:space:]]+(# )?CT_/ {                  \\\n\t             $$1=\"\";                                                        \\\n\t             gsub(\"^[[:space:]]\",\"\");                                       \\\n\t             print;                                                         \\\n\t         }                                                                  \\\n\t         $$0~/Dumping user-supplied crosstool-NG configuration: done in/ {  \\\n\t             dump=0;                                                        \\\n\t         }                                                                  \\\n\t         $$0~/Dumping user-supplied crosstool-NG configuration$$/ {         \\\n\t             dump=1;                                                        \\\n\t         }'\n\n# Help system\nhelp:: help-head help-config help-samples help-build help-clean help-distrib help-env help-tail\n\nhelp-head:: version\n\t@echo  'See below for a list of available actions, listed by category:'\n\nhelp-config::\n\t@echo\n\t@echo  'Configuration actions:'\n\nhelp-samples::\n\t@echo\n\t@echo  'Preconfigured toolchains (#: force number of // jobs):'\n\nhelp-build::\n\t@echo\n\t@echo  'Build actions (#: force number of // jobs):'\n\t@echo  '  list-steps         - List all build steps'\n\nhelp-clean::\n\t@echo\n\t@echo  'Clean actions:'\n\nhelp-distrib::\n\t@echo\n\t@echo  'Distribution actions:'\n\nhelp-env::\n\t@echo\n\t@if [ -r \"@docdir@/manual/4_Building.md\" ]; then \\\n\t\techo 'Environment variables (see @docdir@/0 - Table of content.txt):'; \\\n\telse \\\n\t\techo 'Environment variables (see http://crosstool-ng.github.io/docs/build/)'; \\\n\tfi\n\t@echo  '  STOP=step          - Stop the build just after this step (list with list-steps)'\n\t@echo  '  RESTART=step       - Restart the build just before this step (list with list-steps)'\n\nhelp-tail::\n\t@echo\n\t@echo  'Use action \"menuconfig\" to configure your toolchain'\n\t@echo  'Use action \"build\" to build your toolchain'\n\t@echo  'Use action \"version\" to see the version'\n\t@echo  'See \"man 1 $(notdir $(CT_NG))\" for some help as well'\n\nhelp-build::\n\t@echo  '  source             - Download sources for currently configured toolchain'\n\t@echo  '  build[.#]          - Build the currently configured toolchain'\n\nhelp-clean::\n\t@echo  '  clean              - Remove generated files'\n\t@echo  '  distclean          - Remove generated files, configuration and build directories'\n\ninclude $(CT_LIB_DIR)/samples/samples.mk\ninclude $(CT_LIB_DIR)/scripts/scripts.mk\n\nhelp-config::\n\t@echo  '  menuconfig         - Update current config using a menu based program'\n\t@echo  '  nconfig            - Update current config using a menu based program'\n\t@echo  '  oldconfig          - Update current config using a provided .config as base'\n\t@echo  '  upgradeconfig      - Upgrade config file to current crosstool-NG'\n\t@echo  '  extractconfig      - Extract to stdout the configuration items from a'\n\t@echo  '                       build.log file piped to stdin'\n\t@echo  '  savedefconfig      - Save current config as a mini-defconfig to $${DEFCONFIG}'\n\t@echo  '  defconfig          - Update config from a mini-defconfig $${DEFCONFIG}'\n\t@echo  '                       (default: $${DEFCONFIG}=./defconfig)'\n\t@echo  '  show-tuple         - Print the tuple of the currently configured toolchain'\n\nhelp-distrib::\n\nhelp-env::\n\t@echo  '  V=0|1|2|<unset>    - <unset> show only human-readable messages (default)'\n\t@echo  '                       0 => do not show commands or human-readable message'\n\t@echo  '                       1 => show only the commands being executed'\n\t@echo  '                       2 => show both'\n\n# End help system\n\n.config:\n\t@echo \"There is no existing .config file!\"\n\t@echo \"You need to either run 'menuconfig',\"\n\t@echo \"or configure an existing sample.\"\n\t@false\n\nshow-tuple: .config\n\t$(SILENT)$(bash) $(CT_LIB_DIR)/scripts/show-tuple.sh '$${CT_TARGET}'\n\n# Actual build\nsource: .config\n\t$(SILENT)CT_SOURCE=y $(bash) $(CT_LIB_DIR)/scripts/crosstool-NG.sh\n\nbuild: .config\n\t$(SILENT)BUILD_NCPUS=`@CPU_COUNT@ 2>/dev/null || echo 0` \\\n        $(bash) $(CT_LIB_DIR)/scripts/crosstool-NG.sh\n\nbuild.%:\n\t$(SILENT)$(MAKE) -rf $(CT_NG) build CT_JOBS=$*\n\n# The _for_build steps are noop for native and cross,\n# but are actual steps for canadian and cross-native.\n# Please keep the last line with a '\\' and keep the following empty line:\n# it helps when diffing and merging.\nCT_STEPS := \\\n            companion_tools_for_build  \\\n            companion_libs_for_build   \\\n            binutils_for_build         \\\n            companion_tools_for_host   \\\n            companion_libs_for_host    \\\n            binutils_for_host          \\\n            linker                     \\\n            libc_headers               \\\n            kernel_headers             \\\n            cc_core                    \\\n            libc_main                  \\\n            cc_for_build               \\\n            cc_for_host                \\\n            libc_post_cc               \\\n            companion_libs_for_target  \\\n            binutils_for_target        \\\n            debug                      \\\n            test_suite                 \\\n            finish                     \\\n\n# Keep an empty line above this comment, so the last\n# back-slash terminated line works as expected.\n\n# Make the list available to sub-processes (scripts/crosstool-NG.sh needs it)\nexport CT_STEPS\n\n# Print the steps list\nPHONY += list-steps\nlist-steps:\n\t@echo  'Available build steps, in order:'\n\t@for step in $(CT_STEPS); do    \\\n\t     echo \"  - $${step}\";       \\\n\t done\n\t@echo  'Use \"<step>\" as action to execute only that step.'\n\t@echo  'Use \"+<step>\" as action to execute up to that step.'\n\t@echo  'Use \"<step>+\" as action to execute from that step onward.'\n\n# ----------------------------------------------------------\n# This part deals with executing steps\n\n$(CT_STEPS):\n\t$(SILENT)$(MAKE) -rf $(CT_NG) V=$(V) RESTART=$@ STOP=$@ build\n\n$(patsubst %,+%,$(CT_STEPS)):\n\t$(SILENT)$(MAKE) -rf $(CT_NG) V=$(V) STOP=$(patsubst +%,%,$@) build\n\n$(patsubst %,%+,$(CT_STEPS)):\n\t$(SILENT)$(MAKE) -rf $(CT_NG) V=$(V) RESTART=$(patsubst %+,%,$@) build\n\nPHONY += version\nversion:\n\t@echo 'This is crosstool-NG version $(CT_VERSION)'\n\t@echo\n\t@echo 'Copyright (C) 2008  Yann E. MORIN <yann.morin.1998@free.fr>'\n\t@echo 'This is free software; see the source for copying conditions.'\n\t@echo 'There is NO warranty; not even for MERCHANTABILITY or FITNESS FOR A'\n\t@echo 'PARTICULAR PURPOSE.'\n\t@echo\n\nPHONY += clean\nclean::\n\t@$(CT_ECHO) \"  CLEAN log\"\n\t$(SILENT)rm -f build.log\n\t@$(CT_ECHO) \"  CLEAN build dir\"\n\t$(SILENT)[ ! -d targets ] || chmod -R u+w targets\n\t$(SILENT)[ ! -d .build  ] || chmod -R u+w .build\n\t$(SILENT)rm -rf targets .build .build-all\n\nPHONY += distclean\ndistclean:: clean\n\t@$(CT_ECHO) \"  CLEAN .config\"\n\t$(SILENT)rm -f .config .config.* ..config*\n"
        },
        {
          "name": "debian",
          "type": "tree",
          "content": null
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "issue_template.md",
          "type": "blob",
          "size": 0.310546875,
          "content": "### Issue submission guidelines\nSee [detaled guidelines](http://crosstool-ng.github.io/support/). In short:\n- Report crosstool-NG version\n- Report host OS and its version\n- Attach `.config` (unless the issue is not related to any configuration)\n- Attach `build.log` (unless crosstool-NG fails before the build starts)\n"
        },
        {
          "name": "kconfig",
          "type": "tree",
          "content": null
        },
        {
          "name": "licenses.d",
          "type": "tree",
          "content": null
        },
        {
          "name": "m4",
          "type": "tree",
          "content": null
        },
        {
          "name": "maintainer",
          "type": "tree",
          "content": null
        },
        {
          "name": "packages",
          "type": "tree",
          "content": null
        },
        {
          "name": "paths.sh.in",
          "type": "blob",
          "size": 0.498046875,
          "content": "export install=\"@INSTALL@\"\nexport bash=\"@BASH_SHELL@\"\nexport bison=\"@BISON@\"\nexport awk=\"@AWK@\"\nexport grep=\"@GREP@\"\nexport gmake=\"@MAKE@\"\nexport gnumake=\"@MAKE@\"\nexport make=\"@MAKE@\"\nexport python=\"@PYTHON_BIN@\"\nexport sed=\"@SED@\"\nexport libtool=\"@LIBTOOL@\"\nexport libtoolize=\"@LIBTOOLIZE@\"\nexport objcopy=\"@OBJCOPY@\"\nexport objdump=\"@OBJDUMP@\"\nexport readelf=\"@READELF@\"\nexport patch=\"@PATCH@\"\nexport md5sum=\"@md5sum@\"\nexport sha1sum=\"@sha1sum@\"\nexport sha256sum=\"@sha256sum@\"\nexport sha512sum=\"@sha512sum@\"\n"
        },
        {
          "name": "samples",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "testing",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}