{
  "metadata": {
    "timestamp": 1736568312500,
    "page": 222,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjIzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "geerlingguy/macos-virtualbox-vm",
      "stars": 2555,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2015 Jeff Geerling\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 6.4306640625,
          "content": "# macOS VirtualBox VM Instructions\n\nCurrent macOS version: *High Sierra (10.13)*, tested with VirtualBox *5.2.16 r123759*\n\nTo build a VM running macOS, follow the directions below:\n\n  1. Download the installer from Mac App Store (it should be available in the 'Purchases' section if you've acquired it previously). The installer will be placed in your Applications folder. (Should work for Yosemite, El Capitan, Sierra and High Sierra, Mojave - 10.10-10.14.)\n      - **Note**: On newer hardware, you might not be able to download older OS releases that Apple doesn't support on the newer hardware (e.g. the 2016 MacBook Pro can only download 10.12 Sierra or later). In this case, you need to use an older Mac to download the older OS.\n  2. Make the script executable and run it: `chmod +x prepare-iso.sh && ./prepare-iso.sh`.\n\n      If the script fails to find the installer you can specify its path as the first parameter. By default, the output is saved as <Yosemite|El Capitan|Sierra|High Sierra|Mojave>.iso on the Desktop. You can change this using the second parameter.\n      Example:\n\n          ./prepare-iso.sh /Applications/Install\\ macOS Sierra\\ 2.1\\ Beta\\ 2.app sierra-2.1-b2\n\n  3. Open VirtualBox and create a new VM.\n  4. Set:\n      - name: Choose a name\n      - type: `Mac OS X`\n      - version: `Mac OS X (64-bit)`.\n  5. Follow the rest of the VM creation wizard and either leave the defaults or adjust to your liking.\n      - For Big Sur, the installer requires the disk to have at least 35.3 GB.\n  6. Go into the Settings for the new VM you created and:\n    1. Under 'Display', increase the Video Memory to at least 128MB, otherwise macOS might not boot correctly, and display performance will be abysmal.\n    2. Under 'Audio', uncheck 'Enable Audio', otherwise the VM may display 'choppy' performance.\n  7. In Terminal, run the command `VBoxManage modifyvm VM_NAME --cpuidset 00000001 000306a9 00020800 80000201 178bfbff` (where `VM_NAME` is the exact name of the VM set in step 4) so the VM has the right CPU settings for macOS.\n  8. Click 'Start' to boot the new VM.\n  9. Select the iso created in step 2 when VirtualBox asks for it.\n  10. In the installer, select your preferred language.\n  11. Open Disk Utility and format the volume:\n    1. Go to `Utilities > Disk Utility`, select the VirtualBox disk, and choose `Erase` to format it as:\n      - For macOS < 10.13, choose `Mac OS Extended (Journaled)`\n      - For macOS 10.13 and later, choose `APFS`.\n  12. Quit Disk Utility, and then continue with installation as normal.\n\n\n## Troubleshooting & Improvements\n\n  - I've noticed that sometimes I need to go in and explicitly mark the iso as a Live CD in the VM settings in order to get the VM to boot from the image.\n  - If you try to start your VM and it does not boot up at all, check to make sure you have enough RAM to run your VM.\n  - Conversely, VirtualBox sometimes does not eject the virtual installer DVD after installation. If your VM boots into the installer again, remove the ISO in `Settings -> Storage`.\n  - VirtualBox uses the left command key as the \"host key\" by default. If you want to use it for shortcuts like `command+c` or `command-v` (copy&paste), you need to remap or unset the \"Host Key Combination\" in `Preferences -> Input -> Virtual Machine`.\n  - The default Video Memory of 16MB is far below Apple's official requirement of 128MB. Increasing this value may help if you run into problems and is also the most effective performance tuning.\n  - Depending on your hardware, you may also want to increase RAM and the share of CPU power the VM is allowed to use.\n  - When the installation is complete, and you have a fresh new macOS VM, you can shut it down and create a snapshot. This way, you can go back to the initial state in the future. I use this technique to test the [`mac-dev-playbook`](https://github.com/geerlingguy/mac-dev-playbook), which I use to set up and configure my own Mac workstation for web and app development.\n  - If for High Sierra you can not find the VirtualBox disk created inside the Disk Utility select `View -> Show All Devices` and format the newly visible device ([Source: tinyapps.org](https://tinyapps.org/blog/mac/201710010700_high_sierra_disk_utility.html)).\n  - If for High Sierra you encounter boot / EFI problems, restart the VM and hit `F12` to get to the VirtualBox boot manager. Select **EFI In-Terminal Shell** and run:\n\n          Shell> fs1:\n          FS1:\\> cd \"macOS Install Data\"\n          FS1:\\macOS Install Data\\> cd \"Locked Files\"\n          FS1:\\macOS Install Data\\Locked Files\\> cd \"Boot Files\"\n          FS1:\\macOS Install Data\\Locked Files\\Boot Files\\> boot.efi\n\n  - If keyboard and mouse do not work inside the VM:\n    1. Ensure the VirtualBox Extension Pack is installed.\n    2. In the VM settings, under `Ports > USB`, select `USB 3.0 (xHCI) Control`.\n  - If for Big Sur the installer says `The selected volume is not large enough to install on. A minimum of 35.3 GB is required.`, shutdown the VM, go to File > Virtual Media Manager, and increase the disk size. Now, restart the VM, go to Disk Utility, delete the too-small partition and re-create it to use all of the available space.\n## Larger VM Screen Resolution\n\nTo control the screen size of your macOS VM:\n\n  1. Shutdown your VM\n  2. Run the following VBoxManage command:\n\n          VBoxManage setextradata VM_NAME VBoxInternal2/EfiGopMode N\n\nReplace `VM_NAME` with the name of your Virtual Machine. Replace `N` with one of 0,1,2,3,4,5. These numbers correspond to the screen resolutions 640x480, 800x600, 1024x768, 1280x1024, 1440x900, 1920x1200 screen resolution, respectively.\n\nThe video mode can only be changed when the VM is powered off and remains persistent until changed. See more details in [this forum discussion](https://forums.virtualbox.org/viewtopic.php?f=22&t=54030).\n\n## Notes\n\n  - The code for this example originally came from VirtualBox forums and especially [this article](http://sqar.blogspot.de/2014/10/installing-yosemite-in-virtualbox.html).\n  - Subsequently updated to support Yosemite - Sierra based on [this thread](https://forums.virtualbox.org/viewtopic.php?f=22&t=77068&p=358865&hilit=elCapitan+iso#p358865), and High Sierra and beyond based on the work of a number of contributors (thanks!).\n  - To install command line tools after macOS is booted, open a terminal window and enter `xcode-select --install` (or just try using `git`, `gcc`, or other tools that would be installed with CLI tools).\n\n## Author\n\nThis project was created in 2015 by [Jeff Geerling](https://www.jeffgeerling.com/).\n"
        },
        {
          "name": "prepare-iso.sh",
          "type": "blob",
          "size": 11.6435546875,
          "content": "#!/bin/bash\n#\n# This script will create a bootable ISO image from the installer app for:\n#\n#   - Yosemite (10.10)\n#   - El Capitan (10.11)\n#   - Sierra (10.12)\n#   - High Sierra (10.13)\n#   - Mojave (10.14)\n#   - Catalina (10.15)\n#   - Big Sur (11.0)\n#   - Monterey (12.2)\n\nset -e\n\n#\n# createISO\n#\n# This function creates the ISO image for the user.\n# Inputs:  $1 = The name of the installer - located in your Applications folder or in your local folder/PATH.\n#          $2 = The Name of the ISO you want created.\nfunction createISO()\n{\n  if [ $# -eq 2 ] ; then\n    local installerAppName=${1}\n    local isoName=${2}\n    local error=0\n\n    # echo Debug: installerAppName = ${installerAppName} , isoName = ${isoName}\n\n    echo\n    echo Create ${isoName} blank ISO image with a Single Partition - Apple Partition Map\n    echo --------------------------------------------------------------------------\n    # Just in case - delete any previous sparseimage\n    [ -e /tmp/${isoName}.sparseimage ] && rm -f /tmp/${isoName}.sparseimage\n    # increased size to 16G - 8G is too small for Catalina\n    echo $ hdiutil create -o /tmp/${isoName} -size 16g -layout SPUD -fs HFS+J -type SPARSE\n    hdiutil create -o /tmp/${isoName} -size 16g -layout SPUD -fs HFS+J -type SPARSE\n\n    echo\n    echo Mount the installer image\n    echo -----------------------------------------------------------\n\n    if [[ \"${isoName}\" == \"BigSur\" || \"${isoName}\" == \"Monterey\" ]] ; then\n      echo $ hdiutil attach /tmp/${isoName}.sparseimage -noverify -nobrowse -mountpoint /Volumes/install_app\n      hdiutil attach /tmp/${isoName}.sparseimage -noverify -nobrowse -mountpoint /Volumes/install_app\n    elif [ -e \"${installerAppName}\" ] ; then\n      echo $ hdiutil attach \"${installerAppName}\"/Contents/SharedSupport/InstallESD.dmg -noverify -nobrowse -mountpoint /Volumes/install_app\n      hdiutil attach \"${installerAppName}\"/Contents/SharedSupport/InstallESD.dmg -noverify -nobrowse -mountpoint /Volumes/install_app\n      error=$?\n    elif [ -e /Applications/\"${installerAppName}\" ] ; then\n      echo $ hdiutil attach /Applications/\"${installerAppName}\"/Contents/SharedSupport/InstallESD.dmg -noverify -nobrowse -mountpoint /Volumes/install_app\n      hdiutil attach /Applications/\"${installerAppName}\"/Contents/SharedSupport/InstallESD.dmg -noverify -nobrowse -mountpoint /Volumes/install_app\n      error=$?\n      installerAppName=\"/Applications/${installerAppName}\"\n    else\n      echo Installer Not found!\n      error=1\n    fi\n\n    if [ ${error} -ne 0 ] ; then\n      echo \"Failed to mount the InstallESD.dmg from the installer at ${installerAppName}.  Exiting. (${error})\"\n      return ${error}\n    fi\n\n    if [[ \"${isoName}\" != \"BigSur\" && \"${isoName}\" != \"Monterey\" ]] ; then\n      echo\n      echo Mount the sparse bundle for package addition\n      echo --------------------------------------------------------------------------\n      echo $ hdiutil attach /tmp/${isoName}.sparseimage -noverify -nobrowse -mountpoint /Volumes/install_build\n      hdiutil attach /tmp/${isoName}.sparseimage -noverify -nobrowse -mountpoint /Volumes/install_build\n    fi\n\n    echo\n    echo Restore the Base System into the ${isoName} ISO image\n    echo --------------------------------------------------------------------------\n    if [[ \"${isoName}\" == \"BigSur\" || \"${isoName}\" == \"Monterey\" ]] ; then\n      echo \"N/A skipping...\"\n    elif [ \"${isoName}\" == \"HighSierra\" ] || [ \"${isoName}\" == \"Mojave\" ] || [ \"${isoName}\" == \"Catalina\" ] ; then\n      echo $ asr restore -source \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg -target /Volumes/install_build -noprompt -noverify -erase\n      #following asr command returns an error and prints:\n      #\"Personalization succeeded\"\n      #\"asr: Couldn't personalize volume /Volumes/macOS Base System - Operation not permitted\"\n      #I disabled SIP and the error still occurs.\n      #This was reported in Issue #73 for Mojave\n      #I added ||true for now to prevent the script from exiting as the steps that follow still seem to work fine for Catalina\n      asr restore -source \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg -target /Volumes/install_build -noprompt -noverify -erase  ||true\n    else\n      echo $ asr restore -source /Volumes/install_app/BaseSystem.dmg -target /Volumes/install_build -noprompt -noverify -erase\n      asr restore -source /Volumes/install_app/BaseSystem.dmg -target /Volumes/install_build -noprompt -noverify -erase\n    fi\n\n    echo\n    echo Remove Package link and replace with actual files\n    echo --------------------------------------------------------------------------\n    if [[ \"${isoName}\" == \"BigSur\" || \"${isoName}\" == \"Monterey\" ]] ; then\n      echo \"N/A skipping...\"\n    elif [ \"${isoName}\" == \"Mojave\" ] || [ \"${isoName}\" == \"Catalina\" ] ; then\n      echo $ ditto -V /Volumes/install_app/Packages /Volumes/macOS\\ Base\\ System/System/Installation/\n      ditto -V /Volumes/install_app/Packages /Volumes/macOS\\ Base\\ System/System/Installation/\n    elif [ \"${isoName}\" == \"HighSierra\" ] ; then\n      echo $ ditto -V /Volumes/install_app/Packages /Volumes/OS\\ X\\ Base\\ System/System/Installation/\n      ditto -V /Volumes/install_app/Packages /Volumes/OS\\ X\\ Base\\ System/System/Installation/\n    else\n      echo $ rm /Volumes/OS\\ X\\ Base\\ System/System/Installation/Packages\n      rm /Volumes/OS\\ X\\ Base\\ System/System/Installation/Packages\n      echo $ cp -rp /Volumes/install_app/Packages /Volumes/OS\\ X\\ Base\\ System/System/Installation/\n      cp -rp /Volumes/install_app/Packages /Volumes/OS\\ X\\ Base\\ System/System/Installation/\n    fi\n\n    echo\n    echo Copy macOS ${isoName} installer dependencies\n    echo --------------------------------------------------------------------------\n    if [[ \"${isoName}\" == \"BigSur\" || \"${isoName}\" == \"Monterey\" ]] ; then\n      echo $ sudo /Applications/\"${installerAppName}\"/Contents/Resources/createinstallmedia --volume /Volumes/install_app --nointeraction\n      sudo /Applications/\"${installerAppName}\"/Contents/Resources/createinstallmedia --volume /Volumes/install_app --nointeraction\n    elif [ \"${isoName}\" == \"Mojave\" ] || [ \"${isoName}\" == \"Catalina\" ] ; then\n      echo $ ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.chunklist /Volumes/macOS\\ Base\\ System/BaseSystem.chunklist\n      ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.chunklist /Volumes/macOS\\ Base\\ System/BaseSystem.chunklist\n      echo $ ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg /Volumes/macOS\\ Base\\ System/BaseSystem.dmg\n      ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg /Volumes/macOS\\ Base\\ System/BaseSystem.dmg\n    elif [ \"${isoName}\" == \"HighSierra\" ] ; then\n      echo $ ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.chunklist /Volumes/OS\\ X\\ Base\\ System/BaseSystem.chunklist\n      ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.chunklist /Volumes/OS\\ X\\ Base\\ System/BaseSystem.chunklist\n      echo $ ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg /Volumes/OS\\ X\\ Base\\ System/BaseSystem.dmg\n      ditto -V \"${installerAppName}\"/Contents/SharedSupport/BaseSystem.dmg /Volumes/OS\\ X\\ Base\\ System/BaseSystem.dmg\n    else\n      echo $ cp -rp /Volumes/install_app/BaseSystem.chunklist /Volumes/OS\\ X\\ Base\\ System/BaseSystem.chunklist\n      cp -rp /Volumes/install_app/BaseSystem.chunklist /Volumes/OS\\ X\\ Base\\ System/BaseSystem.chunklist\n      echo $ cp -rp /Volumes/install_app/BaseSystem.dmg /Volumes/OS\\ X\\ Base\\ System/BaseSystem.dmg\n      cp -rp /Volumes/install_app/BaseSystem.dmg /Volumes/OS\\ X\\ Base\\ System/BaseSystem.dmg\n    fi\n\n    echo\n    echo Unmount the installer image\n    echo --------------------------------------------------------------------------\n    if [ \"${isoName}\" == \"BigSur\" ] ; then\n      echo $ hdiutil detach /Volumes/\"Install macOS Big Sur\"\n      hdiutil detach /Volumes/\"Install macOS Big Sur\" -force # NOTE: force because \"Resource busy\"\n    elif [ \"${isoName}\" == \"Monterey\" ] ; then\n      echo $ hdiutil detach /Volumes/\"Install macOS Monterey\"\n      hdiutil detach /Volumes/\"Install macOS Monterey\" -force # NOTE: force because \"Resource busy\"\n    else\n      echo $ hdiutil detach /Volumes/install_app\n      hdiutil detach /Volumes/install_app\n    fi\n\n    echo\n    echo Unmount the sparse bundle\n    echo --------------------------------------------------------------------------\n    if [[ \"${isoName}\" == \"BigSur\" || \"${isoName}\" == \"Monterey\" ]] ; then\n      echo \"N/A skipping...\"\n    elif [ \"${isoName}\" == \"Mojave\" ] || [ \"${isoName}\" == \"Catalina\" ] ; then\n      echo $ hdiutil detach /Volumes/macOS\\ Base\\ System/\n      hdiutil detach /Volumes/macOS\\ Base\\ System/\n    else\n      echo $ hdiutil detach /Volumes/OS\\ X\\ Base\\ System/\n      hdiutil detach /Volumes/OS\\ X\\ Base\\ System/\n    fi\n    echo\n    echo Resize the partition in the sparse bundle to remove any free space\n    echo --------------------------------------------------------------------------\n    echo $ hdiutil resize -size `hdiutil resize -limits /tmp/${isoName}.sparseimage | tail -n 1 | awk '{ print $1 }'`b /tmp/${isoName}.sparseimage\n    hdiutil resize -size `hdiutil resize -limits /tmp/${isoName}.sparseimage | tail -n 1 | awk '{ print $1 }'`b /tmp/${isoName}.sparseimage\n\n    echo\n    echo Convert the ${isoName} sparse bundle to ISO/CD master\n    echo --------------------------------------------------------------------------\n    echo $ hdiutil convert /tmp/${isoName}.sparseimage -format UDTO -o /tmp/${isoName}\n    hdiutil convert /tmp/${isoName}.sparseimage -format UDTO -o /tmp/${isoName}\n\n    echo\n    echo Remove the sparse bundle\n    echo --------------------------------------------------------------------------\n    echo $ rm /tmp/${isoName}.sparseimage\n    rm /tmp/${isoName}.sparseimage\n\n    echo\n    echo Rename the ISO and move it to the desktop\n    echo --------------------------------------------------------------------------\n    echo $ mv /tmp/${isoName}.cdr ~/Desktop/${isoName}.iso\n    mv /tmp/${isoName}.cdr ~/Desktop/${isoName}.iso\n  fi\n}\n\n#\n# installerExists\n#\n# Returns 0 if the installer was found either locally or in the /Applications directory.  1 if not.\n#\nfunction installerExists()\n{\n  local installerAppName=$1\n  local result=1\n  if [ -e \"${installerAppName}\" ] ; then\n    result=0\n  elif [ -e /Applications/\"${installerAppName}\" ] ; then\n    result=0\n  fi\n  return ${result}\n}\n\n#\n# Main script code\n#\n# Eject installer disk in case it was opened after download from App Store\n# grep \"partition_scheme\" because \"partition\" finds too many lines\nfor disk in $(hdiutil info | grep /dev/disk | grep partition_scheme | cut -f 1); do\n  hdiutil detach -force ${disk}\ndone\n\n# See if we can find an eligible installer.\n# If successful, then create the iso file from the installer.\n\nif installerExists \"Install macOS Monterey.app\" ; then\n  createISO \"Install macOS Monterey.app\" \"Monterey\"\nelif installerExists \"Install macOS Big Sur.app\" ; then\n  createISO \"Install macOS Big Sur.app\" \"BigSur\"\nelif installerExists \"Install macOS Catalina.app\" ; then\n  createISO \"Install macOS Catalina.app\" \"Catalina\"\nelif installerExists \"Install macOS Mojave.app\" ; then\n  createISO \"Install macOS Mojave.app\" \"Mojave\"\nelif installerExists \"Install macOS High Sierra.app\" ; then\n  createISO \"Install macOS High Sierra.app\" \"HighSierra\"\nelif installerExists \"Install macOS Sierra.app\" ; then\n  createISO \"Install macOS Sierra.app\" \"Sierra\"\nelif installerExists \"Install OS X El Capitan.app\" ; then\n  createISO \"Install OS X El Capitan.app\" \"ElCapitan\"\nelif installerExists \"Install OS X Yosemite.app\" ; then\n  createISO \"Install OS X Yosemite.app\" \"Yosemite\"\nelse\n  echo \"Could not find installer for Yosemite (10.10), El Capitan (10.11), Sierra (10.12), High Sierra (10.13), Mojave (10.14), Catalina (10.15), Big Sur (11.0), or Monterey (12.0).\"\nfi\n"
        }
      ]
    }
  ]
}