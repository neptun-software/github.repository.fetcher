{
  "metadata": {
    "timestamp": 1736568695300,
    "page": 780,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "Overv/openstreetmap-tile-server",
      "stars": 1250,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.0712890625,
          "content": "/.github/\n/.travis.yml\n/docker-compose.yml\n/LICENSE\n/Makefile\n/README.md\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 0.880859375,
          "content": "os: linux\nlanguage: minimal\nservices:\n- docker\n# DOCKER_USERNAME/DOCKER_PASSWORD have been configured in Travis CI\n# env:\nbefore_install:\n- echo \"Before install\"\nbefore_script:\n- docker pull overv/openstreetmap-tile-server || true\nscript:\n- docker build --pull --cache-from overv/openstreetmap-tile-server --tag overv/openstreetmap-tile-server .\n- docker volume create osm-data\n- docker run --rm -v osm-data:/data/database/ overv/openstreetmap-tile-server import\n- docker run --rm -v osm-data:/data/database/ -p 8080:80 -d overv/openstreetmap-tile-server run\n- sleep 30\n- make DOCKER_IMAGE=overv/openstreetmap-tile-server stop\nafter_script:\n- docker images\nafter_success:\n- if [[ \"$TRAVIS_BRANCH\" == \"master\" ]];\n  then\n  docker images ;\n  echo \"$DOCKER_PASSWORD\" | docker login -u \"$DOCKER_USERNAME\" --password-stdin ;\n  docker push overv/openstreetmap-tile-server ;\n  fi\nnotifications:\n  email: true\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 6.0947265625,
          "content": "FROM ubuntu:22.04 AS compiler-common\nENV DEBIAN_FRONTEND=noninteractive\nENV LANG C.UTF-8\nENV LC_ALL C.UTF-8\n\nRUN apt-get update \\\n&& apt-get install -y --no-install-recommends \\\n ca-certificates gnupg lsb-release locales \\\n wget curl \\\n git-core unzip unrar \\\n&& locale-gen $LANG && update-locale LANG=$LANG \\\n&& sh -c 'echo \"deb http://apt.postgresql.org/pub/repos/apt $(lsb_release -cs)-pgdg main\" > /etc/apt/sources.list.d/pgdg.list' \\\n&& wget --quiet -O - https://www.postgresql.org/media/keys/ACCC4CF8.asc | apt-key add - \\\n&& apt-get update && apt-get -y upgrade\n\n###########################################################################################################\n\nFROM compiler-common AS compiler-stylesheet\nRUN cd ~ \\\n&& git clone --single-branch --branch v5.4.0 https://github.com/gravitystorm/openstreetmap-carto.git --depth 1 \\\n&& cd openstreetmap-carto \\\n&& sed -i 's/, \"unifont Medium\", \"Unifont Upper Medium\"//g' style/fonts.mss \\\n&& sed -i 's/\"Noto Sans Tibetan Regular\",//g' style/fonts.mss \\\n&& sed -i 's/\"Noto Sans Tibetan Bold\",//g' style/fonts.mss \\\n&& sed -i 's/Noto Sans Syriac Eastern Regular/Noto Sans Syriac Regular/g' style/fonts.mss \\\n&& rm -rf .git\n\n###########################################################################################################\n\nFROM compiler-common AS compiler-helper-script\nRUN mkdir -p /home/renderer/src \\\n&& cd /home/renderer/src \\\n&& git clone https://github.com/zverik/regional \\\n&& cd regional \\\n&& rm -rf .git \\\n&& chmod u+x /home/renderer/src/regional/trim_osc.py\n\n###########################################################################################################\n\nFROM compiler-common AS final\n\n# Based on\n# https://switch2osm.org/serving-tiles/manually-building-a-tile-server-18-04-lts/\nENV DEBIAN_FRONTEND=noninteractive\nENV AUTOVACUUM=on\nENV UPDATES=disabled\nENV REPLICATION_URL=https://planet.openstreetmap.org/replication/hour/\nENV MAX_INTERVAL_SECONDS=3600\nENV PG_VERSION 15\n\nRUN ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone\n\n# Get packages\nRUN apt-get update \\\n&& apt-get install -y --no-install-recommends \\\n apache2 \\\n cron \\\n dateutils \\\n fonts-hanazono \\\n fonts-noto-cjk \\\n fonts-noto-hinted \\\n fonts-noto-unhinted \\\n fonts-unifont \\\n gnupg2 \\\n gdal-bin \\\n liblua5.3-dev \\\n lua5.3 \\\n mapnik-utils \\\n npm \\\n osm2pgsql \\\n osmium-tool \\\n osmosis \\\n postgresql-$PG_VERSION \\\n postgresql-$PG_VERSION-postgis-3 \\\n postgresql-$PG_VERSION-postgis-3-scripts \\\n postgis \\\n python-is-python3 \\\n python3-mapnik \\\n python3-lxml \\\n python3-psycopg2 \\\n python3-shapely \\\n python3-pip \\\n renderd \\\n sudo \\\n vim \\\n&& apt-get clean autoclean \\\n&& apt-get autoremove --yes \\\n&& rm -rf /var/lib/{apt,dpkg,cache,log}/\n\nRUN adduser --disabled-password --gecos \"\" renderer\n\n# Get Noto Emoji Regular font, despite it being deprecated by Google\nRUN wget https://github.com/googlefonts/noto-emoji/blob/9a5261d871451f9b5183c93483cbd68ed916b1e9/fonts/NotoEmoji-Regular.ttf?raw=true --content-disposition -P /usr/share/fonts/\n\n# For some reason this one is missing in the default packages\nRUN wget https://github.com/stamen/terrain-classic/blob/master/fonts/unifont-Medium.ttf?raw=true --content-disposition -P /usr/share/fonts/\n\n# Install python libraries\nRUN pip3 install \\\n requests \\\n osmium \\\n pyyaml\n\n# Install carto for stylesheet\nRUN npm install -g carto@1.2.0\n\n# Configure Apache\nRUN echo \"LoadModule tile_module /usr/lib/apache2/modules/mod_tile.so\" >> /etc/apache2/conf-available/mod_tile.conf \\\n&& echo \"LoadModule headers_module /usr/lib/apache2/modules/mod_headers.so\" >> /etc/apache2/conf-available/mod_headers.conf \\\n&& a2enconf mod_tile && a2enconf mod_headers\nCOPY apache.conf /etc/apache2/sites-available/000-default.conf\nRUN ln -sf /dev/stdout /var/log/apache2/access.log \\\n&& ln -sf /dev/stderr /var/log/apache2/error.log\n\n# leaflet\nCOPY leaflet-demo.html /var/www/html/index.html\nRUN cd /var/www/html/ \\\n&& wget https://github.com/Leaflet/Leaflet/releases/download/v1.8.0/leaflet.zip \\\n&& unzip leaflet.zip \\\n&& rm leaflet.zip\n\n# Icon\nRUN wget -O /var/www/html/favicon.ico https://www.openstreetmap.org/favicon.ico\n\n# Copy update scripts\nCOPY openstreetmap-tiles-update-expire.sh /usr/bin/\nRUN chmod +x /usr/bin/openstreetmap-tiles-update-expire.sh \\\n&& mkdir /var/log/tiles \\\n&& chmod a+rw /var/log/tiles \\\n&& ln -s /home/renderer/src/mod_tile/osmosis-db_replag /usr/bin/osmosis-db_replag \\\n&& echo \"* * * * *   renderer    openstreetmap-tiles-update-expire.sh\\n\" >> /etc/crontab\n\n# Configure PosgtreSQL\nCOPY postgresql.custom.conf.tmpl /etc/postgresql/$PG_VERSION/main/\nRUN chown -R postgres:postgres /var/lib/postgresql \\\n&& chown postgres:postgres /etc/postgresql/$PG_VERSION/main/postgresql.custom.conf.tmpl \\\n&& echo \"host all all 0.0.0.0/0 scram-sha-256\" >> /etc/postgresql/$PG_VERSION/main/pg_hba.conf \\\n&& echo \"host all all ::/0 scram-sha-256\" >> /etc/postgresql/$PG_VERSION/main/pg_hba.conf\n\n# Create volume directories\nRUN mkdir -p /run/renderd/ \\\n  &&  mkdir  -p  /data/database/  \\\n  &&  mkdir  -p  /data/style/  \\\n  &&  mkdir  -p  /home/renderer/src/  \\\n  &&  chown  -R  renderer:  /data/  \\\n  &&  chown  -R  renderer:  /home/renderer/src/  \\\n  &&  chown  -R  renderer:  /run/renderd  \\\n  &&  mv  /var/lib/postgresql/$PG_VERSION/main/  /data/database/postgres/  \\\n  &&  mv  /var/cache/renderd/tiles/            /data/tiles/     \\\n  &&  chown  -R  renderer: /data/tiles \\\n  &&  ln  -s  /data/database/postgres  /var/lib/postgresql/$PG_VERSION/main             \\\n  &&  ln  -s  /data/style              /home/renderer/src/openstreetmap-carto  \\\n  &&  ln  -s  /data/tiles              /var/cache/renderd/tiles                \\\n;\n\nRUN echo '[default] \\n\\\nURI=/tile/ \\n\\\nTILEDIR=/var/cache/renderd/tiles \\n\\\nXML=/home/renderer/src/openstreetmap-carto/mapnik.xml \\n\\\nHOST=localhost \\n\\\nTILESIZE=256 \\n\\\nMAXZOOM=20' >> /etc/renderd.conf \\\n && sed -i 's,/usr/share/fonts/truetype,/usr/share/fonts,g' /etc/renderd.conf\n\n# Install helper script\nCOPY --from=compiler-helper-script /home/renderer/src/regional /home/renderer/src/regional\n\nCOPY --from=compiler-stylesheet /root/openstreetmap-carto /home/renderer/src/openstreetmap-carto-backup\n\n# Start running\nCOPY run.sh /\nENTRYPOINT [\"/run.sh\"]\nCMD []\nEXPOSE 80 5432\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.083984375,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright 2019 Alexander Overvoorde\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.4599609375,
          "content": ".PHONY: build push test\n\nDOCKER_IMAGE=overv/openstreetmap-tile-server\n\nbuild:\n\tdocker build -t ${DOCKER_IMAGE} .\n\npush: build\n\tdocker push ${DOCKER_IMAGE}:latest\n\ntest: build\n\tdocker volume create osm-data\n\tdocker run --rm -v osm-data:/data/database/ ${DOCKER_IMAGE} import\n\tdocker run --rm -v osm-data:/data/database/ -p 8080:80 -d ${DOCKER_IMAGE} run\n\nstop:\n\tdocker rm -f `docker ps | grep '${DOCKER_IMAGE}' | awk '{ print $$1 }'` || true\n\tdocker volume rm -f osm-data\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 11.962890625,
          "content": "# openstreetmap-tile-server\n\n[![Build Status](https://travis-ci.org/Overv/openstreetmap-tile-server.svg?branch=master)](https://travis-ci.org/Overv/openstreetmap-tile-server) [![](https://images.microbadger.com/badges/image/overv/openstreetmap-tile-server.svg)](https://microbadger.com/images/overv/openstreetmap-tile-server \"openstreetmap-tile-server\")\n[![Docker Image Version (latest semver)](https://img.shields.io/docker/v/overv/openstreetmap-tile-server?label=docker%20image)](https://hub.docker.com/r/overv/openstreetmap-tile-server/tags)\n\nThis container allows you to easily set up an OpenStreetMap PNG tile server given a `.osm.pbf` file. It is based on the [latest Ubuntu 18.04 LTS guide](https://switch2osm.org/serving-tiles/manually-building-a-tile-server-18-04-lts/) from [switch2osm.org](https://switch2osm.org/) and therefore uses the default OpenStreetMap style.\n\n## Setting up the server\n\nFirst create a Docker volume to hold the PostgreSQL database that will contain the OpenStreetMap data:\n\n    docker volume create osm-data\n\nNext, download an `.osm.pbf` extract from geofabrik.de for the region that you're interested in. You can then start importing it into PostgreSQL by running a container and mounting the file as `/data/region.osm.pbf`. For example:\n\n```\ndocker run \\\n    -v /absolute/path/to/luxembourg.osm.pbf:/data/region.osm.pbf \\\n    -v osm-data:/data/database/ \\\n    overv/openstreetmap-tile-server \\\n    import\n```\n\nIf the container exits without errors, then your data has been successfully imported and you are now ready to run the tile server.\n\nNote that the import process requires an internet connection. The run process does not require an internet connection. If you want to run the openstreetmap-tile server on a computer that is isolated, you must first import on an internet connected computer, export the `osm-data` volume as a tarfile, and then restore the data volume on the target computer system.\n\nAlso when running on an isolated system, the default `index.html` from the container will not work, as it requires access to the web for the leaflet packages.\n\n### Automatic updates (optional)\n\nIf your import is an extract of the planet and has polygonal bounds associated with it, like those from [geofabrik.de](https://download.geofabrik.de/), then it is possible to set your server up for automatic updates. Make sure to reference both the OSM file and the polygon file during the `import` process to facilitate this, and also include the `UPDATES=enabled` variable:\n\n```\ndocker run \\\n    -e UPDATES=enabled \\\n    -v /absolute/path/to/luxembourg.osm.pbf:/data/region.osm.pbf \\\n    -v /absolute/path/to/luxembourg.poly:/data/region.poly \\\n    -v osm-data:/data/database/ \\\n    overv/openstreetmap-tile-server \\\n    import\n```\n\nRefer to the section *Automatic updating and tile expiry* to actually enable the updates while running the tile server.\n\nPlease note: If you're not importing the whole planet, then the `.poly` file is necessary to limit automatic updates to the relevant region.\nTherefore, when you only have a `.osm.pbf` file but not a `.poly` file, you should not enable automatic updates.\n\n### Letting the container download the file\n\nIt is also possible to let the container download files for you rather than mounting them in advance by using the `DOWNLOAD_PBF` and `DOWNLOAD_POLY` parameters:\n\n```\ndocker run \\\n    -e DOWNLOAD_PBF=https://download.geofabrik.de/europe/luxembourg-latest.osm.pbf \\\n    -e DOWNLOAD_POLY=https://download.geofabrik.de/europe/luxembourg.poly \\\n    -v osm-data:/data/database/ \\\n    overv/openstreetmap-tile-server \\\n    import\n```\n\n### Using an alternate style\n\nBy default the container will use openstreetmap-carto if it is not specified. However, you can modify the style at run-time. Be aware you need the style mounted at `run` AND `import` as the Lua script needs to be run:\n\n```\ndocker run \\\n    -e DOWNLOAD_PBF=https://download.geofabrik.de/europe/luxembourg-latest.osm.pbf \\\n    -e DOWNLOAD_POLY=https://download.geofabrik.de/europe/luxembourg.poly \\\n    -e NAME_LUA=sample.lua \\\n    -e NAME_STYLE=test.style \\\n    -e NAME_MML=project.mml \\\n    -e NAME_SQL=test.sql \\\n    -v /home/user/openstreetmap-carto-modified:/data/style/ \\\n    -v osm-data:/data/database/ \\\n    overv/openstreetmap-tile-server \\\n    import\n```\n\nIf you do not define the \"NAME_*\" variables, the script will default to those found in the openstreetmap-carto style.\n\nBe sure to mount the volume during `run` with the same `-v /home/user/openstreetmap-carto-modified:/data/style/`\n\nIf you do not see the expected style upon `run` double check your paths as the style may not have been found at the directory specified. By default, `openstreetmap-carto` will be used if a style cannot be found\n\n**Only openstreetmap-carto and styles like it, eg, ones with one lua script, one style, one mml, one SQL can be used**\n\n## Running the server\n\nRun the server like this:\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\nYour tiles will now be available at `http://localhost:8080/tile/{z}/{x}/{y}.png`. The demo map in `leaflet-demo.html` will then be available on `http://localhost:8080`. Note that it will initially take quite a bit of time to render the larger tiles for the first time.\n\n### Using Docker Compose\n\nThe `docker-compose.yml` file included with this repository shows how the aforementioned command can be used with Docker Compose to run your server.\n\n### Preserving rendered tiles\n\nTiles that have already been rendered will be stored in `/data/tiles/`. To make sure that this data survives container restarts, you should create another volume for it:\n\n```\ndocker volume create osm-tiles\ndocker run \\\n    -p 8080:80 \\\n    -v osm-data:/data/database/ \\\n    -v osm-tiles:/data/tiles/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n**If you do this, then make sure to also run the import with the `osm-tiles` volume to make sure that caching works properly across updates!**\n\n### Enabling automatic updating (optional)\n\nGiven that you've set up your import as described in the *Automatic updates* section during server setup, you can enable the updating process by setting the `UPDATES` variable while running your server as well:\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -e REPLICATION_URL=https://planet.openstreetmap.org/replication/minute/ \\\n    -e MAX_INTERVAL_SECONDS=60 \\\n    -e UPDATES=enabled \\\n    -v osm-data:/data/database/ \\\n    -v osm-tiles:/data/tiles/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\nThis will enable a background process that automatically downloads changes from the OpenStreetMap server, filters them for the relevant region polygon you specified, updates the database and finally marks the affected tiles for rerendering.\n\n### Tile expiration (optional)\n\nSpecify custom tile expiration settings to control which zoom level tiles are marked as expired when an update is performed. Tiles can be marked as expired in the cache (TOUCHFROM), but will still be served\nuntil a new tile has been rendered, or deleted from the cache (DELETEFROM), so nothing will be served until a new tile has been rendered.\n\nThe example tile expiration values below are the default values.\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -e REPLICATION_URL=https://planet.openstreetmap.org/replication/minute/ \\\n    -e MAX_INTERVAL_SECONDS=60 \\\n    -e UPDATES=enabled \\\n    -e EXPIRY_MINZOOM=13 \\\n    -e EXPIRY_TOUCHFROM=13 \\\n    -e EXPIRY_DELETEFROM=19 \\\n    -e EXPIRY_MAXZOOM=20 \\\n    -v osm-data:/data/database/ \\\n    -v osm-tiles:/data/tiles/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n### Cross-origin resource sharing\n\nTo enable the `Access-Control-Allow-Origin` header to be able to retrieve tiles from other domains, simply set the `ALLOW_CORS` variable to `enabled`:\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -v osm-data:/data/database/ \\\n    -e ALLOW_CORS=enabled \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n### Connecting to Postgres\n\nTo connect to the PostgreSQL database inside the container, make sure to expose port 5432:\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -p 5432:5432 \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\nUse the user `renderer` and the database `gis` to connect.\n\n```\npsql -h localhost -U renderer gis\n```\n\nThe default password is `renderer`, but it can be changed using the `PGPASSWORD` environment variable:\n\n```\ndocker run \\\n    -p 8080:80 \\\n    -p 5432:5432 \\\n    -e PGPASSWORD=secret \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n## Performance tuning and tweaking\n\nDetails for update procedure and invoked scripts can be found here [link](https://ircama.github.io/osm-carto-tutorials/updating-data/).\n\n### THREADS\n\nThe import and tile serving processes use 4 threads by default, but this number can be changed by setting the `THREADS` environment variable. For example:\n```\ndocker run \\\n    -p 8080:80 \\\n    -e THREADS=24 \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n### CACHE\n\nThe import and tile serving processes use 800 MB RAM cache by default, but this number can be changed by option -C. For example:\n```\ndocker run \\\n    -p 8080:80 \\\n    -e \"OSM2PGSQL_EXTRA_ARGS=-C 4096\" \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n### AUTOVACUUM\n\nThe database use the autovacuum feature by default. This behavior can be changed with `AUTOVACUUM` environment variable. For example:\n```\ndocker run \\\n    -p 8080:80 \\\n    -e AUTOVACUUM=off \\\n    -v osm-data:/data/database/ \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\n\n### FLAT_NODES\n\nIf you are planning to import the entire planet or you are running into memory errors then you may want to enable the `--flat-nodes` option for osm2pgsql. You can then use it during the import process as follows:\n\n```\ndocker run \\\n    -v /absolute/path/to/luxembourg.osm.pbf:/data/region.osm.pbf \\\n    -v osm-data:/data/database/ \\\n    -e \"FLAT_NODES=enabled\" \\\n    overv/openstreetmap-tile-server \\\n    import\n```\n\nWarning: enabling `FLAT_NOTES` together with `UPDATES` only works for entire planet imports (without a `.poly` file).  Otherwise this will break the automatic update script. This is because trimming the differential updates to the specific regions currently isn't supported when using flat nodes.\n\n### Benchmarks\n\nYou can find an example of the import performance to expect with this image on the [OpenStreetMap wiki](https://wiki.openstreetmap.org/wiki/Osm2pgsql/benchmarks#debian_9_.2F_openstreetmap-tile-server).\n\n## Troubleshooting\n\n### ERROR: could not resize shared memory segment / No space left on device\n\nIf you encounter such entries in the log, it will mean that the default shared memory limit (64 MB) is too low for the container and it should be raised:\n```\nrenderd[121]: ERROR: failed to render TILE default 2 0-3 0-3\nrenderd[121]: reason: Postgis Plugin: ERROR: could not resize shared memory segment \"/PostgreSQL.790133961\" to 12615680 bytes: ### No space left on device\n```\nTo raise it use `--shm-size` parameter. For example:\n```\ndocker run \\\n    -p 8080:80 \\\n    -v osm-data:/data/database/ \\\n    --shm-size=\"192m\" \\\n    -d overv/openstreetmap-tile-server \\\n    run\n```\nFor too high values you may notice excessive CPU load and memory usage. It might be that you will have to experimentally find the best values for yourself.\n\n### The import process unexpectedly exits\n\nYou may be running into problems with memory usage during the import. Have a look at the \"Flat nodes\" section in this README.\n\n## License\n\n```\nCopyright 2019 Alexander Overvoorde\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    https://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n```\n"
        },
        {
          "name": "apache.conf",
          "type": "blob",
          "size": 0.47265625,
          "content": "<VirtualHost *:80>\n    ServerAdmin webmaster@localhost\n\n    AddTileConfig /tile/ default\n    LoadTileConfigFile /etc/renderd.conf\n    ModTileRenderdSocketName /run/renderd/renderd.sock\n    ModTileRequestTimeout 0\n    ModTileMissingRequestTimeout 30\n\n    DocumentRoot /var/www/html\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n    <IfDefine ALLOW_CORS>\n        Header set Access-Control-Allow-Origin \"*\"\n    </IfDefine>\n</VirtualHost>\n"
        },
        {
          "name": "docker-compose.yml",
          "type": "blob",
          "size": 0.2041015625,
          "content": "version: '3'\n\nservices:\n  map:\n    image: overv/openstreetmap-tile-server\n    volumes:\n      - osm-data:/data/database/\n    ports:\n      - \"8080:80\"\n    command: \"run\"\n\nvolumes:\n  osm-data:\n    external: true\n"
        },
        {
          "name": "leaflet-demo.html",
          "type": "blob",
          "size": 0.9462890625,
          "content": "<!DOCTYPE html>\n<html>\n    <head>\n        <title>Custom Tile Server</title>\n\n        <meta charset=\"utf-8\" />\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n\n        <link rel=\"stylesheet\" href=\"leaflet.css\"/>\n        <script src=\"leaflet.js\"></script>\n\n        <style>\n            html, body, #map {\n                width: 100%;\n                height: 100%;\n                margin: 0;\n                padding: 0;\n            }\n        </style>\n    </head>\n\n    <body>\n        <div id=\"map\"></div>\n\n        <script>\n            var map = L.map('map').setView([0, 0], 3);\n\n            L.tileLayer('/tile/{z}/{x}/{y}.png', {\n                maxZoom: 18,\n                attribution: 'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\n                id: 'base'\n            }).addTo(map);\n        </script>\n    </body>\n</html>\n"
        },
        {
          "name": "openstreetmap-tiles-update-expire.sh",
          "type": "blob",
          "size": 7.6904296875,
          "content": "#!/bin/sh\n\nset -e\n\n#------------------------------------------------------------------------------\n# Change directory to mod_tile directory so that we can run replag\n# and other things directly from this script when run from cron.\n# Change the actual location to wherever installed locally.\n#------------------------------------------------------------------------------\n# Extra OSM2PGSQL_OPTIONS may need setting if a tag transform script is\n# in use.  See https://github.com/SomeoneElseOSM/SomeoneElse-style and\n# http://wiki.openstreetmap.org/wiki/User:SomeoneElse/Ubuntu_1404_tileserver_load\n# The database name always needs setting.\n#------------------------------------------------------------------------------\nOSMOSIS_BIN=osmosis\nOSM2PGSQL_BIN=osm2pgsql\nTRIM_BIN=/home/renderer/src/regional/trim_osc.py\n\nDBNAME=gis\nOSM2PGSQL_OPTIONS=\"-d $DBNAME -G --hstore --tag-transform-script /data/style/${NAME_LUA:-openstreetmap-carto.lua} --number-processes ${THREADS:-4} -S /data/style/${NAME_STYLE:-openstreetmap-carto.style} ${OSM2PGSQL_EXTRA_ARGS}\"\n\n# flat-nodes\nif [ -f /data/database/flat_nodes.bin ]; then\n    OSM2PGSQL_OPTIONS=\"${OSM2PGSQL_OPTIONS} --flat-nodes /data/database/flat_nodes.bin\"\nfi\n\n#------------------------------------------------------------------------------\n# When using trim_osc.py we can define either a bounding box (such as this\n# example for England and Wales) or a polygon.\n# See https://github.com/zverik/regional .\n# This area will usually correspond to the data originally loaded.\n#------------------------------------------------------------------------------\nTRIM_POLY_FILE=\"/data/database/region.poly\"\nTRIM_OPTIONS=\"-d $DBNAME\"\nTRIM_REGION_OPTIONS=\"-p $TRIM_POLY_FILE\"\n\nBASE_DIR=/data/database\nLOG_DIR=/var/log/tiles\nWORKOSM_DIR=$BASE_DIR/.osmosis\n\nLOCK_FILE=/tmp/openstreetmap-update-expire-lock.txt\nCHANGE_FILE=$BASE_DIR/changes.osc.gz\nEXPIRY_FILE=$BASE_DIR/dirty_tiles\nSTOP_FILE=$BASE_DIR/stop.txt\n\nOSMOSISLOG=$LOG_DIR/osmosis.log\nPGSQLLOG=$LOG_DIR/osm2pgsql.log\nEXPIRYLOG=$LOG_DIR/expiry.log\nRUNLOG=$LOG_DIR/run.log\n\n#------------------------------------------------------------------------------\n# The tile expiry section below can re-render, delete or dirty expired tiles.\n# By default, tiles between EXPIRY_MINZOOM and EXPIRY_MAXZOOM are rerendered.\n# \"render_expired\" can optionally delete (and/or dirty) tiles above a certail\n# threshold rather than rendering them.\n# Here we expire (but don't immediately rerender) tiles between zoom levels\n# 13 and 18 and delete between 19 and 20.\n#------------------------------------------------------------------------------\nEXPIRY_MINZOOM=${EXPIRY_MINZOOM:=\"13\"}\nEXPIRY_TOUCHFROM=${EXPIRY_TOUCHFROM:=\"13\"}\nEXPIRY_DELETEFROM=${EXPIRY_DELETEFROM:=\"19\"}\nEXPIRY_MAXZOOM=${EXPIRY_MAXZOOM:=\"20\"}\n\n#*************************************************************************\n#*************************************************************************\n\nm_info()\n{\n    echo \"[`date +\"%Y-%m-%d %H:%M:%S\"`] $$ $1\" >> \"$RUNLOG\"\n}\n\nm_error()\n{\n    echo \"[`date +\"%Y-%m-%d %H:%M:%S\"`] $$ [error] $1\" >> \"$RUNLOG\"\n\n    m_info \"resetting state\"\n    /bin/cp $WORKOSM_DIR/last.state.txt $WORKOSM_DIR/state.txt || true\n\n    rm \"$CHANGE_FILE\" || true\n    rm \"$EXPIRY_FILE.$$\" || true\n    rm \"$LOCK_FILE\"\n    exit\n}\n\nm_ok()\n{\n    echo \"[`date +\"%Y-%m-%d %H:%M:%S\"`] $$ $1\" >> \"$RUNLOG\"\n}\n\ngetlock()\n{\n    if [ -s $1 ]; then\n        if [ \"$(ps -p `cat $1` | wc -l)\" -gt 1 ]; then\n            return 1 #false\n        fi\n    fi\n\n    echo $$ >\"$1\"\n    return 0 #true\n}\n\nfreelock()\n{\n    rm \"$1\"\n    rm \"$CHANGE_FILE\"\n}\n\n\nif [ $# -eq 1 ] ; then\n    m_info \"Initialising Osmosis replication system to $1\"\n    mkdir -p $WORKOSM_DIR\n    $OSMOSIS_BIN -v 5 --read-replication-interval-init workingDirectory=$WORKOSM_DIR 1>&2 2> \"$OSMOSISLOG\"\n\n    init_seq=$(/usr/lib/python3-pyosmium/pyosmium-get-changes --server $REPLICATION_URL -D $1)\n    url_dynamicPart=$(printf %09d $init_seq | sed 's_\\([0-9][0-9][0-9]\\)\\([0-9][0-9][0-9]\\)\\([0-9][0-9][0-9]\\)_\\1/\\2/\\3_')\n    wget $REPLICATION_URL/$url_dynamicPart.state.txt -O $WORKOSM_DIR/state.txt\n\n    cat > $WORKOSM_DIR/configuration.txt <<- EOM\nbaseUrl=$REPLICATION_URL\nmaxInterval=$MAX_INTERVAL_SECONDS\nEOM\nfi\n\n# make sure the lockfile is removed when we exit and then claim it\nif ! getlock \"$LOCK_FILE\"; then\n    m_info \"pid `cat $LOCK_FILE` still running\"\n    exit 3\nfi\n\nif [ -e $STOP_FILE ]; then\n    m_info \"stopped\"\n    exit 2\nfi\n\n# -----------------------------------------------------------------------------\n# Add disk space check from https://github.com/zverik/regional\n# -----------------------------------------------------------------------------\nMIN_DISK_SPACE_MB=500\n\nif `python -c \"import os, sys; st=os.statvfs('$BASE_DIR'); sys.exit(1 if st.f_bavail*st.f_frsize/1024/1024 > $MIN_DISK_SPACE_MB else 0)\"`; then\n    m_info \"there is less than $MIN_DISK_SPACE_MB MB left\"\n    exit 4\nfi\n\nseq=`cat $WORKOSM_DIR/state.txt | grep sequenceNumber | cut -d= -f2`\nreplag=`dateutils.ddiff $(cat $WORKOSM_DIR/state.txt | grep timestamp | cut -d \"=\" -f 2 | sed 's,\\\\\\,,g') now`\n\nm_ok \"start import from seq-nr $seq, replag is $replag\"\n\n/bin/cp $WORKOSM_DIR/state.txt $WORKOSM_DIR/last.state.txt\nm_ok \"downloading diff\"\n\nif ! $OSMOSIS_BIN --read-replication-interval workingDirectory=$WORKOSM_DIR --simplify-change --write-xml-change $CHANGE_FILE 1>&2 2> \"$OSMOSISLOG\"; then\n    m_error \"Osmosis error\"\nfi\n\nif [ -f $TRIM_POLY_FILE ] ; then\n  m_ok \"filtering diff\"\n  if ! $TRIM_BIN $TRIM_OPTIONS $TRIM_REGION_OPTIONS  -z $CHANGE_FILE $CHANGE_FILE 1>&2 2>> \"$RUNLOG\"; then\n      m_error \"Trim_osc error\"\n  fi\nelse\n  m_ok \"filtering diff skipped\"\nfi\nm_ok \"importing diff\"\n\n#------------------------------------------------------------------------------\n# Previously openstreetmap-tiles-update-expire tried to dirty layer\n# \"$EXPIRY_MAXZOOM - 3\" (which was 15) only.  Instead we write all expired\n# tiles in range to the list (note the \"-\" rather than \":\" in the \"-e\"\n# parameter).\n#------------------------------------------------------------------------------\nif ! $OSM2PGSQL_BIN -a --slim -e$EXPIRY_MINZOOM-$EXPIRY_MAXZOOM $OSM2PGSQL_OPTIONS -o \"$EXPIRY_FILE.$$\" $CHANGE_FILE 1>&2 2> \"$PGSQLLOG\"; then\n    m_error \"osm2pgsql error\"\nfi\n\n#------------------------------------------------------------------------------\n# The lockfile is normally removed before we expire tiles because that is\n# something that can be done in parallel with further processing.  In order to\n# avoid rework, if actually rerendering is done rather than just deleting or\n# dirtying, it makes sense to move it lower down.\n#------------------------------------------------------------------------------\n#   m_ok \"Import complete; removing lock file\"\n#   freelock \"$LOCK_FILE\"\nm_ok \"expiring tiles\"\n\n#------------------------------------------------------------------------------\n# Previously all tiles on the \"dirty\" list between $EXPIRY_MINZOOM and\n# $EXPIRY_MAXZOOM were dirtied.  We currently re-render\n# tiles >= $EXPIRY_MINZOOM and < $EXPIRY_DELETEFROM, expiry from 14 and\n# delete >= $EXPIRY_DELETEFROM and <= $EXPIRY_MAXZOOM.\n# The default path to renderd.sock is fixed.\n#------------------------------------------------------------------------------\nif ! render_expired --map=default --min-zoom=$EXPIRY_MINZOOM --touch-from=$EXPIRY_TOUCHFROM --delete-from=$EXPIRY_DELETEFROM --max-zoom=$EXPIRY_MAXZOOM -s /run/renderd/renderd.sock < \"$EXPIRY_FILE.$$\" 2>&1 | tail -8 >> \"$EXPIRYLOG\"; then\n    m_info \"Expiry failed\"\nfi\n\nrm \"$EXPIRY_FILE.$$\"\n\n#------------------------------------------------------------------------------\n# Only remove the lock file after expiry (if system is slow we want to delay\n# the next import, not have multiple render_expired processes running)\n#------------------------------------------------------------------------------\nfreelock \"$LOCK_FILE\"\n\nm_ok \"Done with import\"\n"
        },
        {
          "name": "postgresql.custom.conf.tmpl",
          "type": "blob",
          "size": 0.662109375,
          "content": "# Suggested minimal settings from\n# https://ircama.github.io/osm-carto-tutorials/tile-server-ubuntu/\n\nshared_buffers = 128MB\nmin_wal_size = 1GB\n# max_wal_size = 2GB # Overridden below\nmaintenance_work_mem = 256MB\n\n# Suggested settings from\n# https://github.com/openstreetmap/chef/blob/master/roles/tile.rb#L38-L45\n\nmax_connections = 250\ntemp_buffers = 32MB\nwork_mem = 128MB\nwal_buffers = 1024kB\nwal_writer_delay = 500ms\ncommit_delay = 10000\n# checkpoint_segments = 60 # unrecognized in psql 10.7.1\nmax_wal_size = 2880MB\nrandom_page_cost = 1.1\ntrack_activity_query_size = 16384\nautovacuum_vacuum_scale_factor = 0.05\nautovacuum_analyze_scale_factor = 0.02\n\nlisten_addresses = '*'\n"
        },
        {
          "name": "run.sh",
          "type": "blob",
          "size": 7.5419921875,
          "content": "#!/bin/bash\n\nset -euo pipefail\n\nfunction createPostgresConfig() {\n  cp /etc/postgresql/$PG_VERSION/main/postgresql.custom.conf.tmpl /etc/postgresql/$PG_VERSION/main/conf.d/postgresql.custom.conf\n  sudo -u postgres echo \"autovacuum = $AUTOVACUUM\" >> /etc/postgresql/$PG_VERSION/main/conf.d/postgresql.custom.conf\n  cat /etc/postgresql/$PG_VERSION/main/conf.d/postgresql.custom.conf\n}\n\nfunction setPostgresPassword() {\n    sudo -u postgres psql -c \"ALTER USER renderer PASSWORD '${PGPASSWORD:-renderer}'\"\n}\n\nif [ \"$#\" -ne 1 ]; then\n    echo \"usage: <import|run>\"\n    echo \"commands:\"\n    echo \"    import: Set up the database and import /data/region.osm.pbf\"\n    echo \"    run: Runs Apache and renderd to serve tiles at /tile/{z}/{x}/{y}.png\"\n    echo \"environment variables:\"\n    echo \"    THREADS: defines number of threads used for importing / tile rendering\"\n    echo \"    UPDATES: consecutive updates (enabled/disabled)\"\n    echo \"    NAME_LUA: name of .lua script to run as part of the style\"\n    echo \"    NAME_STYLE: name of the .style to use\"\n    echo \"    NAME_MML: name of the .mml file to render to mapnik.xml\"\n    echo \"    NAME_SQL: name of the .sql file to use\"\n    exit 1\nfi\n\nset -x\n\n# if there is no custom style mounted, then use osm-carto\nif [ ! \"$(ls -A /data/style/)\" ]; then\n    mv /home/renderer/src/openstreetmap-carto-backup/* /data/style/\nfi\n\n# carto build\nif [ ! -f /data/style/mapnik.xml ]; then\n    cd /data/style/\n    carto ${NAME_MML:-project.mml} > mapnik.xml\nfi\n\nif [ \"$1\" == \"import\" ]; then\n    # Ensure that database directory is in right state\n    mkdir -p /data/database/postgres/\n    chown renderer: /data/database/\n    chown -R postgres: /var/lib/postgresql /data/database/postgres/\n    if [ ! -f /data/database/postgres/PG_VERSION ]; then\n        sudo -u postgres /usr/lib/postgresql/$PG_VERSION/bin/pg_ctl -D /data/database/postgres/ initdb -o \"--locale C.UTF-8\"\n    fi\n\n    # Initialize PostgreSQL\n    createPostgresConfig\n    service postgresql start\n    sudo -u postgres createuser renderer\n    sudo -u postgres createdb -E UTF8 -O renderer gis\n    sudo -u postgres psql -d gis -c \"CREATE EXTENSION postgis;\"\n    sudo -u postgres psql -d gis -c \"CREATE EXTENSION hstore;\"\n    sudo -u postgres psql -d gis -c \"ALTER TABLE geometry_columns OWNER TO renderer;\"\n    sudo -u postgres psql -d gis -c \"ALTER TABLE spatial_ref_sys OWNER TO renderer;\"\n    setPostgresPassword\n\n    # Download Luxembourg as sample if no data is provided\n    if [ ! -f /data/region.osm.pbf ] && [ -z \"${DOWNLOAD_PBF:-}\" ]; then\n        echo \"WARNING: No import file at /data/region.osm.pbf, so importing Luxembourg as example...\"\n        DOWNLOAD_PBF=\"https://download.geofabrik.de/europe/luxembourg-latest.osm.pbf\"\n        DOWNLOAD_POLY=\"https://download.geofabrik.de/europe/luxembourg.poly\"\n    fi\n\n    if [ -n \"${DOWNLOAD_PBF:-}\" ]; then\n        echo \"INFO: Download PBF file: $DOWNLOAD_PBF\"\n        wget ${WGET_ARGS:-} \"$DOWNLOAD_PBF\" -O /data/region.osm.pbf\n        if [ -n \"${DOWNLOAD_POLY:-}\" ]; then\n            echo \"INFO: Download PBF-POLY file: $DOWNLOAD_POLY\"\n            wget ${WGET_ARGS:-} \"$DOWNLOAD_POLY\" -O /data/region.poly\n        fi\n    fi\n\n    if [ \"${UPDATES:-}\" == \"enabled\" ] || [ \"${UPDATES:-}\" == \"1\" ]; then\n        # determine and set osmosis_replication_timestamp (for consecutive updates)\n        REPLICATION_TIMESTAMP=`osmium fileinfo -g header.option.osmosis_replication_timestamp /data/region.osm.pbf`\n\n        # initial setup of osmosis workspace (for consecutive updates)\n        sudo -E -u renderer openstreetmap-tiles-update-expire.sh $REPLICATION_TIMESTAMP\n    fi\n\n    # copy polygon file if available\n    if [ -f /data/region.poly ]; then\n        cp /data/region.poly /data/database/region.poly\n        chown renderer: /data/database/region.poly\n    fi\n\n    # flat-nodes\n    if [ \"${FLAT_NODES:-}\" == \"enabled\" ] || [ \"${FLAT_NODES:-}\" == \"1\" ]; then\n        OSM2PGSQL_EXTRA_ARGS=\"${OSM2PGSQL_EXTRA_ARGS:-} --flat-nodes /data/database/flat_nodes.bin\"\n    fi\n\n    # Import data\n    sudo -u renderer osm2pgsql -d gis --create --slim -G --hstore  \\\n      --tag-transform-script /data/style/${NAME_LUA:-openstreetmap-carto.lua}  \\\n      --number-processes ${THREADS:-4}  \\\n      -S /data/style/${NAME_STYLE:-openstreetmap-carto.style}  \\\n      /data/region.osm.pbf  \\\n      ${OSM2PGSQL_EXTRA_ARGS:-}  \\\n    ;\n\n    # old flat-nodes dir\n    if [ -f /nodes/flat_nodes.bin ] && ! [ -f /data/database/flat_nodes.bin ]; then\n        mv /nodes/flat_nodes.bin /data/database/flat_nodes.bin\n        chown renderer: /data/database/flat_nodes.bin\n    fi\n\n    # Create indexes\n    if [ -f /data/style/${NAME_SQL:-indexes.sql} ]; then\n        sudo -u postgres psql -d gis -f /data/style/${NAME_SQL:-indexes.sql}\n    fi\n\n    #Import external data\n    chown -R renderer: /home/renderer/src/ /data/style/\n    if [ -f /data/style/scripts/get-external-data.py ] && [ -f /data/style/external-data.yml ]; then\n        sudo -E -u renderer python3 /data/style/scripts/get-external-data.py -c /data/style/external-data.yml -D /data/style/data\n    fi\n\n    # Register that data has changed for mod_tile caching purposes\n    sudo -u renderer touch /data/database/planet-import-complete\n\n    service postgresql stop\n\n    exit 0\nfi\n\nif [ \"$1\" == \"run\" ]; then\n    # Clean /tmp\n    rm -rf /tmp/*\n\n    # migrate old files\n    if [ -f /data/database/PG_VERSION ] && ! [ -d /data/database/postgres/ ]; then\n        mkdir /data/database/postgres/\n        mv /data/database/* /data/database/postgres/\n    fi\n    if [ -f /nodes/flat_nodes.bin ] && ! [ -f /data/database/flat_nodes.bin ]; then\n        mv /nodes/flat_nodes.bin /data/database/flat_nodes.bin\n    fi\n    if [ -f /data/tiles/data.poly ] && ! [ -f /data/database/region.poly ]; then\n        mv /data/tiles/data.poly /data/database/region.poly\n    fi\n\n    # sync planet-import-complete file\n    if [ -f /data/tiles/planet-import-complete ] && ! [ -f /data/database/planet-import-complete ]; then\n        cp /data/tiles/planet-import-complete /data/database/planet-import-complete\n    fi\n    if ! [ -f /data/tiles/planet-import-complete ] && [ -f /data/database/planet-import-complete ]; then\n        cp /data/database/planet-import-complete /data/tiles/planet-import-complete\n    fi\n\n    # Fix postgres data privileges\n    chown -R postgres: /var/lib/postgresql/ /data/database/postgres/\n\n    # Configure Apache CORS\n    if [ \"${ALLOW_CORS:-}\" == \"enabled\" ] || [ \"${ALLOW_CORS:-}\" == \"1\" ]; then\n        echo \"export APACHE_ARGUMENTS='-D ALLOW_CORS'\" >> /etc/apache2/envvars\n    fi\n\n    # Initialize PostgreSQL and Apache\n    createPostgresConfig\n    service postgresql start\n    service apache2 restart\n    setPostgresPassword\n\n    # Configure renderd threads\n    sed -i -E \"s/num_threads=[0-9]+/num_threads=${THREADS:-4}/g\" /etc/renderd.conf\n\n    # start cron job to trigger consecutive updates\n    if [ \"${UPDATES:-}\" == \"enabled\" ] || [ \"${UPDATES:-}\" == \"1\" ]; then\n        /etc/init.d/cron start\n        sudo -u renderer touch /var/log/tiles/run.log; tail -f /var/log/tiles/run.log >> /proc/1/fd/1 &\n        sudo -u renderer touch /var/log/tiles/osmosis.log; tail -f /var/log/tiles/osmosis.log >> /proc/1/fd/1 &\n        sudo -u renderer touch /var/log/tiles/expiry.log; tail -f /var/log/tiles/expiry.log >> /proc/1/fd/1 &\n        sudo -u renderer touch /var/log/tiles/osm2pgsql.log; tail -f /var/log/tiles/osm2pgsql.log >> /proc/1/fd/1 &\n\n    fi\n\n    # Run while handling docker stop's SIGTERM\n    stop_handler() {\n        kill -TERM \"$child\"\n    }\n    trap stop_handler SIGTERM\n\n    sudo -u renderer renderd -f -c /etc/renderd.conf &\n    child=$!\n    wait \"$child\"\n\n    service postgresql stop\n\n    exit 0\nfi\n\necho \"invalid command\"\nexit 1\n"
        }
      ]
    }
  ]
}