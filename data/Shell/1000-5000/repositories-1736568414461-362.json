{
  "metadata": {
    "timestamp": 1736568414461,
    "page": 362,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjM2OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "looly/elasticsearch-definitive-guide-cn",
      "stars": 2043,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": "#gitbook\r\n\r\n/_book\r\n"
        },
        {
          "name": "010_Intro",
          "type": "tree",
          "content": null
        },
        {
          "name": "020_Distributed_Cluster",
          "type": "tree",
          "content": null
        },
        {
          "name": "030_Data",
          "type": "tree",
          "content": null
        },
        {
          "name": "040_Distributed_CRUD",
          "type": "tree",
          "content": null
        },
        {
          "name": "050_Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "052_Mapping_Analysis",
          "type": "tree",
          "content": null
        },
        {
          "name": "054_Query_DSL",
          "type": "tree",
          "content": null
        },
        {
          "name": "056_Sorting",
          "type": "tree",
          "content": null
        },
        {
          "name": "060_Distributed_Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "070_Index_Mgmt",
          "type": "tree",
          "content": null
        },
        {
          "name": "075_Inside_a_shard",
          "type": "tree",
          "content": null
        },
        {
          "name": "080_Structured_Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "100_Full_Text_Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "110_Multi_Field_Search",
          "type": "tree",
          "content": null
        },
        {
          "name": "120_Proximity_Matching",
          "type": "tree",
          "content": null
        },
        {
          "name": "130_Partial_Matching",
          "type": "tree",
          "content": null
        },
        {
          "name": "170_Relevance",
          "type": "tree",
          "content": null
        },
        {
          "name": "200_Language_intro",
          "type": "tree",
          "content": null
        },
        {
          "name": "210_Identifying_words",
          "type": "tree",
          "content": null
        },
        {
          "name": "220_Token_normalization",
          "type": "tree",
          "content": null
        },
        {
          "name": "230_Stemming",
          "type": "tree",
          "content": null
        },
        {
          "name": "240_Stopwords",
          "type": "tree",
          "content": null
        },
        {
          "name": "260_Synonyms",
          "type": "tree",
          "content": null
        },
        {
          "name": "270_Fuzzy_matching",
          "type": "tree",
          "content": null
        },
        {
          "name": "300_Aggregations",
          "type": "tree",
          "content": null
        },
        {
          "name": "310_Geopoints",
          "type": "tree",
          "content": null
        },
        {
          "name": "320_Geohashes",
          "type": "tree",
          "content": null
        },
        {
          "name": "330_Geo_aggs",
          "type": "tree",
          "content": null
        },
        {
          "name": "340_Geoshapes",
          "type": "tree",
          "content": null
        },
        {
          "name": "400_Relationships",
          "type": "tree",
          "content": null
        },
        {
          "name": "402_Nested",
          "type": "tree",
          "content": null
        },
        {
          "name": "404_Parent_Child",
          "type": "tree",
          "content": null
        },
        {
          "name": "410_Scaling",
          "type": "tree",
          "content": null
        },
        {
          "name": "500_Cluster_Admin",
          "type": "tree",
          "content": null
        },
        {
          "name": "510_Deployment",
          "type": "tree",
          "content": null
        },
        {
          "name": "520_Post_Deployment",
          "type": "tree",
          "content": null
        },
        {
          "name": "Changelog.md",
          "type": "blob",
          "size": 0.3994140625,
          "content": "# 版本变动\n2015-04-25\n1. 060_Distributed_Search\n\n2015-05-04\n1. 310_Geopoints\n\n2015-05-12\n1. 310_Geopoints\n\n2015-05-15\n1. 310_Geopoints\n\n2015-05-17\n1. 330_Geo_aggs\n\n2015-05-17\nFix\n1. 020_Distributed_Cluster/05_Empty_cluster.md\n2. 020_Distributed_Cluster/10_Cluster_health.md\n\n2015-06-02\n1. 340_Geoshapes\n\n2015-10-13\n1. 索引英文内容\n2. 将Geo部分索引\n\n2015-10-22\n402/00~33 翻译完成 by LukeHong"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.626953125,
          "content": "![cover](https://raw.githubusercontent.com/looly/elasticsearch-definitive-guide-cn/master/cover_small.jpg)\n\n# Elasticsearch 权威指南（中文版）\n\n## 阅读地址：~~[Elasticsearch权威指南（中文版）](http://es.xiaoleilu.com/)~~\n\n## 最新版阅读地址：[Elasticsearch: 权威指南](http://es-guide-preview.elasticsearch.cn/)\n\n## 感谢大家对Elasticsearch权威指南（中文版）的支持，现在新版的翻译工作已经迁移至 [https://github.com/elasticsearch-cn/elasticsearch-definitive-guide](https://github.com/elasticsearch-cn/elasticsearch-definitive-guide) \n\n----------------------------------------\n\n**原书地址：**[Elasticsearch the definitive guide](https://github.com/elasticsearch/elasticsearch-definitive-guide)\n\n**原作者：** clinton gormley，zachary tong\n\n----------------------------------------\n\n**译者：** [Looly](http://www.xiaoleilu.com)\n\n**参与翻译：**\n* [@iridiumcao](https://github.com/iridiumcao)\n* [@cvvnx1](https://github.com/cvvnx1)\n* [@conan007ai](https://github.com/conan007ai)\n* [@sailxjx](https://github.com/sailxjx)\n* [@wxlfight](https://github.com/wxlfight)\n* [@xieyunzi](https://github.com/xieyunzi)\n* [@xdream86](https://github.com/xdream86)\n* [@conan007ai](https://github.com/conan007ai)\n* [@williamzhao](https://github.com/williamzhao)\n* [@dingusxp](https://github.com/dingusxp)\n* [@birdroidcn](https://github.com/birdroidcn)\n* [@MaggieHwang](https://github.com/MaggieHwang)\n\n感谢参与翻译的小伙伴们~~\n\n**邮箱：** loolly@gmail.com\n\n**微博：** [@路小磊](http://weibo.com/loolly)\n\n----------------------------------------\n\n#### 项目地址：\n\n[https://github.com/looly/elasticsearch-definitive-guide-cn](https://github.com/looly/elasticsearch-definitive-guide-cn)\n\n[http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn](http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn)\n\n#### 阅读地址：\n\n[http://es-guide-preview.elasticsearch.cn/](http://es-guide-preview.elasticsearch.cn/)\n\n[http://es.xiaoleilu.com/](http://es.xiaoleilu.com/)\n\n[http://wiki.jikexueyuan.com/project/elasticsearch-definitive-guide-cn/](http://wiki.jikexueyuan.com/project/elasticsearch-definitive-guide-cn/)\n\n## 说明\n之前接触Elasticsearch只是最简单的使用，想要深入了解内部功能，借助翻译同时系统学习。由于英语比较菜，第一次翻译文档，如有不妥，欢迎提issue:\n\n[github](https://github.com/looly/elasticsearch-definitive-guide-cn)\n\n[git@osc](http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn/issues)\n\n### 翻译关键字约定\n* index -> 索引\n* type -> 类型\n* token -> 表征\n* filter -> 过滤器\n* analyser -> 分析器\n\n## Pull Request流程\n\n开始我对Pull Request流程不熟悉，后来参考了[@numbbbbb](https://github.com/numbbbbb)的《The Swift Programming Language》协作流程，在此感谢。\n\n1. 首先fork我的项目\n2. 把fork过去的项目也就是你的项目clone到你的本地\n3. 运行 `git remote add looly git@github.com:looly/elasticsearch-definitive-guide-cn.git` 把我的库添加为远端库\n4. 运行 `git pull looly master` 拉取并合并到本地\n5. 翻译内容\n6. commit后push到自己的库（`git push origin master`）\n7. 登录Github在你首页可以看到一个 `pull request` 按钮，点击它，填写一些说明信息，然后提交即可。\n\n1~3是初始化操作，执行一次即可。在翻译前必须执行第4步同步我的库（这样避免冲突），然后执行5~7既可。\n\n> #### 注意\n> 现在新版的翻译工作已经迁移至 [https://github.com/elasticsearch-cn/elasticsearch-definitive-guide](https://github.com/elasticsearch-cn/elasticsearch-definitive-guide) "
        },
        {
          "name": "README_Wiki.md",
          "type": "blob",
          "size": 3.1435546875,
          "content": "# Elasticsearch 权威指南（中文版）\n\n![cover](https://raw.githubusercontent.com/looly/elasticsearch-definitive-guide-cn/master/cover_small.jpg)\n\n该书由 [Looly](http://www.xiaoleilu.com) 授权极客学院 Wiki 托管发布。 \n\n阅读地址：[Elasticsearch权威指南（中文版）](http://es.xiaoleilu.com/)\n\n----------------------------------------\n\n**原书地址：**[Elasticsearch the definitive guide](https://github.com/elasticsearch/elasticsearch-definitive-guide)\n\n**原作者：** clinton gormley，zachary tong\n\n----------------------------------------\n\n**译者：** [Looly](http://www.xiaoleilu.com)\n\n**参与翻译：**\n* [@iridiumcao](https://github.com/iridiumcao)\n* [@cvvnx1](https://github.com/cvvnx1)\n* [@conan007ai](https://github.com/conan007ai)\n* [@sailxjx](https://github.com/sailxjx)\n* [@wxlfight](https://github.com/wxlfight)\n* [@xieyunzi](https://github.com/xieyunzi)\n* [@xdream86](https://github.com/xdream86)\n* [@conan007ai](https://github.com/conan007ai)\n* [@williamzhao](https://github.com/williamzhao)\n* [@dingusxp](https://github.com/dingusxp)\n* [@birdroidcn](https://github.com/birdroidcn)\n* [@MaggieHwang](https://github.com/MaggieHwang)\n\n感谢参与翻译的小伙伴们~~\n\n**邮箱：** loolly@gmail.com\n\n**微博：** [@路小磊](http://weibo.com/loolly)\n\n----------------------------------------\n\n#### 项目地址：\n\n[https://github.com/looly/elasticsearch-definitive-guide-cn](https://github.com/looly/elasticsearch-definitive-guide-cn)\n\n[http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn](http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn)\n\n#### 阅读地址：\n\n[http://es.xiaoleilu.com/](http://es.xiaoleilu.com/)\n\n## 说明   \n\n之前接触 Elasticsearch 只是最简单的使用，想要深入了解内部功能，借助翻译同时系统学习。由于英语比较菜，第一次翻译文档，如有不妥，欢迎提 issue:\n\n[github](https://github.com/looly/elasticsearch-definitive-guide-cn)\n\n[git@osc](http://git.oschina.net/loolly/elasticsearch-definitive-guide-cn/issues)\n\n### 翻译关键字约定   \n\n* index -> 索引\n* type -> 类型\n* token -> 表征\n* filter -> 过滤器\n* analyser -> 分析器\n\n## Pull Request 流程\n\n开始我对 Pull Request 流程不熟悉，后来参考了[@numbbbbb](https://github.com/numbbbbb)的《The Swift Programming Language》协作流程，在此感谢。\n\n1. 首先 fork 我的项目\n2. 把 fork 过去的项目也就是你的项目 clone 到你的本地\n3. 运行 `git remote add looly git@github.com:looly/elasticsearch-definitive-guide-cn.git` 把我的库添加为远端库\n4. 运行 `git pull looly master` 拉取并合并到本地\n5. 翻译内容\n6. commit后push到自己的库（`git push origin master`）\n7. 登录Github在你首页可以看到一个 `pull request` 按钮，点击它，填写一些说明信息，然后提交即可。\n\n1~3是初始化操作，执行一次即可。在翻译前必须执行第4步同步我的库（这样避免冲突），然后执行5~7既可。\n\n## 注意\n\n1. 文档还未翻译完成，使用gitbook格式，已经翻译完成的章节会陆续提交到gitbook。\n2. 为了便于翻译，未翻译部分拷贝自官方英文文档。\n"
        },
        {
          "name": "SUMMARY.md",
          "type": "blob",
          "size": 17.8095703125,
          "content": "# Summary\n\n* [Introduction](README.md)\n* [入门](010_Intro/00_README.md)\n   * [是什么](010_Intro/05_What_is_it.md)\n   * [安装](010_Intro/10_Installing_ES.md)\n   * [API](010_Intro/15_API.md)\n   * [文档](010_Intro/20_Document.md)\n   * [索引](010_Intro/25_Tutorial_Indexing.md)\n   * [搜索](010_Intro/30_Tutorial_Search.md)\n   * [聚合](010_Intro/35_Tutorial_Aggregations.md)\n   * [小结](010_Intro/40_Tutorial_Conclusion.md)\n   * [分布式](010_Intro/45_Distributed.md)\n   * [结语](010_Intro/50_Conclusion.md)\n* [分布式集群](020_Distributed_Cluster/00_Intro.md)\n   * [空集群](020_Distributed_Cluster/05_Empty_cluster.md)\n   * [集群健康](020_Distributed_Cluster/10_Cluster_health.md)\n   * [添加索引](020_Distributed_Cluster/15_Add_an_index.md)\n   * [故障转移](020_Distributed_Cluster/20_Add_failover.md)\n   * [横向扩展](020_Distributed_Cluster/25_Scale_horizontally.md)\n   * [更多扩展](020_Distributed_Cluster/30_Scale_more.md)\n   * [应对故障](020_Distributed_Cluster/35_Coping_with_failure.md)\n* [数据](030_Data/00_Intro.md)\n   * [文档](030_Data/05_Document.md)\n   * [索引](030_Data/10_Index.md)\n   * [获取](030_Data/15_Get.md)\n   * [存在](030_Data/20_Exists.md)\n   * [更新](030_Data/25_Update.md)\n   * [创建](030_Data/30_Create.md)\n   * [删除](030_Data/35_Delete.md)\n   * [版本控制](030_Data/40_Version_control.md)\n   * [局部更新](030_Data/45_Partial_update.md)\n   * [Mget](030_Data/50_Mget.md)\n   * [批量](030_Data/55_Bulk.md)\n   * [结语](030_Data/60_Conclusion.md)\n* [分布式增删改查](040_Distributed_CRUD/00_Intro.md)\n   * [路由](040_Distributed_CRUD/05_Routing.md)\n   * [分片交互](040_Distributed_CRUD/10_Shard_interaction.md)\n   * [新建、索引和删除](040_Distributed_CRUD/15_Create_index_delete.md)\n   * [检索](040_Distributed_CRUD/20_Retrieving.md)\n   * [局部更新](040_Distributed_CRUD/25_Partial_updates.md)\n   * [批量请求](040_Distributed_CRUD/30_Bulk_requests.md)\n   * [批量格式](040_Distributed_CRUD/35_Bulk_format.md)\n* [搜索](050_Search/00_Intro.md)\n   * [空搜索](050_Search/05_Empty_search.md)\n   * [多索引和多类型](050_Search/10_Multi_index_multi_type.md)\n   * [分页](050_Search/15_Pagination.md)\n   * [查询字符串](050_Search/20_Query_string.md)\n* [映射和分析](052_Mapping_Analysis/00_Intro.md)\n   * [数据类型差异](052_Mapping_Analysis/25_Data_type_differences.md)\n   * [确切值对决全文](052_Mapping_Analysis/30_Exact_vs_full_text.md)\n   * [倒排索引](052_Mapping_Analysis/35_Inverted_index.md)\n   * [分析](052_Mapping_Analysis/40_Analysis.md)\n   * [映射](052_Mapping_Analysis/45_Mapping.md)\n   * [复合类型](052_Mapping_Analysis/50_Complex_datatypes.md)\n* [结构化查询](054_Query_DSL/00_Intro.md)\n   * [请求体查询](054_Query_DSL/55_Request_body_search.md)\n   * [结构化查询](054_Query_DSL/60_Query_DSL.md)\n   * [查询与过滤](054_Query_DSL/65_Queries_vs_filters.md)\n   * [重要的查询子句](054_Query_DSL/70_Important_clauses.md)\n   * [过滤查询](054_Query_DSL/75_Queries_with_filters.md)\n   * [验证查询](054_Query_DSL/80_Validating_queries.md)\n   * [结语](054_Query_DSL/85_Conclusion.md)\n* [排序](056_Sorting/00_Intro.md)\n   * [排序](056_Sorting/85_Sorting.md)\n   * [字符串排序](056_Sorting/88_String_sorting.md)\n   * [相关性](056_Sorting/90_What_is_relevance.md)\n   * [字段数据](056_Sorting/95_Fielddata.md)\n* [分布式搜索](060_Distributed_Search/00_Intro.md)\n   * [查询阶段](060_Distributed_Search/05_Query_phase.md)\n   * [取回阶段](060_Distributed_Search/10_Fetch_phase.md)\n   * [搜索选项](060_Distributed_Search/15_Search_options.md)\n   * [扫描和滚屏](060_Distributed_Search/20_Scan_and_scroll.md)\n* [索引管理](070_Index_Mgmt/00_Intro.md)\n   * [创建删除](070_Index_Mgmt/05_Create_Delete.md)\n   * [设置](070_Index_Mgmt/10_Settings.md)\n   * [配置分析器](070_Index_Mgmt/15_Configure_Analyzer.md)\n   * [自定义分析器](070_Index_Mgmt/20_Custom_Analyzers.md)\n   * [映射](070_Index_Mgmt/25_Mappings.md)\n   * [根对象](070_Index_Mgmt/30_Root_Object.md)\n   * [元数据中的source字段](070_Index_Mgmt/31_Metadata_source.md)\n   * [元数据中的all字段](070_Index_Mgmt/32_Metadata_all.md)\n   * [元数据中的ID字段](070_Index_Mgmt/33_Metadata_ID.md)\n   * [动态映射](070_Index_Mgmt/35_Dynamic_Mapping.md)\n   * [自定义动态映射](070_Index_Mgmt/40_Custom_Dynamic_Mapping.md)\n   * [默认映射](070_Index_Mgmt/45_Default_Mapping.md)\n   * [重建索引](070_Index_Mgmt/50_Reindexing.md)\n   * [别名](070_Index_Mgmt/55_Aliases.md)\n* [深入分片](075_Inside_a_shard/00_Intro.md)\n   * [使文本可以被搜索](075_Inside_a_shard/20_Making_text_searchable.md)\n   * [动态索引](075_Inside_a_shard/30_Dynamic_indices.md)\n   * [近实时搜索](075_Inside_a_shard/40_Near_real_time.md)\n   * [持久化变更](075_Inside_a_shard/50_Persistent_changes.md)\n   * [合并段](075_Inside_a_shard/60_Segment_merging.md)\n* [结构化搜索](080_Structured_Search/00_structuredsearch.md)\n   * [查询准确值](080_Structured_Search/05_term.md)\n   * [组合过滤](080_Structured_Search/10_compoundfilters.md)\n   * [查询多个准确值](080_Structured_Search/15_terms.md)\n   * [包含，而不是相等](080_Structured_Search/20_contains.md)\n   * [范围](080_Structured_Search/25_ranges.md)\n   * [处理 Null 值](080_Structured_Search/30_existsmissing.md)\n   * [缓存](080_Structured_Search/40_bitsets.md)\n   * [过滤顺序](080_Structured_Search/45_filter_order.md)\n* [全文搜索](100_Full_Text_Search/00_Intro.md)\n   * [匹配查询](100_Full_Text_Search/05_Match_query.md)\n   * [多词查询](100_Full_Text_Search/10_Multi_word_queries.md)\n   * [组合查询](100_Full_Text_Search/15_Combining_queries.md)\n   * [布尔匹配](100_Full_Text_Search/20_How_match_uses_bool.md)\n   * [增加子句](100_Full_Text_Search/25_Boosting_clauses.md)\n   * [控制分析](100_Full_Text_Search/30_Controlling_analysis.md)\n   * [关联失效](100_Full_Text_Search/35_Relevance_is_broken.md)\n* [多字段搜索](110_Multi_Field_Search/00_Intro.md)\n   * [多重查询字符串](110_Multi_Field_Search/05_Multiple_query_strings.md)\n   * [单一查询字符串](110_Multi_Field_Search/10_Single_query_string.md)\n   * [最佳字段](110_Multi_Field_Search/15_Best_field.md)\n   * [最佳字段查询调优](110_Multi_Field_Search/20_Tuning_best_field_queries.md)\n   * [多重匹配查询](110_Multi_Field_Search/25_Multi_match_query.md)\n   * [最多字段查询](110_Multi_Field_Search/30_Most_fields.md)\n   * [跨字段对象查询](110_Multi_Field_Search/35_Entity_search.md)\n   * [以字段为中心查询](110_Multi_Field_Search/40_Field_centric.md)\n   * [全字段查询](110_Multi_Field_Search/45_Custom_all.md)\n   * [跨字段查询](110_Multi_Field_Search/50_Cross_field.md)\n   * [精确查询](110_Multi_Field_Search/55_Not_analyzed.md)\n* [模糊匹配](120_Proximity_Matching/00_Intro.md)\n   * [Phrase matching](120_Proximity_Matching/05_Phrase_matching.md)\n   * [Slop](120_Proximity_Matching/10_Slop.md)\n   * [Multi value fields](120_Proximity_Matching/15_Multi_value_fields.md)\n   * [Scoring](120_Proximity_Matching/20_Scoring.md)\n   * [Relevance](120_Proximity_Matching/25_Relevance.md)\n   * [Performance](120_Proximity_Matching/30_Performance.md)\n   * [Shingles](120_Proximity_Matching/35_Shingles.md)\n* [Partial_Matching](130_Partial_Matching/00_Intro.md)\n   * [Postcodes](130_Partial_Matching/05_Postcodes.md)\n   * [Prefix query](130_Partial_Matching/10_Prefix_query.md)\n   * [Wildcard Regexp](130_Partial_Matching/15_WildcardRegexp.md)\n   * [Match phrase prefix](130_Partial_Matching/20_Match_phrase_prefix.md)\n   * [Index time](130_Partial_Matching/25_Index_time.md)\n   * [Ngram intro](130_Partial_Matching/30_Ngram_intro.md)\n   * [Search as you type](130_Partial_Matching/35_Search_as_you_type.md)\n   * [Compound words](130_Partial_Matching/40_Compound_words.md)\n* [Relevance](170_Relevance/05_Intro.md)\n   * [Scoring theory](170_Relevance/10_Scoring_theory.md)\n   * [Practical scoring](170_Relevance/15_Practical_scoring.md)\n   * [Query time boosting](170_Relevance/20_Query_time_boosting.md)\n   * [Query scoring](170_Relevance/25_Query_scoring.md)\n   * [Not quite not](170_Relevance/30_Not_quite_not.md)\n   * [Ignoring TFIDF](170_Relevance/35_Ignoring_TFIDF.md)\n   * [Function score query](170_Relevance/40_Function_score_query.md)\n   * [Popularity](170_Relevance/45_Popularity.md)\n   * [Boosting filtered subsets](170_Relevance/50_Boosting_filtered_subsets.md)\n   * [Random scoring](170_Relevance/55_Random_scoring.md)\n   * [Decay functions](170_Relevance/60_Decay_functions.md)\n   * [Pluggable similarities](170_Relevance/70_Pluggable_similarities.md)\n   * [Conclusion](170_Relevance/80_Conclusion.md)\n* [Language intro](200_Language_intro/00_Intro.md)\n   * [Intro](200_Language_intro/00_Intro.md)\n   * [Using](200_Language_intro/10_Using.md)\n   * [Configuring](200_Language_intro/20_Configuring.md)\n   * [Language pitfalls](200_Language_intro/30_Language_pitfalls.md)\n   * [One language per doc](200_Language_intro/40_One_language_per_doc.md)\n   * [One language per field](200_Language_intro/50_One_language_per_field.md)\n   * [Mixed language fields](200_Language_intro/60_Mixed_language_fields.md)\n   * [Conclusion](200_Language_intro/70_Conclusion.md)\n* [Identifying words](210_Identifying_words/00_Intro.md)\n   * [Intro](210_Identifying_words/00_Intro.md)\n   * [Standard analyzer](210_Identifying_words/10_Standard_analyzer.md)\n   * [Standard tokenizer](210_Identifying_words/20_Standard_tokenizer.md)\n   * [ICU plugin](210_Identifying_words/30_ICU_plugin.md)\n   * [ICU tokenizer](210_Identifying_words/40_ICU_tokenizer.md)\n   * [Tidying text](210_Identifying_words/50_Tidying_text.md)\n* [Token normalization](220_Token_normalization/00_Intro.md)\n   * [Intro](220_Token_normalization/00_Intro.md)\n   * [Lowercasing](220_Token_normalization/10_Lowercasing.md)\n   * [Removing diacritics](220_Token_normalization/20_Removing_diacritics.md)\n   * [Unicode world](220_Token_normalization/30_Unicode_world.md)\n   * [Case folding](220_Token_normalization/40_Case_folding.md)\n   * [Character folding](220_Token_normalization/50_Character_folding.md)\n   * [Sorting and collations](220_Token_normalization/60_Sorting_and_collations.md)\n* [Stemming](230_Stemming/00_Intro.md)\n   * [Intro](230_Stemming/00_Intro.md)\n   * [Algorithmic stemmers](230_Stemming/10_Algorithmic_stemmers.md)\n   * [Dictionary stemmers](230_Stemming/20_Dictionary_stemmers.md)\n   * [Hunspell stemmer](230_Stemming/30_Hunspell_stemmer.md)\n   * [Choosing a stemmer](230_Stemming/40_Choosing_a_stemmer.md)\n   * [Controlling stemming](230_Stemming/50_Controlling_stemming.md)\n   * [Stemming in situ](230_Stemming/60_Stemming_in_situ.md)\n* [Stopwords](240_Stopwords/00_Intro.md)\n   * [Intro](240_Stopwords/10_Intro.md)\n   * [Using stopwords](240_Stopwords/20_Using_stopwords.md)\n   * [Stopwords and performance](240_Stopwords/30_Stopwords_and_performance.md)\n   * [Divide and conquer](240_Stopwords/40_Divide_and_conquer.md)\n   * [Phrase queries](240_Stopwords/50_Phrase_queries.md)\n   * [Common grams](240_Stopwords/60_Common_grams.md)\n   * [Relevance](240_Stopwords/70_Relevance.md)\n* [Synonyms](260_Synonyms/00_Intro.md)\n   * [Intro](260_Synonyms/10_Intro.md)\n   * [Using synonyms](260_Synonyms/20_Using_synonyms.md)\n   * [Synonym formats](260_Synonyms/30_Synonym_formats.md)\n   * [Expand contract](260_Synonyms/40_Expand_contract.md)\n   * [Analysis chain](260_Synonyms/50_Analysis_chain.md)\n   * [Multi word synonyms](260_Synonyms/60_Multi_word_synonyms.md)\n   * [Symbol synonyms](260_Synonyms/70_Symbol_synonyms.md)\n* [Fuzzy matching](270_Fuzzy_matching/00_Intro.md)\n   * [Intro](270_Fuzzy_matching/10_Intro.md)\n   * [Fuzziness](270_Fuzzy_matching/20_Fuzziness.md)\n   * [Fuzzy query](270_Fuzzy_matching/30_Fuzzy_query.md)\n   * [Fuzzy match query](270_Fuzzy_matching/40_Fuzzy_match_query.md)\n   * [Scoring fuzziness](270_Fuzzy_matching/50_Scoring_fuzziness.md)\n   * [Phonetic matching](270_Fuzzy_matching/60_Phonetic_matching.md)\n* [Aggregations](300_Aggregations/00_Intro.md)\n   * [overview](300_Aggregations/05_overview.md)\n   * [circuit breaker fd settings](300_Aggregations/100_circuit_breaker_fd_settings.md)\n   * [filtering](300_Aggregations/105_filtering.md)\n   * [facets](300_Aggregations/10_facets.md)\n   * [docvalues](300_Aggregations/110_docvalues.md)\n   * [eager](300_Aggregations/115_eager.md)\n   * [breadth vs depth](300_Aggregations/120_breadth_vs_depth.md)\n   * [Conclusion](300_Aggregations/125_Conclusion.md)\n   * [concepts buckets](300_Aggregations/15_concepts_buckets.md)\n   * [basic example](300_Aggregations/20_basic_example.md)\n   * [add metric](300_Aggregations/21_add_metric.md)\n   * [nested bucket](300_Aggregations/22_nested_bucket.md)\n   * [extra metrics](300_Aggregations/23_extra_metrics.md)\n   * [bucket metric list](300_Aggregations/28_bucket_metric_list.md)\n   * [histogram](300_Aggregations/30_histogram.md)\n   * [date histogram](300_Aggregations/35_date_histogram.md)\n   * [scope](300_Aggregations/40_scope.md)\n   * [filtering](300_Aggregations/45_filtering.md)\n   * [sorting ordering](300_Aggregations/50_sorting_ordering.md)\n   * [approx intro](300_Aggregations/55_approx_intro.md)\n   * [cardinality](300_Aggregations/60_cardinality.md)\n   * [percentiles](300_Aggregations/65_percentiles.md)\n   * [sigterms intro](300_Aggregations/70_sigterms_intro.md)\n   * [sigterms](300_Aggregations/75_sigterms.md)\n   * [fielddata](300_Aggregations/90_fielddata.md)\n   * [analyzed vs not](300_Aggregations/95_analyzed_vs_not.md)\n* [地理坐标点](310_Geopoints/00_Intro.md)\n   * [地理坐标点](310_Geopoints/20_Geopoints.md)\n   * [通过地理坐标点过滤](310_Geopoints/30_Filter_by_geopoint.md)\n   * [地理坐标盒模型过滤器](310_Geopoints/32_Bounding_box.md)\n   * [地理距离过滤器](310_Geopoints/34_Geo_distance.md)\n   * [缓存地理位置过滤器](310_Geopoints/36_Caching_geofilters.md)\n   * [减少内存占用](310_Geopoints/38_Reducing_memory.md)\n   * [按距离排序](310_Geopoints/50_Sorting_by_distance.md)\n* [Geohashe](320_Geohashes/00_Intro.md)\n   * [Geohashe](320_Geohashes/40_Geohashes.md)\n   * [Geohashe映射](320_Geohashes/50_Geohash_mapping.md)\n   * [Geohash单元过滤器](320_Geohashes/60_Geohash_cell_filter.md)\n* [地理位置聚合](330_Geo_aggs/00_Intro.md)\n   * [地理位置聚合](330_Geo_aggs/60_Geo_aggs.md)\n   * [按距离聚合](330_Geo_aggs/62_Geo_distance_agg.md)\n   * [Geohash单元聚合器](330_Geo_aggs/64_Geohash_grid_agg.md)\n   * [范围（边界）聚合器](330_Geo_aggs/66_Geo_bounds_agg.md)\n* [地理形状](340_Geoshapes/00_Intro.md)\n   * [地理形状](340_Geoshapes/70_Geoshapes.md)\n   * [映射地理形状](340_Geoshapes/72_Mapping_geo_shapes.md)\n   * [索引地理形状](340_Geoshapes/74_Indexing_geo_shapes.md)\n   * [查询地理形状](340_Geoshapes/76_Querying_geo_shapes.md)\n   * [在查询中使用已索引的形状](340_Geoshapes/78_Indexed_geo_shapes.md)\n   * [地理形状的过滤与缓存](340_Geoshapes/80_Caching_geo_shapes.md)\n* [关系](400_Relationships/10_Intro.md)\n   * [关系](400_Relationships/10_Intro.md)\n   * [应用级别的Join操作](400_Relationships/15_Application_joins.md)\n   * [扁平化你的数据](400_Relationships/20_Denormalization.md)\n   * [Top hits](400_Relationships/22_Top_hits.md)\n   * [Concurrency](400_Relationships/25_Concurrency.md)\n   * [Concurrency solutions](400_Relationships/26_Concurrency_solutions.md)\n* [嵌套](402_Nested/00_Intro.md)\n   * [嵌套对象](402_Nested/30_Nested_objects.md)\n   * [嵌套映射](402_Nested/31_Nested_mapping.md)\n   * [嵌套查询](402_Nested/32_Nested_query.md)\n   * [嵌套排序](402_Nested/33_Nested_sorting.md)\n   * [嵌套集合](402_Nested/35_Nested_aggs.md)\n* [Parent Child](404_Parent_Child/00_Intro.md)\n   * [Parent child](404_Parent_Child/40_Parent_child.md)\n   * [Indexing parent child](404_Parent_Child/45_Indexing_parent_child.md)\n   * [Has child](404_Parent_Child/50_Has_child.md)\n   * [Has parent](404_Parent_Child/55_Has_parent.md)\n   * [Children agg](404_Parent_Child/60_Children_agg.md)\n   * [Grandparents](404_Parent_Child/65_Grandparents.md)\n   * [Practical considerations](404_Parent_Child/70_Practical_considerations.md)\n* [Scaling](410_Scaling/10_Intro.md)\n   * [Shard](410_Scaling/15_Shard.md)\n   * [Overallocation](410_Scaling/20_Overallocation.md)\n   * [Kagillion shards](410_Scaling/25_Kagillion_shards.md)\n   * [Capacity planning](410_Scaling/30_Capacity_planning.md)\n   * [Replica shards](410_Scaling/35_Replica_shards.md)\n   * [Multiple indices](410_Scaling/40_Multiple_indices.md)\n   * [Index per timeframe](410_Scaling/45_Index_per_timeframe.md)\n   * [Index templates](410_Scaling/50_Index_templates.md)\n   * [Retiring data](410_Scaling/55_Retiring_data.md)\n   * [Index per user](410_Scaling/60_Index_per_user.md)\n   * [Shared index](410_Scaling/65_Shared_index.md)\n   * [Faking it](410_Scaling/70_Faking_it.md)\n   * [One big user](410_Scaling/75_One_big_user.md)\n   * [Scale is not infinite](410_Scaling/80_Scale_is_not_infinite.md)\n* [Cluster Admin](500_Cluster_Admin/00_Intro.md)\n   * [Marvel](500_Cluster_Admin/15_Marvel.md)\n   * [Health](500_Cluster_Admin/20_Health.md)\n   * [Node stats](500_Cluster_Admin/30_Node_stats.md)\n   * [Other stats](500_Cluster_Admin/40_Other_stats.md)\n* [Deployment](510_Deployment/10_Intro.md)\n   * [hardware](510_Deployment/20_hardware.md)\n   * [other](510_Deployment/30_other.md)\n   * [config](510_Deployment/40_config.md)\n   * [dont touch](510_Deployment/45_dont_touch.md)\n   * [heap](510_Deployment/50_heap.md)\n   * [file descriptors](510_Deployment/60_file_descriptors.md)\n   * [conclusion](510_Deployment/70_conclusion.md)\n   * [cluster settings](510_Deployment/80_cluster_settings.md)\n* [Post Deployment](520_Post_Deployment/00_Intro.md)\n   * [dynamic settings](520_Post_Deployment/10_dynamic_settings.md)\n   * [logging](520_Post_Deployment/20_logging.md)\n   * [indexing perf](520_Post_Deployment/30_indexing_perf.md)\n   * [rolling restart](520_Post_Deployment/40_rolling_restart.md)\n   * [backup](520_Post_Deployment/50_backup.md)\n   * [restore](520_Post_Deployment/60_restore.md)\n   * [conclusion](520_Post_Deployment/70_conclusion.md)\n"
        },
        {
          "name": "TOC.md",
          "type": "blob",
          "size": 7.1083984375,
          "content": "\n* [入门](010_Intro/00_README.md)\n   * [是什么](010_Intro/05_What_is_it.md)\n   * [安装](010_Intro/10_Installing_ES.md)\n   * [API](010_Intro/15_API.md)\n   * [文档](010_Intro/20_Document.md)\n   * [索引](010_Intro/25_Tutorial_Indexing.md)\n   * [搜索](010_Intro/30_Tutorial_Search.md)\n   * [聚合](010_Intro/35_Tutorial_Aggregations.md)\n   * [小结](010_Intro/40_Tutorial_Conclusion.md)\n   * [分布式](010_Intro/45_Distributed.md)\n   * [结语](010_Intro/50_Conclusion.md)\n* [分布式集群](020_Distributed_Cluster/00_Intro.md)\n   * [空集群](020_Distributed_Cluster/05_Empty_cluster.md)\n   * [集群健康](020_Distributed_Cluster/10_Cluster_health.md)\n   * [添加索引](020_Distributed_Cluster/15_Add_an_index.md)\n   * [故障转移](020_Distributed_Cluster/20_Add_failover.md)\n   * [横向扩展](020_Distributed_Cluster/25_Scale_horizontally.md)\n   * [更多扩展](020_Distributed_Cluster/30_Scale_more.md)\n   * [应对故障](020_Distributed_Cluster/35_Coping_with_failure.md)\n* [数据](030_Data/00_Intro.md)\n   * [文档](030_Data/05_Document.md)\n   * [索引](030_Data/10_Index.md)\n   * [获取](030_Data/15_Get.md)\n   * [存在](030_Data/20_Exists.md)\n   * [更新](030_Data/25_Update.md)\n   * [创建](030_Data/30_Create.md)\n   * [删除](030_Data/35_Delete.md)\n   * [版本控制](030_Data/40_Version_control.md)\n   * [局部更新](030_Data/45_Partial_update.md)\n   * [Mget](030_Data/50_Mget.md)\n   * [批量](030_Data/55_Bulk.md)\n   * [结语](030_Data/60_Conclusion.md)\n* [分布式增删改查](040_Distributed_CRUD/00_Intro.md)\n   * [路由](040_Distributed_CRUD/05_Routing.md)\n   * [分片交互](040_Distributed_CRUD/10_Shard_interaction.md)\n   * [新建、索引和删除](040_Distributed_CRUD/15_Create_index_delete.md)\n   * [检索](040_Distributed_CRUD/20_Retrieving.md)\n   * [局部更新](040_Distributed_CRUD/25_Partial_updates.md)\n   * [批量请求](040_Distributed_CRUD/30_Bulk_requests.md)\n   * [批量格式](040_Distributed_CRUD/35_Bulk_format.md)\n* [搜索](050_Search/00_Intro.md)\n   * [空搜索](050_Search/05_Empty_search.md)\n   * [多索引和多类型](050_Search/10_Multi_index_multi_type.md)\n   * [分页](050_Search/15_Pagination.md)\n   * [查询字符串](050_Search/20_Query_string.md)\n* [映射和分析](052_Mapping_Analysis/00_Intro.md)\n   * [数据类型差异](052_Mapping_Analysis/25_Data_type_differences.md)\n   * [确切值对决全文](052_Mapping_Analysis/30_Exact_vs_full_text.md)\n   * [倒排索引](052_Mapping_Analysis/35_Inverted_index.md)\n   * [分析](052_Mapping_Analysis/40_Analysis.md)\n   * [映射](052_Mapping_Analysis/45_Mapping.md)\n   * [复合类型](052_Mapping_Analysis/50_Complex_datatypes.md)\n* [结构化查询](054_Query_DSL/00_Intro.md)\n   * [请求体查询](054_Query_DSL/55_Request_body_search.md)\n   * [结构化查询](054_Query_DSL/60_Query_DSL.md)\n   * [查询与过滤](054_Query_DSL/65_Queries_vs_filters.md)\n   * [重要的查询子句](054_Query_DSL/70_Important_clauses.md)\n   * [过滤查询](054_Query_DSL/75_Queries_with_filters.md)\n   * [验证查询](054_Query_DSL/80_Validating_queries.md)\n   * [结语](054_Query_DSL/85_Conclusion.md)\n* [排序](056_Sorting/00_Intro.md)\n   * [排序](056_Sorting/85_Sorting.md)\n   * [字符串排序](056_Sorting/88_String_sorting.md)\n   * [相关性](056_Sorting/90_What_is_relevance.md)\n   * [字段数据](056_Sorting/95_Fielddata.md)\n* [分布式搜索](060_Distributed_Search/00_Intro.md)\n   * [查询阶段](060_Distributed_Search/05_Query_phase.md)\n   * [取回阶段](060_Distributed_Search/10_Fetch_phase.md)\n   * [搜索选项](060_Distributed_Search/15_Search_options.md)\n   * [扫描和滚屏](060_Distributed_Search/20_Scan_and_scroll.md)\n* [索引管理](070_Index_Mgmt/00_Intro.md)\n   * [创建删除](070_Index_Mgmt/05_Create_Delete.md)\n   * [设置](070_Index_Mgmt/10_Settings.md)\n   * [配置分析器](070_Index_Mgmt/15_Configure_Analyzer.md)\n   * [自定义分析器](070_Index_Mgmt/20_Custom_Analyzers.md)\n   * [映射](070_Index_Mgmt/25_Mappings.md)\n   * [根对象](070_Index_Mgmt/30_Root_Object.md)\n   * [元数据中的source字段](070_Index_Mgmt/31_Metadata_source.md)\n   * [元数据中的all字段](070_Index_Mgmt/32_Metadata_all.md)\n   * [元数据中的ID字段](070_Index_Mgmt/33_Metadata_ID.md)\n   * [动态映射](070_Index_Mgmt/35_Dynamic_Mapping.md)\n   * [自定义动态映射](070_Index_Mgmt/40_Custom_Dynamic_Mapping.md)\n   * [默认映射](070_Index_Mgmt/45_Default_Mapping.md)\n   * [重建索引](070_Index_Mgmt/50_Reindexing.md)\n   * [别名](070_Index_Mgmt/55_Aliases.md)\n* [深入分片](075_Inside_a_shard/00_Intro.md)\n   * [使文本可以被搜索](075_Inside_a_shard/20_Making_text_searchable.md)\n   * [动态索引](075_Inside_a_shard/30_Dynamic_indices.md)\n   * [近实时搜索](075_Inside_a_shard/40_Near_real_time.md)\n   * [持久化变更](075_Inside_a_shard/50_Persistent_changes.md)\n   * [合并段](075_Inside_a_shard/60_Segment_merging.md)\n* [结构化搜索](080_Structured_Search/00_structuredsearch.md)\n   * [查询准确值](080_Structured_Search/05_term.md)\n   * [组合过滤](080_Structured_Search/10_compoundfilters.md)\n   * [查询多个准确值](080_Structured_Search/15_terms.md)\n   * [包含，而不是相等](080_Structured_Search/20_contains.md)\n   * [范围](080_Structured_Search/25_ranges.md)\n   * [处理 Null 值](080_Structured_Search/30_existsmissing.md)\n   * [缓存](080_Structured_Search/40_bitsets.md)\n   * [过滤顺序](080_Structured_Search/45_filter_order.md)\n* [地理坐标点](310_Geopoints/00_Intro.md)\n   * [地理坐标点](310_Geopoints/20_Geopoints.md)\n   * [通过地理坐标点过滤](310_Geopoints/30_Filter_by_geopoint.md)\n   * [地理坐标盒模型过滤器](310_Geopoints/32_Bounding_box.md)\n   * [地理距离过滤器](310_Geopoints/34_Geo_distance.md)\n   * [缓存地理位置过滤器](310_Geopoints/36_Caching_geofilters.md)\n   * [减少内存占用](310_Geopoints/38_Reducing_memory.md)\n   * [按距离排序](310_Geopoints/50_Sorting_by_distance.md)\n* [Geohashe](320_Geohashes/00_Intro.md)\n   * [Geohashe](320_Geohashes/40_Geohashes.md)\n   * [Geohashe映射](320_Geohashes/50_Geohash_mapping.md)\n   * [Geohash单元过滤器](320_Geohashes/60_Geohash_cell_filter.md)\n* [地理位置聚合](330_Geo_aggs/00_Intro.md)\n   * [地理位置聚合](330_Geo_aggs/60_Geo_aggs.md)\n   * [按距离聚合](330_Geo_aggs/62_Geo_distance_agg.md)\n   * [Geohash单元聚合器](330_Geo_aggs/64_Geohash_grid_agg.md)\n   * [范围（边界）聚合器](330_Geo_aggs/66_Geo_bounds_agg.md)\n* [地理形状](340_Geoshapes/00_Intro.md)\n   * [地理形状](340_Geoshapes/70_Geoshapes.md)\n   * [映射地理形状](340_Geoshapes/72_Mapping_geo_shapes.md)\n   * [索引地理形状](340_Geoshapes/74_Indexing_geo_shapes.md)\n   * [查询地理形状](340_Geoshapes/76_Querying_geo_shapes.md)\n   * [在查询中使用已索引的形状](340_Geoshapes/78_Indexed_geo_shapes.md)\n   * [地理形状的过滤与缓存](340_Geoshapes/80_Caching_geo_shapes.md)\n* [嵌套](402_Nested/00_Intro.md)\n   * [嵌套对象](402_Nested/30_Nested_objects.md)\n   * [嵌套映射](402_Nested/31_Nested_mapping.md)\n   * [嵌套查询](402_Nested/32_Nested_query.md)\n   * [嵌套排序](402_Nested/33_Nested_sorting.md)\n   * [嵌套集合](402_Nested/35_Nested_aggs.md)"
        },
        {
          "name": "config.json",
          "type": "blob",
          "size": 0.2119140625,
          "content": "{\r\n    \"name\": \"Elasticsearch 权威指南（中文版）\",\r\n    \"introduction\": \"Elasticsearch 权威指南的中文译本。\",\r\n    \"path\": {\r\n        \"toc\": \"TOC.md\",\r\n        \"readme\": \"README_Wiki.md\"  \r\n    }\r\n}"
        },
        {
          "name": "cover.jpg",
          "type": "blob",
          "size": 291.7470703125,
          "content": null
        },
        {
          "name": "cover.psd",
          "type": "blob",
          "size": 12016.8603515625,
          "content": ""
        },
        {
          "name": "cover",
          "type": "tree",
          "content": null
        },
        {
          "name": "cover_small.jpg",
          "type": "blob",
          "size": 14.15625,
          "content": null
        },
        {
          "name": "images",
          "type": "tree",
          "content": null
        },
        {
          "name": "push.sh",
          "type": "blob",
          "size": 0.1083984375,
          "content": "#!/bin/bash\n\necho 'Push to origin master'\ngit push origin master\necho 'Push to osc master'\ngit push osc master\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 0.0517578125,
          "content": "#!/bin/bash\n\n# pull\ngit pull origin master\n\n./push.sh"
        }
      ]
    }
  ]
}