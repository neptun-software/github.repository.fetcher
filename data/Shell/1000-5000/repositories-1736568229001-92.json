{
  "metadata": {
    "timestamp": 1736568229001,
    "page": 92,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEwMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "WSA-Community/WSAGAScript",
      "stars": 3591,
      "defaultBranch": "main",
      "files": [
        {
          "name": "#GAPPS",
          "type": "tree",
          "content": null
        },
        {
          "name": "#IMAGES",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.1826171875,
          "content": "This is free and unencumbered software released into the public domain.\n\nAnyone is free to copy, modify, publish, use, compile, sell, or\ndistribute this software, either in source code form or as a compiled\nbinary, for any purpose, commercial or non-commercial, and by any\nmeans.\n\nIn jurisdictions that recognize copyright laws, the author or authors\nof this software dedicate any and all copyright interest in the\nsoftware to the public domain. We make this dedication for the benefit\nof the public at large and to the detriment of our heirs and\nsuccessors. We intend this dedication to be an overt act of\nrelinquishment in perpetuity of all present and future rights to this\nsoftware under copyright law.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR\nOTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,\nARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR\nOTHER DEALINGS IN THE SOFTWARE.\n\nFor more information, please refer to <https://unlicense.org>\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 15.498046875,
          "content": "# [WSA GApps Script](https://github.com/WSA-Community/WSAGAScript)\n\n\n<p align=\"center\">\n  <a href=\"#required-warnings\">Required Warnings</a> •\n  <a href=\"#youtube-tutorial\">YouTube Tutorial</a> •\n  <a href=\"#installation-procedure\">Installation procedure</a> •\n  <a href=\"#uninstallation-procedure\">Uninstallation procedure</a> •\n  <a href=\"#gaining-root-access\">Gaining Root Access</a> •\n  <a href=\"https://t.me/WSA_Community\">Telegram Group</a>\n</p>\n\n# Required Warnings\n## This project is Work-In-Progress\n\nThis project is being updated without schedule (though frequently). This README might not be completely clear right now, it will be fixed ASAP.\n\nAs for potential questions - please open Discussions instead of Issues.  \nIssues are needed in cases if you have an **actual** issue that **prevents** you from **using** this project.\n\n## Legal Warnings\n\nBy using the tools (scripts, but not limited to) provided by this project, you agree with the terms of [Unlicense License](https://github.com/WSA-Community/WSAGAScript/blob/main/LICENSE), which states that \"THE SOFTWARE IS PROVIDED \"AS IS\"\".\n\nTo end user this serves as a warning, though we currently don't have any explicit confirmations - such way of installing Google Services and Google Play Store may potentially be in a legal gray area.\n\n## Copyright notices\n\nAny product or trademark referenced in this document (or project as whole) belongs to their respective owners. No copyright infringement is intended.\n\n# YouTube Tutorial\n\nAs a temporary measure and additional information (especially if README remains unclear, [@ADeltaX](https://github.com/ADeltaX) provides a video-tutorial hosted on YouTube \n\n<p align=\"center\">\n\n[![How to install Google Apps (Play Store) on WSA (Windows Subsystem Android)](http://img.youtube.com/vi/rIt00xDp0tM/0.jpg)](http://www.youtube.com/watch?v=rIt00xDp0tM 'How to install Google Apps (Play Store) on WSA (Windows Subsystem Android)')\n\n</p>\n\n*Click on the image to see the video*\n\n# Installation procedure\n\n## Install Windows Subsystem for Linux (Version 2)\n\n### Q & A for WSL Installation\nIf you have never used WSL, please do check the following:\n\n- You must be running Windows 10 version 2004 and higher (Build 19041 and higher) or Windows 11\n\nFastest way to check your build version is to run `winver` command in Windows Search or via \"Run...\" (Right-click the Start button to access \"Run...\")\n\n- Why do I need that \"WSL\"?\n\nBecause of the way Android as an operating system is built - specific tools to do the modifications that we are doing are only available on Linux-based OSes. The fastest way to get access to these tools is via WSL.\n\n### How to install WSL\n\n- Open Windows PowerShell as an Administrator\n- Run `wsl --install`: this will install Ubuntu 20.04 LTS in WSL (Version 2) and all necessary components required to run as it is default (this is recommended)\n\nYour PC may restart several times when downloading and installing required components.\nAfter that - follow installation wizard instructions to proceed. If you have any questions, official documentation from Microsoft for WSL will help you.\n\n- Check with `wsl --list --verbose` to be sure that you have a Linux Distro installed with WSL2 version. If for some reason you have receieved WSL1 kernel (or you have trouble running this command in general) - follow instructions in the section below to perform conversion.\n\n[Microsoft Docs: Installing WSL](https://docs.microsoft.com/en-us/windows/wsl/install) \n\n[Microsoft Docs: Set up and best practices](https://docs.microsoft.com/en-us/windows/wsl/setup/environment)\n\n### How to convert WSL1 to WSL2 (and manual installation)\n\nIf you have trouble installing WSL2 with `wsl --install` in general - follow this instruction from Microsoft.\n\n[Microsoft Docs: Manual installation steps for older versions of WSL](https://docs.microsoft.com/en-us/windows/wsl/install-manual)\n\nIf you have already used WSL, have trouble installing with `wsl --install` or for some reason have received a WSL1 version installation, this section is for you.\n\nFollow these steps:\n\n- Download WSL2 kernel for manual installation. Use the Microsoft Docs link above (Manual Installation) and check Step 4 to receive the kernel package.\n- Open Windows PowerShell as Administrator and run:\n  - `wsl --shutdown` to stop all WSL related processes (if any are running).\n- Install the kernel package from the step above.\n- Return to Windows PowerShell and run:\n  - `wsl --list --verbose` to get your installed distribution name. In case of Ubuntu, it most likely will look like `Ubuntu-20.04`.\n  - `wsl --set-version <distribution name> 2`, replace <distribution name> with the one that you have.\n  - Optional: if you would like to automatically install only WSL2 version builds in future. `wsl --set-default-version 2`. To be sure about the difference, check [Microsoft Docs: WSL - Compare versions](https://docs.microsoft.com/en-us/windows/wsl/compare-versions)\n\n## Install unzip, lzip\n\nFor now, we are assuming that you have went with default installation (Ubuntu), terminal commands will be provided for Ubuntu. Commands provided for the most part will work for other Linux Distributions but there may be some that use other package managers. Check how to correctly install applications for your chosen distribution on the internet.\n\nRun following in the **WSL Terminal** (If you are unsure what is WSL Terminal, refer to the video, Microsoft Docs, or search Ubuntu in your start menu to be sure):\n\n**Attention!** For new users who have never used Linux Terminals - when you are being asked for your password (which you've set up when installed WSL) - it will **NOT** be displayed in the terminal as part of security measures. You should enter it blindly and then press enter. If password was entered incorrectly system will give you two more attempts, after which you will need to run the command again and try entering password again.\n\n```\nsudo apt update\nsudo apt install unzip lzip\n```\nWe have checked availability of updates and requested installation of two packages which are required for execution of scripts provided by this project. They may be already present at your installation, but it is better to check anyway.\n\n## Prepare folder structure\n\nFor the sake of simplicity, create a folder in the root of C Drive, so you will have `C:\\WSA\\`. You may use other location if you would like, be sure to adjust commands below for new location.\n\n**Attention!** The folder where you will place the files which we will be downloading is going to become an installation folder. **DO NOT** delete that folder!  \n**Attention!** At the time of last update for this README, attempt to run scripts if they are located in path that contains spaces (like \"Zulu Storage\" in `D:\\Zulu Storage\\WSA`) will result in an error. Be sure to use paths with no spaces as long as fix have not been implemented.\n\nHint: You can also open any folder (even those that are located within Linux WSL Filesystem, by typing `explorer.exe .` (Yes, with the dot) in the WSL Terminal, to move files around.\n\n## Download Windows Subsystem for Android™️ Installation Package\n\n### Download\nAs we need to modify installation files,  we cannot download WSA from the Microsoft Store. To download it directly we will use this [service](https://store.rg-adguard.net/)\n\nUse settings:\n- ProductID: 9P3395VX91NR\n- Ring: Fast\n\nClick the checkmark, and locate file which has size of approx. ~1.3GB (usually at the bottom of the page) and has `.msixbundle` extension.\n\nClick the filename to begin downloading (or copy the download link). You may be warned by your web-browser that \"The file cannot be downloaded securely\". Disregard the warning and force the download (use buttons like \"Keep anyway\" or similar, depending on your web-browser)\n\nSave the file at our prepared directory `C:\\WSA\\`\n\n### Extract\n- Download 7zip or a similar archival program and use it to extract downloaded file. Do not mind that this file does not bear any archival extensions (like .zip).\n- After extraction open `C:\\WSA\\MicrosoftCorporationII.WindowsSubsystemForAndroid_versionnumber_neutral___identifier\\`. This folder will contain a lot of `.msix` files, use \"Sort by size\" to locate two biggest files. \n- Extract the one that is valid for your architecture, like this one `WsaPackage_1.8.32822.0_x64_Release-Nightly.msix`\n- Open the extracted folder\n- Locate and delete files `AppxBlockMap.xml`, `AppxSignature.p7x` and `[Content_Types].xml`\n- Locate and delete `AppxMetadata` folder\n\nDo not close this folder - we will return here to collect \\*.img files. \n\n## Download \"GApps\" via OpenGApps Project\n\nTo install Play Store, we need to get it from somewhere. Use [OpenGApps](https://opengapps.org/).\n\nUse settings:\n- Platform: x86_64 if you are running Windows on a traditional laptop/PC, otherwise choose ARM64\n- Android: 11.0\n- Variant: Pico (at the time of writing this README, only minimal functionality with Pico variant have been confirmed working).\n\nFor the time being save the .zip file at `C:\\WSA\\gapps-zip-file-name.zip`. Do **not** extract it.\n\n## Clone this repository and populate the directories\n\nAs we have used `C:\\WSA`, you will be able to use Windows Explorer to move files around.\n\n*Reminder: commands provided are for Ubuntu*\n\n**Attention!** To be sure that you can access your Windows filesystem from inside of WSL, you can run `cd FolderName` to change to another directory and `ls` to list what files and folders you have there. Typically, Windows Filesystem is available by \"/mnt/$DriveLetter/\", so `/mnt/c/Users` will be your Windows `C:\\Users`\n\n```bash\ncd /mnt/c/WSA\ngit clone https://github.com/WSA-Community/WSAGAScript\n```\nWait for the command to finish running.\n\nAt the **Extract** step (in Download Windows Subsystem for Android™️ Installation Package) of this Guide we have got a folder that contains four \\*.img files which are *product*, *system*, *system_ext* and *vendor*. Move those files into `C:\\WSA\\WSAGAScript\\#IMAGES`\n\nThen issuing `ls /mnt/c/WSA/WSAGAScript/\\#IMAGES` via WSL terminal should give the list of the following files:\n\n```\nproduct.img  system_ext.img  system.img  vendor.img\n```\n\nWe also have `C:\\WSA\\gapps-zip-file-name.zip`. Copy this .zip file into `C:\\WSA\\WSAGAScript\\#GAPPS`. Do not **extract** it, just move the file.\n\nIssuing `ls /mnt/c/WSA/WSAGAScript/\\#GAPPS` via WSL terminal, you should get something similar to the following:\n\n```\nopen_gapps-x86_64-11.0-pico-20220503.zip  output  product_output\n```\n\n## Final preparations\n\n### Change architecture\n\nIf you are using this project on a device with ARM architecture (e.g., Qualcomm Snapdragon), please edit `VARIABLES.sh` and set the correct architecture. Hint is in the file.\n\n### Set executable permissions for the scripts\n\nYou should still be in the same directory within the WSL Terminal, if not use `cd /mnt/c/WSA/WSAGAScript` to get back.\nSet executable permissions for the scripts:\n\n```bash\nchmod +x *.sh\n```\n\nVerify that your scripts are executable by running `ls -l` and checking that you have `-rwxrwxrwx` at the start of lines that contain files: `VARIABLES.sh`, `apply.sh`, `extend_and_mount_images.sh`, `extract_gapps_pico.sh`, `unmount_images.sh`.\n\n## Running the scripts\n\nMake sure you're in the same directory as in the step before, the run:\n\n```bash\n./extract_gapps_pico.sh\nsudo ./extend_and_mount_images.sh\nsudo ./apply.sh\nsudo ./unmount_images.sh\n```\n\n## Copy the edited images\n\nAfter successful execution, you can now copy edited images from `C:\\WSA\\WSAGAScript\\#IMAGES` back to `C:\\WSA\\MicrosoftCorporationII.WindowsSubsystemForAndroid_1.8.32822.0_neutral___8wekyb3d8bbwe\\WsaPackage_1.8.32822.0_x64_Release-Nightly` (example, the folder from where you have taken the images).\n\n## Registering the edited Windows Subsystem for Android™️ Installation Package\n\n- Use Windows Search to find \"Developer Settings\", when PC Settings app opens, enable \"Developer Mode\" on that page.\n- Uninstall any other installed versions of WSA (if you had any, uninstall exactly the main WSA app, all Android apps that have been added to Start Menu will be removed automatically)\n- Open Windows PowerShell as Administrator and run `Add-AppxPackage -Register path-to-extracted-msix\\AppxManifest.xml`\n\nWhere `path-to-extracted-msix`, use path from \"Copy the edited images\" section (right above) as example.\n\nWSA will install with GApps, **make sure to sign in to Play Store and install \"Android System WebView\"** or most apps will crash without that component.\n\n# Uninstallation procedure\n\n- Locate Windows Subsystem for Android™️ in your Start Menu, right-click, uninstall. This will uninstall Android and all Android Apps will vanish from Start as they are just shortcuts wired in from the WSA. You don't need to uninstall all Android Apps one-by-one beforehand.\n- Locate the directory where you have placed the files (in the example of this README it would be `C:\\WSA`) - remove it.\n\nDone.\n\n# Gaining Root Access\n\nYou can get root access by replacing the kernel. (This step is no longer required to sign in GApps.)\n\n## (ADB SHELL ROOT WITH su)\n\nCopy the kernel file from this repo (in `misc` folder) and replace the kernel file inside the `Tools` folder of your extracted msix (make sure WSA is not running, use Stop button inside WSA Settings, and close settings).\n\nKernel files inside `misc` are named for their respective architectures, do not forget to rename the file you took to `kernel` before placing it back into `Tools`.\n\nThis will allow you to use `su` inside the `adb shell`.\nEnter into the `adb shell` and run the following commands:\n\n```bash\nsu\n```\n\nYou are now root.\n\n# Procedure to add files to WSA\n\nIt is possible to add files to WSA (Windows Sybsystem for Android) through WSL. As an example, we will install [busybox](https://busybox.net/) and *bash*.\n\nFirst, turn off WSA:\n- Open *Windows Sybsystem for Android Settings*\n- Turn off Windows Sybsystem for Android (press *Turn off*)\n\nThen open a WSL terminal:\n\n```bash\ncd /mnt/d/WSA/...MicrosoftCorporationII.WindowsSubsystemForAndroid_versionnumber_neutral___identifier...\n\n# Temporarily extend the \"system\" filesystem to allow adding things\ne2fsck -f system.img\nsudo resize2fs system.img 1280M\n\n# Mount \"system\" in read-write\nsudo mount system.img /mnt/system\n```\n\n## Example to add busybox and bash\n\nCheck the most recent [binaries for x86_64-linux](https://busybox.net/downloads/binaries/); at the time of writing: https://busybox.net/downloads/binaries/1.35.0-x86_64-linux-musl/\n\n```bash\ncd /mnt/system/system\nsudo mkdir xbin\ncd xbin\nsudo wget https://busybox.net/downloads/binaries/1.35.0-x86_64-linux-musl/busybox\nsudo chmod 755 busybox\nfor i in `./busybox --list`; do sudo ln busybox \"$i\"; done\n\n# We will use the debian bash executable\nsudo mkdir temp\ncd temp\nsudo wget http://http.us.debian.org/debian/pool/main/b/bash/bash-static_5.1-2+b3_i386.deb\nsudo dpkg-deb -R bash-static_5.1-2+b3_i386.deb tmp\nsudo chmod 755 tmp/bin/bash-static\nsudo cp tmp/bin/bash-static ..\ncd ..\nsudo rm -r temp\n\n# Yet another bash executable...\nsudo wget https://github.com/robxu9/bash-static/releases/download/5.1.016-1.2.3/bash-linux-x86_64\nsudo chmod 755 bash-linux-x86_64\n\n# Unmount system filesystem\ncd\nsudo umount /mnt/system\n\n# Shrink the system filesystem to minimize its size as much as possible\ne2fsck -f system.img\nsudo resize2fs -M system.img\n```\n\n## Testing the installation\n\nStart *Windows Sybsystem for Android* (e.g., open *Windows Sybsystem for Android Settings* and press the button close to *Files*).\n\nOpen a *CMD* with path to *adb*.\n\n```cmd\nadb connect 127.0.0.1:58526\nadb shell\nsu\nexport PATH=$PATH:/system/xbin\ntype vi\n```\n\n# Kernel source\n\n- [WSA-Community/WSA-Linux-Kernel](https://github.com/WSA-Community/WSA-Linux-Kernel)\n\n# Currently known issues\n\n- [Issues](https://github.com/WSA-Community/WSAGAScript/issues)\n"
        },
        {
          "name": "VARIABLES.sh",
          "type": "blob",
          "size": 0.5830078125,
          "content": "#!/bin/bash\n\n# Modify your variables here to corretly reference your directory and subdir\nRoot=\"$(pwd)\"\n\n# Your Windows architecture, x64 or arm64\nArchitecture=\"x64\"\n\nMiscRoot=\"$Root/misc\"\nPropRoot=\"$MiscRoot/prop/$Architecture\"\n\nGAppsRoot=\"$Root/#GAPPS\"\nGAppsOutputFolder=\"$GAppsRoot/output\"\nGAppsExtractFolder=\"$GAppsRoot/extract\"\nGAppsTmpFolder=\"$GAppsRoot/tmp\"\n\nImagesRoot=\"$Root/#IMAGES\"\nMountPointProduct=\"/mnt/product\"\nMountPointSystemExt=\"/mnt/system_ext\"\nMountPointSystem=\"/mnt/system\"\nMountPointVendor=\"/mnt/vendor\"\n\nInstallPartition=\"/mnt/system\"\nInstallDir=\"$InstallPartition/system\"\n\n"
        },
        {
          "name": "apply.sh",
          "type": "blob",
          "size": 8.9287109375,
          "content": "#!/bin/bash\n\n. ./VARIABLES.sh\n\nTARGET_PRODUCT=\"redfin\"\nTARGET_DEVICE=\"redfin\"\nPRODUCT_BRAND=\"google\"\nPRODUCT_MODEL=\"Pixel 5\"\nPRODUCT_MANUFACTURER=\"Google\"\n\n# Remove a property from a file, \n# then append the property with provided value\n# if the property is present before\nremove_append() {\n    if grep -q -e \"^$1=\" $3; then\n        sed -i \"/^$1=/ d\" $3\n        echo \"$1=$2\" >> $3\n    fi\n}\n\n# Get the value of a property from a file\nget_prop() {\n    grep \"^$1=\" $2 | cut -d'=' -f2\n}\n\n# Fix properties\nfix_prop() {\n    COMMENT=\"# extra prop added by WSAGASCRIPT\"\n\n    echo \"-> fixing $1\"\n    echo \"$COMMENT\" >> $2\n\n    remove_append \"ro.product.$1.brand\" \"$PRODUCT_BRAND\" $2\n    remove_append \"ro.product.$1.device\" \"$TARGET_DEVICE\" $2\n    remove_append \"ro.product.$1.manufacturer\" \"$PRODUCT_MANUFACTURER\" $2\n    remove_append \"ro.product.$1.model\" \"$PRODUCT_MODEL\" $2\n    remove_append \"ro.product.$1.name\" \"$TARGET_PRODUCT\" $2\n    remove_append \"ro.build.product\" \"$TARGET_DEVICE\" $2\n\n    BUILD_NUMBER=$(get_prop \"ro.$1.build.version.incremental\" $2)\n    BUILD_ID=$(get_prop \"ro.$1.build.id\" $2)\n    BUILD_TYPE=$(get_prop \"ro.$1.build.type\" $2)\n    BUILD_TAGS=$(get_prop \"ro.$1.build.tags\" $2)\n    PLATFORM_VERSION=$(get_prop \"ro.$1.build.version.release\" $2)\n    TARGET_BUILD_VARIANT=$(get_prop \"ro.$1.build.type\" $2)\n    BUILD_VERSION_TAGS=$(get_prop \"ro.$1.build.tags\" $2)\n\n    BUILD_FLAVOR=\"$TARGET_PRODUCT-$TARGET_BUILD_VARIANT\"\n    BUILD_DESC=\"$BUILD_FLAVOR $PLATFORM_VERSION $BUILD_ID $BUILD_NUMBER $BUILD_VERSION_TAGS\"\n    BUILD_FINGERPRINT=\"$PRODUCT_BRAND/$TARGET_PRODUCT/$TARGET_DEVICE:$PLATFORM_VERSION/$BUILD_ID/$BUILD_NUMBER:$TARGET_BUILD_VARIANT/$BUILD_VERSION_TAGS\"\n\n    remove_append \"ro.build.flavor\" \"$BUILD_FLAVOR\" $2\n    remove_append \"ro.build.description\" \"$BUILD_DESC\" $2\n    remove_append \"ro.$1.build.fingerprint\" \"$BUILD_FINGERPRINT\" $2\n}\n\necho \"Modifing build.prop for each image\"\nfix_prop system $MountPointSystem/system/build.prop\nfix_prop vendor $MountPointVendor/build.prop\nfix_prop product $MountPointProduct/build.prop\nfix_prop system_ext $MountPointSystemExt/build.prop\n\nprintf 'removing duplicate apps from system\\n'\nrm -Rf $InstallDir/apex/com.android.extservices/\nrm -Rf $InstallDir/app/DocumentsUI/\nrm -Rf $InstallDir/app/ExtShared/\nrm -Rf $InstallDir/priv-app/PackageInstaller/\nrm -Rf $InstallDir/priv-app/SoundPicker/\nrm -Rf $MountPointProduct/app/Camera2/\nrm -Rf $MountPointProduct/app/Gallery2/\nrm -Rf $MountPointProduct/app/Music/\nrm -Rf $MountPointProduct/priv-app/Contacts/\n\necho \"Copying GApps files to system...\"\ncp -f -a $GAppsOutputFolder/app/* $InstallDir/app\ncp -f -a $GAppsOutputFolder/etc/* $InstallDir/etc\ncp -f -a $GAppsOutputFolder/priv-app/* $InstallDir/priv-app\ncp -f -a $GAppsOutputFolder/framework/* $InstallDir/framework\ncp -fra  $GAppsRoot/product_output/* $MountPointProduct/\n\necho \"Applying root file ownership\"\nfind $InstallDir/app -exec chown root:root {} &>/dev/null \\;\nfind $InstallDir/etc -exec chown root:root {} &>/dev/null \\;\nfind $InstallDir/priv-app -exec chown root:root {} &>/dev/null \\;\nfind $InstallDir/framework -exec chown root:root {} &>/dev/null \\;\nfind $InstallDir/lib -exec chown root:root {} &>/dev/null \\;\nfind $InstallDir/lib64 -exec chown root:root {} &>/dev/null \\;\nfind $MountPointProduct/app -exec chown root:root {} &>/dev/null \\;\nfind $MountPointProduct/etc -exec chown root:root {} &>/dev/null \\;\nfind $MountPointProduct/overlay -exec chown root:root {} &>/dev/null \\;\nfind $MountPointProduct/priv-app -exec chown root:root {} &>/dev/null \\;\n\necho \"Setting directory permissions\"\nfind $InstallDir/app -type d -exec chmod 755 {} \\;\nfind $InstallDir/etc -type d -exec chmod 755 {} \\;\nfind $InstallDir/priv-app -type d -exec chmod 755 {} \\;\nfind $InstallDir/framework -type d -exec chmod 755 {} \\;\nfind $InstallDir/lib -type d -exec chmod 755 {} \\;\nfind $InstallDir/lib64 -type d -exec chmod 755 {} \\;\nfind $MountPointProduct/app  -type d -exec chmod 755 {} \\;\nfind $MountPointProduct/etc  -type d -exec chmod 755 {} \\;\nfind $MountPointProduct/overlay -type d -exec chmod 755 {} \\;\nfind $MountPointProduct/priv-app -type d -exec chmod 755 {} \\;\n\necho \"Setting file permissions\"\nfind $InstallDir/app -type f -exec chmod 644 {} \\;\nfind $InstallDir/priv-app -type f -exec chmod 644 {} \\;\nfind $InstallDir/framework -type f -exec chmod 644 {} \\;\nfind $InstallDir/lib -type f -exec chmod 644 {} \\;\nfind $InstallDir/lib64 -type f -exec chmod 644 {} \\;\nfind $InstallDir/etc/permissions -type f -exec chmod 644 {} \\;\nfind $InstallDir/etc/default-permissions -type f -exec chmod 644 {} \\;\nfind $InstallDir/etc/preferred-apps -type f -exec chmod 644 {} \\;\nfind $InstallDir/etc/sysconfig -type f -exec chmod 644 {} \\;\nfind $MountPointProduct/app -type f -exec chmod 644 {} \\;\nfind $MountPointProduct/etc -type f -exec chmod 644 {} \\;\nfind $MountPointProduct/overlay -type f -exec chmod 644 {} \\;\nfind $MountPointProduct/priv-app -type f -exec chmod 644 {} \\;\n\necho \"Applying SELinux security contexts to directories\"\nfind $InstallDir/app -type d -exec chcon --reference=$InstallDir/app {} \\;\nfind $InstallDir/priv-app -type d -exec chcon --reference=$InstallDir/priv-app {} \\;\nfind $InstallDir/framework -type d -exec chcon --reference=$InstallDir/framework {} \\;\nfind $InstallDir/lib -type d -exec chcon --reference=$InstallDir/lib {} \\;\nfind $InstallDir/lib64 -type d -exec chcon --reference=$InstallDir/lib64 {} \\;\nfind $InstallDir/etc/permissions -type d -exec chcon --reference=$InstallDir/etc/permissions {} \\;\nfind $InstallDir/etc/default-permissions -type d -exec chcon --reference=$InstallDir/etc/permissions {} \\;\nfind $InstallDir/etc/preferred-apps -type d -exec chcon --reference=$InstallDir/etc/permissions {} \\;\nfind $InstallDir/etc/sysconfig -type d -exec chcon --reference=$InstallDir/etc/sysconfig {} \\;\nfind $MountPointProduct/app -type d -exec chcon --reference=$MountPointProduct/app {} \\;\nfind $MountPointProduct/etc/permissions  -type d -exec chcon --reference=$MountPointProduct/etc/permissions {} \\;\nfind $MountPointProduct/overlay -type d -exec chcon --reference=$MountPointVendor/overlay {} \\;\nfind $MountPointProduct/priv-app  -type d -exec chcon --reference=$MountPointProduct/priv-app {} \\;\n\necho \"Applying SELinux security contexts to files\"\nfind $InstallDir/framework -type f -exec chcon --reference=$InstallDir/framework/ext.jar {} \\;\nfind $InstallDir/app -type f -exec chcon --reference=$InstallDir/app/CertInstaller/CertInstaller.apk {} \\;\nfind $InstallDir/priv-app -type f -exec chcon --reference=$InstallDir/priv-app/Shell/Shell.apk {} \\;\nfind $InstallDir/lib -type f -exec chcon --reference=$InstallDir/lib/libcap.so {} \\;\nfind $InstallDir/lib64 -type f -exec chcon --reference=$InstallDir/lib64/libcap.so {} \\;\nfind $InstallDir/etc/permissions -type f -exec chcon --reference=$InstallDir/etc/fs_config_dirs {} \\;\nfind $InstallDir/etc/default-permissions -type f -exec chcon --reference=$InstallDir/etc/fs_config_dirs {} \\;\nfind $InstallDir/etc/preferred-apps -type f -exec chcon --reference=$InstallDir/etc/fs_config_dirs {} \\;\nfind $InstallDir/etc/sysconfig -type f -exec chcon --reference=$InstallDir/etc/fs_config_dirs {} \\;\nfind $MountPointProduct/app  -type f -exec chcon --reference=$MountPointProduct/app/ModuleMetadata/ModuleMetadata.apk {} \\;\nfind $MountPointProduct/etc/permissions -type f -exec chcon --reference=$MountPointProduct/etc/permissions/privapp-permissions-venezia.xml {} \\;\nfind $MountPointProduct/overlay -type f -exec chcon --reference=$MountPointVendor/overlay/framework-res__auto_generated_rro_vendor.apk {} \\;\nfind $MountPointProduct/priv-app -type f -exec chcon --reference=$MountPointProduct/priv-app/amazon-adm-release/amazon-adm-release.apk {} \\;\n\necho \"Applying SELinux security contexts to props\"\nchcon --reference=$MountPointSystem/system/etc $MountPointSystem/system/build.prop\nchcon --reference=$MountPointSystemExt/etc $MountPointSystemExt/build.prop\nchcon --reference=$MountPointProduct/etc $MountPointProduct/build.prop\nchcon --reference=$MountPointVendor/etc $MountPointVendor/build.prop\n\necho \"Applying SELinux policy\"\nSELinuxPolicy=\"(allow gmscore_app self (vsock_socket (read write create connect)))\"\nSELinuxPolicy=\"${SELinuxPolicy}\\n(allow gmscore_app device_config_runtime_native_boot_prop (file (read)))\"\nSELinuxPolicy=\"${SELinuxPolicy}\\n(allow gmscore_app system_server_tmpfs (dir (search)))\"\nSELinuxPolicy=\"${SELinuxPolicy}\\n(allow gmscore_app system_server_tmpfs (file (open)))\"\n# Sed will remove the SELinux policy for plat_sepolicy.cil, preserve policy using cp\ncp $InstallDir/etc/selinux/plat_sepolicy.cil $InstallDir/etc/selinux/plat_sepolicy_new.cil\nsed -i \"s/(allow gmscore_app self (process (ptrace)))/(allow gmscore_app self (process (ptrace)))\\n${SELinuxPolicy}/g\" $InstallDir/etc/selinux/plat_sepolicy_new.cil\ncp $InstallDir/etc/selinux/plat_sepolicy_new.cil $InstallDir/etc/selinux/plat_sepolicy.cil\nrm $InstallDir/etc/selinux/plat_sepolicy_new.cil\n\n# Prevent android from using cached SELinux policy\necho '0000000000000000000000000000000000000000000000000000000000000000' > $InstallDir/etc/selinux/plat_sepolicy_and_mapping.sha256\n\necho \"!! Apply completed !!\"\n"
        },
        {
          "name": "extend_and_mount_images.sh",
          "type": "blob",
          "size": 1.2900390625,
          "content": "#!/bin/bash\n\n. ./VARIABLES.sh\n\nif [[ ! /proc/self/mounts -ef /etc/mtab ]]; then\n\tprintf \"/etc/mtab doesn't exist or is invalid\\n\"\n\tprintf 'creating valid /etc/mtab\\n'\n\tln -sf /proc/self/mounts /etc/mtab\nfi\n\necho \"chk product.img\"\ne2fsck -f $ImagesRoot/product.img\n\necho \"Resizing product.img\"\nresize2fs $ImagesRoot/product.img 1024M\n\necho \"chk system.img\"\ne2fsck -f $ImagesRoot/system.img\n\necho \"Resizing system.img\"\nresize2fs $ImagesRoot/system.img 1280M\n\necho \"chk system_ext.img\"\ne2fsck -f $ImagesRoot/system_ext.img\n\necho \"Resizing system_ext.img\"\nresize2fs $ImagesRoot/system_ext.img 150M\n\necho \"chk vendor.img\"\ne2fsck -f $ImagesRoot/vendor.img\n\necho \"Resizing vendor.img\"\nresize2fs $ImagesRoot/vendor.img 400M\n\necho \"Creating mount point for product\"\nmkdir -p $MountPointProduct\n\necho \"Creating mount point for system_ext\" \nmkdir -p $MountPointSystemExt\n\necho \"Creating mount point for system\"\nmkdir -p $MountPointSystem\n\necho \"Creating mount point for vendor\"\nmkdir -p $MountPointVendor\n\necho \"Mounting product\"\nmount $ImagesRoot/product.img $MountPointProduct\n\necho \"Mounting system_ext\"\nmount $ImagesRoot/system_ext.img $MountPointSystemExt\n\necho \"Mounting system\"\nmount $ImagesRoot/system.img $MountPointSystem\n\necho \"Mounting vendor\"\nmount $ImagesRoot/vendor.img $MountPointVendor\n\necho \"!! Images mounted !!\"\n"
        },
        {
          "name": "extract_gapps_pico.sh",
          "type": "blob",
          "size": 0.4462890625,
          "content": "#!/bin/bash\n\n. ./VARIABLES.sh\n\nrm -rf $GAppsOutputFolder\nrm -rf $GAppsTmpFolder\nrm -rf $GAppsExtractFolder\n\nmkdir -p $GAppsOutputFolder\n\necho \"Unzipping OpenGApps\"\nfind \"$GAppsRoot/\"*.zip -exec unzip -p {} {Core,GApps}/'*.lz' \\; | tar --lzip -C $GAppsOutputFolder -xvf - -i --strip-components=2 --exclude='setupwizardtablet-x86_64'\n\necho \"Post merge operation\"\ncp -ra $GAppsOutputFolder/product/* $GAppsRoot/product_output/\n\necho \"!! GApps folder ready !!\"\n"
        },
        {
          "name": "installWSAGA.sh",
          "type": "blob",
          "size": 3.5234375,
          "content": "LINK='\\033[1;34m' #blue\nYELLOW='\\033[0;33m'\nNC='\\033[0m' # No Color\necho \"updating...\"\nsudo apt-get update -qq\nsudo apt install unzip lzip git -qq\n\nwhile ! find MicrosoftCorporationII.WindowsSubsystemForAndroid*.Msixbundle 1> /dev/null 2>&1\ndo\n  echo -e \"\\n\\Msixbundle not found - download from: ${LINK}https://store.rg-adguard.net/${NC} (Ctrl+Click)\\nProductId: 9P3395VX91NR, Ring: SLOW\\n\\nPress enter once ${YELLOW}downloaded to current folder${NC}:\" ; read -p \"($PWD)\"\ndone\necho Msixbundle found!\n\nwhile ! find open_gapps*.zip 1> /dev/null 2>&1\ndo\n  echo -e \"\\n\\nGApps not found - download from: ${LINK}https://opengapps.org/${NC} (Ctrl+Click)\\nPlatform: x86_64 if Windows architecture is x64, otherwise choose ARM64\\nAndroid: 11 and Variant: Pico (or another)\\n\\nPress enter once ${YELLOW}downloaded to current folder${NC}\" ; read -p \"($PWD)\"\ndone\necho GApps found!\n\nrm -rf WSAGAScript/ #cleanup from previous installation\ngit clone https://github.com/WSA-Community/WSAGAScript\nmkdir WSAGAScript/#MSIX\n\nwhile true; do\n\techo -e \"${YELLOW}press x for x64 architecture or a for ARM64${NC}\"\n    read -p \"\" -n 1 xa\n    echo\n    case $xa in\n        [Aa]* )\n\t\t\techo \"extracting ARM64 version, please wait...\";\n\t\t\tsed -i '7s/.*/Architecture=\"arm64\"/' WSAGAScript/VARIABLES.sh #edit script to ARM architecture\n\t\t\tunzip -p MicrosoftCorporationII.WindowsSubsystemForAndroid* *ARM64_Release-Nightly.msix > WSAGAScript/#MSIX/ARM64.msix\n\t\t\tunzip WSAGAScript/#MSIX/ARM64.msix -d WSAGAScript/#MSIX/\n\t\t\trm WSAGAScript/#MSIX/ARM64.msix;\n\t\t\tbreak;;\n        [Xx]* )\n\t\t\techo \"extracting x64 version, please wait...\";\n\t\t\tunzip -p MicrosoftCorporationII.WindowsSubsystemForAndroid* *x64_Release-Nightly.msix > WSAGAScript/#MSIX/x64.msix\n\t\t\tunzip WSAGAScript/#MSIX/x64.msix -d WSAGAScript/#MSIX/\n\t\t\trm WSAGAScript/#MSIX/x64.msix;\n\t\t\tbreak;;\n        * ) echo \"Please answer x or a for x64 or ARM64.\";;\n    esac\ndone\necho \"done extracting\"\n\necho \"prepearing #IMAGES and #GAPPS folder\"\nrm -rf WSAGAScript/#MSIX/AppxMetadata/ WSAGAScript/#MSIX/AppxBlockMap.xml WSAGAScript/#MSIX/[Content_Types].xml WSAGAScript/#MSIX/AppxSignature.p7x\nmv WSAGAScript/#MSIX/*.img WSAGAScript/#IMAGES\ncp open_gapps*pico*.zip WSAGAScript/#GAPPS/ \n\ncd WSAGAScript\nchmod +x extract_gapps_pico.sh\nchmod +x extend_and_mount_images.sh\nchmod +x apply.sh\nchmod +x unmount_images.sh\n\n./extract_gapps_pico.sh\nsudo ./extend_and_mount_images.sh\nsudo ./apply.sh\nsudo ./unmount_images.sh\n\necho \"moving edited images to install location\"\nmv ./#IMAGES/*.img ./#MSIX/\n\n\necho \"moving install folder to C:\"\nmkdir /mnt/c/WSA\nmv ./#MSIX/* /mnt/c/WSA\n\n\necho -e \"${YELLOW}Nearly done:${NC}\"\necho \"Enable developer mode in windows settings.\"\necho \"(Settings -> Privacy&security -> For developers)\"\necho \"Uninstall any other installed versions of WSA\"\necho \"Open Windows PowerShell (not PowerShell) as admin and run:\"\necho -e \"${LINK}Add-AppxPackage -Register C:\\\\WSA\\\\AppxManifest.xml${NC}\\n\"\nread -n 1 -s -r -p \"Press any key to continue\"\necho\necho\necho\n\necho \"Start \\\"Windows Subsystem for Android\\\" from Start Menu\"\necho \"Open Files (first in list)\"\necho \"(optional) Disable Diagnodstic Data\"\necho \"wait... until Downloads Folder opens and close it\"\nread -n 1 -s -r -p \"Press any key to continue\"\necho\necho\n\necho \"Everyting should be installed now\"\necho \"Remaining Folder/Files: WSAGAScript, MicrosoftCorporation...Msixbundle, open_gapps...zip, intallWSAGA.sh\"\nread -p \"Press Enter to delete or press CTRL+C to stop here\"\ncd ..\nrm -rf WSAGAScript\nrm MicrosoftCorporationII.WindowsSubsystemForAndroid*.Msixbundle\nrm open_gapps*.zip\nrm installWSAGA.sh\necho \"Cleanup comlete\""
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "unmount_images.sh",
          "type": "blob",
          "size": 0.7744140625,
          "content": "#!/bin/bash\n\n. ./VARIABLES.sh\n\necho \"Unmounting product.img\"\numount $MountPointProduct\n\necho \"Unmounting system_ext.img\"\numount $MountPointSystemExt\n\necho \"Unmounting system.img\"\numount $MountPointSystem\n\necho \"Unmounting vendor.img\"\numount $MountPointVendor\n\necho \"chk product.img\"\ne2fsck -f $ImagesRoot/product.img\n\necho \"Resizing product.img\"\nresize2fs -M $ImagesRoot/product.img\n\necho \"chk system.img\"\ne2fsck -f $ImagesRoot/system.img\n\necho \"Resizing system.img\"\nresize2fs -M $ImagesRoot/system.img\n\necho \"chk system_ext.img\"\ne2fsck -f $ImagesRoot/system_ext.img\n\necho \"Resizing system_ext.img\"\nresize2fs -M $ImagesRoot/system_ext.img\n\necho \"chk vendor.img\"\ne2fsck -f $ImagesRoot/vendor.img\n\necho \"Resizing vendor.img\"\nresize2fs -M $ImagesRoot/vendor.img\n\necho \"!! Unmounting completed !!\""
        }
      ]
    }
  ]
}