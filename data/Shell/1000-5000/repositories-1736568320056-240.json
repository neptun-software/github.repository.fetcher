{
  "metadata": {
    "timestamp": 1736568320056,
    "page": 240,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjI0MA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "x2on/OpenSSL-for-iPhone",
      "stars": 2488,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.1767578125,
          "content": "bin\nlib\n*.gz\nOpenSSL-for-iOS.xcodeproj/xcuserdata\nsrc\nbuild\nOpenSSL-for-iOS.xcodeproj/project.xcworkspace/xcuserdata\ninclude/openssl\n*.framework\n*.xccheckout\n.DS_Store\n*.xcframework"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.0908203125,
          "content": "                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"{}\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright {yyyy} {name of copyright owner}\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "OpenSSL-for-iOS.xcodeproj",
          "type": "tree",
          "content": null
        },
        {
          "name": "OpenSSL-for-iOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "OpenSSL-for-iOS_Tests",
          "type": "tree",
          "content": null
        },
        {
          "name": "OpenSSL-for-tvOS",
          "type": "tree",
          "content": null
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.591796875,
          "content": "# OpenSSL-for-iOS [![license](https://img.shields.io/github/license/x2on/OpenSSL-for-iPhone.svg)](https://github.com/x2on/OpenSSL-for-iPhone/blob/master/LICENSE) [![OpenSSL version](https://img.shields.io/badge/OpenSSL-1.1.1w-lightgrey.svg)]() [![iOS support](https://img.shields.io/badge/iOS-12.0%20--%2016.6-lightgrey.svg)]() [![tvOS support](https://img.shields.io/badge/tvOS-12.0%20--%2016.6-lightgrey.svg)]() [![MacCatalyst support](https://img.shields.io/badge/MacCatalyst-15.6-lightgrey.svg)]()\n\n## OpenSSL 1.1.1 End of Life\n\n**OpenSSL 1.1.1 series has reached its End of Life (EOL). As such it will no longer receive publicly available security fixes.**\nhttps://openssl-library.org/post/2023-09-11-eol-111/\n\n---\nThis is a script for using self-compiled builds of the OpenSSL-library on the iPhone. You can build apps with Xcode and the official SDK from Apple with this. I also made a small example-app for using the libraries with Xcode and the iPhone/iPhone-Simulator.\n\n**Enjoy OpenSSL on the iPhone!**\n\nYou must build the OpenSSL-Libraries (1.1.1w) before running the sample with:\n\n```bash\n./build-libssl.sh\n```\n\nFor other versions build the OpenSSL-Libraries with:\n```bash\n./build-libssl.sh --version=1.1.1k\n```\n\nFor all options see the help\n```bash\n./build-libssl.sh --help\n```\n\nThis repository contains an iOS 16.0 Xcode Project which uses the OpenSSL Libraries. The examples uses the MD5 or SHA256-algorithm to calculate an md5 or sha256 hash from an UITextfield.\n\n## System support\n**iOS 12.0 - iOS 16.6 (x86_64 , arm64, arm64e bitcode), tvOS 12.0 - tvOS 16.6 (x86_64, arm64, bitcode), WatchOS 8 and MacCatalyst 15.6 (MacOSX_x86_64) are currently supported.**\n\nFor iOS < 7.0 you must use Xcode < 7 and an older version of the build script.\nFor iOS < 12.0 you must use Xcode < 11 and an older version of the build script.\n\nIf you have problems building for arm64 please uninstall MacPorts (see [#28](https://github.com/x2on/OpenSSL-for-iPhone/issues/28)).\n\n## Original tutorials for this project:\n* <https://x2on.github.io/2010/02/01/tutorial-iphone-app-with-compiled-openssl-library/>\n* <https://x2on.github.io/2010/07/13/tutorial-iphone-app-with-compiled-openssl-1-0-0a-library/>\n\n## Changelog\n* 2023-09-20: OpenSSL 1.1.1w\n* 2023-08-21: OpenSSL 1.1.1v, iOS 16.6 support\n* 2023-07-04: OpenSSL 1.1.1u\n* 2023-02-09: OpenSSL 1.1.1t\n* 2023-01-10: Xcode 14.2 support, iOS 16.2 support, SHA512 Example\n* 2022-11-16: Xcode 14.1 support, iOS 16.1 support, OpenSSL 1.1.1s\n* 2022-09-15: Xcode 14 support, iOS 16 support\n* 2022-07-20: OpenSSL 1.1.1q, Fix Travix Build, Xcode 13,4, iOS 15 Support, Add support for Simulator and Catalyst on M1 (arm64), and Apple Watch, Support for XCFramework\n* 2019-11-27: OpenSSL 1.1.1d, Add Support for arm64e\n* 2019-11-27: Add support for MacCatalyst, Xcode 11.2.1 (iOS 12.0 - 13.2), Migrate to Swift 5, Remove OpenSSL 1.0.2 support\n* 2017-05-25: OpenSSL 1.0.2l, 1.1.0f\n* 2017-02-16: OpenSSL 1.1.0e\n* 2017-01-28: OpenSSL 1.0.2k, 1.1.0d, Xcode 8.2 (iOS 10.2 and tvOS 10.1)\n* 2016-11-13: OpenSSL 1.1.0c\n* 2016-11-07: Optional support for OpenSSL 1.1.0b\n* 2016-09-28: OpenSSL 1.0.2j\n* 2016-09-22: OpenSSL 1.0.2i\n* 2016-09-18: Xcode 8 support, iOS 10.0, Add command line options, Optimize build\n* 2016-08-09: Xcode 7.3 support, iOS 9.3\n* 2016-05-04: OpenSSL 1.0.2h\n* 2015-12-11: Xcode 7.2 support, iOS 9.2\n* 2015-12-03: OpenSSL 1.0.2e\n* 2015-11-17: tvOS example app, Migrate to Swift for example app\n* 2015-11-16: tvOS support\n* 2015-10-25: Xcode 7.1 support\n* 2015-08-06: iOS 9.0 support, Bitcode support\n* 2015-07-09: OpenSSL 1.0.2d, iOS 8.4\n* 2015-06-15: OpenSSL 1.0.2c, iOS 8.3\n* 2015-06-11: OpenSSL 1.0.2b\n* 2015-03-19: OpenSSL 1.0.2a\n* 2015-01-28: OpenSSL 1.0.2\n* 2015-01-10: OpenSSL 1.0.1k\n* 2014-10-15: OpenSSL 1.0.1j\n* 2014-09-18: iOS 8.0 support\n* 2014-08-08: OpenSSL 1.0.1i\n* 2014-06-05: OpenSSL 1.0.1h\n* 2014-04-07: OpenSSL 1.0.1g\n* 2014-03-12: iOS 7.1 support\n* 2014-01-07: OpenSSL 1.0.1f\n* 2013-10-12: x86_64 support, Migrate project to iOS 7.0\n* 2013-09-23: iOS 7.0 support\n* 2013-03-01: OpenSSL 1.0.1e, iOS 6.1\n* 2012-09-21: Support for iOS 6.0 and iPhone 5 (armv7s) - Remove armv6 support\n* 2012-05-17: OpenSSL 1.0.1c\n* 2012-05-02: OpenSSL 1.0.1b\n* 2012-04-01: OpenSSL 1.0.1, Modernizes project to use ARC\n* 2012-01-28: OpenSSL 1.0.0g, Optimized build script\n* 2011-10-23: OpenSSL 1.0.0e, iOS 5.0\n* 2011-02-08: OpenSSL 1.0.0d\n* 2010-12-16: Script for building OpenSSL\n* 2010-12-04: SHA256 Hash, Clean project file with iOS 4.2 as base SDK\n* 2010-12-04: OpenSSL 1.0.0c\n* 2010-11-16: OpenSSL 1.0.0b\n* 2010-06-30: OpenSSL 1.0.0a, iOS 4.0 as base SDK\n* 2010-06-10: OpenSSL 0.9.8o, iPad Version\n* 2010-03-31: OpenSSL 0.9.8n\n* 2010-02-26: OpenSSL 0.9.8m\n"
        },
        {
          "name": "build-libssl.sh",
          "type": "blob",
          "size": 22.359375,
          "content": "#!/bin/sh\n\n#  Automatic build script for libssl and libcrypto\n#  for iPhoneOS and iPhoneSimulator\n#\n#  Created by Felix Schulze on 16.12.10.\n#  Copyright 2010-2019 Felix Schulze. All rights reserved.\n#\n#  Licensed under the Apache License, Version 2.0 (the \"License\");\n#  you may not use this file except in compliance with the License.\n#  You may obtain a copy of the License at\n#\n#  http://www.apache.org/licenses/LICENSE-2.0\n#\n#  Unless required by applicable law or agreed to in writing, software\n#  distributed under the License is distributed on an \"AS IS\" BASIS,\n#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n#  See the License for the specific language governing permissions and\n#  limitations under the License.\n#\n\n# -u  Attempt to use undefined variable outputs error message, and forces an exit\nset -u\n\n# SCRIPT DEFAULTS\n\n# Default version in case no version is specified\nDEFAULTVERSION=\"1.1.1w\"\n\n# Default (=full) set of targets to build\nDEFAULTTARGETS=\"ios-sim-cross-x86_64 ios-sim-cross-arm64 ios-cross-arm64 mac-catalyst-x86_64 mac-catalyst-arm64 tvos-sim-cross-x86_64 tvos-sim-cross-arm64 tvos-cross-arm64 watchos-sim-cross-x86_64 watchos-sim-cross-arm64 watchos-cross-armv7k watchos-cross-arm64_32\"\n\n# Excluded targets:\n#   ios-sim-cross-i386  Legacy\n#   ios-cross-armv7s    Dropped by Apple in Xcode 6 (https://www.cocoanetics.com/2014/10/xcode-6-drops-armv7s/)\n#   ios-cross-arm64e    Not in use as of Xcode 12\n\n# Minimum iOS/tvOS SDK version to build for\n\nIOS_MIN_SDK_VERSION=\"15.0\"\nTVOS_MIN_SDK_VERSION=\"15.0\"\nWATCHOS_MIN_SDK_VERSION=\"8.5\"\nMACOSX_MIN_SDK_VERSION=\"12.3\"\n\n# Init optional env variables (use available variable or default to empty string)\nCURL_OPTIONS=\"${CURL_OPTIONS:-}\"\nCONFIG_OPTIONS=\"${CONFIG_OPTIONS:-}\"\n\necho_help()\n{\n  echo \"Usage: $0 [options...]\"\n  echo \"Generic options\"\n  echo \"     --branch=BRANCH               Select OpenSSL branch to build. The script will determine and download the latest release for that branch\"\n  echo \"     --cleanup                     Clean up build directories (bin, include/openssl, lib, src) before starting build\"\n  echo \"     --ec-nistp-64-gcc-128         Enable configure option enable-ec_nistp_64_gcc_128 for 64 bit builds\"\n  echo \" -h, --help                        Print help (this message)\"\n  echo \"     --ios-sdk=SDKVERSION          Override iOS SDK version\"\n  echo \"     --ios-min-sdk=MINSDKVERSION   Override iOS SDK min version\"\n  echo \"     --macosx-sdk=SDKVERSION       Override MacOSX SDK version\"\n  echo \"     --macosx-min-sdk=SDKVERSION   Override MacOSX SDK min version\"\n  echo \"     --watchos-sdk=SDKVERSION      Override watchOS SDK version\"\n  echo \"     --watchos-min-sdk=SDKVERSION  Override watchOS SDK min version\"\n  echo \"     --tvos-sdk=SDKVERSION         Override tvOS SDK version\"\n  echo \"     --tvos-min-sdk=SDKVERSION     Override tvOS SDK min version\"\n  echo \"     --noparallel                  Disable running make with parallel jobs (make -j)\"\n  echo \"     --disable-bitcode             Disable embedding Bitcode\"\n  echo \" -v, --verbose                     Enable verbose logging\"\n  echo \"     --verbose-on-error            Dump last 500 lines from log file if an error occurs (for Travis builds)\"\n  echo \"     --version=VERSION             OpenSSL version to build (defaults to ${DEFAULTVERSION})\"\n  echo \"     --deprecated                  Exclude no-deprecated configure option and build with deprecated methods\"\n  echo \"     --targets=\\\"TARGET TARGET ...\\\" Space-separated list of build targets\"\n  echo \"                                     Options: ${DEFAULTTARGETS} mac-catalyst-x86_64\"\n  echo\n  echo \"For custom configure options, set variable CONFIG_OPTIONS\"\n  echo \"For custom cURL options, set variable CURL_OPTIONS\"\n  echo \"  Example: CURL_OPTIONS=\\\"--proxy 192.168.1.1:8080\\\" ./build-libssl.sh\"\n}\n\nspinner()\n{\n  local pid=$!\n  local delay=0.75\n  local spinstr='|/-\\'\n  while [ \"$(ps a | awk '{print $1}' | grep $pid)\" ]; do\n    local temp=${spinstr#?}\n    printf \"  [%c]\" \"$spinstr\"\n    local spinstr=$temp${spinstr%\"$temp\"}\n    sleep $delay\n    printf \"\\b\\b\\b\\b\\b\"\n  done\n\n  wait $pid\n  return $?\n}\n\n# Prepare target and source dir in build loop\nprepare_target_source_dirs()\n{\n  # Prepare target dir\n  TARGETDIR=\"${CURRENTPATH}/bin/${PLATFORM}${SDKVERSION}-${ARCH}.sdk\"\n  mkdir -p \"${TARGETDIR}\"\n  LOG=\"${TARGETDIR}/build-openssl-${VERSION}.log\"\n\n  echo \"Building openssl-${VERSION} for ${PLATFORM} ${SDKVERSION} ${ARCH}...\"\n  echo \"  Logfile: ${LOG}\"\n\n  # Prepare source dir\n  SOURCEDIR=\"${CURRENTPATH}/src/${PLATFORM}-${ARCH}\"\n  mkdir -p \"${SOURCEDIR}\"\n  tar zxf \"${CURRENTPATH}/${OPENSSL_ARCHIVE_FILE_NAME}\" -C \"${SOURCEDIR}\"\n  cd \"${SOURCEDIR}/${OPENSSL_ARCHIVE_BASE_NAME}\"\n  chmod u+x ./Configure\n}\n\n# Check for error status\ncheck_status()\n{\n  local STATUS=$1\n  local COMMAND=$2\n\n  if [ \"${STATUS}\" != 0 ]; then\n    if [[ \"${LOG_VERBOSE}\" != \"verbose\"* ]]; then\n      echo \"Problem during ${COMMAND} - Please check ${LOG}\"\n    fi\n\n    # Dump last 500 lines from log file for verbose-on-error\n    if [ \"${LOG_VERBOSE}\" == \"verbose-on-error\" ]; then\n      echo \"Problem during ${COMMAND} - Dumping last 500 lines from log file\"\n      echo\n      tail -n 500 \"${LOG}\"\n    fi\n\n    exit 1\n  fi\n}\n\n# Run Configure in build loop\nrun_configure()\n{\n  echo \"  Configure...\"\n  set +e\n  if [ \"${LOG_VERBOSE}\" == \"verbose\" ]; then\n    ./Configure ${LOCAL_CONFIG_OPTIONS} no-tests | tee \"${LOG}\"\n  else\n    (./Configure ${LOCAL_CONFIG_OPTIONS} no-tests > \"${LOG}\" 2>&1) & spinner\n  fi\n\n  # Check for error status\n  check_status $? \"Configure\"\n}\n\n# Run make in build loop\nrun_make()\n{\n  echo \"  Make (using ${BUILD_THREADS} thread(s))...\"\n  if [ \"${LOG_VERBOSE}\" == \"verbose\" ]; then\n    make -j \"${BUILD_THREADS}\" | tee -a \"${LOG}\"\n  else\n    (make -j \"${BUILD_THREADS}\" >> \"${LOG}\" 2>&1) & spinner\n  fi\n\n  # Check for error status\n  check_status $? \"make\"\n}\n\n# Cleanup and bookkeeping at end of build loop\nfinish_build_loop()\n{\n  # Return to ${CURRENTPATH} and remove source dir\n  cd \"${CURRENTPATH}\"\n  rm -r \"${SOURCEDIR}\"\n\n  # Add references to library files to relevant arrays\n  if [[ \"${PLATFORM}\" == iPhoneOS ]]; then\n    LIBSSL_IOS+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_IOS+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"ios_${ARCH}\"\n  elif [[ \"${PLATFORM}\" == iPhoneSimulator ]]; then\n    LIBSSL_IOSSIM+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_IOSSIM+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"ios_${ARCH}\"\n  elif [[ \"${PLATFORM}\" == AppleTVOS ]]; then\n    LIBSSL_TVOS+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_TVOS+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"tvos_${ARCH}\"\n  elif [[ \"${PLATFORM}\" == AppleTVSimulator ]]; then\n    LIBSSL_TVOSSIM+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_TVOSSIM+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"tvos_${ARCH}\"\n  elif [[ \"${PLATFORM}\" == WatchOS ]]; then\n    LIBSSL_WATCHOS+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_WATCHOS+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"watchos_${ARCH}\"\n  elif [[ \"${PLATFORM}\" == WatchSimulator ]]; then\n    LIBSSL_WATCHOSSIM+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_WATCHOSSIM+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"watchos_sim_${ARCH}\"\n  else # Catalyst\n    LIBSSL_CATALYST+=(\"${TARGETDIR}/lib/libssl.a\")\n    LIBCRYPTO_CATALYST+=(\"${TARGETDIR}/lib/libcrypto.a\")\n    OPENSSLCONF_SUFFIX=\"catalyst_${ARCH}\"\n  fi\n\n  # Copy opensslconf.h to bin directory and add to array\n  OPENSSLCONF=\"opensslconf_${OPENSSLCONF_SUFFIX}.h\"\n  cp \"${TARGETDIR}/include/openssl/opensslconf.h\" \"${CURRENTPATH}/bin/${OPENSSLCONF}\"\n  OPENSSLCONF_ALL+=(\"${OPENSSLCONF}\")\n\n  # Keep reference to first build target for include file\n  if [ -z \"${INCLUDE_DIR}\" ]; then\n    INCLUDE_DIR=\"${TARGETDIR}/include/openssl\"\n  fi\n}\n\n# Init optional command line vars\nARCHS=\"\"\nBRANCH=\"\"\nCLEANUP=\"\"\nCONFIG_ENABLE_EC_NISTP_64_GCC_128=\"\"\nCONFIG_DISABLE_BITCODE=\"\"\nCONFIG_NO_DEPRECATED=\"\"\nIOS_SDKVERSION=\"\"\nMACOSX_SDKVERSION=\"\"\nLOG_VERBOSE=\"\"\nPARALLEL=\"\"\nTARGETS=\"\"\nTVOS_SDKVERSION=\"\"\nVERSION=\"\"\nWATCHOS_SDKVERSION=\"\"\n\n# Process command line arguments\nfor i in \"$@\"\ndo\ncase $i in\n  --archs=*)\n    ARCHS=\"${i#*=}\"\n    shift\n    ;;\n  --branch=*)\n    BRANCH=\"${i#*=}\"\n    shift\n    ;;\n  --cleanup)\n    CLEANUP=\"true\"\n    ;;\n  --deprecated)\n    CONFIG_NO_DEPRECATED=\"false\"\n    ;;\n  --ec-nistp-64-gcc-128)\n    CONFIG_ENABLE_EC_NISTP_64_GCC_128=\"true\"\n    ;;\n  --disable-bitcode)\n    CONFIG_DISABLE_BITCODE=\"true\"\n    ;;\n  -h|--help)\n    echo_help\n    exit\n    ;;\n  --ios-sdk=*)\n    IOS_SDKVERSION=\"${i#*=}\"\n    shift\n    ;;\n  --ios-min-sdk=*)\n    IOS_MIN_SDK_VERSION=\"${i#*=}\"\n    shift\n    ;;\n  --macosx-sdk=*)\n    MACOSX_SDKVERSION=\"${i#*=}\"\n    shift\n    ;;\n  --macosx-min-sdk=*)\n    MACOSX_MIN_SDK_VERSION=\"${i#*=}\"\n    shift\n    ;;\n  --tvos-sdk=*)\n    TVOS_SDKVERSION=\"${i#*=}\"\n    shift\n    ;;\n  --tvos-min-sdk=*)\n    TVOS_MIN_SDK_VERSION=\"${i#*=}\"\n    shift\n    ;;\n  --watchos-sdk=*)\n    WATCHOS_SDKVERSION=\"${i#*=}\"\n    shift\n    ;;\n  --watchos-min-sdk=*)\n    WATCHOS_MIN_SDK_VERSION=\"${i#*=}\"\n    shift\n    ;;\n  --noparallel)\n    PARALLEL=\"false\"\n    ;;\n  --targets=*)\n    TARGETS=\"${i#*=}\"\n    shift\n    ;;\n\n  -v|--verbose)\n    LOG_VERBOSE=\"verbose\"\n    ;;\n  --verbose-on-error)\n    LOG_VERBOSE=\"verbose-on-error\"\n    ;;\n  --version=*)\n    VERSION=\"${i#*=}\"\n    shift\n    ;;\n  *)\n    echo \"Unknown argument: ${i}\"\n    ;;\nesac\ndone\n\n# Don't mix version and branch\nif [[ -n \"${VERSION}\" && -n \"${BRANCH}\" ]]; then\n  echo \"Either select a branch (the script will determine and build the latest version) or select a specific version, but not both.\"\n  exit 1\n\n# Specific version: Verify version number format. Expected: dot notation\nelif [[ -n \"${VERSION}\" && ! \"${VERSION}\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+[a-z]*$ ]]; then\n  echo \"Unknown version number format. Examples: 1.1.0, 1.1.0l\"\n  exit 1\n\n# Specific branch\nelif [ -n \"${BRANCH}\" ]; then\n  # Verify version number format. Expected: dot notation\n  if [[ ! \"${BRANCH}\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then\n    echo \"Unknown branch version number format. Examples: 1.1.0, 1.2.0\"\n    exit 1\n\n  # Valid version number, determine latest version\n  else\n    echo \"Checking latest version of ${BRANCH} branch on openssl.org...\"\n    # Get directory content listing of /source/ (only contains latest version per branch), limit list to archives (so one archive per branch),\n    # filter for the requested branch, sort the list and get the last item (last two steps to ensure there is always 1 result)\n    VERSION=$(curl ${CURL_OPTIONS} -s https://ftp.openssl.org/source/ | grep -Eo '>openssl-[0-9]\\.[0-9]\\.[0-9][a-z]*\\.tar\\.gz<' | grep -Eo \"${BRANCH//./\\.}[a-z]*\" | sort | tail -1)\n\n    # Verify result\n    if [ -z \"${VERSION}\" ]; then\n      echo \"Could not determine latest version, please check https://www.openssl.org/source/ and use --version option\"\n      exit 1\n    fi\n  fi\n\n# Script default\nelif [ -z \"${VERSION}\" ]; then\n  VERSION=\"${DEFAULTVERSION}\"\nfi\n\nBUILD_TYPE=\"targets\"\n\n# Set default for TARGETS if not specified\nif [ ! -n \"${TARGETS}\" ]; then\n  TARGETS=\"${DEFAULTTARGETS}\"\nfi\n\n# Add no-deprecated config option (if not overwritten)\nif [ \"${CONFIG_NO_DEPRECATED}\" != \"false\" ]; then\n  CONFIG_OPTIONS=\"${CONFIG_OPTIONS} no-deprecated\"\nfi\n\n# Determine SDK versions\nif [ ! -n \"${IOS_SDKVERSION}\" ]; then\n  IOS_SDKVERSION=$(xcrun -sdk iphoneos --show-sdk-version)\nfi\nif [ ! -n \"${MACOSX_SDKVERSION}\" ]; then\n  MACOSX_SDKVERSION=$(xcrun -sdk macosx --show-sdk-version)\nfi\nif [ ! -n \"${TVOS_SDKVERSION}\" ]; then\n  TVOS_SDKVERSION=$(xcrun -sdk appletvos --show-sdk-version)\nfi\nif [ ! -n \"${WATCHOS_SDKVERSION}\" ]; then\n  WATCHOS_SDKVERSION=$(xcrun -sdk watchos --show-sdk-version)\nfi\n\n# Determine number of cores for (parallel) build\nBUILD_THREADS=1\nif [ \"${PARALLEL}\" != \"false\" ]; then\n  BUILD_THREADS=$(sysctl hw.ncpu | awk '{print $2}')\nfi\n\n# Determine script directory\nSCRIPTDIR=$(cd \"$( dirname \"${BASH_SOURCE[0]}\" )\" && pwd)\n\n# Write files relative to current location and validate directory\nCURRENTPATH=$(pwd)\ncase \"${CURRENTPATH}\" in\n  *\\ * )\n    echo \"Your path contains whitespaces, which is not supported by 'make install'.\"\n    exit 1\n  ;;\nesac\ncd \"${CURRENTPATH}\"\n\n# Validate Xcode Developer path\nDEVELOPER=$(xcode-select -print-path)\nif [ ! -d \"${DEVELOPER}\" ]; then\n  echo \"Xcode path is not set correctly ${DEVELOPER} does not exist\"\n  echo \"run\"\n  echo \"sudo xcode-select -switch <Xcode path>\"\n  echo \"for default installation:\"\n  echo \"sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer\"\n  exit 1\nfi\n\ncase \"${DEVELOPER}\" in\n  *\\ * )\n    echo \"Your Xcode path contains whitespaces, which is not supported.\"\n    exit 1\n  ;;\nesac\n\n# Show build options\necho\necho \"Build options\"\necho \"  OpenSSL version: ${VERSION}\"\necho \"  Targets: ${TARGETS}\"\necho \"  iOS SDK: ${IOS_SDKVERSION}\"\necho \"  iOS min SDK: ${IOS_MIN_SDK_VERSION}\"\necho \"  tvOS SDK: ${TVOS_SDKVERSION}\"\necho \"  tvOS min SDK: ${TVOS_MIN_SDK_VERSION}\"\necho \"  watchOS SDK: ${WATCHOS_SDKVERSION}\"\necho \"  watchOS min SDK: ${WATCHOS_MIN_SDK_VERSION}\"\necho \"  MacOSX SDK: ${MACOSX_SDKVERSION}\"\necho \"  MacOSX min SDK: ${MACOSX_MIN_SDK_VERSION}\"\n\nif [ \"${CONFIG_DISABLE_BITCODE}\" == \"true\" ]; then\n  echo \"  Bitcode embedding disabled\"\nfi\necho \"  Number of make threads: ${BUILD_THREADS}\"\nif [ -n \"${CONFIG_OPTIONS}\" ]; then\n  echo \"  Configure options: ${CONFIG_OPTIONS}\"\nfi\necho \"  Build location: ${CURRENTPATH}\"\necho\n\n# Download OpenSSL when not present\nOPENSSL_ARCHIVE_BASE_NAME=\"openssl-${VERSION}\"\nOPENSSL_ARCHIVE_FILE_NAME=\"${OPENSSL_ARCHIVE_BASE_NAME}.tar.gz\"\nif [ ! -e ${OPENSSL_ARCHIVE_FILE_NAME} ]; then\n  echo \"Downloading ${OPENSSL_ARCHIVE_FILE_NAME}...\"\n  OPENSSL_ARCHIVE_URL=\"https://www.openssl.org/source/${OPENSSL_ARCHIVE_FILE_NAME}\"\n\n  # Check whether file exists here (this is the location of the latest version for each branch)\n  # -s be silent, -f return non-zero exit status on failure, -I get header (do not download)\n  curl ${CURL_OPTIONS} -sfIL \"${OPENSSL_ARCHIVE_URL}\" > /dev/null\n\n  # If unsuccessful, try the archive\n  if [ $? -ne 0 ]; then\n    BRANCH=$(echo \"${VERSION}\" | grep -Eo '^[0-9]\\.[0-9]\\.[0-9]')\n    OPENSSL_ARCHIVE_URL=\"https://www.openssl.org/source/old/${BRANCH}/${OPENSSL_ARCHIVE_FILE_NAME}\"\n\n    curl ${CURL_OPTIONS} -sfIL \"${OPENSSL_ARCHIVE_URL}\" > /dev/null\n  fi\n\n  # Both attempts failed, so report the error\n  if [ $? -ne 0 ]; then\n    echo \"An error occurred trying to find OpenSSL ${VERSION} on ${OPENSSL_ARCHIVE_URL}\"\n    echo \"Please verify that the version you are trying to build exists, check cURL's error message and/or your network connection.\"\n    exit 1\n  fi\n\n  # Archive was found, so proceed with download.\n  # -O Use server-specified filename for download\n  curl ${CURL_OPTIONS} -LO \"${OPENSSL_ARCHIVE_URL}\"\n\nelse\n  echo \"Using ${OPENSSL_ARCHIVE_FILE_NAME}\"\nfi\n\n# Set reference to custom configuration (OpenSSL 1.1.0)\n# See: https://github.com/openssl/openssl/commit/afce395cba521e395e6eecdaf9589105f61e4411\nexport OPENSSL_LOCAL_CONFIG_DIR=\"${SCRIPTDIR}/config\"\n\n# -e  Abort script at first error, when a command exits with non-zero status (except in until or while loops, if-tests, list constructs)\n# -o pipefail  Causes a pipeline to return the exit status of the last command in the pipe that returned a non-zero return value\nset -eo pipefail\n\n# Clean up target directories if requested and present\nif [ \"${CLEANUP}\" == \"true\" ]; then\n  if [ -d \"${CURRENTPATH}/bin\" ]; then\n    rm -r \"${CURRENTPATH}/bin\"\n  fi\n  if [ -d \"${CURRENTPATH}/include/openssl\" ]; then\n    rm -r \"${CURRENTPATH}/include/openssl\"\n  fi\n  if [ -d \"${CURRENTPATH}/lib\" ]; then\n    rm -r \"${CURRENTPATH}/lib\"\n  fi\n  if [ -d \"${CURRENTPATH}/src\" ]; then\n    rm -r \"${CURRENTPATH}/src\"\n  fi\nfi\n\n# (Re-)create target directories\nmkdir -p \"${CURRENTPATH}/bin\"\nmkdir -p \"${CURRENTPATH}/lib\"\nmkdir -p \"${CURRENTPATH}/src\"\n\n# Init vars for library references\nINCLUDE_DIR=\"\"\nOPENSSLCONF_ALL=()\nLIBSSL_IOS=()\nLIBSSL_IOSSIM=()\nLIBCRYPTO_IOS=()\nLIBCRYPTO_IOSSIM=()\nLIBSSL_TVOS=()\nLIBSSL_TVOSSIM=()\nLIBCRYPTO_TVOS=()\nLIBCRYPTO_TVOSSIM=()\nLIBSSL_WATCHOS=()\nLIBSSL_WATCHOSSIM=()\nLIBCRYPTO_WATCHOS=()\nLIBCRYPTO_WATCHOSSIM=()\nLIBSSL_CATALYST=()\nLIBCRYPTO_CATALYST=()\n\n# Run relevant build loop\nsource \"${SCRIPTDIR}/scripts/build-loop-targets.sh\"\n\n# Build iOS/Simulator library if selected for build\nif [ ${#LIBSSL_IOS[@]} -gt 0 ]; then\n  echo \"Build library for iOS...\"\n  lipo -create ${LIBSSL_IOS[@]} -output \"${CURRENTPATH}/lib/libssl-iOS.a\"\n  lipo -create ${LIBCRYPTO_IOS[@]} -output \"${CURRENTPATH}/lib/libcrypto-iOS.a\"\n  echo \"\\n=====>iOS SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-iOS.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-iOS.a\"\nfi\nif [ ${#LIBSSL_IOSSIM[@]} -gt 0 ]; then\n  echo \"Build library for iOS Simulator...\"\n  lipo -create ${LIBSSL_IOSSIM[@]} -output \"${CURRENTPATH}/lib/libssl-iOS-Sim.a\"\n  lipo -create ${LIBCRYPTO_IOSSIM[@]} -output \"${CURRENTPATH}/lib/libcrypto-iOS-Sim.a\"\n  echo \"\\n=====>iOS Simulator SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-iOS-Sim.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-iOS-Sim.a\"\nfi\n\n# Build tvOS/Simulator library if selected for build\nif [ ${#LIBSSL_TVOS[@]} -gt 0 ]; then\n  echo \"Build library for tvOS...\"\n  lipo -create ${LIBSSL_TVOS[@]} -output \"${CURRENTPATH}/lib/libssl-tvOS.a\"\n  lipo -create ${LIBCRYPTO_TVOS[@]} -output \"${CURRENTPATH}/lib/libcrypto-tvOS.a\"\n  echo \"\\n=====>tvOS SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-tvOS.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-tvOS.a\"\nfi\nif [ ${#LIBSSL_TVOSSIM[@]} -gt 0 ]; then\n  echo \"Build library for tvOS...\"\n  lipo -create ${LIBSSL_TVOSSIM[@]} -output \"${CURRENTPATH}/lib/libssl-tvOS-Sim.a\"\n  lipo -create ${LIBCRYPTO_TVOSSIM[@]} -output \"${CURRENTPATH}/lib/libcrypto-tvOS-Sim.a\"\n  echo \"\\n=====>tvOS Simulator SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-tvOS-Sim.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-tvOS-Sim.a\"\nfi\n\n# Build watchOS/Simulator library if selected for build\nif [ ${#LIBSSL_WATCHOS[@]} -gt 0 ]; then\n  echo \"Build library for watchOS...\"\n  lipo -create ${LIBSSL_WATCHOS[@]} -output \"${CURRENTPATH}/lib/libssl-watchOS.a\"\n  lipo -create ${LIBCRYPTO_WATCHOS[@]} -output \"${CURRENTPATH}/lib/libcrypto-watchOS.a\"\n  echo \"\\n=====>watchOS SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-watchOS.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-watchOS.a\"\nfi\nif [ ${#LIBSSL_WATCHOSSIM[@]} -gt 0 ]; then\n  echo \"Build library for watchOS Simulator...\"\n  lipo -create ${LIBSSL_WATCHOSSIM[@]} -output \"${CURRENTPATH}/lib/libssl-watchOS-Sim.a\"\n  lipo -create ${LIBCRYPTO_WATCHOSSIM[@]} -output \"${CURRENTPATH}/lib/libcrypto-watchOS-Sim.a\"\n  echo \"\\n=====>watchOS Simulator SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-watchOS-Sim.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-watchOS-Sim.a\"\nfi\n\n# Build Catalyst library if selected for build\nif [ ${#LIBSSL_CATALYST[@]} -gt 0 ]; then\n  echo \"Build library for Catalyst...\"\n  lipo -create ${LIBSSL_CATALYST[@]} -output \"${CURRENTPATH}/lib/libssl-Catalyst.a\"\n  lipo -create ${LIBCRYPTO_CATALYST[@]} -output \"${CURRENTPATH}/lib/libcrypto-Catalyst.a\"\n  echo \"\\n=====>Catalyst SSL and Crypto lib files:\"\n  echo \"${CURRENTPATH}/lib/libssl-Catalyst.a\"\n  echo \"${CURRENTPATH}/lib/libcrypto-Catalyst.a\"\nfi\n\n# Copy include directory\ncp -R \"${INCLUDE_DIR}\" \"${CURRENTPATH}/include/\"\n\necho \"\\n=====>Include directory:\"\necho \"${CURRENTPATH}/include/\"\n\n# Only create intermediate file when building for multiple targets\n# For a single target, opensslconf.h is still present in $INCLUDE_DIR (and has just been copied to the target include dir)\nif [ ${#OPENSSLCONF_ALL[@]} -gt 1 ]; then\n\n  # Prepare intermediate header file\n  # This overwrites opensslconf.h that was copied from $INCLUDE_DIR\n  OPENSSLCONF_INTERMEDIATE=\"${CURRENTPATH}/include/openssl/opensslconf.h\"\n  cp \"${CURRENTPATH}/include/opensslconf-template.h\" \"${OPENSSLCONF_INTERMEDIATE}\"\n\n  # Loop all header files\n  LOOPCOUNT=0\n  for OPENSSLCONF_CURRENT in \"${OPENSSLCONF_ALL[@]}\" ; do\n\n    # Copy specific opensslconf file to include dir\n    cp \"${CURRENTPATH}/bin/${OPENSSLCONF_CURRENT}\" \"${CURRENTPATH}/include/openssl\"\n\n    # Determine define condition\n    case \"${OPENSSLCONF_CURRENT}\" in\n      *_ios_x86_64.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && TARGET_OS_SIMULATOR && TARGET_CPU_X86_64\"\n      ;;\n      *_ios_i386.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && TARGET_OS_SIMULATOR && TARGET_CPU_X86\"\n      ;;\n      *_ios_arm64.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && (TARGET_OS_EMBEDDED || TARGET_OS_SIMULATOR) && TARGET_CPU_ARM64\"\n      ;;\n      *_ios_arm64e.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && TARGET_OS_EMBEDDED && TARGET_CPU_ARM64E\"\n      ;;\n      *_ios_armv7s.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && TARGET_OS_EMBEDDED && TARGET_CPU_ARM && defined(__ARM_ARCH_7S__)\"\n      ;;\n      *_ios_armv7.h)\n        DEFINE_CONDITION=\"TARGET_OS_IOS && TARGET_OS_EMBEDDED && TARGET_CPU_ARM && !defined(__ARM_ARCH_7S__)\"\n      ;;\n      *_catalyst_x86_64.h)\n        DEFINE_CONDITION=\"(TARGET_OS_MACCATALYST || (TARGET_OS_IOS && TARGET_OS_SIMULATOR)) && TARGET_CPU_X86_64\"\n      ;;\n      *_catalyst_arm64.h)\n        DEFINE_CONDITION=\"(TARGET_OS_MACCATALYST || (TARGET_OS_IOS && TARGET_OS_SIMULATOR)) && TARGET_CPU_ARM64\"\n      ;;\n      *_tvos_x86_64.h)\n        DEFINE_CONDITION=\"TARGET_OS_TV && TARGET_OS_SIMULATOR && TARGET_CPU_X86_64\"\n      ;;\n      *_tvos_arm64.h)\n        DEFINE_CONDITION=\"TARGET_OS_TV && (TARGET_OS_EMBEDDED || TARGET_OS_SIMULATOR) && TARGET_CPU_ARM64\"\n      ;;\n      *_watchos_i386.h)\n        DEFINE_CONDITION=\"TARGET_OS_WATCH && TARGET_OS_SIMULATOR && TARGET_CPU_X86\"\n      ;;\n      *_watchos_sim_x86_64.h)\n        DEFINE_CONDITION=\"TARGET_OS_WATCH && TARGET_OS_SIMULATOR && TARGET_CPU_X86_64\"\n      ;;\n      *_watchos_sim_arm64.h)\n        DEFINE_CONDITION=\"TARGET_OS_WATCH && TARGET_OS_SIMULATOR && TARGET_CPU_ARM64\"\n      ;;\n      *_watchos_armv7k.h)\n        DEFINE_CONDITION=\"TARGET_OS_WATCH && TARGET_CPU_ARM\"\n      ;;\n      *_watchos_arm64_32.h)\n        DEFINE_CONDITION=\"TARGET_OS_WATCH && TARGET_CPU_ARM64\"\n      ;;\n      *)\n        # Don't run into unexpected cases by setting the default condition to false\n        DEFINE_CONDITION=\"0\"\n      ;;\n    esac\n\n    # Determine loopcount; start with if and continue with elif\n    LOOPCOUNT=$((LOOPCOUNT + 1))\n    if [ ${LOOPCOUNT} -eq 1 ]; then\n      echo \"#if ${DEFINE_CONDITION}\" >> \"${OPENSSLCONF_INTERMEDIATE}\"\n    else\n      echo \"#elif ${DEFINE_CONDITION}\" >> \"${OPENSSLCONF_INTERMEDIATE}\"\n    fi\n\n    # Add include\n    echo \"# include <openssl/${OPENSSLCONF_CURRENT}>\" >> \"${OPENSSLCONF_INTERMEDIATE}\"\n  done\n\n  # Finish\n  echo \"#else\" >> \"${OPENSSLCONF_INTERMEDIATE}\"\n  echo '# error Unable to determine target or target not included in OpenSSL build' >> \"${OPENSSLCONF_INTERMEDIATE}\"\n  echo \"#endif\" >> \"${OPENSSLCONF_INTERMEDIATE}\"\nfi\n\necho \"Done.\"\n\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "create-xcframework.sh",
          "type": "blob",
          "size": 1.7548828125,
          "content": "#!/bin/sh\n\nset -u\nXFWNAME=OpenSSL.xcframework\n\nif [ ! -d lib ]; then\n  echo \"Please run build-libssl.sh first!\"\n  exit 1\nfi\n\nif [ -d $XFWNAME ]; then\n  echo \"* Removing existing $XFWNAME copy\"\n  rm -rf $XFWNAME\nfi\n\nLIBS=\"\"\nLIBTOOL_FLAGS=\"-no_warning_for_no_symbols -static\"\n\n# Copy include files into temporary dir\nmake_include_dir()\n{\n  mkdir xfwinclude\n  if [ $? -ne 0 ]; then\n   exit 1\n  fi\n  cp -r include/openssl xfwinclude/\n  if [ $? -ne 0 ]; then\n   exit 1\n  fi\n}\n\nmake_module_map()\n{\n  MODULE_HEADERS=`ls include/openssl 2>/dev/null`\n  MODULEMAP=\"xfwinclude/openssl/module.modulemap\"\n  BLACKLISTED=\"asn1_mac.h\"\n\n  echo \"module OpenSSL {\" > $MODULEMAP\n\n  for MODULE_HEADER in $MODULE_HEADERS\n  do\n    if ! [[ \"$BLACKLISTED\" =~ .*\"$MODULE_HEADER\".* ]]; then\n      echo $MODULE_HEADER | sed -E 's/^.*$/  header \\\"&\\\"/' >> $MODULEMAP\n    fi\n  done\n\n  echo \"\\n  export *\\n}\" >> $MODULEMAP\n}\n\n# Combine libssl and libcrypto into single per-platform library\nmake_platform_lib()\n{\n  SLICE_LIBS=`ls lib/lib*-$SLICE.a 2>/dev/null`\n  SLICE_OUT=\"lib/OpenSSL-$SLICE.a\"\n  if [ ${#SLICE_LIBS} -gt 0 ]; then\n    echo \"* Creating library for $SLICE\"\n    libtool $LIBTOOL_FLAGS -o $SLICE_OUT $SLICE_LIBS\n    if [ $? -ne 0 ]; then\n      exit 1\n    fi\n    LIBS=\"$LIBS -library $SLICE_OUT -headers xfwinclude\"\n  else\n    echo \"* Skipping $SLICE. No libraries found.\"\n  fi\n}\n\n# Remove temporary files\nremove_temp_files()\n{\n  rm lib/OpenSSL-*.a 2>/dev/null\n  rm -r xfwinclude 2>/dev/null\n}\n\nremove_temp_files\nmake_include_dir\nmake_module_map\nPLATFORMS=\"iOS tvOS watchOS Catalyst\"\nfor PLATFORM in $PLATFORMS\ndo\n  SLICE=\"$PLATFORM\"\n  make_platform_lib\n  SLICE=\"$PLATFORM-Sim\"\n  make_platform_lib\ndone\n\necho \"* Creating $XFWNAME\"\nxcodebuild -create-xcframework $LIBS -output $XFWNAME\nremove_temp_files\necho \"Done!\"\n"
        },
        {
          "name": "include",
          "type": "tree",
          "content": null
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        },
        {
          "name": "travis-build.sh",
          "type": "blob",
          "size": 0.5283203125,
          "content": "#!/bin/sh\n\n# Log script output with prefix\nlog_output()\n{\n  while read INPUT; do\n    echo \"${1} ${INPUT}\"\n  done\n}\n\n# Shut up curl\nexport CURL_OPTIONS=\"-s\"\n\n# Build in current directory\n./build-libssl.sh --verbose-on-error | log_output \"TARGETS  \" &\nPID_TARGETS=$!\n\necho \"SCRIPT  Started jobs, waiting for jobs to finish\"\nwait ${PID_TARGETS}\n\nxcrun -sdk iphoneos lipo -info ./lib/*.a | log_output \"TARGETS  \"\n./create-xcframework.sh | log_output \"TARGETS  \"\nxcrun -sdk iphoneos lipo -info OpenSSL.xcframework/*/*.a | log_output \"TARGETS  \"\n\n"
        }
      ]
    }
  ]
}