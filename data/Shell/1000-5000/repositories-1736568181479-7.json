{
  "metadata": {
    "timestamp": 1736568181479,
    "page": 7,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "tianon/gosu",
      "stars": 4746,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".dockerignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".gitignore"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.0224609375,
          "content": ".git\nSHA256SUMS*\ngosu*\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 2.064453125,
          "content": "FROM golang:1.20.5-bookworm\n\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends \\\n\t\tarch-test \\\n\t\tfile \\\n\t; \\\n\trm -rf /var/lib/apt/lists/*\n\n# note: we cannot add \"-s\" here because then \"govulncheck\" does not work (see SECURITY.md); the ~0.2MiB increase (as of 2022-12-16, Go 1.18) is worth it\nENV BUILD_FLAGS=\"-v -trimpath -ldflags '-d -w'\"\n\nRUN set -eux; \\\n\t{ \\\n\t\techo '#!/usr/bin/env bash'; \\\n\t\techo 'set -Eeuo pipefail -x'; \\\n\t\techo 'eval \"go build $BUILD_FLAGS -o /go/bin/gosu-$ARCH\"'; \\\n\t\techo 'file \"/go/bin/gosu-$ARCH\"'; \\\n\t\techo 'if arch-test \"$ARCH\"; then'; \\\n# there's a fun QEMU + Go 1.18+ bug that causes our binaries (especially on ARM arches) to hang indefinitely *sometimes*, hence the \"timeout\" and looping here\n\t\techo '  try() { for (( i = 0; i < 30; i++ )); do if timeout 1s \"$@\"; then return 0; fi; done; return 1; }'; \\\n\t\techo '  try \"/go/bin/gosu-$ARCH\" --version'; \\\n\t\techo '  try \"/go/bin/gosu-$ARCH\" nobody id'; \\\n\t\techo '  try \"/go/bin/gosu-$ARCH\" nobody ls -l /proc/self/fd'; \\\n\t\techo 'fi'; \\\n\t} > /usr/local/bin/gosu-build-and-test.sh; \\\n\tchmod +x /usr/local/bin/gosu-build-and-test.sh\n\n# disable CGO for ALL THE THINGS (to help ensure no libc)\nENV CGO_ENABLED 0\n\nWORKDIR /go/src/github.com/tianon/gosu\n\nCOPY go.mod go.sum ./\nRUN set -eux; \\\n\tgo mod download; \\\n\tgo mod verify\n\nCOPY *.go ./\n\n# gosu-$(dpkg --print-architecture)\nRUN ARCH=amd64    GOARCH=amd64       gosu-build-and-test.sh\nRUN ARCH=i386     GOARCH=386         gosu-build-and-test.sh\nRUN ARCH=armel    GOARCH=arm GOARM=5 gosu-build-and-test.sh\nRUN ARCH=armhf    GOARCH=arm GOARM=6 gosu-build-and-test.sh\n#RUN ARCH=armhf    GOARCH=arm GOARM=7 gosu-build-and-test.sh # boo Raspberry Pi, making life hard (armhf-is-v7 vs armhf-is-v6 ...)\nRUN ARCH=arm64    GOARCH=arm64       gosu-build-and-test.sh\nRUN ARCH=mips64el GOARCH=mips64le    gosu-build-and-test.sh\nRUN ARCH=ppc64el  GOARCH=ppc64le     gosu-build-and-test.sh\nRUN ARCH=riscv64  GOARCH=riscv64     gosu-build-and-test.sh\nRUN ARCH=s390x    GOARCH=s390x       gosu-build-and-test.sh\n\nRUN set -eux; ls -lAFh /go/bin/gosu-*; file /go/bin/gosu-*\n"
        },
        {
          "name": "Dockerfile.test-alpine",
          "type": "blob",
          "size": 3.3125,
          "content": "FROM alpine:3.20\n\n# add \"nobody\" to ALL groups (makes testing edge cases more interesting)\nRUN cut -d: -f1 /etc/group | xargs -rtn1 addgroup nobody\n\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -ex'; \\\n\t\techo; \\\n\t\techo 'spec=\"$1\"; shift'; \\\n\t\techo; \\\n\t\techo 'expec=\"$1\"; shift'; \\\n\t\techo 'real=\"$(gosu \"$spec\" id -u):$(gosu \"$spec\" id -g):$(gosu \"$spec\" id -G)\"'; \\\n\t\techo '[ \"$expec\" = \"$real\" ]'; \\\n\t\techo; \\\n\t\techo 'expec=\"$1\"; shift'; \\\n\t\t# have to \"|| true\" this one because of \"id: unknown ID 1000\" (rightfully) having a nonzero exit code\n\t\techo 'real=\"$(gosu \"$spec\" id -un):$(gosu \"$spec\" id -gn):$(gosu \"$spec\" id -Gn)\" || true'; \\\n\t\techo '[ \"$expec\" = \"$real\" ]'; \\\n\t} > /usr/local/bin/gosu-t \\\n\t&& chmod +x /usr/local/bin/gosu-t\n\nCOPY gosu /usr/local/bin/\n\n# adjust users so we can make sure the tests are interesting\nRUN chgrp nobody /usr/local/bin/gosu \\\n\t&& chmod +s /usr/local/bin/gosu\nENV GOSU_PLEASE_LET_ME_BE_COMPLETELY_INSECURE_I_GET_TO_KEEP_ALL_THE_PIECES=\"I've seen things you people wouldn't believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain. Time to die.\"\nUSER nobody\nENV HOME /omg/really/gosu/nowhere\n# now we should be nobody, ALL groups, and have a bogus useless HOME value\n\nRUN id\n\nRUN gosu-t 0 \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t 0:0 '0:0:0' 'root:root:root'\nRUN gosu-t root \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t 0:root '0:0:0' 'root:root:root'\nRUN gosu-t root:0 '0:0:0' 'root:root:root'\nRUN gosu-t root:root '0:0:0' 'root:root:root'\nRUN gosu-t 1000 \"1000:$(id -g):$(id -g)\" \"1000:$(id -gn):$(id -gn)\"\nRUN gosu-t 0:1000 '0:1000:1000' 'root:1000:1000'\nRUN gosu-t 1000:1000 '1000:1000:1000' '1000:1000:1000'\nRUN gosu-t root:1000 '0:1000:1000' 'root:1000:1000'\nRUN gosu-t 1000:root '1000:0:0' '1000:root:root'\nRUN gosu-t 1000:daemon \"1000:$(id -g daemon):$(id -g daemon)\" '1000:daemon:daemon'\nRUN gosu-t games \"$(id -u games):$(id -g games):$(id -G games)\" 'games:games:games users'\nRUN gosu-t games:daemon \"$(id -u games):$(id -g daemon):$(id -g daemon)\" 'games:daemon:daemon'\n\nRUN gosu-t 0: \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t '' \"$(id -u):$(id -g):$(id -G)\" \"$(id -un):$(id -gn):$(id -Gn)\"\nRUN gosu-t ':0' \"$(id -u):0:0\" \"$(id -un):root:root\"\n\nRUN [ \"$(gosu 0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:1000 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:1000 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 1000 env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu 1000:0 env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu 1000:root env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu games env | grep '^HOME=')\" = 'HOME=/usr/games' ]\nRUN [ \"$(gosu games:daemon env | grep '^HOME=')\" = 'HOME=/usr/games' ]\n\n# make sure we error out properly in unexpected cases like an invalid username\nRUN ! gosu bogus true\nRUN ! gosu 0day true\nRUN ! gosu 0:bogus true\nRUN ! gosu 0:0day true\n\n# something missing?  some other functionality we could test easily?  PR! :D\n"
        },
        {
          "name": "Dockerfile.test-debian",
          "type": "blob",
          "size": 3.427734375,
          "content": "FROM debian:bookworm-slim\n\n# add \"nobody\" to ALL groups (makes testing edge cases more interesting)\nRUN cut -d: -f1 /etc/group | xargs -rtI'{}' usermod -aG '{}' nobody\n# emulate Alpine's \"games\" user (which is part of the \"users\" group)\nRUN usermod -aG users games\n\nRUN { \\\n\t\techo '#!/bin/sh'; \\\n\t\techo 'set -ex'; \\\n\t\techo; \\\n\t\techo 'spec=\"$1\"; shift'; \\\n\t\techo; \\\n\t\techo 'expec=\"$1\"; shift'; \\\n\t\techo 'real=\"$(gosu \"$spec\" id -u):$(gosu \"$spec\" id -g):$(gosu \"$spec\" id -G)\"'; \\\n\t\techo '[ \"$expec\" = \"$real\" ]'; \\\n\t\techo; \\\n\t\techo 'expec=\"$1\"; shift'; \\\n\t\t# have to \"|| true\" this one because of \"id: unknown ID 1000\" (rightfully) having a nonzero exit code\n\t\techo 'real=\"$(gosu \"$spec\" id -un):$(gosu \"$spec\" id -gn):$(gosu \"$spec\" id -Gn)\" || true'; \\\n\t\techo '[ \"$expec\" = \"$real\" ]'; \\\n\t} > /usr/local/bin/gosu-t \\\n\t&& chmod +x /usr/local/bin/gosu-t\n\nCOPY gosu /usr/local/bin/\n\n# adjust users so we can make sure the tests are interesting\nRUN chgrp nogroup /usr/local/bin/gosu \\\n\t&& chmod +s /usr/local/bin/gosu\nENV GOSU_PLEASE_LET_ME_BE_COMPLETELY_INSECURE_I_GET_TO_KEEP_ALL_THE_PIECES=\"I've seen things you people wouldn't believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain. Time to die.\"\nUSER nobody\nENV HOME /omg/really/gosu/nowhere\n# now we should be nobody, ALL groups, and have a bogus useless HOME value\n\nRUN id\n\nRUN gosu-t 0 \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t 0:0 '0:0:0' 'root:root:root'\nRUN gosu-t root \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t 0:root '0:0:0' 'root:root:root'\nRUN gosu-t root:0 '0:0:0' 'root:root:root'\nRUN gosu-t root:root '0:0:0' 'root:root:root'\nRUN gosu-t 1000 \"1000:$(id -g):$(id -g)\" \"1000:$(id -gn):$(id -gn)\"\nRUN gosu-t 0:1000 '0:1000:1000' 'root:1000:1000'\nRUN gosu-t 1000:1000 '1000:1000:1000' '1000:1000:1000'\nRUN gosu-t root:1000 '0:1000:1000' 'root:1000:1000'\nRUN gosu-t 1000:root '1000:0:0' '1000:root:root'\nRUN gosu-t 1000:daemon \"1000:$(id -g daemon):$(id -g daemon)\" '1000:daemon:daemon'\nRUN gosu-t games \"$(id -u games):$(id -g games):$(id -G games)\" 'games:games:games users'\nRUN gosu-t games:daemon \"$(id -u games):$(id -g daemon):$(id -g daemon)\" 'games:daemon:daemon'\n\nRUN gosu-t 0: \"0:0:$(id -G root)\" \"root:root:$(id -Gn root)\"\nRUN gosu-t '' \"$(id -u):$(id -g):$(id -G)\" \"$(id -un):$(id -gn):$(id -Gn)\"\nRUN gosu-t ':0' \"$(id -u):0:0\" \"$(id -un):root:root\"\n\nRUN [ \"$(gosu 0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:0 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:root env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 0:1000 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu root:1000 env | grep '^HOME=')\" = 'HOME=/root' ]\nRUN [ \"$(gosu 1000 env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu 1000:0 env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu 1000:root env | grep '^HOME=')\" = 'HOME=/' ]\nRUN [ \"$(gosu games env | grep '^HOME=')\" = 'HOME=/usr/games' ]\nRUN [ \"$(gosu games:daemon env | grep '^HOME=')\" = 'HOME=/usr/games' ]\n\n# make sure we error out properly in unexpected cases like an invalid username\nRUN ! gosu bogus true\nRUN ! gosu 0day true\nRUN ! gosu 0:bogus true\nRUN ! gosu 0:0day true\n\n# something missing?  some other functionality we could test easily?  PR! :D\n"
        },
        {
          "name": "INSTALL.md",
          "type": "blob",
          "size": 4.0908203125,
          "content": "# Installation\n\nWe assume installation inside Docker (probably not the right tool for most use-cases outside Docker), and that you don't have either `wget` or `ca-certificates` already installed -- adjust (and version bump `GOSU_VERSION`) as necessary!\n\n## `FROM debian`\n\n[Debian 9 (\"Debian Stretch\") or newer](https://packages.debian.org/gosu):\n\n```dockerfile\nRUN set -eux; \\\n\tapt-get update; \\\n\tapt-get install -y gosu; \\\n\trm -rf /var/lib/apt/lists/*; \\\n# verify that the binary works\n\tgosu nobody true\n```\n\nNewer `gosu` releases:\n\n```dockerfile\nENV GOSU_VERSION 1.17\nRUN set -eux; \\\n# save list of currently installed packages for later so we can clean up\n\tsavedAptMark=\"$(apt-mark showmanual)\"; \\\n\tapt-get update; \\\n\tapt-get install -y --no-install-recommends ca-certificates gnupg wget; \\\n\trm -rf /var/lib/apt/lists/*; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n# clean up fetch dependencies\n\tapt-mark auto '.*' > /dev/null; \\\n\t[ -z \"$savedAptMark\" ] || apt-mark manual $savedAptMark; \\\n\tapt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n```\n\n## `FROM alpine` (3.7+)\n\n```dockerfile\nENV GOSU_VERSION 1.17\nRUN set -eux; \\\n\t\\\n\tapk add --no-cache --virtual .gosu-deps \\\n\t\tca-certificates \\\n\t\tdpkg \\\n\t\tgnupg \\\n\t; \\\n\t\\\n\tdpkgArch=\"$(dpkg --print-architecture | awk -F- '{ print $NF }')\"; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n# clean up fetch dependencies\n\tapk del --no-network .gosu-deps; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n```\n\n## `FROM centos|oraclelinux|...|ubi|...` (RPM-based distro)\n\n```dockerfile\nENV GOSU_VERSION 1.17\nRUN set -eux; \\\n\t\\\n\trpmArch=\"$(rpm --query --queryformat='%{ARCH}' rpm)\"; \\\n\tcase \"$rpmArch\" in \\\n\t\taarch64) dpkgArch='arm64' ;; \\\n\t\tarmv[67]*) dpkgArch='armhf' ;; \\\n\t\ti[3456]86) dpkgArch='i386' ;; \\\n\t\tppc64le) dpkgArch='ppc64el' ;; \\\n\t\triscv64 | s390x) dpkgArch=\"$rpmArch\" ;; \\\n\t\tx86_64) dpkgArch='amd64' ;; \\\n\t\t*) echo >&2 \"error: unknown/unsupported architecture '$rpmArch'\"; exit 1 ;; \\\n\tesac; \\\n\twget -O /usr/local/bin/gosu \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch\"; \\\n\twget -O /usr/local/bin/gosu.asc \"https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc\"; \\\n\t\\\n# verify the signature\n\texport GNUPGHOME=\"$(mktemp -d)\"; \\\n\tgpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \\\n\tgpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \\\n\tgpgconf --kill all; \\\n\trm -rf \"$GNUPGHOME\" /usr/local/bin/gosu.asc; \\\n\t\\\n\tchmod +x /usr/local/bin/gosu; \\\n# verify that the binary works\n\tgosu --version; \\\n\tgosu nobody true\n```\n\nNotes:\n\n- `gosu`'s `armhf` builds are ARMv6 (not ARMv7 as they might be in Debian proper) thanks to Raspbian, hence the `armv6` allowance above\n- `rpm` architecture values sourced from https://rpmfind.net/linux/rpm2html/search.php?query=rpm\n\n## Others / Lazy Method\n\n```dockerfile\nCOPY --from=tianon/gosu /gosu /usr/local/bin/\n```\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 11.091796875,
          "content": "\n                                 Apache License\n                           Version 2.0, January 2004\n                        http://www.apache.org/licenses/\n\n   TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n   1. Definitions.\n\n      \"License\" shall mean the terms and conditions for use, reproduction,\n      and distribution as defined by Sections 1 through 9 of this document.\n\n      \"Licensor\" shall mean the copyright owner or entity authorized by\n      the copyright owner that is granting the License.\n\n      \"Legal Entity\" shall mean the union of the acting entity and all\n      other entities that control, are controlled by, or are under common\n      control with that entity. For the purposes of this definition,\n      \"control\" means (i) the power, direct or indirect, to cause the\n      direction or management of such entity, whether by contract or\n      otherwise, or (ii) ownership of fifty percent (50%) or more of the\n      outstanding shares, or (iii) beneficial ownership of such entity.\n\n      \"You\" (or \"Your\") shall mean an individual or Legal Entity\n      exercising permissions granted by this License.\n\n      \"Source\" form shall mean the preferred form for making modifications,\n      including but not limited to software source code, documentation\n      source, and configuration files.\n\n      \"Object\" form shall mean any form resulting from mechanical\n      transformation or translation of a Source form, including but\n      not limited to compiled object code, generated documentation,\n      and conversions to other media types.\n\n      \"Work\" shall mean the work of authorship, whether in Source or\n      Object form, made available under the License, as indicated by a\n      copyright notice that is included in or attached to the work\n      (an example is provided in the Appendix below).\n\n      \"Derivative Works\" shall mean any work, whether in Source or Object\n      form, that is based on (or derived from) the Work and for which the\n      editorial revisions, annotations, elaborations, or other modifications\n      represent, as a whole, an original work of authorship. For the purposes\n      of this License, Derivative Works shall not include works that remain\n      separable from, or merely link (or bind by name) to the interfaces of,\n      the Work and Derivative Works thereof.\n\n      \"Contribution\" shall mean any work of authorship, including\n      the original version of the Work and any modifications or additions\n      to that Work or Derivative Works thereof, that is intentionally\n      submitted to Licensor for inclusion in the Work by the copyright owner\n      or by an individual or Legal Entity authorized to submit on behalf of\n      the copyright owner. For the purposes of this definition, \"submitted\"\n      means any form of electronic, verbal, or written communication sent\n      to the Licensor or its representatives, including but not limited to\n      communication on electronic mailing lists, source code control systems,\n      and issue tracking systems that are managed by, or on behalf of, the\n      Licensor for the purpose of discussing and improving the Work, but\n      excluding communication that is conspicuously marked or otherwise\n      designated in writing by the copyright owner as \"Not a Contribution.\"\n\n      \"Contributor\" shall mean Licensor and any individual or Legal Entity\n      on behalf of whom a Contribution has been received by Licensor and\n      subsequently incorporated within the Work.\n\n   2. Grant of Copyright License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      copyright license to reproduce, prepare Derivative Works of,\n      publicly display, publicly perform, sublicense, and distribute the\n      Work and such Derivative Works in Source or Object form.\n\n   3. Grant of Patent License. Subject to the terms and conditions of\n      this License, each Contributor hereby grants to You a perpetual,\n      worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n      (except as stated in this section) patent license to make, have made,\n      use, offer to sell, sell, import, and otherwise transfer the Work,\n      where such license applies only to those patent claims licensable\n      by such Contributor that are necessarily infringed by their\n      Contribution(s) alone or by combination of their Contribution(s)\n      with the Work to which such Contribution(s) was submitted. If You\n      institute patent litigation against any entity (including a\n      cross-claim or counterclaim in a lawsuit) alleging that the Work\n      or a Contribution incorporated within the Work constitutes direct\n      or contributory patent infringement, then any patent licenses\n      granted to You under this License for that Work shall terminate\n      as of the date such litigation is filed.\n\n   4. Redistribution. You may reproduce and distribute copies of the\n      Work or Derivative Works thereof in any medium, with or without\n      modifications, and in Source or Object form, provided that You\n      meet the following conditions:\n\n      (a) You must give any other recipients of the Work or\n          Derivative Works a copy of this License; and\n\n      (b) You must cause any modified files to carry prominent notices\n          stating that You changed the files; and\n\n      (c) You must retain, in the Source form of any Derivative Works\n          that You distribute, all copyright, patent, trademark, and\n          attribution notices from the Source form of the Work,\n          excluding those notices that do not pertain to any part of\n          the Derivative Works; and\n\n      (d) If the Work includes a \"NOTICE\" text file as part of its\n          distribution, then any Derivative Works that You distribute must\n          include a readable copy of the attribution notices contained\n          within such NOTICE file, excluding those notices that do not\n          pertain to any part of the Derivative Works, in at least one\n          of the following places: within a NOTICE text file distributed\n          as part of the Derivative Works; within the Source form or\n          documentation, if provided along with the Derivative Works; or,\n          within a display generated by the Derivative Works, if and\n          wherever such third-party notices normally appear. The contents\n          of the NOTICE file are for informational purposes only and\n          do not modify the License. You may add Your own attribution\n          notices within Derivative Works that You distribute, alongside\n          or as an addendum to the NOTICE text from the Work, provided\n          that such additional attribution notices cannot be construed\n          as modifying the License.\n\n      You may add Your own copyright statement to Your modifications and\n      may provide additional or different license terms and conditions\n      for use, reproduction, or distribution of Your modifications, or\n      for any such Derivative Works as a whole, provided Your use,\n      reproduction, and distribution of the Work otherwise complies with\n      the conditions stated in this License.\n\n   5. Submission of Contributions. Unless You explicitly state otherwise,\n      any Contribution intentionally submitted for inclusion in the Work\n      by You to the Licensor shall be under the terms and conditions of\n      this License, without any additional terms or conditions.\n      Notwithstanding the above, nothing herein shall supersede or modify\n      the terms of any separate license agreement you may have executed\n      with Licensor regarding such Contributions.\n\n   6. Trademarks. This License does not grant permission to use the trade\n      names, trademarks, service marks, or product names of the Licensor,\n      except as required for reasonable and customary use in describing the\n      origin of the Work and reproducing the content of the NOTICE file.\n\n   7. Disclaimer of Warranty. Unless required by applicable law or\n      agreed to in writing, Licensor provides the Work (and each\n      Contributor provides its Contributions) on an \"AS IS\" BASIS,\n      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n      implied, including, without limitation, any warranties or conditions\n      of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n      PARTICULAR PURPOSE. You are solely responsible for determining the\n      appropriateness of using or redistributing the Work and assume any\n      risks associated with Your exercise of permissions under this License.\n\n   8. Limitation of Liability. In no event and under no legal theory,\n      whether in tort (including negligence), contract, or otherwise,\n      unless required by applicable law (such as deliberate and grossly\n      negligent acts) or agreed to in writing, shall any Contributor be\n      liable to You for damages, including any direct, indirect, special,\n      incidental, or consequential damages of any character arising as a\n      result of this License or out of the use or inability to use the\n      Work (including but not limited to damages for loss of goodwill,\n      work stoppage, computer failure or malfunction, or any and all\n      other commercial damages or losses), even if such Contributor\n      has been advised of the possibility of such damages.\n\n   9. Accepting Warranty or Additional Liability. While redistributing\n      the Work or Derivative Works thereof, You may choose to offer,\n      and charge a fee for, acceptance of support, warranty, indemnity,\n      or other liability obligations and/or rights consistent with this\n      License. However, in accepting such obligations, You may act only\n      on Your own behalf and on Your sole responsibility, not on behalf\n      of any other Contributor, and only if You agree to indemnify,\n      defend, and hold each Contributor harmless for any liability\n      incurred by, or claims asserted against, such Contributor by reason\n      of your accepting any such warranty or additional liability.\n\n   END OF TERMS AND CONDITIONS\n\n   APPENDIX: How to apply the Apache License to your work.\n\n      To apply the Apache License to your work, attach the following\n      boilerplate notice, with the fields enclosed by brackets \"[]\"\n      replaced with your own identifying information. (Don't include\n      the brackets!)  The text should be enclosed in the appropriate\n      comment syntax for the file format. We also recommend that a\n      file or class name and description of purpose be included on the\n      same \"printed page\" as the copyright notice for easier\n      identification within third-party archives.\n\n   Copyright [yyyy] [name of copyright owner]\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.822265625,
          "content": "# gosu\n\nThis is a simple tool grown out of the simple fact that `su` and `sudo` have very strange and often annoying TTY and signal-forwarding behavior.  They're also somewhat complex to setup and use (especially in the case of `sudo`), which allows for a great deal of expressivity, but falls flat if all you need is \"run this specific application as this specific user and get out of the pipeline\".\n\nThe core of how `gosu` works is stolen directly from how Docker/libcontainer itself starts an application inside a container (and in fact, is using the `/etc/passwd` processing code directly from libcontainer's codebase).\n\n```console\n$ gosu\nUsage: ./gosu user-spec command [args]\n   eg: ./gosu tianon bash\n       ./gosu nobody:root bash -c 'whoami && id'\n       ./gosu 1000:1 id\n\n./gosu version: 1.1 (go1.3.1 on linux/amd64; gc)\n```\n\nOnce the user/group is processed, we switch to that user, then we `exec` the specified process and `gosu` itself is no longer resident or involved in the process lifecycle at all.  This avoids all the issues of signal passing and TTY, and punts them to the process invoking `gosu` and the process being invoked by `gosu`, where they belong.\n\n## Warning\n\nThe core use case for `gosu` is to step _down_ from `root` to a non-privileged user during container startup (specifically in the `ENTRYPOINT`, usually).\n\nUses of `gosu` beyond that could very well suffer from vulnerabilities such as CVE-2016-2779 (from which the Docker use case naturally shields us); see [`tianon/gosu#37`](https://github.com/tianon/gosu/issues/37) for some discussion around this point.\n\n## Installation\n\nHigh-level steps:\n\n1. download `gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }')` as `gosu`\n2. download `gosu-$(dpkg --print-architecture | awk -F- '{ print $NF }').asc` as `gosu.asc`\n3. fetch my public key (to verify your download): `gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4`\n4. `gpg --batch --verify gosu.asc gosu`\n5. `chmod +x gosu`\n\nFor explicit `Dockerfile` instructions, see [`INSTALL.md`](INSTALL.md).\n\n## Why?\n\n```console\n$ docker run -it --rm ubuntu:trusty su -c 'exec ps aux'\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0  46636  2688 ?        Ss+  02:22   0:00 su -c exec ps a\nroot         6  0.0  0.0  15576  2220 ?        Rs   02:22   0:00 ps aux\n$ docker run -it --rm ubuntu:trusty sudo ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  3.0  0.0  46020  3144 ?        Ss+  02:22   0:00 sudo ps aux\nroot         7  0.0  0.0  15576  2172 ?        R+   02:22   0:00 ps aux\n$ docker run -it --rm -v $PWD/gosu-amd64:/usr/local/bin/gosu:ro ubuntu:trusty gosu root ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nroot         1  0.0  0.0   7140   768 ?        Rs+  02:22   0:00 ps aux\n```\n\nAdditionally, due to the fact that `gosu` is using Docker's own code for processing these `user:group`, it has exact 1:1 parity with Docker's own `--user` flag.\n\nIf you're curious about the edge cases that `gosu` handles, see [`Dockerfile.test-alpine`](Dockerfile.test-alpine) for the \"test suite\" (and the associated [`test.sh`](test.sh) script that wraps this up for testing arbitrary binaries).\n\n(Note that `sudo` has different goals from this project, and it is *not* intended to be a `sudo` replacement; for example, see [this Stack Overflow answer](https://stackoverflow.com/a/48105623) for a short explanation of why `sudo` does `fork`+`exec` instead of just `exec`.)\n\n## Alternatives\n\n### `chroot`\n\nWith the `--userspec` flag, `chroot` can provide similar benefits/behavior:\n\n```console\n$ docker run -it --rm ubuntu:trusty chroot --userspec=nobody / ps aux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nnobody       1  5.0  0.0   7136   756 ?        Rs+  17:04   0:00 ps aux\n```\n\n### `setpriv`\n\nAvailable in newer `util-linux` (`>= 2.32.1-0.2`, in Debian; https://manpages.debian.org/buster/util-linux/setpriv.1.en.html):\n\n```console\n$ docker run -it --rm buildpack-deps:buster-scm setpriv --reuid=nobody --regid=nogroup --init-groups ps faux\nUSER       PID %CPU %MEM    VSZ   RSS TTY      STAT START   TIME COMMAND\nnobody       1  5.0  0.0   9592  1252 pts/0    RNs+ 23:21   0:00 ps faux\n```\n\n### `su-exec`\n\nIn the Alpine Linux ecosystem, [`su-exec`](https://github.com/ncopa/su-exec) is a minimal re-write of `gosu` in C, making for a much smaller binary, and is available in the `main` Alpine package repository.  However, as of version 0.2 it has [a pretty severe parser bug](https://github.com/ncopa/su-exec/pull/26) that hasn't been in a release for many years (and which the buggy behavior is that typos lead to running code as root unexpectedly 😬).\n\n### Others\n\nI'm not terribly familiar with them, but a few other alternatives I'm aware of include:\n\n- `chpst` (part of `runit`)\n"
        },
        {
          "name": "SECURITY.md",
          "type": "blob",
          "size": 3.2431640625,
          "content": "# CVEs\n\nThis project does not rebuild/release to \"fix\" CVEs which do not apply to actual builds of `gosu`.  For example, this includes any CVE in Go which applies to interfaces that `gosu` does not ever invoke, such as `net/http`, `archive/tar`, `encoding/xml`, etc.\n\nBefore reporting that `gosu` is \"vulnerable\" to a particular CVE, please run our [`./govulncheck-with-excludes.sh`](govulncheck-with-excludes.sh) wrapper around [`govulncheck`](https://pkg.go.dev/golang.org/x/vuln/cmd/govulncheck) to determine whether the latest release is *actually* using the vulnerable functionality.  See [this excellent blog post](https://go.dev/blog/vuln) from the Go team for more information about the `govulncheck` tool and the methodology by which it is maintained.\n\nIf you have a tool which is reporting that `gosu` is vulnerable to a particular CVE but `govulncheck` does not agree, **please** report this as a false positive to your CVE scanning vendor so that they can improve their tooling.  (If you wish to verify that your reported CVE is part of `govulncheck`'s dataset and thus covered by their tool, you can check [the vulndb repository](https://github.com/golang/vulndb) where they track those.)\n\nOur `govulncheck` wrapper script ([`govulncheck-with-excludes.sh`](govulncheck-with-excludes.sh)) may include a small set of vulnerabilities that will be reported by `govulncheck` which do not apply (due to other mitigations or otherwise).  See comments in that script for details.\n\n## Version Updates\n\nSimilar to the how traditional Linux distributions such as Debian handle rebuilding binaries between stable releases / for updated compilers (or rather, the situations and reasons for which they do *not* do so), and in the same spirit as the above CVE policy and [Go's \"Minimal Version Selection\"](https://research.swtch.com/vgo-mvs), we do *not* update the compiler/rebuild with a newer compiler unless there is a compelling functional or security reason in the code that ends up as part of the `gosu` binary that warrants doing so.\n\nAs above, if you have a \"security scanning\" tool which does not agree with this policy, please take that up with your scanning tool vendor (report as a false positive, improve the tool to use `govulncheck`, etc).\n\n# Reporting Vulnerabilities\n\nThe surface area of `gosu` itself is really limited -- it only directly contains a small amount of Go code to instrument an interface that is part of [`github.com/moby/sys/user` (the Docker Engine's `--user` parsing code, to be exact)](https://github.com/moby/sys/tree/main/user) (and which itself is a pretty limited interface) intended for providing the same behavior as Docker's `--user` flag (switching from `root` to a less privileged user), but from within an already running container.\n\nIf you believe you have found a new vulnerability in `gosu`, chances are very high that it's actually a vulnerability in `github.com/moby/sys/user` or `golang.org/x/sys`, and should be [reported appropriately and responsibly](https://github.com/moby/moby/blob/HEAD/SECURITY.md).\n\nAfter all this, if you still believe you have discovered a novel vulnerability in the limited code that is `gosu` itself, please [use GitHub's (private) advisory reporting feature](https://github.com/tianon/gosu/security/advisories/new) to responsibly report it.\n"
        },
        {
          "name": "build.sh",
          "type": "blob",
          "size": 0.306640625,
          "content": "#!/bin/bash\nset -e\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nset -x\n\ndocker build --pull -t gosu .\n\nrm -f gosu* SHA256SUMS*\ndocker run --rm gosu sh -c 'cd /go/bin && tar -c gosu*' | tar -xv\nsha256sum gosu* | tee SHA256SUMS\nfile gosu*\nls -lFh gosu* SHA256SUMS*\n\n\"./gosu-$(dpkg --print-architecture)\" --help\n"
        },
        {
          "name": "go.mod",
          "type": "blob",
          "size": 0.107421875,
          "content": "module github.com/tianon/gosu\n\ngo 1.20\n\nrequire (\n\tgithub.com/moby/sys/user v0.1.0\n\tgolang.org/x/sys v0.1.0\n)\n"
        },
        {
          "name": "go.sum",
          "type": "blob",
          "size": 0.310546875,
          "content": "github.com/moby/sys/user v0.1.0 h1:WmZ93f5Ux6het5iituh9x2zAG7NFY9Aqi49jjE1PaQg=\ngithub.com/moby/sys/user v0.1.0/go.mod h1:fKJhFOnsCN6xZ5gSfbM6zaHGgDJMrqt9/reuj4T7MmU=\ngolang.org/x/sys v0.1.0 h1:kunALQeHf1/185U1i0GOB/fy1IPRDDpuoOOqRReG57U=\ngolang.org/x/sys v0.1.0/go.mod h1:oPkhp1MJrh7nUepCBck5+mAzfO9JrbApNNgaTdGDITg=\n"
        },
        {
          "name": "govulncheck-with-excludes.sh",
          "type": "blob",
          "size": 2.1025390625,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\n# a wrapper / replacement for \"govulncheck\" which allows for excluding vulnerabilities\n# (https://github.com/golang/go/issues/59507)\n\nexcludeVulns=\"$(jq -nc '[\n\n\t# fixed in Go 1.20.5+\n\t# https://pkg.go.dev/vuln/GO-2023-1840\n\t# we already mitigate setuid in our code\n\t\"GO-2023-1840\", \"CVE-2023-29403\",\n\t# (https://github.com/tianon/gosu/issues/128#issuecomment-1607803883)\n\n\tempty # trailing comma hack (makes diffs smaller)\n]')\"\nexport excludeVulns\n\nif ! command -v govulncheck > /dev/null; then\n\tgovulncheck() {\n\t\tlocal user; user=\"$(id -u):$(id -g)\"\n\t\tlocal args=(\n\t\t\t--rm --interactive --init\n\t\t\t--user \"$user\"\n\t\t\t--env HOME=/tmp\n\t\t\t--env GOPATH=/tmp/go\n\t\t\t--volume govulncheck:/tmp\n\t\t\t--env CGO_ENABLED=0\n\t\t\t--mount \"type=bind,src=$PWD,dst=/wd,ro\"\n\t\t\t--workdir /wd\n\t\t\t\"${GOLANG_IMAGE:-golang:latest}\"\n\t\t\tsh -euc '\n\t\t\t\t# https://github.com/golang/vuln/releases\n\t\t\t\t# (pinning version to avoid format changes like https://github.com/tianon/gosu/issues/144 surprising us unexpectedly)\n\t\t\t\tgo install golang.org/x/vuln/cmd/govulncheck@v1.1.2 > /dev/null\n\t\t\t\texec \"$GOPATH/bin/govulncheck\" \"$@\"\n\t\t\t' --\n\t\t)\n\t\tdocker run \"${args[@]}\" \"$@\"\n\t}\nfi\n\nif out=\"$(govulncheck \"$@\")\"; then\n\tprintf '%s\\n' \"$out\"\n\texit 0\nfi\n\njson=\"$(govulncheck -json \"$@\")\"\n\nvulns=\"$(jq <<<\"$json\" -cs '\n\t(\n\t\tmap(\n\t\t\t.osv // empty\n\t\t\t| { key: .id, value: . }\n\t\t)\n\t\t| from_entries\n\t) as $meta\n\t# https://github.com/tianon/gosu/issues/144\n\t| map(\n\t\t.finding // empty\n\t\t# https://github.com/golang/vuln/blob/3740f5cb12a3f93b18dbe200c4bcb6256f8586e2/internal/scan/template.go#L97-L104\n\t\t| select((.trace[0].function // \"\") != \"\")\n\t\t| .osv\n\t)\n\t| unique\n\t| map($meta[.])\n')\"\nif [ \"$(jq <<<\"$vulns\" -r 'length')\" -le 0 ]; then\n\tprintf '%s\\n' \"$out\"\n\texit 1\nfi\n\nfiltered=\"$(jq <<<\"$vulns\" -c '\n\t(env.excludeVulns | fromjson) as $exclude\n\t| map(select(\n\t\t.id as $id\n\t\t| $exclude | index($id) | not\n\t))\n')\"\n\ntext=\"$(jq <<<\"$filtered\" -r 'map(\"- \\(.id) (aka \\(.aliases | join(\", \")))\\n\\n\\t\\(.details | gsub(\"\\n\"; \"\\n\\t\"))\") | join(\"\\n\\n\")')\"\n\nif [ -z \"$text\" ]; then\n\tprintf 'No vulnerabilities found.\\n'\n\texit 0\nelse\n\tprintf '%s\\n' \"$text\"\n\texit 1\nfi\n"
        },
        {
          "name": "hub",
          "type": "tree",
          "content": null
        },
        {
          "name": "main.go",
          "type": "blob",
          "size": 2.712890625,
          "content": "package main // import \"github.com/tianon/gosu\"\n\nimport (\n\t\"os\"\n\t\"os/exec\"\n\t\"runtime\"\n\t\"syscall\"\n)\n\nfunc init() {\n\t// make sure we only have one process and that it runs on the main thread (so that ideally, when we Exec, we keep our user switches and stuff)\n\truntime.GOMAXPROCS(1)\n\truntime.LockOSThread()\n}\n\nfunc version() string {\n\t// 1.17 (go1.18.2 on linux/amd64; gc)\n\treturn Version + ` (` + runtime.Version() + ` on ` + runtime.GOOS + `/` + runtime.GOARCH + `; ` + runtime.Compiler + `)`\n}\n\nfunc usage() string {\n\tself := os.Args[0]\n\tv := version()\n\tt := `\nUsage: ` + self + ` user-spec command [args]\n   eg: ` + self + ` tianon bash\n       ` + self + ` nobody:root bash -c 'whoami && id'\n       ` + self + ` 1000:1 id\n\n` + self + ` version: ` + v + `\n` + self + ` license: Apache-2.0 (full text at https://github.com/tianon/gosu)\n`\n\treturn t[1:]\n}\n\nfunc exit(code int, w *os.File, ss ...string) {\n\tfor i, s := range ss {\n\t\tif i > 0 {\n\t\t\tw.Write([]byte{' '})\n\t\t}\n\t\tw.Write([]byte(s))\n\t}\n\tw.Write([]byte{'\\n'})\n\tos.Exit(code)\n}\n\nfunc main() {\n\tif ok := os.Getenv(\"GOSU_PLEASE_LET_ME_BE_COMPLETELY_INSECURE_I_GET_TO_KEEP_ALL_THE_PIECES\"); ok != \"I've seen things you people wouldn't believe. Attack ships on fire off the shoulder of Orion. I watched C-beams glitter in the dark near the Tannhäuser Gate. All those moments will be lost in time, like tears in rain. Time to die.\" {\n\t\tif fi, err := os.Stat(\"/proc/self/exe\"); err != nil {\n\t\t\texit(1, os.Stderr, \"error:\", err.Error())\n\t\t} else if mode := fi.Mode(); mode&os.ModeSetuid != 0 {\n\t\t\t// ... oh no\n\t\t\texit(1, os.Stderr, \"error:\", os.Args[0], \"appears to be installed with the 'setuid' bit set, which is an *extremely* insecure and completely unsupported configuration! (what you want instead is likely 'sudo' or 'su')\")\n\t\t} else if mode&os.ModeSetgid != 0 {\n\t\t\t// ... oh no\n\t\t\texit(1, os.Stderr, \"error:\", os.Args[0], \"appears to be installed with the 'setgid' bit set, which is not quite *as* insecure as 'setuid', but still not great, and definitely a completely unsupported configuration! (what you want instead is likely 'sudo' or 'su')\")\n\t\t}\n\t}\n\n\tif len(os.Args) >= 2 {\n\t\tswitch os.Args[1] {\n\t\tcase \"--help\", \"-h\", \"-?\":\n\t\t\texit(0, os.Stdout, usage())\n\t\tcase \"--version\", \"-v\":\n\t\t\texit(0, os.Stdout, version())\n\t\t}\n\t}\n\tif len(os.Args) <= 2 {\n\t\texit(1, os.Stderr, usage())\n\t}\n\n\t// clear HOME so that SetupUser will set it\n\tos.Unsetenv(\"HOME\")\n\n\tif err := SetupUser(os.Args[1]); err != nil {\n\t\texit(1, os.Stderr, \"error: failed switching to '\"+os.Args[1]+\"':\", err.Error())\n\t}\n\n\tname, err := exec.LookPath(os.Args[2])\n\tif err != nil {\n\t\texit(1, os.Stderr, \"error:\", err.Error())\n\t}\n\n\tif err = syscall.Exec(name, os.Args[2:], os.Environ()); err != nil {\n\t\texit(1, os.Stderr, \"error: exec failed:\", err.Error())\n\t}\n}\n"
        },
        {
          "name": "setup-user.go",
          "type": "blob",
          "size": 1.27734375,
          "content": "package main\n\nimport (\n\t\"os\"\n\n\t\"github.com/moby/sys/user\"\n\t\"golang.org/x/sys/unix\"\n)\n\n// this function comes from https://github.com/opencontainers/runc/blob/18c313be729dd02b17934af41e32116a28b4b3bf/libcontainer/init_linux.go#L472-L561\n// we don't use that directly because it isn't exported *and* we don't want that whole package/runc imported here\n// (also, because we need minor modifications)\n\n// SetupUser changes the groups, gid, and uid for the user inside the container\nfunc SetupUser(u string) error {\n\t// Set up defaults.\n\tdefaultExecUser := user.ExecUser{\n\t\tUid:  unix.Getuid(),\n\t\tGid:  unix.Getgid(),\n\t\tHome: \"/\",\n\t}\n\tpasswdPath, err := user.GetPasswdPath()\n\tif err != nil {\n\t\treturn err\n\t}\n\tgroupPath, err := user.GetGroupPath()\n\tif err != nil {\n\t\treturn err\n\t}\n\texecUser, err := user.GetExecUserPath(u, &defaultExecUser, passwdPath, groupPath)\n\tif err != nil {\n\t\treturn err\n\t}\n\tif err := unix.Setgroups(execUser.Sgids); err != nil {\n\t\treturn err\n\t}\n\tif err := unix.Setgid(execUser.Gid); err != nil {\n\t\treturn err\n\t}\n\tif err := unix.Setuid(execUser.Uid); err != nil {\n\t\treturn err\n\t}\n\t// if we didn't get HOME already, set it based on the user's HOME\n\tif envHome := os.Getenv(\"HOME\"); envHome == \"\" {\n\t\tif err := os.Setenv(\"HOME\", execUser.Home); err != nil {\n\t\t\treturn err\n\t\t}\n\t}\n\treturn nil\n}\n"
        },
        {
          "name": "sign.sh",
          "type": "blob",
          "size": 0.2744140625,
          "content": "#!/bin/bash\nset -e\n\ncd \"$(dirname \"$(readlink -f \"$BASH_SOURCE\")\")\"\n\nset -x\nrm -f gosu*.asc SHA256SUMS.asc\nfor f in gosu*; do\n\tgpg --output \"$f.asc\" --detach-sign \"$f\"\ndone\nsha256sum gosu* > SHA256SUMS\ngpg --output SHA256SUMS.asc --detach-sign SHA256SUMS\nls -lFh gosu* SHA256SUMS*\n"
        },
        {
          "name": "test.sh",
          "type": "blob",
          "size": 1.1435546875,
          "content": "#!/usr/bin/env bash\nset -Eeuo pipefail\n\nusage() {\n\techo \"usage: $0 [--platform] gosu-binary\"\n\techo \"   eg: $0 ./gosu-amd64\"\n\techo \"       $0 --debian ./gosu-amd64\"\n}\n\ndf='Dockerfile.test-alpine'\ncase \"${1:-}\" in\n\t--alpine | --debian)\n\t\tdf=\"Dockerfile.test-${1#--}\"\n\t\tshift\n\t\t;;\nesac\n\ngosu=\"${1:-}\"\nshift || { usage >&2; exit 1; }\n[ -f \"$gosu\" ] || { usage >&2; exit 1; }\n\ntrap '{ set +x; echo; echo FAILED; echo; } >&2' ERR\n\nset -x\n\ndir=\"$(mktemp -d -t gosu-test-XXXXXXXXXX)\"\nbase=\"$(basename \"$dir\")\"\nimg=\"gosu-test:$base\"\ntrap \"rm -rf '$dir'\" EXIT\ncp -T \"$df\" \"$dir/Dockerfile\"\ncp -T \"$gosu\" \"$dir/gosu\"\ndocker build -t \"$img\" \"$dir\"\nrm -rf \"$dir\"\ntrap - EXIT\n\ntrap \"docker rm -f '$base' > /dev/null; docker rmi -f '$img' > /dev/null\" EXIT\n\n# using explicit \"--init=false\" in case dockerd is running with \"--init\" (because that will skew our process numbers)\ndocker run -d --init=false --name \"$base\" \"$img\" gosu root sleep 1000\nsleep 1 # give it plenty of time to get through \"gosu\" and into the \"sleep\"\n[ \"$(docker top \"$base\" | wc -l)\" = 2 ]\n# \"docker top\" should have only two lines\n# -- ps headers and a single line for the single process running in the container\n"
        },
        {
          "name": "version.go",
          "type": "blob",
          "size": 0.0361328125,
          "content": "package main\n\nconst Version = \"1.17\"\n"
        }
      ]
    }
  ]
}