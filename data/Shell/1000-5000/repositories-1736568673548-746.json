{
  "metadata": {
    "timestamp": 1736568673548,
    "page": 746,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc0OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ZZROTDesign/docker-clean",
      "stars": 1292,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".editorconfig",
          "type": "blob",
          "size": 0.18359375,
          "content": "root = true\n\n[*]\nindent_style = space\nindent_size = 4\nend_of_line = lf\ncharset = utf-8\ntrim_trailing_whitespace = true\ninsert_final_newline = true\n\n[*.md]\ntrim_trailing_whitespace = false\n"
        },
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.009765625,
          "content": ".DS_Store\n"
        },
        {
          "name": ".imdone",
          "type": "tree",
          "content": null
        },
        {
          "name": ".travis.yml",
          "type": "blob",
          "size": 1.390625,
          "content": "language: bash\nsudo: required\nservices: docker\nenv:\n  global:\n  - DOCKER_VERSION=1.12.0-0~trusty\n  - DOCKER_COMPOSE_VERSION=1.7.0\naddons:\n  apt:\n    sources:\n    - debian-sid    # Grab shellcheck from the Debian repo (o_O)\n    packages:\n    - shellcheck\nbefore_install:\n- docker -v\n- sudo rm /usr/local/bin/docker-compose\n- curl -L https://github.com/docker/compose/releases/download/${DOCKER_COMPOSE_VERSION}/docker-compose-`uname\n  -s`-`uname -m` > docker-compose\n- chmod +x docker-compose\n- sudo mv docker-compose /usr/local/bin\n- sudo add-apt-repository ppa:duggan/bats --yes\n- sudo apt-get update -qq\n- sudo apt-get install -qq bats\nscript:\n- shellcheck docker-clean\n- bats tests/docker-clean.bats\nnotifications:\n  slack:\n    secure: MYDLBgnN/PBccyQy93CnEJMLjMa7F+AsIzzfzwPPl8DPj4K2dXoc7zlmaBxbg4KNRunJWND6I4JuN9D+zqUwRrcIuIVx38qv2CHr6PDmF7oS6w2oFw7FnA35jPVshMAqZz2nXc1eFyrnsZ71YV/9XNXr4M5gJn7d8OTHtknqfBm4V8bUQX7Zldo9tK7OziPZ+dyV3TlUqEyZe3YHf4xoSPT00B75JT/zIo+REJr5Wvw4JYScMgbR54WRveGNqSOZbcK8VRAB/NN3Kt0kPuCWjtZbBgNzkIVxoydbN6rrKUh5k+o/4WdfiBkflbrjEfXuAzG3jj1g29xr32WZQlLxUW8uJXPUwTdAnyJ563176bG2pLQxUXLsjanC8Zh9LdREwhg7KYOOE0Gd91PjP2xRJc6RtI+tAV/MURRLxaMbSbzDBAalVVbB4jdQRuEjPp439hfqsqN6P47xnKrq3sV9thjc95PcO6aS2sYTXTo5Qeeh2inz+9GWnzZCU59lD+elVqncuQ44k6j7vsjhv6SnmCHZZgb7PC3CVIrZqwcuGw8eVIJqZ5+nIz3h3qRAnGuGkM+WWiI/avi87BdK8IAPKMG4KJFNw6EWsqXFUIGe4RfqW0nEXAyowePeSDC3ewNFMN2uBVhmKjDI7ynEmpti0yeW5hso58p+lRkasqx86/0=\n"
        },
        {
          "name": "CONTRIBUTING.md",
          "type": "blob",
          "size": 1.2109375,
          "content": "# Contributing to Docker-Clean\n\n## Team members\n\n* [Killian Brackey](https://github.com/killianbrackey) killian@zzrot.com T: [@kmbrackey](https://twitter.com/kmbrackey)\n* [Sean Kilgarriff](https://github.com/Skilgarriff) sean@zzrot.com T: [@seankilgarriff](https://twitter.com/SeanKilgarriff)\n\nDon't hesitate to get in contact with either one of us with problems, questions, etc.\n\n\n## Adding new features\n\n* Fork it!\n* Create your feature branch: git checkout -b my-new-feature\n* Commit your changes: git commit -am 'Add some feature'\n* Push to the branch: git push origin my-new-feature\n* Submit a pull request :D\n\n## ShellCheck\n\nWe use ShellCheck to keep our code consistent and readable. Any feature pushed that does not pass a ShellCheck will fail on Travis build, and thus we cannot accept the pull request. Please lint your code before submitting it! :).\n\n(Keep in mind that bats does not have to be ShellChecked, and thus if you are adding tests to .bats don't worry about linting.)\n\nYou can either download the ShellCheck program: https://github.com/koalaman/shellcheck or use the ShellCheck website: http://www.shellcheck.net/\n\n\nDon’t get discouraged! We estimate that the response time from the\nmaintainers is around: 24 hours.\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0322265625,
          "content": "Copyright (c) <2016> <ZZROT LLC>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.98046875,
          "content": ".PHONY: release\n\nSHELL := /bin/bash\nPKG_NAME=$(shell basename `pwd`)\nGIT_BRANCH=$(shell git rev-parse --abbrev-ref HEAD)\nDOCKER_CLEAN_VERSION=v2.0.4\nIMAGE_BASE_NAME=zzrot/docker-clean\nDOCKER_VERSION_TAG_1_11_1=$(IMAGE_BASE_NAME):docker-1.11.1\nDOCKER_VERSION_TAG_LATEST=$(IMAGE_BASE_NAME)\nDOCKER_VERSION_TAG_DOCKER_CLEAN_VERSION=$(IMAGE_BASE_NAME):$(DOCKER_CLEAN_VERSION)\nDOCKER_TAG_LITE=$(IMAGE_BASE_NAME):$(DOCKER_CLEAN_VERSION)-lite\nDOCKER_FILE_DIR_PATH=./dockerfiles\n\nrelease:\n\tdocker build -t $(DOCKER_VERSION_TAG_LATEST) -f $(DOCKER_FILE_DIR_PATH)/Dockerfile .\n\tdocker build -t $(DOCKER_VERSION_TAG_1_11_1) -f $(DOCKER_FILE_DIR_PATH)/Dockerfile-1.11.1 .\n\tdocker build -t $(DOCKER_TAG_LITE) -f $(DOCKER_FILE_DIR_PATH)/Dockerfile-lite .\n\tdocker push $(DOCKER_VERSION_TAG_LATEST)\n\tdocker push $(DOCKER_VERSION_TAG_1_11_1)\n\tdocker push $(DOCKER_TAG_LITE)\n\n    docker tag $(DOCKER_VERSION_TAG_LATEST) $(DOCKER_VERSION_TAG_DOCKER_CLEAN_VERSION)\n    docker push $(DOCKER_VERSION_TAG_DOCKER_CLEAN_VERSION)\n\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 4.8974609375,
          "content": "[![Build Status](https://travis-ci.org/ZZROTDesign/docker-clean.svg?branch=v2.0.4)](https://travis-ci.org/ZZROTDesign/docker-clean)[![GitHub release](https://img.shields.io/github/release/zzrotDesign/docker-clean.svg)](https://github.com/ZZROTDesign/docker-clean/releases)\n# Docker-Clean\n\n[![Join the chat at https://gitter.im/ZZROTDesign/docker-clean](https://badges.gitter.im/ZZROTDesign/docker-clean.svg)](https://gitter.im/ZZROTDesign/docker-clean?utm_source=badge&utm_medium=badge&utm_campaign=pr-badge&utm_content=badge)\n\nA simple Shell script to clean up the Docker Daemon.\n\n## Requirements\n\nIn order to use the volume capabilities, it is required that the Docker Daemon is at least version 1.9+\n\n\n## Install\n\n    curl -s https://raw.githubusercontent.com/ZZROTDesign/docker-clean/v2.0.4/docker-clean |\n    sudo tee /usr/local/bin/docker-clean > /dev/null && \\\n    sudo chmod +x /usr/local/bin/docker-clean\n\n## Homebrew Install\n    brew update\n    brew install docker-clean\n\n**UPDATE:** Docker-clean v2.0.3+ will be available without using our tap.  However we will keep both maintained.\n\n#### Upgrade (for new versions)\n\n    brew update && brew upgrade docker-clean\n\nFor curl installs, re-running the script above will install the newest version.\n\n## Running from a docker container\n\n``` shell\ndocker run --rm -v /var/run/docker.sock:/var/run/docker.sock zzrot/docker-clean [optional flags below]\n```\n\n*Docker Image tags can be found on [Docker Hub](https://hub.docker.com/r/zzrot/docker-clean/tags/)*\nfor different docker-clean versions 2.0.4+ with various image sizes.  \n\n\n## Usage\n\nFor a more in depth look at the usage and commands run without browsing the script itself check out our [USAGE.md](https://github.com/ZZROTDesign/docker-clean/blob/master/USAGE.md).\n\n    docker-clean [optional flags below]\n\n  Default without arguments deletes stopped containers, dangling volumes, and untagged images.\n\n      stop         Stops and removes all containers, cleans dangling volumes, and networks\n\n      images       Removes all tagged and untagged images, stopped containers, dangling volumes, and networks\n\n      run          Removes all stopped containers, untagged images, dangling volumes, and networks\n\n      all          Stops and removes all containers, images, volumes and networks\n\n\n     \"Additional Flag options:\"\n\n     -n   or --dry-run    Adding this additional flag will list items to be\n                          removed without executing any stopping or removing commands\"\n\n     -s   or --stop       Stops all running containers\n\n    -c   or --containers  Removes all stopped containers\n\n    -i   or --images      Removes all untagged images\n\n    -net or --networks    Removes all empty Networks (all network cleans are only empty)\n\n    -H   or --host        Specifies the docker host to run against\n\t                      Useful for docker swarm maintenance ie: -H 127.0.0.1:4000\"\n\n     -r   or --restart     Restarts the docker machine/daemon\n\n     -d   or --created     By default, CREATED containers are set to be removed.  Adding this\n                           flag will ensure that all created containers are not cleaned\n\n     -t   or --tagged      Removes all tagged images\n\n     -a   or --all         Stops and removes all Containers, Images, AND Restarts docker\n\n     -l   or --log         Adding this as an additional flag will list all\n                           image, volume, and container deleting output\n\n\n\n## Contributing to Docker-Clean\n\n### Team members\n\n* [Sean Kilgarriff](https://github.com/Skilgarriff) sean@zzrot.com T: [@seankilgarriff](https://twitter.com/SeanKilgarriff)\n* [Killian Brackey](https://github.com/killianbrackey) killian@zzrot.com T: [@kmbrackey](https://twitter.com/kmbrackey)\n\nDon't hesitate to get in contact with either one of us with problems, questions, etc.\n\nCheck out our [blog post](https://blog.zzrot.com/docker-clean-utility/) on why we put this script together.\n\n\n### Adding new features\n\n* Fork it!\n* Create your feature branch: git checkout -b my-new-feature\n* Commit your changes: git commit -am 'Add some feature'\n* Push to the branch: git push origin my-new-feature\n* Submit a pull request :D\n\nFor any new features you hope to see, you can also edit the REQUESTS.md file.\nhttps://github.com/ZZROTDesign/docker-clean/blob/master/REQUESTS.md\n\nDon’t get discouraged! We estimate that the response time from the\nmaintainers is around: 24 hours.\n\n### ShellCheck\n\nWe use ShellCheck to keep our code consistent and readable. Any feature pushed that does not pass a ShellCheck will fail on Travis build, and thus we cannot accept the pull request. Please lint your code before submitting it! :).\n\n(Keep in mind that bats does not have to be ShellChecked, and thus if you are adding tests to .bats don't worry about linting.)\n\nYou can either download the ShellCheck program: https://github.com/koalaman/shellcheck or use the ShellCheck website: http://www.shellcheck.net/\n\n## License\n\nThe code is available under the [MIT License](/LICENSE).\n"
        },
        {
          "name": "REQUESTS.md",
          "type": "blob",
          "size": 0.7666015625,
          "content": "# Requests for new Features\nEdit this document for any suggestions on features you would like added.\nFeel free to open an issue as well, but this helps us consolidate new features and details. It also can act as a TODO list.\n\n#### The basic template (loose):\nDetail Explanations: detail\n\nPlease fill out as much information as you find applicable, this may include commands you would like to be implemented.\n\n## Examples\n**Completed**\n\nNew Feature: dry run\nExplanations: run through commands to see what will be cleaned before removing anything.\nDesired Flags: -n, --dry-run\n`docker-clean --dry-run`\n\n**Completed**\nNew Feature: clean networking\nExplanation: networks should also have the option to be cleaned.\nDesired Flags: -net, --networks\n`docker-clean -net`\n\n## New Features Below\n"
        },
        {
          "name": "USAGE.md",
          "type": "blob",
          "size": 9.111328125,
          "content": "# Usage for Docker Clean v2.0.0\nThis guide walks through proper usage and briefly explains the command(s) behind the usage for those that are familiar with some of the commands Docker provides.  The commands listed run after sanity checks to confirm the command will run properly.\n\n    docker-clean [optional flags below]\n\n    Default without arguments deletes stopped containers, dangling volumes, and untagged images.\n\n     \"Additional Flag options:\"\n\n     -n   or --dry-run    Adding this additional flag will list items to be\n                          removed without executing any stopping or removing commands\"\n\n     -s   or --stop       Stops all running containers\n\n    -c   or --containers  Removes all stopped containers\n\n    -i   or --images      Removes all untagged images\n\n    -net or --networks    Removes all empty Networks (all network cleans are only empty)\n\n    -H   or --host        Specifies the docker host to run against\n\t                      Useful for docker swarm maintenance ie: -H 127.0.0.1:4000\"\n\n     -r   or --restart     Restarts the docker machine/daemon\n\n     -d   or --created     By default, CREATED containers are set to be removed.  Adding this\n                           flag will ensure that all created containers are not cleaned\n\n     -t   or --tagged      Removes all tagged images\n\n     -a   or --all         Stops and removes all Containers, Images, AND Restarts docker\n\n     -l   or --log         Adding this as an additional flag will list all\n                           image, volume, and container deleting output\n\n\n## Dry Run\nBefore going and trying the default usage, if you have sensitive material you wouldn't like cleared and would like to see\nthe results of a run, here is how to run all of the commands with a dry run.\n\nUsage for dry-run options:\n\n`docker-clean [flags below, excluding -l and --log] -n` or `--dry-run`\n\nThis will print out the result of each command run in a wrapper that doesn't execute the command.  With the newest version (2.0.0+) you can use the `-n` or `--dry-run` as any flag in your execution.\n\n\n## Default Usage\nAfter the very quick installation docker-clean will be ready to go out of the box.  Assuming the Docker daemon is running, trying\n\n`$ docker-clean`\n\nCommands run:\n\n```\n# Containers\ndocker rmi -f $(docker images -aq --filter \"dangling=true\")\ndocker volume rm $(docker volume ls -qf dangling=true)\ndocker network rm <EMPTY NETWORKS, see below>\n```\n\nwill complete the default run through.  This simple clean function will only clean out images that do not have a tag, dangling volumes, and empty networks.  The network command is a bit more involved and not listed above.  We run checks to ensure the networks are unused by inspecting the containers themselves.\n\n## Non Flag Options\n\nThe following options run a series of commands and are built with particular workflow usages in mind.  Each option can be individually accessed by the flags to handpick usage or supplement these options.  These options are optional the flags can be run independent of these options.\n\n#### Examples\n\n```$ docker-clean stop```\n\nThis command will stop and remove all containers (including created), clean dangling volumes, and empty networks.\n\n```$ docker-clean images```\n\nThis command will remove all tagged and untagged images not being used by running containers.  It will also remove dangling volumes and empty networks.\n\n```$ docker-clean run```\n\nFor those of you that are familiar with versions of docker-clean before v2.0.0, this has the same functionality as the old default run.  This removes all stopped containers, untagged images, dangling volumes, and empty networks.\n\n``$ docker-clean all``\n\nThis is similar to the ```-a```, ```-all``` flag option except it will not restart docker as the flags will.  It stops and removes all containers, tagged and untagged images, dangling volumes, and networks.\n\nAt the bottom of this document is an example of the output of a dry run using this option.\n\n\n## Flags\n\nThen come the additional options and flags.  At any point running with a flag `-h`, `--help`, or a flag not specified will bring up the flag reference menu.  The help menu is available at the top of this document as well for reference.\n\n#### Stop Containers\n\n`$ docker-clean -s` or `--stop`\n\nCommand run:\n\n```\ndocker stop $(docker ps -q)\n```\n\nStops all running containers and will not remove any images or containers, volumes, or networks.\n\n\n#### Clean Containers\n\n`$ docker-clean -c` or `--containers`\n\nCommands run:\n\n```\ndocker rmi -f $(docker images -aq --filter \"STATUS=exited\")\n```\nThis flag only removes stopped containers.\n\n#### Clean Images and Containers\n\n`$ docker-clean -i` or `--images`\n\nRemoves all containers and images.\n\n#### Clean All and Restart Daemon\n\n`$ docker-clean -a` or `--all`\n\nCommands run:\n\n```\ndocker rm -f $(docker ps -a -q)\ndocker rm -f $(docker images -a -q)\ndocker volume rm $(docker volume ls -qf dangling=true)\n```\nRestart (Mac, Windows)\n\n`docker-machine restart`\n\nRestart (Linux)\n\n`sudo service docker restart`\n\n\nStops and removes all containers, images, and dangling volumes and restarts the docker daemon (supports OSX, Windows, and Linux).\n\n#### Specifying the Docker Host\n\nFor running on a docker host, you can use the flag, useful for maintenance of docker swarm integrations, you can use the `-H` or `--host` to provide a host.\n\nExample:\n\n`$ docker-clean -H 127.0.0.1:4000`\n\nSpecifies to run the docker-clean command at 127.0.0.1:4000\n\n### Additional Flags\n\nFor debugging purposes and so you can see the more traditional output from these commands there are a couple of additional flags.\n\n#### Version\n`docker-clean -v` or `--version`\n\nPrints the docker clean version\n\n#### Log (Verbose)\nAdding `-l` or `--log` as an additional flag will print out the full output from the docker commands on each of the other options as opposed to the suppressed output with counts.  This typically is the ID of the images, containers, and volumes being removed.  The id's have been left in for the `-s`, `--stop` function.\n\nExamples:\n```\n$ docker-clean -l` or `--log`\n$ docker-clean --containers --log\n$ docker-clean -s -l\n```\n\n## Dry Run Example\n\nBelow is a dry run example output.\nContainers:\n```\n    $ docker ps -a\n    CONTAINER ID        IMAGE                COMMAND                  CREATED             STATUS              PORTS                     NAMES\n    8da973093341        training/webapp      \"python app.py\"          3 seconds ago       Up 3 seconds        0.0.0.0:32769->5000/tcp   web\n    3424ffbb418d        zzrot/alpine-caddy   \"tini caddy --conf /e\"   3 seconds ago       Up 3 seconds                                  extra\n```\n\nImages:\n```\n$ docker images -a\nREPOSITORY            TAG                 IMAGE ID            CREATED             SIZE\nzzrot/alpine-caddy    latest              5dac1ba1d438        2 days ago          48.16 MB\nzzrot/alpine-node     latest              ab87df339f32        3 weeks ago         25.48 MB\nzzrot/whale-awkward   latest              08e0a241de0d        4 weeks ago         516 B\ntraining/webapp       latest              6fae60ef3446        11 months ago       348.8 MB\n```\n\n```\n$ docker-clean all --dry-run\nDry run on stoppage of running containers:\nRunning without -n or --dry-run flag will stop the listed containers:\n\nContainer ID: 8da973093341 IMAGE: \"python\"/[\"app.py\"] NAME: \"/web\"\nContainer ID: 3424ffbb418d IMAGE: \"tini\"/[\"caddy\",\"--conf\",\"/etc/Caddyfile\"] NAME: \"/extra\"\n\nDry run on removal of stopped containers:\nRunning without -n or --dry-run flag will remove the listed containers:\n\nContainer ID: 8da973093341 IMAGE: \"python\"/[\"app.py\"] NAME: \"/web\"\nContainer ID: 3424ffbb418d IMAGE: \"tini\"/[\"caddy\",\"--conf\",\"/etc/Caddyfile\"] NAME: \"/extra\"\n\nDry run on removal of images:\nRunning without -n or --dry-run flag will remove the listed images:\n\nREPOSITORY/TAG: [\"zzrot/alpine-caddy:latest\"] IMAGE ID: 5dac1ba1d438\nREPOSITORY/TAG: [\"zzrot/alpine-node:latest\"] IMAGE ID: ab87df339f32\nREPOSITORY/TAG: [\"zzrot/whale-awkward:latest\"] IMAGE ID: 08e0a241de0d\nREPOSITORY/TAG: [\"training/webapp:latest\"] IMAGE ID: 6fae60ef3446\nYou've cleared approximately MB: 422 of space!\n\nDry run on removal of dangling volumes:\nRunning without -n or --dry-run flag will stop the listed dangling volumes:\nDRIVER: \"local\" NAME: 45bc5fb98fc95e67512e75fcc56fd52b0f443c17010850517f97a30340e45249\n\nDRIVER: \"local\" NAME: 75e24a294862504426e2e4c4aa83bf69c5f8a5ebc9586518e7f1dd26b7202333\n\nDangling volumes that would be removed from containers to be deleted...\nVOLUME: [{\"Name\":\"a7a4020d3739b4306e16a6ddd776b852ed08b4d0cdf4387e048ea123b756941f\",\"Source\":\"/mnt/sda1/var/lib/docker/volumes/a7a4020d3739b4306e16a6ddd776b852ed08b4d0cdf4387e048ea123b756941f/_data\",\"Destination\":\"/webapp\",\"Driver\":\"local\",\"Mode\":\"\",\"RW\":true,\"Propagation\":\"\"}]\n\nVOLUME: [{\"Name\":\"71c6e02b11056d2b379063314b0826773167d8cb11058752821aa6375737805b\",\"Source\":\"/mnt/sda1/var/lib/docker/volumes/71c6e02b11056d2b379063314b0826773167d8cb11058752821aa6375737805b/_data\",\"Destination\":\"/webapp\",\"Driver\":\"local\",\"Mode\":\"\",\"RW\":true,\"Propagation\":\"\"}]\n\n\nDry run on removal of networks:\nNo empty networks. Running without -n or --dry-run flag won't remove any networks.\n\n```\n## Issues\nIf you find any issues with these commands, it would be great if you opened an issue, or forked and submitted a pull request!\n"
        },
        {
          "name": "docker-clean",
          "type": "blob",
          "size": 25.5224609375,
          "content": "#!/bin/bash\n# Maintained by Sean Kilgarriff and Killian Brackey at ZZROT Design\n#\n# The MIT License (MIT)\n# Copyright © 2016 ZZROT LLC <docker@zzrot.com>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the “Software”), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n\n#ENVIRONMENT VARIABLES\n\n# @info:\tDocker-clean current version\ndeclare VERSION=\"2.0.4\"\n\n# @info:\tRequired Docker version for Volume functionality\ndeclare REQUIRED_VERSION=\"1.9.0\"\n\n# @info:\tRequired version for docker network inspect filters\ndeclare NETWORK_REQUIRED_VERSION=\"1.10.0\"\n\n# @info:\tBoolean for determining which network cleaning function to use\ndeclare HAS_NETWORK_VERSION=false\n\n# @info:\tBoolean for storing Docker version info\ndeclare HAS_VERSION=false\n\n# @info:\tBoolean for verbose mode\ndeclare VERBOSE=false\n\n# @info:\tBoolean for dry run to see before removing\ndeclare DRY_RUN=false\n\n# @info:    Boolean to flag if Containers should be stopped.\ndeclare STOP_CONTAINERS=false\n\n# @info:\tBoolean to flag if containers should be deleted.\ndeclare CLEAN_CONTAINERS=false\n\n# @info:\tBoolean to flag if images should be deleted.\ndeclare CLEAN_IMAGES=false\n\n# @info:\tBoolean to flag if volumes should be deleted.\ndeclare CLEAN_VOLUMES=false\n\n# @info:\tBoolean to flag if networks should be deleted.\ndeclare CLEAN_NETWORKS=false\n\n# @info:\tBoolean to flag if machine/daemon should be reset.\ndeclare RESTART=false\n\n# @info:    Boolean to flag if tagged images are to be deleted.\ndeclare DELETE_TAGGED=false\n\n# @info:    Boolean to flag if Containers with status Created will be deleted or not.\ndeclare DELETE_CREATED=true\n\n# @info:\tGlobal arrays of objects that would be deleted, used for dry run accuracy.\ndeclare -a CONTAINERS_TO_DELETE\t# Currently in use\ndeclare -a IMAGES_IN_USE\t\t\t# Currently in use\ndeclare -a IMAGES_TO_DELETE\t\t\t# Currently in use\ndeclare -a REMAINING_CONTAINERS\t\t# Currently in use\ndeclare -a EMPTY_NETWORKS\t\t\t# Currently in use\n#declare -a VOLUMES_TO_DELETE\t\t# Not in use\n\n# @info:\tDocker host to use (default to empty or localhost).\ndeclare DOCKER_HOST\n\n#FUNCTIONS\n\n# @info:  Overrides the system docker daemon so we can pass in a host\n# @args:\tGlobal Arguments $@\nfunction docker(){\n\tif [ -z \"$DOCKER_HOST\" ]; then\n\t\tcommand \"docker\" \"$@\"\n\telse\n\t\tcommand \"docker\" -H \"$DOCKER_HOST\" \"$@\"\n\tfi\n}\n\n# @info:    Parses and validates the CLI arguments\n# @args:\tGlobal Arguments $@\n# TODO: handle use case where just -n or just -l flag is given\nfunction parseCli(){\n\tif [[ \"$#\" -eq 0 ]]; then\n\t\t#CLEAN_CONTAINERS=false \t\t# changed to false so doesn't exit containers\n\t\tCLEAN_IMAGES=true\n\t\tCLEAN_VOLUMES=true\n\t\tCLEAN_NETWORKS=true\n\t\tdockerClean\n\tfi\n\tif [[ \"$#\" -gt 0 ]]; then\n\t\t#If there is only one flag, and it is dry run or log, set defaults\n\t\tkey=\"$1\"\n\t\tcase $key in\n\t\t\t-n | --dry-run) CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\t\t-l | --log) CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\tesac\n\twhile [[ \"$#\" -gt 0 ]]; do\n\t\tkey=\"$1\"\n\t\tval=\"$2\"\n\t\tcase $key in\n\t\t\tstop ) STOP_CONTAINERS=true; CLEAN_CONTAINERS=true; CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\t\timages ) DELETE_TAGGED=true; CLEAN_CONTAINERS=true; CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\t\trun ) CLEAN_CONTAINERS=true; CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\t\tall ) STOP_CONTAINERS=true; DELETE_TAGGED=true; CLEAN_CONTAINERS=true; CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true ;;\n\t\t\t-H | --host) DOCKER_HOST=$val; shift;;\n\t\t\t-s | --stop) STOP_CONTAINERS=true ;;\n\t\t\t-n | --dry-run) DRY_RUN=true ;;\n\t\t\t-l | --log) VERBOSE=true ;;\n\t\t\t-c | --containers) CLEAN_CONTAINERS=true ;;\n\t\t\t-i | --images) CLEAN_IMAGES=true ;;\n\t\t\t-m | --volumes) CLEAN_VOLUMES=true ;;\n\t\t\t-net | --networks) CLEAN_NETWORKS=true ;;\n\t\t\t-r | --restart) RESTART=true ;;\n\t\t\t-d | --created) DELETE_CREATED=false ;;\n\t\t\t-t | --tagged) DELETE_TAGGED=true ;;\n\t\t\t-a | --all) STOP_CONTAINERS=true; DELETE_TAGGED=true; CLEAN_CONTAINERS=true; CLEAN_IMAGES=true; CLEAN_VOLUMES=true; CLEAN_NETWORKS=true; RESTART=true ;;\n\t\t\t-v | --version) version; exit 0 ;;\n\t\t\t-h | --help | *) usage; exit 0 ;;\n\t\tesac\n\t\tshift\n\tdone\n\tdockerClean\nfi\n}\n\n# @info:\tPrints out Docker-clean current version\nfunction version {\n\techo $VERSION\n}\n\n# @info:\tPrints out usage\nfunction usage {\n\techo\n\techo \"  Docker Clean Usage Options: \"\n\techo \"-------------------------------\"\n\techo\n  \techo \"-h or --help        Opens this help menu\"\n  \techo \"-v or --version     Prints the current docker-clean version\"\n  \techo\n\techo \" Running without any options will remove dangling volumes and untagged images only.\"\n\techo \" All of the options are option, and while they overlap they can all be run concurrently.\"\n\techo \" NOTE: By default, created containers will always be included, see -d, --created.\"\n\techo\n\techo \"stop         Stops and removes all containers, cleans dangling volumes, and networks\"\n\techo\n\techo \"images       Removes all tagged and untagged images, stopped containers, \"\n\techo \"             dangling volumes, and networks\"\n\techo\n\techo \"run          Removes all stopped containers, untagged images, dangling volumes, and networks\"\n\techo\n\techo \"all          Stops and removes all containers, images, volumes and networks\"\n\techo\n\techo \"Additional Flag options:\"\n\techo\n\techo \"-H   or --host        Specifies the docker host to run against\"\n\techo \"                      Useful for docker swarm maintenance\"\n\techo \"                      ie: -H 127.0.0.1:4000\"\n\techo\n\techo \"-n   or --dry-run     Adding this additional flag will list items to be\"\n\techo \"                      removed without executing any stopping or removing commands\"\n\techo\n\techo \"-s   or --stop        Stops all running containers\"\n\techo\n  \techo \"-c   or --containers  Removes all stopped containers\"\n\techo\n  \techo \"-i   or --images      Removes all untagged images\"\n\techo\n  \techo \"-net or --networks    Removes all empty Networks (all network cleans are only empty)\"\n\techo\n\techo \"-r   or --restart     Restarts the docker machine/daemon\"\n\techo\n\techo \"-d   or --created     By default, CREATED containers are set to be removed.  Adding this\"\n\techo \"                      flag will ensure that all created containers are not cleaned\"\n\techo\n\techo \"-t   or --tagged      Removes all tagged images\"\n\techo\n\techo \"-a   or --all         Stops and removes all Containers, Images, AND Restarts docker\"\n\techo\n\techo \"-l   or --log         Adding this as an additional flag will list all\"\n\techo \"                      image, volume, and container deleting output\"\n\n\n}\n\n# @info:\tPrints out 3-point version (000.000.000) without decimals for comparison\n# @args:\tDocker Version of the client\nfunction printVersion {\n\techo \"$@\" | awk -F. '{ printf(\"%03d%03d%03d\\n\", $1,$2,$3); }';\n}\n\n# @info:\tChecks Docker Version and then configures the HAS_VERSION var.\nfunction checkVersion  {\n\tlocal Docker_Version\n\tDocker_Version=\"$(docker --version | sed 's/[^0-9.]*\\([0-9.]*\\).*/\\1/')\"\n\tif [ \"$(printVersion \"$Docker_Version\")\" -gt \"$(printVersion \"$REQUIRED_VERSION\")\" ]; then\n\t\tHAS_VERSION=true\n    else\n        echo \"Your Version of Docker is below 1.9.0 which is required for full functionality.\"\n        echo \"Please upgrade your Docker daemon. Until then, the Volume and Network processing will not work.\"\n    fi\n}\n\n# @info:\tChecks if network inspect filters are compatible\nfunction checkNetworkVersion {\n\tlocal Docker_Version\n\tDocker_Version=\"$(docker --version | sed 's/[^0-9.]*\\([0-9.]*\\).*/\\1/')\"\n\tif [ \"$(printVersion \"$Docker_Version\")\" -gt \"$(printVersion \"$NETWORK_REQUIRED_VERSION\")\" ]; then\n\t\techo true\n\tfi\n}\n\n# @info:\tChecks to see if Docker is installed and connected\nfunction checkDocker {\n    #Run Docker ps to make sure that docker is installed\n    #As well as that the Daemon is connected.\n    docker ps &>/dev/null\n    DOCKER_CHECK=$?\n\n    #If Docker Check returns 1 (Error), send a message and exit.\n\tif [ ! \"$DOCKER_CHECK\" ]; then\n        echo \"Docker is either not installed, or the Docker Daemon is not currently connected.\"\n        echo \"Please check your installation and try again.\"\n        exit 1;\n    fi\n}\n\n# @info: Stops all running docker containers.\nfunction stop {\n\tIFS=$'\\n' read -rd '' -a runningContainers <<<\"$(docker ps -q)\"\n\tif $DRY_RUN; then\n\t\techo \"Dry run on stoppage of running containers:\"\n\t\tif [[ ! $runningContainers ]]; then\n\t\t\techo \"No running containers. Running without -n or --dry-run flag won't stop any containers.\"\n            echo #Spacing\n\t\telse\n\t\t\techo \"Running without -n or --dry-run flag will stop the listed containers:\"\n            echo #Spacing\n\t\t\tfor i in \"${runningContainers[@]}\"; do\n\t\t\t\tlocal name\n\t\t\t\tlocal path\n\t\t\t\tlocal args\n\t\t\t\tname=\"$(docker inspect -f '{{json .Name}}' \"$i\")\"\n\t\t\t\tpath=\"$(docker inspect -f '{{json .Path}}' \"$i\")\"\n\t\t\t\targs=\"$(docker inspect -f '{{json .Args}}' \"$i\")\"\n\t\t\t\techo \"Container ID: $i IMAGE: $path/$args NAME: $name\"\n\t\t\tdone\n            echo #Spacing\n\t\tfi # End Dry Run\n\telse\n\t\tif [ ! \"$runningContainers\" ]; then\n\t\t\techo \"No running containers!\"\n\t\telse\n\t\t\tlocal count=0\n\t\t\techo \"Stopping running containers...\"\n\n\t\t\tif [ ! -d /proc/1/cgroup ] ; then\n\t\t\t    self_id=$(grep 'docker/' < /proc/1/cgroup | tail -1 | sed 's/^.*\\///' | cut -c 1-12)\n\t\t\t    echo \"Not stopping self: $self_id\"\n\t\t\tfi\n\n\t\t\tfor i in \"${runningContainers[@]}\"; do\n\t\t\t\tlocal output\n\t\t\t\tlocal status\n\t\t\t\tlocal name\n\t\t\t\tlocal path\n\t\t\t\tlocal args\n\t\t\t\tname=\"$(docker inspect -f '{{json .Name}}' \"$i\")\"\n\t\t\t\tpath=\"$(docker inspect -f '{{json .Path}}' \"$i\")\"\n\t\t\t\targs=\"$(docker inspect -f '{{json .Args}}' \"$i\")\"\n\t\t\t\tif [ \"$i\" != \"$self_id\" ] ; then\n\t\t\t\t    docker stop \"$i\" &>/dev/null\n\n                    status=$?\n                    if [[ $status -eq 0 ]] ; then\n                        count=$((count+1))\n                        output=\"STOPPED: ID: $i IMAGE: $path/$args NAME: $name\"\n                        echo \"$output\" | log\n                    else\n                        output=\"COULD NOT STOP: ID: $i IMAGE: $path/$args NAME: $name\"\n                        echo \"$output\" | log\n                    fi\n                fi\n\t\t\tdone\n\t\t\techo \"Containers stopped: $count\"\n\t\tfi\n\tfi\n}\n\n\n# @info:\tRemoves all stopped docker containers.\nfunction cleanContainers {\n\tif $DRY_RUN; then\n\t\techo \"Dry run on removal of stopped containers:\"\n\t\tif [[ ! ${CONTAINERS_TO_DELETE[@]} ]]; then\n\t\t\techo \"No removable containers. Running without -n or --dry-run flag won't remove any containers.\"\n\t\t\techo #Spacing\n\t\tfi\n\t\tif [[ ${CONTAINERS_TO_DELETE[@]} ]]; then\n\t\t\techo \"Running without -n or --dry-run flag will remove the listed containers:\"\n            echo #Spacing\n\t\t\tfor i in \"${CONTAINERS_TO_DELETE[@]}\"; do\n\t\t\t\tlocal name\n\t\t\t\tlocal path\n\t\t\t\tlocal args\n\t\t\t\tname=\"$(docker inspect -f '{{json .Name}}' \"$i\")\"\n\t\t\t\tpath=\"$(docker inspect -f '{{json .Path}}' \"$i\")\"\n\t\t\t\targs=\"$(docker inspect -f '{{json .Args}}' \"$i\")\"\n\t\t\t\techo \"Container ID: $i IMAGE: $path/$args NAME: $name\"\n\t\t\tdone\n\t\t\techo #Spacing\n\t\tfi # end dry run\n\telse\n\t    if [[ ! \"${CONTAINERS_TO_DELETE[@]}\" ]]; then\n\t        echo \"No containers To clean!\"\n\t    else\n\t\t\tlocal count=0\n\t\t\techo \"Cleaning containers...\"\n\t\t\tfor i in \"${CONTAINERS_TO_DELETE[@]}\"; do\n\t\t\t\tlocal output\n\t\t\t\tlocal status\n\t\t\t\tlocal name\n\t\t\t\tlocal path\n\t\t\t\tlocal args\n\t\t\t\tname=\"$(docker inspect -f '{{json .Name}}' \"$i\")\"\n\t\t\t\tpath=\"$(docker inspect -f '{{json .Path}}' \"$i\")\"\n\t\t\t\targs=\"$(docker inspect -f '{{json .Args}}' \"$i\")\"\n\t\t\t\tdocker rm \"$i\" &>/dev/null\n\t\t\t\tstatus=$?\n\t\t\t\tif [[ $status -eq 0 ]] ; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\t\toutput=\"DELETED: ID: $i IMAGE: $path/$args NAME: $name\"\n\t\t\t\t\techo \"$output\" | log\n\t\t\t\telse\n\t\t\t\t\toutput=\"COULD NOT DELETE: ID: $i IMAGE: $path/$args NAME: $name\"\n\t\t\t\t\techo \"$output\" | log\n\t\t\t\tfi\n\t\t\tdone\n\t\t\techo \"Stopped containers cleaned: $count\"\n\t    fi\n\tfi\n}\n\n# @info:\tRemoves all untagged/tagged docker images.\nfunction cleanImages {\n\tif $DRY_RUN; then\n\t\techo \"Dry run on removal of images:\"\n\t\tif [[ ! ${IMAGES_TO_DELETE[@]} ]]; then\n\t\t\techo \"No images. Running without -n or --dry-run flag won't remove any images.\"\n\t\t\techo #Spacing\n\t\telse\n\t\t\techo \"Running without -n or --dry-run flag will remove the listed images:\"\n\t\t\techo #Spacing\n\t\t\tlocal totalSize=0\n\t\t\tfor i in \"${IMAGES_TO_DELETE[@]}\"; do\n\t\t\t\tlocal repotag\n\t\t\t\tlocal size\n\t\t\t\trepotag=\"$(docker inspect -f '{{json .RepoTags}}' \"$i\")\"\n\t\t\t\tsize=\"$(docker inspect -f '{{json .Size}}' \"$i\")\"\n\t\t\t\techo \"REPOSITORY/TAG: $repotag IMAGE ID: $i\"\n\t\t\t\ttotalSize=$((totalSize+size))\n\t\t\tdone\n\t\t\techoSize $totalSize\n\t\t\techo #Spacing\n\t\tfi # End dry run\n\telse\n\t\tif [[ ! \"${IMAGES_TO_DELETE[@]}\" ]]; then\n\t        echo \"No images to delete!\"\n\t    else\n\t\t\tlocal count=0\n\t\t\tlocal try=0\n\t\t\techo \"Cleaning images...\"\n\t\t\tlocal -a todelete\n\t\t\ttodelete=\"${IMAGES_TO_DELETE[*]}\"\n\t\t\t while [[ \"$try\" -lt \"${#IMAGES_TO_DELETE[@]}\" ]]; do\n\t\t\t\tfor i in $(seq 0 \"${#IMAGES_TO_DELETE[@]}\"); do\n\t\t\t\t\ttry=$((try+1))\n\t\t\t\t\tlocal output\n\t\t\t\t\tlocal status\n\t\t\t\t\tlocal repotag\n\t\t\t\t\tlocal size\n\t\t\t\t\tlocal image\n\t\t\t\t\tlocal validInput\n\t\t\t\t\tvalidInput=true\n\t\t\t\t\timage=\"${IMAGES_TO_DELETE[$i]}\"\n\t\t\t\t\timage=${image// /}\n\t\t\t\t\tif [[ \"${#image}\" -lt 12 ]]; then\n\t\t\t\t\t\tvalidInput=false\n\t\t\t\t\tfi\n\t\t\t\t\tif [[ $validInput == true ]]; then\n\t\t\t\t\t\trepotag=\"$(docker inspect -f '{{json .RepoTags}}' \"$image\")\"\n\t\t\t\t\t\tsize=\"$(docker inspect -f '{{json .Size}}' \"$image\")\"\n\t\t\t\t\t\tdocker rmi -f \"$image\" &>/dev/null\n\t\t\t\t\t\tstatus=$?\n\t\t\t\t\t\tif [[ $status -eq 0 ]] ; then\n\t\t\t\t\t\t\tcount=$((count+1))\n\t\t\t\t\t\t\ttotalSize=$((totalSize+size))\n\t\t\t\t\t\t\toutput=\"DELETED: REPOSITORY/TAG: $repotag IMAGE ID: $image\"\n\t\t\t\t\t\t\techo \"$output\" | log\n\t\t\t\t\t\t\t#unset \"IMAGES_TO_DELETE[$i]\" # ERROR value too great for base\n\t\t\t\t\t\t\ttodelete=(\"${todelete[@]:0:$i}\" \"${todelete[@]:(($i+1))}\")\n\t\t\t\t\t\tfi\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\tdone\n\t\t\techo \"Images cleaned: $count\"\n\t\t\techoSize $totalSize\n\t    fi\n\tfi\n}\n\n# @info:\tRemoves all dangling Docker Volumes.\nfunction cleanVolumes {\n\tIFS=$'\\n' read -rd '' -a danglingVolumes <<<\"$(docker volume ls -qf dangling=true)\"\n\tif $DRY_RUN; then\n\t\techo \"Dry run on removal of dangling volumes:\"\n\t\tif [[ ! $danglingVolumes ]]; then\n\t\t\techo \"No existing dangling volumes. Running without -n or --dry-run flag won't remove any dangling volumes.\"\n\t\t\techo\n\t\telse\n\t\t\techo \"Running without -n or --dry-run flag will stop the listed dangling volumes:\"\n\t\t\tfor i in \"${danglingVolumes[@]}\"; do\n\t\t\t\tlocal driver\n\t\t\t\tdriver=\"$(docker volume inspect -f '{{json .Driver}}' \"$i\")\"\n\t\t\t\techo \"DRIVER: $driver NAME: $i\"\n\t\t\t\techo # for spacing\n\t\t\tdone\n\n\t\tfi\n\t\tif [[ ${CONTAINERS_TO_DELETE[@]} ]]; then\n\t\t\techo \"Dangling volumes that would be removed from containers to be deleted...\"\n\t\t\tfor j in \"${CONTAINERS_TO_DELETE[@]}\"; do\n\t\t\t\tlocal status\n\t\t\t\tlocal output\n\t\t\t\tlocal driver\n\t\t\t\tname=\"$(docker inspect -f '{{json .Mounts}}' \"$j\")\"\n\t\t\t\techo VOLUME: \"$name\"\n\t\t\t\techo # for spacing\n\t\t\tdone\n\t\t\techo #For spacing\n\t\tfi # End dry run\n\telse\n\t    if [ ! \"$danglingVolumes\" ]; then\n\t        echo \"No dangling volumes!\"\n\t    else\n\t\t\techo \"Cleaning existing dangling volumes...\"\n\t\t\tlocal count=0\n\t\t\tfor i in \"${danglingVolumes[@]}\"; do\n\t\t\t\tlocal status\n\t\t\t\tlocal output\n\t\t\t\tlocal driver\n\t\t\t\tdriver=\"$(docker volume inspect -f '{{json .Driver}}' \"$i\")\"\n\t\t\t\tdocker volume rm \"$i\" &>/dev/null\n\t\t\t\tstatus=$?\n\t\t\t\tif [[ $status -eq 0 ]] ; then\n\t\t\t\t\tcount=$((count+1))\n\t\t\t\t\toutput=\"DELETED DRIVER: $driver NAME: $i\"\n\t\t\t\t\techo \"$output\" | log\n\t\t\t\telse\n\t\t\t\t\toutput=\"COULD NOT DELETE DRIVER: $driver NAME: $i\"\n\t\t\t\tfi\n\t\t\tdone\n\t\t\techo \"Volumes cleaned: $count\"\n\t    fi\n\tfi\n}\n\n#@ info:\tSets global array of empty networks\nfunction globalEmptyNetworks {\n\tIFS=$'\\n' read -rd '' -a networks <<<\"$(docker network ls -q)\"\n\tlocal -a emptyNetworks\n\tfor i in \"${networks[@]}\"; do\n\t\tcontainers=\"$(docker network inspect -f '{{json .Containers}}' \"$i\")\"\n\t\tcontainers=${containers:3} # remove empty container string brackets\n\t\tname=\"$(docker network inspect -f '{{json .Name}}' \"$i\")\"\n\t\tif [[ \"$name\" != '\"bridge\"' ]] && [[ \"$name\" != '\"host\"' ]] && [[ \"$name\" != '\"none\"' ]]; then\n\t\t\temptyNetworks+=(\"$i\")\n\t\tfi\n\tdone\n\tif [[ \"${REMAINING_CONTAINERS[@]}\" ]]; then\n\t\tfor j in \"${REMAINING_CONTAINERS[@]}\";  do\n\t\t\tlocal -a connectedNetworks\n\t\t\tconnectedNetworks=\"$(docker inspect -f '{{json .NetworkSettings.Networks}}' \"$j\")\"\n\t\t\tlength=\"${#emptyNetworks[@]}\"\n\t\t\tfor k in $(seq 0 \"$length\"); do\n\t\t\t\tchecking=\"${emptyNetworks[$k]}\"\n\t\t\t\tif [[ $connectedNetworks =~ $checking ]]; then\n\t\t\t\t\temptyNetworks=(\"${emptyNetworks[@]:0:$k}\" \"${emptyNetworks[@]:(($k+1))}\")\n\t\t\t\tfi\n\t\t\tdone\n\t\tdone\n\tfi\n\tfor x in \"${emptyNetworks[@]}\"; do\n\t\techo \"$x\"\n\tdone\n}\n\nfunction cleanNetworks {\n\tif [[ $HAS_NETWORK_VERSION == true ]]; then\n\t\tif [[ $DRY_RUN == true ]]; then\n\t\t\techo \"Dry run on removal of networks:\"\n\t\t\tif [[ ! ${EMPTY_NETWORKS[@]} ]]; then\n\t\t\t\techo \"No empty networks. Running without -n or --dry-run flag won't remove any networks.\"\n\t\t\telse\n\t\t\t\techo \"Running without -n or --dry-run flag will remove the listed networks:\"\n\t\t\t\tfor i in \"${EMPTY_NETWORKS[@]}\"; do\n\t\t\t\t\tlocal name\n\t\t\t\t\tname=\"$(docker network inspect -f '{{json .Name}}' \"$i\")\"\n\t\t\t\t\tlocal driver\n\t\t\t\t\tdriver=\"$(docker network inspect -f '{{json .Driver}}' \"$i\")\"\n\t\t\t\t\techo \"Network ID: $i NAME: $name DRIVER: $driver\"\n\t\t\t\tdone\n\t\t\tfi # End Dry Run\n\t\telse\n\t\t\tif [[ \"${#EMPTY_NETWORKS[@]}\" -eq 0 ]]; then\n\t\t\t\techo \"No empty networks!\"\n\t\t\t\techo\n\t\t\telse\n\t\t\t\tlocal count=0\n\t\t\t\techo \"Removing empty networks...\"\n\t\t\t\tfor i in \"${EMPTY_NETWORKS[@]}\"; do\n\t\t\t\t\tif docker network rm \"$i\" 2>&1 | log ; then\n\t\t\t\t\t\tcount=$((count+1))\n\t\t\t\t\tfi\n\t\t\t\tdone\n\t\t\t\techo \"Networks removed: $count\"\n\t\t\t\techo\n\t\t\tfi\n\t\tfi\n\telse\n\t\techo \"Docker-clean only has support for Network removal on Docker Versions 1.10 and up.\"\n\t\techo \"Docker will not enable you to remove networks in use, and you can use the \"\n\t\techo \"following command at your own risk: docker network rm \\$(docker network ls -q)\"\n\tfi\n}\n\n# @info:\tRestarts and reRuns docker-machine env active machine\nfunction restartMachine {\n\toperating_system=$(testOS)\n\t#if [[ $DRY_RUN == false ]]; then\n\t\tif [[ $operating_system =~ mac || $operating_system =~ windows ]]; then\n\t\t\tactive=\"$(docker-machine active)\"\n\t\t\tif [[ $DRY_RUN == false ]]; then\n\t\t\t\tdocker-machine restart \"$active\"\n\t\t\telse\n\t\t\t\techo \"Dry run on Daemon restart:\"\n\t\t\t\techo \"Command that would be used: docker-machine restart $active\"\n\t\t\tfi\n\t\t\teval \"$(docker-machine env \"$active\")\"\n\t\t\techo \"Running docker-machine env $active...\"\n\t\t\techo \"New IP Address for\" \"$active\" \":\" \"$(docker-machine ip)\"\n\t\telif [[ $operating_system =~ linux ]]; then\n\t\t\tif [[ $DRY_RUN == false ]]; then\n\t\t\t\techo \"Restarting Docker...\"\n\t\t\t\techo \"Restarting this service requires sudo privileges\"\n\t\t\telse\n\t\t\t\techo \"Dry run on Daemon restart, requires sudo to check platform:\"\n\t\t\tfi\n\t\t\tinit_system=$(linuxInitSystem)\n\t\t\t# Upstart covers SysV and OpenRC as well.\n\t\t\tif [[ $init_system =~ upstart  ]]; then\n\t\t\t\tif [[ $DRY_RUN == false ]]; then\n\t\t\t\t\tsudo service \"docker\" restart\n\t\t\t\telse\n\t\t\t\t\techo \"Restart command that would be run: sudo service docker restart\"\n\t\t\t\tfi\n\t\t\telif [[ $init_system =~ systemd ]]; then\n\t\t\t\tif [[ $DRY_RUN == false ]]; then\n\t\t\t\t\tsudo systemctl restart docker.service\n\t\t\t\telse\n\t\t\t\t\techo \"Restart command that would be run: sudo systemctl restart docker.service\"\n\t\t\t\tfi\n\t\t\telif [[ $init_system =~ rc ]]; then\n\t\t\t\tif [[ $DRY_RUN == false ]]; then\n\t\t\t\t\tsudo launchctl restart \"docker\"\n\t\t\t\telse\n\t\t\t\t\techo \"Restart command that would be run: sudo launchctl restart docker\"\n\t\t\t\tfi\n\t\t\tfi\n\t\telse\n\t\t\techo It appears your OS is not compatible with our docker engine restart\n\t\t\techo Windows compatibility work in progress\n\t\t\techo It you feel you are seeing this as an error please visit\n\t\t\techo \"https://github.com/ZZROTDesign/docker-clean and open an issue.\"\n\t\t\texit 2\n\t\tfi\n}\n\n# @info:\tRuns the checks before the main code can be run.\nfunction Check {\n\tcheckDocker\n\tcheckVersion\n}\n\n# @info:\tAccepts input to output if verbose mode is flagged.\nfunction log {\n\tread -r IN\n\tif $VERBOSE; then\n\t\techo \"$IN\"\n\tfi\n}\n\n## ** Script for testing os **\n# Modified for our usage from:\n# Credit https://stackoverflow.com/questions/3466166/how-to-check-if-running-in-cygwin-mac-or-linux/17072017#17072017?newreg=b1cdf253d60546f0acfb73e0351ea8be\n# Echo mac for Mac OS X, echo linux for GNU/Linux, echo windows for Window\nfunction testOS {\n  if [ \"$(uname)\" == \"Darwin\" ]; then\n      # Do something under Mac OS X platform\n      echo mac\n  elif [ \"$(uname -s)\" == \"Linux\" ]; then\n      # Do something under GNU/Linux platform\n      echo linux\n\t\t\t#!/bin/bash\n\n  elif [ \"$(uname -s)\" == \"MINGW32_NT\" ]; then\n      # Do something under Windows NT platform\n      echo windows\n  fi\n}\n#END FUNCTIONS\n\n# Function for testing linux initSystem\nfunction linuxInitSystem {\n\t# To include hidden files\n\tshopt -s nullglob dotglob\n\n\t# Get sudo privileges\n\tif [ $EUID != 0 ]; then\n    sudo \"$?\" &>/dev/null\n\t#sudo \"$0\" \"$@\" &>/dev/null #Recommended, but doesn't pass shell check\nfi\n# Directories to check\n# Upstart covers SysV and OpenRC as well.\n\tupstart=(/etc/init.d/docker)\n\tsystemd=(/etc/systemd/docker)\n\trc=(/etc/rc.d/docker)\n\tinitSystem=\"\"\n\t#files=(/some/dir/*)\n\tif [ ${#upstart[@]} -gt 0 ]; then\n\t\tinitSystem=upstart\n\telif [ ${#systemd[@]} -gt 0 ]; then\n\t\tinitSystem=systemd\n\telif [ ${#rc[@]} -gt 0 ]; then\n\t\tinitSystem=rc\n\tfi\n\techo $initSystem\n}\n\n# @info:\tEchos the size of images removed in various measurements\n# @args:\tThe number of bytes moved\nfunction echoSize {\n\tlocal mega\n\tlocal giga\n\tif [[ $1 -gt 0 ]]; then\n\t\tmega=$(($1 / 1000000))\n\t\tgiga=$(($1 / 1000000000))\n\t\tif [[ $giga == 0 ]]; then\n\t\t\techo \"You've cleared approximately MB: $mega of space!\"\n\t\telse\n\t\t\techo \"You've cleared approximately MB: $mega or GB: $giga of space!\"\n\t\tfi\n\tfi\n}\n\n# @info:\tReturns 0 if array contains string, 1 if it does not.\n# @info:\tNOTE: Must run status check after calling to check result.\n# @args:\tArg 1 is string, arg2 is array\nfunction arrayContains {\n\tlocal seeking=$1; shift\n\tlocal in=1\n\tfor element; do\n\t\tif [[ \"$element\" == \"$seeking\" ]]; then\n\t\t\tin=0\n\t\t\tbreak\n\t\tfi\n\tdone\n\techo $in\n\t\t#for i in \"${@:2}\"; do\n\t\t#\t[[ \"$i\" == \"$1\" ]] && return 0;\n\t\t#done\n\t\t#return 1\n}\n\n# @info: sets global container variable arrays\n# @args: delete --> returns containers to be deleted, remaining --> returns non-deleted containers\nfunction containersToDelete {\n\tlocal -a remainingContainers\n\tif $STOP_CONTAINERS && $DELETE_CREATED; then\n\t\tIFS=$'\\n' read -rd '' -a containers <<<\"$(docker ps -aq)\"\n\telif $STOP_CONTAINERS && ! $DELETE_CREATED; then\n\t\tIFS=$'\\n' read -rd '' -a containers <<<\"$(docker ps -q -f STATUS=exited -f STATUS=running)\"\n\t\tIFS=$'\\n' read -rd '' -a remainingContainers <<<\"$(docker ps -q -f STATUS=created)\"\n\telif ! $STOP_CONTAINERS && $DELETE_CREATED; then\n\t\tIFS=$'\\n' read -rd '' -a containers <<<\"$(docker ps -q -f STATUS=exited -f STATUS=created)\"\n\t\tIFS=$'\\n' read -rd '' -a remainingContainers <<<\"$(docker ps -q -f STATUS=running)\"\n\tfi\n\n\tif [[ $1 =~ delete ]]; then\n\t\tfor value in \"${containers[@]}\" ; do\n\t\t\techo \"$value\"\n\t\tdone\n\telif [[ $1 =~ remaining ]]; then\n\t\tfor value in \"${remainingContainers[@]}\" ; do\n\t\t\techo \"$value\"\n\t\tdone\n\tfi\n}\n\n#@ info sets global images to delete for dry run. CURRENTLY NOT IN USE\nfunction usedImages {\n\t# For loop goes through appending to array of images with images used in containers queued to remove\n\t#declare -a used\n\tfor i in \"${REMAINING_CONTAINERS[@]}\" ; do\n\t\t# IF not used by other containers\n\n\t\tnew=\"$(docker inspect -f '{{json .Image}}' \"$i\")\"\n\t\tnew=${new##*:} \t\t# Cuts inspect output off before the colon -- \"sha:\"\n\t\tnew=${new:0:12} \t# Take only first 12 characters from image sha\n\t\techo \"$new\"\n\tdone\n}\n\nfunction globalImagesToDelete {\n\t# starts with all images and then pulls just the unused images\n\t#if $DELETE_TAGGED; then\n\tif $DELETE_TAGGED; then\n\t\tIFS=$'\\n' read -rd '' -a images <<<\"$(docker images -a -q)\"\n\telse\n\t\tIFS=$'\\n' read -rd '' -a images <<<\"$(docker images -aq --filter \"dangling=true\")\"\n\tfi\n\t#else\n\t#\tIFS=$'\\n' read -rd '' -a images <<<\"$(docker images -aq --filter \"dangling=true\")\"\n\t#fi\n\tfor i in \"${images[@]}\" ; do\n\t\t# Call arry contains function\n\t\tif [[ $(arrayContains \"$i\" \"${IMAGES_IN_USE[@]}\") -eq 1 ]]; then\n\t\t\techo \"$i\"\n\t\tfi\n\tdone\n}\n\n\n# @info:\tsets global variables for a dry run\nfunction setGlobal {\n\tIFS=$'\\n'\n\tCONTAINERS_TO_DELETE=($(containersToDelete delete))\n\tREMAINING_CONTAINERS=($(containersToDelete remaining))\t# Add time delta\n\tIMAGES_IN_USE=($(usedImages))\n\tIMAGES_TO_DELETE=($(globalImagesToDelete))\n\tEMPTY_NETWORKS=($(globalEmptyNetworks))\n\tHAS_NETWORK_VERSION=($(checkNetworkVersion))\n\t#VOLUMES_TO_DELETE=($(volumesToDelete))\n}\n# @info:\tDefault run option, cleans stopped containers and images\nfunction dockerClean {\n\t#if [[ $DRY_RUN == true ]]; then\n\tsetGlobal\n\t#fi\n\n\tif $STOP_CONTAINERS; then\n\t\tstop\n\tfi\n\tif $CLEAN_CONTAINERS; then\n\t\tcleanContainers\n\tfi\n\tif $CLEAN_IMAGES; then\n\t\tcleanImages\n\tfi\n\tif $CLEAN_VOLUMES && $HAS_VERSION; then\n\t\tcleanVolumes\n\tfi\n\tif $CLEAN_NETWORKS && $HAS_VERSION; then\n\t\tcleanNetworks\n\tfi\n\tif $RESTART;  then\n\t\trestartMachine\n\tfi\n}\n\n# @info:\tMain function\nCheck\nparseCli \"$@\"\n\n# Used for testing global arrays\n: <<'END'\necho EMTPY NETWORKS\nfor i in \"${EMPTY_NETWORKS[@]}\"; do\n\techo \"$i\"\ndone\necho USED IMAGES\nfor i in \"${IMAGES_IN_USE[@]}\"; do\n\techo \"$i\"\ndone\necho\necho UNUSED IMAGES\nfor j in \"${IMAGES_TO_DELETE[@]}\"; do\n\techo \"$j\"\ndone\nEND\nexit 0\n"
        },
        {
          "name": "dockerfiles",
          "type": "tree",
          "content": null
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}