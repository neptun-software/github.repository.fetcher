{
  "metadata": {
    "timestamp": 1736568220996,
    "page": 77,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgw",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "P3TERX/warp.sh",
      "stars": 3843,
      "defaultBranch": "main",
      "files": [
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0634765625,
          "content": "MIT License\n\nCopyright (c) 2021-2024 P3TERX <https://p3terx.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 3.5595703125,
          "content": "**English** | [中文](https://p3terx.com/archives/cloudflare-warp-configuration-script.html)\n\n# Cloudflare WARP Installer\n\nA Bash script that automatically installs and configures CloudFlare WARP in Linux, connects to WARP networks with WARP official client or WireGuard.\n\n## Features\n\n- Automatically install CloudFlare WARP Official Linux Client\n- Quickly enable WARP Proxy Mode, access WARP network with SOCKS5\n- Automatically install WireGuard related components\n- Configuration WARP IPv4 Network interface (WireGuard Mode)\n- Configuration WARP IPv6 Network interface (WireGuard Mode)\n- Configuration WARP Dual Stack Network interface (WireGuard Mode)\n- ...\n\n## Requirements\n\n### WARP Official Linux Client\n\nOfficial WARP client support is currently limited to x86_64 platforms, see OS Support for details: https://pkg.cloudflareclient.com\n\n### WARP WireGuard Network Mode\n\nSupported distributions:\n\n- Debian >= 10\n- Ubuntu >= 16.04\n- Fedora\n- CentOS\n- Oracle Linux\n- Arch Linux\n- Other similar distributions\n\nSupported platform architecture:\n\n- x86(i386)\n- x86_64(amd64)\n- ARMv8(aarch64)\n- ARMv7(armhf)\n\n## Usage\n\n```bash\nbash <(curl -fsSL git.io/warp.sh) [SUBCOMMAND]\n# or\nwget git.io/warp.sh\nbash warp.sh [SUBCOMMAND]\n```\n\n### Subcommands\n\n```\ninstall         Install Cloudflare WARP Official Linux Client\nuninstall       uninstall Cloudflare WARP Official Linux Client\nrestart         Restart Cloudflare WARP Official Linux Client\nproxy           Enable WARP Client Proxy Mode (default SOCKS5 port: 40000)\nunproxy         Disable WARP Client Proxy Mode\nwg              Install WireGuard and related components\nwg4             Configuration WARP IPv4 Global Network (with WireGuard), all IPv4 outbound data over the WARP network\nwg6             Configuration WARP IPv6 Global Network (with WireGuard), all IPv6 outbound data over the WARP network\nwgd             Configuration WARP Dual Stack Global Network (with WireGuard), all outbound data over the WARP network\nwgx             Configuration WARP Non-Global Network (with WireGuard), set fwmark or interface IP Address to use the WARP network\nrwg             Restart WARP WireGuard service\ndwg             Disable WARP WireGuard service\nstatus          Prints status information\nversion         Prints version information\nhelp            Prints this message or the help of the given subcommand(s)\nmenu            Chinese special features menu\n```\n\n### Example\n\n- Install and automatically configure the Proxy Mode feature of the WARP client, enable the local loopback port 40000, and use an application that supports SOCKS5 to connect to this port.\n    ```\n    bash <(curl -fsSL git.io/warp.sh) proxy\n    ```\n\n- Install and automatically configure WARP IPv6 Network (with WireGuard)，Giving your Linux server access to IPv6 networks.\n    ```\n    bash <(curl -fsSL git.io/warp.sh) wg6\n    ```\n\n- This Bash script is also a good WireGuard installer.\n    ```\n    bash <(curl -fsSL git.io/warp.sh) wg\n    ```\n\n## Credits\n\n- [Cloudflare WARP](https://1.1.1.1/)\n- [WireGuard](https://www.wireguard.com/)\n- [ViRb3/wgcf](https://github.com/ViRb3/wgcf)\n\n## License\n\n[MIT](https://github.com/P3TERX/warp.sh/blob/main/LICENSE) © **[P3TERX](https://p3terx.com/)**\n\n## Notice of Non-Affiliation and Disclaimer\n\nWe are not affiliated, associated, authorized, endorsed by, or in any way officially connected with Cloudflare, or any of its subsidiaries or its affiliates. The official Cloudflare website can be found at https://www.cloudflare.com/.\n\nThe names Cloudflare Warp and Cloudflare as well as related names, marks, emblems and images are registered trademarks of their respective owners.\n"
        },
        {
          "name": "warp.sh",
          "type": "blob",
          "size": 38.3369140625,
          "content": "#!/usr/bin/env bash\n#\n# https://github.com/P3TERX/warp.sh\n# Description: Cloudflare WARP Installer\n# System Required: Debian, Ubuntu, Fedora, CentOS, Oracle Linux, Arch Linux\n# Version: 1.0.40_Final\n#\n# MIT License\n#\n# Copyright (c) 2021-2024 P3TERX <https://p3terx.com>\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in all\n# copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n# SOFTWARE.\n#\n\nshVersion='1.0.40_Final'\n\nFontColor_Red=\"\\033[31m\"\nFontColor_Red_Bold=\"\\033[1;31m\"\nFontColor_Green=\"\\033[32m\"\nFontColor_Green_Bold=\"\\033[1;32m\"\nFontColor_Yellow=\"\\033[33m\"\nFontColor_Yellow_Bold=\"\\033[1;33m\"\nFontColor_Purple=\"\\033[35m\"\nFontColor_Purple_Bold=\"\\033[1;35m\"\nFontColor_Suffix=\"\\033[0m\"\n\nlog() {\n    local LEVEL=\"$1\"\n    local MSG=\"$2\"\n    case \"${LEVEL}\" in\n    INFO)\n        local LEVEL=\"[${FontColor_Green}${LEVEL}${FontColor_Suffix}]\"\n        local MSG=\"${LEVEL} ${MSG}\"\n        ;;\n    WARN)\n        local LEVEL=\"[${FontColor_Yellow}${LEVEL}${FontColor_Suffix}]\"\n        local MSG=\"${LEVEL} ${MSG}\"\n        ;;\n    ERROR)\n        local LEVEL=\"[${FontColor_Red}${LEVEL}${FontColor_Suffix}]\"\n        local MSG=\"${LEVEL} ${MSG}\"\n        ;;\n    *) ;;\n    esac\n    echo -e \"${MSG}\"\n}\n\nif [[ $(uname -s) != Linux ]]; then\n    log ERROR \"This operating system is not supported.\"\n    exit 1\nfi\n\nif [[ $(id -u) != 0 ]]; then\n    log ERROR \"This script must be run as root.\"\n    exit 1\nfi\n\nif [[ -z $(command -v curl) ]]; then\n    log ERROR \"cURL is not installed.\"\n    exit 1\nfi\n\nWGCF_Profile='wgcf-profile.conf'\nWGCF_ProfileDir=\"/etc/warp\"\nWGCF_ProfilePath=\"${WGCF_ProfileDir}/${WGCF_Profile}\"\n\nWireGuard_Interface='wgcf'\nWireGuard_ConfPath=\"/etc/wireguard/${WireGuard_Interface}.conf\"\n\nWireGuard_Interface_DNS_IPv4='8.8.8.8,8.8.4.4'\nWireGuard_Interface_DNS_IPv6='2001:4860:4860::8888,2001:4860:4860::8844'\nWireGuard_Interface_DNS_46=\"${WireGuard_Interface_DNS_IPv4},${WireGuard_Interface_DNS_IPv6}\"\nWireGuard_Interface_DNS_64=\"${WireGuard_Interface_DNS_IPv6},${WireGuard_Interface_DNS_IPv4}\"\nWireGuard_Interface_Rule_table='51888'\nWireGuard_Interface_Rule_fwmark='51888'\nWireGuard_Interface_MTU='1280'\n\nWireGuard_Peer_Endpoint_IP4='162.159.192.1'\nWireGuard_Peer_Endpoint_IP6='2606:4700:d0::a29f:c001'\nWireGuard_Peer_Endpoint_IPv4=\"${WireGuard_Peer_Endpoint_IP4}:2408\"\nWireGuard_Peer_Endpoint_IPv6=\"[${WireGuard_Peer_Endpoint_IP6}]:2408\"\nWireGuard_Peer_Endpoint_Domain='engage.cloudflareclient.com:2408'\nWireGuard_Peer_AllowedIPs_IPv4='0.0.0.0/0'\nWireGuard_Peer_AllowedIPs_IPv6='::/0'\nWireGuard_Peer_AllowedIPs_DualStack='0.0.0.0/0,::/0'\n\nTestIPv4_1='1.0.0.1'\nTestIPv4_2='9.9.9.9'\nTestIPv6_1='2606:4700:4700::1001'\nTestIPv6_2='2620:fe::fe'\nCF_Trace_URL='https://www.cloudflare.com/cdn-cgi/trace'\n\nGet_System_Info() {\n    source /etc/os-release\n    SysInfo_OS_CodeName=\"${VERSION_CODENAME}\"\n    SysInfo_OS_Name_lowercase=\"${ID}\"\n    SysInfo_OS_Name_Full=\"${PRETTY_NAME}\"\n    SysInfo_RelatedOS=\"${ID_LIKE}\"\n    SysInfo_Kernel=\"$(uname -r)\"\n    SysInfo_Kernel_Ver_major=\"$(uname -r | awk -F . '{print $1}')\"\n    SysInfo_Kernel_Ver_minor=\"$(uname -r | awk -F . '{print $2}')\"\n    SysInfo_Arch=\"$(uname -m)\"\n    SysInfo_Virt=\"$(systemd-detect-virt)\"\n    case ${SysInfo_RelatedOS} in\n    *fedora* | *rhel*)\n        SysInfo_OS_Ver_major=\"$(rpm -E '%{rhel}')\"\n        ;;\n    *)\n        SysInfo_OS_Ver_major=\"$(echo ${VERSION_ID} | cut -d. -f1)\"\n        ;;\n    esac\n}\n\nPrint_System_Info() {\n    echo -e \"\nSystem Information\n---------------------------------------------------\n  Operating System: ${SysInfo_OS_Name_Full}\n      Linux Kernel: ${SysInfo_Kernel}\n      Architecture: ${SysInfo_Arch}\n    Virtualization: ${SysInfo_Virt}\n---------------------------------------------------\n\"\n}\n\nInstall_Requirements_Debian() {\n    if [[ ! $(command -v gpg) ]]; then\n        apt update\n        apt install gnupg -y\n    fi\n    if [[ ! $(apt list 2>/dev/null | grep apt-transport-https | grep installed) ]]; then\n        apt update\n        apt install apt-transport-https -y\n    fi\n}\n\nInstall_WARP_Client_Debian() {\n    if [[ ${SysInfo_OS_Name_lowercase} = ubuntu ]]; then\n        case ${SysInfo_OS_CodeName} in\n        bionic | focal | jammy) ;;\n        *)\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n            ;;\n        esac\n    elif [[ ${SysInfo_OS_Name_lowercase} = debian ]]; then\n        case ${SysInfo_OS_CodeName} in\n        bookworm | buster | bullseye) ;;\n        *)\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n            ;;\n        esac\n    fi\n    Install_Requirements_Debian\n    curl https://pkg.cloudflareclient.com/pubkey.gpg | gpg --yes --dearmor --output /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg\n    echo \"deb [arch=amd64 signed-by=/usr/share/keyrings/cloudflare-warp-archive-keyring.gpg] https://pkg.cloudflareclient.com/ ${SysInfo_OS_CodeName} main\" | tee /etc/apt/sources.list.d/cloudflare-client.list\n    apt update\n    apt install cloudflare-warp -y\n}\n\nInstall_WARP_Client_CentOS() {\n    if [[ ${SysInfo_OS_Ver_major} = 8 ]]; then\n        rpm -ivh http://pkg.cloudflareclient.com/cloudflare-release-el8.rpm\n        yum install cloudflare-warp -y\n    else\n        log ERROR \"This operating system is not supported.\"\n        exit 1\n    fi\n}\n\nCheck_WARP_Client() {\n    WARP_Client_Status=$(systemctl is-active warp-svc)\n    WARP_Client_SelfStart=$(systemctl is-enabled warp-svc 2>/dev/null)\n}\n\nInstall_WARP_Client() {\n    Print_System_Info\n    log INFO \"Installing Cloudflare WARP Client...\"\n    if [[ ${SysInfo_Arch} != x86_64 ]]; then\n        log ERROR \"This CPU architecture is not supported: ${SysInfo_Arch}\"\n        exit 1\n    fi\n    case ${SysInfo_OS_Name_lowercase} in\n    *debian* | *ubuntu*)\n        Install_WARP_Client_Debian\n        ;;\n    *centos* | *rhel*)\n        Install_WARP_Client_CentOS\n        ;;\n    *)\n        if [[ ${SysInfo_RelatedOS} = *rhel* || ${SysInfo_RelatedOS} = *fedora* ]]; then\n            Install_WARP_Client_CentOS\n        else\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n        fi\n        ;;\n    esac\n    Check_WARP_Client\n    if [[ ${WARP_Client_Status} = active ]]; then\n        log INFO \"Cloudflare WARP Client installed successfully!\"\n    else\n        log ERROR \"warp-svc failure to run!\"\n        journalctl -u warp-svc --no-pager\n        exit 1\n    fi\n}\n\nUninstall_WARP_Client() {\n    log INFO \"Uninstalling Cloudflare WARP Client...\"\n    case ${SysInfo_OS_Name_lowercase} in\n    *debian* | *ubuntu*)\n        apt purge cloudflare-warp -y\n        rm -f /etc/apt/sources.list.d/cloudflare-client.list /usr/share/keyrings/cloudflare-warp-archive-keyring.gpg\n        ;;\n    *centos* | *rhel*)\n        yum remove cloudflare-warp -y\n        ;;\n    *)\n        if [[ ${SysInfo_RelatedOS} = *rhel* || ${SysInfo_RelatedOS} = *fedora* ]]; then\n            yum remove cloudflare-warp -y\n        else\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n        fi\n        ;;\n    esac\n}\n\nRestart_WARP_Client() {\n    log INFO \"Restarting Cloudflare WARP Client...\"\n    systemctl restart warp-svc\n    Check_WARP_Client\n    if [[ ${WARP_Client_Status} = active ]]; then\n        log INFO \"Cloudflare WARP Client has been restarted.\"\n    else\n        log ERROR \"Cloudflare WARP Client failure to run!\"\n        journalctl -u warp-svc --no-pager\n        exit 1\n    fi\n}\n\nInit_WARP_Client() {\n    Check_WARP_Client\n    if [[ ${WARP_Client_SelfStart} != enabled || ${WARP_Client_Status} != active ]]; then\n        Install_WARP_Client\n    fi\n    if [[ $(warp-cli --accept-tos account) = *Missing* ]]; then\n        log INFO \"Cloudflare WARP Account Registration in progress...\"\n        warp-cli --accept-tos register\n    fi\n}\n\nConnect_WARP() {\n    log INFO \"Connecting to WARP...\"\n    warp-cli --accept-tos connect\n    log INFO \"Enable WARP Always-On...\"\n    warp-cli --accept-tos enable-always-on\n}\n\nDisconnect_WARP() {\n    log INFO \"Disable WARP Always-On...\"\n    warp-cli --accept-tos disable-always-on\n    log INFO \"Disconnect from WARP...\"\n    warp-cli --accept-tos disconnect\n}\n\nSet_WARP_Mode_Proxy() {\n    log INFO \"Setting up WARP Proxy Mode...\"\n    warp-cli --accept-tos set-mode proxy\n}\n\nEnable_WARP_Client_Proxy() {\n    Init_WARP_Client\n    Set_WARP_Mode_Proxy\n    Connect_WARP\n    Print_WARP_Client_Status\n}\n\nGet_WARP_Proxy_Port() {\n    WARP_Proxy_Port='40000'\n}\n\nPrint_Delimiter() {\n    printf '=%.0s' $(seq $(tput cols))\n    echo\n}\n\nInstall_wgcf() {\n    curl -fsSL git.io/wgcf.sh | bash\n}\n\nUninstall_wgcf() {\n    rm -f /usr/local/bin/wgcf\n}\n\nRegister_WARP_Account() {\n    while [[ ! -f wgcf-account.toml ]]; do\n        Install_wgcf\n        log INFO \"Cloudflare WARP Account registration in progress...\"\n        yes | wgcf register\n        sleep 5\n    done\n}\n\nGenerate_WGCF_Profile() {\n    while [[ ! -f ${WGCF_Profile} ]]; do\n        Register_WARP_Account\n        log INFO \"WARP WireGuard profile (wgcf-profile.conf) generation in progress...\"\n        wgcf generate\n    done\n    Uninstall_wgcf\n}\n\nBackup_WGCF_Profile() {\n    mkdir -p ${WGCF_ProfileDir}\n    mv -f wgcf* ${WGCF_ProfileDir}\n}\n\nRead_WGCF_Profile() {\n    WireGuard_Interface_PrivateKey=$(cat ${WGCF_ProfilePath} | grep ^PrivateKey | cut -d= -f2- | awk '$1=$1')\n    WireGuard_Interface_Address=$(cat ${WGCF_ProfilePath} | grep ^Address | cut -d= -f2- | awk '$1=$1' | sed \":a;N;s/\\n/,/g;ta\")\n    WireGuard_Peer_PublicKey=$(cat ${WGCF_ProfilePath} | grep ^PublicKey | cut -d= -f2- | awk '$1=$1')\n    WireGuard_Interface_Address_IPv4=$(echo ${WireGuard_Interface_Address} | cut -d, -f1 | cut -d'/' -f1)\n    WireGuard_Interface_Address_IPv6=$(echo ${WireGuard_Interface_Address} | cut -d, -f2 | cut -d'/' -f1)\n}\n\nLoad_WGCF_Profile() {\n    if [[ -f ${WGCF_Profile} ]]; then\n        Backup_WGCF_Profile\n        Read_WGCF_Profile\n    elif [[ -f ${WGCF_ProfilePath} ]]; then\n        Read_WGCF_Profile\n    else\n        Generate_WGCF_Profile\n        Backup_WGCF_Profile\n        Read_WGCF_Profile\n    fi\n}\n\nInstall_WireGuardTools_Debian() {\n    case ${SysInfo_OS_Ver_major} in\n    10)\n        if [[ -z $(grep \"^deb.*buster-backports.*main\" /etc/apt/sources.list{,.d/*}) ]]; then\n            echo \"deb http://deb.debian.org/debian buster-backports main\" | tee /etc/apt/sources.list.d/backports.list\n        fi\n        ;;\n    *)\n        if [[ ${SysInfo_OS_Ver_major} -lt 10 ]]; then\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n        fi\n        ;;\n    esac\n    apt update\n    apt install iproute2 openresolv -y\n    apt install wireguard-tools --no-install-recommends -y\n}\n\nInstall_WireGuardTools_Ubuntu() {\n    apt update\n    apt install iproute2 openresolv -y\n    apt install wireguard-tools --no-install-recommends -y\n}\n\nInstall_WireGuardTools_CentOS() {\n    yum install epel-release -y || yum install https://dl.fedoraproject.org/pub/epel/epel-release-latest-${SysInfo_OS_Ver_major}.noarch.rpm -y\n    yum install iproute iptables wireguard-tools -y\n}\n\nInstall_WireGuardTools_Fedora() {\n    dnf install iproute iptables wireguard-tools -y\n}\n\nInstall_WireGuardTools_Arch() {\n    pacman -Sy iproute2 openresolv wireguard-tools --noconfirm\n}\n\nInstall_WireGuardTools() {\n    log INFO \"Installing wireguard-tools...\"\n    case ${SysInfo_OS_Name_lowercase} in\n    *debian*)\n        Install_WireGuardTools_Debian\n        ;;\n    *ubuntu*)\n        Install_WireGuardTools_Ubuntu\n        ;;\n    *centos* | *rhel*)\n        Install_WireGuardTools_CentOS\n        ;;\n    *fedora*)\n        Install_WireGuardTools_Fedora\n        ;;\n    *arch*)\n        Install_WireGuardTools_Arch\n        ;;\n    *)\n        if [[ ${SysInfo_RelatedOS} = *rhel* || ${SysInfo_RelatedOS} = *fedora* ]]; then\n            Install_WireGuardTools_CentOS\n        else\n            log ERROR \"This operating system is not supported.\"\n            exit 1\n        fi\n        ;;\n    esac\n}\n\nInstall_WireGuardGo() {\n    case ${SysInfo_Virt} in\n    openvz | lxc*)\n        curl -fsSL git.io/wireguard-go.sh | bash\n        ;;\n    *)\n        if [[ ${SysInfo_Kernel_Ver_major} -lt 5 || ${SysInfo_Kernel_Ver_minor} -lt 6 ]]; then\n            curl -fsSL git.io/wireguard-go.sh | bash\n        fi\n        ;;\n    esac\n}\n\nCheck_WireGuard() {\n    WireGuard_Status=$(systemctl is-active wg-quick@${WireGuard_Interface})\n    WireGuard_SelfStart=$(systemctl is-enabled wg-quick@${WireGuard_Interface} 2>/dev/null)\n}\n\nInstall_WireGuard() {\n    Print_System_Info\n    Check_WireGuard\n    if [[ ${WireGuard_SelfStart} != enabled || ${WireGuard_Status} != active ]]; then\n        Install_WireGuardTools\n        Install_WireGuardGo\n    else\n        log INFO \"WireGuard is installed and running.\"\n    fi\n}\n\nStart_WireGuard() {\n    Check_WARP_Client\n    log INFO \"Starting WireGuard...\"\n    if [[ ${WARP_Client_Status} = active ]]; then\n        systemctl stop warp-svc\n        systemctl enable wg-quick@${WireGuard_Interface} --now\n        systemctl start warp-svc\n    else\n        systemctl enable wg-quick@${WireGuard_Interface} --now\n    fi\n    Check_WireGuard\n    if [[ ${WireGuard_Status} = active ]]; then\n        log INFO \"WireGuard is running.\"\n    else\n        log ERROR \"WireGuard failure to run!\"\n        journalctl -u wg-quick@${WireGuard_Interface} --no-pager\n        exit 1\n    fi\n}\n\nRestart_WireGuard() {\n    Check_WARP_Client\n    log INFO \"Restarting WireGuard...\"\n    if [[ ${WARP_Client_Status} = active ]]; then\n        systemctl stop warp-svc\n        systemctl restart wg-quick@${WireGuard_Interface}\n        systemctl start warp-svc\n    else\n        systemctl restart wg-quick@${WireGuard_Interface}\n    fi\n    Check_WireGuard\n    if [[ ${WireGuard_Status} = active ]]; then\n        log INFO \"WireGuard has been restarted.\"\n    else\n        log ERROR \"WireGuard failure to run!\"\n        journalctl -u wg-quick@${WireGuard_Interface} --no-pager\n        exit 1\n    fi\n}\n\nEnable_IPv6_Support() {\n    if [[ $(sysctl -a | grep 'disable_ipv6.*=.*1') || $(cat /etc/sysctl.{conf,d/*} | grep 'disable_ipv6.*=.*1') ]]; then\n        sed -i '/disable_ipv6/d' /etc/sysctl.{conf,d/*}\n        echo 'net.ipv6.conf.all.disable_ipv6 = 0' >/etc/sysctl.d/ipv6.conf\n        sysctl -w net.ipv6.conf.all.disable_ipv6=0\n    fi\n}\n\nEnable_WireGuard() {\n    Enable_IPv6_Support\n    Check_WireGuard\n    if [[ ${WireGuard_SelfStart} = enabled ]]; then\n        Restart_WireGuard\n    else\n        Start_WireGuard\n    fi\n}\n\nStop_WireGuard() {\n    Check_WARP_Client\n    if [[ ${WireGuard_Status} = active ]]; then\n        log INFO \"Stoping WireGuard...\"\n        if [[ ${WARP_Client_Status} = active ]]; then\n            systemctl stop warp-svc\n            systemctl stop wg-quick@${WireGuard_Interface}\n            systemctl start warp-svc\n        else\n            systemctl stop wg-quick@${WireGuard_Interface}\n        fi\n        Check_WireGuard\n        if [[ ${WireGuard_Status} != active ]]; then\n            log INFO \"WireGuard has been stopped.\"\n        else\n            log ERROR \"WireGuard stop failure!\"\n        fi\n    else\n        log INFO \"WireGuard is stopped.\"\n    fi\n}\n\nDisable_WireGuard() {\n    Check_WARP_Client\n    Check_WireGuard\n    if [[ ${WireGuard_SelfStart} = enabled || ${WireGuard_Status} = active ]]; then\n        log INFO \"Disabling WireGuard...\"\n        if [[ ${WARP_Client_Status} = active ]]; then\n            systemctl stop warp-svc\n            systemctl disable wg-quick@${WireGuard_Interface} --now\n            systemctl start warp-svc\n        else\n            systemctl disable wg-quick@${WireGuard_Interface} --now\n        fi\n        Check_WireGuard\n        if [[ ${WireGuard_SelfStart} != enabled && ${WireGuard_Status} != active ]]; then\n            log INFO \"WireGuard has been disabled.\"\n        else\n            log ERROR \"WireGuard disable failure!\"\n        fi\n    else\n        log INFO \"WireGuard is disabled.\"\n    fi\n}\n\nPrint_WireGuard_Log() {\n    journalctl -u wg-quick@${WireGuard_Interface} -f\n}\n\nCheck_Network_Status_IPv4() {\n    if ping -c1 -W1 ${TestIPv4_1} >/dev/null 2>&1 || ping -c1 -W1 ${TestIPv4_2} >/dev/null 2>&1; then\n        IPv4Status='on'\n    else\n        IPv4Status='off'\n    fi\n}\n\nCheck_Network_Status_IPv6() {\n    if ping6 -c1 -W1 ${TestIPv6_1} >/dev/null 2>&1 || ping6 -c1 -W1 ${TestIPv6_2} >/dev/null 2>&1; then\n        IPv6Status='on'\n    else\n        IPv6Status='off'\n    fi\n}\n\nCheck_Network_Status() {\n    Disable_WireGuard\n    Check_Network_Status_IPv4\n    Check_Network_Status_IPv6\n}\n\nCheck_IPv4_addr() {\n    IPv4_addr=$(\n        ip route get ${TestIPv4_1} 2>/dev/null | grep -oP 'src \\K\\S+' ||\n            ip route get ${TestIPv4_2} 2>/dev/null | grep -oP 'src \\K\\S+'\n    )\n}\n\nCheck_IPv6_addr() {\n    IPv6_addr=$(\n        ip route get ${TestIPv6_1} 2>/dev/null | grep -oP 'src \\K\\S+' ||\n            ip route get ${TestIPv6_2} 2>/dev/null | grep -oP 'src \\K\\S+'\n    )\n}\n\nGet_IP_addr() {\n    Check_Network_Status\n    if [[ ${IPv4Status} = on ]]; then\n        log INFO \"Getting the network interface IPv4 address...\"\n        Check_IPv4_addr\n        if [[ ${IPv4_addr} ]]; then\n            log INFO \"IPv4 Address: ${IPv4_addr}\"\n        else\n            log WARN \"Network interface IPv4 address not obtained.\"\n        fi\n    fi\n    if [[ ${IPv6Status} = on ]]; then\n        log INFO \"Getting the network interface IPv6 address...\"\n        Check_IPv6_addr\n        if [[ ${IPv6_addr} ]]; then\n            log INFO \"IPv6 Address: ${IPv6_addr}\"\n        else\n            log WARN \"Network interface IPv6 address not obtained.\"\n        fi\n    fi\n}\n\nGet_WireGuard_Interface_MTU() {\n    log INFO \"Getting the best MTU value for WireGuard...\"\n    MTU_Preset=1500\n    MTU_Increment=10\n    if [[ ${IPv4Status} = off && ${IPv6Status} = on ]]; then\n        CMD_ping='ping6'\n        MTU_TestIP_1=\"${TestIPv6_1}\"\n        MTU_TestIP_2=\"${TestIPv6_2}\"\n    else\n        CMD_ping='ping'\n        MTU_TestIP_1=\"${TestIPv4_1}\"\n        MTU_TestIP_2=\"${TestIPv4_2}\"\n    fi\n    while true; do\n        if ${CMD_ping} -c1 -W1 -s$((${MTU_Preset} - 28)) -Mdo ${MTU_TestIP_1} >/dev/null 2>&1 || ${CMD_ping} -c1 -W1 -s$((${MTU_Preset} - 28)) -Mdo ${MTU_TestIP_2} >/dev/null 2>&1; then\n            MTU_Increment=1\n            MTU_Preset=$((${MTU_Preset} + ${MTU_Increment}))\n        else\n            MTU_Preset=$((${MTU_Preset} - ${MTU_Increment}))\n            if [[ ${MTU_Increment} = 1 ]]; then\n                break\n            fi\n        fi\n        if [[ ${MTU_Preset} -le 1360 ]]; then\n            log WARN \"MTU is set to the lowest value.\"\n            MTU_Preset='1360'\n            break\n        fi\n    done\n    WireGuard_Interface_MTU=$((${MTU_Preset} - 80))\n    log INFO \"WireGuard MTU: ${WireGuard_Interface_MTU}\"\n}\n\nGenerate_WireGuardProfile_Interface() {\n    Get_WireGuard_Interface_MTU\n    log INFO \"WireGuard profile (${WireGuard_ConfPath}) generation in progress...\"\n    cat <<EOF >${WireGuard_ConfPath}\n# Generated by P3TERX/warp.sh\n# Visit https://github.com/P3TERX/warp.sh for more information\n\n[Interface]\nPrivateKey = ${WireGuard_Interface_PrivateKey}\nAddress = ${WireGuard_Interface_Address}\nDNS = ${WireGuard_Interface_DNS}\nMTU = ${WireGuard_Interface_MTU}\nEOF\n}\n\nGenerate_WireGuardProfile_Interface_Rule_TableOff() {\n    cat <<EOF >>${WireGuard_ConfPath}\nTable = off\nEOF\n}\n\nGenerate_WireGuardProfile_Interface_Rule_IPv4_nonGlobal() {\n    cat <<EOF >>${WireGuard_ConfPath}\nPostUP = ip -4 route add default dev ${WireGuard_Interface} table ${WireGuard_Interface_Rule_table}\nPostUP = ip -4 rule add from ${WireGuard_Interface_Address_IPv4} lookup ${WireGuard_Interface_Rule_table}\nPostDown = ip -4 rule delete from ${WireGuard_Interface_Address_IPv4} lookup ${WireGuard_Interface_Rule_table}\nPostUP = ip -4 rule add fwmark ${WireGuard_Interface_Rule_fwmark} lookup ${WireGuard_Interface_Rule_table}\nPostDown = ip -4 rule delete fwmark ${WireGuard_Interface_Rule_fwmark} lookup ${WireGuard_Interface_Rule_table}\nPostUP = ip -4 rule add table main suppress_prefixlength 0\nPostDown = ip -4 rule delete table main suppress_prefixlength 0\nEOF\n}\n\nGenerate_WireGuardProfile_Interface_Rule_IPv6_nonGlobal() {\n    cat <<EOF >>${WireGuard_ConfPath}\nPostUP = ip -6 route add default dev ${WireGuard_Interface} table ${WireGuard_Interface_Rule_table}\nPostUP = ip -6 rule add from ${WireGuard_Interface_Address_IPv6} lookup ${WireGuard_Interface_Rule_table}\nPostDown = ip -6 rule delete from ${WireGuard_Interface_Address_IPv6} lookup ${WireGuard_Interface_Rule_table}\nPostUP = ip -6 rule add fwmark ${WireGuard_Interface_Rule_fwmark} lookup ${WireGuard_Interface_Rule_table}\nPostDown = ip -6 rule delete fwmark ${WireGuard_Interface_Rule_fwmark} lookup ${WireGuard_Interface_Rule_table}\nPostUP = ip -6 rule add table main suppress_prefixlength 0\nPostDown = ip -6 rule delete table main suppress_prefixlength 0\nEOF\n}\n\nGenerate_WireGuardProfile_Interface_Rule_DualStack_nonGlobal() {\n    Generate_WireGuardProfile_Interface_Rule_TableOff\n    Generate_WireGuardProfile_Interface_Rule_IPv4_nonGlobal\n    Generate_WireGuardProfile_Interface_Rule_IPv6_nonGlobal\n}\n\nGenerate_WireGuardProfile_Interface_Rule_IPv4_Global_srcIP() {\n    cat <<EOF >>${WireGuard_ConfPath}\nPostUp = ip -4 rule add from ${IPv4_addr} lookup main prio 18\nPostDown = ip -4 rule delete from ${IPv4_addr} lookup main prio 18\nEOF\n}\n\nGenerate_WireGuardProfile_Interface_Rule_IPv6_Global_srcIP() {\n    cat <<EOF >>${WireGuard_ConfPath}\nPostUp = ip -6 rule add from ${IPv6_addr} lookup main prio 18\nPostDown = ip -6 rule delete from ${IPv6_addr} lookup main prio 18\nEOF\n}\n\nGenerate_WireGuardProfile_Peer() {\n    cat <<EOF >>${WireGuard_ConfPath}\n\n[Peer]\nPublicKey = ${WireGuard_Peer_PublicKey}\nAllowedIPs = ${WireGuard_Peer_AllowedIPs}\nEndpoint = ${WireGuard_Peer_Endpoint}\nEOF\n}\n\nCheck_WARP_Client_Status() {\n    Check_WARP_Client\n    case ${WARP_Client_Status} in\n    active)\n        WARP_Client_Status_en=\"${FontColor_Green}Running${FontColor_Suffix}\"\n        WARP_Client_Status_zh=\"${FontColor_Green}运行中${FontColor_Suffix}\"\n        ;;\n    *)\n        WARP_Client_Status_en=\"${FontColor_Red}Stopped${FontColor_Suffix}\"\n        WARP_Client_Status_zh=\"${FontColor_Red}未运行${FontColor_Suffix}\"\n        ;;\n    esac\n}\n\nCheck_WARP_Proxy_Status() {\n    Check_WARP_Client\n    if [[ ${WARP_Client_Status} = active ]]; then\n        Get_WARP_Proxy_Port\n        WARP_Proxy_Status=$(curl -sx \"socks5h://127.0.0.1:${WARP_Proxy_Port}\" ${CF_Trace_URL} --connect-timeout 2 | grep warp | cut -d= -f2)\n    else\n        unset WARP_Proxy_Status\n    fi\n    case ${WARP_Proxy_Status} in\n    on)\n        WARP_Proxy_Status_en=\"${FontColor_Green}${WARP_Proxy_Port}${FontColor_Suffix}\"\n        WARP_Proxy_Status_zh=\"${WARP_Proxy_Status_en}\"\n        ;;\n    plus)\n        WARP_Proxy_Status_en=\"${FontColor_Green}${WARP_Proxy_Port}(WARP+)${FontColor_Suffix}\"\n        WARP_Proxy_Status_zh=\"${WARP_Proxy_Status_en}\"\n        ;;\n    *)\n        WARP_Proxy_Status_en=\"${FontColor_Red}Off${FontColor_Suffix}\"\n        WARP_Proxy_Status_zh=\"${FontColor_Red}未开启${FontColor_Suffix}\"\n        ;;\n    esac\n}\n\nCheck_WireGuard_Status() {\n    Check_WireGuard\n    case ${WireGuard_Status} in\n    active)\n        WireGuard_Status_en=\"${FontColor_Green}Running${FontColor_Suffix}\"\n        WireGuard_Status_zh=\"${FontColor_Green}运行中${FontColor_Suffix}\"\n        ;;\n    *)\n        WireGuard_Status_en=\"${FontColor_Red}Stopped${FontColor_Suffix}\"\n        WireGuard_Status_zh=\"${FontColor_Red}未运行${FontColor_Suffix}\"\n        ;;\n    esac\n}\n\nCheck_WARP_WireGuard_Status() {\n    Check_Network_Status_IPv4\n    if [[ ${IPv4Status} = on ]]; then\n        WARP_IPv4_Status=$(curl -s4 ${CF_Trace_URL} --connect-timeout 2 | grep warp | cut -d= -f2)\n    else\n        unset WARP_IPv4_Status\n    fi\n    case ${WARP_IPv4_Status} in\n    on)\n        WARP_IPv4_Status_en=\"${FontColor_Green}WARP${FontColor_Suffix}\"\n        WARP_IPv4_Status_zh=\"${WARP_IPv4_Status_en}\"\n        ;;\n    plus)\n        WARP_IPv4_Status_en=\"${FontColor_Green}WARP+${FontColor_Suffix}\"\n        WARP_IPv4_Status_zh=\"${WARP_IPv4_Status_en}\"\n        ;;\n    off)\n        WARP_IPv4_Status_en=\"Normal\"\n        WARP_IPv4_Status_zh=\"正常\"\n        ;;\n    *)\n        Check_Network_Status_IPv4\n        if [[ ${IPv4Status} = on ]]; then\n            WARP_IPv4_Status_en=\"Normal\"\n            WARP_IPv4_Status_zh=\"正常\"\n        else\n            WARP_IPv4_Status_en=\"${FontColor_Red}Unconnected${FontColor_Suffix}\"\n            WARP_IPv4_Status_zh=\"${FontColor_Red}未连接${FontColor_Suffix}\"\n        fi\n        ;;\n    esac\n    Check_Network_Status_IPv6\n    if [[ ${IPv6Status} = on ]]; then\n        WARP_IPv6_Status=$(curl -s6 ${CF_Trace_URL} --connect-timeout 2 | grep warp | cut -d= -f2)\n    else\n        unset WARP_IPv6_Status\n    fi\n    case ${WARP_IPv6_Status} in\n    on)\n        WARP_IPv6_Status_en=\"${FontColor_Green}WARP${FontColor_Suffix}\"\n        WARP_IPv6_Status_zh=\"${WARP_IPv6_Status_en}\"\n        ;;\n    plus)\n        WARP_IPv6_Status_en=\"${FontColor_Green}WARP+${FontColor_Suffix}\"\n        WARP_IPv6_Status_zh=\"${WARP_IPv6_Status_en}\"\n        ;;\n    off)\n        WARP_IPv6_Status_en=\"Normal\"\n        WARP_IPv6_Status_zh=\"正常\"\n        ;;\n    *)\n        Check_Network_Status_IPv6\n        if [[ ${IPv6Status} = on ]]; then\n            WARP_IPv6_Status_en=\"Normal\"\n            WARP_IPv6_Status_zh=\"正常\"\n        else\n            WARP_IPv6_Status_en=\"${FontColor_Red}Unconnected${FontColor_Suffix}\"\n            WARP_IPv6_Status_zh=\"${FontColor_Red}未连接${FontColor_Suffix}\"\n        fi\n        ;;\n    esac\n    if [[ ${IPv4Status} = off && ${IPv6Status} = off ]]; then\n        log ERROR \"Cloudflare WARP network anomaly, WireGuard tunnel established failed.\"\n        Disable_WireGuard\n        exit 1\n    fi\n}\n\nCheck_ALL_Status() {\n    Check_WARP_Client_Status\n    Check_WARP_Proxy_Status\n    Check_WireGuard_Status\n    Check_WARP_WireGuard_Status\n}\n\nPrint_WARP_Client_Status() {\n    log INFO \"Status check in progress...\"\n    sleep 3\n    Check_WARP_Client_Status\n    Check_WARP_Proxy_Status\n    echo -e \"\n ----------------------------\n WARP Client\\t: ${WARP_Client_Status_en}\n SOCKS5 Port\\t: ${WARP_Proxy_Status_en}\n ----------------------------\n\"\n    log INFO \"Done.\"\n}\n\nPrint_WARP_WireGuard_Status() {\n    log INFO \"Status check in progress...\"\n    Check_WireGuard_Status\n    Check_WARP_WireGuard_Status\n    echo -e \"\n ----------------------------\n WireGuard\\t: ${WireGuard_Status_en}\n IPv4 Network\\t: ${WARP_IPv4_Status_en}\n IPv6 Network\\t: ${WARP_IPv6_Status_en}\n ----------------------------\n\"\n    log INFO \"Done.\"\n}\n\nPrint_ALL_Status() {\n    log INFO \"Status check in progress...\"\n    Check_ALL_Status\n    echo -e \"\n ----------------------------\n WARP Client\\t: ${WARP_Client_Status_en}\n SOCKS5 Port\\t: ${WARP_Proxy_Status_en}\n ----------------------------\n WireGuard\\t: ${WireGuard_Status_en}\n IPv4 Network\\t: ${WARP_IPv4_Status_en}\n IPv6 Network\\t: ${WARP_IPv6_Status_en}\n ----------------------------\n\"\n}\n\nView_WireGuard_Profile() {\n    Print_Delimiter\n    cat ${WireGuard_ConfPath}\n    Print_Delimiter\n}\n\nCheck_WireGuard_Peer_Endpoint() {\n    if ping -c1 -W1 ${WireGuard_Peer_Endpoint_IP4} >/dev/null 2>&1; then\n        WireGuard_Peer_Endpoint=\"${WireGuard_Peer_Endpoint_IPv4}\"\n    elif ping6 -c1 -W1 ${WireGuard_Peer_Endpoint_IP6} >/dev/null 2>&1; then\n        WireGuard_Peer_Endpoint=\"${WireGuard_Peer_Endpoint_IPv6}\"\n    else\n        WireGuard_Peer_Endpoint=\"${WireGuard_Peer_Endpoint_Domain}\"\n    fi\n}\n\nSet_WARP_IPv4() {\n    Install_WireGuard\n    Get_IP_addr\n    Load_WGCF_Profile\n    if [[ ${IPv4Status} = off && ${IPv6Status} = on ]]; then\n        WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_64}\"\n    else\n        WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_46}\"\n    fi\n    WireGuard_Peer_AllowedIPs=\"${WireGuard_Peer_AllowedIPs_IPv4}\"\n    Check_WireGuard_Peer_Endpoint\n    Generate_WireGuardProfile_Interface\n    if [[ -n ${IPv4_addr} ]]; then\n        Generate_WireGuardProfile_Interface_Rule_IPv4_Global_srcIP\n    fi\n    Generate_WireGuardProfile_Peer\n    View_WireGuard_Profile\n    Enable_WireGuard\n    Print_WARP_WireGuard_Status\n}\n\nSet_WARP_IPv6() {\n    Install_WireGuard\n    Get_IP_addr\n    Load_WGCF_Profile\n    if [[ ${IPv4Status} = off && ${IPv6Status} = on ]]; then\n        WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_64}\"\n    else\n        WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_46}\"\n    fi\n    WireGuard_Peer_AllowedIPs=\"${WireGuard_Peer_AllowedIPs_IPv6}\"\n    Check_WireGuard_Peer_Endpoint\n    Generate_WireGuardProfile_Interface\n    if [[ -n ${IPv6_addr} ]]; then\n        Generate_WireGuardProfile_Interface_Rule_IPv6_Global_srcIP\n    fi\n    Generate_WireGuardProfile_Peer\n    View_WireGuard_Profile\n    Enable_WireGuard\n    Print_WARP_WireGuard_Status\n}\n\nSet_WARP_DualStack() {\n    Install_WireGuard\n    Get_IP_addr\n    Load_WGCF_Profile\n    WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_46}\"\n    WireGuard_Peer_AllowedIPs=\"${WireGuard_Peer_AllowedIPs_DualStack}\"\n    Check_WireGuard_Peer_Endpoint\n    Generate_WireGuardProfile_Interface\n    if [[ -n ${IPv4_addr} ]]; then\n        Generate_WireGuardProfile_Interface_Rule_IPv4_Global_srcIP\n    fi\n    if [[ -n ${IPv6_addr} ]]; then\n        Generate_WireGuardProfile_Interface_Rule_IPv6_Global_srcIP\n    fi\n    Generate_WireGuardProfile_Peer\n    View_WireGuard_Profile\n    Enable_WireGuard\n    Print_WARP_WireGuard_Status\n}\n\nSet_WARP_DualStack_nonGlobal() {\n    Install_WireGuard\n    Get_IP_addr\n    Load_WGCF_Profile\n    WireGuard_Interface_DNS=\"${WireGuard_Interface_DNS_46}\"\n    WireGuard_Peer_AllowedIPs=\"${WireGuard_Peer_AllowedIPs_DualStack}\"\n    Check_WireGuard_Peer_Endpoint\n    Generate_WireGuardProfile_Interface\n    Generate_WireGuardProfile_Interface_Rule_DualStack_nonGlobal\n    Generate_WireGuardProfile_Peer\n    View_WireGuard_Profile\n    Enable_WireGuard\n    Print_WARP_WireGuard_Status\n}\n\nMenu_Title=\"${FontColor_Yellow_Bold}Cloudflare WARP 一键安装脚本${FontColor_Suffix} ${FontColor_Red}[${shVersion}]${FontColor_Suffix} by ${FontColor_Purple_Bold}P3TERX.COM${FontColor_Suffix}\"\n\nMenu_WARP_Client() {\n    clear\n    echo -e \"\n${Menu_Title}\n\n -------------------------\n WARP 客户端状态 : ${WARP_Client_Status_zh}\n SOCKS5 代理端口 : ${WARP_Proxy_Status_zh}\n -------------------------\n\n管理 WARP 官方客户端：\n\n ${FontColor_Green_Bold}0${FontColor_Suffix}. 返回主菜单\n -\n ${FontColor_Green_Bold}1${FontColor_Suffix}. 开启 SOCKS5 代理\n ${FontColor_Green_Bold}2${FontColor_Suffix}. 关闭 SOCKS5 代理\n ${FontColor_Green_Bold}3${FontColor_Suffix}. 重启 WARP 官方客户端\n ${FontColor_Green_Bold}4${FontColor_Suffix}. 卸载 WARP 官方客户端\n\"\n    unset MenuNumber\n    read -p \"请输入选项: \" MenuNumber\n    echo\n    case ${MenuNumber} in\n    0)\n        Start_Menu\n        ;;\n    1)\n        Enable_WARP_Client_Proxy\n        ;;\n    2)\n        Disconnect_WARP\n        ;;\n    3)\n        Restart_WARP_Client\n        ;;\n    4)\n        Uninstall_WARP_Client\n        ;;\n    *)\n        log ERROR \"无效输入！\"\n        sleep 2s\n        Menu_WARP_Client\n        ;;\n    esac\n}\n\nMenu_WARP_WireGuard() {\n    clear\n    echo -e \"\n${Menu_Title}\n\n -------------------------\n WireGuard 状态 : ${WireGuard_Status_zh}\n IPv4 网络状态  : ${WARP_IPv4_Status_zh}\n IPv6 网络状态  : ${WARP_IPv6_Status_zh}\n -------------------------\n\n管理 WARP WireGuard：\n\n ${FontColor_Green_Bold}0${FontColor_Suffix}. 返回主菜单\n -\n ${FontColor_Green_Bold}1${FontColor_Suffix}. 查看 WARP WireGuard 日志\n ${FontColor_Green_Bold}2${FontColor_Suffix}. 重启 WARP WireGuard 服务\n ${FontColor_Green_Bold}3${FontColor_Suffix}. 关闭 WARP WireGuard 网络\n\"\n    unset MenuNumber\n    read -p \"请输入选项: \" MenuNumber\n    echo\n    case ${MenuNumber} in\n    0)\n        Start_Menu\n        ;;\n    1)\n        Print_WireGuard_Log\n        ;;\n    2)\n        Restart_WireGuard\n        ;;\n    3)\n        Disable_WireGuard\n        ;;\n    *)\n        log ERROR \"无效输入！\"\n        sleep 2s\n        Menu_Other\n        ;;\n    esac\n}\n\nStart_Menu() {\n    log INFO \"正在检查状态...\"\n    Check_ALL_Status\n    clear\n    echo -e \"\n${Menu_Title}\n\n -------------------------\n WARP 客户端状态 : ${WARP_Client_Status_zh}\n SOCKS5 代理端口 : ${WARP_Proxy_Status_zh}\n -------------------------\n WireGuard 状态 : ${WireGuard_Status_zh}\n IPv4 网络状态  : ${WARP_IPv4_Status_zh}\n IPv6 网络状态  : ${WARP_IPv6_Status_zh}\n -------------------------\n\n ${FontColor_Green_Bold}1${FontColor_Suffix}. 安装 Cloudflare WARP 官方客户端\n ${FontColor_Green_Bold}2${FontColor_Suffix}. 自动配置 WARP 客户端 SOCKS5 代理\n ${FontColor_Green_Bold}3${FontColor_Suffix}. 管理 Cloudflare WARP 官方客户端\n -\n ${FontColor_Green_Bold}4${FontColor_Suffix}. 安装 WireGuard 相关组件\n ${FontColor_Green_Bold}5${FontColor_Suffix}. 自动配置 WARP WireGuard IPv4 网络\n ${FontColor_Green_Bold}6${FontColor_Suffix}. 自动配置 WARP WireGuard IPv6 网络\n ${FontColor_Green_Bold}7${FontColor_Suffix}. 自动配置 WARP WireGuard 双栈全局网络\n ${FontColor_Green_Bold}8${FontColor_Suffix}. 管理 WARP WireGuard 网络\n\"\n    unset MenuNumber\n    read -p \"请输入选项: \" MenuNumber\n    echo\n    case ${MenuNumber} in\n    1)\n        Install_WARP_Client\n        ;;\n    2)\n        Enable_WARP_Client_Proxy\n        ;;\n    3)\n        Menu_WARP_Client\n        ;;\n    4)\n        Install_WireGuard\n        ;;\n    5)\n        Set_WARP_IPv4\n        ;;\n    6)\n        Set_WARP_IPv6\n        ;;\n    7)\n        Set_WARP_DualStack\n        ;;\n    8)\n        Menu_WARP_WireGuard\n        ;;\n    *)\n        log ERROR \"无效输入！\"\n        sleep 2s\n        Start_Menu\n        ;;\n    esac\n}\n\nPrint_Usage() {\n    echo -e \"\nCloudflare WARP Installer [${shVersion}]\n\nUSAGE:\n    bash <(curl -fsSL git.io/warp.sh) [SUBCOMMAND]\n\nSUBCOMMANDS:\n    install         Install Cloudflare WARP Official Linux Client\n    uninstall       uninstall Cloudflare WARP Official Linux Client\n    restart         Restart Cloudflare WARP Official Linux Client\n    proxy           Enable WARP Client Proxy Mode (default SOCKS5 port: 40000)\n    unproxy         Disable WARP Client Proxy Mode\n    wg              Install WireGuard and related components\n    wg4             Configuration WARP IPv4 Global Network (with WireGuard), all IPv4 outbound data over the WARP network\n    wg6             Configuration WARP IPv6 Global Network (with WireGuard), all IPv6 outbound data over the WARP network\n    wgd             Configuration WARP Dual Stack Global Network (with WireGuard), all outbound data over the WARP network\n    wgx             Configuration WARP Non-Global Network (with WireGuard), set fwmark or interface IP Address to use the WARP network\n    rwg             Restart WARP WireGuard service\n    dwg             Disable WARP WireGuard service\n    status          Prints status information\n    version         Prints version information\n    help            Prints this message or the help of the given subcommand(s)\n    menu            Chinese special features menu\n\"\n}\n\ncat <<-'EOM'\n\n\u001b[0;1;35;95m__\u001b[0m        \u001b[0;1;34;94m__\u001b[0;1;35;95m_\u001b[0m    \u001b[0;1;33;93m_\u001b[0;1;32;92m__\u001b[0;1;36;96m_\u001b[0m  \u001b[0;1;34;94m_\u001b[0;1;35;95m__\u001b[0;1;31;91m_\u001b[0m    \u001b[0;1;32;92m_\u001b[0;1;36;96m__\u001b[0m           \u001b[0;1;36;96m_\u001b[0m        \u001b[0;1;32;92m_\u001b[0m \u001b[0;1;36;96m_\u001b[0m           \n\u001b[0;1;31;91m\\\u001b[0m \u001b[0;1;33;93m\\\u001b[0m      \u001b[0;1;34;94m/\u001b[0m \u001b[0;1;35;95m/\u001b[0m \u001b[0;1;31;91m\\\u001b[0m  \u001b[0;1;32;92m|\u001b[0m  \u001b[0;1;36;96m_\u001b[0m \u001b[0;1;34;94m\\\u001b[0;1;35;95m|\u001b[0m  \u001b[0;1;31;91m_\u001b[0m \u001b[0;1;33;93m\\\u001b[0m  \u001b[0;1;36;96m|_\u001b[0m \u001b[0;1;34;94m_\u001b[0;1;35;95m|_\u001b[0m \u001b[0;1;31;91m_\u001b[0;1;33;93m_\u001b[0m  \u001b[0;1;32;92m_\u001b[0;1;36;96m__\u001b[0;1;34;94m|\u001b[0m \u001b[0;1;35;95m|_\u001b[0m \u001b[0;1;31;91m_\u001b[0;1;33;93m_\u001b[0m \u001b[0;1;32;92m_|\u001b[0m \u001b[0;1;36;96m|\u001b[0m \u001b[0;1;34;94m|\u001b[0m \u001b[0;1;35;95m_\u001b[0;1;31;91m__\u001b[0m \u001b[0;1;33;93m_\u001b[0m \u001b[0;1;32;92m_\u001b[0;1;36;96m_\u001b[0m \n \u001b[0;1;33;93m\\\u001b[0m \u001b[0;1;32;92m\\\u001b[0m \u001b[0;1;36;96m/\u001b[0;1;34;94m\\\u001b[0m \u001b[0;1;35;95m/\u001b[0m \u001b[0;1;31;91m/\u001b[0m \u001b[0;1;33;93m_\u001b[0m \u001b[0;1;32;92m\\\u001b[0m \u001b[0;1;36;96m|\u001b[0m \u001b[0;1;34;94m|_\u001b[0;1;35;95m)\u001b[0m \u001b[0;1;31;91m|\u001b[0m \u001b[0;1;33;93m|_\u001b[0;1;32;92m)\u001b[0m \u001b[0;1;36;96m|\u001b[0m  \u001b[0;1;34;94m|\u001b[0m \u001b[0;1;35;95m|\u001b[0;1;31;91m|\u001b[0m \u001b[0;1;33;93m'_\u001b[0m \u001b[0;1;32;92m\\\u001b[0;1;36;96m/\u001b[0m \u001b[0;1;34;94m__\u001b[0;1;35;95m|\u001b[0m \u001b[0;1;31;91m__\u001b[0;1;33;93m/\u001b[0m \u001b[0;1;32;92m_`\u001b[0m \u001b[0;1;36;96m|\u001b[0m \u001b[0;1;34;94m|\u001b[0m \u001b[0;1;35;95m|\u001b[0;1;31;91m/\u001b[0m \u001b[0;1;33;93m_\u001b[0m \u001b[0;1;32;92m\\\u001b[0m \u001b[0;1;36;96m'_\u001b[0;1;34;94m_|\u001b[0m\n  \u001b[0;1;36;96m\\\u001b[0m \u001b[0;1;34;94mV\u001b[0m  \u001b[0;1;35;95mV\u001b[0m \u001b[0;1;31;91m/\u001b[0m \u001b[0;1;33;93m_\u001b[0;1;32;92m__\u001b[0m \u001b[0;1;36;96m\\\u001b[0;1;34;94m|\u001b[0m  \u001b[0;1;35;95m_\u001b[0m \u001b[0;1;31;91m<\u001b[0;1;33;93m|\u001b[0m  \u001b[0;1;32;92m_\u001b[0;1;36;96m_/\u001b[0m   \u001b[0;1;35;95m|\u001b[0m \u001b[0;1;31;91m|\u001b[0;1;33;93m|\u001b[0m \u001b[0;1;32;92m|\u001b[0m \u001b[0;1;36;96m|\u001b[0m \u001b[0;1;34;94m\\_\u001b[0;1;35;95m_\u001b[0m \u001b[0;1;31;91m\\\u001b[0m \u001b[0;1;33;93m||\u001b[0m \u001b[0;1;32;92m(\u001b[0;1;36;96m_|\u001b[0m \u001b[0;1;34;94m|\u001b[0m \u001b[0;1;35;95m|\u001b[0m \u001b[0;1;31;91m|\u001b[0m  \u001b[0;1;32;92m__\u001b[0;1;36;96m/\u001b[0m \u001b[0;1;34;94m|\u001b[0m   \n   \u001b[0;1;34;94m\\\u001b[0;1;35;95m_/\u001b[0;1;31;91m\\_\u001b[0;1;33;93m/_\u001b[0;1;32;92m/\u001b[0m   \u001b[0;1;34;94m\\_\u001b[0;1;35;95m\\_\u001b[0;1;31;91m|\u001b[0m \u001b[0;1;33;93m\\_\u001b[0;1;32;92m\\_\u001b[0;1;36;96m|\u001b[0m     \u001b[0;1;31;91m|_\u001b[0;1;33;93m__\u001b[0;1;32;92m|_\u001b[0;1;36;96m|\u001b[0m \u001b[0;1;34;94m|_\u001b[0;1;35;95m|_\u001b[0;1;31;91m__\u001b[0;1;33;93m/\\\u001b[0;1;32;92m__\u001b[0;1;36;96m\\_\u001b[0;1;34;94m_,\u001b[0;1;35;95m_|\u001b[0;1;31;91m_|\u001b[0;1;33;93m_|\u001b[0;1;32;92m\\_\u001b[0;1;36;96m__\u001b[0;1;34;94m|_\u001b[0;1;35;95m|\u001b[0m   \n                                                                    \nCopyright (C) P3TERX.COM | https://github.com/P3TERX/warp.sh\n\nEOM\n\nif [ $# -ge 1 ]; then\n    Get_System_Info\n    case ${1} in\n    install)\n        Install_WARP_Client\n        ;;\n    uninstall)\n        Uninstall_WARP_Client\n        ;;\n    restart)\n        Restart_WARP_Client\n        ;;\n    proxy | socks5 | s5)\n        Enable_WARP_Client_Proxy\n        ;;\n    unproxy | unsocks5 | uns5)\n        Disconnect_WARP\n        ;;\n    wg)\n        Install_WireGuard\n        ;;\n    wg4 | 4)\n        Set_WARP_IPv4\n        ;;\n    wg6 | 6)\n        Set_WARP_IPv6\n        ;;\n    wgd | d)\n        Set_WARP_DualStack\n        ;;\n    wgx | x)\n        Set_WARP_DualStack_nonGlobal\n        ;;\n    rwg)\n        Restart_WireGuard\n        ;;\n    dwg)\n        Disable_WireGuard\n        ;;\n    status)\n        Print_ALL_Status\n        ;;\n    help)\n        Print_Usage\n        ;;\n    version)\n        echo \"${shVersion}\"\n        ;;\n    menu)\n        Start_Menu\n        ;;\n    *)\n        log ERROR \"Invalid Parameters: $*\"\n        Print_Usage\n        exit 1\n        ;;\n    esac\nelse\n    Print_Usage\nfi\n"
        }
      ]
    }
  ]
}