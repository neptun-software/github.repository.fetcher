{
  "metadata": {
    "timestamp": 1736568251983,
    "page": 127,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjEzMA==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "ekalinin/github-markdown-toc",
      "stars": 3247,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": ".gitignore",
          "type": "blob",
          "size": 0.015625,
          "content": "*.swp\ntoken.txt\n"
        },
        {
          "name": "Dockerfile",
          "type": "blob",
          "size": 0.166015625,
          "content": "FROM debian\n\nRUN apt update -y && \\\n  apt upgrade -y && \\\n  apt install curl -y\n\nWORKDIR app\n\nCOPY gh-md-toc .\n\nRUN chmod +x gh-md-toc\n\nENTRYPOINT [\"./gh-md-toc\"]\nCMD []\n"
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 1.0556640625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2014 Eugene Kalinin\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "Makefile",
          "type": "blob",
          "size": 0.1650390625,
          "content": "release: test\n\t@git tag `grep -o -E '[0-9]\\.[0-9]{2}\\.[0-9]{1,2}' gh-md-toc`\n\t@git push --tags origin master\n\ntest:\n\t@bats tests\n\nlint:\n\t@shellcheck -e SC2008 gh-md-toc\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 12.4208984375,
          "content": "gh-md-toc\n=========\n\n[![CI](https://github.com/ekalinin/github-markdown-toc/actions/workflows/ci.yml/badge.svg?branch=master)](https://github.com/ekalinin/github-markdown-toc/actions/workflows/ci.yml)\n![GitHub release (latest by date)](https://img.shields.io/github/v/release/ekalinin/github-markdown-toc)\n\ngh-md-toc — is for you if you **want to generate TOC** (Table Of Content) for a README.md or\na GitHub wiki page **without installing additional software**.\n\nIt's my try to fix a problem:\n\n  * [github/issues/215](https://github.com/isaacs/github/issues/215)\n\ngh-md-toc is able to process:\n\n  * stdin\n  * local files (markdown files in local file system)\n  * remote files (html files on github.com)\n\ngh-md-toc tested on Ubuntu, and macOS High Sierra (gh-md-toc release 0.4.9). If you want it on Windows, you\nbetter to use a golang based implementation:\n\n  * [github-markdown-toc.go](https://github.com/ekalinin/github-markdown-toc.go)\n\nIt's more solid, reliable and with ability of a parallel processing. And\nabsolutely without dependencies.\n\nTable of contents\n=================\n\n<!--ts-->\n   * [Installation](#installation)\n   * [Usage](#usage)\n      * [STDIN](#stdin)\n      * [Local files](#local-files)\n      * [Remote files](#remote-files)\n      * [Multiple files](#multiple-files)\n      * [Combo](#combo)\n      * [Auto insert and update TOC](#auto-insert-and-update-toc)\n      * [GitHub token](#github-token)\n      * [TOC generation with Github Actions](#toc-generation-with-github-actions)\n   * [Tests](#tests)\n   * [Dependency](#dependency)\n   * [Docker](#docker)\n     * [Local](#local)\n     * [Public](#public)\n<!--te-->\n\n\nInstallation\n============\n\nLinux (manual installation)\n```bash\n$ wget https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc\n$ chmod a+x gh-md-toc\n```\n\nMacOS (manual installation)\n```bash\n$ curl https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc -o gh-md-toc\n$ chmod a+x gh-md-toc\n```\n\nLinux or MacOS (using [Basher](https://github.com/basherpm/basher))\n```bash\n$ basher install ekalinin/github-markdown-toc\n# `gh-md-toc` will automatically be available in the PATH\n```\n\nUsage\n=====\n\n\nSTDIN\n-----\n\nHere's an example of TOC creating for markdown from STDIN:\n\n```bash\n➥ cat ~/projects/Dockerfile.vim/README.md | ./gh-md-toc -\n  * [Dockerfile.vim](#dockerfilevim)\n  * [Screenshot](#screenshot)\n  * [Installation](#installation)\n        * [OR using Pathogen:](#or-using-pathogen)\n        * [OR using Vundle:](#or-using-vundle)\n  * [License](#license)\n```\n\nLocal files\n-----------\n\nHere's an example of TOC creating for a local README.md:\n\n```bash\n➥ ./gh-md-toc ~/projects/Dockerfile.vim/README.md\n\n\nTable of Contents\n=================\n\n  * [Dockerfile.vim](#dockerfilevim)\n  * [Screenshot](#screenshot)\n  * [Installation](#installation)\n        * [OR using Pathogen:](#or-using-pathogen)\n        * [OR using Vundle:](#or-using-vundle)\n  * [License](#license)\n```\n\nRemote files\n------------\n\nAnd here's an example, when you have a README.md like this:\n\n  * [README.md without TOC](https://github.com/ekalinin/envirius/blob/f939d3b6882bfb6ecb28ef7b6e62862f934ba945/README.md)\n\nAnd you want to generate TOC for it.\n\nThere is nothing easier:\n\n```bash\n➥ ./gh-md-toc https://github.com/ekalinin/envirius/blob/master/README.md\n\nTable of Contents\n=================\n\n  * [envirius](#envirius)\n    * [Idea](#idea)\n    * [Features](#features)\n  * [Installation](#installation)\n  * [Uninstallation](#uninstallation)\n  * [Available plugins](#available-plugins)\n  * [Usage](#usage)\n    * [Check available plugins](#check-available-plugins)\n    * [Check available versions for each plugin](#check-available-versions-for-each-plugin)\n    * [Create an environment](#create-an-environment)\n    * [Activate/deactivate environment](#activatedeactivate-environment)\n      * [Activating in a new shell](#activating-in-a-new-shell)\n      * [Activating in the same shell](#activating-in-the-same-shell)\n    * [Get list of environments](#get-list-of-environments)\n    * [Get current activated environment](#get-current-activated-environment)\n    * [Do something in environment without enabling it](#do-something-in-environment-without-enabling-it)\n    * [Get help](#get-help)\n    * [Get help for a command](#get-help-for-a-command)\n  * [How to add a plugin?](#how-to-add-a-plugin)\n    * [Mandatory elements](#mandatory-elements)\n      * [plug_list_versions](#plug_list_versions)\n      * [plug_url_for_download](#plug_url_for_download)\n      * [plug_build](#plug_build)\n    * [Optional elements](#optional-elements)\n      * [Variables](#variables)\n      * [Functions](#functions)\n    * [Examples](#examples)\n  * [Example of the usage](#example-of-the-usage)\n  * [Dependencies](#dependencies)\n  * [Supported OS](#supported-os)\n  * [Tests](#tests)\n  * [Version History](#version-history)\n  * [License](#license)\n  * [README in another language](#readme-in-another-language)\n```\n\nThat's all! Now all you need — is copy/paste result from console into original\nREADME.md.\n\nIf you do not want to copy from console you can add `> YOURFILENAME.md` at the end of the command like `./gh-md-toc https://github.com/ekalinin/envirius/blob/master/README.md > table-of-contents.md` and this will store the table of contents to a file named table-of-contents.md in your current folder.\n\nAnd here is a result:\n\n  * [README.md with TOC](https://github.com/ekalinin/envirius/blob/24ea3be0d3cc03f4235fa4879bb33dc122d0ae29/README.md)\n\nMoreover, it's able to work with GitHub's wiki pages:\n\n```bash\n➥ ./gh-md-toc https://github.com/ekalinin/nodeenv/wiki/Who-Uses-Nodeenv\n\nTable of Contents\n=================\n\n  * [Who Uses Nodeenv?](#who-uses-nodeenv)\n    * [OpenStack](#openstack)\n    * [pre-commit.com](#pre-commitcom)\n```\n\nMultiple files\n--------------\n\nIt supports multiple files as well:\n\n```bash\n➥ ./gh-md-toc \\\n    https://github.com/aminb/rust-for-c/blob/master/hello_world/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/primitive_types_and_operators/README.md \\\n    https://github.com/aminb/rust-for-c/blob/master/unique_pointers/README.md\n\n  * [Hello world](https://github.com/aminb/rust-for-c/blob/master/hello_world/README.md#hello-world)\n\n  * [Control Flow](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#control-flow)\n    * [If](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#if)\n    * [Loops](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#loops)\n    * [For loops](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#for-loops)\n    * [Switch/Match](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#switchmatch)\n    * [Method call](https://github.com/aminb/rust-for-c/blob/master/control_flow/README.md#method-call)\n\n  * [Primitive Types and Operators](https://github.com/aminb/rust-for-c/blob/master/primitive_types_and_operators/README.md#primitive-types-and-operators)\n\n  * [Unique Pointers](https://github.com/aminb/rust-for-c/blob/master/unique_pointers/README.md#unique-pointers)\n```\n\nCombo\n-----\n\nYou can easily combine both ways:\n\n```bash\n➥ ./gh-md-toc \\\n    ~/projects/Dockerfile.vim/README.md \\\n    https://github.com/ekalinin/sitemap.s/blob/master/README.md\n\n  * [Dockerfile.vim](~/projects/Dockerfile.vim/README.md#dockerfilevim)\n  * [Screenshot](~/projects/Dockerfile.vim/README.md#screenshot)\n  * [Installation](~/projects/Dockerfile.vim/README.md#installation)\n        * [OR using Pathogen:](~/projects/Dockerfile.vim/README.md#or-using-pathogen)\n        * [OR using Vundle:](~/projects/Dockerfile.vim/README.md#or-using-vundle)\n  * [License](~/projects/Dockerfile.vim/README.md#license)\n\n  * [sitemap.js](https://github.com/ekalinin/sitemap.js/blob/master/README.md#sitemapjs)\n    * [Installation](https://github.com/ekalinin/sitemap.js/blob/master/README.md#installation)\n    * [Usage](https://github.com/ekalinin/sitemap.js/blob/master/README.md#usage)\n    * [License](https://github.com/ekalinin/sitemap.js/blob/master/README.md#license)\n\n<!-- Created by https://github.com/ekalinin/github-markdown-toc -->\n```\n\nAuto insert and update TOC\n--------------------------\n\nJust put into a file these two lines:\n\n```\n<!--ts-->\n<!--te-->\n```\n\nAnd run:\n\n```bash\n$ ./gh-md-toc --insert README.test.md\n\nTable of Contents\n=================\n\n   * [gh-md-toc](#gh-md-toc)\n   * [Installation](#installation)\n   * [Usage](#usage)\n      * [STDIN](#stdin)\n      * [Local files](#local-files)\n      * [Remote files](#remote-files)\n      * [Multiple files](#multiple-files)\n      * [Combo](#combo)\n   * [Tests](#tests)\n   * [Dependency](#dependency)\n\n!! TOC was added into: 'README.test.md'\n!! Origin version of the file: 'README.test.md.orig.2018-02-04_192655'\n!! TOC added into a separate file: 'README.test.md.toc.2018-02-04_192655'\n\n\n<!-- Created by https://github.com/ekalinin/github-markdown-toc -->\n```\n\nNow check the same file:\n\n```bash\n➜ grep -A15 \"<\\!\\-\\-ts\" README.test.md\n<!--ts-->\n   * [gh-md-toc](#gh-md-toc)\n   * [Table of contents](#table-of-contents)\n   * [Installation](#installation)\n   * [Usage](#usage)\n      * [STDIN](#stdin)\n      * [Local files](#local-files)\n      * [Remote files](#remote-files)\n      * [Multiple files](#multiple-files)\n      * [Combo](#combo)\n      * [Auto insert and update TOC](#auto-insert-and-update-toc)\n   * [Tests](#tests)\n   * [Dependency](#dependency)\n\n<!-- Added by: <your-user>, at: 2018-02-04T19:38+03:00 -->\n\n<!--te-->\n```\n\nNext time when your file will be changed just repeat the command (`./gh-md-toc\n--insert ...`) and TOC will be refreshed again.\n\nGitHub token\n------------\n\nAll your tokens are [here](https://github.com/settings/tokens).\n\nYou will need them if you get an error like this:\n\n```\nParsing local markdown file requires access to github API\nError: You exceeded the hourly limit. See: https://developer.github.com/v3/#rate-limiting\nor place github auth token here: ./token.txt\n```\n\nA token can be used as an env variable:\n\n```bash\n➥ GH_TOC_TOKEN=2a2dab...563 ./gh-md-toc README.md\n\nTable of Contents\n=================\n\n* [github\\-markdown\\-toc](#github-markdown-toc)\n* [Table of Contents](#table-of-contents)\n* [Installation](#installation)\n* [Tests](#tests)\n* [Usage](#usage)\n* [LICENSE](#license)\n```\n\nOr from a file:\n\n```bash\n➥ echo \"2a2dab...563\" > ./token.txt\n➥ ./gh-md-toc README.md\n\nTable of Contents\n=================\n\n* [github\\-markdown\\-toc](#github-markdown-toc)\n* [Table of Contents](#table-of-contents)\n* [Installation](#installation)\n* [Tests](#tests)\n* [Usage](#usage)\n* [LICENSE](#license)\n```\n\nTOC generation with Github Actions\n----------------------------------\n\nConfig:\n\n```yaml\non:\n  push:\n    branches: [main]\n    paths: ['foo.md']\n\njobs:\n  build:\n    runs-on: ubuntu-latest\n    timeout-minutes: 5\n    steps:\n      - uses: actions/checkout@v2\n      - run: |\n          curl https://raw.githubusercontent.com/ekalinin/github-markdown-toc/master/gh-md-toc -o gh-md-toc\n          chmod a+x gh-md-toc\n          ./gh-md-toc --insert --no-backup --hide-footer foo.md\n          rm gh-md-toc\n      - uses: stefanzweifel/git-auto-commit-action@v4\n        with:\n          commit_message: Auto update markdown TOC\n```\n\nTests\n=====\n\nDone with [bats](https://github.com/bats-core/bats-core).\nUseful articles:\n\n  * https://www.engineyard.com/blog/how-to-use-bats-to-test-your-command-line-tools/\n  * http://blog.spike.cx/post/60548255435/testing-bash-scripts-with-bats\n\n\nHow to run tests:\n\n```bash\n➥ make test                                                                                                                 \n\n ✓ TOC for local README.md\n ✓ TOC for remote README.md\n ✓ TOC for mixed README.md (remote/local)\n ✓ TOC for markdown from stdin\n ✓ --help\n ✓ --version\n\n6 tests, 0 failures\n```\n\nDependency\n==========\n\n  * curl or wget\n  * awk (mawk is not tested)\n  * grep\n  * sed\n  * bats (for unit tests)\n\nTested on Ubuntu 14.04/14.10 in bash/zsh.\n\nDocker\n======\n\nLocal\n-----\n\n* Build\n\n```shell\n$ docker build -t markdown-toc-generator .\n```\n\n* Run on an URL\n\n```shell\n$ docker run -it markdown-toc-generator https://github.com/ekalinin/envirius/blob/master/README.md\n```\n\n* Run on a local file (need to share volume with docker)\n\n```shell\n$ docker run -it -v /data/ekalinin/envirius:/data markdown-toc-generator /data/README.md\n```\n\nPublic\n-------\n\n```shell\n$ docker pull evkalinin/gh-md-toc:0.7.0\n\n$ docker images | grep toc\nevkalinin/gh-md-toc                       0.7.0 0b8db6aed298        11 minutes ago      147MB\n\n$ docker run -it evkalinin/gh-md-toc:0.7.0 \\\n    https://github.com/ekalinin/envirius/blob/master/README.md\n```\n"
        },
        {
          "name": "gh-md-toc",
          "type": "blob",
          "size": 12.3017578125,
          "content": "#!/usr/bin/env bash\n\n#\n# Steps:\n#\n#  1. Download corresponding html file for some README.md:\n#       curl -s $1\n#\n#  2. Discard rows where no substring 'user-content-' (github's markup):\n#       awk '/user-content-/ { ...\n#\n#  3.1 Get last number in each row like ' ... </span></a>sitemap.js</h1'.\n#      It's a level of the current header:\n#       substr($0, length($0), 1)\n#\n#  3.2 Get level from 3.1 and insert corresponding number of spaces before '*':\n#       sprintf(\"%*s\", (level-1)*'\"$nb_spaces\"', \"\")\n#\n#  4. Find head's text and insert it inside \"* [ ... ]\":\n#       substr($0, match($0, /a>.*<\\/h/)+2, RLENGTH-5)\n#\n#  5. Find anchor and insert it inside \"(...)\":\n#       substr($0, match($0, \"href=\\\"[^\\\"]+?\\\" \")+6, RLENGTH-8)\n#\n\ngh_toc_version=\"0.10.0\"\n\ngh_user_agent=\"gh-md-toc v$gh_toc_version\"\n\n#\n# Download rendered into html README.md by its url.\n#\n#\ngh_toc_load() {\n    local gh_url=$1\n\n    if type curl &>/dev/null; then\n        curl --user-agent \"$gh_user_agent\" -s \"$gh_url\"\n    elif type wget &>/dev/null; then\n        wget --user-agent=\"$gh_user_agent\" -qO- \"$gh_url\"\n    else\n        echo \"Please, install 'curl' or 'wget' and try again.\"\n        exit 1\n    fi\n}\n\n#\n# Converts local md file into html by GitHub\n#\n# -> curl -X POST --data '{\"text\": \"Hello world github/linguist#1 **cool**, and #1!\"}' https://api.github.com/markdown\n# <p>Hello world github/linguist#1 <strong>cool</strong>, and #1!</p>'\"\ngh_toc_md2html() {\n    local gh_file_md=$1\n    local skip_header=$2\n\n    URL=https://api.github.com/markdown/raw\n\n    if [ -n \"$GH_TOC_TOKEN\" ]; then\n        TOKEN=$GH_TOC_TOKEN\n    else\n        TOKEN_FILE=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/token.txt\"\n        if [ -f \"$TOKEN_FILE\" ]; then\n            TOKEN=\"$(cat \"$TOKEN_FILE\")\"\n        fi\n    fi\n    if [ -n \"${TOKEN}\" ]; then\n        AUTHORIZATION=\"Authorization: token ${TOKEN}\"\n    fi\n\n    local gh_tmp_file_md=$gh_file_md\n    if [ \"$skip_header\" = \"yes\" ]; then\n        if grep -Fxq \"<!--te-->\" \"$gh_src\"; then\n          # cut everything before the toc\n          gh_tmp_file_md=$gh_file_md~~\n          sed '1,/<!--te-->/d' \"$gh_file_md\" > \"$gh_tmp_file_md\"\n        fi\n    fi\n\n    # echo $URL 1>&2\n    OUTPUT=$(curl -s \\\n        --user-agent \"$gh_user_agent\" \\\n        --data-binary @\"$gh_tmp_file_md\" \\\n        -H \"Content-Type:text/plain\" \\\n        -H \"$AUTHORIZATION\" \\\n        \"$URL\")\n\n    rm -f \"${gh_file_md}~~\"\n\n    if [ \"$?\" != \"0\" ]; then\n        echo \"XXNetworkErrorXX\"\n    fi\n    if [ \"$(echo \"${OUTPUT}\" | awk '/API rate limit exceeded/')\" != \"\" ]; then\n        echo \"XXRateLimitXX\"\n    else\n        echo \"${OUTPUT}\"\n    fi\n}\n\n\n#\n# Is passed string url\n#\ngh_is_url() {\n    case $1 in\n        https* | http*)\n            echo \"yes\";;\n        *)\n            echo \"no\";;\n    esac\n}\n\n#\n# TOC generator\n#\ngh_toc(){\n    local gh_src=$1\n    local gh_src_copy=$1\n    local gh_ttl_docs=$2\n    local need_replace=$3\n    local no_backup=$4\n    local no_footer=$5\n    local indent=$6\n    local skip_header=$7\n\n    if [ \"$gh_src\" = \"\" ]; then\n        echo \"Please, enter URL or local path for a README.md\"\n        exit 1\n    fi\n\n\n    # Show \"TOC\" string only if working with one document\n    if [ \"$gh_ttl_docs\" = \"1\" ]; then\n\n        echo \"Table of Contents\"\n        echo \"=================\"\n        echo \"\"\n        gh_src_copy=\"\"\n\n    fi\n\n    if [ \"$(gh_is_url \"$gh_src\")\" == \"yes\" ]; then\n        gh_toc_load \"$gh_src\" | gh_toc_grab \"$gh_src_copy\" \"$indent\"\n        if [ \"${PIPESTATUS[0]}\" != \"0\" ]; then\n            echo \"Could not load remote document.\"\n            echo \"Please check your url or network connectivity\"\n            exit 1\n        fi\n        if [ \"$need_replace\" = \"yes\" ]; then\n            echo\n            echo \"!! '$gh_src' is not a local file\"\n            echo \"!! Can't insert the TOC into it.\"\n            echo\n        fi\n    else\n        local rawhtml\n        rawhtml=$(gh_toc_md2html \"$gh_src\" \"$skip_header\")\n        if [ \"$rawhtml\" == \"XXNetworkErrorXX\" ]; then\n             echo \"Parsing local markdown file requires access to github API\"\n             echo \"Please make sure curl is installed and check your network connectivity\"\n             exit 1\n        fi\n        if [ \"$rawhtml\" == \"XXRateLimitXX\" ]; then\n             echo \"Parsing local markdown file requires access to github API\"\n             echo \"Error: You exceeded the hourly limit. See: https://developer.github.com/v3/#rate-limiting\"\n             TOKEN_FILE=\"$(cd \"$(dirname \"${BASH_SOURCE[0]}\")\" && pwd)/token.txt\"\n             echo \"or place GitHub auth token here: ${TOKEN_FILE}\"\n             exit 1\n        fi\n        local toc\n        toc=`echo \"$rawhtml\" | gh_toc_grab \"$gh_src_copy\" \"$indent\"`\n        echo \"$toc\"\n        if [ \"$need_replace\" = \"yes\" ]; then\n            if grep -Fxq \"<!--ts-->\" \"$gh_src\" && grep -Fxq \"<!--te-->\" \"$gh_src\"; then\n                echo \"Found markers\"\n            else\n                echo \"You don't have <!--ts--> or <!--te--> in your file...exiting\"\n                exit 1\n            fi\n            local ts=\"<\\!--ts-->\"\n            local te=\"<\\!--te-->\"\n            local dt\n            dt=$(date +'%F_%H%M%S')\n            local ext=\".orig.${dt}\"\n            local toc_path=\"${gh_src}.toc.${dt}\"\n            local toc_createdby=\"<!-- Created by https://github.com/ekalinin/github-markdown-toc -->\"\n            local toc_footer\n            toc_footer=\"<!-- Added by: `whoami`, at: `date` -->\"\n            # http://fahdshariff.blogspot.ru/2012/12/sed-mutli-line-replacement-between-two.html\n            # clear old TOC\n            sed -i\"${ext}\" \"/${ts}/,/${te}/{//!d;}\" \"$gh_src\"\n            # create toc file\n            echo \"${toc}\" > \"${toc_path}\"\n            if [ \"${no_footer}\" != \"yes\" ]; then\n                echo -e \"\\n${toc_createdby}\\n${toc_footer}\\n\" >> \"$toc_path\"\n            fi\n\n            # insert toc file\n            if ! sed --version > /dev/null 2>&1; then\n                sed -i \"\" \"/${ts}/r ${toc_path}\" \"$gh_src\"\n            else\n                sed -i \"/${ts}/r ${toc_path}\" \"$gh_src\"\n            fi\n            echo\n            if [ \"${no_backup}\" = \"yes\" ]; then\n                rm \"$toc_path\" \"$gh_src$ext\"\n            fi\n            echo \"!! TOC was added into: '$gh_src'\"\n            if [ -z \"${no_backup}\" ]; then\n                echo \"!! Origin version of the file: '${gh_src}${ext}'\"\n                echo \"!! TOC added into a separate file: '${toc_path}'\"\n        fi\n            echo\n        fi\n    fi\n}\n\n#\n# Grabber of the TOC from rendered html\n#\n# $1 - a source url of document.\n#      It's need if TOC is generated for multiple documents.\n# $2 - number of spaces used to indent.\n#\ngh_toc_grab() {\n\n    href_regex=\"/href=\\\"[^\\\"]+?\\\"/\"\n    common_awk_script='\n                     modified_href = \"\"\n                     split(href, chars, \"\")\n                     for (i=1;i <= length(href); i++) {\n                         c = chars[i]\n                         res = \"\"\n                         if (c == \"+\") {\n                             res = \" \"\n                         } else {\n                             if (c == \"%\") {\n                                 res = \"\\\\x\"\n                             } else {\n                                 res = c \"\"\n                             }\n                         }\n                         modified_href = modified_href res\n                    }\n                    print sprintf(\"%*s\", (level-1)*'\"$2\"', \"\") \"* [\" text \"](\" gh_url  modified_href \")\"\n                    '\n    if [ \"`uname -s`\" == \"OS/390\" ]; then\n        grepcmd=\"pcregrep -o\"\n        echoargs=\"\"\n        awkscript='{\n                     level = substr($0, 3, 1)\n                     text = substr($0, match($0, /<\\/span><\\/a>[^<]*<\\/h/)+11, RLENGTH-14)\n                     href = substr($0, match($0, '$href_regex')+6, RLENGTH-7)\n                     '\"$common_awk_script\"'\n                }'\n    else\n        grepcmd=\"grep -Eo\"\n        echoargs=\"-e\"\n        awkscript='{\n                     level = substr($0, 3, 1)\n                     text = substr($0, match($0, /\">.*<\\/h/)+2, RLENGTH-5)\n                     href = substr($0, match($0, '$href_regex')+6, RLENGTH-7)\n                     '\"$common_awk_script\"'\n                }'\n    fi\n\n    # if closed <h[1-6]> is on the new line, then move it on the prev line\n    # for example:\n    #   was: The command <code>foo1</code>\n    #        </h1>\n    #   became: The command <code>foo1</code></h1>\n    sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n<\\/h/<\\/h/g' |\n\n    # Sometimes a line can start with <span>. Fix that.\n    sed -e ':a' -e 'N' -e '$!ba' -e 's/\\n<span/<span/g' |\n\n    # find strings that corresponds to template\n    $grepcmd '<h.*class=\"heading-element\".*</a' |\n\n    # remove code tags\n    sed 's/<code>//g' | sed 's/<\\/code>//g' |\n\n    # remove g-emoji\n    sed 's/<g-emoji[^>]*[^<]*<\\/g-emoji> //g' |\n\n    # now all rows are like:\n    #   <h1 class=\"heading-element\">title</h1><a href=\"...\"><span>..</span></a>\n    # format result line\n    #   * $0 - whole string\n    #   * last element of each row: \"</hN\" where N in (1,2,3,...)\n    echo $echoargs \"$(awk -v \"gh_url=$1\" \"$awkscript\")\"\n}\n\n        # perl -lpE 's/(\\[[^\\]]*\\]\\()(.*?)(\\))/my ($pre, $in, $post)=($1, $2, $3) ; $in =~ s{\\+}{ }g; $in =~ s{%}{\\\\x}g; $pre.$in.$post/ems')\"\n\n#\n# Returns filename only from full path or url\n#\ngh_toc_get_filename() {\n    echo \"${1##*/}\"\n}\n\nshow_version() {\n    echo \"$gh_toc_version\"\n    echo\n    echo \"os:     `uname -s`\"\n    echo \"arch:   `uname -m`\"\n    echo \"kernel: `uname -r`\"\n    echo \"shell:  `$SHELL --version`\"\n    echo\n    for tool in curl wget grep awk sed; do\n        printf \"%-5s: \" $tool\n        if type $tool &>/dev/null; then\n            $tool --version | head -n 1\n        else\n            echo \"not installed\"\n        fi\n    done\n}\n\nshow_help() {\n    local app_name\n    app_name=$(basename \"$0\")\n    echo \"GitHub TOC generator ($app_name): $gh_toc_version\"\n    echo \"\"\n    echo \"Usage:\"\n    echo \"  $app_name [options] src [src]   Create TOC for a README file (url or local path)\"\n    echo \"  $app_name -                     Create TOC for markdown from STDIN\"\n    echo \"  $app_name --help                Show help\"\n    echo \"  $app_name --version             Show version\"\n    echo \"\"\n    echo \"Options:\"\n    echo \"  --indent <NUM>      Set indent size. Default: 3.\"\n    echo \"  --insert            Insert new TOC into original file. For local files only. Default: false.\"\n    echo \"                      See https://github.com/ekalinin/github-markdown-toc/issues/41 for details.\"\n    echo \"  --no-backup         Remove backup file. Set --insert as well. Default: false.\"\n    echo \"  --hide-footer       Do not write date & author of the last TOC update. Set --insert as well. Default: false.\"\n    echo \"  --skip-header       Hide entry of the topmost headlines. Default: false.\"\n    echo \"                      See https://github.com/ekalinin/github-markdown-toc/issues/125 for details.\"\n    echo \"\"\n}\n\n#\n# Options handlers\n#\ngh_toc_app() {\n    local need_replace=\"no\"\n    local indent=3\n\n    if [ \"$1\" = '--help' ] || [ $# -eq 0 ] ; then\n        show_help\n        return\n    fi\n\n    if [ \"$1\" = '--version' ]; then\n        show_version\n        return\n    fi\n\n    if [ \"$1\" = '--indent' ]; then\n        indent=\"$2\"\n        shift 2\n    fi\n\n    if [ \"$1\" = \"-\" ]; then\n        if [ -z \"$TMPDIR\" ]; then\n            TMPDIR=\"/tmp\"\n        elif [ -n \"$TMPDIR\" ] && [ ! -d \"$TMPDIR\" ]; then\n            mkdir -p \"$TMPDIR\"\n        fi\n        local gh_tmp_md\n        if [ \"`uname -s`\" == \"OS/390\" ]; then\n            local timestamp\n            timestamp=$(date +%m%d%Y%H%M%S)\n            gh_tmp_md=\"$TMPDIR/tmp.$timestamp\"\n        else\n            gh_tmp_md=$(mktemp \"$TMPDIR/tmp.XXXXXX\")\n        fi\n        while read -r input; do\n            echo \"$input\" >> \"$gh_tmp_md\"\n        done\n        gh_toc_md2html \"$gh_tmp_md\" | gh_toc_grab \"\" \"$indent\"\n        return\n    fi\n\n    if [ \"$1\" = '--insert' ]; then\n        need_replace=\"yes\"\n        shift\n    fi\n\n    if [ \"$1\" = '--no-backup' ]; then\n        need_replace=\"yes\"\n        no_backup=\"yes\"\n        shift\n    fi\n\n    if [ \"$1\" = '--hide-footer' ]; then\n        need_replace=\"yes\"\n        no_footer=\"yes\"\n        shift\n    fi\n\n    if [ \"$1\" = '--skip-header' ]; then\n        skip_header=\"yes\"\n        shift\n    fi\n\n\n    for md in \"$@\"\n    do\n        echo \"\"\n        gh_toc \"$md\" \"$#\" \"$need_replace\" \"$no_backup\" \"$no_footer\" \"$indent\" \"$skip_header\"\n    done\n\n    echo \"\"\n    echo \"<!-- Created by https://github.com/ekalinin/github-markdown-toc -->\"\n}\n\n#\n# Entry point\n#\ngh_toc_app \"$@\"\n"
        },
        {
          "name": "tests",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}