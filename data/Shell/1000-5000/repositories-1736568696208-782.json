{
  "metadata": {
    "timestamp": 1736568696208,
    "page": 782,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjc4OQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "hwdsl2/openvpn-install",
      "stars": 1249,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE.txt",
          "type": "blob",
          "size": 1.103515625,
          "content": "The MIT License (MIT)\n\nCopyright (c) 2022-2024 Lin Song <linsongui@gmail.com>\nCopyright (c) 2013-2023 Nyr\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README-zh.md",
          "type": "blob",
          "size": 7.1474609375,
          "content": "[English](README.md) | [中文](README-zh.md) | [Video en Español](https://www.youtube.com/watch?v=99qtaJU2E2k)\n\n# OpenVPN 服务器一键安装脚本\n\n[![Build Status](https://github.com/hwdsl2/openvpn-install/actions/workflows/main.yml/badge.svg)](https://github.com/hwdsl2/openvpn-install/actions/workflows/main.yml) &nbsp;[![License: MIT](docs/images/license.svg)](https://opensource.org/licenses/MIT)\n\n使用 Linux 脚本一键快速搭建自己的 OpenVPN 服务器。支持 Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS, Fedora, openSUSE, Amazon Linux 2 和 Raspberry Pi OS。\n\n该脚本可让你在几分钟内建立自己的 VPN 服务器，即使你以前没有使用过 OpenVPN。[OpenVPN](https://openvpn.net/community-resources/reference-manual-for-openvpn-2-6/) 是一种开源、强大且高度灵活的 VPN 协议。\n\n另见：[WireGuard](https://github.com/hwdsl2/wireguard-install/blob/master/README-zh.md) 和 [IPsec VPN](https://github.com/hwdsl2/setup-ipsec-vpn/blob/master/README-zh.md) 服务器一键安装脚本。\n\n**[&raquo; :book: Book: 搭建自己的 VPN 服务器分步指南](https://books2read.com/vpnguidezh)** [[中文](https://books2read.com/vpnguidezh) | [English](https://books2read.com/vpnguide?store=amazon) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## 功能特性\n\n- 全自动的 OpenVPN 服务器配置，无需用户输入\n- 支持使用自定义选项进行交互式安装\n- 生成 VPN 配置文件以自动配置 Windows, macOS, iOS 和 Android 设备\n- 支持管理 OpenVPN 用户和证书\n- 优化 `sysctl` 设置以提高 VPN 性能\n\n## 安装说明\n\n首先在你的 Linux 服务器\\* 上下载脚本：\n\n```bash\nwget -O openvpn.sh https://get.vpnsetup.net/ovpn\n```\n\n\\* 一个云服务器，虚拟专用服务器 (VPS) 或者专用服务器。\n\n**选项 1:** 使用默认选项自动安装 OpenVPN。\n\n```bash\nsudo bash openvpn.sh --auto\n```\n\n<details>\n<summary>\n查看脚本的示例输出（终端记录）。\n</summary>\n\n**注：** 此终端记录仅用于演示目的。\n\n<p align=\"center\"><img src=\"docs/images/demo1.svg\"></p>\n</details>\n\n对于有外部防火墙的服务器（比如 [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/firewall/docs/firewalls)），请为 VPN 打开 UDP 端口 1194。\n\n**选项 2:** 使用自定义选项进行交互式安装。\n\n```bash\nsudo bash openvpn.sh\n```\n\n你可以自定义以下选项：VPN 服务器的域名，协议 (TCP/UDP) 和端口，VPN 客户端的 DNS 服务器以及第一个客户端的名称。\n\n对于有外部防火墙的服务器，请为 VPN 打开所选的 TCP 或 UDP 端口。\n\n<details>\n<summary>\n如果无法下载，请点这里。\n</summary>\n\n你也可以使用 `curl` 下载：\n\n```bash\ncurl -fL -o openvpn.sh https://get.vpnsetup.net/ovpn\n```\n\n然后按照上面的说明安装。\n\n或者，你也可以使用这些链接：\n\n```bash\nhttps://github.com/hwdsl2/openvpn-install/raw/master/openvpn-install.sh\nhttps://gitlab.com/hwdsl2/openvpn-install/-/raw/master/openvpn-install.sh\n```\n\n如果无法下载，打开 [openvpn-install.sh](openvpn-install.sh)，然后点击右边的 `Raw` 按钮。按快捷键 `Ctrl/Cmd+A` 全选，`Ctrl/Cmd+C` 复制，然后粘贴到你喜欢的编辑器。\n</details>\n<details>\n<summary>\n高级：使用自定义选项自动安装。\n</summary>\n\n高级用户可以使用自定义选项自动安装 OpenVPN，方法是在运行脚本时指定命令行参数。有关更多信息，请参见下一节，查看 OpenVPN 脚本的使用信息。\n\n或者，你也可以提供一个 Bash \"here document\" 作为安装脚本的输入。此方法还可用于在安装后提供输入以管理用户。\n\n首先，使用自定义选项以交互方式安装 OpenVPN，并写下你对脚本的所有输入值。\n\n```bash\nsudo bash openvpn.sh\n```\n\n如需删除 OpenVPN，请再次运行脚本并选择适当的选项。\n\n然后使用你的输入值创建自定义安装命令。例如：\n\n```bash\nsudo bash openvpn.sh <<ANSWERS\nn\n1\n1194\n2\nclient\ny\nANSWERS\n```\n\n**注：** 安装选项可能会在脚本的未来版本中发生变化。\n</details>\n<details>\n<summary>\n查看 OpenVPN 脚本的使用信息。\n</summary>\n\n```\nUsage: bash openvpn.sh [options]\n\nOptions:\n\n  --addclient [client name]      add a new client\n  --exportclient [client name]   export configuration for an existing client\n  --listclients                  list the names of existing clients\n  --revokeclient [client name]   revoke an existing client\n  --uninstall                    remove OpenVPN and delete all configuration\n  -y, --yes                      assume \"yes\" as answer to prompts when revoking a client or removing OpenVPN\n  -h, --help                     show this help message and exit\n\nInstall options (optional):\n\n  --auto                         auto install OpenVPN using default or custom options\n  --listenaddr [IPv4 address]    IPv4 address that OpenVPN should listen on for requests\n  --serveraddr [DNS name or IP]  server address, must be a fully qualified domain name (FQDN) or an IPv4 address\n  --proto [TCP or UDP]           protocol for OpenVPN (TCP or UDP, default: UDP)\n  --port [number]                port for OpenVPN (1-65535, default: 1194)\n  --clientname [client name]     name for the first OpenVPN client (default: client)\n  --dns1 [DNS server IP]         primary DNS server for clients (default: Google Public DNS)\n  --dns2 [DNS server IP]         secondary DNS server for clients\n\nTo customize options, you may also run this script without arguments.\n```\n</details>\n\n## 下一步\n\n安装完成后，你可以再次运行脚本来管理用户或者卸载 OpenVPN。\n\n配置你的计算机或其它设备使用 VPN。请参见：\n\n**[配置 OpenVPN 客户端](docs/clients-zh.md)**\n\n**阅读 [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC) 以访问 [额外内容](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-X8X5FVFZC)。**\n\n开始使用自己的专属 VPN! :sparkles::tada::rocket::sparkles:\n\n## 致谢\n\n此脚本基于 [Nyr 和 contributors](https://github.com/Nyr/openvpn-install) 的出色工作，并进行了增强和更改以与 [Setup IPsec VPN](https://github.com/hwdsl2/setup-ipsec-vpn) 项目兼容。\n\n<details>\n<summary>\n对 Nyr/openvpn-install 的改进列表。\n</summary>\n\n- 改进了与 Setup IPsec VPN 的兼容性\n- 改进了脚本的可靠性，用户输入和输出\n- 支持使用默认或自定义选项自动安装\n- 支持使用域名作为服务器地址\n- 增加了对 openSUSE Linux 的支持\n- 增加了对 Amazon Linux 2 的支持\n- 支持导出现有 VPN 客户端的配置\n- 支持列出现有的 VPN 客户端\n- 支持为 VPN 客户端自定义 DNS 服务器\n- 支持使用命令行参数管理 VPN 客户端\n- 优化 `sysctl` 设置以提高 VPN 性能\n- 使用 `sudo` 时改进了客户端配置文件的创建\n\n...和更多！\n</details>\n\n## 授权协议\n\nMIT\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 7.1533203125,
          "content": "[English](README.md) | [中文](README-zh.md) | [Video en Español](https://www.youtube.com/watch?v=99qtaJU2E2k)\n\n# OpenVPN Server Auto Setup Script\n\n[![Build Status](https://github.com/hwdsl2/openvpn-install/actions/workflows/main.yml/badge.svg)](https://github.com/hwdsl2/openvpn-install/actions/workflows/main.yml) &nbsp;[![License: MIT](docs/images/license.svg)](https://opensource.org/licenses/MIT)\n\nOpenVPN server installer for Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS, Fedora, openSUSE, Amazon Linux 2 and Raspberry Pi OS.\n\nThis script will let you set up your own VPN server in just a few minutes, even if you haven't used OpenVPN before. [OpenVPN](https://openvpn.net/community-resources/reference-manual-for-openvpn-2-6/) is an open-source, robust and highly flexible VPN protocol.\n\nSee also: [WireGuard](https://github.com/hwdsl2/wireguard-install) and [IPsec VPN](https://github.com/hwdsl2/setup-ipsec-vpn) server auto setup scripts.\n\n**[&raquo; :book: Book: Build Your Own VPN Server](https://books2read.com/vpnguide?store=amazon)** [[English](https://books2read.com/vpnguide?store=amazon) | [中文](https://books2read.com/vpnguidezh) | [Español](https://books2read.com/vpnguidees?store=amazon) | [Deutsch](https://books2read.com/vpnguidede?store=amazon) | [Français](https://books2read.com/vpnguidefr?store=amazon) | [Italiano](https://books2read.com/vpnguideit?store=amazon) | [PT](https://books2read.com/vpnguidept?store=amazon) | [日本語](https://books2read.com/vpnguideja?store=amazon)]\n\n## Features\n\n- Fully automated OpenVPN server setup, no user input needed\n- Supports interactive install using custom options\n- Generates VPN profiles to auto-configure Windows, macOS, iOS and Android devices\n- Supports managing OpenVPN users and certificates\n- Optimizes `sysctl` settings for improved VPN performance\n\n## Installation\n\nFirst, download the script on your Linux server\\*:\n\n```bash\nwget -O openvpn.sh https://get.vpnsetup.net/ovpn\n```\n\n\\* A cloud server, virtual private server (VPS) or dedicated server.\n\n**Option 1:** Auto install OpenVPN using default options.\n\n```bash\nsudo bash openvpn.sh --auto\n```\n\n<details>\n<summary>\nSee the script in action (terminal recording).\n</summary>\n\n**Note:** This recording is for demo purposes only.\n\n<p align=\"center\"><img src=\"docs/images/demo1.svg\"></p>\n</details>\n\nFor servers with an external firewall (e.g. [EC2](https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-security-groups.html)/[GCE](https://cloud.google.com/firewall/docs/firewalls)), open UDP port 1194 for the VPN.\n\n**Option 2:** Interactive install using custom options.\n\n```bash\nsudo bash openvpn.sh\n```\n\nYou can customize the following options: VPN server's DNS name, protocol (TCP/UDP) and port, DNS server for VPN clients and name of the first client.\n\nFor servers with an external firewall, open your selected TCP or UDP port for the VPN.\n\n<details>\n<summary>\nClick here if you are unable to download.\n</summary>\n\nYou may also use `curl` to download:\n\n```bash\ncurl -fL -o openvpn.sh https://get.vpnsetup.net/ovpn\n```\n\nThen follow the instructions above to install.\n\nAlternative setup URLs:\n\n```bash\nhttps://github.com/hwdsl2/openvpn-install/raw/master/openvpn-install.sh\nhttps://gitlab.com/hwdsl2/openvpn-install/-/raw/master/openvpn-install.sh\n```\n\nIf you are unable to download, open [openvpn-install.sh](openvpn-install.sh), then click the `Raw` button on the right. Press `Ctrl/Cmd+A` to select all, `Ctrl/Cmd+C` to copy, then paste into your favorite editor.\n</details>\n<details>\n<summary>\nAdvanced: Auto install using custom options.\n</summary>\n\nAdvanced users can auto install OpenVPN using custom options, by specifying command-line options when running the script. For more details, see the next section \"view usage information for the OpenVPN script\".\n\nAlternatively, you may provide a Bash \"here document\" as input to the setup script. This method can also be used to provide input to manage users after install.\n\nFirst, install OpenVPN interactively using custom options, and write down all your inputs to the script.\n\n```bash\nsudo bash openvpn.sh\n```\n\nIf you need to remove OpenVPN, run the script again and select the appropriate option.\n\nNext, create the custom install command using your inputs. Example:\n\n```bash\nsudo bash openvpn.sh <<ANSWERS\nn\n1\n1194\n2\nclient\ny\nANSWERS\n```\n\n**Note:** The install options may change in future versions of the script.\n</details>\n<details>\n<summary>\nView usage information for the OpenVPN script.\n</summary>\n\n```\nUsage: bash openvpn.sh [options]\n\nOptions:\n\n  --addclient [client name]      add a new client\n  --exportclient [client name]   export configuration for an existing client\n  --listclients                  list the names of existing clients\n  --revokeclient [client name]   revoke an existing client\n  --uninstall                    remove OpenVPN and delete all configuration\n  -y, --yes                      assume \"yes\" as answer to prompts when revoking a client or removing OpenVPN\n  -h, --help                     show this help message and exit\n\nInstall options (optional):\n\n  --auto                         auto install OpenVPN using default or custom options\n  --listenaddr [IPv4 address]    IPv4 address that OpenVPN should listen on for requests\n  --serveraddr [DNS name or IP]  server address, must be a fully qualified domain name (FQDN) or an IPv4 address\n  --proto [TCP or UDP]           protocol for OpenVPN (TCP or UDP, default: UDP)\n  --port [number]                port for OpenVPN (1-65535, default: 1194)\n  --clientname [client name]     name for the first OpenVPN client (default: client)\n  --dns1 [DNS server IP]         primary DNS server for clients (default: Google Public DNS)\n  --dns2 [DNS server IP]         secondary DNS server for clients\n\nTo customize options, you may also run this script without arguments.\n```\n</details>\n\n## Next steps\n\nAfter setup, you can run the script again to manage users or uninstall OpenVPN.\n\nGet your computer or device to use the VPN. Please refer to:\n\n**[Configure OpenVPN Clients](docs/clients.md)**\n\n**Read [:book: VPN book](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J) to access [extra content](https://ko-fi.com/post/Support-this-project-and-get-access-to-supporter-o-O5O7FVF8J).**\n\nEnjoy your very own VPN! :sparkles::tada::rocket::sparkles:\n\n## Credits\n\nThis script is based on the great work of [Nyr and contributors](https://github.com/Nyr/openvpn-install), with enhancements and changes for compatibility with the [Setup IPsec VPN](https://github.com/hwdsl2/setup-ipsec-vpn) project.\n\n<details>\n<summary>\nList of enhancements over Nyr/openvpn-install.\n</summary>\n\n- Improved compatibility with Setup IPsec VPN\n- Improved script reliability, user input and output\n- Supports auto install using default or custom options\n- Supports using a DNS name as server address\n- Added support for openSUSE Linux\n- Added support for Amazon Linux 2\n- Supports exporting configuration for an existing VPN client\n- Supports listing existing VPN clients\n- Supports custom DNS server(s) for VPN clients\n- Supports command-line options for managing VPN clients\n- Optimizes `sysctl` settings for improved VPN performance\n- Improved creation of client config files when using `sudo`\n\n...and more!\n</details>\n\n## License\n\nMIT\n"
        },
        {
          "name": "docs",
          "type": "tree",
          "content": null
        },
        {
          "name": "openvpn-install.sh",
          "type": "blob",
          "size": 43.0283203125,
          "content": "#!/bin/bash\n#\n# https://github.com/hwdsl2/openvpn-install\n#\n# Based on the work of Nyr and contributors at:\n# https://github.com/Nyr/openvpn-install\n#\n# Copyright (c) 2022-2024 Lin Song <linsongui@gmail.com>\n# Copyright (c) 2013-2023 Nyr\n#\n# Released under the MIT License, see the accompanying file LICENSE.txt\n# or https://opensource.org/licenses/MIT\n\nexiterr()  { echo \"Error: $1\" >&2; exit 1; }\nexiterr2() { exiterr \"'apt-get install' failed.\"; }\nexiterr3() { exiterr \"'yum install' failed.\"; }\nexiterr4() { exiterr \"'zypper install' failed.\"; }\n\ncheck_ip() {\n\tIP_REGEX='^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])$'\n\tprintf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IP_REGEX\"\n}\n\ncheck_pvt_ip() {\n\tIPP_REGEX='^(10|127|172\\.(1[6-9]|2[0-9]|3[0-1])|192\\.168|169\\.254)\\.'\n\tprintf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$IPP_REGEX\"\n}\n\ncheck_dns_name() {\n\tFQDN_REGEX='^([a-zA-Z0-9]([a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?\\.)+[a-zA-Z]{2,}$'\n\tprintf '%s' \"$1\" | tr -d '\\n' | grep -Eq \"$FQDN_REGEX\"\n}\n\ncheck_root() {\n\tif [ \"$(id -u)\" != 0 ]; then\n\t\texiterr \"This installer must be run as root. Try 'sudo bash $0'\"\n\tfi\n}\n\ncheck_shell() {\n\t# Detect Debian users running the script with \"sh\" instead of bash\n\tif readlink /proc/$$/exe | grep -q \"dash\"; then\n\t\texiterr 'This installer needs to be run with \"bash\", not \"sh\".'\n\tfi\n}\n\ncheck_kernel() {\n\t# Detect OpenVZ 6\n\tif [[ $(uname -r | cut -d \".\" -f 1) -eq 2 ]]; then\n\t\texiterr \"The system is running an old kernel, which is incompatible with this installer.\"\n\tfi\n}\n\ncheck_os() {\n\tif grep -qs \"ubuntu\" /etc/os-release; then\n\t\tos=\"ubuntu\"\n\t\tos_version=$(grep 'VERSION_ID' /etc/os-release | cut -d '\"' -f 2 | tr -d '.')\n\t\tgroup_name=\"nogroup\"\n\telif [[ -e /etc/debian_version ]]; then\n\t\tos=\"debian\"\n\t\tos_version=$(grep -oE '[0-9]+' /etc/debian_version | head -1)\n\t\tgroup_name=\"nogroup\"\n\telif [[ -e /etc/almalinux-release || -e /etc/rocky-release || -e /etc/centos-release ]]; then\n\t\tos=\"centos\"\n\t\tos_version=$(grep -shoE '[0-9]+' /etc/almalinux-release /etc/rocky-release /etc/centos-release | head -1)\n\t\tgroup_name=\"nobody\"\n\telif grep -qs \"Amazon Linux release 2 \" /etc/system-release; then\n\t\tos=\"centos\"\n\t\tos_version=\"7\"\n\t\tgroup_name=\"nobody\"\n\telif grep -qs \"Amazon Linux release 2023\" /etc/system-release; then\n\t\texiterr \"Amazon Linux 2023 is not supported.\"\n\telif [[ -e /etc/fedora-release ]]; then\n\t\tos=\"fedora\"\n\t\tos_version=$(grep -oE '[0-9]+' /etc/fedora-release | head -1)\n\t\tgroup_name=\"nobody\"\n\telif [[ -e /etc/SUSE-brand && \"$(head -1 /etc/SUSE-brand)\" == \"openSUSE\" ]]; then\n\t\tos=\"openSUSE\"\n\t\tos_version=$(tail -1 /etc/SUSE-brand | grep -oE '[0-9\\\\.]+')\n\t\tgroup_name=\"nogroup\"\n\telse\n\t\texiterr \"This installer seems to be running on an unsupported distribution.\nSupported distros are Ubuntu, Debian, AlmaLinux, Rocky Linux, CentOS, Fedora, openSUSE and Amazon Linux 2.\"\n\tfi\n}\n\ncheck_os_ver() {\n\tif [[ \"$os\" == \"ubuntu\" && \"$os_version\" -lt 2004 ]]; then\n\t\texiterr \"Ubuntu 20.04 or higher is required to use this installer.\nThis version of Ubuntu is too old and unsupported.\"\n\tfi\n\tif [[ \"$os\" == \"debian\" && \"$os_version\" -lt 10 ]]; then\n\t\texiterr \"Debian 10 or higher is required to use this installer.\nThis version of Debian is too old and unsupported.\"\n\tfi\n\tif [[ \"$os\" == \"centos\" && \"$os_version\" -lt 8 ]]; then\n\t\tif ! grep -qs \"Amazon Linux release 2 \" /etc/system-release; then\n\t\t\texiterr \"CentOS 8 or higher is required to use this installer.\nThis version of CentOS is too old and unsupported.\"\n\t\tfi\n\tfi\n}\n\ncheck_tun() {\n\tif [[ ! -e /dev/net/tun ]] || ! ( exec 7<>/dev/net/tun ) 2>/dev/null; then\n\t\texiterr \"The system does not have the TUN device available.\nTUN needs to be enabled before running this installer.\"\n\tfi\n}\n\nset_client_name() {\n\t# Allow a limited set of characters to avoid conflicts\n\tclient=$(sed 's/[^0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-]/_/g' <<< \"$unsanitized_client\")\n}\n\nparse_args() {\n\twhile [ \"$#\" -gt 0 ]; do\n\t\tcase $1 in\n\t\t\t--auto)\n\t\t\t\tauto=1\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--addclient)\n\t\t\t\tadd_client=1\n\t\t\t\tunsanitized_client=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--exportclient)\n\t\t\t\texport_client=1\n\t\t\t\tunsanitized_client=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--listclients)\n\t\t\t\tlist_clients=1\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--revokeclient)\n\t\t\t\trevoke_client=1\n\t\t\t\tunsanitized_client=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--uninstall)\n\t\t\t\tremove_ovpn=1\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--listenaddr)\n\t\t\t\tlisten_addr=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--serveraddr)\n\t\t\t\tserver_addr=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--proto)\n\t\t\t\tserver_proto=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--port)\n\t\t\t\tserver_port=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--clientname)\n\t\t\t\tfirst_client_name=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--dns1)\n\t\t\t\tdns1=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t--dns2)\n\t\t\t\tdns2=\"$2\"\n\t\t\t\tshift\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t-y|--yes)\n\t\t\t\tassume_yes=1\n\t\t\t\tshift\n\t\t\t\t;;\n\t\t\t-h|--help)\n\t\t\t\tshow_usage\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tshow_usage \"Unknown parameter: $1\"\n\t\t\t\t;;\n\t\tesac\n\tdone\n}\n\ncheck_args() {\n\tif [ \"$auto\" != 0 ] && [ -e \"$OVPN_CONF\" ]; then\n\t\tshow_usage \"Invalid parameter '--auto'. OpenVPN is already set up on this server.\"\n\tfi\n\tif [ \"$((add_client + export_client + list_clients + revoke_client))\" -gt 1 ]; then\n\t\tshow_usage \"Invalid parameters. Specify only one of '--addclient', '--exportclient', '--listclients' or '--revokeclient'.\"\n\tfi\n\tif [ \"$remove_ovpn\" = 1 ]; then\n\t\tif [ \"$((add_client + export_client + list_clients + revoke_client + auto))\" -gt 0 ]; then\n\t\t\tshow_usage \"Invalid parameters. '--uninstall' cannot be specified with other parameters.\"\n\t\tfi\n\tfi\n\tif [ ! -e \"$OVPN_CONF\" ]; then\n\t\tst_text=\"You must first set up OpenVPN before\"\n\t\t[ \"$add_client\" = 1 ] && exiterr \"$st_text adding a client.\"\n\t\t[ \"$export_client\" = 1 ] && exiterr \"$st_text exporting a client.\"\n\t\t[ \"$list_clients\" = 1 ] && exiterr \"$st_text listing clients.\"\n\t\t[ \"$revoke_client\" = 1 ] && exiterr \"$st_text revoking a client.\"\n\t\t[ \"$remove_ovpn\" = 1 ] && exiterr \"Cannot remove OpenVPN because it has not been set up on this server.\"\n\tfi\n\tif [ \"$((add_client + export_client + revoke_client))\" = 1 ] && [ -n \"$first_client_name\" ]; then\n\t\tshow_usage \"Invalid parameters. '--clientname' can only be specified when installing OpenVPN.\"\n\tfi\n\tif [ -n \"$listen_addr\" ] || [ -n \"$server_addr\" ] || [ -n \"$server_proto\" ] \\\n\t\t|| [ -n \"$server_port\" ] || [ -n \"$first_client_name\" ] || [ -n \"$dns1\" ]; then\n\t\t\tif [ -e \"$OVPN_CONF\" ]; then\n\t\t\t\tshow_usage \"Invalid parameters. OpenVPN is already set up on this server.\"\n\t\t\telif [ \"$auto\" = 0 ]; then\n\t\t\t\tshow_usage \"Invalid parameters. You must specify '--auto' when using these parameters.\"\n\t\t\tfi\n\tfi\n\tif [ \"$add_client\" = 1 ]; then\n\t\tset_client_name\n\t\tif [ -z \"$client\" ]; then\n\t\t\texiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n\t\telif [ -e /etc/openvpn/server/easy-rsa/pki/issued/\"$client\".crt ]; then\n\t\t\texiterr \"$client: invalid name. Client already exists.\"\n\t\tfi\n\tfi\n\tif [ \"$export_client\" = 1 ] || [ \"$revoke_client\" = 1 ]; then\n\t\tset_client_name\n\t\tif [ -z \"$client\" ] || [ ! -e /etc/openvpn/server/easy-rsa/pki/issued/\"$client\".crt ]; then\n\t\t\texiterr \"Invalid client name, or client does not exist.\"\n\t\tfi\n\tfi\n\tif [ -n \"$listen_addr\" ] && ! check_ip \"$listen_addr\"; then\n\t\tshow_usage \"Invalid listen address. Must be an IPv4 address.\"\n\tfi\n\tif [ -n \"$listen_addr\" ] && [ -z \"$server_addr\" ]; then\n\t\tshow_usage \"You must also specify the server address if the listen address is specified.\"\n\tfi\n\tif [ -n \"$server_addr\" ] && { ! check_dns_name \"$server_addr\" && ! check_ip \"$server_addr\"; }; then\n\t\texiterr \"Invalid server address. Must be a fully qualified domain name (FQDN) or an IPv4 address.\"\n\tfi\n\tif [ -n \"$first_client_name\" ]; then\n\t\tunsanitized_client=\"$first_client_name\"\n\t\tset_client_name\n\t\tif [ -z \"$client\" ]; then\n\t\t\texiterr \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n\t\tfi\n\tfi\n\tif [ -n \"$server_proto\" ]; then\n\t\tcase \"$server_proto\" in\n\t\t\t[tT][cC][pP])\n\t\t\t\tserver_proto=tcp\n\t\t\t\t;;\n\t\t\t[uU][dD][pP])\n\t\t\t\tserver_proto=udp\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\texiterr \"Invalid protocol. Must be TCP or UDP.\"\n\t\t\t\t;;\n\t\tesac\n\tfi\n\tif [ -n \"$server_port\" ]; then\n\t\tif [[ ! \"$server_port\" =~ ^[0-9]+$ || \"$server_port\" -gt 65535 ]]; then\n\t\t\texiterr \"Invalid port. Must be an integer between 1 and 65535.\"\n\t\tfi\n\tfi\n\tif { [ -n \"$dns1\" ] && ! check_ip \"$dns1\"; } \\\n\t\t|| { [ -n \"$dns2\" ] && ! check_ip \"$dns2\"; }; then\n\t\texiterr \"Invalid DNS server(s).\"\n\tfi\n\tif [ -z \"$dns1\" ] && [ -n \"$dns2\" ]; then\n\t\tshow_usage \"Invalid DNS server. --dns2 cannot be specified without --dns1.\"\n\tfi\n\tif [ -n \"$dns1\" ]; then\n\t\tdns=7\n\telse\n\t\tdns=2\n\tfi\n}\n\ncheck_nftables() {\n\tif [ \"$os\" = \"centos\" ]; then\n\t\tif grep -qs \"hwdsl2 VPN script\" /etc/sysconfig/nftables.conf \\\n\t\t\t|| systemctl is-active --quiet nftables 2>/dev/null; then\n\t\t\texiterr \"This system has nftables enabled, which is not supported by this installer.\"\n\t\tfi\n\tfi\n}\n\ninstall_wget() {\n\t# Detect some Debian minimal setups where neither wget nor curl are installed\n\tif ! hash wget 2>/dev/null && ! hash curl 2>/dev/null; then\n\t\tif [ \"$auto\" = 0 ]; then\n\t\t\techo \"Wget is required to use this installer.\"\n\t\t\tread -n1 -r -p \"Press any key to install Wget and continue...\"\n\t\tfi\n\t\texport DEBIAN_FRONTEND=noninteractive\n\t\t(\n\t\t\tset -x\n\t\t\tapt-get -yqq update || apt-get -yqq update\n\t\t\tapt-get -yqq install wget >/dev/null\n\t\t) || exiterr2\n\tfi\n}\n\ninstall_iproute() {\n\tif ! hash ip 2>/dev/null; then\n\t\tif [ \"$auto\" = 0 ]; then\n\t\t\techo \"iproute is required to use this installer.\"\n\t\t\tread -n1 -r -p \"Press any key to install iproute and continue...\"\n\t\tfi\n\t\tif [ \"$os\" = \"debian\" ] || [ \"$os\" = \"ubuntu\" ]; then\n\t\t\texport DEBIAN_FRONTEND=noninteractive\n\t\t\t(\n\t\t\t\tset -x\n\t\t\t\tapt-get -yqq update || apt-get -yqq update\n\t\t\t\tapt-get -yqq install iproute2 >/dev/null\n\t\t\t) || exiterr2\n\t\telif [ \"$os\" = \"openSUSE\" ]; then\n\t\t\t(\n\t\t\t\tset -x\n\t\t\t\tzypper install iproute2 >/dev/null\n\t\t\t) || exiterr4\n\t\telse\n\t\t\t(\n\t\t\t\tset -x\n\t\t\t\tyum -y -q install iproute >/dev/null\n\t\t\t) || exiterr3\n\t\tfi\n\tfi\n}\n\nshow_header() {\ncat <<'EOF'\n\nOpenVPN Script\nhttps://github.com/hwdsl2/openvpn-install\nEOF\n}\n\nshow_header2() {\ncat <<'EOF'\n\nWelcome to this OpenVPN server installer!\nGitHub: https://github.com/hwdsl2/openvpn-install\n\nEOF\n}\n\nshow_header3() {\ncat <<'EOF'\n\nCopyright (c) 2022-2024 Lin Song\nCopyright (c) 2013-2023 Nyr\nEOF\n}\n\nshow_usage() {\n\tif [ -n \"$1\" ]; then\n\t\techo \"Error: $1\" >&2\n\tfi\n\tshow_header\n\tshow_header3\ncat 1>&2 <<EOF\n\nUsage: bash $0 [options]\n\nOptions:\n\n  --addclient [client name]      add a new client\n  --exportclient [client name]   export configuration for an existing client\n  --listclients                  list the names of existing clients\n  --revokeclient [client name]   revoke an existing client\n  --uninstall                    remove OpenVPN and delete all configuration\n  -y, --yes                      assume \"yes\" as answer to prompts when revoking a client or removing OpenVPN\n  -h, --help                     show this help message and exit\n\nInstall options (optional):\n\n  --auto                         auto install OpenVPN using default or custom options\n  --listenaddr [IPv4 address]    IPv4 address that OpenVPN should listen on for requests\n  --serveraddr [DNS name or IP]  server address, must be a fully qualified domain name (FQDN) or an IPv4 address\n  --proto [TCP or UDP]           protocol for OpenVPN (TCP or UDP, default: UDP)\n  --port [number]                port for OpenVPN (1-65535, default: 1194)\n  --clientname [client name]     name for the first OpenVPN client (default: client)\n  --dns1 [DNS server IP]         primary DNS server for clients (default: Google Public DNS)\n  --dns2 [DNS server IP]         secondary DNS server for clients\n\nTo customize options, you may also run this script without arguments.\nEOF\n\texit 1\n}\n\nshow_welcome() {\n\tif [ \"$auto\" = 0 ]; then\n\t\tshow_header2\n\t\techo 'I need to ask you a few questions before starting setup.'\n\t\techo 'You can use the default options and just press enter if you are OK with them.'\n\telse\n\t\tshow_header\n\t\top_text=default\n\t\tif [ -n \"$listen_addr\" ] || [ -n \"$server_addr\" ] || [ -n \"$server_proto\" ] \\\n\t\t\t|| [ -n \"$server_port\" ] || [ -n \"$first_client_name\" ] || [ -n \"$dns1\" ]; then\n\t\t\top_text=custom\n\t\tfi\n\t\techo\n\t\techo \"Starting OpenVPN setup using $op_text options.\"\n\tfi\n}\n\nshow_dns_name_note() {\ncat <<EOF\n\nNote: Make sure this DNS name '$1'\n      resolves to the IPv4 address of this server.\nEOF\n}\n\nenter_server_address() {\n\techo\n\techo \"Do you want OpenVPN clients to connect to this server using a DNS name,\"\n\tprintf \"e.g. vpn.example.com, instead of its IP address? [y/N] \"\n\tread -r response\n\tcase $response in\n\t\t[yY][eE][sS]|[yY])\n\t\t\tuse_dns_name=1\n\t\t\techo\n\t\t\t;;\n\t\t*)\n\t\t\tuse_dns_name=0\n\t\t\t;;\n\tesac\n\tif [ \"$use_dns_name\" = 1 ]; then\n\t\tread -rp \"Enter the DNS name of this VPN server: \" server_addr_i\n\t\tuntil check_dns_name \"$server_addr_i\"; do\n\t\t\techo \"Invalid DNS name. You must enter a fully qualified domain name (FQDN).\"\n\t\t\tread -rp \"Enter the DNS name of this VPN server: \" server_addr_i\n\t\tdone\n\t\tdetect_ip\n\t\tpublic_ip=\"$server_addr_i\"\n\t\tshow_dns_name_note \"$public_ip\"\n\telse\n\t\tdetect_ip\n\t\tcheck_nat_ip\n\tfi\n}\n\nfind_public_ip() {\n\tip_url1=\"http://ipv4.icanhazip.com\"\n\tip_url2=\"http://ip1.dynupdate.no-ip.com\"\n\t# Get public IP and sanitize with grep\n\tget_public_ip=$(grep -m 1 -oE '^[0-9]{1,3}(\\.[0-9]{1,3}){3}$' <<< \"$(wget -T 10 -t 1 -4qO- \"$ip_url1\" || curl -m 10 -4Ls \"$ip_url1\")\")\n\tif ! check_ip \"$get_public_ip\"; then\n\t\tget_public_ip=$(grep -m 1 -oE '^[0-9]{1,3}(\\.[0-9]{1,3}){3}$' <<< \"$(wget -T 10 -t 1 -4qO- \"$ip_url2\" || curl -m 10 -4Ls \"$ip_url2\")\")\n\tfi\n}\n\ndetect_ip() {\n\t# If system has a single IPv4, it is selected automatically.\n\tif [[ $(ip -4 addr | grep inet | grep -vEc '127(\\.[0-9]{1,3}){3}') -eq 1 ]]; then\n\t\tip=$(ip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}')\n\telse\n\t\t# Use the IP address on the default route\n\t\tip=$(ip -4 route get 1 | sed 's/ uid .*//' | awk '{print $NF;exit}' 2>/dev/null)\n\t\tif ! check_ip \"$ip\"; then\n\t\t\tfind_public_ip\n\t\t\tip_match=0\n\t\t\tif [ -n \"$get_public_ip\" ]; then\n\t\t\t\tip_list=$(ip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}')\n\t\t\t\twhile IFS= read -r line; do\n\t\t\t\t\tif [ \"$line\" = \"$get_public_ip\" ]; then\n\t\t\t\t\t\tip_match=1\n\t\t\t\t\t\tip=\"$line\"\n\t\t\t\t\tfi\n\t\t\t\tdone <<< \"$ip_list\"\n\t\t\tfi\n\t\t\tif [ \"$ip_match\" = 0 ]; then\n\t\t\t\tif [ \"$auto\" = 0 ]; then\n\t\t\t\t\techo\n\t\t\t\t\techo \"Which IPv4 address should be used?\"\n\t\t\t\t\tnum_of_ip=$(ip -4 addr | grep inet | grep -vEc '127(\\.[0-9]{1,3}){3}')\n\t\t\t\t\tip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | nl -s ') '\n\t\t\t\t\tread -rp \"IPv4 address [1]: \" ip_num\n\t\t\t\t\tuntil [[ -z \"$ip_num\" || \"$ip_num\" =~ ^[0-9]+$ && \"$ip_num\" -le \"$num_of_ip\" ]]; do\n\t\t\t\t\t\techo \"$ip_num: invalid selection.\"\n\t\t\t\t\t\tread -rp \"IPv4 address [1]: \" ip_num\n\t\t\t\t\tdone\n\t\t\t\t\t[[ -z \"$ip_num\" ]] && ip_num=1\n\t\t\t\telse\n\t\t\t\t\tip_num=1\n\t\t\t\tfi\n\t\t\t\tip=$(ip -4 addr | grep inet | grep -vE '127(\\.[0-9]{1,3}){3}' | cut -d '/' -f 1 | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | sed -n \"$ip_num\"p)\n\t\t\tfi\n\t\tfi\n\tfi\n\tif ! check_ip \"$ip\"; then\n\t\techo \"Error: Could not detect this server's IP address.\" >&2\n\t\techo \"Abort. No changes were made.\" >&2\n\t\texit 1\n\tfi\n}\n\ncheck_nat_ip() {\n\t# If $ip is a private IP address, the server must be behind NAT\n\tif check_pvt_ip \"$ip\"; then\n\t\tfind_public_ip\n\t\tif ! check_ip \"$get_public_ip\"; then\n\t\t\tif [ \"$auto\" = 0 ]; then\n\t\t\t\techo\n\t\t\t\techo \"This server is behind NAT. What is the public IPv4 address?\"\n\t\t\t\tread -rp \"Public IPv4 address: \" public_ip\n\t\t\t\tuntil check_ip \"$public_ip\"; do\n\t\t\t\t\techo \"Invalid input.\"\n\t\t\t\t\tread -rp \"Public IPv4 address: \" public_ip\n\t\t\t\tdone\n\t\t\telse\n\t\t\t\techo \"Error: Could not detect this server's public IP.\" >&2\n\t\t\t\techo \"Abort. No changes were made.\" >&2\n\t\t\t\texit 1\n\t\t\tfi\n\t\telse\n\t\t\tpublic_ip=\"$get_public_ip\"\n\t\tfi\n\tfi\n}\n\nshow_config() {\n\tif [ \"$auto\" != 0 ]; then\n\t\techo\n\t\tif [ -n \"$listen_addr\" ]; then\n\t\t\techo \"Listen address: $listen_addr\"\n\t\tfi\n\t\tif [ -n \"$server_addr\" ]; then\n\t\t\techo \"Server address: $server_addr\"\n\t\telse\n\t\t\tprintf '%s' \"Server IP: \"\n\t\t\t[ -n \"$public_ip\" ] && printf '%s\\n' \"$public_ip\" || printf '%s\\n' \"$ip\"\n\t\tfi\n\t\tif [ \"$server_proto\" = \"tcp\" ]; then\n\t\t\tproto_text=TCP\n\t\telse\n\t\t\tproto_text=UDP\n\t\tfi\n\t\t[ -n \"$server_port\" ] && port_text=\"$server_port\" || port_text=1194\n\t\t[ -n \"$first_client_name\" ] && client_text=\"$client\" || client_text=client\n\t\tif [ -n \"$dns1\" ] && [ -n \"$dns2\" ]; then\n\t\t\tdns_text=\"$dns1, $dns2\"\n\t\telif [ -n \"$dns1\" ]; then\n\t\t\tdns_text=\"$dns1\"\n\t\telse\n\t\t\tdns_text=\"Google Public DNS\"\n\t\tfi\n\t\techo \"Port: $proto_text/$port_text\"\n\t\techo \"Client name: $client_text\"\n\t\techo \"Client DNS: $dns_text\"\n\tfi\n}\n\ndetect_ipv6() {\n\tip6=\"\"\n\tif [[ $(ip -6 addr | grep -c 'inet6 [23]') -ne 0 ]]; then\n\t\tip6=$(ip -6 addr | grep 'inet6 [23]' | cut -d '/' -f 1 | grep -oE '([0-9a-fA-F]{0,4}:){1,7}[0-9a-fA-F]{0,4}' | sed -n 1p)\n\tfi\n}\n\nselect_protocol() {\n\tif [ \"$auto\" = 0 ]; then\n\t\techo\n\t\techo \"Which protocol should OpenVPN use?\"\n\t\techo \"   1) UDP (recommended)\"\n\t\techo \"   2) TCP\"\n\t\tread -rp \"Protocol [1]: \" protocol\n\t\tuntil [[ -z \"$protocol\" || \"$protocol\" =~ ^[12]$ ]]; do\n\t\t\techo \"$protocol: invalid selection.\"\n\t\t\tread -rp \"Protocol [1]: \" protocol\n\t\tdone\n\t\tcase \"$protocol\" in\n\t\t\t1|\"\")\n\t\t\tprotocol=udp\n\t\t\t;;\n\t\t\t2)\n\t\t\tprotocol=tcp\n\t\t\t;;\n\t\tesac\n\telse\n\t\t[ -n \"$server_proto\" ] && protocol=\"$server_proto\" || protocol=udp\n\tfi\n}\n\nselect_port() {\n\tif [ \"$auto\" = 0 ]; then\n\t\techo\n\t\techo \"Which port should OpenVPN listen to?\"\n\t\tread -rp \"Port [1194]: \" port\n\t\tuntil [[ -z \"$port\" || \"$port\" =~ ^[0-9]+$ && \"$port\" -le 65535 ]]; do\n\t\t\techo \"$port: invalid port.\"\n\t\t\tread -rp \"Port [1194]: \" port\n\t\tdone\n\t\t[[ -z \"$port\" ]] && port=1194\n\telse\n\t\t[ -n \"$server_port\" ] && port=\"$server_port\" || port=1194\n\tfi\n}\n\nenter_custom_dns() {\n\tread -rp \"Enter primary DNS server: \" dns1\n\tuntil check_ip \"$dns1\"; do\n\t\techo \"Invalid DNS server.\"\n\t\tread -rp \"Enter primary DNS server: \" dns1\n\tdone\n\tread -rp \"Enter secondary DNS server (Enter to skip): \" dns2\n\tuntil [ -z \"$dns2\" ] || check_ip \"$dns2\"; do\n\t\techo \"Invalid DNS server.\"\n\t\tread -rp \"Enter secondary DNS server (Enter to skip): \" dns2\n\tdone\n}\n\nselect_dns() {\n\tif [ \"$auto\" = 0 ]; then\n\t\techo\n\t\techo \"Select a DNS server for the clients:\"\n\t\techo \"   1) Current system resolvers\"\n\t\techo \"   2) Google Public DNS\"\n\t\techo \"   3) Cloudflare DNS\"\n\t\techo \"   4) OpenDNS\"\n\t\techo \"   5) Quad9\"\n\t\techo \"   6) AdGuard DNS\"\n\t\techo \"   7) Custom\"\n\t\tread -rp \"DNS server [2]: \" dns\n\t\tuntil [[ -z \"$dns\" || \"$dns\" =~ ^[1-7]$ ]]; do\n\t\t\techo \"$dns: invalid selection.\"\n\t\t\tread -rp \"DNS server [2]: \" dns\n\t\tdone\n\telse\n\t\tdns=2\n\tfi\n\tif [ \"$dns\" = 7 ]; then\n\t\tenter_custom_dns\n\tfi\n}\n\nenter_first_client_name() {\n\tif [ \"$auto\" = 0 ]; then\n\t\techo\n\t\techo \"Enter a name for the first client:\"\n\t\tread -rp \"Name [client]: \" unsanitized_client\n\t\tset_client_name\n\t\t[[ -z \"$client\" ]] && client=client\n\telse\n\t\tif [ -n \"$first_client_name\" ]; then\n\t\t\tunsanitized_client=\"$first_client_name\"\n\t\t\tset_client_name\n\t\telse\n\t\t\tclient=client\n\t\tfi\n\tfi\n}\n\nshow_setup_ready() {\n\tif [ \"$auto\" = 0 ]; then\n\t\techo\n\t\techo \"OpenVPN installation is ready to begin.\"\n\tfi\n}\n\ncheck_firewall() {\n\t# Install a firewall if firewalld or iptables are not already available\n\tif ! systemctl is-active --quiet firewalld.service && ! hash iptables 2>/dev/null; then\n\t\tif [[ \"$os\" == \"centos\" || \"$os\" == \"fedora\" ]]; then\n\t\t\tfirewall=\"firewalld\"\n\t\telif [[ \"$os\" == \"openSUSE\" ]]; then\n\t\t\tfirewall=\"firewalld\"\n\t\telif [[ \"$os\" == \"debian\" || \"$os\" == \"ubuntu\" ]]; then\n\t\t\tfirewall=\"iptables\"\n\t\tfi\n\t\tif [[ \"$firewall\" == \"firewalld\" ]]; then\n\t\t\t# We don't want to silently enable firewalld, so we give a subtle warning\n\t\t\t# If the user continues, firewalld will be installed and enabled during setup\n\t\t\techo\n\t\t\techo \"Note: firewalld, which is required to manage routing tables, will also be installed.\"\n\t\tfi\n\tfi\n}\n\nabort_and_exit() {\n\techo \"Abort. No changes were made.\" >&2\n\texit 1\n}\n\nconfirm_setup() {\n\tif [ \"$auto\" = 0 ]; then\n\t\tprintf \"Do you want to continue? [Y/n] \"\n\t\tread -r response\n\t\tcase $response in\n\t\t\t[yY][eE][sS]|[yY]|'')\n\t\t\t\t:\n\t\t\t\t;;\n\t\t\t*)\n\t\t\t\tabort_and_exit\n\t\t\t\t;;\n\t\tesac\n\tfi\n}\n\nshow_start_setup() {\n\techo\n\techo \"Installing OpenVPN, please wait...\"\n}\n\ndisable_limitnproc() {\n\t# If running inside a container, disable LimitNPROC to prevent conflicts\n\tif systemd-detect-virt -cq; then\n\t\tmkdir /etc/systemd/system/openvpn-server@server.service.d/ 2>/dev/null\n\t\techo \"[Service]\nLimitNPROC=infinity\" > /etc/systemd/system/openvpn-server@server.service.d/disable-limitnproc.conf\n\tfi\n}\n\ninstall_pkgs() {\n\tif [[ \"$os\" = \"debian\" || \"$os\" = \"ubuntu\" ]]; then\n\t\texport DEBIAN_FRONTEND=noninteractive\n\t\t(\n\t\t\tset -x\n\t\t\tapt-get -yqq update || apt-get -yqq update\n\t\t\tapt-get -yqq --no-install-recommends install openvpn >/dev/null\n\t\t) || exiterr2\n\t\t(\n\t\t\tset -x\n\t\t\tapt-get -yqq install openssl ca-certificates $firewall >/dev/null\n\t\t) || exiterr2\n\telif [[ \"$os\" = \"centos\" ]]; then\n\t\tif grep -qs \"Amazon Linux release 2 \" /etc/system-release; then\n\t\t\t(\n\t\t\t\tset -x\n\t\t\t\tamazon-linux-extras install epel -y >/dev/null\n\t\t\t) || exit 1\n\t\telse\n\t\t\t(\n\t\t\t\tset -x\n\t\t\t\tyum -y -q install epel-release >/dev/null\n\t\t\t) || exiterr3\n\t\tfi\n\t\t(\n\t\t\tset -x\n\t\t\tyum -y -q install openvpn openssl ca-certificates tar $firewall >/dev/null 2>&1\n\t\t) || exiterr3\n\telif [[ \"$os\" = \"fedora\" ]]; then\n\t\t(\n\t\t\tset -x\n\t\t\tdnf install -y openvpn openssl ca-certificates tar $firewall >/dev/null\n\t\t) || exiterr \"'dnf install' failed.\"\n\telse\n\t\t# Else, OS must be openSUSE\n\t\t(\n\t\t\tset -x\n\t\t\tzypper install -y openvpn openssl ca-certificates tar $firewall >/dev/null\n\t\t) || exiterr4\n\tfi\n\t# If firewalld was just installed, enable it\n\tif [[ \"$firewall\" == \"firewalld\" ]]; then\n\t\t(\n\t\t\tset -x\n\t\t\tsystemctl enable --now firewalld.service >/dev/null 2>&1\n\t\t)\n\tfi\n}\n\nremove_pkgs() {\n\tif [[ \"$os\" = \"debian\" || \"$os\" = \"ubuntu\" ]]; then\n\t\t(\n\t\t\tset -x\n\t\t\trm -rf /etc/openvpn/server\n\t\t\tapt-get remove --purge -y openvpn >/dev/null\n\t\t)\n\telif [[ \"$os\" = \"openSUSE\" ]]; then\n\t\t(\n\t\t\tset -x\n\t\t\tzypper remove -y openvpn >/dev/null\n\t\t\trm -rf /etc/openvpn/server\n\t\t)\n\t\trm -f /etc/openvpn/ipp.txt\n\telse\n\t\t# Else, OS must be CentOS or Fedora\n\t\t(\n\t\t\tset -x\n\t\t\tyum -y -q remove openvpn >/dev/null\n\t\t\trm -rf /etc/openvpn/server\n\t\t)\n\tfi\n}\n\ncreate_firewall_rules() {\n\tif systemctl is-active --quiet firewalld.service; then\n\t\t# Using both permanent and not permanent rules to avoid a firewalld\n\t\t# reload.\n\t\t# We don't use --add-service=openvpn because that would only work with\n\t\t# the default port and protocol.\n\t\tfirewall-cmd -q --add-port=\"$port\"/\"$protocol\"\n\t\tfirewall-cmd -q --zone=trusted --add-source=10.8.0.0/24\n\t\tfirewall-cmd -q --permanent --add-port=\"$port\"/\"$protocol\"\n\t\tfirewall-cmd -q --permanent --zone=trusted --add-source=10.8.0.0/24\n\t\t# Set NAT for the VPN subnet\n\t\tfirewall-cmd -q --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\n\t\tfirewall-cmd -q --permanent --direct --add-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\n\t\tif [[ -n \"$ip6\" ]]; then\n\t\t\tfirewall-cmd -q --zone=trusted --add-source=fddd:1194:1194:1194::/64\n\t\t\tfirewall-cmd -q --permanent --zone=trusted --add-source=fddd:1194:1194:1194::/64\n\t\t\tfirewall-cmd -q --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\n\t\t\tfirewall-cmd -q --permanent --direct --add-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\n\t\tfi\n\telse\n\t\t# Create a service to set up persistent iptables rules\n\t\tiptables_path=$(command -v iptables)\n\t\tip6tables_path=$(command -v ip6tables)\n\t\t# nf_tables is not available as standard in OVZ kernels. So use iptables-legacy\n\t\t# if we are in OVZ, with a nf_tables backend and iptables-legacy is available.\n\t\tif [[ $(systemd-detect-virt) == \"openvz\" ]] && readlink -f \"$(command -v iptables)\" | grep -q \"nft\" && hash iptables-legacy 2>/dev/null; then\n\t\t\tiptables_path=$(command -v iptables-legacy)\n\t\t\tip6tables_path=$(command -v ip6tables-legacy)\n\t\tfi\n\t\techo \"[Unit]\nBefore=network.target\n[Service]\nType=oneshot\nExecStart=$iptables_path -t nat -A POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\nExecStart=$iptables_path -I INPUT -p $protocol --dport $port -j ACCEPT\nExecStart=$iptables_path -I FORWARD -s 10.8.0.0/24 -j ACCEPT\nExecStart=$iptables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nExecStop=$iptables_path -t nat -D POSTROUTING -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\nExecStop=$iptables_path -D INPUT -p $protocol --dport $port -j ACCEPT\nExecStop=$iptables_path -D FORWARD -s 10.8.0.0/24 -j ACCEPT\nExecStop=$iptables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\" > /etc/systemd/system/openvpn-iptables.service\n\t\tif [[ -n \"$ip6\" ]]; then\n\t\t\techo \"ExecStart=$ip6tables_path -t nat -A POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\nExecStart=$ip6tables_path -I FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT\nExecStart=$ip6tables_path -I FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\nExecStop=$ip6tables_path -t nat -D POSTROUTING -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\nExecStop=$ip6tables_path -D FORWARD -s fddd:1194:1194:1194::/64 -j ACCEPT\nExecStop=$ip6tables_path -D FORWARD -m state --state RELATED,ESTABLISHED -j ACCEPT\" >> /etc/systemd/system/openvpn-iptables.service\n\t\tfi\n\t\techo \"RemainAfterExit=yes\n[Install]\nWantedBy=multi-user.target\" >> /etc/systemd/system/openvpn-iptables.service\n\t\t(\n\t\t\tset -x\n\t\t\tsystemctl enable --now openvpn-iptables.service >/dev/null 2>&1\n\t\t)\n\tfi\n}\n\nremove_firewall_rules() {\n\tport=$(grep '^port ' \"$OVPN_CONF\" | cut -d \" \" -f 2)\n\tprotocol=$(grep '^proto ' \"$OVPN_CONF\" | cut -d \" \" -f 2)\n\tif systemctl is-active --quiet firewalld.service; then\n\t\tip=$(firewall-cmd --direct --get-rules ipv4 nat POSTROUTING | grep '\\-s 10.8.0.0/24 '\"'\"'!'\"'\"' -d 10.8.0.0/24' | grep -oE '[^ ]+$')\n\t\t# Using both permanent and not permanent rules to avoid a firewalld reload.\n\t\tfirewall-cmd -q --remove-port=\"$port\"/\"$protocol\"\n\t\tfirewall-cmd -q --zone=trusted --remove-source=10.8.0.0/24\n\t\tfirewall-cmd -q --permanent --remove-port=\"$port\"/\"$protocol\"\n\t\tfirewall-cmd -q --permanent --zone=trusted --remove-source=10.8.0.0/24\n\t\tfirewall-cmd -q --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\n\t\tfirewall-cmd -q --permanent --direct --remove-rule ipv4 nat POSTROUTING 0 -s 10.8.0.0/24 ! -d 10.8.0.0/24 -j MASQUERADE\n\t\tif grep -qs \"server-ipv6\" \"$OVPN_CONF\"; then\n\t\t\tip6=$(firewall-cmd --direct --get-rules ipv6 nat POSTROUTING | grep '\\-s fddd:1194:1194:1194::/64 '\"'\"'!'\"'\"' -d fddd:1194:1194:1194::/64' | grep -oE '[^ ]+$')\n\t\t\tfirewall-cmd -q --zone=trusted --remove-source=fddd:1194:1194:1194::/64\n\t\t\tfirewall-cmd -q --permanent --zone=trusted --remove-source=fddd:1194:1194:1194::/64\n\t\t\tfirewall-cmd -q --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\n\t\t\tfirewall-cmd -q --permanent --direct --remove-rule ipv6 nat POSTROUTING 0 -s fddd:1194:1194:1194::/64 ! -d fddd:1194:1194:1194::/64 -j MASQUERADE\n\t\tfi\n\telse\n\t\tsystemctl disable --now openvpn-iptables.service\n\t\trm -f /etc/systemd/system/openvpn-iptables.service\n\tfi\n\tif sestatus 2>/dev/null | grep \"Current mode\" | grep -q \"enforcing\" && [[ \"$port\" != 1194 ]]; then\n\t\tsemanage port -d -t openvpn_port_t -p \"$protocol\" \"$port\"\n\tfi\n}\n\ninstall_easyrsa() {\n\t# Get easy-rsa\n\teasy_rsa_url='https://github.com/OpenVPN/easy-rsa/releases/download/v3.2.1/EasyRSA-3.2.1.tgz'\n\tmkdir -p /etc/openvpn/server/easy-rsa/\n\t{ wget -t 3 -T 30 -qO- \"$easy_rsa_url\" 2>/dev/null || curl -m 30 -sL \"$easy_rsa_url\" ; } | tar xz -C /etc/openvpn/server/easy-rsa/ --strip-components 1\n\tif [ ! -f /etc/openvpn/server/easy-rsa/easyrsa ]; then\n\t\texiterr \"Failed to download EasyRSA from $easy_rsa_url.\"\n\tfi\n\tchown -R root:root /etc/openvpn/server/easy-rsa/\n}\n\ncreate_pki_and_certs() {\n\tcd /etc/openvpn/server/easy-rsa/ || exit 1\n\t(\n\t\tset -x\n\t\t# Create the PKI, set up the CA and the server and client certificates\n\t\t./easyrsa --batch init-pki >/dev/null\n\t\t./easyrsa --batch build-ca nopass >/dev/null 2>&1\n\t\t./easyrsa --batch --days=3650 build-server-full server nopass >/dev/null 2>&1\n\t\t./easyrsa --batch --days=3650 build-client-full \"$client\" nopass >/dev/null 2>&1\n\t\t./easyrsa --batch --days=3650 gen-crl >/dev/null 2>&1\n\t)\n\t# Move the stuff we need\n\tcp pki/ca.crt pki/private/ca.key pki/issued/server.crt pki/private/server.key pki/crl.pem /etc/openvpn/server\n\t# CRL is read with each client connection, while OpenVPN is dropped to nobody\n\tchown nobody:\"$group_name\" /etc/openvpn/server/crl.pem\n\t# Without +x in the directory, OpenVPN can't run a stat() on the CRL file\n\tchmod o+x /etc/openvpn/server/\n\t(\n\t\tset -x\n\t\t# Generate key for tls-crypt\n\t\topenvpn --genkey --secret /etc/openvpn/server/tc.key >/dev/null\n\t)\n\t# Create the DH parameters file using the predefined ffdhe2048 group\n\techo '-----BEGIN DH PARAMETERS-----\nMIIBCAKCAQEA//////////+t+FRYortKmq/cViAnPTzx2LnFg84tNpWp4TZBFGQz\n+8yTnc4kmz75fS/jY2MMddj2gbICrsRhetPfHtXV/WVhJDP1H18GbtCFY2VVPe0a\n87VXE15/V8k1mE8McODmi3fipona8+/och3xWKE2rec1MKzKT0g6eXq8CrGCsyT7\nYdEIqUuyyOP7uWrat2DX9GgdT0Kj3jlN9K5W7edjcrsZCwenyO4KbXCeAvzhzffi\n7MA0BM0oNC9hkXL+nOmFg/+OTxIy7vKBg8P+OxtMb61zO7X8vC7CIAXFjvGDfRaD\nssbzSibBsu/6iGtCOGEoXJf//////////wIBAg==\n-----END DH PARAMETERS-----' > /etc/openvpn/server/dh.pem\n}\n\ncreate_dns_config() {\n\tcase \"$dns\" in\n\t\t1)\n\t\t\t# Locate the proper resolv.conf\n\t\t\t# Needed for systems running systemd-resolved\n\t\t\tif grep '^nameserver' \"/etc/resolv.conf\" | grep -qv '127.0.0.53' ; then\n\t\t\t\tresolv_conf=\"/etc/resolv.conf\"\n\t\t\telse\n\t\t\t\tresolv_conf=\"/run/systemd/resolve/resolv.conf\"\n\t\t\tfi\n\t\t\t# Obtain the resolvers from resolv.conf and use them for OpenVPN\n\t\t\tgrep -v '^#\\|^;' \"$resolv_conf\" | grep '^nameserver' | grep -v '127.0.0.53' | grep -oE '[0-9]{1,3}(\\.[0-9]{1,3}){3}' | while read line; do\n\t\t\t\techo \"push \\\"dhcp-option DNS $line\\\"\" >> \"$OVPN_CONF\"\n\t\t\tdone\n\t\t;;\n\t\t2|\"\")\n\t\t\techo 'push \"dhcp-option DNS 8.8.8.8\"' >> \"$OVPN_CONF\"\n\t\t\techo 'push \"dhcp-option DNS 8.8.4.4\"' >> \"$OVPN_CONF\"\n\t\t;;\n\t\t3)\n\t\t\techo 'push \"dhcp-option DNS 1.1.1.1\"' >> \"$OVPN_CONF\"\n\t\t\techo 'push \"dhcp-option DNS 1.0.0.1\"' >> \"$OVPN_CONF\"\n\t\t;;\n\t\t4)\n\t\t\techo 'push \"dhcp-option DNS 208.67.222.222\"' >> \"$OVPN_CONF\"\n\t\t\techo 'push \"dhcp-option DNS 208.67.220.220\"' >> \"$OVPN_CONF\"\n\t\t;;\n\t\t5)\n\t\t\techo 'push \"dhcp-option DNS 9.9.9.9\"' >> \"$OVPN_CONF\"\n\t\t\techo 'push \"dhcp-option DNS 149.112.112.112\"' >> \"$OVPN_CONF\"\n\t\t;;\n\t\t6)\n\t\t\techo 'push \"dhcp-option DNS 94.140.14.14\"' >> \"$OVPN_CONF\"\n\t\t\techo 'push \"dhcp-option DNS 94.140.15.15\"' >> \"$OVPN_CONF\"\n\t\t;;\n\t\t7)\n\t\t\techo \"push \\\"dhcp-option DNS $dns1\\\"\" >> \"$OVPN_CONF\"\n\t\t\tif [ -n \"$dns2\" ]; then\n\t\t\t\techo \"push \\\"dhcp-option DNS $dns2\\\"\" >> \"$OVPN_CONF\"\n\t\t\tfi\n\t\t;;\n\tesac\n}\n\ncreate_server_config() {\n\t# Generate server.conf\n\techo \"local $ip\nport $port\nproto $protocol\ndev tun\nca ca.crt\ncert server.crt\nkey server.key\ndh dh.pem\nauth SHA256\ntls-crypt tc.key\ntopology subnet\nserver 10.8.0.0 255.255.255.0\" > \"$OVPN_CONF\"\n\t# IPv6\n\tif [[ -z \"$ip6\" ]]; then\n\t\techo 'push \"block-ipv6\"' >> \"$OVPN_CONF\"\n\t\techo 'push \"ifconfig-ipv6 fddd:1194:1194:1194::2/64 fddd:1194:1194:1194::1\"' >> \"$OVPN_CONF\"\n\telse\n\t\techo 'server-ipv6 fddd:1194:1194:1194::/64' >> \"$OVPN_CONF\"\n\tfi\n\techo 'push \"redirect-gateway def1 ipv6 bypass-dhcp\"' >> \"$OVPN_CONF\"\n\techo 'ifconfig-pool-persist ipp.txt' >> \"$OVPN_CONF\"\n\tcreate_dns_config\n\techo 'push \"block-outside-dns\"' >> \"$OVPN_CONF\"\n\techo \"keepalive 10 120\ncipher AES-128-GCM\nuser nobody\ngroup $group_name\npersist-key\npersist-tun\nverb 3\ncrl-verify crl.pem\" >> \"$OVPN_CONF\"\n\tif [[ \"$protocol\" = \"udp\" ]]; then\n\t\techo \"explicit-exit-notify\" >> \"$OVPN_CONF\"\n\tfi\n}\n\nget_export_dir() {\n\texport_to_home_dir=0\n\texport_dir=~/\n\tif [ -n \"$SUDO_USER\" ] && getent group \"$SUDO_USER\" >/dev/null 2>&1; then\n\t\tuser_home_dir=$(getent passwd \"$SUDO_USER\" 2>/dev/null | cut -d: -f6)\n\t\tif [ -d \"$user_home_dir\" ] && [ \"$user_home_dir\" != \"/\" ]; then\n\t\t\texport_dir=\"$user_home_dir/\"\n\t\t\texport_to_home_dir=1\n\t\tfi\n\tfi\n}\n\nnew_client() {\n\tget_export_dir\n\t# Generates the custom client.ovpn\n\t{\n\tcat /etc/openvpn/server/client-common.txt\n\techo \"<ca>\"\n\tcat /etc/openvpn/server/easy-rsa/pki/ca.crt\n\techo \"</ca>\"\n\techo \"<cert>\"\n\tsed -ne '/BEGIN CERTIFICATE/,$ p' /etc/openvpn/server/easy-rsa/pki/issued/\"$client\".crt\n\techo \"</cert>\"\n\techo \"<key>\"\n\tcat /etc/openvpn/server/easy-rsa/pki/private/\"$client\".key\n\techo \"</key>\"\n\techo \"<tls-crypt>\"\n\tsed -ne '/BEGIN OpenVPN Static key/,$ p' /etc/openvpn/server/tc.key\n\techo \"</tls-crypt>\"\n\t} > \"$export_dir$client\".ovpn\n\tif [ \"$export_to_home_dir\" = 1 ]; then\n\t\tchown \"$SUDO_USER:$SUDO_USER\" \"$export_dir$client\".ovpn\n\tfi\n\tchmod 600 \"$export_dir$client\".ovpn\n}\n\nupdate_sysctl() {\n\tmkdir -p /etc/sysctl.d\n\tconf_fwd=\"/etc/sysctl.d/99-openvpn-forward.conf\"\n\tconf_opt=\"/etc/sysctl.d/99-openvpn-optimize.conf\"\n\t# Enable net.ipv4.ip_forward for the system\n\techo 'net.ipv4.ip_forward=1' > \"$conf_fwd\"\n\tif [[ -n \"$ip6\" ]]; then\n\t\t# Enable net.ipv6.conf.all.forwarding for the system\n\t\techo \"net.ipv6.conf.all.forwarding=1\" >> \"$conf_fwd\"\n\tfi\n\t# Optimize sysctl settings such as TCP buffer sizes\n\tbase_url=\"https://github.com/hwdsl2/vpn-extras/releases/download/v1.0.0\"\n\tconf_url=\"$base_url/sysctl-ovpn-$os\"\n\t[ \"$auto\" != 0 ] && conf_url=\"${conf_url}-auto\"\n\twget -t 3 -T 30 -q -O \"$conf_opt\" \"$conf_url\" 2>/dev/null \\\n\t\t|| curl -m 30 -fsL \"$conf_url\" -o \"$conf_opt\" 2>/dev/null \\\n\t\t|| { /bin/rm -f \"$conf_opt\"; touch \"$conf_opt\"; }\n\t# Enable TCP BBR congestion control if kernel version >= 4.20\n\tif modprobe -q tcp_bbr \\\n\t\t&& printf '%s\\n%s' \"4.20\" \"$(uname -r)\" | sort -C -V \\\n\t\t&& [ -f /proc/sys/net/ipv4/tcp_congestion_control ]; then\ncat >> \"$conf_opt\" <<'EOF'\nnet.core.default_qdisc = fq\nnet.ipv4.tcp_congestion_control = bbr\nEOF\n\tfi\n\t# Apply sysctl settings\n\tsysctl -e -q -p \"$conf_fwd\"\n\tsysctl -e -q -p \"$conf_opt\"\n}\n\nupdate_rclocal() {\n\tipt_cmd=\"systemctl restart openvpn-iptables.service\"\n\tif ! grep -qs \"$ipt_cmd\" /etc/rc.local; then\n\t\tif [ ! -f /etc/rc.local ]; then\n\t\t\techo '#!/bin/sh' > /etc/rc.local\n\t\telse\n\t\t\tif [ \"$os\" = \"ubuntu\" ] || [ \"$os\" = \"debian\" ]; then\n\t\t\t\tsed --follow-symlinks -i '/^exit 0/d' /etc/rc.local\n\t\t\tfi\n\t\tfi\ncat >> /etc/rc.local <<EOF\n\n$ipt_cmd\nEOF\n\t\tif [ \"$os\" = \"ubuntu\" ] || [ \"$os\" = \"debian\" ]; then\n\t\t\techo \"exit 0\" >> /etc/rc.local\n\t\tfi\n\t\tchmod +x /etc/rc.local\n\tfi\n}\n\nupdate_selinux() {\n\t# If SELinux is enabled and a custom port was selected, we need this\n\tif sestatus 2>/dev/null | grep \"Current mode\" | grep -q \"enforcing\" && [[ \"$port\" != 1194 ]]; then\n\t\t# Install semanage if not already present\n\t\tif ! hash semanage 2>/dev/null; then\n\t\t\tif [[ \"$os_version\" -eq 7 ]]; then\n\t\t\t\t# Centos 7\n\t\t\t\t(\n\t\t\t\t\tset -x\n\t\t\t\t\tyum -y -q install policycoreutils-python >/dev/null\n\t\t\t\t) || exiterr3\n\t\t\telse\n\t\t\t\t# CentOS 8/9 or Fedora\n\t\t\t\t(\n\t\t\t\t\tset -x\n\t\t\t\t\tdnf install -y policycoreutils-python-utils >/dev/null\n\t\t\t\t) || exiterr \"'dnf install' failed.\"\n\t\t\tfi\n\t\tfi\n\t\tsemanage port -a -t openvpn_port_t -p \"$protocol\" \"$port\"\n\tfi\n}\n\ncreate_client_common() {\n\t# If the server is behind NAT, use the correct IP address\n\t[[ -n \"$public_ip\" ]] && ip=\"$public_ip\"\n\t# client-common.txt is created so we have a template to add further users later\n\techo \"client\ndev tun\nproto $protocol\nremote $ip $port\nresolv-retry infinite\nnobind\npersist-key\npersist-tun\nremote-cert-tls server\nauth SHA256\ncipher AES-128-GCM\nignore-unknown-option block-outside-dns block-ipv6\nverb 3\" > /etc/openvpn/server/client-common.txt\n}\n\nstart_openvpn_service() {\n\tif [ \"$os\" != \"openSUSE\" ]; then\n\t\t(\n\t\t\tset -x\n\t\t\tsystemctl enable --now openvpn-server@server.service >/dev/null 2>&1\n\t\t)\n\telse\n\t\tln -s /etc/openvpn/server/* /etc/openvpn >/dev/null 2>&1\n\t\t(\n\t\t\tset -x\n\t\t\tsystemctl enable --now openvpn@server.service >/dev/null 2>&1\n\t\t)\n\tfi\n}\n\nfinish_setup() {\n\techo\n\techo \"Finished!\"\n\techo\n\techo \"The client configuration is available in: $export_dir$client.ovpn\"\n\techo \"New clients can be added by running this script again.\"\n}\n\nselect_menu_option() {\n\techo\n\techo \"OpenVPN is already installed.\"\n\techo\n\techo \"Select an option:\"\n\techo \"   1) Add a new client\"\n\techo \"   2) Export config for an existing client\"\n\techo \"   3) List existing clients\"\n\techo \"   4) Revoke an existing client\"\n\techo \"   5) Remove OpenVPN\"\n\techo \"   6) Exit\"\n\tread -rp \"Option: \" option\n\tuntil [[ \"$option\" =~ ^[1-6]$ ]]; do\n\t\techo \"$option: invalid selection.\"\n\t\tread -rp \"Option: \" option\n\tdone\n}\n\nshow_clients() {\n\ttail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep \"^V\" | cut -d '=' -f 2 | nl -s ') '\n}\n\nenter_client_name() {\n\techo\n\techo \"Provide a name for the client:\"\n\tread -rp \"Name: \" unsanitized_client\n\t[ -z \"$unsanitized_client\" ] && abort_and_exit\n\tset_client_name\n\twhile [[ -z \"$client\" || -e /etc/openvpn/server/easy-rsa/pki/issued/\"$client\".crt ]]; do\n\t\tif [ -z \"$client\" ]; then\n\t\t\techo \"Invalid client name. Use one word only, no special characters except '-' and '_'.\"\n\t\telse\n\t\t\techo \"$client: invalid name. Client already exists.\"\n\t\tfi\n\t\tread -rp \"Name: \" unsanitized_client\n\t\t[ -z \"$unsanitized_client\" ] && abort_and_exit\n\t\tset_client_name\n\tdone\n}\n\nbuild_client_config() {\n\tcd /etc/openvpn/server/easy-rsa/ || exit 1\n\t(\n\t\tset -x\n\t\t./easyrsa --batch --days=3650 build-client-full \"$client\" nopass >/dev/null 2>&1\n\t)\n}\n\nprint_client_action() {\n\techo\n\techo \"$client $1. Configuration available in: $export_dir$client.ovpn\"\n}\n\nprint_check_clients() {\n\techo\n\techo \"Checking for existing client(s)...\"\n}\n\ncheck_clients() {\n\tnum_of_clients=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep -c \"^V\")\n\tif [[ \"$num_of_clients\" = 0 ]]; then\n\t\techo\n\t\techo \"There are no existing clients!\"\n\t\texit 1\n\tfi\n}\n\nprint_client_total() {\n\tif [ \"$num_of_clients\" = 1 ]; then\n\t\tprintf '\\n%s\\n' \"Total: 1 client\"\n\telif [ -n \"$num_of_clients\" ]; then\n\t\tprintf '\\n%s\\n' \"Total: $num_of_clients clients\"\n\tfi\n}\n\nselect_client_to() {\n\techo\n\techo \"Select the client to $1:\"\n\tshow_clients\n\tread -rp \"Client: \" client_num\n\t[ -z \"$client_num\" ] && abort_and_exit\n\tuntil [[ \"$client_num\" =~ ^[0-9]+$ && \"$client_num\" -le \"$num_of_clients\" ]]; do\n\t\techo \"$client_num: invalid selection.\"\n\t\tread -rp \"Client: \" client_num\n\t\t[ -z \"$client_num\" ] && abort_and_exit\n\tdone\n\tclient=$(tail -n +2 /etc/openvpn/server/easy-rsa/pki/index.txt | grep \"^V\" | cut -d '=' -f 2 | sed -n \"$client_num\"p)\n}\n\nconfirm_revoke_client() {\n\tif [ \"$assume_yes\" != 1 ]; then\n\t\techo\n\t\tread -rp \"Confirm $client revocation? [y/N]: \" revoke\n\t\tuntil [[ \"$revoke\" =~ ^[yYnN]*$ ]]; do\n\t\t\techo \"$revoke: invalid selection.\"\n\t\t\tread -rp \"Confirm $client revocation? [y/N]: \" revoke\n\t\tdone\n\telse\n\t\trevoke=y\n\tfi\n}\n\nprint_revoke_client() {\n\techo\n\techo \"Revoking $client...\"\n}\n\nremove_client_conf() {\n\tget_export_dir\n\tovpn_file=\"$export_dir$client.ovpn\"\n\tif [ -f \"$ovpn_file\" ]; then\n\t\techo \"Removing $ovpn_file...\"\n\t\trm -f \"$ovpn_file\"\n\tfi\n}\n\nrevoke_client_ovpn() {\n\tcd /etc/openvpn/server/easy-rsa/ || exit 1\n\t(\n\t\tset -x\n\t\t./easyrsa --batch revoke \"$client\" >/dev/null 2>&1\n\t\t./easyrsa --batch --days=3650 gen-crl >/dev/null 2>&1\n\t)\n\trm -f /etc/openvpn/server/crl.pem\n\tcp /etc/openvpn/server/easy-rsa/pki/crl.pem /etc/openvpn/server/crl.pem\n\t# CRL is read with each client connection, when OpenVPN is dropped to nobody\n\tchown nobody:\"$group_name\" /etc/openvpn/server/crl.pem\n\tremove_client_conf\n}\n\nprint_client_revoked() {\n\techo\n\techo \"$client revoked!\"\n}\n\nprint_client_revocation_aborted() {\n\techo\n\techo \"$client revocation aborted!\"\n}\n\nconfirm_remove_ovpn() {\n\tif [ \"$assume_yes\" != 1 ]; then\n\t\techo\n\t\tread -rp \"Confirm OpenVPN removal? [y/N]: \" remove\n\t\tuntil [[ \"$remove\" =~ ^[yYnN]*$ ]]; do\n\t\t\techo \"$remove: invalid selection.\"\n\t\t\tread -rp \"Confirm OpenVPN removal? [y/N]: \" remove\n\t\tdone\n\telse\n\t\tremove=y\n\tfi\n}\n\nprint_remove_ovpn() {\n\techo\n\techo \"Removing OpenVPN, please wait...\"\n}\n\ndisable_ovpn_service() {\n\tif [ \"$os\" != \"openSUSE\" ]; then\n\t\tsystemctl disable --now openvpn-server@server.service\n\telse\n\t\tsystemctl disable --now openvpn@server.service\n\tfi\n\trm -f /etc/systemd/system/openvpn-server@server.service.d/disable-limitnproc.conf\n}\n\nremove_sysctl_rules() {\n\trm -f /etc/sysctl.d/99-openvpn-forward.conf /etc/sysctl.d/99-openvpn-optimize.conf\n\tif [ ! -f /usr/bin/wg-quick ] && [ ! -f /usr/sbin/ipsec ] \\\n\t\t&& [ ! -f /usr/local/sbin/ipsec ]; then\n\t\techo 0 > /proc/sys/net/ipv4/ip_forward\n\t\techo 0 > /proc/sys/net/ipv6/conf/all/forwarding\n\tfi\n}\n\nremove_rclocal_rules() {\n\tipt_cmd=\"systemctl restart openvpn-iptables.service\"\n\tif grep -qs \"$ipt_cmd\" /etc/rc.local; then\n\t\tsed --follow-symlinks -i \"/^$ipt_cmd/d\" /etc/rc.local\n\tfi\n}\n\nprint_ovpn_removed() {\n\techo\n\techo \"OpenVPN removed!\"\n}\n\nprint_ovpn_removal_aborted() {\n\techo\n\techo \"OpenVPN removal aborted!\"\n}\n\novpnsetup() {\n\nexport PATH=\"/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin\"\n\ncheck_root\ncheck_shell\ncheck_kernel\ncheck_os\ncheck_os_ver\ncheck_tun\n\nOVPN_CONF=\"/etc/openvpn/server/server.conf\"\n\nauto=0\nassume_yes=0\nadd_client=0\nexport_client=0\nlist_clients=0\nrevoke_client=0\nremove_ovpn=0\npublic_ip=\"\"\nlisten_addr=\"\"\nserver_addr=\"\"\nserver_proto=\"\"\nserver_port=\"\"\nfirst_client_name=\"\"\nunsanitized_client=\"\"\nclient=\"\"\ndns=\"\"\ndns1=\"\"\ndns2=\"\"\n\nparse_args \"$@\"\ncheck_args\n\nif [ \"$add_client\" = 1 ]; then\n\tshow_header\n\techo\n\tbuild_client_config\n\tnew_client\n\tprint_client_action added\n\texit 0\nfi\n\nif [ \"$export_client\" = 1 ]; then\n\tshow_header\n\tnew_client\n\tprint_client_action exported\n\texit 0\nfi\n\nif [ \"$list_clients\" = 1 ]; then\n\tshow_header\n\tprint_check_clients\n\tcheck_clients\n\techo\n\tshow_clients\n\tprint_client_total\n\texit 0\nfi\n\nif [ \"$revoke_client\" = 1 ]; then\n\tshow_header\n\tconfirm_revoke_client\n\tif [[ \"$revoke\" =~ ^[yY]$ ]]; then\n\t\tprint_revoke_client\n\t\trevoke_client_ovpn\n\t\tprint_client_revoked\n\t\texit 0\n\telse\n\t\tprint_client_revocation_aborted\n\t\texit 1\n\tfi\nfi\n\nif [ \"$remove_ovpn\" = 1 ]; then\n\tshow_header\n\tconfirm_remove_ovpn\n\tif [[ \"$remove\" =~ ^[yY]$ ]]; then\n\t\tprint_remove_ovpn\n\t\tremove_firewall_rules\n\t\tdisable_ovpn_service\n\t\tremove_sysctl_rules\n\t\tremove_rclocal_rules\n\t\tremove_pkgs\n\t\tprint_ovpn_removed\n\t\texit 0\n\telse\n\t\tprint_ovpn_removal_aborted\n\t\texit 1\n\tfi\nfi\n\nif [[ ! -e \"$OVPN_CONF\" ]]; then\n\tcheck_nftables\n\tinstall_wget\n\tinstall_iproute\n\tshow_welcome\n\tif [ \"$auto\" = 0 ]; then\n\t\tenter_server_address\n\telse\n\t\tif [ -n \"$listen_addr\" ]; then\n\t\t\tip=\"$listen_addr\"\n\t\telse\n\t\t\tdetect_ip\n\t\tfi\n\t\tif [ -n \"$server_addr\" ]; then\n\t\t\tpublic_ip=\"$server_addr\"\n\t\telse\n\t\t\tcheck_nat_ip\n\t\tfi\n\tfi\n\tshow_config\n\tdetect_ipv6\n\tselect_protocol\n\tselect_port\n\tif [ \"$auto\" = 0 ]; then\n\t\tselect_dns\n\tfi\n\tenter_first_client_name\n\tshow_setup_ready\n\tcheck_firewall\n\tconfirm_setup\n\tshow_start_setup\n\tdisable_limitnproc\n\tinstall_pkgs\n\tinstall_easyrsa\n\tcreate_pki_and_certs\n\tcreate_server_config\n\tupdate_sysctl\n\tcreate_firewall_rules\n\tif [ \"$os\" != \"openSUSE\" ]; then\n\t\tupdate_rclocal\n\tfi\n\tupdate_selinux\n\tcreate_client_common\n\tstart_openvpn_service\n\tnew_client\n\tif [ \"$auto\" != 0 ] && check_dns_name \"$server_addr\"; then\n\t\tshow_dns_name_note \"$server_addr\"\n\tfi\n\tfinish_setup\nelse\n\tshow_header\n\tselect_menu_option\n\tcase \"$option\" in\n\t\t1)\n\t\t\tenter_client_name\n\t\t\tbuild_client_config\n\t\t\tnew_client\n\t\t\tprint_client_action added\n\t\t\texit 0\n\t\t;;\n\t\t2)\n\t\t\tcheck_clients\n\t\t\tselect_client_to export\n\t\t\tnew_client\n\t\t\tprint_client_action exported\n\t\t\texit 0\n\t\t;;\n\t\t3)\n\t\t\tprint_check_clients\n\t\t\tcheck_clients\n\t\t\techo\n\t\t\tshow_clients\n\t\t\tprint_client_total\n\t\t\texit 0\n\t\t;;\n\t\t4)\n\t\t\tcheck_clients\n\t\t\tselect_client_to revoke\n\t\t\tconfirm_revoke_client\n\t\t\tif [[ \"$revoke\" =~ ^[yY]$ ]]; then\n\t\t\t\tprint_revoke_client\n\t\t\t\trevoke_client_ovpn\n\t\t\t\tprint_client_revoked\n\t\t\t\texit 0\n\t\t\telse\n\t\t\t\tprint_client_revocation_aborted\n\t\t\t\texit 1\n\t\t\tfi\n\t\t;;\n\t\t5)\n\t\t\tconfirm_remove_ovpn\n\t\t\tif [[ \"$remove\" =~ ^[yY]$ ]]; then\n\t\t\t\tprint_remove_ovpn\n\t\t\t\tremove_firewall_rules\n\t\t\t\tdisable_ovpn_service\n\t\t\t\tremove_sysctl_rules\n\t\t\t\tremove_rclocal_rules\n\t\t\t\tremove_pkgs\n\t\t\t\tprint_ovpn_removed\n\t\t\t\texit 0\n\t\t\telse\n\t\t\t\tprint_ovpn_removal_aborted\n\t\t\t\texit 1\n\t\t\tfi\n\t\t;;\n\t\t6)\n\t\t\texit 0\n\t\t;;\n\tesac\nfi\n}\n\n## Defer setup until we have the complete script\novpnsetup \"$@\"\n\nexit 0\n"
        }
      ]
    }
  ]
}