{
  "metadata": {
    "timestamp": 1736568717084,
    "page": 819,
    "hasNextPage": true,
    "endCursor": "Y3Vyc29yOjgyOQ==",
    "completionStatus": "IN_PROGRESS"
  },
  "repositories": [
    {
      "nameWithOwner": "dtolnay/rust-toolchain",
      "stars": 1197,
      "defaultBranch": "master",
      "files": [
        {
          "name": ".github",
          "type": "tree",
          "content": null
        },
        {
          "name": "LICENSE",
          "type": "blob",
          "size": 0.9990234375,
          "content": "Permission is hereby granted, free of charge, to any\nperson obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the\nSoftware without restriction, including without\nlimitation the rights to use, copy, modify, merge,\npublish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following\nconditions:\n\nThe above copyright notice and this permission notice\nshall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF\nANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\nPARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT\nSHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR\nIN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n"
        },
        {
          "name": "README.md",
          "type": "blob",
          "size": 2.6259765625,
          "content": "# Install Rust Toolchain\n\nThis GitHub Action installs a Rust toolchain using rustup. It is designed for\none-line concise usage and good defaults.\n\n<br>\n\n## Example workflow\n\n```yaml\nname: test suite\non: [push, pull_request]\n\njobs:\n  test:\n    name: cargo test\n    runs-on: ubuntu-latest\n    steps:\n      - uses: actions/checkout@v4\n      - uses: dtolnay/rust-toolchain@stable\n      - run: cargo test --all-features\n```\n\nThe selection of Rust toolchain is made based on the particular @rev of this\nAction being requested. For example \"dtolnay/rust-toolchain@nightly\" pulls in\nthe nightly Rust toolchain, while \"dtolnay/rust-toolchain@1.42.0\" pulls in\n1.42.0.\n\n<br>\n\n## Inputs\n\nAll inputs are optional.\n\n<table>\n<tr>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td><code>toolchain</code></td>\n  <td>\n    Rustup toolchain specifier e.g. <code>stable</code>, <code>nightly</code>, <code>1.42.0</code>, <code>nightly-2022-01-01</code>.\n    <b>Important: the default is to match the @rev as described above.</b>\n    When passing an explicit <code>toolchain</code> as an input instead of @rev, you'll want to use \"dtolnay/rust-toolchain@master\" as the revision of the action.\n  </td>\n</tr>\n<tr>\n  <td><code>targets</code></td>\n  <td>Comma-separated string of additional targets to install e.g. <code>wasm32-unknown-unknown</code></td>\n</tr>\n<tr>\n  <td><code>components</code></td>\n  <td>Comma-separated string of additional components to install e.g. <code>clippy, rustfmt</code></td>\n</tr>\n</table>\n\n<br>\n\n## Outputs\n\n<table>\n<tr>\n  <th>Name</th>\n  <th>Description</th>\n</tr>\n<tr>\n  <td><code>cachekey</code></td>\n  <td>A short hash of the installed rustc version, appropriate for use as a cache key. <code>\"20220627a831\"</code></td>\n</tr>\n<tr>\n  <td><code>name</code></td>\n  <td>Rustup's name for the selected version of the toolchain, like <code>\"1.62.0\"</code>. Suitable for use with <code>cargo +${{steps.toolchain.outputs.name}}</code>.</td>\n</tr>\n</table>\n\n<br>\n\n## Toolchain expressions\n\nThe following forms are available for projects that use a sliding window of\ncompiler support.\n\n```yaml\n     # Installs the most recent stable toolchain as of the specified time\n     # offset, which may be written in years, months, weeks, or days.\n  - uses: dtolnay/rust-toolchain@master\n    with:\n      toolchain: stable 18 months ago\n```\n\n```yaml\n     # Installs the stable toolchain which preceded the most recent one by\n     # the specified number of minor versions.\n  - uses: dtolnay/rust-toolchain@master\n    with:\n      toolchain: stable minus 8 releases\n```\n\n<br>\n\n## License\n\nThe scripts and documentation in this project are released under the [MIT\nLicense].\n\n[MIT License]: LICENSE\n"
        },
        {
          "name": "action.yml",
          "type": "blob",
          "size": 5.625,
          "content": "name: rustup toolchain install\nauthor: David Tolnay\ndescription: Install the Rust toolchain\nbranding:\n  icon: activity\n  color: purple\n\ninputs:\n  toolchain:\n    description: Rust toolchain specification -- see https://rust-lang.github.io/rustup/concepts/toolchains.html#toolchain-specification\n    required: true\n  targets:\n    description: Comma-separated list of target triples to install for this toolchain\n    required: false\n  target:\n    description: Alias for `targets`\n    required: false\n  components:\n    description: Comma-separated list of components to be additionally installed\n    required: false\n\noutputs:\n  cachekey:\n    description: A short hash of the rustc version, appropriate for use as a cache key. \"20220627a831\"\n    value: ${{steps.rustc-version.outputs.cachekey}}\n  name:\n    description: Rustup's name for the selected version of the toolchain. \"1.62.0\"  # suitable for use with `cargo +${{steps.toolchain.outputs.name}}`\n    value: ${{steps.parse.outputs.toolchain}}\n\nruns:\n  using: composite\n  steps:\n    - id: parse\n      run: |\n        : parse toolchain version\n        if [[ $toolchain =~ ^stable' '[0-9]+' '(year|month|week|day)s?' 'ago$ ]]; then\n          if [[ ${{runner.os}} == macOS ]]; then\n            echo \"toolchain=1.$((($(date -v-$(sed 's/stable \\([0-9]*\\) \\(.\\).*/\\1\\2/' <<< $toolchain) +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n          else\n            echo \"toolchain=1.$((($(date --date \"${toolchain#stable }\" +%s)/60/60/24-16569)/7/6))\" >> $GITHUB_OUTPUT\n          fi\n        elif [[ $toolchain =~ ^stable' 'minus' '[0-9]+' 'releases?$ ]]; then\n          echo \"toolchain=1.$((($(date +%s)/60/60/24-16569)/7/6-${toolchain//[^0-9]/}))\" >> $GITHUB_OUTPUT\n        elif [[ $toolchain =~ ^1\\.[0-9]+$ ]]; then\n          echo \"toolchain=1.$((i=${toolchain#1.}, c=($(date +%s)/60/60/24-16569)/7/6, i+9*i*(10*i<=c)+90*i*(100*i<=c)))\" >> $GITHUB_OUTPUT\n        else\n          echo \"toolchain=$toolchain\" >> $GITHUB_OUTPUT\n        fi\n      env:\n        toolchain: ${{inputs.toolchain}}\n      shell: bash\n\n    - id: flags\n      run: |\n        : construct rustup command line\n        echo \"targets=$(for t in ${targets//,/ }; do echo -n ' --target' $t; done)\" >> $GITHUB_OUTPUT\n        echo \"components=$(for c in ${components//,/ }; do echo -n ' --component' $c; done)\" >> $GITHUB_OUTPUT\n        echo \"downgrade=${{steps.parse.outputs.toolchain == 'nightly' && inputs.components && ' --allow-downgrade' || ''}}\" >> $GITHUB_OUTPUT\n      env:\n        targets: ${{inputs.targets || inputs.target || ''}}\n        components: ${{inputs.components}}\n      shell: bash\n\n    - run: |\n        : set $CARGO_HOME\n        echo CARGO_HOME=${CARGO_HOME:-${{runner.os == 'Windows' && '$USERPROFILE' || '$HOME'}}/.cargo} >> $GITHUB_ENV\n      shell: bash\n\n    - run: |\n        : install rustup if needed\n        if ! command -v rustup &>/dev/null; then\n          curl --proto '=https' --tlsv1.2 --retry 10 --retry-connrefused --location --silent --show-error --fail \"https://sh.rustup.rs\" | sh -s -- --default-toolchain none -y\n          echo \"$CARGO_HOME/bin\" >> $GITHUB_PATH\n        fi\n      if: runner.os != 'Windows'\n      shell: bash\n\n    - name: rustup toolchain install ${{steps.parse.outputs.toolchain}}\n      run: rustup toolchain install ${{steps.parse.outputs.toolchain}}${{steps.flags.outputs.targets}}${{steps.flags.outputs.components}} --profile minimal${{steps.flags.outputs.downgrade}} --no-self-update\n      shell: bash\n\n    - run: rustup default ${{steps.parse.outputs.toolchain}}\n      shell: bash\n      continue-on-error: true  # https://github.com/dtolnay/rust-toolchain/issues/127\n\n    - id: rustc-version\n      run: |\n        : create cachekey\n        DATE=$(rustc +${{steps.parse.outputs.toolchain}} --version --verbose | sed -ne 's/^commit-date: \\(20[0-9][0-9]\\)-\\([01][0-9]\\)-\\([0-3][0-9]\\)$/\\1\\2\\3/p')\n        HASH=$(rustc +${{steps.parse.outputs.toolchain}} --version --verbose | sed -ne 's/^commit-hash: //p')\n        echo \"cachekey=$(echo $DATE$HASH | head -c12)\" >> $GITHUB_OUTPUT\n      shell: bash\n\n    - run: |\n        : disable incremental compilation\n        if [ -z \"${CARGO_INCREMENTAL+set}\" ]; then\n          echo CARGO_INCREMENTAL=0 >> $GITHUB_ENV\n        fi\n      shell: bash\n\n    - run: |\n        : enable colors in Cargo output\n        if [ -z \"${CARGO_TERM_COLOR+set}\" ]; then\n          echo CARGO_TERM_COLOR=always >> $GITHUB_ENV\n        fi\n      shell: bash\n\n    - run: |\n        : enable Cargo sparse registry\n        # implemented in 1.66, stabilized in 1.68, made default in 1.70\n        if [ -z \"${CARGO_REGISTRIES_CRATES_IO_PROTOCOL+set}\" -o -f \"${{runner.temp}}\"/.implicit_cargo_registries_crates_io_protocol ]; then\n          if rustc +${{steps.parse.outputs.toolchain}} --version --verbose | grep -q '^release: 1\\.6[89]\\.'; then\n            touch \"${{runner.temp}}\"/.implicit_cargo_registries_crates_io_protocol || true\n            echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=sparse >> $GITHUB_ENV\n          elif rustc +${{steps.parse.outputs.toolchain}} --version --verbose | grep -q '^release: 1\\.6[67]\\.'; then\n            touch \"${{runner.temp}}\"/.implicit_cargo_registries_crates_io_protocol || true\n            echo CARGO_REGISTRIES_CRATES_IO_PROTOCOL=git >> $GITHUB_ENV\n          fi\n        fi\n      shell: bash\n\n    - run: |\n        : work around spurious network errors in curl 8.0\n        # https://rust-lang.zulipchat.com/#narrow/stream/246057-t-cargo/topic/timeout.20investigation\n        if rustc +${{steps.parse.outputs.toolchain}} --version --verbose | grep -q '^release: 1\\.7[01]\\.'; then\n          echo CARGO_HTTP_MULTIPLEXING=false >> $GITHUB_ENV\n        fi\n      shell: bash\n\n    - run: rustc +${{steps.parse.outputs.toolchain}} --version --verbose\n      shell: bash\n"
        },
        {
          "name": "scripts",
          "type": "tree",
          "content": null
        }
      ]
    }
  ]
}